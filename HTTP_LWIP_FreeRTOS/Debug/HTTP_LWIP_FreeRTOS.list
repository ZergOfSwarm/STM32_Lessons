
HTTP_LWIP_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016168  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003aa8  080162f8  080162f8  000262f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08019da0  08019da0  00030080  2**0
                  CONTENTS
  4 .ARM          00000008  08019da0  08019da0  00029da0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08019da8  08019da8  00030080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08019da8  08019da8  00029da8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08019dac  08019dac  00029dac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08019db0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030080  2**0
                  CONTENTS
 10 .bss          0000bd54  20000080  20000080  00030080  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000bdd4  2000bdd4  00030080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030080  2**0
                  CONTENTS, READONLY
 13 .debug_info   00045884  00000000  00000000  000300b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00008024  00000000  00000000  00075934  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002130  00000000  00000000  0007d958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001fd0  00000000  00000000  0007fa88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00011c5e  00000000  00000000  00081a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00033561  00000000  00000000  000936b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ef7d6  00000000  00000000  000c6c17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001b63ed  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009110  00000000  00000000  001b6440  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080162e0 	.word	0x080162e0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	080162e0 	.word	0x080162e0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <http_server_netconn_serve>:
 </body></html>";

 /** Serve one HTTP connection accepted in the http thread */
 static void
 http_server_netconn_serve(struct netconn *conn)
 {
 8000568:	b580      	push	{r7, lr}
 800056a:	b088      	sub	sp, #32
 800056c:	af02      	add	r7, sp, #8
 800056e:	6078      	str	r0, [r7, #4]
     char *buf;
     u16_t buflen;
     err_t err;

     /* читаем данные */
     err = netconn_recv(conn, &inbuf);
 8000570:	f107 0310 	add.w	r3, r7, #16
 8000574:	4619      	mov	r1, r3
 8000576:	6878      	ldr	r0, [r7, #4]
 8000578:	f007 fe94 	bl	80082a4 <netconn_recv>
 800057c:	4603      	mov	r3, r0
 800057e:	75fb      	strb	r3, [r7, #23]

     if (err == ERR_OK)
 8000580:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000584:	2b00      	cmp	r3, #0
 8000586:	d133      	bne.n	80005f0 <http_server_netconn_serve+0x88>
     {
         netbuf_data(inbuf, (void**)&buf, &buflen);
 8000588:	693b      	ldr	r3, [r7, #16]
 800058a:	f107 020a 	add.w	r2, r7, #10
 800058e:	f107 010c 	add.w	r1, r7, #12
 8000592:	4618      	mov	r0, r3
 8000594:	f009 fc1c 	bl	8009dd0 <netbuf_data>

         /* Суждение - это команда Get для HTTP*/
         if (buflen>=5 &&
 8000598:	897b      	ldrh	r3, [r7, #10]
 800059a:	2b04      	cmp	r3, #4
 800059c:	d928      	bls.n	80005f0 <http_server_netconn_serve+0x88>
                 buf[0]=='G' &&
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	781b      	ldrb	r3, [r3, #0]
         if (buflen>=5 &&
 80005a2:	2b47      	cmp	r3, #71	; 0x47
 80005a4:	d124      	bne.n	80005f0 <http_server_netconn_serve+0x88>
                 buf[1]=='E' &&
 80005a6:	68fb      	ldr	r3, [r7, #12]
 80005a8:	3301      	adds	r3, #1
 80005aa:	781b      	ldrb	r3, [r3, #0]
                 buf[0]=='G' &&
 80005ac:	2b45      	cmp	r3, #69	; 0x45
 80005ae:	d11f      	bne.n	80005f0 <http_server_netconn_serve+0x88>
                 buf[2]=='T' &&
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	3302      	adds	r3, #2
 80005b4:	781b      	ldrb	r3, [r3, #0]
                 buf[1]=='E' &&
 80005b6:	2b54      	cmp	r3, #84	; 0x54
 80005b8:	d11a      	bne.n	80005f0 <http_server_netconn_serve+0x88>
                 buf[3]==' ' &&
 80005ba:	68fb      	ldr	r3, [r7, #12]
 80005bc:	3303      	adds	r3, #3
 80005be:	781b      	ldrb	r3, [r3, #0]
                 buf[2]=='T' &&
 80005c0:	2b20      	cmp	r3, #32
 80005c2:	d115      	bne.n	80005f0 <http_server_netconn_serve+0x88>
                 buf[4]=='/' )
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	3304      	adds	r3, #4
 80005c8:	781b      	ldrb	r3, [r3, #0]
                 buf[3]==' ' &&
 80005ca:	2b2f      	cmp	r3, #47	; 0x2f
 80005cc:	d110      	bne.n	80005f0 <http_server_netconn_serve+0x88>
         {

             /* Отправка данных */
             netconn_write(conn, http_html_hdr,
 80005ce:	2300      	movs	r3, #0
 80005d0:	9300      	str	r3, [sp, #0]
 80005d2:	2300      	movs	r3, #0
 80005d4:	222c      	movs	r2, #44	; 0x2c
 80005d6:	490c      	ldr	r1, [pc, #48]	; (8000608 <http_server_netconn_serve+0xa0>)
 80005d8:	6878      	ldr	r0, [r7, #4]
 80005da:	f007 fedd 	bl	8008398 <netconn_write_partly>
             sizeof(http_html_hdr)-1, NETCONN_NOCOPY);
             /* Отправка данных веб-страницы */
             netconn_write(conn, http_index_html,
 80005de:	2300      	movs	r3, #0
 80005e0:	9300      	str	r3, [sp, #0]
 80005e2:	2300      	movs	r3, #0
 80005e4:	f44f 72f9 	mov.w	r2, #498	; 0x1f2
 80005e8:	4908      	ldr	r1, [pc, #32]	; (800060c <http_server_netconn_serve+0xa4>)
 80005ea:	6878      	ldr	r0, [r7, #4]
 80005ec:	f007 fed4 	bl	8008398 <netconn_write_partly>
                 sizeof(http_index_html)-1, NETCONN_NOCOPY);
         }
     }
     netconn_close(conn); /* Выключить соединение */
 80005f0:	6878      	ldr	r0, [r7, #4]
 80005f2:	f007 ffd3 	bl	800859c <netconn_close>

     /* Выпуск INBUF */
     netbuf_delete(inbuf);
 80005f6:	693b      	ldr	r3, [r7, #16]
 80005f8:	4618      	mov	r0, r3
 80005fa:	f009 fbc9 	bl	8009d90 <netbuf_delete>
 }
 80005fe:	bf00      	nop
 8000600:	3718      	adds	r7, #24
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	080198cc 	.word	0x080198cc
 800060c:	080198fc 	.word	0x080198fc

08000610 <http_server_netconn_thread>:

 /** The main function, never returns! */
 static void
 http_server_netconn_thread(void *arg)
 {
 8000610:	b580      	push	{r7, lr}
 8000612:	b086      	sub	sp, #24
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
     err_t err;
     LWIP_UNUSED_ARG(arg);

     /* Создать структуру подключения Netconn*/
     /* Номер порта 80 и IP-адрес*/
     conn = netconn_new(NETCONN_TCP);
 8000618:	2200      	movs	r2, #0
 800061a:	2100      	movs	r1, #0
 800061c:	2010      	movs	r0, #16
 800061e:	f007 fb1b 	bl	8007c58 <netconn_new_with_proto_and_callback>
 8000622:	6178      	str	r0, [r7, #20]
     netconn_bind(conn, IP_ADDR_ANY, 80);
 8000624:	2250      	movs	r2, #80	; 0x50
 8000626:	4919      	ldr	r1, [pc, #100]	; (800068c <http_server_netconn_thread+0x7c>)
 8000628:	6978      	ldr	r0, [r7, #20]
 800062a:	f007 fbcf 	bl	8007dcc <netconn_bind>

     LWIP_ERROR("http_server: invalid conn", (conn != NULL), return;);
 800062e:	697b      	ldr	r3, [r7, #20]
 8000630:	2b00      	cmp	r3, #0
 8000632:	d106      	bne.n	8000642 <http_server_netconn_thread+0x32>
 8000634:	4b16      	ldr	r3, [pc, #88]	; (8000690 <http_server_netconn_thread+0x80>)
 8000636:	224e      	movs	r2, #78	; 0x4e
 8000638:	4916      	ldr	r1, [pc, #88]	; (8000694 <http_server_netconn_thread+0x84>)
 800063a:	4817      	ldr	r0, [pc, #92]	; (8000698 <http_server_netconn_thread+0x88>)
 800063c:	f014 ff1e 	bl	801547c <iprintf>
 8000640:	e021      	b.n	8000686 <http_server_netconn_thread+0x76>

     /* 监听 */
     netconn_listen(conn);
 8000642:	21ff      	movs	r1, #255	; 0xff
 8000644:	6978      	ldr	r0, [r7, #20]
 8000646:	f007 fbf9 	bl	8007e3c <netconn_listen_with_backlog>

     do
     {
         //Запрос на обработку подключения
         err = netconn_accept(conn, &newconn);
 800064a:	f107 030c 	add.w	r3, r7, #12
 800064e:	4619      	mov	r1, r3
 8000650:	6978      	ldr	r0, [r7, #20]
 8000652:	f007 fc1f 	bl	8007e94 <netconn_accept>
 8000656:	4603      	mov	r3, r0
 8000658:	74fb      	strb	r3, [r7, #19]
         if (err == ERR_OK)
 800065a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800065e:	2b00      	cmp	r3, #0
 8000660:	d107      	bne.n	8000672 <http_server_netconn_thread+0x62>
         {
             //Отправить данные веб-страницы
             http_server_netconn_serve(newconn);
 8000662:	68fb      	ldr	r3, [r7, #12]
 8000664:	4618      	mov	r0, r3
 8000666:	f7ff ff7f 	bl	8000568 <http_server_netconn_serve>

             //Удалить структуру подключения
             netconn_delete(newconn);
 800066a:	68fb      	ldr	r3, [r7, #12]
 800066c:	4618      	mov	r0, r3
 800066e:	f007 fb91 	bl	8007d94 <netconn_delete>
         }
     }
     while (err == ERR_OK);
 8000672:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000676:	2b00      	cmp	r3, #0
 8000678:	d0e7      	beq.n	800064a <http_server_netconn_thread+0x3a>
     //закрытие
     netconn_close(conn);
 800067a:	6978      	ldr	r0, [r7, #20]
 800067c:	f007 ff8e 	bl	800859c <netconn_close>
     netconn_delete(conn);
 8000680:	6978      	ldr	r0, [r7, #20]
 8000682:	f007 fb87 	bl	8007d94 <netconn_delete>
 }
 8000686:	3718      	adds	r7, #24
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	08019c40 	.word	0x08019c40
 8000690:	080162f8 	.word	0x080162f8
 8000694:	0801631c 	.word	0x0801631c
 8000698:	08016338 	.word	0x08016338

0800069c <http_server_netconn_init>:

 /** Initialize the HTTP server (start its thread) */
 void
 http_server_netconn_init(void)
 {
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af02      	add	r7, sp, #8
 sys_thread_new("http_server_netconn", http_server_netconn_thread, NULL, 2048, 4);
 80006a2:	2304      	movs	r3, #4
 80006a4:	9300      	str	r3, [sp, #0]
 80006a6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80006aa:	2200      	movs	r2, #0
 80006ac:	4903      	ldr	r1, [pc, #12]	; (80006bc <http_server_netconn_init+0x20>)
 80006ae:	4804      	ldr	r0, [pc, #16]	; (80006c0 <http_server_netconn_init+0x24>)
 80006b0:	f014 fd0a 	bl	80150c8 <sys_thread_new>
 }
 80006b4:	bf00      	nop
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	08000611 	.word	0x08000611
 80006c0:	08016360 	.word	0x08016360

080006c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006c8:	f000 faa0 	bl	8000c0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006cc:	f000 f816 	bl	80006fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006d0:	f000 f87e 	bl	80007d0 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80006d4:	f003 fc16 	bl	8003f04 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80006d8:	4a05      	ldr	r2, [pc, #20]	; (80006f0 <main+0x2c>)
 80006da:	2100      	movs	r1, #0
 80006dc:	4805      	ldr	r0, [pc, #20]	; (80006f4 <main+0x30>)
 80006de:	f003 fc70 	bl	8003fc2 <osThreadNew>
 80006e2:	4603      	mov	r3, r0
 80006e4:	4a04      	ldr	r2, [pc, #16]	; (80006f8 <main+0x34>)
 80006e6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80006e8:	f003 fc30 	bl	8003f4c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006ec:	e7fe      	b.n	80006ec <main+0x28>
 80006ee:	bf00      	nop
 80006f0:	08019af0 	.word	0x08019af0
 80006f4:	08000859 	.word	0x08000859
 80006f8:	20004c10 	.word	0x20004c10

080006fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b094      	sub	sp, #80	; 0x50
 8000700:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000702:	f107 0320 	add.w	r3, r7, #32
 8000706:	2230      	movs	r2, #48	; 0x30
 8000708:	2100      	movs	r1, #0
 800070a:	4618      	mov	r0, r3
 800070c:	f014 fe53 	bl	80153b6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000710:	f107 030c 	add.w	r3, r7, #12
 8000714:	2200      	movs	r2, #0
 8000716:	601a      	str	r2, [r3, #0]
 8000718:	605a      	str	r2, [r3, #4]
 800071a:	609a      	str	r2, [r3, #8]
 800071c:	60da      	str	r2, [r3, #12]
 800071e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000720:	2300      	movs	r3, #0
 8000722:	60bb      	str	r3, [r7, #8]
 8000724:	4b28      	ldr	r3, [pc, #160]	; (80007c8 <SystemClock_Config+0xcc>)
 8000726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000728:	4a27      	ldr	r2, [pc, #156]	; (80007c8 <SystemClock_Config+0xcc>)
 800072a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800072e:	6413      	str	r3, [r2, #64]	; 0x40
 8000730:	4b25      	ldr	r3, [pc, #148]	; (80007c8 <SystemClock_Config+0xcc>)
 8000732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000734:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000738:	60bb      	str	r3, [r7, #8]
 800073a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800073c:	2300      	movs	r3, #0
 800073e:	607b      	str	r3, [r7, #4]
 8000740:	4b22      	ldr	r3, [pc, #136]	; (80007cc <SystemClock_Config+0xd0>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	4a21      	ldr	r2, [pc, #132]	; (80007cc <SystemClock_Config+0xd0>)
 8000746:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800074a:	6013      	str	r3, [r2, #0]
 800074c:	4b1f      	ldr	r3, [pc, #124]	; (80007cc <SystemClock_Config+0xd0>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000754:	607b      	str	r3, [r7, #4]
 8000756:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000758:	2301      	movs	r3, #1
 800075a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800075c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000760:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000762:	2302      	movs	r3, #2
 8000764:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000766:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800076a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800076c:	2304      	movs	r3, #4
 800076e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000770:	23a8      	movs	r3, #168	; 0xa8
 8000772:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000774:	2302      	movs	r3, #2
 8000776:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000778:	2304      	movs	r3, #4
 800077a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800077c:	f107 0320 	add.w	r3, r7, #32
 8000780:	4618      	mov	r0, r3
 8000782:	f001 fecd 	bl	8002520 <HAL_RCC_OscConfig>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800078c:	f000 f882 	bl	8000894 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000790:	230f      	movs	r3, #15
 8000792:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000794:	2302      	movs	r3, #2
 8000796:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000798:	2300      	movs	r3, #0
 800079a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800079c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007a0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007a6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007a8:	f107 030c 	add.w	r3, r7, #12
 80007ac:	2105      	movs	r1, #5
 80007ae:	4618      	mov	r0, r3
 80007b0:	f002 f92e 	bl	8002a10 <HAL_RCC_ClockConfig>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80007ba:	f000 f86b 	bl	8000894 <Error_Handler>
  }
}
 80007be:	bf00      	nop
 80007c0:	3750      	adds	r7, #80	; 0x50
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	40023800 	.word	0x40023800
 80007cc:	40007000 	.word	0x40007000

080007d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b085      	sub	sp, #20
 80007d4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	60fb      	str	r3, [r7, #12]
 80007da:	4b1e      	ldr	r3, [pc, #120]	; (8000854 <MX_GPIO_Init+0x84>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	4a1d      	ldr	r2, [pc, #116]	; (8000854 <MX_GPIO_Init+0x84>)
 80007e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007e4:	6313      	str	r3, [r2, #48]	; 0x30
 80007e6:	4b1b      	ldr	r3, [pc, #108]	; (8000854 <MX_GPIO_Init+0x84>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007ee:	60fb      	str	r3, [r7, #12]
 80007f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	60bb      	str	r3, [r7, #8]
 80007f6:	4b17      	ldr	r3, [pc, #92]	; (8000854 <MX_GPIO_Init+0x84>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	4a16      	ldr	r2, [pc, #88]	; (8000854 <MX_GPIO_Init+0x84>)
 80007fc:	f043 0304 	orr.w	r3, r3, #4
 8000800:	6313      	str	r3, [r2, #48]	; 0x30
 8000802:	4b14      	ldr	r3, [pc, #80]	; (8000854 <MX_GPIO_Init+0x84>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	f003 0304 	and.w	r3, r3, #4
 800080a:	60bb      	str	r3, [r7, #8]
 800080c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	607b      	str	r3, [r7, #4]
 8000812:	4b10      	ldr	r3, [pc, #64]	; (8000854 <MX_GPIO_Init+0x84>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	4a0f      	ldr	r2, [pc, #60]	; (8000854 <MX_GPIO_Init+0x84>)
 8000818:	f043 0301 	orr.w	r3, r3, #1
 800081c:	6313      	str	r3, [r2, #48]	; 0x30
 800081e:	4b0d      	ldr	r3, [pc, #52]	; (8000854 <MX_GPIO_Init+0x84>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	f003 0301 	and.w	r3, r3, #1
 8000826:	607b      	str	r3, [r7, #4]
 8000828:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	603b      	str	r3, [r7, #0]
 800082e:	4b09      	ldr	r3, [pc, #36]	; (8000854 <MX_GPIO_Init+0x84>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	4a08      	ldr	r2, [pc, #32]	; (8000854 <MX_GPIO_Init+0x84>)
 8000834:	f043 0302 	orr.w	r3, r3, #2
 8000838:	6313      	str	r3, [r2, #48]	; 0x30
 800083a:	4b06      	ldr	r3, [pc, #24]	; (8000854 <MX_GPIO_Init+0x84>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	f003 0302 	and.w	r3, r3, #2
 8000842:	603b      	str	r3, [r7, #0]
 8000844:	683b      	ldr	r3, [r7, #0]

}
 8000846:	bf00      	nop
 8000848:	3714      	adds	r7, #20
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	40023800 	.word	0x40023800

08000858 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000860:	f002 fd9e 	bl	80033a0 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  http_server_netconn_init();
 8000864:	f7ff ff1a 	bl	800069c <http_server_netconn_init>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000868:	2001      	movs	r0, #1
 800086a:	f003 fc3c 	bl	80040e6 <osDelay>
 800086e:	e7fb      	b.n	8000868 <StartDefaultTask+0x10>

08000870 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4a04      	ldr	r2, [pc, #16]	; (8000890 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800087e:	4293      	cmp	r3, r2
 8000880:	d101      	bne.n	8000886 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000882:	f000 f9e5 	bl	8000c50 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000886:	bf00      	nop
 8000888:	3708      	adds	r7, #8
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	40002000 	.word	0x40002000

08000894 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000898:	b672      	cpsid	i
}
 800089a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800089c:	e7fe      	b.n	800089c <Error_Handler+0x8>
	...

080008a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	607b      	str	r3, [r7, #4]
 80008aa:	4b12      	ldr	r3, [pc, #72]	; (80008f4 <HAL_MspInit+0x54>)
 80008ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ae:	4a11      	ldr	r2, [pc, #68]	; (80008f4 <HAL_MspInit+0x54>)
 80008b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008b4:	6453      	str	r3, [r2, #68]	; 0x44
 80008b6:	4b0f      	ldr	r3, [pc, #60]	; (80008f4 <HAL_MspInit+0x54>)
 80008b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008be:	607b      	str	r3, [r7, #4]
 80008c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	603b      	str	r3, [r7, #0]
 80008c6:	4b0b      	ldr	r3, [pc, #44]	; (80008f4 <HAL_MspInit+0x54>)
 80008c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ca:	4a0a      	ldr	r2, [pc, #40]	; (80008f4 <HAL_MspInit+0x54>)
 80008cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008d0:	6413      	str	r3, [r2, #64]	; 0x40
 80008d2:	4b08      	ldr	r3, [pc, #32]	; (80008f4 <HAL_MspInit+0x54>)
 80008d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008da:	603b      	str	r3, [r7, #0]
 80008dc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008de:	2200      	movs	r2, #0
 80008e0:	210f      	movs	r1, #15
 80008e2:	f06f 0001 	mvn.w	r0, #1
 80008e6:	f000 faaf 	bl	8000e48 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ea:	bf00      	nop
 80008ec:	3708      	adds	r7, #8
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	40023800 	.word	0x40023800

080008f8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b08c      	sub	sp, #48	; 0x30
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000900:	2300      	movs	r3, #0
 8000902:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000904:	2300      	movs	r3, #0
 8000906:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority ,0);
 8000908:	2200      	movs	r2, #0
 800090a:	6879      	ldr	r1, [r7, #4]
 800090c:	202d      	movs	r0, #45	; 0x2d
 800090e:	f000 fa9b 	bl	8000e48 <HAL_NVIC_SetPriority>

  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8000912:	202d      	movs	r0, #45	; 0x2d
 8000914:	f000 fab4 	bl	8000e80 <HAL_NVIC_EnableIRQ>

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8000918:	2300      	movs	r3, #0
 800091a:	60fb      	str	r3, [r7, #12]
 800091c:	4b1f      	ldr	r3, [pc, #124]	; (800099c <HAL_InitTick+0xa4>)
 800091e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000920:	4a1e      	ldr	r2, [pc, #120]	; (800099c <HAL_InitTick+0xa4>)
 8000922:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000926:	6413      	str	r3, [r2, #64]	; 0x40
 8000928:	4b1c      	ldr	r3, [pc, #112]	; (800099c <HAL_InitTick+0xa4>)
 800092a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800092c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000930:	60fb      	str	r3, [r7, #12]
 8000932:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000934:	f107 0210 	add.w	r2, r7, #16
 8000938:	f107 0314 	add.w	r3, r7, #20
 800093c:	4611      	mov	r1, r2
 800093e:	4618      	mov	r0, r3
 8000940:	f002 fa4e 	bl	8002de0 <HAL_RCC_GetClockConfig>

  /* Compute TIM14 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000944:	f002 fa38 	bl	8002db8 <HAL_RCC_GetPCLK1Freq>
 8000948:	4603      	mov	r3, r0
 800094a:	005b      	lsls	r3, r3, #1
 800094c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800094e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000950:	4a13      	ldr	r2, [pc, #76]	; (80009a0 <HAL_InitTick+0xa8>)
 8000952:	fba2 2303 	umull	r2, r3, r2, r3
 8000956:	0c9b      	lsrs	r3, r3, #18
 8000958:	3b01      	subs	r3, #1
 800095a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 800095c:	4b11      	ldr	r3, [pc, #68]	; (80009a4 <HAL_InitTick+0xac>)
 800095e:	4a12      	ldr	r2, [pc, #72]	; (80009a8 <HAL_InitTick+0xb0>)
 8000960:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8000962:	4b10      	ldr	r3, [pc, #64]	; (80009a4 <HAL_InitTick+0xac>)
 8000964:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000968:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 800096a:	4a0e      	ldr	r2, [pc, #56]	; (80009a4 <HAL_InitTick+0xac>)
 800096c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800096e:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8000970:	4b0c      	ldr	r3, [pc, #48]	; (80009a4 <HAL_InitTick+0xac>)
 8000972:	2200      	movs	r2, #0
 8000974:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000976:	4b0b      	ldr	r3, [pc, #44]	; (80009a4 <HAL_InitTick+0xac>)
 8000978:	2200      	movs	r2, #0
 800097a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 800097c:	4809      	ldr	r0, [pc, #36]	; (80009a4 <HAL_InitTick+0xac>)
 800097e:	f002 fa61 	bl	8002e44 <HAL_TIM_Base_Init>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d104      	bne.n	8000992 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
 8000988:	4806      	ldr	r0, [pc, #24]	; (80009a4 <HAL_InitTick+0xac>)
 800098a:	f002 fab5 	bl	8002ef8 <HAL_TIM_Base_Start_IT>
 800098e:	4603      	mov	r3, r0
 8000990:	e000      	b.n	8000994 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000992:	2301      	movs	r3, #1
}
 8000994:	4618      	mov	r0, r3
 8000996:	3730      	adds	r7, #48	; 0x30
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	40023800 	.word	0x40023800
 80009a0:	431bde83 	.word	0x431bde83
 80009a4:	200054a0 	.word	0x200054a0
 80009a8:	40002000 	.word	0x40002000

080009ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009b0:	e7fe      	b.n	80009b0 <NMI_Handler+0x4>

080009b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009b2:	b480      	push	{r7}
 80009b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009b6:	e7fe      	b.n	80009b6 <HardFault_Handler+0x4>

080009b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009bc:	e7fe      	b.n	80009bc <MemManage_Handler+0x4>

080009be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009be:	b480      	push	{r7}
 80009c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009c2:	e7fe      	b.n	80009c2 <BusFault_Handler+0x4>

080009c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009c8:	e7fe      	b.n	80009c8 <UsageFault_Handler+0x4>

080009ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009ca:	b480      	push	{r7}
 80009cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009ce:	bf00      	nop
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr

080009d8 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80009dc:	4802      	ldr	r0, [pc, #8]	; (80009e8 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 80009de:	f002 fafb 	bl	8002fd8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80009e2:	bf00      	nop
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	200054a0 	.word	0x200054a0

080009ec <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80009f0:	4802      	ldr	r0, [pc, #8]	; (80009fc <ETH_IRQHandler+0x10>)
 80009f2:	f000 fe37 	bl	8001664 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 80009f6:	bf00      	nop
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	20006e34 	.word	0x20006e34

08000a00 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
	return 1;
 8000a04:	2301      	movs	r3, #1
}
 8000a06:	4618      	mov	r0, r3
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0e:	4770      	bx	lr

08000a10 <_kill>:

int _kill(int pid, int sig)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
 8000a18:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000a1a:	4b05      	ldr	r3, [pc, #20]	; (8000a30 <_kill+0x20>)
 8000a1c:	2216      	movs	r2, #22
 8000a1e:	601a      	str	r2, [r3, #0]
	return -1;
 8000a20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000a24:	4618      	mov	r0, r3
 8000a26:	370c      	adds	r7, #12
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr
 8000a30:	2000bdc0 	.word	0x2000bdc0

08000a34 <_exit>:

void _exit (int status)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000a3c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000a40:	6878      	ldr	r0, [r7, #4]
 8000a42:	f7ff ffe5 	bl	8000a10 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000a46:	e7fe      	b.n	8000a46 <_exit+0x12>

08000a48 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b086      	sub	sp, #24
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	60f8      	str	r0, [r7, #12]
 8000a50:	60b9      	str	r1, [r7, #8]
 8000a52:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a54:	2300      	movs	r3, #0
 8000a56:	617b      	str	r3, [r7, #20]
 8000a58:	e00a      	b.n	8000a70 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000a5a:	f3af 8000 	nop.w
 8000a5e:	4601      	mov	r1, r0
 8000a60:	68bb      	ldr	r3, [r7, #8]
 8000a62:	1c5a      	adds	r2, r3, #1
 8000a64:	60ba      	str	r2, [r7, #8]
 8000a66:	b2ca      	uxtb	r2, r1
 8000a68:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a6a:	697b      	ldr	r3, [r7, #20]
 8000a6c:	3301      	adds	r3, #1
 8000a6e:	617b      	str	r3, [r7, #20]
 8000a70:	697a      	ldr	r2, [r7, #20]
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	429a      	cmp	r2, r3
 8000a76:	dbf0      	blt.n	8000a5a <_read+0x12>
	}

return len;
 8000a78:	687b      	ldr	r3, [r7, #4]
}
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	3718      	adds	r7, #24
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}

08000a82 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a82:	b580      	push	{r7, lr}
 8000a84:	b086      	sub	sp, #24
 8000a86:	af00      	add	r7, sp, #0
 8000a88:	60f8      	str	r0, [r7, #12]
 8000a8a:	60b9      	str	r1, [r7, #8]
 8000a8c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a8e:	2300      	movs	r3, #0
 8000a90:	617b      	str	r3, [r7, #20]
 8000a92:	e009      	b.n	8000aa8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000a94:	68bb      	ldr	r3, [r7, #8]
 8000a96:	1c5a      	adds	r2, r3, #1
 8000a98:	60ba      	str	r2, [r7, #8]
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aa2:	697b      	ldr	r3, [r7, #20]
 8000aa4:	3301      	adds	r3, #1
 8000aa6:	617b      	str	r3, [r7, #20]
 8000aa8:	697a      	ldr	r2, [r7, #20]
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	429a      	cmp	r2, r3
 8000aae:	dbf1      	blt.n	8000a94 <_write+0x12>
	}
	return len;
 8000ab0:	687b      	ldr	r3, [r7, #4]
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	3718      	adds	r7, #24
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}

08000aba <_close>:

int _close(int file)
{
 8000aba:	b480      	push	{r7}
 8000abc:	b083      	sub	sp, #12
 8000abe:	af00      	add	r7, sp, #0
 8000ac0:	6078      	str	r0, [r7, #4]
	return -1;
 8000ac2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	370c      	adds	r7, #12
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr

08000ad2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ad2:	b480      	push	{r7}
 8000ad4:	b083      	sub	sp, #12
 8000ad6:	af00      	add	r7, sp, #0
 8000ad8:	6078      	str	r0, [r7, #4]
 8000ada:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ae2:	605a      	str	r2, [r3, #4]
	return 0;
 8000ae4:	2300      	movs	r3, #0
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	370c      	adds	r7, #12
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr

08000af2 <_isatty>:

int _isatty(int file)
{
 8000af2:	b480      	push	{r7}
 8000af4:	b083      	sub	sp, #12
 8000af6:	af00      	add	r7, sp, #0
 8000af8:	6078      	str	r0, [r7, #4]
	return 1;
 8000afa:	2301      	movs	r3, #1
}
 8000afc:	4618      	mov	r0, r3
 8000afe:	370c      	adds	r7, #12
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr

08000b08 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b085      	sub	sp, #20
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	60f8      	str	r0, [r7, #12]
 8000b10:	60b9      	str	r1, [r7, #8]
 8000b12:	607a      	str	r2, [r7, #4]
	return 0;
 8000b14:	2300      	movs	r3, #0
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	3714      	adds	r7, #20
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
	...

08000b24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b087      	sub	sp, #28
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b2c:	4a14      	ldr	r2, [pc, #80]	; (8000b80 <_sbrk+0x5c>)
 8000b2e:	4b15      	ldr	r3, [pc, #84]	; (8000b84 <_sbrk+0x60>)
 8000b30:	1ad3      	subs	r3, r2, r3
 8000b32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b34:	697b      	ldr	r3, [r7, #20]
 8000b36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b38:	4b13      	ldr	r3, [pc, #76]	; (8000b88 <_sbrk+0x64>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d102      	bne.n	8000b46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b40:	4b11      	ldr	r3, [pc, #68]	; (8000b88 <_sbrk+0x64>)
 8000b42:	4a12      	ldr	r2, [pc, #72]	; (8000b8c <_sbrk+0x68>)
 8000b44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b46:	4b10      	ldr	r3, [pc, #64]	; (8000b88 <_sbrk+0x64>)
 8000b48:	681a      	ldr	r2, [r3, #0]
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	4413      	add	r3, r2
 8000b4e:	693a      	ldr	r2, [r7, #16]
 8000b50:	429a      	cmp	r2, r3
 8000b52:	d205      	bcs.n	8000b60 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000b54:	4b0e      	ldr	r3, [pc, #56]	; (8000b90 <_sbrk+0x6c>)
 8000b56:	220c      	movs	r2, #12
 8000b58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b5e:	e009      	b.n	8000b74 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b60:	4b09      	ldr	r3, [pc, #36]	; (8000b88 <_sbrk+0x64>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b66:	4b08      	ldr	r3, [pc, #32]	; (8000b88 <_sbrk+0x64>)
 8000b68:	681a      	ldr	r2, [r3, #0]
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	4413      	add	r3, r2
 8000b6e:	4a06      	ldr	r2, [pc, #24]	; (8000b88 <_sbrk+0x64>)
 8000b70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b72:	68fb      	ldr	r3, [r7, #12]
}
 8000b74:	4618      	mov	r0, r3
 8000b76:	371c      	adds	r7, #28
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr
 8000b80:	20020000 	.word	0x20020000
 8000b84:	00000400 	.word	0x00000400
 8000b88:	2000009c 	.word	0x2000009c
 8000b8c:	2000bdd8 	.word	0x2000bdd8
 8000b90:	2000bdc0 	.word	0x2000bdc0

08000b94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b98:	4b06      	ldr	r3, [pc, #24]	; (8000bb4 <SystemInit+0x20>)
 8000b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b9e:	4a05      	ldr	r2, [pc, #20]	; (8000bb4 <SystemInit+0x20>)
 8000ba0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ba4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ba8:	bf00      	nop
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	e000ed00 	.word	0xe000ed00

08000bb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000bb8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bf0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bbc:	480d      	ldr	r0, [pc, #52]	; (8000bf4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000bbe:	490e      	ldr	r1, [pc, #56]	; (8000bf8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000bc0:	4a0e      	ldr	r2, [pc, #56]	; (8000bfc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bc4:	e002      	b.n	8000bcc <LoopCopyDataInit>

08000bc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bca:	3304      	adds	r3, #4

08000bcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bd0:	d3f9      	bcc.n	8000bc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bd2:	4a0b      	ldr	r2, [pc, #44]	; (8000c00 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000bd4:	4c0b      	ldr	r4, [pc, #44]	; (8000c04 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000bd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bd8:	e001      	b.n	8000bde <LoopFillZerobss>

08000bda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bdc:	3204      	adds	r2, #4

08000bde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000be0:	d3fb      	bcc.n	8000bda <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000be2:	f7ff ffd7 	bl	8000b94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000be6:	f014 fba3 	bl	8015330 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bea:	f7ff fd6b 	bl	80006c4 <main>
  bx  lr    
 8000bee:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000bf0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000bf4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bf8:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8000bfc:	08019db0 	.word	0x08019db0
  ldr r2, =_sbss
 8000c00:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8000c04:	2000bdd4 	.word	0x2000bdd4

08000c08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c08:	e7fe      	b.n	8000c08 <ADC_IRQHandler>
	...

08000c0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c10:	4b0e      	ldr	r3, [pc, #56]	; (8000c4c <HAL_Init+0x40>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a0d      	ldr	r2, [pc, #52]	; (8000c4c <HAL_Init+0x40>)
 8000c16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c1c:	4b0b      	ldr	r3, [pc, #44]	; (8000c4c <HAL_Init+0x40>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a0a      	ldr	r2, [pc, #40]	; (8000c4c <HAL_Init+0x40>)
 8000c22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c28:	4b08      	ldr	r3, [pc, #32]	; (8000c4c <HAL_Init+0x40>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a07      	ldr	r2, [pc, #28]	; (8000c4c <HAL_Init+0x40>)
 8000c2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c34:	2003      	movs	r0, #3
 8000c36:	f000 f8fc 	bl	8000e32 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c3a:	200f      	movs	r0, #15
 8000c3c:	f7ff fe5c 	bl	80008f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c40:	f7ff fe2e 	bl	80008a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c44:	2300      	movs	r3, #0
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	40023c00 	.word	0x40023c00

08000c50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c54:	4b06      	ldr	r3, [pc, #24]	; (8000c70 <HAL_IncTick+0x20>)
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	461a      	mov	r2, r3
 8000c5a:	4b06      	ldr	r3, [pc, #24]	; (8000c74 <HAL_IncTick+0x24>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	4413      	add	r3, r2
 8000c60:	4a04      	ldr	r2, [pc, #16]	; (8000c74 <HAL_IncTick+0x24>)
 8000c62:	6013      	str	r3, [r2, #0]
}
 8000c64:	bf00      	nop
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	20000008 	.word	0x20000008
 8000c74:	200054e8 	.word	0x200054e8

08000c78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c7c:	4b03      	ldr	r3, [pc, #12]	; (8000c8c <HAL_GetTick+0x14>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	200054e8 	.word	0x200054e8

08000c90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b084      	sub	sp, #16
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c98:	f7ff ffee 	bl	8000c78 <HAL_GetTick>
 8000c9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000ca8:	d005      	beq.n	8000cb6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000caa:	4b0a      	ldr	r3, [pc, #40]	; (8000cd4 <HAL_Delay+0x44>)
 8000cac:	781b      	ldrb	r3, [r3, #0]
 8000cae:	461a      	mov	r2, r3
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	4413      	add	r3, r2
 8000cb4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000cb6:	bf00      	nop
 8000cb8:	f7ff ffde 	bl	8000c78 <HAL_GetTick>
 8000cbc:	4602      	mov	r2, r0
 8000cbe:	68bb      	ldr	r3, [r7, #8]
 8000cc0:	1ad3      	subs	r3, r2, r3
 8000cc2:	68fa      	ldr	r2, [r7, #12]
 8000cc4:	429a      	cmp	r2, r3
 8000cc6:	d8f7      	bhi.n	8000cb8 <HAL_Delay+0x28>
  {
  }
}
 8000cc8:	bf00      	nop
 8000cca:	bf00      	nop
 8000ccc:	3710      	adds	r7, #16
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	20000008 	.word	0x20000008

08000cd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b085      	sub	sp, #20
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	f003 0307 	and.w	r3, r3, #7
 8000ce6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ce8:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__NVIC_SetPriorityGrouping+0x44>)
 8000cea:	68db      	ldr	r3, [r3, #12]
 8000cec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cee:	68ba      	ldr	r2, [r7, #8]
 8000cf0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cfc:	68bb      	ldr	r3, [r7, #8]
 8000cfe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d0a:	4a04      	ldr	r2, [pc, #16]	; (8000d1c <__NVIC_SetPriorityGrouping+0x44>)
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	60d3      	str	r3, [r2, #12]
}
 8000d10:	bf00      	nop
 8000d12:	3714      	adds	r7, #20
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr
 8000d1c:	e000ed00 	.word	0xe000ed00

08000d20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d24:	4b04      	ldr	r3, [pc, #16]	; (8000d38 <__NVIC_GetPriorityGrouping+0x18>)
 8000d26:	68db      	ldr	r3, [r3, #12]
 8000d28:	0a1b      	lsrs	r3, r3, #8
 8000d2a:	f003 0307 	and.w	r3, r3, #7
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr
 8000d38:	e000ed00 	.word	0xe000ed00

08000d3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4603      	mov	r3, r0
 8000d44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	db0b      	blt.n	8000d66 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d4e:	79fb      	ldrb	r3, [r7, #7]
 8000d50:	f003 021f 	and.w	r2, r3, #31
 8000d54:	4907      	ldr	r1, [pc, #28]	; (8000d74 <__NVIC_EnableIRQ+0x38>)
 8000d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5a:	095b      	lsrs	r3, r3, #5
 8000d5c:	2001      	movs	r0, #1
 8000d5e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d66:	bf00      	nop
 8000d68:	370c      	adds	r7, #12
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	e000e100 	.word	0xe000e100

08000d78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	4603      	mov	r3, r0
 8000d80:	6039      	str	r1, [r7, #0]
 8000d82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	db0a      	blt.n	8000da2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	b2da      	uxtb	r2, r3
 8000d90:	490c      	ldr	r1, [pc, #48]	; (8000dc4 <__NVIC_SetPriority+0x4c>)
 8000d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d96:	0112      	lsls	r2, r2, #4
 8000d98:	b2d2      	uxtb	r2, r2
 8000d9a:	440b      	add	r3, r1
 8000d9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000da0:	e00a      	b.n	8000db8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	b2da      	uxtb	r2, r3
 8000da6:	4908      	ldr	r1, [pc, #32]	; (8000dc8 <__NVIC_SetPriority+0x50>)
 8000da8:	79fb      	ldrb	r3, [r7, #7]
 8000daa:	f003 030f 	and.w	r3, r3, #15
 8000dae:	3b04      	subs	r3, #4
 8000db0:	0112      	lsls	r2, r2, #4
 8000db2:	b2d2      	uxtb	r2, r2
 8000db4:	440b      	add	r3, r1
 8000db6:	761a      	strb	r2, [r3, #24]
}
 8000db8:	bf00      	nop
 8000dba:	370c      	adds	r7, #12
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr
 8000dc4:	e000e100 	.word	0xe000e100
 8000dc8:	e000ed00 	.word	0xe000ed00

08000dcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b089      	sub	sp, #36	; 0x24
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	60f8      	str	r0, [r7, #12]
 8000dd4:	60b9      	str	r1, [r7, #8]
 8000dd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	f003 0307 	and.w	r3, r3, #7
 8000dde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000de0:	69fb      	ldr	r3, [r7, #28]
 8000de2:	f1c3 0307 	rsb	r3, r3, #7
 8000de6:	2b04      	cmp	r3, #4
 8000de8:	bf28      	it	cs
 8000dea:	2304      	movcs	r3, #4
 8000dec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dee:	69fb      	ldr	r3, [r7, #28]
 8000df0:	3304      	adds	r3, #4
 8000df2:	2b06      	cmp	r3, #6
 8000df4:	d902      	bls.n	8000dfc <NVIC_EncodePriority+0x30>
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	3b03      	subs	r3, #3
 8000dfa:	e000      	b.n	8000dfe <NVIC_EncodePriority+0x32>
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e00:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e04:	69bb      	ldr	r3, [r7, #24]
 8000e06:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0a:	43da      	mvns	r2, r3
 8000e0c:	68bb      	ldr	r3, [r7, #8]
 8000e0e:	401a      	ands	r2, r3
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e14:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e1e:	43d9      	mvns	r1, r3
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e24:	4313      	orrs	r3, r2
         );
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	3724      	adds	r7, #36	; 0x24
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr

08000e32 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e32:	b580      	push	{r7, lr}
 8000e34:	b082      	sub	sp, #8
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e3a:	6878      	ldr	r0, [r7, #4]
 8000e3c:	f7ff ff4c 	bl	8000cd8 <__NVIC_SetPriorityGrouping>
}
 8000e40:	bf00      	nop
 8000e42:	3708      	adds	r7, #8
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}

08000e48 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b086      	sub	sp, #24
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	4603      	mov	r3, r0
 8000e50:	60b9      	str	r1, [r7, #8]
 8000e52:	607a      	str	r2, [r7, #4]
 8000e54:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e56:	2300      	movs	r3, #0
 8000e58:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e5a:	f7ff ff61 	bl	8000d20 <__NVIC_GetPriorityGrouping>
 8000e5e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e60:	687a      	ldr	r2, [r7, #4]
 8000e62:	68b9      	ldr	r1, [r7, #8]
 8000e64:	6978      	ldr	r0, [r7, #20]
 8000e66:	f7ff ffb1 	bl	8000dcc <NVIC_EncodePriority>
 8000e6a:	4602      	mov	r2, r0
 8000e6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e70:	4611      	mov	r1, r2
 8000e72:	4618      	mov	r0, r3
 8000e74:	f7ff ff80 	bl	8000d78 <__NVIC_SetPriority>
}
 8000e78:	bf00      	nop
 8000e7a:	3718      	adds	r7, #24
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}

08000e80 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	4603      	mov	r3, r0
 8000e88:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f7ff ff54 	bl	8000d3c <__NVIC_EnableIRQ>
}
 8000e94:	bf00      	nop
 8000e96:	3708      	adds	r7, #8
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}

08000e9c <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b088      	sub	sp, #32
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	61fb      	str	r3, [r7, #28]
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8000eac:	4baa      	ldr	r3, [pc, #680]	; (8001158 <HAL_ETH_Init+0x2bc>)
 8000eae:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d101      	bne.n	8000ec2 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	e183      	b.n	80011ca <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000ec8:	b2db      	uxtb	r3, r3
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d106      	bne.n	8000edc <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8000ed6:	6878      	ldr	r0, [r7, #4]
 8000ed8:	f002 fbc4 	bl	8003664 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000edc:	2300      	movs	r3, #0
 8000ede:	60bb      	str	r3, [r7, #8]
 8000ee0:	4b9e      	ldr	r3, [pc, #632]	; (800115c <HAL_ETH_Init+0x2c0>)
 8000ee2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ee4:	4a9d      	ldr	r2, [pc, #628]	; (800115c <HAL_ETH_Init+0x2c0>)
 8000ee6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000eea:	6453      	str	r3, [r2, #68]	; 0x44
 8000eec:	4b9b      	ldr	r3, [pc, #620]	; (800115c <HAL_ETH_Init+0x2c0>)
 8000eee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ef0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ef4:	60bb      	str	r3, [r7, #8]
 8000ef6:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8000ef8:	4b99      	ldr	r3, [pc, #612]	; (8001160 <HAL_ETH_Init+0x2c4>)
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	4a98      	ldr	r2, [pc, #608]	; (8001160 <HAL_ETH_Init+0x2c4>)
 8000efe:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000f02:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8000f04:	4b96      	ldr	r3, [pc, #600]	; (8001160 <HAL_ETH_Init+0x2c4>)
 8000f06:	685a      	ldr	r2, [r3, #4]
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	6a1b      	ldr	r3, [r3, #32]
 8000f0c:	4994      	ldr	r1, [pc, #592]	; (8001160 <HAL_ETH_Init+0x2c4>)
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f042 0201 	orr.w	r2, r2, #1
 8000f24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000f28:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8000f2a:	f7ff fea5 	bl	8000c78 <HAL_GetTick>
 8000f2e:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8000f30:	e011      	b.n	8000f56 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8000f32:	f7ff fea1 	bl	8000c78 <HAL_GetTick>
 8000f36:	4602      	mov	r2, r0
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	1ad3      	subs	r3, r2, r3
 8000f3c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000f40:	d909      	bls.n	8000f56 <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2203      	movs	r2, #3
 8000f46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8000f52:	2303      	movs	r3, #3
 8000f54:	e139      	b.n	80011ca <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f003 0301 	and.w	r3, r3, #1
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d1e4      	bne.n	8000f32 <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	691b      	ldr	r3, [r3, #16]
 8000f6e:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8000f70:	69fb      	ldr	r3, [r7, #28]
 8000f72:	f023 031c 	bic.w	r3, r3, #28
 8000f76:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8000f78:	f001 ff12 	bl	8002da0 <HAL_RCC_GetHCLKFreq>
 8000f7c:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8000f7e:	69bb      	ldr	r3, [r7, #24]
 8000f80:	4a78      	ldr	r2, [pc, #480]	; (8001164 <HAL_ETH_Init+0x2c8>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d908      	bls.n	8000f98 <HAL_ETH_Init+0xfc>
 8000f86:	69bb      	ldr	r3, [r7, #24]
 8000f88:	4a77      	ldr	r2, [pc, #476]	; (8001168 <HAL_ETH_Init+0x2cc>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d804      	bhi.n	8000f98 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	f043 0308 	orr.w	r3, r3, #8
 8000f94:	61fb      	str	r3, [r7, #28]
 8000f96:	e027      	b.n	8000fe8 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8000f98:	69bb      	ldr	r3, [r7, #24]
 8000f9a:	4a73      	ldr	r2, [pc, #460]	; (8001168 <HAL_ETH_Init+0x2cc>)
 8000f9c:	4293      	cmp	r3, r2
 8000f9e:	d908      	bls.n	8000fb2 <HAL_ETH_Init+0x116>
 8000fa0:	69bb      	ldr	r3, [r7, #24]
 8000fa2:	4a6d      	ldr	r2, [pc, #436]	; (8001158 <HAL_ETH_Init+0x2bc>)
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	d204      	bcs.n	8000fb2 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8000fa8:	69fb      	ldr	r3, [r7, #28]
 8000faa:	f043 030c 	orr.w	r3, r3, #12
 8000fae:	61fb      	str	r3, [r7, #28]
 8000fb0:	e01a      	b.n	8000fe8 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8000fb2:	69bb      	ldr	r3, [r7, #24]
 8000fb4:	4a68      	ldr	r2, [pc, #416]	; (8001158 <HAL_ETH_Init+0x2bc>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d303      	bcc.n	8000fc2 <HAL_ETH_Init+0x126>
 8000fba:	69bb      	ldr	r3, [r7, #24]
 8000fbc:	4a6b      	ldr	r2, [pc, #428]	; (800116c <HAL_ETH_Init+0x2d0>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d911      	bls.n	8000fe6 <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8000fc2:	69bb      	ldr	r3, [r7, #24]
 8000fc4:	4a69      	ldr	r2, [pc, #420]	; (800116c <HAL_ETH_Init+0x2d0>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d908      	bls.n	8000fdc <HAL_ETH_Init+0x140>
 8000fca:	69bb      	ldr	r3, [r7, #24]
 8000fcc:	4a68      	ldr	r2, [pc, #416]	; (8001170 <HAL_ETH_Init+0x2d4>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d804      	bhi.n	8000fdc <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	f043 0304 	orr.w	r3, r3, #4
 8000fd8:	61fb      	str	r3, [r7, #28]
 8000fda:	e005      	b.n	8000fe8 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8000fdc:	69fb      	ldr	r3, [r7, #28]
 8000fde:	f043 0310 	orr.w	r3, r3, #16
 8000fe2:	61fb      	str	r3, [r7, #28]
 8000fe4:	e000      	b.n	8000fe8 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8000fe6:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	69fa      	ldr	r2, [r7, #28]
 8000fee:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8000ff0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	6878      	ldr	r0, [r7, #4]
 8000ff8:	f000 fc17 	bl	800182a <HAL_ETH_WritePHYRegister>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d00b      	beq.n	800101a <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8001002:	2301      	movs	r3, #1
 8001004:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8001006:	6939      	ldr	r1, [r7, #16]
 8001008:	6878      	ldr	r0, [r7, #4]
 800100a:	f000 fdcd 	bl	8001ba8 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2201      	movs	r2, #1
 8001012:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8001016:	2301      	movs	r3, #1
 8001018:	e0d7      	b.n	80011ca <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 800101a:	20ff      	movs	r0, #255	; 0xff
 800101c:	f7ff fe38 	bl	8000c90 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	2b00      	cmp	r3, #0
 8001026:	f000 80a5 	beq.w	8001174 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800102a:	f7ff fe25 	bl	8000c78 <HAL_GetTick>
 800102e:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001030:	f107 030c 	add.w	r3, r7, #12
 8001034:	461a      	mov	r2, r3
 8001036:	2101      	movs	r1, #1
 8001038:	6878      	ldr	r0, [r7, #4]
 800103a:	f000 fb8e 	bl	800175a <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800103e:	f7ff fe1b 	bl	8000c78 <HAL_GetTick>
 8001042:	4602      	mov	r2, r0
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	1ad3      	subs	r3, r2, r3
 8001048:	f241 3288 	movw	r2, #5000	; 0x1388
 800104c:	4293      	cmp	r3, r2
 800104e:	d90f      	bls.n	8001070 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001050:	2301      	movs	r3, #1
 8001052:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001054:	6939      	ldr	r1, [r7, #16]
 8001056:	6878      	ldr	r0, [r7, #4]
 8001058:	f000 fda6 	bl	8001ba8 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2201      	movs	r2, #1
 8001060:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2200      	movs	r2, #0
 8001068:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800106c:	2303      	movs	r3, #3
 800106e:	e0ac      	b.n	80011ca <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	f003 0304 	and.w	r3, r3, #4
 8001076:	2b00      	cmp	r3, #0
 8001078:	d0da      	beq.n	8001030 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 800107a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800107e:	2100      	movs	r1, #0
 8001080:	6878      	ldr	r0, [r7, #4]
 8001082:	f000 fbd2 	bl	800182a <HAL_ETH_WritePHYRegister>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d00b      	beq.n	80010a4 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800108c:	2301      	movs	r3, #1
 800108e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001090:	6939      	ldr	r1, [r7, #16]
 8001092:	6878      	ldr	r0, [r7, #4]
 8001094:	f000 fd88 	bl	8001ba8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2201      	movs	r2, #1
 800109c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80010a0:	2301      	movs	r3, #1
 80010a2:	e092      	b.n	80011ca <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 80010a4:	f7ff fde8 	bl	8000c78 <HAL_GetTick>
 80010a8:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80010aa:	f107 030c 	add.w	r3, r7, #12
 80010ae:	461a      	mov	r2, r3
 80010b0:	2101      	movs	r1, #1
 80010b2:	6878      	ldr	r0, [r7, #4]
 80010b4:	f000 fb51 	bl	800175a <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80010b8:	f7ff fdde 	bl	8000c78 <HAL_GetTick>
 80010bc:	4602      	mov	r2, r0
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	1ad3      	subs	r3, r2, r3
 80010c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d90f      	bls.n	80010ea <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80010ca:	2301      	movs	r3, #1
 80010cc:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80010ce:	6939      	ldr	r1, [r7, #16]
 80010d0:	6878      	ldr	r0, [r7, #4]
 80010d2:	f000 fd69 	bl	8001ba8 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2201      	movs	r2, #1
 80010da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2200      	movs	r2, #0
 80010e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80010e6:	2303      	movs	r3, #3
 80010e8:	e06f      	b.n	80011ca <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	f003 0320 	and.w	r3, r3, #32
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d0da      	beq.n	80010aa <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80010f4:	f107 030c 	add.w	r3, r7, #12
 80010f8:	461a      	mov	r2, r3
 80010fa:	2110      	movs	r1, #16
 80010fc:	6878      	ldr	r0, [r7, #4]
 80010fe:	f000 fb2c 	bl	800175a <HAL_ETH_ReadPHYRegister>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d00b      	beq.n	8001120 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001108:	2301      	movs	r3, #1
 800110a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800110c:	6939      	ldr	r1, [r7, #16]
 800110e:	6878      	ldr	r0, [r7, #4]
 8001110:	f000 fd4a 	bl	8001ba8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2201      	movs	r2, #1
 8001118:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 800111c:	2301      	movs	r3, #1
 800111e:	e054      	b.n	80011ca <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	f003 0304 	and.w	r3, r3, #4
 8001126:	2b00      	cmp	r3, #0
 8001128:	d004      	beq.n	8001134 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001130:	60da      	str	r2, [r3, #12]
 8001132:	e002      	b.n	800113a <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2200      	movs	r2, #0
 8001138:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	f003 0302 	and.w	r3, r3, #2
 8001140:	2b00      	cmp	r3, #0
 8001142:	d003      	beq.n	800114c <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2200      	movs	r2, #0
 8001148:	609a      	str	r2, [r3, #8]
 800114a:	e035      	b.n	80011b8 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001152:	609a      	str	r2, [r3, #8]
 8001154:	e030      	b.n	80011b8 <HAL_ETH_Init+0x31c>
 8001156:	bf00      	nop
 8001158:	03938700 	.word	0x03938700
 800115c:	40023800 	.word	0x40023800
 8001160:	40013800 	.word	0x40013800
 8001164:	01312cff 	.word	0x01312cff
 8001168:	02160ebf 	.word	0x02160ebf
 800116c:	05f5e0ff 	.word	0x05f5e0ff
 8001170:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	08db      	lsrs	r3, r3, #3
 800117a:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	689b      	ldr	r3, [r3, #8]
 8001180:	085b      	lsrs	r3, r3, #1
 8001182:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8001184:	4313      	orrs	r3, r2
 8001186:	b29b      	uxth	r3, r3
 8001188:	461a      	mov	r2, r3
 800118a:	2100      	movs	r1, #0
 800118c:	6878      	ldr	r0, [r7, #4]
 800118e:	f000 fb4c 	bl	800182a <HAL_ETH_WritePHYRegister>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d00b      	beq.n	80011b0 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001198:	2301      	movs	r3, #1
 800119a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800119c:	6939      	ldr	r1, [r7, #16]
 800119e:	6878      	ldr	r0, [r7, #4]
 80011a0:	f000 fd02 	bl	8001ba8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2201      	movs	r2, #1
 80011a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 80011ac:	2301      	movs	r3, #1
 80011ae:	e00c      	b.n	80011ca <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80011b0:	f640 70ff 	movw	r0, #4095	; 0xfff
 80011b4:	f7ff fd6c 	bl	8000c90 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80011b8:	6939      	ldr	r1, [r7, #16]
 80011ba:	6878      	ldr	r0, [r7, #4]
 80011bc:	f000 fcf4 	bl	8001ba8 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2201      	movs	r2, #1
 80011c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80011c8:	2300      	movs	r3, #0
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3720      	adds	r7, #32
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop

080011d4 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b087      	sub	sp, #28
 80011d8:	af00      	add	r7, sp, #0
 80011da:	60f8      	str	r0, [r7, #12]
 80011dc:	60b9      	str	r1, [r7, #8]
 80011de:	607a      	str	r2, [r7, #4]
 80011e0:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80011e2:	2300      	movs	r3, #0
 80011e4:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80011ec:	2b01      	cmp	r3, #1
 80011ee:	d101      	bne.n	80011f4 <HAL_ETH_DMATxDescListInit+0x20>
 80011f0:	2302      	movs	r3, #2
 80011f2:	e052      	b.n	800129a <HAL_ETH_DMATxDescListInit+0xc6>
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	2201      	movs	r2, #1
 80011f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	2202      	movs	r2, #2
 8001200:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	68ba      	ldr	r2, [r7, #8]
 8001208:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 800120a:	2300      	movs	r3, #0
 800120c:	617b      	str	r3, [r7, #20]
 800120e:	e030      	b.n	8001272 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	015b      	lsls	r3, r3, #5
 8001214:	68ba      	ldr	r2, [r7, #8]
 8001216:	4413      	add	r3, r2
 8001218:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001220:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001228:	fb02 f303 	mul.w	r3, r2, r3
 800122c:	687a      	ldr	r2, [r7, #4]
 800122e:	4413      	add	r3, r2
 8001230:	461a      	mov	r2, r3
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	69db      	ldr	r3, [r3, #28]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d105      	bne.n	800124a <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	3b01      	subs	r3, #1
 800124e:	697a      	ldr	r2, [r7, #20]
 8001250:	429a      	cmp	r2, r3
 8001252:	d208      	bcs.n	8001266 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	3301      	adds	r3, #1
 8001258:	015b      	lsls	r3, r3, #5
 800125a:	68ba      	ldr	r2, [r7, #8]
 800125c:	4413      	add	r3, r2
 800125e:	461a      	mov	r2, r3
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	60da      	str	r2, [r3, #12]
 8001264:	e002      	b.n	800126c <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8001266:	68ba      	ldr	r2, [r7, #8]
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	3301      	adds	r3, #1
 8001270:	617b      	str	r3, [r7, #20]
 8001272:	697a      	ldr	r2, [r7, #20]
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	429a      	cmp	r2, r3
 8001278:	d3ca      	bcc.n	8001210 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	68ba      	ldr	r2, [r7, #8]
 8001280:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001284:	3310      	adds	r3, #16
 8001286:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	2201      	movs	r2, #1
 800128c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	2200      	movs	r2, #0
 8001294:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001298:	2300      	movs	r3, #0
}
 800129a:	4618      	mov	r0, r3
 800129c:	371c      	adds	r7, #28
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr

080012a6 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 80012a6:	b480      	push	{r7}
 80012a8:	b087      	sub	sp, #28
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	60f8      	str	r0, [r7, #12]
 80012ae:	60b9      	str	r1, [r7, #8]
 80012b0:	607a      	str	r2, [r7, #4]
 80012b2:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80012b4:	2300      	movs	r3, #0
 80012b6:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80012be:	2b01      	cmp	r3, #1
 80012c0:	d101      	bne.n	80012c6 <HAL_ETH_DMARxDescListInit+0x20>
 80012c2:	2302      	movs	r3, #2
 80012c4:	e056      	b.n	8001374 <HAL_ETH_DMARxDescListInit+0xce>
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	2201      	movs	r2, #1
 80012ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	2202      	movs	r2, #2
 80012d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	68ba      	ldr	r2, [r7, #8]
 80012da:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 80012dc:	2300      	movs	r3, #0
 80012de:	617b      	str	r3, [r7, #20]
 80012e0:	e034      	b.n	800134c <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	015b      	lsls	r3, r3, #5
 80012e6:	68ba      	ldr	r2, [r7, #8]
 80012e8:	4413      	add	r3, r2
 80012ea:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80012ec:	693b      	ldr	r3, [r7, #16]
 80012ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80012f2:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80012fa:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001302:	fb02 f303 	mul.w	r3, r2, r3
 8001306:	687a      	ldr	r2, [r7, #4]
 8001308:	4413      	add	r3, r2
 800130a:	461a      	mov	r2, r3
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	699b      	ldr	r3, [r3, #24]
 8001314:	2b01      	cmp	r3, #1
 8001316:	d105      	bne.n	8001324 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	3b01      	subs	r3, #1
 8001328:	697a      	ldr	r2, [r7, #20]
 800132a:	429a      	cmp	r2, r3
 800132c:	d208      	bcs.n	8001340 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	3301      	adds	r3, #1
 8001332:	015b      	lsls	r3, r3, #5
 8001334:	68ba      	ldr	r2, [r7, #8]
 8001336:	4413      	add	r3, r2
 8001338:	461a      	mov	r2, r3
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	60da      	str	r2, [r3, #12]
 800133e:	e002      	b.n	8001346 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8001340:	68ba      	ldr	r2, [r7, #8]
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	3301      	adds	r3, #1
 800134a:	617b      	str	r3, [r7, #20]
 800134c:	697a      	ldr	r2, [r7, #20]
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	429a      	cmp	r2, r3
 8001352:	d3c6      	bcc.n	80012e2 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	68ba      	ldr	r2, [r7, #8]
 800135a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800135e:	330c      	adds	r3, #12
 8001360:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	2201      	movs	r2, #1
 8001366:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	2200      	movs	r2, #0
 800136e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001372:	2300      	movs	r3, #0
}
 8001374:	4618      	mov	r0, r3
 8001376:	371c      	adds	r7, #28
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr

08001380 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8001380:	b480      	push	{r7}
 8001382:	b087      	sub	sp, #28
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 800138a:	2300      	movs	r3, #0
 800138c:	617b      	str	r3, [r7, #20]
 800138e:	2300      	movs	r3, #0
 8001390:	60fb      	str	r3, [r7, #12]
 8001392:	2300      	movs	r3, #0
 8001394:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800139c:	2b01      	cmp	r3, #1
 800139e:	d101      	bne.n	80013a4 <HAL_ETH_TransmitFrame+0x24>
 80013a0:	2302      	movs	r3, #2
 80013a2:	e0cd      	b.n	8001540 <HAL_ETH_TransmitFrame+0x1c0>
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2201      	movs	r2, #1
 80013a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2202      	movs	r2, #2
 80013b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d109      	bne.n	80013ce <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2201      	movs	r2, #1
 80013be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2200      	movs	r2, #0
 80013c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 80013ca:	2301      	movs	r3, #1
 80013cc:	e0b8      	b.n	8001540 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	da09      	bge.n	80013ec <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2212      	movs	r2, #18
 80013dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2200      	movs	r2, #0
 80013e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 80013e8:	2301      	movs	r3, #1
 80013ea:	e0a9      	b.n	8001540 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d915      	bls.n	8001422 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	4a54      	ldr	r2, [pc, #336]	; (800154c <HAL_ETH_TransmitFrame+0x1cc>)
 80013fa:	fba2 2303 	umull	r2, r3, r2, r3
 80013fe:	0a9b      	lsrs	r3, r3, #10
 8001400:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8001402:	683a      	ldr	r2, [r7, #0]
 8001404:	4b51      	ldr	r3, [pc, #324]	; (800154c <HAL_ETH_TransmitFrame+0x1cc>)
 8001406:	fba3 1302 	umull	r1, r3, r3, r2
 800140a:	0a9b      	lsrs	r3, r3, #10
 800140c:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8001410:	fb01 f303 	mul.w	r3, r1, r3
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	2b00      	cmp	r3, #0
 8001418:	d005      	beq.n	8001426 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	3301      	adds	r3, #1
 800141e:	617b      	str	r3, [r7, #20]
 8001420:	e001      	b.n	8001426 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 8001422:	2301      	movs	r3, #1
 8001424:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	2b01      	cmp	r3, #1
 800142a:	d11c      	bne.n	8001466 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001430:	681a      	ldr	r2, [r3, #0]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001436:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 800143a:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001440:	683a      	ldr	r2, [r7, #0]
 8001442:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001446:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001452:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001456:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800145c:	68db      	ldr	r3, [r3, #12]
 800145e:	461a      	mov	r2, r3
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	62da      	str	r2, [r3, #44]	; 0x2c
 8001464:	e04b      	b.n	80014fe <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 8001466:	2300      	movs	r3, #0
 8001468:	613b      	str	r3, [r7, #16]
 800146a:	e044      	b.n	80014f6 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001476:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800147a:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d107      	bne.n	8001492 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800148c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001490:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001496:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800149a:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	3b01      	subs	r3, #1
 80014a0:	693a      	ldr	r2, [r7, #16]
 80014a2:	429a      	cmp	r2, r3
 80014a4:	d116      	bne.n	80014d4 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014b0:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80014b4:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	4a25      	ldr	r2, [pc, #148]	; (8001550 <HAL_ETH_TransmitFrame+0x1d0>)
 80014ba:	fb02 f203 	mul.w	r2, r2, r3
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	4413      	add	r3, r2
 80014c2:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80014c6:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014cc:	68fa      	ldr	r2, [r7, #12]
 80014ce:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80014d2:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014de:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80014e2:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014e8:	68db      	ldr	r3, [r3, #12]
 80014ea:	461a      	mov	r2, r3
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	3301      	adds	r3, #1
 80014f4:	613b      	str	r3, [r7, #16]
 80014f6:	693a      	ldr	r2, [r7, #16]
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	429a      	cmp	r2, r3
 80014fc:	d3b6      	bcc.n	800146c <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001506:	3314      	adds	r3, #20
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f003 0304 	and.w	r3, r3, #4
 800150e:	2b00      	cmp	r3, #0
 8001510:	d00d      	beq.n	800152e <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800151a:	3314      	adds	r3, #20
 800151c:	2204      	movs	r2, #4
 800151e:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001528:	3304      	adds	r3, #4
 800152a:	2200      	movs	r2, #0
 800152c:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2201      	movs	r2, #1
 8001532:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2200      	movs	r2, #0
 800153a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800153e:	2300      	movs	r3, #0
}
 8001540:	4618      	mov	r0, r3
 8001542:	371c      	adds	r7, #28
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr
 800154c:	ac02b00b 	.word	0xac02b00b
 8001550:	fffffa0c 	.word	0xfffffa0c

08001554 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 8001554:	b480      	push	{r7}
 8001556:	b085      	sub	sp, #20
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0U;
 800155c:	2300      	movs	r3, #0
 800155e:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001566:	2b01      	cmp	r3, #1
 8001568:	d101      	bne.n	800156e <HAL_ETH_GetReceivedFrame_IT+0x1a>
 800156a:	2302      	movs	r3, #2
 800156c:	e074      	b.n	8001658 <HAL_ETH_GetReceivedFrame_IT+0x104>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2201      	movs	r2, #1
 8001572:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2202      	movs	r2, #2
 800157a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 800157e:	e05a      	b.n	8001636 <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	3301      	adds	r3, #1
 8001584:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001590:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001594:	d10d      	bne.n	80015b2 <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;   
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2201      	movs	r2, #1
 80015a2:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015a8:	68db      	ldr	r3, [r3, #12]
 80015aa:	461a      	mov	r2, r3
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	629a      	str	r2, [r3, #40]	; 0x28
 80015b0:	e041      	b.n	8001636 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d10b      	bne.n	80015d8 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015c4:	1c5a      	adds	r2, r3, #1
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ce:	68db      	ldr	r3, [r3, #12]
 80015d0:	461a      	mov	r2, r3
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	629a      	str	r2, [r3, #40]	; 0x28
 80015d6:	e02e      	b.n	8001636 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015e4:	1c5a      	adds	r2, r3, #1
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1U)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015ee:	2b01      	cmp	r3, #1
 80015f0:	d103      	bne.n	80015fa <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	0c1b      	lsrs	r3, r3, #16
 8001602:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001606:	1f1a      	subs	r2, r3, #4
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001610:	689a      	ldr	r2, [r3, #8]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800161a:	68db      	ldr	r3, [r3, #12]
 800161c:	461a      	mov	r2, r3
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2201      	movs	r2, #1
 8001626:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2200      	movs	r2, #0
 800162e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 8001632:	2300      	movs	r3, #0
 8001634:	e010      	b.n	8001658 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	2b00      	cmp	r3, #0
 800163e:	db02      	blt.n	8001646 <HAL_ETH_GetReceivedFrame_IT+0xf2>
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	2b03      	cmp	r3, #3
 8001644:	d99c      	bls.n	8001580 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2201      	movs	r2, #1
 800164a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2200      	movs	r2, #0
 8001652:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
}
 8001658:	4618      	mov	r0, r3
 800165a:	3714      	adds	r7, #20
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr

08001664 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001674:	3314      	adds	r3, #20
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800167c:	2b40      	cmp	r3, #64	; 0x40
 800167e:	d112      	bne.n	80016a6 <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8001680:	6878      	ldr	r0, [r7, #4]
 8001682:	f002 f89d 	bl	80037c0 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800168e:	3314      	adds	r3, #20
 8001690:	2240      	movs	r2, #64	; 0x40
 8001692:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2201      	movs	r2, #1
 8001698:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2200      	movs	r2, #0
 80016a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80016a4:	e01b      	b.n	80016de <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016ae:	3314      	adds	r3, #20
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f003 0301 	and.w	r3, r3, #1
 80016b6:	2b01      	cmp	r3, #1
 80016b8:	d111      	bne.n	80016de <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f000 f839 	bl	8001732 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016c8:	3314      	adds	r3, #20
 80016ca:	2201      	movs	r2, #1
 80016cc:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2201      	movs	r2, #1
 80016d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2200      	movs	r2, #0
 80016da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016e6:	3314      	adds	r3, #20
 80016e8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80016ec:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016f6:	3314      	adds	r3, #20
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80016fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001702:	d112      	bne.n	800172a <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8001704:	6878      	ldr	r0, [r7, #4]
 8001706:	f000 f81e 	bl	8001746 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001712:	3314      	adds	r3, #20
 8001714:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001718:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2201      	movs	r2, #1
 800171e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2200      	movs	r2, #0
 8001726:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 800172a:	bf00      	nop
 800172c:	3708      	adds	r7, #8
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}

08001732 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001732:	b480      	push	{r7}
 8001734:	b083      	sub	sp, #12
 8001736:	af00      	add	r7, sp, #0
 8001738:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 800173a:	bf00      	nop
 800173c:	370c      	adds	r7, #12
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr

08001746 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8001746:	b480      	push	{r7}
 8001748:	b083      	sub	sp, #12
 800174a:	af00      	add	r7, sp, #0
 800174c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 800174e:	bf00      	nop
 8001750:	370c      	adds	r7, #12
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr

0800175a <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 800175a:	b580      	push	{r7, lr}
 800175c:	b086      	sub	sp, #24
 800175e:	af00      	add	r7, sp, #0
 8001760:	60f8      	str	r0, [r7, #12]
 8001762:	460b      	mov	r3, r1
 8001764:	607a      	str	r2, [r7, #4]
 8001766:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 8001768:	2300      	movs	r3, #0
 800176a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 800176c:	2300      	movs	r3, #0
 800176e:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001776:	b2db      	uxtb	r3, r3
 8001778:	2b82      	cmp	r3, #130	; 0x82
 800177a:	d101      	bne.n	8001780 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 800177c:	2302      	movs	r3, #2
 800177e:	e050      	b.n	8001822 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	2282      	movs	r2, #130	; 0x82
 8001784:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	691b      	ldr	r3, [r3, #16]
 800178e:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	f003 031c 	and.w	r3, r3, #28
 8001796:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	8a1b      	ldrh	r3, [r3, #16]
 800179c:	02db      	lsls	r3, r3, #11
 800179e:	b29b      	uxth	r3, r3
 80017a0:	697a      	ldr	r2, [r7, #20]
 80017a2:	4313      	orrs	r3, r2
 80017a4:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80017a6:	897b      	ldrh	r3, [r7, #10]
 80017a8:	019b      	lsls	r3, r3, #6
 80017aa:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80017ae:	697a      	ldr	r2, [r7, #20]
 80017b0:	4313      	orrs	r3, r2
 80017b2:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	f023 0302 	bic.w	r3, r3, #2
 80017ba:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	f043 0301 	orr.w	r3, r3, #1
 80017c2:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	697a      	ldr	r2, [r7, #20]
 80017ca:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80017cc:	f7ff fa54 	bl	8000c78 <HAL_GetTick>
 80017d0:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80017d2:	e015      	b.n	8001800 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 80017d4:	f7ff fa50 	bl	8000c78 <HAL_GetTick>
 80017d8:	4602      	mov	r2, r0
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017e2:	d309      	bcc.n	80017f8 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	2201      	movs	r2, #1
 80017e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	2200      	movs	r2, #0
 80017f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80017f4:	2303      	movs	r3, #3
 80017f6:	e014      	b.n	8001822 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	691b      	ldr	r3, [r3, #16]
 80017fe:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	f003 0301 	and.w	r3, r3, #1
 8001806:	2b00      	cmp	r3, #0
 8001808:	d1e4      	bne.n	80017d4 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	695b      	ldr	r3, [r3, #20]
 8001810:	b29b      	uxth	r3, r3
 8001812:	461a      	mov	r2, r3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	2201      	movs	r2, #1
 800181c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001820:	2300      	movs	r3, #0
}
 8001822:	4618      	mov	r0, r3
 8001824:	3718      	adds	r7, #24
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}

0800182a <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 800182a:	b580      	push	{r7, lr}
 800182c:	b086      	sub	sp, #24
 800182e:	af00      	add	r7, sp, #0
 8001830:	60f8      	str	r0, [r7, #12]
 8001832:	460b      	mov	r3, r1
 8001834:	607a      	str	r2, [r7, #4]
 8001836:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8001838:	2300      	movs	r3, #0
 800183a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 800183c:	2300      	movs	r3, #0
 800183e:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001846:	b2db      	uxtb	r3, r3
 8001848:	2b42      	cmp	r3, #66	; 0x42
 800184a:	d101      	bne.n	8001850 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 800184c:	2302      	movs	r3, #2
 800184e:	e04e      	b.n	80018ee <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	2242      	movs	r2, #66	; 0x42
 8001854:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	691b      	ldr	r3, [r3, #16]
 800185e:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	f003 031c 	and.w	r3, r3, #28
 8001866:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	8a1b      	ldrh	r3, [r3, #16]
 800186c:	02db      	lsls	r3, r3, #11
 800186e:	b29b      	uxth	r3, r3
 8001870:	697a      	ldr	r2, [r7, #20]
 8001872:	4313      	orrs	r3, r2
 8001874:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001876:	897b      	ldrh	r3, [r7, #10]
 8001878:	019b      	lsls	r3, r3, #6
 800187a:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800187e:	697a      	ldr	r2, [r7, #20]
 8001880:	4313      	orrs	r3, r2
 8001882:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	f043 0302 	orr.w	r3, r3, #2
 800188a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	f043 0301 	orr.w	r3, r3, #1
 8001892:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	b29a      	uxth	r2, r3
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	697a      	ldr	r2, [r7, #20]
 80018a4:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80018a6:	f7ff f9e7 	bl	8000c78 <HAL_GetTick>
 80018aa:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80018ac:	e015      	b.n	80018da <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 80018ae:	f7ff f9e3 	bl	8000c78 <HAL_GetTick>
 80018b2:	4602      	mov	r2, r0
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018bc:	d309      	bcc.n	80018d2 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	2201      	movs	r2, #1
 80018c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	2200      	movs	r2, #0
 80018ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80018ce:	2303      	movs	r3, #3
 80018d0:	e00d      	b.n	80018ee <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	691b      	ldr	r3, [r3, #16]
 80018d8:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	f003 0301 	and.w	r3, r3, #1
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d1e4      	bne.n	80018ae <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	2201      	movs	r2, #1
 80018e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 80018ec:	2300      	movs	r3, #0
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3718      	adds	r7, #24
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}

080018f6 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 80018f6:	b580      	push	{r7, lr}
 80018f8:	b082      	sub	sp, #8
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001904:	2b01      	cmp	r3, #1
 8001906:	d101      	bne.n	800190c <HAL_ETH_Start+0x16>
 8001908:	2302      	movs	r3, #2
 800190a:	e01f      	b.n	800194c <HAL_ETH_Start+0x56>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2201      	movs	r2, #1
 8001910:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2202      	movs	r2, #2
 8001918:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 800191c:	6878      	ldr	r0, [r7, #4]
 800191e:	f000 fb45 	bl	8001fac <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	f000 fb7c 	bl	8002020 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001928:	6878      	ldr	r0, [r7, #4]
 800192a:	f000 fc13 	bl	8002154 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	f000 fbb0 	bl	8002094 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8001934:	6878      	ldr	r0, [r7, #4]
 8001936:	f000 fbdd 	bl	80020f4 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2201      	movs	r2, #1
 800193e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2200      	movs	r2, #0
 8001946:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800194a:	2300      	movs	r3, #0
}
 800194c:	4618      	mov	r0, r3
 800194e:	3708      	adds	r7, #8
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}

08001954 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001962:	2b01      	cmp	r3, #1
 8001964:	d101      	bne.n	800196a <HAL_ETH_Stop+0x16>
 8001966:	2302      	movs	r3, #2
 8001968:	e01f      	b.n	80019aa <HAL_ETH_Stop+0x56>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2201      	movs	r2, #1
 800196e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2202      	movs	r2, #2
 8001976:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	f000 fba2 	bl	80020c4 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8001980:	6878      	ldr	r0, [r7, #4]
 8001982:	f000 fbcf 	bl	8002124 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8001986:	6878      	ldr	r0, [r7, #4]
 8001988:	f000 fb67 	bl	800205a <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 800198c:	6878      	ldr	r0, [r7, #4]
 800198e:	f000 fbe1 	bl	8002154 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8001992:	6878      	ldr	r0, [r7, #4]
 8001994:	f000 fb27 	bl	8001fe6 <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2201      	movs	r2, #1
 800199c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2200      	movs	r2, #0
 80019a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80019a8:	2300      	movs	r3, #0
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
	...

080019b4 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b084      	sub	sp, #16
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 80019be:	2300      	movs	r3, #0
 80019c0:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d101      	bne.n	80019d0 <HAL_ETH_ConfigMAC+0x1c>
 80019cc:	2302      	movs	r3, #2
 80019ce:	e0e4      	b.n	8001b9a <HAL_ETH_ConfigMAC+0x1e6>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2201      	movs	r2, #1
 80019d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2202      	movs	r2, #2
 80019dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	f000 80b1 	beq.w	8001b4a <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80019f0:	68fa      	ldr	r2, [r7, #12]
 80019f2:	4b6c      	ldr	r3, [pc, #432]	; (8001ba4 <HAL_ETH_ConfigMAC+0x1f0>)
 80019f4:	4013      	ands	r3, r2
 80019f6:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8001a00:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8001a06:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8001a0c:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8001a12:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8001a18:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8001a1e:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8001a24:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8001a2a:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8001a30:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8001a36:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8001a3c:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8001a42:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8001a44:	68fa      	ldr	r2, [r7, #12]
 8001a46:	4313      	orrs	r3, r2
 8001a48:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	68fa      	ldr	r2, [r7, #12]
 8001a50:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a5a:	2001      	movs	r0, #1
 8001a5c:	f7ff f918 	bl	8000c90 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	68fa      	ldr	r2, [r7, #12]
 8001a66:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001a70:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8001a76:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8001a7c:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8001a82:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8001a88:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8001a8e:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8001a9a:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001a9c:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001aa6:	2001      	movs	r0, #1
 8001aa8:	f7ff f8f2 	bl	8000c90 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	68fa      	ldr	r2, [r7, #12]
 8001ab2:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	683a      	ldr	r2, [r7, #0]
 8001aba:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001abc:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	683a      	ldr	r2, [r7, #0]
 8001ac4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001ac6:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	699b      	ldr	r3, [r3, #24]
 8001ace:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001ad0:	68fa      	ldr	r2, [r7, #12]
 8001ad2:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ade:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8001ae4:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8001aea:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8001af0:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8001af6:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8001afc:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8001afe:	68fa      	ldr	r2, [r7, #12]
 8001b00:	4313      	orrs	r3, r2
 8001b02:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	68fa      	ldr	r2, [r7, #12]
 8001b0a:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	699b      	ldr	r3, [r3, #24]
 8001b12:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b14:	2001      	movs	r0, #1
 8001b16:	f7ff f8bb 	bl	8000c90 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	68fa      	ldr	r2, [r7, #12]
 8001b20:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	430a      	orrs	r2, r1
 8001b30:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	69db      	ldr	r3, [r3, #28]
 8001b38:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b3a:	2001      	movs	r0, #1
 8001b3c:	f7ff f8a8 	bl	8000c90 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	68fa      	ldr	r2, [r7, #12]
 8001b46:	61da      	str	r2, [r3, #28]
 8001b48:	e01e      	b.n	8001b88 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001b58:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	689a      	ldr	r2, [r3, #8]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	68db      	ldr	r3, [r3, #12]
 8001b62:	4313      	orrs	r3, r2
 8001b64:	68fa      	ldr	r2, [r7, #12]
 8001b66:	4313      	orrs	r3, r2
 8001b68:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	68fa      	ldr	r2, [r7, #12]
 8001b70:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b7a:	2001      	movs	r0, #1
 8001b7c:	f7ff f888 	bl	8000c90 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	68fa      	ldr	r2, [r7, #12]
 8001b86:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2200      	movs	r2, #0
 8001b94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8001b98:	2300      	movs	r3, #0
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3710      	adds	r7, #16
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	ff20810f 	.word	0xff20810f

08001ba8 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b0b0      	sub	sp, #192	; 0xc0
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d007      	beq.n	8001bce <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001bc4:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001bcc:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8001bde:	2300      	movs	r3, #0
 8001be0:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8001be2:	2300      	movs	r3, #0
 8001be4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	69db      	ldr	r3, [r3, #28]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d103      	bne.n	8001bf6 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8001bee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001bf2:	663b      	str	r3, [r7, #96]	; 0x60
 8001bf4:	e001      	b.n	8001bfa <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8001bfa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001bfe:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8001c00:	2300      	movs	r3, #0
 8001c02:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001c04:	2300      	movs	r3, #0
 8001c06:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8001c10:	2300      	movs	r3, #0
 8001c12:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8001c14:	2340      	movs	r3, #64	; 0x40
 8001c16:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8001c24:	2300      	movs	r3, #0
 8001c26:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8001c30:	2300      	movs	r3, #0
 8001c32:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8001c36:	2300      	movs	r3, #0
 8001c38:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8001c42:	2300      	movs	r3, #0
 8001c44:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8001c48:	2380      	movs	r3, #128	; 0x80
 8001c4a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8001c54:	2300      	movs	r3, #0
 8001c56:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8001c60:	2300      	movs	r3, #0
 8001c62:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8001c66:	2300      	movs	r3, #0
 8001c68:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001c7c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001c80:	4bac      	ldr	r3, [pc, #688]	; (8001f34 <ETH_MACDMAConfig+0x38c>)
 8001c82:	4013      	ands	r3, r2
 8001c84:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001c88:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8001c8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001c8c:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8001c8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8001c90:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8001c92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8001c94:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8001c9a:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8001c9c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8001c9e:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8001ca0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8001ca2:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8001ca8:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8001caa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8001cac:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8001cae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8001cb0:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8001cb2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8001cb4:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8001cb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8001cb8:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8001cba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8001cbc:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001cbe:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001cd0:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001cdc:	2001      	movs	r0, #1
 8001cde:	f7fe ffd7 	bl	8000c90 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001cea:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001cec:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8001cee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001cf0:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8001cf2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8001cf4:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8001cf6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8001cfa:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8001cfc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8001d00:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8001d02:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8001d06:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8001d08:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8001d0c:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8001d10:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8001d18:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001d1a:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d26:	2001      	movs	r0, #1
 8001d28:	f7fe ffb2 	bl	8000c90 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001d34:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001d3e:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001d48:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	699b      	ldr	r3, [r3, #24]
 8001d50:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001d54:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001d58:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001d62:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001d66:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8001d68:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001d6c:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8001d6e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8001d72:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8001d74:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8001d78:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8001d7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8001d7e:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8001d80:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8001d84:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001d86:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001d98:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	699b      	ldr	r3, [r3, #24]
 8001da0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001da4:	2001      	movs	r0, #1
 8001da6:	f7fe ff73 	bl	8000c90 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001db2:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001db4:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8001db8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	430a      	orrs	r2, r1
 8001dc2:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	69db      	ldr	r3, [r3, #28]
 8001dca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001dce:	2001      	movs	r0, #1
 8001dd0:	f7fe ff5e 	bl	8000c90 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001ddc:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8001dde:	2300      	movs	r3, #0
 8001de0:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8001de2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001de6:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8001de8:	2300      	movs	r3, #0
 8001dea:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8001dec:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001df0:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001df2:	2300      	movs	r3, #0
 8001df4:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8001df6:	2300      	movs	r3, #0
 8001df8:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8001e02:	2304      	movs	r3, #4
 8001e04:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8001e06:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8001e0c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e10:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001e12:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001e16:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001e18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e1c:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8001e1e:	2380      	movs	r3, #128	; 0x80
 8001e20:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8001e22:	2300      	movs	r3, #0
 8001e24:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001e26:	2300      	movs	r3, #0
 8001e28:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e32:	3318      	adds	r3, #24
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001e3a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001e3e:	4b3e      	ldr	r3, [pc, #248]	; (8001f38 <ETH_MACDMAConfig+0x390>)
 8001e40:	4013      	ands	r3, r2
 8001e42:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001e46:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8001e48:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001e4a:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8001e4c:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8001e4e:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8001e50:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8001e52:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8001e54:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8001e56:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8001e58:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8001e5a:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8001e5c:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8001e5e:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8001e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8001e62:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8001e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8001e66:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001e68:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e7a:	3318      	adds	r3, #24
 8001e7c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001e80:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e8a:	3318      	adds	r3, #24
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e92:	2001      	movs	r0, #1
 8001e94:	f7fe fefc 	bl	8000c90 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ea0:	3318      	adds	r3, #24
 8001ea2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001ea6:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001ea8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8001eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001eac:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001eae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8001eb0:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8001eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001eb4:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8001eb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8001eb8:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 8001eba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ebc:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8001ebe:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8001ec0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 8001ec2:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001ecc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ed0:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ee0:	2001      	movs	r0, #1
 8001ee2:	f7fe fed5 	bl	8000c90 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001eee:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001ef2:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	699b      	ldr	r3, [r3, #24]
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d10f      	bne.n	8001f1c <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f04:	331c      	adds	r3, #28
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001f10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f18:	331c      	adds	r3, #28
 8001f1a:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	695b      	ldr	r3, [r3, #20]
 8001f20:	461a      	mov	r2, r3
 8001f22:	2100      	movs	r1, #0
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	f000 f809 	bl	8001f3c <ETH_MACAddressConfig>
}
 8001f2a:	bf00      	nop
 8001f2c:	37c0      	adds	r7, #192	; 0xc0
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	ff20810f 	.word	0xff20810f
 8001f38:	f8de3f23 	.word	0xf8de3f23

08001f3c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b087      	sub	sp, #28
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	60f8      	str	r0, [r7, #12]
 8001f44:	60b9      	str	r1, [r7, #8]
 8001f46:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	3305      	adds	r3, #5
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	021b      	lsls	r3, r3, #8
 8001f50:	687a      	ldr	r2, [r7, #4]
 8001f52:	3204      	adds	r2, #4
 8001f54:	7812      	ldrb	r2, [r2, #0]
 8001f56:	4313      	orrs	r3, r2
 8001f58:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001f5a:	68ba      	ldr	r2, [r7, #8]
 8001f5c:	4b11      	ldr	r3, [pc, #68]	; (8001fa4 <ETH_MACAddressConfig+0x68>)
 8001f5e:	4413      	add	r3, r2
 8001f60:	461a      	mov	r2, r3
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	3303      	adds	r3, #3
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	061a      	lsls	r2, r3, #24
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	3302      	adds	r3, #2
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	041b      	lsls	r3, r3, #16
 8001f76:	431a      	orrs	r2, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	3301      	adds	r3, #1
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	021b      	lsls	r3, r3, #8
 8001f80:	4313      	orrs	r3, r2
 8001f82:	687a      	ldr	r2, [r7, #4]
 8001f84:	7812      	ldrb	r2, [r2, #0]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001f8a:	68ba      	ldr	r2, [r7, #8]
 8001f8c:	4b06      	ldr	r3, [pc, #24]	; (8001fa8 <ETH_MACAddressConfig+0x6c>)
 8001f8e:	4413      	add	r3, r2
 8001f90:	461a      	mov	r2, r3
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	6013      	str	r3, [r2, #0]
}
 8001f96:	bf00      	nop
 8001f98:	371c      	adds	r7, #28
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop
 8001fa4:	40028040 	.word	0x40028040
 8001fa8:	40028044 	.word	0x40028044

08001fac <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b084      	sub	sp, #16
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f042 0208 	orr.w	r2, r2, #8
 8001fc6:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8001fd0:	2001      	movs	r0, #1
 8001fd2:	f000 f8e9 	bl	80021a8 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	68fa      	ldr	r2, [r7, #12]
 8001fdc:	601a      	str	r2, [r3, #0]
}
 8001fde:	bf00      	nop
 8001fe0:	3710      	adds	r7, #16
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}

08001fe6 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8001fe6:	b580      	push	{r7, lr}
 8001fe8:	b084      	sub	sp, #16
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f022 0208 	bic.w	r2, r2, #8
 8002000:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800200a:	2001      	movs	r0, #1
 800200c:	f000 f8cc 	bl	80021a8 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	68fa      	ldr	r2, [r7, #12]
 8002016:	601a      	str	r2, [r3, #0]
}
 8002018:	bf00      	nop
 800201a:	3710      	adds	r7, #16
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}

08002020 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8002020:	b580      	push	{r7, lr}
 8002022:	b084      	sub	sp, #16
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002028:	2300      	movs	r3, #0
 800202a:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f042 0204 	orr.w	r2, r2, #4
 800203a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002044:	2001      	movs	r0, #1
 8002046:	f000 f8af 	bl	80021a8 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	68fa      	ldr	r2, [r7, #12]
 8002050:	601a      	str	r2, [r3, #0]
}
 8002052:	bf00      	nop
 8002054:	3710      	adds	r7, #16
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}

0800205a <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 800205a:	b580      	push	{r7, lr}
 800205c:	b084      	sub	sp, #16
 800205e:	af00      	add	r7, sp, #0
 8002060:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002062:	2300      	movs	r3, #0
 8002064:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f022 0204 	bic.w	r2, r2, #4
 8002074:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800207e:	2001      	movs	r0, #1
 8002080:	f000 f892 	bl	80021a8 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	68fa      	ldr	r2, [r7, #12]
 800208a:	601a      	str	r2, [r3, #0]
}
 800208c:	bf00      	nop
 800208e:	3710      	adds	r7, #16
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}

08002094 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020a4:	3318      	adds	r3, #24
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80020b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020b4:	3318      	adds	r3, #24
 80020b6:	601a      	str	r2, [r3, #0]
}
 80020b8:	bf00      	nop
 80020ba:	370c      	adds	r7, #12
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr

080020c4 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020d4:	3318      	adds	r3, #24
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80020e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020e4:	3318      	adds	r3, #24
 80020e6:	601a      	str	r2, [r3, #0]
}
 80020e8:	bf00      	nop
 80020ea:	370c      	adds	r7, #12
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr

080020f4 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002104:	3318      	adds	r3, #24
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f042 0202 	orr.w	r2, r2, #2
 8002110:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002114:	3318      	adds	r3, #24
 8002116:	601a      	str	r2, [r3, #0]
}
 8002118:	bf00      	nop
 800211a:	370c      	adds	r7, #12
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr

08002124 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002134:	3318      	adds	r3, #24
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f022 0202 	bic.w	r2, r2, #2
 8002140:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002144:	3318      	adds	r3, #24
 8002146:	601a      	str	r2, [r3, #0]
}
 8002148:	bf00      	nop
 800214a:	370c      	adds	r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr

08002154 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b084      	sub	sp, #16
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800215c:	2300      	movs	r3, #0
 800215e:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002168:	3318      	adds	r3, #24
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002174:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002178:	3318      	adds	r3, #24
 800217a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002184:	3318      	adds	r3, #24
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800218a:	2001      	movs	r0, #1
 800218c:	f000 f80c 	bl	80021a8 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	68fa      	ldr	r2, [r7, #12]
 8002196:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800219a:	3318      	adds	r3, #24
 800219c:	601a      	str	r2, [r3, #0]
}
 800219e:	bf00      	nop
 80021a0:	3710      	adds	r7, #16
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
	...

080021a8 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b085      	sub	sp, #20
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80021b0:	4b0b      	ldr	r3, [pc, #44]	; (80021e0 <ETH_Delay+0x38>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a0b      	ldr	r2, [pc, #44]	; (80021e4 <ETH_Delay+0x3c>)
 80021b6:	fba2 2303 	umull	r2, r3, r2, r3
 80021ba:	0a5b      	lsrs	r3, r3, #9
 80021bc:	687a      	ldr	r2, [r7, #4]
 80021be:	fb02 f303 	mul.w	r3, r2, r3
 80021c2:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 80021c4:	bf00      	nop
  } 
  while (Delay --);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	1e5a      	subs	r2, r3, #1
 80021ca:	60fa      	str	r2, [r7, #12]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d1f9      	bne.n	80021c4 <ETH_Delay+0x1c>
}
 80021d0:	bf00      	nop
 80021d2:	bf00      	nop
 80021d4:	3714      	adds	r7, #20
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop
 80021e0:	20000000 	.word	0x20000000
 80021e4:	10624dd3 	.word	0x10624dd3

080021e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b089      	sub	sp, #36	; 0x24
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
 80021f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021f2:	2300      	movs	r3, #0
 80021f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021f6:	2300      	movs	r3, #0
 80021f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021fa:	2300      	movs	r3, #0
 80021fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021fe:	2300      	movs	r3, #0
 8002200:	61fb      	str	r3, [r7, #28]
 8002202:	e16b      	b.n	80024dc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002204:	2201      	movs	r2, #1
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	fa02 f303 	lsl.w	r3, r2, r3
 800220c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	697a      	ldr	r2, [r7, #20]
 8002214:	4013      	ands	r3, r2
 8002216:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002218:	693a      	ldr	r2, [r7, #16]
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	429a      	cmp	r2, r3
 800221e:	f040 815a 	bne.w	80024d6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	f003 0303 	and.w	r3, r3, #3
 800222a:	2b01      	cmp	r3, #1
 800222c:	d005      	beq.n	800223a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002236:	2b02      	cmp	r3, #2
 8002238:	d130      	bne.n	800229c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002240:	69fb      	ldr	r3, [r7, #28]
 8002242:	005b      	lsls	r3, r3, #1
 8002244:	2203      	movs	r2, #3
 8002246:	fa02 f303 	lsl.w	r3, r2, r3
 800224a:	43db      	mvns	r3, r3
 800224c:	69ba      	ldr	r2, [r7, #24]
 800224e:	4013      	ands	r3, r2
 8002250:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	68da      	ldr	r2, [r3, #12]
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	005b      	lsls	r3, r3, #1
 800225a:	fa02 f303 	lsl.w	r3, r2, r3
 800225e:	69ba      	ldr	r2, [r7, #24]
 8002260:	4313      	orrs	r3, r2
 8002262:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	69ba      	ldr	r2, [r7, #24]
 8002268:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002270:	2201      	movs	r2, #1
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	fa02 f303 	lsl.w	r3, r2, r3
 8002278:	43db      	mvns	r3, r3
 800227a:	69ba      	ldr	r2, [r7, #24]
 800227c:	4013      	ands	r3, r2
 800227e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	091b      	lsrs	r3, r3, #4
 8002286:	f003 0201 	and.w	r2, r3, #1
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	fa02 f303 	lsl.w	r3, r2, r3
 8002290:	69ba      	ldr	r2, [r7, #24]
 8002292:	4313      	orrs	r3, r2
 8002294:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	69ba      	ldr	r2, [r7, #24]
 800229a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f003 0303 	and.w	r3, r3, #3
 80022a4:	2b03      	cmp	r3, #3
 80022a6:	d017      	beq.n	80022d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	005b      	lsls	r3, r3, #1
 80022b2:	2203      	movs	r2, #3
 80022b4:	fa02 f303 	lsl.w	r3, r2, r3
 80022b8:	43db      	mvns	r3, r3
 80022ba:	69ba      	ldr	r2, [r7, #24]
 80022bc:	4013      	ands	r3, r2
 80022be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	689a      	ldr	r2, [r3, #8]
 80022c4:	69fb      	ldr	r3, [r7, #28]
 80022c6:	005b      	lsls	r3, r3, #1
 80022c8:	fa02 f303 	lsl.w	r3, r2, r3
 80022cc:	69ba      	ldr	r2, [r7, #24]
 80022ce:	4313      	orrs	r3, r2
 80022d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	69ba      	ldr	r2, [r7, #24]
 80022d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f003 0303 	and.w	r3, r3, #3
 80022e0:	2b02      	cmp	r3, #2
 80022e2:	d123      	bne.n	800232c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022e4:	69fb      	ldr	r3, [r7, #28]
 80022e6:	08da      	lsrs	r2, r3, #3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	3208      	adds	r2, #8
 80022ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	f003 0307 	and.w	r3, r3, #7
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	220f      	movs	r2, #15
 80022fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002300:	43db      	mvns	r3, r3
 8002302:	69ba      	ldr	r2, [r7, #24]
 8002304:	4013      	ands	r3, r2
 8002306:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	691a      	ldr	r2, [r3, #16]
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	f003 0307 	and.w	r3, r3, #7
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	fa02 f303 	lsl.w	r3, r2, r3
 8002318:	69ba      	ldr	r2, [r7, #24]
 800231a:	4313      	orrs	r3, r2
 800231c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	08da      	lsrs	r2, r3, #3
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	3208      	adds	r2, #8
 8002326:	69b9      	ldr	r1, [r7, #24]
 8002328:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	005b      	lsls	r3, r3, #1
 8002336:	2203      	movs	r2, #3
 8002338:	fa02 f303 	lsl.w	r3, r2, r3
 800233c:	43db      	mvns	r3, r3
 800233e:	69ba      	ldr	r2, [r7, #24]
 8002340:	4013      	ands	r3, r2
 8002342:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f003 0203 	and.w	r2, r3, #3
 800234c:	69fb      	ldr	r3, [r7, #28]
 800234e:	005b      	lsls	r3, r3, #1
 8002350:	fa02 f303 	lsl.w	r3, r2, r3
 8002354:	69ba      	ldr	r2, [r7, #24]
 8002356:	4313      	orrs	r3, r2
 8002358:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	69ba      	ldr	r2, [r7, #24]
 800235e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002368:	2b00      	cmp	r3, #0
 800236a:	f000 80b4 	beq.w	80024d6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800236e:	2300      	movs	r3, #0
 8002370:	60fb      	str	r3, [r7, #12]
 8002372:	4b60      	ldr	r3, [pc, #384]	; (80024f4 <HAL_GPIO_Init+0x30c>)
 8002374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002376:	4a5f      	ldr	r2, [pc, #380]	; (80024f4 <HAL_GPIO_Init+0x30c>)
 8002378:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800237c:	6453      	str	r3, [r2, #68]	; 0x44
 800237e:	4b5d      	ldr	r3, [pc, #372]	; (80024f4 <HAL_GPIO_Init+0x30c>)
 8002380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002382:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002386:	60fb      	str	r3, [r7, #12]
 8002388:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800238a:	4a5b      	ldr	r2, [pc, #364]	; (80024f8 <HAL_GPIO_Init+0x310>)
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	089b      	lsrs	r3, r3, #2
 8002390:	3302      	adds	r3, #2
 8002392:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002396:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	f003 0303 	and.w	r3, r3, #3
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	220f      	movs	r2, #15
 80023a2:	fa02 f303 	lsl.w	r3, r2, r3
 80023a6:	43db      	mvns	r3, r3
 80023a8:	69ba      	ldr	r2, [r7, #24]
 80023aa:	4013      	ands	r3, r2
 80023ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4a52      	ldr	r2, [pc, #328]	; (80024fc <HAL_GPIO_Init+0x314>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d02b      	beq.n	800240e <HAL_GPIO_Init+0x226>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a51      	ldr	r2, [pc, #324]	; (8002500 <HAL_GPIO_Init+0x318>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d025      	beq.n	800240a <HAL_GPIO_Init+0x222>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4a50      	ldr	r2, [pc, #320]	; (8002504 <HAL_GPIO_Init+0x31c>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d01f      	beq.n	8002406 <HAL_GPIO_Init+0x21e>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4a4f      	ldr	r2, [pc, #316]	; (8002508 <HAL_GPIO_Init+0x320>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d019      	beq.n	8002402 <HAL_GPIO_Init+0x21a>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a4e      	ldr	r2, [pc, #312]	; (800250c <HAL_GPIO_Init+0x324>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d013      	beq.n	80023fe <HAL_GPIO_Init+0x216>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4a4d      	ldr	r2, [pc, #308]	; (8002510 <HAL_GPIO_Init+0x328>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d00d      	beq.n	80023fa <HAL_GPIO_Init+0x212>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4a4c      	ldr	r2, [pc, #304]	; (8002514 <HAL_GPIO_Init+0x32c>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d007      	beq.n	80023f6 <HAL_GPIO_Init+0x20e>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4a4b      	ldr	r2, [pc, #300]	; (8002518 <HAL_GPIO_Init+0x330>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d101      	bne.n	80023f2 <HAL_GPIO_Init+0x20a>
 80023ee:	2307      	movs	r3, #7
 80023f0:	e00e      	b.n	8002410 <HAL_GPIO_Init+0x228>
 80023f2:	2308      	movs	r3, #8
 80023f4:	e00c      	b.n	8002410 <HAL_GPIO_Init+0x228>
 80023f6:	2306      	movs	r3, #6
 80023f8:	e00a      	b.n	8002410 <HAL_GPIO_Init+0x228>
 80023fa:	2305      	movs	r3, #5
 80023fc:	e008      	b.n	8002410 <HAL_GPIO_Init+0x228>
 80023fe:	2304      	movs	r3, #4
 8002400:	e006      	b.n	8002410 <HAL_GPIO_Init+0x228>
 8002402:	2303      	movs	r3, #3
 8002404:	e004      	b.n	8002410 <HAL_GPIO_Init+0x228>
 8002406:	2302      	movs	r3, #2
 8002408:	e002      	b.n	8002410 <HAL_GPIO_Init+0x228>
 800240a:	2301      	movs	r3, #1
 800240c:	e000      	b.n	8002410 <HAL_GPIO_Init+0x228>
 800240e:	2300      	movs	r3, #0
 8002410:	69fa      	ldr	r2, [r7, #28]
 8002412:	f002 0203 	and.w	r2, r2, #3
 8002416:	0092      	lsls	r2, r2, #2
 8002418:	4093      	lsls	r3, r2
 800241a:	69ba      	ldr	r2, [r7, #24]
 800241c:	4313      	orrs	r3, r2
 800241e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002420:	4935      	ldr	r1, [pc, #212]	; (80024f8 <HAL_GPIO_Init+0x310>)
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	089b      	lsrs	r3, r3, #2
 8002426:	3302      	adds	r3, #2
 8002428:	69ba      	ldr	r2, [r7, #24]
 800242a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800242e:	4b3b      	ldr	r3, [pc, #236]	; (800251c <HAL_GPIO_Init+0x334>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	43db      	mvns	r3, r3
 8002438:	69ba      	ldr	r2, [r7, #24]
 800243a:	4013      	ands	r3, r2
 800243c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d003      	beq.n	8002452 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800244a:	69ba      	ldr	r2, [r7, #24]
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	4313      	orrs	r3, r2
 8002450:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002452:	4a32      	ldr	r2, [pc, #200]	; (800251c <HAL_GPIO_Init+0x334>)
 8002454:	69bb      	ldr	r3, [r7, #24]
 8002456:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002458:	4b30      	ldr	r3, [pc, #192]	; (800251c <HAL_GPIO_Init+0x334>)
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	43db      	mvns	r3, r3
 8002462:	69ba      	ldr	r2, [r7, #24]
 8002464:	4013      	ands	r3, r2
 8002466:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002470:	2b00      	cmp	r3, #0
 8002472:	d003      	beq.n	800247c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002474:	69ba      	ldr	r2, [r7, #24]
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	4313      	orrs	r3, r2
 800247a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800247c:	4a27      	ldr	r2, [pc, #156]	; (800251c <HAL_GPIO_Init+0x334>)
 800247e:	69bb      	ldr	r3, [r7, #24]
 8002480:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002482:	4b26      	ldr	r3, [pc, #152]	; (800251c <HAL_GPIO_Init+0x334>)
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	43db      	mvns	r3, r3
 800248c:	69ba      	ldr	r2, [r7, #24]
 800248e:	4013      	ands	r3, r2
 8002490:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800249a:	2b00      	cmp	r3, #0
 800249c:	d003      	beq.n	80024a6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800249e:	69ba      	ldr	r2, [r7, #24]
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	4313      	orrs	r3, r2
 80024a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024a6:	4a1d      	ldr	r2, [pc, #116]	; (800251c <HAL_GPIO_Init+0x334>)
 80024a8:	69bb      	ldr	r3, [r7, #24]
 80024aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024ac:	4b1b      	ldr	r3, [pc, #108]	; (800251c <HAL_GPIO_Init+0x334>)
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	43db      	mvns	r3, r3
 80024b6:	69ba      	ldr	r2, [r7, #24]
 80024b8:	4013      	ands	r3, r2
 80024ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d003      	beq.n	80024d0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80024c8:	69ba      	ldr	r2, [r7, #24]
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	4313      	orrs	r3, r2
 80024ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024d0:	4a12      	ldr	r2, [pc, #72]	; (800251c <HAL_GPIO_Init+0x334>)
 80024d2:	69bb      	ldr	r3, [r7, #24]
 80024d4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	3301      	adds	r3, #1
 80024da:	61fb      	str	r3, [r7, #28]
 80024dc:	69fb      	ldr	r3, [r7, #28]
 80024de:	2b0f      	cmp	r3, #15
 80024e0:	f67f ae90 	bls.w	8002204 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80024e4:	bf00      	nop
 80024e6:	bf00      	nop
 80024e8:	3724      	adds	r7, #36	; 0x24
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr
 80024f2:	bf00      	nop
 80024f4:	40023800 	.word	0x40023800
 80024f8:	40013800 	.word	0x40013800
 80024fc:	40020000 	.word	0x40020000
 8002500:	40020400 	.word	0x40020400
 8002504:	40020800 	.word	0x40020800
 8002508:	40020c00 	.word	0x40020c00
 800250c:	40021000 	.word	0x40021000
 8002510:	40021400 	.word	0x40021400
 8002514:	40021800 	.word	0x40021800
 8002518:	40021c00 	.word	0x40021c00
 800251c:	40013c00 	.word	0x40013c00

08002520 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b086      	sub	sp, #24
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d101      	bne.n	8002532 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e264      	b.n	80029fc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0301 	and.w	r3, r3, #1
 800253a:	2b00      	cmp	r3, #0
 800253c:	d075      	beq.n	800262a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800253e:	4ba3      	ldr	r3, [pc, #652]	; (80027cc <HAL_RCC_OscConfig+0x2ac>)
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	f003 030c 	and.w	r3, r3, #12
 8002546:	2b04      	cmp	r3, #4
 8002548:	d00c      	beq.n	8002564 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800254a:	4ba0      	ldr	r3, [pc, #640]	; (80027cc <HAL_RCC_OscConfig+0x2ac>)
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002552:	2b08      	cmp	r3, #8
 8002554:	d112      	bne.n	800257c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002556:	4b9d      	ldr	r3, [pc, #628]	; (80027cc <HAL_RCC_OscConfig+0x2ac>)
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800255e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002562:	d10b      	bne.n	800257c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002564:	4b99      	ldr	r3, [pc, #612]	; (80027cc <HAL_RCC_OscConfig+0x2ac>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800256c:	2b00      	cmp	r3, #0
 800256e:	d05b      	beq.n	8002628 <HAL_RCC_OscConfig+0x108>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d157      	bne.n	8002628 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	e23f      	b.n	80029fc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002584:	d106      	bne.n	8002594 <HAL_RCC_OscConfig+0x74>
 8002586:	4b91      	ldr	r3, [pc, #580]	; (80027cc <HAL_RCC_OscConfig+0x2ac>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a90      	ldr	r2, [pc, #576]	; (80027cc <HAL_RCC_OscConfig+0x2ac>)
 800258c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002590:	6013      	str	r3, [r2, #0]
 8002592:	e01d      	b.n	80025d0 <HAL_RCC_OscConfig+0xb0>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800259c:	d10c      	bne.n	80025b8 <HAL_RCC_OscConfig+0x98>
 800259e:	4b8b      	ldr	r3, [pc, #556]	; (80027cc <HAL_RCC_OscConfig+0x2ac>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a8a      	ldr	r2, [pc, #552]	; (80027cc <HAL_RCC_OscConfig+0x2ac>)
 80025a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025a8:	6013      	str	r3, [r2, #0]
 80025aa:	4b88      	ldr	r3, [pc, #544]	; (80027cc <HAL_RCC_OscConfig+0x2ac>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a87      	ldr	r2, [pc, #540]	; (80027cc <HAL_RCC_OscConfig+0x2ac>)
 80025b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025b4:	6013      	str	r3, [r2, #0]
 80025b6:	e00b      	b.n	80025d0 <HAL_RCC_OscConfig+0xb0>
 80025b8:	4b84      	ldr	r3, [pc, #528]	; (80027cc <HAL_RCC_OscConfig+0x2ac>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a83      	ldr	r2, [pc, #524]	; (80027cc <HAL_RCC_OscConfig+0x2ac>)
 80025be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025c2:	6013      	str	r3, [r2, #0]
 80025c4:	4b81      	ldr	r3, [pc, #516]	; (80027cc <HAL_RCC_OscConfig+0x2ac>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a80      	ldr	r2, [pc, #512]	; (80027cc <HAL_RCC_OscConfig+0x2ac>)
 80025ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d013      	beq.n	8002600 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025d8:	f7fe fb4e 	bl	8000c78 <HAL_GetTick>
 80025dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025de:	e008      	b.n	80025f2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025e0:	f7fe fb4a 	bl	8000c78 <HAL_GetTick>
 80025e4:	4602      	mov	r2, r0
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	2b64      	cmp	r3, #100	; 0x64
 80025ec:	d901      	bls.n	80025f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	e204      	b.n	80029fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025f2:	4b76      	ldr	r3, [pc, #472]	; (80027cc <HAL_RCC_OscConfig+0x2ac>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d0f0      	beq.n	80025e0 <HAL_RCC_OscConfig+0xc0>
 80025fe:	e014      	b.n	800262a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002600:	f7fe fb3a 	bl	8000c78 <HAL_GetTick>
 8002604:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002606:	e008      	b.n	800261a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002608:	f7fe fb36 	bl	8000c78 <HAL_GetTick>
 800260c:	4602      	mov	r2, r0
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	2b64      	cmp	r3, #100	; 0x64
 8002614:	d901      	bls.n	800261a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	e1f0      	b.n	80029fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800261a:	4b6c      	ldr	r3, [pc, #432]	; (80027cc <HAL_RCC_OscConfig+0x2ac>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d1f0      	bne.n	8002608 <HAL_RCC_OscConfig+0xe8>
 8002626:	e000      	b.n	800262a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002628:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0302 	and.w	r3, r3, #2
 8002632:	2b00      	cmp	r3, #0
 8002634:	d063      	beq.n	80026fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002636:	4b65      	ldr	r3, [pc, #404]	; (80027cc <HAL_RCC_OscConfig+0x2ac>)
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	f003 030c 	and.w	r3, r3, #12
 800263e:	2b00      	cmp	r3, #0
 8002640:	d00b      	beq.n	800265a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002642:	4b62      	ldr	r3, [pc, #392]	; (80027cc <HAL_RCC_OscConfig+0x2ac>)
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800264a:	2b08      	cmp	r3, #8
 800264c:	d11c      	bne.n	8002688 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800264e:	4b5f      	ldr	r3, [pc, #380]	; (80027cc <HAL_RCC_OscConfig+0x2ac>)
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002656:	2b00      	cmp	r3, #0
 8002658:	d116      	bne.n	8002688 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800265a:	4b5c      	ldr	r3, [pc, #368]	; (80027cc <HAL_RCC_OscConfig+0x2ac>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 0302 	and.w	r3, r3, #2
 8002662:	2b00      	cmp	r3, #0
 8002664:	d005      	beq.n	8002672 <HAL_RCC_OscConfig+0x152>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	68db      	ldr	r3, [r3, #12]
 800266a:	2b01      	cmp	r3, #1
 800266c:	d001      	beq.n	8002672 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e1c4      	b.n	80029fc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002672:	4b56      	ldr	r3, [pc, #344]	; (80027cc <HAL_RCC_OscConfig+0x2ac>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	691b      	ldr	r3, [r3, #16]
 800267e:	00db      	lsls	r3, r3, #3
 8002680:	4952      	ldr	r1, [pc, #328]	; (80027cc <HAL_RCC_OscConfig+0x2ac>)
 8002682:	4313      	orrs	r3, r2
 8002684:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002686:	e03a      	b.n	80026fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d020      	beq.n	80026d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002690:	4b4f      	ldr	r3, [pc, #316]	; (80027d0 <HAL_RCC_OscConfig+0x2b0>)
 8002692:	2201      	movs	r2, #1
 8002694:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002696:	f7fe faef 	bl	8000c78 <HAL_GetTick>
 800269a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800269c:	e008      	b.n	80026b0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800269e:	f7fe faeb 	bl	8000c78 <HAL_GetTick>
 80026a2:	4602      	mov	r2, r0
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	2b02      	cmp	r3, #2
 80026aa:	d901      	bls.n	80026b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80026ac:	2303      	movs	r3, #3
 80026ae:	e1a5      	b.n	80029fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026b0:	4b46      	ldr	r3, [pc, #280]	; (80027cc <HAL_RCC_OscConfig+0x2ac>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 0302 	and.w	r3, r3, #2
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d0f0      	beq.n	800269e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026bc:	4b43      	ldr	r3, [pc, #268]	; (80027cc <HAL_RCC_OscConfig+0x2ac>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	691b      	ldr	r3, [r3, #16]
 80026c8:	00db      	lsls	r3, r3, #3
 80026ca:	4940      	ldr	r1, [pc, #256]	; (80027cc <HAL_RCC_OscConfig+0x2ac>)
 80026cc:	4313      	orrs	r3, r2
 80026ce:	600b      	str	r3, [r1, #0]
 80026d0:	e015      	b.n	80026fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026d2:	4b3f      	ldr	r3, [pc, #252]	; (80027d0 <HAL_RCC_OscConfig+0x2b0>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026d8:	f7fe face 	bl	8000c78 <HAL_GetTick>
 80026dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026de:	e008      	b.n	80026f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026e0:	f7fe faca 	bl	8000c78 <HAL_GetTick>
 80026e4:	4602      	mov	r2, r0
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d901      	bls.n	80026f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80026ee:	2303      	movs	r3, #3
 80026f0:	e184      	b.n	80029fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026f2:	4b36      	ldr	r3, [pc, #216]	; (80027cc <HAL_RCC_OscConfig+0x2ac>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0302 	and.w	r3, r3, #2
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d1f0      	bne.n	80026e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0308 	and.w	r3, r3, #8
 8002706:	2b00      	cmp	r3, #0
 8002708:	d030      	beq.n	800276c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	695b      	ldr	r3, [r3, #20]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d016      	beq.n	8002740 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002712:	4b30      	ldr	r3, [pc, #192]	; (80027d4 <HAL_RCC_OscConfig+0x2b4>)
 8002714:	2201      	movs	r2, #1
 8002716:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002718:	f7fe faae 	bl	8000c78 <HAL_GetTick>
 800271c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800271e:	e008      	b.n	8002732 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002720:	f7fe faaa 	bl	8000c78 <HAL_GetTick>
 8002724:	4602      	mov	r2, r0
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	1ad3      	subs	r3, r2, r3
 800272a:	2b02      	cmp	r3, #2
 800272c:	d901      	bls.n	8002732 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800272e:	2303      	movs	r3, #3
 8002730:	e164      	b.n	80029fc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002732:	4b26      	ldr	r3, [pc, #152]	; (80027cc <HAL_RCC_OscConfig+0x2ac>)
 8002734:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002736:	f003 0302 	and.w	r3, r3, #2
 800273a:	2b00      	cmp	r3, #0
 800273c:	d0f0      	beq.n	8002720 <HAL_RCC_OscConfig+0x200>
 800273e:	e015      	b.n	800276c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002740:	4b24      	ldr	r3, [pc, #144]	; (80027d4 <HAL_RCC_OscConfig+0x2b4>)
 8002742:	2200      	movs	r2, #0
 8002744:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002746:	f7fe fa97 	bl	8000c78 <HAL_GetTick>
 800274a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800274c:	e008      	b.n	8002760 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800274e:	f7fe fa93 	bl	8000c78 <HAL_GetTick>
 8002752:	4602      	mov	r2, r0
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	1ad3      	subs	r3, r2, r3
 8002758:	2b02      	cmp	r3, #2
 800275a:	d901      	bls.n	8002760 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800275c:	2303      	movs	r3, #3
 800275e:	e14d      	b.n	80029fc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002760:	4b1a      	ldr	r3, [pc, #104]	; (80027cc <HAL_RCC_OscConfig+0x2ac>)
 8002762:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002764:	f003 0302 	and.w	r3, r3, #2
 8002768:	2b00      	cmp	r3, #0
 800276a:	d1f0      	bne.n	800274e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 0304 	and.w	r3, r3, #4
 8002774:	2b00      	cmp	r3, #0
 8002776:	f000 80a0 	beq.w	80028ba <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800277a:	2300      	movs	r3, #0
 800277c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800277e:	4b13      	ldr	r3, [pc, #76]	; (80027cc <HAL_RCC_OscConfig+0x2ac>)
 8002780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002782:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d10f      	bne.n	80027aa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800278a:	2300      	movs	r3, #0
 800278c:	60bb      	str	r3, [r7, #8]
 800278e:	4b0f      	ldr	r3, [pc, #60]	; (80027cc <HAL_RCC_OscConfig+0x2ac>)
 8002790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002792:	4a0e      	ldr	r2, [pc, #56]	; (80027cc <HAL_RCC_OscConfig+0x2ac>)
 8002794:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002798:	6413      	str	r3, [r2, #64]	; 0x40
 800279a:	4b0c      	ldr	r3, [pc, #48]	; (80027cc <HAL_RCC_OscConfig+0x2ac>)
 800279c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027a2:	60bb      	str	r3, [r7, #8]
 80027a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027a6:	2301      	movs	r3, #1
 80027a8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027aa:	4b0b      	ldr	r3, [pc, #44]	; (80027d8 <HAL_RCC_OscConfig+0x2b8>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d121      	bne.n	80027fa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027b6:	4b08      	ldr	r3, [pc, #32]	; (80027d8 <HAL_RCC_OscConfig+0x2b8>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a07      	ldr	r2, [pc, #28]	; (80027d8 <HAL_RCC_OscConfig+0x2b8>)
 80027bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027c2:	f7fe fa59 	bl	8000c78 <HAL_GetTick>
 80027c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027c8:	e011      	b.n	80027ee <HAL_RCC_OscConfig+0x2ce>
 80027ca:	bf00      	nop
 80027cc:	40023800 	.word	0x40023800
 80027d0:	42470000 	.word	0x42470000
 80027d4:	42470e80 	.word	0x42470e80
 80027d8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027dc:	f7fe fa4c 	bl	8000c78 <HAL_GetTick>
 80027e0:	4602      	mov	r2, r0
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d901      	bls.n	80027ee <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	e106      	b.n	80029fc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027ee:	4b85      	ldr	r3, [pc, #532]	; (8002a04 <HAL_RCC_OscConfig+0x4e4>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d0f0      	beq.n	80027dc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d106      	bne.n	8002810 <HAL_RCC_OscConfig+0x2f0>
 8002802:	4b81      	ldr	r3, [pc, #516]	; (8002a08 <HAL_RCC_OscConfig+0x4e8>)
 8002804:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002806:	4a80      	ldr	r2, [pc, #512]	; (8002a08 <HAL_RCC_OscConfig+0x4e8>)
 8002808:	f043 0301 	orr.w	r3, r3, #1
 800280c:	6713      	str	r3, [r2, #112]	; 0x70
 800280e:	e01c      	b.n	800284a <HAL_RCC_OscConfig+0x32a>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	2b05      	cmp	r3, #5
 8002816:	d10c      	bne.n	8002832 <HAL_RCC_OscConfig+0x312>
 8002818:	4b7b      	ldr	r3, [pc, #492]	; (8002a08 <HAL_RCC_OscConfig+0x4e8>)
 800281a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800281c:	4a7a      	ldr	r2, [pc, #488]	; (8002a08 <HAL_RCC_OscConfig+0x4e8>)
 800281e:	f043 0304 	orr.w	r3, r3, #4
 8002822:	6713      	str	r3, [r2, #112]	; 0x70
 8002824:	4b78      	ldr	r3, [pc, #480]	; (8002a08 <HAL_RCC_OscConfig+0x4e8>)
 8002826:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002828:	4a77      	ldr	r2, [pc, #476]	; (8002a08 <HAL_RCC_OscConfig+0x4e8>)
 800282a:	f043 0301 	orr.w	r3, r3, #1
 800282e:	6713      	str	r3, [r2, #112]	; 0x70
 8002830:	e00b      	b.n	800284a <HAL_RCC_OscConfig+0x32a>
 8002832:	4b75      	ldr	r3, [pc, #468]	; (8002a08 <HAL_RCC_OscConfig+0x4e8>)
 8002834:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002836:	4a74      	ldr	r2, [pc, #464]	; (8002a08 <HAL_RCC_OscConfig+0x4e8>)
 8002838:	f023 0301 	bic.w	r3, r3, #1
 800283c:	6713      	str	r3, [r2, #112]	; 0x70
 800283e:	4b72      	ldr	r3, [pc, #456]	; (8002a08 <HAL_RCC_OscConfig+0x4e8>)
 8002840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002842:	4a71      	ldr	r2, [pc, #452]	; (8002a08 <HAL_RCC_OscConfig+0x4e8>)
 8002844:	f023 0304 	bic.w	r3, r3, #4
 8002848:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d015      	beq.n	800287e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002852:	f7fe fa11 	bl	8000c78 <HAL_GetTick>
 8002856:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002858:	e00a      	b.n	8002870 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800285a:	f7fe fa0d 	bl	8000c78 <HAL_GetTick>
 800285e:	4602      	mov	r2, r0
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	1ad3      	subs	r3, r2, r3
 8002864:	f241 3288 	movw	r2, #5000	; 0x1388
 8002868:	4293      	cmp	r3, r2
 800286a:	d901      	bls.n	8002870 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800286c:	2303      	movs	r3, #3
 800286e:	e0c5      	b.n	80029fc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002870:	4b65      	ldr	r3, [pc, #404]	; (8002a08 <HAL_RCC_OscConfig+0x4e8>)
 8002872:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002874:	f003 0302 	and.w	r3, r3, #2
 8002878:	2b00      	cmp	r3, #0
 800287a:	d0ee      	beq.n	800285a <HAL_RCC_OscConfig+0x33a>
 800287c:	e014      	b.n	80028a8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800287e:	f7fe f9fb 	bl	8000c78 <HAL_GetTick>
 8002882:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002884:	e00a      	b.n	800289c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002886:	f7fe f9f7 	bl	8000c78 <HAL_GetTick>
 800288a:	4602      	mov	r2, r0
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	1ad3      	subs	r3, r2, r3
 8002890:	f241 3288 	movw	r2, #5000	; 0x1388
 8002894:	4293      	cmp	r3, r2
 8002896:	d901      	bls.n	800289c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002898:	2303      	movs	r3, #3
 800289a:	e0af      	b.n	80029fc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800289c:	4b5a      	ldr	r3, [pc, #360]	; (8002a08 <HAL_RCC_OscConfig+0x4e8>)
 800289e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028a0:	f003 0302 	and.w	r3, r3, #2
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d1ee      	bne.n	8002886 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028a8:	7dfb      	ldrb	r3, [r7, #23]
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d105      	bne.n	80028ba <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028ae:	4b56      	ldr	r3, [pc, #344]	; (8002a08 <HAL_RCC_OscConfig+0x4e8>)
 80028b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b2:	4a55      	ldr	r2, [pc, #340]	; (8002a08 <HAL_RCC_OscConfig+0x4e8>)
 80028b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028b8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	699b      	ldr	r3, [r3, #24]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	f000 809b 	beq.w	80029fa <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80028c4:	4b50      	ldr	r3, [pc, #320]	; (8002a08 <HAL_RCC_OscConfig+0x4e8>)
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	f003 030c 	and.w	r3, r3, #12
 80028cc:	2b08      	cmp	r3, #8
 80028ce:	d05c      	beq.n	800298a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	699b      	ldr	r3, [r3, #24]
 80028d4:	2b02      	cmp	r3, #2
 80028d6:	d141      	bne.n	800295c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028d8:	4b4c      	ldr	r3, [pc, #304]	; (8002a0c <HAL_RCC_OscConfig+0x4ec>)
 80028da:	2200      	movs	r2, #0
 80028dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028de:	f7fe f9cb 	bl	8000c78 <HAL_GetTick>
 80028e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028e4:	e008      	b.n	80028f8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028e6:	f7fe f9c7 	bl	8000c78 <HAL_GetTick>
 80028ea:	4602      	mov	r2, r0
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	2b02      	cmp	r3, #2
 80028f2:	d901      	bls.n	80028f8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80028f4:	2303      	movs	r3, #3
 80028f6:	e081      	b.n	80029fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028f8:	4b43      	ldr	r3, [pc, #268]	; (8002a08 <HAL_RCC_OscConfig+0x4e8>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002900:	2b00      	cmp	r3, #0
 8002902:	d1f0      	bne.n	80028e6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	69da      	ldr	r2, [r3, #28]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6a1b      	ldr	r3, [r3, #32]
 800290c:	431a      	orrs	r2, r3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002912:	019b      	lsls	r3, r3, #6
 8002914:	431a      	orrs	r2, r3
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800291a:	085b      	lsrs	r3, r3, #1
 800291c:	3b01      	subs	r3, #1
 800291e:	041b      	lsls	r3, r3, #16
 8002920:	431a      	orrs	r2, r3
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002926:	061b      	lsls	r3, r3, #24
 8002928:	4937      	ldr	r1, [pc, #220]	; (8002a08 <HAL_RCC_OscConfig+0x4e8>)
 800292a:	4313      	orrs	r3, r2
 800292c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800292e:	4b37      	ldr	r3, [pc, #220]	; (8002a0c <HAL_RCC_OscConfig+0x4ec>)
 8002930:	2201      	movs	r2, #1
 8002932:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002934:	f7fe f9a0 	bl	8000c78 <HAL_GetTick>
 8002938:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800293a:	e008      	b.n	800294e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800293c:	f7fe f99c 	bl	8000c78 <HAL_GetTick>
 8002940:	4602      	mov	r2, r0
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	2b02      	cmp	r3, #2
 8002948:	d901      	bls.n	800294e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800294a:	2303      	movs	r3, #3
 800294c:	e056      	b.n	80029fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800294e:	4b2e      	ldr	r3, [pc, #184]	; (8002a08 <HAL_RCC_OscConfig+0x4e8>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002956:	2b00      	cmp	r3, #0
 8002958:	d0f0      	beq.n	800293c <HAL_RCC_OscConfig+0x41c>
 800295a:	e04e      	b.n	80029fa <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800295c:	4b2b      	ldr	r3, [pc, #172]	; (8002a0c <HAL_RCC_OscConfig+0x4ec>)
 800295e:	2200      	movs	r2, #0
 8002960:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002962:	f7fe f989 	bl	8000c78 <HAL_GetTick>
 8002966:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002968:	e008      	b.n	800297c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800296a:	f7fe f985 	bl	8000c78 <HAL_GetTick>
 800296e:	4602      	mov	r2, r0
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	1ad3      	subs	r3, r2, r3
 8002974:	2b02      	cmp	r3, #2
 8002976:	d901      	bls.n	800297c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002978:	2303      	movs	r3, #3
 800297a:	e03f      	b.n	80029fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800297c:	4b22      	ldr	r3, [pc, #136]	; (8002a08 <HAL_RCC_OscConfig+0x4e8>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002984:	2b00      	cmp	r3, #0
 8002986:	d1f0      	bne.n	800296a <HAL_RCC_OscConfig+0x44a>
 8002988:	e037      	b.n	80029fa <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	699b      	ldr	r3, [r3, #24]
 800298e:	2b01      	cmp	r3, #1
 8002990:	d101      	bne.n	8002996 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e032      	b.n	80029fc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002996:	4b1c      	ldr	r3, [pc, #112]	; (8002a08 <HAL_RCC_OscConfig+0x4e8>)
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	699b      	ldr	r3, [r3, #24]
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d028      	beq.n	80029f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d121      	bne.n	80029f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029bc:	429a      	cmp	r2, r3
 80029be:	d11a      	bne.n	80029f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029c0:	68fa      	ldr	r2, [r7, #12]
 80029c2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80029c6:	4013      	ands	r3, r2
 80029c8:	687a      	ldr	r2, [r7, #4]
 80029ca:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80029cc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d111      	bne.n	80029f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029dc:	085b      	lsrs	r3, r3, #1
 80029de:	3b01      	subs	r3, #1
 80029e0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029e2:	429a      	cmp	r2, r3
 80029e4:	d107      	bne.n	80029f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029f0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029f2:	429a      	cmp	r2, r3
 80029f4:	d001      	beq.n	80029fa <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e000      	b.n	80029fc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80029fa:	2300      	movs	r3, #0
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	3718      	adds	r7, #24
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	40007000 	.word	0x40007000
 8002a08:	40023800 	.word	0x40023800
 8002a0c:	42470060 	.word	0x42470060

08002a10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b084      	sub	sp, #16
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
 8002a18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d101      	bne.n	8002a24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	e0cc      	b.n	8002bbe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a24:	4b68      	ldr	r3, [pc, #416]	; (8002bc8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0307 	and.w	r3, r3, #7
 8002a2c:	683a      	ldr	r2, [r7, #0]
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d90c      	bls.n	8002a4c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a32:	4b65      	ldr	r3, [pc, #404]	; (8002bc8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a34:	683a      	ldr	r2, [r7, #0]
 8002a36:	b2d2      	uxtb	r2, r2
 8002a38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a3a:	4b63      	ldr	r3, [pc, #396]	; (8002bc8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0307 	and.w	r3, r3, #7
 8002a42:	683a      	ldr	r2, [r7, #0]
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d001      	beq.n	8002a4c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e0b8      	b.n	8002bbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 0302 	and.w	r3, r3, #2
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d020      	beq.n	8002a9a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 0304 	and.w	r3, r3, #4
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d005      	beq.n	8002a70 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a64:	4b59      	ldr	r3, [pc, #356]	; (8002bcc <HAL_RCC_ClockConfig+0x1bc>)
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	4a58      	ldr	r2, [pc, #352]	; (8002bcc <HAL_RCC_ClockConfig+0x1bc>)
 8002a6a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002a6e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 0308 	and.w	r3, r3, #8
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d005      	beq.n	8002a88 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a7c:	4b53      	ldr	r3, [pc, #332]	; (8002bcc <HAL_RCC_ClockConfig+0x1bc>)
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	4a52      	ldr	r2, [pc, #328]	; (8002bcc <HAL_RCC_ClockConfig+0x1bc>)
 8002a82:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a86:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a88:	4b50      	ldr	r3, [pc, #320]	; (8002bcc <HAL_RCC_ClockConfig+0x1bc>)
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	494d      	ldr	r1, [pc, #308]	; (8002bcc <HAL_RCC_ClockConfig+0x1bc>)
 8002a96:	4313      	orrs	r3, r2
 8002a98:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0301 	and.w	r3, r3, #1
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d044      	beq.n	8002b30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d107      	bne.n	8002abe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aae:	4b47      	ldr	r3, [pc, #284]	; (8002bcc <HAL_RCC_ClockConfig+0x1bc>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d119      	bne.n	8002aee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e07f      	b.n	8002bbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	d003      	beq.n	8002ace <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002aca:	2b03      	cmp	r3, #3
 8002acc:	d107      	bne.n	8002ade <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ace:	4b3f      	ldr	r3, [pc, #252]	; (8002bcc <HAL_RCC_ClockConfig+0x1bc>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d109      	bne.n	8002aee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e06f      	b.n	8002bbe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ade:	4b3b      	ldr	r3, [pc, #236]	; (8002bcc <HAL_RCC_ClockConfig+0x1bc>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 0302 	and.w	r3, r3, #2
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d101      	bne.n	8002aee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e067      	b.n	8002bbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002aee:	4b37      	ldr	r3, [pc, #220]	; (8002bcc <HAL_RCC_ClockConfig+0x1bc>)
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	f023 0203 	bic.w	r2, r3, #3
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	4934      	ldr	r1, [pc, #208]	; (8002bcc <HAL_RCC_ClockConfig+0x1bc>)
 8002afc:	4313      	orrs	r3, r2
 8002afe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b00:	f7fe f8ba 	bl	8000c78 <HAL_GetTick>
 8002b04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b06:	e00a      	b.n	8002b1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b08:	f7fe f8b6 	bl	8000c78 <HAL_GetTick>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d901      	bls.n	8002b1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	e04f      	b.n	8002bbe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b1e:	4b2b      	ldr	r3, [pc, #172]	; (8002bcc <HAL_RCC_ClockConfig+0x1bc>)
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	f003 020c 	and.w	r2, r3, #12
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d1eb      	bne.n	8002b08 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b30:	4b25      	ldr	r3, [pc, #148]	; (8002bc8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 0307 	and.w	r3, r3, #7
 8002b38:	683a      	ldr	r2, [r7, #0]
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	d20c      	bcs.n	8002b58 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b3e:	4b22      	ldr	r3, [pc, #136]	; (8002bc8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b40:	683a      	ldr	r2, [r7, #0]
 8002b42:	b2d2      	uxtb	r2, r2
 8002b44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b46:	4b20      	ldr	r3, [pc, #128]	; (8002bc8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 0307 	and.w	r3, r3, #7
 8002b4e:	683a      	ldr	r2, [r7, #0]
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d001      	beq.n	8002b58 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	e032      	b.n	8002bbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 0304 	and.w	r3, r3, #4
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d008      	beq.n	8002b76 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b64:	4b19      	ldr	r3, [pc, #100]	; (8002bcc <HAL_RCC_ClockConfig+0x1bc>)
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	4916      	ldr	r1, [pc, #88]	; (8002bcc <HAL_RCC_ClockConfig+0x1bc>)
 8002b72:	4313      	orrs	r3, r2
 8002b74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0308 	and.w	r3, r3, #8
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d009      	beq.n	8002b96 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b82:	4b12      	ldr	r3, [pc, #72]	; (8002bcc <HAL_RCC_ClockConfig+0x1bc>)
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	691b      	ldr	r3, [r3, #16]
 8002b8e:	00db      	lsls	r3, r3, #3
 8002b90:	490e      	ldr	r1, [pc, #56]	; (8002bcc <HAL_RCC_ClockConfig+0x1bc>)
 8002b92:	4313      	orrs	r3, r2
 8002b94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b96:	f000 f821 	bl	8002bdc <HAL_RCC_GetSysClockFreq>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	4b0b      	ldr	r3, [pc, #44]	; (8002bcc <HAL_RCC_ClockConfig+0x1bc>)
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	091b      	lsrs	r3, r3, #4
 8002ba2:	f003 030f 	and.w	r3, r3, #15
 8002ba6:	490a      	ldr	r1, [pc, #40]	; (8002bd0 <HAL_RCC_ClockConfig+0x1c0>)
 8002ba8:	5ccb      	ldrb	r3, [r1, r3]
 8002baa:	fa22 f303 	lsr.w	r3, r2, r3
 8002bae:	4a09      	ldr	r2, [pc, #36]	; (8002bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002bb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002bb2:	4b09      	ldr	r3, [pc, #36]	; (8002bd8 <HAL_RCC_ClockConfig+0x1c8>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f7fd fe9e 	bl	80008f8 <HAL_InitTick>

  return HAL_OK;
 8002bbc:	2300      	movs	r3, #0
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3710      	adds	r7, #16
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	40023c00 	.word	0x40023c00
 8002bcc:	40023800 	.word	0x40023800
 8002bd0:	08019b14 	.word	0x08019b14
 8002bd4:	20000000 	.word	0x20000000
 8002bd8:	20000004 	.word	0x20000004

08002bdc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bdc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002be0:	b084      	sub	sp, #16
 8002be2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002be4:	2300      	movs	r3, #0
 8002be6:	607b      	str	r3, [r7, #4]
 8002be8:	2300      	movs	r3, #0
 8002bea:	60fb      	str	r3, [r7, #12]
 8002bec:	2300      	movs	r3, #0
 8002bee:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002bf4:	4b67      	ldr	r3, [pc, #412]	; (8002d94 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	f003 030c 	and.w	r3, r3, #12
 8002bfc:	2b08      	cmp	r3, #8
 8002bfe:	d00d      	beq.n	8002c1c <HAL_RCC_GetSysClockFreq+0x40>
 8002c00:	2b08      	cmp	r3, #8
 8002c02:	f200 80bd 	bhi.w	8002d80 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d002      	beq.n	8002c10 <HAL_RCC_GetSysClockFreq+0x34>
 8002c0a:	2b04      	cmp	r3, #4
 8002c0c:	d003      	beq.n	8002c16 <HAL_RCC_GetSysClockFreq+0x3a>
 8002c0e:	e0b7      	b.n	8002d80 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c10:	4b61      	ldr	r3, [pc, #388]	; (8002d98 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002c12:	60bb      	str	r3, [r7, #8]
       break;
 8002c14:	e0b7      	b.n	8002d86 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c16:	4b61      	ldr	r3, [pc, #388]	; (8002d9c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002c18:	60bb      	str	r3, [r7, #8]
      break;
 8002c1a:	e0b4      	b.n	8002d86 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c1c:	4b5d      	ldr	r3, [pc, #372]	; (8002d94 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c24:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c26:	4b5b      	ldr	r3, [pc, #364]	; (8002d94 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d04d      	beq.n	8002cce <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c32:	4b58      	ldr	r3, [pc, #352]	; (8002d94 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	099b      	lsrs	r3, r3, #6
 8002c38:	461a      	mov	r2, r3
 8002c3a:	f04f 0300 	mov.w	r3, #0
 8002c3e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002c42:	f04f 0100 	mov.w	r1, #0
 8002c46:	ea02 0800 	and.w	r8, r2, r0
 8002c4a:	ea03 0901 	and.w	r9, r3, r1
 8002c4e:	4640      	mov	r0, r8
 8002c50:	4649      	mov	r1, r9
 8002c52:	f04f 0200 	mov.w	r2, #0
 8002c56:	f04f 0300 	mov.w	r3, #0
 8002c5a:	014b      	lsls	r3, r1, #5
 8002c5c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002c60:	0142      	lsls	r2, r0, #5
 8002c62:	4610      	mov	r0, r2
 8002c64:	4619      	mov	r1, r3
 8002c66:	ebb0 0008 	subs.w	r0, r0, r8
 8002c6a:	eb61 0109 	sbc.w	r1, r1, r9
 8002c6e:	f04f 0200 	mov.w	r2, #0
 8002c72:	f04f 0300 	mov.w	r3, #0
 8002c76:	018b      	lsls	r3, r1, #6
 8002c78:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002c7c:	0182      	lsls	r2, r0, #6
 8002c7e:	1a12      	subs	r2, r2, r0
 8002c80:	eb63 0301 	sbc.w	r3, r3, r1
 8002c84:	f04f 0000 	mov.w	r0, #0
 8002c88:	f04f 0100 	mov.w	r1, #0
 8002c8c:	00d9      	lsls	r1, r3, #3
 8002c8e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002c92:	00d0      	lsls	r0, r2, #3
 8002c94:	4602      	mov	r2, r0
 8002c96:	460b      	mov	r3, r1
 8002c98:	eb12 0208 	adds.w	r2, r2, r8
 8002c9c:	eb43 0309 	adc.w	r3, r3, r9
 8002ca0:	f04f 0000 	mov.w	r0, #0
 8002ca4:	f04f 0100 	mov.w	r1, #0
 8002ca8:	0259      	lsls	r1, r3, #9
 8002caa:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002cae:	0250      	lsls	r0, r2, #9
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	460b      	mov	r3, r1
 8002cb4:	4610      	mov	r0, r2
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	461a      	mov	r2, r3
 8002cbc:	f04f 0300 	mov.w	r3, #0
 8002cc0:	f7fd fad6 	bl	8000270 <__aeabi_uldivmod>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	460b      	mov	r3, r1
 8002cc8:	4613      	mov	r3, r2
 8002cca:	60fb      	str	r3, [r7, #12]
 8002ccc:	e04a      	b.n	8002d64 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cce:	4b31      	ldr	r3, [pc, #196]	; (8002d94 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	099b      	lsrs	r3, r3, #6
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	f04f 0300 	mov.w	r3, #0
 8002cda:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002cde:	f04f 0100 	mov.w	r1, #0
 8002ce2:	ea02 0400 	and.w	r4, r2, r0
 8002ce6:	ea03 0501 	and.w	r5, r3, r1
 8002cea:	4620      	mov	r0, r4
 8002cec:	4629      	mov	r1, r5
 8002cee:	f04f 0200 	mov.w	r2, #0
 8002cf2:	f04f 0300 	mov.w	r3, #0
 8002cf6:	014b      	lsls	r3, r1, #5
 8002cf8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002cfc:	0142      	lsls	r2, r0, #5
 8002cfe:	4610      	mov	r0, r2
 8002d00:	4619      	mov	r1, r3
 8002d02:	1b00      	subs	r0, r0, r4
 8002d04:	eb61 0105 	sbc.w	r1, r1, r5
 8002d08:	f04f 0200 	mov.w	r2, #0
 8002d0c:	f04f 0300 	mov.w	r3, #0
 8002d10:	018b      	lsls	r3, r1, #6
 8002d12:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002d16:	0182      	lsls	r2, r0, #6
 8002d18:	1a12      	subs	r2, r2, r0
 8002d1a:	eb63 0301 	sbc.w	r3, r3, r1
 8002d1e:	f04f 0000 	mov.w	r0, #0
 8002d22:	f04f 0100 	mov.w	r1, #0
 8002d26:	00d9      	lsls	r1, r3, #3
 8002d28:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002d2c:	00d0      	lsls	r0, r2, #3
 8002d2e:	4602      	mov	r2, r0
 8002d30:	460b      	mov	r3, r1
 8002d32:	1912      	adds	r2, r2, r4
 8002d34:	eb45 0303 	adc.w	r3, r5, r3
 8002d38:	f04f 0000 	mov.w	r0, #0
 8002d3c:	f04f 0100 	mov.w	r1, #0
 8002d40:	0299      	lsls	r1, r3, #10
 8002d42:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002d46:	0290      	lsls	r0, r2, #10
 8002d48:	4602      	mov	r2, r0
 8002d4a:	460b      	mov	r3, r1
 8002d4c:	4610      	mov	r0, r2
 8002d4e:	4619      	mov	r1, r3
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	461a      	mov	r2, r3
 8002d54:	f04f 0300 	mov.w	r3, #0
 8002d58:	f7fd fa8a 	bl	8000270 <__aeabi_uldivmod>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	460b      	mov	r3, r1
 8002d60:	4613      	mov	r3, r2
 8002d62:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002d64:	4b0b      	ldr	r3, [pc, #44]	; (8002d94 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	0c1b      	lsrs	r3, r3, #16
 8002d6a:	f003 0303 	and.w	r3, r3, #3
 8002d6e:	3301      	adds	r3, #1
 8002d70:	005b      	lsls	r3, r3, #1
 8002d72:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002d74:	68fa      	ldr	r2, [r7, #12]
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d7c:	60bb      	str	r3, [r7, #8]
      break;
 8002d7e:	e002      	b.n	8002d86 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d80:	4b05      	ldr	r3, [pc, #20]	; (8002d98 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002d82:	60bb      	str	r3, [r7, #8]
      break;
 8002d84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d86:	68bb      	ldr	r3, [r7, #8]
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3710      	adds	r7, #16
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002d92:	bf00      	nop
 8002d94:	40023800 	.word	0x40023800
 8002d98:	00f42400 	.word	0x00f42400
 8002d9c:	007a1200 	.word	0x007a1200

08002da0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002da0:	b480      	push	{r7}
 8002da2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002da4:	4b03      	ldr	r3, [pc, #12]	; (8002db4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002da6:	681b      	ldr	r3, [r3, #0]
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr
 8002db2:	bf00      	nop
 8002db4:	20000000 	.word	0x20000000

08002db8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002dbc:	f7ff fff0 	bl	8002da0 <HAL_RCC_GetHCLKFreq>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	4b05      	ldr	r3, [pc, #20]	; (8002dd8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	0a9b      	lsrs	r3, r3, #10
 8002dc8:	f003 0307 	and.w	r3, r3, #7
 8002dcc:	4903      	ldr	r1, [pc, #12]	; (8002ddc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002dce:	5ccb      	ldrb	r3, [r1, r3]
 8002dd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	bd80      	pop	{r7, pc}
 8002dd8:	40023800 	.word	0x40023800
 8002ddc:	08019b24 	.word	0x08019b24

08002de0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
 8002de8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	220f      	movs	r2, #15
 8002dee:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002df0:	4b12      	ldr	r3, [pc, #72]	; (8002e3c <HAL_RCC_GetClockConfig+0x5c>)
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	f003 0203 	and.w	r2, r3, #3
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002dfc:	4b0f      	ldr	r3, [pc, #60]	; (8002e3c <HAL_RCC_GetClockConfig+0x5c>)
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002e08:	4b0c      	ldr	r3, [pc, #48]	; (8002e3c <HAL_RCC_GetClockConfig+0x5c>)
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002e14:	4b09      	ldr	r3, [pc, #36]	; (8002e3c <HAL_RCC_GetClockConfig+0x5c>)
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	08db      	lsrs	r3, r3, #3
 8002e1a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002e22:	4b07      	ldr	r3, [pc, #28]	; (8002e40 <HAL_RCC_GetClockConfig+0x60>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0207 	and.w	r2, r3, #7
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	601a      	str	r2, [r3, #0]
}
 8002e2e:	bf00      	nop
 8002e30:	370c      	adds	r7, #12
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr
 8002e3a:	bf00      	nop
 8002e3c:	40023800 	.word	0x40023800
 8002e40:	40023c00 	.word	0x40023c00

08002e44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b082      	sub	sp, #8
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d101      	bne.n	8002e56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e041      	b.n	8002eda <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d106      	bne.n	8002e70 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f000 f839 	bl	8002ee2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2202      	movs	r2, #2
 8002e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	3304      	adds	r3, #4
 8002e80:	4619      	mov	r1, r3
 8002e82:	4610      	mov	r0, r2
 8002e84:	f000 f9d8 	bl	8003238 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2201      	movs	r2, #1
 8002e94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ed8:	2300      	movs	r3, #0
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3708      	adds	r7, #8
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}

08002ee2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002ee2:	b480      	push	{r7}
 8002ee4:	b083      	sub	sp, #12
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002eea:	bf00      	nop
 8002eec:	370c      	adds	r7, #12
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr
	...

08002ef8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b085      	sub	sp, #20
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f06:	b2db      	uxtb	r3, r3
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d001      	beq.n	8002f10 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e04e      	b.n	8002fae <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2202      	movs	r2, #2
 8002f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	68da      	ldr	r2, [r3, #12]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f042 0201 	orr.w	r2, r2, #1
 8002f26:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a23      	ldr	r2, [pc, #140]	; (8002fbc <HAL_TIM_Base_Start_IT+0xc4>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d022      	beq.n	8002f78 <HAL_TIM_Base_Start_IT+0x80>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f3a:	d01d      	beq.n	8002f78 <HAL_TIM_Base_Start_IT+0x80>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a1f      	ldr	r2, [pc, #124]	; (8002fc0 <HAL_TIM_Base_Start_IT+0xc8>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d018      	beq.n	8002f78 <HAL_TIM_Base_Start_IT+0x80>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a1e      	ldr	r2, [pc, #120]	; (8002fc4 <HAL_TIM_Base_Start_IT+0xcc>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d013      	beq.n	8002f78 <HAL_TIM_Base_Start_IT+0x80>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a1c      	ldr	r2, [pc, #112]	; (8002fc8 <HAL_TIM_Base_Start_IT+0xd0>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d00e      	beq.n	8002f78 <HAL_TIM_Base_Start_IT+0x80>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a1b      	ldr	r2, [pc, #108]	; (8002fcc <HAL_TIM_Base_Start_IT+0xd4>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d009      	beq.n	8002f78 <HAL_TIM_Base_Start_IT+0x80>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a19      	ldr	r2, [pc, #100]	; (8002fd0 <HAL_TIM_Base_Start_IT+0xd8>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d004      	beq.n	8002f78 <HAL_TIM_Base_Start_IT+0x80>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a18      	ldr	r2, [pc, #96]	; (8002fd4 <HAL_TIM_Base_Start_IT+0xdc>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d111      	bne.n	8002f9c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	f003 0307 	and.w	r3, r3, #7
 8002f82:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2b06      	cmp	r3, #6
 8002f88:	d010      	beq.n	8002fac <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f042 0201 	orr.w	r2, r2, #1
 8002f98:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f9a:	e007      	b.n	8002fac <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f042 0201 	orr.w	r2, r2, #1
 8002faa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002fac:	2300      	movs	r3, #0
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3714      	adds	r7, #20
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr
 8002fba:	bf00      	nop
 8002fbc:	40010000 	.word	0x40010000
 8002fc0:	40000400 	.word	0x40000400
 8002fc4:	40000800 	.word	0x40000800
 8002fc8:	40000c00 	.word	0x40000c00
 8002fcc:	40010400 	.word	0x40010400
 8002fd0:	40014000 	.word	0x40014000
 8002fd4:	40001800 	.word	0x40001800

08002fd8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b082      	sub	sp, #8
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	691b      	ldr	r3, [r3, #16]
 8002fe6:	f003 0302 	and.w	r3, r3, #2
 8002fea:	2b02      	cmp	r3, #2
 8002fec:	d122      	bne.n	8003034 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	f003 0302 	and.w	r3, r3, #2
 8002ff8:	2b02      	cmp	r3, #2
 8002ffa:	d11b      	bne.n	8003034 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f06f 0202 	mvn.w	r2, #2
 8003004:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2201      	movs	r2, #1
 800300a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	699b      	ldr	r3, [r3, #24]
 8003012:	f003 0303 	and.w	r3, r3, #3
 8003016:	2b00      	cmp	r3, #0
 8003018:	d003      	beq.n	8003022 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f000 f8ee 	bl	80031fc <HAL_TIM_IC_CaptureCallback>
 8003020:	e005      	b.n	800302e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f000 f8e0 	bl	80031e8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	f000 f8f1 	bl	8003210 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2200      	movs	r2, #0
 8003032:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	691b      	ldr	r3, [r3, #16]
 800303a:	f003 0304 	and.w	r3, r3, #4
 800303e:	2b04      	cmp	r3, #4
 8003040:	d122      	bne.n	8003088 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	f003 0304 	and.w	r3, r3, #4
 800304c:	2b04      	cmp	r3, #4
 800304e:	d11b      	bne.n	8003088 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f06f 0204 	mvn.w	r2, #4
 8003058:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2202      	movs	r2, #2
 800305e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	699b      	ldr	r3, [r3, #24]
 8003066:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800306a:	2b00      	cmp	r3, #0
 800306c:	d003      	beq.n	8003076 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f000 f8c4 	bl	80031fc <HAL_TIM_IC_CaptureCallback>
 8003074:	e005      	b.n	8003082 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f000 f8b6 	bl	80031e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	f000 f8c7 	bl	8003210 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2200      	movs	r2, #0
 8003086:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	691b      	ldr	r3, [r3, #16]
 800308e:	f003 0308 	and.w	r3, r3, #8
 8003092:	2b08      	cmp	r3, #8
 8003094:	d122      	bne.n	80030dc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	f003 0308 	and.w	r3, r3, #8
 80030a0:	2b08      	cmp	r3, #8
 80030a2:	d11b      	bne.n	80030dc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f06f 0208 	mvn.w	r2, #8
 80030ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2204      	movs	r2, #4
 80030b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	69db      	ldr	r3, [r3, #28]
 80030ba:	f003 0303 	and.w	r3, r3, #3
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d003      	beq.n	80030ca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f000 f89a 	bl	80031fc <HAL_TIM_IC_CaptureCallback>
 80030c8:	e005      	b.n	80030d6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f000 f88c 	bl	80031e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030d0:	6878      	ldr	r0, [r7, #4]
 80030d2:	f000 f89d 	bl	8003210 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2200      	movs	r2, #0
 80030da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	691b      	ldr	r3, [r3, #16]
 80030e2:	f003 0310 	and.w	r3, r3, #16
 80030e6:	2b10      	cmp	r3, #16
 80030e8:	d122      	bne.n	8003130 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	f003 0310 	and.w	r3, r3, #16
 80030f4:	2b10      	cmp	r3, #16
 80030f6:	d11b      	bne.n	8003130 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f06f 0210 	mvn.w	r2, #16
 8003100:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2208      	movs	r2, #8
 8003106:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	69db      	ldr	r3, [r3, #28]
 800310e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003112:	2b00      	cmp	r3, #0
 8003114:	d003      	beq.n	800311e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f000 f870 	bl	80031fc <HAL_TIM_IC_CaptureCallback>
 800311c:	e005      	b.n	800312a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f000 f862 	bl	80031e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003124:	6878      	ldr	r0, [r7, #4]
 8003126:	f000 f873 	bl	8003210 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2200      	movs	r2, #0
 800312e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	691b      	ldr	r3, [r3, #16]
 8003136:	f003 0301 	and.w	r3, r3, #1
 800313a:	2b01      	cmp	r3, #1
 800313c:	d10e      	bne.n	800315c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	f003 0301 	and.w	r3, r3, #1
 8003148:	2b01      	cmp	r3, #1
 800314a:	d107      	bne.n	800315c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f06f 0201 	mvn.w	r2, #1
 8003154:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f7fd fb8a 	bl	8000870 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	691b      	ldr	r3, [r3, #16]
 8003162:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003166:	2b80      	cmp	r3, #128	; 0x80
 8003168:	d10e      	bne.n	8003188 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003174:	2b80      	cmp	r3, #128	; 0x80
 8003176:	d107      	bne.n	8003188 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003180:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f000 f902 	bl	800338c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	691b      	ldr	r3, [r3, #16]
 800318e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003192:	2b40      	cmp	r3, #64	; 0x40
 8003194:	d10e      	bne.n	80031b4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031a0:	2b40      	cmp	r3, #64	; 0x40
 80031a2:	d107      	bne.n	80031b4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80031ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f000 f838 	bl	8003224 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	691b      	ldr	r3, [r3, #16]
 80031ba:	f003 0320 	and.w	r3, r3, #32
 80031be:	2b20      	cmp	r3, #32
 80031c0:	d10e      	bne.n	80031e0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	f003 0320 	and.w	r3, r3, #32
 80031cc:	2b20      	cmp	r3, #32
 80031ce:	d107      	bne.n	80031e0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f06f 0220 	mvn.w	r2, #32
 80031d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f000 f8cc 	bl	8003378 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80031e0:	bf00      	nop
 80031e2:	3708      	adds	r7, #8
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}

080031e8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b083      	sub	sp, #12
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80031f0:	bf00      	nop
 80031f2:	370c      	adds	r7, #12
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr

080031fc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b083      	sub	sp, #12
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003204:	bf00      	nop
 8003206:	370c      	adds	r7, #12
 8003208:	46bd      	mov	sp, r7
 800320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320e:	4770      	bx	lr

08003210 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003210:	b480      	push	{r7}
 8003212:	b083      	sub	sp, #12
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003218:	bf00      	nop
 800321a:	370c      	adds	r7, #12
 800321c:	46bd      	mov	sp, r7
 800321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003222:	4770      	bx	lr

08003224 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003224:	b480      	push	{r7}
 8003226:	b083      	sub	sp, #12
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800322c:	bf00      	nop
 800322e:	370c      	adds	r7, #12
 8003230:	46bd      	mov	sp, r7
 8003232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003236:	4770      	bx	lr

08003238 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003238:	b480      	push	{r7}
 800323a:	b085      	sub	sp, #20
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
 8003240:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	4a40      	ldr	r2, [pc, #256]	; (800334c <TIM_Base_SetConfig+0x114>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d013      	beq.n	8003278 <TIM_Base_SetConfig+0x40>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003256:	d00f      	beq.n	8003278 <TIM_Base_SetConfig+0x40>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	4a3d      	ldr	r2, [pc, #244]	; (8003350 <TIM_Base_SetConfig+0x118>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d00b      	beq.n	8003278 <TIM_Base_SetConfig+0x40>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	4a3c      	ldr	r2, [pc, #240]	; (8003354 <TIM_Base_SetConfig+0x11c>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d007      	beq.n	8003278 <TIM_Base_SetConfig+0x40>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	4a3b      	ldr	r2, [pc, #236]	; (8003358 <TIM_Base_SetConfig+0x120>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d003      	beq.n	8003278 <TIM_Base_SetConfig+0x40>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	4a3a      	ldr	r2, [pc, #232]	; (800335c <TIM_Base_SetConfig+0x124>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d108      	bne.n	800328a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800327e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	68fa      	ldr	r2, [r7, #12]
 8003286:	4313      	orrs	r3, r2
 8003288:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	4a2f      	ldr	r2, [pc, #188]	; (800334c <TIM_Base_SetConfig+0x114>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d02b      	beq.n	80032ea <TIM_Base_SetConfig+0xb2>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003298:	d027      	beq.n	80032ea <TIM_Base_SetConfig+0xb2>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4a2c      	ldr	r2, [pc, #176]	; (8003350 <TIM_Base_SetConfig+0x118>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d023      	beq.n	80032ea <TIM_Base_SetConfig+0xb2>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4a2b      	ldr	r2, [pc, #172]	; (8003354 <TIM_Base_SetConfig+0x11c>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d01f      	beq.n	80032ea <TIM_Base_SetConfig+0xb2>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4a2a      	ldr	r2, [pc, #168]	; (8003358 <TIM_Base_SetConfig+0x120>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d01b      	beq.n	80032ea <TIM_Base_SetConfig+0xb2>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a29      	ldr	r2, [pc, #164]	; (800335c <TIM_Base_SetConfig+0x124>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d017      	beq.n	80032ea <TIM_Base_SetConfig+0xb2>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4a28      	ldr	r2, [pc, #160]	; (8003360 <TIM_Base_SetConfig+0x128>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d013      	beq.n	80032ea <TIM_Base_SetConfig+0xb2>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4a27      	ldr	r2, [pc, #156]	; (8003364 <TIM_Base_SetConfig+0x12c>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d00f      	beq.n	80032ea <TIM_Base_SetConfig+0xb2>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4a26      	ldr	r2, [pc, #152]	; (8003368 <TIM_Base_SetConfig+0x130>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d00b      	beq.n	80032ea <TIM_Base_SetConfig+0xb2>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4a25      	ldr	r2, [pc, #148]	; (800336c <TIM_Base_SetConfig+0x134>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d007      	beq.n	80032ea <TIM_Base_SetConfig+0xb2>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4a24      	ldr	r2, [pc, #144]	; (8003370 <TIM_Base_SetConfig+0x138>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d003      	beq.n	80032ea <TIM_Base_SetConfig+0xb2>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4a23      	ldr	r2, [pc, #140]	; (8003374 <TIM_Base_SetConfig+0x13c>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d108      	bne.n	80032fc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	68db      	ldr	r3, [r3, #12]
 80032f6:	68fa      	ldr	r2, [r7, #12]
 80032f8:	4313      	orrs	r3, r2
 80032fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	695b      	ldr	r3, [r3, #20]
 8003306:	4313      	orrs	r3, r2
 8003308:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	68fa      	ldr	r2, [r7, #12]
 800330e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	689a      	ldr	r2, [r3, #8]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	4a0a      	ldr	r2, [pc, #40]	; (800334c <TIM_Base_SetConfig+0x114>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d003      	beq.n	8003330 <TIM_Base_SetConfig+0xf8>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	4a0c      	ldr	r2, [pc, #48]	; (800335c <TIM_Base_SetConfig+0x124>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d103      	bne.n	8003338 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	691a      	ldr	r2, [r3, #16]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2201      	movs	r2, #1
 800333c:	615a      	str	r2, [r3, #20]
}
 800333e:	bf00      	nop
 8003340:	3714      	adds	r7, #20
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr
 800334a:	bf00      	nop
 800334c:	40010000 	.word	0x40010000
 8003350:	40000400 	.word	0x40000400
 8003354:	40000800 	.word	0x40000800
 8003358:	40000c00 	.word	0x40000c00
 800335c:	40010400 	.word	0x40010400
 8003360:	40014000 	.word	0x40014000
 8003364:	40014400 	.word	0x40014400
 8003368:	40014800 	.word	0x40014800
 800336c:	40001800 	.word	0x40001800
 8003370:	40001c00 	.word	0x40001c00
 8003374:	40002000 	.word	0x40002000

08003378 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003380:	bf00      	nop
 8003382:	370c      	adds	r7, #12
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr

0800338c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800338c:	b480      	push	{r7}
 800338e:	b083      	sub	sp, #12
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003394:	bf00      	nop
 8003396:	370c      	adds	r7, #12
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr

080033a0 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b084      	sub	sp, #16
 80033a4:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 80033a6:	4ba0      	ldr	r3, [pc, #640]	; (8003628 <MX_LWIP_Init+0x288>)
 80033a8:	22c0      	movs	r2, #192	; 0xc0
 80033aa:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 80033ac:	4b9e      	ldr	r3, [pc, #632]	; (8003628 <MX_LWIP_Init+0x288>)
 80033ae:	22a8      	movs	r2, #168	; 0xa8
 80033b0:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 18;
 80033b2:	4b9d      	ldr	r3, [pc, #628]	; (8003628 <MX_LWIP_Init+0x288>)
 80033b4:	2212      	movs	r2, #18
 80033b6:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 123;
 80033b8:	4b9b      	ldr	r3, [pc, #620]	; (8003628 <MX_LWIP_Init+0x288>)
 80033ba:	227b      	movs	r2, #123	; 0x7b
 80033bc:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 80033be:	4b9b      	ldr	r3, [pc, #620]	; (800362c <MX_LWIP_Init+0x28c>)
 80033c0:	22ff      	movs	r2, #255	; 0xff
 80033c2:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 80033c4:	4b99      	ldr	r3, [pc, #612]	; (800362c <MX_LWIP_Init+0x28c>)
 80033c6:	22ff      	movs	r2, #255	; 0xff
 80033c8:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 80033ca:	4b98      	ldr	r3, [pc, #608]	; (800362c <MX_LWIP_Init+0x28c>)
 80033cc:	22ff      	movs	r2, #255	; 0xff
 80033ce:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 80033d0:	4b96      	ldr	r3, [pc, #600]	; (800362c <MX_LWIP_Init+0x28c>)
 80033d2:	2200      	movs	r2, #0
 80033d4:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 80033d6:	4b96      	ldr	r3, [pc, #600]	; (8003630 <MX_LWIP_Init+0x290>)
 80033d8:	22c0      	movs	r2, #192	; 0xc0
 80033da:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 80033dc:	4b94      	ldr	r3, [pc, #592]	; (8003630 <MX_LWIP_Init+0x290>)
 80033de:	22a8      	movs	r2, #168	; 0xa8
 80033e0:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 18;
 80033e2:	4b93      	ldr	r3, [pc, #588]	; (8003630 <MX_LWIP_Init+0x290>)
 80033e4:	2212      	movs	r2, #18
 80033e6:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 80033e8:	4b91      	ldr	r3, [pc, #580]	; (8003630 <MX_LWIP_Init+0x290>)
 80033ea:	2201      	movs	r2, #1
 80033ec:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 80033ee:	2100      	movs	r1, #0
 80033f0:	2000      	movs	r0, #0
 80033f2:	f006 fea5 	bl	800a140 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80033f6:	4b8c      	ldr	r3, [pc, #560]	; (8003628 <MX_LWIP_Init+0x288>)
 80033f8:	781b      	ldrb	r3, [r3, #0]
 80033fa:	061a      	lsls	r2, r3, #24
 80033fc:	4b8a      	ldr	r3, [pc, #552]	; (8003628 <MX_LWIP_Init+0x288>)
 80033fe:	785b      	ldrb	r3, [r3, #1]
 8003400:	041b      	lsls	r3, r3, #16
 8003402:	431a      	orrs	r2, r3
 8003404:	4b88      	ldr	r3, [pc, #544]	; (8003628 <MX_LWIP_Init+0x288>)
 8003406:	789b      	ldrb	r3, [r3, #2]
 8003408:	021b      	lsls	r3, r3, #8
 800340a:	4313      	orrs	r3, r2
 800340c:	4a86      	ldr	r2, [pc, #536]	; (8003628 <MX_LWIP_Init+0x288>)
 800340e:	78d2      	ldrb	r2, [r2, #3]
 8003410:	4313      	orrs	r3, r2
 8003412:	061a      	lsls	r2, r3, #24
 8003414:	4b84      	ldr	r3, [pc, #528]	; (8003628 <MX_LWIP_Init+0x288>)
 8003416:	781b      	ldrb	r3, [r3, #0]
 8003418:	0619      	lsls	r1, r3, #24
 800341a:	4b83      	ldr	r3, [pc, #524]	; (8003628 <MX_LWIP_Init+0x288>)
 800341c:	785b      	ldrb	r3, [r3, #1]
 800341e:	041b      	lsls	r3, r3, #16
 8003420:	4319      	orrs	r1, r3
 8003422:	4b81      	ldr	r3, [pc, #516]	; (8003628 <MX_LWIP_Init+0x288>)
 8003424:	789b      	ldrb	r3, [r3, #2]
 8003426:	021b      	lsls	r3, r3, #8
 8003428:	430b      	orrs	r3, r1
 800342a:	497f      	ldr	r1, [pc, #508]	; (8003628 <MX_LWIP_Init+0x288>)
 800342c:	78c9      	ldrb	r1, [r1, #3]
 800342e:	430b      	orrs	r3, r1
 8003430:	021b      	lsls	r3, r3, #8
 8003432:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003436:	431a      	orrs	r2, r3
 8003438:	4b7b      	ldr	r3, [pc, #492]	; (8003628 <MX_LWIP_Init+0x288>)
 800343a:	781b      	ldrb	r3, [r3, #0]
 800343c:	0619      	lsls	r1, r3, #24
 800343e:	4b7a      	ldr	r3, [pc, #488]	; (8003628 <MX_LWIP_Init+0x288>)
 8003440:	785b      	ldrb	r3, [r3, #1]
 8003442:	041b      	lsls	r3, r3, #16
 8003444:	4319      	orrs	r1, r3
 8003446:	4b78      	ldr	r3, [pc, #480]	; (8003628 <MX_LWIP_Init+0x288>)
 8003448:	789b      	ldrb	r3, [r3, #2]
 800344a:	021b      	lsls	r3, r3, #8
 800344c:	430b      	orrs	r3, r1
 800344e:	4976      	ldr	r1, [pc, #472]	; (8003628 <MX_LWIP_Init+0x288>)
 8003450:	78c9      	ldrb	r1, [r1, #3]
 8003452:	430b      	orrs	r3, r1
 8003454:	0a1b      	lsrs	r3, r3, #8
 8003456:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800345a:	431a      	orrs	r2, r3
 800345c:	4b72      	ldr	r3, [pc, #456]	; (8003628 <MX_LWIP_Init+0x288>)
 800345e:	781b      	ldrb	r3, [r3, #0]
 8003460:	0619      	lsls	r1, r3, #24
 8003462:	4b71      	ldr	r3, [pc, #452]	; (8003628 <MX_LWIP_Init+0x288>)
 8003464:	785b      	ldrb	r3, [r3, #1]
 8003466:	041b      	lsls	r3, r3, #16
 8003468:	4319      	orrs	r1, r3
 800346a:	4b6f      	ldr	r3, [pc, #444]	; (8003628 <MX_LWIP_Init+0x288>)
 800346c:	789b      	ldrb	r3, [r3, #2]
 800346e:	021b      	lsls	r3, r3, #8
 8003470:	430b      	orrs	r3, r1
 8003472:	496d      	ldr	r1, [pc, #436]	; (8003628 <MX_LWIP_Init+0x288>)
 8003474:	78c9      	ldrb	r1, [r1, #3]
 8003476:	430b      	orrs	r3, r1
 8003478:	0e1b      	lsrs	r3, r3, #24
 800347a:	4313      	orrs	r3, r2
 800347c:	4a6d      	ldr	r2, [pc, #436]	; (8003634 <MX_LWIP_Init+0x294>)
 800347e:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8003480:	4b6a      	ldr	r3, [pc, #424]	; (800362c <MX_LWIP_Init+0x28c>)
 8003482:	781b      	ldrb	r3, [r3, #0]
 8003484:	061a      	lsls	r2, r3, #24
 8003486:	4b69      	ldr	r3, [pc, #420]	; (800362c <MX_LWIP_Init+0x28c>)
 8003488:	785b      	ldrb	r3, [r3, #1]
 800348a:	041b      	lsls	r3, r3, #16
 800348c:	431a      	orrs	r2, r3
 800348e:	4b67      	ldr	r3, [pc, #412]	; (800362c <MX_LWIP_Init+0x28c>)
 8003490:	789b      	ldrb	r3, [r3, #2]
 8003492:	021b      	lsls	r3, r3, #8
 8003494:	4313      	orrs	r3, r2
 8003496:	4a65      	ldr	r2, [pc, #404]	; (800362c <MX_LWIP_Init+0x28c>)
 8003498:	78d2      	ldrb	r2, [r2, #3]
 800349a:	4313      	orrs	r3, r2
 800349c:	061a      	lsls	r2, r3, #24
 800349e:	4b63      	ldr	r3, [pc, #396]	; (800362c <MX_LWIP_Init+0x28c>)
 80034a0:	781b      	ldrb	r3, [r3, #0]
 80034a2:	0619      	lsls	r1, r3, #24
 80034a4:	4b61      	ldr	r3, [pc, #388]	; (800362c <MX_LWIP_Init+0x28c>)
 80034a6:	785b      	ldrb	r3, [r3, #1]
 80034a8:	041b      	lsls	r3, r3, #16
 80034aa:	4319      	orrs	r1, r3
 80034ac:	4b5f      	ldr	r3, [pc, #380]	; (800362c <MX_LWIP_Init+0x28c>)
 80034ae:	789b      	ldrb	r3, [r3, #2]
 80034b0:	021b      	lsls	r3, r3, #8
 80034b2:	430b      	orrs	r3, r1
 80034b4:	495d      	ldr	r1, [pc, #372]	; (800362c <MX_LWIP_Init+0x28c>)
 80034b6:	78c9      	ldrb	r1, [r1, #3]
 80034b8:	430b      	orrs	r3, r1
 80034ba:	021b      	lsls	r3, r3, #8
 80034bc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80034c0:	431a      	orrs	r2, r3
 80034c2:	4b5a      	ldr	r3, [pc, #360]	; (800362c <MX_LWIP_Init+0x28c>)
 80034c4:	781b      	ldrb	r3, [r3, #0]
 80034c6:	0619      	lsls	r1, r3, #24
 80034c8:	4b58      	ldr	r3, [pc, #352]	; (800362c <MX_LWIP_Init+0x28c>)
 80034ca:	785b      	ldrb	r3, [r3, #1]
 80034cc:	041b      	lsls	r3, r3, #16
 80034ce:	4319      	orrs	r1, r3
 80034d0:	4b56      	ldr	r3, [pc, #344]	; (800362c <MX_LWIP_Init+0x28c>)
 80034d2:	789b      	ldrb	r3, [r3, #2]
 80034d4:	021b      	lsls	r3, r3, #8
 80034d6:	430b      	orrs	r3, r1
 80034d8:	4954      	ldr	r1, [pc, #336]	; (800362c <MX_LWIP_Init+0x28c>)
 80034da:	78c9      	ldrb	r1, [r1, #3]
 80034dc:	430b      	orrs	r3, r1
 80034de:	0a1b      	lsrs	r3, r3, #8
 80034e0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80034e4:	431a      	orrs	r2, r3
 80034e6:	4b51      	ldr	r3, [pc, #324]	; (800362c <MX_LWIP_Init+0x28c>)
 80034e8:	781b      	ldrb	r3, [r3, #0]
 80034ea:	0619      	lsls	r1, r3, #24
 80034ec:	4b4f      	ldr	r3, [pc, #316]	; (800362c <MX_LWIP_Init+0x28c>)
 80034ee:	785b      	ldrb	r3, [r3, #1]
 80034f0:	041b      	lsls	r3, r3, #16
 80034f2:	4319      	orrs	r1, r3
 80034f4:	4b4d      	ldr	r3, [pc, #308]	; (800362c <MX_LWIP_Init+0x28c>)
 80034f6:	789b      	ldrb	r3, [r3, #2]
 80034f8:	021b      	lsls	r3, r3, #8
 80034fa:	430b      	orrs	r3, r1
 80034fc:	494b      	ldr	r1, [pc, #300]	; (800362c <MX_LWIP_Init+0x28c>)
 80034fe:	78c9      	ldrb	r1, [r1, #3]
 8003500:	430b      	orrs	r3, r1
 8003502:	0e1b      	lsrs	r3, r3, #24
 8003504:	4313      	orrs	r3, r2
 8003506:	4a4c      	ldr	r2, [pc, #304]	; (8003638 <MX_LWIP_Init+0x298>)
 8003508:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800350a:	4b49      	ldr	r3, [pc, #292]	; (8003630 <MX_LWIP_Init+0x290>)
 800350c:	781b      	ldrb	r3, [r3, #0]
 800350e:	061a      	lsls	r2, r3, #24
 8003510:	4b47      	ldr	r3, [pc, #284]	; (8003630 <MX_LWIP_Init+0x290>)
 8003512:	785b      	ldrb	r3, [r3, #1]
 8003514:	041b      	lsls	r3, r3, #16
 8003516:	431a      	orrs	r2, r3
 8003518:	4b45      	ldr	r3, [pc, #276]	; (8003630 <MX_LWIP_Init+0x290>)
 800351a:	789b      	ldrb	r3, [r3, #2]
 800351c:	021b      	lsls	r3, r3, #8
 800351e:	4313      	orrs	r3, r2
 8003520:	4a43      	ldr	r2, [pc, #268]	; (8003630 <MX_LWIP_Init+0x290>)
 8003522:	78d2      	ldrb	r2, [r2, #3]
 8003524:	4313      	orrs	r3, r2
 8003526:	061a      	lsls	r2, r3, #24
 8003528:	4b41      	ldr	r3, [pc, #260]	; (8003630 <MX_LWIP_Init+0x290>)
 800352a:	781b      	ldrb	r3, [r3, #0]
 800352c:	0619      	lsls	r1, r3, #24
 800352e:	4b40      	ldr	r3, [pc, #256]	; (8003630 <MX_LWIP_Init+0x290>)
 8003530:	785b      	ldrb	r3, [r3, #1]
 8003532:	041b      	lsls	r3, r3, #16
 8003534:	4319      	orrs	r1, r3
 8003536:	4b3e      	ldr	r3, [pc, #248]	; (8003630 <MX_LWIP_Init+0x290>)
 8003538:	789b      	ldrb	r3, [r3, #2]
 800353a:	021b      	lsls	r3, r3, #8
 800353c:	430b      	orrs	r3, r1
 800353e:	493c      	ldr	r1, [pc, #240]	; (8003630 <MX_LWIP_Init+0x290>)
 8003540:	78c9      	ldrb	r1, [r1, #3]
 8003542:	430b      	orrs	r3, r1
 8003544:	021b      	lsls	r3, r3, #8
 8003546:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800354a:	431a      	orrs	r2, r3
 800354c:	4b38      	ldr	r3, [pc, #224]	; (8003630 <MX_LWIP_Init+0x290>)
 800354e:	781b      	ldrb	r3, [r3, #0]
 8003550:	0619      	lsls	r1, r3, #24
 8003552:	4b37      	ldr	r3, [pc, #220]	; (8003630 <MX_LWIP_Init+0x290>)
 8003554:	785b      	ldrb	r3, [r3, #1]
 8003556:	041b      	lsls	r3, r3, #16
 8003558:	4319      	orrs	r1, r3
 800355a:	4b35      	ldr	r3, [pc, #212]	; (8003630 <MX_LWIP_Init+0x290>)
 800355c:	789b      	ldrb	r3, [r3, #2]
 800355e:	021b      	lsls	r3, r3, #8
 8003560:	430b      	orrs	r3, r1
 8003562:	4933      	ldr	r1, [pc, #204]	; (8003630 <MX_LWIP_Init+0x290>)
 8003564:	78c9      	ldrb	r1, [r1, #3]
 8003566:	430b      	orrs	r3, r1
 8003568:	0a1b      	lsrs	r3, r3, #8
 800356a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800356e:	431a      	orrs	r2, r3
 8003570:	4b2f      	ldr	r3, [pc, #188]	; (8003630 <MX_LWIP_Init+0x290>)
 8003572:	781b      	ldrb	r3, [r3, #0]
 8003574:	0619      	lsls	r1, r3, #24
 8003576:	4b2e      	ldr	r3, [pc, #184]	; (8003630 <MX_LWIP_Init+0x290>)
 8003578:	785b      	ldrb	r3, [r3, #1]
 800357a:	041b      	lsls	r3, r3, #16
 800357c:	4319      	orrs	r1, r3
 800357e:	4b2c      	ldr	r3, [pc, #176]	; (8003630 <MX_LWIP_Init+0x290>)
 8003580:	789b      	ldrb	r3, [r3, #2]
 8003582:	021b      	lsls	r3, r3, #8
 8003584:	430b      	orrs	r3, r1
 8003586:	492a      	ldr	r1, [pc, #168]	; (8003630 <MX_LWIP_Init+0x290>)
 8003588:	78c9      	ldrb	r1, [r1, #3]
 800358a:	430b      	orrs	r3, r1
 800358c:	0e1b      	lsrs	r3, r3, #24
 800358e:	4313      	orrs	r3, r2
 8003590:	4a2a      	ldr	r2, [pc, #168]	; (800363c <MX_LWIP_Init+0x29c>)
 8003592:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8003594:	4b2a      	ldr	r3, [pc, #168]	; (8003640 <MX_LWIP_Init+0x2a0>)
 8003596:	9302      	str	r3, [sp, #8]
 8003598:	4b2a      	ldr	r3, [pc, #168]	; (8003644 <MX_LWIP_Init+0x2a4>)
 800359a:	9301      	str	r3, [sp, #4]
 800359c:	2300      	movs	r3, #0
 800359e:	9300      	str	r3, [sp, #0]
 80035a0:	4b26      	ldr	r3, [pc, #152]	; (800363c <MX_LWIP_Init+0x29c>)
 80035a2:	4a25      	ldr	r2, [pc, #148]	; (8003638 <MX_LWIP_Init+0x298>)
 80035a4:	4923      	ldr	r1, [pc, #140]	; (8003634 <MX_LWIP_Init+0x294>)
 80035a6:	4828      	ldr	r0, [pc, #160]	; (8003648 <MX_LWIP_Init+0x2a8>)
 80035a8:	f007 fb4e 	bl	800ac48 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80035ac:	4826      	ldr	r0, [pc, #152]	; (8003648 <MX_LWIP_Init+0x2a8>)
 80035ae:	f007 fcfd 	bl	800afac <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80035b2:	4b25      	ldr	r3, [pc, #148]	; (8003648 <MX_LWIP_Init+0x2a8>)
 80035b4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80035b8:	089b      	lsrs	r3, r3, #2
 80035ba:	f003 0301 	and.w	r3, r3, #1
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d003      	beq.n	80035cc <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80035c4:	4820      	ldr	r0, [pc, #128]	; (8003648 <MX_LWIP_Init+0x2a8>)
 80035c6:	f007 fd01 	bl	800afcc <netif_set_up>
 80035ca:	e002      	b.n	80035d2 <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 80035cc:	481e      	ldr	r0, [pc, #120]	; (8003648 <MX_LWIP_Init+0x2a8>)
 80035ce:	f007 fd69 	bl	800b0a4 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 80035d2:	491e      	ldr	r1, [pc, #120]	; (800364c <MX_LWIP_Init+0x2ac>)
 80035d4:	481c      	ldr	r0, [pc, #112]	; (8003648 <MX_LWIP_Init+0x2a8>)
 80035d6:	f007 fdfb 	bl	800b1d0 <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  Netif_LinkSemaphore = osSemaphoreNew(1, 1, NULL);
 80035da:	2200      	movs	r2, #0
 80035dc:	2101      	movs	r1, #1
 80035de:	2001      	movs	r0, #1
 80035e0:	f000 feaa 	bl	8004338 <osSemaphoreNew>
 80035e4:	4603      	mov	r3, r0
 80035e6:	4a1a      	ldr	r2, [pc, #104]	; (8003650 <MX_LWIP_Init+0x2b0>)
 80035e8:	6013      	str	r3, [r2, #0]

  link_arg.netif = &gnetif;
 80035ea:	4b1a      	ldr	r3, [pc, #104]	; (8003654 <MX_LWIP_Init+0x2b4>)
 80035ec:	4a16      	ldr	r2, [pc, #88]	; (8003648 <MX_LWIP_Init+0x2a8>)
 80035ee:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 80035f0:	4b17      	ldr	r3, [pc, #92]	; (8003650 <MX_LWIP_Init+0x2b0>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a17      	ldr	r2, [pc, #92]	; (8003654 <MX_LWIP_Init+0x2b4>)
 80035f6:	6053      	str	r3, [r2, #4]
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 80035f8:	2224      	movs	r2, #36	; 0x24
 80035fa:	2100      	movs	r1, #0
 80035fc:	4816      	ldr	r0, [pc, #88]	; (8003658 <MX_LWIP_Init+0x2b8>)
 80035fe:	f011 feda 	bl	80153b6 <memset>
  attributes.name = "LinkThr";
 8003602:	4b15      	ldr	r3, [pc, #84]	; (8003658 <MX_LWIP_Init+0x2b8>)
 8003604:	4a15      	ldr	r2, [pc, #84]	; (800365c <MX_LWIP_Init+0x2bc>)
 8003606:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8003608:	4b13      	ldr	r3, [pc, #76]	; (8003658 <MX_LWIP_Init+0x2b8>)
 800360a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800360e:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 8003610:	4b11      	ldr	r3, [pc, #68]	; (8003658 <MX_LWIP_Init+0x2b8>)
 8003612:	2210      	movs	r2, #16
 8003614:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernetif_set_link, &link_arg, &attributes);
 8003616:	4a10      	ldr	r2, [pc, #64]	; (8003658 <MX_LWIP_Init+0x2b8>)
 8003618:	490e      	ldr	r1, [pc, #56]	; (8003654 <MX_LWIP_Init+0x2b4>)
 800361a:	4811      	ldr	r0, [pc, #68]	; (8003660 <MX_LWIP_Init+0x2c0>)
 800361c:	f000 fcd1 	bl	8003fc2 <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8003620:	bf00      	nop
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
 8003626:	bf00      	nop
 8003628:	20005558 	.word	0x20005558
 800362c:	20005554 	.word	0x20005554
 8003630:	200054f4 	.word	0x200054f4
 8003634:	20005550 	.word	0x20005550
 8003638:	2000555c 	.word	0x2000555c
 800363c:	20005560 	.word	0x20005560
 8003640:	0800a051 	.word	0x0800a051
 8003644:	08003c8d 	.word	0x08003c8d
 8003648:	2000551c 	.word	0x2000551c
 800364c:	08003d71 	.word	0x08003d71
 8003650:	200000a0 	.word	0x200000a0
 8003654:	200054ec 	.word	0x200054ec
 8003658:	200054f8 	.word	0x200054f8
 800365c:	08016380 	.word	0x08016380
 8003660:	08003cf9 	.word	0x08003cf9

08003664 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b08e      	sub	sp, #56	; 0x38
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800366c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003670:	2200      	movs	r2, #0
 8003672:	601a      	str	r2, [r3, #0]
 8003674:	605a      	str	r2, [r3, #4]
 8003676:	609a      	str	r2, [r3, #8]
 8003678:	60da      	str	r2, [r3, #12]
 800367a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a4a      	ldr	r2, [pc, #296]	; (80037ac <HAL_ETH_MspInit+0x148>)
 8003682:	4293      	cmp	r3, r2
 8003684:	f040 808d 	bne.w	80037a2 <HAL_ETH_MspInit+0x13e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8003688:	2300      	movs	r3, #0
 800368a:	623b      	str	r3, [r7, #32]
 800368c:	4b48      	ldr	r3, [pc, #288]	; (80037b0 <HAL_ETH_MspInit+0x14c>)
 800368e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003690:	4a47      	ldr	r2, [pc, #284]	; (80037b0 <HAL_ETH_MspInit+0x14c>)
 8003692:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003696:	6313      	str	r3, [r2, #48]	; 0x30
 8003698:	4b45      	ldr	r3, [pc, #276]	; (80037b0 <HAL_ETH_MspInit+0x14c>)
 800369a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800369c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036a0:	623b      	str	r3, [r7, #32]
 80036a2:	6a3b      	ldr	r3, [r7, #32]
 80036a4:	2300      	movs	r3, #0
 80036a6:	61fb      	str	r3, [r7, #28]
 80036a8:	4b41      	ldr	r3, [pc, #260]	; (80037b0 <HAL_ETH_MspInit+0x14c>)
 80036aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ac:	4a40      	ldr	r2, [pc, #256]	; (80037b0 <HAL_ETH_MspInit+0x14c>)
 80036ae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80036b2:	6313      	str	r3, [r2, #48]	; 0x30
 80036b4:	4b3e      	ldr	r3, [pc, #248]	; (80037b0 <HAL_ETH_MspInit+0x14c>)
 80036b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80036bc:	61fb      	str	r3, [r7, #28]
 80036be:	69fb      	ldr	r3, [r7, #28]
 80036c0:	2300      	movs	r3, #0
 80036c2:	61bb      	str	r3, [r7, #24]
 80036c4:	4b3a      	ldr	r3, [pc, #232]	; (80037b0 <HAL_ETH_MspInit+0x14c>)
 80036c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c8:	4a39      	ldr	r2, [pc, #228]	; (80037b0 <HAL_ETH_MspInit+0x14c>)
 80036ca:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80036ce:	6313      	str	r3, [r2, #48]	; 0x30
 80036d0:	4b37      	ldr	r3, [pc, #220]	; (80037b0 <HAL_ETH_MspInit+0x14c>)
 80036d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80036d8:	61bb      	str	r3, [r7, #24]
 80036da:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80036dc:	2300      	movs	r3, #0
 80036de:	617b      	str	r3, [r7, #20]
 80036e0:	4b33      	ldr	r3, [pc, #204]	; (80037b0 <HAL_ETH_MspInit+0x14c>)
 80036e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e4:	4a32      	ldr	r2, [pc, #200]	; (80037b0 <HAL_ETH_MspInit+0x14c>)
 80036e6:	f043 0304 	orr.w	r3, r3, #4
 80036ea:	6313      	str	r3, [r2, #48]	; 0x30
 80036ec:	4b30      	ldr	r3, [pc, #192]	; (80037b0 <HAL_ETH_MspInit+0x14c>)
 80036ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f0:	f003 0304 	and.w	r3, r3, #4
 80036f4:	617b      	str	r3, [r7, #20]
 80036f6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036f8:	2300      	movs	r3, #0
 80036fa:	613b      	str	r3, [r7, #16]
 80036fc:	4b2c      	ldr	r3, [pc, #176]	; (80037b0 <HAL_ETH_MspInit+0x14c>)
 80036fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003700:	4a2b      	ldr	r2, [pc, #172]	; (80037b0 <HAL_ETH_MspInit+0x14c>)
 8003702:	f043 0301 	orr.w	r3, r3, #1
 8003706:	6313      	str	r3, [r2, #48]	; 0x30
 8003708:	4b29      	ldr	r3, [pc, #164]	; (80037b0 <HAL_ETH_MspInit+0x14c>)
 800370a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800370c:	f003 0301 	and.w	r3, r3, #1
 8003710:	613b      	str	r3, [r7, #16]
 8003712:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003714:	2300      	movs	r3, #0
 8003716:	60fb      	str	r3, [r7, #12]
 8003718:	4b25      	ldr	r3, [pc, #148]	; (80037b0 <HAL_ETH_MspInit+0x14c>)
 800371a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800371c:	4a24      	ldr	r2, [pc, #144]	; (80037b0 <HAL_ETH_MspInit+0x14c>)
 800371e:	f043 0302 	orr.w	r3, r3, #2
 8003722:	6313      	str	r3, [r2, #48]	; 0x30
 8003724:	4b22      	ldr	r3, [pc, #136]	; (80037b0 <HAL_ETH_MspInit+0x14c>)
 8003726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003728:	f003 0302 	and.w	r3, r3, #2
 800372c:	60fb      	str	r3, [r7, #12]
 800372e:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8003730:	2332      	movs	r3, #50	; 0x32
 8003732:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003734:	2302      	movs	r3, #2
 8003736:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003738:	2300      	movs	r3, #0
 800373a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800373c:	2303      	movs	r3, #3
 800373e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003740:	230b      	movs	r3, #11
 8003742:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003744:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003748:	4619      	mov	r1, r3
 800374a:	481a      	ldr	r0, [pc, #104]	; (80037b4 <HAL_ETH_MspInit+0x150>)
 800374c:	f7fe fd4c 	bl	80021e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8003750:	2386      	movs	r3, #134	; 0x86
 8003752:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003754:	2302      	movs	r3, #2
 8003756:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003758:	2300      	movs	r3, #0
 800375a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800375c:	2303      	movs	r3, #3
 800375e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003760:	230b      	movs	r3, #11
 8003762:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003764:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003768:	4619      	mov	r1, r3
 800376a:	4813      	ldr	r0, [pc, #76]	; (80037b8 <HAL_ETH_MspInit+0x154>)
 800376c:	f7fe fd3c 	bl	80021e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8003770:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003774:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003776:	2302      	movs	r3, #2
 8003778:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800377a:	2300      	movs	r3, #0
 800377c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800377e:	2303      	movs	r3, #3
 8003780:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003782:	230b      	movs	r3, #11
 8003784:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003786:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800378a:	4619      	mov	r1, r3
 800378c:	480b      	ldr	r0, [pc, #44]	; (80037bc <HAL_ETH_MspInit+0x158>)
 800378e:	f7fe fd2b 	bl	80021e8 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8003792:	2200      	movs	r2, #0
 8003794:	2105      	movs	r1, #5
 8003796:	203d      	movs	r0, #61	; 0x3d
 8003798:	f7fd fb56 	bl	8000e48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800379c:	203d      	movs	r0, #61	; 0x3d
 800379e:	f7fd fb6f 	bl	8000e80 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80037a2:	bf00      	nop
 80037a4:	3738      	adds	r7, #56	; 0x38
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}
 80037aa:	bf00      	nop
 80037ac:	40028000 	.word	0x40028000
 80037b0:	40023800 	.word	0x40023800
 80037b4:	40020800 	.word	0x40020800
 80037b8:	40020000 	.word	0x40020000
 80037bc:	40020400 	.word	0x40020400

080037c0 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b082      	sub	sp, #8
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 80037c8:	4b04      	ldr	r3, [pc, #16]	; (80037dc <HAL_ETH_RxCpltCallback+0x1c>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4618      	mov	r0, r3
 80037ce:	f000 fe8f 	bl	80044f0 <osSemaphoreRelease>
}
 80037d2:	bf00      	nop
 80037d4:	3708      	adds	r7, #8
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}
 80037da:	bf00      	nop
 80037dc:	200000a4 	.word	0x200000a4

080037e0 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b090      	sub	sp, #64	; 0x40
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 80037e8:	2300      	movs	r3, #0
 80037ea:	63bb      	str	r3, [r7, #56]	; 0x38
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80037ec:	4b5d      	ldr	r3, [pc, #372]	; (8003964 <low_level_init+0x184>)
 80037ee:	4a5e      	ldr	r2, [pc, #376]	; (8003968 <low_level_init+0x188>)
 80037f0:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 80037f2:	4b5c      	ldr	r3, [pc, #368]	; (8003964 <low_level_init+0x184>)
 80037f4:	2201      	movs	r2, #1
 80037f6:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 80037f8:	4b5a      	ldr	r3, [pc, #360]	; (8003964 <low_level_init+0x184>)
 80037fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80037fe:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8003800:	4b58      	ldr	r3, [pc, #352]	; (8003964 <low_level_init+0x184>)
 8003802:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003806:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8003808:	4b56      	ldr	r3, [pc, #344]	; (8003964 <low_level_init+0x184>)
 800380a:	2201      	movs	r2, #1
 800380c:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 800380e:	2300      	movs	r3, #0
 8003810:	733b      	strb	r3, [r7, #12]
  MACAddr[1] = 0x80;
 8003812:	2380      	movs	r3, #128	; 0x80
 8003814:	737b      	strb	r3, [r7, #13]
  MACAddr[2] = 0xE1;
 8003816:	23e1      	movs	r3, #225	; 0xe1
 8003818:	73bb      	strb	r3, [r7, #14]
  MACAddr[3] = 0x00;
 800381a:	2300      	movs	r3, #0
 800381c:	73fb      	strb	r3, [r7, #15]
  MACAddr[4] = 0x00;
 800381e:	2300      	movs	r3, #0
 8003820:	743b      	strb	r3, [r7, #16]
  MACAddr[5] = 0x00;
 8003822:	2300      	movs	r3, #0
 8003824:	747b      	strb	r3, [r7, #17]
  heth.Init.MACAddr = &MACAddr[0];
 8003826:	4a4f      	ldr	r2, [pc, #316]	; (8003964 <low_level_init+0x184>)
 8003828:	f107 030c 	add.w	r3, r7, #12
 800382c:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 800382e:	4b4d      	ldr	r3, [pc, #308]	; (8003964 <low_level_init+0x184>)
 8003830:	2201      	movs	r2, #1
 8003832:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8003834:	4b4b      	ldr	r3, [pc, #300]	; (8003964 <low_level_init+0x184>)
 8003836:	2200      	movs	r2, #0
 8003838:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800383a:	4b4a      	ldr	r3, [pc, #296]	; (8003964 <low_level_init+0x184>)
 800383c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003840:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8003842:	4848      	ldr	r0, [pc, #288]	; (8003964 <low_level_init+0x184>)
 8003844:	f7fd fb2a 	bl	8000e9c <HAL_ETH_Init>
 8003848:	4603      	mov	r3, r0
 800384a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 800384e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003852:	2b00      	cmp	r3, #0
 8003854:	d108      	bne.n	8003868 <low_level_init+0x88>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800385c:	f043 0304 	orr.w	r3, r3, #4
 8003860:	b2da      	uxtb	r2, r3
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8003868:	2304      	movs	r3, #4
 800386a:	4a40      	ldr	r2, [pc, #256]	; (800396c <low_level_init+0x18c>)
 800386c:	4940      	ldr	r1, [pc, #256]	; (8003970 <low_level_init+0x190>)
 800386e:	483d      	ldr	r0, [pc, #244]	; (8003964 <low_level_init+0x184>)
 8003870:	f7fd fcb0 	bl	80011d4 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8003874:	2304      	movs	r3, #4
 8003876:	4a3f      	ldr	r2, [pc, #252]	; (8003974 <low_level_init+0x194>)
 8003878:	493f      	ldr	r1, [pc, #252]	; (8003978 <low_level_init+0x198>)
 800387a:	483a      	ldr	r0, [pc, #232]	; (8003964 <low_level_init+0x184>)
 800387c:	f7fd fd13 	bl	80012a6 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2206      	movs	r2, #6
 8003884:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8003888:	4b36      	ldr	r3, [pc, #216]	; (8003964 <low_level_init+0x184>)
 800388a:	695b      	ldr	r3, [r3, #20]
 800388c:	781a      	ldrb	r2, [r3, #0]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8003894:	4b33      	ldr	r3, [pc, #204]	; (8003964 <low_level_init+0x184>)
 8003896:	695b      	ldr	r3, [r3, #20]
 8003898:	785a      	ldrb	r2, [r3, #1]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80038a0:	4b30      	ldr	r3, [pc, #192]	; (8003964 <low_level_init+0x184>)
 80038a2:	695b      	ldr	r3, [r3, #20]
 80038a4:	789a      	ldrb	r2, [r3, #2]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80038ac:	4b2d      	ldr	r3, [pc, #180]	; (8003964 <low_level_init+0x184>)
 80038ae:	695b      	ldr	r3, [r3, #20]
 80038b0:	78da      	ldrb	r2, [r3, #3]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80038b8:	4b2a      	ldr	r3, [pc, #168]	; (8003964 <low_level_init+0x184>)
 80038ba:	695b      	ldr	r3, [r3, #20]
 80038bc:	791a      	ldrb	r2, [r3, #4]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80038c4:	4b27      	ldr	r3, [pc, #156]	; (8003964 <low_level_init+0x184>)
 80038c6:	695b      	ldr	r3, [r3, #20]
 80038c8:	795a      	ldrb	r2, [r3, #5]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80038d6:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80038de:	f043 030a 	orr.w	r3, r3, #10
 80038e2:	b2da      	uxtb	r2, r3
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  s_xSemaphore = osSemaphoreNew(1, 1, NULL);
 80038ea:	2200      	movs	r2, #0
 80038ec:	2101      	movs	r1, #1
 80038ee:	2001      	movs	r0, #1
 80038f0:	f000 fd22 	bl	8004338 <osSemaphoreNew>
 80038f4:	4603      	mov	r3, r0
 80038f6:	4a21      	ldr	r2, [pc, #132]	; (800397c <low_level_init+0x19c>)
 80038f8:	6013      	str	r3, [r2, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 80038fa:	f107 0314 	add.w	r3, r7, #20
 80038fe:	2224      	movs	r2, #36	; 0x24
 8003900:	2100      	movs	r1, #0
 8003902:	4618      	mov	r0, r3
 8003904:	f011 fd57 	bl	80153b6 <memset>
  attributes.name = "EthIf";
 8003908:	4b1d      	ldr	r3, [pc, #116]	; (8003980 <low_level_init+0x1a0>)
 800390a:	617b      	str	r3, [r7, #20]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 800390c:	f44f 73af 	mov.w	r3, #350	; 0x15e
 8003910:	62bb      	str	r3, [r7, #40]	; 0x28
  attributes.priority = osPriorityRealtime;
 8003912:	2330      	movs	r3, #48	; 0x30
 8003914:	62fb      	str	r3, [r7, #44]	; 0x2c
  osThreadNew(ethernetif_input, netif, &attributes);
 8003916:	f107 0314 	add.w	r3, r7, #20
 800391a:	461a      	mov	r2, r3
 800391c:	6879      	ldr	r1, [r7, #4]
 800391e:	4819      	ldr	r0, [pc, #100]	; (8003984 <low_level_init+0x1a4>)
 8003920:	f000 fb4f 	bl	8003fc2 <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8003924:	480f      	ldr	r0, [pc, #60]	; (8003964 <low_level_init+0x184>)
 8003926:	f7fd ffe6 	bl	80018f6 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 800392a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800392e:	461a      	mov	r2, r3
 8003930:	211d      	movs	r1, #29
 8003932:	480c      	ldr	r0, [pc, #48]	; (8003964 <low_level_init+0x184>)
 8003934:	f7fd ff11 	bl	800175a <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8003938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800393a:	f043 030b 	orr.w	r3, r3, #11
 800393e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8003940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003942:	461a      	mov	r2, r3
 8003944:	211d      	movs	r1, #29
 8003946:	4807      	ldr	r0, [pc, #28]	; (8003964 <low_level_init+0x184>)
 8003948:	f7fd ff6f 	bl	800182a <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 800394c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003950:	461a      	mov	r2, r3
 8003952:	211d      	movs	r1, #29
 8003954:	4803      	ldr	r0, [pc, #12]	; (8003964 <low_level_init+0x184>)
 8003956:	f7fd ff00 	bl	800175a <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800395a:	bf00      	nop
 800395c:	3740      	adds	r7, #64	; 0x40
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}
 8003962:	bf00      	nop
 8003964:	20006e34 	.word	0x20006e34
 8003968:	40028000 	.word	0x40028000
 800396c:	20006e7c 	.word	0x20006e7c
 8003970:	20005564 	.word	0x20005564
 8003974:	200055e4 	.word	0x200055e4
 8003978:	20006db4 	.word	0x20006db4
 800397c:	200000a4 	.word	0x200000a4
 8003980:	08016388 	.word	0x08016388
 8003984:	08003c2d 	.word	0x08003c2d

08003988 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b08a      	sub	sp, #40	; 0x28
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
 8003990:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8003992:	4b4b      	ldr	r3, [pc, #300]	; (8003ac0 <low_level_output+0x138>)
 8003994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 800399a:	2300      	movs	r3, #0
 800399c:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 800399e:	2300      	movs	r3, #0
 80039a0:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 80039a2:	2300      	movs	r3, #0
 80039a4:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 80039a6:	2300      	movs	r3, #0
 80039a8:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 80039aa:	4b45      	ldr	r3, [pc, #276]	; (8003ac0 <low_level_output+0x138>)
 80039ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ae:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 80039b0:	2300      	movs	r3, #0
 80039b2:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	623b      	str	r3, [r7, #32]
 80039b8:	e05a      	b.n	8003a70 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80039ba:	69bb      	ldr	r3, [r7, #24]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	da03      	bge.n	80039ca <low_level_output+0x42>
      {
        errval = ERR_USE;
 80039c2:	23f8      	movs	r3, #248	; 0xf8
 80039c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 80039c8:	e05c      	b.n	8003a84 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 80039ca:	6a3b      	ldr	r3, [r7, #32]
 80039cc:	895b      	ldrh	r3, [r3, #10]
 80039ce:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 80039d0:	2300      	movs	r3, #0
 80039d2:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80039d4:	e02f      	b.n	8003a36 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 80039d6:	69fa      	ldr	r2, [r7, #28]
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	18d0      	adds	r0, r2, r3
 80039dc:	6a3b      	ldr	r3, [r7, #32]
 80039de:	685a      	ldr	r2, [r3, #4]
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	18d1      	adds	r1, r2, r3
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 80039ea:	3304      	adds	r3, #4
 80039ec:	461a      	mov	r2, r3
 80039ee:	f011 fcd4 	bl	801539a <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 80039f2:	69bb      	ldr	r3, [r7, #24]
 80039f4:	68db      	ldr	r3, [r3, #12]
 80039f6:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80039f8:	69bb      	ldr	r3, [r7, #24]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	da03      	bge.n	8003a08 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8003a00:	23f8      	movs	r3, #248	; 0xf8
 8003a02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8003a06:	e03d      	b.n	8003a84 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8003a08:	69bb      	ldr	r3, [r7, #24]
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8003a0e:	693a      	ldr	r2, [r7, #16]
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	4413      	add	r3, r2
 8003a14:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8003a18:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8003a1a:	68ba      	ldr	r2, [r7, #8]
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	1ad3      	subs	r3, r2, r3
 8003a20:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8003a24:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8003a26:	697a      	ldr	r2, [r7, #20]
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	1ad3      	subs	r3, r2, r3
 8003a2c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8003a30:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8003a32:	2300      	movs	r3, #0
 8003a34:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8003a36:	68fa      	ldr	r2, [r7, #12]
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	4413      	add	r3, r2
 8003a3c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d8c8      	bhi.n	80039d6 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8003a44:	69fa      	ldr	r2, [r7, #28]
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	18d0      	adds	r0, r2, r3
 8003a4a:	6a3b      	ldr	r3, [r7, #32]
 8003a4c:	685a      	ldr	r2, [r3, #4]
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	4413      	add	r3, r2
 8003a52:	68fa      	ldr	r2, [r7, #12]
 8003a54:	4619      	mov	r1, r3
 8003a56:	f011 fca0 	bl	801539a <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8003a5a:	693a      	ldr	r2, [r7, #16]
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	4413      	add	r3, r2
 8003a60:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8003a62:	697a      	ldr	r2, [r7, #20]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	4413      	add	r3, r2
 8003a68:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8003a6a:	6a3b      	ldr	r3, [r7, #32]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	623b      	str	r3, [r7, #32]
 8003a70:	6a3b      	ldr	r3, [r7, #32]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d1a1      	bne.n	80039ba <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8003a76:	6979      	ldr	r1, [r7, #20]
 8003a78:	4811      	ldr	r0, [pc, #68]	; (8003ac0 <low_level_output+0x138>)
 8003a7a:	f7fd fc81 	bl	8001380 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8003a84:	4b0e      	ldr	r3, [pc, #56]	; (8003ac0 <low_level_output+0x138>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a8c:	3314      	adds	r3, #20
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 0320 	and.w	r3, r3, #32
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d00d      	beq.n	8003ab4 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8003a98:	4b09      	ldr	r3, [pc, #36]	; (8003ac0 <low_level_output+0x138>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003aa0:	3314      	adds	r3, #20
 8003aa2:	2220      	movs	r2, #32
 8003aa4:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8003aa6:	4b06      	ldr	r3, [pc, #24]	; (8003ac0 <low_level_output+0x138>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003aae:	3304      	adds	r3, #4
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8003ab4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	3728      	adds	r7, #40	; 0x28
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}
 8003ac0:	20006e34 	.word	0x20006e34

08003ac4 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b08c      	sub	sp, #48	; 0x30
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8003acc:	2300      	movs	r3, #0
 8003ace:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8003adc:	2300      	movs	r3, #0
 8003ade:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 8003ae8:	484f      	ldr	r0, [pc, #316]	; (8003c28 <low_level_input+0x164>)
 8003aea:	f7fd fd33 	bl	8001554 <HAL_ETH_GetReceivedFrame_IT>
 8003aee:	4603      	mov	r3, r0
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d001      	beq.n	8003af8 <low_level_input+0x34>

    return NULL;
 8003af4:	2300      	movs	r3, #0
 8003af6:	e092      	b.n	8003c1e <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8003af8:	4b4b      	ldr	r3, [pc, #300]	; (8003c28 <low_level_input+0x164>)
 8003afa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003afc:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8003afe:	4b4a      	ldr	r3, [pc, #296]	; (8003c28 <low_level_input+0x164>)
 8003b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b02:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8003b04:	89fb      	ldrh	r3, [r7, #14]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d007      	beq.n	8003b1a <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8003b0a:	89fb      	ldrh	r3, [r7, #14]
 8003b0c:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8003b10:	4619      	mov	r1, r3
 8003b12:	2000      	movs	r0, #0
 8003b14:	f007 fc26 	bl	800b364 <pbuf_alloc>
 8003b18:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 8003b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d04b      	beq.n	8003bb8 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8003b20:	4b41      	ldr	r3, [pc, #260]	; (8003c28 <low_level_input+0x164>)
 8003b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b24:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8003b26:	2300      	movs	r3, #0
 8003b28:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8003b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b2e:	e040      	b.n	8003bb2 <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8003b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b32:	895b      	ldrh	r3, [r3, #10]
 8003b34:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8003b36:	2300      	movs	r3, #0
 8003b38:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8003b3a:	e021      	b.n	8003b80 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8003b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b3e:	685a      	ldr	r2, [r3, #4]
 8003b40:	69bb      	ldr	r3, [r7, #24]
 8003b42:	18d0      	adds	r0, r2, r3
 8003b44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b46:	69fb      	ldr	r3, [r7, #28]
 8003b48:	18d1      	adds	r1, r2, r3
 8003b4a:	69fb      	ldr	r3, [r7, #28]
 8003b4c:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8003b50:	3304      	adds	r3, #4
 8003b52:	461a      	mov	r2, r3
 8003b54:	f011 fc21 	bl	801539a <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8003b58:	6a3b      	ldr	r3, [r7, #32]
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8003b5e:	6a3b      	ldr	r3, [r7, #32]
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8003b64:	69fa      	ldr	r2, [r7, #28]
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	4413      	add	r3, r2
 8003b6a:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8003b6e:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8003b70:	69ba      	ldr	r2, [r7, #24]
 8003b72:	69fb      	ldr	r3, [r7, #28]
 8003b74:	1ad3      	subs	r3, r2, r3
 8003b76:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8003b7a:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8003b80:	697a      	ldr	r2, [r7, #20]
 8003b82:	69fb      	ldr	r3, [r7, #28]
 8003b84:	4413      	add	r3, r2
 8003b86:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d8d6      	bhi.n	8003b3c <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8003b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b90:	685a      	ldr	r2, [r3, #4]
 8003b92:	69bb      	ldr	r3, [r7, #24]
 8003b94:	18d0      	adds	r0, r2, r3
 8003b96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b98:	69fb      	ldr	r3, [r7, #28]
 8003b9a:	4413      	add	r3, r2
 8003b9c:	697a      	ldr	r2, [r7, #20]
 8003b9e:	4619      	mov	r1, r3
 8003ba0:	f011 fbfb 	bl	801539a <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8003ba4:	69fa      	ldr	r2, [r7, #28]
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	4413      	add	r3, r2
 8003baa:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8003bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d1bb      	bne.n	8003b30 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8003bb8:	4b1b      	ldr	r3, [pc, #108]	; (8003c28 <low_level_input+0x164>)
 8003bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bbc:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	613b      	str	r3, [r7, #16]
 8003bc2:	e00b      	b.n	8003bdc <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8003bc4:	6a3b      	ldr	r3, [r7, #32]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003bcc:	6a3b      	ldr	r3, [r7, #32]
 8003bce:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8003bd0:	6a3b      	ldr	r3, [r7, #32]
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	3301      	adds	r3, #1
 8003bda:	613b      	str	r3, [r7, #16]
 8003bdc:	4b12      	ldr	r3, [pc, #72]	; (8003c28 <low_level_input+0x164>)
 8003bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003be0:	693a      	ldr	r2, [r7, #16]
 8003be2:	429a      	cmp	r2, r3
 8003be4:	d3ee      	bcc.n	8003bc4 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8003be6:	4b10      	ldr	r3, [pc, #64]	; (8003c28 <low_level_input+0x164>)
 8003be8:	2200      	movs	r2, #0
 8003bea:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8003bec:	4b0e      	ldr	r3, [pc, #56]	; (8003c28 <low_level_input+0x164>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003bf4:	3314      	adds	r3, #20
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d00d      	beq.n	8003c1c <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8003c00:	4b09      	ldr	r3, [pc, #36]	; (8003c28 <low_level_input+0x164>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c08:	3314      	adds	r3, #20
 8003c0a:	2280      	movs	r2, #128	; 0x80
 8003c0c:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8003c0e:	4b06      	ldr	r3, [pc, #24]	; (8003c28 <low_level_input+0x164>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c16:	3308      	adds	r3, #8
 8003c18:	2200      	movs	r2, #0
 8003c1a:	601a      	str	r2, [r3, #0]
  }
  return p;
 8003c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3730      	adds	r7, #48	; 0x30
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}
 8003c26:	bf00      	nop
 8003c28:	20006e34 	.word	0x20006e34

08003c2c <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b084      	sub	sp, #16
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreAcquire(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8003c38:	4b12      	ldr	r3, [pc, #72]	; (8003c84 <ethernetif_input+0x58>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003c40:	4618      	mov	r0, r3
 8003c42:	f000 fc03 	bl	800444c <osSemaphoreAcquire>
 8003c46:	4603      	mov	r3, r0
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d1f5      	bne.n	8003c38 <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 8003c4c:	480e      	ldr	r0, [pc, #56]	; (8003c88 <ethernetif_input+0x5c>)
 8003c4e:	f011 fa1f 	bl	8015090 <sys_mutex_lock>
        p = low_level_input( netif );
 8003c52:	68f8      	ldr	r0, [r7, #12]
 8003c54:	f7ff ff36 	bl	8003ac4 <low_level_input>
 8003c58:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d00a      	beq.n	8003c76 <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	691b      	ldr	r3, [r3, #16]
 8003c64:	68f9      	ldr	r1, [r7, #12]
 8003c66:	68b8      	ldr	r0, [r7, #8]
 8003c68:	4798      	blx	r3
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d002      	beq.n	8003c76 <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 8003c70:	68b8      	ldr	r0, [r7, #8]
 8003c72:	f007 fe5b 	bl	800b92c <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 8003c76:	4804      	ldr	r0, [pc, #16]	; (8003c88 <ethernetif_input+0x5c>)
 8003c78:	f011 fa19 	bl	80150ae <sys_mutex_unlock>
      } while(p!=NULL);
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d1e4      	bne.n	8003c4c <ethernetif_input+0x20>
    if (osSemaphoreAcquire(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8003c82:	e7d9      	b.n	8003c38 <ethernetif_input+0xc>
 8003c84:	200000a4 	.word	0x200000a4
 8003c88:	2000868c 	.word	0x2000868c

08003c8c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b082      	sub	sp, #8
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d106      	bne.n	8003ca8 <ethernetif_init+0x1c>
 8003c9a:	4b0e      	ldr	r3, [pc, #56]	; (8003cd4 <ethernetif_init+0x48>)
 8003c9c:	f240 2231 	movw	r2, #561	; 0x231
 8003ca0:	490d      	ldr	r1, [pc, #52]	; (8003cd8 <ethernetif_init+0x4c>)
 8003ca2:	480e      	ldr	r0, [pc, #56]	; (8003cdc <ethernetif_init+0x50>)
 8003ca4:	f011 fbea 	bl	801547c <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2273      	movs	r2, #115	; 0x73
 8003cac:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2274      	movs	r2, #116	; 0x74
 8003cb4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	4a09      	ldr	r2, [pc, #36]	; (8003ce0 <ethernetif_init+0x54>)
 8003cbc:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	4a08      	ldr	r2, [pc, #32]	; (8003ce4 <ethernetif_init+0x58>)
 8003cc2:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8003cc4:	6878      	ldr	r0, [r7, #4]
 8003cc6:	f7ff fd8b 	bl	80037e0 <low_level_init>

  return ERR_OK;
 8003cca:	2300      	movs	r3, #0
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	3708      	adds	r7, #8
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd80      	pop	{r7, pc}
 8003cd4:	08016390 	.word	0x08016390
 8003cd8:	080163ac 	.word	0x080163ac
 8003cdc:	080163bc 	.word	0x080163bc
 8003ce0:	080130f1 	.word	0x080130f1
 8003ce4:	08003989 	.word	0x08003989

08003ce8 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8003cec:	f7fc ffc4 	bl	8000c78 <HAL_GetTick>
 8003cf0:	4603      	mov	r3, r0
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	bd80      	pop	{r7, pc}
	...

08003cf8 <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void* argument)

{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b084      	sub	sp, #16
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8003d00:	2300      	movs	r3, #0
 8003d02:	60bb      	str	r3, [r7, #8]
  struct link_str *link_arg = (struct link_str *)argument;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8003d08:	f107 0308 	add.w	r3, r7, #8
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	2101      	movs	r1, #1
 8003d10:	4816      	ldr	r0, [pc, #88]	; (8003d6c <ethernetif_set_link+0x74>)
 8003d12:	f7fd fd22 	bl	800175a <HAL_ETH_ReadPHYRegister>

    regvalue &= PHY_LINKED_STATUS;
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	f003 0304 	and.w	r3, r3, #4
 8003d1c:	60bb      	str	r3, [r7, #8]

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003d26:	f003 0304 	and.w	r3, r3, #4
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d108      	bne.n	8003d40 <ethernetif_set_link+0x48>
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d005      	beq.n	8003d40 <ethernetif_set_link+0x48>
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f007 f9e5 	bl	800b108 <netif_set_link_up>
 8003d3e:	e011      	b.n	8003d64 <ethernetif_set_link+0x6c>
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003d48:	089b      	lsrs	r3, r3, #2
 8003d4a:	f003 0301 	and.w	r3, r3, #1
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d007      	beq.n	8003d64 <ethernetif_set_link+0x6c>
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d104      	bne.n	8003d64 <ethernetif_set_link+0x6c>
    {
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f007 fa06 	bl	800b170 <netif_set_link_down>
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 8003d64:	20c8      	movs	r0, #200	; 0xc8
 8003d66:	f000 f9be 	bl	80040e6 <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8003d6a:	e7cd      	b.n	8003d08 <ethernetif_set_link+0x10>
 8003d6c:	20006e34 	.word	0x20006e34

08003d70 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b084      	sub	sp, #16
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003d86:	089b      	lsrs	r3, r3, #2
 8003d88:	f003 0301 	and.w	r3, r3, #1
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d05d      	beq.n	8003e4e <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8003d92:	4b34      	ldr	r3, [pc, #208]	; (8003e64 <ethernetif_update_config+0xf4>)
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d03f      	beq.n	8003e1a <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8003d9a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003d9e:	2100      	movs	r1, #0
 8003da0:	4830      	ldr	r0, [pc, #192]	; (8003e64 <ethernetif_update_config+0xf4>)
 8003da2:	f7fd fd42 	bl	800182a <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 8003da6:	f7fc ff67 	bl	8000c78 <HAL_GetTick>
 8003daa:	4603      	mov	r3, r0
 8003dac:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8003dae:	f107 0308 	add.w	r3, r7, #8
 8003db2:	461a      	mov	r2, r3
 8003db4:	2101      	movs	r1, #1
 8003db6:	482b      	ldr	r0, [pc, #172]	; (8003e64 <ethernetif_update_config+0xf4>)
 8003db8:	f7fd fccf 	bl	800175a <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8003dbc:	f7fc ff5c 	bl	8000c78 <HAL_GetTick>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	1ad3      	subs	r3, r2, r3
 8003dc6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003dca:	d828      	bhi.n	8003e1e <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	f003 0320 	and.w	r3, r3, #32
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d0eb      	beq.n	8003dae <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8003dd6:	f107 0308 	add.w	r3, r7, #8
 8003dda:	461a      	mov	r2, r3
 8003ddc:	2110      	movs	r1, #16
 8003dde:	4821      	ldr	r0, [pc, #132]	; (8003e64 <ethernetif_update_config+0xf4>)
 8003de0:	f7fd fcbb 	bl	800175a <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	f003 0304 	and.w	r3, r3, #4
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d004      	beq.n	8003df8 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8003dee:	4b1d      	ldr	r3, [pc, #116]	; (8003e64 <ethernetif_update_config+0xf4>)
 8003df0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003df4:	60da      	str	r2, [r3, #12]
 8003df6:	e002      	b.n	8003dfe <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8003df8:	4b1a      	ldr	r3, [pc, #104]	; (8003e64 <ethernetif_update_config+0xf4>)
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	f003 0302 	and.w	r3, r3, #2
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d003      	beq.n	8003e10 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8003e08:	4b16      	ldr	r3, [pc, #88]	; (8003e64 <ethernetif_update_config+0xf4>)
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	609a      	str	r2, [r3, #8]
 8003e0e:	e016      	b.n	8003e3e <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8003e10:	4b14      	ldr	r3, [pc, #80]	; (8003e64 <ethernetif_update_config+0xf4>)
 8003e12:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003e16:	609a      	str	r2, [r3, #8]
 8003e18:	e011      	b.n	8003e3e <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8003e1a:	bf00      	nop
 8003e1c:	e000      	b.n	8003e20 <ethernetif_update_config+0xb0>
          goto error;
 8003e1e:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8003e20:	4b10      	ldr	r3, [pc, #64]	; (8003e64 <ethernetif_update_config+0xf4>)
 8003e22:	68db      	ldr	r3, [r3, #12]
 8003e24:	08db      	lsrs	r3, r3, #3
 8003e26:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8003e28:	4b0e      	ldr	r3, [pc, #56]	; (8003e64 <ethernetif_update_config+0xf4>)
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	085b      	lsrs	r3, r3, #1
 8003e2e:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8003e30:	4313      	orrs	r3, r2
 8003e32:	b29b      	uxth	r3, r3
 8003e34:	461a      	mov	r2, r3
 8003e36:	2100      	movs	r1, #0
 8003e38:	480a      	ldr	r0, [pc, #40]	; (8003e64 <ethernetif_update_config+0xf4>)
 8003e3a:	f7fd fcf6 	bl	800182a <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8003e3e:	2100      	movs	r1, #0
 8003e40:	4808      	ldr	r0, [pc, #32]	; (8003e64 <ethernetif_update_config+0xf4>)
 8003e42:	f7fd fdb7 	bl	80019b4 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8003e46:	4807      	ldr	r0, [pc, #28]	; (8003e64 <ethernetif_update_config+0xf4>)
 8003e48:	f7fd fd55 	bl	80018f6 <HAL_ETH_Start>
 8003e4c:	e002      	b.n	8003e54 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8003e4e:	4805      	ldr	r0, [pc, #20]	; (8003e64 <ethernetif_update_config+0xf4>)
 8003e50:	f7fd fd80 	bl	8001954 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8003e54:	6878      	ldr	r0, [r7, #4]
 8003e56:	f000 f807 	bl	8003e68 <ethernetif_notify_conn_changed>
}
 8003e5a:	bf00      	nop
 8003e5c:	3710      	adds	r7, #16
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	bf00      	nop
 8003e64:	20006e34 	.word	0x20006e34

08003e68 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b083      	sub	sp, #12
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8003e70:	bf00      	nop
 8003e72:	370c      	adds	r7, #12
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr

08003e7c <__NVIC_SetPriority>:
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b083      	sub	sp, #12
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	4603      	mov	r3, r0
 8003e84:	6039      	str	r1, [r7, #0]
 8003e86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	db0a      	blt.n	8003ea6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	b2da      	uxtb	r2, r3
 8003e94:	490c      	ldr	r1, [pc, #48]	; (8003ec8 <__NVIC_SetPriority+0x4c>)
 8003e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e9a:	0112      	lsls	r2, r2, #4
 8003e9c:	b2d2      	uxtb	r2, r2
 8003e9e:	440b      	add	r3, r1
 8003ea0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003ea4:	e00a      	b.n	8003ebc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	b2da      	uxtb	r2, r3
 8003eaa:	4908      	ldr	r1, [pc, #32]	; (8003ecc <__NVIC_SetPriority+0x50>)
 8003eac:	79fb      	ldrb	r3, [r7, #7]
 8003eae:	f003 030f 	and.w	r3, r3, #15
 8003eb2:	3b04      	subs	r3, #4
 8003eb4:	0112      	lsls	r2, r2, #4
 8003eb6:	b2d2      	uxtb	r2, r2
 8003eb8:	440b      	add	r3, r1
 8003eba:	761a      	strb	r2, [r3, #24]
}
 8003ebc:	bf00      	nop
 8003ebe:	370c      	adds	r7, #12
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec6:	4770      	bx	lr
 8003ec8:	e000e100 	.word	0xe000e100
 8003ecc:	e000ed00 	.word	0xe000ed00

08003ed0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003ed4:	4b05      	ldr	r3, [pc, #20]	; (8003eec <SysTick_Handler+0x1c>)
 8003ed6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003ed8:	f002 fd3a 	bl	8006950 <xTaskGetSchedulerState>
 8003edc:	4603      	mov	r3, r0
 8003ede:	2b01      	cmp	r3, #1
 8003ee0:	d001      	beq.n	8003ee6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003ee2:	f003 fc21 	bl	8007728 <xPortSysTickHandler>
  }
}
 8003ee6:	bf00      	nop
 8003ee8:	bd80      	pop	{r7, pc}
 8003eea:	bf00      	nop
 8003eec:	e000e010 	.word	0xe000e010

08003ef0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003ef4:	2100      	movs	r1, #0
 8003ef6:	f06f 0004 	mvn.w	r0, #4
 8003efa:	f7ff ffbf 	bl	8003e7c <__NVIC_SetPriority>
#endif
}
 8003efe:	bf00      	nop
 8003f00:	bd80      	pop	{r7, pc}
	...

08003f04 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003f04:	b480      	push	{r7}
 8003f06:	b083      	sub	sp, #12
 8003f08:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f0a:	f3ef 8305 	mrs	r3, IPSR
 8003f0e:	603b      	str	r3, [r7, #0]
  return(result);
 8003f10:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d003      	beq.n	8003f1e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003f16:	f06f 0305 	mvn.w	r3, #5
 8003f1a:	607b      	str	r3, [r7, #4]
 8003f1c:	e00c      	b.n	8003f38 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003f1e:	4b0a      	ldr	r3, [pc, #40]	; (8003f48 <osKernelInitialize+0x44>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d105      	bne.n	8003f32 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003f26:	4b08      	ldr	r3, [pc, #32]	; (8003f48 <osKernelInitialize+0x44>)
 8003f28:	2201      	movs	r2, #1
 8003f2a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	607b      	str	r3, [r7, #4]
 8003f30:	e002      	b.n	8003f38 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003f32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003f36:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003f38:	687b      	ldr	r3, [r7, #4]
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	370c      	adds	r7, #12
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f44:	4770      	bx	lr
 8003f46:	bf00      	nop
 8003f48:	200000a8 	.word	0x200000a8

08003f4c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b082      	sub	sp, #8
 8003f50:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f52:	f3ef 8305 	mrs	r3, IPSR
 8003f56:	603b      	str	r3, [r7, #0]
  return(result);
 8003f58:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d003      	beq.n	8003f66 <osKernelStart+0x1a>
    stat = osErrorISR;
 8003f5e:	f06f 0305 	mvn.w	r3, #5
 8003f62:	607b      	str	r3, [r7, #4]
 8003f64:	e010      	b.n	8003f88 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003f66:	4b0b      	ldr	r3, [pc, #44]	; (8003f94 <osKernelStart+0x48>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d109      	bne.n	8003f82 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003f6e:	f7ff ffbf 	bl	8003ef0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003f72:	4b08      	ldr	r3, [pc, #32]	; (8003f94 <osKernelStart+0x48>)
 8003f74:	2202      	movs	r2, #2
 8003f76:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003f78:	f002 f86c 	bl	8006054 <vTaskStartScheduler>
      stat = osOK;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	607b      	str	r3, [r7, #4]
 8003f80:	e002      	b.n	8003f88 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003f82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003f86:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003f88:	687b      	ldr	r3, [r7, #4]
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3708      	adds	r7, #8
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}
 8003f92:	bf00      	nop
 8003f94:	200000a8 	.word	0x200000a8

08003f98 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b082      	sub	sp, #8
 8003f9c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f9e:	f3ef 8305 	mrs	r3, IPSR
 8003fa2:	603b      	str	r3, [r7, #0]
  return(result);
 8003fa4:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d003      	beq.n	8003fb2 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8003faa:	f002 f97f 	bl	80062ac <xTaskGetTickCountFromISR>
 8003fae:	6078      	str	r0, [r7, #4]
 8003fb0:	e002      	b.n	8003fb8 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 8003fb2:	f002 f96b 	bl	800628c <xTaskGetTickCount>
 8003fb6:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8003fb8:	687b      	ldr	r3, [r7, #4]
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3708      	adds	r7, #8
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}

08003fc2 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003fc2:	b580      	push	{r7, lr}
 8003fc4:	b08e      	sub	sp, #56	; 0x38
 8003fc6:	af04      	add	r7, sp, #16
 8003fc8:	60f8      	str	r0, [r7, #12]
 8003fca:	60b9      	str	r1, [r7, #8]
 8003fcc:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003fd2:	f3ef 8305 	mrs	r3, IPSR
 8003fd6:	617b      	str	r3, [r7, #20]
  return(result);
 8003fd8:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d17e      	bne.n	80040dc <osThreadNew+0x11a>
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d07b      	beq.n	80040dc <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003fe4:	2380      	movs	r3, #128	; 0x80
 8003fe6:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003fe8:	2318      	movs	r3, #24
 8003fea:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003fec:	2300      	movs	r3, #0
 8003fee:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8003ff0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003ff4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d045      	beq.n	8004088 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d002      	beq.n	800400a <osThreadNew+0x48>
        name = attr->name;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	699b      	ldr	r3, [r3, #24]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d002      	beq.n	8004018 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	699b      	ldr	r3, [r3, #24]
 8004016:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004018:	69fb      	ldr	r3, [r7, #28]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d008      	beq.n	8004030 <osThreadNew+0x6e>
 800401e:	69fb      	ldr	r3, [r7, #28]
 8004020:	2b38      	cmp	r3, #56	; 0x38
 8004022:	d805      	bhi.n	8004030 <osThreadNew+0x6e>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	f003 0301 	and.w	r3, r3, #1
 800402c:	2b00      	cmp	r3, #0
 800402e:	d001      	beq.n	8004034 <osThreadNew+0x72>
        return (NULL);
 8004030:	2300      	movs	r3, #0
 8004032:	e054      	b.n	80040de <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	695b      	ldr	r3, [r3, #20]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d003      	beq.n	8004044 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	695b      	ldr	r3, [r3, #20]
 8004040:	089b      	lsrs	r3, r3, #2
 8004042:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d00e      	beq.n	800406a <osThreadNew+0xa8>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	2bbb      	cmp	r3, #187	; 0xbb
 8004052:	d90a      	bls.n	800406a <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004058:	2b00      	cmp	r3, #0
 800405a:	d006      	beq.n	800406a <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	695b      	ldr	r3, [r3, #20]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d002      	beq.n	800406a <osThreadNew+0xa8>
        mem = 1;
 8004064:	2301      	movs	r3, #1
 8004066:	61bb      	str	r3, [r7, #24]
 8004068:	e010      	b.n	800408c <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d10c      	bne.n	800408c <osThreadNew+0xca>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	68db      	ldr	r3, [r3, #12]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d108      	bne.n	800408c <osThreadNew+0xca>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	691b      	ldr	r3, [r3, #16]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d104      	bne.n	800408c <osThreadNew+0xca>
          mem = 0;
 8004082:	2300      	movs	r3, #0
 8004084:	61bb      	str	r3, [r7, #24]
 8004086:	e001      	b.n	800408c <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004088:	2300      	movs	r3, #0
 800408a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800408c:	69bb      	ldr	r3, [r7, #24]
 800408e:	2b01      	cmp	r3, #1
 8004090:	d110      	bne.n	80040b4 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004096:	687a      	ldr	r2, [r7, #4]
 8004098:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800409a:	9202      	str	r2, [sp, #8]
 800409c:	9301      	str	r3, [sp, #4]
 800409e:	69fb      	ldr	r3, [r7, #28]
 80040a0:	9300      	str	r3, [sp, #0]
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	6a3a      	ldr	r2, [r7, #32]
 80040a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80040a8:	68f8      	ldr	r0, [r7, #12]
 80040aa:	f001 fde7 	bl	8005c7c <xTaskCreateStatic>
 80040ae:	4603      	mov	r3, r0
 80040b0:	613b      	str	r3, [r7, #16]
 80040b2:	e013      	b.n	80040dc <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80040b4:	69bb      	ldr	r3, [r7, #24]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d110      	bne.n	80040dc <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80040ba:	6a3b      	ldr	r3, [r7, #32]
 80040bc:	b29a      	uxth	r2, r3
 80040be:	f107 0310 	add.w	r3, r7, #16
 80040c2:	9301      	str	r3, [sp, #4]
 80040c4:	69fb      	ldr	r3, [r7, #28]
 80040c6:	9300      	str	r3, [sp, #0]
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80040cc:	68f8      	ldr	r0, [r7, #12]
 80040ce:	f001 fe32 	bl	8005d36 <xTaskCreate>
 80040d2:	4603      	mov	r3, r0
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d001      	beq.n	80040dc <osThreadNew+0x11a>
            hTask = NULL;
 80040d8:	2300      	movs	r3, #0
 80040da:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80040dc:	693b      	ldr	r3, [r7, #16]
}
 80040de:	4618      	mov	r0, r3
 80040e0:	3728      	adds	r7, #40	; 0x28
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}

080040e6 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80040e6:	b580      	push	{r7, lr}
 80040e8:	b084      	sub	sp, #16
 80040ea:	af00      	add	r7, sp, #0
 80040ec:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80040ee:	f3ef 8305 	mrs	r3, IPSR
 80040f2:	60bb      	str	r3, [r7, #8]
  return(result);
 80040f4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d003      	beq.n	8004102 <osDelay+0x1c>
    stat = osErrorISR;
 80040fa:	f06f 0305 	mvn.w	r3, #5
 80040fe:	60fb      	str	r3, [r7, #12]
 8004100:	e007      	b.n	8004112 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004102:	2300      	movs	r3, #0
 8004104:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d002      	beq.n	8004112 <osDelay+0x2c>
      vTaskDelay(ticks);
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	f001 ff6d 	bl	8005fec <vTaskDelay>
    }
  }

  return (stat);
 8004112:	68fb      	ldr	r3, [r7, #12]
}
 8004114:	4618      	mov	r0, r3
 8004116:	3710      	adds	r7, #16
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}

0800411c <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800411c:	b580      	push	{r7, lr}
 800411e:	b088      	sub	sp, #32
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8004124:	2300      	movs	r3, #0
 8004126:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004128:	f3ef 8305 	mrs	r3, IPSR
 800412c:	60bb      	str	r3, [r7, #8]
  return(result);
 800412e:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8004130:	2b00      	cmp	r3, #0
 8004132:	d174      	bne.n	800421e <osMutexNew+0x102>
    if (attr != NULL) {
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d003      	beq.n	8004142 <osMutexNew+0x26>
      type = attr->attr_bits;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	61bb      	str	r3, [r7, #24]
 8004140:	e001      	b.n	8004146 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8004142:	2300      	movs	r3, #0
 8004144:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8004146:	69bb      	ldr	r3, [r7, #24]
 8004148:	f003 0301 	and.w	r3, r3, #1
 800414c:	2b00      	cmp	r3, #0
 800414e:	d002      	beq.n	8004156 <osMutexNew+0x3a>
      rmtx = 1U;
 8004150:	2301      	movs	r3, #1
 8004152:	617b      	str	r3, [r7, #20]
 8004154:	e001      	b.n	800415a <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8004156:	2300      	movs	r3, #0
 8004158:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800415a:	69bb      	ldr	r3, [r7, #24]
 800415c:	f003 0308 	and.w	r3, r3, #8
 8004160:	2b00      	cmp	r3, #0
 8004162:	d15c      	bne.n	800421e <osMutexNew+0x102>
      mem = -1;
 8004164:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004168:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d015      	beq.n	800419c <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d006      	beq.n	8004186 <osMutexNew+0x6a>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	68db      	ldr	r3, [r3, #12]
 800417c:	2b4f      	cmp	r3, #79	; 0x4f
 800417e:	d902      	bls.n	8004186 <osMutexNew+0x6a>
          mem = 1;
 8004180:	2301      	movs	r3, #1
 8004182:	613b      	str	r3, [r7, #16]
 8004184:	e00c      	b.n	80041a0 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d108      	bne.n	80041a0 <osMutexNew+0x84>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	68db      	ldr	r3, [r3, #12]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d104      	bne.n	80041a0 <osMutexNew+0x84>
            mem = 0;
 8004196:	2300      	movs	r3, #0
 8004198:	613b      	str	r3, [r7, #16]
 800419a:	e001      	b.n	80041a0 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800419c:	2300      	movs	r3, #0
 800419e:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	2b01      	cmp	r3, #1
 80041a4:	d112      	bne.n	80041cc <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d007      	beq.n	80041bc <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	4619      	mov	r1, r3
 80041b2:	2004      	movs	r0, #4
 80041b4:	f000 fdd1 	bl	8004d5a <xQueueCreateMutexStatic>
 80041b8:	61f8      	str	r0, [r7, #28]
 80041ba:	e016      	b.n	80041ea <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	4619      	mov	r1, r3
 80041c2:	2001      	movs	r0, #1
 80041c4:	f000 fdc9 	bl	8004d5a <xQueueCreateMutexStatic>
 80041c8:	61f8      	str	r0, [r7, #28]
 80041ca:	e00e      	b.n	80041ea <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d10b      	bne.n	80041ea <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d004      	beq.n	80041e2 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 80041d8:	2004      	movs	r0, #4
 80041da:	f000 fda6 	bl	8004d2a <xQueueCreateMutex>
 80041de:	61f8      	str	r0, [r7, #28]
 80041e0:	e003      	b.n	80041ea <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 80041e2:	2001      	movs	r0, #1
 80041e4:	f000 fda1 	bl	8004d2a <xQueueCreateMutex>
 80041e8:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80041ea:	69fb      	ldr	r3, [r7, #28]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d00c      	beq.n	800420a <osMutexNew+0xee>
        if (attr != NULL) {
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d003      	beq.n	80041fe <osMutexNew+0xe2>
          name = attr->name;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	60fb      	str	r3, [r7, #12]
 80041fc:	e001      	b.n	8004202 <osMutexNew+0xe6>
        } else {
          name = NULL;
 80041fe:	2300      	movs	r3, #0
 8004200:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8004202:	68f9      	ldr	r1, [r7, #12]
 8004204:	69f8      	ldr	r0, [r7, #28]
 8004206:	f001 fcb1 	bl	8005b6c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800420a:	69fb      	ldr	r3, [r7, #28]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d006      	beq.n	800421e <osMutexNew+0x102>
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d003      	beq.n	800421e <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8004216:	69fb      	ldr	r3, [r7, #28]
 8004218:	f043 0301 	orr.w	r3, r3, #1
 800421c:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800421e:	69fb      	ldr	r3, [r7, #28]
}
 8004220:	4618      	mov	r0, r3
 8004222:	3720      	adds	r7, #32
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}

08004228 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8004228:	b580      	push	{r7, lr}
 800422a:	b086      	sub	sp, #24
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
 8004230:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	f023 0301 	bic.w	r3, r3, #1
 8004238:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	f003 0301 	and.w	r3, r3, #1
 8004240:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8004242:	2300      	movs	r3, #0
 8004244:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004246:	f3ef 8305 	mrs	r3, IPSR
 800424a:	60bb      	str	r3, [r7, #8]
  return(result);
 800424c:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800424e:	2b00      	cmp	r3, #0
 8004250:	d003      	beq.n	800425a <osMutexAcquire+0x32>
    stat = osErrorISR;
 8004252:	f06f 0305 	mvn.w	r3, #5
 8004256:	617b      	str	r3, [r7, #20]
 8004258:	e02c      	b.n	80042b4 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d103      	bne.n	8004268 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8004260:	f06f 0303 	mvn.w	r3, #3
 8004264:	617b      	str	r3, [r7, #20]
 8004266:	e025      	b.n	80042b4 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d011      	beq.n	8004292 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800426e:	6839      	ldr	r1, [r7, #0]
 8004270:	6938      	ldr	r0, [r7, #16]
 8004272:	f000 fdc1 	bl	8004df8 <xQueueTakeMutexRecursive>
 8004276:	4603      	mov	r3, r0
 8004278:	2b01      	cmp	r3, #1
 800427a:	d01b      	beq.n	80042b4 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d003      	beq.n	800428a <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8004282:	f06f 0301 	mvn.w	r3, #1
 8004286:	617b      	str	r3, [r7, #20]
 8004288:	e014      	b.n	80042b4 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800428a:	f06f 0302 	mvn.w	r3, #2
 800428e:	617b      	str	r3, [r7, #20]
 8004290:	e010      	b.n	80042b4 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8004292:	6839      	ldr	r1, [r7, #0]
 8004294:	6938      	ldr	r0, [r7, #16]
 8004296:	f001 f955 	bl	8005544 <xQueueSemaphoreTake>
 800429a:	4603      	mov	r3, r0
 800429c:	2b01      	cmp	r3, #1
 800429e:	d009      	beq.n	80042b4 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d003      	beq.n	80042ae <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 80042a6:	f06f 0301 	mvn.w	r3, #1
 80042aa:	617b      	str	r3, [r7, #20]
 80042ac:	e002      	b.n	80042b4 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80042ae:	f06f 0302 	mvn.w	r3, #2
 80042b2:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 80042b4:	697b      	ldr	r3, [r7, #20]
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	3718      	adds	r7, #24
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}

080042be <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80042be:	b580      	push	{r7, lr}
 80042c0:	b086      	sub	sp, #24
 80042c2:	af00      	add	r7, sp, #0
 80042c4:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	f023 0301 	bic.w	r3, r3, #1
 80042cc:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	f003 0301 	and.w	r3, r3, #1
 80042d4:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80042d6:	2300      	movs	r3, #0
 80042d8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80042da:	f3ef 8305 	mrs	r3, IPSR
 80042de:	60bb      	str	r3, [r7, #8]
  return(result);
 80042e0:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d003      	beq.n	80042ee <osMutexRelease+0x30>
    stat = osErrorISR;
 80042e6:	f06f 0305 	mvn.w	r3, #5
 80042ea:	617b      	str	r3, [r7, #20]
 80042ec:	e01f      	b.n	800432e <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d103      	bne.n	80042fc <osMutexRelease+0x3e>
    stat = osErrorParameter;
 80042f4:	f06f 0303 	mvn.w	r3, #3
 80042f8:	617b      	str	r3, [r7, #20]
 80042fa:	e018      	b.n	800432e <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d009      	beq.n	8004316 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8004302:	6938      	ldr	r0, [r7, #16]
 8004304:	f000 fd44 	bl	8004d90 <xQueueGiveMutexRecursive>
 8004308:	4603      	mov	r3, r0
 800430a:	2b01      	cmp	r3, #1
 800430c:	d00f      	beq.n	800432e <osMutexRelease+0x70>
        stat = osErrorResource;
 800430e:	f06f 0302 	mvn.w	r3, #2
 8004312:	617b      	str	r3, [r7, #20]
 8004314:	e00b      	b.n	800432e <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8004316:	2300      	movs	r3, #0
 8004318:	2200      	movs	r2, #0
 800431a:	2100      	movs	r1, #0
 800431c:	6938      	ldr	r0, [r7, #16]
 800431e:	f000 fe0b 	bl	8004f38 <xQueueGenericSend>
 8004322:	4603      	mov	r3, r0
 8004324:	2b01      	cmp	r3, #1
 8004326:	d002      	beq.n	800432e <osMutexRelease+0x70>
        stat = osErrorResource;
 8004328:	f06f 0302 	mvn.w	r3, #2
 800432c:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800432e:	697b      	ldr	r3, [r7, #20]
}
 8004330:	4618      	mov	r0, r3
 8004332:	3718      	adds	r7, #24
 8004334:	46bd      	mov	sp, r7
 8004336:	bd80      	pop	{r7, pc}

08004338 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8004338:	b580      	push	{r7, lr}
 800433a:	b08a      	sub	sp, #40	; 0x28
 800433c:	af02      	add	r7, sp, #8
 800433e:	60f8      	str	r0, [r7, #12]
 8004340:	60b9      	str	r1, [r7, #8]
 8004342:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8004344:	2300      	movs	r3, #0
 8004346:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004348:	f3ef 8305 	mrs	r3, IPSR
 800434c:	613b      	str	r3, [r7, #16]
  return(result);
 800434e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8004350:	2b00      	cmp	r3, #0
 8004352:	d175      	bne.n	8004440 <osSemaphoreNew+0x108>
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d072      	beq.n	8004440 <osSemaphoreNew+0x108>
 800435a:	68ba      	ldr	r2, [r7, #8]
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	429a      	cmp	r2, r3
 8004360:	d86e      	bhi.n	8004440 <osSemaphoreNew+0x108>
    mem = -1;
 8004362:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004366:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d015      	beq.n	800439a <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d006      	beq.n	8004384 <osSemaphoreNew+0x4c>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	68db      	ldr	r3, [r3, #12]
 800437a:	2b4f      	cmp	r3, #79	; 0x4f
 800437c:	d902      	bls.n	8004384 <osSemaphoreNew+0x4c>
        mem = 1;
 800437e:	2301      	movs	r3, #1
 8004380:	61bb      	str	r3, [r7, #24]
 8004382:	e00c      	b.n	800439e <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d108      	bne.n	800439e <osSemaphoreNew+0x66>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	68db      	ldr	r3, [r3, #12]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d104      	bne.n	800439e <osSemaphoreNew+0x66>
          mem = 0;
 8004394:	2300      	movs	r3, #0
 8004396:	61bb      	str	r3, [r7, #24]
 8004398:	e001      	b.n	800439e <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800439a:	2300      	movs	r3, #0
 800439c:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800439e:	69bb      	ldr	r3, [r7, #24]
 80043a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043a4:	d04c      	beq.n	8004440 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	d128      	bne.n	80043fe <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80043ac:	69bb      	ldr	r3, [r7, #24]
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	d10a      	bne.n	80043c8 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	2203      	movs	r2, #3
 80043b8:	9200      	str	r2, [sp, #0]
 80043ba:	2200      	movs	r2, #0
 80043bc:	2100      	movs	r1, #0
 80043be:	2001      	movs	r0, #1
 80043c0:	f000 fbc4 	bl	8004b4c <xQueueGenericCreateStatic>
 80043c4:	61f8      	str	r0, [r7, #28]
 80043c6:	e005      	b.n	80043d4 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80043c8:	2203      	movs	r2, #3
 80043ca:	2100      	movs	r1, #0
 80043cc:	2001      	movs	r0, #1
 80043ce:	f000 fc35 	bl	8004c3c <xQueueGenericCreate>
 80043d2:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80043d4:	69fb      	ldr	r3, [r7, #28]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d022      	beq.n	8004420 <osSemaphoreNew+0xe8>
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d01f      	beq.n	8004420 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80043e0:	2300      	movs	r3, #0
 80043e2:	2200      	movs	r2, #0
 80043e4:	2100      	movs	r1, #0
 80043e6:	69f8      	ldr	r0, [r7, #28]
 80043e8:	f000 fda6 	bl	8004f38 <xQueueGenericSend>
 80043ec:	4603      	mov	r3, r0
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d016      	beq.n	8004420 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80043f2:	69f8      	ldr	r0, [r7, #28]
 80043f4:	f001 fa6e 	bl	80058d4 <vQueueDelete>
            hSemaphore = NULL;
 80043f8:	2300      	movs	r3, #0
 80043fa:	61fb      	str	r3, [r7, #28]
 80043fc:	e010      	b.n	8004420 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80043fe:	69bb      	ldr	r3, [r7, #24]
 8004400:	2b01      	cmp	r3, #1
 8004402:	d108      	bne.n	8004416 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	461a      	mov	r2, r3
 800440a:	68b9      	ldr	r1, [r7, #8]
 800440c:	68f8      	ldr	r0, [r7, #12]
 800440e:	f000 fd29 	bl	8004e64 <xQueueCreateCountingSemaphoreStatic>
 8004412:	61f8      	str	r0, [r7, #28]
 8004414:	e004      	b.n	8004420 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8004416:	68b9      	ldr	r1, [r7, #8]
 8004418:	68f8      	ldr	r0, [r7, #12]
 800441a:	f000 fd5a 	bl	8004ed2 <xQueueCreateCountingSemaphore>
 800441e:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8004420:	69fb      	ldr	r3, [r7, #28]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d00c      	beq.n	8004440 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d003      	beq.n	8004434 <osSemaphoreNew+0xfc>
          name = attr->name;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	617b      	str	r3, [r7, #20]
 8004432:	e001      	b.n	8004438 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8004434:	2300      	movs	r3, #0
 8004436:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8004438:	6979      	ldr	r1, [r7, #20]
 800443a:	69f8      	ldr	r0, [r7, #28]
 800443c:	f001 fb96 	bl	8005b6c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8004440:	69fb      	ldr	r3, [r7, #28]
}
 8004442:	4618      	mov	r0, r3
 8004444:	3720      	adds	r7, #32
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}
	...

0800444c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800444c:	b580      	push	{r7, lr}
 800444e:	b086      	sub	sp, #24
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
 8004454:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800445a:	2300      	movs	r3, #0
 800445c:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d103      	bne.n	800446c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8004464:	f06f 0303 	mvn.w	r3, #3
 8004468:	617b      	str	r3, [r7, #20]
 800446a:	e039      	b.n	80044e0 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800446c:	f3ef 8305 	mrs	r3, IPSR
 8004470:	60fb      	str	r3, [r7, #12]
  return(result);
 8004472:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8004474:	2b00      	cmp	r3, #0
 8004476:	d022      	beq.n	80044be <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d003      	beq.n	8004486 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800447e:	f06f 0303 	mvn.w	r3, #3
 8004482:	617b      	str	r3, [r7, #20]
 8004484:	e02c      	b.n	80044e0 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8004486:	2300      	movs	r3, #0
 8004488:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800448a:	f107 0308 	add.w	r3, r7, #8
 800448e:	461a      	mov	r2, r3
 8004490:	2100      	movs	r1, #0
 8004492:	6938      	ldr	r0, [r7, #16]
 8004494:	f001 f962 	bl	800575c <xQueueReceiveFromISR>
 8004498:	4603      	mov	r3, r0
 800449a:	2b01      	cmp	r3, #1
 800449c:	d003      	beq.n	80044a6 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800449e:	f06f 0302 	mvn.w	r3, #2
 80044a2:	617b      	str	r3, [r7, #20]
 80044a4:	e01c      	b.n	80044e0 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d019      	beq.n	80044e0 <osSemaphoreAcquire+0x94>
 80044ac:	4b0f      	ldr	r3, [pc, #60]	; (80044ec <osSemaphoreAcquire+0xa0>)
 80044ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044b2:	601a      	str	r2, [r3, #0]
 80044b4:	f3bf 8f4f 	dsb	sy
 80044b8:	f3bf 8f6f 	isb	sy
 80044bc:	e010      	b.n	80044e0 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80044be:	6839      	ldr	r1, [r7, #0]
 80044c0:	6938      	ldr	r0, [r7, #16]
 80044c2:	f001 f83f 	bl	8005544 <xQueueSemaphoreTake>
 80044c6:	4603      	mov	r3, r0
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	d009      	beq.n	80044e0 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d003      	beq.n	80044da <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 80044d2:	f06f 0301 	mvn.w	r3, #1
 80044d6:	617b      	str	r3, [r7, #20]
 80044d8:	e002      	b.n	80044e0 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 80044da:	f06f 0302 	mvn.w	r3, #2
 80044de:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80044e0:	697b      	ldr	r3, [r7, #20]
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	3718      	adds	r7, #24
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}
 80044ea:	bf00      	nop
 80044ec:	e000ed04 	.word	0xe000ed04

080044f0 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b086      	sub	sp, #24
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80044fc:	2300      	movs	r3, #0
 80044fe:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d103      	bne.n	800450e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8004506:	f06f 0303 	mvn.w	r3, #3
 800450a:	617b      	str	r3, [r7, #20]
 800450c:	e02c      	b.n	8004568 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800450e:	f3ef 8305 	mrs	r3, IPSR
 8004512:	60fb      	str	r3, [r7, #12]
  return(result);
 8004514:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8004516:	2b00      	cmp	r3, #0
 8004518:	d01a      	beq.n	8004550 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800451a:	2300      	movs	r3, #0
 800451c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800451e:	f107 0308 	add.w	r3, r7, #8
 8004522:	4619      	mov	r1, r3
 8004524:	6938      	ldr	r0, [r7, #16]
 8004526:	f000 fea0 	bl	800526a <xQueueGiveFromISR>
 800452a:	4603      	mov	r3, r0
 800452c:	2b01      	cmp	r3, #1
 800452e:	d003      	beq.n	8004538 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8004530:	f06f 0302 	mvn.w	r3, #2
 8004534:	617b      	str	r3, [r7, #20]
 8004536:	e017      	b.n	8004568 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d014      	beq.n	8004568 <osSemaphoreRelease+0x78>
 800453e:	4b0d      	ldr	r3, [pc, #52]	; (8004574 <osSemaphoreRelease+0x84>)
 8004540:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004544:	601a      	str	r2, [r3, #0]
 8004546:	f3bf 8f4f 	dsb	sy
 800454a:	f3bf 8f6f 	isb	sy
 800454e:	e00b      	b.n	8004568 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8004550:	2300      	movs	r3, #0
 8004552:	2200      	movs	r2, #0
 8004554:	2100      	movs	r1, #0
 8004556:	6938      	ldr	r0, [r7, #16]
 8004558:	f000 fcee 	bl	8004f38 <xQueueGenericSend>
 800455c:	4603      	mov	r3, r0
 800455e:	2b01      	cmp	r3, #1
 8004560:	d002      	beq.n	8004568 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8004562:	f06f 0302 	mvn.w	r3, #2
 8004566:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8004568:	697b      	ldr	r3, [r7, #20]
}
 800456a:	4618      	mov	r0, r3
 800456c:	3718      	adds	r7, #24
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}
 8004572:	bf00      	nop
 8004574:	e000ed04 	.word	0xe000ed04

08004578 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8004578:	b580      	push	{r7, lr}
 800457a:	b086      	sub	sp, #24
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004584:	f3ef 8305 	mrs	r3, IPSR
 8004588:	60fb      	str	r3, [r7, #12]
  return(result);
 800458a:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800458c:	2b00      	cmp	r3, #0
 800458e:	d003      	beq.n	8004598 <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 8004590:	f06f 0305 	mvn.w	r3, #5
 8004594:	617b      	str	r3, [r7, #20]
 8004596:	e00e      	b.n	80045b6 <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d103      	bne.n	80045a6 <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 800459e:	f06f 0303 	mvn.w	r3, #3
 80045a2:	617b      	str	r3, [r7, #20]
 80045a4:	e007      	b.n	80045b6 <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 80045a6:	6938      	ldr	r0, [r7, #16]
 80045a8:	f001 fb0a 	bl	8005bc0 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 80045ac:	2300      	movs	r3, #0
 80045ae:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 80045b0:	6938      	ldr	r0, [r7, #16]
 80045b2:	f001 f98f 	bl	80058d4 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 80045b6:	697b      	ldr	r3, [r7, #20]
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	3718      	adds	r7, #24
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd80      	pop	{r7, pc}

080045c0 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b08a      	sub	sp, #40	; 0x28
 80045c4:	af02      	add	r7, sp, #8
 80045c6:	60f8      	str	r0, [r7, #12]
 80045c8:	60b9      	str	r1, [r7, #8]
 80045ca:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80045cc:	2300      	movs	r3, #0
 80045ce:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80045d0:	f3ef 8305 	mrs	r3, IPSR
 80045d4:	613b      	str	r3, [r7, #16]
  return(result);
 80045d6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d15f      	bne.n	800469c <osMessageQueueNew+0xdc>
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d05c      	beq.n	800469c <osMessageQueueNew+0xdc>
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d059      	beq.n	800469c <osMessageQueueNew+0xdc>
    mem = -1;
 80045e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80045ec:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d029      	beq.n	8004648 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d012      	beq.n	8004622 <osMessageQueueNew+0x62>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	68db      	ldr	r3, [r3, #12]
 8004600:	2b4f      	cmp	r3, #79	; 0x4f
 8004602:	d90e      	bls.n	8004622 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004608:	2b00      	cmp	r3, #0
 800460a:	d00a      	beq.n	8004622 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	695a      	ldr	r2, [r3, #20]
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	68b9      	ldr	r1, [r7, #8]
 8004614:	fb01 f303 	mul.w	r3, r1, r3
 8004618:	429a      	cmp	r2, r3
 800461a:	d302      	bcc.n	8004622 <osMessageQueueNew+0x62>
        mem = 1;
 800461c:	2301      	movs	r3, #1
 800461e:	61bb      	str	r3, [r7, #24]
 8004620:	e014      	b.n	800464c <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d110      	bne.n	800464c <osMessageQueueNew+0x8c>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	68db      	ldr	r3, [r3, #12]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d10c      	bne.n	800464c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004636:	2b00      	cmp	r3, #0
 8004638:	d108      	bne.n	800464c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	695b      	ldr	r3, [r3, #20]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d104      	bne.n	800464c <osMessageQueueNew+0x8c>
          mem = 0;
 8004642:	2300      	movs	r3, #0
 8004644:	61bb      	str	r3, [r7, #24]
 8004646:	e001      	b.n	800464c <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8004648:	2300      	movs	r3, #0
 800464a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800464c:	69bb      	ldr	r3, [r7, #24]
 800464e:	2b01      	cmp	r3, #1
 8004650:	d10b      	bne.n	800466a <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	691a      	ldr	r2, [r3, #16]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	2100      	movs	r1, #0
 800465c:	9100      	str	r1, [sp, #0]
 800465e:	68b9      	ldr	r1, [r7, #8]
 8004660:	68f8      	ldr	r0, [r7, #12]
 8004662:	f000 fa73 	bl	8004b4c <xQueueGenericCreateStatic>
 8004666:	61f8      	str	r0, [r7, #28]
 8004668:	e008      	b.n	800467c <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800466a:	69bb      	ldr	r3, [r7, #24]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d105      	bne.n	800467c <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8004670:	2200      	movs	r2, #0
 8004672:	68b9      	ldr	r1, [r7, #8]
 8004674:	68f8      	ldr	r0, [r7, #12]
 8004676:	f000 fae1 	bl	8004c3c <xQueueGenericCreate>
 800467a:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800467c:	69fb      	ldr	r3, [r7, #28]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d00c      	beq.n	800469c <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d003      	beq.n	8004690 <osMessageQueueNew+0xd0>
        name = attr->name;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	617b      	str	r3, [r7, #20]
 800468e:	e001      	b.n	8004694 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8004690:	2300      	movs	r3, #0
 8004692:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8004694:	6979      	ldr	r1, [r7, #20]
 8004696:	69f8      	ldr	r0, [r7, #28]
 8004698:	f001 fa68 	bl	8005b6c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800469c:	69fb      	ldr	r3, [r7, #28]
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3720      	adds	r7, #32
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}
	...

080046a8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b088      	sub	sp, #32
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	60f8      	str	r0, [r7, #12]
 80046b0:	60b9      	str	r1, [r7, #8]
 80046b2:	603b      	str	r3, [r7, #0]
 80046b4:	4613      	mov	r3, r2
 80046b6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80046bc:	2300      	movs	r3, #0
 80046be:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80046c0:	f3ef 8305 	mrs	r3, IPSR
 80046c4:	617b      	str	r3, [r7, #20]
  return(result);
 80046c6:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d028      	beq.n	800471e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80046cc:	69bb      	ldr	r3, [r7, #24]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d005      	beq.n	80046de <osMessageQueuePut+0x36>
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d002      	beq.n	80046de <osMessageQueuePut+0x36>
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d003      	beq.n	80046e6 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80046de:	f06f 0303 	mvn.w	r3, #3
 80046e2:	61fb      	str	r3, [r7, #28]
 80046e4:	e038      	b.n	8004758 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80046e6:	2300      	movs	r3, #0
 80046e8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80046ea:	f107 0210 	add.w	r2, r7, #16
 80046ee:	2300      	movs	r3, #0
 80046f0:	68b9      	ldr	r1, [r7, #8]
 80046f2:	69b8      	ldr	r0, [r7, #24]
 80046f4:	f000 fd1e 	bl	8005134 <xQueueGenericSendFromISR>
 80046f8:	4603      	mov	r3, r0
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d003      	beq.n	8004706 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80046fe:	f06f 0302 	mvn.w	r3, #2
 8004702:	61fb      	str	r3, [r7, #28]
 8004704:	e028      	b.n	8004758 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d025      	beq.n	8004758 <osMessageQueuePut+0xb0>
 800470c:	4b15      	ldr	r3, [pc, #84]	; (8004764 <osMessageQueuePut+0xbc>)
 800470e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004712:	601a      	str	r2, [r3, #0]
 8004714:	f3bf 8f4f 	dsb	sy
 8004718:	f3bf 8f6f 	isb	sy
 800471c:	e01c      	b.n	8004758 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800471e:	69bb      	ldr	r3, [r7, #24]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d002      	beq.n	800472a <osMessageQueuePut+0x82>
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d103      	bne.n	8004732 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800472a:	f06f 0303 	mvn.w	r3, #3
 800472e:	61fb      	str	r3, [r7, #28]
 8004730:	e012      	b.n	8004758 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004732:	2300      	movs	r3, #0
 8004734:	683a      	ldr	r2, [r7, #0]
 8004736:	68b9      	ldr	r1, [r7, #8]
 8004738:	69b8      	ldr	r0, [r7, #24]
 800473a:	f000 fbfd 	bl	8004f38 <xQueueGenericSend>
 800473e:	4603      	mov	r3, r0
 8004740:	2b01      	cmp	r3, #1
 8004742:	d009      	beq.n	8004758 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d003      	beq.n	8004752 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800474a:	f06f 0301 	mvn.w	r3, #1
 800474e:	61fb      	str	r3, [r7, #28]
 8004750:	e002      	b.n	8004758 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8004752:	f06f 0302 	mvn.w	r3, #2
 8004756:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8004758:	69fb      	ldr	r3, [r7, #28]
}
 800475a:	4618      	mov	r0, r3
 800475c:	3720      	adds	r7, #32
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}
 8004762:	bf00      	nop
 8004764:	e000ed04 	.word	0xe000ed04

08004768 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8004768:	b580      	push	{r7, lr}
 800476a:	b088      	sub	sp, #32
 800476c:	af00      	add	r7, sp, #0
 800476e:	60f8      	str	r0, [r7, #12]
 8004770:	60b9      	str	r1, [r7, #8]
 8004772:	607a      	str	r2, [r7, #4]
 8004774:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800477a:	2300      	movs	r3, #0
 800477c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800477e:	f3ef 8305 	mrs	r3, IPSR
 8004782:	617b      	str	r3, [r7, #20]
  return(result);
 8004784:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8004786:	2b00      	cmp	r3, #0
 8004788:	d028      	beq.n	80047dc <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800478a:	69bb      	ldr	r3, [r7, #24]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d005      	beq.n	800479c <osMessageQueueGet+0x34>
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d002      	beq.n	800479c <osMessageQueueGet+0x34>
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d003      	beq.n	80047a4 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800479c:	f06f 0303 	mvn.w	r3, #3
 80047a0:	61fb      	str	r3, [r7, #28]
 80047a2:	e037      	b.n	8004814 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80047a4:	2300      	movs	r3, #0
 80047a6:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80047a8:	f107 0310 	add.w	r3, r7, #16
 80047ac:	461a      	mov	r2, r3
 80047ae:	68b9      	ldr	r1, [r7, #8]
 80047b0:	69b8      	ldr	r0, [r7, #24]
 80047b2:	f000 ffd3 	bl	800575c <xQueueReceiveFromISR>
 80047b6:	4603      	mov	r3, r0
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d003      	beq.n	80047c4 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80047bc:	f06f 0302 	mvn.w	r3, #2
 80047c0:	61fb      	str	r3, [r7, #28]
 80047c2:	e027      	b.n	8004814 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d024      	beq.n	8004814 <osMessageQueueGet+0xac>
 80047ca:	4b15      	ldr	r3, [pc, #84]	; (8004820 <osMessageQueueGet+0xb8>)
 80047cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047d0:	601a      	str	r2, [r3, #0]
 80047d2:	f3bf 8f4f 	dsb	sy
 80047d6:	f3bf 8f6f 	isb	sy
 80047da:	e01b      	b.n	8004814 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80047dc:	69bb      	ldr	r3, [r7, #24]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d002      	beq.n	80047e8 <osMessageQueueGet+0x80>
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d103      	bne.n	80047f0 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80047e8:	f06f 0303 	mvn.w	r3, #3
 80047ec:	61fb      	str	r3, [r7, #28]
 80047ee:	e011      	b.n	8004814 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80047f0:	683a      	ldr	r2, [r7, #0]
 80047f2:	68b9      	ldr	r1, [r7, #8]
 80047f4:	69b8      	ldr	r0, [r7, #24]
 80047f6:	f000 fdc5 	bl	8005384 <xQueueReceive>
 80047fa:	4603      	mov	r3, r0
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	d009      	beq.n	8004814 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d003      	beq.n	800480e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8004806:	f06f 0301 	mvn.w	r3, #1
 800480a:	61fb      	str	r3, [r7, #28]
 800480c:	e002      	b.n	8004814 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800480e:	f06f 0302 	mvn.w	r3, #2
 8004812:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8004814:	69fb      	ldr	r3, [r7, #28]
}
 8004816:	4618      	mov	r0, r3
 8004818:	3720      	adds	r7, #32
 800481a:	46bd      	mov	sp, r7
 800481c:	bd80      	pop	{r7, pc}
 800481e:	bf00      	nop
 8004820:	e000ed04 	.word	0xe000ed04

08004824 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8004824:	b580      	push	{r7, lr}
 8004826:	b086      	sub	sp, #24
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d102      	bne.n	800483c <osMessageQueueGetCount+0x18>
    count = 0U;
 8004836:	2300      	movs	r3, #0
 8004838:	617b      	str	r3, [r7, #20]
 800483a:	e00e      	b.n	800485a <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800483c:	f3ef 8305 	mrs	r3, IPSR
 8004840:	60fb      	str	r3, [r7, #12]
  return(result);
 8004842:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8004844:	2b00      	cmp	r3, #0
 8004846:	d004      	beq.n	8004852 <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8004848:	6938      	ldr	r0, [r7, #16]
 800484a:	f001 f825 	bl	8005898 <uxQueueMessagesWaitingFromISR>
 800484e:	6178      	str	r0, [r7, #20]
 8004850:	e003      	b.n	800485a <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8004852:	6938      	ldr	r0, [r7, #16]
 8004854:	f001 f802 	bl	800585c <uxQueueMessagesWaiting>
 8004858:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 800485a:	697b      	ldr	r3, [r7, #20]
}
 800485c:	4618      	mov	r0, r3
 800485e:	3718      	adds	r7, #24
 8004860:	46bd      	mov	sp, r7
 8004862:	bd80      	pop	{r7, pc}

08004864 <osMessageQueueDelete>:
  }

  return (stat);
}

osStatus_t osMessageQueueDelete (osMessageQueueId_t mq_id) {
 8004864:	b580      	push	{r7, lr}
 8004866:	b086      	sub	sp, #24
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004870:	f3ef 8305 	mrs	r3, IPSR
 8004874:	60fb      	str	r3, [r7, #12]
  return(result);
 8004876:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8004878:	2b00      	cmp	r3, #0
 800487a:	d003      	beq.n	8004884 <osMessageQueueDelete+0x20>
    stat = osErrorISR;
 800487c:	f06f 0305 	mvn.w	r3, #5
 8004880:	617b      	str	r3, [r7, #20]
 8004882:	e00e      	b.n	80048a2 <osMessageQueueDelete+0x3e>
  }
  else if (hQueue == NULL) {
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d103      	bne.n	8004892 <osMessageQueueDelete+0x2e>
    stat = osErrorParameter;
 800488a:	f06f 0303 	mvn.w	r3, #3
 800488e:	617b      	str	r3, [r7, #20]
 8004890:	e007      	b.n	80048a2 <osMessageQueueDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hQueue);
 8004892:	6938      	ldr	r0, [r7, #16]
 8004894:	f001 f994 	bl	8005bc0 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8004898:	2300      	movs	r3, #0
 800489a:	617b      	str	r3, [r7, #20]
    vQueueDelete (hQueue);
 800489c:	6938      	ldr	r0, [r7, #16]
 800489e:	f001 f819 	bl	80058d4 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 80048a2:	697b      	ldr	r3, [r7, #20]
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	3718      	adds	r7, #24
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}

080048ac <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80048ac:	b480      	push	{r7}
 80048ae:	b085      	sub	sp, #20
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	60f8      	str	r0, [r7, #12]
 80048b4:	60b9      	str	r1, [r7, #8]
 80048b6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	4a07      	ldr	r2, [pc, #28]	; (80048d8 <vApplicationGetIdleTaskMemory+0x2c>)
 80048bc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	4a06      	ldr	r2, [pc, #24]	; (80048dc <vApplicationGetIdleTaskMemory+0x30>)
 80048c2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2280      	movs	r2, #128	; 0x80
 80048c8:	601a      	str	r2, [r3, #0]
}
 80048ca:	bf00      	nop
 80048cc:	3714      	adds	r7, #20
 80048ce:	46bd      	mov	sp, r7
 80048d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d4:	4770      	bx	lr
 80048d6:	bf00      	nop
 80048d8:	200000ac 	.word	0x200000ac
 80048dc:	20000168 	.word	0x20000168

080048e0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80048e0:	b480      	push	{r7}
 80048e2:	b085      	sub	sp, #20
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	60f8      	str	r0, [r7, #12]
 80048e8:	60b9      	str	r1, [r7, #8]
 80048ea:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	4a07      	ldr	r2, [pc, #28]	; (800490c <vApplicationGetTimerTaskMemory+0x2c>)
 80048f0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	4a06      	ldr	r2, [pc, #24]	; (8004910 <vApplicationGetTimerTaskMemory+0x30>)
 80048f6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80048fe:	601a      	str	r2, [r3, #0]
}
 8004900:	bf00      	nop
 8004902:	3714      	adds	r7, #20
 8004904:	46bd      	mov	sp, r7
 8004906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490a:	4770      	bx	lr
 800490c:	20000368 	.word	0x20000368
 8004910:	20000424 	.word	0x20000424

08004914 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004914:	b480      	push	{r7}
 8004916:	b083      	sub	sp, #12
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	f103 0208 	add.w	r2, r3, #8
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800492c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	f103 0208 	add.w	r2, r3, #8
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	f103 0208 	add.w	r2, r3, #8
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2200      	movs	r2, #0
 8004946:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004948:	bf00      	nop
 800494a:	370c      	adds	r7, #12
 800494c:	46bd      	mov	sp, r7
 800494e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004952:	4770      	bx	lr

08004954 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004954:	b480      	push	{r7}
 8004956:	b083      	sub	sp, #12
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2200      	movs	r2, #0
 8004960:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004962:	bf00      	nop
 8004964:	370c      	adds	r7, #12
 8004966:	46bd      	mov	sp, r7
 8004968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496c:	4770      	bx	lr

0800496e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800496e:	b480      	push	{r7}
 8004970:	b085      	sub	sp, #20
 8004972:	af00      	add	r7, sp, #0
 8004974:	6078      	str	r0, [r7, #4]
 8004976:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	68fa      	ldr	r2, [r7, #12]
 8004982:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	689a      	ldr	r2, [r3, #8]
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	683a      	ldr	r2, [r7, #0]
 8004992:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	683a      	ldr	r2, [r7, #0]
 8004998:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	687a      	ldr	r2, [r7, #4]
 800499e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	1c5a      	adds	r2, r3, #1
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	601a      	str	r2, [r3, #0]
}
 80049aa:	bf00      	nop
 80049ac:	3714      	adds	r7, #20
 80049ae:	46bd      	mov	sp, r7
 80049b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b4:	4770      	bx	lr

080049b6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80049b6:	b480      	push	{r7}
 80049b8:	b085      	sub	sp, #20
 80049ba:	af00      	add	r7, sp, #0
 80049bc:	6078      	str	r0, [r7, #4]
 80049be:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049cc:	d103      	bne.n	80049d6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	691b      	ldr	r3, [r3, #16]
 80049d2:	60fb      	str	r3, [r7, #12]
 80049d4:	e00c      	b.n	80049f0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	3308      	adds	r3, #8
 80049da:	60fb      	str	r3, [r7, #12]
 80049dc:	e002      	b.n	80049e4 <vListInsert+0x2e>
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	60fb      	str	r3, [r7, #12]
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	68ba      	ldr	r2, [r7, #8]
 80049ec:	429a      	cmp	r2, r3
 80049ee:	d2f6      	bcs.n	80049de <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	685a      	ldr	r2, [r3, #4]
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	683a      	ldr	r2, [r7, #0]
 80049fe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	68fa      	ldr	r2, [r7, #12]
 8004a04:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	683a      	ldr	r2, [r7, #0]
 8004a0a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	687a      	ldr	r2, [r7, #4]
 8004a10:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	1c5a      	adds	r2, r3, #1
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	601a      	str	r2, [r3, #0]
}
 8004a1c:	bf00      	nop
 8004a1e:	3714      	adds	r7, #20
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr

08004a28 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b085      	sub	sp, #20
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	691b      	ldr	r3, [r3, #16]
 8004a34:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	687a      	ldr	r2, [r7, #4]
 8004a3c:	6892      	ldr	r2, [r2, #8]
 8004a3e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	687a      	ldr	r2, [r7, #4]
 8004a46:	6852      	ldr	r2, [r2, #4]
 8004a48:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	687a      	ldr	r2, [r7, #4]
 8004a50:	429a      	cmp	r2, r3
 8004a52:	d103      	bne.n	8004a5c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	689a      	ldr	r2, [r3, #8]
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	1e5a      	subs	r2, r3, #1
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	3714      	adds	r7, #20
 8004a74:	46bd      	mov	sp, r7
 8004a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7a:	4770      	bx	lr

08004a7c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b084      	sub	sp, #16
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
 8004a84:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d10a      	bne.n	8004aa6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a94:	f383 8811 	msr	BASEPRI, r3
 8004a98:	f3bf 8f6f 	isb	sy
 8004a9c:	f3bf 8f4f 	dsb	sy
 8004aa0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004aa2:	bf00      	nop
 8004aa4:	e7fe      	b.n	8004aa4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004aa6:	f002 fdad 	bl	8007604 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ab2:	68f9      	ldr	r1, [r7, #12]
 8004ab4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004ab6:	fb01 f303 	mul.w	r3, r1, r3
 8004aba:	441a      	add	r2, r3
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ad6:	3b01      	subs	r3, #1
 8004ad8:	68f9      	ldr	r1, [r7, #12]
 8004ada:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004adc:	fb01 f303 	mul.w	r3, r1, r3
 8004ae0:	441a      	add	r2, r3
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	22ff      	movs	r2, #255	; 0xff
 8004aea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	22ff      	movs	r2, #255	; 0xff
 8004af2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d114      	bne.n	8004b26 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	691b      	ldr	r3, [r3, #16]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d01a      	beq.n	8004b3a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	3310      	adds	r3, #16
 8004b08:	4618      	mov	r0, r3
 8004b0a:	f001 fd4f 	bl	80065ac <xTaskRemoveFromEventList>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d012      	beq.n	8004b3a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004b14:	4b0c      	ldr	r3, [pc, #48]	; (8004b48 <xQueueGenericReset+0xcc>)
 8004b16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b1a:	601a      	str	r2, [r3, #0]
 8004b1c:	f3bf 8f4f 	dsb	sy
 8004b20:	f3bf 8f6f 	isb	sy
 8004b24:	e009      	b.n	8004b3a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	3310      	adds	r3, #16
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f7ff fef2 	bl	8004914 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	3324      	adds	r3, #36	; 0x24
 8004b34:	4618      	mov	r0, r3
 8004b36:	f7ff feed 	bl	8004914 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004b3a:	f002 fd93 	bl	8007664 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004b3e:	2301      	movs	r3, #1
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	3710      	adds	r7, #16
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}
 8004b48:	e000ed04 	.word	0xe000ed04

08004b4c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b08e      	sub	sp, #56	; 0x38
 8004b50:	af02      	add	r7, sp, #8
 8004b52:	60f8      	str	r0, [r7, #12]
 8004b54:	60b9      	str	r1, [r7, #8]
 8004b56:	607a      	str	r2, [r7, #4]
 8004b58:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d10a      	bne.n	8004b76 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b64:	f383 8811 	msr	BASEPRI, r3
 8004b68:	f3bf 8f6f 	isb	sy
 8004b6c:	f3bf 8f4f 	dsb	sy
 8004b70:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004b72:	bf00      	nop
 8004b74:	e7fe      	b.n	8004b74 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d10a      	bne.n	8004b92 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b80:	f383 8811 	msr	BASEPRI, r3
 8004b84:	f3bf 8f6f 	isb	sy
 8004b88:	f3bf 8f4f 	dsb	sy
 8004b8c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004b8e:	bf00      	nop
 8004b90:	e7fe      	b.n	8004b90 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d002      	beq.n	8004b9e <xQueueGenericCreateStatic+0x52>
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d001      	beq.n	8004ba2 <xQueueGenericCreateStatic+0x56>
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e000      	b.n	8004ba4 <xQueueGenericCreateStatic+0x58>
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d10a      	bne.n	8004bbe <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bac:	f383 8811 	msr	BASEPRI, r3
 8004bb0:	f3bf 8f6f 	isb	sy
 8004bb4:	f3bf 8f4f 	dsb	sy
 8004bb8:	623b      	str	r3, [r7, #32]
}
 8004bba:	bf00      	nop
 8004bbc:	e7fe      	b.n	8004bbc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d102      	bne.n	8004bca <xQueueGenericCreateStatic+0x7e>
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d101      	bne.n	8004bce <xQueueGenericCreateStatic+0x82>
 8004bca:	2301      	movs	r3, #1
 8004bcc:	e000      	b.n	8004bd0 <xQueueGenericCreateStatic+0x84>
 8004bce:	2300      	movs	r3, #0
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d10a      	bne.n	8004bea <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bd8:	f383 8811 	msr	BASEPRI, r3
 8004bdc:	f3bf 8f6f 	isb	sy
 8004be0:	f3bf 8f4f 	dsb	sy
 8004be4:	61fb      	str	r3, [r7, #28]
}
 8004be6:	bf00      	nop
 8004be8:	e7fe      	b.n	8004be8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004bea:	2350      	movs	r3, #80	; 0x50
 8004bec:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	2b50      	cmp	r3, #80	; 0x50
 8004bf2:	d00a      	beq.n	8004c0a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bf8:	f383 8811 	msr	BASEPRI, r3
 8004bfc:	f3bf 8f6f 	isb	sy
 8004c00:	f3bf 8f4f 	dsb	sy
 8004c04:	61bb      	str	r3, [r7, #24]
}
 8004c06:	bf00      	nop
 8004c08:	e7fe      	b.n	8004c08 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004c0a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d00d      	beq.n	8004c32 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c18:	2201      	movs	r2, #1
 8004c1a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004c1e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c24:	9300      	str	r3, [sp, #0]
 8004c26:	4613      	mov	r3, r2
 8004c28:	687a      	ldr	r2, [r7, #4]
 8004c2a:	68b9      	ldr	r1, [r7, #8]
 8004c2c:	68f8      	ldr	r0, [r7, #12]
 8004c2e:	f000 f83f 	bl	8004cb0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004c34:	4618      	mov	r0, r3
 8004c36:	3730      	adds	r7, #48	; 0x30
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}

08004c3c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b08a      	sub	sp, #40	; 0x28
 8004c40:	af02      	add	r7, sp, #8
 8004c42:	60f8      	str	r0, [r7, #12]
 8004c44:	60b9      	str	r1, [r7, #8]
 8004c46:	4613      	mov	r3, r2
 8004c48:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d10a      	bne.n	8004c66 <xQueueGenericCreate+0x2a>
	__asm volatile
 8004c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c54:	f383 8811 	msr	BASEPRI, r3
 8004c58:	f3bf 8f6f 	isb	sy
 8004c5c:	f3bf 8f4f 	dsb	sy
 8004c60:	613b      	str	r3, [r7, #16]
}
 8004c62:	bf00      	nop
 8004c64:	e7fe      	b.n	8004c64 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	68ba      	ldr	r2, [r7, #8]
 8004c6a:	fb02 f303 	mul.w	r3, r2, r3
 8004c6e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004c70:	69fb      	ldr	r3, [r7, #28]
 8004c72:	3350      	adds	r3, #80	; 0x50
 8004c74:	4618      	mov	r0, r3
 8004c76:	f002 fde7 	bl	8007848 <pvPortMalloc>
 8004c7a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004c7c:	69bb      	ldr	r3, [r7, #24]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d011      	beq.n	8004ca6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004c82:	69bb      	ldr	r3, [r7, #24]
 8004c84:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	3350      	adds	r3, #80	; 0x50
 8004c8a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004c8c:	69bb      	ldr	r3, [r7, #24]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004c94:	79fa      	ldrb	r2, [r7, #7]
 8004c96:	69bb      	ldr	r3, [r7, #24]
 8004c98:	9300      	str	r3, [sp, #0]
 8004c9a:	4613      	mov	r3, r2
 8004c9c:	697a      	ldr	r2, [r7, #20]
 8004c9e:	68b9      	ldr	r1, [r7, #8]
 8004ca0:	68f8      	ldr	r0, [r7, #12]
 8004ca2:	f000 f805 	bl	8004cb0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004ca6:	69bb      	ldr	r3, [r7, #24]
	}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	3720      	adds	r7, #32
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}

08004cb0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b084      	sub	sp, #16
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	60f8      	str	r0, [r7, #12]
 8004cb8:	60b9      	str	r1, [r7, #8]
 8004cba:	607a      	str	r2, [r7, #4]
 8004cbc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d103      	bne.n	8004ccc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004cc4:	69bb      	ldr	r3, [r7, #24]
 8004cc6:	69ba      	ldr	r2, [r7, #24]
 8004cc8:	601a      	str	r2, [r3, #0]
 8004cca:	e002      	b.n	8004cd2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004ccc:	69bb      	ldr	r3, [r7, #24]
 8004cce:	687a      	ldr	r2, [r7, #4]
 8004cd0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004cd2:	69bb      	ldr	r3, [r7, #24]
 8004cd4:	68fa      	ldr	r2, [r7, #12]
 8004cd6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004cd8:	69bb      	ldr	r3, [r7, #24]
 8004cda:	68ba      	ldr	r2, [r7, #8]
 8004cdc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004cde:	2101      	movs	r1, #1
 8004ce0:	69b8      	ldr	r0, [r7, #24]
 8004ce2:	f7ff fecb 	bl	8004a7c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004ce6:	69bb      	ldr	r3, [r7, #24]
 8004ce8:	78fa      	ldrb	r2, [r7, #3]
 8004cea:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004cee:	bf00      	nop
 8004cf0:	3710      	adds	r7, #16
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}

08004cf6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8004cf6:	b580      	push	{r7, lr}
 8004cf8:	b082      	sub	sp, #8
 8004cfa:	af00      	add	r7, sp, #0
 8004cfc:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d00e      	beq.n	8004d22 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2200      	movs	r2, #0
 8004d08:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2200      	movs	r2, #0
 8004d14:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004d16:	2300      	movs	r3, #0
 8004d18:	2200      	movs	r2, #0
 8004d1a:	2100      	movs	r1, #0
 8004d1c:	6878      	ldr	r0, [r7, #4]
 8004d1e:	f000 f90b 	bl	8004f38 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8004d22:	bf00      	nop
 8004d24:	3708      	adds	r7, #8
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}

08004d2a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8004d2a:	b580      	push	{r7, lr}
 8004d2c:	b086      	sub	sp, #24
 8004d2e:	af00      	add	r7, sp, #0
 8004d30:	4603      	mov	r3, r0
 8004d32:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004d34:	2301      	movs	r3, #1
 8004d36:	617b      	str	r3, [r7, #20]
 8004d38:	2300      	movs	r3, #0
 8004d3a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8004d3c:	79fb      	ldrb	r3, [r7, #7]
 8004d3e:	461a      	mov	r2, r3
 8004d40:	6939      	ldr	r1, [r7, #16]
 8004d42:	6978      	ldr	r0, [r7, #20]
 8004d44:	f7ff ff7a 	bl	8004c3c <xQueueGenericCreate>
 8004d48:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004d4a:	68f8      	ldr	r0, [r7, #12]
 8004d4c:	f7ff ffd3 	bl	8004cf6 <prvInitialiseMutex>

		return xNewQueue;
 8004d50:	68fb      	ldr	r3, [r7, #12]
	}
 8004d52:	4618      	mov	r0, r3
 8004d54:	3718      	adds	r7, #24
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}

08004d5a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8004d5a:	b580      	push	{r7, lr}
 8004d5c:	b088      	sub	sp, #32
 8004d5e:	af02      	add	r7, sp, #8
 8004d60:	4603      	mov	r3, r0
 8004d62:	6039      	str	r1, [r7, #0]
 8004d64:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004d66:	2301      	movs	r3, #1
 8004d68:	617b      	str	r3, [r7, #20]
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8004d6e:	79fb      	ldrb	r3, [r7, #7]
 8004d70:	9300      	str	r3, [sp, #0]
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	2200      	movs	r2, #0
 8004d76:	6939      	ldr	r1, [r7, #16]
 8004d78:	6978      	ldr	r0, [r7, #20]
 8004d7a:	f7ff fee7 	bl	8004b4c <xQueueGenericCreateStatic>
 8004d7e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004d80:	68f8      	ldr	r0, [r7, #12]
 8004d82:	f7ff ffb8 	bl	8004cf6 <prvInitialiseMutex>

		return xNewQueue;
 8004d86:	68fb      	ldr	r3, [r7, #12]
	}
 8004d88:	4618      	mov	r0, r3
 8004d8a:	3718      	adds	r7, #24
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bd80      	pop	{r7, pc}

08004d90 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8004d90:	b590      	push	{r4, r7, lr}
 8004d92:	b087      	sub	sp, #28
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d10a      	bne.n	8004db8 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8004da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004da6:	f383 8811 	msr	BASEPRI, r3
 8004daa:	f3bf 8f6f 	isb	sy
 8004dae:	f3bf 8f4f 	dsb	sy
 8004db2:	60fb      	str	r3, [r7, #12]
}
 8004db4:	bf00      	nop
 8004db6:	e7fe      	b.n	8004db6 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	689c      	ldr	r4, [r3, #8]
 8004dbc:	f001 fdb8 	bl	8006930 <xTaskGetCurrentTaskHandle>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	429c      	cmp	r4, r3
 8004dc4:	d111      	bne.n	8004dea <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	68db      	ldr	r3, [r3, #12]
 8004dca:	1e5a      	subs	r2, r3, #1
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	68db      	ldr	r3, [r3, #12]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d105      	bne.n	8004de4 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8004dd8:	2300      	movs	r3, #0
 8004dda:	2200      	movs	r2, #0
 8004ddc:	2100      	movs	r1, #0
 8004dde:	6938      	ldr	r0, [r7, #16]
 8004de0:	f000 f8aa 	bl	8004f38 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8004de4:	2301      	movs	r3, #1
 8004de6:	617b      	str	r3, [r7, #20]
 8004de8:	e001      	b.n	8004dee <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8004dea:	2300      	movs	r3, #0
 8004dec:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8004dee:	697b      	ldr	r3, [r7, #20]
	}
 8004df0:	4618      	mov	r0, r3
 8004df2:	371c      	adds	r7, #28
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd90      	pop	{r4, r7, pc}

08004df8 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8004df8:	b590      	push	{r4, r7, lr}
 8004dfa:	b087      	sub	sp, #28
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
 8004e00:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d10a      	bne.n	8004e22 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8004e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e10:	f383 8811 	msr	BASEPRI, r3
 8004e14:	f3bf 8f6f 	isb	sy
 8004e18:	f3bf 8f4f 	dsb	sy
 8004e1c:	60fb      	str	r3, [r7, #12]
}
 8004e1e:	bf00      	nop
 8004e20:	e7fe      	b.n	8004e20 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	689c      	ldr	r4, [r3, #8]
 8004e26:	f001 fd83 	bl	8006930 <xTaskGetCurrentTaskHandle>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	429c      	cmp	r4, r3
 8004e2e:	d107      	bne.n	8004e40 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8004e30:	693b      	ldr	r3, [r7, #16]
 8004e32:	68db      	ldr	r3, [r3, #12]
 8004e34:	1c5a      	adds	r2, r3, #1
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	617b      	str	r3, [r7, #20]
 8004e3e:	e00c      	b.n	8004e5a <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8004e40:	6839      	ldr	r1, [r7, #0]
 8004e42:	6938      	ldr	r0, [r7, #16]
 8004e44:	f000 fb7e 	bl	8005544 <xQueueSemaphoreTake>
 8004e48:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d004      	beq.n	8004e5a <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	68db      	ldr	r3, [r3, #12]
 8004e54:	1c5a      	adds	r2, r3, #1
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8004e5a:	697b      	ldr	r3, [r7, #20]
	}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	371c      	adds	r7, #28
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd90      	pop	{r4, r7, pc}

08004e64 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b08a      	sub	sp, #40	; 0x28
 8004e68:	af02      	add	r7, sp, #8
 8004e6a:	60f8      	str	r0, [r7, #12]
 8004e6c:	60b9      	str	r1, [r7, #8]
 8004e6e:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d10a      	bne.n	8004e8c <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8004e76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e7a:	f383 8811 	msr	BASEPRI, r3
 8004e7e:	f3bf 8f6f 	isb	sy
 8004e82:	f3bf 8f4f 	dsb	sy
 8004e86:	61bb      	str	r3, [r7, #24]
}
 8004e88:	bf00      	nop
 8004e8a:	e7fe      	b.n	8004e8a <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8004e8c:	68ba      	ldr	r2, [r7, #8]
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	429a      	cmp	r2, r3
 8004e92:	d90a      	bls.n	8004eaa <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8004e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e98:	f383 8811 	msr	BASEPRI, r3
 8004e9c:	f3bf 8f6f 	isb	sy
 8004ea0:	f3bf 8f4f 	dsb	sy
 8004ea4:	617b      	str	r3, [r7, #20]
}
 8004ea6:	bf00      	nop
 8004ea8:	e7fe      	b.n	8004ea8 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8004eaa:	2302      	movs	r3, #2
 8004eac:	9300      	str	r3, [sp, #0]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	2100      	movs	r1, #0
 8004eb4:	68f8      	ldr	r0, [r7, #12]
 8004eb6:	f7ff fe49 	bl	8004b4c <xQueueGenericCreateStatic>
 8004eba:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8004ebc:	69fb      	ldr	r3, [r7, #28]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d002      	beq.n	8004ec8 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8004ec2:	69fb      	ldr	r3, [r7, #28]
 8004ec4:	68ba      	ldr	r2, [r7, #8]
 8004ec6:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8004ec8:	69fb      	ldr	r3, [r7, #28]
	}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3720      	adds	r7, #32
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}

08004ed2 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8004ed2:	b580      	push	{r7, lr}
 8004ed4:	b086      	sub	sp, #24
 8004ed6:	af00      	add	r7, sp, #0
 8004ed8:	6078      	str	r0, [r7, #4]
 8004eda:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d10a      	bne.n	8004ef8 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8004ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ee6:	f383 8811 	msr	BASEPRI, r3
 8004eea:	f3bf 8f6f 	isb	sy
 8004eee:	f3bf 8f4f 	dsb	sy
 8004ef2:	613b      	str	r3, [r7, #16]
}
 8004ef4:	bf00      	nop
 8004ef6:	e7fe      	b.n	8004ef6 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8004ef8:	683a      	ldr	r2, [r7, #0]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	429a      	cmp	r2, r3
 8004efe:	d90a      	bls.n	8004f16 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8004f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f04:	f383 8811 	msr	BASEPRI, r3
 8004f08:	f3bf 8f6f 	isb	sy
 8004f0c:	f3bf 8f4f 	dsb	sy
 8004f10:	60fb      	str	r3, [r7, #12]
}
 8004f12:	bf00      	nop
 8004f14:	e7fe      	b.n	8004f14 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8004f16:	2202      	movs	r2, #2
 8004f18:	2100      	movs	r1, #0
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f7ff fe8e 	bl	8004c3c <xQueueGenericCreate>
 8004f20:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d002      	beq.n	8004f2e <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	683a      	ldr	r2, [r7, #0]
 8004f2c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8004f2e:	697b      	ldr	r3, [r7, #20]
	}
 8004f30:	4618      	mov	r0, r3
 8004f32:	3718      	adds	r7, #24
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}

08004f38 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b08e      	sub	sp, #56	; 0x38
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	60f8      	str	r0, [r7, #12]
 8004f40:	60b9      	str	r1, [r7, #8]
 8004f42:	607a      	str	r2, [r7, #4]
 8004f44:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004f46:	2300      	movs	r3, #0
 8004f48:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d10a      	bne.n	8004f6a <xQueueGenericSend+0x32>
	__asm volatile
 8004f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f58:	f383 8811 	msr	BASEPRI, r3
 8004f5c:	f3bf 8f6f 	isb	sy
 8004f60:	f3bf 8f4f 	dsb	sy
 8004f64:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004f66:	bf00      	nop
 8004f68:	e7fe      	b.n	8004f68 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d103      	bne.n	8004f78 <xQueueGenericSend+0x40>
 8004f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d101      	bne.n	8004f7c <xQueueGenericSend+0x44>
 8004f78:	2301      	movs	r3, #1
 8004f7a:	e000      	b.n	8004f7e <xQueueGenericSend+0x46>
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d10a      	bne.n	8004f98 <xQueueGenericSend+0x60>
	__asm volatile
 8004f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f86:	f383 8811 	msr	BASEPRI, r3
 8004f8a:	f3bf 8f6f 	isb	sy
 8004f8e:	f3bf 8f4f 	dsb	sy
 8004f92:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004f94:	bf00      	nop
 8004f96:	e7fe      	b.n	8004f96 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	2b02      	cmp	r3, #2
 8004f9c:	d103      	bne.n	8004fa6 <xQueueGenericSend+0x6e>
 8004f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fa2:	2b01      	cmp	r3, #1
 8004fa4:	d101      	bne.n	8004faa <xQueueGenericSend+0x72>
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	e000      	b.n	8004fac <xQueueGenericSend+0x74>
 8004faa:	2300      	movs	r3, #0
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d10a      	bne.n	8004fc6 <xQueueGenericSend+0x8e>
	__asm volatile
 8004fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fb4:	f383 8811 	msr	BASEPRI, r3
 8004fb8:	f3bf 8f6f 	isb	sy
 8004fbc:	f3bf 8f4f 	dsb	sy
 8004fc0:	623b      	str	r3, [r7, #32]
}
 8004fc2:	bf00      	nop
 8004fc4:	e7fe      	b.n	8004fc4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004fc6:	f001 fcc3 	bl	8006950 <xTaskGetSchedulerState>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d102      	bne.n	8004fd6 <xQueueGenericSend+0x9e>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d101      	bne.n	8004fda <xQueueGenericSend+0xa2>
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	e000      	b.n	8004fdc <xQueueGenericSend+0xa4>
 8004fda:	2300      	movs	r3, #0
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d10a      	bne.n	8004ff6 <xQueueGenericSend+0xbe>
	__asm volatile
 8004fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fe4:	f383 8811 	msr	BASEPRI, r3
 8004fe8:	f3bf 8f6f 	isb	sy
 8004fec:	f3bf 8f4f 	dsb	sy
 8004ff0:	61fb      	str	r3, [r7, #28]
}
 8004ff2:	bf00      	nop
 8004ff4:	e7fe      	b.n	8004ff4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004ff6:	f002 fb05 	bl	8007604 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ffc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005000:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005002:	429a      	cmp	r2, r3
 8005004:	d302      	bcc.n	800500c <xQueueGenericSend+0xd4>
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	2b02      	cmp	r3, #2
 800500a:	d129      	bne.n	8005060 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800500c:	683a      	ldr	r2, [r7, #0]
 800500e:	68b9      	ldr	r1, [r7, #8]
 8005010:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005012:	f000 fc9a 	bl	800594a <prvCopyDataToQueue>
 8005016:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800501a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800501c:	2b00      	cmp	r3, #0
 800501e:	d010      	beq.n	8005042 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005022:	3324      	adds	r3, #36	; 0x24
 8005024:	4618      	mov	r0, r3
 8005026:	f001 fac1 	bl	80065ac <xTaskRemoveFromEventList>
 800502a:	4603      	mov	r3, r0
 800502c:	2b00      	cmp	r3, #0
 800502e:	d013      	beq.n	8005058 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005030:	4b3f      	ldr	r3, [pc, #252]	; (8005130 <xQueueGenericSend+0x1f8>)
 8005032:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005036:	601a      	str	r2, [r3, #0]
 8005038:	f3bf 8f4f 	dsb	sy
 800503c:	f3bf 8f6f 	isb	sy
 8005040:	e00a      	b.n	8005058 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005044:	2b00      	cmp	r3, #0
 8005046:	d007      	beq.n	8005058 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005048:	4b39      	ldr	r3, [pc, #228]	; (8005130 <xQueueGenericSend+0x1f8>)
 800504a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800504e:	601a      	str	r2, [r3, #0]
 8005050:	f3bf 8f4f 	dsb	sy
 8005054:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005058:	f002 fb04 	bl	8007664 <vPortExitCritical>
				return pdPASS;
 800505c:	2301      	movs	r3, #1
 800505e:	e063      	b.n	8005128 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d103      	bne.n	800506e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005066:	f002 fafd 	bl	8007664 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800506a:	2300      	movs	r3, #0
 800506c:	e05c      	b.n	8005128 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800506e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005070:	2b00      	cmp	r3, #0
 8005072:	d106      	bne.n	8005082 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005074:	f107 0314 	add.w	r3, r7, #20
 8005078:	4618      	mov	r0, r3
 800507a:	f001 fafb 	bl	8006674 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800507e:	2301      	movs	r3, #1
 8005080:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005082:	f002 faef 	bl	8007664 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005086:	f001 f855 	bl	8006134 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800508a:	f002 fabb 	bl	8007604 <vPortEnterCritical>
 800508e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005090:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005094:	b25b      	sxtb	r3, r3
 8005096:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800509a:	d103      	bne.n	80050a4 <xQueueGenericSend+0x16c>
 800509c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800509e:	2200      	movs	r2, #0
 80050a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80050aa:	b25b      	sxtb	r3, r3
 80050ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80050b0:	d103      	bne.n	80050ba <xQueueGenericSend+0x182>
 80050b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050b4:	2200      	movs	r2, #0
 80050b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80050ba:	f002 fad3 	bl	8007664 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80050be:	1d3a      	adds	r2, r7, #4
 80050c0:	f107 0314 	add.w	r3, r7, #20
 80050c4:	4611      	mov	r1, r2
 80050c6:	4618      	mov	r0, r3
 80050c8:	f001 faea 	bl	80066a0 <xTaskCheckForTimeOut>
 80050cc:	4603      	mov	r3, r0
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d124      	bne.n	800511c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80050d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80050d4:	f000 fd31 	bl	8005b3a <prvIsQueueFull>
 80050d8:	4603      	mov	r3, r0
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d018      	beq.n	8005110 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80050de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050e0:	3310      	adds	r3, #16
 80050e2:	687a      	ldr	r2, [r7, #4]
 80050e4:	4611      	mov	r1, r2
 80050e6:	4618      	mov	r0, r3
 80050e8:	f001 fa10 	bl	800650c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80050ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80050ee:	f000 fcbc 	bl	8005a6a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80050f2:	f001 f82d 	bl	8006150 <xTaskResumeAll>
 80050f6:	4603      	mov	r3, r0
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	f47f af7c 	bne.w	8004ff6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80050fe:	4b0c      	ldr	r3, [pc, #48]	; (8005130 <xQueueGenericSend+0x1f8>)
 8005100:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005104:	601a      	str	r2, [r3, #0]
 8005106:	f3bf 8f4f 	dsb	sy
 800510a:	f3bf 8f6f 	isb	sy
 800510e:	e772      	b.n	8004ff6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005110:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005112:	f000 fcaa 	bl	8005a6a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005116:	f001 f81b 	bl	8006150 <xTaskResumeAll>
 800511a:	e76c      	b.n	8004ff6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800511c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800511e:	f000 fca4 	bl	8005a6a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005122:	f001 f815 	bl	8006150 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005126:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005128:	4618      	mov	r0, r3
 800512a:	3738      	adds	r7, #56	; 0x38
 800512c:	46bd      	mov	sp, r7
 800512e:	bd80      	pop	{r7, pc}
 8005130:	e000ed04 	.word	0xe000ed04

08005134 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b090      	sub	sp, #64	; 0x40
 8005138:	af00      	add	r7, sp, #0
 800513a:	60f8      	str	r0, [r7, #12]
 800513c:	60b9      	str	r1, [r7, #8]
 800513e:	607a      	str	r2, [r7, #4]
 8005140:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005148:	2b00      	cmp	r3, #0
 800514a:	d10a      	bne.n	8005162 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800514c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005150:	f383 8811 	msr	BASEPRI, r3
 8005154:	f3bf 8f6f 	isb	sy
 8005158:	f3bf 8f4f 	dsb	sy
 800515c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800515e:	bf00      	nop
 8005160:	e7fe      	b.n	8005160 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d103      	bne.n	8005170 <xQueueGenericSendFromISR+0x3c>
 8005168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800516a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800516c:	2b00      	cmp	r3, #0
 800516e:	d101      	bne.n	8005174 <xQueueGenericSendFromISR+0x40>
 8005170:	2301      	movs	r3, #1
 8005172:	e000      	b.n	8005176 <xQueueGenericSendFromISR+0x42>
 8005174:	2300      	movs	r3, #0
 8005176:	2b00      	cmp	r3, #0
 8005178:	d10a      	bne.n	8005190 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800517a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800517e:	f383 8811 	msr	BASEPRI, r3
 8005182:	f3bf 8f6f 	isb	sy
 8005186:	f3bf 8f4f 	dsb	sy
 800518a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800518c:	bf00      	nop
 800518e:	e7fe      	b.n	800518e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	2b02      	cmp	r3, #2
 8005194:	d103      	bne.n	800519e <xQueueGenericSendFromISR+0x6a>
 8005196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005198:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800519a:	2b01      	cmp	r3, #1
 800519c:	d101      	bne.n	80051a2 <xQueueGenericSendFromISR+0x6e>
 800519e:	2301      	movs	r3, #1
 80051a0:	e000      	b.n	80051a4 <xQueueGenericSendFromISR+0x70>
 80051a2:	2300      	movs	r3, #0
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d10a      	bne.n	80051be <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80051a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ac:	f383 8811 	msr	BASEPRI, r3
 80051b0:	f3bf 8f6f 	isb	sy
 80051b4:	f3bf 8f4f 	dsb	sy
 80051b8:	623b      	str	r3, [r7, #32]
}
 80051ba:	bf00      	nop
 80051bc:	e7fe      	b.n	80051bc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80051be:	f002 fb03 	bl	80077c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80051c2:	f3ef 8211 	mrs	r2, BASEPRI
 80051c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ca:	f383 8811 	msr	BASEPRI, r3
 80051ce:	f3bf 8f6f 	isb	sy
 80051d2:	f3bf 8f4f 	dsb	sy
 80051d6:	61fa      	str	r2, [r7, #28]
 80051d8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80051da:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80051dc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80051de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051e6:	429a      	cmp	r2, r3
 80051e8:	d302      	bcc.n	80051f0 <xQueueGenericSendFromISR+0xbc>
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	2b02      	cmp	r3, #2
 80051ee:	d12f      	bne.n	8005250 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80051f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80051f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80051fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051fe:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005200:	683a      	ldr	r2, [r7, #0]
 8005202:	68b9      	ldr	r1, [r7, #8]
 8005204:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005206:	f000 fba0 	bl	800594a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800520a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800520e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005212:	d112      	bne.n	800523a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005218:	2b00      	cmp	r3, #0
 800521a:	d016      	beq.n	800524a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800521c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800521e:	3324      	adds	r3, #36	; 0x24
 8005220:	4618      	mov	r0, r3
 8005222:	f001 f9c3 	bl	80065ac <xTaskRemoveFromEventList>
 8005226:	4603      	mov	r3, r0
 8005228:	2b00      	cmp	r3, #0
 800522a:	d00e      	beq.n	800524a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d00b      	beq.n	800524a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2201      	movs	r2, #1
 8005236:	601a      	str	r2, [r3, #0]
 8005238:	e007      	b.n	800524a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800523a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800523e:	3301      	adds	r3, #1
 8005240:	b2db      	uxtb	r3, r3
 8005242:	b25a      	sxtb	r2, r3
 8005244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005246:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800524a:	2301      	movs	r3, #1
 800524c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800524e:	e001      	b.n	8005254 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005250:	2300      	movs	r3, #0
 8005252:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005254:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005256:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800525e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005260:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005262:	4618      	mov	r0, r3
 8005264:	3740      	adds	r7, #64	; 0x40
 8005266:	46bd      	mov	sp, r7
 8005268:	bd80      	pop	{r7, pc}

0800526a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800526a:	b580      	push	{r7, lr}
 800526c:	b08e      	sub	sp, #56	; 0x38
 800526e:	af00      	add	r7, sp, #0
 8005270:	6078      	str	r0, [r7, #4]
 8005272:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800527a:	2b00      	cmp	r3, #0
 800527c:	d10a      	bne.n	8005294 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800527e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005282:	f383 8811 	msr	BASEPRI, r3
 8005286:	f3bf 8f6f 	isb	sy
 800528a:	f3bf 8f4f 	dsb	sy
 800528e:	623b      	str	r3, [r7, #32]
}
 8005290:	bf00      	nop
 8005292:	e7fe      	b.n	8005292 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005298:	2b00      	cmp	r3, #0
 800529a:	d00a      	beq.n	80052b2 <xQueueGiveFromISR+0x48>
	__asm volatile
 800529c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052a0:	f383 8811 	msr	BASEPRI, r3
 80052a4:	f3bf 8f6f 	isb	sy
 80052a8:	f3bf 8f4f 	dsb	sy
 80052ac:	61fb      	str	r3, [r7, #28]
}
 80052ae:	bf00      	nop
 80052b0:	e7fe      	b.n	80052b0 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80052b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d103      	bne.n	80052c2 <xQueueGiveFromISR+0x58>
 80052ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052bc:	689b      	ldr	r3, [r3, #8]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d101      	bne.n	80052c6 <xQueueGiveFromISR+0x5c>
 80052c2:	2301      	movs	r3, #1
 80052c4:	e000      	b.n	80052c8 <xQueueGiveFromISR+0x5e>
 80052c6:	2300      	movs	r3, #0
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d10a      	bne.n	80052e2 <xQueueGiveFromISR+0x78>
	__asm volatile
 80052cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052d0:	f383 8811 	msr	BASEPRI, r3
 80052d4:	f3bf 8f6f 	isb	sy
 80052d8:	f3bf 8f4f 	dsb	sy
 80052dc:	61bb      	str	r3, [r7, #24]
}
 80052de:	bf00      	nop
 80052e0:	e7fe      	b.n	80052e0 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80052e2:	f002 fa71 	bl	80077c8 <vPortValidateInterruptPriority>
	__asm volatile
 80052e6:	f3ef 8211 	mrs	r2, BASEPRI
 80052ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ee:	f383 8811 	msr	BASEPRI, r3
 80052f2:	f3bf 8f6f 	isb	sy
 80052f6:	f3bf 8f4f 	dsb	sy
 80052fa:	617a      	str	r2, [r7, #20]
 80052fc:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80052fe:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005300:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005306:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800530a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800530c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800530e:	429a      	cmp	r2, r3
 8005310:	d22b      	bcs.n	800536a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005314:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005318:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800531c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800531e:	1c5a      	adds	r2, r3, #1
 8005320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005322:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005324:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005328:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800532c:	d112      	bne.n	8005354 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800532e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005332:	2b00      	cmp	r3, #0
 8005334:	d016      	beq.n	8005364 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005338:	3324      	adds	r3, #36	; 0x24
 800533a:	4618      	mov	r0, r3
 800533c:	f001 f936 	bl	80065ac <xTaskRemoveFromEventList>
 8005340:	4603      	mov	r3, r0
 8005342:	2b00      	cmp	r3, #0
 8005344:	d00e      	beq.n	8005364 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d00b      	beq.n	8005364 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	2201      	movs	r2, #1
 8005350:	601a      	str	r2, [r3, #0]
 8005352:	e007      	b.n	8005364 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005354:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005358:	3301      	adds	r3, #1
 800535a:	b2db      	uxtb	r3, r3
 800535c:	b25a      	sxtb	r2, r3
 800535e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005360:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005364:	2301      	movs	r3, #1
 8005366:	637b      	str	r3, [r7, #52]	; 0x34
 8005368:	e001      	b.n	800536e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800536a:	2300      	movs	r3, #0
 800536c:	637b      	str	r3, [r7, #52]	; 0x34
 800536e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005370:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	f383 8811 	msr	BASEPRI, r3
}
 8005378:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800537a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800537c:	4618      	mov	r0, r3
 800537e:	3738      	adds	r7, #56	; 0x38
 8005380:	46bd      	mov	sp, r7
 8005382:	bd80      	pop	{r7, pc}

08005384 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b08c      	sub	sp, #48	; 0x30
 8005388:	af00      	add	r7, sp, #0
 800538a:	60f8      	str	r0, [r7, #12]
 800538c:	60b9      	str	r1, [r7, #8]
 800538e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005390:	2300      	movs	r3, #0
 8005392:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800539a:	2b00      	cmp	r3, #0
 800539c:	d10a      	bne.n	80053b4 <xQueueReceive+0x30>
	__asm volatile
 800539e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053a2:	f383 8811 	msr	BASEPRI, r3
 80053a6:	f3bf 8f6f 	isb	sy
 80053aa:	f3bf 8f4f 	dsb	sy
 80053ae:	623b      	str	r3, [r7, #32]
}
 80053b0:	bf00      	nop
 80053b2:	e7fe      	b.n	80053b2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d103      	bne.n	80053c2 <xQueueReceive+0x3e>
 80053ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d101      	bne.n	80053c6 <xQueueReceive+0x42>
 80053c2:	2301      	movs	r3, #1
 80053c4:	e000      	b.n	80053c8 <xQueueReceive+0x44>
 80053c6:	2300      	movs	r3, #0
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d10a      	bne.n	80053e2 <xQueueReceive+0x5e>
	__asm volatile
 80053cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053d0:	f383 8811 	msr	BASEPRI, r3
 80053d4:	f3bf 8f6f 	isb	sy
 80053d8:	f3bf 8f4f 	dsb	sy
 80053dc:	61fb      	str	r3, [r7, #28]
}
 80053de:	bf00      	nop
 80053e0:	e7fe      	b.n	80053e0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80053e2:	f001 fab5 	bl	8006950 <xTaskGetSchedulerState>
 80053e6:	4603      	mov	r3, r0
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d102      	bne.n	80053f2 <xQueueReceive+0x6e>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d101      	bne.n	80053f6 <xQueueReceive+0x72>
 80053f2:	2301      	movs	r3, #1
 80053f4:	e000      	b.n	80053f8 <xQueueReceive+0x74>
 80053f6:	2300      	movs	r3, #0
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d10a      	bne.n	8005412 <xQueueReceive+0x8e>
	__asm volatile
 80053fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005400:	f383 8811 	msr	BASEPRI, r3
 8005404:	f3bf 8f6f 	isb	sy
 8005408:	f3bf 8f4f 	dsb	sy
 800540c:	61bb      	str	r3, [r7, #24]
}
 800540e:	bf00      	nop
 8005410:	e7fe      	b.n	8005410 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005412:	f002 f8f7 	bl	8007604 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800541a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800541c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800541e:	2b00      	cmp	r3, #0
 8005420:	d01f      	beq.n	8005462 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005422:	68b9      	ldr	r1, [r7, #8]
 8005424:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005426:	f000 fafa 	bl	8005a1e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800542a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800542c:	1e5a      	subs	r2, r3, #1
 800542e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005430:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005434:	691b      	ldr	r3, [r3, #16]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d00f      	beq.n	800545a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800543a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800543c:	3310      	adds	r3, #16
 800543e:	4618      	mov	r0, r3
 8005440:	f001 f8b4 	bl	80065ac <xTaskRemoveFromEventList>
 8005444:	4603      	mov	r3, r0
 8005446:	2b00      	cmp	r3, #0
 8005448:	d007      	beq.n	800545a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800544a:	4b3d      	ldr	r3, [pc, #244]	; (8005540 <xQueueReceive+0x1bc>)
 800544c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005450:	601a      	str	r2, [r3, #0]
 8005452:	f3bf 8f4f 	dsb	sy
 8005456:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800545a:	f002 f903 	bl	8007664 <vPortExitCritical>
				return pdPASS;
 800545e:	2301      	movs	r3, #1
 8005460:	e069      	b.n	8005536 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d103      	bne.n	8005470 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005468:	f002 f8fc 	bl	8007664 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800546c:	2300      	movs	r3, #0
 800546e:	e062      	b.n	8005536 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005472:	2b00      	cmp	r3, #0
 8005474:	d106      	bne.n	8005484 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005476:	f107 0310 	add.w	r3, r7, #16
 800547a:	4618      	mov	r0, r3
 800547c:	f001 f8fa 	bl	8006674 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005480:	2301      	movs	r3, #1
 8005482:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005484:	f002 f8ee 	bl	8007664 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005488:	f000 fe54 	bl	8006134 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800548c:	f002 f8ba 	bl	8007604 <vPortEnterCritical>
 8005490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005492:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005496:	b25b      	sxtb	r3, r3
 8005498:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800549c:	d103      	bne.n	80054a6 <xQueueReceive+0x122>
 800549e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054a0:	2200      	movs	r2, #0
 80054a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80054ac:	b25b      	sxtb	r3, r3
 80054ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054b2:	d103      	bne.n	80054bc <xQueueReceive+0x138>
 80054b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054b6:	2200      	movs	r2, #0
 80054b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80054bc:	f002 f8d2 	bl	8007664 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80054c0:	1d3a      	adds	r2, r7, #4
 80054c2:	f107 0310 	add.w	r3, r7, #16
 80054c6:	4611      	mov	r1, r2
 80054c8:	4618      	mov	r0, r3
 80054ca:	f001 f8e9 	bl	80066a0 <xTaskCheckForTimeOut>
 80054ce:	4603      	mov	r3, r0
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d123      	bne.n	800551c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80054d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80054d6:	f000 fb1a 	bl	8005b0e <prvIsQueueEmpty>
 80054da:	4603      	mov	r3, r0
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d017      	beq.n	8005510 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80054e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054e2:	3324      	adds	r3, #36	; 0x24
 80054e4:	687a      	ldr	r2, [r7, #4]
 80054e6:	4611      	mov	r1, r2
 80054e8:	4618      	mov	r0, r3
 80054ea:	f001 f80f 	bl	800650c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80054ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80054f0:	f000 fabb 	bl	8005a6a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80054f4:	f000 fe2c 	bl	8006150 <xTaskResumeAll>
 80054f8:	4603      	mov	r3, r0
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d189      	bne.n	8005412 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80054fe:	4b10      	ldr	r3, [pc, #64]	; (8005540 <xQueueReceive+0x1bc>)
 8005500:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005504:	601a      	str	r2, [r3, #0]
 8005506:	f3bf 8f4f 	dsb	sy
 800550a:	f3bf 8f6f 	isb	sy
 800550e:	e780      	b.n	8005412 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005510:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005512:	f000 faaa 	bl	8005a6a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005516:	f000 fe1b 	bl	8006150 <xTaskResumeAll>
 800551a:	e77a      	b.n	8005412 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800551c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800551e:	f000 faa4 	bl	8005a6a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005522:	f000 fe15 	bl	8006150 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005526:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005528:	f000 faf1 	bl	8005b0e <prvIsQueueEmpty>
 800552c:	4603      	mov	r3, r0
 800552e:	2b00      	cmp	r3, #0
 8005530:	f43f af6f 	beq.w	8005412 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005534:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005536:	4618      	mov	r0, r3
 8005538:	3730      	adds	r7, #48	; 0x30
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}
 800553e:	bf00      	nop
 8005540:	e000ed04 	.word	0xe000ed04

08005544 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b08e      	sub	sp, #56	; 0x38
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
 800554c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800554e:	2300      	movs	r3, #0
 8005550:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005556:	2300      	movs	r3, #0
 8005558:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800555a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800555c:	2b00      	cmp	r3, #0
 800555e:	d10a      	bne.n	8005576 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8005560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005564:	f383 8811 	msr	BASEPRI, r3
 8005568:	f3bf 8f6f 	isb	sy
 800556c:	f3bf 8f4f 	dsb	sy
 8005570:	623b      	str	r3, [r7, #32]
}
 8005572:	bf00      	nop
 8005574:	e7fe      	b.n	8005574 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800557a:	2b00      	cmp	r3, #0
 800557c:	d00a      	beq.n	8005594 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800557e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005582:	f383 8811 	msr	BASEPRI, r3
 8005586:	f3bf 8f6f 	isb	sy
 800558a:	f3bf 8f4f 	dsb	sy
 800558e:	61fb      	str	r3, [r7, #28]
}
 8005590:	bf00      	nop
 8005592:	e7fe      	b.n	8005592 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005594:	f001 f9dc 	bl	8006950 <xTaskGetSchedulerState>
 8005598:	4603      	mov	r3, r0
 800559a:	2b00      	cmp	r3, #0
 800559c:	d102      	bne.n	80055a4 <xQueueSemaphoreTake+0x60>
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d101      	bne.n	80055a8 <xQueueSemaphoreTake+0x64>
 80055a4:	2301      	movs	r3, #1
 80055a6:	e000      	b.n	80055aa <xQueueSemaphoreTake+0x66>
 80055a8:	2300      	movs	r3, #0
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d10a      	bne.n	80055c4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80055ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055b2:	f383 8811 	msr	BASEPRI, r3
 80055b6:	f3bf 8f6f 	isb	sy
 80055ba:	f3bf 8f4f 	dsb	sy
 80055be:	61bb      	str	r3, [r7, #24]
}
 80055c0:	bf00      	nop
 80055c2:	e7fe      	b.n	80055c2 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80055c4:	f002 f81e 	bl	8007604 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80055c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055cc:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80055ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d024      	beq.n	800561e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80055d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055d6:	1e5a      	subs	r2, r3, #1
 80055d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055da:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80055dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d104      	bne.n	80055ee <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80055e4:	f001 fb2a 	bl	8006c3c <pvTaskIncrementMutexHeldCount>
 80055e8:	4602      	mov	r2, r0
 80055ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055ec:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80055ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055f0:	691b      	ldr	r3, [r3, #16]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d00f      	beq.n	8005616 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80055f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055f8:	3310      	adds	r3, #16
 80055fa:	4618      	mov	r0, r3
 80055fc:	f000 ffd6 	bl	80065ac <xTaskRemoveFromEventList>
 8005600:	4603      	mov	r3, r0
 8005602:	2b00      	cmp	r3, #0
 8005604:	d007      	beq.n	8005616 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005606:	4b54      	ldr	r3, [pc, #336]	; (8005758 <xQueueSemaphoreTake+0x214>)
 8005608:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800560c:	601a      	str	r2, [r3, #0]
 800560e:	f3bf 8f4f 	dsb	sy
 8005612:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005616:	f002 f825 	bl	8007664 <vPortExitCritical>
				return pdPASS;
 800561a:	2301      	movs	r3, #1
 800561c:	e097      	b.n	800574e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d111      	bne.n	8005648 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005626:	2b00      	cmp	r3, #0
 8005628:	d00a      	beq.n	8005640 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800562a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800562e:	f383 8811 	msr	BASEPRI, r3
 8005632:	f3bf 8f6f 	isb	sy
 8005636:	f3bf 8f4f 	dsb	sy
 800563a:	617b      	str	r3, [r7, #20]
}
 800563c:	bf00      	nop
 800563e:	e7fe      	b.n	800563e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005640:	f002 f810 	bl	8007664 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005644:	2300      	movs	r3, #0
 8005646:	e082      	b.n	800574e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005648:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800564a:	2b00      	cmp	r3, #0
 800564c:	d106      	bne.n	800565c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800564e:	f107 030c 	add.w	r3, r7, #12
 8005652:	4618      	mov	r0, r3
 8005654:	f001 f80e 	bl	8006674 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005658:	2301      	movs	r3, #1
 800565a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800565c:	f002 f802 	bl	8007664 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005660:	f000 fd68 	bl	8006134 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005664:	f001 ffce 	bl	8007604 <vPortEnterCritical>
 8005668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800566a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800566e:	b25b      	sxtb	r3, r3
 8005670:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005674:	d103      	bne.n	800567e <xQueueSemaphoreTake+0x13a>
 8005676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005678:	2200      	movs	r2, #0
 800567a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800567e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005680:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005684:	b25b      	sxtb	r3, r3
 8005686:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800568a:	d103      	bne.n	8005694 <xQueueSemaphoreTake+0x150>
 800568c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800568e:	2200      	movs	r2, #0
 8005690:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005694:	f001 ffe6 	bl	8007664 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005698:	463a      	mov	r2, r7
 800569a:	f107 030c 	add.w	r3, r7, #12
 800569e:	4611      	mov	r1, r2
 80056a0:	4618      	mov	r0, r3
 80056a2:	f000 fffd 	bl	80066a0 <xTaskCheckForTimeOut>
 80056a6:	4603      	mov	r3, r0
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d132      	bne.n	8005712 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80056ac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80056ae:	f000 fa2e 	bl	8005b0e <prvIsQueueEmpty>
 80056b2:	4603      	mov	r3, r0
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d026      	beq.n	8005706 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80056b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d109      	bne.n	80056d4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80056c0:	f001 ffa0 	bl	8007604 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80056c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056c6:	689b      	ldr	r3, [r3, #8]
 80056c8:	4618      	mov	r0, r3
 80056ca:	f001 f95f 	bl	800698c <xTaskPriorityInherit>
 80056ce:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80056d0:	f001 ffc8 	bl	8007664 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80056d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056d6:	3324      	adds	r3, #36	; 0x24
 80056d8:	683a      	ldr	r2, [r7, #0]
 80056da:	4611      	mov	r1, r2
 80056dc:	4618      	mov	r0, r3
 80056de:	f000 ff15 	bl	800650c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80056e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80056e4:	f000 f9c1 	bl	8005a6a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80056e8:	f000 fd32 	bl	8006150 <xTaskResumeAll>
 80056ec:	4603      	mov	r3, r0
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	f47f af68 	bne.w	80055c4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80056f4:	4b18      	ldr	r3, [pc, #96]	; (8005758 <xQueueSemaphoreTake+0x214>)
 80056f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056fa:	601a      	str	r2, [r3, #0]
 80056fc:	f3bf 8f4f 	dsb	sy
 8005700:	f3bf 8f6f 	isb	sy
 8005704:	e75e      	b.n	80055c4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005706:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005708:	f000 f9af 	bl	8005a6a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800570c:	f000 fd20 	bl	8006150 <xTaskResumeAll>
 8005710:	e758      	b.n	80055c4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005712:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005714:	f000 f9a9 	bl	8005a6a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005718:	f000 fd1a 	bl	8006150 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800571c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800571e:	f000 f9f6 	bl	8005b0e <prvIsQueueEmpty>
 8005722:	4603      	mov	r3, r0
 8005724:	2b00      	cmp	r3, #0
 8005726:	f43f af4d 	beq.w	80055c4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800572a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800572c:	2b00      	cmp	r3, #0
 800572e:	d00d      	beq.n	800574c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8005730:	f001 ff68 	bl	8007604 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005734:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005736:	f000 f8f0 	bl	800591a <prvGetDisinheritPriorityAfterTimeout>
 800573a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800573c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800573e:	689b      	ldr	r3, [r3, #8]
 8005740:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005742:	4618      	mov	r0, r3
 8005744:	f001 f9f8 	bl	8006b38 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005748:	f001 ff8c 	bl	8007664 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800574c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800574e:	4618      	mov	r0, r3
 8005750:	3738      	adds	r7, #56	; 0x38
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}
 8005756:	bf00      	nop
 8005758:	e000ed04 	.word	0xe000ed04

0800575c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b08e      	sub	sp, #56	; 0x38
 8005760:	af00      	add	r7, sp, #0
 8005762:	60f8      	str	r0, [r7, #12]
 8005764:	60b9      	str	r1, [r7, #8]
 8005766:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800576c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800576e:	2b00      	cmp	r3, #0
 8005770:	d10a      	bne.n	8005788 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8005772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005776:	f383 8811 	msr	BASEPRI, r3
 800577a:	f3bf 8f6f 	isb	sy
 800577e:	f3bf 8f4f 	dsb	sy
 8005782:	623b      	str	r3, [r7, #32]
}
 8005784:	bf00      	nop
 8005786:	e7fe      	b.n	8005786 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d103      	bne.n	8005796 <xQueueReceiveFromISR+0x3a>
 800578e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005792:	2b00      	cmp	r3, #0
 8005794:	d101      	bne.n	800579a <xQueueReceiveFromISR+0x3e>
 8005796:	2301      	movs	r3, #1
 8005798:	e000      	b.n	800579c <xQueueReceiveFromISR+0x40>
 800579a:	2300      	movs	r3, #0
 800579c:	2b00      	cmp	r3, #0
 800579e:	d10a      	bne.n	80057b6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80057a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057a4:	f383 8811 	msr	BASEPRI, r3
 80057a8:	f3bf 8f6f 	isb	sy
 80057ac:	f3bf 8f4f 	dsb	sy
 80057b0:	61fb      	str	r3, [r7, #28]
}
 80057b2:	bf00      	nop
 80057b4:	e7fe      	b.n	80057b4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80057b6:	f002 f807 	bl	80077c8 <vPortValidateInterruptPriority>
	__asm volatile
 80057ba:	f3ef 8211 	mrs	r2, BASEPRI
 80057be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057c2:	f383 8811 	msr	BASEPRI, r3
 80057c6:	f3bf 8f6f 	isb	sy
 80057ca:	f3bf 8f4f 	dsb	sy
 80057ce:	61ba      	str	r2, [r7, #24]
 80057d0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80057d2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80057d4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80057d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057da:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80057dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d02f      	beq.n	8005842 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80057e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80057e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80057ec:	68b9      	ldr	r1, [r7, #8]
 80057ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80057f0:	f000 f915 	bl	8005a1e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80057f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057f6:	1e5a      	subs	r2, r3, #1
 80057f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057fa:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80057fc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005800:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005804:	d112      	bne.n	800582c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005808:	691b      	ldr	r3, [r3, #16]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d016      	beq.n	800583c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800580e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005810:	3310      	adds	r3, #16
 8005812:	4618      	mov	r0, r3
 8005814:	f000 feca 	bl	80065ac <xTaskRemoveFromEventList>
 8005818:	4603      	mov	r3, r0
 800581a:	2b00      	cmp	r3, #0
 800581c:	d00e      	beq.n	800583c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d00b      	beq.n	800583c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2201      	movs	r2, #1
 8005828:	601a      	str	r2, [r3, #0]
 800582a:	e007      	b.n	800583c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800582c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005830:	3301      	adds	r3, #1
 8005832:	b2db      	uxtb	r3, r3
 8005834:	b25a      	sxtb	r2, r3
 8005836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005838:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800583c:	2301      	movs	r3, #1
 800583e:	637b      	str	r3, [r7, #52]	; 0x34
 8005840:	e001      	b.n	8005846 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8005842:	2300      	movs	r3, #0
 8005844:	637b      	str	r3, [r7, #52]	; 0x34
 8005846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005848:	613b      	str	r3, [r7, #16]
	__asm volatile
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	f383 8811 	msr	BASEPRI, r3
}
 8005850:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005852:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005854:	4618      	mov	r0, r3
 8005856:	3738      	adds	r7, #56	; 0x38
 8005858:	46bd      	mov	sp, r7
 800585a:	bd80      	pop	{r7, pc}

0800585c <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b084      	sub	sp, #16
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d10a      	bne.n	8005880 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 800586a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800586e:	f383 8811 	msr	BASEPRI, r3
 8005872:	f3bf 8f6f 	isb	sy
 8005876:	f3bf 8f4f 	dsb	sy
 800587a:	60bb      	str	r3, [r7, #8]
}
 800587c:	bf00      	nop
 800587e:	e7fe      	b.n	800587e <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8005880:	f001 fec0 	bl	8007604 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005888:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800588a:	f001 feeb 	bl	8007664 <vPortExitCritical>

	return uxReturn;
 800588e:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8005890:	4618      	mov	r0, r3
 8005892:	3710      	adds	r7, #16
 8005894:	46bd      	mov	sp, r7
 8005896:	bd80      	pop	{r7, pc}

08005898 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8005898:	b480      	push	{r7}
 800589a:	b087      	sub	sp, #28
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d10a      	bne.n	80058c0 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 80058aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ae:	f383 8811 	msr	BASEPRI, r3
 80058b2:	f3bf 8f6f 	isb	sy
 80058b6:	f3bf 8f4f 	dsb	sy
 80058ba:	60fb      	str	r3, [r7, #12]
}
 80058bc:	bf00      	nop
 80058be:	e7fe      	b.n	80058be <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 80058c0:	697b      	ldr	r3, [r7, #20]
 80058c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058c4:	613b      	str	r3, [r7, #16]

	return uxReturn;
 80058c6:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80058c8:	4618      	mov	r0, r3
 80058ca:	371c      	adds	r7, #28
 80058cc:	46bd      	mov	sp, r7
 80058ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d2:	4770      	bx	lr

080058d4 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b084      	sub	sp, #16
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d10a      	bne.n	80058fc <vQueueDelete+0x28>
	__asm volatile
 80058e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ea:	f383 8811 	msr	BASEPRI, r3
 80058ee:	f3bf 8f6f 	isb	sy
 80058f2:	f3bf 8f4f 	dsb	sy
 80058f6:	60bb      	str	r3, [r7, #8]
}
 80058f8:	bf00      	nop
 80058fa:	e7fe      	b.n	80058fa <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80058fc:	68f8      	ldr	r0, [r7, #12]
 80058fe:	f000 f95f 	bl	8005bc0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005908:	2b00      	cmp	r3, #0
 800590a:	d102      	bne.n	8005912 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800590c:	68f8      	ldr	r0, [r7, #12]
 800590e:	f002 f867 	bl	80079e0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8005912:	bf00      	nop
 8005914:	3710      	adds	r7, #16
 8005916:	46bd      	mov	sp, r7
 8005918:	bd80      	pop	{r7, pc}

0800591a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800591a:	b480      	push	{r7}
 800591c:	b085      	sub	sp, #20
 800591e:	af00      	add	r7, sp, #0
 8005920:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005926:	2b00      	cmp	r3, #0
 8005928:	d006      	beq.n	8005938 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8005934:	60fb      	str	r3, [r7, #12]
 8005936:	e001      	b.n	800593c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005938:	2300      	movs	r3, #0
 800593a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800593c:	68fb      	ldr	r3, [r7, #12]
	}
 800593e:	4618      	mov	r0, r3
 8005940:	3714      	adds	r7, #20
 8005942:	46bd      	mov	sp, r7
 8005944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005948:	4770      	bx	lr

0800594a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800594a:	b580      	push	{r7, lr}
 800594c:	b086      	sub	sp, #24
 800594e:	af00      	add	r7, sp, #0
 8005950:	60f8      	str	r0, [r7, #12]
 8005952:	60b9      	str	r1, [r7, #8]
 8005954:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005956:	2300      	movs	r3, #0
 8005958:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800595e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005964:	2b00      	cmp	r3, #0
 8005966:	d10d      	bne.n	8005984 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d14d      	bne.n	8005a0c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	689b      	ldr	r3, [r3, #8]
 8005974:	4618      	mov	r0, r3
 8005976:	f001 f871 	bl	8006a5c <xTaskPriorityDisinherit>
 800597a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2200      	movs	r2, #0
 8005980:	609a      	str	r2, [r3, #8]
 8005982:	e043      	b.n	8005a0c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d119      	bne.n	80059be <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	6858      	ldr	r0, [r3, #4]
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005992:	461a      	mov	r2, r3
 8005994:	68b9      	ldr	r1, [r7, #8]
 8005996:	f00f fd00 	bl	801539a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	685a      	ldr	r2, [r3, #4]
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059a2:	441a      	add	r2, r3
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	685a      	ldr	r2, [r3, #4]
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	689b      	ldr	r3, [r3, #8]
 80059b0:	429a      	cmp	r2, r3
 80059b2:	d32b      	bcc.n	8005a0c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681a      	ldr	r2, [r3, #0]
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	605a      	str	r2, [r3, #4]
 80059bc:	e026      	b.n	8005a0c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	68d8      	ldr	r0, [r3, #12]
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059c6:	461a      	mov	r2, r3
 80059c8:	68b9      	ldr	r1, [r7, #8]
 80059ca:	f00f fce6 	bl	801539a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	68da      	ldr	r2, [r3, #12]
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059d6:	425b      	negs	r3, r3
 80059d8:	441a      	add	r2, r3
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	68da      	ldr	r2, [r3, #12]
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	429a      	cmp	r2, r3
 80059e8:	d207      	bcs.n	80059fa <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	689a      	ldr	r2, [r3, #8]
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059f2:	425b      	negs	r3, r3
 80059f4:	441a      	add	r2, r3
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2b02      	cmp	r3, #2
 80059fe:	d105      	bne.n	8005a0c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005a00:	693b      	ldr	r3, [r7, #16]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d002      	beq.n	8005a0c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005a06:	693b      	ldr	r3, [r7, #16]
 8005a08:	3b01      	subs	r3, #1
 8005a0a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005a0c:	693b      	ldr	r3, [r7, #16]
 8005a0e:	1c5a      	adds	r2, r3, #1
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005a14:	697b      	ldr	r3, [r7, #20]
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	3718      	adds	r7, #24
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}

08005a1e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005a1e:	b580      	push	{r7, lr}
 8005a20:	b082      	sub	sp, #8
 8005a22:	af00      	add	r7, sp, #0
 8005a24:	6078      	str	r0, [r7, #4]
 8005a26:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d018      	beq.n	8005a62 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	68da      	ldr	r2, [r3, #12]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a38:	441a      	add	r2, r3
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	68da      	ldr	r2, [r3, #12]
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	689b      	ldr	r3, [r3, #8]
 8005a46:	429a      	cmp	r2, r3
 8005a48:	d303      	bcc.n	8005a52 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681a      	ldr	r2, [r3, #0]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	68d9      	ldr	r1, [r3, #12]
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a5a:	461a      	mov	r2, r3
 8005a5c:	6838      	ldr	r0, [r7, #0]
 8005a5e:	f00f fc9c 	bl	801539a <memcpy>
	}
}
 8005a62:	bf00      	nop
 8005a64:	3708      	adds	r7, #8
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bd80      	pop	{r7, pc}

08005a6a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005a6a:	b580      	push	{r7, lr}
 8005a6c:	b084      	sub	sp, #16
 8005a6e:	af00      	add	r7, sp, #0
 8005a70:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005a72:	f001 fdc7 	bl	8007604 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a7c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005a7e:	e011      	b.n	8005aa4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d012      	beq.n	8005aae <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	3324      	adds	r3, #36	; 0x24
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	f000 fd8d 	bl	80065ac <xTaskRemoveFromEventList>
 8005a92:	4603      	mov	r3, r0
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d001      	beq.n	8005a9c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005a98:	f000 fe64 	bl	8006764 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005a9c:	7bfb      	ldrb	r3, [r7, #15]
 8005a9e:	3b01      	subs	r3, #1
 8005aa0:	b2db      	uxtb	r3, r3
 8005aa2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005aa4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	dce9      	bgt.n	8005a80 <prvUnlockQueue+0x16>
 8005aac:	e000      	b.n	8005ab0 <prvUnlockQueue+0x46>
					break;
 8005aae:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	22ff      	movs	r2, #255	; 0xff
 8005ab4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005ab8:	f001 fdd4 	bl	8007664 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005abc:	f001 fda2 	bl	8007604 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005ac6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005ac8:	e011      	b.n	8005aee <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	691b      	ldr	r3, [r3, #16]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d012      	beq.n	8005af8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	3310      	adds	r3, #16
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	f000 fd68 	bl	80065ac <xTaskRemoveFromEventList>
 8005adc:	4603      	mov	r3, r0
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d001      	beq.n	8005ae6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005ae2:	f000 fe3f 	bl	8006764 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005ae6:	7bbb      	ldrb	r3, [r7, #14]
 8005ae8:	3b01      	subs	r3, #1
 8005aea:	b2db      	uxtb	r3, r3
 8005aec:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005aee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	dce9      	bgt.n	8005aca <prvUnlockQueue+0x60>
 8005af6:	e000      	b.n	8005afa <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005af8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	22ff      	movs	r2, #255	; 0xff
 8005afe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005b02:	f001 fdaf 	bl	8007664 <vPortExitCritical>
}
 8005b06:	bf00      	nop
 8005b08:	3710      	adds	r7, #16
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd80      	pop	{r7, pc}

08005b0e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005b0e:	b580      	push	{r7, lr}
 8005b10:	b084      	sub	sp, #16
 8005b12:	af00      	add	r7, sp, #0
 8005b14:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005b16:	f001 fd75 	bl	8007604 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d102      	bne.n	8005b28 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005b22:	2301      	movs	r3, #1
 8005b24:	60fb      	str	r3, [r7, #12]
 8005b26:	e001      	b.n	8005b2c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005b28:	2300      	movs	r3, #0
 8005b2a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005b2c:	f001 fd9a 	bl	8007664 <vPortExitCritical>

	return xReturn;
 8005b30:	68fb      	ldr	r3, [r7, #12]
}
 8005b32:	4618      	mov	r0, r3
 8005b34:	3710      	adds	r7, #16
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}

08005b3a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005b3a:	b580      	push	{r7, lr}
 8005b3c:	b084      	sub	sp, #16
 8005b3e:	af00      	add	r7, sp, #0
 8005b40:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005b42:	f001 fd5f 	bl	8007604 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b4e:	429a      	cmp	r2, r3
 8005b50:	d102      	bne.n	8005b58 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005b52:	2301      	movs	r3, #1
 8005b54:	60fb      	str	r3, [r7, #12]
 8005b56:	e001      	b.n	8005b5c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005b58:	2300      	movs	r3, #0
 8005b5a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005b5c:	f001 fd82 	bl	8007664 <vPortExitCritical>

	return xReturn;
 8005b60:	68fb      	ldr	r3, [r7, #12]
}
 8005b62:	4618      	mov	r0, r3
 8005b64:	3710      	adds	r7, #16
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}
	...

08005b6c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b085      	sub	sp, #20
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
 8005b74:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005b76:	2300      	movs	r3, #0
 8005b78:	60fb      	str	r3, [r7, #12]
 8005b7a:	e014      	b.n	8005ba6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005b7c:	4a0f      	ldr	r2, [pc, #60]	; (8005bbc <vQueueAddToRegistry+0x50>)
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d10b      	bne.n	8005ba0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005b88:	490c      	ldr	r1, [pc, #48]	; (8005bbc <vQueueAddToRegistry+0x50>)
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	683a      	ldr	r2, [r7, #0]
 8005b8e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005b92:	4a0a      	ldr	r2, [pc, #40]	; (8005bbc <vQueueAddToRegistry+0x50>)
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	00db      	lsls	r3, r3, #3
 8005b98:	4413      	add	r3, r2
 8005b9a:	687a      	ldr	r2, [r7, #4]
 8005b9c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005b9e:	e006      	b.n	8005bae <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	3301      	adds	r3, #1
 8005ba4:	60fb      	str	r3, [r7, #12]
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	2b07      	cmp	r3, #7
 8005baa:	d9e7      	bls.n	8005b7c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005bac:	bf00      	nop
 8005bae:	bf00      	nop
 8005bb0:	3714      	adds	r7, #20
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb8:	4770      	bx	lr
 8005bba:	bf00      	nop
 8005bbc:	2000864c 	.word	0x2000864c

08005bc0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8005bc0:	b480      	push	{r7}
 8005bc2:	b085      	sub	sp, #20
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005bc8:	2300      	movs	r3, #0
 8005bca:	60fb      	str	r3, [r7, #12]
 8005bcc:	e016      	b.n	8005bfc <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8005bce:	4a10      	ldr	r2, [pc, #64]	; (8005c10 <vQueueUnregisterQueue+0x50>)
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	00db      	lsls	r3, r3, #3
 8005bd4:	4413      	add	r3, r2
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	687a      	ldr	r2, [r7, #4]
 8005bda:	429a      	cmp	r2, r3
 8005bdc:	d10b      	bne.n	8005bf6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8005bde:	4a0c      	ldr	r2, [pc, #48]	; (8005c10 <vQueueUnregisterQueue+0x50>)
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	2100      	movs	r1, #0
 8005be4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8005be8:	4a09      	ldr	r2, [pc, #36]	; (8005c10 <vQueueUnregisterQueue+0x50>)
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	00db      	lsls	r3, r3, #3
 8005bee:	4413      	add	r3, r2
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	605a      	str	r2, [r3, #4]
				break;
 8005bf4:	e006      	b.n	8005c04 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	3301      	adds	r3, #1
 8005bfa:	60fb      	str	r3, [r7, #12]
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	2b07      	cmp	r3, #7
 8005c00:	d9e5      	bls.n	8005bce <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8005c02:	bf00      	nop
 8005c04:	bf00      	nop
 8005c06:	3714      	adds	r7, #20
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0e:	4770      	bx	lr
 8005c10:	2000864c 	.word	0x2000864c

08005c14 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b086      	sub	sp, #24
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	60f8      	str	r0, [r7, #12]
 8005c1c:	60b9      	str	r1, [r7, #8]
 8005c1e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005c24:	f001 fcee 	bl	8007604 <vPortEnterCritical>
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005c2e:	b25b      	sxtb	r3, r3
 8005c30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c34:	d103      	bne.n	8005c3e <vQueueWaitForMessageRestricted+0x2a>
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005c44:	b25b      	sxtb	r3, r3
 8005c46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c4a:	d103      	bne.n	8005c54 <vQueueWaitForMessageRestricted+0x40>
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005c54:	f001 fd06 	bl	8007664 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d106      	bne.n	8005c6e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	3324      	adds	r3, #36	; 0x24
 8005c64:	687a      	ldr	r2, [r7, #4]
 8005c66:	68b9      	ldr	r1, [r7, #8]
 8005c68:	4618      	mov	r0, r3
 8005c6a:	f000 fc73 	bl	8006554 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005c6e:	6978      	ldr	r0, [r7, #20]
 8005c70:	f7ff fefb 	bl	8005a6a <prvUnlockQueue>
	}
 8005c74:	bf00      	nop
 8005c76:	3718      	adds	r7, #24
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}

08005c7c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b08e      	sub	sp, #56	; 0x38
 8005c80:	af04      	add	r7, sp, #16
 8005c82:	60f8      	str	r0, [r7, #12]
 8005c84:	60b9      	str	r1, [r7, #8]
 8005c86:	607a      	str	r2, [r7, #4]
 8005c88:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005c8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d10a      	bne.n	8005ca6 <xTaskCreateStatic+0x2a>
	__asm volatile
 8005c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c94:	f383 8811 	msr	BASEPRI, r3
 8005c98:	f3bf 8f6f 	isb	sy
 8005c9c:	f3bf 8f4f 	dsb	sy
 8005ca0:	623b      	str	r3, [r7, #32]
}
 8005ca2:	bf00      	nop
 8005ca4:	e7fe      	b.n	8005ca4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d10a      	bne.n	8005cc2 <xTaskCreateStatic+0x46>
	__asm volatile
 8005cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cb0:	f383 8811 	msr	BASEPRI, r3
 8005cb4:	f3bf 8f6f 	isb	sy
 8005cb8:	f3bf 8f4f 	dsb	sy
 8005cbc:	61fb      	str	r3, [r7, #28]
}
 8005cbe:	bf00      	nop
 8005cc0:	e7fe      	b.n	8005cc0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005cc2:	23bc      	movs	r3, #188	; 0xbc
 8005cc4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	2bbc      	cmp	r3, #188	; 0xbc
 8005cca:	d00a      	beq.n	8005ce2 <xTaskCreateStatic+0x66>
	__asm volatile
 8005ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cd0:	f383 8811 	msr	BASEPRI, r3
 8005cd4:	f3bf 8f6f 	isb	sy
 8005cd8:	f3bf 8f4f 	dsb	sy
 8005cdc:	61bb      	str	r3, [r7, #24]
}
 8005cde:	bf00      	nop
 8005ce0:	e7fe      	b.n	8005ce0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005ce2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d01e      	beq.n	8005d28 <xTaskCreateStatic+0xac>
 8005cea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d01b      	beq.n	8005d28 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005cf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cf2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005cf8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cfc:	2202      	movs	r2, #2
 8005cfe:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005d02:	2300      	movs	r3, #0
 8005d04:	9303      	str	r3, [sp, #12]
 8005d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d08:	9302      	str	r3, [sp, #8]
 8005d0a:	f107 0314 	add.w	r3, r7, #20
 8005d0e:	9301      	str	r3, [sp, #4]
 8005d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d12:	9300      	str	r3, [sp, #0]
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	687a      	ldr	r2, [r7, #4]
 8005d18:	68b9      	ldr	r1, [r7, #8]
 8005d1a:	68f8      	ldr	r0, [r7, #12]
 8005d1c:	f000 f850 	bl	8005dc0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005d20:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005d22:	f000 f8f3 	bl	8005f0c <prvAddNewTaskToReadyList>
 8005d26:	e001      	b.n	8005d2c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005d28:	2300      	movs	r3, #0
 8005d2a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005d2c:	697b      	ldr	r3, [r7, #20]
	}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	3728      	adds	r7, #40	; 0x28
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}

08005d36 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005d36:	b580      	push	{r7, lr}
 8005d38:	b08c      	sub	sp, #48	; 0x30
 8005d3a:	af04      	add	r7, sp, #16
 8005d3c:	60f8      	str	r0, [r7, #12]
 8005d3e:	60b9      	str	r1, [r7, #8]
 8005d40:	603b      	str	r3, [r7, #0]
 8005d42:	4613      	mov	r3, r2
 8005d44:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005d46:	88fb      	ldrh	r3, [r7, #6]
 8005d48:	009b      	lsls	r3, r3, #2
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f001 fd7c 	bl	8007848 <pvPortMalloc>
 8005d50:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d00e      	beq.n	8005d76 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005d58:	20bc      	movs	r0, #188	; 0xbc
 8005d5a:	f001 fd75 	bl	8007848 <pvPortMalloc>
 8005d5e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005d60:	69fb      	ldr	r3, [r7, #28]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d003      	beq.n	8005d6e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005d66:	69fb      	ldr	r3, [r7, #28]
 8005d68:	697a      	ldr	r2, [r7, #20]
 8005d6a:	631a      	str	r2, [r3, #48]	; 0x30
 8005d6c:	e005      	b.n	8005d7a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005d6e:	6978      	ldr	r0, [r7, #20]
 8005d70:	f001 fe36 	bl	80079e0 <vPortFree>
 8005d74:	e001      	b.n	8005d7a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005d76:	2300      	movs	r3, #0
 8005d78:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005d7a:	69fb      	ldr	r3, [r7, #28]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d017      	beq.n	8005db0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005d80:	69fb      	ldr	r3, [r7, #28]
 8005d82:	2200      	movs	r2, #0
 8005d84:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005d88:	88fa      	ldrh	r2, [r7, #6]
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	9303      	str	r3, [sp, #12]
 8005d8e:	69fb      	ldr	r3, [r7, #28]
 8005d90:	9302      	str	r3, [sp, #8]
 8005d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d94:	9301      	str	r3, [sp, #4]
 8005d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d98:	9300      	str	r3, [sp, #0]
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	68b9      	ldr	r1, [r7, #8]
 8005d9e:	68f8      	ldr	r0, [r7, #12]
 8005da0:	f000 f80e 	bl	8005dc0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005da4:	69f8      	ldr	r0, [r7, #28]
 8005da6:	f000 f8b1 	bl	8005f0c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005daa:	2301      	movs	r3, #1
 8005dac:	61bb      	str	r3, [r7, #24]
 8005dae:	e002      	b.n	8005db6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005db0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005db4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005db6:	69bb      	ldr	r3, [r7, #24]
	}
 8005db8:	4618      	mov	r0, r3
 8005dba:	3720      	adds	r7, #32
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	bd80      	pop	{r7, pc}

08005dc0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b088      	sub	sp, #32
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	60f8      	str	r0, [r7, #12]
 8005dc8:	60b9      	str	r1, [r7, #8]
 8005dca:	607a      	str	r2, [r7, #4]
 8005dcc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dd0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	009b      	lsls	r3, r3, #2
 8005dd6:	461a      	mov	r2, r3
 8005dd8:	21a5      	movs	r1, #165	; 0xa5
 8005dda:	f00f faec 	bl	80153b6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005de0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005de8:	3b01      	subs	r3, #1
 8005dea:	009b      	lsls	r3, r3, #2
 8005dec:	4413      	add	r3, r2
 8005dee:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005df0:	69bb      	ldr	r3, [r7, #24]
 8005df2:	f023 0307 	bic.w	r3, r3, #7
 8005df6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005df8:	69bb      	ldr	r3, [r7, #24]
 8005dfa:	f003 0307 	and.w	r3, r3, #7
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d00a      	beq.n	8005e18 <prvInitialiseNewTask+0x58>
	__asm volatile
 8005e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e06:	f383 8811 	msr	BASEPRI, r3
 8005e0a:	f3bf 8f6f 	isb	sy
 8005e0e:	f3bf 8f4f 	dsb	sy
 8005e12:	617b      	str	r3, [r7, #20]
}
 8005e14:	bf00      	nop
 8005e16:	e7fe      	b.n	8005e16 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d01f      	beq.n	8005e5e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005e1e:	2300      	movs	r3, #0
 8005e20:	61fb      	str	r3, [r7, #28]
 8005e22:	e012      	b.n	8005e4a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005e24:	68ba      	ldr	r2, [r7, #8]
 8005e26:	69fb      	ldr	r3, [r7, #28]
 8005e28:	4413      	add	r3, r2
 8005e2a:	7819      	ldrb	r1, [r3, #0]
 8005e2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e2e:	69fb      	ldr	r3, [r7, #28]
 8005e30:	4413      	add	r3, r2
 8005e32:	3334      	adds	r3, #52	; 0x34
 8005e34:	460a      	mov	r2, r1
 8005e36:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005e38:	68ba      	ldr	r2, [r7, #8]
 8005e3a:	69fb      	ldr	r3, [r7, #28]
 8005e3c:	4413      	add	r3, r2
 8005e3e:	781b      	ldrb	r3, [r3, #0]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d006      	beq.n	8005e52 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005e44:	69fb      	ldr	r3, [r7, #28]
 8005e46:	3301      	adds	r3, #1
 8005e48:	61fb      	str	r3, [r7, #28]
 8005e4a:	69fb      	ldr	r3, [r7, #28]
 8005e4c:	2b0f      	cmp	r3, #15
 8005e4e:	d9e9      	bls.n	8005e24 <prvInitialiseNewTask+0x64>
 8005e50:	e000      	b.n	8005e54 <prvInitialiseNewTask+0x94>
			{
				break;
 8005e52:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e56:	2200      	movs	r2, #0
 8005e58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005e5c:	e003      	b.n	8005e66 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e60:	2200      	movs	r2, #0
 8005e62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e68:	2b37      	cmp	r3, #55	; 0x37
 8005e6a:	d901      	bls.n	8005e70 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005e6c:	2337      	movs	r3, #55	; 0x37
 8005e6e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e74:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e7a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e7e:	2200      	movs	r2, #0
 8005e80:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e84:	3304      	adds	r3, #4
 8005e86:	4618      	mov	r0, r3
 8005e88:	f7fe fd64 	bl	8004954 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e8e:	3318      	adds	r3, #24
 8005e90:	4618      	mov	r0, r3
 8005e92:	f7fe fd5f 	bl	8004954 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e9a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e9e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ea4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ea8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005eaa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eae:	2200      	movs	r2, #0
 8005eb0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ebe:	3354      	adds	r3, #84	; 0x54
 8005ec0:	2260      	movs	r2, #96	; 0x60
 8005ec2:	2100      	movs	r1, #0
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	f00f fa76 	bl	80153b6 <memset>
 8005eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ecc:	4a0c      	ldr	r2, [pc, #48]	; (8005f00 <prvInitialiseNewTask+0x140>)
 8005ece:	659a      	str	r2, [r3, #88]	; 0x58
 8005ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ed2:	4a0c      	ldr	r2, [pc, #48]	; (8005f04 <prvInitialiseNewTask+0x144>)
 8005ed4:	65da      	str	r2, [r3, #92]	; 0x5c
 8005ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ed8:	4a0b      	ldr	r2, [pc, #44]	; (8005f08 <prvInitialiseNewTask+0x148>)
 8005eda:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005edc:	683a      	ldr	r2, [r7, #0]
 8005ede:	68f9      	ldr	r1, [r7, #12]
 8005ee0:	69b8      	ldr	r0, [r7, #24]
 8005ee2:	f001 fa61 	bl	80073a8 <pxPortInitialiseStack>
 8005ee6:	4602      	mov	r2, r0
 8005ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eea:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d002      	beq.n	8005ef8 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ef4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ef6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005ef8:	bf00      	nop
 8005efa:	3720      	adds	r7, #32
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bd80      	pop	{r7, pc}
 8005f00:	08019c74 	.word	0x08019c74
 8005f04:	08019c94 	.word	0x08019c94
 8005f08:	08019c54 	.word	0x08019c54

08005f0c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b082      	sub	sp, #8
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005f14:	f001 fb76 	bl	8007604 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005f18:	4b2d      	ldr	r3, [pc, #180]	; (8005fd0 <prvAddNewTaskToReadyList+0xc4>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	3301      	adds	r3, #1
 8005f1e:	4a2c      	ldr	r2, [pc, #176]	; (8005fd0 <prvAddNewTaskToReadyList+0xc4>)
 8005f20:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005f22:	4b2c      	ldr	r3, [pc, #176]	; (8005fd4 <prvAddNewTaskToReadyList+0xc8>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d109      	bne.n	8005f3e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005f2a:	4a2a      	ldr	r2, [pc, #168]	; (8005fd4 <prvAddNewTaskToReadyList+0xc8>)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005f30:	4b27      	ldr	r3, [pc, #156]	; (8005fd0 <prvAddNewTaskToReadyList+0xc4>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	2b01      	cmp	r3, #1
 8005f36:	d110      	bne.n	8005f5a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005f38:	f000 fc38 	bl	80067ac <prvInitialiseTaskLists>
 8005f3c:	e00d      	b.n	8005f5a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005f3e:	4b26      	ldr	r3, [pc, #152]	; (8005fd8 <prvAddNewTaskToReadyList+0xcc>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d109      	bne.n	8005f5a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005f46:	4b23      	ldr	r3, [pc, #140]	; (8005fd4 <prvAddNewTaskToReadyList+0xc8>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f50:	429a      	cmp	r2, r3
 8005f52:	d802      	bhi.n	8005f5a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005f54:	4a1f      	ldr	r2, [pc, #124]	; (8005fd4 <prvAddNewTaskToReadyList+0xc8>)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005f5a:	4b20      	ldr	r3, [pc, #128]	; (8005fdc <prvAddNewTaskToReadyList+0xd0>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	3301      	adds	r3, #1
 8005f60:	4a1e      	ldr	r2, [pc, #120]	; (8005fdc <prvAddNewTaskToReadyList+0xd0>)
 8005f62:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005f64:	4b1d      	ldr	r3, [pc, #116]	; (8005fdc <prvAddNewTaskToReadyList+0xd0>)
 8005f66:	681a      	ldr	r2, [r3, #0]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f70:	4b1b      	ldr	r3, [pc, #108]	; (8005fe0 <prvAddNewTaskToReadyList+0xd4>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	429a      	cmp	r2, r3
 8005f76:	d903      	bls.n	8005f80 <prvAddNewTaskToReadyList+0x74>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f7c:	4a18      	ldr	r2, [pc, #96]	; (8005fe0 <prvAddNewTaskToReadyList+0xd4>)
 8005f7e:	6013      	str	r3, [r2, #0]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f84:	4613      	mov	r3, r2
 8005f86:	009b      	lsls	r3, r3, #2
 8005f88:	4413      	add	r3, r2
 8005f8a:	009b      	lsls	r3, r3, #2
 8005f8c:	4a15      	ldr	r2, [pc, #84]	; (8005fe4 <prvAddNewTaskToReadyList+0xd8>)
 8005f8e:	441a      	add	r2, r3
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	3304      	adds	r3, #4
 8005f94:	4619      	mov	r1, r3
 8005f96:	4610      	mov	r0, r2
 8005f98:	f7fe fce9 	bl	800496e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005f9c:	f001 fb62 	bl	8007664 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005fa0:	4b0d      	ldr	r3, [pc, #52]	; (8005fd8 <prvAddNewTaskToReadyList+0xcc>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d00e      	beq.n	8005fc6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005fa8:	4b0a      	ldr	r3, [pc, #40]	; (8005fd4 <prvAddNewTaskToReadyList+0xc8>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fb2:	429a      	cmp	r2, r3
 8005fb4:	d207      	bcs.n	8005fc6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005fb6:	4b0c      	ldr	r3, [pc, #48]	; (8005fe8 <prvAddNewTaskToReadyList+0xdc>)
 8005fb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fbc:	601a      	str	r2, [r3, #0]
 8005fbe:	f3bf 8f4f 	dsb	sy
 8005fc2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005fc6:	bf00      	nop
 8005fc8:	3708      	adds	r7, #8
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bd80      	pop	{r7, pc}
 8005fce:	bf00      	nop
 8005fd0:	20000cf8 	.word	0x20000cf8
 8005fd4:	20000824 	.word	0x20000824
 8005fd8:	20000d04 	.word	0x20000d04
 8005fdc:	20000d14 	.word	0x20000d14
 8005fe0:	20000d00 	.word	0x20000d00
 8005fe4:	20000828 	.word	0x20000828
 8005fe8:	e000ed04 	.word	0xe000ed04

08005fec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b084      	sub	sp, #16
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d017      	beq.n	800602e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005ffe:	4b13      	ldr	r3, [pc, #76]	; (800604c <vTaskDelay+0x60>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d00a      	beq.n	800601c <vTaskDelay+0x30>
	__asm volatile
 8006006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800600a:	f383 8811 	msr	BASEPRI, r3
 800600e:	f3bf 8f6f 	isb	sy
 8006012:	f3bf 8f4f 	dsb	sy
 8006016:	60bb      	str	r3, [r7, #8]
}
 8006018:	bf00      	nop
 800601a:	e7fe      	b.n	800601a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800601c:	f000 f88a 	bl	8006134 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006020:	2100      	movs	r1, #0
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f000 fe1e 	bl	8006c64 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006028:	f000 f892 	bl	8006150 <xTaskResumeAll>
 800602c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d107      	bne.n	8006044 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006034:	4b06      	ldr	r3, [pc, #24]	; (8006050 <vTaskDelay+0x64>)
 8006036:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800603a:	601a      	str	r2, [r3, #0]
 800603c:	f3bf 8f4f 	dsb	sy
 8006040:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006044:	bf00      	nop
 8006046:	3710      	adds	r7, #16
 8006048:	46bd      	mov	sp, r7
 800604a:	bd80      	pop	{r7, pc}
 800604c:	20000d20 	.word	0x20000d20
 8006050:	e000ed04 	.word	0xe000ed04

08006054 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b08a      	sub	sp, #40	; 0x28
 8006058:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800605a:	2300      	movs	r3, #0
 800605c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800605e:	2300      	movs	r3, #0
 8006060:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006062:	463a      	mov	r2, r7
 8006064:	1d39      	adds	r1, r7, #4
 8006066:	f107 0308 	add.w	r3, r7, #8
 800606a:	4618      	mov	r0, r3
 800606c:	f7fe fc1e 	bl	80048ac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006070:	6839      	ldr	r1, [r7, #0]
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	68ba      	ldr	r2, [r7, #8]
 8006076:	9202      	str	r2, [sp, #8]
 8006078:	9301      	str	r3, [sp, #4]
 800607a:	2300      	movs	r3, #0
 800607c:	9300      	str	r3, [sp, #0]
 800607e:	2300      	movs	r3, #0
 8006080:	460a      	mov	r2, r1
 8006082:	4924      	ldr	r1, [pc, #144]	; (8006114 <vTaskStartScheduler+0xc0>)
 8006084:	4824      	ldr	r0, [pc, #144]	; (8006118 <vTaskStartScheduler+0xc4>)
 8006086:	f7ff fdf9 	bl	8005c7c <xTaskCreateStatic>
 800608a:	4603      	mov	r3, r0
 800608c:	4a23      	ldr	r2, [pc, #140]	; (800611c <vTaskStartScheduler+0xc8>)
 800608e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006090:	4b22      	ldr	r3, [pc, #136]	; (800611c <vTaskStartScheduler+0xc8>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d002      	beq.n	800609e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006098:	2301      	movs	r3, #1
 800609a:	617b      	str	r3, [r7, #20]
 800609c:	e001      	b.n	80060a2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800609e:	2300      	movs	r3, #0
 80060a0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	2b01      	cmp	r3, #1
 80060a6:	d102      	bne.n	80060ae <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80060a8:	f000 fe30 	bl	8006d0c <xTimerCreateTimerTask>
 80060ac:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80060ae:	697b      	ldr	r3, [r7, #20]
 80060b0:	2b01      	cmp	r3, #1
 80060b2:	d11b      	bne.n	80060ec <vTaskStartScheduler+0x98>
	__asm volatile
 80060b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060b8:	f383 8811 	msr	BASEPRI, r3
 80060bc:	f3bf 8f6f 	isb	sy
 80060c0:	f3bf 8f4f 	dsb	sy
 80060c4:	613b      	str	r3, [r7, #16]
}
 80060c6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80060c8:	4b15      	ldr	r3, [pc, #84]	; (8006120 <vTaskStartScheduler+0xcc>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	3354      	adds	r3, #84	; 0x54
 80060ce:	4a15      	ldr	r2, [pc, #84]	; (8006124 <vTaskStartScheduler+0xd0>)
 80060d0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80060d2:	4b15      	ldr	r3, [pc, #84]	; (8006128 <vTaskStartScheduler+0xd4>)
 80060d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80060d8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80060da:	4b14      	ldr	r3, [pc, #80]	; (800612c <vTaskStartScheduler+0xd8>)
 80060dc:	2201      	movs	r2, #1
 80060de:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80060e0:	4b13      	ldr	r3, [pc, #76]	; (8006130 <vTaskStartScheduler+0xdc>)
 80060e2:	2200      	movs	r2, #0
 80060e4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80060e6:	f001 f9eb 	bl	80074c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80060ea:	e00e      	b.n	800610a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80060ec:	697b      	ldr	r3, [r7, #20]
 80060ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80060f2:	d10a      	bne.n	800610a <vTaskStartScheduler+0xb6>
	__asm volatile
 80060f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060f8:	f383 8811 	msr	BASEPRI, r3
 80060fc:	f3bf 8f6f 	isb	sy
 8006100:	f3bf 8f4f 	dsb	sy
 8006104:	60fb      	str	r3, [r7, #12]
}
 8006106:	bf00      	nop
 8006108:	e7fe      	b.n	8006108 <vTaskStartScheduler+0xb4>
}
 800610a:	bf00      	nop
 800610c:	3718      	adds	r7, #24
 800610e:	46bd      	mov	sp, r7
 8006110:	bd80      	pop	{r7, pc}
 8006112:	bf00      	nop
 8006114:	080163e4 	.word	0x080163e4
 8006118:	0800677d 	.word	0x0800677d
 800611c:	20000d1c 	.word	0x20000d1c
 8006120:	20000824 	.word	0x20000824
 8006124:	2000001c 	.word	0x2000001c
 8006128:	20000d18 	.word	0x20000d18
 800612c:	20000d04 	.word	0x20000d04
 8006130:	20000cfc 	.word	0x20000cfc

08006134 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006134:	b480      	push	{r7}
 8006136:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006138:	4b04      	ldr	r3, [pc, #16]	; (800614c <vTaskSuspendAll+0x18>)
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	3301      	adds	r3, #1
 800613e:	4a03      	ldr	r2, [pc, #12]	; (800614c <vTaskSuspendAll+0x18>)
 8006140:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006142:	bf00      	nop
 8006144:	46bd      	mov	sp, r7
 8006146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614a:	4770      	bx	lr
 800614c:	20000d20 	.word	0x20000d20

08006150 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b084      	sub	sp, #16
 8006154:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006156:	2300      	movs	r3, #0
 8006158:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800615a:	2300      	movs	r3, #0
 800615c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800615e:	4b42      	ldr	r3, [pc, #264]	; (8006268 <xTaskResumeAll+0x118>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d10a      	bne.n	800617c <xTaskResumeAll+0x2c>
	__asm volatile
 8006166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800616a:	f383 8811 	msr	BASEPRI, r3
 800616e:	f3bf 8f6f 	isb	sy
 8006172:	f3bf 8f4f 	dsb	sy
 8006176:	603b      	str	r3, [r7, #0]
}
 8006178:	bf00      	nop
 800617a:	e7fe      	b.n	800617a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800617c:	f001 fa42 	bl	8007604 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006180:	4b39      	ldr	r3, [pc, #228]	; (8006268 <xTaskResumeAll+0x118>)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	3b01      	subs	r3, #1
 8006186:	4a38      	ldr	r2, [pc, #224]	; (8006268 <xTaskResumeAll+0x118>)
 8006188:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800618a:	4b37      	ldr	r3, [pc, #220]	; (8006268 <xTaskResumeAll+0x118>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d162      	bne.n	8006258 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006192:	4b36      	ldr	r3, [pc, #216]	; (800626c <xTaskResumeAll+0x11c>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d05e      	beq.n	8006258 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800619a:	e02f      	b.n	80061fc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800619c:	4b34      	ldr	r3, [pc, #208]	; (8006270 <xTaskResumeAll+0x120>)
 800619e:	68db      	ldr	r3, [r3, #12]
 80061a0:	68db      	ldr	r3, [r3, #12]
 80061a2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	3318      	adds	r3, #24
 80061a8:	4618      	mov	r0, r3
 80061aa:	f7fe fc3d 	bl	8004a28 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	3304      	adds	r3, #4
 80061b2:	4618      	mov	r0, r3
 80061b4:	f7fe fc38 	bl	8004a28 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061bc:	4b2d      	ldr	r3, [pc, #180]	; (8006274 <xTaskResumeAll+0x124>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	429a      	cmp	r2, r3
 80061c2:	d903      	bls.n	80061cc <xTaskResumeAll+0x7c>
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061c8:	4a2a      	ldr	r2, [pc, #168]	; (8006274 <xTaskResumeAll+0x124>)
 80061ca:	6013      	str	r3, [r2, #0]
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061d0:	4613      	mov	r3, r2
 80061d2:	009b      	lsls	r3, r3, #2
 80061d4:	4413      	add	r3, r2
 80061d6:	009b      	lsls	r3, r3, #2
 80061d8:	4a27      	ldr	r2, [pc, #156]	; (8006278 <xTaskResumeAll+0x128>)
 80061da:	441a      	add	r2, r3
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	3304      	adds	r3, #4
 80061e0:	4619      	mov	r1, r3
 80061e2:	4610      	mov	r0, r2
 80061e4:	f7fe fbc3 	bl	800496e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061ec:	4b23      	ldr	r3, [pc, #140]	; (800627c <xTaskResumeAll+0x12c>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061f2:	429a      	cmp	r2, r3
 80061f4:	d302      	bcc.n	80061fc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80061f6:	4b22      	ldr	r3, [pc, #136]	; (8006280 <xTaskResumeAll+0x130>)
 80061f8:	2201      	movs	r2, #1
 80061fa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80061fc:	4b1c      	ldr	r3, [pc, #112]	; (8006270 <xTaskResumeAll+0x120>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d1cb      	bne.n	800619c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d001      	beq.n	800620e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800620a:	f000 fb71 	bl	80068f0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800620e:	4b1d      	ldr	r3, [pc, #116]	; (8006284 <xTaskResumeAll+0x134>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d010      	beq.n	800623c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800621a:	f000 f859 	bl	80062d0 <xTaskIncrementTick>
 800621e:	4603      	mov	r3, r0
 8006220:	2b00      	cmp	r3, #0
 8006222:	d002      	beq.n	800622a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006224:	4b16      	ldr	r3, [pc, #88]	; (8006280 <xTaskResumeAll+0x130>)
 8006226:	2201      	movs	r2, #1
 8006228:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	3b01      	subs	r3, #1
 800622e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d1f1      	bne.n	800621a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006236:	4b13      	ldr	r3, [pc, #76]	; (8006284 <xTaskResumeAll+0x134>)
 8006238:	2200      	movs	r2, #0
 800623a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800623c:	4b10      	ldr	r3, [pc, #64]	; (8006280 <xTaskResumeAll+0x130>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d009      	beq.n	8006258 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006244:	2301      	movs	r3, #1
 8006246:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006248:	4b0f      	ldr	r3, [pc, #60]	; (8006288 <xTaskResumeAll+0x138>)
 800624a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800624e:	601a      	str	r2, [r3, #0]
 8006250:	f3bf 8f4f 	dsb	sy
 8006254:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006258:	f001 fa04 	bl	8007664 <vPortExitCritical>

	return xAlreadyYielded;
 800625c:	68bb      	ldr	r3, [r7, #8]
}
 800625e:	4618      	mov	r0, r3
 8006260:	3710      	adds	r7, #16
 8006262:	46bd      	mov	sp, r7
 8006264:	bd80      	pop	{r7, pc}
 8006266:	bf00      	nop
 8006268:	20000d20 	.word	0x20000d20
 800626c:	20000cf8 	.word	0x20000cf8
 8006270:	20000cb8 	.word	0x20000cb8
 8006274:	20000d00 	.word	0x20000d00
 8006278:	20000828 	.word	0x20000828
 800627c:	20000824 	.word	0x20000824
 8006280:	20000d0c 	.word	0x20000d0c
 8006284:	20000d08 	.word	0x20000d08
 8006288:	e000ed04 	.word	0xe000ed04

0800628c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800628c:	b480      	push	{r7}
 800628e:	b083      	sub	sp, #12
 8006290:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006292:	4b05      	ldr	r3, [pc, #20]	; (80062a8 <xTaskGetTickCount+0x1c>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006298:	687b      	ldr	r3, [r7, #4]
}
 800629a:	4618      	mov	r0, r3
 800629c:	370c      	adds	r7, #12
 800629e:	46bd      	mov	sp, r7
 80062a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a4:	4770      	bx	lr
 80062a6:	bf00      	nop
 80062a8:	20000cfc 	.word	0x20000cfc

080062ac <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b082      	sub	sp, #8
 80062b0:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80062b2:	f001 fa89 	bl	80077c8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80062b6:	2300      	movs	r3, #0
 80062b8:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80062ba:	4b04      	ldr	r3, [pc, #16]	; (80062cc <xTaskGetTickCountFromISR+0x20>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80062c0:	683b      	ldr	r3, [r7, #0]
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	3708      	adds	r7, #8
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}
 80062ca:	bf00      	nop
 80062cc:	20000cfc 	.word	0x20000cfc

080062d0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b086      	sub	sp, #24
 80062d4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80062d6:	2300      	movs	r3, #0
 80062d8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80062da:	4b4f      	ldr	r3, [pc, #316]	; (8006418 <xTaskIncrementTick+0x148>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	f040 808f 	bne.w	8006402 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80062e4:	4b4d      	ldr	r3, [pc, #308]	; (800641c <xTaskIncrementTick+0x14c>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	3301      	adds	r3, #1
 80062ea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80062ec:	4a4b      	ldr	r2, [pc, #300]	; (800641c <xTaskIncrementTick+0x14c>)
 80062ee:	693b      	ldr	r3, [r7, #16]
 80062f0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80062f2:	693b      	ldr	r3, [r7, #16]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d120      	bne.n	800633a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80062f8:	4b49      	ldr	r3, [pc, #292]	; (8006420 <xTaskIncrementTick+0x150>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d00a      	beq.n	8006318 <xTaskIncrementTick+0x48>
	__asm volatile
 8006302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006306:	f383 8811 	msr	BASEPRI, r3
 800630a:	f3bf 8f6f 	isb	sy
 800630e:	f3bf 8f4f 	dsb	sy
 8006312:	603b      	str	r3, [r7, #0]
}
 8006314:	bf00      	nop
 8006316:	e7fe      	b.n	8006316 <xTaskIncrementTick+0x46>
 8006318:	4b41      	ldr	r3, [pc, #260]	; (8006420 <xTaskIncrementTick+0x150>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	60fb      	str	r3, [r7, #12]
 800631e:	4b41      	ldr	r3, [pc, #260]	; (8006424 <xTaskIncrementTick+0x154>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4a3f      	ldr	r2, [pc, #252]	; (8006420 <xTaskIncrementTick+0x150>)
 8006324:	6013      	str	r3, [r2, #0]
 8006326:	4a3f      	ldr	r2, [pc, #252]	; (8006424 <xTaskIncrementTick+0x154>)
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	6013      	str	r3, [r2, #0]
 800632c:	4b3e      	ldr	r3, [pc, #248]	; (8006428 <xTaskIncrementTick+0x158>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	3301      	adds	r3, #1
 8006332:	4a3d      	ldr	r2, [pc, #244]	; (8006428 <xTaskIncrementTick+0x158>)
 8006334:	6013      	str	r3, [r2, #0]
 8006336:	f000 fadb 	bl	80068f0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800633a:	4b3c      	ldr	r3, [pc, #240]	; (800642c <xTaskIncrementTick+0x15c>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	693a      	ldr	r2, [r7, #16]
 8006340:	429a      	cmp	r2, r3
 8006342:	d349      	bcc.n	80063d8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006344:	4b36      	ldr	r3, [pc, #216]	; (8006420 <xTaskIncrementTick+0x150>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d104      	bne.n	8006358 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800634e:	4b37      	ldr	r3, [pc, #220]	; (800642c <xTaskIncrementTick+0x15c>)
 8006350:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006354:	601a      	str	r2, [r3, #0]
					break;
 8006356:	e03f      	b.n	80063d8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006358:	4b31      	ldr	r3, [pc, #196]	; (8006420 <xTaskIncrementTick+0x150>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	68db      	ldr	r3, [r3, #12]
 800635e:	68db      	ldr	r3, [r3, #12]
 8006360:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	685b      	ldr	r3, [r3, #4]
 8006366:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006368:	693a      	ldr	r2, [r7, #16]
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	429a      	cmp	r2, r3
 800636e:	d203      	bcs.n	8006378 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006370:	4a2e      	ldr	r2, [pc, #184]	; (800642c <xTaskIncrementTick+0x15c>)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006376:	e02f      	b.n	80063d8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	3304      	adds	r3, #4
 800637c:	4618      	mov	r0, r3
 800637e:	f7fe fb53 	bl	8004a28 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006386:	2b00      	cmp	r3, #0
 8006388:	d004      	beq.n	8006394 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	3318      	adds	r3, #24
 800638e:	4618      	mov	r0, r3
 8006390:	f7fe fb4a 	bl	8004a28 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006398:	4b25      	ldr	r3, [pc, #148]	; (8006430 <xTaskIncrementTick+0x160>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	429a      	cmp	r2, r3
 800639e:	d903      	bls.n	80063a8 <xTaskIncrementTick+0xd8>
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063a4:	4a22      	ldr	r2, [pc, #136]	; (8006430 <xTaskIncrementTick+0x160>)
 80063a6:	6013      	str	r3, [r2, #0]
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063ac:	4613      	mov	r3, r2
 80063ae:	009b      	lsls	r3, r3, #2
 80063b0:	4413      	add	r3, r2
 80063b2:	009b      	lsls	r3, r3, #2
 80063b4:	4a1f      	ldr	r2, [pc, #124]	; (8006434 <xTaskIncrementTick+0x164>)
 80063b6:	441a      	add	r2, r3
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	3304      	adds	r3, #4
 80063bc:	4619      	mov	r1, r3
 80063be:	4610      	mov	r0, r2
 80063c0:	f7fe fad5 	bl	800496e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063c8:	4b1b      	ldr	r3, [pc, #108]	; (8006438 <xTaskIncrementTick+0x168>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ce:	429a      	cmp	r2, r3
 80063d0:	d3b8      	bcc.n	8006344 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80063d2:	2301      	movs	r3, #1
 80063d4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80063d6:	e7b5      	b.n	8006344 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80063d8:	4b17      	ldr	r3, [pc, #92]	; (8006438 <xTaskIncrementTick+0x168>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063de:	4915      	ldr	r1, [pc, #84]	; (8006434 <xTaskIncrementTick+0x164>)
 80063e0:	4613      	mov	r3, r2
 80063e2:	009b      	lsls	r3, r3, #2
 80063e4:	4413      	add	r3, r2
 80063e6:	009b      	lsls	r3, r3, #2
 80063e8:	440b      	add	r3, r1
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	2b01      	cmp	r3, #1
 80063ee:	d901      	bls.n	80063f4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80063f0:	2301      	movs	r3, #1
 80063f2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80063f4:	4b11      	ldr	r3, [pc, #68]	; (800643c <xTaskIncrementTick+0x16c>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d007      	beq.n	800640c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80063fc:	2301      	movs	r3, #1
 80063fe:	617b      	str	r3, [r7, #20]
 8006400:	e004      	b.n	800640c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006402:	4b0f      	ldr	r3, [pc, #60]	; (8006440 <xTaskIncrementTick+0x170>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	3301      	adds	r3, #1
 8006408:	4a0d      	ldr	r2, [pc, #52]	; (8006440 <xTaskIncrementTick+0x170>)
 800640a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800640c:	697b      	ldr	r3, [r7, #20]
}
 800640e:	4618      	mov	r0, r3
 8006410:	3718      	adds	r7, #24
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}
 8006416:	bf00      	nop
 8006418:	20000d20 	.word	0x20000d20
 800641c:	20000cfc 	.word	0x20000cfc
 8006420:	20000cb0 	.word	0x20000cb0
 8006424:	20000cb4 	.word	0x20000cb4
 8006428:	20000d10 	.word	0x20000d10
 800642c:	20000d18 	.word	0x20000d18
 8006430:	20000d00 	.word	0x20000d00
 8006434:	20000828 	.word	0x20000828
 8006438:	20000824 	.word	0x20000824
 800643c:	20000d0c 	.word	0x20000d0c
 8006440:	20000d08 	.word	0x20000d08

08006444 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006444:	b480      	push	{r7}
 8006446:	b085      	sub	sp, #20
 8006448:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800644a:	4b2a      	ldr	r3, [pc, #168]	; (80064f4 <vTaskSwitchContext+0xb0>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d003      	beq.n	800645a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006452:	4b29      	ldr	r3, [pc, #164]	; (80064f8 <vTaskSwitchContext+0xb4>)
 8006454:	2201      	movs	r2, #1
 8006456:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006458:	e046      	b.n	80064e8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800645a:	4b27      	ldr	r3, [pc, #156]	; (80064f8 <vTaskSwitchContext+0xb4>)
 800645c:	2200      	movs	r2, #0
 800645e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006460:	4b26      	ldr	r3, [pc, #152]	; (80064fc <vTaskSwitchContext+0xb8>)
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	60fb      	str	r3, [r7, #12]
 8006466:	e010      	b.n	800648a <vTaskSwitchContext+0x46>
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d10a      	bne.n	8006484 <vTaskSwitchContext+0x40>
	__asm volatile
 800646e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006472:	f383 8811 	msr	BASEPRI, r3
 8006476:	f3bf 8f6f 	isb	sy
 800647a:	f3bf 8f4f 	dsb	sy
 800647e:	607b      	str	r3, [r7, #4]
}
 8006480:	bf00      	nop
 8006482:	e7fe      	b.n	8006482 <vTaskSwitchContext+0x3e>
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	3b01      	subs	r3, #1
 8006488:	60fb      	str	r3, [r7, #12]
 800648a:	491d      	ldr	r1, [pc, #116]	; (8006500 <vTaskSwitchContext+0xbc>)
 800648c:	68fa      	ldr	r2, [r7, #12]
 800648e:	4613      	mov	r3, r2
 8006490:	009b      	lsls	r3, r3, #2
 8006492:	4413      	add	r3, r2
 8006494:	009b      	lsls	r3, r3, #2
 8006496:	440b      	add	r3, r1
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d0e4      	beq.n	8006468 <vTaskSwitchContext+0x24>
 800649e:	68fa      	ldr	r2, [r7, #12]
 80064a0:	4613      	mov	r3, r2
 80064a2:	009b      	lsls	r3, r3, #2
 80064a4:	4413      	add	r3, r2
 80064a6:	009b      	lsls	r3, r3, #2
 80064a8:	4a15      	ldr	r2, [pc, #84]	; (8006500 <vTaskSwitchContext+0xbc>)
 80064aa:	4413      	add	r3, r2
 80064ac:	60bb      	str	r3, [r7, #8]
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	685b      	ldr	r3, [r3, #4]
 80064b2:	685a      	ldr	r2, [r3, #4]
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	605a      	str	r2, [r3, #4]
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	685a      	ldr	r2, [r3, #4]
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	3308      	adds	r3, #8
 80064c0:	429a      	cmp	r2, r3
 80064c2:	d104      	bne.n	80064ce <vTaskSwitchContext+0x8a>
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	685b      	ldr	r3, [r3, #4]
 80064c8:	685a      	ldr	r2, [r3, #4]
 80064ca:	68bb      	ldr	r3, [r7, #8]
 80064cc:	605a      	str	r2, [r3, #4]
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	685b      	ldr	r3, [r3, #4]
 80064d2:	68db      	ldr	r3, [r3, #12]
 80064d4:	4a0b      	ldr	r2, [pc, #44]	; (8006504 <vTaskSwitchContext+0xc0>)
 80064d6:	6013      	str	r3, [r2, #0]
 80064d8:	4a08      	ldr	r2, [pc, #32]	; (80064fc <vTaskSwitchContext+0xb8>)
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80064de:	4b09      	ldr	r3, [pc, #36]	; (8006504 <vTaskSwitchContext+0xc0>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	3354      	adds	r3, #84	; 0x54
 80064e4:	4a08      	ldr	r2, [pc, #32]	; (8006508 <vTaskSwitchContext+0xc4>)
 80064e6:	6013      	str	r3, [r2, #0]
}
 80064e8:	bf00      	nop
 80064ea:	3714      	adds	r7, #20
 80064ec:	46bd      	mov	sp, r7
 80064ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f2:	4770      	bx	lr
 80064f4:	20000d20 	.word	0x20000d20
 80064f8:	20000d0c 	.word	0x20000d0c
 80064fc:	20000d00 	.word	0x20000d00
 8006500:	20000828 	.word	0x20000828
 8006504:	20000824 	.word	0x20000824
 8006508:	2000001c 	.word	0x2000001c

0800650c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b084      	sub	sp, #16
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
 8006514:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d10a      	bne.n	8006532 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800651c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006520:	f383 8811 	msr	BASEPRI, r3
 8006524:	f3bf 8f6f 	isb	sy
 8006528:	f3bf 8f4f 	dsb	sy
 800652c:	60fb      	str	r3, [r7, #12]
}
 800652e:	bf00      	nop
 8006530:	e7fe      	b.n	8006530 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006532:	4b07      	ldr	r3, [pc, #28]	; (8006550 <vTaskPlaceOnEventList+0x44>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	3318      	adds	r3, #24
 8006538:	4619      	mov	r1, r3
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f7fe fa3b 	bl	80049b6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006540:	2101      	movs	r1, #1
 8006542:	6838      	ldr	r0, [r7, #0]
 8006544:	f000 fb8e 	bl	8006c64 <prvAddCurrentTaskToDelayedList>
}
 8006548:	bf00      	nop
 800654a:	3710      	adds	r7, #16
 800654c:	46bd      	mov	sp, r7
 800654e:	bd80      	pop	{r7, pc}
 8006550:	20000824 	.word	0x20000824

08006554 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006554:	b580      	push	{r7, lr}
 8006556:	b086      	sub	sp, #24
 8006558:	af00      	add	r7, sp, #0
 800655a:	60f8      	str	r0, [r7, #12]
 800655c:	60b9      	str	r1, [r7, #8]
 800655e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d10a      	bne.n	800657c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800656a:	f383 8811 	msr	BASEPRI, r3
 800656e:	f3bf 8f6f 	isb	sy
 8006572:	f3bf 8f4f 	dsb	sy
 8006576:	617b      	str	r3, [r7, #20]
}
 8006578:	bf00      	nop
 800657a:	e7fe      	b.n	800657a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800657c:	4b0a      	ldr	r3, [pc, #40]	; (80065a8 <vTaskPlaceOnEventListRestricted+0x54>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	3318      	adds	r3, #24
 8006582:	4619      	mov	r1, r3
 8006584:	68f8      	ldr	r0, [r7, #12]
 8006586:	f7fe f9f2 	bl	800496e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d002      	beq.n	8006596 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006590:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006594:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006596:	6879      	ldr	r1, [r7, #4]
 8006598:	68b8      	ldr	r0, [r7, #8]
 800659a:	f000 fb63 	bl	8006c64 <prvAddCurrentTaskToDelayedList>
	}
 800659e:	bf00      	nop
 80065a0:	3718      	adds	r7, #24
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd80      	pop	{r7, pc}
 80065a6:	bf00      	nop
 80065a8:	20000824 	.word	0x20000824

080065ac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b086      	sub	sp, #24
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	68db      	ldr	r3, [r3, #12]
 80065b8:	68db      	ldr	r3, [r3, #12]
 80065ba:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80065bc:	693b      	ldr	r3, [r7, #16]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d10a      	bne.n	80065d8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80065c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065c6:	f383 8811 	msr	BASEPRI, r3
 80065ca:	f3bf 8f6f 	isb	sy
 80065ce:	f3bf 8f4f 	dsb	sy
 80065d2:	60fb      	str	r3, [r7, #12]
}
 80065d4:	bf00      	nop
 80065d6:	e7fe      	b.n	80065d6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80065d8:	693b      	ldr	r3, [r7, #16]
 80065da:	3318      	adds	r3, #24
 80065dc:	4618      	mov	r0, r3
 80065de:	f7fe fa23 	bl	8004a28 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80065e2:	4b1e      	ldr	r3, [pc, #120]	; (800665c <xTaskRemoveFromEventList+0xb0>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d11d      	bne.n	8006626 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80065ea:	693b      	ldr	r3, [r7, #16]
 80065ec:	3304      	adds	r3, #4
 80065ee:	4618      	mov	r0, r3
 80065f0:	f7fe fa1a 	bl	8004a28 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80065f4:	693b      	ldr	r3, [r7, #16]
 80065f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065f8:	4b19      	ldr	r3, [pc, #100]	; (8006660 <xTaskRemoveFromEventList+0xb4>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	429a      	cmp	r2, r3
 80065fe:	d903      	bls.n	8006608 <xTaskRemoveFromEventList+0x5c>
 8006600:	693b      	ldr	r3, [r7, #16]
 8006602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006604:	4a16      	ldr	r2, [pc, #88]	; (8006660 <xTaskRemoveFromEventList+0xb4>)
 8006606:	6013      	str	r3, [r2, #0]
 8006608:	693b      	ldr	r3, [r7, #16]
 800660a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800660c:	4613      	mov	r3, r2
 800660e:	009b      	lsls	r3, r3, #2
 8006610:	4413      	add	r3, r2
 8006612:	009b      	lsls	r3, r3, #2
 8006614:	4a13      	ldr	r2, [pc, #76]	; (8006664 <xTaskRemoveFromEventList+0xb8>)
 8006616:	441a      	add	r2, r3
 8006618:	693b      	ldr	r3, [r7, #16]
 800661a:	3304      	adds	r3, #4
 800661c:	4619      	mov	r1, r3
 800661e:	4610      	mov	r0, r2
 8006620:	f7fe f9a5 	bl	800496e <vListInsertEnd>
 8006624:	e005      	b.n	8006632 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	3318      	adds	r3, #24
 800662a:	4619      	mov	r1, r3
 800662c:	480e      	ldr	r0, [pc, #56]	; (8006668 <xTaskRemoveFromEventList+0xbc>)
 800662e:	f7fe f99e 	bl	800496e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006632:	693b      	ldr	r3, [r7, #16]
 8006634:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006636:	4b0d      	ldr	r3, [pc, #52]	; (800666c <xTaskRemoveFromEventList+0xc0>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800663c:	429a      	cmp	r2, r3
 800663e:	d905      	bls.n	800664c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006640:	2301      	movs	r3, #1
 8006642:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006644:	4b0a      	ldr	r3, [pc, #40]	; (8006670 <xTaskRemoveFromEventList+0xc4>)
 8006646:	2201      	movs	r2, #1
 8006648:	601a      	str	r2, [r3, #0]
 800664a:	e001      	b.n	8006650 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800664c:	2300      	movs	r3, #0
 800664e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006650:	697b      	ldr	r3, [r7, #20]
}
 8006652:	4618      	mov	r0, r3
 8006654:	3718      	adds	r7, #24
 8006656:	46bd      	mov	sp, r7
 8006658:	bd80      	pop	{r7, pc}
 800665a:	bf00      	nop
 800665c:	20000d20 	.word	0x20000d20
 8006660:	20000d00 	.word	0x20000d00
 8006664:	20000828 	.word	0x20000828
 8006668:	20000cb8 	.word	0x20000cb8
 800666c:	20000824 	.word	0x20000824
 8006670:	20000d0c 	.word	0x20000d0c

08006674 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006674:	b480      	push	{r7}
 8006676:	b083      	sub	sp, #12
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800667c:	4b06      	ldr	r3, [pc, #24]	; (8006698 <vTaskInternalSetTimeOutState+0x24>)
 800667e:	681a      	ldr	r2, [r3, #0]
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006684:	4b05      	ldr	r3, [pc, #20]	; (800669c <vTaskInternalSetTimeOutState+0x28>)
 8006686:	681a      	ldr	r2, [r3, #0]
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	605a      	str	r2, [r3, #4]
}
 800668c:	bf00      	nop
 800668e:	370c      	adds	r7, #12
 8006690:	46bd      	mov	sp, r7
 8006692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006696:	4770      	bx	lr
 8006698:	20000d10 	.word	0x20000d10
 800669c:	20000cfc 	.word	0x20000cfc

080066a0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b088      	sub	sp, #32
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
 80066a8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d10a      	bne.n	80066c6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80066b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066b4:	f383 8811 	msr	BASEPRI, r3
 80066b8:	f3bf 8f6f 	isb	sy
 80066bc:	f3bf 8f4f 	dsb	sy
 80066c0:	613b      	str	r3, [r7, #16]
}
 80066c2:	bf00      	nop
 80066c4:	e7fe      	b.n	80066c4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d10a      	bne.n	80066e2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80066cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066d0:	f383 8811 	msr	BASEPRI, r3
 80066d4:	f3bf 8f6f 	isb	sy
 80066d8:	f3bf 8f4f 	dsb	sy
 80066dc:	60fb      	str	r3, [r7, #12]
}
 80066de:	bf00      	nop
 80066e0:	e7fe      	b.n	80066e0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80066e2:	f000 ff8f 	bl	8007604 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80066e6:	4b1d      	ldr	r3, [pc, #116]	; (800675c <xTaskCheckForTimeOut+0xbc>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	685b      	ldr	r3, [r3, #4]
 80066f0:	69ba      	ldr	r2, [r7, #24]
 80066f2:	1ad3      	subs	r3, r2, r3
 80066f4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80066fe:	d102      	bne.n	8006706 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006700:	2300      	movs	r3, #0
 8006702:	61fb      	str	r3, [r7, #28]
 8006704:	e023      	b.n	800674e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681a      	ldr	r2, [r3, #0]
 800670a:	4b15      	ldr	r3, [pc, #84]	; (8006760 <xTaskCheckForTimeOut+0xc0>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	429a      	cmp	r2, r3
 8006710:	d007      	beq.n	8006722 <xTaskCheckForTimeOut+0x82>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	685b      	ldr	r3, [r3, #4]
 8006716:	69ba      	ldr	r2, [r7, #24]
 8006718:	429a      	cmp	r2, r3
 800671a:	d302      	bcc.n	8006722 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800671c:	2301      	movs	r3, #1
 800671e:	61fb      	str	r3, [r7, #28]
 8006720:	e015      	b.n	800674e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	697a      	ldr	r2, [r7, #20]
 8006728:	429a      	cmp	r2, r3
 800672a:	d20b      	bcs.n	8006744 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	681a      	ldr	r2, [r3, #0]
 8006730:	697b      	ldr	r3, [r7, #20]
 8006732:	1ad2      	subs	r2, r2, r3
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006738:	6878      	ldr	r0, [r7, #4]
 800673a:	f7ff ff9b 	bl	8006674 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800673e:	2300      	movs	r3, #0
 8006740:	61fb      	str	r3, [r7, #28]
 8006742:	e004      	b.n	800674e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	2200      	movs	r2, #0
 8006748:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800674a:	2301      	movs	r3, #1
 800674c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800674e:	f000 ff89 	bl	8007664 <vPortExitCritical>

	return xReturn;
 8006752:	69fb      	ldr	r3, [r7, #28]
}
 8006754:	4618      	mov	r0, r3
 8006756:	3720      	adds	r7, #32
 8006758:	46bd      	mov	sp, r7
 800675a:	bd80      	pop	{r7, pc}
 800675c:	20000cfc 	.word	0x20000cfc
 8006760:	20000d10 	.word	0x20000d10

08006764 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006764:	b480      	push	{r7}
 8006766:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006768:	4b03      	ldr	r3, [pc, #12]	; (8006778 <vTaskMissedYield+0x14>)
 800676a:	2201      	movs	r2, #1
 800676c:	601a      	str	r2, [r3, #0]
}
 800676e:	bf00      	nop
 8006770:	46bd      	mov	sp, r7
 8006772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006776:	4770      	bx	lr
 8006778:	20000d0c 	.word	0x20000d0c

0800677c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b082      	sub	sp, #8
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006784:	f000 f852 	bl	800682c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006788:	4b06      	ldr	r3, [pc, #24]	; (80067a4 <prvIdleTask+0x28>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	2b01      	cmp	r3, #1
 800678e:	d9f9      	bls.n	8006784 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006790:	4b05      	ldr	r3, [pc, #20]	; (80067a8 <prvIdleTask+0x2c>)
 8006792:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006796:	601a      	str	r2, [r3, #0]
 8006798:	f3bf 8f4f 	dsb	sy
 800679c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80067a0:	e7f0      	b.n	8006784 <prvIdleTask+0x8>
 80067a2:	bf00      	nop
 80067a4:	20000828 	.word	0x20000828
 80067a8:	e000ed04 	.word	0xe000ed04

080067ac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b082      	sub	sp, #8
 80067b0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80067b2:	2300      	movs	r3, #0
 80067b4:	607b      	str	r3, [r7, #4]
 80067b6:	e00c      	b.n	80067d2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80067b8:	687a      	ldr	r2, [r7, #4]
 80067ba:	4613      	mov	r3, r2
 80067bc:	009b      	lsls	r3, r3, #2
 80067be:	4413      	add	r3, r2
 80067c0:	009b      	lsls	r3, r3, #2
 80067c2:	4a12      	ldr	r2, [pc, #72]	; (800680c <prvInitialiseTaskLists+0x60>)
 80067c4:	4413      	add	r3, r2
 80067c6:	4618      	mov	r0, r3
 80067c8:	f7fe f8a4 	bl	8004914 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	3301      	adds	r3, #1
 80067d0:	607b      	str	r3, [r7, #4]
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2b37      	cmp	r3, #55	; 0x37
 80067d6:	d9ef      	bls.n	80067b8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80067d8:	480d      	ldr	r0, [pc, #52]	; (8006810 <prvInitialiseTaskLists+0x64>)
 80067da:	f7fe f89b 	bl	8004914 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80067de:	480d      	ldr	r0, [pc, #52]	; (8006814 <prvInitialiseTaskLists+0x68>)
 80067e0:	f7fe f898 	bl	8004914 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80067e4:	480c      	ldr	r0, [pc, #48]	; (8006818 <prvInitialiseTaskLists+0x6c>)
 80067e6:	f7fe f895 	bl	8004914 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80067ea:	480c      	ldr	r0, [pc, #48]	; (800681c <prvInitialiseTaskLists+0x70>)
 80067ec:	f7fe f892 	bl	8004914 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80067f0:	480b      	ldr	r0, [pc, #44]	; (8006820 <prvInitialiseTaskLists+0x74>)
 80067f2:	f7fe f88f 	bl	8004914 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80067f6:	4b0b      	ldr	r3, [pc, #44]	; (8006824 <prvInitialiseTaskLists+0x78>)
 80067f8:	4a05      	ldr	r2, [pc, #20]	; (8006810 <prvInitialiseTaskLists+0x64>)
 80067fa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80067fc:	4b0a      	ldr	r3, [pc, #40]	; (8006828 <prvInitialiseTaskLists+0x7c>)
 80067fe:	4a05      	ldr	r2, [pc, #20]	; (8006814 <prvInitialiseTaskLists+0x68>)
 8006800:	601a      	str	r2, [r3, #0]
}
 8006802:	bf00      	nop
 8006804:	3708      	adds	r7, #8
 8006806:	46bd      	mov	sp, r7
 8006808:	bd80      	pop	{r7, pc}
 800680a:	bf00      	nop
 800680c:	20000828 	.word	0x20000828
 8006810:	20000c88 	.word	0x20000c88
 8006814:	20000c9c 	.word	0x20000c9c
 8006818:	20000cb8 	.word	0x20000cb8
 800681c:	20000ccc 	.word	0x20000ccc
 8006820:	20000ce4 	.word	0x20000ce4
 8006824:	20000cb0 	.word	0x20000cb0
 8006828:	20000cb4 	.word	0x20000cb4

0800682c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b082      	sub	sp, #8
 8006830:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006832:	e019      	b.n	8006868 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006834:	f000 fee6 	bl	8007604 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006838:	4b10      	ldr	r3, [pc, #64]	; (800687c <prvCheckTasksWaitingTermination+0x50>)
 800683a:	68db      	ldr	r3, [r3, #12]
 800683c:	68db      	ldr	r3, [r3, #12]
 800683e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	3304      	adds	r3, #4
 8006844:	4618      	mov	r0, r3
 8006846:	f7fe f8ef 	bl	8004a28 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800684a:	4b0d      	ldr	r3, [pc, #52]	; (8006880 <prvCheckTasksWaitingTermination+0x54>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	3b01      	subs	r3, #1
 8006850:	4a0b      	ldr	r2, [pc, #44]	; (8006880 <prvCheckTasksWaitingTermination+0x54>)
 8006852:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006854:	4b0b      	ldr	r3, [pc, #44]	; (8006884 <prvCheckTasksWaitingTermination+0x58>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	3b01      	subs	r3, #1
 800685a:	4a0a      	ldr	r2, [pc, #40]	; (8006884 <prvCheckTasksWaitingTermination+0x58>)
 800685c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800685e:	f000 ff01 	bl	8007664 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f000 f810 	bl	8006888 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006868:	4b06      	ldr	r3, [pc, #24]	; (8006884 <prvCheckTasksWaitingTermination+0x58>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d1e1      	bne.n	8006834 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006870:	bf00      	nop
 8006872:	bf00      	nop
 8006874:	3708      	adds	r7, #8
 8006876:	46bd      	mov	sp, r7
 8006878:	bd80      	pop	{r7, pc}
 800687a:	bf00      	nop
 800687c:	20000ccc 	.word	0x20000ccc
 8006880:	20000cf8 	.word	0x20000cf8
 8006884:	20000ce0 	.word	0x20000ce0

08006888 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006888:	b580      	push	{r7, lr}
 800688a:	b084      	sub	sp, #16
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	3354      	adds	r3, #84	; 0x54
 8006894:	4618      	mov	r0, r3
 8006896:	f00e fe57 	bl	8015548 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d108      	bne.n	80068b6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068a8:	4618      	mov	r0, r3
 80068aa:	f001 f899 	bl	80079e0 <vPortFree>
				vPortFree( pxTCB );
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f001 f896 	bl	80079e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80068b4:	e018      	b.n	80068e8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80068bc:	2b01      	cmp	r3, #1
 80068be:	d103      	bne.n	80068c8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	f001 f88d 	bl	80079e0 <vPortFree>
	}
 80068c6:	e00f      	b.n	80068e8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80068ce:	2b02      	cmp	r3, #2
 80068d0:	d00a      	beq.n	80068e8 <prvDeleteTCB+0x60>
	__asm volatile
 80068d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068d6:	f383 8811 	msr	BASEPRI, r3
 80068da:	f3bf 8f6f 	isb	sy
 80068de:	f3bf 8f4f 	dsb	sy
 80068e2:	60fb      	str	r3, [r7, #12]
}
 80068e4:	bf00      	nop
 80068e6:	e7fe      	b.n	80068e6 <prvDeleteTCB+0x5e>
	}
 80068e8:	bf00      	nop
 80068ea:	3710      	adds	r7, #16
 80068ec:	46bd      	mov	sp, r7
 80068ee:	bd80      	pop	{r7, pc}

080068f0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80068f0:	b480      	push	{r7}
 80068f2:	b083      	sub	sp, #12
 80068f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80068f6:	4b0c      	ldr	r3, [pc, #48]	; (8006928 <prvResetNextTaskUnblockTime+0x38>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d104      	bne.n	800690a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006900:	4b0a      	ldr	r3, [pc, #40]	; (800692c <prvResetNextTaskUnblockTime+0x3c>)
 8006902:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006906:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006908:	e008      	b.n	800691c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800690a:	4b07      	ldr	r3, [pc, #28]	; (8006928 <prvResetNextTaskUnblockTime+0x38>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	68db      	ldr	r3, [r3, #12]
 8006910:	68db      	ldr	r3, [r3, #12]
 8006912:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	685b      	ldr	r3, [r3, #4]
 8006918:	4a04      	ldr	r2, [pc, #16]	; (800692c <prvResetNextTaskUnblockTime+0x3c>)
 800691a:	6013      	str	r3, [r2, #0]
}
 800691c:	bf00      	nop
 800691e:	370c      	adds	r7, #12
 8006920:	46bd      	mov	sp, r7
 8006922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006926:	4770      	bx	lr
 8006928:	20000cb0 	.word	0x20000cb0
 800692c:	20000d18 	.word	0x20000d18

08006930 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8006930:	b480      	push	{r7}
 8006932:	b083      	sub	sp, #12
 8006934:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8006936:	4b05      	ldr	r3, [pc, #20]	; (800694c <xTaskGetCurrentTaskHandle+0x1c>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	607b      	str	r3, [r7, #4]

		return xReturn;
 800693c:	687b      	ldr	r3, [r7, #4]
	}
 800693e:	4618      	mov	r0, r3
 8006940:	370c      	adds	r7, #12
 8006942:	46bd      	mov	sp, r7
 8006944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006948:	4770      	bx	lr
 800694a:	bf00      	nop
 800694c:	20000824 	.word	0x20000824

08006950 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006950:	b480      	push	{r7}
 8006952:	b083      	sub	sp, #12
 8006954:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006956:	4b0b      	ldr	r3, [pc, #44]	; (8006984 <xTaskGetSchedulerState+0x34>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d102      	bne.n	8006964 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800695e:	2301      	movs	r3, #1
 8006960:	607b      	str	r3, [r7, #4]
 8006962:	e008      	b.n	8006976 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006964:	4b08      	ldr	r3, [pc, #32]	; (8006988 <xTaskGetSchedulerState+0x38>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d102      	bne.n	8006972 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800696c:	2302      	movs	r3, #2
 800696e:	607b      	str	r3, [r7, #4]
 8006970:	e001      	b.n	8006976 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006972:	2300      	movs	r3, #0
 8006974:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006976:	687b      	ldr	r3, [r7, #4]
	}
 8006978:	4618      	mov	r0, r3
 800697a:	370c      	adds	r7, #12
 800697c:	46bd      	mov	sp, r7
 800697e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006982:	4770      	bx	lr
 8006984:	20000d04 	.word	0x20000d04
 8006988:	20000d20 	.word	0x20000d20

0800698c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800698c:	b580      	push	{r7, lr}
 800698e:	b084      	sub	sp, #16
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006998:	2300      	movs	r3, #0
 800699a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d051      	beq.n	8006a46 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069a6:	4b2a      	ldr	r3, [pc, #168]	; (8006a50 <xTaskPriorityInherit+0xc4>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069ac:	429a      	cmp	r2, r3
 80069ae:	d241      	bcs.n	8006a34 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	699b      	ldr	r3, [r3, #24]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	db06      	blt.n	80069c6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80069b8:	4b25      	ldr	r3, [pc, #148]	; (8006a50 <xTaskPriorityInherit+0xc4>)
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069be:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	6959      	ldr	r1, [r3, #20]
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069ce:	4613      	mov	r3, r2
 80069d0:	009b      	lsls	r3, r3, #2
 80069d2:	4413      	add	r3, r2
 80069d4:	009b      	lsls	r3, r3, #2
 80069d6:	4a1f      	ldr	r2, [pc, #124]	; (8006a54 <xTaskPriorityInherit+0xc8>)
 80069d8:	4413      	add	r3, r2
 80069da:	4299      	cmp	r1, r3
 80069dc:	d122      	bne.n	8006a24 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	3304      	adds	r3, #4
 80069e2:	4618      	mov	r0, r3
 80069e4:	f7fe f820 	bl	8004a28 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80069e8:	4b19      	ldr	r3, [pc, #100]	; (8006a50 <xTaskPriorityInherit+0xc4>)
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069f6:	4b18      	ldr	r3, [pc, #96]	; (8006a58 <xTaskPriorityInherit+0xcc>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	429a      	cmp	r2, r3
 80069fc:	d903      	bls.n	8006a06 <xTaskPriorityInherit+0x7a>
 80069fe:	68bb      	ldr	r3, [r7, #8]
 8006a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a02:	4a15      	ldr	r2, [pc, #84]	; (8006a58 <xTaskPriorityInherit+0xcc>)
 8006a04:	6013      	str	r3, [r2, #0]
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a0a:	4613      	mov	r3, r2
 8006a0c:	009b      	lsls	r3, r3, #2
 8006a0e:	4413      	add	r3, r2
 8006a10:	009b      	lsls	r3, r3, #2
 8006a12:	4a10      	ldr	r2, [pc, #64]	; (8006a54 <xTaskPriorityInherit+0xc8>)
 8006a14:	441a      	add	r2, r3
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	3304      	adds	r3, #4
 8006a1a:	4619      	mov	r1, r3
 8006a1c:	4610      	mov	r0, r2
 8006a1e:	f7fd ffa6 	bl	800496e <vListInsertEnd>
 8006a22:	e004      	b.n	8006a2e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006a24:	4b0a      	ldr	r3, [pc, #40]	; (8006a50 <xTaskPriorityInherit+0xc4>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a2a:	68bb      	ldr	r3, [r7, #8]
 8006a2c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006a2e:	2301      	movs	r3, #1
 8006a30:	60fb      	str	r3, [r7, #12]
 8006a32:	e008      	b.n	8006a46 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006a38:	4b05      	ldr	r3, [pc, #20]	; (8006a50 <xTaskPriorityInherit+0xc4>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a3e:	429a      	cmp	r2, r3
 8006a40:	d201      	bcs.n	8006a46 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006a42:	2301      	movs	r3, #1
 8006a44:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006a46:	68fb      	ldr	r3, [r7, #12]
	}
 8006a48:	4618      	mov	r0, r3
 8006a4a:	3710      	adds	r7, #16
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	bd80      	pop	{r7, pc}
 8006a50:	20000824 	.word	0x20000824
 8006a54:	20000828 	.word	0x20000828
 8006a58:	20000d00 	.word	0x20000d00

08006a5c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b086      	sub	sp, #24
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006a68:	2300      	movs	r3, #0
 8006a6a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d056      	beq.n	8006b20 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006a72:	4b2e      	ldr	r3, [pc, #184]	; (8006b2c <xTaskPriorityDisinherit+0xd0>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	693a      	ldr	r2, [r7, #16]
 8006a78:	429a      	cmp	r2, r3
 8006a7a:	d00a      	beq.n	8006a92 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a80:	f383 8811 	msr	BASEPRI, r3
 8006a84:	f3bf 8f6f 	isb	sy
 8006a88:	f3bf 8f4f 	dsb	sy
 8006a8c:	60fb      	str	r3, [r7, #12]
}
 8006a8e:	bf00      	nop
 8006a90:	e7fe      	b.n	8006a90 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006a92:	693b      	ldr	r3, [r7, #16]
 8006a94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d10a      	bne.n	8006ab0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a9e:	f383 8811 	msr	BASEPRI, r3
 8006aa2:	f3bf 8f6f 	isb	sy
 8006aa6:	f3bf 8f4f 	dsb	sy
 8006aaa:	60bb      	str	r3, [r7, #8]
}
 8006aac:	bf00      	nop
 8006aae:	e7fe      	b.n	8006aae <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006ab0:	693b      	ldr	r3, [r7, #16]
 8006ab2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ab4:	1e5a      	subs	r2, r3, #1
 8006ab6:	693b      	ldr	r3, [r7, #16]
 8006ab8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006aba:	693b      	ldr	r3, [r7, #16]
 8006abc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006abe:	693b      	ldr	r3, [r7, #16]
 8006ac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ac2:	429a      	cmp	r2, r3
 8006ac4:	d02c      	beq.n	8006b20 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006ac6:	693b      	ldr	r3, [r7, #16]
 8006ac8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d128      	bne.n	8006b20 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006ace:	693b      	ldr	r3, [r7, #16]
 8006ad0:	3304      	adds	r3, #4
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	f7fd ffa8 	bl	8004a28 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006ad8:	693b      	ldr	r3, [r7, #16]
 8006ada:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006adc:	693b      	ldr	r3, [r7, #16]
 8006ade:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ae0:	693b      	ldr	r3, [r7, #16]
 8006ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ae4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006ae8:	693b      	ldr	r3, [r7, #16]
 8006aea:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006aec:	693b      	ldr	r3, [r7, #16]
 8006aee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006af0:	4b0f      	ldr	r3, [pc, #60]	; (8006b30 <xTaskPriorityDisinherit+0xd4>)
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	429a      	cmp	r2, r3
 8006af6:	d903      	bls.n	8006b00 <xTaskPriorityDisinherit+0xa4>
 8006af8:	693b      	ldr	r3, [r7, #16]
 8006afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006afc:	4a0c      	ldr	r2, [pc, #48]	; (8006b30 <xTaskPriorityDisinherit+0xd4>)
 8006afe:	6013      	str	r3, [r2, #0]
 8006b00:	693b      	ldr	r3, [r7, #16]
 8006b02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b04:	4613      	mov	r3, r2
 8006b06:	009b      	lsls	r3, r3, #2
 8006b08:	4413      	add	r3, r2
 8006b0a:	009b      	lsls	r3, r3, #2
 8006b0c:	4a09      	ldr	r2, [pc, #36]	; (8006b34 <xTaskPriorityDisinherit+0xd8>)
 8006b0e:	441a      	add	r2, r3
 8006b10:	693b      	ldr	r3, [r7, #16]
 8006b12:	3304      	adds	r3, #4
 8006b14:	4619      	mov	r1, r3
 8006b16:	4610      	mov	r0, r2
 8006b18:	f7fd ff29 	bl	800496e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006b1c:	2301      	movs	r3, #1
 8006b1e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006b20:	697b      	ldr	r3, [r7, #20]
	}
 8006b22:	4618      	mov	r0, r3
 8006b24:	3718      	adds	r7, #24
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd80      	pop	{r7, pc}
 8006b2a:	bf00      	nop
 8006b2c:	20000824 	.word	0x20000824
 8006b30:	20000d00 	.word	0x20000d00
 8006b34:	20000828 	.word	0x20000828

08006b38 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b088      	sub	sp, #32
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
 8006b40:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006b46:	2301      	movs	r3, #1
 8006b48:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d06a      	beq.n	8006c26 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006b50:	69bb      	ldr	r3, [r7, #24]
 8006b52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d10a      	bne.n	8006b6e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8006b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b5c:	f383 8811 	msr	BASEPRI, r3
 8006b60:	f3bf 8f6f 	isb	sy
 8006b64:	f3bf 8f4f 	dsb	sy
 8006b68:	60fb      	str	r3, [r7, #12]
}
 8006b6a:	bf00      	nop
 8006b6c:	e7fe      	b.n	8006b6c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006b6e:	69bb      	ldr	r3, [r7, #24]
 8006b70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b72:	683a      	ldr	r2, [r7, #0]
 8006b74:	429a      	cmp	r2, r3
 8006b76:	d902      	bls.n	8006b7e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	61fb      	str	r3, [r7, #28]
 8006b7c:	e002      	b.n	8006b84 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006b7e:	69bb      	ldr	r3, [r7, #24]
 8006b80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b82:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006b84:	69bb      	ldr	r3, [r7, #24]
 8006b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b88:	69fa      	ldr	r2, [r7, #28]
 8006b8a:	429a      	cmp	r2, r3
 8006b8c:	d04b      	beq.n	8006c26 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006b8e:	69bb      	ldr	r3, [r7, #24]
 8006b90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b92:	697a      	ldr	r2, [r7, #20]
 8006b94:	429a      	cmp	r2, r3
 8006b96:	d146      	bne.n	8006c26 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006b98:	4b25      	ldr	r3, [pc, #148]	; (8006c30 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	69ba      	ldr	r2, [r7, #24]
 8006b9e:	429a      	cmp	r2, r3
 8006ba0:	d10a      	bne.n	8006bb8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8006ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ba6:	f383 8811 	msr	BASEPRI, r3
 8006baa:	f3bf 8f6f 	isb	sy
 8006bae:	f3bf 8f4f 	dsb	sy
 8006bb2:	60bb      	str	r3, [r7, #8]
}
 8006bb4:	bf00      	nop
 8006bb6:	e7fe      	b.n	8006bb6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006bb8:	69bb      	ldr	r3, [r7, #24]
 8006bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bbc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006bbe:	69bb      	ldr	r3, [r7, #24]
 8006bc0:	69fa      	ldr	r2, [r7, #28]
 8006bc2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006bc4:	69bb      	ldr	r3, [r7, #24]
 8006bc6:	699b      	ldr	r3, [r3, #24]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	db04      	blt.n	8006bd6 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006bcc:	69fb      	ldr	r3, [r7, #28]
 8006bce:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006bd2:	69bb      	ldr	r3, [r7, #24]
 8006bd4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006bd6:	69bb      	ldr	r3, [r7, #24]
 8006bd8:	6959      	ldr	r1, [r3, #20]
 8006bda:	693a      	ldr	r2, [r7, #16]
 8006bdc:	4613      	mov	r3, r2
 8006bde:	009b      	lsls	r3, r3, #2
 8006be0:	4413      	add	r3, r2
 8006be2:	009b      	lsls	r3, r3, #2
 8006be4:	4a13      	ldr	r2, [pc, #76]	; (8006c34 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8006be6:	4413      	add	r3, r2
 8006be8:	4299      	cmp	r1, r3
 8006bea:	d11c      	bne.n	8006c26 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006bec:	69bb      	ldr	r3, [r7, #24]
 8006bee:	3304      	adds	r3, #4
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	f7fd ff19 	bl	8004a28 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006bf6:	69bb      	ldr	r3, [r7, #24]
 8006bf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bfa:	4b0f      	ldr	r3, [pc, #60]	; (8006c38 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	429a      	cmp	r2, r3
 8006c00:	d903      	bls.n	8006c0a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8006c02:	69bb      	ldr	r3, [r7, #24]
 8006c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c06:	4a0c      	ldr	r2, [pc, #48]	; (8006c38 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8006c08:	6013      	str	r3, [r2, #0]
 8006c0a:	69bb      	ldr	r3, [r7, #24]
 8006c0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c0e:	4613      	mov	r3, r2
 8006c10:	009b      	lsls	r3, r3, #2
 8006c12:	4413      	add	r3, r2
 8006c14:	009b      	lsls	r3, r3, #2
 8006c16:	4a07      	ldr	r2, [pc, #28]	; (8006c34 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8006c18:	441a      	add	r2, r3
 8006c1a:	69bb      	ldr	r3, [r7, #24]
 8006c1c:	3304      	adds	r3, #4
 8006c1e:	4619      	mov	r1, r3
 8006c20:	4610      	mov	r0, r2
 8006c22:	f7fd fea4 	bl	800496e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006c26:	bf00      	nop
 8006c28:	3720      	adds	r7, #32
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bd80      	pop	{r7, pc}
 8006c2e:	bf00      	nop
 8006c30:	20000824 	.word	0x20000824
 8006c34:	20000828 	.word	0x20000828
 8006c38:	20000d00 	.word	0x20000d00

08006c3c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006c3c:	b480      	push	{r7}
 8006c3e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006c40:	4b07      	ldr	r3, [pc, #28]	; (8006c60 <pvTaskIncrementMutexHeldCount+0x24>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d004      	beq.n	8006c52 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006c48:	4b05      	ldr	r3, [pc, #20]	; (8006c60 <pvTaskIncrementMutexHeldCount+0x24>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006c4e:	3201      	adds	r2, #1
 8006c50:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8006c52:	4b03      	ldr	r3, [pc, #12]	; (8006c60 <pvTaskIncrementMutexHeldCount+0x24>)
 8006c54:	681b      	ldr	r3, [r3, #0]
	}
 8006c56:	4618      	mov	r0, r3
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5e:	4770      	bx	lr
 8006c60:	20000824 	.word	0x20000824

08006c64 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b084      	sub	sp, #16
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
 8006c6c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006c6e:	4b21      	ldr	r3, [pc, #132]	; (8006cf4 <prvAddCurrentTaskToDelayedList+0x90>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006c74:	4b20      	ldr	r3, [pc, #128]	; (8006cf8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	3304      	adds	r3, #4
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	f7fd fed4 	bl	8004a28 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c86:	d10a      	bne.n	8006c9e <prvAddCurrentTaskToDelayedList+0x3a>
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d007      	beq.n	8006c9e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006c8e:	4b1a      	ldr	r3, [pc, #104]	; (8006cf8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	3304      	adds	r3, #4
 8006c94:	4619      	mov	r1, r3
 8006c96:	4819      	ldr	r0, [pc, #100]	; (8006cfc <prvAddCurrentTaskToDelayedList+0x98>)
 8006c98:	f7fd fe69 	bl	800496e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006c9c:	e026      	b.n	8006cec <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006c9e:	68fa      	ldr	r2, [r7, #12]
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	4413      	add	r3, r2
 8006ca4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006ca6:	4b14      	ldr	r3, [pc, #80]	; (8006cf8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	68ba      	ldr	r2, [r7, #8]
 8006cac:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006cae:	68ba      	ldr	r2, [r7, #8]
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	429a      	cmp	r2, r3
 8006cb4:	d209      	bcs.n	8006cca <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006cb6:	4b12      	ldr	r3, [pc, #72]	; (8006d00 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006cb8:	681a      	ldr	r2, [r3, #0]
 8006cba:	4b0f      	ldr	r3, [pc, #60]	; (8006cf8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	3304      	adds	r3, #4
 8006cc0:	4619      	mov	r1, r3
 8006cc2:	4610      	mov	r0, r2
 8006cc4:	f7fd fe77 	bl	80049b6 <vListInsert>
}
 8006cc8:	e010      	b.n	8006cec <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006cca:	4b0e      	ldr	r3, [pc, #56]	; (8006d04 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006ccc:	681a      	ldr	r2, [r3, #0]
 8006cce:	4b0a      	ldr	r3, [pc, #40]	; (8006cf8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	3304      	adds	r3, #4
 8006cd4:	4619      	mov	r1, r3
 8006cd6:	4610      	mov	r0, r2
 8006cd8:	f7fd fe6d 	bl	80049b6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006cdc:	4b0a      	ldr	r3, [pc, #40]	; (8006d08 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	68ba      	ldr	r2, [r7, #8]
 8006ce2:	429a      	cmp	r2, r3
 8006ce4:	d202      	bcs.n	8006cec <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006ce6:	4a08      	ldr	r2, [pc, #32]	; (8006d08 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	6013      	str	r3, [r2, #0]
}
 8006cec:	bf00      	nop
 8006cee:	3710      	adds	r7, #16
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bd80      	pop	{r7, pc}
 8006cf4:	20000cfc 	.word	0x20000cfc
 8006cf8:	20000824 	.word	0x20000824
 8006cfc:	20000ce4 	.word	0x20000ce4
 8006d00:	20000cb4 	.word	0x20000cb4
 8006d04:	20000cb0 	.word	0x20000cb0
 8006d08:	20000d18 	.word	0x20000d18

08006d0c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b08a      	sub	sp, #40	; 0x28
 8006d10:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006d12:	2300      	movs	r3, #0
 8006d14:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006d16:	f000 fb07 	bl	8007328 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006d1a:	4b1c      	ldr	r3, [pc, #112]	; (8006d8c <xTimerCreateTimerTask+0x80>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d021      	beq.n	8006d66 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006d22:	2300      	movs	r3, #0
 8006d24:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006d26:	2300      	movs	r3, #0
 8006d28:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006d2a:	1d3a      	adds	r2, r7, #4
 8006d2c:	f107 0108 	add.w	r1, r7, #8
 8006d30:	f107 030c 	add.w	r3, r7, #12
 8006d34:	4618      	mov	r0, r3
 8006d36:	f7fd fdd3 	bl	80048e0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006d3a:	6879      	ldr	r1, [r7, #4]
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	68fa      	ldr	r2, [r7, #12]
 8006d40:	9202      	str	r2, [sp, #8]
 8006d42:	9301      	str	r3, [sp, #4]
 8006d44:	2302      	movs	r3, #2
 8006d46:	9300      	str	r3, [sp, #0]
 8006d48:	2300      	movs	r3, #0
 8006d4a:	460a      	mov	r2, r1
 8006d4c:	4910      	ldr	r1, [pc, #64]	; (8006d90 <xTimerCreateTimerTask+0x84>)
 8006d4e:	4811      	ldr	r0, [pc, #68]	; (8006d94 <xTimerCreateTimerTask+0x88>)
 8006d50:	f7fe ff94 	bl	8005c7c <xTaskCreateStatic>
 8006d54:	4603      	mov	r3, r0
 8006d56:	4a10      	ldr	r2, [pc, #64]	; (8006d98 <xTimerCreateTimerTask+0x8c>)
 8006d58:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006d5a:	4b0f      	ldr	r3, [pc, #60]	; (8006d98 <xTimerCreateTimerTask+0x8c>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d001      	beq.n	8006d66 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006d62:	2301      	movs	r3, #1
 8006d64:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006d66:	697b      	ldr	r3, [r7, #20]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d10a      	bne.n	8006d82 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d70:	f383 8811 	msr	BASEPRI, r3
 8006d74:	f3bf 8f6f 	isb	sy
 8006d78:	f3bf 8f4f 	dsb	sy
 8006d7c:	613b      	str	r3, [r7, #16]
}
 8006d7e:	bf00      	nop
 8006d80:	e7fe      	b.n	8006d80 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006d82:	697b      	ldr	r3, [r7, #20]
}
 8006d84:	4618      	mov	r0, r3
 8006d86:	3718      	adds	r7, #24
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	bd80      	pop	{r7, pc}
 8006d8c:	20000d54 	.word	0x20000d54
 8006d90:	080163ec 	.word	0x080163ec
 8006d94:	08006ed1 	.word	0x08006ed1
 8006d98:	20000d58 	.word	0x20000d58

08006d9c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b08a      	sub	sp, #40	; 0x28
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	60f8      	str	r0, [r7, #12]
 8006da4:	60b9      	str	r1, [r7, #8]
 8006da6:	607a      	str	r2, [r7, #4]
 8006da8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006daa:	2300      	movs	r3, #0
 8006dac:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d10a      	bne.n	8006dca <xTimerGenericCommand+0x2e>
	__asm volatile
 8006db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006db8:	f383 8811 	msr	BASEPRI, r3
 8006dbc:	f3bf 8f6f 	isb	sy
 8006dc0:	f3bf 8f4f 	dsb	sy
 8006dc4:	623b      	str	r3, [r7, #32]
}
 8006dc6:	bf00      	nop
 8006dc8:	e7fe      	b.n	8006dc8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006dca:	4b1a      	ldr	r3, [pc, #104]	; (8006e34 <xTimerGenericCommand+0x98>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d02a      	beq.n	8006e28 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	2b05      	cmp	r3, #5
 8006de2:	dc18      	bgt.n	8006e16 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006de4:	f7ff fdb4 	bl	8006950 <xTaskGetSchedulerState>
 8006de8:	4603      	mov	r3, r0
 8006dea:	2b02      	cmp	r3, #2
 8006dec:	d109      	bne.n	8006e02 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006dee:	4b11      	ldr	r3, [pc, #68]	; (8006e34 <xTimerGenericCommand+0x98>)
 8006df0:	6818      	ldr	r0, [r3, #0]
 8006df2:	f107 0110 	add.w	r1, r7, #16
 8006df6:	2300      	movs	r3, #0
 8006df8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006dfa:	f7fe f89d 	bl	8004f38 <xQueueGenericSend>
 8006dfe:	6278      	str	r0, [r7, #36]	; 0x24
 8006e00:	e012      	b.n	8006e28 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006e02:	4b0c      	ldr	r3, [pc, #48]	; (8006e34 <xTimerGenericCommand+0x98>)
 8006e04:	6818      	ldr	r0, [r3, #0]
 8006e06:	f107 0110 	add.w	r1, r7, #16
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	f7fe f893 	bl	8004f38 <xQueueGenericSend>
 8006e12:	6278      	str	r0, [r7, #36]	; 0x24
 8006e14:	e008      	b.n	8006e28 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006e16:	4b07      	ldr	r3, [pc, #28]	; (8006e34 <xTimerGenericCommand+0x98>)
 8006e18:	6818      	ldr	r0, [r3, #0]
 8006e1a:	f107 0110 	add.w	r1, r7, #16
 8006e1e:	2300      	movs	r3, #0
 8006e20:	683a      	ldr	r2, [r7, #0]
 8006e22:	f7fe f987 	bl	8005134 <xQueueGenericSendFromISR>
 8006e26:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	3728      	adds	r7, #40	; 0x28
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bd80      	pop	{r7, pc}
 8006e32:	bf00      	nop
 8006e34:	20000d54 	.word	0x20000d54

08006e38 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b088      	sub	sp, #32
 8006e3c:	af02      	add	r7, sp, #8
 8006e3e:	6078      	str	r0, [r7, #4]
 8006e40:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e42:	4b22      	ldr	r3, [pc, #136]	; (8006ecc <prvProcessExpiredTimer+0x94>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	68db      	ldr	r3, [r3, #12]
 8006e48:	68db      	ldr	r3, [r3, #12]
 8006e4a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006e4c:	697b      	ldr	r3, [r7, #20]
 8006e4e:	3304      	adds	r3, #4
 8006e50:	4618      	mov	r0, r3
 8006e52:	f7fd fde9 	bl	8004a28 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006e56:	697b      	ldr	r3, [r7, #20]
 8006e58:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006e5c:	f003 0304 	and.w	r3, r3, #4
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d022      	beq.n	8006eaa <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006e64:	697b      	ldr	r3, [r7, #20]
 8006e66:	699a      	ldr	r2, [r3, #24]
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	18d1      	adds	r1, r2, r3
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	683a      	ldr	r2, [r7, #0]
 8006e70:	6978      	ldr	r0, [r7, #20]
 8006e72:	f000 f8d1 	bl	8007018 <prvInsertTimerInActiveList>
 8006e76:	4603      	mov	r3, r0
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d01f      	beq.n	8006ebc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	9300      	str	r3, [sp, #0]
 8006e80:	2300      	movs	r3, #0
 8006e82:	687a      	ldr	r2, [r7, #4]
 8006e84:	2100      	movs	r1, #0
 8006e86:	6978      	ldr	r0, [r7, #20]
 8006e88:	f7ff ff88 	bl	8006d9c <xTimerGenericCommand>
 8006e8c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006e8e:	693b      	ldr	r3, [r7, #16]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d113      	bne.n	8006ebc <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e98:	f383 8811 	msr	BASEPRI, r3
 8006e9c:	f3bf 8f6f 	isb	sy
 8006ea0:	f3bf 8f4f 	dsb	sy
 8006ea4:	60fb      	str	r3, [r7, #12]
}
 8006ea6:	bf00      	nop
 8006ea8:	e7fe      	b.n	8006ea8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006eaa:	697b      	ldr	r3, [r7, #20]
 8006eac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006eb0:	f023 0301 	bic.w	r3, r3, #1
 8006eb4:	b2da      	uxtb	r2, r3
 8006eb6:	697b      	ldr	r3, [r7, #20]
 8006eb8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006ebc:	697b      	ldr	r3, [r7, #20]
 8006ebe:	6a1b      	ldr	r3, [r3, #32]
 8006ec0:	6978      	ldr	r0, [r7, #20]
 8006ec2:	4798      	blx	r3
}
 8006ec4:	bf00      	nop
 8006ec6:	3718      	adds	r7, #24
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	bd80      	pop	{r7, pc}
 8006ecc:	20000d4c 	.word	0x20000d4c

08006ed0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b084      	sub	sp, #16
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006ed8:	f107 0308 	add.w	r3, r7, #8
 8006edc:	4618      	mov	r0, r3
 8006ede:	f000 f857 	bl	8006f90 <prvGetNextExpireTime>
 8006ee2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	4619      	mov	r1, r3
 8006ee8:	68f8      	ldr	r0, [r7, #12]
 8006eea:	f000 f803 	bl	8006ef4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006eee:	f000 f8d5 	bl	800709c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006ef2:	e7f1      	b.n	8006ed8 <prvTimerTask+0x8>

08006ef4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b084      	sub	sp, #16
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
 8006efc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006efe:	f7ff f919 	bl	8006134 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006f02:	f107 0308 	add.w	r3, r7, #8
 8006f06:	4618      	mov	r0, r3
 8006f08:	f000 f866 	bl	8006fd8 <prvSampleTimeNow>
 8006f0c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d130      	bne.n	8006f76 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d10a      	bne.n	8006f30 <prvProcessTimerOrBlockTask+0x3c>
 8006f1a:	687a      	ldr	r2, [r7, #4]
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	429a      	cmp	r2, r3
 8006f20:	d806      	bhi.n	8006f30 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006f22:	f7ff f915 	bl	8006150 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006f26:	68f9      	ldr	r1, [r7, #12]
 8006f28:	6878      	ldr	r0, [r7, #4]
 8006f2a:	f7ff ff85 	bl	8006e38 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006f2e:	e024      	b.n	8006f7a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d008      	beq.n	8006f48 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006f36:	4b13      	ldr	r3, [pc, #76]	; (8006f84 <prvProcessTimerOrBlockTask+0x90>)
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d101      	bne.n	8006f44 <prvProcessTimerOrBlockTask+0x50>
 8006f40:	2301      	movs	r3, #1
 8006f42:	e000      	b.n	8006f46 <prvProcessTimerOrBlockTask+0x52>
 8006f44:	2300      	movs	r3, #0
 8006f46:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006f48:	4b0f      	ldr	r3, [pc, #60]	; (8006f88 <prvProcessTimerOrBlockTask+0x94>)
 8006f4a:	6818      	ldr	r0, [r3, #0]
 8006f4c:	687a      	ldr	r2, [r7, #4]
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	1ad3      	subs	r3, r2, r3
 8006f52:	683a      	ldr	r2, [r7, #0]
 8006f54:	4619      	mov	r1, r3
 8006f56:	f7fe fe5d 	bl	8005c14 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006f5a:	f7ff f8f9 	bl	8006150 <xTaskResumeAll>
 8006f5e:	4603      	mov	r3, r0
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d10a      	bne.n	8006f7a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006f64:	4b09      	ldr	r3, [pc, #36]	; (8006f8c <prvProcessTimerOrBlockTask+0x98>)
 8006f66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f6a:	601a      	str	r2, [r3, #0]
 8006f6c:	f3bf 8f4f 	dsb	sy
 8006f70:	f3bf 8f6f 	isb	sy
}
 8006f74:	e001      	b.n	8006f7a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006f76:	f7ff f8eb 	bl	8006150 <xTaskResumeAll>
}
 8006f7a:	bf00      	nop
 8006f7c:	3710      	adds	r7, #16
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	bd80      	pop	{r7, pc}
 8006f82:	bf00      	nop
 8006f84:	20000d50 	.word	0x20000d50
 8006f88:	20000d54 	.word	0x20000d54
 8006f8c:	e000ed04 	.word	0xe000ed04

08006f90 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006f90:	b480      	push	{r7}
 8006f92:	b085      	sub	sp, #20
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006f98:	4b0e      	ldr	r3, [pc, #56]	; (8006fd4 <prvGetNextExpireTime+0x44>)
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d101      	bne.n	8006fa6 <prvGetNextExpireTime+0x16>
 8006fa2:	2201      	movs	r2, #1
 8006fa4:	e000      	b.n	8006fa8 <prvGetNextExpireTime+0x18>
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d105      	bne.n	8006fc0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006fb4:	4b07      	ldr	r3, [pc, #28]	; (8006fd4 <prvGetNextExpireTime+0x44>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	68db      	ldr	r3, [r3, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	60fb      	str	r3, [r7, #12]
 8006fbe:	e001      	b.n	8006fc4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
}
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	3714      	adds	r7, #20
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd0:	4770      	bx	lr
 8006fd2:	bf00      	nop
 8006fd4:	20000d4c 	.word	0x20000d4c

08006fd8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b084      	sub	sp, #16
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006fe0:	f7ff f954 	bl	800628c <xTaskGetTickCount>
 8006fe4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006fe6:	4b0b      	ldr	r3, [pc, #44]	; (8007014 <prvSampleTimeNow+0x3c>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	68fa      	ldr	r2, [r7, #12]
 8006fec:	429a      	cmp	r2, r3
 8006fee:	d205      	bcs.n	8006ffc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006ff0:	f000 f936 	bl	8007260 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2201      	movs	r2, #1
 8006ff8:	601a      	str	r2, [r3, #0]
 8006ffa:	e002      	b.n	8007002 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2200      	movs	r2, #0
 8007000:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007002:	4a04      	ldr	r2, [pc, #16]	; (8007014 <prvSampleTimeNow+0x3c>)
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007008:	68fb      	ldr	r3, [r7, #12]
}
 800700a:	4618      	mov	r0, r3
 800700c:	3710      	adds	r7, #16
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}
 8007012:	bf00      	nop
 8007014:	20000d5c 	.word	0x20000d5c

08007018 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b086      	sub	sp, #24
 800701c:	af00      	add	r7, sp, #0
 800701e:	60f8      	str	r0, [r7, #12]
 8007020:	60b9      	str	r1, [r7, #8]
 8007022:	607a      	str	r2, [r7, #4]
 8007024:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007026:	2300      	movs	r3, #0
 8007028:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	68ba      	ldr	r2, [r7, #8]
 800702e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	68fa      	ldr	r2, [r7, #12]
 8007034:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007036:	68ba      	ldr	r2, [r7, #8]
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	429a      	cmp	r2, r3
 800703c:	d812      	bhi.n	8007064 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800703e:	687a      	ldr	r2, [r7, #4]
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	1ad2      	subs	r2, r2, r3
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	699b      	ldr	r3, [r3, #24]
 8007048:	429a      	cmp	r2, r3
 800704a:	d302      	bcc.n	8007052 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800704c:	2301      	movs	r3, #1
 800704e:	617b      	str	r3, [r7, #20]
 8007050:	e01b      	b.n	800708a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007052:	4b10      	ldr	r3, [pc, #64]	; (8007094 <prvInsertTimerInActiveList+0x7c>)
 8007054:	681a      	ldr	r2, [r3, #0]
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	3304      	adds	r3, #4
 800705a:	4619      	mov	r1, r3
 800705c:	4610      	mov	r0, r2
 800705e:	f7fd fcaa 	bl	80049b6 <vListInsert>
 8007062:	e012      	b.n	800708a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007064:	687a      	ldr	r2, [r7, #4]
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	429a      	cmp	r2, r3
 800706a:	d206      	bcs.n	800707a <prvInsertTimerInActiveList+0x62>
 800706c:	68ba      	ldr	r2, [r7, #8]
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	429a      	cmp	r2, r3
 8007072:	d302      	bcc.n	800707a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007074:	2301      	movs	r3, #1
 8007076:	617b      	str	r3, [r7, #20]
 8007078:	e007      	b.n	800708a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800707a:	4b07      	ldr	r3, [pc, #28]	; (8007098 <prvInsertTimerInActiveList+0x80>)
 800707c:	681a      	ldr	r2, [r3, #0]
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	3304      	adds	r3, #4
 8007082:	4619      	mov	r1, r3
 8007084:	4610      	mov	r0, r2
 8007086:	f7fd fc96 	bl	80049b6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800708a:	697b      	ldr	r3, [r7, #20]
}
 800708c:	4618      	mov	r0, r3
 800708e:	3718      	adds	r7, #24
 8007090:	46bd      	mov	sp, r7
 8007092:	bd80      	pop	{r7, pc}
 8007094:	20000d50 	.word	0x20000d50
 8007098:	20000d4c 	.word	0x20000d4c

0800709c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b08e      	sub	sp, #56	; 0x38
 80070a0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80070a2:	e0ca      	b.n	800723a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	da18      	bge.n	80070dc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80070aa:	1d3b      	adds	r3, r7, #4
 80070ac:	3304      	adds	r3, #4
 80070ae:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80070b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d10a      	bne.n	80070cc <prvProcessReceivedCommands+0x30>
	__asm volatile
 80070b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070ba:	f383 8811 	msr	BASEPRI, r3
 80070be:	f3bf 8f6f 	isb	sy
 80070c2:	f3bf 8f4f 	dsb	sy
 80070c6:	61fb      	str	r3, [r7, #28]
}
 80070c8:	bf00      	nop
 80070ca:	e7fe      	b.n	80070ca <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80070cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80070d2:	6850      	ldr	r0, [r2, #4]
 80070d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80070d6:	6892      	ldr	r2, [r2, #8]
 80070d8:	4611      	mov	r1, r2
 80070da:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	f2c0 80aa 	blt.w	8007238 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80070e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070ea:	695b      	ldr	r3, [r3, #20]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d004      	beq.n	80070fa <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80070f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070f2:	3304      	adds	r3, #4
 80070f4:	4618      	mov	r0, r3
 80070f6:	f7fd fc97 	bl	8004a28 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80070fa:	463b      	mov	r3, r7
 80070fc:	4618      	mov	r0, r3
 80070fe:	f7ff ff6b 	bl	8006fd8 <prvSampleTimeNow>
 8007102:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2b09      	cmp	r3, #9
 8007108:	f200 8097 	bhi.w	800723a <prvProcessReceivedCommands+0x19e>
 800710c:	a201      	add	r2, pc, #4	; (adr r2, 8007114 <prvProcessReceivedCommands+0x78>)
 800710e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007112:	bf00      	nop
 8007114:	0800713d 	.word	0x0800713d
 8007118:	0800713d 	.word	0x0800713d
 800711c:	0800713d 	.word	0x0800713d
 8007120:	080071b1 	.word	0x080071b1
 8007124:	080071c5 	.word	0x080071c5
 8007128:	0800720f 	.word	0x0800720f
 800712c:	0800713d 	.word	0x0800713d
 8007130:	0800713d 	.word	0x0800713d
 8007134:	080071b1 	.word	0x080071b1
 8007138:	080071c5 	.word	0x080071c5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800713c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800713e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007142:	f043 0301 	orr.w	r3, r3, #1
 8007146:	b2da      	uxtb	r2, r3
 8007148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800714a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800714e:	68ba      	ldr	r2, [r7, #8]
 8007150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007152:	699b      	ldr	r3, [r3, #24]
 8007154:	18d1      	adds	r1, r2, r3
 8007156:	68bb      	ldr	r3, [r7, #8]
 8007158:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800715a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800715c:	f7ff ff5c 	bl	8007018 <prvInsertTimerInActiveList>
 8007160:	4603      	mov	r3, r0
 8007162:	2b00      	cmp	r3, #0
 8007164:	d069      	beq.n	800723a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007168:	6a1b      	ldr	r3, [r3, #32]
 800716a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800716c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800716e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007170:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007174:	f003 0304 	and.w	r3, r3, #4
 8007178:	2b00      	cmp	r3, #0
 800717a:	d05e      	beq.n	800723a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800717c:	68ba      	ldr	r2, [r7, #8]
 800717e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007180:	699b      	ldr	r3, [r3, #24]
 8007182:	441a      	add	r2, r3
 8007184:	2300      	movs	r3, #0
 8007186:	9300      	str	r3, [sp, #0]
 8007188:	2300      	movs	r3, #0
 800718a:	2100      	movs	r1, #0
 800718c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800718e:	f7ff fe05 	bl	8006d9c <xTimerGenericCommand>
 8007192:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007194:	6a3b      	ldr	r3, [r7, #32]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d14f      	bne.n	800723a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800719a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800719e:	f383 8811 	msr	BASEPRI, r3
 80071a2:	f3bf 8f6f 	isb	sy
 80071a6:	f3bf 8f4f 	dsb	sy
 80071aa:	61bb      	str	r3, [r7, #24]
}
 80071ac:	bf00      	nop
 80071ae:	e7fe      	b.n	80071ae <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80071b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80071b6:	f023 0301 	bic.w	r3, r3, #1
 80071ba:	b2da      	uxtb	r2, r3
 80071bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80071c2:	e03a      	b.n	800723a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80071c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80071ca:	f043 0301 	orr.w	r3, r3, #1
 80071ce:	b2da      	uxtb	r2, r3
 80071d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80071d6:	68ba      	ldr	r2, [r7, #8]
 80071d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071da:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80071dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071de:	699b      	ldr	r3, [r3, #24]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d10a      	bne.n	80071fa <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80071e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071e8:	f383 8811 	msr	BASEPRI, r3
 80071ec:	f3bf 8f6f 	isb	sy
 80071f0:	f3bf 8f4f 	dsb	sy
 80071f4:	617b      	str	r3, [r7, #20]
}
 80071f6:	bf00      	nop
 80071f8:	e7fe      	b.n	80071f8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80071fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071fc:	699a      	ldr	r2, [r3, #24]
 80071fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007200:	18d1      	adds	r1, r2, r3
 8007202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007204:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007206:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007208:	f7ff ff06 	bl	8007018 <prvInsertTimerInActiveList>
					break;
 800720c:	e015      	b.n	800723a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800720e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007210:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007214:	f003 0302 	and.w	r3, r3, #2
 8007218:	2b00      	cmp	r3, #0
 800721a:	d103      	bne.n	8007224 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800721c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800721e:	f000 fbdf 	bl	80079e0 <vPortFree>
 8007222:	e00a      	b.n	800723a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007226:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800722a:	f023 0301 	bic.w	r3, r3, #1
 800722e:	b2da      	uxtb	r2, r3
 8007230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007232:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007236:	e000      	b.n	800723a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007238:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800723a:	4b08      	ldr	r3, [pc, #32]	; (800725c <prvProcessReceivedCommands+0x1c0>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	1d39      	adds	r1, r7, #4
 8007240:	2200      	movs	r2, #0
 8007242:	4618      	mov	r0, r3
 8007244:	f7fe f89e 	bl	8005384 <xQueueReceive>
 8007248:	4603      	mov	r3, r0
 800724a:	2b00      	cmp	r3, #0
 800724c:	f47f af2a 	bne.w	80070a4 <prvProcessReceivedCommands+0x8>
	}
}
 8007250:	bf00      	nop
 8007252:	bf00      	nop
 8007254:	3730      	adds	r7, #48	; 0x30
 8007256:	46bd      	mov	sp, r7
 8007258:	bd80      	pop	{r7, pc}
 800725a:	bf00      	nop
 800725c:	20000d54 	.word	0x20000d54

08007260 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b088      	sub	sp, #32
 8007264:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007266:	e048      	b.n	80072fa <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007268:	4b2d      	ldr	r3, [pc, #180]	; (8007320 <prvSwitchTimerLists+0xc0>)
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	68db      	ldr	r3, [r3, #12]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007272:	4b2b      	ldr	r3, [pc, #172]	; (8007320 <prvSwitchTimerLists+0xc0>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	68db      	ldr	r3, [r3, #12]
 8007278:	68db      	ldr	r3, [r3, #12]
 800727a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	3304      	adds	r3, #4
 8007280:	4618      	mov	r0, r3
 8007282:	f7fd fbd1 	bl	8004a28 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	6a1b      	ldr	r3, [r3, #32]
 800728a:	68f8      	ldr	r0, [r7, #12]
 800728c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007294:	f003 0304 	and.w	r3, r3, #4
 8007298:	2b00      	cmp	r3, #0
 800729a:	d02e      	beq.n	80072fa <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	699b      	ldr	r3, [r3, #24]
 80072a0:	693a      	ldr	r2, [r7, #16]
 80072a2:	4413      	add	r3, r2
 80072a4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80072a6:	68ba      	ldr	r2, [r7, #8]
 80072a8:	693b      	ldr	r3, [r7, #16]
 80072aa:	429a      	cmp	r2, r3
 80072ac:	d90e      	bls.n	80072cc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	68ba      	ldr	r2, [r7, #8]
 80072b2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	68fa      	ldr	r2, [r7, #12]
 80072b8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80072ba:	4b19      	ldr	r3, [pc, #100]	; (8007320 <prvSwitchTimerLists+0xc0>)
 80072bc:	681a      	ldr	r2, [r3, #0]
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	3304      	adds	r3, #4
 80072c2:	4619      	mov	r1, r3
 80072c4:	4610      	mov	r0, r2
 80072c6:	f7fd fb76 	bl	80049b6 <vListInsert>
 80072ca:	e016      	b.n	80072fa <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80072cc:	2300      	movs	r3, #0
 80072ce:	9300      	str	r3, [sp, #0]
 80072d0:	2300      	movs	r3, #0
 80072d2:	693a      	ldr	r2, [r7, #16]
 80072d4:	2100      	movs	r1, #0
 80072d6:	68f8      	ldr	r0, [r7, #12]
 80072d8:	f7ff fd60 	bl	8006d9c <xTimerGenericCommand>
 80072dc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d10a      	bne.n	80072fa <prvSwitchTimerLists+0x9a>
	__asm volatile
 80072e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072e8:	f383 8811 	msr	BASEPRI, r3
 80072ec:	f3bf 8f6f 	isb	sy
 80072f0:	f3bf 8f4f 	dsb	sy
 80072f4:	603b      	str	r3, [r7, #0]
}
 80072f6:	bf00      	nop
 80072f8:	e7fe      	b.n	80072f8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80072fa:	4b09      	ldr	r3, [pc, #36]	; (8007320 <prvSwitchTimerLists+0xc0>)
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d1b1      	bne.n	8007268 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007304:	4b06      	ldr	r3, [pc, #24]	; (8007320 <prvSwitchTimerLists+0xc0>)
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800730a:	4b06      	ldr	r3, [pc, #24]	; (8007324 <prvSwitchTimerLists+0xc4>)
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	4a04      	ldr	r2, [pc, #16]	; (8007320 <prvSwitchTimerLists+0xc0>)
 8007310:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007312:	4a04      	ldr	r2, [pc, #16]	; (8007324 <prvSwitchTimerLists+0xc4>)
 8007314:	697b      	ldr	r3, [r7, #20]
 8007316:	6013      	str	r3, [r2, #0]
}
 8007318:	bf00      	nop
 800731a:	3718      	adds	r7, #24
 800731c:	46bd      	mov	sp, r7
 800731e:	bd80      	pop	{r7, pc}
 8007320:	20000d4c 	.word	0x20000d4c
 8007324:	20000d50 	.word	0x20000d50

08007328 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b082      	sub	sp, #8
 800732c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800732e:	f000 f969 	bl	8007604 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007332:	4b15      	ldr	r3, [pc, #84]	; (8007388 <prvCheckForValidListAndQueue+0x60>)
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d120      	bne.n	800737c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800733a:	4814      	ldr	r0, [pc, #80]	; (800738c <prvCheckForValidListAndQueue+0x64>)
 800733c:	f7fd faea 	bl	8004914 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007340:	4813      	ldr	r0, [pc, #76]	; (8007390 <prvCheckForValidListAndQueue+0x68>)
 8007342:	f7fd fae7 	bl	8004914 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007346:	4b13      	ldr	r3, [pc, #76]	; (8007394 <prvCheckForValidListAndQueue+0x6c>)
 8007348:	4a10      	ldr	r2, [pc, #64]	; (800738c <prvCheckForValidListAndQueue+0x64>)
 800734a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800734c:	4b12      	ldr	r3, [pc, #72]	; (8007398 <prvCheckForValidListAndQueue+0x70>)
 800734e:	4a10      	ldr	r2, [pc, #64]	; (8007390 <prvCheckForValidListAndQueue+0x68>)
 8007350:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007352:	2300      	movs	r3, #0
 8007354:	9300      	str	r3, [sp, #0]
 8007356:	4b11      	ldr	r3, [pc, #68]	; (800739c <prvCheckForValidListAndQueue+0x74>)
 8007358:	4a11      	ldr	r2, [pc, #68]	; (80073a0 <prvCheckForValidListAndQueue+0x78>)
 800735a:	2110      	movs	r1, #16
 800735c:	200a      	movs	r0, #10
 800735e:	f7fd fbf5 	bl	8004b4c <xQueueGenericCreateStatic>
 8007362:	4603      	mov	r3, r0
 8007364:	4a08      	ldr	r2, [pc, #32]	; (8007388 <prvCheckForValidListAndQueue+0x60>)
 8007366:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007368:	4b07      	ldr	r3, [pc, #28]	; (8007388 <prvCheckForValidListAndQueue+0x60>)
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d005      	beq.n	800737c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007370:	4b05      	ldr	r3, [pc, #20]	; (8007388 <prvCheckForValidListAndQueue+0x60>)
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	490b      	ldr	r1, [pc, #44]	; (80073a4 <prvCheckForValidListAndQueue+0x7c>)
 8007376:	4618      	mov	r0, r3
 8007378:	f7fe fbf8 	bl	8005b6c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800737c:	f000 f972 	bl	8007664 <vPortExitCritical>
}
 8007380:	bf00      	nop
 8007382:	46bd      	mov	sp, r7
 8007384:	bd80      	pop	{r7, pc}
 8007386:	bf00      	nop
 8007388:	20000d54 	.word	0x20000d54
 800738c:	20000d24 	.word	0x20000d24
 8007390:	20000d38 	.word	0x20000d38
 8007394:	20000d4c 	.word	0x20000d4c
 8007398:	20000d50 	.word	0x20000d50
 800739c:	20000e00 	.word	0x20000e00
 80073a0:	20000d60 	.word	0x20000d60
 80073a4:	080163f4 	.word	0x080163f4

080073a8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80073a8:	b480      	push	{r7}
 80073aa:	b085      	sub	sp, #20
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	60f8      	str	r0, [r7, #12]
 80073b0:	60b9      	str	r1, [r7, #8]
 80073b2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	3b04      	subs	r3, #4
 80073b8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80073c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	3b04      	subs	r3, #4
 80073c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	f023 0201 	bic.w	r2, r3, #1
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	3b04      	subs	r3, #4
 80073d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80073d8:	4a0c      	ldr	r2, [pc, #48]	; (800740c <pxPortInitialiseStack+0x64>)
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	3b14      	subs	r3, #20
 80073e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80073e4:	687a      	ldr	r2, [r7, #4]
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	3b04      	subs	r3, #4
 80073ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	f06f 0202 	mvn.w	r2, #2
 80073f6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	3b20      	subs	r3, #32
 80073fc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80073fe:	68fb      	ldr	r3, [r7, #12]
}
 8007400:	4618      	mov	r0, r3
 8007402:	3714      	adds	r7, #20
 8007404:	46bd      	mov	sp, r7
 8007406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740a:	4770      	bx	lr
 800740c:	08007411 	.word	0x08007411

08007410 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007410:	b480      	push	{r7}
 8007412:	b085      	sub	sp, #20
 8007414:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007416:	2300      	movs	r3, #0
 8007418:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800741a:	4b12      	ldr	r3, [pc, #72]	; (8007464 <prvTaskExitError+0x54>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007422:	d00a      	beq.n	800743a <prvTaskExitError+0x2a>
	__asm volatile
 8007424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007428:	f383 8811 	msr	BASEPRI, r3
 800742c:	f3bf 8f6f 	isb	sy
 8007430:	f3bf 8f4f 	dsb	sy
 8007434:	60fb      	str	r3, [r7, #12]
}
 8007436:	bf00      	nop
 8007438:	e7fe      	b.n	8007438 <prvTaskExitError+0x28>
	__asm volatile
 800743a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800743e:	f383 8811 	msr	BASEPRI, r3
 8007442:	f3bf 8f6f 	isb	sy
 8007446:	f3bf 8f4f 	dsb	sy
 800744a:	60bb      	str	r3, [r7, #8]
}
 800744c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800744e:	bf00      	nop
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d0fc      	beq.n	8007450 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007456:	bf00      	nop
 8007458:	bf00      	nop
 800745a:	3714      	adds	r7, #20
 800745c:	46bd      	mov	sp, r7
 800745e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007462:	4770      	bx	lr
 8007464:	2000000c 	.word	0x2000000c
	...

08007470 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007470:	4b07      	ldr	r3, [pc, #28]	; (8007490 <pxCurrentTCBConst2>)
 8007472:	6819      	ldr	r1, [r3, #0]
 8007474:	6808      	ldr	r0, [r1, #0]
 8007476:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800747a:	f380 8809 	msr	PSP, r0
 800747e:	f3bf 8f6f 	isb	sy
 8007482:	f04f 0000 	mov.w	r0, #0
 8007486:	f380 8811 	msr	BASEPRI, r0
 800748a:	4770      	bx	lr
 800748c:	f3af 8000 	nop.w

08007490 <pxCurrentTCBConst2>:
 8007490:	20000824 	.word	0x20000824
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007494:	bf00      	nop
 8007496:	bf00      	nop

08007498 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007498:	4808      	ldr	r0, [pc, #32]	; (80074bc <prvPortStartFirstTask+0x24>)
 800749a:	6800      	ldr	r0, [r0, #0]
 800749c:	6800      	ldr	r0, [r0, #0]
 800749e:	f380 8808 	msr	MSP, r0
 80074a2:	f04f 0000 	mov.w	r0, #0
 80074a6:	f380 8814 	msr	CONTROL, r0
 80074aa:	b662      	cpsie	i
 80074ac:	b661      	cpsie	f
 80074ae:	f3bf 8f4f 	dsb	sy
 80074b2:	f3bf 8f6f 	isb	sy
 80074b6:	df00      	svc	0
 80074b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80074ba:	bf00      	nop
 80074bc:	e000ed08 	.word	0xe000ed08

080074c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b086      	sub	sp, #24
 80074c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80074c6:	4b46      	ldr	r3, [pc, #280]	; (80075e0 <xPortStartScheduler+0x120>)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	4a46      	ldr	r2, [pc, #280]	; (80075e4 <xPortStartScheduler+0x124>)
 80074cc:	4293      	cmp	r3, r2
 80074ce:	d10a      	bne.n	80074e6 <xPortStartScheduler+0x26>
	__asm volatile
 80074d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074d4:	f383 8811 	msr	BASEPRI, r3
 80074d8:	f3bf 8f6f 	isb	sy
 80074dc:	f3bf 8f4f 	dsb	sy
 80074e0:	613b      	str	r3, [r7, #16]
}
 80074e2:	bf00      	nop
 80074e4:	e7fe      	b.n	80074e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80074e6:	4b3e      	ldr	r3, [pc, #248]	; (80075e0 <xPortStartScheduler+0x120>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	4a3f      	ldr	r2, [pc, #252]	; (80075e8 <xPortStartScheduler+0x128>)
 80074ec:	4293      	cmp	r3, r2
 80074ee:	d10a      	bne.n	8007506 <xPortStartScheduler+0x46>
	__asm volatile
 80074f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074f4:	f383 8811 	msr	BASEPRI, r3
 80074f8:	f3bf 8f6f 	isb	sy
 80074fc:	f3bf 8f4f 	dsb	sy
 8007500:	60fb      	str	r3, [r7, #12]
}
 8007502:	bf00      	nop
 8007504:	e7fe      	b.n	8007504 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007506:	4b39      	ldr	r3, [pc, #228]	; (80075ec <xPortStartScheduler+0x12c>)
 8007508:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800750a:	697b      	ldr	r3, [r7, #20]
 800750c:	781b      	ldrb	r3, [r3, #0]
 800750e:	b2db      	uxtb	r3, r3
 8007510:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007512:	697b      	ldr	r3, [r7, #20]
 8007514:	22ff      	movs	r2, #255	; 0xff
 8007516:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007518:	697b      	ldr	r3, [r7, #20]
 800751a:	781b      	ldrb	r3, [r3, #0]
 800751c:	b2db      	uxtb	r3, r3
 800751e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007520:	78fb      	ldrb	r3, [r7, #3]
 8007522:	b2db      	uxtb	r3, r3
 8007524:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007528:	b2da      	uxtb	r2, r3
 800752a:	4b31      	ldr	r3, [pc, #196]	; (80075f0 <xPortStartScheduler+0x130>)
 800752c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800752e:	4b31      	ldr	r3, [pc, #196]	; (80075f4 <xPortStartScheduler+0x134>)
 8007530:	2207      	movs	r2, #7
 8007532:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007534:	e009      	b.n	800754a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007536:	4b2f      	ldr	r3, [pc, #188]	; (80075f4 <xPortStartScheduler+0x134>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	3b01      	subs	r3, #1
 800753c:	4a2d      	ldr	r2, [pc, #180]	; (80075f4 <xPortStartScheduler+0x134>)
 800753e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007540:	78fb      	ldrb	r3, [r7, #3]
 8007542:	b2db      	uxtb	r3, r3
 8007544:	005b      	lsls	r3, r3, #1
 8007546:	b2db      	uxtb	r3, r3
 8007548:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800754a:	78fb      	ldrb	r3, [r7, #3]
 800754c:	b2db      	uxtb	r3, r3
 800754e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007552:	2b80      	cmp	r3, #128	; 0x80
 8007554:	d0ef      	beq.n	8007536 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007556:	4b27      	ldr	r3, [pc, #156]	; (80075f4 <xPortStartScheduler+0x134>)
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f1c3 0307 	rsb	r3, r3, #7
 800755e:	2b04      	cmp	r3, #4
 8007560:	d00a      	beq.n	8007578 <xPortStartScheduler+0xb8>
	__asm volatile
 8007562:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007566:	f383 8811 	msr	BASEPRI, r3
 800756a:	f3bf 8f6f 	isb	sy
 800756e:	f3bf 8f4f 	dsb	sy
 8007572:	60bb      	str	r3, [r7, #8]
}
 8007574:	bf00      	nop
 8007576:	e7fe      	b.n	8007576 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007578:	4b1e      	ldr	r3, [pc, #120]	; (80075f4 <xPortStartScheduler+0x134>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	021b      	lsls	r3, r3, #8
 800757e:	4a1d      	ldr	r2, [pc, #116]	; (80075f4 <xPortStartScheduler+0x134>)
 8007580:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007582:	4b1c      	ldr	r3, [pc, #112]	; (80075f4 <xPortStartScheduler+0x134>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800758a:	4a1a      	ldr	r2, [pc, #104]	; (80075f4 <xPortStartScheduler+0x134>)
 800758c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	b2da      	uxtb	r2, r3
 8007592:	697b      	ldr	r3, [r7, #20]
 8007594:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007596:	4b18      	ldr	r3, [pc, #96]	; (80075f8 <xPortStartScheduler+0x138>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	4a17      	ldr	r2, [pc, #92]	; (80075f8 <xPortStartScheduler+0x138>)
 800759c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80075a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80075a2:	4b15      	ldr	r3, [pc, #84]	; (80075f8 <xPortStartScheduler+0x138>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	4a14      	ldr	r2, [pc, #80]	; (80075f8 <xPortStartScheduler+0x138>)
 80075a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80075ac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80075ae:	f000 f8dd 	bl	800776c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80075b2:	4b12      	ldr	r3, [pc, #72]	; (80075fc <xPortStartScheduler+0x13c>)
 80075b4:	2200      	movs	r2, #0
 80075b6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80075b8:	f000 f8fc 	bl	80077b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80075bc:	4b10      	ldr	r3, [pc, #64]	; (8007600 <xPortStartScheduler+0x140>)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	4a0f      	ldr	r2, [pc, #60]	; (8007600 <xPortStartScheduler+0x140>)
 80075c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80075c6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80075c8:	f7ff ff66 	bl	8007498 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80075cc:	f7fe ff3a 	bl	8006444 <vTaskSwitchContext>
	prvTaskExitError();
 80075d0:	f7ff ff1e 	bl	8007410 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80075d4:	2300      	movs	r3, #0
}
 80075d6:	4618      	mov	r0, r3
 80075d8:	3718      	adds	r7, #24
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd80      	pop	{r7, pc}
 80075de:	bf00      	nop
 80075e0:	e000ed00 	.word	0xe000ed00
 80075e4:	410fc271 	.word	0x410fc271
 80075e8:	410fc270 	.word	0x410fc270
 80075ec:	e000e400 	.word	0xe000e400
 80075f0:	20000e50 	.word	0x20000e50
 80075f4:	20000e54 	.word	0x20000e54
 80075f8:	e000ed20 	.word	0xe000ed20
 80075fc:	2000000c 	.word	0x2000000c
 8007600:	e000ef34 	.word	0xe000ef34

08007604 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007604:	b480      	push	{r7}
 8007606:	b083      	sub	sp, #12
 8007608:	af00      	add	r7, sp, #0
	__asm volatile
 800760a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800760e:	f383 8811 	msr	BASEPRI, r3
 8007612:	f3bf 8f6f 	isb	sy
 8007616:	f3bf 8f4f 	dsb	sy
 800761a:	607b      	str	r3, [r7, #4]
}
 800761c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800761e:	4b0f      	ldr	r3, [pc, #60]	; (800765c <vPortEnterCritical+0x58>)
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	3301      	adds	r3, #1
 8007624:	4a0d      	ldr	r2, [pc, #52]	; (800765c <vPortEnterCritical+0x58>)
 8007626:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007628:	4b0c      	ldr	r3, [pc, #48]	; (800765c <vPortEnterCritical+0x58>)
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	2b01      	cmp	r3, #1
 800762e:	d10f      	bne.n	8007650 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007630:	4b0b      	ldr	r3, [pc, #44]	; (8007660 <vPortEnterCritical+0x5c>)
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	b2db      	uxtb	r3, r3
 8007636:	2b00      	cmp	r3, #0
 8007638:	d00a      	beq.n	8007650 <vPortEnterCritical+0x4c>
	__asm volatile
 800763a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800763e:	f383 8811 	msr	BASEPRI, r3
 8007642:	f3bf 8f6f 	isb	sy
 8007646:	f3bf 8f4f 	dsb	sy
 800764a:	603b      	str	r3, [r7, #0]
}
 800764c:	bf00      	nop
 800764e:	e7fe      	b.n	800764e <vPortEnterCritical+0x4a>
	}
}
 8007650:	bf00      	nop
 8007652:	370c      	adds	r7, #12
 8007654:	46bd      	mov	sp, r7
 8007656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765a:	4770      	bx	lr
 800765c:	2000000c 	.word	0x2000000c
 8007660:	e000ed04 	.word	0xe000ed04

08007664 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007664:	b480      	push	{r7}
 8007666:	b083      	sub	sp, #12
 8007668:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800766a:	4b12      	ldr	r3, [pc, #72]	; (80076b4 <vPortExitCritical+0x50>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d10a      	bne.n	8007688 <vPortExitCritical+0x24>
	__asm volatile
 8007672:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007676:	f383 8811 	msr	BASEPRI, r3
 800767a:	f3bf 8f6f 	isb	sy
 800767e:	f3bf 8f4f 	dsb	sy
 8007682:	607b      	str	r3, [r7, #4]
}
 8007684:	bf00      	nop
 8007686:	e7fe      	b.n	8007686 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007688:	4b0a      	ldr	r3, [pc, #40]	; (80076b4 <vPortExitCritical+0x50>)
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	3b01      	subs	r3, #1
 800768e:	4a09      	ldr	r2, [pc, #36]	; (80076b4 <vPortExitCritical+0x50>)
 8007690:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007692:	4b08      	ldr	r3, [pc, #32]	; (80076b4 <vPortExitCritical+0x50>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d105      	bne.n	80076a6 <vPortExitCritical+0x42>
 800769a:	2300      	movs	r3, #0
 800769c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	f383 8811 	msr	BASEPRI, r3
}
 80076a4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80076a6:	bf00      	nop
 80076a8:	370c      	adds	r7, #12
 80076aa:	46bd      	mov	sp, r7
 80076ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b0:	4770      	bx	lr
 80076b2:	bf00      	nop
 80076b4:	2000000c 	.word	0x2000000c
	...

080076c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80076c0:	f3ef 8009 	mrs	r0, PSP
 80076c4:	f3bf 8f6f 	isb	sy
 80076c8:	4b15      	ldr	r3, [pc, #84]	; (8007720 <pxCurrentTCBConst>)
 80076ca:	681a      	ldr	r2, [r3, #0]
 80076cc:	f01e 0f10 	tst.w	lr, #16
 80076d0:	bf08      	it	eq
 80076d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80076d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076da:	6010      	str	r0, [r2, #0]
 80076dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80076e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80076e4:	f380 8811 	msr	BASEPRI, r0
 80076e8:	f3bf 8f4f 	dsb	sy
 80076ec:	f3bf 8f6f 	isb	sy
 80076f0:	f7fe fea8 	bl	8006444 <vTaskSwitchContext>
 80076f4:	f04f 0000 	mov.w	r0, #0
 80076f8:	f380 8811 	msr	BASEPRI, r0
 80076fc:	bc09      	pop	{r0, r3}
 80076fe:	6819      	ldr	r1, [r3, #0]
 8007700:	6808      	ldr	r0, [r1, #0]
 8007702:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007706:	f01e 0f10 	tst.w	lr, #16
 800770a:	bf08      	it	eq
 800770c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007710:	f380 8809 	msr	PSP, r0
 8007714:	f3bf 8f6f 	isb	sy
 8007718:	4770      	bx	lr
 800771a:	bf00      	nop
 800771c:	f3af 8000 	nop.w

08007720 <pxCurrentTCBConst>:
 8007720:	20000824 	.word	0x20000824
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007724:	bf00      	nop
 8007726:	bf00      	nop

08007728 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b082      	sub	sp, #8
 800772c:	af00      	add	r7, sp, #0
	__asm volatile
 800772e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007732:	f383 8811 	msr	BASEPRI, r3
 8007736:	f3bf 8f6f 	isb	sy
 800773a:	f3bf 8f4f 	dsb	sy
 800773e:	607b      	str	r3, [r7, #4]
}
 8007740:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007742:	f7fe fdc5 	bl	80062d0 <xTaskIncrementTick>
 8007746:	4603      	mov	r3, r0
 8007748:	2b00      	cmp	r3, #0
 800774a:	d003      	beq.n	8007754 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800774c:	4b06      	ldr	r3, [pc, #24]	; (8007768 <xPortSysTickHandler+0x40>)
 800774e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007752:	601a      	str	r2, [r3, #0]
 8007754:	2300      	movs	r3, #0
 8007756:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	f383 8811 	msr	BASEPRI, r3
}
 800775e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007760:	bf00      	nop
 8007762:	3708      	adds	r7, #8
 8007764:	46bd      	mov	sp, r7
 8007766:	bd80      	pop	{r7, pc}
 8007768:	e000ed04 	.word	0xe000ed04

0800776c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800776c:	b480      	push	{r7}
 800776e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007770:	4b0b      	ldr	r3, [pc, #44]	; (80077a0 <vPortSetupTimerInterrupt+0x34>)
 8007772:	2200      	movs	r2, #0
 8007774:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007776:	4b0b      	ldr	r3, [pc, #44]	; (80077a4 <vPortSetupTimerInterrupt+0x38>)
 8007778:	2200      	movs	r2, #0
 800777a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800777c:	4b0a      	ldr	r3, [pc, #40]	; (80077a8 <vPortSetupTimerInterrupt+0x3c>)
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	4a0a      	ldr	r2, [pc, #40]	; (80077ac <vPortSetupTimerInterrupt+0x40>)
 8007782:	fba2 2303 	umull	r2, r3, r2, r3
 8007786:	099b      	lsrs	r3, r3, #6
 8007788:	4a09      	ldr	r2, [pc, #36]	; (80077b0 <vPortSetupTimerInterrupt+0x44>)
 800778a:	3b01      	subs	r3, #1
 800778c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800778e:	4b04      	ldr	r3, [pc, #16]	; (80077a0 <vPortSetupTimerInterrupt+0x34>)
 8007790:	2207      	movs	r2, #7
 8007792:	601a      	str	r2, [r3, #0]
}
 8007794:	bf00      	nop
 8007796:	46bd      	mov	sp, r7
 8007798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779c:	4770      	bx	lr
 800779e:	bf00      	nop
 80077a0:	e000e010 	.word	0xe000e010
 80077a4:	e000e018 	.word	0xe000e018
 80077a8:	20000000 	.word	0x20000000
 80077ac:	10624dd3 	.word	0x10624dd3
 80077b0:	e000e014 	.word	0xe000e014

080077b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80077b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80077c4 <vPortEnableVFP+0x10>
 80077b8:	6801      	ldr	r1, [r0, #0]
 80077ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80077be:	6001      	str	r1, [r0, #0]
 80077c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80077c2:	bf00      	nop
 80077c4:	e000ed88 	.word	0xe000ed88

080077c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80077c8:	b480      	push	{r7}
 80077ca:	b085      	sub	sp, #20
 80077cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80077ce:	f3ef 8305 	mrs	r3, IPSR
 80077d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	2b0f      	cmp	r3, #15
 80077d8:	d914      	bls.n	8007804 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80077da:	4a17      	ldr	r2, [pc, #92]	; (8007838 <vPortValidateInterruptPriority+0x70>)
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	4413      	add	r3, r2
 80077e0:	781b      	ldrb	r3, [r3, #0]
 80077e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80077e4:	4b15      	ldr	r3, [pc, #84]	; (800783c <vPortValidateInterruptPriority+0x74>)
 80077e6:	781b      	ldrb	r3, [r3, #0]
 80077e8:	7afa      	ldrb	r2, [r7, #11]
 80077ea:	429a      	cmp	r2, r3
 80077ec:	d20a      	bcs.n	8007804 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80077ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077f2:	f383 8811 	msr	BASEPRI, r3
 80077f6:	f3bf 8f6f 	isb	sy
 80077fa:	f3bf 8f4f 	dsb	sy
 80077fe:	607b      	str	r3, [r7, #4]
}
 8007800:	bf00      	nop
 8007802:	e7fe      	b.n	8007802 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007804:	4b0e      	ldr	r3, [pc, #56]	; (8007840 <vPortValidateInterruptPriority+0x78>)
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800780c:	4b0d      	ldr	r3, [pc, #52]	; (8007844 <vPortValidateInterruptPriority+0x7c>)
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	429a      	cmp	r2, r3
 8007812:	d90a      	bls.n	800782a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007818:	f383 8811 	msr	BASEPRI, r3
 800781c:	f3bf 8f6f 	isb	sy
 8007820:	f3bf 8f4f 	dsb	sy
 8007824:	603b      	str	r3, [r7, #0]
}
 8007826:	bf00      	nop
 8007828:	e7fe      	b.n	8007828 <vPortValidateInterruptPriority+0x60>
	}
 800782a:	bf00      	nop
 800782c:	3714      	adds	r7, #20
 800782e:	46bd      	mov	sp, r7
 8007830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007834:	4770      	bx	lr
 8007836:	bf00      	nop
 8007838:	e000e3f0 	.word	0xe000e3f0
 800783c:	20000e50 	.word	0x20000e50
 8007840:	e000ed0c 	.word	0xe000ed0c
 8007844:	20000e54 	.word	0x20000e54

08007848 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b08a      	sub	sp, #40	; 0x28
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007850:	2300      	movs	r3, #0
 8007852:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007854:	f7fe fc6e 	bl	8006134 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007858:	4b5b      	ldr	r3, [pc, #364]	; (80079c8 <pvPortMalloc+0x180>)
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d101      	bne.n	8007864 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007860:	f000 f920 	bl	8007aa4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007864:	4b59      	ldr	r3, [pc, #356]	; (80079cc <pvPortMalloc+0x184>)
 8007866:	681a      	ldr	r2, [r3, #0]
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	4013      	ands	r3, r2
 800786c:	2b00      	cmp	r3, #0
 800786e:	f040 8093 	bne.w	8007998 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d01d      	beq.n	80078b4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007878:	2208      	movs	r2, #8
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	4413      	add	r3, r2
 800787e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	f003 0307 	and.w	r3, r3, #7
 8007886:	2b00      	cmp	r3, #0
 8007888:	d014      	beq.n	80078b4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	f023 0307 	bic.w	r3, r3, #7
 8007890:	3308      	adds	r3, #8
 8007892:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	f003 0307 	and.w	r3, r3, #7
 800789a:	2b00      	cmp	r3, #0
 800789c:	d00a      	beq.n	80078b4 <pvPortMalloc+0x6c>
	__asm volatile
 800789e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078a2:	f383 8811 	msr	BASEPRI, r3
 80078a6:	f3bf 8f6f 	isb	sy
 80078aa:	f3bf 8f4f 	dsb	sy
 80078ae:	617b      	str	r3, [r7, #20]
}
 80078b0:	bf00      	nop
 80078b2:	e7fe      	b.n	80078b2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d06e      	beq.n	8007998 <pvPortMalloc+0x150>
 80078ba:	4b45      	ldr	r3, [pc, #276]	; (80079d0 <pvPortMalloc+0x188>)
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	687a      	ldr	r2, [r7, #4]
 80078c0:	429a      	cmp	r2, r3
 80078c2:	d869      	bhi.n	8007998 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80078c4:	4b43      	ldr	r3, [pc, #268]	; (80079d4 <pvPortMalloc+0x18c>)
 80078c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80078c8:	4b42      	ldr	r3, [pc, #264]	; (80079d4 <pvPortMalloc+0x18c>)
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80078ce:	e004      	b.n	80078da <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80078d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80078d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80078da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078dc:	685b      	ldr	r3, [r3, #4]
 80078de:	687a      	ldr	r2, [r7, #4]
 80078e0:	429a      	cmp	r2, r3
 80078e2:	d903      	bls.n	80078ec <pvPortMalloc+0xa4>
 80078e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d1f1      	bne.n	80078d0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80078ec:	4b36      	ldr	r3, [pc, #216]	; (80079c8 <pvPortMalloc+0x180>)
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078f2:	429a      	cmp	r2, r3
 80078f4:	d050      	beq.n	8007998 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80078f6:	6a3b      	ldr	r3, [r7, #32]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	2208      	movs	r2, #8
 80078fc:	4413      	add	r3, r2
 80078fe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007902:	681a      	ldr	r2, [r3, #0]
 8007904:	6a3b      	ldr	r3, [r7, #32]
 8007906:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800790a:	685a      	ldr	r2, [r3, #4]
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	1ad2      	subs	r2, r2, r3
 8007910:	2308      	movs	r3, #8
 8007912:	005b      	lsls	r3, r3, #1
 8007914:	429a      	cmp	r2, r3
 8007916:	d91f      	bls.n	8007958 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007918:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	4413      	add	r3, r2
 800791e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007920:	69bb      	ldr	r3, [r7, #24]
 8007922:	f003 0307 	and.w	r3, r3, #7
 8007926:	2b00      	cmp	r3, #0
 8007928:	d00a      	beq.n	8007940 <pvPortMalloc+0xf8>
	__asm volatile
 800792a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800792e:	f383 8811 	msr	BASEPRI, r3
 8007932:	f3bf 8f6f 	isb	sy
 8007936:	f3bf 8f4f 	dsb	sy
 800793a:	613b      	str	r3, [r7, #16]
}
 800793c:	bf00      	nop
 800793e:	e7fe      	b.n	800793e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007942:	685a      	ldr	r2, [r3, #4]
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	1ad2      	subs	r2, r2, r3
 8007948:	69bb      	ldr	r3, [r7, #24]
 800794a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800794c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800794e:	687a      	ldr	r2, [r7, #4]
 8007950:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007952:	69b8      	ldr	r0, [r7, #24]
 8007954:	f000 f908 	bl	8007b68 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007958:	4b1d      	ldr	r3, [pc, #116]	; (80079d0 <pvPortMalloc+0x188>)
 800795a:	681a      	ldr	r2, [r3, #0]
 800795c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800795e:	685b      	ldr	r3, [r3, #4]
 8007960:	1ad3      	subs	r3, r2, r3
 8007962:	4a1b      	ldr	r2, [pc, #108]	; (80079d0 <pvPortMalloc+0x188>)
 8007964:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007966:	4b1a      	ldr	r3, [pc, #104]	; (80079d0 <pvPortMalloc+0x188>)
 8007968:	681a      	ldr	r2, [r3, #0]
 800796a:	4b1b      	ldr	r3, [pc, #108]	; (80079d8 <pvPortMalloc+0x190>)
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	429a      	cmp	r2, r3
 8007970:	d203      	bcs.n	800797a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007972:	4b17      	ldr	r3, [pc, #92]	; (80079d0 <pvPortMalloc+0x188>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	4a18      	ldr	r2, [pc, #96]	; (80079d8 <pvPortMalloc+0x190>)
 8007978:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800797a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800797c:	685a      	ldr	r2, [r3, #4]
 800797e:	4b13      	ldr	r3, [pc, #76]	; (80079cc <pvPortMalloc+0x184>)
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	431a      	orrs	r2, r3
 8007984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007986:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800798a:	2200      	movs	r2, #0
 800798c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800798e:	4b13      	ldr	r3, [pc, #76]	; (80079dc <pvPortMalloc+0x194>)
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	3301      	adds	r3, #1
 8007994:	4a11      	ldr	r2, [pc, #68]	; (80079dc <pvPortMalloc+0x194>)
 8007996:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007998:	f7fe fbda 	bl	8006150 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800799c:	69fb      	ldr	r3, [r7, #28]
 800799e:	f003 0307 	and.w	r3, r3, #7
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d00a      	beq.n	80079bc <pvPortMalloc+0x174>
	__asm volatile
 80079a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079aa:	f383 8811 	msr	BASEPRI, r3
 80079ae:	f3bf 8f6f 	isb	sy
 80079b2:	f3bf 8f4f 	dsb	sy
 80079b6:	60fb      	str	r3, [r7, #12]
}
 80079b8:	bf00      	nop
 80079ba:	e7fe      	b.n	80079ba <pvPortMalloc+0x172>
	return pvReturn;
 80079bc:	69fb      	ldr	r3, [r7, #28]
}
 80079be:	4618      	mov	r0, r3
 80079c0:	3728      	adds	r7, #40	; 0x28
 80079c2:	46bd      	mov	sp, r7
 80079c4:	bd80      	pop	{r7, pc}
 80079c6:	bf00      	nop
 80079c8:	20004a60 	.word	0x20004a60
 80079cc:	20004a74 	.word	0x20004a74
 80079d0:	20004a64 	.word	0x20004a64
 80079d4:	20004a58 	.word	0x20004a58
 80079d8:	20004a68 	.word	0x20004a68
 80079dc:	20004a6c 	.word	0x20004a6c

080079e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b086      	sub	sp, #24
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d04d      	beq.n	8007a8e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80079f2:	2308      	movs	r3, #8
 80079f4:	425b      	negs	r3, r3
 80079f6:	697a      	ldr	r2, [r7, #20]
 80079f8:	4413      	add	r3, r2
 80079fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80079fc:	697b      	ldr	r3, [r7, #20]
 80079fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007a00:	693b      	ldr	r3, [r7, #16]
 8007a02:	685a      	ldr	r2, [r3, #4]
 8007a04:	4b24      	ldr	r3, [pc, #144]	; (8007a98 <vPortFree+0xb8>)
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	4013      	ands	r3, r2
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d10a      	bne.n	8007a24 <vPortFree+0x44>
	__asm volatile
 8007a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a12:	f383 8811 	msr	BASEPRI, r3
 8007a16:	f3bf 8f6f 	isb	sy
 8007a1a:	f3bf 8f4f 	dsb	sy
 8007a1e:	60fb      	str	r3, [r7, #12]
}
 8007a20:	bf00      	nop
 8007a22:	e7fe      	b.n	8007a22 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007a24:	693b      	ldr	r3, [r7, #16]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d00a      	beq.n	8007a42 <vPortFree+0x62>
	__asm volatile
 8007a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a30:	f383 8811 	msr	BASEPRI, r3
 8007a34:	f3bf 8f6f 	isb	sy
 8007a38:	f3bf 8f4f 	dsb	sy
 8007a3c:	60bb      	str	r3, [r7, #8]
}
 8007a3e:	bf00      	nop
 8007a40:	e7fe      	b.n	8007a40 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007a42:	693b      	ldr	r3, [r7, #16]
 8007a44:	685a      	ldr	r2, [r3, #4]
 8007a46:	4b14      	ldr	r3, [pc, #80]	; (8007a98 <vPortFree+0xb8>)
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	4013      	ands	r3, r2
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d01e      	beq.n	8007a8e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007a50:	693b      	ldr	r3, [r7, #16]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d11a      	bne.n	8007a8e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007a58:	693b      	ldr	r3, [r7, #16]
 8007a5a:	685a      	ldr	r2, [r3, #4]
 8007a5c:	4b0e      	ldr	r3, [pc, #56]	; (8007a98 <vPortFree+0xb8>)
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	43db      	mvns	r3, r3
 8007a62:	401a      	ands	r2, r3
 8007a64:	693b      	ldr	r3, [r7, #16]
 8007a66:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007a68:	f7fe fb64 	bl	8006134 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007a6c:	693b      	ldr	r3, [r7, #16]
 8007a6e:	685a      	ldr	r2, [r3, #4]
 8007a70:	4b0a      	ldr	r3, [pc, #40]	; (8007a9c <vPortFree+0xbc>)
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	4413      	add	r3, r2
 8007a76:	4a09      	ldr	r2, [pc, #36]	; (8007a9c <vPortFree+0xbc>)
 8007a78:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007a7a:	6938      	ldr	r0, [r7, #16]
 8007a7c:	f000 f874 	bl	8007b68 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007a80:	4b07      	ldr	r3, [pc, #28]	; (8007aa0 <vPortFree+0xc0>)
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	3301      	adds	r3, #1
 8007a86:	4a06      	ldr	r2, [pc, #24]	; (8007aa0 <vPortFree+0xc0>)
 8007a88:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007a8a:	f7fe fb61 	bl	8006150 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007a8e:	bf00      	nop
 8007a90:	3718      	adds	r7, #24
 8007a92:	46bd      	mov	sp, r7
 8007a94:	bd80      	pop	{r7, pc}
 8007a96:	bf00      	nop
 8007a98:	20004a74 	.word	0x20004a74
 8007a9c:	20004a64 	.word	0x20004a64
 8007aa0:	20004a70 	.word	0x20004a70

08007aa4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007aa4:	b480      	push	{r7}
 8007aa6:	b085      	sub	sp, #20
 8007aa8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007aaa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007aae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007ab0:	4b27      	ldr	r3, [pc, #156]	; (8007b50 <prvHeapInit+0xac>)
 8007ab2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	f003 0307 	and.w	r3, r3, #7
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d00c      	beq.n	8007ad8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	3307      	adds	r3, #7
 8007ac2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	f023 0307 	bic.w	r3, r3, #7
 8007aca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007acc:	68ba      	ldr	r2, [r7, #8]
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	1ad3      	subs	r3, r2, r3
 8007ad2:	4a1f      	ldr	r2, [pc, #124]	; (8007b50 <prvHeapInit+0xac>)
 8007ad4:	4413      	add	r3, r2
 8007ad6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007adc:	4a1d      	ldr	r2, [pc, #116]	; (8007b54 <prvHeapInit+0xb0>)
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007ae2:	4b1c      	ldr	r3, [pc, #112]	; (8007b54 <prvHeapInit+0xb0>)
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	68ba      	ldr	r2, [r7, #8]
 8007aec:	4413      	add	r3, r2
 8007aee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007af0:	2208      	movs	r2, #8
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	1a9b      	subs	r3, r3, r2
 8007af6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	f023 0307 	bic.w	r3, r3, #7
 8007afe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	4a15      	ldr	r2, [pc, #84]	; (8007b58 <prvHeapInit+0xb4>)
 8007b04:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007b06:	4b14      	ldr	r3, [pc, #80]	; (8007b58 <prvHeapInit+0xb4>)
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007b0e:	4b12      	ldr	r3, [pc, #72]	; (8007b58 <prvHeapInit+0xb4>)
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	2200      	movs	r2, #0
 8007b14:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	68fa      	ldr	r2, [r7, #12]
 8007b1e:	1ad2      	subs	r2, r2, r3
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007b24:	4b0c      	ldr	r3, [pc, #48]	; (8007b58 <prvHeapInit+0xb4>)
 8007b26:	681a      	ldr	r2, [r3, #0]
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	685b      	ldr	r3, [r3, #4]
 8007b30:	4a0a      	ldr	r2, [pc, #40]	; (8007b5c <prvHeapInit+0xb8>)
 8007b32:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	685b      	ldr	r3, [r3, #4]
 8007b38:	4a09      	ldr	r2, [pc, #36]	; (8007b60 <prvHeapInit+0xbc>)
 8007b3a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007b3c:	4b09      	ldr	r3, [pc, #36]	; (8007b64 <prvHeapInit+0xc0>)
 8007b3e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007b42:	601a      	str	r2, [r3, #0]
}
 8007b44:	bf00      	nop
 8007b46:	3714      	adds	r7, #20
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4e:	4770      	bx	lr
 8007b50:	20000e58 	.word	0x20000e58
 8007b54:	20004a58 	.word	0x20004a58
 8007b58:	20004a60 	.word	0x20004a60
 8007b5c:	20004a68 	.word	0x20004a68
 8007b60:	20004a64 	.word	0x20004a64
 8007b64:	20004a74 	.word	0x20004a74

08007b68 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007b68:	b480      	push	{r7}
 8007b6a:	b085      	sub	sp, #20
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007b70:	4b28      	ldr	r3, [pc, #160]	; (8007c14 <prvInsertBlockIntoFreeList+0xac>)
 8007b72:	60fb      	str	r3, [r7, #12]
 8007b74:	e002      	b.n	8007b7c <prvInsertBlockIntoFreeList+0x14>
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	60fb      	str	r3, [r7, #12]
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	687a      	ldr	r2, [r7, #4]
 8007b82:	429a      	cmp	r2, r3
 8007b84:	d8f7      	bhi.n	8007b76 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	685b      	ldr	r3, [r3, #4]
 8007b8e:	68ba      	ldr	r2, [r7, #8]
 8007b90:	4413      	add	r3, r2
 8007b92:	687a      	ldr	r2, [r7, #4]
 8007b94:	429a      	cmp	r2, r3
 8007b96:	d108      	bne.n	8007baa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	685a      	ldr	r2, [r3, #4]
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	685b      	ldr	r3, [r3, #4]
 8007ba0:	441a      	add	r2, r3
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	685b      	ldr	r3, [r3, #4]
 8007bb2:	68ba      	ldr	r2, [r7, #8]
 8007bb4:	441a      	add	r2, r3
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	429a      	cmp	r2, r3
 8007bbc:	d118      	bne.n	8007bf0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	681a      	ldr	r2, [r3, #0]
 8007bc2:	4b15      	ldr	r3, [pc, #84]	; (8007c18 <prvInsertBlockIntoFreeList+0xb0>)
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	429a      	cmp	r2, r3
 8007bc8:	d00d      	beq.n	8007be6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	685a      	ldr	r2, [r3, #4]
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	685b      	ldr	r3, [r3, #4]
 8007bd4:	441a      	add	r2, r3
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	681a      	ldr	r2, [r3, #0]
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	601a      	str	r2, [r3, #0]
 8007be4:	e008      	b.n	8007bf8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007be6:	4b0c      	ldr	r3, [pc, #48]	; (8007c18 <prvInsertBlockIntoFreeList+0xb0>)
 8007be8:	681a      	ldr	r2, [r3, #0]
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	601a      	str	r2, [r3, #0]
 8007bee:	e003      	b.n	8007bf8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	681a      	ldr	r2, [r3, #0]
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007bf8:	68fa      	ldr	r2, [r7, #12]
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	429a      	cmp	r2, r3
 8007bfe:	d002      	beq.n	8007c06 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	687a      	ldr	r2, [r7, #4]
 8007c04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007c06:	bf00      	nop
 8007c08:	3714      	adds	r7, #20
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c10:	4770      	bx	lr
 8007c12:	bf00      	nop
 8007c14:	20004a58 	.word	0x20004a58
 8007c18:	20004a60 	.word	0x20004a60

08007c1c <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b084      	sub	sp, #16
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
 8007c24:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8007c26:	683b      	ldr	r3, [r7, #0]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	330c      	adds	r3, #12
 8007c2c:	461a      	mov	r2, r3
 8007c2e:	6839      	ldr	r1, [r7, #0]
 8007c30:	6878      	ldr	r0, [r7, #4]
 8007c32:	f002 fa6f 	bl	800a114 <tcpip_send_msg_wait_sem>
 8007c36:	4603      	mov	r3, r0
 8007c38:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8007c3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d103      	bne.n	8007c4a <netconn_apimsg+0x2e>
    return apimsg->err;
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8007c48:	e001      	b.n	8007c4e <netconn_apimsg+0x32>
  }
  return err;
 8007c4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007c4e:	4618      	mov	r0, r3
 8007c50:	3710      	adds	r7, #16
 8007c52:	46bd      	mov	sp, r7
 8007c54:	bd80      	pop	{r7, pc}
	...

08007c58 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b08c      	sub	sp, #48	; 0x30
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	4603      	mov	r3, r0
 8007c60:	603a      	str	r2, [r7, #0]
 8007c62:	71fb      	strb	r3, [r7, #7]
 8007c64:	460b      	mov	r3, r1
 8007c66:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8007c68:	79fb      	ldrb	r3, [r7, #7]
 8007c6a:	6839      	ldr	r1, [r7, #0]
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	f001 f923 	bl	8008eb8 <netconn_alloc>
 8007c72:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 8007c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d054      	beq.n	8007d24 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 8007c7a:	79bb      	ldrb	r3, [r7, #6]
 8007c7c:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 8007c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c80:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8007c82:	f107 0308 	add.w	r3, r7, #8
 8007c86:	4619      	mov	r1, r3
 8007c88:	4829      	ldr	r0, [pc, #164]	; (8007d30 <netconn_new_with_proto_and_callback+0xd8>)
 8007c8a:	f7ff ffc7 	bl	8007c1c <netconn_apimsg>
 8007c8e:	4603      	mov	r3, r0
 8007c90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 8007c94:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d043      	beq.n	8007d24 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 8007c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c9e:	685b      	ldr	r3, [r3, #4]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d005      	beq.n	8007cb0 <netconn_new_with_proto_and_callback+0x58>
 8007ca4:	4b23      	ldr	r3, [pc, #140]	; (8007d34 <netconn_new_with_proto_and_callback+0xdc>)
 8007ca6:	22a3      	movs	r2, #163	; 0xa3
 8007ca8:	4923      	ldr	r1, [pc, #140]	; (8007d38 <netconn_new_with_proto_and_callback+0xe0>)
 8007caa:	4824      	ldr	r0, [pc, #144]	; (8007d3c <netconn_new_with_proto_and_callback+0xe4>)
 8007cac:	f00d fbe6 	bl	801547c <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8007cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cb2:	3310      	adds	r3, #16
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	f00d f91d 	bl	8014ef4 <sys_mbox_valid>
 8007cba:	4603      	mov	r3, r0
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d105      	bne.n	8007ccc <netconn_new_with_proto_and_callback+0x74>
 8007cc0:	4b1c      	ldr	r3, [pc, #112]	; (8007d34 <netconn_new_with_proto_and_callback+0xdc>)
 8007cc2:	22a4      	movs	r2, #164	; 0xa4
 8007cc4:	491e      	ldr	r1, [pc, #120]	; (8007d40 <netconn_new_with_proto_and_callback+0xe8>)
 8007cc6:	481d      	ldr	r0, [pc, #116]	; (8007d3c <netconn_new_with_proto_and_callback+0xe4>)
 8007cc8:	f00d fbd8 	bl	801547c <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8007ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cce:	3314      	adds	r3, #20
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	f00d f90f 	bl	8014ef4 <sys_mbox_valid>
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d005      	beq.n	8007ce8 <netconn_new_with_proto_and_callback+0x90>
 8007cdc:	4b15      	ldr	r3, [pc, #84]	; (8007d34 <netconn_new_with_proto_and_callback+0xdc>)
 8007cde:	22a6      	movs	r2, #166	; 0xa6
 8007ce0:	4918      	ldr	r1, [pc, #96]	; (8007d44 <netconn_new_with_proto_and_callback+0xec>)
 8007ce2:	4816      	ldr	r0, [pc, #88]	; (8007d3c <netconn_new_with_proto_and_callback+0xe4>)
 8007ce4:	f00d fbca 	bl	801547c <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8007ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cea:	330c      	adds	r3, #12
 8007cec:	4618      	mov	r0, r3
 8007cee:	f00d f98f 	bl	8015010 <sys_sem_valid>
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d105      	bne.n	8007d04 <netconn_new_with_proto_and_callback+0xac>
 8007cf8:	4b0e      	ldr	r3, [pc, #56]	; (8007d34 <netconn_new_with_proto_and_callback+0xdc>)
 8007cfa:	22a9      	movs	r2, #169	; 0xa9
 8007cfc:	4912      	ldr	r1, [pc, #72]	; (8007d48 <netconn_new_with_proto_and_callback+0xf0>)
 8007cfe:	480f      	ldr	r0, [pc, #60]	; (8007d3c <netconn_new_with_proto_and_callback+0xe4>)
 8007d00:	f00d fbbc 	bl	801547c <iprintf>
      sys_sem_free(&conn->op_completed);
 8007d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d06:	330c      	adds	r3, #12
 8007d08:	4618      	mov	r0, r3
 8007d0a:	f00d f974 	bl	8014ff6 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 8007d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d10:	3310      	adds	r3, #16
 8007d12:	4618      	mov	r0, r3
 8007d14:	f00d f87a 	bl	8014e0c <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8007d18:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007d1a:	2007      	movs	r0, #7
 8007d1c:	f002 ff62 	bl	800abe4 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 8007d20:	2300      	movs	r3, #0
 8007d22:	e000      	b.n	8007d26 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 8007d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8007d26:	4618      	mov	r0, r3
 8007d28:	3730      	adds	r7, #48	; 0x30
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	bd80      	pop	{r7, pc}
 8007d2e:	bf00      	nop
 8007d30:	08008e8d 	.word	0x08008e8d
 8007d34:	080163fc 	.word	0x080163fc
 8007d38:	08016430 	.word	0x08016430
 8007d3c:	08016454 	.word	0x08016454
 8007d40:	0801647c 	.word	0x0801647c
 8007d44:	08016494 	.word	0x08016494
 8007d48:	080164b8 	.word	0x080164b8

08007d4c <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b08c      	sub	sp, #48	; 0x30
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d101      	bne.n	8007d5e <netconn_prepare_delete+0x12>
    return ERR_OK;
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	e014      	b.n	8007d88 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8007d62:	2329      	movs	r3, #41	; 0x29
 8007d64:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8007d66:	f107 030c 	add.w	r3, r7, #12
 8007d6a:	4619      	mov	r1, r3
 8007d6c:	4808      	ldr	r0, [pc, #32]	; (8007d90 <netconn_prepare_delete+0x44>)
 8007d6e:	f7ff ff55 	bl	8007c1c <netconn_apimsg>
 8007d72:	4603      	mov	r3, r0
 8007d74:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8007d78:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d002      	beq.n	8007d86 <netconn_prepare_delete+0x3a>
    return err;
 8007d80:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007d84:	e000      	b.n	8007d88 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 8007d86:	2300      	movs	r3, #0
}
 8007d88:	4618      	mov	r0, r3
 8007d8a:	3730      	adds	r7, #48	; 0x30
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	bd80      	pop	{r7, pc}
 8007d90:	080093f1 	.word	0x080093f1

08007d94 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b084      	sub	sp, #16
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d101      	bne.n	8007da6 <netconn_delete+0x12>
    return ERR_OK;
 8007da2:	2300      	movs	r3, #0
 8007da4:	e00d      	b.n	8007dc2 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f7ff ffd0 	bl	8007d4c <netconn_prepare_delete>
 8007dac:	4603      	mov	r3, r0
 8007dae:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 8007db0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d102      	bne.n	8007dbe <netconn_delete+0x2a>
    netconn_free(conn);
 8007db8:	6878      	ldr	r0, [r7, #4]
 8007dba:	f001 f8eb 	bl	8008f94 <netconn_free>
  }
  return err;
 8007dbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	3710      	adds	r7, #16
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	bd80      	pop	{r7, pc}
	...

08007dcc <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b08e      	sub	sp, #56	; 0x38
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	60f8      	str	r0, [r7, #12]
 8007dd4:	60b9      	str	r1, [r7, #8]
 8007dd6:	4613      	mov	r3, r2
 8007dd8:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d109      	bne.n	8007df4 <netconn_bind+0x28>
 8007de0:	4b11      	ldr	r3, [pc, #68]	; (8007e28 <netconn_bind+0x5c>)
 8007de2:	f44f 729c 	mov.w	r2, #312	; 0x138
 8007de6:	4911      	ldr	r1, [pc, #68]	; (8007e2c <netconn_bind+0x60>)
 8007de8:	4811      	ldr	r0, [pc, #68]	; (8007e30 <netconn_bind+0x64>)
 8007dea:	f00d fb47 	bl	801547c <iprintf>
 8007dee:	f06f 030f 	mvn.w	r3, #15
 8007df2:	e015      	b.n	8007e20 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8007df4:	68bb      	ldr	r3, [r7, #8]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d101      	bne.n	8007dfe <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 8007dfa:	4b0e      	ldr	r3, [pc, #56]	; (8007e34 <netconn_bind+0x68>)
 8007dfc:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8007e02:	68bb      	ldr	r3, [r7, #8]
 8007e04:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8007e06:	88fb      	ldrh	r3, [r7, #6]
 8007e08:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 8007e0a:	f107 0314 	add.w	r3, r7, #20
 8007e0e:	4619      	mov	r1, r3
 8007e10:	4809      	ldr	r0, [pc, #36]	; (8007e38 <netconn_bind+0x6c>)
 8007e12:	f7ff ff03 	bl	8007c1c <netconn_apimsg>
 8007e16:	4603      	mov	r3, r0
 8007e18:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 8007e1c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8007e20:	4618      	mov	r0, r3
 8007e22:	3738      	adds	r7, #56	; 0x38
 8007e24:	46bd      	mov	sp, r7
 8007e26:	bd80      	pop	{r7, pc}
 8007e28:	080163fc 	.word	0x080163fc
 8007e2c:	08016534 	.word	0x08016534
 8007e30:	08016454 	.word	0x08016454
 8007e34:	08019c40 	.word	0x08019c40
 8007e38:	080095b9 	.word	0x080095b9

08007e3c <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b08c      	sub	sp, #48	; 0x30
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
 8007e44:	460b      	mov	r3, r1
 8007e46:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d109      	bne.n	8007e62 <netconn_listen_with_backlog+0x26>
 8007e4e:	4b0d      	ldr	r3, [pc, #52]	; (8007e84 <netconn_listen_with_backlog+0x48>)
 8007e50:	f240 12bb 	movw	r2, #443	; 0x1bb
 8007e54:	490c      	ldr	r1, [pc, #48]	; (8007e88 <netconn_listen_with_backlog+0x4c>)
 8007e56:	480d      	ldr	r0, [pc, #52]	; (8007e8c <netconn_listen_with_backlog+0x50>)
 8007e58:	f00d fb10 	bl	801547c <iprintf>
 8007e5c:	f06f 030f 	mvn.w	r3, #15
 8007e60:	e00c      	b.n	8007e7c <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 8007e66:	f107 030c 	add.w	r3, r7, #12
 8007e6a:	4619      	mov	r1, r3
 8007e6c:	4808      	ldr	r0, [pc, #32]	; (8007e90 <netconn_listen_with_backlog+0x54>)
 8007e6e:	f7ff fed5 	bl	8007c1c <netconn_apimsg>
 8007e72:	4603      	mov	r3, r0
 8007e74:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8007e78:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	3730      	adds	r7, #48	; 0x30
 8007e80:	46bd      	mov	sp, r7
 8007e82:	bd80      	pop	{r7, pc}
 8007e84:	080163fc 	.word	0x080163fc
 8007e88:	080165b4 	.word	0x080165b4
 8007e8c:	08016454 	.word	0x08016454
 8007e90:	0800962d 	.word	0x0800962d

08007e94 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b086      	sub	sp, #24
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
 8007e9c:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d109      	bne.n	8007eb8 <netconn_accept+0x24>
 8007ea4:	4b3d      	ldr	r3, [pc, #244]	; (8007f9c <netconn_accept+0x108>)
 8007ea6:	f240 12e1 	movw	r2, #481	; 0x1e1
 8007eaa:	493d      	ldr	r1, [pc, #244]	; (8007fa0 <netconn_accept+0x10c>)
 8007eac:	483d      	ldr	r0, [pc, #244]	; (8007fa4 <netconn_accept+0x110>)
 8007eae:	f00d fae5 	bl	801547c <iprintf>
 8007eb2:	f06f 030f 	mvn.w	r3, #15
 8007eb6:	e06c      	b.n	8007f92 <netconn_accept+0xfe>
  *new_conn = NULL;
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	2200      	movs	r2, #0
 8007ebc:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d109      	bne.n	8007ed8 <netconn_accept+0x44>
 8007ec4:	4b35      	ldr	r3, [pc, #212]	; (8007f9c <netconn_accept+0x108>)
 8007ec6:	f240 12e3 	movw	r2, #483	; 0x1e3
 8007eca:	4937      	ldr	r1, [pc, #220]	; (8007fa8 <netconn_accept+0x114>)
 8007ecc:	4835      	ldr	r0, [pc, #212]	; (8007fa4 <netconn_accept+0x110>)
 8007ece:	f00d fad5 	bl	801547c <iprintf>
 8007ed2:	f06f 030f 	mvn.w	r3, #15
 8007ed6:	e05c      	b.n	8007f92 <netconn_accept+0xfe>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 8007ed8:	6878      	ldr	r0, [r7, #4]
 8007eda:	f000 fb6c 	bl	80085b6 <netconn_err>
 8007ede:	4603      	mov	r3, r0
 8007ee0:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 8007ee2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d002      	beq.n	8007ef0 <netconn_accept+0x5c>
    /* return pending error */
    return err;
 8007eea:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007eee:	e050      	b.n	8007f92 <netconn_accept+0xfe>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	3314      	adds	r3, #20
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	f00c fffd 	bl	8014ef4 <sys_mbox_valid>
 8007efa:	4603      	mov	r3, r0
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d005      	beq.n	8007f0c <netconn_accept+0x78>
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	7f1b      	ldrb	r3, [r3, #28]
 8007f04:	f003 0301 	and.w	r3, r3, #1
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d002      	beq.n	8007f12 <netconn_accept+0x7e>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 8007f0c:	f06f 030e 	mvn.w	r3, #14
 8007f10:	e03f      	b.n	8007f92 <netconn_accept+0xfe>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	7f1b      	ldrb	r3, [r3, #28]
 8007f16:	f003 0302 	and.w	r3, r3, #2
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d00e      	beq.n	8007f3c <netconn_accept+0xa8>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	3314      	adds	r3, #20
 8007f22:	f107 020c 	add.w	r2, r7, #12
 8007f26:	4611      	mov	r1, r2
 8007f28:	4618      	mov	r0, r3
 8007f2a:	f00c ffcc 	bl	8014ec6 <sys_arch_mbox_tryfetch>
 8007f2e:	4603      	mov	r3, r0
 8007f30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007f34:	d10a      	bne.n	8007f4c <netconn_accept+0xb8>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 8007f36:	f06f 0306 	mvn.w	r3, #6
 8007f3a:	e02a      	b.n	8007f92 <netconn_accept+0xfe>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	3314      	adds	r3, #20
 8007f40:	f107 010c 	add.w	r1, r7, #12
 8007f44:	2200      	movs	r2, #0
 8007f46:	4618      	mov	r0, r3
 8007f48:	f00c ff8c 	bl	8014e64 <sys_arch_mbox_fetch>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d005      	beq.n	8007f60 <netconn_accept+0xcc>
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f58:	2200      	movs	r2, #0
 8007f5a:	2101      	movs	r1, #1
 8007f5c:	6878      	ldr	r0, [r7, #4]
 8007f5e:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	f107 0213 	add.w	r2, r7, #19
 8007f66:	4611      	mov	r1, r2
 8007f68:	4618      	mov	r0, r3
 8007f6a:	f000 fb75 	bl	8008658 <lwip_netconn_is_err_msg>
 8007f6e:	4603      	mov	r3, r0
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d002      	beq.n	8007f7a <netconn_accept+0xe6>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 8007f74:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007f78:	e00b      	b.n	8007f92 <netconn_accept+0xfe>
  }
  if (accept_ptr == NULL) {
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d102      	bne.n	8007f86 <netconn_accept+0xf2>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 8007f80:	f06f 030e 	mvn.w	r3, #14
 8007f84:	e005      	b.n	8007f92 <netconn_accept+0xfe>
  }
  newconn = (struct netconn *)accept_ptr;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	697a      	ldr	r2, [r7, #20]
 8007f8e:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8007f90:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8007f92:	4618      	mov	r0, r3
 8007f94:	3718      	adds	r7, #24
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bd80      	pop	{r7, pc}
 8007f9a:	bf00      	nop
 8007f9c:	080163fc 	.word	0x080163fc
 8007fa0:	080165d4 	.word	0x080165d4
 8007fa4:	08016454 	.word	0x08016454
 8007fa8:	080165f4 	.word	0x080165f4

08007fac <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b088      	sub	sp, #32
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	60f8      	str	r0, [r7, #12]
 8007fb4:	60b9      	str	r1, [r7, #8]
 8007fb6:	4613      	mov	r3, r2
 8007fb8:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 8007fba:	2300      	movs	r3, #0
 8007fbc:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8007fbe:	68bb      	ldr	r3, [r7, #8]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d109      	bne.n	8007fd8 <netconn_recv_data+0x2c>
 8007fc4:	4b58      	ldr	r3, [pc, #352]	; (8008128 <netconn_recv_data+0x17c>)
 8007fc6:	f44f 7212 	mov.w	r2, #584	; 0x248
 8007fca:	4958      	ldr	r1, [pc, #352]	; (800812c <netconn_recv_data+0x180>)
 8007fcc:	4858      	ldr	r0, [pc, #352]	; (8008130 <netconn_recv_data+0x184>)
 8007fce:	f00d fa55 	bl	801547c <iprintf>
 8007fd2:	f06f 030f 	mvn.w	r3, #15
 8007fd6:	e0a2      	b.n	800811e <netconn_recv_data+0x172>
  *new_buf = NULL;
 8007fd8:	68bb      	ldr	r3, [r7, #8]
 8007fda:	2200      	movs	r2, #0
 8007fdc:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d109      	bne.n	8007ff8 <netconn_recv_data+0x4c>
 8007fe4:	4b50      	ldr	r3, [pc, #320]	; (8008128 <netconn_recv_data+0x17c>)
 8007fe6:	f240 224a 	movw	r2, #586	; 0x24a
 8007fea:	4952      	ldr	r1, [pc, #328]	; (8008134 <netconn_recv_data+0x188>)
 8007fec:	4850      	ldr	r0, [pc, #320]	; (8008130 <netconn_recv_data+0x184>)
 8007fee:	f00d fa45 	bl	801547c <iprintf>
 8007ff2:	f06f 030f 	mvn.w	r3, #15
 8007ff6:	e092      	b.n	800811e <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	3310      	adds	r3, #16
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	f00c ff79 	bl	8014ef4 <sys_mbox_valid>
 8008002:	4603      	mov	r3, r0
 8008004:	2b00      	cmp	r3, #0
 8008006:	d10e      	bne.n	8008026 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 8008008:	68f8      	ldr	r0, [r7, #12]
 800800a:	f000 fad4 	bl	80085b6 <netconn_err>
 800800e:	4603      	mov	r3, r0
 8008010:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 8008012:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d002      	beq.n	8008020 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 800801a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800801e:	e07e      	b.n	800811e <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 8008020:	f06f 030a 	mvn.w	r3, #10
 8008024:	e07b      	b.n	800811e <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	7f1b      	ldrb	r3, [r3, #28]
 800802a:	f003 0302 	and.w	r3, r3, #2
 800802e:	2b00      	cmp	r3, #0
 8008030:	d10f      	bne.n	8008052 <netconn_recv_data+0xa6>
 8008032:	79fb      	ldrb	r3, [r7, #7]
 8008034:	f003 0304 	and.w	r3, r3, #4
 8008038:	2b00      	cmp	r3, #0
 800803a:	d10a      	bne.n	8008052 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	7f1b      	ldrb	r3, [r3, #28]
 8008040:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8008044:	2b00      	cmp	r3, #0
 8008046:	d104      	bne.n	8008052 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d023      	beq.n	800809a <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	3310      	adds	r3, #16
 8008056:	f107 0218 	add.w	r2, r7, #24
 800805a:	4611      	mov	r1, r2
 800805c:	4618      	mov	r0, r3
 800805e:	f00c ff32 	bl	8014ec6 <sys_arch_mbox_tryfetch>
 8008062:	4603      	mov	r3, r0
 8008064:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008068:	d11f      	bne.n	80080aa <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 800806a:	68f8      	ldr	r0, [r7, #12]
 800806c:	f000 faa3 	bl	80085b6 <netconn_err>
 8008070:	4603      	mov	r3, r0
 8008072:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 8008074:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d002      	beq.n	8008082 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 800807c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8008080:	e04d      	b.n	800811e <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	7f1b      	ldrb	r3, [r3, #28]
 8008086:	f003 0301 	and.w	r3, r3, #1
 800808a:	2b00      	cmp	r3, #0
 800808c:	d002      	beq.n	8008094 <netconn_recv_data+0xe8>
        return ERR_CONN;
 800808e:	f06f 030a 	mvn.w	r3, #10
 8008092:	e044      	b.n	800811e <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 8008094:	f06f 0306 	mvn.w	r3, #6
 8008098:	e041      	b.n	800811e <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	3310      	adds	r3, #16
 800809e:	f107 0118 	add.w	r1, r7, #24
 80080a2:	2200      	movs	r2, #0
 80080a4:	4618      	mov	r0, r3
 80080a6:	f00c fedd 	bl	8014e64 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	781b      	ldrb	r3, [r3, #0]
 80080ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80080b2:	2b10      	cmp	r3, #16
 80080b4:	d117      	bne.n	80080e6 <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 80080b6:	69bb      	ldr	r3, [r7, #24]
 80080b8:	f107 0217 	add.w	r2, r7, #23
 80080bc:	4611      	mov	r1, r2
 80080be:	4618      	mov	r0, r3
 80080c0:	f000 faca 	bl	8008658 <lwip_netconn_is_err_msg>
 80080c4:	4603      	mov	r3, r0
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d009      	beq.n	80080de <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 80080ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80080ce:	f113 0f0f 	cmn.w	r3, #15
 80080d2:	d101      	bne.n	80080d8 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 80080d4:	2300      	movs	r3, #0
 80080d6:	e022      	b.n	800811e <netconn_recv_data+0x172>
      }
      return err;
 80080d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80080dc:	e01f      	b.n	800811e <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 80080de:	69bb      	ldr	r3, [r7, #24]
 80080e0:	891b      	ldrh	r3, [r3, #8]
 80080e2:	83fb      	strh	r3, [r7, #30]
 80080e4:	e00d      	b.n	8008102 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 80080e6:	69bb      	ldr	r3, [r7, #24]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d106      	bne.n	80080fa <netconn_recv_data+0x14e>
 80080ec:	4b0e      	ldr	r3, [pc, #56]	; (8008128 <netconn_recv_data+0x17c>)
 80080ee:	f240 2291 	movw	r2, #657	; 0x291
 80080f2:	4911      	ldr	r1, [pc, #68]	; (8008138 <netconn_recv_data+0x18c>)
 80080f4:	480e      	ldr	r0, [pc, #56]	; (8008130 <netconn_recv_data+0x184>)
 80080f6:	f00d f9c1 	bl	801547c <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 80080fa:	69bb      	ldr	r3, [r7, #24]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	891b      	ldrh	r3, [r3, #8]
 8008100:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008106:	2b00      	cmp	r3, #0
 8008108:	d005      	beq.n	8008116 <netconn_recv_data+0x16a>
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800810e:	8bfa      	ldrh	r2, [r7, #30]
 8008110:	2101      	movs	r1, #1
 8008112:	68f8      	ldr	r0, [r7, #12]
 8008114:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 8008116:	69ba      	ldr	r2, [r7, #24]
 8008118:	68bb      	ldr	r3, [r7, #8]
 800811a:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800811c:	2300      	movs	r3, #0
}
 800811e:	4618      	mov	r0, r3
 8008120:	3720      	adds	r7, #32
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}
 8008126:	bf00      	nop
 8008128:	080163fc 	.word	0x080163fc
 800812c:	08016614 	.word	0x08016614
 8008130:	08016454 	.word	0x08016454
 8008134:	08016634 	.word	0x08016634
 8008138:	08016650 	.word	0x08016650

0800813c <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 800813c:	b580      	push	{r7, lr}
 800813e:	b084      	sub	sp, #16
 8008140:	af00      	add	r7, sp, #0
 8008142:	60f8      	str	r0, [r7, #12]
 8008144:	60b9      	str	r1, [r7, #8]
 8008146:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d005      	beq.n	800815a <netconn_tcp_recvd_msg+0x1e>
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	781b      	ldrb	r3, [r3, #0]
 8008152:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008156:	2b10      	cmp	r3, #16
 8008158:	d009      	beq.n	800816e <netconn_tcp_recvd_msg+0x32>
 800815a:	4b0c      	ldr	r3, [pc, #48]	; (800818c <netconn_tcp_recvd_msg+0x50>)
 800815c:	f240 22a7 	movw	r2, #679	; 0x2a7
 8008160:	490b      	ldr	r1, [pc, #44]	; (8008190 <netconn_tcp_recvd_msg+0x54>)
 8008162:	480c      	ldr	r0, [pc, #48]	; (8008194 <netconn_tcp_recvd_msg+0x58>)
 8008164:	f00d f98a 	bl	801547c <iprintf>
 8008168:	f06f 030f 	mvn.w	r3, #15
 800816c:	e00a      	b.n	8008184 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	68fa      	ldr	r2, [r7, #12]
 8008172:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	68ba      	ldr	r2, [r7, #8]
 8008178:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 800817a:	6879      	ldr	r1, [r7, #4]
 800817c:	4806      	ldr	r0, [pc, #24]	; (8008198 <netconn_tcp_recvd_msg+0x5c>)
 800817e:	f7ff fd4d 	bl	8007c1c <netconn_apimsg>
 8008182:	4603      	mov	r3, r0
}
 8008184:	4618      	mov	r0, r3
 8008186:	3710      	adds	r7, #16
 8008188:	46bd      	mov	sp, r7
 800818a:	bd80      	pop	{r7, pc}
 800818c:	080163fc 	.word	0x080163fc
 8008190:	0801665c 	.word	0x0801665c
 8008194:	08016454 	.word	0x08016454
 8008198:	0800975d 	.word	0x0800975d

0800819c <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b090      	sub	sp, #64	; 0x40
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	60f8      	str	r0, [r7, #12]
 80081a4:	60b9      	str	r1, [r7, #8]
 80081a6:	4613      	mov	r3, r2
 80081a8:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	3310      	adds	r3, #16
 80081ae:	4618      	mov	r0, r3
 80081b0:	f00c fea0 	bl	8014ef4 <sys_mbox_valid>
 80081b4:	4603      	mov	r3, r0
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d102      	bne.n	80081c0 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 80081ba:	f06f 030a 	mvn.w	r3, #10
 80081be:	e06d      	b.n	800829c <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	7f1b      	ldrb	r3, [r3, #28]
 80081c4:	b25b      	sxtb	r3, r3
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	da07      	bge.n	80081da <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	7f1b      	ldrb	r3, [r3, #28]
 80081ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081d2:	b2da      	uxtb	r2, r3
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 80081d8:	e039      	b.n	800824e <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 80081da:	79fb      	ldrb	r3, [r7, #7]
 80081dc:	461a      	mov	r2, r3
 80081de:	68b9      	ldr	r1, [r7, #8]
 80081e0:	68f8      	ldr	r0, [r7, #12]
 80081e2:	f7ff fee3 	bl	8007fac <netconn_recv_data>
 80081e6:	4603      	mov	r3, r0
 80081e8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 80081ec:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d002      	beq.n	80081fa <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 80081f4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80081f8:	e050      	b.n	800829c <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 80081fa:	68bb      	ldr	r3, [r7, #8]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 8008200:	79fb      	ldrb	r3, [r7, #7]
 8008202:	f003 0308 	and.w	r3, r3, #8
 8008206:	2b00      	cmp	r3, #0
 8008208:	d10e      	bne.n	8008228 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 800820a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800820c:	2b00      	cmp	r3, #0
 800820e:	d002      	beq.n	8008216 <netconn_recv_data_tcp+0x7a>
 8008210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008212:	891b      	ldrh	r3, [r3, #8]
 8008214:	e000      	b.n	8008218 <netconn_recv_data_tcp+0x7c>
 8008216:	2301      	movs	r3, #1
 8008218:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 800821a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800821c:	f107 0214 	add.w	r2, r7, #20
 8008220:	4619      	mov	r1, r3
 8008222:	68f8      	ldr	r0, [r7, #12]
 8008224:	f7ff ff8a 	bl	800813c <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 8008228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800822a:	2b00      	cmp	r3, #0
 800822c:	d134      	bne.n	8008298 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 800822e:	79fb      	ldrb	r3, [r7, #7]
 8008230:	f003 0310 	and.w	r3, r3, #16
 8008234:	2b00      	cmp	r3, #0
 8008236:	d009      	beq.n	800824c <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	7f1b      	ldrb	r3, [r3, #28]
 800823c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008240:	b2da      	uxtb	r2, r3
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 8008246:	f06f 0306 	mvn.w	r3, #6
 800824a:	e027      	b.n	800829c <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 800824c:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008252:	2b00      	cmp	r3, #0
 8008254:	d005      	beq.n	8008262 <netconn_recv_data_tcp+0xc6>
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800825a:	2200      	movs	r2, #0
 800825c:	2101      	movs	r1, #1
 800825e:	68f8      	ldr	r0, [r7, #12]
 8008260:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	685b      	ldr	r3, [r3, #4]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d10f      	bne.n	800828a <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 800826a:	68f8      	ldr	r0, [r7, #12]
 800826c:	f000 f9a3 	bl	80085b6 <netconn_err>
 8008270:	4603      	mov	r3, r0
 8008272:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 8008276:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800827a:	2b00      	cmp	r3, #0
 800827c:	d002      	beq.n	8008284 <netconn_recv_data_tcp+0xe8>
          return err;
 800827e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008282:	e00b      	b.n	800829c <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 8008284:	f06f 030d 	mvn.w	r3, #13
 8008288:	e008      	b.n	800829c <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800828a:	2101      	movs	r1, #1
 800828c:	68f8      	ldr	r0, [r7, #12]
 800828e:	f000 f955 	bl	800853c <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 8008292:	f06f 030e 	mvn.w	r3, #14
 8008296:	e001      	b.n	800829c <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 8008298:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800829c:	4618      	mov	r0, r3
 800829e:	3740      	adds	r7, #64	; 0x40
 80082a0:	46bd      	mov	sp, r7
 80082a2:	bd80      	pop	{r7, pc}

080082a4 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b086      	sub	sp, #24
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
 80082ac:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 80082ae:	2300      	movs	r3, #0
 80082b0:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d109      	bne.n	80082cc <netconn_recv+0x28>
 80082b8:	4b32      	ldr	r3, [pc, #200]	; (8008384 <netconn_recv+0xe0>)
 80082ba:	f240 3263 	movw	r2, #867	; 0x363
 80082be:	4932      	ldr	r1, [pc, #200]	; (8008388 <netconn_recv+0xe4>)
 80082c0:	4832      	ldr	r0, [pc, #200]	; (800838c <netconn_recv+0xe8>)
 80082c2:	f00d f8db 	bl	801547c <iprintf>
 80082c6:	f06f 030f 	mvn.w	r3, #15
 80082ca:	e056      	b.n	800837a <netconn_recv+0xd6>
  *new_buf = NULL;
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	2200      	movs	r2, #0
 80082d0:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d109      	bne.n	80082ec <netconn_recv+0x48>
 80082d8:	4b2a      	ldr	r3, [pc, #168]	; (8008384 <netconn_recv+0xe0>)
 80082da:	f240 3265 	movw	r2, #869	; 0x365
 80082de:	492c      	ldr	r1, [pc, #176]	; (8008390 <netconn_recv+0xec>)
 80082e0:	482a      	ldr	r0, [pc, #168]	; (800838c <netconn_recv+0xe8>)
 80082e2:	f00d f8cb 	bl	801547c <iprintf>
 80082e6:	f06f 030f 	mvn.w	r3, #15
 80082ea:	e046      	b.n	800837a <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	781b      	ldrb	r3, [r3, #0]
 80082f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80082f4:	2b10      	cmp	r3, #16
 80082f6:	d13a      	bne.n	800836e <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 80082f8:	2300      	movs	r3, #0
 80082fa:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 80082fc:	2006      	movs	r0, #6
 80082fe:	f002 fc1f 	bl	800ab40 <memp_malloc>
 8008302:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 8008304:	697b      	ldr	r3, [r7, #20]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d102      	bne.n	8008310 <netconn_recv+0x6c>
      return ERR_MEM;
 800830a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800830e:	e034      	b.n	800837a <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 8008310:	f107 030c 	add.w	r3, r7, #12
 8008314:	2200      	movs	r2, #0
 8008316:	4619      	mov	r1, r3
 8008318:	6878      	ldr	r0, [r7, #4]
 800831a:	f7ff ff3f 	bl	800819c <netconn_recv_data_tcp>
 800831e:	4603      	mov	r3, r0
 8008320:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8008322:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d006      	beq.n	8008338 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 800832a:	6979      	ldr	r1, [r7, #20]
 800832c:	2006      	movs	r0, #6
 800832e:	f002 fc59 	bl	800abe4 <memp_free>
      return err;
 8008332:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008336:	e020      	b.n	800837a <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d106      	bne.n	800834c <netconn_recv+0xa8>
 800833e:	4b11      	ldr	r3, [pc, #68]	; (8008384 <netconn_recv+0xe0>)
 8008340:	f240 3279 	movw	r2, #889	; 0x379
 8008344:	4913      	ldr	r1, [pc, #76]	; (8008394 <netconn_recv+0xf0>)
 8008346:	4811      	ldr	r0, [pc, #68]	; (800838c <netconn_recv+0xe8>)
 8008348:	f00d f898 	bl	801547c <iprintf>

    buf->p = p;
 800834c:	68fa      	ldr	r2, [r7, #12]
 800834e:	697b      	ldr	r3, [r7, #20]
 8008350:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8008352:	68fa      	ldr	r2, [r7, #12]
 8008354:	697b      	ldr	r3, [r7, #20]
 8008356:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 8008358:	697b      	ldr	r3, [r7, #20]
 800835a:	2200      	movs	r2, #0
 800835c:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 800835e:	697b      	ldr	r3, [r7, #20]
 8008360:	2200      	movs	r2, #0
 8008362:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 8008364:	683b      	ldr	r3, [r7, #0]
 8008366:	697a      	ldr	r2, [r7, #20]
 8008368:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 800836a:	2300      	movs	r3, #0
 800836c:	e005      	b.n	800837a <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 800836e:	2200      	movs	r2, #0
 8008370:	6839      	ldr	r1, [r7, #0]
 8008372:	6878      	ldr	r0, [r7, #4]
 8008374:	f7ff fe1a 	bl	8007fac <netconn_recv_data>
 8008378:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 800837a:	4618      	mov	r0, r3
 800837c:	3718      	adds	r7, #24
 800837e:	46bd      	mov	sp, r7
 8008380:	bd80      	pop	{r7, pc}
 8008382:	bf00      	nop
 8008384:	080163fc 	.word	0x080163fc
 8008388:	08016614 	.word	0x08016614
 800838c:	08016454 	.word	0x08016454
 8008390:	08016634 	.word	0x08016634
 8008394:	080166ac 	.word	0x080166ac

08008398 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b088      	sub	sp, #32
 800839c:	af02      	add	r7, sp, #8
 800839e:	60f8      	str	r0, [r7, #12]
 80083a0:	60b9      	str	r1, [r7, #8]
 80083a2:	607a      	str	r2, [r7, #4]
 80083a4:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 80083a6:	68bb      	ldr	r3, [r7, #8]
 80083a8:	613b      	str	r3, [r7, #16]
  vector.len = size;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 80083ae:	78fa      	ldrb	r2, [r7, #3]
 80083b0:	f107 0110 	add.w	r1, r7, #16
 80083b4:	6a3b      	ldr	r3, [r7, #32]
 80083b6:	9300      	str	r3, [sp, #0]
 80083b8:	4613      	mov	r3, r2
 80083ba:	2201      	movs	r2, #1
 80083bc:	68f8      	ldr	r0, [r7, #12]
 80083be:	f000 f805 	bl	80083cc <netconn_write_vectors_partly>
 80083c2:	4603      	mov	r3, r0
}
 80083c4:	4618      	mov	r0, r3
 80083c6:	3718      	adds	r7, #24
 80083c8:	46bd      	mov	sp, r7
 80083ca:	bd80      	pop	{r7, pc}

080083cc <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b092      	sub	sp, #72	; 0x48
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	60f8      	str	r0, [r7, #12]
 80083d4:	60b9      	str	r1, [r7, #8]
 80083d6:	4611      	mov	r1, r2
 80083d8:	461a      	mov	r2, r3
 80083da:	460b      	mov	r3, r1
 80083dc:	80fb      	strh	r3, [r7, #6]
 80083de:	4613      	mov	r3, r2
 80083e0:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d109      	bne.n	80083fc <netconn_write_vectors_partly+0x30>
 80083e8:	4b4e      	ldr	r3, [pc, #312]	; (8008524 <netconn_write_vectors_partly+0x158>)
 80083ea:	f240 32ee 	movw	r2, #1006	; 0x3ee
 80083ee:	494e      	ldr	r1, [pc, #312]	; (8008528 <netconn_write_vectors_partly+0x15c>)
 80083f0:	484e      	ldr	r0, [pc, #312]	; (800852c <netconn_write_vectors_partly+0x160>)
 80083f2:	f00d f843 	bl	801547c <iprintf>
 80083f6:	f06f 030f 	mvn.w	r3, #15
 80083fa:	e08e      	b.n	800851a <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	781b      	ldrb	r3, [r3, #0]
 8008400:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008404:	2b10      	cmp	r3, #16
 8008406:	d009      	beq.n	800841c <netconn_write_vectors_partly+0x50>
 8008408:	4b46      	ldr	r3, [pc, #280]	; (8008524 <netconn_write_vectors_partly+0x158>)
 800840a:	f240 32ef 	movw	r2, #1007	; 0x3ef
 800840e:	4948      	ldr	r1, [pc, #288]	; (8008530 <netconn_write_vectors_partly+0x164>)
 8008410:	4846      	ldr	r0, [pc, #280]	; (800852c <netconn_write_vectors_partly+0x160>)
 8008412:	f00d f833 	bl	801547c <iprintf>
 8008416:	f06f 0305 	mvn.w	r3, #5
 800841a:	e07e      	b.n	800851a <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	7f1b      	ldrb	r3, [r3, #28]
 8008420:	f003 0302 	and.w	r3, r3, #2
 8008424:	2b00      	cmp	r3, #0
 8008426:	d104      	bne.n	8008432 <netconn_write_vectors_partly+0x66>
 8008428:	797b      	ldrb	r3, [r7, #5]
 800842a:	f003 0304 	and.w	r3, r3, #4
 800842e:	2b00      	cmp	r3, #0
 8008430:	d001      	beq.n	8008436 <netconn_write_vectors_partly+0x6a>
 8008432:	2301      	movs	r3, #1
 8008434:	e000      	b.n	8008438 <netconn_write_vectors_partly+0x6c>
 8008436:	2300      	movs	r3, #0
 8008438:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 800843c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008440:	2b00      	cmp	r3, #0
 8008442:	d005      	beq.n	8008450 <netconn_write_vectors_partly+0x84>
 8008444:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008446:	2b00      	cmp	r3, #0
 8008448:	d102      	bne.n	8008450 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 800844a:	f06f 0305 	mvn.w	r3, #5
 800844e:	e064      	b.n	800851a <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 8008450:	2300      	movs	r3, #0
 8008452:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 8008454:	2300      	movs	r3, #0
 8008456:	643b      	str	r3, [r7, #64]	; 0x40
 8008458:	e015      	b.n	8008486 <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 800845a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800845c:	00db      	lsls	r3, r3, #3
 800845e:	68ba      	ldr	r2, [r7, #8]
 8008460:	4413      	add	r3, r2
 8008462:	685b      	ldr	r3, [r3, #4]
 8008464:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008466:	4413      	add	r3, r2
 8008468:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 800846a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800846c:	00db      	lsls	r3, r3, #3
 800846e:	68ba      	ldr	r2, [r7, #8]
 8008470:	4413      	add	r3, r2
 8008472:	685b      	ldr	r3, [r3, #4]
 8008474:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008476:	429a      	cmp	r2, r3
 8008478:	d202      	bcs.n	8008480 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 800847a:	f06f 0305 	mvn.w	r3, #5
 800847e:	e04c      	b.n	800851a <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 8008480:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008482:	3301      	adds	r3, #1
 8008484:	643b      	str	r3, [r7, #64]	; 0x40
 8008486:	88fb      	ldrh	r3, [r7, #6]
 8008488:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800848a:	429a      	cmp	r2, r3
 800848c:	dbe5      	blt.n	800845a <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 800848e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008490:	2b00      	cmp	r3, #0
 8008492:	d101      	bne.n	8008498 <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 8008494:	2300      	movs	r3, #0
 8008496:	e040      	b.n	800851a <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 8008498:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800849a:	2b00      	cmp	r3, #0
 800849c:	da0a      	bge.n	80084b4 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 800849e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d102      	bne.n	80084aa <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 80084a4:	f06f 0305 	mvn.w	r3, #5
 80084a8:	e037      	b.n	800851a <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 80084aa:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80084ae:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 80084b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084b2:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 80084b8:	68bb      	ldr	r3, [r7, #8]
 80084ba:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 80084bc:	88fb      	ldrh	r3, [r7, #6]
 80084be:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 80084c0:	2300      	movs	r3, #0
 80084c2:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 80084c4:	797b      	ldrb	r3, [r7, #5]
 80084c6:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 80084ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80084cc:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 80084ce:	2300      	movs	r3, #0
 80084d0:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 80084d2:	f107 0314 	add.w	r3, r7, #20
 80084d6:	4619      	mov	r1, r3
 80084d8:	4816      	ldr	r0, [pc, #88]	; (8008534 <netconn_write_vectors_partly+0x168>)
 80084da:	f7ff fb9f 	bl	8007c1c <netconn_apimsg>
 80084de:	4603      	mov	r3, r0
 80084e0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 80084e4:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d114      	bne.n	8008516 <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 80084ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d002      	beq.n	80084f8 <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 80084f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80084f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80084f6:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 80084f8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d10a      	bne.n	8008516 <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 8008500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008502:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008504:	429a      	cmp	r2, r3
 8008506:	d006      	beq.n	8008516 <netconn_write_vectors_partly+0x14a>
 8008508:	4b06      	ldr	r3, [pc, #24]	; (8008524 <netconn_write_vectors_partly+0x158>)
 800850a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800850e:	490a      	ldr	r1, [pc, #40]	; (8008538 <netconn_write_vectors_partly+0x16c>)
 8008510:	4806      	ldr	r0, [pc, #24]	; (800852c <netconn_write_vectors_partly+0x160>)
 8008512:	f00c ffb3 	bl	801547c <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 8008516:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800851a:	4618      	mov	r0, r3
 800851c:	3748      	adds	r7, #72	; 0x48
 800851e:	46bd      	mov	sp, r7
 8008520:	bd80      	pop	{r7, pc}
 8008522:	bf00      	nop
 8008524:	080163fc 	.word	0x080163fc
 8008528:	080166d4 	.word	0x080166d4
 800852c:	08016454 	.word	0x08016454
 8008530:	080166f0 	.word	0x080166f0
 8008534:	08009b61 	.word	0x08009b61
 8008538:	08016714 	.word	0x08016714

0800853c <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 800853c:	b580      	push	{r7, lr}
 800853e:	b08c      	sub	sp, #48	; 0x30
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
 8008544:	460b      	mov	r3, r1
 8008546:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d109      	bne.n	8008562 <netconn_close_shutdown+0x26>
 800854e:	4b0f      	ldr	r3, [pc, #60]	; (800858c <netconn_close_shutdown+0x50>)
 8008550:	f240 4247 	movw	r2, #1095	; 0x447
 8008554:	490e      	ldr	r1, [pc, #56]	; (8008590 <netconn_close_shutdown+0x54>)
 8008556:	480f      	ldr	r0, [pc, #60]	; (8008594 <netconn_close_shutdown+0x58>)
 8008558:	f00c ff90 	bl	801547c <iprintf>
 800855c:	f06f 030f 	mvn.w	r3, #15
 8008560:	e010      	b.n	8008584 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 8008566:	78fb      	ldrb	r3, [r7, #3]
 8008568:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800856a:	2329      	movs	r3, #41	; 0x29
 800856c:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800856e:	f107 030c 	add.w	r3, r7, #12
 8008572:	4619      	mov	r1, r3
 8008574:	4808      	ldr	r0, [pc, #32]	; (8008598 <netconn_close_shutdown+0x5c>)
 8008576:	f7ff fb51 	bl	8007c1c <netconn_apimsg>
 800857a:	4603      	mov	r3, r0
 800857c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8008580:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8008584:	4618      	mov	r0, r3
 8008586:	3730      	adds	r7, #48	; 0x30
 8008588:	46bd      	mov	sp, r7
 800858a:	bd80      	pop	{r7, pc}
 800858c:	080163fc 	.word	0x080163fc
 8008590:	08016738 	.word	0x08016738
 8008594:	08016454 	.word	0x08016454
 8008598:	08009c79 	.word	0x08009c79

0800859c <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 800859c:	b580      	push	{r7, lr}
 800859e:	b082      	sub	sp, #8
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 80085a4:	2103      	movs	r1, #3
 80085a6:	6878      	ldr	r0, [r7, #4]
 80085a8:	f7ff ffc8 	bl	800853c <netconn_close_shutdown>
 80085ac:	4603      	mov	r3, r0
}
 80085ae:	4618      	mov	r0, r3
 80085b0:	3708      	adds	r7, #8
 80085b2:	46bd      	mov	sp, r7
 80085b4:	bd80      	pop	{r7, pc}

080085b6 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 80085b6:	b580      	push	{r7, lr}
 80085b8:	b084      	sub	sp, #16
 80085ba:	af00      	add	r7, sp, #0
 80085bc:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d101      	bne.n	80085c8 <netconn_err+0x12>
    return ERR_OK;
 80085c4:	2300      	movs	r3, #0
 80085c6:	e00d      	b.n	80085e4 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 80085c8:	f00c fd9e 	bl	8015108 <sys_arch_protect>
 80085cc:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	7a1b      	ldrb	r3, [r3, #8]
 80085d2:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2200      	movs	r2, #0
 80085d8:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 80085da:	68f8      	ldr	r0, [r7, #12]
 80085dc:	f00c fda2 	bl	8015124 <sys_arch_unprotect>
  return err;
 80085e0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80085e4:	4618      	mov	r0, r3
 80085e6:	3710      	adds	r7, #16
 80085e8:	46bd      	mov	sp, r7
 80085ea:	bd80      	pop	{r7, pc}

080085ec <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b082      	sub	sp, #8
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	4603      	mov	r3, r0
 80085f4:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 80085f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80085fa:	f113 0f0d 	cmn.w	r3, #13
 80085fe:	d009      	beq.n	8008614 <lwip_netconn_err_to_msg+0x28>
 8008600:	f113 0f0d 	cmn.w	r3, #13
 8008604:	dc0c      	bgt.n	8008620 <lwip_netconn_err_to_msg+0x34>
 8008606:	f113 0f0f 	cmn.w	r3, #15
 800860a:	d007      	beq.n	800861c <lwip_netconn_err_to_msg+0x30>
 800860c:	f113 0f0e 	cmn.w	r3, #14
 8008610:	d002      	beq.n	8008618 <lwip_netconn_err_to_msg+0x2c>
 8008612:	e005      	b.n	8008620 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 8008614:	4b0a      	ldr	r3, [pc, #40]	; (8008640 <lwip_netconn_err_to_msg+0x54>)
 8008616:	e00e      	b.n	8008636 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 8008618:	4b0a      	ldr	r3, [pc, #40]	; (8008644 <lwip_netconn_err_to_msg+0x58>)
 800861a:	e00c      	b.n	8008636 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 800861c:	4b0a      	ldr	r3, [pc, #40]	; (8008648 <lwip_netconn_err_to_msg+0x5c>)
 800861e:	e00a      	b.n	8008636 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 8008620:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d005      	beq.n	8008634 <lwip_netconn_err_to_msg+0x48>
 8008628:	4b08      	ldr	r3, [pc, #32]	; (800864c <lwip_netconn_err_to_msg+0x60>)
 800862a:	227d      	movs	r2, #125	; 0x7d
 800862c:	4908      	ldr	r1, [pc, #32]	; (8008650 <lwip_netconn_err_to_msg+0x64>)
 800862e:	4809      	ldr	r0, [pc, #36]	; (8008654 <lwip_netconn_err_to_msg+0x68>)
 8008630:	f00c ff24 	bl	801547c <iprintf>
      return NULL;
 8008634:	2300      	movs	r3, #0
  }
}
 8008636:	4618      	mov	r0, r3
 8008638:	3708      	adds	r7, #8
 800863a:	46bd      	mov	sp, r7
 800863c:	bd80      	pop	{r7, pc}
 800863e:	bf00      	nop
 8008640:	08019b2c 	.word	0x08019b2c
 8008644:	08019b2d 	.word	0x08019b2d
 8008648:	08019b2e 	.word	0x08019b2e
 800864c:	08016754 	.word	0x08016754
 8008650:	08016788 	.word	0x08016788
 8008654:	08016798 	.word	0x08016798

08008658 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b082      	sub	sp, #8
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
 8008660:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 8008662:	683b      	ldr	r3, [r7, #0]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d105      	bne.n	8008674 <lwip_netconn_is_err_msg+0x1c>
 8008668:	4b12      	ldr	r3, [pc, #72]	; (80086b4 <lwip_netconn_is_err_msg+0x5c>)
 800866a:	2285      	movs	r2, #133	; 0x85
 800866c:	4912      	ldr	r1, [pc, #72]	; (80086b8 <lwip_netconn_is_err_msg+0x60>)
 800866e:	4813      	ldr	r0, [pc, #76]	; (80086bc <lwip_netconn_is_err_msg+0x64>)
 8008670:	f00c ff04 	bl	801547c <iprintf>

  if (msg == &netconn_aborted) {
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	4a12      	ldr	r2, [pc, #72]	; (80086c0 <lwip_netconn_is_err_msg+0x68>)
 8008678:	4293      	cmp	r3, r2
 800867a:	d104      	bne.n	8008686 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	22f3      	movs	r2, #243	; 0xf3
 8008680:	701a      	strb	r2, [r3, #0]
    return 1;
 8008682:	2301      	movs	r3, #1
 8008684:	e012      	b.n	80086ac <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	4a0e      	ldr	r2, [pc, #56]	; (80086c4 <lwip_netconn_is_err_msg+0x6c>)
 800868a:	4293      	cmp	r3, r2
 800868c:	d104      	bne.n	8008698 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 800868e:	683b      	ldr	r3, [r7, #0]
 8008690:	22f2      	movs	r2, #242	; 0xf2
 8008692:	701a      	strb	r2, [r3, #0]
    return 1;
 8008694:	2301      	movs	r3, #1
 8008696:	e009      	b.n	80086ac <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	4a0b      	ldr	r2, [pc, #44]	; (80086c8 <lwip_netconn_is_err_msg+0x70>)
 800869c:	4293      	cmp	r3, r2
 800869e:	d104      	bne.n	80086aa <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	22f1      	movs	r2, #241	; 0xf1
 80086a4:	701a      	strb	r2, [r3, #0]
    return 1;
 80086a6:	2301      	movs	r3, #1
 80086a8:	e000      	b.n	80086ac <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 80086aa:	2300      	movs	r3, #0
}
 80086ac:	4618      	mov	r0, r3
 80086ae:	3708      	adds	r7, #8
 80086b0:	46bd      	mov	sp, r7
 80086b2:	bd80      	pop	{r7, pc}
 80086b4:	08016754 	.word	0x08016754
 80086b8:	080167c0 	.word	0x080167c0
 80086bc:	08016798 	.word	0x08016798
 80086c0:	08019b2c 	.word	0x08019b2c
 80086c4:	08019b2d 	.word	0x08019b2d
 80086c8:	08019b2e 	.word	0x08019b2e

080086cc <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b088      	sub	sp, #32
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	60f8      	str	r0, [r7, #12]
 80086d4:	60b9      	str	r1, [r7, #8]
 80086d6:	607a      	str	r2, [r7, #4]
 80086d8:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 80086da:	68bb      	ldr	r3, [r7, #8]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d105      	bne.n	80086ec <recv_udp+0x20>
 80086e0:	4b34      	ldr	r3, [pc, #208]	; (80087b4 <recv_udp+0xe8>)
 80086e2:	22e5      	movs	r2, #229	; 0xe5
 80086e4:	4934      	ldr	r1, [pc, #208]	; (80087b8 <recv_udp+0xec>)
 80086e6:	4835      	ldr	r0, [pc, #212]	; (80087bc <recv_udp+0xf0>)
 80086e8:	f00c fec8 	bl	801547c <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d105      	bne.n	80086fe <recv_udp+0x32>
 80086f2:	4b30      	ldr	r3, [pc, #192]	; (80087b4 <recv_udp+0xe8>)
 80086f4:	22e6      	movs	r2, #230	; 0xe6
 80086f6:	4932      	ldr	r1, [pc, #200]	; (80087c0 <recv_udp+0xf4>)
 80086f8:	4830      	ldr	r0, [pc, #192]	; (80087bc <recv_udp+0xf0>)
 80086fa:	f00c febf 	bl	801547c <iprintf>
  conn = (struct netconn *)arg;
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8008702:	69fb      	ldr	r3, [r7, #28]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d103      	bne.n	8008710 <recv_udp+0x44>
    pbuf_free(p);
 8008708:	6878      	ldr	r0, [r7, #4]
 800870a:	f003 f90f 	bl	800b92c <pbuf_free>
    return;
 800870e:	e04d      	b.n	80087ac <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 8008710:	69fb      	ldr	r3, [r7, #28]
 8008712:	685b      	ldr	r3, [r3, #4]
 8008714:	68ba      	ldr	r2, [r7, #8]
 8008716:	429a      	cmp	r2, r3
 8008718:	d005      	beq.n	8008726 <recv_udp+0x5a>
 800871a:	4b26      	ldr	r3, [pc, #152]	; (80087b4 <recv_udp+0xe8>)
 800871c:	22ee      	movs	r2, #238	; 0xee
 800871e:	4929      	ldr	r1, [pc, #164]	; (80087c4 <recv_udp+0xf8>)
 8008720:	4826      	ldr	r0, [pc, #152]	; (80087bc <recv_udp+0xf0>)
 8008722:	f00c feab 	bl	801547c <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8008726:	69fb      	ldr	r3, [r7, #28]
 8008728:	3310      	adds	r3, #16
 800872a:	4618      	mov	r0, r3
 800872c:	f00c fbe2 	bl	8014ef4 <sys_mbox_valid>
 8008730:	4603      	mov	r3, r0
 8008732:	2b00      	cmp	r3, #0
 8008734:	d103      	bne.n	800873e <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 8008736:	6878      	ldr	r0, [r7, #4]
 8008738:	f003 f8f8 	bl	800b92c <pbuf_free>
    return;
 800873c:	e036      	b.n	80087ac <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800873e:	2006      	movs	r0, #6
 8008740:	f002 f9fe 	bl	800ab40 <memp_malloc>
 8008744:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 8008746:	69bb      	ldr	r3, [r7, #24]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d103      	bne.n	8008754 <recv_udp+0x88>
    pbuf_free(p);
 800874c:	6878      	ldr	r0, [r7, #4]
 800874e:	f003 f8ed 	bl	800b92c <pbuf_free>
    return;
 8008752:	e02b      	b.n	80087ac <recv_udp+0xe0>
  } else {
    buf->p = p;
 8008754:	69bb      	ldr	r3, [r7, #24]
 8008756:	687a      	ldr	r2, [r7, #4]
 8008758:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800875a:	69bb      	ldr	r3, [r7, #24]
 800875c:	687a      	ldr	r2, [r7, #4]
 800875e:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d002      	beq.n	800876c <recv_udp+0xa0>
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	e000      	b.n	800876e <recv_udp+0xa2>
 800876c:	2300      	movs	r3, #0
 800876e:	69ba      	ldr	r2, [r7, #24]
 8008770:	6093      	str	r3, [r2, #8]
    buf->port = port;
 8008772:	69bb      	ldr	r3, [r7, #24]
 8008774:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8008776:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	891b      	ldrh	r3, [r3, #8]
 800877c:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800877e:	69fb      	ldr	r3, [r7, #28]
 8008780:	3310      	adds	r3, #16
 8008782:	69b9      	ldr	r1, [r7, #24]
 8008784:	4618      	mov	r0, r3
 8008786:	f00c fb53 	bl	8014e30 <sys_mbox_trypost>
 800878a:	4603      	mov	r3, r0
 800878c:	2b00      	cmp	r3, #0
 800878e:	d003      	beq.n	8008798 <recv_udp+0xcc>
    netbuf_delete(buf);
 8008790:	69b8      	ldr	r0, [r7, #24]
 8008792:	f001 fafd 	bl	8009d90 <netbuf_delete>
    return;
 8008796:	e009      	b.n	80087ac <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8008798:	69fb      	ldr	r3, [r7, #28]
 800879a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800879c:	2b00      	cmp	r3, #0
 800879e:	d005      	beq.n	80087ac <recv_udp+0xe0>
 80087a0:	69fb      	ldr	r3, [r7, #28]
 80087a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087a4:	8afa      	ldrh	r2, [r7, #22]
 80087a6:	2100      	movs	r1, #0
 80087a8:	69f8      	ldr	r0, [r7, #28]
 80087aa:	4798      	blx	r3
  }
}
 80087ac:	3720      	adds	r7, #32
 80087ae:	46bd      	mov	sp, r7
 80087b0:	bd80      	pop	{r7, pc}
 80087b2:	bf00      	nop
 80087b4:	08016754 	.word	0x08016754
 80087b8:	080167cc 	.word	0x080167cc
 80087bc:	08016798 	.word	0x08016798
 80087c0:	080167f0 	.word	0x080167f0
 80087c4:	08016810 	.word	0x08016810

080087c8 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b088      	sub	sp, #32
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	60f8      	str	r0, [r7, #12]
 80087d0:	60b9      	str	r1, [r7, #8]
 80087d2:	607a      	str	r2, [r7, #4]
 80087d4:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 80087d6:	68bb      	ldr	r3, [r7, #8]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d106      	bne.n	80087ea <recv_tcp+0x22>
 80087dc:	4b36      	ldr	r3, [pc, #216]	; (80088b8 <recv_tcp+0xf0>)
 80087de:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80087e2:	4936      	ldr	r1, [pc, #216]	; (80088bc <recv_tcp+0xf4>)
 80087e4:	4836      	ldr	r0, [pc, #216]	; (80088c0 <recv_tcp+0xf8>)
 80087e6:	f00c fe49 	bl	801547c <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d106      	bne.n	80087fe <recv_tcp+0x36>
 80087f0:	4b31      	ldr	r3, [pc, #196]	; (80088b8 <recv_tcp+0xf0>)
 80087f2:	f240 122d 	movw	r2, #301	; 0x12d
 80087f6:	4933      	ldr	r1, [pc, #204]	; (80088c4 <recv_tcp+0xfc>)
 80087f8:	4831      	ldr	r0, [pc, #196]	; (80088c0 <recv_tcp+0xf8>)
 80087fa:	f00c fe3f 	bl	801547c <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 80087fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d006      	beq.n	8008814 <recv_tcp+0x4c>
 8008806:	4b2c      	ldr	r3, [pc, #176]	; (80088b8 <recv_tcp+0xf0>)
 8008808:	f44f 7297 	mov.w	r2, #302	; 0x12e
 800880c:	492e      	ldr	r1, [pc, #184]	; (80088c8 <recv_tcp+0x100>)
 800880e:	482c      	ldr	r0, [pc, #176]	; (80088c0 <recv_tcp+0xf8>)
 8008810:	f00c fe34 	bl	801547c <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 8008818:	697b      	ldr	r3, [r7, #20]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d102      	bne.n	8008824 <recv_tcp+0x5c>
    return ERR_VAL;
 800881e:	f06f 0305 	mvn.w	r3, #5
 8008822:	e045      	b.n	80088b0 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 8008824:	697b      	ldr	r3, [r7, #20]
 8008826:	685b      	ldr	r3, [r3, #4]
 8008828:	68ba      	ldr	r2, [r7, #8]
 800882a:	429a      	cmp	r2, r3
 800882c:	d006      	beq.n	800883c <recv_tcp+0x74>
 800882e:	4b22      	ldr	r3, [pc, #136]	; (80088b8 <recv_tcp+0xf0>)
 8008830:	f240 1235 	movw	r2, #309	; 0x135
 8008834:	4925      	ldr	r1, [pc, #148]	; (80088cc <recv_tcp+0x104>)
 8008836:	4822      	ldr	r0, [pc, #136]	; (80088c0 <recv_tcp+0xf8>)
 8008838:	f00c fe20 	bl	801547c <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800883c:	697b      	ldr	r3, [r7, #20]
 800883e:	3310      	adds	r3, #16
 8008840:	4618      	mov	r0, r3
 8008842:	f00c fb57 	bl	8014ef4 <sys_mbox_valid>
 8008846:	4603      	mov	r3, r0
 8008848:	2b00      	cmp	r3, #0
 800884a:	d10d      	bne.n	8008868 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d008      	beq.n	8008864 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	891b      	ldrh	r3, [r3, #8]
 8008856:	4619      	mov	r1, r3
 8008858:	68b8      	ldr	r0, [r7, #8]
 800885a:	f004 f81f 	bl	800c89c <tcp_recved>
      pbuf_free(p);
 800885e:	6878      	ldr	r0, [r7, #4]
 8008860:	f003 f864 	bl	800b92c <pbuf_free>
    }
    return ERR_OK;
 8008864:	2300      	movs	r3, #0
 8008866:	e023      	b.n	80088b0 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d005      	beq.n	800887a <recv_tcp+0xb2>
    msg = p;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	891b      	ldrh	r3, [r3, #8]
 8008876:	83fb      	strh	r3, [r7, #30]
 8008878:	e003      	b.n	8008882 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 800887a:	4b15      	ldr	r3, [pc, #84]	; (80088d0 <recv_tcp+0x108>)
 800887c:	61bb      	str	r3, [r7, #24]
    len = 0;
 800887e:	2300      	movs	r3, #0
 8008880:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 8008882:	697b      	ldr	r3, [r7, #20]
 8008884:	3310      	adds	r3, #16
 8008886:	69b9      	ldr	r1, [r7, #24]
 8008888:	4618      	mov	r0, r3
 800888a:	f00c fad1 	bl	8014e30 <sys_mbox_trypost>
 800888e:	4603      	mov	r3, r0
 8008890:	2b00      	cmp	r3, #0
 8008892:	d002      	beq.n	800889a <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 8008894:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008898:	e00a      	b.n	80088b0 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800889a:	697b      	ldr	r3, [r7, #20]
 800889c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d005      	beq.n	80088ae <recv_tcp+0xe6>
 80088a2:	697b      	ldr	r3, [r7, #20]
 80088a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088a6:	8bfa      	ldrh	r2, [r7, #30]
 80088a8:	2100      	movs	r1, #0
 80088aa:	6978      	ldr	r0, [r7, #20]
 80088ac:	4798      	blx	r3
  }

  return ERR_OK;
 80088ae:	2300      	movs	r3, #0
}
 80088b0:	4618      	mov	r0, r3
 80088b2:	3720      	adds	r7, #32
 80088b4:	46bd      	mov	sp, r7
 80088b6:	bd80      	pop	{r7, pc}
 80088b8:	08016754 	.word	0x08016754
 80088bc:	08016830 	.word	0x08016830
 80088c0:	08016798 	.word	0x08016798
 80088c4:	08016854 	.word	0x08016854
 80088c8:	08016874 	.word	0x08016874
 80088cc:	0801688c 	.word	0x0801688c
 80088d0:	08019b2e 	.word	0x08019b2e

080088d4 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b084      	sub	sp, #16
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
 80088dc:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d106      	bne.n	80088f6 <poll_tcp+0x22>
 80088e8:	4b29      	ldr	r3, [pc, #164]	; (8008990 <poll_tcp+0xbc>)
 80088ea:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 80088ee:	4929      	ldr	r1, [pc, #164]	; (8008994 <poll_tcp+0xc0>)
 80088f0:	4829      	ldr	r0, [pc, #164]	; (8008998 <poll_tcp+0xc4>)
 80088f2:	f00c fdc3 	bl	801547c <iprintf>

  if (conn->state == NETCONN_WRITE) {
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	785b      	ldrb	r3, [r3, #1]
 80088fa:	2b01      	cmp	r3, #1
 80088fc:	d104      	bne.n	8008908 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 80088fe:	2101      	movs	r1, #1
 8008900:	68f8      	ldr	r0, [r7, #12]
 8008902:	f000 ff61 	bl	80097c8 <lwip_netconn_do_writemore>
 8008906:	e016      	b.n	8008936 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	785b      	ldrb	r3, [r3, #1]
 800890c:	2b04      	cmp	r3, #4
 800890e:	d112      	bne.n	8008936 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	6a1b      	ldr	r3, [r3, #32]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d00a      	beq.n	800892e <poll_tcp+0x5a>
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	6a1b      	ldr	r3, [r3, #32]
 800891c:	7a5b      	ldrb	r3, [r3, #9]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d005      	beq.n	800892e <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	6a1b      	ldr	r3, [r3, #32]
 8008926:	7a5a      	ldrb	r2, [r3, #9]
 8008928:	3a01      	subs	r2, #1
 800892a:	b2d2      	uxtb	r2, r2
 800892c:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800892e:	2101      	movs	r1, #1
 8008930:	68f8      	ldr	r0, [r7, #12]
 8008932:	f000 fbf7 	bl	8009124 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	7f1b      	ldrb	r3, [r3, #28]
 800893a:	f003 0310 	and.w	r3, r3, #16
 800893e:	2b00      	cmp	r3, #0
 8008940:	d021      	beq.n	8008986 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	685b      	ldr	r3, [r3, #4]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d01d      	beq.n	8008986 <poll_tcp+0xb2>
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	685b      	ldr	r3, [r3, #4]
 800894e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8008952:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8008956:	d316      	bcc.n	8008986 <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	685b      	ldr	r3, [r3, #4]
 800895c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8008960:	2b04      	cmp	r3, #4
 8008962:	d810      	bhi.n	8008986 <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	7f1b      	ldrb	r3, [r3, #28]
 8008968:	f023 0310 	bic.w	r3, r3, #16
 800896c:	b2da      	uxtb	r2, r3
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008976:	2b00      	cmp	r3, #0
 8008978:	d005      	beq.n	8008986 <poll_tcp+0xb2>
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800897e:	2200      	movs	r2, #0
 8008980:	2102      	movs	r1, #2
 8008982:	68f8      	ldr	r0, [r7, #12]
 8008984:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8008986:	2300      	movs	r3, #0
}
 8008988:	4618      	mov	r0, r3
 800898a:	3710      	adds	r7, #16
 800898c:	46bd      	mov	sp, r7
 800898e:	bd80      	pop	{r7, pc}
 8008990:	08016754 	.word	0x08016754
 8008994:	080168ac 	.word	0x080168ac
 8008998:	08016798 	.word	0x08016798

0800899c <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800899c:	b580      	push	{r7, lr}
 800899e:	b086      	sub	sp, #24
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	60f8      	str	r0, [r7, #12]
 80089a4:	60b9      	str	r1, [r7, #8]
 80089a6:	4613      	mov	r3, r2
 80089a8:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80089ae:	697b      	ldr	r3, [r7, #20]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d106      	bne.n	80089c2 <sent_tcp+0x26>
 80089b4:	4b20      	ldr	r3, [pc, #128]	; (8008a38 <sent_tcp+0x9c>)
 80089b6:	f240 1293 	movw	r2, #403	; 0x193
 80089ba:	4920      	ldr	r1, [pc, #128]	; (8008a3c <sent_tcp+0xa0>)
 80089bc:	4820      	ldr	r0, [pc, #128]	; (8008a40 <sent_tcp+0xa4>)
 80089be:	f00c fd5d 	bl	801547c <iprintf>

  if (conn) {
 80089c2:	697b      	ldr	r3, [r7, #20]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d032      	beq.n	8008a2e <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 80089c8:	697b      	ldr	r3, [r7, #20]
 80089ca:	785b      	ldrb	r3, [r3, #1]
 80089cc:	2b01      	cmp	r3, #1
 80089ce:	d104      	bne.n	80089da <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 80089d0:	2101      	movs	r1, #1
 80089d2:	6978      	ldr	r0, [r7, #20]
 80089d4:	f000 fef8 	bl	80097c8 <lwip_netconn_do_writemore>
 80089d8:	e007      	b.n	80089ea <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 80089da:	697b      	ldr	r3, [r7, #20]
 80089dc:	785b      	ldrb	r3, [r3, #1]
 80089de:	2b04      	cmp	r3, #4
 80089e0:	d103      	bne.n	80089ea <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 80089e2:	2101      	movs	r1, #1
 80089e4:	6978      	ldr	r0, [r7, #20]
 80089e6:	f000 fb9d 	bl	8009124 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80089ea:	697b      	ldr	r3, [r7, #20]
 80089ec:	685b      	ldr	r3, [r3, #4]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d01d      	beq.n	8008a2e <sent_tcp+0x92>
 80089f2:	697b      	ldr	r3, [r7, #20]
 80089f4:	685b      	ldr	r3, [r3, #4]
 80089f6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80089fa:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 80089fe:	d316      	bcc.n	8008a2e <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8008a00:	697b      	ldr	r3, [r7, #20]
 8008a02:	685b      	ldr	r3, [r3, #4]
 8008a04:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8008a08:	2b04      	cmp	r3, #4
 8008a0a:	d810      	bhi.n	8008a2e <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8008a0c:	697b      	ldr	r3, [r7, #20]
 8008a0e:	7f1b      	ldrb	r3, [r3, #28]
 8008a10:	f023 0310 	bic.w	r3, r3, #16
 8008a14:	b2da      	uxtb	r2, r3
 8008a16:	697b      	ldr	r3, [r7, #20]
 8008a18:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 8008a1a:	697b      	ldr	r3, [r7, #20]
 8008a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d005      	beq.n	8008a2e <sent_tcp+0x92>
 8008a22:	697b      	ldr	r3, [r7, #20]
 8008a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a26:	88fa      	ldrh	r2, [r7, #6]
 8008a28:	2102      	movs	r1, #2
 8008a2a:	6978      	ldr	r0, [r7, #20]
 8008a2c:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8008a2e:	2300      	movs	r3, #0
}
 8008a30:	4618      	mov	r0, r3
 8008a32:	3718      	adds	r7, #24
 8008a34:	46bd      	mov	sp, r7
 8008a36:	bd80      	pop	{r7, pc}
 8008a38:	08016754 	.word	0x08016754
 8008a3c:	080168ac 	.word	0x080168ac
 8008a40:	08016798 	.word	0x08016798

08008a44 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b088      	sub	sp, #32
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
 8008a4c:	460b      	mov	r3, r1
 8008a4e:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8008a54:	69fb      	ldr	r3, [r7, #28]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d106      	bne.n	8008a68 <err_tcp+0x24>
 8008a5a:	4b5f      	ldr	r3, [pc, #380]	; (8008bd8 <err_tcp+0x194>)
 8008a5c:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8008a60:	495e      	ldr	r1, [pc, #376]	; (8008bdc <err_tcp+0x198>)
 8008a62:	485f      	ldr	r0, [pc, #380]	; (8008be0 <err_tcp+0x19c>)
 8008a64:	f00c fd0a 	bl	801547c <iprintf>

  SYS_ARCH_PROTECT(lev);
 8008a68:	f00c fb4e 	bl	8015108 <sys_arch_protect>
 8008a6c:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 8008a6e:	69fb      	ldr	r3, [r7, #28]
 8008a70:	2200      	movs	r2, #0
 8008a72:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 8008a74:	69fb      	ldr	r3, [r7, #28]
 8008a76:	78fa      	ldrb	r2, [r7, #3]
 8008a78:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 8008a7a:	69fb      	ldr	r3, [r7, #28]
 8008a7c:	7f1b      	ldrb	r3, [r3, #28]
 8008a7e:	f043 0301 	orr.w	r3, r3, #1
 8008a82:	b2da      	uxtb	r2, r3
 8008a84:	69fb      	ldr	r3, [r7, #28]
 8008a86:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 8008a88:	69fb      	ldr	r3, [r7, #28]
 8008a8a:	785b      	ldrb	r3, [r3, #1]
 8008a8c:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 8008a8e:	69fb      	ldr	r3, [r7, #28]
 8008a90:	2200      	movs	r2, #0
 8008a92:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 8008a94:	69b8      	ldr	r0, [r7, #24]
 8008a96:	f00c fb45 	bl	8015124 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8008a9a:	69fb      	ldr	r3, [r7, #28]
 8008a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d005      	beq.n	8008aae <err_tcp+0x6a>
 8008aa2:	69fb      	ldr	r3, [r7, #28]
 8008aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	2104      	movs	r1, #4
 8008aaa:	69f8      	ldr	r0, [r7, #28]
 8008aac:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8008aae:	69fb      	ldr	r3, [r7, #28]
 8008ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d005      	beq.n	8008ac2 <err_tcp+0x7e>
 8008ab6:	69fb      	ldr	r3, [r7, #28]
 8008ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aba:	2200      	movs	r2, #0
 8008abc:	2100      	movs	r1, #0
 8008abe:	69f8      	ldr	r0, [r7, #28]
 8008ac0:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8008ac2:	69fb      	ldr	r3, [r7, #28]
 8008ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d005      	beq.n	8008ad6 <err_tcp+0x92>
 8008aca:	69fb      	ldr	r3, [r7, #28]
 8008acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ace:	2200      	movs	r2, #0
 8008ad0:	2102      	movs	r1, #2
 8008ad2:	69f8      	ldr	r0, [r7, #28]
 8008ad4:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 8008ad6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008ada:	4618      	mov	r0, r3
 8008adc:	f7ff fd86 	bl	80085ec <lwip_netconn_err_to_msg>
 8008ae0:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8008ae2:	69fb      	ldr	r3, [r7, #28]
 8008ae4:	3310      	adds	r3, #16
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	f00c fa04 	bl	8014ef4 <sys_mbox_valid>
 8008aec:	4603      	mov	r3, r0
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d005      	beq.n	8008afe <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 8008af2:	69fb      	ldr	r3, [r7, #28]
 8008af4:	3310      	adds	r3, #16
 8008af6:	6939      	ldr	r1, [r7, #16]
 8008af8:	4618      	mov	r0, r3
 8008afa:	f00c f999 	bl	8014e30 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8008afe:	69fb      	ldr	r3, [r7, #28]
 8008b00:	3314      	adds	r3, #20
 8008b02:	4618      	mov	r0, r3
 8008b04:	f00c f9f6 	bl	8014ef4 <sys_mbox_valid>
 8008b08:	4603      	mov	r3, r0
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d005      	beq.n	8008b1a <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 8008b0e:	69fb      	ldr	r3, [r7, #28]
 8008b10:	3314      	adds	r3, #20
 8008b12:	6939      	ldr	r1, [r7, #16]
 8008b14:	4618      	mov	r0, r3
 8008b16:	f00c f98b 	bl	8014e30 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 8008b1a:	7dfb      	ldrb	r3, [r7, #23]
 8008b1c:	2b01      	cmp	r3, #1
 8008b1e:	d005      	beq.n	8008b2c <err_tcp+0xe8>
 8008b20:	7dfb      	ldrb	r3, [r7, #23]
 8008b22:	2b04      	cmp	r3, #4
 8008b24:	d002      	beq.n	8008b2c <err_tcp+0xe8>
 8008b26:	7dfb      	ldrb	r3, [r7, #23]
 8008b28:	2b03      	cmp	r3, #3
 8008b2a:	d143      	bne.n	8008bb4 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 8008b2c:	69fb      	ldr	r3, [r7, #28]
 8008b2e:	7f1b      	ldrb	r3, [r3, #28]
 8008b30:	f003 0304 	and.w	r3, r3, #4
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	bf14      	ite	ne
 8008b38:	2301      	movne	r3, #1
 8008b3a:	2300      	moveq	r3, #0
 8008b3c:	b2db      	uxtb	r3, r3
 8008b3e:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 8008b40:	69fb      	ldr	r3, [r7, #28]
 8008b42:	7f1b      	ldrb	r3, [r3, #28]
 8008b44:	f023 0304 	bic.w	r3, r3, #4
 8008b48:	b2da      	uxtb	r2, r3
 8008b4a:	69fb      	ldr	r3, [r7, #28]
 8008b4c:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d13b      	bne.n	8008bcc <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8008b54:	69fb      	ldr	r3, [r7, #28]
 8008b56:	6a1b      	ldr	r3, [r3, #32]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d106      	bne.n	8008b6a <err_tcp+0x126>
 8008b5c:	4b1e      	ldr	r3, [pc, #120]	; (8008bd8 <err_tcp+0x194>)
 8008b5e:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8008b62:	4920      	ldr	r1, [pc, #128]	; (8008be4 <err_tcp+0x1a0>)
 8008b64:	481e      	ldr	r0, [pc, #120]	; (8008be0 <err_tcp+0x19c>)
 8008b66:	f00c fc89 	bl	801547c <iprintf>
      if (old_state == NETCONN_CLOSE) {
 8008b6a:	7dfb      	ldrb	r3, [r7, #23]
 8008b6c:	2b04      	cmp	r3, #4
 8008b6e:	d104      	bne.n	8008b7a <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 8008b70:	69fb      	ldr	r3, [r7, #28]
 8008b72:	6a1b      	ldr	r3, [r3, #32]
 8008b74:	2200      	movs	r2, #0
 8008b76:	711a      	strb	r2, [r3, #4]
 8008b78:	e003      	b.n	8008b82 <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 8008b7a:	69fb      	ldr	r3, [r7, #28]
 8008b7c:	6a1b      	ldr	r3, [r3, #32]
 8008b7e:	78fa      	ldrb	r2, [r7, #3]
 8008b80:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8008b82:	69fb      	ldr	r3, [r7, #28]
 8008b84:	6a1b      	ldr	r3, [r3, #32]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	330c      	adds	r3, #12
 8008b8a:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 8008b8c:	68b8      	ldr	r0, [r7, #8]
 8008b8e:	f00c fa3f 	bl	8015010 <sys_sem_valid>
 8008b92:	4603      	mov	r3, r0
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d106      	bne.n	8008ba6 <err_tcp+0x162>
 8008b98:	4b0f      	ldr	r3, [pc, #60]	; (8008bd8 <err_tcp+0x194>)
 8008b9a:	f240 12ef 	movw	r2, #495	; 0x1ef
 8008b9e:	4912      	ldr	r1, [pc, #72]	; (8008be8 <err_tcp+0x1a4>)
 8008ba0:	480f      	ldr	r0, [pc, #60]	; (8008be0 <err_tcp+0x19c>)
 8008ba2:	f00c fc6b 	bl	801547c <iprintf>
      conn->current_msg = NULL;
 8008ba6:	69fb      	ldr	r3, [r7, #28]
 8008ba8:	2200      	movs	r2, #0
 8008baa:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 8008bac:	68b8      	ldr	r0, [r7, #8]
 8008bae:	f00c fa15 	bl	8014fdc <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 8008bb2:	e00b      	b.n	8008bcc <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8008bb4:	69fb      	ldr	r3, [r7, #28]
 8008bb6:	6a1b      	ldr	r3, [r3, #32]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d008      	beq.n	8008bce <err_tcp+0x18a>
 8008bbc:	4b06      	ldr	r3, [pc, #24]	; (8008bd8 <err_tcp+0x194>)
 8008bbe:	f240 12f7 	movw	r2, #503	; 0x1f7
 8008bc2:	490a      	ldr	r1, [pc, #40]	; (8008bec <err_tcp+0x1a8>)
 8008bc4:	4806      	ldr	r0, [pc, #24]	; (8008be0 <err_tcp+0x19c>)
 8008bc6:	f00c fc59 	bl	801547c <iprintf>
  }
}
 8008bca:	e000      	b.n	8008bce <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 8008bcc:	bf00      	nop
}
 8008bce:	bf00      	nop
 8008bd0:	3720      	adds	r7, #32
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	bd80      	pop	{r7, pc}
 8008bd6:	bf00      	nop
 8008bd8:	08016754 	.word	0x08016754
 8008bdc:	080168ac 	.word	0x080168ac
 8008be0:	08016798 	.word	0x08016798
 8008be4:	080168bc 	.word	0x080168bc
 8008be8:	080168d8 	.word	0x080168d8
 8008bec:	080168f4 	.word	0x080168f4

08008bf0 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b084      	sub	sp, #16
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	685b      	ldr	r3, [r3, #4]
 8008bfc:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 8008bfe:	6879      	ldr	r1, [r7, #4]
 8008c00:	68f8      	ldr	r0, [r7, #12]
 8008c02:	f004 fd11 	bl	800d628 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 8008c06:	490a      	ldr	r1, [pc, #40]	; (8008c30 <setup_tcp+0x40>)
 8008c08:	68f8      	ldr	r0, [r7, #12]
 8008c0a:	f004 fd1f 	bl	800d64c <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 8008c0e:	4909      	ldr	r1, [pc, #36]	; (8008c34 <setup_tcp+0x44>)
 8008c10:	68f8      	ldr	r0, [r7, #12]
 8008c12:	f004 fd3d 	bl	800d690 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 8008c16:	2202      	movs	r2, #2
 8008c18:	4907      	ldr	r1, [pc, #28]	; (8008c38 <setup_tcp+0x48>)
 8008c1a:	68f8      	ldr	r0, [r7, #12]
 8008c1c:	f004 fd94 	bl	800d748 <tcp_poll>
  tcp_err(pcb, err_tcp);
 8008c20:	4906      	ldr	r1, [pc, #24]	; (8008c3c <setup_tcp+0x4c>)
 8008c22:	68f8      	ldr	r0, [r7, #12]
 8008c24:	f004 fd56 	bl	800d6d4 <tcp_err>
}
 8008c28:	bf00      	nop
 8008c2a:	3710      	adds	r7, #16
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	bd80      	pop	{r7, pc}
 8008c30:	080087c9 	.word	0x080087c9
 8008c34:	0800899d 	.word	0x0800899d
 8008c38:	080088d5 	.word	0x080088d5
 8008c3c:	08008a45 	.word	0x08008a45

08008c40 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 8008c40:	b590      	push	{r4, r7, lr}
 8008c42:	b089      	sub	sp, #36	; 0x24
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	60f8      	str	r0, [r7, #12]
 8008c48:	60b9      	str	r1, [r7, #8]
 8008c4a:	4613      	mov	r3, r2
 8008c4c:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8008c52:	69fb      	ldr	r3, [r7, #28]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d102      	bne.n	8008c5e <accept_function+0x1e>
    return ERR_VAL;
 8008c58:	f06f 0305 	mvn.w	r3, #5
 8008c5c:	e0a1      	b.n	8008da2 <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8008c5e:	69fb      	ldr	r3, [r7, #28]
 8008c60:	3314      	adds	r3, #20
 8008c62:	4618      	mov	r0, r3
 8008c64:	f00c f946 	bl	8014ef4 <sys_mbox_valid>
 8008c68:	4603      	mov	r3, r0
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d102      	bne.n	8008c74 <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 8008c6e:	f06f 0305 	mvn.w	r3, #5
 8008c72:	e096      	b.n	8008da2 <accept_function+0x162>
  }

  if (newpcb == NULL) {
 8008c74:	68bb      	ldr	r3, [r7, #8]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d11b      	bne.n	8008cb2 <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8008c7a:	69fb      	ldr	r3, [r7, #28]
 8008c7c:	f103 0414 	add.w	r4, r3, #20
 8008c80:	f06f 000c 	mvn.w	r0, #12
 8008c84:	f7ff fcb2 	bl	80085ec <lwip_netconn_err_to_msg>
 8008c88:	4603      	mov	r3, r0
 8008c8a:	4619      	mov	r1, r3
 8008c8c:	4620      	mov	r0, r4
 8008c8e:	f00c f8cf 	bl	8014e30 <sys_mbox_trypost>
 8008c92:	4603      	mov	r3, r0
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d109      	bne.n	8008cac <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8008c98:	69fb      	ldr	r3, [r7, #28]
 8008c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d005      	beq.n	8008cac <accept_function+0x6c>
 8008ca0:	69fb      	ldr	r3, [r7, #28]
 8008ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	2100      	movs	r1, #0
 8008ca8:	69f8      	ldr	r0, [r7, #28]
 8008caa:	4798      	blx	r3
    }
    return ERR_VAL;
 8008cac:	f06f 0305 	mvn.w	r3, #5
 8008cb0:	e077      	b.n	8008da2 <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 8008cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d006      	beq.n	8008cc8 <accept_function+0x88>
 8008cba:	4b3c      	ldr	r3, [pc, #240]	; (8008dac <accept_function+0x16c>)
 8008cbc:	f240 222a 	movw	r2, #554	; 0x22a
 8008cc0:	493b      	ldr	r1, [pc, #236]	; (8008db0 <accept_function+0x170>)
 8008cc2:	483c      	ldr	r0, [pc, #240]	; (8008db4 <accept_function+0x174>)
 8008cc4:	f00c fbda 	bl	801547c <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 8008cc8:	69fb      	ldr	r3, [r7, #28]
 8008cca:	781a      	ldrb	r2, [r3, #0]
 8008ccc:	69fb      	ldr	r3, [r7, #28]
 8008cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cd0:	4619      	mov	r1, r3
 8008cd2:	4610      	mov	r0, r2
 8008cd4:	f000 f8f0 	bl	8008eb8 <netconn_alloc>
 8008cd8:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 8008cda:	69bb      	ldr	r3, [r7, #24]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d11b      	bne.n	8008d18 <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8008ce0:	69fb      	ldr	r3, [r7, #28]
 8008ce2:	f103 0414 	add.w	r4, r3, #20
 8008ce6:	f06f 000c 	mvn.w	r0, #12
 8008cea:	f7ff fc7f 	bl	80085ec <lwip_netconn_err_to_msg>
 8008cee:	4603      	mov	r3, r0
 8008cf0:	4619      	mov	r1, r3
 8008cf2:	4620      	mov	r0, r4
 8008cf4:	f00c f89c 	bl	8014e30 <sys_mbox_trypost>
 8008cf8:	4603      	mov	r3, r0
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d109      	bne.n	8008d12 <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8008cfe:	69fb      	ldr	r3, [r7, #28]
 8008d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d005      	beq.n	8008d12 <accept_function+0xd2>
 8008d06:	69fb      	ldr	r3, [r7, #28]
 8008d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	2100      	movs	r1, #0
 8008d0e:	69f8      	ldr	r0, [r7, #28]
 8008d10:	4798      	blx	r3
    }
    return ERR_MEM;
 8008d12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008d16:	e044      	b.n	8008da2 <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 8008d18:	69bb      	ldr	r3, [r7, #24]
 8008d1a:	68ba      	ldr	r2, [r7, #8]
 8008d1c:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 8008d1e:	69b8      	ldr	r0, [r7, #24]
 8008d20:	f7ff ff66 	bl	8008bf0 <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 8008d24:	69fb      	ldr	r3, [r7, #28]
 8008d26:	3314      	adds	r3, #20
 8008d28:	69b9      	ldr	r1, [r7, #24]
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	f00c f880 	bl	8014e30 <sys_mbox_trypost>
 8008d30:	4603      	mov	r3, r0
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d02a      	beq.n	8008d8c <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 8008d36:	69bb      	ldr	r3, [r7, #24]
 8008d38:	685b      	ldr	r3, [r3, #4]
 8008d3a:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 8008d3c:	2100      	movs	r1, #0
 8008d3e:	6978      	ldr	r0, [r7, #20]
 8008d40:	f004 fc72 	bl	800d628 <tcp_arg>
    tcp_recv(pcb, NULL);
 8008d44:	2100      	movs	r1, #0
 8008d46:	6978      	ldr	r0, [r7, #20]
 8008d48:	f004 fc80 	bl	800d64c <tcp_recv>
    tcp_sent(pcb, NULL);
 8008d4c:	2100      	movs	r1, #0
 8008d4e:	6978      	ldr	r0, [r7, #20]
 8008d50:	f004 fc9e 	bl	800d690 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 8008d54:	2200      	movs	r2, #0
 8008d56:	2100      	movs	r1, #0
 8008d58:	6978      	ldr	r0, [r7, #20]
 8008d5a:	f004 fcf5 	bl	800d748 <tcp_poll>
    tcp_err(pcb, NULL);
 8008d5e:	2100      	movs	r1, #0
 8008d60:	6978      	ldr	r0, [r7, #20]
 8008d62:	f004 fcb7 	bl	800d6d4 <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 8008d66:	69bb      	ldr	r3, [r7, #24]
 8008d68:	2200      	movs	r2, #0
 8008d6a:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 8008d6c:	69bb      	ldr	r3, [r7, #24]
 8008d6e:	3310      	adds	r3, #16
 8008d70:	4618      	mov	r0, r3
 8008d72:	f00c f84b 	bl	8014e0c <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 8008d76:	69bb      	ldr	r3, [r7, #24]
 8008d78:	3310      	adds	r3, #16
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	f00c f8cb 	bl	8014f16 <sys_mbox_set_invalid>
    netconn_free(newconn);
 8008d80:	69b8      	ldr	r0, [r7, #24]
 8008d82:	f000 f907 	bl	8008f94 <netconn_free>
    return ERR_MEM;
 8008d86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008d8a:	e00a      	b.n	8008da2 <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8008d8c:	69fb      	ldr	r3, [r7, #28]
 8008d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d005      	beq.n	8008da0 <accept_function+0x160>
 8008d94:	69fb      	ldr	r3, [r7, #28]
 8008d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d98:	2200      	movs	r2, #0
 8008d9a:	2100      	movs	r1, #0
 8008d9c:	69f8      	ldr	r0, [r7, #28]
 8008d9e:	4798      	blx	r3
  }

  return ERR_OK;
 8008da0:	2300      	movs	r3, #0
}
 8008da2:	4618      	mov	r0, r3
 8008da4:	3724      	adds	r7, #36	; 0x24
 8008da6:	46bd      	mov	sp, r7
 8008da8:	bd90      	pop	{r4, r7, pc}
 8008daa:	bf00      	nop
 8008dac:	08016754 	.word	0x08016754
 8008db0:	08016910 	.word	0x08016910
 8008db4:	08016798 	.word	0x08016798

08008db8 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 8008db8:	b590      	push	{r4, r7, lr}
 8008dba:	b085      	sub	sp, #20
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	685b      	ldr	r3, [r3, #4]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d006      	beq.n	8008ddc <pcb_new+0x24>
 8008dce:	4b2b      	ldr	r3, [pc, #172]	; (8008e7c <pcb_new+0xc4>)
 8008dd0:	f240 2265 	movw	r2, #613	; 0x265
 8008dd4:	492a      	ldr	r1, [pc, #168]	; (8008e80 <pcb_new+0xc8>)
 8008dd6:	482b      	ldr	r0, [pc, #172]	; (8008e84 <pcb_new+0xcc>)
 8008dd8:	f00c fb50 	bl	801547c <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	781b      	ldrb	r3, [r3, #0]
 8008de2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008de6:	2b10      	cmp	r3, #16
 8008de8:	d022      	beq.n	8008e30 <pcb_new+0x78>
 8008dea:	2b20      	cmp	r3, #32
 8008dec:	d133      	bne.n	8008e56 <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681c      	ldr	r4, [r3, #0]
 8008df2:	7bfb      	ldrb	r3, [r7, #15]
 8008df4:	4618      	mov	r0, r3
 8008df6:	f009 fcf2 	bl	80127de <udp_new_ip_type>
 8008dfa:	4603      	mov	r3, r0
 8008dfc:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	685b      	ldr	r3, [r3, #4]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d02a      	beq.n	8008e5e <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	781b      	ldrb	r3, [r3, #0]
 8008e0e:	2b22      	cmp	r3, #34	; 0x22
 8008e10:	d104      	bne.n	8008e1c <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	685b      	ldr	r3, [r3, #4]
 8008e18:	2201      	movs	r2, #1
 8008e1a:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	6858      	ldr	r0, [r3, #4]
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	461a      	mov	r2, r3
 8008e28:	4917      	ldr	r1, [pc, #92]	; (8008e88 <pcb_new+0xd0>)
 8008e2a:	f009 fc5f 	bl	80126ec <udp_recv>
      }
      break;
 8008e2e:	e016      	b.n	8008e5e <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681c      	ldr	r4, [r3, #0]
 8008e34:	7bfb      	ldrb	r3, [r7, #15]
 8008e36:	4618      	mov	r0, r3
 8008e38:	f004 fbe8 	bl	800d60c <tcp_new_ip_type>
 8008e3c:	4603      	mov	r3, r0
 8008e3e:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	685b      	ldr	r3, [r3, #4]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d00b      	beq.n	8008e62 <pcb_new+0xaa>
        setup_tcp(msg->conn);
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	4618      	mov	r0, r3
 8008e50:	f7ff fece 	bl	8008bf0 <setup_tcp>
      }
      break;
 8008e54:	e005      	b.n	8008e62 <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	22fa      	movs	r2, #250	; 0xfa
 8008e5a:	711a      	strb	r2, [r3, #4]
      return;
 8008e5c:	e00a      	b.n	8008e74 <pcb_new+0xbc>
      break;
 8008e5e:	bf00      	nop
 8008e60:	e000      	b.n	8008e64 <pcb_new+0xac>
      break;
 8008e62:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	685b      	ldr	r3, [r3, #4]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d102      	bne.n	8008e74 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	22ff      	movs	r2, #255	; 0xff
 8008e72:	711a      	strb	r2, [r3, #4]
  }
}
 8008e74:	3714      	adds	r7, #20
 8008e76:	46bd      	mov	sp, r7
 8008e78:	bd90      	pop	{r4, r7, pc}
 8008e7a:	bf00      	nop
 8008e7c:	08016754 	.word	0x08016754
 8008e80:	08016938 	.word	0x08016938
 8008e84:	08016798 	.word	0x08016798
 8008e88:	080086cd 	.word	0x080086cd

08008e8c <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b084      	sub	sp, #16
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	685b      	ldr	r3, [r3, #4]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d102      	bne.n	8008eae <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 8008ea8:	68f8      	ldr	r0, [r7, #12]
 8008eaa:	f7ff ff85 	bl	8008db8 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 8008eae:	bf00      	nop
 8008eb0:	3710      	adds	r7, #16
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	bd80      	pop	{r7, pc}
	...

08008eb8 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b086      	sub	sp, #24
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	4603      	mov	r3, r0
 8008ec0:	6039      	str	r1, [r7, #0]
 8008ec2:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8008ec8:	2007      	movs	r0, #7
 8008eca:	f001 fe39 	bl	800ab40 <memp_malloc>
 8008ece:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d101      	bne.n	8008eda <netconn_alloc+0x22>
    return NULL;
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	e052      	b.n	8008f80 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	2200      	movs	r2, #0
 8008ede:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	79fa      	ldrb	r2, [r7, #7]
 8008ee4:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	2200      	movs	r2, #0
 8008eea:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 8008eec:	79fb      	ldrb	r3, [r7, #7]
 8008eee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008ef2:	2b10      	cmp	r3, #16
 8008ef4:	d004      	beq.n	8008f00 <netconn_alloc+0x48>
 8008ef6:	2b20      	cmp	r3, #32
 8008ef8:	d105      	bne.n	8008f06 <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 8008efa:	2306      	movs	r3, #6
 8008efc:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 8008efe:	e00a      	b.n	8008f16 <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 8008f00:	2306      	movs	r3, #6
 8008f02:	617b      	str	r3, [r7, #20]
      break;
 8008f04:	e007      	b.n	8008f16 <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 8008f06:	4b20      	ldr	r3, [pc, #128]	; (8008f88 <netconn_alloc+0xd0>)
 8008f08:	f240 22e5 	movw	r2, #741	; 0x2e5
 8008f0c:	491f      	ldr	r1, [pc, #124]	; (8008f8c <netconn_alloc+0xd4>)
 8008f0e:	4820      	ldr	r0, [pc, #128]	; (8008f90 <netconn_alloc+0xd8>)
 8008f10:	f00c fab4 	bl	801547c <iprintf>
      goto free_and_return;
 8008f14:	e02f      	b.n	8008f76 <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	3310      	adds	r3, #16
 8008f1a:	6979      	ldr	r1, [r7, #20]
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	f00b ff5b 	bl	8014dd8 <sys_mbox_new>
 8008f22:	4603      	mov	r3, r0
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d125      	bne.n	8008f74 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	330c      	adds	r3, #12
 8008f2c:	2100      	movs	r1, #0
 8008f2e:	4618      	mov	r0, r3
 8008f30:	f00b fffe 	bl	8014f30 <sys_sem_new>
 8008f34:	4603      	mov	r3, r0
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d005      	beq.n	8008f46 <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	3310      	adds	r3, #16
 8008f3e:	4618      	mov	r0, r3
 8008f40:	f00b ff64 	bl	8014e0c <sys_mbox_free>
    goto free_and_return;
 8008f44:	e017      	b.n	8008f76 <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	3314      	adds	r3, #20
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	f00b ffe3 	bl	8014f16 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	2200      	movs	r2, #0
 8008f54:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008f5c:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	683a      	ldr	r2, [r7, #0]
 8008f62:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	2200      	movs	r2, #0
 8008f68:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	7cfa      	ldrb	r2, [r7, #19]
 8008f6e:	771a      	strb	r2, [r3, #28]
  return conn;
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	e005      	b.n	8008f80 <netconn_alloc+0xc8>
    goto free_and_return;
 8008f74:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 8008f76:	68f9      	ldr	r1, [r7, #12]
 8008f78:	2007      	movs	r0, #7
 8008f7a:	f001 fe33 	bl	800abe4 <memp_free>
  return NULL;
 8008f7e:	2300      	movs	r3, #0
}
 8008f80:	4618      	mov	r0, r3
 8008f82:	3718      	adds	r7, #24
 8008f84:	46bd      	mov	sp, r7
 8008f86:	bd80      	pop	{r7, pc}
 8008f88:	08016754 	.word	0x08016754
 8008f8c:	08016958 	.word	0x08016958
 8008f90:	08016798 	.word	0x08016798

08008f94 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b082      	sub	sp, #8
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	685b      	ldr	r3, [r3, #4]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d006      	beq.n	8008fb2 <netconn_free+0x1e>
 8008fa4:	4b1b      	ldr	r3, [pc, #108]	; (8009014 <netconn_free+0x80>)
 8008fa6:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8008faa:	491b      	ldr	r1, [pc, #108]	; (8009018 <netconn_free+0x84>)
 8008fac:	481b      	ldr	r0, [pc, #108]	; (800901c <netconn_free+0x88>)
 8008fae:	f00c fa65 	bl	801547c <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	3310      	adds	r3, #16
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	f00b ff9c 	bl	8014ef4 <sys_mbox_valid>
 8008fbc:	4603      	mov	r3, r0
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d006      	beq.n	8008fd0 <netconn_free+0x3c>
 8008fc2:	4b14      	ldr	r3, [pc, #80]	; (8009014 <netconn_free+0x80>)
 8008fc4:	f240 3223 	movw	r2, #803	; 0x323
 8008fc8:	4915      	ldr	r1, [pc, #84]	; (8009020 <netconn_free+0x8c>)
 8008fca:	4814      	ldr	r0, [pc, #80]	; (800901c <netconn_free+0x88>)
 8008fcc:	f00c fa56 	bl	801547c <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	3314      	adds	r3, #20
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	f00b ff8d 	bl	8014ef4 <sys_mbox_valid>
 8008fda:	4603      	mov	r3, r0
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d006      	beq.n	8008fee <netconn_free+0x5a>
 8008fe0:	4b0c      	ldr	r3, [pc, #48]	; (8009014 <netconn_free+0x80>)
 8008fe2:	f240 3226 	movw	r2, #806	; 0x326
 8008fe6:	490f      	ldr	r1, [pc, #60]	; (8009024 <netconn_free+0x90>)
 8008fe8:	480c      	ldr	r0, [pc, #48]	; (800901c <netconn_free+0x88>)
 8008fea:	f00c fa47 	bl	801547c <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	330c      	adds	r3, #12
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	f00b ffff 	bl	8014ff6 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	330c      	adds	r3, #12
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	f00c f818 	bl	8015032 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 8009002:	6879      	ldr	r1, [r7, #4]
 8009004:	2007      	movs	r0, #7
 8009006:	f001 fded 	bl	800abe4 <memp_free>
}
 800900a:	bf00      	nop
 800900c:	3708      	adds	r7, #8
 800900e:	46bd      	mov	sp, r7
 8009010:	bd80      	pop	{r7, pc}
 8009012:	bf00      	nop
 8009014:	08016754 	.word	0x08016754
 8009018:	08016980 	.word	0x08016980
 800901c:	08016798 	.word	0x08016798
 8009020:	080169b0 	.word	0x080169b0
 8009024:	080169ec 	.word	0x080169ec

08009028 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b086      	sub	sp, #24
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	3310      	adds	r3, #16
 8009034:	4618      	mov	r0, r3
 8009036:	f00b ff5d 	bl	8014ef4 <sys_mbox_valid>
 800903a:	4603      	mov	r3, r0
 800903c:	2b00      	cmp	r3, #0
 800903e:	d02f      	beq.n	80090a0 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8009040:	e018      	b.n	8009074 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	781b      	ldrb	r3, [r3, #0]
 8009046:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800904a:	2b10      	cmp	r3, #16
 800904c:	d10e      	bne.n	800906c <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800904e:	693b      	ldr	r3, [r7, #16]
 8009050:	f107 020f 	add.w	r2, r7, #15
 8009054:	4611      	mov	r1, r2
 8009056:	4618      	mov	r0, r3
 8009058:	f7ff fafe 	bl	8008658 <lwip_netconn_is_err_msg>
 800905c:	4603      	mov	r3, r0
 800905e:	2b00      	cmp	r3, #0
 8009060:	d108      	bne.n	8009074 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 8009062:	693b      	ldr	r3, [r7, #16]
 8009064:	4618      	mov	r0, r3
 8009066:	f002 fc61 	bl	800b92c <pbuf_free>
 800906a:	e003      	b.n	8009074 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 800906c:	693b      	ldr	r3, [r7, #16]
 800906e:	4618      	mov	r0, r3
 8009070:	f000 fe8e 	bl	8009d90 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	3310      	adds	r3, #16
 8009078:	f107 0210 	add.w	r2, r7, #16
 800907c:	4611      	mov	r1, r2
 800907e:	4618      	mov	r0, r3
 8009080:	f00b ff21 	bl	8014ec6 <sys_arch_mbox_tryfetch>
 8009084:	4603      	mov	r3, r0
 8009086:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800908a:	d1da      	bne.n	8009042 <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	3310      	adds	r3, #16
 8009090:	4618      	mov	r0, r3
 8009092:	f00b febb 	bl	8014e0c <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	3310      	adds	r3, #16
 800909a:	4618      	mov	r0, r3
 800909c:	f00b ff3b 	bl	8014f16 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	3314      	adds	r3, #20
 80090a4:	4618      	mov	r0, r3
 80090a6:	f00b ff25 	bl	8014ef4 <sys_mbox_valid>
 80090aa:	4603      	mov	r3, r0
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d034      	beq.n	800911a <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 80090b0:	e01d      	b.n	80090ee <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 80090b2:	693b      	ldr	r3, [r7, #16]
 80090b4:	f107 020e 	add.w	r2, r7, #14
 80090b8:	4611      	mov	r1, r2
 80090ba:	4618      	mov	r0, r3
 80090bc:	f7ff facc 	bl	8008658 <lwip_netconn_is_err_msg>
 80090c0:	4603      	mov	r3, r0
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d113      	bne.n	80090ee <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 80090c6:	693b      	ldr	r3, [r7, #16]
 80090c8:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 80090ca:	6978      	ldr	r0, [r7, #20]
 80090cc:	f7ff ffac 	bl	8009028 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 80090d0:	697b      	ldr	r3, [r7, #20]
 80090d2:	685b      	ldr	r3, [r3, #4]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d007      	beq.n	80090e8 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 80090d8:	697b      	ldr	r3, [r7, #20]
 80090da:	685b      	ldr	r3, [r3, #4]
 80090dc:	4618      	mov	r0, r3
 80090de:	f003 fa15 	bl	800c50c <tcp_abort>
            newconn->pcb.tcp = NULL;
 80090e2:	697b      	ldr	r3, [r7, #20]
 80090e4:	2200      	movs	r2, #0
 80090e6:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 80090e8:	6978      	ldr	r0, [r7, #20]
 80090ea:	f7ff ff53 	bl	8008f94 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	3314      	adds	r3, #20
 80090f2:	f107 0210 	add.w	r2, r7, #16
 80090f6:	4611      	mov	r1, r2
 80090f8:	4618      	mov	r0, r3
 80090fa:	f00b fee4 	bl	8014ec6 <sys_arch_mbox_tryfetch>
 80090fe:	4603      	mov	r3, r0
 8009100:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009104:	d1d5      	bne.n	80090b2 <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	3314      	adds	r3, #20
 800910a:	4618      	mov	r0, r3
 800910c:	f00b fe7e 	bl	8014e0c <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	3314      	adds	r3, #20
 8009114:	4618      	mov	r0, r3
 8009116:	f00b fefe 	bl	8014f16 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800911a:	bf00      	nop
 800911c:	3718      	adds	r7, #24
 800911e:	46bd      	mov	sp, r7
 8009120:	bd80      	pop	{r7, pc}
	...

08009124 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8009124:	b580      	push	{r7, lr}
 8009126:	b086      	sub	sp, #24
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
 800912c:	460b      	mov	r3, r1
 800912e:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 8009130:	2300      	movs	r3, #0
 8009132:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d106      	bne.n	8009148 <lwip_netconn_do_close_internal+0x24>
 800913a:	4ba1      	ldr	r3, [pc, #644]	; (80093c0 <lwip_netconn_do_close_internal+0x29c>)
 800913c:	f240 32a2 	movw	r2, #930	; 0x3a2
 8009140:	49a0      	ldr	r1, [pc, #640]	; (80093c4 <lwip_netconn_do_close_internal+0x2a0>)
 8009142:	48a1      	ldr	r0, [pc, #644]	; (80093c8 <lwip_netconn_do_close_internal+0x2a4>)
 8009144:	f00c f99a 	bl	801547c <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	781b      	ldrb	r3, [r3, #0]
 800914c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009150:	2b10      	cmp	r3, #16
 8009152:	d006      	beq.n	8009162 <lwip_netconn_do_close_internal+0x3e>
 8009154:	4b9a      	ldr	r3, [pc, #616]	; (80093c0 <lwip_netconn_do_close_internal+0x29c>)
 8009156:	f240 32a3 	movw	r2, #931	; 0x3a3
 800915a:	499c      	ldr	r1, [pc, #624]	; (80093cc <lwip_netconn_do_close_internal+0x2a8>)
 800915c:	489a      	ldr	r0, [pc, #616]	; (80093c8 <lwip_netconn_do_close_internal+0x2a4>)
 800915e:	f00c f98d 	bl	801547c <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	785b      	ldrb	r3, [r3, #1]
 8009166:	2b04      	cmp	r3, #4
 8009168:	d006      	beq.n	8009178 <lwip_netconn_do_close_internal+0x54>
 800916a:	4b95      	ldr	r3, [pc, #596]	; (80093c0 <lwip_netconn_do_close_internal+0x29c>)
 800916c:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 8009170:	4997      	ldr	r1, [pc, #604]	; (80093d0 <lwip_netconn_do_close_internal+0x2ac>)
 8009172:	4895      	ldr	r0, [pc, #596]	; (80093c8 <lwip_netconn_do_close_internal+0x2a4>)
 8009174:	f00c f982 	bl	801547c <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	685b      	ldr	r3, [r3, #4]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d106      	bne.n	800918e <lwip_netconn_do_close_internal+0x6a>
 8009180:	4b8f      	ldr	r3, [pc, #572]	; (80093c0 <lwip_netconn_do_close_internal+0x29c>)
 8009182:	f240 32a5 	movw	r2, #933	; 0x3a5
 8009186:	4993      	ldr	r1, [pc, #588]	; (80093d4 <lwip_netconn_do_close_internal+0x2b0>)
 8009188:	488f      	ldr	r0, [pc, #572]	; (80093c8 <lwip_netconn_do_close_internal+0x2a4>)
 800918a:	f00c f977 	bl	801547c <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	6a1b      	ldr	r3, [r3, #32]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d106      	bne.n	80091a4 <lwip_netconn_do_close_internal+0x80>
 8009196:	4b8a      	ldr	r3, [pc, #552]	; (80093c0 <lwip_netconn_do_close_internal+0x29c>)
 8009198:	f240 32a6 	movw	r2, #934	; 0x3a6
 800919c:	498e      	ldr	r1, [pc, #568]	; (80093d8 <lwip_netconn_do_close_internal+0x2b4>)
 800919e:	488a      	ldr	r0, [pc, #552]	; (80093c8 <lwip_netconn_do_close_internal+0x2a4>)
 80091a0:	f00c f96c 	bl	801547c <iprintf>

  tpcb = conn->pcb.tcp;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	685b      	ldr	r3, [r3, #4]
 80091a8:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	6a1b      	ldr	r3, [r3, #32]
 80091ae:	7a1b      	ldrb	r3, [r3, #8]
 80091b0:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 80091b2:	7bfb      	ldrb	r3, [r7, #15]
 80091b4:	f003 0301 	and.w	r3, r3, #1
 80091b8:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 80091ba:	7bfb      	ldrb	r3, [r7, #15]
 80091bc:	f003 0302 	and.w	r3, r3, #2
 80091c0:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 80091c2:	7bfb      	ldrb	r3, [r7, #15]
 80091c4:	2b03      	cmp	r3, #3
 80091c6:	d102      	bne.n	80091ce <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 80091c8:	2301      	movs	r3, #1
 80091ca:	75bb      	strb	r3, [r7, #22]
 80091cc:	e01f      	b.n	800920e <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 80091ce:	7bbb      	ldrb	r3, [r7, #14]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d00e      	beq.n	80091f2 <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 80091d4:	693b      	ldr	r3, [r7, #16]
 80091d6:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 80091d8:	2b05      	cmp	r3, #5
 80091da:	d007      	beq.n	80091ec <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 80091dc:	693b      	ldr	r3, [r7, #16]
 80091de:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 80091e0:	2b06      	cmp	r3, #6
 80091e2:	d003      	beq.n	80091ec <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 80091e4:	693b      	ldr	r3, [r7, #16]
 80091e6:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 80091e8:	2b08      	cmp	r3, #8
 80091ea:	d102      	bne.n	80091f2 <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 80091ec:	2301      	movs	r3, #1
 80091ee:	75bb      	strb	r3, [r7, #22]
 80091f0:	e00d      	b.n	800920e <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 80091f2:	7b7b      	ldrb	r3, [r7, #13]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d008      	beq.n	800920a <lwip_netconn_do_close_internal+0xe6>
 80091f8:	693b      	ldr	r3, [r7, #16]
 80091fa:	8b5b      	ldrh	r3, [r3, #26]
 80091fc:	f003 0310 	and.w	r3, r3, #16
 8009200:	2b00      	cmp	r3, #0
 8009202:	d002      	beq.n	800920a <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 8009204:	2301      	movs	r3, #1
 8009206:	75bb      	strb	r3, [r7, #22]
 8009208:	e001      	b.n	800920e <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800920a:	2300      	movs	r3, #0
 800920c:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800920e:	7dbb      	ldrb	r3, [r7, #22]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d003      	beq.n	800921c <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 8009214:	2100      	movs	r1, #0
 8009216:	6938      	ldr	r0, [r7, #16]
 8009218:	f004 fa06 	bl	800d628 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800921c:	693b      	ldr	r3, [r7, #16]
 800921e:	7d1b      	ldrb	r3, [r3, #20]
 8009220:	2b01      	cmp	r3, #1
 8009222:	d104      	bne.n	800922e <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 8009224:	2100      	movs	r1, #0
 8009226:	6938      	ldr	r0, [r7, #16]
 8009228:	f004 fa76 	bl	800d718 <tcp_accept>
 800922c:	e01d      	b.n	800926a <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800922e:	7bbb      	ldrb	r3, [r7, #14]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d007      	beq.n	8009244 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 8009234:	2100      	movs	r1, #0
 8009236:	6938      	ldr	r0, [r7, #16]
 8009238:	f004 fa08 	bl	800d64c <tcp_recv>
      tcp_accept(tpcb, NULL);
 800923c:	2100      	movs	r1, #0
 800923e:	6938      	ldr	r0, [r7, #16]
 8009240:	f004 fa6a 	bl	800d718 <tcp_accept>
    }
    if (shut_tx) {
 8009244:	7b7b      	ldrb	r3, [r7, #13]
 8009246:	2b00      	cmp	r3, #0
 8009248:	d003      	beq.n	8009252 <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800924a:	2100      	movs	r1, #0
 800924c:	6938      	ldr	r0, [r7, #16]
 800924e:	f004 fa1f 	bl	800d690 <tcp_sent>
    }
    if (shut_close) {
 8009252:	7dbb      	ldrb	r3, [r7, #22]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d008      	beq.n	800926a <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 8009258:	2200      	movs	r2, #0
 800925a:	2100      	movs	r1, #0
 800925c:	6938      	ldr	r0, [r7, #16]
 800925e:	f004 fa73 	bl	800d748 <tcp_poll>
      tcp_err(tpcb, NULL);
 8009262:	2100      	movs	r1, #0
 8009264:	6938      	ldr	r0, [r7, #16]
 8009266:	f004 fa35 	bl	800d6d4 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800926a:	7dbb      	ldrb	r3, [r7, #22]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d005      	beq.n	800927c <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 8009270:	6938      	ldr	r0, [r7, #16]
 8009272:	f003 f805 	bl	800c280 <tcp_close>
 8009276:	4603      	mov	r3, r0
 8009278:	75fb      	strb	r3, [r7, #23]
 800927a:	e007      	b.n	800928c <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800927c:	7bbb      	ldrb	r3, [r7, #14]
 800927e:	7b7a      	ldrb	r2, [r7, #13]
 8009280:	4619      	mov	r1, r3
 8009282:	6938      	ldr	r0, [r7, #16]
 8009284:	f003 f828 	bl	800c2d8 <tcp_shutdown>
 8009288:	4603      	mov	r3, r0
 800928a:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800928c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d102      	bne.n	800929a <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 8009294:	2301      	movs	r3, #1
 8009296:	757b      	strb	r3, [r7, #21]
 8009298:	e016      	b.n	80092c8 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800929a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800929e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80092a2:	d10f      	bne.n	80092c4 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	6a1b      	ldr	r3, [r3, #32]
 80092a8:	7a5b      	ldrb	r3, [r3, #9]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d10c      	bne.n	80092c8 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 80092ae:	2301      	movs	r3, #1
 80092b0:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 80092b2:	7dbb      	ldrb	r3, [r7, #22]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d007      	beq.n	80092c8 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 80092b8:	6938      	ldr	r0, [r7, #16]
 80092ba:	f003 f927 	bl	800c50c <tcp_abort>
          err = ERR_OK;
 80092be:	2300      	movs	r3, #0
 80092c0:	75fb      	strb	r3, [r7, #23]
 80092c2:	e001      	b.n	80092c8 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 80092c4:	2301      	movs	r3, #1
 80092c6:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 80092c8:	7d7b      	ldrb	r3, [r7, #21]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d044      	beq.n	8009358 <lwip_netconn_do_close_internal+0x234>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	6a1b      	ldr	r3, [r3, #32]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	330c      	adds	r3, #12
 80092d6:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	6a1b      	ldr	r3, [r3, #32]
 80092dc:	7dfa      	ldrb	r2, [r7, #23]
 80092de:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2200      	movs	r2, #0
 80092e4:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	2200      	movs	r2, #0
 80092ea:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 80092ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d129      	bne.n	8009348 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 80092f4:	7dbb      	ldrb	r3, [r7, #22]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d00c      	beq.n	8009314 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	2200      	movs	r2, #0
 80092fe:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009304:	2b00      	cmp	r3, #0
 8009306:	d005      	beq.n	8009314 <lwip_netconn_do_close_internal+0x1f0>
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800930c:	2200      	movs	r2, #0
 800930e:	2104      	movs	r1, #4
 8009310:	6878      	ldr	r0, [r7, #4]
 8009312:	4798      	blx	r3
      }
      if (shut_rx) {
 8009314:	7bbb      	ldrb	r3, [r7, #14]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d009      	beq.n	800932e <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800931e:	2b00      	cmp	r3, #0
 8009320:	d005      	beq.n	800932e <lwip_netconn_do_close_internal+0x20a>
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009326:	2200      	movs	r2, #0
 8009328:	2100      	movs	r1, #0
 800932a:	6878      	ldr	r0, [r7, #4]
 800932c:	4798      	blx	r3
      }
      if (shut_tx) {
 800932e:	7b7b      	ldrb	r3, [r7, #13]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d009      	beq.n	8009348 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009338:	2b00      	cmp	r3, #0
 800933a:	d005      	beq.n	8009348 <lwip_netconn_do_close_internal+0x224>
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009340:	2200      	movs	r2, #0
 8009342:	2102      	movs	r1, #2
 8009344:	6878      	ldr	r0, [r7, #4]
 8009346:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8009348:	78fb      	ldrb	r3, [r7, #3]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d002      	beq.n	8009354 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800934e:	68b8      	ldr	r0, [r7, #8]
 8009350:	f00b fe44 	bl	8014fdc <sys_sem_signal>
    }
    return ERR_OK;
 8009354:	2300      	movs	r3, #0
 8009356:	e02e      	b.n	80093b6 <lwip_netconn_do_close_internal+0x292>
  }
  if (!close_finished) {
 8009358:	7d7b      	ldrb	r3, [r7, #21]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d11e      	bne.n	800939c <lwip_netconn_do_close_internal+0x278>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800935e:	693b      	ldr	r3, [r7, #16]
 8009360:	7d1b      	ldrb	r3, [r3, #20]
 8009362:	2b01      	cmp	r3, #1
 8009364:	d106      	bne.n	8009374 <lwip_netconn_do_close_internal+0x250>
 8009366:	4b16      	ldr	r3, [pc, #88]	; (80093c0 <lwip_netconn_do_close_internal+0x29c>)
 8009368:	f240 4241 	movw	r2, #1089	; 0x441
 800936c:	491b      	ldr	r1, [pc, #108]	; (80093dc <lwip_netconn_do_close_internal+0x2b8>)
 800936e:	4816      	ldr	r0, [pc, #88]	; (80093c8 <lwip_netconn_do_close_internal+0x2a4>)
 8009370:	f00c f884 	bl	801547c <iprintf>
    if (shut_tx) {
 8009374:	7b7b      	ldrb	r3, [r7, #13]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d003      	beq.n	8009382 <lwip_netconn_do_close_internal+0x25e>
      tcp_sent(tpcb, sent_tcp);
 800937a:	4919      	ldr	r1, [pc, #100]	; (80093e0 <lwip_netconn_do_close_internal+0x2bc>)
 800937c:	6938      	ldr	r0, [r7, #16]
 800937e:	f004 f987 	bl	800d690 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 8009382:	2201      	movs	r2, #1
 8009384:	4917      	ldr	r1, [pc, #92]	; (80093e4 <lwip_netconn_do_close_internal+0x2c0>)
 8009386:	6938      	ldr	r0, [r7, #16]
 8009388:	f004 f9de 	bl	800d748 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800938c:	4916      	ldr	r1, [pc, #88]	; (80093e8 <lwip_netconn_do_close_internal+0x2c4>)
 800938e:	6938      	ldr	r0, [r7, #16]
 8009390:	f004 f9a0 	bl	800d6d4 <tcp_err>
    tcp_arg(tpcb, conn);
 8009394:	6879      	ldr	r1, [r7, #4]
 8009396:	6938      	ldr	r0, [r7, #16]
 8009398:	f004 f946 	bl	800d628 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800939c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d106      	bne.n	80093b2 <lwip_netconn_do_close_internal+0x28e>
 80093a4:	4b06      	ldr	r3, [pc, #24]	; (80093c0 <lwip_netconn_do_close_internal+0x29c>)
 80093a6:	f240 424d 	movw	r2, #1101	; 0x44d
 80093aa:	4910      	ldr	r1, [pc, #64]	; (80093ec <lwip_netconn_do_close_internal+0x2c8>)
 80093ac:	4806      	ldr	r0, [pc, #24]	; (80093c8 <lwip_netconn_do_close_internal+0x2a4>)
 80093ae:	f00c f865 	bl	801547c <iprintf>
  return err;
 80093b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80093b6:	4618      	mov	r0, r3
 80093b8:	3718      	adds	r7, #24
 80093ba:	46bd      	mov	sp, r7
 80093bc:	bd80      	pop	{r7, pc}
 80093be:	bf00      	nop
 80093c0:	08016754 	.word	0x08016754
 80093c4:	08016a28 	.word	0x08016a28
 80093c8:	08016798 	.word	0x08016798
 80093cc:	08016a38 	.word	0x08016a38
 80093d0:	08016a58 	.word	0x08016a58
 80093d4:	08016a7c 	.word	0x08016a7c
 80093d8:	080168bc 	.word	0x080168bc
 80093dc:	08016a90 	.word	0x08016a90
 80093e0:	0800899d 	.word	0x0800899d
 80093e4:	080088d5 	.word	0x080088d5
 80093e8:	08008a45 	.word	0x08008a45
 80093ec:	08016ab4 	.word	0x08016ab4

080093f0 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b084      	sub	sp, #16
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	785b      	ldrb	r3, [r3, #1]
 8009402:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 8009404:	7afb      	ldrb	r3, [r7, #11]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d00d      	beq.n	8009426 <lwip_netconn_do_delconn+0x36>
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	781b      	ldrb	r3, [r3, #0]
 8009410:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009414:	2b10      	cmp	r3, #16
 8009416:	d006      	beq.n	8009426 <lwip_netconn_do_delconn+0x36>
 8009418:	4b60      	ldr	r3, [pc, #384]	; (800959c <lwip_netconn_do_delconn+0x1ac>)
 800941a:	f240 425e 	movw	r2, #1118	; 0x45e
 800941e:	4960      	ldr	r1, [pc, #384]	; (80095a0 <lwip_netconn_do_delconn+0x1b0>)
 8009420:	4860      	ldr	r0, [pc, #384]	; (80095a4 <lwip_netconn_do_delconn+0x1b4>)
 8009422:	f00c f82b 	bl	801547c <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 8009426:	7afb      	ldrb	r3, [r7, #11]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d005      	beq.n	8009438 <lwip_netconn_do_delconn+0x48>
 800942c:	7afb      	ldrb	r3, [r7, #11]
 800942e:	2b02      	cmp	r3, #2
 8009430:	d002      	beq.n	8009438 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 8009432:	7afb      	ldrb	r3, [r7, #11]
 8009434:	2b03      	cmp	r3, #3
 8009436:	d109      	bne.n	800944c <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 8009438:	7afb      	ldrb	r3, [r7, #11]
 800943a:	2b03      	cmp	r3, #3
 800943c:	d10a      	bne.n	8009454 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	7f1b      	ldrb	r3, [r3, #28]
 8009444:	f003 0304 	and.w	r3, r3, #4
 8009448:	2b00      	cmp	r3, #0
 800944a:	d103      	bne.n	8009454 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	22fb      	movs	r2, #251	; 0xfb
 8009450:	711a      	strb	r2, [r3, #4]
 8009452:	e097      	b.n	8009584 <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 8009454:	7afb      	ldrb	r3, [r7, #11]
 8009456:	2b03      	cmp	r3, #3
 8009458:	d10d      	bne.n	8009476 <lwip_netconn_do_delconn+0x86>
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	7f1b      	ldrb	r3, [r3, #28]
 8009460:	f003 0304 	and.w	r3, r3, #4
 8009464:	2b00      	cmp	r3, #0
 8009466:	d106      	bne.n	8009476 <lwip_netconn_do_delconn+0x86>
 8009468:	4b4c      	ldr	r3, [pc, #304]	; (800959c <lwip_netconn_do_delconn+0x1ac>)
 800946a:	f240 427a 	movw	r2, #1146	; 0x47a
 800946e:	494e      	ldr	r1, [pc, #312]	; (80095a8 <lwip_netconn_do_delconn+0x1b8>)
 8009470:	484c      	ldr	r0, [pc, #304]	; (80095a4 <lwip_netconn_do_delconn+0x1b4>)
 8009472:	f00c f803 	bl	801547c <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	2200      	movs	r2, #0
 800947a:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	4618      	mov	r0, r3
 8009482:	f7ff fdd1 	bl	8009028 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	685b      	ldr	r3, [r3, #4]
 800948c:	2b00      	cmp	r3, #0
 800948e:	d05f      	beq.n	8009550 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	781b      	ldrb	r3, [r3, #0]
 8009496:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800949a:	2b10      	cmp	r3, #16
 800949c:	d00d      	beq.n	80094ba <lwip_netconn_do_delconn+0xca>
 800949e:	2b20      	cmp	r3, #32
 80094a0:	d151      	bne.n	8009546 <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	685b      	ldr	r3, [r3, #4]
 80094a8:	2200      	movs	r2, #0
 80094aa:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	685b      	ldr	r3, [r3, #4]
 80094b2:	4618      	mov	r0, r3
 80094b4:	f009 f93a 	bl	801272c <udp_remove>
          break;
 80094b8:	e046      	b.n	8009548 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	6a1b      	ldr	r3, [r3, #32]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d006      	beq.n	80094d2 <lwip_netconn_do_delconn+0xe2>
 80094c4:	4b35      	ldr	r3, [pc, #212]	; (800959c <lwip_netconn_do_delconn+0x1ac>)
 80094c6:	f240 4294 	movw	r2, #1172	; 0x494
 80094ca:	4938      	ldr	r1, [pc, #224]	; (80095ac <lwip_netconn_do_delconn+0x1bc>)
 80094cc:	4835      	ldr	r0, [pc, #212]	; (80095a4 <lwip_netconn_do_delconn+0x1b4>)
 80094ce:	f00b ffd5 	bl	801547c <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	2204      	movs	r2, #4
 80094d8:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	2203      	movs	r2, #3
 80094de:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	68fa      	ldr	r2, [r7, #12]
 80094e6:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	2100      	movs	r1, #0
 80094ee:	4618      	mov	r0, r3
 80094f0:	f7ff fe18 	bl	8009124 <lwip_netconn_do_close_internal>
 80094f4:	4603      	mov	r3, r0
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d04b      	beq.n	8009592 <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	785b      	ldrb	r3, [r3, #1]
 8009500:	2b04      	cmp	r3, #4
 8009502:	d006      	beq.n	8009512 <lwip_netconn_do_delconn+0x122>
 8009504:	4b25      	ldr	r3, [pc, #148]	; (800959c <lwip_netconn_do_delconn+0x1ac>)
 8009506:	f240 429a 	movw	r2, #1178	; 0x49a
 800950a:	4929      	ldr	r1, [pc, #164]	; (80095b0 <lwip_netconn_do_delconn+0x1c0>)
 800950c:	4825      	ldr	r0, [pc, #148]	; (80095a4 <lwip_netconn_do_delconn+0x1b4>)
 800950e:	f00b ffb5 	bl	801547c <iprintf>
            UNLOCK_TCPIP_CORE();
 8009512:	4828      	ldr	r0, [pc, #160]	; (80095b4 <lwip_netconn_do_delconn+0x1c4>)
 8009514:	f00b fdcb 	bl	80150ae <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	330c      	adds	r3, #12
 800951e:	2100      	movs	r1, #0
 8009520:	4618      	mov	r0, r3
 8009522:	f00b fd2a 	bl	8014f7a <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 8009526:	4823      	ldr	r0, [pc, #140]	; (80095b4 <lwip_netconn_do_delconn+0x1c4>)
 8009528:	f00b fdb2 	bl	8015090 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	785b      	ldrb	r3, [r3, #1]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d02d      	beq.n	8009592 <lwip_netconn_do_delconn+0x1a2>
 8009536:	4b19      	ldr	r3, [pc, #100]	; (800959c <lwip_netconn_do_delconn+0x1ac>)
 8009538:	f240 429e 	movw	r2, #1182	; 0x49e
 800953c:	491c      	ldr	r1, [pc, #112]	; (80095b0 <lwip_netconn_do_delconn+0x1c0>)
 800953e:	4819      	ldr	r0, [pc, #100]	; (80095a4 <lwip_netconn_do_delconn+0x1b4>)
 8009540:	f00b ff9c 	bl	801547c <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 8009544:	e025      	b.n	8009592 <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 8009546:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	2200      	movs	r2, #0
 800954e:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009556:	2b00      	cmp	r3, #0
 8009558:	d007      	beq.n	800956a <lwip_netconn_do_delconn+0x17a>
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009560:	68fa      	ldr	r2, [r7, #12]
 8009562:	6810      	ldr	r0, [r2, #0]
 8009564:	2200      	movs	r2, #0
 8009566:	2100      	movs	r1, #0
 8009568:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009570:	2b00      	cmp	r3, #0
 8009572:	d007      	beq.n	8009584 <lwip_netconn_do_delconn+0x194>
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800957a:	68fa      	ldr	r2, [r7, #12]
 800957c:	6810      	ldr	r0, [r2, #0]
 800957e:	2200      	movs	r2, #0
 8009580:	2102      	movs	r1, #2
 8009582:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	330c      	adds	r3, #12
 800958a:	4618      	mov	r0, r3
 800958c:	f00b fd40 	bl	8015010 <sys_sem_valid>
 8009590:	e000      	b.n	8009594 <lwip_netconn_do_delconn+0x1a4>
          return;
 8009592:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 8009594:	3710      	adds	r7, #16
 8009596:	46bd      	mov	sp, r7
 8009598:	bd80      	pop	{r7, pc}
 800959a:	bf00      	nop
 800959c:	08016754 	.word	0x08016754
 80095a0:	08016ac4 	.word	0x08016ac4
 80095a4:	08016798 	.word	0x08016798
 80095a8:	08016ad8 	.word	0x08016ad8
 80095ac:	08016af8 	.word	0x08016af8
 80095b0:	08016b14 	.word	0x08016b14
 80095b4:	2000868c 	.word	0x2000868c

080095b8 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b084      	sub	sp, #16
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 80095c4:	68bb      	ldr	r3, [r7, #8]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	685b      	ldr	r3, [r3, #4]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d025      	beq.n	800961a <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80095ce:	68bb      	ldr	r3, [r7, #8]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	781b      	ldrb	r3, [r3, #0]
 80095d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80095d8:	2b10      	cmp	r3, #16
 80095da:	d00e      	beq.n	80095fa <lwip_netconn_do_bind+0x42>
 80095dc:	2b20      	cmp	r3, #32
 80095de:	d119      	bne.n	8009614 <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 80095e0:	68bb      	ldr	r3, [r7, #8]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	6858      	ldr	r0, [r3, #4]
 80095e6:	68bb      	ldr	r3, [r7, #8]
 80095e8:	6899      	ldr	r1, [r3, #8]
 80095ea:	68bb      	ldr	r3, [r7, #8]
 80095ec:	899b      	ldrh	r3, [r3, #12]
 80095ee:	461a      	mov	r2, r3
 80095f0:	f008 fff4 	bl	80125dc <udp_bind>
 80095f4:	4603      	mov	r3, r0
 80095f6:	73fb      	strb	r3, [r7, #15]
        break;
 80095f8:	e011      	b.n	800961e <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 80095fa:	68bb      	ldr	r3, [r7, #8]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	6858      	ldr	r0, [r3, #4]
 8009600:	68bb      	ldr	r3, [r7, #8]
 8009602:	6899      	ldr	r1, [r3, #8]
 8009604:	68bb      	ldr	r3, [r7, #8]
 8009606:	899b      	ldrh	r3, [r3, #12]
 8009608:	461a      	mov	r2, r3
 800960a:	f002 ff8b 	bl	800c524 <tcp_bind>
 800960e:	4603      	mov	r3, r0
 8009610:	73fb      	strb	r3, [r7, #15]
        break;
 8009612:	e004      	b.n	800961e <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 8009614:	23fa      	movs	r3, #250	; 0xfa
 8009616:	73fb      	strb	r3, [r7, #15]
        break;
 8009618:	e001      	b.n	800961e <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 800961a:	23fa      	movs	r3, #250	; 0xfa
 800961c:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 800961e:	68bb      	ldr	r3, [r7, #8]
 8009620:	7bfa      	ldrb	r2, [r7, #15]
 8009622:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 8009624:	bf00      	nop
 8009626:	3710      	adds	r7, #16
 8009628:	46bd      	mov	sp, r7
 800962a:	bd80      	pop	{r7, pc}

0800962c <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 800962c:	b580      	push	{r7, lr}
 800962e:	b086      	sub	sp, #24
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 8009638:	697b      	ldr	r3, [r7, #20]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	685b      	ldr	r3, [r3, #4]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d07f      	beq.n	8009742 <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8009642:	697b      	ldr	r3, [r7, #20]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	781b      	ldrb	r3, [r3, #0]
 8009648:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800964c:	2b10      	cmp	r3, #16
 800964e:	d175      	bne.n	800973c <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 8009650:	697b      	ldr	r3, [r7, #20]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	785b      	ldrb	r3, [r3, #1]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d165      	bne.n	8009726 <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 800965a:	697b      	ldr	r3, [r7, #20]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	685b      	ldr	r3, [r3, #4]
 8009660:	7d1b      	ldrb	r3, [r3, #20]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d002      	beq.n	800966c <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 8009666:	23fa      	movs	r3, #250	; 0xfa
 8009668:	72fb      	strb	r3, [r7, #11]
 800966a:	e06c      	b.n	8009746 <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 800966c:	23ff      	movs	r3, #255	; 0xff
 800966e:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 8009670:	697b      	ldr	r3, [r7, #20]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	685b      	ldr	r3, [r3, #4]
 8009676:	f107 020b 	add.w	r2, r7, #11
 800967a:	7cf9      	ldrb	r1, [r7, #19]
 800967c:	4618      	mov	r0, r3
 800967e:	f003 f809 	bl	800c694 <tcp_listen_with_backlog_and_err>
 8009682:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	2b00      	cmp	r3, #0
 8009688:	d05d      	beq.n	8009746 <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 800968a:	697b      	ldr	r3, [r7, #20]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	3310      	adds	r3, #16
 8009690:	4618      	mov	r0, r3
 8009692:	f00b fc2f 	bl	8014ef4 <sys_mbox_valid>
 8009696:	4603      	mov	r3, r0
 8009698:	2b00      	cmp	r3, #0
 800969a:	d00b      	beq.n	80096b4 <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 800969c:	697b      	ldr	r3, [r7, #20]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	3310      	adds	r3, #16
 80096a2:	4618      	mov	r0, r3
 80096a4:	f00b fbb2 	bl	8014e0c <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 80096a8:	697b      	ldr	r3, [r7, #20]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	3310      	adds	r3, #16
 80096ae:	4618      	mov	r0, r3
 80096b0:	f00b fc31 	bl	8014f16 <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 80096b4:	2300      	movs	r3, #0
 80096b6:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 80096b8:	697b      	ldr	r3, [r7, #20]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	3314      	adds	r3, #20
 80096be:	4618      	mov	r0, r3
 80096c0:	f00b fc18 	bl	8014ef4 <sys_mbox_valid>
 80096c4:	4603      	mov	r3, r0
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d108      	bne.n	80096dc <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 80096ca:	697b      	ldr	r3, [r7, #20]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	3314      	adds	r3, #20
 80096d0:	2106      	movs	r1, #6
 80096d2:	4618      	mov	r0, r3
 80096d4:	f00b fb80 	bl	8014dd8 <sys_mbox_new>
 80096d8:	4603      	mov	r3, r0
 80096da:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 80096dc:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d118      	bne.n	8009716 <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 80096e4:	697b      	ldr	r3, [r7, #20]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	2202      	movs	r2, #2
 80096ea:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 80096ec:	697b      	ldr	r3, [r7, #20]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	68fa      	ldr	r2, [r7, #12]
 80096f2:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 80096f4:	697b      	ldr	r3, [r7, #20]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	685a      	ldr	r2, [r3, #4]
 80096fa:	697b      	ldr	r3, [r7, #20]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	4619      	mov	r1, r3
 8009700:	4610      	mov	r0, r2
 8009702:	f003 ff91 	bl	800d628 <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 8009706:	697b      	ldr	r3, [r7, #20]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	685b      	ldr	r3, [r3, #4]
 800970c:	4912      	ldr	r1, [pc, #72]	; (8009758 <lwip_netconn_do_listen+0x12c>)
 800970e:	4618      	mov	r0, r3
 8009710:	f004 f802 	bl	800d718 <tcp_accept>
 8009714:	e017      	b.n	8009746 <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 8009716:	68f8      	ldr	r0, [r7, #12]
 8009718:	f002 fdb2 	bl	800c280 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 800971c:	697b      	ldr	r3, [r7, #20]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	2200      	movs	r2, #0
 8009722:	605a      	str	r2, [r3, #4]
 8009724:	e00f      	b.n	8009746 <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 8009726:	697b      	ldr	r3, [r7, #20]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	785b      	ldrb	r3, [r3, #1]
 800972c:	2b02      	cmp	r3, #2
 800972e:	d102      	bne.n	8009736 <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 8009730:	2300      	movs	r3, #0
 8009732:	72fb      	strb	r3, [r7, #11]
 8009734:	e007      	b.n	8009746 <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 8009736:	23f5      	movs	r3, #245	; 0xf5
 8009738:	72fb      	strb	r3, [r7, #11]
 800973a:	e004      	b.n	8009746 <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 800973c:	23f0      	movs	r3, #240	; 0xf0
 800973e:	72fb      	strb	r3, [r7, #11]
 8009740:	e001      	b.n	8009746 <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 8009742:	23f5      	movs	r3, #245	; 0xf5
 8009744:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 8009746:	f997 200b 	ldrsb.w	r2, [r7, #11]
 800974a:	697b      	ldr	r3, [r7, #20]
 800974c:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800974e:	bf00      	nop
 8009750:	3718      	adds	r7, #24
 8009752:	46bd      	mov	sp, r7
 8009754:	bd80      	pop	{r7, pc}
 8009756:	bf00      	nop
 8009758:	08008c41 	.word	0x08008c41

0800975c <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 800975c:	b580      	push	{r7, lr}
 800975e:	b086      	sub	sp, #24
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 8009768:	693b      	ldr	r3, [r7, #16]
 800976a:	2200      	movs	r2, #0
 800976c:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800976e:	693b      	ldr	r3, [r7, #16]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	685b      	ldr	r3, [r3, #4]
 8009774:	2b00      	cmp	r3, #0
 8009776:	d022      	beq.n	80097be <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8009778:	693b      	ldr	r3, [r7, #16]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	781b      	ldrb	r3, [r3, #0]
 800977e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009782:	2b10      	cmp	r3, #16
 8009784:	d11b      	bne.n	80097be <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 8009786:	693b      	ldr	r3, [r7, #16]
 8009788:	689b      	ldr	r3, [r3, #8]
 800978a:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800978c:	697b      	ldr	r3, [r7, #20]
 800978e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009792:	d202      	bcs.n	800979a <lwip_netconn_do_recv+0x3e>
 8009794:	697b      	ldr	r3, [r7, #20]
 8009796:	b29b      	uxth	r3, r3
 8009798:	e001      	b.n	800979e <lwip_netconn_do_recv+0x42>
 800979a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800979e:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 80097a0:	693b      	ldr	r3, [r7, #16]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	685b      	ldr	r3, [r3, #4]
 80097a6:	89fa      	ldrh	r2, [r7, #14]
 80097a8:	4611      	mov	r1, r2
 80097aa:	4618      	mov	r0, r3
 80097ac:	f003 f876 	bl	800c89c <tcp_recved>
        remaining -= recved;
 80097b0:	89fb      	ldrh	r3, [r7, #14]
 80097b2:	697a      	ldr	r2, [r7, #20]
 80097b4:	1ad3      	subs	r3, r2, r3
 80097b6:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 80097b8:	697b      	ldr	r3, [r7, #20]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d1e6      	bne.n	800978c <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 80097be:	bf00      	nop
 80097c0:	3718      	adds	r7, #24
 80097c2:	46bd      	mov	sp, r7
 80097c4:	bd80      	pop	{r7, pc}
	...

080097c8 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 80097c8:	b580      	push	{r7, lr}
 80097ca:	b088      	sub	sp, #32
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]
 80097d0:	460b      	mov	r3, r1
 80097d2:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 80097d4:	2300      	movs	r3, #0
 80097d6:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d106      	bne.n	80097ec <lwip_netconn_do_writemore+0x24>
 80097de:	4b96      	ldr	r3, [pc, #600]	; (8009a38 <lwip_netconn_do_writemore+0x270>)
 80097e0:	f240 6273 	movw	r2, #1651	; 0x673
 80097e4:	4995      	ldr	r1, [pc, #596]	; (8009a3c <lwip_netconn_do_writemore+0x274>)
 80097e6:	4896      	ldr	r0, [pc, #600]	; (8009a40 <lwip_netconn_do_writemore+0x278>)
 80097e8:	f00b fe48 	bl	801547c <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	785b      	ldrb	r3, [r3, #1]
 80097f0:	2b01      	cmp	r3, #1
 80097f2:	d006      	beq.n	8009802 <lwip_netconn_do_writemore+0x3a>
 80097f4:	4b90      	ldr	r3, [pc, #576]	; (8009a38 <lwip_netconn_do_writemore+0x270>)
 80097f6:	f240 6274 	movw	r2, #1652	; 0x674
 80097fa:	4992      	ldr	r1, [pc, #584]	; (8009a44 <lwip_netconn_do_writemore+0x27c>)
 80097fc:	4890      	ldr	r0, [pc, #576]	; (8009a40 <lwip_netconn_do_writemore+0x278>)
 80097fe:	f00b fe3d 	bl	801547c <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	6a1b      	ldr	r3, [r3, #32]
 8009806:	2b00      	cmp	r3, #0
 8009808:	d106      	bne.n	8009818 <lwip_netconn_do_writemore+0x50>
 800980a:	4b8b      	ldr	r3, [pc, #556]	; (8009a38 <lwip_netconn_do_writemore+0x270>)
 800980c:	f240 6275 	movw	r2, #1653	; 0x675
 8009810:	498d      	ldr	r1, [pc, #564]	; (8009a48 <lwip_netconn_do_writemore+0x280>)
 8009812:	488b      	ldr	r0, [pc, #556]	; (8009a40 <lwip_netconn_do_writemore+0x278>)
 8009814:	f00b fe32 	bl	801547c <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	685b      	ldr	r3, [r3, #4]
 800981c:	2b00      	cmp	r3, #0
 800981e:	d106      	bne.n	800982e <lwip_netconn_do_writemore+0x66>
 8009820:	4b85      	ldr	r3, [pc, #532]	; (8009a38 <lwip_netconn_do_writemore+0x270>)
 8009822:	f240 6276 	movw	r2, #1654	; 0x676
 8009826:	4989      	ldr	r1, [pc, #548]	; (8009a4c <lwip_netconn_do_writemore+0x284>)
 8009828:	4885      	ldr	r0, [pc, #532]	; (8009a40 <lwip_netconn_do_writemore+0x278>)
 800982a:	f00b fe27 	bl	801547c <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	6a1b      	ldr	r3, [r3, #32]
 8009832:	699a      	ldr	r2, [r3, #24]
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	6a1b      	ldr	r3, [r3, #32]
 8009838:	695b      	ldr	r3, [r3, #20]
 800983a:	429a      	cmp	r2, r3
 800983c:	d306      	bcc.n	800984c <lwip_netconn_do_writemore+0x84>
 800983e:	4b7e      	ldr	r3, [pc, #504]	; (8009a38 <lwip_netconn_do_writemore+0x270>)
 8009840:	f240 6277 	movw	r2, #1655	; 0x677
 8009844:	4982      	ldr	r1, [pc, #520]	; (8009a50 <lwip_netconn_do_writemore+0x288>)
 8009846:	487e      	ldr	r0, [pc, #504]	; (8009a40 <lwip_netconn_do_writemore+0x278>)
 8009848:	f00b fe18 	bl	801547c <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	6a1b      	ldr	r3, [r3, #32]
 8009850:	899b      	ldrh	r3, [r3, #12]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d106      	bne.n	8009864 <lwip_netconn_do_writemore+0x9c>
 8009856:	4b78      	ldr	r3, [pc, #480]	; (8009a38 <lwip_netconn_do_writemore+0x270>)
 8009858:	f240 6279 	movw	r2, #1657	; 0x679
 800985c:	497d      	ldr	r1, [pc, #500]	; (8009a54 <lwip_netconn_do_writemore+0x28c>)
 800985e:	4878      	ldr	r0, [pc, #480]	; (8009a40 <lwip_netconn_do_writemore+0x278>)
 8009860:	f00b fe0c 	bl	801547c <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	6a1b      	ldr	r3, [r3, #32]
 8009868:	7f1b      	ldrb	r3, [r3, #28]
 800986a:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	7f1b      	ldrb	r3, [r3, #28]
 8009870:	f003 0302 	and.w	r3, r3, #2
 8009874:	2b00      	cmp	r3, #0
 8009876:	d104      	bne.n	8009882 <lwip_netconn_do_writemore+0xba>
 8009878:	7ebb      	ldrb	r3, [r7, #26]
 800987a:	f003 0304 	and.w	r3, r3, #4
 800987e:	2b00      	cmp	r3, #0
 8009880:	d001      	beq.n	8009886 <lwip_netconn_do_writemore+0xbe>
 8009882:	2301      	movs	r3, #1
 8009884:	e000      	b.n	8009888 <lwip_netconn_do_writemore+0xc0>
 8009886:	2300      	movs	r3, #0
 8009888:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	6a1b      	ldr	r3, [r3, #32]
 800988e:	689b      	ldr	r3, [r3, #8]
 8009890:	681a      	ldr	r2, [r3, #0]
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	6a1b      	ldr	r3, [r3, #32]
 8009896:	691b      	ldr	r3, [r3, #16]
 8009898:	4413      	add	r3, r2
 800989a:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	6a1b      	ldr	r3, [r3, #32]
 80098a0:	689b      	ldr	r3, [r3, #8]
 80098a2:	685a      	ldr	r2, [r3, #4]
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	6a1b      	ldr	r3, [r3, #32]
 80098a8:	691b      	ldr	r3, [r3, #16]
 80098aa:	1ad3      	subs	r3, r2, r3
 80098ac:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 80098ae:	693b      	ldr	r3, [r7, #16]
 80098b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80098b4:	d307      	bcc.n	80098c6 <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 80098b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80098ba:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 80098bc:	7ebb      	ldrb	r3, [r7, #26]
 80098be:	f043 0302 	orr.w	r3, r3, #2
 80098c2:	76bb      	strb	r3, [r7, #26]
 80098c4:	e001      	b.n	80098ca <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 80098c6:	693b      	ldr	r3, [r7, #16]
 80098c8:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	685b      	ldr	r3, [r3, #4]
 80098ce:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80098d2:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 80098d4:	89fa      	ldrh	r2, [r7, #14]
 80098d6:	8bbb      	ldrh	r3, [r7, #28]
 80098d8:	429a      	cmp	r2, r3
 80098da:	d216      	bcs.n	800990a <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 80098dc:	89fb      	ldrh	r3, [r7, #14]
 80098de:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 80098e0:	7e3b      	ldrb	r3, [r7, #24]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d00d      	beq.n	8009902 <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 80098e6:	8bbb      	ldrh	r3, [r7, #28]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d10e      	bne.n	800990a <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	6a1b      	ldr	r3, [r3, #32]
 80098f0:	699b      	ldr	r3, [r3, #24]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d102      	bne.n	80098fc <lwip_netconn_do_writemore+0x134>
 80098f6:	f06f 0306 	mvn.w	r3, #6
 80098fa:	e000      	b.n	80098fe <lwip_netconn_do_writemore+0x136>
 80098fc:	2300      	movs	r3, #0
 80098fe:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 8009900:	e07d      	b.n	80099fe <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 8009902:	7ebb      	ldrb	r3, [r7, #26]
 8009904:	f043 0302 	orr.w	r3, r3, #2
 8009908:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	6a1b      	ldr	r3, [r3, #32]
 800990e:	691a      	ldr	r2, [r3, #16]
 8009910:	8bbb      	ldrh	r3, [r7, #28]
 8009912:	441a      	add	r2, r3
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	6a1b      	ldr	r3, [r3, #32]
 8009918:	689b      	ldr	r3, [r3, #8]
 800991a:	685b      	ldr	r3, [r3, #4]
 800991c:	429a      	cmp	r2, r3
 800991e:	d906      	bls.n	800992e <lwip_netconn_do_writemore+0x166>
 8009920:	4b45      	ldr	r3, [pc, #276]	; (8009a38 <lwip_netconn_do_writemore+0x270>)
 8009922:	f240 62a3 	movw	r2, #1699	; 0x6a3
 8009926:	494c      	ldr	r1, [pc, #304]	; (8009a58 <lwip_netconn_do_writemore+0x290>)
 8009928:	4845      	ldr	r0, [pc, #276]	; (8009a40 <lwip_netconn_do_writemore+0x278>)
 800992a:	f00b fda7 	bl	801547c <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800992e:	8bbb      	ldrh	r3, [r7, #28]
 8009930:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009934:	4293      	cmp	r3, r2
 8009936:	d103      	bne.n	8009940 <lwip_netconn_do_writemore+0x178>
 8009938:	693b      	ldr	r3, [r7, #16]
 800993a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800993e:	d209      	bcs.n	8009954 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8009940:	693b      	ldr	r3, [r7, #16]
 8009942:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 8009944:	8bba      	ldrh	r2, [r7, #28]
 8009946:	429a      	cmp	r2, r3
 8009948:	d10b      	bne.n	8009962 <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	6a1b      	ldr	r3, [r3, #32]
 800994e:	899b      	ldrh	r3, [r3, #12]
 8009950:	2b01      	cmp	r3, #1
 8009952:	d906      	bls.n	8009962 <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 8009954:	2301      	movs	r3, #1
 8009956:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8009958:	7ebb      	ldrb	r3, [r7, #26]
 800995a:	f043 0302 	orr.w	r3, r3, #2
 800995e:	76bb      	strb	r3, [r7, #26]
 8009960:	e001      	b.n	8009966 <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 8009962:	2300      	movs	r3, #0
 8009964:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	6858      	ldr	r0, [r3, #4]
 800996a:	7ebb      	ldrb	r3, [r7, #26]
 800996c:	8bba      	ldrh	r2, [r7, #28]
 800996e:	6979      	ldr	r1, [r7, #20]
 8009970:	f006 fd98 	bl	80104a4 <tcp_write>
 8009974:	4603      	mov	r3, r0
 8009976:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 8009978:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800997c:	2b00      	cmp	r3, #0
 800997e:	d12c      	bne.n	80099da <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	6a1b      	ldr	r3, [r3, #32]
 8009984:	6999      	ldr	r1, [r3, #24]
 8009986:	8bba      	ldrh	r2, [r7, #28]
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	6a1b      	ldr	r3, [r3, #32]
 800998c:	440a      	add	r2, r1
 800998e:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	6a1b      	ldr	r3, [r3, #32]
 8009994:	6919      	ldr	r1, [r3, #16]
 8009996:	8bba      	ldrh	r2, [r7, #28]
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	6a1b      	ldr	r3, [r3, #32]
 800999c:	440a      	add	r2, r1
 800999e:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	6a1b      	ldr	r3, [r3, #32]
 80099a4:	691a      	ldr	r2, [r3, #16]
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	6a1b      	ldr	r3, [r3, #32]
 80099aa:	689b      	ldr	r3, [r3, #8]
 80099ac:	685b      	ldr	r3, [r3, #4]
 80099ae:	429a      	cmp	r2, r3
 80099b0:	d113      	bne.n	80099da <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	6a1b      	ldr	r3, [r3, #32]
 80099b6:	899a      	ldrh	r2, [r3, #12]
 80099b8:	3a01      	subs	r2, #1
 80099ba:	b292      	uxth	r2, r2
 80099bc:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	6a1b      	ldr	r3, [r3, #32]
 80099c2:	899b      	ldrh	r3, [r3, #12]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d008      	beq.n	80099da <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	6a1b      	ldr	r3, [r3, #32]
 80099cc:	689a      	ldr	r2, [r3, #8]
 80099ce:	3208      	adds	r2, #8
 80099d0:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	6a1b      	ldr	r3, [r3, #32]
 80099d6:	2200      	movs	r2, #0
 80099d8:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 80099da:	7e7b      	ldrb	r3, [r7, #25]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d004      	beq.n	80099ea <lwip_netconn_do_writemore+0x222>
 80099e0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	f43f af50 	beq.w	800988a <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 80099ea:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d004      	beq.n	80099fc <lwip_netconn_do_writemore+0x234>
 80099f2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80099f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80099fa:	d146      	bne.n	8009a8a <lwip_netconn_do_writemore+0x2c2>
err_mem:
 80099fc:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 80099fe:	7e3b      	ldrb	r3, [r7, #24]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d02b      	beq.n	8009a5c <lwip_netconn_do_writemore+0x294>
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	6a1b      	ldr	r3, [r3, #32]
 8009a08:	699a      	ldr	r2, [r3, #24]
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	6a1b      	ldr	r3, [r3, #32]
 8009a0e:	695b      	ldr	r3, [r3, #20]
 8009a10:	429a      	cmp	r2, r3
 8009a12:	d223      	bcs.n	8009a5c <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d005      	beq.n	8009a28 <lwip_netconn_do_writemore+0x260>
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a20:	2200      	movs	r2, #0
 8009a22:	2103      	movs	r1, #3
 8009a24:	6878      	ldr	r0, [r7, #4]
 8009a26:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	7f1b      	ldrb	r3, [r3, #28]
 8009a2c:	f043 0310 	orr.w	r3, r3, #16
 8009a30:	b2da      	uxtb	r2, r3
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	771a      	strb	r2, [r3, #28]
 8009a36:	e028      	b.n	8009a8a <lwip_netconn_do_writemore+0x2c2>
 8009a38:	08016754 	.word	0x08016754
 8009a3c:	080168ac 	.word	0x080168ac
 8009a40:	08016798 	.word	0x08016798
 8009a44:	08016bb4 	.word	0x08016bb4
 8009a48:	080168bc 	.word	0x080168bc
 8009a4c:	08016bd4 	.word	0x08016bd4
 8009a50:	08016bec 	.word	0x08016bec
 8009a54:	08016c2c 	.word	0x08016c2c
 8009a58:	08016c54 	.word	0x08016c54
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	685b      	ldr	r3, [r3, #4]
 8009a60:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009a64:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8009a68:	d305      	bcc.n	8009a76 <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	685b      	ldr	r3, [r3, #4]
 8009a6e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8009a72:	2b04      	cmp	r3, #4
 8009a74:	d909      	bls.n	8009a8a <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d005      	beq.n	8009a8a <lwip_netconn_do_writemore+0x2c2>
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a82:	2200      	movs	r2, #0
 8009a84:	2103      	movs	r1, #3
 8009a86:	6878      	ldr	r0, [r7, #4]
 8009a88:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 8009a8a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d11d      	bne.n	8009ace <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	6a1b      	ldr	r3, [r3, #32]
 8009a96:	699a      	ldr	r2, [r3, #24]
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	6a1b      	ldr	r3, [r3, #32]
 8009a9c:	695b      	ldr	r3, [r3, #20]
 8009a9e:	429a      	cmp	r2, r3
 8009aa0:	d002      	beq.n	8009aa8 <lwip_netconn_do_writemore+0x2e0>
 8009aa2:	7e3b      	ldrb	r3, [r7, #24]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d001      	beq.n	8009aac <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 8009aa8:	2301      	movs	r3, #1
 8009aaa:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	685b      	ldr	r3, [r3, #4]
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	f007 fae1 	bl	8011078 <tcp_output>
 8009ab6:	4603      	mov	r3, r0
 8009ab8:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 8009aba:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8009abe:	f113 0f04 	cmn.w	r3, #4
 8009ac2:	d12c      	bne.n	8009b1e <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8009ac4:	7b3b      	ldrb	r3, [r7, #12]
 8009ac6:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8009ac8:	2301      	movs	r3, #1
 8009aca:	76fb      	strb	r3, [r7, #27]
 8009acc:	e027      	b.n	8009b1e <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 8009ace:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009ad2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009ad6:	d120      	bne.n	8009b1a <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	685b      	ldr	r3, [r3, #4]
 8009adc:	4618      	mov	r0, r3
 8009ade:	f007 facb 	bl	8011078 <tcp_output>
 8009ae2:	4603      	mov	r3, r0
 8009ae4:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 8009ae6:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8009aea:	f113 0f04 	cmn.w	r3, #4
 8009aee:	d104      	bne.n	8009afa <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8009af0:	7b7b      	ldrb	r3, [r7, #13]
 8009af2:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8009af4:	2301      	movs	r3, #1
 8009af6:	76fb      	strb	r3, [r7, #27]
 8009af8:	e011      	b.n	8009b1e <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 8009afa:	7e3b      	ldrb	r3, [r7, #24]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d00e      	beq.n	8009b1e <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	6a1b      	ldr	r3, [r3, #32]
 8009b04:	699b      	ldr	r3, [r3, #24]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d102      	bne.n	8009b10 <lwip_netconn_do_writemore+0x348>
 8009b0a:	f06f 0306 	mvn.w	r3, #6
 8009b0e:	e000      	b.n	8009b12 <lwip_netconn_do_writemore+0x34a>
 8009b10:	2300      	movs	r3, #0
 8009b12:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8009b14:	2301      	movs	r3, #1
 8009b16:	76fb      	strb	r3, [r7, #27]
 8009b18:	e001      	b.n	8009b1e <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 8009b1a:	2301      	movs	r3, #1
 8009b1c:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 8009b1e:	7efb      	ldrb	r3, [r7, #27]
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d015      	beq.n	8009b50 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	6a1b      	ldr	r3, [r3, #32]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	330c      	adds	r3, #12
 8009b2c:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	6a1b      	ldr	r3, [r3, #32]
 8009b32:	7ffa      	ldrb	r2, [r7, #31]
 8009b34:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	2200      	movs	r2, #0
 8009b3a:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	2200      	movs	r2, #0
 8009b40:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8009b42:	78fb      	ldrb	r3, [r7, #3]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d006      	beq.n	8009b56 <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 8009b48:	68b8      	ldr	r0, [r7, #8]
 8009b4a:	f00b fa47 	bl	8014fdc <sys_sem_signal>
 8009b4e:	e002      	b.n	8009b56 <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 8009b50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009b54:	e000      	b.n	8009b58 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 8009b56:	2300      	movs	r3, #0
}
 8009b58:	4618      	mov	r0, r3
 8009b5a:	3720      	adds	r7, #32
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	bd80      	pop	{r7, pc}

08009b60 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b084      	sub	sp, #16
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 8009b6c:	68bb      	ldr	r3, [r7, #8]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	4618      	mov	r0, r3
 8009b72:	f7fe fd20 	bl	80085b6 <netconn_err>
 8009b76:	4603      	mov	r3, r0
 8009b78:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8009b7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d166      	bne.n	8009c50 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8009b82:	68bb      	ldr	r3, [r7, #8]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	781b      	ldrb	r3, [r3, #0]
 8009b88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009b8c:	2b10      	cmp	r3, #16
 8009b8e:	d15d      	bne.n	8009c4c <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 8009b90:	68bb      	ldr	r3, [r7, #8]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	785b      	ldrb	r3, [r3, #1]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d002      	beq.n	8009ba0 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 8009b9a:	23fb      	movs	r3, #251	; 0xfb
 8009b9c:	73fb      	strb	r3, [r7, #15]
 8009b9e:	e057      	b.n	8009c50 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 8009ba0:	68bb      	ldr	r3, [r7, #8]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	685b      	ldr	r3, [r3, #4]
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d04d      	beq.n	8009c46 <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 8009baa:	68bb      	ldr	r3, [r7, #8]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	2201      	movs	r2, #1
 8009bb0:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8009bb2:	68bb      	ldr	r3, [r7, #8]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	6a1b      	ldr	r3, [r3, #32]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d006      	beq.n	8009bca <lwip_netconn_do_write+0x6a>
 8009bbc:	4b28      	ldr	r3, [pc, #160]	; (8009c60 <lwip_netconn_do_write+0x100>)
 8009bbe:	f240 7223 	movw	r2, #1827	; 0x723
 8009bc2:	4928      	ldr	r1, [pc, #160]	; (8009c64 <lwip_netconn_do_write+0x104>)
 8009bc4:	4828      	ldr	r0, [pc, #160]	; (8009c68 <lwip_netconn_do_write+0x108>)
 8009bc6:	f00b fc59 	bl	801547c <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 8009bca:	68bb      	ldr	r3, [r7, #8]
 8009bcc:	695b      	ldr	r3, [r3, #20]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d106      	bne.n	8009be0 <lwip_netconn_do_write+0x80>
 8009bd2:	4b23      	ldr	r3, [pc, #140]	; (8009c60 <lwip_netconn_do_write+0x100>)
 8009bd4:	f240 7224 	movw	r2, #1828	; 0x724
 8009bd8:	4924      	ldr	r1, [pc, #144]	; (8009c6c <lwip_netconn_do_write+0x10c>)
 8009bda:	4823      	ldr	r0, [pc, #140]	; (8009c68 <lwip_netconn_do_write+0x108>)
 8009bdc:	f00b fc4e 	bl	801547c <iprintf>
        msg->conn->current_msg = msg;
 8009be0:	68bb      	ldr	r3, [r7, #8]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	68ba      	ldr	r2, [r7, #8]
 8009be6:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 8009be8:	68bb      	ldr	r3, [r7, #8]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	2100      	movs	r1, #0
 8009bee:	4618      	mov	r0, r3
 8009bf0:	f7ff fdea 	bl	80097c8 <lwip_netconn_do_writemore>
 8009bf4:	4603      	mov	r3, r0
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d02e      	beq.n	8009c58 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 8009bfa:	68bb      	ldr	r3, [r7, #8]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	785b      	ldrb	r3, [r3, #1]
 8009c00:	2b01      	cmp	r3, #1
 8009c02:	d006      	beq.n	8009c12 <lwip_netconn_do_write+0xb2>
 8009c04:	4b16      	ldr	r3, [pc, #88]	; (8009c60 <lwip_netconn_do_write+0x100>)
 8009c06:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 8009c0a:	4919      	ldr	r1, [pc, #100]	; (8009c70 <lwip_netconn_do_write+0x110>)
 8009c0c:	4816      	ldr	r0, [pc, #88]	; (8009c68 <lwip_netconn_do_write+0x108>)
 8009c0e:	f00b fc35 	bl	801547c <iprintf>
          UNLOCK_TCPIP_CORE();
 8009c12:	4818      	ldr	r0, [pc, #96]	; (8009c74 <lwip_netconn_do_write+0x114>)
 8009c14:	f00b fa4b 	bl	80150ae <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8009c18:	68bb      	ldr	r3, [r7, #8]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	330c      	adds	r3, #12
 8009c1e:	2100      	movs	r1, #0
 8009c20:	4618      	mov	r0, r3
 8009c22:	f00b f9aa 	bl	8014f7a <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 8009c26:	4813      	ldr	r0, [pc, #76]	; (8009c74 <lwip_netconn_do_write+0x114>)
 8009c28:	f00b fa32 	bl	8015090 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 8009c2c:	68bb      	ldr	r3, [r7, #8]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	785b      	ldrb	r3, [r3, #1]
 8009c32:	2b01      	cmp	r3, #1
 8009c34:	d110      	bne.n	8009c58 <lwip_netconn_do_write+0xf8>
 8009c36:	4b0a      	ldr	r3, [pc, #40]	; (8009c60 <lwip_netconn_do_write+0x100>)
 8009c38:	f240 722c 	movw	r2, #1836	; 0x72c
 8009c3c:	490c      	ldr	r1, [pc, #48]	; (8009c70 <lwip_netconn_do_write+0x110>)
 8009c3e:	480a      	ldr	r0, [pc, #40]	; (8009c68 <lwip_netconn_do_write+0x108>)
 8009c40:	f00b fc1c 	bl	801547c <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 8009c44:	e008      	b.n	8009c58 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 8009c46:	23f5      	movs	r3, #245	; 0xf5
 8009c48:	73fb      	strb	r3, [r7, #15]
 8009c4a:	e001      	b.n	8009c50 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 8009c4c:	23fa      	movs	r3, #250	; 0xfa
 8009c4e:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 8009c50:	68bb      	ldr	r3, [r7, #8]
 8009c52:	7bfa      	ldrb	r2, [r7, #15]
 8009c54:	711a      	strb	r2, [r3, #4]
 8009c56:	e000      	b.n	8009c5a <lwip_netconn_do_write+0xfa>
        return;
 8009c58:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 8009c5a:	3710      	adds	r7, #16
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	bd80      	pop	{r7, pc}
 8009c60:	08016754 	.word	0x08016754
 8009c64:	08016af8 	.word	0x08016af8
 8009c68:	08016798 	.word	0x08016798
 8009c6c:	08016c80 	.word	0x08016c80
 8009c70:	08016b14 	.word	0x08016b14
 8009c74:	2000868c 	.word	0x2000868c

08009c78 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	b084      	sub	sp, #16
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	785b      	ldrb	r3, [r3, #1]
 8009c8a:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	685b      	ldr	r3, [r3, #4]
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d069      	beq.n	8009d6a <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	781b      	ldrb	r3, [r3, #0]
 8009c9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 8009ca0:	2b10      	cmp	r3, #16
 8009ca2:	d162      	bne.n	8009d6a <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8009ca8:	2b03      	cmp	r3, #3
 8009caa:	d002      	beq.n	8009cb2 <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8009cac:	7afb      	ldrb	r3, [r7, #11]
 8009cae:	2b02      	cmp	r3, #2
 8009cb0:	d05b      	beq.n	8009d6a <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 8009cb2:	7afb      	ldrb	r3, [r7, #11]
 8009cb4:	2b03      	cmp	r3, #3
 8009cb6:	d103      	bne.n	8009cc0 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	22f5      	movs	r2, #245	; 0xf5
 8009cbc:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8009cbe:	e059      	b.n	8009d74 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 8009cc0:	7afb      	ldrb	r3, [r7, #11]
 8009cc2:	2b01      	cmp	r3, #1
 8009cc4:	d103      	bne.n	8009cce <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	22fb      	movs	r2, #251	; 0xfb
 8009cca:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8009ccc:	e052      	b.n	8009d74 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	7a1b      	ldrb	r3, [r3, #8]
 8009cd2:	f003 0301 	and.w	r3, r3, #1
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d004      	beq.n	8009ce4 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	4618      	mov	r0, r3
 8009ce0:	f7ff f9a2 	bl	8009028 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	6a1b      	ldr	r3, [r3, #32]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d006      	beq.n	8009cfc <lwip_netconn_do_close+0x84>
 8009cee:	4b23      	ldr	r3, [pc, #140]	; (8009d7c <lwip_netconn_do_close+0x104>)
 8009cf0:	f240 72bd 	movw	r2, #1981	; 0x7bd
 8009cf4:	4922      	ldr	r1, [pc, #136]	; (8009d80 <lwip_netconn_do_close+0x108>)
 8009cf6:	4823      	ldr	r0, [pc, #140]	; (8009d84 <lwip_netconn_do_close+0x10c>)
 8009cf8:	f00b fbc0 	bl	801547c <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	2204      	movs	r2, #4
 8009d02:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	68fa      	ldr	r2, [r7, #12]
 8009d0a:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	2100      	movs	r1, #0
 8009d12:	4618      	mov	r0, r3
 8009d14:	f7ff fa06 	bl	8009124 <lwip_netconn_do_close_internal>
 8009d18:	4603      	mov	r3, r0
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d029      	beq.n	8009d72 <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	785b      	ldrb	r3, [r3, #1]
 8009d24:	2b04      	cmp	r3, #4
 8009d26:	d006      	beq.n	8009d36 <lwip_netconn_do_close+0xbe>
 8009d28:	4b14      	ldr	r3, [pc, #80]	; (8009d7c <lwip_netconn_do_close+0x104>)
 8009d2a:	f240 72c2 	movw	r2, #1986	; 0x7c2
 8009d2e:	4916      	ldr	r1, [pc, #88]	; (8009d88 <lwip_netconn_do_close+0x110>)
 8009d30:	4814      	ldr	r0, [pc, #80]	; (8009d84 <lwip_netconn_do_close+0x10c>)
 8009d32:	f00b fba3 	bl	801547c <iprintf>
        UNLOCK_TCPIP_CORE();
 8009d36:	4815      	ldr	r0, [pc, #84]	; (8009d8c <lwip_netconn_do_close+0x114>)
 8009d38:	f00b f9b9 	bl	80150ae <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	330c      	adds	r3, #12
 8009d42:	2100      	movs	r1, #0
 8009d44:	4618      	mov	r0, r3
 8009d46:	f00b f918 	bl	8014f7a <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 8009d4a:	4810      	ldr	r0, [pc, #64]	; (8009d8c <lwip_netconn_do_close+0x114>)
 8009d4c:	f00b f9a0 	bl	8015090 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	785b      	ldrb	r3, [r3, #1]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d00b      	beq.n	8009d72 <lwip_netconn_do_close+0xfa>
 8009d5a:	4b08      	ldr	r3, [pc, #32]	; (8009d7c <lwip_netconn_do_close+0x104>)
 8009d5c:	f240 72c6 	movw	r2, #1990	; 0x7c6
 8009d60:	4909      	ldr	r1, [pc, #36]	; (8009d88 <lwip_netconn_do_close+0x110>)
 8009d62:	4808      	ldr	r0, [pc, #32]	; (8009d84 <lwip_netconn_do_close+0x10c>)
 8009d64:	f00b fb8a 	bl	801547c <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 8009d68:	e003      	b.n	8009d72 <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	22f5      	movs	r2, #245	; 0xf5
 8009d6e:	711a      	strb	r2, [r3, #4]
 8009d70:	e000      	b.n	8009d74 <lwip_netconn_do_close+0xfc>
      return;
 8009d72:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 8009d74:	3710      	adds	r7, #16
 8009d76:	46bd      	mov	sp, r7
 8009d78:	bd80      	pop	{r7, pc}
 8009d7a:	bf00      	nop
 8009d7c:	08016754 	.word	0x08016754
 8009d80:	08016af8 	.word	0x08016af8
 8009d84:	08016798 	.word	0x08016798
 8009d88:	08016b14 	.word	0x08016b14
 8009d8c:	2000868c 	.word	0x2000868c

08009d90 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 8009d90:	b580      	push	{r7, lr}
 8009d92:	b082      	sub	sp, #8
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d013      	beq.n	8009dc6 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d00b      	beq.n	8009dbe <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	4618      	mov	r0, r3
 8009dac:	f001 fdbe 	bl	800b92c <pbuf_free>
      buf->p = buf->ptr = NULL;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	2200      	movs	r2, #0
 8009db4:	605a      	str	r2, [r3, #4]
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	685a      	ldr	r2, [r3, #4]
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 8009dbe:	6879      	ldr	r1, [r7, #4]
 8009dc0:	2006      	movs	r0, #6
 8009dc2:	f000 ff0f 	bl	800abe4 <memp_free>
  }
}
 8009dc6:	bf00      	nop
 8009dc8:	3708      	adds	r7, #8
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	bd80      	pop	{r7, pc}
	...

08009dd0 <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	b084      	sub	sp, #16
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	60f8      	str	r0, [r7, #12]
 8009dd8:	60b9      	str	r1, [r7, #8]
 8009dda:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d108      	bne.n	8009df4 <netbuf_data+0x24>
 8009de2:	4b1b      	ldr	r3, [pc, #108]	; (8009e50 <netbuf_data+0x80>)
 8009de4:	22c6      	movs	r2, #198	; 0xc6
 8009de6:	491b      	ldr	r1, [pc, #108]	; (8009e54 <netbuf_data+0x84>)
 8009de8:	481b      	ldr	r0, [pc, #108]	; (8009e58 <netbuf_data+0x88>)
 8009dea:	f00b fb47 	bl	801547c <iprintf>
 8009dee:	f06f 030f 	mvn.w	r3, #15
 8009df2:	e029      	b.n	8009e48 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8009df4:	68bb      	ldr	r3, [r7, #8]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d108      	bne.n	8009e0c <netbuf_data+0x3c>
 8009dfa:	4b15      	ldr	r3, [pc, #84]	; (8009e50 <netbuf_data+0x80>)
 8009dfc:	22c7      	movs	r2, #199	; 0xc7
 8009dfe:	4917      	ldr	r1, [pc, #92]	; (8009e5c <netbuf_data+0x8c>)
 8009e00:	4815      	ldr	r0, [pc, #84]	; (8009e58 <netbuf_data+0x88>)
 8009e02:	f00b fb3b 	bl	801547c <iprintf>
 8009e06:	f06f 030f 	mvn.w	r3, #15
 8009e0a:	e01d      	b.n	8009e48 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d108      	bne.n	8009e24 <netbuf_data+0x54>
 8009e12:	4b0f      	ldr	r3, [pc, #60]	; (8009e50 <netbuf_data+0x80>)
 8009e14:	22c8      	movs	r2, #200	; 0xc8
 8009e16:	4912      	ldr	r1, [pc, #72]	; (8009e60 <netbuf_data+0x90>)
 8009e18:	480f      	ldr	r0, [pc, #60]	; (8009e58 <netbuf_data+0x88>)
 8009e1a:	f00b fb2f 	bl	801547c <iprintf>
 8009e1e:	f06f 030f 	mvn.w	r3, #15
 8009e22:	e011      	b.n	8009e48 <netbuf_data+0x78>

  if (buf->ptr == NULL) {
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	685b      	ldr	r3, [r3, #4]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d102      	bne.n	8009e32 <netbuf_data+0x62>
    return ERR_BUF;
 8009e2c:	f06f 0301 	mvn.w	r3, #1
 8009e30:	e00a      	b.n	8009e48 <netbuf_data+0x78>
  }
  *dataptr = buf->ptr->payload;
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	685b      	ldr	r3, [r3, #4]
 8009e36:	685a      	ldr	r2, [r3, #4]
 8009e38:	68bb      	ldr	r3, [r7, #8]
 8009e3a:	601a      	str	r2, [r3, #0]
  *len = buf->ptr->len;
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	685b      	ldr	r3, [r3, #4]
 8009e40:	895a      	ldrh	r2, [r3, #10]
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	801a      	strh	r2, [r3, #0]
  return ERR_OK;
 8009e46:	2300      	movs	r3, #0
}
 8009e48:	4618      	mov	r0, r3
 8009e4a:	3710      	adds	r7, #16
 8009e4c:	46bd      	mov	sp, r7
 8009e4e:	bd80      	pop	{r7, pc}
 8009e50:	08016cac 	.word	0x08016cac
 8009e54:	08016db4 	.word	0x08016db4
 8009e58:	08016cfc 	.word	0x08016cfc
 8009e5c:	08016dd0 	.word	0x08016dd0
 8009e60:	08016df0 	.word	0x08016df0

08009e64 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8009e64:	b580      	push	{r7, lr}
 8009e66:	b084      	sub	sp, #16
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	6078      	str	r0, [r7, #4]
 8009e6c:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8009e6e:	f008 f9bb 	bl	80121e8 <sys_timeouts_sleeptime>
 8009e72:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009e7a:	d10b      	bne.n	8009e94 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8009e7c:	4813      	ldr	r0, [pc, #76]	; (8009ecc <tcpip_timeouts_mbox_fetch+0x68>)
 8009e7e:	f00b f916 	bl	80150ae <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8009e82:	2200      	movs	r2, #0
 8009e84:	6839      	ldr	r1, [r7, #0]
 8009e86:	6878      	ldr	r0, [r7, #4]
 8009e88:	f00a ffec 	bl	8014e64 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8009e8c:	480f      	ldr	r0, [pc, #60]	; (8009ecc <tcpip_timeouts_mbox_fetch+0x68>)
 8009e8e:	f00b f8ff 	bl	8015090 <sys_mutex_lock>
    return;
 8009e92:	e018      	b.n	8009ec6 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d102      	bne.n	8009ea0 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8009e9a:	f008 f96b 	bl	8012174 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8009e9e:	e7e6      	b.n	8009e6e <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8009ea0:	480a      	ldr	r0, [pc, #40]	; (8009ecc <tcpip_timeouts_mbox_fetch+0x68>)
 8009ea2:	f00b f904 	bl	80150ae <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8009ea6:	68fa      	ldr	r2, [r7, #12]
 8009ea8:	6839      	ldr	r1, [r7, #0]
 8009eaa:	6878      	ldr	r0, [r7, #4]
 8009eac:	f00a ffda 	bl	8014e64 <sys_arch_mbox_fetch>
 8009eb0:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 8009eb2:	4806      	ldr	r0, [pc, #24]	; (8009ecc <tcpip_timeouts_mbox_fetch+0x68>)
 8009eb4:	f00b f8ec 	bl	8015090 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8009eb8:	68bb      	ldr	r3, [r7, #8]
 8009eba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009ebe:	d102      	bne.n	8009ec6 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8009ec0:	f008 f958 	bl	8012174 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8009ec4:	e7d3      	b.n	8009e6e <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 8009ec6:	3710      	adds	r7, #16
 8009ec8:	46bd      	mov	sp, r7
 8009eca:	bd80      	pop	{r7, pc}
 8009ecc:	2000868c 	.word	0x2000868c

08009ed0 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8009ed0:	b580      	push	{r7, lr}
 8009ed2:	b084      	sub	sp, #16
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8009ed8:	4810      	ldr	r0, [pc, #64]	; (8009f1c <tcpip_thread+0x4c>)
 8009eda:	f00b f8d9 	bl	8015090 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8009ede:	4b10      	ldr	r3, [pc, #64]	; (8009f20 <tcpip_thread+0x50>)
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d005      	beq.n	8009ef2 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 8009ee6:	4b0e      	ldr	r3, [pc, #56]	; (8009f20 <tcpip_thread+0x50>)
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	4a0e      	ldr	r2, [pc, #56]	; (8009f24 <tcpip_thread+0x54>)
 8009eec:	6812      	ldr	r2, [r2, #0]
 8009eee:	4610      	mov	r0, r2
 8009ef0:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8009ef2:	f107 030c 	add.w	r3, r7, #12
 8009ef6:	4619      	mov	r1, r3
 8009ef8:	480b      	ldr	r0, [pc, #44]	; (8009f28 <tcpip_thread+0x58>)
 8009efa:	f7ff ffb3 	bl	8009e64 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d106      	bne.n	8009f12 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8009f04:	4b09      	ldr	r3, [pc, #36]	; (8009f2c <tcpip_thread+0x5c>)
 8009f06:	2291      	movs	r2, #145	; 0x91
 8009f08:	4909      	ldr	r1, [pc, #36]	; (8009f30 <tcpip_thread+0x60>)
 8009f0a:	480a      	ldr	r0, [pc, #40]	; (8009f34 <tcpip_thread+0x64>)
 8009f0c:	f00b fab6 	bl	801547c <iprintf>
      continue;
 8009f10:	e003      	b.n	8009f1a <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	4618      	mov	r0, r3
 8009f16:	f000 f80f 	bl	8009f38 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8009f1a:	e7ea      	b.n	8009ef2 <tcpip_thread+0x22>
 8009f1c:	2000868c 	.word	0x2000868c
 8009f20:	20004a78 	.word	0x20004a78
 8009f24:	20004a7c 	.word	0x20004a7c
 8009f28:	20004a80 	.word	0x20004a80
 8009f2c:	08016e44 	.word	0x08016e44
 8009f30:	08016e74 	.word	0x08016e74
 8009f34:	08016e94 	.word	0x08016e94

08009f38 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8009f38:	b580      	push	{r7, lr}
 8009f3a:	b082      	sub	sp, #8
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	781b      	ldrb	r3, [r3, #0]
 8009f44:	2b02      	cmp	r3, #2
 8009f46:	d026      	beq.n	8009f96 <tcpip_thread_handle_msg+0x5e>
 8009f48:	2b02      	cmp	r3, #2
 8009f4a:	dc2b      	bgt.n	8009fa4 <tcpip_thread_handle_msg+0x6c>
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d002      	beq.n	8009f56 <tcpip_thread_handle_msg+0x1e>
 8009f50:	2b01      	cmp	r3, #1
 8009f52:	d015      	beq.n	8009f80 <tcpip_thread_handle_msg+0x48>
 8009f54:	e026      	b.n	8009fa4 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	68db      	ldr	r3, [r3, #12]
 8009f5a:	687a      	ldr	r2, [r7, #4]
 8009f5c:	6850      	ldr	r0, [r2, #4]
 8009f5e:	687a      	ldr	r2, [r7, #4]
 8009f60:	6892      	ldr	r2, [r2, #8]
 8009f62:	4611      	mov	r1, r2
 8009f64:	4798      	blx	r3
 8009f66:	4603      	mov	r3, r0
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d004      	beq.n	8009f76 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	685b      	ldr	r3, [r3, #4]
 8009f70:	4618      	mov	r0, r3
 8009f72:	f001 fcdb 	bl	800b92c <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8009f76:	6879      	ldr	r1, [r7, #4]
 8009f78:	2009      	movs	r0, #9
 8009f7a:	f000 fe33 	bl	800abe4 <memp_free>
      break;
 8009f7e:	e018      	b.n	8009fb2 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	685b      	ldr	r3, [r3, #4]
 8009f84:	687a      	ldr	r2, [r7, #4]
 8009f86:	6892      	ldr	r2, [r2, #8]
 8009f88:	4610      	mov	r0, r2
 8009f8a:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8009f8c:	6879      	ldr	r1, [r7, #4]
 8009f8e:	2008      	movs	r0, #8
 8009f90:	f000 fe28 	bl	800abe4 <memp_free>
      break;
 8009f94:	e00d      	b.n	8009fb2 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	685b      	ldr	r3, [r3, #4]
 8009f9a:	687a      	ldr	r2, [r7, #4]
 8009f9c:	6892      	ldr	r2, [r2, #8]
 8009f9e:	4610      	mov	r0, r2
 8009fa0:	4798      	blx	r3
      break;
 8009fa2:	e006      	b.n	8009fb2 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8009fa4:	4b05      	ldr	r3, [pc, #20]	; (8009fbc <tcpip_thread_handle_msg+0x84>)
 8009fa6:	22cf      	movs	r2, #207	; 0xcf
 8009fa8:	4905      	ldr	r1, [pc, #20]	; (8009fc0 <tcpip_thread_handle_msg+0x88>)
 8009faa:	4806      	ldr	r0, [pc, #24]	; (8009fc4 <tcpip_thread_handle_msg+0x8c>)
 8009fac:	f00b fa66 	bl	801547c <iprintf>
      break;
 8009fb0:	bf00      	nop
  }
}
 8009fb2:	bf00      	nop
 8009fb4:	3708      	adds	r7, #8
 8009fb6:	46bd      	mov	sp, r7
 8009fb8:	bd80      	pop	{r7, pc}
 8009fba:	bf00      	nop
 8009fbc:	08016e44 	.word	0x08016e44
 8009fc0:	08016e74 	.word	0x08016e74
 8009fc4:	08016e94 	.word	0x08016e94

08009fc8 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8009fc8:	b580      	push	{r7, lr}
 8009fca:	b086      	sub	sp, #24
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	60f8      	str	r0, [r7, #12]
 8009fd0:	60b9      	str	r1, [r7, #8]
 8009fd2:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8009fd4:	481a      	ldr	r0, [pc, #104]	; (800a040 <tcpip_inpkt+0x78>)
 8009fd6:	f00a ff8d 	bl	8014ef4 <sys_mbox_valid>
 8009fda:	4603      	mov	r3, r0
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d105      	bne.n	8009fec <tcpip_inpkt+0x24>
 8009fe0:	4b18      	ldr	r3, [pc, #96]	; (800a044 <tcpip_inpkt+0x7c>)
 8009fe2:	22fc      	movs	r2, #252	; 0xfc
 8009fe4:	4918      	ldr	r1, [pc, #96]	; (800a048 <tcpip_inpkt+0x80>)
 8009fe6:	4819      	ldr	r0, [pc, #100]	; (800a04c <tcpip_inpkt+0x84>)
 8009fe8:	f00b fa48 	bl	801547c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8009fec:	2009      	movs	r0, #9
 8009fee:	f000 fda7 	bl	800ab40 <memp_malloc>
 8009ff2:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8009ff4:	697b      	ldr	r3, [r7, #20]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d102      	bne.n	800a000 <tcpip_inpkt+0x38>
    return ERR_MEM;
 8009ffa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009ffe:	e01a      	b.n	800a036 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800a000:	697b      	ldr	r3, [r7, #20]
 800a002:	2200      	movs	r2, #0
 800a004:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800a006:	697b      	ldr	r3, [r7, #20]
 800a008:	68fa      	ldr	r2, [r7, #12]
 800a00a:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800a00c:	697b      	ldr	r3, [r7, #20]
 800a00e:	68ba      	ldr	r2, [r7, #8]
 800a010:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800a012:	697b      	ldr	r3, [r7, #20]
 800a014:	687a      	ldr	r2, [r7, #4]
 800a016:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800a018:	6979      	ldr	r1, [r7, #20]
 800a01a:	4809      	ldr	r0, [pc, #36]	; (800a040 <tcpip_inpkt+0x78>)
 800a01c:	f00a ff08 	bl	8014e30 <sys_mbox_trypost>
 800a020:	4603      	mov	r3, r0
 800a022:	2b00      	cmp	r3, #0
 800a024:	d006      	beq.n	800a034 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800a026:	6979      	ldr	r1, [r7, #20]
 800a028:	2009      	movs	r0, #9
 800a02a:	f000 fddb 	bl	800abe4 <memp_free>
    return ERR_MEM;
 800a02e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a032:	e000      	b.n	800a036 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800a034:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800a036:	4618      	mov	r0, r3
 800a038:	3718      	adds	r7, #24
 800a03a:	46bd      	mov	sp, r7
 800a03c:	bd80      	pop	{r7, pc}
 800a03e:	bf00      	nop
 800a040:	20004a80 	.word	0x20004a80
 800a044:	08016e44 	.word	0x08016e44
 800a048:	08016ebc 	.word	0x08016ebc
 800a04c:	08016e94 	.word	0x08016e94

0800a050 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800a050:	b580      	push	{r7, lr}
 800a052:	b082      	sub	sp, #8
 800a054:	af00      	add	r7, sp, #0
 800a056:	6078      	str	r0, [r7, #4]
 800a058:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800a05a:	683b      	ldr	r3, [r7, #0]
 800a05c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a060:	f003 0318 	and.w	r3, r3, #24
 800a064:	2b00      	cmp	r3, #0
 800a066:	d006      	beq.n	800a076 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800a068:	4a08      	ldr	r2, [pc, #32]	; (800a08c <tcpip_input+0x3c>)
 800a06a:	6839      	ldr	r1, [r7, #0]
 800a06c:	6878      	ldr	r0, [r7, #4]
 800a06e:	f7ff ffab 	bl	8009fc8 <tcpip_inpkt>
 800a072:	4603      	mov	r3, r0
 800a074:	e005      	b.n	800a082 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800a076:	4a06      	ldr	r2, [pc, #24]	; (800a090 <tcpip_input+0x40>)
 800a078:	6839      	ldr	r1, [r7, #0]
 800a07a:	6878      	ldr	r0, [r7, #4]
 800a07c:	f7ff ffa4 	bl	8009fc8 <tcpip_inpkt>
 800a080:	4603      	mov	r3, r0
}
 800a082:	4618      	mov	r0, r3
 800a084:	3708      	adds	r7, #8
 800a086:	46bd      	mov	sp, r7
 800a088:	bd80      	pop	{r7, pc}
 800a08a:	bf00      	nop
 800a08c:	08014c2d 	.word	0x08014c2d
 800a090:	08013b41 	.word	0x08013b41

0800a094 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800a094:	b580      	push	{r7, lr}
 800a096:	b084      	sub	sp, #16
 800a098:	af00      	add	r7, sp, #0
 800a09a:	6078      	str	r0, [r7, #4]
 800a09c:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800a09e:	4819      	ldr	r0, [pc, #100]	; (800a104 <tcpip_try_callback+0x70>)
 800a0a0:	f00a ff28 	bl	8014ef4 <sys_mbox_valid>
 800a0a4:	4603      	mov	r3, r0
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d106      	bne.n	800a0b8 <tcpip_try_callback+0x24>
 800a0aa:	4b17      	ldr	r3, [pc, #92]	; (800a108 <tcpip_try_callback+0x74>)
 800a0ac:	f240 125d 	movw	r2, #349	; 0x15d
 800a0b0:	4916      	ldr	r1, [pc, #88]	; (800a10c <tcpip_try_callback+0x78>)
 800a0b2:	4817      	ldr	r0, [pc, #92]	; (800a110 <tcpip_try_callback+0x7c>)
 800a0b4:	f00b f9e2 	bl	801547c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800a0b8:	2008      	movs	r0, #8
 800a0ba:	f000 fd41 	bl	800ab40 <memp_malloc>
 800a0be:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d102      	bne.n	800a0cc <tcpip_try_callback+0x38>
    return ERR_MEM;
 800a0c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a0ca:	e017      	b.n	800a0fc <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	2201      	movs	r2, #1
 800a0d0:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	687a      	ldr	r2, [r7, #4]
 800a0d6:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	683a      	ldr	r2, [r7, #0]
 800a0dc:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800a0de:	68f9      	ldr	r1, [r7, #12]
 800a0e0:	4808      	ldr	r0, [pc, #32]	; (800a104 <tcpip_try_callback+0x70>)
 800a0e2:	f00a fea5 	bl	8014e30 <sys_mbox_trypost>
 800a0e6:	4603      	mov	r3, r0
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d006      	beq.n	800a0fa <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800a0ec:	68f9      	ldr	r1, [r7, #12]
 800a0ee:	2008      	movs	r0, #8
 800a0f0:	f000 fd78 	bl	800abe4 <memp_free>
    return ERR_MEM;
 800a0f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a0f8:	e000      	b.n	800a0fc <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800a0fa:	2300      	movs	r3, #0
}
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	3710      	adds	r7, #16
 800a100:	46bd      	mov	sp, r7
 800a102:	bd80      	pop	{r7, pc}
 800a104:	20004a80 	.word	0x20004a80
 800a108:	08016e44 	.word	0x08016e44
 800a10c:	08016ebc 	.word	0x08016ebc
 800a110:	08016e94 	.word	0x08016e94

0800a114 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800a114:	b580      	push	{r7, lr}
 800a116:	b084      	sub	sp, #16
 800a118:	af00      	add	r7, sp, #0
 800a11a:	60f8      	str	r0, [r7, #12]
 800a11c:	60b9      	str	r1, [r7, #8]
 800a11e:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800a120:	4806      	ldr	r0, [pc, #24]	; (800a13c <tcpip_send_msg_wait_sem+0x28>)
 800a122:	f00a ffb5 	bl	8015090 <sys_mutex_lock>
  fn(apimsg);
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	68b8      	ldr	r0, [r7, #8]
 800a12a:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800a12c:	4803      	ldr	r0, [pc, #12]	; (800a13c <tcpip_send_msg_wait_sem+0x28>)
 800a12e:	f00a ffbe 	bl	80150ae <sys_mutex_unlock>
  return ERR_OK;
 800a132:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800a134:	4618      	mov	r0, r3
 800a136:	3710      	adds	r7, #16
 800a138:	46bd      	mov	sp, r7
 800a13a:	bd80      	pop	{r7, pc}
 800a13c:	2000868c 	.word	0x2000868c

0800a140 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800a140:	b580      	push	{r7, lr}
 800a142:	b084      	sub	sp, #16
 800a144:	af02      	add	r7, sp, #8
 800a146:	6078      	str	r0, [r7, #4]
 800a148:	6039      	str	r1, [r7, #0]
  lwip_init();
 800a14a:	f000 f871 	bl	800a230 <lwip_init>

  tcpip_init_done = initfunc;
 800a14e:	4a17      	ldr	r2, [pc, #92]	; (800a1ac <tcpip_init+0x6c>)
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800a154:	4a16      	ldr	r2, [pc, #88]	; (800a1b0 <tcpip_init+0x70>)
 800a156:	683b      	ldr	r3, [r7, #0]
 800a158:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800a15a:	2106      	movs	r1, #6
 800a15c:	4815      	ldr	r0, [pc, #84]	; (800a1b4 <tcpip_init+0x74>)
 800a15e:	f00a fe3b 	bl	8014dd8 <sys_mbox_new>
 800a162:	4603      	mov	r3, r0
 800a164:	2b00      	cmp	r3, #0
 800a166:	d006      	beq.n	800a176 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800a168:	4b13      	ldr	r3, [pc, #76]	; (800a1b8 <tcpip_init+0x78>)
 800a16a:	f240 2261 	movw	r2, #609	; 0x261
 800a16e:	4913      	ldr	r1, [pc, #76]	; (800a1bc <tcpip_init+0x7c>)
 800a170:	4813      	ldr	r0, [pc, #76]	; (800a1c0 <tcpip_init+0x80>)
 800a172:	f00b f983 	bl	801547c <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800a176:	4813      	ldr	r0, [pc, #76]	; (800a1c4 <tcpip_init+0x84>)
 800a178:	f00a ff74 	bl	8015064 <sys_mutex_new>
 800a17c:	4603      	mov	r3, r0
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d006      	beq.n	800a190 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800a182:	4b0d      	ldr	r3, [pc, #52]	; (800a1b8 <tcpip_init+0x78>)
 800a184:	f240 2265 	movw	r2, #613	; 0x265
 800a188:	490f      	ldr	r1, [pc, #60]	; (800a1c8 <tcpip_init+0x88>)
 800a18a:	480d      	ldr	r0, [pc, #52]	; (800a1c0 <tcpip_init+0x80>)
 800a18c:	f00b f976 	bl	801547c <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800a190:	2318      	movs	r3, #24
 800a192:	9300      	str	r3, [sp, #0]
 800a194:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a198:	2200      	movs	r2, #0
 800a19a:	490c      	ldr	r1, [pc, #48]	; (800a1cc <tcpip_init+0x8c>)
 800a19c:	480c      	ldr	r0, [pc, #48]	; (800a1d0 <tcpip_init+0x90>)
 800a19e:	f00a ff93 	bl	80150c8 <sys_thread_new>
}
 800a1a2:	bf00      	nop
 800a1a4:	3708      	adds	r7, #8
 800a1a6:	46bd      	mov	sp, r7
 800a1a8:	bd80      	pop	{r7, pc}
 800a1aa:	bf00      	nop
 800a1ac:	20004a78 	.word	0x20004a78
 800a1b0:	20004a7c 	.word	0x20004a7c
 800a1b4:	20004a80 	.word	0x20004a80
 800a1b8:	08016e44 	.word	0x08016e44
 800a1bc:	08016ecc 	.word	0x08016ecc
 800a1c0:	08016e94 	.word	0x08016e94
 800a1c4:	2000868c 	.word	0x2000868c
 800a1c8:	08016ef0 	.word	0x08016ef0
 800a1cc:	08009ed1 	.word	0x08009ed1
 800a1d0:	08016f14 	.word	0x08016f14

0800a1d4 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800a1d4:	b480      	push	{r7}
 800a1d6:	b083      	sub	sp, #12
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	4603      	mov	r3, r0
 800a1dc:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800a1de:	88fb      	ldrh	r3, [r7, #6]
 800a1e0:	021b      	lsls	r3, r3, #8
 800a1e2:	b21a      	sxth	r2, r3
 800a1e4:	88fb      	ldrh	r3, [r7, #6]
 800a1e6:	0a1b      	lsrs	r3, r3, #8
 800a1e8:	b29b      	uxth	r3, r3
 800a1ea:	b21b      	sxth	r3, r3
 800a1ec:	4313      	orrs	r3, r2
 800a1ee:	b21b      	sxth	r3, r3
 800a1f0:	b29b      	uxth	r3, r3
}
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	370c      	adds	r7, #12
 800a1f6:	46bd      	mov	sp, r7
 800a1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fc:	4770      	bx	lr

0800a1fe <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800a1fe:	b480      	push	{r7}
 800a200:	b083      	sub	sp, #12
 800a202:	af00      	add	r7, sp, #0
 800a204:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	061a      	lsls	r2, r3, #24
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	021b      	lsls	r3, r3, #8
 800a20e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a212:	431a      	orrs	r2, r3
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	0a1b      	lsrs	r3, r3, #8
 800a218:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a21c:	431a      	orrs	r2, r3
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	0e1b      	lsrs	r3, r3, #24
 800a222:	4313      	orrs	r3, r2
}
 800a224:	4618      	mov	r0, r3
 800a226:	370c      	adds	r7, #12
 800a228:	46bd      	mov	sp, r7
 800a22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22e:	4770      	bx	lr

0800a230 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800a230:	b580      	push	{r7, lr}
 800a232:	b082      	sub	sp, #8
 800a234:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800a236:	2300      	movs	r3, #0
 800a238:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800a23a:	f00a ff07 	bl	801504c <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800a23e:	f000 f8d5 	bl	800a3ec <mem_init>
  memp_init();
 800a242:	f000 fc31 	bl	800aaa8 <memp_init>
  pbuf_init();
  netif_init();
 800a246:	f000 fcf7 	bl	800ac38 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800a24a:	f008 f805 	bl	8012258 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800a24e:	f001 fe07 	bl	800be60 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800a252:	f007 ff47 	bl	80120e4 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800a256:	bf00      	nop
 800a258:	3708      	adds	r7, #8
 800a25a:	46bd      	mov	sp, r7
 800a25c:	bd80      	pop	{r7, pc}
	...

0800a260 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800a260:	b480      	push	{r7}
 800a262:	b083      	sub	sp, #12
 800a264:	af00      	add	r7, sp, #0
 800a266:	4603      	mov	r3, r0
 800a268:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800a26a:	4b05      	ldr	r3, [pc, #20]	; (800a280 <ptr_to_mem+0x20>)
 800a26c:	681a      	ldr	r2, [r3, #0]
 800a26e:	88fb      	ldrh	r3, [r7, #6]
 800a270:	4413      	add	r3, r2
}
 800a272:	4618      	mov	r0, r3
 800a274:	370c      	adds	r7, #12
 800a276:	46bd      	mov	sp, r7
 800a278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a27c:	4770      	bx	lr
 800a27e:	bf00      	nop
 800a280:	20004a84 	.word	0x20004a84

0800a284 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800a284:	b480      	push	{r7}
 800a286:	b083      	sub	sp, #12
 800a288:	af00      	add	r7, sp, #0
 800a28a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800a28c:	4b05      	ldr	r3, [pc, #20]	; (800a2a4 <mem_to_ptr+0x20>)
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	687a      	ldr	r2, [r7, #4]
 800a292:	1ad3      	subs	r3, r2, r3
 800a294:	b29b      	uxth	r3, r3
}
 800a296:	4618      	mov	r0, r3
 800a298:	370c      	adds	r7, #12
 800a29a:	46bd      	mov	sp, r7
 800a29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a0:	4770      	bx	lr
 800a2a2:	bf00      	nop
 800a2a4:	20004a84 	.word	0x20004a84

0800a2a8 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800a2a8:	b590      	push	{r4, r7, lr}
 800a2aa:	b085      	sub	sp, #20
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800a2b0:	4b45      	ldr	r3, [pc, #276]	; (800a3c8 <plug_holes+0x120>)
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	687a      	ldr	r2, [r7, #4]
 800a2b6:	429a      	cmp	r2, r3
 800a2b8:	d206      	bcs.n	800a2c8 <plug_holes+0x20>
 800a2ba:	4b44      	ldr	r3, [pc, #272]	; (800a3cc <plug_holes+0x124>)
 800a2bc:	f240 12df 	movw	r2, #479	; 0x1df
 800a2c0:	4943      	ldr	r1, [pc, #268]	; (800a3d0 <plug_holes+0x128>)
 800a2c2:	4844      	ldr	r0, [pc, #272]	; (800a3d4 <plug_holes+0x12c>)
 800a2c4:	f00b f8da 	bl	801547c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800a2c8:	4b43      	ldr	r3, [pc, #268]	; (800a3d8 <plug_holes+0x130>)
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	687a      	ldr	r2, [r7, #4]
 800a2ce:	429a      	cmp	r2, r3
 800a2d0:	d306      	bcc.n	800a2e0 <plug_holes+0x38>
 800a2d2:	4b3e      	ldr	r3, [pc, #248]	; (800a3cc <plug_holes+0x124>)
 800a2d4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800a2d8:	4940      	ldr	r1, [pc, #256]	; (800a3dc <plug_holes+0x134>)
 800a2da:	483e      	ldr	r0, [pc, #248]	; (800a3d4 <plug_holes+0x12c>)
 800a2dc:	f00b f8ce 	bl	801547c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	791b      	ldrb	r3, [r3, #4]
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d006      	beq.n	800a2f6 <plug_holes+0x4e>
 800a2e8:	4b38      	ldr	r3, [pc, #224]	; (800a3cc <plug_holes+0x124>)
 800a2ea:	f240 12e1 	movw	r2, #481	; 0x1e1
 800a2ee:	493c      	ldr	r1, [pc, #240]	; (800a3e0 <plug_holes+0x138>)
 800a2f0:	4838      	ldr	r0, [pc, #224]	; (800a3d4 <plug_holes+0x12c>)
 800a2f2:	f00b f8c3 	bl	801547c <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	881b      	ldrh	r3, [r3, #0]
 800a2fa:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a2fe:	d906      	bls.n	800a30e <plug_holes+0x66>
 800a300:	4b32      	ldr	r3, [pc, #200]	; (800a3cc <plug_holes+0x124>)
 800a302:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800a306:	4937      	ldr	r1, [pc, #220]	; (800a3e4 <plug_holes+0x13c>)
 800a308:	4832      	ldr	r0, [pc, #200]	; (800a3d4 <plug_holes+0x12c>)
 800a30a:	f00b f8b7 	bl	801547c <iprintf>

  nmem = ptr_to_mem(mem->next);
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	881b      	ldrh	r3, [r3, #0]
 800a312:	4618      	mov	r0, r3
 800a314:	f7ff ffa4 	bl	800a260 <ptr_to_mem>
 800a318:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800a31a:	687a      	ldr	r2, [r7, #4]
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	429a      	cmp	r2, r3
 800a320:	d024      	beq.n	800a36c <plug_holes+0xc4>
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	791b      	ldrb	r3, [r3, #4]
 800a326:	2b00      	cmp	r3, #0
 800a328:	d120      	bne.n	800a36c <plug_holes+0xc4>
 800a32a:	4b2b      	ldr	r3, [pc, #172]	; (800a3d8 <plug_holes+0x130>)
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	68fa      	ldr	r2, [r7, #12]
 800a330:	429a      	cmp	r2, r3
 800a332:	d01b      	beq.n	800a36c <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800a334:	4b2c      	ldr	r3, [pc, #176]	; (800a3e8 <plug_holes+0x140>)
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	68fa      	ldr	r2, [r7, #12]
 800a33a:	429a      	cmp	r2, r3
 800a33c:	d102      	bne.n	800a344 <plug_holes+0x9c>
      lfree = mem;
 800a33e:	4a2a      	ldr	r2, [pc, #168]	; (800a3e8 <plug_holes+0x140>)
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	881a      	ldrh	r2, [r3, #0]
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	881b      	ldrh	r3, [r3, #0]
 800a350:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a354:	d00a      	beq.n	800a36c <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	881b      	ldrh	r3, [r3, #0]
 800a35a:	4618      	mov	r0, r3
 800a35c:	f7ff ff80 	bl	800a260 <ptr_to_mem>
 800a360:	4604      	mov	r4, r0
 800a362:	6878      	ldr	r0, [r7, #4]
 800a364:	f7ff ff8e 	bl	800a284 <mem_to_ptr>
 800a368:	4603      	mov	r3, r0
 800a36a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	885b      	ldrh	r3, [r3, #2]
 800a370:	4618      	mov	r0, r3
 800a372:	f7ff ff75 	bl	800a260 <ptr_to_mem>
 800a376:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800a378:	68ba      	ldr	r2, [r7, #8]
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	429a      	cmp	r2, r3
 800a37e:	d01f      	beq.n	800a3c0 <plug_holes+0x118>
 800a380:	68bb      	ldr	r3, [r7, #8]
 800a382:	791b      	ldrb	r3, [r3, #4]
 800a384:	2b00      	cmp	r3, #0
 800a386:	d11b      	bne.n	800a3c0 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800a388:	4b17      	ldr	r3, [pc, #92]	; (800a3e8 <plug_holes+0x140>)
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	687a      	ldr	r2, [r7, #4]
 800a38e:	429a      	cmp	r2, r3
 800a390:	d102      	bne.n	800a398 <plug_holes+0xf0>
      lfree = pmem;
 800a392:	4a15      	ldr	r2, [pc, #84]	; (800a3e8 <plug_holes+0x140>)
 800a394:	68bb      	ldr	r3, [r7, #8]
 800a396:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	881a      	ldrh	r2, [r3, #0]
 800a39c:	68bb      	ldr	r3, [r7, #8]
 800a39e:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	881b      	ldrh	r3, [r3, #0]
 800a3a4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a3a8:	d00a      	beq.n	800a3c0 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	881b      	ldrh	r3, [r3, #0]
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	f7ff ff56 	bl	800a260 <ptr_to_mem>
 800a3b4:	4604      	mov	r4, r0
 800a3b6:	68b8      	ldr	r0, [r7, #8]
 800a3b8:	f7ff ff64 	bl	800a284 <mem_to_ptr>
 800a3bc:	4603      	mov	r3, r0
 800a3be:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800a3c0:	bf00      	nop
 800a3c2:	3714      	adds	r7, #20
 800a3c4:	46bd      	mov	sp, r7
 800a3c6:	bd90      	pop	{r4, r7, pc}
 800a3c8:	20004a84 	.word	0x20004a84
 800a3cc:	08016f24 	.word	0x08016f24
 800a3d0:	08016f54 	.word	0x08016f54
 800a3d4:	08016f6c 	.word	0x08016f6c
 800a3d8:	20004a88 	.word	0x20004a88
 800a3dc:	08016f94 	.word	0x08016f94
 800a3e0:	08016fb0 	.word	0x08016fb0
 800a3e4:	08016fcc 	.word	0x08016fcc
 800a3e8:	20004a90 	.word	0x20004a90

0800a3ec <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800a3ec:	b580      	push	{r7, lr}
 800a3ee:	b082      	sub	sp, #8
 800a3f0:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800a3f2:	4b1f      	ldr	r3, [pc, #124]	; (800a470 <mem_init+0x84>)
 800a3f4:	3303      	adds	r3, #3
 800a3f6:	f023 0303 	bic.w	r3, r3, #3
 800a3fa:	461a      	mov	r2, r3
 800a3fc:	4b1d      	ldr	r3, [pc, #116]	; (800a474 <mem_init+0x88>)
 800a3fe:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800a400:	4b1c      	ldr	r3, [pc, #112]	; (800a474 <mem_init+0x88>)
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800a40c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	2200      	movs	r2, #0
 800a412:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	2200      	movs	r2, #0
 800a418:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800a41a:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800a41e:	f7ff ff1f 	bl	800a260 <ptr_to_mem>
 800a422:	4603      	mov	r3, r0
 800a424:	4a14      	ldr	r2, [pc, #80]	; (800a478 <mem_init+0x8c>)
 800a426:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800a428:	4b13      	ldr	r3, [pc, #76]	; (800a478 <mem_init+0x8c>)
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	2201      	movs	r2, #1
 800a42e:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800a430:	4b11      	ldr	r3, [pc, #68]	; (800a478 <mem_init+0x8c>)
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800a438:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800a43a:	4b0f      	ldr	r3, [pc, #60]	; (800a478 <mem_init+0x8c>)
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800a442:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800a444:	4b0b      	ldr	r3, [pc, #44]	; (800a474 <mem_init+0x88>)
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	4a0c      	ldr	r2, [pc, #48]	; (800a47c <mem_init+0x90>)
 800a44a:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800a44c:	480c      	ldr	r0, [pc, #48]	; (800a480 <mem_init+0x94>)
 800a44e:	f00a fe09 	bl	8015064 <sys_mutex_new>
 800a452:	4603      	mov	r3, r0
 800a454:	2b00      	cmp	r3, #0
 800a456:	d006      	beq.n	800a466 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800a458:	4b0a      	ldr	r3, [pc, #40]	; (800a484 <mem_init+0x98>)
 800a45a:	f240 221f 	movw	r2, #543	; 0x21f
 800a45e:	490a      	ldr	r1, [pc, #40]	; (800a488 <mem_init+0x9c>)
 800a460:	480a      	ldr	r0, [pc, #40]	; (800a48c <mem_init+0xa0>)
 800a462:	f00b f80b 	bl	801547c <iprintf>
  }
}
 800a466:	bf00      	nop
 800a468:	3708      	adds	r7, #8
 800a46a:	46bd      	mov	sp, r7
 800a46c:	bd80      	pop	{r7, pc}
 800a46e:	bf00      	nop
 800a470:	200086a8 	.word	0x200086a8
 800a474:	20004a84 	.word	0x20004a84
 800a478:	20004a88 	.word	0x20004a88
 800a47c:	20004a90 	.word	0x20004a90
 800a480:	20004a8c 	.word	0x20004a8c
 800a484:	08016f24 	.word	0x08016f24
 800a488:	08016ff8 	.word	0x08016ff8
 800a48c:	08016f6c 	.word	0x08016f6c

0800a490 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800a490:	b580      	push	{r7, lr}
 800a492:	b086      	sub	sp, #24
 800a494:	af00      	add	r7, sp, #0
 800a496:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800a498:	6878      	ldr	r0, [r7, #4]
 800a49a:	f7ff fef3 	bl	800a284 <mem_to_ptr>
 800a49e:	4603      	mov	r3, r0
 800a4a0:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	881b      	ldrh	r3, [r3, #0]
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	f7ff feda 	bl	800a260 <ptr_to_mem>
 800a4ac:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	885b      	ldrh	r3, [r3, #2]
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	f7ff fed4 	bl	800a260 <ptr_to_mem>
 800a4b8:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	881b      	ldrh	r3, [r3, #0]
 800a4be:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a4c2:	d818      	bhi.n	800a4f6 <mem_link_valid+0x66>
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	885b      	ldrh	r3, [r3, #2]
 800a4c8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a4cc:	d813      	bhi.n	800a4f6 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800a4d2:	8afa      	ldrh	r2, [r7, #22]
 800a4d4:	429a      	cmp	r2, r3
 800a4d6:	d004      	beq.n	800a4e2 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	881b      	ldrh	r3, [r3, #0]
 800a4dc:	8afa      	ldrh	r2, [r7, #22]
 800a4de:	429a      	cmp	r2, r3
 800a4e0:	d109      	bne.n	800a4f6 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800a4e2:	4b08      	ldr	r3, [pc, #32]	; (800a504 <mem_link_valid+0x74>)
 800a4e4:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a4e6:	693a      	ldr	r2, [r7, #16]
 800a4e8:	429a      	cmp	r2, r3
 800a4ea:	d006      	beq.n	800a4fa <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800a4ec:	693b      	ldr	r3, [r7, #16]
 800a4ee:	885b      	ldrh	r3, [r3, #2]
 800a4f0:	8afa      	ldrh	r2, [r7, #22]
 800a4f2:	429a      	cmp	r2, r3
 800a4f4:	d001      	beq.n	800a4fa <mem_link_valid+0x6a>
    return 0;
 800a4f6:	2300      	movs	r3, #0
 800a4f8:	e000      	b.n	800a4fc <mem_link_valid+0x6c>
  }
  return 1;
 800a4fa:	2301      	movs	r3, #1
}
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	3718      	adds	r7, #24
 800a500:	46bd      	mov	sp, r7
 800a502:	bd80      	pop	{r7, pc}
 800a504:	20004a88 	.word	0x20004a88

0800a508 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800a508:	b580      	push	{r7, lr}
 800a50a:	b088      	sub	sp, #32
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	2b00      	cmp	r3, #0
 800a514:	d070      	beq.n	800a5f8 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	f003 0303 	and.w	r3, r3, #3
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d00d      	beq.n	800a53c <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800a520:	4b37      	ldr	r3, [pc, #220]	; (800a600 <mem_free+0xf8>)
 800a522:	f240 2273 	movw	r2, #627	; 0x273
 800a526:	4937      	ldr	r1, [pc, #220]	; (800a604 <mem_free+0xfc>)
 800a528:	4837      	ldr	r0, [pc, #220]	; (800a608 <mem_free+0x100>)
 800a52a:	f00a ffa7 	bl	801547c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a52e:	f00a fdeb 	bl	8015108 <sys_arch_protect>
 800a532:	60f8      	str	r0, [r7, #12]
 800a534:	68f8      	ldr	r0, [r7, #12]
 800a536:	f00a fdf5 	bl	8015124 <sys_arch_unprotect>
    return;
 800a53a:	e05e      	b.n	800a5fa <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	3b08      	subs	r3, #8
 800a540:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800a542:	4b32      	ldr	r3, [pc, #200]	; (800a60c <mem_free+0x104>)
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	69fa      	ldr	r2, [r7, #28]
 800a548:	429a      	cmp	r2, r3
 800a54a:	d306      	bcc.n	800a55a <mem_free+0x52>
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	f103 020c 	add.w	r2, r3, #12
 800a552:	4b2f      	ldr	r3, [pc, #188]	; (800a610 <mem_free+0x108>)
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	429a      	cmp	r2, r3
 800a558:	d90d      	bls.n	800a576 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800a55a:	4b29      	ldr	r3, [pc, #164]	; (800a600 <mem_free+0xf8>)
 800a55c:	f240 227f 	movw	r2, #639	; 0x27f
 800a560:	492c      	ldr	r1, [pc, #176]	; (800a614 <mem_free+0x10c>)
 800a562:	4829      	ldr	r0, [pc, #164]	; (800a608 <mem_free+0x100>)
 800a564:	f00a ff8a 	bl	801547c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a568:	f00a fdce 	bl	8015108 <sys_arch_protect>
 800a56c:	6138      	str	r0, [r7, #16]
 800a56e:	6938      	ldr	r0, [r7, #16]
 800a570:	f00a fdd8 	bl	8015124 <sys_arch_unprotect>
    return;
 800a574:	e041      	b.n	800a5fa <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800a576:	4828      	ldr	r0, [pc, #160]	; (800a618 <mem_free+0x110>)
 800a578:	f00a fd8a 	bl	8015090 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800a57c:	69fb      	ldr	r3, [r7, #28]
 800a57e:	791b      	ldrb	r3, [r3, #4]
 800a580:	2b00      	cmp	r3, #0
 800a582:	d110      	bne.n	800a5a6 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800a584:	4b1e      	ldr	r3, [pc, #120]	; (800a600 <mem_free+0xf8>)
 800a586:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800a58a:	4924      	ldr	r1, [pc, #144]	; (800a61c <mem_free+0x114>)
 800a58c:	481e      	ldr	r0, [pc, #120]	; (800a608 <mem_free+0x100>)
 800a58e:	f00a ff75 	bl	801547c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800a592:	4821      	ldr	r0, [pc, #132]	; (800a618 <mem_free+0x110>)
 800a594:	f00a fd8b 	bl	80150ae <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a598:	f00a fdb6 	bl	8015108 <sys_arch_protect>
 800a59c:	6178      	str	r0, [r7, #20]
 800a59e:	6978      	ldr	r0, [r7, #20]
 800a5a0:	f00a fdc0 	bl	8015124 <sys_arch_unprotect>
    return;
 800a5a4:	e029      	b.n	800a5fa <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800a5a6:	69f8      	ldr	r0, [r7, #28]
 800a5a8:	f7ff ff72 	bl	800a490 <mem_link_valid>
 800a5ac:	4603      	mov	r3, r0
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d110      	bne.n	800a5d4 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800a5b2:	4b13      	ldr	r3, [pc, #76]	; (800a600 <mem_free+0xf8>)
 800a5b4:	f240 2295 	movw	r2, #661	; 0x295
 800a5b8:	4919      	ldr	r1, [pc, #100]	; (800a620 <mem_free+0x118>)
 800a5ba:	4813      	ldr	r0, [pc, #76]	; (800a608 <mem_free+0x100>)
 800a5bc:	f00a ff5e 	bl	801547c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800a5c0:	4815      	ldr	r0, [pc, #84]	; (800a618 <mem_free+0x110>)
 800a5c2:	f00a fd74 	bl	80150ae <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a5c6:	f00a fd9f 	bl	8015108 <sys_arch_protect>
 800a5ca:	61b8      	str	r0, [r7, #24]
 800a5cc:	69b8      	ldr	r0, [r7, #24]
 800a5ce:	f00a fda9 	bl	8015124 <sys_arch_unprotect>
    return;
 800a5d2:	e012      	b.n	800a5fa <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800a5d4:	69fb      	ldr	r3, [r7, #28]
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800a5da:	4b12      	ldr	r3, [pc, #72]	; (800a624 <mem_free+0x11c>)
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	69fa      	ldr	r2, [r7, #28]
 800a5e0:	429a      	cmp	r2, r3
 800a5e2:	d202      	bcs.n	800a5ea <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800a5e4:	4a0f      	ldr	r2, [pc, #60]	; (800a624 <mem_free+0x11c>)
 800a5e6:	69fb      	ldr	r3, [r7, #28]
 800a5e8:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800a5ea:	69f8      	ldr	r0, [r7, #28]
 800a5ec:	f7ff fe5c 	bl	800a2a8 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800a5f0:	4809      	ldr	r0, [pc, #36]	; (800a618 <mem_free+0x110>)
 800a5f2:	f00a fd5c 	bl	80150ae <sys_mutex_unlock>
 800a5f6:	e000      	b.n	800a5fa <mem_free+0xf2>
    return;
 800a5f8:	bf00      	nop
}
 800a5fa:	3720      	adds	r7, #32
 800a5fc:	46bd      	mov	sp, r7
 800a5fe:	bd80      	pop	{r7, pc}
 800a600:	08016f24 	.word	0x08016f24
 800a604:	08017014 	.word	0x08017014
 800a608:	08016f6c 	.word	0x08016f6c
 800a60c:	20004a84 	.word	0x20004a84
 800a610:	20004a88 	.word	0x20004a88
 800a614:	08017038 	.word	0x08017038
 800a618:	20004a8c 	.word	0x20004a8c
 800a61c:	08017054 	.word	0x08017054
 800a620:	0801707c 	.word	0x0801707c
 800a624:	20004a90 	.word	0x20004a90

0800a628 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800a628:	b580      	push	{r7, lr}
 800a62a:	b088      	sub	sp, #32
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	6078      	str	r0, [r7, #4]
 800a630:	460b      	mov	r3, r1
 800a632:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800a634:	887b      	ldrh	r3, [r7, #2]
 800a636:	3303      	adds	r3, #3
 800a638:	b29b      	uxth	r3, r3
 800a63a:	f023 0303 	bic.w	r3, r3, #3
 800a63e:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800a640:	8bfb      	ldrh	r3, [r7, #30]
 800a642:	2b0b      	cmp	r3, #11
 800a644:	d801      	bhi.n	800a64a <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800a646:	230c      	movs	r3, #12
 800a648:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800a64a:	8bfb      	ldrh	r3, [r7, #30]
 800a64c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a650:	d803      	bhi.n	800a65a <mem_trim+0x32>
 800a652:	8bfa      	ldrh	r2, [r7, #30]
 800a654:	887b      	ldrh	r3, [r7, #2]
 800a656:	429a      	cmp	r2, r3
 800a658:	d201      	bcs.n	800a65e <mem_trim+0x36>
    return NULL;
 800a65a:	2300      	movs	r3, #0
 800a65c:	e0d8      	b.n	800a810 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800a65e:	4b6e      	ldr	r3, [pc, #440]	; (800a818 <mem_trim+0x1f0>)
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	687a      	ldr	r2, [r7, #4]
 800a664:	429a      	cmp	r2, r3
 800a666:	d304      	bcc.n	800a672 <mem_trim+0x4a>
 800a668:	4b6c      	ldr	r3, [pc, #432]	; (800a81c <mem_trim+0x1f4>)
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	687a      	ldr	r2, [r7, #4]
 800a66e:	429a      	cmp	r2, r3
 800a670:	d306      	bcc.n	800a680 <mem_trim+0x58>
 800a672:	4b6b      	ldr	r3, [pc, #428]	; (800a820 <mem_trim+0x1f8>)
 800a674:	f240 22d1 	movw	r2, #721	; 0x2d1
 800a678:	496a      	ldr	r1, [pc, #424]	; (800a824 <mem_trim+0x1fc>)
 800a67a:	486b      	ldr	r0, [pc, #428]	; (800a828 <mem_trim+0x200>)
 800a67c:	f00a fefe 	bl	801547c <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800a680:	4b65      	ldr	r3, [pc, #404]	; (800a818 <mem_trim+0x1f0>)
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	687a      	ldr	r2, [r7, #4]
 800a686:	429a      	cmp	r2, r3
 800a688:	d304      	bcc.n	800a694 <mem_trim+0x6c>
 800a68a:	4b64      	ldr	r3, [pc, #400]	; (800a81c <mem_trim+0x1f4>)
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	687a      	ldr	r2, [r7, #4]
 800a690:	429a      	cmp	r2, r3
 800a692:	d307      	bcc.n	800a6a4 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a694:	f00a fd38 	bl	8015108 <sys_arch_protect>
 800a698:	60b8      	str	r0, [r7, #8]
 800a69a:	68b8      	ldr	r0, [r7, #8]
 800a69c:	f00a fd42 	bl	8015124 <sys_arch_unprotect>
    return rmem;
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	e0b5      	b.n	800a810 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	3b08      	subs	r3, #8
 800a6a8:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800a6aa:	69b8      	ldr	r0, [r7, #24]
 800a6ac:	f7ff fdea 	bl	800a284 <mem_to_ptr>
 800a6b0:	4603      	mov	r3, r0
 800a6b2:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800a6b4:	69bb      	ldr	r3, [r7, #24]
 800a6b6:	881a      	ldrh	r2, [r3, #0]
 800a6b8:	8afb      	ldrh	r3, [r7, #22]
 800a6ba:	1ad3      	subs	r3, r2, r3
 800a6bc:	b29b      	uxth	r3, r3
 800a6be:	3b08      	subs	r3, #8
 800a6c0:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800a6c2:	8bfa      	ldrh	r2, [r7, #30]
 800a6c4:	8abb      	ldrh	r3, [r7, #20]
 800a6c6:	429a      	cmp	r2, r3
 800a6c8:	d906      	bls.n	800a6d8 <mem_trim+0xb0>
 800a6ca:	4b55      	ldr	r3, [pc, #340]	; (800a820 <mem_trim+0x1f8>)
 800a6cc:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800a6d0:	4956      	ldr	r1, [pc, #344]	; (800a82c <mem_trim+0x204>)
 800a6d2:	4855      	ldr	r0, [pc, #340]	; (800a828 <mem_trim+0x200>)
 800a6d4:	f00a fed2 	bl	801547c <iprintf>
  if (newsize > size) {
 800a6d8:	8bfa      	ldrh	r2, [r7, #30]
 800a6da:	8abb      	ldrh	r3, [r7, #20]
 800a6dc:	429a      	cmp	r2, r3
 800a6de:	d901      	bls.n	800a6e4 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	e095      	b.n	800a810 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800a6e4:	8bfa      	ldrh	r2, [r7, #30]
 800a6e6:	8abb      	ldrh	r3, [r7, #20]
 800a6e8:	429a      	cmp	r2, r3
 800a6ea:	d101      	bne.n	800a6f0 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	e08f      	b.n	800a810 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800a6f0:	484f      	ldr	r0, [pc, #316]	; (800a830 <mem_trim+0x208>)
 800a6f2:	f00a fccd 	bl	8015090 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800a6f6:	69bb      	ldr	r3, [r7, #24]
 800a6f8:	881b      	ldrh	r3, [r3, #0]
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	f7ff fdb0 	bl	800a260 <ptr_to_mem>
 800a700:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800a702:	693b      	ldr	r3, [r7, #16]
 800a704:	791b      	ldrb	r3, [r3, #4]
 800a706:	2b00      	cmp	r3, #0
 800a708:	d13f      	bne.n	800a78a <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800a70a:	69bb      	ldr	r3, [r7, #24]
 800a70c:	881b      	ldrh	r3, [r3, #0]
 800a70e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a712:	d106      	bne.n	800a722 <mem_trim+0xfa>
 800a714:	4b42      	ldr	r3, [pc, #264]	; (800a820 <mem_trim+0x1f8>)
 800a716:	f240 22f5 	movw	r2, #757	; 0x2f5
 800a71a:	4946      	ldr	r1, [pc, #280]	; (800a834 <mem_trim+0x20c>)
 800a71c:	4842      	ldr	r0, [pc, #264]	; (800a828 <mem_trim+0x200>)
 800a71e:	f00a fead 	bl	801547c <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800a722:	693b      	ldr	r3, [r7, #16]
 800a724:	881b      	ldrh	r3, [r3, #0]
 800a726:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800a728:	8afa      	ldrh	r2, [r7, #22]
 800a72a:	8bfb      	ldrh	r3, [r7, #30]
 800a72c:	4413      	add	r3, r2
 800a72e:	b29b      	uxth	r3, r3
 800a730:	3308      	adds	r3, #8
 800a732:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800a734:	4b40      	ldr	r3, [pc, #256]	; (800a838 <mem_trim+0x210>)
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	693a      	ldr	r2, [r7, #16]
 800a73a:	429a      	cmp	r2, r3
 800a73c:	d106      	bne.n	800a74c <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800a73e:	89fb      	ldrh	r3, [r7, #14]
 800a740:	4618      	mov	r0, r3
 800a742:	f7ff fd8d 	bl	800a260 <ptr_to_mem>
 800a746:	4603      	mov	r3, r0
 800a748:	4a3b      	ldr	r2, [pc, #236]	; (800a838 <mem_trim+0x210>)
 800a74a:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800a74c:	89fb      	ldrh	r3, [r7, #14]
 800a74e:	4618      	mov	r0, r3
 800a750:	f7ff fd86 	bl	800a260 <ptr_to_mem>
 800a754:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800a756:	693b      	ldr	r3, [r7, #16]
 800a758:	2200      	movs	r2, #0
 800a75a:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800a75c:	693b      	ldr	r3, [r7, #16]
 800a75e:	89ba      	ldrh	r2, [r7, #12]
 800a760:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800a762:	693b      	ldr	r3, [r7, #16]
 800a764:	8afa      	ldrh	r2, [r7, #22]
 800a766:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800a768:	69bb      	ldr	r3, [r7, #24]
 800a76a:	89fa      	ldrh	r2, [r7, #14]
 800a76c:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800a76e:	693b      	ldr	r3, [r7, #16]
 800a770:	881b      	ldrh	r3, [r3, #0]
 800a772:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a776:	d047      	beq.n	800a808 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800a778:	693b      	ldr	r3, [r7, #16]
 800a77a:	881b      	ldrh	r3, [r3, #0]
 800a77c:	4618      	mov	r0, r3
 800a77e:	f7ff fd6f 	bl	800a260 <ptr_to_mem>
 800a782:	4602      	mov	r2, r0
 800a784:	89fb      	ldrh	r3, [r7, #14]
 800a786:	8053      	strh	r3, [r2, #2]
 800a788:	e03e      	b.n	800a808 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800a78a:	8bfb      	ldrh	r3, [r7, #30]
 800a78c:	f103 0214 	add.w	r2, r3, #20
 800a790:	8abb      	ldrh	r3, [r7, #20]
 800a792:	429a      	cmp	r2, r3
 800a794:	d838      	bhi.n	800a808 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800a796:	8afa      	ldrh	r2, [r7, #22]
 800a798:	8bfb      	ldrh	r3, [r7, #30]
 800a79a:	4413      	add	r3, r2
 800a79c:	b29b      	uxth	r3, r3
 800a79e:	3308      	adds	r3, #8
 800a7a0:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800a7a2:	69bb      	ldr	r3, [r7, #24]
 800a7a4:	881b      	ldrh	r3, [r3, #0]
 800a7a6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a7aa:	d106      	bne.n	800a7ba <mem_trim+0x192>
 800a7ac:	4b1c      	ldr	r3, [pc, #112]	; (800a820 <mem_trim+0x1f8>)
 800a7ae:	f240 3216 	movw	r2, #790	; 0x316
 800a7b2:	4920      	ldr	r1, [pc, #128]	; (800a834 <mem_trim+0x20c>)
 800a7b4:	481c      	ldr	r0, [pc, #112]	; (800a828 <mem_trim+0x200>)
 800a7b6:	f00a fe61 	bl	801547c <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800a7ba:	89fb      	ldrh	r3, [r7, #14]
 800a7bc:	4618      	mov	r0, r3
 800a7be:	f7ff fd4f 	bl	800a260 <ptr_to_mem>
 800a7c2:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800a7c4:	4b1c      	ldr	r3, [pc, #112]	; (800a838 <mem_trim+0x210>)
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	693a      	ldr	r2, [r7, #16]
 800a7ca:	429a      	cmp	r2, r3
 800a7cc:	d202      	bcs.n	800a7d4 <mem_trim+0x1ac>
      lfree = mem2;
 800a7ce:	4a1a      	ldr	r2, [pc, #104]	; (800a838 <mem_trim+0x210>)
 800a7d0:	693b      	ldr	r3, [r7, #16]
 800a7d2:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800a7d4:	693b      	ldr	r3, [r7, #16]
 800a7d6:	2200      	movs	r2, #0
 800a7d8:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800a7da:	69bb      	ldr	r3, [r7, #24]
 800a7dc:	881a      	ldrh	r2, [r3, #0]
 800a7de:	693b      	ldr	r3, [r7, #16]
 800a7e0:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800a7e2:	693b      	ldr	r3, [r7, #16]
 800a7e4:	8afa      	ldrh	r2, [r7, #22]
 800a7e6:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800a7e8:	69bb      	ldr	r3, [r7, #24]
 800a7ea:	89fa      	ldrh	r2, [r7, #14]
 800a7ec:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800a7ee:	693b      	ldr	r3, [r7, #16]
 800a7f0:	881b      	ldrh	r3, [r3, #0]
 800a7f2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a7f6:	d007      	beq.n	800a808 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800a7f8:	693b      	ldr	r3, [r7, #16]
 800a7fa:	881b      	ldrh	r3, [r3, #0]
 800a7fc:	4618      	mov	r0, r3
 800a7fe:	f7ff fd2f 	bl	800a260 <ptr_to_mem>
 800a802:	4602      	mov	r2, r0
 800a804:	89fb      	ldrh	r3, [r7, #14]
 800a806:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800a808:	4809      	ldr	r0, [pc, #36]	; (800a830 <mem_trim+0x208>)
 800a80a:	f00a fc50 	bl	80150ae <sys_mutex_unlock>
  return rmem;
 800a80e:	687b      	ldr	r3, [r7, #4]
}
 800a810:	4618      	mov	r0, r3
 800a812:	3720      	adds	r7, #32
 800a814:	46bd      	mov	sp, r7
 800a816:	bd80      	pop	{r7, pc}
 800a818:	20004a84 	.word	0x20004a84
 800a81c:	20004a88 	.word	0x20004a88
 800a820:	08016f24 	.word	0x08016f24
 800a824:	080170b0 	.word	0x080170b0
 800a828:	08016f6c 	.word	0x08016f6c
 800a82c:	080170c8 	.word	0x080170c8
 800a830:	20004a8c 	.word	0x20004a8c
 800a834:	080170e8 	.word	0x080170e8
 800a838:	20004a90 	.word	0x20004a90

0800a83c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800a83c:	b580      	push	{r7, lr}
 800a83e:	b088      	sub	sp, #32
 800a840:	af00      	add	r7, sp, #0
 800a842:	4603      	mov	r3, r0
 800a844:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800a846:	88fb      	ldrh	r3, [r7, #6]
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d101      	bne.n	800a850 <mem_malloc+0x14>
    return NULL;
 800a84c:	2300      	movs	r3, #0
 800a84e:	e0e2      	b.n	800aa16 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800a850:	88fb      	ldrh	r3, [r7, #6]
 800a852:	3303      	adds	r3, #3
 800a854:	b29b      	uxth	r3, r3
 800a856:	f023 0303 	bic.w	r3, r3, #3
 800a85a:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800a85c:	8bbb      	ldrh	r3, [r7, #28]
 800a85e:	2b0b      	cmp	r3, #11
 800a860:	d801      	bhi.n	800a866 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800a862:	230c      	movs	r3, #12
 800a864:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800a866:	8bbb      	ldrh	r3, [r7, #28]
 800a868:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a86c:	d803      	bhi.n	800a876 <mem_malloc+0x3a>
 800a86e:	8bba      	ldrh	r2, [r7, #28]
 800a870:	88fb      	ldrh	r3, [r7, #6]
 800a872:	429a      	cmp	r2, r3
 800a874:	d201      	bcs.n	800a87a <mem_malloc+0x3e>
    return NULL;
 800a876:	2300      	movs	r3, #0
 800a878:	e0cd      	b.n	800aa16 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800a87a:	4869      	ldr	r0, [pc, #420]	; (800aa20 <mem_malloc+0x1e4>)
 800a87c:	f00a fc08 	bl	8015090 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800a880:	4b68      	ldr	r3, [pc, #416]	; (800aa24 <mem_malloc+0x1e8>)
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	4618      	mov	r0, r3
 800a886:	f7ff fcfd 	bl	800a284 <mem_to_ptr>
 800a88a:	4603      	mov	r3, r0
 800a88c:	83fb      	strh	r3, [r7, #30]
 800a88e:	e0b7      	b.n	800aa00 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800a890:	8bfb      	ldrh	r3, [r7, #30]
 800a892:	4618      	mov	r0, r3
 800a894:	f7ff fce4 	bl	800a260 <ptr_to_mem>
 800a898:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800a89a:	697b      	ldr	r3, [r7, #20]
 800a89c:	791b      	ldrb	r3, [r3, #4]
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	f040 80a7 	bne.w	800a9f2 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800a8a4:	697b      	ldr	r3, [r7, #20]
 800a8a6:	881b      	ldrh	r3, [r3, #0]
 800a8a8:	461a      	mov	r2, r3
 800a8aa:	8bfb      	ldrh	r3, [r7, #30]
 800a8ac:	1ad3      	subs	r3, r2, r3
 800a8ae:	f1a3 0208 	sub.w	r2, r3, #8
 800a8b2:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800a8b4:	429a      	cmp	r2, r3
 800a8b6:	f0c0 809c 	bcc.w	800a9f2 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800a8ba:	697b      	ldr	r3, [r7, #20]
 800a8bc:	881b      	ldrh	r3, [r3, #0]
 800a8be:	461a      	mov	r2, r3
 800a8c0:	8bfb      	ldrh	r3, [r7, #30]
 800a8c2:	1ad3      	subs	r3, r2, r3
 800a8c4:	f1a3 0208 	sub.w	r2, r3, #8
 800a8c8:	8bbb      	ldrh	r3, [r7, #28]
 800a8ca:	3314      	adds	r3, #20
 800a8cc:	429a      	cmp	r2, r3
 800a8ce:	d333      	bcc.n	800a938 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800a8d0:	8bfa      	ldrh	r2, [r7, #30]
 800a8d2:	8bbb      	ldrh	r3, [r7, #28]
 800a8d4:	4413      	add	r3, r2
 800a8d6:	b29b      	uxth	r3, r3
 800a8d8:	3308      	adds	r3, #8
 800a8da:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800a8dc:	8a7b      	ldrh	r3, [r7, #18]
 800a8de:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a8e2:	d106      	bne.n	800a8f2 <mem_malloc+0xb6>
 800a8e4:	4b50      	ldr	r3, [pc, #320]	; (800aa28 <mem_malloc+0x1ec>)
 800a8e6:	f240 3287 	movw	r2, #903	; 0x387
 800a8ea:	4950      	ldr	r1, [pc, #320]	; (800aa2c <mem_malloc+0x1f0>)
 800a8ec:	4850      	ldr	r0, [pc, #320]	; (800aa30 <mem_malloc+0x1f4>)
 800a8ee:	f00a fdc5 	bl	801547c <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800a8f2:	8a7b      	ldrh	r3, [r7, #18]
 800a8f4:	4618      	mov	r0, r3
 800a8f6:	f7ff fcb3 	bl	800a260 <ptr_to_mem>
 800a8fa:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	2200      	movs	r2, #0
 800a900:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800a902:	697b      	ldr	r3, [r7, #20]
 800a904:	881a      	ldrh	r2, [r3, #0]
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	8bfa      	ldrh	r2, [r7, #30]
 800a90e:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800a910:	697b      	ldr	r3, [r7, #20]
 800a912:	8a7a      	ldrh	r2, [r7, #18]
 800a914:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800a916:	697b      	ldr	r3, [r7, #20]
 800a918:	2201      	movs	r2, #1
 800a91a:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	881b      	ldrh	r3, [r3, #0]
 800a920:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a924:	d00b      	beq.n	800a93e <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	881b      	ldrh	r3, [r3, #0]
 800a92a:	4618      	mov	r0, r3
 800a92c:	f7ff fc98 	bl	800a260 <ptr_to_mem>
 800a930:	4602      	mov	r2, r0
 800a932:	8a7b      	ldrh	r3, [r7, #18]
 800a934:	8053      	strh	r3, [r2, #2]
 800a936:	e002      	b.n	800a93e <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800a938:	697b      	ldr	r3, [r7, #20]
 800a93a:	2201      	movs	r2, #1
 800a93c:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800a93e:	4b39      	ldr	r3, [pc, #228]	; (800aa24 <mem_malloc+0x1e8>)
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	697a      	ldr	r2, [r7, #20]
 800a944:	429a      	cmp	r2, r3
 800a946:	d127      	bne.n	800a998 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800a948:	4b36      	ldr	r3, [pc, #216]	; (800aa24 <mem_malloc+0x1e8>)
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800a94e:	e005      	b.n	800a95c <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800a950:	69bb      	ldr	r3, [r7, #24]
 800a952:	881b      	ldrh	r3, [r3, #0]
 800a954:	4618      	mov	r0, r3
 800a956:	f7ff fc83 	bl	800a260 <ptr_to_mem>
 800a95a:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800a95c:	69bb      	ldr	r3, [r7, #24]
 800a95e:	791b      	ldrb	r3, [r3, #4]
 800a960:	2b00      	cmp	r3, #0
 800a962:	d004      	beq.n	800a96e <mem_malloc+0x132>
 800a964:	4b33      	ldr	r3, [pc, #204]	; (800aa34 <mem_malloc+0x1f8>)
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	69ba      	ldr	r2, [r7, #24]
 800a96a:	429a      	cmp	r2, r3
 800a96c:	d1f0      	bne.n	800a950 <mem_malloc+0x114>
          }
          lfree = cur;
 800a96e:	4a2d      	ldr	r2, [pc, #180]	; (800aa24 <mem_malloc+0x1e8>)
 800a970:	69bb      	ldr	r3, [r7, #24]
 800a972:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800a974:	4b2b      	ldr	r3, [pc, #172]	; (800aa24 <mem_malloc+0x1e8>)
 800a976:	681a      	ldr	r2, [r3, #0]
 800a978:	4b2e      	ldr	r3, [pc, #184]	; (800aa34 <mem_malloc+0x1f8>)
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	429a      	cmp	r2, r3
 800a97e:	d00b      	beq.n	800a998 <mem_malloc+0x15c>
 800a980:	4b28      	ldr	r3, [pc, #160]	; (800aa24 <mem_malloc+0x1e8>)
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	791b      	ldrb	r3, [r3, #4]
 800a986:	2b00      	cmp	r3, #0
 800a988:	d006      	beq.n	800a998 <mem_malloc+0x15c>
 800a98a:	4b27      	ldr	r3, [pc, #156]	; (800aa28 <mem_malloc+0x1ec>)
 800a98c:	f240 32b5 	movw	r2, #949	; 0x3b5
 800a990:	4929      	ldr	r1, [pc, #164]	; (800aa38 <mem_malloc+0x1fc>)
 800a992:	4827      	ldr	r0, [pc, #156]	; (800aa30 <mem_malloc+0x1f4>)
 800a994:	f00a fd72 	bl	801547c <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800a998:	4821      	ldr	r0, [pc, #132]	; (800aa20 <mem_malloc+0x1e4>)
 800a99a:	f00a fb88 	bl	80150ae <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800a99e:	8bba      	ldrh	r2, [r7, #28]
 800a9a0:	697b      	ldr	r3, [r7, #20]
 800a9a2:	4413      	add	r3, r2
 800a9a4:	3308      	adds	r3, #8
 800a9a6:	4a23      	ldr	r2, [pc, #140]	; (800aa34 <mem_malloc+0x1f8>)
 800a9a8:	6812      	ldr	r2, [r2, #0]
 800a9aa:	4293      	cmp	r3, r2
 800a9ac:	d906      	bls.n	800a9bc <mem_malloc+0x180>
 800a9ae:	4b1e      	ldr	r3, [pc, #120]	; (800aa28 <mem_malloc+0x1ec>)
 800a9b0:	f240 32b9 	movw	r2, #953	; 0x3b9
 800a9b4:	4921      	ldr	r1, [pc, #132]	; (800aa3c <mem_malloc+0x200>)
 800a9b6:	481e      	ldr	r0, [pc, #120]	; (800aa30 <mem_malloc+0x1f4>)
 800a9b8:	f00a fd60 	bl	801547c <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800a9bc:	697b      	ldr	r3, [r7, #20]
 800a9be:	f003 0303 	and.w	r3, r3, #3
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d006      	beq.n	800a9d4 <mem_malloc+0x198>
 800a9c6:	4b18      	ldr	r3, [pc, #96]	; (800aa28 <mem_malloc+0x1ec>)
 800a9c8:	f240 32bb 	movw	r2, #955	; 0x3bb
 800a9cc:	491c      	ldr	r1, [pc, #112]	; (800aa40 <mem_malloc+0x204>)
 800a9ce:	4818      	ldr	r0, [pc, #96]	; (800aa30 <mem_malloc+0x1f4>)
 800a9d0:	f00a fd54 	bl	801547c <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800a9d4:	697b      	ldr	r3, [r7, #20]
 800a9d6:	f003 0303 	and.w	r3, r3, #3
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d006      	beq.n	800a9ec <mem_malloc+0x1b0>
 800a9de:	4b12      	ldr	r3, [pc, #72]	; (800aa28 <mem_malloc+0x1ec>)
 800a9e0:	f240 32bd 	movw	r2, #957	; 0x3bd
 800a9e4:	4917      	ldr	r1, [pc, #92]	; (800aa44 <mem_malloc+0x208>)
 800a9e6:	4812      	ldr	r0, [pc, #72]	; (800aa30 <mem_malloc+0x1f4>)
 800a9e8:	f00a fd48 	bl	801547c <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800a9ec:	697b      	ldr	r3, [r7, #20]
 800a9ee:	3308      	adds	r3, #8
 800a9f0:	e011      	b.n	800aa16 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800a9f2:	8bfb      	ldrh	r3, [r7, #30]
 800a9f4:	4618      	mov	r0, r3
 800a9f6:	f7ff fc33 	bl	800a260 <ptr_to_mem>
 800a9fa:	4603      	mov	r3, r0
 800a9fc:	881b      	ldrh	r3, [r3, #0]
 800a9fe:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800aa00:	8bfa      	ldrh	r2, [r7, #30]
 800aa02:	8bbb      	ldrh	r3, [r7, #28]
 800aa04:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800aa08:	429a      	cmp	r2, r3
 800aa0a:	f4ff af41 	bcc.w	800a890 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800aa0e:	4804      	ldr	r0, [pc, #16]	; (800aa20 <mem_malloc+0x1e4>)
 800aa10:	f00a fb4d 	bl	80150ae <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800aa14:	2300      	movs	r3, #0
}
 800aa16:	4618      	mov	r0, r3
 800aa18:	3720      	adds	r7, #32
 800aa1a:	46bd      	mov	sp, r7
 800aa1c:	bd80      	pop	{r7, pc}
 800aa1e:	bf00      	nop
 800aa20:	20004a8c 	.word	0x20004a8c
 800aa24:	20004a90 	.word	0x20004a90
 800aa28:	08016f24 	.word	0x08016f24
 800aa2c:	080170e8 	.word	0x080170e8
 800aa30:	08016f6c 	.word	0x08016f6c
 800aa34:	20004a88 	.word	0x20004a88
 800aa38:	080170fc 	.word	0x080170fc
 800aa3c:	08017118 	.word	0x08017118
 800aa40:	08017148 	.word	0x08017148
 800aa44:	08017178 	.word	0x08017178

0800aa48 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800aa48:	b480      	push	{r7}
 800aa4a:	b085      	sub	sp, #20
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	689b      	ldr	r3, [r3, #8]
 800aa54:	2200      	movs	r2, #0
 800aa56:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	685b      	ldr	r3, [r3, #4]
 800aa5c:	3303      	adds	r3, #3
 800aa5e:	f023 0303 	bic.w	r3, r3, #3
 800aa62:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800aa64:	2300      	movs	r3, #0
 800aa66:	60fb      	str	r3, [r7, #12]
 800aa68:	e011      	b.n	800aa8e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	689b      	ldr	r3, [r3, #8]
 800aa6e:	681a      	ldr	r2, [r3, #0]
 800aa70:	68bb      	ldr	r3, [r7, #8]
 800aa72:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	689b      	ldr	r3, [r3, #8]
 800aa78:	68ba      	ldr	r2, [r7, #8]
 800aa7a:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	881b      	ldrh	r3, [r3, #0]
 800aa80:	461a      	mov	r2, r3
 800aa82:	68bb      	ldr	r3, [r7, #8]
 800aa84:	4413      	add	r3, r2
 800aa86:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	3301      	adds	r3, #1
 800aa8c:	60fb      	str	r3, [r7, #12]
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	885b      	ldrh	r3, [r3, #2]
 800aa92:	461a      	mov	r2, r3
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	4293      	cmp	r3, r2
 800aa98:	dbe7      	blt.n	800aa6a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800aa9a:	bf00      	nop
 800aa9c:	bf00      	nop
 800aa9e:	3714      	adds	r7, #20
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa6:	4770      	bx	lr

0800aaa8 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800aaa8:	b580      	push	{r7, lr}
 800aaaa:	b082      	sub	sp, #8
 800aaac:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800aaae:	2300      	movs	r3, #0
 800aab0:	80fb      	strh	r3, [r7, #6]
 800aab2:	e009      	b.n	800aac8 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800aab4:	88fb      	ldrh	r3, [r7, #6]
 800aab6:	4a08      	ldr	r2, [pc, #32]	; (800aad8 <memp_init+0x30>)
 800aab8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aabc:	4618      	mov	r0, r3
 800aabe:	f7ff ffc3 	bl	800aa48 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800aac2:	88fb      	ldrh	r3, [r7, #6]
 800aac4:	3301      	adds	r3, #1
 800aac6:	80fb      	strh	r3, [r7, #6]
 800aac8:	88fb      	ldrh	r3, [r7, #6]
 800aaca:	2b0c      	cmp	r3, #12
 800aacc:	d9f2      	bls.n	800aab4 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800aace:	bf00      	nop
 800aad0:	bf00      	nop
 800aad2:	3708      	adds	r7, #8
 800aad4:	46bd      	mov	sp, r7
 800aad6:	bd80      	pop	{r7, pc}
 800aad8:	08019bcc 	.word	0x08019bcc

0800aadc <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800aadc:	b580      	push	{r7, lr}
 800aade:	b084      	sub	sp, #16
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800aae4:	f00a fb10 	bl	8015108 <sys_arch_protect>
 800aae8:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	689b      	ldr	r3, [r3, #8]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800aaf2:	68bb      	ldr	r3, [r7, #8]
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d015      	beq.n	800ab24 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	689b      	ldr	r3, [r3, #8]
 800aafc:	68ba      	ldr	r2, [r7, #8]
 800aafe:	6812      	ldr	r2, [r2, #0]
 800ab00:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800ab02:	68bb      	ldr	r3, [r7, #8]
 800ab04:	f003 0303 	and.w	r3, r3, #3
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d006      	beq.n	800ab1a <do_memp_malloc_pool+0x3e>
 800ab0c:	4b09      	ldr	r3, [pc, #36]	; (800ab34 <do_memp_malloc_pool+0x58>)
 800ab0e:	f44f 728c 	mov.w	r2, #280	; 0x118
 800ab12:	4909      	ldr	r1, [pc, #36]	; (800ab38 <do_memp_malloc_pool+0x5c>)
 800ab14:	4809      	ldr	r0, [pc, #36]	; (800ab3c <do_memp_malloc_pool+0x60>)
 800ab16:	f00a fcb1 	bl	801547c <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800ab1a:	68f8      	ldr	r0, [r7, #12]
 800ab1c:	f00a fb02 	bl	8015124 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800ab20:	68bb      	ldr	r3, [r7, #8]
 800ab22:	e003      	b.n	800ab2c <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800ab24:	68f8      	ldr	r0, [r7, #12]
 800ab26:	f00a fafd 	bl	8015124 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800ab2a:	2300      	movs	r3, #0
}
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	3710      	adds	r7, #16
 800ab30:	46bd      	mov	sp, r7
 800ab32:	bd80      	pop	{r7, pc}
 800ab34:	0801719c 	.word	0x0801719c
 800ab38:	080171cc 	.word	0x080171cc
 800ab3c:	080171f0 	.word	0x080171f0

0800ab40 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800ab40:	b580      	push	{r7, lr}
 800ab42:	b084      	sub	sp, #16
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	4603      	mov	r3, r0
 800ab48:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800ab4a:	79fb      	ldrb	r3, [r7, #7]
 800ab4c:	2b0c      	cmp	r3, #12
 800ab4e:	d908      	bls.n	800ab62 <memp_malloc+0x22>
 800ab50:	4b0a      	ldr	r3, [pc, #40]	; (800ab7c <memp_malloc+0x3c>)
 800ab52:	f240 1257 	movw	r2, #343	; 0x157
 800ab56:	490a      	ldr	r1, [pc, #40]	; (800ab80 <memp_malloc+0x40>)
 800ab58:	480a      	ldr	r0, [pc, #40]	; (800ab84 <memp_malloc+0x44>)
 800ab5a:	f00a fc8f 	bl	801547c <iprintf>
 800ab5e:	2300      	movs	r3, #0
 800ab60:	e008      	b.n	800ab74 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800ab62:	79fb      	ldrb	r3, [r7, #7]
 800ab64:	4a08      	ldr	r2, [pc, #32]	; (800ab88 <memp_malloc+0x48>)
 800ab66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	f7ff ffb6 	bl	800aadc <do_memp_malloc_pool>
 800ab70:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800ab72:	68fb      	ldr	r3, [r7, #12]
}
 800ab74:	4618      	mov	r0, r3
 800ab76:	3710      	adds	r7, #16
 800ab78:	46bd      	mov	sp, r7
 800ab7a:	bd80      	pop	{r7, pc}
 800ab7c:	0801719c 	.word	0x0801719c
 800ab80:	0801722c 	.word	0x0801722c
 800ab84:	080171f0 	.word	0x080171f0
 800ab88:	08019bcc 	.word	0x08019bcc

0800ab8c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	b084      	sub	sp, #16
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	6078      	str	r0, [r7, #4]
 800ab94:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800ab96:	683b      	ldr	r3, [r7, #0]
 800ab98:	f003 0303 	and.w	r3, r3, #3
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d006      	beq.n	800abae <do_memp_free_pool+0x22>
 800aba0:	4b0d      	ldr	r3, [pc, #52]	; (800abd8 <do_memp_free_pool+0x4c>)
 800aba2:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800aba6:	490d      	ldr	r1, [pc, #52]	; (800abdc <do_memp_free_pool+0x50>)
 800aba8:	480d      	ldr	r0, [pc, #52]	; (800abe0 <do_memp_free_pool+0x54>)
 800abaa:	f00a fc67 	bl	801547c <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800abae:	683b      	ldr	r3, [r7, #0]
 800abb0:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800abb2:	f00a faa9 	bl	8015108 <sys_arch_protect>
 800abb6:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	689b      	ldr	r3, [r3, #8]
 800abbc:	681a      	ldr	r2, [r3, #0]
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	689b      	ldr	r3, [r3, #8]
 800abc6:	68fa      	ldr	r2, [r7, #12]
 800abc8:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800abca:	68b8      	ldr	r0, [r7, #8]
 800abcc:	f00a faaa 	bl	8015124 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800abd0:	bf00      	nop
 800abd2:	3710      	adds	r7, #16
 800abd4:	46bd      	mov	sp, r7
 800abd6:	bd80      	pop	{r7, pc}
 800abd8:	0801719c 	.word	0x0801719c
 800abdc:	0801724c 	.word	0x0801724c
 800abe0:	080171f0 	.word	0x080171f0

0800abe4 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800abe4:	b580      	push	{r7, lr}
 800abe6:	b082      	sub	sp, #8
 800abe8:	af00      	add	r7, sp, #0
 800abea:	4603      	mov	r3, r0
 800abec:	6039      	str	r1, [r7, #0]
 800abee:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800abf0:	79fb      	ldrb	r3, [r7, #7]
 800abf2:	2b0c      	cmp	r3, #12
 800abf4:	d907      	bls.n	800ac06 <memp_free+0x22>
 800abf6:	4b0c      	ldr	r3, [pc, #48]	; (800ac28 <memp_free+0x44>)
 800abf8:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800abfc:	490b      	ldr	r1, [pc, #44]	; (800ac2c <memp_free+0x48>)
 800abfe:	480c      	ldr	r0, [pc, #48]	; (800ac30 <memp_free+0x4c>)
 800ac00:	f00a fc3c 	bl	801547c <iprintf>
 800ac04:	e00c      	b.n	800ac20 <memp_free+0x3c>

  if (mem == NULL) {
 800ac06:	683b      	ldr	r3, [r7, #0]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d008      	beq.n	800ac1e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800ac0c:	79fb      	ldrb	r3, [r7, #7]
 800ac0e:	4a09      	ldr	r2, [pc, #36]	; (800ac34 <memp_free+0x50>)
 800ac10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ac14:	6839      	ldr	r1, [r7, #0]
 800ac16:	4618      	mov	r0, r3
 800ac18:	f7ff ffb8 	bl	800ab8c <do_memp_free_pool>
 800ac1c:	e000      	b.n	800ac20 <memp_free+0x3c>
    return;
 800ac1e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800ac20:	3708      	adds	r7, #8
 800ac22:	46bd      	mov	sp, r7
 800ac24:	bd80      	pop	{r7, pc}
 800ac26:	bf00      	nop
 800ac28:	0801719c 	.word	0x0801719c
 800ac2c:	0801726c 	.word	0x0801726c
 800ac30:	080171f0 	.word	0x080171f0
 800ac34:	08019bcc 	.word	0x08019bcc

0800ac38 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800ac38:	b480      	push	{r7}
 800ac3a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800ac3c:	bf00      	nop
 800ac3e:	46bd      	mov	sp, r7
 800ac40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac44:	4770      	bx	lr
	...

0800ac48 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800ac48:	b580      	push	{r7, lr}
 800ac4a:	b086      	sub	sp, #24
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	60f8      	str	r0, [r7, #12]
 800ac50:	60b9      	str	r1, [r7, #8]
 800ac52:	607a      	str	r2, [r7, #4]
 800ac54:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d108      	bne.n	800ac6e <netif_add+0x26>
 800ac5c:	4b57      	ldr	r3, [pc, #348]	; (800adbc <netif_add+0x174>)
 800ac5e:	f240 1227 	movw	r2, #295	; 0x127
 800ac62:	4957      	ldr	r1, [pc, #348]	; (800adc0 <netif_add+0x178>)
 800ac64:	4857      	ldr	r0, [pc, #348]	; (800adc4 <netif_add+0x17c>)
 800ac66:	f00a fc09 	bl	801547c <iprintf>
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	e0a2      	b.n	800adb4 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800ac6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d108      	bne.n	800ac86 <netif_add+0x3e>
 800ac74:	4b51      	ldr	r3, [pc, #324]	; (800adbc <netif_add+0x174>)
 800ac76:	f44f 7294 	mov.w	r2, #296	; 0x128
 800ac7a:	4953      	ldr	r1, [pc, #332]	; (800adc8 <netif_add+0x180>)
 800ac7c:	4851      	ldr	r0, [pc, #324]	; (800adc4 <netif_add+0x17c>)
 800ac7e:	f00a fbfd 	bl	801547c <iprintf>
 800ac82:	2300      	movs	r3, #0
 800ac84:	e096      	b.n	800adb4 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800ac86:	68bb      	ldr	r3, [r7, #8]
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d101      	bne.n	800ac90 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800ac8c:	4b4f      	ldr	r3, [pc, #316]	; (800adcc <netif_add+0x184>)
 800ac8e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d101      	bne.n	800ac9a <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800ac96:	4b4d      	ldr	r3, [pc, #308]	; (800adcc <netif_add+0x184>)
 800ac98:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800ac9a:	683b      	ldr	r3, [r7, #0]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d101      	bne.n	800aca4 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800aca0:	4b4a      	ldr	r3, [pc, #296]	; (800adcc <netif_add+0x184>)
 800aca2:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	2200      	movs	r2, #0
 800aca8:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	2200      	movs	r2, #0
 800acae:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	2200      	movs	r2, #0
 800acb4:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	4a45      	ldr	r2, [pc, #276]	; (800add0 <netif_add+0x188>)
 800acba:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	2200      	movs	r2, #0
 800acc0:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	2200      	movs	r2, #0
 800acc6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	2200      	movs	r2, #0
 800acce:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	6a3a      	ldr	r2, [r7, #32]
 800acd4:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800acd6:	4b3f      	ldr	r3, [pc, #252]	; (800add4 <netif_add+0x18c>)
 800acd8:	781a      	ldrb	r2, [r3, #0]
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ace4:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800ace6:	683b      	ldr	r3, [r7, #0]
 800ace8:	687a      	ldr	r2, [r7, #4]
 800acea:	68b9      	ldr	r1, [r7, #8]
 800acec:	68f8      	ldr	r0, [r7, #12]
 800acee:	f000 f913 	bl	800af18 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800acf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acf4:	68f8      	ldr	r0, [r7, #12]
 800acf6:	4798      	blx	r3
 800acf8:	4603      	mov	r3, r0
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d001      	beq.n	800ad02 <netif_add+0xba>
    return NULL;
 800acfe:	2300      	movs	r3, #0
 800ad00:	e058      	b.n	800adb4 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ad08:	2bff      	cmp	r3, #255	; 0xff
 800ad0a:	d103      	bne.n	800ad14 <netif_add+0xcc>
        netif->num = 0;
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	2200      	movs	r2, #0
 800ad10:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800ad14:	2300      	movs	r3, #0
 800ad16:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800ad18:	4b2f      	ldr	r3, [pc, #188]	; (800add8 <netif_add+0x190>)
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	617b      	str	r3, [r7, #20]
 800ad1e:	e02b      	b.n	800ad78 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800ad20:	697a      	ldr	r2, [r7, #20]
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	429a      	cmp	r2, r3
 800ad26:	d106      	bne.n	800ad36 <netif_add+0xee>
 800ad28:	4b24      	ldr	r3, [pc, #144]	; (800adbc <netif_add+0x174>)
 800ad2a:	f240 128b 	movw	r2, #395	; 0x18b
 800ad2e:	492b      	ldr	r1, [pc, #172]	; (800addc <netif_add+0x194>)
 800ad30:	4824      	ldr	r0, [pc, #144]	; (800adc4 <netif_add+0x17c>)
 800ad32:	f00a fba3 	bl	801547c <iprintf>
        num_netifs++;
 800ad36:	693b      	ldr	r3, [r7, #16]
 800ad38:	3301      	adds	r3, #1
 800ad3a:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800ad3c:	693b      	ldr	r3, [r7, #16]
 800ad3e:	2bff      	cmp	r3, #255	; 0xff
 800ad40:	dd06      	ble.n	800ad50 <netif_add+0x108>
 800ad42:	4b1e      	ldr	r3, [pc, #120]	; (800adbc <netif_add+0x174>)
 800ad44:	f240 128d 	movw	r2, #397	; 0x18d
 800ad48:	4925      	ldr	r1, [pc, #148]	; (800ade0 <netif_add+0x198>)
 800ad4a:	481e      	ldr	r0, [pc, #120]	; (800adc4 <netif_add+0x17c>)
 800ad4c:	f00a fb96 	bl	801547c <iprintf>
        if (netif2->num == netif->num) {
 800ad50:	697b      	ldr	r3, [r7, #20]
 800ad52:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ad5c:	429a      	cmp	r2, r3
 800ad5e:	d108      	bne.n	800ad72 <netif_add+0x12a>
          netif->num++;
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ad66:	3301      	adds	r3, #1
 800ad68:	b2da      	uxtb	r2, r3
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800ad70:	e005      	b.n	800ad7e <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800ad72:	697b      	ldr	r3, [r7, #20]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	617b      	str	r3, [r7, #20]
 800ad78:	697b      	ldr	r3, [r7, #20]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d1d0      	bne.n	800ad20 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800ad7e:	697b      	ldr	r3, [r7, #20]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d1be      	bne.n	800ad02 <netif_add+0xba>
  }
  if (netif->num == 254) {
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ad8a:	2bfe      	cmp	r3, #254	; 0xfe
 800ad8c:	d103      	bne.n	800ad96 <netif_add+0x14e>
    netif_num = 0;
 800ad8e:	4b11      	ldr	r3, [pc, #68]	; (800add4 <netif_add+0x18c>)
 800ad90:	2200      	movs	r2, #0
 800ad92:	701a      	strb	r2, [r3, #0]
 800ad94:	e006      	b.n	800ada4 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ad9c:	3301      	adds	r3, #1
 800ad9e:	b2da      	uxtb	r2, r3
 800ada0:	4b0c      	ldr	r3, [pc, #48]	; (800add4 <netif_add+0x18c>)
 800ada2:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800ada4:	4b0c      	ldr	r3, [pc, #48]	; (800add8 <netif_add+0x190>)
 800ada6:	681a      	ldr	r2, [r3, #0]
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800adac:	4a0a      	ldr	r2, [pc, #40]	; (800add8 <netif_add+0x190>)
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800adb2:	68fb      	ldr	r3, [r7, #12]
}
 800adb4:	4618      	mov	r0, r3
 800adb6:	3718      	adds	r7, #24
 800adb8:	46bd      	mov	sp, r7
 800adba:	bd80      	pop	{r7, pc}
 800adbc:	08017288 	.word	0x08017288
 800adc0:	0801731c 	.word	0x0801731c
 800adc4:	080172d8 	.word	0x080172d8
 800adc8:	08017338 	.word	0x08017338
 800adcc:	08019c40 	.word	0x08019c40
 800add0:	0800b1f3 	.word	0x0800b1f3
 800add4:	20004ac8 	.word	0x20004ac8
 800add8:	2000bd94 	.word	0x2000bd94
 800addc:	0801735c 	.word	0x0801735c
 800ade0:	08017370 	.word	0x08017370

0800ade4 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800ade4:	b580      	push	{r7, lr}
 800ade6:	b082      	sub	sp, #8
 800ade8:	af00      	add	r7, sp, #0
 800adea:	6078      	str	r0, [r7, #4]
 800adec:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800adee:	6839      	ldr	r1, [r7, #0]
 800adf0:	6878      	ldr	r0, [r7, #4]
 800adf2:	f002 fe4f 	bl	800da94 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800adf6:	6839      	ldr	r1, [r7, #0]
 800adf8:	6878      	ldr	r0, [r7, #4]
 800adfa:	f007 fcfd 	bl	80127f8 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800adfe:	bf00      	nop
 800ae00:	3708      	adds	r7, #8
 800ae02:	46bd      	mov	sp, r7
 800ae04:	bd80      	pop	{r7, pc}
	...

0800ae08 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800ae08:	b580      	push	{r7, lr}
 800ae0a:	b086      	sub	sp, #24
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	60f8      	str	r0, [r7, #12]
 800ae10:	60b9      	str	r1, [r7, #8]
 800ae12:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800ae14:	68bb      	ldr	r3, [r7, #8]
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d106      	bne.n	800ae28 <netif_do_set_ipaddr+0x20>
 800ae1a:	4b1d      	ldr	r3, [pc, #116]	; (800ae90 <netif_do_set_ipaddr+0x88>)
 800ae1c:	f240 12cb 	movw	r2, #459	; 0x1cb
 800ae20:	491c      	ldr	r1, [pc, #112]	; (800ae94 <netif_do_set_ipaddr+0x8c>)
 800ae22:	481d      	ldr	r0, [pc, #116]	; (800ae98 <netif_do_set_ipaddr+0x90>)
 800ae24:	f00a fb2a 	bl	801547c <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d106      	bne.n	800ae3c <netif_do_set_ipaddr+0x34>
 800ae2e:	4b18      	ldr	r3, [pc, #96]	; (800ae90 <netif_do_set_ipaddr+0x88>)
 800ae30:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800ae34:	4917      	ldr	r1, [pc, #92]	; (800ae94 <netif_do_set_ipaddr+0x8c>)
 800ae36:	4818      	ldr	r0, [pc, #96]	; (800ae98 <netif_do_set_ipaddr+0x90>)
 800ae38:	f00a fb20 	bl	801547c <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800ae3c:	68bb      	ldr	r3, [r7, #8]
 800ae3e:	681a      	ldr	r2, [r3, #0]
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	3304      	adds	r3, #4
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	429a      	cmp	r2, r3
 800ae48:	d01c      	beq.n	800ae84 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800ae4a:	68bb      	ldr	r3, [r7, #8]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	3304      	adds	r3, #4
 800ae54:	681a      	ldr	r2, [r3, #0]
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800ae5a:	f107 0314 	add.w	r3, r7, #20
 800ae5e:	4619      	mov	r1, r3
 800ae60:	6878      	ldr	r0, [r7, #4]
 800ae62:	f7ff ffbf 	bl	800ade4 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800ae66:	68bb      	ldr	r3, [r7, #8]
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d002      	beq.n	800ae72 <netif_do_set_ipaddr+0x6a>
 800ae6c:	68bb      	ldr	r3, [r7, #8]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	e000      	b.n	800ae74 <netif_do_set_ipaddr+0x6c>
 800ae72:	2300      	movs	r3, #0
 800ae74:	68fa      	ldr	r2, [r7, #12]
 800ae76:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800ae78:	2101      	movs	r1, #1
 800ae7a:	68f8      	ldr	r0, [r7, #12]
 800ae7c:	f000 f8d2 	bl	800b024 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800ae80:	2301      	movs	r3, #1
 800ae82:	e000      	b.n	800ae86 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800ae84:	2300      	movs	r3, #0
}
 800ae86:	4618      	mov	r0, r3
 800ae88:	3718      	adds	r7, #24
 800ae8a:	46bd      	mov	sp, r7
 800ae8c:	bd80      	pop	{r7, pc}
 800ae8e:	bf00      	nop
 800ae90:	08017288 	.word	0x08017288
 800ae94:	080173a0 	.word	0x080173a0
 800ae98:	080172d8 	.word	0x080172d8

0800ae9c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800ae9c:	b480      	push	{r7}
 800ae9e:	b085      	sub	sp, #20
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	60f8      	str	r0, [r7, #12]
 800aea4:	60b9      	str	r1, [r7, #8]
 800aea6:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800aea8:	68bb      	ldr	r3, [r7, #8]
 800aeaa:	681a      	ldr	r2, [r3, #0]
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	3308      	adds	r3, #8
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	429a      	cmp	r2, r3
 800aeb4:	d00a      	beq.n	800aecc <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800aeb6:	68bb      	ldr	r3, [r7, #8]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d002      	beq.n	800aec2 <netif_do_set_netmask+0x26>
 800aebc:	68bb      	ldr	r3, [r7, #8]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	e000      	b.n	800aec4 <netif_do_set_netmask+0x28>
 800aec2:	2300      	movs	r3, #0
 800aec4:	68fa      	ldr	r2, [r7, #12]
 800aec6:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800aec8:	2301      	movs	r3, #1
 800aeca:	e000      	b.n	800aece <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800aecc:	2300      	movs	r3, #0
}
 800aece:	4618      	mov	r0, r3
 800aed0:	3714      	adds	r7, #20
 800aed2:	46bd      	mov	sp, r7
 800aed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed8:	4770      	bx	lr

0800aeda <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800aeda:	b480      	push	{r7}
 800aedc:	b085      	sub	sp, #20
 800aede:	af00      	add	r7, sp, #0
 800aee0:	60f8      	str	r0, [r7, #12]
 800aee2:	60b9      	str	r1, [r7, #8]
 800aee4:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800aee6:	68bb      	ldr	r3, [r7, #8]
 800aee8:	681a      	ldr	r2, [r3, #0]
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	330c      	adds	r3, #12
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	429a      	cmp	r2, r3
 800aef2:	d00a      	beq.n	800af0a <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800aef4:	68bb      	ldr	r3, [r7, #8]
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d002      	beq.n	800af00 <netif_do_set_gw+0x26>
 800aefa:	68bb      	ldr	r3, [r7, #8]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	e000      	b.n	800af02 <netif_do_set_gw+0x28>
 800af00:	2300      	movs	r3, #0
 800af02:	68fa      	ldr	r2, [r7, #12]
 800af04:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800af06:	2301      	movs	r3, #1
 800af08:	e000      	b.n	800af0c <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800af0a:	2300      	movs	r3, #0
}
 800af0c:	4618      	mov	r0, r3
 800af0e:	3714      	adds	r7, #20
 800af10:	46bd      	mov	sp, r7
 800af12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af16:	4770      	bx	lr

0800af18 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800af18:	b580      	push	{r7, lr}
 800af1a:	b088      	sub	sp, #32
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	60f8      	str	r0, [r7, #12]
 800af20:	60b9      	str	r1, [r7, #8]
 800af22:	607a      	str	r2, [r7, #4]
 800af24:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800af26:	2300      	movs	r3, #0
 800af28:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800af2a:	2300      	movs	r3, #0
 800af2c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800af2e:	68bb      	ldr	r3, [r7, #8]
 800af30:	2b00      	cmp	r3, #0
 800af32:	d101      	bne.n	800af38 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800af34:	4b1c      	ldr	r3, [pc, #112]	; (800afa8 <netif_set_addr+0x90>)
 800af36:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d101      	bne.n	800af42 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800af3e:	4b1a      	ldr	r3, [pc, #104]	; (800afa8 <netif_set_addr+0x90>)
 800af40:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800af42:	683b      	ldr	r3, [r7, #0]
 800af44:	2b00      	cmp	r3, #0
 800af46:	d101      	bne.n	800af4c <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800af48:	4b17      	ldr	r3, [pc, #92]	; (800afa8 <netif_set_addr+0x90>)
 800af4a:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800af4c:	68bb      	ldr	r3, [r7, #8]
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d003      	beq.n	800af5a <netif_set_addr+0x42>
 800af52:	68bb      	ldr	r3, [r7, #8]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	2b00      	cmp	r3, #0
 800af58:	d101      	bne.n	800af5e <netif_set_addr+0x46>
 800af5a:	2301      	movs	r3, #1
 800af5c:	e000      	b.n	800af60 <netif_set_addr+0x48>
 800af5e:	2300      	movs	r3, #0
 800af60:	617b      	str	r3, [r7, #20]
  if (remove) {
 800af62:	697b      	ldr	r3, [r7, #20]
 800af64:	2b00      	cmp	r3, #0
 800af66:	d006      	beq.n	800af76 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800af68:	f107 0310 	add.w	r3, r7, #16
 800af6c:	461a      	mov	r2, r3
 800af6e:	68b9      	ldr	r1, [r7, #8]
 800af70:	68f8      	ldr	r0, [r7, #12]
 800af72:	f7ff ff49 	bl	800ae08 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800af76:	69fa      	ldr	r2, [r7, #28]
 800af78:	6879      	ldr	r1, [r7, #4]
 800af7a:	68f8      	ldr	r0, [r7, #12]
 800af7c:	f7ff ff8e 	bl	800ae9c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800af80:	69ba      	ldr	r2, [r7, #24]
 800af82:	6839      	ldr	r1, [r7, #0]
 800af84:	68f8      	ldr	r0, [r7, #12]
 800af86:	f7ff ffa8 	bl	800aeda <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800af8a:	697b      	ldr	r3, [r7, #20]
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d106      	bne.n	800af9e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800af90:	f107 0310 	add.w	r3, r7, #16
 800af94:	461a      	mov	r2, r3
 800af96:	68b9      	ldr	r1, [r7, #8]
 800af98:	68f8      	ldr	r0, [r7, #12]
 800af9a:	f7ff ff35 	bl	800ae08 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800af9e:	bf00      	nop
 800afa0:	3720      	adds	r7, #32
 800afa2:	46bd      	mov	sp, r7
 800afa4:	bd80      	pop	{r7, pc}
 800afa6:	bf00      	nop
 800afa8:	08019c40 	.word	0x08019c40

0800afac <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800afac:	b480      	push	{r7}
 800afae:	b083      	sub	sp, #12
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800afb4:	4a04      	ldr	r2, [pc, #16]	; (800afc8 <netif_set_default+0x1c>)
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800afba:	bf00      	nop
 800afbc:	370c      	adds	r7, #12
 800afbe:	46bd      	mov	sp, r7
 800afc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc4:	4770      	bx	lr
 800afc6:	bf00      	nop
 800afc8:	2000bd98 	.word	0x2000bd98

0800afcc <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800afcc:	b580      	push	{r7, lr}
 800afce:	b082      	sub	sp, #8
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d107      	bne.n	800afea <netif_set_up+0x1e>
 800afda:	4b0f      	ldr	r3, [pc, #60]	; (800b018 <netif_set_up+0x4c>)
 800afdc:	f44f 7254 	mov.w	r2, #848	; 0x350
 800afe0:	490e      	ldr	r1, [pc, #56]	; (800b01c <netif_set_up+0x50>)
 800afe2:	480f      	ldr	r0, [pc, #60]	; (800b020 <netif_set_up+0x54>)
 800afe4:	f00a fa4a 	bl	801547c <iprintf>
 800afe8:	e013      	b.n	800b012 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800aff0:	f003 0301 	and.w	r3, r3, #1
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d10c      	bne.n	800b012 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800affe:	f043 0301 	orr.w	r3, r3, #1
 800b002:	b2da      	uxtb	r2, r3
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800b00a:	2103      	movs	r1, #3
 800b00c:	6878      	ldr	r0, [r7, #4]
 800b00e:	f000 f809 	bl	800b024 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800b012:	3708      	adds	r7, #8
 800b014:	46bd      	mov	sp, r7
 800b016:	bd80      	pop	{r7, pc}
 800b018:	08017288 	.word	0x08017288
 800b01c:	08017410 	.word	0x08017410
 800b020:	080172d8 	.word	0x080172d8

0800b024 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800b024:	b580      	push	{r7, lr}
 800b026:	b082      	sub	sp, #8
 800b028:	af00      	add	r7, sp, #0
 800b02a:	6078      	str	r0, [r7, #4]
 800b02c:	460b      	mov	r3, r1
 800b02e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	2b00      	cmp	r3, #0
 800b034:	d106      	bne.n	800b044 <netif_issue_reports+0x20>
 800b036:	4b18      	ldr	r3, [pc, #96]	; (800b098 <netif_issue_reports+0x74>)
 800b038:	f240 326d 	movw	r2, #877	; 0x36d
 800b03c:	4917      	ldr	r1, [pc, #92]	; (800b09c <netif_issue_reports+0x78>)
 800b03e:	4818      	ldr	r0, [pc, #96]	; (800b0a0 <netif_issue_reports+0x7c>)
 800b040:	f00a fa1c 	bl	801547c <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b04a:	f003 0304 	and.w	r3, r3, #4
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d01e      	beq.n	800b090 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b058:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d017      	beq.n	800b090 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800b060:	78fb      	ldrb	r3, [r7, #3]
 800b062:	f003 0301 	and.w	r3, r3, #1
 800b066:	2b00      	cmp	r3, #0
 800b068:	d013      	beq.n	800b092 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	3304      	adds	r3, #4
 800b06e:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800b070:	2b00      	cmp	r3, #0
 800b072:	d00e      	beq.n	800b092 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b07a:	f003 0308 	and.w	r3, r3, #8
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d007      	beq.n	800b092 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	3304      	adds	r3, #4
 800b086:	4619      	mov	r1, r3
 800b088:	6878      	ldr	r0, [r7, #4]
 800b08a:	f008 fb1f 	bl	80136cc <etharp_request>
 800b08e:	e000      	b.n	800b092 <netif_issue_reports+0x6e>
    return;
 800b090:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800b092:	3708      	adds	r7, #8
 800b094:	46bd      	mov	sp, r7
 800b096:	bd80      	pop	{r7, pc}
 800b098:	08017288 	.word	0x08017288
 800b09c:	0801742c 	.word	0x0801742c
 800b0a0:	080172d8 	.word	0x080172d8

0800b0a4 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800b0a4:	b580      	push	{r7, lr}
 800b0a6:	b082      	sub	sp, #8
 800b0a8:	af00      	add	r7, sp, #0
 800b0aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d107      	bne.n	800b0c2 <netif_set_down+0x1e>
 800b0b2:	4b12      	ldr	r3, [pc, #72]	; (800b0fc <netif_set_down+0x58>)
 800b0b4:	f240 329b 	movw	r2, #923	; 0x39b
 800b0b8:	4911      	ldr	r1, [pc, #68]	; (800b100 <netif_set_down+0x5c>)
 800b0ba:	4812      	ldr	r0, [pc, #72]	; (800b104 <netif_set_down+0x60>)
 800b0bc:	f00a f9de 	bl	801547c <iprintf>
 800b0c0:	e019      	b.n	800b0f6 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b0c8:	f003 0301 	and.w	r3, r3, #1
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d012      	beq.n	800b0f6 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b0d6:	f023 0301 	bic.w	r3, r3, #1
 800b0da:	b2da      	uxtb	r2, r3
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b0e8:	f003 0308 	and.w	r3, r3, #8
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d002      	beq.n	800b0f6 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800b0f0:	6878      	ldr	r0, [r7, #4]
 800b0f2:	f007 fea9 	bl	8012e48 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800b0f6:	3708      	adds	r7, #8
 800b0f8:	46bd      	mov	sp, r7
 800b0fa:	bd80      	pop	{r7, pc}
 800b0fc:	08017288 	.word	0x08017288
 800b100:	08017450 	.word	0x08017450
 800b104:	080172d8 	.word	0x080172d8

0800b108 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800b108:	b580      	push	{r7, lr}
 800b10a:	b082      	sub	sp, #8
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	2b00      	cmp	r3, #0
 800b114:	d107      	bne.n	800b126 <netif_set_link_up+0x1e>
 800b116:	4b13      	ldr	r3, [pc, #76]	; (800b164 <netif_set_link_up+0x5c>)
 800b118:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800b11c:	4912      	ldr	r1, [pc, #72]	; (800b168 <netif_set_link_up+0x60>)
 800b11e:	4813      	ldr	r0, [pc, #76]	; (800b16c <netif_set_link_up+0x64>)
 800b120:	f00a f9ac 	bl	801547c <iprintf>
 800b124:	e01b      	b.n	800b15e <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b12c:	f003 0304 	and.w	r3, r3, #4
 800b130:	2b00      	cmp	r3, #0
 800b132:	d114      	bne.n	800b15e <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b13a:	f043 0304 	orr.w	r3, r3, #4
 800b13e:	b2da      	uxtb	r2, r3
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800b146:	2103      	movs	r1, #3
 800b148:	6878      	ldr	r0, [r7, #4]
 800b14a:	f7ff ff6b 	bl	800b024 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	69db      	ldr	r3, [r3, #28]
 800b152:	2b00      	cmp	r3, #0
 800b154:	d003      	beq.n	800b15e <netif_set_link_up+0x56>
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	69db      	ldr	r3, [r3, #28]
 800b15a:	6878      	ldr	r0, [r7, #4]
 800b15c:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800b15e:	3708      	adds	r7, #8
 800b160:	46bd      	mov	sp, r7
 800b162:	bd80      	pop	{r7, pc}
 800b164:	08017288 	.word	0x08017288
 800b168:	08017470 	.word	0x08017470
 800b16c:	080172d8 	.word	0x080172d8

0800b170 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800b170:	b580      	push	{r7, lr}
 800b172:	b082      	sub	sp, #8
 800b174:	af00      	add	r7, sp, #0
 800b176:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d107      	bne.n	800b18e <netif_set_link_down+0x1e>
 800b17e:	4b11      	ldr	r3, [pc, #68]	; (800b1c4 <netif_set_link_down+0x54>)
 800b180:	f240 4206 	movw	r2, #1030	; 0x406
 800b184:	4910      	ldr	r1, [pc, #64]	; (800b1c8 <netif_set_link_down+0x58>)
 800b186:	4811      	ldr	r0, [pc, #68]	; (800b1cc <netif_set_link_down+0x5c>)
 800b188:	f00a f978 	bl	801547c <iprintf>
 800b18c:	e017      	b.n	800b1be <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b194:	f003 0304 	and.w	r3, r3, #4
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d010      	beq.n	800b1be <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b1a2:	f023 0304 	bic.w	r3, r3, #4
 800b1a6:	b2da      	uxtb	r2, r3
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	69db      	ldr	r3, [r3, #28]
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d003      	beq.n	800b1be <netif_set_link_down+0x4e>
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	69db      	ldr	r3, [r3, #28]
 800b1ba:	6878      	ldr	r0, [r7, #4]
 800b1bc:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800b1be:	3708      	adds	r7, #8
 800b1c0:	46bd      	mov	sp, r7
 800b1c2:	bd80      	pop	{r7, pc}
 800b1c4:	08017288 	.word	0x08017288
 800b1c8:	08017494 	.word	0x08017494
 800b1cc:	080172d8 	.word	0x080172d8

0800b1d0 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800b1d0:	b480      	push	{r7}
 800b1d2:	b083      	sub	sp, #12
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	6078      	str	r0, [r7, #4]
 800b1d8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d002      	beq.n	800b1e6 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	683a      	ldr	r2, [r7, #0]
 800b1e4:	61da      	str	r2, [r3, #28]
  }
}
 800b1e6:	bf00      	nop
 800b1e8:	370c      	adds	r7, #12
 800b1ea:	46bd      	mov	sp, r7
 800b1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f0:	4770      	bx	lr

0800b1f2 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800b1f2:	b480      	push	{r7}
 800b1f4:	b085      	sub	sp, #20
 800b1f6:	af00      	add	r7, sp, #0
 800b1f8:	60f8      	str	r0, [r7, #12]
 800b1fa:	60b9      	str	r1, [r7, #8]
 800b1fc:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800b1fe:	f06f 030b 	mvn.w	r3, #11
}
 800b202:	4618      	mov	r0, r3
 800b204:	3714      	adds	r7, #20
 800b206:	46bd      	mov	sp, r7
 800b208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b20c:	4770      	bx	lr
	...

0800b210 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800b210:	b480      	push	{r7}
 800b212:	b085      	sub	sp, #20
 800b214:	af00      	add	r7, sp, #0
 800b216:	4603      	mov	r3, r0
 800b218:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800b21a:	79fb      	ldrb	r3, [r7, #7]
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d013      	beq.n	800b248 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800b220:	4b0d      	ldr	r3, [pc, #52]	; (800b258 <netif_get_by_index+0x48>)
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	60fb      	str	r3, [r7, #12]
 800b226:	e00c      	b.n	800b242 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b22e:	3301      	adds	r3, #1
 800b230:	b2db      	uxtb	r3, r3
 800b232:	79fa      	ldrb	r2, [r7, #7]
 800b234:	429a      	cmp	r2, r3
 800b236:	d101      	bne.n	800b23c <netif_get_by_index+0x2c>
        return netif; /* found! */
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	e006      	b.n	800b24a <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	60fb      	str	r3, [r7, #12]
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	2b00      	cmp	r3, #0
 800b246:	d1ef      	bne.n	800b228 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800b248:	2300      	movs	r3, #0
}
 800b24a:	4618      	mov	r0, r3
 800b24c:	3714      	adds	r7, #20
 800b24e:	46bd      	mov	sp, r7
 800b250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b254:	4770      	bx	lr
 800b256:	bf00      	nop
 800b258:	2000bd94 	.word	0x2000bd94

0800b25c <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800b25c:	b580      	push	{r7, lr}
 800b25e:	b082      	sub	sp, #8
 800b260:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800b262:	f009 ff51 	bl	8015108 <sys_arch_protect>
 800b266:	6038      	str	r0, [r7, #0]
 800b268:	4b0d      	ldr	r3, [pc, #52]	; (800b2a0 <pbuf_free_ooseq+0x44>)
 800b26a:	2200      	movs	r2, #0
 800b26c:	701a      	strb	r2, [r3, #0]
 800b26e:	6838      	ldr	r0, [r7, #0]
 800b270:	f009 ff58 	bl	8015124 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800b274:	4b0b      	ldr	r3, [pc, #44]	; (800b2a4 <pbuf_free_ooseq+0x48>)
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	607b      	str	r3, [r7, #4]
 800b27a:	e00a      	b.n	800b292 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b280:	2b00      	cmp	r3, #0
 800b282:	d003      	beq.n	800b28c <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800b284:	6878      	ldr	r0, [r7, #4]
 800b286:	f002 fc43 	bl	800db10 <tcp_free_ooseq>
      return;
 800b28a:	e005      	b.n	800b298 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	68db      	ldr	r3, [r3, #12]
 800b290:	607b      	str	r3, [r7, #4]
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	2b00      	cmp	r3, #0
 800b296:	d1f1      	bne.n	800b27c <pbuf_free_ooseq+0x20>
    }
  }
}
 800b298:	3708      	adds	r7, #8
 800b29a:	46bd      	mov	sp, r7
 800b29c:	bd80      	pop	{r7, pc}
 800b29e:	bf00      	nop
 800b2a0:	2000bd9c 	.word	0x2000bd9c
 800b2a4:	2000bda4 	.word	0x2000bda4

0800b2a8 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800b2a8:	b580      	push	{r7, lr}
 800b2aa:	b082      	sub	sp, #8
 800b2ac:	af00      	add	r7, sp, #0
 800b2ae:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800b2b0:	f7ff ffd4 	bl	800b25c <pbuf_free_ooseq>
}
 800b2b4:	bf00      	nop
 800b2b6:	3708      	adds	r7, #8
 800b2b8:	46bd      	mov	sp, r7
 800b2ba:	bd80      	pop	{r7, pc}

0800b2bc <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800b2bc:	b580      	push	{r7, lr}
 800b2be:	b082      	sub	sp, #8
 800b2c0:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800b2c2:	f009 ff21 	bl	8015108 <sys_arch_protect>
 800b2c6:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800b2c8:	4b0f      	ldr	r3, [pc, #60]	; (800b308 <pbuf_pool_is_empty+0x4c>)
 800b2ca:	781b      	ldrb	r3, [r3, #0]
 800b2cc:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800b2ce:	4b0e      	ldr	r3, [pc, #56]	; (800b308 <pbuf_pool_is_empty+0x4c>)
 800b2d0:	2201      	movs	r2, #1
 800b2d2:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800b2d4:	6878      	ldr	r0, [r7, #4]
 800b2d6:	f009 ff25 	bl	8015124 <sys_arch_unprotect>

  if (!queued) {
 800b2da:	78fb      	ldrb	r3, [r7, #3]
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d10f      	bne.n	800b300 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800b2e0:	2100      	movs	r1, #0
 800b2e2:	480a      	ldr	r0, [pc, #40]	; (800b30c <pbuf_pool_is_empty+0x50>)
 800b2e4:	f7fe fed6 	bl	800a094 <tcpip_try_callback>
 800b2e8:	4603      	mov	r3, r0
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d008      	beq.n	800b300 <pbuf_pool_is_empty+0x44>
 800b2ee:	f009 ff0b 	bl	8015108 <sys_arch_protect>
 800b2f2:	6078      	str	r0, [r7, #4]
 800b2f4:	4b04      	ldr	r3, [pc, #16]	; (800b308 <pbuf_pool_is_empty+0x4c>)
 800b2f6:	2200      	movs	r2, #0
 800b2f8:	701a      	strb	r2, [r3, #0]
 800b2fa:	6878      	ldr	r0, [r7, #4]
 800b2fc:	f009 ff12 	bl	8015124 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800b300:	bf00      	nop
 800b302:	3708      	adds	r7, #8
 800b304:	46bd      	mov	sp, r7
 800b306:	bd80      	pop	{r7, pc}
 800b308:	2000bd9c 	.word	0x2000bd9c
 800b30c:	0800b2a9 	.word	0x0800b2a9

0800b310 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800b310:	b480      	push	{r7}
 800b312:	b085      	sub	sp, #20
 800b314:	af00      	add	r7, sp, #0
 800b316:	60f8      	str	r0, [r7, #12]
 800b318:	60b9      	str	r1, [r7, #8]
 800b31a:	4611      	mov	r1, r2
 800b31c:	461a      	mov	r2, r3
 800b31e:	460b      	mov	r3, r1
 800b320:	80fb      	strh	r3, [r7, #6]
 800b322:	4613      	mov	r3, r2
 800b324:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	2200      	movs	r2, #0
 800b32a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	68ba      	ldr	r2, [r7, #8]
 800b330:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	88fa      	ldrh	r2, [r7, #6]
 800b336:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	88ba      	ldrh	r2, [r7, #4]
 800b33c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800b33e:	8b3b      	ldrh	r3, [r7, #24]
 800b340:	b2da      	uxtb	r2, r3
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	7f3a      	ldrb	r2, [r7, #28]
 800b34a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	2201      	movs	r2, #1
 800b350:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	2200      	movs	r2, #0
 800b356:	73da      	strb	r2, [r3, #15]
}
 800b358:	bf00      	nop
 800b35a:	3714      	adds	r7, #20
 800b35c:	46bd      	mov	sp, r7
 800b35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b362:	4770      	bx	lr

0800b364 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800b364:	b580      	push	{r7, lr}
 800b366:	b08c      	sub	sp, #48	; 0x30
 800b368:	af02      	add	r7, sp, #8
 800b36a:	4603      	mov	r3, r0
 800b36c:	71fb      	strb	r3, [r7, #7]
 800b36e:	460b      	mov	r3, r1
 800b370:	80bb      	strh	r3, [r7, #4]
 800b372:	4613      	mov	r3, r2
 800b374:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800b376:	79fb      	ldrb	r3, [r7, #7]
 800b378:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800b37a:	887b      	ldrh	r3, [r7, #2]
 800b37c:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800b380:	d07f      	beq.n	800b482 <pbuf_alloc+0x11e>
 800b382:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800b386:	f300 80c8 	bgt.w	800b51a <pbuf_alloc+0x1b6>
 800b38a:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800b38e:	d010      	beq.n	800b3b2 <pbuf_alloc+0x4e>
 800b390:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800b394:	f300 80c1 	bgt.w	800b51a <pbuf_alloc+0x1b6>
 800b398:	2b01      	cmp	r3, #1
 800b39a:	d002      	beq.n	800b3a2 <pbuf_alloc+0x3e>
 800b39c:	2b41      	cmp	r3, #65	; 0x41
 800b39e:	f040 80bc 	bne.w	800b51a <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800b3a2:	887a      	ldrh	r2, [r7, #2]
 800b3a4:	88bb      	ldrh	r3, [r7, #4]
 800b3a6:	4619      	mov	r1, r3
 800b3a8:	2000      	movs	r0, #0
 800b3aa:	f000 f8d1 	bl	800b550 <pbuf_alloc_reference>
 800b3ae:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800b3b0:	e0bd      	b.n	800b52e <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800b3b2:	2300      	movs	r3, #0
 800b3b4:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800b3b6:	2300      	movs	r3, #0
 800b3b8:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800b3ba:	88bb      	ldrh	r3, [r7, #4]
 800b3bc:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800b3be:	200c      	movs	r0, #12
 800b3c0:	f7ff fbbe 	bl	800ab40 <memp_malloc>
 800b3c4:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800b3c6:	693b      	ldr	r3, [r7, #16]
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d109      	bne.n	800b3e0 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800b3cc:	f7ff ff76 	bl	800b2bc <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800b3d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d002      	beq.n	800b3dc <pbuf_alloc+0x78>
            pbuf_free(p);
 800b3d6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b3d8:	f000 faa8 	bl	800b92c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800b3dc:	2300      	movs	r3, #0
 800b3de:	e0a7      	b.n	800b530 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800b3e0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b3e2:	3303      	adds	r3, #3
 800b3e4:	b29b      	uxth	r3, r3
 800b3e6:	f023 0303 	bic.w	r3, r3, #3
 800b3ea:	b29b      	uxth	r3, r3
 800b3ec:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800b3f0:	b29b      	uxth	r3, r3
 800b3f2:	8b7a      	ldrh	r2, [r7, #26]
 800b3f4:	4293      	cmp	r3, r2
 800b3f6:	bf28      	it	cs
 800b3f8:	4613      	movcs	r3, r2
 800b3fa:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800b3fc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b3fe:	3310      	adds	r3, #16
 800b400:	693a      	ldr	r2, [r7, #16]
 800b402:	4413      	add	r3, r2
 800b404:	3303      	adds	r3, #3
 800b406:	f023 0303 	bic.w	r3, r3, #3
 800b40a:	4618      	mov	r0, r3
 800b40c:	89f9      	ldrh	r1, [r7, #14]
 800b40e:	8b7a      	ldrh	r2, [r7, #26]
 800b410:	2300      	movs	r3, #0
 800b412:	9301      	str	r3, [sp, #4]
 800b414:	887b      	ldrh	r3, [r7, #2]
 800b416:	9300      	str	r3, [sp, #0]
 800b418:	460b      	mov	r3, r1
 800b41a:	4601      	mov	r1, r0
 800b41c:	6938      	ldr	r0, [r7, #16]
 800b41e:	f7ff ff77 	bl	800b310 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800b422:	693b      	ldr	r3, [r7, #16]
 800b424:	685b      	ldr	r3, [r3, #4]
 800b426:	f003 0303 	and.w	r3, r3, #3
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d006      	beq.n	800b43c <pbuf_alloc+0xd8>
 800b42e:	4b42      	ldr	r3, [pc, #264]	; (800b538 <pbuf_alloc+0x1d4>)
 800b430:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b434:	4941      	ldr	r1, [pc, #260]	; (800b53c <pbuf_alloc+0x1d8>)
 800b436:	4842      	ldr	r0, [pc, #264]	; (800b540 <pbuf_alloc+0x1dc>)
 800b438:	f00a f820 	bl	801547c <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800b43c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b43e:	3303      	adds	r3, #3
 800b440:	f023 0303 	bic.w	r3, r3, #3
 800b444:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800b448:	d106      	bne.n	800b458 <pbuf_alloc+0xf4>
 800b44a:	4b3b      	ldr	r3, [pc, #236]	; (800b538 <pbuf_alloc+0x1d4>)
 800b44c:	f44f 7281 	mov.w	r2, #258	; 0x102
 800b450:	493c      	ldr	r1, [pc, #240]	; (800b544 <pbuf_alloc+0x1e0>)
 800b452:	483b      	ldr	r0, [pc, #236]	; (800b540 <pbuf_alloc+0x1dc>)
 800b454:	f00a f812 	bl	801547c <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800b458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d102      	bne.n	800b464 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800b45e:	693b      	ldr	r3, [r7, #16]
 800b460:	627b      	str	r3, [r7, #36]	; 0x24
 800b462:	e002      	b.n	800b46a <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800b464:	69fb      	ldr	r3, [r7, #28]
 800b466:	693a      	ldr	r2, [r7, #16]
 800b468:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800b46a:	693b      	ldr	r3, [r7, #16]
 800b46c:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800b46e:	8b7a      	ldrh	r2, [r7, #26]
 800b470:	89fb      	ldrh	r3, [r7, #14]
 800b472:	1ad3      	subs	r3, r2, r3
 800b474:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800b476:	2300      	movs	r3, #0
 800b478:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800b47a:	8b7b      	ldrh	r3, [r7, #26]
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d19e      	bne.n	800b3be <pbuf_alloc+0x5a>
      break;
 800b480:	e055      	b.n	800b52e <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800b482:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b484:	3303      	adds	r3, #3
 800b486:	b29b      	uxth	r3, r3
 800b488:	f023 0303 	bic.w	r3, r3, #3
 800b48c:	b29a      	uxth	r2, r3
 800b48e:	88bb      	ldrh	r3, [r7, #4]
 800b490:	3303      	adds	r3, #3
 800b492:	b29b      	uxth	r3, r3
 800b494:	f023 0303 	bic.w	r3, r3, #3
 800b498:	b29b      	uxth	r3, r3
 800b49a:	4413      	add	r3, r2
 800b49c:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800b49e:	8b3b      	ldrh	r3, [r7, #24]
 800b4a0:	3310      	adds	r3, #16
 800b4a2:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800b4a4:	8b3a      	ldrh	r2, [r7, #24]
 800b4a6:	88bb      	ldrh	r3, [r7, #4]
 800b4a8:	3303      	adds	r3, #3
 800b4aa:	f023 0303 	bic.w	r3, r3, #3
 800b4ae:	429a      	cmp	r2, r3
 800b4b0:	d306      	bcc.n	800b4c0 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800b4b2:	8afa      	ldrh	r2, [r7, #22]
 800b4b4:	88bb      	ldrh	r3, [r7, #4]
 800b4b6:	3303      	adds	r3, #3
 800b4b8:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800b4bc:	429a      	cmp	r2, r3
 800b4be:	d201      	bcs.n	800b4c4 <pbuf_alloc+0x160>
        return NULL;
 800b4c0:	2300      	movs	r3, #0
 800b4c2:	e035      	b.n	800b530 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800b4c4:	8afb      	ldrh	r3, [r7, #22]
 800b4c6:	4618      	mov	r0, r3
 800b4c8:	f7ff f9b8 	bl	800a83c <mem_malloc>
 800b4cc:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800b4ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d101      	bne.n	800b4d8 <pbuf_alloc+0x174>
        return NULL;
 800b4d4:	2300      	movs	r3, #0
 800b4d6:	e02b      	b.n	800b530 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800b4d8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b4da:	3310      	adds	r3, #16
 800b4dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b4de:	4413      	add	r3, r2
 800b4e0:	3303      	adds	r3, #3
 800b4e2:	f023 0303 	bic.w	r3, r3, #3
 800b4e6:	4618      	mov	r0, r3
 800b4e8:	88b9      	ldrh	r1, [r7, #4]
 800b4ea:	88ba      	ldrh	r2, [r7, #4]
 800b4ec:	2300      	movs	r3, #0
 800b4ee:	9301      	str	r3, [sp, #4]
 800b4f0:	887b      	ldrh	r3, [r7, #2]
 800b4f2:	9300      	str	r3, [sp, #0]
 800b4f4:	460b      	mov	r3, r1
 800b4f6:	4601      	mov	r1, r0
 800b4f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b4fa:	f7ff ff09 	bl	800b310 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800b4fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b500:	685b      	ldr	r3, [r3, #4]
 800b502:	f003 0303 	and.w	r3, r3, #3
 800b506:	2b00      	cmp	r3, #0
 800b508:	d010      	beq.n	800b52c <pbuf_alloc+0x1c8>
 800b50a:	4b0b      	ldr	r3, [pc, #44]	; (800b538 <pbuf_alloc+0x1d4>)
 800b50c:	f44f 7291 	mov.w	r2, #290	; 0x122
 800b510:	490d      	ldr	r1, [pc, #52]	; (800b548 <pbuf_alloc+0x1e4>)
 800b512:	480b      	ldr	r0, [pc, #44]	; (800b540 <pbuf_alloc+0x1dc>)
 800b514:	f009 ffb2 	bl	801547c <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800b518:	e008      	b.n	800b52c <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800b51a:	4b07      	ldr	r3, [pc, #28]	; (800b538 <pbuf_alloc+0x1d4>)
 800b51c:	f240 1227 	movw	r2, #295	; 0x127
 800b520:	490a      	ldr	r1, [pc, #40]	; (800b54c <pbuf_alloc+0x1e8>)
 800b522:	4807      	ldr	r0, [pc, #28]	; (800b540 <pbuf_alloc+0x1dc>)
 800b524:	f009 ffaa 	bl	801547c <iprintf>
      return NULL;
 800b528:	2300      	movs	r3, #0
 800b52a:	e001      	b.n	800b530 <pbuf_alloc+0x1cc>
      break;
 800b52c:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800b52e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b530:	4618      	mov	r0, r3
 800b532:	3728      	adds	r7, #40	; 0x28
 800b534:	46bd      	mov	sp, r7
 800b536:	bd80      	pop	{r7, pc}
 800b538:	080174b8 	.word	0x080174b8
 800b53c:	080174e8 	.word	0x080174e8
 800b540:	08017518 	.word	0x08017518
 800b544:	08017540 	.word	0x08017540
 800b548:	08017574 	.word	0x08017574
 800b54c:	080175a0 	.word	0x080175a0

0800b550 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800b550:	b580      	push	{r7, lr}
 800b552:	b086      	sub	sp, #24
 800b554:	af02      	add	r7, sp, #8
 800b556:	6078      	str	r0, [r7, #4]
 800b558:	460b      	mov	r3, r1
 800b55a:	807b      	strh	r3, [r7, #2]
 800b55c:	4613      	mov	r3, r2
 800b55e:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800b560:	883b      	ldrh	r3, [r7, #0]
 800b562:	2b41      	cmp	r3, #65	; 0x41
 800b564:	d009      	beq.n	800b57a <pbuf_alloc_reference+0x2a>
 800b566:	883b      	ldrh	r3, [r7, #0]
 800b568:	2b01      	cmp	r3, #1
 800b56a:	d006      	beq.n	800b57a <pbuf_alloc_reference+0x2a>
 800b56c:	4b0f      	ldr	r3, [pc, #60]	; (800b5ac <pbuf_alloc_reference+0x5c>)
 800b56e:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800b572:	490f      	ldr	r1, [pc, #60]	; (800b5b0 <pbuf_alloc_reference+0x60>)
 800b574:	480f      	ldr	r0, [pc, #60]	; (800b5b4 <pbuf_alloc_reference+0x64>)
 800b576:	f009 ff81 	bl	801547c <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800b57a:	200b      	movs	r0, #11
 800b57c:	f7ff fae0 	bl	800ab40 <memp_malloc>
 800b580:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	2b00      	cmp	r3, #0
 800b586:	d101      	bne.n	800b58c <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800b588:	2300      	movs	r3, #0
 800b58a:	e00b      	b.n	800b5a4 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800b58c:	8879      	ldrh	r1, [r7, #2]
 800b58e:	887a      	ldrh	r2, [r7, #2]
 800b590:	2300      	movs	r3, #0
 800b592:	9301      	str	r3, [sp, #4]
 800b594:	883b      	ldrh	r3, [r7, #0]
 800b596:	9300      	str	r3, [sp, #0]
 800b598:	460b      	mov	r3, r1
 800b59a:	6879      	ldr	r1, [r7, #4]
 800b59c:	68f8      	ldr	r0, [r7, #12]
 800b59e:	f7ff feb7 	bl	800b310 <pbuf_init_alloced_pbuf>
  return p;
 800b5a2:	68fb      	ldr	r3, [r7, #12]
}
 800b5a4:	4618      	mov	r0, r3
 800b5a6:	3710      	adds	r7, #16
 800b5a8:	46bd      	mov	sp, r7
 800b5aa:	bd80      	pop	{r7, pc}
 800b5ac:	080174b8 	.word	0x080174b8
 800b5b0:	080175bc 	.word	0x080175bc
 800b5b4:	08017518 	.word	0x08017518

0800b5b8 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800b5b8:	b580      	push	{r7, lr}
 800b5ba:	b088      	sub	sp, #32
 800b5bc:	af02      	add	r7, sp, #8
 800b5be:	607b      	str	r3, [r7, #4]
 800b5c0:	4603      	mov	r3, r0
 800b5c2:	73fb      	strb	r3, [r7, #15]
 800b5c4:	460b      	mov	r3, r1
 800b5c6:	81bb      	strh	r3, [r7, #12]
 800b5c8:	4613      	mov	r3, r2
 800b5ca:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800b5cc:	7bfb      	ldrb	r3, [r7, #15]
 800b5ce:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800b5d0:	8a7b      	ldrh	r3, [r7, #18]
 800b5d2:	3303      	adds	r3, #3
 800b5d4:	f023 0203 	bic.w	r2, r3, #3
 800b5d8:	89bb      	ldrh	r3, [r7, #12]
 800b5da:	441a      	add	r2, r3
 800b5dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b5de:	429a      	cmp	r2, r3
 800b5e0:	d901      	bls.n	800b5e6 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	e018      	b.n	800b618 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800b5e6:	6a3b      	ldr	r3, [r7, #32]
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d007      	beq.n	800b5fc <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800b5ec:	8a7b      	ldrh	r3, [r7, #18]
 800b5ee:	3303      	adds	r3, #3
 800b5f0:	f023 0303 	bic.w	r3, r3, #3
 800b5f4:	6a3a      	ldr	r2, [r7, #32]
 800b5f6:	4413      	add	r3, r2
 800b5f8:	617b      	str	r3, [r7, #20]
 800b5fa:	e001      	b.n	800b600 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800b5fc:	2300      	movs	r3, #0
 800b5fe:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800b600:	6878      	ldr	r0, [r7, #4]
 800b602:	89b9      	ldrh	r1, [r7, #12]
 800b604:	89ba      	ldrh	r2, [r7, #12]
 800b606:	2302      	movs	r3, #2
 800b608:	9301      	str	r3, [sp, #4]
 800b60a:	897b      	ldrh	r3, [r7, #10]
 800b60c:	9300      	str	r3, [sp, #0]
 800b60e:	460b      	mov	r3, r1
 800b610:	6979      	ldr	r1, [r7, #20]
 800b612:	f7ff fe7d 	bl	800b310 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800b616:	687b      	ldr	r3, [r7, #4]
}
 800b618:	4618      	mov	r0, r3
 800b61a:	3718      	adds	r7, #24
 800b61c:	46bd      	mov	sp, r7
 800b61e:	bd80      	pop	{r7, pc}

0800b620 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800b620:	b580      	push	{r7, lr}
 800b622:	b084      	sub	sp, #16
 800b624:	af00      	add	r7, sp, #0
 800b626:	6078      	str	r0, [r7, #4]
 800b628:	460b      	mov	r3, r1
 800b62a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d106      	bne.n	800b640 <pbuf_realloc+0x20>
 800b632:	4b3a      	ldr	r3, [pc, #232]	; (800b71c <pbuf_realloc+0xfc>)
 800b634:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800b638:	4939      	ldr	r1, [pc, #228]	; (800b720 <pbuf_realloc+0x100>)
 800b63a:	483a      	ldr	r0, [pc, #232]	; (800b724 <pbuf_realloc+0x104>)
 800b63c:	f009 ff1e 	bl	801547c <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	891b      	ldrh	r3, [r3, #8]
 800b644:	887a      	ldrh	r2, [r7, #2]
 800b646:	429a      	cmp	r2, r3
 800b648:	d263      	bcs.n	800b712 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	891a      	ldrh	r2, [r3, #8]
 800b64e:	887b      	ldrh	r3, [r7, #2]
 800b650:	1ad3      	subs	r3, r2, r3
 800b652:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800b654:	887b      	ldrh	r3, [r7, #2]
 800b656:	817b      	strh	r3, [r7, #10]
  q = p;
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800b65c:	e018      	b.n	800b690 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	895b      	ldrh	r3, [r3, #10]
 800b662:	897a      	ldrh	r2, [r7, #10]
 800b664:	1ad3      	subs	r3, r2, r3
 800b666:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	891a      	ldrh	r2, [r3, #8]
 800b66c:	893b      	ldrh	r3, [r7, #8]
 800b66e:	1ad3      	subs	r3, r2, r3
 800b670:	b29a      	uxth	r2, r3
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d106      	bne.n	800b690 <pbuf_realloc+0x70>
 800b682:	4b26      	ldr	r3, [pc, #152]	; (800b71c <pbuf_realloc+0xfc>)
 800b684:	f240 12af 	movw	r2, #431	; 0x1af
 800b688:	4927      	ldr	r1, [pc, #156]	; (800b728 <pbuf_realloc+0x108>)
 800b68a:	4826      	ldr	r0, [pc, #152]	; (800b724 <pbuf_realloc+0x104>)
 800b68c:	f009 fef6 	bl	801547c <iprintf>
  while (rem_len > q->len) {
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	895b      	ldrh	r3, [r3, #10]
 800b694:	897a      	ldrh	r2, [r7, #10]
 800b696:	429a      	cmp	r2, r3
 800b698:	d8e1      	bhi.n	800b65e <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	7b1b      	ldrb	r3, [r3, #12]
 800b69e:	f003 030f 	and.w	r3, r3, #15
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d121      	bne.n	800b6ea <pbuf_realloc+0xca>
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	895b      	ldrh	r3, [r3, #10]
 800b6aa:	897a      	ldrh	r2, [r7, #10]
 800b6ac:	429a      	cmp	r2, r3
 800b6ae:	d01c      	beq.n	800b6ea <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	7b5b      	ldrb	r3, [r3, #13]
 800b6b4:	f003 0302 	and.w	r3, r3, #2
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d116      	bne.n	800b6ea <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	685a      	ldr	r2, [r3, #4]
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	1ad3      	subs	r3, r2, r3
 800b6c4:	b29a      	uxth	r2, r3
 800b6c6:	897b      	ldrh	r3, [r7, #10]
 800b6c8:	4413      	add	r3, r2
 800b6ca:	b29b      	uxth	r3, r3
 800b6cc:	4619      	mov	r1, r3
 800b6ce:	68f8      	ldr	r0, [r7, #12]
 800b6d0:	f7fe ffaa 	bl	800a628 <mem_trim>
 800b6d4:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d106      	bne.n	800b6ea <pbuf_realloc+0xca>
 800b6dc:	4b0f      	ldr	r3, [pc, #60]	; (800b71c <pbuf_realloc+0xfc>)
 800b6de:	f240 12bd 	movw	r2, #445	; 0x1bd
 800b6e2:	4912      	ldr	r1, [pc, #72]	; (800b72c <pbuf_realloc+0x10c>)
 800b6e4:	480f      	ldr	r0, [pc, #60]	; (800b724 <pbuf_realloc+0x104>)
 800b6e6:	f009 fec9 	bl	801547c <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	897a      	ldrh	r2, [r7, #10]
 800b6ee:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	895a      	ldrh	r2, [r3, #10]
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d004      	beq.n	800b70a <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	4618      	mov	r0, r3
 800b706:	f000 f911 	bl	800b92c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	2200      	movs	r2, #0
 800b70e:	601a      	str	r2, [r3, #0]
 800b710:	e000      	b.n	800b714 <pbuf_realloc+0xf4>
    return;
 800b712:	bf00      	nop

}
 800b714:	3710      	adds	r7, #16
 800b716:	46bd      	mov	sp, r7
 800b718:	bd80      	pop	{r7, pc}
 800b71a:	bf00      	nop
 800b71c:	080174b8 	.word	0x080174b8
 800b720:	080175d0 	.word	0x080175d0
 800b724:	08017518 	.word	0x08017518
 800b728:	080175e8 	.word	0x080175e8
 800b72c:	08017600 	.word	0x08017600

0800b730 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800b730:	b580      	push	{r7, lr}
 800b732:	b086      	sub	sp, #24
 800b734:	af00      	add	r7, sp, #0
 800b736:	60f8      	str	r0, [r7, #12]
 800b738:	60b9      	str	r1, [r7, #8]
 800b73a:	4613      	mov	r3, r2
 800b73c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	2b00      	cmp	r3, #0
 800b742:	d106      	bne.n	800b752 <pbuf_add_header_impl+0x22>
 800b744:	4b2b      	ldr	r3, [pc, #172]	; (800b7f4 <pbuf_add_header_impl+0xc4>)
 800b746:	f240 12df 	movw	r2, #479	; 0x1df
 800b74a:	492b      	ldr	r1, [pc, #172]	; (800b7f8 <pbuf_add_header_impl+0xc8>)
 800b74c:	482b      	ldr	r0, [pc, #172]	; (800b7fc <pbuf_add_header_impl+0xcc>)
 800b74e:	f009 fe95 	bl	801547c <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	2b00      	cmp	r3, #0
 800b756:	d003      	beq.n	800b760 <pbuf_add_header_impl+0x30>
 800b758:	68bb      	ldr	r3, [r7, #8]
 800b75a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b75e:	d301      	bcc.n	800b764 <pbuf_add_header_impl+0x34>
    return 1;
 800b760:	2301      	movs	r3, #1
 800b762:	e043      	b.n	800b7ec <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800b764:	68bb      	ldr	r3, [r7, #8]
 800b766:	2b00      	cmp	r3, #0
 800b768:	d101      	bne.n	800b76e <pbuf_add_header_impl+0x3e>
    return 0;
 800b76a:	2300      	movs	r3, #0
 800b76c:	e03e      	b.n	800b7ec <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800b76e:	68bb      	ldr	r3, [r7, #8]
 800b770:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	891a      	ldrh	r2, [r3, #8]
 800b776:	8a7b      	ldrh	r3, [r7, #18]
 800b778:	4413      	add	r3, r2
 800b77a:	b29b      	uxth	r3, r3
 800b77c:	8a7a      	ldrh	r2, [r7, #18]
 800b77e:	429a      	cmp	r2, r3
 800b780:	d901      	bls.n	800b786 <pbuf_add_header_impl+0x56>
    return 1;
 800b782:	2301      	movs	r3, #1
 800b784:	e032      	b.n	800b7ec <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	7b1b      	ldrb	r3, [r3, #12]
 800b78a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800b78c:	8a3b      	ldrh	r3, [r7, #16]
 800b78e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b792:	2b00      	cmp	r3, #0
 800b794:	d00c      	beq.n	800b7b0 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	685a      	ldr	r2, [r3, #4]
 800b79a:	68bb      	ldr	r3, [r7, #8]
 800b79c:	425b      	negs	r3, r3
 800b79e:	4413      	add	r3, r2
 800b7a0:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	3310      	adds	r3, #16
 800b7a6:	697a      	ldr	r2, [r7, #20]
 800b7a8:	429a      	cmp	r2, r3
 800b7aa:	d20d      	bcs.n	800b7c8 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800b7ac:	2301      	movs	r3, #1
 800b7ae:	e01d      	b.n	800b7ec <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800b7b0:	79fb      	ldrb	r3, [r7, #7]
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d006      	beq.n	800b7c4 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	685a      	ldr	r2, [r3, #4]
 800b7ba:	68bb      	ldr	r3, [r7, #8]
 800b7bc:	425b      	negs	r3, r3
 800b7be:	4413      	add	r3, r2
 800b7c0:	617b      	str	r3, [r7, #20]
 800b7c2:	e001      	b.n	800b7c8 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800b7c4:	2301      	movs	r3, #1
 800b7c6:	e011      	b.n	800b7ec <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	697a      	ldr	r2, [r7, #20]
 800b7cc:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	895a      	ldrh	r2, [r3, #10]
 800b7d2:	8a7b      	ldrh	r3, [r7, #18]
 800b7d4:	4413      	add	r3, r2
 800b7d6:	b29a      	uxth	r2, r3
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	891a      	ldrh	r2, [r3, #8]
 800b7e0:	8a7b      	ldrh	r3, [r7, #18]
 800b7e2:	4413      	add	r3, r2
 800b7e4:	b29a      	uxth	r2, r3
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	811a      	strh	r2, [r3, #8]


  return 0;
 800b7ea:	2300      	movs	r3, #0
}
 800b7ec:	4618      	mov	r0, r3
 800b7ee:	3718      	adds	r7, #24
 800b7f0:	46bd      	mov	sp, r7
 800b7f2:	bd80      	pop	{r7, pc}
 800b7f4:	080174b8 	.word	0x080174b8
 800b7f8:	0801761c 	.word	0x0801761c
 800b7fc:	08017518 	.word	0x08017518

0800b800 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800b800:	b580      	push	{r7, lr}
 800b802:	b082      	sub	sp, #8
 800b804:	af00      	add	r7, sp, #0
 800b806:	6078      	str	r0, [r7, #4]
 800b808:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800b80a:	2200      	movs	r2, #0
 800b80c:	6839      	ldr	r1, [r7, #0]
 800b80e:	6878      	ldr	r0, [r7, #4]
 800b810:	f7ff ff8e 	bl	800b730 <pbuf_add_header_impl>
 800b814:	4603      	mov	r3, r0
}
 800b816:	4618      	mov	r0, r3
 800b818:	3708      	adds	r7, #8
 800b81a:	46bd      	mov	sp, r7
 800b81c:	bd80      	pop	{r7, pc}
	...

0800b820 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800b820:	b580      	push	{r7, lr}
 800b822:	b084      	sub	sp, #16
 800b824:	af00      	add	r7, sp, #0
 800b826:	6078      	str	r0, [r7, #4]
 800b828:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d106      	bne.n	800b83e <pbuf_remove_header+0x1e>
 800b830:	4b20      	ldr	r3, [pc, #128]	; (800b8b4 <pbuf_remove_header+0x94>)
 800b832:	f240 224b 	movw	r2, #587	; 0x24b
 800b836:	4920      	ldr	r1, [pc, #128]	; (800b8b8 <pbuf_remove_header+0x98>)
 800b838:	4820      	ldr	r0, [pc, #128]	; (800b8bc <pbuf_remove_header+0x9c>)
 800b83a:	f009 fe1f 	bl	801547c <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	2b00      	cmp	r3, #0
 800b842:	d003      	beq.n	800b84c <pbuf_remove_header+0x2c>
 800b844:	683b      	ldr	r3, [r7, #0]
 800b846:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b84a:	d301      	bcc.n	800b850 <pbuf_remove_header+0x30>
    return 1;
 800b84c:	2301      	movs	r3, #1
 800b84e:	e02c      	b.n	800b8aa <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800b850:	683b      	ldr	r3, [r7, #0]
 800b852:	2b00      	cmp	r3, #0
 800b854:	d101      	bne.n	800b85a <pbuf_remove_header+0x3a>
    return 0;
 800b856:	2300      	movs	r3, #0
 800b858:	e027      	b.n	800b8aa <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800b85a:	683b      	ldr	r3, [r7, #0]
 800b85c:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	895b      	ldrh	r3, [r3, #10]
 800b862:	89fa      	ldrh	r2, [r7, #14]
 800b864:	429a      	cmp	r2, r3
 800b866:	d908      	bls.n	800b87a <pbuf_remove_header+0x5a>
 800b868:	4b12      	ldr	r3, [pc, #72]	; (800b8b4 <pbuf_remove_header+0x94>)
 800b86a:	f240 2255 	movw	r2, #597	; 0x255
 800b86e:	4914      	ldr	r1, [pc, #80]	; (800b8c0 <pbuf_remove_header+0xa0>)
 800b870:	4812      	ldr	r0, [pc, #72]	; (800b8bc <pbuf_remove_header+0x9c>)
 800b872:	f009 fe03 	bl	801547c <iprintf>
 800b876:	2301      	movs	r3, #1
 800b878:	e017      	b.n	800b8aa <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	685b      	ldr	r3, [r3, #4]
 800b87e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	685a      	ldr	r2, [r3, #4]
 800b884:	683b      	ldr	r3, [r7, #0]
 800b886:	441a      	add	r2, r3
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	895a      	ldrh	r2, [r3, #10]
 800b890:	89fb      	ldrh	r3, [r7, #14]
 800b892:	1ad3      	subs	r3, r2, r3
 800b894:	b29a      	uxth	r2, r3
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	891a      	ldrh	r2, [r3, #8]
 800b89e:	89fb      	ldrh	r3, [r7, #14]
 800b8a0:	1ad3      	subs	r3, r2, r3
 800b8a2:	b29a      	uxth	r2, r3
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800b8a8:	2300      	movs	r3, #0
}
 800b8aa:	4618      	mov	r0, r3
 800b8ac:	3710      	adds	r7, #16
 800b8ae:	46bd      	mov	sp, r7
 800b8b0:	bd80      	pop	{r7, pc}
 800b8b2:	bf00      	nop
 800b8b4:	080174b8 	.word	0x080174b8
 800b8b8:	0801761c 	.word	0x0801761c
 800b8bc:	08017518 	.word	0x08017518
 800b8c0:	08017628 	.word	0x08017628

0800b8c4 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800b8c4:	b580      	push	{r7, lr}
 800b8c6:	b082      	sub	sp, #8
 800b8c8:	af00      	add	r7, sp, #0
 800b8ca:	6078      	str	r0, [r7, #4]
 800b8cc:	460b      	mov	r3, r1
 800b8ce:	807b      	strh	r3, [r7, #2]
 800b8d0:	4613      	mov	r3, r2
 800b8d2:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800b8d4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	da08      	bge.n	800b8ee <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800b8dc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b8e0:	425b      	negs	r3, r3
 800b8e2:	4619      	mov	r1, r3
 800b8e4:	6878      	ldr	r0, [r7, #4]
 800b8e6:	f7ff ff9b 	bl	800b820 <pbuf_remove_header>
 800b8ea:	4603      	mov	r3, r0
 800b8ec:	e007      	b.n	800b8fe <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800b8ee:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b8f2:	787a      	ldrb	r2, [r7, #1]
 800b8f4:	4619      	mov	r1, r3
 800b8f6:	6878      	ldr	r0, [r7, #4]
 800b8f8:	f7ff ff1a 	bl	800b730 <pbuf_add_header_impl>
 800b8fc:	4603      	mov	r3, r0
  }
}
 800b8fe:	4618      	mov	r0, r3
 800b900:	3708      	adds	r7, #8
 800b902:	46bd      	mov	sp, r7
 800b904:	bd80      	pop	{r7, pc}

0800b906 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800b906:	b580      	push	{r7, lr}
 800b908:	b082      	sub	sp, #8
 800b90a:	af00      	add	r7, sp, #0
 800b90c:	6078      	str	r0, [r7, #4]
 800b90e:	460b      	mov	r3, r1
 800b910:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800b912:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b916:	2201      	movs	r2, #1
 800b918:	4619      	mov	r1, r3
 800b91a:	6878      	ldr	r0, [r7, #4]
 800b91c:	f7ff ffd2 	bl	800b8c4 <pbuf_header_impl>
 800b920:	4603      	mov	r3, r0
}
 800b922:	4618      	mov	r0, r3
 800b924:	3708      	adds	r7, #8
 800b926:	46bd      	mov	sp, r7
 800b928:	bd80      	pop	{r7, pc}
	...

0800b92c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800b92c:	b580      	push	{r7, lr}
 800b92e:	b088      	sub	sp, #32
 800b930:	af00      	add	r7, sp, #0
 800b932:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	2b00      	cmp	r3, #0
 800b938:	d10b      	bne.n	800b952 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d106      	bne.n	800b94e <pbuf_free+0x22>
 800b940:	4b3b      	ldr	r3, [pc, #236]	; (800ba30 <pbuf_free+0x104>)
 800b942:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800b946:	493b      	ldr	r1, [pc, #236]	; (800ba34 <pbuf_free+0x108>)
 800b948:	483b      	ldr	r0, [pc, #236]	; (800ba38 <pbuf_free+0x10c>)
 800b94a:	f009 fd97 	bl	801547c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800b94e:	2300      	movs	r3, #0
 800b950:	e069      	b.n	800ba26 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800b952:	2300      	movs	r3, #0
 800b954:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800b956:	e062      	b.n	800ba1e <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800b958:	f009 fbd6 	bl	8015108 <sys_arch_protect>
 800b95c:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	7b9b      	ldrb	r3, [r3, #14]
 800b962:	2b00      	cmp	r3, #0
 800b964:	d106      	bne.n	800b974 <pbuf_free+0x48>
 800b966:	4b32      	ldr	r3, [pc, #200]	; (800ba30 <pbuf_free+0x104>)
 800b968:	f240 22f1 	movw	r2, #753	; 0x2f1
 800b96c:	4933      	ldr	r1, [pc, #204]	; (800ba3c <pbuf_free+0x110>)
 800b96e:	4832      	ldr	r0, [pc, #200]	; (800ba38 <pbuf_free+0x10c>)
 800b970:	f009 fd84 	bl	801547c <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	7b9b      	ldrb	r3, [r3, #14]
 800b978:	3b01      	subs	r3, #1
 800b97a:	b2da      	uxtb	r2, r3
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	739a      	strb	r2, [r3, #14]
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	7b9b      	ldrb	r3, [r3, #14]
 800b984:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800b986:	69b8      	ldr	r0, [r7, #24]
 800b988:	f009 fbcc 	bl	8015124 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800b98c:	7dfb      	ldrb	r3, [r7, #23]
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d143      	bne.n	800ba1a <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	7b1b      	ldrb	r3, [r3, #12]
 800b99c:	f003 030f 	and.w	r3, r3, #15
 800b9a0:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	7b5b      	ldrb	r3, [r3, #13]
 800b9a6:	f003 0302 	and.w	r3, r3, #2
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d011      	beq.n	800b9d2 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800b9b2:	68bb      	ldr	r3, [r7, #8]
 800b9b4:	691b      	ldr	r3, [r3, #16]
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d106      	bne.n	800b9c8 <pbuf_free+0x9c>
 800b9ba:	4b1d      	ldr	r3, [pc, #116]	; (800ba30 <pbuf_free+0x104>)
 800b9bc:	f240 22ff 	movw	r2, #767	; 0x2ff
 800b9c0:	491f      	ldr	r1, [pc, #124]	; (800ba40 <pbuf_free+0x114>)
 800b9c2:	481d      	ldr	r0, [pc, #116]	; (800ba38 <pbuf_free+0x10c>)
 800b9c4:	f009 fd5a 	bl	801547c <iprintf>
        pc->custom_free_function(p);
 800b9c8:	68bb      	ldr	r3, [r7, #8]
 800b9ca:	691b      	ldr	r3, [r3, #16]
 800b9cc:	6878      	ldr	r0, [r7, #4]
 800b9ce:	4798      	blx	r3
 800b9d0:	e01d      	b.n	800ba0e <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800b9d2:	7bfb      	ldrb	r3, [r7, #15]
 800b9d4:	2b02      	cmp	r3, #2
 800b9d6:	d104      	bne.n	800b9e2 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800b9d8:	6879      	ldr	r1, [r7, #4]
 800b9da:	200c      	movs	r0, #12
 800b9dc:	f7ff f902 	bl	800abe4 <memp_free>
 800b9e0:	e015      	b.n	800ba0e <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800b9e2:	7bfb      	ldrb	r3, [r7, #15]
 800b9e4:	2b01      	cmp	r3, #1
 800b9e6:	d104      	bne.n	800b9f2 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800b9e8:	6879      	ldr	r1, [r7, #4]
 800b9ea:	200b      	movs	r0, #11
 800b9ec:	f7ff f8fa 	bl	800abe4 <memp_free>
 800b9f0:	e00d      	b.n	800ba0e <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800b9f2:	7bfb      	ldrb	r3, [r7, #15]
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d103      	bne.n	800ba00 <pbuf_free+0xd4>
          mem_free(p);
 800b9f8:	6878      	ldr	r0, [r7, #4]
 800b9fa:	f7fe fd85 	bl	800a508 <mem_free>
 800b9fe:	e006      	b.n	800ba0e <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800ba00:	4b0b      	ldr	r3, [pc, #44]	; (800ba30 <pbuf_free+0x104>)
 800ba02:	f240 320f 	movw	r2, #783	; 0x30f
 800ba06:	490f      	ldr	r1, [pc, #60]	; (800ba44 <pbuf_free+0x118>)
 800ba08:	480b      	ldr	r0, [pc, #44]	; (800ba38 <pbuf_free+0x10c>)
 800ba0a:	f009 fd37 	bl	801547c <iprintf>
        }
      }
      count++;
 800ba0e:	7ffb      	ldrb	r3, [r7, #31]
 800ba10:	3301      	adds	r3, #1
 800ba12:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800ba14:	693b      	ldr	r3, [r7, #16]
 800ba16:	607b      	str	r3, [r7, #4]
 800ba18:	e001      	b.n	800ba1e <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800ba1a:	2300      	movs	r3, #0
 800ba1c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d199      	bne.n	800b958 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800ba24:	7ffb      	ldrb	r3, [r7, #31]
}
 800ba26:	4618      	mov	r0, r3
 800ba28:	3720      	adds	r7, #32
 800ba2a:	46bd      	mov	sp, r7
 800ba2c:	bd80      	pop	{r7, pc}
 800ba2e:	bf00      	nop
 800ba30:	080174b8 	.word	0x080174b8
 800ba34:	0801761c 	.word	0x0801761c
 800ba38:	08017518 	.word	0x08017518
 800ba3c:	08017648 	.word	0x08017648
 800ba40:	08017660 	.word	0x08017660
 800ba44:	08017684 	.word	0x08017684

0800ba48 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800ba48:	b480      	push	{r7}
 800ba4a:	b085      	sub	sp, #20
 800ba4c:	af00      	add	r7, sp, #0
 800ba4e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800ba50:	2300      	movs	r3, #0
 800ba52:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800ba54:	e005      	b.n	800ba62 <pbuf_clen+0x1a>
    ++len;
 800ba56:	89fb      	ldrh	r3, [r7, #14]
 800ba58:	3301      	adds	r3, #1
 800ba5a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d1f6      	bne.n	800ba56 <pbuf_clen+0xe>
  }
  return len;
 800ba68:	89fb      	ldrh	r3, [r7, #14]
}
 800ba6a:	4618      	mov	r0, r3
 800ba6c:	3714      	adds	r7, #20
 800ba6e:	46bd      	mov	sp, r7
 800ba70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba74:	4770      	bx	lr
	...

0800ba78 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800ba78:	b580      	push	{r7, lr}
 800ba7a:	b084      	sub	sp, #16
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d016      	beq.n	800bab4 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800ba86:	f009 fb3f 	bl	8015108 <sys_arch_protect>
 800ba8a:	60f8      	str	r0, [r7, #12]
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	7b9b      	ldrb	r3, [r3, #14]
 800ba90:	3301      	adds	r3, #1
 800ba92:	b2da      	uxtb	r2, r3
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	739a      	strb	r2, [r3, #14]
 800ba98:	68f8      	ldr	r0, [r7, #12]
 800ba9a:	f009 fb43 	bl	8015124 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	7b9b      	ldrb	r3, [r3, #14]
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d106      	bne.n	800bab4 <pbuf_ref+0x3c>
 800baa6:	4b05      	ldr	r3, [pc, #20]	; (800babc <pbuf_ref+0x44>)
 800baa8:	f240 3242 	movw	r2, #834	; 0x342
 800baac:	4904      	ldr	r1, [pc, #16]	; (800bac0 <pbuf_ref+0x48>)
 800baae:	4805      	ldr	r0, [pc, #20]	; (800bac4 <pbuf_ref+0x4c>)
 800bab0:	f009 fce4 	bl	801547c <iprintf>
  }
}
 800bab4:	bf00      	nop
 800bab6:	3710      	adds	r7, #16
 800bab8:	46bd      	mov	sp, r7
 800baba:	bd80      	pop	{r7, pc}
 800babc:	080174b8 	.word	0x080174b8
 800bac0:	08017698 	.word	0x08017698
 800bac4:	08017518 	.word	0x08017518

0800bac8 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800bac8:	b580      	push	{r7, lr}
 800baca:	b084      	sub	sp, #16
 800bacc:	af00      	add	r7, sp, #0
 800bace:	6078      	str	r0, [r7, #4]
 800bad0:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d002      	beq.n	800bade <pbuf_cat+0x16>
 800bad8:	683b      	ldr	r3, [r7, #0]
 800bada:	2b00      	cmp	r3, #0
 800badc:	d107      	bne.n	800baee <pbuf_cat+0x26>
 800bade:	4b20      	ldr	r3, [pc, #128]	; (800bb60 <pbuf_cat+0x98>)
 800bae0:	f240 3259 	movw	r2, #857	; 0x359
 800bae4:	491f      	ldr	r1, [pc, #124]	; (800bb64 <pbuf_cat+0x9c>)
 800bae6:	4820      	ldr	r0, [pc, #128]	; (800bb68 <pbuf_cat+0xa0>)
 800bae8:	f009 fcc8 	bl	801547c <iprintf>
 800baec:	e034      	b.n	800bb58 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	60fb      	str	r3, [r7, #12]
 800baf2:	e00a      	b.n	800bb0a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	891a      	ldrh	r2, [r3, #8]
 800baf8:	683b      	ldr	r3, [r7, #0]
 800bafa:	891b      	ldrh	r3, [r3, #8]
 800bafc:	4413      	add	r3, r2
 800bafe:	b29a      	uxth	r2, r3
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	60fb      	str	r3, [r7, #12]
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d1f0      	bne.n	800baf4 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	891a      	ldrh	r2, [r3, #8]
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	895b      	ldrh	r3, [r3, #10]
 800bb1a:	429a      	cmp	r2, r3
 800bb1c:	d006      	beq.n	800bb2c <pbuf_cat+0x64>
 800bb1e:	4b10      	ldr	r3, [pc, #64]	; (800bb60 <pbuf_cat+0x98>)
 800bb20:	f240 3262 	movw	r2, #866	; 0x362
 800bb24:	4911      	ldr	r1, [pc, #68]	; (800bb6c <pbuf_cat+0xa4>)
 800bb26:	4810      	ldr	r0, [pc, #64]	; (800bb68 <pbuf_cat+0xa0>)
 800bb28:	f009 fca8 	bl	801547c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d006      	beq.n	800bb42 <pbuf_cat+0x7a>
 800bb34:	4b0a      	ldr	r3, [pc, #40]	; (800bb60 <pbuf_cat+0x98>)
 800bb36:	f240 3263 	movw	r2, #867	; 0x363
 800bb3a:	490d      	ldr	r1, [pc, #52]	; (800bb70 <pbuf_cat+0xa8>)
 800bb3c:	480a      	ldr	r0, [pc, #40]	; (800bb68 <pbuf_cat+0xa0>)
 800bb3e:	f009 fc9d 	bl	801547c <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	891a      	ldrh	r2, [r3, #8]
 800bb46:	683b      	ldr	r3, [r7, #0]
 800bb48:	891b      	ldrh	r3, [r3, #8]
 800bb4a:	4413      	add	r3, r2
 800bb4c:	b29a      	uxth	r2, r3
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	683a      	ldr	r2, [r7, #0]
 800bb56:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800bb58:	3710      	adds	r7, #16
 800bb5a:	46bd      	mov	sp, r7
 800bb5c:	bd80      	pop	{r7, pc}
 800bb5e:	bf00      	nop
 800bb60:	080174b8 	.word	0x080174b8
 800bb64:	080176ac 	.word	0x080176ac
 800bb68:	08017518 	.word	0x08017518
 800bb6c:	080176e4 	.word	0x080176e4
 800bb70:	08017714 	.word	0x08017714

0800bb74 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800bb74:	b580      	push	{r7, lr}
 800bb76:	b086      	sub	sp, #24
 800bb78:	af00      	add	r7, sp, #0
 800bb7a:	6078      	str	r0, [r7, #4]
 800bb7c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800bb7e:	2300      	movs	r3, #0
 800bb80:	617b      	str	r3, [r7, #20]
 800bb82:	2300      	movs	r3, #0
 800bb84:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d008      	beq.n	800bb9e <pbuf_copy+0x2a>
 800bb8c:	683b      	ldr	r3, [r7, #0]
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d005      	beq.n	800bb9e <pbuf_copy+0x2a>
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	891a      	ldrh	r2, [r3, #8]
 800bb96:	683b      	ldr	r3, [r7, #0]
 800bb98:	891b      	ldrh	r3, [r3, #8]
 800bb9a:	429a      	cmp	r2, r3
 800bb9c:	d209      	bcs.n	800bbb2 <pbuf_copy+0x3e>
 800bb9e:	4b57      	ldr	r3, [pc, #348]	; (800bcfc <pbuf_copy+0x188>)
 800bba0:	f240 32c9 	movw	r2, #969	; 0x3c9
 800bba4:	4956      	ldr	r1, [pc, #344]	; (800bd00 <pbuf_copy+0x18c>)
 800bba6:	4857      	ldr	r0, [pc, #348]	; (800bd04 <pbuf_copy+0x190>)
 800bba8:	f009 fc68 	bl	801547c <iprintf>
 800bbac:	f06f 030f 	mvn.w	r3, #15
 800bbb0:	e09f      	b.n	800bcf2 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	895b      	ldrh	r3, [r3, #10]
 800bbb6:	461a      	mov	r2, r3
 800bbb8:	697b      	ldr	r3, [r7, #20]
 800bbba:	1ad2      	subs	r2, r2, r3
 800bbbc:	683b      	ldr	r3, [r7, #0]
 800bbbe:	895b      	ldrh	r3, [r3, #10]
 800bbc0:	4619      	mov	r1, r3
 800bbc2:	693b      	ldr	r3, [r7, #16]
 800bbc4:	1acb      	subs	r3, r1, r3
 800bbc6:	429a      	cmp	r2, r3
 800bbc8:	d306      	bcc.n	800bbd8 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800bbca:	683b      	ldr	r3, [r7, #0]
 800bbcc:	895b      	ldrh	r3, [r3, #10]
 800bbce:	461a      	mov	r2, r3
 800bbd0:	693b      	ldr	r3, [r7, #16]
 800bbd2:	1ad3      	subs	r3, r2, r3
 800bbd4:	60fb      	str	r3, [r7, #12]
 800bbd6:	e005      	b.n	800bbe4 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	895b      	ldrh	r3, [r3, #10]
 800bbdc:	461a      	mov	r2, r3
 800bbde:	697b      	ldr	r3, [r7, #20]
 800bbe0:	1ad3      	subs	r3, r2, r3
 800bbe2:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	685a      	ldr	r2, [r3, #4]
 800bbe8:	697b      	ldr	r3, [r7, #20]
 800bbea:	18d0      	adds	r0, r2, r3
 800bbec:	683b      	ldr	r3, [r7, #0]
 800bbee:	685a      	ldr	r2, [r3, #4]
 800bbf0:	693b      	ldr	r3, [r7, #16]
 800bbf2:	4413      	add	r3, r2
 800bbf4:	68fa      	ldr	r2, [r7, #12]
 800bbf6:	4619      	mov	r1, r3
 800bbf8:	f009 fbcf 	bl	801539a <memcpy>
    offset_to += len;
 800bbfc:	697a      	ldr	r2, [r7, #20]
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	4413      	add	r3, r2
 800bc02:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800bc04:	693a      	ldr	r2, [r7, #16]
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	4413      	add	r3, r2
 800bc0a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	895b      	ldrh	r3, [r3, #10]
 800bc10:	461a      	mov	r2, r3
 800bc12:	697b      	ldr	r3, [r7, #20]
 800bc14:	4293      	cmp	r3, r2
 800bc16:	d906      	bls.n	800bc26 <pbuf_copy+0xb2>
 800bc18:	4b38      	ldr	r3, [pc, #224]	; (800bcfc <pbuf_copy+0x188>)
 800bc1a:	f240 32d9 	movw	r2, #985	; 0x3d9
 800bc1e:	493a      	ldr	r1, [pc, #232]	; (800bd08 <pbuf_copy+0x194>)
 800bc20:	4838      	ldr	r0, [pc, #224]	; (800bd04 <pbuf_copy+0x190>)
 800bc22:	f009 fc2b 	bl	801547c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800bc26:	683b      	ldr	r3, [r7, #0]
 800bc28:	895b      	ldrh	r3, [r3, #10]
 800bc2a:	461a      	mov	r2, r3
 800bc2c:	693b      	ldr	r3, [r7, #16]
 800bc2e:	4293      	cmp	r3, r2
 800bc30:	d906      	bls.n	800bc40 <pbuf_copy+0xcc>
 800bc32:	4b32      	ldr	r3, [pc, #200]	; (800bcfc <pbuf_copy+0x188>)
 800bc34:	f240 32da 	movw	r2, #986	; 0x3da
 800bc38:	4934      	ldr	r1, [pc, #208]	; (800bd0c <pbuf_copy+0x198>)
 800bc3a:	4832      	ldr	r0, [pc, #200]	; (800bd04 <pbuf_copy+0x190>)
 800bc3c:	f009 fc1e 	bl	801547c <iprintf>
    if (offset_from >= p_from->len) {
 800bc40:	683b      	ldr	r3, [r7, #0]
 800bc42:	895b      	ldrh	r3, [r3, #10]
 800bc44:	461a      	mov	r2, r3
 800bc46:	693b      	ldr	r3, [r7, #16]
 800bc48:	4293      	cmp	r3, r2
 800bc4a:	d304      	bcc.n	800bc56 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800bc4c:	2300      	movs	r3, #0
 800bc4e:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800bc50:	683b      	ldr	r3, [r7, #0]
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	895b      	ldrh	r3, [r3, #10]
 800bc5a:	461a      	mov	r2, r3
 800bc5c:	697b      	ldr	r3, [r7, #20]
 800bc5e:	4293      	cmp	r3, r2
 800bc60:	d114      	bne.n	800bc8c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800bc62:	2300      	movs	r3, #0
 800bc64:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d10c      	bne.n	800bc8c <pbuf_copy+0x118>
 800bc72:	683b      	ldr	r3, [r7, #0]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d009      	beq.n	800bc8c <pbuf_copy+0x118>
 800bc78:	4b20      	ldr	r3, [pc, #128]	; (800bcfc <pbuf_copy+0x188>)
 800bc7a:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800bc7e:	4924      	ldr	r1, [pc, #144]	; (800bd10 <pbuf_copy+0x19c>)
 800bc80:	4820      	ldr	r0, [pc, #128]	; (800bd04 <pbuf_copy+0x190>)
 800bc82:	f009 fbfb 	bl	801547c <iprintf>
 800bc86:	f06f 030f 	mvn.w	r3, #15
 800bc8a:	e032      	b.n	800bcf2 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800bc8c:	683b      	ldr	r3, [r7, #0]
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d013      	beq.n	800bcba <pbuf_copy+0x146>
 800bc92:	683b      	ldr	r3, [r7, #0]
 800bc94:	895a      	ldrh	r2, [r3, #10]
 800bc96:	683b      	ldr	r3, [r7, #0]
 800bc98:	891b      	ldrh	r3, [r3, #8]
 800bc9a:	429a      	cmp	r2, r3
 800bc9c:	d10d      	bne.n	800bcba <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800bc9e:	683b      	ldr	r3, [r7, #0]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d009      	beq.n	800bcba <pbuf_copy+0x146>
 800bca6:	4b15      	ldr	r3, [pc, #84]	; (800bcfc <pbuf_copy+0x188>)
 800bca8:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800bcac:	4919      	ldr	r1, [pc, #100]	; (800bd14 <pbuf_copy+0x1a0>)
 800bcae:	4815      	ldr	r0, [pc, #84]	; (800bd04 <pbuf_copy+0x190>)
 800bcb0:	f009 fbe4 	bl	801547c <iprintf>
 800bcb4:	f06f 0305 	mvn.w	r3, #5
 800bcb8:	e01b      	b.n	800bcf2 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d013      	beq.n	800bce8 <pbuf_copy+0x174>
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	895a      	ldrh	r2, [r3, #10]
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	891b      	ldrh	r3, [r3, #8]
 800bcc8:	429a      	cmp	r2, r3
 800bcca:	d10d      	bne.n	800bce8 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d009      	beq.n	800bce8 <pbuf_copy+0x174>
 800bcd4:	4b09      	ldr	r3, [pc, #36]	; (800bcfc <pbuf_copy+0x188>)
 800bcd6:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800bcda:	490e      	ldr	r1, [pc, #56]	; (800bd14 <pbuf_copy+0x1a0>)
 800bcdc:	4809      	ldr	r0, [pc, #36]	; (800bd04 <pbuf_copy+0x190>)
 800bcde:	f009 fbcd 	bl	801547c <iprintf>
 800bce2:	f06f 0305 	mvn.w	r3, #5
 800bce6:	e004      	b.n	800bcf2 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800bce8:	683b      	ldr	r3, [r7, #0]
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	f47f af61 	bne.w	800bbb2 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800bcf0:	2300      	movs	r3, #0
}
 800bcf2:	4618      	mov	r0, r3
 800bcf4:	3718      	adds	r7, #24
 800bcf6:	46bd      	mov	sp, r7
 800bcf8:	bd80      	pop	{r7, pc}
 800bcfa:	bf00      	nop
 800bcfc:	080174b8 	.word	0x080174b8
 800bd00:	08017760 	.word	0x08017760
 800bd04:	08017518 	.word	0x08017518
 800bd08:	08017790 	.word	0x08017790
 800bd0c:	080177a8 	.word	0x080177a8
 800bd10:	080177c4 	.word	0x080177c4
 800bd14:	080177d4 	.word	0x080177d4

0800bd18 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800bd18:	b580      	push	{r7, lr}
 800bd1a:	b088      	sub	sp, #32
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	60f8      	str	r0, [r7, #12]
 800bd20:	60b9      	str	r1, [r7, #8]
 800bd22:	4611      	mov	r1, r2
 800bd24:	461a      	mov	r2, r3
 800bd26:	460b      	mov	r3, r1
 800bd28:	80fb      	strh	r3, [r7, #6]
 800bd2a:	4613      	mov	r3, r2
 800bd2c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800bd2e:	2300      	movs	r3, #0
 800bd30:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800bd32:	2300      	movs	r3, #0
 800bd34:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d108      	bne.n	800bd4e <pbuf_copy_partial+0x36>
 800bd3c:	4b2b      	ldr	r3, [pc, #172]	; (800bdec <pbuf_copy_partial+0xd4>)
 800bd3e:	f240 420a 	movw	r2, #1034	; 0x40a
 800bd42:	492b      	ldr	r1, [pc, #172]	; (800bdf0 <pbuf_copy_partial+0xd8>)
 800bd44:	482b      	ldr	r0, [pc, #172]	; (800bdf4 <pbuf_copy_partial+0xdc>)
 800bd46:	f009 fb99 	bl	801547c <iprintf>
 800bd4a:	2300      	movs	r3, #0
 800bd4c:	e04a      	b.n	800bde4 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800bd4e:	68bb      	ldr	r3, [r7, #8]
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d108      	bne.n	800bd66 <pbuf_copy_partial+0x4e>
 800bd54:	4b25      	ldr	r3, [pc, #148]	; (800bdec <pbuf_copy_partial+0xd4>)
 800bd56:	f240 420b 	movw	r2, #1035	; 0x40b
 800bd5a:	4927      	ldr	r1, [pc, #156]	; (800bdf8 <pbuf_copy_partial+0xe0>)
 800bd5c:	4825      	ldr	r0, [pc, #148]	; (800bdf4 <pbuf_copy_partial+0xdc>)
 800bd5e:	f009 fb8d 	bl	801547c <iprintf>
 800bd62:	2300      	movs	r3, #0
 800bd64:	e03e      	b.n	800bde4 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	61fb      	str	r3, [r7, #28]
 800bd6a:	e034      	b.n	800bdd6 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800bd6c:	88bb      	ldrh	r3, [r7, #4]
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d00a      	beq.n	800bd88 <pbuf_copy_partial+0x70>
 800bd72:	69fb      	ldr	r3, [r7, #28]
 800bd74:	895b      	ldrh	r3, [r3, #10]
 800bd76:	88ba      	ldrh	r2, [r7, #4]
 800bd78:	429a      	cmp	r2, r3
 800bd7a:	d305      	bcc.n	800bd88 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800bd7c:	69fb      	ldr	r3, [r7, #28]
 800bd7e:	895b      	ldrh	r3, [r3, #10]
 800bd80:	88ba      	ldrh	r2, [r7, #4]
 800bd82:	1ad3      	subs	r3, r2, r3
 800bd84:	80bb      	strh	r3, [r7, #4]
 800bd86:	e023      	b.n	800bdd0 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800bd88:	69fb      	ldr	r3, [r7, #28]
 800bd8a:	895a      	ldrh	r2, [r3, #10]
 800bd8c:	88bb      	ldrh	r3, [r7, #4]
 800bd8e:	1ad3      	subs	r3, r2, r3
 800bd90:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800bd92:	8b3a      	ldrh	r2, [r7, #24]
 800bd94:	88fb      	ldrh	r3, [r7, #6]
 800bd96:	429a      	cmp	r2, r3
 800bd98:	d901      	bls.n	800bd9e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800bd9a:	88fb      	ldrh	r3, [r7, #6]
 800bd9c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800bd9e:	8b7b      	ldrh	r3, [r7, #26]
 800bda0:	68ba      	ldr	r2, [r7, #8]
 800bda2:	18d0      	adds	r0, r2, r3
 800bda4:	69fb      	ldr	r3, [r7, #28]
 800bda6:	685a      	ldr	r2, [r3, #4]
 800bda8:	88bb      	ldrh	r3, [r7, #4]
 800bdaa:	4413      	add	r3, r2
 800bdac:	8b3a      	ldrh	r2, [r7, #24]
 800bdae:	4619      	mov	r1, r3
 800bdb0:	f009 faf3 	bl	801539a <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800bdb4:	8afa      	ldrh	r2, [r7, #22]
 800bdb6:	8b3b      	ldrh	r3, [r7, #24]
 800bdb8:	4413      	add	r3, r2
 800bdba:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800bdbc:	8b7a      	ldrh	r2, [r7, #26]
 800bdbe:	8b3b      	ldrh	r3, [r7, #24]
 800bdc0:	4413      	add	r3, r2
 800bdc2:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800bdc4:	88fa      	ldrh	r2, [r7, #6]
 800bdc6:	8b3b      	ldrh	r3, [r7, #24]
 800bdc8:	1ad3      	subs	r3, r2, r3
 800bdca:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800bdcc:	2300      	movs	r3, #0
 800bdce:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800bdd0:	69fb      	ldr	r3, [r7, #28]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	61fb      	str	r3, [r7, #28]
 800bdd6:	88fb      	ldrh	r3, [r7, #6]
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d002      	beq.n	800bde2 <pbuf_copy_partial+0xca>
 800bddc:	69fb      	ldr	r3, [r7, #28]
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d1c4      	bne.n	800bd6c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800bde2:	8afb      	ldrh	r3, [r7, #22]
}
 800bde4:	4618      	mov	r0, r3
 800bde6:	3720      	adds	r7, #32
 800bde8:	46bd      	mov	sp, r7
 800bdea:	bd80      	pop	{r7, pc}
 800bdec:	080174b8 	.word	0x080174b8
 800bdf0:	08017800 	.word	0x08017800
 800bdf4:	08017518 	.word	0x08017518
 800bdf8:	08017820 	.word	0x08017820

0800bdfc <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800bdfc:	b580      	push	{r7, lr}
 800bdfe:	b084      	sub	sp, #16
 800be00:	af00      	add	r7, sp, #0
 800be02:	4603      	mov	r3, r0
 800be04:	603a      	str	r2, [r7, #0]
 800be06:	71fb      	strb	r3, [r7, #7]
 800be08:	460b      	mov	r3, r1
 800be0a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800be0c:	683b      	ldr	r3, [r7, #0]
 800be0e:	8919      	ldrh	r1, [r3, #8]
 800be10:	88ba      	ldrh	r2, [r7, #4]
 800be12:	79fb      	ldrb	r3, [r7, #7]
 800be14:	4618      	mov	r0, r3
 800be16:	f7ff faa5 	bl	800b364 <pbuf_alloc>
 800be1a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d101      	bne.n	800be26 <pbuf_clone+0x2a>
    return NULL;
 800be22:	2300      	movs	r3, #0
 800be24:	e011      	b.n	800be4a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800be26:	6839      	ldr	r1, [r7, #0]
 800be28:	68f8      	ldr	r0, [r7, #12]
 800be2a:	f7ff fea3 	bl	800bb74 <pbuf_copy>
 800be2e:	4603      	mov	r3, r0
 800be30:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800be32:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800be36:	2b00      	cmp	r3, #0
 800be38:	d006      	beq.n	800be48 <pbuf_clone+0x4c>
 800be3a:	4b06      	ldr	r3, [pc, #24]	; (800be54 <pbuf_clone+0x58>)
 800be3c:	f240 5224 	movw	r2, #1316	; 0x524
 800be40:	4905      	ldr	r1, [pc, #20]	; (800be58 <pbuf_clone+0x5c>)
 800be42:	4806      	ldr	r0, [pc, #24]	; (800be5c <pbuf_clone+0x60>)
 800be44:	f009 fb1a 	bl	801547c <iprintf>
  return q;
 800be48:	68fb      	ldr	r3, [r7, #12]
}
 800be4a:	4618      	mov	r0, r3
 800be4c:	3710      	adds	r7, #16
 800be4e:	46bd      	mov	sp, r7
 800be50:	bd80      	pop	{r7, pc}
 800be52:	bf00      	nop
 800be54:	080174b8 	.word	0x080174b8
 800be58:	0801792c 	.word	0x0801792c
 800be5c:	08017518 	.word	0x08017518

0800be60 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800be60:	b580      	push	{r7, lr}
 800be62:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800be64:	f009 fb22 	bl	80154ac <rand>
 800be68:	4603      	mov	r3, r0
 800be6a:	b29b      	uxth	r3, r3
 800be6c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800be70:	b29b      	uxth	r3, r3
 800be72:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800be76:	b29a      	uxth	r2, r3
 800be78:	4b01      	ldr	r3, [pc, #4]	; (800be80 <tcp_init+0x20>)
 800be7a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800be7c:	bf00      	nop
 800be7e:	bd80      	pop	{r7, pc}
 800be80:	20000010 	.word	0x20000010

0800be84 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800be84:	b580      	push	{r7, lr}
 800be86:	b082      	sub	sp, #8
 800be88:	af00      	add	r7, sp, #0
 800be8a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	7d1b      	ldrb	r3, [r3, #20]
 800be90:	2b01      	cmp	r3, #1
 800be92:	d105      	bne.n	800bea0 <tcp_free+0x1c>
 800be94:	4b06      	ldr	r3, [pc, #24]	; (800beb0 <tcp_free+0x2c>)
 800be96:	22d4      	movs	r2, #212	; 0xd4
 800be98:	4906      	ldr	r1, [pc, #24]	; (800beb4 <tcp_free+0x30>)
 800be9a:	4807      	ldr	r0, [pc, #28]	; (800beb8 <tcp_free+0x34>)
 800be9c:	f009 faee 	bl	801547c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800bea0:	6879      	ldr	r1, [r7, #4]
 800bea2:	2001      	movs	r0, #1
 800bea4:	f7fe fe9e 	bl	800abe4 <memp_free>
}
 800bea8:	bf00      	nop
 800beaa:	3708      	adds	r7, #8
 800beac:	46bd      	mov	sp, r7
 800beae:	bd80      	pop	{r7, pc}
 800beb0:	080179b8 	.word	0x080179b8
 800beb4:	080179e8 	.word	0x080179e8
 800beb8:	080179fc 	.word	0x080179fc

0800bebc <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800bebc:	b580      	push	{r7, lr}
 800bebe:	b082      	sub	sp, #8
 800bec0:	af00      	add	r7, sp, #0
 800bec2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	7d1b      	ldrb	r3, [r3, #20]
 800bec8:	2b01      	cmp	r3, #1
 800beca:	d105      	bne.n	800bed8 <tcp_free_listen+0x1c>
 800becc:	4b06      	ldr	r3, [pc, #24]	; (800bee8 <tcp_free_listen+0x2c>)
 800bece:	22df      	movs	r2, #223	; 0xdf
 800bed0:	4906      	ldr	r1, [pc, #24]	; (800beec <tcp_free_listen+0x30>)
 800bed2:	4807      	ldr	r0, [pc, #28]	; (800bef0 <tcp_free_listen+0x34>)
 800bed4:	f009 fad2 	bl	801547c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800bed8:	6879      	ldr	r1, [r7, #4]
 800beda:	2002      	movs	r0, #2
 800bedc:	f7fe fe82 	bl	800abe4 <memp_free>
}
 800bee0:	bf00      	nop
 800bee2:	3708      	adds	r7, #8
 800bee4:	46bd      	mov	sp, r7
 800bee6:	bd80      	pop	{r7, pc}
 800bee8:	080179b8 	.word	0x080179b8
 800beec:	08017a24 	.word	0x08017a24
 800bef0:	080179fc 	.word	0x080179fc

0800bef4 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800bef4:	b580      	push	{r7, lr}
 800bef6:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800bef8:	f001 f8a6 	bl	800d048 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800befc:	4b07      	ldr	r3, [pc, #28]	; (800bf1c <tcp_tmr+0x28>)
 800befe:	781b      	ldrb	r3, [r3, #0]
 800bf00:	3301      	adds	r3, #1
 800bf02:	b2da      	uxtb	r2, r3
 800bf04:	4b05      	ldr	r3, [pc, #20]	; (800bf1c <tcp_tmr+0x28>)
 800bf06:	701a      	strb	r2, [r3, #0]
 800bf08:	4b04      	ldr	r3, [pc, #16]	; (800bf1c <tcp_tmr+0x28>)
 800bf0a:	781b      	ldrb	r3, [r3, #0]
 800bf0c:	f003 0301 	and.w	r3, r3, #1
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d001      	beq.n	800bf18 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800bf14:	f000 fd58 	bl	800c9c8 <tcp_slowtmr>
  }
}
 800bf18:	bf00      	nop
 800bf1a:	bd80      	pop	{r7, pc}
 800bf1c:	20004ac9 	.word	0x20004ac9

0800bf20 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800bf20:	b580      	push	{r7, lr}
 800bf22:	b084      	sub	sp, #16
 800bf24:	af00      	add	r7, sp, #0
 800bf26:	6078      	str	r0, [r7, #4]
 800bf28:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800bf2a:	683b      	ldr	r3, [r7, #0]
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d105      	bne.n	800bf3c <tcp_remove_listener+0x1c>
 800bf30:	4b0d      	ldr	r3, [pc, #52]	; (800bf68 <tcp_remove_listener+0x48>)
 800bf32:	22ff      	movs	r2, #255	; 0xff
 800bf34:	490d      	ldr	r1, [pc, #52]	; (800bf6c <tcp_remove_listener+0x4c>)
 800bf36:	480e      	ldr	r0, [pc, #56]	; (800bf70 <tcp_remove_listener+0x50>)
 800bf38:	f009 faa0 	bl	801547c <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	60fb      	str	r3, [r7, #12]
 800bf40:	e00a      	b.n	800bf58 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bf46:	683a      	ldr	r2, [r7, #0]
 800bf48:	429a      	cmp	r2, r3
 800bf4a:	d102      	bne.n	800bf52 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	2200      	movs	r2, #0
 800bf50:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	68db      	ldr	r3, [r3, #12]
 800bf56:	60fb      	str	r3, [r7, #12]
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d1f1      	bne.n	800bf42 <tcp_remove_listener+0x22>
    }
  }
}
 800bf5e:	bf00      	nop
 800bf60:	bf00      	nop
 800bf62:	3710      	adds	r7, #16
 800bf64:	46bd      	mov	sp, r7
 800bf66:	bd80      	pop	{r7, pc}
 800bf68:	080179b8 	.word	0x080179b8
 800bf6c:	08017a40 	.word	0x08017a40
 800bf70:	080179fc 	.word	0x080179fc

0800bf74 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800bf74:	b580      	push	{r7, lr}
 800bf76:	b084      	sub	sp, #16
 800bf78:	af00      	add	r7, sp, #0
 800bf7a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d106      	bne.n	800bf90 <tcp_listen_closed+0x1c>
 800bf82:	4b14      	ldr	r3, [pc, #80]	; (800bfd4 <tcp_listen_closed+0x60>)
 800bf84:	f240 1211 	movw	r2, #273	; 0x111
 800bf88:	4913      	ldr	r1, [pc, #76]	; (800bfd8 <tcp_listen_closed+0x64>)
 800bf8a:	4814      	ldr	r0, [pc, #80]	; (800bfdc <tcp_listen_closed+0x68>)
 800bf8c:	f009 fa76 	bl	801547c <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	7d1b      	ldrb	r3, [r3, #20]
 800bf94:	2b01      	cmp	r3, #1
 800bf96:	d006      	beq.n	800bfa6 <tcp_listen_closed+0x32>
 800bf98:	4b0e      	ldr	r3, [pc, #56]	; (800bfd4 <tcp_listen_closed+0x60>)
 800bf9a:	f44f 7289 	mov.w	r2, #274	; 0x112
 800bf9e:	4910      	ldr	r1, [pc, #64]	; (800bfe0 <tcp_listen_closed+0x6c>)
 800bfa0:	480e      	ldr	r0, [pc, #56]	; (800bfdc <tcp_listen_closed+0x68>)
 800bfa2:	f009 fa6b 	bl	801547c <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800bfa6:	2301      	movs	r3, #1
 800bfa8:	60fb      	str	r3, [r7, #12]
 800bfaa:	e00b      	b.n	800bfc4 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800bfac:	4a0d      	ldr	r2, [pc, #52]	; (800bfe4 <tcp_listen_closed+0x70>)
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	6879      	ldr	r1, [r7, #4]
 800bfb8:	4618      	mov	r0, r3
 800bfba:	f7ff ffb1 	bl	800bf20 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	3301      	adds	r3, #1
 800bfc2:	60fb      	str	r3, [r7, #12]
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	2b03      	cmp	r3, #3
 800bfc8:	d9f0      	bls.n	800bfac <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800bfca:	bf00      	nop
 800bfcc:	bf00      	nop
 800bfce:	3710      	adds	r7, #16
 800bfd0:	46bd      	mov	sp, r7
 800bfd2:	bd80      	pop	{r7, pc}
 800bfd4:	080179b8 	.word	0x080179b8
 800bfd8:	08017a68 	.word	0x08017a68
 800bfdc:	080179fc 	.word	0x080179fc
 800bfe0:	08017a74 	.word	0x08017a74
 800bfe4:	08019c18 	.word	0x08019c18

0800bfe8 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800bfe8:	b5b0      	push	{r4, r5, r7, lr}
 800bfea:	b088      	sub	sp, #32
 800bfec:	af04      	add	r7, sp, #16
 800bfee:	6078      	str	r0, [r7, #4]
 800bff0:	460b      	mov	r3, r1
 800bff2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d106      	bne.n	800c008 <tcp_close_shutdown+0x20>
 800bffa:	4b63      	ldr	r3, [pc, #396]	; (800c188 <tcp_close_shutdown+0x1a0>)
 800bffc:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800c000:	4962      	ldr	r1, [pc, #392]	; (800c18c <tcp_close_shutdown+0x1a4>)
 800c002:	4863      	ldr	r0, [pc, #396]	; (800c190 <tcp_close_shutdown+0x1a8>)
 800c004:	f009 fa3a 	bl	801547c <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800c008:	78fb      	ldrb	r3, [r7, #3]
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d066      	beq.n	800c0dc <tcp_close_shutdown+0xf4>
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	7d1b      	ldrb	r3, [r3, #20]
 800c012:	2b04      	cmp	r3, #4
 800c014:	d003      	beq.n	800c01e <tcp_close_shutdown+0x36>
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	7d1b      	ldrb	r3, [r3, #20]
 800c01a:	2b07      	cmp	r3, #7
 800c01c:	d15e      	bne.n	800c0dc <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c022:	2b00      	cmp	r3, #0
 800c024:	d104      	bne.n	800c030 <tcp_close_shutdown+0x48>
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c02a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800c02e:	d055      	beq.n	800c0dc <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	8b5b      	ldrh	r3, [r3, #26]
 800c034:	f003 0310 	and.w	r3, r3, #16
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d106      	bne.n	800c04a <tcp_close_shutdown+0x62>
 800c03c:	4b52      	ldr	r3, [pc, #328]	; (800c188 <tcp_close_shutdown+0x1a0>)
 800c03e:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800c042:	4954      	ldr	r1, [pc, #336]	; (800c194 <tcp_close_shutdown+0x1ac>)
 800c044:	4852      	ldr	r0, [pc, #328]	; (800c190 <tcp_close_shutdown+0x1a8>)
 800c046:	f009 fa19 	bl	801547c <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800c052:	687d      	ldr	r5, [r7, #4]
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	3304      	adds	r3, #4
 800c058:	687a      	ldr	r2, [r7, #4]
 800c05a:	8ad2      	ldrh	r2, [r2, #22]
 800c05c:	6879      	ldr	r1, [r7, #4]
 800c05e:	8b09      	ldrh	r1, [r1, #24]
 800c060:	9102      	str	r1, [sp, #8]
 800c062:	9201      	str	r2, [sp, #4]
 800c064:	9300      	str	r3, [sp, #0]
 800c066:	462b      	mov	r3, r5
 800c068:	4622      	mov	r2, r4
 800c06a:	4601      	mov	r1, r0
 800c06c:	6878      	ldr	r0, [r7, #4]
 800c06e:	f005 fdb7 	bl	8011be0 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800c072:	6878      	ldr	r0, [r7, #4]
 800c074:	f001 fb98 	bl	800d7a8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800c078:	4b47      	ldr	r3, [pc, #284]	; (800c198 <tcp_close_shutdown+0x1b0>)
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	687a      	ldr	r2, [r7, #4]
 800c07e:	429a      	cmp	r2, r3
 800c080:	d105      	bne.n	800c08e <tcp_close_shutdown+0xa6>
 800c082:	4b45      	ldr	r3, [pc, #276]	; (800c198 <tcp_close_shutdown+0x1b0>)
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	68db      	ldr	r3, [r3, #12]
 800c088:	4a43      	ldr	r2, [pc, #268]	; (800c198 <tcp_close_shutdown+0x1b0>)
 800c08a:	6013      	str	r3, [r2, #0]
 800c08c:	e013      	b.n	800c0b6 <tcp_close_shutdown+0xce>
 800c08e:	4b42      	ldr	r3, [pc, #264]	; (800c198 <tcp_close_shutdown+0x1b0>)
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	60fb      	str	r3, [r7, #12]
 800c094:	e00c      	b.n	800c0b0 <tcp_close_shutdown+0xc8>
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	68db      	ldr	r3, [r3, #12]
 800c09a:	687a      	ldr	r2, [r7, #4]
 800c09c:	429a      	cmp	r2, r3
 800c09e:	d104      	bne.n	800c0aa <tcp_close_shutdown+0xc2>
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	68da      	ldr	r2, [r3, #12]
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	60da      	str	r2, [r3, #12]
 800c0a8:	e005      	b.n	800c0b6 <tcp_close_shutdown+0xce>
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	68db      	ldr	r3, [r3, #12]
 800c0ae:	60fb      	str	r3, [r7, #12]
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d1ef      	bne.n	800c096 <tcp_close_shutdown+0xae>
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	2200      	movs	r2, #0
 800c0ba:	60da      	str	r2, [r3, #12]
 800c0bc:	4b37      	ldr	r3, [pc, #220]	; (800c19c <tcp_close_shutdown+0x1b4>)
 800c0be:	2201      	movs	r2, #1
 800c0c0:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800c0c2:	4b37      	ldr	r3, [pc, #220]	; (800c1a0 <tcp_close_shutdown+0x1b8>)
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	687a      	ldr	r2, [r7, #4]
 800c0c8:	429a      	cmp	r2, r3
 800c0ca:	d102      	bne.n	800c0d2 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800c0cc:	f004 f82c 	bl	8010128 <tcp_trigger_input_pcb_close>
 800c0d0:	e002      	b.n	800c0d8 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800c0d2:	6878      	ldr	r0, [r7, #4]
 800c0d4:	f7ff fed6 	bl	800be84 <tcp_free>
      }
      return ERR_OK;
 800c0d8:	2300      	movs	r3, #0
 800c0da:	e050      	b.n	800c17e <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	7d1b      	ldrb	r3, [r3, #20]
 800c0e0:	2b02      	cmp	r3, #2
 800c0e2:	d03b      	beq.n	800c15c <tcp_close_shutdown+0x174>
 800c0e4:	2b02      	cmp	r3, #2
 800c0e6:	dc44      	bgt.n	800c172 <tcp_close_shutdown+0x18a>
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d002      	beq.n	800c0f2 <tcp_close_shutdown+0x10a>
 800c0ec:	2b01      	cmp	r3, #1
 800c0ee:	d02a      	beq.n	800c146 <tcp_close_shutdown+0x15e>
 800c0f0:	e03f      	b.n	800c172 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	8adb      	ldrh	r3, [r3, #22]
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d021      	beq.n	800c13e <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800c0fa:	4b2a      	ldr	r3, [pc, #168]	; (800c1a4 <tcp_close_shutdown+0x1bc>)
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	687a      	ldr	r2, [r7, #4]
 800c100:	429a      	cmp	r2, r3
 800c102:	d105      	bne.n	800c110 <tcp_close_shutdown+0x128>
 800c104:	4b27      	ldr	r3, [pc, #156]	; (800c1a4 <tcp_close_shutdown+0x1bc>)
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	68db      	ldr	r3, [r3, #12]
 800c10a:	4a26      	ldr	r2, [pc, #152]	; (800c1a4 <tcp_close_shutdown+0x1bc>)
 800c10c:	6013      	str	r3, [r2, #0]
 800c10e:	e013      	b.n	800c138 <tcp_close_shutdown+0x150>
 800c110:	4b24      	ldr	r3, [pc, #144]	; (800c1a4 <tcp_close_shutdown+0x1bc>)
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	60bb      	str	r3, [r7, #8]
 800c116:	e00c      	b.n	800c132 <tcp_close_shutdown+0x14a>
 800c118:	68bb      	ldr	r3, [r7, #8]
 800c11a:	68db      	ldr	r3, [r3, #12]
 800c11c:	687a      	ldr	r2, [r7, #4]
 800c11e:	429a      	cmp	r2, r3
 800c120:	d104      	bne.n	800c12c <tcp_close_shutdown+0x144>
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	68da      	ldr	r2, [r3, #12]
 800c126:	68bb      	ldr	r3, [r7, #8]
 800c128:	60da      	str	r2, [r3, #12]
 800c12a:	e005      	b.n	800c138 <tcp_close_shutdown+0x150>
 800c12c:	68bb      	ldr	r3, [r7, #8]
 800c12e:	68db      	ldr	r3, [r3, #12]
 800c130:	60bb      	str	r3, [r7, #8]
 800c132:	68bb      	ldr	r3, [r7, #8]
 800c134:	2b00      	cmp	r3, #0
 800c136:	d1ef      	bne.n	800c118 <tcp_close_shutdown+0x130>
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	2200      	movs	r2, #0
 800c13c:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800c13e:	6878      	ldr	r0, [r7, #4]
 800c140:	f7ff fea0 	bl	800be84 <tcp_free>
      break;
 800c144:	e01a      	b.n	800c17c <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800c146:	6878      	ldr	r0, [r7, #4]
 800c148:	f7ff ff14 	bl	800bf74 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800c14c:	6879      	ldr	r1, [r7, #4]
 800c14e:	4816      	ldr	r0, [pc, #88]	; (800c1a8 <tcp_close_shutdown+0x1c0>)
 800c150:	f001 fb7a 	bl	800d848 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800c154:	6878      	ldr	r0, [r7, #4]
 800c156:	f7ff feb1 	bl	800bebc <tcp_free_listen>
      break;
 800c15a:	e00f      	b.n	800c17c <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800c15c:	6879      	ldr	r1, [r7, #4]
 800c15e:	480e      	ldr	r0, [pc, #56]	; (800c198 <tcp_close_shutdown+0x1b0>)
 800c160:	f001 fb72 	bl	800d848 <tcp_pcb_remove>
 800c164:	4b0d      	ldr	r3, [pc, #52]	; (800c19c <tcp_close_shutdown+0x1b4>)
 800c166:	2201      	movs	r2, #1
 800c168:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800c16a:	6878      	ldr	r0, [r7, #4]
 800c16c:	f7ff fe8a 	bl	800be84 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800c170:	e004      	b.n	800c17c <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800c172:	6878      	ldr	r0, [r7, #4]
 800c174:	f000 f81a 	bl	800c1ac <tcp_close_shutdown_fin>
 800c178:	4603      	mov	r3, r0
 800c17a:	e000      	b.n	800c17e <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800c17c:	2300      	movs	r3, #0
}
 800c17e:	4618      	mov	r0, r3
 800c180:	3710      	adds	r7, #16
 800c182:	46bd      	mov	sp, r7
 800c184:	bdb0      	pop	{r4, r5, r7, pc}
 800c186:	bf00      	nop
 800c188:	080179b8 	.word	0x080179b8
 800c18c:	08017a8c 	.word	0x08017a8c
 800c190:	080179fc 	.word	0x080179fc
 800c194:	08017aac 	.word	0x08017aac
 800c198:	2000bda4 	.word	0x2000bda4
 800c19c:	2000bda0 	.word	0x2000bda0
 800c1a0:	2000bdb8 	.word	0x2000bdb8
 800c1a4:	2000bdb0 	.word	0x2000bdb0
 800c1a8:	2000bdac 	.word	0x2000bdac

0800c1ac <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800c1ac:	b580      	push	{r7, lr}
 800c1ae:	b084      	sub	sp, #16
 800c1b0:	af00      	add	r7, sp, #0
 800c1b2:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d106      	bne.n	800c1c8 <tcp_close_shutdown_fin+0x1c>
 800c1ba:	4b2e      	ldr	r3, [pc, #184]	; (800c274 <tcp_close_shutdown_fin+0xc8>)
 800c1bc:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800c1c0:	492d      	ldr	r1, [pc, #180]	; (800c278 <tcp_close_shutdown_fin+0xcc>)
 800c1c2:	482e      	ldr	r0, [pc, #184]	; (800c27c <tcp_close_shutdown_fin+0xd0>)
 800c1c4:	f009 f95a 	bl	801547c <iprintf>

  switch (pcb->state) {
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	7d1b      	ldrb	r3, [r3, #20]
 800c1cc:	2b07      	cmp	r3, #7
 800c1ce:	d020      	beq.n	800c212 <tcp_close_shutdown_fin+0x66>
 800c1d0:	2b07      	cmp	r3, #7
 800c1d2:	dc2b      	bgt.n	800c22c <tcp_close_shutdown_fin+0x80>
 800c1d4:	2b03      	cmp	r3, #3
 800c1d6:	d002      	beq.n	800c1de <tcp_close_shutdown_fin+0x32>
 800c1d8:	2b04      	cmp	r3, #4
 800c1da:	d00d      	beq.n	800c1f8 <tcp_close_shutdown_fin+0x4c>
 800c1dc:	e026      	b.n	800c22c <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800c1de:	6878      	ldr	r0, [r7, #4]
 800c1e0:	f004 fe0c 	bl	8010dfc <tcp_send_fin>
 800c1e4:	4603      	mov	r3, r0
 800c1e6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c1e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d11f      	bne.n	800c230 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	2205      	movs	r2, #5
 800c1f4:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c1f6:	e01b      	b.n	800c230 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800c1f8:	6878      	ldr	r0, [r7, #4]
 800c1fa:	f004 fdff 	bl	8010dfc <tcp_send_fin>
 800c1fe:	4603      	mov	r3, r0
 800c200:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c202:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c206:	2b00      	cmp	r3, #0
 800c208:	d114      	bne.n	800c234 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	2205      	movs	r2, #5
 800c20e:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c210:	e010      	b.n	800c234 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800c212:	6878      	ldr	r0, [r7, #4]
 800c214:	f004 fdf2 	bl	8010dfc <tcp_send_fin>
 800c218:	4603      	mov	r3, r0
 800c21a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c21c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c220:	2b00      	cmp	r3, #0
 800c222:	d109      	bne.n	800c238 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	2209      	movs	r2, #9
 800c228:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c22a:	e005      	b.n	800c238 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800c22c:	2300      	movs	r3, #0
 800c22e:	e01c      	b.n	800c26a <tcp_close_shutdown_fin+0xbe>
      break;
 800c230:	bf00      	nop
 800c232:	e002      	b.n	800c23a <tcp_close_shutdown_fin+0x8e>
      break;
 800c234:	bf00      	nop
 800c236:	e000      	b.n	800c23a <tcp_close_shutdown_fin+0x8e>
      break;
 800c238:	bf00      	nop
  }

  if (err == ERR_OK) {
 800c23a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d103      	bne.n	800c24a <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800c242:	6878      	ldr	r0, [r7, #4]
 800c244:	f004 ff18 	bl	8011078 <tcp_output>
 800c248:	e00d      	b.n	800c266 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800c24a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c24e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c252:	d108      	bne.n	800c266 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	8b5b      	ldrh	r3, [r3, #26]
 800c258:	f043 0308 	orr.w	r3, r3, #8
 800c25c:	b29a      	uxth	r2, r3
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800c262:	2300      	movs	r3, #0
 800c264:	e001      	b.n	800c26a <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800c266:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c26a:	4618      	mov	r0, r3
 800c26c:	3710      	adds	r7, #16
 800c26e:	46bd      	mov	sp, r7
 800c270:	bd80      	pop	{r7, pc}
 800c272:	bf00      	nop
 800c274:	080179b8 	.word	0x080179b8
 800c278:	08017a68 	.word	0x08017a68
 800c27c:	080179fc 	.word	0x080179fc

0800c280 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800c280:	b580      	push	{r7, lr}
 800c282:	b082      	sub	sp, #8
 800c284:	af00      	add	r7, sp, #0
 800c286:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d109      	bne.n	800c2a2 <tcp_close+0x22>
 800c28e:	4b0f      	ldr	r3, [pc, #60]	; (800c2cc <tcp_close+0x4c>)
 800c290:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800c294:	490e      	ldr	r1, [pc, #56]	; (800c2d0 <tcp_close+0x50>)
 800c296:	480f      	ldr	r0, [pc, #60]	; (800c2d4 <tcp_close+0x54>)
 800c298:	f009 f8f0 	bl	801547c <iprintf>
 800c29c:	f06f 030f 	mvn.w	r3, #15
 800c2a0:	e00f      	b.n	800c2c2 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	7d1b      	ldrb	r3, [r3, #20]
 800c2a6:	2b01      	cmp	r3, #1
 800c2a8:	d006      	beq.n	800c2b8 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	8b5b      	ldrh	r3, [r3, #26]
 800c2ae:	f043 0310 	orr.w	r3, r3, #16
 800c2b2:	b29a      	uxth	r2, r3
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800c2b8:	2101      	movs	r1, #1
 800c2ba:	6878      	ldr	r0, [r7, #4]
 800c2bc:	f7ff fe94 	bl	800bfe8 <tcp_close_shutdown>
 800c2c0:	4603      	mov	r3, r0
}
 800c2c2:	4618      	mov	r0, r3
 800c2c4:	3708      	adds	r7, #8
 800c2c6:	46bd      	mov	sp, r7
 800c2c8:	bd80      	pop	{r7, pc}
 800c2ca:	bf00      	nop
 800c2cc:	080179b8 	.word	0x080179b8
 800c2d0:	08017ac8 	.word	0x08017ac8
 800c2d4:	080179fc 	.word	0x080179fc

0800c2d8 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800c2d8:	b580      	push	{r7, lr}
 800c2da:	b084      	sub	sp, #16
 800c2dc:	af00      	add	r7, sp, #0
 800c2de:	60f8      	str	r0, [r7, #12]
 800c2e0:	60b9      	str	r1, [r7, #8]
 800c2e2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d109      	bne.n	800c2fe <tcp_shutdown+0x26>
 800c2ea:	4b26      	ldr	r3, [pc, #152]	; (800c384 <tcp_shutdown+0xac>)
 800c2ec:	f240 2207 	movw	r2, #519	; 0x207
 800c2f0:	4925      	ldr	r1, [pc, #148]	; (800c388 <tcp_shutdown+0xb0>)
 800c2f2:	4826      	ldr	r0, [pc, #152]	; (800c38c <tcp_shutdown+0xb4>)
 800c2f4:	f009 f8c2 	bl	801547c <iprintf>
 800c2f8:	f06f 030f 	mvn.w	r3, #15
 800c2fc:	e03d      	b.n	800c37a <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	7d1b      	ldrb	r3, [r3, #20]
 800c302:	2b01      	cmp	r3, #1
 800c304:	d102      	bne.n	800c30c <tcp_shutdown+0x34>
    return ERR_CONN;
 800c306:	f06f 030a 	mvn.w	r3, #10
 800c30a:	e036      	b.n	800c37a <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 800c30c:	68bb      	ldr	r3, [r7, #8]
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d01b      	beq.n	800c34a <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	8b5b      	ldrh	r3, [r3, #26]
 800c316:	f043 0310 	orr.w	r3, r3, #16
 800c31a:	b29a      	uxth	r2, r3
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	2b00      	cmp	r3, #0
 800c324:	d005      	beq.n	800c332 <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800c326:	2101      	movs	r1, #1
 800c328:	68f8      	ldr	r0, [r7, #12]
 800c32a:	f7ff fe5d 	bl	800bfe8 <tcp_close_shutdown>
 800c32e:	4603      	mov	r3, r0
 800c330:	e023      	b.n	800c37a <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c336:	2b00      	cmp	r3, #0
 800c338:	d007      	beq.n	800c34a <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c33e:	4618      	mov	r0, r3
 800c340:	f7ff faf4 	bl	800b92c <pbuf_free>
      pcb->refused_data = NULL;
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	2200      	movs	r2, #0
 800c348:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d013      	beq.n	800c378 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	7d1b      	ldrb	r3, [r3, #20]
 800c354:	2b04      	cmp	r3, #4
 800c356:	dc02      	bgt.n	800c35e <tcp_shutdown+0x86>
 800c358:	2b03      	cmp	r3, #3
 800c35a:	da02      	bge.n	800c362 <tcp_shutdown+0x8a>
 800c35c:	e009      	b.n	800c372 <tcp_shutdown+0x9a>
 800c35e:	2b07      	cmp	r3, #7
 800c360:	d107      	bne.n	800c372 <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800c362:	68bb      	ldr	r3, [r7, #8]
 800c364:	b2db      	uxtb	r3, r3
 800c366:	4619      	mov	r1, r3
 800c368:	68f8      	ldr	r0, [r7, #12]
 800c36a:	f7ff fe3d 	bl	800bfe8 <tcp_close_shutdown>
 800c36e:	4603      	mov	r3, r0
 800c370:	e003      	b.n	800c37a <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 800c372:	f06f 030a 	mvn.w	r3, #10
 800c376:	e000      	b.n	800c37a <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 800c378:	2300      	movs	r3, #0
}
 800c37a:	4618      	mov	r0, r3
 800c37c:	3710      	adds	r7, #16
 800c37e:	46bd      	mov	sp, r7
 800c380:	bd80      	pop	{r7, pc}
 800c382:	bf00      	nop
 800c384:	080179b8 	.word	0x080179b8
 800c388:	08017ae0 	.word	0x08017ae0
 800c38c:	080179fc 	.word	0x080179fc

0800c390 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800c390:	b580      	push	{r7, lr}
 800c392:	b08e      	sub	sp, #56	; 0x38
 800c394:	af04      	add	r7, sp, #16
 800c396:	6078      	str	r0, [r7, #4]
 800c398:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d107      	bne.n	800c3b0 <tcp_abandon+0x20>
 800c3a0:	4b52      	ldr	r3, [pc, #328]	; (800c4ec <tcp_abandon+0x15c>)
 800c3a2:	f240 223d 	movw	r2, #573	; 0x23d
 800c3a6:	4952      	ldr	r1, [pc, #328]	; (800c4f0 <tcp_abandon+0x160>)
 800c3a8:	4852      	ldr	r0, [pc, #328]	; (800c4f4 <tcp_abandon+0x164>)
 800c3aa:	f009 f867 	bl	801547c <iprintf>
 800c3ae:	e099      	b.n	800c4e4 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	7d1b      	ldrb	r3, [r3, #20]
 800c3b4:	2b01      	cmp	r3, #1
 800c3b6:	d106      	bne.n	800c3c6 <tcp_abandon+0x36>
 800c3b8:	4b4c      	ldr	r3, [pc, #304]	; (800c4ec <tcp_abandon+0x15c>)
 800c3ba:	f44f 7210 	mov.w	r2, #576	; 0x240
 800c3be:	494e      	ldr	r1, [pc, #312]	; (800c4f8 <tcp_abandon+0x168>)
 800c3c0:	484c      	ldr	r0, [pc, #304]	; (800c4f4 <tcp_abandon+0x164>)
 800c3c2:	f009 f85b 	bl	801547c <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	7d1b      	ldrb	r3, [r3, #20]
 800c3ca:	2b0a      	cmp	r3, #10
 800c3cc:	d107      	bne.n	800c3de <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800c3ce:	6879      	ldr	r1, [r7, #4]
 800c3d0:	484a      	ldr	r0, [pc, #296]	; (800c4fc <tcp_abandon+0x16c>)
 800c3d2:	f001 fa39 	bl	800d848 <tcp_pcb_remove>
    tcp_free(pcb);
 800c3d6:	6878      	ldr	r0, [r7, #4]
 800c3d8:	f7ff fd54 	bl	800be84 <tcp_free>
 800c3dc:	e082      	b.n	800c4e4 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800c3de:	2300      	movs	r3, #0
 800c3e0:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800c3e2:	2300      	movs	r3, #0
 800c3e4:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c3ea:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3f0:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c3f8:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	691b      	ldr	r3, [r3, #16]
 800c3fe:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	7d1b      	ldrb	r3, [r3, #20]
 800c404:	2b00      	cmp	r3, #0
 800c406:	d126      	bne.n	800c456 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	8adb      	ldrh	r3, [r3, #22]
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d02e      	beq.n	800c46e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800c410:	4b3b      	ldr	r3, [pc, #236]	; (800c500 <tcp_abandon+0x170>)
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	687a      	ldr	r2, [r7, #4]
 800c416:	429a      	cmp	r2, r3
 800c418:	d105      	bne.n	800c426 <tcp_abandon+0x96>
 800c41a:	4b39      	ldr	r3, [pc, #228]	; (800c500 <tcp_abandon+0x170>)
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	68db      	ldr	r3, [r3, #12]
 800c420:	4a37      	ldr	r2, [pc, #220]	; (800c500 <tcp_abandon+0x170>)
 800c422:	6013      	str	r3, [r2, #0]
 800c424:	e013      	b.n	800c44e <tcp_abandon+0xbe>
 800c426:	4b36      	ldr	r3, [pc, #216]	; (800c500 <tcp_abandon+0x170>)
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	61fb      	str	r3, [r7, #28]
 800c42c:	e00c      	b.n	800c448 <tcp_abandon+0xb8>
 800c42e:	69fb      	ldr	r3, [r7, #28]
 800c430:	68db      	ldr	r3, [r3, #12]
 800c432:	687a      	ldr	r2, [r7, #4]
 800c434:	429a      	cmp	r2, r3
 800c436:	d104      	bne.n	800c442 <tcp_abandon+0xb2>
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	68da      	ldr	r2, [r3, #12]
 800c43c:	69fb      	ldr	r3, [r7, #28]
 800c43e:	60da      	str	r2, [r3, #12]
 800c440:	e005      	b.n	800c44e <tcp_abandon+0xbe>
 800c442:	69fb      	ldr	r3, [r7, #28]
 800c444:	68db      	ldr	r3, [r3, #12]
 800c446:	61fb      	str	r3, [r7, #28]
 800c448:	69fb      	ldr	r3, [r7, #28]
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d1ef      	bne.n	800c42e <tcp_abandon+0x9e>
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	2200      	movs	r2, #0
 800c452:	60da      	str	r2, [r3, #12]
 800c454:	e00b      	b.n	800c46e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800c456:	683b      	ldr	r3, [r7, #0]
 800c458:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	8adb      	ldrh	r3, [r3, #22]
 800c45e:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800c460:	6879      	ldr	r1, [r7, #4]
 800c462:	4828      	ldr	r0, [pc, #160]	; (800c504 <tcp_abandon+0x174>)
 800c464:	f001 f9f0 	bl	800d848 <tcp_pcb_remove>
 800c468:	4b27      	ldr	r3, [pc, #156]	; (800c508 <tcp_abandon+0x178>)
 800c46a:	2201      	movs	r2, #1
 800c46c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c472:	2b00      	cmp	r3, #0
 800c474:	d004      	beq.n	800c480 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c47a:	4618      	mov	r0, r3
 800c47c:	f000 fec4 	bl	800d208 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c484:	2b00      	cmp	r3, #0
 800c486:	d004      	beq.n	800c492 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c48c:	4618      	mov	r0, r3
 800c48e:	f000 febb 	bl	800d208 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c496:	2b00      	cmp	r3, #0
 800c498:	d004      	beq.n	800c4a4 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c49e:	4618      	mov	r0, r3
 800c4a0:	f000 feb2 	bl	800d208 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800c4a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d00e      	beq.n	800c4c8 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800c4aa:	6879      	ldr	r1, [r7, #4]
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	3304      	adds	r3, #4
 800c4b0:	687a      	ldr	r2, [r7, #4]
 800c4b2:	8b12      	ldrh	r2, [r2, #24]
 800c4b4:	9202      	str	r2, [sp, #8]
 800c4b6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800c4b8:	9201      	str	r2, [sp, #4]
 800c4ba:	9300      	str	r3, [sp, #0]
 800c4bc:	460b      	mov	r3, r1
 800c4be:	697a      	ldr	r2, [r7, #20]
 800c4c0:	69b9      	ldr	r1, [r7, #24]
 800c4c2:	6878      	ldr	r0, [r7, #4]
 800c4c4:	f005 fb8c 	bl	8011be0 <tcp_rst>
    }
    last_state = pcb->state;
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	7d1b      	ldrb	r3, [r3, #20]
 800c4cc:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800c4ce:	6878      	ldr	r0, [r7, #4]
 800c4d0:	f7ff fcd8 	bl	800be84 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800c4d4:	693b      	ldr	r3, [r7, #16]
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d004      	beq.n	800c4e4 <tcp_abandon+0x154>
 800c4da:	693b      	ldr	r3, [r7, #16]
 800c4dc:	f06f 010c 	mvn.w	r1, #12
 800c4e0:	68f8      	ldr	r0, [r7, #12]
 800c4e2:	4798      	blx	r3
  }
}
 800c4e4:	3728      	adds	r7, #40	; 0x28
 800c4e6:	46bd      	mov	sp, r7
 800c4e8:	bd80      	pop	{r7, pc}
 800c4ea:	bf00      	nop
 800c4ec:	080179b8 	.word	0x080179b8
 800c4f0:	08017afc 	.word	0x08017afc
 800c4f4:	080179fc 	.word	0x080179fc
 800c4f8:	08017b18 	.word	0x08017b18
 800c4fc:	2000bdb4 	.word	0x2000bdb4
 800c500:	2000bdb0 	.word	0x2000bdb0
 800c504:	2000bda4 	.word	0x2000bda4
 800c508:	2000bda0 	.word	0x2000bda0

0800c50c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800c50c:	b580      	push	{r7, lr}
 800c50e:	b082      	sub	sp, #8
 800c510:	af00      	add	r7, sp, #0
 800c512:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800c514:	2101      	movs	r1, #1
 800c516:	6878      	ldr	r0, [r7, #4]
 800c518:	f7ff ff3a 	bl	800c390 <tcp_abandon>
}
 800c51c:	bf00      	nop
 800c51e:	3708      	adds	r7, #8
 800c520:	46bd      	mov	sp, r7
 800c522:	bd80      	pop	{r7, pc}

0800c524 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800c524:	b580      	push	{r7, lr}
 800c526:	b088      	sub	sp, #32
 800c528:	af00      	add	r7, sp, #0
 800c52a:	60f8      	str	r0, [r7, #12]
 800c52c:	60b9      	str	r1, [r7, #8]
 800c52e:	4613      	mov	r3, r2
 800c530:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800c532:	2304      	movs	r3, #4
 800c534:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800c536:	68bb      	ldr	r3, [r7, #8]
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d101      	bne.n	800c540 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800c53c:	4b3e      	ldr	r3, [pc, #248]	; (800c638 <tcp_bind+0x114>)
 800c53e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	2b00      	cmp	r3, #0
 800c544:	d109      	bne.n	800c55a <tcp_bind+0x36>
 800c546:	4b3d      	ldr	r3, [pc, #244]	; (800c63c <tcp_bind+0x118>)
 800c548:	f240 22a9 	movw	r2, #681	; 0x2a9
 800c54c:	493c      	ldr	r1, [pc, #240]	; (800c640 <tcp_bind+0x11c>)
 800c54e:	483d      	ldr	r0, [pc, #244]	; (800c644 <tcp_bind+0x120>)
 800c550:	f008 ff94 	bl	801547c <iprintf>
 800c554:	f06f 030f 	mvn.w	r3, #15
 800c558:	e06a      	b.n	800c630 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	7d1b      	ldrb	r3, [r3, #20]
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d009      	beq.n	800c576 <tcp_bind+0x52>
 800c562:	4b36      	ldr	r3, [pc, #216]	; (800c63c <tcp_bind+0x118>)
 800c564:	f240 22ab 	movw	r2, #683	; 0x2ab
 800c568:	4937      	ldr	r1, [pc, #220]	; (800c648 <tcp_bind+0x124>)
 800c56a:	4836      	ldr	r0, [pc, #216]	; (800c644 <tcp_bind+0x120>)
 800c56c:	f008 ff86 	bl	801547c <iprintf>
 800c570:	f06f 0305 	mvn.w	r3, #5
 800c574:	e05c      	b.n	800c630 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800c576:	88fb      	ldrh	r3, [r7, #6]
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d109      	bne.n	800c590 <tcp_bind+0x6c>
    port = tcp_new_port();
 800c57c:	f000 f9de 	bl	800c93c <tcp_new_port>
 800c580:	4603      	mov	r3, r0
 800c582:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800c584:	88fb      	ldrh	r3, [r7, #6]
 800c586:	2b00      	cmp	r3, #0
 800c588:	d135      	bne.n	800c5f6 <tcp_bind+0xd2>
      return ERR_BUF;
 800c58a:	f06f 0301 	mvn.w	r3, #1
 800c58e:	e04f      	b.n	800c630 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800c590:	2300      	movs	r3, #0
 800c592:	61fb      	str	r3, [r7, #28]
 800c594:	e02b      	b.n	800c5ee <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800c596:	4a2d      	ldr	r2, [pc, #180]	; (800c64c <tcp_bind+0x128>)
 800c598:	69fb      	ldr	r3, [r7, #28]
 800c59a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	61bb      	str	r3, [r7, #24]
 800c5a2:	e01e      	b.n	800c5e2 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800c5a4:	69bb      	ldr	r3, [r7, #24]
 800c5a6:	8adb      	ldrh	r3, [r3, #22]
 800c5a8:	88fa      	ldrh	r2, [r7, #6]
 800c5aa:	429a      	cmp	r2, r3
 800c5ac:	d116      	bne.n	800c5dc <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800c5ae:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d010      	beq.n	800c5d6 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800c5b4:	69bb      	ldr	r3, [r7, #24]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d00c      	beq.n	800c5d6 <tcp_bind+0xb2>
 800c5bc:	68bb      	ldr	r3, [r7, #8]
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d009      	beq.n	800c5d6 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800c5c2:	68bb      	ldr	r3, [r7, #8]
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d005      	beq.n	800c5d6 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800c5ca:	69bb      	ldr	r3, [r7, #24]
 800c5cc:	681a      	ldr	r2, [r3, #0]
 800c5ce:	68bb      	ldr	r3, [r7, #8]
 800c5d0:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800c5d2:	429a      	cmp	r2, r3
 800c5d4:	d102      	bne.n	800c5dc <tcp_bind+0xb8>
              return ERR_USE;
 800c5d6:	f06f 0307 	mvn.w	r3, #7
 800c5da:	e029      	b.n	800c630 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800c5dc:	69bb      	ldr	r3, [r7, #24]
 800c5de:	68db      	ldr	r3, [r3, #12]
 800c5e0:	61bb      	str	r3, [r7, #24]
 800c5e2:	69bb      	ldr	r3, [r7, #24]
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d1dd      	bne.n	800c5a4 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800c5e8:	69fb      	ldr	r3, [r7, #28]
 800c5ea:	3301      	adds	r3, #1
 800c5ec:	61fb      	str	r3, [r7, #28]
 800c5ee:	69fa      	ldr	r2, [r7, #28]
 800c5f0:	697b      	ldr	r3, [r7, #20]
 800c5f2:	429a      	cmp	r2, r3
 800c5f4:	dbcf      	blt.n	800c596 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800c5f6:	68bb      	ldr	r3, [r7, #8]
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d00c      	beq.n	800c616 <tcp_bind+0xf2>
 800c5fc:	68bb      	ldr	r3, [r7, #8]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	2b00      	cmp	r3, #0
 800c602:	d008      	beq.n	800c616 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800c604:	68bb      	ldr	r3, [r7, #8]
 800c606:	2b00      	cmp	r3, #0
 800c608:	d002      	beq.n	800c610 <tcp_bind+0xec>
 800c60a:	68bb      	ldr	r3, [r7, #8]
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	e000      	b.n	800c612 <tcp_bind+0xee>
 800c610:	2300      	movs	r3, #0
 800c612:	68fa      	ldr	r2, [r7, #12]
 800c614:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	88fa      	ldrh	r2, [r7, #6]
 800c61a:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800c61c:	4b0c      	ldr	r3, [pc, #48]	; (800c650 <tcp_bind+0x12c>)
 800c61e:	681a      	ldr	r2, [r3, #0]
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	60da      	str	r2, [r3, #12]
 800c624:	4a0a      	ldr	r2, [pc, #40]	; (800c650 <tcp_bind+0x12c>)
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	6013      	str	r3, [r2, #0]
 800c62a:	f005 fc9b 	bl	8011f64 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800c62e:	2300      	movs	r3, #0
}
 800c630:	4618      	mov	r0, r3
 800c632:	3720      	adds	r7, #32
 800c634:	46bd      	mov	sp, r7
 800c636:	bd80      	pop	{r7, pc}
 800c638:	08019c40 	.word	0x08019c40
 800c63c:	080179b8 	.word	0x080179b8
 800c640:	08017b4c 	.word	0x08017b4c
 800c644:	080179fc 	.word	0x080179fc
 800c648:	08017b64 	.word	0x08017b64
 800c64c:	08019c18 	.word	0x08019c18
 800c650:	2000bdb0 	.word	0x2000bdb0

0800c654 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800c654:	b580      	push	{r7, lr}
 800c656:	b084      	sub	sp, #16
 800c658:	af00      	add	r7, sp, #0
 800c65a:	60f8      	str	r0, [r7, #12]
 800c65c:	60b9      	str	r1, [r7, #8]
 800c65e:	4613      	mov	r3, r2
 800c660:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800c662:	68bb      	ldr	r3, [r7, #8]
 800c664:	2b00      	cmp	r3, #0
 800c666:	d106      	bne.n	800c676 <tcp_accept_null+0x22>
 800c668:	4b07      	ldr	r3, [pc, #28]	; (800c688 <tcp_accept_null+0x34>)
 800c66a:	f240 320f 	movw	r2, #783	; 0x30f
 800c66e:	4907      	ldr	r1, [pc, #28]	; (800c68c <tcp_accept_null+0x38>)
 800c670:	4807      	ldr	r0, [pc, #28]	; (800c690 <tcp_accept_null+0x3c>)
 800c672:	f008 ff03 	bl	801547c <iprintf>

  tcp_abort(pcb);
 800c676:	68b8      	ldr	r0, [r7, #8]
 800c678:	f7ff ff48 	bl	800c50c <tcp_abort>

  return ERR_ABRT;
 800c67c:	f06f 030c 	mvn.w	r3, #12
}
 800c680:	4618      	mov	r0, r3
 800c682:	3710      	adds	r7, #16
 800c684:	46bd      	mov	sp, r7
 800c686:	bd80      	pop	{r7, pc}
 800c688:	080179b8 	.word	0x080179b8
 800c68c:	08017b8c 	.word	0x08017b8c
 800c690:	080179fc 	.word	0x080179fc

0800c694 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800c694:	b580      	push	{r7, lr}
 800c696:	b088      	sub	sp, #32
 800c698:	af00      	add	r7, sp, #0
 800c69a:	60f8      	str	r0, [r7, #12]
 800c69c:	460b      	mov	r3, r1
 800c69e:	607a      	str	r2, [r7, #4]
 800c6a0:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800c6a2:	2300      	movs	r3, #0
 800c6a4:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d109      	bne.n	800c6c0 <tcp_listen_with_backlog_and_err+0x2c>
 800c6ac:	4b47      	ldr	r3, [pc, #284]	; (800c7cc <tcp_listen_with_backlog_and_err+0x138>)
 800c6ae:	f240 3259 	movw	r2, #857	; 0x359
 800c6b2:	4947      	ldr	r1, [pc, #284]	; (800c7d0 <tcp_listen_with_backlog_and_err+0x13c>)
 800c6b4:	4847      	ldr	r0, [pc, #284]	; (800c7d4 <tcp_listen_with_backlog_and_err+0x140>)
 800c6b6:	f008 fee1 	bl	801547c <iprintf>
 800c6ba:	23f0      	movs	r3, #240	; 0xf0
 800c6bc:	76fb      	strb	r3, [r7, #27]
 800c6be:	e079      	b.n	800c7b4 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	7d1b      	ldrb	r3, [r3, #20]
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d009      	beq.n	800c6dc <tcp_listen_with_backlog_and_err+0x48>
 800c6c8:	4b40      	ldr	r3, [pc, #256]	; (800c7cc <tcp_listen_with_backlog_and_err+0x138>)
 800c6ca:	f240 325a 	movw	r2, #858	; 0x35a
 800c6ce:	4942      	ldr	r1, [pc, #264]	; (800c7d8 <tcp_listen_with_backlog_and_err+0x144>)
 800c6d0:	4840      	ldr	r0, [pc, #256]	; (800c7d4 <tcp_listen_with_backlog_and_err+0x140>)
 800c6d2:	f008 fed3 	bl	801547c <iprintf>
 800c6d6:	23f1      	movs	r3, #241	; 0xf1
 800c6d8:	76fb      	strb	r3, [r7, #27]
 800c6da:	e06b      	b.n	800c7b4 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	7d1b      	ldrb	r3, [r3, #20]
 800c6e0:	2b01      	cmp	r3, #1
 800c6e2:	d104      	bne.n	800c6ee <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800c6e8:	23f7      	movs	r3, #247	; 0xf7
 800c6ea:	76fb      	strb	r3, [r7, #27]
    goto done;
 800c6ec:	e062      	b.n	800c7b4 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800c6ee:	2002      	movs	r0, #2
 800c6f0:	f7fe fa26 	bl	800ab40 <memp_malloc>
 800c6f4:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800c6f6:	69fb      	ldr	r3, [r7, #28]
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d102      	bne.n	800c702 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 800c6fc:	23ff      	movs	r3, #255	; 0xff
 800c6fe:	76fb      	strb	r3, [r7, #27]
    goto done;
 800c700:	e058      	b.n	800c7b4 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	691a      	ldr	r2, [r3, #16]
 800c706:	69fb      	ldr	r3, [r7, #28]
 800c708:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	8ada      	ldrh	r2, [r3, #22]
 800c70e:	69fb      	ldr	r3, [r7, #28]
 800c710:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800c712:	69fb      	ldr	r3, [r7, #28]
 800c714:	2201      	movs	r2, #1
 800c716:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	7d5a      	ldrb	r2, [r3, #21]
 800c71c:	69fb      	ldr	r3, [r7, #28]
 800c71e:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	7a5a      	ldrb	r2, [r3, #9]
 800c724:	69fb      	ldr	r3, [r7, #28]
 800c726:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800c728:	69fb      	ldr	r3, [r7, #28]
 800c72a:	2200      	movs	r2, #0
 800c72c:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	7ada      	ldrb	r2, [r3, #11]
 800c732:	69fb      	ldr	r3, [r7, #28]
 800c734:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	7a9a      	ldrb	r2, [r3, #10]
 800c73a:	69fb      	ldr	r3, [r7, #28]
 800c73c:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	681a      	ldr	r2, [r3, #0]
 800c742:	69fb      	ldr	r3, [r7, #28]
 800c744:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	8adb      	ldrh	r3, [r3, #22]
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d021      	beq.n	800c792 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800c74e:	4b23      	ldr	r3, [pc, #140]	; (800c7dc <tcp_listen_with_backlog_and_err+0x148>)
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	68fa      	ldr	r2, [r7, #12]
 800c754:	429a      	cmp	r2, r3
 800c756:	d105      	bne.n	800c764 <tcp_listen_with_backlog_and_err+0xd0>
 800c758:	4b20      	ldr	r3, [pc, #128]	; (800c7dc <tcp_listen_with_backlog_and_err+0x148>)
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	68db      	ldr	r3, [r3, #12]
 800c75e:	4a1f      	ldr	r2, [pc, #124]	; (800c7dc <tcp_listen_with_backlog_and_err+0x148>)
 800c760:	6013      	str	r3, [r2, #0]
 800c762:	e013      	b.n	800c78c <tcp_listen_with_backlog_and_err+0xf8>
 800c764:	4b1d      	ldr	r3, [pc, #116]	; (800c7dc <tcp_listen_with_backlog_and_err+0x148>)
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	617b      	str	r3, [r7, #20]
 800c76a:	e00c      	b.n	800c786 <tcp_listen_with_backlog_and_err+0xf2>
 800c76c:	697b      	ldr	r3, [r7, #20]
 800c76e:	68db      	ldr	r3, [r3, #12]
 800c770:	68fa      	ldr	r2, [r7, #12]
 800c772:	429a      	cmp	r2, r3
 800c774:	d104      	bne.n	800c780 <tcp_listen_with_backlog_and_err+0xec>
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	68da      	ldr	r2, [r3, #12]
 800c77a:	697b      	ldr	r3, [r7, #20]
 800c77c:	60da      	str	r2, [r3, #12]
 800c77e:	e005      	b.n	800c78c <tcp_listen_with_backlog_and_err+0xf8>
 800c780:	697b      	ldr	r3, [r7, #20]
 800c782:	68db      	ldr	r3, [r3, #12]
 800c784:	617b      	str	r3, [r7, #20]
 800c786:	697b      	ldr	r3, [r7, #20]
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d1ef      	bne.n	800c76c <tcp_listen_with_backlog_and_err+0xd8>
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	2200      	movs	r2, #0
 800c790:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800c792:	68f8      	ldr	r0, [r7, #12]
 800c794:	f7ff fb76 	bl	800be84 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800c798:	69fb      	ldr	r3, [r7, #28]
 800c79a:	4a11      	ldr	r2, [pc, #68]	; (800c7e0 <tcp_listen_with_backlog_and_err+0x14c>)
 800c79c:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800c79e:	4b11      	ldr	r3, [pc, #68]	; (800c7e4 <tcp_listen_with_backlog_and_err+0x150>)
 800c7a0:	681a      	ldr	r2, [r3, #0]
 800c7a2:	69fb      	ldr	r3, [r7, #28]
 800c7a4:	60da      	str	r2, [r3, #12]
 800c7a6:	4a0f      	ldr	r2, [pc, #60]	; (800c7e4 <tcp_listen_with_backlog_and_err+0x150>)
 800c7a8:	69fb      	ldr	r3, [r7, #28]
 800c7aa:	6013      	str	r3, [r2, #0]
 800c7ac:	f005 fbda 	bl	8011f64 <tcp_timer_needed>
  res = ERR_OK;
 800c7b0:	2300      	movs	r3, #0
 800c7b2:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d002      	beq.n	800c7c0 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	7efa      	ldrb	r2, [r7, #27]
 800c7be:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800c7c0:	69fb      	ldr	r3, [r7, #28]
}
 800c7c2:	4618      	mov	r0, r3
 800c7c4:	3720      	adds	r7, #32
 800c7c6:	46bd      	mov	sp, r7
 800c7c8:	bd80      	pop	{r7, pc}
 800c7ca:	bf00      	nop
 800c7cc:	080179b8 	.word	0x080179b8
 800c7d0:	08017bac 	.word	0x08017bac
 800c7d4:	080179fc 	.word	0x080179fc
 800c7d8:	08017bdc 	.word	0x08017bdc
 800c7dc:	2000bdb0 	.word	0x2000bdb0
 800c7e0:	0800c655 	.word	0x0800c655
 800c7e4:	2000bdac 	.word	0x2000bdac

0800c7e8 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800c7e8:	b580      	push	{r7, lr}
 800c7ea:	b084      	sub	sp, #16
 800c7ec:	af00      	add	r7, sp, #0
 800c7ee:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d106      	bne.n	800c804 <tcp_update_rcv_ann_wnd+0x1c>
 800c7f6:	4b25      	ldr	r3, [pc, #148]	; (800c88c <tcp_update_rcv_ann_wnd+0xa4>)
 800c7f8:	f240 32a6 	movw	r2, #934	; 0x3a6
 800c7fc:	4924      	ldr	r1, [pc, #144]	; (800c890 <tcp_update_rcv_ann_wnd+0xa8>)
 800c7fe:	4825      	ldr	r0, [pc, #148]	; (800c894 <tcp_update_rcv_ann_wnd+0xac>)
 800c800:	f008 fe3c 	bl	801547c <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c808:	687a      	ldr	r2, [r7, #4]
 800c80a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800c80c:	4413      	add	r3, r2
 800c80e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c814:	687a      	ldr	r2, [r7, #4]
 800c816:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800c818:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800c81c:	bf28      	it	cs
 800c81e:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800c822:	b292      	uxth	r2, r2
 800c824:	4413      	add	r3, r2
 800c826:	68fa      	ldr	r2, [r7, #12]
 800c828:	1ad3      	subs	r3, r2, r3
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	db08      	blt.n	800c840 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c83a:	68fa      	ldr	r2, [r7, #12]
 800c83c:	1ad3      	subs	r3, r2, r3
 800c83e:	e020      	b.n	800c882 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c848:	1ad3      	subs	r3, r2, r3
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	dd03      	ble.n	800c856 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	2200      	movs	r2, #0
 800c852:	855a      	strh	r2, [r3, #42]	; 0x2a
 800c854:	e014      	b.n	800c880 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c85e:	1ad3      	subs	r3, r2, r3
 800c860:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800c862:	68bb      	ldr	r3, [r7, #8]
 800c864:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c868:	d306      	bcc.n	800c878 <tcp_update_rcv_ann_wnd+0x90>
 800c86a:	4b08      	ldr	r3, [pc, #32]	; (800c88c <tcp_update_rcv_ann_wnd+0xa4>)
 800c86c:	f240 32b6 	movw	r2, #950	; 0x3b6
 800c870:	4909      	ldr	r1, [pc, #36]	; (800c898 <tcp_update_rcv_ann_wnd+0xb0>)
 800c872:	4808      	ldr	r0, [pc, #32]	; (800c894 <tcp_update_rcv_ann_wnd+0xac>)
 800c874:	f008 fe02 	bl	801547c <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800c878:	68bb      	ldr	r3, [r7, #8]
 800c87a:	b29a      	uxth	r2, r3
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800c880:	2300      	movs	r3, #0
  }
}
 800c882:	4618      	mov	r0, r3
 800c884:	3710      	adds	r7, #16
 800c886:	46bd      	mov	sp, r7
 800c888:	bd80      	pop	{r7, pc}
 800c88a:	bf00      	nop
 800c88c:	080179b8 	.word	0x080179b8
 800c890:	08017c14 	.word	0x08017c14
 800c894:	080179fc 	.word	0x080179fc
 800c898:	08017c38 	.word	0x08017c38

0800c89c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800c89c:	b580      	push	{r7, lr}
 800c89e:	b084      	sub	sp, #16
 800c8a0:	af00      	add	r7, sp, #0
 800c8a2:	6078      	str	r0, [r7, #4]
 800c8a4:	460b      	mov	r3, r1
 800c8a6:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d107      	bne.n	800c8be <tcp_recved+0x22>
 800c8ae:	4b1f      	ldr	r3, [pc, #124]	; (800c92c <tcp_recved+0x90>)
 800c8b0:	f240 32cf 	movw	r2, #975	; 0x3cf
 800c8b4:	491e      	ldr	r1, [pc, #120]	; (800c930 <tcp_recved+0x94>)
 800c8b6:	481f      	ldr	r0, [pc, #124]	; (800c934 <tcp_recved+0x98>)
 800c8b8:	f008 fde0 	bl	801547c <iprintf>
 800c8bc:	e032      	b.n	800c924 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	7d1b      	ldrb	r3, [r3, #20]
 800c8c2:	2b01      	cmp	r3, #1
 800c8c4:	d106      	bne.n	800c8d4 <tcp_recved+0x38>
 800c8c6:	4b19      	ldr	r3, [pc, #100]	; (800c92c <tcp_recved+0x90>)
 800c8c8:	f240 32d2 	movw	r2, #978	; 0x3d2
 800c8cc:	491a      	ldr	r1, [pc, #104]	; (800c938 <tcp_recved+0x9c>)
 800c8ce:	4819      	ldr	r0, [pc, #100]	; (800c934 <tcp_recved+0x98>)
 800c8d0:	f008 fdd4 	bl	801547c <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c8d8:	887b      	ldrh	r3, [r7, #2]
 800c8da:	4413      	add	r3, r2
 800c8dc:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800c8de:	89fb      	ldrh	r3, [r7, #14]
 800c8e0:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800c8e4:	d804      	bhi.n	800c8f0 <tcp_recved+0x54>
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c8ea:	89fa      	ldrh	r2, [r7, #14]
 800c8ec:	429a      	cmp	r2, r3
 800c8ee:	d204      	bcs.n	800c8fa <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800c8f6:	851a      	strh	r2, [r3, #40]	; 0x28
 800c8f8:	e002      	b.n	800c900 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	89fa      	ldrh	r2, [r7, #14]
 800c8fe:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800c900:	6878      	ldr	r0, [r7, #4]
 800c902:	f7ff ff71 	bl	800c7e8 <tcp_update_rcv_ann_wnd>
 800c906:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800c908:	68bb      	ldr	r3, [r7, #8]
 800c90a:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800c90e:	d309      	bcc.n	800c924 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	8b5b      	ldrh	r3, [r3, #26]
 800c914:	f043 0302 	orr.w	r3, r3, #2
 800c918:	b29a      	uxth	r2, r3
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800c91e:	6878      	ldr	r0, [r7, #4]
 800c920:	f004 fbaa 	bl	8011078 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800c924:	3710      	adds	r7, #16
 800c926:	46bd      	mov	sp, r7
 800c928:	bd80      	pop	{r7, pc}
 800c92a:	bf00      	nop
 800c92c:	080179b8 	.word	0x080179b8
 800c930:	08017c54 	.word	0x08017c54
 800c934:	080179fc 	.word	0x080179fc
 800c938:	08017c6c 	.word	0x08017c6c

0800c93c <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800c93c:	b480      	push	{r7}
 800c93e:	b083      	sub	sp, #12
 800c940:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800c942:	2300      	movs	r3, #0
 800c944:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800c946:	4b1e      	ldr	r3, [pc, #120]	; (800c9c0 <tcp_new_port+0x84>)
 800c948:	881b      	ldrh	r3, [r3, #0]
 800c94a:	3301      	adds	r3, #1
 800c94c:	b29a      	uxth	r2, r3
 800c94e:	4b1c      	ldr	r3, [pc, #112]	; (800c9c0 <tcp_new_port+0x84>)
 800c950:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800c952:	4b1b      	ldr	r3, [pc, #108]	; (800c9c0 <tcp_new_port+0x84>)
 800c954:	881b      	ldrh	r3, [r3, #0]
 800c956:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c95a:	4293      	cmp	r3, r2
 800c95c:	d103      	bne.n	800c966 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800c95e:	4b18      	ldr	r3, [pc, #96]	; (800c9c0 <tcp_new_port+0x84>)
 800c960:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800c964:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800c966:	2300      	movs	r3, #0
 800c968:	71fb      	strb	r3, [r7, #7]
 800c96a:	e01e      	b.n	800c9aa <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800c96c:	79fb      	ldrb	r3, [r7, #7]
 800c96e:	4a15      	ldr	r2, [pc, #84]	; (800c9c4 <tcp_new_port+0x88>)
 800c970:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	603b      	str	r3, [r7, #0]
 800c978:	e011      	b.n	800c99e <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800c97a:	683b      	ldr	r3, [r7, #0]
 800c97c:	8ada      	ldrh	r2, [r3, #22]
 800c97e:	4b10      	ldr	r3, [pc, #64]	; (800c9c0 <tcp_new_port+0x84>)
 800c980:	881b      	ldrh	r3, [r3, #0]
 800c982:	429a      	cmp	r2, r3
 800c984:	d108      	bne.n	800c998 <tcp_new_port+0x5c>
        n++;
 800c986:	88bb      	ldrh	r3, [r7, #4]
 800c988:	3301      	adds	r3, #1
 800c98a:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800c98c:	88bb      	ldrh	r3, [r7, #4]
 800c98e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c992:	d3d8      	bcc.n	800c946 <tcp_new_port+0xa>
          return 0;
 800c994:	2300      	movs	r3, #0
 800c996:	e00d      	b.n	800c9b4 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800c998:	683b      	ldr	r3, [r7, #0]
 800c99a:	68db      	ldr	r3, [r3, #12]
 800c99c:	603b      	str	r3, [r7, #0]
 800c99e:	683b      	ldr	r3, [r7, #0]
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d1ea      	bne.n	800c97a <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800c9a4:	79fb      	ldrb	r3, [r7, #7]
 800c9a6:	3301      	adds	r3, #1
 800c9a8:	71fb      	strb	r3, [r7, #7]
 800c9aa:	79fb      	ldrb	r3, [r7, #7]
 800c9ac:	2b03      	cmp	r3, #3
 800c9ae:	d9dd      	bls.n	800c96c <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800c9b0:	4b03      	ldr	r3, [pc, #12]	; (800c9c0 <tcp_new_port+0x84>)
 800c9b2:	881b      	ldrh	r3, [r3, #0]
}
 800c9b4:	4618      	mov	r0, r3
 800c9b6:	370c      	adds	r7, #12
 800c9b8:	46bd      	mov	sp, r7
 800c9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9be:	4770      	bx	lr
 800c9c0:	20000010 	.word	0x20000010
 800c9c4:	08019c18 	.word	0x08019c18

0800c9c8 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800c9c8:	b5b0      	push	{r4, r5, r7, lr}
 800c9ca:	b090      	sub	sp, #64	; 0x40
 800c9cc:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800c9ce:	2300      	movs	r3, #0
 800c9d0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800c9d4:	4b94      	ldr	r3, [pc, #592]	; (800cc28 <tcp_slowtmr+0x260>)
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	3301      	adds	r3, #1
 800c9da:	4a93      	ldr	r2, [pc, #588]	; (800cc28 <tcp_slowtmr+0x260>)
 800c9dc:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800c9de:	4b93      	ldr	r3, [pc, #588]	; (800cc2c <tcp_slowtmr+0x264>)
 800c9e0:	781b      	ldrb	r3, [r3, #0]
 800c9e2:	3301      	adds	r3, #1
 800c9e4:	b2da      	uxtb	r2, r3
 800c9e6:	4b91      	ldr	r3, [pc, #580]	; (800cc2c <tcp_slowtmr+0x264>)
 800c9e8:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800c9ea:	2300      	movs	r3, #0
 800c9ec:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800c9ee:	4b90      	ldr	r3, [pc, #576]	; (800cc30 <tcp_slowtmr+0x268>)
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800c9f4:	e29f      	b.n	800cf36 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800c9f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9f8:	7d1b      	ldrb	r3, [r3, #20]
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d106      	bne.n	800ca0c <tcp_slowtmr+0x44>
 800c9fe:	4b8d      	ldr	r3, [pc, #564]	; (800cc34 <tcp_slowtmr+0x26c>)
 800ca00:	f240 42be 	movw	r2, #1214	; 0x4be
 800ca04:	498c      	ldr	r1, [pc, #560]	; (800cc38 <tcp_slowtmr+0x270>)
 800ca06:	488d      	ldr	r0, [pc, #564]	; (800cc3c <tcp_slowtmr+0x274>)
 800ca08:	f008 fd38 	bl	801547c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800ca0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca0e:	7d1b      	ldrb	r3, [r3, #20]
 800ca10:	2b01      	cmp	r3, #1
 800ca12:	d106      	bne.n	800ca22 <tcp_slowtmr+0x5a>
 800ca14:	4b87      	ldr	r3, [pc, #540]	; (800cc34 <tcp_slowtmr+0x26c>)
 800ca16:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800ca1a:	4989      	ldr	r1, [pc, #548]	; (800cc40 <tcp_slowtmr+0x278>)
 800ca1c:	4887      	ldr	r0, [pc, #540]	; (800cc3c <tcp_slowtmr+0x274>)
 800ca1e:	f008 fd2d 	bl	801547c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800ca22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca24:	7d1b      	ldrb	r3, [r3, #20]
 800ca26:	2b0a      	cmp	r3, #10
 800ca28:	d106      	bne.n	800ca38 <tcp_slowtmr+0x70>
 800ca2a:	4b82      	ldr	r3, [pc, #520]	; (800cc34 <tcp_slowtmr+0x26c>)
 800ca2c:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800ca30:	4984      	ldr	r1, [pc, #528]	; (800cc44 <tcp_slowtmr+0x27c>)
 800ca32:	4882      	ldr	r0, [pc, #520]	; (800cc3c <tcp_slowtmr+0x274>)
 800ca34:	f008 fd22 	bl	801547c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800ca38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca3a:	7f9a      	ldrb	r2, [r3, #30]
 800ca3c:	4b7b      	ldr	r3, [pc, #492]	; (800cc2c <tcp_slowtmr+0x264>)
 800ca3e:	781b      	ldrb	r3, [r3, #0]
 800ca40:	429a      	cmp	r2, r3
 800ca42:	d105      	bne.n	800ca50 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800ca44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca46:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800ca48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca4a:	68db      	ldr	r3, [r3, #12]
 800ca4c:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800ca4e:	e272      	b.n	800cf36 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800ca50:	4b76      	ldr	r3, [pc, #472]	; (800cc2c <tcp_slowtmr+0x264>)
 800ca52:	781a      	ldrb	r2, [r3, #0]
 800ca54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca56:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800ca58:	2300      	movs	r3, #0
 800ca5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800ca5e:	2300      	movs	r3, #0
 800ca60:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800ca64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca66:	7d1b      	ldrb	r3, [r3, #20]
 800ca68:	2b02      	cmp	r3, #2
 800ca6a:	d10a      	bne.n	800ca82 <tcp_slowtmr+0xba>
 800ca6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca6e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ca72:	2b05      	cmp	r3, #5
 800ca74:	d905      	bls.n	800ca82 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800ca76:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ca7a:	3301      	adds	r3, #1
 800ca7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ca80:	e11e      	b.n	800ccc0 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800ca82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca84:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ca88:	2b0b      	cmp	r3, #11
 800ca8a:	d905      	bls.n	800ca98 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800ca8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ca90:	3301      	adds	r3, #1
 800ca92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ca96:	e113      	b.n	800ccc0 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800ca98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca9a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d075      	beq.n	800cb8e <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800caa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d006      	beq.n	800cab8 <tcp_slowtmr+0xf0>
 800caaa:	4b62      	ldr	r3, [pc, #392]	; (800cc34 <tcp_slowtmr+0x26c>)
 800caac:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800cab0:	4965      	ldr	r1, [pc, #404]	; (800cc48 <tcp_slowtmr+0x280>)
 800cab2:	4862      	ldr	r0, [pc, #392]	; (800cc3c <tcp_slowtmr+0x274>)
 800cab4:	f008 fce2 	bl	801547c <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800cab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d106      	bne.n	800cace <tcp_slowtmr+0x106>
 800cac0:	4b5c      	ldr	r3, [pc, #368]	; (800cc34 <tcp_slowtmr+0x26c>)
 800cac2:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800cac6:	4961      	ldr	r1, [pc, #388]	; (800cc4c <tcp_slowtmr+0x284>)
 800cac8:	485c      	ldr	r0, [pc, #368]	; (800cc3c <tcp_slowtmr+0x274>)
 800caca:	f008 fcd7 	bl	801547c <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800cace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cad0:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800cad4:	2b0b      	cmp	r3, #11
 800cad6:	d905      	bls.n	800cae4 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800cad8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cadc:	3301      	adds	r3, #1
 800cade:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cae2:	e0ed      	b.n	800ccc0 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800cae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cae6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800caea:	3b01      	subs	r3, #1
 800caec:	4a58      	ldr	r2, [pc, #352]	; (800cc50 <tcp_slowtmr+0x288>)
 800caee:	5cd3      	ldrb	r3, [r2, r3]
 800caf0:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800caf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caf4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800caf8:	7c7a      	ldrb	r2, [r7, #17]
 800cafa:	429a      	cmp	r2, r3
 800cafc:	d907      	bls.n	800cb0e <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800cafe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb00:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800cb04:	3301      	adds	r3, #1
 800cb06:	b2da      	uxtb	r2, r3
 800cb08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb0a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800cb0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb10:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800cb14:	7c7a      	ldrb	r2, [r7, #17]
 800cb16:	429a      	cmp	r2, r3
 800cb18:	f200 80d2 	bhi.w	800ccc0 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800cb1c:	2301      	movs	r3, #1
 800cb1e:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800cb20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb22:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d108      	bne.n	800cb3c <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800cb2a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cb2c:	f005 f94c 	bl	8011dc8 <tcp_zero_window_probe>
 800cb30:	4603      	mov	r3, r0
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d014      	beq.n	800cb60 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800cb36:	2300      	movs	r3, #0
 800cb38:	623b      	str	r3, [r7, #32]
 800cb3a:	e011      	b.n	800cb60 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800cb3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb3e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800cb42:	4619      	mov	r1, r3
 800cb44:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cb46:	f004 f811 	bl	8010b6c <tcp_split_unsent_seg>
 800cb4a:	4603      	mov	r3, r0
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d107      	bne.n	800cb60 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800cb50:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cb52:	f004 fa91 	bl	8011078 <tcp_output>
 800cb56:	4603      	mov	r3, r0
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d101      	bne.n	800cb60 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800cb5c:	2300      	movs	r3, #0
 800cb5e:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800cb60:	6a3b      	ldr	r3, [r7, #32]
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	f000 80ac 	beq.w	800ccc0 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800cb68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb6a:	2200      	movs	r2, #0
 800cb6c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800cb70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb72:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800cb76:	2b06      	cmp	r3, #6
 800cb78:	f200 80a2 	bhi.w	800ccc0 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800cb7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb7e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800cb82:	3301      	adds	r3, #1
 800cb84:	b2da      	uxtb	r2, r3
 800cb86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb88:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800cb8c:	e098      	b.n	800ccc0 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800cb8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb90:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	db0f      	blt.n	800cbb8 <tcp_slowtmr+0x1f0>
 800cb98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb9a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800cb9e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800cba2:	4293      	cmp	r3, r2
 800cba4:	d008      	beq.n	800cbb8 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800cba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cba8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800cbac:	b29b      	uxth	r3, r3
 800cbae:	3301      	adds	r3, #1
 800cbb0:	b29b      	uxth	r3, r3
 800cbb2:	b21a      	sxth	r2, r3
 800cbb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbb6:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800cbb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbba:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800cbbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbc0:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800cbc4:	429a      	cmp	r2, r3
 800cbc6:	db7b      	blt.n	800ccc0 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800cbc8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cbca:	f004 fd47 	bl	801165c <tcp_rexmit_rto_prepare>
 800cbce:	4603      	mov	r3, r0
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d007      	beq.n	800cbe4 <tcp_slowtmr+0x21c>
 800cbd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d171      	bne.n	800ccc0 <tcp_slowtmr+0x2f8>
 800cbdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d06d      	beq.n	800ccc0 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800cbe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbe6:	7d1b      	ldrb	r3, [r3, #20]
 800cbe8:	2b02      	cmp	r3, #2
 800cbea:	d03a      	beq.n	800cc62 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800cbec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cbf2:	2b0c      	cmp	r3, #12
 800cbf4:	bf28      	it	cs
 800cbf6:	230c      	movcs	r3, #12
 800cbf8:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800cbfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbfc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800cc00:	10db      	asrs	r3, r3, #3
 800cc02:	b21b      	sxth	r3, r3
 800cc04:	461a      	mov	r2, r3
 800cc06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc08:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800cc0c:	4413      	add	r3, r2
 800cc0e:	7efa      	ldrb	r2, [r7, #27]
 800cc10:	4910      	ldr	r1, [pc, #64]	; (800cc54 <tcp_slowtmr+0x28c>)
 800cc12:	5c8a      	ldrb	r2, [r1, r2]
 800cc14:	4093      	lsls	r3, r2
 800cc16:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800cc18:	697b      	ldr	r3, [r7, #20]
 800cc1a:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800cc1e:	4293      	cmp	r3, r2
 800cc20:	dc1a      	bgt.n	800cc58 <tcp_slowtmr+0x290>
 800cc22:	697b      	ldr	r3, [r7, #20]
 800cc24:	b21a      	sxth	r2, r3
 800cc26:	e019      	b.n	800cc5c <tcp_slowtmr+0x294>
 800cc28:	2000bda8 	.word	0x2000bda8
 800cc2c:	20004aca 	.word	0x20004aca
 800cc30:	2000bda4 	.word	0x2000bda4
 800cc34:	080179b8 	.word	0x080179b8
 800cc38:	08017cfc 	.word	0x08017cfc
 800cc3c:	080179fc 	.word	0x080179fc
 800cc40:	08017d28 	.word	0x08017d28
 800cc44:	08017d54 	.word	0x08017d54
 800cc48:	08017d84 	.word	0x08017d84
 800cc4c:	08017db8 	.word	0x08017db8
 800cc50:	08019c10 	.word	0x08019c10
 800cc54:	08019c00 	.word	0x08019c00
 800cc58:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800cc5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc5e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800cc62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc64:	2200      	movs	r2, #0
 800cc66:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800cc68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc6a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800cc6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc70:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800cc74:	4293      	cmp	r3, r2
 800cc76:	bf28      	it	cs
 800cc78:	4613      	movcs	r3, r2
 800cc7a:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800cc7c:	8a7b      	ldrh	r3, [r7, #18]
 800cc7e:	085b      	lsrs	r3, r3, #1
 800cc80:	b29a      	uxth	r2, r3
 800cc82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc84:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800cc88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc8a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800cc8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc90:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cc92:	005b      	lsls	r3, r3, #1
 800cc94:	b29b      	uxth	r3, r3
 800cc96:	429a      	cmp	r2, r3
 800cc98:	d206      	bcs.n	800cca8 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800cc9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc9c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cc9e:	005b      	lsls	r3, r3, #1
 800cca0:	b29a      	uxth	r2, r3
 800cca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cca4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800cca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccaa:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800ccac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccae:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800ccb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccb4:	2200      	movs	r2, #0
 800ccb6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800ccba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ccbc:	f004 fd3e 	bl	801173c <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800ccc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccc2:	7d1b      	ldrb	r3, [r3, #20]
 800ccc4:	2b06      	cmp	r3, #6
 800ccc6:	d111      	bne.n	800ccec <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800ccc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccca:	8b5b      	ldrh	r3, [r3, #26]
 800cccc:	f003 0310 	and.w	r3, r3, #16
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d00b      	beq.n	800ccec <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ccd4:	4b9d      	ldr	r3, [pc, #628]	; (800cf4c <tcp_slowtmr+0x584>)
 800ccd6:	681a      	ldr	r2, [r3, #0]
 800ccd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccda:	6a1b      	ldr	r3, [r3, #32]
 800ccdc:	1ad3      	subs	r3, r2, r3
 800ccde:	2b28      	cmp	r3, #40	; 0x28
 800cce0:	d904      	bls.n	800ccec <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800cce2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cce6:	3301      	adds	r3, #1
 800cce8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800ccec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccee:	7a5b      	ldrb	r3, [r3, #9]
 800ccf0:	f003 0308 	and.w	r3, r3, #8
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d04c      	beq.n	800cd92 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800ccf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccfa:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800ccfc:	2b04      	cmp	r3, #4
 800ccfe:	d003      	beq.n	800cd08 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800cd00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd02:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800cd04:	2b07      	cmp	r3, #7
 800cd06:	d144      	bne.n	800cd92 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cd08:	4b90      	ldr	r3, [pc, #576]	; (800cf4c <tcp_slowtmr+0x584>)
 800cd0a:	681a      	ldr	r2, [r3, #0]
 800cd0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd0e:	6a1b      	ldr	r3, [r3, #32]
 800cd10:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800cd12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cd18:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800cd1c:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800cd20:	498b      	ldr	r1, [pc, #556]	; (800cf50 <tcp_slowtmr+0x588>)
 800cd22:	fba1 1303 	umull	r1, r3, r1, r3
 800cd26:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cd28:	429a      	cmp	r2, r3
 800cd2a:	d90a      	bls.n	800cd42 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800cd2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cd30:	3301      	adds	r3, #1
 800cd32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800cd36:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cd3a:	3301      	adds	r3, #1
 800cd3c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800cd40:	e027      	b.n	800cd92 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cd42:	4b82      	ldr	r3, [pc, #520]	; (800cf4c <tcp_slowtmr+0x584>)
 800cd44:	681a      	ldr	r2, [r3, #0]
 800cd46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd48:	6a1b      	ldr	r3, [r3, #32]
 800cd4a:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800cd4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd4e:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800cd52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd54:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800cd58:	4618      	mov	r0, r3
 800cd5a:	4b7e      	ldr	r3, [pc, #504]	; (800cf54 <tcp_slowtmr+0x58c>)
 800cd5c:	fb03 f300 	mul.w	r3, r3, r0
 800cd60:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800cd62:	497b      	ldr	r1, [pc, #492]	; (800cf50 <tcp_slowtmr+0x588>)
 800cd64:	fba1 1303 	umull	r1, r3, r1, r3
 800cd68:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cd6a:	429a      	cmp	r2, r3
 800cd6c:	d911      	bls.n	800cd92 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800cd6e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cd70:	f004 ffea 	bl	8011d48 <tcp_keepalive>
 800cd74:	4603      	mov	r3, r0
 800cd76:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800cd7a:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d107      	bne.n	800cd92 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800cd82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd84:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800cd88:	3301      	adds	r3, #1
 800cd8a:	b2da      	uxtb	r2, r3
 800cd8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd8e:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800cd92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d011      	beq.n	800cdbe <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800cd9a:	4b6c      	ldr	r3, [pc, #432]	; (800cf4c <tcp_slowtmr+0x584>)
 800cd9c:	681a      	ldr	r2, [r3, #0]
 800cd9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cda0:	6a1b      	ldr	r3, [r3, #32]
 800cda2:	1ad2      	subs	r2, r2, r3
 800cda4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cda6:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800cdaa:	4619      	mov	r1, r3
 800cdac:	460b      	mov	r3, r1
 800cdae:	005b      	lsls	r3, r3, #1
 800cdb0:	440b      	add	r3, r1
 800cdb2:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800cdb4:	429a      	cmp	r2, r3
 800cdb6:	d302      	bcc.n	800cdbe <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800cdb8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cdba:	f000 fea9 	bl	800db10 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800cdbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdc0:	7d1b      	ldrb	r3, [r3, #20]
 800cdc2:	2b03      	cmp	r3, #3
 800cdc4:	d10b      	bne.n	800cdde <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cdc6:	4b61      	ldr	r3, [pc, #388]	; (800cf4c <tcp_slowtmr+0x584>)
 800cdc8:	681a      	ldr	r2, [r3, #0]
 800cdca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdcc:	6a1b      	ldr	r3, [r3, #32]
 800cdce:	1ad3      	subs	r3, r2, r3
 800cdd0:	2b28      	cmp	r3, #40	; 0x28
 800cdd2:	d904      	bls.n	800cdde <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800cdd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cdd8:	3301      	adds	r3, #1
 800cdda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800cdde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cde0:	7d1b      	ldrb	r3, [r3, #20]
 800cde2:	2b09      	cmp	r3, #9
 800cde4:	d10b      	bne.n	800cdfe <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800cde6:	4b59      	ldr	r3, [pc, #356]	; (800cf4c <tcp_slowtmr+0x584>)
 800cde8:	681a      	ldr	r2, [r3, #0]
 800cdea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdec:	6a1b      	ldr	r3, [r3, #32]
 800cdee:	1ad3      	subs	r3, r2, r3
 800cdf0:	2bf0      	cmp	r3, #240	; 0xf0
 800cdf2:	d904      	bls.n	800cdfe <tcp_slowtmr+0x436>
        ++pcb_remove;
 800cdf4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cdf8:	3301      	adds	r3, #1
 800cdfa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800cdfe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d060      	beq.n	800cec8 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800ce06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ce0c:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800ce0e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ce10:	f000 fcca 	bl	800d7a8 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800ce14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d010      	beq.n	800ce3c <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800ce1a:	4b4f      	ldr	r3, [pc, #316]	; (800cf58 <tcp_slowtmr+0x590>)
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ce20:	429a      	cmp	r2, r3
 800ce22:	d106      	bne.n	800ce32 <tcp_slowtmr+0x46a>
 800ce24:	4b4d      	ldr	r3, [pc, #308]	; (800cf5c <tcp_slowtmr+0x594>)
 800ce26:	f240 526d 	movw	r2, #1389	; 0x56d
 800ce2a:	494d      	ldr	r1, [pc, #308]	; (800cf60 <tcp_slowtmr+0x598>)
 800ce2c:	484d      	ldr	r0, [pc, #308]	; (800cf64 <tcp_slowtmr+0x59c>)
 800ce2e:	f008 fb25 	bl	801547c <iprintf>
        prev->next = pcb->next;
 800ce32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce34:	68da      	ldr	r2, [r3, #12]
 800ce36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce38:	60da      	str	r2, [r3, #12]
 800ce3a:	e00f      	b.n	800ce5c <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800ce3c:	4b46      	ldr	r3, [pc, #280]	; (800cf58 <tcp_slowtmr+0x590>)
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ce42:	429a      	cmp	r2, r3
 800ce44:	d006      	beq.n	800ce54 <tcp_slowtmr+0x48c>
 800ce46:	4b45      	ldr	r3, [pc, #276]	; (800cf5c <tcp_slowtmr+0x594>)
 800ce48:	f240 5271 	movw	r2, #1393	; 0x571
 800ce4c:	4946      	ldr	r1, [pc, #280]	; (800cf68 <tcp_slowtmr+0x5a0>)
 800ce4e:	4845      	ldr	r0, [pc, #276]	; (800cf64 <tcp_slowtmr+0x59c>)
 800ce50:	f008 fb14 	bl	801547c <iprintf>
        tcp_active_pcbs = pcb->next;
 800ce54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce56:	68db      	ldr	r3, [r3, #12]
 800ce58:	4a3f      	ldr	r2, [pc, #252]	; (800cf58 <tcp_slowtmr+0x590>)
 800ce5a:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800ce5c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d013      	beq.n	800ce8c <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800ce64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce66:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800ce68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce6a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800ce6c:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800ce6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce70:	3304      	adds	r3, #4
 800ce72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ce74:	8ad2      	ldrh	r2, [r2, #22]
 800ce76:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ce78:	8b09      	ldrh	r1, [r1, #24]
 800ce7a:	9102      	str	r1, [sp, #8]
 800ce7c:	9201      	str	r2, [sp, #4]
 800ce7e:	9300      	str	r3, [sp, #0]
 800ce80:	462b      	mov	r3, r5
 800ce82:	4622      	mov	r2, r4
 800ce84:	4601      	mov	r1, r0
 800ce86:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ce88:	f004 feaa 	bl	8011be0 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800ce8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce8e:	691b      	ldr	r3, [r3, #16]
 800ce90:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800ce92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce94:	7d1b      	ldrb	r3, [r3, #20]
 800ce96:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800ce98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce9a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800ce9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce9e:	68db      	ldr	r3, [r3, #12]
 800cea0:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800cea2:	6838      	ldr	r0, [r7, #0]
 800cea4:	f7fe ffee 	bl	800be84 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800cea8:	4b30      	ldr	r3, [pc, #192]	; (800cf6c <tcp_slowtmr+0x5a4>)
 800ceaa:	2200      	movs	r2, #0
 800ceac:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d004      	beq.n	800cebe <tcp_slowtmr+0x4f6>
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	f06f 010c 	mvn.w	r1, #12
 800ceba:	68b8      	ldr	r0, [r7, #8]
 800cebc:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800cebe:	4b2b      	ldr	r3, [pc, #172]	; (800cf6c <tcp_slowtmr+0x5a4>)
 800cec0:	781b      	ldrb	r3, [r3, #0]
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d037      	beq.n	800cf36 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800cec6:	e590      	b.n	800c9ea <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800cec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ceca:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800cecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cece:	68db      	ldr	r3, [r3, #12]
 800ced0:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800ced2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ced4:	7f1b      	ldrb	r3, [r3, #28]
 800ced6:	3301      	adds	r3, #1
 800ced8:	b2da      	uxtb	r2, r3
 800ceda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cedc:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800cede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cee0:	7f1a      	ldrb	r2, [r3, #28]
 800cee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cee4:	7f5b      	ldrb	r3, [r3, #29]
 800cee6:	429a      	cmp	r2, r3
 800cee8:	d325      	bcc.n	800cf36 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800ceea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ceec:	2200      	movs	r2, #0
 800ceee:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800cef0:	4b1e      	ldr	r3, [pc, #120]	; (800cf6c <tcp_slowtmr+0x5a4>)
 800cef2:	2200      	movs	r2, #0
 800cef4:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800cef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cef8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d00b      	beq.n	800cf18 <tcp_slowtmr+0x550>
 800cf00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf02:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cf06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cf08:	6912      	ldr	r2, [r2, #16]
 800cf0a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cf0c:	4610      	mov	r0, r2
 800cf0e:	4798      	blx	r3
 800cf10:	4603      	mov	r3, r0
 800cf12:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800cf16:	e002      	b.n	800cf1e <tcp_slowtmr+0x556>
 800cf18:	2300      	movs	r3, #0
 800cf1a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800cf1e:	4b13      	ldr	r3, [pc, #76]	; (800cf6c <tcp_slowtmr+0x5a4>)
 800cf20:	781b      	ldrb	r3, [r3, #0]
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d000      	beq.n	800cf28 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800cf26:	e560      	b.n	800c9ea <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800cf28:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d102      	bne.n	800cf36 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800cf30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cf32:	f004 f8a1 	bl	8011078 <tcp_output>
  while (pcb != NULL) {
 800cf36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	f47f ad5c 	bne.w	800c9f6 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800cf3e:	2300      	movs	r3, #0
 800cf40:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800cf42:	4b0b      	ldr	r3, [pc, #44]	; (800cf70 <tcp_slowtmr+0x5a8>)
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800cf48:	e067      	b.n	800d01a <tcp_slowtmr+0x652>
 800cf4a:	bf00      	nop
 800cf4c:	2000bda8 	.word	0x2000bda8
 800cf50:	10624dd3 	.word	0x10624dd3
 800cf54:	000124f8 	.word	0x000124f8
 800cf58:	2000bda4 	.word	0x2000bda4
 800cf5c:	080179b8 	.word	0x080179b8
 800cf60:	08017df0 	.word	0x08017df0
 800cf64:	080179fc 	.word	0x080179fc
 800cf68:	08017e1c 	.word	0x08017e1c
 800cf6c:	2000bda0 	.word	0x2000bda0
 800cf70:	2000bdb4 	.word	0x2000bdb4
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800cf74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf76:	7d1b      	ldrb	r3, [r3, #20]
 800cf78:	2b0a      	cmp	r3, #10
 800cf7a:	d006      	beq.n	800cf8a <tcp_slowtmr+0x5c2>
 800cf7c:	4b2b      	ldr	r3, [pc, #172]	; (800d02c <tcp_slowtmr+0x664>)
 800cf7e:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800cf82:	492b      	ldr	r1, [pc, #172]	; (800d030 <tcp_slowtmr+0x668>)
 800cf84:	482b      	ldr	r0, [pc, #172]	; (800d034 <tcp_slowtmr+0x66c>)
 800cf86:	f008 fa79 	bl	801547c <iprintf>
    pcb_remove = 0;
 800cf8a:	2300      	movs	r3, #0
 800cf8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800cf90:	4b29      	ldr	r3, [pc, #164]	; (800d038 <tcp_slowtmr+0x670>)
 800cf92:	681a      	ldr	r2, [r3, #0]
 800cf94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf96:	6a1b      	ldr	r3, [r3, #32]
 800cf98:	1ad3      	subs	r3, r2, r3
 800cf9a:	2bf0      	cmp	r3, #240	; 0xf0
 800cf9c:	d904      	bls.n	800cfa8 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800cf9e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cfa2:	3301      	adds	r3, #1
 800cfa4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800cfa8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d02f      	beq.n	800d010 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800cfb0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cfb2:	f000 fbf9 	bl	800d7a8 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800cfb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d010      	beq.n	800cfde <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800cfbc:	4b1f      	ldr	r3, [pc, #124]	; (800d03c <tcp_slowtmr+0x674>)
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cfc2:	429a      	cmp	r2, r3
 800cfc4:	d106      	bne.n	800cfd4 <tcp_slowtmr+0x60c>
 800cfc6:	4b19      	ldr	r3, [pc, #100]	; (800d02c <tcp_slowtmr+0x664>)
 800cfc8:	f240 52af 	movw	r2, #1455	; 0x5af
 800cfcc:	491c      	ldr	r1, [pc, #112]	; (800d040 <tcp_slowtmr+0x678>)
 800cfce:	4819      	ldr	r0, [pc, #100]	; (800d034 <tcp_slowtmr+0x66c>)
 800cfd0:	f008 fa54 	bl	801547c <iprintf>
        prev->next = pcb->next;
 800cfd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfd6:	68da      	ldr	r2, [r3, #12]
 800cfd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfda:	60da      	str	r2, [r3, #12]
 800cfdc:	e00f      	b.n	800cffe <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800cfde:	4b17      	ldr	r3, [pc, #92]	; (800d03c <tcp_slowtmr+0x674>)
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cfe4:	429a      	cmp	r2, r3
 800cfe6:	d006      	beq.n	800cff6 <tcp_slowtmr+0x62e>
 800cfe8:	4b10      	ldr	r3, [pc, #64]	; (800d02c <tcp_slowtmr+0x664>)
 800cfea:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800cfee:	4915      	ldr	r1, [pc, #84]	; (800d044 <tcp_slowtmr+0x67c>)
 800cff0:	4810      	ldr	r0, [pc, #64]	; (800d034 <tcp_slowtmr+0x66c>)
 800cff2:	f008 fa43 	bl	801547c <iprintf>
        tcp_tw_pcbs = pcb->next;
 800cff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cff8:	68db      	ldr	r3, [r3, #12]
 800cffa:	4a10      	ldr	r2, [pc, #64]	; (800d03c <tcp_slowtmr+0x674>)
 800cffc:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800cffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d000:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800d002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d004:	68db      	ldr	r3, [r3, #12]
 800d006:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800d008:	69f8      	ldr	r0, [r7, #28]
 800d00a:	f7fe ff3b 	bl	800be84 <tcp_free>
 800d00e:	e004      	b.n	800d01a <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800d010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d012:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800d014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d016:	68db      	ldr	r3, [r3, #12]
 800d018:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800d01a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d1a9      	bne.n	800cf74 <tcp_slowtmr+0x5ac>
    }
  }
}
 800d020:	bf00      	nop
 800d022:	bf00      	nop
 800d024:	3730      	adds	r7, #48	; 0x30
 800d026:	46bd      	mov	sp, r7
 800d028:	bdb0      	pop	{r4, r5, r7, pc}
 800d02a:	bf00      	nop
 800d02c:	080179b8 	.word	0x080179b8
 800d030:	08017e48 	.word	0x08017e48
 800d034:	080179fc 	.word	0x080179fc
 800d038:	2000bda8 	.word	0x2000bda8
 800d03c:	2000bdb4 	.word	0x2000bdb4
 800d040:	08017e78 	.word	0x08017e78
 800d044:	08017ea0 	.word	0x08017ea0

0800d048 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800d048:	b580      	push	{r7, lr}
 800d04a:	b082      	sub	sp, #8
 800d04c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800d04e:	4b2d      	ldr	r3, [pc, #180]	; (800d104 <tcp_fasttmr+0xbc>)
 800d050:	781b      	ldrb	r3, [r3, #0]
 800d052:	3301      	adds	r3, #1
 800d054:	b2da      	uxtb	r2, r3
 800d056:	4b2b      	ldr	r3, [pc, #172]	; (800d104 <tcp_fasttmr+0xbc>)
 800d058:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800d05a:	4b2b      	ldr	r3, [pc, #172]	; (800d108 <tcp_fasttmr+0xc0>)
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800d060:	e048      	b.n	800d0f4 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	7f9a      	ldrb	r2, [r3, #30]
 800d066:	4b27      	ldr	r3, [pc, #156]	; (800d104 <tcp_fasttmr+0xbc>)
 800d068:	781b      	ldrb	r3, [r3, #0]
 800d06a:	429a      	cmp	r2, r3
 800d06c:	d03f      	beq.n	800d0ee <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800d06e:	4b25      	ldr	r3, [pc, #148]	; (800d104 <tcp_fasttmr+0xbc>)
 800d070:	781a      	ldrb	r2, [r3, #0]
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	8b5b      	ldrh	r3, [r3, #26]
 800d07a:	f003 0301 	and.w	r3, r3, #1
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d010      	beq.n	800d0a4 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	8b5b      	ldrh	r3, [r3, #26]
 800d086:	f043 0302 	orr.w	r3, r3, #2
 800d08a:	b29a      	uxth	r2, r3
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800d090:	6878      	ldr	r0, [r7, #4]
 800d092:	f003 fff1 	bl	8011078 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	8b5b      	ldrh	r3, [r3, #26]
 800d09a:	f023 0303 	bic.w	r3, r3, #3
 800d09e:	b29a      	uxth	r2, r3
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	8b5b      	ldrh	r3, [r3, #26]
 800d0a8:	f003 0308 	and.w	r3, r3, #8
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d009      	beq.n	800d0c4 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	8b5b      	ldrh	r3, [r3, #26]
 800d0b4:	f023 0308 	bic.w	r3, r3, #8
 800d0b8:	b29a      	uxth	r2, r3
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800d0be:	6878      	ldr	r0, [r7, #4]
 800d0c0:	f7ff f874 	bl	800c1ac <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	68db      	ldr	r3, [r3, #12]
 800d0c8:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d00a      	beq.n	800d0e8 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800d0d2:	4b0e      	ldr	r3, [pc, #56]	; (800d10c <tcp_fasttmr+0xc4>)
 800d0d4:	2200      	movs	r2, #0
 800d0d6:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800d0d8:	6878      	ldr	r0, [r7, #4]
 800d0da:	f000 f819 	bl	800d110 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800d0de:	4b0b      	ldr	r3, [pc, #44]	; (800d10c <tcp_fasttmr+0xc4>)
 800d0e0:	781b      	ldrb	r3, [r3, #0]
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d000      	beq.n	800d0e8 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800d0e6:	e7b8      	b.n	800d05a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800d0e8:	683b      	ldr	r3, [r7, #0]
 800d0ea:	607b      	str	r3, [r7, #4]
 800d0ec:	e002      	b.n	800d0f4 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	68db      	ldr	r3, [r3, #12]
 800d0f2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d1b3      	bne.n	800d062 <tcp_fasttmr+0x1a>
    }
  }
}
 800d0fa:	bf00      	nop
 800d0fc:	bf00      	nop
 800d0fe:	3708      	adds	r7, #8
 800d100:	46bd      	mov	sp, r7
 800d102:	bd80      	pop	{r7, pc}
 800d104:	20004aca 	.word	0x20004aca
 800d108:	2000bda4 	.word	0x2000bda4
 800d10c:	2000bda0 	.word	0x2000bda0

0800d110 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800d110:	b590      	push	{r4, r7, lr}
 800d112:	b085      	sub	sp, #20
 800d114:	af00      	add	r7, sp, #0
 800d116:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d109      	bne.n	800d132 <tcp_process_refused_data+0x22>
 800d11e:	4b37      	ldr	r3, [pc, #220]	; (800d1fc <tcp_process_refused_data+0xec>)
 800d120:	f240 6209 	movw	r2, #1545	; 0x609
 800d124:	4936      	ldr	r1, [pc, #216]	; (800d200 <tcp_process_refused_data+0xf0>)
 800d126:	4837      	ldr	r0, [pc, #220]	; (800d204 <tcp_process_refused_data+0xf4>)
 800d128:	f008 f9a8 	bl	801547c <iprintf>
 800d12c:	f06f 030f 	mvn.w	r3, #15
 800d130:	e060      	b.n	800d1f4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d136:	7b5b      	ldrb	r3, [r3, #13]
 800d138:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d13e:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	2200      	movs	r2, #0
 800d144:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d00b      	beq.n	800d168 <tcp_process_refused_data+0x58>
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	6918      	ldr	r0, [r3, #16]
 800d15a:	2300      	movs	r3, #0
 800d15c:	68ba      	ldr	r2, [r7, #8]
 800d15e:	6879      	ldr	r1, [r7, #4]
 800d160:	47a0      	blx	r4
 800d162:	4603      	mov	r3, r0
 800d164:	73fb      	strb	r3, [r7, #15]
 800d166:	e007      	b.n	800d178 <tcp_process_refused_data+0x68>
 800d168:	2300      	movs	r3, #0
 800d16a:	68ba      	ldr	r2, [r7, #8]
 800d16c:	6879      	ldr	r1, [r7, #4]
 800d16e:	2000      	movs	r0, #0
 800d170:	f000 f8a4 	bl	800d2bc <tcp_recv_null>
 800d174:	4603      	mov	r3, r0
 800d176:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800d178:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d12a      	bne.n	800d1d6 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800d180:	7bbb      	ldrb	r3, [r7, #14]
 800d182:	f003 0320 	and.w	r3, r3, #32
 800d186:	2b00      	cmp	r3, #0
 800d188:	d033      	beq.n	800d1f2 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d18e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d192:	d005      	beq.n	800d1a0 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d198:	3301      	adds	r3, #1
 800d19a:	b29a      	uxth	r2, r3
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d00b      	beq.n	800d1c2 <tcp_process_refused_data+0xb2>
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	6918      	ldr	r0, [r3, #16]
 800d1b4:	2300      	movs	r3, #0
 800d1b6:	2200      	movs	r2, #0
 800d1b8:	6879      	ldr	r1, [r7, #4]
 800d1ba:	47a0      	blx	r4
 800d1bc:	4603      	mov	r3, r0
 800d1be:	73fb      	strb	r3, [r7, #15]
 800d1c0:	e001      	b.n	800d1c6 <tcp_process_refused_data+0xb6>
 800d1c2:	2300      	movs	r3, #0
 800d1c4:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800d1c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d1ca:	f113 0f0d 	cmn.w	r3, #13
 800d1ce:	d110      	bne.n	800d1f2 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800d1d0:	f06f 030c 	mvn.w	r3, #12
 800d1d4:	e00e      	b.n	800d1f4 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800d1d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d1da:	f113 0f0d 	cmn.w	r3, #13
 800d1de:	d102      	bne.n	800d1e6 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800d1e0:	f06f 030c 	mvn.w	r3, #12
 800d1e4:	e006      	b.n	800d1f4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	68ba      	ldr	r2, [r7, #8]
 800d1ea:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800d1ec:	f06f 0304 	mvn.w	r3, #4
 800d1f0:	e000      	b.n	800d1f4 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800d1f2:	2300      	movs	r3, #0
}
 800d1f4:	4618      	mov	r0, r3
 800d1f6:	3714      	adds	r7, #20
 800d1f8:	46bd      	mov	sp, r7
 800d1fa:	bd90      	pop	{r4, r7, pc}
 800d1fc:	080179b8 	.word	0x080179b8
 800d200:	08017ec8 	.word	0x08017ec8
 800d204:	080179fc 	.word	0x080179fc

0800d208 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800d208:	b580      	push	{r7, lr}
 800d20a:	b084      	sub	sp, #16
 800d20c:	af00      	add	r7, sp, #0
 800d20e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800d210:	e007      	b.n	800d222 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800d218:	6878      	ldr	r0, [r7, #4]
 800d21a:	f000 f80a 	bl	800d232 <tcp_seg_free>
    seg = next;
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	2b00      	cmp	r3, #0
 800d226:	d1f4      	bne.n	800d212 <tcp_segs_free+0xa>
  }
}
 800d228:	bf00      	nop
 800d22a:	bf00      	nop
 800d22c:	3710      	adds	r7, #16
 800d22e:	46bd      	mov	sp, r7
 800d230:	bd80      	pop	{r7, pc}

0800d232 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800d232:	b580      	push	{r7, lr}
 800d234:	b082      	sub	sp, #8
 800d236:	af00      	add	r7, sp, #0
 800d238:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d00c      	beq.n	800d25a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	685b      	ldr	r3, [r3, #4]
 800d244:	2b00      	cmp	r3, #0
 800d246:	d004      	beq.n	800d252 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	685b      	ldr	r3, [r3, #4]
 800d24c:	4618      	mov	r0, r3
 800d24e:	f7fe fb6d 	bl	800b92c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800d252:	6879      	ldr	r1, [r7, #4]
 800d254:	2003      	movs	r0, #3
 800d256:	f7fd fcc5 	bl	800abe4 <memp_free>
  }
}
 800d25a:	bf00      	nop
 800d25c:	3708      	adds	r7, #8
 800d25e:	46bd      	mov	sp, r7
 800d260:	bd80      	pop	{r7, pc}
	...

0800d264 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800d264:	b580      	push	{r7, lr}
 800d266:	b084      	sub	sp, #16
 800d268:	af00      	add	r7, sp, #0
 800d26a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d106      	bne.n	800d280 <tcp_seg_copy+0x1c>
 800d272:	4b0f      	ldr	r3, [pc, #60]	; (800d2b0 <tcp_seg_copy+0x4c>)
 800d274:	f240 6282 	movw	r2, #1666	; 0x682
 800d278:	490e      	ldr	r1, [pc, #56]	; (800d2b4 <tcp_seg_copy+0x50>)
 800d27a:	480f      	ldr	r0, [pc, #60]	; (800d2b8 <tcp_seg_copy+0x54>)
 800d27c:	f008 f8fe 	bl	801547c <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800d280:	2003      	movs	r0, #3
 800d282:	f7fd fc5d 	bl	800ab40 <memp_malloc>
 800d286:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d101      	bne.n	800d292 <tcp_seg_copy+0x2e>
    return NULL;
 800d28e:	2300      	movs	r3, #0
 800d290:	e00a      	b.n	800d2a8 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800d292:	2210      	movs	r2, #16
 800d294:	6879      	ldr	r1, [r7, #4]
 800d296:	68f8      	ldr	r0, [r7, #12]
 800d298:	f008 f87f 	bl	801539a <memcpy>
  pbuf_ref(cseg->p);
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	685b      	ldr	r3, [r3, #4]
 800d2a0:	4618      	mov	r0, r3
 800d2a2:	f7fe fbe9 	bl	800ba78 <pbuf_ref>
  return cseg;
 800d2a6:	68fb      	ldr	r3, [r7, #12]
}
 800d2a8:	4618      	mov	r0, r3
 800d2aa:	3710      	adds	r7, #16
 800d2ac:	46bd      	mov	sp, r7
 800d2ae:	bd80      	pop	{r7, pc}
 800d2b0:	080179b8 	.word	0x080179b8
 800d2b4:	08017f0c 	.word	0x08017f0c
 800d2b8:	080179fc 	.word	0x080179fc

0800d2bc <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800d2bc:	b580      	push	{r7, lr}
 800d2be:	b084      	sub	sp, #16
 800d2c0:	af00      	add	r7, sp, #0
 800d2c2:	60f8      	str	r0, [r7, #12]
 800d2c4:	60b9      	str	r1, [r7, #8]
 800d2c6:	607a      	str	r2, [r7, #4]
 800d2c8:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800d2ca:	68bb      	ldr	r3, [r7, #8]
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d109      	bne.n	800d2e4 <tcp_recv_null+0x28>
 800d2d0:	4b12      	ldr	r3, [pc, #72]	; (800d31c <tcp_recv_null+0x60>)
 800d2d2:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800d2d6:	4912      	ldr	r1, [pc, #72]	; (800d320 <tcp_recv_null+0x64>)
 800d2d8:	4812      	ldr	r0, [pc, #72]	; (800d324 <tcp_recv_null+0x68>)
 800d2da:	f008 f8cf 	bl	801547c <iprintf>
 800d2de:	f06f 030f 	mvn.w	r3, #15
 800d2e2:	e016      	b.n	800d312 <tcp_recv_null+0x56>

  if (p != NULL) {
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d009      	beq.n	800d2fe <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	891b      	ldrh	r3, [r3, #8]
 800d2ee:	4619      	mov	r1, r3
 800d2f0:	68b8      	ldr	r0, [r7, #8]
 800d2f2:	f7ff fad3 	bl	800c89c <tcp_recved>
    pbuf_free(p);
 800d2f6:	6878      	ldr	r0, [r7, #4]
 800d2f8:	f7fe fb18 	bl	800b92c <pbuf_free>
 800d2fc:	e008      	b.n	800d310 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800d2fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d302:	2b00      	cmp	r3, #0
 800d304:	d104      	bne.n	800d310 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800d306:	68b8      	ldr	r0, [r7, #8]
 800d308:	f7fe ffba 	bl	800c280 <tcp_close>
 800d30c:	4603      	mov	r3, r0
 800d30e:	e000      	b.n	800d312 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800d310:	2300      	movs	r3, #0
}
 800d312:	4618      	mov	r0, r3
 800d314:	3710      	adds	r7, #16
 800d316:	46bd      	mov	sp, r7
 800d318:	bd80      	pop	{r7, pc}
 800d31a:	bf00      	nop
 800d31c:	080179b8 	.word	0x080179b8
 800d320:	08017f28 	.word	0x08017f28
 800d324:	080179fc 	.word	0x080179fc

0800d328 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800d328:	b580      	push	{r7, lr}
 800d32a:	b086      	sub	sp, #24
 800d32c:	af00      	add	r7, sp, #0
 800d32e:	4603      	mov	r3, r0
 800d330:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800d332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d336:	2b00      	cmp	r3, #0
 800d338:	db01      	blt.n	800d33e <tcp_kill_prio+0x16>
 800d33a:	79fb      	ldrb	r3, [r7, #7]
 800d33c:	e000      	b.n	800d340 <tcp_kill_prio+0x18>
 800d33e:	237f      	movs	r3, #127	; 0x7f
 800d340:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800d342:	7afb      	ldrb	r3, [r7, #11]
 800d344:	2b00      	cmp	r3, #0
 800d346:	d034      	beq.n	800d3b2 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800d348:	7afb      	ldrb	r3, [r7, #11]
 800d34a:	3b01      	subs	r3, #1
 800d34c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800d34e:	2300      	movs	r3, #0
 800d350:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800d352:	2300      	movs	r3, #0
 800d354:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d356:	4b19      	ldr	r3, [pc, #100]	; (800d3bc <tcp_kill_prio+0x94>)
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	617b      	str	r3, [r7, #20]
 800d35c:	e01f      	b.n	800d39e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800d35e:	697b      	ldr	r3, [r7, #20]
 800d360:	7d5b      	ldrb	r3, [r3, #21]
 800d362:	7afa      	ldrb	r2, [r7, #11]
 800d364:	429a      	cmp	r2, r3
 800d366:	d80c      	bhi.n	800d382 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800d368:	697b      	ldr	r3, [r7, #20]
 800d36a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800d36c:	7afa      	ldrb	r2, [r7, #11]
 800d36e:	429a      	cmp	r2, r3
 800d370:	d112      	bne.n	800d398 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800d372:	4b13      	ldr	r3, [pc, #76]	; (800d3c0 <tcp_kill_prio+0x98>)
 800d374:	681a      	ldr	r2, [r3, #0]
 800d376:	697b      	ldr	r3, [r7, #20]
 800d378:	6a1b      	ldr	r3, [r3, #32]
 800d37a:	1ad3      	subs	r3, r2, r3
 800d37c:	68fa      	ldr	r2, [r7, #12]
 800d37e:	429a      	cmp	r2, r3
 800d380:	d80a      	bhi.n	800d398 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800d382:	4b0f      	ldr	r3, [pc, #60]	; (800d3c0 <tcp_kill_prio+0x98>)
 800d384:	681a      	ldr	r2, [r3, #0]
 800d386:	697b      	ldr	r3, [r7, #20]
 800d388:	6a1b      	ldr	r3, [r3, #32]
 800d38a:	1ad3      	subs	r3, r2, r3
 800d38c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800d38e:	697b      	ldr	r3, [r7, #20]
 800d390:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800d392:	697b      	ldr	r3, [r7, #20]
 800d394:	7d5b      	ldrb	r3, [r3, #21]
 800d396:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d398:	697b      	ldr	r3, [r7, #20]
 800d39a:	68db      	ldr	r3, [r3, #12]
 800d39c:	617b      	str	r3, [r7, #20]
 800d39e:	697b      	ldr	r3, [r7, #20]
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d1dc      	bne.n	800d35e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800d3a4:	693b      	ldr	r3, [r7, #16]
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d004      	beq.n	800d3b4 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800d3aa:	6938      	ldr	r0, [r7, #16]
 800d3ac:	f7ff f8ae 	bl	800c50c <tcp_abort>
 800d3b0:	e000      	b.n	800d3b4 <tcp_kill_prio+0x8c>
    return;
 800d3b2:	bf00      	nop
  }
}
 800d3b4:	3718      	adds	r7, #24
 800d3b6:	46bd      	mov	sp, r7
 800d3b8:	bd80      	pop	{r7, pc}
 800d3ba:	bf00      	nop
 800d3bc:	2000bda4 	.word	0x2000bda4
 800d3c0:	2000bda8 	.word	0x2000bda8

0800d3c4 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800d3c4:	b580      	push	{r7, lr}
 800d3c6:	b086      	sub	sp, #24
 800d3c8:	af00      	add	r7, sp, #0
 800d3ca:	4603      	mov	r3, r0
 800d3cc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800d3ce:	79fb      	ldrb	r3, [r7, #7]
 800d3d0:	2b08      	cmp	r3, #8
 800d3d2:	d009      	beq.n	800d3e8 <tcp_kill_state+0x24>
 800d3d4:	79fb      	ldrb	r3, [r7, #7]
 800d3d6:	2b09      	cmp	r3, #9
 800d3d8:	d006      	beq.n	800d3e8 <tcp_kill_state+0x24>
 800d3da:	4b1a      	ldr	r3, [pc, #104]	; (800d444 <tcp_kill_state+0x80>)
 800d3dc:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800d3e0:	4919      	ldr	r1, [pc, #100]	; (800d448 <tcp_kill_state+0x84>)
 800d3e2:	481a      	ldr	r0, [pc, #104]	; (800d44c <tcp_kill_state+0x88>)
 800d3e4:	f008 f84a 	bl	801547c <iprintf>

  inactivity = 0;
 800d3e8:	2300      	movs	r3, #0
 800d3ea:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800d3ec:	2300      	movs	r3, #0
 800d3ee:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d3f0:	4b17      	ldr	r3, [pc, #92]	; (800d450 <tcp_kill_state+0x8c>)
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	617b      	str	r3, [r7, #20]
 800d3f6:	e017      	b.n	800d428 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800d3f8:	697b      	ldr	r3, [r7, #20]
 800d3fa:	7d1b      	ldrb	r3, [r3, #20]
 800d3fc:	79fa      	ldrb	r2, [r7, #7]
 800d3fe:	429a      	cmp	r2, r3
 800d400:	d10f      	bne.n	800d422 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800d402:	4b14      	ldr	r3, [pc, #80]	; (800d454 <tcp_kill_state+0x90>)
 800d404:	681a      	ldr	r2, [r3, #0]
 800d406:	697b      	ldr	r3, [r7, #20]
 800d408:	6a1b      	ldr	r3, [r3, #32]
 800d40a:	1ad3      	subs	r3, r2, r3
 800d40c:	68fa      	ldr	r2, [r7, #12]
 800d40e:	429a      	cmp	r2, r3
 800d410:	d807      	bhi.n	800d422 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800d412:	4b10      	ldr	r3, [pc, #64]	; (800d454 <tcp_kill_state+0x90>)
 800d414:	681a      	ldr	r2, [r3, #0]
 800d416:	697b      	ldr	r3, [r7, #20]
 800d418:	6a1b      	ldr	r3, [r3, #32]
 800d41a:	1ad3      	subs	r3, r2, r3
 800d41c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800d41e:	697b      	ldr	r3, [r7, #20]
 800d420:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d422:	697b      	ldr	r3, [r7, #20]
 800d424:	68db      	ldr	r3, [r3, #12]
 800d426:	617b      	str	r3, [r7, #20]
 800d428:	697b      	ldr	r3, [r7, #20]
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d1e4      	bne.n	800d3f8 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800d42e:	693b      	ldr	r3, [r7, #16]
 800d430:	2b00      	cmp	r3, #0
 800d432:	d003      	beq.n	800d43c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800d434:	2100      	movs	r1, #0
 800d436:	6938      	ldr	r0, [r7, #16]
 800d438:	f7fe ffaa 	bl	800c390 <tcp_abandon>
  }
}
 800d43c:	bf00      	nop
 800d43e:	3718      	adds	r7, #24
 800d440:	46bd      	mov	sp, r7
 800d442:	bd80      	pop	{r7, pc}
 800d444:	080179b8 	.word	0x080179b8
 800d448:	08017f44 	.word	0x08017f44
 800d44c:	080179fc 	.word	0x080179fc
 800d450:	2000bda4 	.word	0x2000bda4
 800d454:	2000bda8 	.word	0x2000bda8

0800d458 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800d458:	b580      	push	{r7, lr}
 800d45a:	b084      	sub	sp, #16
 800d45c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800d45e:	2300      	movs	r3, #0
 800d460:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800d462:	2300      	movs	r3, #0
 800d464:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d466:	4b12      	ldr	r3, [pc, #72]	; (800d4b0 <tcp_kill_timewait+0x58>)
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	60fb      	str	r3, [r7, #12]
 800d46c:	e012      	b.n	800d494 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800d46e:	4b11      	ldr	r3, [pc, #68]	; (800d4b4 <tcp_kill_timewait+0x5c>)
 800d470:	681a      	ldr	r2, [r3, #0]
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	6a1b      	ldr	r3, [r3, #32]
 800d476:	1ad3      	subs	r3, r2, r3
 800d478:	687a      	ldr	r2, [r7, #4]
 800d47a:	429a      	cmp	r2, r3
 800d47c:	d807      	bhi.n	800d48e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800d47e:	4b0d      	ldr	r3, [pc, #52]	; (800d4b4 <tcp_kill_timewait+0x5c>)
 800d480:	681a      	ldr	r2, [r3, #0]
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	6a1b      	ldr	r3, [r3, #32]
 800d486:	1ad3      	subs	r3, r2, r3
 800d488:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	68db      	ldr	r3, [r3, #12]
 800d492:	60fb      	str	r3, [r7, #12]
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	2b00      	cmp	r3, #0
 800d498:	d1e9      	bne.n	800d46e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800d49a:	68bb      	ldr	r3, [r7, #8]
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d002      	beq.n	800d4a6 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800d4a0:	68b8      	ldr	r0, [r7, #8]
 800d4a2:	f7ff f833 	bl	800c50c <tcp_abort>
  }
}
 800d4a6:	bf00      	nop
 800d4a8:	3710      	adds	r7, #16
 800d4aa:	46bd      	mov	sp, r7
 800d4ac:	bd80      	pop	{r7, pc}
 800d4ae:	bf00      	nop
 800d4b0:	2000bdb4 	.word	0x2000bdb4
 800d4b4:	2000bda8 	.word	0x2000bda8

0800d4b8 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800d4b8:	b580      	push	{r7, lr}
 800d4ba:	b082      	sub	sp, #8
 800d4bc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800d4be:	4b10      	ldr	r3, [pc, #64]	; (800d500 <tcp_handle_closepend+0x48>)
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800d4c4:	e014      	b.n	800d4f0 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	68db      	ldr	r3, [r3, #12]
 800d4ca:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	8b5b      	ldrh	r3, [r3, #26]
 800d4d0:	f003 0308 	and.w	r3, r3, #8
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d009      	beq.n	800d4ec <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	8b5b      	ldrh	r3, [r3, #26]
 800d4dc:	f023 0308 	bic.w	r3, r3, #8
 800d4e0:	b29a      	uxth	r2, r3
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800d4e6:	6878      	ldr	r0, [r7, #4]
 800d4e8:	f7fe fe60 	bl	800c1ac <tcp_close_shutdown_fin>
    }
    pcb = next;
 800d4ec:	683b      	ldr	r3, [r7, #0]
 800d4ee:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d1e7      	bne.n	800d4c6 <tcp_handle_closepend+0xe>
  }
}
 800d4f6:	bf00      	nop
 800d4f8:	bf00      	nop
 800d4fa:	3708      	adds	r7, #8
 800d4fc:	46bd      	mov	sp, r7
 800d4fe:	bd80      	pop	{r7, pc}
 800d500:	2000bda4 	.word	0x2000bda4

0800d504 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800d504:	b580      	push	{r7, lr}
 800d506:	b084      	sub	sp, #16
 800d508:	af00      	add	r7, sp, #0
 800d50a:	4603      	mov	r3, r0
 800d50c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d50e:	2001      	movs	r0, #1
 800d510:	f7fd fb16 	bl	800ab40 <memp_malloc>
 800d514:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d126      	bne.n	800d56a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800d51c:	f7ff ffcc 	bl	800d4b8 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800d520:	f7ff ff9a 	bl	800d458 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d524:	2001      	movs	r0, #1
 800d526:	f7fd fb0b 	bl	800ab40 <memp_malloc>
 800d52a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d11b      	bne.n	800d56a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800d532:	2009      	movs	r0, #9
 800d534:	f7ff ff46 	bl	800d3c4 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d538:	2001      	movs	r0, #1
 800d53a:	f7fd fb01 	bl	800ab40 <memp_malloc>
 800d53e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	2b00      	cmp	r3, #0
 800d544:	d111      	bne.n	800d56a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800d546:	2008      	movs	r0, #8
 800d548:	f7ff ff3c 	bl	800d3c4 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d54c:	2001      	movs	r0, #1
 800d54e:	f7fd faf7 	bl	800ab40 <memp_malloc>
 800d552:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	2b00      	cmp	r3, #0
 800d558:	d107      	bne.n	800d56a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800d55a:	79fb      	ldrb	r3, [r7, #7]
 800d55c:	4618      	mov	r0, r3
 800d55e:	f7ff fee3 	bl	800d328 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d562:	2001      	movs	r0, #1
 800d564:	f7fd faec 	bl	800ab40 <memp_malloc>
 800d568:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d03f      	beq.n	800d5f0 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800d570:	229c      	movs	r2, #156	; 0x9c
 800d572:	2100      	movs	r1, #0
 800d574:	68f8      	ldr	r0, [r7, #12]
 800d576:	f007 ff1e 	bl	80153b6 <memset>
    pcb->prio = prio;
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	79fa      	ldrb	r2, [r7, #7]
 800d57e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800d586:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800d58a:	68fb      	ldr	r3, [r7, #12]
 800d58c:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800d590:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	22ff      	movs	r2, #255	; 0xff
 800d59e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	f44f 7206 	mov.w	r2, #536	; 0x218
 800d5a6:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800d5a8:	68fb      	ldr	r3, [r7, #12]
 800d5aa:	2206      	movs	r2, #6
 800d5ac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	2206      	movs	r2, #6
 800d5b4:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d5bc:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	2201      	movs	r2, #1
 800d5c2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800d5c6:	4b0d      	ldr	r3, [pc, #52]	; (800d5fc <tcp_alloc+0xf8>)
 800d5c8:	681a      	ldr	r2, [r3, #0]
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800d5ce:	4b0c      	ldr	r3, [pc, #48]	; (800d600 <tcp_alloc+0xfc>)
 800d5d0:	781a      	ldrb	r2, [r3, #0]
 800d5d2:	68fb      	ldr	r3, [r7, #12]
 800d5d4:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800d5dc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	4a08      	ldr	r2, [pc, #32]	; (800d604 <tcp_alloc+0x100>)
 800d5e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	4a07      	ldr	r2, [pc, #28]	; (800d608 <tcp_alloc+0x104>)
 800d5ec:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800d5f0:	68fb      	ldr	r3, [r7, #12]
}
 800d5f2:	4618      	mov	r0, r3
 800d5f4:	3710      	adds	r7, #16
 800d5f6:	46bd      	mov	sp, r7
 800d5f8:	bd80      	pop	{r7, pc}
 800d5fa:	bf00      	nop
 800d5fc:	2000bda8 	.word	0x2000bda8
 800d600:	20004aca 	.word	0x20004aca
 800d604:	0800d2bd 	.word	0x0800d2bd
 800d608:	006ddd00 	.word	0x006ddd00

0800d60c <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800d60c:	b580      	push	{r7, lr}
 800d60e:	b084      	sub	sp, #16
 800d610:	af00      	add	r7, sp, #0
 800d612:	4603      	mov	r3, r0
 800d614:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800d616:	2040      	movs	r0, #64	; 0x40
 800d618:	f7ff ff74 	bl	800d504 <tcp_alloc>
 800d61c:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800d61e:	68fb      	ldr	r3, [r7, #12]
}
 800d620:	4618      	mov	r0, r3
 800d622:	3710      	adds	r7, #16
 800d624:	46bd      	mov	sp, r7
 800d626:	bd80      	pop	{r7, pc}

0800d628 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800d628:	b480      	push	{r7}
 800d62a:	b083      	sub	sp, #12
 800d62c:	af00      	add	r7, sp, #0
 800d62e:	6078      	str	r0, [r7, #4]
 800d630:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	2b00      	cmp	r3, #0
 800d636:	d002      	beq.n	800d63e <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	683a      	ldr	r2, [r7, #0]
 800d63c:	611a      	str	r2, [r3, #16]
  }
}
 800d63e:	bf00      	nop
 800d640:	370c      	adds	r7, #12
 800d642:	46bd      	mov	sp, r7
 800d644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d648:	4770      	bx	lr
	...

0800d64c <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800d64c:	b580      	push	{r7, lr}
 800d64e:	b082      	sub	sp, #8
 800d650:	af00      	add	r7, sp, #0
 800d652:	6078      	str	r0, [r7, #4]
 800d654:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d00e      	beq.n	800d67a <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	7d1b      	ldrb	r3, [r3, #20]
 800d660:	2b01      	cmp	r3, #1
 800d662:	d106      	bne.n	800d672 <tcp_recv+0x26>
 800d664:	4b07      	ldr	r3, [pc, #28]	; (800d684 <tcp_recv+0x38>)
 800d666:	f240 72df 	movw	r2, #2015	; 0x7df
 800d66a:	4907      	ldr	r1, [pc, #28]	; (800d688 <tcp_recv+0x3c>)
 800d66c:	4807      	ldr	r0, [pc, #28]	; (800d68c <tcp_recv+0x40>)
 800d66e:	f007 ff05 	bl	801547c <iprintf>
    pcb->recv = recv;
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	683a      	ldr	r2, [r7, #0]
 800d676:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800d67a:	bf00      	nop
 800d67c:	3708      	adds	r7, #8
 800d67e:	46bd      	mov	sp, r7
 800d680:	bd80      	pop	{r7, pc}
 800d682:	bf00      	nop
 800d684:	080179b8 	.word	0x080179b8
 800d688:	08017f54 	.word	0x08017f54
 800d68c:	080179fc 	.word	0x080179fc

0800d690 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800d690:	b580      	push	{r7, lr}
 800d692:	b082      	sub	sp, #8
 800d694:	af00      	add	r7, sp, #0
 800d696:	6078      	str	r0, [r7, #4]
 800d698:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d00e      	beq.n	800d6be <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	7d1b      	ldrb	r3, [r3, #20]
 800d6a4:	2b01      	cmp	r3, #1
 800d6a6:	d106      	bne.n	800d6b6 <tcp_sent+0x26>
 800d6a8:	4b07      	ldr	r3, [pc, #28]	; (800d6c8 <tcp_sent+0x38>)
 800d6aa:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800d6ae:	4907      	ldr	r1, [pc, #28]	; (800d6cc <tcp_sent+0x3c>)
 800d6b0:	4807      	ldr	r0, [pc, #28]	; (800d6d0 <tcp_sent+0x40>)
 800d6b2:	f007 fee3 	bl	801547c <iprintf>
    pcb->sent = sent;
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	683a      	ldr	r2, [r7, #0]
 800d6ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800d6be:	bf00      	nop
 800d6c0:	3708      	adds	r7, #8
 800d6c2:	46bd      	mov	sp, r7
 800d6c4:	bd80      	pop	{r7, pc}
 800d6c6:	bf00      	nop
 800d6c8:	080179b8 	.word	0x080179b8
 800d6cc:	08017f7c 	.word	0x08017f7c
 800d6d0:	080179fc 	.word	0x080179fc

0800d6d4 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800d6d4:	b580      	push	{r7, lr}
 800d6d6:	b082      	sub	sp, #8
 800d6d8:	af00      	add	r7, sp, #0
 800d6da:	6078      	str	r0, [r7, #4]
 800d6dc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d00e      	beq.n	800d702 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	7d1b      	ldrb	r3, [r3, #20]
 800d6e8:	2b01      	cmp	r3, #1
 800d6ea:	d106      	bne.n	800d6fa <tcp_err+0x26>
 800d6ec:	4b07      	ldr	r3, [pc, #28]	; (800d70c <tcp_err+0x38>)
 800d6ee:	f640 020d 	movw	r2, #2061	; 0x80d
 800d6f2:	4907      	ldr	r1, [pc, #28]	; (800d710 <tcp_err+0x3c>)
 800d6f4:	4807      	ldr	r0, [pc, #28]	; (800d714 <tcp_err+0x40>)
 800d6f6:	f007 fec1 	bl	801547c <iprintf>
    pcb->errf = err;
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	683a      	ldr	r2, [r7, #0]
 800d6fe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800d702:	bf00      	nop
 800d704:	3708      	adds	r7, #8
 800d706:	46bd      	mov	sp, r7
 800d708:	bd80      	pop	{r7, pc}
 800d70a:	bf00      	nop
 800d70c:	080179b8 	.word	0x080179b8
 800d710:	08017fa4 	.word	0x08017fa4
 800d714:	080179fc 	.word	0x080179fc

0800d718 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800d718:	b480      	push	{r7}
 800d71a:	b085      	sub	sp, #20
 800d71c:	af00      	add	r7, sp, #0
 800d71e:	6078      	str	r0, [r7, #4]
 800d720:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	2b00      	cmp	r3, #0
 800d726:	d008      	beq.n	800d73a <tcp_accept+0x22>
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	7d1b      	ldrb	r3, [r3, #20]
 800d72c:	2b01      	cmp	r3, #1
 800d72e:	d104      	bne.n	800d73a <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	683a      	ldr	r2, [r7, #0]
 800d738:	619a      	str	r2, [r3, #24]
  }
}
 800d73a:	bf00      	nop
 800d73c:	3714      	adds	r7, #20
 800d73e:	46bd      	mov	sp, r7
 800d740:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d744:	4770      	bx	lr
	...

0800d748 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800d748:	b580      	push	{r7, lr}
 800d74a:	b084      	sub	sp, #16
 800d74c:	af00      	add	r7, sp, #0
 800d74e:	60f8      	str	r0, [r7, #12]
 800d750:	60b9      	str	r1, [r7, #8]
 800d752:	4613      	mov	r3, r2
 800d754:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d107      	bne.n	800d76c <tcp_poll+0x24>
 800d75c:	4b0e      	ldr	r3, [pc, #56]	; (800d798 <tcp_poll+0x50>)
 800d75e:	f640 023d 	movw	r2, #2109	; 0x83d
 800d762:	490e      	ldr	r1, [pc, #56]	; (800d79c <tcp_poll+0x54>)
 800d764:	480e      	ldr	r0, [pc, #56]	; (800d7a0 <tcp_poll+0x58>)
 800d766:	f007 fe89 	bl	801547c <iprintf>
 800d76a:	e011      	b.n	800d790 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	7d1b      	ldrb	r3, [r3, #20]
 800d770:	2b01      	cmp	r3, #1
 800d772:	d106      	bne.n	800d782 <tcp_poll+0x3a>
 800d774:	4b08      	ldr	r3, [pc, #32]	; (800d798 <tcp_poll+0x50>)
 800d776:	f640 023e 	movw	r2, #2110	; 0x83e
 800d77a:	490a      	ldr	r1, [pc, #40]	; (800d7a4 <tcp_poll+0x5c>)
 800d77c:	4808      	ldr	r0, [pc, #32]	; (800d7a0 <tcp_poll+0x58>)
 800d77e:	f007 fe7d 	bl	801547c <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	68ba      	ldr	r2, [r7, #8]
 800d786:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	79fa      	ldrb	r2, [r7, #7]
 800d78e:	775a      	strb	r2, [r3, #29]
}
 800d790:	3710      	adds	r7, #16
 800d792:	46bd      	mov	sp, r7
 800d794:	bd80      	pop	{r7, pc}
 800d796:	bf00      	nop
 800d798:	080179b8 	.word	0x080179b8
 800d79c:	08017fcc 	.word	0x08017fcc
 800d7a0:	080179fc 	.word	0x080179fc
 800d7a4:	08017fe4 	.word	0x08017fe4

0800d7a8 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800d7a8:	b580      	push	{r7, lr}
 800d7aa:	b082      	sub	sp, #8
 800d7ac:	af00      	add	r7, sp, #0
 800d7ae:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d107      	bne.n	800d7c6 <tcp_pcb_purge+0x1e>
 800d7b6:	4b21      	ldr	r3, [pc, #132]	; (800d83c <tcp_pcb_purge+0x94>)
 800d7b8:	f640 0251 	movw	r2, #2129	; 0x851
 800d7bc:	4920      	ldr	r1, [pc, #128]	; (800d840 <tcp_pcb_purge+0x98>)
 800d7be:	4821      	ldr	r0, [pc, #132]	; (800d844 <tcp_pcb_purge+0x9c>)
 800d7c0:	f007 fe5c 	bl	801547c <iprintf>
 800d7c4:	e037      	b.n	800d836 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	7d1b      	ldrb	r3, [r3, #20]
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d033      	beq.n	800d836 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800d7d2:	2b0a      	cmp	r3, #10
 800d7d4:	d02f      	beq.n	800d836 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800d7da:	2b01      	cmp	r3, #1
 800d7dc:	d02b      	beq.n	800d836 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d007      	beq.n	800d7f6 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d7ea:	4618      	mov	r0, r3
 800d7ec:	f7fe f89e 	bl	800b92c <pbuf_free>
      pcb->refused_data = NULL;
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	2200      	movs	r2, #0
 800d7f4:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d002      	beq.n	800d804 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800d7fe:	6878      	ldr	r0, [r7, #4]
 800d800:	f000 f986 	bl	800db10 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d80a:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d810:	4618      	mov	r0, r3
 800d812:	f7ff fcf9 	bl	800d208 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d81a:	4618      	mov	r0, r3
 800d81c:	f7ff fcf4 	bl	800d208 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	2200      	movs	r2, #0
 800d824:	66da      	str	r2, [r3, #108]	; 0x6c
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	2200      	movs	r2, #0
 800d832:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800d836:	3708      	adds	r7, #8
 800d838:	46bd      	mov	sp, r7
 800d83a:	bd80      	pop	{r7, pc}
 800d83c:	080179b8 	.word	0x080179b8
 800d840:	08018004 	.word	0x08018004
 800d844:	080179fc 	.word	0x080179fc

0800d848 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800d848:	b580      	push	{r7, lr}
 800d84a:	b084      	sub	sp, #16
 800d84c:	af00      	add	r7, sp, #0
 800d84e:	6078      	str	r0, [r7, #4]
 800d850:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800d852:	683b      	ldr	r3, [r7, #0]
 800d854:	2b00      	cmp	r3, #0
 800d856:	d106      	bne.n	800d866 <tcp_pcb_remove+0x1e>
 800d858:	4b3e      	ldr	r3, [pc, #248]	; (800d954 <tcp_pcb_remove+0x10c>)
 800d85a:	f640 0283 	movw	r2, #2179	; 0x883
 800d85e:	493e      	ldr	r1, [pc, #248]	; (800d958 <tcp_pcb_remove+0x110>)
 800d860:	483e      	ldr	r0, [pc, #248]	; (800d95c <tcp_pcb_remove+0x114>)
 800d862:	f007 fe0b 	bl	801547c <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d106      	bne.n	800d87a <tcp_pcb_remove+0x32>
 800d86c:	4b39      	ldr	r3, [pc, #228]	; (800d954 <tcp_pcb_remove+0x10c>)
 800d86e:	f640 0284 	movw	r2, #2180	; 0x884
 800d872:	493b      	ldr	r1, [pc, #236]	; (800d960 <tcp_pcb_remove+0x118>)
 800d874:	4839      	ldr	r0, [pc, #228]	; (800d95c <tcp_pcb_remove+0x114>)
 800d876:	f007 fe01 	bl	801547c <iprintf>

  TCP_RMV(pcblist, pcb);
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	683a      	ldr	r2, [r7, #0]
 800d880:	429a      	cmp	r2, r3
 800d882:	d105      	bne.n	800d890 <tcp_pcb_remove+0x48>
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	68da      	ldr	r2, [r3, #12]
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	601a      	str	r2, [r3, #0]
 800d88e:	e013      	b.n	800d8b8 <tcp_pcb_remove+0x70>
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	60fb      	str	r3, [r7, #12]
 800d896:	e00c      	b.n	800d8b2 <tcp_pcb_remove+0x6a>
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	68db      	ldr	r3, [r3, #12]
 800d89c:	683a      	ldr	r2, [r7, #0]
 800d89e:	429a      	cmp	r2, r3
 800d8a0:	d104      	bne.n	800d8ac <tcp_pcb_remove+0x64>
 800d8a2:	683b      	ldr	r3, [r7, #0]
 800d8a4:	68da      	ldr	r2, [r3, #12]
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	60da      	str	r2, [r3, #12]
 800d8aa:	e005      	b.n	800d8b8 <tcp_pcb_remove+0x70>
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	68db      	ldr	r3, [r3, #12]
 800d8b0:	60fb      	str	r3, [r7, #12]
 800d8b2:	68fb      	ldr	r3, [r7, #12]
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d1ef      	bne.n	800d898 <tcp_pcb_remove+0x50>
 800d8b8:	683b      	ldr	r3, [r7, #0]
 800d8ba:	2200      	movs	r2, #0
 800d8bc:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800d8be:	6838      	ldr	r0, [r7, #0]
 800d8c0:	f7ff ff72 	bl	800d7a8 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800d8c4:	683b      	ldr	r3, [r7, #0]
 800d8c6:	7d1b      	ldrb	r3, [r3, #20]
 800d8c8:	2b0a      	cmp	r3, #10
 800d8ca:	d013      	beq.n	800d8f4 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800d8cc:	683b      	ldr	r3, [r7, #0]
 800d8ce:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800d8d0:	2b01      	cmp	r3, #1
 800d8d2:	d00f      	beq.n	800d8f4 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800d8d4:	683b      	ldr	r3, [r7, #0]
 800d8d6:	8b5b      	ldrh	r3, [r3, #26]
 800d8d8:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d009      	beq.n	800d8f4 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800d8e0:	683b      	ldr	r3, [r7, #0]
 800d8e2:	8b5b      	ldrh	r3, [r3, #26]
 800d8e4:	f043 0302 	orr.w	r3, r3, #2
 800d8e8:	b29a      	uxth	r2, r3
 800d8ea:	683b      	ldr	r3, [r7, #0]
 800d8ec:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800d8ee:	6838      	ldr	r0, [r7, #0]
 800d8f0:	f003 fbc2 	bl	8011078 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800d8f4:	683b      	ldr	r3, [r7, #0]
 800d8f6:	7d1b      	ldrb	r3, [r3, #20]
 800d8f8:	2b01      	cmp	r3, #1
 800d8fa:	d020      	beq.n	800d93e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800d8fc:	683b      	ldr	r3, [r7, #0]
 800d8fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d900:	2b00      	cmp	r3, #0
 800d902:	d006      	beq.n	800d912 <tcp_pcb_remove+0xca>
 800d904:	4b13      	ldr	r3, [pc, #76]	; (800d954 <tcp_pcb_remove+0x10c>)
 800d906:	f640 0293 	movw	r2, #2195	; 0x893
 800d90a:	4916      	ldr	r1, [pc, #88]	; (800d964 <tcp_pcb_remove+0x11c>)
 800d90c:	4813      	ldr	r0, [pc, #76]	; (800d95c <tcp_pcb_remove+0x114>)
 800d90e:	f007 fdb5 	bl	801547c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800d912:	683b      	ldr	r3, [r7, #0]
 800d914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d916:	2b00      	cmp	r3, #0
 800d918:	d006      	beq.n	800d928 <tcp_pcb_remove+0xe0>
 800d91a:	4b0e      	ldr	r3, [pc, #56]	; (800d954 <tcp_pcb_remove+0x10c>)
 800d91c:	f640 0294 	movw	r2, #2196	; 0x894
 800d920:	4911      	ldr	r1, [pc, #68]	; (800d968 <tcp_pcb_remove+0x120>)
 800d922:	480e      	ldr	r0, [pc, #56]	; (800d95c <tcp_pcb_remove+0x114>)
 800d924:	f007 fdaa 	bl	801547c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800d928:	683b      	ldr	r3, [r7, #0]
 800d92a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d006      	beq.n	800d93e <tcp_pcb_remove+0xf6>
 800d930:	4b08      	ldr	r3, [pc, #32]	; (800d954 <tcp_pcb_remove+0x10c>)
 800d932:	f640 0296 	movw	r2, #2198	; 0x896
 800d936:	490d      	ldr	r1, [pc, #52]	; (800d96c <tcp_pcb_remove+0x124>)
 800d938:	4808      	ldr	r0, [pc, #32]	; (800d95c <tcp_pcb_remove+0x114>)
 800d93a:	f007 fd9f 	bl	801547c <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800d93e:	683b      	ldr	r3, [r7, #0]
 800d940:	2200      	movs	r2, #0
 800d942:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800d944:	683b      	ldr	r3, [r7, #0]
 800d946:	2200      	movs	r2, #0
 800d948:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800d94a:	bf00      	nop
 800d94c:	3710      	adds	r7, #16
 800d94e:	46bd      	mov	sp, r7
 800d950:	bd80      	pop	{r7, pc}
 800d952:	bf00      	nop
 800d954:	080179b8 	.word	0x080179b8
 800d958:	08018020 	.word	0x08018020
 800d95c:	080179fc 	.word	0x080179fc
 800d960:	0801803c 	.word	0x0801803c
 800d964:	0801805c 	.word	0x0801805c
 800d968:	08018074 	.word	0x08018074
 800d96c:	08018090 	.word	0x08018090

0800d970 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800d970:	b580      	push	{r7, lr}
 800d972:	b082      	sub	sp, #8
 800d974:	af00      	add	r7, sp, #0
 800d976:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	d106      	bne.n	800d98c <tcp_next_iss+0x1c>
 800d97e:	4b0a      	ldr	r3, [pc, #40]	; (800d9a8 <tcp_next_iss+0x38>)
 800d980:	f640 02af 	movw	r2, #2223	; 0x8af
 800d984:	4909      	ldr	r1, [pc, #36]	; (800d9ac <tcp_next_iss+0x3c>)
 800d986:	480a      	ldr	r0, [pc, #40]	; (800d9b0 <tcp_next_iss+0x40>)
 800d988:	f007 fd78 	bl	801547c <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800d98c:	4b09      	ldr	r3, [pc, #36]	; (800d9b4 <tcp_next_iss+0x44>)
 800d98e:	681a      	ldr	r2, [r3, #0]
 800d990:	4b09      	ldr	r3, [pc, #36]	; (800d9b8 <tcp_next_iss+0x48>)
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	4413      	add	r3, r2
 800d996:	4a07      	ldr	r2, [pc, #28]	; (800d9b4 <tcp_next_iss+0x44>)
 800d998:	6013      	str	r3, [r2, #0]
  return iss;
 800d99a:	4b06      	ldr	r3, [pc, #24]	; (800d9b4 <tcp_next_iss+0x44>)
 800d99c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800d99e:	4618      	mov	r0, r3
 800d9a0:	3708      	adds	r7, #8
 800d9a2:	46bd      	mov	sp, r7
 800d9a4:	bd80      	pop	{r7, pc}
 800d9a6:	bf00      	nop
 800d9a8:	080179b8 	.word	0x080179b8
 800d9ac:	080180a8 	.word	0x080180a8
 800d9b0:	080179fc 	.word	0x080179fc
 800d9b4:	20000014 	.word	0x20000014
 800d9b8:	2000bda8 	.word	0x2000bda8

0800d9bc <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800d9bc:	b580      	push	{r7, lr}
 800d9be:	b086      	sub	sp, #24
 800d9c0:	af00      	add	r7, sp, #0
 800d9c2:	4603      	mov	r3, r0
 800d9c4:	60b9      	str	r1, [r7, #8]
 800d9c6:	607a      	str	r2, [r7, #4]
 800d9c8:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d106      	bne.n	800d9de <tcp_eff_send_mss_netif+0x22>
 800d9d0:	4b14      	ldr	r3, [pc, #80]	; (800da24 <tcp_eff_send_mss_netif+0x68>)
 800d9d2:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800d9d6:	4914      	ldr	r1, [pc, #80]	; (800da28 <tcp_eff_send_mss_netif+0x6c>)
 800d9d8:	4814      	ldr	r0, [pc, #80]	; (800da2c <tcp_eff_send_mss_netif+0x70>)
 800d9da:	f007 fd4f 	bl	801547c <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800d9de:	68bb      	ldr	r3, [r7, #8]
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d101      	bne.n	800d9e8 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800d9e4:	89fb      	ldrh	r3, [r7, #14]
 800d9e6:	e019      	b.n	800da1c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800d9e8:	68bb      	ldr	r3, [r7, #8]
 800d9ea:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d9ec:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800d9ee:	8afb      	ldrh	r3, [r7, #22]
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d012      	beq.n	800da1a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800d9f4:	2328      	movs	r3, #40	; 0x28
 800d9f6:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800d9f8:	8afa      	ldrh	r2, [r7, #22]
 800d9fa:	8abb      	ldrh	r3, [r7, #20]
 800d9fc:	429a      	cmp	r2, r3
 800d9fe:	d904      	bls.n	800da0a <tcp_eff_send_mss_netif+0x4e>
 800da00:	8afa      	ldrh	r2, [r7, #22]
 800da02:	8abb      	ldrh	r3, [r7, #20]
 800da04:	1ad3      	subs	r3, r2, r3
 800da06:	b29b      	uxth	r3, r3
 800da08:	e000      	b.n	800da0c <tcp_eff_send_mss_netif+0x50>
 800da0a:	2300      	movs	r3, #0
 800da0c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800da0e:	8a7a      	ldrh	r2, [r7, #18]
 800da10:	89fb      	ldrh	r3, [r7, #14]
 800da12:	4293      	cmp	r3, r2
 800da14:	bf28      	it	cs
 800da16:	4613      	movcs	r3, r2
 800da18:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800da1a:	89fb      	ldrh	r3, [r7, #14]
}
 800da1c:	4618      	mov	r0, r3
 800da1e:	3718      	adds	r7, #24
 800da20:	46bd      	mov	sp, r7
 800da22:	bd80      	pop	{r7, pc}
 800da24:	080179b8 	.word	0x080179b8
 800da28:	080180c4 	.word	0x080180c4
 800da2c:	080179fc 	.word	0x080179fc

0800da30 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800da30:	b580      	push	{r7, lr}
 800da32:	b084      	sub	sp, #16
 800da34:	af00      	add	r7, sp, #0
 800da36:	6078      	str	r0, [r7, #4]
 800da38:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800da3a:	683b      	ldr	r3, [r7, #0]
 800da3c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	2b00      	cmp	r3, #0
 800da42:	d119      	bne.n	800da78 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800da44:	4b10      	ldr	r3, [pc, #64]	; (800da88 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800da46:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800da4a:	4910      	ldr	r1, [pc, #64]	; (800da8c <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800da4c:	4810      	ldr	r0, [pc, #64]	; (800da90 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800da4e:	f007 fd15 	bl	801547c <iprintf>

  while (pcb != NULL) {
 800da52:	e011      	b.n	800da78 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800da54:	68fb      	ldr	r3, [r7, #12]
 800da56:	681a      	ldr	r2, [r3, #0]
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	429a      	cmp	r2, r3
 800da5e:	d108      	bne.n	800da72 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	68db      	ldr	r3, [r3, #12]
 800da64:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800da66:	68f8      	ldr	r0, [r7, #12]
 800da68:	f7fe fd50 	bl	800c50c <tcp_abort>
      pcb = next;
 800da6c:	68bb      	ldr	r3, [r7, #8]
 800da6e:	60fb      	str	r3, [r7, #12]
 800da70:	e002      	b.n	800da78 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	68db      	ldr	r3, [r3, #12]
 800da76:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d1ea      	bne.n	800da54 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800da7e:	bf00      	nop
 800da80:	bf00      	nop
 800da82:	3710      	adds	r7, #16
 800da84:	46bd      	mov	sp, r7
 800da86:	bd80      	pop	{r7, pc}
 800da88:	080179b8 	.word	0x080179b8
 800da8c:	080180ec 	.word	0x080180ec
 800da90:	080179fc 	.word	0x080179fc

0800da94 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800da94:	b580      	push	{r7, lr}
 800da96:	b084      	sub	sp, #16
 800da98:	af00      	add	r7, sp, #0
 800da9a:	6078      	str	r0, [r7, #4]
 800da9c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d02a      	beq.n	800dafa <tcp_netif_ip_addr_changed+0x66>
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d026      	beq.n	800dafa <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800daac:	4b15      	ldr	r3, [pc, #84]	; (800db04 <tcp_netif_ip_addr_changed+0x70>)
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	4619      	mov	r1, r3
 800dab2:	6878      	ldr	r0, [r7, #4]
 800dab4:	f7ff ffbc 	bl	800da30 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800dab8:	4b13      	ldr	r3, [pc, #76]	; (800db08 <tcp_netif_ip_addr_changed+0x74>)
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	4619      	mov	r1, r3
 800dabe:	6878      	ldr	r0, [r7, #4]
 800dac0:	f7ff ffb6 	bl	800da30 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800dac4:	683b      	ldr	r3, [r7, #0]
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d017      	beq.n	800dafa <tcp_netif_ip_addr_changed+0x66>
 800daca:	683b      	ldr	r3, [r7, #0]
 800dacc:	681b      	ldr	r3, [r3, #0]
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d013      	beq.n	800dafa <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800dad2:	4b0e      	ldr	r3, [pc, #56]	; (800db0c <tcp_netif_ip_addr_changed+0x78>)
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	60fb      	str	r3, [r7, #12]
 800dad8:	e00c      	b.n	800daf4 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	681a      	ldr	r2, [r3, #0]
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	429a      	cmp	r2, r3
 800dae4:	d103      	bne.n	800daee <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800dae6:	683b      	ldr	r3, [r7, #0]
 800dae8:	681a      	ldr	r2, [r3, #0]
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	68db      	ldr	r3, [r3, #12]
 800daf2:	60fb      	str	r3, [r7, #12]
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d1ef      	bne.n	800dada <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800dafa:	bf00      	nop
 800dafc:	3710      	adds	r7, #16
 800dafe:	46bd      	mov	sp, r7
 800db00:	bd80      	pop	{r7, pc}
 800db02:	bf00      	nop
 800db04:	2000bda4 	.word	0x2000bda4
 800db08:	2000bdb0 	.word	0x2000bdb0
 800db0c:	2000bdac 	.word	0x2000bdac

0800db10 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800db10:	b580      	push	{r7, lr}
 800db12:	b082      	sub	sp, #8
 800db14:	af00      	add	r7, sp, #0
 800db16:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d007      	beq.n	800db30 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800db24:	4618      	mov	r0, r3
 800db26:	f7ff fb6f 	bl	800d208 <tcp_segs_free>
    pcb->ooseq = NULL;
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	2200      	movs	r2, #0
 800db2e:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800db30:	bf00      	nop
 800db32:	3708      	adds	r7, #8
 800db34:	46bd      	mov	sp, r7
 800db36:	bd80      	pop	{r7, pc}

0800db38 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800db38:	b590      	push	{r4, r7, lr}
 800db3a:	b08d      	sub	sp, #52	; 0x34
 800db3c:	af04      	add	r7, sp, #16
 800db3e:	6078      	str	r0, [r7, #4]
 800db40:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	2b00      	cmp	r3, #0
 800db46:	d105      	bne.n	800db54 <tcp_input+0x1c>
 800db48:	4b9b      	ldr	r3, [pc, #620]	; (800ddb8 <tcp_input+0x280>)
 800db4a:	2283      	movs	r2, #131	; 0x83
 800db4c:	499b      	ldr	r1, [pc, #620]	; (800ddbc <tcp_input+0x284>)
 800db4e:	489c      	ldr	r0, [pc, #624]	; (800ddc0 <tcp_input+0x288>)
 800db50:	f007 fc94 	bl	801547c <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	685b      	ldr	r3, [r3, #4]
 800db58:	4a9a      	ldr	r2, [pc, #616]	; (800ddc4 <tcp_input+0x28c>)
 800db5a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	895b      	ldrh	r3, [r3, #10]
 800db60:	2b13      	cmp	r3, #19
 800db62:	f240 83c4 	bls.w	800e2ee <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800db66:	4b98      	ldr	r3, [pc, #608]	; (800ddc8 <tcp_input+0x290>)
 800db68:	695b      	ldr	r3, [r3, #20]
 800db6a:	4a97      	ldr	r2, [pc, #604]	; (800ddc8 <tcp_input+0x290>)
 800db6c:	6812      	ldr	r2, [r2, #0]
 800db6e:	4611      	mov	r1, r2
 800db70:	4618      	mov	r0, r3
 800db72:	f006 f9e1 	bl	8013f38 <ip4_addr_isbroadcast_u32>
 800db76:	4603      	mov	r3, r0
 800db78:	2b00      	cmp	r3, #0
 800db7a:	f040 83ba 	bne.w	800e2f2 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800db7e:	4b92      	ldr	r3, [pc, #584]	; (800ddc8 <tcp_input+0x290>)
 800db80:	695b      	ldr	r3, [r3, #20]
 800db82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800db86:	2be0      	cmp	r3, #224	; 0xe0
 800db88:	f000 83b3 	beq.w	800e2f2 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800db8c:	4b8d      	ldr	r3, [pc, #564]	; (800ddc4 <tcp_input+0x28c>)
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	899b      	ldrh	r3, [r3, #12]
 800db92:	b29b      	uxth	r3, r3
 800db94:	4618      	mov	r0, r3
 800db96:	f7fc fb1d 	bl	800a1d4 <lwip_htons>
 800db9a:	4603      	mov	r3, r0
 800db9c:	0b1b      	lsrs	r3, r3, #12
 800db9e:	b29b      	uxth	r3, r3
 800dba0:	b2db      	uxtb	r3, r3
 800dba2:	009b      	lsls	r3, r3, #2
 800dba4:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800dba6:	7cbb      	ldrb	r3, [r7, #18]
 800dba8:	2b13      	cmp	r3, #19
 800dbaa:	f240 83a4 	bls.w	800e2f6 <tcp_input+0x7be>
 800dbae:	7cbb      	ldrb	r3, [r7, #18]
 800dbb0:	b29a      	uxth	r2, r3
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	891b      	ldrh	r3, [r3, #8]
 800dbb6:	429a      	cmp	r2, r3
 800dbb8:	f200 839d 	bhi.w	800e2f6 <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800dbbc:	7cbb      	ldrb	r3, [r7, #18]
 800dbbe:	b29b      	uxth	r3, r3
 800dbc0:	3b14      	subs	r3, #20
 800dbc2:	b29a      	uxth	r2, r3
 800dbc4:	4b81      	ldr	r3, [pc, #516]	; (800ddcc <tcp_input+0x294>)
 800dbc6:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800dbc8:	4b81      	ldr	r3, [pc, #516]	; (800ddd0 <tcp_input+0x298>)
 800dbca:	2200      	movs	r2, #0
 800dbcc:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	895a      	ldrh	r2, [r3, #10]
 800dbd2:	7cbb      	ldrb	r3, [r7, #18]
 800dbd4:	b29b      	uxth	r3, r3
 800dbd6:	429a      	cmp	r2, r3
 800dbd8:	d309      	bcc.n	800dbee <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800dbda:	4b7c      	ldr	r3, [pc, #496]	; (800ddcc <tcp_input+0x294>)
 800dbdc:	881a      	ldrh	r2, [r3, #0]
 800dbde:	4b7d      	ldr	r3, [pc, #500]	; (800ddd4 <tcp_input+0x29c>)
 800dbe0:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800dbe2:	7cbb      	ldrb	r3, [r7, #18]
 800dbe4:	4619      	mov	r1, r3
 800dbe6:	6878      	ldr	r0, [r7, #4]
 800dbe8:	f7fd fe1a 	bl	800b820 <pbuf_remove_header>
 800dbec:	e04e      	b.n	800dc8c <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	d105      	bne.n	800dc02 <tcp_input+0xca>
 800dbf6:	4b70      	ldr	r3, [pc, #448]	; (800ddb8 <tcp_input+0x280>)
 800dbf8:	22c2      	movs	r2, #194	; 0xc2
 800dbfa:	4977      	ldr	r1, [pc, #476]	; (800ddd8 <tcp_input+0x2a0>)
 800dbfc:	4870      	ldr	r0, [pc, #448]	; (800ddc0 <tcp_input+0x288>)
 800dbfe:	f007 fc3d 	bl	801547c <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800dc02:	2114      	movs	r1, #20
 800dc04:	6878      	ldr	r0, [r7, #4]
 800dc06:	f7fd fe0b 	bl	800b820 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	895a      	ldrh	r2, [r3, #10]
 800dc0e:	4b71      	ldr	r3, [pc, #452]	; (800ddd4 <tcp_input+0x29c>)
 800dc10:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800dc12:	4b6e      	ldr	r3, [pc, #440]	; (800ddcc <tcp_input+0x294>)
 800dc14:	881a      	ldrh	r2, [r3, #0]
 800dc16:	4b6f      	ldr	r3, [pc, #444]	; (800ddd4 <tcp_input+0x29c>)
 800dc18:	881b      	ldrh	r3, [r3, #0]
 800dc1a:	1ad3      	subs	r3, r2, r3
 800dc1c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800dc1e:	4b6d      	ldr	r3, [pc, #436]	; (800ddd4 <tcp_input+0x29c>)
 800dc20:	881b      	ldrh	r3, [r3, #0]
 800dc22:	4619      	mov	r1, r3
 800dc24:	6878      	ldr	r0, [r7, #4]
 800dc26:	f7fd fdfb 	bl	800b820 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	895b      	ldrh	r3, [r3, #10]
 800dc30:	8a3a      	ldrh	r2, [r7, #16]
 800dc32:	429a      	cmp	r2, r3
 800dc34:	f200 8361 	bhi.w	800e2fa <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	685b      	ldr	r3, [r3, #4]
 800dc3e:	4a64      	ldr	r2, [pc, #400]	; (800ddd0 <tcp_input+0x298>)
 800dc40:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	8a3a      	ldrh	r2, [r7, #16]
 800dc48:	4611      	mov	r1, r2
 800dc4a:	4618      	mov	r0, r3
 800dc4c:	f7fd fde8 	bl	800b820 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	891a      	ldrh	r2, [r3, #8]
 800dc54:	8a3b      	ldrh	r3, [r7, #16]
 800dc56:	1ad3      	subs	r3, r2, r3
 800dc58:	b29a      	uxth	r2, r3
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	895b      	ldrh	r3, [r3, #10]
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d005      	beq.n	800dc72 <tcp_input+0x13a>
 800dc66:	4b54      	ldr	r3, [pc, #336]	; (800ddb8 <tcp_input+0x280>)
 800dc68:	22df      	movs	r2, #223	; 0xdf
 800dc6a:	495c      	ldr	r1, [pc, #368]	; (800dddc <tcp_input+0x2a4>)
 800dc6c:	4854      	ldr	r0, [pc, #336]	; (800ddc0 <tcp_input+0x288>)
 800dc6e:	f007 fc05 	bl	801547c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	891a      	ldrh	r2, [r3, #8]
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	891b      	ldrh	r3, [r3, #8]
 800dc7c:	429a      	cmp	r2, r3
 800dc7e:	d005      	beq.n	800dc8c <tcp_input+0x154>
 800dc80:	4b4d      	ldr	r3, [pc, #308]	; (800ddb8 <tcp_input+0x280>)
 800dc82:	22e0      	movs	r2, #224	; 0xe0
 800dc84:	4956      	ldr	r1, [pc, #344]	; (800dde0 <tcp_input+0x2a8>)
 800dc86:	484e      	ldr	r0, [pc, #312]	; (800ddc0 <tcp_input+0x288>)
 800dc88:	f007 fbf8 	bl	801547c <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800dc8c:	4b4d      	ldr	r3, [pc, #308]	; (800ddc4 <tcp_input+0x28c>)
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	881b      	ldrh	r3, [r3, #0]
 800dc92:	b29b      	uxth	r3, r3
 800dc94:	4a4b      	ldr	r2, [pc, #300]	; (800ddc4 <tcp_input+0x28c>)
 800dc96:	6814      	ldr	r4, [r2, #0]
 800dc98:	4618      	mov	r0, r3
 800dc9a:	f7fc fa9b 	bl	800a1d4 <lwip_htons>
 800dc9e:	4603      	mov	r3, r0
 800dca0:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800dca2:	4b48      	ldr	r3, [pc, #288]	; (800ddc4 <tcp_input+0x28c>)
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	885b      	ldrh	r3, [r3, #2]
 800dca8:	b29b      	uxth	r3, r3
 800dcaa:	4a46      	ldr	r2, [pc, #280]	; (800ddc4 <tcp_input+0x28c>)
 800dcac:	6814      	ldr	r4, [r2, #0]
 800dcae:	4618      	mov	r0, r3
 800dcb0:	f7fc fa90 	bl	800a1d4 <lwip_htons>
 800dcb4:	4603      	mov	r3, r0
 800dcb6:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800dcb8:	4b42      	ldr	r3, [pc, #264]	; (800ddc4 <tcp_input+0x28c>)
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	685b      	ldr	r3, [r3, #4]
 800dcbe:	4a41      	ldr	r2, [pc, #260]	; (800ddc4 <tcp_input+0x28c>)
 800dcc0:	6814      	ldr	r4, [r2, #0]
 800dcc2:	4618      	mov	r0, r3
 800dcc4:	f7fc fa9b 	bl	800a1fe <lwip_htonl>
 800dcc8:	4603      	mov	r3, r0
 800dcca:	6063      	str	r3, [r4, #4]
 800dccc:	6863      	ldr	r3, [r4, #4]
 800dcce:	4a45      	ldr	r2, [pc, #276]	; (800dde4 <tcp_input+0x2ac>)
 800dcd0:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800dcd2:	4b3c      	ldr	r3, [pc, #240]	; (800ddc4 <tcp_input+0x28c>)
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	689b      	ldr	r3, [r3, #8]
 800dcd8:	4a3a      	ldr	r2, [pc, #232]	; (800ddc4 <tcp_input+0x28c>)
 800dcda:	6814      	ldr	r4, [r2, #0]
 800dcdc:	4618      	mov	r0, r3
 800dcde:	f7fc fa8e 	bl	800a1fe <lwip_htonl>
 800dce2:	4603      	mov	r3, r0
 800dce4:	60a3      	str	r3, [r4, #8]
 800dce6:	68a3      	ldr	r3, [r4, #8]
 800dce8:	4a3f      	ldr	r2, [pc, #252]	; (800dde8 <tcp_input+0x2b0>)
 800dcea:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800dcec:	4b35      	ldr	r3, [pc, #212]	; (800ddc4 <tcp_input+0x28c>)
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	89db      	ldrh	r3, [r3, #14]
 800dcf2:	b29b      	uxth	r3, r3
 800dcf4:	4a33      	ldr	r2, [pc, #204]	; (800ddc4 <tcp_input+0x28c>)
 800dcf6:	6814      	ldr	r4, [r2, #0]
 800dcf8:	4618      	mov	r0, r3
 800dcfa:	f7fc fa6b 	bl	800a1d4 <lwip_htons>
 800dcfe:	4603      	mov	r3, r0
 800dd00:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800dd02:	4b30      	ldr	r3, [pc, #192]	; (800ddc4 <tcp_input+0x28c>)
 800dd04:	681b      	ldr	r3, [r3, #0]
 800dd06:	899b      	ldrh	r3, [r3, #12]
 800dd08:	b29b      	uxth	r3, r3
 800dd0a:	4618      	mov	r0, r3
 800dd0c:	f7fc fa62 	bl	800a1d4 <lwip_htons>
 800dd10:	4603      	mov	r3, r0
 800dd12:	b2db      	uxtb	r3, r3
 800dd14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dd18:	b2da      	uxtb	r2, r3
 800dd1a:	4b34      	ldr	r3, [pc, #208]	; (800ddec <tcp_input+0x2b4>)
 800dd1c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	891a      	ldrh	r2, [r3, #8]
 800dd22:	4b33      	ldr	r3, [pc, #204]	; (800ddf0 <tcp_input+0x2b8>)
 800dd24:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800dd26:	4b31      	ldr	r3, [pc, #196]	; (800ddec <tcp_input+0x2b4>)
 800dd28:	781b      	ldrb	r3, [r3, #0]
 800dd2a:	f003 0303 	and.w	r3, r3, #3
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d00c      	beq.n	800dd4c <tcp_input+0x214>
    tcplen++;
 800dd32:	4b2f      	ldr	r3, [pc, #188]	; (800ddf0 <tcp_input+0x2b8>)
 800dd34:	881b      	ldrh	r3, [r3, #0]
 800dd36:	3301      	adds	r3, #1
 800dd38:	b29a      	uxth	r2, r3
 800dd3a:	4b2d      	ldr	r3, [pc, #180]	; (800ddf0 <tcp_input+0x2b8>)
 800dd3c:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	891a      	ldrh	r2, [r3, #8]
 800dd42:	4b2b      	ldr	r3, [pc, #172]	; (800ddf0 <tcp_input+0x2b8>)
 800dd44:	881b      	ldrh	r3, [r3, #0]
 800dd46:	429a      	cmp	r2, r3
 800dd48:	f200 82d9 	bhi.w	800e2fe <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800dd4c:	2300      	movs	r3, #0
 800dd4e:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800dd50:	4b28      	ldr	r3, [pc, #160]	; (800ddf4 <tcp_input+0x2bc>)
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	61fb      	str	r3, [r7, #28]
 800dd56:	e09d      	b.n	800de94 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800dd58:	69fb      	ldr	r3, [r7, #28]
 800dd5a:	7d1b      	ldrb	r3, [r3, #20]
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d105      	bne.n	800dd6c <tcp_input+0x234>
 800dd60:	4b15      	ldr	r3, [pc, #84]	; (800ddb8 <tcp_input+0x280>)
 800dd62:	22fb      	movs	r2, #251	; 0xfb
 800dd64:	4924      	ldr	r1, [pc, #144]	; (800ddf8 <tcp_input+0x2c0>)
 800dd66:	4816      	ldr	r0, [pc, #88]	; (800ddc0 <tcp_input+0x288>)
 800dd68:	f007 fb88 	bl	801547c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800dd6c:	69fb      	ldr	r3, [r7, #28]
 800dd6e:	7d1b      	ldrb	r3, [r3, #20]
 800dd70:	2b0a      	cmp	r3, #10
 800dd72:	d105      	bne.n	800dd80 <tcp_input+0x248>
 800dd74:	4b10      	ldr	r3, [pc, #64]	; (800ddb8 <tcp_input+0x280>)
 800dd76:	22fc      	movs	r2, #252	; 0xfc
 800dd78:	4920      	ldr	r1, [pc, #128]	; (800ddfc <tcp_input+0x2c4>)
 800dd7a:	4811      	ldr	r0, [pc, #68]	; (800ddc0 <tcp_input+0x288>)
 800dd7c:	f007 fb7e 	bl	801547c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800dd80:	69fb      	ldr	r3, [r7, #28]
 800dd82:	7d1b      	ldrb	r3, [r3, #20]
 800dd84:	2b01      	cmp	r3, #1
 800dd86:	d105      	bne.n	800dd94 <tcp_input+0x25c>
 800dd88:	4b0b      	ldr	r3, [pc, #44]	; (800ddb8 <tcp_input+0x280>)
 800dd8a:	22fd      	movs	r2, #253	; 0xfd
 800dd8c:	491c      	ldr	r1, [pc, #112]	; (800de00 <tcp_input+0x2c8>)
 800dd8e:	480c      	ldr	r0, [pc, #48]	; (800ddc0 <tcp_input+0x288>)
 800dd90:	f007 fb74 	bl	801547c <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800dd94:	69fb      	ldr	r3, [r7, #28]
 800dd96:	7a1b      	ldrb	r3, [r3, #8]
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d033      	beq.n	800de04 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800dd9c:	69fb      	ldr	r3, [r7, #28]
 800dd9e:	7a1a      	ldrb	r2, [r3, #8]
 800dda0:	4b09      	ldr	r3, [pc, #36]	; (800ddc8 <tcp_input+0x290>)
 800dda2:	685b      	ldr	r3, [r3, #4]
 800dda4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800dda8:	3301      	adds	r3, #1
 800ddaa:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ddac:	429a      	cmp	r2, r3
 800ddae:	d029      	beq.n	800de04 <tcp_input+0x2cc>
      prev = pcb;
 800ddb0:	69fb      	ldr	r3, [r7, #28]
 800ddb2:	61bb      	str	r3, [r7, #24]
      continue;
 800ddb4:	e06b      	b.n	800de8e <tcp_input+0x356>
 800ddb6:	bf00      	nop
 800ddb8:	08018120 	.word	0x08018120
 800ddbc:	08018154 	.word	0x08018154
 800ddc0:	0801816c 	.word	0x0801816c
 800ddc4:	20004adc 	.word	0x20004adc
 800ddc8:	20008690 	.word	0x20008690
 800ddcc:	20004ae0 	.word	0x20004ae0
 800ddd0:	20004ae4 	.word	0x20004ae4
 800ddd4:	20004ae2 	.word	0x20004ae2
 800ddd8:	08018194 	.word	0x08018194
 800dddc:	080181a4 	.word	0x080181a4
 800dde0:	080181b0 	.word	0x080181b0
 800dde4:	20004aec 	.word	0x20004aec
 800dde8:	20004af0 	.word	0x20004af0
 800ddec:	20004af8 	.word	0x20004af8
 800ddf0:	20004af6 	.word	0x20004af6
 800ddf4:	2000bda4 	.word	0x2000bda4
 800ddf8:	080181d0 	.word	0x080181d0
 800ddfc:	080181f8 	.word	0x080181f8
 800de00:	08018224 	.word	0x08018224
    }

    if (pcb->remote_port == tcphdr->src &&
 800de04:	69fb      	ldr	r3, [r7, #28]
 800de06:	8b1a      	ldrh	r2, [r3, #24]
 800de08:	4b94      	ldr	r3, [pc, #592]	; (800e05c <tcp_input+0x524>)
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	881b      	ldrh	r3, [r3, #0]
 800de0e:	b29b      	uxth	r3, r3
 800de10:	429a      	cmp	r2, r3
 800de12:	d13a      	bne.n	800de8a <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800de14:	69fb      	ldr	r3, [r7, #28]
 800de16:	8ada      	ldrh	r2, [r3, #22]
 800de18:	4b90      	ldr	r3, [pc, #576]	; (800e05c <tcp_input+0x524>)
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	885b      	ldrh	r3, [r3, #2]
 800de1e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800de20:	429a      	cmp	r2, r3
 800de22:	d132      	bne.n	800de8a <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800de24:	69fb      	ldr	r3, [r7, #28]
 800de26:	685a      	ldr	r2, [r3, #4]
 800de28:	4b8d      	ldr	r3, [pc, #564]	; (800e060 <tcp_input+0x528>)
 800de2a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800de2c:	429a      	cmp	r2, r3
 800de2e:	d12c      	bne.n	800de8a <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800de30:	69fb      	ldr	r3, [r7, #28]
 800de32:	681a      	ldr	r2, [r3, #0]
 800de34:	4b8a      	ldr	r3, [pc, #552]	; (800e060 <tcp_input+0x528>)
 800de36:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800de38:	429a      	cmp	r2, r3
 800de3a:	d126      	bne.n	800de8a <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800de3c:	69fb      	ldr	r3, [r7, #28]
 800de3e:	68db      	ldr	r3, [r3, #12]
 800de40:	69fa      	ldr	r2, [r7, #28]
 800de42:	429a      	cmp	r2, r3
 800de44:	d106      	bne.n	800de54 <tcp_input+0x31c>
 800de46:	4b87      	ldr	r3, [pc, #540]	; (800e064 <tcp_input+0x52c>)
 800de48:	f240 120d 	movw	r2, #269	; 0x10d
 800de4c:	4986      	ldr	r1, [pc, #536]	; (800e068 <tcp_input+0x530>)
 800de4e:	4887      	ldr	r0, [pc, #540]	; (800e06c <tcp_input+0x534>)
 800de50:	f007 fb14 	bl	801547c <iprintf>
      if (prev != NULL) {
 800de54:	69bb      	ldr	r3, [r7, #24]
 800de56:	2b00      	cmp	r3, #0
 800de58:	d00a      	beq.n	800de70 <tcp_input+0x338>
        prev->next = pcb->next;
 800de5a:	69fb      	ldr	r3, [r7, #28]
 800de5c:	68da      	ldr	r2, [r3, #12]
 800de5e:	69bb      	ldr	r3, [r7, #24]
 800de60:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800de62:	4b83      	ldr	r3, [pc, #524]	; (800e070 <tcp_input+0x538>)
 800de64:	681a      	ldr	r2, [r3, #0]
 800de66:	69fb      	ldr	r3, [r7, #28]
 800de68:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800de6a:	4a81      	ldr	r2, [pc, #516]	; (800e070 <tcp_input+0x538>)
 800de6c:	69fb      	ldr	r3, [r7, #28]
 800de6e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800de70:	69fb      	ldr	r3, [r7, #28]
 800de72:	68db      	ldr	r3, [r3, #12]
 800de74:	69fa      	ldr	r2, [r7, #28]
 800de76:	429a      	cmp	r2, r3
 800de78:	d111      	bne.n	800de9e <tcp_input+0x366>
 800de7a:	4b7a      	ldr	r3, [pc, #488]	; (800e064 <tcp_input+0x52c>)
 800de7c:	f240 1215 	movw	r2, #277	; 0x115
 800de80:	497c      	ldr	r1, [pc, #496]	; (800e074 <tcp_input+0x53c>)
 800de82:	487a      	ldr	r0, [pc, #488]	; (800e06c <tcp_input+0x534>)
 800de84:	f007 fafa 	bl	801547c <iprintf>
      break;
 800de88:	e009      	b.n	800de9e <tcp_input+0x366>
    }
    prev = pcb;
 800de8a:	69fb      	ldr	r3, [r7, #28]
 800de8c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800de8e:	69fb      	ldr	r3, [r7, #28]
 800de90:	68db      	ldr	r3, [r3, #12]
 800de92:	61fb      	str	r3, [r7, #28]
 800de94:	69fb      	ldr	r3, [r7, #28]
 800de96:	2b00      	cmp	r3, #0
 800de98:	f47f af5e 	bne.w	800dd58 <tcp_input+0x220>
 800de9c:	e000      	b.n	800dea0 <tcp_input+0x368>
      break;
 800de9e:	bf00      	nop
  }

  if (pcb == NULL) {
 800dea0:	69fb      	ldr	r3, [r7, #28]
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	f040 8095 	bne.w	800dfd2 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800dea8:	4b73      	ldr	r3, [pc, #460]	; (800e078 <tcp_input+0x540>)
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	61fb      	str	r3, [r7, #28]
 800deae:	e03f      	b.n	800df30 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800deb0:	69fb      	ldr	r3, [r7, #28]
 800deb2:	7d1b      	ldrb	r3, [r3, #20]
 800deb4:	2b0a      	cmp	r3, #10
 800deb6:	d006      	beq.n	800dec6 <tcp_input+0x38e>
 800deb8:	4b6a      	ldr	r3, [pc, #424]	; (800e064 <tcp_input+0x52c>)
 800deba:	f240 121f 	movw	r2, #287	; 0x11f
 800debe:	496f      	ldr	r1, [pc, #444]	; (800e07c <tcp_input+0x544>)
 800dec0:	486a      	ldr	r0, [pc, #424]	; (800e06c <tcp_input+0x534>)
 800dec2:	f007 fadb 	bl	801547c <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800dec6:	69fb      	ldr	r3, [r7, #28]
 800dec8:	7a1b      	ldrb	r3, [r3, #8]
 800deca:	2b00      	cmp	r3, #0
 800decc:	d009      	beq.n	800dee2 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800dece:	69fb      	ldr	r3, [r7, #28]
 800ded0:	7a1a      	ldrb	r2, [r3, #8]
 800ded2:	4b63      	ldr	r3, [pc, #396]	; (800e060 <tcp_input+0x528>)
 800ded4:	685b      	ldr	r3, [r3, #4]
 800ded6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800deda:	3301      	adds	r3, #1
 800dedc:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800dede:	429a      	cmp	r2, r3
 800dee0:	d122      	bne.n	800df28 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800dee2:	69fb      	ldr	r3, [r7, #28]
 800dee4:	8b1a      	ldrh	r2, [r3, #24]
 800dee6:	4b5d      	ldr	r3, [pc, #372]	; (800e05c <tcp_input+0x524>)
 800dee8:	681b      	ldr	r3, [r3, #0]
 800deea:	881b      	ldrh	r3, [r3, #0]
 800deec:	b29b      	uxth	r3, r3
 800deee:	429a      	cmp	r2, r3
 800def0:	d11b      	bne.n	800df2a <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800def2:	69fb      	ldr	r3, [r7, #28]
 800def4:	8ada      	ldrh	r2, [r3, #22]
 800def6:	4b59      	ldr	r3, [pc, #356]	; (800e05c <tcp_input+0x524>)
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	885b      	ldrh	r3, [r3, #2]
 800defc:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800defe:	429a      	cmp	r2, r3
 800df00:	d113      	bne.n	800df2a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800df02:	69fb      	ldr	r3, [r7, #28]
 800df04:	685a      	ldr	r2, [r3, #4]
 800df06:	4b56      	ldr	r3, [pc, #344]	; (800e060 <tcp_input+0x528>)
 800df08:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800df0a:	429a      	cmp	r2, r3
 800df0c:	d10d      	bne.n	800df2a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800df0e:	69fb      	ldr	r3, [r7, #28]
 800df10:	681a      	ldr	r2, [r3, #0]
 800df12:	4b53      	ldr	r3, [pc, #332]	; (800e060 <tcp_input+0x528>)
 800df14:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800df16:	429a      	cmp	r2, r3
 800df18:	d107      	bne.n	800df2a <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800df1a:	69f8      	ldr	r0, [r7, #28]
 800df1c:	f000 fb54 	bl	800e5c8 <tcp_timewait_input>
        }
        pbuf_free(p);
 800df20:	6878      	ldr	r0, [r7, #4]
 800df22:	f7fd fd03 	bl	800b92c <pbuf_free>
        return;
 800df26:	e1f0      	b.n	800e30a <tcp_input+0x7d2>
        continue;
 800df28:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800df2a:	69fb      	ldr	r3, [r7, #28]
 800df2c:	68db      	ldr	r3, [r3, #12]
 800df2e:	61fb      	str	r3, [r7, #28]
 800df30:	69fb      	ldr	r3, [r7, #28]
 800df32:	2b00      	cmp	r3, #0
 800df34:	d1bc      	bne.n	800deb0 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800df36:	2300      	movs	r3, #0
 800df38:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800df3a:	4b51      	ldr	r3, [pc, #324]	; (800e080 <tcp_input+0x548>)
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	617b      	str	r3, [r7, #20]
 800df40:	e02a      	b.n	800df98 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800df42:	697b      	ldr	r3, [r7, #20]
 800df44:	7a1b      	ldrb	r3, [r3, #8]
 800df46:	2b00      	cmp	r3, #0
 800df48:	d00c      	beq.n	800df64 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800df4a:	697b      	ldr	r3, [r7, #20]
 800df4c:	7a1a      	ldrb	r2, [r3, #8]
 800df4e:	4b44      	ldr	r3, [pc, #272]	; (800e060 <tcp_input+0x528>)
 800df50:	685b      	ldr	r3, [r3, #4]
 800df52:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800df56:	3301      	adds	r3, #1
 800df58:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800df5a:	429a      	cmp	r2, r3
 800df5c:	d002      	beq.n	800df64 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800df5e:	697b      	ldr	r3, [r7, #20]
 800df60:	61bb      	str	r3, [r7, #24]
        continue;
 800df62:	e016      	b.n	800df92 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800df64:	697b      	ldr	r3, [r7, #20]
 800df66:	8ada      	ldrh	r2, [r3, #22]
 800df68:	4b3c      	ldr	r3, [pc, #240]	; (800e05c <tcp_input+0x524>)
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	885b      	ldrh	r3, [r3, #2]
 800df6e:	b29b      	uxth	r3, r3
 800df70:	429a      	cmp	r2, r3
 800df72:	d10c      	bne.n	800df8e <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800df74:	697b      	ldr	r3, [r7, #20]
 800df76:	681a      	ldr	r2, [r3, #0]
 800df78:	4b39      	ldr	r3, [pc, #228]	; (800e060 <tcp_input+0x528>)
 800df7a:	695b      	ldr	r3, [r3, #20]
 800df7c:	429a      	cmp	r2, r3
 800df7e:	d00f      	beq.n	800dfa0 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800df80:	697b      	ldr	r3, [r7, #20]
 800df82:	2b00      	cmp	r3, #0
 800df84:	d00d      	beq.n	800dfa2 <tcp_input+0x46a>
 800df86:	697b      	ldr	r3, [r7, #20]
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d009      	beq.n	800dfa2 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800df8e:	697b      	ldr	r3, [r7, #20]
 800df90:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800df92:	697b      	ldr	r3, [r7, #20]
 800df94:	68db      	ldr	r3, [r3, #12]
 800df96:	617b      	str	r3, [r7, #20]
 800df98:	697b      	ldr	r3, [r7, #20]
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d1d1      	bne.n	800df42 <tcp_input+0x40a>
 800df9e:	e000      	b.n	800dfa2 <tcp_input+0x46a>
            break;
 800dfa0:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800dfa2:	697b      	ldr	r3, [r7, #20]
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	d014      	beq.n	800dfd2 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800dfa8:	69bb      	ldr	r3, [r7, #24]
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	d00a      	beq.n	800dfc4 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800dfae:	697b      	ldr	r3, [r7, #20]
 800dfb0:	68da      	ldr	r2, [r3, #12]
 800dfb2:	69bb      	ldr	r3, [r7, #24]
 800dfb4:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800dfb6:	4b32      	ldr	r3, [pc, #200]	; (800e080 <tcp_input+0x548>)
 800dfb8:	681a      	ldr	r2, [r3, #0]
 800dfba:	697b      	ldr	r3, [r7, #20]
 800dfbc:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800dfbe:	4a30      	ldr	r2, [pc, #192]	; (800e080 <tcp_input+0x548>)
 800dfc0:	697b      	ldr	r3, [r7, #20]
 800dfc2:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800dfc4:	6978      	ldr	r0, [r7, #20]
 800dfc6:	f000 fa01 	bl	800e3cc <tcp_listen_input>
      }
      pbuf_free(p);
 800dfca:	6878      	ldr	r0, [r7, #4]
 800dfcc:	f7fd fcae 	bl	800b92c <pbuf_free>
      return;
 800dfd0:	e19b      	b.n	800e30a <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800dfd2:	69fb      	ldr	r3, [r7, #28]
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	f000 8160 	beq.w	800e29a <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800dfda:	4b2a      	ldr	r3, [pc, #168]	; (800e084 <tcp_input+0x54c>)
 800dfdc:	2200      	movs	r2, #0
 800dfde:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	891a      	ldrh	r2, [r3, #8]
 800dfe4:	4b27      	ldr	r3, [pc, #156]	; (800e084 <tcp_input+0x54c>)
 800dfe6:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800dfe8:	4a26      	ldr	r2, [pc, #152]	; (800e084 <tcp_input+0x54c>)
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800dfee:	4b1b      	ldr	r3, [pc, #108]	; (800e05c <tcp_input+0x524>)
 800dff0:	681b      	ldr	r3, [r3, #0]
 800dff2:	4a24      	ldr	r2, [pc, #144]	; (800e084 <tcp_input+0x54c>)
 800dff4:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800dff6:	4b24      	ldr	r3, [pc, #144]	; (800e088 <tcp_input+0x550>)
 800dff8:	2200      	movs	r2, #0
 800dffa:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800dffc:	4b23      	ldr	r3, [pc, #140]	; (800e08c <tcp_input+0x554>)
 800dffe:	2200      	movs	r2, #0
 800e000:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800e002:	4b23      	ldr	r3, [pc, #140]	; (800e090 <tcp_input+0x558>)
 800e004:	2200      	movs	r2, #0
 800e006:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800e008:	4b22      	ldr	r3, [pc, #136]	; (800e094 <tcp_input+0x55c>)
 800e00a:	781b      	ldrb	r3, [r3, #0]
 800e00c:	f003 0308 	and.w	r3, r3, #8
 800e010:	2b00      	cmp	r3, #0
 800e012:	d006      	beq.n	800e022 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	7b5b      	ldrb	r3, [r3, #13]
 800e018:	f043 0301 	orr.w	r3, r3, #1
 800e01c:	b2da      	uxtb	r2, r3
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800e022:	69fb      	ldr	r3, [r7, #28]
 800e024:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e026:	2b00      	cmp	r3, #0
 800e028:	d038      	beq.n	800e09c <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800e02a:	69f8      	ldr	r0, [r7, #28]
 800e02c:	f7ff f870 	bl	800d110 <tcp_process_refused_data>
 800e030:	4603      	mov	r3, r0
 800e032:	f113 0f0d 	cmn.w	r3, #13
 800e036:	d007      	beq.n	800e048 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800e038:	69fb      	ldr	r3, [r7, #28]
 800e03a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d02d      	beq.n	800e09c <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800e040:	4b15      	ldr	r3, [pc, #84]	; (800e098 <tcp_input+0x560>)
 800e042:	881b      	ldrh	r3, [r3, #0]
 800e044:	2b00      	cmp	r3, #0
 800e046:	d029      	beq.n	800e09c <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800e048:	69fb      	ldr	r3, [r7, #28]
 800e04a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	f040 8104 	bne.w	800e25a <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800e052:	69f8      	ldr	r0, [r7, #28]
 800e054:	f003 fe16 	bl	8011c84 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800e058:	e0ff      	b.n	800e25a <tcp_input+0x722>
 800e05a:	bf00      	nop
 800e05c:	20004adc 	.word	0x20004adc
 800e060:	20008690 	.word	0x20008690
 800e064:	08018120 	.word	0x08018120
 800e068:	0801824c 	.word	0x0801824c
 800e06c:	0801816c 	.word	0x0801816c
 800e070:	2000bda4 	.word	0x2000bda4
 800e074:	08018278 	.word	0x08018278
 800e078:	2000bdb4 	.word	0x2000bdb4
 800e07c:	080182a4 	.word	0x080182a4
 800e080:	2000bdac 	.word	0x2000bdac
 800e084:	20004acc 	.word	0x20004acc
 800e088:	20004afc 	.word	0x20004afc
 800e08c:	20004af9 	.word	0x20004af9
 800e090:	20004af4 	.word	0x20004af4
 800e094:	20004af8 	.word	0x20004af8
 800e098:	20004af6 	.word	0x20004af6
      }
    }
    tcp_input_pcb = pcb;
 800e09c:	4a9c      	ldr	r2, [pc, #624]	; (800e310 <tcp_input+0x7d8>)
 800e09e:	69fb      	ldr	r3, [r7, #28]
 800e0a0:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800e0a2:	69f8      	ldr	r0, [r7, #28]
 800e0a4:	f000 fb0a 	bl	800e6bc <tcp_process>
 800e0a8:	4603      	mov	r3, r0
 800e0aa:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800e0ac:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e0b0:	f113 0f0d 	cmn.w	r3, #13
 800e0b4:	f000 80d3 	beq.w	800e25e <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 800e0b8:	4b96      	ldr	r3, [pc, #600]	; (800e314 <tcp_input+0x7dc>)
 800e0ba:	781b      	ldrb	r3, [r3, #0]
 800e0bc:	f003 0308 	and.w	r3, r3, #8
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d015      	beq.n	800e0f0 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800e0c4:	69fb      	ldr	r3, [r7, #28]
 800e0c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	d008      	beq.n	800e0e0 <tcp_input+0x5a8>
 800e0ce:	69fb      	ldr	r3, [r7, #28]
 800e0d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e0d4:	69fa      	ldr	r2, [r7, #28]
 800e0d6:	6912      	ldr	r2, [r2, #16]
 800e0d8:	f06f 010d 	mvn.w	r1, #13
 800e0dc:	4610      	mov	r0, r2
 800e0de:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800e0e0:	69f9      	ldr	r1, [r7, #28]
 800e0e2:	488d      	ldr	r0, [pc, #564]	; (800e318 <tcp_input+0x7e0>)
 800e0e4:	f7ff fbb0 	bl	800d848 <tcp_pcb_remove>
        tcp_free(pcb);
 800e0e8:	69f8      	ldr	r0, [r7, #28]
 800e0ea:	f7fd fecb 	bl	800be84 <tcp_free>
 800e0ee:	e0c1      	b.n	800e274 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 800e0f0:	2300      	movs	r3, #0
 800e0f2:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800e0f4:	4b89      	ldr	r3, [pc, #548]	; (800e31c <tcp_input+0x7e4>)
 800e0f6:	881b      	ldrh	r3, [r3, #0]
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	d01d      	beq.n	800e138 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800e0fc:	4b87      	ldr	r3, [pc, #540]	; (800e31c <tcp_input+0x7e4>)
 800e0fe:	881b      	ldrh	r3, [r3, #0]
 800e100:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800e102:	69fb      	ldr	r3, [r7, #28]
 800e104:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d00a      	beq.n	800e122 <tcp_input+0x5ea>
 800e10c:	69fb      	ldr	r3, [r7, #28]
 800e10e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e112:	69fa      	ldr	r2, [r7, #28]
 800e114:	6910      	ldr	r0, [r2, #16]
 800e116:	89fa      	ldrh	r2, [r7, #14]
 800e118:	69f9      	ldr	r1, [r7, #28]
 800e11a:	4798      	blx	r3
 800e11c:	4603      	mov	r3, r0
 800e11e:	74fb      	strb	r3, [r7, #19]
 800e120:	e001      	b.n	800e126 <tcp_input+0x5ee>
 800e122:	2300      	movs	r3, #0
 800e124:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800e126:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e12a:	f113 0f0d 	cmn.w	r3, #13
 800e12e:	f000 8098 	beq.w	800e262 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 800e132:	4b7a      	ldr	r3, [pc, #488]	; (800e31c <tcp_input+0x7e4>)
 800e134:	2200      	movs	r2, #0
 800e136:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800e138:	69f8      	ldr	r0, [r7, #28]
 800e13a:	f000 f907 	bl	800e34c <tcp_input_delayed_close>
 800e13e:	4603      	mov	r3, r0
 800e140:	2b00      	cmp	r3, #0
 800e142:	f040 8090 	bne.w	800e266 <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800e146:	4b76      	ldr	r3, [pc, #472]	; (800e320 <tcp_input+0x7e8>)
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d041      	beq.n	800e1d2 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800e14e:	69fb      	ldr	r3, [r7, #28]
 800e150:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e152:	2b00      	cmp	r3, #0
 800e154:	d006      	beq.n	800e164 <tcp_input+0x62c>
 800e156:	4b73      	ldr	r3, [pc, #460]	; (800e324 <tcp_input+0x7ec>)
 800e158:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800e15c:	4972      	ldr	r1, [pc, #456]	; (800e328 <tcp_input+0x7f0>)
 800e15e:	4873      	ldr	r0, [pc, #460]	; (800e32c <tcp_input+0x7f4>)
 800e160:	f007 f98c 	bl	801547c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800e164:	69fb      	ldr	r3, [r7, #28]
 800e166:	8b5b      	ldrh	r3, [r3, #26]
 800e168:	f003 0310 	and.w	r3, r3, #16
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	d008      	beq.n	800e182 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800e170:	4b6b      	ldr	r3, [pc, #428]	; (800e320 <tcp_input+0x7e8>)
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	4618      	mov	r0, r3
 800e176:	f7fd fbd9 	bl	800b92c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800e17a:	69f8      	ldr	r0, [r7, #28]
 800e17c:	f7fe f9c6 	bl	800c50c <tcp_abort>
            goto aborted;
 800e180:	e078      	b.n	800e274 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800e182:	69fb      	ldr	r3, [r7, #28]
 800e184:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d00c      	beq.n	800e1a6 <tcp_input+0x66e>
 800e18c:	69fb      	ldr	r3, [r7, #28]
 800e18e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800e192:	69fb      	ldr	r3, [r7, #28]
 800e194:	6918      	ldr	r0, [r3, #16]
 800e196:	4b62      	ldr	r3, [pc, #392]	; (800e320 <tcp_input+0x7e8>)
 800e198:	681a      	ldr	r2, [r3, #0]
 800e19a:	2300      	movs	r3, #0
 800e19c:	69f9      	ldr	r1, [r7, #28]
 800e19e:	47a0      	blx	r4
 800e1a0:	4603      	mov	r3, r0
 800e1a2:	74fb      	strb	r3, [r7, #19]
 800e1a4:	e008      	b.n	800e1b8 <tcp_input+0x680>
 800e1a6:	4b5e      	ldr	r3, [pc, #376]	; (800e320 <tcp_input+0x7e8>)
 800e1a8:	681a      	ldr	r2, [r3, #0]
 800e1aa:	2300      	movs	r3, #0
 800e1ac:	69f9      	ldr	r1, [r7, #28]
 800e1ae:	2000      	movs	r0, #0
 800e1b0:	f7ff f884 	bl	800d2bc <tcp_recv_null>
 800e1b4:	4603      	mov	r3, r0
 800e1b6:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800e1b8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e1bc:	f113 0f0d 	cmn.w	r3, #13
 800e1c0:	d053      	beq.n	800e26a <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800e1c2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d003      	beq.n	800e1d2 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800e1ca:	4b55      	ldr	r3, [pc, #340]	; (800e320 <tcp_input+0x7e8>)
 800e1cc:	681a      	ldr	r2, [r3, #0]
 800e1ce:	69fb      	ldr	r3, [r7, #28]
 800e1d0:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800e1d2:	4b50      	ldr	r3, [pc, #320]	; (800e314 <tcp_input+0x7dc>)
 800e1d4:	781b      	ldrb	r3, [r3, #0]
 800e1d6:	f003 0320 	and.w	r3, r3, #32
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d030      	beq.n	800e240 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 800e1de:	69fb      	ldr	r3, [r7, #28]
 800e1e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d009      	beq.n	800e1fa <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800e1e6:	69fb      	ldr	r3, [r7, #28]
 800e1e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e1ea:	7b5a      	ldrb	r2, [r3, #13]
 800e1ec:	69fb      	ldr	r3, [r7, #28]
 800e1ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e1f0:	f042 0220 	orr.w	r2, r2, #32
 800e1f4:	b2d2      	uxtb	r2, r2
 800e1f6:	735a      	strb	r2, [r3, #13]
 800e1f8:	e022      	b.n	800e240 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800e1fa:	69fb      	ldr	r3, [r7, #28]
 800e1fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e1fe:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e202:	d005      	beq.n	800e210 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 800e204:	69fb      	ldr	r3, [r7, #28]
 800e206:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e208:	3301      	adds	r3, #1
 800e20a:	b29a      	uxth	r2, r3
 800e20c:	69fb      	ldr	r3, [r7, #28]
 800e20e:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800e210:	69fb      	ldr	r3, [r7, #28]
 800e212:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e216:	2b00      	cmp	r3, #0
 800e218:	d00b      	beq.n	800e232 <tcp_input+0x6fa>
 800e21a:	69fb      	ldr	r3, [r7, #28]
 800e21c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800e220:	69fb      	ldr	r3, [r7, #28]
 800e222:	6918      	ldr	r0, [r3, #16]
 800e224:	2300      	movs	r3, #0
 800e226:	2200      	movs	r2, #0
 800e228:	69f9      	ldr	r1, [r7, #28]
 800e22a:	47a0      	blx	r4
 800e22c:	4603      	mov	r3, r0
 800e22e:	74fb      	strb	r3, [r7, #19]
 800e230:	e001      	b.n	800e236 <tcp_input+0x6fe>
 800e232:	2300      	movs	r3, #0
 800e234:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800e236:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e23a:	f113 0f0d 	cmn.w	r3, #13
 800e23e:	d016      	beq.n	800e26e <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800e240:	4b33      	ldr	r3, [pc, #204]	; (800e310 <tcp_input+0x7d8>)
 800e242:	2200      	movs	r2, #0
 800e244:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800e246:	69f8      	ldr	r0, [r7, #28]
 800e248:	f000 f880 	bl	800e34c <tcp_input_delayed_close>
 800e24c:	4603      	mov	r3, r0
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d10f      	bne.n	800e272 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800e252:	69f8      	ldr	r0, [r7, #28]
 800e254:	f002 ff10 	bl	8011078 <tcp_output>
 800e258:	e00c      	b.n	800e274 <tcp_input+0x73c>
        goto aborted;
 800e25a:	bf00      	nop
 800e25c:	e00a      	b.n	800e274 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800e25e:	bf00      	nop
 800e260:	e008      	b.n	800e274 <tcp_input+0x73c>
              goto aborted;
 800e262:	bf00      	nop
 800e264:	e006      	b.n	800e274 <tcp_input+0x73c>
          goto aborted;
 800e266:	bf00      	nop
 800e268:	e004      	b.n	800e274 <tcp_input+0x73c>
            goto aborted;
 800e26a:	bf00      	nop
 800e26c:	e002      	b.n	800e274 <tcp_input+0x73c>
              goto aborted;
 800e26e:	bf00      	nop
 800e270:	e000      	b.n	800e274 <tcp_input+0x73c>
          goto aborted;
 800e272:	bf00      	nop
    tcp_input_pcb = NULL;
 800e274:	4b26      	ldr	r3, [pc, #152]	; (800e310 <tcp_input+0x7d8>)
 800e276:	2200      	movs	r2, #0
 800e278:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800e27a:	4b29      	ldr	r3, [pc, #164]	; (800e320 <tcp_input+0x7e8>)
 800e27c:	2200      	movs	r2, #0
 800e27e:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800e280:	4b2b      	ldr	r3, [pc, #172]	; (800e330 <tcp_input+0x7f8>)
 800e282:	685b      	ldr	r3, [r3, #4]
 800e284:	2b00      	cmp	r3, #0
 800e286:	d03f      	beq.n	800e308 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 800e288:	4b29      	ldr	r3, [pc, #164]	; (800e330 <tcp_input+0x7f8>)
 800e28a:	685b      	ldr	r3, [r3, #4]
 800e28c:	4618      	mov	r0, r3
 800e28e:	f7fd fb4d 	bl	800b92c <pbuf_free>
      inseg.p = NULL;
 800e292:	4b27      	ldr	r3, [pc, #156]	; (800e330 <tcp_input+0x7f8>)
 800e294:	2200      	movs	r2, #0
 800e296:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800e298:	e036      	b.n	800e308 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800e29a:	4b26      	ldr	r3, [pc, #152]	; (800e334 <tcp_input+0x7fc>)
 800e29c:	681b      	ldr	r3, [r3, #0]
 800e29e:	899b      	ldrh	r3, [r3, #12]
 800e2a0:	b29b      	uxth	r3, r3
 800e2a2:	4618      	mov	r0, r3
 800e2a4:	f7fb ff96 	bl	800a1d4 <lwip_htons>
 800e2a8:	4603      	mov	r3, r0
 800e2aa:	b2db      	uxtb	r3, r3
 800e2ac:	f003 0304 	and.w	r3, r3, #4
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d118      	bne.n	800e2e6 <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e2b4:	4b20      	ldr	r3, [pc, #128]	; (800e338 <tcp_input+0x800>)
 800e2b6:	6819      	ldr	r1, [r3, #0]
 800e2b8:	4b20      	ldr	r3, [pc, #128]	; (800e33c <tcp_input+0x804>)
 800e2ba:	881b      	ldrh	r3, [r3, #0]
 800e2bc:	461a      	mov	r2, r3
 800e2be:	4b20      	ldr	r3, [pc, #128]	; (800e340 <tcp_input+0x808>)
 800e2c0:	681b      	ldr	r3, [r3, #0]
 800e2c2:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e2c4:	4b1b      	ldr	r3, [pc, #108]	; (800e334 <tcp_input+0x7fc>)
 800e2c6:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e2c8:	885b      	ldrh	r3, [r3, #2]
 800e2ca:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e2cc:	4a19      	ldr	r2, [pc, #100]	; (800e334 <tcp_input+0x7fc>)
 800e2ce:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e2d0:	8812      	ldrh	r2, [r2, #0]
 800e2d2:	b292      	uxth	r2, r2
 800e2d4:	9202      	str	r2, [sp, #8]
 800e2d6:	9301      	str	r3, [sp, #4]
 800e2d8:	4b1a      	ldr	r3, [pc, #104]	; (800e344 <tcp_input+0x80c>)
 800e2da:	9300      	str	r3, [sp, #0]
 800e2dc:	4b1a      	ldr	r3, [pc, #104]	; (800e348 <tcp_input+0x810>)
 800e2de:	4602      	mov	r2, r0
 800e2e0:	2000      	movs	r0, #0
 800e2e2:	f003 fc7d 	bl	8011be0 <tcp_rst>
    pbuf_free(p);
 800e2e6:	6878      	ldr	r0, [r7, #4]
 800e2e8:	f7fd fb20 	bl	800b92c <pbuf_free>
  return;
 800e2ec:	e00c      	b.n	800e308 <tcp_input+0x7d0>
    goto dropped;
 800e2ee:	bf00      	nop
 800e2f0:	e006      	b.n	800e300 <tcp_input+0x7c8>
    goto dropped;
 800e2f2:	bf00      	nop
 800e2f4:	e004      	b.n	800e300 <tcp_input+0x7c8>
    goto dropped;
 800e2f6:	bf00      	nop
 800e2f8:	e002      	b.n	800e300 <tcp_input+0x7c8>
      goto dropped;
 800e2fa:	bf00      	nop
 800e2fc:	e000      	b.n	800e300 <tcp_input+0x7c8>
      goto dropped;
 800e2fe:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800e300:	6878      	ldr	r0, [r7, #4]
 800e302:	f7fd fb13 	bl	800b92c <pbuf_free>
 800e306:	e000      	b.n	800e30a <tcp_input+0x7d2>
  return;
 800e308:	bf00      	nop
}
 800e30a:	3724      	adds	r7, #36	; 0x24
 800e30c:	46bd      	mov	sp, r7
 800e30e:	bd90      	pop	{r4, r7, pc}
 800e310:	2000bdb8 	.word	0x2000bdb8
 800e314:	20004af9 	.word	0x20004af9
 800e318:	2000bda4 	.word	0x2000bda4
 800e31c:	20004af4 	.word	0x20004af4
 800e320:	20004afc 	.word	0x20004afc
 800e324:	08018120 	.word	0x08018120
 800e328:	080182d4 	.word	0x080182d4
 800e32c:	0801816c 	.word	0x0801816c
 800e330:	20004acc 	.word	0x20004acc
 800e334:	20004adc 	.word	0x20004adc
 800e338:	20004af0 	.word	0x20004af0
 800e33c:	20004af6 	.word	0x20004af6
 800e340:	20004aec 	.word	0x20004aec
 800e344:	200086a0 	.word	0x200086a0
 800e348:	200086a4 	.word	0x200086a4

0800e34c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800e34c:	b580      	push	{r7, lr}
 800e34e:	b082      	sub	sp, #8
 800e350:	af00      	add	r7, sp, #0
 800e352:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	2b00      	cmp	r3, #0
 800e358:	d106      	bne.n	800e368 <tcp_input_delayed_close+0x1c>
 800e35a:	4b17      	ldr	r3, [pc, #92]	; (800e3b8 <tcp_input_delayed_close+0x6c>)
 800e35c:	f240 225a 	movw	r2, #602	; 0x25a
 800e360:	4916      	ldr	r1, [pc, #88]	; (800e3bc <tcp_input_delayed_close+0x70>)
 800e362:	4817      	ldr	r0, [pc, #92]	; (800e3c0 <tcp_input_delayed_close+0x74>)
 800e364:	f007 f88a 	bl	801547c <iprintf>

  if (recv_flags & TF_CLOSED) {
 800e368:	4b16      	ldr	r3, [pc, #88]	; (800e3c4 <tcp_input_delayed_close+0x78>)
 800e36a:	781b      	ldrb	r3, [r3, #0]
 800e36c:	f003 0310 	and.w	r3, r3, #16
 800e370:	2b00      	cmp	r3, #0
 800e372:	d01c      	beq.n	800e3ae <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	8b5b      	ldrh	r3, [r3, #26]
 800e378:	f003 0310 	and.w	r3, r3, #16
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	d10d      	bne.n	800e39c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e386:	2b00      	cmp	r3, #0
 800e388:	d008      	beq.n	800e39c <tcp_input_delayed_close+0x50>
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e390:	687a      	ldr	r2, [r7, #4]
 800e392:	6912      	ldr	r2, [r2, #16]
 800e394:	f06f 010e 	mvn.w	r1, #14
 800e398:	4610      	mov	r0, r2
 800e39a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800e39c:	6879      	ldr	r1, [r7, #4]
 800e39e:	480a      	ldr	r0, [pc, #40]	; (800e3c8 <tcp_input_delayed_close+0x7c>)
 800e3a0:	f7ff fa52 	bl	800d848 <tcp_pcb_remove>
    tcp_free(pcb);
 800e3a4:	6878      	ldr	r0, [r7, #4]
 800e3a6:	f7fd fd6d 	bl	800be84 <tcp_free>
    return 1;
 800e3aa:	2301      	movs	r3, #1
 800e3ac:	e000      	b.n	800e3b0 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800e3ae:	2300      	movs	r3, #0
}
 800e3b0:	4618      	mov	r0, r3
 800e3b2:	3708      	adds	r7, #8
 800e3b4:	46bd      	mov	sp, r7
 800e3b6:	bd80      	pop	{r7, pc}
 800e3b8:	08018120 	.word	0x08018120
 800e3bc:	080182f0 	.word	0x080182f0
 800e3c0:	0801816c 	.word	0x0801816c
 800e3c4:	20004af9 	.word	0x20004af9
 800e3c8:	2000bda4 	.word	0x2000bda4

0800e3cc <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800e3cc:	b590      	push	{r4, r7, lr}
 800e3ce:	b08b      	sub	sp, #44	; 0x2c
 800e3d0:	af04      	add	r7, sp, #16
 800e3d2:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800e3d4:	4b6f      	ldr	r3, [pc, #444]	; (800e594 <tcp_listen_input+0x1c8>)
 800e3d6:	781b      	ldrb	r3, [r3, #0]
 800e3d8:	f003 0304 	and.w	r3, r3, #4
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	f040 80d2 	bne.w	800e586 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d106      	bne.n	800e3f6 <tcp_listen_input+0x2a>
 800e3e8:	4b6b      	ldr	r3, [pc, #428]	; (800e598 <tcp_listen_input+0x1cc>)
 800e3ea:	f240 2281 	movw	r2, #641	; 0x281
 800e3ee:	496b      	ldr	r1, [pc, #428]	; (800e59c <tcp_listen_input+0x1d0>)
 800e3f0:	486b      	ldr	r0, [pc, #428]	; (800e5a0 <tcp_listen_input+0x1d4>)
 800e3f2:	f007 f843 	bl	801547c <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800e3f6:	4b67      	ldr	r3, [pc, #412]	; (800e594 <tcp_listen_input+0x1c8>)
 800e3f8:	781b      	ldrb	r3, [r3, #0]
 800e3fa:	f003 0310 	and.w	r3, r3, #16
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	d019      	beq.n	800e436 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e402:	4b68      	ldr	r3, [pc, #416]	; (800e5a4 <tcp_listen_input+0x1d8>)
 800e404:	6819      	ldr	r1, [r3, #0]
 800e406:	4b68      	ldr	r3, [pc, #416]	; (800e5a8 <tcp_listen_input+0x1dc>)
 800e408:	881b      	ldrh	r3, [r3, #0]
 800e40a:	461a      	mov	r2, r3
 800e40c:	4b67      	ldr	r3, [pc, #412]	; (800e5ac <tcp_listen_input+0x1e0>)
 800e40e:	681b      	ldr	r3, [r3, #0]
 800e410:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e412:	4b67      	ldr	r3, [pc, #412]	; (800e5b0 <tcp_listen_input+0x1e4>)
 800e414:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e416:	885b      	ldrh	r3, [r3, #2]
 800e418:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e41a:	4a65      	ldr	r2, [pc, #404]	; (800e5b0 <tcp_listen_input+0x1e4>)
 800e41c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e41e:	8812      	ldrh	r2, [r2, #0]
 800e420:	b292      	uxth	r2, r2
 800e422:	9202      	str	r2, [sp, #8]
 800e424:	9301      	str	r3, [sp, #4]
 800e426:	4b63      	ldr	r3, [pc, #396]	; (800e5b4 <tcp_listen_input+0x1e8>)
 800e428:	9300      	str	r3, [sp, #0]
 800e42a:	4b63      	ldr	r3, [pc, #396]	; (800e5b8 <tcp_listen_input+0x1ec>)
 800e42c:	4602      	mov	r2, r0
 800e42e:	6878      	ldr	r0, [r7, #4]
 800e430:	f003 fbd6 	bl	8011be0 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800e434:	e0a9      	b.n	800e58a <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800e436:	4b57      	ldr	r3, [pc, #348]	; (800e594 <tcp_listen_input+0x1c8>)
 800e438:	781b      	ldrb	r3, [r3, #0]
 800e43a:	f003 0302 	and.w	r3, r3, #2
 800e43e:	2b00      	cmp	r3, #0
 800e440:	f000 80a3 	beq.w	800e58a <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	7d5b      	ldrb	r3, [r3, #21]
 800e448:	4618      	mov	r0, r3
 800e44a:	f7ff f85b 	bl	800d504 <tcp_alloc>
 800e44e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800e450:	697b      	ldr	r3, [r7, #20]
 800e452:	2b00      	cmp	r3, #0
 800e454:	d111      	bne.n	800e47a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	699b      	ldr	r3, [r3, #24]
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d00a      	beq.n	800e474 <tcp_listen_input+0xa8>
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	699b      	ldr	r3, [r3, #24]
 800e462:	687a      	ldr	r2, [r7, #4]
 800e464:	6910      	ldr	r0, [r2, #16]
 800e466:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e46a:	2100      	movs	r1, #0
 800e46c:	4798      	blx	r3
 800e46e:	4603      	mov	r3, r0
 800e470:	73bb      	strb	r3, [r7, #14]
      return;
 800e472:	e08b      	b.n	800e58c <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800e474:	23f0      	movs	r3, #240	; 0xf0
 800e476:	73bb      	strb	r3, [r7, #14]
      return;
 800e478:	e088      	b.n	800e58c <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800e47a:	4b50      	ldr	r3, [pc, #320]	; (800e5bc <tcp_listen_input+0x1f0>)
 800e47c:	695a      	ldr	r2, [r3, #20]
 800e47e:	697b      	ldr	r3, [r7, #20]
 800e480:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800e482:	4b4e      	ldr	r3, [pc, #312]	; (800e5bc <tcp_listen_input+0x1f0>)
 800e484:	691a      	ldr	r2, [r3, #16]
 800e486:	697b      	ldr	r3, [r7, #20]
 800e488:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	8ada      	ldrh	r2, [r3, #22]
 800e48e:	697b      	ldr	r3, [r7, #20]
 800e490:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800e492:	4b47      	ldr	r3, [pc, #284]	; (800e5b0 <tcp_listen_input+0x1e4>)
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	881b      	ldrh	r3, [r3, #0]
 800e498:	b29a      	uxth	r2, r3
 800e49a:	697b      	ldr	r3, [r7, #20]
 800e49c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800e49e:	697b      	ldr	r3, [r7, #20]
 800e4a0:	2203      	movs	r2, #3
 800e4a2:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800e4a4:	4b41      	ldr	r3, [pc, #260]	; (800e5ac <tcp_listen_input+0x1e0>)
 800e4a6:	681b      	ldr	r3, [r3, #0]
 800e4a8:	1c5a      	adds	r2, r3, #1
 800e4aa:	697b      	ldr	r3, [r7, #20]
 800e4ac:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800e4ae:	697b      	ldr	r3, [r7, #20]
 800e4b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e4b2:	697b      	ldr	r3, [r7, #20]
 800e4b4:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800e4b6:	6978      	ldr	r0, [r7, #20]
 800e4b8:	f7ff fa5a 	bl	800d970 <tcp_next_iss>
 800e4bc:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800e4be:	697b      	ldr	r3, [r7, #20]
 800e4c0:	693a      	ldr	r2, [r7, #16]
 800e4c2:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800e4c4:	697b      	ldr	r3, [r7, #20]
 800e4c6:	693a      	ldr	r2, [r7, #16]
 800e4c8:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800e4ca:	697b      	ldr	r3, [r7, #20]
 800e4cc:	693a      	ldr	r2, [r7, #16]
 800e4ce:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800e4d0:	697b      	ldr	r3, [r7, #20]
 800e4d2:	693a      	ldr	r2, [r7, #16]
 800e4d4:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800e4d6:	4b35      	ldr	r3, [pc, #212]	; (800e5ac <tcp_listen_input+0x1e0>)
 800e4d8:	681b      	ldr	r3, [r3, #0]
 800e4da:	1e5a      	subs	r2, r3, #1
 800e4dc:	697b      	ldr	r3, [r7, #20]
 800e4de:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	691a      	ldr	r2, [r3, #16]
 800e4e4:	697b      	ldr	r3, [r7, #20]
 800e4e6:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800e4e8:	697b      	ldr	r3, [r7, #20]
 800e4ea:	687a      	ldr	r2, [r7, #4]
 800e4ec:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	7a5b      	ldrb	r3, [r3, #9]
 800e4f2:	f003 030c 	and.w	r3, r3, #12
 800e4f6:	b2da      	uxtb	r2, r3
 800e4f8:	697b      	ldr	r3, [r7, #20]
 800e4fa:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	7a1a      	ldrb	r2, [r3, #8]
 800e500:	697b      	ldr	r3, [r7, #20]
 800e502:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800e504:	4b2e      	ldr	r3, [pc, #184]	; (800e5c0 <tcp_listen_input+0x1f4>)
 800e506:	681a      	ldr	r2, [r3, #0]
 800e508:	697b      	ldr	r3, [r7, #20]
 800e50a:	60da      	str	r2, [r3, #12]
 800e50c:	4a2c      	ldr	r2, [pc, #176]	; (800e5c0 <tcp_listen_input+0x1f4>)
 800e50e:	697b      	ldr	r3, [r7, #20]
 800e510:	6013      	str	r3, [r2, #0]
 800e512:	f003 fd27 	bl	8011f64 <tcp_timer_needed>
 800e516:	4b2b      	ldr	r3, [pc, #172]	; (800e5c4 <tcp_listen_input+0x1f8>)
 800e518:	2201      	movs	r2, #1
 800e51a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800e51c:	6978      	ldr	r0, [r7, #20]
 800e51e:	f001 fd8d 	bl	801003c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800e522:	4b23      	ldr	r3, [pc, #140]	; (800e5b0 <tcp_listen_input+0x1e4>)
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	89db      	ldrh	r3, [r3, #14]
 800e528:	b29a      	uxth	r2, r3
 800e52a:	697b      	ldr	r3, [r7, #20]
 800e52c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800e530:	697b      	ldr	r3, [r7, #20]
 800e532:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e536:	697b      	ldr	r3, [r7, #20]
 800e538:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800e53c:	697b      	ldr	r3, [r7, #20]
 800e53e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800e540:	697b      	ldr	r3, [r7, #20]
 800e542:	3304      	adds	r3, #4
 800e544:	4618      	mov	r0, r3
 800e546:	f005 fa61 	bl	8013a0c <ip4_route>
 800e54a:	4601      	mov	r1, r0
 800e54c:	697b      	ldr	r3, [r7, #20]
 800e54e:	3304      	adds	r3, #4
 800e550:	461a      	mov	r2, r3
 800e552:	4620      	mov	r0, r4
 800e554:	f7ff fa32 	bl	800d9bc <tcp_eff_send_mss_netif>
 800e558:	4603      	mov	r3, r0
 800e55a:	461a      	mov	r2, r3
 800e55c:	697b      	ldr	r3, [r7, #20]
 800e55e:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800e560:	2112      	movs	r1, #18
 800e562:	6978      	ldr	r0, [r7, #20]
 800e564:	f002 fc9a 	bl	8010e9c <tcp_enqueue_flags>
 800e568:	4603      	mov	r3, r0
 800e56a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800e56c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e570:	2b00      	cmp	r3, #0
 800e572:	d004      	beq.n	800e57e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800e574:	2100      	movs	r1, #0
 800e576:	6978      	ldr	r0, [r7, #20]
 800e578:	f7fd ff0a 	bl	800c390 <tcp_abandon>
      return;
 800e57c:	e006      	b.n	800e58c <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800e57e:	6978      	ldr	r0, [r7, #20]
 800e580:	f002 fd7a 	bl	8011078 <tcp_output>
  return;
 800e584:	e001      	b.n	800e58a <tcp_listen_input+0x1be>
    return;
 800e586:	bf00      	nop
 800e588:	e000      	b.n	800e58c <tcp_listen_input+0x1c0>
  return;
 800e58a:	bf00      	nop
}
 800e58c:	371c      	adds	r7, #28
 800e58e:	46bd      	mov	sp, r7
 800e590:	bd90      	pop	{r4, r7, pc}
 800e592:	bf00      	nop
 800e594:	20004af8 	.word	0x20004af8
 800e598:	08018120 	.word	0x08018120
 800e59c:	08018318 	.word	0x08018318
 800e5a0:	0801816c 	.word	0x0801816c
 800e5a4:	20004af0 	.word	0x20004af0
 800e5a8:	20004af6 	.word	0x20004af6
 800e5ac:	20004aec 	.word	0x20004aec
 800e5b0:	20004adc 	.word	0x20004adc
 800e5b4:	200086a0 	.word	0x200086a0
 800e5b8:	200086a4 	.word	0x200086a4
 800e5bc:	20008690 	.word	0x20008690
 800e5c0:	2000bda4 	.word	0x2000bda4
 800e5c4:	2000bda0 	.word	0x2000bda0

0800e5c8 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800e5c8:	b580      	push	{r7, lr}
 800e5ca:	b086      	sub	sp, #24
 800e5cc:	af04      	add	r7, sp, #16
 800e5ce:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800e5d0:	4b2f      	ldr	r3, [pc, #188]	; (800e690 <tcp_timewait_input+0xc8>)
 800e5d2:	781b      	ldrb	r3, [r3, #0]
 800e5d4:	f003 0304 	and.w	r3, r3, #4
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d153      	bne.n	800e684 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d106      	bne.n	800e5f0 <tcp_timewait_input+0x28>
 800e5e2:	4b2c      	ldr	r3, [pc, #176]	; (800e694 <tcp_timewait_input+0xcc>)
 800e5e4:	f240 22ee 	movw	r2, #750	; 0x2ee
 800e5e8:	492b      	ldr	r1, [pc, #172]	; (800e698 <tcp_timewait_input+0xd0>)
 800e5ea:	482c      	ldr	r0, [pc, #176]	; (800e69c <tcp_timewait_input+0xd4>)
 800e5ec:	f006 ff46 	bl	801547c <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800e5f0:	4b27      	ldr	r3, [pc, #156]	; (800e690 <tcp_timewait_input+0xc8>)
 800e5f2:	781b      	ldrb	r3, [r3, #0]
 800e5f4:	f003 0302 	and.w	r3, r3, #2
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d02a      	beq.n	800e652 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800e5fc:	4b28      	ldr	r3, [pc, #160]	; (800e6a0 <tcp_timewait_input+0xd8>)
 800e5fe:	681a      	ldr	r2, [r3, #0]
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e604:	1ad3      	subs	r3, r2, r3
 800e606:	2b00      	cmp	r3, #0
 800e608:	db2d      	blt.n	800e666 <tcp_timewait_input+0x9e>
 800e60a:	4b25      	ldr	r3, [pc, #148]	; (800e6a0 <tcp_timewait_input+0xd8>)
 800e60c:	681a      	ldr	r2, [r3, #0]
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e612:	6879      	ldr	r1, [r7, #4]
 800e614:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e616:	440b      	add	r3, r1
 800e618:	1ad3      	subs	r3, r2, r3
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	dc23      	bgt.n	800e666 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e61e:	4b21      	ldr	r3, [pc, #132]	; (800e6a4 <tcp_timewait_input+0xdc>)
 800e620:	6819      	ldr	r1, [r3, #0]
 800e622:	4b21      	ldr	r3, [pc, #132]	; (800e6a8 <tcp_timewait_input+0xe0>)
 800e624:	881b      	ldrh	r3, [r3, #0]
 800e626:	461a      	mov	r2, r3
 800e628:	4b1d      	ldr	r3, [pc, #116]	; (800e6a0 <tcp_timewait_input+0xd8>)
 800e62a:	681b      	ldr	r3, [r3, #0]
 800e62c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e62e:	4b1f      	ldr	r3, [pc, #124]	; (800e6ac <tcp_timewait_input+0xe4>)
 800e630:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e632:	885b      	ldrh	r3, [r3, #2]
 800e634:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e636:	4a1d      	ldr	r2, [pc, #116]	; (800e6ac <tcp_timewait_input+0xe4>)
 800e638:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e63a:	8812      	ldrh	r2, [r2, #0]
 800e63c:	b292      	uxth	r2, r2
 800e63e:	9202      	str	r2, [sp, #8]
 800e640:	9301      	str	r3, [sp, #4]
 800e642:	4b1b      	ldr	r3, [pc, #108]	; (800e6b0 <tcp_timewait_input+0xe8>)
 800e644:	9300      	str	r3, [sp, #0]
 800e646:	4b1b      	ldr	r3, [pc, #108]	; (800e6b4 <tcp_timewait_input+0xec>)
 800e648:	4602      	mov	r2, r0
 800e64a:	6878      	ldr	r0, [r7, #4]
 800e64c:	f003 fac8 	bl	8011be0 <tcp_rst>
      return;
 800e650:	e01b      	b.n	800e68a <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800e652:	4b0f      	ldr	r3, [pc, #60]	; (800e690 <tcp_timewait_input+0xc8>)
 800e654:	781b      	ldrb	r3, [r3, #0]
 800e656:	f003 0301 	and.w	r3, r3, #1
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	d003      	beq.n	800e666 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800e65e:	4b16      	ldr	r3, [pc, #88]	; (800e6b8 <tcp_timewait_input+0xf0>)
 800e660:	681a      	ldr	r2, [r3, #0]
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800e666:	4b10      	ldr	r3, [pc, #64]	; (800e6a8 <tcp_timewait_input+0xe0>)
 800e668:	881b      	ldrh	r3, [r3, #0]
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d00c      	beq.n	800e688 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	8b5b      	ldrh	r3, [r3, #26]
 800e672:	f043 0302 	orr.w	r3, r3, #2
 800e676:	b29a      	uxth	r2, r3
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e67c:	6878      	ldr	r0, [r7, #4]
 800e67e:	f002 fcfb 	bl	8011078 <tcp_output>
  }
  return;
 800e682:	e001      	b.n	800e688 <tcp_timewait_input+0xc0>
    return;
 800e684:	bf00      	nop
 800e686:	e000      	b.n	800e68a <tcp_timewait_input+0xc2>
  return;
 800e688:	bf00      	nop
}
 800e68a:	3708      	adds	r7, #8
 800e68c:	46bd      	mov	sp, r7
 800e68e:	bd80      	pop	{r7, pc}
 800e690:	20004af8 	.word	0x20004af8
 800e694:	08018120 	.word	0x08018120
 800e698:	08018338 	.word	0x08018338
 800e69c:	0801816c 	.word	0x0801816c
 800e6a0:	20004aec 	.word	0x20004aec
 800e6a4:	20004af0 	.word	0x20004af0
 800e6a8:	20004af6 	.word	0x20004af6
 800e6ac:	20004adc 	.word	0x20004adc
 800e6b0:	200086a0 	.word	0x200086a0
 800e6b4:	200086a4 	.word	0x200086a4
 800e6b8:	2000bda8 	.word	0x2000bda8

0800e6bc <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800e6bc:	b590      	push	{r4, r7, lr}
 800e6be:	b08d      	sub	sp, #52	; 0x34
 800e6c0:	af04      	add	r7, sp, #16
 800e6c2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800e6c4:	2300      	movs	r3, #0
 800e6c6:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800e6c8:	2300      	movs	r3, #0
 800e6ca:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d106      	bne.n	800e6e0 <tcp_process+0x24>
 800e6d2:	4ba5      	ldr	r3, [pc, #660]	; (800e968 <tcp_process+0x2ac>)
 800e6d4:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800e6d8:	49a4      	ldr	r1, [pc, #656]	; (800e96c <tcp_process+0x2b0>)
 800e6da:	48a5      	ldr	r0, [pc, #660]	; (800e970 <tcp_process+0x2b4>)
 800e6dc:	f006 fece 	bl	801547c <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800e6e0:	4ba4      	ldr	r3, [pc, #656]	; (800e974 <tcp_process+0x2b8>)
 800e6e2:	781b      	ldrb	r3, [r3, #0]
 800e6e4:	f003 0304 	and.w	r3, r3, #4
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	d04e      	beq.n	800e78a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	7d1b      	ldrb	r3, [r3, #20]
 800e6f0:	2b02      	cmp	r3, #2
 800e6f2:	d108      	bne.n	800e706 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e6f8:	4b9f      	ldr	r3, [pc, #636]	; (800e978 <tcp_process+0x2bc>)
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	429a      	cmp	r2, r3
 800e6fe:	d123      	bne.n	800e748 <tcp_process+0x8c>
        acceptable = 1;
 800e700:	2301      	movs	r3, #1
 800e702:	76fb      	strb	r3, [r7, #27]
 800e704:	e020      	b.n	800e748 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e70a:	4b9c      	ldr	r3, [pc, #624]	; (800e97c <tcp_process+0x2c0>)
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	429a      	cmp	r2, r3
 800e710:	d102      	bne.n	800e718 <tcp_process+0x5c>
        acceptable = 1;
 800e712:	2301      	movs	r3, #1
 800e714:	76fb      	strb	r3, [r7, #27]
 800e716:	e017      	b.n	800e748 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800e718:	4b98      	ldr	r3, [pc, #608]	; (800e97c <tcp_process+0x2c0>)
 800e71a:	681a      	ldr	r2, [r3, #0]
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e720:	1ad3      	subs	r3, r2, r3
 800e722:	2b00      	cmp	r3, #0
 800e724:	db10      	blt.n	800e748 <tcp_process+0x8c>
 800e726:	4b95      	ldr	r3, [pc, #596]	; (800e97c <tcp_process+0x2c0>)
 800e728:	681a      	ldr	r2, [r3, #0]
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e72e:	6879      	ldr	r1, [r7, #4]
 800e730:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e732:	440b      	add	r3, r1
 800e734:	1ad3      	subs	r3, r2, r3
 800e736:	2b00      	cmp	r3, #0
 800e738:	dc06      	bgt.n	800e748 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	8b5b      	ldrh	r3, [r3, #26]
 800e73e:	f043 0302 	orr.w	r3, r3, #2
 800e742:	b29a      	uxth	r2, r3
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800e748:	7efb      	ldrb	r3, [r7, #27]
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	d01b      	beq.n	800e786 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	7d1b      	ldrb	r3, [r3, #20]
 800e752:	2b00      	cmp	r3, #0
 800e754:	d106      	bne.n	800e764 <tcp_process+0xa8>
 800e756:	4b84      	ldr	r3, [pc, #528]	; (800e968 <tcp_process+0x2ac>)
 800e758:	f44f 724e 	mov.w	r2, #824	; 0x338
 800e75c:	4988      	ldr	r1, [pc, #544]	; (800e980 <tcp_process+0x2c4>)
 800e75e:	4884      	ldr	r0, [pc, #528]	; (800e970 <tcp_process+0x2b4>)
 800e760:	f006 fe8c 	bl	801547c <iprintf>
      recv_flags |= TF_RESET;
 800e764:	4b87      	ldr	r3, [pc, #540]	; (800e984 <tcp_process+0x2c8>)
 800e766:	781b      	ldrb	r3, [r3, #0]
 800e768:	f043 0308 	orr.w	r3, r3, #8
 800e76c:	b2da      	uxtb	r2, r3
 800e76e:	4b85      	ldr	r3, [pc, #532]	; (800e984 <tcp_process+0x2c8>)
 800e770:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	8b5b      	ldrh	r3, [r3, #26]
 800e776:	f023 0301 	bic.w	r3, r3, #1
 800e77a:	b29a      	uxth	r2, r3
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800e780:	f06f 030d 	mvn.w	r3, #13
 800e784:	e37a      	b.n	800ee7c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800e786:	2300      	movs	r3, #0
 800e788:	e378      	b.n	800ee7c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800e78a:	4b7a      	ldr	r3, [pc, #488]	; (800e974 <tcp_process+0x2b8>)
 800e78c:	781b      	ldrb	r3, [r3, #0]
 800e78e:	f003 0302 	and.w	r3, r3, #2
 800e792:	2b00      	cmp	r3, #0
 800e794:	d010      	beq.n	800e7b8 <tcp_process+0xfc>
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	7d1b      	ldrb	r3, [r3, #20]
 800e79a:	2b02      	cmp	r3, #2
 800e79c:	d00c      	beq.n	800e7b8 <tcp_process+0xfc>
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	7d1b      	ldrb	r3, [r3, #20]
 800e7a2:	2b03      	cmp	r3, #3
 800e7a4:	d008      	beq.n	800e7b8 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	8b5b      	ldrh	r3, [r3, #26]
 800e7aa:	f043 0302 	orr.w	r3, r3, #2
 800e7ae:	b29a      	uxth	r2, r3
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800e7b4:	2300      	movs	r3, #0
 800e7b6:	e361      	b.n	800ee7c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	8b5b      	ldrh	r3, [r3, #26]
 800e7bc:	f003 0310 	and.w	r3, r3, #16
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d103      	bne.n	800e7cc <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800e7c4:	4b70      	ldr	r3, [pc, #448]	; (800e988 <tcp_process+0x2cc>)
 800e7c6:	681a      	ldr	r2, [r3, #0]
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	2200      	movs	r2, #0
 800e7d0:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	2200      	movs	r2, #0
 800e7d8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800e7dc:	6878      	ldr	r0, [r7, #4]
 800e7de:	f001 fc2d 	bl	801003c <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	7d1b      	ldrb	r3, [r3, #20]
 800e7e6:	3b02      	subs	r3, #2
 800e7e8:	2b07      	cmp	r3, #7
 800e7ea:	f200 8337 	bhi.w	800ee5c <tcp_process+0x7a0>
 800e7ee:	a201      	add	r2, pc, #4	; (adr r2, 800e7f4 <tcp_process+0x138>)
 800e7f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7f4:	0800e815 	.word	0x0800e815
 800e7f8:	0800ea45 	.word	0x0800ea45
 800e7fc:	0800ebbd 	.word	0x0800ebbd
 800e800:	0800ebe7 	.word	0x0800ebe7
 800e804:	0800ed0b 	.word	0x0800ed0b
 800e808:	0800ebbd 	.word	0x0800ebbd
 800e80c:	0800ed97 	.word	0x0800ed97
 800e810:	0800ee27 	.word	0x0800ee27
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800e814:	4b57      	ldr	r3, [pc, #348]	; (800e974 <tcp_process+0x2b8>)
 800e816:	781b      	ldrb	r3, [r3, #0]
 800e818:	f003 0310 	and.w	r3, r3, #16
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	f000 80e4 	beq.w	800e9ea <tcp_process+0x32e>
 800e822:	4b54      	ldr	r3, [pc, #336]	; (800e974 <tcp_process+0x2b8>)
 800e824:	781b      	ldrb	r3, [r3, #0]
 800e826:	f003 0302 	and.w	r3, r3, #2
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	f000 80dd 	beq.w	800e9ea <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e834:	1c5a      	adds	r2, r3, #1
 800e836:	4b50      	ldr	r3, [pc, #320]	; (800e978 <tcp_process+0x2bc>)
 800e838:	681b      	ldr	r3, [r3, #0]
 800e83a:	429a      	cmp	r2, r3
 800e83c:	f040 80d5 	bne.w	800e9ea <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800e840:	4b4e      	ldr	r3, [pc, #312]	; (800e97c <tcp_process+0x2c0>)
 800e842:	681b      	ldr	r3, [r3, #0]
 800e844:	1c5a      	adds	r2, r3, #1
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800e852:	4b49      	ldr	r3, [pc, #292]	; (800e978 <tcp_process+0x2bc>)
 800e854:	681a      	ldr	r2, [r3, #0]
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800e85a:	4b4c      	ldr	r3, [pc, #304]	; (800e98c <tcp_process+0x2d0>)
 800e85c:	681b      	ldr	r3, [r3, #0]
 800e85e:	89db      	ldrh	r3, [r3, #14]
 800e860:	b29a      	uxth	r2, r3
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800e874:	4b41      	ldr	r3, [pc, #260]	; (800e97c <tcp_process+0x2c0>)
 800e876:	681b      	ldr	r3, [r3, #0]
 800e878:	1e5a      	subs	r2, r3, #1
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	2204      	movs	r2, #4
 800e882:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	3304      	adds	r3, #4
 800e88c:	4618      	mov	r0, r3
 800e88e:	f005 f8bd 	bl	8013a0c <ip4_route>
 800e892:	4601      	mov	r1, r0
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	3304      	adds	r3, #4
 800e898:	461a      	mov	r2, r3
 800e89a:	4620      	mov	r0, r4
 800e89c:	f7ff f88e 	bl	800d9bc <tcp_eff_send_mss_netif>
 800e8a0:	4603      	mov	r3, r0
 800e8a2:	461a      	mov	r2, r3
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e8ac:	009a      	lsls	r2, r3, #2
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e8b2:	005b      	lsls	r3, r3, #1
 800e8b4:	f241 111c 	movw	r1, #4380	; 0x111c
 800e8b8:	428b      	cmp	r3, r1
 800e8ba:	bf38      	it	cc
 800e8bc:	460b      	movcc	r3, r1
 800e8be:	429a      	cmp	r2, r3
 800e8c0:	d204      	bcs.n	800e8cc <tcp_process+0x210>
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e8c6:	009b      	lsls	r3, r3, #2
 800e8c8:	b29b      	uxth	r3, r3
 800e8ca:	e00d      	b.n	800e8e8 <tcp_process+0x22c>
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e8d0:	005b      	lsls	r3, r3, #1
 800e8d2:	f241 121c 	movw	r2, #4380	; 0x111c
 800e8d6:	4293      	cmp	r3, r2
 800e8d8:	d904      	bls.n	800e8e4 <tcp_process+0x228>
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e8de:	005b      	lsls	r3, r3, #1
 800e8e0:	b29b      	uxth	r3, r3
 800e8e2:	e001      	b.n	800e8e8 <tcp_process+0x22c>
 800e8e4:	f241 131c 	movw	r3, #4380	; 0x111c
 800e8e8:	687a      	ldr	r2, [r7, #4]
 800e8ea:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	d106      	bne.n	800e906 <tcp_process+0x24a>
 800e8f8:	4b1b      	ldr	r3, [pc, #108]	; (800e968 <tcp_process+0x2ac>)
 800e8fa:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800e8fe:	4924      	ldr	r1, [pc, #144]	; (800e990 <tcp_process+0x2d4>)
 800e900:	481b      	ldr	r0, [pc, #108]	; (800e970 <tcp_process+0x2b4>)
 800e902:	f006 fdbb 	bl	801547c <iprintf>
        --pcb->snd_queuelen;
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e90c:	3b01      	subs	r3, #1
 800e90e:	b29a      	uxth	r2, r3
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e91a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800e91c:	69fb      	ldr	r3, [r7, #28]
 800e91e:	2b00      	cmp	r3, #0
 800e920:	d111      	bne.n	800e946 <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e926:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800e928:	69fb      	ldr	r3, [r7, #28]
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	d106      	bne.n	800e93c <tcp_process+0x280>
 800e92e:	4b0e      	ldr	r3, [pc, #56]	; (800e968 <tcp_process+0x2ac>)
 800e930:	f44f 725d 	mov.w	r2, #884	; 0x374
 800e934:	4917      	ldr	r1, [pc, #92]	; (800e994 <tcp_process+0x2d8>)
 800e936:	480e      	ldr	r0, [pc, #56]	; (800e970 <tcp_process+0x2b4>)
 800e938:	f006 fda0 	bl	801547c <iprintf>
          pcb->unsent = rseg->next;
 800e93c:	69fb      	ldr	r3, [r7, #28]
 800e93e:	681a      	ldr	r2, [r3, #0]
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	66da      	str	r2, [r3, #108]	; 0x6c
 800e944:	e003      	b.n	800e94e <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 800e946:	69fb      	ldr	r3, [r7, #28]
 800e948:	681a      	ldr	r2, [r3, #0]
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800e94e:	69f8      	ldr	r0, [r7, #28]
 800e950:	f7fe fc6f 	bl	800d232 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e958:	2b00      	cmp	r3, #0
 800e95a:	d11d      	bne.n	800e998 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e962:	861a      	strh	r2, [r3, #48]	; 0x30
 800e964:	e01f      	b.n	800e9a6 <tcp_process+0x2ea>
 800e966:	bf00      	nop
 800e968:	08018120 	.word	0x08018120
 800e96c:	08018358 	.word	0x08018358
 800e970:	0801816c 	.word	0x0801816c
 800e974:	20004af8 	.word	0x20004af8
 800e978:	20004af0 	.word	0x20004af0
 800e97c:	20004aec 	.word	0x20004aec
 800e980:	08018374 	.word	0x08018374
 800e984:	20004af9 	.word	0x20004af9
 800e988:	2000bda8 	.word	0x2000bda8
 800e98c:	20004adc 	.word	0x20004adc
 800e990:	08018394 	.word	0x08018394
 800e994:	080183ac 	.word	0x080183ac
        } else {
          pcb->rtime = 0;
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	2200      	movs	r2, #0
 800e99c:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	2200      	movs	r2, #0
 800e9a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d00a      	beq.n	800e9c6 <tcp_process+0x30a>
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e9b6:	687a      	ldr	r2, [r7, #4]
 800e9b8:	6910      	ldr	r0, [r2, #16]
 800e9ba:	2200      	movs	r2, #0
 800e9bc:	6879      	ldr	r1, [r7, #4]
 800e9be:	4798      	blx	r3
 800e9c0:	4603      	mov	r3, r0
 800e9c2:	76bb      	strb	r3, [r7, #26]
 800e9c4:	e001      	b.n	800e9ca <tcp_process+0x30e>
 800e9c6:	2300      	movs	r3, #0
 800e9c8:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800e9ca:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800e9ce:	f113 0f0d 	cmn.w	r3, #13
 800e9d2:	d102      	bne.n	800e9da <tcp_process+0x31e>
          return ERR_ABRT;
 800e9d4:	f06f 030c 	mvn.w	r3, #12
 800e9d8:	e250      	b.n	800ee7c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	8b5b      	ldrh	r3, [r3, #26]
 800e9de:	f043 0302 	orr.w	r3, r3, #2
 800e9e2:	b29a      	uxth	r2, r3
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800e9e8:	e23a      	b.n	800ee60 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800e9ea:	4b9d      	ldr	r3, [pc, #628]	; (800ec60 <tcp_process+0x5a4>)
 800e9ec:	781b      	ldrb	r3, [r3, #0]
 800e9ee:	f003 0310 	and.w	r3, r3, #16
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	f000 8234 	beq.w	800ee60 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e9f8:	4b9a      	ldr	r3, [pc, #616]	; (800ec64 <tcp_process+0x5a8>)
 800e9fa:	6819      	ldr	r1, [r3, #0]
 800e9fc:	4b9a      	ldr	r3, [pc, #616]	; (800ec68 <tcp_process+0x5ac>)
 800e9fe:	881b      	ldrh	r3, [r3, #0]
 800ea00:	461a      	mov	r2, r3
 800ea02:	4b9a      	ldr	r3, [pc, #616]	; (800ec6c <tcp_process+0x5b0>)
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ea08:	4b99      	ldr	r3, [pc, #612]	; (800ec70 <tcp_process+0x5b4>)
 800ea0a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ea0c:	885b      	ldrh	r3, [r3, #2]
 800ea0e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ea10:	4a97      	ldr	r2, [pc, #604]	; (800ec70 <tcp_process+0x5b4>)
 800ea12:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ea14:	8812      	ldrh	r2, [r2, #0]
 800ea16:	b292      	uxth	r2, r2
 800ea18:	9202      	str	r2, [sp, #8]
 800ea1a:	9301      	str	r3, [sp, #4]
 800ea1c:	4b95      	ldr	r3, [pc, #596]	; (800ec74 <tcp_process+0x5b8>)
 800ea1e:	9300      	str	r3, [sp, #0]
 800ea20:	4b95      	ldr	r3, [pc, #596]	; (800ec78 <tcp_process+0x5bc>)
 800ea22:	4602      	mov	r2, r0
 800ea24:	6878      	ldr	r0, [r7, #4]
 800ea26:	f003 f8db 	bl	8011be0 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ea30:	2b05      	cmp	r3, #5
 800ea32:	f200 8215 	bhi.w	800ee60 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	2200      	movs	r2, #0
 800ea3a:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800ea3c:	6878      	ldr	r0, [r7, #4]
 800ea3e:	f002 fea5 	bl	801178c <tcp_rexmit_rto>
      break;
 800ea42:	e20d      	b.n	800ee60 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800ea44:	4b86      	ldr	r3, [pc, #536]	; (800ec60 <tcp_process+0x5a4>)
 800ea46:	781b      	ldrb	r3, [r3, #0]
 800ea48:	f003 0310 	and.w	r3, r3, #16
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	f000 80a1 	beq.w	800eb94 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ea52:	4b84      	ldr	r3, [pc, #528]	; (800ec64 <tcp_process+0x5a8>)
 800ea54:	681a      	ldr	r2, [r3, #0]
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ea5a:	1ad3      	subs	r3, r2, r3
 800ea5c:	3b01      	subs	r3, #1
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	db7e      	blt.n	800eb60 <tcp_process+0x4a4>
 800ea62:	4b80      	ldr	r3, [pc, #512]	; (800ec64 <tcp_process+0x5a8>)
 800ea64:	681a      	ldr	r2, [r3, #0]
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ea6a:	1ad3      	subs	r3, r2, r3
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	dc77      	bgt.n	800eb60 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	2204      	movs	r2, #4
 800ea74:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	d102      	bne.n	800ea84 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800ea7e:	23fa      	movs	r3, #250	; 0xfa
 800ea80:	76bb      	strb	r3, [r7, #26]
 800ea82:	e01d      	b.n	800eac0 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ea88:	699b      	ldr	r3, [r3, #24]
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	d106      	bne.n	800ea9c <tcp_process+0x3e0>
 800ea8e:	4b7b      	ldr	r3, [pc, #492]	; (800ec7c <tcp_process+0x5c0>)
 800ea90:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800ea94:	497a      	ldr	r1, [pc, #488]	; (800ec80 <tcp_process+0x5c4>)
 800ea96:	487b      	ldr	r0, [pc, #492]	; (800ec84 <tcp_process+0x5c8>)
 800ea98:	f006 fcf0 	bl	801547c <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800eaa0:	699b      	ldr	r3, [r3, #24]
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	d00a      	beq.n	800eabc <tcp_process+0x400>
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800eaaa:	699b      	ldr	r3, [r3, #24]
 800eaac:	687a      	ldr	r2, [r7, #4]
 800eaae:	6910      	ldr	r0, [r2, #16]
 800eab0:	2200      	movs	r2, #0
 800eab2:	6879      	ldr	r1, [r7, #4]
 800eab4:	4798      	blx	r3
 800eab6:	4603      	mov	r3, r0
 800eab8:	76bb      	strb	r3, [r7, #26]
 800eaba:	e001      	b.n	800eac0 <tcp_process+0x404>
 800eabc:	23f0      	movs	r3, #240	; 0xf0
 800eabe:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800eac0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	d00a      	beq.n	800eade <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800eac8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800eacc:	f113 0f0d 	cmn.w	r3, #13
 800ead0:	d002      	beq.n	800ead8 <tcp_process+0x41c>
              tcp_abort(pcb);
 800ead2:	6878      	ldr	r0, [r7, #4]
 800ead4:	f7fd fd1a 	bl	800c50c <tcp_abort>
            }
            return ERR_ABRT;
 800ead8:	f06f 030c 	mvn.w	r3, #12
 800eadc:	e1ce      	b.n	800ee7c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800eade:	6878      	ldr	r0, [r7, #4]
 800eae0:	f000 fae0 	bl	800f0a4 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800eae4:	4b68      	ldr	r3, [pc, #416]	; (800ec88 <tcp_process+0x5cc>)
 800eae6:	881b      	ldrh	r3, [r3, #0]
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	d005      	beq.n	800eaf8 <tcp_process+0x43c>
            recv_acked--;
 800eaec:	4b66      	ldr	r3, [pc, #408]	; (800ec88 <tcp_process+0x5cc>)
 800eaee:	881b      	ldrh	r3, [r3, #0]
 800eaf0:	3b01      	subs	r3, #1
 800eaf2:	b29a      	uxth	r2, r3
 800eaf4:	4b64      	ldr	r3, [pc, #400]	; (800ec88 <tcp_process+0x5cc>)
 800eaf6:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800eafc:	009a      	lsls	r2, r3, #2
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800eb02:	005b      	lsls	r3, r3, #1
 800eb04:	f241 111c 	movw	r1, #4380	; 0x111c
 800eb08:	428b      	cmp	r3, r1
 800eb0a:	bf38      	it	cc
 800eb0c:	460b      	movcc	r3, r1
 800eb0e:	429a      	cmp	r2, r3
 800eb10:	d204      	bcs.n	800eb1c <tcp_process+0x460>
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800eb16:	009b      	lsls	r3, r3, #2
 800eb18:	b29b      	uxth	r3, r3
 800eb1a:	e00d      	b.n	800eb38 <tcp_process+0x47c>
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800eb20:	005b      	lsls	r3, r3, #1
 800eb22:	f241 121c 	movw	r2, #4380	; 0x111c
 800eb26:	4293      	cmp	r3, r2
 800eb28:	d904      	bls.n	800eb34 <tcp_process+0x478>
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800eb2e:	005b      	lsls	r3, r3, #1
 800eb30:	b29b      	uxth	r3, r3
 800eb32:	e001      	b.n	800eb38 <tcp_process+0x47c>
 800eb34:	f241 131c 	movw	r3, #4380	; 0x111c
 800eb38:	687a      	ldr	r2, [r7, #4]
 800eb3a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800eb3e:	4b53      	ldr	r3, [pc, #332]	; (800ec8c <tcp_process+0x5d0>)
 800eb40:	781b      	ldrb	r3, [r3, #0]
 800eb42:	f003 0320 	and.w	r3, r3, #32
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d037      	beq.n	800ebba <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	8b5b      	ldrh	r3, [r3, #26]
 800eb4e:	f043 0302 	orr.w	r3, r3, #2
 800eb52:	b29a      	uxth	r2, r3
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	2207      	movs	r2, #7
 800eb5c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800eb5e:	e02c      	b.n	800ebba <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800eb60:	4b40      	ldr	r3, [pc, #256]	; (800ec64 <tcp_process+0x5a8>)
 800eb62:	6819      	ldr	r1, [r3, #0]
 800eb64:	4b40      	ldr	r3, [pc, #256]	; (800ec68 <tcp_process+0x5ac>)
 800eb66:	881b      	ldrh	r3, [r3, #0]
 800eb68:	461a      	mov	r2, r3
 800eb6a:	4b40      	ldr	r3, [pc, #256]	; (800ec6c <tcp_process+0x5b0>)
 800eb6c:	681b      	ldr	r3, [r3, #0]
 800eb6e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800eb70:	4b3f      	ldr	r3, [pc, #252]	; (800ec70 <tcp_process+0x5b4>)
 800eb72:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800eb74:	885b      	ldrh	r3, [r3, #2]
 800eb76:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800eb78:	4a3d      	ldr	r2, [pc, #244]	; (800ec70 <tcp_process+0x5b4>)
 800eb7a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800eb7c:	8812      	ldrh	r2, [r2, #0]
 800eb7e:	b292      	uxth	r2, r2
 800eb80:	9202      	str	r2, [sp, #8]
 800eb82:	9301      	str	r3, [sp, #4]
 800eb84:	4b3b      	ldr	r3, [pc, #236]	; (800ec74 <tcp_process+0x5b8>)
 800eb86:	9300      	str	r3, [sp, #0]
 800eb88:	4b3b      	ldr	r3, [pc, #236]	; (800ec78 <tcp_process+0x5bc>)
 800eb8a:	4602      	mov	r2, r0
 800eb8c:	6878      	ldr	r0, [r7, #4]
 800eb8e:	f003 f827 	bl	8011be0 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800eb92:	e167      	b.n	800ee64 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800eb94:	4b32      	ldr	r3, [pc, #200]	; (800ec60 <tcp_process+0x5a4>)
 800eb96:	781b      	ldrb	r3, [r3, #0]
 800eb98:	f003 0302 	and.w	r3, r3, #2
 800eb9c:	2b00      	cmp	r3, #0
 800eb9e:	f000 8161 	beq.w	800ee64 <tcp_process+0x7a8>
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eba6:	1e5a      	subs	r2, r3, #1
 800eba8:	4b30      	ldr	r3, [pc, #192]	; (800ec6c <tcp_process+0x5b0>)
 800ebaa:	681b      	ldr	r3, [r3, #0]
 800ebac:	429a      	cmp	r2, r3
 800ebae:	f040 8159 	bne.w	800ee64 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800ebb2:	6878      	ldr	r0, [r7, #4]
 800ebb4:	f002 fe0c 	bl	80117d0 <tcp_rexmit>
      break;
 800ebb8:	e154      	b.n	800ee64 <tcp_process+0x7a8>
 800ebba:	e153      	b.n	800ee64 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800ebbc:	6878      	ldr	r0, [r7, #4]
 800ebbe:	f000 fa71 	bl	800f0a4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800ebc2:	4b32      	ldr	r3, [pc, #200]	; (800ec8c <tcp_process+0x5d0>)
 800ebc4:	781b      	ldrb	r3, [r3, #0]
 800ebc6:	f003 0320 	and.w	r3, r3, #32
 800ebca:	2b00      	cmp	r3, #0
 800ebcc:	f000 814c 	beq.w	800ee68 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	8b5b      	ldrh	r3, [r3, #26]
 800ebd4:	f043 0302 	orr.w	r3, r3, #2
 800ebd8:	b29a      	uxth	r2, r3
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	2207      	movs	r2, #7
 800ebe2:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ebe4:	e140      	b.n	800ee68 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800ebe6:	6878      	ldr	r0, [r7, #4]
 800ebe8:	f000 fa5c 	bl	800f0a4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800ebec:	4b27      	ldr	r3, [pc, #156]	; (800ec8c <tcp_process+0x5d0>)
 800ebee:	781b      	ldrb	r3, [r3, #0]
 800ebf0:	f003 0320 	and.w	r3, r3, #32
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d071      	beq.n	800ecdc <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ebf8:	4b19      	ldr	r3, [pc, #100]	; (800ec60 <tcp_process+0x5a4>)
 800ebfa:	781b      	ldrb	r3, [r3, #0]
 800ebfc:	f003 0310 	and.w	r3, r3, #16
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	d060      	beq.n	800ecc6 <tcp_process+0x60a>
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ec08:	4b16      	ldr	r3, [pc, #88]	; (800ec64 <tcp_process+0x5a8>)
 800ec0a:	681b      	ldr	r3, [r3, #0]
 800ec0c:	429a      	cmp	r2, r3
 800ec0e:	d15a      	bne.n	800ecc6 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	d156      	bne.n	800ecc6 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	8b5b      	ldrh	r3, [r3, #26]
 800ec1c:	f043 0302 	orr.w	r3, r3, #2
 800ec20:	b29a      	uxth	r2, r3
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800ec26:	6878      	ldr	r0, [r7, #4]
 800ec28:	f7fe fdbe 	bl	800d7a8 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800ec2c:	4b18      	ldr	r3, [pc, #96]	; (800ec90 <tcp_process+0x5d4>)
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	687a      	ldr	r2, [r7, #4]
 800ec32:	429a      	cmp	r2, r3
 800ec34:	d105      	bne.n	800ec42 <tcp_process+0x586>
 800ec36:	4b16      	ldr	r3, [pc, #88]	; (800ec90 <tcp_process+0x5d4>)
 800ec38:	681b      	ldr	r3, [r3, #0]
 800ec3a:	68db      	ldr	r3, [r3, #12]
 800ec3c:	4a14      	ldr	r2, [pc, #80]	; (800ec90 <tcp_process+0x5d4>)
 800ec3e:	6013      	str	r3, [r2, #0]
 800ec40:	e02e      	b.n	800eca0 <tcp_process+0x5e4>
 800ec42:	4b13      	ldr	r3, [pc, #76]	; (800ec90 <tcp_process+0x5d4>)
 800ec44:	681b      	ldr	r3, [r3, #0]
 800ec46:	617b      	str	r3, [r7, #20]
 800ec48:	e027      	b.n	800ec9a <tcp_process+0x5de>
 800ec4a:	697b      	ldr	r3, [r7, #20]
 800ec4c:	68db      	ldr	r3, [r3, #12]
 800ec4e:	687a      	ldr	r2, [r7, #4]
 800ec50:	429a      	cmp	r2, r3
 800ec52:	d11f      	bne.n	800ec94 <tcp_process+0x5d8>
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	68da      	ldr	r2, [r3, #12]
 800ec58:	697b      	ldr	r3, [r7, #20]
 800ec5a:	60da      	str	r2, [r3, #12]
 800ec5c:	e020      	b.n	800eca0 <tcp_process+0x5e4>
 800ec5e:	bf00      	nop
 800ec60:	20004af8 	.word	0x20004af8
 800ec64:	20004af0 	.word	0x20004af0
 800ec68:	20004af6 	.word	0x20004af6
 800ec6c:	20004aec 	.word	0x20004aec
 800ec70:	20004adc 	.word	0x20004adc
 800ec74:	200086a0 	.word	0x200086a0
 800ec78:	200086a4 	.word	0x200086a4
 800ec7c:	08018120 	.word	0x08018120
 800ec80:	080183c0 	.word	0x080183c0
 800ec84:	0801816c 	.word	0x0801816c
 800ec88:	20004af4 	.word	0x20004af4
 800ec8c:	20004af9 	.word	0x20004af9
 800ec90:	2000bda4 	.word	0x2000bda4
 800ec94:	697b      	ldr	r3, [r7, #20]
 800ec96:	68db      	ldr	r3, [r3, #12]
 800ec98:	617b      	str	r3, [r7, #20]
 800ec9a:	697b      	ldr	r3, [r7, #20]
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d1d4      	bne.n	800ec4a <tcp_process+0x58e>
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	2200      	movs	r2, #0
 800eca4:	60da      	str	r2, [r3, #12]
 800eca6:	4b77      	ldr	r3, [pc, #476]	; (800ee84 <tcp_process+0x7c8>)
 800eca8:	2201      	movs	r2, #1
 800ecaa:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	220a      	movs	r2, #10
 800ecb0:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800ecb2:	4b75      	ldr	r3, [pc, #468]	; (800ee88 <tcp_process+0x7cc>)
 800ecb4:	681a      	ldr	r2, [r3, #0]
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	60da      	str	r2, [r3, #12]
 800ecba:	4a73      	ldr	r2, [pc, #460]	; (800ee88 <tcp_process+0x7cc>)
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	6013      	str	r3, [r2, #0]
 800ecc0:	f003 f950 	bl	8011f64 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800ecc4:	e0d2      	b.n	800ee6c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	8b5b      	ldrh	r3, [r3, #26]
 800ecca:	f043 0302 	orr.w	r3, r3, #2
 800ecce:	b29a      	uxth	r2, r3
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	2208      	movs	r2, #8
 800ecd8:	751a      	strb	r2, [r3, #20]
      break;
 800ecda:	e0c7      	b.n	800ee6c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ecdc:	4b6b      	ldr	r3, [pc, #428]	; (800ee8c <tcp_process+0x7d0>)
 800ecde:	781b      	ldrb	r3, [r3, #0]
 800ece0:	f003 0310 	and.w	r3, r3, #16
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	f000 80c1 	beq.w	800ee6c <tcp_process+0x7b0>
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ecee:	4b68      	ldr	r3, [pc, #416]	; (800ee90 <tcp_process+0x7d4>)
 800ecf0:	681b      	ldr	r3, [r3, #0]
 800ecf2:	429a      	cmp	r2, r3
 800ecf4:	f040 80ba 	bne.w	800ee6c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	f040 80b5 	bne.w	800ee6c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	2206      	movs	r2, #6
 800ed06:	751a      	strb	r2, [r3, #20]
      break;
 800ed08:	e0b0      	b.n	800ee6c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800ed0a:	6878      	ldr	r0, [r7, #4]
 800ed0c:	f000 f9ca 	bl	800f0a4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800ed10:	4b60      	ldr	r3, [pc, #384]	; (800ee94 <tcp_process+0x7d8>)
 800ed12:	781b      	ldrb	r3, [r3, #0]
 800ed14:	f003 0320 	and.w	r3, r3, #32
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	f000 80a9 	beq.w	800ee70 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	8b5b      	ldrh	r3, [r3, #26]
 800ed22:	f043 0302 	orr.w	r3, r3, #2
 800ed26:	b29a      	uxth	r2, r3
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800ed2c:	6878      	ldr	r0, [r7, #4]
 800ed2e:	f7fe fd3b 	bl	800d7a8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800ed32:	4b59      	ldr	r3, [pc, #356]	; (800ee98 <tcp_process+0x7dc>)
 800ed34:	681b      	ldr	r3, [r3, #0]
 800ed36:	687a      	ldr	r2, [r7, #4]
 800ed38:	429a      	cmp	r2, r3
 800ed3a:	d105      	bne.n	800ed48 <tcp_process+0x68c>
 800ed3c:	4b56      	ldr	r3, [pc, #344]	; (800ee98 <tcp_process+0x7dc>)
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	68db      	ldr	r3, [r3, #12]
 800ed42:	4a55      	ldr	r2, [pc, #340]	; (800ee98 <tcp_process+0x7dc>)
 800ed44:	6013      	str	r3, [r2, #0]
 800ed46:	e013      	b.n	800ed70 <tcp_process+0x6b4>
 800ed48:	4b53      	ldr	r3, [pc, #332]	; (800ee98 <tcp_process+0x7dc>)
 800ed4a:	681b      	ldr	r3, [r3, #0]
 800ed4c:	613b      	str	r3, [r7, #16]
 800ed4e:	e00c      	b.n	800ed6a <tcp_process+0x6ae>
 800ed50:	693b      	ldr	r3, [r7, #16]
 800ed52:	68db      	ldr	r3, [r3, #12]
 800ed54:	687a      	ldr	r2, [r7, #4]
 800ed56:	429a      	cmp	r2, r3
 800ed58:	d104      	bne.n	800ed64 <tcp_process+0x6a8>
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	68da      	ldr	r2, [r3, #12]
 800ed5e:	693b      	ldr	r3, [r7, #16]
 800ed60:	60da      	str	r2, [r3, #12]
 800ed62:	e005      	b.n	800ed70 <tcp_process+0x6b4>
 800ed64:	693b      	ldr	r3, [r7, #16]
 800ed66:	68db      	ldr	r3, [r3, #12]
 800ed68:	613b      	str	r3, [r7, #16]
 800ed6a:	693b      	ldr	r3, [r7, #16]
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d1ef      	bne.n	800ed50 <tcp_process+0x694>
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	2200      	movs	r2, #0
 800ed74:	60da      	str	r2, [r3, #12]
 800ed76:	4b43      	ldr	r3, [pc, #268]	; (800ee84 <tcp_process+0x7c8>)
 800ed78:	2201      	movs	r2, #1
 800ed7a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	220a      	movs	r2, #10
 800ed80:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800ed82:	4b41      	ldr	r3, [pc, #260]	; (800ee88 <tcp_process+0x7cc>)
 800ed84:	681a      	ldr	r2, [r3, #0]
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	60da      	str	r2, [r3, #12]
 800ed8a:	4a3f      	ldr	r2, [pc, #252]	; (800ee88 <tcp_process+0x7cc>)
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	6013      	str	r3, [r2, #0]
 800ed90:	f003 f8e8 	bl	8011f64 <tcp_timer_needed>
      }
      break;
 800ed94:	e06c      	b.n	800ee70 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800ed96:	6878      	ldr	r0, [r7, #4]
 800ed98:	f000 f984 	bl	800f0a4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800ed9c:	4b3b      	ldr	r3, [pc, #236]	; (800ee8c <tcp_process+0x7d0>)
 800ed9e:	781b      	ldrb	r3, [r3, #0]
 800eda0:	f003 0310 	and.w	r3, r3, #16
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d065      	beq.n	800ee74 <tcp_process+0x7b8>
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800edac:	4b38      	ldr	r3, [pc, #224]	; (800ee90 <tcp_process+0x7d4>)
 800edae:	681b      	ldr	r3, [r3, #0]
 800edb0:	429a      	cmp	r2, r3
 800edb2:	d15f      	bne.n	800ee74 <tcp_process+0x7b8>
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800edb8:	2b00      	cmp	r3, #0
 800edba:	d15b      	bne.n	800ee74 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800edbc:	6878      	ldr	r0, [r7, #4]
 800edbe:	f7fe fcf3 	bl	800d7a8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800edc2:	4b35      	ldr	r3, [pc, #212]	; (800ee98 <tcp_process+0x7dc>)
 800edc4:	681b      	ldr	r3, [r3, #0]
 800edc6:	687a      	ldr	r2, [r7, #4]
 800edc8:	429a      	cmp	r2, r3
 800edca:	d105      	bne.n	800edd8 <tcp_process+0x71c>
 800edcc:	4b32      	ldr	r3, [pc, #200]	; (800ee98 <tcp_process+0x7dc>)
 800edce:	681b      	ldr	r3, [r3, #0]
 800edd0:	68db      	ldr	r3, [r3, #12]
 800edd2:	4a31      	ldr	r2, [pc, #196]	; (800ee98 <tcp_process+0x7dc>)
 800edd4:	6013      	str	r3, [r2, #0]
 800edd6:	e013      	b.n	800ee00 <tcp_process+0x744>
 800edd8:	4b2f      	ldr	r3, [pc, #188]	; (800ee98 <tcp_process+0x7dc>)
 800edda:	681b      	ldr	r3, [r3, #0]
 800eddc:	60fb      	str	r3, [r7, #12]
 800edde:	e00c      	b.n	800edfa <tcp_process+0x73e>
 800ede0:	68fb      	ldr	r3, [r7, #12]
 800ede2:	68db      	ldr	r3, [r3, #12]
 800ede4:	687a      	ldr	r2, [r7, #4]
 800ede6:	429a      	cmp	r2, r3
 800ede8:	d104      	bne.n	800edf4 <tcp_process+0x738>
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	68da      	ldr	r2, [r3, #12]
 800edee:	68fb      	ldr	r3, [r7, #12]
 800edf0:	60da      	str	r2, [r3, #12]
 800edf2:	e005      	b.n	800ee00 <tcp_process+0x744>
 800edf4:	68fb      	ldr	r3, [r7, #12]
 800edf6:	68db      	ldr	r3, [r3, #12]
 800edf8:	60fb      	str	r3, [r7, #12]
 800edfa:	68fb      	ldr	r3, [r7, #12]
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	d1ef      	bne.n	800ede0 <tcp_process+0x724>
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	2200      	movs	r2, #0
 800ee04:	60da      	str	r2, [r3, #12]
 800ee06:	4b1f      	ldr	r3, [pc, #124]	; (800ee84 <tcp_process+0x7c8>)
 800ee08:	2201      	movs	r2, #1
 800ee0a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	220a      	movs	r2, #10
 800ee10:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800ee12:	4b1d      	ldr	r3, [pc, #116]	; (800ee88 <tcp_process+0x7cc>)
 800ee14:	681a      	ldr	r2, [r3, #0]
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	60da      	str	r2, [r3, #12]
 800ee1a:	4a1b      	ldr	r2, [pc, #108]	; (800ee88 <tcp_process+0x7cc>)
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	6013      	str	r3, [r2, #0]
 800ee20:	f003 f8a0 	bl	8011f64 <tcp_timer_needed>
      }
      break;
 800ee24:	e026      	b.n	800ee74 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800ee26:	6878      	ldr	r0, [r7, #4]
 800ee28:	f000 f93c 	bl	800f0a4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800ee2c:	4b17      	ldr	r3, [pc, #92]	; (800ee8c <tcp_process+0x7d0>)
 800ee2e:	781b      	ldrb	r3, [r3, #0]
 800ee30:	f003 0310 	and.w	r3, r3, #16
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	d01f      	beq.n	800ee78 <tcp_process+0x7bc>
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ee3c:	4b14      	ldr	r3, [pc, #80]	; (800ee90 <tcp_process+0x7d4>)
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	429a      	cmp	r2, r3
 800ee42:	d119      	bne.n	800ee78 <tcp_process+0x7bc>
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d115      	bne.n	800ee78 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800ee4c:	4b11      	ldr	r3, [pc, #68]	; (800ee94 <tcp_process+0x7d8>)
 800ee4e:	781b      	ldrb	r3, [r3, #0]
 800ee50:	f043 0310 	orr.w	r3, r3, #16
 800ee54:	b2da      	uxtb	r2, r3
 800ee56:	4b0f      	ldr	r3, [pc, #60]	; (800ee94 <tcp_process+0x7d8>)
 800ee58:	701a      	strb	r2, [r3, #0]
      }
      break;
 800ee5a:	e00d      	b.n	800ee78 <tcp_process+0x7bc>
    default:
      break;
 800ee5c:	bf00      	nop
 800ee5e:	e00c      	b.n	800ee7a <tcp_process+0x7be>
      break;
 800ee60:	bf00      	nop
 800ee62:	e00a      	b.n	800ee7a <tcp_process+0x7be>
      break;
 800ee64:	bf00      	nop
 800ee66:	e008      	b.n	800ee7a <tcp_process+0x7be>
      break;
 800ee68:	bf00      	nop
 800ee6a:	e006      	b.n	800ee7a <tcp_process+0x7be>
      break;
 800ee6c:	bf00      	nop
 800ee6e:	e004      	b.n	800ee7a <tcp_process+0x7be>
      break;
 800ee70:	bf00      	nop
 800ee72:	e002      	b.n	800ee7a <tcp_process+0x7be>
      break;
 800ee74:	bf00      	nop
 800ee76:	e000      	b.n	800ee7a <tcp_process+0x7be>
      break;
 800ee78:	bf00      	nop
  }
  return ERR_OK;
 800ee7a:	2300      	movs	r3, #0
}
 800ee7c:	4618      	mov	r0, r3
 800ee7e:	3724      	adds	r7, #36	; 0x24
 800ee80:	46bd      	mov	sp, r7
 800ee82:	bd90      	pop	{r4, r7, pc}
 800ee84:	2000bda0 	.word	0x2000bda0
 800ee88:	2000bdb4 	.word	0x2000bdb4
 800ee8c:	20004af8 	.word	0x20004af8
 800ee90:	20004af0 	.word	0x20004af0
 800ee94:	20004af9 	.word	0x20004af9
 800ee98:	2000bda4 	.word	0x2000bda4

0800ee9c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800ee9c:	b590      	push	{r4, r7, lr}
 800ee9e:	b085      	sub	sp, #20
 800eea0:	af00      	add	r7, sp, #0
 800eea2:	6078      	str	r0, [r7, #4]
 800eea4:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	d106      	bne.n	800eeba <tcp_oos_insert_segment+0x1e>
 800eeac:	4b3b      	ldr	r3, [pc, #236]	; (800ef9c <tcp_oos_insert_segment+0x100>)
 800eeae:	f240 421f 	movw	r2, #1055	; 0x41f
 800eeb2:	493b      	ldr	r1, [pc, #236]	; (800efa0 <tcp_oos_insert_segment+0x104>)
 800eeb4:	483b      	ldr	r0, [pc, #236]	; (800efa4 <tcp_oos_insert_segment+0x108>)
 800eeb6:	f006 fae1 	bl	801547c <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	68db      	ldr	r3, [r3, #12]
 800eebe:	899b      	ldrh	r3, [r3, #12]
 800eec0:	b29b      	uxth	r3, r3
 800eec2:	4618      	mov	r0, r3
 800eec4:	f7fb f986 	bl	800a1d4 <lwip_htons>
 800eec8:	4603      	mov	r3, r0
 800eeca:	b2db      	uxtb	r3, r3
 800eecc:	f003 0301 	and.w	r3, r3, #1
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	d028      	beq.n	800ef26 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800eed4:	6838      	ldr	r0, [r7, #0]
 800eed6:	f7fe f997 	bl	800d208 <tcp_segs_free>
    next = NULL;
 800eeda:	2300      	movs	r3, #0
 800eedc:	603b      	str	r3, [r7, #0]
 800eede:	e056      	b.n	800ef8e <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800eee0:	683b      	ldr	r3, [r7, #0]
 800eee2:	68db      	ldr	r3, [r3, #12]
 800eee4:	899b      	ldrh	r3, [r3, #12]
 800eee6:	b29b      	uxth	r3, r3
 800eee8:	4618      	mov	r0, r3
 800eeea:	f7fb f973 	bl	800a1d4 <lwip_htons>
 800eeee:	4603      	mov	r3, r0
 800eef0:	b2db      	uxtb	r3, r3
 800eef2:	f003 0301 	and.w	r3, r3, #1
 800eef6:	2b00      	cmp	r3, #0
 800eef8:	d00d      	beq.n	800ef16 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	68db      	ldr	r3, [r3, #12]
 800eefe:	899b      	ldrh	r3, [r3, #12]
 800ef00:	b29c      	uxth	r4, r3
 800ef02:	2001      	movs	r0, #1
 800ef04:	f7fb f966 	bl	800a1d4 <lwip_htons>
 800ef08:	4603      	mov	r3, r0
 800ef0a:	461a      	mov	r2, r3
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	68db      	ldr	r3, [r3, #12]
 800ef10:	4322      	orrs	r2, r4
 800ef12:	b292      	uxth	r2, r2
 800ef14:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800ef16:	683b      	ldr	r3, [r7, #0]
 800ef18:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800ef1a:	683b      	ldr	r3, [r7, #0]
 800ef1c:	681b      	ldr	r3, [r3, #0]
 800ef1e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800ef20:	68f8      	ldr	r0, [r7, #12]
 800ef22:	f7fe f986 	bl	800d232 <tcp_seg_free>
    while (next &&
 800ef26:	683b      	ldr	r3, [r7, #0]
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d00e      	beq.n	800ef4a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	891b      	ldrh	r3, [r3, #8]
 800ef30:	461a      	mov	r2, r3
 800ef32:	4b1d      	ldr	r3, [pc, #116]	; (800efa8 <tcp_oos_insert_segment+0x10c>)
 800ef34:	681b      	ldr	r3, [r3, #0]
 800ef36:	441a      	add	r2, r3
 800ef38:	683b      	ldr	r3, [r7, #0]
 800ef3a:	68db      	ldr	r3, [r3, #12]
 800ef3c:	685b      	ldr	r3, [r3, #4]
 800ef3e:	6839      	ldr	r1, [r7, #0]
 800ef40:	8909      	ldrh	r1, [r1, #8]
 800ef42:	440b      	add	r3, r1
 800ef44:	1ad3      	subs	r3, r2, r3
    while (next &&
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	daca      	bge.n	800eee0 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800ef4a:	683b      	ldr	r3, [r7, #0]
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	d01e      	beq.n	800ef8e <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	891b      	ldrh	r3, [r3, #8]
 800ef54:	461a      	mov	r2, r3
 800ef56:	4b14      	ldr	r3, [pc, #80]	; (800efa8 <tcp_oos_insert_segment+0x10c>)
 800ef58:	681b      	ldr	r3, [r3, #0]
 800ef5a:	441a      	add	r2, r3
 800ef5c:	683b      	ldr	r3, [r7, #0]
 800ef5e:	68db      	ldr	r3, [r3, #12]
 800ef60:	685b      	ldr	r3, [r3, #4]
 800ef62:	1ad3      	subs	r3, r2, r3
    if (next &&
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	dd12      	ble.n	800ef8e <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800ef68:	683b      	ldr	r3, [r7, #0]
 800ef6a:	68db      	ldr	r3, [r3, #12]
 800ef6c:	685b      	ldr	r3, [r3, #4]
 800ef6e:	b29a      	uxth	r2, r3
 800ef70:	4b0d      	ldr	r3, [pc, #52]	; (800efa8 <tcp_oos_insert_segment+0x10c>)
 800ef72:	681b      	ldr	r3, [r3, #0]
 800ef74:	b29b      	uxth	r3, r3
 800ef76:	1ad3      	subs	r3, r2, r3
 800ef78:	b29a      	uxth	r2, r3
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	685a      	ldr	r2, [r3, #4]
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	891b      	ldrh	r3, [r3, #8]
 800ef86:	4619      	mov	r1, r3
 800ef88:	4610      	mov	r0, r2
 800ef8a:	f7fc fb49 	bl	800b620 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	683a      	ldr	r2, [r7, #0]
 800ef92:	601a      	str	r2, [r3, #0]
}
 800ef94:	bf00      	nop
 800ef96:	3714      	adds	r7, #20
 800ef98:	46bd      	mov	sp, r7
 800ef9a:	bd90      	pop	{r4, r7, pc}
 800ef9c:	08018120 	.word	0x08018120
 800efa0:	080183e0 	.word	0x080183e0
 800efa4:	0801816c 	.word	0x0801816c
 800efa8:	20004aec 	.word	0x20004aec

0800efac <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800efac:	b5b0      	push	{r4, r5, r7, lr}
 800efae:	b086      	sub	sp, #24
 800efb0:	af00      	add	r7, sp, #0
 800efb2:	60f8      	str	r0, [r7, #12]
 800efb4:	60b9      	str	r1, [r7, #8]
 800efb6:	607a      	str	r2, [r7, #4]
 800efb8:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800efba:	e03e      	b.n	800f03a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800efbc:	68bb      	ldr	r3, [r7, #8]
 800efbe:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800efc0:	68bb      	ldr	r3, [r7, #8]
 800efc2:	681b      	ldr	r3, [r3, #0]
 800efc4:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800efc6:	697b      	ldr	r3, [r7, #20]
 800efc8:	685b      	ldr	r3, [r3, #4]
 800efca:	4618      	mov	r0, r3
 800efcc:	f7fc fd3c 	bl	800ba48 <pbuf_clen>
 800efd0:	4603      	mov	r3, r0
 800efd2:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800efd4:	68fb      	ldr	r3, [r7, #12]
 800efd6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800efda:	8a7a      	ldrh	r2, [r7, #18]
 800efdc:	429a      	cmp	r2, r3
 800efde:	d906      	bls.n	800efee <tcp_free_acked_segments+0x42>
 800efe0:	4b2a      	ldr	r3, [pc, #168]	; (800f08c <tcp_free_acked_segments+0xe0>)
 800efe2:	f240 4257 	movw	r2, #1111	; 0x457
 800efe6:	492a      	ldr	r1, [pc, #168]	; (800f090 <tcp_free_acked_segments+0xe4>)
 800efe8:	482a      	ldr	r0, [pc, #168]	; (800f094 <tcp_free_acked_segments+0xe8>)
 800efea:	f006 fa47 	bl	801547c <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800efee:	68fb      	ldr	r3, [r7, #12]
 800eff0:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800eff4:	8a7b      	ldrh	r3, [r7, #18]
 800eff6:	1ad3      	subs	r3, r2, r3
 800eff8:	b29a      	uxth	r2, r3
 800effa:	68fb      	ldr	r3, [r7, #12]
 800effc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800f000:	697b      	ldr	r3, [r7, #20]
 800f002:	891a      	ldrh	r2, [r3, #8]
 800f004:	4b24      	ldr	r3, [pc, #144]	; (800f098 <tcp_free_acked_segments+0xec>)
 800f006:	881b      	ldrh	r3, [r3, #0]
 800f008:	4413      	add	r3, r2
 800f00a:	b29a      	uxth	r2, r3
 800f00c:	4b22      	ldr	r3, [pc, #136]	; (800f098 <tcp_free_acked_segments+0xec>)
 800f00e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800f010:	6978      	ldr	r0, [r7, #20]
 800f012:	f7fe f90e 	bl	800d232 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800f016:	68fb      	ldr	r3, [r7, #12]
 800f018:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	d00c      	beq.n	800f03a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800f020:	68bb      	ldr	r3, [r7, #8]
 800f022:	2b00      	cmp	r3, #0
 800f024:	d109      	bne.n	800f03a <tcp_free_acked_segments+0x8e>
 800f026:	683b      	ldr	r3, [r7, #0]
 800f028:	2b00      	cmp	r3, #0
 800f02a:	d106      	bne.n	800f03a <tcp_free_acked_segments+0x8e>
 800f02c:	4b17      	ldr	r3, [pc, #92]	; (800f08c <tcp_free_acked_segments+0xe0>)
 800f02e:	f240 4261 	movw	r2, #1121	; 0x461
 800f032:	491a      	ldr	r1, [pc, #104]	; (800f09c <tcp_free_acked_segments+0xf0>)
 800f034:	4817      	ldr	r0, [pc, #92]	; (800f094 <tcp_free_acked_segments+0xe8>)
 800f036:	f006 fa21 	bl	801547c <iprintf>
  while (seg_list != NULL &&
 800f03a:	68bb      	ldr	r3, [r7, #8]
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	d020      	beq.n	800f082 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800f040:	68bb      	ldr	r3, [r7, #8]
 800f042:	68db      	ldr	r3, [r3, #12]
 800f044:	685b      	ldr	r3, [r3, #4]
 800f046:	4618      	mov	r0, r3
 800f048:	f7fb f8d9 	bl	800a1fe <lwip_htonl>
 800f04c:	4604      	mov	r4, r0
 800f04e:	68bb      	ldr	r3, [r7, #8]
 800f050:	891b      	ldrh	r3, [r3, #8]
 800f052:	461d      	mov	r5, r3
 800f054:	68bb      	ldr	r3, [r7, #8]
 800f056:	68db      	ldr	r3, [r3, #12]
 800f058:	899b      	ldrh	r3, [r3, #12]
 800f05a:	b29b      	uxth	r3, r3
 800f05c:	4618      	mov	r0, r3
 800f05e:	f7fb f8b9 	bl	800a1d4 <lwip_htons>
 800f062:	4603      	mov	r3, r0
 800f064:	b2db      	uxtb	r3, r3
 800f066:	f003 0303 	and.w	r3, r3, #3
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	d001      	beq.n	800f072 <tcp_free_acked_segments+0xc6>
 800f06e:	2301      	movs	r3, #1
 800f070:	e000      	b.n	800f074 <tcp_free_acked_segments+0xc8>
 800f072:	2300      	movs	r3, #0
 800f074:	442b      	add	r3, r5
 800f076:	18e2      	adds	r2, r4, r3
 800f078:	4b09      	ldr	r3, [pc, #36]	; (800f0a0 <tcp_free_acked_segments+0xf4>)
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800f07e:	2b00      	cmp	r3, #0
 800f080:	dd9c      	ble.n	800efbc <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800f082:	68bb      	ldr	r3, [r7, #8]
}
 800f084:	4618      	mov	r0, r3
 800f086:	3718      	adds	r7, #24
 800f088:	46bd      	mov	sp, r7
 800f08a:	bdb0      	pop	{r4, r5, r7, pc}
 800f08c:	08018120 	.word	0x08018120
 800f090:	08018408 	.word	0x08018408
 800f094:	0801816c 	.word	0x0801816c
 800f098:	20004af4 	.word	0x20004af4
 800f09c:	08018430 	.word	0x08018430
 800f0a0:	20004af0 	.word	0x20004af0

0800f0a4 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800f0a4:	b5b0      	push	{r4, r5, r7, lr}
 800f0a6:	b094      	sub	sp, #80	; 0x50
 800f0a8:	af00      	add	r7, sp, #0
 800f0aa:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800f0ac:	2300      	movs	r3, #0
 800f0ae:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	d106      	bne.n	800f0c4 <tcp_receive+0x20>
 800f0b6:	4ba6      	ldr	r3, [pc, #664]	; (800f350 <tcp_receive+0x2ac>)
 800f0b8:	f240 427b 	movw	r2, #1147	; 0x47b
 800f0bc:	49a5      	ldr	r1, [pc, #660]	; (800f354 <tcp_receive+0x2b0>)
 800f0be:	48a6      	ldr	r0, [pc, #664]	; (800f358 <tcp_receive+0x2b4>)
 800f0c0:	f006 f9dc 	bl	801547c <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	7d1b      	ldrb	r3, [r3, #20]
 800f0c8:	2b03      	cmp	r3, #3
 800f0ca:	d806      	bhi.n	800f0da <tcp_receive+0x36>
 800f0cc:	4ba0      	ldr	r3, [pc, #640]	; (800f350 <tcp_receive+0x2ac>)
 800f0ce:	f240 427c 	movw	r2, #1148	; 0x47c
 800f0d2:	49a2      	ldr	r1, [pc, #648]	; (800f35c <tcp_receive+0x2b8>)
 800f0d4:	48a0      	ldr	r0, [pc, #640]	; (800f358 <tcp_receive+0x2b4>)
 800f0d6:	f006 f9d1 	bl	801547c <iprintf>

  if (flags & TCP_ACK) {
 800f0da:	4ba1      	ldr	r3, [pc, #644]	; (800f360 <tcp_receive+0x2bc>)
 800f0dc:	781b      	ldrb	r3, [r3, #0]
 800f0de:	f003 0310 	and.w	r3, r3, #16
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	f000 8263 	beq.w	800f5ae <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f0ee:	461a      	mov	r2, r3
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f0f4:	4413      	add	r3, r2
 800f0f6:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f0fc:	4b99      	ldr	r3, [pc, #612]	; (800f364 <tcp_receive+0x2c0>)
 800f0fe:	681b      	ldr	r3, [r3, #0]
 800f100:	1ad3      	subs	r3, r2, r3
 800f102:	2b00      	cmp	r3, #0
 800f104:	db1b      	blt.n	800f13e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f10a:	4b96      	ldr	r3, [pc, #600]	; (800f364 <tcp_receive+0x2c0>)
 800f10c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800f10e:	429a      	cmp	r2, r3
 800f110:	d106      	bne.n	800f120 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f116:	4b94      	ldr	r3, [pc, #592]	; (800f368 <tcp_receive+0x2c4>)
 800f118:	681b      	ldr	r3, [r3, #0]
 800f11a:	1ad3      	subs	r3, r2, r3
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	db0e      	blt.n	800f13e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f124:	4b90      	ldr	r3, [pc, #576]	; (800f368 <tcp_receive+0x2c4>)
 800f126:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f128:	429a      	cmp	r2, r3
 800f12a:	d125      	bne.n	800f178 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800f12c:	4b8f      	ldr	r3, [pc, #572]	; (800f36c <tcp_receive+0x2c8>)
 800f12e:	681b      	ldr	r3, [r3, #0]
 800f130:	89db      	ldrh	r3, [r3, #14]
 800f132:	b29a      	uxth	r2, r3
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f13a:	429a      	cmp	r2, r3
 800f13c:	d91c      	bls.n	800f178 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800f13e:	4b8b      	ldr	r3, [pc, #556]	; (800f36c <tcp_receive+0x2c8>)
 800f140:	681b      	ldr	r3, [r3, #0]
 800f142:	89db      	ldrh	r3, [r3, #14]
 800f144:	b29a      	uxth	r2, r3
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f158:	429a      	cmp	r2, r3
 800f15a:	d205      	bcs.n	800f168 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800f168:	4b7e      	ldr	r3, [pc, #504]	; (800f364 <tcp_receive+0x2c0>)
 800f16a:	681a      	ldr	r2, [r3, #0]
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800f170:	4b7d      	ldr	r3, [pc, #500]	; (800f368 <tcp_receive+0x2c4>)
 800f172:	681a      	ldr	r2, [r3, #0]
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800f178:	4b7b      	ldr	r3, [pc, #492]	; (800f368 <tcp_receive+0x2c4>)
 800f17a:	681a      	ldr	r2, [r3, #0]
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f180:	1ad3      	subs	r3, r2, r3
 800f182:	2b00      	cmp	r3, #0
 800f184:	dc58      	bgt.n	800f238 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800f186:	4b7a      	ldr	r3, [pc, #488]	; (800f370 <tcp_receive+0x2cc>)
 800f188:	881b      	ldrh	r3, [r3, #0]
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	d14b      	bne.n	800f226 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f192:	687a      	ldr	r2, [r7, #4]
 800f194:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800f198:	4413      	add	r3, r2
 800f19a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f19c:	429a      	cmp	r2, r3
 800f19e:	d142      	bne.n	800f226 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	db3d      	blt.n	800f226 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f1ae:	4b6e      	ldr	r3, [pc, #440]	; (800f368 <tcp_receive+0x2c4>)
 800f1b0:	681b      	ldr	r3, [r3, #0]
 800f1b2:	429a      	cmp	r2, r3
 800f1b4:	d137      	bne.n	800f226 <tcp_receive+0x182>
              found_dupack = 1;
 800f1b6:	2301      	movs	r3, #1
 800f1b8:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f1c0:	2bff      	cmp	r3, #255	; 0xff
 800f1c2:	d007      	beq.n	800f1d4 <tcp_receive+0x130>
                ++pcb->dupacks;
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f1ca:	3301      	adds	r3, #1
 800f1cc:	b2da      	uxtb	r2, r3
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f1da:	2b03      	cmp	r3, #3
 800f1dc:	d91b      	bls.n	800f216 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f1e8:	4413      	add	r3, r2
 800f1ea:	b29a      	uxth	r2, r3
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f1f2:	429a      	cmp	r2, r3
 800f1f4:	d30a      	bcc.n	800f20c <tcp_receive+0x168>
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f200:	4413      	add	r3, r2
 800f202:	b29a      	uxth	r2, r3
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f20a:	e004      	b.n	800f216 <tcp_receive+0x172>
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f212:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f21c:	2b02      	cmp	r3, #2
 800f21e:	d902      	bls.n	800f226 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800f220:	6878      	ldr	r0, [r7, #4]
 800f222:	f002 fb41 	bl	80118a8 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800f226:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f228:	2b00      	cmp	r3, #0
 800f22a:	f040 8160 	bne.w	800f4ee <tcp_receive+0x44a>
        pcb->dupacks = 0;
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	2200      	movs	r2, #0
 800f232:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f236:	e15a      	b.n	800f4ee <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f238:	4b4b      	ldr	r3, [pc, #300]	; (800f368 <tcp_receive+0x2c4>)
 800f23a:	681a      	ldr	r2, [r3, #0]
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f240:	1ad3      	subs	r3, r2, r3
 800f242:	3b01      	subs	r3, #1
 800f244:	2b00      	cmp	r3, #0
 800f246:	f2c0 814d 	blt.w	800f4e4 <tcp_receive+0x440>
 800f24a:	4b47      	ldr	r3, [pc, #284]	; (800f368 <tcp_receive+0x2c4>)
 800f24c:	681a      	ldr	r2, [r3, #0]
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f252:	1ad3      	subs	r3, r2, r3
 800f254:	2b00      	cmp	r3, #0
 800f256:	f300 8145 	bgt.w	800f4e4 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	8b5b      	ldrh	r3, [r3, #26]
 800f25e:	f003 0304 	and.w	r3, r3, #4
 800f262:	2b00      	cmp	r3, #0
 800f264:	d010      	beq.n	800f288 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	8b5b      	ldrh	r3, [r3, #26]
 800f26a:	f023 0304 	bic.w	r3, r3, #4
 800f26e:	b29a      	uxth	r2, r3
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	2200      	movs	r2, #0
 800f284:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	2200      	movs	r2, #0
 800f28c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f296:	10db      	asrs	r3, r3, #3
 800f298:	b21b      	sxth	r3, r3
 800f29a:	b29a      	uxth	r2, r3
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f2a2:	b29b      	uxth	r3, r3
 800f2a4:	4413      	add	r3, r2
 800f2a6:	b29b      	uxth	r3, r3
 800f2a8:	b21a      	sxth	r2, r3
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800f2b0:	4b2d      	ldr	r3, [pc, #180]	; (800f368 <tcp_receive+0x2c4>)
 800f2b2:	681b      	ldr	r3, [r3, #0]
 800f2b4:	b29a      	uxth	r2, r3
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f2ba:	b29b      	uxth	r3, r3
 800f2bc:	1ad3      	subs	r3, r2, r3
 800f2be:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	2200      	movs	r2, #0
 800f2c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800f2c8:	4b27      	ldr	r3, [pc, #156]	; (800f368 <tcp_receive+0x2c4>)
 800f2ca:	681a      	ldr	r2, [r3, #0]
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	7d1b      	ldrb	r3, [r3, #20]
 800f2d4:	2b03      	cmp	r3, #3
 800f2d6:	f240 8096 	bls.w	800f406 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800f2e6:	429a      	cmp	r2, r3
 800f2e8:	d244      	bcs.n	800f374 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	8b5b      	ldrh	r3, [r3, #26]
 800f2ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	d001      	beq.n	800f2fa <tcp_receive+0x256>
 800f2f6:	2301      	movs	r3, #1
 800f2f8:	e000      	b.n	800f2fc <tcp_receive+0x258>
 800f2fa:	2302      	movs	r3, #2
 800f2fc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800f300:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800f304:	b29a      	uxth	r2, r3
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f30a:	fb12 f303 	smulbb	r3, r2, r3
 800f30e:	b29b      	uxth	r3, r3
 800f310:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f312:	4293      	cmp	r3, r2
 800f314:	bf28      	it	cs
 800f316:	4613      	movcs	r3, r2
 800f318:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f320:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f322:	4413      	add	r3, r2
 800f324:	b29a      	uxth	r2, r3
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f32c:	429a      	cmp	r2, r3
 800f32e:	d309      	bcc.n	800f344 <tcp_receive+0x2a0>
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f336:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f338:	4413      	add	r3, r2
 800f33a:	b29a      	uxth	r2, r3
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f342:	e060      	b.n	800f406 <tcp_receive+0x362>
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f34a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f34e:	e05a      	b.n	800f406 <tcp_receive+0x362>
 800f350:	08018120 	.word	0x08018120
 800f354:	08018450 	.word	0x08018450
 800f358:	0801816c 	.word	0x0801816c
 800f35c:	0801846c 	.word	0x0801846c
 800f360:	20004af8 	.word	0x20004af8
 800f364:	20004aec 	.word	0x20004aec
 800f368:	20004af0 	.word	0x20004af0
 800f36c:	20004adc 	.word	0x20004adc
 800f370:	20004af6 	.word	0x20004af6
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f37a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f37c:	4413      	add	r3, r2
 800f37e:	b29a      	uxth	r2, r3
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f386:	429a      	cmp	r2, r3
 800f388:	d309      	bcc.n	800f39e <tcp_receive+0x2fa>
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f390:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f392:	4413      	add	r3, r2
 800f394:	b29a      	uxth	r2, r3
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f39c:	e004      	b.n	800f3a8 <tcp_receive+0x304>
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f3a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f3b4:	429a      	cmp	r2, r3
 800f3b6:	d326      	bcc.n	800f406 <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f3c4:	1ad3      	subs	r3, r2, r3
 800f3c6:	b29a      	uxth	r2, r3
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f3d8:	4413      	add	r3, r2
 800f3da:	b29a      	uxth	r2, r3
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f3e2:	429a      	cmp	r2, r3
 800f3e4:	d30a      	bcc.n	800f3fc <tcp_receive+0x358>
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f3f0:	4413      	add	r3, r2
 800f3f2:	b29a      	uxth	r2, r3
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f3fa:	e004      	b.n	800f406 <tcp_receive+0x362>
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f402:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f40e:	4a98      	ldr	r2, [pc, #608]	; (800f670 <tcp_receive+0x5cc>)
 800f410:	6878      	ldr	r0, [r7, #4]
 800f412:	f7ff fdcb 	bl	800efac <tcp_free_acked_segments>
 800f416:	4602      	mov	r2, r0
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f424:	4a93      	ldr	r2, [pc, #588]	; (800f674 <tcp_receive+0x5d0>)
 800f426:	6878      	ldr	r0, [r7, #4]
 800f428:	f7ff fdc0 	bl	800efac <tcp_free_acked_segments>
 800f42c:	4602      	mov	r2, r0
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f436:	2b00      	cmp	r3, #0
 800f438:	d104      	bne.n	800f444 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f440:	861a      	strh	r2, [r3, #48]	; 0x30
 800f442:	e002      	b.n	800f44a <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	2200      	movs	r2, #0
 800f448:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	2200      	movs	r2, #0
 800f44e:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f454:	2b00      	cmp	r3, #0
 800f456:	d103      	bne.n	800f460 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	2200      	movs	r2, #0
 800f45c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800f466:	4b84      	ldr	r3, [pc, #528]	; (800f678 <tcp_receive+0x5d4>)
 800f468:	881b      	ldrh	r3, [r3, #0]
 800f46a:	4413      	add	r3, r2
 800f46c:	b29a      	uxth	r2, r3
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	8b5b      	ldrh	r3, [r3, #26]
 800f478:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	d035      	beq.n	800f4ec <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f484:	2b00      	cmp	r3, #0
 800f486:	d118      	bne.n	800f4ba <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	d00c      	beq.n	800f4aa <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f498:	68db      	ldr	r3, [r3, #12]
 800f49a:	685b      	ldr	r3, [r3, #4]
 800f49c:	4618      	mov	r0, r3
 800f49e:	f7fa feae 	bl	800a1fe <lwip_htonl>
 800f4a2:	4603      	mov	r3, r0
 800f4a4:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	dc20      	bgt.n	800f4ec <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	8b5b      	ldrh	r3, [r3, #26]
 800f4ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f4b2:	b29a      	uxth	r2, r3
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f4b8:	e018      	b.n	800f4ec <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f4c2:	68db      	ldr	r3, [r3, #12]
 800f4c4:	685b      	ldr	r3, [r3, #4]
 800f4c6:	4618      	mov	r0, r3
 800f4c8:	f7fa fe99 	bl	800a1fe <lwip_htonl>
 800f4cc:	4603      	mov	r3, r0
 800f4ce:	1ae3      	subs	r3, r4, r3
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	dc0b      	bgt.n	800f4ec <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	8b5b      	ldrh	r3, [r3, #26]
 800f4d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f4dc:	b29a      	uxth	r2, r3
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f4e2:	e003      	b.n	800f4ec <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800f4e4:	6878      	ldr	r0, [r7, #4]
 800f4e6:	f002 fbcd 	bl	8011c84 <tcp_send_empty_ack>
 800f4ea:	e000      	b.n	800f4ee <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f4ec:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f4f2:	2b00      	cmp	r3, #0
 800f4f4:	d05b      	beq.n	800f5ae <tcp_receive+0x50a>
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f4fa:	4b60      	ldr	r3, [pc, #384]	; (800f67c <tcp_receive+0x5d8>)
 800f4fc:	681b      	ldr	r3, [r3, #0]
 800f4fe:	1ad3      	subs	r3, r2, r3
 800f500:	2b00      	cmp	r3, #0
 800f502:	da54      	bge.n	800f5ae <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800f504:	4b5e      	ldr	r3, [pc, #376]	; (800f680 <tcp_receive+0x5dc>)
 800f506:	681b      	ldr	r3, [r3, #0]
 800f508:	b29a      	uxth	r2, r3
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f50e:	b29b      	uxth	r3, r3
 800f510:	1ad3      	subs	r3, r2, r3
 800f512:	b29b      	uxth	r3, r3
 800f514:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800f518:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f522:	10db      	asrs	r3, r3, #3
 800f524:	b21b      	sxth	r3, r3
 800f526:	b29b      	uxth	r3, r3
 800f528:	1ad3      	subs	r3, r2, r3
 800f52a:	b29b      	uxth	r3, r3
 800f52c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f536:	b29a      	uxth	r2, r3
 800f538:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f53c:	4413      	add	r3, r2
 800f53e:	b29b      	uxth	r3, r3
 800f540:	b21a      	sxth	r2, r3
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800f546:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800f54a:	2b00      	cmp	r3, #0
 800f54c:	da05      	bge.n	800f55a <tcp_receive+0x4b6>
        m = (s16_t) - m;
 800f54e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f552:	425b      	negs	r3, r3
 800f554:	b29b      	uxth	r3, r3
 800f556:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800f55a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f564:	109b      	asrs	r3, r3, #2
 800f566:	b21b      	sxth	r3, r3
 800f568:	b29b      	uxth	r3, r3
 800f56a:	1ad3      	subs	r3, r2, r3
 800f56c:	b29b      	uxth	r3, r3
 800f56e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f578:	b29a      	uxth	r2, r3
 800f57a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f57e:	4413      	add	r3, r2
 800f580:	b29b      	uxth	r3, r3
 800f582:	b21a      	sxth	r2, r3
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f58e:	10db      	asrs	r3, r3, #3
 800f590:	b21b      	sxth	r3, r3
 800f592:	b29a      	uxth	r2, r3
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f59a:	b29b      	uxth	r3, r3
 800f59c:	4413      	add	r3, r2
 800f59e:	b29b      	uxth	r3, r3
 800f5a0:	b21a      	sxth	r2, r3
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	2200      	movs	r2, #0
 800f5ac:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800f5ae:	4b35      	ldr	r3, [pc, #212]	; (800f684 <tcp_receive+0x5e0>)
 800f5b0:	881b      	ldrh	r3, [r3, #0]
 800f5b2:	2b00      	cmp	r3, #0
 800f5b4:	f000 84e1 	beq.w	800ff7a <tcp_receive+0xed6>
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	7d1b      	ldrb	r3, [r3, #20]
 800f5bc:	2b06      	cmp	r3, #6
 800f5be:	f200 84dc 	bhi.w	800ff7a <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f5c6:	4b30      	ldr	r3, [pc, #192]	; (800f688 <tcp_receive+0x5e4>)
 800f5c8:	681b      	ldr	r3, [r3, #0]
 800f5ca:	1ad3      	subs	r3, r2, r3
 800f5cc:	3b01      	subs	r3, #1
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	f2c0 808e 	blt.w	800f6f0 <tcp_receive+0x64c>
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f5d8:	4b2a      	ldr	r3, [pc, #168]	; (800f684 <tcp_receive+0x5e0>)
 800f5da:	881b      	ldrh	r3, [r3, #0]
 800f5dc:	4619      	mov	r1, r3
 800f5de:	4b2a      	ldr	r3, [pc, #168]	; (800f688 <tcp_receive+0x5e4>)
 800f5e0:	681b      	ldr	r3, [r3, #0]
 800f5e2:	440b      	add	r3, r1
 800f5e4:	1ad3      	subs	r3, r2, r3
 800f5e6:	3301      	adds	r3, #1
 800f5e8:	2b00      	cmp	r3, #0
 800f5ea:	f300 8081 	bgt.w	800f6f0 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800f5ee:	4b27      	ldr	r3, [pc, #156]	; (800f68c <tcp_receive+0x5e8>)
 800f5f0:	685b      	ldr	r3, [r3, #4]
 800f5f2:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f5f8:	4b23      	ldr	r3, [pc, #140]	; (800f688 <tcp_receive+0x5e4>)
 800f5fa:	681b      	ldr	r3, [r3, #0]
 800f5fc:	1ad3      	subs	r3, r2, r3
 800f5fe:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800f600:	4b22      	ldr	r3, [pc, #136]	; (800f68c <tcp_receive+0x5e8>)
 800f602:	685b      	ldr	r3, [r3, #4]
 800f604:	2b00      	cmp	r3, #0
 800f606:	d106      	bne.n	800f616 <tcp_receive+0x572>
 800f608:	4b21      	ldr	r3, [pc, #132]	; (800f690 <tcp_receive+0x5ec>)
 800f60a:	f240 5294 	movw	r2, #1428	; 0x594
 800f60e:	4921      	ldr	r1, [pc, #132]	; (800f694 <tcp_receive+0x5f0>)
 800f610:	4821      	ldr	r0, [pc, #132]	; (800f698 <tcp_receive+0x5f4>)
 800f612:	f005 ff33 	bl	801547c <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800f616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f618:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800f61c:	4293      	cmp	r3, r2
 800f61e:	d906      	bls.n	800f62e <tcp_receive+0x58a>
 800f620:	4b1b      	ldr	r3, [pc, #108]	; (800f690 <tcp_receive+0x5ec>)
 800f622:	f240 5295 	movw	r2, #1429	; 0x595
 800f626:	491d      	ldr	r1, [pc, #116]	; (800f69c <tcp_receive+0x5f8>)
 800f628:	481b      	ldr	r0, [pc, #108]	; (800f698 <tcp_receive+0x5f4>)
 800f62a:	f005 ff27 	bl	801547c <iprintf>
      off = (u16_t)off32;
 800f62e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f630:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800f634:	4b15      	ldr	r3, [pc, #84]	; (800f68c <tcp_receive+0x5e8>)
 800f636:	685b      	ldr	r3, [r3, #4]
 800f638:	891b      	ldrh	r3, [r3, #8]
 800f63a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f63e:	429a      	cmp	r2, r3
 800f640:	d906      	bls.n	800f650 <tcp_receive+0x5ac>
 800f642:	4b13      	ldr	r3, [pc, #76]	; (800f690 <tcp_receive+0x5ec>)
 800f644:	f240 5297 	movw	r2, #1431	; 0x597
 800f648:	4915      	ldr	r1, [pc, #84]	; (800f6a0 <tcp_receive+0x5fc>)
 800f64a:	4813      	ldr	r0, [pc, #76]	; (800f698 <tcp_receive+0x5f4>)
 800f64c:	f005 ff16 	bl	801547c <iprintf>
      inseg.len -= off;
 800f650:	4b0e      	ldr	r3, [pc, #56]	; (800f68c <tcp_receive+0x5e8>)
 800f652:	891a      	ldrh	r2, [r3, #8]
 800f654:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f658:	1ad3      	subs	r3, r2, r3
 800f65a:	b29a      	uxth	r2, r3
 800f65c:	4b0b      	ldr	r3, [pc, #44]	; (800f68c <tcp_receive+0x5e8>)
 800f65e:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800f660:	4b0a      	ldr	r3, [pc, #40]	; (800f68c <tcp_receive+0x5e8>)
 800f662:	685b      	ldr	r3, [r3, #4]
 800f664:	891a      	ldrh	r2, [r3, #8]
 800f666:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f66a:	1ad3      	subs	r3, r2, r3
 800f66c:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800f66e:	e029      	b.n	800f6c4 <tcp_receive+0x620>
 800f670:	08018488 	.word	0x08018488
 800f674:	08018490 	.word	0x08018490
 800f678:	20004af4 	.word	0x20004af4
 800f67c:	20004af0 	.word	0x20004af0
 800f680:	2000bda8 	.word	0x2000bda8
 800f684:	20004af6 	.word	0x20004af6
 800f688:	20004aec 	.word	0x20004aec
 800f68c:	20004acc 	.word	0x20004acc
 800f690:	08018120 	.word	0x08018120
 800f694:	08018498 	.word	0x08018498
 800f698:	0801816c 	.word	0x0801816c
 800f69c:	080184a8 	.word	0x080184a8
 800f6a0:	080184b8 	.word	0x080184b8
        off -= p->len;
 800f6a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f6a6:	895b      	ldrh	r3, [r3, #10]
 800f6a8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f6ac:	1ad3      	subs	r3, r2, r3
 800f6ae:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800f6b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f6b4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800f6b6:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800f6b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f6ba:	2200      	movs	r2, #0
 800f6bc:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800f6be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f6c0:	681b      	ldr	r3, [r3, #0]
 800f6c2:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800f6c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f6c6:	895b      	ldrh	r3, [r3, #10]
 800f6c8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f6cc:	429a      	cmp	r2, r3
 800f6ce:	d8e9      	bhi.n	800f6a4 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800f6d0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f6d4:	4619      	mov	r1, r3
 800f6d6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f6d8:	f7fc f8a2 	bl	800b820 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6e0:	4a91      	ldr	r2, [pc, #580]	; (800f928 <tcp_receive+0x884>)
 800f6e2:	6013      	str	r3, [r2, #0]
 800f6e4:	4b91      	ldr	r3, [pc, #580]	; (800f92c <tcp_receive+0x888>)
 800f6e6:	68db      	ldr	r3, [r3, #12]
 800f6e8:	4a8f      	ldr	r2, [pc, #572]	; (800f928 <tcp_receive+0x884>)
 800f6ea:	6812      	ldr	r2, [r2, #0]
 800f6ec:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800f6ee:	e00d      	b.n	800f70c <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800f6f0:	4b8d      	ldr	r3, [pc, #564]	; (800f928 <tcp_receive+0x884>)
 800f6f2:	681a      	ldr	r2, [r3, #0]
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6f8:	1ad3      	subs	r3, r2, r3
 800f6fa:	2b00      	cmp	r3, #0
 800f6fc:	da06      	bge.n	800f70c <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	8b5b      	ldrh	r3, [r3, #26]
 800f702:	f043 0302 	orr.w	r3, r3, #2
 800f706:	b29a      	uxth	r2, r3
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800f70c:	4b86      	ldr	r3, [pc, #536]	; (800f928 <tcp_receive+0x884>)
 800f70e:	681a      	ldr	r2, [r3, #0]
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f714:	1ad3      	subs	r3, r2, r3
 800f716:	2b00      	cmp	r3, #0
 800f718:	f2c0 842a 	blt.w	800ff70 <tcp_receive+0xecc>
 800f71c:	4b82      	ldr	r3, [pc, #520]	; (800f928 <tcp_receive+0x884>)
 800f71e:	681a      	ldr	r2, [r3, #0]
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f724:	6879      	ldr	r1, [r7, #4]
 800f726:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f728:	440b      	add	r3, r1
 800f72a:	1ad3      	subs	r3, r2, r3
 800f72c:	3301      	adds	r3, #1
 800f72e:	2b00      	cmp	r3, #0
 800f730:	f300 841e 	bgt.w	800ff70 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f738:	4b7b      	ldr	r3, [pc, #492]	; (800f928 <tcp_receive+0x884>)
 800f73a:	681b      	ldr	r3, [r3, #0]
 800f73c:	429a      	cmp	r2, r3
 800f73e:	f040 829a 	bne.w	800fc76 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800f742:	4b7a      	ldr	r3, [pc, #488]	; (800f92c <tcp_receive+0x888>)
 800f744:	891c      	ldrh	r4, [r3, #8]
 800f746:	4b79      	ldr	r3, [pc, #484]	; (800f92c <tcp_receive+0x888>)
 800f748:	68db      	ldr	r3, [r3, #12]
 800f74a:	899b      	ldrh	r3, [r3, #12]
 800f74c:	b29b      	uxth	r3, r3
 800f74e:	4618      	mov	r0, r3
 800f750:	f7fa fd40 	bl	800a1d4 <lwip_htons>
 800f754:	4603      	mov	r3, r0
 800f756:	b2db      	uxtb	r3, r3
 800f758:	f003 0303 	and.w	r3, r3, #3
 800f75c:	2b00      	cmp	r3, #0
 800f75e:	d001      	beq.n	800f764 <tcp_receive+0x6c0>
 800f760:	2301      	movs	r3, #1
 800f762:	e000      	b.n	800f766 <tcp_receive+0x6c2>
 800f764:	2300      	movs	r3, #0
 800f766:	4423      	add	r3, r4
 800f768:	b29a      	uxth	r2, r3
 800f76a:	4b71      	ldr	r3, [pc, #452]	; (800f930 <tcp_receive+0x88c>)
 800f76c:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f772:	4b6f      	ldr	r3, [pc, #444]	; (800f930 <tcp_receive+0x88c>)
 800f774:	881b      	ldrh	r3, [r3, #0]
 800f776:	429a      	cmp	r2, r3
 800f778:	d275      	bcs.n	800f866 <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f77a:	4b6c      	ldr	r3, [pc, #432]	; (800f92c <tcp_receive+0x888>)
 800f77c:	68db      	ldr	r3, [r3, #12]
 800f77e:	899b      	ldrh	r3, [r3, #12]
 800f780:	b29b      	uxth	r3, r3
 800f782:	4618      	mov	r0, r3
 800f784:	f7fa fd26 	bl	800a1d4 <lwip_htons>
 800f788:	4603      	mov	r3, r0
 800f78a:	b2db      	uxtb	r3, r3
 800f78c:	f003 0301 	and.w	r3, r3, #1
 800f790:	2b00      	cmp	r3, #0
 800f792:	d01f      	beq.n	800f7d4 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800f794:	4b65      	ldr	r3, [pc, #404]	; (800f92c <tcp_receive+0x888>)
 800f796:	68db      	ldr	r3, [r3, #12]
 800f798:	899b      	ldrh	r3, [r3, #12]
 800f79a:	b29b      	uxth	r3, r3
 800f79c:	b21b      	sxth	r3, r3
 800f79e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800f7a2:	b21c      	sxth	r4, r3
 800f7a4:	4b61      	ldr	r3, [pc, #388]	; (800f92c <tcp_receive+0x888>)
 800f7a6:	68db      	ldr	r3, [r3, #12]
 800f7a8:	899b      	ldrh	r3, [r3, #12]
 800f7aa:	b29b      	uxth	r3, r3
 800f7ac:	4618      	mov	r0, r3
 800f7ae:	f7fa fd11 	bl	800a1d4 <lwip_htons>
 800f7b2:	4603      	mov	r3, r0
 800f7b4:	b2db      	uxtb	r3, r3
 800f7b6:	b29b      	uxth	r3, r3
 800f7b8:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800f7bc:	b29b      	uxth	r3, r3
 800f7be:	4618      	mov	r0, r3
 800f7c0:	f7fa fd08 	bl	800a1d4 <lwip_htons>
 800f7c4:	4603      	mov	r3, r0
 800f7c6:	b21b      	sxth	r3, r3
 800f7c8:	4323      	orrs	r3, r4
 800f7ca:	b21a      	sxth	r2, r3
 800f7cc:	4b57      	ldr	r3, [pc, #348]	; (800f92c <tcp_receive+0x888>)
 800f7ce:	68db      	ldr	r3, [r3, #12]
 800f7d0:	b292      	uxth	r2, r2
 800f7d2:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f7d8:	4b54      	ldr	r3, [pc, #336]	; (800f92c <tcp_receive+0x888>)
 800f7da:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800f7dc:	4b53      	ldr	r3, [pc, #332]	; (800f92c <tcp_receive+0x888>)
 800f7de:	68db      	ldr	r3, [r3, #12]
 800f7e0:	899b      	ldrh	r3, [r3, #12]
 800f7e2:	b29b      	uxth	r3, r3
 800f7e4:	4618      	mov	r0, r3
 800f7e6:	f7fa fcf5 	bl	800a1d4 <lwip_htons>
 800f7ea:	4603      	mov	r3, r0
 800f7ec:	b2db      	uxtb	r3, r3
 800f7ee:	f003 0302 	and.w	r3, r3, #2
 800f7f2:	2b00      	cmp	r3, #0
 800f7f4:	d005      	beq.n	800f802 <tcp_receive+0x75e>
            inseg.len -= 1;
 800f7f6:	4b4d      	ldr	r3, [pc, #308]	; (800f92c <tcp_receive+0x888>)
 800f7f8:	891b      	ldrh	r3, [r3, #8]
 800f7fa:	3b01      	subs	r3, #1
 800f7fc:	b29a      	uxth	r2, r3
 800f7fe:	4b4b      	ldr	r3, [pc, #300]	; (800f92c <tcp_receive+0x888>)
 800f800:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800f802:	4b4a      	ldr	r3, [pc, #296]	; (800f92c <tcp_receive+0x888>)
 800f804:	685b      	ldr	r3, [r3, #4]
 800f806:	4a49      	ldr	r2, [pc, #292]	; (800f92c <tcp_receive+0x888>)
 800f808:	8912      	ldrh	r2, [r2, #8]
 800f80a:	4611      	mov	r1, r2
 800f80c:	4618      	mov	r0, r3
 800f80e:	f7fb ff07 	bl	800b620 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800f812:	4b46      	ldr	r3, [pc, #280]	; (800f92c <tcp_receive+0x888>)
 800f814:	891c      	ldrh	r4, [r3, #8]
 800f816:	4b45      	ldr	r3, [pc, #276]	; (800f92c <tcp_receive+0x888>)
 800f818:	68db      	ldr	r3, [r3, #12]
 800f81a:	899b      	ldrh	r3, [r3, #12]
 800f81c:	b29b      	uxth	r3, r3
 800f81e:	4618      	mov	r0, r3
 800f820:	f7fa fcd8 	bl	800a1d4 <lwip_htons>
 800f824:	4603      	mov	r3, r0
 800f826:	b2db      	uxtb	r3, r3
 800f828:	f003 0303 	and.w	r3, r3, #3
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	d001      	beq.n	800f834 <tcp_receive+0x790>
 800f830:	2301      	movs	r3, #1
 800f832:	e000      	b.n	800f836 <tcp_receive+0x792>
 800f834:	2300      	movs	r3, #0
 800f836:	4423      	add	r3, r4
 800f838:	b29a      	uxth	r2, r3
 800f83a:	4b3d      	ldr	r3, [pc, #244]	; (800f930 <tcp_receive+0x88c>)
 800f83c:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800f83e:	4b3c      	ldr	r3, [pc, #240]	; (800f930 <tcp_receive+0x88c>)
 800f840:	881b      	ldrh	r3, [r3, #0]
 800f842:	461a      	mov	r2, r3
 800f844:	4b38      	ldr	r3, [pc, #224]	; (800f928 <tcp_receive+0x884>)
 800f846:	681b      	ldr	r3, [r3, #0]
 800f848:	441a      	add	r2, r3
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f84e:	6879      	ldr	r1, [r7, #4]
 800f850:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f852:	440b      	add	r3, r1
 800f854:	429a      	cmp	r2, r3
 800f856:	d006      	beq.n	800f866 <tcp_receive+0x7c2>
 800f858:	4b36      	ldr	r3, [pc, #216]	; (800f934 <tcp_receive+0x890>)
 800f85a:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800f85e:	4936      	ldr	r1, [pc, #216]	; (800f938 <tcp_receive+0x894>)
 800f860:	4836      	ldr	r0, [pc, #216]	; (800f93c <tcp_receive+0x898>)
 800f862:	f005 fe0b 	bl	801547c <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f86a:	2b00      	cmp	r3, #0
 800f86c:	f000 80e7 	beq.w	800fa3e <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f870:	4b2e      	ldr	r3, [pc, #184]	; (800f92c <tcp_receive+0x888>)
 800f872:	68db      	ldr	r3, [r3, #12]
 800f874:	899b      	ldrh	r3, [r3, #12]
 800f876:	b29b      	uxth	r3, r3
 800f878:	4618      	mov	r0, r3
 800f87a:	f7fa fcab 	bl	800a1d4 <lwip_htons>
 800f87e:	4603      	mov	r3, r0
 800f880:	b2db      	uxtb	r3, r3
 800f882:	f003 0301 	and.w	r3, r3, #1
 800f886:	2b00      	cmp	r3, #0
 800f888:	d010      	beq.n	800f8ac <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800f88a:	e00a      	b.n	800f8a2 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f890:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f896:	681a      	ldr	r2, [r3, #0]
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800f89c:	68f8      	ldr	r0, [r7, #12]
 800f89e:	f7fd fcc8 	bl	800d232 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f8a6:	2b00      	cmp	r3, #0
 800f8a8:	d1f0      	bne.n	800f88c <tcp_receive+0x7e8>
 800f8aa:	e0c8      	b.n	800fa3e <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f8b0:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800f8b2:	e052      	b.n	800f95a <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800f8b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f8b6:	68db      	ldr	r3, [r3, #12]
 800f8b8:	899b      	ldrh	r3, [r3, #12]
 800f8ba:	b29b      	uxth	r3, r3
 800f8bc:	4618      	mov	r0, r3
 800f8be:	f7fa fc89 	bl	800a1d4 <lwip_htons>
 800f8c2:	4603      	mov	r3, r0
 800f8c4:	b2db      	uxtb	r3, r3
 800f8c6:	f003 0301 	and.w	r3, r3, #1
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	d03d      	beq.n	800f94a <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800f8ce:	4b17      	ldr	r3, [pc, #92]	; (800f92c <tcp_receive+0x888>)
 800f8d0:	68db      	ldr	r3, [r3, #12]
 800f8d2:	899b      	ldrh	r3, [r3, #12]
 800f8d4:	b29b      	uxth	r3, r3
 800f8d6:	4618      	mov	r0, r3
 800f8d8:	f7fa fc7c 	bl	800a1d4 <lwip_htons>
 800f8dc:	4603      	mov	r3, r0
 800f8de:	b2db      	uxtb	r3, r3
 800f8e0:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	d130      	bne.n	800f94a <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800f8e8:	4b10      	ldr	r3, [pc, #64]	; (800f92c <tcp_receive+0x888>)
 800f8ea:	68db      	ldr	r3, [r3, #12]
 800f8ec:	899b      	ldrh	r3, [r3, #12]
 800f8ee:	b29c      	uxth	r4, r3
 800f8f0:	2001      	movs	r0, #1
 800f8f2:	f7fa fc6f 	bl	800a1d4 <lwip_htons>
 800f8f6:	4603      	mov	r3, r0
 800f8f8:	461a      	mov	r2, r3
 800f8fa:	4b0c      	ldr	r3, [pc, #48]	; (800f92c <tcp_receive+0x888>)
 800f8fc:	68db      	ldr	r3, [r3, #12]
 800f8fe:	4322      	orrs	r2, r4
 800f900:	b292      	uxth	r2, r2
 800f902:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800f904:	4b09      	ldr	r3, [pc, #36]	; (800f92c <tcp_receive+0x888>)
 800f906:	891c      	ldrh	r4, [r3, #8]
 800f908:	4b08      	ldr	r3, [pc, #32]	; (800f92c <tcp_receive+0x888>)
 800f90a:	68db      	ldr	r3, [r3, #12]
 800f90c:	899b      	ldrh	r3, [r3, #12]
 800f90e:	b29b      	uxth	r3, r3
 800f910:	4618      	mov	r0, r3
 800f912:	f7fa fc5f 	bl	800a1d4 <lwip_htons>
 800f916:	4603      	mov	r3, r0
 800f918:	b2db      	uxtb	r3, r3
 800f91a:	f003 0303 	and.w	r3, r3, #3
 800f91e:	2b00      	cmp	r3, #0
 800f920:	d00e      	beq.n	800f940 <tcp_receive+0x89c>
 800f922:	2301      	movs	r3, #1
 800f924:	e00d      	b.n	800f942 <tcp_receive+0x89e>
 800f926:	bf00      	nop
 800f928:	20004aec 	.word	0x20004aec
 800f92c:	20004acc 	.word	0x20004acc
 800f930:	20004af6 	.word	0x20004af6
 800f934:	08018120 	.word	0x08018120
 800f938:	080184c8 	.word	0x080184c8
 800f93c:	0801816c 	.word	0x0801816c
 800f940:	2300      	movs	r3, #0
 800f942:	4423      	add	r3, r4
 800f944:	b29a      	uxth	r2, r3
 800f946:	4b98      	ldr	r3, [pc, #608]	; (800fba8 <tcp_receive+0xb04>)
 800f948:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800f94a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f94c:	613b      	str	r3, [r7, #16]
              next = next->next;
 800f94e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f950:	681b      	ldr	r3, [r3, #0]
 800f952:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800f954:	6938      	ldr	r0, [r7, #16]
 800f956:	f7fd fc6c 	bl	800d232 <tcp_seg_free>
            while (next &&
 800f95a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	d00e      	beq.n	800f97e <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800f960:	4b91      	ldr	r3, [pc, #580]	; (800fba8 <tcp_receive+0xb04>)
 800f962:	881b      	ldrh	r3, [r3, #0]
 800f964:	461a      	mov	r2, r3
 800f966:	4b91      	ldr	r3, [pc, #580]	; (800fbac <tcp_receive+0xb08>)
 800f968:	681b      	ldr	r3, [r3, #0]
 800f96a:	441a      	add	r2, r3
 800f96c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f96e:	68db      	ldr	r3, [r3, #12]
 800f970:	685b      	ldr	r3, [r3, #4]
 800f972:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f974:	8909      	ldrh	r1, [r1, #8]
 800f976:	440b      	add	r3, r1
 800f978:	1ad3      	subs	r3, r2, r3
            while (next &&
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	da9a      	bge.n	800f8b4 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800f97e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f980:	2b00      	cmp	r3, #0
 800f982:	d059      	beq.n	800fa38 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800f984:	4b88      	ldr	r3, [pc, #544]	; (800fba8 <tcp_receive+0xb04>)
 800f986:	881b      	ldrh	r3, [r3, #0]
 800f988:	461a      	mov	r2, r3
 800f98a:	4b88      	ldr	r3, [pc, #544]	; (800fbac <tcp_receive+0xb08>)
 800f98c:	681b      	ldr	r3, [r3, #0]
 800f98e:	441a      	add	r2, r3
 800f990:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f992:	68db      	ldr	r3, [r3, #12]
 800f994:	685b      	ldr	r3, [r3, #4]
 800f996:	1ad3      	subs	r3, r2, r3
            if (next &&
 800f998:	2b00      	cmp	r3, #0
 800f99a:	dd4d      	ble.n	800fa38 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800f99c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f99e:	68db      	ldr	r3, [r3, #12]
 800f9a0:	685b      	ldr	r3, [r3, #4]
 800f9a2:	b29a      	uxth	r2, r3
 800f9a4:	4b81      	ldr	r3, [pc, #516]	; (800fbac <tcp_receive+0xb08>)
 800f9a6:	681b      	ldr	r3, [r3, #0]
 800f9a8:	b29b      	uxth	r3, r3
 800f9aa:	1ad3      	subs	r3, r2, r3
 800f9ac:	b29a      	uxth	r2, r3
 800f9ae:	4b80      	ldr	r3, [pc, #512]	; (800fbb0 <tcp_receive+0xb0c>)
 800f9b0:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800f9b2:	4b7f      	ldr	r3, [pc, #508]	; (800fbb0 <tcp_receive+0xb0c>)
 800f9b4:	68db      	ldr	r3, [r3, #12]
 800f9b6:	899b      	ldrh	r3, [r3, #12]
 800f9b8:	b29b      	uxth	r3, r3
 800f9ba:	4618      	mov	r0, r3
 800f9bc:	f7fa fc0a 	bl	800a1d4 <lwip_htons>
 800f9c0:	4603      	mov	r3, r0
 800f9c2:	b2db      	uxtb	r3, r3
 800f9c4:	f003 0302 	and.w	r3, r3, #2
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d005      	beq.n	800f9d8 <tcp_receive+0x934>
                inseg.len -= 1;
 800f9cc:	4b78      	ldr	r3, [pc, #480]	; (800fbb0 <tcp_receive+0xb0c>)
 800f9ce:	891b      	ldrh	r3, [r3, #8]
 800f9d0:	3b01      	subs	r3, #1
 800f9d2:	b29a      	uxth	r2, r3
 800f9d4:	4b76      	ldr	r3, [pc, #472]	; (800fbb0 <tcp_receive+0xb0c>)
 800f9d6:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800f9d8:	4b75      	ldr	r3, [pc, #468]	; (800fbb0 <tcp_receive+0xb0c>)
 800f9da:	685b      	ldr	r3, [r3, #4]
 800f9dc:	4a74      	ldr	r2, [pc, #464]	; (800fbb0 <tcp_receive+0xb0c>)
 800f9de:	8912      	ldrh	r2, [r2, #8]
 800f9e0:	4611      	mov	r1, r2
 800f9e2:	4618      	mov	r0, r3
 800f9e4:	f7fb fe1c 	bl	800b620 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800f9e8:	4b71      	ldr	r3, [pc, #452]	; (800fbb0 <tcp_receive+0xb0c>)
 800f9ea:	891c      	ldrh	r4, [r3, #8]
 800f9ec:	4b70      	ldr	r3, [pc, #448]	; (800fbb0 <tcp_receive+0xb0c>)
 800f9ee:	68db      	ldr	r3, [r3, #12]
 800f9f0:	899b      	ldrh	r3, [r3, #12]
 800f9f2:	b29b      	uxth	r3, r3
 800f9f4:	4618      	mov	r0, r3
 800f9f6:	f7fa fbed 	bl	800a1d4 <lwip_htons>
 800f9fa:	4603      	mov	r3, r0
 800f9fc:	b2db      	uxtb	r3, r3
 800f9fe:	f003 0303 	and.w	r3, r3, #3
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	d001      	beq.n	800fa0a <tcp_receive+0x966>
 800fa06:	2301      	movs	r3, #1
 800fa08:	e000      	b.n	800fa0c <tcp_receive+0x968>
 800fa0a:	2300      	movs	r3, #0
 800fa0c:	4423      	add	r3, r4
 800fa0e:	b29a      	uxth	r2, r3
 800fa10:	4b65      	ldr	r3, [pc, #404]	; (800fba8 <tcp_receive+0xb04>)
 800fa12:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800fa14:	4b64      	ldr	r3, [pc, #400]	; (800fba8 <tcp_receive+0xb04>)
 800fa16:	881b      	ldrh	r3, [r3, #0]
 800fa18:	461a      	mov	r2, r3
 800fa1a:	4b64      	ldr	r3, [pc, #400]	; (800fbac <tcp_receive+0xb08>)
 800fa1c:	681b      	ldr	r3, [r3, #0]
 800fa1e:	441a      	add	r2, r3
 800fa20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa22:	68db      	ldr	r3, [r3, #12]
 800fa24:	685b      	ldr	r3, [r3, #4]
 800fa26:	429a      	cmp	r2, r3
 800fa28:	d006      	beq.n	800fa38 <tcp_receive+0x994>
 800fa2a:	4b62      	ldr	r3, [pc, #392]	; (800fbb4 <tcp_receive+0xb10>)
 800fa2c:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800fa30:	4961      	ldr	r1, [pc, #388]	; (800fbb8 <tcp_receive+0xb14>)
 800fa32:	4862      	ldr	r0, [pc, #392]	; (800fbbc <tcp_receive+0xb18>)
 800fa34:	f005 fd22 	bl	801547c <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fa3c:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800fa3e:	4b5a      	ldr	r3, [pc, #360]	; (800fba8 <tcp_receive+0xb04>)
 800fa40:	881b      	ldrh	r3, [r3, #0]
 800fa42:	461a      	mov	r2, r3
 800fa44:	4b59      	ldr	r3, [pc, #356]	; (800fbac <tcp_receive+0xb08>)
 800fa46:	681b      	ldr	r3, [r3, #0]
 800fa48:	441a      	add	r2, r3
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800fa52:	4b55      	ldr	r3, [pc, #340]	; (800fba8 <tcp_receive+0xb04>)
 800fa54:	881b      	ldrh	r3, [r3, #0]
 800fa56:	429a      	cmp	r2, r3
 800fa58:	d206      	bcs.n	800fa68 <tcp_receive+0x9c4>
 800fa5a:	4b56      	ldr	r3, [pc, #344]	; (800fbb4 <tcp_receive+0xb10>)
 800fa5c:	f240 6207 	movw	r2, #1543	; 0x607
 800fa60:	4957      	ldr	r1, [pc, #348]	; (800fbc0 <tcp_receive+0xb1c>)
 800fa62:	4856      	ldr	r0, [pc, #344]	; (800fbbc <tcp_receive+0xb18>)
 800fa64:	f005 fd0a 	bl	801547c <iprintf>
        pcb->rcv_wnd -= tcplen;
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800fa6c:	4b4e      	ldr	r3, [pc, #312]	; (800fba8 <tcp_receive+0xb04>)
 800fa6e:	881b      	ldrh	r3, [r3, #0]
 800fa70:	1ad3      	subs	r3, r2, r3
 800fa72:	b29a      	uxth	r2, r3
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800fa78:	6878      	ldr	r0, [r7, #4]
 800fa7a:	f7fc feb5 	bl	800c7e8 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800fa7e:	4b4c      	ldr	r3, [pc, #304]	; (800fbb0 <tcp_receive+0xb0c>)
 800fa80:	685b      	ldr	r3, [r3, #4]
 800fa82:	891b      	ldrh	r3, [r3, #8]
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	d006      	beq.n	800fa96 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800fa88:	4b49      	ldr	r3, [pc, #292]	; (800fbb0 <tcp_receive+0xb0c>)
 800fa8a:	685b      	ldr	r3, [r3, #4]
 800fa8c:	4a4d      	ldr	r2, [pc, #308]	; (800fbc4 <tcp_receive+0xb20>)
 800fa8e:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800fa90:	4b47      	ldr	r3, [pc, #284]	; (800fbb0 <tcp_receive+0xb0c>)
 800fa92:	2200      	movs	r2, #0
 800fa94:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800fa96:	4b46      	ldr	r3, [pc, #280]	; (800fbb0 <tcp_receive+0xb0c>)
 800fa98:	68db      	ldr	r3, [r3, #12]
 800fa9a:	899b      	ldrh	r3, [r3, #12]
 800fa9c:	b29b      	uxth	r3, r3
 800fa9e:	4618      	mov	r0, r3
 800faa0:	f7fa fb98 	bl	800a1d4 <lwip_htons>
 800faa4:	4603      	mov	r3, r0
 800faa6:	b2db      	uxtb	r3, r3
 800faa8:	f003 0301 	and.w	r3, r3, #1
 800faac:	2b00      	cmp	r3, #0
 800faae:	f000 80b8 	beq.w	800fc22 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800fab2:	4b45      	ldr	r3, [pc, #276]	; (800fbc8 <tcp_receive+0xb24>)
 800fab4:	781b      	ldrb	r3, [r3, #0]
 800fab6:	f043 0320 	orr.w	r3, r3, #32
 800faba:	b2da      	uxtb	r2, r3
 800fabc:	4b42      	ldr	r3, [pc, #264]	; (800fbc8 <tcp_receive+0xb24>)
 800fabe:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800fac0:	e0af      	b.n	800fc22 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fac6:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800facc:	68db      	ldr	r3, [r3, #12]
 800face:	685b      	ldr	r3, [r3, #4]
 800fad0:	4a36      	ldr	r2, [pc, #216]	; (800fbac <tcp_receive+0xb08>)
 800fad2:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800fad4:	68bb      	ldr	r3, [r7, #8]
 800fad6:	891b      	ldrh	r3, [r3, #8]
 800fad8:	461c      	mov	r4, r3
 800fada:	68bb      	ldr	r3, [r7, #8]
 800fadc:	68db      	ldr	r3, [r3, #12]
 800fade:	899b      	ldrh	r3, [r3, #12]
 800fae0:	b29b      	uxth	r3, r3
 800fae2:	4618      	mov	r0, r3
 800fae4:	f7fa fb76 	bl	800a1d4 <lwip_htons>
 800fae8:	4603      	mov	r3, r0
 800faea:	b2db      	uxtb	r3, r3
 800faec:	f003 0303 	and.w	r3, r3, #3
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	d001      	beq.n	800faf8 <tcp_receive+0xa54>
 800faf4:	2301      	movs	r3, #1
 800faf6:	e000      	b.n	800fafa <tcp_receive+0xa56>
 800faf8:	2300      	movs	r3, #0
 800fafa:	191a      	adds	r2, r3, r4
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb00:	441a      	add	r2, r3
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fb0a:	461c      	mov	r4, r3
 800fb0c:	68bb      	ldr	r3, [r7, #8]
 800fb0e:	891b      	ldrh	r3, [r3, #8]
 800fb10:	461d      	mov	r5, r3
 800fb12:	68bb      	ldr	r3, [r7, #8]
 800fb14:	68db      	ldr	r3, [r3, #12]
 800fb16:	899b      	ldrh	r3, [r3, #12]
 800fb18:	b29b      	uxth	r3, r3
 800fb1a:	4618      	mov	r0, r3
 800fb1c:	f7fa fb5a 	bl	800a1d4 <lwip_htons>
 800fb20:	4603      	mov	r3, r0
 800fb22:	b2db      	uxtb	r3, r3
 800fb24:	f003 0303 	and.w	r3, r3, #3
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	d001      	beq.n	800fb30 <tcp_receive+0xa8c>
 800fb2c:	2301      	movs	r3, #1
 800fb2e:	e000      	b.n	800fb32 <tcp_receive+0xa8e>
 800fb30:	2300      	movs	r3, #0
 800fb32:	442b      	add	r3, r5
 800fb34:	429c      	cmp	r4, r3
 800fb36:	d206      	bcs.n	800fb46 <tcp_receive+0xaa2>
 800fb38:	4b1e      	ldr	r3, [pc, #120]	; (800fbb4 <tcp_receive+0xb10>)
 800fb3a:	f240 622b 	movw	r2, #1579	; 0x62b
 800fb3e:	4923      	ldr	r1, [pc, #140]	; (800fbcc <tcp_receive+0xb28>)
 800fb40:	481e      	ldr	r0, [pc, #120]	; (800fbbc <tcp_receive+0xb18>)
 800fb42:	f005 fc9b 	bl	801547c <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800fb46:	68bb      	ldr	r3, [r7, #8]
 800fb48:	891b      	ldrh	r3, [r3, #8]
 800fb4a:	461c      	mov	r4, r3
 800fb4c:	68bb      	ldr	r3, [r7, #8]
 800fb4e:	68db      	ldr	r3, [r3, #12]
 800fb50:	899b      	ldrh	r3, [r3, #12]
 800fb52:	b29b      	uxth	r3, r3
 800fb54:	4618      	mov	r0, r3
 800fb56:	f7fa fb3d 	bl	800a1d4 <lwip_htons>
 800fb5a:	4603      	mov	r3, r0
 800fb5c:	b2db      	uxtb	r3, r3
 800fb5e:	f003 0303 	and.w	r3, r3, #3
 800fb62:	2b00      	cmp	r3, #0
 800fb64:	d001      	beq.n	800fb6a <tcp_receive+0xac6>
 800fb66:	2301      	movs	r3, #1
 800fb68:	e000      	b.n	800fb6c <tcp_receive+0xac8>
 800fb6a:	2300      	movs	r3, #0
 800fb6c:	1919      	adds	r1, r3, r4
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800fb72:	b28b      	uxth	r3, r1
 800fb74:	1ad3      	subs	r3, r2, r3
 800fb76:	b29a      	uxth	r2, r3
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800fb7c:	6878      	ldr	r0, [r7, #4]
 800fb7e:	f7fc fe33 	bl	800c7e8 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800fb82:	68bb      	ldr	r3, [r7, #8]
 800fb84:	685b      	ldr	r3, [r3, #4]
 800fb86:	891b      	ldrh	r3, [r3, #8]
 800fb88:	2b00      	cmp	r3, #0
 800fb8a:	d028      	beq.n	800fbde <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800fb8c:	4b0d      	ldr	r3, [pc, #52]	; (800fbc4 <tcp_receive+0xb20>)
 800fb8e:	681b      	ldr	r3, [r3, #0]
 800fb90:	2b00      	cmp	r3, #0
 800fb92:	d01d      	beq.n	800fbd0 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800fb94:	4b0b      	ldr	r3, [pc, #44]	; (800fbc4 <tcp_receive+0xb20>)
 800fb96:	681a      	ldr	r2, [r3, #0]
 800fb98:	68bb      	ldr	r3, [r7, #8]
 800fb9a:	685b      	ldr	r3, [r3, #4]
 800fb9c:	4619      	mov	r1, r3
 800fb9e:	4610      	mov	r0, r2
 800fba0:	f7fb ff92 	bl	800bac8 <pbuf_cat>
 800fba4:	e018      	b.n	800fbd8 <tcp_receive+0xb34>
 800fba6:	bf00      	nop
 800fba8:	20004af6 	.word	0x20004af6
 800fbac:	20004aec 	.word	0x20004aec
 800fbb0:	20004acc 	.word	0x20004acc
 800fbb4:	08018120 	.word	0x08018120
 800fbb8:	08018500 	.word	0x08018500
 800fbbc:	0801816c 	.word	0x0801816c
 800fbc0:	0801853c 	.word	0x0801853c
 800fbc4:	20004afc 	.word	0x20004afc
 800fbc8:	20004af9 	.word	0x20004af9
 800fbcc:	0801855c 	.word	0x0801855c
            } else {
              recv_data = cseg->p;
 800fbd0:	68bb      	ldr	r3, [r7, #8]
 800fbd2:	685b      	ldr	r3, [r3, #4]
 800fbd4:	4a70      	ldr	r2, [pc, #448]	; (800fd98 <tcp_receive+0xcf4>)
 800fbd6:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800fbd8:	68bb      	ldr	r3, [r7, #8]
 800fbda:	2200      	movs	r2, #0
 800fbdc:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800fbde:	68bb      	ldr	r3, [r7, #8]
 800fbe0:	68db      	ldr	r3, [r3, #12]
 800fbe2:	899b      	ldrh	r3, [r3, #12]
 800fbe4:	b29b      	uxth	r3, r3
 800fbe6:	4618      	mov	r0, r3
 800fbe8:	f7fa faf4 	bl	800a1d4 <lwip_htons>
 800fbec:	4603      	mov	r3, r0
 800fbee:	b2db      	uxtb	r3, r3
 800fbf0:	f003 0301 	and.w	r3, r3, #1
 800fbf4:	2b00      	cmp	r3, #0
 800fbf6:	d00d      	beq.n	800fc14 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800fbf8:	4b68      	ldr	r3, [pc, #416]	; (800fd9c <tcp_receive+0xcf8>)
 800fbfa:	781b      	ldrb	r3, [r3, #0]
 800fbfc:	f043 0320 	orr.w	r3, r3, #32
 800fc00:	b2da      	uxtb	r2, r3
 800fc02:	4b66      	ldr	r3, [pc, #408]	; (800fd9c <tcp_receive+0xcf8>)
 800fc04:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	7d1b      	ldrb	r3, [r3, #20]
 800fc0a:	2b04      	cmp	r3, #4
 800fc0c:	d102      	bne.n	800fc14 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	2207      	movs	r2, #7
 800fc12:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800fc14:	68bb      	ldr	r3, [r7, #8]
 800fc16:	681a      	ldr	r2, [r3, #0]
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800fc1c:	68b8      	ldr	r0, [r7, #8]
 800fc1e:	f7fd fb08 	bl	800d232 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fc26:	2b00      	cmp	r3, #0
 800fc28:	d008      	beq.n	800fc3c <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fc2e:	68db      	ldr	r3, [r3, #12]
 800fc30:	685a      	ldr	r2, [r3, #4]
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800fc36:	429a      	cmp	r2, r3
 800fc38:	f43f af43 	beq.w	800fac2 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	8b5b      	ldrh	r3, [r3, #26]
 800fc40:	f003 0301 	and.w	r3, r3, #1
 800fc44:	2b00      	cmp	r3, #0
 800fc46:	d00e      	beq.n	800fc66 <tcp_receive+0xbc2>
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	8b5b      	ldrh	r3, [r3, #26]
 800fc4c:	f023 0301 	bic.w	r3, r3, #1
 800fc50:	b29a      	uxth	r2, r3
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	835a      	strh	r2, [r3, #26]
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	8b5b      	ldrh	r3, [r3, #26]
 800fc5a:	f043 0302 	orr.w	r3, r3, #2
 800fc5e:	b29a      	uxth	r2, r3
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800fc64:	e188      	b.n	800ff78 <tcp_receive+0xed4>
        tcp_ack(pcb);
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	8b5b      	ldrh	r3, [r3, #26]
 800fc6a:	f043 0301 	orr.w	r3, r3, #1
 800fc6e:	b29a      	uxth	r2, r3
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800fc74:	e180      	b.n	800ff78 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	d106      	bne.n	800fc8c <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800fc7e:	4848      	ldr	r0, [pc, #288]	; (800fda0 <tcp_receive+0xcfc>)
 800fc80:	f7fd faf0 	bl	800d264 <tcp_seg_copy>
 800fc84:	4602      	mov	r2, r0
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	675a      	str	r2, [r3, #116]	; 0x74
 800fc8a:	e16d      	b.n	800ff68 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800fc8c:	2300      	movs	r3, #0
 800fc8e:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fc94:	63bb      	str	r3, [r7, #56]	; 0x38
 800fc96:	e157      	b.n	800ff48 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 800fc98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc9a:	68db      	ldr	r3, [r3, #12]
 800fc9c:	685a      	ldr	r2, [r3, #4]
 800fc9e:	4b41      	ldr	r3, [pc, #260]	; (800fda4 <tcp_receive+0xd00>)
 800fca0:	681b      	ldr	r3, [r3, #0]
 800fca2:	429a      	cmp	r2, r3
 800fca4:	d11d      	bne.n	800fce2 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800fca6:	4b3e      	ldr	r3, [pc, #248]	; (800fda0 <tcp_receive+0xcfc>)
 800fca8:	891a      	ldrh	r2, [r3, #8]
 800fcaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcac:	891b      	ldrh	r3, [r3, #8]
 800fcae:	429a      	cmp	r2, r3
 800fcb0:	f240 814f 	bls.w	800ff52 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800fcb4:	483a      	ldr	r0, [pc, #232]	; (800fda0 <tcp_receive+0xcfc>)
 800fcb6:	f7fd fad5 	bl	800d264 <tcp_seg_copy>
 800fcba:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800fcbc:	697b      	ldr	r3, [r7, #20]
 800fcbe:	2b00      	cmp	r3, #0
 800fcc0:	f000 8149 	beq.w	800ff56 <tcp_receive+0xeb2>
                  if (prev != NULL) {
 800fcc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fcc6:	2b00      	cmp	r3, #0
 800fcc8:	d003      	beq.n	800fcd2 <tcp_receive+0xc2e>
                    prev->next = cseg;
 800fcca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fccc:	697a      	ldr	r2, [r7, #20]
 800fcce:	601a      	str	r2, [r3, #0]
 800fcd0:	e002      	b.n	800fcd8 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	697a      	ldr	r2, [r7, #20]
 800fcd6:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800fcd8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800fcda:	6978      	ldr	r0, [r7, #20]
 800fcdc:	f7ff f8de 	bl	800ee9c <tcp_oos_insert_segment>
                }
                break;
 800fce0:	e139      	b.n	800ff56 <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800fce2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fce4:	2b00      	cmp	r3, #0
 800fce6:	d117      	bne.n	800fd18 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800fce8:	4b2e      	ldr	r3, [pc, #184]	; (800fda4 <tcp_receive+0xd00>)
 800fcea:	681a      	ldr	r2, [r3, #0]
 800fcec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcee:	68db      	ldr	r3, [r3, #12]
 800fcf0:	685b      	ldr	r3, [r3, #4]
 800fcf2:	1ad3      	subs	r3, r2, r3
 800fcf4:	2b00      	cmp	r3, #0
 800fcf6:	da57      	bge.n	800fda8 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800fcf8:	4829      	ldr	r0, [pc, #164]	; (800fda0 <tcp_receive+0xcfc>)
 800fcfa:	f7fd fab3 	bl	800d264 <tcp_seg_copy>
 800fcfe:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800fd00:	69bb      	ldr	r3, [r7, #24]
 800fd02:	2b00      	cmp	r3, #0
 800fd04:	f000 8129 	beq.w	800ff5a <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	69ba      	ldr	r2, [r7, #24]
 800fd0c:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800fd0e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800fd10:	69b8      	ldr	r0, [r7, #24]
 800fd12:	f7ff f8c3 	bl	800ee9c <tcp_oos_insert_segment>
                  }
                  break;
 800fd16:	e120      	b.n	800ff5a <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800fd18:	4b22      	ldr	r3, [pc, #136]	; (800fda4 <tcp_receive+0xd00>)
 800fd1a:	681a      	ldr	r2, [r3, #0]
 800fd1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd1e:	68db      	ldr	r3, [r3, #12]
 800fd20:	685b      	ldr	r3, [r3, #4]
 800fd22:	1ad3      	subs	r3, r2, r3
 800fd24:	3b01      	subs	r3, #1
 800fd26:	2b00      	cmp	r3, #0
 800fd28:	db3e      	blt.n	800fda8 <tcp_receive+0xd04>
 800fd2a:	4b1e      	ldr	r3, [pc, #120]	; (800fda4 <tcp_receive+0xd00>)
 800fd2c:	681a      	ldr	r2, [r3, #0]
 800fd2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd30:	68db      	ldr	r3, [r3, #12]
 800fd32:	685b      	ldr	r3, [r3, #4]
 800fd34:	1ad3      	subs	r3, r2, r3
 800fd36:	3301      	adds	r3, #1
 800fd38:	2b00      	cmp	r3, #0
 800fd3a:	dc35      	bgt.n	800fda8 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800fd3c:	4818      	ldr	r0, [pc, #96]	; (800fda0 <tcp_receive+0xcfc>)
 800fd3e:	f7fd fa91 	bl	800d264 <tcp_seg_copy>
 800fd42:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800fd44:	69fb      	ldr	r3, [r7, #28]
 800fd46:	2b00      	cmp	r3, #0
 800fd48:	f000 8109 	beq.w	800ff5e <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800fd4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd4e:	68db      	ldr	r3, [r3, #12]
 800fd50:	685b      	ldr	r3, [r3, #4]
 800fd52:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fd54:	8912      	ldrh	r2, [r2, #8]
 800fd56:	441a      	add	r2, r3
 800fd58:	4b12      	ldr	r3, [pc, #72]	; (800fda4 <tcp_receive+0xd00>)
 800fd5a:	681b      	ldr	r3, [r3, #0]
 800fd5c:	1ad3      	subs	r3, r2, r3
 800fd5e:	2b00      	cmp	r3, #0
 800fd60:	dd12      	ble.n	800fd88 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800fd62:	4b10      	ldr	r3, [pc, #64]	; (800fda4 <tcp_receive+0xd00>)
 800fd64:	681b      	ldr	r3, [r3, #0]
 800fd66:	b29a      	uxth	r2, r3
 800fd68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd6a:	68db      	ldr	r3, [r3, #12]
 800fd6c:	685b      	ldr	r3, [r3, #4]
 800fd6e:	b29b      	uxth	r3, r3
 800fd70:	1ad3      	subs	r3, r2, r3
 800fd72:	b29a      	uxth	r2, r3
 800fd74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd76:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800fd78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd7a:	685a      	ldr	r2, [r3, #4]
 800fd7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd7e:	891b      	ldrh	r3, [r3, #8]
 800fd80:	4619      	mov	r1, r3
 800fd82:	4610      	mov	r0, r2
 800fd84:	f7fb fc4c 	bl	800b620 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800fd88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd8a:	69fa      	ldr	r2, [r7, #28]
 800fd8c:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800fd8e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800fd90:	69f8      	ldr	r0, [r7, #28]
 800fd92:	f7ff f883 	bl	800ee9c <tcp_oos_insert_segment>
                  }
                  break;
 800fd96:	e0e2      	b.n	800ff5e <tcp_receive+0xeba>
 800fd98:	20004afc 	.word	0x20004afc
 800fd9c:	20004af9 	.word	0x20004af9
 800fda0:	20004acc 	.word	0x20004acc
 800fda4:	20004aec 	.word	0x20004aec
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800fda8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdaa:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800fdac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdae:	681b      	ldr	r3, [r3, #0]
 800fdb0:	2b00      	cmp	r3, #0
 800fdb2:	f040 80c6 	bne.w	800ff42 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800fdb6:	4b80      	ldr	r3, [pc, #512]	; (800ffb8 <tcp_receive+0xf14>)
 800fdb8:	681a      	ldr	r2, [r3, #0]
 800fdba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdbc:	68db      	ldr	r3, [r3, #12]
 800fdbe:	685b      	ldr	r3, [r3, #4]
 800fdc0:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	f340 80bd 	ble.w	800ff42 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800fdc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdca:	68db      	ldr	r3, [r3, #12]
 800fdcc:	899b      	ldrh	r3, [r3, #12]
 800fdce:	b29b      	uxth	r3, r3
 800fdd0:	4618      	mov	r0, r3
 800fdd2:	f7fa f9ff 	bl	800a1d4 <lwip_htons>
 800fdd6:	4603      	mov	r3, r0
 800fdd8:	b2db      	uxtb	r3, r3
 800fdda:	f003 0301 	and.w	r3, r3, #1
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	f040 80bf 	bne.w	800ff62 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800fde4:	4875      	ldr	r0, [pc, #468]	; (800ffbc <tcp_receive+0xf18>)
 800fde6:	f7fd fa3d 	bl	800d264 <tcp_seg_copy>
 800fdea:	4602      	mov	r2, r0
 800fdec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdee:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800fdf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdf2:	681b      	ldr	r3, [r3, #0]
 800fdf4:	2b00      	cmp	r3, #0
 800fdf6:	f000 80b6 	beq.w	800ff66 <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800fdfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdfc:	68db      	ldr	r3, [r3, #12]
 800fdfe:	685b      	ldr	r3, [r3, #4]
 800fe00:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fe02:	8912      	ldrh	r2, [r2, #8]
 800fe04:	441a      	add	r2, r3
 800fe06:	4b6c      	ldr	r3, [pc, #432]	; (800ffb8 <tcp_receive+0xf14>)
 800fe08:	681b      	ldr	r3, [r3, #0]
 800fe0a:	1ad3      	subs	r3, r2, r3
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	dd12      	ble.n	800fe36 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800fe10:	4b69      	ldr	r3, [pc, #420]	; (800ffb8 <tcp_receive+0xf14>)
 800fe12:	681b      	ldr	r3, [r3, #0]
 800fe14:	b29a      	uxth	r2, r3
 800fe16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe18:	68db      	ldr	r3, [r3, #12]
 800fe1a:	685b      	ldr	r3, [r3, #4]
 800fe1c:	b29b      	uxth	r3, r3
 800fe1e:	1ad3      	subs	r3, r2, r3
 800fe20:	b29a      	uxth	r2, r3
 800fe22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe24:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800fe26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe28:	685a      	ldr	r2, [r3, #4]
 800fe2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe2c:	891b      	ldrh	r3, [r3, #8]
 800fe2e:	4619      	mov	r1, r3
 800fe30:	4610      	mov	r0, r2
 800fe32:	f7fb fbf5 	bl	800b620 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800fe36:	4b62      	ldr	r3, [pc, #392]	; (800ffc0 <tcp_receive+0xf1c>)
 800fe38:	881b      	ldrh	r3, [r3, #0]
 800fe3a:	461a      	mov	r2, r3
 800fe3c:	4b5e      	ldr	r3, [pc, #376]	; (800ffb8 <tcp_receive+0xf14>)
 800fe3e:	681b      	ldr	r3, [r3, #0]
 800fe40:	441a      	add	r2, r3
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe46:	6879      	ldr	r1, [r7, #4]
 800fe48:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fe4a:	440b      	add	r3, r1
 800fe4c:	1ad3      	subs	r3, r2, r3
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	f340 8089 	ble.w	800ff66 <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800fe54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe56:	681b      	ldr	r3, [r3, #0]
 800fe58:	68db      	ldr	r3, [r3, #12]
 800fe5a:	899b      	ldrh	r3, [r3, #12]
 800fe5c:	b29b      	uxth	r3, r3
 800fe5e:	4618      	mov	r0, r3
 800fe60:	f7fa f9b8 	bl	800a1d4 <lwip_htons>
 800fe64:	4603      	mov	r3, r0
 800fe66:	b2db      	uxtb	r3, r3
 800fe68:	f003 0301 	and.w	r3, r3, #1
 800fe6c:	2b00      	cmp	r3, #0
 800fe6e:	d022      	beq.n	800feb6 <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800fe70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe72:	681b      	ldr	r3, [r3, #0]
 800fe74:	68db      	ldr	r3, [r3, #12]
 800fe76:	899b      	ldrh	r3, [r3, #12]
 800fe78:	b29b      	uxth	r3, r3
 800fe7a:	b21b      	sxth	r3, r3
 800fe7c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800fe80:	b21c      	sxth	r4, r3
 800fe82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe84:	681b      	ldr	r3, [r3, #0]
 800fe86:	68db      	ldr	r3, [r3, #12]
 800fe88:	899b      	ldrh	r3, [r3, #12]
 800fe8a:	b29b      	uxth	r3, r3
 800fe8c:	4618      	mov	r0, r3
 800fe8e:	f7fa f9a1 	bl	800a1d4 <lwip_htons>
 800fe92:	4603      	mov	r3, r0
 800fe94:	b2db      	uxtb	r3, r3
 800fe96:	b29b      	uxth	r3, r3
 800fe98:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800fe9c:	b29b      	uxth	r3, r3
 800fe9e:	4618      	mov	r0, r3
 800fea0:	f7fa f998 	bl	800a1d4 <lwip_htons>
 800fea4:	4603      	mov	r3, r0
 800fea6:	b21b      	sxth	r3, r3
 800fea8:	4323      	orrs	r3, r4
 800feaa:	b21a      	sxth	r2, r3
 800feac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800feae:	681b      	ldr	r3, [r3, #0]
 800feb0:	68db      	ldr	r3, [r3, #12]
 800feb2:	b292      	uxth	r2, r2
 800feb4:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800feba:	b29a      	uxth	r2, r3
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fec0:	4413      	add	r3, r2
 800fec2:	b299      	uxth	r1, r3
 800fec4:	4b3c      	ldr	r3, [pc, #240]	; (800ffb8 <tcp_receive+0xf14>)
 800fec6:	681b      	ldr	r3, [r3, #0]
 800fec8:	b29a      	uxth	r2, r3
 800feca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fecc:	681b      	ldr	r3, [r3, #0]
 800fece:	1a8a      	subs	r2, r1, r2
 800fed0:	b292      	uxth	r2, r2
 800fed2:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800fed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fed6:	681b      	ldr	r3, [r3, #0]
 800fed8:	685a      	ldr	r2, [r3, #4]
 800feda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fedc:	681b      	ldr	r3, [r3, #0]
 800fede:	891b      	ldrh	r3, [r3, #8]
 800fee0:	4619      	mov	r1, r3
 800fee2:	4610      	mov	r0, r2
 800fee4:	f7fb fb9c 	bl	800b620 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800fee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800feea:	681b      	ldr	r3, [r3, #0]
 800feec:	891c      	ldrh	r4, [r3, #8]
 800feee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fef0:	681b      	ldr	r3, [r3, #0]
 800fef2:	68db      	ldr	r3, [r3, #12]
 800fef4:	899b      	ldrh	r3, [r3, #12]
 800fef6:	b29b      	uxth	r3, r3
 800fef8:	4618      	mov	r0, r3
 800fefa:	f7fa f96b 	bl	800a1d4 <lwip_htons>
 800fefe:	4603      	mov	r3, r0
 800ff00:	b2db      	uxtb	r3, r3
 800ff02:	f003 0303 	and.w	r3, r3, #3
 800ff06:	2b00      	cmp	r3, #0
 800ff08:	d001      	beq.n	800ff0e <tcp_receive+0xe6a>
 800ff0a:	2301      	movs	r3, #1
 800ff0c:	e000      	b.n	800ff10 <tcp_receive+0xe6c>
 800ff0e:	2300      	movs	r3, #0
 800ff10:	4423      	add	r3, r4
 800ff12:	b29a      	uxth	r2, r3
 800ff14:	4b2a      	ldr	r3, [pc, #168]	; (800ffc0 <tcp_receive+0xf1c>)
 800ff16:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800ff18:	4b29      	ldr	r3, [pc, #164]	; (800ffc0 <tcp_receive+0xf1c>)
 800ff1a:	881b      	ldrh	r3, [r3, #0]
 800ff1c:	461a      	mov	r2, r3
 800ff1e:	4b26      	ldr	r3, [pc, #152]	; (800ffb8 <tcp_receive+0xf14>)
 800ff20:	681b      	ldr	r3, [r3, #0]
 800ff22:	441a      	add	r2, r3
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff28:	6879      	ldr	r1, [r7, #4]
 800ff2a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ff2c:	440b      	add	r3, r1
 800ff2e:	429a      	cmp	r2, r3
 800ff30:	d019      	beq.n	800ff66 <tcp_receive+0xec2>
 800ff32:	4b24      	ldr	r3, [pc, #144]	; (800ffc4 <tcp_receive+0xf20>)
 800ff34:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800ff38:	4923      	ldr	r1, [pc, #140]	; (800ffc8 <tcp_receive+0xf24>)
 800ff3a:	4824      	ldr	r0, [pc, #144]	; (800ffcc <tcp_receive+0xf28>)
 800ff3c:	f005 fa9e 	bl	801547c <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800ff40:	e011      	b.n	800ff66 <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800ff42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff44:	681b      	ldr	r3, [r3, #0]
 800ff46:	63bb      	str	r3, [r7, #56]	; 0x38
 800ff48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff4a:	2b00      	cmp	r3, #0
 800ff4c:	f47f aea4 	bne.w	800fc98 <tcp_receive+0xbf4>
 800ff50:	e00a      	b.n	800ff68 <tcp_receive+0xec4>
                break;
 800ff52:	bf00      	nop
 800ff54:	e008      	b.n	800ff68 <tcp_receive+0xec4>
                break;
 800ff56:	bf00      	nop
 800ff58:	e006      	b.n	800ff68 <tcp_receive+0xec4>
                  break;
 800ff5a:	bf00      	nop
 800ff5c:	e004      	b.n	800ff68 <tcp_receive+0xec4>
                  break;
 800ff5e:	bf00      	nop
 800ff60:	e002      	b.n	800ff68 <tcp_receive+0xec4>
                  break;
 800ff62:	bf00      	nop
 800ff64:	e000      	b.n	800ff68 <tcp_receive+0xec4>
                break;
 800ff66:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800ff68:	6878      	ldr	r0, [r7, #4]
 800ff6a:	f001 fe8b 	bl	8011c84 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800ff6e:	e003      	b.n	800ff78 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800ff70:	6878      	ldr	r0, [r7, #4]
 800ff72:	f001 fe87 	bl	8011c84 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800ff76:	e01a      	b.n	800ffae <tcp_receive+0xf0a>
 800ff78:	e019      	b.n	800ffae <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800ff7a:	4b0f      	ldr	r3, [pc, #60]	; (800ffb8 <tcp_receive+0xf14>)
 800ff7c:	681a      	ldr	r2, [r3, #0]
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff82:	1ad3      	subs	r3, r2, r3
 800ff84:	2b00      	cmp	r3, #0
 800ff86:	db0a      	blt.n	800ff9e <tcp_receive+0xefa>
 800ff88:	4b0b      	ldr	r3, [pc, #44]	; (800ffb8 <tcp_receive+0xf14>)
 800ff8a:	681a      	ldr	r2, [r3, #0]
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff90:	6879      	ldr	r1, [r7, #4]
 800ff92:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ff94:	440b      	add	r3, r1
 800ff96:	1ad3      	subs	r3, r2, r3
 800ff98:	3301      	adds	r3, #1
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	dd07      	ble.n	800ffae <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	8b5b      	ldrh	r3, [r3, #26]
 800ffa2:	f043 0302 	orr.w	r3, r3, #2
 800ffa6:	b29a      	uxth	r2, r3
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800ffac:	e7ff      	b.n	800ffae <tcp_receive+0xf0a>
 800ffae:	bf00      	nop
 800ffb0:	3750      	adds	r7, #80	; 0x50
 800ffb2:	46bd      	mov	sp, r7
 800ffb4:	bdb0      	pop	{r4, r5, r7, pc}
 800ffb6:	bf00      	nop
 800ffb8:	20004aec 	.word	0x20004aec
 800ffbc:	20004acc 	.word	0x20004acc
 800ffc0:	20004af6 	.word	0x20004af6
 800ffc4:	08018120 	.word	0x08018120
 800ffc8:	080184c8 	.word	0x080184c8
 800ffcc:	0801816c 	.word	0x0801816c

0800ffd0 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800ffd0:	b480      	push	{r7}
 800ffd2:	b083      	sub	sp, #12
 800ffd4:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800ffd6:	4b15      	ldr	r3, [pc, #84]	; (801002c <tcp_get_next_optbyte+0x5c>)
 800ffd8:	881b      	ldrh	r3, [r3, #0]
 800ffda:	1c5a      	adds	r2, r3, #1
 800ffdc:	b291      	uxth	r1, r2
 800ffde:	4a13      	ldr	r2, [pc, #76]	; (801002c <tcp_get_next_optbyte+0x5c>)
 800ffe0:	8011      	strh	r1, [r2, #0]
 800ffe2:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800ffe4:	4b12      	ldr	r3, [pc, #72]	; (8010030 <tcp_get_next_optbyte+0x60>)
 800ffe6:	681b      	ldr	r3, [r3, #0]
 800ffe8:	2b00      	cmp	r3, #0
 800ffea:	d004      	beq.n	800fff6 <tcp_get_next_optbyte+0x26>
 800ffec:	4b11      	ldr	r3, [pc, #68]	; (8010034 <tcp_get_next_optbyte+0x64>)
 800ffee:	881b      	ldrh	r3, [r3, #0]
 800fff0:	88fa      	ldrh	r2, [r7, #6]
 800fff2:	429a      	cmp	r2, r3
 800fff4:	d208      	bcs.n	8010008 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800fff6:	4b10      	ldr	r3, [pc, #64]	; (8010038 <tcp_get_next_optbyte+0x68>)
 800fff8:	681b      	ldr	r3, [r3, #0]
 800fffa:	3314      	adds	r3, #20
 800fffc:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800fffe:	88fb      	ldrh	r3, [r7, #6]
 8010000:	683a      	ldr	r2, [r7, #0]
 8010002:	4413      	add	r3, r2
 8010004:	781b      	ldrb	r3, [r3, #0]
 8010006:	e00b      	b.n	8010020 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8010008:	88fb      	ldrh	r3, [r7, #6]
 801000a:	b2da      	uxtb	r2, r3
 801000c:	4b09      	ldr	r3, [pc, #36]	; (8010034 <tcp_get_next_optbyte+0x64>)
 801000e:	881b      	ldrh	r3, [r3, #0]
 8010010:	b2db      	uxtb	r3, r3
 8010012:	1ad3      	subs	r3, r2, r3
 8010014:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8010016:	4b06      	ldr	r3, [pc, #24]	; (8010030 <tcp_get_next_optbyte+0x60>)
 8010018:	681a      	ldr	r2, [r3, #0]
 801001a:	797b      	ldrb	r3, [r7, #5]
 801001c:	4413      	add	r3, r2
 801001e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010020:	4618      	mov	r0, r3
 8010022:	370c      	adds	r7, #12
 8010024:	46bd      	mov	sp, r7
 8010026:	f85d 7b04 	ldr.w	r7, [sp], #4
 801002a:	4770      	bx	lr
 801002c:	20004ae8 	.word	0x20004ae8
 8010030:	20004ae4 	.word	0x20004ae4
 8010034:	20004ae2 	.word	0x20004ae2
 8010038:	20004adc 	.word	0x20004adc

0801003c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 801003c:	b580      	push	{r7, lr}
 801003e:	b084      	sub	sp, #16
 8010040:	af00      	add	r7, sp, #0
 8010042:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	2b00      	cmp	r3, #0
 8010048:	d106      	bne.n	8010058 <tcp_parseopt+0x1c>
 801004a:	4b32      	ldr	r3, [pc, #200]	; (8010114 <tcp_parseopt+0xd8>)
 801004c:	f240 727d 	movw	r2, #1917	; 0x77d
 8010050:	4931      	ldr	r1, [pc, #196]	; (8010118 <tcp_parseopt+0xdc>)
 8010052:	4832      	ldr	r0, [pc, #200]	; (801011c <tcp_parseopt+0xe0>)
 8010054:	f005 fa12 	bl	801547c <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8010058:	4b31      	ldr	r3, [pc, #196]	; (8010120 <tcp_parseopt+0xe4>)
 801005a:	881b      	ldrh	r3, [r3, #0]
 801005c:	2b00      	cmp	r3, #0
 801005e:	d055      	beq.n	801010c <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8010060:	4b30      	ldr	r3, [pc, #192]	; (8010124 <tcp_parseopt+0xe8>)
 8010062:	2200      	movs	r2, #0
 8010064:	801a      	strh	r2, [r3, #0]
 8010066:	e045      	b.n	80100f4 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8010068:	f7ff ffb2 	bl	800ffd0 <tcp_get_next_optbyte>
 801006c:	4603      	mov	r3, r0
 801006e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8010070:	7bfb      	ldrb	r3, [r7, #15]
 8010072:	2b02      	cmp	r3, #2
 8010074:	d006      	beq.n	8010084 <tcp_parseopt+0x48>
 8010076:	2b02      	cmp	r3, #2
 8010078:	dc2b      	bgt.n	80100d2 <tcp_parseopt+0x96>
 801007a:	2b00      	cmp	r3, #0
 801007c:	d041      	beq.n	8010102 <tcp_parseopt+0xc6>
 801007e:	2b01      	cmp	r3, #1
 8010080:	d127      	bne.n	80100d2 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8010082:	e037      	b.n	80100f4 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8010084:	f7ff ffa4 	bl	800ffd0 <tcp_get_next_optbyte>
 8010088:	4603      	mov	r3, r0
 801008a:	2b04      	cmp	r3, #4
 801008c:	d13b      	bne.n	8010106 <tcp_parseopt+0xca>
 801008e:	4b25      	ldr	r3, [pc, #148]	; (8010124 <tcp_parseopt+0xe8>)
 8010090:	881b      	ldrh	r3, [r3, #0]
 8010092:	3301      	adds	r3, #1
 8010094:	4a22      	ldr	r2, [pc, #136]	; (8010120 <tcp_parseopt+0xe4>)
 8010096:	8812      	ldrh	r2, [r2, #0]
 8010098:	4293      	cmp	r3, r2
 801009a:	da34      	bge.n	8010106 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801009c:	f7ff ff98 	bl	800ffd0 <tcp_get_next_optbyte>
 80100a0:	4603      	mov	r3, r0
 80100a2:	b29b      	uxth	r3, r3
 80100a4:	021b      	lsls	r3, r3, #8
 80100a6:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 80100a8:	f7ff ff92 	bl	800ffd0 <tcp_get_next_optbyte>
 80100ac:	4603      	mov	r3, r0
 80100ae:	b29a      	uxth	r2, r3
 80100b0:	89bb      	ldrh	r3, [r7, #12]
 80100b2:	4313      	orrs	r3, r2
 80100b4:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80100b6:	89bb      	ldrh	r3, [r7, #12]
 80100b8:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80100bc:	d804      	bhi.n	80100c8 <tcp_parseopt+0x8c>
 80100be:	89bb      	ldrh	r3, [r7, #12]
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	d001      	beq.n	80100c8 <tcp_parseopt+0x8c>
 80100c4:	89ba      	ldrh	r2, [r7, #12]
 80100c6:	e001      	b.n	80100cc <tcp_parseopt+0x90>
 80100c8:	f44f 7206 	mov.w	r2, #536	; 0x218
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 80100d0:	e010      	b.n	80100f4 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 80100d2:	f7ff ff7d 	bl	800ffd0 <tcp_get_next_optbyte>
 80100d6:	4603      	mov	r3, r0
 80100d8:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 80100da:	7afb      	ldrb	r3, [r7, #11]
 80100dc:	2b01      	cmp	r3, #1
 80100de:	d914      	bls.n	801010a <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 80100e0:	7afb      	ldrb	r3, [r7, #11]
 80100e2:	b29a      	uxth	r2, r3
 80100e4:	4b0f      	ldr	r3, [pc, #60]	; (8010124 <tcp_parseopt+0xe8>)
 80100e6:	881b      	ldrh	r3, [r3, #0]
 80100e8:	4413      	add	r3, r2
 80100ea:	b29b      	uxth	r3, r3
 80100ec:	3b02      	subs	r3, #2
 80100ee:	b29a      	uxth	r2, r3
 80100f0:	4b0c      	ldr	r3, [pc, #48]	; (8010124 <tcp_parseopt+0xe8>)
 80100f2:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80100f4:	4b0b      	ldr	r3, [pc, #44]	; (8010124 <tcp_parseopt+0xe8>)
 80100f6:	881a      	ldrh	r2, [r3, #0]
 80100f8:	4b09      	ldr	r3, [pc, #36]	; (8010120 <tcp_parseopt+0xe4>)
 80100fa:	881b      	ldrh	r3, [r3, #0]
 80100fc:	429a      	cmp	r2, r3
 80100fe:	d3b3      	bcc.n	8010068 <tcp_parseopt+0x2c>
 8010100:	e004      	b.n	801010c <tcp_parseopt+0xd0>
          return;
 8010102:	bf00      	nop
 8010104:	e002      	b.n	801010c <tcp_parseopt+0xd0>
            return;
 8010106:	bf00      	nop
 8010108:	e000      	b.n	801010c <tcp_parseopt+0xd0>
            return;
 801010a:	bf00      	nop
      }
    }
  }
}
 801010c:	3710      	adds	r7, #16
 801010e:	46bd      	mov	sp, r7
 8010110:	bd80      	pop	{r7, pc}
 8010112:	bf00      	nop
 8010114:	08018120 	.word	0x08018120
 8010118:	08018584 	.word	0x08018584
 801011c:	0801816c 	.word	0x0801816c
 8010120:	20004ae0 	.word	0x20004ae0
 8010124:	20004ae8 	.word	0x20004ae8

08010128 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8010128:	b480      	push	{r7}
 801012a:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 801012c:	4b05      	ldr	r3, [pc, #20]	; (8010144 <tcp_trigger_input_pcb_close+0x1c>)
 801012e:	781b      	ldrb	r3, [r3, #0]
 8010130:	f043 0310 	orr.w	r3, r3, #16
 8010134:	b2da      	uxtb	r2, r3
 8010136:	4b03      	ldr	r3, [pc, #12]	; (8010144 <tcp_trigger_input_pcb_close+0x1c>)
 8010138:	701a      	strb	r2, [r3, #0]
}
 801013a:	bf00      	nop
 801013c:	46bd      	mov	sp, r7
 801013e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010142:	4770      	bx	lr
 8010144:	20004af9 	.word	0x20004af9

08010148 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8010148:	b580      	push	{r7, lr}
 801014a:	b084      	sub	sp, #16
 801014c:	af00      	add	r7, sp, #0
 801014e:	60f8      	str	r0, [r7, #12]
 8010150:	60b9      	str	r1, [r7, #8]
 8010152:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8010154:	68fb      	ldr	r3, [r7, #12]
 8010156:	2b00      	cmp	r3, #0
 8010158:	d00a      	beq.n	8010170 <tcp_route+0x28>
 801015a:	68fb      	ldr	r3, [r7, #12]
 801015c:	7a1b      	ldrb	r3, [r3, #8]
 801015e:	2b00      	cmp	r3, #0
 8010160:	d006      	beq.n	8010170 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8010162:	68fb      	ldr	r3, [r7, #12]
 8010164:	7a1b      	ldrb	r3, [r3, #8]
 8010166:	4618      	mov	r0, r3
 8010168:	f7fb f852 	bl	800b210 <netif_get_by_index>
 801016c:	4603      	mov	r3, r0
 801016e:	e003      	b.n	8010178 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8010170:	6878      	ldr	r0, [r7, #4]
 8010172:	f003 fc4b 	bl	8013a0c <ip4_route>
 8010176:	4603      	mov	r3, r0
  }
}
 8010178:	4618      	mov	r0, r3
 801017a:	3710      	adds	r7, #16
 801017c:	46bd      	mov	sp, r7
 801017e:	bd80      	pop	{r7, pc}

08010180 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8010180:	b590      	push	{r4, r7, lr}
 8010182:	b087      	sub	sp, #28
 8010184:	af00      	add	r7, sp, #0
 8010186:	60f8      	str	r0, [r7, #12]
 8010188:	60b9      	str	r1, [r7, #8]
 801018a:	603b      	str	r3, [r7, #0]
 801018c:	4613      	mov	r3, r2
 801018e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8010190:	68fb      	ldr	r3, [r7, #12]
 8010192:	2b00      	cmp	r3, #0
 8010194:	d105      	bne.n	80101a2 <tcp_create_segment+0x22>
 8010196:	4b44      	ldr	r3, [pc, #272]	; (80102a8 <tcp_create_segment+0x128>)
 8010198:	22a3      	movs	r2, #163	; 0xa3
 801019a:	4944      	ldr	r1, [pc, #272]	; (80102ac <tcp_create_segment+0x12c>)
 801019c:	4844      	ldr	r0, [pc, #272]	; (80102b0 <tcp_create_segment+0x130>)
 801019e:	f005 f96d 	bl	801547c <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 80101a2:	68bb      	ldr	r3, [r7, #8]
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	d105      	bne.n	80101b4 <tcp_create_segment+0x34>
 80101a8:	4b3f      	ldr	r3, [pc, #252]	; (80102a8 <tcp_create_segment+0x128>)
 80101aa:	22a4      	movs	r2, #164	; 0xa4
 80101ac:	4941      	ldr	r1, [pc, #260]	; (80102b4 <tcp_create_segment+0x134>)
 80101ae:	4840      	ldr	r0, [pc, #256]	; (80102b0 <tcp_create_segment+0x130>)
 80101b0:	f005 f964 	bl	801547c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80101b4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80101b8:	009b      	lsls	r3, r3, #2
 80101ba:	b2db      	uxtb	r3, r3
 80101bc:	f003 0304 	and.w	r3, r3, #4
 80101c0:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80101c2:	2003      	movs	r0, #3
 80101c4:	f7fa fcbc 	bl	800ab40 <memp_malloc>
 80101c8:	6138      	str	r0, [r7, #16]
 80101ca:	693b      	ldr	r3, [r7, #16]
 80101cc:	2b00      	cmp	r3, #0
 80101ce:	d104      	bne.n	80101da <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 80101d0:	68b8      	ldr	r0, [r7, #8]
 80101d2:	f7fb fbab 	bl	800b92c <pbuf_free>
    return NULL;
 80101d6:	2300      	movs	r3, #0
 80101d8:	e061      	b.n	801029e <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 80101da:	693b      	ldr	r3, [r7, #16]
 80101dc:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80101e0:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 80101e2:	693b      	ldr	r3, [r7, #16]
 80101e4:	2200      	movs	r2, #0
 80101e6:	601a      	str	r2, [r3, #0]
  seg->p = p;
 80101e8:	693b      	ldr	r3, [r7, #16]
 80101ea:	68ba      	ldr	r2, [r7, #8]
 80101ec:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80101ee:	68bb      	ldr	r3, [r7, #8]
 80101f0:	891a      	ldrh	r2, [r3, #8]
 80101f2:	7dfb      	ldrb	r3, [r7, #23]
 80101f4:	b29b      	uxth	r3, r3
 80101f6:	429a      	cmp	r2, r3
 80101f8:	d205      	bcs.n	8010206 <tcp_create_segment+0x86>
 80101fa:	4b2b      	ldr	r3, [pc, #172]	; (80102a8 <tcp_create_segment+0x128>)
 80101fc:	22b0      	movs	r2, #176	; 0xb0
 80101fe:	492e      	ldr	r1, [pc, #184]	; (80102b8 <tcp_create_segment+0x138>)
 8010200:	482b      	ldr	r0, [pc, #172]	; (80102b0 <tcp_create_segment+0x130>)
 8010202:	f005 f93b 	bl	801547c <iprintf>
  seg->len = p->tot_len - optlen;
 8010206:	68bb      	ldr	r3, [r7, #8]
 8010208:	891a      	ldrh	r2, [r3, #8]
 801020a:	7dfb      	ldrb	r3, [r7, #23]
 801020c:	b29b      	uxth	r3, r3
 801020e:	1ad3      	subs	r3, r2, r3
 8010210:	b29a      	uxth	r2, r3
 8010212:	693b      	ldr	r3, [r7, #16]
 8010214:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8010216:	2114      	movs	r1, #20
 8010218:	68b8      	ldr	r0, [r7, #8]
 801021a:	f7fb faf1 	bl	800b800 <pbuf_add_header>
 801021e:	4603      	mov	r3, r0
 8010220:	2b00      	cmp	r3, #0
 8010222:	d004      	beq.n	801022e <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8010224:	6938      	ldr	r0, [r7, #16]
 8010226:	f7fd f804 	bl	800d232 <tcp_seg_free>
    return NULL;
 801022a:	2300      	movs	r3, #0
 801022c:	e037      	b.n	801029e <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801022e:	693b      	ldr	r3, [r7, #16]
 8010230:	685b      	ldr	r3, [r3, #4]
 8010232:	685a      	ldr	r2, [r3, #4]
 8010234:	693b      	ldr	r3, [r7, #16]
 8010236:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8010238:	68fb      	ldr	r3, [r7, #12]
 801023a:	8ada      	ldrh	r2, [r3, #22]
 801023c:	693b      	ldr	r3, [r7, #16]
 801023e:	68dc      	ldr	r4, [r3, #12]
 8010240:	4610      	mov	r0, r2
 8010242:	f7f9 ffc7 	bl	800a1d4 <lwip_htons>
 8010246:	4603      	mov	r3, r0
 8010248:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801024a:	68fb      	ldr	r3, [r7, #12]
 801024c:	8b1a      	ldrh	r2, [r3, #24]
 801024e:	693b      	ldr	r3, [r7, #16]
 8010250:	68dc      	ldr	r4, [r3, #12]
 8010252:	4610      	mov	r0, r2
 8010254:	f7f9 ffbe 	bl	800a1d4 <lwip_htons>
 8010258:	4603      	mov	r3, r0
 801025a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801025c:	693b      	ldr	r3, [r7, #16]
 801025e:	68dc      	ldr	r4, [r3, #12]
 8010260:	6838      	ldr	r0, [r7, #0]
 8010262:	f7f9 ffcc 	bl	800a1fe <lwip_htonl>
 8010266:	4603      	mov	r3, r0
 8010268:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801026a:	7dfb      	ldrb	r3, [r7, #23]
 801026c:	089b      	lsrs	r3, r3, #2
 801026e:	b2db      	uxtb	r3, r3
 8010270:	b29b      	uxth	r3, r3
 8010272:	3305      	adds	r3, #5
 8010274:	b29b      	uxth	r3, r3
 8010276:	031b      	lsls	r3, r3, #12
 8010278:	b29a      	uxth	r2, r3
 801027a:	79fb      	ldrb	r3, [r7, #7]
 801027c:	b29b      	uxth	r3, r3
 801027e:	4313      	orrs	r3, r2
 8010280:	b29a      	uxth	r2, r3
 8010282:	693b      	ldr	r3, [r7, #16]
 8010284:	68dc      	ldr	r4, [r3, #12]
 8010286:	4610      	mov	r0, r2
 8010288:	f7f9 ffa4 	bl	800a1d4 <lwip_htons>
 801028c:	4603      	mov	r3, r0
 801028e:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8010290:	693b      	ldr	r3, [r7, #16]
 8010292:	68db      	ldr	r3, [r3, #12]
 8010294:	2200      	movs	r2, #0
 8010296:	749a      	strb	r2, [r3, #18]
 8010298:	2200      	movs	r2, #0
 801029a:	74da      	strb	r2, [r3, #19]
  return seg;
 801029c:	693b      	ldr	r3, [r7, #16]
}
 801029e:	4618      	mov	r0, r3
 80102a0:	371c      	adds	r7, #28
 80102a2:	46bd      	mov	sp, r7
 80102a4:	bd90      	pop	{r4, r7, pc}
 80102a6:	bf00      	nop
 80102a8:	080185a0 	.word	0x080185a0
 80102ac:	080185d4 	.word	0x080185d4
 80102b0:	080185f4 	.word	0x080185f4
 80102b4:	0801861c 	.word	0x0801861c
 80102b8:	08018640 	.word	0x08018640

080102bc <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 80102bc:	b580      	push	{r7, lr}
 80102be:	b086      	sub	sp, #24
 80102c0:	af00      	add	r7, sp, #0
 80102c2:	607b      	str	r3, [r7, #4]
 80102c4:	4603      	mov	r3, r0
 80102c6:	73fb      	strb	r3, [r7, #15]
 80102c8:	460b      	mov	r3, r1
 80102ca:	81bb      	strh	r3, [r7, #12]
 80102cc:	4613      	mov	r3, r2
 80102ce:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 80102d0:	89bb      	ldrh	r3, [r7, #12]
 80102d2:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	2b00      	cmp	r3, #0
 80102d8:	d105      	bne.n	80102e6 <tcp_pbuf_prealloc+0x2a>
 80102da:	4b30      	ldr	r3, [pc, #192]	; (801039c <tcp_pbuf_prealloc+0xe0>)
 80102dc:	22e8      	movs	r2, #232	; 0xe8
 80102de:	4930      	ldr	r1, [pc, #192]	; (80103a0 <tcp_pbuf_prealloc+0xe4>)
 80102e0:	4830      	ldr	r0, [pc, #192]	; (80103a4 <tcp_pbuf_prealloc+0xe8>)
 80102e2:	f005 f8cb 	bl	801547c <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 80102e6:	6a3b      	ldr	r3, [r7, #32]
 80102e8:	2b00      	cmp	r3, #0
 80102ea:	d105      	bne.n	80102f8 <tcp_pbuf_prealloc+0x3c>
 80102ec:	4b2b      	ldr	r3, [pc, #172]	; (801039c <tcp_pbuf_prealloc+0xe0>)
 80102ee:	22e9      	movs	r2, #233	; 0xe9
 80102f0:	492d      	ldr	r1, [pc, #180]	; (80103a8 <tcp_pbuf_prealloc+0xec>)
 80102f2:	482c      	ldr	r0, [pc, #176]	; (80103a4 <tcp_pbuf_prealloc+0xe8>)
 80102f4:	f005 f8c2 	bl	801547c <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 80102f8:	89ba      	ldrh	r2, [r7, #12]
 80102fa:	897b      	ldrh	r3, [r7, #10]
 80102fc:	429a      	cmp	r2, r3
 80102fe:	d221      	bcs.n	8010344 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8010300:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8010304:	f003 0302 	and.w	r3, r3, #2
 8010308:	2b00      	cmp	r3, #0
 801030a:	d111      	bne.n	8010330 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 801030c:	6a3b      	ldr	r3, [r7, #32]
 801030e:	8b5b      	ldrh	r3, [r3, #26]
 8010310:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8010314:	2b00      	cmp	r3, #0
 8010316:	d115      	bne.n	8010344 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8010318:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801031c:	2b00      	cmp	r3, #0
 801031e:	d007      	beq.n	8010330 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8010320:	6a3b      	ldr	r3, [r7, #32]
 8010322:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8010324:	2b00      	cmp	r3, #0
 8010326:	d103      	bne.n	8010330 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8010328:	6a3b      	ldr	r3, [r7, #32]
 801032a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 801032c:	2b00      	cmp	r3, #0
 801032e:	d009      	beq.n	8010344 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8010330:	89bb      	ldrh	r3, [r7, #12]
 8010332:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8010336:	f023 0203 	bic.w	r2, r3, #3
 801033a:	897b      	ldrh	r3, [r7, #10]
 801033c:	4293      	cmp	r3, r2
 801033e:	bf28      	it	cs
 8010340:	4613      	movcs	r3, r2
 8010342:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8010344:	8af9      	ldrh	r1, [r7, #22]
 8010346:	7bfb      	ldrb	r3, [r7, #15]
 8010348:	f44f 7220 	mov.w	r2, #640	; 0x280
 801034c:	4618      	mov	r0, r3
 801034e:	f7fb f809 	bl	800b364 <pbuf_alloc>
 8010352:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010354:	693b      	ldr	r3, [r7, #16]
 8010356:	2b00      	cmp	r3, #0
 8010358:	d101      	bne.n	801035e <tcp_pbuf_prealloc+0xa2>
    return NULL;
 801035a:	2300      	movs	r3, #0
 801035c:	e019      	b.n	8010392 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 801035e:	693b      	ldr	r3, [r7, #16]
 8010360:	681b      	ldr	r3, [r3, #0]
 8010362:	2b00      	cmp	r3, #0
 8010364:	d006      	beq.n	8010374 <tcp_pbuf_prealloc+0xb8>
 8010366:	4b0d      	ldr	r3, [pc, #52]	; (801039c <tcp_pbuf_prealloc+0xe0>)
 8010368:	f240 120b 	movw	r2, #267	; 0x10b
 801036c:	490f      	ldr	r1, [pc, #60]	; (80103ac <tcp_pbuf_prealloc+0xf0>)
 801036e:	480d      	ldr	r0, [pc, #52]	; (80103a4 <tcp_pbuf_prealloc+0xe8>)
 8010370:	f005 f884 	bl	801547c <iprintf>
  *oversize = p->len - length;
 8010374:	693b      	ldr	r3, [r7, #16]
 8010376:	895a      	ldrh	r2, [r3, #10]
 8010378:	89bb      	ldrh	r3, [r7, #12]
 801037a:	1ad3      	subs	r3, r2, r3
 801037c:	b29a      	uxth	r2, r3
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8010382:	693b      	ldr	r3, [r7, #16]
 8010384:	89ba      	ldrh	r2, [r7, #12]
 8010386:	811a      	strh	r2, [r3, #8]
 8010388:	693b      	ldr	r3, [r7, #16]
 801038a:	891a      	ldrh	r2, [r3, #8]
 801038c:	693b      	ldr	r3, [r7, #16]
 801038e:	815a      	strh	r2, [r3, #10]
  return p;
 8010390:	693b      	ldr	r3, [r7, #16]
}
 8010392:	4618      	mov	r0, r3
 8010394:	3718      	adds	r7, #24
 8010396:	46bd      	mov	sp, r7
 8010398:	bd80      	pop	{r7, pc}
 801039a:	bf00      	nop
 801039c:	080185a0 	.word	0x080185a0
 80103a0:	08018658 	.word	0x08018658
 80103a4:	080185f4 	.word	0x080185f4
 80103a8:	0801867c 	.word	0x0801867c
 80103ac:	0801869c 	.word	0x0801869c

080103b0 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 80103b0:	b580      	push	{r7, lr}
 80103b2:	b082      	sub	sp, #8
 80103b4:	af00      	add	r7, sp, #0
 80103b6:	6078      	str	r0, [r7, #4]
 80103b8:	460b      	mov	r3, r1
 80103ba:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	2b00      	cmp	r3, #0
 80103c0:	d106      	bne.n	80103d0 <tcp_write_checks+0x20>
 80103c2:	4b33      	ldr	r3, [pc, #204]	; (8010490 <tcp_write_checks+0xe0>)
 80103c4:	f240 1233 	movw	r2, #307	; 0x133
 80103c8:	4932      	ldr	r1, [pc, #200]	; (8010494 <tcp_write_checks+0xe4>)
 80103ca:	4833      	ldr	r0, [pc, #204]	; (8010498 <tcp_write_checks+0xe8>)
 80103cc:	f005 f856 	bl	801547c <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	7d1b      	ldrb	r3, [r3, #20]
 80103d4:	2b04      	cmp	r3, #4
 80103d6:	d00e      	beq.n	80103f6 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 80103dc:	2b07      	cmp	r3, #7
 80103de:	d00a      	beq.n	80103f6 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 80103e4:	2b02      	cmp	r3, #2
 80103e6:	d006      	beq.n	80103f6 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 80103ec:	2b03      	cmp	r3, #3
 80103ee:	d002      	beq.n	80103f6 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 80103f0:	f06f 030a 	mvn.w	r3, #10
 80103f4:	e048      	b.n	8010488 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 80103f6:	887b      	ldrh	r3, [r7, #2]
 80103f8:	2b00      	cmp	r3, #0
 80103fa:	d101      	bne.n	8010400 <tcp_write_checks+0x50>
    return ERR_OK;
 80103fc:	2300      	movs	r3, #0
 80103fe:	e043      	b.n	8010488 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8010406:	887a      	ldrh	r2, [r7, #2]
 8010408:	429a      	cmp	r2, r3
 801040a:	d909      	bls.n	8010420 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	8b5b      	ldrh	r3, [r3, #26]
 8010410:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010414:	b29a      	uxth	r2, r3
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801041a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801041e:	e033      	b.n	8010488 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010426:	2b08      	cmp	r3, #8
 8010428:	d909      	bls.n	801043e <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	8b5b      	ldrh	r3, [r3, #26]
 801042e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010432:	b29a      	uxth	r2, r3
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8010438:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801043c:	e024      	b.n	8010488 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010444:	2b00      	cmp	r3, #0
 8010446:	d00f      	beq.n	8010468 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801044c:	2b00      	cmp	r3, #0
 801044e:	d11a      	bne.n	8010486 <tcp_write_checks+0xd6>
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010454:	2b00      	cmp	r3, #0
 8010456:	d116      	bne.n	8010486 <tcp_write_checks+0xd6>
 8010458:	4b0d      	ldr	r3, [pc, #52]	; (8010490 <tcp_write_checks+0xe0>)
 801045a:	f240 1255 	movw	r2, #341	; 0x155
 801045e:	490f      	ldr	r1, [pc, #60]	; (801049c <tcp_write_checks+0xec>)
 8010460:	480d      	ldr	r0, [pc, #52]	; (8010498 <tcp_write_checks+0xe8>)
 8010462:	f005 f80b 	bl	801547c <iprintf>
 8010466:	e00e      	b.n	8010486 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801046c:	2b00      	cmp	r3, #0
 801046e:	d103      	bne.n	8010478 <tcp_write_checks+0xc8>
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010474:	2b00      	cmp	r3, #0
 8010476:	d006      	beq.n	8010486 <tcp_write_checks+0xd6>
 8010478:	4b05      	ldr	r3, [pc, #20]	; (8010490 <tcp_write_checks+0xe0>)
 801047a:	f44f 72ac 	mov.w	r2, #344	; 0x158
 801047e:	4908      	ldr	r1, [pc, #32]	; (80104a0 <tcp_write_checks+0xf0>)
 8010480:	4805      	ldr	r0, [pc, #20]	; (8010498 <tcp_write_checks+0xe8>)
 8010482:	f004 fffb 	bl	801547c <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8010486:	2300      	movs	r3, #0
}
 8010488:	4618      	mov	r0, r3
 801048a:	3708      	adds	r7, #8
 801048c:	46bd      	mov	sp, r7
 801048e:	bd80      	pop	{r7, pc}
 8010490:	080185a0 	.word	0x080185a0
 8010494:	080186b0 	.word	0x080186b0
 8010498:	080185f4 	.word	0x080185f4
 801049c:	080186d0 	.word	0x080186d0
 80104a0:	0801870c 	.word	0x0801870c

080104a4 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 80104a4:	b590      	push	{r4, r7, lr}
 80104a6:	b09b      	sub	sp, #108	; 0x6c
 80104a8:	af04      	add	r7, sp, #16
 80104aa:	60f8      	str	r0, [r7, #12]
 80104ac:	60b9      	str	r1, [r7, #8]
 80104ae:	4611      	mov	r1, r2
 80104b0:	461a      	mov	r2, r3
 80104b2:	460b      	mov	r3, r1
 80104b4:	80fb      	strh	r3, [r7, #6]
 80104b6:	4613      	mov	r3, r2
 80104b8:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 80104ba:	2300      	movs	r3, #0
 80104bc:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 80104be:	2300      	movs	r3, #0
 80104c0:	653b      	str	r3, [r7, #80]	; 0x50
 80104c2:	2300      	movs	r3, #0
 80104c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80104c6:	2300      	movs	r3, #0
 80104c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80104ca:	2300      	movs	r3, #0
 80104cc:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 80104ce:	2300      	movs	r3, #0
 80104d0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 80104d4:	2300      	movs	r3, #0
 80104d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 80104da:	2300      	movs	r3, #0
 80104dc:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 80104de:	2300      	movs	r3, #0
 80104e0:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 80104e2:	2300      	movs	r3, #0
 80104e4:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 80104e6:	68fb      	ldr	r3, [r7, #12]
 80104e8:	2b00      	cmp	r3, #0
 80104ea:	d109      	bne.n	8010500 <tcp_write+0x5c>
 80104ec:	4ba4      	ldr	r3, [pc, #656]	; (8010780 <tcp_write+0x2dc>)
 80104ee:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 80104f2:	49a4      	ldr	r1, [pc, #656]	; (8010784 <tcp_write+0x2e0>)
 80104f4:	48a4      	ldr	r0, [pc, #656]	; (8010788 <tcp_write+0x2e4>)
 80104f6:	f004 ffc1 	bl	801547c <iprintf>
 80104fa:	f06f 030f 	mvn.w	r3, #15
 80104fe:	e32a      	b.n	8010b56 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8010500:	68fb      	ldr	r3, [r7, #12]
 8010502:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010506:	085b      	lsrs	r3, r3, #1
 8010508:	b29a      	uxth	r2, r3
 801050a:	68fb      	ldr	r3, [r7, #12]
 801050c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801050e:	4293      	cmp	r3, r2
 8010510:	bf28      	it	cs
 8010512:	4613      	movcs	r3, r2
 8010514:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8010516:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010518:	2b00      	cmp	r3, #0
 801051a:	d102      	bne.n	8010522 <tcp_write+0x7e>
 801051c:	68fb      	ldr	r3, [r7, #12]
 801051e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010520:	e000      	b.n	8010524 <tcp_write+0x80>
 8010522:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010524:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8010526:	68bb      	ldr	r3, [r7, #8]
 8010528:	2b00      	cmp	r3, #0
 801052a:	d109      	bne.n	8010540 <tcp_write+0x9c>
 801052c:	4b94      	ldr	r3, [pc, #592]	; (8010780 <tcp_write+0x2dc>)
 801052e:	f240 12ad 	movw	r2, #429	; 0x1ad
 8010532:	4996      	ldr	r1, [pc, #600]	; (801078c <tcp_write+0x2e8>)
 8010534:	4894      	ldr	r0, [pc, #592]	; (8010788 <tcp_write+0x2e4>)
 8010536:	f004 ffa1 	bl	801547c <iprintf>
 801053a:	f06f 030f 	mvn.w	r3, #15
 801053e:	e30a      	b.n	8010b56 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8010540:	88fb      	ldrh	r3, [r7, #6]
 8010542:	4619      	mov	r1, r3
 8010544:	68f8      	ldr	r0, [r7, #12]
 8010546:	f7ff ff33 	bl	80103b0 <tcp_write_checks>
 801054a:	4603      	mov	r3, r0
 801054c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8010550:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8010554:	2b00      	cmp	r3, #0
 8010556:	d002      	beq.n	801055e <tcp_write+0xba>
    return err;
 8010558:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 801055c:	e2fb      	b.n	8010b56 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 801055e:	68fb      	ldr	r3, [r7, #12]
 8010560:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010564:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8010568:	2300      	movs	r3, #0
 801056a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 801056e:	68fb      	ldr	r3, [r7, #12]
 8010570:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010572:	2b00      	cmp	r3, #0
 8010574:	f000 80f6 	beq.w	8010764 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010578:	68fb      	ldr	r3, [r7, #12]
 801057a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801057c:	653b      	str	r3, [r7, #80]	; 0x50
 801057e:	e002      	b.n	8010586 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8010580:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010582:	681b      	ldr	r3, [r3, #0]
 8010584:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010586:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010588:	681b      	ldr	r3, [r3, #0]
 801058a:	2b00      	cmp	r3, #0
 801058c:	d1f8      	bne.n	8010580 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 801058e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010590:	7a9b      	ldrb	r3, [r3, #10]
 8010592:	009b      	lsls	r3, r3, #2
 8010594:	b29b      	uxth	r3, r3
 8010596:	f003 0304 	and.w	r3, r3, #4
 801059a:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801059c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801059e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80105a0:	891b      	ldrh	r3, [r3, #8]
 80105a2:	4619      	mov	r1, r3
 80105a4:	8c3b      	ldrh	r3, [r7, #32]
 80105a6:	440b      	add	r3, r1
 80105a8:	429a      	cmp	r2, r3
 80105aa:	da06      	bge.n	80105ba <tcp_write+0x116>
 80105ac:	4b74      	ldr	r3, [pc, #464]	; (8010780 <tcp_write+0x2dc>)
 80105ae:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80105b2:	4977      	ldr	r1, [pc, #476]	; (8010790 <tcp_write+0x2ec>)
 80105b4:	4874      	ldr	r0, [pc, #464]	; (8010788 <tcp_write+0x2e4>)
 80105b6:	f004 ff61 	bl	801547c <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 80105ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80105bc:	891a      	ldrh	r2, [r3, #8]
 80105be:	8c3b      	ldrh	r3, [r7, #32]
 80105c0:	4413      	add	r3, r2
 80105c2:	b29b      	uxth	r3, r3
 80105c4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80105c6:	1ad3      	subs	r3, r2, r3
 80105c8:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 80105ca:	68fb      	ldr	r3, [r7, #12]
 80105cc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80105d0:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 80105d2:	8a7b      	ldrh	r3, [r7, #18]
 80105d4:	2b00      	cmp	r3, #0
 80105d6:	d026      	beq.n	8010626 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 80105d8:	8a7b      	ldrh	r3, [r7, #18]
 80105da:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80105dc:	429a      	cmp	r2, r3
 80105de:	d206      	bcs.n	80105ee <tcp_write+0x14a>
 80105e0:	4b67      	ldr	r3, [pc, #412]	; (8010780 <tcp_write+0x2dc>)
 80105e2:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 80105e6:	496b      	ldr	r1, [pc, #428]	; (8010794 <tcp_write+0x2f0>)
 80105e8:	4867      	ldr	r0, [pc, #412]	; (8010788 <tcp_write+0x2e4>)
 80105ea:	f004 ff47 	bl	801547c <iprintf>
      seg = last_unsent;
 80105ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80105f0:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 80105f2:	8a7b      	ldrh	r3, [r7, #18]
 80105f4:	88fa      	ldrh	r2, [r7, #6]
 80105f6:	4293      	cmp	r3, r2
 80105f8:	bf28      	it	cs
 80105fa:	4613      	movcs	r3, r2
 80105fc:	b29b      	uxth	r3, r3
 80105fe:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8010600:	4293      	cmp	r3, r2
 8010602:	bf28      	it	cs
 8010604:	4613      	movcs	r3, r2
 8010606:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8010608:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801060c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801060e:	4413      	add	r3, r2
 8010610:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8010614:	8a7a      	ldrh	r2, [r7, #18]
 8010616:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010618:	1ad3      	subs	r3, r2, r3
 801061a:	b29b      	uxth	r3, r3
 801061c:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 801061e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8010620:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010622:	1ad3      	subs	r3, r2, r3
 8010624:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8010626:	8a7b      	ldrh	r3, [r7, #18]
 8010628:	2b00      	cmp	r3, #0
 801062a:	d00b      	beq.n	8010644 <tcp_write+0x1a0>
 801062c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010630:	88fb      	ldrh	r3, [r7, #6]
 8010632:	429a      	cmp	r2, r3
 8010634:	d006      	beq.n	8010644 <tcp_write+0x1a0>
 8010636:	4b52      	ldr	r3, [pc, #328]	; (8010780 <tcp_write+0x2dc>)
 8010638:	f44f 7200 	mov.w	r2, #512	; 0x200
 801063c:	4956      	ldr	r1, [pc, #344]	; (8010798 <tcp_write+0x2f4>)
 801063e:	4852      	ldr	r0, [pc, #328]	; (8010788 <tcp_write+0x2e4>)
 8010640:	f004 ff1c 	bl	801547c <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8010644:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010648:	88fb      	ldrh	r3, [r7, #6]
 801064a:	429a      	cmp	r2, r3
 801064c:	f080 8167 	bcs.w	801091e <tcp_write+0x47a>
 8010650:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010652:	2b00      	cmp	r3, #0
 8010654:	f000 8163 	beq.w	801091e <tcp_write+0x47a>
 8010658:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801065a:	891b      	ldrh	r3, [r3, #8]
 801065c:	2b00      	cmp	r3, #0
 801065e:	f000 815e 	beq.w	801091e <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8010662:	88fa      	ldrh	r2, [r7, #6]
 8010664:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010668:	1ad2      	subs	r2, r2, r3
 801066a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801066c:	4293      	cmp	r3, r2
 801066e:	bfa8      	it	ge
 8010670:	4613      	movge	r3, r2
 8010672:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8010674:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010676:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8010678:	797b      	ldrb	r3, [r7, #5]
 801067a:	f003 0301 	and.w	r3, r3, #1
 801067e:	2b00      	cmp	r3, #0
 8010680:	d027      	beq.n	80106d2 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8010682:	f107 0012 	add.w	r0, r7, #18
 8010686:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8010688:	8bf9      	ldrh	r1, [r7, #30]
 801068a:	2301      	movs	r3, #1
 801068c:	9302      	str	r3, [sp, #8]
 801068e:	797b      	ldrb	r3, [r7, #5]
 8010690:	9301      	str	r3, [sp, #4]
 8010692:	68fb      	ldr	r3, [r7, #12]
 8010694:	9300      	str	r3, [sp, #0]
 8010696:	4603      	mov	r3, r0
 8010698:	2000      	movs	r0, #0
 801069a:	f7ff fe0f 	bl	80102bc <tcp_pbuf_prealloc>
 801069e:	6578      	str	r0, [r7, #84]	; 0x54
 80106a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80106a2:	2b00      	cmp	r3, #0
 80106a4:	f000 8225 	beq.w	8010af2 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 80106a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80106aa:	6858      	ldr	r0, [r3, #4]
 80106ac:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80106b0:	68ba      	ldr	r2, [r7, #8]
 80106b2:	4413      	add	r3, r2
 80106b4:	8bfa      	ldrh	r2, [r7, #30]
 80106b6:	4619      	mov	r1, r3
 80106b8:	f004 fe6f 	bl	801539a <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 80106bc:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80106be:	f7fb f9c3 	bl	800ba48 <pbuf_clen>
 80106c2:	4603      	mov	r3, r0
 80106c4:	461a      	mov	r2, r3
 80106c6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80106ca:	4413      	add	r3, r2
 80106cc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80106d0:	e041      	b.n	8010756 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 80106d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80106d4:	685b      	ldr	r3, [r3, #4]
 80106d6:	637b      	str	r3, [r7, #52]	; 0x34
 80106d8:	e002      	b.n	80106e0 <tcp_write+0x23c>
 80106da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80106dc:	681b      	ldr	r3, [r3, #0]
 80106de:	637b      	str	r3, [r7, #52]	; 0x34
 80106e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80106e2:	681b      	ldr	r3, [r3, #0]
 80106e4:	2b00      	cmp	r3, #0
 80106e6:	d1f8      	bne.n	80106da <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80106e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80106ea:	7b1b      	ldrb	r3, [r3, #12]
 80106ec:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80106f0:	2b00      	cmp	r3, #0
 80106f2:	d115      	bne.n	8010720 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 80106f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80106f6:	685b      	ldr	r3, [r3, #4]
 80106f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80106fa:	8952      	ldrh	r2, [r2, #10]
 80106fc:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80106fe:	68ba      	ldr	r2, [r7, #8]
 8010700:	429a      	cmp	r2, r3
 8010702:	d10d      	bne.n	8010720 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8010704:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010708:	2b00      	cmp	r3, #0
 801070a:	d006      	beq.n	801071a <tcp_write+0x276>
 801070c:	4b1c      	ldr	r3, [pc, #112]	; (8010780 <tcp_write+0x2dc>)
 801070e:	f240 2231 	movw	r2, #561	; 0x231
 8010712:	4922      	ldr	r1, [pc, #136]	; (801079c <tcp_write+0x2f8>)
 8010714:	481c      	ldr	r0, [pc, #112]	; (8010788 <tcp_write+0x2e4>)
 8010716:	f004 feb1 	bl	801547c <iprintf>
          extendlen = seglen;
 801071a:	8bfb      	ldrh	r3, [r7, #30]
 801071c:	87bb      	strh	r3, [r7, #60]	; 0x3c
 801071e:	e01a      	b.n	8010756 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8010720:	8bfb      	ldrh	r3, [r7, #30]
 8010722:	2201      	movs	r2, #1
 8010724:	4619      	mov	r1, r3
 8010726:	2000      	movs	r0, #0
 8010728:	f7fa fe1c 	bl	800b364 <pbuf_alloc>
 801072c:	6578      	str	r0, [r7, #84]	; 0x54
 801072e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010730:	2b00      	cmp	r3, #0
 8010732:	f000 81e0 	beq.w	8010af6 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8010736:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801073a:	68ba      	ldr	r2, [r7, #8]
 801073c:	441a      	add	r2, r3
 801073e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010740:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8010742:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8010744:	f7fb f980 	bl	800ba48 <pbuf_clen>
 8010748:	4603      	mov	r3, r0
 801074a:	461a      	mov	r2, r3
 801074c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010750:	4413      	add	r3, r2
 8010752:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8010756:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801075a:	8bfb      	ldrh	r3, [r7, #30]
 801075c:	4413      	add	r3, r2
 801075e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8010762:	e0dc      	b.n	801091e <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8010764:	68fb      	ldr	r3, [r7, #12]
 8010766:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801076a:	2b00      	cmp	r3, #0
 801076c:	f000 80d7 	beq.w	801091e <tcp_write+0x47a>
 8010770:	4b03      	ldr	r3, [pc, #12]	; (8010780 <tcp_write+0x2dc>)
 8010772:	f240 224a 	movw	r2, #586	; 0x24a
 8010776:	490a      	ldr	r1, [pc, #40]	; (80107a0 <tcp_write+0x2fc>)
 8010778:	4803      	ldr	r0, [pc, #12]	; (8010788 <tcp_write+0x2e4>)
 801077a:	f004 fe7f 	bl	801547c <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 801077e:	e0ce      	b.n	801091e <tcp_write+0x47a>
 8010780:	080185a0 	.word	0x080185a0
 8010784:	08018740 	.word	0x08018740
 8010788:	080185f4 	.word	0x080185f4
 801078c:	08018758 	.word	0x08018758
 8010790:	0801878c 	.word	0x0801878c
 8010794:	080187a4 	.word	0x080187a4
 8010798:	080187c4 	.word	0x080187c4
 801079c:	080187e4 	.word	0x080187e4
 80107a0:	08018810 	.word	0x08018810
    struct pbuf *p;
    u16_t left = len - pos;
 80107a4:	88fa      	ldrh	r2, [r7, #6]
 80107a6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80107aa:	1ad3      	subs	r3, r2, r3
 80107ac:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 80107ae:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80107b2:	b29b      	uxth	r3, r3
 80107b4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80107b6:	1ad3      	subs	r3, r2, r3
 80107b8:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 80107ba:	8b7a      	ldrh	r2, [r7, #26]
 80107bc:	8bbb      	ldrh	r3, [r7, #28]
 80107be:	4293      	cmp	r3, r2
 80107c0:	bf28      	it	cs
 80107c2:	4613      	movcs	r3, r2
 80107c4:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 80107c6:	797b      	ldrb	r3, [r7, #5]
 80107c8:	f003 0301 	and.w	r3, r3, #1
 80107cc:	2b00      	cmp	r3, #0
 80107ce:	d036      	beq.n	801083e <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 80107d0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80107d4:	b29a      	uxth	r2, r3
 80107d6:	8b3b      	ldrh	r3, [r7, #24]
 80107d8:	4413      	add	r3, r2
 80107da:	b299      	uxth	r1, r3
 80107dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80107de:	2b00      	cmp	r3, #0
 80107e0:	bf0c      	ite	eq
 80107e2:	2301      	moveq	r3, #1
 80107e4:	2300      	movne	r3, #0
 80107e6:	b2db      	uxtb	r3, r3
 80107e8:	f107 0012 	add.w	r0, r7, #18
 80107ec:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80107ee:	9302      	str	r3, [sp, #8]
 80107f0:	797b      	ldrb	r3, [r7, #5]
 80107f2:	9301      	str	r3, [sp, #4]
 80107f4:	68fb      	ldr	r3, [r7, #12]
 80107f6:	9300      	str	r3, [sp, #0]
 80107f8:	4603      	mov	r3, r0
 80107fa:	2036      	movs	r0, #54	; 0x36
 80107fc:	f7ff fd5e 	bl	80102bc <tcp_pbuf_prealloc>
 8010800:	6338      	str	r0, [r7, #48]	; 0x30
 8010802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010804:	2b00      	cmp	r3, #0
 8010806:	f000 8178 	beq.w	8010afa <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801080a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801080c:	895b      	ldrh	r3, [r3, #10]
 801080e:	8b3a      	ldrh	r2, [r7, #24]
 8010810:	429a      	cmp	r2, r3
 8010812:	d906      	bls.n	8010822 <tcp_write+0x37e>
 8010814:	4b8c      	ldr	r3, [pc, #560]	; (8010a48 <tcp_write+0x5a4>)
 8010816:	f240 2266 	movw	r2, #614	; 0x266
 801081a:	498c      	ldr	r1, [pc, #560]	; (8010a4c <tcp_write+0x5a8>)
 801081c:	488c      	ldr	r0, [pc, #560]	; (8010a50 <tcp_write+0x5ac>)
 801081e:	f004 fe2d 	bl	801547c <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8010822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010824:	685a      	ldr	r2, [r3, #4]
 8010826:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801082a:	18d0      	adds	r0, r2, r3
 801082c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010830:	68ba      	ldr	r2, [r7, #8]
 8010832:	4413      	add	r3, r2
 8010834:	8b3a      	ldrh	r2, [r7, #24]
 8010836:	4619      	mov	r1, r3
 8010838:	f004 fdaf 	bl	801539a <memcpy>
 801083c:	e02f      	b.n	801089e <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801083e:	8a7b      	ldrh	r3, [r7, #18]
 8010840:	2b00      	cmp	r3, #0
 8010842:	d006      	beq.n	8010852 <tcp_write+0x3ae>
 8010844:	4b80      	ldr	r3, [pc, #512]	; (8010a48 <tcp_write+0x5a4>)
 8010846:	f240 2271 	movw	r2, #625	; 0x271
 801084a:	4982      	ldr	r1, [pc, #520]	; (8010a54 <tcp_write+0x5b0>)
 801084c:	4880      	ldr	r0, [pc, #512]	; (8010a50 <tcp_write+0x5ac>)
 801084e:	f004 fe15 	bl	801547c <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8010852:	8b3b      	ldrh	r3, [r7, #24]
 8010854:	2201      	movs	r2, #1
 8010856:	4619      	mov	r1, r3
 8010858:	2036      	movs	r0, #54	; 0x36
 801085a:	f7fa fd83 	bl	800b364 <pbuf_alloc>
 801085e:	6178      	str	r0, [r7, #20]
 8010860:	697b      	ldr	r3, [r7, #20]
 8010862:	2b00      	cmp	r3, #0
 8010864:	f000 814b 	beq.w	8010afe <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8010868:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801086c:	68ba      	ldr	r2, [r7, #8]
 801086e:	441a      	add	r2, r3
 8010870:	697b      	ldr	r3, [r7, #20]
 8010872:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8010874:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8010878:	b29b      	uxth	r3, r3
 801087a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801087e:	4619      	mov	r1, r3
 8010880:	2036      	movs	r0, #54	; 0x36
 8010882:	f7fa fd6f 	bl	800b364 <pbuf_alloc>
 8010886:	6338      	str	r0, [r7, #48]	; 0x30
 8010888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801088a:	2b00      	cmp	r3, #0
 801088c:	d103      	bne.n	8010896 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 801088e:	6978      	ldr	r0, [r7, #20]
 8010890:	f7fb f84c 	bl	800b92c <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8010894:	e136      	b.n	8010b04 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8010896:	6979      	ldr	r1, [r7, #20]
 8010898:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801089a:	f7fb f915 	bl	800bac8 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 801089e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80108a0:	f7fb f8d2 	bl	800ba48 <pbuf_clen>
 80108a4:	4603      	mov	r3, r0
 80108a6:	461a      	mov	r2, r3
 80108a8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80108ac:	4413      	add	r3, r2
 80108ae:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 80108b2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80108b6:	2b09      	cmp	r3, #9
 80108b8:	d903      	bls.n	80108c2 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 80108ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80108bc:	f7fb f836 	bl	800b92c <pbuf_free>
      goto memerr;
 80108c0:	e120      	b.n	8010b04 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 80108c2:	68fb      	ldr	r3, [r7, #12]
 80108c4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80108c6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80108ca:	441a      	add	r2, r3
 80108cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80108d0:	9300      	str	r3, [sp, #0]
 80108d2:	4613      	mov	r3, r2
 80108d4:	2200      	movs	r2, #0
 80108d6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80108d8:	68f8      	ldr	r0, [r7, #12]
 80108da:	f7ff fc51 	bl	8010180 <tcp_create_segment>
 80108de:	64f8      	str	r0, [r7, #76]	; 0x4c
 80108e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80108e2:	2b00      	cmp	r3, #0
 80108e4:	f000 810d 	beq.w	8010b02 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 80108e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80108ea:	2b00      	cmp	r3, #0
 80108ec:	d102      	bne.n	80108f4 <tcp_write+0x450>
      queue = seg;
 80108ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80108f0:	647b      	str	r3, [r7, #68]	; 0x44
 80108f2:	e00c      	b.n	801090e <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 80108f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80108f6:	2b00      	cmp	r3, #0
 80108f8:	d106      	bne.n	8010908 <tcp_write+0x464>
 80108fa:	4b53      	ldr	r3, [pc, #332]	; (8010a48 <tcp_write+0x5a4>)
 80108fc:	f240 22ab 	movw	r2, #683	; 0x2ab
 8010900:	4955      	ldr	r1, [pc, #340]	; (8010a58 <tcp_write+0x5b4>)
 8010902:	4853      	ldr	r0, [pc, #332]	; (8010a50 <tcp_write+0x5ac>)
 8010904:	f004 fdba 	bl	801547c <iprintf>
      prev_seg->next = seg;
 8010908:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801090a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801090c:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 801090e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010910:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8010912:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010916:	8b3b      	ldrh	r3, [r7, #24]
 8010918:	4413      	add	r3, r2
 801091a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 801091e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010922:	88fb      	ldrh	r3, [r7, #6]
 8010924:	429a      	cmp	r2, r3
 8010926:	f4ff af3d 	bcc.w	80107a4 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 801092a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801092c:	2b00      	cmp	r3, #0
 801092e:	d02c      	beq.n	801098a <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8010930:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010932:	685b      	ldr	r3, [r3, #4]
 8010934:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010936:	e01e      	b.n	8010976 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8010938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801093a:	891a      	ldrh	r2, [r3, #8]
 801093c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801093e:	4413      	add	r3, r2
 8010940:	b29a      	uxth	r2, r3
 8010942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010944:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8010946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010948:	681b      	ldr	r3, [r3, #0]
 801094a:	2b00      	cmp	r3, #0
 801094c:	d110      	bne.n	8010970 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 801094e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010950:	685b      	ldr	r3, [r3, #4]
 8010952:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010954:	8952      	ldrh	r2, [r2, #10]
 8010956:	4413      	add	r3, r2
 8010958:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801095a:	68b9      	ldr	r1, [r7, #8]
 801095c:	4618      	mov	r0, r3
 801095e:	f004 fd1c 	bl	801539a <memcpy>
        p->len += oversize_used;
 8010962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010964:	895a      	ldrh	r2, [r3, #10]
 8010966:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010968:	4413      	add	r3, r2
 801096a:	b29a      	uxth	r2, r3
 801096c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801096e:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8010970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010972:	681b      	ldr	r3, [r3, #0]
 8010974:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010978:	2b00      	cmp	r3, #0
 801097a:	d1dd      	bne.n	8010938 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 801097c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801097e:	891a      	ldrh	r2, [r3, #8]
 8010980:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010982:	4413      	add	r3, r2
 8010984:	b29a      	uxth	r2, r3
 8010986:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010988:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 801098a:	8a7a      	ldrh	r2, [r7, #18]
 801098c:	68fb      	ldr	r3, [r7, #12]
 801098e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8010992:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010994:	2b00      	cmp	r3, #0
 8010996:	d018      	beq.n	80109ca <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8010998:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801099a:	2b00      	cmp	r3, #0
 801099c:	d106      	bne.n	80109ac <tcp_write+0x508>
 801099e:	4b2a      	ldr	r3, [pc, #168]	; (8010a48 <tcp_write+0x5a4>)
 80109a0:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 80109a4:	492d      	ldr	r1, [pc, #180]	; (8010a5c <tcp_write+0x5b8>)
 80109a6:	482a      	ldr	r0, [pc, #168]	; (8010a50 <tcp_write+0x5ac>)
 80109a8:	f004 fd68 	bl	801547c <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 80109ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80109ae:	685b      	ldr	r3, [r3, #4]
 80109b0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80109b2:	4618      	mov	r0, r3
 80109b4:	f7fb f888 	bl	800bac8 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 80109b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80109ba:	891a      	ldrh	r2, [r3, #8]
 80109bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80109be:	891b      	ldrh	r3, [r3, #8]
 80109c0:	4413      	add	r3, r2
 80109c2:	b29a      	uxth	r2, r3
 80109c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80109c6:	811a      	strh	r2, [r3, #8]
 80109c8:	e037      	b.n	8010a3a <tcp_write+0x596>
  } else if (extendlen > 0) {
 80109ca:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80109cc:	2b00      	cmp	r3, #0
 80109ce:	d034      	beq.n	8010a3a <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 80109d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	d003      	beq.n	80109de <tcp_write+0x53a>
 80109d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80109d8:	685b      	ldr	r3, [r3, #4]
 80109da:	2b00      	cmp	r3, #0
 80109dc:	d106      	bne.n	80109ec <tcp_write+0x548>
 80109de:	4b1a      	ldr	r3, [pc, #104]	; (8010a48 <tcp_write+0x5a4>)
 80109e0:	f240 22e6 	movw	r2, #742	; 0x2e6
 80109e4:	491e      	ldr	r1, [pc, #120]	; (8010a60 <tcp_write+0x5bc>)
 80109e6:	481a      	ldr	r0, [pc, #104]	; (8010a50 <tcp_write+0x5ac>)
 80109e8:	f004 fd48 	bl	801547c <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80109ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80109ee:	685b      	ldr	r3, [r3, #4]
 80109f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80109f2:	e009      	b.n	8010a08 <tcp_write+0x564>
      p->tot_len += extendlen;
 80109f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109f6:	891a      	ldrh	r2, [r3, #8]
 80109f8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80109fa:	4413      	add	r3, r2
 80109fc:	b29a      	uxth	r2, r3
 80109fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a00:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8010a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a04:	681b      	ldr	r3, [r3, #0]
 8010a06:	62bb      	str	r3, [r7, #40]	; 0x28
 8010a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a0a:	681b      	ldr	r3, [r3, #0]
 8010a0c:	2b00      	cmp	r3, #0
 8010a0e:	d1f1      	bne.n	80109f4 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8010a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a12:	891a      	ldrh	r2, [r3, #8]
 8010a14:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010a16:	4413      	add	r3, r2
 8010a18:	b29a      	uxth	r2, r3
 8010a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a1c:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8010a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a20:	895a      	ldrh	r2, [r3, #10]
 8010a22:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010a24:	4413      	add	r3, r2
 8010a26:	b29a      	uxth	r2, r3
 8010a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a2a:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8010a2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010a2e:	891a      	ldrh	r2, [r3, #8]
 8010a30:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010a32:	4413      	add	r3, r2
 8010a34:	b29a      	uxth	r2, r3
 8010a36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010a38:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8010a3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010a3c:	2b00      	cmp	r3, #0
 8010a3e:	d111      	bne.n	8010a64 <tcp_write+0x5c0>
    pcb->unsent = queue;
 8010a40:	68fb      	ldr	r3, [r7, #12]
 8010a42:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010a44:	66da      	str	r2, [r3, #108]	; 0x6c
 8010a46:	e010      	b.n	8010a6a <tcp_write+0x5c6>
 8010a48:	080185a0 	.word	0x080185a0
 8010a4c:	08018840 	.word	0x08018840
 8010a50:	080185f4 	.word	0x080185f4
 8010a54:	08018880 	.word	0x08018880
 8010a58:	08018890 	.word	0x08018890
 8010a5c:	080188a4 	.word	0x080188a4
 8010a60:	080188dc 	.word	0x080188dc
  } else {
    last_unsent->next = queue;
 8010a64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010a66:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010a68:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8010a6a:	68fb      	ldr	r3, [r7, #12]
 8010a6c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8010a6e:	88fb      	ldrh	r3, [r7, #6]
 8010a70:	441a      	add	r2, r3
 8010a72:	68fb      	ldr	r3, [r7, #12]
 8010a74:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 8010a76:	68fb      	ldr	r3, [r7, #12]
 8010a78:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8010a7c:	88fb      	ldrh	r3, [r7, #6]
 8010a7e:	1ad3      	subs	r3, r2, r3
 8010a80:	b29a      	uxth	r2, r3
 8010a82:	68fb      	ldr	r3, [r7, #12]
 8010a84:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8010a88:	68fb      	ldr	r3, [r7, #12]
 8010a8a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8010a8e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8010a92:	68fb      	ldr	r3, [r7, #12]
 8010a94:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010a98:	2b00      	cmp	r3, #0
 8010a9a:	d00e      	beq.n	8010aba <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8010a9c:	68fb      	ldr	r3, [r7, #12]
 8010a9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010aa0:	2b00      	cmp	r3, #0
 8010aa2:	d10a      	bne.n	8010aba <tcp_write+0x616>
 8010aa4:	68fb      	ldr	r3, [r7, #12]
 8010aa6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010aa8:	2b00      	cmp	r3, #0
 8010aaa:	d106      	bne.n	8010aba <tcp_write+0x616>
 8010aac:	4b2c      	ldr	r3, [pc, #176]	; (8010b60 <tcp_write+0x6bc>)
 8010aae:	f240 3212 	movw	r2, #786	; 0x312
 8010ab2:	492c      	ldr	r1, [pc, #176]	; (8010b64 <tcp_write+0x6c0>)
 8010ab4:	482c      	ldr	r0, [pc, #176]	; (8010b68 <tcp_write+0x6c4>)
 8010ab6:	f004 fce1 	bl	801547c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8010aba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010abc:	2b00      	cmp	r3, #0
 8010abe:	d016      	beq.n	8010aee <tcp_write+0x64a>
 8010ac0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010ac2:	68db      	ldr	r3, [r3, #12]
 8010ac4:	2b00      	cmp	r3, #0
 8010ac6:	d012      	beq.n	8010aee <tcp_write+0x64a>
 8010ac8:	797b      	ldrb	r3, [r7, #5]
 8010aca:	f003 0302 	and.w	r3, r3, #2
 8010ace:	2b00      	cmp	r3, #0
 8010ad0:	d10d      	bne.n	8010aee <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8010ad2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010ad4:	68db      	ldr	r3, [r3, #12]
 8010ad6:	899b      	ldrh	r3, [r3, #12]
 8010ad8:	b29c      	uxth	r4, r3
 8010ada:	2008      	movs	r0, #8
 8010adc:	f7f9 fb7a 	bl	800a1d4 <lwip_htons>
 8010ae0:	4603      	mov	r3, r0
 8010ae2:	461a      	mov	r2, r3
 8010ae4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010ae6:	68db      	ldr	r3, [r3, #12]
 8010ae8:	4322      	orrs	r2, r4
 8010aea:	b292      	uxth	r2, r2
 8010aec:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8010aee:	2300      	movs	r3, #0
 8010af0:	e031      	b.n	8010b56 <tcp_write+0x6b2>
          goto memerr;
 8010af2:	bf00      	nop
 8010af4:	e006      	b.n	8010b04 <tcp_write+0x660>
            goto memerr;
 8010af6:	bf00      	nop
 8010af8:	e004      	b.n	8010b04 <tcp_write+0x660>
        goto memerr;
 8010afa:	bf00      	nop
 8010afc:	e002      	b.n	8010b04 <tcp_write+0x660>
        goto memerr;
 8010afe:	bf00      	nop
 8010b00:	e000      	b.n	8010b04 <tcp_write+0x660>
      goto memerr;
 8010b02:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010b04:	68fb      	ldr	r3, [r7, #12]
 8010b06:	8b5b      	ldrh	r3, [r3, #26]
 8010b08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010b0c:	b29a      	uxth	r2, r3
 8010b0e:	68fb      	ldr	r3, [r7, #12]
 8010b10:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8010b12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010b14:	2b00      	cmp	r3, #0
 8010b16:	d002      	beq.n	8010b1e <tcp_write+0x67a>
    pbuf_free(concat_p);
 8010b18:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8010b1a:	f7fa ff07 	bl	800b92c <pbuf_free>
  }
  if (queue != NULL) {
 8010b1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010b20:	2b00      	cmp	r3, #0
 8010b22:	d002      	beq.n	8010b2a <tcp_write+0x686>
    tcp_segs_free(queue);
 8010b24:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8010b26:	f7fc fb6f 	bl	800d208 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8010b2a:	68fb      	ldr	r3, [r7, #12]
 8010b2c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010b30:	2b00      	cmp	r3, #0
 8010b32:	d00e      	beq.n	8010b52 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8010b34:	68fb      	ldr	r3, [r7, #12]
 8010b36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010b38:	2b00      	cmp	r3, #0
 8010b3a:	d10a      	bne.n	8010b52 <tcp_write+0x6ae>
 8010b3c:	68fb      	ldr	r3, [r7, #12]
 8010b3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010b40:	2b00      	cmp	r3, #0
 8010b42:	d106      	bne.n	8010b52 <tcp_write+0x6ae>
 8010b44:	4b06      	ldr	r3, [pc, #24]	; (8010b60 <tcp_write+0x6bc>)
 8010b46:	f240 3227 	movw	r2, #807	; 0x327
 8010b4a:	4906      	ldr	r1, [pc, #24]	; (8010b64 <tcp_write+0x6c0>)
 8010b4c:	4806      	ldr	r0, [pc, #24]	; (8010b68 <tcp_write+0x6c4>)
 8010b4e:	f004 fc95 	bl	801547c <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8010b52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8010b56:	4618      	mov	r0, r3
 8010b58:	375c      	adds	r7, #92	; 0x5c
 8010b5a:	46bd      	mov	sp, r7
 8010b5c:	bd90      	pop	{r4, r7, pc}
 8010b5e:	bf00      	nop
 8010b60:	080185a0 	.word	0x080185a0
 8010b64:	08018914 	.word	0x08018914
 8010b68:	080185f4 	.word	0x080185f4

08010b6c <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8010b6c:	b590      	push	{r4, r7, lr}
 8010b6e:	b08b      	sub	sp, #44	; 0x2c
 8010b70:	af02      	add	r7, sp, #8
 8010b72:	6078      	str	r0, [r7, #4]
 8010b74:	460b      	mov	r3, r1
 8010b76:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8010b78:	2300      	movs	r3, #0
 8010b7a:	61fb      	str	r3, [r7, #28]
 8010b7c:	2300      	movs	r3, #0
 8010b7e:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8010b80:	2300      	movs	r3, #0
 8010b82:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	2b00      	cmp	r3, #0
 8010b88:	d106      	bne.n	8010b98 <tcp_split_unsent_seg+0x2c>
 8010b8a:	4b95      	ldr	r3, [pc, #596]	; (8010de0 <tcp_split_unsent_seg+0x274>)
 8010b8c:	f240 324b 	movw	r2, #843	; 0x34b
 8010b90:	4994      	ldr	r1, [pc, #592]	; (8010de4 <tcp_split_unsent_seg+0x278>)
 8010b92:	4895      	ldr	r0, [pc, #596]	; (8010de8 <tcp_split_unsent_seg+0x27c>)
 8010b94:	f004 fc72 	bl	801547c <iprintf>

  useg = pcb->unsent;
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010b9c:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8010b9e:	697b      	ldr	r3, [r7, #20]
 8010ba0:	2b00      	cmp	r3, #0
 8010ba2:	d102      	bne.n	8010baa <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8010ba4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010ba8:	e116      	b.n	8010dd8 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8010baa:	887b      	ldrh	r3, [r7, #2]
 8010bac:	2b00      	cmp	r3, #0
 8010bae:	d109      	bne.n	8010bc4 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8010bb0:	4b8b      	ldr	r3, [pc, #556]	; (8010de0 <tcp_split_unsent_seg+0x274>)
 8010bb2:	f240 3253 	movw	r2, #851	; 0x353
 8010bb6:	498d      	ldr	r1, [pc, #564]	; (8010dec <tcp_split_unsent_seg+0x280>)
 8010bb8:	488b      	ldr	r0, [pc, #556]	; (8010de8 <tcp_split_unsent_seg+0x27c>)
 8010bba:	f004 fc5f 	bl	801547c <iprintf>
    return ERR_VAL;
 8010bbe:	f06f 0305 	mvn.w	r3, #5
 8010bc2:	e109      	b.n	8010dd8 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8010bc4:	697b      	ldr	r3, [r7, #20]
 8010bc6:	891b      	ldrh	r3, [r3, #8]
 8010bc8:	887a      	ldrh	r2, [r7, #2]
 8010bca:	429a      	cmp	r2, r3
 8010bcc:	d301      	bcc.n	8010bd2 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8010bce:	2300      	movs	r3, #0
 8010bd0:	e102      	b.n	8010dd8 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010bd6:	887a      	ldrh	r2, [r7, #2]
 8010bd8:	429a      	cmp	r2, r3
 8010bda:	d906      	bls.n	8010bea <tcp_split_unsent_seg+0x7e>
 8010bdc:	4b80      	ldr	r3, [pc, #512]	; (8010de0 <tcp_split_unsent_seg+0x274>)
 8010bde:	f240 325b 	movw	r2, #859	; 0x35b
 8010be2:	4983      	ldr	r1, [pc, #524]	; (8010df0 <tcp_split_unsent_seg+0x284>)
 8010be4:	4880      	ldr	r0, [pc, #512]	; (8010de8 <tcp_split_unsent_seg+0x27c>)
 8010be6:	f004 fc49 	bl	801547c <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8010bea:	697b      	ldr	r3, [r7, #20]
 8010bec:	891b      	ldrh	r3, [r3, #8]
 8010bee:	2b00      	cmp	r3, #0
 8010bf0:	d106      	bne.n	8010c00 <tcp_split_unsent_seg+0x94>
 8010bf2:	4b7b      	ldr	r3, [pc, #492]	; (8010de0 <tcp_split_unsent_seg+0x274>)
 8010bf4:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8010bf8:	497e      	ldr	r1, [pc, #504]	; (8010df4 <tcp_split_unsent_seg+0x288>)
 8010bfa:	487b      	ldr	r0, [pc, #492]	; (8010de8 <tcp_split_unsent_seg+0x27c>)
 8010bfc:	f004 fc3e 	bl	801547c <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8010c00:	697b      	ldr	r3, [r7, #20]
 8010c02:	7a9b      	ldrb	r3, [r3, #10]
 8010c04:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8010c06:	7bfb      	ldrb	r3, [r7, #15]
 8010c08:	009b      	lsls	r3, r3, #2
 8010c0a:	b2db      	uxtb	r3, r3
 8010c0c:	f003 0304 	and.w	r3, r3, #4
 8010c10:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8010c12:	697b      	ldr	r3, [r7, #20]
 8010c14:	891a      	ldrh	r2, [r3, #8]
 8010c16:	887b      	ldrh	r3, [r7, #2]
 8010c18:	1ad3      	subs	r3, r2, r3
 8010c1a:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8010c1c:	7bbb      	ldrb	r3, [r7, #14]
 8010c1e:	b29a      	uxth	r2, r3
 8010c20:	89bb      	ldrh	r3, [r7, #12]
 8010c22:	4413      	add	r3, r2
 8010c24:	b29b      	uxth	r3, r3
 8010c26:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010c2a:	4619      	mov	r1, r3
 8010c2c:	2036      	movs	r0, #54	; 0x36
 8010c2e:	f7fa fb99 	bl	800b364 <pbuf_alloc>
 8010c32:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010c34:	693b      	ldr	r3, [r7, #16]
 8010c36:	2b00      	cmp	r3, #0
 8010c38:	f000 80b7 	beq.w	8010daa <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8010c3c:	697b      	ldr	r3, [r7, #20]
 8010c3e:	685b      	ldr	r3, [r3, #4]
 8010c40:	891a      	ldrh	r2, [r3, #8]
 8010c42:	697b      	ldr	r3, [r7, #20]
 8010c44:	891b      	ldrh	r3, [r3, #8]
 8010c46:	1ad3      	subs	r3, r2, r3
 8010c48:	b29a      	uxth	r2, r3
 8010c4a:	887b      	ldrh	r3, [r7, #2]
 8010c4c:	4413      	add	r3, r2
 8010c4e:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8010c50:	697b      	ldr	r3, [r7, #20]
 8010c52:	6858      	ldr	r0, [r3, #4]
 8010c54:	693b      	ldr	r3, [r7, #16]
 8010c56:	685a      	ldr	r2, [r3, #4]
 8010c58:	7bbb      	ldrb	r3, [r7, #14]
 8010c5a:	18d1      	adds	r1, r2, r3
 8010c5c:	897b      	ldrh	r3, [r7, #10]
 8010c5e:	89ba      	ldrh	r2, [r7, #12]
 8010c60:	f7fb f85a 	bl	800bd18 <pbuf_copy_partial>
 8010c64:	4603      	mov	r3, r0
 8010c66:	461a      	mov	r2, r3
 8010c68:	89bb      	ldrh	r3, [r7, #12]
 8010c6a:	4293      	cmp	r3, r2
 8010c6c:	f040 809f 	bne.w	8010dae <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8010c70:	697b      	ldr	r3, [r7, #20]
 8010c72:	68db      	ldr	r3, [r3, #12]
 8010c74:	899b      	ldrh	r3, [r3, #12]
 8010c76:	b29b      	uxth	r3, r3
 8010c78:	4618      	mov	r0, r3
 8010c7a:	f7f9 faab 	bl	800a1d4 <lwip_htons>
 8010c7e:	4603      	mov	r3, r0
 8010c80:	b2db      	uxtb	r3, r3
 8010c82:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010c86:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8010c88:	2300      	movs	r3, #0
 8010c8a:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8010c8c:	7efb      	ldrb	r3, [r7, #27]
 8010c8e:	f003 0308 	and.w	r3, r3, #8
 8010c92:	2b00      	cmp	r3, #0
 8010c94:	d007      	beq.n	8010ca6 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8010c96:	7efb      	ldrb	r3, [r7, #27]
 8010c98:	f023 0308 	bic.w	r3, r3, #8
 8010c9c:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8010c9e:	7ebb      	ldrb	r3, [r7, #26]
 8010ca0:	f043 0308 	orr.w	r3, r3, #8
 8010ca4:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8010ca6:	7efb      	ldrb	r3, [r7, #27]
 8010ca8:	f003 0301 	and.w	r3, r3, #1
 8010cac:	2b00      	cmp	r3, #0
 8010cae:	d007      	beq.n	8010cc0 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8010cb0:	7efb      	ldrb	r3, [r7, #27]
 8010cb2:	f023 0301 	bic.w	r3, r3, #1
 8010cb6:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8010cb8:	7ebb      	ldrb	r3, [r7, #26]
 8010cba:	f043 0301 	orr.w	r3, r3, #1
 8010cbe:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8010cc0:	697b      	ldr	r3, [r7, #20]
 8010cc2:	68db      	ldr	r3, [r3, #12]
 8010cc4:	685b      	ldr	r3, [r3, #4]
 8010cc6:	4618      	mov	r0, r3
 8010cc8:	f7f9 fa99 	bl	800a1fe <lwip_htonl>
 8010ccc:	4602      	mov	r2, r0
 8010cce:	887b      	ldrh	r3, [r7, #2]
 8010cd0:	18d1      	adds	r1, r2, r3
 8010cd2:	7eba      	ldrb	r2, [r7, #26]
 8010cd4:	7bfb      	ldrb	r3, [r7, #15]
 8010cd6:	9300      	str	r3, [sp, #0]
 8010cd8:	460b      	mov	r3, r1
 8010cda:	6939      	ldr	r1, [r7, #16]
 8010cdc:	6878      	ldr	r0, [r7, #4]
 8010cde:	f7ff fa4f 	bl	8010180 <tcp_create_segment>
 8010ce2:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8010ce4:	69fb      	ldr	r3, [r7, #28]
 8010ce6:	2b00      	cmp	r3, #0
 8010ce8:	d063      	beq.n	8010db2 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8010cea:	697b      	ldr	r3, [r7, #20]
 8010cec:	685b      	ldr	r3, [r3, #4]
 8010cee:	4618      	mov	r0, r3
 8010cf0:	f7fa feaa 	bl	800ba48 <pbuf_clen>
 8010cf4:	4603      	mov	r3, r0
 8010cf6:	461a      	mov	r2, r3
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010cfe:	1a9b      	subs	r3, r3, r2
 8010d00:	b29a      	uxth	r2, r3
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8010d08:	697b      	ldr	r3, [r7, #20]
 8010d0a:	6858      	ldr	r0, [r3, #4]
 8010d0c:	697b      	ldr	r3, [r7, #20]
 8010d0e:	685b      	ldr	r3, [r3, #4]
 8010d10:	891a      	ldrh	r2, [r3, #8]
 8010d12:	89bb      	ldrh	r3, [r7, #12]
 8010d14:	1ad3      	subs	r3, r2, r3
 8010d16:	b29b      	uxth	r3, r3
 8010d18:	4619      	mov	r1, r3
 8010d1a:	f7fa fc81 	bl	800b620 <pbuf_realloc>
  useg->len -= remainder;
 8010d1e:	697b      	ldr	r3, [r7, #20]
 8010d20:	891a      	ldrh	r2, [r3, #8]
 8010d22:	89bb      	ldrh	r3, [r7, #12]
 8010d24:	1ad3      	subs	r3, r2, r3
 8010d26:	b29a      	uxth	r2, r3
 8010d28:	697b      	ldr	r3, [r7, #20]
 8010d2a:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8010d2c:	697b      	ldr	r3, [r7, #20]
 8010d2e:	68db      	ldr	r3, [r3, #12]
 8010d30:	899b      	ldrh	r3, [r3, #12]
 8010d32:	b29c      	uxth	r4, r3
 8010d34:	7efb      	ldrb	r3, [r7, #27]
 8010d36:	b29b      	uxth	r3, r3
 8010d38:	4618      	mov	r0, r3
 8010d3a:	f7f9 fa4b 	bl	800a1d4 <lwip_htons>
 8010d3e:	4603      	mov	r3, r0
 8010d40:	461a      	mov	r2, r3
 8010d42:	697b      	ldr	r3, [r7, #20]
 8010d44:	68db      	ldr	r3, [r3, #12]
 8010d46:	4322      	orrs	r2, r4
 8010d48:	b292      	uxth	r2, r2
 8010d4a:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8010d4c:	697b      	ldr	r3, [r7, #20]
 8010d4e:	685b      	ldr	r3, [r3, #4]
 8010d50:	4618      	mov	r0, r3
 8010d52:	f7fa fe79 	bl	800ba48 <pbuf_clen>
 8010d56:	4603      	mov	r3, r0
 8010d58:	461a      	mov	r2, r3
 8010d5a:	687b      	ldr	r3, [r7, #4]
 8010d5c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010d60:	4413      	add	r3, r2
 8010d62:	b29a      	uxth	r2, r3
 8010d64:	687b      	ldr	r3, [r7, #4]
 8010d66:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8010d6a:	69fb      	ldr	r3, [r7, #28]
 8010d6c:	685b      	ldr	r3, [r3, #4]
 8010d6e:	4618      	mov	r0, r3
 8010d70:	f7fa fe6a 	bl	800ba48 <pbuf_clen>
 8010d74:	4603      	mov	r3, r0
 8010d76:	461a      	mov	r2, r3
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010d7e:	4413      	add	r3, r2
 8010d80:	b29a      	uxth	r2, r3
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8010d88:	697b      	ldr	r3, [r7, #20]
 8010d8a:	681a      	ldr	r2, [r3, #0]
 8010d8c:	69fb      	ldr	r3, [r7, #28]
 8010d8e:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8010d90:	697b      	ldr	r3, [r7, #20]
 8010d92:	69fa      	ldr	r2, [r7, #28]
 8010d94:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8010d96:	69fb      	ldr	r3, [r7, #28]
 8010d98:	681b      	ldr	r3, [r3, #0]
 8010d9a:	2b00      	cmp	r3, #0
 8010d9c:	d103      	bne.n	8010da6 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	2200      	movs	r2, #0
 8010da2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8010da6:	2300      	movs	r3, #0
 8010da8:	e016      	b.n	8010dd8 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8010daa:	bf00      	nop
 8010dac:	e002      	b.n	8010db4 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8010dae:	bf00      	nop
 8010db0:	e000      	b.n	8010db4 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8010db2:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8010db4:	69fb      	ldr	r3, [r7, #28]
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	d006      	beq.n	8010dc8 <tcp_split_unsent_seg+0x25c>
 8010dba:	4b09      	ldr	r3, [pc, #36]	; (8010de0 <tcp_split_unsent_seg+0x274>)
 8010dbc:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8010dc0:	490d      	ldr	r1, [pc, #52]	; (8010df8 <tcp_split_unsent_seg+0x28c>)
 8010dc2:	4809      	ldr	r0, [pc, #36]	; (8010de8 <tcp_split_unsent_seg+0x27c>)
 8010dc4:	f004 fb5a 	bl	801547c <iprintf>
  if (p != NULL) {
 8010dc8:	693b      	ldr	r3, [r7, #16]
 8010dca:	2b00      	cmp	r3, #0
 8010dcc:	d002      	beq.n	8010dd4 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8010dce:	6938      	ldr	r0, [r7, #16]
 8010dd0:	f7fa fdac 	bl	800b92c <pbuf_free>
  }

  return ERR_MEM;
 8010dd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8010dd8:	4618      	mov	r0, r3
 8010dda:	3724      	adds	r7, #36	; 0x24
 8010ddc:	46bd      	mov	sp, r7
 8010dde:	bd90      	pop	{r4, r7, pc}
 8010de0:	080185a0 	.word	0x080185a0
 8010de4:	08018934 	.word	0x08018934
 8010de8:	080185f4 	.word	0x080185f4
 8010dec:	08018958 	.word	0x08018958
 8010df0:	0801897c 	.word	0x0801897c
 8010df4:	0801898c 	.word	0x0801898c
 8010df8:	0801899c 	.word	0x0801899c

08010dfc <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8010dfc:	b590      	push	{r4, r7, lr}
 8010dfe:	b085      	sub	sp, #20
 8010e00:	af00      	add	r7, sp, #0
 8010e02:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	2b00      	cmp	r3, #0
 8010e08:	d106      	bne.n	8010e18 <tcp_send_fin+0x1c>
 8010e0a:	4b21      	ldr	r3, [pc, #132]	; (8010e90 <tcp_send_fin+0x94>)
 8010e0c:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8010e10:	4920      	ldr	r1, [pc, #128]	; (8010e94 <tcp_send_fin+0x98>)
 8010e12:	4821      	ldr	r0, [pc, #132]	; (8010e98 <tcp_send_fin+0x9c>)
 8010e14:	f004 fb32 	bl	801547c <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	d02e      	beq.n	8010e7e <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010e24:	60fb      	str	r3, [r7, #12]
 8010e26:	e002      	b.n	8010e2e <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8010e28:	68fb      	ldr	r3, [r7, #12]
 8010e2a:	681b      	ldr	r3, [r3, #0]
 8010e2c:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010e2e:	68fb      	ldr	r3, [r7, #12]
 8010e30:	681b      	ldr	r3, [r3, #0]
 8010e32:	2b00      	cmp	r3, #0
 8010e34:	d1f8      	bne.n	8010e28 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8010e36:	68fb      	ldr	r3, [r7, #12]
 8010e38:	68db      	ldr	r3, [r3, #12]
 8010e3a:	899b      	ldrh	r3, [r3, #12]
 8010e3c:	b29b      	uxth	r3, r3
 8010e3e:	4618      	mov	r0, r3
 8010e40:	f7f9 f9c8 	bl	800a1d4 <lwip_htons>
 8010e44:	4603      	mov	r3, r0
 8010e46:	b2db      	uxtb	r3, r3
 8010e48:	f003 0307 	and.w	r3, r3, #7
 8010e4c:	2b00      	cmp	r3, #0
 8010e4e:	d116      	bne.n	8010e7e <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8010e50:	68fb      	ldr	r3, [r7, #12]
 8010e52:	68db      	ldr	r3, [r3, #12]
 8010e54:	899b      	ldrh	r3, [r3, #12]
 8010e56:	b29c      	uxth	r4, r3
 8010e58:	2001      	movs	r0, #1
 8010e5a:	f7f9 f9bb 	bl	800a1d4 <lwip_htons>
 8010e5e:	4603      	mov	r3, r0
 8010e60:	461a      	mov	r2, r3
 8010e62:	68fb      	ldr	r3, [r7, #12]
 8010e64:	68db      	ldr	r3, [r3, #12]
 8010e66:	4322      	orrs	r2, r4
 8010e68:	b292      	uxth	r2, r2
 8010e6a:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	8b5b      	ldrh	r3, [r3, #26]
 8010e70:	f043 0320 	orr.w	r3, r3, #32
 8010e74:	b29a      	uxth	r2, r3
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8010e7a:	2300      	movs	r3, #0
 8010e7c:	e004      	b.n	8010e88 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8010e7e:	2101      	movs	r1, #1
 8010e80:	6878      	ldr	r0, [r7, #4]
 8010e82:	f000 f80b 	bl	8010e9c <tcp_enqueue_flags>
 8010e86:	4603      	mov	r3, r0
}
 8010e88:	4618      	mov	r0, r3
 8010e8a:	3714      	adds	r7, #20
 8010e8c:	46bd      	mov	sp, r7
 8010e8e:	bd90      	pop	{r4, r7, pc}
 8010e90:	080185a0 	.word	0x080185a0
 8010e94:	080189a8 	.word	0x080189a8
 8010e98:	080185f4 	.word	0x080185f4

08010e9c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8010e9c:	b580      	push	{r7, lr}
 8010e9e:	b08a      	sub	sp, #40	; 0x28
 8010ea0:	af02      	add	r7, sp, #8
 8010ea2:	6078      	str	r0, [r7, #4]
 8010ea4:	460b      	mov	r3, r1
 8010ea6:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8010ea8:	2300      	movs	r3, #0
 8010eaa:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8010eac:	2300      	movs	r3, #0
 8010eae:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8010eb0:	78fb      	ldrb	r3, [r7, #3]
 8010eb2:	f003 0303 	and.w	r3, r3, #3
 8010eb6:	2b00      	cmp	r3, #0
 8010eb8:	d106      	bne.n	8010ec8 <tcp_enqueue_flags+0x2c>
 8010eba:	4b67      	ldr	r3, [pc, #412]	; (8011058 <tcp_enqueue_flags+0x1bc>)
 8010ebc:	f240 4211 	movw	r2, #1041	; 0x411
 8010ec0:	4966      	ldr	r1, [pc, #408]	; (801105c <tcp_enqueue_flags+0x1c0>)
 8010ec2:	4867      	ldr	r0, [pc, #412]	; (8011060 <tcp_enqueue_flags+0x1c4>)
 8010ec4:	f004 fada 	bl	801547c <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	2b00      	cmp	r3, #0
 8010ecc:	d106      	bne.n	8010edc <tcp_enqueue_flags+0x40>
 8010ece:	4b62      	ldr	r3, [pc, #392]	; (8011058 <tcp_enqueue_flags+0x1bc>)
 8010ed0:	f240 4213 	movw	r2, #1043	; 0x413
 8010ed4:	4963      	ldr	r1, [pc, #396]	; (8011064 <tcp_enqueue_flags+0x1c8>)
 8010ed6:	4862      	ldr	r0, [pc, #392]	; (8011060 <tcp_enqueue_flags+0x1c4>)
 8010ed8:	f004 fad0 	bl	801547c <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8010edc:	78fb      	ldrb	r3, [r7, #3]
 8010ede:	f003 0302 	and.w	r3, r3, #2
 8010ee2:	2b00      	cmp	r3, #0
 8010ee4:	d001      	beq.n	8010eea <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8010ee6:	2301      	movs	r3, #1
 8010ee8:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8010eea:	7ffb      	ldrb	r3, [r7, #31]
 8010eec:	009b      	lsls	r3, r3, #2
 8010eee:	b2db      	uxtb	r3, r3
 8010ef0:	f003 0304 	and.w	r3, r3, #4
 8010ef4:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8010ef6:	7dfb      	ldrb	r3, [r7, #23]
 8010ef8:	b29b      	uxth	r3, r3
 8010efa:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010efe:	4619      	mov	r1, r3
 8010f00:	2036      	movs	r0, #54	; 0x36
 8010f02:	f7fa fa2f 	bl	800b364 <pbuf_alloc>
 8010f06:	6138      	str	r0, [r7, #16]
 8010f08:	693b      	ldr	r3, [r7, #16]
 8010f0a:	2b00      	cmp	r3, #0
 8010f0c:	d109      	bne.n	8010f22 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	8b5b      	ldrh	r3, [r3, #26]
 8010f12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010f16:	b29a      	uxth	r2, r3
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8010f1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010f20:	e095      	b.n	801104e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8010f22:	693b      	ldr	r3, [r7, #16]
 8010f24:	895a      	ldrh	r2, [r3, #10]
 8010f26:	7dfb      	ldrb	r3, [r7, #23]
 8010f28:	b29b      	uxth	r3, r3
 8010f2a:	429a      	cmp	r2, r3
 8010f2c:	d206      	bcs.n	8010f3c <tcp_enqueue_flags+0xa0>
 8010f2e:	4b4a      	ldr	r3, [pc, #296]	; (8011058 <tcp_enqueue_flags+0x1bc>)
 8010f30:	f240 4239 	movw	r2, #1081	; 0x439
 8010f34:	494c      	ldr	r1, [pc, #304]	; (8011068 <tcp_enqueue_flags+0x1cc>)
 8010f36:	484a      	ldr	r0, [pc, #296]	; (8011060 <tcp_enqueue_flags+0x1c4>)
 8010f38:	f004 faa0 	bl	801547c <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8010f40:	78fa      	ldrb	r2, [r7, #3]
 8010f42:	7ffb      	ldrb	r3, [r7, #31]
 8010f44:	9300      	str	r3, [sp, #0]
 8010f46:	460b      	mov	r3, r1
 8010f48:	6939      	ldr	r1, [r7, #16]
 8010f4a:	6878      	ldr	r0, [r7, #4]
 8010f4c:	f7ff f918 	bl	8010180 <tcp_create_segment>
 8010f50:	60f8      	str	r0, [r7, #12]
 8010f52:	68fb      	ldr	r3, [r7, #12]
 8010f54:	2b00      	cmp	r3, #0
 8010f56:	d109      	bne.n	8010f6c <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	8b5b      	ldrh	r3, [r3, #26]
 8010f5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010f60:	b29a      	uxth	r2, r3
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8010f66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010f6a:	e070      	b.n	801104e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8010f6c:	68fb      	ldr	r3, [r7, #12]
 8010f6e:	68db      	ldr	r3, [r3, #12]
 8010f70:	f003 0303 	and.w	r3, r3, #3
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	d006      	beq.n	8010f86 <tcp_enqueue_flags+0xea>
 8010f78:	4b37      	ldr	r3, [pc, #220]	; (8011058 <tcp_enqueue_flags+0x1bc>)
 8010f7a:	f240 4242 	movw	r2, #1090	; 0x442
 8010f7e:	493b      	ldr	r1, [pc, #236]	; (801106c <tcp_enqueue_flags+0x1d0>)
 8010f80:	4837      	ldr	r0, [pc, #220]	; (8011060 <tcp_enqueue_flags+0x1c4>)
 8010f82:	f004 fa7b 	bl	801547c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8010f86:	68fb      	ldr	r3, [r7, #12]
 8010f88:	891b      	ldrh	r3, [r3, #8]
 8010f8a:	2b00      	cmp	r3, #0
 8010f8c:	d006      	beq.n	8010f9c <tcp_enqueue_flags+0x100>
 8010f8e:	4b32      	ldr	r3, [pc, #200]	; (8011058 <tcp_enqueue_flags+0x1bc>)
 8010f90:	f240 4243 	movw	r2, #1091	; 0x443
 8010f94:	4936      	ldr	r1, [pc, #216]	; (8011070 <tcp_enqueue_flags+0x1d4>)
 8010f96:	4832      	ldr	r0, [pc, #200]	; (8011060 <tcp_enqueue_flags+0x1c4>)
 8010f98:	f004 fa70 	bl	801547c <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8010f9c:	687b      	ldr	r3, [r7, #4]
 8010f9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010fa0:	2b00      	cmp	r3, #0
 8010fa2:	d103      	bne.n	8010fac <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	68fa      	ldr	r2, [r7, #12]
 8010fa8:	66da      	str	r2, [r3, #108]	; 0x6c
 8010faa:	e00d      	b.n	8010fc8 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010fb0:	61bb      	str	r3, [r7, #24]
 8010fb2:	e002      	b.n	8010fba <tcp_enqueue_flags+0x11e>
 8010fb4:	69bb      	ldr	r3, [r7, #24]
 8010fb6:	681b      	ldr	r3, [r3, #0]
 8010fb8:	61bb      	str	r3, [r7, #24]
 8010fba:	69bb      	ldr	r3, [r7, #24]
 8010fbc:	681b      	ldr	r3, [r3, #0]
 8010fbe:	2b00      	cmp	r3, #0
 8010fc0:	d1f8      	bne.n	8010fb4 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8010fc2:	69bb      	ldr	r3, [r7, #24]
 8010fc4:	68fa      	ldr	r2, [r7, #12]
 8010fc6:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	2200      	movs	r2, #0
 8010fcc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8010fd0:	78fb      	ldrb	r3, [r7, #3]
 8010fd2:	f003 0302 	and.w	r3, r3, #2
 8010fd6:	2b00      	cmp	r3, #0
 8010fd8:	d104      	bne.n	8010fe4 <tcp_enqueue_flags+0x148>
 8010fda:	78fb      	ldrb	r3, [r7, #3]
 8010fdc:	f003 0301 	and.w	r3, r3, #1
 8010fe0:	2b00      	cmp	r3, #0
 8010fe2:	d004      	beq.n	8010fee <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010fe8:	1c5a      	adds	r2, r3, #1
 8010fea:	687b      	ldr	r3, [r7, #4]
 8010fec:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8010fee:	78fb      	ldrb	r3, [r7, #3]
 8010ff0:	f003 0301 	and.w	r3, r3, #1
 8010ff4:	2b00      	cmp	r3, #0
 8010ff6:	d006      	beq.n	8011006 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8010ff8:	687b      	ldr	r3, [r7, #4]
 8010ffa:	8b5b      	ldrh	r3, [r3, #26]
 8010ffc:	f043 0320 	orr.w	r3, r3, #32
 8011000:	b29a      	uxth	r2, r3
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8011006:	68fb      	ldr	r3, [r7, #12]
 8011008:	685b      	ldr	r3, [r3, #4]
 801100a:	4618      	mov	r0, r3
 801100c:	f7fa fd1c 	bl	800ba48 <pbuf_clen>
 8011010:	4603      	mov	r3, r0
 8011012:	461a      	mov	r2, r3
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801101a:	4413      	add	r3, r2
 801101c:	b29a      	uxth	r2, r3
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801102a:	2b00      	cmp	r3, #0
 801102c:	d00e      	beq.n	801104c <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011032:	2b00      	cmp	r3, #0
 8011034:	d10a      	bne.n	801104c <tcp_enqueue_flags+0x1b0>
 8011036:	687b      	ldr	r3, [r7, #4]
 8011038:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801103a:	2b00      	cmp	r3, #0
 801103c:	d106      	bne.n	801104c <tcp_enqueue_flags+0x1b0>
 801103e:	4b06      	ldr	r3, [pc, #24]	; (8011058 <tcp_enqueue_flags+0x1bc>)
 8011040:	f240 4265 	movw	r2, #1125	; 0x465
 8011044:	490b      	ldr	r1, [pc, #44]	; (8011074 <tcp_enqueue_flags+0x1d8>)
 8011046:	4806      	ldr	r0, [pc, #24]	; (8011060 <tcp_enqueue_flags+0x1c4>)
 8011048:	f004 fa18 	bl	801547c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 801104c:	2300      	movs	r3, #0
}
 801104e:	4618      	mov	r0, r3
 8011050:	3720      	adds	r7, #32
 8011052:	46bd      	mov	sp, r7
 8011054:	bd80      	pop	{r7, pc}
 8011056:	bf00      	nop
 8011058:	080185a0 	.word	0x080185a0
 801105c:	080189c4 	.word	0x080189c4
 8011060:	080185f4 	.word	0x080185f4
 8011064:	08018a1c 	.word	0x08018a1c
 8011068:	08018a3c 	.word	0x08018a3c
 801106c:	08018a78 	.word	0x08018a78
 8011070:	08018a90 	.word	0x08018a90
 8011074:	08018abc 	.word	0x08018abc

08011078 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8011078:	b5b0      	push	{r4, r5, r7, lr}
 801107a:	b08a      	sub	sp, #40	; 0x28
 801107c:	af00      	add	r7, sp, #0
 801107e:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	2b00      	cmp	r3, #0
 8011084:	d106      	bne.n	8011094 <tcp_output+0x1c>
 8011086:	4b9e      	ldr	r3, [pc, #632]	; (8011300 <tcp_output+0x288>)
 8011088:	f240 42e1 	movw	r2, #1249	; 0x4e1
 801108c:	499d      	ldr	r1, [pc, #628]	; (8011304 <tcp_output+0x28c>)
 801108e:	489e      	ldr	r0, [pc, #632]	; (8011308 <tcp_output+0x290>)
 8011090:	f004 f9f4 	bl	801547c <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	7d1b      	ldrb	r3, [r3, #20]
 8011098:	2b01      	cmp	r3, #1
 801109a:	d106      	bne.n	80110aa <tcp_output+0x32>
 801109c:	4b98      	ldr	r3, [pc, #608]	; (8011300 <tcp_output+0x288>)
 801109e:	f240 42e3 	movw	r2, #1251	; 0x4e3
 80110a2:	499a      	ldr	r1, [pc, #616]	; (801130c <tcp_output+0x294>)
 80110a4:	4898      	ldr	r0, [pc, #608]	; (8011308 <tcp_output+0x290>)
 80110a6:	f004 f9e9 	bl	801547c <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 80110aa:	4b99      	ldr	r3, [pc, #612]	; (8011310 <tcp_output+0x298>)
 80110ac:	681b      	ldr	r3, [r3, #0]
 80110ae:	687a      	ldr	r2, [r7, #4]
 80110b0:	429a      	cmp	r2, r3
 80110b2:	d101      	bne.n	80110b8 <tcp_output+0x40>
    return ERR_OK;
 80110b4:	2300      	movs	r3, #0
 80110b6:	e1ce      	b.n	8011456 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80110c4:	4293      	cmp	r3, r2
 80110c6:	bf28      	it	cs
 80110c8:	4613      	movcs	r3, r2
 80110ca:	b29b      	uxth	r3, r3
 80110cc:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80110d2:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 80110d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110d6:	2b00      	cmp	r3, #0
 80110d8:	d10b      	bne.n	80110f2 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	8b5b      	ldrh	r3, [r3, #26]
 80110de:	f003 0302 	and.w	r3, r3, #2
 80110e2:	2b00      	cmp	r3, #0
 80110e4:	f000 81aa 	beq.w	801143c <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 80110e8:	6878      	ldr	r0, [r7, #4]
 80110ea:	f000 fdcb 	bl	8011c84 <tcp_send_empty_ack>
 80110ee:	4603      	mov	r3, r0
 80110f0:	e1b1      	b.n	8011456 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 80110f2:	6879      	ldr	r1, [r7, #4]
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	3304      	adds	r3, #4
 80110f8:	461a      	mov	r2, r3
 80110fa:	6878      	ldr	r0, [r7, #4]
 80110fc:	f7ff f824 	bl	8010148 <tcp_route>
 8011100:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8011102:	697b      	ldr	r3, [r7, #20]
 8011104:	2b00      	cmp	r3, #0
 8011106:	d102      	bne.n	801110e <tcp_output+0x96>
    return ERR_RTE;
 8011108:	f06f 0303 	mvn.w	r3, #3
 801110c:	e1a3      	b.n	8011456 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801110e:	687b      	ldr	r3, [r7, #4]
 8011110:	2b00      	cmp	r3, #0
 8011112:	d003      	beq.n	801111c <tcp_output+0xa4>
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	681b      	ldr	r3, [r3, #0]
 8011118:	2b00      	cmp	r3, #0
 801111a:	d111      	bne.n	8011140 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 801111c:	697b      	ldr	r3, [r7, #20]
 801111e:	2b00      	cmp	r3, #0
 8011120:	d002      	beq.n	8011128 <tcp_output+0xb0>
 8011122:	697b      	ldr	r3, [r7, #20]
 8011124:	3304      	adds	r3, #4
 8011126:	e000      	b.n	801112a <tcp_output+0xb2>
 8011128:	2300      	movs	r3, #0
 801112a:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 801112c:	693b      	ldr	r3, [r7, #16]
 801112e:	2b00      	cmp	r3, #0
 8011130:	d102      	bne.n	8011138 <tcp_output+0xc0>
      return ERR_RTE;
 8011132:	f06f 0303 	mvn.w	r3, #3
 8011136:	e18e      	b.n	8011456 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8011138:	693b      	ldr	r3, [r7, #16]
 801113a:	681a      	ldr	r2, [r3, #0]
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8011140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011142:	68db      	ldr	r3, [r3, #12]
 8011144:	685b      	ldr	r3, [r3, #4]
 8011146:	4618      	mov	r0, r3
 8011148:	f7f9 f859 	bl	800a1fe <lwip_htonl>
 801114c:	4602      	mov	r2, r0
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011152:	1ad3      	subs	r3, r2, r3
 8011154:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011156:	8912      	ldrh	r2, [r2, #8]
 8011158:	4413      	add	r3, r2
 801115a:	69ba      	ldr	r2, [r7, #24]
 801115c:	429a      	cmp	r2, r3
 801115e:	d227      	bcs.n	80111b0 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8011160:	687b      	ldr	r3, [r7, #4]
 8011162:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011166:	461a      	mov	r2, r3
 8011168:	69bb      	ldr	r3, [r7, #24]
 801116a:	4293      	cmp	r3, r2
 801116c:	d114      	bne.n	8011198 <tcp_output+0x120>
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011172:	2b00      	cmp	r3, #0
 8011174:	d110      	bne.n	8011198 <tcp_output+0x120>
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801117c:	2b00      	cmp	r3, #0
 801117e:	d10b      	bne.n	8011198 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8011180:	687b      	ldr	r3, [r7, #4]
 8011182:	2200      	movs	r2, #0
 8011184:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	2201      	movs	r2, #1
 801118c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	2200      	movs	r2, #0
 8011194:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	8b5b      	ldrh	r3, [r3, #26]
 801119c:	f003 0302 	and.w	r3, r3, #2
 80111a0:	2b00      	cmp	r3, #0
 80111a2:	f000 814d 	beq.w	8011440 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 80111a6:	6878      	ldr	r0, [r7, #4]
 80111a8:	f000 fd6c 	bl	8011c84 <tcp_send_empty_ack>
 80111ac:	4603      	mov	r3, r0
 80111ae:	e152      	b.n	8011456 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 80111b0:	687b      	ldr	r3, [r7, #4]
 80111b2:	2200      	movs	r2, #0
 80111b4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80111bc:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 80111be:	6a3b      	ldr	r3, [r7, #32]
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	f000 811c 	beq.w	80113fe <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 80111c6:	e002      	b.n	80111ce <tcp_output+0x156>
 80111c8:	6a3b      	ldr	r3, [r7, #32]
 80111ca:	681b      	ldr	r3, [r3, #0]
 80111cc:	623b      	str	r3, [r7, #32]
 80111ce:	6a3b      	ldr	r3, [r7, #32]
 80111d0:	681b      	ldr	r3, [r3, #0]
 80111d2:	2b00      	cmp	r3, #0
 80111d4:	d1f8      	bne.n	80111c8 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 80111d6:	e112      	b.n	80113fe <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 80111d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111da:	68db      	ldr	r3, [r3, #12]
 80111dc:	899b      	ldrh	r3, [r3, #12]
 80111de:	b29b      	uxth	r3, r3
 80111e0:	4618      	mov	r0, r3
 80111e2:	f7f8 fff7 	bl	800a1d4 <lwip_htons>
 80111e6:	4603      	mov	r3, r0
 80111e8:	b2db      	uxtb	r3, r3
 80111ea:	f003 0304 	and.w	r3, r3, #4
 80111ee:	2b00      	cmp	r3, #0
 80111f0:	d006      	beq.n	8011200 <tcp_output+0x188>
 80111f2:	4b43      	ldr	r3, [pc, #268]	; (8011300 <tcp_output+0x288>)
 80111f4:	f240 5236 	movw	r2, #1334	; 0x536
 80111f8:	4946      	ldr	r1, [pc, #280]	; (8011314 <tcp_output+0x29c>)
 80111fa:	4843      	ldr	r0, [pc, #268]	; (8011308 <tcp_output+0x290>)
 80111fc:	f004 f93e 	bl	801547c <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011204:	2b00      	cmp	r3, #0
 8011206:	d01f      	beq.n	8011248 <tcp_output+0x1d0>
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	8b5b      	ldrh	r3, [r3, #26]
 801120c:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8011210:	2b00      	cmp	r3, #0
 8011212:	d119      	bne.n	8011248 <tcp_output+0x1d0>
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011218:	2b00      	cmp	r3, #0
 801121a:	d00b      	beq.n	8011234 <tcp_output+0x1bc>
 801121c:	687b      	ldr	r3, [r7, #4]
 801121e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011220:	681b      	ldr	r3, [r3, #0]
 8011222:	2b00      	cmp	r3, #0
 8011224:	d110      	bne.n	8011248 <tcp_output+0x1d0>
 8011226:	687b      	ldr	r3, [r7, #4]
 8011228:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801122a:	891a      	ldrh	r2, [r3, #8]
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011230:	429a      	cmp	r2, r3
 8011232:	d209      	bcs.n	8011248 <tcp_output+0x1d0>
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801123a:	2b00      	cmp	r3, #0
 801123c:	d004      	beq.n	8011248 <tcp_output+0x1d0>
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011244:	2b08      	cmp	r3, #8
 8011246:	d901      	bls.n	801124c <tcp_output+0x1d4>
 8011248:	2301      	movs	r3, #1
 801124a:	e000      	b.n	801124e <tcp_output+0x1d6>
 801124c:	2300      	movs	r3, #0
 801124e:	2b00      	cmp	r3, #0
 8011250:	d106      	bne.n	8011260 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	8b5b      	ldrh	r3, [r3, #26]
 8011256:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801125a:	2b00      	cmp	r3, #0
 801125c:	f000 80e4 	beq.w	8011428 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8011260:	687b      	ldr	r3, [r7, #4]
 8011262:	7d1b      	ldrb	r3, [r3, #20]
 8011264:	2b02      	cmp	r3, #2
 8011266:	d00d      	beq.n	8011284 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8011268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801126a:	68db      	ldr	r3, [r3, #12]
 801126c:	899b      	ldrh	r3, [r3, #12]
 801126e:	b29c      	uxth	r4, r3
 8011270:	2010      	movs	r0, #16
 8011272:	f7f8 ffaf 	bl	800a1d4 <lwip_htons>
 8011276:	4603      	mov	r3, r0
 8011278:	461a      	mov	r2, r3
 801127a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801127c:	68db      	ldr	r3, [r3, #12]
 801127e:	4322      	orrs	r2, r4
 8011280:	b292      	uxth	r2, r2
 8011282:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8011284:	697a      	ldr	r2, [r7, #20]
 8011286:	6879      	ldr	r1, [r7, #4]
 8011288:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801128a:	f000 f909 	bl	80114a0 <tcp_output_segment>
 801128e:	4603      	mov	r3, r0
 8011290:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8011292:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011296:	2b00      	cmp	r3, #0
 8011298:	d009      	beq.n	80112ae <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	8b5b      	ldrh	r3, [r3, #26]
 801129e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80112a2:	b29a      	uxth	r2, r3
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	835a      	strh	r2, [r3, #26]
      return err;
 80112a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80112ac:	e0d3      	b.n	8011456 <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 80112ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112b0:	681a      	ldr	r2, [r3, #0]
 80112b2:	687b      	ldr	r3, [r7, #4]
 80112b4:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	7d1b      	ldrb	r3, [r3, #20]
 80112ba:	2b02      	cmp	r3, #2
 80112bc:	d006      	beq.n	80112cc <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80112be:	687b      	ldr	r3, [r7, #4]
 80112c0:	8b5b      	ldrh	r3, [r3, #26]
 80112c2:	f023 0303 	bic.w	r3, r3, #3
 80112c6:	b29a      	uxth	r2, r3
 80112c8:	687b      	ldr	r3, [r7, #4]
 80112ca:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80112cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112ce:	68db      	ldr	r3, [r3, #12]
 80112d0:	685b      	ldr	r3, [r3, #4]
 80112d2:	4618      	mov	r0, r3
 80112d4:	f7f8 ff93 	bl	800a1fe <lwip_htonl>
 80112d8:	4604      	mov	r4, r0
 80112da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112dc:	891b      	ldrh	r3, [r3, #8]
 80112de:	461d      	mov	r5, r3
 80112e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112e2:	68db      	ldr	r3, [r3, #12]
 80112e4:	899b      	ldrh	r3, [r3, #12]
 80112e6:	b29b      	uxth	r3, r3
 80112e8:	4618      	mov	r0, r3
 80112ea:	f7f8 ff73 	bl	800a1d4 <lwip_htons>
 80112ee:	4603      	mov	r3, r0
 80112f0:	b2db      	uxtb	r3, r3
 80112f2:	f003 0303 	and.w	r3, r3, #3
 80112f6:	2b00      	cmp	r3, #0
 80112f8:	d00e      	beq.n	8011318 <tcp_output+0x2a0>
 80112fa:	2301      	movs	r3, #1
 80112fc:	e00d      	b.n	801131a <tcp_output+0x2a2>
 80112fe:	bf00      	nop
 8011300:	080185a0 	.word	0x080185a0
 8011304:	08018ae4 	.word	0x08018ae4
 8011308:	080185f4 	.word	0x080185f4
 801130c:	08018afc 	.word	0x08018afc
 8011310:	2000bdb8 	.word	0x2000bdb8
 8011314:	08018b24 	.word	0x08018b24
 8011318:	2300      	movs	r3, #0
 801131a:	442b      	add	r3, r5
 801131c:	4423      	add	r3, r4
 801131e:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011324:	68bb      	ldr	r3, [r7, #8]
 8011326:	1ad3      	subs	r3, r2, r3
 8011328:	2b00      	cmp	r3, #0
 801132a:	da02      	bge.n	8011332 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 801132c:	687b      	ldr	r3, [r7, #4]
 801132e:	68ba      	ldr	r2, [r7, #8]
 8011330:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8011332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011334:	891b      	ldrh	r3, [r3, #8]
 8011336:	461c      	mov	r4, r3
 8011338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801133a:	68db      	ldr	r3, [r3, #12]
 801133c:	899b      	ldrh	r3, [r3, #12]
 801133e:	b29b      	uxth	r3, r3
 8011340:	4618      	mov	r0, r3
 8011342:	f7f8 ff47 	bl	800a1d4 <lwip_htons>
 8011346:	4603      	mov	r3, r0
 8011348:	b2db      	uxtb	r3, r3
 801134a:	f003 0303 	and.w	r3, r3, #3
 801134e:	2b00      	cmp	r3, #0
 8011350:	d001      	beq.n	8011356 <tcp_output+0x2de>
 8011352:	2301      	movs	r3, #1
 8011354:	e000      	b.n	8011358 <tcp_output+0x2e0>
 8011356:	2300      	movs	r3, #0
 8011358:	4423      	add	r3, r4
 801135a:	2b00      	cmp	r3, #0
 801135c:	d049      	beq.n	80113f2 <tcp_output+0x37a>
      seg->next = NULL;
 801135e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011360:	2200      	movs	r2, #0
 8011362:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8011364:	687b      	ldr	r3, [r7, #4]
 8011366:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011368:	2b00      	cmp	r3, #0
 801136a:	d105      	bne.n	8011378 <tcp_output+0x300>
        pcb->unacked = seg;
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011370:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8011372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011374:	623b      	str	r3, [r7, #32]
 8011376:	e03f      	b.n	80113f8 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8011378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801137a:	68db      	ldr	r3, [r3, #12]
 801137c:	685b      	ldr	r3, [r3, #4]
 801137e:	4618      	mov	r0, r3
 8011380:	f7f8 ff3d 	bl	800a1fe <lwip_htonl>
 8011384:	4604      	mov	r4, r0
 8011386:	6a3b      	ldr	r3, [r7, #32]
 8011388:	68db      	ldr	r3, [r3, #12]
 801138a:	685b      	ldr	r3, [r3, #4]
 801138c:	4618      	mov	r0, r3
 801138e:	f7f8 ff36 	bl	800a1fe <lwip_htonl>
 8011392:	4603      	mov	r3, r0
 8011394:	1ae3      	subs	r3, r4, r3
 8011396:	2b00      	cmp	r3, #0
 8011398:	da24      	bge.n	80113e4 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	3370      	adds	r3, #112	; 0x70
 801139e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80113a0:	e002      	b.n	80113a8 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 80113a2:	69fb      	ldr	r3, [r7, #28]
 80113a4:	681b      	ldr	r3, [r3, #0]
 80113a6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80113a8:	69fb      	ldr	r3, [r7, #28]
 80113aa:	681b      	ldr	r3, [r3, #0]
 80113ac:	2b00      	cmp	r3, #0
 80113ae:	d011      	beq.n	80113d4 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80113b0:	69fb      	ldr	r3, [r7, #28]
 80113b2:	681b      	ldr	r3, [r3, #0]
 80113b4:	68db      	ldr	r3, [r3, #12]
 80113b6:	685b      	ldr	r3, [r3, #4]
 80113b8:	4618      	mov	r0, r3
 80113ba:	f7f8 ff20 	bl	800a1fe <lwip_htonl>
 80113be:	4604      	mov	r4, r0
 80113c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113c2:	68db      	ldr	r3, [r3, #12]
 80113c4:	685b      	ldr	r3, [r3, #4]
 80113c6:	4618      	mov	r0, r3
 80113c8:	f7f8 ff19 	bl	800a1fe <lwip_htonl>
 80113cc:	4603      	mov	r3, r0
 80113ce:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 80113d0:	2b00      	cmp	r3, #0
 80113d2:	dbe6      	blt.n	80113a2 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 80113d4:	69fb      	ldr	r3, [r7, #28]
 80113d6:	681a      	ldr	r2, [r3, #0]
 80113d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113da:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 80113dc:	69fb      	ldr	r3, [r7, #28]
 80113de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80113e0:	601a      	str	r2, [r3, #0]
 80113e2:	e009      	b.n	80113f8 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 80113e4:	6a3b      	ldr	r3, [r7, #32]
 80113e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80113e8:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 80113ea:	6a3b      	ldr	r3, [r7, #32]
 80113ec:	681b      	ldr	r3, [r3, #0]
 80113ee:	623b      	str	r3, [r7, #32]
 80113f0:	e002      	b.n	80113f8 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 80113f2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80113f4:	f7fb ff1d 	bl	800d232 <tcp_seg_free>
    }
    seg = pcb->unsent;
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80113fc:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 80113fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011400:	2b00      	cmp	r3, #0
 8011402:	d012      	beq.n	801142a <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8011404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011406:	68db      	ldr	r3, [r3, #12]
 8011408:	685b      	ldr	r3, [r3, #4]
 801140a:	4618      	mov	r0, r3
 801140c:	f7f8 fef7 	bl	800a1fe <lwip_htonl>
 8011410:	4602      	mov	r2, r0
 8011412:	687b      	ldr	r3, [r7, #4]
 8011414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011416:	1ad3      	subs	r3, r2, r3
 8011418:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801141a:	8912      	ldrh	r2, [r2, #8]
 801141c:	4413      	add	r3, r2
  while (seg != NULL &&
 801141e:	69ba      	ldr	r2, [r7, #24]
 8011420:	429a      	cmp	r2, r3
 8011422:	f4bf aed9 	bcs.w	80111d8 <tcp_output+0x160>
 8011426:	e000      	b.n	801142a <tcp_output+0x3b2>
      break;
 8011428:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801142e:	2b00      	cmp	r3, #0
 8011430:	d108      	bne.n	8011444 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8011432:	687b      	ldr	r3, [r7, #4]
 8011434:	2200      	movs	r2, #0
 8011436:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 801143a:	e004      	b.n	8011446 <tcp_output+0x3ce>
    goto output_done;
 801143c:	bf00      	nop
 801143e:	e002      	b.n	8011446 <tcp_output+0x3ce>
    goto output_done;
 8011440:	bf00      	nop
 8011442:	e000      	b.n	8011446 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8011444:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	8b5b      	ldrh	r3, [r3, #26]
 801144a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801144e:	b29a      	uxth	r2, r3
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8011454:	2300      	movs	r3, #0
}
 8011456:	4618      	mov	r0, r3
 8011458:	3728      	adds	r7, #40	; 0x28
 801145a:	46bd      	mov	sp, r7
 801145c:	bdb0      	pop	{r4, r5, r7, pc}
 801145e:	bf00      	nop

08011460 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8011460:	b580      	push	{r7, lr}
 8011462:	b082      	sub	sp, #8
 8011464:	af00      	add	r7, sp, #0
 8011466:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8011468:	687b      	ldr	r3, [r7, #4]
 801146a:	2b00      	cmp	r3, #0
 801146c:	d106      	bne.n	801147c <tcp_output_segment_busy+0x1c>
 801146e:	4b09      	ldr	r3, [pc, #36]	; (8011494 <tcp_output_segment_busy+0x34>)
 8011470:	f240 529a 	movw	r2, #1434	; 0x59a
 8011474:	4908      	ldr	r1, [pc, #32]	; (8011498 <tcp_output_segment_busy+0x38>)
 8011476:	4809      	ldr	r0, [pc, #36]	; (801149c <tcp_output_segment_busy+0x3c>)
 8011478:	f004 f800 	bl	801547c <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 801147c:	687b      	ldr	r3, [r7, #4]
 801147e:	685b      	ldr	r3, [r3, #4]
 8011480:	7b9b      	ldrb	r3, [r3, #14]
 8011482:	2b01      	cmp	r3, #1
 8011484:	d001      	beq.n	801148a <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8011486:	2301      	movs	r3, #1
 8011488:	e000      	b.n	801148c <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801148a:	2300      	movs	r3, #0
}
 801148c:	4618      	mov	r0, r3
 801148e:	3708      	adds	r7, #8
 8011490:	46bd      	mov	sp, r7
 8011492:	bd80      	pop	{r7, pc}
 8011494:	080185a0 	.word	0x080185a0
 8011498:	08018b3c 	.word	0x08018b3c
 801149c:	080185f4 	.word	0x080185f4

080114a0 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 80114a0:	b5b0      	push	{r4, r5, r7, lr}
 80114a2:	b08c      	sub	sp, #48	; 0x30
 80114a4:	af04      	add	r7, sp, #16
 80114a6:	60f8      	str	r0, [r7, #12]
 80114a8:	60b9      	str	r1, [r7, #8]
 80114aa:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 80114ac:	68fb      	ldr	r3, [r7, #12]
 80114ae:	2b00      	cmp	r3, #0
 80114b0:	d106      	bne.n	80114c0 <tcp_output_segment+0x20>
 80114b2:	4b63      	ldr	r3, [pc, #396]	; (8011640 <tcp_output_segment+0x1a0>)
 80114b4:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 80114b8:	4962      	ldr	r1, [pc, #392]	; (8011644 <tcp_output_segment+0x1a4>)
 80114ba:	4863      	ldr	r0, [pc, #396]	; (8011648 <tcp_output_segment+0x1a8>)
 80114bc:	f003 ffde 	bl	801547c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 80114c0:	68bb      	ldr	r3, [r7, #8]
 80114c2:	2b00      	cmp	r3, #0
 80114c4:	d106      	bne.n	80114d4 <tcp_output_segment+0x34>
 80114c6:	4b5e      	ldr	r3, [pc, #376]	; (8011640 <tcp_output_segment+0x1a0>)
 80114c8:	f240 52b9 	movw	r2, #1465	; 0x5b9
 80114cc:	495f      	ldr	r1, [pc, #380]	; (801164c <tcp_output_segment+0x1ac>)
 80114ce:	485e      	ldr	r0, [pc, #376]	; (8011648 <tcp_output_segment+0x1a8>)
 80114d0:	f003 ffd4 	bl	801547c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	2b00      	cmp	r3, #0
 80114d8:	d106      	bne.n	80114e8 <tcp_output_segment+0x48>
 80114da:	4b59      	ldr	r3, [pc, #356]	; (8011640 <tcp_output_segment+0x1a0>)
 80114dc:	f240 52ba 	movw	r2, #1466	; 0x5ba
 80114e0:	495b      	ldr	r1, [pc, #364]	; (8011650 <tcp_output_segment+0x1b0>)
 80114e2:	4859      	ldr	r0, [pc, #356]	; (8011648 <tcp_output_segment+0x1a8>)
 80114e4:	f003 ffca 	bl	801547c <iprintf>

  if (tcp_output_segment_busy(seg)) {
 80114e8:	68f8      	ldr	r0, [r7, #12]
 80114ea:	f7ff ffb9 	bl	8011460 <tcp_output_segment_busy>
 80114ee:	4603      	mov	r3, r0
 80114f0:	2b00      	cmp	r3, #0
 80114f2:	d001      	beq.n	80114f8 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 80114f4:	2300      	movs	r3, #0
 80114f6:	e09f      	b.n	8011638 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80114f8:	68bb      	ldr	r3, [r7, #8]
 80114fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80114fc:	68fb      	ldr	r3, [r7, #12]
 80114fe:	68dc      	ldr	r4, [r3, #12]
 8011500:	4610      	mov	r0, r2
 8011502:	f7f8 fe7c 	bl	800a1fe <lwip_htonl>
 8011506:	4603      	mov	r3, r0
 8011508:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801150a:	68bb      	ldr	r3, [r7, #8]
 801150c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801150e:	68fb      	ldr	r3, [r7, #12]
 8011510:	68dc      	ldr	r4, [r3, #12]
 8011512:	4610      	mov	r0, r2
 8011514:	f7f8 fe5e 	bl	800a1d4 <lwip_htons>
 8011518:	4603      	mov	r3, r0
 801151a:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801151c:	68bb      	ldr	r3, [r7, #8]
 801151e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011520:	68ba      	ldr	r2, [r7, #8]
 8011522:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8011524:	441a      	add	r2, r3
 8011526:	68bb      	ldr	r3, [r7, #8]
 8011528:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801152a:	68fb      	ldr	r3, [r7, #12]
 801152c:	68db      	ldr	r3, [r3, #12]
 801152e:	3314      	adds	r3, #20
 8011530:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8011532:	68fb      	ldr	r3, [r7, #12]
 8011534:	7a9b      	ldrb	r3, [r3, #10]
 8011536:	f003 0301 	and.w	r3, r3, #1
 801153a:	2b00      	cmp	r3, #0
 801153c:	d015      	beq.n	801156a <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801153e:	68bb      	ldr	r3, [r7, #8]
 8011540:	3304      	adds	r3, #4
 8011542:	461a      	mov	r2, r3
 8011544:	6879      	ldr	r1, [r7, #4]
 8011546:	f44f 7006 	mov.w	r0, #536	; 0x218
 801154a:	f7fc fa37 	bl	800d9bc <tcp_eff_send_mss_netif>
 801154e:	4603      	mov	r3, r0
 8011550:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8011552:	8b7b      	ldrh	r3, [r7, #26]
 8011554:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8011558:	4618      	mov	r0, r3
 801155a:	f7f8 fe50 	bl	800a1fe <lwip_htonl>
 801155e:	4602      	mov	r2, r0
 8011560:	69fb      	ldr	r3, [r7, #28]
 8011562:	601a      	str	r2, [r3, #0]
    opts += 1;
 8011564:	69fb      	ldr	r3, [r7, #28]
 8011566:	3304      	adds	r3, #4
 8011568:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801156a:	68bb      	ldr	r3, [r7, #8]
 801156c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011570:	2b00      	cmp	r3, #0
 8011572:	da02      	bge.n	801157a <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8011574:	68bb      	ldr	r3, [r7, #8]
 8011576:	2200      	movs	r2, #0
 8011578:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801157a:	68bb      	ldr	r3, [r7, #8]
 801157c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801157e:	2b00      	cmp	r3, #0
 8011580:	d10c      	bne.n	801159c <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8011582:	4b34      	ldr	r3, [pc, #208]	; (8011654 <tcp_output_segment+0x1b4>)
 8011584:	681a      	ldr	r2, [r3, #0]
 8011586:	68bb      	ldr	r3, [r7, #8]
 8011588:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801158a:	68fb      	ldr	r3, [r7, #12]
 801158c:	68db      	ldr	r3, [r3, #12]
 801158e:	685b      	ldr	r3, [r3, #4]
 8011590:	4618      	mov	r0, r3
 8011592:	f7f8 fe34 	bl	800a1fe <lwip_htonl>
 8011596:	4602      	mov	r2, r0
 8011598:	68bb      	ldr	r3, [r7, #8]
 801159a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801159c:	68fb      	ldr	r3, [r7, #12]
 801159e:	68da      	ldr	r2, [r3, #12]
 80115a0:	68fb      	ldr	r3, [r7, #12]
 80115a2:	685b      	ldr	r3, [r3, #4]
 80115a4:	685b      	ldr	r3, [r3, #4]
 80115a6:	1ad3      	subs	r3, r2, r3
 80115a8:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80115aa:	68fb      	ldr	r3, [r7, #12]
 80115ac:	685b      	ldr	r3, [r3, #4]
 80115ae:	8959      	ldrh	r1, [r3, #10]
 80115b0:	68fb      	ldr	r3, [r7, #12]
 80115b2:	685b      	ldr	r3, [r3, #4]
 80115b4:	8b3a      	ldrh	r2, [r7, #24]
 80115b6:	1a8a      	subs	r2, r1, r2
 80115b8:	b292      	uxth	r2, r2
 80115ba:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 80115bc:	68fb      	ldr	r3, [r7, #12]
 80115be:	685b      	ldr	r3, [r3, #4]
 80115c0:	8919      	ldrh	r1, [r3, #8]
 80115c2:	68fb      	ldr	r3, [r7, #12]
 80115c4:	685b      	ldr	r3, [r3, #4]
 80115c6:	8b3a      	ldrh	r2, [r7, #24]
 80115c8:	1a8a      	subs	r2, r1, r2
 80115ca:	b292      	uxth	r2, r2
 80115cc:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 80115ce:	68fb      	ldr	r3, [r7, #12]
 80115d0:	685b      	ldr	r3, [r3, #4]
 80115d2:	68fa      	ldr	r2, [r7, #12]
 80115d4:	68d2      	ldr	r2, [r2, #12]
 80115d6:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 80115d8:	68fb      	ldr	r3, [r7, #12]
 80115da:	68db      	ldr	r3, [r3, #12]
 80115dc:	2200      	movs	r2, #0
 80115de:	741a      	strb	r2, [r3, #16]
 80115e0:	2200      	movs	r2, #0
 80115e2:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 80115e4:	68fb      	ldr	r3, [r7, #12]
 80115e6:	68db      	ldr	r3, [r3, #12]
 80115e8:	f103 0214 	add.w	r2, r3, #20
 80115ec:	68fb      	ldr	r3, [r7, #12]
 80115ee:	7a9b      	ldrb	r3, [r3, #10]
 80115f0:	009b      	lsls	r3, r3, #2
 80115f2:	f003 0304 	and.w	r3, r3, #4
 80115f6:	4413      	add	r3, r2
 80115f8:	69fa      	ldr	r2, [r7, #28]
 80115fa:	429a      	cmp	r2, r3
 80115fc:	d006      	beq.n	801160c <tcp_output_segment+0x16c>
 80115fe:	4b10      	ldr	r3, [pc, #64]	; (8011640 <tcp_output_segment+0x1a0>)
 8011600:	f240 621c 	movw	r2, #1564	; 0x61c
 8011604:	4914      	ldr	r1, [pc, #80]	; (8011658 <tcp_output_segment+0x1b8>)
 8011606:	4810      	ldr	r0, [pc, #64]	; (8011648 <tcp_output_segment+0x1a8>)
 8011608:	f003 ff38 	bl	801547c <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801160c:	68fb      	ldr	r3, [r7, #12]
 801160e:	6858      	ldr	r0, [r3, #4]
 8011610:	68b9      	ldr	r1, [r7, #8]
 8011612:	68bb      	ldr	r3, [r7, #8]
 8011614:	1d1c      	adds	r4, r3, #4
 8011616:	68bb      	ldr	r3, [r7, #8]
 8011618:	7add      	ldrb	r5, [r3, #11]
 801161a:	68bb      	ldr	r3, [r7, #8]
 801161c:	7a9b      	ldrb	r3, [r3, #10]
 801161e:	687a      	ldr	r2, [r7, #4]
 8011620:	9202      	str	r2, [sp, #8]
 8011622:	2206      	movs	r2, #6
 8011624:	9201      	str	r2, [sp, #4]
 8011626:	9300      	str	r3, [sp, #0]
 8011628:	462b      	mov	r3, r5
 801162a:	4622      	mov	r2, r4
 801162c:	f002 fbac 	bl	8013d88 <ip4_output_if>
 8011630:	4603      	mov	r3, r0
 8011632:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8011634:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011638:	4618      	mov	r0, r3
 801163a:	3720      	adds	r7, #32
 801163c:	46bd      	mov	sp, r7
 801163e:	bdb0      	pop	{r4, r5, r7, pc}
 8011640:	080185a0 	.word	0x080185a0
 8011644:	08018b64 	.word	0x08018b64
 8011648:	080185f4 	.word	0x080185f4
 801164c:	08018b84 	.word	0x08018b84
 8011650:	08018ba4 	.word	0x08018ba4
 8011654:	2000bda8 	.word	0x2000bda8
 8011658:	08018bc8 	.word	0x08018bc8

0801165c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 801165c:	b5b0      	push	{r4, r5, r7, lr}
 801165e:	b084      	sub	sp, #16
 8011660:	af00      	add	r7, sp, #0
 8011662:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	2b00      	cmp	r3, #0
 8011668:	d106      	bne.n	8011678 <tcp_rexmit_rto_prepare+0x1c>
 801166a:	4b31      	ldr	r3, [pc, #196]	; (8011730 <tcp_rexmit_rto_prepare+0xd4>)
 801166c:	f240 6263 	movw	r2, #1635	; 0x663
 8011670:	4930      	ldr	r1, [pc, #192]	; (8011734 <tcp_rexmit_rto_prepare+0xd8>)
 8011672:	4831      	ldr	r0, [pc, #196]	; (8011738 <tcp_rexmit_rto_prepare+0xdc>)
 8011674:	f003 ff02 	bl	801547c <iprintf>

  if (pcb->unacked == NULL) {
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801167c:	2b00      	cmp	r3, #0
 801167e:	d102      	bne.n	8011686 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8011680:	f06f 0305 	mvn.w	r3, #5
 8011684:	e050      	b.n	8011728 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801168a:	60fb      	str	r3, [r7, #12]
 801168c:	e00b      	b.n	80116a6 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801168e:	68f8      	ldr	r0, [r7, #12]
 8011690:	f7ff fee6 	bl	8011460 <tcp_output_segment_busy>
 8011694:	4603      	mov	r3, r0
 8011696:	2b00      	cmp	r3, #0
 8011698:	d002      	beq.n	80116a0 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801169a:	f06f 0305 	mvn.w	r3, #5
 801169e:	e043      	b.n	8011728 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80116a0:	68fb      	ldr	r3, [r7, #12]
 80116a2:	681b      	ldr	r3, [r3, #0]
 80116a4:	60fb      	str	r3, [r7, #12]
 80116a6:	68fb      	ldr	r3, [r7, #12]
 80116a8:	681b      	ldr	r3, [r3, #0]
 80116aa:	2b00      	cmp	r3, #0
 80116ac:	d1ef      	bne.n	801168e <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 80116ae:	68f8      	ldr	r0, [r7, #12]
 80116b0:	f7ff fed6 	bl	8011460 <tcp_output_segment_busy>
 80116b4:	4603      	mov	r3, r0
 80116b6:	2b00      	cmp	r3, #0
 80116b8:	d002      	beq.n	80116c0 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 80116ba:	f06f 0305 	mvn.w	r3, #5
 80116be:	e033      	b.n	8011728 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80116c0:	687b      	ldr	r3, [r7, #4]
 80116c2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80116c4:	68fb      	ldr	r3, [r7, #12]
 80116c6:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	2200      	movs	r2, #0
 80116d4:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	8b5b      	ldrh	r3, [r3, #26]
 80116da:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80116de:	b29a      	uxth	r2, r3
 80116e0:	687b      	ldr	r3, [r7, #4]
 80116e2:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80116e4:	68fb      	ldr	r3, [r7, #12]
 80116e6:	68db      	ldr	r3, [r3, #12]
 80116e8:	685b      	ldr	r3, [r3, #4]
 80116ea:	4618      	mov	r0, r3
 80116ec:	f7f8 fd87 	bl	800a1fe <lwip_htonl>
 80116f0:	4604      	mov	r4, r0
 80116f2:	68fb      	ldr	r3, [r7, #12]
 80116f4:	891b      	ldrh	r3, [r3, #8]
 80116f6:	461d      	mov	r5, r3
 80116f8:	68fb      	ldr	r3, [r7, #12]
 80116fa:	68db      	ldr	r3, [r3, #12]
 80116fc:	899b      	ldrh	r3, [r3, #12]
 80116fe:	b29b      	uxth	r3, r3
 8011700:	4618      	mov	r0, r3
 8011702:	f7f8 fd67 	bl	800a1d4 <lwip_htons>
 8011706:	4603      	mov	r3, r0
 8011708:	b2db      	uxtb	r3, r3
 801170a:	f003 0303 	and.w	r3, r3, #3
 801170e:	2b00      	cmp	r3, #0
 8011710:	d001      	beq.n	8011716 <tcp_rexmit_rto_prepare+0xba>
 8011712:	2301      	movs	r3, #1
 8011714:	e000      	b.n	8011718 <tcp_rexmit_rto_prepare+0xbc>
 8011716:	2300      	movs	r3, #0
 8011718:	442b      	add	r3, r5
 801171a:	18e2      	adds	r2, r4, r3
 801171c:	687b      	ldr	r3, [r7, #4]
 801171e:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	2200      	movs	r2, #0
 8011724:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8011726:	2300      	movs	r3, #0
}
 8011728:	4618      	mov	r0, r3
 801172a:	3710      	adds	r7, #16
 801172c:	46bd      	mov	sp, r7
 801172e:	bdb0      	pop	{r4, r5, r7, pc}
 8011730:	080185a0 	.word	0x080185a0
 8011734:	08018bdc 	.word	0x08018bdc
 8011738:	080185f4 	.word	0x080185f4

0801173c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 801173c:	b580      	push	{r7, lr}
 801173e:	b082      	sub	sp, #8
 8011740:	af00      	add	r7, sp, #0
 8011742:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	2b00      	cmp	r3, #0
 8011748:	d106      	bne.n	8011758 <tcp_rexmit_rto_commit+0x1c>
 801174a:	4b0d      	ldr	r3, [pc, #52]	; (8011780 <tcp_rexmit_rto_commit+0x44>)
 801174c:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8011750:	490c      	ldr	r1, [pc, #48]	; (8011784 <tcp_rexmit_rto_commit+0x48>)
 8011752:	480d      	ldr	r0, [pc, #52]	; (8011788 <tcp_rexmit_rto_commit+0x4c>)
 8011754:	f003 fe92 	bl	801547c <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8011758:	687b      	ldr	r3, [r7, #4]
 801175a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801175e:	2bff      	cmp	r3, #255	; 0xff
 8011760:	d007      	beq.n	8011772 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8011762:	687b      	ldr	r3, [r7, #4]
 8011764:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011768:	3301      	adds	r3, #1
 801176a:	b2da      	uxtb	r2, r3
 801176c:	687b      	ldr	r3, [r7, #4]
 801176e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8011772:	6878      	ldr	r0, [r7, #4]
 8011774:	f7ff fc80 	bl	8011078 <tcp_output>
}
 8011778:	bf00      	nop
 801177a:	3708      	adds	r7, #8
 801177c:	46bd      	mov	sp, r7
 801177e:	bd80      	pop	{r7, pc}
 8011780:	080185a0 	.word	0x080185a0
 8011784:	08018c00 	.word	0x08018c00
 8011788:	080185f4 	.word	0x080185f4

0801178c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801178c:	b580      	push	{r7, lr}
 801178e:	b082      	sub	sp, #8
 8011790:	af00      	add	r7, sp, #0
 8011792:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8011794:	687b      	ldr	r3, [r7, #4]
 8011796:	2b00      	cmp	r3, #0
 8011798:	d106      	bne.n	80117a8 <tcp_rexmit_rto+0x1c>
 801179a:	4b0a      	ldr	r3, [pc, #40]	; (80117c4 <tcp_rexmit_rto+0x38>)
 801179c:	f240 62ad 	movw	r2, #1709	; 0x6ad
 80117a0:	4909      	ldr	r1, [pc, #36]	; (80117c8 <tcp_rexmit_rto+0x3c>)
 80117a2:	480a      	ldr	r0, [pc, #40]	; (80117cc <tcp_rexmit_rto+0x40>)
 80117a4:	f003 fe6a 	bl	801547c <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 80117a8:	6878      	ldr	r0, [r7, #4]
 80117aa:	f7ff ff57 	bl	801165c <tcp_rexmit_rto_prepare>
 80117ae:	4603      	mov	r3, r0
 80117b0:	2b00      	cmp	r3, #0
 80117b2:	d102      	bne.n	80117ba <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 80117b4:	6878      	ldr	r0, [r7, #4]
 80117b6:	f7ff ffc1 	bl	801173c <tcp_rexmit_rto_commit>
  }
}
 80117ba:	bf00      	nop
 80117bc:	3708      	adds	r7, #8
 80117be:	46bd      	mov	sp, r7
 80117c0:	bd80      	pop	{r7, pc}
 80117c2:	bf00      	nop
 80117c4:	080185a0 	.word	0x080185a0
 80117c8:	08018c24 	.word	0x08018c24
 80117cc:	080185f4 	.word	0x080185f4

080117d0 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 80117d0:	b590      	push	{r4, r7, lr}
 80117d2:	b085      	sub	sp, #20
 80117d4:	af00      	add	r7, sp, #0
 80117d6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 80117d8:	687b      	ldr	r3, [r7, #4]
 80117da:	2b00      	cmp	r3, #0
 80117dc:	d106      	bne.n	80117ec <tcp_rexmit+0x1c>
 80117de:	4b2f      	ldr	r3, [pc, #188]	; (801189c <tcp_rexmit+0xcc>)
 80117e0:	f240 62c1 	movw	r2, #1729	; 0x6c1
 80117e4:	492e      	ldr	r1, [pc, #184]	; (80118a0 <tcp_rexmit+0xd0>)
 80117e6:	482f      	ldr	r0, [pc, #188]	; (80118a4 <tcp_rexmit+0xd4>)
 80117e8:	f003 fe48 	bl	801547c <iprintf>

  if (pcb->unacked == NULL) {
 80117ec:	687b      	ldr	r3, [r7, #4]
 80117ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80117f0:	2b00      	cmp	r3, #0
 80117f2:	d102      	bne.n	80117fa <tcp_rexmit+0x2a>
    return ERR_VAL;
 80117f4:	f06f 0305 	mvn.w	r3, #5
 80117f8:	e04c      	b.n	8011894 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80117fe:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8011800:	68b8      	ldr	r0, [r7, #8]
 8011802:	f7ff fe2d 	bl	8011460 <tcp_output_segment_busy>
 8011806:	4603      	mov	r3, r0
 8011808:	2b00      	cmp	r3, #0
 801180a:	d002      	beq.n	8011812 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 801180c:	f06f 0305 	mvn.w	r3, #5
 8011810:	e040      	b.n	8011894 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8011812:	68bb      	ldr	r3, [r7, #8]
 8011814:	681a      	ldr	r2, [r3, #0]
 8011816:	687b      	ldr	r3, [r7, #4]
 8011818:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	336c      	adds	r3, #108	; 0x6c
 801181e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8011820:	e002      	b.n	8011828 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8011822:	68fb      	ldr	r3, [r7, #12]
 8011824:	681b      	ldr	r3, [r3, #0]
 8011826:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8011828:	68fb      	ldr	r3, [r7, #12]
 801182a:	681b      	ldr	r3, [r3, #0]
 801182c:	2b00      	cmp	r3, #0
 801182e:	d011      	beq.n	8011854 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8011830:	68fb      	ldr	r3, [r7, #12]
 8011832:	681b      	ldr	r3, [r3, #0]
 8011834:	68db      	ldr	r3, [r3, #12]
 8011836:	685b      	ldr	r3, [r3, #4]
 8011838:	4618      	mov	r0, r3
 801183a:	f7f8 fce0 	bl	800a1fe <lwip_htonl>
 801183e:	4604      	mov	r4, r0
 8011840:	68bb      	ldr	r3, [r7, #8]
 8011842:	68db      	ldr	r3, [r3, #12]
 8011844:	685b      	ldr	r3, [r3, #4]
 8011846:	4618      	mov	r0, r3
 8011848:	f7f8 fcd9 	bl	800a1fe <lwip_htonl>
 801184c:	4603      	mov	r3, r0
 801184e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8011850:	2b00      	cmp	r3, #0
 8011852:	dbe6      	blt.n	8011822 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8011854:	68fb      	ldr	r3, [r7, #12]
 8011856:	681a      	ldr	r2, [r3, #0]
 8011858:	68bb      	ldr	r3, [r7, #8]
 801185a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801185c:	68fb      	ldr	r3, [r7, #12]
 801185e:	68ba      	ldr	r2, [r7, #8]
 8011860:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8011862:	68bb      	ldr	r3, [r7, #8]
 8011864:	681b      	ldr	r3, [r3, #0]
 8011866:	2b00      	cmp	r3, #0
 8011868:	d103      	bne.n	8011872 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	2200      	movs	r2, #0
 801186e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8011872:	687b      	ldr	r3, [r7, #4]
 8011874:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011878:	2bff      	cmp	r3, #255	; 0xff
 801187a:	d007      	beq.n	801188c <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011882:	3301      	adds	r3, #1
 8011884:	b2da      	uxtb	r2, r3
 8011886:	687b      	ldr	r3, [r7, #4]
 8011888:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	2200      	movs	r2, #0
 8011890:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8011892:	2300      	movs	r3, #0
}
 8011894:	4618      	mov	r0, r3
 8011896:	3714      	adds	r7, #20
 8011898:	46bd      	mov	sp, r7
 801189a:	bd90      	pop	{r4, r7, pc}
 801189c:	080185a0 	.word	0x080185a0
 80118a0:	08018c40 	.word	0x08018c40
 80118a4:	080185f4 	.word	0x080185f4

080118a8 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80118a8:	b580      	push	{r7, lr}
 80118aa:	b082      	sub	sp, #8
 80118ac:	af00      	add	r7, sp, #0
 80118ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	2b00      	cmp	r3, #0
 80118b4:	d106      	bne.n	80118c4 <tcp_rexmit_fast+0x1c>
 80118b6:	4b2a      	ldr	r3, [pc, #168]	; (8011960 <tcp_rexmit_fast+0xb8>)
 80118b8:	f240 62f9 	movw	r2, #1785	; 0x6f9
 80118bc:	4929      	ldr	r1, [pc, #164]	; (8011964 <tcp_rexmit_fast+0xbc>)
 80118be:	482a      	ldr	r0, [pc, #168]	; (8011968 <tcp_rexmit_fast+0xc0>)
 80118c0:	f003 fddc 	bl	801547c <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80118c8:	2b00      	cmp	r3, #0
 80118ca:	d044      	beq.n	8011956 <tcp_rexmit_fast+0xae>
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	8b5b      	ldrh	r3, [r3, #26]
 80118d0:	f003 0304 	and.w	r3, r3, #4
 80118d4:	2b00      	cmp	r3, #0
 80118d6:	d13e      	bne.n	8011956 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 80118d8:	6878      	ldr	r0, [r7, #4]
 80118da:	f7ff ff79 	bl	80117d0 <tcp_rexmit>
 80118de:	4603      	mov	r3, r0
 80118e0:	2b00      	cmp	r3, #0
 80118e2:	d138      	bne.n	8011956 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80118e4:	687b      	ldr	r3, [r7, #4]
 80118e6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80118f0:	4293      	cmp	r3, r2
 80118f2:	bf28      	it	cs
 80118f4:	4613      	movcs	r3, r2
 80118f6:	b29b      	uxth	r3, r3
 80118f8:	0fda      	lsrs	r2, r3, #31
 80118fa:	4413      	add	r3, r2
 80118fc:	105b      	asrs	r3, r3, #1
 80118fe:	b29a      	uxth	r2, r3
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8011906:	687b      	ldr	r3, [r7, #4]
 8011908:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801190c:	461a      	mov	r2, r3
 801190e:	687b      	ldr	r3, [r7, #4]
 8011910:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011912:	005b      	lsls	r3, r3, #1
 8011914:	429a      	cmp	r2, r3
 8011916:	d206      	bcs.n	8011926 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8011918:	687b      	ldr	r3, [r7, #4]
 801191a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801191c:	005b      	lsls	r3, r3, #1
 801191e:	b29a      	uxth	r2, r3
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8011926:	687b      	ldr	r3, [r7, #4]
 8011928:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011930:	4619      	mov	r1, r3
 8011932:	0049      	lsls	r1, r1, #1
 8011934:	440b      	add	r3, r1
 8011936:	b29b      	uxth	r3, r3
 8011938:	4413      	add	r3, r2
 801193a:	b29a      	uxth	r2, r3
 801193c:	687b      	ldr	r3, [r7, #4]
 801193e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	8b5b      	ldrh	r3, [r3, #26]
 8011946:	f043 0304 	orr.w	r3, r3, #4
 801194a:	b29a      	uxth	r2, r3
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	2200      	movs	r2, #0
 8011954:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8011956:	bf00      	nop
 8011958:	3708      	adds	r7, #8
 801195a:	46bd      	mov	sp, r7
 801195c:	bd80      	pop	{r7, pc}
 801195e:	bf00      	nop
 8011960:	080185a0 	.word	0x080185a0
 8011964:	08018c58 	.word	0x08018c58
 8011968:	080185f4 	.word	0x080185f4

0801196c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801196c:	b580      	push	{r7, lr}
 801196e:	b086      	sub	sp, #24
 8011970:	af00      	add	r7, sp, #0
 8011972:	60f8      	str	r0, [r7, #12]
 8011974:	607b      	str	r3, [r7, #4]
 8011976:	460b      	mov	r3, r1
 8011978:	817b      	strh	r3, [r7, #10]
 801197a:	4613      	mov	r3, r2
 801197c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801197e:	897a      	ldrh	r2, [r7, #10]
 8011980:	893b      	ldrh	r3, [r7, #8]
 8011982:	4413      	add	r3, r2
 8011984:	b29b      	uxth	r3, r3
 8011986:	3314      	adds	r3, #20
 8011988:	b29b      	uxth	r3, r3
 801198a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801198e:	4619      	mov	r1, r3
 8011990:	2022      	movs	r0, #34	; 0x22
 8011992:	f7f9 fce7 	bl	800b364 <pbuf_alloc>
 8011996:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8011998:	697b      	ldr	r3, [r7, #20]
 801199a:	2b00      	cmp	r3, #0
 801199c:	d04d      	beq.n	8011a3a <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801199e:	897b      	ldrh	r3, [r7, #10]
 80119a0:	3313      	adds	r3, #19
 80119a2:	697a      	ldr	r2, [r7, #20]
 80119a4:	8952      	ldrh	r2, [r2, #10]
 80119a6:	4293      	cmp	r3, r2
 80119a8:	db06      	blt.n	80119b8 <tcp_output_alloc_header_common+0x4c>
 80119aa:	4b26      	ldr	r3, [pc, #152]	; (8011a44 <tcp_output_alloc_header_common+0xd8>)
 80119ac:	f240 7223 	movw	r2, #1827	; 0x723
 80119b0:	4925      	ldr	r1, [pc, #148]	; (8011a48 <tcp_output_alloc_header_common+0xdc>)
 80119b2:	4826      	ldr	r0, [pc, #152]	; (8011a4c <tcp_output_alloc_header_common+0xe0>)
 80119b4:	f003 fd62 	bl	801547c <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80119b8:	697b      	ldr	r3, [r7, #20]
 80119ba:	685b      	ldr	r3, [r3, #4]
 80119bc:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 80119be:	8c3b      	ldrh	r3, [r7, #32]
 80119c0:	4618      	mov	r0, r3
 80119c2:	f7f8 fc07 	bl	800a1d4 <lwip_htons>
 80119c6:	4603      	mov	r3, r0
 80119c8:	461a      	mov	r2, r3
 80119ca:	693b      	ldr	r3, [r7, #16]
 80119cc:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 80119ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80119d0:	4618      	mov	r0, r3
 80119d2:	f7f8 fbff 	bl	800a1d4 <lwip_htons>
 80119d6:	4603      	mov	r3, r0
 80119d8:	461a      	mov	r2, r3
 80119da:	693b      	ldr	r3, [r7, #16]
 80119dc:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 80119de:	693b      	ldr	r3, [r7, #16]
 80119e0:	687a      	ldr	r2, [r7, #4]
 80119e2:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 80119e4:	68f8      	ldr	r0, [r7, #12]
 80119e6:	f7f8 fc0a 	bl	800a1fe <lwip_htonl>
 80119ea:	4602      	mov	r2, r0
 80119ec:	693b      	ldr	r3, [r7, #16]
 80119ee:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 80119f0:	897b      	ldrh	r3, [r7, #10]
 80119f2:	089b      	lsrs	r3, r3, #2
 80119f4:	b29b      	uxth	r3, r3
 80119f6:	3305      	adds	r3, #5
 80119f8:	b29b      	uxth	r3, r3
 80119fa:	031b      	lsls	r3, r3, #12
 80119fc:	b29a      	uxth	r2, r3
 80119fe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011a02:	b29b      	uxth	r3, r3
 8011a04:	4313      	orrs	r3, r2
 8011a06:	b29b      	uxth	r3, r3
 8011a08:	4618      	mov	r0, r3
 8011a0a:	f7f8 fbe3 	bl	800a1d4 <lwip_htons>
 8011a0e:	4603      	mov	r3, r0
 8011a10:	461a      	mov	r2, r3
 8011a12:	693b      	ldr	r3, [r7, #16]
 8011a14:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8011a16:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8011a18:	4618      	mov	r0, r3
 8011a1a:	f7f8 fbdb 	bl	800a1d4 <lwip_htons>
 8011a1e:	4603      	mov	r3, r0
 8011a20:	461a      	mov	r2, r3
 8011a22:	693b      	ldr	r3, [r7, #16]
 8011a24:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8011a26:	693b      	ldr	r3, [r7, #16]
 8011a28:	2200      	movs	r2, #0
 8011a2a:	741a      	strb	r2, [r3, #16]
 8011a2c:	2200      	movs	r2, #0
 8011a2e:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8011a30:	693b      	ldr	r3, [r7, #16]
 8011a32:	2200      	movs	r2, #0
 8011a34:	749a      	strb	r2, [r3, #18]
 8011a36:	2200      	movs	r2, #0
 8011a38:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8011a3a:	697b      	ldr	r3, [r7, #20]
}
 8011a3c:	4618      	mov	r0, r3
 8011a3e:	3718      	adds	r7, #24
 8011a40:	46bd      	mov	sp, r7
 8011a42:	bd80      	pop	{r7, pc}
 8011a44:	080185a0 	.word	0x080185a0
 8011a48:	08018c78 	.word	0x08018c78
 8011a4c:	080185f4 	.word	0x080185f4

08011a50 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8011a50:	b5b0      	push	{r4, r5, r7, lr}
 8011a52:	b08a      	sub	sp, #40	; 0x28
 8011a54:	af04      	add	r7, sp, #16
 8011a56:	60f8      	str	r0, [r7, #12]
 8011a58:	607b      	str	r3, [r7, #4]
 8011a5a:	460b      	mov	r3, r1
 8011a5c:	817b      	strh	r3, [r7, #10]
 8011a5e:	4613      	mov	r3, r2
 8011a60:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8011a62:	68fb      	ldr	r3, [r7, #12]
 8011a64:	2b00      	cmp	r3, #0
 8011a66:	d106      	bne.n	8011a76 <tcp_output_alloc_header+0x26>
 8011a68:	4b15      	ldr	r3, [pc, #84]	; (8011ac0 <tcp_output_alloc_header+0x70>)
 8011a6a:	f240 7242 	movw	r2, #1858	; 0x742
 8011a6e:	4915      	ldr	r1, [pc, #84]	; (8011ac4 <tcp_output_alloc_header+0x74>)
 8011a70:	4815      	ldr	r0, [pc, #84]	; (8011ac8 <tcp_output_alloc_header+0x78>)
 8011a72:	f003 fd03 	bl	801547c <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8011a76:	68fb      	ldr	r3, [r7, #12]
 8011a78:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8011a7a:	68fb      	ldr	r3, [r7, #12]
 8011a7c:	8adb      	ldrh	r3, [r3, #22]
 8011a7e:	68fa      	ldr	r2, [r7, #12]
 8011a80:	8b12      	ldrh	r2, [r2, #24]
 8011a82:	68f9      	ldr	r1, [r7, #12]
 8011a84:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8011a86:	893d      	ldrh	r5, [r7, #8]
 8011a88:	897c      	ldrh	r4, [r7, #10]
 8011a8a:	9103      	str	r1, [sp, #12]
 8011a8c:	2110      	movs	r1, #16
 8011a8e:	9102      	str	r1, [sp, #8]
 8011a90:	9201      	str	r2, [sp, #4]
 8011a92:	9300      	str	r3, [sp, #0]
 8011a94:	687b      	ldr	r3, [r7, #4]
 8011a96:	462a      	mov	r2, r5
 8011a98:	4621      	mov	r1, r4
 8011a9a:	f7ff ff67 	bl	801196c <tcp_output_alloc_header_common>
 8011a9e:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8011aa0:	697b      	ldr	r3, [r7, #20]
 8011aa2:	2b00      	cmp	r3, #0
 8011aa4:	d006      	beq.n	8011ab4 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8011aa6:	68fb      	ldr	r3, [r7, #12]
 8011aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011aaa:	68fa      	ldr	r2, [r7, #12]
 8011aac:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8011aae:	441a      	add	r2, r3
 8011ab0:	68fb      	ldr	r3, [r7, #12]
 8011ab2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8011ab4:	697b      	ldr	r3, [r7, #20]
}
 8011ab6:	4618      	mov	r0, r3
 8011ab8:	3718      	adds	r7, #24
 8011aba:	46bd      	mov	sp, r7
 8011abc:	bdb0      	pop	{r4, r5, r7, pc}
 8011abe:	bf00      	nop
 8011ac0:	080185a0 	.word	0x080185a0
 8011ac4:	08018ca8 	.word	0x08018ca8
 8011ac8:	080185f4 	.word	0x080185f4

08011acc <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8011acc:	b580      	push	{r7, lr}
 8011ace:	b088      	sub	sp, #32
 8011ad0:	af00      	add	r7, sp, #0
 8011ad2:	60f8      	str	r0, [r7, #12]
 8011ad4:	60b9      	str	r1, [r7, #8]
 8011ad6:	4611      	mov	r1, r2
 8011ad8:	461a      	mov	r2, r3
 8011ada:	460b      	mov	r3, r1
 8011adc:	71fb      	strb	r3, [r7, #7]
 8011ade:	4613      	mov	r3, r2
 8011ae0:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8011ae2:	2300      	movs	r3, #0
 8011ae4:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8011ae6:	68bb      	ldr	r3, [r7, #8]
 8011ae8:	2b00      	cmp	r3, #0
 8011aea:	d106      	bne.n	8011afa <tcp_output_fill_options+0x2e>
 8011aec:	4b13      	ldr	r3, [pc, #76]	; (8011b3c <tcp_output_fill_options+0x70>)
 8011aee:	f240 7256 	movw	r2, #1878	; 0x756
 8011af2:	4913      	ldr	r1, [pc, #76]	; (8011b40 <tcp_output_fill_options+0x74>)
 8011af4:	4813      	ldr	r0, [pc, #76]	; (8011b44 <tcp_output_fill_options+0x78>)
 8011af6:	f003 fcc1 	bl	801547c <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8011afa:	68bb      	ldr	r3, [r7, #8]
 8011afc:	685b      	ldr	r3, [r3, #4]
 8011afe:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8011b00:	69bb      	ldr	r3, [r7, #24]
 8011b02:	3314      	adds	r3, #20
 8011b04:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8011b06:	69bb      	ldr	r3, [r7, #24]
 8011b08:	f103 0214 	add.w	r2, r3, #20
 8011b0c:	8bfb      	ldrh	r3, [r7, #30]
 8011b0e:	009b      	lsls	r3, r3, #2
 8011b10:	4619      	mov	r1, r3
 8011b12:	79fb      	ldrb	r3, [r7, #7]
 8011b14:	009b      	lsls	r3, r3, #2
 8011b16:	f003 0304 	and.w	r3, r3, #4
 8011b1a:	440b      	add	r3, r1
 8011b1c:	4413      	add	r3, r2
 8011b1e:	697a      	ldr	r2, [r7, #20]
 8011b20:	429a      	cmp	r2, r3
 8011b22:	d006      	beq.n	8011b32 <tcp_output_fill_options+0x66>
 8011b24:	4b05      	ldr	r3, [pc, #20]	; (8011b3c <tcp_output_fill_options+0x70>)
 8011b26:	f240 7275 	movw	r2, #1909	; 0x775
 8011b2a:	4907      	ldr	r1, [pc, #28]	; (8011b48 <tcp_output_fill_options+0x7c>)
 8011b2c:	4805      	ldr	r0, [pc, #20]	; (8011b44 <tcp_output_fill_options+0x78>)
 8011b2e:	f003 fca5 	bl	801547c <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8011b32:	bf00      	nop
 8011b34:	3720      	adds	r7, #32
 8011b36:	46bd      	mov	sp, r7
 8011b38:	bd80      	pop	{r7, pc}
 8011b3a:	bf00      	nop
 8011b3c:	080185a0 	.word	0x080185a0
 8011b40:	08018cd0 	.word	0x08018cd0
 8011b44:	080185f4 	.word	0x080185f4
 8011b48:	08018bc8 	.word	0x08018bc8

08011b4c <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8011b4c:	b580      	push	{r7, lr}
 8011b4e:	b08a      	sub	sp, #40	; 0x28
 8011b50:	af04      	add	r7, sp, #16
 8011b52:	60f8      	str	r0, [r7, #12]
 8011b54:	60b9      	str	r1, [r7, #8]
 8011b56:	607a      	str	r2, [r7, #4]
 8011b58:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8011b5a:	68bb      	ldr	r3, [r7, #8]
 8011b5c:	2b00      	cmp	r3, #0
 8011b5e:	d106      	bne.n	8011b6e <tcp_output_control_segment+0x22>
 8011b60:	4b1c      	ldr	r3, [pc, #112]	; (8011bd4 <tcp_output_control_segment+0x88>)
 8011b62:	f240 7287 	movw	r2, #1927	; 0x787
 8011b66:	491c      	ldr	r1, [pc, #112]	; (8011bd8 <tcp_output_control_segment+0x8c>)
 8011b68:	481c      	ldr	r0, [pc, #112]	; (8011bdc <tcp_output_control_segment+0x90>)
 8011b6a:	f003 fc87 	bl	801547c <iprintf>

  netif = tcp_route(pcb, src, dst);
 8011b6e:	683a      	ldr	r2, [r7, #0]
 8011b70:	6879      	ldr	r1, [r7, #4]
 8011b72:	68f8      	ldr	r0, [r7, #12]
 8011b74:	f7fe fae8 	bl	8010148 <tcp_route>
 8011b78:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8011b7a:	693b      	ldr	r3, [r7, #16]
 8011b7c:	2b00      	cmp	r3, #0
 8011b7e:	d102      	bne.n	8011b86 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8011b80:	23fc      	movs	r3, #252	; 0xfc
 8011b82:	75fb      	strb	r3, [r7, #23]
 8011b84:	e01c      	b.n	8011bc0 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8011b86:	68fb      	ldr	r3, [r7, #12]
 8011b88:	2b00      	cmp	r3, #0
 8011b8a:	d006      	beq.n	8011b9a <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8011b8c:	68fb      	ldr	r3, [r7, #12]
 8011b8e:	7adb      	ldrb	r3, [r3, #11]
 8011b90:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8011b92:	68fb      	ldr	r3, [r7, #12]
 8011b94:	7a9b      	ldrb	r3, [r3, #10]
 8011b96:	757b      	strb	r3, [r7, #21]
 8011b98:	e003      	b.n	8011ba2 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8011b9a:	23ff      	movs	r3, #255	; 0xff
 8011b9c:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8011b9e:	2300      	movs	r3, #0
 8011ba0:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8011ba2:	7dba      	ldrb	r2, [r7, #22]
 8011ba4:	693b      	ldr	r3, [r7, #16]
 8011ba6:	9302      	str	r3, [sp, #8]
 8011ba8:	2306      	movs	r3, #6
 8011baa:	9301      	str	r3, [sp, #4]
 8011bac:	7d7b      	ldrb	r3, [r7, #21]
 8011bae:	9300      	str	r3, [sp, #0]
 8011bb0:	4613      	mov	r3, r2
 8011bb2:	683a      	ldr	r2, [r7, #0]
 8011bb4:	6879      	ldr	r1, [r7, #4]
 8011bb6:	68b8      	ldr	r0, [r7, #8]
 8011bb8:	f002 f8e6 	bl	8013d88 <ip4_output_if>
 8011bbc:	4603      	mov	r3, r0
 8011bbe:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8011bc0:	68b8      	ldr	r0, [r7, #8]
 8011bc2:	f7f9 feb3 	bl	800b92c <pbuf_free>
  return err;
 8011bc6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011bca:	4618      	mov	r0, r3
 8011bcc:	3718      	adds	r7, #24
 8011bce:	46bd      	mov	sp, r7
 8011bd0:	bd80      	pop	{r7, pc}
 8011bd2:	bf00      	nop
 8011bd4:	080185a0 	.word	0x080185a0
 8011bd8:	08018cf8 	.word	0x08018cf8
 8011bdc:	080185f4 	.word	0x080185f4

08011be0 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8011be0:	b590      	push	{r4, r7, lr}
 8011be2:	b08b      	sub	sp, #44	; 0x2c
 8011be4:	af04      	add	r7, sp, #16
 8011be6:	60f8      	str	r0, [r7, #12]
 8011be8:	60b9      	str	r1, [r7, #8]
 8011bea:	607a      	str	r2, [r7, #4]
 8011bec:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8011bee:	683b      	ldr	r3, [r7, #0]
 8011bf0:	2b00      	cmp	r3, #0
 8011bf2:	d106      	bne.n	8011c02 <tcp_rst+0x22>
 8011bf4:	4b1f      	ldr	r3, [pc, #124]	; (8011c74 <tcp_rst+0x94>)
 8011bf6:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8011bfa:	491f      	ldr	r1, [pc, #124]	; (8011c78 <tcp_rst+0x98>)
 8011bfc:	481f      	ldr	r0, [pc, #124]	; (8011c7c <tcp_rst+0x9c>)
 8011bfe:	f003 fc3d 	bl	801547c <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8011c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c04:	2b00      	cmp	r3, #0
 8011c06:	d106      	bne.n	8011c16 <tcp_rst+0x36>
 8011c08:	4b1a      	ldr	r3, [pc, #104]	; (8011c74 <tcp_rst+0x94>)
 8011c0a:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8011c0e:	491c      	ldr	r1, [pc, #112]	; (8011c80 <tcp_rst+0xa0>)
 8011c10:	481a      	ldr	r0, [pc, #104]	; (8011c7c <tcp_rst+0x9c>)
 8011c12:	f003 fc33 	bl	801547c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011c16:	2300      	movs	r3, #0
 8011c18:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8011c1a:	f246 0308 	movw	r3, #24584	; 0x6008
 8011c1e:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8011c20:	7dfb      	ldrb	r3, [r7, #23]
 8011c22:	b29c      	uxth	r4, r3
 8011c24:	68b8      	ldr	r0, [r7, #8]
 8011c26:	f7f8 faea 	bl	800a1fe <lwip_htonl>
 8011c2a:	4602      	mov	r2, r0
 8011c2c:	8abb      	ldrh	r3, [r7, #20]
 8011c2e:	9303      	str	r3, [sp, #12]
 8011c30:	2314      	movs	r3, #20
 8011c32:	9302      	str	r3, [sp, #8]
 8011c34:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8011c36:	9301      	str	r3, [sp, #4]
 8011c38:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8011c3a:	9300      	str	r3, [sp, #0]
 8011c3c:	4613      	mov	r3, r2
 8011c3e:	2200      	movs	r2, #0
 8011c40:	4621      	mov	r1, r4
 8011c42:	6878      	ldr	r0, [r7, #4]
 8011c44:	f7ff fe92 	bl	801196c <tcp_output_alloc_header_common>
 8011c48:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8011c4a:	693b      	ldr	r3, [r7, #16]
 8011c4c:	2b00      	cmp	r3, #0
 8011c4e:	d00c      	beq.n	8011c6a <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011c50:	7dfb      	ldrb	r3, [r7, #23]
 8011c52:	2200      	movs	r2, #0
 8011c54:	6939      	ldr	r1, [r7, #16]
 8011c56:	68f8      	ldr	r0, [r7, #12]
 8011c58:	f7ff ff38 	bl	8011acc <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8011c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c5e:	683a      	ldr	r2, [r7, #0]
 8011c60:	6939      	ldr	r1, [r7, #16]
 8011c62:	68f8      	ldr	r0, [r7, #12]
 8011c64:	f7ff ff72 	bl	8011b4c <tcp_output_control_segment>
 8011c68:	e000      	b.n	8011c6c <tcp_rst+0x8c>
    return;
 8011c6a:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8011c6c:	371c      	adds	r7, #28
 8011c6e:	46bd      	mov	sp, r7
 8011c70:	bd90      	pop	{r4, r7, pc}
 8011c72:	bf00      	nop
 8011c74:	080185a0 	.word	0x080185a0
 8011c78:	08018d24 	.word	0x08018d24
 8011c7c:	080185f4 	.word	0x080185f4
 8011c80:	08018d40 	.word	0x08018d40

08011c84 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8011c84:	b590      	push	{r4, r7, lr}
 8011c86:	b087      	sub	sp, #28
 8011c88:	af00      	add	r7, sp, #0
 8011c8a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8011c8c:	2300      	movs	r3, #0
 8011c8e:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8011c90:	2300      	movs	r3, #0
 8011c92:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8011c94:	687b      	ldr	r3, [r7, #4]
 8011c96:	2b00      	cmp	r3, #0
 8011c98:	d106      	bne.n	8011ca8 <tcp_send_empty_ack+0x24>
 8011c9a:	4b28      	ldr	r3, [pc, #160]	; (8011d3c <tcp_send_empty_ack+0xb8>)
 8011c9c:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8011ca0:	4927      	ldr	r1, [pc, #156]	; (8011d40 <tcp_send_empty_ack+0xbc>)
 8011ca2:	4828      	ldr	r0, [pc, #160]	; (8011d44 <tcp_send_empty_ack+0xc0>)
 8011ca4:	f003 fbea 	bl	801547c <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011ca8:	7dfb      	ldrb	r3, [r7, #23]
 8011caa:	009b      	lsls	r3, r3, #2
 8011cac:	b2db      	uxtb	r3, r3
 8011cae:	f003 0304 	and.w	r3, r3, #4
 8011cb2:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8011cb4:	7d7b      	ldrb	r3, [r7, #21]
 8011cb6:	b29c      	uxth	r4, r3
 8011cb8:	687b      	ldr	r3, [r7, #4]
 8011cba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011cbc:	4618      	mov	r0, r3
 8011cbe:	f7f8 fa9e 	bl	800a1fe <lwip_htonl>
 8011cc2:	4603      	mov	r3, r0
 8011cc4:	2200      	movs	r2, #0
 8011cc6:	4621      	mov	r1, r4
 8011cc8:	6878      	ldr	r0, [r7, #4]
 8011cca:	f7ff fec1 	bl	8011a50 <tcp_output_alloc_header>
 8011cce:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011cd0:	693b      	ldr	r3, [r7, #16]
 8011cd2:	2b00      	cmp	r3, #0
 8011cd4:	d109      	bne.n	8011cea <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011cd6:	687b      	ldr	r3, [r7, #4]
 8011cd8:	8b5b      	ldrh	r3, [r3, #26]
 8011cda:	f043 0303 	orr.w	r3, r3, #3
 8011cde:	b29a      	uxth	r2, r3
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8011ce4:	f06f 0301 	mvn.w	r3, #1
 8011ce8:	e023      	b.n	8011d32 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8011cea:	7dbb      	ldrb	r3, [r7, #22]
 8011cec:	7dfa      	ldrb	r2, [r7, #23]
 8011cee:	6939      	ldr	r1, [r7, #16]
 8011cf0:	6878      	ldr	r0, [r7, #4]
 8011cf2:	f7ff feeb 	bl	8011acc <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011cf6:	687a      	ldr	r2, [r7, #4]
 8011cf8:	687b      	ldr	r3, [r7, #4]
 8011cfa:	3304      	adds	r3, #4
 8011cfc:	6939      	ldr	r1, [r7, #16]
 8011cfe:	6878      	ldr	r0, [r7, #4]
 8011d00:	f7ff ff24 	bl	8011b4c <tcp_output_control_segment>
 8011d04:	4603      	mov	r3, r0
 8011d06:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8011d08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011d0c:	2b00      	cmp	r3, #0
 8011d0e:	d007      	beq.n	8011d20 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011d10:	687b      	ldr	r3, [r7, #4]
 8011d12:	8b5b      	ldrh	r3, [r3, #26]
 8011d14:	f043 0303 	orr.w	r3, r3, #3
 8011d18:	b29a      	uxth	r2, r3
 8011d1a:	687b      	ldr	r3, [r7, #4]
 8011d1c:	835a      	strh	r2, [r3, #26]
 8011d1e:	e006      	b.n	8011d2e <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011d20:	687b      	ldr	r3, [r7, #4]
 8011d22:	8b5b      	ldrh	r3, [r3, #26]
 8011d24:	f023 0303 	bic.w	r3, r3, #3
 8011d28:	b29a      	uxth	r2, r3
 8011d2a:	687b      	ldr	r3, [r7, #4]
 8011d2c:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8011d2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011d32:	4618      	mov	r0, r3
 8011d34:	371c      	adds	r7, #28
 8011d36:	46bd      	mov	sp, r7
 8011d38:	bd90      	pop	{r4, r7, pc}
 8011d3a:	bf00      	nop
 8011d3c:	080185a0 	.word	0x080185a0
 8011d40:	08018d5c 	.word	0x08018d5c
 8011d44:	080185f4 	.word	0x080185f4

08011d48 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8011d48:	b590      	push	{r4, r7, lr}
 8011d4a:	b087      	sub	sp, #28
 8011d4c:	af00      	add	r7, sp, #0
 8011d4e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011d50:	2300      	movs	r3, #0
 8011d52:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8011d54:	687b      	ldr	r3, [r7, #4]
 8011d56:	2b00      	cmp	r3, #0
 8011d58:	d106      	bne.n	8011d68 <tcp_keepalive+0x20>
 8011d5a:	4b18      	ldr	r3, [pc, #96]	; (8011dbc <tcp_keepalive+0x74>)
 8011d5c:	f640 0224 	movw	r2, #2084	; 0x824
 8011d60:	4917      	ldr	r1, [pc, #92]	; (8011dc0 <tcp_keepalive+0x78>)
 8011d62:	4818      	ldr	r0, [pc, #96]	; (8011dc4 <tcp_keepalive+0x7c>)
 8011d64:	f003 fb8a 	bl	801547c <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8011d68:	7dfb      	ldrb	r3, [r7, #23]
 8011d6a:	b29c      	uxth	r4, r3
 8011d6c:	687b      	ldr	r3, [r7, #4]
 8011d6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011d70:	3b01      	subs	r3, #1
 8011d72:	4618      	mov	r0, r3
 8011d74:	f7f8 fa43 	bl	800a1fe <lwip_htonl>
 8011d78:	4603      	mov	r3, r0
 8011d7a:	2200      	movs	r2, #0
 8011d7c:	4621      	mov	r1, r4
 8011d7e:	6878      	ldr	r0, [r7, #4]
 8011d80:	f7ff fe66 	bl	8011a50 <tcp_output_alloc_header>
 8011d84:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011d86:	693b      	ldr	r3, [r7, #16]
 8011d88:	2b00      	cmp	r3, #0
 8011d8a:	d102      	bne.n	8011d92 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8011d8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011d90:	e010      	b.n	8011db4 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011d92:	7dfb      	ldrb	r3, [r7, #23]
 8011d94:	2200      	movs	r2, #0
 8011d96:	6939      	ldr	r1, [r7, #16]
 8011d98:	6878      	ldr	r0, [r7, #4]
 8011d9a:	f7ff fe97 	bl	8011acc <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011d9e:	687a      	ldr	r2, [r7, #4]
 8011da0:	687b      	ldr	r3, [r7, #4]
 8011da2:	3304      	adds	r3, #4
 8011da4:	6939      	ldr	r1, [r7, #16]
 8011da6:	6878      	ldr	r0, [r7, #4]
 8011da8:	f7ff fed0 	bl	8011b4c <tcp_output_control_segment>
 8011dac:	4603      	mov	r3, r0
 8011dae:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8011db0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011db4:	4618      	mov	r0, r3
 8011db6:	371c      	adds	r7, #28
 8011db8:	46bd      	mov	sp, r7
 8011dba:	bd90      	pop	{r4, r7, pc}
 8011dbc:	080185a0 	.word	0x080185a0
 8011dc0:	08018d7c 	.word	0x08018d7c
 8011dc4:	080185f4 	.word	0x080185f4

08011dc8 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8011dc8:	b590      	push	{r4, r7, lr}
 8011dca:	b08b      	sub	sp, #44	; 0x2c
 8011dcc:	af00      	add	r7, sp, #0
 8011dce:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011dd0:	2300      	movs	r3, #0
 8011dd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8011dd6:	687b      	ldr	r3, [r7, #4]
 8011dd8:	2b00      	cmp	r3, #0
 8011dda:	d106      	bne.n	8011dea <tcp_zero_window_probe+0x22>
 8011ddc:	4b4c      	ldr	r3, [pc, #304]	; (8011f10 <tcp_zero_window_probe+0x148>)
 8011dde:	f640 024f 	movw	r2, #2127	; 0x84f
 8011de2:	494c      	ldr	r1, [pc, #304]	; (8011f14 <tcp_zero_window_probe+0x14c>)
 8011de4:	484c      	ldr	r0, [pc, #304]	; (8011f18 <tcp_zero_window_probe+0x150>)
 8011de6:	f003 fb49 	bl	801547c <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8011dea:	687b      	ldr	r3, [r7, #4]
 8011dec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011dee:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8011df0:	6a3b      	ldr	r3, [r7, #32]
 8011df2:	2b00      	cmp	r3, #0
 8011df4:	d101      	bne.n	8011dfa <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8011df6:	2300      	movs	r3, #0
 8011df8:	e086      	b.n	8011f08 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8011dfa:	687b      	ldr	r3, [r7, #4]
 8011dfc:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8011e00:	2bff      	cmp	r3, #255	; 0xff
 8011e02:	d007      	beq.n	8011e14 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8011e04:	687b      	ldr	r3, [r7, #4]
 8011e06:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8011e0a:	3301      	adds	r3, #1
 8011e0c:	b2da      	uxtb	r2, r3
 8011e0e:	687b      	ldr	r3, [r7, #4]
 8011e10:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8011e14:	6a3b      	ldr	r3, [r7, #32]
 8011e16:	68db      	ldr	r3, [r3, #12]
 8011e18:	899b      	ldrh	r3, [r3, #12]
 8011e1a:	b29b      	uxth	r3, r3
 8011e1c:	4618      	mov	r0, r3
 8011e1e:	f7f8 f9d9 	bl	800a1d4 <lwip_htons>
 8011e22:	4603      	mov	r3, r0
 8011e24:	b2db      	uxtb	r3, r3
 8011e26:	f003 0301 	and.w	r3, r3, #1
 8011e2a:	2b00      	cmp	r3, #0
 8011e2c:	d005      	beq.n	8011e3a <tcp_zero_window_probe+0x72>
 8011e2e:	6a3b      	ldr	r3, [r7, #32]
 8011e30:	891b      	ldrh	r3, [r3, #8]
 8011e32:	2b00      	cmp	r3, #0
 8011e34:	d101      	bne.n	8011e3a <tcp_zero_window_probe+0x72>
 8011e36:	2301      	movs	r3, #1
 8011e38:	e000      	b.n	8011e3c <tcp_zero_window_probe+0x74>
 8011e3a:	2300      	movs	r3, #0
 8011e3c:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8011e3e:	7ffb      	ldrb	r3, [r7, #31]
 8011e40:	2b00      	cmp	r3, #0
 8011e42:	bf0c      	ite	eq
 8011e44:	2301      	moveq	r3, #1
 8011e46:	2300      	movne	r3, #0
 8011e48:	b2db      	uxtb	r3, r3
 8011e4a:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8011e4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011e50:	b299      	uxth	r1, r3
 8011e52:	6a3b      	ldr	r3, [r7, #32]
 8011e54:	68db      	ldr	r3, [r3, #12]
 8011e56:	685b      	ldr	r3, [r3, #4]
 8011e58:	8bba      	ldrh	r2, [r7, #28]
 8011e5a:	6878      	ldr	r0, [r7, #4]
 8011e5c:	f7ff fdf8 	bl	8011a50 <tcp_output_alloc_header>
 8011e60:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8011e62:	69bb      	ldr	r3, [r7, #24]
 8011e64:	2b00      	cmp	r3, #0
 8011e66:	d102      	bne.n	8011e6e <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8011e68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011e6c:	e04c      	b.n	8011f08 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8011e6e:	69bb      	ldr	r3, [r7, #24]
 8011e70:	685b      	ldr	r3, [r3, #4]
 8011e72:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8011e74:	7ffb      	ldrb	r3, [r7, #31]
 8011e76:	2b00      	cmp	r3, #0
 8011e78:	d011      	beq.n	8011e9e <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8011e7a:	697b      	ldr	r3, [r7, #20]
 8011e7c:	899b      	ldrh	r3, [r3, #12]
 8011e7e:	b29b      	uxth	r3, r3
 8011e80:	b21b      	sxth	r3, r3
 8011e82:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8011e86:	b21c      	sxth	r4, r3
 8011e88:	2011      	movs	r0, #17
 8011e8a:	f7f8 f9a3 	bl	800a1d4 <lwip_htons>
 8011e8e:	4603      	mov	r3, r0
 8011e90:	b21b      	sxth	r3, r3
 8011e92:	4323      	orrs	r3, r4
 8011e94:	b21b      	sxth	r3, r3
 8011e96:	b29a      	uxth	r2, r3
 8011e98:	697b      	ldr	r3, [r7, #20]
 8011e9a:	819a      	strh	r2, [r3, #12]
 8011e9c:	e010      	b.n	8011ec0 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8011e9e:	69bb      	ldr	r3, [r7, #24]
 8011ea0:	685b      	ldr	r3, [r3, #4]
 8011ea2:	3314      	adds	r3, #20
 8011ea4:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8011ea6:	6a3b      	ldr	r3, [r7, #32]
 8011ea8:	6858      	ldr	r0, [r3, #4]
 8011eaa:	6a3b      	ldr	r3, [r7, #32]
 8011eac:	685b      	ldr	r3, [r3, #4]
 8011eae:	891a      	ldrh	r2, [r3, #8]
 8011eb0:	6a3b      	ldr	r3, [r7, #32]
 8011eb2:	891b      	ldrh	r3, [r3, #8]
 8011eb4:	1ad3      	subs	r3, r2, r3
 8011eb6:	b29b      	uxth	r3, r3
 8011eb8:	2201      	movs	r2, #1
 8011eba:	6939      	ldr	r1, [r7, #16]
 8011ebc:	f7f9 ff2c 	bl	800bd18 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8011ec0:	6a3b      	ldr	r3, [r7, #32]
 8011ec2:	68db      	ldr	r3, [r3, #12]
 8011ec4:	685b      	ldr	r3, [r3, #4]
 8011ec6:	4618      	mov	r0, r3
 8011ec8:	f7f8 f999 	bl	800a1fe <lwip_htonl>
 8011ecc:	4603      	mov	r3, r0
 8011ece:	3301      	adds	r3, #1
 8011ed0:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8011ed2:	687b      	ldr	r3, [r7, #4]
 8011ed4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011ed6:	68fb      	ldr	r3, [r7, #12]
 8011ed8:	1ad3      	subs	r3, r2, r3
 8011eda:	2b00      	cmp	r3, #0
 8011edc:	da02      	bge.n	8011ee4 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8011ede:	687b      	ldr	r3, [r7, #4]
 8011ee0:	68fa      	ldr	r2, [r7, #12]
 8011ee2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011ee4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011ee8:	2200      	movs	r2, #0
 8011eea:	69b9      	ldr	r1, [r7, #24]
 8011eec:	6878      	ldr	r0, [r7, #4]
 8011eee:	f7ff fded 	bl	8011acc <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011ef2:	687a      	ldr	r2, [r7, #4]
 8011ef4:	687b      	ldr	r3, [r7, #4]
 8011ef6:	3304      	adds	r3, #4
 8011ef8:	69b9      	ldr	r1, [r7, #24]
 8011efa:	6878      	ldr	r0, [r7, #4]
 8011efc:	f7ff fe26 	bl	8011b4c <tcp_output_control_segment>
 8011f00:	4603      	mov	r3, r0
 8011f02:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8011f04:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8011f08:	4618      	mov	r0, r3
 8011f0a:	372c      	adds	r7, #44	; 0x2c
 8011f0c:	46bd      	mov	sp, r7
 8011f0e:	bd90      	pop	{r4, r7, pc}
 8011f10:	080185a0 	.word	0x080185a0
 8011f14:	08018d98 	.word	0x08018d98
 8011f18:	080185f4 	.word	0x080185f4

08011f1c <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8011f1c:	b580      	push	{r7, lr}
 8011f1e:	b082      	sub	sp, #8
 8011f20:	af00      	add	r7, sp, #0
 8011f22:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8011f24:	f7f9 ffe6 	bl	800bef4 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8011f28:	4b0a      	ldr	r3, [pc, #40]	; (8011f54 <tcpip_tcp_timer+0x38>)
 8011f2a:	681b      	ldr	r3, [r3, #0]
 8011f2c:	2b00      	cmp	r3, #0
 8011f2e:	d103      	bne.n	8011f38 <tcpip_tcp_timer+0x1c>
 8011f30:	4b09      	ldr	r3, [pc, #36]	; (8011f58 <tcpip_tcp_timer+0x3c>)
 8011f32:	681b      	ldr	r3, [r3, #0]
 8011f34:	2b00      	cmp	r3, #0
 8011f36:	d005      	beq.n	8011f44 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8011f38:	2200      	movs	r2, #0
 8011f3a:	4908      	ldr	r1, [pc, #32]	; (8011f5c <tcpip_tcp_timer+0x40>)
 8011f3c:	20fa      	movs	r0, #250	; 0xfa
 8011f3e:	f000 f8f3 	bl	8012128 <sys_timeout>
 8011f42:	e003      	b.n	8011f4c <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8011f44:	4b06      	ldr	r3, [pc, #24]	; (8011f60 <tcpip_tcp_timer+0x44>)
 8011f46:	2200      	movs	r2, #0
 8011f48:	601a      	str	r2, [r3, #0]
  }
}
 8011f4a:	bf00      	nop
 8011f4c:	bf00      	nop
 8011f4e:	3708      	adds	r7, #8
 8011f50:	46bd      	mov	sp, r7
 8011f52:	bd80      	pop	{r7, pc}
 8011f54:	2000bda4 	.word	0x2000bda4
 8011f58:	2000bdb4 	.word	0x2000bdb4
 8011f5c:	08011f1d 	.word	0x08011f1d
 8011f60:	20004b08 	.word	0x20004b08

08011f64 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8011f64:	b580      	push	{r7, lr}
 8011f66:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8011f68:	4b0a      	ldr	r3, [pc, #40]	; (8011f94 <tcp_timer_needed+0x30>)
 8011f6a:	681b      	ldr	r3, [r3, #0]
 8011f6c:	2b00      	cmp	r3, #0
 8011f6e:	d10f      	bne.n	8011f90 <tcp_timer_needed+0x2c>
 8011f70:	4b09      	ldr	r3, [pc, #36]	; (8011f98 <tcp_timer_needed+0x34>)
 8011f72:	681b      	ldr	r3, [r3, #0]
 8011f74:	2b00      	cmp	r3, #0
 8011f76:	d103      	bne.n	8011f80 <tcp_timer_needed+0x1c>
 8011f78:	4b08      	ldr	r3, [pc, #32]	; (8011f9c <tcp_timer_needed+0x38>)
 8011f7a:	681b      	ldr	r3, [r3, #0]
 8011f7c:	2b00      	cmp	r3, #0
 8011f7e:	d007      	beq.n	8011f90 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8011f80:	4b04      	ldr	r3, [pc, #16]	; (8011f94 <tcp_timer_needed+0x30>)
 8011f82:	2201      	movs	r2, #1
 8011f84:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8011f86:	2200      	movs	r2, #0
 8011f88:	4905      	ldr	r1, [pc, #20]	; (8011fa0 <tcp_timer_needed+0x3c>)
 8011f8a:	20fa      	movs	r0, #250	; 0xfa
 8011f8c:	f000 f8cc 	bl	8012128 <sys_timeout>
  }
}
 8011f90:	bf00      	nop
 8011f92:	bd80      	pop	{r7, pc}
 8011f94:	20004b08 	.word	0x20004b08
 8011f98:	2000bda4 	.word	0x2000bda4
 8011f9c:	2000bdb4 	.word	0x2000bdb4
 8011fa0:	08011f1d 	.word	0x08011f1d

08011fa4 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8011fa4:	b580      	push	{r7, lr}
 8011fa6:	b086      	sub	sp, #24
 8011fa8:	af00      	add	r7, sp, #0
 8011faa:	60f8      	str	r0, [r7, #12]
 8011fac:	60b9      	str	r1, [r7, #8]
 8011fae:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8011fb0:	200a      	movs	r0, #10
 8011fb2:	f7f8 fdc5 	bl	800ab40 <memp_malloc>
 8011fb6:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8011fb8:	693b      	ldr	r3, [r7, #16]
 8011fba:	2b00      	cmp	r3, #0
 8011fbc:	d109      	bne.n	8011fd2 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8011fbe:	693b      	ldr	r3, [r7, #16]
 8011fc0:	2b00      	cmp	r3, #0
 8011fc2:	d151      	bne.n	8012068 <sys_timeout_abs+0xc4>
 8011fc4:	4b2a      	ldr	r3, [pc, #168]	; (8012070 <sys_timeout_abs+0xcc>)
 8011fc6:	22be      	movs	r2, #190	; 0xbe
 8011fc8:	492a      	ldr	r1, [pc, #168]	; (8012074 <sys_timeout_abs+0xd0>)
 8011fca:	482b      	ldr	r0, [pc, #172]	; (8012078 <sys_timeout_abs+0xd4>)
 8011fcc:	f003 fa56 	bl	801547c <iprintf>
    return;
 8011fd0:	e04a      	b.n	8012068 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8011fd2:	693b      	ldr	r3, [r7, #16]
 8011fd4:	2200      	movs	r2, #0
 8011fd6:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8011fd8:	693b      	ldr	r3, [r7, #16]
 8011fda:	68ba      	ldr	r2, [r7, #8]
 8011fdc:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8011fde:	693b      	ldr	r3, [r7, #16]
 8011fe0:	687a      	ldr	r2, [r7, #4]
 8011fe2:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8011fe4:	693b      	ldr	r3, [r7, #16]
 8011fe6:	68fa      	ldr	r2, [r7, #12]
 8011fe8:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8011fea:	4b24      	ldr	r3, [pc, #144]	; (801207c <sys_timeout_abs+0xd8>)
 8011fec:	681b      	ldr	r3, [r3, #0]
 8011fee:	2b00      	cmp	r3, #0
 8011ff0:	d103      	bne.n	8011ffa <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8011ff2:	4a22      	ldr	r2, [pc, #136]	; (801207c <sys_timeout_abs+0xd8>)
 8011ff4:	693b      	ldr	r3, [r7, #16]
 8011ff6:	6013      	str	r3, [r2, #0]
    return;
 8011ff8:	e037      	b.n	801206a <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8011ffa:	693b      	ldr	r3, [r7, #16]
 8011ffc:	685a      	ldr	r2, [r3, #4]
 8011ffe:	4b1f      	ldr	r3, [pc, #124]	; (801207c <sys_timeout_abs+0xd8>)
 8012000:	681b      	ldr	r3, [r3, #0]
 8012002:	685b      	ldr	r3, [r3, #4]
 8012004:	1ad3      	subs	r3, r2, r3
 8012006:	0fdb      	lsrs	r3, r3, #31
 8012008:	f003 0301 	and.w	r3, r3, #1
 801200c:	b2db      	uxtb	r3, r3
 801200e:	2b00      	cmp	r3, #0
 8012010:	d007      	beq.n	8012022 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8012012:	4b1a      	ldr	r3, [pc, #104]	; (801207c <sys_timeout_abs+0xd8>)
 8012014:	681a      	ldr	r2, [r3, #0]
 8012016:	693b      	ldr	r3, [r7, #16]
 8012018:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801201a:	4a18      	ldr	r2, [pc, #96]	; (801207c <sys_timeout_abs+0xd8>)
 801201c:	693b      	ldr	r3, [r7, #16]
 801201e:	6013      	str	r3, [r2, #0]
 8012020:	e023      	b.n	801206a <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8012022:	4b16      	ldr	r3, [pc, #88]	; (801207c <sys_timeout_abs+0xd8>)
 8012024:	681b      	ldr	r3, [r3, #0]
 8012026:	617b      	str	r3, [r7, #20]
 8012028:	e01a      	b.n	8012060 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801202a:	697b      	ldr	r3, [r7, #20]
 801202c:	681b      	ldr	r3, [r3, #0]
 801202e:	2b00      	cmp	r3, #0
 8012030:	d00b      	beq.n	801204a <sys_timeout_abs+0xa6>
 8012032:	693b      	ldr	r3, [r7, #16]
 8012034:	685a      	ldr	r2, [r3, #4]
 8012036:	697b      	ldr	r3, [r7, #20]
 8012038:	681b      	ldr	r3, [r3, #0]
 801203a:	685b      	ldr	r3, [r3, #4]
 801203c:	1ad3      	subs	r3, r2, r3
 801203e:	0fdb      	lsrs	r3, r3, #31
 8012040:	f003 0301 	and.w	r3, r3, #1
 8012044:	b2db      	uxtb	r3, r3
 8012046:	2b00      	cmp	r3, #0
 8012048:	d007      	beq.n	801205a <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801204a:	697b      	ldr	r3, [r7, #20]
 801204c:	681a      	ldr	r2, [r3, #0]
 801204e:	693b      	ldr	r3, [r7, #16]
 8012050:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8012052:	697b      	ldr	r3, [r7, #20]
 8012054:	693a      	ldr	r2, [r7, #16]
 8012056:	601a      	str	r2, [r3, #0]
        break;
 8012058:	e007      	b.n	801206a <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801205a:	697b      	ldr	r3, [r7, #20]
 801205c:	681b      	ldr	r3, [r3, #0]
 801205e:	617b      	str	r3, [r7, #20]
 8012060:	697b      	ldr	r3, [r7, #20]
 8012062:	2b00      	cmp	r3, #0
 8012064:	d1e1      	bne.n	801202a <sys_timeout_abs+0x86>
 8012066:	e000      	b.n	801206a <sys_timeout_abs+0xc6>
    return;
 8012068:	bf00      	nop
      }
    }
  }
}
 801206a:	3718      	adds	r7, #24
 801206c:	46bd      	mov	sp, r7
 801206e:	bd80      	pop	{r7, pc}
 8012070:	08018dbc 	.word	0x08018dbc
 8012074:	08018df0 	.word	0x08018df0
 8012078:	08018e30 	.word	0x08018e30
 801207c:	20004b00 	.word	0x20004b00

08012080 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8012080:	b580      	push	{r7, lr}
 8012082:	b086      	sub	sp, #24
 8012084:	af00      	add	r7, sp, #0
 8012086:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8012088:	687b      	ldr	r3, [r7, #4]
 801208a:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801208c:	697b      	ldr	r3, [r7, #20]
 801208e:	685b      	ldr	r3, [r3, #4]
 8012090:	4798      	blx	r3

  now = sys_now();
 8012092:	f7f1 fe29 	bl	8003ce8 <sys_now>
 8012096:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8012098:	697b      	ldr	r3, [r7, #20]
 801209a:	681a      	ldr	r2, [r3, #0]
 801209c:	4b0f      	ldr	r3, [pc, #60]	; (80120dc <lwip_cyclic_timer+0x5c>)
 801209e:	681b      	ldr	r3, [r3, #0]
 80120a0:	4413      	add	r3, r2
 80120a2:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 80120a4:	68fa      	ldr	r2, [r7, #12]
 80120a6:	693b      	ldr	r3, [r7, #16]
 80120a8:	1ad3      	subs	r3, r2, r3
 80120aa:	0fdb      	lsrs	r3, r3, #31
 80120ac:	f003 0301 	and.w	r3, r3, #1
 80120b0:	b2db      	uxtb	r3, r3
 80120b2:	2b00      	cmp	r3, #0
 80120b4:	d009      	beq.n	80120ca <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 80120b6:	697b      	ldr	r3, [r7, #20]
 80120b8:	681a      	ldr	r2, [r3, #0]
 80120ba:	693b      	ldr	r3, [r7, #16]
 80120bc:	4413      	add	r3, r2
 80120be:	687a      	ldr	r2, [r7, #4]
 80120c0:	4907      	ldr	r1, [pc, #28]	; (80120e0 <lwip_cyclic_timer+0x60>)
 80120c2:	4618      	mov	r0, r3
 80120c4:	f7ff ff6e 	bl	8011fa4 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 80120c8:	e004      	b.n	80120d4 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 80120ca:	687a      	ldr	r2, [r7, #4]
 80120cc:	4904      	ldr	r1, [pc, #16]	; (80120e0 <lwip_cyclic_timer+0x60>)
 80120ce:	68f8      	ldr	r0, [r7, #12]
 80120d0:	f7ff ff68 	bl	8011fa4 <sys_timeout_abs>
}
 80120d4:	bf00      	nop
 80120d6:	3718      	adds	r7, #24
 80120d8:	46bd      	mov	sp, r7
 80120da:	bd80      	pop	{r7, pc}
 80120dc:	20004b04 	.word	0x20004b04
 80120e0:	08012081 	.word	0x08012081

080120e4 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 80120e4:	b580      	push	{r7, lr}
 80120e6:	b082      	sub	sp, #8
 80120e8:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80120ea:	2301      	movs	r3, #1
 80120ec:	607b      	str	r3, [r7, #4]
 80120ee:	e00e      	b.n	801210e <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 80120f0:	4a0b      	ldr	r2, [pc, #44]	; (8012120 <sys_timeouts_init+0x3c>)
 80120f2:	687b      	ldr	r3, [r7, #4]
 80120f4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80120f8:	687b      	ldr	r3, [r7, #4]
 80120fa:	00db      	lsls	r3, r3, #3
 80120fc:	4a08      	ldr	r2, [pc, #32]	; (8012120 <sys_timeouts_init+0x3c>)
 80120fe:	4413      	add	r3, r2
 8012100:	461a      	mov	r2, r3
 8012102:	4908      	ldr	r1, [pc, #32]	; (8012124 <sys_timeouts_init+0x40>)
 8012104:	f000 f810 	bl	8012128 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8012108:	687b      	ldr	r3, [r7, #4]
 801210a:	3301      	adds	r3, #1
 801210c:	607b      	str	r3, [r7, #4]
 801210e:	687b      	ldr	r3, [r7, #4]
 8012110:	2b02      	cmp	r3, #2
 8012112:	d9ed      	bls.n	80120f0 <sys_timeouts_init+0xc>
  }
}
 8012114:	bf00      	nop
 8012116:	bf00      	nop
 8012118:	3708      	adds	r7, #8
 801211a:	46bd      	mov	sp, r7
 801211c:	bd80      	pop	{r7, pc}
 801211e:	bf00      	nop
 8012120:	08019c28 	.word	0x08019c28
 8012124:	08012081 	.word	0x08012081

08012128 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8012128:	b580      	push	{r7, lr}
 801212a:	b086      	sub	sp, #24
 801212c:	af00      	add	r7, sp, #0
 801212e:	60f8      	str	r0, [r7, #12]
 8012130:	60b9      	str	r1, [r7, #8]
 8012132:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8012134:	68fb      	ldr	r3, [r7, #12]
 8012136:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801213a:	d306      	bcc.n	801214a <sys_timeout+0x22>
 801213c:	4b0a      	ldr	r3, [pc, #40]	; (8012168 <sys_timeout+0x40>)
 801213e:	f240 1229 	movw	r2, #297	; 0x129
 8012142:	490a      	ldr	r1, [pc, #40]	; (801216c <sys_timeout+0x44>)
 8012144:	480a      	ldr	r0, [pc, #40]	; (8012170 <sys_timeout+0x48>)
 8012146:	f003 f999 	bl	801547c <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801214a:	f7f1 fdcd 	bl	8003ce8 <sys_now>
 801214e:	4602      	mov	r2, r0
 8012150:	68fb      	ldr	r3, [r7, #12]
 8012152:	4413      	add	r3, r2
 8012154:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8012156:	687a      	ldr	r2, [r7, #4]
 8012158:	68b9      	ldr	r1, [r7, #8]
 801215a:	6978      	ldr	r0, [r7, #20]
 801215c:	f7ff ff22 	bl	8011fa4 <sys_timeout_abs>
#endif
}
 8012160:	bf00      	nop
 8012162:	3718      	adds	r7, #24
 8012164:	46bd      	mov	sp, r7
 8012166:	bd80      	pop	{r7, pc}
 8012168:	08018dbc 	.word	0x08018dbc
 801216c:	08018e58 	.word	0x08018e58
 8012170:	08018e30 	.word	0x08018e30

08012174 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8012174:	b580      	push	{r7, lr}
 8012176:	b084      	sub	sp, #16
 8012178:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801217a:	f7f1 fdb5 	bl	8003ce8 <sys_now>
 801217e:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8012180:	4b17      	ldr	r3, [pc, #92]	; (80121e0 <sys_check_timeouts+0x6c>)
 8012182:	681b      	ldr	r3, [r3, #0]
 8012184:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8012186:	68bb      	ldr	r3, [r7, #8]
 8012188:	2b00      	cmp	r3, #0
 801218a:	d022      	beq.n	80121d2 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801218c:	68bb      	ldr	r3, [r7, #8]
 801218e:	685b      	ldr	r3, [r3, #4]
 8012190:	68fa      	ldr	r2, [r7, #12]
 8012192:	1ad3      	subs	r3, r2, r3
 8012194:	0fdb      	lsrs	r3, r3, #31
 8012196:	f003 0301 	and.w	r3, r3, #1
 801219a:	b2db      	uxtb	r3, r3
 801219c:	2b00      	cmp	r3, #0
 801219e:	d11a      	bne.n	80121d6 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 80121a0:	68bb      	ldr	r3, [r7, #8]
 80121a2:	681b      	ldr	r3, [r3, #0]
 80121a4:	4a0e      	ldr	r2, [pc, #56]	; (80121e0 <sys_check_timeouts+0x6c>)
 80121a6:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 80121a8:	68bb      	ldr	r3, [r7, #8]
 80121aa:	689b      	ldr	r3, [r3, #8]
 80121ac:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 80121ae:	68bb      	ldr	r3, [r7, #8]
 80121b0:	68db      	ldr	r3, [r3, #12]
 80121b2:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 80121b4:	68bb      	ldr	r3, [r7, #8]
 80121b6:	685b      	ldr	r3, [r3, #4]
 80121b8:	4a0a      	ldr	r2, [pc, #40]	; (80121e4 <sys_check_timeouts+0x70>)
 80121ba:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 80121bc:	68b9      	ldr	r1, [r7, #8]
 80121be:	200a      	movs	r0, #10
 80121c0:	f7f8 fd10 	bl	800abe4 <memp_free>
    if (handler != NULL) {
 80121c4:	687b      	ldr	r3, [r7, #4]
 80121c6:	2b00      	cmp	r3, #0
 80121c8:	d0da      	beq.n	8012180 <sys_check_timeouts+0xc>
      handler(arg);
 80121ca:	687b      	ldr	r3, [r7, #4]
 80121cc:	6838      	ldr	r0, [r7, #0]
 80121ce:	4798      	blx	r3
  do {
 80121d0:	e7d6      	b.n	8012180 <sys_check_timeouts+0xc>
      return;
 80121d2:	bf00      	nop
 80121d4:	e000      	b.n	80121d8 <sys_check_timeouts+0x64>
      return;
 80121d6:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 80121d8:	3710      	adds	r7, #16
 80121da:	46bd      	mov	sp, r7
 80121dc:	bd80      	pop	{r7, pc}
 80121de:	bf00      	nop
 80121e0:	20004b00 	.word	0x20004b00
 80121e4:	20004b04 	.word	0x20004b04

080121e8 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 80121e8:	b580      	push	{r7, lr}
 80121ea:	b082      	sub	sp, #8
 80121ec:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 80121ee:	4b16      	ldr	r3, [pc, #88]	; (8012248 <sys_timeouts_sleeptime+0x60>)
 80121f0:	681b      	ldr	r3, [r3, #0]
 80121f2:	2b00      	cmp	r3, #0
 80121f4:	d102      	bne.n	80121fc <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 80121f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80121fa:	e020      	b.n	801223e <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 80121fc:	f7f1 fd74 	bl	8003ce8 <sys_now>
 8012200:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8012202:	4b11      	ldr	r3, [pc, #68]	; (8012248 <sys_timeouts_sleeptime+0x60>)
 8012204:	681b      	ldr	r3, [r3, #0]
 8012206:	685a      	ldr	r2, [r3, #4]
 8012208:	687b      	ldr	r3, [r7, #4]
 801220a:	1ad3      	subs	r3, r2, r3
 801220c:	0fdb      	lsrs	r3, r3, #31
 801220e:	f003 0301 	and.w	r3, r3, #1
 8012212:	b2db      	uxtb	r3, r3
 8012214:	2b00      	cmp	r3, #0
 8012216:	d001      	beq.n	801221c <sys_timeouts_sleeptime+0x34>
    return 0;
 8012218:	2300      	movs	r3, #0
 801221a:	e010      	b.n	801223e <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 801221c:	4b0a      	ldr	r3, [pc, #40]	; (8012248 <sys_timeouts_sleeptime+0x60>)
 801221e:	681b      	ldr	r3, [r3, #0]
 8012220:	685a      	ldr	r2, [r3, #4]
 8012222:	687b      	ldr	r3, [r7, #4]
 8012224:	1ad3      	subs	r3, r2, r3
 8012226:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8012228:	683b      	ldr	r3, [r7, #0]
 801222a:	2b00      	cmp	r3, #0
 801222c:	da06      	bge.n	801223c <sys_timeouts_sleeptime+0x54>
 801222e:	4b07      	ldr	r3, [pc, #28]	; (801224c <sys_timeouts_sleeptime+0x64>)
 8012230:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8012234:	4906      	ldr	r1, [pc, #24]	; (8012250 <sys_timeouts_sleeptime+0x68>)
 8012236:	4807      	ldr	r0, [pc, #28]	; (8012254 <sys_timeouts_sleeptime+0x6c>)
 8012238:	f003 f920 	bl	801547c <iprintf>
    return ret;
 801223c:	683b      	ldr	r3, [r7, #0]
  }
}
 801223e:	4618      	mov	r0, r3
 8012240:	3708      	adds	r7, #8
 8012242:	46bd      	mov	sp, r7
 8012244:	bd80      	pop	{r7, pc}
 8012246:	bf00      	nop
 8012248:	20004b00 	.word	0x20004b00
 801224c:	08018dbc 	.word	0x08018dbc
 8012250:	08018e90 	.word	0x08018e90
 8012254:	08018e30 	.word	0x08018e30

08012258 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8012258:	b580      	push	{r7, lr}
 801225a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801225c:	f003 f926 	bl	80154ac <rand>
 8012260:	4603      	mov	r3, r0
 8012262:	b29b      	uxth	r3, r3
 8012264:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8012268:	b29b      	uxth	r3, r3
 801226a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801226e:	b29a      	uxth	r2, r3
 8012270:	4b01      	ldr	r3, [pc, #4]	; (8012278 <udp_init+0x20>)
 8012272:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8012274:	bf00      	nop
 8012276:	bd80      	pop	{r7, pc}
 8012278:	20000018 	.word	0x20000018

0801227c <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 801227c:	b480      	push	{r7}
 801227e:	b083      	sub	sp, #12
 8012280:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8012282:	2300      	movs	r3, #0
 8012284:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8012286:	4b17      	ldr	r3, [pc, #92]	; (80122e4 <udp_new_port+0x68>)
 8012288:	881b      	ldrh	r3, [r3, #0]
 801228a:	1c5a      	adds	r2, r3, #1
 801228c:	b291      	uxth	r1, r2
 801228e:	4a15      	ldr	r2, [pc, #84]	; (80122e4 <udp_new_port+0x68>)
 8012290:	8011      	strh	r1, [r2, #0]
 8012292:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012296:	4293      	cmp	r3, r2
 8012298:	d103      	bne.n	80122a2 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801229a:	4b12      	ldr	r3, [pc, #72]	; (80122e4 <udp_new_port+0x68>)
 801229c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80122a0:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80122a2:	4b11      	ldr	r3, [pc, #68]	; (80122e8 <udp_new_port+0x6c>)
 80122a4:	681b      	ldr	r3, [r3, #0]
 80122a6:	603b      	str	r3, [r7, #0]
 80122a8:	e011      	b.n	80122ce <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 80122aa:	683b      	ldr	r3, [r7, #0]
 80122ac:	8a5a      	ldrh	r2, [r3, #18]
 80122ae:	4b0d      	ldr	r3, [pc, #52]	; (80122e4 <udp_new_port+0x68>)
 80122b0:	881b      	ldrh	r3, [r3, #0]
 80122b2:	429a      	cmp	r2, r3
 80122b4:	d108      	bne.n	80122c8 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 80122b6:	88fb      	ldrh	r3, [r7, #6]
 80122b8:	3301      	adds	r3, #1
 80122ba:	80fb      	strh	r3, [r7, #6]
 80122bc:	88fb      	ldrh	r3, [r7, #6]
 80122be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80122c2:	d3e0      	bcc.n	8012286 <udp_new_port+0xa>
        return 0;
 80122c4:	2300      	movs	r3, #0
 80122c6:	e007      	b.n	80122d8 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80122c8:	683b      	ldr	r3, [r7, #0]
 80122ca:	68db      	ldr	r3, [r3, #12]
 80122cc:	603b      	str	r3, [r7, #0]
 80122ce:	683b      	ldr	r3, [r7, #0]
 80122d0:	2b00      	cmp	r3, #0
 80122d2:	d1ea      	bne.n	80122aa <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 80122d4:	4b03      	ldr	r3, [pc, #12]	; (80122e4 <udp_new_port+0x68>)
 80122d6:	881b      	ldrh	r3, [r3, #0]
}
 80122d8:	4618      	mov	r0, r3
 80122da:	370c      	adds	r7, #12
 80122dc:	46bd      	mov	sp, r7
 80122de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122e2:	4770      	bx	lr
 80122e4:	20000018 	.word	0x20000018
 80122e8:	2000bdbc 	.word	0x2000bdbc

080122ec <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 80122ec:	b580      	push	{r7, lr}
 80122ee:	b084      	sub	sp, #16
 80122f0:	af00      	add	r7, sp, #0
 80122f2:	60f8      	str	r0, [r7, #12]
 80122f4:	60b9      	str	r1, [r7, #8]
 80122f6:	4613      	mov	r3, r2
 80122f8:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 80122fa:	68fb      	ldr	r3, [r7, #12]
 80122fc:	2b00      	cmp	r3, #0
 80122fe:	d105      	bne.n	801230c <udp_input_local_match+0x20>
 8012300:	4b27      	ldr	r3, [pc, #156]	; (80123a0 <udp_input_local_match+0xb4>)
 8012302:	2287      	movs	r2, #135	; 0x87
 8012304:	4927      	ldr	r1, [pc, #156]	; (80123a4 <udp_input_local_match+0xb8>)
 8012306:	4828      	ldr	r0, [pc, #160]	; (80123a8 <udp_input_local_match+0xbc>)
 8012308:	f003 f8b8 	bl	801547c <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801230c:	68bb      	ldr	r3, [r7, #8]
 801230e:	2b00      	cmp	r3, #0
 8012310:	d105      	bne.n	801231e <udp_input_local_match+0x32>
 8012312:	4b23      	ldr	r3, [pc, #140]	; (80123a0 <udp_input_local_match+0xb4>)
 8012314:	2288      	movs	r2, #136	; 0x88
 8012316:	4925      	ldr	r1, [pc, #148]	; (80123ac <udp_input_local_match+0xc0>)
 8012318:	4823      	ldr	r0, [pc, #140]	; (80123a8 <udp_input_local_match+0xbc>)
 801231a:	f003 f8af 	bl	801547c <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801231e:	68fb      	ldr	r3, [r7, #12]
 8012320:	7a1b      	ldrb	r3, [r3, #8]
 8012322:	2b00      	cmp	r3, #0
 8012324:	d00b      	beq.n	801233e <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8012326:	68fb      	ldr	r3, [r7, #12]
 8012328:	7a1a      	ldrb	r2, [r3, #8]
 801232a:	4b21      	ldr	r3, [pc, #132]	; (80123b0 <udp_input_local_match+0xc4>)
 801232c:	685b      	ldr	r3, [r3, #4]
 801232e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012332:	3301      	adds	r3, #1
 8012334:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012336:	429a      	cmp	r2, r3
 8012338:	d001      	beq.n	801233e <udp_input_local_match+0x52>
    return 0;
 801233a:	2300      	movs	r3, #0
 801233c:	e02b      	b.n	8012396 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801233e:	79fb      	ldrb	r3, [r7, #7]
 8012340:	2b00      	cmp	r3, #0
 8012342:	d018      	beq.n	8012376 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012344:	68fb      	ldr	r3, [r7, #12]
 8012346:	2b00      	cmp	r3, #0
 8012348:	d013      	beq.n	8012372 <udp_input_local_match+0x86>
 801234a:	68fb      	ldr	r3, [r7, #12]
 801234c:	681b      	ldr	r3, [r3, #0]
 801234e:	2b00      	cmp	r3, #0
 8012350:	d00f      	beq.n	8012372 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8012352:	4b17      	ldr	r3, [pc, #92]	; (80123b0 <udp_input_local_match+0xc4>)
 8012354:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012356:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801235a:	d00a      	beq.n	8012372 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801235c:	68fb      	ldr	r3, [r7, #12]
 801235e:	681a      	ldr	r2, [r3, #0]
 8012360:	4b13      	ldr	r3, [pc, #76]	; (80123b0 <udp_input_local_match+0xc4>)
 8012362:	695b      	ldr	r3, [r3, #20]
 8012364:	405a      	eors	r2, r3
 8012366:	68bb      	ldr	r3, [r7, #8]
 8012368:	3308      	adds	r3, #8
 801236a:	681b      	ldr	r3, [r3, #0]
 801236c:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801236e:	2b00      	cmp	r3, #0
 8012370:	d110      	bne.n	8012394 <udp_input_local_match+0xa8>
          return 1;
 8012372:	2301      	movs	r3, #1
 8012374:	e00f      	b.n	8012396 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8012376:	68fb      	ldr	r3, [r7, #12]
 8012378:	2b00      	cmp	r3, #0
 801237a:	d009      	beq.n	8012390 <udp_input_local_match+0xa4>
 801237c:	68fb      	ldr	r3, [r7, #12]
 801237e:	681b      	ldr	r3, [r3, #0]
 8012380:	2b00      	cmp	r3, #0
 8012382:	d005      	beq.n	8012390 <udp_input_local_match+0xa4>
 8012384:	68fb      	ldr	r3, [r7, #12]
 8012386:	681a      	ldr	r2, [r3, #0]
 8012388:	4b09      	ldr	r3, [pc, #36]	; (80123b0 <udp_input_local_match+0xc4>)
 801238a:	695b      	ldr	r3, [r3, #20]
 801238c:	429a      	cmp	r2, r3
 801238e:	d101      	bne.n	8012394 <udp_input_local_match+0xa8>
        return 1;
 8012390:	2301      	movs	r3, #1
 8012392:	e000      	b.n	8012396 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8012394:	2300      	movs	r3, #0
}
 8012396:	4618      	mov	r0, r3
 8012398:	3710      	adds	r7, #16
 801239a:	46bd      	mov	sp, r7
 801239c:	bd80      	pop	{r7, pc}
 801239e:	bf00      	nop
 80123a0:	08018ea4 	.word	0x08018ea4
 80123a4:	08018ed4 	.word	0x08018ed4
 80123a8:	08018ef8 	.word	0x08018ef8
 80123ac:	08018f20 	.word	0x08018f20
 80123b0:	20008690 	.word	0x20008690

080123b4 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80123b4:	b590      	push	{r4, r7, lr}
 80123b6:	b08d      	sub	sp, #52	; 0x34
 80123b8:	af02      	add	r7, sp, #8
 80123ba:	6078      	str	r0, [r7, #4]
 80123bc:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 80123be:	2300      	movs	r3, #0
 80123c0:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 80123c2:	687b      	ldr	r3, [r7, #4]
 80123c4:	2b00      	cmp	r3, #0
 80123c6:	d105      	bne.n	80123d4 <udp_input+0x20>
 80123c8:	4b7c      	ldr	r3, [pc, #496]	; (80125bc <udp_input+0x208>)
 80123ca:	22cf      	movs	r2, #207	; 0xcf
 80123cc:	497c      	ldr	r1, [pc, #496]	; (80125c0 <udp_input+0x20c>)
 80123ce:	487d      	ldr	r0, [pc, #500]	; (80125c4 <udp_input+0x210>)
 80123d0:	f003 f854 	bl	801547c <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 80123d4:	683b      	ldr	r3, [r7, #0]
 80123d6:	2b00      	cmp	r3, #0
 80123d8:	d105      	bne.n	80123e6 <udp_input+0x32>
 80123da:	4b78      	ldr	r3, [pc, #480]	; (80125bc <udp_input+0x208>)
 80123dc:	22d0      	movs	r2, #208	; 0xd0
 80123de:	497a      	ldr	r1, [pc, #488]	; (80125c8 <udp_input+0x214>)
 80123e0:	4878      	ldr	r0, [pc, #480]	; (80125c4 <udp_input+0x210>)
 80123e2:	f003 f84b 	bl	801547c <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80123e6:	687b      	ldr	r3, [r7, #4]
 80123e8:	895b      	ldrh	r3, [r3, #10]
 80123ea:	2b07      	cmp	r3, #7
 80123ec:	d803      	bhi.n	80123f6 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 80123ee:	6878      	ldr	r0, [r7, #4]
 80123f0:	f7f9 fa9c 	bl	800b92c <pbuf_free>
    goto end;
 80123f4:	e0de      	b.n	80125b4 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 80123f6:	687b      	ldr	r3, [r7, #4]
 80123f8:	685b      	ldr	r3, [r3, #4]
 80123fa:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80123fc:	4b73      	ldr	r3, [pc, #460]	; (80125cc <udp_input+0x218>)
 80123fe:	695b      	ldr	r3, [r3, #20]
 8012400:	4a72      	ldr	r2, [pc, #456]	; (80125cc <udp_input+0x218>)
 8012402:	6812      	ldr	r2, [r2, #0]
 8012404:	4611      	mov	r1, r2
 8012406:	4618      	mov	r0, r3
 8012408:	f001 fd96 	bl	8013f38 <ip4_addr_isbroadcast_u32>
 801240c:	4603      	mov	r3, r0
 801240e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8012410:	697b      	ldr	r3, [r7, #20]
 8012412:	881b      	ldrh	r3, [r3, #0]
 8012414:	b29b      	uxth	r3, r3
 8012416:	4618      	mov	r0, r3
 8012418:	f7f7 fedc 	bl	800a1d4 <lwip_htons>
 801241c:	4603      	mov	r3, r0
 801241e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8012420:	697b      	ldr	r3, [r7, #20]
 8012422:	885b      	ldrh	r3, [r3, #2]
 8012424:	b29b      	uxth	r3, r3
 8012426:	4618      	mov	r0, r3
 8012428:	f7f7 fed4 	bl	800a1d4 <lwip_htons>
 801242c:	4603      	mov	r3, r0
 801242e:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8012430:	2300      	movs	r3, #0
 8012432:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8012434:	2300      	movs	r3, #0
 8012436:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8012438:	2300      	movs	r3, #0
 801243a:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801243c:	4b64      	ldr	r3, [pc, #400]	; (80125d0 <udp_input+0x21c>)
 801243e:	681b      	ldr	r3, [r3, #0]
 8012440:	627b      	str	r3, [r7, #36]	; 0x24
 8012442:	e054      	b.n	80124ee <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8012444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012446:	8a5b      	ldrh	r3, [r3, #18]
 8012448:	89fa      	ldrh	r2, [r7, #14]
 801244a:	429a      	cmp	r2, r3
 801244c:	d14a      	bne.n	80124e4 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801244e:	7cfb      	ldrb	r3, [r7, #19]
 8012450:	461a      	mov	r2, r3
 8012452:	6839      	ldr	r1, [r7, #0]
 8012454:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012456:	f7ff ff49 	bl	80122ec <udp_input_local_match>
 801245a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801245c:	2b00      	cmp	r3, #0
 801245e:	d041      	beq.n	80124e4 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8012460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012462:	7c1b      	ldrb	r3, [r3, #16]
 8012464:	f003 0304 	and.w	r3, r3, #4
 8012468:	2b00      	cmp	r3, #0
 801246a:	d11d      	bne.n	80124a8 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 801246c:	69fb      	ldr	r3, [r7, #28]
 801246e:	2b00      	cmp	r3, #0
 8012470:	d102      	bne.n	8012478 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8012472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012474:	61fb      	str	r3, [r7, #28]
 8012476:	e017      	b.n	80124a8 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8012478:	7cfb      	ldrb	r3, [r7, #19]
 801247a:	2b00      	cmp	r3, #0
 801247c:	d014      	beq.n	80124a8 <udp_input+0xf4>
 801247e:	4b53      	ldr	r3, [pc, #332]	; (80125cc <udp_input+0x218>)
 8012480:	695b      	ldr	r3, [r3, #20]
 8012482:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012486:	d10f      	bne.n	80124a8 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8012488:	69fb      	ldr	r3, [r7, #28]
 801248a:	681a      	ldr	r2, [r3, #0]
 801248c:	683b      	ldr	r3, [r7, #0]
 801248e:	3304      	adds	r3, #4
 8012490:	681b      	ldr	r3, [r3, #0]
 8012492:	429a      	cmp	r2, r3
 8012494:	d008      	beq.n	80124a8 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8012496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012498:	681a      	ldr	r2, [r3, #0]
 801249a:	683b      	ldr	r3, [r7, #0]
 801249c:	3304      	adds	r3, #4
 801249e:	681b      	ldr	r3, [r3, #0]
 80124a0:	429a      	cmp	r2, r3
 80124a2:	d101      	bne.n	80124a8 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 80124a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124a6:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80124a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124aa:	8a9b      	ldrh	r3, [r3, #20]
 80124ac:	8a3a      	ldrh	r2, [r7, #16]
 80124ae:	429a      	cmp	r2, r3
 80124b0:	d118      	bne.n	80124e4 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80124b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124b4:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80124b6:	2b00      	cmp	r3, #0
 80124b8:	d005      	beq.n	80124c6 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80124ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124bc:	685a      	ldr	r2, [r3, #4]
 80124be:	4b43      	ldr	r3, [pc, #268]	; (80125cc <udp_input+0x218>)
 80124c0:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 80124c2:	429a      	cmp	r2, r3
 80124c4:	d10e      	bne.n	80124e4 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 80124c6:	6a3b      	ldr	r3, [r7, #32]
 80124c8:	2b00      	cmp	r3, #0
 80124ca:	d014      	beq.n	80124f6 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80124cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124ce:	68da      	ldr	r2, [r3, #12]
 80124d0:	6a3b      	ldr	r3, [r7, #32]
 80124d2:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 80124d4:	4b3e      	ldr	r3, [pc, #248]	; (80125d0 <udp_input+0x21c>)
 80124d6:	681a      	ldr	r2, [r3, #0]
 80124d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124da:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 80124dc:	4a3c      	ldr	r2, [pc, #240]	; (80125d0 <udp_input+0x21c>)
 80124de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124e0:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 80124e2:	e008      	b.n	80124f6 <udp_input+0x142>
      }
    }

    prev = pcb;
 80124e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124e6:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80124e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124ea:	68db      	ldr	r3, [r3, #12]
 80124ec:	627b      	str	r3, [r7, #36]	; 0x24
 80124ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124f0:	2b00      	cmp	r3, #0
 80124f2:	d1a7      	bne.n	8012444 <udp_input+0x90>
 80124f4:	e000      	b.n	80124f8 <udp_input+0x144>
        break;
 80124f6:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 80124f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124fa:	2b00      	cmp	r3, #0
 80124fc:	d101      	bne.n	8012502 <udp_input+0x14e>
    pcb = uncon_pcb;
 80124fe:	69fb      	ldr	r3, [r7, #28]
 8012500:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8012502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012504:	2b00      	cmp	r3, #0
 8012506:	d002      	beq.n	801250e <udp_input+0x15a>
    for_us = 1;
 8012508:	2301      	movs	r3, #1
 801250a:	76fb      	strb	r3, [r7, #27]
 801250c:	e00a      	b.n	8012524 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801250e:	683b      	ldr	r3, [r7, #0]
 8012510:	3304      	adds	r3, #4
 8012512:	681a      	ldr	r2, [r3, #0]
 8012514:	4b2d      	ldr	r3, [pc, #180]	; (80125cc <udp_input+0x218>)
 8012516:	695b      	ldr	r3, [r3, #20]
 8012518:	429a      	cmp	r2, r3
 801251a:	bf0c      	ite	eq
 801251c:	2301      	moveq	r3, #1
 801251e:	2300      	movne	r3, #0
 8012520:	b2db      	uxtb	r3, r3
 8012522:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8012524:	7efb      	ldrb	r3, [r7, #27]
 8012526:	2b00      	cmp	r3, #0
 8012528:	d041      	beq.n	80125ae <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801252a:	2108      	movs	r1, #8
 801252c:	6878      	ldr	r0, [r7, #4]
 801252e:	f7f9 f977 	bl	800b820 <pbuf_remove_header>
 8012532:	4603      	mov	r3, r0
 8012534:	2b00      	cmp	r3, #0
 8012536:	d00a      	beq.n	801254e <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8012538:	4b20      	ldr	r3, [pc, #128]	; (80125bc <udp_input+0x208>)
 801253a:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801253e:	4925      	ldr	r1, [pc, #148]	; (80125d4 <udp_input+0x220>)
 8012540:	4820      	ldr	r0, [pc, #128]	; (80125c4 <udp_input+0x210>)
 8012542:	f002 ff9b 	bl	801547c <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8012546:	6878      	ldr	r0, [r7, #4]
 8012548:	f7f9 f9f0 	bl	800b92c <pbuf_free>
      goto end;
 801254c:	e032      	b.n	80125b4 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801254e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012550:	2b00      	cmp	r3, #0
 8012552:	d012      	beq.n	801257a <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8012554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012556:	699b      	ldr	r3, [r3, #24]
 8012558:	2b00      	cmp	r3, #0
 801255a:	d00a      	beq.n	8012572 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801255c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801255e:	699c      	ldr	r4, [r3, #24]
 8012560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012562:	69d8      	ldr	r0, [r3, #28]
 8012564:	8a3b      	ldrh	r3, [r7, #16]
 8012566:	9300      	str	r3, [sp, #0]
 8012568:	4b1b      	ldr	r3, [pc, #108]	; (80125d8 <udp_input+0x224>)
 801256a:	687a      	ldr	r2, [r7, #4]
 801256c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801256e:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8012570:	e021      	b.n	80125b6 <udp_input+0x202>
        pbuf_free(p);
 8012572:	6878      	ldr	r0, [r7, #4]
 8012574:	f7f9 f9da 	bl	800b92c <pbuf_free>
        goto end;
 8012578:	e01c      	b.n	80125b4 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801257a:	7cfb      	ldrb	r3, [r7, #19]
 801257c:	2b00      	cmp	r3, #0
 801257e:	d112      	bne.n	80125a6 <udp_input+0x1f2>
 8012580:	4b12      	ldr	r3, [pc, #72]	; (80125cc <udp_input+0x218>)
 8012582:	695b      	ldr	r3, [r3, #20]
 8012584:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012588:	2be0      	cmp	r3, #224	; 0xe0
 801258a:	d00c      	beq.n	80125a6 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801258c:	4b0f      	ldr	r3, [pc, #60]	; (80125cc <udp_input+0x218>)
 801258e:	899b      	ldrh	r3, [r3, #12]
 8012590:	3308      	adds	r3, #8
 8012592:	b29b      	uxth	r3, r3
 8012594:	b21b      	sxth	r3, r3
 8012596:	4619      	mov	r1, r3
 8012598:	6878      	ldr	r0, [r7, #4]
 801259a:	f7f9 f9b4 	bl	800b906 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801259e:	2103      	movs	r1, #3
 80125a0:	6878      	ldr	r0, [r7, #4]
 80125a2:	f001 f9a9 	bl	80138f8 <icmp_dest_unreach>
      pbuf_free(p);
 80125a6:	6878      	ldr	r0, [r7, #4]
 80125a8:	f7f9 f9c0 	bl	800b92c <pbuf_free>
  return;
 80125ac:	e003      	b.n	80125b6 <udp_input+0x202>
    pbuf_free(p);
 80125ae:	6878      	ldr	r0, [r7, #4]
 80125b0:	f7f9 f9bc 	bl	800b92c <pbuf_free>
  return;
 80125b4:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80125b6:	372c      	adds	r7, #44	; 0x2c
 80125b8:	46bd      	mov	sp, r7
 80125ba:	bd90      	pop	{r4, r7, pc}
 80125bc:	08018ea4 	.word	0x08018ea4
 80125c0:	08018f48 	.word	0x08018f48
 80125c4:	08018ef8 	.word	0x08018ef8
 80125c8:	08018f60 	.word	0x08018f60
 80125cc:	20008690 	.word	0x20008690
 80125d0:	2000bdbc 	.word	0x2000bdbc
 80125d4:	08018f7c 	.word	0x08018f7c
 80125d8:	200086a0 	.word	0x200086a0

080125dc <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80125dc:	b580      	push	{r7, lr}
 80125de:	b086      	sub	sp, #24
 80125e0:	af00      	add	r7, sp, #0
 80125e2:	60f8      	str	r0, [r7, #12]
 80125e4:	60b9      	str	r1, [r7, #8]
 80125e6:	4613      	mov	r3, r2
 80125e8:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80125ea:	68bb      	ldr	r3, [r7, #8]
 80125ec:	2b00      	cmp	r3, #0
 80125ee:	d101      	bne.n	80125f4 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 80125f0:	4b39      	ldr	r3, [pc, #228]	; (80126d8 <udp_bind+0xfc>)
 80125f2:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80125f4:	68fb      	ldr	r3, [r7, #12]
 80125f6:	2b00      	cmp	r3, #0
 80125f8:	d109      	bne.n	801260e <udp_bind+0x32>
 80125fa:	4b38      	ldr	r3, [pc, #224]	; (80126dc <udp_bind+0x100>)
 80125fc:	f240 32b7 	movw	r2, #951	; 0x3b7
 8012600:	4937      	ldr	r1, [pc, #220]	; (80126e0 <udp_bind+0x104>)
 8012602:	4838      	ldr	r0, [pc, #224]	; (80126e4 <udp_bind+0x108>)
 8012604:	f002 ff3a 	bl	801547c <iprintf>
 8012608:	f06f 030f 	mvn.w	r3, #15
 801260c:	e060      	b.n	80126d0 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 801260e:	2300      	movs	r3, #0
 8012610:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012612:	4b35      	ldr	r3, [pc, #212]	; (80126e8 <udp_bind+0x10c>)
 8012614:	681b      	ldr	r3, [r3, #0]
 8012616:	617b      	str	r3, [r7, #20]
 8012618:	e009      	b.n	801262e <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801261a:	68fa      	ldr	r2, [r7, #12]
 801261c:	697b      	ldr	r3, [r7, #20]
 801261e:	429a      	cmp	r2, r3
 8012620:	d102      	bne.n	8012628 <udp_bind+0x4c>
      rebind = 1;
 8012622:	2301      	movs	r3, #1
 8012624:	74fb      	strb	r3, [r7, #19]
      break;
 8012626:	e005      	b.n	8012634 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012628:	697b      	ldr	r3, [r7, #20]
 801262a:	68db      	ldr	r3, [r3, #12]
 801262c:	617b      	str	r3, [r7, #20]
 801262e:	697b      	ldr	r3, [r7, #20]
 8012630:	2b00      	cmp	r3, #0
 8012632:	d1f2      	bne.n	801261a <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8012634:	88fb      	ldrh	r3, [r7, #6]
 8012636:	2b00      	cmp	r3, #0
 8012638:	d109      	bne.n	801264e <udp_bind+0x72>
    port = udp_new_port();
 801263a:	f7ff fe1f 	bl	801227c <udp_new_port>
 801263e:	4603      	mov	r3, r0
 8012640:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8012642:	88fb      	ldrh	r3, [r7, #6]
 8012644:	2b00      	cmp	r3, #0
 8012646:	d12c      	bne.n	80126a2 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8012648:	f06f 0307 	mvn.w	r3, #7
 801264c:	e040      	b.n	80126d0 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801264e:	4b26      	ldr	r3, [pc, #152]	; (80126e8 <udp_bind+0x10c>)
 8012650:	681b      	ldr	r3, [r3, #0]
 8012652:	617b      	str	r3, [r7, #20]
 8012654:	e022      	b.n	801269c <udp_bind+0xc0>
      if (pcb != ipcb) {
 8012656:	68fa      	ldr	r2, [r7, #12]
 8012658:	697b      	ldr	r3, [r7, #20]
 801265a:	429a      	cmp	r2, r3
 801265c:	d01b      	beq.n	8012696 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801265e:	697b      	ldr	r3, [r7, #20]
 8012660:	8a5b      	ldrh	r3, [r3, #18]
 8012662:	88fa      	ldrh	r2, [r7, #6]
 8012664:	429a      	cmp	r2, r3
 8012666:	d116      	bne.n	8012696 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8012668:	697b      	ldr	r3, [r7, #20]
 801266a:	681a      	ldr	r2, [r3, #0]
 801266c:	68bb      	ldr	r3, [r7, #8]
 801266e:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8012670:	429a      	cmp	r2, r3
 8012672:	d00d      	beq.n	8012690 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8012674:	68bb      	ldr	r3, [r7, #8]
 8012676:	2b00      	cmp	r3, #0
 8012678:	d00a      	beq.n	8012690 <udp_bind+0xb4>
 801267a:	68bb      	ldr	r3, [r7, #8]
 801267c:	681b      	ldr	r3, [r3, #0]
 801267e:	2b00      	cmp	r3, #0
 8012680:	d006      	beq.n	8012690 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8012682:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8012684:	2b00      	cmp	r3, #0
 8012686:	d003      	beq.n	8012690 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8012688:	697b      	ldr	r3, [r7, #20]
 801268a:	681b      	ldr	r3, [r3, #0]
 801268c:	2b00      	cmp	r3, #0
 801268e:	d102      	bne.n	8012696 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8012690:	f06f 0307 	mvn.w	r3, #7
 8012694:	e01c      	b.n	80126d0 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012696:	697b      	ldr	r3, [r7, #20]
 8012698:	68db      	ldr	r3, [r3, #12]
 801269a:	617b      	str	r3, [r7, #20]
 801269c:	697b      	ldr	r3, [r7, #20]
 801269e:	2b00      	cmp	r3, #0
 80126a0:	d1d9      	bne.n	8012656 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 80126a2:	68bb      	ldr	r3, [r7, #8]
 80126a4:	2b00      	cmp	r3, #0
 80126a6:	d002      	beq.n	80126ae <udp_bind+0xd2>
 80126a8:	68bb      	ldr	r3, [r7, #8]
 80126aa:	681b      	ldr	r3, [r3, #0]
 80126ac:	e000      	b.n	80126b0 <udp_bind+0xd4>
 80126ae:	2300      	movs	r3, #0
 80126b0:	68fa      	ldr	r2, [r7, #12]
 80126b2:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 80126b4:	68fb      	ldr	r3, [r7, #12]
 80126b6:	88fa      	ldrh	r2, [r7, #6]
 80126b8:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 80126ba:	7cfb      	ldrb	r3, [r7, #19]
 80126bc:	2b00      	cmp	r3, #0
 80126be:	d106      	bne.n	80126ce <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 80126c0:	4b09      	ldr	r3, [pc, #36]	; (80126e8 <udp_bind+0x10c>)
 80126c2:	681a      	ldr	r2, [r3, #0]
 80126c4:	68fb      	ldr	r3, [r7, #12]
 80126c6:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 80126c8:	4a07      	ldr	r2, [pc, #28]	; (80126e8 <udp_bind+0x10c>)
 80126ca:	68fb      	ldr	r3, [r7, #12]
 80126cc:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 80126ce:	2300      	movs	r3, #0
}
 80126d0:	4618      	mov	r0, r3
 80126d2:	3718      	adds	r7, #24
 80126d4:	46bd      	mov	sp, r7
 80126d6:	bd80      	pop	{r7, pc}
 80126d8:	08019c40 	.word	0x08019c40
 80126dc:	08018ea4 	.word	0x08018ea4
 80126e0:	0801916c 	.word	0x0801916c
 80126e4:	08018ef8 	.word	0x08018ef8
 80126e8:	2000bdbc 	.word	0x2000bdbc

080126ec <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 80126ec:	b580      	push	{r7, lr}
 80126ee:	b084      	sub	sp, #16
 80126f0:	af00      	add	r7, sp, #0
 80126f2:	60f8      	str	r0, [r7, #12]
 80126f4:	60b9      	str	r1, [r7, #8]
 80126f6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 80126f8:	68fb      	ldr	r3, [r7, #12]
 80126fa:	2b00      	cmp	r3, #0
 80126fc:	d107      	bne.n	801270e <udp_recv+0x22>
 80126fe:	4b08      	ldr	r3, [pc, #32]	; (8012720 <udp_recv+0x34>)
 8012700:	f240 428a 	movw	r2, #1162	; 0x48a
 8012704:	4907      	ldr	r1, [pc, #28]	; (8012724 <udp_recv+0x38>)
 8012706:	4808      	ldr	r0, [pc, #32]	; (8012728 <udp_recv+0x3c>)
 8012708:	f002 feb8 	bl	801547c <iprintf>
 801270c:	e005      	b.n	801271a <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801270e:	68fb      	ldr	r3, [r7, #12]
 8012710:	68ba      	ldr	r2, [r7, #8]
 8012712:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8012714:	68fb      	ldr	r3, [r7, #12]
 8012716:	687a      	ldr	r2, [r7, #4]
 8012718:	61da      	str	r2, [r3, #28]
}
 801271a:	3710      	adds	r7, #16
 801271c:	46bd      	mov	sp, r7
 801271e:	bd80      	pop	{r7, pc}
 8012720:	08018ea4 	.word	0x08018ea4
 8012724:	080191d8 	.word	0x080191d8
 8012728:	08018ef8 	.word	0x08018ef8

0801272c <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 801272c:	b580      	push	{r7, lr}
 801272e:	b084      	sub	sp, #16
 8012730:	af00      	add	r7, sp, #0
 8012732:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8012734:	687b      	ldr	r3, [r7, #4]
 8012736:	2b00      	cmp	r3, #0
 8012738:	d107      	bne.n	801274a <udp_remove+0x1e>
 801273a:	4b19      	ldr	r3, [pc, #100]	; (80127a0 <udp_remove+0x74>)
 801273c:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8012740:	4918      	ldr	r1, [pc, #96]	; (80127a4 <udp_remove+0x78>)
 8012742:	4819      	ldr	r0, [pc, #100]	; (80127a8 <udp_remove+0x7c>)
 8012744:	f002 fe9a 	bl	801547c <iprintf>
 8012748:	e026      	b.n	8012798 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801274a:	4b18      	ldr	r3, [pc, #96]	; (80127ac <udp_remove+0x80>)
 801274c:	681b      	ldr	r3, [r3, #0]
 801274e:	687a      	ldr	r2, [r7, #4]
 8012750:	429a      	cmp	r2, r3
 8012752:	d105      	bne.n	8012760 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8012754:	4b15      	ldr	r3, [pc, #84]	; (80127ac <udp_remove+0x80>)
 8012756:	681b      	ldr	r3, [r3, #0]
 8012758:	68db      	ldr	r3, [r3, #12]
 801275a:	4a14      	ldr	r2, [pc, #80]	; (80127ac <udp_remove+0x80>)
 801275c:	6013      	str	r3, [r2, #0]
 801275e:	e017      	b.n	8012790 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8012760:	4b12      	ldr	r3, [pc, #72]	; (80127ac <udp_remove+0x80>)
 8012762:	681b      	ldr	r3, [r3, #0]
 8012764:	60fb      	str	r3, [r7, #12]
 8012766:	e010      	b.n	801278a <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8012768:	68fb      	ldr	r3, [r7, #12]
 801276a:	68db      	ldr	r3, [r3, #12]
 801276c:	2b00      	cmp	r3, #0
 801276e:	d009      	beq.n	8012784 <udp_remove+0x58>
 8012770:	68fb      	ldr	r3, [r7, #12]
 8012772:	68db      	ldr	r3, [r3, #12]
 8012774:	687a      	ldr	r2, [r7, #4]
 8012776:	429a      	cmp	r2, r3
 8012778:	d104      	bne.n	8012784 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801277a:	687b      	ldr	r3, [r7, #4]
 801277c:	68da      	ldr	r2, [r3, #12]
 801277e:	68fb      	ldr	r3, [r7, #12]
 8012780:	60da      	str	r2, [r3, #12]
        break;
 8012782:	e005      	b.n	8012790 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8012784:	68fb      	ldr	r3, [r7, #12]
 8012786:	68db      	ldr	r3, [r3, #12]
 8012788:	60fb      	str	r3, [r7, #12]
 801278a:	68fb      	ldr	r3, [r7, #12]
 801278c:	2b00      	cmp	r3, #0
 801278e:	d1eb      	bne.n	8012768 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8012790:	6879      	ldr	r1, [r7, #4]
 8012792:	2000      	movs	r0, #0
 8012794:	f7f8 fa26 	bl	800abe4 <memp_free>
}
 8012798:	3710      	adds	r7, #16
 801279a:	46bd      	mov	sp, r7
 801279c:	bd80      	pop	{r7, pc}
 801279e:	bf00      	nop
 80127a0:	08018ea4 	.word	0x08018ea4
 80127a4:	080191f0 	.word	0x080191f0
 80127a8:	08018ef8 	.word	0x08018ef8
 80127ac:	2000bdbc 	.word	0x2000bdbc

080127b0 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 80127b0:	b580      	push	{r7, lr}
 80127b2:	b082      	sub	sp, #8
 80127b4:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 80127b6:	2000      	movs	r0, #0
 80127b8:	f7f8 f9c2 	bl	800ab40 <memp_malloc>
 80127bc:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 80127be:	687b      	ldr	r3, [r7, #4]
 80127c0:	2b00      	cmp	r3, #0
 80127c2:	d007      	beq.n	80127d4 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 80127c4:	2220      	movs	r2, #32
 80127c6:	2100      	movs	r1, #0
 80127c8:	6878      	ldr	r0, [r7, #4]
 80127ca:	f002 fdf4 	bl	80153b6 <memset>
    pcb->ttl = UDP_TTL;
 80127ce:	687b      	ldr	r3, [r7, #4]
 80127d0:	22ff      	movs	r2, #255	; 0xff
 80127d2:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 80127d4:	687b      	ldr	r3, [r7, #4]
}
 80127d6:	4618      	mov	r0, r3
 80127d8:	3708      	adds	r7, #8
 80127da:	46bd      	mov	sp, r7
 80127dc:	bd80      	pop	{r7, pc}

080127de <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 80127de:	b580      	push	{r7, lr}
 80127e0:	b084      	sub	sp, #16
 80127e2:	af00      	add	r7, sp, #0
 80127e4:	4603      	mov	r3, r0
 80127e6:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 80127e8:	f7ff ffe2 	bl	80127b0 <udp_new>
 80127ec:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 80127ee:	68fb      	ldr	r3, [r7, #12]
}
 80127f0:	4618      	mov	r0, r3
 80127f2:	3710      	adds	r7, #16
 80127f4:	46bd      	mov	sp, r7
 80127f6:	bd80      	pop	{r7, pc}

080127f8 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80127f8:	b480      	push	{r7}
 80127fa:	b085      	sub	sp, #20
 80127fc:	af00      	add	r7, sp, #0
 80127fe:	6078      	str	r0, [r7, #4]
 8012800:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8012802:	687b      	ldr	r3, [r7, #4]
 8012804:	2b00      	cmp	r3, #0
 8012806:	d01e      	beq.n	8012846 <udp_netif_ip_addr_changed+0x4e>
 8012808:	687b      	ldr	r3, [r7, #4]
 801280a:	681b      	ldr	r3, [r3, #0]
 801280c:	2b00      	cmp	r3, #0
 801280e:	d01a      	beq.n	8012846 <udp_netif_ip_addr_changed+0x4e>
 8012810:	683b      	ldr	r3, [r7, #0]
 8012812:	2b00      	cmp	r3, #0
 8012814:	d017      	beq.n	8012846 <udp_netif_ip_addr_changed+0x4e>
 8012816:	683b      	ldr	r3, [r7, #0]
 8012818:	681b      	ldr	r3, [r3, #0]
 801281a:	2b00      	cmp	r3, #0
 801281c:	d013      	beq.n	8012846 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801281e:	4b0d      	ldr	r3, [pc, #52]	; (8012854 <udp_netif_ip_addr_changed+0x5c>)
 8012820:	681b      	ldr	r3, [r3, #0]
 8012822:	60fb      	str	r3, [r7, #12]
 8012824:	e00c      	b.n	8012840 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8012826:	68fb      	ldr	r3, [r7, #12]
 8012828:	681a      	ldr	r2, [r3, #0]
 801282a:	687b      	ldr	r3, [r7, #4]
 801282c:	681b      	ldr	r3, [r3, #0]
 801282e:	429a      	cmp	r2, r3
 8012830:	d103      	bne.n	801283a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8012832:	683b      	ldr	r3, [r7, #0]
 8012834:	681a      	ldr	r2, [r3, #0]
 8012836:	68fb      	ldr	r3, [r7, #12]
 8012838:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801283a:	68fb      	ldr	r3, [r7, #12]
 801283c:	68db      	ldr	r3, [r3, #12]
 801283e:	60fb      	str	r3, [r7, #12]
 8012840:	68fb      	ldr	r3, [r7, #12]
 8012842:	2b00      	cmp	r3, #0
 8012844:	d1ef      	bne.n	8012826 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8012846:	bf00      	nop
 8012848:	3714      	adds	r7, #20
 801284a:	46bd      	mov	sp, r7
 801284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012850:	4770      	bx	lr
 8012852:	bf00      	nop
 8012854:	2000bdbc 	.word	0x2000bdbc

08012858 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8012858:	b580      	push	{r7, lr}
 801285a:	b082      	sub	sp, #8
 801285c:	af00      	add	r7, sp, #0
 801285e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8012860:	4915      	ldr	r1, [pc, #84]	; (80128b8 <etharp_free_entry+0x60>)
 8012862:	687a      	ldr	r2, [r7, #4]
 8012864:	4613      	mov	r3, r2
 8012866:	005b      	lsls	r3, r3, #1
 8012868:	4413      	add	r3, r2
 801286a:	00db      	lsls	r3, r3, #3
 801286c:	440b      	add	r3, r1
 801286e:	681b      	ldr	r3, [r3, #0]
 8012870:	2b00      	cmp	r3, #0
 8012872:	d013      	beq.n	801289c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8012874:	4910      	ldr	r1, [pc, #64]	; (80128b8 <etharp_free_entry+0x60>)
 8012876:	687a      	ldr	r2, [r7, #4]
 8012878:	4613      	mov	r3, r2
 801287a:	005b      	lsls	r3, r3, #1
 801287c:	4413      	add	r3, r2
 801287e:	00db      	lsls	r3, r3, #3
 8012880:	440b      	add	r3, r1
 8012882:	681b      	ldr	r3, [r3, #0]
 8012884:	4618      	mov	r0, r3
 8012886:	f7f9 f851 	bl	800b92c <pbuf_free>
    arp_table[i].q = NULL;
 801288a:	490b      	ldr	r1, [pc, #44]	; (80128b8 <etharp_free_entry+0x60>)
 801288c:	687a      	ldr	r2, [r7, #4]
 801288e:	4613      	mov	r3, r2
 8012890:	005b      	lsls	r3, r3, #1
 8012892:	4413      	add	r3, r2
 8012894:	00db      	lsls	r3, r3, #3
 8012896:	440b      	add	r3, r1
 8012898:	2200      	movs	r2, #0
 801289a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801289c:	4906      	ldr	r1, [pc, #24]	; (80128b8 <etharp_free_entry+0x60>)
 801289e:	687a      	ldr	r2, [r7, #4]
 80128a0:	4613      	mov	r3, r2
 80128a2:	005b      	lsls	r3, r3, #1
 80128a4:	4413      	add	r3, r2
 80128a6:	00db      	lsls	r3, r3, #3
 80128a8:	440b      	add	r3, r1
 80128aa:	3314      	adds	r3, #20
 80128ac:	2200      	movs	r2, #0
 80128ae:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80128b0:	bf00      	nop
 80128b2:	3708      	adds	r7, #8
 80128b4:	46bd      	mov	sp, r7
 80128b6:	bd80      	pop	{r7, pc}
 80128b8:	20004b0c 	.word	0x20004b0c

080128bc <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80128bc:	b580      	push	{r7, lr}
 80128be:	b082      	sub	sp, #8
 80128c0:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80128c2:	2300      	movs	r3, #0
 80128c4:	607b      	str	r3, [r7, #4]
 80128c6:	e096      	b.n	80129f6 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80128c8:	494f      	ldr	r1, [pc, #316]	; (8012a08 <etharp_tmr+0x14c>)
 80128ca:	687a      	ldr	r2, [r7, #4]
 80128cc:	4613      	mov	r3, r2
 80128ce:	005b      	lsls	r3, r3, #1
 80128d0:	4413      	add	r3, r2
 80128d2:	00db      	lsls	r3, r3, #3
 80128d4:	440b      	add	r3, r1
 80128d6:	3314      	adds	r3, #20
 80128d8:	781b      	ldrb	r3, [r3, #0]
 80128da:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80128dc:	78fb      	ldrb	r3, [r7, #3]
 80128de:	2b00      	cmp	r3, #0
 80128e0:	f000 8086 	beq.w	80129f0 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80128e4:	4948      	ldr	r1, [pc, #288]	; (8012a08 <etharp_tmr+0x14c>)
 80128e6:	687a      	ldr	r2, [r7, #4]
 80128e8:	4613      	mov	r3, r2
 80128ea:	005b      	lsls	r3, r3, #1
 80128ec:	4413      	add	r3, r2
 80128ee:	00db      	lsls	r3, r3, #3
 80128f0:	440b      	add	r3, r1
 80128f2:	3312      	adds	r3, #18
 80128f4:	881b      	ldrh	r3, [r3, #0]
 80128f6:	3301      	adds	r3, #1
 80128f8:	b298      	uxth	r0, r3
 80128fa:	4943      	ldr	r1, [pc, #268]	; (8012a08 <etharp_tmr+0x14c>)
 80128fc:	687a      	ldr	r2, [r7, #4]
 80128fe:	4613      	mov	r3, r2
 8012900:	005b      	lsls	r3, r3, #1
 8012902:	4413      	add	r3, r2
 8012904:	00db      	lsls	r3, r3, #3
 8012906:	440b      	add	r3, r1
 8012908:	3312      	adds	r3, #18
 801290a:	4602      	mov	r2, r0
 801290c:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801290e:	493e      	ldr	r1, [pc, #248]	; (8012a08 <etharp_tmr+0x14c>)
 8012910:	687a      	ldr	r2, [r7, #4]
 8012912:	4613      	mov	r3, r2
 8012914:	005b      	lsls	r3, r3, #1
 8012916:	4413      	add	r3, r2
 8012918:	00db      	lsls	r3, r3, #3
 801291a:	440b      	add	r3, r1
 801291c:	3312      	adds	r3, #18
 801291e:	881b      	ldrh	r3, [r3, #0]
 8012920:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8012924:	d215      	bcs.n	8012952 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8012926:	4938      	ldr	r1, [pc, #224]	; (8012a08 <etharp_tmr+0x14c>)
 8012928:	687a      	ldr	r2, [r7, #4]
 801292a:	4613      	mov	r3, r2
 801292c:	005b      	lsls	r3, r3, #1
 801292e:	4413      	add	r3, r2
 8012930:	00db      	lsls	r3, r3, #3
 8012932:	440b      	add	r3, r1
 8012934:	3314      	adds	r3, #20
 8012936:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8012938:	2b01      	cmp	r3, #1
 801293a:	d10e      	bne.n	801295a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801293c:	4932      	ldr	r1, [pc, #200]	; (8012a08 <etharp_tmr+0x14c>)
 801293e:	687a      	ldr	r2, [r7, #4]
 8012940:	4613      	mov	r3, r2
 8012942:	005b      	lsls	r3, r3, #1
 8012944:	4413      	add	r3, r2
 8012946:	00db      	lsls	r3, r3, #3
 8012948:	440b      	add	r3, r1
 801294a:	3312      	adds	r3, #18
 801294c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801294e:	2b04      	cmp	r3, #4
 8012950:	d903      	bls.n	801295a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8012952:	6878      	ldr	r0, [r7, #4]
 8012954:	f7ff ff80 	bl	8012858 <etharp_free_entry>
 8012958:	e04a      	b.n	80129f0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801295a:	492b      	ldr	r1, [pc, #172]	; (8012a08 <etharp_tmr+0x14c>)
 801295c:	687a      	ldr	r2, [r7, #4]
 801295e:	4613      	mov	r3, r2
 8012960:	005b      	lsls	r3, r3, #1
 8012962:	4413      	add	r3, r2
 8012964:	00db      	lsls	r3, r3, #3
 8012966:	440b      	add	r3, r1
 8012968:	3314      	adds	r3, #20
 801296a:	781b      	ldrb	r3, [r3, #0]
 801296c:	2b03      	cmp	r3, #3
 801296e:	d10a      	bne.n	8012986 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8012970:	4925      	ldr	r1, [pc, #148]	; (8012a08 <etharp_tmr+0x14c>)
 8012972:	687a      	ldr	r2, [r7, #4]
 8012974:	4613      	mov	r3, r2
 8012976:	005b      	lsls	r3, r3, #1
 8012978:	4413      	add	r3, r2
 801297a:	00db      	lsls	r3, r3, #3
 801297c:	440b      	add	r3, r1
 801297e:	3314      	adds	r3, #20
 8012980:	2204      	movs	r2, #4
 8012982:	701a      	strb	r2, [r3, #0]
 8012984:	e034      	b.n	80129f0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8012986:	4920      	ldr	r1, [pc, #128]	; (8012a08 <etharp_tmr+0x14c>)
 8012988:	687a      	ldr	r2, [r7, #4]
 801298a:	4613      	mov	r3, r2
 801298c:	005b      	lsls	r3, r3, #1
 801298e:	4413      	add	r3, r2
 8012990:	00db      	lsls	r3, r3, #3
 8012992:	440b      	add	r3, r1
 8012994:	3314      	adds	r3, #20
 8012996:	781b      	ldrb	r3, [r3, #0]
 8012998:	2b04      	cmp	r3, #4
 801299a:	d10a      	bne.n	80129b2 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801299c:	491a      	ldr	r1, [pc, #104]	; (8012a08 <etharp_tmr+0x14c>)
 801299e:	687a      	ldr	r2, [r7, #4]
 80129a0:	4613      	mov	r3, r2
 80129a2:	005b      	lsls	r3, r3, #1
 80129a4:	4413      	add	r3, r2
 80129a6:	00db      	lsls	r3, r3, #3
 80129a8:	440b      	add	r3, r1
 80129aa:	3314      	adds	r3, #20
 80129ac:	2202      	movs	r2, #2
 80129ae:	701a      	strb	r2, [r3, #0]
 80129b0:	e01e      	b.n	80129f0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80129b2:	4915      	ldr	r1, [pc, #84]	; (8012a08 <etharp_tmr+0x14c>)
 80129b4:	687a      	ldr	r2, [r7, #4]
 80129b6:	4613      	mov	r3, r2
 80129b8:	005b      	lsls	r3, r3, #1
 80129ba:	4413      	add	r3, r2
 80129bc:	00db      	lsls	r3, r3, #3
 80129be:	440b      	add	r3, r1
 80129c0:	3314      	adds	r3, #20
 80129c2:	781b      	ldrb	r3, [r3, #0]
 80129c4:	2b01      	cmp	r3, #1
 80129c6:	d113      	bne.n	80129f0 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80129c8:	490f      	ldr	r1, [pc, #60]	; (8012a08 <etharp_tmr+0x14c>)
 80129ca:	687a      	ldr	r2, [r7, #4]
 80129cc:	4613      	mov	r3, r2
 80129ce:	005b      	lsls	r3, r3, #1
 80129d0:	4413      	add	r3, r2
 80129d2:	00db      	lsls	r3, r3, #3
 80129d4:	440b      	add	r3, r1
 80129d6:	3308      	adds	r3, #8
 80129d8:	6818      	ldr	r0, [r3, #0]
 80129da:	687a      	ldr	r2, [r7, #4]
 80129dc:	4613      	mov	r3, r2
 80129de:	005b      	lsls	r3, r3, #1
 80129e0:	4413      	add	r3, r2
 80129e2:	00db      	lsls	r3, r3, #3
 80129e4:	4a08      	ldr	r2, [pc, #32]	; (8012a08 <etharp_tmr+0x14c>)
 80129e6:	4413      	add	r3, r2
 80129e8:	3304      	adds	r3, #4
 80129ea:	4619      	mov	r1, r3
 80129ec:	f000 fe6e 	bl	80136cc <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80129f0:	687b      	ldr	r3, [r7, #4]
 80129f2:	3301      	adds	r3, #1
 80129f4:	607b      	str	r3, [r7, #4]
 80129f6:	687b      	ldr	r3, [r7, #4]
 80129f8:	2b09      	cmp	r3, #9
 80129fa:	f77f af65 	ble.w	80128c8 <etharp_tmr+0xc>
      }
    }
  }
}
 80129fe:	bf00      	nop
 8012a00:	bf00      	nop
 8012a02:	3708      	adds	r7, #8
 8012a04:	46bd      	mov	sp, r7
 8012a06:	bd80      	pop	{r7, pc}
 8012a08:	20004b0c 	.word	0x20004b0c

08012a0c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8012a0c:	b580      	push	{r7, lr}
 8012a0e:	b08a      	sub	sp, #40	; 0x28
 8012a10:	af00      	add	r7, sp, #0
 8012a12:	60f8      	str	r0, [r7, #12]
 8012a14:	460b      	mov	r3, r1
 8012a16:	607a      	str	r2, [r7, #4]
 8012a18:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8012a1a:	230a      	movs	r3, #10
 8012a1c:	84fb      	strh	r3, [r7, #38]	; 0x26
 8012a1e:	230a      	movs	r3, #10
 8012a20:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8012a22:	230a      	movs	r3, #10
 8012a24:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8012a26:	2300      	movs	r3, #0
 8012a28:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8012a2a:	230a      	movs	r3, #10
 8012a2c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8012a2e:	2300      	movs	r3, #0
 8012a30:	83bb      	strh	r3, [r7, #28]
 8012a32:	2300      	movs	r3, #0
 8012a34:	837b      	strh	r3, [r7, #26]
 8012a36:	2300      	movs	r3, #0
 8012a38:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012a3a:	2300      	movs	r3, #0
 8012a3c:	843b      	strh	r3, [r7, #32]
 8012a3e:	e0ae      	b.n	8012b9e <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8012a40:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012a44:	49a6      	ldr	r1, [pc, #664]	; (8012ce0 <etharp_find_entry+0x2d4>)
 8012a46:	4613      	mov	r3, r2
 8012a48:	005b      	lsls	r3, r3, #1
 8012a4a:	4413      	add	r3, r2
 8012a4c:	00db      	lsls	r3, r3, #3
 8012a4e:	440b      	add	r3, r1
 8012a50:	3314      	adds	r3, #20
 8012a52:	781b      	ldrb	r3, [r3, #0]
 8012a54:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8012a56:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8012a5a:	2b0a      	cmp	r3, #10
 8012a5c:	d105      	bne.n	8012a6a <etharp_find_entry+0x5e>
 8012a5e:	7dfb      	ldrb	r3, [r7, #23]
 8012a60:	2b00      	cmp	r3, #0
 8012a62:	d102      	bne.n	8012a6a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8012a64:	8c3b      	ldrh	r3, [r7, #32]
 8012a66:	847b      	strh	r3, [r7, #34]	; 0x22
 8012a68:	e095      	b.n	8012b96 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8012a6a:	7dfb      	ldrb	r3, [r7, #23]
 8012a6c:	2b00      	cmp	r3, #0
 8012a6e:	f000 8092 	beq.w	8012b96 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8012a72:	7dfb      	ldrb	r3, [r7, #23]
 8012a74:	2b01      	cmp	r3, #1
 8012a76:	d009      	beq.n	8012a8c <etharp_find_entry+0x80>
 8012a78:	7dfb      	ldrb	r3, [r7, #23]
 8012a7a:	2b01      	cmp	r3, #1
 8012a7c:	d806      	bhi.n	8012a8c <etharp_find_entry+0x80>
 8012a7e:	4b99      	ldr	r3, [pc, #612]	; (8012ce4 <etharp_find_entry+0x2d8>)
 8012a80:	f240 1223 	movw	r2, #291	; 0x123
 8012a84:	4998      	ldr	r1, [pc, #608]	; (8012ce8 <etharp_find_entry+0x2dc>)
 8012a86:	4899      	ldr	r0, [pc, #612]	; (8012cec <etharp_find_entry+0x2e0>)
 8012a88:	f002 fcf8 	bl	801547c <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8012a8c:	68fb      	ldr	r3, [r7, #12]
 8012a8e:	2b00      	cmp	r3, #0
 8012a90:	d020      	beq.n	8012ad4 <etharp_find_entry+0xc8>
 8012a92:	68fb      	ldr	r3, [r7, #12]
 8012a94:	6819      	ldr	r1, [r3, #0]
 8012a96:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012a9a:	4891      	ldr	r0, [pc, #580]	; (8012ce0 <etharp_find_entry+0x2d4>)
 8012a9c:	4613      	mov	r3, r2
 8012a9e:	005b      	lsls	r3, r3, #1
 8012aa0:	4413      	add	r3, r2
 8012aa2:	00db      	lsls	r3, r3, #3
 8012aa4:	4403      	add	r3, r0
 8012aa6:	3304      	adds	r3, #4
 8012aa8:	681b      	ldr	r3, [r3, #0]
 8012aaa:	4299      	cmp	r1, r3
 8012aac:	d112      	bne.n	8012ad4 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8012aae:	687b      	ldr	r3, [r7, #4]
 8012ab0:	2b00      	cmp	r3, #0
 8012ab2:	d00c      	beq.n	8012ace <etharp_find_entry+0xc2>
 8012ab4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012ab8:	4989      	ldr	r1, [pc, #548]	; (8012ce0 <etharp_find_entry+0x2d4>)
 8012aba:	4613      	mov	r3, r2
 8012abc:	005b      	lsls	r3, r3, #1
 8012abe:	4413      	add	r3, r2
 8012ac0:	00db      	lsls	r3, r3, #3
 8012ac2:	440b      	add	r3, r1
 8012ac4:	3308      	adds	r3, #8
 8012ac6:	681b      	ldr	r3, [r3, #0]
 8012ac8:	687a      	ldr	r2, [r7, #4]
 8012aca:	429a      	cmp	r2, r3
 8012acc:	d102      	bne.n	8012ad4 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8012ace:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012ad2:	e100      	b.n	8012cd6 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8012ad4:	7dfb      	ldrb	r3, [r7, #23]
 8012ad6:	2b01      	cmp	r3, #1
 8012ad8:	d140      	bne.n	8012b5c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8012ada:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012ade:	4980      	ldr	r1, [pc, #512]	; (8012ce0 <etharp_find_entry+0x2d4>)
 8012ae0:	4613      	mov	r3, r2
 8012ae2:	005b      	lsls	r3, r3, #1
 8012ae4:	4413      	add	r3, r2
 8012ae6:	00db      	lsls	r3, r3, #3
 8012ae8:	440b      	add	r3, r1
 8012aea:	681b      	ldr	r3, [r3, #0]
 8012aec:	2b00      	cmp	r3, #0
 8012aee:	d01a      	beq.n	8012b26 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8012af0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012af4:	497a      	ldr	r1, [pc, #488]	; (8012ce0 <etharp_find_entry+0x2d4>)
 8012af6:	4613      	mov	r3, r2
 8012af8:	005b      	lsls	r3, r3, #1
 8012afa:	4413      	add	r3, r2
 8012afc:	00db      	lsls	r3, r3, #3
 8012afe:	440b      	add	r3, r1
 8012b00:	3312      	adds	r3, #18
 8012b02:	881b      	ldrh	r3, [r3, #0]
 8012b04:	8bba      	ldrh	r2, [r7, #28]
 8012b06:	429a      	cmp	r2, r3
 8012b08:	d845      	bhi.n	8012b96 <etharp_find_entry+0x18a>
            old_queue = i;
 8012b0a:	8c3b      	ldrh	r3, [r7, #32]
 8012b0c:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8012b0e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012b12:	4973      	ldr	r1, [pc, #460]	; (8012ce0 <etharp_find_entry+0x2d4>)
 8012b14:	4613      	mov	r3, r2
 8012b16:	005b      	lsls	r3, r3, #1
 8012b18:	4413      	add	r3, r2
 8012b1a:	00db      	lsls	r3, r3, #3
 8012b1c:	440b      	add	r3, r1
 8012b1e:	3312      	adds	r3, #18
 8012b20:	881b      	ldrh	r3, [r3, #0]
 8012b22:	83bb      	strh	r3, [r7, #28]
 8012b24:	e037      	b.n	8012b96 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8012b26:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012b2a:	496d      	ldr	r1, [pc, #436]	; (8012ce0 <etharp_find_entry+0x2d4>)
 8012b2c:	4613      	mov	r3, r2
 8012b2e:	005b      	lsls	r3, r3, #1
 8012b30:	4413      	add	r3, r2
 8012b32:	00db      	lsls	r3, r3, #3
 8012b34:	440b      	add	r3, r1
 8012b36:	3312      	adds	r3, #18
 8012b38:	881b      	ldrh	r3, [r3, #0]
 8012b3a:	8b7a      	ldrh	r2, [r7, #26]
 8012b3c:	429a      	cmp	r2, r3
 8012b3e:	d82a      	bhi.n	8012b96 <etharp_find_entry+0x18a>
            old_pending = i;
 8012b40:	8c3b      	ldrh	r3, [r7, #32]
 8012b42:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8012b44:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012b48:	4965      	ldr	r1, [pc, #404]	; (8012ce0 <etharp_find_entry+0x2d4>)
 8012b4a:	4613      	mov	r3, r2
 8012b4c:	005b      	lsls	r3, r3, #1
 8012b4e:	4413      	add	r3, r2
 8012b50:	00db      	lsls	r3, r3, #3
 8012b52:	440b      	add	r3, r1
 8012b54:	3312      	adds	r3, #18
 8012b56:	881b      	ldrh	r3, [r3, #0]
 8012b58:	837b      	strh	r3, [r7, #26]
 8012b5a:	e01c      	b.n	8012b96 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8012b5c:	7dfb      	ldrb	r3, [r7, #23]
 8012b5e:	2b01      	cmp	r3, #1
 8012b60:	d919      	bls.n	8012b96 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8012b62:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012b66:	495e      	ldr	r1, [pc, #376]	; (8012ce0 <etharp_find_entry+0x2d4>)
 8012b68:	4613      	mov	r3, r2
 8012b6a:	005b      	lsls	r3, r3, #1
 8012b6c:	4413      	add	r3, r2
 8012b6e:	00db      	lsls	r3, r3, #3
 8012b70:	440b      	add	r3, r1
 8012b72:	3312      	adds	r3, #18
 8012b74:	881b      	ldrh	r3, [r3, #0]
 8012b76:	8b3a      	ldrh	r2, [r7, #24]
 8012b78:	429a      	cmp	r2, r3
 8012b7a:	d80c      	bhi.n	8012b96 <etharp_find_entry+0x18a>
            old_stable = i;
 8012b7c:	8c3b      	ldrh	r3, [r7, #32]
 8012b7e:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8012b80:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012b84:	4956      	ldr	r1, [pc, #344]	; (8012ce0 <etharp_find_entry+0x2d4>)
 8012b86:	4613      	mov	r3, r2
 8012b88:	005b      	lsls	r3, r3, #1
 8012b8a:	4413      	add	r3, r2
 8012b8c:	00db      	lsls	r3, r3, #3
 8012b8e:	440b      	add	r3, r1
 8012b90:	3312      	adds	r3, #18
 8012b92:	881b      	ldrh	r3, [r3, #0]
 8012b94:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012b96:	8c3b      	ldrh	r3, [r7, #32]
 8012b98:	3301      	adds	r3, #1
 8012b9a:	b29b      	uxth	r3, r3
 8012b9c:	843b      	strh	r3, [r7, #32]
 8012b9e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012ba2:	2b09      	cmp	r3, #9
 8012ba4:	f77f af4c 	ble.w	8012a40 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8012ba8:	7afb      	ldrb	r3, [r7, #11]
 8012baa:	f003 0302 	and.w	r3, r3, #2
 8012bae:	2b00      	cmp	r3, #0
 8012bb0:	d108      	bne.n	8012bc4 <etharp_find_entry+0x1b8>
 8012bb2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8012bb6:	2b0a      	cmp	r3, #10
 8012bb8:	d107      	bne.n	8012bca <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8012bba:	7afb      	ldrb	r3, [r7, #11]
 8012bbc:	f003 0301 	and.w	r3, r3, #1
 8012bc0:	2b00      	cmp	r3, #0
 8012bc2:	d102      	bne.n	8012bca <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8012bc4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012bc8:	e085      	b.n	8012cd6 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8012bca:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8012bce:	2b09      	cmp	r3, #9
 8012bd0:	dc02      	bgt.n	8012bd8 <etharp_find_entry+0x1cc>
    i = empty;
 8012bd2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012bd4:	843b      	strh	r3, [r7, #32]
 8012bd6:	e039      	b.n	8012c4c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8012bd8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8012bdc:	2b09      	cmp	r3, #9
 8012bde:	dc14      	bgt.n	8012c0a <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8012be0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012be2:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8012be4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012be8:	493d      	ldr	r1, [pc, #244]	; (8012ce0 <etharp_find_entry+0x2d4>)
 8012bea:	4613      	mov	r3, r2
 8012bec:	005b      	lsls	r3, r3, #1
 8012bee:	4413      	add	r3, r2
 8012bf0:	00db      	lsls	r3, r3, #3
 8012bf2:	440b      	add	r3, r1
 8012bf4:	681b      	ldr	r3, [r3, #0]
 8012bf6:	2b00      	cmp	r3, #0
 8012bf8:	d018      	beq.n	8012c2c <etharp_find_entry+0x220>
 8012bfa:	4b3a      	ldr	r3, [pc, #232]	; (8012ce4 <etharp_find_entry+0x2d8>)
 8012bfc:	f240 126d 	movw	r2, #365	; 0x16d
 8012c00:	493b      	ldr	r1, [pc, #236]	; (8012cf0 <etharp_find_entry+0x2e4>)
 8012c02:	483a      	ldr	r0, [pc, #232]	; (8012cec <etharp_find_entry+0x2e0>)
 8012c04:	f002 fc3a 	bl	801547c <iprintf>
 8012c08:	e010      	b.n	8012c2c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8012c0a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8012c0e:	2b09      	cmp	r3, #9
 8012c10:	dc02      	bgt.n	8012c18 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8012c12:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012c14:	843b      	strh	r3, [r7, #32]
 8012c16:	e009      	b.n	8012c2c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8012c18:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8012c1c:	2b09      	cmp	r3, #9
 8012c1e:	dc02      	bgt.n	8012c26 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8012c20:	8bfb      	ldrh	r3, [r7, #30]
 8012c22:	843b      	strh	r3, [r7, #32]
 8012c24:	e002      	b.n	8012c2c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8012c26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012c2a:	e054      	b.n	8012cd6 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8012c2c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012c30:	2b09      	cmp	r3, #9
 8012c32:	dd06      	ble.n	8012c42 <etharp_find_entry+0x236>
 8012c34:	4b2b      	ldr	r3, [pc, #172]	; (8012ce4 <etharp_find_entry+0x2d8>)
 8012c36:	f240 127f 	movw	r2, #383	; 0x17f
 8012c3a:	492e      	ldr	r1, [pc, #184]	; (8012cf4 <etharp_find_entry+0x2e8>)
 8012c3c:	482b      	ldr	r0, [pc, #172]	; (8012cec <etharp_find_entry+0x2e0>)
 8012c3e:	f002 fc1d 	bl	801547c <iprintf>
    etharp_free_entry(i);
 8012c42:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012c46:	4618      	mov	r0, r3
 8012c48:	f7ff fe06 	bl	8012858 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8012c4c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012c50:	2b09      	cmp	r3, #9
 8012c52:	dd06      	ble.n	8012c62 <etharp_find_entry+0x256>
 8012c54:	4b23      	ldr	r3, [pc, #140]	; (8012ce4 <etharp_find_entry+0x2d8>)
 8012c56:	f240 1283 	movw	r2, #387	; 0x183
 8012c5a:	4926      	ldr	r1, [pc, #152]	; (8012cf4 <etharp_find_entry+0x2e8>)
 8012c5c:	4823      	ldr	r0, [pc, #140]	; (8012cec <etharp_find_entry+0x2e0>)
 8012c5e:	f002 fc0d 	bl	801547c <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8012c62:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012c66:	491e      	ldr	r1, [pc, #120]	; (8012ce0 <etharp_find_entry+0x2d4>)
 8012c68:	4613      	mov	r3, r2
 8012c6a:	005b      	lsls	r3, r3, #1
 8012c6c:	4413      	add	r3, r2
 8012c6e:	00db      	lsls	r3, r3, #3
 8012c70:	440b      	add	r3, r1
 8012c72:	3314      	adds	r3, #20
 8012c74:	781b      	ldrb	r3, [r3, #0]
 8012c76:	2b00      	cmp	r3, #0
 8012c78:	d006      	beq.n	8012c88 <etharp_find_entry+0x27c>
 8012c7a:	4b1a      	ldr	r3, [pc, #104]	; (8012ce4 <etharp_find_entry+0x2d8>)
 8012c7c:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8012c80:	491d      	ldr	r1, [pc, #116]	; (8012cf8 <etharp_find_entry+0x2ec>)
 8012c82:	481a      	ldr	r0, [pc, #104]	; (8012cec <etharp_find_entry+0x2e0>)
 8012c84:	f002 fbfa 	bl	801547c <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8012c88:	68fb      	ldr	r3, [r7, #12]
 8012c8a:	2b00      	cmp	r3, #0
 8012c8c:	d00b      	beq.n	8012ca6 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8012c8e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012c92:	68fb      	ldr	r3, [r7, #12]
 8012c94:	6819      	ldr	r1, [r3, #0]
 8012c96:	4812      	ldr	r0, [pc, #72]	; (8012ce0 <etharp_find_entry+0x2d4>)
 8012c98:	4613      	mov	r3, r2
 8012c9a:	005b      	lsls	r3, r3, #1
 8012c9c:	4413      	add	r3, r2
 8012c9e:	00db      	lsls	r3, r3, #3
 8012ca0:	4403      	add	r3, r0
 8012ca2:	3304      	adds	r3, #4
 8012ca4:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8012ca6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012caa:	490d      	ldr	r1, [pc, #52]	; (8012ce0 <etharp_find_entry+0x2d4>)
 8012cac:	4613      	mov	r3, r2
 8012cae:	005b      	lsls	r3, r3, #1
 8012cb0:	4413      	add	r3, r2
 8012cb2:	00db      	lsls	r3, r3, #3
 8012cb4:	440b      	add	r3, r1
 8012cb6:	3312      	adds	r3, #18
 8012cb8:	2200      	movs	r2, #0
 8012cba:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8012cbc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012cc0:	4907      	ldr	r1, [pc, #28]	; (8012ce0 <etharp_find_entry+0x2d4>)
 8012cc2:	4613      	mov	r3, r2
 8012cc4:	005b      	lsls	r3, r3, #1
 8012cc6:	4413      	add	r3, r2
 8012cc8:	00db      	lsls	r3, r3, #3
 8012cca:	440b      	add	r3, r1
 8012ccc:	3308      	adds	r3, #8
 8012cce:	687a      	ldr	r2, [r7, #4]
 8012cd0:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8012cd2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8012cd6:	4618      	mov	r0, r3
 8012cd8:	3728      	adds	r7, #40	; 0x28
 8012cda:	46bd      	mov	sp, r7
 8012cdc:	bd80      	pop	{r7, pc}
 8012cde:	bf00      	nop
 8012ce0:	20004b0c 	.word	0x20004b0c
 8012ce4:	08019208 	.word	0x08019208
 8012ce8:	08019240 	.word	0x08019240
 8012cec:	08019280 	.word	0x08019280
 8012cf0:	080192a8 	.word	0x080192a8
 8012cf4:	080192c0 	.word	0x080192c0
 8012cf8:	080192d4 	.word	0x080192d4

08012cfc <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8012cfc:	b580      	push	{r7, lr}
 8012cfe:	b088      	sub	sp, #32
 8012d00:	af02      	add	r7, sp, #8
 8012d02:	60f8      	str	r0, [r7, #12]
 8012d04:	60b9      	str	r1, [r7, #8]
 8012d06:	607a      	str	r2, [r7, #4]
 8012d08:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8012d0a:	68fb      	ldr	r3, [r7, #12]
 8012d0c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8012d10:	2b06      	cmp	r3, #6
 8012d12:	d006      	beq.n	8012d22 <etharp_update_arp_entry+0x26>
 8012d14:	4b48      	ldr	r3, [pc, #288]	; (8012e38 <etharp_update_arp_entry+0x13c>)
 8012d16:	f240 12a9 	movw	r2, #425	; 0x1a9
 8012d1a:	4948      	ldr	r1, [pc, #288]	; (8012e3c <etharp_update_arp_entry+0x140>)
 8012d1c:	4848      	ldr	r0, [pc, #288]	; (8012e40 <etharp_update_arp_entry+0x144>)
 8012d1e:	f002 fbad 	bl	801547c <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8012d22:	68bb      	ldr	r3, [r7, #8]
 8012d24:	2b00      	cmp	r3, #0
 8012d26:	d012      	beq.n	8012d4e <etharp_update_arp_entry+0x52>
 8012d28:	68bb      	ldr	r3, [r7, #8]
 8012d2a:	681b      	ldr	r3, [r3, #0]
 8012d2c:	2b00      	cmp	r3, #0
 8012d2e:	d00e      	beq.n	8012d4e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8012d30:	68bb      	ldr	r3, [r7, #8]
 8012d32:	681b      	ldr	r3, [r3, #0]
 8012d34:	68f9      	ldr	r1, [r7, #12]
 8012d36:	4618      	mov	r0, r3
 8012d38:	f001 f8fe 	bl	8013f38 <ip4_addr_isbroadcast_u32>
 8012d3c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8012d3e:	2b00      	cmp	r3, #0
 8012d40:	d105      	bne.n	8012d4e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8012d42:	68bb      	ldr	r3, [r7, #8]
 8012d44:	681b      	ldr	r3, [r3, #0]
 8012d46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8012d4a:	2be0      	cmp	r3, #224	; 0xe0
 8012d4c:	d102      	bne.n	8012d54 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8012d4e:	f06f 030f 	mvn.w	r3, #15
 8012d52:	e06c      	b.n	8012e2e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8012d54:	78fb      	ldrb	r3, [r7, #3]
 8012d56:	68fa      	ldr	r2, [r7, #12]
 8012d58:	4619      	mov	r1, r3
 8012d5a:	68b8      	ldr	r0, [r7, #8]
 8012d5c:	f7ff fe56 	bl	8012a0c <etharp_find_entry>
 8012d60:	4603      	mov	r3, r0
 8012d62:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8012d64:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8012d68:	2b00      	cmp	r3, #0
 8012d6a:	da02      	bge.n	8012d72 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8012d6c:	8afb      	ldrh	r3, [r7, #22]
 8012d6e:	b25b      	sxtb	r3, r3
 8012d70:	e05d      	b.n	8012e2e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8012d72:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012d76:	4933      	ldr	r1, [pc, #204]	; (8012e44 <etharp_update_arp_entry+0x148>)
 8012d78:	4613      	mov	r3, r2
 8012d7a:	005b      	lsls	r3, r3, #1
 8012d7c:	4413      	add	r3, r2
 8012d7e:	00db      	lsls	r3, r3, #3
 8012d80:	440b      	add	r3, r1
 8012d82:	3314      	adds	r3, #20
 8012d84:	2202      	movs	r2, #2
 8012d86:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8012d88:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012d8c:	492d      	ldr	r1, [pc, #180]	; (8012e44 <etharp_update_arp_entry+0x148>)
 8012d8e:	4613      	mov	r3, r2
 8012d90:	005b      	lsls	r3, r3, #1
 8012d92:	4413      	add	r3, r2
 8012d94:	00db      	lsls	r3, r3, #3
 8012d96:	440b      	add	r3, r1
 8012d98:	3308      	adds	r3, #8
 8012d9a:	68fa      	ldr	r2, [r7, #12]
 8012d9c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8012d9e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012da2:	4613      	mov	r3, r2
 8012da4:	005b      	lsls	r3, r3, #1
 8012da6:	4413      	add	r3, r2
 8012da8:	00db      	lsls	r3, r3, #3
 8012daa:	3308      	adds	r3, #8
 8012dac:	4a25      	ldr	r2, [pc, #148]	; (8012e44 <etharp_update_arp_entry+0x148>)
 8012dae:	4413      	add	r3, r2
 8012db0:	3304      	adds	r3, #4
 8012db2:	2206      	movs	r2, #6
 8012db4:	6879      	ldr	r1, [r7, #4]
 8012db6:	4618      	mov	r0, r3
 8012db8:	f002 faef 	bl	801539a <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8012dbc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012dc0:	4920      	ldr	r1, [pc, #128]	; (8012e44 <etharp_update_arp_entry+0x148>)
 8012dc2:	4613      	mov	r3, r2
 8012dc4:	005b      	lsls	r3, r3, #1
 8012dc6:	4413      	add	r3, r2
 8012dc8:	00db      	lsls	r3, r3, #3
 8012dca:	440b      	add	r3, r1
 8012dcc:	3312      	adds	r3, #18
 8012dce:	2200      	movs	r2, #0
 8012dd0:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8012dd2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012dd6:	491b      	ldr	r1, [pc, #108]	; (8012e44 <etharp_update_arp_entry+0x148>)
 8012dd8:	4613      	mov	r3, r2
 8012dda:	005b      	lsls	r3, r3, #1
 8012ddc:	4413      	add	r3, r2
 8012dde:	00db      	lsls	r3, r3, #3
 8012de0:	440b      	add	r3, r1
 8012de2:	681b      	ldr	r3, [r3, #0]
 8012de4:	2b00      	cmp	r3, #0
 8012de6:	d021      	beq.n	8012e2c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8012de8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012dec:	4915      	ldr	r1, [pc, #84]	; (8012e44 <etharp_update_arp_entry+0x148>)
 8012dee:	4613      	mov	r3, r2
 8012df0:	005b      	lsls	r3, r3, #1
 8012df2:	4413      	add	r3, r2
 8012df4:	00db      	lsls	r3, r3, #3
 8012df6:	440b      	add	r3, r1
 8012df8:	681b      	ldr	r3, [r3, #0]
 8012dfa:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8012dfc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012e00:	4910      	ldr	r1, [pc, #64]	; (8012e44 <etharp_update_arp_entry+0x148>)
 8012e02:	4613      	mov	r3, r2
 8012e04:	005b      	lsls	r3, r3, #1
 8012e06:	4413      	add	r3, r2
 8012e08:	00db      	lsls	r3, r3, #3
 8012e0a:	440b      	add	r3, r1
 8012e0c:	2200      	movs	r2, #0
 8012e0e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8012e10:	68fb      	ldr	r3, [r7, #12]
 8012e12:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8012e16:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012e1a:	9300      	str	r3, [sp, #0]
 8012e1c:	687b      	ldr	r3, [r7, #4]
 8012e1e:	6939      	ldr	r1, [r7, #16]
 8012e20:	68f8      	ldr	r0, [r7, #12]
 8012e22:	f001 ff91 	bl	8014d48 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8012e26:	6938      	ldr	r0, [r7, #16]
 8012e28:	f7f8 fd80 	bl	800b92c <pbuf_free>
  }
  return ERR_OK;
 8012e2c:	2300      	movs	r3, #0
}
 8012e2e:	4618      	mov	r0, r3
 8012e30:	3718      	adds	r7, #24
 8012e32:	46bd      	mov	sp, r7
 8012e34:	bd80      	pop	{r7, pc}
 8012e36:	bf00      	nop
 8012e38:	08019208 	.word	0x08019208
 8012e3c:	08019300 	.word	0x08019300
 8012e40:	08019280 	.word	0x08019280
 8012e44:	20004b0c 	.word	0x20004b0c

08012e48 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8012e48:	b580      	push	{r7, lr}
 8012e4a:	b084      	sub	sp, #16
 8012e4c:	af00      	add	r7, sp, #0
 8012e4e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012e50:	2300      	movs	r3, #0
 8012e52:	60fb      	str	r3, [r7, #12]
 8012e54:	e01e      	b.n	8012e94 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8012e56:	4913      	ldr	r1, [pc, #76]	; (8012ea4 <etharp_cleanup_netif+0x5c>)
 8012e58:	68fa      	ldr	r2, [r7, #12]
 8012e5a:	4613      	mov	r3, r2
 8012e5c:	005b      	lsls	r3, r3, #1
 8012e5e:	4413      	add	r3, r2
 8012e60:	00db      	lsls	r3, r3, #3
 8012e62:	440b      	add	r3, r1
 8012e64:	3314      	adds	r3, #20
 8012e66:	781b      	ldrb	r3, [r3, #0]
 8012e68:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8012e6a:	7afb      	ldrb	r3, [r7, #11]
 8012e6c:	2b00      	cmp	r3, #0
 8012e6e:	d00e      	beq.n	8012e8e <etharp_cleanup_netif+0x46>
 8012e70:	490c      	ldr	r1, [pc, #48]	; (8012ea4 <etharp_cleanup_netif+0x5c>)
 8012e72:	68fa      	ldr	r2, [r7, #12]
 8012e74:	4613      	mov	r3, r2
 8012e76:	005b      	lsls	r3, r3, #1
 8012e78:	4413      	add	r3, r2
 8012e7a:	00db      	lsls	r3, r3, #3
 8012e7c:	440b      	add	r3, r1
 8012e7e:	3308      	adds	r3, #8
 8012e80:	681b      	ldr	r3, [r3, #0]
 8012e82:	687a      	ldr	r2, [r7, #4]
 8012e84:	429a      	cmp	r2, r3
 8012e86:	d102      	bne.n	8012e8e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8012e88:	68f8      	ldr	r0, [r7, #12]
 8012e8a:	f7ff fce5 	bl	8012858 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012e8e:	68fb      	ldr	r3, [r7, #12]
 8012e90:	3301      	adds	r3, #1
 8012e92:	60fb      	str	r3, [r7, #12]
 8012e94:	68fb      	ldr	r3, [r7, #12]
 8012e96:	2b09      	cmp	r3, #9
 8012e98:	dddd      	ble.n	8012e56 <etharp_cleanup_netif+0xe>
    }
  }
}
 8012e9a:	bf00      	nop
 8012e9c:	bf00      	nop
 8012e9e:	3710      	adds	r7, #16
 8012ea0:	46bd      	mov	sp, r7
 8012ea2:	bd80      	pop	{r7, pc}
 8012ea4:	20004b0c 	.word	0x20004b0c

08012ea8 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8012ea8:	b5b0      	push	{r4, r5, r7, lr}
 8012eaa:	b08a      	sub	sp, #40	; 0x28
 8012eac:	af04      	add	r7, sp, #16
 8012eae:	6078      	str	r0, [r7, #4]
 8012eb0:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8012eb2:	683b      	ldr	r3, [r7, #0]
 8012eb4:	2b00      	cmp	r3, #0
 8012eb6:	d107      	bne.n	8012ec8 <etharp_input+0x20>
 8012eb8:	4b3d      	ldr	r3, [pc, #244]	; (8012fb0 <etharp_input+0x108>)
 8012eba:	f240 228a 	movw	r2, #650	; 0x28a
 8012ebe:	493d      	ldr	r1, [pc, #244]	; (8012fb4 <etharp_input+0x10c>)
 8012ec0:	483d      	ldr	r0, [pc, #244]	; (8012fb8 <etharp_input+0x110>)
 8012ec2:	f002 fadb 	bl	801547c <iprintf>
 8012ec6:	e06f      	b.n	8012fa8 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8012ec8:	687b      	ldr	r3, [r7, #4]
 8012eca:	685b      	ldr	r3, [r3, #4]
 8012ecc:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8012ece:	693b      	ldr	r3, [r7, #16]
 8012ed0:	881b      	ldrh	r3, [r3, #0]
 8012ed2:	b29b      	uxth	r3, r3
 8012ed4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012ed8:	d10c      	bne.n	8012ef4 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8012eda:	693b      	ldr	r3, [r7, #16]
 8012edc:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8012ede:	2b06      	cmp	r3, #6
 8012ee0:	d108      	bne.n	8012ef4 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8012ee2:	693b      	ldr	r3, [r7, #16]
 8012ee4:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8012ee6:	2b04      	cmp	r3, #4
 8012ee8:	d104      	bne.n	8012ef4 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8012eea:	693b      	ldr	r3, [r7, #16]
 8012eec:	885b      	ldrh	r3, [r3, #2]
 8012eee:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8012ef0:	2b08      	cmp	r3, #8
 8012ef2:	d003      	beq.n	8012efc <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8012ef4:	6878      	ldr	r0, [r7, #4]
 8012ef6:	f7f8 fd19 	bl	800b92c <pbuf_free>
    return;
 8012efa:	e055      	b.n	8012fa8 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8012efc:	693b      	ldr	r3, [r7, #16]
 8012efe:	330e      	adds	r3, #14
 8012f00:	681b      	ldr	r3, [r3, #0]
 8012f02:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8012f04:	693b      	ldr	r3, [r7, #16]
 8012f06:	3318      	adds	r3, #24
 8012f08:	681b      	ldr	r3, [r3, #0]
 8012f0a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8012f0c:	683b      	ldr	r3, [r7, #0]
 8012f0e:	3304      	adds	r3, #4
 8012f10:	681b      	ldr	r3, [r3, #0]
 8012f12:	2b00      	cmp	r3, #0
 8012f14:	d102      	bne.n	8012f1c <etharp_input+0x74>
    for_us = 0;
 8012f16:	2300      	movs	r3, #0
 8012f18:	75fb      	strb	r3, [r7, #23]
 8012f1a:	e009      	b.n	8012f30 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8012f1c:	68ba      	ldr	r2, [r7, #8]
 8012f1e:	683b      	ldr	r3, [r7, #0]
 8012f20:	3304      	adds	r3, #4
 8012f22:	681b      	ldr	r3, [r3, #0]
 8012f24:	429a      	cmp	r2, r3
 8012f26:	bf0c      	ite	eq
 8012f28:	2301      	moveq	r3, #1
 8012f2a:	2300      	movne	r3, #0
 8012f2c:	b2db      	uxtb	r3, r3
 8012f2e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8012f30:	693b      	ldr	r3, [r7, #16]
 8012f32:	f103 0208 	add.w	r2, r3, #8
 8012f36:	7dfb      	ldrb	r3, [r7, #23]
 8012f38:	2b00      	cmp	r3, #0
 8012f3a:	d001      	beq.n	8012f40 <etharp_input+0x98>
 8012f3c:	2301      	movs	r3, #1
 8012f3e:	e000      	b.n	8012f42 <etharp_input+0x9a>
 8012f40:	2302      	movs	r3, #2
 8012f42:	f107 010c 	add.w	r1, r7, #12
 8012f46:	6838      	ldr	r0, [r7, #0]
 8012f48:	f7ff fed8 	bl	8012cfc <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8012f4c:	693b      	ldr	r3, [r7, #16]
 8012f4e:	88db      	ldrh	r3, [r3, #6]
 8012f50:	b29b      	uxth	r3, r3
 8012f52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012f56:	d003      	beq.n	8012f60 <etharp_input+0xb8>
 8012f58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012f5c:	d01e      	beq.n	8012f9c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8012f5e:	e020      	b.n	8012fa2 <etharp_input+0xfa>
      if (for_us) {
 8012f60:	7dfb      	ldrb	r3, [r7, #23]
 8012f62:	2b00      	cmp	r3, #0
 8012f64:	d01c      	beq.n	8012fa0 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8012f66:	683b      	ldr	r3, [r7, #0]
 8012f68:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8012f6c:	693b      	ldr	r3, [r7, #16]
 8012f6e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8012f72:	683b      	ldr	r3, [r7, #0]
 8012f74:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8012f78:	683b      	ldr	r3, [r7, #0]
 8012f7a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8012f7c:	693a      	ldr	r2, [r7, #16]
 8012f7e:	3208      	adds	r2, #8
        etharp_raw(netif,
 8012f80:	2102      	movs	r1, #2
 8012f82:	9103      	str	r1, [sp, #12]
 8012f84:	f107 010c 	add.w	r1, r7, #12
 8012f88:	9102      	str	r1, [sp, #8]
 8012f8a:	9201      	str	r2, [sp, #4]
 8012f8c:	9300      	str	r3, [sp, #0]
 8012f8e:	462b      	mov	r3, r5
 8012f90:	4622      	mov	r2, r4
 8012f92:	4601      	mov	r1, r0
 8012f94:	6838      	ldr	r0, [r7, #0]
 8012f96:	f000 faeb 	bl	8013570 <etharp_raw>
      break;
 8012f9a:	e001      	b.n	8012fa0 <etharp_input+0xf8>
      break;
 8012f9c:	bf00      	nop
 8012f9e:	e000      	b.n	8012fa2 <etharp_input+0xfa>
      break;
 8012fa0:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8012fa2:	6878      	ldr	r0, [r7, #4]
 8012fa4:	f7f8 fcc2 	bl	800b92c <pbuf_free>
}
 8012fa8:	3718      	adds	r7, #24
 8012faa:	46bd      	mov	sp, r7
 8012fac:	bdb0      	pop	{r4, r5, r7, pc}
 8012fae:	bf00      	nop
 8012fb0:	08019208 	.word	0x08019208
 8012fb4:	08019358 	.word	0x08019358
 8012fb8:	08019280 	.word	0x08019280

08012fbc <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8012fbc:	b580      	push	{r7, lr}
 8012fbe:	b086      	sub	sp, #24
 8012fc0:	af02      	add	r7, sp, #8
 8012fc2:	60f8      	str	r0, [r7, #12]
 8012fc4:	60b9      	str	r1, [r7, #8]
 8012fc6:	4613      	mov	r3, r2
 8012fc8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8012fca:	79fa      	ldrb	r2, [r7, #7]
 8012fcc:	4944      	ldr	r1, [pc, #272]	; (80130e0 <etharp_output_to_arp_index+0x124>)
 8012fce:	4613      	mov	r3, r2
 8012fd0:	005b      	lsls	r3, r3, #1
 8012fd2:	4413      	add	r3, r2
 8012fd4:	00db      	lsls	r3, r3, #3
 8012fd6:	440b      	add	r3, r1
 8012fd8:	3314      	adds	r3, #20
 8012fda:	781b      	ldrb	r3, [r3, #0]
 8012fdc:	2b01      	cmp	r3, #1
 8012fde:	d806      	bhi.n	8012fee <etharp_output_to_arp_index+0x32>
 8012fe0:	4b40      	ldr	r3, [pc, #256]	; (80130e4 <etharp_output_to_arp_index+0x128>)
 8012fe2:	f240 22ee 	movw	r2, #750	; 0x2ee
 8012fe6:	4940      	ldr	r1, [pc, #256]	; (80130e8 <etharp_output_to_arp_index+0x12c>)
 8012fe8:	4840      	ldr	r0, [pc, #256]	; (80130ec <etharp_output_to_arp_index+0x130>)
 8012fea:	f002 fa47 	bl	801547c <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8012fee:	79fa      	ldrb	r2, [r7, #7]
 8012ff0:	493b      	ldr	r1, [pc, #236]	; (80130e0 <etharp_output_to_arp_index+0x124>)
 8012ff2:	4613      	mov	r3, r2
 8012ff4:	005b      	lsls	r3, r3, #1
 8012ff6:	4413      	add	r3, r2
 8012ff8:	00db      	lsls	r3, r3, #3
 8012ffa:	440b      	add	r3, r1
 8012ffc:	3314      	adds	r3, #20
 8012ffe:	781b      	ldrb	r3, [r3, #0]
 8013000:	2b02      	cmp	r3, #2
 8013002:	d153      	bne.n	80130ac <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8013004:	79fa      	ldrb	r2, [r7, #7]
 8013006:	4936      	ldr	r1, [pc, #216]	; (80130e0 <etharp_output_to_arp_index+0x124>)
 8013008:	4613      	mov	r3, r2
 801300a:	005b      	lsls	r3, r3, #1
 801300c:	4413      	add	r3, r2
 801300e:	00db      	lsls	r3, r3, #3
 8013010:	440b      	add	r3, r1
 8013012:	3312      	adds	r3, #18
 8013014:	881b      	ldrh	r3, [r3, #0]
 8013016:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801301a:	d919      	bls.n	8013050 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801301c:	79fa      	ldrb	r2, [r7, #7]
 801301e:	4613      	mov	r3, r2
 8013020:	005b      	lsls	r3, r3, #1
 8013022:	4413      	add	r3, r2
 8013024:	00db      	lsls	r3, r3, #3
 8013026:	4a2e      	ldr	r2, [pc, #184]	; (80130e0 <etharp_output_to_arp_index+0x124>)
 8013028:	4413      	add	r3, r2
 801302a:	3304      	adds	r3, #4
 801302c:	4619      	mov	r1, r3
 801302e:	68f8      	ldr	r0, [r7, #12]
 8013030:	f000 fb4c 	bl	80136cc <etharp_request>
 8013034:	4603      	mov	r3, r0
 8013036:	2b00      	cmp	r3, #0
 8013038:	d138      	bne.n	80130ac <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801303a:	79fa      	ldrb	r2, [r7, #7]
 801303c:	4928      	ldr	r1, [pc, #160]	; (80130e0 <etharp_output_to_arp_index+0x124>)
 801303e:	4613      	mov	r3, r2
 8013040:	005b      	lsls	r3, r3, #1
 8013042:	4413      	add	r3, r2
 8013044:	00db      	lsls	r3, r3, #3
 8013046:	440b      	add	r3, r1
 8013048:	3314      	adds	r3, #20
 801304a:	2203      	movs	r2, #3
 801304c:	701a      	strb	r2, [r3, #0]
 801304e:	e02d      	b.n	80130ac <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8013050:	79fa      	ldrb	r2, [r7, #7]
 8013052:	4923      	ldr	r1, [pc, #140]	; (80130e0 <etharp_output_to_arp_index+0x124>)
 8013054:	4613      	mov	r3, r2
 8013056:	005b      	lsls	r3, r3, #1
 8013058:	4413      	add	r3, r2
 801305a:	00db      	lsls	r3, r3, #3
 801305c:	440b      	add	r3, r1
 801305e:	3312      	adds	r3, #18
 8013060:	881b      	ldrh	r3, [r3, #0]
 8013062:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8013066:	d321      	bcc.n	80130ac <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8013068:	79fa      	ldrb	r2, [r7, #7]
 801306a:	4613      	mov	r3, r2
 801306c:	005b      	lsls	r3, r3, #1
 801306e:	4413      	add	r3, r2
 8013070:	00db      	lsls	r3, r3, #3
 8013072:	4a1b      	ldr	r2, [pc, #108]	; (80130e0 <etharp_output_to_arp_index+0x124>)
 8013074:	4413      	add	r3, r2
 8013076:	1d19      	adds	r1, r3, #4
 8013078:	79fa      	ldrb	r2, [r7, #7]
 801307a:	4613      	mov	r3, r2
 801307c:	005b      	lsls	r3, r3, #1
 801307e:	4413      	add	r3, r2
 8013080:	00db      	lsls	r3, r3, #3
 8013082:	3308      	adds	r3, #8
 8013084:	4a16      	ldr	r2, [pc, #88]	; (80130e0 <etharp_output_to_arp_index+0x124>)
 8013086:	4413      	add	r3, r2
 8013088:	3304      	adds	r3, #4
 801308a:	461a      	mov	r2, r3
 801308c:	68f8      	ldr	r0, [r7, #12]
 801308e:	f000 fafb 	bl	8013688 <etharp_request_dst>
 8013092:	4603      	mov	r3, r0
 8013094:	2b00      	cmp	r3, #0
 8013096:	d109      	bne.n	80130ac <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8013098:	79fa      	ldrb	r2, [r7, #7]
 801309a:	4911      	ldr	r1, [pc, #68]	; (80130e0 <etharp_output_to_arp_index+0x124>)
 801309c:	4613      	mov	r3, r2
 801309e:	005b      	lsls	r3, r3, #1
 80130a0:	4413      	add	r3, r2
 80130a2:	00db      	lsls	r3, r3, #3
 80130a4:	440b      	add	r3, r1
 80130a6:	3314      	adds	r3, #20
 80130a8:	2203      	movs	r2, #3
 80130aa:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80130ac:	68fb      	ldr	r3, [r7, #12]
 80130ae:	f103 0126 	add.w	r1, r3, #38	; 0x26
 80130b2:	79fa      	ldrb	r2, [r7, #7]
 80130b4:	4613      	mov	r3, r2
 80130b6:	005b      	lsls	r3, r3, #1
 80130b8:	4413      	add	r3, r2
 80130ba:	00db      	lsls	r3, r3, #3
 80130bc:	3308      	adds	r3, #8
 80130be:	4a08      	ldr	r2, [pc, #32]	; (80130e0 <etharp_output_to_arp_index+0x124>)
 80130c0:	4413      	add	r3, r2
 80130c2:	3304      	adds	r3, #4
 80130c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80130c8:	9200      	str	r2, [sp, #0]
 80130ca:	460a      	mov	r2, r1
 80130cc:	68b9      	ldr	r1, [r7, #8]
 80130ce:	68f8      	ldr	r0, [r7, #12]
 80130d0:	f001 fe3a 	bl	8014d48 <ethernet_output>
 80130d4:	4603      	mov	r3, r0
}
 80130d6:	4618      	mov	r0, r3
 80130d8:	3710      	adds	r7, #16
 80130da:	46bd      	mov	sp, r7
 80130dc:	bd80      	pop	{r7, pc}
 80130de:	bf00      	nop
 80130e0:	20004b0c 	.word	0x20004b0c
 80130e4:	08019208 	.word	0x08019208
 80130e8:	08019378 	.word	0x08019378
 80130ec:	08019280 	.word	0x08019280

080130f0 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80130f0:	b580      	push	{r7, lr}
 80130f2:	b08a      	sub	sp, #40	; 0x28
 80130f4:	af02      	add	r7, sp, #8
 80130f6:	60f8      	str	r0, [r7, #12]
 80130f8:	60b9      	str	r1, [r7, #8]
 80130fa:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80130fc:	687b      	ldr	r3, [r7, #4]
 80130fe:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8013100:	68fb      	ldr	r3, [r7, #12]
 8013102:	2b00      	cmp	r3, #0
 8013104:	d106      	bne.n	8013114 <etharp_output+0x24>
 8013106:	4b73      	ldr	r3, [pc, #460]	; (80132d4 <etharp_output+0x1e4>)
 8013108:	f240 321e 	movw	r2, #798	; 0x31e
 801310c:	4972      	ldr	r1, [pc, #456]	; (80132d8 <etharp_output+0x1e8>)
 801310e:	4873      	ldr	r0, [pc, #460]	; (80132dc <etharp_output+0x1ec>)
 8013110:	f002 f9b4 	bl	801547c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8013114:	68bb      	ldr	r3, [r7, #8]
 8013116:	2b00      	cmp	r3, #0
 8013118:	d106      	bne.n	8013128 <etharp_output+0x38>
 801311a:	4b6e      	ldr	r3, [pc, #440]	; (80132d4 <etharp_output+0x1e4>)
 801311c:	f240 321f 	movw	r2, #799	; 0x31f
 8013120:	496f      	ldr	r1, [pc, #444]	; (80132e0 <etharp_output+0x1f0>)
 8013122:	486e      	ldr	r0, [pc, #440]	; (80132dc <etharp_output+0x1ec>)
 8013124:	f002 f9aa 	bl	801547c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8013128:	687b      	ldr	r3, [r7, #4]
 801312a:	2b00      	cmp	r3, #0
 801312c:	d106      	bne.n	801313c <etharp_output+0x4c>
 801312e:	4b69      	ldr	r3, [pc, #420]	; (80132d4 <etharp_output+0x1e4>)
 8013130:	f44f 7248 	mov.w	r2, #800	; 0x320
 8013134:	496b      	ldr	r1, [pc, #428]	; (80132e4 <etharp_output+0x1f4>)
 8013136:	4869      	ldr	r0, [pc, #420]	; (80132dc <etharp_output+0x1ec>)
 8013138:	f002 f9a0 	bl	801547c <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801313c:	687b      	ldr	r3, [r7, #4]
 801313e:	681b      	ldr	r3, [r3, #0]
 8013140:	68f9      	ldr	r1, [r7, #12]
 8013142:	4618      	mov	r0, r3
 8013144:	f000 fef8 	bl	8013f38 <ip4_addr_isbroadcast_u32>
 8013148:	4603      	mov	r3, r0
 801314a:	2b00      	cmp	r3, #0
 801314c:	d002      	beq.n	8013154 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801314e:	4b66      	ldr	r3, [pc, #408]	; (80132e8 <etharp_output+0x1f8>)
 8013150:	61fb      	str	r3, [r7, #28]
 8013152:	e0af      	b.n	80132b4 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8013154:	687b      	ldr	r3, [r7, #4]
 8013156:	681b      	ldr	r3, [r3, #0]
 8013158:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801315c:	2be0      	cmp	r3, #224	; 0xe0
 801315e:	d118      	bne.n	8013192 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8013160:	2301      	movs	r3, #1
 8013162:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8013164:	2300      	movs	r3, #0
 8013166:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8013168:	235e      	movs	r3, #94	; 0x5e
 801316a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801316c:	687b      	ldr	r3, [r7, #4]
 801316e:	3301      	adds	r3, #1
 8013170:	781b      	ldrb	r3, [r3, #0]
 8013172:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013176:	b2db      	uxtb	r3, r3
 8013178:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801317a:	687b      	ldr	r3, [r7, #4]
 801317c:	3302      	adds	r3, #2
 801317e:	781b      	ldrb	r3, [r3, #0]
 8013180:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8013182:	687b      	ldr	r3, [r7, #4]
 8013184:	3303      	adds	r3, #3
 8013186:	781b      	ldrb	r3, [r3, #0]
 8013188:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801318a:	f107 0310 	add.w	r3, r7, #16
 801318e:	61fb      	str	r3, [r7, #28]
 8013190:	e090      	b.n	80132b4 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8013192:	687b      	ldr	r3, [r7, #4]
 8013194:	681a      	ldr	r2, [r3, #0]
 8013196:	68fb      	ldr	r3, [r7, #12]
 8013198:	3304      	adds	r3, #4
 801319a:	681b      	ldr	r3, [r3, #0]
 801319c:	405a      	eors	r2, r3
 801319e:	68fb      	ldr	r3, [r7, #12]
 80131a0:	3308      	adds	r3, #8
 80131a2:	681b      	ldr	r3, [r3, #0]
 80131a4:	4013      	ands	r3, r2
 80131a6:	2b00      	cmp	r3, #0
 80131a8:	d012      	beq.n	80131d0 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80131aa:	687b      	ldr	r3, [r7, #4]
 80131ac:	681b      	ldr	r3, [r3, #0]
 80131ae:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80131b0:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 80131b4:	4293      	cmp	r3, r2
 80131b6:	d00b      	beq.n	80131d0 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80131b8:	68fb      	ldr	r3, [r7, #12]
 80131ba:	330c      	adds	r3, #12
 80131bc:	681b      	ldr	r3, [r3, #0]
 80131be:	2b00      	cmp	r3, #0
 80131c0:	d003      	beq.n	80131ca <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80131c2:	68fb      	ldr	r3, [r7, #12]
 80131c4:	330c      	adds	r3, #12
 80131c6:	61bb      	str	r3, [r7, #24]
 80131c8:	e002      	b.n	80131d0 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80131ca:	f06f 0303 	mvn.w	r3, #3
 80131ce:	e07d      	b.n	80132cc <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80131d0:	4b46      	ldr	r3, [pc, #280]	; (80132ec <etharp_output+0x1fc>)
 80131d2:	781b      	ldrb	r3, [r3, #0]
 80131d4:	4619      	mov	r1, r3
 80131d6:	4a46      	ldr	r2, [pc, #280]	; (80132f0 <etharp_output+0x200>)
 80131d8:	460b      	mov	r3, r1
 80131da:	005b      	lsls	r3, r3, #1
 80131dc:	440b      	add	r3, r1
 80131de:	00db      	lsls	r3, r3, #3
 80131e0:	4413      	add	r3, r2
 80131e2:	3314      	adds	r3, #20
 80131e4:	781b      	ldrb	r3, [r3, #0]
 80131e6:	2b01      	cmp	r3, #1
 80131e8:	d925      	bls.n	8013236 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80131ea:	4b40      	ldr	r3, [pc, #256]	; (80132ec <etharp_output+0x1fc>)
 80131ec:	781b      	ldrb	r3, [r3, #0]
 80131ee:	4619      	mov	r1, r3
 80131f0:	4a3f      	ldr	r2, [pc, #252]	; (80132f0 <etharp_output+0x200>)
 80131f2:	460b      	mov	r3, r1
 80131f4:	005b      	lsls	r3, r3, #1
 80131f6:	440b      	add	r3, r1
 80131f8:	00db      	lsls	r3, r3, #3
 80131fa:	4413      	add	r3, r2
 80131fc:	3308      	adds	r3, #8
 80131fe:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8013200:	68fa      	ldr	r2, [r7, #12]
 8013202:	429a      	cmp	r2, r3
 8013204:	d117      	bne.n	8013236 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8013206:	69bb      	ldr	r3, [r7, #24]
 8013208:	681a      	ldr	r2, [r3, #0]
 801320a:	4b38      	ldr	r3, [pc, #224]	; (80132ec <etharp_output+0x1fc>)
 801320c:	781b      	ldrb	r3, [r3, #0]
 801320e:	4618      	mov	r0, r3
 8013210:	4937      	ldr	r1, [pc, #220]	; (80132f0 <etharp_output+0x200>)
 8013212:	4603      	mov	r3, r0
 8013214:	005b      	lsls	r3, r3, #1
 8013216:	4403      	add	r3, r0
 8013218:	00db      	lsls	r3, r3, #3
 801321a:	440b      	add	r3, r1
 801321c:	3304      	adds	r3, #4
 801321e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8013220:	429a      	cmp	r2, r3
 8013222:	d108      	bne.n	8013236 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8013224:	4b31      	ldr	r3, [pc, #196]	; (80132ec <etharp_output+0x1fc>)
 8013226:	781b      	ldrb	r3, [r3, #0]
 8013228:	461a      	mov	r2, r3
 801322a:	68b9      	ldr	r1, [r7, #8]
 801322c:	68f8      	ldr	r0, [r7, #12]
 801322e:	f7ff fec5 	bl	8012fbc <etharp_output_to_arp_index>
 8013232:	4603      	mov	r3, r0
 8013234:	e04a      	b.n	80132cc <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8013236:	2300      	movs	r3, #0
 8013238:	75fb      	strb	r3, [r7, #23]
 801323a:	e031      	b.n	80132a0 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801323c:	7dfa      	ldrb	r2, [r7, #23]
 801323e:	492c      	ldr	r1, [pc, #176]	; (80132f0 <etharp_output+0x200>)
 8013240:	4613      	mov	r3, r2
 8013242:	005b      	lsls	r3, r3, #1
 8013244:	4413      	add	r3, r2
 8013246:	00db      	lsls	r3, r3, #3
 8013248:	440b      	add	r3, r1
 801324a:	3314      	adds	r3, #20
 801324c:	781b      	ldrb	r3, [r3, #0]
 801324e:	2b01      	cmp	r3, #1
 8013250:	d923      	bls.n	801329a <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8013252:	7dfa      	ldrb	r2, [r7, #23]
 8013254:	4926      	ldr	r1, [pc, #152]	; (80132f0 <etharp_output+0x200>)
 8013256:	4613      	mov	r3, r2
 8013258:	005b      	lsls	r3, r3, #1
 801325a:	4413      	add	r3, r2
 801325c:	00db      	lsls	r3, r3, #3
 801325e:	440b      	add	r3, r1
 8013260:	3308      	adds	r3, #8
 8013262:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8013264:	68fa      	ldr	r2, [r7, #12]
 8013266:	429a      	cmp	r2, r3
 8013268:	d117      	bne.n	801329a <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801326a:	69bb      	ldr	r3, [r7, #24]
 801326c:	6819      	ldr	r1, [r3, #0]
 801326e:	7dfa      	ldrb	r2, [r7, #23]
 8013270:	481f      	ldr	r0, [pc, #124]	; (80132f0 <etharp_output+0x200>)
 8013272:	4613      	mov	r3, r2
 8013274:	005b      	lsls	r3, r3, #1
 8013276:	4413      	add	r3, r2
 8013278:	00db      	lsls	r3, r3, #3
 801327a:	4403      	add	r3, r0
 801327c:	3304      	adds	r3, #4
 801327e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8013280:	4299      	cmp	r1, r3
 8013282:	d10a      	bne.n	801329a <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8013284:	4a19      	ldr	r2, [pc, #100]	; (80132ec <etharp_output+0x1fc>)
 8013286:	7dfb      	ldrb	r3, [r7, #23]
 8013288:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801328a:	7dfb      	ldrb	r3, [r7, #23]
 801328c:	461a      	mov	r2, r3
 801328e:	68b9      	ldr	r1, [r7, #8]
 8013290:	68f8      	ldr	r0, [r7, #12]
 8013292:	f7ff fe93 	bl	8012fbc <etharp_output_to_arp_index>
 8013296:	4603      	mov	r3, r0
 8013298:	e018      	b.n	80132cc <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801329a:	7dfb      	ldrb	r3, [r7, #23]
 801329c:	3301      	adds	r3, #1
 801329e:	75fb      	strb	r3, [r7, #23]
 80132a0:	7dfb      	ldrb	r3, [r7, #23]
 80132a2:	2b09      	cmp	r3, #9
 80132a4:	d9ca      	bls.n	801323c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 80132a6:	68ba      	ldr	r2, [r7, #8]
 80132a8:	69b9      	ldr	r1, [r7, #24]
 80132aa:	68f8      	ldr	r0, [r7, #12]
 80132ac:	f000 f822 	bl	80132f4 <etharp_query>
 80132b0:	4603      	mov	r3, r0
 80132b2:	e00b      	b.n	80132cc <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80132b4:	68fb      	ldr	r3, [r7, #12]
 80132b6:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80132ba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80132be:	9300      	str	r3, [sp, #0]
 80132c0:	69fb      	ldr	r3, [r7, #28]
 80132c2:	68b9      	ldr	r1, [r7, #8]
 80132c4:	68f8      	ldr	r0, [r7, #12]
 80132c6:	f001 fd3f 	bl	8014d48 <ethernet_output>
 80132ca:	4603      	mov	r3, r0
}
 80132cc:	4618      	mov	r0, r3
 80132ce:	3720      	adds	r7, #32
 80132d0:	46bd      	mov	sp, r7
 80132d2:	bd80      	pop	{r7, pc}
 80132d4:	08019208 	.word	0x08019208
 80132d8:	08019358 	.word	0x08019358
 80132dc:	08019280 	.word	0x08019280
 80132e0:	080193a8 	.word	0x080193a8
 80132e4:	08019348 	.word	0x08019348
 80132e8:	08019c44 	.word	0x08019c44
 80132ec:	20004bfc 	.word	0x20004bfc
 80132f0:	20004b0c 	.word	0x20004b0c

080132f4 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80132f4:	b580      	push	{r7, lr}
 80132f6:	b08c      	sub	sp, #48	; 0x30
 80132f8:	af02      	add	r7, sp, #8
 80132fa:	60f8      	str	r0, [r7, #12]
 80132fc:	60b9      	str	r1, [r7, #8]
 80132fe:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8013300:	68fb      	ldr	r3, [r7, #12]
 8013302:	3326      	adds	r3, #38	; 0x26
 8013304:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8013306:	23ff      	movs	r3, #255	; 0xff
 8013308:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 801330c:	2300      	movs	r3, #0
 801330e:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8013310:	68bb      	ldr	r3, [r7, #8]
 8013312:	681b      	ldr	r3, [r3, #0]
 8013314:	68f9      	ldr	r1, [r7, #12]
 8013316:	4618      	mov	r0, r3
 8013318:	f000 fe0e 	bl	8013f38 <ip4_addr_isbroadcast_u32>
 801331c:	4603      	mov	r3, r0
 801331e:	2b00      	cmp	r3, #0
 8013320:	d10c      	bne.n	801333c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8013322:	68bb      	ldr	r3, [r7, #8]
 8013324:	681b      	ldr	r3, [r3, #0]
 8013326:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801332a:	2be0      	cmp	r3, #224	; 0xe0
 801332c:	d006      	beq.n	801333c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801332e:	68bb      	ldr	r3, [r7, #8]
 8013330:	2b00      	cmp	r3, #0
 8013332:	d003      	beq.n	801333c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8013334:	68bb      	ldr	r3, [r7, #8]
 8013336:	681b      	ldr	r3, [r3, #0]
 8013338:	2b00      	cmp	r3, #0
 801333a:	d102      	bne.n	8013342 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801333c:	f06f 030f 	mvn.w	r3, #15
 8013340:	e101      	b.n	8013546 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8013342:	68fa      	ldr	r2, [r7, #12]
 8013344:	2101      	movs	r1, #1
 8013346:	68b8      	ldr	r0, [r7, #8]
 8013348:	f7ff fb60 	bl	8012a0c <etharp_find_entry>
 801334c:	4603      	mov	r3, r0
 801334e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8013350:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8013354:	2b00      	cmp	r3, #0
 8013356:	da02      	bge.n	801335e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8013358:	8a7b      	ldrh	r3, [r7, #18]
 801335a:	b25b      	sxtb	r3, r3
 801335c:	e0f3      	b.n	8013546 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801335e:	8a7b      	ldrh	r3, [r7, #18]
 8013360:	2b7e      	cmp	r3, #126	; 0x7e
 8013362:	d906      	bls.n	8013372 <etharp_query+0x7e>
 8013364:	4b7a      	ldr	r3, [pc, #488]	; (8013550 <etharp_query+0x25c>)
 8013366:	f240 32c1 	movw	r2, #961	; 0x3c1
 801336a:	497a      	ldr	r1, [pc, #488]	; (8013554 <etharp_query+0x260>)
 801336c:	487a      	ldr	r0, [pc, #488]	; (8013558 <etharp_query+0x264>)
 801336e:	f002 f885 	bl	801547c <iprintf>
  i = (netif_addr_idx_t)i_err;
 8013372:	8a7b      	ldrh	r3, [r7, #18]
 8013374:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8013376:	7c7a      	ldrb	r2, [r7, #17]
 8013378:	4978      	ldr	r1, [pc, #480]	; (801355c <etharp_query+0x268>)
 801337a:	4613      	mov	r3, r2
 801337c:	005b      	lsls	r3, r3, #1
 801337e:	4413      	add	r3, r2
 8013380:	00db      	lsls	r3, r3, #3
 8013382:	440b      	add	r3, r1
 8013384:	3314      	adds	r3, #20
 8013386:	781b      	ldrb	r3, [r3, #0]
 8013388:	2b00      	cmp	r3, #0
 801338a:	d115      	bne.n	80133b8 <etharp_query+0xc4>
    is_new_entry = 1;
 801338c:	2301      	movs	r3, #1
 801338e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8013390:	7c7a      	ldrb	r2, [r7, #17]
 8013392:	4972      	ldr	r1, [pc, #456]	; (801355c <etharp_query+0x268>)
 8013394:	4613      	mov	r3, r2
 8013396:	005b      	lsls	r3, r3, #1
 8013398:	4413      	add	r3, r2
 801339a:	00db      	lsls	r3, r3, #3
 801339c:	440b      	add	r3, r1
 801339e:	3314      	adds	r3, #20
 80133a0:	2201      	movs	r2, #1
 80133a2:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80133a4:	7c7a      	ldrb	r2, [r7, #17]
 80133a6:	496d      	ldr	r1, [pc, #436]	; (801355c <etharp_query+0x268>)
 80133a8:	4613      	mov	r3, r2
 80133aa:	005b      	lsls	r3, r3, #1
 80133ac:	4413      	add	r3, r2
 80133ae:	00db      	lsls	r3, r3, #3
 80133b0:	440b      	add	r3, r1
 80133b2:	3308      	adds	r3, #8
 80133b4:	68fa      	ldr	r2, [r7, #12]
 80133b6:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80133b8:	7c7a      	ldrb	r2, [r7, #17]
 80133ba:	4968      	ldr	r1, [pc, #416]	; (801355c <etharp_query+0x268>)
 80133bc:	4613      	mov	r3, r2
 80133be:	005b      	lsls	r3, r3, #1
 80133c0:	4413      	add	r3, r2
 80133c2:	00db      	lsls	r3, r3, #3
 80133c4:	440b      	add	r3, r1
 80133c6:	3314      	adds	r3, #20
 80133c8:	781b      	ldrb	r3, [r3, #0]
 80133ca:	2b01      	cmp	r3, #1
 80133cc:	d011      	beq.n	80133f2 <etharp_query+0xfe>
 80133ce:	7c7a      	ldrb	r2, [r7, #17]
 80133d0:	4962      	ldr	r1, [pc, #392]	; (801355c <etharp_query+0x268>)
 80133d2:	4613      	mov	r3, r2
 80133d4:	005b      	lsls	r3, r3, #1
 80133d6:	4413      	add	r3, r2
 80133d8:	00db      	lsls	r3, r3, #3
 80133da:	440b      	add	r3, r1
 80133dc:	3314      	adds	r3, #20
 80133de:	781b      	ldrb	r3, [r3, #0]
 80133e0:	2b01      	cmp	r3, #1
 80133e2:	d806      	bhi.n	80133f2 <etharp_query+0xfe>
 80133e4:	4b5a      	ldr	r3, [pc, #360]	; (8013550 <etharp_query+0x25c>)
 80133e6:	f240 32cd 	movw	r2, #973	; 0x3cd
 80133ea:	495d      	ldr	r1, [pc, #372]	; (8013560 <etharp_query+0x26c>)
 80133ec:	485a      	ldr	r0, [pc, #360]	; (8013558 <etharp_query+0x264>)
 80133ee:	f002 f845 	bl	801547c <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80133f2:	6a3b      	ldr	r3, [r7, #32]
 80133f4:	2b00      	cmp	r3, #0
 80133f6:	d102      	bne.n	80133fe <etharp_query+0x10a>
 80133f8:	687b      	ldr	r3, [r7, #4]
 80133fa:	2b00      	cmp	r3, #0
 80133fc:	d10c      	bne.n	8013418 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80133fe:	68b9      	ldr	r1, [r7, #8]
 8013400:	68f8      	ldr	r0, [r7, #12]
 8013402:	f000 f963 	bl	80136cc <etharp_request>
 8013406:	4603      	mov	r3, r0
 8013408:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801340c:	687b      	ldr	r3, [r7, #4]
 801340e:	2b00      	cmp	r3, #0
 8013410:	d102      	bne.n	8013418 <etharp_query+0x124>
      return result;
 8013412:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8013416:	e096      	b.n	8013546 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8013418:	687b      	ldr	r3, [r7, #4]
 801341a:	2b00      	cmp	r3, #0
 801341c:	d106      	bne.n	801342c <etharp_query+0x138>
 801341e:	4b4c      	ldr	r3, [pc, #304]	; (8013550 <etharp_query+0x25c>)
 8013420:	f240 32e1 	movw	r2, #993	; 0x3e1
 8013424:	494f      	ldr	r1, [pc, #316]	; (8013564 <etharp_query+0x270>)
 8013426:	484c      	ldr	r0, [pc, #304]	; (8013558 <etharp_query+0x264>)
 8013428:	f002 f828 	bl	801547c <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801342c:	7c7a      	ldrb	r2, [r7, #17]
 801342e:	494b      	ldr	r1, [pc, #300]	; (801355c <etharp_query+0x268>)
 8013430:	4613      	mov	r3, r2
 8013432:	005b      	lsls	r3, r3, #1
 8013434:	4413      	add	r3, r2
 8013436:	00db      	lsls	r3, r3, #3
 8013438:	440b      	add	r3, r1
 801343a:	3314      	adds	r3, #20
 801343c:	781b      	ldrb	r3, [r3, #0]
 801343e:	2b01      	cmp	r3, #1
 8013440:	d917      	bls.n	8013472 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8013442:	4a49      	ldr	r2, [pc, #292]	; (8013568 <etharp_query+0x274>)
 8013444:	7c7b      	ldrb	r3, [r7, #17]
 8013446:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8013448:	7c7a      	ldrb	r2, [r7, #17]
 801344a:	4613      	mov	r3, r2
 801344c:	005b      	lsls	r3, r3, #1
 801344e:	4413      	add	r3, r2
 8013450:	00db      	lsls	r3, r3, #3
 8013452:	3308      	adds	r3, #8
 8013454:	4a41      	ldr	r2, [pc, #260]	; (801355c <etharp_query+0x268>)
 8013456:	4413      	add	r3, r2
 8013458:	3304      	adds	r3, #4
 801345a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801345e:	9200      	str	r2, [sp, #0]
 8013460:	697a      	ldr	r2, [r7, #20]
 8013462:	6879      	ldr	r1, [r7, #4]
 8013464:	68f8      	ldr	r0, [r7, #12]
 8013466:	f001 fc6f 	bl	8014d48 <ethernet_output>
 801346a:	4603      	mov	r3, r0
 801346c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013470:	e067      	b.n	8013542 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8013472:	7c7a      	ldrb	r2, [r7, #17]
 8013474:	4939      	ldr	r1, [pc, #228]	; (801355c <etharp_query+0x268>)
 8013476:	4613      	mov	r3, r2
 8013478:	005b      	lsls	r3, r3, #1
 801347a:	4413      	add	r3, r2
 801347c:	00db      	lsls	r3, r3, #3
 801347e:	440b      	add	r3, r1
 8013480:	3314      	adds	r3, #20
 8013482:	781b      	ldrb	r3, [r3, #0]
 8013484:	2b01      	cmp	r3, #1
 8013486:	d15c      	bne.n	8013542 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8013488:	2300      	movs	r3, #0
 801348a:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801348c:	687b      	ldr	r3, [r7, #4]
 801348e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8013490:	e01c      	b.n	80134cc <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8013492:	69fb      	ldr	r3, [r7, #28]
 8013494:	895a      	ldrh	r2, [r3, #10]
 8013496:	69fb      	ldr	r3, [r7, #28]
 8013498:	891b      	ldrh	r3, [r3, #8]
 801349a:	429a      	cmp	r2, r3
 801349c:	d10a      	bne.n	80134b4 <etharp_query+0x1c0>
 801349e:	69fb      	ldr	r3, [r7, #28]
 80134a0:	681b      	ldr	r3, [r3, #0]
 80134a2:	2b00      	cmp	r3, #0
 80134a4:	d006      	beq.n	80134b4 <etharp_query+0x1c0>
 80134a6:	4b2a      	ldr	r3, [pc, #168]	; (8013550 <etharp_query+0x25c>)
 80134a8:	f240 32f1 	movw	r2, #1009	; 0x3f1
 80134ac:	492f      	ldr	r1, [pc, #188]	; (801356c <etharp_query+0x278>)
 80134ae:	482a      	ldr	r0, [pc, #168]	; (8013558 <etharp_query+0x264>)
 80134b0:	f001 ffe4 	bl	801547c <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 80134b4:	69fb      	ldr	r3, [r7, #28]
 80134b6:	7b1b      	ldrb	r3, [r3, #12]
 80134b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80134bc:	2b00      	cmp	r3, #0
 80134be:	d002      	beq.n	80134c6 <etharp_query+0x1d2>
        copy_needed = 1;
 80134c0:	2301      	movs	r3, #1
 80134c2:	61bb      	str	r3, [r7, #24]
        break;
 80134c4:	e005      	b.n	80134d2 <etharp_query+0x1de>
      }
      p = p->next;
 80134c6:	69fb      	ldr	r3, [r7, #28]
 80134c8:	681b      	ldr	r3, [r3, #0]
 80134ca:	61fb      	str	r3, [r7, #28]
    while (p) {
 80134cc:	69fb      	ldr	r3, [r7, #28]
 80134ce:	2b00      	cmp	r3, #0
 80134d0:	d1df      	bne.n	8013492 <etharp_query+0x19e>
    }
    if (copy_needed) {
 80134d2:	69bb      	ldr	r3, [r7, #24]
 80134d4:	2b00      	cmp	r3, #0
 80134d6:	d007      	beq.n	80134e8 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80134d8:	687a      	ldr	r2, [r7, #4]
 80134da:	f44f 7120 	mov.w	r1, #640	; 0x280
 80134de:	200e      	movs	r0, #14
 80134e0:	f7f8 fc8c 	bl	800bdfc <pbuf_clone>
 80134e4:	61f8      	str	r0, [r7, #28]
 80134e6:	e004      	b.n	80134f2 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80134e8:	687b      	ldr	r3, [r7, #4]
 80134ea:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80134ec:	69f8      	ldr	r0, [r7, #28]
 80134ee:	f7f8 fac3 	bl	800ba78 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80134f2:	69fb      	ldr	r3, [r7, #28]
 80134f4:	2b00      	cmp	r3, #0
 80134f6:	d021      	beq.n	801353c <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80134f8:	7c7a      	ldrb	r2, [r7, #17]
 80134fa:	4918      	ldr	r1, [pc, #96]	; (801355c <etharp_query+0x268>)
 80134fc:	4613      	mov	r3, r2
 80134fe:	005b      	lsls	r3, r3, #1
 8013500:	4413      	add	r3, r2
 8013502:	00db      	lsls	r3, r3, #3
 8013504:	440b      	add	r3, r1
 8013506:	681b      	ldr	r3, [r3, #0]
 8013508:	2b00      	cmp	r3, #0
 801350a:	d00a      	beq.n	8013522 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801350c:	7c7a      	ldrb	r2, [r7, #17]
 801350e:	4913      	ldr	r1, [pc, #76]	; (801355c <etharp_query+0x268>)
 8013510:	4613      	mov	r3, r2
 8013512:	005b      	lsls	r3, r3, #1
 8013514:	4413      	add	r3, r2
 8013516:	00db      	lsls	r3, r3, #3
 8013518:	440b      	add	r3, r1
 801351a:	681b      	ldr	r3, [r3, #0]
 801351c:	4618      	mov	r0, r3
 801351e:	f7f8 fa05 	bl	800b92c <pbuf_free>
      }
      arp_table[i].q = p;
 8013522:	7c7a      	ldrb	r2, [r7, #17]
 8013524:	490d      	ldr	r1, [pc, #52]	; (801355c <etharp_query+0x268>)
 8013526:	4613      	mov	r3, r2
 8013528:	005b      	lsls	r3, r3, #1
 801352a:	4413      	add	r3, r2
 801352c:	00db      	lsls	r3, r3, #3
 801352e:	440b      	add	r3, r1
 8013530:	69fa      	ldr	r2, [r7, #28]
 8013532:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8013534:	2300      	movs	r3, #0
 8013536:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801353a:	e002      	b.n	8013542 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801353c:	23ff      	movs	r3, #255	; 0xff
 801353e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8013542:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8013546:	4618      	mov	r0, r3
 8013548:	3728      	adds	r7, #40	; 0x28
 801354a:	46bd      	mov	sp, r7
 801354c:	bd80      	pop	{r7, pc}
 801354e:	bf00      	nop
 8013550:	08019208 	.word	0x08019208
 8013554:	080193b4 	.word	0x080193b4
 8013558:	08019280 	.word	0x08019280
 801355c:	20004b0c 	.word	0x20004b0c
 8013560:	080193c4 	.word	0x080193c4
 8013564:	080193a8 	.word	0x080193a8
 8013568:	20004bfc 	.word	0x20004bfc
 801356c:	080193ec 	.word	0x080193ec

08013570 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8013570:	b580      	push	{r7, lr}
 8013572:	b08a      	sub	sp, #40	; 0x28
 8013574:	af02      	add	r7, sp, #8
 8013576:	60f8      	str	r0, [r7, #12]
 8013578:	60b9      	str	r1, [r7, #8]
 801357a:	607a      	str	r2, [r7, #4]
 801357c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801357e:	2300      	movs	r3, #0
 8013580:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8013582:	68fb      	ldr	r3, [r7, #12]
 8013584:	2b00      	cmp	r3, #0
 8013586:	d106      	bne.n	8013596 <etharp_raw+0x26>
 8013588:	4b3a      	ldr	r3, [pc, #232]	; (8013674 <etharp_raw+0x104>)
 801358a:	f240 4257 	movw	r2, #1111	; 0x457
 801358e:	493a      	ldr	r1, [pc, #232]	; (8013678 <etharp_raw+0x108>)
 8013590:	483a      	ldr	r0, [pc, #232]	; (801367c <etharp_raw+0x10c>)
 8013592:	f001 ff73 	bl	801547c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8013596:	f44f 7220 	mov.w	r2, #640	; 0x280
 801359a:	211c      	movs	r1, #28
 801359c:	200e      	movs	r0, #14
 801359e:	f7f7 fee1 	bl	800b364 <pbuf_alloc>
 80135a2:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80135a4:	69bb      	ldr	r3, [r7, #24]
 80135a6:	2b00      	cmp	r3, #0
 80135a8:	d102      	bne.n	80135b0 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80135aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80135ae:	e05d      	b.n	801366c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80135b0:	69bb      	ldr	r3, [r7, #24]
 80135b2:	895b      	ldrh	r3, [r3, #10]
 80135b4:	2b1b      	cmp	r3, #27
 80135b6:	d806      	bhi.n	80135c6 <etharp_raw+0x56>
 80135b8:	4b2e      	ldr	r3, [pc, #184]	; (8013674 <etharp_raw+0x104>)
 80135ba:	f240 4262 	movw	r2, #1122	; 0x462
 80135be:	4930      	ldr	r1, [pc, #192]	; (8013680 <etharp_raw+0x110>)
 80135c0:	482e      	ldr	r0, [pc, #184]	; (801367c <etharp_raw+0x10c>)
 80135c2:	f001 ff5b 	bl	801547c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80135c6:	69bb      	ldr	r3, [r7, #24]
 80135c8:	685b      	ldr	r3, [r3, #4]
 80135ca:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80135cc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80135ce:	4618      	mov	r0, r3
 80135d0:	f7f6 fe00 	bl	800a1d4 <lwip_htons>
 80135d4:	4603      	mov	r3, r0
 80135d6:	461a      	mov	r2, r3
 80135d8:	697b      	ldr	r3, [r7, #20]
 80135da:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80135dc:	68fb      	ldr	r3, [r7, #12]
 80135de:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80135e2:	2b06      	cmp	r3, #6
 80135e4:	d006      	beq.n	80135f4 <etharp_raw+0x84>
 80135e6:	4b23      	ldr	r3, [pc, #140]	; (8013674 <etharp_raw+0x104>)
 80135e8:	f240 4269 	movw	r2, #1129	; 0x469
 80135ec:	4925      	ldr	r1, [pc, #148]	; (8013684 <etharp_raw+0x114>)
 80135ee:	4823      	ldr	r0, [pc, #140]	; (801367c <etharp_raw+0x10c>)
 80135f0:	f001 ff44 	bl	801547c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80135f4:	697b      	ldr	r3, [r7, #20]
 80135f6:	3308      	adds	r3, #8
 80135f8:	2206      	movs	r2, #6
 80135fa:	6839      	ldr	r1, [r7, #0]
 80135fc:	4618      	mov	r0, r3
 80135fe:	f001 fecc 	bl	801539a <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8013602:	697b      	ldr	r3, [r7, #20]
 8013604:	3312      	adds	r3, #18
 8013606:	2206      	movs	r2, #6
 8013608:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801360a:	4618      	mov	r0, r3
 801360c:	f001 fec5 	bl	801539a <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8013610:	697b      	ldr	r3, [r7, #20]
 8013612:	330e      	adds	r3, #14
 8013614:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013616:	6812      	ldr	r2, [r2, #0]
 8013618:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801361a:	697b      	ldr	r3, [r7, #20]
 801361c:	3318      	adds	r3, #24
 801361e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013620:	6812      	ldr	r2, [r2, #0]
 8013622:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8013624:	697b      	ldr	r3, [r7, #20]
 8013626:	2200      	movs	r2, #0
 8013628:	701a      	strb	r2, [r3, #0]
 801362a:	2200      	movs	r2, #0
 801362c:	f042 0201 	orr.w	r2, r2, #1
 8013630:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8013632:	697b      	ldr	r3, [r7, #20]
 8013634:	2200      	movs	r2, #0
 8013636:	f042 0208 	orr.w	r2, r2, #8
 801363a:	709a      	strb	r2, [r3, #2]
 801363c:	2200      	movs	r2, #0
 801363e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8013640:	697b      	ldr	r3, [r7, #20]
 8013642:	2206      	movs	r2, #6
 8013644:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8013646:	697b      	ldr	r3, [r7, #20]
 8013648:	2204      	movs	r2, #4
 801364a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801364c:	f640 0306 	movw	r3, #2054	; 0x806
 8013650:	9300      	str	r3, [sp, #0]
 8013652:	687b      	ldr	r3, [r7, #4]
 8013654:	68ba      	ldr	r2, [r7, #8]
 8013656:	69b9      	ldr	r1, [r7, #24]
 8013658:	68f8      	ldr	r0, [r7, #12]
 801365a:	f001 fb75 	bl	8014d48 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801365e:	69b8      	ldr	r0, [r7, #24]
 8013660:	f7f8 f964 	bl	800b92c <pbuf_free>
  p = NULL;
 8013664:	2300      	movs	r3, #0
 8013666:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8013668:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801366c:	4618      	mov	r0, r3
 801366e:	3720      	adds	r7, #32
 8013670:	46bd      	mov	sp, r7
 8013672:	bd80      	pop	{r7, pc}
 8013674:	08019208 	.word	0x08019208
 8013678:	08019358 	.word	0x08019358
 801367c:	08019280 	.word	0x08019280
 8013680:	08019408 	.word	0x08019408
 8013684:	0801943c 	.word	0x0801943c

08013688 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8013688:	b580      	push	{r7, lr}
 801368a:	b088      	sub	sp, #32
 801368c:	af04      	add	r7, sp, #16
 801368e:	60f8      	str	r0, [r7, #12]
 8013690:	60b9      	str	r1, [r7, #8]
 8013692:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8013694:	68fb      	ldr	r3, [r7, #12]
 8013696:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801369a:	68fb      	ldr	r3, [r7, #12]
 801369c:	f103 0026 	add.w	r0, r3, #38	; 0x26
 80136a0:	68fb      	ldr	r3, [r7, #12]
 80136a2:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80136a4:	2201      	movs	r2, #1
 80136a6:	9203      	str	r2, [sp, #12]
 80136a8:	68ba      	ldr	r2, [r7, #8]
 80136aa:	9202      	str	r2, [sp, #8]
 80136ac:	4a06      	ldr	r2, [pc, #24]	; (80136c8 <etharp_request_dst+0x40>)
 80136ae:	9201      	str	r2, [sp, #4]
 80136b0:	9300      	str	r3, [sp, #0]
 80136b2:	4603      	mov	r3, r0
 80136b4:	687a      	ldr	r2, [r7, #4]
 80136b6:	68f8      	ldr	r0, [r7, #12]
 80136b8:	f7ff ff5a 	bl	8013570 <etharp_raw>
 80136bc:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80136be:	4618      	mov	r0, r3
 80136c0:	3710      	adds	r7, #16
 80136c2:	46bd      	mov	sp, r7
 80136c4:	bd80      	pop	{r7, pc}
 80136c6:	bf00      	nop
 80136c8:	08019c4c 	.word	0x08019c4c

080136cc <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80136cc:	b580      	push	{r7, lr}
 80136ce:	b082      	sub	sp, #8
 80136d0:	af00      	add	r7, sp, #0
 80136d2:	6078      	str	r0, [r7, #4]
 80136d4:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80136d6:	4a05      	ldr	r2, [pc, #20]	; (80136ec <etharp_request+0x20>)
 80136d8:	6839      	ldr	r1, [r7, #0]
 80136da:	6878      	ldr	r0, [r7, #4]
 80136dc:	f7ff ffd4 	bl	8013688 <etharp_request_dst>
 80136e0:	4603      	mov	r3, r0
}
 80136e2:	4618      	mov	r0, r3
 80136e4:	3708      	adds	r7, #8
 80136e6:	46bd      	mov	sp, r7
 80136e8:	bd80      	pop	{r7, pc}
 80136ea:	bf00      	nop
 80136ec:	08019c44 	.word	0x08019c44

080136f0 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80136f0:	b580      	push	{r7, lr}
 80136f2:	b08e      	sub	sp, #56	; 0x38
 80136f4:	af04      	add	r7, sp, #16
 80136f6:	6078      	str	r0, [r7, #4]
 80136f8:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80136fa:	4b79      	ldr	r3, [pc, #484]	; (80138e0 <icmp_input+0x1f0>)
 80136fc:	689b      	ldr	r3, [r3, #8]
 80136fe:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8013700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013702:	781b      	ldrb	r3, [r3, #0]
 8013704:	f003 030f 	and.w	r3, r3, #15
 8013708:	b2db      	uxtb	r3, r3
 801370a:	009b      	lsls	r3, r3, #2
 801370c:	b2db      	uxtb	r3, r3
 801370e:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8013710:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013712:	2b13      	cmp	r3, #19
 8013714:	f240 80cd 	bls.w	80138b2 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8013718:	687b      	ldr	r3, [r7, #4]
 801371a:	895b      	ldrh	r3, [r3, #10]
 801371c:	2b03      	cmp	r3, #3
 801371e:	f240 80ca 	bls.w	80138b6 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8013722:	687b      	ldr	r3, [r7, #4]
 8013724:	685b      	ldr	r3, [r3, #4]
 8013726:	781b      	ldrb	r3, [r3, #0]
 8013728:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801372c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8013730:	2b00      	cmp	r3, #0
 8013732:	f000 80b7 	beq.w	80138a4 <icmp_input+0x1b4>
 8013736:	2b08      	cmp	r3, #8
 8013738:	f040 80b7 	bne.w	80138aa <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801373c:	4b69      	ldr	r3, [pc, #420]	; (80138e4 <icmp_input+0x1f4>)
 801373e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8013740:	4b67      	ldr	r3, [pc, #412]	; (80138e0 <icmp_input+0x1f0>)
 8013742:	695b      	ldr	r3, [r3, #20]
 8013744:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013748:	2be0      	cmp	r3, #224	; 0xe0
 801374a:	f000 80bb 	beq.w	80138c4 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801374e:	4b64      	ldr	r3, [pc, #400]	; (80138e0 <icmp_input+0x1f0>)
 8013750:	695b      	ldr	r3, [r3, #20]
 8013752:	4a63      	ldr	r2, [pc, #396]	; (80138e0 <icmp_input+0x1f0>)
 8013754:	6812      	ldr	r2, [r2, #0]
 8013756:	4611      	mov	r1, r2
 8013758:	4618      	mov	r0, r3
 801375a:	f000 fbed 	bl	8013f38 <ip4_addr_isbroadcast_u32>
 801375e:	4603      	mov	r3, r0
 8013760:	2b00      	cmp	r3, #0
 8013762:	f040 80b1 	bne.w	80138c8 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8013766:	687b      	ldr	r3, [r7, #4]
 8013768:	891b      	ldrh	r3, [r3, #8]
 801376a:	2b07      	cmp	r3, #7
 801376c:	f240 80a5 	bls.w	80138ba <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8013770:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013772:	330e      	adds	r3, #14
 8013774:	4619      	mov	r1, r3
 8013776:	6878      	ldr	r0, [r7, #4]
 8013778:	f7f8 f842 	bl	800b800 <pbuf_add_header>
 801377c:	4603      	mov	r3, r0
 801377e:	2b00      	cmp	r3, #0
 8013780:	d04b      	beq.n	801381a <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8013782:	687b      	ldr	r3, [r7, #4]
 8013784:	891a      	ldrh	r2, [r3, #8]
 8013786:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013788:	4413      	add	r3, r2
 801378a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801378c:	687b      	ldr	r3, [r7, #4]
 801378e:	891b      	ldrh	r3, [r3, #8]
 8013790:	8b7a      	ldrh	r2, [r7, #26]
 8013792:	429a      	cmp	r2, r3
 8013794:	f0c0 809a 	bcc.w	80138cc <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8013798:	8b7b      	ldrh	r3, [r7, #26]
 801379a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801379e:	4619      	mov	r1, r3
 80137a0:	200e      	movs	r0, #14
 80137a2:	f7f7 fddf 	bl	800b364 <pbuf_alloc>
 80137a6:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80137a8:	697b      	ldr	r3, [r7, #20]
 80137aa:	2b00      	cmp	r3, #0
 80137ac:	f000 8090 	beq.w	80138d0 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80137b0:	697b      	ldr	r3, [r7, #20]
 80137b2:	895b      	ldrh	r3, [r3, #10]
 80137b4:	461a      	mov	r2, r3
 80137b6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80137b8:	3308      	adds	r3, #8
 80137ba:	429a      	cmp	r2, r3
 80137bc:	d203      	bcs.n	80137c6 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 80137be:	6978      	ldr	r0, [r7, #20]
 80137c0:	f7f8 f8b4 	bl	800b92c <pbuf_free>
          goto icmperr;
 80137c4:	e085      	b.n	80138d2 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80137c6:	697b      	ldr	r3, [r7, #20]
 80137c8:	685b      	ldr	r3, [r3, #4]
 80137ca:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80137cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80137ce:	4618      	mov	r0, r3
 80137d0:	f001 fde3 	bl	801539a <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80137d4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80137d6:	4619      	mov	r1, r3
 80137d8:	6978      	ldr	r0, [r7, #20]
 80137da:	f7f8 f821 	bl	800b820 <pbuf_remove_header>
 80137de:	4603      	mov	r3, r0
 80137e0:	2b00      	cmp	r3, #0
 80137e2:	d009      	beq.n	80137f8 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80137e4:	4b40      	ldr	r3, [pc, #256]	; (80138e8 <icmp_input+0x1f8>)
 80137e6:	22b6      	movs	r2, #182	; 0xb6
 80137e8:	4940      	ldr	r1, [pc, #256]	; (80138ec <icmp_input+0x1fc>)
 80137ea:	4841      	ldr	r0, [pc, #260]	; (80138f0 <icmp_input+0x200>)
 80137ec:	f001 fe46 	bl	801547c <iprintf>
          pbuf_free(r);
 80137f0:	6978      	ldr	r0, [r7, #20]
 80137f2:	f7f8 f89b 	bl	800b92c <pbuf_free>
          goto icmperr;
 80137f6:	e06c      	b.n	80138d2 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80137f8:	6879      	ldr	r1, [r7, #4]
 80137fa:	6978      	ldr	r0, [r7, #20]
 80137fc:	f7f8 f9ba 	bl	800bb74 <pbuf_copy>
 8013800:	4603      	mov	r3, r0
 8013802:	2b00      	cmp	r3, #0
 8013804:	d003      	beq.n	801380e <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8013806:	6978      	ldr	r0, [r7, #20]
 8013808:	f7f8 f890 	bl	800b92c <pbuf_free>
          goto icmperr;
 801380c:	e061      	b.n	80138d2 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801380e:	6878      	ldr	r0, [r7, #4]
 8013810:	f7f8 f88c 	bl	800b92c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8013814:	697b      	ldr	r3, [r7, #20]
 8013816:	607b      	str	r3, [r7, #4]
 8013818:	e00f      	b.n	801383a <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801381a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801381c:	330e      	adds	r3, #14
 801381e:	4619      	mov	r1, r3
 8013820:	6878      	ldr	r0, [r7, #4]
 8013822:	f7f7 fffd 	bl	800b820 <pbuf_remove_header>
 8013826:	4603      	mov	r3, r0
 8013828:	2b00      	cmp	r3, #0
 801382a:	d006      	beq.n	801383a <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801382c:	4b2e      	ldr	r3, [pc, #184]	; (80138e8 <icmp_input+0x1f8>)
 801382e:	22c7      	movs	r2, #199	; 0xc7
 8013830:	4930      	ldr	r1, [pc, #192]	; (80138f4 <icmp_input+0x204>)
 8013832:	482f      	ldr	r0, [pc, #188]	; (80138f0 <icmp_input+0x200>)
 8013834:	f001 fe22 	bl	801547c <iprintf>
          goto icmperr;
 8013838:	e04b      	b.n	80138d2 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801383a:	687b      	ldr	r3, [r7, #4]
 801383c:	685b      	ldr	r3, [r3, #4]
 801383e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8013840:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013842:	4619      	mov	r1, r3
 8013844:	6878      	ldr	r0, [r7, #4]
 8013846:	f7f7 ffdb 	bl	800b800 <pbuf_add_header>
 801384a:	4603      	mov	r3, r0
 801384c:	2b00      	cmp	r3, #0
 801384e:	d12b      	bne.n	80138a8 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8013850:	687b      	ldr	r3, [r7, #4]
 8013852:	685b      	ldr	r3, [r3, #4]
 8013854:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8013856:	69fb      	ldr	r3, [r7, #28]
 8013858:	681a      	ldr	r2, [r3, #0]
 801385a:	68fb      	ldr	r3, [r7, #12]
 801385c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801385e:	4b20      	ldr	r3, [pc, #128]	; (80138e0 <icmp_input+0x1f0>)
 8013860:	691a      	ldr	r2, [r3, #16]
 8013862:	68fb      	ldr	r3, [r7, #12]
 8013864:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8013866:	693b      	ldr	r3, [r7, #16]
 8013868:	2200      	movs	r2, #0
 801386a:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 801386c:	693b      	ldr	r3, [r7, #16]
 801386e:	2200      	movs	r2, #0
 8013870:	709a      	strb	r2, [r3, #2]
 8013872:	2200      	movs	r2, #0
 8013874:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8013876:	68fb      	ldr	r3, [r7, #12]
 8013878:	22ff      	movs	r2, #255	; 0xff
 801387a:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801387c:	68fb      	ldr	r3, [r7, #12]
 801387e:	2200      	movs	r2, #0
 8013880:	729a      	strb	r2, [r3, #10]
 8013882:	2200      	movs	r2, #0
 8013884:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8013886:	683b      	ldr	r3, [r7, #0]
 8013888:	9302      	str	r3, [sp, #8]
 801388a:	2301      	movs	r3, #1
 801388c:	9301      	str	r3, [sp, #4]
 801388e:	2300      	movs	r3, #0
 8013890:	9300      	str	r3, [sp, #0]
 8013892:	23ff      	movs	r3, #255	; 0xff
 8013894:	2200      	movs	r2, #0
 8013896:	69f9      	ldr	r1, [r7, #28]
 8013898:	6878      	ldr	r0, [r7, #4]
 801389a:	f000 fa75 	bl	8013d88 <ip4_output_if>
 801389e:	4603      	mov	r3, r0
 80138a0:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80138a2:	e001      	b.n	80138a8 <icmp_input+0x1b8>
      break;
 80138a4:	bf00      	nop
 80138a6:	e000      	b.n	80138aa <icmp_input+0x1ba>
      break;
 80138a8:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80138aa:	6878      	ldr	r0, [r7, #4]
 80138ac:	f7f8 f83e 	bl	800b92c <pbuf_free>
  return;
 80138b0:	e013      	b.n	80138da <icmp_input+0x1ea>
    goto lenerr;
 80138b2:	bf00      	nop
 80138b4:	e002      	b.n	80138bc <icmp_input+0x1cc>
    goto lenerr;
 80138b6:	bf00      	nop
 80138b8:	e000      	b.n	80138bc <icmp_input+0x1cc>
        goto lenerr;
 80138ba:	bf00      	nop
lenerr:
  pbuf_free(p);
 80138bc:	6878      	ldr	r0, [r7, #4]
 80138be:	f7f8 f835 	bl	800b92c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80138c2:	e00a      	b.n	80138da <icmp_input+0x1ea>
        goto icmperr;
 80138c4:	bf00      	nop
 80138c6:	e004      	b.n	80138d2 <icmp_input+0x1e2>
        goto icmperr;
 80138c8:	bf00      	nop
 80138ca:	e002      	b.n	80138d2 <icmp_input+0x1e2>
          goto icmperr;
 80138cc:	bf00      	nop
 80138ce:	e000      	b.n	80138d2 <icmp_input+0x1e2>
          goto icmperr;
 80138d0:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80138d2:	6878      	ldr	r0, [r7, #4]
 80138d4:	f7f8 f82a 	bl	800b92c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80138d8:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80138da:	3728      	adds	r7, #40	; 0x28
 80138dc:	46bd      	mov	sp, r7
 80138de:	bd80      	pop	{r7, pc}
 80138e0:	20008690 	.word	0x20008690
 80138e4:	200086a4 	.word	0x200086a4
 80138e8:	08019480 	.word	0x08019480
 80138ec:	080194b8 	.word	0x080194b8
 80138f0:	080194f0 	.word	0x080194f0
 80138f4:	08019518 	.word	0x08019518

080138f8 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80138f8:	b580      	push	{r7, lr}
 80138fa:	b082      	sub	sp, #8
 80138fc:	af00      	add	r7, sp, #0
 80138fe:	6078      	str	r0, [r7, #4]
 8013900:	460b      	mov	r3, r1
 8013902:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8013904:	78fb      	ldrb	r3, [r7, #3]
 8013906:	461a      	mov	r2, r3
 8013908:	2103      	movs	r1, #3
 801390a:	6878      	ldr	r0, [r7, #4]
 801390c:	f000 f814 	bl	8013938 <icmp_send_response>
}
 8013910:	bf00      	nop
 8013912:	3708      	adds	r7, #8
 8013914:	46bd      	mov	sp, r7
 8013916:	bd80      	pop	{r7, pc}

08013918 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8013918:	b580      	push	{r7, lr}
 801391a:	b082      	sub	sp, #8
 801391c:	af00      	add	r7, sp, #0
 801391e:	6078      	str	r0, [r7, #4]
 8013920:	460b      	mov	r3, r1
 8013922:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8013924:	78fb      	ldrb	r3, [r7, #3]
 8013926:	461a      	mov	r2, r3
 8013928:	210b      	movs	r1, #11
 801392a:	6878      	ldr	r0, [r7, #4]
 801392c:	f000 f804 	bl	8013938 <icmp_send_response>
}
 8013930:	bf00      	nop
 8013932:	3708      	adds	r7, #8
 8013934:	46bd      	mov	sp, r7
 8013936:	bd80      	pop	{r7, pc}

08013938 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8013938:	b580      	push	{r7, lr}
 801393a:	b08c      	sub	sp, #48	; 0x30
 801393c:	af04      	add	r7, sp, #16
 801393e:	6078      	str	r0, [r7, #4]
 8013940:	460b      	mov	r3, r1
 8013942:	70fb      	strb	r3, [r7, #3]
 8013944:	4613      	mov	r3, r2
 8013946:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8013948:	f44f 7220 	mov.w	r2, #640	; 0x280
 801394c:	2124      	movs	r1, #36	; 0x24
 801394e:	2022      	movs	r0, #34	; 0x22
 8013950:	f7f7 fd08 	bl	800b364 <pbuf_alloc>
 8013954:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8013956:	69fb      	ldr	r3, [r7, #28]
 8013958:	2b00      	cmp	r3, #0
 801395a:	d04c      	beq.n	80139f6 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801395c:	69fb      	ldr	r3, [r7, #28]
 801395e:	895b      	ldrh	r3, [r3, #10]
 8013960:	2b23      	cmp	r3, #35	; 0x23
 8013962:	d806      	bhi.n	8013972 <icmp_send_response+0x3a>
 8013964:	4b26      	ldr	r3, [pc, #152]	; (8013a00 <icmp_send_response+0xc8>)
 8013966:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801396a:	4926      	ldr	r1, [pc, #152]	; (8013a04 <icmp_send_response+0xcc>)
 801396c:	4826      	ldr	r0, [pc, #152]	; (8013a08 <icmp_send_response+0xd0>)
 801396e:	f001 fd85 	bl	801547c <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8013972:	687b      	ldr	r3, [r7, #4]
 8013974:	685b      	ldr	r3, [r3, #4]
 8013976:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8013978:	69fb      	ldr	r3, [r7, #28]
 801397a:	685b      	ldr	r3, [r3, #4]
 801397c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801397e:	697b      	ldr	r3, [r7, #20]
 8013980:	78fa      	ldrb	r2, [r7, #3]
 8013982:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8013984:	697b      	ldr	r3, [r7, #20]
 8013986:	78ba      	ldrb	r2, [r7, #2]
 8013988:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801398a:	697b      	ldr	r3, [r7, #20]
 801398c:	2200      	movs	r2, #0
 801398e:	711a      	strb	r2, [r3, #4]
 8013990:	2200      	movs	r2, #0
 8013992:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8013994:	697b      	ldr	r3, [r7, #20]
 8013996:	2200      	movs	r2, #0
 8013998:	719a      	strb	r2, [r3, #6]
 801399a:	2200      	movs	r2, #0
 801399c:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801399e:	69fb      	ldr	r3, [r7, #28]
 80139a0:	685b      	ldr	r3, [r3, #4]
 80139a2:	f103 0008 	add.w	r0, r3, #8
 80139a6:	687b      	ldr	r3, [r7, #4]
 80139a8:	685b      	ldr	r3, [r3, #4]
 80139aa:	221c      	movs	r2, #28
 80139ac:	4619      	mov	r1, r3
 80139ae:	f001 fcf4 	bl	801539a <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80139b2:	69bb      	ldr	r3, [r7, #24]
 80139b4:	68db      	ldr	r3, [r3, #12]
 80139b6:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80139b8:	f107 030c 	add.w	r3, r7, #12
 80139bc:	4618      	mov	r0, r3
 80139be:	f000 f825 	bl	8013a0c <ip4_route>
 80139c2:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80139c4:	693b      	ldr	r3, [r7, #16]
 80139c6:	2b00      	cmp	r3, #0
 80139c8:	d011      	beq.n	80139ee <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80139ca:	697b      	ldr	r3, [r7, #20]
 80139cc:	2200      	movs	r2, #0
 80139ce:	709a      	strb	r2, [r3, #2]
 80139d0:	2200      	movs	r2, #0
 80139d2:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80139d4:	f107 020c 	add.w	r2, r7, #12
 80139d8:	693b      	ldr	r3, [r7, #16]
 80139da:	9302      	str	r3, [sp, #8]
 80139dc:	2301      	movs	r3, #1
 80139de:	9301      	str	r3, [sp, #4]
 80139e0:	2300      	movs	r3, #0
 80139e2:	9300      	str	r3, [sp, #0]
 80139e4:	23ff      	movs	r3, #255	; 0xff
 80139e6:	2100      	movs	r1, #0
 80139e8:	69f8      	ldr	r0, [r7, #28]
 80139ea:	f000 f9cd 	bl	8013d88 <ip4_output_if>
  }
  pbuf_free(q);
 80139ee:	69f8      	ldr	r0, [r7, #28]
 80139f0:	f7f7 ff9c 	bl	800b92c <pbuf_free>
 80139f4:	e000      	b.n	80139f8 <icmp_send_response+0xc0>
    return;
 80139f6:	bf00      	nop
}
 80139f8:	3720      	adds	r7, #32
 80139fa:	46bd      	mov	sp, r7
 80139fc:	bd80      	pop	{r7, pc}
 80139fe:	bf00      	nop
 8013a00:	08019480 	.word	0x08019480
 8013a04:	0801954c 	.word	0x0801954c
 8013a08:	080194f0 	.word	0x080194f0

08013a0c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8013a0c:	b480      	push	{r7}
 8013a0e:	b085      	sub	sp, #20
 8013a10:	af00      	add	r7, sp, #0
 8013a12:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8013a14:	4b33      	ldr	r3, [pc, #204]	; (8013ae4 <ip4_route+0xd8>)
 8013a16:	681b      	ldr	r3, [r3, #0]
 8013a18:	60fb      	str	r3, [r7, #12]
 8013a1a:	e036      	b.n	8013a8a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8013a1c:	68fb      	ldr	r3, [r7, #12]
 8013a1e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013a22:	f003 0301 	and.w	r3, r3, #1
 8013a26:	b2db      	uxtb	r3, r3
 8013a28:	2b00      	cmp	r3, #0
 8013a2a:	d02b      	beq.n	8013a84 <ip4_route+0x78>
 8013a2c:	68fb      	ldr	r3, [r7, #12]
 8013a2e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013a32:	089b      	lsrs	r3, r3, #2
 8013a34:	f003 0301 	and.w	r3, r3, #1
 8013a38:	b2db      	uxtb	r3, r3
 8013a3a:	2b00      	cmp	r3, #0
 8013a3c:	d022      	beq.n	8013a84 <ip4_route+0x78>
 8013a3e:	68fb      	ldr	r3, [r7, #12]
 8013a40:	3304      	adds	r3, #4
 8013a42:	681b      	ldr	r3, [r3, #0]
 8013a44:	2b00      	cmp	r3, #0
 8013a46:	d01d      	beq.n	8013a84 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8013a48:	687b      	ldr	r3, [r7, #4]
 8013a4a:	681a      	ldr	r2, [r3, #0]
 8013a4c:	68fb      	ldr	r3, [r7, #12]
 8013a4e:	3304      	adds	r3, #4
 8013a50:	681b      	ldr	r3, [r3, #0]
 8013a52:	405a      	eors	r2, r3
 8013a54:	68fb      	ldr	r3, [r7, #12]
 8013a56:	3308      	adds	r3, #8
 8013a58:	681b      	ldr	r3, [r3, #0]
 8013a5a:	4013      	ands	r3, r2
 8013a5c:	2b00      	cmp	r3, #0
 8013a5e:	d101      	bne.n	8013a64 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8013a60:	68fb      	ldr	r3, [r7, #12]
 8013a62:	e038      	b.n	8013ad6 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8013a64:	68fb      	ldr	r3, [r7, #12]
 8013a66:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013a6a:	f003 0302 	and.w	r3, r3, #2
 8013a6e:	2b00      	cmp	r3, #0
 8013a70:	d108      	bne.n	8013a84 <ip4_route+0x78>
 8013a72:	687b      	ldr	r3, [r7, #4]
 8013a74:	681a      	ldr	r2, [r3, #0]
 8013a76:	68fb      	ldr	r3, [r7, #12]
 8013a78:	330c      	adds	r3, #12
 8013a7a:	681b      	ldr	r3, [r3, #0]
 8013a7c:	429a      	cmp	r2, r3
 8013a7e:	d101      	bne.n	8013a84 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8013a80:	68fb      	ldr	r3, [r7, #12]
 8013a82:	e028      	b.n	8013ad6 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8013a84:	68fb      	ldr	r3, [r7, #12]
 8013a86:	681b      	ldr	r3, [r3, #0]
 8013a88:	60fb      	str	r3, [r7, #12]
 8013a8a:	68fb      	ldr	r3, [r7, #12]
 8013a8c:	2b00      	cmp	r3, #0
 8013a8e:	d1c5      	bne.n	8013a1c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8013a90:	4b15      	ldr	r3, [pc, #84]	; (8013ae8 <ip4_route+0xdc>)
 8013a92:	681b      	ldr	r3, [r3, #0]
 8013a94:	2b00      	cmp	r3, #0
 8013a96:	d01a      	beq.n	8013ace <ip4_route+0xc2>
 8013a98:	4b13      	ldr	r3, [pc, #76]	; (8013ae8 <ip4_route+0xdc>)
 8013a9a:	681b      	ldr	r3, [r3, #0]
 8013a9c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013aa0:	f003 0301 	and.w	r3, r3, #1
 8013aa4:	2b00      	cmp	r3, #0
 8013aa6:	d012      	beq.n	8013ace <ip4_route+0xc2>
 8013aa8:	4b0f      	ldr	r3, [pc, #60]	; (8013ae8 <ip4_route+0xdc>)
 8013aaa:	681b      	ldr	r3, [r3, #0]
 8013aac:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013ab0:	f003 0304 	and.w	r3, r3, #4
 8013ab4:	2b00      	cmp	r3, #0
 8013ab6:	d00a      	beq.n	8013ace <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8013ab8:	4b0b      	ldr	r3, [pc, #44]	; (8013ae8 <ip4_route+0xdc>)
 8013aba:	681b      	ldr	r3, [r3, #0]
 8013abc:	3304      	adds	r3, #4
 8013abe:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8013ac0:	2b00      	cmp	r3, #0
 8013ac2:	d004      	beq.n	8013ace <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8013ac4:	687b      	ldr	r3, [r7, #4]
 8013ac6:	681b      	ldr	r3, [r3, #0]
 8013ac8:	b2db      	uxtb	r3, r3
 8013aca:	2b7f      	cmp	r3, #127	; 0x7f
 8013acc:	d101      	bne.n	8013ad2 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8013ace:	2300      	movs	r3, #0
 8013ad0:	e001      	b.n	8013ad6 <ip4_route+0xca>
  }

  return netif_default;
 8013ad2:	4b05      	ldr	r3, [pc, #20]	; (8013ae8 <ip4_route+0xdc>)
 8013ad4:	681b      	ldr	r3, [r3, #0]
}
 8013ad6:	4618      	mov	r0, r3
 8013ad8:	3714      	adds	r7, #20
 8013ada:	46bd      	mov	sp, r7
 8013adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ae0:	4770      	bx	lr
 8013ae2:	bf00      	nop
 8013ae4:	2000bd94 	.word	0x2000bd94
 8013ae8:	2000bd98 	.word	0x2000bd98

08013aec <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8013aec:	b580      	push	{r7, lr}
 8013aee:	b082      	sub	sp, #8
 8013af0:	af00      	add	r7, sp, #0
 8013af2:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8013af4:	687b      	ldr	r3, [r7, #4]
 8013af6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013afa:	f003 0301 	and.w	r3, r3, #1
 8013afe:	b2db      	uxtb	r3, r3
 8013b00:	2b00      	cmp	r3, #0
 8013b02:	d016      	beq.n	8013b32 <ip4_input_accept+0x46>
 8013b04:	687b      	ldr	r3, [r7, #4]
 8013b06:	3304      	adds	r3, #4
 8013b08:	681b      	ldr	r3, [r3, #0]
 8013b0a:	2b00      	cmp	r3, #0
 8013b0c:	d011      	beq.n	8013b32 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8013b0e:	4b0b      	ldr	r3, [pc, #44]	; (8013b3c <ip4_input_accept+0x50>)
 8013b10:	695a      	ldr	r2, [r3, #20]
 8013b12:	687b      	ldr	r3, [r7, #4]
 8013b14:	3304      	adds	r3, #4
 8013b16:	681b      	ldr	r3, [r3, #0]
 8013b18:	429a      	cmp	r2, r3
 8013b1a:	d008      	beq.n	8013b2e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8013b1c:	4b07      	ldr	r3, [pc, #28]	; (8013b3c <ip4_input_accept+0x50>)
 8013b1e:	695b      	ldr	r3, [r3, #20]
 8013b20:	6879      	ldr	r1, [r7, #4]
 8013b22:	4618      	mov	r0, r3
 8013b24:	f000 fa08 	bl	8013f38 <ip4_addr_isbroadcast_u32>
 8013b28:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8013b2a:	2b00      	cmp	r3, #0
 8013b2c:	d001      	beq.n	8013b32 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8013b2e:	2301      	movs	r3, #1
 8013b30:	e000      	b.n	8013b34 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8013b32:	2300      	movs	r3, #0
}
 8013b34:	4618      	mov	r0, r3
 8013b36:	3708      	adds	r7, #8
 8013b38:	46bd      	mov	sp, r7
 8013b3a:	bd80      	pop	{r7, pc}
 8013b3c:	20008690 	.word	0x20008690

08013b40 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8013b40:	b580      	push	{r7, lr}
 8013b42:	b086      	sub	sp, #24
 8013b44:	af00      	add	r7, sp, #0
 8013b46:	6078      	str	r0, [r7, #4]
 8013b48:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8013b4a:	687b      	ldr	r3, [r7, #4]
 8013b4c:	685b      	ldr	r3, [r3, #4]
 8013b4e:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8013b50:	697b      	ldr	r3, [r7, #20]
 8013b52:	781b      	ldrb	r3, [r3, #0]
 8013b54:	091b      	lsrs	r3, r3, #4
 8013b56:	b2db      	uxtb	r3, r3
 8013b58:	2b04      	cmp	r3, #4
 8013b5a:	d004      	beq.n	8013b66 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8013b5c:	6878      	ldr	r0, [r7, #4]
 8013b5e:	f7f7 fee5 	bl	800b92c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8013b62:	2300      	movs	r3, #0
 8013b64:	e107      	b.n	8013d76 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8013b66:	697b      	ldr	r3, [r7, #20]
 8013b68:	781b      	ldrb	r3, [r3, #0]
 8013b6a:	f003 030f 	and.w	r3, r3, #15
 8013b6e:	b2db      	uxtb	r3, r3
 8013b70:	009b      	lsls	r3, r3, #2
 8013b72:	b2db      	uxtb	r3, r3
 8013b74:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8013b76:	697b      	ldr	r3, [r7, #20]
 8013b78:	885b      	ldrh	r3, [r3, #2]
 8013b7a:	b29b      	uxth	r3, r3
 8013b7c:	4618      	mov	r0, r3
 8013b7e:	f7f6 fb29 	bl	800a1d4 <lwip_htons>
 8013b82:	4603      	mov	r3, r0
 8013b84:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8013b86:	687b      	ldr	r3, [r7, #4]
 8013b88:	891b      	ldrh	r3, [r3, #8]
 8013b8a:	89ba      	ldrh	r2, [r7, #12]
 8013b8c:	429a      	cmp	r2, r3
 8013b8e:	d204      	bcs.n	8013b9a <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8013b90:	89bb      	ldrh	r3, [r7, #12]
 8013b92:	4619      	mov	r1, r3
 8013b94:	6878      	ldr	r0, [r7, #4]
 8013b96:	f7f7 fd43 	bl	800b620 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8013b9a:	687b      	ldr	r3, [r7, #4]
 8013b9c:	895b      	ldrh	r3, [r3, #10]
 8013b9e:	89fa      	ldrh	r2, [r7, #14]
 8013ba0:	429a      	cmp	r2, r3
 8013ba2:	d807      	bhi.n	8013bb4 <ip4_input+0x74>
 8013ba4:	687b      	ldr	r3, [r7, #4]
 8013ba6:	891b      	ldrh	r3, [r3, #8]
 8013ba8:	89ba      	ldrh	r2, [r7, #12]
 8013baa:	429a      	cmp	r2, r3
 8013bac:	d802      	bhi.n	8013bb4 <ip4_input+0x74>
 8013bae:	89fb      	ldrh	r3, [r7, #14]
 8013bb0:	2b13      	cmp	r3, #19
 8013bb2:	d804      	bhi.n	8013bbe <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8013bb4:	6878      	ldr	r0, [r7, #4]
 8013bb6:	f7f7 feb9 	bl	800b92c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8013bba:	2300      	movs	r3, #0
 8013bbc:	e0db      	b.n	8013d76 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8013bbe:	697b      	ldr	r3, [r7, #20]
 8013bc0:	691b      	ldr	r3, [r3, #16]
 8013bc2:	4a6f      	ldr	r2, [pc, #444]	; (8013d80 <ip4_input+0x240>)
 8013bc4:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8013bc6:	697b      	ldr	r3, [r7, #20]
 8013bc8:	68db      	ldr	r3, [r3, #12]
 8013bca:	4a6d      	ldr	r2, [pc, #436]	; (8013d80 <ip4_input+0x240>)
 8013bcc:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8013bce:	4b6c      	ldr	r3, [pc, #432]	; (8013d80 <ip4_input+0x240>)
 8013bd0:	695b      	ldr	r3, [r3, #20]
 8013bd2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013bd6:	2be0      	cmp	r3, #224	; 0xe0
 8013bd8:	d112      	bne.n	8013c00 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8013bda:	683b      	ldr	r3, [r7, #0]
 8013bdc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013be0:	f003 0301 	and.w	r3, r3, #1
 8013be4:	b2db      	uxtb	r3, r3
 8013be6:	2b00      	cmp	r3, #0
 8013be8:	d007      	beq.n	8013bfa <ip4_input+0xba>
 8013bea:	683b      	ldr	r3, [r7, #0]
 8013bec:	3304      	adds	r3, #4
 8013bee:	681b      	ldr	r3, [r3, #0]
 8013bf0:	2b00      	cmp	r3, #0
 8013bf2:	d002      	beq.n	8013bfa <ip4_input+0xba>
      netif = inp;
 8013bf4:	683b      	ldr	r3, [r7, #0]
 8013bf6:	613b      	str	r3, [r7, #16]
 8013bf8:	e02a      	b.n	8013c50 <ip4_input+0x110>
    } else {
      netif = NULL;
 8013bfa:	2300      	movs	r3, #0
 8013bfc:	613b      	str	r3, [r7, #16]
 8013bfe:	e027      	b.n	8013c50 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8013c00:	6838      	ldr	r0, [r7, #0]
 8013c02:	f7ff ff73 	bl	8013aec <ip4_input_accept>
 8013c06:	4603      	mov	r3, r0
 8013c08:	2b00      	cmp	r3, #0
 8013c0a:	d002      	beq.n	8013c12 <ip4_input+0xd2>
      netif = inp;
 8013c0c:	683b      	ldr	r3, [r7, #0]
 8013c0e:	613b      	str	r3, [r7, #16]
 8013c10:	e01e      	b.n	8013c50 <ip4_input+0x110>
    } else {
      netif = NULL;
 8013c12:	2300      	movs	r3, #0
 8013c14:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8013c16:	4b5a      	ldr	r3, [pc, #360]	; (8013d80 <ip4_input+0x240>)
 8013c18:	695b      	ldr	r3, [r3, #20]
 8013c1a:	b2db      	uxtb	r3, r3
 8013c1c:	2b7f      	cmp	r3, #127	; 0x7f
 8013c1e:	d017      	beq.n	8013c50 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8013c20:	4b58      	ldr	r3, [pc, #352]	; (8013d84 <ip4_input+0x244>)
 8013c22:	681b      	ldr	r3, [r3, #0]
 8013c24:	613b      	str	r3, [r7, #16]
 8013c26:	e00e      	b.n	8013c46 <ip4_input+0x106>
          if (netif == inp) {
 8013c28:	693a      	ldr	r2, [r7, #16]
 8013c2a:	683b      	ldr	r3, [r7, #0]
 8013c2c:	429a      	cmp	r2, r3
 8013c2e:	d006      	beq.n	8013c3e <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8013c30:	6938      	ldr	r0, [r7, #16]
 8013c32:	f7ff ff5b 	bl	8013aec <ip4_input_accept>
 8013c36:	4603      	mov	r3, r0
 8013c38:	2b00      	cmp	r3, #0
 8013c3a:	d108      	bne.n	8013c4e <ip4_input+0x10e>
 8013c3c:	e000      	b.n	8013c40 <ip4_input+0x100>
            continue;
 8013c3e:	bf00      	nop
        NETIF_FOREACH(netif) {
 8013c40:	693b      	ldr	r3, [r7, #16]
 8013c42:	681b      	ldr	r3, [r3, #0]
 8013c44:	613b      	str	r3, [r7, #16]
 8013c46:	693b      	ldr	r3, [r7, #16]
 8013c48:	2b00      	cmp	r3, #0
 8013c4a:	d1ed      	bne.n	8013c28 <ip4_input+0xe8>
 8013c4c:	e000      	b.n	8013c50 <ip4_input+0x110>
            break;
 8013c4e:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8013c50:	4b4b      	ldr	r3, [pc, #300]	; (8013d80 <ip4_input+0x240>)
 8013c52:	691b      	ldr	r3, [r3, #16]
 8013c54:	6839      	ldr	r1, [r7, #0]
 8013c56:	4618      	mov	r0, r3
 8013c58:	f000 f96e 	bl	8013f38 <ip4_addr_isbroadcast_u32>
 8013c5c:	4603      	mov	r3, r0
 8013c5e:	2b00      	cmp	r3, #0
 8013c60:	d105      	bne.n	8013c6e <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8013c62:	4b47      	ldr	r3, [pc, #284]	; (8013d80 <ip4_input+0x240>)
 8013c64:	691b      	ldr	r3, [r3, #16]
 8013c66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8013c6a:	2be0      	cmp	r3, #224	; 0xe0
 8013c6c:	d104      	bne.n	8013c78 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8013c6e:	6878      	ldr	r0, [r7, #4]
 8013c70:	f7f7 fe5c 	bl	800b92c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8013c74:	2300      	movs	r3, #0
 8013c76:	e07e      	b.n	8013d76 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8013c78:	693b      	ldr	r3, [r7, #16]
 8013c7a:	2b00      	cmp	r3, #0
 8013c7c:	d104      	bne.n	8013c88 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8013c7e:	6878      	ldr	r0, [r7, #4]
 8013c80:	f7f7 fe54 	bl	800b92c <pbuf_free>
    return ERR_OK;
 8013c84:	2300      	movs	r3, #0
 8013c86:	e076      	b.n	8013d76 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8013c88:	697b      	ldr	r3, [r7, #20]
 8013c8a:	88db      	ldrh	r3, [r3, #6]
 8013c8c:	b29b      	uxth	r3, r3
 8013c8e:	461a      	mov	r2, r3
 8013c90:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8013c94:	4013      	ands	r3, r2
 8013c96:	2b00      	cmp	r3, #0
 8013c98:	d00b      	beq.n	8013cb2 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8013c9a:	6878      	ldr	r0, [r7, #4]
 8013c9c:	f000 fc92 	bl	80145c4 <ip4_reass>
 8013ca0:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8013ca2:	687b      	ldr	r3, [r7, #4]
 8013ca4:	2b00      	cmp	r3, #0
 8013ca6:	d101      	bne.n	8013cac <ip4_input+0x16c>
      return ERR_OK;
 8013ca8:	2300      	movs	r3, #0
 8013caa:	e064      	b.n	8013d76 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8013cac:	687b      	ldr	r3, [r7, #4]
 8013cae:	685b      	ldr	r3, [r3, #4]
 8013cb0:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8013cb2:	4a33      	ldr	r2, [pc, #204]	; (8013d80 <ip4_input+0x240>)
 8013cb4:	693b      	ldr	r3, [r7, #16]
 8013cb6:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8013cb8:	4a31      	ldr	r2, [pc, #196]	; (8013d80 <ip4_input+0x240>)
 8013cba:	683b      	ldr	r3, [r7, #0]
 8013cbc:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8013cbe:	4a30      	ldr	r2, [pc, #192]	; (8013d80 <ip4_input+0x240>)
 8013cc0:	697b      	ldr	r3, [r7, #20]
 8013cc2:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8013cc4:	697b      	ldr	r3, [r7, #20]
 8013cc6:	781b      	ldrb	r3, [r3, #0]
 8013cc8:	f003 030f 	and.w	r3, r3, #15
 8013ccc:	b2db      	uxtb	r3, r3
 8013cce:	009b      	lsls	r3, r3, #2
 8013cd0:	b2db      	uxtb	r3, r3
 8013cd2:	b29a      	uxth	r2, r3
 8013cd4:	4b2a      	ldr	r3, [pc, #168]	; (8013d80 <ip4_input+0x240>)
 8013cd6:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8013cd8:	89fb      	ldrh	r3, [r7, #14]
 8013cda:	4619      	mov	r1, r3
 8013cdc:	6878      	ldr	r0, [r7, #4]
 8013cde:	f7f7 fd9f 	bl	800b820 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8013ce2:	697b      	ldr	r3, [r7, #20]
 8013ce4:	7a5b      	ldrb	r3, [r3, #9]
 8013ce6:	2b11      	cmp	r3, #17
 8013ce8:	d006      	beq.n	8013cf8 <ip4_input+0x1b8>
 8013cea:	2b11      	cmp	r3, #17
 8013cec:	dc13      	bgt.n	8013d16 <ip4_input+0x1d6>
 8013cee:	2b01      	cmp	r3, #1
 8013cf0:	d00c      	beq.n	8013d0c <ip4_input+0x1cc>
 8013cf2:	2b06      	cmp	r3, #6
 8013cf4:	d005      	beq.n	8013d02 <ip4_input+0x1c2>
 8013cf6:	e00e      	b.n	8013d16 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8013cf8:	6839      	ldr	r1, [r7, #0]
 8013cfa:	6878      	ldr	r0, [r7, #4]
 8013cfc:	f7fe fb5a 	bl	80123b4 <udp_input>
        break;
 8013d00:	e026      	b.n	8013d50 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8013d02:	6839      	ldr	r1, [r7, #0]
 8013d04:	6878      	ldr	r0, [r7, #4]
 8013d06:	f7f9 ff17 	bl	800db38 <tcp_input>
        break;
 8013d0a:	e021      	b.n	8013d50 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8013d0c:	6839      	ldr	r1, [r7, #0]
 8013d0e:	6878      	ldr	r0, [r7, #4]
 8013d10:	f7ff fcee 	bl	80136f0 <icmp_input>
        break;
 8013d14:	e01c      	b.n	8013d50 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8013d16:	4b1a      	ldr	r3, [pc, #104]	; (8013d80 <ip4_input+0x240>)
 8013d18:	695b      	ldr	r3, [r3, #20]
 8013d1a:	6939      	ldr	r1, [r7, #16]
 8013d1c:	4618      	mov	r0, r3
 8013d1e:	f000 f90b 	bl	8013f38 <ip4_addr_isbroadcast_u32>
 8013d22:	4603      	mov	r3, r0
 8013d24:	2b00      	cmp	r3, #0
 8013d26:	d10f      	bne.n	8013d48 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8013d28:	4b15      	ldr	r3, [pc, #84]	; (8013d80 <ip4_input+0x240>)
 8013d2a:	695b      	ldr	r3, [r3, #20]
 8013d2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8013d30:	2be0      	cmp	r3, #224	; 0xe0
 8013d32:	d009      	beq.n	8013d48 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8013d34:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8013d38:	4619      	mov	r1, r3
 8013d3a:	6878      	ldr	r0, [r7, #4]
 8013d3c:	f7f7 fde3 	bl	800b906 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8013d40:	2102      	movs	r1, #2
 8013d42:	6878      	ldr	r0, [r7, #4]
 8013d44:	f7ff fdd8 	bl	80138f8 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8013d48:	6878      	ldr	r0, [r7, #4]
 8013d4a:	f7f7 fdef 	bl	800b92c <pbuf_free>
        break;
 8013d4e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8013d50:	4b0b      	ldr	r3, [pc, #44]	; (8013d80 <ip4_input+0x240>)
 8013d52:	2200      	movs	r2, #0
 8013d54:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8013d56:	4b0a      	ldr	r3, [pc, #40]	; (8013d80 <ip4_input+0x240>)
 8013d58:	2200      	movs	r2, #0
 8013d5a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8013d5c:	4b08      	ldr	r3, [pc, #32]	; (8013d80 <ip4_input+0x240>)
 8013d5e:	2200      	movs	r2, #0
 8013d60:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8013d62:	4b07      	ldr	r3, [pc, #28]	; (8013d80 <ip4_input+0x240>)
 8013d64:	2200      	movs	r2, #0
 8013d66:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8013d68:	4b05      	ldr	r3, [pc, #20]	; (8013d80 <ip4_input+0x240>)
 8013d6a:	2200      	movs	r2, #0
 8013d6c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8013d6e:	4b04      	ldr	r3, [pc, #16]	; (8013d80 <ip4_input+0x240>)
 8013d70:	2200      	movs	r2, #0
 8013d72:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8013d74:	2300      	movs	r3, #0
}
 8013d76:	4618      	mov	r0, r3
 8013d78:	3718      	adds	r7, #24
 8013d7a:	46bd      	mov	sp, r7
 8013d7c:	bd80      	pop	{r7, pc}
 8013d7e:	bf00      	nop
 8013d80:	20008690 	.word	0x20008690
 8013d84:	2000bd94 	.word	0x2000bd94

08013d88 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8013d88:	b580      	push	{r7, lr}
 8013d8a:	b08a      	sub	sp, #40	; 0x28
 8013d8c:	af04      	add	r7, sp, #16
 8013d8e:	60f8      	str	r0, [r7, #12]
 8013d90:	60b9      	str	r1, [r7, #8]
 8013d92:	607a      	str	r2, [r7, #4]
 8013d94:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8013d96:	68bb      	ldr	r3, [r7, #8]
 8013d98:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8013d9a:	687b      	ldr	r3, [r7, #4]
 8013d9c:	2b00      	cmp	r3, #0
 8013d9e:	d009      	beq.n	8013db4 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8013da0:	68bb      	ldr	r3, [r7, #8]
 8013da2:	2b00      	cmp	r3, #0
 8013da4:	d003      	beq.n	8013dae <ip4_output_if+0x26>
 8013da6:	68bb      	ldr	r3, [r7, #8]
 8013da8:	681b      	ldr	r3, [r3, #0]
 8013daa:	2b00      	cmp	r3, #0
 8013dac:	d102      	bne.n	8013db4 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8013dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013db0:	3304      	adds	r3, #4
 8013db2:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8013db4:	78fa      	ldrb	r2, [r7, #3]
 8013db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013db8:	9302      	str	r3, [sp, #8]
 8013dba:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8013dbe:	9301      	str	r3, [sp, #4]
 8013dc0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8013dc4:	9300      	str	r3, [sp, #0]
 8013dc6:	4613      	mov	r3, r2
 8013dc8:	687a      	ldr	r2, [r7, #4]
 8013dca:	6979      	ldr	r1, [r7, #20]
 8013dcc:	68f8      	ldr	r0, [r7, #12]
 8013dce:	f000 f805 	bl	8013ddc <ip4_output_if_src>
 8013dd2:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8013dd4:	4618      	mov	r0, r3
 8013dd6:	3718      	adds	r7, #24
 8013dd8:	46bd      	mov	sp, r7
 8013dda:	bd80      	pop	{r7, pc}

08013ddc <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8013ddc:	b580      	push	{r7, lr}
 8013dde:	b088      	sub	sp, #32
 8013de0:	af00      	add	r7, sp, #0
 8013de2:	60f8      	str	r0, [r7, #12]
 8013de4:	60b9      	str	r1, [r7, #8]
 8013de6:	607a      	str	r2, [r7, #4]
 8013de8:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8013dea:	68fb      	ldr	r3, [r7, #12]
 8013dec:	7b9b      	ldrb	r3, [r3, #14]
 8013dee:	2b01      	cmp	r3, #1
 8013df0:	d006      	beq.n	8013e00 <ip4_output_if_src+0x24>
 8013df2:	4b4b      	ldr	r3, [pc, #300]	; (8013f20 <ip4_output_if_src+0x144>)
 8013df4:	f44f 7255 	mov.w	r2, #852	; 0x354
 8013df8:	494a      	ldr	r1, [pc, #296]	; (8013f24 <ip4_output_if_src+0x148>)
 8013dfa:	484b      	ldr	r0, [pc, #300]	; (8013f28 <ip4_output_if_src+0x14c>)
 8013dfc:	f001 fb3e 	bl	801547c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8013e00:	687b      	ldr	r3, [r7, #4]
 8013e02:	2b00      	cmp	r3, #0
 8013e04:	d060      	beq.n	8013ec8 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8013e06:	2314      	movs	r3, #20
 8013e08:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8013e0a:	2114      	movs	r1, #20
 8013e0c:	68f8      	ldr	r0, [r7, #12]
 8013e0e:	f7f7 fcf7 	bl	800b800 <pbuf_add_header>
 8013e12:	4603      	mov	r3, r0
 8013e14:	2b00      	cmp	r3, #0
 8013e16:	d002      	beq.n	8013e1e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8013e18:	f06f 0301 	mvn.w	r3, #1
 8013e1c:	e07c      	b.n	8013f18 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8013e1e:	68fb      	ldr	r3, [r7, #12]
 8013e20:	685b      	ldr	r3, [r3, #4]
 8013e22:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8013e24:	68fb      	ldr	r3, [r7, #12]
 8013e26:	895b      	ldrh	r3, [r3, #10]
 8013e28:	2b13      	cmp	r3, #19
 8013e2a:	d806      	bhi.n	8013e3a <ip4_output_if_src+0x5e>
 8013e2c:	4b3c      	ldr	r3, [pc, #240]	; (8013f20 <ip4_output_if_src+0x144>)
 8013e2e:	f44f 7262 	mov.w	r2, #904	; 0x388
 8013e32:	493e      	ldr	r1, [pc, #248]	; (8013f2c <ip4_output_if_src+0x150>)
 8013e34:	483c      	ldr	r0, [pc, #240]	; (8013f28 <ip4_output_if_src+0x14c>)
 8013e36:	f001 fb21 	bl	801547c <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8013e3a:	69fb      	ldr	r3, [r7, #28]
 8013e3c:	78fa      	ldrb	r2, [r7, #3]
 8013e3e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8013e40:	69fb      	ldr	r3, [r7, #28]
 8013e42:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8013e46:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8013e48:	687b      	ldr	r3, [r7, #4]
 8013e4a:	681a      	ldr	r2, [r3, #0]
 8013e4c:	69fb      	ldr	r3, [r7, #28]
 8013e4e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8013e50:	8b7b      	ldrh	r3, [r7, #26]
 8013e52:	089b      	lsrs	r3, r3, #2
 8013e54:	b29b      	uxth	r3, r3
 8013e56:	b2db      	uxtb	r3, r3
 8013e58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013e5c:	b2da      	uxtb	r2, r3
 8013e5e:	69fb      	ldr	r3, [r7, #28]
 8013e60:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8013e62:	69fb      	ldr	r3, [r7, #28]
 8013e64:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8013e68:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8013e6a:	68fb      	ldr	r3, [r7, #12]
 8013e6c:	891b      	ldrh	r3, [r3, #8]
 8013e6e:	4618      	mov	r0, r3
 8013e70:	f7f6 f9b0 	bl	800a1d4 <lwip_htons>
 8013e74:	4603      	mov	r3, r0
 8013e76:	461a      	mov	r2, r3
 8013e78:	69fb      	ldr	r3, [r7, #28]
 8013e7a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8013e7c:	69fb      	ldr	r3, [r7, #28]
 8013e7e:	2200      	movs	r2, #0
 8013e80:	719a      	strb	r2, [r3, #6]
 8013e82:	2200      	movs	r2, #0
 8013e84:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8013e86:	4b2a      	ldr	r3, [pc, #168]	; (8013f30 <ip4_output_if_src+0x154>)
 8013e88:	881b      	ldrh	r3, [r3, #0]
 8013e8a:	4618      	mov	r0, r3
 8013e8c:	f7f6 f9a2 	bl	800a1d4 <lwip_htons>
 8013e90:	4603      	mov	r3, r0
 8013e92:	461a      	mov	r2, r3
 8013e94:	69fb      	ldr	r3, [r7, #28]
 8013e96:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8013e98:	4b25      	ldr	r3, [pc, #148]	; (8013f30 <ip4_output_if_src+0x154>)
 8013e9a:	881b      	ldrh	r3, [r3, #0]
 8013e9c:	3301      	adds	r3, #1
 8013e9e:	b29a      	uxth	r2, r3
 8013ea0:	4b23      	ldr	r3, [pc, #140]	; (8013f30 <ip4_output_if_src+0x154>)
 8013ea2:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8013ea4:	68bb      	ldr	r3, [r7, #8]
 8013ea6:	2b00      	cmp	r3, #0
 8013ea8:	d104      	bne.n	8013eb4 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8013eaa:	4b22      	ldr	r3, [pc, #136]	; (8013f34 <ip4_output_if_src+0x158>)
 8013eac:	681a      	ldr	r2, [r3, #0]
 8013eae:	69fb      	ldr	r3, [r7, #28]
 8013eb0:	60da      	str	r2, [r3, #12]
 8013eb2:	e003      	b.n	8013ebc <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8013eb4:	68bb      	ldr	r3, [r7, #8]
 8013eb6:	681a      	ldr	r2, [r3, #0]
 8013eb8:	69fb      	ldr	r3, [r7, #28]
 8013eba:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8013ebc:	69fb      	ldr	r3, [r7, #28]
 8013ebe:	2200      	movs	r2, #0
 8013ec0:	729a      	strb	r2, [r3, #10]
 8013ec2:	2200      	movs	r2, #0
 8013ec4:	72da      	strb	r2, [r3, #11]
 8013ec6:	e00f      	b.n	8013ee8 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8013ec8:	68fb      	ldr	r3, [r7, #12]
 8013eca:	895b      	ldrh	r3, [r3, #10]
 8013ecc:	2b13      	cmp	r3, #19
 8013ece:	d802      	bhi.n	8013ed6 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8013ed0:	f06f 0301 	mvn.w	r3, #1
 8013ed4:	e020      	b.n	8013f18 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8013ed6:	68fb      	ldr	r3, [r7, #12]
 8013ed8:	685b      	ldr	r3, [r3, #4]
 8013eda:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8013edc:	69fb      	ldr	r3, [r7, #28]
 8013ede:	691b      	ldr	r3, [r3, #16]
 8013ee0:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8013ee2:	f107 0314 	add.w	r3, r7, #20
 8013ee6:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8013ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013eea:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8013eec:	2b00      	cmp	r3, #0
 8013eee:	d00c      	beq.n	8013f0a <ip4_output_if_src+0x12e>
 8013ef0:	68fb      	ldr	r3, [r7, #12]
 8013ef2:	891a      	ldrh	r2, [r3, #8]
 8013ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ef6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8013ef8:	429a      	cmp	r2, r3
 8013efa:	d906      	bls.n	8013f0a <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8013efc:	687a      	ldr	r2, [r7, #4]
 8013efe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013f00:	68f8      	ldr	r0, [r7, #12]
 8013f02:	f000 fd4d 	bl	80149a0 <ip4_frag>
 8013f06:	4603      	mov	r3, r0
 8013f08:	e006      	b.n	8013f18 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8013f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f0c:	695b      	ldr	r3, [r3, #20]
 8013f0e:	687a      	ldr	r2, [r7, #4]
 8013f10:	68f9      	ldr	r1, [r7, #12]
 8013f12:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013f14:	4798      	blx	r3
 8013f16:	4603      	mov	r3, r0
}
 8013f18:	4618      	mov	r0, r3
 8013f1a:	3720      	adds	r7, #32
 8013f1c:	46bd      	mov	sp, r7
 8013f1e:	bd80      	pop	{r7, pc}
 8013f20:	08019578 	.word	0x08019578
 8013f24:	080195ac 	.word	0x080195ac
 8013f28:	080195b8 	.word	0x080195b8
 8013f2c:	080195e0 	.word	0x080195e0
 8013f30:	20004bfe 	.word	0x20004bfe
 8013f34:	08019c40 	.word	0x08019c40

08013f38 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8013f38:	b480      	push	{r7}
 8013f3a:	b085      	sub	sp, #20
 8013f3c:	af00      	add	r7, sp, #0
 8013f3e:	6078      	str	r0, [r7, #4]
 8013f40:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8013f42:	687b      	ldr	r3, [r7, #4]
 8013f44:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8013f46:	687b      	ldr	r3, [r7, #4]
 8013f48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013f4c:	d002      	beq.n	8013f54 <ip4_addr_isbroadcast_u32+0x1c>
 8013f4e:	687b      	ldr	r3, [r7, #4]
 8013f50:	2b00      	cmp	r3, #0
 8013f52:	d101      	bne.n	8013f58 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8013f54:	2301      	movs	r3, #1
 8013f56:	e02a      	b.n	8013fae <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8013f58:	683b      	ldr	r3, [r7, #0]
 8013f5a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013f5e:	f003 0302 	and.w	r3, r3, #2
 8013f62:	2b00      	cmp	r3, #0
 8013f64:	d101      	bne.n	8013f6a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8013f66:	2300      	movs	r3, #0
 8013f68:	e021      	b.n	8013fae <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8013f6a:	683b      	ldr	r3, [r7, #0]
 8013f6c:	3304      	adds	r3, #4
 8013f6e:	681b      	ldr	r3, [r3, #0]
 8013f70:	687a      	ldr	r2, [r7, #4]
 8013f72:	429a      	cmp	r2, r3
 8013f74:	d101      	bne.n	8013f7a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8013f76:	2300      	movs	r3, #0
 8013f78:	e019      	b.n	8013fae <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8013f7a:	68fa      	ldr	r2, [r7, #12]
 8013f7c:	683b      	ldr	r3, [r7, #0]
 8013f7e:	3304      	adds	r3, #4
 8013f80:	681b      	ldr	r3, [r3, #0]
 8013f82:	405a      	eors	r2, r3
 8013f84:	683b      	ldr	r3, [r7, #0]
 8013f86:	3308      	adds	r3, #8
 8013f88:	681b      	ldr	r3, [r3, #0]
 8013f8a:	4013      	ands	r3, r2
 8013f8c:	2b00      	cmp	r3, #0
 8013f8e:	d10d      	bne.n	8013fac <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8013f90:	683b      	ldr	r3, [r7, #0]
 8013f92:	3308      	adds	r3, #8
 8013f94:	681b      	ldr	r3, [r3, #0]
 8013f96:	43da      	mvns	r2, r3
 8013f98:	687b      	ldr	r3, [r7, #4]
 8013f9a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8013f9c:	683b      	ldr	r3, [r7, #0]
 8013f9e:	3308      	adds	r3, #8
 8013fa0:	681b      	ldr	r3, [r3, #0]
 8013fa2:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8013fa4:	429a      	cmp	r2, r3
 8013fa6:	d101      	bne.n	8013fac <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8013fa8:	2301      	movs	r3, #1
 8013faa:	e000      	b.n	8013fae <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8013fac:	2300      	movs	r3, #0
  }
}
 8013fae:	4618      	mov	r0, r3
 8013fb0:	3714      	adds	r7, #20
 8013fb2:	46bd      	mov	sp, r7
 8013fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fb8:	4770      	bx	lr
	...

08013fbc <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8013fbc:	b580      	push	{r7, lr}
 8013fbe:	b084      	sub	sp, #16
 8013fc0:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8013fc2:	2300      	movs	r3, #0
 8013fc4:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8013fc6:	4b12      	ldr	r3, [pc, #72]	; (8014010 <ip_reass_tmr+0x54>)
 8013fc8:	681b      	ldr	r3, [r3, #0]
 8013fca:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8013fcc:	e018      	b.n	8014000 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8013fce:	68fb      	ldr	r3, [r7, #12]
 8013fd0:	7fdb      	ldrb	r3, [r3, #31]
 8013fd2:	2b00      	cmp	r3, #0
 8013fd4:	d00b      	beq.n	8013fee <ip_reass_tmr+0x32>
      r->timer--;
 8013fd6:	68fb      	ldr	r3, [r7, #12]
 8013fd8:	7fdb      	ldrb	r3, [r3, #31]
 8013fda:	3b01      	subs	r3, #1
 8013fdc:	b2da      	uxtb	r2, r3
 8013fde:	68fb      	ldr	r3, [r7, #12]
 8013fe0:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8013fe2:	68fb      	ldr	r3, [r7, #12]
 8013fe4:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8013fe6:	68fb      	ldr	r3, [r7, #12]
 8013fe8:	681b      	ldr	r3, [r3, #0]
 8013fea:	60fb      	str	r3, [r7, #12]
 8013fec:	e008      	b.n	8014000 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8013fee:	68fb      	ldr	r3, [r7, #12]
 8013ff0:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8013ff2:	68fb      	ldr	r3, [r7, #12]
 8013ff4:	681b      	ldr	r3, [r3, #0]
 8013ff6:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8013ff8:	68b9      	ldr	r1, [r7, #8]
 8013ffa:	6878      	ldr	r0, [r7, #4]
 8013ffc:	f000 f80a 	bl	8014014 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8014000:	68fb      	ldr	r3, [r7, #12]
 8014002:	2b00      	cmp	r3, #0
 8014004:	d1e3      	bne.n	8013fce <ip_reass_tmr+0x12>
    }
  }
}
 8014006:	bf00      	nop
 8014008:	bf00      	nop
 801400a:	3710      	adds	r7, #16
 801400c:	46bd      	mov	sp, r7
 801400e:	bd80      	pop	{r7, pc}
 8014010:	20004c00 	.word	0x20004c00

08014014 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8014014:	b580      	push	{r7, lr}
 8014016:	b088      	sub	sp, #32
 8014018:	af00      	add	r7, sp, #0
 801401a:	6078      	str	r0, [r7, #4]
 801401c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801401e:	2300      	movs	r3, #0
 8014020:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8014022:	683a      	ldr	r2, [r7, #0]
 8014024:	687b      	ldr	r3, [r7, #4]
 8014026:	429a      	cmp	r2, r3
 8014028:	d105      	bne.n	8014036 <ip_reass_free_complete_datagram+0x22>
 801402a:	4b45      	ldr	r3, [pc, #276]	; (8014140 <ip_reass_free_complete_datagram+0x12c>)
 801402c:	22ab      	movs	r2, #171	; 0xab
 801402e:	4945      	ldr	r1, [pc, #276]	; (8014144 <ip_reass_free_complete_datagram+0x130>)
 8014030:	4845      	ldr	r0, [pc, #276]	; (8014148 <ip_reass_free_complete_datagram+0x134>)
 8014032:	f001 fa23 	bl	801547c <iprintf>
  if (prev != NULL) {
 8014036:	683b      	ldr	r3, [r7, #0]
 8014038:	2b00      	cmp	r3, #0
 801403a:	d00a      	beq.n	8014052 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801403c:	683b      	ldr	r3, [r7, #0]
 801403e:	681b      	ldr	r3, [r3, #0]
 8014040:	687a      	ldr	r2, [r7, #4]
 8014042:	429a      	cmp	r2, r3
 8014044:	d005      	beq.n	8014052 <ip_reass_free_complete_datagram+0x3e>
 8014046:	4b3e      	ldr	r3, [pc, #248]	; (8014140 <ip_reass_free_complete_datagram+0x12c>)
 8014048:	22ad      	movs	r2, #173	; 0xad
 801404a:	4940      	ldr	r1, [pc, #256]	; (801414c <ip_reass_free_complete_datagram+0x138>)
 801404c:	483e      	ldr	r0, [pc, #248]	; (8014148 <ip_reass_free_complete_datagram+0x134>)
 801404e:	f001 fa15 	bl	801547c <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8014052:	687b      	ldr	r3, [r7, #4]
 8014054:	685b      	ldr	r3, [r3, #4]
 8014056:	685b      	ldr	r3, [r3, #4]
 8014058:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801405a:	697b      	ldr	r3, [r7, #20]
 801405c:	889b      	ldrh	r3, [r3, #4]
 801405e:	b29b      	uxth	r3, r3
 8014060:	2b00      	cmp	r3, #0
 8014062:	d12a      	bne.n	80140ba <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8014064:	687b      	ldr	r3, [r7, #4]
 8014066:	685b      	ldr	r3, [r3, #4]
 8014068:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801406a:	697b      	ldr	r3, [r7, #20]
 801406c:	681a      	ldr	r2, [r3, #0]
 801406e:	687b      	ldr	r3, [r7, #4]
 8014070:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8014072:	69bb      	ldr	r3, [r7, #24]
 8014074:	6858      	ldr	r0, [r3, #4]
 8014076:	687b      	ldr	r3, [r7, #4]
 8014078:	3308      	adds	r3, #8
 801407a:	2214      	movs	r2, #20
 801407c:	4619      	mov	r1, r3
 801407e:	f001 f98c 	bl	801539a <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8014082:	2101      	movs	r1, #1
 8014084:	69b8      	ldr	r0, [r7, #24]
 8014086:	f7ff fc47 	bl	8013918 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801408a:	69b8      	ldr	r0, [r7, #24]
 801408c:	f7f7 fcdc 	bl	800ba48 <pbuf_clen>
 8014090:	4603      	mov	r3, r0
 8014092:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8014094:	8bfa      	ldrh	r2, [r7, #30]
 8014096:	8a7b      	ldrh	r3, [r7, #18]
 8014098:	4413      	add	r3, r2
 801409a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801409e:	db05      	blt.n	80140ac <ip_reass_free_complete_datagram+0x98>
 80140a0:	4b27      	ldr	r3, [pc, #156]	; (8014140 <ip_reass_free_complete_datagram+0x12c>)
 80140a2:	22bc      	movs	r2, #188	; 0xbc
 80140a4:	492a      	ldr	r1, [pc, #168]	; (8014150 <ip_reass_free_complete_datagram+0x13c>)
 80140a6:	4828      	ldr	r0, [pc, #160]	; (8014148 <ip_reass_free_complete_datagram+0x134>)
 80140a8:	f001 f9e8 	bl	801547c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80140ac:	8bfa      	ldrh	r2, [r7, #30]
 80140ae:	8a7b      	ldrh	r3, [r7, #18]
 80140b0:	4413      	add	r3, r2
 80140b2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80140b4:	69b8      	ldr	r0, [r7, #24]
 80140b6:	f7f7 fc39 	bl	800b92c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80140ba:	687b      	ldr	r3, [r7, #4]
 80140bc:	685b      	ldr	r3, [r3, #4]
 80140be:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80140c0:	e01f      	b.n	8014102 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80140c2:	69bb      	ldr	r3, [r7, #24]
 80140c4:	685b      	ldr	r3, [r3, #4]
 80140c6:	617b      	str	r3, [r7, #20]
    pcur = p;
 80140c8:	69bb      	ldr	r3, [r7, #24]
 80140ca:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80140cc:	697b      	ldr	r3, [r7, #20]
 80140ce:	681b      	ldr	r3, [r3, #0]
 80140d0:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80140d2:	68f8      	ldr	r0, [r7, #12]
 80140d4:	f7f7 fcb8 	bl	800ba48 <pbuf_clen>
 80140d8:	4603      	mov	r3, r0
 80140da:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80140dc:	8bfa      	ldrh	r2, [r7, #30]
 80140de:	8a7b      	ldrh	r3, [r7, #18]
 80140e0:	4413      	add	r3, r2
 80140e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80140e6:	db05      	blt.n	80140f4 <ip_reass_free_complete_datagram+0xe0>
 80140e8:	4b15      	ldr	r3, [pc, #84]	; (8014140 <ip_reass_free_complete_datagram+0x12c>)
 80140ea:	22cc      	movs	r2, #204	; 0xcc
 80140ec:	4918      	ldr	r1, [pc, #96]	; (8014150 <ip_reass_free_complete_datagram+0x13c>)
 80140ee:	4816      	ldr	r0, [pc, #88]	; (8014148 <ip_reass_free_complete_datagram+0x134>)
 80140f0:	f001 f9c4 	bl	801547c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80140f4:	8bfa      	ldrh	r2, [r7, #30]
 80140f6:	8a7b      	ldrh	r3, [r7, #18]
 80140f8:	4413      	add	r3, r2
 80140fa:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80140fc:	68f8      	ldr	r0, [r7, #12]
 80140fe:	f7f7 fc15 	bl	800b92c <pbuf_free>
  while (p != NULL) {
 8014102:	69bb      	ldr	r3, [r7, #24]
 8014104:	2b00      	cmp	r3, #0
 8014106:	d1dc      	bne.n	80140c2 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8014108:	6839      	ldr	r1, [r7, #0]
 801410a:	6878      	ldr	r0, [r7, #4]
 801410c:	f000 f8c2 	bl	8014294 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8014110:	4b10      	ldr	r3, [pc, #64]	; (8014154 <ip_reass_free_complete_datagram+0x140>)
 8014112:	881b      	ldrh	r3, [r3, #0]
 8014114:	8bfa      	ldrh	r2, [r7, #30]
 8014116:	429a      	cmp	r2, r3
 8014118:	d905      	bls.n	8014126 <ip_reass_free_complete_datagram+0x112>
 801411a:	4b09      	ldr	r3, [pc, #36]	; (8014140 <ip_reass_free_complete_datagram+0x12c>)
 801411c:	22d2      	movs	r2, #210	; 0xd2
 801411e:	490e      	ldr	r1, [pc, #56]	; (8014158 <ip_reass_free_complete_datagram+0x144>)
 8014120:	4809      	ldr	r0, [pc, #36]	; (8014148 <ip_reass_free_complete_datagram+0x134>)
 8014122:	f001 f9ab 	bl	801547c <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8014126:	4b0b      	ldr	r3, [pc, #44]	; (8014154 <ip_reass_free_complete_datagram+0x140>)
 8014128:	881a      	ldrh	r2, [r3, #0]
 801412a:	8bfb      	ldrh	r3, [r7, #30]
 801412c:	1ad3      	subs	r3, r2, r3
 801412e:	b29a      	uxth	r2, r3
 8014130:	4b08      	ldr	r3, [pc, #32]	; (8014154 <ip_reass_free_complete_datagram+0x140>)
 8014132:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8014134:	8bfb      	ldrh	r3, [r7, #30]
}
 8014136:	4618      	mov	r0, r3
 8014138:	3720      	adds	r7, #32
 801413a:	46bd      	mov	sp, r7
 801413c:	bd80      	pop	{r7, pc}
 801413e:	bf00      	nop
 8014140:	08019610 	.word	0x08019610
 8014144:	0801964c 	.word	0x0801964c
 8014148:	08019658 	.word	0x08019658
 801414c:	08019680 	.word	0x08019680
 8014150:	08019694 	.word	0x08019694
 8014154:	20004c04 	.word	0x20004c04
 8014158:	080196b4 	.word	0x080196b4

0801415c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801415c:	b580      	push	{r7, lr}
 801415e:	b08a      	sub	sp, #40	; 0x28
 8014160:	af00      	add	r7, sp, #0
 8014162:	6078      	str	r0, [r7, #4]
 8014164:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8014166:	2300      	movs	r3, #0
 8014168:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801416a:	2300      	movs	r3, #0
 801416c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801416e:	2300      	movs	r3, #0
 8014170:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8014172:	2300      	movs	r3, #0
 8014174:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8014176:	2300      	movs	r3, #0
 8014178:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801417a:	4b28      	ldr	r3, [pc, #160]	; (801421c <ip_reass_remove_oldest_datagram+0xc0>)
 801417c:	681b      	ldr	r3, [r3, #0]
 801417e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8014180:	e030      	b.n	80141e4 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8014182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014184:	695a      	ldr	r2, [r3, #20]
 8014186:	687b      	ldr	r3, [r7, #4]
 8014188:	68db      	ldr	r3, [r3, #12]
 801418a:	429a      	cmp	r2, r3
 801418c:	d10c      	bne.n	80141a8 <ip_reass_remove_oldest_datagram+0x4c>
 801418e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014190:	699a      	ldr	r2, [r3, #24]
 8014192:	687b      	ldr	r3, [r7, #4]
 8014194:	691b      	ldr	r3, [r3, #16]
 8014196:	429a      	cmp	r2, r3
 8014198:	d106      	bne.n	80141a8 <ip_reass_remove_oldest_datagram+0x4c>
 801419a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801419c:	899a      	ldrh	r2, [r3, #12]
 801419e:	687b      	ldr	r3, [r7, #4]
 80141a0:	889b      	ldrh	r3, [r3, #4]
 80141a2:	b29b      	uxth	r3, r3
 80141a4:	429a      	cmp	r2, r3
 80141a6:	d014      	beq.n	80141d2 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80141a8:	693b      	ldr	r3, [r7, #16]
 80141aa:	3301      	adds	r3, #1
 80141ac:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80141ae:	6a3b      	ldr	r3, [r7, #32]
 80141b0:	2b00      	cmp	r3, #0
 80141b2:	d104      	bne.n	80141be <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80141b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141b6:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80141b8:	69fb      	ldr	r3, [r7, #28]
 80141ba:	61bb      	str	r3, [r7, #24]
 80141bc:	e009      	b.n	80141d2 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80141be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141c0:	7fda      	ldrb	r2, [r3, #31]
 80141c2:	6a3b      	ldr	r3, [r7, #32]
 80141c4:	7fdb      	ldrb	r3, [r3, #31]
 80141c6:	429a      	cmp	r2, r3
 80141c8:	d803      	bhi.n	80141d2 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80141ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141cc:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80141ce:	69fb      	ldr	r3, [r7, #28]
 80141d0:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80141d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141d4:	681b      	ldr	r3, [r3, #0]
 80141d6:	2b00      	cmp	r3, #0
 80141d8:	d001      	beq.n	80141de <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80141da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141dc:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80141de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141e0:	681b      	ldr	r3, [r3, #0]
 80141e2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80141e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141e6:	2b00      	cmp	r3, #0
 80141e8:	d1cb      	bne.n	8014182 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80141ea:	6a3b      	ldr	r3, [r7, #32]
 80141ec:	2b00      	cmp	r3, #0
 80141ee:	d008      	beq.n	8014202 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80141f0:	69b9      	ldr	r1, [r7, #24]
 80141f2:	6a38      	ldr	r0, [r7, #32]
 80141f4:	f7ff ff0e 	bl	8014014 <ip_reass_free_complete_datagram>
 80141f8:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80141fa:	697a      	ldr	r2, [r7, #20]
 80141fc:	68fb      	ldr	r3, [r7, #12]
 80141fe:	4413      	add	r3, r2
 8014200:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8014202:	697a      	ldr	r2, [r7, #20]
 8014204:	683b      	ldr	r3, [r7, #0]
 8014206:	429a      	cmp	r2, r3
 8014208:	da02      	bge.n	8014210 <ip_reass_remove_oldest_datagram+0xb4>
 801420a:	693b      	ldr	r3, [r7, #16]
 801420c:	2b01      	cmp	r3, #1
 801420e:	dcac      	bgt.n	801416a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8014210:	697b      	ldr	r3, [r7, #20]
}
 8014212:	4618      	mov	r0, r3
 8014214:	3728      	adds	r7, #40	; 0x28
 8014216:	46bd      	mov	sp, r7
 8014218:	bd80      	pop	{r7, pc}
 801421a:	bf00      	nop
 801421c:	20004c00 	.word	0x20004c00

08014220 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8014220:	b580      	push	{r7, lr}
 8014222:	b084      	sub	sp, #16
 8014224:	af00      	add	r7, sp, #0
 8014226:	6078      	str	r0, [r7, #4]
 8014228:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801422a:	2004      	movs	r0, #4
 801422c:	f7f6 fc88 	bl	800ab40 <memp_malloc>
 8014230:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8014232:	68fb      	ldr	r3, [r7, #12]
 8014234:	2b00      	cmp	r3, #0
 8014236:	d110      	bne.n	801425a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8014238:	6839      	ldr	r1, [r7, #0]
 801423a:	6878      	ldr	r0, [r7, #4]
 801423c:	f7ff ff8e 	bl	801415c <ip_reass_remove_oldest_datagram>
 8014240:	4602      	mov	r2, r0
 8014242:	683b      	ldr	r3, [r7, #0]
 8014244:	4293      	cmp	r3, r2
 8014246:	dc03      	bgt.n	8014250 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8014248:	2004      	movs	r0, #4
 801424a:	f7f6 fc79 	bl	800ab40 <memp_malloc>
 801424e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8014250:	68fb      	ldr	r3, [r7, #12]
 8014252:	2b00      	cmp	r3, #0
 8014254:	d101      	bne.n	801425a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8014256:	2300      	movs	r3, #0
 8014258:	e016      	b.n	8014288 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801425a:	2220      	movs	r2, #32
 801425c:	2100      	movs	r1, #0
 801425e:	68f8      	ldr	r0, [r7, #12]
 8014260:	f001 f8a9 	bl	80153b6 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8014264:	68fb      	ldr	r3, [r7, #12]
 8014266:	220f      	movs	r2, #15
 8014268:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801426a:	4b09      	ldr	r3, [pc, #36]	; (8014290 <ip_reass_enqueue_new_datagram+0x70>)
 801426c:	681a      	ldr	r2, [r3, #0]
 801426e:	68fb      	ldr	r3, [r7, #12]
 8014270:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8014272:	4a07      	ldr	r2, [pc, #28]	; (8014290 <ip_reass_enqueue_new_datagram+0x70>)
 8014274:	68fb      	ldr	r3, [r7, #12]
 8014276:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8014278:	68fb      	ldr	r3, [r7, #12]
 801427a:	3308      	adds	r3, #8
 801427c:	2214      	movs	r2, #20
 801427e:	6879      	ldr	r1, [r7, #4]
 8014280:	4618      	mov	r0, r3
 8014282:	f001 f88a 	bl	801539a <memcpy>
  return ipr;
 8014286:	68fb      	ldr	r3, [r7, #12]
}
 8014288:	4618      	mov	r0, r3
 801428a:	3710      	adds	r7, #16
 801428c:	46bd      	mov	sp, r7
 801428e:	bd80      	pop	{r7, pc}
 8014290:	20004c00 	.word	0x20004c00

08014294 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8014294:	b580      	push	{r7, lr}
 8014296:	b082      	sub	sp, #8
 8014298:	af00      	add	r7, sp, #0
 801429a:	6078      	str	r0, [r7, #4]
 801429c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801429e:	4b10      	ldr	r3, [pc, #64]	; (80142e0 <ip_reass_dequeue_datagram+0x4c>)
 80142a0:	681b      	ldr	r3, [r3, #0]
 80142a2:	687a      	ldr	r2, [r7, #4]
 80142a4:	429a      	cmp	r2, r3
 80142a6:	d104      	bne.n	80142b2 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80142a8:	687b      	ldr	r3, [r7, #4]
 80142aa:	681b      	ldr	r3, [r3, #0]
 80142ac:	4a0c      	ldr	r2, [pc, #48]	; (80142e0 <ip_reass_dequeue_datagram+0x4c>)
 80142ae:	6013      	str	r3, [r2, #0]
 80142b0:	e00d      	b.n	80142ce <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80142b2:	683b      	ldr	r3, [r7, #0]
 80142b4:	2b00      	cmp	r3, #0
 80142b6:	d106      	bne.n	80142c6 <ip_reass_dequeue_datagram+0x32>
 80142b8:	4b0a      	ldr	r3, [pc, #40]	; (80142e4 <ip_reass_dequeue_datagram+0x50>)
 80142ba:	f240 1245 	movw	r2, #325	; 0x145
 80142be:	490a      	ldr	r1, [pc, #40]	; (80142e8 <ip_reass_dequeue_datagram+0x54>)
 80142c0:	480a      	ldr	r0, [pc, #40]	; (80142ec <ip_reass_dequeue_datagram+0x58>)
 80142c2:	f001 f8db 	bl	801547c <iprintf>
    prev->next = ipr->next;
 80142c6:	687b      	ldr	r3, [r7, #4]
 80142c8:	681a      	ldr	r2, [r3, #0]
 80142ca:	683b      	ldr	r3, [r7, #0]
 80142cc:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80142ce:	6879      	ldr	r1, [r7, #4]
 80142d0:	2004      	movs	r0, #4
 80142d2:	f7f6 fc87 	bl	800abe4 <memp_free>
}
 80142d6:	bf00      	nop
 80142d8:	3708      	adds	r7, #8
 80142da:	46bd      	mov	sp, r7
 80142dc:	bd80      	pop	{r7, pc}
 80142de:	bf00      	nop
 80142e0:	20004c00 	.word	0x20004c00
 80142e4:	08019610 	.word	0x08019610
 80142e8:	080196d8 	.word	0x080196d8
 80142ec:	08019658 	.word	0x08019658

080142f0 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80142f0:	b580      	push	{r7, lr}
 80142f2:	b08c      	sub	sp, #48	; 0x30
 80142f4:	af00      	add	r7, sp, #0
 80142f6:	60f8      	str	r0, [r7, #12]
 80142f8:	60b9      	str	r1, [r7, #8]
 80142fa:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80142fc:	2300      	movs	r3, #0
 80142fe:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8014300:	2301      	movs	r3, #1
 8014302:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8014304:	68bb      	ldr	r3, [r7, #8]
 8014306:	685b      	ldr	r3, [r3, #4]
 8014308:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801430a:	69fb      	ldr	r3, [r7, #28]
 801430c:	885b      	ldrh	r3, [r3, #2]
 801430e:	b29b      	uxth	r3, r3
 8014310:	4618      	mov	r0, r3
 8014312:	f7f5 ff5f 	bl	800a1d4 <lwip_htons>
 8014316:	4603      	mov	r3, r0
 8014318:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801431a:	69fb      	ldr	r3, [r7, #28]
 801431c:	781b      	ldrb	r3, [r3, #0]
 801431e:	f003 030f 	and.w	r3, r3, #15
 8014322:	b2db      	uxtb	r3, r3
 8014324:	009b      	lsls	r3, r3, #2
 8014326:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8014328:	7e7b      	ldrb	r3, [r7, #25]
 801432a:	b29b      	uxth	r3, r3
 801432c:	8b7a      	ldrh	r2, [r7, #26]
 801432e:	429a      	cmp	r2, r3
 8014330:	d202      	bcs.n	8014338 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014332:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014336:	e135      	b.n	80145a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8014338:	7e7b      	ldrb	r3, [r7, #25]
 801433a:	b29b      	uxth	r3, r3
 801433c:	8b7a      	ldrh	r2, [r7, #26]
 801433e:	1ad3      	subs	r3, r2, r3
 8014340:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8014342:	69fb      	ldr	r3, [r7, #28]
 8014344:	88db      	ldrh	r3, [r3, #6]
 8014346:	b29b      	uxth	r3, r3
 8014348:	4618      	mov	r0, r3
 801434a:	f7f5 ff43 	bl	800a1d4 <lwip_htons>
 801434e:	4603      	mov	r3, r0
 8014350:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014354:	b29b      	uxth	r3, r3
 8014356:	00db      	lsls	r3, r3, #3
 8014358:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801435a:	68bb      	ldr	r3, [r7, #8]
 801435c:	685b      	ldr	r3, [r3, #4]
 801435e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8014360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014362:	2200      	movs	r2, #0
 8014364:	701a      	strb	r2, [r3, #0]
 8014366:	2200      	movs	r2, #0
 8014368:	705a      	strb	r2, [r3, #1]
 801436a:	2200      	movs	r2, #0
 801436c:	709a      	strb	r2, [r3, #2]
 801436e:	2200      	movs	r2, #0
 8014370:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8014372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014374:	8afa      	ldrh	r2, [r7, #22]
 8014376:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8014378:	8afa      	ldrh	r2, [r7, #22]
 801437a:	8b7b      	ldrh	r3, [r7, #26]
 801437c:	4413      	add	r3, r2
 801437e:	b29a      	uxth	r2, r3
 8014380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014382:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8014384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014386:	88db      	ldrh	r3, [r3, #6]
 8014388:	b29b      	uxth	r3, r3
 801438a:	8afa      	ldrh	r2, [r7, #22]
 801438c:	429a      	cmp	r2, r3
 801438e:	d902      	bls.n	8014396 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014390:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014394:	e106      	b.n	80145a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8014396:	68fb      	ldr	r3, [r7, #12]
 8014398:	685b      	ldr	r3, [r3, #4]
 801439a:	627b      	str	r3, [r7, #36]	; 0x24
 801439c:	e068      	b.n	8014470 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801439e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143a0:	685b      	ldr	r3, [r3, #4]
 80143a2:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80143a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80143a6:	889b      	ldrh	r3, [r3, #4]
 80143a8:	b29a      	uxth	r2, r3
 80143aa:	693b      	ldr	r3, [r7, #16]
 80143ac:	889b      	ldrh	r3, [r3, #4]
 80143ae:	b29b      	uxth	r3, r3
 80143b0:	429a      	cmp	r2, r3
 80143b2:	d235      	bcs.n	8014420 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80143b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80143b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80143b8:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80143ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143bc:	2b00      	cmp	r3, #0
 80143be:	d020      	beq.n	8014402 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80143c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80143c2:	889b      	ldrh	r3, [r3, #4]
 80143c4:	b29a      	uxth	r2, r3
 80143c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143c8:	88db      	ldrh	r3, [r3, #6]
 80143ca:	b29b      	uxth	r3, r3
 80143cc:	429a      	cmp	r2, r3
 80143ce:	d307      	bcc.n	80143e0 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80143d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80143d2:	88db      	ldrh	r3, [r3, #6]
 80143d4:	b29a      	uxth	r2, r3
 80143d6:	693b      	ldr	r3, [r7, #16]
 80143d8:	889b      	ldrh	r3, [r3, #4]
 80143da:	b29b      	uxth	r3, r3
 80143dc:	429a      	cmp	r2, r3
 80143de:	d902      	bls.n	80143e6 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80143e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80143e4:	e0de      	b.n	80145a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80143e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143e8:	68ba      	ldr	r2, [r7, #8]
 80143ea:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80143ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143ee:	88db      	ldrh	r3, [r3, #6]
 80143f0:	b29a      	uxth	r2, r3
 80143f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80143f4:	889b      	ldrh	r3, [r3, #4]
 80143f6:	b29b      	uxth	r3, r3
 80143f8:	429a      	cmp	r2, r3
 80143fa:	d03d      	beq.n	8014478 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80143fc:	2300      	movs	r3, #0
 80143fe:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8014400:	e03a      	b.n	8014478 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8014402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014404:	88db      	ldrh	r3, [r3, #6]
 8014406:	b29a      	uxth	r2, r3
 8014408:	693b      	ldr	r3, [r7, #16]
 801440a:	889b      	ldrh	r3, [r3, #4]
 801440c:	b29b      	uxth	r3, r3
 801440e:	429a      	cmp	r2, r3
 8014410:	d902      	bls.n	8014418 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014412:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014416:	e0c5      	b.n	80145a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8014418:	68fb      	ldr	r3, [r7, #12]
 801441a:	68ba      	ldr	r2, [r7, #8]
 801441c:	605a      	str	r2, [r3, #4]
      break;
 801441e:	e02b      	b.n	8014478 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8014420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014422:	889b      	ldrh	r3, [r3, #4]
 8014424:	b29a      	uxth	r2, r3
 8014426:	693b      	ldr	r3, [r7, #16]
 8014428:	889b      	ldrh	r3, [r3, #4]
 801442a:	b29b      	uxth	r3, r3
 801442c:	429a      	cmp	r2, r3
 801442e:	d102      	bne.n	8014436 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014430:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014434:	e0b6      	b.n	80145a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8014436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014438:	889b      	ldrh	r3, [r3, #4]
 801443a:	b29a      	uxth	r2, r3
 801443c:	693b      	ldr	r3, [r7, #16]
 801443e:	88db      	ldrh	r3, [r3, #6]
 8014440:	b29b      	uxth	r3, r3
 8014442:	429a      	cmp	r2, r3
 8014444:	d202      	bcs.n	801444c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014446:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801444a:	e0ab      	b.n	80145a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801444c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801444e:	2b00      	cmp	r3, #0
 8014450:	d009      	beq.n	8014466 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8014452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014454:	88db      	ldrh	r3, [r3, #6]
 8014456:	b29a      	uxth	r2, r3
 8014458:	693b      	ldr	r3, [r7, #16]
 801445a:	889b      	ldrh	r3, [r3, #4]
 801445c:	b29b      	uxth	r3, r3
 801445e:	429a      	cmp	r2, r3
 8014460:	d001      	beq.n	8014466 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8014462:	2300      	movs	r3, #0
 8014464:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8014466:	693b      	ldr	r3, [r7, #16]
 8014468:	681b      	ldr	r3, [r3, #0]
 801446a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 801446c:	693b      	ldr	r3, [r7, #16]
 801446e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8014470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014472:	2b00      	cmp	r3, #0
 8014474:	d193      	bne.n	801439e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8014476:	e000      	b.n	801447a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8014478:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801447a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801447c:	2b00      	cmp	r3, #0
 801447e:	d12d      	bne.n	80144dc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8014480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014482:	2b00      	cmp	r3, #0
 8014484:	d01c      	beq.n	80144c0 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8014486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014488:	88db      	ldrh	r3, [r3, #6]
 801448a:	b29a      	uxth	r2, r3
 801448c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801448e:	889b      	ldrh	r3, [r3, #4]
 8014490:	b29b      	uxth	r3, r3
 8014492:	429a      	cmp	r2, r3
 8014494:	d906      	bls.n	80144a4 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8014496:	4b45      	ldr	r3, [pc, #276]	; (80145ac <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014498:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 801449c:	4944      	ldr	r1, [pc, #272]	; (80145b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801449e:	4845      	ldr	r0, [pc, #276]	; (80145b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80144a0:	f000 ffec 	bl	801547c <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80144a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80144a6:	68ba      	ldr	r2, [r7, #8]
 80144a8:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80144aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80144ac:	88db      	ldrh	r3, [r3, #6]
 80144ae:	b29a      	uxth	r2, r3
 80144b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144b2:	889b      	ldrh	r3, [r3, #4]
 80144b4:	b29b      	uxth	r3, r3
 80144b6:	429a      	cmp	r2, r3
 80144b8:	d010      	beq.n	80144dc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80144ba:	2300      	movs	r3, #0
 80144bc:	623b      	str	r3, [r7, #32]
 80144be:	e00d      	b.n	80144dc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80144c0:	68fb      	ldr	r3, [r7, #12]
 80144c2:	685b      	ldr	r3, [r3, #4]
 80144c4:	2b00      	cmp	r3, #0
 80144c6:	d006      	beq.n	80144d6 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80144c8:	4b38      	ldr	r3, [pc, #224]	; (80145ac <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80144ca:	f44f 72df 	mov.w	r2, #446	; 0x1be
 80144ce:	493a      	ldr	r1, [pc, #232]	; (80145b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80144d0:	4838      	ldr	r0, [pc, #224]	; (80145b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80144d2:	f000 ffd3 	bl	801547c <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80144d6:	68fb      	ldr	r3, [r7, #12]
 80144d8:	68ba      	ldr	r2, [r7, #8]
 80144da:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80144dc:	687b      	ldr	r3, [r7, #4]
 80144de:	2b00      	cmp	r3, #0
 80144e0:	d105      	bne.n	80144ee <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80144e2:	68fb      	ldr	r3, [r7, #12]
 80144e4:	7f9b      	ldrb	r3, [r3, #30]
 80144e6:	f003 0301 	and.w	r3, r3, #1
 80144ea:	2b00      	cmp	r3, #0
 80144ec:	d059      	beq.n	80145a2 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80144ee:	6a3b      	ldr	r3, [r7, #32]
 80144f0:	2b00      	cmp	r3, #0
 80144f2:	d04f      	beq.n	8014594 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80144f4:	68fb      	ldr	r3, [r7, #12]
 80144f6:	685b      	ldr	r3, [r3, #4]
 80144f8:	2b00      	cmp	r3, #0
 80144fa:	d006      	beq.n	801450a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 80144fc:	68fb      	ldr	r3, [r7, #12]
 80144fe:	685b      	ldr	r3, [r3, #4]
 8014500:	685b      	ldr	r3, [r3, #4]
 8014502:	889b      	ldrh	r3, [r3, #4]
 8014504:	b29b      	uxth	r3, r3
 8014506:	2b00      	cmp	r3, #0
 8014508:	d002      	beq.n	8014510 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801450a:	2300      	movs	r3, #0
 801450c:	623b      	str	r3, [r7, #32]
 801450e:	e041      	b.n	8014594 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8014510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014512:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8014514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014516:	681b      	ldr	r3, [r3, #0]
 8014518:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801451a:	e012      	b.n	8014542 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801451c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801451e:	685b      	ldr	r3, [r3, #4]
 8014520:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8014522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014524:	88db      	ldrh	r3, [r3, #6]
 8014526:	b29a      	uxth	r2, r3
 8014528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801452a:	889b      	ldrh	r3, [r3, #4]
 801452c:	b29b      	uxth	r3, r3
 801452e:	429a      	cmp	r2, r3
 8014530:	d002      	beq.n	8014538 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8014532:	2300      	movs	r3, #0
 8014534:	623b      	str	r3, [r7, #32]
            break;
 8014536:	e007      	b.n	8014548 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8014538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801453a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 801453c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801453e:	681b      	ldr	r3, [r3, #0]
 8014540:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8014542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014544:	2b00      	cmp	r3, #0
 8014546:	d1e9      	bne.n	801451c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8014548:	6a3b      	ldr	r3, [r7, #32]
 801454a:	2b00      	cmp	r3, #0
 801454c:	d022      	beq.n	8014594 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801454e:	68fb      	ldr	r3, [r7, #12]
 8014550:	685b      	ldr	r3, [r3, #4]
 8014552:	2b00      	cmp	r3, #0
 8014554:	d106      	bne.n	8014564 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8014556:	4b15      	ldr	r3, [pc, #84]	; (80145ac <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014558:	f240 12df 	movw	r2, #479	; 0x1df
 801455c:	4917      	ldr	r1, [pc, #92]	; (80145bc <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801455e:	4815      	ldr	r0, [pc, #84]	; (80145b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014560:	f000 ff8c 	bl	801547c <iprintf>
          LWIP_ASSERT("sanity check",
 8014564:	68fb      	ldr	r3, [r7, #12]
 8014566:	685b      	ldr	r3, [r3, #4]
 8014568:	685b      	ldr	r3, [r3, #4]
 801456a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801456c:	429a      	cmp	r2, r3
 801456e:	d106      	bne.n	801457e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8014570:	4b0e      	ldr	r3, [pc, #56]	; (80145ac <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014572:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8014576:	4911      	ldr	r1, [pc, #68]	; (80145bc <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8014578:	480e      	ldr	r0, [pc, #56]	; (80145b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801457a:	f000 ff7f 	bl	801547c <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801457e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014580:	681b      	ldr	r3, [r3, #0]
 8014582:	2b00      	cmp	r3, #0
 8014584:	d006      	beq.n	8014594 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8014586:	4b09      	ldr	r3, [pc, #36]	; (80145ac <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014588:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 801458c:	490c      	ldr	r1, [pc, #48]	; (80145c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801458e:	4809      	ldr	r0, [pc, #36]	; (80145b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014590:	f000 ff74 	bl	801547c <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8014594:	6a3b      	ldr	r3, [r7, #32]
 8014596:	2b00      	cmp	r3, #0
 8014598:	bf14      	ite	ne
 801459a:	2301      	movne	r3, #1
 801459c:	2300      	moveq	r3, #0
 801459e:	b2db      	uxtb	r3, r3
 80145a0:	e000      	b.n	80145a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80145a2:	2300      	movs	r3, #0
}
 80145a4:	4618      	mov	r0, r3
 80145a6:	3730      	adds	r7, #48	; 0x30
 80145a8:	46bd      	mov	sp, r7
 80145aa:	bd80      	pop	{r7, pc}
 80145ac:	08019610 	.word	0x08019610
 80145b0:	080196f4 	.word	0x080196f4
 80145b4:	08019658 	.word	0x08019658
 80145b8:	08019714 	.word	0x08019714
 80145bc:	0801974c 	.word	0x0801974c
 80145c0:	0801975c 	.word	0x0801975c

080145c4 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80145c4:	b580      	push	{r7, lr}
 80145c6:	b08e      	sub	sp, #56	; 0x38
 80145c8:	af00      	add	r7, sp, #0
 80145ca:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80145cc:	687b      	ldr	r3, [r7, #4]
 80145ce:	685b      	ldr	r3, [r3, #4]
 80145d0:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80145d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80145d4:	781b      	ldrb	r3, [r3, #0]
 80145d6:	f003 030f 	and.w	r3, r3, #15
 80145da:	b2db      	uxtb	r3, r3
 80145dc:	009b      	lsls	r3, r3, #2
 80145de:	b2db      	uxtb	r3, r3
 80145e0:	2b14      	cmp	r3, #20
 80145e2:	f040 8167 	bne.w	80148b4 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80145e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80145e8:	88db      	ldrh	r3, [r3, #6]
 80145ea:	b29b      	uxth	r3, r3
 80145ec:	4618      	mov	r0, r3
 80145ee:	f7f5 fdf1 	bl	800a1d4 <lwip_htons>
 80145f2:	4603      	mov	r3, r0
 80145f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80145f8:	b29b      	uxth	r3, r3
 80145fa:	00db      	lsls	r3, r3, #3
 80145fc:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80145fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014600:	885b      	ldrh	r3, [r3, #2]
 8014602:	b29b      	uxth	r3, r3
 8014604:	4618      	mov	r0, r3
 8014606:	f7f5 fde5 	bl	800a1d4 <lwip_htons>
 801460a:	4603      	mov	r3, r0
 801460c:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801460e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014610:	781b      	ldrb	r3, [r3, #0]
 8014612:	f003 030f 	and.w	r3, r3, #15
 8014616:	b2db      	uxtb	r3, r3
 8014618:	009b      	lsls	r3, r3, #2
 801461a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801461e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8014622:	b29b      	uxth	r3, r3
 8014624:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8014626:	429a      	cmp	r2, r3
 8014628:	f0c0 8146 	bcc.w	80148b8 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801462c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8014630:	b29b      	uxth	r3, r3
 8014632:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8014634:	1ad3      	subs	r3, r2, r3
 8014636:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8014638:	6878      	ldr	r0, [r7, #4]
 801463a:	f7f7 fa05 	bl	800ba48 <pbuf_clen>
 801463e:	4603      	mov	r3, r0
 8014640:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8014642:	4b9f      	ldr	r3, [pc, #636]	; (80148c0 <ip4_reass+0x2fc>)
 8014644:	881b      	ldrh	r3, [r3, #0]
 8014646:	461a      	mov	r2, r3
 8014648:	8c3b      	ldrh	r3, [r7, #32]
 801464a:	4413      	add	r3, r2
 801464c:	2b0a      	cmp	r3, #10
 801464e:	dd10      	ble.n	8014672 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8014650:	8c3b      	ldrh	r3, [r7, #32]
 8014652:	4619      	mov	r1, r3
 8014654:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014656:	f7ff fd81 	bl	801415c <ip_reass_remove_oldest_datagram>
 801465a:	4603      	mov	r3, r0
 801465c:	2b00      	cmp	r3, #0
 801465e:	f000 812d 	beq.w	80148bc <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8014662:	4b97      	ldr	r3, [pc, #604]	; (80148c0 <ip4_reass+0x2fc>)
 8014664:	881b      	ldrh	r3, [r3, #0]
 8014666:	461a      	mov	r2, r3
 8014668:	8c3b      	ldrh	r3, [r7, #32]
 801466a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801466c:	2b0a      	cmp	r3, #10
 801466e:	f300 8125 	bgt.w	80148bc <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8014672:	4b94      	ldr	r3, [pc, #592]	; (80148c4 <ip4_reass+0x300>)
 8014674:	681b      	ldr	r3, [r3, #0]
 8014676:	633b      	str	r3, [r7, #48]	; 0x30
 8014678:	e015      	b.n	80146a6 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801467a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801467c:	695a      	ldr	r2, [r3, #20]
 801467e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014680:	68db      	ldr	r3, [r3, #12]
 8014682:	429a      	cmp	r2, r3
 8014684:	d10c      	bne.n	80146a0 <ip4_reass+0xdc>
 8014686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014688:	699a      	ldr	r2, [r3, #24]
 801468a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801468c:	691b      	ldr	r3, [r3, #16]
 801468e:	429a      	cmp	r2, r3
 8014690:	d106      	bne.n	80146a0 <ip4_reass+0xdc>
 8014692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014694:	899a      	ldrh	r2, [r3, #12]
 8014696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014698:	889b      	ldrh	r3, [r3, #4]
 801469a:	b29b      	uxth	r3, r3
 801469c:	429a      	cmp	r2, r3
 801469e:	d006      	beq.n	80146ae <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80146a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146a2:	681b      	ldr	r3, [r3, #0]
 80146a4:	633b      	str	r3, [r7, #48]	; 0x30
 80146a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146a8:	2b00      	cmp	r3, #0
 80146aa:	d1e6      	bne.n	801467a <ip4_reass+0xb6>
 80146ac:	e000      	b.n	80146b0 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80146ae:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80146b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146b2:	2b00      	cmp	r3, #0
 80146b4:	d109      	bne.n	80146ca <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80146b6:	8c3b      	ldrh	r3, [r7, #32]
 80146b8:	4619      	mov	r1, r3
 80146ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80146bc:	f7ff fdb0 	bl	8014220 <ip_reass_enqueue_new_datagram>
 80146c0:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80146c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146c4:	2b00      	cmp	r3, #0
 80146c6:	d11c      	bne.n	8014702 <ip4_reass+0x13e>
      goto nullreturn;
 80146c8:	e109      	b.n	80148de <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80146ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80146cc:	88db      	ldrh	r3, [r3, #6]
 80146ce:	b29b      	uxth	r3, r3
 80146d0:	4618      	mov	r0, r3
 80146d2:	f7f5 fd7f 	bl	800a1d4 <lwip_htons>
 80146d6:	4603      	mov	r3, r0
 80146d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80146dc:	2b00      	cmp	r3, #0
 80146de:	d110      	bne.n	8014702 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80146e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146e2:	89db      	ldrh	r3, [r3, #14]
 80146e4:	4618      	mov	r0, r3
 80146e6:	f7f5 fd75 	bl	800a1d4 <lwip_htons>
 80146ea:	4603      	mov	r3, r0
 80146ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80146f0:	2b00      	cmp	r3, #0
 80146f2:	d006      	beq.n	8014702 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80146f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146f6:	3308      	adds	r3, #8
 80146f8:	2214      	movs	r2, #20
 80146fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80146fc:	4618      	mov	r0, r3
 80146fe:	f000 fe4c 	bl	801539a <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8014702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014704:	88db      	ldrh	r3, [r3, #6]
 8014706:	b29b      	uxth	r3, r3
 8014708:	f003 0320 	and.w	r3, r3, #32
 801470c:	2b00      	cmp	r3, #0
 801470e:	bf0c      	ite	eq
 8014710:	2301      	moveq	r3, #1
 8014712:	2300      	movne	r3, #0
 8014714:	b2db      	uxtb	r3, r3
 8014716:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8014718:	69fb      	ldr	r3, [r7, #28]
 801471a:	2b00      	cmp	r3, #0
 801471c:	d00e      	beq.n	801473c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801471e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8014720:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014722:	4413      	add	r3, r2
 8014724:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8014726:	8b7a      	ldrh	r2, [r7, #26]
 8014728:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801472a:	429a      	cmp	r2, r3
 801472c:	f0c0 80a0 	bcc.w	8014870 <ip4_reass+0x2ac>
 8014730:	8b7b      	ldrh	r3, [r7, #26]
 8014732:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8014736:	4293      	cmp	r3, r2
 8014738:	f200 809a 	bhi.w	8014870 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801473c:	69fa      	ldr	r2, [r7, #28]
 801473e:	6879      	ldr	r1, [r7, #4]
 8014740:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014742:	f7ff fdd5 	bl	80142f0 <ip_reass_chain_frag_into_datagram_and_validate>
 8014746:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8014748:	697b      	ldr	r3, [r7, #20]
 801474a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801474e:	f000 8091 	beq.w	8014874 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8014752:	4b5b      	ldr	r3, [pc, #364]	; (80148c0 <ip4_reass+0x2fc>)
 8014754:	881a      	ldrh	r2, [r3, #0]
 8014756:	8c3b      	ldrh	r3, [r7, #32]
 8014758:	4413      	add	r3, r2
 801475a:	b29a      	uxth	r2, r3
 801475c:	4b58      	ldr	r3, [pc, #352]	; (80148c0 <ip4_reass+0x2fc>)
 801475e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8014760:	69fb      	ldr	r3, [r7, #28]
 8014762:	2b00      	cmp	r3, #0
 8014764:	d00d      	beq.n	8014782 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8014766:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8014768:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801476a:	4413      	add	r3, r2
 801476c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801476e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014770:	8a7a      	ldrh	r2, [r7, #18]
 8014772:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8014774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014776:	7f9b      	ldrb	r3, [r3, #30]
 8014778:	f043 0301 	orr.w	r3, r3, #1
 801477c:	b2da      	uxtb	r2, r3
 801477e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014780:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8014782:	697b      	ldr	r3, [r7, #20]
 8014784:	2b01      	cmp	r3, #1
 8014786:	d171      	bne.n	801486c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8014788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801478a:	8b9b      	ldrh	r3, [r3, #28]
 801478c:	3314      	adds	r3, #20
 801478e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8014790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014792:	685b      	ldr	r3, [r3, #4]
 8014794:	685b      	ldr	r3, [r3, #4]
 8014796:	681b      	ldr	r3, [r3, #0]
 8014798:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801479a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801479c:	685b      	ldr	r3, [r3, #4]
 801479e:	685b      	ldr	r3, [r3, #4]
 80147a0:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80147a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147a4:	3308      	adds	r3, #8
 80147a6:	2214      	movs	r2, #20
 80147a8:	4619      	mov	r1, r3
 80147aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80147ac:	f000 fdf5 	bl	801539a <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80147b0:	8a3b      	ldrh	r3, [r7, #16]
 80147b2:	4618      	mov	r0, r3
 80147b4:	f7f5 fd0e 	bl	800a1d4 <lwip_htons>
 80147b8:	4603      	mov	r3, r0
 80147ba:	461a      	mov	r2, r3
 80147bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80147be:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80147c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80147c2:	2200      	movs	r2, #0
 80147c4:	719a      	strb	r2, [r3, #6]
 80147c6:	2200      	movs	r2, #0
 80147c8:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80147ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80147cc:	2200      	movs	r2, #0
 80147ce:	729a      	strb	r2, [r3, #10]
 80147d0:	2200      	movs	r2, #0
 80147d2:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80147d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147d6:	685b      	ldr	r3, [r3, #4]
 80147d8:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80147da:	e00d      	b.n	80147f8 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80147dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80147de:	685b      	ldr	r3, [r3, #4]
 80147e0:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80147e2:	2114      	movs	r1, #20
 80147e4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80147e6:	f7f7 f81b 	bl	800b820 <pbuf_remove_header>
      pbuf_cat(p, r);
 80147ea:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80147ec:	6878      	ldr	r0, [r7, #4]
 80147ee:	f7f7 f96b 	bl	800bac8 <pbuf_cat>
      r = iprh->next_pbuf;
 80147f2:	68fb      	ldr	r3, [r7, #12]
 80147f4:	681b      	ldr	r3, [r3, #0]
 80147f6:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 80147f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80147fa:	2b00      	cmp	r3, #0
 80147fc:	d1ee      	bne.n	80147dc <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80147fe:	4b31      	ldr	r3, [pc, #196]	; (80148c4 <ip4_reass+0x300>)
 8014800:	681b      	ldr	r3, [r3, #0]
 8014802:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014804:	429a      	cmp	r2, r3
 8014806:	d102      	bne.n	801480e <ip4_reass+0x24a>
      ipr_prev = NULL;
 8014808:	2300      	movs	r3, #0
 801480a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801480c:	e010      	b.n	8014830 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801480e:	4b2d      	ldr	r3, [pc, #180]	; (80148c4 <ip4_reass+0x300>)
 8014810:	681b      	ldr	r3, [r3, #0]
 8014812:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014814:	e007      	b.n	8014826 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8014816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014818:	681b      	ldr	r3, [r3, #0]
 801481a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801481c:	429a      	cmp	r2, r3
 801481e:	d006      	beq.n	801482e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8014820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014822:	681b      	ldr	r3, [r3, #0]
 8014824:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014828:	2b00      	cmp	r3, #0
 801482a:	d1f4      	bne.n	8014816 <ip4_reass+0x252>
 801482c:	e000      	b.n	8014830 <ip4_reass+0x26c>
          break;
 801482e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8014830:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014832:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014834:	f7ff fd2e 	bl	8014294 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8014838:	6878      	ldr	r0, [r7, #4]
 801483a:	f7f7 f905 	bl	800ba48 <pbuf_clen>
 801483e:	4603      	mov	r3, r0
 8014840:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8014842:	4b1f      	ldr	r3, [pc, #124]	; (80148c0 <ip4_reass+0x2fc>)
 8014844:	881b      	ldrh	r3, [r3, #0]
 8014846:	8c3a      	ldrh	r2, [r7, #32]
 8014848:	429a      	cmp	r2, r3
 801484a:	d906      	bls.n	801485a <ip4_reass+0x296>
 801484c:	4b1e      	ldr	r3, [pc, #120]	; (80148c8 <ip4_reass+0x304>)
 801484e:	f240 229b 	movw	r2, #667	; 0x29b
 8014852:	491e      	ldr	r1, [pc, #120]	; (80148cc <ip4_reass+0x308>)
 8014854:	481e      	ldr	r0, [pc, #120]	; (80148d0 <ip4_reass+0x30c>)
 8014856:	f000 fe11 	bl	801547c <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801485a:	4b19      	ldr	r3, [pc, #100]	; (80148c0 <ip4_reass+0x2fc>)
 801485c:	881a      	ldrh	r2, [r3, #0]
 801485e:	8c3b      	ldrh	r3, [r7, #32]
 8014860:	1ad3      	subs	r3, r2, r3
 8014862:	b29a      	uxth	r2, r3
 8014864:	4b16      	ldr	r3, [pc, #88]	; (80148c0 <ip4_reass+0x2fc>)
 8014866:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8014868:	687b      	ldr	r3, [r7, #4]
 801486a:	e03c      	b.n	80148e6 <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801486c:	2300      	movs	r3, #0
 801486e:	e03a      	b.n	80148e6 <ip4_reass+0x322>
      goto nullreturn_ipr;
 8014870:	bf00      	nop
 8014872:	e000      	b.n	8014876 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 8014874:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8014876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014878:	2b00      	cmp	r3, #0
 801487a:	d106      	bne.n	801488a <ip4_reass+0x2c6>
 801487c:	4b12      	ldr	r3, [pc, #72]	; (80148c8 <ip4_reass+0x304>)
 801487e:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8014882:	4914      	ldr	r1, [pc, #80]	; (80148d4 <ip4_reass+0x310>)
 8014884:	4812      	ldr	r0, [pc, #72]	; (80148d0 <ip4_reass+0x30c>)
 8014886:	f000 fdf9 	bl	801547c <iprintf>
  if (ipr->p == NULL) {
 801488a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801488c:	685b      	ldr	r3, [r3, #4]
 801488e:	2b00      	cmp	r3, #0
 8014890:	d124      	bne.n	80148dc <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8014892:	4b0c      	ldr	r3, [pc, #48]	; (80148c4 <ip4_reass+0x300>)
 8014894:	681b      	ldr	r3, [r3, #0]
 8014896:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014898:	429a      	cmp	r2, r3
 801489a:	d006      	beq.n	80148aa <ip4_reass+0x2e6>
 801489c:	4b0a      	ldr	r3, [pc, #40]	; (80148c8 <ip4_reass+0x304>)
 801489e:	f240 22ab 	movw	r2, #683	; 0x2ab
 80148a2:	490d      	ldr	r1, [pc, #52]	; (80148d8 <ip4_reass+0x314>)
 80148a4:	480a      	ldr	r0, [pc, #40]	; (80148d0 <ip4_reass+0x30c>)
 80148a6:	f000 fde9 	bl	801547c <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80148aa:	2100      	movs	r1, #0
 80148ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80148ae:	f7ff fcf1 	bl	8014294 <ip_reass_dequeue_datagram>
 80148b2:	e014      	b.n	80148de <ip4_reass+0x31a>
    goto nullreturn;
 80148b4:	bf00      	nop
 80148b6:	e012      	b.n	80148de <ip4_reass+0x31a>
    goto nullreturn;
 80148b8:	bf00      	nop
 80148ba:	e010      	b.n	80148de <ip4_reass+0x31a>
      goto nullreturn;
 80148bc:	bf00      	nop
 80148be:	e00e      	b.n	80148de <ip4_reass+0x31a>
 80148c0:	20004c04 	.word	0x20004c04
 80148c4:	20004c00 	.word	0x20004c00
 80148c8:	08019610 	.word	0x08019610
 80148cc:	08019780 	.word	0x08019780
 80148d0:	08019658 	.word	0x08019658
 80148d4:	0801979c 	.word	0x0801979c
 80148d8:	080197a8 	.word	0x080197a8
  }

nullreturn:
 80148dc:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80148de:	6878      	ldr	r0, [r7, #4]
 80148e0:	f7f7 f824 	bl	800b92c <pbuf_free>
  return NULL;
 80148e4:	2300      	movs	r3, #0
}
 80148e6:	4618      	mov	r0, r3
 80148e8:	3738      	adds	r7, #56	; 0x38
 80148ea:	46bd      	mov	sp, r7
 80148ec:	bd80      	pop	{r7, pc}
 80148ee:	bf00      	nop

080148f0 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80148f0:	b580      	push	{r7, lr}
 80148f2:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80148f4:	2005      	movs	r0, #5
 80148f6:	f7f6 f923 	bl	800ab40 <memp_malloc>
 80148fa:	4603      	mov	r3, r0
}
 80148fc:	4618      	mov	r0, r3
 80148fe:	bd80      	pop	{r7, pc}

08014900 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8014900:	b580      	push	{r7, lr}
 8014902:	b082      	sub	sp, #8
 8014904:	af00      	add	r7, sp, #0
 8014906:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8014908:	687b      	ldr	r3, [r7, #4]
 801490a:	2b00      	cmp	r3, #0
 801490c:	d106      	bne.n	801491c <ip_frag_free_pbuf_custom_ref+0x1c>
 801490e:	4b07      	ldr	r3, [pc, #28]	; (801492c <ip_frag_free_pbuf_custom_ref+0x2c>)
 8014910:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8014914:	4906      	ldr	r1, [pc, #24]	; (8014930 <ip_frag_free_pbuf_custom_ref+0x30>)
 8014916:	4807      	ldr	r0, [pc, #28]	; (8014934 <ip_frag_free_pbuf_custom_ref+0x34>)
 8014918:	f000 fdb0 	bl	801547c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801491c:	6879      	ldr	r1, [r7, #4]
 801491e:	2005      	movs	r0, #5
 8014920:	f7f6 f960 	bl	800abe4 <memp_free>
}
 8014924:	bf00      	nop
 8014926:	3708      	adds	r7, #8
 8014928:	46bd      	mov	sp, r7
 801492a:	bd80      	pop	{r7, pc}
 801492c:	08019610 	.word	0x08019610
 8014930:	080197c8 	.word	0x080197c8
 8014934:	08019658 	.word	0x08019658

08014938 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8014938:	b580      	push	{r7, lr}
 801493a:	b084      	sub	sp, #16
 801493c:	af00      	add	r7, sp, #0
 801493e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8014940:	687b      	ldr	r3, [r7, #4]
 8014942:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8014944:	68fb      	ldr	r3, [r7, #12]
 8014946:	2b00      	cmp	r3, #0
 8014948:	d106      	bne.n	8014958 <ipfrag_free_pbuf_custom+0x20>
 801494a:	4b11      	ldr	r3, [pc, #68]	; (8014990 <ipfrag_free_pbuf_custom+0x58>)
 801494c:	f240 22ce 	movw	r2, #718	; 0x2ce
 8014950:	4910      	ldr	r1, [pc, #64]	; (8014994 <ipfrag_free_pbuf_custom+0x5c>)
 8014952:	4811      	ldr	r0, [pc, #68]	; (8014998 <ipfrag_free_pbuf_custom+0x60>)
 8014954:	f000 fd92 	bl	801547c <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8014958:	68fa      	ldr	r2, [r7, #12]
 801495a:	687b      	ldr	r3, [r7, #4]
 801495c:	429a      	cmp	r2, r3
 801495e:	d006      	beq.n	801496e <ipfrag_free_pbuf_custom+0x36>
 8014960:	4b0b      	ldr	r3, [pc, #44]	; (8014990 <ipfrag_free_pbuf_custom+0x58>)
 8014962:	f240 22cf 	movw	r2, #719	; 0x2cf
 8014966:	490d      	ldr	r1, [pc, #52]	; (801499c <ipfrag_free_pbuf_custom+0x64>)
 8014968:	480b      	ldr	r0, [pc, #44]	; (8014998 <ipfrag_free_pbuf_custom+0x60>)
 801496a:	f000 fd87 	bl	801547c <iprintf>
  if (pcr->original != NULL) {
 801496e:	68fb      	ldr	r3, [r7, #12]
 8014970:	695b      	ldr	r3, [r3, #20]
 8014972:	2b00      	cmp	r3, #0
 8014974:	d004      	beq.n	8014980 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8014976:	68fb      	ldr	r3, [r7, #12]
 8014978:	695b      	ldr	r3, [r3, #20]
 801497a:	4618      	mov	r0, r3
 801497c:	f7f6 ffd6 	bl	800b92c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8014980:	68f8      	ldr	r0, [r7, #12]
 8014982:	f7ff ffbd 	bl	8014900 <ip_frag_free_pbuf_custom_ref>
}
 8014986:	bf00      	nop
 8014988:	3710      	adds	r7, #16
 801498a:	46bd      	mov	sp, r7
 801498c:	bd80      	pop	{r7, pc}
 801498e:	bf00      	nop
 8014990:	08019610 	.word	0x08019610
 8014994:	080197d4 	.word	0x080197d4
 8014998:	08019658 	.word	0x08019658
 801499c:	080197e0 	.word	0x080197e0

080149a0 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80149a0:	b580      	push	{r7, lr}
 80149a2:	b094      	sub	sp, #80	; 0x50
 80149a4:	af02      	add	r7, sp, #8
 80149a6:	60f8      	str	r0, [r7, #12]
 80149a8:	60b9      	str	r1, [r7, #8]
 80149aa:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80149ac:	2300      	movs	r3, #0
 80149ae:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80149b2:	68bb      	ldr	r3, [r7, #8]
 80149b4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80149b6:	3b14      	subs	r3, #20
 80149b8:	2b00      	cmp	r3, #0
 80149ba:	da00      	bge.n	80149be <ip4_frag+0x1e>
 80149bc:	3307      	adds	r3, #7
 80149be:	10db      	asrs	r3, r3, #3
 80149c0:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80149c2:	2314      	movs	r3, #20
 80149c4:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80149c6:	68fb      	ldr	r3, [r7, #12]
 80149c8:	685b      	ldr	r3, [r3, #4]
 80149ca:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 80149cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80149ce:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80149d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80149d2:	781b      	ldrb	r3, [r3, #0]
 80149d4:	f003 030f 	and.w	r3, r3, #15
 80149d8:	b2db      	uxtb	r3, r3
 80149da:	009b      	lsls	r3, r3, #2
 80149dc:	b2db      	uxtb	r3, r3
 80149de:	2b14      	cmp	r3, #20
 80149e0:	d002      	beq.n	80149e8 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80149e2:	f06f 0305 	mvn.w	r3, #5
 80149e6:	e110      	b.n	8014c0a <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80149e8:	68fb      	ldr	r3, [r7, #12]
 80149ea:	895b      	ldrh	r3, [r3, #10]
 80149ec:	2b13      	cmp	r3, #19
 80149ee:	d809      	bhi.n	8014a04 <ip4_frag+0x64>
 80149f0:	4b88      	ldr	r3, [pc, #544]	; (8014c14 <ip4_frag+0x274>)
 80149f2:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 80149f6:	4988      	ldr	r1, [pc, #544]	; (8014c18 <ip4_frag+0x278>)
 80149f8:	4888      	ldr	r0, [pc, #544]	; (8014c1c <ip4_frag+0x27c>)
 80149fa:	f000 fd3f 	bl	801547c <iprintf>
 80149fe:	f06f 0305 	mvn.w	r3, #5
 8014a02:	e102      	b.n	8014c0a <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8014a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a06:	88db      	ldrh	r3, [r3, #6]
 8014a08:	b29b      	uxth	r3, r3
 8014a0a:	4618      	mov	r0, r3
 8014a0c:	f7f5 fbe2 	bl	800a1d4 <lwip_htons>
 8014a10:	4603      	mov	r3, r0
 8014a12:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8014a14:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014a16:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014a1a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8014a1e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014a20:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8014a24:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8014a26:	68fb      	ldr	r3, [r7, #12]
 8014a28:	891b      	ldrh	r3, [r3, #8]
 8014a2a:	3b14      	subs	r3, #20
 8014a2c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8014a30:	e0e1      	b.n	8014bf6 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8014a32:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014a34:	00db      	lsls	r3, r3, #3
 8014a36:	b29b      	uxth	r3, r3
 8014a38:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014a3c:	4293      	cmp	r3, r2
 8014a3e:	bf28      	it	cs
 8014a40:	4613      	movcs	r3, r2
 8014a42:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8014a44:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014a48:	2114      	movs	r1, #20
 8014a4a:	200e      	movs	r0, #14
 8014a4c:	f7f6 fc8a 	bl	800b364 <pbuf_alloc>
 8014a50:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8014a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a54:	2b00      	cmp	r3, #0
 8014a56:	f000 80d5 	beq.w	8014c04 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8014a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a5c:	895b      	ldrh	r3, [r3, #10]
 8014a5e:	2b13      	cmp	r3, #19
 8014a60:	d806      	bhi.n	8014a70 <ip4_frag+0xd0>
 8014a62:	4b6c      	ldr	r3, [pc, #432]	; (8014c14 <ip4_frag+0x274>)
 8014a64:	f44f 7249 	mov.w	r2, #804	; 0x324
 8014a68:	496d      	ldr	r1, [pc, #436]	; (8014c20 <ip4_frag+0x280>)
 8014a6a:	486c      	ldr	r0, [pc, #432]	; (8014c1c <ip4_frag+0x27c>)
 8014a6c:	f000 fd06 	bl	801547c <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8014a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a72:	685b      	ldr	r3, [r3, #4]
 8014a74:	2214      	movs	r2, #20
 8014a76:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8014a78:	4618      	mov	r0, r3
 8014a7a:	f000 fc8e 	bl	801539a <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8014a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a80:	685b      	ldr	r3, [r3, #4]
 8014a82:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8014a84:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8014a86:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8014a8a:	e064      	b.n	8014b56 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8014a8c:	68fb      	ldr	r3, [r7, #12]
 8014a8e:	895a      	ldrh	r2, [r3, #10]
 8014a90:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8014a92:	1ad3      	subs	r3, r2, r3
 8014a94:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8014a96:	68fb      	ldr	r3, [r7, #12]
 8014a98:	895b      	ldrh	r3, [r3, #10]
 8014a9a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8014a9c:	429a      	cmp	r2, r3
 8014a9e:	d906      	bls.n	8014aae <ip4_frag+0x10e>
 8014aa0:	4b5c      	ldr	r3, [pc, #368]	; (8014c14 <ip4_frag+0x274>)
 8014aa2:	f240 322d 	movw	r2, #813	; 0x32d
 8014aa6:	495f      	ldr	r1, [pc, #380]	; (8014c24 <ip4_frag+0x284>)
 8014aa8:	485c      	ldr	r0, [pc, #368]	; (8014c1c <ip4_frag+0x27c>)
 8014aaa:	f000 fce7 	bl	801547c <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8014aae:	8bfa      	ldrh	r2, [r7, #30]
 8014ab0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8014ab4:	4293      	cmp	r3, r2
 8014ab6:	bf28      	it	cs
 8014ab8:	4613      	movcs	r3, r2
 8014aba:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8014abe:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8014ac2:	2b00      	cmp	r3, #0
 8014ac4:	d105      	bne.n	8014ad2 <ip4_frag+0x132>
        poff = 0;
 8014ac6:	2300      	movs	r3, #0
 8014ac8:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8014aca:	68fb      	ldr	r3, [r7, #12]
 8014acc:	681b      	ldr	r3, [r3, #0]
 8014ace:	60fb      	str	r3, [r7, #12]
        continue;
 8014ad0:	e041      	b.n	8014b56 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8014ad2:	f7ff ff0d 	bl	80148f0 <ip_frag_alloc_pbuf_custom_ref>
 8014ad6:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8014ad8:	69bb      	ldr	r3, [r7, #24]
 8014ada:	2b00      	cmp	r3, #0
 8014adc:	d103      	bne.n	8014ae6 <ip4_frag+0x146>
        pbuf_free(rambuf);
 8014ade:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014ae0:	f7f6 ff24 	bl	800b92c <pbuf_free>
        goto memerr;
 8014ae4:	e08f      	b.n	8014c06 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8014ae6:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8014ae8:	68fb      	ldr	r3, [r7, #12]
 8014aea:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8014aec:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8014aee:	4413      	add	r3, r2
 8014af0:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8014af4:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8014af8:	9201      	str	r2, [sp, #4]
 8014afa:	9300      	str	r3, [sp, #0]
 8014afc:	4603      	mov	r3, r0
 8014afe:	2241      	movs	r2, #65	; 0x41
 8014b00:	2000      	movs	r0, #0
 8014b02:	f7f6 fd59 	bl	800b5b8 <pbuf_alloced_custom>
 8014b06:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8014b08:	697b      	ldr	r3, [r7, #20]
 8014b0a:	2b00      	cmp	r3, #0
 8014b0c:	d106      	bne.n	8014b1c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8014b0e:	69b8      	ldr	r0, [r7, #24]
 8014b10:	f7ff fef6 	bl	8014900 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8014b14:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014b16:	f7f6 ff09 	bl	800b92c <pbuf_free>
        goto memerr;
 8014b1a:	e074      	b.n	8014c06 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8014b1c:	68f8      	ldr	r0, [r7, #12]
 8014b1e:	f7f6 ffab 	bl	800ba78 <pbuf_ref>
      pcr->original = p;
 8014b22:	69bb      	ldr	r3, [r7, #24]
 8014b24:	68fa      	ldr	r2, [r7, #12]
 8014b26:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8014b28:	69bb      	ldr	r3, [r7, #24]
 8014b2a:	4a3f      	ldr	r2, [pc, #252]	; (8014c28 <ip4_frag+0x288>)
 8014b2c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8014b2e:	6979      	ldr	r1, [r7, #20]
 8014b30:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014b32:	f7f6 ffc9 	bl	800bac8 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8014b36:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8014b3a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8014b3e:	1ad3      	subs	r3, r2, r3
 8014b40:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8014b44:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8014b48:	2b00      	cmp	r3, #0
 8014b4a:	d004      	beq.n	8014b56 <ip4_frag+0x1b6>
        poff = 0;
 8014b4c:	2300      	movs	r3, #0
 8014b4e:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8014b50:	68fb      	ldr	r3, [r7, #12]
 8014b52:	681b      	ldr	r3, [r3, #0]
 8014b54:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8014b56:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8014b5a:	2b00      	cmp	r3, #0
 8014b5c:	d196      	bne.n	8014a8c <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8014b5e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8014b60:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8014b64:	4413      	add	r3, r2
 8014b66:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8014b68:	68bb      	ldr	r3, [r7, #8]
 8014b6a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8014b6c:	f1a3 0213 	sub.w	r2, r3, #19
 8014b70:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014b74:	429a      	cmp	r2, r3
 8014b76:	bfcc      	ite	gt
 8014b78:	2301      	movgt	r3, #1
 8014b7a:	2300      	movle	r3, #0
 8014b7c:	b2db      	uxtb	r3, r3
 8014b7e:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8014b80:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8014b84:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014b88:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8014b8a:	6a3b      	ldr	r3, [r7, #32]
 8014b8c:	2b00      	cmp	r3, #0
 8014b8e:	d002      	beq.n	8014b96 <ip4_frag+0x1f6>
 8014b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b92:	2b00      	cmp	r3, #0
 8014b94:	d003      	beq.n	8014b9e <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8014b96:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014b98:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8014b9c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8014b9e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014ba0:	4618      	mov	r0, r3
 8014ba2:	f7f5 fb17 	bl	800a1d4 <lwip_htons>
 8014ba6:	4603      	mov	r3, r0
 8014ba8:	461a      	mov	r2, r3
 8014baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014bac:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8014bae:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8014bb0:	3314      	adds	r3, #20
 8014bb2:	b29b      	uxth	r3, r3
 8014bb4:	4618      	mov	r0, r3
 8014bb6:	f7f5 fb0d 	bl	800a1d4 <lwip_htons>
 8014bba:	4603      	mov	r3, r0
 8014bbc:	461a      	mov	r2, r3
 8014bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014bc0:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8014bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014bc4:	2200      	movs	r2, #0
 8014bc6:	729a      	strb	r2, [r3, #10]
 8014bc8:	2200      	movs	r2, #0
 8014bca:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8014bcc:	68bb      	ldr	r3, [r7, #8]
 8014bce:	695b      	ldr	r3, [r3, #20]
 8014bd0:	687a      	ldr	r2, [r7, #4]
 8014bd2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014bd4:	68b8      	ldr	r0, [r7, #8]
 8014bd6:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8014bd8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014bda:	f7f6 fea7 	bl	800b92c <pbuf_free>
    left = (u16_t)(left - fragsize);
 8014bde:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014be2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8014be4:	1ad3      	subs	r3, r2, r3
 8014be6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8014bea:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8014bee:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014bf0:	4413      	add	r3, r2
 8014bf2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8014bf6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014bfa:	2b00      	cmp	r3, #0
 8014bfc:	f47f af19 	bne.w	8014a32 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8014c00:	2300      	movs	r3, #0
 8014c02:	e002      	b.n	8014c0a <ip4_frag+0x26a>
      goto memerr;
 8014c04:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8014c06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8014c0a:	4618      	mov	r0, r3
 8014c0c:	3748      	adds	r7, #72	; 0x48
 8014c0e:	46bd      	mov	sp, r7
 8014c10:	bd80      	pop	{r7, pc}
 8014c12:	bf00      	nop
 8014c14:	08019610 	.word	0x08019610
 8014c18:	080197ec 	.word	0x080197ec
 8014c1c:	08019658 	.word	0x08019658
 8014c20:	08019808 	.word	0x08019808
 8014c24:	08019828 	.word	0x08019828
 8014c28:	08014939 	.word	0x08014939

08014c2c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8014c2c:	b580      	push	{r7, lr}
 8014c2e:	b086      	sub	sp, #24
 8014c30:	af00      	add	r7, sp, #0
 8014c32:	6078      	str	r0, [r7, #4]
 8014c34:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8014c36:	230e      	movs	r3, #14
 8014c38:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8014c3a:	687b      	ldr	r3, [r7, #4]
 8014c3c:	895b      	ldrh	r3, [r3, #10]
 8014c3e:	2b0e      	cmp	r3, #14
 8014c40:	d96e      	bls.n	8014d20 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8014c42:	687b      	ldr	r3, [r7, #4]
 8014c44:	7bdb      	ldrb	r3, [r3, #15]
 8014c46:	2b00      	cmp	r3, #0
 8014c48:	d106      	bne.n	8014c58 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8014c4a:	683b      	ldr	r3, [r7, #0]
 8014c4c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014c50:	3301      	adds	r3, #1
 8014c52:	b2da      	uxtb	r2, r3
 8014c54:	687b      	ldr	r3, [r7, #4]
 8014c56:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8014c58:	687b      	ldr	r3, [r7, #4]
 8014c5a:	685b      	ldr	r3, [r3, #4]
 8014c5c:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8014c5e:	693b      	ldr	r3, [r7, #16]
 8014c60:	7b1a      	ldrb	r2, [r3, #12]
 8014c62:	7b5b      	ldrb	r3, [r3, #13]
 8014c64:	021b      	lsls	r3, r3, #8
 8014c66:	4313      	orrs	r3, r2
 8014c68:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8014c6a:	693b      	ldr	r3, [r7, #16]
 8014c6c:	781b      	ldrb	r3, [r3, #0]
 8014c6e:	f003 0301 	and.w	r3, r3, #1
 8014c72:	2b00      	cmp	r3, #0
 8014c74:	d023      	beq.n	8014cbe <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8014c76:	693b      	ldr	r3, [r7, #16]
 8014c78:	781b      	ldrb	r3, [r3, #0]
 8014c7a:	2b01      	cmp	r3, #1
 8014c7c:	d10f      	bne.n	8014c9e <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8014c7e:	693b      	ldr	r3, [r7, #16]
 8014c80:	785b      	ldrb	r3, [r3, #1]
 8014c82:	2b00      	cmp	r3, #0
 8014c84:	d11b      	bne.n	8014cbe <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8014c86:	693b      	ldr	r3, [r7, #16]
 8014c88:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8014c8a:	2b5e      	cmp	r3, #94	; 0x5e
 8014c8c:	d117      	bne.n	8014cbe <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8014c8e:	687b      	ldr	r3, [r7, #4]
 8014c90:	7b5b      	ldrb	r3, [r3, #13]
 8014c92:	f043 0310 	orr.w	r3, r3, #16
 8014c96:	b2da      	uxtb	r2, r3
 8014c98:	687b      	ldr	r3, [r7, #4]
 8014c9a:	735a      	strb	r2, [r3, #13]
 8014c9c:	e00f      	b.n	8014cbe <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8014c9e:	693b      	ldr	r3, [r7, #16]
 8014ca0:	2206      	movs	r2, #6
 8014ca2:	4928      	ldr	r1, [pc, #160]	; (8014d44 <ethernet_input+0x118>)
 8014ca4:	4618      	mov	r0, r3
 8014ca6:	f000 fb6a 	bl	801537e <memcmp>
 8014caa:	4603      	mov	r3, r0
 8014cac:	2b00      	cmp	r3, #0
 8014cae:	d106      	bne.n	8014cbe <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8014cb0:	687b      	ldr	r3, [r7, #4]
 8014cb2:	7b5b      	ldrb	r3, [r3, #13]
 8014cb4:	f043 0308 	orr.w	r3, r3, #8
 8014cb8:	b2da      	uxtb	r2, r3
 8014cba:	687b      	ldr	r3, [r7, #4]
 8014cbc:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8014cbe:	89fb      	ldrh	r3, [r7, #14]
 8014cc0:	2b08      	cmp	r3, #8
 8014cc2:	d003      	beq.n	8014ccc <ethernet_input+0xa0>
 8014cc4:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8014cc8:	d014      	beq.n	8014cf4 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8014cca:	e032      	b.n	8014d32 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8014ccc:	683b      	ldr	r3, [r7, #0]
 8014cce:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014cd2:	f003 0308 	and.w	r3, r3, #8
 8014cd6:	2b00      	cmp	r3, #0
 8014cd8:	d024      	beq.n	8014d24 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8014cda:	8afb      	ldrh	r3, [r7, #22]
 8014cdc:	4619      	mov	r1, r3
 8014cde:	6878      	ldr	r0, [r7, #4]
 8014ce0:	f7f6 fd9e 	bl	800b820 <pbuf_remove_header>
 8014ce4:	4603      	mov	r3, r0
 8014ce6:	2b00      	cmp	r3, #0
 8014ce8:	d11e      	bne.n	8014d28 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8014cea:	6839      	ldr	r1, [r7, #0]
 8014cec:	6878      	ldr	r0, [r7, #4]
 8014cee:	f7fe ff27 	bl	8013b40 <ip4_input>
      break;
 8014cf2:	e013      	b.n	8014d1c <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8014cf4:	683b      	ldr	r3, [r7, #0]
 8014cf6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014cfa:	f003 0308 	and.w	r3, r3, #8
 8014cfe:	2b00      	cmp	r3, #0
 8014d00:	d014      	beq.n	8014d2c <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8014d02:	8afb      	ldrh	r3, [r7, #22]
 8014d04:	4619      	mov	r1, r3
 8014d06:	6878      	ldr	r0, [r7, #4]
 8014d08:	f7f6 fd8a 	bl	800b820 <pbuf_remove_header>
 8014d0c:	4603      	mov	r3, r0
 8014d0e:	2b00      	cmp	r3, #0
 8014d10:	d10e      	bne.n	8014d30 <ethernet_input+0x104>
        etharp_input(p, netif);
 8014d12:	6839      	ldr	r1, [r7, #0]
 8014d14:	6878      	ldr	r0, [r7, #4]
 8014d16:	f7fe f8c7 	bl	8012ea8 <etharp_input>
      break;
 8014d1a:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8014d1c:	2300      	movs	r3, #0
 8014d1e:	e00c      	b.n	8014d3a <ethernet_input+0x10e>
    goto free_and_return;
 8014d20:	bf00      	nop
 8014d22:	e006      	b.n	8014d32 <ethernet_input+0x106>
        goto free_and_return;
 8014d24:	bf00      	nop
 8014d26:	e004      	b.n	8014d32 <ethernet_input+0x106>
        goto free_and_return;
 8014d28:	bf00      	nop
 8014d2a:	e002      	b.n	8014d32 <ethernet_input+0x106>
        goto free_and_return;
 8014d2c:	bf00      	nop
 8014d2e:	e000      	b.n	8014d32 <ethernet_input+0x106>
        goto free_and_return;
 8014d30:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8014d32:	6878      	ldr	r0, [r7, #4]
 8014d34:	f7f6 fdfa 	bl	800b92c <pbuf_free>
  return ERR_OK;
 8014d38:	2300      	movs	r3, #0
}
 8014d3a:	4618      	mov	r0, r3
 8014d3c:	3718      	adds	r7, #24
 8014d3e:	46bd      	mov	sp, r7
 8014d40:	bd80      	pop	{r7, pc}
 8014d42:	bf00      	nop
 8014d44:	08019c44 	.word	0x08019c44

08014d48 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8014d48:	b580      	push	{r7, lr}
 8014d4a:	b086      	sub	sp, #24
 8014d4c:	af00      	add	r7, sp, #0
 8014d4e:	60f8      	str	r0, [r7, #12]
 8014d50:	60b9      	str	r1, [r7, #8]
 8014d52:	607a      	str	r2, [r7, #4]
 8014d54:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8014d56:	8c3b      	ldrh	r3, [r7, #32]
 8014d58:	4618      	mov	r0, r3
 8014d5a:	f7f5 fa3b 	bl	800a1d4 <lwip_htons>
 8014d5e:	4603      	mov	r3, r0
 8014d60:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8014d62:	210e      	movs	r1, #14
 8014d64:	68b8      	ldr	r0, [r7, #8]
 8014d66:	f7f6 fd4b 	bl	800b800 <pbuf_add_header>
 8014d6a:	4603      	mov	r3, r0
 8014d6c:	2b00      	cmp	r3, #0
 8014d6e:	d125      	bne.n	8014dbc <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8014d70:	68bb      	ldr	r3, [r7, #8]
 8014d72:	685b      	ldr	r3, [r3, #4]
 8014d74:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8014d76:	693b      	ldr	r3, [r7, #16]
 8014d78:	8afa      	ldrh	r2, [r7, #22]
 8014d7a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8014d7c:	693b      	ldr	r3, [r7, #16]
 8014d7e:	2206      	movs	r2, #6
 8014d80:	6839      	ldr	r1, [r7, #0]
 8014d82:	4618      	mov	r0, r3
 8014d84:	f000 fb09 	bl	801539a <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8014d88:	693b      	ldr	r3, [r7, #16]
 8014d8a:	3306      	adds	r3, #6
 8014d8c:	2206      	movs	r2, #6
 8014d8e:	6879      	ldr	r1, [r7, #4]
 8014d90:	4618      	mov	r0, r3
 8014d92:	f000 fb02 	bl	801539a <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8014d96:	68fb      	ldr	r3, [r7, #12]
 8014d98:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8014d9c:	2b06      	cmp	r3, #6
 8014d9e:	d006      	beq.n	8014dae <ethernet_output+0x66>
 8014da0:	4b0a      	ldr	r3, [pc, #40]	; (8014dcc <ethernet_output+0x84>)
 8014da2:	f44f 7299 	mov.w	r2, #306	; 0x132
 8014da6:	490a      	ldr	r1, [pc, #40]	; (8014dd0 <ethernet_output+0x88>)
 8014da8:	480a      	ldr	r0, [pc, #40]	; (8014dd4 <ethernet_output+0x8c>)
 8014daa:	f000 fb67 	bl	801547c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8014dae:	68fb      	ldr	r3, [r7, #12]
 8014db0:	699b      	ldr	r3, [r3, #24]
 8014db2:	68b9      	ldr	r1, [r7, #8]
 8014db4:	68f8      	ldr	r0, [r7, #12]
 8014db6:	4798      	blx	r3
 8014db8:	4603      	mov	r3, r0
 8014dba:	e002      	b.n	8014dc2 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8014dbc:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8014dbe:	f06f 0301 	mvn.w	r3, #1
}
 8014dc2:	4618      	mov	r0, r3
 8014dc4:	3718      	adds	r7, #24
 8014dc6:	46bd      	mov	sp, r7
 8014dc8:	bd80      	pop	{r7, pc}
 8014dca:	bf00      	nop
 8014dcc:	08019838 	.word	0x08019838
 8014dd0:	08019870 	.word	0x08019870
 8014dd4:	080198a4 	.word	0x080198a4

08014dd8 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8014dd8:	b580      	push	{r7, lr}
 8014dda:	b082      	sub	sp, #8
 8014ddc:	af00      	add	r7, sp, #0
 8014dde:	6078      	str	r0, [r7, #4]
 8014de0:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 8014de2:	683b      	ldr	r3, [r7, #0]
 8014de4:	2200      	movs	r2, #0
 8014de6:	2104      	movs	r1, #4
 8014de8:	4618      	mov	r0, r3
 8014dea:	f7ef fbe9 	bl	80045c0 <osMessageQueueNew>
 8014dee:	4602      	mov	r2, r0
 8014df0:	687b      	ldr	r3, [r7, #4]
 8014df2:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8014df4:	687b      	ldr	r3, [r7, #4]
 8014df6:	681b      	ldr	r3, [r3, #0]
 8014df8:	2b00      	cmp	r3, #0
 8014dfa:	d102      	bne.n	8014e02 <sys_mbox_new+0x2a>
    return ERR_MEM;
 8014dfc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014e00:	e000      	b.n	8014e04 <sys_mbox_new+0x2c>

  return ERR_OK;
 8014e02:	2300      	movs	r3, #0
}
 8014e04:	4618      	mov	r0, r3
 8014e06:	3708      	adds	r7, #8
 8014e08:	46bd      	mov	sp, r7
 8014e0a:	bd80      	pop	{r7, pc}

08014e0c <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8014e0c:	b580      	push	{r7, lr}
 8014e0e:	b082      	sub	sp, #8
 8014e10:	af00      	add	r7, sp, #0
 8014e12:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
#else
  if(osMessageQueueGetCount(*mbox))
 8014e14:	687b      	ldr	r3, [r7, #4]
 8014e16:	681b      	ldr	r3, [r3, #0]
 8014e18:	4618      	mov	r0, r3
 8014e1a:	f7ef fd03 	bl	8004824 <osMessageQueueGetCount>

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
#else
  osMessageQueueDelete(*mbox);
 8014e1e:	687b      	ldr	r3, [r7, #4]
 8014e20:	681b      	ldr	r3, [r3, #0]
 8014e22:	4618      	mov	r0, r3
 8014e24:	f7ef fd1e 	bl	8004864 <osMessageQueueDelete>
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8014e28:	bf00      	nop
 8014e2a:	3708      	adds	r7, #8
 8014e2c:	46bd      	mov	sp, r7
 8014e2e:	bd80      	pop	{r7, pc}

08014e30 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8014e30:	b580      	push	{r7, lr}
 8014e32:	b084      	sub	sp, #16
 8014e34:	af00      	add	r7, sp, #0
 8014e36:	6078      	str	r0, [r7, #4]
 8014e38:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 8014e3a:	687b      	ldr	r3, [r7, #4]
 8014e3c:	6818      	ldr	r0, [r3, #0]
 8014e3e:	4639      	mov	r1, r7
 8014e40:	2300      	movs	r3, #0
 8014e42:	2200      	movs	r2, #0
 8014e44:	f7ef fc30 	bl	80046a8 <osMessageQueuePut>
 8014e48:	4603      	mov	r3, r0
 8014e4a:	2b00      	cmp	r3, #0
 8014e4c:	d102      	bne.n	8014e54 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 8014e4e:	2300      	movs	r3, #0
 8014e50:	73fb      	strb	r3, [r7, #15]
 8014e52:	e001      	b.n	8014e58 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8014e54:	23ff      	movs	r3, #255	; 0xff
 8014e56:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8014e58:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014e5c:	4618      	mov	r0, r3
 8014e5e:	3710      	adds	r7, #16
 8014e60:	46bd      	mov	sp, r7
 8014e62:	bd80      	pop	{r7, pc}

08014e64 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8014e64:	b580      	push	{r7, lr}
 8014e66:	b086      	sub	sp, #24
 8014e68:	af00      	add	r7, sp, #0
 8014e6a:	60f8      	str	r0, [r7, #12]
 8014e6c:	60b9      	str	r1, [r7, #8]
 8014e6e:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 8014e70:	f7ef f892 	bl	8003f98 <osKernelGetTickCount>
 8014e74:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 8014e76:	687b      	ldr	r3, [r7, #4]
 8014e78:	2b00      	cmp	r3, #0
 8014e7a:	d013      	beq.n	8014ea4 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 8014e7c:	68fb      	ldr	r3, [r7, #12]
 8014e7e:	6818      	ldr	r0, [r3, #0]
 8014e80:	687b      	ldr	r3, [r7, #4]
 8014e82:	2200      	movs	r2, #0
 8014e84:	68b9      	ldr	r1, [r7, #8]
 8014e86:	f7ef fc6f 	bl	8004768 <osMessageQueueGet>
 8014e8a:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 8014e8c:	693b      	ldr	r3, [r7, #16]
 8014e8e:	2b00      	cmp	r3, #0
 8014e90:	d105      	bne.n	8014e9e <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 8014e92:	f7ef f881 	bl	8003f98 <osKernelGetTickCount>
 8014e96:	4602      	mov	r2, r0
 8014e98:	697b      	ldr	r3, [r7, #20]
 8014e9a:	1ad3      	subs	r3, r2, r3
 8014e9c:	e00f      	b.n	8014ebe <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8014e9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014ea2:	e00c      	b.n	8014ebe <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 8014ea4:	68fb      	ldr	r3, [r7, #12]
 8014ea6:	6818      	ldr	r0, [r3, #0]
 8014ea8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014eac:	2200      	movs	r2, #0
 8014eae:	68b9      	ldr	r1, [r7, #8]
 8014eb0:	f7ef fc5a 	bl	8004768 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 8014eb4:	f7ef f870 	bl	8003f98 <osKernelGetTickCount>
 8014eb8:	4602      	mov	r2, r0
 8014eba:	697b      	ldr	r3, [r7, #20]
 8014ebc:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 8014ebe:	4618      	mov	r0, r3
 8014ec0:	3718      	adds	r7, #24
 8014ec2:	46bd      	mov	sp, r7
 8014ec4:	bd80      	pop	{r7, pc}

08014ec6 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8014ec6:	b580      	push	{r7, lr}
 8014ec8:	b082      	sub	sp, #8
 8014eca:	af00      	add	r7, sp, #0
 8014ecc:	6078      	str	r0, [r7, #4]
 8014ece:	6039      	str	r1, [r7, #0]

  if(event.status == osEventMessage)
  {
    *msg = (void *)event.value.v;
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
 8014ed0:	687b      	ldr	r3, [r7, #4]
 8014ed2:	6818      	ldr	r0, [r3, #0]
 8014ed4:	2300      	movs	r3, #0
 8014ed6:	2200      	movs	r2, #0
 8014ed8:	6839      	ldr	r1, [r7, #0]
 8014eda:	f7ef fc45 	bl	8004768 <osMessageQueueGet>
 8014ede:	4603      	mov	r3, r0
 8014ee0:	2b00      	cmp	r3, #0
 8014ee2:	d101      	bne.n	8014ee8 <sys_arch_mbox_tryfetch+0x22>
  {
#endif
    return ERR_OK;
 8014ee4:	2300      	movs	r3, #0
 8014ee6:	e001      	b.n	8014eec <sys_arch_mbox_tryfetch+0x26>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 8014ee8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
}
 8014eec:	4618      	mov	r0, r3
 8014eee:	3708      	adds	r7, #8
 8014ef0:	46bd      	mov	sp, r7
 8014ef2:	bd80      	pop	{r7, pc}

08014ef4 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8014ef4:	b480      	push	{r7}
 8014ef6:	b083      	sub	sp, #12
 8014ef8:	af00      	add	r7, sp, #0
 8014efa:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8014efc:	687b      	ldr	r3, [r7, #4]
 8014efe:	681b      	ldr	r3, [r3, #0]
 8014f00:	2b00      	cmp	r3, #0
 8014f02:	d101      	bne.n	8014f08 <sys_mbox_valid+0x14>
    return 0;
 8014f04:	2300      	movs	r3, #0
 8014f06:	e000      	b.n	8014f0a <sys_mbox_valid+0x16>
  else
    return 1;
 8014f08:	2301      	movs	r3, #1
}
 8014f0a:	4618      	mov	r0, r3
 8014f0c:	370c      	adds	r7, #12
 8014f0e:	46bd      	mov	sp, r7
 8014f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f14:	4770      	bx	lr

08014f16 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 8014f16:	b480      	push	{r7}
 8014f18:	b083      	sub	sp, #12
 8014f1a:	af00      	add	r7, sp, #0
 8014f1c:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 8014f1e:	687b      	ldr	r3, [r7, #4]
 8014f20:	2200      	movs	r2, #0
 8014f22:	601a      	str	r2, [r3, #0]
}
 8014f24:	bf00      	nop
 8014f26:	370c      	adds	r7, #12
 8014f28:	46bd      	mov	sp, r7
 8014f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f2e:	4770      	bx	lr

08014f30 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8014f30:	b580      	push	{r7, lr}
 8014f32:	b082      	sub	sp, #8
 8014f34:	af00      	add	r7, sp, #0
 8014f36:	6078      	str	r0, [r7, #4]
 8014f38:	460b      	mov	r3, r1
 8014f3a:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
 8014f3c:	78fb      	ldrb	r3, [r7, #3]
 8014f3e:	2200      	movs	r2, #0
 8014f40:	4619      	mov	r1, r3
 8014f42:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8014f46:	f7ef f9f7 	bl	8004338 <osSemaphoreNew>
 8014f4a:	4602      	mov	r2, r0
 8014f4c:	687b      	ldr	r3, [r7, #4]
 8014f4e:	601a      	str	r2, [r3, #0]
#endif

  if(*sem == NULL)
 8014f50:	687b      	ldr	r3, [r7, #4]
 8014f52:	681b      	ldr	r3, [r3, #0]
 8014f54:	2b00      	cmp	r3, #0
 8014f56:	d102      	bne.n	8014f5e <sys_sem_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8014f58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014f5c:	e009      	b.n	8014f72 <sys_sem_new+0x42>
  }

  if(count == 0)	// Means it can't be taken
 8014f5e:	78fb      	ldrb	r3, [r7, #3]
 8014f60:	2b00      	cmp	r3, #0
 8014f62:	d105      	bne.n	8014f70 <sys_sem_new+0x40>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
#else
    osSemaphoreAcquire(*sem, 0);
 8014f64:	687b      	ldr	r3, [r7, #4]
 8014f66:	681b      	ldr	r3, [r3, #0]
 8014f68:	2100      	movs	r1, #0
 8014f6a:	4618      	mov	r0, r3
 8014f6c:	f7ef fa6e 	bl	800444c <osSemaphoreAcquire>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 8014f70:	2300      	movs	r3, #0
}
 8014f72:	4618      	mov	r0, r3
 8014f74:	3708      	adds	r7, #8
 8014f76:	46bd      	mov	sp, r7
 8014f78:	bd80      	pop	{r7, pc}

08014f7a <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 8014f7a:	b580      	push	{r7, lr}
 8014f7c:	b084      	sub	sp, #16
 8014f7e:	af00      	add	r7, sp, #0
 8014f80:	6078      	str	r0, [r7, #4]
 8014f82:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
#else
  uint32_t starttime = osKernelGetTickCount();
 8014f84:	f7ef f808 	bl	8003f98 <osKernelGetTickCount>
 8014f88:	60f8      	str	r0, [r7, #12]
#endif
  if(timeout != 0)
 8014f8a:	683b      	ldr	r3, [r7, #0]
 8014f8c:	2b00      	cmp	r3, #0
 8014f8e:	d011      	beq.n	8014fb4 <sys_arch_sem_wait+0x3a>
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
    {
      return (osKernelSysTick() - starttime);
#else
    if(osSemaphoreAcquire(*sem, timeout) == osOK)
 8014f90:	687b      	ldr	r3, [r7, #4]
 8014f92:	681b      	ldr	r3, [r3, #0]
 8014f94:	6839      	ldr	r1, [r7, #0]
 8014f96:	4618      	mov	r0, r3
 8014f98:	f7ef fa58 	bl	800444c <osSemaphoreAcquire>
 8014f9c:	4603      	mov	r3, r0
 8014f9e:	2b00      	cmp	r3, #0
 8014fa0:	d105      	bne.n	8014fae <sys_arch_sem_wait+0x34>
    {
        return (osKernelGetTickCount() - starttime);
 8014fa2:	f7ee fff9 	bl	8003f98 <osKernelGetTickCount>
 8014fa6:	4602      	mov	r2, r0
 8014fa8:	68fb      	ldr	r3, [r7, #12]
 8014faa:	1ad3      	subs	r3, r2, r3
 8014fac:	e012      	b.n	8014fd4 <sys_arch_sem_wait+0x5a>
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 8014fae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014fb2:	e00f      	b.n	8014fd4 <sys_arch_sem_wait+0x5a>
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
    return (osKernelSysTick() - starttime);
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
 8014fb4:	bf00      	nop
 8014fb6:	687b      	ldr	r3, [r7, #4]
 8014fb8:	681b      	ldr	r3, [r3, #0]
 8014fba:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8014fbe:	4618      	mov	r0, r3
 8014fc0:	f7ef fa44 	bl	800444c <osSemaphoreAcquire>
 8014fc4:	4603      	mov	r3, r0
 8014fc6:	2b00      	cmp	r3, #0
 8014fc8:	d1f5      	bne.n	8014fb6 <sys_arch_sem_wait+0x3c>
    return (osKernelGetTickCount() - starttime);
 8014fca:	f7ee ffe5 	bl	8003f98 <osKernelGetTickCount>
 8014fce:	4602      	mov	r2, r0
 8014fd0:	68fb      	ldr	r3, [r7, #12]
 8014fd2:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 8014fd4:	4618      	mov	r0, r3
 8014fd6:	3710      	adds	r7, #16
 8014fd8:	46bd      	mov	sp, r7
 8014fda:	bd80      	pop	{r7, pc}

08014fdc <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8014fdc:	b580      	push	{r7, lr}
 8014fde:	b082      	sub	sp, #8
 8014fe0:	af00      	add	r7, sp, #0
 8014fe2:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8014fe4:	687b      	ldr	r3, [r7, #4]
 8014fe6:	681b      	ldr	r3, [r3, #0]
 8014fe8:	4618      	mov	r0, r3
 8014fea:	f7ef fa81 	bl	80044f0 <osSemaphoreRelease>
}
 8014fee:	bf00      	nop
 8014ff0:	3708      	adds	r7, #8
 8014ff2:	46bd      	mov	sp, r7
 8014ff4:	bd80      	pop	{r7, pc}

08014ff6 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 8014ff6:	b580      	push	{r7, lr}
 8014ff8:	b082      	sub	sp, #8
 8014ffa:	af00      	add	r7, sp, #0
 8014ffc:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 8014ffe:	687b      	ldr	r3, [r7, #4]
 8015000:	681b      	ldr	r3, [r3, #0]
 8015002:	4618      	mov	r0, r3
 8015004:	f7ef fab8 	bl	8004578 <osSemaphoreDelete>
}
 8015008:	bf00      	nop
 801500a:	3708      	adds	r7, #8
 801500c:	46bd      	mov	sp, r7
 801500e:	bd80      	pop	{r7, pc}

08015010 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 8015010:	b480      	push	{r7}
 8015012:	b083      	sub	sp, #12
 8015014:	af00      	add	r7, sp, #0
 8015016:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 8015018:	687b      	ldr	r3, [r7, #4]
 801501a:	681b      	ldr	r3, [r3, #0]
 801501c:	2b00      	cmp	r3, #0
 801501e:	d101      	bne.n	8015024 <sys_sem_valid+0x14>
    return 0;
 8015020:	2300      	movs	r3, #0
 8015022:	e000      	b.n	8015026 <sys_sem_valid+0x16>
  else
    return 1;
 8015024:	2301      	movs	r3, #1
}
 8015026:	4618      	mov	r0, r3
 8015028:	370c      	adds	r7, #12
 801502a:	46bd      	mov	sp, r7
 801502c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015030:	4770      	bx	lr

08015032 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 8015032:	b480      	push	{r7}
 8015034:	b083      	sub	sp, #12
 8015036:	af00      	add	r7, sp, #0
 8015038:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 801503a:	687b      	ldr	r3, [r7, #4]
 801503c:	2200      	movs	r2, #0
 801503e:	601a      	str	r2, [r3, #0]
}
 8015040:	bf00      	nop
 8015042:	370c      	adds	r7, #12
 8015044:	46bd      	mov	sp, r7
 8015046:	f85d 7b04 	ldr.w	r7, [sp], #4
 801504a:	4770      	bx	lr

0801504c <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801504c:	b580      	push	{r7, lr}
 801504e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 8015050:	2000      	movs	r0, #0
 8015052:	f7ef f863 	bl	800411c <osMutexNew>
 8015056:	4603      	mov	r3, r0
 8015058:	4a01      	ldr	r2, [pc, #4]	; (8015060 <sys_init+0x14>)
 801505a:	6013      	str	r3, [r2, #0]
#endif
}
 801505c:	bf00      	nop
 801505e:	bd80      	pop	{r7, pc}
 8015060:	2000bdc4 	.word	0x2000bdc4

08015064 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8015064:	b580      	push	{r7, lr}
 8015066:	b082      	sub	sp, #8
 8015068:	af00      	add	r7, sp, #0
 801506a:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 801506c:	2000      	movs	r0, #0
 801506e:	f7ef f855 	bl	800411c <osMutexNew>
 8015072:	4602      	mov	r2, r0
 8015074:	687b      	ldr	r3, [r7, #4]
 8015076:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 8015078:	687b      	ldr	r3, [r7, #4]
 801507a:	681b      	ldr	r3, [r3, #0]
 801507c:	2b00      	cmp	r3, #0
 801507e:	d102      	bne.n	8015086 <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8015080:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015084:	e000      	b.n	8015088 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8015086:	2300      	movs	r3, #0
}
 8015088:	4618      	mov	r0, r3
 801508a:	3708      	adds	r7, #8
 801508c:	46bd      	mov	sp, r7
 801508e:	bd80      	pop	{r7, pc}

08015090 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8015090:	b580      	push	{r7, lr}
 8015092:	b082      	sub	sp, #8
 8015094:	af00      	add	r7, sp, #0
 8015096:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 8015098:	687b      	ldr	r3, [r7, #4]
 801509a:	681b      	ldr	r3, [r3, #0]
 801509c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80150a0:	4618      	mov	r0, r3
 80150a2:	f7ef f8c1 	bl	8004228 <osMutexAcquire>
#endif
}
 80150a6:	bf00      	nop
 80150a8:	3708      	adds	r7, #8
 80150aa:	46bd      	mov	sp, r7
 80150ac:	bd80      	pop	{r7, pc}

080150ae <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 80150ae:	b580      	push	{r7, lr}
 80150b0:	b082      	sub	sp, #8
 80150b2:	af00      	add	r7, sp, #0
 80150b4:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 80150b6:	687b      	ldr	r3, [r7, #4]
 80150b8:	681b      	ldr	r3, [r3, #0]
 80150ba:	4618      	mov	r0, r3
 80150bc:	f7ef f8ff 	bl	80042be <osMutexRelease>
}
 80150c0:	bf00      	nop
 80150c2:	3708      	adds	r7, #8
 80150c4:	46bd      	mov	sp, r7
 80150c6:	bd80      	pop	{r7, pc}

080150c8 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 80150c8:	b580      	push	{r7, lr}
 80150ca:	b08e      	sub	sp, #56	; 0x38
 80150cc:	af00      	add	r7, sp, #0
 80150ce:	60f8      	str	r0, [r7, #12]
 80150d0:	60b9      	str	r1, [r7, #8]
 80150d2:	607a      	str	r2, [r7, #4]
 80150d4:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 80150d6:	f107 0314 	add.w	r3, r7, #20
 80150da:	2224      	movs	r2, #36	; 0x24
 80150dc:	2100      	movs	r1, #0
 80150de:	4618      	mov	r0, r3
 80150e0:	f000 f969 	bl	80153b6 <memset>
 80150e4:	68fb      	ldr	r3, [r7, #12]
 80150e6:	617b      	str	r3, [r7, #20]
 80150e8:	683b      	ldr	r3, [r7, #0]
 80150ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80150ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80150ee:	62fb      	str	r3, [r7, #44]	; 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 80150f0:	f107 0314 	add.w	r3, r7, #20
 80150f4:	461a      	mov	r2, r3
 80150f6:	6879      	ldr	r1, [r7, #4]
 80150f8:	68b8      	ldr	r0, [r7, #8]
 80150fa:	f7ee ff62 	bl	8003fc2 <osThreadNew>
 80150fe:	4603      	mov	r3, r0
#endif
}
 8015100:	4618      	mov	r0, r3
 8015102:	3738      	adds	r7, #56	; 0x38
 8015104:	46bd      	mov	sp, r7
 8015106:	bd80      	pop	{r7, pc}

08015108 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8015108:	b580      	push	{r7, lr}
 801510a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 801510c:	4b04      	ldr	r3, [pc, #16]	; (8015120 <sys_arch_protect+0x18>)
 801510e:	681b      	ldr	r3, [r3, #0]
 8015110:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8015114:	4618      	mov	r0, r3
 8015116:	f7ef f887 	bl	8004228 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 801511a:	2301      	movs	r3, #1
}
 801511c:	4618      	mov	r0, r3
 801511e:	bd80      	pop	{r7, pc}
 8015120:	2000bdc4 	.word	0x2000bdc4

08015124 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8015124:	b580      	push	{r7, lr}
 8015126:	b082      	sub	sp, #8
 8015128:	af00      	add	r7, sp, #0
 801512a:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801512c:	4b04      	ldr	r3, [pc, #16]	; (8015140 <sys_arch_unprotect+0x1c>)
 801512e:	681b      	ldr	r3, [r3, #0]
 8015130:	4618      	mov	r0, r3
 8015132:	f7ef f8c4 	bl	80042be <osMutexRelease>
}
 8015136:	bf00      	nop
 8015138:	3708      	adds	r7, #8
 801513a:	46bd      	mov	sp, r7
 801513c:	bd80      	pop	{r7, pc}
 801513e:	bf00      	nop
 8015140:	2000bdc4 	.word	0x2000bdc4

08015144 <std>:
 8015144:	2300      	movs	r3, #0
 8015146:	b510      	push	{r4, lr}
 8015148:	4604      	mov	r4, r0
 801514a:	e9c0 3300 	strd	r3, r3, [r0]
 801514e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8015152:	6083      	str	r3, [r0, #8]
 8015154:	8181      	strh	r1, [r0, #12]
 8015156:	6643      	str	r3, [r0, #100]	; 0x64
 8015158:	81c2      	strh	r2, [r0, #14]
 801515a:	6183      	str	r3, [r0, #24]
 801515c:	4619      	mov	r1, r3
 801515e:	2208      	movs	r2, #8
 8015160:	305c      	adds	r0, #92	; 0x5c
 8015162:	f000 f928 	bl	80153b6 <memset>
 8015166:	4b05      	ldr	r3, [pc, #20]	; (801517c <std+0x38>)
 8015168:	6263      	str	r3, [r4, #36]	; 0x24
 801516a:	4b05      	ldr	r3, [pc, #20]	; (8015180 <std+0x3c>)
 801516c:	62a3      	str	r3, [r4, #40]	; 0x28
 801516e:	4b05      	ldr	r3, [pc, #20]	; (8015184 <std+0x40>)
 8015170:	62e3      	str	r3, [r4, #44]	; 0x2c
 8015172:	4b05      	ldr	r3, [pc, #20]	; (8015188 <std+0x44>)
 8015174:	6224      	str	r4, [r4, #32]
 8015176:	6323      	str	r3, [r4, #48]	; 0x30
 8015178:	bd10      	pop	{r4, pc}
 801517a:	bf00      	nop
 801517c:	08015621 	.word	0x08015621
 8015180:	08015643 	.word	0x08015643
 8015184:	0801567b 	.word	0x0801567b
 8015188:	0801569f 	.word	0x0801569f

0801518c <_cleanup_r>:
 801518c:	4901      	ldr	r1, [pc, #4]	; (8015194 <_cleanup_r+0x8>)
 801518e:	f000 b8af 	b.w	80152f0 <_fwalk_reent>
 8015192:	bf00      	nop
 8015194:	08015835 	.word	0x08015835

08015198 <__sfmoreglue>:
 8015198:	b570      	push	{r4, r5, r6, lr}
 801519a:	1e4a      	subs	r2, r1, #1
 801519c:	2568      	movs	r5, #104	; 0x68
 801519e:	4355      	muls	r5, r2
 80151a0:	460e      	mov	r6, r1
 80151a2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80151a6:	f000 f90f 	bl	80153c8 <_malloc_r>
 80151aa:	4604      	mov	r4, r0
 80151ac:	b140      	cbz	r0, 80151c0 <__sfmoreglue+0x28>
 80151ae:	2100      	movs	r1, #0
 80151b0:	e9c0 1600 	strd	r1, r6, [r0]
 80151b4:	300c      	adds	r0, #12
 80151b6:	60a0      	str	r0, [r4, #8]
 80151b8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80151bc:	f000 f8fb 	bl	80153b6 <memset>
 80151c0:	4620      	mov	r0, r4
 80151c2:	bd70      	pop	{r4, r5, r6, pc}

080151c4 <__sfp_lock_acquire>:
 80151c4:	4801      	ldr	r0, [pc, #4]	; (80151cc <__sfp_lock_acquire+0x8>)
 80151c6:	f000 b8d8 	b.w	801537a <__retarget_lock_acquire_recursive>
 80151ca:	bf00      	nop
 80151cc:	2000bdd0 	.word	0x2000bdd0

080151d0 <__sfp_lock_release>:
 80151d0:	4801      	ldr	r0, [pc, #4]	; (80151d8 <__sfp_lock_release+0x8>)
 80151d2:	f000 b8d3 	b.w	801537c <__retarget_lock_release_recursive>
 80151d6:	bf00      	nop
 80151d8:	2000bdd0 	.word	0x2000bdd0

080151dc <__sinit_lock_acquire>:
 80151dc:	4801      	ldr	r0, [pc, #4]	; (80151e4 <__sinit_lock_acquire+0x8>)
 80151de:	f000 b8cc 	b.w	801537a <__retarget_lock_acquire_recursive>
 80151e2:	bf00      	nop
 80151e4:	2000bdcb 	.word	0x2000bdcb

080151e8 <__sinit_lock_release>:
 80151e8:	4801      	ldr	r0, [pc, #4]	; (80151f0 <__sinit_lock_release+0x8>)
 80151ea:	f000 b8c7 	b.w	801537c <__retarget_lock_release_recursive>
 80151ee:	bf00      	nop
 80151f0:	2000bdcb 	.word	0x2000bdcb

080151f4 <__sinit>:
 80151f4:	b510      	push	{r4, lr}
 80151f6:	4604      	mov	r4, r0
 80151f8:	f7ff fff0 	bl	80151dc <__sinit_lock_acquire>
 80151fc:	69a3      	ldr	r3, [r4, #24]
 80151fe:	b11b      	cbz	r3, 8015208 <__sinit+0x14>
 8015200:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015204:	f7ff bff0 	b.w	80151e8 <__sinit_lock_release>
 8015208:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801520c:	6523      	str	r3, [r4, #80]	; 0x50
 801520e:	4b13      	ldr	r3, [pc, #76]	; (801525c <__sinit+0x68>)
 8015210:	4a13      	ldr	r2, [pc, #76]	; (8015260 <__sinit+0x6c>)
 8015212:	681b      	ldr	r3, [r3, #0]
 8015214:	62a2      	str	r2, [r4, #40]	; 0x28
 8015216:	42a3      	cmp	r3, r4
 8015218:	bf04      	itt	eq
 801521a:	2301      	moveq	r3, #1
 801521c:	61a3      	streq	r3, [r4, #24]
 801521e:	4620      	mov	r0, r4
 8015220:	f000 f820 	bl	8015264 <__sfp>
 8015224:	6060      	str	r0, [r4, #4]
 8015226:	4620      	mov	r0, r4
 8015228:	f000 f81c 	bl	8015264 <__sfp>
 801522c:	60a0      	str	r0, [r4, #8]
 801522e:	4620      	mov	r0, r4
 8015230:	f000 f818 	bl	8015264 <__sfp>
 8015234:	2200      	movs	r2, #0
 8015236:	60e0      	str	r0, [r4, #12]
 8015238:	2104      	movs	r1, #4
 801523a:	6860      	ldr	r0, [r4, #4]
 801523c:	f7ff ff82 	bl	8015144 <std>
 8015240:	68a0      	ldr	r0, [r4, #8]
 8015242:	2201      	movs	r2, #1
 8015244:	2109      	movs	r1, #9
 8015246:	f7ff ff7d 	bl	8015144 <std>
 801524a:	68e0      	ldr	r0, [r4, #12]
 801524c:	2202      	movs	r2, #2
 801524e:	2112      	movs	r1, #18
 8015250:	f7ff ff78 	bl	8015144 <std>
 8015254:	2301      	movs	r3, #1
 8015256:	61a3      	str	r3, [r4, #24]
 8015258:	e7d2      	b.n	8015200 <__sinit+0xc>
 801525a:	bf00      	nop
 801525c:	08019cb4 	.word	0x08019cb4
 8015260:	0801518d 	.word	0x0801518d

08015264 <__sfp>:
 8015264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015266:	4607      	mov	r7, r0
 8015268:	f7ff ffac 	bl	80151c4 <__sfp_lock_acquire>
 801526c:	4b1e      	ldr	r3, [pc, #120]	; (80152e8 <__sfp+0x84>)
 801526e:	681e      	ldr	r6, [r3, #0]
 8015270:	69b3      	ldr	r3, [r6, #24]
 8015272:	b913      	cbnz	r3, 801527a <__sfp+0x16>
 8015274:	4630      	mov	r0, r6
 8015276:	f7ff ffbd 	bl	80151f4 <__sinit>
 801527a:	3648      	adds	r6, #72	; 0x48
 801527c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8015280:	3b01      	subs	r3, #1
 8015282:	d503      	bpl.n	801528c <__sfp+0x28>
 8015284:	6833      	ldr	r3, [r6, #0]
 8015286:	b30b      	cbz	r3, 80152cc <__sfp+0x68>
 8015288:	6836      	ldr	r6, [r6, #0]
 801528a:	e7f7      	b.n	801527c <__sfp+0x18>
 801528c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8015290:	b9d5      	cbnz	r5, 80152c8 <__sfp+0x64>
 8015292:	4b16      	ldr	r3, [pc, #88]	; (80152ec <__sfp+0x88>)
 8015294:	60e3      	str	r3, [r4, #12]
 8015296:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801529a:	6665      	str	r5, [r4, #100]	; 0x64
 801529c:	f000 f86c 	bl	8015378 <__retarget_lock_init_recursive>
 80152a0:	f7ff ff96 	bl	80151d0 <__sfp_lock_release>
 80152a4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80152a8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80152ac:	6025      	str	r5, [r4, #0]
 80152ae:	61a5      	str	r5, [r4, #24]
 80152b0:	2208      	movs	r2, #8
 80152b2:	4629      	mov	r1, r5
 80152b4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80152b8:	f000 f87d 	bl	80153b6 <memset>
 80152bc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80152c0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80152c4:	4620      	mov	r0, r4
 80152c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80152c8:	3468      	adds	r4, #104	; 0x68
 80152ca:	e7d9      	b.n	8015280 <__sfp+0x1c>
 80152cc:	2104      	movs	r1, #4
 80152ce:	4638      	mov	r0, r7
 80152d0:	f7ff ff62 	bl	8015198 <__sfmoreglue>
 80152d4:	4604      	mov	r4, r0
 80152d6:	6030      	str	r0, [r6, #0]
 80152d8:	2800      	cmp	r0, #0
 80152da:	d1d5      	bne.n	8015288 <__sfp+0x24>
 80152dc:	f7ff ff78 	bl	80151d0 <__sfp_lock_release>
 80152e0:	230c      	movs	r3, #12
 80152e2:	603b      	str	r3, [r7, #0]
 80152e4:	e7ee      	b.n	80152c4 <__sfp+0x60>
 80152e6:	bf00      	nop
 80152e8:	08019cb4 	.word	0x08019cb4
 80152ec:	ffff0001 	.word	0xffff0001

080152f0 <_fwalk_reent>:
 80152f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80152f4:	4606      	mov	r6, r0
 80152f6:	4688      	mov	r8, r1
 80152f8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80152fc:	2700      	movs	r7, #0
 80152fe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8015302:	f1b9 0901 	subs.w	r9, r9, #1
 8015306:	d505      	bpl.n	8015314 <_fwalk_reent+0x24>
 8015308:	6824      	ldr	r4, [r4, #0]
 801530a:	2c00      	cmp	r4, #0
 801530c:	d1f7      	bne.n	80152fe <_fwalk_reent+0xe>
 801530e:	4638      	mov	r0, r7
 8015310:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015314:	89ab      	ldrh	r3, [r5, #12]
 8015316:	2b01      	cmp	r3, #1
 8015318:	d907      	bls.n	801532a <_fwalk_reent+0x3a>
 801531a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801531e:	3301      	adds	r3, #1
 8015320:	d003      	beq.n	801532a <_fwalk_reent+0x3a>
 8015322:	4629      	mov	r1, r5
 8015324:	4630      	mov	r0, r6
 8015326:	47c0      	blx	r8
 8015328:	4307      	orrs	r7, r0
 801532a:	3568      	adds	r5, #104	; 0x68
 801532c:	e7e9      	b.n	8015302 <_fwalk_reent+0x12>
	...

08015330 <__libc_init_array>:
 8015330:	b570      	push	{r4, r5, r6, lr}
 8015332:	4d0d      	ldr	r5, [pc, #52]	; (8015368 <__libc_init_array+0x38>)
 8015334:	4c0d      	ldr	r4, [pc, #52]	; (801536c <__libc_init_array+0x3c>)
 8015336:	1b64      	subs	r4, r4, r5
 8015338:	10a4      	asrs	r4, r4, #2
 801533a:	2600      	movs	r6, #0
 801533c:	42a6      	cmp	r6, r4
 801533e:	d109      	bne.n	8015354 <__libc_init_array+0x24>
 8015340:	4d0b      	ldr	r5, [pc, #44]	; (8015370 <__libc_init_array+0x40>)
 8015342:	4c0c      	ldr	r4, [pc, #48]	; (8015374 <__libc_init_array+0x44>)
 8015344:	f000 ffcc 	bl	80162e0 <_init>
 8015348:	1b64      	subs	r4, r4, r5
 801534a:	10a4      	asrs	r4, r4, #2
 801534c:	2600      	movs	r6, #0
 801534e:	42a6      	cmp	r6, r4
 8015350:	d105      	bne.n	801535e <__libc_init_array+0x2e>
 8015352:	bd70      	pop	{r4, r5, r6, pc}
 8015354:	f855 3b04 	ldr.w	r3, [r5], #4
 8015358:	4798      	blx	r3
 801535a:	3601      	adds	r6, #1
 801535c:	e7ee      	b.n	801533c <__libc_init_array+0xc>
 801535e:	f855 3b04 	ldr.w	r3, [r5], #4
 8015362:	4798      	blx	r3
 8015364:	3601      	adds	r6, #1
 8015366:	e7f2      	b.n	801534e <__libc_init_array+0x1e>
 8015368:	08019da8 	.word	0x08019da8
 801536c:	08019da8 	.word	0x08019da8
 8015370:	08019da8 	.word	0x08019da8
 8015374:	08019dac 	.word	0x08019dac

08015378 <__retarget_lock_init_recursive>:
 8015378:	4770      	bx	lr

0801537a <__retarget_lock_acquire_recursive>:
 801537a:	4770      	bx	lr

0801537c <__retarget_lock_release_recursive>:
 801537c:	4770      	bx	lr

0801537e <memcmp>:
 801537e:	b530      	push	{r4, r5, lr}
 8015380:	3901      	subs	r1, #1
 8015382:	2400      	movs	r4, #0
 8015384:	42a2      	cmp	r2, r4
 8015386:	d101      	bne.n	801538c <memcmp+0xe>
 8015388:	2000      	movs	r0, #0
 801538a:	e005      	b.n	8015398 <memcmp+0x1a>
 801538c:	5d03      	ldrb	r3, [r0, r4]
 801538e:	3401      	adds	r4, #1
 8015390:	5d0d      	ldrb	r5, [r1, r4]
 8015392:	42ab      	cmp	r3, r5
 8015394:	d0f6      	beq.n	8015384 <memcmp+0x6>
 8015396:	1b58      	subs	r0, r3, r5
 8015398:	bd30      	pop	{r4, r5, pc}

0801539a <memcpy>:
 801539a:	440a      	add	r2, r1
 801539c:	4291      	cmp	r1, r2
 801539e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80153a2:	d100      	bne.n	80153a6 <memcpy+0xc>
 80153a4:	4770      	bx	lr
 80153a6:	b510      	push	{r4, lr}
 80153a8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80153ac:	f803 4f01 	strb.w	r4, [r3, #1]!
 80153b0:	4291      	cmp	r1, r2
 80153b2:	d1f9      	bne.n	80153a8 <memcpy+0xe>
 80153b4:	bd10      	pop	{r4, pc}

080153b6 <memset>:
 80153b6:	4402      	add	r2, r0
 80153b8:	4603      	mov	r3, r0
 80153ba:	4293      	cmp	r3, r2
 80153bc:	d100      	bne.n	80153c0 <memset+0xa>
 80153be:	4770      	bx	lr
 80153c0:	f803 1b01 	strb.w	r1, [r3], #1
 80153c4:	e7f9      	b.n	80153ba <memset+0x4>
	...

080153c8 <_malloc_r>:
 80153c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80153ca:	1ccd      	adds	r5, r1, #3
 80153cc:	f025 0503 	bic.w	r5, r5, #3
 80153d0:	3508      	adds	r5, #8
 80153d2:	2d0c      	cmp	r5, #12
 80153d4:	bf38      	it	cc
 80153d6:	250c      	movcc	r5, #12
 80153d8:	2d00      	cmp	r5, #0
 80153da:	4606      	mov	r6, r0
 80153dc:	db01      	blt.n	80153e2 <_malloc_r+0x1a>
 80153de:	42a9      	cmp	r1, r5
 80153e0:	d903      	bls.n	80153ea <_malloc_r+0x22>
 80153e2:	230c      	movs	r3, #12
 80153e4:	6033      	str	r3, [r6, #0]
 80153e6:	2000      	movs	r0, #0
 80153e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80153ea:	f000 fa8b 	bl	8015904 <__malloc_lock>
 80153ee:	4921      	ldr	r1, [pc, #132]	; (8015474 <_malloc_r+0xac>)
 80153f0:	680a      	ldr	r2, [r1, #0]
 80153f2:	4614      	mov	r4, r2
 80153f4:	b99c      	cbnz	r4, 801541e <_malloc_r+0x56>
 80153f6:	4f20      	ldr	r7, [pc, #128]	; (8015478 <_malloc_r+0xb0>)
 80153f8:	683b      	ldr	r3, [r7, #0]
 80153fa:	b923      	cbnz	r3, 8015406 <_malloc_r+0x3e>
 80153fc:	4621      	mov	r1, r4
 80153fe:	4630      	mov	r0, r6
 8015400:	f000 f8fe 	bl	8015600 <_sbrk_r>
 8015404:	6038      	str	r0, [r7, #0]
 8015406:	4629      	mov	r1, r5
 8015408:	4630      	mov	r0, r6
 801540a:	f000 f8f9 	bl	8015600 <_sbrk_r>
 801540e:	1c43      	adds	r3, r0, #1
 8015410:	d123      	bne.n	801545a <_malloc_r+0x92>
 8015412:	230c      	movs	r3, #12
 8015414:	6033      	str	r3, [r6, #0]
 8015416:	4630      	mov	r0, r6
 8015418:	f000 fa7a 	bl	8015910 <__malloc_unlock>
 801541c:	e7e3      	b.n	80153e6 <_malloc_r+0x1e>
 801541e:	6823      	ldr	r3, [r4, #0]
 8015420:	1b5b      	subs	r3, r3, r5
 8015422:	d417      	bmi.n	8015454 <_malloc_r+0x8c>
 8015424:	2b0b      	cmp	r3, #11
 8015426:	d903      	bls.n	8015430 <_malloc_r+0x68>
 8015428:	6023      	str	r3, [r4, #0]
 801542a:	441c      	add	r4, r3
 801542c:	6025      	str	r5, [r4, #0]
 801542e:	e004      	b.n	801543a <_malloc_r+0x72>
 8015430:	6863      	ldr	r3, [r4, #4]
 8015432:	42a2      	cmp	r2, r4
 8015434:	bf0c      	ite	eq
 8015436:	600b      	streq	r3, [r1, #0]
 8015438:	6053      	strne	r3, [r2, #4]
 801543a:	4630      	mov	r0, r6
 801543c:	f000 fa68 	bl	8015910 <__malloc_unlock>
 8015440:	f104 000b 	add.w	r0, r4, #11
 8015444:	1d23      	adds	r3, r4, #4
 8015446:	f020 0007 	bic.w	r0, r0, #7
 801544a:	1ac2      	subs	r2, r0, r3
 801544c:	d0cc      	beq.n	80153e8 <_malloc_r+0x20>
 801544e:	1a1b      	subs	r3, r3, r0
 8015450:	50a3      	str	r3, [r4, r2]
 8015452:	e7c9      	b.n	80153e8 <_malloc_r+0x20>
 8015454:	4622      	mov	r2, r4
 8015456:	6864      	ldr	r4, [r4, #4]
 8015458:	e7cc      	b.n	80153f4 <_malloc_r+0x2c>
 801545a:	1cc4      	adds	r4, r0, #3
 801545c:	f024 0403 	bic.w	r4, r4, #3
 8015460:	42a0      	cmp	r0, r4
 8015462:	d0e3      	beq.n	801542c <_malloc_r+0x64>
 8015464:	1a21      	subs	r1, r4, r0
 8015466:	4630      	mov	r0, r6
 8015468:	f000 f8ca 	bl	8015600 <_sbrk_r>
 801546c:	3001      	adds	r0, #1
 801546e:	d1dd      	bne.n	801542c <_malloc_r+0x64>
 8015470:	e7cf      	b.n	8015412 <_malloc_r+0x4a>
 8015472:	bf00      	nop
 8015474:	20004c08 	.word	0x20004c08
 8015478:	20004c0c 	.word	0x20004c0c

0801547c <iprintf>:
 801547c:	b40f      	push	{r0, r1, r2, r3}
 801547e:	4b0a      	ldr	r3, [pc, #40]	; (80154a8 <iprintf+0x2c>)
 8015480:	b513      	push	{r0, r1, r4, lr}
 8015482:	681c      	ldr	r4, [r3, #0]
 8015484:	b124      	cbz	r4, 8015490 <iprintf+0x14>
 8015486:	69a3      	ldr	r3, [r4, #24]
 8015488:	b913      	cbnz	r3, 8015490 <iprintf+0x14>
 801548a:	4620      	mov	r0, r4
 801548c:	f7ff feb2 	bl	80151f4 <__sinit>
 8015490:	ab05      	add	r3, sp, #20
 8015492:	9a04      	ldr	r2, [sp, #16]
 8015494:	68a1      	ldr	r1, [r4, #8]
 8015496:	9301      	str	r3, [sp, #4]
 8015498:	4620      	mov	r0, r4
 801549a:	f000 fab9 	bl	8015a10 <_vfiprintf_r>
 801549e:	b002      	add	sp, #8
 80154a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80154a4:	b004      	add	sp, #16
 80154a6:	4770      	bx	lr
 80154a8:	2000001c 	.word	0x2000001c

080154ac <rand>:
 80154ac:	4b17      	ldr	r3, [pc, #92]	; (801550c <rand+0x60>)
 80154ae:	b510      	push	{r4, lr}
 80154b0:	681c      	ldr	r4, [r3, #0]
 80154b2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80154b4:	b9b3      	cbnz	r3, 80154e4 <rand+0x38>
 80154b6:	2018      	movs	r0, #24
 80154b8:	f000 fa1c 	bl	80158f4 <malloc>
 80154bc:	63a0      	str	r0, [r4, #56]	; 0x38
 80154be:	b928      	cbnz	r0, 80154cc <rand+0x20>
 80154c0:	4602      	mov	r2, r0
 80154c2:	4b13      	ldr	r3, [pc, #76]	; (8015510 <rand+0x64>)
 80154c4:	4813      	ldr	r0, [pc, #76]	; (8015514 <rand+0x68>)
 80154c6:	214e      	movs	r1, #78	; 0x4e
 80154c8:	f000 f900 	bl	80156cc <__assert_func>
 80154cc:	4a12      	ldr	r2, [pc, #72]	; (8015518 <rand+0x6c>)
 80154ce:	4b13      	ldr	r3, [pc, #76]	; (801551c <rand+0x70>)
 80154d0:	e9c0 2300 	strd	r2, r3, [r0]
 80154d4:	4b12      	ldr	r3, [pc, #72]	; (8015520 <rand+0x74>)
 80154d6:	6083      	str	r3, [r0, #8]
 80154d8:	230b      	movs	r3, #11
 80154da:	8183      	strh	r3, [r0, #12]
 80154dc:	2201      	movs	r2, #1
 80154de:	2300      	movs	r3, #0
 80154e0:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80154e4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80154e6:	480f      	ldr	r0, [pc, #60]	; (8015524 <rand+0x78>)
 80154e8:	690a      	ldr	r2, [r1, #16]
 80154ea:	694b      	ldr	r3, [r1, #20]
 80154ec:	4c0e      	ldr	r4, [pc, #56]	; (8015528 <rand+0x7c>)
 80154ee:	4350      	muls	r0, r2
 80154f0:	fb04 0003 	mla	r0, r4, r3, r0
 80154f4:	fba2 3404 	umull	r3, r4, r2, r4
 80154f8:	1c5a      	adds	r2, r3, #1
 80154fa:	4404      	add	r4, r0
 80154fc:	f144 0000 	adc.w	r0, r4, #0
 8015500:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8015504:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8015508:	bd10      	pop	{r4, pc}
 801550a:	bf00      	nop
 801550c:	2000001c 	.word	0x2000001c
 8015510:	08019cb8 	.word	0x08019cb8
 8015514:	08019ccf 	.word	0x08019ccf
 8015518:	abcd330e 	.word	0xabcd330e
 801551c:	e66d1234 	.word	0xe66d1234
 8015520:	0005deec 	.word	0x0005deec
 8015524:	5851f42d 	.word	0x5851f42d
 8015528:	4c957f2d 	.word	0x4c957f2d

0801552c <cleanup_glue>:
 801552c:	b538      	push	{r3, r4, r5, lr}
 801552e:	460c      	mov	r4, r1
 8015530:	6809      	ldr	r1, [r1, #0]
 8015532:	4605      	mov	r5, r0
 8015534:	b109      	cbz	r1, 801553a <cleanup_glue+0xe>
 8015536:	f7ff fff9 	bl	801552c <cleanup_glue>
 801553a:	4621      	mov	r1, r4
 801553c:	4628      	mov	r0, r5
 801553e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015542:	f000 b9eb 	b.w	801591c <_free_r>
	...

08015548 <_reclaim_reent>:
 8015548:	4b2c      	ldr	r3, [pc, #176]	; (80155fc <_reclaim_reent+0xb4>)
 801554a:	681b      	ldr	r3, [r3, #0]
 801554c:	4283      	cmp	r3, r0
 801554e:	b570      	push	{r4, r5, r6, lr}
 8015550:	4604      	mov	r4, r0
 8015552:	d051      	beq.n	80155f8 <_reclaim_reent+0xb0>
 8015554:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8015556:	b143      	cbz	r3, 801556a <_reclaim_reent+0x22>
 8015558:	68db      	ldr	r3, [r3, #12]
 801555a:	2b00      	cmp	r3, #0
 801555c:	d14a      	bne.n	80155f4 <_reclaim_reent+0xac>
 801555e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015560:	6819      	ldr	r1, [r3, #0]
 8015562:	b111      	cbz	r1, 801556a <_reclaim_reent+0x22>
 8015564:	4620      	mov	r0, r4
 8015566:	f000 f9d9 	bl	801591c <_free_r>
 801556a:	6961      	ldr	r1, [r4, #20]
 801556c:	b111      	cbz	r1, 8015574 <_reclaim_reent+0x2c>
 801556e:	4620      	mov	r0, r4
 8015570:	f000 f9d4 	bl	801591c <_free_r>
 8015574:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8015576:	b111      	cbz	r1, 801557e <_reclaim_reent+0x36>
 8015578:	4620      	mov	r0, r4
 801557a:	f000 f9cf 	bl	801591c <_free_r>
 801557e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8015580:	b111      	cbz	r1, 8015588 <_reclaim_reent+0x40>
 8015582:	4620      	mov	r0, r4
 8015584:	f000 f9ca 	bl	801591c <_free_r>
 8015588:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801558a:	b111      	cbz	r1, 8015592 <_reclaim_reent+0x4a>
 801558c:	4620      	mov	r0, r4
 801558e:	f000 f9c5 	bl	801591c <_free_r>
 8015592:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8015594:	b111      	cbz	r1, 801559c <_reclaim_reent+0x54>
 8015596:	4620      	mov	r0, r4
 8015598:	f000 f9c0 	bl	801591c <_free_r>
 801559c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801559e:	b111      	cbz	r1, 80155a6 <_reclaim_reent+0x5e>
 80155a0:	4620      	mov	r0, r4
 80155a2:	f000 f9bb 	bl	801591c <_free_r>
 80155a6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80155a8:	b111      	cbz	r1, 80155b0 <_reclaim_reent+0x68>
 80155aa:	4620      	mov	r0, r4
 80155ac:	f000 f9b6 	bl	801591c <_free_r>
 80155b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80155b2:	b111      	cbz	r1, 80155ba <_reclaim_reent+0x72>
 80155b4:	4620      	mov	r0, r4
 80155b6:	f000 f9b1 	bl	801591c <_free_r>
 80155ba:	69a3      	ldr	r3, [r4, #24]
 80155bc:	b1e3      	cbz	r3, 80155f8 <_reclaim_reent+0xb0>
 80155be:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80155c0:	4620      	mov	r0, r4
 80155c2:	4798      	blx	r3
 80155c4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80155c6:	b1b9      	cbz	r1, 80155f8 <_reclaim_reent+0xb0>
 80155c8:	4620      	mov	r0, r4
 80155ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80155ce:	f7ff bfad 	b.w	801552c <cleanup_glue>
 80155d2:	5949      	ldr	r1, [r1, r5]
 80155d4:	b941      	cbnz	r1, 80155e8 <_reclaim_reent+0xa0>
 80155d6:	3504      	adds	r5, #4
 80155d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80155da:	2d80      	cmp	r5, #128	; 0x80
 80155dc:	68d9      	ldr	r1, [r3, #12]
 80155de:	d1f8      	bne.n	80155d2 <_reclaim_reent+0x8a>
 80155e0:	4620      	mov	r0, r4
 80155e2:	f000 f99b 	bl	801591c <_free_r>
 80155e6:	e7ba      	b.n	801555e <_reclaim_reent+0x16>
 80155e8:	680e      	ldr	r6, [r1, #0]
 80155ea:	4620      	mov	r0, r4
 80155ec:	f000 f996 	bl	801591c <_free_r>
 80155f0:	4631      	mov	r1, r6
 80155f2:	e7ef      	b.n	80155d4 <_reclaim_reent+0x8c>
 80155f4:	2500      	movs	r5, #0
 80155f6:	e7ef      	b.n	80155d8 <_reclaim_reent+0x90>
 80155f8:	bd70      	pop	{r4, r5, r6, pc}
 80155fa:	bf00      	nop
 80155fc:	2000001c 	.word	0x2000001c

08015600 <_sbrk_r>:
 8015600:	b538      	push	{r3, r4, r5, lr}
 8015602:	4d06      	ldr	r5, [pc, #24]	; (801561c <_sbrk_r+0x1c>)
 8015604:	2300      	movs	r3, #0
 8015606:	4604      	mov	r4, r0
 8015608:	4608      	mov	r0, r1
 801560a:	602b      	str	r3, [r5, #0]
 801560c:	f7eb fa8a 	bl	8000b24 <_sbrk>
 8015610:	1c43      	adds	r3, r0, #1
 8015612:	d102      	bne.n	801561a <_sbrk_r+0x1a>
 8015614:	682b      	ldr	r3, [r5, #0]
 8015616:	b103      	cbz	r3, 801561a <_sbrk_r+0x1a>
 8015618:	6023      	str	r3, [r4, #0]
 801561a:	bd38      	pop	{r3, r4, r5, pc}
 801561c:	2000bdc0 	.word	0x2000bdc0

08015620 <__sread>:
 8015620:	b510      	push	{r4, lr}
 8015622:	460c      	mov	r4, r1
 8015624:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015628:	f000 fcb6 	bl	8015f98 <_read_r>
 801562c:	2800      	cmp	r0, #0
 801562e:	bfab      	itete	ge
 8015630:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8015632:	89a3      	ldrhlt	r3, [r4, #12]
 8015634:	181b      	addge	r3, r3, r0
 8015636:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801563a:	bfac      	ite	ge
 801563c:	6563      	strge	r3, [r4, #84]	; 0x54
 801563e:	81a3      	strhlt	r3, [r4, #12]
 8015640:	bd10      	pop	{r4, pc}

08015642 <__swrite>:
 8015642:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015646:	461f      	mov	r7, r3
 8015648:	898b      	ldrh	r3, [r1, #12]
 801564a:	05db      	lsls	r3, r3, #23
 801564c:	4605      	mov	r5, r0
 801564e:	460c      	mov	r4, r1
 8015650:	4616      	mov	r6, r2
 8015652:	d505      	bpl.n	8015660 <__swrite+0x1e>
 8015654:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015658:	2302      	movs	r3, #2
 801565a:	2200      	movs	r2, #0
 801565c:	f000 f938 	bl	80158d0 <_lseek_r>
 8015660:	89a3      	ldrh	r3, [r4, #12]
 8015662:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015666:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801566a:	81a3      	strh	r3, [r4, #12]
 801566c:	4632      	mov	r2, r6
 801566e:	463b      	mov	r3, r7
 8015670:	4628      	mov	r0, r5
 8015672:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015676:	f000 b817 	b.w	80156a8 <_write_r>

0801567a <__sseek>:
 801567a:	b510      	push	{r4, lr}
 801567c:	460c      	mov	r4, r1
 801567e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015682:	f000 f925 	bl	80158d0 <_lseek_r>
 8015686:	1c43      	adds	r3, r0, #1
 8015688:	89a3      	ldrh	r3, [r4, #12]
 801568a:	bf15      	itete	ne
 801568c:	6560      	strne	r0, [r4, #84]	; 0x54
 801568e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8015692:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8015696:	81a3      	strheq	r3, [r4, #12]
 8015698:	bf18      	it	ne
 801569a:	81a3      	strhne	r3, [r4, #12]
 801569c:	bd10      	pop	{r4, pc}

0801569e <__sclose>:
 801569e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80156a2:	f000 b831 	b.w	8015708 <_close_r>
	...

080156a8 <_write_r>:
 80156a8:	b538      	push	{r3, r4, r5, lr}
 80156aa:	4d07      	ldr	r5, [pc, #28]	; (80156c8 <_write_r+0x20>)
 80156ac:	4604      	mov	r4, r0
 80156ae:	4608      	mov	r0, r1
 80156b0:	4611      	mov	r1, r2
 80156b2:	2200      	movs	r2, #0
 80156b4:	602a      	str	r2, [r5, #0]
 80156b6:	461a      	mov	r2, r3
 80156b8:	f7eb f9e3 	bl	8000a82 <_write>
 80156bc:	1c43      	adds	r3, r0, #1
 80156be:	d102      	bne.n	80156c6 <_write_r+0x1e>
 80156c0:	682b      	ldr	r3, [r5, #0]
 80156c2:	b103      	cbz	r3, 80156c6 <_write_r+0x1e>
 80156c4:	6023      	str	r3, [r4, #0]
 80156c6:	bd38      	pop	{r3, r4, r5, pc}
 80156c8:	2000bdc0 	.word	0x2000bdc0

080156cc <__assert_func>:
 80156cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80156ce:	4614      	mov	r4, r2
 80156d0:	461a      	mov	r2, r3
 80156d2:	4b09      	ldr	r3, [pc, #36]	; (80156f8 <__assert_func+0x2c>)
 80156d4:	681b      	ldr	r3, [r3, #0]
 80156d6:	4605      	mov	r5, r0
 80156d8:	68d8      	ldr	r0, [r3, #12]
 80156da:	b14c      	cbz	r4, 80156f0 <__assert_func+0x24>
 80156dc:	4b07      	ldr	r3, [pc, #28]	; (80156fc <__assert_func+0x30>)
 80156de:	9100      	str	r1, [sp, #0]
 80156e0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80156e4:	4906      	ldr	r1, [pc, #24]	; (8015700 <__assert_func+0x34>)
 80156e6:	462b      	mov	r3, r5
 80156e8:	f000 f8e0 	bl	80158ac <fiprintf>
 80156ec:	f000 fd26 	bl	801613c <abort>
 80156f0:	4b04      	ldr	r3, [pc, #16]	; (8015704 <__assert_func+0x38>)
 80156f2:	461c      	mov	r4, r3
 80156f4:	e7f3      	b.n	80156de <__assert_func+0x12>
 80156f6:	bf00      	nop
 80156f8:	2000001c 	.word	0x2000001c
 80156fc:	08019d2e 	.word	0x08019d2e
 8015700:	08019d3b 	.word	0x08019d3b
 8015704:	08019d69 	.word	0x08019d69

08015708 <_close_r>:
 8015708:	b538      	push	{r3, r4, r5, lr}
 801570a:	4d06      	ldr	r5, [pc, #24]	; (8015724 <_close_r+0x1c>)
 801570c:	2300      	movs	r3, #0
 801570e:	4604      	mov	r4, r0
 8015710:	4608      	mov	r0, r1
 8015712:	602b      	str	r3, [r5, #0]
 8015714:	f7eb f9d1 	bl	8000aba <_close>
 8015718:	1c43      	adds	r3, r0, #1
 801571a:	d102      	bne.n	8015722 <_close_r+0x1a>
 801571c:	682b      	ldr	r3, [r5, #0]
 801571e:	b103      	cbz	r3, 8015722 <_close_r+0x1a>
 8015720:	6023      	str	r3, [r4, #0]
 8015722:	bd38      	pop	{r3, r4, r5, pc}
 8015724:	2000bdc0 	.word	0x2000bdc0

08015728 <__sflush_r>:
 8015728:	898a      	ldrh	r2, [r1, #12]
 801572a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801572e:	4605      	mov	r5, r0
 8015730:	0710      	lsls	r0, r2, #28
 8015732:	460c      	mov	r4, r1
 8015734:	d458      	bmi.n	80157e8 <__sflush_r+0xc0>
 8015736:	684b      	ldr	r3, [r1, #4]
 8015738:	2b00      	cmp	r3, #0
 801573a:	dc05      	bgt.n	8015748 <__sflush_r+0x20>
 801573c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801573e:	2b00      	cmp	r3, #0
 8015740:	dc02      	bgt.n	8015748 <__sflush_r+0x20>
 8015742:	2000      	movs	r0, #0
 8015744:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015748:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801574a:	2e00      	cmp	r6, #0
 801574c:	d0f9      	beq.n	8015742 <__sflush_r+0x1a>
 801574e:	2300      	movs	r3, #0
 8015750:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015754:	682f      	ldr	r7, [r5, #0]
 8015756:	602b      	str	r3, [r5, #0]
 8015758:	d032      	beq.n	80157c0 <__sflush_r+0x98>
 801575a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801575c:	89a3      	ldrh	r3, [r4, #12]
 801575e:	075a      	lsls	r2, r3, #29
 8015760:	d505      	bpl.n	801576e <__sflush_r+0x46>
 8015762:	6863      	ldr	r3, [r4, #4]
 8015764:	1ac0      	subs	r0, r0, r3
 8015766:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015768:	b10b      	cbz	r3, 801576e <__sflush_r+0x46>
 801576a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801576c:	1ac0      	subs	r0, r0, r3
 801576e:	2300      	movs	r3, #0
 8015770:	4602      	mov	r2, r0
 8015772:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015774:	6a21      	ldr	r1, [r4, #32]
 8015776:	4628      	mov	r0, r5
 8015778:	47b0      	blx	r6
 801577a:	1c43      	adds	r3, r0, #1
 801577c:	89a3      	ldrh	r3, [r4, #12]
 801577e:	d106      	bne.n	801578e <__sflush_r+0x66>
 8015780:	6829      	ldr	r1, [r5, #0]
 8015782:	291d      	cmp	r1, #29
 8015784:	d82c      	bhi.n	80157e0 <__sflush_r+0xb8>
 8015786:	4a2a      	ldr	r2, [pc, #168]	; (8015830 <__sflush_r+0x108>)
 8015788:	40ca      	lsrs	r2, r1
 801578a:	07d6      	lsls	r6, r2, #31
 801578c:	d528      	bpl.n	80157e0 <__sflush_r+0xb8>
 801578e:	2200      	movs	r2, #0
 8015790:	6062      	str	r2, [r4, #4]
 8015792:	04d9      	lsls	r1, r3, #19
 8015794:	6922      	ldr	r2, [r4, #16]
 8015796:	6022      	str	r2, [r4, #0]
 8015798:	d504      	bpl.n	80157a4 <__sflush_r+0x7c>
 801579a:	1c42      	adds	r2, r0, #1
 801579c:	d101      	bne.n	80157a2 <__sflush_r+0x7a>
 801579e:	682b      	ldr	r3, [r5, #0]
 80157a0:	b903      	cbnz	r3, 80157a4 <__sflush_r+0x7c>
 80157a2:	6560      	str	r0, [r4, #84]	; 0x54
 80157a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80157a6:	602f      	str	r7, [r5, #0]
 80157a8:	2900      	cmp	r1, #0
 80157aa:	d0ca      	beq.n	8015742 <__sflush_r+0x1a>
 80157ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80157b0:	4299      	cmp	r1, r3
 80157b2:	d002      	beq.n	80157ba <__sflush_r+0x92>
 80157b4:	4628      	mov	r0, r5
 80157b6:	f000 f8b1 	bl	801591c <_free_r>
 80157ba:	2000      	movs	r0, #0
 80157bc:	6360      	str	r0, [r4, #52]	; 0x34
 80157be:	e7c1      	b.n	8015744 <__sflush_r+0x1c>
 80157c0:	6a21      	ldr	r1, [r4, #32]
 80157c2:	2301      	movs	r3, #1
 80157c4:	4628      	mov	r0, r5
 80157c6:	47b0      	blx	r6
 80157c8:	1c41      	adds	r1, r0, #1
 80157ca:	d1c7      	bne.n	801575c <__sflush_r+0x34>
 80157cc:	682b      	ldr	r3, [r5, #0]
 80157ce:	2b00      	cmp	r3, #0
 80157d0:	d0c4      	beq.n	801575c <__sflush_r+0x34>
 80157d2:	2b1d      	cmp	r3, #29
 80157d4:	d001      	beq.n	80157da <__sflush_r+0xb2>
 80157d6:	2b16      	cmp	r3, #22
 80157d8:	d101      	bne.n	80157de <__sflush_r+0xb6>
 80157da:	602f      	str	r7, [r5, #0]
 80157dc:	e7b1      	b.n	8015742 <__sflush_r+0x1a>
 80157de:	89a3      	ldrh	r3, [r4, #12]
 80157e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80157e4:	81a3      	strh	r3, [r4, #12]
 80157e6:	e7ad      	b.n	8015744 <__sflush_r+0x1c>
 80157e8:	690f      	ldr	r7, [r1, #16]
 80157ea:	2f00      	cmp	r7, #0
 80157ec:	d0a9      	beq.n	8015742 <__sflush_r+0x1a>
 80157ee:	0793      	lsls	r3, r2, #30
 80157f0:	680e      	ldr	r6, [r1, #0]
 80157f2:	bf08      	it	eq
 80157f4:	694b      	ldreq	r3, [r1, #20]
 80157f6:	600f      	str	r7, [r1, #0]
 80157f8:	bf18      	it	ne
 80157fa:	2300      	movne	r3, #0
 80157fc:	eba6 0807 	sub.w	r8, r6, r7
 8015800:	608b      	str	r3, [r1, #8]
 8015802:	f1b8 0f00 	cmp.w	r8, #0
 8015806:	dd9c      	ble.n	8015742 <__sflush_r+0x1a>
 8015808:	6a21      	ldr	r1, [r4, #32]
 801580a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801580c:	4643      	mov	r3, r8
 801580e:	463a      	mov	r2, r7
 8015810:	4628      	mov	r0, r5
 8015812:	47b0      	blx	r6
 8015814:	2800      	cmp	r0, #0
 8015816:	dc06      	bgt.n	8015826 <__sflush_r+0xfe>
 8015818:	89a3      	ldrh	r3, [r4, #12]
 801581a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801581e:	81a3      	strh	r3, [r4, #12]
 8015820:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015824:	e78e      	b.n	8015744 <__sflush_r+0x1c>
 8015826:	4407      	add	r7, r0
 8015828:	eba8 0800 	sub.w	r8, r8, r0
 801582c:	e7e9      	b.n	8015802 <__sflush_r+0xda>
 801582e:	bf00      	nop
 8015830:	20400001 	.word	0x20400001

08015834 <_fflush_r>:
 8015834:	b538      	push	{r3, r4, r5, lr}
 8015836:	690b      	ldr	r3, [r1, #16]
 8015838:	4605      	mov	r5, r0
 801583a:	460c      	mov	r4, r1
 801583c:	b913      	cbnz	r3, 8015844 <_fflush_r+0x10>
 801583e:	2500      	movs	r5, #0
 8015840:	4628      	mov	r0, r5
 8015842:	bd38      	pop	{r3, r4, r5, pc}
 8015844:	b118      	cbz	r0, 801584e <_fflush_r+0x1a>
 8015846:	6983      	ldr	r3, [r0, #24]
 8015848:	b90b      	cbnz	r3, 801584e <_fflush_r+0x1a>
 801584a:	f7ff fcd3 	bl	80151f4 <__sinit>
 801584e:	4b14      	ldr	r3, [pc, #80]	; (80158a0 <_fflush_r+0x6c>)
 8015850:	429c      	cmp	r4, r3
 8015852:	d11b      	bne.n	801588c <_fflush_r+0x58>
 8015854:	686c      	ldr	r4, [r5, #4]
 8015856:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801585a:	2b00      	cmp	r3, #0
 801585c:	d0ef      	beq.n	801583e <_fflush_r+0xa>
 801585e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8015860:	07d0      	lsls	r0, r2, #31
 8015862:	d404      	bmi.n	801586e <_fflush_r+0x3a>
 8015864:	0599      	lsls	r1, r3, #22
 8015866:	d402      	bmi.n	801586e <_fflush_r+0x3a>
 8015868:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801586a:	f7ff fd86 	bl	801537a <__retarget_lock_acquire_recursive>
 801586e:	4628      	mov	r0, r5
 8015870:	4621      	mov	r1, r4
 8015872:	f7ff ff59 	bl	8015728 <__sflush_r>
 8015876:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015878:	07da      	lsls	r2, r3, #31
 801587a:	4605      	mov	r5, r0
 801587c:	d4e0      	bmi.n	8015840 <_fflush_r+0xc>
 801587e:	89a3      	ldrh	r3, [r4, #12]
 8015880:	059b      	lsls	r3, r3, #22
 8015882:	d4dd      	bmi.n	8015840 <_fflush_r+0xc>
 8015884:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015886:	f7ff fd79 	bl	801537c <__retarget_lock_release_recursive>
 801588a:	e7d9      	b.n	8015840 <_fflush_r+0xc>
 801588c:	4b05      	ldr	r3, [pc, #20]	; (80158a4 <_fflush_r+0x70>)
 801588e:	429c      	cmp	r4, r3
 8015890:	d101      	bne.n	8015896 <_fflush_r+0x62>
 8015892:	68ac      	ldr	r4, [r5, #8]
 8015894:	e7df      	b.n	8015856 <_fflush_r+0x22>
 8015896:	4b04      	ldr	r3, [pc, #16]	; (80158a8 <_fflush_r+0x74>)
 8015898:	429c      	cmp	r4, r3
 801589a:	bf08      	it	eq
 801589c:	68ec      	ldreq	r4, [r5, #12]
 801589e:	e7da      	b.n	8015856 <_fflush_r+0x22>
 80158a0:	08019c74 	.word	0x08019c74
 80158a4:	08019c94 	.word	0x08019c94
 80158a8:	08019c54 	.word	0x08019c54

080158ac <fiprintf>:
 80158ac:	b40e      	push	{r1, r2, r3}
 80158ae:	b503      	push	{r0, r1, lr}
 80158b0:	4601      	mov	r1, r0
 80158b2:	ab03      	add	r3, sp, #12
 80158b4:	4805      	ldr	r0, [pc, #20]	; (80158cc <fiprintf+0x20>)
 80158b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80158ba:	6800      	ldr	r0, [r0, #0]
 80158bc:	9301      	str	r3, [sp, #4]
 80158be:	f000 f8a7 	bl	8015a10 <_vfiprintf_r>
 80158c2:	b002      	add	sp, #8
 80158c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80158c8:	b003      	add	sp, #12
 80158ca:	4770      	bx	lr
 80158cc:	2000001c 	.word	0x2000001c

080158d0 <_lseek_r>:
 80158d0:	b538      	push	{r3, r4, r5, lr}
 80158d2:	4d07      	ldr	r5, [pc, #28]	; (80158f0 <_lseek_r+0x20>)
 80158d4:	4604      	mov	r4, r0
 80158d6:	4608      	mov	r0, r1
 80158d8:	4611      	mov	r1, r2
 80158da:	2200      	movs	r2, #0
 80158dc:	602a      	str	r2, [r5, #0]
 80158de:	461a      	mov	r2, r3
 80158e0:	f7eb f912 	bl	8000b08 <_lseek>
 80158e4:	1c43      	adds	r3, r0, #1
 80158e6:	d102      	bne.n	80158ee <_lseek_r+0x1e>
 80158e8:	682b      	ldr	r3, [r5, #0]
 80158ea:	b103      	cbz	r3, 80158ee <_lseek_r+0x1e>
 80158ec:	6023      	str	r3, [r4, #0]
 80158ee:	bd38      	pop	{r3, r4, r5, pc}
 80158f0:	2000bdc0 	.word	0x2000bdc0

080158f4 <malloc>:
 80158f4:	4b02      	ldr	r3, [pc, #8]	; (8015900 <malloc+0xc>)
 80158f6:	4601      	mov	r1, r0
 80158f8:	6818      	ldr	r0, [r3, #0]
 80158fa:	f7ff bd65 	b.w	80153c8 <_malloc_r>
 80158fe:	bf00      	nop
 8015900:	2000001c 	.word	0x2000001c

08015904 <__malloc_lock>:
 8015904:	4801      	ldr	r0, [pc, #4]	; (801590c <__malloc_lock+0x8>)
 8015906:	f7ff bd38 	b.w	801537a <__retarget_lock_acquire_recursive>
 801590a:	bf00      	nop
 801590c:	2000bdcc 	.word	0x2000bdcc

08015910 <__malloc_unlock>:
 8015910:	4801      	ldr	r0, [pc, #4]	; (8015918 <__malloc_unlock+0x8>)
 8015912:	f7ff bd33 	b.w	801537c <__retarget_lock_release_recursive>
 8015916:	bf00      	nop
 8015918:	2000bdcc 	.word	0x2000bdcc

0801591c <_free_r>:
 801591c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801591e:	2900      	cmp	r1, #0
 8015920:	d048      	beq.n	80159b4 <_free_r+0x98>
 8015922:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015926:	9001      	str	r0, [sp, #4]
 8015928:	2b00      	cmp	r3, #0
 801592a:	f1a1 0404 	sub.w	r4, r1, #4
 801592e:	bfb8      	it	lt
 8015930:	18e4      	addlt	r4, r4, r3
 8015932:	f7ff ffe7 	bl	8015904 <__malloc_lock>
 8015936:	4a20      	ldr	r2, [pc, #128]	; (80159b8 <_free_r+0x9c>)
 8015938:	9801      	ldr	r0, [sp, #4]
 801593a:	6813      	ldr	r3, [r2, #0]
 801593c:	4615      	mov	r5, r2
 801593e:	b933      	cbnz	r3, 801594e <_free_r+0x32>
 8015940:	6063      	str	r3, [r4, #4]
 8015942:	6014      	str	r4, [r2, #0]
 8015944:	b003      	add	sp, #12
 8015946:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801594a:	f7ff bfe1 	b.w	8015910 <__malloc_unlock>
 801594e:	42a3      	cmp	r3, r4
 8015950:	d90b      	bls.n	801596a <_free_r+0x4e>
 8015952:	6821      	ldr	r1, [r4, #0]
 8015954:	1862      	adds	r2, r4, r1
 8015956:	4293      	cmp	r3, r2
 8015958:	bf04      	itt	eq
 801595a:	681a      	ldreq	r2, [r3, #0]
 801595c:	685b      	ldreq	r3, [r3, #4]
 801595e:	6063      	str	r3, [r4, #4]
 8015960:	bf04      	itt	eq
 8015962:	1852      	addeq	r2, r2, r1
 8015964:	6022      	streq	r2, [r4, #0]
 8015966:	602c      	str	r4, [r5, #0]
 8015968:	e7ec      	b.n	8015944 <_free_r+0x28>
 801596a:	461a      	mov	r2, r3
 801596c:	685b      	ldr	r3, [r3, #4]
 801596e:	b10b      	cbz	r3, 8015974 <_free_r+0x58>
 8015970:	42a3      	cmp	r3, r4
 8015972:	d9fa      	bls.n	801596a <_free_r+0x4e>
 8015974:	6811      	ldr	r1, [r2, #0]
 8015976:	1855      	adds	r5, r2, r1
 8015978:	42a5      	cmp	r5, r4
 801597a:	d10b      	bne.n	8015994 <_free_r+0x78>
 801597c:	6824      	ldr	r4, [r4, #0]
 801597e:	4421      	add	r1, r4
 8015980:	1854      	adds	r4, r2, r1
 8015982:	42a3      	cmp	r3, r4
 8015984:	6011      	str	r1, [r2, #0]
 8015986:	d1dd      	bne.n	8015944 <_free_r+0x28>
 8015988:	681c      	ldr	r4, [r3, #0]
 801598a:	685b      	ldr	r3, [r3, #4]
 801598c:	6053      	str	r3, [r2, #4]
 801598e:	4421      	add	r1, r4
 8015990:	6011      	str	r1, [r2, #0]
 8015992:	e7d7      	b.n	8015944 <_free_r+0x28>
 8015994:	d902      	bls.n	801599c <_free_r+0x80>
 8015996:	230c      	movs	r3, #12
 8015998:	6003      	str	r3, [r0, #0]
 801599a:	e7d3      	b.n	8015944 <_free_r+0x28>
 801599c:	6825      	ldr	r5, [r4, #0]
 801599e:	1961      	adds	r1, r4, r5
 80159a0:	428b      	cmp	r3, r1
 80159a2:	bf04      	itt	eq
 80159a4:	6819      	ldreq	r1, [r3, #0]
 80159a6:	685b      	ldreq	r3, [r3, #4]
 80159a8:	6063      	str	r3, [r4, #4]
 80159aa:	bf04      	itt	eq
 80159ac:	1949      	addeq	r1, r1, r5
 80159ae:	6021      	streq	r1, [r4, #0]
 80159b0:	6054      	str	r4, [r2, #4]
 80159b2:	e7c7      	b.n	8015944 <_free_r+0x28>
 80159b4:	b003      	add	sp, #12
 80159b6:	bd30      	pop	{r4, r5, pc}
 80159b8:	20004c08 	.word	0x20004c08

080159bc <__sfputc_r>:
 80159bc:	6893      	ldr	r3, [r2, #8]
 80159be:	3b01      	subs	r3, #1
 80159c0:	2b00      	cmp	r3, #0
 80159c2:	b410      	push	{r4}
 80159c4:	6093      	str	r3, [r2, #8]
 80159c6:	da08      	bge.n	80159da <__sfputc_r+0x1e>
 80159c8:	6994      	ldr	r4, [r2, #24]
 80159ca:	42a3      	cmp	r3, r4
 80159cc:	db01      	blt.n	80159d2 <__sfputc_r+0x16>
 80159ce:	290a      	cmp	r1, #10
 80159d0:	d103      	bne.n	80159da <__sfputc_r+0x1e>
 80159d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80159d6:	f000 baf1 	b.w	8015fbc <__swbuf_r>
 80159da:	6813      	ldr	r3, [r2, #0]
 80159dc:	1c58      	adds	r0, r3, #1
 80159de:	6010      	str	r0, [r2, #0]
 80159e0:	7019      	strb	r1, [r3, #0]
 80159e2:	4608      	mov	r0, r1
 80159e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80159e8:	4770      	bx	lr

080159ea <__sfputs_r>:
 80159ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80159ec:	4606      	mov	r6, r0
 80159ee:	460f      	mov	r7, r1
 80159f0:	4614      	mov	r4, r2
 80159f2:	18d5      	adds	r5, r2, r3
 80159f4:	42ac      	cmp	r4, r5
 80159f6:	d101      	bne.n	80159fc <__sfputs_r+0x12>
 80159f8:	2000      	movs	r0, #0
 80159fa:	e007      	b.n	8015a0c <__sfputs_r+0x22>
 80159fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015a00:	463a      	mov	r2, r7
 8015a02:	4630      	mov	r0, r6
 8015a04:	f7ff ffda 	bl	80159bc <__sfputc_r>
 8015a08:	1c43      	adds	r3, r0, #1
 8015a0a:	d1f3      	bne.n	80159f4 <__sfputs_r+0xa>
 8015a0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08015a10 <_vfiprintf_r>:
 8015a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015a14:	460d      	mov	r5, r1
 8015a16:	b09d      	sub	sp, #116	; 0x74
 8015a18:	4614      	mov	r4, r2
 8015a1a:	4698      	mov	r8, r3
 8015a1c:	4606      	mov	r6, r0
 8015a1e:	b118      	cbz	r0, 8015a28 <_vfiprintf_r+0x18>
 8015a20:	6983      	ldr	r3, [r0, #24]
 8015a22:	b90b      	cbnz	r3, 8015a28 <_vfiprintf_r+0x18>
 8015a24:	f7ff fbe6 	bl	80151f4 <__sinit>
 8015a28:	4b89      	ldr	r3, [pc, #548]	; (8015c50 <_vfiprintf_r+0x240>)
 8015a2a:	429d      	cmp	r5, r3
 8015a2c:	d11b      	bne.n	8015a66 <_vfiprintf_r+0x56>
 8015a2e:	6875      	ldr	r5, [r6, #4]
 8015a30:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015a32:	07d9      	lsls	r1, r3, #31
 8015a34:	d405      	bmi.n	8015a42 <_vfiprintf_r+0x32>
 8015a36:	89ab      	ldrh	r3, [r5, #12]
 8015a38:	059a      	lsls	r2, r3, #22
 8015a3a:	d402      	bmi.n	8015a42 <_vfiprintf_r+0x32>
 8015a3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015a3e:	f7ff fc9c 	bl	801537a <__retarget_lock_acquire_recursive>
 8015a42:	89ab      	ldrh	r3, [r5, #12]
 8015a44:	071b      	lsls	r3, r3, #28
 8015a46:	d501      	bpl.n	8015a4c <_vfiprintf_r+0x3c>
 8015a48:	692b      	ldr	r3, [r5, #16]
 8015a4a:	b9eb      	cbnz	r3, 8015a88 <_vfiprintf_r+0x78>
 8015a4c:	4629      	mov	r1, r5
 8015a4e:	4630      	mov	r0, r6
 8015a50:	f000 fb06 	bl	8016060 <__swsetup_r>
 8015a54:	b1c0      	cbz	r0, 8015a88 <_vfiprintf_r+0x78>
 8015a56:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015a58:	07dc      	lsls	r4, r3, #31
 8015a5a:	d50e      	bpl.n	8015a7a <_vfiprintf_r+0x6a>
 8015a5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015a60:	b01d      	add	sp, #116	; 0x74
 8015a62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015a66:	4b7b      	ldr	r3, [pc, #492]	; (8015c54 <_vfiprintf_r+0x244>)
 8015a68:	429d      	cmp	r5, r3
 8015a6a:	d101      	bne.n	8015a70 <_vfiprintf_r+0x60>
 8015a6c:	68b5      	ldr	r5, [r6, #8]
 8015a6e:	e7df      	b.n	8015a30 <_vfiprintf_r+0x20>
 8015a70:	4b79      	ldr	r3, [pc, #484]	; (8015c58 <_vfiprintf_r+0x248>)
 8015a72:	429d      	cmp	r5, r3
 8015a74:	bf08      	it	eq
 8015a76:	68f5      	ldreq	r5, [r6, #12]
 8015a78:	e7da      	b.n	8015a30 <_vfiprintf_r+0x20>
 8015a7a:	89ab      	ldrh	r3, [r5, #12]
 8015a7c:	0598      	lsls	r0, r3, #22
 8015a7e:	d4ed      	bmi.n	8015a5c <_vfiprintf_r+0x4c>
 8015a80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015a82:	f7ff fc7b 	bl	801537c <__retarget_lock_release_recursive>
 8015a86:	e7e9      	b.n	8015a5c <_vfiprintf_r+0x4c>
 8015a88:	2300      	movs	r3, #0
 8015a8a:	9309      	str	r3, [sp, #36]	; 0x24
 8015a8c:	2320      	movs	r3, #32
 8015a8e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015a92:	f8cd 800c 	str.w	r8, [sp, #12]
 8015a96:	2330      	movs	r3, #48	; 0x30
 8015a98:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8015c5c <_vfiprintf_r+0x24c>
 8015a9c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015aa0:	f04f 0901 	mov.w	r9, #1
 8015aa4:	4623      	mov	r3, r4
 8015aa6:	469a      	mov	sl, r3
 8015aa8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015aac:	b10a      	cbz	r2, 8015ab2 <_vfiprintf_r+0xa2>
 8015aae:	2a25      	cmp	r2, #37	; 0x25
 8015ab0:	d1f9      	bne.n	8015aa6 <_vfiprintf_r+0x96>
 8015ab2:	ebba 0b04 	subs.w	fp, sl, r4
 8015ab6:	d00b      	beq.n	8015ad0 <_vfiprintf_r+0xc0>
 8015ab8:	465b      	mov	r3, fp
 8015aba:	4622      	mov	r2, r4
 8015abc:	4629      	mov	r1, r5
 8015abe:	4630      	mov	r0, r6
 8015ac0:	f7ff ff93 	bl	80159ea <__sfputs_r>
 8015ac4:	3001      	adds	r0, #1
 8015ac6:	f000 80aa 	beq.w	8015c1e <_vfiprintf_r+0x20e>
 8015aca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015acc:	445a      	add	r2, fp
 8015ace:	9209      	str	r2, [sp, #36]	; 0x24
 8015ad0:	f89a 3000 	ldrb.w	r3, [sl]
 8015ad4:	2b00      	cmp	r3, #0
 8015ad6:	f000 80a2 	beq.w	8015c1e <_vfiprintf_r+0x20e>
 8015ada:	2300      	movs	r3, #0
 8015adc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015ae0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015ae4:	f10a 0a01 	add.w	sl, sl, #1
 8015ae8:	9304      	str	r3, [sp, #16]
 8015aea:	9307      	str	r3, [sp, #28]
 8015aec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015af0:	931a      	str	r3, [sp, #104]	; 0x68
 8015af2:	4654      	mov	r4, sl
 8015af4:	2205      	movs	r2, #5
 8015af6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015afa:	4858      	ldr	r0, [pc, #352]	; (8015c5c <_vfiprintf_r+0x24c>)
 8015afc:	f7ea fb68 	bl	80001d0 <memchr>
 8015b00:	9a04      	ldr	r2, [sp, #16]
 8015b02:	b9d8      	cbnz	r0, 8015b3c <_vfiprintf_r+0x12c>
 8015b04:	06d1      	lsls	r1, r2, #27
 8015b06:	bf44      	itt	mi
 8015b08:	2320      	movmi	r3, #32
 8015b0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015b0e:	0713      	lsls	r3, r2, #28
 8015b10:	bf44      	itt	mi
 8015b12:	232b      	movmi	r3, #43	; 0x2b
 8015b14:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015b18:	f89a 3000 	ldrb.w	r3, [sl]
 8015b1c:	2b2a      	cmp	r3, #42	; 0x2a
 8015b1e:	d015      	beq.n	8015b4c <_vfiprintf_r+0x13c>
 8015b20:	9a07      	ldr	r2, [sp, #28]
 8015b22:	4654      	mov	r4, sl
 8015b24:	2000      	movs	r0, #0
 8015b26:	f04f 0c0a 	mov.w	ip, #10
 8015b2a:	4621      	mov	r1, r4
 8015b2c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015b30:	3b30      	subs	r3, #48	; 0x30
 8015b32:	2b09      	cmp	r3, #9
 8015b34:	d94e      	bls.n	8015bd4 <_vfiprintf_r+0x1c4>
 8015b36:	b1b0      	cbz	r0, 8015b66 <_vfiprintf_r+0x156>
 8015b38:	9207      	str	r2, [sp, #28]
 8015b3a:	e014      	b.n	8015b66 <_vfiprintf_r+0x156>
 8015b3c:	eba0 0308 	sub.w	r3, r0, r8
 8015b40:	fa09 f303 	lsl.w	r3, r9, r3
 8015b44:	4313      	orrs	r3, r2
 8015b46:	9304      	str	r3, [sp, #16]
 8015b48:	46a2      	mov	sl, r4
 8015b4a:	e7d2      	b.n	8015af2 <_vfiprintf_r+0xe2>
 8015b4c:	9b03      	ldr	r3, [sp, #12]
 8015b4e:	1d19      	adds	r1, r3, #4
 8015b50:	681b      	ldr	r3, [r3, #0]
 8015b52:	9103      	str	r1, [sp, #12]
 8015b54:	2b00      	cmp	r3, #0
 8015b56:	bfbb      	ittet	lt
 8015b58:	425b      	neglt	r3, r3
 8015b5a:	f042 0202 	orrlt.w	r2, r2, #2
 8015b5e:	9307      	strge	r3, [sp, #28]
 8015b60:	9307      	strlt	r3, [sp, #28]
 8015b62:	bfb8      	it	lt
 8015b64:	9204      	strlt	r2, [sp, #16]
 8015b66:	7823      	ldrb	r3, [r4, #0]
 8015b68:	2b2e      	cmp	r3, #46	; 0x2e
 8015b6a:	d10c      	bne.n	8015b86 <_vfiprintf_r+0x176>
 8015b6c:	7863      	ldrb	r3, [r4, #1]
 8015b6e:	2b2a      	cmp	r3, #42	; 0x2a
 8015b70:	d135      	bne.n	8015bde <_vfiprintf_r+0x1ce>
 8015b72:	9b03      	ldr	r3, [sp, #12]
 8015b74:	1d1a      	adds	r2, r3, #4
 8015b76:	681b      	ldr	r3, [r3, #0]
 8015b78:	9203      	str	r2, [sp, #12]
 8015b7a:	2b00      	cmp	r3, #0
 8015b7c:	bfb8      	it	lt
 8015b7e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8015b82:	3402      	adds	r4, #2
 8015b84:	9305      	str	r3, [sp, #20]
 8015b86:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8015c6c <_vfiprintf_r+0x25c>
 8015b8a:	7821      	ldrb	r1, [r4, #0]
 8015b8c:	2203      	movs	r2, #3
 8015b8e:	4650      	mov	r0, sl
 8015b90:	f7ea fb1e 	bl	80001d0 <memchr>
 8015b94:	b140      	cbz	r0, 8015ba8 <_vfiprintf_r+0x198>
 8015b96:	2340      	movs	r3, #64	; 0x40
 8015b98:	eba0 000a 	sub.w	r0, r0, sl
 8015b9c:	fa03 f000 	lsl.w	r0, r3, r0
 8015ba0:	9b04      	ldr	r3, [sp, #16]
 8015ba2:	4303      	orrs	r3, r0
 8015ba4:	3401      	adds	r4, #1
 8015ba6:	9304      	str	r3, [sp, #16]
 8015ba8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015bac:	482c      	ldr	r0, [pc, #176]	; (8015c60 <_vfiprintf_r+0x250>)
 8015bae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015bb2:	2206      	movs	r2, #6
 8015bb4:	f7ea fb0c 	bl	80001d0 <memchr>
 8015bb8:	2800      	cmp	r0, #0
 8015bba:	d03f      	beq.n	8015c3c <_vfiprintf_r+0x22c>
 8015bbc:	4b29      	ldr	r3, [pc, #164]	; (8015c64 <_vfiprintf_r+0x254>)
 8015bbe:	bb1b      	cbnz	r3, 8015c08 <_vfiprintf_r+0x1f8>
 8015bc0:	9b03      	ldr	r3, [sp, #12]
 8015bc2:	3307      	adds	r3, #7
 8015bc4:	f023 0307 	bic.w	r3, r3, #7
 8015bc8:	3308      	adds	r3, #8
 8015bca:	9303      	str	r3, [sp, #12]
 8015bcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015bce:	443b      	add	r3, r7
 8015bd0:	9309      	str	r3, [sp, #36]	; 0x24
 8015bd2:	e767      	b.n	8015aa4 <_vfiprintf_r+0x94>
 8015bd4:	fb0c 3202 	mla	r2, ip, r2, r3
 8015bd8:	460c      	mov	r4, r1
 8015bda:	2001      	movs	r0, #1
 8015bdc:	e7a5      	b.n	8015b2a <_vfiprintf_r+0x11a>
 8015bde:	2300      	movs	r3, #0
 8015be0:	3401      	adds	r4, #1
 8015be2:	9305      	str	r3, [sp, #20]
 8015be4:	4619      	mov	r1, r3
 8015be6:	f04f 0c0a 	mov.w	ip, #10
 8015bea:	4620      	mov	r0, r4
 8015bec:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015bf0:	3a30      	subs	r2, #48	; 0x30
 8015bf2:	2a09      	cmp	r2, #9
 8015bf4:	d903      	bls.n	8015bfe <_vfiprintf_r+0x1ee>
 8015bf6:	2b00      	cmp	r3, #0
 8015bf8:	d0c5      	beq.n	8015b86 <_vfiprintf_r+0x176>
 8015bfa:	9105      	str	r1, [sp, #20]
 8015bfc:	e7c3      	b.n	8015b86 <_vfiprintf_r+0x176>
 8015bfe:	fb0c 2101 	mla	r1, ip, r1, r2
 8015c02:	4604      	mov	r4, r0
 8015c04:	2301      	movs	r3, #1
 8015c06:	e7f0      	b.n	8015bea <_vfiprintf_r+0x1da>
 8015c08:	ab03      	add	r3, sp, #12
 8015c0a:	9300      	str	r3, [sp, #0]
 8015c0c:	462a      	mov	r2, r5
 8015c0e:	4b16      	ldr	r3, [pc, #88]	; (8015c68 <_vfiprintf_r+0x258>)
 8015c10:	a904      	add	r1, sp, #16
 8015c12:	4630      	mov	r0, r6
 8015c14:	f3af 8000 	nop.w
 8015c18:	4607      	mov	r7, r0
 8015c1a:	1c78      	adds	r0, r7, #1
 8015c1c:	d1d6      	bne.n	8015bcc <_vfiprintf_r+0x1bc>
 8015c1e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015c20:	07d9      	lsls	r1, r3, #31
 8015c22:	d405      	bmi.n	8015c30 <_vfiprintf_r+0x220>
 8015c24:	89ab      	ldrh	r3, [r5, #12]
 8015c26:	059a      	lsls	r2, r3, #22
 8015c28:	d402      	bmi.n	8015c30 <_vfiprintf_r+0x220>
 8015c2a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015c2c:	f7ff fba6 	bl	801537c <__retarget_lock_release_recursive>
 8015c30:	89ab      	ldrh	r3, [r5, #12]
 8015c32:	065b      	lsls	r3, r3, #25
 8015c34:	f53f af12 	bmi.w	8015a5c <_vfiprintf_r+0x4c>
 8015c38:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015c3a:	e711      	b.n	8015a60 <_vfiprintf_r+0x50>
 8015c3c:	ab03      	add	r3, sp, #12
 8015c3e:	9300      	str	r3, [sp, #0]
 8015c40:	462a      	mov	r2, r5
 8015c42:	4b09      	ldr	r3, [pc, #36]	; (8015c68 <_vfiprintf_r+0x258>)
 8015c44:	a904      	add	r1, sp, #16
 8015c46:	4630      	mov	r0, r6
 8015c48:	f000 f880 	bl	8015d4c <_printf_i>
 8015c4c:	e7e4      	b.n	8015c18 <_vfiprintf_r+0x208>
 8015c4e:	bf00      	nop
 8015c50:	08019c74 	.word	0x08019c74
 8015c54:	08019c94 	.word	0x08019c94
 8015c58:	08019c54 	.word	0x08019c54
 8015c5c:	08019d6a 	.word	0x08019d6a
 8015c60:	08019d74 	.word	0x08019d74
 8015c64:	00000000 	.word	0x00000000
 8015c68:	080159eb 	.word	0x080159eb
 8015c6c:	08019d70 	.word	0x08019d70

08015c70 <_printf_common>:
 8015c70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015c74:	4616      	mov	r6, r2
 8015c76:	4699      	mov	r9, r3
 8015c78:	688a      	ldr	r2, [r1, #8]
 8015c7a:	690b      	ldr	r3, [r1, #16]
 8015c7c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8015c80:	4293      	cmp	r3, r2
 8015c82:	bfb8      	it	lt
 8015c84:	4613      	movlt	r3, r2
 8015c86:	6033      	str	r3, [r6, #0]
 8015c88:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8015c8c:	4607      	mov	r7, r0
 8015c8e:	460c      	mov	r4, r1
 8015c90:	b10a      	cbz	r2, 8015c96 <_printf_common+0x26>
 8015c92:	3301      	adds	r3, #1
 8015c94:	6033      	str	r3, [r6, #0]
 8015c96:	6823      	ldr	r3, [r4, #0]
 8015c98:	0699      	lsls	r1, r3, #26
 8015c9a:	bf42      	ittt	mi
 8015c9c:	6833      	ldrmi	r3, [r6, #0]
 8015c9e:	3302      	addmi	r3, #2
 8015ca0:	6033      	strmi	r3, [r6, #0]
 8015ca2:	6825      	ldr	r5, [r4, #0]
 8015ca4:	f015 0506 	ands.w	r5, r5, #6
 8015ca8:	d106      	bne.n	8015cb8 <_printf_common+0x48>
 8015caa:	f104 0a19 	add.w	sl, r4, #25
 8015cae:	68e3      	ldr	r3, [r4, #12]
 8015cb0:	6832      	ldr	r2, [r6, #0]
 8015cb2:	1a9b      	subs	r3, r3, r2
 8015cb4:	42ab      	cmp	r3, r5
 8015cb6:	dc26      	bgt.n	8015d06 <_printf_common+0x96>
 8015cb8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8015cbc:	1e13      	subs	r3, r2, #0
 8015cbe:	6822      	ldr	r2, [r4, #0]
 8015cc0:	bf18      	it	ne
 8015cc2:	2301      	movne	r3, #1
 8015cc4:	0692      	lsls	r2, r2, #26
 8015cc6:	d42b      	bmi.n	8015d20 <_printf_common+0xb0>
 8015cc8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015ccc:	4649      	mov	r1, r9
 8015cce:	4638      	mov	r0, r7
 8015cd0:	47c0      	blx	r8
 8015cd2:	3001      	adds	r0, #1
 8015cd4:	d01e      	beq.n	8015d14 <_printf_common+0xa4>
 8015cd6:	6823      	ldr	r3, [r4, #0]
 8015cd8:	68e5      	ldr	r5, [r4, #12]
 8015cda:	6832      	ldr	r2, [r6, #0]
 8015cdc:	f003 0306 	and.w	r3, r3, #6
 8015ce0:	2b04      	cmp	r3, #4
 8015ce2:	bf08      	it	eq
 8015ce4:	1aad      	subeq	r5, r5, r2
 8015ce6:	68a3      	ldr	r3, [r4, #8]
 8015ce8:	6922      	ldr	r2, [r4, #16]
 8015cea:	bf0c      	ite	eq
 8015cec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015cf0:	2500      	movne	r5, #0
 8015cf2:	4293      	cmp	r3, r2
 8015cf4:	bfc4      	itt	gt
 8015cf6:	1a9b      	subgt	r3, r3, r2
 8015cf8:	18ed      	addgt	r5, r5, r3
 8015cfa:	2600      	movs	r6, #0
 8015cfc:	341a      	adds	r4, #26
 8015cfe:	42b5      	cmp	r5, r6
 8015d00:	d11a      	bne.n	8015d38 <_printf_common+0xc8>
 8015d02:	2000      	movs	r0, #0
 8015d04:	e008      	b.n	8015d18 <_printf_common+0xa8>
 8015d06:	2301      	movs	r3, #1
 8015d08:	4652      	mov	r2, sl
 8015d0a:	4649      	mov	r1, r9
 8015d0c:	4638      	mov	r0, r7
 8015d0e:	47c0      	blx	r8
 8015d10:	3001      	adds	r0, #1
 8015d12:	d103      	bne.n	8015d1c <_printf_common+0xac>
 8015d14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015d18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015d1c:	3501      	adds	r5, #1
 8015d1e:	e7c6      	b.n	8015cae <_printf_common+0x3e>
 8015d20:	18e1      	adds	r1, r4, r3
 8015d22:	1c5a      	adds	r2, r3, #1
 8015d24:	2030      	movs	r0, #48	; 0x30
 8015d26:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8015d2a:	4422      	add	r2, r4
 8015d2c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8015d30:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8015d34:	3302      	adds	r3, #2
 8015d36:	e7c7      	b.n	8015cc8 <_printf_common+0x58>
 8015d38:	2301      	movs	r3, #1
 8015d3a:	4622      	mov	r2, r4
 8015d3c:	4649      	mov	r1, r9
 8015d3e:	4638      	mov	r0, r7
 8015d40:	47c0      	blx	r8
 8015d42:	3001      	adds	r0, #1
 8015d44:	d0e6      	beq.n	8015d14 <_printf_common+0xa4>
 8015d46:	3601      	adds	r6, #1
 8015d48:	e7d9      	b.n	8015cfe <_printf_common+0x8e>
	...

08015d4c <_printf_i>:
 8015d4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015d50:	460c      	mov	r4, r1
 8015d52:	4691      	mov	r9, r2
 8015d54:	7e27      	ldrb	r7, [r4, #24]
 8015d56:	990c      	ldr	r1, [sp, #48]	; 0x30
 8015d58:	2f78      	cmp	r7, #120	; 0x78
 8015d5a:	4680      	mov	r8, r0
 8015d5c:	469a      	mov	sl, r3
 8015d5e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015d62:	d807      	bhi.n	8015d74 <_printf_i+0x28>
 8015d64:	2f62      	cmp	r7, #98	; 0x62
 8015d66:	d80a      	bhi.n	8015d7e <_printf_i+0x32>
 8015d68:	2f00      	cmp	r7, #0
 8015d6a:	f000 80d8 	beq.w	8015f1e <_printf_i+0x1d2>
 8015d6e:	2f58      	cmp	r7, #88	; 0x58
 8015d70:	f000 80a3 	beq.w	8015eba <_printf_i+0x16e>
 8015d74:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8015d78:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8015d7c:	e03a      	b.n	8015df4 <_printf_i+0xa8>
 8015d7e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8015d82:	2b15      	cmp	r3, #21
 8015d84:	d8f6      	bhi.n	8015d74 <_printf_i+0x28>
 8015d86:	a001      	add	r0, pc, #4	; (adr r0, 8015d8c <_printf_i+0x40>)
 8015d88:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8015d8c:	08015de5 	.word	0x08015de5
 8015d90:	08015df9 	.word	0x08015df9
 8015d94:	08015d75 	.word	0x08015d75
 8015d98:	08015d75 	.word	0x08015d75
 8015d9c:	08015d75 	.word	0x08015d75
 8015da0:	08015d75 	.word	0x08015d75
 8015da4:	08015df9 	.word	0x08015df9
 8015da8:	08015d75 	.word	0x08015d75
 8015dac:	08015d75 	.word	0x08015d75
 8015db0:	08015d75 	.word	0x08015d75
 8015db4:	08015d75 	.word	0x08015d75
 8015db8:	08015f05 	.word	0x08015f05
 8015dbc:	08015e29 	.word	0x08015e29
 8015dc0:	08015ee7 	.word	0x08015ee7
 8015dc4:	08015d75 	.word	0x08015d75
 8015dc8:	08015d75 	.word	0x08015d75
 8015dcc:	08015f27 	.word	0x08015f27
 8015dd0:	08015d75 	.word	0x08015d75
 8015dd4:	08015e29 	.word	0x08015e29
 8015dd8:	08015d75 	.word	0x08015d75
 8015ddc:	08015d75 	.word	0x08015d75
 8015de0:	08015eef 	.word	0x08015eef
 8015de4:	680b      	ldr	r3, [r1, #0]
 8015de6:	1d1a      	adds	r2, r3, #4
 8015de8:	681b      	ldr	r3, [r3, #0]
 8015dea:	600a      	str	r2, [r1, #0]
 8015dec:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8015df0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015df4:	2301      	movs	r3, #1
 8015df6:	e0a3      	b.n	8015f40 <_printf_i+0x1f4>
 8015df8:	6825      	ldr	r5, [r4, #0]
 8015dfa:	6808      	ldr	r0, [r1, #0]
 8015dfc:	062e      	lsls	r6, r5, #24
 8015dfe:	f100 0304 	add.w	r3, r0, #4
 8015e02:	d50a      	bpl.n	8015e1a <_printf_i+0xce>
 8015e04:	6805      	ldr	r5, [r0, #0]
 8015e06:	600b      	str	r3, [r1, #0]
 8015e08:	2d00      	cmp	r5, #0
 8015e0a:	da03      	bge.n	8015e14 <_printf_i+0xc8>
 8015e0c:	232d      	movs	r3, #45	; 0x2d
 8015e0e:	426d      	negs	r5, r5
 8015e10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015e14:	485e      	ldr	r0, [pc, #376]	; (8015f90 <_printf_i+0x244>)
 8015e16:	230a      	movs	r3, #10
 8015e18:	e019      	b.n	8015e4e <_printf_i+0x102>
 8015e1a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8015e1e:	6805      	ldr	r5, [r0, #0]
 8015e20:	600b      	str	r3, [r1, #0]
 8015e22:	bf18      	it	ne
 8015e24:	b22d      	sxthne	r5, r5
 8015e26:	e7ef      	b.n	8015e08 <_printf_i+0xbc>
 8015e28:	680b      	ldr	r3, [r1, #0]
 8015e2a:	6825      	ldr	r5, [r4, #0]
 8015e2c:	1d18      	adds	r0, r3, #4
 8015e2e:	6008      	str	r0, [r1, #0]
 8015e30:	0628      	lsls	r0, r5, #24
 8015e32:	d501      	bpl.n	8015e38 <_printf_i+0xec>
 8015e34:	681d      	ldr	r5, [r3, #0]
 8015e36:	e002      	b.n	8015e3e <_printf_i+0xf2>
 8015e38:	0669      	lsls	r1, r5, #25
 8015e3a:	d5fb      	bpl.n	8015e34 <_printf_i+0xe8>
 8015e3c:	881d      	ldrh	r5, [r3, #0]
 8015e3e:	4854      	ldr	r0, [pc, #336]	; (8015f90 <_printf_i+0x244>)
 8015e40:	2f6f      	cmp	r7, #111	; 0x6f
 8015e42:	bf0c      	ite	eq
 8015e44:	2308      	moveq	r3, #8
 8015e46:	230a      	movne	r3, #10
 8015e48:	2100      	movs	r1, #0
 8015e4a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8015e4e:	6866      	ldr	r6, [r4, #4]
 8015e50:	60a6      	str	r6, [r4, #8]
 8015e52:	2e00      	cmp	r6, #0
 8015e54:	bfa2      	ittt	ge
 8015e56:	6821      	ldrge	r1, [r4, #0]
 8015e58:	f021 0104 	bicge.w	r1, r1, #4
 8015e5c:	6021      	strge	r1, [r4, #0]
 8015e5e:	b90d      	cbnz	r5, 8015e64 <_printf_i+0x118>
 8015e60:	2e00      	cmp	r6, #0
 8015e62:	d04d      	beq.n	8015f00 <_printf_i+0x1b4>
 8015e64:	4616      	mov	r6, r2
 8015e66:	fbb5 f1f3 	udiv	r1, r5, r3
 8015e6a:	fb03 5711 	mls	r7, r3, r1, r5
 8015e6e:	5dc7      	ldrb	r7, [r0, r7]
 8015e70:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8015e74:	462f      	mov	r7, r5
 8015e76:	42bb      	cmp	r3, r7
 8015e78:	460d      	mov	r5, r1
 8015e7a:	d9f4      	bls.n	8015e66 <_printf_i+0x11a>
 8015e7c:	2b08      	cmp	r3, #8
 8015e7e:	d10b      	bne.n	8015e98 <_printf_i+0x14c>
 8015e80:	6823      	ldr	r3, [r4, #0]
 8015e82:	07df      	lsls	r7, r3, #31
 8015e84:	d508      	bpl.n	8015e98 <_printf_i+0x14c>
 8015e86:	6923      	ldr	r3, [r4, #16]
 8015e88:	6861      	ldr	r1, [r4, #4]
 8015e8a:	4299      	cmp	r1, r3
 8015e8c:	bfde      	ittt	le
 8015e8e:	2330      	movle	r3, #48	; 0x30
 8015e90:	f806 3c01 	strble.w	r3, [r6, #-1]
 8015e94:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8015e98:	1b92      	subs	r2, r2, r6
 8015e9a:	6122      	str	r2, [r4, #16]
 8015e9c:	f8cd a000 	str.w	sl, [sp]
 8015ea0:	464b      	mov	r3, r9
 8015ea2:	aa03      	add	r2, sp, #12
 8015ea4:	4621      	mov	r1, r4
 8015ea6:	4640      	mov	r0, r8
 8015ea8:	f7ff fee2 	bl	8015c70 <_printf_common>
 8015eac:	3001      	adds	r0, #1
 8015eae:	d14c      	bne.n	8015f4a <_printf_i+0x1fe>
 8015eb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015eb4:	b004      	add	sp, #16
 8015eb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015eba:	4835      	ldr	r0, [pc, #212]	; (8015f90 <_printf_i+0x244>)
 8015ebc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8015ec0:	6823      	ldr	r3, [r4, #0]
 8015ec2:	680e      	ldr	r6, [r1, #0]
 8015ec4:	061f      	lsls	r7, r3, #24
 8015ec6:	f856 5b04 	ldr.w	r5, [r6], #4
 8015eca:	600e      	str	r6, [r1, #0]
 8015ecc:	d514      	bpl.n	8015ef8 <_printf_i+0x1ac>
 8015ece:	07d9      	lsls	r1, r3, #31
 8015ed0:	bf44      	itt	mi
 8015ed2:	f043 0320 	orrmi.w	r3, r3, #32
 8015ed6:	6023      	strmi	r3, [r4, #0]
 8015ed8:	b91d      	cbnz	r5, 8015ee2 <_printf_i+0x196>
 8015eda:	6823      	ldr	r3, [r4, #0]
 8015edc:	f023 0320 	bic.w	r3, r3, #32
 8015ee0:	6023      	str	r3, [r4, #0]
 8015ee2:	2310      	movs	r3, #16
 8015ee4:	e7b0      	b.n	8015e48 <_printf_i+0xfc>
 8015ee6:	6823      	ldr	r3, [r4, #0]
 8015ee8:	f043 0320 	orr.w	r3, r3, #32
 8015eec:	6023      	str	r3, [r4, #0]
 8015eee:	2378      	movs	r3, #120	; 0x78
 8015ef0:	4828      	ldr	r0, [pc, #160]	; (8015f94 <_printf_i+0x248>)
 8015ef2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8015ef6:	e7e3      	b.n	8015ec0 <_printf_i+0x174>
 8015ef8:	065e      	lsls	r6, r3, #25
 8015efa:	bf48      	it	mi
 8015efc:	b2ad      	uxthmi	r5, r5
 8015efe:	e7e6      	b.n	8015ece <_printf_i+0x182>
 8015f00:	4616      	mov	r6, r2
 8015f02:	e7bb      	b.n	8015e7c <_printf_i+0x130>
 8015f04:	680b      	ldr	r3, [r1, #0]
 8015f06:	6826      	ldr	r6, [r4, #0]
 8015f08:	6960      	ldr	r0, [r4, #20]
 8015f0a:	1d1d      	adds	r5, r3, #4
 8015f0c:	600d      	str	r5, [r1, #0]
 8015f0e:	0635      	lsls	r5, r6, #24
 8015f10:	681b      	ldr	r3, [r3, #0]
 8015f12:	d501      	bpl.n	8015f18 <_printf_i+0x1cc>
 8015f14:	6018      	str	r0, [r3, #0]
 8015f16:	e002      	b.n	8015f1e <_printf_i+0x1d2>
 8015f18:	0671      	lsls	r1, r6, #25
 8015f1a:	d5fb      	bpl.n	8015f14 <_printf_i+0x1c8>
 8015f1c:	8018      	strh	r0, [r3, #0]
 8015f1e:	2300      	movs	r3, #0
 8015f20:	6123      	str	r3, [r4, #16]
 8015f22:	4616      	mov	r6, r2
 8015f24:	e7ba      	b.n	8015e9c <_printf_i+0x150>
 8015f26:	680b      	ldr	r3, [r1, #0]
 8015f28:	1d1a      	adds	r2, r3, #4
 8015f2a:	600a      	str	r2, [r1, #0]
 8015f2c:	681e      	ldr	r6, [r3, #0]
 8015f2e:	6862      	ldr	r2, [r4, #4]
 8015f30:	2100      	movs	r1, #0
 8015f32:	4630      	mov	r0, r6
 8015f34:	f7ea f94c 	bl	80001d0 <memchr>
 8015f38:	b108      	cbz	r0, 8015f3e <_printf_i+0x1f2>
 8015f3a:	1b80      	subs	r0, r0, r6
 8015f3c:	6060      	str	r0, [r4, #4]
 8015f3e:	6863      	ldr	r3, [r4, #4]
 8015f40:	6123      	str	r3, [r4, #16]
 8015f42:	2300      	movs	r3, #0
 8015f44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015f48:	e7a8      	b.n	8015e9c <_printf_i+0x150>
 8015f4a:	6923      	ldr	r3, [r4, #16]
 8015f4c:	4632      	mov	r2, r6
 8015f4e:	4649      	mov	r1, r9
 8015f50:	4640      	mov	r0, r8
 8015f52:	47d0      	blx	sl
 8015f54:	3001      	adds	r0, #1
 8015f56:	d0ab      	beq.n	8015eb0 <_printf_i+0x164>
 8015f58:	6823      	ldr	r3, [r4, #0]
 8015f5a:	079b      	lsls	r3, r3, #30
 8015f5c:	d413      	bmi.n	8015f86 <_printf_i+0x23a>
 8015f5e:	68e0      	ldr	r0, [r4, #12]
 8015f60:	9b03      	ldr	r3, [sp, #12]
 8015f62:	4298      	cmp	r0, r3
 8015f64:	bfb8      	it	lt
 8015f66:	4618      	movlt	r0, r3
 8015f68:	e7a4      	b.n	8015eb4 <_printf_i+0x168>
 8015f6a:	2301      	movs	r3, #1
 8015f6c:	4632      	mov	r2, r6
 8015f6e:	4649      	mov	r1, r9
 8015f70:	4640      	mov	r0, r8
 8015f72:	47d0      	blx	sl
 8015f74:	3001      	adds	r0, #1
 8015f76:	d09b      	beq.n	8015eb0 <_printf_i+0x164>
 8015f78:	3501      	adds	r5, #1
 8015f7a:	68e3      	ldr	r3, [r4, #12]
 8015f7c:	9903      	ldr	r1, [sp, #12]
 8015f7e:	1a5b      	subs	r3, r3, r1
 8015f80:	42ab      	cmp	r3, r5
 8015f82:	dcf2      	bgt.n	8015f6a <_printf_i+0x21e>
 8015f84:	e7eb      	b.n	8015f5e <_printf_i+0x212>
 8015f86:	2500      	movs	r5, #0
 8015f88:	f104 0619 	add.w	r6, r4, #25
 8015f8c:	e7f5      	b.n	8015f7a <_printf_i+0x22e>
 8015f8e:	bf00      	nop
 8015f90:	08019d7b 	.word	0x08019d7b
 8015f94:	08019d8c 	.word	0x08019d8c

08015f98 <_read_r>:
 8015f98:	b538      	push	{r3, r4, r5, lr}
 8015f9a:	4d07      	ldr	r5, [pc, #28]	; (8015fb8 <_read_r+0x20>)
 8015f9c:	4604      	mov	r4, r0
 8015f9e:	4608      	mov	r0, r1
 8015fa0:	4611      	mov	r1, r2
 8015fa2:	2200      	movs	r2, #0
 8015fa4:	602a      	str	r2, [r5, #0]
 8015fa6:	461a      	mov	r2, r3
 8015fa8:	f7ea fd4e 	bl	8000a48 <_read>
 8015fac:	1c43      	adds	r3, r0, #1
 8015fae:	d102      	bne.n	8015fb6 <_read_r+0x1e>
 8015fb0:	682b      	ldr	r3, [r5, #0]
 8015fb2:	b103      	cbz	r3, 8015fb6 <_read_r+0x1e>
 8015fb4:	6023      	str	r3, [r4, #0]
 8015fb6:	bd38      	pop	{r3, r4, r5, pc}
 8015fb8:	2000bdc0 	.word	0x2000bdc0

08015fbc <__swbuf_r>:
 8015fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015fbe:	460e      	mov	r6, r1
 8015fc0:	4614      	mov	r4, r2
 8015fc2:	4605      	mov	r5, r0
 8015fc4:	b118      	cbz	r0, 8015fce <__swbuf_r+0x12>
 8015fc6:	6983      	ldr	r3, [r0, #24]
 8015fc8:	b90b      	cbnz	r3, 8015fce <__swbuf_r+0x12>
 8015fca:	f7ff f913 	bl	80151f4 <__sinit>
 8015fce:	4b21      	ldr	r3, [pc, #132]	; (8016054 <__swbuf_r+0x98>)
 8015fd0:	429c      	cmp	r4, r3
 8015fd2:	d12b      	bne.n	801602c <__swbuf_r+0x70>
 8015fd4:	686c      	ldr	r4, [r5, #4]
 8015fd6:	69a3      	ldr	r3, [r4, #24]
 8015fd8:	60a3      	str	r3, [r4, #8]
 8015fda:	89a3      	ldrh	r3, [r4, #12]
 8015fdc:	071a      	lsls	r2, r3, #28
 8015fde:	d52f      	bpl.n	8016040 <__swbuf_r+0x84>
 8015fe0:	6923      	ldr	r3, [r4, #16]
 8015fe2:	b36b      	cbz	r3, 8016040 <__swbuf_r+0x84>
 8015fe4:	6923      	ldr	r3, [r4, #16]
 8015fe6:	6820      	ldr	r0, [r4, #0]
 8015fe8:	1ac0      	subs	r0, r0, r3
 8015fea:	6963      	ldr	r3, [r4, #20]
 8015fec:	b2f6      	uxtb	r6, r6
 8015fee:	4283      	cmp	r3, r0
 8015ff0:	4637      	mov	r7, r6
 8015ff2:	dc04      	bgt.n	8015ffe <__swbuf_r+0x42>
 8015ff4:	4621      	mov	r1, r4
 8015ff6:	4628      	mov	r0, r5
 8015ff8:	f7ff fc1c 	bl	8015834 <_fflush_r>
 8015ffc:	bb30      	cbnz	r0, 801604c <__swbuf_r+0x90>
 8015ffe:	68a3      	ldr	r3, [r4, #8]
 8016000:	3b01      	subs	r3, #1
 8016002:	60a3      	str	r3, [r4, #8]
 8016004:	6823      	ldr	r3, [r4, #0]
 8016006:	1c5a      	adds	r2, r3, #1
 8016008:	6022      	str	r2, [r4, #0]
 801600a:	701e      	strb	r6, [r3, #0]
 801600c:	6963      	ldr	r3, [r4, #20]
 801600e:	3001      	adds	r0, #1
 8016010:	4283      	cmp	r3, r0
 8016012:	d004      	beq.n	801601e <__swbuf_r+0x62>
 8016014:	89a3      	ldrh	r3, [r4, #12]
 8016016:	07db      	lsls	r3, r3, #31
 8016018:	d506      	bpl.n	8016028 <__swbuf_r+0x6c>
 801601a:	2e0a      	cmp	r6, #10
 801601c:	d104      	bne.n	8016028 <__swbuf_r+0x6c>
 801601e:	4621      	mov	r1, r4
 8016020:	4628      	mov	r0, r5
 8016022:	f7ff fc07 	bl	8015834 <_fflush_r>
 8016026:	b988      	cbnz	r0, 801604c <__swbuf_r+0x90>
 8016028:	4638      	mov	r0, r7
 801602a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801602c:	4b0a      	ldr	r3, [pc, #40]	; (8016058 <__swbuf_r+0x9c>)
 801602e:	429c      	cmp	r4, r3
 8016030:	d101      	bne.n	8016036 <__swbuf_r+0x7a>
 8016032:	68ac      	ldr	r4, [r5, #8]
 8016034:	e7cf      	b.n	8015fd6 <__swbuf_r+0x1a>
 8016036:	4b09      	ldr	r3, [pc, #36]	; (801605c <__swbuf_r+0xa0>)
 8016038:	429c      	cmp	r4, r3
 801603a:	bf08      	it	eq
 801603c:	68ec      	ldreq	r4, [r5, #12]
 801603e:	e7ca      	b.n	8015fd6 <__swbuf_r+0x1a>
 8016040:	4621      	mov	r1, r4
 8016042:	4628      	mov	r0, r5
 8016044:	f000 f80c 	bl	8016060 <__swsetup_r>
 8016048:	2800      	cmp	r0, #0
 801604a:	d0cb      	beq.n	8015fe4 <__swbuf_r+0x28>
 801604c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8016050:	e7ea      	b.n	8016028 <__swbuf_r+0x6c>
 8016052:	bf00      	nop
 8016054:	08019c74 	.word	0x08019c74
 8016058:	08019c94 	.word	0x08019c94
 801605c:	08019c54 	.word	0x08019c54

08016060 <__swsetup_r>:
 8016060:	4b32      	ldr	r3, [pc, #200]	; (801612c <__swsetup_r+0xcc>)
 8016062:	b570      	push	{r4, r5, r6, lr}
 8016064:	681d      	ldr	r5, [r3, #0]
 8016066:	4606      	mov	r6, r0
 8016068:	460c      	mov	r4, r1
 801606a:	b125      	cbz	r5, 8016076 <__swsetup_r+0x16>
 801606c:	69ab      	ldr	r3, [r5, #24]
 801606e:	b913      	cbnz	r3, 8016076 <__swsetup_r+0x16>
 8016070:	4628      	mov	r0, r5
 8016072:	f7ff f8bf 	bl	80151f4 <__sinit>
 8016076:	4b2e      	ldr	r3, [pc, #184]	; (8016130 <__swsetup_r+0xd0>)
 8016078:	429c      	cmp	r4, r3
 801607a:	d10f      	bne.n	801609c <__swsetup_r+0x3c>
 801607c:	686c      	ldr	r4, [r5, #4]
 801607e:	89a3      	ldrh	r3, [r4, #12]
 8016080:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016084:	0719      	lsls	r1, r3, #28
 8016086:	d42c      	bmi.n	80160e2 <__swsetup_r+0x82>
 8016088:	06dd      	lsls	r5, r3, #27
 801608a:	d411      	bmi.n	80160b0 <__swsetup_r+0x50>
 801608c:	2309      	movs	r3, #9
 801608e:	6033      	str	r3, [r6, #0]
 8016090:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8016094:	81a3      	strh	r3, [r4, #12]
 8016096:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801609a:	e03e      	b.n	801611a <__swsetup_r+0xba>
 801609c:	4b25      	ldr	r3, [pc, #148]	; (8016134 <__swsetup_r+0xd4>)
 801609e:	429c      	cmp	r4, r3
 80160a0:	d101      	bne.n	80160a6 <__swsetup_r+0x46>
 80160a2:	68ac      	ldr	r4, [r5, #8]
 80160a4:	e7eb      	b.n	801607e <__swsetup_r+0x1e>
 80160a6:	4b24      	ldr	r3, [pc, #144]	; (8016138 <__swsetup_r+0xd8>)
 80160a8:	429c      	cmp	r4, r3
 80160aa:	bf08      	it	eq
 80160ac:	68ec      	ldreq	r4, [r5, #12]
 80160ae:	e7e6      	b.n	801607e <__swsetup_r+0x1e>
 80160b0:	0758      	lsls	r0, r3, #29
 80160b2:	d512      	bpl.n	80160da <__swsetup_r+0x7a>
 80160b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80160b6:	b141      	cbz	r1, 80160ca <__swsetup_r+0x6a>
 80160b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80160bc:	4299      	cmp	r1, r3
 80160be:	d002      	beq.n	80160c6 <__swsetup_r+0x66>
 80160c0:	4630      	mov	r0, r6
 80160c2:	f7ff fc2b 	bl	801591c <_free_r>
 80160c6:	2300      	movs	r3, #0
 80160c8:	6363      	str	r3, [r4, #52]	; 0x34
 80160ca:	89a3      	ldrh	r3, [r4, #12]
 80160cc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80160d0:	81a3      	strh	r3, [r4, #12]
 80160d2:	2300      	movs	r3, #0
 80160d4:	6063      	str	r3, [r4, #4]
 80160d6:	6923      	ldr	r3, [r4, #16]
 80160d8:	6023      	str	r3, [r4, #0]
 80160da:	89a3      	ldrh	r3, [r4, #12]
 80160dc:	f043 0308 	orr.w	r3, r3, #8
 80160e0:	81a3      	strh	r3, [r4, #12]
 80160e2:	6923      	ldr	r3, [r4, #16]
 80160e4:	b94b      	cbnz	r3, 80160fa <__swsetup_r+0x9a>
 80160e6:	89a3      	ldrh	r3, [r4, #12]
 80160e8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80160ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80160f0:	d003      	beq.n	80160fa <__swsetup_r+0x9a>
 80160f2:	4621      	mov	r1, r4
 80160f4:	4630      	mov	r0, r6
 80160f6:	f000 f84d 	bl	8016194 <__smakebuf_r>
 80160fa:	89a0      	ldrh	r0, [r4, #12]
 80160fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016100:	f010 0301 	ands.w	r3, r0, #1
 8016104:	d00a      	beq.n	801611c <__swsetup_r+0xbc>
 8016106:	2300      	movs	r3, #0
 8016108:	60a3      	str	r3, [r4, #8]
 801610a:	6963      	ldr	r3, [r4, #20]
 801610c:	425b      	negs	r3, r3
 801610e:	61a3      	str	r3, [r4, #24]
 8016110:	6923      	ldr	r3, [r4, #16]
 8016112:	b943      	cbnz	r3, 8016126 <__swsetup_r+0xc6>
 8016114:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8016118:	d1ba      	bne.n	8016090 <__swsetup_r+0x30>
 801611a:	bd70      	pop	{r4, r5, r6, pc}
 801611c:	0781      	lsls	r1, r0, #30
 801611e:	bf58      	it	pl
 8016120:	6963      	ldrpl	r3, [r4, #20]
 8016122:	60a3      	str	r3, [r4, #8]
 8016124:	e7f4      	b.n	8016110 <__swsetup_r+0xb0>
 8016126:	2000      	movs	r0, #0
 8016128:	e7f7      	b.n	801611a <__swsetup_r+0xba>
 801612a:	bf00      	nop
 801612c:	2000001c 	.word	0x2000001c
 8016130:	08019c74 	.word	0x08019c74
 8016134:	08019c94 	.word	0x08019c94
 8016138:	08019c54 	.word	0x08019c54

0801613c <abort>:
 801613c:	b508      	push	{r3, lr}
 801613e:	2006      	movs	r0, #6
 8016140:	f000 f890 	bl	8016264 <raise>
 8016144:	2001      	movs	r0, #1
 8016146:	f7ea fc75 	bl	8000a34 <_exit>

0801614a <__swhatbuf_r>:
 801614a:	b570      	push	{r4, r5, r6, lr}
 801614c:	460e      	mov	r6, r1
 801614e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016152:	2900      	cmp	r1, #0
 8016154:	b096      	sub	sp, #88	; 0x58
 8016156:	4614      	mov	r4, r2
 8016158:	461d      	mov	r5, r3
 801615a:	da07      	bge.n	801616c <__swhatbuf_r+0x22>
 801615c:	2300      	movs	r3, #0
 801615e:	602b      	str	r3, [r5, #0]
 8016160:	89b3      	ldrh	r3, [r6, #12]
 8016162:	061a      	lsls	r2, r3, #24
 8016164:	d410      	bmi.n	8016188 <__swhatbuf_r+0x3e>
 8016166:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801616a:	e00e      	b.n	801618a <__swhatbuf_r+0x40>
 801616c:	466a      	mov	r2, sp
 801616e:	f000 f895 	bl	801629c <_fstat_r>
 8016172:	2800      	cmp	r0, #0
 8016174:	dbf2      	blt.n	801615c <__swhatbuf_r+0x12>
 8016176:	9a01      	ldr	r2, [sp, #4]
 8016178:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801617c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8016180:	425a      	negs	r2, r3
 8016182:	415a      	adcs	r2, r3
 8016184:	602a      	str	r2, [r5, #0]
 8016186:	e7ee      	b.n	8016166 <__swhatbuf_r+0x1c>
 8016188:	2340      	movs	r3, #64	; 0x40
 801618a:	2000      	movs	r0, #0
 801618c:	6023      	str	r3, [r4, #0]
 801618e:	b016      	add	sp, #88	; 0x58
 8016190:	bd70      	pop	{r4, r5, r6, pc}
	...

08016194 <__smakebuf_r>:
 8016194:	898b      	ldrh	r3, [r1, #12]
 8016196:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016198:	079d      	lsls	r5, r3, #30
 801619a:	4606      	mov	r6, r0
 801619c:	460c      	mov	r4, r1
 801619e:	d507      	bpl.n	80161b0 <__smakebuf_r+0x1c>
 80161a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80161a4:	6023      	str	r3, [r4, #0]
 80161a6:	6123      	str	r3, [r4, #16]
 80161a8:	2301      	movs	r3, #1
 80161aa:	6163      	str	r3, [r4, #20]
 80161ac:	b002      	add	sp, #8
 80161ae:	bd70      	pop	{r4, r5, r6, pc}
 80161b0:	ab01      	add	r3, sp, #4
 80161b2:	466a      	mov	r2, sp
 80161b4:	f7ff ffc9 	bl	801614a <__swhatbuf_r>
 80161b8:	9900      	ldr	r1, [sp, #0]
 80161ba:	4605      	mov	r5, r0
 80161bc:	4630      	mov	r0, r6
 80161be:	f7ff f903 	bl	80153c8 <_malloc_r>
 80161c2:	b948      	cbnz	r0, 80161d8 <__smakebuf_r+0x44>
 80161c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80161c8:	059a      	lsls	r2, r3, #22
 80161ca:	d4ef      	bmi.n	80161ac <__smakebuf_r+0x18>
 80161cc:	f023 0303 	bic.w	r3, r3, #3
 80161d0:	f043 0302 	orr.w	r3, r3, #2
 80161d4:	81a3      	strh	r3, [r4, #12]
 80161d6:	e7e3      	b.n	80161a0 <__smakebuf_r+0xc>
 80161d8:	4b0d      	ldr	r3, [pc, #52]	; (8016210 <__smakebuf_r+0x7c>)
 80161da:	62b3      	str	r3, [r6, #40]	; 0x28
 80161dc:	89a3      	ldrh	r3, [r4, #12]
 80161de:	6020      	str	r0, [r4, #0]
 80161e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80161e4:	81a3      	strh	r3, [r4, #12]
 80161e6:	9b00      	ldr	r3, [sp, #0]
 80161e8:	6163      	str	r3, [r4, #20]
 80161ea:	9b01      	ldr	r3, [sp, #4]
 80161ec:	6120      	str	r0, [r4, #16]
 80161ee:	b15b      	cbz	r3, 8016208 <__smakebuf_r+0x74>
 80161f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80161f4:	4630      	mov	r0, r6
 80161f6:	f000 f863 	bl	80162c0 <_isatty_r>
 80161fa:	b128      	cbz	r0, 8016208 <__smakebuf_r+0x74>
 80161fc:	89a3      	ldrh	r3, [r4, #12]
 80161fe:	f023 0303 	bic.w	r3, r3, #3
 8016202:	f043 0301 	orr.w	r3, r3, #1
 8016206:	81a3      	strh	r3, [r4, #12]
 8016208:	89a0      	ldrh	r0, [r4, #12]
 801620a:	4305      	orrs	r5, r0
 801620c:	81a5      	strh	r5, [r4, #12]
 801620e:	e7cd      	b.n	80161ac <__smakebuf_r+0x18>
 8016210:	0801518d 	.word	0x0801518d

08016214 <_raise_r>:
 8016214:	291f      	cmp	r1, #31
 8016216:	b538      	push	{r3, r4, r5, lr}
 8016218:	4604      	mov	r4, r0
 801621a:	460d      	mov	r5, r1
 801621c:	d904      	bls.n	8016228 <_raise_r+0x14>
 801621e:	2316      	movs	r3, #22
 8016220:	6003      	str	r3, [r0, #0]
 8016222:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016226:	bd38      	pop	{r3, r4, r5, pc}
 8016228:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801622a:	b112      	cbz	r2, 8016232 <_raise_r+0x1e>
 801622c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8016230:	b94b      	cbnz	r3, 8016246 <_raise_r+0x32>
 8016232:	4620      	mov	r0, r4
 8016234:	f000 f830 	bl	8016298 <_getpid_r>
 8016238:	462a      	mov	r2, r5
 801623a:	4601      	mov	r1, r0
 801623c:	4620      	mov	r0, r4
 801623e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016242:	f000 b817 	b.w	8016274 <_kill_r>
 8016246:	2b01      	cmp	r3, #1
 8016248:	d00a      	beq.n	8016260 <_raise_r+0x4c>
 801624a:	1c59      	adds	r1, r3, #1
 801624c:	d103      	bne.n	8016256 <_raise_r+0x42>
 801624e:	2316      	movs	r3, #22
 8016250:	6003      	str	r3, [r0, #0]
 8016252:	2001      	movs	r0, #1
 8016254:	e7e7      	b.n	8016226 <_raise_r+0x12>
 8016256:	2400      	movs	r4, #0
 8016258:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801625c:	4628      	mov	r0, r5
 801625e:	4798      	blx	r3
 8016260:	2000      	movs	r0, #0
 8016262:	e7e0      	b.n	8016226 <_raise_r+0x12>

08016264 <raise>:
 8016264:	4b02      	ldr	r3, [pc, #8]	; (8016270 <raise+0xc>)
 8016266:	4601      	mov	r1, r0
 8016268:	6818      	ldr	r0, [r3, #0]
 801626a:	f7ff bfd3 	b.w	8016214 <_raise_r>
 801626e:	bf00      	nop
 8016270:	2000001c 	.word	0x2000001c

08016274 <_kill_r>:
 8016274:	b538      	push	{r3, r4, r5, lr}
 8016276:	4d07      	ldr	r5, [pc, #28]	; (8016294 <_kill_r+0x20>)
 8016278:	2300      	movs	r3, #0
 801627a:	4604      	mov	r4, r0
 801627c:	4608      	mov	r0, r1
 801627e:	4611      	mov	r1, r2
 8016280:	602b      	str	r3, [r5, #0]
 8016282:	f7ea fbc5 	bl	8000a10 <_kill>
 8016286:	1c43      	adds	r3, r0, #1
 8016288:	d102      	bne.n	8016290 <_kill_r+0x1c>
 801628a:	682b      	ldr	r3, [r5, #0]
 801628c:	b103      	cbz	r3, 8016290 <_kill_r+0x1c>
 801628e:	6023      	str	r3, [r4, #0]
 8016290:	bd38      	pop	{r3, r4, r5, pc}
 8016292:	bf00      	nop
 8016294:	2000bdc0 	.word	0x2000bdc0

08016298 <_getpid_r>:
 8016298:	f7ea bbb2 	b.w	8000a00 <_getpid>

0801629c <_fstat_r>:
 801629c:	b538      	push	{r3, r4, r5, lr}
 801629e:	4d07      	ldr	r5, [pc, #28]	; (80162bc <_fstat_r+0x20>)
 80162a0:	2300      	movs	r3, #0
 80162a2:	4604      	mov	r4, r0
 80162a4:	4608      	mov	r0, r1
 80162a6:	4611      	mov	r1, r2
 80162a8:	602b      	str	r3, [r5, #0]
 80162aa:	f7ea fc12 	bl	8000ad2 <_fstat>
 80162ae:	1c43      	adds	r3, r0, #1
 80162b0:	d102      	bne.n	80162b8 <_fstat_r+0x1c>
 80162b2:	682b      	ldr	r3, [r5, #0]
 80162b4:	b103      	cbz	r3, 80162b8 <_fstat_r+0x1c>
 80162b6:	6023      	str	r3, [r4, #0]
 80162b8:	bd38      	pop	{r3, r4, r5, pc}
 80162ba:	bf00      	nop
 80162bc:	2000bdc0 	.word	0x2000bdc0

080162c0 <_isatty_r>:
 80162c0:	b538      	push	{r3, r4, r5, lr}
 80162c2:	4d06      	ldr	r5, [pc, #24]	; (80162dc <_isatty_r+0x1c>)
 80162c4:	2300      	movs	r3, #0
 80162c6:	4604      	mov	r4, r0
 80162c8:	4608      	mov	r0, r1
 80162ca:	602b      	str	r3, [r5, #0]
 80162cc:	f7ea fc11 	bl	8000af2 <_isatty>
 80162d0:	1c43      	adds	r3, r0, #1
 80162d2:	d102      	bne.n	80162da <_isatty_r+0x1a>
 80162d4:	682b      	ldr	r3, [r5, #0]
 80162d6:	b103      	cbz	r3, 80162da <_isatty_r+0x1a>
 80162d8:	6023      	str	r3, [r4, #0]
 80162da:	bd38      	pop	{r3, r4, r5, pc}
 80162dc:	2000bdc0 	.word	0x2000bdc0

080162e0 <_init>:
 80162e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80162e2:	bf00      	nop
 80162e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80162e6:	bc08      	pop	{r3}
 80162e8:	469e      	mov	lr, r3
 80162ea:	4770      	bx	lr

080162ec <_fini>:
 80162ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80162ee:	bf00      	nop
 80162f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80162f2:	bc08      	pop	{r3}
 80162f4:	469e      	mov	lr, r3
 80162f6:	4770      	bx	lr
