
TEST_HTML.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  90000000  90000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014248  900002a0  900002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000314c  900144e8  900144e8  000244e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  90017634  90017634  00027634  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  90017638  90017638  00027638  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000098  24000000  9001763c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000110f8  24000098  900176d4  00030098  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24011190  900176d4  00031190  2**0
                  ALLOC
  8 .lwip_sec     00000200  30000000  30000000  00010000  2**2
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030098  2**0
                  CONTENTS, READONLY
 10 .debug_info   00031920  00000000  00000000  000300c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000712b  00000000  00000000  000619e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002038  00000000  00000000  00068b18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001eb8  00000000  00000000  0006ab50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00047462  00000000  00000000  0006ca08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000331d9  00000000  00000000  000b3e6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00182bc0  00000000  00000000  000e7043  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00269c03  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008d38  00000000  00000000  00269c54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

900002a0 <__do_global_dtors_aux>:
900002a0:	b510      	push	{r4, lr}
900002a2:	4c05      	ldr	r4, [pc, #20]	; (900002b8 <__do_global_dtors_aux+0x18>)
900002a4:	7823      	ldrb	r3, [r4, #0]
900002a6:	b933      	cbnz	r3, 900002b6 <__do_global_dtors_aux+0x16>
900002a8:	4b04      	ldr	r3, [pc, #16]	; (900002bc <__do_global_dtors_aux+0x1c>)
900002aa:	b113      	cbz	r3, 900002b2 <__do_global_dtors_aux+0x12>
900002ac:	4804      	ldr	r0, [pc, #16]	; (900002c0 <__do_global_dtors_aux+0x20>)
900002ae:	f3af 8000 	nop.w
900002b2:	2301      	movs	r3, #1
900002b4:	7023      	strb	r3, [r4, #0]
900002b6:	bd10      	pop	{r4, pc}
900002b8:	24000098 	.word	0x24000098
900002bc:	00000000 	.word	0x00000000
900002c0:	900144d0 	.word	0x900144d0

900002c4 <frame_dummy>:
900002c4:	b508      	push	{r3, lr}
900002c6:	4b03      	ldr	r3, [pc, #12]	; (900002d4 <frame_dummy+0x10>)
900002c8:	b11b      	cbz	r3, 900002d2 <frame_dummy+0xe>
900002ca:	4903      	ldr	r1, [pc, #12]	; (900002d8 <frame_dummy+0x14>)
900002cc:	4803      	ldr	r0, [pc, #12]	; (900002dc <frame_dummy+0x18>)
900002ce:	f3af 8000 	nop.w
900002d2:	bd08      	pop	{r3, pc}
900002d4:	00000000 	.word	0x00000000
900002d8:	2400009c 	.word	0x2400009c
900002dc:	900144d0 	.word	0x900144d0

900002e0 <strcmp>:
900002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
900002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
900002e8:	2a01      	cmp	r2, #1
900002ea:	bf28      	it	cs
900002ec:	429a      	cmpcs	r2, r3
900002ee:	d0f7      	beq.n	900002e0 <strcmp>
900002f0:	1ad0      	subs	r0, r2, r3
900002f2:	4770      	bx	lr

900002f4 <strlen>:
900002f4:	4603      	mov	r3, r0
900002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
900002fa:	2a00      	cmp	r2, #0
900002fc:	d1fb      	bne.n	900002f6 <strlen+0x2>
900002fe:	1a18      	subs	r0, r3, r0
90000300:	3801      	subs	r0, #1
90000302:	4770      	bx	lr
	...

90000310 <memchr>:
90000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
90000314:	2a10      	cmp	r2, #16
90000316:	db2b      	blt.n	90000370 <memchr+0x60>
90000318:	f010 0f07 	tst.w	r0, #7
9000031c:	d008      	beq.n	90000330 <memchr+0x20>
9000031e:	f810 3b01 	ldrb.w	r3, [r0], #1
90000322:	3a01      	subs	r2, #1
90000324:	428b      	cmp	r3, r1
90000326:	d02d      	beq.n	90000384 <memchr+0x74>
90000328:	f010 0f07 	tst.w	r0, #7
9000032c:	b342      	cbz	r2, 90000380 <memchr+0x70>
9000032e:	d1f6      	bne.n	9000031e <memchr+0xe>
90000330:	b4f0      	push	{r4, r5, r6, r7}
90000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
90000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
9000033a:	f022 0407 	bic.w	r4, r2, #7
9000033e:	f07f 0700 	mvns.w	r7, #0
90000342:	2300      	movs	r3, #0
90000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
90000348:	3c08      	subs	r4, #8
9000034a:	ea85 0501 	eor.w	r5, r5, r1
9000034e:	ea86 0601 	eor.w	r6, r6, r1
90000352:	fa85 f547 	uadd8	r5, r5, r7
90000356:	faa3 f587 	sel	r5, r3, r7
9000035a:	fa86 f647 	uadd8	r6, r6, r7
9000035e:	faa5 f687 	sel	r6, r5, r7
90000362:	b98e      	cbnz	r6, 90000388 <memchr+0x78>
90000364:	d1ee      	bne.n	90000344 <memchr+0x34>
90000366:	bcf0      	pop	{r4, r5, r6, r7}
90000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
9000036c:	f002 0207 	and.w	r2, r2, #7
90000370:	b132      	cbz	r2, 90000380 <memchr+0x70>
90000372:	f810 3b01 	ldrb.w	r3, [r0], #1
90000376:	3a01      	subs	r2, #1
90000378:	ea83 0301 	eor.w	r3, r3, r1
9000037c:	b113      	cbz	r3, 90000384 <memchr+0x74>
9000037e:	d1f8      	bne.n	90000372 <memchr+0x62>
90000380:	2000      	movs	r0, #0
90000382:	4770      	bx	lr
90000384:	3801      	subs	r0, #1
90000386:	4770      	bx	lr
90000388:	2d00      	cmp	r5, #0
9000038a:	bf06      	itte	eq
9000038c:	4635      	moveq	r5, r6
9000038e:	3803      	subeq	r0, #3
90000390:	3807      	subne	r0, #7
90000392:	f015 0f01 	tst.w	r5, #1
90000396:	d107      	bne.n	900003a8 <memchr+0x98>
90000398:	3001      	adds	r0, #1
9000039a:	f415 7f80 	tst.w	r5, #256	; 0x100
9000039e:	bf02      	ittt	eq
900003a0:	3001      	addeq	r0, #1
900003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
900003a6:	3001      	addeq	r0, #1
900003a8:	bcf0      	pop	{r4, r5, r6, r7}
900003aa:	3801      	subs	r0, #1
900003ac:	4770      	bx	lr
900003ae:	bf00      	nop

900003b0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
900003b0:	b480      	push	{r7}
900003b2:	b085      	sub	sp, #20
900003b4:	af00      	add	r7, sp, #0
900003b6:	60f8      	str	r0, [r7, #12]
900003b8:	60b9      	str	r1, [r7, #8]
900003ba:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
900003bc:	68fb      	ldr	r3, [r7, #12]
900003be:	4a07      	ldr	r2, [pc, #28]	; (900003dc <vApplicationGetIdleTaskMemory+0x2c>)
900003c0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
900003c2:	68bb      	ldr	r3, [r7, #8]
900003c4:	4a06      	ldr	r2, [pc, #24]	; (900003e0 <vApplicationGetIdleTaskMemory+0x30>)
900003c6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
900003c8:	687b      	ldr	r3, [r7, #4]
900003ca:	2280      	movs	r2, #128	; 0x80
900003cc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
900003ce:	bf00      	nop
900003d0:	3714      	adds	r7, #20
900003d2:	46bd      	mov	sp, r7
900003d4:	f85d 7b04 	ldr.w	r7, [sp], #4
900003d8:	4770      	bx	lr
900003da:	bf00      	nop
900003dc:	240000b4 	.word	0x240000b4
900003e0:	24000168 	.word	0x24000168

900003e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
900003e4:	b5b0      	push	{r4, r5, r7, lr}
900003e6:	b08a      	sub	sp, #40	; 0x28
900003e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
900003ea:	f000 f900 	bl	900005ee <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
900003ee:	4b3d      	ldr	r3, [pc, #244]	; (900004e4 <main+0x100>)
900003f0:	695b      	ldr	r3, [r3, #20]
900003f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
900003f6:	2b00      	cmp	r3, #0
900003f8:	d11b      	bne.n	90000432 <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
900003fa:	f3bf 8f4f 	dsb	sy
}
900003fe:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
90000400:	f3bf 8f6f 	isb	sy
}
90000404:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
90000406:	4b37      	ldr	r3, [pc, #220]	; (900004e4 <main+0x100>)
90000408:	2200      	movs	r2, #0
9000040a:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
9000040e:	f3bf 8f4f 	dsb	sy
}
90000412:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
90000414:	f3bf 8f6f 	isb	sy
}
90000418:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
9000041a:	4b32      	ldr	r3, [pc, #200]	; (900004e4 <main+0x100>)
9000041c:	695b      	ldr	r3, [r3, #20]
9000041e:	4a31      	ldr	r2, [pc, #196]	; (900004e4 <main+0x100>)
90000420:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
90000424:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
90000426:	f3bf 8f4f 	dsb	sy
}
9000042a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
9000042c:	f3bf 8f6f 	isb	sy
}
90000430:	e000      	b.n	90000434 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
90000432:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
90000434:	4b2b      	ldr	r3, [pc, #172]	; (900004e4 <main+0x100>)
90000436:	695b      	ldr	r3, [r3, #20]
90000438:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
9000043c:	2b00      	cmp	r3, #0
9000043e:	d138      	bne.n	900004b2 <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
90000440:	4b28      	ldr	r3, [pc, #160]	; (900004e4 <main+0x100>)
90000442:	2200      	movs	r2, #0
90000444:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
90000448:	f3bf 8f4f 	dsb	sy
}
9000044c:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
9000044e:	4b25      	ldr	r3, [pc, #148]	; (900004e4 <main+0x100>)
90000450:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
90000454:	627b      	str	r3, [r7, #36]	; 0x24

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
90000456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90000458:	0b5b      	lsrs	r3, r3, #13
9000045a:	f3c3 030e 	ubfx	r3, r3, #0, #15
9000045e:	623b      	str	r3, [r7, #32]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
90000460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90000462:	08db      	lsrs	r3, r3, #3
90000464:	f3c3 0309 	ubfx	r3, r3, #0, #10
90000468:	61fb      	str	r3, [r7, #28]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
9000046a:	6a3b      	ldr	r3, [r7, #32]
9000046c:	015a      	lsls	r2, r3, #5
9000046e:	f643 73e0 	movw	r3, #16352	; 0x3fe0
90000472:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
90000474:	69fa      	ldr	r2, [r7, #28]
90000476:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
90000478:	491a      	ldr	r1, [pc, #104]	; (900004e4 <main+0x100>)
9000047a:	4313      	orrs	r3, r2
9000047c:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
90000480:	69fb      	ldr	r3, [r7, #28]
90000482:	1e5a      	subs	r2, r3, #1
90000484:	61fa      	str	r2, [r7, #28]
90000486:	2b00      	cmp	r3, #0
90000488:	d1ef      	bne.n	9000046a <main+0x86>
    } while(sets-- != 0U);
9000048a:	6a3b      	ldr	r3, [r7, #32]
9000048c:	1e5a      	subs	r2, r3, #1
9000048e:	623a      	str	r2, [r7, #32]
90000490:	2b00      	cmp	r3, #0
90000492:	d1e5      	bne.n	90000460 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
90000494:	f3bf 8f4f 	dsb	sy
}
90000498:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
9000049a:	4b12      	ldr	r3, [pc, #72]	; (900004e4 <main+0x100>)
9000049c:	695b      	ldr	r3, [r3, #20]
9000049e:	4a11      	ldr	r2, [pc, #68]	; (900004e4 <main+0x100>)
900004a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
900004a4:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
900004a6:	f3bf 8f4f 	dsb	sy
}
900004aa:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
900004ac:	f3bf 8f6f 	isb	sy
}
900004b0:	e000      	b.n	900004b4 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
900004b2:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
900004b4:	f000 fc92 	bl	90000ddc <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
900004b8:	f000 f81a 	bl	900004f0 <MX_GPIO_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadStaticDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 5000, defaultTaskBuffer, &defaultTaskControlBlock);
900004bc:	4b0a      	ldr	r3, [pc, #40]	; (900004e8 <main+0x104>)
900004be:	463c      	mov	r4, r7
900004c0:	461d      	mov	r5, r3
900004c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
900004c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
900004c6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
900004ca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
900004ce:	463b      	mov	r3, r7
900004d0:	2100      	movs	r1, #0
900004d2:	4618      	mov	r0, r3
900004d4:	f004 f948 	bl	90004768 <osThreadCreate>
900004d8:	4603      	mov	r3, r0
900004da:	4a04      	ldr	r2, [pc, #16]	; (900004ec <main+0x108>)
900004dc:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
900004de:	f004 f92c 	bl	9000473a <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
900004e2:	e7fe      	b.n	900004e2 <main+0xfe>
900004e4:	e000ed00 	.word	0xe000ed00
900004e8:	900144f4 	.word	0x900144f4
900004ec:	24000368 	.word	0x24000368

900004f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
900004f0:	b580      	push	{r7, lr}
900004f2:	b08a      	sub	sp, #40	; 0x28
900004f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
900004f6:	f107 0314 	add.w	r3, r7, #20
900004fa:	2200      	movs	r2, #0
900004fc:	601a      	str	r2, [r3, #0]
900004fe:	605a      	str	r2, [r3, #4]
90000500:	609a      	str	r2, [r3, #8]
90000502:	60da      	str	r2, [r3, #12]
90000504:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
90000506:	4b31      	ldr	r3, [pc, #196]	; (900005cc <MX_GPIO_Init+0xdc>)
90000508:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
9000050c:	4a2f      	ldr	r2, [pc, #188]	; (900005cc <MX_GPIO_Init+0xdc>)
9000050e:	f043 0310 	orr.w	r3, r3, #16
90000512:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
90000516:	4b2d      	ldr	r3, [pc, #180]	; (900005cc <MX_GPIO_Init+0xdc>)
90000518:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
9000051c:	f003 0310 	and.w	r3, r3, #16
90000520:	613b      	str	r3, [r7, #16]
90000522:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
90000524:	4b29      	ldr	r3, [pc, #164]	; (900005cc <MX_GPIO_Init+0xdc>)
90000526:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
9000052a:	4a28      	ldr	r2, [pc, #160]	; (900005cc <MX_GPIO_Init+0xdc>)
9000052c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
90000530:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
90000534:	4b25      	ldr	r3, [pc, #148]	; (900005cc <MX_GPIO_Init+0xdc>)
90000536:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
9000053a:	f003 0380 	and.w	r3, r3, #128	; 0x80
9000053e:	60fb      	str	r3, [r7, #12]
90000540:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
90000542:	4b22      	ldr	r3, [pc, #136]	; (900005cc <MX_GPIO_Init+0xdc>)
90000544:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90000548:	4a20      	ldr	r2, [pc, #128]	; (900005cc <MX_GPIO_Init+0xdc>)
9000054a:	f043 0304 	orr.w	r3, r3, #4
9000054e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
90000552:	4b1e      	ldr	r3, [pc, #120]	; (900005cc <MX_GPIO_Init+0xdc>)
90000554:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90000558:	f003 0304 	and.w	r3, r3, #4
9000055c:	60bb      	str	r3, [r7, #8]
9000055e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
90000560:	4b1a      	ldr	r3, [pc, #104]	; (900005cc <MX_GPIO_Init+0xdc>)
90000562:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90000566:	4a19      	ldr	r2, [pc, #100]	; (900005cc <MX_GPIO_Init+0xdc>)
90000568:	f043 0301 	orr.w	r3, r3, #1
9000056c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
90000570:	4b16      	ldr	r3, [pc, #88]	; (900005cc <MX_GPIO_Init+0xdc>)
90000572:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90000576:	f003 0301 	and.w	r3, r3, #1
9000057a:	607b      	str	r3, [r7, #4]
9000057c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
9000057e:	4b13      	ldr	r3, [pc, #76]	; (900005cc <MX_GPIO_Init+0xdc>)
90000580:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90000584:	4a11      	ldr	r2, [pc, #68]	; (900005cc <MX_GPIO_Init+0xdc>)
90000586:	f043 0302 	orr.w	r3, r3, #2
9000058a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
9000058e:	4b0f      	ldr	r3, [pc, #60]	; (900005cc <MX_GPIO_Init+0xdc>)
90000590:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90000594:	f003 0302 	and.w	r3, r3, #2
90000598:	603b      	str	r3, [r7, #0]
9000059a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
9000059c:	2200      	movs	r2, #0
9000059e:	2108      	movs	r1, #8
900005a0:	480b      	ldr	r0, [pc, #44]	; (900005d0 <MX_GPIO_Init+0xe0>)
900005a2:	f002 fd5b 	bl	9000305c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
900005a6:	2308      	movs	r3, #8
900005a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
900005aa:	2301      	movs	r3, #1
900005ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
900005ae:	2300      	movs	r3, #0
900005b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
900005b2:	2300      	movs	r3, #0
900005b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
900005b6:	f107 0314 	add.w	r3, r7, #20
900005ba:	4619      	mov	r1, r3
900005bc:	4804      	ldr	r0, [pc, #16]	; (900005d0 <MX_GPIO_Init+0xe0>)
900005be:	f002 fb9d 	bl	90002cfc <HAL_GPIO_Init>

}
900005c2:	bf00      	nop
900005c4:	3728      	adds	r7, #40	; 0x28
900005c6:	46bd      	mov	sp, r7
900005c8:	bd80      	pop	{r7, pc}
900005ca:	bf00      	nop
900005cc:	58024400 	.word	0x58024400
900005d0:	58021000 	.word	0x58021000

900005d4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
900005d4:	b580      	push	{r7, lr}
900005d6:	b082      	sub	sp, #8
900005d8:	af00      	add	r7, sp, #0
900005da:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
	osDelay(3000);
900005dc:	f640 30b8 	movw	r0, #3000	; 0xbb8
900005e0:	f004 f90e 	bl	90004800 <osDelay>
  MX_LWIP_Init();
900005e4:	f003 fa30 	bl	90003a48 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  httpd_init();
900005e8:	f007 ff14 	bl	90008414 <httpd_init>
  /* Infinite loop */
  for(;;)
900005ec:	e7fe      	b.n	900005ec <StartDefaultTask+0x18>

900005ee <MPU_Config>:
}

/* MPU Configuration */

void MPU_Config(void)
{
900005ee:	b580      	push	{r7, lr}
900005f0:	b084      	sub	sp, #16
900005f2:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
900005f4:	463b      	mov	r3, r7
900005f6:	2200      	movs	r2, #0
900005f8:	601a      	str	r2, [r3, #0]
900005fa:	605a      	str	r2, [r3, #4]
900005fc:	609a      	str	r2, [r3, #8]
900005fe:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
90000600:	f000 fd3c 	bl	9000107c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
90000604:	2301      	movs	r3, #1
90000606:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
90000608:	2300      	movs	r3, #0
9000060a:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30000000;
9000060c:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
90000610:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
90000612:	230e      	movs	r3, #14
90000614:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
90000616:	2300      	movs	r3, #0
90000618:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
9000061a:	2301      	movs	r3, #1
9000061c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
9000061e:	2303      	movs	r3, #3
90000620:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
90000622:	2301      	movs	r3, #1
90000624:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
90000626:	2300      	movs	r3, #0
90000628:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
9000062a:	2300      	movs	r3, #0
9000062c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
9000062e:	2300      	movs	r3, #0
90000630:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
90000632:	463b      	mov	r3, r7
90000634:	4618      	mov	r0, r3
90000636:	f000 fd59 	bl	900010ec <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
9000063a:	2301      	movs	r3, #1
9000063c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256B;
9000063e:	2307      	movs	r3, #7
90000640:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
90000642:	2300      	movs	r3, #0
90000644:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
90000646:	2301      	movs	r3, #1
90000648:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
9000064a:	2301      	movs	r3, #1
9000064c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
9000064e:	463b      	mov	r3, r7
90000650:	4618      	mov	r0, r3
90000652:	f000 fd4b 	bl	900010ec <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
90000656:	2302      	movs	r3, #2
90000658:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x90000000;
9000065a:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
9000065e:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_8MB;
90000660:	2316      	movs	r3, #22
90000662:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
90000664:	2300      	movs	r3, #0
90000666:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
90000668:	2301      	movs	r3, #1
9000066a:	73bb      	strb	r3, [r7, #14]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
9000066c:	463b      	mov	r3, r7
9000066e:	4618      	mov	r0, r3
90000670:	f000 fd3c 	bl	900010ec <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
90000674:	2303      	movs	r3, #3
90000676:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.Size = MPU_REGION_SIZE_1MB;
90000678:	2313      	movs	r3, #19
9000067a:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
9000067c:	2300      	movs	r3, #0
9000067e:	733b      	strb	r3, [r7, #12]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
90000680:	463b      	mov	r3, r7
90000682:	4618      	mov	r0, r3
90000684:	f000 fd32 	bl	900010ec <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
90000688:	2004      	movs	r0, #4
9000068a:	f000 fd0f 	bl	900010ac <HAL_MPU_Enable>

}
9000068e:	bf00      	nop
90000690:	3710      	adds	r7, #16
90000692:	46bd      	mov	sp, r7
90000694:	bd80      	pop	{r7, pc}
	...

90000698 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
90000698:	b580      	push	{r7, lr}
9000069a:	b082      	sub	sp, #8
9000069c:	af00      	add	r7, sp, #0
9000069e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
900006a0:	687b      	ldr	r3, [r7, #4]
900006a2:	681b      	ldr	r3, [r3, #0]
900006a4:	4a04      	ldr	r2, [pc, #16]	; (900006b8 <HAL_TIM_PeriodElapsedCallback+0x20>)
900006a6:	4293      	cmp	r3, r2
900006a8:	d101      	bne.n	900006ae <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
900006aa:	f000 fbd3 	bl	90000e54 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
900006ae:	bf00      	nop
900006b0:	3708      	adds	r7, #8
900006b2:	46bd      	mov	sp, r7
900006b4:	bd80      	pop	{r7, pc}
900006b6:	bf00      	nop
900006b8:	40014800 	.word	0x40014800

900006bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
900006bc:	b480      	push	{r7}
900006be:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
900006c0:	b672      	cpsid	i
}
900006c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
900006c4:	e7fe      	b.n	900006c4 <Error_Handler+0x8>
	...

900006c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
900006c8:	b580      	push	{r7, lr}
900006ca:	b082      	sub	sp, #8
900006cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
900006ce:	4b0c      	ldr	r3, [pc, #48]	; (90000700 <HAL_MspInit+0x38>)
900006d0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
900006d4:	4a0a      	ldr	r2, [pc, #40]	; (90000700 <HAL_MspInit+0x38>)
900006d6:	f043 0302 	orr.w	r3, r3, #2
900006da:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
900006de:	4b08      	ldr	r3, [pc, #32]	; (90000700 <HAL_MspInit+0x38>)
900006e0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
900006e4:	f003 0302 	and.w	r3, r3, #2
900006e8:	607b      	str	r3, [r7, #4]
900006ea:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
900006ec:	2200      	movs	r2, #0
900006ee:	210f      	movs	r1, #15
900006f0:	f06f 0001 	mvn.w	r0, #1
900006f4:	f000 fc9a 	bl	9000102c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
900006f8:	bf00      	nop
900006fa:	3708      	adds	r7, #8
900006fc:	46bd      	mov	sp, r7
900006fe:	bd80      	pop	{r7, pc}
90000700:	58024400 	.word	0x58024400

90000704 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
90000704:	b580      	push	{r7, lr}
90000706:	b08e      	sub	sp, #56	; 0x38
90000708:	af00      	add	r7, sp, #0
9000070a:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM17 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
9000070c:	687b      	ldr	r3, [r7, #4]
9000070e:	2b0f      	cmp	r3, #15
90000710:	d844      	bhi.n	9000079c <HAL_InitTick+0x98>
  {
  HAL_NVIC_SetPriority(TIM17_IRQn, TickPriority ,0U);
90000712:	2200      	movs	r2, #0
90000714:	6879      	ldr	r1, [r7, #4]
90000716:	2076      	movs	r0, #118	; 0x76
90000718:	f000 fc88 	bl	9000102c <HAL_NVIC_SetPriority>

  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM17_IRQn);
9000071c:	2076      	movs	r0, #118	; 0x76
9000071e:	f000 fc9f 	bl	90001060 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
90000722:	4a24      	ldr	r2, [pc, #144]	; (900007b4 <HAL_InitTick+0xb0>)
90000724:	687b      	ldr	r3, [r7, #4]
90000726:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
90000728:	4b23      	ldr	r3, [pc, #140]	; (900007b8 <HAL_InitTick+0xb4>)
9000072a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
9000072e:	4a22      	ldr	r2, [pc, #136]	; (900007b8 <HAL_InitTick+0xb4>)
90000730:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
90000734:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
90000738:	4b1f      	ldr	r3, [pc, #124]	; (900007b8 <HAL_InitTick+0xb4>)
9000073a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
9000073e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
90000742:	60bb      	str	r3, [r7, #8]
90000744:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
90000746:	f107 020c 	add.w	r2, r7, #12
9000074a:	f107 0310 	add.w	r3, r7, #16
9000074e:	4611      	mov	r1, r2
90000750:	4618      	mov	r0, r3
90000752:	f002 fe5d 	bl	90003410 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
90000756:	f002 fe45 	bl	900033e4 <HAL_RCC_GetPCLK2Freq>
9000075a:	4603      	mov	r3, r0
9000075c:	005b      	lsls	r3, r3, #1
9000075e:	637b      	str	r3, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
90000760:	6b7b      	ldr	r3, [r7, #52]	; 0x34
90000762:	4a16      	ldr	r2, [pc, #88]	; (900007bc <HAL_InitTick+0xb8>)
90000764:	fba2 2303 	umull	r2, r3, r2, r3
90000768:	0c9b      	lsrs	r3, r3, #18
9000076a:	3b01      	subs	r3, #1
9000076c:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
9000076e:	4b14      	ldr	r3, [pc, #80]	; (900007c0 <HAL_InitTick+0xbc>)
90000770:	4a14      	ldr	r2, [pc, #80]	; (900007c4 <HAL_InitTick+0xc0>)
90000772:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
90000774:	4b12      	ldr	r3, [pc, #72]	; (900007c0 <HAL_InitTick+0xbc>)
90000776:	f240 32e7 	movw	r2, #999	; 0x3e7
9000077a:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
9000077c:	4a10      	ldr	r2, [pc, #64]	; (900007c0 <HAL_InitTick+0xbc>)
9000077e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90000780:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
90000782:	4b0f      	ldr	r3, [pc, #60]	; (900007c0 <HAL_InitTick+0xbc>)
90000784:	2200      	movs	r2, #0
90000786:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
90000788:	4b0d      	ldr	r3, [pc, #52]	; (900007c0 <HAL_InitTick+0xbc>)
9000078a:	2200      	movs	r2, #0
9000078c:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
9000078e:	480c      	ldr	r0, [pc, #48]	; (900007c0 <HAL_InitTick+0xbc>)
90000790:	f002 fe80 	bl	90003494 <HAL_TIM_Base_Init>
90000794:	4603      	mov	r3, r0
90000796:	2b00      	cmp	r3, #0
90000798:	d107      	bne.n	900007aa <HAL_InitTick+0xa6>
9000079a:	e001      	b.n	900007a0 <HAL_InitTick+0x9c>
    return HAL_ERROR;
9000079c:	2301      	movs	r3, #1
9000079e:	e005      	b.n	900007ac <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
900007a0:	4807      	ldr	r0, [pc, #28]	; (900007c0 <HAL_InitTick+0xbc>)
900007a2:	f002 fed9 	bl	90003558 <HAL_TIM_Base_Start_IT>
900007a6:	4603      	mov	r3, r0
900007a8:	e000      	b.n	900007ac <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
900007aa:	2301      	movs	r3, #1
}
900007ac:	4618      	mov	r0, r3
900007ae:	3738      	adds	r7, #56	; 0x38
900007b0:	46bd      	mov	sp, r7
900007b2:	bd80      	pop	{r7, pc}
900007b4:	24000008 	.word	0x24000008
900007b8:	58024400 	.word	0x58024400
900007bc:	431bde83 	.word	0x431bde83
900007c0:	24005240 	.word	0x24005240
900007c4:	40014800 	.word	0x40014800

900007c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
900007c8:	b480      	push	{r7}
900007ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
900007cc:	e7fe      	b.n	900007cc <NMI_Handler+0x4>

900007ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
900007ce:	b480      	push	{r7}
900007d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
900007d2:	e7fe      	b.n	900007d2 <HardFault_Handler+0x4>

900007d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
900007d4:	b480      	push	{r7}
900007d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
900007d8:	e7fe      	b.n	900007d8 <MemManage_Handler+0x4>

900007da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
900007da:	b480      	push	{r7}
900007dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
900007de:	e7fe      	b.n	900007de <BusFault_Handler+0x4>

900007e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
900007e0:	b480      	push	{r7}
900007e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
900007e4:	e7fe      	b.n	900007e4 <UsageFault_Handler+0x4>

900007e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
900007e6:	b480      	push	{r7}
900007e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
900007ea:	bf00      	nop
900007ec:	46bd      	mov	sp, r7
900007ee:	f85d 7b04 	ldr.w	r7, [sp], #4
900007f2:	4770      	bx	lr

900007f4 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
900007f4:	b580      	push	{r7, lr}
900007f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
900007f8:	4802      	ldr	r0, [pc, #8]	; (90000804 <ETH_IRQHandler+0x10>)
900007fa:	f001 f8e1 	bl	900019c0 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
900007fe:	bf00      	nop
90000800:	bd80      	pop	{r7, pc}
90000802:	bf00      	nop
90000804:	24009c74 	.word	0x24009c74

90000808 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
90000808:	b580      	push	{r7, lr}
9000080a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
9000080c:	4802      	ldr	r0, [pc, #8]	; (90000818 <TIM17_IRQHandler+0x10>)
9000080e:	f002 ff1b 	bl	90003648 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
90000812:	bf00      	nop
90000814:	bd80      	pop	{r7, pc}
90000816:	bf00      	nop
90000818:	24005240 	.word	0x24005240

9000081c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
9000081c:	b480      	push	{r7}
9000081e:	af00      	add	r7, sp, #0
	return 1;
90000820:	2301      	movs	r3, #1
}
90000822:	4618      	mov	r0, r3
90000824:	46bd      	mov	sp, r7
90000826:	f85d 7b04 	ldr.w	r7, [sp], #4
9000082a:	4770      	bx	lr

9000082c <_kill>:

int _kill(int pid, int sig)
{
9000082c:	b480      	push	{r7}
9000082e:	b083      	sub	sp, #12
90000830:	af00      	add	r7, sp, #0
90000832:	6078      	str	r0, [r7, #4]
90000834:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
90000836:	4b05      	ldr	r3, [pc, #20]	; (9000084c <_kill+0x20>)
90000838:	2216      	movs	r2, #22
9000083a:	601a      	str	r2, [r3, #0]
	return -1;
9000083c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
90000840:	4618      	mov	r0, r3
90000842:	370c      	adds	r7, #12
90000844:	46bd      	mov	sp, r7
90000846:	f85d 7b04 	ldr.w	r7, [sp], #4
9000084a:	4770      	bx	lr
9000084c:	2401118c 	.word	0x2401118c

90000850 <_exit>:

void _exit (int status)
{
90000850:	b580      	push	{r7, lr}
90000852:	b082      	sub	sp, #8
90000854:	af00      	add	r7, sp, #0
90000856:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
90000858:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
9000085c:	6878      	ldr	r0, [r7, #4]
9000085e:	f7ff ffe5 	bl	9000082c <_kill>
	while (1) {}		/* Make sure we hang here */
90000862:	e7fe      	b.n	90000862 <_exit+0x12>

90000864 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
90000864:	b580      	push	{r7, lr}
90000866:	b086      	sub	sp, #24
90000868:	af00      	add	r7, sp, #0
9000086a:	60f8      	str	r0, [r7, #12]
9000086c:	60b9      	str	r1, [r7, #8]
9000086e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
90000870:	2300      	movs	r3, #0
90000872:	617b      	str	r3, [r7, #20]
90000874:	e00a      	b.n	9000088c <_read+0x28>
	{
		*ptr++ = __io_getchar();
90000876:	f3af 8000 	nop.w
9000087a:	4601      	mov	r1, r0
9000087c:	68bb      	ldr	r3, [r7, #8]
9000087e:	1c5a      	adds	r2, r3, #1
90000880:	60ba      	str	r2, [r7, #8]
90000882:	b2ca      	uxtb	r2, r1
90000884:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
90000886:	697b      	ldr	r3, [r7, #20]
90000888:	3301      	adds	r3, #1
9000088a:	617b      	str	r3, [r7, #20]
9000088c:	697a      	ldr	r2, [r7, #20]
9000088e:	687b      	ldr	r3, [r7, #4]
90000890:	429a      	cmp	r2, r3
90000892:	dbf0      	blt.n	90000876 <_read+0x12>
	}

return len;
90000894:	687b      	ldr	r3, [r7, #4]
}
90000896:	4618      	mov	r0, r3
90000898:	3718      	adds	r7, #24
9000089a:	46bd      	mov	sp, r7
9000089c:	bd80      	pop	{r7, pc}

9000089e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
9000089e:	b580      	push	{r7, lr}
900008a0:	b086      	sub	sp, #24
900008a2:	af00      	add	r7, sp, #0
900008a4:	60f8      	str	r0, [r7, #12]
900008a6:	60b9      	str	r1, [r7, #8]
900008a8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
900008aa:	2300      	movs	r3, #0
900008ac:	617b      	str	r3, [r7, #20]
900008ae:	e009      	b.n	900008c4 <_write+0x26>
	{
		__io_putchar(*ptr++);
900008b0:	68bb      	ldr	r3, [r7, #8]
900008b2:	1c5a      	adds	r2, r3, #1
900008b4:	60ba      	str	r2, [r7, #8]
900008b6:	781b      	ldrb	r3, [r3, #0]
900008b8:	4618      	mov	r0, r3
900008ba:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
900008be:	697b      	ldr	r3, [r7, #20]
900008c0:	3301      	adds	r3, #1
900008c2:	617b      	str	r3, [r7, #20]
900008c4:	697a      	ldr	r2, [r7, #20]
900008c6:	687b      	ldr	r3, [r7, #4]
900008c8:	429a      	cmp	r2, r3
900008ca:	dbf1      	blt.n	900008b0 <_write+0x12>
	}
	return len;
900008cc:	687b      	ldr	r3, [r7, #4]
}
900008ce:	4618      	mov	r0, r3
900008d0:	3718      	adds	r7, #24
900008d2:	46bd      	mov	sp, r7
900008d4:	bd80      	pop	{r7, pc}

900008d6 <_close>:

int _close(int file)
{
900008d6:	b480      	push	{r7}
900008d8:	b083      	sub	sp, #12
900008da:	af00      	add	r7, sp, #0
900008dc:	6078      	str	r0, [r7, #4]
	return -1;
900008de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
900008e2:	4618      	mov	r0, r3
900008e4:	370c      	adds	r7, #12
900008e6:	46bd      	mov	sp, r7
900008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
900008ec:	4770      	bx	lr

900008ee <_fstat>:


int _fstat(int file, struct stat *st)
{
900008ee:	b480      	push	{r7}
900008f0:	b083      	sub	sp, #12
900008f2:	af00      	add	r7, sp, #0
900008f4:	6078      	str	r0, [r7, #4]
900008f6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
900008f8:	683b      	ldr	r3, [r7, #0]
900008fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
900008fe:	605a      	str	r2, [r3, #4]
	return 0;
90000900:	2300      	movs	r3, #0
}
90000902:	4618      	mov	r0, r3
90000904:	370c      	adds	r7, #12
90000906:	46bd      	mov	sp, r7
90000908:	f85d 7b04 	ldr.w	r7, [sp], #4
9000090c:	4770      	bx	lr

9000090e <_isatty>:

int _isatty(int file)
{
9000090e:	b480      	push	{r7}
90000910:	b083      	sub	sp, #12
90000912:	af00      	add	r7, sp, #0
90000914:	6078      	str	r0, [r7, #4]
	return 1;
90000916:	2301      	movs	r3, #1
}
90000918:	4618      	mov	r0, r3
9000091a:	370c      	adds	r7, #12
9000091c:	46bd      	mov	sp, r7
9000091e:	f85d 7b04 	ldr.w	r7, [sp], #4
90000922:	4770      	bx	lr

90000924 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
90000924:	b480      	push	{r7}
90000926:	b085      	sub	sp, #20
90000928:	af00      	add	r7, sp, #0
9000092a:	60f8      	str	r0, [r7, #12]
9000092c:	60b9      	str	r1, [r7, #8]
9000092e:	607a      	str	r2, [r7, #4]
	return 0;
90000930:	2300      	movs	r3, #0
}
90000932:	4618      	mov	r0, r3
90000934:	3714      	adds	r7, #20
90000936:	46bd      	mov	sp, r7
90000938:	f85d 7b04 	ldr.w	r7, [sp], #4
9000093c:	4770      	bx	lr
	...

90000940 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
90000940:	b480      	push	{r7}
90000942:	b087      	sub	sp, #28
90000944:	af00      	add	r7, sp, #0
90000946:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
90000948:	4a14      	ldr	r2, [pc, #80]	; (9000099c <_sbrk+0x5c>)
9000094a:	4b15      	ldr	r3, [pc, #84]	; (900009a0 <_sbrk+0x60>)
9000094c:	1ad3      	subs	r3, r2, r3
9000094e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
90000950:	697b      	ldr	r3, [r7, #20]
90000952:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
90000954:	4b13      	ldr	r3, [pc, #76]	; (900009a4 <_sbrk+0x64>)
90000956:	681b      	ldr	r3, [r3, #0]
90000958:	2b00      	cmp	r3, #0
9000095a:	d102      	bne.n	90000962 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
9000095c:	4b11      	ldr	r3, [pc, #68]	; (900009a4 <_sbrk+0x64>)
9000095e:	4a12      	ldr	r2, [pc, #72]	; (900009a8 <_sbrk+0x68>)
90000960:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
90000962:	4b10      	ldr	r3, [pc, #64]	; (900009a4 <_sbrk+0x64>)
90000964:	681a      	ldr	r2, [r3, #0]
90000966:	687b      	ldr	r3, [r7, #4]
90000968:	4413      	add	r3, r2
9000096a:	693a      	ldr	r2, [r7, #16]
9000096c:	429a      	cmp	r2, r3
9000096e:	d205      	bcs.n	9000097c <_sbrk+0x3c>
  {
    errno = ENOMEM;
90000970:	4b0e      	ldr	r3, [pc, #56]	; (900009ac <_sbrk+0x6c>)
90000972:	220c      	movs	r2, #12
90000974:	601a      	str	r2, [r3, #0]
    return (void *)-1;
90000976:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
9000097a:	e009      	b.n	90000990 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
9000097c:	4b09      	ldr	r3, [pc, #36]	; (900009a4 <_sbrk+0x64>)
9000097e:	681b      	ldr	r3, [r3, #0]
90000980:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
90000982:	4b08      	ldr	r3, [pc, #32]	; (900009a4 <_sbrk+0x64>)
90000984:	681a      	ldr	r2, [r3, #0]
90000986:	687b      	ldr	r3, [r7, #4]
90000988:	4413      	add	r3, r2
9000098a:	4a06      	ldr	r2, [pc, #24]	; (900009a4 <_sbrk+0x64>)
9000098c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
9000098e:	68fb      	ldr	r3, [r7, #12]
}
90000990:	4618      	mov	r0, r3
90000992:	371c      	adds	r7, #28
90000994:	46bd      	mov	sp, r7
90000996:	f85d 7b04 	ldr.w	r7, [sp], #4
9000099a:	4770      	bx	lr
9000099c:	24080000 	.word	0x24080000
900009a0:	00000400 	.word	0x00000400
900009a4:	2400528c 	.word	0x2400528c
900009a8:	24011190 	.word	0x24011190
900009ac:	2401118c 	.word	0x2401118c

900009b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
900009b0:	b480      	push	{r7}
900009b2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
900009b4:	4b39      	ldr	r3, [pc, #228]	; (90000a9c <SystemInit+0xec>)
900009b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
900009ba:	4a38      	ldr	r2, [pc, #224]	; (90000a9c <SystemInit+0xec>)
900009bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
900009c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
900009c4:	4b36      	ldr	r3, [pc, #216]	; (90000aa0 <SystemInit+0xf0>)
900009c6:	681b      	ldr	r3, [r3, #0]
900009c8:	f003 030f 	and.w	r3, r3, #15
900009cc:	2b06      	cmp	r3, #6
900009ce:	d807      	bhi.n	900009e0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
900009d0:	4b33      	ldr	r3, [pc, #204]	; (90000aa0 <SystemInit+0xf0>)
900009d2:	681b      	ldr	r3, [r3, #0]
900009d4:	f023 030f 	bic.w	r3, r3, #15
900009d8:	4a31      	ldr	r2, [pc, #196]	; (90000aa0 <SystemInit+0xf0>)
900009da:	f043 0307 	orr.w	r3, r3, #7
900009de:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
900009e0:	4b30      	ldr	r3, [pc, #192]	; (90000aa4 <SystemInit+0xf4>)
900009e2:	681b      	ldr	r3, [r3, #0]
900009e4:	4a2f      	ldr	r2, [pc, #188]	; (90000aa4 <SystemInit+0xf4>)
900009e6:	f043 0301 	orr.w	r3, r3, #1
900009ea:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
900009ec:	4b2d      	ldr	r3, [pc, #180]	; (90000aa4 <SystemInit+0xf4>)
900009ee:	2200      	movs	r2, #0
900009f0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
900009f2:	4b2c      	ldr	r3, [pc, #176]	; (90000aa4 <SystemInit+0xf4>)
900009f4:	681a      	ldr	r2, [r3, #0]
900009f6:	492b      	ldr	r1, [pc, #172]	; (90000aa4 <SystemInit+0xf4>)
900009f8:	4b2b      	ldr	r3, [pc, #172]	; (90000aa8 <SystemInit+0xf8>)
900009fa:	4013      	ands	r3, r2
900009fc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
900009fe:	4b28      	ldr	r3, [pc, #160]	; (90000aa0 <SystemInit+0xf0>)
90000a00:	681b      	ldr	r3, [r3, #0]
90000a02:	f003 0308 	and.w	r3, r3, #8
90000a06:	2b00      	cmp	r3, #0
90000a08:	d007      	beq.n	90000a1a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
90000a0a:	4b25      	ldr	r3, [pc, #148]	; (90000aa0 <SystemInit+0xf0>)
90000a0c:	681b      	ldr	r3, [r3, #0]
90000a0e:	f023 030f 	bic.w	r3, r3, #15
90000a12:	4a23      	ldr	r2, [pc, #140]	; (90000aa0 <SystemInit+0xf0>)
90000a14:	f043 0307 	orr.w	r3, r3, #7
90000a18:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
90000a1a:	4b22      	ldr	r3, [pc, #136]	; (90000aa4 <SystemInit+0xf4>)
90000a1c:	2200      	movs	r2, #0
90000a1e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
90000a20:	4b20      	ldr	r3, [pc, #128]	; (90000aa4 <SystemInit+0xf4>)
90000a22:	2200      	movs	r2, #0
90000a24:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
90000a26:	4b1f      	ldr	r3, [pc, #124]	; (90000aa4 <SystemInit+0xf4>)
90000a28:	2200      	movs	r2, #0
90000a2a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
90000a2c:	4b1d      	ldr	r3, [pc, #116]	; (90000aa4 <SystemInit+0xf4>)
90000a2e:	4a1f      	ldr	r2, [pc, #124]	; (90000aac <SystemInit+0xfc>)
90000a30:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
90000a32:	4b1c      	ldr	r3, [pc, #112]	; (90000aa4 <SystemInit+0xf4>)
90000a34:	4a1e      	ldr	r2, [pc, #120]	; (90000ab0 <SystemInit+0x100>)
90000a36:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
90000a38:	4b1a      	ldr	r3, [pc, #104]	; (90000aa4 <SystemInit+0xf4>)
90000a3a:	4a1e      	ldr	r2, [pc, #120]	; (90000ab4 <SystemInit+0x104>)
90000a3c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
90000a3e:	4b19      	ldr	r3, [pc, #100]	; (90000aa4 <SystemInit+0xf4>)
90000a40:	2200      	movs	r2, #0
90000a42:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
90000a44:	4b17      	ldr	r3, [pc, #92]	; (90000aa4 <SystemInit+0xf4>)
90000a46:	4a1b      	ldr	r2, [pc, #108]	; (90000ab4 <SystemInit+0x104>)
90000a48:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
90000a4a:	4b16      	ldr	r3, [pc, #88]	; (90000aa4 <SystemInit+0xf4>)
90000a4c:	2200      	movs	r2, #0
90000a4e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
90000a50:	4b14      	ldr	r3, [pc, #80]	; (90000aa4 <SystemInit+0xf4>)
90000a52:	4a18      	ldr	r2, [pc, #96]	; (90000ab4 <SystemInit+0x104>)
90000a54:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
90000a56:	4b13      	ldr	r3, [pc, #76]	; (90000aa4 <SystemInit+0xf4>)
90000a58:	2200      	movs	r2, #0
90000a5a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
90000a5c:	4b11      	ldr	r3, [pc, #68]	; (90000aa4 <SystemInit+0xf4>)
90000a5e:	681b      	ldr	r3, [r3, #0]
90000a60:	4a10      	ldr	r2, [pc, #64]	; (90000aa4 <SystemInit+0xf4>)
90000a62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
90000a66:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
90000a68:	4b0e      	ldr	r3, [pc, #56]	; (90000aa4 <SystemInit+0xf4>)
90000a6a:	2200      	movs	r2, #0
90000a6c:	661a      	str	r2, [r3, #96]	; 0x60

  SCB->VTOR = QSPI_BASE; /* Я добавил */
90000a6e:	4b0b      	ldr	r3, [pc, #44]	; (90000a9c <SystemInit+0xec>)
90000a70:	f04f 4210 	mov.w	r2, #2415919104	; 0x90000000
90000a74:	609a      	str	r2, [r3, #8]

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
90000a76:	4b10      	ldr	r3, [pc, #64]	; (90000ab8 <SystemInit+0x108>)
90000a78:	681a      	ldr	r2, [r3, #0]
90000a7a:	4b10      	ldr	r3, [pc, #64]	; (90000abc <SystemInit+0x10c>)
90000a7c:	4013      	ands	r3, r2
90000a7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
90000a82:	d202      	bcs.n	90000a8a <SystemInit+0xda>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
90000a84:	4b0e      	ldr	r3, [pc, #56]	; (90000ac0 <SystemInit+0x110>)
90000a86:	2201      	movs	r2, #1
90000a88:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
90000a8a:	4b0e      	ldr	r3, [pc, #56]	; (90000ac4 <SystemInit+0x114>)
90000a8c:	f243 02d2 	movw	r2, #12498	; 0x30d2
90000a90:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
90000a92:	bf00      	nop
90000a94:	46bd      	mov	sp, r7
90000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
90000a9a:	4770      	bx	lr
90000a9c:	e000ed00 	.word	0xe000ed00
90000aa0:	52002000 	.word	0x52002000
90000aa4:	58024400 	.word	0x58024400
90000aa8:	eaf6ed7f 	.word	0xeaf6ed7f
90000aac:	02020200 	.word	0x02020200
90000ab0:	01ff0000 	.word	0x01ff0000
90000ab4:	01010280 	.word	0x01010280
90000ab8:	5c001000 	.word	0x5c001000
90000abc:	ffff0000 	.word	0xffff0000
90000ac0:	51008108 	.word	0x51008108
90000ac4:	52004000 	.word	0x52004000

90000ac8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
90000ac8:	f8df d034 	ldr.w	sp, [pc, #52]	; 90000b00 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
90000acc:	f7ff ff70 	bl	900009b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
90000ad0:	480c      	ldr	r0, [pc, #48]	; (90000b04 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
90000ad2:	490d      	ldr	r1, [pc, #52]	; (90000b08 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
90000ad4:	4a0d      	ldr	r2, [pc, #52]	; (90000b0c <LoopFillZerobss+0x1a>)
  movs r3, #0
90000ad6:	2300      	movs	r3, #0
  b LoopCopyDataInit
90000ad8:	e002      	b.n	90000ae0 <LoopCopyDataInit>

90000ada <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
90000ada:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
90000adc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
90000ade:	3304      	adds	r3, #4

90000ae0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
90000ae0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
90000ae2:	428c      	cmp	r4, r1
  bcc CopyDataInit
90000ae4:	d3f9      	bcc.n	90000ada <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
90000ae6:	4a0a      	ldr	r2, [pc, #40]	; (90000b10 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
90000ae8:	4c0a      	ldr	r4, [pc, #40]	; (90000b14 <LoopFillZerobss+0x22>)
  movs r3, #0
90000aea:	2300      	movs	r3, #0
  b LoopFillZerobss
90000aec:	e001      	b.n	90000af2 <LoopFillZerobss>

90000aee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
90000aee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
90000af0:	3204      	adds	r2, #4

90000af2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
90000af2:	42a2      	cmp	r2, r4
  bcc FillZerobss
90000af4:	d3fb      	bcc.n	90000aee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
90000af6:	f012 fcbd 	bl	90013474 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
90000afa:	f7ff fc73 	bl	900003e4 <main>
  bx  lr
90000afe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
90000b00:	24080000 	.word	0x24080000
  ldr r0, =_sdata
90000b04:	24000000 	.word	0x24000000
  ldr r1, =_edata
90000b08:	24000098 	.word	0x24000098
  ldr r2, =_sidata
90000b0c:	9001763c 	.word	0x9001763c
  ldr r2, =_sbss
90000b10:	24000098 	.word	0x24000098
  ldr r4, =_ebss
90000b14:	24011190 	.word	0x24011190

90000b18 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
90000b18:	e7fe      	b.n	90000b18 <ADC3_IRQHandler>

90000b1a <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
90000b1a:	b480      	push	{r7}
90000b1c:	b083      	sub	sp, #12
90000b1e:	af00      	add	r7, sp, #0
90000b20:	6078      	str	r0, [r7, #4]
90000b22:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
90000b24:	687b      	ldr	r3, [r7, #4]
90000b26:	2b00      	cmp	r3, #0
90000b28:	d00b      	beq.n	90000b42 <LAN8742_RegisterBusIO+0x28>
90000b2a:	683b      	ldr	r3, [r7, #0]
90000b2c:	68db      	ldr	r3, [r3, #12]
90000b2e:	2b00      	cmp	r3, #0
90000b30:	d007      	beq.n	90000b42 <LAN8742_RegisterBusIO+0x28>
90000b32:	683b      	ldr	r3, [r7, #0]
90000b34:	689b      	ldr	r3, [r3, #8]
90000b36:	2b00      	cmp	r3, #0
90000b38:	d003      	beq.n	90000b42 <LAN8742_RegisterBusIO+0x28>
90000b3a:	683b      	ldr	r3, [r7, #0]
90000b3c:	691b      	ldr	r3, [r3, #16]
90000b3e:	2b00      	cmp	r3, #0
90000b40:	d102      	bne.n	90000b48 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
90000b42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
90000b46:	e014      	b.n	90000b72 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
90000b48:	683b      	ldr	r3, [r7, #0]
90000b4a:	681a      	ldr	r2, [r3, #0]
90000b4c:	687b      	ldr	r3, [r7, #4]
90000b4e:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
90000b50:	683b      	ldr	r3, [r7, #0]
90000b52:	685a      	ldr	r2, [r3, #4]
90000b54:	687b      	ldr	r3, [r7, #4]
90000b56:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
90000b58:	683b      	ldr	r3, [r7, #0]
90000b5a:	68da      	ldr	r2, [r3, #12]
90000b5c:	687b      	ldr	r3, [r7, #4]
90000b5e:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
90000b60:	683b      	ldr	r3, [r7, #0]
90000b62:	689a      	ldr	r2, [r3, #8]
90000b64:	687b      	ldr	r3, [r7, #4]
90000b66:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
90000b68:	683b      	ldr	r3, [r7, #0]
90000b6a:	691a      	ldr	r2, [r3, #16]
90000b6c:	687b      	ldr	r3, [r7, #4]
90000b6e:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
90000b70:	2300      	movs	r3, #0
}
90000b72:	4618      	mov	r0, r3
90000b74:	370c      	adds	r7, #12
90000b76:	46bd      	mov	sp, r7
90000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
90000b7c:	4770      	bx	lr

90000b7e <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
90000b7e:	b580      	push	{r7, lr}
90000b80:	b086      	sub	sp, #24
90000b82:	af00      	add	r7, sp, #0
90000b84:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
90000b86:	2300      	movs	r3, #0
90000b88:	60fb      	str	r3, [r7, #12]
90000b8a:	2300      	movs	r3, #0
90000b8c:	60bb      	str	r3, [r7, #8]
90000b8e:	2300      	movs	r3, #0
90000b90:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
90000b92:	2300      	movs	r3, #0
90000b94:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
90000b96:	687b      	ldr	r3, [r7, #4]
90000b98:	685b      	ldr	r3, [r3, #4]
90000b9a:	2b00      	cmp	r3, #0
90000b9c:	d17c      	bne.n	90000c98 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
90000b9e:	687b      	ldr	r3, [r7, #4]
90000ba0:	689b      	ldr	r3, [r3, #8]
90000ba2:	2b00      	cmp	r3, #0
90000ba4:	d002      	beq.n	90000bac <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
90000ba6:	687b      	ldr	r3, [r7, #4]
90000ba8:	689b      	ldr	r3, [r3, #8]
90000baa:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
90000bac:	687b      	ldr	r3, [r7, #4]
90000bae:	2220      	movs	r2, #32
90000bb0:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
90000bb2:	2300      	movs	r3, #0
90000bb4:	617b      	str	r3, [r7, #20]
90000bb6:	e01c      	b.n	90000bf2 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
90000bb8:	687b      	ldr	r3, [r7, #4]
90000bba:	695b      	ldr	r3, [r3, #20]
90000bbc:	f107 0208 	add.w	r2, r7, #8
90000bc0:	2112      	movs	r1, #18
90000bc2:	6978      	ldr	r0, [r7, #20]
90000bc4:	4798      	blx	r3
90000bc6:	4603      	mov	r3, r0
90000bc8:	2b00      	cmp	r3, #0
90000bca:	da03      	bge.n	90000bd4 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
90000bcc:	f06f 0304 	mvn.w	r3, #4
90000bd0:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
90000bd2:	e00b      	b.n	90000bec <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
90000bd4:	68bb      	ldr	r3, [r7, #8]
90000bd6:	f003 031f 	and.w	r3, r3, #31
90000bda:	697a      	ldr	r2, [r7, #20]
90000bdc:	429a      	cmp	r2, r3
90000bde:	d105      	bne.n	90000bec <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
90000be0:	687b      	ldr	r3, [r7, #4]
90000be2:	697a      	ldr	r2, [r7, #20]
90000be4:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
90000be6:	2300      	movs	r3, #0
90000be8:	613b      	str	r3, [r7, #16]
         break;
90000bea:	e005      	b.n	90000bf8 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
90000bec:	697b      	ldr	r3, [r7, #20]
90000bee:	3301      	adds	r3, #1
90000bf0:	617b      	str	r3, [r7, #20]
90000bf2:	697b      	ldr	r3, [r7, #20]
90000bf4:	2b1f      	cmp	r3, #31
90000bf6:	d9df      	bls.n	90000bb8 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
90000bf8:	687b      	ldr	r3, [r7, #4]
90000bfa:	681b      	ldr	r3, [r3, #0]
90000bfc:	2b1f      	cmp	r3, #31
90000bfe:	d902      	bls.n	90000c06 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
90000c00:	f06f 0302 	mvn.w	r3, #2
90000c04:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
90000c06:	693b      	ldr	r3, [r7, #16]
90000c08:	2b00      	cmp	r3, #0
90000c0a:	d145      	bne.n	90000c98 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
90000c0c:	687b      	ldr	r3, [r7, #4]
90000c0e:	691b      	ldr	r3, [r3, #16]
90000c10:	687a      	ldr	r2, [r7, #4]
90000c12:	6810      	ldr	r0, [r2, #0]
90000c14:	f44f 4200 	mov.w	r2, #32768	; 0x8000
90000c18:	2100      	movs	r1, #0
90000c1a:	4798      	blx	r3
90000c1c:	4603      	mov	r3, r0
90000c1e:	2b00      	cmp	r3, #0
90000c20:	db37      	blt.n	90000c92 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
90000c22:	687b      	ldr	r3, [r7, #4]
90000c24:	695b      	ldr	r3, [r3, #20]
90000c26:	687a      	ldr	r2, [r7, #4]
90000c28:	6810      	ldr	r0, [r2, #0]
90000c2a:	f107 0208 	add.w	r2, r7, #8
90000c2e:	2100      	movs	r1, #0
90000c30:	4798      	blx	r3
90000c32:	4603      	mov	r3, r0
90000c34:	2b00      	cmp	r3, #0
90000c36:	db28      	blt.n	90000c8a <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
90000c38:	687b      	ldr	r3, [r7, #4]
90000c3a:	699b      	ldr	r3, [r3, #24]
90000c3c:	4798      	blx	r3
90000c3e:	4603      	mov	r3, r0
90000c40:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
90000c42:	e01c      	b.n	90000c7e <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
90000c44:	687b      	ldr	r3, [r7, #4]
90000c46:	699b      	ldr	r3, [r3, #24]
90000c48:	4798      	blx	r3
90000c4a:	4603      	mov	r3, r0
90000c4c:	461a      	mov	r2, r3
90000c4e:	68fb      	ldr	r3, [r7, #12]
90000c50:	1ad3      	subs	r3, r2, r3
90000c52:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
90000c56:	d80e      	bhi.n	90000c76 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
90000c58:	687b      	ldr	r3, [r7, #4]
90000c5a:	695b      	ldr	r3, [r3, #20]
90000c5c:	687a      	ldr	r2, [r7, #4]
90000c5e:	6810      	ldr	r0, [r2, #0]
90000c60:	f107 0208 	add.w	r2, r7, #8
90000c64:	2100      	movs	r1, #0
90000c66:	4798      	blx	r3
90000c68:	4603      	mov	r3, r0
90000c6a:	2b00      	cmp	r3, #0
90000c6c:	da07      	bge.n	90000c7e <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
90000c6e:	f06f 0304 	mvn.w	r3, #4
90000c72:	613b      	str	r3, [r7, #16]
                 break;
90000c74:	e010      	b.n	90000c98 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
90000c76:	f06f 0301 	mvn.w	r3, #1
90000c7a:	613b      	str	r3, [r7, #16]
               break;
90000c7c:	e00c      	b.n	90000c98 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
90000c7e:	68bb      	ldr	r3, [r7, #8]
90000c80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
90000c84:	2b00      	cmp	r3, #0
90000c86:	d1dd      	bne.n	90000c44 <LAN8742_Init+0xc6>
90000c88:	e006      	b.n	90000c98 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
90000c8a:	f06f 0304 	mvn.w	r3, #4
90000c8e:	613b      	str	r3, [r7, #16]
90000c90:	e002      	b.n	90000c98 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
90000c92:	f06f 0303 	mvn.w	r3, #3
90000c96:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
90000c98:	693b      	ldr	r3, [r7, #16]
90000c9a:	2b00      	cmp	r3, #0
90000c9c:	d112      	bne.n	90000cc4 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
90000c9e:	687b      	ldr	r3, [r7, #4]
90000ca0:	699b      	ldr	r3, [r3, #24]
90000ca2:	4798      	blx	r3
90000ca4:	4603      	mov	r3, r0
90000ca6:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
90000ca8:	bf00      	nop
90000caa:	687b      	ldr	r3, [r7, #4]
90000cac:	699b      	ldr	r3, [r3, #24]
90000cae:	4798      	blx	r3
90000cb0:	4603      	mov	r3, r0
90000cb2:	461a      	mov	r2, r3
90000cb4:	68fb      	ldr	r3, [r7, #12]
90000cb6:	1ad3      	subs	r3, r2, r3
90000cb8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
90000cbc:	d9f5      	bls.n	90000caa <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
90000cbe:	687b      	ldr	r3, [r7, #4]
90000cc0:	2201      	movs	r2, #1
90000cc2:	605a      	str	r2, [r3, #4]
   }
   
   return status;
90000cc4:	693b      	ldr	r3, [r7, #16]
 }
90000cc6:	4618      	mov	r0, r3
90000cc8:	3718      	adds	r7, #24
90000cca:	46bd      	mov	sp, r7
90000ccc:	bd80      	pop	{r7, pc}

90000cce <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
90000cce:	b580      	push	{r7, lr}
90000cd0:	b084      	sub	sp, #16
90000cd2:	af00      	add	r7, sp, #0
90000cd4:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
90000cd6:	2300      	movs	r3, #0
90000cd8:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
90000cda:	687b      	ldr	r3, [r7, #4]
90000cdc:	695b      	ldr	r3, [r3, #20]
90000cde:	687a      	ldr	r2, [r7, #4]
90000ce0:	6810      	ldr	r0, [r2, #0]
90000ce2:	f107 020c 	add.w	r2, r7, #12
90000ce6:	2101      	movs	r1, #1
90000ce8:	4798      	blx	r3
90000cea:	4603      	mov	r3, r0
90000cec:	2b00      	cmp	r3, #0
90000cee:	da02      	bge.n	90000cf6 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
90000cf0:	f06f 0304 	mvn.w	r3, #4
90000cf4:	e06e      	b.n	90000dd4 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
90000cf6:	687b      	ldr	r3, [r7, #4]
90000cf8:	695b      	ldr	r3, [r3, #20]
90000cfa:	687a      	ldr	r2, [r7, #4]
90000cfc:	6810      	ldr	r0, [r2, #0]
90000cfe:	f107 020c 	add.w	r2, r7, #12
90000d02:	2101      	movs	r1, #1
90000d04:	4798      	blx	r3
90000d06:	4603      	mov	r3, r0
90000d08:	2b00      	cmp	r3, #0
90000d0a:	da02      	bge.n	90000d12 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
90000d0c:	f06f 0304 	mvn.w	r3, #4
90000d10:	e060      	b.n	90000dd4 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
90000d12:	68fb      	ldr	r3, [r7, #12]
90000d14:	f003 0304 	and.w	r3, r3, #4
90000d18:	2b00      	cmp	r3, #0
90000d1a:	d101      	bne.n	90000d20 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
90000d1c:	2301      	movs	r3, #1
90000d1e:	e059      	b.n	90000dd4 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
90000d20:	687b      	ldr	r3, [r7, #4]
90000d22:	695b      	ldr	r3, [r3, #20]
90000d24:	687a      	ldr	r2, [r7, #4]
90000d26:	6810      	ldr	r0, [r2, #0]
90000d28:	f107 020c 	add.w	r2, r7, #12
90000d2c:	2100      	movs	r1, #0
90000d2e:	4798      	blx	r3
90000d30:	4603      	mov	r3, r0
90000d32:	2b00      	cmp	r3, #0
90000d34:	da02      	bge.n	90000d3c <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
90000d36:	f06f 0304 	mvn.w	r3, #4
90000d3a:	e04b      	b.n	90000dd4 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
90000d3c:	68fb      	ldr	r3, [r7, #12]
90000d3e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
90000d42:	2b00      	cmp	r3, #0
90000d44:	d11b      	bne.n	90000d7e <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
90000d46:	68fb      	ldr	r3, [r7, #12]
90000d48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
90000d4c:	2b00      	cmp	r3, #0
90000d4e:	d006      	beq.n	90000d5e <LAN8742_GetLinkState+0x90>
90000d50:	68fb      	ldr	r3, [r7, #12]
90000d52:	f403 7380 	and.w	r3, r3, #256	; 0x100
90000d56:	2b00      	cmp	r3, #0
90000d58:	d001      	beq.n	90000d5e <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
90000d5a:	2302      	movs	r3, #2
90000d5c:	e03a      	b.n	90000dd4 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
90000d5e:	68fb      	ldr	r3, [r7, #12]
90000d60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
90000d64:	2b00      	cmp	r3, #0
90000d66:	d001      	beq.n	90000d6c <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
90000d68:	2303      	movs	r3, #3
90000d6a:	e033      	b.n	90000dd4 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
90000d6c:	68fb      	ldr	r3, [r7, #12]
90000d6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
90000d72:	2b00      	cmp	r3, #0
90000d74:	d001      	beq.n	90000d7a <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
90000d76:	2304      	movs	r3, #4
90000d78:	e02c      	b.n	90000dd4 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
90000d7a:	2305      	movs	r3, #5
90000d7c:	e02a      	b.n	90000dd4 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
90000d7e:	687b      	ldr	r3, [r7, #4]
90000d80:	695b      	ldr	r3, [r3, #20]
90000d82:	687a      	ldr	r2, [r7, #4]
90000d84:	6810      	ldr	r0, [r2, #0]
90000d86:	f107 020c 	add.w	r2, r7, #12
90000d8a:	211f      	movs	r1, #31
90000d8c:	4798      	blx	r3
90000d8e:	4603      	mov	r3, r0
90000d90:	2b00      	cmp	r3, #0
90000d92:	da02      	bge.n	90000d9a <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
90000d94:	f06f 0304 	mvn.w	r3, #4
90000d98:	e01c      	b.n	90000dd4 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
90000d9a:	68fb      	ldr	r3, [r7, #12]
90000d9c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
90000da0:	2b00      	cmp	r3, #0
90000da2:	d101      	bne.n	90000da8 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
90000da4:	2306      	movs	r3, #6
90000da6:	e015      	b.n	90000dd4 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
90000da8:	68fb      	ldr	r3, [r7, #12]
90000daa:	f003 031c 	and.w	r3, r3, #28
90000dae:	2b18      	cmp	r3, #24
90000db0:	d101      	bne.n	90000db6 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
90000db2:	2302      	movs	r3, #2
90000db4:	e00e      	b.n	90000dd4 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
90000db6:	68fb      	ldr	r3, [r7, #12]
90000db8:	f003 031c 	and.w	r3, r3, #28
90000dbc:	2b08      	cmp	r3, #8
90000dbe:	d101      	bne.n	90000dc4 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
90000dc0:	2303      	movs	r3, #3
90000dc2:	e007      	b.n	90000dd4 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
90000dc4:	68fb      	ldr	r3, [r7, #12]
90000dc6:	f003 031c 	and.w	r3, r3, #28
90000dca:	2b14      	cmp	r3, #20
90000dcc:	d101      	bne.n	90000dd2 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
90000dce:	2304      	movs	r3, #4
90000dd0:	e000      	b.n	90000dd4 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
90000dd2:	2305      	movs	r3, #5
    }				
  }
}
90000dd4:	4618      	mov	r0, r3
90000dd6:	3710      	adds	r7, #16
90000dd8:	46bd      	mov	sp, r7
90000dda:	bd80      	pop	{r7, pc}

90000ddc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
90000ddc:	b580      	push	{r7, lr}
90000dde:	b082      	sub	sp, #8
90000de0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
90000de2:	2003      	movs	r0, #3
90000de4:	f000 f917 	bl	90001016 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
90000de8:	f002 f952 	bl	90003090 <HAL_RCC_GetSysClockFreq>
90000dec:	4602      	mov	r2, r0
90000dee:	4b15      	ldr	r3, [pc, #84]	; (90000e44 <HAL_Init+0x68>)
90000df0:	699b      	ldr	r3, [r3, #24]
90000df2:	0a1b      	lsrs	r3, r3, #8
90000df4:	f003 030f 	and.w	r3, r3, #15
90000df8:	4913      	ldr	r1, [pc, #76]	; (90000e48 <HAL_Init+0x6c>)
90000dfa:	5ccb      	ldrb	r3, [r1, r3]
90000dfc:	f003 031f 	and.w	r3, r3, #31
90000e00:	fa22 f303 	lsr.w	r3, r2, r3
90000e04:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
90000e06:	4b0f      	ldr	r3, [pc, #60]	; (90000e44 <HAL_Init+0x68>)
90000e08:	699b      	ldr	r3, [r3, #24]
90000e0a:	f003 030f 	and.w	r3, r3, #15
90000e0e:	4a0e      	ldr	r2, [pc, #56]	; (90000e48 <HAL_Init+0x6c>)
90000e10:	5cd3      	ldrb	r3, [r2, r3]
90000e12:	f003 031f 	and.w	r3, r3, #31
90000e16:	687a      	ldr	r2, [r7, #4]
90000e18:	fa22 f303 	lsr.w	r3, r2, r3
90000e1c:	4a0b      	ldr	r2, [pc, #44]	; (90000e4c <HAL_Init+0x70>)
90000e1e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
90000e20:	4a0b      	ldr	r2, [pc, #44]	; (90000e50 <HAL_Init+0x74>)
90000e22:	687b      	ldr	r3, [r7, #4]
90000e24:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
90000e26:	200f      	movs	r0, #15
90000e28:	f7ff fc6c 	bl	90000704 <HAL_InitTick>
90000e2c:	4603      	mov	r3, r0
90000e2e:	2b00      	cmp	r3, #0
90000e30:	d001      	beq.n	90000e36 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
90000e32:	2301      	movs	r3, #1
90000e34:	e002      	b.n	90000e3c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
90000e36:	f7ff fc47 	bl	900006c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
90000e3a:	2300      	movs	r3, #0
}
90000e3c:	4618      	mov	r0, r3
90000e3e:	3708      	adds	r7, #8
90000e40:	46bd      	mov	sp, r7
90000e42:	bd80      	pop	{r7, pc}
90000e44:	58024400 	.word	0x58024400
90000e48:	9001725c 	.word	0x9001725c
90000e4c:	24000004 	.word	0x24000004
90000e50:	24000000 	.word	0x24000000

90000e54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
90000e54:	b480      	push	{r7}
90000e56:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
90000e58:	4b06      	ldr	r3, [pc, #24]	; (90000e74 <HAL_IncTick+0x20>)
90000e5a:	781b      	ldrb	r3, [r3, #0]
90000e5c:	461a      	mov	r2, r3
90000e5e:	4b06      	ldr	r3, [pc, #24]	; (90000e78 <HAL_IncTick+0x24>)
90000e60:	681b      	ldr	r3, [r3, #0]
90000e62:	4413      	add	r3, r2
90000e64:	4a04      	ldr	r2, [pc, #16]	; (90000e78 <HAL_IncTick+0x24>)
90000e66:	6013      	str	r3, [r2, #0]
}
90000e68:	bf00      	nop
90000e6a:	46bd      	mov	sp, r7
90000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
90000e70:	4770      	bx	lr
90000e72:	bf00      	nop
90000e74:	2400000c 	.word	0x2400000c
90000e78:	24005290 	.word	0x24005290

90000e7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
90000e7c:	b480      	push	{r7}
90000e7e:	af00      	add	r7, sp, #0
  return uwTick;
90000e80:	4b03      	ldr	r3, [pc, #12]	; (90000e90 <HAL_GetTick+0x14>)
90000e82:	681b      	ldr	r3, [r3, #0]
}
90000e84:	4618      	mov	r0, r3
90000e86:	46bd      	mov	sp, r7
90000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
90000e8c:	4770      	bx	lr
90000e8e:	bf00      	nop
90000e90:	24005290 	.word	0x24005290

90000e94 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
90000e94:	b480      	push	{r7}
90000e96:	b083      	sub	sp, #12
90000e98:	af00      	add	r7, sp, #0
90000e9a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
90000e9c:	4b06      	ldr	r3, [pc, #24]	; (90000eb8 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
90000e9e:	685b      	ldr	r3, [r3, #4]
90000ea0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
90000ea4:	4904      	ldr	r1, [pc, #16]	; (90000eb8 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
90000ea6:	687b      	ldr	r3, [r7, #4]
90000ea8:	4313      	orrs	r3, r2
90000eaa:	604b      	str	r3, [r1, #4]
}
90000eac:	bf00      	nop
90000eae:	370c      	adds	r7, #12
90000eb0:	46bd      	mov	sp, r7
90000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
90000eb6:	4770      	bx	lr
90000eb8:	58000400 	.word	0x58000400

90000ebc <__NVIC_SetPriorityGrouping>:
{
90000ebc:	b480      	push	{r7}
90000ebe:	b085      	sub	sp, #20
90000ec0:	af00      	add	r7, sp, #0
90000ec2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
90000ec4:	687b      	ldr	r3, [r7, #4]
90000ec6:	f003 0307 	and.w	r3, r3, #7
90000eca:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
90000ecc:	4b0b      	ldr	r3, [pc, #44]	; (90000efc <__NVIC_SetPriorityGrouping+0x40>)
90000ece:	68db      	ldr	r3, [r3, #12]
90000ed0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
90000ed2:	68ba      	ldr	r2, [r7, #8]
90000ed4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
90000ed8:	4013      	ands	r3, r2
90000eda:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
90000edc:	68fb      	ldr	r3, [r7, #12]
90000ede:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
90000ee0:	68bb      	ldr	r3, [r7, #8]
90000ee2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
90000ee4:	4b06      	ldr	r3, [pc, #24]	; (90000f00 <__NVIC_SetPriorityGrouping+0x44>)
90000ee6:	4313      	orrs	r3, r2
90000ee8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
90000eea:	4a04      	ldr	r2, [pc, #16]	; (90000efc <__NVIC_SetPriorityGrouping+0x40>)
90000eec:	68bb      	ldr	r3, [r7, #8]
90000eee:	60d3      	str	r3, [r2, #12]
}
90000ef0:	bf00      	nop
90000ef2:	3714      	adds	r7, #20
90000ef4:	46bd      	mov	sp, r7
90000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
90000efa:	4770      	bx	lr
90000efc:	e000ed00 	.word	0xe000ed00
90000f00:	05fa0000 	.word	0x05fa0000

90000f04 <__NVIC_GetPriorityGrouping>:
{
90000f04:	b480      	push	{r7}
90000f06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
90000f08:	4b04      	ldr	r3, [pc, #16]	; (90000f1c <__NVIC_GetPriorityGrouping+0x18>)
90000f0a:	68db      	ldr	r3, [r3, #12]
90000f0c:	0a1b      	lsrs	r3, r3, #8
90000f0e:	f003 0307 	and.w	r3, r3, #7
}
90000f12:	4618      	mov	r0, r3
90000f14:	46bd      	mov	sp, r7
90000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
90000f1a:	4770      	bx	lr
90000f1c:	e000ed00 	.word	0xe000ed00

90000f20 <__NVIC_EnableIRQ>:
{
90000f20:	b480      	push	{r7}
90000f22:	b083      	sub	sp, #12
90000f24:	af00      	add	r7, sp, #0
90000f26:	4603      	mov	r3, r0
90000f28:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
90000f2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
90000f2e:	2b00      	cmp	r3, #0
90000f30:	db0b      	blt.n	90000f4a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
90000f32:	88fb      	ldrh	r3, [r7, #6]
90000f34:	f003 021f 	and.w	r2, r3, #31
90000f38:	4907      	ldr	r1, [pc, #28]	; (90000f58 <__NVIC_EnableIRQ+0x38>)
90000f3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
90000f3e:	095b      	lsrs	r3, r3, #5
90000f40:	2001      	movs	r0, #1
90000f42:	fa00 f202 	lsl.w	r2, r0, r2
90000f46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
90000f4a:	bf00      	nop
90000f4c:	370c      	adds	r7, #12
90000f4e:	46bd      	mov	sp, r7
90000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
90000f54:	4770      	bx	lr
90000f56:	bf00      	nop
90000f58:	e000e100 	.word	0xe000e100

90000f5c <__NVIC_SetPriority>:
{
90000f5c:	b480      	push	{r7}
90000f5e:	b083      	sub	sp, #12
90000f60:	af00      	add	r7, sp, #0
90000f62:	4603      	mov	r3, r0
90000f64:	6039      	str	r1, [r7, #0]
90000f66:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
90000f68:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
90000f6c:	2b00      	cmp	r3, #0
90000f6e:	db0a      	blt.n	90000f86 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
90000f70:	683b      	ldr	r3, [r7, #0]
90000f72:	b2da      	uxtb	r2, r3
90000f74:	490c      	ldr	r1, [pc, #48]	; (90000fa8 <__NVIC_SetPriority+0x4c>)
90000f76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
90000f7a:	0112      	lsls	r2, r2, #4
90000f7c:	b2d2      	uxtb	r2, r2
90000f7e:	440b      	add	r3, r1
90000f80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
90000f84:	e00a      	b.n	90000f9c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
90000f86:	683b      	ldr	r3, [r7, #0]
90000f88:	b2da      	uxtb	r2, r3
90000f8a:	4908      	ldr	r1, [pc, #32]	; (90000fac <__NVIC_SetPriority+0x50>)
90000f8c:	88fb      	ldrh	r3, [r7, #6]
90000f8e:	f003 030f 	and.w	r3, r3, #15
90000f92:	3b04      	subs	r3, #4
90000f94:	0112      	lsls	r2, r2, #4
90000f96:	b2d2      	uxtb	r2, r2
90000f98:	440b      	add	r3, r1
90000f9a:	761a      	strb	r2, [r3, #24]
}
90000f9c:	bf00      	nop
90000f9e:	370c      	adds	r7, #12
90000fa0:	46bd      	mov	sp, r7
90000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
90000fa6:	4770      	bx	lr
90000fa8:	e000e100 	.word	0xe000e100
90000fac:	e000ed00 	.word	0xe000ed00

90000fb0 <NVIC_EncodePriority>:
{
90000fb0:	b480      	push	{r7}
90000fb2:	b089      	sub	sp, #36	; 0x24
90000fb4:	af00      	add	r7, sp, #0
90000fb6:	60f8      	str	r0, [r7, #12]
90000fb8:	60b9      	str	r1, [r7, #8]
90000fba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
90000fbc:	68fb      	ldr	r3, [r7, #12]
90000fbe:	f003 0307 	and.w	r3, r3, #7
90000fc2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
90000fc4:	69fb      	ldr	r3, [r7, #28]
90000fc6:	f1c3 0307 	rsb	r3, r3, #7
90000fca:	2b04      	cmp	r3, #4
90000fcc:	bf28      	it	cs
90000fce:	2304      	movcs	r3, #4
90000fd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
90000fd2:	69fb      	ldr	r3, [r7, #28]
90000fd4:	3304      	adds	r3, #4
90000fd6:	2b06      	cmp	r3, #6
90000fd8:	d902      	bls.n	90000fe0 <NVIC_EncodePriority+0x30>
90000fda:	69fb      	ldr	r3, [r7, #28]
90000fdc:	3b03      	subs	r3, #3
90000fde:	e000      	b.n	90000fe2 <NVIC_EncodePriority+0x32>
90000fe0:	2300      	movs	r3, #0
90000fe2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
90000fe4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
90000fe8:	69bb      	ldr	r3, [r7, #24]
90000fea:	fa02 f303 	lsl.w	r3, r2, r3
90000fee:	43da      	mvns	r2, r3
90000ff0:	68bb      	ldr	r3, [r7, #8]
90000ff2:	401a      	ands	r2, r3
90000ff4:	697b      	ldr	r3, [r7, #20]
90000ff6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
90000ff8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
90000ffc:	697b      	ldr	r3, [r7, #20]
90000ffe:	fa01 f303 	lsl.w	r3, r1, r3
90001002:	43d9      	mvns	r1, r3
90001004:	687b      	ldr	r3, [r7, #4]
90001006:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
90001008:	4313      	orrs	r3, r2
}
9000100a:	4618      	mov	r0, r3
9000100c:	3724      	adds	r7, #36	; 0x24
9000100e:	46bd      	mov	sp, r7
90001010:	f85d 7b04 	ldr.w	r7, [sp], #4
90001014:	4770      	bx	lr

90001016 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
90001016:	b580      	push	{r7, lr}
90001018:	b082      	sub	sp, #8
9000101a:	af00      	add	r7, sp, #0
9000101c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
9000101e:	6878      	ldr	r0, [r7, #4]
90001020:	f7ff ff4c 	bl	90000ebc <__NVIC_SetPriorityGrouping>
}
90001024:	bf00      	nop
90001026:	3708      	adds	r7, #8
90001028:	46bd      	mov	sp, r7
9000102a:	bd80      	pop	{r7, pc}

9000102c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
9000102c:	b580      	push	{r7, lr}
9000102e:	b086      	sub	sp, #24
90001030:	af00      	add	r7, sp, #0
90001032:	4603      	mov	r3, r0
90001034:	60b9      	str	r1, [r7, #8]
90001036:	607a      	str	r2, [r7, #4]
90001038:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
9000103a:	f7ff ff63 	bl	90000f04 <__NVIC_GetPriorityGrouping>
9000103e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
90001040:	687a      	ldr	r2, [r7, #4]
90001042:	68b9      	ldr	r1, [r7, #8]
90001044:	6978      	ldr	r0, [r7, #20]
90001046:	f7ff ffb3 	bl	90000fb0 <NVIC_EncodePriority>
9000104a:	4602      	mov	r2, r0
9000104c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
90001050:	4611      	mov	r1, r2
90001052:	4618      	mov	r0, r3
90001054:	f7ff ff82 	bl	90000f5c <__NVIC_SetPriority>
}
90001058:	bf00      	nop
9000105a:	3718      	adds	r7, #24
9000105c:	46bd      	mov	sp, r7
9000105e:	bd80      	pop	{r7, pc}

90001060 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
90001060:	b580      	push	{r7, lr}
90001062:	b082      	sub	sp, #8
90001064:	af00      	add	r7, sp, #0
90001066:	4603      	mov	r3, r0
90001068:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
9000106a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
9000106e:	4618      	mov	r0, r3
90001070:	f7ff ff56 	bl	90000f20 <__NVIC_EnableIRQ>
}
90001074:	bf00      	nop
90001076:	3708      	adds	r7, #8
90001078:	46bd      	mov	sp, r7
9000107a:	bd80      	pop	{r7, pc}

9000107c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
9000107c:	b480      	push	{r7}
9000107e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
90001080:	f3bf 8f5f 	dmb	sy
}
90001084:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
90001086:	4b07      	ldr	r3, [pc, #28]	; (900010a4 <HAL_MPU_Disable+0x28>)
90001088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000108a:	4a06      	ldr	r2, [pc, #24]	; (900010a4 <HAL_MPU_Disable+0x28>)
9000108c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
90001090:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
90001092:	4b05      	ldr	r3, [pc, #20]	; (900010a8 <HAL_MPU_Disable+0x2c>)
90001094:	2200      	movs	r2, #0
90001096:	605a      	str	r2, [r3, #4]
}
90001098:	bf00      	nop
9000109a:	46bd      	mov	sp, r7
9000109c:	f85d 7b04 	ldr.w	r7, [sp], #4
900010a0:	4770      	bx	lr
900010a2:	bf00      	nop
900010a4:	e000ed00 	.word	0xe000ed00
900010a8:	e000ed90 	.word	0xe000ed90

900010ac <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
900010ac:	b480      	push	{r7}
900010ae:	b083      	sub	sp, #12
900010b0:	af00      	add	r7, sp, #0
900010b2:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
900010b4:	4a0b      	ldr	r2, [pc, #44]	; (900010e4 <HAL_MPU_Enable+0x38>)
900010b6:	687b      	ldr	r3, [r7, #4]
900010b8:	f043 0301 	orr.w	r3, r3, #1
900010bc:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
900010be:	4b0a      	ldr	r3, [pc, #40]	; (900010e8 <HAL_MPU_Enable+0x3c>)
900010c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
900010c2:	4a09      	ldr	r2, [pc, #36]	; (900010e8 <HAL_MPU_Enable+0x3c>)
900010c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
900010c8:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
900010ca:	f3bf 8f4f 	dsb	sy
}
900010ce:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
900010d0:	f3bf 8f6f 	isb	sy
}
900010d4:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
900010d6:	bf00      	nop
900010d8:	370c      	adds	r7, #12
900010da:	46bd      	mov	sp, r7
900010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
900010e0:	4770      	bx	lr
900010e2:	bf00      	nop
900010e4:	e000ed90 	.word	0xe000ed90
900010e8:	e000ed00 	.word	0xe000ed00

900010ec <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
900010ec:	b480      	push	{r7}
900010ee:	b083      	sub	sp, #12
900010f0:	af00      	add	r7, sp, #0
900010f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
900010f4:	687b      	ldr	r3, [r7, #4]
900010f6:	785a      	ldrb	r2, [r3, #1]
900010f8:	4b1d      	ldr	r3, [pc, #116]	; (90001170 <HAL_MPU_ConfigRegion+0x84>)
900010fa:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
900010fc:	687b      	ldr	r3, [r7, #4]
900010fe:	781b      	ldrb	r3, [r3, #0]
90001100:	2b00      	cmp	r3, #0
90001102:	d029      	beq.n	90001158 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
90001104:	4a1a      	ldr	r2, [pc, #104]	; (90001170 <HAL_MPU_ConfigRegion+0x84>)
90001106:	687b      	ldr	r3, [r7, #4]
90001108:	685b      	ldr	r3, [r3, #4]
9000110a:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
9000110c:	687b      	ldr	r3, [r7, #4]
9000110e:	7b1b      	ldrb	r3, [r3, #12]
90001110:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
90001112:	687b      	ldr	r3, [r7, #4]
90001114:	7adb      	ldrb	r3, [r3, #11]
90001116:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
90001118:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
9000111a:	687b      	ldr	r3, [r7, #4]
9000111c:	7a9b      	ldrb	r3, [r3, #10]
9000111e:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
90001120:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
90001122:	687b      	ldr	r3, [r7, #4]
90001124:	7b5b      	ldrb	r3, [r3, #13]
90001126:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
90001128:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
9000112a:	687b      	ldr	r3, [r7, #4]
9000112c:	7b9b      	ldrb	r3, [r3, #14]
9000112e:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
90001130:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
90001132:	687b      	ldr	r3, [r7, #4]
90001134:	7bdb      	ldrb	r3, [r3, #15]
90001136:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
90001138:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
9000113a:	687b      	ldr	r3, [r7, #4]
9000113c:	7a5b      	ldrb	r3, [r3, #9]
9000113e:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
90001140:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
90001142:	687b      	ldr	r3, [r7, #4]
90001144:	7a1b      	ldrb	r3, [r3, #8]
90001146:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
90001148:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
9000114a:	687a      	ldr	r2, [r7, #4]
9000114c:	7812      	ldrb	r2, [r2, #0]
9000114e:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
90001150:	4a07      	ldr	r2, [pc, #28]	; (90001170 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
90001152:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
90001154:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
90001156:	e005      	b.n	90001164 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
90001158:	4b05      	ldr	r3, [pc, #20]	; (90001170 <HAL_MPU_ConfigRegion+0x84>)
9000115a:	2200      	movs	r2, #0
9000115c:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
9000115e:	4b04      	ldr	r3, [pc, #16]	; (90001170 <HAL_MPU_ConfigRegion+0x84>)
90001160:	2200      	movs	r2, #0
90001162:	611a      	str	r2, [r3, #16]
}
90001164:	bf00      	nop
90001166:	370c      	adds	r7, #12
90001168:	46bd      	mov	sp, r7
9000116a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000116e:	4770      	bx	lr
90001170:	e000ed90 	.word	0xe000ed90

90001174 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
90001174:	b580      	push	{r7, lr}
90001176:	b084      	sub	sp, #16
90001178:	af00      	add	r7, sp, #0
9000117a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
9000117c:	687b      	ldr	r3, [r7, #4]
9000117e:	2b00      	cmp	r3, #0
90001180:	d101      	bne.n	90001186 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
90001182:	2301      	movs	r3, #1
90001184:	e0cf      	b.n	90001326 <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
90001186:	687b      	ldr	r3, [r7, #4]
90001188:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
9000118c:	2b00      	cmp	r3, #0
9000118e:	d106      	bne.n	9000119e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
90001190:	687b      	ldr	r3, [r7, #4]
90001192:	2223      	movs	r2, #35	; 0x23
90001194:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
90001198:	6878      	ldr	r0, [r7, #4]
9000119a:	f003 f871 	bl	90004280 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
9000119e:	4b64      	ldr	r3, [pc, #400]	; (90001330 <HAL_ETH_Init+0x1bc>)
900011a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
900011a4:	4a62      	ldr	r2, [pc, #392]	; (90001330 <HAL_ETH_Init+0x1bc>)
900011a6:	f043 0302 	orr.w	r3, r3, #2
900011aa:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
900011ae:	4b60      	ldr	r3, [pc, #384]	; (90001330 <HAL_ETH_Init+0x1bc>)
900011b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
900011b4:	f003 0302 	and.w	r3, r3, #2
900011b8:	60bb      	str	r3, [r7, #8]
900011ba:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
900011bc:	687b      	ldr	r3, [r7, #4]
900011be:	7a1b      	ldrb	r3, [r3, #8]
900011c0:	2b00      	cmp	r3, #0
900011c2:	d103      	bne.n	900011cc <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
900011c4:	2000      	movs	r0, #0
900011c6:	f7ff fe65 	bl	90000e94 <HAL_SYSCFG_ETHInterfaceSelect>
900011ca:	e003      	b.n	900011d4 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
900011cc:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
900011d0:	f7ff fe60 	bl	90000e94 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
900011d4:	4b57      	ldr	r3, [pc, #348]	; (90001334 <HAL_ETH_Init+0x1c0>)
900011d6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
900011d8:	687b      	ldr	r3, [r7, #4]
900011da:	681b      	ldr	r3, [r3, #0]
900011dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
900011e0:	681b      	ldr	r3, [r3, #0]
900011e2:	687a      	ldr	r2, [r7, #4]
900011e4:	6812      	ldr	r2, [r2, #0]
900011e6:	f043 0301 	orr.w	r3, r3, #1
900011ea:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
900011ee:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
900011f0:	f7ff fe44 	bl	90000e7c <HAL_GetTick>
900011f4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
900011f6:	e011      	b.n	9000121c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
900011f8:	f7ff fe40 	bl	90000e7c <HAL_GetTick>
900011fc:	4602      	mov	r2, r0
900011fe:	68fb      	ldr	r3, [r7, #12]
90001200:	1ad3      	subs	r3, r2, r3
90001202:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
90001206:	d909      	bls.n	9000121c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
90001208:	687b      	ldr	r3, [r7, #4]
9000120a:	2204      	movs	r2, #4
9000120c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
90001210:	687b      	ldr	r3, [r7, #4]
90001212:	22e0      	movs	r2, #224	; 0xe0
90001214:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
90001218:	2301      	movs	r3, #1
9000121a:	e084      	b.n	90001326 <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
9000121c:	687b      	ldr	r3, [r7, #4]
9000121e:	681b      	ldr	r3, [r3, #0]
90001220:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
90001224:	681b      	ldr	r3, [r3, #0]
90001226:	f003 0301 	and.w	r3, r3, #1
9000122a:	2b00      	cmp	r3, #0
9000122c:	d1e4      	bne.n	900011f8 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
9000122e:	6878      	ldr	r0, [r7, #4]
90001230:	f000 ff8a 	bl	90002148 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
90001234:	f002 f8a6 	bl	90003384 <HAL_RCC_GetHCLKFreq>
90001238:	4603      	mov	r3, r0
9000123a:	4a3f      	ldr	r2, [pc, #252]	; (90001338 <HAL_ETH_Init+0x1c4>)
9000123c:	fba2 2303 	umull	r2, r3, r2, r3
90001240:	0c9a      	lsrs	r2, r3, #18
90001242:	687b      	ldr	r3, [r7, #4]
90001244:	681b      	ldr	r3, [r3, #0]
90001246:	3a01      	subs	r2, #1
90001248:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
9000124c:	6878      	ldr	r0, [r7, #4]
9000124e:	f001 f983 	bl	90002558 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
90001252:	687b      	ldr	r3, [r7, #4]
90001254:	681b      	ldr	r3, [r3, #0]
90001256:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
9000125a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
9000125e:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
90001262:	687a      	ldr	r2, [r7, #4]
90001264:	6812      	ldr	r2, [r2, #0]
90001266:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
9000126a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
9000126e:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
90001272:	687b      	ldr	r3, [r7, #4]
90001274:	695b      	ldr	r3, [r3, #20]
90001276:	f003 0303 	and.w	r3, r3, #3
9000127a:	2b00      	cmp	r3, #0
9000127c:	d009      	beq.n	90001292 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
9000127e:	687b      	ldr	r3, [r7, #4]
90001280:	2201      	movs	r2, #1
90001282:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
90001286:	687b      	ldr	r3, [r7, #4]
90001288:	22e0      	movs	r2, #224	; 0xe0
9000128a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
9000128e:	2301      	movs	r3, #1
90001290:	e049      	b.n	90001326 <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
90001292:	687b      	ldr	r3, [r7, #4]
90001294:	681b      	ldr	r3, [r3, #0]
90001296:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
9000129a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
9000129e:	4b27      	ldr	r3, [pc, #156]	; (9000133c <HAL_ETH_Init+0x1c8>)
900012a0:	4013      	ands	r3, r2
900012a2:	687a      	ldr	r2, [r7, #4]
900012a4:	6952      	ldr	r2, [r2, #20]
900012a6:	0051      	lsls	r1, r2, #1
900012a8:	687a      	ldr	r2, [r7, #4]
900012aa:	6812      	ldr	r2, [r2, #0]
900012ac:	430b      	orrs	r3, r1
900012ae:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
900012b2:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
900012b6:	6878      	ldr	r0, [r7, #4]
900012b8:	f001 f9eb 	bl	90002692 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
900012bc:	6878      	ldr	r0, [r7, #4]
900012be:	f001 fa31 	bl	90002724 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
900012c2:	687b      	ldr	r3, [r7, #4]
900012c4:	685b      	ldr	r3, [r3, #4]
900012c6:	3305      	adds	r3, #5
900012c8:	781b      	ldrb	r3, [r3, #0]
900012ca:	021a      	lsls	r2, r3, #8
900012cc:	687b      	ldr	r3, [r7, #4]
900012ce:	685b      	ldr	r3, [r3, #4]
900012d0:	3304      	adds	r3, #4
900012d2:	781b      	ldrb	r3, [r3, #0]
900012d4:	4619      	mov	r1, r3
900012d6:	687b      	ldr	r3, [r7, #4]
900012d8:	681b      	ldr	r3, [r3, #0]
900012da:	430a      	orrs	r2, r1
900012dc:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
900012e0:	687b      	ldr	r3, [r7, #4]
900012e2:	685b      	ldr	r3, [r3, #4]
900012e4:	3303      	adds	r3, #3
900012e6:	781b      	ldrb	r3, [r3, #0]
900012e8:	061a      	lsls	r2, r3, #24
900012ea:	687b      	ldr	r3, [r7, #4]
900012ec:	685b      	ldr	r3, [r3, #4]
900012ee:	3302      	adds	r3, #2
900012f0:	781b      	ldrb	r3, [r3, #0]
900012f2:	041b      	lsls	r3, r3, #16
900012f4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
900012f6:	687b      	ldr	r3, [r7, #4]
900012f8:	685b      	ldr	r3, [r3, #4]
900012fa:	3301      	adds	r3, #1
900012fc:	781b      	ldrb	r3, [r3, #0]
900012fe:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
90001300:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
90001302:	687b      	ldr	r3, [r7, #4]
90001304:	685b      	ldr	r3, [r3, #4]
90001306:	781b      	ldrb	r3, [r3, #0]
90001308:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
9000130a:	687b      	ldr	r3, [r7, #4]
9000130c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
9000130e:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
90001310:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
90001314:	687b      	ldr	r3, [r7, #4]
90001316:	2200      	movs	r2, #0
90001318:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
9000131c:	687b      	ldr	r3, [r7, #4]
9000131e:	2210      	movs	r2, #16
90001320:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
90001324:	2300      	movs	r3, #0
}
90001326:	4618      	mov	r0, r3
90001328:	3710      	adds	r7, #16
9000132a:	46bd      	mov	sp, r7
9000132c:	bd80      	pop	{r7, pc}
9000132e:	bf00      	nop
90001330:	58024400 	.word	0x58024400
90001334:	58000400 	.word	0x58000400
90001338:	431bde83 	.word	0x431bde83
9000133c:	ffff8001 	.word	0xffff8001

90001340 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
90001340:	b580      	push	{r7, lr}
90001342:	b082      	sub	sp, #8
90001344:	af00      	add	r7, sp, #0
90001346:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
90001348:	687b      	ldr	r3, [r7, #4]
9000134a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
9000134e:	2b10      	cmp	r3, #16
90001350:	d153      	bne.n	900013fa <HAL_ETH_Start+0xba>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
90001352:	687b      	ldr	r3, [r7, #4]
90001354:	2223      	movs	r2, #35	; 0x23
90001356:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
9000135a:	687b      	ldr	r3, [r7, #4]
9000135c:	2204      	movs	r2, #4
9000135e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
90001360:	6878      	ldr	r0, [r7, #4]
90001362:	f000 fa64 	bl	9000182e <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
90001366:	687b      	ldr	r3, [r7, #4]
90001368:	681b      	ldr	r3, [r3, #0]
9000136a:	681a      	ldr	r2, [r3, #0]
9000136c:	687b      	ldr	r3, [r7, #4]
9000136e:	681b      	ldr	r3, [r3, #0]
90001370:	f042 0202 	orr.w	r2, r2, #2
90001374:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
90001376:	687b      	ldr	r3, [r7, #4]
90001378:	681b      	ldr	r3, [r3, #0]
9000137a:	681a      	ldr	r2, [r3, #0]
9000137c:	687b      	ldr	r3, [r7, #4]
9000137e:	681b      	ldr	r3, [r3, #0]
90001380:	f042 0201 	orr.w	r2, r2, #1
90001384:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
90001386:	687b      	ldr	r3, [r7, #4]
90001388:	681b      	ldr	r3, [r3, #0]
9000138a:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
9000138e:	687b      	ldr	r3, [r7, #4]
90001390:	681b      	ldr	r3, [r3, #0]
90001392:	f042 0201 	orr.w	r2, r2, #1
90001396:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
9000139a:	687b      	ldr	r3, [r7, #4]
9000139c:	681b      	ldr	r3, [r3, #0]
9000139e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
900013a2:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
900013a6:	687a      	ldr	r2, [r7, #4]
900013a8:	6812      	ldr	r2, [r2, #0]
900013aa:	f043 0301 	orr.w	r3, r3, #1
900013ae:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
900013b2:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
900013b6:	687b      	ldr	r3, [r7, #4]
900013b8:	681b      	ldr	r3, [r3, #0]
900013ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
900013be:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
900013c2:	687a      	ldr	r2, [r7, #4]
900013c4:	6812      	ldr	r2, [r2, #0]
900013c6:	f043 0301 	orr.w	r3, r3, #1
900013ca:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
900013ce:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
900013d2:	687b      	ldr	r3, [r7, #4]
900013d4:	681b      	ldr	r3, [r3, #0]
900013d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
900013da:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
900013de:	687a      	ldr	r2, [r7, #4]
900013e0:	6812      	ldr	r2, [r2, #0]
900013e2:	f443 7381 	orr.w	r3, r3, #258	; 0x102
900013e6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
900013ea:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160

    heth->gState = HAL_ETH_STATE_STARTED;
900013ee:	687b      	ldr	r3, [r7, #4]
900013f0:	2223      	movs	r2, #35	; 0x23
900013f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
900013f6:	2300      	movs	r3, #0
900013f8:	e000      	b.n	900013fc <HAL_ETH_Start+0xbc>
  }
  else
  {
    return HAL_ERROR;
900013fa:	2301      	movs	r3, #1
  }
}
900013fc:	4618      	mov	r0, r3
900013fe:	3708      	adds	r7, #8
90001400:	46bd      	mov	sp, r7
90001402:	bd80      	pop	{r7, pc}

90001404 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
90001404:	b580      	push	{r7, lr}
90001406:	b082      	sub	sp, #8
90001408:	af00      	add	r7, sp, #0
9000140a:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
9000140c:	687b      	ldr	r3, [r7, #4]
9000140e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
90001412:	2b10      	cmp	r3, #16
90001414:	d179      	bne.n	9000150a <HAL_ETH_Start_IT+0x106>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
90001416:	687b      	ldr	r3, [r7, #4]
90001418:	2223      	movs	r2, #35	; 0x23
9000141a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
9000141e:	687b      	ldr	r3, [r7, #4]
90001420:	2201      	movs	r2, #1
90001422:	659a      	str	r2, [r3, #88]	; 0x58
    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
90001424:	687b      	ldr	r3, [r7, #4]
90001426:	681b      	ldr	r3, [r3, #0]
90001428:	f8d3 170c 	ldr.w	r1, [r3, #1804]	; 0x70c
9000142c:	687b      	ldr	r3, [r7, #4]
9000142e:	681a      	ldr	r2, [r3, #0]
90001430:	4b38      	ldr	r3, [pc, #224]	; (90001514 <HAL_ETH_Start_IT+0x110>)
90001432:	430b      	orrs	r3, r1
90001434:	f8c2 370c 	str.w	r3, [r2, #1804]	; 0x70c
            ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
90001438:	687b      	ldr	r3, [r7, #4]
9000143a:	681b      	ldr	r3, [r3, #0]
9000143c:	f8d3 1710 	ldr.w	r1, [r3, #1808]	; 0x710
90001440:	687b      	ldr	r3, [r7, #4]
90001442:	681a      	ldr	r2, [r3, #0]
90001444:	4b34      	ldr	r3, [pc, #208]	; (90001518 <HAL_ETH_Start_IT+0x114>)
90001446:	430b      	orrs	r3, r1
90001448:	f8c2 3710 	str.w	r3, [r2, #1808]	; 0x710
            ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
9000144c:	687b      	ldr	r3, [r7, #4]
9000144e:	2204      	movs	r2, #4
90001450:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
90001452:	6878      	ldr	r0, [r7, #4]
90001454:	f000 f9eb 	bl	9000182e <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
90001458:	687b      	ldr	r3, [r7, #4]
9000145a:	681b      	ldr	r3, [r3, #0]
9000145c:	681a      	ldr	r2, [r3, #0]
9000145e:	687b      	ldr	r3, [r7, #4]
90001460:	681b      	ldr	r3, [r3, #0]
90001462:	f042 0202 	orr.w	r2, r2, #2
90001466:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
90001468:	687b      	ldr	r3, [r7, #4]
9000146a:	681b      	ldr	r3, [r3, #0]
9000146c:	681a      	ldr	r2, [r3, #0]
9000146e:	687b      	ldr	r3, [r7, #4]
90001470:	681b      	ldr	r3, [r3, #0]
90001472:	f042 0201 	orr.w	r2, r2, #1
90001476:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
90001478:	687b      	ldr	r3, [r7, #4]
9000147a:	681b      	ldr	r3, [r3, #0]
9000147c:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
90001480:	687b      	ldr	r3, [r7, #4]
90001482:	681b      	ldr	r3, [r3, #0]
90001484:	f042 0201 	orr.w	r2, r2, #1
90001488:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
9000148c:	687b      	ldr	r3, [r7, #4]
9000148e:	681b      	ldr	r3, [r3, #0]
90001490:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
90001494:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
90001498:	687a      	ldr	r2, [r7, #4]
9000149a:	6812      	ldr	r2, [r2, #0]
9000149c:	f043 0301 	orr.w	r3, r3, #1
900014a0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
900014a4:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
900014a8:	687b      	ldr	r3, [r7, #4]
900014aa:	681b      	ldr	r3, [r3, #0]
900014ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
900014b0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
900014b4:	687a      	ldr	r2, [r7, #4]
900014b6:	6812      	ldr	r2, [r2, #0]
900014b8:	f043 0301 	orr.w	r3, r3, #1
900014bc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
900014c0:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
900014c4:	687b      	ldr	r3, [r7, #4]
900014c6:	681b      	ldr	r3, [r3, #0]
900014c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
900014cc:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
900014d0:	687a      	ldr	r2, [r7, #4]
900014d2:	6812      	ldr	r2, [r2, #0]
900014d4:	f443 7381 	orr.w	r3, r3, #258	; 0x102
900014d8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
900014dc:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
900014e0:	687b      	ldr	r3, [r7, #4]
900014e2:	681b      	ldr	r3, [r3, #0]
900014e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
900014e8:	f8d3 1134 	ldr.w	r1, [r3, #308]	; 0x134
900014ec:	687b      	ldr	r3, [r7, #4]
900014ee:	681a      	ldr	r2, [r3, #0]
900014f0:	f24d 03c1 	movw	r3, #53441	; 0xd0c1
900014f4:	430b      	orrs	r3, r1
900014f6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
900014fa:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    heth->gState = HAL_ETH_STATE_STARTED;
900014fe:	687b      	ldr	r3, [r7, #4]
90001500:	2223      	movs	r2, #35	; 0x23
90001502:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
90001506:	2300      	movs	r3, #0
90001508:	e000      	b.n	9000150c <HAL_ETH_Start_IT+0x108>
  }
  else
  {
    return HAL_ERROR;
9000150a:	2301      	movs	r3, #1
  }
}
9000150c:	4618      	mov	r0, r3
9000150e:	3708      	adds	r7, #8
90001510:	46bd      	mov	sp, r7
90001512:	bd80      	pop	{r7, pc}
90001514:	0c020060 	.word	0x0c020060
90001518:	0c20c000 	.word	0x0c20c000

9000151c <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
9000151c:	b480      	push	{r7}
9000151e:	b085      	sub	sp, #20
90001520:	af00      	add	r7, sp, #0
90001522:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;

  if (heth->gState == HAL_ETH_STATE_STARTED)
90001524:	687b      	ldr	r3, [r7, #4]
90001526:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
9000152a:	2b23      	cmp	r3, #35	; 0x23
9000152c:	d165      	bne.n	900015fa <HAL_ETH_Stop_IT+0xde>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
9000152e:	687b      	ldr	r3, [r7, #4]
90001530:	2223      	movs	r2, #35	; 0x23
90001532:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
90001536:	687b      	ldr	r3, [r7, #4]
90001538:	681b      	ldr	r3, [r3, #0]
9000153a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
9000153e:	f8d3 1134 	ldr.w	r1, [r3, #308]	; 0x134
90001542:	687b      	ldr	r3, [r7, #4]
90001544:	681a      	ldr	r2, [r3, #0]
90001546:	4b30      	ldr	r3, [pc, #192]	; (90001608 <HAL_ETH_Stop_IT+0xec>)
90001548:	400b      	ands	r3, r1
9000154a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
9000154e:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
                                    ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
90001552:	687b      	ldr	r3, [r7, #4]
90001554:	681b      	ldr	r3, [r3, #0]
90001556:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
9000155a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
9000155e:	687a      	ldr	r2, [r7, #4]
90001560:	6812      	ldr	r2, [r2, #0]
90001562:	f023 0301 	bic.w	r3, r3, #1
90001566:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
9000156a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
9000156e:	687b      	ldr	r3, [r7, #4]
90001570:	681b      	ldr	r3, [r3, #0]
90001572:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
90001576:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
9000157a:	687a      	ldr	r2, [r7, #4]
9000157c:	6812      	ldr	r2, [r2, #0]
9000157e:	f023 0301 	bic.w	r3, r3, #1
90001582:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
90001586:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
9000158a:	687b      	ldr	r3, [r7, #4]
9000158c:	681b      	ldr	r3, [r3, #0]
9000158e:	681a      	ldr	r2, [r3, #0]
90001590:	687b      	ldr	r3, [r7, #4]
90001592:	681b      	ldr	r3, [r3, #0]
90001594:	f022 0201 	bic.w	r2, r2, #1
90001598:	601a      	str	r2, [r3, #0]
    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
9000159a:	687b      	ldr	r3, [r7, #4]
9000159c:	681b      	ldr	r3, [r3, #0]
9000159e:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
900015a2:	687b      	ldr	r3, [r7, #4]
900015a4:	681b      	ldr	r3, [r3, #0]
900015a6:	f042 0201 	orr.w	r2, r2, #1
900015aa:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
900015ae:	687b      	ldr	r3, [r7, #4]
900015b0:	681b      	ldr	r3, [r3, #0]
900015b2:	681a      	ldr	r2, [r3, #0]
900015b4:	687b      	ldr	r3, [r7, #4]
900015b6:	681b      	ldr	r3, [r3, #0]
900015b8:	f022 0202 	bic.w	r2, r2, #2
900015bc:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
900015be:	2300      	movs	r3, #0
900015c0:	60fb      	str	r3, [r7, #12]
900015c2:	e00e      	b.n	900015e2 <HAL_ETH_Stop_IT+0xc6>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
900015c4:	687b      	ldr	r3, [r7, #4]
900015c6:	68fa      	ldr	r2, [r7, #12]
900015c8:	3212      	adds	r2, #18
900015ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
900015ce:	60bb      	str	r3, [r7, #8]
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
900015d0:	68bb      	ldr	r3, [r7, #8]
900015d2:	68db      	ldr	r3, [r3, #12]
900015d4:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
900015d8:	68bb      	ldr	r3, [r7, #8]
900015da:	60da      	str	r2, [r3, #12]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
900015dc:	68fb      	ldr	r3, [r7, #12]
900015de:	3301      	adds	r3, #1
900015e0:	60fb      	str	r3, [r7, #12]
900015e2:	68fb      	ldr	r3, [r7, #12]
900015e4:	2b03      	cmp	r3, #3
900015e6:	d9ed      	bls.n	900015c4 <HAL_ETH_Stop_IT+0xa8>
    }

    heth->RxDescList.ItMode = 0U;
900015e8:	687b      	ldr	r3, [r7, #4]
900015ea:	2200      	movs	r2, #0
900015ec:	659a      	str	r2, [r3, #88]	; 0x58

    heth->gState = HAL_ETH_STATE_READY;
900015ee:	687b      	ldr	r3, [r7, #4]
900015f0:	2210      	movs	r2, #16
900015f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
900015f6:	2300      	movs	r3, #0
900015f8:	e000      	b.n	900015fc <HAL_ETH_Stop_IT+0xe0>
  }
  else
  {
    return HAL_ERROR;
900015fa:	2301      	movs	r3, #1
  }
}
900015fc:	4618      	mov	r0, r3
900015fe:	3714      	adds	r7, #20
90001600:	46bd      	mov	sp, r7
90001602:	f85d 7b04 	ldr.w	r7, [sp], #4
90001606:	4770      	bx	lr
90001608:	ffff2f3e 	.word	0xffff2f3e

9000160c <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
9000160c:	b580      	push	{r7, lr}
9000160e:	b082      	sub	sp, #8
90001610:	af00      	add	r7, sp, #0
90001612:	6078      	str	r0, [r7, #4]
90001614:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
90001616:	683b      	ldr	r3, [r7, #0]
90001618:	2b00      	cmp	r3, #0
9000161a:	d109      	bne.n	90001630 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
9000161c:	687b      	ldr	r3, [r7, #4]
9000161e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
90001622:	f043 0201 	orr.w	r2, r3, #1
90001626:	687b      	ldr	r3, [r7, #4]
90001628:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
9000162c:	2301      	movs	r3, #1
9000162e:	e03a      	b.n	900016a6 <HAL_ETH_Transmit_IT+0x9a>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
90001630:	687b      	ldr	r3, [r7, #4]
90001632:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
90001636:	2b23      	cmp	r3, #35	; 0x23
90001638:	d134      	bne.n	900016a4 <HAL_ETH_Transmit_IT+0x98>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
9000163a:	683b      	ldr	r3, [r7, #0]
9000163c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
9000163e:	687b      	ldr	r3, [r7, #4]
90001640:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
90001642:	2201      	movs	r2, #1
90001644:	6839      	ldr	r1, [r7, #0]
90001646:	6878      	ldr	r0, [r7, #4]
90001648:	f001 f8ca 	bl	900027e0 <ETH_Prepare_Tx_Descriptors>
9000164c:	4603      	mov	r3, r0
9000164e:	2b00      	cmp	r3, #0
90001650:	d009      	beq.n	90001666 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
90001652:	687b      	ldr	r3, [r7, #4]
90001654:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
90001658:	f043 0202 	orr.w	r2, r3, #2
9000165c:	687b      	ldr	r3, [r7, #4]
9000165e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
90001662:	2301      	movs	r3, #1
90001664:	e01f      	b.n	900016a6 <HAL_ETH_Transmit_IT+0x9a>
  __ASM volatile ("dsb 0xF":::"memory");
90001666:	f3bf 8f4f 	dsb	sy
}
9000166a:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
9000166c:	687b      	ldr	r3, [r7, #4]
9000166e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90001670:	1c5a      	adds	r2, r3, #1
90001672:	687b      	ldr	r3, [r7, #4]
90001674:	629a      	str	r2, [r3, #40]	; 0x28
90001676:	687b      	ldr	r3, [r7, #4]
90001678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9000167a:	2b03      	cmp	r3, #3
9000167c:	d904      	bls.n	90001688 <HAL_ETH_Transmit_IT+0x7c>
9000167e:	687b      	ldr	r3, [r7, #4]
90001680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90001682:	1f1a      	subs	r2, r3, #4
90001684:	687b      	ldr	r3, [r7, #4]
90001686:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
90001688:	687b      	ldr	r3, [r7, #4]
9000168a:	6a99      	ldr	r1, [r3, #40]	; 0x28
9000168c:	687b      	ldr	r3, [r7, #4]
9000168e:	681a      	ldr	r2, [r3, #0]
90001690:	687b      	ldr	r3, [r7, #4]
90001692:	3106      	adds	r1, #6
90001694:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
90001698:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
9000169c:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120

    return HAL_OK;
900016a0:	2300      	movs	r3, #0
900016a2:	e000      	b.n	900016a6 <HAL_ETH_Transmit_IT+0x9a>

  }
  else
  {
    return HAL_ERROR;
900016a4:	2301      	movs	r3, #1
  }
}
900016a6:	4618      	mov	r0, r3
900016a8:	3708      	adds	r7, #8
900016aa:	46bd      	mov	sp, r7
900016ac:	bd80      	pop	{r7, pc}

900016ae <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
900016ae:	b580      	push	{r7, lr}
900016b0:	b088      	sub	sp, #32
900016b2:	af00      	add	r7, sp, #0
900016b4:	6078      	str	r0, [r7, #4]
900016b6:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
900016b8:	2300      	movs	r3, #0
900016ba:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
900016bc:	2300      	movs	r3, #0
900016be:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
900016c0:	683b      	ldr	r3, [r7, #0]
900016c2:	2b00      	cmp	r3, #0
900016c4:	d109      	bne.n	900016da <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
900016c6:	687b      	ldr	r3, [r7, #4]
900016c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
900016cc:	f043 0201 	orr.w	r2, r3, #1
900016d0:	687b      	ldr	r3, [r7, #4]
900016d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
900016d6:	2301      	movs	r3, #1
900016d8:	e0a5      	b.n	90001826 <HAL_ETH_ReadData+0x178>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
900016da:	687b      	ldr	r3, [r7, #4]
900016dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
900016e0:	2b23      	cmp	r3, #35	; 0x23
900016e2:	d001      	beq.n	900016e8 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
900016e4:	2301      	movs	r3, #1
900016e6:	e09e      	b.n	90001826 <HAL_ETH_ReadData+0x178>
  }

  descidx = heth->RxDescList.RxDescIdx;
900016e8:	687b      	ldr	r3, [r7, #4]
900016ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
900016ec:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
900016ee:	687b      	ldr	r3, [r7, #4]
900016f0:	69fa      	ldr	r2, [r7, #28]
900016f2:	3212      	adds	r2, #18
900016f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
900016f8:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
900016fa:	687b      	ldr	r3, [r7, #4]
900016fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
900016fe:	f1c3 0304 	rsb	r3, r3, #4
90001702:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
90001704:	e067      	b.n	900017d6 <HAL_ETH_ReadData+0x128>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
90001706:	69bb      	ldr	r3, [r7, #24]
90001708:	68db      	ldr	r3, [r3, #12]
9000170a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
9000170e:	2b00      	cmp	r3, #0
90001710:	d007      	beq.n	90001722 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC1;
90001712:	69bb      	ldr	r3, [r7, #24]
90001714:	685a      	ldr	r2, [r3, #4]
90001716:	687b      	ldr	r3, [r7, #4]
90001718:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC0;
9000171a:	69bb      	ldr	r3, [r7, #24]
9000171c:	681a      	ldr	r2, [r3, #0]
9000171e:	687b      	ldr	r3, [r7, #4]
90001720:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
90001722:	69bb      	ldr	r3, [r7, #24]
90001724:	68db      	ldr	r3, [r3, #12]
90001726:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
9000172a:	2b00      	cmp	r3, #0
9000172c:	d103      	bne.n	90001736 <HAL_ETH_ReadData+0x88>
9000172e:	687b      	ldr	r3, [r7, #4]
90001730:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
90001732:	2b00      	cmp	r3, #0
90001734:	d03d      	beq.n	900017b2 <HAL_ETH_ReadData+0x104>
    {
      /* Check if first descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
90001736:	69bb      	ldr	r3, [r7, #24]
90001738:	68db      	ldr	r3, [r3, #12]
9000173a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
9000173e:	2b00      	cmp	r3, #0
90001740:	d005      	beq.n	9000174e <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
90001742:	687b      	ldr	r3, [r7, #4]
90001744:	2200      	movs	r2, #0
90001746:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
90001748:	687b      	ldr	r3, [r7, #4]
9000174a:	2200      	movs	r2, #0
9000174c:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
9000174e:	687b      	ldr	r3, [r7, #4]
90001750:	695b      	ldr	r3, [r3, #20]
90001752:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
90001754:	69bb      	ldr	r3, [r7, #24]
90001756:	68db      	ldr	r3, [r3, #12]
90001758:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
9000175c:	2b00      	cmp	r3, #0
9000175e:	d00d      	beq.n	9000177c <HAL_ETH_ReadData+0xce>
      {
        bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
90001760:	69bb      	ldr	r3, [r7, #24]
90001762:	68db      	ldr	r3, [r3, #12]
90001764:	f3c3 020e 	ubfx	r2, r3, #0, #15
90001768:	687b      	ldr	r3, [r7, #4]
9000176a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
9000176c:	1ad3      	subs	r3, r2, r3
9000176e:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
90001770:	69bb      	ldr	r3, [r7, #24]
90001772:	68da      	ldr	r2, [r3, #12]
90001774:	687b      	ldr	r3, [r7, #4]
90001776:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
90001778:	2301      	movs	r3, #1
9000177a:	73fb      	strb	r3, [r7, #15]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
9000177c:	687b      	ldr	r3, [r7, #4]
9000177e:	f103 007c 	add.w	r0, r3, #124	; 0x7c
90001782:	687b      	ldr	r3, [r7, #4]
90001784:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
90001788:	69bb      	ldr	r3, [r7, #24]
9000178a:	691b      	ldr	r3, [r3, #16]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
9000178c:	461a      	mov	r2, r3
9000178e:	693b      	ldr	r3, [r7, #16]
90001790:	b29b      	uxth	r3, r3
90001792:	f002 ff35 	bl	90004600 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
90001796:	687b      	ldr	r3, [r7, #4]
90001798:	6e1b      	ldr	r3, [r3, #96]	; 0x60
9000179a:	1c5a      	adds	r2, r3, #1
9000179c:	687b      	ldr	r3, [r7, #4]
9000179e:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
900017a0:	687b      	ldr	r3, [r7, #4]
900017a2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
900017a4:	693b      	ldr	r3, [r7, #16]
900017a6:	441a      	add	r2, r3
900017a8:	687b      	ldr	r3, [r7, #4]
900017aa:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
900017ac:	69bb      	ldr	r3, [r7, #24]
900017ae:	2200      	movs	r2, #0
900017b0:	611a      	str	r2, [r3, #16]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
900017b2:	69fb      	ldr	r3, [r7, #28]
900017b4:	3301      	adds	r3, #1
900017b6:	61fb      	str	r3, [r7, #28]
900017b8:	69fb      	ldr	r3, [r7, #28]
900017ba:	2b03      	cmp	r3, #3
900017bc:	d902      	bls.n	900017c4 <HAL_ETH_ReadData+0x116>
900017be:	69fb      	ldr	r3, [r7, #28]
900017c0:	3b04      	subs	r3, #4
900017c2:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
900017c4:	687b      	ldr	r3, [r7, #4]
900017c6:	69fa      	ldr	r2, [r7, #28]
900017c8:	3212      	adds	r2, #18
900017ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
900017ce:	61bb      	str	r3, [r7, #24]
    desccnt++;
900017d0:	697b      	ldr	r3, [r7, #20]
900017d2:	3301      	adds	r3, #1
900017d4:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
900017d6:	69bb      	ldr	r3, [r7, #24]
900017d8:	68db      	ldr	r3, [r3, #12]
900017da:	2b00      	cmp	r3, #0
900017dc:	db06      	blt.n	900017ec <HAL_ETH_ReadData+0x13e>
900017de:	697a      	ldr	r2, [r7, #20]
900017e0:	68bb      	ldr	r3, [r7, #8]
900017e2:	429a      	cmp	r2, r3
900017e4:	d202      	bcs.n	900017ec <HAL_ETH_ReadData+0x13e>
         && (rxdataready == 0U))
900017e6:	7bfb      	ldrb	r3, [r7, #15]
900017e8:	2b00      	cmp	r3, #0
900017ea:	d08c      	beq.n	90001706 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
900017ec:	687b      	ldr	r3, [r7, #4]
900017ee:	6eda      	ldr	r2, [r3, #108]	; 0x6c
900017f0:	697b      	ldr	r3, [r7, #20]
900017f2:	441a      	add	r2, r3
900017f4:	687b      	ldr	r3, [r7, #4]
900017f6:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
900017f8:	687b      	ldr	r3, [r7, #4]
900017fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
900017fc:	2b00      	cmp	r3, #0
900017fe:	d002      	beq.n	90001806 <HAL_ETH_ReadData+0x158>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
90001800:	6878      	ldr	r0, [r7, #4]
90001802:	f000 f814 	bl	9000182e <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
90001806:	687b      	ldr	r3, [r7, #4]
90001808:	69fa      	ldr	r2, [r7, #28]
9000180a:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
9000180c:	7bfb      	ldrb	r3, [r7, #15]
9000180e:	2b01      	cmp	r3, #1
90001810:	d108      	bne.n	90001824 <HAL_ETH_ReadData+0x176>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
90001812:	687b      	ldr	r3, [r7, #4]
90001814:	6fda      	ldr	r2, [r3, #124]	; 0x7c
90001816:	683b      	ldr	r3, [r7, #0]
90001818:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
9000181a:	687b      	ldr	r3, [r7, #4]
9000181c:	2200      	movs	r2, #0
9000181e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
90001820:	2300      	movs	r3, #0
90001822:	e000      	b.n	90001826 <HAL_ETH_ReadData+0x178>
  }

  /* Packet not ready */
  return HAL_ERROR;
90001824:	2301      	movs	r3, #1
}
90001826:	4618      	mov	r0, r3
90001828:	3720      	adds	r7, #32
9000182a:	46bd      	mov	sp, r7
9000182c:	bd80      	pop	{r7, pc}

9000182e <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
9000182e:	b580      	push	{r7, lr}
90001830:	b088      	sub	sp, #32
90001832:	af00      	add	r7, sp, #0
90001834:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
90001836:	2300      	movs	r3, #0
90001838:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
9000183a:	2301      	movs	r3, #1
9000183c:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
9000183e:	687b      	ldr	r3, [r7, #4]
90001840:	6e9b      	ldr	r3, [r3, #104]	; 0x68
90001842:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
90001844:	687b      	ldr	r3, [r7, #4]
90001846:	69fa      	ldr	r2, [r7, #28]
90001848:	3212      	adds	r2, #18
9000184a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
9000184e:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
90001850:	687b      	ldr	r3, [r7, #4]
90001852:	6edb      	ldr	r3, [r3, #108]	; 0x6c
90001854:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
90001856:	e03b      	b.n	900018d0 <ETH_UpdateDescriptor+0xa2>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
90001858:	697b      	ldr	r3, [r7, #20]
9000185a:	691b      	ldr	r3, [r3, #16]
9000185c:	2b00      	cmp	r3, #0
9000185e:	d112      	bne.n	90001886 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
90001860:	f107 030c 	add.w	r3, r7, #12
90001864:	4618      	mov	r0, r3
90001866:	f002 fe9b 	bl	900045a0 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
9000186a:	68fb      	ldr	r3, [r7, #12]
9000186c:	2b00      	cmp	r3, #0
9000186e:	d102      	bne.n	90001876 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
90001870:	2300      	movs	r3, #0
90001872:	74fb      	strb	r3, [r7, #19]
90001874:	e007      	b.n	90001886 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
90001876:	68fb      	ldr	r3, [r7, #12]
90001878:	461a      	mov	r2, r3
9000187a:	697b      	ldr	r3, [r7, #20]
9000187c:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
9000187e:	68fb      	ldr	r3, [r7, #12]
90001880:	461a      	mov	r2, r3
90001882:	697b      	ldr	r3, [r7, #20]
90001884:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
90001886:	7cfb      	ldrb	r3, [r7, #19]
90001888:	2b00      	cmp	r3, #0
9000188a:	d021      	beq.n	900018d0 <ETH_UpdateDescriptor+0xa2>
  __ASM volatile ("dmb 0xF":::"memory");
9000188c:	f3bf 8f5f 	dmb	sy
}
90001890:	bf00      	nop
    {
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();

      if (heth->RxDescList.ItMode != 0U)
90001892:	687b      	ldr	r3, [r7, #4]
90001894:	6d9b      	ldr	r3, [r3, #88]	; 0x58
90001896:	2b00      	cmp	r3, #0
90001898:	d004      	beq.n	900018a4 <ETH_UpdateDescriptor+0x76>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
9000189a:	697b      	ldr	r3, [r7, #20]
9000189c:	f04f 4241 	mov.w	r2, #3238002688	; 0xc1000000
900018a0:	60da      	str	r2, [r3, #12]
900018a2:	e003      	b.n	900018ac <ETH_UpdateDescriptor+0x7e>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
900018a4:	697b      	ldr	r3, [r7, #20]
900018a6:	f04f 4201 	mov.w	r2, #2164260864	; 0x81000000
900018aa:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
900018ac:	69fb      	ldr	r3, [r7, #28]
900018ae:	3301      	adds	r3, #1
900018b0:	61fb      	str	r3, [r7, #28]
900018b2:	69fb      	ldr	r3, [r7, #28]
900018b4:	2b03      	cmp	r3, #3
900018b6:	d902      	bls.n	900018be <ETH_UpdateDescriptor+0x90>
900018b8:	69fb      	ldr	r3, [r7, #28]
900018ba:	3b04      	subs	r3, #4
900018bc:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
900018be:	687b      	ldr	r3, [r7, #4]
900018c0:	69fa      	ldr	r2, [r7, #28]
900018c2:	3212      	adds	r2, #18
900018c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
900018c8:	617b      	str	r3, [r7, #20]
      desccount--;
900018ca:	69bb      	ldr	r3, [r7, #24]
900018cc:	3b01      	subs	r3, #1
900018ce:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
900018d0:	69bb      	ldr	r3, [r7, #24]
900018d2:	2b00      	cmp	r3, #0
900018d4:	d002      	beq.n	900018dc <ETH_UpdateDescriptor+0xae>
900018d6:	7cfb      	ldrb	r3, [r7, #19]
900018d8:	2b00      	cmp	r3, #0
900018da:	d1bd      	bne.n	90001858 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
900018dc:	687b      	ldr	r3, [r7, #4]
900018de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
900018e0:	69ba      	ldr	r2, [r7, #24]
900018e2:	429a      	cmp	r2, r3
900018e4:	d00d      	beq.n	90001902 <ETH_UpdateDescriptor+0xd4>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, 0);
900018e6:	687b      	ldr	r3, [r7, #4]
900018e8:	681b      	ldr	r3, [r3, #0]
900018ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
900018ee:	461a      	mov	r2, r3
900018f0:	2300      	movs	r3, #0
900018f2:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

    heth->RxDescList.RxBuildDescIdx = descidx;
900018f6:	687b      	ldr	r3, [r7, #4]
900018f8:	69fa      	ldr	r2, [r7, #28]
900018fa:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
900018fc:	687b      	ldr	r3, [r7, #4]
900018fe:	69ba      	ldr	r2, [r7, #24]
90001900:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
90001902:	bf00      	nop
90001904:	3720      	adds	r7, #32
90001906:	46bd      	mov	sp, r7
90001908:	bd80      	pop	{r7, pc}

9000190a <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
9000190a:	b580      	push	{r7, lr}
9000190c:	b086      	sub	sp, #24
9000190e:	af00      	add	r7, sp, #0
90001910:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
90001912:	687b      	ldr	r3, [r7, #4]
90001914:	3318      	adds	r3, #24
90001916:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
90001918:	68bb      	ldr	r3, [r7, #8]
9000191a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9000191c:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
9000191e:	68bb      	ldr	r3, [r7, #8]
90001920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90001922:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
90001924:	2301      	movs	r3, #1
90001926:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
90001928:	e03f      	b.n	900019aa <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
9000192a:	2301      	movs	r3, #1
9000192c:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
9000192e:	697b      	ldr	r3, [r7, #20]
90001930:	3b01      	subs	r3, #1
90001932:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
90001934:	68ba      	ldr	r2, [r7, #8]
90001936:	693b      	ldr	r3, [r7, #16]
90001938:	3304      	adds	r3, #4
9000193a:	009b      	lsls	r3, r3, #2
9000193c:	4413      	add	r3, r2
9000193e:	685b      	ldr	r3, [r3, #4]
90001940:	2b00      	cmp	r3, #0
90001942:	d106      	bne.n	90001952 <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
90001944:	693b      	ldr	r3, [r7, #16]
90001946:	3301      	adds	r3, #1
90001948:	f003 0303 	and.w	r3, r3, #3
9000194c:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
9000194e:	2300      	movs	r3, #0
90001950:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
90001952:	7bbb      	ldrb	r3, [r7, #14]
90001954:	2b00      	cmp	r3, #0
90001956:	d028      	beq.n	900019aa <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC3 & ETH_DMATXNDESCRF_OWN) == 0U)
90001958:	687b      	ldr	r3, [r7, #4]
9000195a:	68d9      	ldr	r1, [r3, #12]
9000195c:	693a      	ldr	r2, [r7, #16]
9000195e:	4613      	mov	r3, r2
90001960:	005b      	lsls	r3, r3, #1
90001962:	4413      	add	r3, r2
90001964:	00db      	lsls	r3, r3, #3
90001966:	440b      	add	r3, r1
90001968:	68db      	ldr	r3, [r3, #12]
9000196a:	2b00      	cmp	r3, #0
9000196c:	db1b      	blt.n	900019a6 <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
9000196e:	68ba      	ldr	r2, [r7, #8]
90001970:	693b      	ldr	r3, [r7, #16]
90001972:	3304      	adds	r3, #4
90001974:	009b      	lsls	r3, r3, #2
90001976:	4413      	add	r3, r2
90001978:	685b      	ldr	r3, [r3, #4]
9000197a:	4618      	mov	r0, r3
9000197c:	f002 fea8 	bl	900046d0 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
90001980:	68ba      	ldr	r2, [r7, #8]
90001982:	693b      	ldr	r3, [r7, #16]
90001984:	3304      	adds	r3, #4
90001986:	009b      	lsls	r3, r3, #2
90001988:	4413      	add	r3, r2
9000198a:	2200      	movs	r2, #0
9000198c:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
9000198e:	693b      	ldr	r3, [r7, #16]
90001990:	3301      	adds	r3, #1
90001992:	f003 0303 	and.w	r3, r3, #3
90001996:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
90001998:	68bb      	ldr	r3, [r7, #8]
9000199a:	697a      	ldr	r2, [r7, #20]
9000199c:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
9000199e:	68bb      	ldr	r3, [r7, #8]
900019a0:	693a      	ldr	r2, [r7, #16]
900019a2:	62da      	str	r2, [r3, #44]	; 0x2c
900019a4:	e001      	b.n	900019aa <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
900019a6:	2300      	movs	r3, #0
900019a8:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
900019aa:	697b      	ldr	r3, [r7, #20]
900019ac:	2b00      	cmp	r3, #0
900019ae:	d002      	beq.n	900019b6 <HAL_ETH_ReleaseTxPacket+0xac>
900019b0:	7bfb      	ldrb	r3, [r7, #15]
900019b2:	2b00      	cmp	r3, #0
900019b4:	d1b9      	bne.n	9000192a <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
900019b6:	2300      	movs	r3, #0
}
900019b8:	4618      	mov	r0, r3
900019ba:	3718      	adds	r7, #24
900019bc:	46bd      	mov	sp, r7
900019be:	bd80      	pop	{r7, pc}

900019c0 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
900019c0:	b580      	push	{r7, lr}
900019c2:	b084      	sub	sp, #16
900019c4:	af00      	add	r7, sp, #0
900019c6:	6078      	str	r0, [r7, #4]
  uint32_t macirqenable;
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
900019c8:	687b      	ldr	r3, [r7, #4]
900019ca:	681b      	ldr	r3, [r3, #0]
900019cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
900019d0:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
900019d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
900019d8:	2b40      	cmp	r3, #64	; 0x40
900019da:	d115      	bne.n	90001a08 <HAL_ETH_IRQHandler+0x48>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_RIE))
900019dc:	687b      	ldr	r3, [r7, #4]
900019de:	681b      	ldr	r3, [r3, #0]
900019e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
900019e4:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
900019e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
900019ec:	2b40      	cmp	r3, #64	; 0x40
900019ee:	d10b      	bne.n	90001a08 <HAL_ETH_IRQHandler+0x48>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
900019f0:	687b      	ldr	r3, [r7, #4]
900019f2:	681b      	ldr	r3, [r3, #0]
900019f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
900019f8:	461a      	mov	r2, r3
900019fa:	f248 0340 	movw	r3, #32832	; 0x8040
900019fe:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
90001a02:	6878      	ldr	r0, [r7, #4]
90001a04:	f002 f970 	bl	90003ce8 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_TI))
90001a08:	687b      	ldr	r3, [r7, #4]
90001a0a:	681b      	ldr	r3, [r3, #0]
90001a0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
90001a10:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
90001a14:	f003 0301 	and.w	r3, r3, #1
90001a18:	2b01      	cmp	r3, #1
90001a1a:	d115      	bne.n	90001a48 <HAL_ETH_IRQHandler+0x88>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_TIE))
90001a1c:	687b      	ldr	r3, [r7, #4]
90001a1e:	681b      	ldr	r3, [r3, #0]
90001a20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
90001a24:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
90001a28:	f003 0301 	and.w	r3, r3, #1
90001a2c:	2b01      	cmp	r3, #1
90001a2e:	d10b      	bne.n	90001a48 <HAL_ETH_IRQHandler+0x88>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
90001a30:	687b      	ldr	r3, [r7, #4]
90001a32:	681b      	ldr	r3, [r3, #0]
90001a34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
90001a38:	461a      	mov	r2, r3
90001a3a:	f248 0301 	movw	r3, #32769	; 0x8001
90001a3e:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
90001a42:	6878      	ldr	r0, [r7, #4]
90001a44:	f002 f960 	bl	90003d08 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_AIS))
90001a48:	687b      	ldr	r3, [r7, #4]
90001a4a:	681b      	ldr	r3, [r3, #0]
90001a4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
90001a50:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
90001a54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
90001a58:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
90001a5c:	d153      	bne.n	90001b06 <HAL_ETH_IRQHandler+0x146>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_AIE))
90001a5e:	687b      	ldr	r3, [r7, #4]
90001a60:	681b      	ldr	r3, [r3, #0]
90001a62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
90001a66:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
90001a6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
90001a6e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
90001a72:	d148      	bne.n	90001b06 <HAL_ETH_IRQHandler+0x146>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
90001a74:	687b      	ldr	r3, [r7, #4]
90001a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
90001a7a:	f043 0208 	orr.w	r2, r3, #8
90001a7e:	687b      	ldr	r3, [r7, #4]
90001a80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_FBE))
90001a84:	687b      	ldr	r3, [r7, #4]
90001a86:	681b      	ldr	r3, [r3, #0]
90001a88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
90001a8c:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
90001a90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
90001a94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
90001a98:	d11e      	bne.n	90001ad8 <HAL_ETH_IRQHandler+0x118>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
90001a9a:	687b      	ldr	r3, [r7, #4]
90001a9c:	681b      	ldr	r3, [r3, #0]
90001a9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
90001aa2:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
90001aa6:	f241 1302 	movw	r3, #4354	; 0x1102
90001aaa:	4013      	ands	r3, r2
90001aac:	687a      	ldr	r2, [r7, #4]
90001aae:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
90001ab2:	687b      	ldr	r3, [r7, #4]
90001ab4:	681b      	ldr	r3, [r3, #0]
90001ab6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
90001aba:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
90001abe:	687a      	ldr	r2, [r7, #4]
90001ac0:	6812      	ldr	r2, [r2, #0]
90001ac2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
90001ac6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
90001aca:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
90001ace:	687b      	ldr	r3, [r7, #4]
90001ad0:	22e0      	movs	r2, #224	; 0xe0
90001ad2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
90001ad6:	e013      	b.n	90001b00 <HAL_ETH_IRQHandler+0x140>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
90001ad8:	687b      	ldr	r3, [r7, #4]
90001ada:	681b      	ldr	r3, [r3, #0]
90001adc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
90001ae0:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
90001ae4:	f403 42cd 	and.w	r2, r3, #26240	; 0x6680
90001ae8:	687b      	ldr	r3, [r7, #4]
90001aea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
                                                               ETH_DMACSR_RBU | ETH_DMACSR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
90001aee:	687b      	ldr	r3, [r7, #4]
90001af0:	681b      	ldr	r3, [r3, #0]
90001af2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
90001af6:	461a      	mov	r2, r3
90001af8:	f44f 43cd 	mov.w	r3, #26240	; 0x6680
90001afc:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
90001b00:	6878      	ldr	r0, [r7, #4]
90001b02:	f002 f911 	bl	90003d28 <HAL_ETH_ErrorCallback>

    }
  }

  /* ETH MAC Error IT */
  macirqenable = heth->Instance->MACIER;
90001b06:	687b      	ldr	r3, [r7, #4]
90001b08:	681b      	ldr	r3, [r3, #0]
90001b0a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
90001b0e:	60fb      	str	r3, [r7, #12]
  if (((macirqenable & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
90001b10:	68fb      	ldr	r3, [r7, #12]
90001b12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
90001b16:	2b00      	cmp	r3, #0
90001b18:	d104      	bne.n	90001b24 <HAL_ETH_IRQHandler+0x164>
      ((macirqenable & ETH_MACIER_TXSTSIE) == ETH_MACIER_TXSTSIE))
90001b1a:	68fb      	ldr	r3, [r7, #12]
90001b1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((macirqenable & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
90001b20:	2b00      	cmp	r3, #0
90001b22:	d019      	beq.n	90001b58 <HAL_ETH_IRQHandler+0x198>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_MAC;
90001b24:	687b      	ldr	r3, [r7, #4]
90001b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
90001b2a:	f043 0210 	orr.w	r2, r3, #16
90001b2e:	687b      	ldr	r3, [r7, #4]
90001b30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
90001b34:	687b      	ldr	r3, [r7, #4]
90001b36:	681b      	ldr	r3, [r3, #0]
90001b38:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
90001b3c:	687b      	ldr	r3, [r7, #4]
90001b3e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

    heth->gState = HAL_ETH_STATE_ERROR;
90001b42:	687b      	ldr	r3, [r7, #4]
90001b44:	22e0      	movs	r2, #224	; 0xe0
90001b46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
90001b4a:	6878      	ldr	r0, [r7, #4]
90001b4c:	f002 f8ec 	bl	90003d28 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACErrorCode = (uint32_t)(0x0U);
90001b50:	687b      	ldr	r3, [r7, #4]
90001b52:	2200      	movs	r2, #0
90001b54:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }

  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
90001b58:	687b      	ldr	r3, [r7, #4]
90001b5a:	681b      	ldr	r3, [r3, #0]
90001b5c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
90001b60:	f003 0310 	and.w	r3, r3, #16
90001b64:	2b10      	cmp	r3, #16
90001b66:	d10f      	bne.n	90001b88 <HAL_ETH_IRQHandler+0x1c8>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
90001b68:	687b      	ldr	r3, [r7, #4]
90001b6a:	681b      	ldr	r3, [r3, #0]
90001b6c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
90001b70:	f003 0260 	and.w	r2, r3, #96	; 0x60
90001b74:	687b      	ldr	r3, [r7, #4]
90001b76:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
90001b7a:	6878      	ldr	r0, [r7, #4]
90001b7c:	f000 f830 	bl	90001be0 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
90001b80:	687b      	ldr	r3, [r7, #4]
90001b82:	2200      	movs	r2, #0
90001b84:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }

  /* ETH EEE IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
90001b88:	687b      	ldr	r3, [r7, #4]
90001b8a:	681b      	ldr	r3, [r3, #0]
90001b8c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
90001b90:	f003 0320 	and.w	r3, r3, #32
90001b94:	2b20      	cmp	r3, #32
90001b96:	d10f      	bne.n	90001bb8 <HAL_ETH_IRQHandler+0x1f8>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
90001b98:	687b      	ldr	r3, [r7, #4]
90001b9a:	681b      	ldr	r3, [r3, #0]
90001b9c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
90001ba0:	f003 020f 	and.w	r2, r3, #15
90001ba4:	687b      	ldr	r3, [r7, #4]
90001ba6:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
90001baa:	6878      	ldr	r0, [r7, #4]
90001bac:	f000 f822 	bl	90001bf4 <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
90001bb0:	687b      	ldr	r3, [r7, #4]
90001bb2:	2200      	movs	r2, #0
90001bb4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }
#else /* USE_HAL_ETH_REGISTER_CALLBACKS */
  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
90001bb8:	4b08      	ldr	r3, [pc, #32]	; (90001bdc <HAL_ETH_IRQHandler+0x21c>)
90001bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90001bbc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
90001bc0:	2b00      	cmp	r3, #0
90001bc2:	d006      	beq.n	90001bd2 <HAL_ETH_IRQHandler+0x212>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
90001bc4:	4b05      	ldr	r3, [pc, #20]	; (90001bdc <HAL_ETH_IRQHandler+0x21c>)
90001bc6:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
90001bca:	629a      	str	r2, [r3, #40]	; 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
90001bcc:	6878      	ldr	r0, [r7, #4]
90001bce:	f000 f81b 	bl	90001c08 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
}
90001bd2:	bf00      	nop
90001bd4:	3710      	adds	r7, #16
90001bd6:	46bd      	mov	sp, r7
90001bd8:	bd80      	pop	{r7, pc}
90001bda:	bf00      	nop
90001bdc:	58000080 	.word	0x58000080

90001be0 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
90001be0:	b480      	push	{r7}
90001be2:	b083      	sub	sp, #12
90001be4:	af00      	add	r7, sp, #0
90001be6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
90001be8:	bf00      	nop
90001bea:	370c      	adds	r7, #12
90001bec:	46bd      	mov	sp, r7
90001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
90001bf2:	4770      	bx	lr

90001bf4 <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
90001bf4:	b480      	push	{r7}
90001bf6:	b083      	sub	sp, #12
90001bf8:	af00      	add	r7, sp, #0
90001bfa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
90001bfc:	bf00      	nop
90001bfe:	370c      	adds	r7, #12
90001c00:	46bd      	mov	sp, r7
90001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
90001c06:	4770      	bx	lr

90001c08 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
90001c08:	b480      	push	{r7}
90001c0a:	b083      	sub	sp, #12
90001c0c:	af00      	add	r7, sp, #0
90001c0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
90001c10:	bf00      	nop
90001c12:	370c      	adds	r7, #12
90001c14:	46bd      	mov	sp, r7
90001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
90001c1a:	4770      	bx	lr

90001c1c <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
90001c1c:	b580      	push	{r7, lr}
90001c1e:	b086      	sub	sp, #24
90001c20:	af00      	add	r7, sp, #0
90001c22:	60f8      	str	r0, [r7, #12]
90001c24:	60b9      	str	r1, [r7, #8]
90001c26:	607a      	str	r2, [r7, #4]
90001c28:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
90001c2a:	68fb      	ldr	r3, [r7, #12]
90001c2c:	681b      	ldr	r3, [r3, #0]
90001c2e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
90001c32:	f003 0301 	and.w	r3, r3, #1
90001c36:	2b00      	cmp	r3, #0
90001c38:	d001      	beq.n	90001c3e <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
90001c3a:	2301      	movs	r3, #1
90001c3c:	e03e      	b.n	90001cbc <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
90001c3e:	68fb      	ldr	r3, [r7, #12]
90001c40:	681b      	ldr	r3, [r3, #0]
90001c42:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
90001c46:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
90001c48:	697b      	ldr	r3, [r7, #20]
90001c4a:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
90001c4e:	68bb      	ldr	r3, [r7, #8]
90001c50:	055b      	lsls	r3, r3, #21
90001c52:	4313      	orrs	r3, r2
90001c54:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
90001c56:	697b      	ldr	r3, [r7, #20]
90001c58:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
90001c5c:	687b      	ldr	r3, [r7, #4]
90001c5e:	041b      	lsls	r3, r3, #16
90001c60:	4313      	orrs	r3, r2
90001c62:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
90001c64:	697b      	ldr	r3, [r7, #20]
90001c66:	f043 030c 	orr.w	r3, r3, #12
90001c6a:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
90001c6c:	697b      	ldr	r3, [r7, #20]
90001c6e:	f043 0301 	orr.w	r3, r3, #1
90001c72:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
90001c74:	68fb      	ldr	r3, [r7, #12]
90001c76:	681b      	ldr	r3, [r3, #0]
90001c78:	697a      	ldr	r2, [r7, #20]
90001c7a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
90001c7e:	f7ff f8fd 	bl	90000e7c <HAL_GetTick>
90001c82:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
90001c84:	e009      	b.n	90001c9a <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
90001c86:	f7ff f8f9 	bl	90000e7c <HAL_GetTick>
90001c8a:	4602      	mov	r2, r0
90001c8c:	693b      	ldr	r3, [r7, #16]
90001c8e:	1ad3      	subs	r3, r2, r3
90001c90:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
90001c94:	d901      	bls.n	90001c9a <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
90001c96:	2301      	movs	r3, #1
90001c98:	e010      	b.n	90001cbc <HAL_ETH_ReadPHYRegister+0xa0>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
90001c9a:	68fb      	ldr	r3, [r7, #12]
90001c9c:	681b      	ldr	r3, [r3, #0]
90001c9e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
90001ca2:	f003 0301 	and.w	r3, r3, #1
90001ca6:	2b00      	cmp	r3, #0
90001ca8:	d1ed      	bne.n	90001c86 <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
90001caa:	68fb      	ldr	r3, [r7, #12]
90001cac:	681b      	ldr	r3, [r3, #0]
90001cae:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
90001cb2:	b29b      	uxth	r3, r3
90001cb4:	461a      	mov	r2, r3
90001cb6:	683b      	ldr	r3, [r7, #0]
90001cb8:	601a      	str	r2, [r3, #0]

  return HAL_OK;
90001cba:	2300      	movs	r3, #0
}
90001cbc:	4618      	mov	r0, r3
90001cbe:	3718      	adds	r7, #24
90001cc0:	46bd      	mov	sp, r7
90001cc2:	bd80      	pop	{r7, pc}

90001cc4 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
90001cc4:	b580      	push	{r7, lr}
90001cc6:	b086      	sub	sp, #24
90001cc8:	af00      	add	r7, sp, #0
90001cca:	60f8      	str	r0, [r7, #12]
90001ccc:	60b9      	str	r1, [r7, #8]
90001cce:	607a      	str	r2, [r7, #4]
90001cd0:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
90001cd2:	68fb      	ldr	r3, [r7, #12]
90001cd4:	681b      	ldr	r3, [r3, #0]
90001cd6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
90001cda:	f003 0301 	and.w	r3, r3, #1
90001cde:	2b00      	cmp	r3, #0
90001ce0:	d001      	beq.n	90001ce6 <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
90001ce2:	2301      	movs	r3, #1
90001ce4:	e03c      	b.n	90001d60 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
90001ce6:	68fb      	ldr	r3, [r7, #12]
90001ce8:	681b      	ldr	r3, [r3, #0]
90001cea:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
90001cee:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
90001cf0:	697b      	ldr	r3, [r7, #20]
90001cf2:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
90001cf6:	68bb      	ldr	r3, [r7, #8]
90001cf8:	055b      	lsls	r3, r3, #21
90001cfa:	4313      	orrs	r3, r2
90001cfc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
90001cfe:	697b      	ldr	r3, [r7, #20]
90001d00:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
90001d04:	687b      	ldr	r3, [r7, #4]
90001d06:	041b      	lsls	r3, r3, #16
90001d08:	4313      	orrs	r3, r2
90001d0a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
90001d0c:	697b      	ldr	r3, [r7, #20]
90001d0e:	f023 030c 	bic.w	r3, r3, #12
90001d12:	f043 0304 	orr.w	r3, r3, #4
90001d16:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
90001d18:	697b      	ldr	r3, [r7, #20]
90001d1a:	f043 0301 	orr.w	r3, r3, #1
90001d1e:	617b      	str	r3, [r7, #20]


  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
90001d20:	683b      	ldr	r3, [r7, #0]
90001d22:	b29a      	uxth	r2, r3
90001d24:	4b10      	ldr	r3, [pc, #64]	; (90001d68 <HAL_ETH_WritePHYRegister+0xa4>)
90001d26:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
90001d2a:	4a0f      	ldr	r2, [pc, #60]	; (90001d68 <HAL_ETH_WritePHYRegister+0xa4>)
90001d2c:	697b      	ldr	r3, [r7, #20]
90001d2e:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
90001d32:	f7ff f8a3 	bl	90000e7c <HAL_GetTick>
90001d36:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
90001d38:	e009      	b.n	90001d4e <HAL_ETH_WritePHYRegister+0x8a>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
90001d3a:	f7ff f89f 	bl	90000e7c <HAL_GetTick>
90001d3e:	4602      	mov	r2, r0
90001d40:	693b      	ldr	r3, [r7, #16]
90001d42:	1ad3      	subs	r3, r2, r3
90001d44:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
90001d48:	d901      	bls.n	90001d4e <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
90001d4a:	2301      	movs	r3, #1
90001d4c:	e008      	b.n	90001d60 <HAL_ETH_WritePHYRegister+0x9c>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
90001d4e:	68fb      	ldr	r3, [r7, #12]
90001d50:	681b      	ldr	r3, [r3, #0]
90001d52:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
90001d56:	f003 0301 	and.w	r3, r3, #1
90001d5a:	2b00      	cmp	r3, #0
90001d5c:	d1ed      	bne.n	90001d3a <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
90001d5e:	2300      	movs	r3, #0
}
90001d60:	4618      	mov	r0, r3
90001d62:	3718      	adds	r7, #24
90001d64:	46bd      	mov	sp, r7
90001d66:	bd80      	pop	{r7, pc}
90001d68:	40028000 	.word	0x40028000

90001d6c <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
90001d6c:	b480      	push	{r7}
90001d6e:	b083      	sub	sp, #12
90001d70:	af00      	add	r7, sp, #0
90001d72:	6078      	str	r0, [r7, #4]
90001d74:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
90001d76:	683b      	ldr	r3, [r7, #0]
90001d78:	2b00      	cmp	r3, #0
90001d7a:	d101      	bne.n	90001d80 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
90001d7c:	2301      	movs	r3, #1
90001d7e:	e1c3      	b.n	90002108 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
90001d80:	687b      	ldr	r3, [r7, #4]
90001d82:	681b      	ldr	r3, [r3, #0]
90001d84:	681b      	ldr	r3, [r3, #0]
90001d86:	f003 020c 	and.w	r2, r3, #12
90001d8a:	683b      	ldr	r3, [r7, #0]
90001d8c:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
90001d8e:	687b      	ldr	r3, [r7, #4]
90001d90:	681b      	ldr	r3, [r3, #0]
90001d92:	681b      	ldr	r3, [r3, #0]
90001d94:	f003 0310 	and.w	r3, r3, #16
90001d98:	2b00      	cmp	r3, #0
90001d9a:	bf14      	ite	ne
90001d9c:	2301      	movne	r3, #1
90001d9e:	2300      	moveq	r3, #0
90001da0:	b2db      	uxtb	r3, r3
90001da2:	461a      	mov	r2, r3
90001da4:	683b      	ldr	r3, [r7, #0]
90001da6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
90001daa:	687b      	ldr	r3, [r7, #4]
90001dac:	681b      	ldr	r3, [r3, #0]
90001dae:	681b      	ldr	r3, [r3, #0]
90001db0:	f003 0260 	and.w	r2, r3, #96	; 0x60
90001db4:	683b      	ldr	r3, [r7, #0]
90001db6:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
90001db8:	687b      	ldr	r3, [r7, #4]
90001dba:	681b      	ldr	r3, [r3, #0]
90001dbc:	681b      	ldr	r3, [r3, #0]
90001dbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
90001dc2:	2b00      	cmp	r3, #0
90001dc4:	bf0c      	ite	eq
90001dc6:	2301      	moveq	r3, #1
90001dc8:	2300      	movne	r3, #0
90001dca:	b2db      	uxtb	r3, r3
90001dcc:	461a      	mov	r2, r3
90001dce:	683b      	ldr	r3, [r7, #0]
90001dd0:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
90001dd4:	687b      	ldr	r3, [r7, #4]
90001dd6:	681b      	ldr	r3, [r3, #0]
90001dd8:	681b      	ldr	r3, [r3, #0]
90001dda:	f403 7300 	and.w	r3, r3, #512	; 0x200
                                        ? ENABLE : DISABLE;
90001dde:	2b00      	cmp	r3, #0
90001de0:	bf14      	ite	ne
90001de2:	2301      	movne	r3, #1
90001de4:	2300      	moveq	r3, #0
90001de6:	b2db      	uxtb	r3, r3
90001de8:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
90001dea:	683b      	ldr	r3, [r7, #0]
90001dec:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
90001dee:	687b      	ldr	r3, [r7, #4]
90001df0:	681b      	ldr	r3, [r3, #0]
90001df2:	681b      	ldr	r3, [r3, #0]
90001df4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
90001df8:	2b00      	cmp	r3, #0
90001dfa:	bf0c      	ite	eq
90001dfc:	2301      	moveq	r3, #1
90001dfe:	2300      	movne	r3, #0
90001e00:	b2db      	uxtb	r3, r3
90001e02:	461a      	mov	r2, r3
90001e04:	683b      	ldr	r3, [r7, #0]
90001e06:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
90001e08:	687b      	ldr	r3, [r7, #4]
90001e0a:	681b      	ldr	r3, [r3, #0]
90001e0c:	681b      	ldr	r3, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
90001e0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
90001e12:	2b00      	cmp	r3, #0
90001e14:	bf14      	ite	ne
90001e16:	2301      	movne	r3, #1
90001e18:	2300      	moveq	r3, #0
90001e1a:	b2db      	uxtb	r3, r3
90001e1c:	461a      	mov	r2, r3
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
90001e1e:	683b      	ldr	r3, [r7, #0]
90001e20:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
90001e22:	687b      	ldr	r3, [r7, #4]
90001e24:	681b      	ldr	r3, [r3, #0]
90001e26:	681b      	ldr	r3, [r3, #0]
90001e28:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
90001e2c:	2b00      	cmp	r3, #0
90001e2e:	bf14      	ite	ne
90001e30:	2301      	movne	r3, #1
90001e32:	2300      	moveq	r3, #0
90001e34:	b2db      	uxtb	r3, r3
90001e36:	461a      	mov	r2, r3
90001e38:	683b      	ldr	r3, [r7, #0]
90001e3a:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
90001e3c:	687b      	ldr	r3, [r7, #4]
90001e3e:	681b      	ldr	r3, [r3, #0]
90001e40:	681b      	ldr	r3, [r3, #0]
90001e42:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
90001e46:	683b      	ldr	r3, [r7, #0]
90001e48:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
90001e4a:	687b      	ldr	r3, [r7, #4]
90001e4c:	681b      	ldr	r3, [r3, #0]
90001e4e:	681b      	ldr	r3, [r3, #0]
90001e50:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
90001e54:	683b      	ldr	r3, [r7, #0]
90001e56:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
90001e58:	687b      	ldr	r3, [r7, #4]
90001e5a:	681b      	ldr	r3, [r3, #0]
90001e5c:	681b      	ldr	r3, [r3, #0]
90001e5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
90001e62:	2b00      	cmp	r3, #0
90001e64:	bf14      	ite	ne
90001e66:	2301      	movne	r3, #1
90001e68:	2300      	moveq	r3, #0
90001e6a:	b2db      	uxtb	r3, r3
90001e6c:	461a      	mov	r2, r3
90001e6e:	683b      	ldr	r3, [r7, #0]
90001e70:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
90001e72:	687b      	ldr	r3, [r7, #4]
90001e74:	681b      	ldr	r3, [r3, #0]
90001e76:	681b      	ldr	r3, [r3, #0]
90001e78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
90001e7c:	2b00      	cmp	r3, #0
90001e7e:	bf0c      	ite	eq
90001e80:	2301      	moveq	r3, #1
90001e82:	2300      	movne	r3, #0
90001e84:	b2db      	uxtb	r3, r3
90001e86:	461a      	mov	r2, r3
90001e88:	683b      	ldr	r3, [r7, #0]
90001e8a:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
90001e8c:	687b      	ldr	r3, [r7, #4]
90001e8e:	681b      	ldr	r3, [r3, #0]
90001e90:	681b      	ldr	r3, [r3, #0]
90001e92:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
90001e96:	2b00      	cmp	r3, #0
90001e98:	bf0c      	ite	eq
90001e9a:	2301      	moveq	r3, #1
90001e9c:	2300      	movne	r3, #0
90001e9e:	b2db      	uxtb	r3, r3
90001ea0:	461a      	mov	r2, r3
90001ea2:	683b      	ldr	r3, [r7, #0]
90001ea4:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
90001ea6:	687b      	ldr	r3, [r7, #4]
90001ea8:	681b      	ldr	r3, [r3, #0]
90001eaa:	681b      	ldr	r3, [r3, #0]
90001eac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
90001eb0:	2b00      	cmp	r3, #0
90001eb2:	bf14      	ite	ne
90001eb4:	2301      	movne	r3, #1
90001eb6:	2300      	moveq	r3, #0
90001eb8:	b2db      	uxtb	r3, r3
90001eba:	461a      	mov	r2, r3
90001ebc:	683b      	ldr	r3, [r7, #0]
90001ebe:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
90001ec0:	687b      	ldr	r3, [r7, #4]
90001ec2:	681b      	ldr	r3, [r3, #0]
90001ec4:	681b      	ldr	r3, [r3, #0]
90001ec6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
90001eca:	2b00      	cmp	r3, #0
90001ecc:	bf14      	ite	ne
90001ece:	2301      	movne	r3, #1
90001ed0:	2300      	moveq	r3, #0
90001ed2:	b2db      	uxtb	r3, r3
90001ed4:	461a      	mov	r2, r3
90001ed6:	683b      	ldr	r3, [r7, #0]
90001ed8:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
90001eda:	687b      	ldr	r3, [r7, #4]
90001edc:	681b      	ldr	r3, [r3, #0]
90001ede:	681b      	ldr	r3, [r3, #0]
90001ee0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
90001ee4:	2b00      	cmp	r3, #0
90001ee6:	bf14      	ite	ne
90001ee8:	2301      	movne	r3, #1
90001eea:	2300      	moveq	r3, #0
90001eec:	b2db      	uxtb	r3, r3
90001eee:	461a      	mov	r2, r3
90001ef0:	683b      	ldr	r3, [r7, #0]
90001ef2:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
90001ef4:	687b      	ldr	r3, [r7, #4]
90001ef6:	681b      	ldr	r3, [r3, #0]
90001ef8:	681b      	ldr	r3, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
90001efa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
90001efe:	2b00      	cmp	r3, #0
90001f00:	bf14      	ite	ne
90001f02:	2301      	movne	r3, #1
90001f04:	2300      	moveq	r3, #0
90001f06:	b2db      	uxtb	r3, r3
90001f08:	461a      	mov	r2, r3
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
90001f0a:	683b      	ldr	r3, [r7, #0]
90001f0c:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
90001f0e:	687b      	ldr	r3, [r7, #4]
90001f10:	681b      	ldr	r3, [r3, #0]
90001f12:	681b      	ldr	r3, [r3, #0]
90001f14:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
90001f18:	683b      	ldr	r3, [r7, #0]
90001f1a:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
90001f1c:	687b      	ldr	r3, [r7, #4]
90001f1e:	681b      	ldr	r3, [r3, #0]
90001f20:	681b      	ldr	r3, [r3, #0]
90001f22:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
90001f26:	2b00      	cmp	r3, #0
90001f28:	bf14      	ite	ne
90001f2a:	2301      	movne	r3, #1
90001f2c:	2300      	moveq	r3, #0
90001f2e:	b2db      	uxtb	r3, r3
90001f30:	461a      	mov	r2, r3
90001f32:	683b      	ldr	r3, [r7, #0]
90001f34:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
90001f36:	687b      	ldr	r3, [r7, #4]
90001f38:	681b      	ldr	r3, [r3, #0]
90001f3a:	681b      	ldr	r3, [r3, #0]
90001f3c:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
90001f40:	683b      	ldr	r3, [r7, #0]
90001f42:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
90001f44:	687b      	ldr	r3, [r7, #4]
90001f46:	681b      	ldr	r3, [r3, #0]
90001f48:	685b      	ldr	r3, [r3, #4]
90001f4a:	f3c3 020d 	ubfx	r2, r3, #0, #14
90001f4e:	683b      	ldr	r3, [r7, #0]
90001f50:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
90001f52:	687b      	ldr	r3, [r7, #4]
90001f54:	681b      	ldr	r3, [r3, #0]
90001f56:	685b      	ldr	r3, [r3, #4]
90001f58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
90001f5c:	2b00      	cmp	r3, #0
90001f5e:	bf0c      	ite	eq
90001f60:	2301      	moveq	r3, #1
90001f62:	2300      	movne	r3, #0
90001f64:	b2db      	uxtb	r3, r3
90001f66:	461a      	mov	r2, r3
90001f68:	683b      	ldr	r3, [r7, #0]
90001f6a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
90001f6e:	687b      	ldr	r3, [r7, #4]
90001f70:	681b      	ldr	r3, [r3, #0]
90001f72:	685b      	ldr	r3, [r3, #4]
90001f74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
90001f78:	2b00      	cmp	r3, #0
90001f7a:	bf14      	ite	ne
90001f7c:	2301      	movne	r3, #1
90001f7e:	2300      	moveq	r3, #0
90001f80:	b2db      	uxtb	r3, r3
90001f82:	461a      	mov	r2, r3
90001f84:	683b      	ldr	r3, [r7, #0]
90001f86:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
90001f8a:	687b      	ldr	r3, [r7, #4]
90001f8c:	681b      	ldr	r3, [r3, #0]
90001f8e:	685b      	ldr	r3, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
90001f90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
90001f94:	2b00      	cmp	r3, #0
90001f96:	bf14      	ite	ne
90001f98:	2301      	movne	r3, #1
90001f9a:	2300      	moveq	r3, #0
90001f9c:	b2db      	uxtb	r3, r3
90001f9e:	461a      	mov	r2, r3
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
90001fa0:	683b      	ldr	r3, [r7, #0]
90001fa2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
90001fa6:	687b      	ldr	r3, [r7, #4]
90001fa8:	681b      	ldr	r3, [r3, #0]
90001faa:	685b      	ldr	r3, [r3, #4]
90001fac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
                                    ? ENABLE : DISABLE;
90001fb0:	2b00      	cmp	r3, #0
90001fb2:	bf14      	ite	ne
90001fb4:	2301      	movne	r3, #1
90001fb6:	2300      	moveq	r3, #0
90001fb8:	b2db      	uxtb	r3, r3
90001fba:	461a      	mov	r2, r3
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
90001fbc:	683b      	ldr	r3, [r7, #0]
90001fbe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
90001fc2:	687b      	ldr	r3, [r7, #4]
90001fc4:	681b      	ldr	r3, [r3, #0]
90001fc6:	685b      	ldr	r3, [r3, #4]
90001fc8:	0e5b      	lsrs	r3, r3, #25
90001fca:	f003 021f 	and.w	r2, r3, #31
90001fce:	683b      	ldr	r3, [r7, #0]
90001fd0:	63da      	str	r2, [r3, #60]	; 0x3c


  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
90001fd2:	687b      	ldr	r3, [r7, #4]
90001fd4:	681b      	ldr	r3, [r3, #0]
90001fd6:	68db      	ldr	r3, [r3, #12]
90001fd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
90001fdc:	2b00      	cmp	r3, #0
90001fde:	bf14      	ite	ne
90001fe0:	2301      	movne	r3, #1
90001fe2:	2300      	moveq	r3, #0
90001fe4:	b2db      	uxtb	r3, r3
90001fe6:	461a      	mov	r2, r3
90001fe8:	683b      	ldr	r3, [r7, #0]
90001fea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
90001fee:	687b      	ldr	r3, [r7, #4]
90001ff0:	681b      	ldr	r3, [r3, #0]
90001ff2:	68db      	ldr	r3, [r3, #12]
90001ff4:	f003 020f 	and.w	r2, r3, #15
90001ff8:	683b      	ldr	r3, [r7, #0]
90001ffa:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
90001ffc:	687b      	ldr	r3, [r7, #4]
90001ffe:	681b      	ldr	r3, [r3, #0]
90002000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90002002:	f003 0302 	and.w	r3, r3, #2
90002006:	2b00      	cmp	r3, #0
90002008:	bf14      	ite	ne
9000200a:	2301      	movne	r3, #1
9000200c:	2300      	moveq	r3, #0
9000200e:	b2db      	uxtb	r3, r3
90002010:	461a      	mov	r2, r3
90002012:	683b      	ldr	r3, [r7, #0]
90002014:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
90002018:	687b      	ldr	r3, [r7, #4]
9000201a:	681b      	ldr	r3, [r3, #0]
9000201c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
9000201e:	f003 0380 	and.w	r3, r3, #128	; 0x80
90002022:	2b00      	cmp	r3, #0
90002024:	bf0c      	ite	eq
90002026:	2301      	moveq	r3, #1
90002028:	2300      	movne	r3, #0
9000202a:	b2db      	uxtb	r3, r3
9000202c:	461a      	mov	r2, r3
9000202e:	683b      	ldr	r3, [r7, #0]
90002030:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
90002034:	687b      	ldr	r3, [r7, #4]
90002036:	681b      	ldr	r3, [r3, #0]
90002038:	6f1b      	ldr	r3, [r3, #112]	; 0x70
9000203a:	f003 0270 	and.w	r2, r3, #112	; 0x70
9000203e:	683b      	ldr	r3, [r7, #0]
90002040:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
90002042:	687b      	ldr	r3, [r7, #4]
90002044:	681b      	ldr	r3, [r3, #0]
90002046:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90002048:	0c1b      	lsrs	r3, r3, #16
9000204a:	b29a      	uxth	r2, r3
9000204c:	683b      	ldr	r3, [r7, #0]
9000204e:	649a      	str	r2, [r3, #72]	; 0x48


  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
90002050:	687b      	ldr	r3, [r7, #4]
90002052:	681b      	ldr	r3, [r3, #0]
90002054:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
90002058:	f003 0301 	and.w	r3, r3, #1
9000205c:	2b00      	cmp	r3, #0
9000205e:	bf14      	ite	ne
90002060:	2301      	movne	r3, #1
90002062:	2300      	moveq	r3, #0
90002064:	b2db      	uxtb	r3, r3
90002066:	461a      	mov	r2, r3
90002068:	683b      	ldr	r3, [r7, #0]
9000206a:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
9000206e:	687b      	ldr	r3, [r7, #4]
90002070:	681b      	ldr	r3, [r3, #0]
90002072:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
90002076:	f003 0302 	and.w	r3, r3, #2
                                      ? ENABLE : DISABLE;
9000207a:	2b00      	cmp	r3, #0
9000207c:	bf14      	ite	ne
9000207e:	2301      	movne	r3, #1
90002080:	2300      	moveq	r3, #0
90002082:	b2db      	uxtb	r3, r3
90002084:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
90002086:	683b      	ldr	r3, [r7, #0]
90002088:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
9000208c:	687b      	ldr	r3, [r7, #4]
9000208e:	681b      	ldr	r3, [r3, #0]
90002090:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
90002094:	f003 0272 	and.w	r2, r3, #114	; 0x72
90002098:	683b      	ldr	r3, [r7, #0]
9000209a:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
9000209c:	687b      	ldr	r3, [r7, #4]
9000209e:	681b      	ldr	r3, [r3, #0]
900020a0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
900020a4:	f003 0223 	and.w	r2, r3, #35	; 0x23
900020a8:	683b      	ldr	r3, [r7, #0]
900020aa:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
900020ac:	687b      	ldr	r3, [r7, #4]
900020ae:	681b      	ldr	r3, [r3, #0]
900020b0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
900020b4:	f003 0308 	and.w	r3, r3, #8
900020b8:	2b00      	cmp	r3, #0
900020ba:	bf14      	ite	ne
900020bc:	2301      	movne	r3, #1
900020be:	2300      	moveq	r3, #0
900020c0:	b2db      	uxtb	r3, r3
900020c2:	461a      	mov	r2, r3
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
900020c4:	683b      	ldr	r3, [r7, #0]
900020c6:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
900020ca:	687b      	ldr	r3, [r7, #4]
900020cc:	681b      	ldr	r3, [r3, #0]
900020ce:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
900020d2:	f003 0310 	and.w	r3, r3, #16
900020d6:	2b00      	cmp	r3, #0
900020d8:	bf14      	ite	ne
900020da:	2301      	movne	r3, #1
900020dc:	2300      	moveq	r3, #0
900020de:	b2db      	uxtb	r3, r3
900020e0:	461a      	mov	r2, r3
900020e2:	683b      	ldr	r3, [r7, #0]
900020e4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
900020e8:	687b      	ldr	r3, [r7, #4]
900020ea:	681b      	ldr	r3, [r3, #0]
900020ec:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
900020f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
900020f4:	2b00      	cmp	r3, #0
900020f6:	bf0c      	ite	eq
900020f8:	2301      	moveq	r3, #1
900020fa:	2300      	movne	r3, #0
900020fc:	b2db      	uxtb	r3, r3
900020fe:	461a      	mov	r2, r3
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
90002100:	683b      	ldr	r3, [r7, #0]
90002102:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
90002106:	2300      	movs	r3, #0
}
90002108:	4618      	mov	r0, r3
9000210a:	370c      	adds	r7, #12
9000210c:	46bd      	mov	sp, r7
9000210e:	f85d 7b04 	ldr.w	r7, [sp], #4
90002112:	4770      	bx	lr

90002114 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
90002114:	b580      	push	{r7, lr}
90002116:	b082      	sub	sp, #8
90002118:	af00      	add	r7, sp, #0
9000211a:	6078      	str	r0, [r7, #4]
9000211c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
9000211e:	683b      	ldr	r3, [r7, #0]
90002120:	2b00      	cmp	r3, #0
90002122:	d101      	bne.n	90002128 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
90002124:	2301      	movs	r3, #1
90002126:	e00b      	b.n	90002140 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
90002128:	687b      	ldr	r3, [r7, #4]
9000212a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
9000212e:	2b10      	cmp	r3, #16
90002130:	d105      	bne.n	9000213e <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
90002132:	6839      	ldr	r1, [r7, #0]
90002134:	6878      	ldr	r0, [r7, #4]
90002136:	f000 f86d 	bl	90002214 <ETH_SetMACConfig>

    return HAL_OK;
9000213a:	2300      	movs	r3, #0
9000213c:	e000      	b.n	90002140 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
9000213e:	2301      	movs	r3, #1
  }
}
90002140:	4618      	mov	r0, r3
90002142:	3708      	adds	r7, #8
90002144:	46bd      	mov	sp, r7
90002146:	bd80      	pop	{r7, pc}

90002148 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
90002148:	b580      	push	{r7, lr}
9000214a:	b084      	sub	sp, #16
9000214c:	af00      	add	r7, sp, #0
9000214e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
90002150:	687b      	ldr	r3, [r7, #4]
90002152:	681b      	ldr	r3, [r3, #0]
90002154:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
90002158:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
9000215a:	68fb      	ldr	r3, [r7, #12]
9000215c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
90002160:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
90002162:	f001 f90f 	bl	90003384 <HAL_RCC_GetHCLKFreq>
90002166:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
90002168:	68bb      	ldr	r3, [r7, #8]
9000216a:	4a1e      	ldr	r2, [pc, #120]	; (900021e4 <HAL_ETH_SetMDIOClockRange+0x9c>)
9000216c:	4293      	cmp	r3, r2
9000216e:	d908      	bls.n	90002182 <HAL_ETH_SetMDIOClockRange+0x3a>
90002170:	68bb      	ldr	r3, [r7, #8]
90002172:	4a1d      	ldr	r2, [pc, #116]	; (900021e8 <HAL_ETH_SetMDIOClockRange+0xa0>)
90002174:	4293      	cmp	r3, r2
90002176:	d804      	bhi.n	90002182 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
90002178:	68fb      	ldr	r3, [r7, #12]
9000217a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
9000217e:	60fb      	str	r3, [r7, #12]
90002180:	e027      	b.n	900021d2 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
90002182:	68bb      	ldr	r3, [r7, #8]
90002184:	4a18      	ldr	r2, [pc, #96]	; (900021e8 <HAL_ETH_SetMDIOClockRange+0xa0>)
90002186:	4293      	cmp	r3, r2
90002188:	d908      	bls.n	9000219c <HAL_ETH_SetMDIOClockRange+0x54>
9000218a:	68bb      	ldr	r3, [r7, #8]
9000218c:	4a17      	ldr	r2, [pc, #92]	; (900021ec <HAL_ETH_SetMDIOClockRange+0xa4>)
9000218e:	4293      	cmp	r3, r2
90002190:	d204      	bcs.n	9000219c <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
90002192:	68fb      	ldr	r3, [r7, #12]
90002194:	f443 7340 	orr.w	r3, r3, #768	; 0x300
90002198:	60fb      	str	r3, [r7, #12]
9000219a:	e01a      	b.n	900021d2 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
9000219c:	68bb      	ldr	r3, [r7, #8]
9000219e:	4a13      	ldr	r2, [pc, #76]	; (900021ec <HAL_ETH_SetMDIOClockRange+0xa4>)
900021a0:	4293      	cmp	r3, r2
900021a2:	d303      	bcc.n	900021ac <HAL_ETH_SetMDIOClockRange+0x64>
900021a4:	68bb      	ldr	r3, [r7, #8]
900021a6:	4a12      	ldr	r2, [pc, #72]	; (900021f0 <HAL_ETH_SetMDIOClockRange+0xa8>)
900021a8:	4293      	cmp	r3, r2
900021aa:	d911      	bls.n	900021d0 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
900021ac:	68bb      	ldr	r3, [r7, #8]
900021ae:	4a10      	ldr	r2, [pc, #64]	; (900021f0 <HAL_ETH_SetMDIOClockRange+0xa8>)
900021b0:	4293      	cmp	r3, r2
900021b2:	d908      	bls.n	900021c6 <HAL_ETH_SetMDIOClockRange+0x7e>
900021b4:	68bb      	ldr	r3, [r7, #8]
900021b6:	4a0f      	ldr	r2, [pc, #60]	; (900021f4 <HAL_ETH_SetMDIOClockRange+0xac>)
900021b8:	4293      	cmp	r3, r2
900021ba:	d804      	bhi.n	900021c6 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
900021bc:	68fb      	ldr	r3, [r7, #12]
900021be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
900021c2:	60fb      	str	r3, [r7, #12]
900021c4:	e005      	b.n	900021d2 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
900021c6:	68fb      	ldr	r3, [r7, #12]
900021c8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
900021cc:	60fb      	str	r3, [r7, #12]
900021ce:	e000      	b.n	900021d2 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
900021d0:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
900021d2:	687b      	ldr	r3, [r7, #4]
900021d4:	681b      	ldr	r3, [r3, #0]
900021d6:	68fa      	ldr	r2, [r7, #12]
900021d8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
900021dc:	bf00      	nop
900021de:	3710      	adds	r7, #16
900021e0:	46bd      	mov	sp, r7
900021e2:	bd80      	pop	{r7, pc}
900021e4:	01312cff 	.word	0x01312cff
900021e8:	02160ebf 	.word	0x02160ebf
900021ec:	03938700 	.word	0x03938700
900021f0:	05f5e0ff 	.word	0x05f5e0ff
900021f4:	08f0d17f 	.word	0x08f0d17f

900021f8 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(ETH_HandleTypeDef *heth)
{
900021f8:	b480      	push	{r7}
900021fa:	b083      	sub	sp, #12
900021fc:	af00      	add	r7, sp, #0
900021fe:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
90002200:	687b      	ldr	r3, [r7, #4]
90002202:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
90002206:	4618      	mov	r0, r3
90002208:	370c      	adds	r7, #12
9000220a:	46bd      	mov	sp, r7
9000220c:	f85d 7b04 	ldr.w	r7, [sp], #4
90002210:	4770      	bx	lr
	...

90002214 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
90002214:	b480      	push	{r7}
90002216:	b085      	sub	sp, #20
90002218:	af00      	add	r7, sp, #0
9000221a:	6078      	str	r0, [r7, #4]
9000221c:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
9000221e:	683b      	ldr	r3, [r7, #0]
90002220:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
90002222:	683b      	ldr	r3, [r7, #0]
90002224:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
90002226:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
90002228:	683b      	ldr	r3, [r7, #0]
9000222a:	791b      	ldrb	r3, [r3, #4]
9000222c:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
9000222e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
90002230:	683b      	ldr	r3, [r7, #0]
90002232:	7b1b      	ldrb	r3, [r3, #12]
90002234:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
90002236:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
90002238:	683b      	ldr	r3, [r7, #0]
9000223a:	7b5b      	ldrb	r3, [r3, #13]
9000223c:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
9000223e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
90002240:	683b      	ldr	r3, [r7, #0]
90002242:	7b9b      	ldrb	r3, [r3, #14]
90002244:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
90002246:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
90002248:	683b      	ldr	r3, [r7, #0]
9000224a:	7bdb      	ldrb	r3, [r3, #15]
9000224c:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
9000224e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
90002250:	683a      	ldr	r2, [r7, #0]
90002252:	7c12      	ldrb	r2, [r2, #16]
90002254:	2a00      	cmp	r2, #0
90002256:	d102      	bne.n	9000225e <ETH_SetMACConfig+0x4a>
90002258:	f44f 2200 	mov.w	r2, #524288	; 0x80000
9000225c:	e000      	b.n	90002260 <ETH_SetMACConfig+0x4c>
9000225e:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
90002260:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
90002262:	683a      	ldr	r2, [r7, #0]
90002264:	7c52      	ldrb	r2, [r2, #17]
90002266:	2a00      	cmp	r2, #0
90002268:	d102      	bne.n	90002270 <ETH_SetMACConfig+0x5c>
9000226a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
9000226e:	e000      	b.n	90002272 <ETH_SetMACConfig+0x5e>
90002270:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
90002272:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
90002274:	683b      	ldr	r3, [r7, #0]
90002276:	7c9b      	ldrb	r3, [r3, #18]
90002278:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
9000227a:	431a      	orrs	r2, r3
               macconf->Speed |
9000227c:	683b      	ldr	r3, [r7, #0]
9000227e:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
90002280:	431a      	orrs	r2, r3
               macconf->DuplexMode |
90002282:	683b      	ldr	r3, [r7, #0]
90002284:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
90002286:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
90002288:	683b      	ldr	r3, [r7, #0]
9000228a:	7f1b      	ldrb	r3, [r3, #28]
9000228c:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
9000228e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
90002290:	683b      	ldr	r3, [r7, #0]
90002292:	7f5b      	ldrb	r3, [r3, #29]
90002294:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
90002296:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
90002298:	683a      	ldr	r2, [r7, #0]
9000229a:	7f92      	ldrb	r2, [r2, #30]
9000229c:	2a00      	cmp	r2, #0
9000229e:	d102      	bne.n	900022a6 <ETH_SetMACConfig+0x92>
900022a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
900022a4:	e000      	b.n	900022a8 <ETH_SetMACConfig+0x94>
900022a6:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
900022a8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
900022aa:	683b      	ldr	r3, [r7, #0]
900022ac:	7fdb      	ldrb	r3, [r3, #31]
900022ae:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
900022b0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
900022b2:	683a      	ldr	r2, [r7, #0]
900022b4:	f892 2020 	ldrb.w	r2, [r2, #32]
900022b8:	2a00      	cmp	r2, #0
900022ba:	d102      	bne.n	900022c2 <ETH_SetMACConfig+0xae>
900022bc:	f44f 7280 	mov.w	r2, #256	; 0x100
900022c0:	e000      	b.n	900022c4 <ETH_SetMACConfig+0xb0>
900022c2:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
900022c4:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
900022c6:	683b      	ldr	r3, [r7, #0]
900022c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
900022ca:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
900022cc:	683b      	ldr	r3, [r7, #0]
900022ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
900022d2:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
900022d4:	431a      	orrs	r2, r3
               macconf->PreambleLength);
900022d6:	683b      	ldr	r3, [r7, #0]
900022d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
900022da:	4313      	orrs	r3, r2
900022dc:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
900022de:	687b      	ldr	r3, [r7, #4]
900022e0:	681b      	ldr	r3, [r3, #0]
900022e2:	681a      	ldr	r2, [r3, #0]
900022e4:	4b56      	ldr	r3, [pc, #344]	; (90002440 <ETH_SetMACConfig+0x22c>)
900022e6:	4013      	ands	r3, r2
900022e8:	687a      	ldr	r2, [r7, #4]
900022ea:	6812      	ldr	r2, [r2, #0]
900022ec:	68f9      	ldr	r1, [r7, #12]
900022ee:	430b      	orrs	r3, r1
900022f0:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
900022f2:	683b      	ldr	r3, [r7, #0]
900022f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
900022f6:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
900022f8:	683b      	ldr	r3, [r7, #0]
900022fa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
900022fe:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
90002300:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
90002302:	683b      	ldr	r3, [r7, #0]
90002304:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
90002308:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
9000230a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
9000230c:	683b      	ldr	r3, [r7, #0]
9000230e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
90002312:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
90002314:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
90002316:	683a      	ldr	r2, [r7, #0]
90002318:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
9000231c:	2a00      	cmp	r2, #0
9000231e:	d102      	bne.n	90002326 <ETH_SetMACConfig+0x112>
90002320:	f44f 3280 	mov.w	r2, #65536	; 0x10000
90002324:	e000      	b.n	90002328 <ETH_SetMACConfig+0x114>
90002326:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
90002328:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
9000232a:	683b      	ldr	r3, [r7, #0]
9000232c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
9000232e:	4313      	orrs	r3, r2
90002330:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
90002332:	687b      	ldr	r3, [r7, #4]
90002334:	681b      	ldr	r3, [r3, #0]
90002336:	685a      	ldr	r2, [r3, #4]
90002338:	4b42      	ldr	r3, [pc, #264]	; (90002444 <ETH_SetMACConfig+0x230>)
9000233a:	4013      	ands	r3, r2
9000233c:	687a      	ldr	r2, [r7, #4]
9000233e:	6812      	ldr	r2, [r2, #0]
90002340:	68f9      	ldr	r1, [r7, #12]
90002342:	430b      	orrs	r3, r1
90002344:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
90002346:	683b      	ldr	r3, [r7, #0]
90002348:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
9000234c:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
9000234e:	683b      	ldr	r3, [r7, #0]
90002350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
90002352:	4313      	orrs	r3, r2
90002354:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
90002356:	687b      	ldr	r3, [r7, #4]
90002358:	681b      	ldr	r3, [r3, #0]
9000235a:	68da      	ldr	r2, [r3, #12]
9000235c:	4b3a      	ldr	r3, [pc, #232]	; (90002448 <ETH_SetMACConfig+0x234>)
9000235e:	4013      	ands	r3, r2
90002360:	687a      	ldr	r2, [r7, #4]
90002362:	6812      	ldr	r2, [r2, #0]
90002364:	68f9      	ldr	r1, [r7, #12]
90002366:	430b      	orrs	r3, r1
90002368:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
9000236a:	683b      	ldr	r3, [r7, #0]
9000236c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
90002370:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
90002372:	683b      	ldr	r3, [r7, #0]
90002374:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
90002376:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
90002378:	683a      	ldr	r2, [r7, #0]
9000237a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
9000237e:	2a00      	cmp	r2, #0
90002380:	d101      	bne.n	90002386 <ETH_SetMACConfig+0x172>
90002382:	2280      	movs	r2, #128	; 0x80
90002384:	e000      	b.n	90002388 <ETH_SetMACConfig+0x174>
90002386:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
90002388:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
9000238a:	683b      	ldr	r3, [r7, #0]
9000238c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
9000238e:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
90002390:	4313      	orrs	r3, r2
90002392:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
90002394:	687b      	ldr	r3, [r7, #4]
90002396:	681b      	ldr	r3, [r3, #0]
90002398:	6f1a      	ldr	r2, [r3, #112]	; 0x70
9000239a:	f64f 730d 	movw	r3, #65293	; 0xff0d
9000239e:	4013      	ands	r3, r2
900023a0:	687a      	ldr	r2, [r7, #4]
900023a2:	6812      	ldr	r2, [r2, #0]
900023a4:	68f9      	ldr	r1, [r7, #12]
900023a6:	430b      	orrs	r3, r1
900023a8:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
900023aa:	683b      	ldr	r3, [r7, #0]
900023ac:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
900023b0:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
900023b2:	683b      	ldr	r3, [r7, #0]
900023b4:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
900023b8:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
900023ba:	4313      	orrs	r3, r2
900023bc:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
900023be:	687b      	ldr	r3, [r7, #4]
900023c0:	681b      	ldr	r3, [r3, #0]
900023c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
900023c6:	f023 0103 	bic.w	r1, r3, #3
900023ca:	687b      	ldr	r3, [r7, #4]
900023cc:	681b      	ldr	r3, [r3, #0]
900023ce:	68fa      	ldr	r2, [r7, #12]
900023d0:	430a      	orrs	r2, r1
900023d2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
900023d6:	687b      	ldr	r3, [r7, #4]
900023d8:	681b      	ldr	r3, [r3, #0]
900023da:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
900023de:	f023 0172 	bic.w	r1, r3, #114	; 0x72
900023e2:	683b      	ldr	r3, [r7, #0]
900023e4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
900023e6:	687b      	ldr	r3, [r7, #4]
900023e8:	681b      	ldr	r3, [r3, #0]
900023ea:	430a      	orrs	r2, r1
900023ec:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
900023f0:	683b      	ldr	r3, [r7, #0]
900023f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
900023f4:	683a      	ldr	r2, [r7, #0]
900023f6:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
900023fa:	2a00      	cmp	r2, #0
900023fc:	d101      	bne.n	90002402 <ETH_SetMACConfig+0x1ee>
900023fe:	2240      	movs	r2, #64	; 0x40
90002400:	e000      	b.n	90002404 <ETH_SetMACConfig+0x1f0>
90002402:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
90002404:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
90002406:	683b      	ldr	r3, [r7, #0]
90002408:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
9000240c:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
9000240e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
90002410:	683b      	ldr	r3, [r7, #0]
90002412:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
90002416:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
90002418:	4313      	orrs	r3, r2
9000241a:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
9000241c:	687b      	ldr	r3, [r7, #4]
9000241e:	681b      	ldr	r3, [r3, #0]
90002420:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
90002424:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
90002428:	687b      	ldr	r3, [r7, #4]
9000242a:	681b      	ldr	r3, [r3, #0]
9000242c:	68fa      	ldr	r2, [r7, #12]
9000242e:	430a      	orrs	r2, r1
90002430:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
90002434:	bf00      	nop
90002436:	3714      	adds	r7, #20
90002438:	46bd      	mov	sp, r7
9000243a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000243e:	4770      	bx	lr
90002440:	00048083 	.word	0x00048083
90002444:	c0f88000 	.word	0xc0f88000
90002448:	fffffef0 	.word	0xfffffef0

9000244c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
9000244c:	b480      	push	{r7}
9000244e:	b085      	sub	sp, #20
90002450:	af00      	add	r7, sp, #0
90002452:	6078      	str	r0, [r7, #4]
90002454:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
90002456:	687b      	ldr	r3, [r7, #4]
90002458:	681b      	ldr	r3, [r3, #0]
9000245a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
9000245e:	681a      	ldr	r2, [r3, #0]
90002460:	4b38      	ldr	r3, [pc, #224]	; (90002544 <ETH_SetDMAConfig+0xf8>)
90002462:	4013      	ands	r3, r2
90002464:	683a      	ldr	r2, [r7, #0]
90002466:	6811      	ldr	r1, [r2, #0]
90002468:	687a      	ldr	r2, [r7, #4]
9000246a:	6812      	ldr	r2, [r2, #0]
9000246c:	430b      	orrs	r3, r1
9000246e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
90002472:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
90002474:	683b      	ldr	r3, [r7, #0]
90002476:	791b      	ldrb	r3, [r3, #4]
90002478:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
9000247a:	683b      	ldr	r3, [r7, #0]
9000247c:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
9000247e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
90002480:	683b      	ldr	r3, [r7, #0]
90002482:	7b1b      	ldrb	r3, [r3, #12]
90002484:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
90002486:	4313      	orrs	r3, r2
90002488:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
9000248a:	687b      	ldr	r3, [r7, #4]
9000248c:	681b      	ldr	r3, [r3, #0]
9000248e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
90002492:	685a      	ldr	r2, [r3, #4]
90002494:	4b2c      	ldr	r3, [pc, #176]	; (90002548 <ETH_SetDMAConfig+0xfc>)
90002496:	4013      	ands	r3, r2
90002498:	687a      	ldr	r2, [r7, #4]
9000249a:	6812      	ldr	r2, [r2, #0]
9000249c:	68f9      	ldr	r1, [r7, #12]
9000249e:	430b      	orrs	r3, r1
900024a0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
900024a4:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
900024a6:	683b      	ldr	r3, [r7, #0]
900024a8:	7b5b      	ldrb	r3, [r3, #13]
900024aa:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
900024ac:	683b      	ldr	r3, [r7, #0]
900024ae:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
900024b0:	4313      	orrs	r3, r2
900024b2:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
900024b4:	687b      	ldr	r3, [r7, #4]
900024b6:	681b      	ldr	r3, [r3, #0]
900024b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
900024bc:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
900024c0:	4b22      	ldr	r3, [pc, #136]	; (9000254c <ETH_SetDMAConfig+0x100>)
900024c2:	4013      	ands	r3, r2
900024c4:	687a      	ldr	r2, [r7, #4]
900024c6:	6812      	ldr	r2, [r2, #0]
900024c8:	68f9      	ldr	r1, [r7, #12]
900024ca:	430b      	orrs	r3, r1
900024cc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
900024d0:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
900024d4:	683b      	ldr	r3, [r7, #0]
900024d6:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
900024d8:	683b      	ldr	r3, [r7, #0]
900024da:	7d1b      	ldrb	r3, [r3, #20]
900024dc:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
900024de:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
900024e0:	683b      	ldr	r3, [r7, #0]
900024e2:	7f5b      	ldrb	r3, [r3, #29]
900024e4:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
900024e6:	4313      	orrs	r3, r2
900024e8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
900024ea:	687b      	ldr	r3, [r7, #4]
900024ec:	681b      	ldr	r3, [r3, #0]
900024ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
900024f2:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
900024f6:	4b16      	ldr	r3, [pc, #88]	; (90002550 <ETH_SetDMAConfig+0x104>)
900024f8:	4013      	ands	r3, r2
900024fa:	687a      	ldr	r2, [r7, #4]
900024fc:	6812      	ldr	r2, [r2, #0]
900024fe:	68f9      	ldr	r1, [r7, #12]
90002500:	430b      	orrs	r3, r1
90002502:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
90002506:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
9000250a:	683b      	ldr	r3, [r7, #0]
9000250c:	7f1b      	ldrb	r3, [r3, #28]
9000250e:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
90002510:	683b      	ldr	r3, [r7, #0]
90002512:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
90002514:	4313      	orrs	r3, r2
90002516:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
90002518:	687b      	ldr	r3, [r7, #4]
9000251a:	681b      	ldr	r3, [r3, #0]
9000251c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
90002520:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
90002524:	4b0b      	ldr	r3, [pc, #44]	; (90002554 <ETH_SetDMAConfig+0x108>)
90002526:	4013      	ands	r3, r2
90002528:	687a      	ldr	r2, [r7, #4]
9000252a:	6812      	ldr	r2, [r2, #0]
9000252c:	68f9      	ldr	r1, [r7, #12]
9000252e:	430b      	orrs	r3, r1
90002530:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
90002534:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
90002538:	bf00      	nop
9000253a:	3714      	adds	r7, #20
9000253c:	46bd      	mov	sp, r7
9000253e:	f85d 7b04 	ldr.w	r7, [sp], #4
90002542:	4770      	bx	lr
90002544:	ffff87fd 	.word	0xffff87fd
90002548:	ffff2ffe 	.word	0xffff2ffe
9000254c:	fffec000 	.word	0xfffec000
90002550:	ffc0efef 	.word	0xffc0efef
90002554:	7fc0ffff 	.word	0x7fc0ffff

90002558 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
90002558:	b580      	push	{r7, lr}
9000255a:	b0a4      	sub	sp, #144	; 0x90
9000255c:	af00      	add	r7, sp, #0
9000255e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
90002560:	2301      	movs	r3, #1
90002562:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
90002566:	2300      	movs	r3, #0
90002568:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
9000256a:	2300      	movs	r3, #0
9000256c:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
90002570:	2300      	movs	r3, #0
90002572:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
90002576:	2301      	movs	r3, #1
90002578:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
9000257c:	2301      	movs	r3, #1
9000257e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
90002582:	2301      	movs	r3, #1
90002584:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
90002588:	2300      	movs	r3, #0
9000258a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
9000258e:	2301      	movs	r3, #1
90002590:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
90002594:	f44f 5300 	mov.w	r3, #8192	; 0x2000
90002598:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
9000259a:	2300      	movs	r3, #0
9000259c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
900025a0:	2300      	movs	r3, #0
900025a2:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
900025a4:	2300      	movs	r3, #0
900025a6:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
900025aa:	2300      	movs	r3, #0
900025ac:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
900025b0:	f44f 63c3 	mov.w	r3, #1560	; 0x618
900025b4:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
900025b6:	2300      	movs	r3, #0
900025b8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
900025bc:	2300      	movs	r3, #0
900025be:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
900025c0:	2301      	movs	r3, #1
900025c2:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
900025c6:	2300      	movs	r3, #0
900025c8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
900025cc:	2300      	movs	r3, #0
900025ce:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
900025d2:	2300      	movs	r3, #0
900025d4:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
900025d6:	2300      	movs	r3, #0
900025d8:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
900025da:	2300      	movs	r3, #0
900025dc:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
900025de:	2300      	movs	r3, #0
900025e0:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
900025e4:	2300      	movs	r3, #0
900025e6:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
900025ea:	2301      	movs	r3, #1
900025ec:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
900025f0:	2320      	movs	r3, #32
900025f2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
900025f6:	2301      	movs	r3, #1
900025f8:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
900025fc:	2300      	movs	r3, #0
900025fe:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
90002602:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
90002606:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
90002608:	f44f 4380 	mov.w	r3, #16384	; 0x4000
9000260c:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
9000260e:	2300      	movs	r3, #0
90002610:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
90002614:	2302      	movs	r3, #2
90002616:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
9000261a:	2300      	movs	r3, #0
9000261c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
90002620:	2300      	movs	r3, #0
90002622:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
90002626:	2300      	movs	r3, #0
90002628:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
9000262c:	2301      	movs	r3, #1
9000262e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
90002632:	2300      	movs	r3, #0
90002634:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
90002636:	2301      	movs	r3, #1
90002638:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
9000263c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90002640:	4619      	mov	r1, r3
90002642:	6878      	ldr	r0, [r7, #4]
90002644:	f7ff fde6 	bl	90002214 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
90002648:	2301      	movs	r3, #1
9000264a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
9000264c:	2301      	movs	r3, #1
9000264e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
90002650:	2300      	movs	r3, #0
90002652:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
90002654:	2300      	movs	r3, #0
90002656:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
9000265a:	2300      	movs	r3, #0
9000265c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
9000265e:	2300      	movs	r3, #0
90002660:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
90002662:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
90002666:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
90002668:	2300      	movs	r3, #0
9000266a:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
9000266c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
90002670:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
90002672:	2300      	movs	r3, #0
90002674:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
90002678:	f44f 7306 	mov.w	r3, #536	; 0x218
9000267c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
9000267e:	f107 0308 	add.w	r3, r7, #8
90002682:	4619      	mov	r1, r3
90002684:	6878      	ldr	r0, [r7, #4]
90002686:	f7ff fee1 	bl	9000244c <ETH_SetDMAConfig>
}
9000268a:	bf00      	nop
9000268c:	3790      	adds	r7, #144	; 0x90
9000268e:	46bd      	mov	sp, r7
90002690:	bd80      	pop	{r7, pc}

90002692 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
90002692:	b480      	push	{r7}
90002694:	b085      	sub	sp, #20
90002696:	af00      	add	r7, sp, #0
90002698:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
9000269a:	2300      	movs	r3, #0
9000269c:	60fb      	str	r3, [r7, #12]
9000269e:	e01d      	b.n	900026dc <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
900026a0:	687b      	ldr	r3, [r7, #4]
900026a2:	68d9      	ldr	r1, [r3, #12]
900026a4:	68fa      	ldr	r2, [r7, #12]
900026a6:	4613      	mov	r3, r2
900026a8:	005b      	lsls	r3, r3, #1
900026aa:	4413      	add	r3, r2
900026ac:	00db      	lsls	r3, r3, #3
900026ae:	440b      	add	r3, r1
900026b0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
900026b2:	68bb      	ldr	r3, [r7, #8]
900026b4:	2200      	movs	r2, #0
900026b6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
900026b8:	68bb      	ldr	r3, [r7, #8]
900026ba:	2200      	movs	r2, #0
900026bc:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
900026be:	68bb      	ldr	r3, [r7, #8]
900026c0:	2200      	movs	r2, #0
900026c2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
900026c4:	68bb      	ldr	r3, [r7, #8]
900026c6:	2200      	movs	r2, #0
900026c8:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
900026ca:	68b9      	ldr	r1, [r7, #8]
900026cc:	687b      	ldr	r3, [r7, #4]
900026ce:	68fa      	ldr	r2, [r7, #12]
900026d0:	3206      	adds	r2, #6
900026d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
900026d6:	68fb      	ldr	r3, [r7, #12]
900026d8:	3301      	adds	r3, #1
900026da:	60fb      	str	r3, [r7, #12]
900026dc:	68fb      	ldr	r3, [r7, #12]
900026de:	2b03      	cmp	r3, #3
900026e0:	d9de      	bls.n	900026a0 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
900026e2:	687b      	ldr	r3, [r7, #4]
900026e4:	2200      	movs	r2, #0
900026e6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
900026e8:	687b      	ldr	r3, [r7, #4]
900026ea:	681b      	ldr	r3, [r3, #0]
900026ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
900026f0:	461a      	mov	r2, r3
900026f2:	2303      	movs	r3, #3
900026f4:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
900026f8:	687b      	ldr	r3, [r7, #4]
900026fa:	68da      	ldr	r2, [r3, #12]
900026fc:	687b      	ldr	r3, [r7, #4]
900026fe:	681b      	ldr	r3, [r3, #0]
90002700:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
90002704:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
90002708:	687b      	ldr	r3, [r7, #4]
9000270a:	68da      	ldr	r2, [r3, #12]
9000270c:	687b      	ldr	r3, [r7, #4]
9000270e:	681b      	ldr	r3, [r3, #0]
90002710:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
90002714:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
90002718:	bf00      	nop
9000271a:	3714      	adds	r7, #20
9000271c:	46bd      	mov	sp, r7
9000271e:	f85d 7b04 	ldr.w	r7, [sp], #4
90002722:	4770      	bx	lr

90002724 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
90002724:	b480      	push	{r7}
90002726:	b085      	sub	sp, #20
90002728:	af00      	add	r7, sp, #0
9000272a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
9000272c:	2300      	movs	r3, #0
9000272e:	60fb      	str	r3, [r7, #12]
90002730:	e023      	b.n	9000277a <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
90002732:	687b      	ldr	r3, [r7, #4]
90002734:	6919      	ldr	r1, [r3, #16]
90002736:	68fa      	ldr	r2, [r7, #12]
90002738:	4613      	mov	r3, r2
9000273a:	005b      	lsls	r3, r3, #1
9000273c:	4413      	add	r3, r2
9000273e:	00db      	lsls	r3, r3, #3
90002740:	440b      	add	r3, r1
90002742:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
90002744:	68bb      	ldr	r3, [r7, #8]
90002746:	2200      	movs	r2, #0
90002748:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
9000274a:	68bb      	ldr	r3, [r7, #8]
9000274c:	2200      	movs	r2, #0
9000274e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
90002750:	68bb      	ldr	r3, [r7, #8]
90002752:	2200      	movs	r2, #0
90002754:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
90002756:	68bb      	ldr	r3, [r7, #8]
90002758:	2200      	movs	r2, #0
9000275a:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
9000275c:	68bb      	ldr	r3, [r7, #8]
9000275e:	2200      	movs	r2, #0
90002760:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
90002762:	68bb      	ldr	r3, [r7, #8]
90002764:	2200      	movs	r2, #0
90002766:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
90002768:	68b9      	ldr	r1, [r7, #8]
9000276a:	687b      	ldr	r3, [r7, #4]
9000276c:	68fa      	ldr	r2, [r7, #12]
9000276e:	3212      	adds	r2, #18
90002770:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
90002774:	68fb      	ldr	r3, [r7, #12]
90002776:	3301      	adds	r3, #1
90002778:	60fb      	str	r3, [r7, #12]
9000277a:	68fb      	ldr	r3, [r7, #12]
9000277c:	2b03      	cmp	r3, #3
9000277e:	d9d8      	bls.n	90002732 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
90002780:	687b      	ldr	r3, [r7, #4]
90002782:	2200      	movs	r2, #0
90002784:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
90002786:	687b      	ldr	r3, [r7, #4]
90002788:	2200      	movs	r2, #0
9000278a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
9000278c:	687b      	ldr	r3, [r7, #4]
9000278e:	2200      	movs	r2, #0
90002790:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
90002792:	687b      	ldr	r3, [r7, #4]
90002794:	2200      	movs	r2, #0
90002796:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
90002798:	687b      	ldr	r3, [r7, #4]
9000279a:	2200      	movs	r2, #0
9000279c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
9000279e:	687b      	ldr	r3, [r7, #4]
900027a0:	681b      	ldr	r3, [r3, #0]
900027a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
900027a6:	461a      	mov	r2, r3
900027a8:	2303      	movs	r3, #3
900027aa:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
900027ae:	687b      	ldr	r3, [r7, #4]
900027b0:	691a      	ldr	r2, [r3, #16]
900027b2:	687b      	ldr	r3, [r7, #4]
900027b4:	681b      	ldr	r3, [r3, #0]
900027b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
900027ba:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
900027be:	687b      	ldr	r3, [r7, #4]
900027c0:	691b      	ldr	r3, [r3, #16]
900027c2:	f103 0248 	add.w	r2, r3, #72	; 0x48
900027c6:	687b      	ldr	r3, [r7, #4]
900027c8:	681b      	ldr	r3, [r3, #0]
900027ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
900027ce:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
900027d2:	bf00      	nop
900027d4:	3714      	adds	r7, #20
900027d6:	46bd      	mov	sp, r7
900027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
900027dc:	4770      	bx	lr
	...

900027e0 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
900027e0:	b480      	push	{r7}
900027e2:	b08d      	sub	sp, #52	; 0x34
900027e4:	af00      	add	r7, sp, #0
900027e6:	60f8      	str	r0, [r7, #12]
900027e8:	60b9      	str	r1, [r7, #8]
900027ea:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
900027ec:	68fb      	ldr	r3, [r7, #12]
900027ee:	3318      	adds	r3, #24
900027f0:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
900027f2:	697b      	ldr	r3, [r7, #20]
900027f4:	691b      	ldr	r3, [r3, #16]
900027f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
900027f8:	697b      	ldr	r3, [r7, #20]
900027fa:	691b      	ldr	r3, [r3, #16]
900027fc:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
900027fe:	2300      	movs	r3, #0
90002800:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
90002802:	697b      	ldr	r3, [r7, #20]
90002804:	6afa      	ldr	r2, [r7, #44]	; 0x2c
90002806:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
9000280a:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
9000280c:	68bb      	ldr	r3, [r7, #8]
9000280e:	689b      	ldr	r3, [r3, #8]
90002810:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
90002812:	2300      	movs	r3, #0
90002814:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
90002816:	6a3b      	ldr	r3, [r7, #32]
90002818:	68db      	ldr	r3, [r3, #12]
9000281a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
9000281e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
90002822:	d007      	beq.n	90002834 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
90002824:	697a      	ldr	r2, [r7, #20]
90002826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90002828:	3304      	adds	r3, #4
9000282a:	009b      	lsls	r3, r3, #2
9000282c:	4413      	add	r3, r2
9000282e:	685b      	ldr	r3, [r3, #4]
90002830:	2b00      	cmp	r3, #0
90002832:	d001      	beq.n	90002838 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
90002834:	2302      	movs	r3, #2
90002836:	e259      	b.n	90002cec <ETH_Prepare_Tx_Descriptors+0x50c>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
90002838:	68bb      	ldr	r3, [r7, #8]
9000283a:	681b      	ldr	r3, [r3, #0]
9000283c:	f003 0304 	and.w	r3, r3, #4
90002840:	2b00      	cmp	r3, #0
90002842:	d044      	beq.n	900028ce <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
90002844:	6a3b      	ldr	r3, [r7, #32]
90002846:	68da      	ldr	r2, [r3, #12]
90002848:	4b75      	ldr	r3, [pc, #468]	; (90002a20 <ETH_Prepare_Tx_Descriptors+0x240>)
9000284a:	4013      	ands	r3, r2
9000284c:	68ba      	ldr	r2, [r7, #8]
9000284e:	6a52      	ldr	r2, [r2, #36]	; 0x24
90002850:	431a      	orrs	r2, r3
90002852:	6a3b      	ldr	r3, [r7, #32]
90002854:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
90002856:	6a3b      	ldr	r3, [r7, #32]
90002858:	68db      	ldr	r3, [r3, #12]
9000285a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
9000285e:	6a3b      	ldr	r3, [r7, #32]
90002860:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
90002862:	68fb      	ldr	r3, [r7, #12]
90002864:	681b      	ldr	r3, [r3, #0]
90002866:	6e1a      	ldr	r2, [r3, #96]	; 0x60
90002868:	68fb      	ldr	r3, [r7, #12]
9000286a:	681b      	ldr	r3, [r3, #0]
9000286c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
90002870:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
90002872:	68bb      	ldr	r3, [r7, #8]
90002874:	681b      	ldr	r3, [r3, #0]
90002876:	f003 0308 	and.w	r3, r3, #8
9000287a:	2b00      	cmp	r3, #0
9000287c:	d027      	beq.n	900028ce <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
9000287e:	6a3b      	ldr	r3, [r7, #32]
90002880:	689b      	ldr	r3, [r3, #8]
90002882:	b29a      	uxth	r2, r3
90002884:	68bb      	ldr	r3, [r7, #8]
90002886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90002888:	041b      	lsls	r3, r3, #16
9000288a:	431a      	orrs	r2, r3
9000288c:	6a3b      	ldr	r3, [r7, #32]
9000288e:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
90002890:	6a3b      	ldr	r3, [r7, #32]
90002892:	68db      	ldr	r3, [r3, #12]
90002894:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
90002898:	6a3b      	ldr	r3, [r7, #32]
9000289a:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
9000289c:	6a3b      	ldr	r3, [r7, #32]
9000289e:	68db      	ldr	r3, [r3, #12]
900028a0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
900028a4:	68bb      	ldr	r3, [r7, #8]
900028a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900028a8:	431a      	orrs	r2, r3
900028aa:	6a3b      	ldr	r3, [r7, #32]
900028ac:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
900028ae:	68fb      	ldr	r3, [r7, #12]
900028b0:	681b      	ldr	r3, [r3, #0]
900028b2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
900028b4:	68fb      	ldr	r3, [r7, #12]
900028b6:	681b      	ldr	r3, [r3, #0]
900028b8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
900028bc:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
900028be:	68fb      	ldr	r3, [r7, #12]
900028c0:	681b      	ldr	r3, [r3, #0]
900028c2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
900028c4:	68fb      	ldr	r3, [r7, #12]
900028c6:	681b      	ldr	r3, [r3, #0]
900028c8:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
900028cc:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
900028ce:	68bb      	ldr	r3, [r7, #8]
900028d0:	681b      	ldr	r3, [r3, #0]
900028d2:	f003 0310 	and.w	r3, r3, #16
900028d6:	2b00      	cmp	r3, #0
900028d8:	d00e      	beq.n	900028f8 <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
900028da:	6a3b      	ldr	r3, [r7, #32]
900028dc:	689a      	ldr	r2, [r3, #8]
900028de:	4b51      	ldr	r3, [pc, #324]	; (90002a24 <ETH_Prepare_Tx_Descriptors+0x244>)
900028e0:	4013      	ands	r3, r2
900028e2:	68ba      	ldr	r2, [r7, #8]
900028e4:	6992      	ldr	r2, [r2, #24]
900028e6:	431a      	orrs	r2, r3
900028e8:	6a3b      	ldr	r3, [r7, #32]
900028ea:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
900028ec:	6a3b      	ldr	r3, [r7, #32]
900028ee:	68db      	ldr	r3, [r3, #12]
900028f0:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
900028f4:	6a3b      	ldr	r3, [r7, #32]
900028f6:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
900028f8:	68bb      	ldr	r3, [r7, #8]
900028fa:	681b      	ldr	r3, [r3, #0]
900028fc:	f003 0304 	and.w	r3, r3, #4
90002900:	2b00      	cmp	r3, #0
90002902:	d105      	bne.n	90002910 <ETH_Prepare_Tx_Descriptors+0x130>
      || (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET))
90002904:	68bb      	ldr	r3, [r7, #8]
90002906:	681b      	ldr	r3, [r3, #0]
90002908:	f003 0310 	and.w	r3, r3, #16
9000290c:	2b00      	cmp	r3, #0
9000290e:	d036      	beq.n	9000297e <ETH_Prepare_Tx_Descriptors+0x19e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
90002910:	6a3b      	ldr	r3, [r7, #32]
90002912:	68db      	ldr	r3, [r3, #12]
90002914:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
90002918:	6a3b      	ldr	r3, [r7, #32]
9000291a:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
9000291c:	f3bf 8f5f 	dmb	sy
}
90002920:	bf00      	nop
    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
90002922:	6a3b      	ldr	r3, [r7, #32]
90002924:	68db      	ldr	r3, [r3, #12]
90002926:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
9000292a:	6a3b      	ldr	r3, [r7, #32]
9000292c:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
9000292e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90002930:	3301      	adds	r3, #1
90002932:	62fb      	str	r3, [r7, #44]	; 0x2c
90002934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90002936:	2b03      	cmp	r3, #3
90002938:	d902      	bls.n	90002940 <ETH_Prepare_Tx_Descriptors+0x160>
9000293a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000293c:	3b04      	subs	r3, #4
9000293e:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
90002940:	697b      	ldr	r3, [r7, #20]
90002942:	6afa      	ldr	r2, [r7, #44]	; 0x2c
90002944:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
90002948:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
9000294a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000294c:	3301      	adds	r3, #1
9000294e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
90002950:	6a3b      	ldr	r3, [r7, #32]
90002952:	68db      	ldr	r3, [r3, #12]
90002954:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
90002958:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
9000295c:	d10f      	bne.n	9000297e <ETH_Prepare_Tx_Descriptors+0x19e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
9000295e:	697b      	ldr	r3, [r7, #20]
90002960:	693a      	ldr	r2, [r7, #16]
90002962:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
90002966:	623b      	str	r3, [r7, #32]
  __ASM volatile ("dmb 0xF":::"memory");
90002968:	f3bf 8f5f 	dmb	sy
}
9000296c:	bf00      	nop
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
9000296e:	6a3b      	ldr	r3, [r7, #32]
90002970:	68db      	ldr	r3, [r3, #12]
90002972:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
90002976:	6a3b      	ldr	r3, [r7, #32]
90002978:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
9000297a:	2302      	movs	r3, #2
9000297c:	e1b6      	b.n	90002cec <ETH_Prepare_Tx_Descriptors+0x50c>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
9000297e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90002980:	3301      	adds	r3, #1
90002982:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
90002984:	69fb      	ldr	r3, [r7, #28]
90002986:	681b      	ldr	r3, [r3, #0]
90002988:	461a      	mov	r2, r3
9000298a:	6a3b      	ldr	r3, [r7, #32]
9000298c:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
9000298e:	6a3b      	ldr	r3, [r7, #32]
90002990:	689a      	ldr	r2, [r3, #8]
90002992:	4b24      	ldr	r3, [pc, #144]	; (90002a24 <ETH_Prepare_Tx_Descriptors+0x244>)
90002994:	4013      	ands	r3, r2
90002996:	69fa      	ldr	r2, [r7, #28]
90002998:	6852      	ldr	r2, [r2, #4]
9000299a:	431a      	orrs	r2, r3
9000299c:	6a3b      	ldr	r3, [r7, #32]
9000299e:	609a      	str	r2, [r3, #8]

  if (txbuffer->next != NULL)
900029a0:	69fb      	ldr	r3, [r7, #28]
900029a2:	689b      	ldr	r3, [r3, #8]
900029a4:	2b00      	cmp	r3, #0
900029a6:	d012      	beq.n	900029ce <ETH_Prepare_Tx_Descriptors+0x1ee>
  {
    txbuffer = txbuffer->next;
900029a8:	69fb      	ldr	r3, [r7, #28]
900029aa:	689b      	ldr	r3, [r3, #8]
900029ac:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
900029ae:	69fb      	ldr	r3, [r7, #28]
900029b0:	681b      	ldr	r3, [r3, #0]
900029b2:	461a      	mov	r2, r3
900029b4:	6a3b      	ldr	r3, [r7, #32]
900029b6:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
900029b8:	6a3b      	ldr	r3, [r7, #32]
900029ba:	689a      	ldr	r2, [r3, #8]
900029bc:	4b1a      	ldr	r3, [pc, #104]	; (90002a28 <ETH_Prepare_Tx_Descriptors+0x248>)
900029be:	4013      	ands	r3, r2
900029c0:	69fa      	ldr	r2, [r7, #28]
900029c2:	6852      	ldr	r2, [r2, #4]
900029c4:	0412      	lsls	r2, r2, #16
900029c6:	431a      	orrs	r2, r3
900029c8:	6a3b      	ldr	r3, [r7, #32]
900029ca:	609a      	str	r2, [r3, #8]
900029cc:	e008      	b.n	900029e0 <ETH_Prepare_Tx_Descriptors+0x200>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0);
900029ce:	6a3b      	ldr	r3, [r7, #32]
900029d0:	2200      	movs	r2, #0
900029d2:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
900029d4:	6a3b      	ldr	r3, [r7, #32]
900029d6:	689a      	ldr	r2, [r3, #8]
900029d8:	4b13      	ldr	r3, [pc, #76]	; (90002a28 <ETH_Prepare_Tx_Descriptors+0x248>)
900029da:	4013      	ands	r3, r2
900029dc:	6a3a      	ldr	r2, [r7, #32]
900029de:	6093      	str	r3, [r2, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
900029e0:	68bb      	ldr	r3, [r7, #8]
900029e2:	681b      	ldr	r3, [r3, #0]
900029e4:	f003 0310 	and.w	r3, r3, #16
900029e8:	2b00      	cmp	r3, #0
900029ea:	d021      	beq.n	90002a30 <ETH_Prepare_Tx_Descriptors+0x250>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
900029ec:	6a3b      	ldr	r3, [r7, #32]
900029ee:	68db      	ldr	r3, [r3, #12]
900029f0:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
900029f4:	68bb      	ldr	r3, [r7, #8]
900029f6:	6a1b      	ldr	r3, [r3, #32]
900029f8:	04db      	lsls	r3, r3, #19
900029fa:	431a      	orrs	r2, r3
900029fc:	6a3b      	ldr	r3, [r7, #32]
900029fe:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
90002a00:	6a3b      	ldr	r3, [r7, #32]
90002a02:	68da      	ldr	r2, [r3, #12]
90002a04:	4b09      	ldr	r3, [pc, #36]	; (90002a2c <ETH_Prepare_Tx_Descriptors+0x24c>)
90002a06:	4013      	ands	r3, r2
90002a08:	68ba      	ldr	r2, [r7, #8]
90002a0a:	69d2      	ldr	r2, [r2, #28]
90002a0c:	431a      	orrs	r2, r3
90002a0e:	6a3b      	ldr	r3, [r7, #32]
90002a10:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
90002a12:	6a3b      	ldr	r3, [r7, #32]
90002a14:	68db      	ldr	r3, [r3, #12]
90002a16:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
90002a1a:	6a3b      	ldr	r3, [r7, #32]
90002a1c:	60da      	str	r2, [r3, #12]
90002a1e:	e02e      	b.n	90002a7e <ETH_Prepare_Tx_Descriptors+0x29e>
90002a20:	ffff0000 	.word	0xffff0000
90002a24:	ffffc000 	.word	0xffffc000
90002a28:	c000ffff 	.word	0xc000ffff
90002a2c:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
90002a30:	6a3b      	ldr	r3, [r7, #32]
90002a32:	68da      	ldr	r2, [r3, #12]
90002a34:	4b7b      	ldr	r3, [pc, #492]	; (90002c24 <ETH_Prepare_Tx_Descriptors+0x444>)
90002a36:	4013      	ands	r3, r2
90002a38:	68ba      	ldr	r2, [r7, #8]
90002a3a:	6852      	ldr	r2, [r2, #4]
90002a3c:	431a      	orrs	r2, r3
90002a3e:	6a3b      	ldr	r3, [r7, #32]
90002a40:	60da      	str	r2, [r3, #12]

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
90002a42:	68bb      	ldr	r3, [r7, #8]
90002a44:	681b      	ldr	r3, [r3, #0]
90002a46:	f003 0301 	and.w	r3, r3, #1
90002a4a:	2b00      	cmp	r3, #0
90002a4c:	d008      	beq.n	90002a60 <ETH_Prepare_Tx_Descriptors+0x280>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
90002a4e:	6a3b      	ldr	r3, [r7, #32]
90002a50:	68db      	ldr	r3, [r3, #12]
90002a52:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
90002a56:	68bb      	ldr	r3, [r7, #8]
90002a58:	695b      	ldr	r3, [r3, #20]
90002a5a:	431a      	orrs	r2, r3
90002a5c:	6a3b      	ldr	r3, [r7, #32]
90002a5e:	60da      	str	r2, [r3, #12]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
90002a60:	68bb      	ldr	r3, [r7, #8]
90002a62:	681b      	ldr	r3, [r3, #0]
90002a64:	f003 0320 	and.w	r3, r3, #32
90002a68:	2b00      	cmp	r3, #0
90002a6a:	d008      	beq.n	90002a7e <ETH_Prepare_Tx_Descriptors+0x29e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
90002a6c:	6a3b      	ldr	r3, [r7, #32]
90002a6e:	68db      	ldr	r3, [r3, #12]
90002a70:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
90002a74:	68bb      	ldr	r3, [r7, #8]
90002a76:	691b      	ldr	r3, [r3, #16]
90002a78:	431a      	orrs	r2, r3
90002a7a:	6a3b      	ldr	r3, [r7, #32]
90002a7c:	60da      	str	r2, [r3, #12]
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
90002a7e:	68bb      	ldr	r3, [r7, #8]
90002a80:	681b      	ldr	r3, [r3, #0]
90002a82:	f003 0304 	and.w	r3, r3, #4
90002a86:	2b00      	cmp	r3, #0
90002a88:	d008      	beq.n	90002a9c <ETH_Prepare_Tx_Descriptors+0x2bc>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
90002a8a:	6a3b      	ldr	r3, [r7, #32]
90002a8c:	689b      	ldr	r3, [r3, #8]
90002a8e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
90002a92:	68bb      	ldr	r3, [r7, #8]
90002a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90002a96:	431a      	orrs	r2, r3
90002a98:	6a3b      	ldr	r3, [r7, #32]
90002a9a:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
90002a9c:	6a3b      	ldr	r3, [r7, #32]
90002a9e:	68db      	ldr	r3, [r3, #12]
90002aa0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
90002aa4:	6a3b      	ldr	r3, [r7, #32]
90002aa6:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
90002aa8:	6a3b      	ldr	r3, [r7, #32]
90002aaa:	68db      	ldr	r3, [r3, #12]
90002aac:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
90002ab0:	6a3b      	ldr	r3, [r7, #32]
90002ab2:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
90002ab4:	f3bf 8f5f 	dmb	sy
}
90002ab8:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
90002aba:	6a3b      	ldr	r3, [r7, #32]
90002abc:	68db      	ldr	r3, [r3, #12]
90002abe:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
90002ac2:	6a3b      	ldr	r3, [r7, #32]
90002ac4:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
90002ac6:	68bb      	ldr	r3, [r7, #8]
90002ac8:	681b      	ldr	r3, [r3, #0]
90002aca:	f003 0302 	and.w	r3, r3, #2
90002ace:	2b00      	cmp	r3, #0
90002ad0:	f000 80da 	beq.w	90002c88 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
90002ad4:	6a3b      	ldr	r3, [r7, #32]
90002ad6:	68db      	ldr	r3, [r3, #12]
90002ad8:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
90002adc:	68bb      	ldr	r3, [r7, #8]
90002ade:	68db      	ldr	r3, [r3, #12]
90002ae0:	431a      	orrs	r2, r3
90002ae2:	6a3b      	ldr	r3, [r7, #32]
90002ae4:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
90002ae6:	e0cf      	b.n	90002c88 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
90002ae8:	6a3b      	ldr	r3, [r7, #32]
90002aea:	68db      	ldr	r3, [r3, #12]
90002aec:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
90002af0:	6a3b      	ldr	r3, [r7, #32]
90002af2:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
90002af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90002af6:	3301      	adds	r3, #1
90002af8:	62fb      	str	r3, [r7, #44]	; 0x2c
90002afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90002afc:	2b03      	cmp	r3, #3
90002afe:	d902      	bls.n	90002b06 <ETH_Prepare_Tx_Descriptors+0x326>
90002b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90002b02:	3b04      	subs	r3, #4
90002b04:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
90002b06:	697b      	ldr	r3, [r7, #20]
90002b08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
90002b0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
90002b0e:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
90002b10:	6a3b      	ldr	r3, [r7, #32]
90002b12:	68db      	ldr	r3, [r3, #12]
90002b14:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
90002b18:	6a3b      	ldr	r3, [r7, #32]
90002b1a:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
90002b1c:	6a3b      	ldr	r3, [r7, #32]
90002b1e:	68db      	ldr	r3, [r3, #12]
90002b20:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
90002b24:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
90002b28:	d007      	beq.n	90002b3a <ETH_Prepare_Tx_Descriptors+0x35a>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
90002b2a:	697a      	ldr	r2, [r7, #20]
90002b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90002b2e:	3304      	adds	r3, #4
90002b30:	009b      	lsls	r3, r3, #2
90002b32:	4413      	add	r3, r2
90002b34:	685b      	ldr	r3, [r3, #4]
90002b36:	2b00      	cmp	r3, #0
90002b38:	d029      	beq.n	90002b8e <ETH_Prepare_Tx_Descriptors+0x3ae>
    {
      descidx = firstdescidx;
90002b3a:	693b      	ldr	r3, [r7, #16]
90002b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
90002b3e:	697b      	ldr	r3, [r7, #20]
90002b40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
90002b42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
90002b46:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
90002b48:	2300      	movs	r3, #0
90002b4a:	62bb      	str	r3, [r7, #40]	; 0x28
90002b4c:	e019      	b.n	90002b82 <ETH_Prepare_Tx_Descriptors+0x3a2>
  __ASM volatile ("dmb 0xF":::"memory");
90002b4e:	f3bf 8f5f 	dmb	sy
}
90002b52:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
90002b54:	6a3b      	ldr	r3, [r7, #32]
90002b56:	68db      	ldr	r3, [r3, #12]
90002b58:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
90002b5c:	6a3b      	ldr	r3, [r7, #32]
90002b5e:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
90002b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90002b62:	3301      	adds	r3, #1
90002b64:	62fb      	str	r3, [r7, #44]	; 0x2c
90002b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90002b68:	2b03      	cmp	r3, #3
90002b6a:	d902      	bls.n	90002b72 <ETH_Prepare_Tx_Descriptors+0x392>
90002b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90002b6e:	3b04      	subs	r3, #4
90002b70:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
90002b72:	697b      	ldr	r3, [r7, #20]
90002b74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
90002b76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
90002b7a:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
90002b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
90002b7e:	3301      	adds	r3, #1
90002b80:	62bb      	str	r3, [r7, #40]	; 0x28
90002b82:	6aba      	ldr	r2, [r7, #40]	; 0x28
90002b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90002b86:	429a      	cmp	r2, r3
90002b88:	d3e1      	bcc.n	90002b4e <ETH_Prepare_Tx_Descriptors+0x36e>
      }

      return HAL_ETH_ERROR_BUSY;
90002b8a:	2302      	movs	r3, #2
90002b8c:	e0ae      	b.n	90002cec <ETH_Prepare_Tx_Descriptors+0x50c>
    }

    descnbr += 1U;
90002b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90002b90:	3301      	adds	r3, #1
90002b92:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
90002b94:	69fb      	ldr	r3, [r7, #28]
90002b96:	689b      	ldr	r3, [r3, #8]
90002b98:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
90002b9a:	69fb      	ldr	r3, [r7, #28]
90002b9c:	681b      	ldr	r3, [r3, #0]
90002b9e:	461a      	mov	r2, r3
90002ba0:	6a3b      	ldr	r3, [r7, #32]
90002ba2:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
90002ba4:	6a3b      	ldr	r3, [r7, #32]
90002ba6:	689a      	ldr	r2, [r3, #8]
90002ba8:	4b1f      	ldr	r3, [pc, #124]	; (90002c28 <ETH_Prepare_Tx_Descriptors+0x448>)
90002baa:	4013      	ands	r3, r2
90002bac:	69fa      	ldr	r2, [r7, #28]
90002bae:	6852      	ldr	r2, [r2, #4]
90002bb0:	431a      	orrs	r2, r3
90002bb2:	6a3b      	ldr	r3, [r7, #32]
90002bb4:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
90002bb6:	69fb      	ldr	r3, [r7, #28]
90002bb8:	689b      	ldr	r3, [r3, #8]
90002bba:	2b00      	cmp	r3, #0
90002bbc:	d012      	beq.n	90002be4 <ETH_Prepare_Tx_Descriptors+0x404>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
90002bbe:	69fb      	ldr	r3, [r7, #28]
90002bc0:	689b      	ldr	r3, [r3, #8]
90002bc2:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
90002bc4:	69fb      	ldr	r3, [r7, #28]
90002bc6:	681b      	ldr	r3, [r3, #0]
90002bc8:	461a      	mov	r2, r3
90002bca:	6a3b      	ldr	r3, [r7, #32]
90002bcc:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
90002bce:	6a3b      	ldr	r3, [r7, #32]
90002bd0:	689a      	ldr	r2, [r3, #8]
90002bd2:	4b16      	ldr	r3, [pc, #88]	; (90002c2c <ETH_Prepare_Tx_Descriptors+0x44c>)
90002bd4:	4013      	ands	r3, r2
90002bd6:	69fa      	ldr	r2, [r7, #28]
90002bd8:	6852      	ldr	r2, [r2, #4]
90002bda:	0412      	lsls	r2, r2, #16
90002bdc:	431a      	orrs	r2, r3
90002bde:	6a3b      	ldr	r3, [r7, #32]
90002be0:	609a      	str	r2, [r3, #8]
90002be2:	e008      	b.n	90002bf6 <ETH_Prepare_Tx_Descriptors+0x416>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
90002be4:	6a3b      	ldr	r3, [r7, #32]
90002be6:	2200      	movs	r2, #0
90002be8:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
90002bea:	6a3b      	ldr	r3, [r7, #32]
90002bec:	689a      	ldr	r2, [r3, #8]
90002bee:	4b0f      	ldr	r3, [pc, #60]	; (90002c2c <ETH_Prepare_Tx_Descriptors+0x44c>)
90002bf0:	4013      	ands	r3, r2
90002bf2:	6a3a      	ldr	r2, [r7, #32]
90002bf4:	6093      	str	r3, [r2, #8]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
90002bf6:	68bb      	ldr	r3, [r7, #8]
90002bf8:	681b      	ldr	r3, [r3, #0]
90002bfa:	f003 0310 	and.w	r3, r3, #16
90002bfe:	2b00      	cmp	r3, #0
90002c00:	d018      	beq.n	90002c34 <ETH_Prepare_Tx_Descriptors+0x454>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
90002c02:	6a3b      	ldr	r3, [r7, #32]
90002c04:	68da      	ldr	r2, [r3, #12]
90002c06:	4b0a      	ldr	r3, [pc, #40]	; (90002c30 <ETH_Prepare_Tx_Descriptors+0x450>)
90002c08:	4013      	ands	r3, r2
90002c0a:	68ba      	ldr	r2, [r7, #8]
90002c0c:	69d2      	ldr	r2, [r2, #28]
90002c0e:	431a      	orrs	r2, r3
90002c10:	6a3b      	ldr	r3, [r7, #32]
90002c12:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
90002c14:	6a3b      	ldr	r3, [r7, #32]
90002c16:	68db      	ldr	r3, [r3, #12]
90002c18:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
90002c1c:	6a3b      	ldr	r3, [r7, #32]
90002c1e:	60da      	str	r2, [r3, #12]
90002c20:	e020      	b.n	90002c64 <ETH_Prepare_Tx_Descriptors+0x484>
90002c22:	bf00      	nop
90002c24:	ffff8000 	.word	0xffff8000
90002c28:	ffffc000 	.word	0xffffc000
90002c2c:	c000ffff 	.word	0xc000ffff
90002c30:	fffc0000 	.word	0xfffc0000
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
90002c34:	6a3b      	ldr	r3, [r7, #32]
90002c36:	68da      	ldr	r2, [r3, #12]
90002c38:	4b2f      	ldr	r3, [pc, #188]	; (90002cf8 <ETH_Prepare_Tx_Descriptors+0x518>)
90002c3a:	4013      	ands	r3, r2
90002c3c:	68ba      	ldr	r2, [r7, #8]
90002c3e:	6852      	ldr	r2, [r2, #4]
90002c40:	431a      	orrs	r2, r3
90002c42:	6a3b      	ldr	r3, [r7, #32]
90002c44:	60da      	str	r2, [r3, #12]

      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
90002c46:	68bb      	ldr	r3, [r7, #8]
90002c48:	681b      	ldr	r3, [r3, #0]
90002c4a:	f003 0301 	and.w	r3, r3, #1
90002c4e:	2b00      	cmp	r3, #0
90002c50:	d008      	beq.n	90002c64 <ETH_Prepare_Tx_Descriptors+0x484>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
90002c52:	6a3b      	ldr	r3, [r7, #32]
90002c54:	68db      	ldr	r3, [r3, #12]
90002c56:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
90002c5a:	68bb      	ldr	r3, [r7, #8]
90002c5c:	695b      	ldr	r3, [r3, #20]
90002c5e:	431a      	orrs	r2, r3
90002c60:	6a3b      	ldr	r3, [r7, #32]
90002c62:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
90002c64:	69bb      	ldr	r3, [r7, #24]
90002c66:	3301      	adds	r3, #1
90002c68:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
90002c6a:	f3bf 8f5f 	dmb	sy
}
90002c6e:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
90002c70:	6a3b      	ldr	r3, [r7, #32]
90002c72:	68db      	ldr	r3, [r3, #12]
90002c74:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
90002c78:	6a3b      	ldr	r3, [r7, #32]
90002c7a:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
90002c7c:	6a3b      	ldr	r3, [r7, #32]
90002c7e:	68db      	ldr	r3, [r3, #12]
90002c80:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
90002c84:	6a3b      	ldr	r3, [r7, #32]
90002c86:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
90002c88:	69fb      	ldr	r3, [r7, #28]
90002c8a:	689b      	ldr	r3, [r3, #8]
90002c8c:	2b00      	cmp	r3, #0
90002c8e:	f47f af2b 	bne.w	90002ae8 <ETH_Prepare_Tx_Descriptors+0x308>
  }

  if (ItMode != ((uint32_t)RESET))
90002c92:	687b      	ldr	r3, [r7, #4]
90002c94:	2b00      	cmp	r3, #0
90002c96:	d006      	beq.n	90002ca6 <ETH_Prepare_Tx_Descriptors+0x4c6>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
90002c98:	6a3b      	ldr	r3, [r7, #32]
90002c9a:	689b      	ldr	r3, [r3, #8]
90002c9c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
90002ca0:	6a3b      	ldr	r3, [r7, #32]
90002ca2:	609a      	str	r2, [r3, #8]
90002ca4:	e005      	b.n	90002cb2 <ETH_Prepare_Tx_Descriptors+0x4d2>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
90002ca6:	6a3b      	ldr	r3, [r7, #32]
90002ca8:	689b      	ldr	r3, [r3, #8]
90002caa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
90002cae:	6a3b      	ldr	r3, [r7, #32]
90002cb0:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
90002cb2:	6a3b      	ldr	r3, [r7, #32]
90002cb4:	68db      	ldr	r3, [r3, #12]
90002cb6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
90002cba:	6a3b      	ldr	r3, [r7, #32]
90002cbc:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
90002cbe:	697b      	ldr	r3, [r7, #20]
90002cc0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
90002cc2:	6979      	ldr	r1, [r7, #20]
90002cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90002cc6:	3304      	adds	r3, #4
90002cc8:	009b      	lsls	r3, r3, #2
90002cca:	440b      	add	r3, r1
90002ccc:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
90002cce:	697b      	ldr	r3, [r7, #20]
90002cd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
90002cd2:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
90002cd4:	b672      	cpsid	i
}
90002cd6:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
90002cd8:	697b      	ldr	r3, [r7, #20]
90002cda:	6a9a      	ldr	r2, [r3, #40]	; 0x28
90002cdc:	69bb      	ldr	r3, [r7, #24]
90002cde:	4413      	add	r3, r2
90002ce0:	1c5a      	adds	r2, r3, #1
90002ce2:	697b      	ldr	r3, [r7, #20]
90002ce4:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
90002ce6:	b662      	cpsie	i
}
90002ce8:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
90002cea:	2300      	movs	r3, #0
}
90002cec:	4618      	mov	r0, r3
90002cee:	3734      	adds	r7, #52	; 0x34
90002cf0:	46bd      	mov	sp, r7
90002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
90002cf6:	4770      	bx	lr
90002cf8:	ffff8000 	.word	0xffff8000

90002cfc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
90002cfc:	b480      	push	{r7}
90002cfe:	b089      	sub	sp, #36	; 0x24
90002d00:	af00      	add	r7, sp, #0
90002d02:	6078      	str	r0, [r7, #4]
90002d04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
90002d06:	2300      	movs	r3, #0
90002d08:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
90002d0a:	4b89      	ldr	r3, [pc, #548]	; (90002f30 <HAL_GPIO_Init+0x234>)
90002d0c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
90002d0e:	e194      	b.n	9000303a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
90002d10:	683b      	ldr	r3, [r7, #0]
90002d12:	681a      	ldr	r2, [r3, #0]
90002d14:	2101      	movs	r1, #1
90002d16:	69fb      	ldr	r3, [r7, #28]
90002d18:	fa01 f303 	lsl.w	r3, r1, r3
90002d1c:	4013      	ands	r3, r2
90002d1e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
90002d20:	693b      	ldr	r3, [r7, #16]
90002d22:	2b00      	cmp	r3, #0
90002d24:	f000 8186 	beq.w	90003034 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
90002d28:	683b      	ldr	r3, [r7, #0]
90002d2a:	685b      	ldr	r3, [r3, #4]
90002d2c:	f003 0303 	and.w	r3, r3, #3
90002d30:	2b01      	cmp	r3, #1
90002d32:	d005      	beq.n	90002d40 <HAL_GPIO_Init+0x44>
90002d34:	683b      	ldr	r3, [r7, #0]
90002d36:	685b      	ldr	r3, [r3, #4]
90002d38:	f003 0303 	and.w	r3, r3, #3
90002d3c:	2b02      	cmp	r3, #2
90002d3e:	d130      	bne.n	90002da2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
90002d40:	687b      	ldr	r3, [r7, #4]
90002d42:	689b      	ldr	r3, [r3, #8]
90002d44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
90002d46:	69fb      	ldr	r3, [r7, #28]
90002d48:	005b      	lsls	r3, r3, #1
90002d4a:	2203      	movs	r2, #3
90002d4c:	fa02 f303 	lsl.w	r3, r2, r3
90002d50:	43db      	mvns	r3, r3
90002d52:	69ba      	ldr	r2, [r7, #24]
90002d54:	4013      	ands	r3, r2
90002d56:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
90002d58:	683b      	ldr	r3, [r7, #0]
90002d5a:	68da      	ldr	r2, [r3, #12]
90002d5c:	69fb      	ldr	r3, [r7, #28]
90002d5e:	005b      	lsls	r3, r3, #1
90002d60:	fa02 f303 	lsl.w	r3, r2, r3
90002d64:	69ba      	ldr	r2, [r7, #24]
90002d66:	4313      	orrs	r3, r2
90002d68:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
90002d6a:	687b      	ldr	r3, [r7, #4]
90002d6c:	69ba      	ldr	r2, [r7, #24]
90002d6e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
90002d70:	687b      	ldr	r3, [r7, #4]
90002d72:	685b      	ldr	r3, [r3, #4]
90002d74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
90002d76:	2201      	movs	r2, #1
90002d78:	69fb      	ldr	r3, [r7, #28]
90002d7a:	fa02 f303 	lsl.w	r3, r2, r3
90002d7e:	43db      	mvns	r3, r3
90002d80:	69ba      	ldr	r2, [r7, #24]
90002d82:	4013      	ands	r3, r2
90002d84:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
90002d86:	683b      	ldr	r3, [r7, #0]
90002d88:	685b      	ldr	r3, [r3, #4]
90002d8a:	091b      	lsrs	r3, r3, #4
90002d8c:	f003 0201 	and.w	r2, r3, #1
90002d90:	69fb      	ldr	r3, [r7, #28]
90002d92:	fa02 f303 	lsl.w	r3, r2, r3
90002d96:	69ba      	ldr	r2, [r7, #24]
90002d98:	4313      	orrs	r3, r2
90002d9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
90002d9c:	687b      	ldr	r3, [r7, #4]
90002d9e:	69ba      	ldr	r2, [r7, #24]
90002da0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
90002da2:	683b      	ldr	r3, [r7, #0]
90002da4:	685b      	ldr	r3, [r3, #4]
90002da6:	f003 0303 	and.w	r3, r3, #3
90002daa:	2b03      	cmp	r3, #3
90002dac:	d017      	beq.n	90002dde <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
90002dae:	687b      	ldr	r3, [r7, #4]
90002db0:	68db      	ldr	r3, [r3, #12]
90002db2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
90002db4:	69fb      	ldr	r3, [r7, #28]
90002db6:	005b      	lsls	r3, r3, #1
90002db8:	2203      	movs	r2, #3
90002dba:	fa02 f303 	lsl.w	r3, r2, r3
90002dbe:	43db      	mvns	r3, r3
90002dc0:	69ba      	ldr	r2, [r7, #24]
90002dc2:	4013      	ands	r3, r2
90002dc4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
90002dc6:	683b      	ldr	r3, [r7, #0]
90002dc8:	689a      	ldr	r2, [r3, #8]
90002dca:	69fb      	ldr	r3, [r7, #28]
90002dcc:	005b      	lsls	r3, r3, #1
90002dce:	fa02 f303 	lsl.w	r3, r2, r3
90002dd2:	69ba      	ldr	r2, [r7, #24]
90002dd4:	4313      	orrs	r3, r2
90002dd6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
90002dd8:	687b      	ldr	r3, [r7, #4]
90002dda:	69ba      	ldr	r2, [r7, #24]
90002ddc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
90002dde:	683b      	ldr	r3, [r7, #0]
90002de0:	685b      	ldr	r3, [r3, #4]
90002de2:	f003 0303 	and.w	r3, r3, #3
90002de6:	2b02      	cmp	r3, #2
90002de8:	d123      	bne.n	90002e32 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
90002dea:	69fb      	ldr	r3, [r7, #28]
90002dec:	08da      	lsrs	r2, r3, #3
90002dee:	687b      	ldr	r3, [r7, #4]
90002df0:	3208      	adds	r2, #8
90002df2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
90002df6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
90002df8:	69fb      	ldr	r3, [r7, #28]
90002dfa:	f003 0307 	and.w	r3, r3, #7
90002dfe:	009b      	lsls	r3, r3, #2
90002e00:	220f      	movs	r2, #15
90002e02:	fa02 f303 	lsl.w	r3, r2, r3
90002e06:	43db      	mvns	r3, r3
90002e08:	69ba      	ldr	r2, [r7, #24]
90002e0a:	4013      	ands	r3, r2
90002e0c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
90002e0e:	683b      	ldr	r3, [r7, #0]
90002e10:	691a      	ldr	r2, [r3, #16]
90002e12:	69fb      	ldr	r3, [r7, #28]
90002e14:	f003 0307 	and.w	r3, r3, #7
90002e18:	009b      	lsls	r3, r3, #2
90002e1a:	fa02 f303 	lsl.w	r3, r2, r3
90002e1e:	69ba      	ldr	r2, [r7, #24]
90002e20:	4313      	orrs	r3, r2
90002e22:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
90002e24:	69fb      	ldr	r3, [r7, #28]
90002e26:	08da      	lsrs	r2, r3, #3
90002e28:	687b      	ldr	r3, [r7, #4]
90002e2a:	3208      	adds	r2, #8
90002e2c:	69b9      	ldr	r1, [r7, #24]
90002e2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
90002e32:	687b      	ldr	r3, [r7, #4]
90002e34:	681b      	ldr	r3, [r3, #0]
90002e36:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
90002e38:	69fb      	ldr	r3, [r7, #28]
90002e3a:	005b      	lsls	r3, r3, #1
90002e3c:	2203      	movs	r2, #3
90002e3e:	fa02 f303 	lsl.w	r3, r2, r3
90002e42:	43db      	mvns	r3, r3
90002e44:	69ba      	ldr	r2, [r7, #24]
90002e46:	4013      	ands	r3, r2
90002e48:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
90002e4a:	683b      	ldr	r3, [r7, #0]
90002e4c:	685b      	ldr	r3, [r3, #4]
90002e4e:	f003 0203 	and.w	r2, r3, #3
90002e52:	69fb      	ldr	r3, [r7, #28]
90002e54:	005b      	lsls	r3, r3, #1
90002e56:	fa02 f303 	lsl.w	r3, r2, r3
90002e5a:	69ba      	ldr	r2, [r7, #24]
90002e5c:	4313      	orrs	r3, r2
90002e5e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
90002e60:	687b      	ldr	r3, [r7, #4]
90002e62:	69ba      	ldr	r2, [r7, #24]
90002e64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
90002e66:	683b      	ldr	r3, [r7, #0]
90002e68:	685b      	ldr	r3, [r3, #4]
90002e6a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
90002e6e:	2b00      	cmp	r3, #0
90002e70:	f000 80e0 	beq.w	90003034 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
90002e74:	4b2f      	ldr	r3, [pc, #188]	; (90002f34 <HAL_GPIO_Init+0x238>)
90002e76:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
90002e7a:	4a2e      	ldr	r2, [pc, #184]	; (90002f34 <HAL_GPIO_Init+0x238>)
90002e7c:	f043 0302 	orr.w	r3, r3, #2
90002e80:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
90002e84:	4b2b      	ldr	r3, [pc, #172]	; (90002f34 <HAL_GPIO_Init+0x238>)
90002e86:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
90002e8a:	f003 0302 	and.w	r3, r3, #2
90002e8e:	60fb      	str	r3, [r7, #12]
90002e90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
90002e92:	4a29      	ldr	r2, [pc, #164]	; (90002f38 <HAL_GPIO_Init+0x23c>)
90002e94:	69fb      	ldr	r3, [r7, #28]
90002e96:	089b      	lsrs	r3, r3, #2
90002e98:	3302      	adds	r3, #2
90002e9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
90002e9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
90002ea0:	69fb      	ldr	r3, [r7, #28]
90002ea2:	f003 0303 	and.w	r3, r3, #3
90002ea6:	009b      	lsls	r3, r3, #2
90002ea8:	220f      	movs	r2, #15
90002eaa:	fa02 f303 	lsl.w	r3, r2, r3
90002eae:	43db      	mvns	r3, r3
90002eb0:	69ba      	ldr	r2, [r7, #24]
90002eb2:	4013      	ands	r3, r2
90002eb4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
90002eb6:	687b      	ldr	r3, [r7, #4]
90002eb8:	4a20      	ldr	r2, [pc, #128]	; (90002f3c <HAL_GPIO_Init+0x240>)
90002eba:	4293      	cmp	r3, r2
90002ebc:	d052      	beq.n	90002f64 <HAL_GPIO_Init+0x268>
90002ebe:	687b      	ldr	r3, [r7, #4]
90002ec0:	4a1f      	ldr	r2, [pc, #124]	; (90002f40 <HAL_GPIO_Init+0x244>)
90002ec2:	4293      	cmp	r3, r2
90002ec4:	d031      	beq.n	90002f2a <HAL_GPIO_Init+0x22e>
90002ec6:	687b      	ldr	r3, [r7, #4]
90002ec8:	4a1e      	ldr	r2, [pc, #120]	; (90002f44 <HAL_GPIO_Init+0x248>)
90002eca:	4293      	cmp	r3, r2
90002ecc:	d02b      	beq.n	90002f26 <HAL_GPIO_Init+0x22a>
90002ece:	687b      	ldr	r3, [r7, #4]
90002ed0:	4a1d      	ldr	r2, [pc, #116]	; (90002f48 <HAL_GPIO_Init+0x24c>)
90002ed2:	4293      	cmp	r3, r2
90002ed4:	d025      	beq.n	90002f22 <HAL_GPIO_Init+0x226>
90002ed6:	687b      	ldr	r3, [r7, #4]
90002ed8:	4a1c      	ldr	r2, [pc, #112]	; (90002f4c <HAL_GPIO_Init+0x250>)
90002eda:	4293      	cmp	r3, r2
90002edc:	d01f      	beq.n	90002f1e <HAL_GPIO_Init+0x222>
90002ede:	687b      	ldr	r3, [r7, #4]
90002ee0:	4a1b      	ldr	r2, [pc, #108]	; (90002f50 <HAL_GPIO_Init+0x254>)
90002ee2:	4293      	cmp	r3, r2
90002ee4:	d019      	beq.n	90002f1a <HAL_GPIO_Init+0x21e>
90002ee6:	687b      	ldr	r3, [r7, #4]
90002ee8:	4a1a      	ldr	r2, [pc, #104]	; (90002f54 <HAL_GPIO_Init+0x258>)
90002eea:	4293      	cmp	r3, r2
90002eec:	d013      	beq.n	90002f16 <HAL_GPIO_Init+0x21a>
90002eee:	687b      	ldr	r3, [r7, #4]
90002ef0:	4a19      	ldr	r2, [pc, #100]	; (90002f58 <HAL_GPIO_Init+0x25c>)
90002ef2:	4293      	cmp	r3, r2
90002ef4:	d00d      	beq.n	90002f12 <HAL_GPIO_Init+0x216>
90002ef6:	687b      	ldr	r3, [r7, #4]
90002ef8:	4a18      	ldr	r2, [pc, #96]	; (90002f5c <HAL_GPIO_Init+0x260>)
90002efa:	4293      	cmp	r3, r2
90002efc:	d007      	beq.n	90002f0e <HAL_GPIO_Init+0x212>
90002efe:	687b      	ldr	r3, [r7, #4]
90002f00:	4a17      	ldr	r2, [pc, #92]	; (90002f60 <HAL_GPIO_Init+0x264>)
90002f02:	4293      	cmp	r3, r2
90002f04:	d101      	bne.n	90002f0a <HAL_GPIO_Init+0x20e>
90002f06:	2309      	movs	r3, #9
90002f08:	e02d      	b.n	90002f66 <HAL_GPIO_Init+0x26a>
90002f0a:	230a      	movs	r3, #10
90002f0c:	e02b      	b.n	90002f66 <HAL_GPIO_Init+0x26a>
90002f0e:	2308      	movs	r3, #8
90002f10:	e029      	b.n	90002f66 <HAL_GPIO_Init+0x26a>
90002f12:	2307      	movs	r3, #7
90002f14:	e027      	b.n	90002f66 <HAL_GPIO_Init+0x26a>
90002f16:	2306      	movs	r3, #6
90002f18:	e025      	b.n	90002f66 <HAL_GPIO_Init+0x26a>
90002f1a:	2305      	movs	r3, #5
90002f1c:	e023      	b.n	90002f66 <HAL_GPIO_Init+0x26a>
90002f1e:	2304      	movs	r3, #4
90002f20:	e021      	b.n	90002f66 <HAL_GPIO_Init+0x26a>
90002f22:	2303      	movs	r3, #3
90002f24:	e01f      	b.n	90002f66 <HAL_GPIO_Init+0x26a>
90002f26:	2302      	movs	r3, #2
90002f28:	e01d      	b.n	90002f66 <HAL_GPIO_Init+0x26a>
90002f2a:	2301      	movs	r3, #1
90002f2c:	e01b      	b.n	90002f66 <HAL_GPIO_Init+0x26a>
90002f2e:	bf00      	nop
90002f30:	58000080 	.word	0x58000080
90002f34:	58024400 	.word	0x58024400
90002f38:	58000400 	.word	0x58000400
90002f3c:	58020000 	.word	0x58020000
90002f40:	58020400 	.word	0x58020400
90002f44:	58020800 	.word	0x58020800
90002f48:	58020c00 	.word	0x58020c00
90002f4c:	58021000 	.word	0x58021000
90002f50:	58021400 	.word	0x58021400
90002f54:	58021800 	.word	0x58021800
90002f58:	58021c00 	.word	0x58021c00
90002f5c:	58022000 	.word	0x58022000
90002f60:	58022400 	.word	0x58022400
90002f64:	2300      	movs	r3, #0
90002f66:	69fa      	ldr	r2, [r7, #28]
90002f68:	f002 0203 	and.w	r2, r2, #3
90002f6c:	0092      	lsls	r2, r2, #2
90002f6e:	4093      	lsls	r3, r2
90002f70:	69ba      	ldr	r2, [r7, #24]
90002f72:	4313      	orrs	r3, r2
90002f74:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
90002f76:	4938      	ldr	r1, [pc, #224]	; (90003058 <HAL_GPIO_Init+0x35c>)
90002f78:	69fb      	ldr	r3, [r7, #28]
90002f7a:	089b      	lsrs	r3, r3, #2
90002f7c:	3302      	adds	r3, #2
90002f7e:	69ba      	ldr	r2, [r7, #24]
90002f80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
90002f84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
90002f88:	681b      	ldr	r3, [r3, #0]
90002f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
90002f8c:	693b      	ldr	r3, [r7, #16]
90002f8e:	43db      	mvns	r3, r3
90002f90:	69ba      	ldr	r2, [r7, #24]
90002f92:	4013      	ands	r3, r2
90002f94:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
90002f96:	683b      	ldr	r3, [r7, #0]
90002f98:	685b      	ldr	r3, [r3, #4]
90002f9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
90002f9e:	2b00      	cmp	r3, #0
90002fa0:	d003      	beq.n	90002faa <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
90002fa2:	69ba      	ldr	r2, [r7, #24]
90002fa4:	693b      	ldr	r3, [r7, #16]
90002fa6:	4313      	orrs	r3, r2
90002fa8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
90002faa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
90002fae:	69bb      	ldr	r3, [r7, #24]
90002fb0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
90002fb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
90002fb6:	685b      	ldr	r3, [r3, #4]
90002fb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
90002fba:	693b      	ldr	r3, [r7, #16]
90002fbc:	43db      	mvns	r3, r3
90002fbe:	69ba      	ldr	r2, [r7, #24]
90002fc0:	4013      	ands	r3, r2
90002fc2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
90002fc4:	683b      	ldr	r3, [r7, #0]
90002fc6:	685b      	ldr	r3, [r3, #4]
90002fc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
90002fcc:	2b00      	cmp	r3, #0
90002fce:	d003      	beq.n	90002fd8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
90002fd0:	69ba      	ldr	r2, [r7, #24]
90002fd2:	693b      	ldr	r3, [r7, #16]
90002fd4:	4313      	orrs	r3, r2
90002fd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
90002fd8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
90002fdc:	69bb      	ldr	r3, [r7, #24]
90002fde:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
90002fe0:	697b      	ldr	r3, [r7, #20]
90002fe2:	685b      	ldr	r3, [r3, #4]
90002fe4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
90002fe6:	693b      	ldr	r3, [r7, #16]
90002fe8:	43db      	mvns	r3, r3
90002fea:	69ba      	ldr	r2, [r7, #24]
90002fec:	4013      	ands	r3, r2
90002fee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
90002ff0:	683b      	ldr	r3, [r7, #0]
90002ff2:	685b      	ldr	r3, [r3, #4]
90002ff4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
90002ff8:	2b00      	cmp	r3, #0
90002ffa:	d003      	beq.n	90003004 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
90002ffc:	69ba      	ldr	r2, [r7, #24]
90002ffe:	693b      	ldr	r3, [r7, #16]
90003000:	4313      	orrs	r3, r2
90003002:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
90003004:	697b      	ldr	r3, [r7, #20]
90003006:	69ba      	ldr	r2, [r7, #24]
90003008:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
9000300a:	697b      	ldr	r3, [r7, #20]
9000300c:	681b      	ldr	r3, [r3, #0]
9000300e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
90003010:	693b      	ldr	r3, [r7, #16]
90003012:	43db      	mvns	r3, r3
90003014:	69ba      	ldr	r2, [r7, #24]
90003016:	4013      	ands	r3, r2
90003018:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
9000301a:	683b      	ldr	r3, [r7, #0]
9000301c:	685b      	ldr	r3, [r3, #4]
9000301e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
90003022:	2b00      	cmp	r3, #0
90003024:	d003      	beq.n	9000302e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
90003026:	69ba      	ldr	r2, [r7, #24]
90003028:	693b      	ldr	r3, [r7, #16]
9000302a:	4313      	orrs	r3, r2
9000302c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
9000302e:	697b      	ldr	r3, [r7, #20]
90003030:	69ba      	ldr	r2, [r7, #24]
90003032:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
90003034:	69fb      	ldr	r3, [r7, #28]
90003036:	3301      	adds	r3, #1
90003038:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
9000303a:	683b      	ldr	r3, [r7, #0]
9000303c:	681a      	ldr	r2, [r3, #0]
9000303e:	69fb      	ldr	r3, [r7, #28]
90003040:	fa22 f303 	lsr.w	r3, r2, r3
90003044:	2b00      	cmp	r3, #0
90003046:	f47f ae63 	bne.w	90002d10 <HAL_GPIO_Init+0x14>
  }
}
9000304a:	bf00      	nop
9000304c:	bf00      	nop
9000304e:	3724      	adds	r7, #36	; 0x24
90003050:	46bd      	mov	sp, r7
90003052:	f85d 7b04 	ldr.w	r7, [sp], #4
90003056:	4770      	bx	lr
90003058:	58000400 	.word	0x58000400

9000305c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
9000305c:	b480      	push	{r7}
9000305e:	b083      	sub	sp, #12
90003060:	af00      	add	r7, sp, #0
90003062:	6078      	str	r0, [r7, #4]
90003064:	460b      	mov	r3, r1
90003066:	807b      	strh	r3, [r7, #2]
90003068:	4613      	mov	r3, r2
9000306a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
9000306c:	787b      	ldrb	r3, [r7, #1]
9000306e:	2b00      	cmp	r3, #0
90003070:	d003      	beq.n	9000307a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
90003072:	887a      	ldrh	r2, [r7, #2]
90003074:	687b      	ldr	r3, [r7, #4]
90003076:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
90003078:	e003      	b.n	90003082 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
9000307a:	887b      	ldrh	r3, [r7, #2]
9000307c:	041a      	lsls	r2, r3, #16
9000307e:	687b      	ldr	r3, [r7, #4]
90003080:	619a      	str	r2, [r3, #24]
}
90003082:	bf00      	nop
90003084:	370c      	adds	r7, #12
90003086:	46bd      	mov	sp, r7
90003088:	f85d 7b04 	ldr.w	r7, [sp], #4
9000308c:	4770      	bx	lr
	...

90003090 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
90003090:	b480      	push	{r7}
90003092:	b089      	sub	sp, #36	; 0x24
90003094:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
90003096:	4bb3      	ldr	r3, [pc, #716]	; (90003364 <HAL_RCC_GetSysClockFreq+0x2d4>)
90003098:	691b      	ldr	r3, [r3, #16]
9000309a:	f003 0338 	and.w	r3, r3, #56	; 0x38
9000309e:	2b18      	cmp	r3, #24
900030a0:	f200 8155 	bhi.w	9000334e <HAL_RCC_GetSysClockFreq+0x2be>
900030a4:	a201      	add	r2, pc, #4	; (adr r2, 900030ac <HAL_RCC_GetSysClockFreq+0x1c>)
900030a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
900030aa:	bf00      	nop
900030ac:	90003111 	.word	0x90003111
900030b0:	9000334f 	.word	0x9000334f
900030b4:	9000334f 	.word	0x9000334f
900030b8:	9000334f 	.word	0x9000334f
900030bc:	9000334f 	.word	0x9000334f
900030c0:	9000334f 	.word	0x9000334f
900030c4:	9000334f 	.word	0x9000334f
900030c8:	9000334f 	.word	0x9000334f
900030cc:	90003137 	.word	0x90003137
900030d0:	9000334f 	.word	0x9000334f
900030d4:	9000334f 	.word	0x9000334f
900030d8:	9000334f 	.word	0x9000334f
900030dc:	9000334f 	.word	0x9000334f
900030e0:	9000334f 	.word	0x9000334f
900030e4:	9000334f 	.word	0x9000334f
900030e8:	9000334f 	.word	0x9000334f
900030ec:	9000313d 	.word	0x9000313d
900030f0:	9000334f 	.word	0x9000334f
900030f4:	9000334f 	.word	0x9000334f
900030f8:	9000334f 	.word	0x9000334f
900030fc:	9000334f 	.word	0x9000334f
90003100:	9000334f 	.word	0x9000334f
90003104:	9000334f 	.word	0x9000334f
90003108:	9000334f 	.word	0x9000334f
9000310c:	90003143 	.word	0x90003143
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
90003110:	4b94      	ldr	r3, [pc, #592]	; (90003364 <HAL_RCC_GetSysClockFreq+0x2d4>)
90003112:	681b      	ldr	r3, [r3, #0]
90003114:	f003 0320 	and.w	r3, r3, #32
90003118:	2b00      	cmp	r3, #0
9000311a:	d009      	beq.n	90003130 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
9000311c:	4b91      	ldr	r3, [pc, #580]	; (90003364 <HAL_RCC_GetSysClockFreq+0x2d4>)
9000311e:	681b      	ldr	r3, [r3, #0]
90003120:	08db      	lsrs	r3, r3, #3
90003122:	f003 0303 	and.w	r3, r3, #3
90003126:	4a90      	ldr	r2, [pc, #576]	; (90003368 <HAL_RCC_GetSysClockFreq+0x2d8>)
90003128:	fa22 f303 	lsr.w	r3, r2, r3
9000312c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
9000312e:	e111      	b.n	90003354 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
90003130:	4b8d      	ldr	r3, [pc, #564]	; (90003368 <HAL_RCC_GetSysClockFreq+0x2d8>)
90003132:	61bb      	str	r3, [r7, #24]
    break;
90003134:	e10e      	b.n	90003354 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
90003136:	4b8d      	ldr	r3, [pc, #564]	; (9000336c <HAL_RCC_GetSysClockFreq+0x2dc>)
90003138:	61bb      	str	r3, [r7, #24]
    break;
9000313a:	e10b      	b.n	90003354 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
9000313c:	4b8c      	ldr	r3, [pc, #560]	; (90003370 <HAL_RCC_GetSysClockFreq+0x2e0>)
9000313e:	61bb      	str	r3, [r7, #24]
    break;
90003140:	e108      	b.n	90003354 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
90003142:	4b88      	ldr	r3, [pc, #544]	; (90003364 <HAL_RCC_GetSysClockFreq+0x2d4>)
90003144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90003146:	f003 0303 	and.w	r3, r3, #3
9000314a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
9000314c:	4b85      	ldr	r3, [pc, #532]	; (90003364 <HAL_RCC_GetSysClockFreq+0x2d4>)
9000314e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90003150:	091b      	lsrs	r3, r3, #4
90003152:	f003 033f 	and.w	r3, r3, #63	; 0x3f
90003156:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
90003158:	4b82      	ldr	r3, [pc, #520]	; (90003364 <HAL_RCC_GetSysClockFreq+0x2d4>)
9000315a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000315c:	f003 0301 	and.w	r3, r3, #1
90003160:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
90003162:	4b80      	ldr	r3, [pc, #512]	; (90003364 <HAL_RCC_GetSysClockFreq+0x2d4>)
90003164:	6b5b      	ldr	r3, [r3, #52]	; 0x34
90003166:	08db      	lsrs	r3, r3, #3
90003168:	f3c3 030c 	ubfx	r3, r3, #0, #13
9000316c:	68fa      	ldr	r2, [r7, #12]
9000316e:	fb02 f303 	mul.w	r3, r2, r3
90003172:	ee07 3a90 	vmov	s15, r3
90003176:	eef8 7a67 	vcvt.f32.u32	s15, s15
9000317a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
9000317e:	693b      	ldr	r3, [r7, #16]
90003180:	2b00      	cmp	r3, #0
90003182:	f000 80e1 	beq.w	90003348 <HAL_RCC_GetSysClockFreq+0x2b8>
90003186:	697b      	ldr	r3, [r7, #20]
90003188:	2b02      	cmp	r3, #2
9000318a:	f000 8083 	beq.w	90003294 <HAL_RCC_GetSysClockFreq+0x204>
9000318e:	697b      	ldr	r3, [r7, #20]
90003190:	2b02      	cmp	r3, #2
90003192:	f200 80a1 	bhi.w	900032d8 <HAL_RCC_GetSysClockFreq+0x248>
90003196:	697b      	ldr	r3, [r7, #20]
90003198:	2b00      	cmp	r3, #0
9000319a:	d003      	beq.n	900031a4 <HAL_RCC_GetSysClockFreq+0x114>
9000319c:	697b      	ldr	r3, [r7, #20]
9000319e:	2b01      	cmp	r3, #1
900031a0:	d056      	beq.n	90003250 <HAL_RCC_GetSysClockFreq+0x1c0>
900031a2:	e099      	b.n	900032d8 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
900031a4:	4b6f      	ldr	r3, [pc, #444]	; (90003364 <HAL_RCC_GetSysClockFreq+0x2d4>)
900031a6:	681b      	ldr	r3, [r3, #0]
900031a8:	f003 0320 	and.w	r3, r3, #32
900031ac:	2b00      	cmp	r3, #0
900031ae:	d02d      	beq.n	9000320c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
900031b0:	4b6c      	ldr	r3, [pc, #432]	; (90003364 <HAL_RCC_GetSysClockFreq+0x2d4>)
900031b2:	681b      	ldr	r3, [r3, #0]
900031b4:	08db      	lsrs	r3, r3, #3
900031b6:	f003 0303 	and.w	r3, r3, #3
900031ba:	4a6b      	ldr	r2, [pc, #428]	; (90003368 <HAL_RCC_GetSysClockFreq+0x2d8>)
900031bc:	fa22 f303 	lsr.w	r3, r2, r3
900031c0:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
900031c2:	687b      	ldr	r3, [r7, #4]
900031c4:	ee07 3a90 	vmov	s15, r3
900031c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
900031cc:	693b      	ldr	r3, [r7, #16]
900031ce:	ee07 3a90 	vmov	s15, r3
900031d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
900031d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
900031da:	4b62      	ldr	r3, [pc, #392]	; (90003364 <HAL_RCC_GetSysClockFreq+0x2d4>)
900031dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900031de:	f3c3 0308 	ubfx	r3, r3, #0, #9
900031e2:	ee07 3a90 	vmov	s15, r3
900031e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
900031ea:	ed97 6a02 	vldr	s12, [r7, #8]
900031ee:	eddf 5a61 	vldr	s11, [pc, #388]	; 90003374 <HAL_RCC_GetSysClockFreq+0x2e4>
900031f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
900031f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
900031fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
900031fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
90003202:	ee67 7a27 	vmul.f32	s15, s14, s15
90003206:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
9000320a:	e087      	b.n	9000331c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
9000320c:	693b      	ldr	r3, [r7, #16]
9000320e:	ee07 3a90 	vmov	s15, r3
90003212:	eef8 7a67 	vcvt.f32.u32	s15, s15
90003216:	eddf 6a58 	vldr	s13, [pc, #352]	; 90003378 <HAL_RCC_GetSysClockFreq+0x2e8>
9000321a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
9000321e:	4b51      	ldr	r3, [pc, #324]	; (90003364 <HAL_RCC_GetSysClockFreq+0x2d4>)
90003220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90003222:	f3c3 0308 	ubfx	r3, r3, #0, #9
90003226:	ee07 3a90 	vmov	s15, r3
9000322a:	eef8 6a67 	vcvt.f32.u32	s13, s15
9000322e:	ed97 6a02 	vldr	s12, [r7, #8]
90003232:	eddf 5a50 	vldr	s11, [pc, #320]	; 90003374 <HAL_RCC_GetSysClockFreq+0x2e4>
90003236:	eec6 7a25 	vdiv.f32	s15, s12, s11
9000323a:	ee76 7aa7 	vadd.f32	s15, s13, s15
9000323e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
90003242:	ee77 7aa6 	vadd.f32	s15, s15, s13
90003246:	ee67 7a27 	vmul.f32	s15, s14, s15
9000324a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
9000324e:	e065      	b.n	9000331c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
90003250:	693b      	ldr	r3, [r7, #16]
90003252:	ee07 3a90 	vmov	s15, r3
90003256:	eef8 7a67 	vcvt.f32.u32	s15, s15
9000325a:	eddf 6a48 	vldr	s13, [pc, #288]	; 9000337c <HAL_RCC_GetSysClockFreq+0x2ec>
9000325e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90003262:	4b40      	ldr	r3, [pc, #256]	; (90003364 <HAL_RCC_GetSysClockFreq+0x2d4>)
90003264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90003266:	f3c3 0308 	ubfx	r3, r3, #0, #9
9000326a:	ee07 3a90 	vmov	s15, r3
9000326e:	eef8 6a67 	vcvt.f32.u32	s13, s15
90003272:	ed97 6a02 	vldr	s12, [r7, #8]
90003276:	eddf 5a3f 	vldr	s11, [pc, #252]	; 90003374 <HAL_RCC_GetSysClockFreq+0x2e4>
9000327a:	eec6 7a25 	vdiv.f32	s15, s12, s11
9000327e:	ee76 7aa7 	vadd.f32	s15, s13, s15
90003282:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
90003286:	ee77 7aa6 	vadd.f32	s15, s15, s13
9000328a:	ee67 7a27 	vmul.f32	s15, s14, s15
9000328e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
90003292:	e043      	b.n	9000331c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
90003294:	693b      	ldr	r3, [r7, #16]
90003296:	ee07 3a90 	vmov	s15, r3
9000329a:	eef8 7a67 	vcvt.f32.u32	s15, s15
9000329e:	eddf 6a38 	vldr	s13, [pc, #224]	; 90003380 <HAL_RCC_GetSysClockFreq+0x2f0>
900032a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
900032a6:	4b2f      	ldr	r3, [pc, #188]	; (90003364 <HAL_RCC_GetSysClockFreq+0x2d4>)
900032a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900032aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
900032ae:	ee07 3a90 	vmov	s15, r3
900032b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
900032b6:	ed97 6a02 	vldr	s12, [r7, #8]
900032ba:	eddf 5a2e 	vldr	s11, [pc, #184]	; 90003374 <HAL_RCC_GetSysClockFreq+0x2e4>
900032be:	eec6 7a25 	vdiv.f32	s15, s12, s11
900032c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
900032c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
900032ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
900032ce:	ee67 7a27 	vmul.f32	s15, s14, s15
900032d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
900032d6:	e021      	b.n	9000331c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
900032d8:	693b      	ldr	r3, [r7, #16]
900032da:	ee07 3a90 	vmov	s15, r3
900032de:	eef8 7a67 	vcvt.f32.u32	s15, s15
900032e2:	eddf 6a26 	vldr	s13, [pc, #152]	; 9000337c <HAL_RCC_GetSysClockFreq+0x2ec>
900032e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
900032ea:	4b1e      	ldr	r3, [pc, #120]	; (90003364 <HAL_RCC_GetSysClockFreq+0x2d4>)
900032ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900032ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
900032f2:	ee07 3a90 	vmov	s15, r3
900032f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
900032fa:	ed97 6a02 	vldr	s12, [r7, #8]
900032fe:	eddf 5a1d 	vldr	s11, [pc, #116]	; 90003374 <HAL_RCC_GetSysClockFreq+0x2e4>
90003302:	eec6 7a25 	vdiv.f32	s15, s12, s11
90003306:	ee76 7aa7 	vadd.f32	s15, s13, s15
9000330a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
9000330e:	ee77 7aa6 	vadd.f32	s15, s15, s13
90003312:	ee67 7a27 	vmul.f32	s15, s14, s15
90003316:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
9000331a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
9000331c:	4b11      	ldr	r3, [pc, #68]	; (90003364 <HAL_RCC_GetSysClockFreq+0x2d4>)
9000331e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90003320:	0a5b      	lsrs	r3, r3, #9
90003322:	f003 037f 	and.w	r3, r3, #127	; 0x7f
90003326:	3301      	adds	r3, #1
90003328:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
9000332a:	683b      	ldr	r3, [r7, #0]
9000332c:	ee07 3a90 	vmov	s15, r3
90003330:	eeb8 7a67 	vcvt.f32.u32	s14, s15
90003334:	edd7 6a07 	vldr	s13, [r7, #28]
90003338:	eec6 7a87 	vdiv.f32	s15, s13, s14
9000333c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
90003340:	ee17 3a90 	vmov	r3, s15
90003344:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
90003346:	e005      	b.n	90003354 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
90003348:	2300      	movs	r3, #0
9000334a:	61bb      	str	r3, [r7, #24]
    break;
9000334c:	e002      	b.n	90003354 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
9000334e:	4b07      	ldr	r3, [pc, #28]	; (9000336c <HAL_RCC_GetSysClockFreq+0x2dc>)
90003350:	61bb      	str	r3, [r7, #24]
    break;
90003352:	bf00      	nop
  }

  return sysclockfreq;
90003354:	69bb      	ldr	r3, [r7, #24]
}
90003356:	4618      	mov	r0, r3
90003358:	3724      	adds	r7, #36	; 0x24
9000335a:	46bd      	mov	sp, r7
9000335c:	f85d 7b04 	ldr.w	r7, [sp], #4
90003360:	4770      	bx	lr
90003362:	bf00      	nop
90003364:	58024400 	.word	0x58024400
90003368:	03d09000 	.word	0x03d09000
9000336c:	003d0900 	.word	0x003d0900
90003370:	017d7840 	.word	0x017d7840
90003374:	46000000 	.word	0x46000000
90003378:	4c742400 	.word	0x4c742400
9000337c:	4a742400 	.word	0x4a742400
90003380:	4bbebc20 	.word	0x4bbebc20

90003384 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
90003384:	b580      	push	{r7, lr}
90003386:	b082      	sub	sp, #8
90003388:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
9000338a:	f7ff fe81 	bl	90003090 <HAL_RCC_GetSysClockFreq>
9000338e:	4602      	mov	r2, r0
90003390:	4b10      	ldr	r3, [pc, #64]	; (900033d4 <HAL_RCC_GetHCLKFreq+0x50>)
90003392:	699b      	ldr	r3, [r3, #24]
90003394:	0a1b      	lsrs	r3, r3, #8
90003396:	f003 030f 	and.w	r3, r3, #15
9000339a:	490f      	ldr	r1, [pc, #60]	; (900033d8 <HAL_RCC_GetHCLKFreq+0x54>)
9000339c:	5ccb      	ldrb	r3, [r1, r3]
9000339e:	f003 031f 	and.w	r3, r3, #31
900033a2:	fa22 f303 	lsr.w	r3, r2, r3
900033a6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
900033a8:	4b0a      	ldr	r3, [pc, #40]	; (900033d4 <HAL_RCC_GetHCLKFreq+0x50>)
900033aa:	699b      	ldr	r3, [r3, #24]
900033ac:	f003 030f 	and.w	r3, r3, #15
900033b0:	4a09      	ldr	r2, [pc, #36]	; (900033d8 <HAL_RCC_GetHCLKFreq+0x54>)
900033b2:	5cd3      	ldrb	r3, [r2, r3]
900033b4:	f003 031f 	and.w	r3, r3, #31
900033b8:	687a      	ldr	r2, [r7, #4]
900033ba:	fa22 f303 	lsr.w	r3, r2, r3
900033be:	4a07      	ldr	r2, [pc, #28]	; (900033dc <HAL_RCC_GetHCLKFreq+0x58>)
900033c0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
900033c2:	4a07      	ldr	r2, [pc, #28]	; (900033e0 <HAL_RCC_GetHCLKFreq+0x5c>)
900033c4:	687b      	ldr	r3, [r7, #4]
900033c6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
900033c8:	4b04      	ldr	r3, [pc, #16]	; (900033dc <HAL_RCC_GetHCLKFreq+0x58>)
900033ca:	681b      	ldr	r3, [r3, #0]
}
900033cc:	4618      	mov	r0, r3
900033ce:	3708      	adds	r7, #8
900033d0:	46bd      	mov	sp, r7
900033d2:	bd80      	pop	{r7, pc}
900033d4:	58024400 	.word	0x58024400
900033d8:	9001725c 	.word	0x9001725c
900033dc:	24000004 	.word	0x24000004
900033e0:	24000000 	.word	0x24000000

900033e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
900033e4:	b580      	push	{r7, lr}
900033e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
900033e8:	f7ff ffcc 	bl	90003384 <HAL_RCC_GetHCLKFreq>
900033ec:	4602      	mov	r2, r0
900033ee:	4b06      	ldr	r3, [pc, #24]	; (90003408 <HAL_RCC_GetPCLK2Freq+0x24>)
900033f0:	69db      	ldr	r3, [r3, #28]
900033f2:	0a1b      	lsrs	r3, r3, #8
900033f4:	f003 0307 	and.w	r3, r3, #7
900033f8:	4904      	ldr	r1, [pc, #16]	; (9000340c <HAL_RCC_GetPCLK2Freq+0x28>)
900033fa:	5ccb      	ldrb	r3, [r1, r3]
900033fc:	f003 031f 	and.w	r3, r3, #31
90003400:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
90003404:	4618      	mov	r0, r3
90003406:	bd80      	pop	{r7, pc}
90003408:	58024400 	.word	0x58024400
9000340c:	9001725c 	.word	0x9001725c

90003410 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
90003410:	b480      	push	{r7}
90003412:	b083      	sub	sp, #12
90003414:	af00      	add	r7, sp, #0
90003416:	6078      	str	r0, [r7, #4]
90003418:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
9000341a:	687b      	ldr	r3, [r7, #4]
9000341c:	223f      	movs	r2, #63	; 0x3f
9000341e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
90003420:	4b1a      	ldr	r3, [pc, #104]	; (9000348c <HAL_RCC_GetClockConfig+0x7c>)
90003422:	691b      	ldr	r3, [r3, #16]
90003424:	f003 0207 	and.w	r2, r3, #7
90003428:	687b      	ldr	r3, [r7, #4]
9000342a:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
9000342c:	4b17      	ldr	r3, [pc, #92]	; (9000348c <HAL_RCC_GetClockConfig+0x7c>)
9000342e:	699b      	ldr	r3, [r3, #24]
90003430:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
90003434:	687b      	ldr	r3, [r7, #4]
90003436:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
90003438:	4b14      	ldr	r3, [pc, #80]	; (9000348c <HAL_RCC_GetClockConfig+0x7c>)
9000343a:	699b      	ldr	r3, [r3, #24]
9000343c:	f003 020f 	and.w	r2, r3, #15
90003440:	687b      	ldr	r3, [r7, #4]
90003442:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
90003444:	4b11      	ldr	r3, [pc, #68]	; (9000348c <HAL_RCC_GetClockConfig+0x7c>)
90003446:	699b      	ldr	r3, [r3, #24]
90003448:	f003 0270 	and.w	r2, r3, #112	; 0x70
9000344c:	687b      	ldr	r3, [r7, #4]
9000344e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
90003450:	4b0e      	ldr	r3, [pc, #56]	; (9000348c <HAL_RCC_GetClockConfig+0x7c>)
90003452:	69db      	ldr	r3, [r3, #28]
90003454:	f003 0270 	and.w	r2, r3, #112	; 0x70
90003458:	687b      	ldr	r3, [r7, #4]
9000345a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
9000345c:	4b0b      	ldr	r3, [pc, #44]	; (9000348c <HAL_RCC_GetClockConfig+0x7c>)
9000345e:	69db      	ldr	r3, [r3, #28]
90003460:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
90003464:	687b      	ldr	r3, [r7, #4]
90003466:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
90003468:	4b08      	ldr	r3, [pc, #32]	; (9000348c <HAL_RCC_GetClockConfig+0x7c>)
9000346a:	6a1b      	ldr	r3, [r3, #32]
9000346c:	f003 0270 	and.w	r2, r3, #112	; 0x70
90003470:	687b      	ldr	r3, [r7, #4]
90003472:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
90003474:	4b06      	ldr	r3, [pc, #24]	; (90003490 <HAL_RCC_GetClockConfig+0x80>)
90003476:	681b      	ldr	r3, [r3, #0]
90003478:	f003 020f 	and.w	r2, r3, #15
9000347c:	683b      	ldr	r3, [r7, #0]
9000347e:	601a      	str	r2, [r3, #0]
}
90003480:	bf00      	nop
90003482:	370c      	adds	r7, #12
90003484:	46bd      	mov	sp, r7
90003486:	f85d 7b04 	ldr.w	r7, [sp], #4
9000348a:	4770      	bx	lr
9000348c:	58024400 	.word	0x58024400
90003490:	52002000 	.word	0x52002000

90003494 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
90003494:	b580      	push	{r7, lr}
90003496:	b082      	sub	sp, #8
90003498:	af00      	add	r7, sp, #0
9000349a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
9000349c:	687b      	ldr	r3, [r7, #4]
9000349e:	2b00      	cmp	r3, #0
900034a0:	d101      	bne.n	900034a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
900034a2:	2301      	movs	r3, #1
900034a4:	e049      	b.n	9000353a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
900034a6:	687b      	ldr	r3, [r7, #4]
900034a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
900034ac:	b2db      	uxtb	r3, r3
900034ae:	2b00      	cmp	r3, #0
900034b0:	d106      	bne.n	900034c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
900034b2:	687b      	ldr	r3, [r7, #4]
900034b4:	2200      	movs	r2, #0
900034b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
900034ba:	6878      	ldr	r0, [r7, #4]
900034bc:	f000 f841 	bl	90003542 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
900034c0:	687b      	ldr	r3, [r7, #4]
900034c2:	2202      	movs	r2, #2
900034c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
900034c8:	687b      	ldr	r3, [r7, #4]
900034ca:	681a      	ldr	r2, [r3, #0]
900034cc:	687b      	ldr	r3, [r7, #4]
900034ce:	3304      	adds	r3, #4
900034d0:	4619      	mov	r1, r3
900034d2:	4610      	mov	r0, r2
900034d4:	f000 fa00 	bl	900038d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
900034d8:	687b      	ldr	r3, [r7, #4]
900034da:	2201      	movs	r2, #1
900034dc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
900034e0:	687b      	ldr	r3, [r7, #4]
900034e2:	2201      	movs	r2, #1
900034e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
900034e8:	687b      	ldr	r3, [r7, #4]
900034ea:	2201      	movs	r2, #1
900034ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
900034f0:	687b      	ldr	r3, [r7, #4]
900034f2:	2201      	movs	r2, #1
900034f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
900034f8:	687b      	ldr	r3, [r7, #4]
900034fa:	2201      	movs	r2, #1
900034fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
90003500:	687b      	ldr	r3, [r7, #4]
90003502:	2201      	movs	r2, #1
90003504:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
90003508:	687b      	ldr	r3, [r7, #4]
9000350a:	2201      	movs	r2, #1
9000350c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
90003510:	687b      	ldr	r3, [r7, #4]
90003512:	2201      	movs	r2, #1
90003514:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
90003518:	687b      	ldr	r3, [r7, #4]
9000351a:	2201      	movs	r2, #1
9000351c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
90003520:	687b      	ldr	r3, [r7, #4]
90003522:	2201      	movs	r2, #1
90003524:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
90003528:	687b      	ldr	r3, [r7, #4]
9000352a:	2201      	movs	r2, #1
9000352c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
90003530:	687b      	ldr	r3, [r7, #4]
90003532:	2201      	movs	r2, #1
90003534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
90003538:	2300      	movs	r3, #0
}
9000353a:	4618      	mov	r0, r3
9000353c:	3708      	adds	r7, #8
9000353e:	46bd      	mov	sp, r7
90003540:	bd80      	pop	{r7, pc}

90003542 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
90003542:	b480      	push	{r7}
90003544:	b083      	sub	sp, #12
90003546:	af00      	add	r7, sp, #0
90003548:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
9000354a:	bf00      	nop
9000354c:	370c      	adds	r7, #12
9000354e:	46bd      	mov	sp, r7
90003550:	f85d 7b04 	ldr.w	r7, [sp], #4
90003554:	4770      	bx	lr
	...

90003558 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
90003558:	b480      	push	{r7}
9000355a:	b085      	sub	sp, #20
9000355c:	af00      	add	r7, sp, #0
9000355e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
90003560:	687b      	ldr	r3, [r7, #4]
90003562:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
90003566:	b2db      	uxtb	r3, r3
90003568:	2b01      	cmp	r3, #1
9000356a:	d001      	beq.n	90003570 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
9000356c:	2301      	movs	r3, #1
9000356e:	e054      	b.n	9000361a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
90003570:	687b      	ldr	r3, [r7, #4]
90003572:	2202      	movs	r2, #2
90003574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
90003578:	687b      	ldr	r3, [r7, #4]
9000357a:	681b      	ldr	r3, [r3, #0]
9000357c:	68da      	ldr	r2, [r3, #12]
9000357e:	687b      	ldr	r3, [r7, #4]
90003580:	681b      	ldr	r3, [r3, #0]
90003582:	f042 0201 	orr.w	r2, r2, #1
90003586:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
90003588:	687b      	ldr	r3, [r7, #4]
9000358a:	681b      	ldr	r3, [r3, #0]
9000358c:	4a26      	ldr	r2, [pc, #152]	; (90003628 <HAL_TIM_Base_Start_IT+0xd0>)
9000358e:	4293      	cmp	r3, r2
90003590:	d022      	beq.n	900035d8 <HAL_TIM_Base_Start_IT+0x80>
90003592:	687b      	ldr	r3, [r7, #4]
90003594:	681b      	ldr	r3, [r3, #0]
90003596:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
9000359a:	d01d      	beq.n	900035d8 <HAL_TIM_Base_Start_IT+0x80>
9000359c:	687b      	ldr	r3, [r7, #4]
9000359e:	681b      	ldr	r3, [r3, #0]
900035a0:	4a22      	ldr	r2, [pc, #136]	; (9000362c <HAL_TIM_Base_Start_IT+0xd4>)
900035a2:	4293      	cmp	r3, r2
900035a4:	d018      	beq.n	900035d8 <HAL_TIM_Base_Start_IT+0x80>
900035a6:	687b      	ldr	r3, [r7, #4]
900035a8:	681b      	ldr	r3, [r3, #0]
900035aa:	4a21      	ldr	r2, [pc, #132]	; (90003630 <HAL_TIM_Base_Start_IT+0xd8>)
900035ac:	4293      	cmp	r3, r2
900035ae:	d013      	beq.n	900035d8 <HAL_TIM_Base_Start_IT+0x80>
900035b0:	687b      	ldr	r3, [r7, #4]
900035b2:	681b      	ldr	r3, [r3, #0]
900035b4:	4a1f      	ldr	r2, [pc, #124]	; (90003634 <HAL_TIM_Base_Start_IT+0xdc>)
900035b6:	4293      	cmp	r3, r2
900035b8:	d00e      	beq.n	900035d8 <HAL_TIM_Base_Start_IT+0x80>
900035ba:	687b      	ldr	r3, [r7, #4]
900035bc:	681b      	ldr	r3, [r3, #0]
900035be:	4a1e      	ldr	r2, [pc, #120]	; (90003638 <HAL_TIM_Base_Start_IT+0xe0>)
900035c0:	4293      	cmp	r3, r2
900035c2:	d009      	beq.n	900035d8 <HAL_TIM_Base_Start_IT+0x80>
900035c4:	687b      	ldr	r3, [r7, #4]
900035c6:	681b      	ldr	r3, [r3, #0]
900035c8:	4a1c      	ldr	r2, [pc, #112]	; (9000363c <HAL_TIM_Base_Start_IT+0xe4>)
900035ca:	4293      	cmp	r3, r2
900035cc:	d004      	beq.n	900035d8 <HAL_TIM_Base_Start_IT+0x80>
900035ce:	687b      	ldr	r3, [r7, #4]
900035d0:	681b      	ldr	r3, [r3, #0]
900035d2:	4a1b      	ldr	r2, [pc, #108]	; (90003640 <HAL_TIM_Base_Start_IT+0xe8>)
900035d4:	4293      	cmp	r3, r2
900035d6:	d115      	bne.n	90003604 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
900035d8:	687b      	ldr	r3, [r7, #4]
900035da:	681b      	ldr	r3, [r3, #0]
900035dc:	689a      	ldr	r2, [r3, #8]
900035de:	4b19      	ldr	r3, [pc, #100]	; (90003644 <HAL_TIM_Base_Start_IT+0xec>)
900035e0:	4013      	ands	r3, r2
900035e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
900035e4:	68fb      	ldr	r3, [r7, #12]
900035e6:	2b06      	cmp	r3, #6
900035e8:	d015      	beq.n	90003616 <HAL_TIM_Base_Start_IT+0xbe>
900035ea:	68fb      	ldr	r3, [r7, #12]
900035ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
900035f0:	d011      	beq.n	90003616 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
900035f2:	687b      	ldr	r3, [r7, #4]
900035f4:	681b      	ldr	r3, [r3, #0]
900035f6:	681a      	ldr	r2, [r3, #0]
900035f8:	687b      	ldr	r3, [r7, #4]
900035fa:	681b      	ldr	r3, [r3, #0]
900035fc:	f042 0201 	orr.w	r2, r2, #1
90003600:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
90003602:	e008      	b.n	90003616 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
90003604:	687b      	ldr	r3, [r7, #4]
90003606:	681b      	ldr	r3, [r3, #0]
90003608:	681a      	ldr	r2, [r3, #0]
9000360a:	687b      	ldr	r3, [r7, #4]
9000360c:	681b      	ldr	r3, [r3, #0]
9000360e:	f042 0201 	orr.w	r2, r2, #1
90003612:	601a      	str	r2, [r3, #0]
90003614:	e000      	b.n	90003618 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
90003616:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
90003618:	2300      	movs	r3, #0
}
9000361a:	4618      	mov	r0, r3
9000361c:	3714      	adds	r7, #20
9000361e:	46bd      	mov	sp, r7
90003620:	f85d 7b04 	ldr.w	r7, [sp], #4
90003624:	4770      	bx	lr
90003626:	bf00      	nop
90003628:	40010000 	.word	0x40010000
9000362c:	40000400 	.word	0x40000400
90003630:	40000800 	.word	0x40000800
90003634:	40000c00 	.word	0x40000c00
90003638:	40010400 	.word	0x40010400
9000363c:	40001800 	.word	0x40001800
90003640:	40014000 	.word	0x40014000
90003644:	00010007 	.word	0x00010007

90003648 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
90003648:	b580      	push	{r7, lr}
9000364a:	b082      	sub	sp, #8
9000364c:	af00      	add	r7, sp, #0
9000364e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
90003650:	687b      	ldr	r3, [r7, #4]
90003652:	681b      	ldr	r3, [r3, #0]
90003654:	691b      	ldr	r3, [r3, #16]
90003656:	f003 0302 	and.w	r3, r3, #2
9000365a:	2b02      	cmp	r3, #2
9000365c:	d122      	bne.n	900036a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
9000365e:	687b      	ldr	r3, [r7, #4]
90003660:	681b      	ldr	r3, [r3, #0]
90003662:	68db      	ldr	r3, [r3, #12]
90003664:	f003 0302 	and.w	r3, r3, #2
90003668:	2b02      	cmp	r3, #2
9000366a:	d11b      	bne.n	900036a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
9000366c:	687b      	ldr	r3, [r7, #4]
9000366e:	681b      	ldr	r3, [r3, #0]
90003670:	f06f 0202 	mvn.w	r2, #2
90003674:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
90003676:	687b      	ldr	r3, [r7, #4]
90003678:	2201      	movs	r2, #1
9000367a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
9000367c:	687b      	ldr	r3, [r7, #4]
9000367e:	681b      	ldr	r3, [r3, #0]
90003680:	699b      	ldr	r3, [r3, #24]
90003682:	f003 0303 	and.w	r3, r3, #3
90003686:	2b00      	cmp	r3, #0
90003688:	d003      	beq.n	90003692 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
9000368a:	6878      	ldr	r0, [r7, #4]
9000368c:	f000 f905 	bl	9000389a <HAL_TIM_IC_CaptureCallback>
90003690:	e005      	b.n	9000369e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
90003692:	6878      	ldr	r0, [r7, #4]
90003694:	f000 f8f7 	bl	90003886 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
90003698:	6878      	ldr	r0, [r7, #4]
9000369a:	f000 f908 	bl	900038ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
9000369e:	687b      	ldr	r3, [r7, #4]
900036a0:	2200      	movs	r2, #0
900036a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
900036a4:	687b      	ldr	r3, [r7, #4]
900036a6:	681b      	ldr	r3, [r3, #0]
900036a8:	691b      	ldr	r3, [r3, #16]
900036aa:	f003 0304 	and.w	r3, r3, #4
900036ae:	2b04      	cmp	r3, #4
900036b0:	d122      	bne.n	900036f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
900036b2:	687b      	ldr	r3, [r7, #4]
900036b4:	681b      	ldr	r3, [r3, #0]
900036b6:	68db      	ldr	r3, [r3, #12]
900036b8:	f003 0304 	and.w	r3, r3, #4
900036bc:	2b04      	cmp	r3, #4
900036be:	d11b      	bne.n	900036f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
900036c0:	687b      	ldr	r3, [r7, #4]
900036c2:	681b      	ldr	r3, [r3, #0]
900036c4:	f06f 0204 	mvn.w	r2, #4
900036c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
900036ca:	687b      	ldr	r3, [r7, #4]
900036cc:	2202      	movs	r2, #2
900036ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
900036d0:	687b      	ldr	r3, [r7, #4]
900036d2:	681b      	ldr	r3, [r3, #0]
900036d4:	699b      	ldr	r3, [r3, #24]
900036d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
900036da:	2b00      	cmp	r3, #0
900036dc:	d003      	beq.n	900036e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
900036de:	6878      	ldr	r0, [r7, #4]
900036e0:	f000 f8db 	bl	9000389a <HAL_TIM_IC_CaptureCallback>
900036e4:	e005      	b.n	900036f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
900036e6:	6878      	ldr	r0, [r7, #4]
900036e8:	f000 f8cd 	bl	90003886 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
900036ec:	6878      	ldr	r0, [r7, #4]
900036ee:	f000 f8de 	bl	900038ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
900036f2:	687b      	ldr	r3, [r7, #4]
900036f4:	2200      	movs	r2, #0
900036f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
900036f8:	687b      	ldr	r3, [r7, #4]
900036fa:	681b      	ldr	r3, [r3, #0]
900036fc:	691b      	ldr	r3, [r3, #16]
900036fe:	f003 0308 	and.w	r3, r3, #8
90003702:	2b08      	cmp	r3, #8
90003704:	d122      	bne.n	9000374c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
90003706:	687b      	ldr	r3, [r7, #4]
90003708:	681b      	ldr	r3, [r3, #0]
9000370a:	68db      	ldr	r3, [r3, #12]
9000370c:	f003 0308 	and.w	r3, r3, #8
90003710:	2b08      	cmp	r3, #8
90003712:	d11b      	bne.n	9000374c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
90003714:	687b      	ldr	r3, [r7, #4]
90003716:	681b      	ldr	r3, [r3, #0]
90003718:	f06f 0208 	mvn.w	r2, #8
9000371c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
9000371e:	687b      	ldr	r3, [r7, #4]
90003720:	2204      	movs	r2, #4
90003722:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
90003724:	687b      	ldr	r3, [r7, #4]
90003726:	681b      	ldr	r3, [r3, #0]
90003728:	69db      	ldr	r3, [r3, #28]
9000372a:	f003 0303 	and.w	r3, r3, #3
9000372e:	2b00      	cmp	r3, #0
90003730:	d003      	beq.n	9000373a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
90003732:	6878      	ldr	r0, [r7, #4]
90003734:	f000 f8b1 	bl	9000389a <HAL_TIM_IC_CaptureCallback>
90003738:	e005      	b.n	90003746 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
9000373a:	6878      	ldr	r0, [r7, #4]
9000373c:	f000 f8a3 	bl	90003886 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
90003740:	6878      	ldr	r0, [r7, #4]
90003742:	f000 f8b4 	bl	900038ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
90003746:	687b      	ldr	r3, [r7, #4]
90003748:	2200      	movs	r2, #0
9000374a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
9000374c:	687b      	ldr	r3, [r7, #4]
9000374e:	681b      	ldr	r3, [r3, #0]
90003750:	691b      	ldr	r3, [r3, #16]
90003752:	f003 0310 	and.w	r3, r3, #16
90003756:	2b10      	cmp	r3, #16
90003758:	d122      	bne.n	900037a0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
9000375a:	687b      	ldr	r3, [r7, #4]
9000375c:	681b      	ldr	r3, [r3, #0]
9000375e:	68db      	ldr	r3, [r3, #12]
90003760:	f003 0310 	and.w	r3, r3, #16
90003764:	2b10      	cmp	r3, #16
90003766:	d11b      	bne.n	900037a0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
90003768:	687b      	ldr	r3, [r7, #4]
9000376a:	681b      	ldr	r3, [r3, #0]
9000376c:	f06f 0210 	mvn.w	r2, #16
90003770:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
90003772:	687b      	ldr	r3, [r7, #4]
90003774:	2208      	movs	r2, #8
90003776:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
90003778:	687b      	ldr	r3, [r7, #4]
9000377a:	681b      	ldr	r3, [r3, #0]
9000377c:	69db      	ldr	r3, [r3, #28]
9000377e:	f403 7340 	and.w	r3, r3, #768	; 0x300
90003782:	2b00      	cmp	r3, #0
90003784:	d003      	beq.n	9000378e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
90003786:	6878      	ldr	r0, [r7, #4]
90003788:	f000 f887 	bl	9000389a <HAL_TIM_IC_CaptureCallback>
9000378c:	e005      	b.n	9000379a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
9000378e:	6878      	ldr	r0, [r7, #4]
90003790:	f000 f879 	bl	90003886 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
90003794:	6878      	ldr	r0, [r7, #4]
90003796:	f000 f88a 	bl	900038ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
9000379a:	687b      	ldr	r3, [r7, #4]
9000379c:	2200      	movs	r2, #0
9000379e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
900037a0:	687b      	ldr	r3, [r7, #4]
900037a2:	681b      	ldr	r3, [r3, #0]
900037a4:	691b      	ldr	r3, [r3, #16]
900037a6:	f003 0301 	and.w	r3, r3, #1
900037aa:	2b01      	cmp	r3, #1
900037ac:	d10e      	bne.n	900037cc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
900037ae:	687b      	ldr	r3, [r7, #4]
900037b0:	681b      	ldr	r3, [r3, #0]
900037b2:	68db      	ldr	r3, [r3, #12]
900037b4:	f003 0301 	and.w	r3, r3, #1
900037b8:	2b01      	cmp	r3, #1
900037ba:	d107      	bne.n	900037cc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
900037bc:	687b      	ldr	r3, [r7, #4]
900037be:	681b      	ldr	r3, [r3, #0]
900037c0:	f06f 0201 	mvn.w	r2, #1
900037c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
900037c6:	6878      	ldr	r0, [r7, #4]
900037c8:	f7fc ff66 	bl	90000698 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
900037cc:	687b      	ldr	r3, [r7, #4]
900037ce:	681b      	ldr	r3, [r3, #0]
900037d0:	691b      	ldr	r3, [r3, #16]
900037d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
900037d6:	2b80      	cmp	r3, #128	; 0x80
900037d8:	d10e      	bne.n	900037f8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
900037da:	687b      	ldr	r3, [r7, #4]
900037dc:	681b      	ldr	r3, [r3, #0]
900037de:	68db      	ldr	r3, [r3, #12]
900037e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
900037e4:	2b80      	cmp	r3, #128	; 0x80
900037e6:	d107      	bne.n	900037f8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
900037e8:	687b      	ldr	r3, [r7, #4]
900037ea:	681b      	ldr	r3, [r3, #0]
900037ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
900037f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
900037f2:	6878      	ldr	r0, [r7, #4]
900037f4:	f000 f914 	bl	90003a20 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
900037f8:	687b      	ldr	r3, [r7, #4]
900037fa:	681b      	ldr	r3, [r3, #0]
900037fc:	691b      	ldr	r3, [r3, #16]
900037fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
90003802:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
90003806:	d10e      	bne.n	90003826 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
90003808:	687b      	ldr	r3, [r7, #4]
9000380a:	681b      	ldr	r3, [r3, #0]
9000380c:	68db      	ldr	r3, [r3, #12]
9000380e:	f003 0380 	and.w	r3, r3, #128	; 0x80
90003812:	2b80      	cmp	r3, #128	; 0x80
90003814:	d107      	bne.n	90003826 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
90003816:	687b      	ldr	r3, [r7, #4]
90003818:	681b      	ldr	r3, [r3, #0]
9000381a:	f46f 7280 	mvn.w	r2, #256	; 0x100
9000381e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
90003820:	6878      	ldr	r0, [r7, #4]
90003822:	f000 f907 	bl	90003a34 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
90003826:	687b      	ldr	r3, [r7, #4]
90003828:	681b      	ldr	r3, [r3, #0]
9000382a:	691b      	ldr	r3, [r3, #16]
9000382c:	f003 0340 	and.w	r3, r3, #64	; 0x40
90003830:	2b40      	cmp	r3, #64	; 0x40
90003832:	d10e      	bne.n	90003852 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
90003834:	687b      	ldr	r3, [r7, #4]
90003836:	681b      	ldr	r3, [r3, #0]
90003838:	68db      	ldr	r3, [r3, #12]
9000383a:	f003 0340 	and.w	r3, r3, #64	; 0x40
9000383e:	2b40      	cmp	r3, #64	; 0x40
90003840:	d107      	bne.n	90003852 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
90003842:	687b      	ldr	r3, [r7, #4]
90003844:	681b      	ldr	r3, [r3, #0]
90003846:	f06f 0240 	mvn.w	r2, #64	; 0x40
9000384a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
9000384c:	6878      	ldr	r0, [r7, #4]
9000384e:	f000 f838 	bl	900038c2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
90003852:	687b      	ldr	r3, [r7, #4]
90003854:	681b      	ldr	r3, [r3, #0]
90003856:	691b      	ldr	r3, [r3, #16]
90003858:	f003 0320 	and.w	r3, r3, #32
9000385c:	2b20      	cmp	r3, #32
9000385e:	d10e      	bne.n	9000387e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
90003860:	687b      	ldr	r3, [r7, #4]
90003862:	681b      	ldr	r3, [r3, #0]
90003864:	68db      	ldr	r3, [r3, #12]
90003866:	f003 0320 	and.w	r3, r3, #32
9000386a:	2b20      	cmp	r3, #32
9000386c:	d107      	bne.n	9000387e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
9000386e:	687b      	ldr	r3, [r7, #4]
90003870:	681b      	ldr	r3, [r3, #0]
90003872:	f06f 0220 	mvn.w	r2, #32
90003876:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
90003878:	6878      	ldr	r0, [r7, #4]
9000387a:	f000 f8c7 	bl	90003a0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
9000387e:	bf00      	nop
90003880:	3708      	adds	r7, #8
90003882:	46bd      	mov	sp, r7
90003884:	bd80      	pop	{r7, pc}

90003886 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
90003886:	b480      	push	{r7}
90003888:	b083      	sub	sp, #12
9000388a:	af00      	add	r7, sp, #0
9000388c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
9000388e:	bf00      	nop
90003890:	370c      	adds	r7, #12
90003892:	46bd      	mov	sp, r7
90003894:	f85d 7b04 	ldr.w	r7, [sp], #4
90003898:	4770      	bx	lr

9000389a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
9000389a:	b480      	push	{r7}
9000389c:	b083      	sub	sp, #12
9000389e:	af00      	add	r7, sp, #0
900038a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
900038a2:	bf00      	nop
900038a4:	370c      	adds	r7, #12
900038a6:	46bd      	mov	sp, r7
900038a8:	f85d 7b04 	ldr.w	r7, [sp], #4
900038ac:	4770      	bx	lr

900038ae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
900038ae:	b480      	push	{r7}
900038b0:	b083      	sub	sp, #12
900038b2:	af00      	add	r7, sp, #0
900038b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
900038b6:	bf00      	nop
900038b8:	370c      	adds	r7, #12
900038ba:	46bd      	mov	sp, r7
900038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
900038c0:	4770      	bx	lr

900038c2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
900038c2:	b480      	push	{r7}
900038c4:	b083      	sub	sp, #12
900038c6:	af00      	add	r7, sp, #0
900038c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
900038ca:	bf00      	nop
900038cc:	370c      	adds	r7, #12
900038ce:	46bd      	mov	sp, r7
900038d0:	f85d 7b04 	ldr.w	r7, [sp], #4
900038d4:	4770      	bx	lr
	...

900038d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
900038d8:	b480      	push	{r7}
900038da:	b085      	sub	sp, #20
900038dc:	af00      	add	r7, sp, #0
900038de:	6078      	str	r0, [r7, #4]
900038e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
900038e2:	687b      	ldr	r3, [r7, #4]
900038e4:	681b      	ldr	r3, [r3, #0]
900038e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
900038e8:	687b      	ldr	r3, [r7, #4]
900038ea:	4a40      	ldr	r2, [pc, #256]	; (900039ec <TIM_Base_SetConfig+0x114>)
900038ec:	4293      	cmp	r3, r2
900038ee:	d013      	beq.n	90003918 <TIM_Base_SetConfig+0x40>
900038f0:	687b      	ldr	r3, [r7, #4]
900038f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
900038f6:	d00f      	beq.n	90003918 <TIM_Base_SetConfig+0x40>
900038f8:	687b      	ldr	r3, [r7, #4]
900038fa:	4a3d      	ldr	r2, [pc, #244]	; (900039f0 <TIM_Base_SetConfig+0x118>)
900038fc:	4293      	cmp	r3, r2
900038fe:	d00b      	beq.n	90003918 <TIM_Base_SetConfig+0x40>
90003900:	687b      	ldr	r3, [r7, #4]
90003902:	4a3c      	ldr	r2, [pc, #240]	; (900039f4 <TIM_Base_SetConfig+0x11c>)
90003904:	4293      	cmp	r3, r2
90003906:	d007      	beq.n	90003918 <TIM_Base_SetConfig+0x40>
90003908:	687b      	ldr	r3, [r7, #4]
9000390a:	4a3b      	ldr	r2, [pc, #236]	; (900039f8 <TIM_Base_SetConfig+0x120>)
9000390c:	4293      	cmp	r3, r2
9000390e:	d003      	beq.n	90003918 <TIM_Base_SetConfig+0x40>
90003910:	687b      	ldr	r3, [r7, #4]
90003912:	4a3a      	ldr	r2, [pc, #232]	; (900039fc <TIM_Base_SetConfig+0x124>)
90003914:	4293      	cmp	r3, r2
90003916:	d108      	bne.n	9000392a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
90003918:	68fb      	ldr	r3, [r7, #12]
9000391a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
9000391e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
90003920:	683b      	ldr	r3, [r7, #0]
90003922:	685b      	ldr	r3, [r3, #4]
90003924:	68fa      	ldr	r2, [r7, #12]
90003926:	4313      	orrs	r3, r2
90003928:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
9000392a:	687b      	ldr	r3, [r7, #4]
9000392c:	4a2f      	ldr	r2, [pc, #188]	; (900039ec <TIM_Base_SetConfig+0x114>)
9000392e:	4293      	cmp	r3, r2
90003930:	d01f      	beq.n	90003972 <TIM_Base_SetConfig+0x9a>
90003932:	687b      	ldr	r3, [r7, #4]
90003934:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
90003938:	d01b      	beq.n	90003972 <TIM_Base_SetConfig+0x9a>
9000393a:	687b      	ldr	r3, [r7, #4]
9000393c:	4a2c      	ldr	r2, [pc, #176]	; (900039f0 <TIM_Base_SetConfig+0x118>)
9000393e:	4293      	cmp	r3, r2
90003940:	d017      	beq.n	90003972 <TIM_Base_SetConfig+0x9a>
90003942:	687b      	ldr	r3, [r7, #4]
90003944:	4a2b      	ldr	r2, [pc, #172]	; (900039f4 <TIM_Base_SetConfig+0x11c>)
90003946:	4293      	cmp	r3, r2
90003948:	d013      	beq.n	90003972 <TIM_Base_SetConfig+0x9a>
9000394a:	687b      	ldr	r3, [r7, #4]
9000394c:	4a2a      	ldr	r2, [pc, #168]	; (900039f8 <TIM_Base_SetConfig+0x120>)
9000394e:	4293      	cmp	r3, r2
90003950:	d00f      	beq.n	90003972 <TIM_Base_SetConfig+0x9a>
90003952:	687b      	ldr	r3, [r7, #4]
90003954:	4a29      	ldr	r2, [pc, #164]	; (900039fc <TIM_Base_SetConfig+0x124>)
90003956:	4293      	cmp	r3, r2
90003958:	d00b      	beq.n	90003972 <TIM_Base_SetConfig+0x9a>
9000395a:	687b      	ldr	r3, [r7, #4]
9000395c:	4a28      	ldr	r2, [pc, #160]	; (90003a00 <TIM_Base_SetConfig+0x128>)
9000395e:	4293      	cmp	r3, r2
90003960:	d007      	beq.n	90003972 <TIM_Base_SetConfig+0x9a>
90003962:	687b      	ldr	r3, [r7, #4]
90003964:	4a27      	ldr	r2, [pc, #156]	; (90003a04 <TIM_Base_SetConfig+0x12c>)
90003966:	4293      	cmp	r3, r2
90003968:	d003      	beq.n	90003972 <TIM_Base_SetConfig+0x9a>
9000396a:	687b      	ldr	r3, [r7, #4]
9000396c:	4a26      	ldr	r2, [pc, #152]	; (90003a08 <TIM_Base_SetConfig+0x130>)
9000396e:	4293      	cmp	r3, r2
90003970:	d108      	bne.n	90003984 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
90003972:	68fb      	ldr	r3, [r7, #12]
90003974:	f423 7340 	bic.w	r3, r3, #768	; 0x300
90003978:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
9000397a:	683b      	ldr	r3, [r7, #0]
9000397c:	68db      	ldr	r3, [r3, #12]
9000397e:	68fa      	ldr	r2, [r7, #12]
90003980:	4313      	orrs	r3, r2
90003982:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
90003984:	68fb      	ldr	r3, [r7, #12]
90003986:	f023 0280 	bic.w	r2, r3, #128	; 0x80
9000398a:	683b      	ldr	r3, [r7, #0]
9000398c:	695b      	ldr	r3, [r3, #20]
9000398e:	4313      	orrs	r3, r2
90003990:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
90003992:	687b      	ldr	r3, [r7, #4]
90003994:	68fa      	ldr	r2, [r7, #12]
90003996:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
90003998:	683b      	ldr	r3, [r7, #0]
9000399a:	689a      	ldr	r2, [r3, #8]
9000399c:	687b      	ldr	r3, [r7, #4]
9000399e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
900039a0:	683b      	ldr	r3, [r7, #0]
900039a2:	681a      	ldr	r2, [r3, #0]
900039a4:	687b      	ldr	r3, [r7, #4]
900039a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
900039a8:	687b      	ldr	r3, [r7, #4]
900039aa:	4a10      	ldr	r2, [pc, #64]	; (900039ec <TIM_Base_SetConfig+0x114>)
900039ac:	4293      	cmp	r3, r2
900039ae:	d00f      	beq.n	900039d0 <TIM_Base_SetConfig+0xf8>
900039b0:	687b      	ldr	r3, [r7, #4]
900039b2:	4a12      	ldr	r2, [pc, #72]	; (900039fc <TIM_Base_SetConfig+0x124>)
900039b4:	4293      	cmp	r3, r2
900039b6:	d00b      	beq.n	900039d0 <TIM_Base_SetConfig+0xf8>
900039b8:	687b      	ldr	r3, [r7, #4]
900039ba:	4a11      	ldr	r2, [pc, #68]	; (90003a00 <TIM_Base_SetConfig+0x128>)
900039bc:	4293      	cmp	r3, r2
900039be:	d007      	beq.n	900039d0 <TIM_Base_SetConfig+0xf8>
900039c0:	687b      	ldr	r3, [r7, #4]
900039c2:	4a10      	ldr	r2, [pc, #64]	; (90003a04 <TIM_Base_SetConfig+0x12c>)
900039c4:	4293      	cmp	r3, r2
900039c6:	d003      	beq.n	900039d0 <TIM_Base_SetConfig+0xf8>
900039c8:	687b      	ldr	r3, [r7, #4]
900039ca:	4a0f      	ldr	r2, [pc, #60]	; (90003a08 <TIM_Base_SetConfig+0x130>)
900039cc:	4293      	cmp	r3, r2
900039ce:	d103      	bne.n	900039d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
900039d0:	683b      	ldr	r3, [r7, #0]
900039d2:	691a      	ldr	r2, [r3, #16]
900039d4:	687b      	ldr	r3, [r7, #4]
900039d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
900039d8:	687b      	ldr	r3, [r7, #4]
900039da:	2201      	movs	r2, #1
900039dc:	615a      	str	r2, [r3, #20]
}
900039de:	bf00      	nop
900039e0:	3714      	adds	r7, #20
900039e2:	46bd      	mov	sp, r7
900039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
900039e8:	4770      	bx	lr
900039ea:	bf00      	nop
900039ec:	40010000 	.word	0x40010000
900039f0:	40000400 	.word	0x40000400
900039f4:	40000800 	.word	0x40000800
900039f8:	40000c00 	.word	0x40000c00
900039fc:	40010400 	.word	0x40010400
90003a00:	40014000 	.word	0x40014000
90003a04:	40014400 	.word	0x40014400
90003a08:	40014800 	.word	0x40014800

90003a0c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
90003a0c:	b480      	push	{r7}
90003a0e:	b083      	sub	sp, #12
90003a10:	af00      	add	r7, sp, #0
90003a12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
90003a14:	bf00      	nop
90003a16:	370c      	adds	r7, #12
90003a18:	46bd      	mov	sp, r7
90003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
90003a1e:	4770      	bx	lr

90003a20 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
90003a20:	b480      	push	{r7}
90003a22:	b083      	sub	sp, #12
90003a24:	af00      	add	r7, sp, #0
90003a26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
90003a28:	bf00      	nop
90003a2a:	370c      	adds	r7, #12
90003a2c:	46bd      	mov	sp, r7
90003a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
90003a32:	4770      	bx	lr

90003a34 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
90003a34:	b480      	push	{r7}
90003a36:	b083      	sub	sp, #12
90003a38:	af00      	add	r7, sp, #0
90003a3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
90003a3c:	bf00      	nop
90003a3e:	370c      	adds	r7, #12
90003a40:	46bd      	mov	sp, r7
90003a42:	f85d 7b04 	ldr.w	r7, [sp], #4
90003a46:	4770      	bx	lr

90003a48 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
90003a48:	b5b0      	push	{r4, r5, r7, lr}
90003a4a:	b08c      	sub	sp, #48	; 0x30
90003a4c:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
90003a4e:	4b96      	ldr	r3, [pc, #600]	; (90003ca8 <MX_LWIP_Init+0x260>)
90003a50:	22c0      	movs	r2, #192	; 0xc0
90003a52:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
90003a54:	4b94      	ldr	r3, [pc, #592]	; (90003ca8 <MX_LWIP_Init+0x260>)
90003a56:	22a8      	movs	r2, #168	; 0xa8
90003a58:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 18;
90003a5a:	4b93      	ldr	r3, [pc, #588]	; (90003ca8 <MX_LWIP_Init+0x260>)
90003a5c:	2212      	movs	r2, #18
90003a5e:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 115;
90003a60:	4b91      	ldr	r3, [pc, #580]	; (90003ca8 <MX_LWIP_Init+0x260>)
90003a62:	2273      	movs	r2, #115	; 0x73
90003a64:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
90003a66:	4b91      	ldr	r3, [pc, #580]	; (90003cac <MX_LWIP_Init+0x264>)
90003a68:	22ff      	movs	r2, #255	; 0xff
90003a6a:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
90003a6c:	4b8f      	ldr	r3, [pc, #572]	; (90003cac <MX_LWIP_Init+0x264>)
90003a6e:	22ff      	movs	r2, #255	; 0xff
90003a70:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
90003a72:	4b8e      	ldr	r3, [pc, #568]	; (90003cac <MX_LWIP_Init+0x264>)
90003a74:	22ff      	movs	r2, #255	; 0xff
90003a76:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
90003a78:	4b8c      	ldr	r3, [pc, #560]	; (90003cac <MX_LWIP_Init+0x264>)
90003a7a:	2200      	movs	r2, #0
90003a7c:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
90003a7e:	4b8c      	ldr	r3, [pc, #560]	; (90003cb0 <MX_LWIP_Init+0x268>)
90003a80:	22c0      	movs	r2, #192	; 0xc0
90003a82:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
90003a84:	4b8a      	ldr	r3, [pc, #552]	; (90003cb0 <MX_LWIP_Init+0x268>)
90003a86:	22a8      	movs	r2, #168	; 0xa8
90003a88:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 18;
90003a8a:	4b89      	ldr	r3, [pc, #548]	; (90003cb0 <MX_LWIP_Init+0x268>)
90003a8c:	2212      	movs	r2, #18
90003a8e:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
90003a90:	4b87      	ldr	r3, [pc, #540]	; (90003cb0 <MX_LWIP_Init+0x268>)
90003a92:	2201      	movs	r2, #1
90003a94:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
90003a96:	2100      	movs	r1, #0
90003a98:	2000      	movs	r0, #0
90003a9a:	f003 fe77 	bl	9000778c <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
90003a9e:	4b82      	ldr	r3, [pc, #520]	; (90003ca8 <MX_LWIP_Init+0x260>)
90003aa0:	781b      	ldrb	r3, [r3, #0]
90003aa2:	061a      	lsls	r2, r3, #24
90003aa4:	4b80      	ldr	r3, [pc, #512]	; (90003ca8 <MX_LWIP_Init+0x260>)
90003aa6:	785b      	ldrb	r3, [r3, #1]
90003aa8:	041b      	lsls	r3, r3, #16
90003aaa:	431a      	orrs	r2, r3
90003aac:	4b7e      	ldr	r3, [pc, #504]	; (90003ca8 <MX_LWIP_Init+0x260>)
90003aae:	789b      	ldrb	r3, [r3, #2]
90003ab0:	021b      	lsls	r3, r3, #8
90003ab2:	4313      	orrs	r3, r2
90003ab4:	4a7c      	ldr	r2, [pc, #496]	; (90003ca8 <MX_LWIP_Init+0x260>)
90003ab6:	78d2      	ldrb	r2, [r2, #3]
90003ab8:	4313      	orrs	r3, r2
90003aba:	061a      	lsls	r2, r3, #24
90003abc:	4b7a      	ldr	r3, [pc, #488]	; (90003ca8 <MX_LWIP_Init+0x260>)
90003abe:	781b      	ldrb	r3, [r3, #0]
90003ac0:	0619      	lsls	r1, r3, #24
90003ac2:	4b79      	ldr	r3, [pc, #484]	; (90003ca8 <MX_LWIP_Init+0x260>)
90003ac4:	785b      	ldrb	r3, [r3, #1]
90003ac6:	041b      	lsls	r3, r3, #16
90003ac8:	4319      	orrs	r1, r3
90003aca:	4b77      	ldr	r3, [pc, #476]	; (90003ca8 <MX_LWIP_Init+0x260>)
90003acc:	789b      	ldrb	r3, [r3, #2]
90003ace:	021b      	lsls	r3, r3, #8
90003ad0:	430b      	orrs	r3, r1
90003ad2:	4975      	ldr	r1, [pc, #468]	; (90003ca8 <MX_LWIP_Init+0x260>)
90003ad4:	78c9      	ldrb	r1, [r1, #3]
90003ad6:	430b      	orrs	r3, r1
90003ad8:	021b      	lsls	r3, r3, #8
90003ada:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
90003ade:	431a      	orrs	r2, r3
90003ae0:	4b71      	ldr	r3, [pc, #452]	; (90003ca8 <MX_LWIP_Init+0x260>)
90003ae2:	781b      	ldrb	r3, [r3, #0]
90003ae4:	0619      	lsls	r1, r3, #24
90003ae6:	4b70      	ldr	r3, [pc, #448]	; (90003ca8 <MX_LWIP_Init+0x260>)
90003ae8:	785b      	ldrb	r3, [r3, #1]
90003aea:	041b      	lsls	r3, r3, #16
90003aec:	4319      	orrs	r1, r3
90003aee:	4b6e      	ldr	r3, [pc, #440]	; (90003ca8 <MX_LWIP_Init+0x260>)
90003af0:	789b      	ldrb	r3, [r3, #2]
90003af2:	021b      	lsls	r3, r3, #8
90003af4:	430b      	orrs	r3, r1
90003af6:	496c      	ldr	r1, [pc, #432]	; (90003ca8 <MX_LWIP_Init+0x260>)
90003af8:	78c9      	ldrb	r1, [r1, #3]
90003afa:	430b      	orrs	r3, r1
90003afc:	0a1b      	lsrs	r3, r3, #8
90003afe:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
90003b02:	431a      	orrs	r2, r3
90003b04:	4b68      	ldr	r3, [pc, #416]	; (90003ca8 <MX_LWIP_Init+0x260>)
90003b06:	781b      	ldrb	r3, [r3, #0]
90003b08:	0619      	lsls	r1, r3, #24
90003b0a:	4b67      	ldr	r3, [pc, #412]	; (90003ca8 <MX_LWIP_Init+0x260>)
90003b0c:	785b      	ldrb	r3, [r3, #1]
90003b0e:	041b      	lsls	r3, r3, #16
90003b10:	4319      	orrs	r1, r3
90003b12:	4b65      	ldr	r3, [pc, #404]	; (90003ca8 <MX_LWIP_Init+0x260>)
90003b14:	789b      	ldrb	r3, [r3, #2]
90003b16:	021b      	lsls	r3, r3, #8
90003b18:	430b      	orrs	r3, r1
90003b1a:	4963      	ldr	r1, [pc, #396]	; (90003ca8 <MX_LWIP_Init+0x260>)
90003b1c:	78c9      	ldrb	r1, [r1, #3]
90003b1e:	430b      	orrs	r3, r1
90003b20:	0e1b      	lsrs	r3, r3, #24
90003b22:	4313      	orrs	r3, r2
90003b24:	4a63      	ldr	r2, [pc, #396]	; (90003cb4 <MX_LWIP_Init+0x26c>)
90003b26:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
90003b28:	4b60      	ldr	r3, [pc, #384]	; (90003cac <MX_LWIP_Init+0x264>)
90003b2a:	781b      	ldrb	r3, [r3, #0]
90003b2c:	061a      	lsls	r2, r3, #24
90003b2e:	4b5f      	ldr	r3, [pc, #380]	; (90003cac <MX_LWIP_Init+0x264>)
90003b30:	785b      	ldrb	r3, [r3, #1]
90003b32:	041b      	lsls	r3, r3, #16
90003b34:	431a      	orrs	r2, r3
90003b36:	4b5d      	ldr	r3, [pc, #372]	; (90003cac <MX_LWIP_Init+0x264>)
90003b38:	789b      	ldrb	r3, [r3, #2]
90003b3a:	021b      	lsls	r3, r3, #8
90003b3c:	4313      	orrs	r3, r2
90003b3e:	4a5b      	ldr	r2, [pc, #364]	; (90003cac <MX_LWIP_Init+0x264>)
90003b40:	78d2      	ldrb	r2, [r2, #3]
90003b42:	4313      	orrs	r3, r2
90003b44:	061a      	lsls	r2, r3, #24
90003b46:	4b59      	ldr	r3, [pc, #356]	; (90003cac <MX_LWIP_Init+0x264>)
90003b48:	781b      	ldrb	r3, [r3, #0]
90003b4a:	0619      	lsls	r1, r3, #24
90003b4c:	4b57      	ldr	r3, [pc, #348]	; (90003cac <MX_LWIP_Init+0x264>)
90003b4e:	785b      	ldrb	r3, [r3, #1]
90003b50:	041b      	lsls	r3, r3, #16
90003b52:	4319      	orrs	r1, r3
90003b54:	4b55      	ldr	r3, [pc, #340]	; (90003cac <MX_LWIP_Init+0x264>)
90003b56:	789b      	ldrb	r3, [r3, #2]
90003b58:	021b      	lsls	r3, r3, #8
90003b5a:	430b      	orrs	r3, r1
90003b5c:	4953      	ldr	r1, [pc, #332]	; (90003cac <MX_LWIP_Init+0x264>)
90003b5e:	78c9      	ldrb	r1, [r1, #3]
90003b60:	430b      	orrs	r3, r1
90003b62:	021b      	lsls	r3, r3, #8
90003b64:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
90003b68:	431a      	orrs	r2, r3
90003b6a:	4b50      	ldr	r3, [pc, #320]	; (90003cac <MX_LWIP_Init+0x264>)
90003b6c:	781b      	ldrb	r3, [r3, #0]
90003b6e:	0619      	lsls	r1, r3, #24
90003b70:	4b4e      	ldr	r3, [pc, #312]	; (90003cac <MX_LWIP_Init+0x264>)
90003b72:	785b      	ldrb	r3, [r3, #1]
90003b74:	041b      	lsls	r3, r3, #16
90003b76:	4319      	orrs	r1, r3
90003b78:	4b4c      	ldr	r3, [pc, #304]	; (90003cac <MX_LWIP_Init+0x264>)
90003b7a:	789b      	ldrb	r3, [r3, #2]
90003b7c:	021b      	lsls	r3, r3, #8
90003b7e:	430b      	orrs	r3, r1
90003b80:	494a      	ldr	r1, [pc, #296]	; (90003cac <MX_LWIP_Init+0x264>)
90003b82:	78c9      	ldrb	r1, [r1, #3]
90003b84:	430b      	orrs	r3, r1
90003b86:	0a1b      	lsrs	r3, r3, #8
90003b88:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
90003b8c:	431a      	orrs	r2, r3
90003b8e:	4b47      	ldr	r3, [pc, #284]	; (90003cac <MX_LWIP_Init+0x264>)
90003b90:	781b      	ldrb	r3, [r3, #0]
90003b92:	0619      	lsls	r1, r3, #24
90003b94:	4b45      	ldr	r3, [pc, #276]	; (90003cac <MX_LWIP_Init+0x264>)
90003b96:	785b      	ldrb	r3, [r3, #1]
90003b98:	041b      	lsls	r3, r3, #16
90003b9a:	4319      	orrs	r1, r3
90003b9c:	4b43      	ldr	r3, [pc, #268]	; (90003cac <MX_LWIP_Init+0x264>)
90003b9e:	789b      	ldrb	r3, [r3, #2]
90003ba0:	021b      	lsls	r3, r3, #8
90003ba2:	430b      	orrs	r3, r1
90003ba4:	4941      	ldr	r1, [pc, #260]	; (90003cac <MX_LWIP_Init+0x264>)
90003ba6:	78c9      	ldrb	r1, [r1, #3]
90003ba8:	430b      	orrs	r3, r1
90003baa:	0e1b      	lsrs	r3, r3, #24
90003bac:	4313      	orrs	r3, r2
90003bae:	4a42      	ldr	r2, [pc, #264]	; (90003cb8 <MX_LWIP_Init+0x270>)
90003bb0:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
90003bb2:	4b3f      	ldr	r3, [pc, #252]	; (90003cb0 <MX_LWIP_Init+0x268>)
90003bb4:	781b      	ldrb	r3, [r3, #0]
90003bb6:	061a      	lsls	r2, r3, #24
90003bb8:	4b3d      	ldr	r3, [pc, #244]	; (90003cb0 <MX_LWIP_Init+0x268>)
90003bba:	785b      	ldrb	r3, [r3, #1]
90003bbc:	041b      	lsls	r3, r3, #16
90003bbe:	431a      	orrs	r2, r3
90003bc0:	4b3b      	ldr	r3, [pc, #236]	; (90003cb0 <MX_LWIP_Init+0x268>)
90003bc2:	789b      	ldrb	r3, [r3, #2]
90003bc4:	021b      	lsls	r3, r3, #8
90003bc6:	4313      	orrs	r3, r2
90003bc8:	4a39      	ldr	r2, [pc, #228]	; (90003cb0 <MX_LWIP_Init+0x268>)
90003bca:	78d2      	ldrb	r2, [r2, #3]
90003bcc:	4313      	orrs	r3, r2
90003bce:	061a      	lsls	r2, r3, #24
90003bd0:	4b37      	ldr	r3, [pc, #220]	; (90003cb0 <MX_LWIP_Init+0x268>)
90003bd2:	781b      	ldrb	r3, [r3, #0]
90003bd4:	0619      	lsls	r1, r3, #24
90003bd6:	4b36      	ldr	r3, [pc, #216]	; (90003cb0 <MX_LWIP_Init+0x268>)
90003bd8:	785b      	ldrb	r3, [r3, #1]
90003bda:	041b      	lsls	r3, r3, #16
90003bdc:	4319      	orrs	r1, r3
90003bde:	4b34      	ldr	r3, [pc, #208]	; (90003cb0 <MX_LWIP_Init+0x268>)
90003be0:	789b      	ldrb	r3, [r3, #2]
90003be2:	021b      	lsls	r3, r3, #8
90003be4:	430b      	orrs	r3, r1
90003be6:	4932      	ldr	r1, [pc, #200]	; (90003cb0 <MX_LWIP_Init+0x268>)
90003be8:	78c9      	ldrb	r1, [r1, #3]
90003bea:	430b      	orrs	r3, r1
90003bec:	021b      	lsls	r3, r3, #8
90003bee:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
90003bf2:	431a      	orrs	r2, r3
90003bf4:	4b2e      	ldr	r3, [pc, #184]	; (90003cb0 <MX_LWIP_Init+0x268>)
90003bf6:	781b      	ldrb	r3, [r3, #0]
90003bf8:	0619      	lsls	r1, r3, #24
90003bfa:	4b2d      	ldr	r3, [pc, #180]	; (90003cb0 <MX_LWIP_Init+0x268>)
90003bfc:	785b      	ldrb	r3, [r3, #1]
90003bfe:	041b      	lsls	r3, r3, #16
90003c00:	4319      	orrs	r1, r3
90003c02:	4b2b      	ldr	r3, [pc, #172]	; (90003cb0 <MX_LWIP_Init+0x268>)
90003c04:	789b      	ldrb	r3, [r3, #2]
90003c06:	021b      	lsls	r3, r3, #8
90003c08:	430b      	orrs	r3, r1
90003c0a:	4929      	ldr	r1, [pc, #164]	; (90003cb0 <MX_LWIP_Init+0x268>)
90003c0c:	78c9      	ldrb	r1, [r1, #3]
90003c0e:	430b      	orrs	r3, r1
90003c10:	0a1b      	lsrs	r3, r3, #8
90003c12:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
90003c16:	431a      	orrs	r2, r3
90003c18:	4b25      	ldr	r3, [pc, #148]	; (90003cb0 <MX_LWIP_Init+0x268>)
90003c1a:	781b      	ldrb	r3, [r3, #0]
90003c1c:	0619      	lsls	r1, r3, #24
90003c1e:	4b24      	ldr	r3, [pc, #144]	; (90003cb0 <MX_LWIP_Init+0x268>)
90003c20:	785b      	ldrb	r3, [r3, #1]
90003c22:	041b      	lsls	r3, r3, #16
90003c24:	4319      	orrs	r1, r3
90003c26:	4b22      	ldr	r3, [pc, #136]	; (90003cb0 <MX_LWIP_Init+0x268>)
90003c28:	789b      	ldrb	r3, [r3, #2]
90003c2a:	021b      	lsls	r3, r3, #8
90003c2c:	430b      	orrs	r3, r1
90003c2e:	4920      	ldr	r1, [pc, #128]	; (90003cb0 <MX_LWIP_Init+0x268>)
90003c30:	78c9      	ldrb	r1, [r1, #3]
90003c32:	430b      	orrs	r3, r1
90003c34:	0e1b      	lsrs	r3, r3, #24
90003c36:	4313      	orrs	r3, r2
90003c38:	4a20      	ldr	r2, [pc, #128]	; (90003cbc <MX_LWIP_Init+0x274>)
90003c3a:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
90003c3c:	4b20      	ldr	r3, [pc, #128]	; (90003cc0 <MX_LWIP_Init+0x278>)
90003c3e:	9302      	str	r3, [sp, #8]
90003c40:	4b20      	ldr	r3, [pc, #128]	; (90003cc4 <MX_LWIP_Init+0x27c>)
90003c42:	9301      	str	r3, [sp, #4]
90003c44:	2300      	movs	r3, #0
90003c46:	9300      	str	r3, [sp, #0]
90003c48:	4b1c      	ldr	r3, [pc, #112]	; (90003cbc <MX_LWIP_Init+0x274>)
90003c4a:	4a1b      	ldr	r2, [pc, #108]	; (90003cb8 <MX_LWIP_Init+0x270>)
90003c4c:	4919      	ldr	r1, [pc, #100]	; (90003cb4 <MX_LWIP_Init+0x26c>)
90003c4e:	481e      	ldr	r0, [pc, #120]	; (90003cc8 <MX_LWIP_Init+0x280>)
90003c50:	f005 fa7e 	bl	90009150 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
90003c54:	481c      	ldr	r0, [pc, #112]	; (90003cc8 <MX_LWIP_Init+0x280>)
90003c56:	f005 fc2d 	bl	900094b4 <netif_set_default>

  if (netif_is_link_up(&gnetif))
90003c5a:	4b1b      	ldr	r3, [pc, #108]	; (90003cc8 <MX_LWIP_Init+0x280>)
90003c5c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
90003c60:	089b      	lsrs	r3, r3, #2
90003c62:	f003 0301 	and.w	r3, r3, #1
90003c66:	b2db      	uxtb	r3, r3
90003c68:	2b00      	cmp	r3, #0
90003c6a:	d003      	beq.n	90003c74 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
90003c6c:	4816      	ldr	r0, [pc, #88]	; (90003cc8 <MX_LWIP_Init+0x280>)
90003c6e:	f005 fc31 	bl	900094d4 <netif_set_up>
90003c72:	e002      	b.n	90003c7a <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
90003c74:	4814      	ldr	r0, [pc, #80]	; (90003cc8 <MX_LWIP_Init+0x280>)
90003c76:	f005 fc99 	bl	900095ac <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
90003c7a:	4914      	ldr	r1, [pc, #80]	; (90003ccc <MX_LWIP_Init+0x284>)
90003c7c:	4812      	ldr	r0, [pc, #72]	; (90003cc8 <MX_LWIP_Init+0x280>)
90003c7e:	f005 fd2b 	bl	900096d8 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
90003c82:	4b13      	ldr	r3, [pc, #76]	; (90003cd0 <MX_LWIP_Init+0x288>)
90003c84:	1d3c      	adds	r4, r7, #4
90003c86:	461d      	mov	r5, r3
90003c88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
90003c8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
90003c8c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
90003c90:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
90003c94:	1d3b      	adds	r3, r7, #4
90003c96:	490c      	ldr	r1, [pc, #48]	; (90003cc8 <MX_LWIP_Init+0x280>)
90003c98:	4618      	mov	r0, r3
90003c9a:	f000 fd65 	bl	90004768 <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
90003c9e:	bf00      	nop
90003ca0:	3720      	adds	r7, #32
90003ca2:	46bd      	mov	sp, r7
90003ca4:	bdb0      	pop	{r4, r5, r7, pc}
90003ca6:	bf00      	nop
90003ca8:	240052d4 	.word	0x240052d4
90003cac:	240052d8 	.word	0x240052d8
90003cb0:	240052dc 	.word	0x240052dc
90003cb4:	240052c8 	.word	0x240052c8
90003cb8:	240052cc 	.word	0x240052cc
90003cbc:	240052d0 	.word	0x240052d0
90003cc0:	900076c9 	.word	0x900076c9
90003cc4:	900041d5 	.word	0x900041d5
90003cc8:	24005294 	.word	0x24005294
90003ccc:	90003cd5 	.word	0x90003cd5
90003cd0:	90014518 	.word	0x90014518

90003cd4 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
90003cd4:	b480      	push	{r7}
90003cd6:	b083      	sub	sp, #12
90003cd8:	af00      	add	r7, sp, #0
90003cda:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
90003cdc:	bf00      	nop
90003cde:	370c      	adds	r7, #12
90003ce0:	46bd      	mov	sp, r7
90003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
90003ce6:	4770      	bx	lr

90003ce8 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
90003ce8:	b580      	push	{r7, lr}
90003cea:	b082      	sub	sp, #8
90003cec:	af00      	add	r7, sp, #0
90003cee:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
90003cf0:	4b04      	ldr	r3, [pc, #16]	; (90003d04 <HAL_ETH_RxCpltCallback+0x1c>)
90003cf2:	681b      	ldr	r3, [r3, #0]
90003cf4:	4618      	mov	r0, r3
90003cf6:	f000 fe81 	bl	900049fc <osSemaphoreRelease>
}
90003cfa:	bf00      	nop
90003cfc:	3708      	adds	r7, #8
90003cfe:	46bd      	mov	sp, r7
90003d00:	bd80      	pop	{r7, pc}
90003d02:	bf00      	nop
90003d04:	24009c6c 	.word	0x24009c6c

90003d08 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
90003d08:	b580      	push	{r7, lr}
90003d0a:	b082      	sub	sp, #8
90003d0c:	af00      	add	r7, sp, #0
90003d0e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
90003d10:	4b04      	ldr	r3, [pc, #16]	; (90003d24 <HAL_ETH_TxCpltCallback+0x1c>)
90003d12:	681b      	ldr	r3, [r3, #0]
90003d14:	4618      	mov	r0, r3
90003d16:	f000 fe71 	bl	900049fc <osSemaphoreRelease>
}
90003d1a:	bf00      	nop
90003d1c:	3708      	adds	r7, #8
90003d1e:	46bd      	mov	sp, r7
90003d20:	bd80      	pop	{r7, pc}
90003d22:	bf00      	nop
90003d24:	24009c70 	.word	0x24009c70

90003d28 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
90003d28:	b580      	push	{r7, lr}
90003d2a:	b082      	sub	sp, #8
90003d2c:	af00      	add	r7, sp, #0
90003d2e:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMACSR_RBU) == ETH_DMACSR_RBU)
90003d30:	6878      	ldr	r0, [r7, #4]
90003d32:	f7fe fa61 	bl	900021f8 <HAL_ETH_GetDMAError>
90003d36:	4603      	mov	r3, r0
90003d38:	f003 0380 	and.w	r3, r3, #128	; 0x80
90003d3c:	2b80      	cmp	r3, #128	; 0x80
90003d3e:	d104      	bne.n	90003d4a <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
90003d40:	4b04      	ldr	r3, [pc, #16]	; (90003d54 <HAL_ETH_ErrorCallback+0x2c>)
90003d42:	681b      	ldr	r3, [r3, #0]
90003d44:	4618      	mov	r0, r3
90003d46:	f000 fe59 	bl	900049fc <osSemaphoreRelease>
  }
}
90003d4a:	bf00      	nop
90003d4c:	3708      	adds	r7, #8
90003d4e:	46bd      	mov	sp, r7
90003d50:	bd80      	pop	{r7, pc}
90003d52:	bf00      	nop
90003d54:	24009c6c 	.word	0x24009c6c

90003d58 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
90003d58:	b5b0      	push	{r4, r5, r7, lr}
90003d5a:	b0a8      	sub	sp, #160	; 0xa0
90003d5c:	af00      	add	r7, sp, #0
90003d5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
90003d60:	2300      	movs	r3, #0
90003d62:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t duplex, speed = 0;
90003d66:	2300      	movs	r3, #0
90003d68:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  int32_t PHYLinkState = 0;
90003d6c:	2300      	movs	r3, #0
90003d6e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  ETH_MACConfigTypeDef MACConf = {0};
90003d72:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90003d76:	2264      	movs	r2, #100	; 0x64
90003d78:	2100      	movs	r1, #0
90003d7a:	4618      	mov	r0, r3
90003d7c:	f00f fbbf 	bl	900134fe <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
90003d80:	4b84      	ldr	r3, [pc, #528]	; (90003f94 <low_level_init+0x23c>)
90003d82:	4a85      	ldr	r2, [pc, #532]	; (90003f98 <low_level_init+0x240>)
90003d84:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
90003d86:	2300      	movs	r3, #0
90003d88:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  MACAddr[1] = 0x80;
90003d8c:	2380      	movs	r3, #128	; 0x80
90003d8e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  MACAddr[2] = 0xE1;
90003d92:	23e1      	movs	r3, #225	; 0xe1
90003d94:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  MACAddr[3] = 0x00;
90003d98:	2300      	movs	r3, #0
90003d9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  MACAddr[4] = 0x00;
90003d9e:	2300      	movs	r3, #0
90003da0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  MACAddr[5] = 0x00;
90003da4:	2300      	movs	r3, #0
90003da6:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  heth.Init.MACAddr = &MACAddr[0];
90003daa:	4a7a      	ldr	r2, [pc, #488]	; (90003f94 <low_level_init+0x23c>)
90003dac:	f107 0324 	add.w	r3, r7, #36	; 0x24
90003db0:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
90003db2:	4b78      	ldr	r3, [pc, #480]	; (90003f94 <low_level_init+0x23c>)
90003db4:	2201      	movs	r2, #1
90003db6:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
90003db8:	4b76      	ldr	r3, [pc, #472]	; (90003f94 <low_level_init+0x23c>)
90003dba:	4a78      	ldr	r2, [pc, #480]	; (90003f9c <low_level_init+0x244>)
90003dbc:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
90003dbe:	4b75      	ldr	r3, [pc, #468]	; (90003f94 <low_level_init+0x23c>)
90003dc0:	4a77      	ldr	r2, [pc, #476]	; (90003fa0 <low_level_init+0x248>)
90003dc2:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
90003dc4:	4b73      	ldr	r3, [pc, #460]	; (90003f94 <low_level_init+0x23c>)
90003dc6:	f44f 62c0 	mov.w	r2, #1536	; 0x600
90003dca:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
90003dcc:	4871      	ldr	r0, [pc, #452]	; (90003f94 <low_level_init+0x23c>)
90003dce:	f7fd f9d1 	bl	90001174 <HAL_ETH_Init>
90003dd2:	4603      	mov	r3, r0
90003dd4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
90003dd8:	2238      	movs	r2, #56	; 0x38
90003dda:	2100      	movs	r1, #0
90003ddc:	4871      	ldr	r0, [pc, #452]	; (90003fa4 <low_level_init+0x24c>)
90003dde:	f00f fb8e 	bl	900134fe <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
90003de2:	4b70      	ldr	r3, [pc, #448]	; (90003fa4 <low_level_init+0x24c>)
90003de4:	2221      	movs	r2, #33	; 0x21
90003de6:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
90003de8:	4b6e      	ldr	r3, [pc, #440]	; (90003fa4 <low_level_init+0x24c>)
90003dea:	f44f 3240 	mov.w	r2, #196608	; 0x30000
90003dee:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
90003df0:	4b6c      	ldr	r3, [pc, #432]	; (90003fa4 <low_level_init+0x24c>)
90003df2:	2200      	movs	r2, #0
90003df4:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
90003df6:	486c      	ldr	r0, [pc, #432]	; (90003fa8 <low_level_init+0x250>)
90003df8:	f005 f864 	bl	90008ec4 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
90003dfc:	687b      	ldr	r3, [r7, #4]
90003dfe:	2206      	movs	r2, #6
90003e00:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
90003e04:	4b63      	ldr	r3, [pc, #396]	; (90003f94 <low_level_init+0x23c>)
90003e06:	685b      	ldr	r3, [r3, #4]
90003e08:	781a      	ldrb	r2, [r3, #0]
90003e0a:	687b      	ldr	r3, [r7, #4]
90003e0c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
90003e10:	4b60      	ldr	r3, [pc, #384]	; (90003f94 <low_level_init+0x23c>)
90003e12:	685b      	ldr	r3, [r3, #4]
90003e14:	785a      	ldrb	r2, [r3, #1]
90003e16:	687b      	ldr	r3, [r7, #4]
90003e18:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
90003e1c:	4b5d      	ldr	r3, [pc, #372]	; (90003f94 <low_level_init+0x23c>)
90003e1e:	685b      	ldr	r3, [r3, #4]
90003e20:	789a      	ldrb	r2, [r3, #2]
90003e22:	687b      	ldr	r3, [r7, #4]
90003e24:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
90003e28:	4b5a      	ldr	r3, [pc, #360]	; (90003f94 <low_level_init+0x23c>)
90003e2a:	685b      	ldr	r3, [r3, #4]
90003e2c:	78da      	ldrb	r2, [r3, #3]
90003e2e:	687b      	ldr	r3, [r7, #4]
90003e30:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
90003e34:	4b57      	ldr	r3, [pc, #348]	; (90003f94 <low_level_init+0x23c>)
90003e36:	685b      	ldr	r3, [r3, #4]
90003e38:	791a      	ldrb	r2, [r3, #4]
90003e3a:	687b      	ldr	r3, [r7, #4]
90003e3c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
90003e40:	4b54      	ldr	r3, [pc, #336]	; (90003f94 <low_level_init+0x23c>)
90003e42:	685b      	ldr	r3, [r3, #4]
90003e44:	795a      	ldrb	r2, [r3, #5]
90003e46:	687b      	ldr	r3, [r7, #4]
90003e48:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
90003e4c:	687b      	ldr	r3, [r7, #4]
90003e4e:	f240 52dc 	movw	r2, #1500	; 0x5dc
90003e52:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
90003e54:	687b      	ldr	r3, [r7, #4]
90003e56:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
90003e5a:	f043 030a 	orr.w	r3, r3, #10
90003e5e:	b2da      	uxtb	r2, r3
90003e60:	687b      	ldr	r3, [r7, #4]
90003e62:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = xSemaphoreCreateBinary();
90003e66:	2203      	movs	r2, #3
90003e68:	2100      	movs	r1, #0
90003e6a:	2001      	movs	r0, #1
90003e6c:	f001 f86c 	bl	90004f48 <xQueueGenericCreate>
90003e70:	4603      	mov	r3, r0
90003e72:	4a4e      	ldr	r2, [pc, #312]	; (90003fac <low_level_init+0x254>)
90003e74:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = xSemaphoreCreateBinary();
90003e76:	2203      	movs	r2, #3
90003e78:	2100      	movs	r1, #0
90003e7a:	2001      	movs	r0, #1
90003e7c:	f001 f864 	bl	90004f48 <xQueueGenericCreate>
90003e80:	4603      	mov	r3, r0
90003e82:	4a4b      	ldr	r2, [pc, #300]	; (90003fb0 <low_level_init+0x258>)
90003e84:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
90003e86:	4b4b      	ldr	r3, [pc, #300]	; (90003fb4 <low_level_init+0x25c>)
90003e88:	f107 0408 	add.w	r4, r7, #8
90003e8c:	461d      	mov	r5, r3
90003e8e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
90003e90:	c40f      	stmia	r4!, {r0, r1, r2, r3}
90003e92:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
90003e96:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
90003e9a:	f107 0308 	add.w	r3, r7, #8
90003e9e:	6879      	ldr	r1, [r7, #4]
90003ea0:	4618      	mov	r0, r3
90003ea2:	f000 fc61 	bl	90004768 <osThreadCreate>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
90003ea6:	4944      	ldr	r1, [pc, #272]	; (90003fb8 <low_level_init+0x260>)
90003ea8:	4844      	ldr	r0, [pc, #272]	; (90003fbc <low_level_init+0x264>)
90003eaa:	f7fc fe36 	bl	90000b1a <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
90003eae:	4843      	ldr	r0, [pc, #268]	; (90003fbc <low_level_init+0x264>)
90003eb0:	f7fc fe65 	bl	90000b7e <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
90003eb4:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
90003eb8:	2b00      	cmp	r3, #0
90003eba:	d164      	bne.n	90003f86 <low_level_init+0x22e>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
90003ebc:	483f      	ldr	r0, [pc, #252]	; (90003fbc <low_level_init+0x264>)
90003ebe:	f7fc ff06 	bl	90000cce <LAN8742_GetLinkState>
90003ec2:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
90003ec6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
90003eca:	2b01      	cmp	r3, #1
90003ecc:	dc06      	bgt.n	90003edc <low_level_init+0x184>
    {
      netif_set_link_down(netif);
90003ece:	6878      	ldr	r0, [r7, #4]
90003ed0:	f005 fbd2 	bl	90009678 <netif_set_link_down>
      netif_set_down(netif);
90003ed4:	6878      	ldr	r0, [r7, #4]
90003ed6:	f005 fb69 	bl	900095ac <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
90003eda:	e056      	b.n	90003f8a <low_level_init+0x232>
      switch (PHYLinkState)
90003edc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
90003ee0:	3b02      	subs	r3, #2
90003ee2:	2b03      	cmp	r3, #3
90003ee4:	d82a      	bhi.n	90003f3c <low_level_init+0x1e4>
90003ee6:	a201      	add	r2, pc, #4	; (adr r2, 90003eec <low_level_init+0x194>)
90003ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90003eec:	90003efd 	.word	0x90003efd
90003ef0:	90003f0f 	.word	0x90003f0f
90003ef4:	90003f1f 	.word	0x90003f1f
90003ef8:	90003f2f 	.word	0x90003f2f
        duplex = ETH_FULLDUPLEX_MODE;
90003efc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
90003f00:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
90003f04:	f44f 4380 	mov.w	r3, #16384	; 0x4000
90003f08:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
90003f0c:	e01f      	b.n	90003f4e <low_level_init+0x1f6>
        duplex = ETH_HALFDUPLEX_MODE;
90003f0e:	2300      	movs	r3, #0
90003f10:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
90003f14:	f44f 4380 	mov.w	r3, #16384	; 0x4000
90003f18:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
90003f1c:	e017      	b.n	90003f4e <low_level_init+0x1f6>
        duplex = ETH_FULLDUPLEX_MODE;
90003f1e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
90003f22:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_10M;
90003f26:	2300      	movs	r3, #0
90003f28:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
90003f2c:	e00f      	b.n	90003f4e <low_level_init+0x1f6>
        duplex = ETH_HALFDUPLEX_MODE;
90003f2e:	2300      	movs	r3, #0
90003f30:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_10M;
90003f34:	2300      	movs	r3, #0
90003f36:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
90003f3a:	e008      	b.n	90003f4e <low_level_init+0x1f6>
        duplex = ETH_FULLDUPLEX_MODE;
90003f3c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
90003f40:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
90003f44:	f44f 4380 	mov.w	r3, #16384	; 0x4000
90003f48:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
90003f4c:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
90003f4e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90003f52:	4619      	mov	r1, r3
90003f54:	480f      	ldr	r0, [pc, #60]	; (90003f94 <low_level_init+0x23c>)
90003f56:	f7fd ff09 	bl	90001d6c <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
90003f5a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
90003f5e:	647b      	str	r3, [r7, #68]	; 0x44
    MACConf.Speed = speed;
90003f60:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
90003f64:	643b      	str	r3, [r7, #64]	; 0x40
    HAL_ETH_SetMACConfig(&heth, &MACConf);
90003f66:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90003f6a:	4619      	mov	r1, r3
90003f6c:	4809      	ldr	r0, [pc, #36]	; (90003f94 <low_level_init+0x23c>)
90003f6e:	f7fe f8d1 	bl	90002114 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
90003f72:	4808      	ldr	r0, [pc, #32]	; (90003f94 <low_level_init+0x23c>)
90003f74:	f7fd fa46 	bl	90001404 <HAL_ETH_Start_IT>
    netif_set_up(netif);
90003f78:	6878      	ldr	r0, [r7, #4]
90003f7a:	f005 faab 	bl	900094d4 <netif_set_up>
    netif_set_link_up(netif);
90003f7e:	6878      	ldr	r0, [r7, #4]
90003f80:	f005 fb46 	bl	90009610 <netif_set_link_up>
}
90003f84:	e001      	b.n	90003f8a <low_level_init+0x232>
    Error_Handler();
90003f86:	f7fc fb99 	bl	900006bc <Error_Handler>
}
90003f8a:	bf00      	nop
90003f8c:	37a0      	adds	r7, #160	; 0xa0
90003f8e:	46bd      	mov	sp, r7
90003f90:	bdb0      	pop	{r4, r5, r7, pc}
90003f92:	bf00      	nop
90003f94:	24009c74 	.word	0x24009c74
90003f98:	40028000 	.word	0x40028000
90003f9c:	30000060 	.word	0x30000060
90003fa0:	30000000 	.word	0x30000000
90003fa4:	24009d24 	.word	0x24009d24
90003fa8:	9001726c 	.word	0x9001726c
90003fac:	24009c6c 	.word	0x24009c6c
90003fb0:	24009c70 	.word	0x24009c70
90003fb4:	9001453c 	.word	0x9001453c
90003fb8:	24000010 	.word	0x24000010
90003fbc:	24009d5c 	.word	0x24009d5c

90003fc0 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
90003fc0:	b580      	push	{r7, lr}
90003fc2:	b094      	sub	sp, #80	; 0x50
90003fc4:	af00      	add	r7, sp, #0
90003fc6:	6078      	str	r0, [r7, #4]
90003fc8:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
90003fca:	2300      	movs	r3, #0
90003fcc:	64fb      	str	r3, [r7, #76]	; 0x4c
  struct pbuf *q = NULL;
90003fce:	2300      	movs	r3, #0
90003fd0:	64bb      	str	r3, [r7, #72]	; 0x48
  err_t errval = ERR_OK;
90003fd2:	2300      	movs	r3, #0
90003fd4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
90003fd8:	f107 0308 	add.w	r3, r7, #8
90003fdc:	2230      	movs	r2, #48	; 0x30
90003fde:	2100      	movs	r1, #0
90003fe0:	4618      	mov	r0, r3
90003fe2:	f00f fa8c 	bl	900134fe <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
90003fe6:	f107 0308 	add.w	r3, r7, #8
90003fea:	2230      	movs	r2, #48	; 0x30
90003fec:	2100      	movs	r1, #0
90003fee:	4618      	mov	r0, r3
90003ff0:	f00f fa85 	bl	900134fe <memset>

  for(q = p; q != NULL; q = q->next)
90003ff4:	683b      	ldr	r3, [r7, #0]
90003ff6:	64bb      	str	r3, [r7, #72]	; 0x48
90003ff8:	e045      	b.n	90004086 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
90003ffa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
90003ffc:	2b03      	cmp	r3, #3
90003ffe:	d902      	bls.n	90004006 <low_level_output+0x46>
      return ERR_IF;
90004000:	f06f 030b 	mvn.w	r3, #11
90004004:	e096      	b.n	90004134 <low_level_output+0x174>

    Txbuffer[i].buffer = q->payload;
90004006:	6cbb      	ldr	r3, [r7, #72]	; 0x48
90004008:	6859      	ldr	r1, [r3, #4]
9000400a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
9000400c:	4613      	mov	r3, r2
9000400e:	005b      	lsls	r3, r3, #1
90004010:	4413      	add	r3, r2
90004012:	009b      	lsls	r3, r3, #2
90004014:	3350      	adds	r3, #80	; 0x50
90004016:	443b      	add	r3, r7
90004018:	3b48      	subs	r3, #72	; 0x48
9000401a:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
9000401c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
9000401e:	895b      	ldrh	r3, [r3, #10]
90004020:	4619      	mov	r1, r3
90004022:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
90004024:	4613      	mov	r3, r2
90004026:	005b      	lsls	r3, r3, #1
90004028:	4413      	add	r3, r2
9000402a:	009b      	lsls	r3, r3, #2
9000402c:	3350      	adds	r3, #80	; 0x50
9000402e:	443b      	add	r3, r7
90004030:	3b44      	subs	r3, #68	; 0x44
90004032:	6019      	str	r1, [r3, #0]

    if(i>0)
90004034:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
90004036:	2b00      	cmp	r3, #0
90004038:	d011      	beq.n	9000405e <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
9000403a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
9000403c:	1e5a      	subs	r2, r3, #1
9000403e:	f107 0008 	add.w	r0, r7, #8
90004042:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
90004044:	460b      	mov	r3, r1
90004046:	005b      	lsls	r3, r3, #1
90004048:	440b      	add	r3, r1
9000404a:	009b      	lsls	r3, r3, #2
9000404c:	18c1      	adds	r1, r0, r3
9000404e:	4613      	mov	r3, r2
90004050:	005b      	lsls	r3, r3, #1
90004052:	4413      	add	r3, r2
90004054:	009b      	lsls	r3, r3, #2
90004056:	3350      	adds	r3, #80	; 0x50
90004058:	443b      	add	r3, r7
9000405a:	3b40      	subs	r3, #64	; 0x40
9000405c:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
9000405e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
90004060:	681b      	ldr	r3, [r3, #0]
90004062:	2b00      	cmp	r3, #0
90004064:	d109      	bne.n	9000407a <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
90004066:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
90004068:	4613      	mov	r3, r2
9000406a:	005b      	lsls	r3, r3, #1
9000406c:	4413      	add	r3, r2
9000406e:	009b      	lsls	r3, r3, #2
90004070:	3350      	adds	r3, #80	; 0x50
90004072:	443b      	add	r3, r7
90004074:	3b40      	subs	r3, #64	; 0x40
90004076:	2200      	movs	r2, #0
90004078:	601a      	str	r2, [r3, #0]
    }

    i++;
9000407a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
9000407c:	3301      	adds	r3, #1
9000407e:	64fb      	str	r3, [r7, #76]	; 0x4c
  for(q = p; q != NULL; q = q->next)
90004080:	6cbb      	ldr	r3, [r7, #72]	; 0x48
90004082:	681b      	ldr	r3, [r3, #0]
90004084:	64bb      	str	r3, [r7, #72]	; 0x48
90004086:	6cbb      	ldr	r3, [r7, #72]	; 0x48
90004088:	2b00      	cmp	r3, #0
9000408a:	d1b6      	bne.n	90003ffa <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
9000408c:	683b      	ldr	r3, [r7, #0]
9000408e:	891b      	ldrh	r3, [r3, #8]
90004090:	461a      	mov	r2, r3
90004092:	4b2a      	ldr	r3, [pc, #168]	; (9000413c <low_level_output+0x17c>)
90004094:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
90004096:	4a29      	ldr	r2, [pc, #164]	; (9000413c <low_level_output+0x17c>)
90004098:	f107 0308 	add.w	r3, r7, #8
9000409c:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
9000409e:	4a27      	ldr	r2, [pc, #156]	; (9000413c <low_level_output+0x17c>)
900040a0:	683b      	ldr	r3, [r7, #0]
900040a2:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
900040a4:	6838      	ldr	r0, [r7, #0]
900040a6:	f005 ff6b 	bl	90009f80 <pbuf_ref>

  HAL_ETH_Transmit_IT(&heth, &TxConfig);
900040aa:	4924      	ldr	r1, [pc, #144]	; (9000413c <low_level_output+0x17c>)
900040ac:	4824      	ldr	r0, [pc, #144]	; (90004140 <low_level_output+0x180>)
900040ae:	f7fd faad 	bl	9000160c <HAL_ETH_Transmit_IT>
  while(osSemaphoreWait(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
900040b2:	bf00      	nop
900040b4:	4b23      	ldr	r3, [pc, #140]	; (90004144 <low_level_output+0x184>)
900040b6:	681b      	ldr	r3, [r3, #0]
900040b8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
900040bc:	4618      	mov	r0, r3
900040be:	f000 fc4f 	bl	90004960 <osSemaphoreWait>
900040c2:	4603      	mov	r3, r0
900040c4:	2b00      	cmp	r3, #0
900040c6:	d1f5      	bne.n	900040b4 <low_level_output+0xf4>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
900040c8:	4b1f      	ldr	r3, [pc, #124]	; (90004148 <low_level_output+0x188>)
900040ca:	2200      	movs	r2, #0
900040cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
900040d0:	f3bf 8f4f 	dsb	sy
}
900040d4:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
900040d6:	4b1c      	ldr	r3, [pc, #112]	; (90004148 <low_level_output+0x188>)
900040d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
900040dc:	643b      	str	r3, [r7, #64]	; 0x40

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
900040de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
900040e0:	0b5b      	lsrs	r3, r3, #13
900040e2:	f3c3 030e 	ubfx	r3, r3, #0, #15
900040e6:	63fb      	str	r3, [r7, #60]	; 0x3c
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
900040e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
900040ea:	08db      	lsrs	r3, r3, #3
900040ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
900040f0:	63bb      	str	r3, [r7, #56]	; 0x38
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
900040f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
900040f4:	015a      	lsls	r2, r3, #5
900040f6:	f643 73e0 	movw	r3, #16352	; 0x3fe0
900040fa:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
900040fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
900040fe:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
90004100:	4911      	ldr	r1, [pc, #68]	; (90004148 <low_level_output+0x188>)
90004102:	4313      	orrs	r3, r2
90004104:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
90004108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000410a:	1e5a      	subs	r2, r3, #1
9000410c:	63ba      	str	r2, [r7, #56]	; 0x38
9000410e:	2b00      	cmp	r3, #0
90004110:	d1ef      	bne.n	900040f2 <low_level_output+0x132>
    } while(sets-- != 0U);
90004112:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
90004114:	1e5a      	subs	r2, r3, #1
90004116:	63fa      	str	r2, [r7, #60]	; 0x3c
90004118:	2b00      	cmp	r3, #0
9000411a:	d1e5      	bne.n	900040e8 <low_level_output+0x128>
  __ASM volatile ("dsb 0xF":::"memory");
9000411c:	f3bf 8f4f 	dsb	sy
}
90004120:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
90004122:	f3bf 8f6f 	isb	sy
}
90004126:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
90004128:	bf00      	nop

  {
  }
  SCB_CleanInvalidateDCache(); //<-- Add this line if it is missing
  HAL_ETH_ReleaseTxPacket(&heth);
9000412a:	4805      	ldr	r0, [pc, #20]	; (90004140 <low_level_output+0x180>)
9000412c:	f7fd fbed 	bl	9000190a <HAL_ETH_ReleaseTxPacket>

  return errval;
90004130:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
90004134:	4618      	mov	r0, r3
90004136:	3750      	adds	r7, #80	; 0x50
90004138:	46bd      	mov	sp, r7
9000413a:	bd80      	pop	{r7, pc}
9000413c:	24009d24 	.word	0x24009d24
90004140:	24009c74 	.word	0x24009c74
90004144:	24009c70 	.word	0x24009c70
90004148:	e000ed00 	.word	0xe000ed00

9000414c <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
9000414c:	b580      	push	{r7, lr}
9000414e:	b084      	sub	sp, #16
90004150:	af00      	add	r7, sp, #0
90004152:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
90004154:	2300      	movs	r3, #0
90004156:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
90004158:	4b07      	ldr	r3, [pc, #28]	; (90004178 <low_level_input+0x2c>)
9000415a:	781b      	ldrb	r3, [r3, #0]
9000415c:	2b00      	cmp	r3, #0
9000415e:	d105      	bne.n	9000416c <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
90004160:	f107 030c 	add.w	r3, r7, #12
90004164:	4619      	mov	r1, r3
90004166:	4805      	ldr	r0, [pc, #20]	; (9000417c <low_level_input+0x30>)
90004168:	f7fd faa1 	bl	900016ae <HAL_ETH_ReadData>
  }

  return p;
9000416c:	68fb      	ldr	r3, [r7, #12]
}
9000416e:	4618      	mov	r0, r3
90004170:	3710      	adds	r7, #16
90004172:	46bd      	mov	sp, r7
90004174:	bd80      	pop	{r7, pc}
90004176:	bf00      	nop
90004178:	24009c68 	.word	0x24009c68
9000417c:	24009c74 	.word	0x24009c74

90004180 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
90004180:	b580      	push	{r7, lr}
90004182:	b084      	sub	sp, #16
90004184:	af00      	add	r7, sp, #0
90004186:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
90004188:	2300      	movs	r3, #0
9000418a:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
9000418c:	687b      	ldr	r3, [r7, #4]
9000418e:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
90004190:	4b0f      	ldr	r3, [pc, #60]	; (900041d0 <ethernetif_input+0x50>)
90004192:	681b      	ldr	r3, [r3, #0]
90004194:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
90004198:	4618      	mov	r0, r3
9000419a:	f000 fbe1 	bl	90004960 <osSemaphoreWait>
9000419e:	4603      	mov	r3, r0
900041a0:	2b00      	cmp	r3, #0
900041a2:	d1f5      	bne.n	90004190 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
900041a4:	68b8      	ldr	r0, [r7, #8]
900041a6:	f7ff ffd1 	bl	9000414c <low_level_input>
900041aa:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
900041ac:	68fb      	ldr	r3, [r7, #12]
900041ae:	2b00      	cmp	r3, #0
900041b0:	d00a      	beq.n	900041c8 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
900041b2:	68bb      	ldr	r3, [r7, #8]
900041b4:	691b      	ldr	r3, [r3, #16]
900041b6:	68b9      	ldr	r1, [r7, #8]
900041b8:	68f8      	ldr	r0, [r7, #12]
900041ba:	4798      	blx	r3
900041bc:	4603      	mov	r3, r0
900041be:	2b00      	cmp	r3, #0
900041c0:	d002      	beq.n	900041c8 <ethernetif_input+0x48>
          {
            pbuf_free(p);
900041c2:	68f8      	ldr	r0, [r7, #12]
900041c4:	f005 fe36 	bl	90009e34 <pbuf_free>
          }
        }
      } while(p!=NULL);
900041c8:	68fb      	ldr	r3, [r7, #12]
900041ca:	2b00      	cmp	r3, #0
900041cc:	d1ea      	bne.n	900041a4 <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
900041ce:	e7df      	b.n	90004190 <ethernetif_input+0x10>
900041d0:	24009c6c 	.word	0x24009c6c

900041d4 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
900041d4:	b580      	push	{r7, lr}
900041d6:	b082      	sub	sp, #8
900041d8:	af00      	add	r7, sp, #0
900041da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
900041dc:	687b      	ldr	r3, [r7, #4]
900041de:	2b00      	cmp	r3, #0
900041e0:	d106      	bne.n	900041f0 <ethernetif_init+0x1c>
900041e2:	4b0e      	ldr	r3, [pc, #56]	; (9000421c <ethernetif_init+0x48>)
900041e4:	f240 12ef 	movw	r2, #495	; 0x1ef
900041e8:	490d      	ldr	r1, [pc, #52]	; (90004220 <ethernetif_init+0x4c>)
900041ea:	480e      	ldr	r0, [pc, #56]	; (90004224 <ethernetif_init+0x50>)
900041ec:	f00f fa24 	bl	90013638 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
900041f0:	687b      	ldr	r3, [r7, #4]
900041f2:	2273      	movs	r2, #115	; 0x73
900041f4:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
900041f8:	687b      	ldr	r3, [r7, #4]
900041fa:	2274      	movs	r2, #116	; 0x74
900041fc:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
90004200:	687b      	ldr	r3, [r7, #4]
90004202:	4a09      	ldr	r2, [pc, #36]	; (90004228 <ethernetif_init+0x54>)
90004204:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
90004206:	687b      	ldr	r3, [r7, #4]
90004208:	4a08      	ldr	r2, [pc, #32]	; (9000422c <ethernetif_init+0x58>)
9000420a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
9000420c:	6878      	ldr	r0, [r7, #4]
9000420e:	f7ff fda3 	bl	90003d58 <low_level_init>

  return ERR_OK;
90004212:	2300      	movs	r3, #0
}
90004214:	4618      	mov	r0, r3
90004216:	3708      	adds	r7, #8
90004218:	46bd      	mov	sp, r7
9000421a:	bd80      	pop	{r7, pc}
9000421c:	90014558 	.word	0x90014558
90004220:	90014574 	.word	0x90014574
90004224:	90014584 	.word	0x90014584
90004228:	9001131d 	.word	0x9001131d
9000422c:	90003fc1 	.word	0x90003fc1

90004230 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
90004230:	b580      	push	{r7, lr}
90004232:	b084      	sub	sp, #16
90004234:	af00      	add	r7, sp, #0
90004236:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
90004238:	687b      	ldr	r3, [r7, #4]
9000423a:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
9000423c:	68f9      	ldr	r1, [r7, #12]
9000423e:	4809      	ldr	r0, [pc, #36]	; (90004264 <pbuf_free_custom+0x34>)
90004240:	f004 ff30 	bl	900090a4 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
90004244:	4b08      	ldr	r3, [pc, #32]	; (90004268 <pbuf_free_custom+0x38>)
90004246:	781b      	ldrb	r3, [r3, #0]
90004248:	2b01      	cmp	r3, #1
9000424a:	d107      	bne.n	9000425c <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
9000424c:	4b06      	ldr	r3, [pc, #24]	; (90004268 <pbuf_free_custom+0x38>)
9000424e:	2200      	movs	r2, #0
90004250:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
90004252:	4b06      	ldr	r3, [pc, #24]	; (9000426c <pbuf_free_custom+0x3c>)
90004254:	681b      	ldr	r3, [r3, #0]
90004256:	4618      	mov	r0, r3
90004258:	f000 fbd0 	bl	900049fc <osSemaphoreRelease>
  }
}
9000425c:	bf00      	nop
9000425e:	3710      	adds	r7, #16
90004260:	46bd      	mov	sp, r7
90004262:	bd80      	pop	{r7, pc}
90004264:	9001726c 	.word	0x9001726c
90004268:	24009c68 	.word	0x24009c68
9000426c:	24009c6c 	.word	0x24009c6c

90004270 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
90004270:	b580      	push	{r7, lr}
90004272:	af00      	add	r7, sp, #0
  return HAL_GetTick();
90004274:	f7fc fe02 	bl	90000e7c <HAL_GetTick>
90004278:	4603      	mov	r3, r0
}
9000427a:	4618      	mov	r0, r3
9000427c:	bd80      	pop	{r7, pc}
	...

90004280 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
90004280:	b580      	push	{r7, lr}
90004282:	b08e      	sub	sp, #56	; 0x38
90004284:	af00      	add	r7, sp, #0
90004286:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
90004288:	f107 0324 	add.w	r3, r7, #36	; 0x24
9000428c:	2200      	movs	r2, #0
9000428e:	601a      	str	r2, [r3, #0]
90004290:	605a      	str	r2, [r3, #4]
90004292:	609a      	str	r2, [r3, #8]
90004294:	60da      	str	r2, [r3, #12]
90004296:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
90004298:	687b      	ldr	r3, [r7, #4]
9000429a:	681b      	ldr	r3, [r3, #0]
9000429c:	4a4d      	ldr	r2, [pc, #308]	; (900043d4 <HAL_ETH_MspInit+0x154>)
9000429e:	4293      	cmp	r3, r2
900042a0:	f040 8093 	bne.w	900043ca <HAL_ETH_MspInit+0x14a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
900042a4:	4b4c      	ldr	r3, [pc, #304]	; (900043d8 <HAL_ETH_MspInit+0x158>)
900042a6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
900042aa:	4a4b      	ldr	r2, [pc, #300]	; (900043d8 <HAL_ETH_MspInit+0x158>)
900042ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
900042b0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
900042b4:	4b48      	ldr	r3, [pc, #288]	; (900043d8 <HAL_ETH_MspInit+0x158>)
900042b6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
900042ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
900042be:	623b      	str	r3, [r7, #32]
900042c0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
900042c2:	4b45      	ldr	r3, [pc, #276]	; (900043d8 <HAL_ETH_MspInit+0x158>)
900042c4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
900042c8:	4a43      	ldr	r2, [pc, #268]	; (900043d8 <HAL_ETH_MspInit+0x158>)
900042ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
900042ce:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
900042d2:	4b41      	ldr	r3, [pc, #260]	; (900043d8 <HAL_ETH_MspInit+0x158>)
900042d4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
900042d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
900042dc:	61fb      	str	r3, [r7, #28]
900042de:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
900042e0:	4b3d      	ldr	r3, [pc, #244]	; (900043d8 <HAL_ETH_MspInit+0x158>)
900042e2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
900042e6:	4a3c      	ldr	r2, [pc, #240]	; (900043d8 <HAL_ETH_MspInit+0x158>)
900042e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
900042ec:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
900042f0:	4b39      	ldr	r3, [pc, #228]	; (900043d8 <HAL_ETH_MspInit+0x158>)
900042f2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
900042f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
900042fa:	61bb      	str	r3, [r7, #24]
900042fc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
900042fe:	4b36      	ldr	r3, [pc, #216]	; (900043d8 <HAL_ETH_MspInit+0x158>)
90004300:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90004304:	4a34      	ldr	r2, [pc, #208]	; (900043d8 <HAL_ETH_MspInit+0x158>)
90004306:	f043 0304 	orr.w	r3, r3, #4
9000430a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
9000430e:	4b32      	ldr	r3, [pc, #200]	; (900043d8 <HAL_ETH_MspInit+0x158>)
90004310:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90004314:	f003 0304 	and.w	r3, r3, #4
90004318:	617b      	str	r3, [r7, #20]
9000431a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
9000431c:	4b2e      	ldr	r3, [pc, #184]	; (900043d8 <HAL_ETH_MspInit+0x158>)
9000431e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90004322:	4a2d      	ldr	r2, [pc, #180]	; (900043d8 <HAL_ETH_MspInit+0x158>)
90004324:	f043 0301 	orr.w	r3, r3, #1
90004328:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
9000432c:	4b2a      	ldr	r3, [pc, #168]	; (900043d8 <HAL_ETH_MspInit+0x158>)
9000432e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90004332:	f003 0301 	and.w	r3, r3, #1
90004336:	613b      	str	r3, [r7, #16]
90004338:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
9000433a:	4b27      	ldr	r3, [pc, #156]	; (900043d8 <HAL_ETH_MspInit+0x158>)
9000433c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90004340:	4a25      	ldr	r2, [pc, #148]	; (900043d8 <HAL_ETH_MspInit+0x158>)
90004342:	f043 0302 	orr.w	r3, r3, #2
90004346:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
9000434a:	4b23      	ldr	r3, [pc, #140]	; (900043d8 <HAL_ETH_MspInit+0x158>)
9000434c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90004350:	f003 0302 	and.w	r3, r3, #2
90004354:	60fb      	str	r3, [r7, #12]
90004356:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
90004358:	2332      	movs	r3, #50	; 0x32
9000435a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
9000435c:	2302      	movs	r3, #2
9000435e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
90004360:	2300      	movs	r3, #0
90004362:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
90004364:	2303      	movs	r3, #3
90004366:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
90004368:	230b      	movs	r3, #11
9000436a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
9000436c:	f107 0324 	add.w	r3, r7, #36	; 0x24
90004370:	4619      	mov	r1, r3
90004372:	481a      	ldr	r0, [pc, #104]	; (900043dc <HAL_ETH_MspInit+0x15c>)
90004374:	f7fe fcc2 	bl	90002cfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
90004378:	2386      	movs	r3, #134	; 0x86
9000437a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
9000437c:	2302      	movs	r3, #2
9000437e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
90004380:	2300      	movs	r3, #0
90004382:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
90004384:	2303      	movs	r3, #3
90004386:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
90004388:	230b      	movs	r3, #11
9000438a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
9000438c:	f107 0324 	add.w	r3, r7, #36	; 0x24
90004390:	4619      	mov	r1, r3
90004392:	4813      	ldr	r0, [pc, #76]	; (900043e0 <HAL_ETH_MspInit+0x160>)
90004394:	f7fe fcb2 	bl	90002cfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
90004398:	f44f 5360 	mov.w	r3, #14336	; 0x3800
9000439c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
9000439e:	2302      	movs	r3, #2
900043a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
900043a2:	2300      	movs	r3, #0
900043a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
900043a6:	2303      	movs	r3, #3
900043a8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
900043aa:	230b      	movs	r3, #11
900043ac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
900043ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
900043b2:	4619      	mov	r1, r3
900043b4:	480b      	ldr	r0, [pc, #44]	; (900043e4 <HAL_ETH_MspInit+0x164>)
900043b6:	f7fe fca1 	bl	90002cfc <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
900043ba:	2200      	movs	r2, #0
900043bc:	2105      	movs	r1, #5
900043be:	203d      	movs	r0, #61	; 0x3d
900043c0:	f7fc fe34 	bl	9000102c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
900043c4:	203d      	movs	r0, #61	; 0x3d
900043c6:	f7fc fe4b 	bl	90001060 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
900043ca:	bf00      	nop
900043cc:	3738      	adds	r7, #56	; 0x38
900043ce:	46bd      	mov	sp, r7
900043d0:	bd80      	pop	{r7, pc}
900043d2:	bf00      	nop
900043d4:	40028000 	.word	0x40028000
900043d8:	58024400 	.word	0x58024400
900043dc:	58020800 	.word	0x58020800
900043e0:	58020000 	.word	0x58020000
900043e4:	58020400 	.word	0x58020400

900043e8 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
900043e8:	b580      	push	{r7, lr}
900043ea:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
900043ec:	4802      	ldr	r0, [pc, #8]	; (900043f8 <ETH_PHY_IO_Init+0x10>)
900043ee:	f7fd feab 	bl	90002148 <HAL_ETH_SetMDIOClockRange>

  return 0;
900043f2:	2300      	movs	r3, #0
}
900043f4:	4618      	mov	r0, r3
900043f6:	bd80      	pop	{r7, pc}
900043f8:	24009c74 	.word	0x24009c74

900043fc <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
900043fc:	b480      	push	{r7}
900043fe:	af00      	add	r7, sp, #0
  return 0;
90004400:	2300      	movs	r3, #0
}
90004402:	4618      	mov	r0, r3
90004404:	46bd      	mov	sp, r7
90004406:	f85d 7b04 	ldr.w	r7, [sp], #4
9000440a:	4770      	bx	lr

9000440c <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
9000440c:	b580      	push	{r7, lr}
9000440e:	b084      	sub	sp, #16
90004410:	af00      	add	r7, sp, #0
90004412:	60f8      	str	r0, [r7, #12]
90004414:	60b9      	str	r1, [r7, #8]
90004416:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
90004418:	687b      	ldr	r3, [r7, #4]
9000441a:	68ba      	ldr	r2, [r7, #8]
9000441c:	68f9      	ldr	r1, [r7, #12]
9000441e:	4807      	ldr	r0, [pc, #28]	; (9000443c <ETH_PHY_IO_ReadReg+0x30>)
90004420:	f7fd fbfc 	bl	90001c1c <HAL_ETH_ReadPHYRegister>
90004424:	4603      	mov	r3, r0
90004426:	2b00      	cmp	r3, #0
90004428:	d002      	beq.n	90004430 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
9000442a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
9000442e:	e000      	b.n	90004432 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
90004430:	2300      	movs	r3, #0
}
90004432:	4618      	mov	r0, r3
90004434:	3710      	adds	r7, #16
90004436:	46bd      	mov	sp, r7
90004438:	bd80      	pop	{r7, pc}
9000443a:	bf00      	nop
9000443c:	24009c74 	.word	0x24009c74

90004440 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
90004440:	b580      	push	{r7, lr}
90004442:	b084      	sub	sp, #16
90004444:	af00      	add	r7, sp, #0
90004446:	60f8      	str	r0, [r7, #12]
90004448:	60b9      	str	r1, [r7, #8]
9000444a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
9000444c:	687b      	ldr	r3, [r7, #4]
9000444e:	68ba      	ldr	r2, [r7, #8]
90004450:	68f9      	ldr	r1, [r7, #12]
90004452:	4807      	ldr	r0, [pc, #28]	; (90004470 <ETH_PHY_IO_WriteReg+0x30>)
90004454:	f7fd fc36 	bl	90001cc4 <HAL_ETH_WritePHYRegister>
90004458:	4603      	mov	r3, r0
9000445a:	2b00      	cmp	r3, #0
9000445c:	d002      	beq.n	90004464 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
9000445e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
90004462:	e000      	b.n	90004466 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
90004464:	2300      	movs	r3, #0
}
90004466:	4618      	mov	r0, r3
90004468:	3710      	adds	r7, #16
9000446a:	46bd      	mov	sp, r7
9000446c:	bd80      	pop	{r7, pc}
9000446e:	bf00      	nop
90004470:	24009c74 	.word	0x24009c74

90004474 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
90004474:	b580      	push	{r7, lr}
90004476:	af00      	add	r7, sp, #0
  return HAL_GetTick();
90004478:	f7fc fd00 	bl	90000e7c <HAL_GetTick>
9000447c:	4603      	mov	r3, r0
}
9000447e:	4618      	mov	r0, r3
90004480:	bd80      	pop	{r7, pc}
	...

90004484 <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
90004484:	b580      	push	{r7, lr}
90004486:	b0a0      	sub	sp, #128	; 0x80
90004488:	af00      	add	r7, sp, #0
9000448a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
9000448c:	f107 0308 	add.w	r3, r7, #8
90004490:	2264      	movs	r2, #100	; 0x64
90004492:	2100      	movs	r1, #0
90004494:	4618      	mov	r0, r3
90004496:	f00f f832 	bl	900134fe <memset>
  int32_t PHYLinkState = 0;
9000449a:	2300      	movs	r3, #0
9000449c:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
9000449e:	2300      	movs	r3, #0
900044a0:	67fb      	str	r3, [r7, #124]	; 0x7c
900044a2:	2300      	movs	r3, #0
900044a4:	67bb      	str	r3, [r7, #120]	; 0x78
900044a6:	2300      	movs	r3, #0
900044a8:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
900044aa:	687b      	ldr	r3, [r7, #4]
900044ac:	66fb      	str	r3, [r7, #108]	; 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
900044ae:	483a      	ldr	r0, [pc, #232]	; (90004598 <ethernet_link_thread+0x114>)
900044b0:	f7fc fc0d 	bl	90000cce <LAN8742_GetLinkState>
900044b4:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
900044b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
900044b8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
900044bc:	089b      	lsrs	r3, r3, #2
900044be:	f003 0301 	and.w	r3, r3, #1
900044c2:	b2db      	uxtb	r3, r3
900044c4:	2b00      	cmp	r3, #0
900044c6:	d00c      	beq.n	900044e2 <ethernet_link_thread+0x5e>
900044c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
900044ca:	2b01      	cmp	r3, #1
900044cc:	dc09      	bgt.n	900044e2 <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
900044ce:	4833      	ldr	r0, [pc, #204]	; (9000459c <ethernet_link_thread+0x118>)
900044d0:	f7fd f824 	bl	9000151c <HAL_ETH_Stop_IT>
    netif_set_down(netif);
900044d4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
900044d6:	f005 f869 	bl	900095ac <netif_set_down>
    netif_set_link_down(netif);
900044da:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
900044dc:	f005 f8cc 	bl	90009678 <netif_set_link_down>
900044e0:	e055      	b.n	9000458e <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
900044e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
900044e4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
900044e8:	f003 0304 	and.w	r3, r3, #4
900044ec:	2b00      	cmp	r3, #0
900044ee:	d14e      	bne.n	9000458e <ethernet_link_thread+0x10a>
900044f0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
900044f2:	2b01      	cmp	r3, #1
900044f4:	dd4b      	ble.n	9000458e <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
900044f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
900044f8:	3b02      	subs	r3, #2
900044fa:	2b03      	cmp	r3, #3
900044fc:	d82a      	bhi.n	90004554 <ethernet_link_thread+0xd0>
900044fe:	a201      	add	r2, pc, #4	; (adr r2, 90004504 <ethernet_link_thread+0x80>)
90004500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90004504:	90004515 	.word	0x90004515
90004508:	90004527 	.word	0x90004527
9000450c:	90004537 	.word	0x90004537
90004510:	90004547 	.word	0x90004547
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
90004514:	f44f 5300 	mov.w	r3, #8192	; 0x2000
90004518:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
9000451a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
9000451e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
90004520:	2301      	movs	r3, #1
90004522:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
90004524:	e017      	b.n	90004556 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
90004526:	2300      	movs	r3, #0
90004528:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
9000452a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
9000452e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
90004530:	2301      	movs	r3, #1
90004532:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
90004534:	e00f      	b.n	90004556 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
90004536:	f44f 5300 	mov.w	r3, #8192	; 0x2000
9000453a:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
9000453c:	2300      	movs	r3, #0
9000453e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
90004540:	2301      	movs	r3, #1
90004542:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
90004544:	e007      	b.n	90004556 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
90004546:	2300      	movs	r3, #0
90004548:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
9000454a:	2300      	movs	r3, #0
9000454c:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
9000454e:	2301      	movs	r3, #1
90004550:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
90004552:	e000      	b.n	90004556 <ethernet_link_thread+0xd2>
    default:
      break;
90004554:	bf00      	nop
    }

    if(linkchanged)
90004556:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
90004558:	2b00      	cmp	r3, #0
9000455a:	d018      	beq.n	9000458e <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
9000455c:	f107 0308 	add.w	r3, r7, #8
90004560:	4619      	mov	r1, r3
90004562:	480e      	ldr	r0, [pc, #56]	; (9000459c <ethernet_link_thread+0x118>)
90004564:	f7fd fc02 	bl	90001d6c <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
90004568:	6f7b      	ldr	r3, [r7, #116]	; 0x74
9000456a:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
9000456c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
9000456e:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
90004570:	f107 0308 	add.w	r3, r7, #8
90004574:	4619      	mov	r1, r3
90004576:	4809      	ldr	r0, [pc, #36]	; (9000459c <ethernet_link_thread+0x118>)
90004578:	f7fd fdcc 	bl	90002114 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
9000457c:	4807      	ldr	r0, [pc, #28]	; (9000459c <ethernet_link_thread+0x118>)
9000457e:	f7fc fedf 	bl	90001340 <HAL_ETH_Start>
      netif_set_up(netif);
90004582:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
90004584:	f004 ffa6 	bl	900094d4 <netif_set_up>
      netif_set_link_up(netif);
90004588:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
9000458a:	f005 f841 	bl	90009610 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
9000458e:	2064      	movs	r0, #100	; 0x64
90004590:	f000 f936 	bl	90004800 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
90004594:	e78b      	b.n	900044ae <ethernet_link_thread+0x2a>
90004596:	bf00      	nop
90004598:	24009d5c 	.word	0x24009d5c
9000459c:	24009c74 	.word	0x24009c74

900045a0 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
900045a0:	b580      	push	{r7, lr}
900045a2:	b086      	sub	sp, #24
900045a4:	af02      	add	r7, sp, #8
900045a6:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
900045a8:	4812      	ldr	r0, [pc, #72]	; (900045f4 <HAL_ETH_RxAllocateCallback+0x54>)
900045aa:	f004 fd07 	bl	90008fbc <memp_malloc_pool>
900045ae:	60f8      	str	r0, [r7, #12]
  if (p)
900045b0:	68fb      	ldr	r3, [r7, #12]
900045b2:	2b00      	cmp	r3, #0
900045b4:	d014      	beq.n	900045e0 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
900045b6:	68fb      	ldr	r3, [r7, #12]
900045b8:	f103 0220 	add.w	r2, r3, #32
900045bc:	687b      	ldr	r3, [r7, #4]
900045be:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
900045c0:	68fb      	ldr	r3, [r7, #12]
900045c2:	4a0d      	ldr	r2, [pc, #52]	; (900045f8 <HAL_ETH_RxAllocateCallback+0x58>)
900045c4:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
900045c6:	687b      	ldr	r3, [r7, #4]
900045c8:	681b      	ldr	r3, [r3, #0]
900045ca:	f44f 62c0 	mov.w	r2, #1536	; 0x600
900045ce:	9201      	str	r2, [sp, #4]
900045d0:	9300      	str	r3, [sp, #0]
900045d2:	68fb      	ldr	r3, [r7, #12]
900045d4:	2241      	movs	r2, #65	; 0x41
900045d6:	2100      	movs	r1, #0
900045d8:	2000      	movs	r0, #0
900045da:	f005 fa71 	bl	90009ac0 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
900045de:	e005      	b.n	900045ec <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
900045e0:	4b06      	ldr	r3, [pc, #24]	; (900045fc <HAL_ETH_RxAllocateCallback+0x5c>)
900045e2:	2201      	movs	r2, #1
900045e4:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
900045e6:	687b      	ldr	r3, [r7, #4]
900045e8:	2200      	movs	r2, #0
900045ea:	601a      	str	r2, [r3, #0]
}
900045ec:	bf00      	nop
900045ee:	3710      	adds	r7, #16
900045f0:	46bd      	mov	sp, r7
900045f2:	bd80      	pop	{r7, pc}
900045f4:	9001726c 	.word	0x9001726c
900045f8:	90004231 	.word	0x90004231
900045fc:	24009c68 	.word	0x24009c68

90004600 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
90004600:	b480      	push	{r7}
90004602:	b08d      	sub	sp, #52	; 0x34
90004604:	af00      	add	r7, sp, #0
90004606:	60f8      	str	r0, [r7, #12]
90004608:	60b9      	str	r1, [r7, #8]
9000460a:	607a      	str	r2, [r7, #4]
9000460c:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
9000460e:	68fb      	ldr	r3, [r7, #12]
90004610:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
90004612:	68bb      	ldr	r3, [r7, #8]
90004614:	627b      	str	r3, [r7, #36]	; 0x24
  struct pbuf *p = NULL;
90004616:	2300      	movs	r3, #0
90004618:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
9000461a:	687b      	ldr	r3, [r7, #4]
9000461c:	3b20      	subs	r3, #32
9000461e:	62fb      	str	r3, [r7, #44]	; 0x2c
  p->next = NULL;
90004620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90004622:	2200      	movs	r2, #0
90004624:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
90004626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90004628:	2200      	movs	r2, #0
9000462a:	811a      	strh	r2, [r3, #8]
  p->len = Length;
9000462c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000462e:	887a      	ldrh	r2, [r7, #2]
90004630:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
90004632:	6abb      	ldr	r3, [r7, #40]	; 0x28
90004634:	681b      	ldr	r3, [r3, #0]
90004636:	2b00      	cmp	r3, #0
90004638:	d103      	bne.n	90004642 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
9000463a:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000463c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
9000463e:	601a      	str	r2, [r3, #0]
90004640:	e003      	b.n	9000464a <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
90004642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90004644:	681b      	ldr	r3, [r3, #0]
90004646:	6afa      	ldr	r2, [r7, #44]	; 0x2c
90004648:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
9000464a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000464c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
9000464e:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
90004650:	6abb      	ldr	r3, [r7, #40]	; 0x28
90004652:	681b      	ldr	r3, [r3, #0]
90004654:	62fb      	str	r3, [r7, #44]	; 0x2c
90004656:	e009      	b.n	9000466c <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
90004658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000465a:	891a      	ldrh	r2, [r3, #8]
9000465c:	887b      	ldrh	r3, [r7, #2]
9000465e:	4413      	add	r3, r2
90004660:	b29a      	uxth	r2, r3
90004662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90004664:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
90004666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90004668:	681b      	ldr	r3, [r3, #0]
9000466a:	62fb      	str	r3, [r7, #44]	; 0x2c
9000466c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000466e:	2b00      	cmp	r3, #0
90004670:	d1f2      	bne.n	90004658 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
90004672:	887b      	ldrh	r3, [r7, #2]
90004674:	687a      	ldr	r2, [r7, #4]
90004676:	623a      	str	r2, [r7, #32]
90004678:	61fb      	str	r3, [r7, #28]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
9000467a:	69fb      	ldr	r3, [r7, #28]
9000467c:	2b00      	cmp	r3, #0
9000467e:	dd1d      	ble.n	900046bc <HAL_ETH_RxLinkCallback+0xbc>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
90004680:	6a3b      	ldr	r3, [r7, #32]
90004682:	f003 021f 	and.w	r2, r3, #31
90004686:	69fb      	ldr	r3, [r7, #28]
90004688:	4413      	add	r3, r2
9000468a:	61bb      	str	r3, [r7, #24]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
9000468c:	6a3b      	ldr	r3, [r7, #32]
9000468e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
90004690:	f3bf 8f4f 	dsb	sy
}
90004694:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
90004696:	4a0d      	ldr	r2, [pc, #52]	; (900046cc <HAL_ETH_RxLinkCallback+0xcc>)
90004698:	697b      	ldr	r3, [r7, #20]
9000469a:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
9000469e:	697b      	ldr	r3, [r7, #20]
900046a0:	3320      	adds	r3, #32
900046a2:	617b      	str	r3, [r7, #20]
        op_size -= __SCB_DCACHE_LINE_SIZE;
900046a4:	69bb      	ldr	r3, [r7, #24]
900046a6:	3b20      	subs	r3, #32
900046a8:	61bb      	str	r3, [r7, #24]
      } while ( op_size > 0 );
900046aa:	69bb      	ldr	r3, [r7, #24]
900046ac:	2b00      	cmp	r3, #0
900046ae:	dcf2      	bgt.n	90004696 <HAL_ETH_RxLinkCallback+0x96>
  __ASM volatile ("dsb 0xF":::"memory");
900046b0:	f3bf 8f4f 	dsb	sy
}
900046b4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
900046b6:	f3bf 8f6f 	isb	sy
}
900046ba:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
900046bc:	bf00      	nop

/* USER CODE END HAL ETH RxLinkCallback */
}
900046be:	bf00      	nop
900046c0:	3734      	adds	r7, #52	; 0x34
900046c2:	46bd      	mov	sp, r7
900046c4:	f85d 7b04 	ldr.w	r7, [sp], #4
900046c8:	4770      	bx	lr
900046ca:	bf00      	nop
900046cc:	e000ed00 	.word	0xe000ed00

900046d0 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
900046d0:	b580      	push	{r7, lr}
900046d2:	b082      	sub	sp, #8
900046d4:	af00      	add	r7, sp, #0
900046d6:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
900046d8:	6878      	ldr	r0, [r7, #4]
900046da:	f005 fbab 	bl	90009e34 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
900046de:	bf00      	nop
900046e0:	3708      	adds	r7, #8
900046e2:	46bd      	mov	sp, r7
900046e4:	bd80      	pop	{r7, pc}

900046e6 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
900046e6:	b480      	push	{r7}
900046e8:	b085      	sub	sp, #20
900046ea:	af00      	add	r7, sp, #0
900046ec:	4603      	mov	r3, r0
900046ee:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
900046f0:	2300      	movs	r3, #0
900046f2:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
900046f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
900046f8:	2b84      	cmp	r3, #132	; 0x84
900046fa:	d005      	beq.n	90004708 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
900046fc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
90004700:	68fb      	ldr	r3, [r7, #12]
90004702:	4413      	add	r3, r2
90004704:	3303      	adds	r3, #3
90004706:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
90004708:	68fb      	ldr	r3, [r7, #12]
}
9000470a:	4618      	mov	r0, r3
9000470c:	3714      	adds	r7, #20
9000470e:	46bd      	mov	sp, r7
90004710:	f85d 7b04 	ldr.w	r7, [sp], #4
90004714:	4770      	bx	lr

90004716 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
90004716:	b480      	push	{r7}
90004718:	b083      	sub	sp, #12
9000471a:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
9000471c:	f3ef 8305 	mrs	r3, IPSR
90004720:	607b      	str	r3, [r7, #4]
  return(result);
90004722:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
90004724:	2b00      	cmp	r3, #0
90004726:	bf14      	ite	ne
90004728:	2301      	movne	r3, #1
9000472a:	2300      	moveq	r3, #0
9000472c:	b2db      	uxtb	r3, r3
}
9000472e:	4618      	mov	r0, r3
90004730:	370c      	adds	r7, #12
90004732:	46bd      	mov	sp, r7
90004734:	f85d 7b04 	ldr.w	r7, [sp], #4
90004738:	4770      	bx	lr

9000473a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
9000473a:	b580      	push	{r7, lr}
9000473c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
9000473e:	f001 fc41 	bl	90005fc4 <vTaskStartScheduler>
  
  return osOK;
90004742:	2300      	movs	r3, #0
}
90004744:	4618      	mov	r0, r3
90004746:	bd80      	pop	{r7, pc}

90004748 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
90004748:	b580      	push	{r7, lr}
9000474a:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
9000474c:	f7ff ffe3 	bl	90004716 <inHandlerMode>
90004750:	4603      	mov	r3, r0
90004752:	2b00      	cmp	r3, #0
90004754:	d003      	beq.n	9000475e <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
90004756:	f001 fd59 	bl	9000620c <xTaskGetTickCountFromISR>
9000475a:	4603      	mov	r3, r0
9000475c:	e002      	b.n	90004764 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
9000475e:	f001 fd45 	bl	900061ec <xTaskGetTickCount>
90004762:	4603      	mov	r3, r0
  }
}
90004764:	4618      	mov	r0, r3
90004766:	bd80      	pop	{r7, pc}

90004768 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
90004768:	b5f0      	push	{r4, r5, r6, r7, lr}
9000476a:	b089      	sub	sp, #36	; 0x24
9000476c:	af04      	add	r7, sp, #16
9000476e:	6078      	str	r0, [r7, #4]
90004770:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
90004772:	687b      	ldr	r3, [r7, #4]
90004774:	695b      	ldr	r3, [r3, #20]
90004776:	2b00      	cmp	r3, #0
90004778:	d020      	beq.n	900047bc <osThreadCreate+0x54>
9000477a:	687b      	ldr	r3, [r7, #4]
9000477c:	699b      	ldr	r3, [r3, #24]
9000477e:	2b00      	cmp	r3, #0
90004780:	d01c      	beq.n	900047bc <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
90004782:	687b      	ldr	r3, [r7, #4]
90004784:	685c      	ldr	r4, [r3, #4]
90004786:	687b      	ldr	r3, [r7, #4]
90004788:	681d      	ldr	r5, [r3, #0]
9000478a:	687b      	ldr	r3, [r7, #4]
9000478c:	691e      	ldr	r6, [r3, #16]
9000478e:	687b      	ldr	r3, [r7, #4]
90004790:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
90004794:	4618      	mov	r0, r3
90004796:	f7ff ffa6 	bl	900046e6 <makeFreeRtosPriority>
9000479a:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
9000479c:	687b      	ldr	r3, [r7, #4]
9000479e:	695b      	ldr	r3, [r3, #20]
900047a0:	687a      	ldr	r2, [r7, #4]
900047a2:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
900047a4:	9202      	str	r2, [sp, #8]
900047a6:	9301      	str	r3, [sp, #4]
900047a8:	9100      	str	r1, [sp, #0]
900047aa:	683b      	ldr	r3, [r7, #0]
900047ac:	4632      	mov	r2, r6
900047ae:	4629      	mov	r1, r5
900047b0:	4620      	mov	r0, r4
900047b2:	f001 fa29 	bl	90005c08 <xTaskCreateStatic>
900047b6:	4603      	mov	r3, r0
900047b8:	60fb      	str	r3, [r7, #12]
900047ba:	e01c      	b.n	900047f6 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
900047bc:	687b      	ldr	r3, [r7, #4]
900047be:	685c      	ldr	r4, [r3, #4]
900047c0:	687b      	ldr	r3, [r7, #4]
900047c2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
900047c4:	687b      	ldr	r3, [r7, #4]
900047c6:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
900047c8:	b29e      	uxth	r6, r3
900047ca:	687b      	ldr	r3, [r7, #4]
900047cc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
900047d0:	4618      	mov	r0, r3
900047d2:	f7ff ff88 	bl	900046e6 <makeFreeRtosPriority>
900047d6:	4602      	mov	r2, r0
900047d8:	f107 030c 	add.w	r3, r7, #12
900047dc:	9301      	str	r3, [sp, #4]
900047de:	9200      	str	r2, [sp, #0]
900047e0:	683b      	ldr	r3, [r7, #0]
900047e2:	4632      	mov	r2, r6
900047e4:	4629      	mov	r1, r5
900047e6:	4620      	mov	r0, r4
900047e8:	f001 fa6b 	bl	90005cc2 <xTaskCreate>
900047ec:	4603      	mov	r3, r0
900047ee:	2b01      	cmp	r3, #1
900047f0:	d001      	beq.n	900047f6 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
900047f2:	2300      	movs	r3, #0
900047f4:	e000      	b.n	900047f8 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
900047f6:	68fb      	ldr	r3, [r7, #12]
}
900047f8:	4618      	mov	r0, r3
900047fa:	3714      	adds	r7, #20
900047fc:	46bd      	mov	sp, r7
900047fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

90004800 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
90004800:	b580      	push	{r7, lr}
90004802:	b084      	sub	sp, #16
90004804:	af00      	add	r7, sp, #0
90004806:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
90004808:	687b      	ldr	r3, [r7, #4]
9000480a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
9000480c:	68fb      	ldr	r3, [r7, #12]
9000480e:	2b00      	cmp	r3, #0
90004810:	d001      	beq.n	90004816 <osDelay+0x16>
90004812:	68fb      	ldr	r3, [r7, #12]
90004814:	e000      	b.n	90004818 <osDelay+0x18>
90004816:	2301      	movs	r3, #1
90004818:	4618      	mov	r0, r3
9000481a:	f001 fb9f 	bl	90005f5c <vTaskDelay>
  
  return osOK;
9000481e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
90004820:	4618      	mov	r0, r3
90004822:	3710      	adds	r7, #16
90004824:	46bd      	mov	sp, r7
90004826:	bd80      	pop	{r7, pc}

90004828 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
90004828:	b580      	push	{r7, lr}
9000482a:	b082      	sub	sp, #8
9000482c:	af00      	add	r7, sp, #0
9000482e:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
90004830:	687b      	ldr	r3, [r7, #4]
90004832:	685b      	ldr	r3, [r3, #4]
90004834:	2b00      	cmp	r3, #0
90004836:	d007      	beq.n	90004848 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
90004838:	687b      	ldr	r3, [r7, #4]
9000483a:	685b      	ldr	r3, [r3, #4]
9000483c:	4619      	mov	r1, r3
9000483e:	2001      	movs	r0, #1
90004840:	f000 fc0d 	bl	9000505e <xQueueCreateMutexStatic>
90004844:	4603      	mov	r3, r0
90004846:	e003      	b.n	90004850 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
90004848:	2001      	movs	r0, #1
9000484a:	f000 fbf0 	bl	9000502e <xQueueCreateMutex>
9000484e:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
90004850:	4618      	mov	r0, r3
90004852:	3708      	adds	r7, #8
90004854:	46bd      	mov	sp, r7
90004856:	bd80      	pop	{r7, pc}

90004858 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
90004858:	b580      	push	{r7, lr}
9000485a:	b084      	sub	sp, #16
9000485c:	af00      	add	r7, sp, #0
9000485e:	6078      	str	r0, [r7, #4]
90004860:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
90004862:	2300      	movs	r3, #0
90004864:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
90004866:	687b      	ldr	r3, [r7, #4]
90004868:	2b00      	cmp	r3, #0
9000486a:	d101      	bne.n	90004870 <osMutexWait+0x18>
    return osErrorParameter;
9000486c:	2380      	movs	r3, #128	; 0x80
9000486e:	e03a      	b.n	900048e6 <osMutexWait+0x8e>
  }
  
  ticks = 0;
90004870:	2300      	movs	r3, #0
90004872:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
90004874:	683b      	ldr	r3, [r7, #0]
90004876:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
9000487a:	d103      	bne.n	90004884 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
9000487c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
90004880:	60fb      	str	r3, [r7, #12]
90004882:	e009      	b.n	90004898 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
90004884:	683b      	ldr	r3, [r7, #0]
90004886:	2b00      	cmp	r3, #0
90004888:	d006      	beq.n	90004898 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
9000488a:	683b      	ldr	r3, [r7, #0]
9000488c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
9000488e:	68fb      	ldr	r3, [r7, #12]
90004890:	2b00      	cmp	r3, #0
90004892:	d101      	bne.n	90004898 <osMutexWait+0x40>
      ticks = 1;
90004894:	2301      	movs	r3, #1
90004896:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
90004898:	f7ff ff3d 	bl	90004716 <inHandlerMode>
9000489c:	4603      	mov	r3, r0
9000489e:	2b00      	cmp	r3, #0
900048a0:	d017      	beq.n	900048d2 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
900048a2:	f107 0308 	add.w	r3, r7, #8
900048a6:	461a      	mov	r2, r3
900048a8:	2100      	movs	r1, #0
900048aa:	6878      	ldr	r0, [r7, #4]
900048ac:	f001 f804 	bl	900058b8 <xQueueReceiveFromISR>
900048b0:	4603      	mov	r3, r0
900048b2:	2b01      	cmp	r3, #1
900048b4:	d001      	beq.n	900048ba <osMutexWait+0x62>
      return osErrorOS;
900048b6:	23ff      	movs	r3, #255	; 0xff
900048b8:	e015      	b.n	900048e6 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
900048ba:	68bb      	ldr	r3, [r7, #8]
900048bc:	2b00      	cmp	r3, #0
900048be:	d011      	beq.n	900048e4 <osMutexWait+0x8c>
900048c0:	4b0b      	ldr	r3, [pc, #44]	; (900048f0 <osMutexWait+0x98>)
900048c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
900048c6:	601a      	str	r2, [r3, #0]
900048c8:	f3bf 8f4f 	dsb	sy
900048cc:	f3bf 8f6f 	isb	sy
900048d0:	e008      	b.n	900048e4 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
900048d2:	68f9      	ldr	r1, [r7, #12]
900048d4:	6878      	ldr	r0, [r7, #4]
900048d6:	f000 fee3 	bl	900056a0 <xQueueSemaphoreTake>
900048da:	4603      	mov	r3, r0
900048dc:	2b01      	cmp	r3, #1
900048de:	d001      	beq.n	900048e4 <osMutexWait+0x8c>
    return osErrorOS;
900048e0:	23ff      	movs	r3, #255	; 0xff
900048e2:	e000      	b.n	900048e6 <osMutexWait+0x8e>
  }
  
  return osOK;
900048e4:	2300      	movs	r3, #0
}
900048e6:	4618      	mov	r0, r3
900048e8:	3710      	adds	r7, #16
900048ea:	46bd      	mov	sp, r7
900048ec:	bd80      	pop	{r7, pc}
900048ee:	bf00      	nop
900048f0:	e000ed04 	.word	0xe000ed04

900048f4 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
900048f4:	b580      	push	{r7, lr}
900048f6:	b084      	sub	sp, #16
900048f8:	af00      	add	r7, sp, #0
900048fa:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
900048fc:	2300      	movs	r3, #0
900048fe:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
90004900:	2300      	movs	r3, #0
90004902:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
90004904:	f7ff ff07 	bl	90004716 <inHandlerMode>
90004908:	4603      	mov	r3, r0
9000490a:	2b00      	cmp	r3, #0
9000490c:	d016      	beq.n	9000493c <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
9000490e:	f107 0308 	add.w	r3, r7, #8
90004912:	4619      	mov	r1, r3
90004914:	6878      	ldr	r0, [r7, #4]
90004916:	f000 fd56 	bl	900053c6 <xQueueGiveFromISR>
9000491a:	4603      	mov	r3, r0
9000491c:	2b01      	cmp	r3, #1
9000491e:	d001      	beq.n	90004924 <osMutexRelease+0x30>
      return osErrorOS;
90004920:	23ff      	movs	r3, #255	; 0xff
90004922:	e017      	b.n	90004954 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
90004924:	68bb      	ldr	r3, [r7, #8]
90004926:	2b00      	cmp	r3, #0
90004928:	d013      	beq.n	90004952 <osMutexRelease+0x5e>
9000492a:	4b0c      	ldr	r3, [pc, #48]	; (9000495c <osMutexRelease+0x68>)
9000492c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
90004930:	601a      	str	r2, [r3, #0]
90004932:	f3bf 8f4f 	dsb	sy
90004936:	f3bf 8f6f 	isb	sy
9000493a:	e00a      	b.n	90004952 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
9000493c:	2300      	movs	r3, #0
9000493e:	2200      	movs	r2, #0
90004940:	2100      	movs	r1, #0
90004942:	6878      	ldr	r0, [r7, #4]
90004944:	f000 fba6 	bl	90005094 <xQueueGenericSend>
90004948:	4603      	mov	r3, r0
9000494a:	2b01      	cmp	r3, #1
9000494c:	d001      	beq.n	90004952 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
9000494e:	23ff      	movs	r3, #255	; 0xff
90004950:	60fb      	str	r3, [r7, #12]
  }
  return result;
90004952:	68fb      	ldr	r3, [r7, #12]
}
90004954:	4618      	mov	r0, r3
90004956:	3710      	adds	r7, #16
90004958:	46bd      	mov	sp, r7
9000495a:	bd80      	pop	{r7, pc}
9000495c:	e000ed04 	.word	0xe000ed04

90004960 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
90004960:	b580      	push	{r7, lr}
90004962:	b084      	sub	sp, #16
90004964:	af00      	add	r7, sp, #0
90004966:	6078      	str	r0, [r7, #4]
90004968:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
9000496a:	2300      	movs	r3, #0
9000496c:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
9000496e:	687b      	ldr	r3, [r7, #4]
90004970:	2b00      	cmp	r3, #0
90004972:	d101      	bne.n	90004978 <osSemaphoreWait+0x18>
    return osErrorParameter;
90004974:	2380      	movs	r3, #128	; 0x80
90004976:	e03a      	b.n	900049ee <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
90004978:	2300      	movs	r3, #0
9000497a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
9000497c:	683b      	ldr	r3, [r7, #0]
9000497e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
90004982:	d103      	bne.n	9000498c <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
90004984:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
90004988:	60fb      	str	r3, [r7, #12]
9000498a:	e009      	b.n	900049a0 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
9000498c:	683b      	ldr	r3, [r7, #0]
9000498e:	2b00      	cmp	r3, #0
90004990:	d006      	beq.n	900049a0 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
90004992:	683b      	ldr	r3, [r7, #0]
90004994:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
90004996:	68fb      	ldr	r3, [r7, #12]
90004998:	2b00      	cmp	r3, #0
9000499a:	d101      	bne.n	900049a0 <osSemaphoreWait+0x40>
      ticks = 1;
9000499c:	2301      	movs	r3, #1
9000499e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
900049a0:	f7ff feb9 	bl	90004716 <inHandlerMode>
900049a4:	4603      	mov	r3, r0
900049a6:	2b00      	cmp	r3, #0
900049a8:	d017      	beq.n	900049da <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
900049aa:	f107 0308 	add.w	r3, r7, #8
900049ae:	461a      	mov	r2, r3
900049b0:	2100      	movs	r1, #0
900049b2:	6878      	ldr	r0, [r7, #4]
900049b4:	f000 ff80 	bl	900058b8 <xQueueReceiveFromISR>
900049b8:	4603      	mov	r3, r0
900049ba:	2b01      	cmp	r3, #1
900049bc:	d001      	beq.n	900049c2 <osSemaphoreWait+0x62>
      return osErrorOS;
900049be:	23ff      	movs	r3, #255	; 0xff
900049c0:	e015      	b.n	900049ee <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
900049c2:	68bb      	ldr	r3, [r7, #8]
900049c4:	2b00      	cmp	r3, #0
900049c6:	d011      	beq.n	900049ec <osSemaphoreWait+0x8c>
900049c8:	4b0b      	ldr	r3, [pc, #44]	; (900049f8 <osSemaphoreWait+0x98>)
900049ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
900049ce:	601a      	str	r2, [r3, #0]
900049d0:	f3bf 8f4f 	dsb	sy
900049d4:	f3bf 8f6f 	isb	sy
900049d8:	e008      	b.n	900049ec <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
900049da:	68f9      	ldr	r1, [r7, #12]
900049dc:	6878      	ldr	r0, [r7, #4]
900049de:	f000 fe5f 	bl	900056a0 <xQueueSemaphoreTake>
900049e2:	4603      	mov	r3, r0
900049e4:	2b01      	cmp	r3, #1
900049e6:	d001      	beq.n	900049ec <osSemaphoreWait+0x8c>
    return osErrorOS;
900049e8:	23ff      	movs	r3, #255	; 0xff
900049ea:	e000      	b.n	900049ee <osSemaphoreWait+0x8e>
  }
  
  return osOK;
900049ec:	2300      	movs	r3, #0
}
900049ee:	4618      	mov	r0, r3
900049f0:	3710      	adds	r7, #16
900049f2:	46bd      	mov	sp, r7
900049f4:	bd80      	pop	{r7, pc}
900049f6:	bf00      	nop
900049f8:	e000ed04 	.word	0xe000ed04

900049fc <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
900049fc:	b580      	push	{r7, lr}
900049fe:	b084      	sub	sp, #16
90004a00:	af00      	add	r7, sp, #0
90004a02:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
90004a04:	2300      	movs	r3, #0
90004a06:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
90004a08:	2300      	movs	r3, #0
90004a0a:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
90004a0c:	f7ff fe83 	bl	90004716 <inHandlerMode>
90004a10:	4603      	mov	r3, r0
90004a12:	2b00      	cmp	r3, #0
90004a14:	d016      	beq.n	90004a44 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
90004a16:	f107 0308 	add.w	r3, r7, #8
90004a1a:	4619      	mov	r1, r3
90004a1c:	6878      	ldr	r0, [r7, #4]
90004a1e:	f000 fcd2 	bl	900053c6 <xQueueGiveFromISR>
90004a22:	4603      	mov	r3, r0
90004a24:	2b01      	cmp	r3, #1
90004a26:	d001      	beq.n	90004a2c <osSemaphoreRelease+0x30>
      return osErrorOS;
90004a28:	23ff      	movs	r3, #255	; 0xff
90004a2a:	e017      	b.n	90004a5c <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
90004a2c:	68bb      	ldr	r3, [r7, #8]
90004a2e:	2b00      	cmp	r3, #0
90004a30:	d013      	beq.n	90004a5a <osSemaphoreRelease+0x5e>
90004a32:	4b0c      	ldr	r3, [pc, #48]	; (90004a64 <osSemaphoreRelease+0x68>)
90004a34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
90004a38:	601a      	str	r2, [r3, #0]
90004a3a:	f3bf 8f4f 	dsb	sy
90004a3e:	f3bf 8f6f 	isb	sy
90004a42:	e00a      	b.n	90004a5a <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
90004a44:	2300      	movs	r3, #0
90004a46:	2200      	movs	r2, #0
90004a48:	2100      	movs	r1, #0
90004a4a:	6878      	ldr	r0, [r7, #4]
90004a4c:	f000 fb22 	bl	90005094 <xQueueGenericSend>
90004a50:	4603      	mov	r3, r0
90004a52:	2b01      	cmp	r3, #1
90004a54:	d001      	beq.n	90004a5a <osSemaphoreRelease+0x5e>
      result = osErrorOS;
90004a56:	23ff      	movs	r3, #255	; 0xff
90004a58:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
90004a5a:	68fb      	ldr	r3, [r7, #12]
}
90004a5c:	4618      	mov	r0, r3
90004a5e:	3710      	adds	r7, #16
90004a60:	46bd      	mov	sp, r7
90004a62:	bd80      	pop	{r7, pc}
90004a64:	e000ed04 	.word	0xe000ed04

90004a68 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
90004a68:	b590      	push	{r4, r7, lr}
90004a6a:	b085      	sub	sp, #20
90004a6c:	af02      	add	r7, sp, #8
90004a6e:	6078      	str	r0, [r7, #4]
90004a70:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
90004a72:	687b      	ldr	r3, [r7, #4]
90004a74:	689b      	ldr	r3, [r3, #8]
90004a76:	2b00      	cmp	r3, #0
90004a78:	d011      	beq.n	90004a9e <osMessageCreate+0x36>
90004a7a:	687b      	ldr	r3, [r7, #4]
90004a7c:	68db      	ldr	r3, [r3, #12]
90004a7e:	2b00      	cmp	r3, #0
90004a80:	d00d      	beq.n	90004a9e <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
90004a82:	687b      	ldr	r3, [r7, #4]
90004a84:	6818      	ldr	r0, [r3, #0]
90004a86:	687b      	ldr	r3, [r7, #4]
90004a88:	6859      	ldr	r1, [r3, #4]
90004a8a:	687b      	ldr	r3, [r7, #4]
90004a8c:	689a      	ldr	r2, [r3, #8]
90004a8e:	687b      	ldr	r3, [r7, #4]
90004a90:	68db      	ldr	r3, [r3, #12]
90004a92:	2400      	movs	r4, #0
90004a94:	9400      	str	r4, [sp, #0]
90004a96:	f000 f9df 	bl	90004e58 <xQueueGenericCreateStatic>
90004a9a:	4603      	mov	r3, r0
90004a9c:	e008      	b.n	90004ab0 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
90004a9e:	687b      	ldr	r3, [r7, #4]
90004aa0:	6818      	ldr	r0, [r3, #0]
90004aa2:	687b      	ldr	r3, [r7, #4]
90004aa4:	685b      	ldr	r3, [r3, #4]
90004aa6:	2200      	movs	r2, #0
90004aa8:	4619      	mov	r1, r3
90004aaa:	f000 fa4d 	bl	90004f48 <xQueueGenericCreate>
90004aae:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
90004ab0:	4618      	mov	r0, r3
90004ab2:	370c      	adds	r7, #12
90004ab4:	46bd      	mov	sp, r7
90004ab6:	bd90      	pop	{r4, r7, pc}

90004ab8 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
90004ab8:	b580      	push	{r7, lr}
90004aba:	b086      	sub	sp, #24
90004abc:	af00      	add	r7, sp, #0
90004abe:	60f8      	str	r0, [r7, #12]
90004ac0:	60b9      	str	r1, [r7, #8]
90004ac2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
90004ac4:	2300      	movs	r3, #0
90004ac6:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
90004ac8:	687b      	ldr	r3, [r7, #4]
90004aca:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
90004acc:	697b      	ldr	r3, [r7, #20]
90004ace:	2b00      	cmp	r3, #0
90004ad0:	d101      	bne.n	90004ad6 <osMessagePut+0x1e>
    ticks = 1;
90004ad2:	2301      	movs	r3, #1
90004ad4:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
90004ad6:	f7ff fe1e 	bl	90004716 <inHandlerMode>
90004ada:	4603      	mov	r3, r0
90004adc:	2b00      	cmp	r3, #0
90004ade:	d018      	beq.n	90004b12 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
90004ae0:	f107 0210 	add.w	r2, r7, #16
90004ae4:	f107 0108 	add.w	r1, r7, #8
90004ae8:	2300      	movs	r3, #0
90004aea:	68f8      	ldr	r0, [r7, #12]
90004aec:	f000 fbd0 	bl	90005290 <xQueueGenericSendFromISR>
90004af0:	4603      	mov	r3, r0
90004af2:	2b01      	cmp	r3, #1
90004af4:	d001      	beq.n	90004afa <osMessagePut+0x42>
      return osErrorOS;
90004af6:	23ff      	movs	r3, #255	; 0xff
90004af8:	e018      	b.n	90004b2c <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
90004afa:	693b      	ldr	r3, [r7, #16]
90004afc:	2b00      	cmp	r3, #0
90004afe:	d014      	beq.n	90004b2a <osMessagePut+0x72>
90004b00:	4b0c      	ldr	r3, [pc, #48]	; (90004b34 <osMessagePut+0x7c>)
90004b02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
90004b06:	601a      	str	r2, [r3, #0]
90004b08:	f3bf 8f4f 	dsb	sy
90004b0c:	f3bf 8f6f 	isb	sy
90004b10:	e00b      	b.n	90004b2a <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
90004b12:	f107 0108 	add.w	r1, r7, #8
90004b16:	2300      	movs	r3, #0
90004b18:	697a      	ldr	r2, [r7, #20]
90004b1a:	68f8      	ldr	r0, [r7, #12]
90004b1c:	f000 faba 	bl	90005094 <xQueueGenericSend>
90004b20:	4603      	mov	r3, r0
90004b22:	2b01      	cmp	r3, #1
90004b24:	d001      	beq.n	90004b2a <osMessagePut+0x72>
      return osErrorOS;
90004b26:	23ff      	movs	r3, #255	; 0xff
90004b28:	e000      	b.n	90004b2c <osMessagePut+0x74>
    }
  }
  
  return osOK;
90004b2a:	2300      	movs	r3, #0
}
90004b2c:	4618      	mov	r0, r3
90004b2e:	3718      	adds	r7, #24
90004b30:	46bd      	mov	sp, r7
90004b32:	bd80      	pop	{r7, pc}
90004b34:	e000ed04 	.word	0xe000ed04

90004b38 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
90004b38:	b590      	push	{r4, r7, lr}
90004b3a:	b08b      	sub	sp, #44	; 0x2c
90004b3c:	af00      	add	r7, sp, #0
90004b3e:	60f8      	str	r0, [r7, #12]
90004b40:	60b9      	str	r1, [r7, #8]
90004b42:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
90004b44:	68bb      	ldr	r3, [r7, #8]
90004b46:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
90004b48:	2300      	movs	r3, #0
90004b4a:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
90004b4c:	68bb      	ldr	r3, [r7, #8]
90004b4e:	2b00      	cmp	r3, #0
90004b50:	d10a      	bne.n	90004b68 <osMessageGet+0x30>
    event.status = osErrorParameter;
90004b52:	2380      	movs	r3, #128	; 0x80
90004b54:	617b      	str	r3, [r7, #20]
    return event;
90004b56:	68fb      	ldr	r3, [r7, #12]
90004b58:	461c      	mov	r4, r3
90004b5a:	f107 0314 	add.w	r3, r7, #20
90004b5e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
90004b62:	e884 0007 	stmia.w	r4, {r0, r1, r2}
90004b66:	e054      	b.n	90004c12 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
90004b68:	2300      	movs	r3, #0
90004b6a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
90004b6c:	2300      	movs	r3, #0
90004b6e:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
90004b70:	687b      	ldr	r3, [r7, #4]
90004b72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
90004b76:	d103      	bne.n	90004b80 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
90004b78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
90004b7c:	627b      	str	r3, [r7, #36]	; 0x24
90004b7e:	e009      	b.n	90004b94 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
90004b80:	687b      	ldr	r3, [r7, #4]
90004b82:	2b00      	cmp	r3, #0
90004b84:	d006      	beq.n	90004b94 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
90004b86:	687b      	ldr	r3, [r7, #4]
90004b88:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
90004b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90004b8c:	2b00      	cmp	r3, #0
90004b8e:	d101      	bne.n	90004b94 <osMessageGet+0x5c>
      ticks = 1;
90004b90:	2301      	movs	r3, #1
90004b92:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
90004b94:	f7ff fdbf 	bl	90004716 <inHandlerMode>
90004b98:	4603      	mov	r3, r0
90004b9a:	2b00      	cmp	r3, #0
90004b9c:	d01c      	beq.n	90004bd8 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
90004b9e:	f107 0220 	add.w	r2, r7, #32
90004ba2:	f107 0314 	add.w	r3, r7, #20
90004ba6:	3304      	adds	r3, #4
90004ba8:	4619      	mov	r1, r3
90004baa:	68b8      	ldr	r0, [r7, #8]
90004bac:	f000 fe84 	bl	900058b8 <xQueueReceiveFromISR>
90004bb0:	4603      	mov	r3, r0
90004bb2:	2b01      	cmp	r3, #1
90004bb4:	d102      	bne.n	90004bbc <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
90004bb6:	2310      	movs	r3, #16
90004bb8:	617b      	str	r3, [r7, #20]
90004bba:	e001      	b.n	90004bc0 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
90004bbc:	2300      	movs	r3, #0
90004bbe:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
90004bc0:	6a3b      	ldr	r3, [r7, #32]
90004bc2:	2b00      	cmp	r3, #0
90004bc4:	d01d      	beq.n	90004c02 <osMessageGet+0xca>
90004bc6:	4b15      	ldr	r3, [pc, #84]	; (90004c1c <osMessageGet+0xe4>)
90004bc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
90004bcc:	601a      	str	r2, [r3, #0]
90004bce:	f3bf 8f4f 	dsb	sy
90004bd2:	f3bf 8f6f 	isb	sy
90004bd6:	e014      	b.n	90004c02 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
90004bd8:	f107 0314 	add.w	r3, r7, #20
90004bdc:	3304      	adds	r3, #4
90004bde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
90004be0:	4619      	mov	r1, r3
90004be2:	68b8      	ldr	r0, [r7, #8]
90004be4:	f000 fc7c 	bl	900054e0 <xQueueReceive>
90004be8:	4603      	mov	r3, r0
90004bea:	2b01      	cmp	r3, #1
90004bec:	d102      	bne.n	90004bf4 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
90004bee:	2310      	movs	r3, #16
90004bf0:	617b      	str	r3, [r7, #20]
90004bf2:	e006      	b.n	90004c02 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
90004bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90004bf6:	2b00      	cmp	r3, #0
90004bf8:	d101      	bne.n	90004bfe <osMessageGet+0xc6>
90004bfa:	2300      	movs	r3, #0
90004bfc:	e000      	b.n	90004c00 <osMessageGet+0xc8>
90004bfe:	2340      	movs	r3, #64	; 0x40
90004c00:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
90004c02:	68fb      	ldr	r3, [r7, #12]
90004c04:	461c      	mov	r4, r3
90004c06:	f107 0314 	add.w	r3, r7, #20
90004c0a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
90004c0e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
90004c12:	68f8      	ldr	r0, [r7, #12]
90004c14:	372c      	adds	r7, #44	; 0x2c
90004c16:	46bd      	mov	sp, r7
90004c18:	bd90      	pop	{r4, r7, pc}
90004c1a:	bf00      	nop
90004c1c:	e000ed04 	.word	0xe000ed04

90004c20 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
90004c20:	b480      	push	{r7}
90004c22:	b083      	sub	sp, #12
90004c24:	af00      	add	r7, sp, #0
90004c26:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
90004c28:	687b      	ldr	r3, [r7, #4]
90004c2a:	f103 0208 	add.w	r2, r3, #8
90004c2e:	687b      	ldr	r3, [r7, #4]
90004c30:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
90004c32:	687b      	ldr	r3, [r7, #4]
90004c34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
90004c38:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
90004c3a:	687b      	ldr	r3, [r7, #4]
90004c3c:	f103 0208 	add.w	r2, r3, #8
90004c40:	687b      	ldr	r3, [r7, #4]
90004c42:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
90004c44:	687b      	ldr	r3, [r7, #4]
90004c46:	f103 0208 	add.w	r2, r3, #8
90004c4a:	687b      	ldr	r3, [r7, #4]
90004c4c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
90004c4e:	687b      	ldr	r3, [r7, #4]
90004c50:	2200      	movs	r2, #0
90004c52:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
90004c54:	bf00      	nop
90004c56:	370c      	adds	r7, #12
90004c58:	46bd      	mov	sp, r7
90004c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
90004c5e:	4770      	bx	lr

90004c60 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
90004c60:	b480      	push	{r7}
90004c62:	b083      	sub	sp, #12
90004c64:	af00      	add	r7, sp, #0
90004c66:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
90004c68:	687b      	ldr	r3, [r7, #4]
90004c6a:	2200      	movs	r2, #0
90004c6c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
90004c6e:	bf00      	nop
90004c70:	370c      	adds	r7, #12
90004c72:	46bd      	mov	sp, r7
90004c74:	f85d 7b04 	ldr.w	r7, [sp], #4
90004c78:	4770      	bx	lr

90004c7a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
90004c7a:	b480      	push	{r7}
90004c7c:	b085      	sub	sp, #20
90004c7e:	af00      	add	r7, sp, #0
90004c80:	6078      	str	r0, [r7, #4]
90004c82:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
90004c84:	687b      	ldr	r3, [r7, #4]
90004c86:	685b      	ldr	r3, [r3, #4]
90004c88:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
90004c8a:	683b      	ldr	r3, [r7, #0]
90004c8c:	68fa      	ldr	r2, [r7, #12]
90004c8e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
90004c90:	68fb      	ldr	r3, [r7, #12]
90004c92:	689a      	ldr	r2, [r3, #8]
90004c94:	683b      	ldr	r3, [r7, #0]
90004c96:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
90004c98:	68fb      	ldr	r3, [r7, #12]
90004c9a:	689b      	ldr	r3, [r3, #8]
90004c9c:	683a      	ldr	r2, [r7, #0]
90004c9e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
90004ca0:	68fb      	ldr	r3, [r7, #12]
90004ca2:	683a      	ldr	r2, [r7, #0]
90004ca4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
90004ca6:	683b      	ldr	r3, [r7, #0]
90004ca8:	687a      	ldr	r2, [r7, #4]
90004caa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
90004cac:	687b      	ldr	r3, [r7, #4]
90004cae:	681b      	ldr	r3, [r3, #0]
90004cb0:	1c5a      	adds	r2, r3, #1
90004cb2:	687b      	ldr	r3, [r7, #4]
90004cb4:	601a      	str	r2, [r3, #0]
}
90004cb6:	bf00      	nop
90004cb8:	3714      	adds	r7, #20
90004cba:	46bd      	mov	sp, r7
90004cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
90004cc0:	4770      	bx	lr

90004cc2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
90004cc2:	b480      	push	{r7}
90004cc4:	b085      	sub	sp, #20
90004cc6:	af00      	add	r7, sp, #0
90004cc8:	6078      	str	r0, [r7, #4]
90004cca:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
90004ccc:	683b      	ldr	r3, [r7, #0]
90004cce:	681b      	ldr	r3, [r3, #0]
90004cd0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
90004cd2:	68bb      	ldr	r3, [r7, #8]
90004cd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
90004cd8:	d103      	bne.n	90004ce2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
90004cda:	687b      	ldr	r3, [r7, #4]
90004cdc:	691b      	ldr	r3, [r3, #16]
90004cde:	60fb      	str	r3, [r7, #12]
90004ce0:	e00c      	b.n	90004cfc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
90004ce2:	687b      	ldr	r3, [r7, #4]
90004ce4:	3308      	adds	r3, #8
90004ce6:	60fb      	str	r3, [r7, #12]
90004ce8:	e002      	b.n	90004cf0 <vListInsert+0x2e>
90004cea:	68fb      	ldr	r3, [r7, #12]
90004cec:	685b      	ldr	r3, [r3, #4]
90004cee:	60fb      	str	r3, [r7, #12]
90004cf0:	68fb      	ldr	r3, [r7, #12]
90004cf2:	685b      	ldr	r3, [r3, #4]
90004cf4:	681b      	ldr	r3, [r3, #0]
90004cf6:	68ba      	ldr	r2, [r7, #8]
90004cf8:	429a      	cmp	r2, r3
90004cfa:	d2f6      	bcs.n	90004cea <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
90004cfc:	68fb      	ldr	r3, [r7, #12]
90004cfe:	685a      	ldr	r2, [r3, #4]
90004d00:	683b      	ldr	r3, [r7, #0]
90004d02:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
90004d04:	683b      	ldr	r3, [r7, #0]
90004d06:	685b      	ldr	r3, [r3, #4]
90004d08:	683a      	ldr	r2, [r7, #0]
90004d0a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
90004d0c:	683b      	ldr	r3, [r7, #0]
90004d0e:	68fa      	ldr	r2, [r7, #12]
90004d10:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
90004d12:	68fb      	ldr	r3, [r7, #12]
90004d14:	683a      	ldr	r2, [r7, #0]
90004d16:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
90004d18:	683b      	ldr	r3, [r7, #0]
90004d1a:	687a      	ldr	r2, [r7, #4]
90004d1c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
90004d1e:	687b      	ldr	r3, [r7, #4]
90004d20:	681b      	ldr	r3, [r3, #0]
90004d22:	1c5a      	adds	r2, r3, #1
90004d24:	687b      	ldr	r3, [r7, #4]
90004d26:	601a      	str	r2, [r3, #0]
}
90004d28:	bf00      	nop
90004d2a:	3714      	adds	r7, #20
90004d2c:	46bd      	mov	sp, r7
90004d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
90004d32:	4770      	bx	lr

90004d34 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
90004d34:	b480      	push	{r7}
90004d36:	b085      	sub	sp, #20
90004d38:	af00      	add	r7, sp, #0
90004d3a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
90004d3c:	687b      	ldr	r3, [r7, #4]
90004d3e:	691b      	ldr	r3, [r3, #16]
90004d40:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
90004d42:	687b      	ldr	r3, [r7, #4]
90004d44:	685b      	ldr	r3, [r3, #4]
90004d46:	687a      	ldr	r2, [r7, #4]
90004d48:	6892      	ldr	r2, [r2, #8]
90004d4a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
90004d4c:	687b      	ldr	r3, [r7, #4]
90004d4e:	689b      	ldr	r3, [r3, #8]
90004d50:	687a      	ldr	r2, [r7, #4]
90004d52:	6852      	ldr	r2, [r2, #4]
90004d54:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
90004d56:	68fb      	ldr	r3, [r7, #12]
90004d58:	685b      	ldr	r3, [r3, #4]
90004d5a:	687a      	ldr	r2, [r7, #4]
90004d5c:	429a      	cmp	r2, r3
90004d5e:	d103      	bne.n	90004d68 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
90004d60:	687b      	ldr	r3, [r7, #4]
90004d62:	689a      	ldr	r2, [r3, #8]
90004d64:	68fb      	ldr	r3, [r7, #12]
90004d66:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
90004d68:	687b      	ldr	r3, [r7, #4]
90004d6a:	2200      	movs	r2, #0
90004d6c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
90004d6e:	68fb      	ldr	r3, [r7, #12]
90004d70:	681b      	ldr	r3, [r3, #0]
90004d72:	1e5a      	subs	r2, r3, #1
90004d74:	68fb      	ldr	r3, [r7, #12]
90004d76:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
90004d78:	68fb      	ldr	r3, [r7, #12]
90004d7a:	681b      	ldr	r3, [r3, #0]
}
90004d7c:	4618      	mov	r0, r3
90004d7e:	3714      	adds	r7, #20
90004d80:	46bd      	mov	sp, r7
90004d82:	f85d 7b04 	ldr.w	r7, [sp], #4
90004d86:	4770      	bx	lr

90004d88 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
90004d88:	b580      	push	{r7, lr}
90004d8a:	b084      	sub	sp, #16
90004d8c:	af00      	add	r7, sp, #0
90004d8e:	6078      	str	r0, [r7, #4]
90004d90:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
90004d92:	687b      	ldr	r3, [r7, #4]
90004d94:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
90004d96:	68fb      	ldr	r3, [r7, #12]
90004d98:	2b00      	cmp	r3, #0
90004d9a:	d10a      	bne.n	90004db2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
90004d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
90004da0:	f383 8811 	msr	BASEPRI, r3
90004da4:	f3bf 8f6f 	isb	sy
90004da8:	f3bf 8f4f 	dsb	sy
90004dac:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
90004dae:	bf00      	nop
90004db0:	e7fe      	b.n	90004db0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
90004db2:	f002 f887 	bl	90006ec4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
90004db6:	68fb      	ldr	r3, [r7, #12]
90004db8:	681a      	ldr	r2, [r3, #0]
90004dba:	68fb      	ldr	r3, [r7, #12]
90004dbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90004dbe:	68f9      	ldr	r1, [r7, #12]
90004dc0:	6c09      	ldr	r1, [r1, #64]	; 0x40
90004dc2:	fb01 f303 	mul.w	r3, r1, r3
90004dc6:	441a      	add	r2, r3
90004dc8:	68fb      	ldr	r3, [r7, #12]
90004dca:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
90004dcc:	68fb      	ldr	r3, [r7, #12]
90004dce:	2200      	movs	r2, #0
90004dd0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
90004dd2:	68fb      	ldr	r3, [r7, #12]
90004dd4:	681a      	ldr	r2, [r3, #0]
90004dd6:	68fb      	ldr	r3, [r7, #12]
90004dd8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
90004dda:	68fb      	ldr	r3, [r7, #12]
90004ddc:	681a      	ldr	r2, [r3, #0]
90004dde:	68fb      	ldr	r3, [r7, #12]
90004de0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90004de2:	3b01      	subs	r3, #1
90004de4:	68f9      	ldr	r1, [r7, #12]
90004de6:	6c09      	ldr	r1, [r1, #64]	; 0x40
90004de8:	fb01 f303 	mul.w	r3, r1, r3
90004dec:	441a      	add	r2, r3
90004dee:	68fb      	ldr	r3, [r7, #12]
90004df0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
90004df2:	68fb      	ldr	r3, [r7, #12]
90004df4:	22ff      	movs	r2, #255	; 0xff
90004df6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
90004dfa:	68fb      	ldr	r3, [r7, #12]
90004dfc:	22ff      	movs	r2, #255	; 0xff
90004dfe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
90004e02:	683b      	ldr	r3, [r7, #0]
90004e04:	2b00      	cmp	r3, #0
90004e06:	d114      	bne.n	90004e32 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
90004e08:	68fb      	ldr	r3, [r7, #12]
90004e0a:	691b      	ldr	r3, [r3, #16]
90004e0c:	2b00      	cmp	r3, #0
90004e0e:	d01a      	beq.n	90004e46 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
90004e10:	68fb      	ldr	r3, [r7, #12]
90004e12:	3310      	adds	r3, #16
90004e14:	4618      	mov	r0, r3
90004e16:	f001 fb49 	bl	900064ac <xTaskRemoveFromEventList>
90004e1a:	4603      	mov	r3, r0
90004e1c:	2b00      	cmp	r3, #0
90004e1e:	d012      	beq.n	90004e46 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
90004e20:	4b0c      	ldr	r3, [pc, #48]	; (90004e54 <xQueueGenericReset+0xcc>)
90004e22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
90004e26:	601a      	str	r2, [r3, #0]
90004e28:	f3bf 8f4f 	dsb	sy
90004e2c:	f3bf 8f6f 	isb	sy
90004e30:	e009      	b.n	90004e46 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
90004e32:	68fb      	ldr	r3, [r7, #12]
90004e34:	3310      	adds	r3, #16
90004e36:	4618      	mov	r0, r3
90004e38:	f7ff fef2 	bl	90004c20 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
90004e3c:	68fb      	ldr	r3, [r7, #12]
90004e3e:	3324      	adds	r3, #36	; 0x24
90004e40:	4618      	mov	r0, r3
90004e42:	f7ff feed 	bl	90004c20 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
90004e46:	f002 f86d 	bl	90006f24 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
90004e4a:	2301      	movs	r3, #1
}
90004e4c:	4618      	mov	r0, r3
90004e4e:	3710      	adds	r7, #16
90004e50:	46bd      	mov	sp, r7
90004e52:	bd80      	pop	{r7, pc}
90004e54:	e000ed04 	.word	0xe000ed04

90004e58 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
90004e58:	b580      	push	{r7, lr}
90004e5a:	b08e      	sub	sp, #56	; 0x38
90004e5c:	af02      	add	r7, sp, #8
90004e5e:	60f8      	str	r0, [r7, #12]
90004e60:	60b9      	str	r1, [r7, #8]
90004e62:	607a      	str	r2, [r7, #4]
90004e64:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
90004e66:	68fb      	ldr	r3, [r7, #12]
90004e68:	2b00      	cmp	r3, #0
90004e6a:	d10a      	bne.n	90004e82 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
90004e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
90004e70:	f383 8811 	msr	BASEPRI, r3
90004e74:	f3bf 8f6f 	isb	sy
90004e78:	f3bf 8f4f 	dsb	sy
90004e7c:	62bb      	str	r3, [r7, #40]	; 0x28
}
90004e7e:	bf00      	nop
90004e80:	e7fe      	b.n	90004e80 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
90004e82:	683b      	ldr	r3, [r7, #0]
90004e84:	2b00      	cmp	r3, #0
90004e86:	d10a      	bne.n	90004e9e <xQueueGenericCreateStatic+0x46>
	__asm volatile
90004e88:	f04f 0350 	mov.w	r3, #80	; 0x50
90004e8c:	f383 8811 	msr	BASEPRI, r3
90004e90:	f3bf 8f6f 	isb	sy
90004e94:	f3bf 8f4f 	dsb	sy
90004e98:	627b      	str	r3, [r7, #36]	; 0x24
}
90004e9a:	bf00      	nop
90004e9c:	e7fe      	b.n	90004e9c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
90004e9e:	687b      	ldr	r3, [r7, #4]
90004ea0:	2b00      	cmp	r3, #0
90004ea2:	d002      	beq.n	90004eaa <xQueueGenericCreateStatic+0x52>
90004ea4:	68bb      	ldr	r3, [r7, #8]
90004ea6:	2b00      	cmp	r3, #0
90004ea8:	d001      	beq.n	90004eae <xQueueGenericCreateStatic+0x56>
90004eaa:	2301      	movs	r3, #1
90004eac:	e000      	b.n	90004eb0 <xQueueGenericCreateStatic+0x58>
90004eae:	2300      	movs	r3, #0
90004eb0:	2b00      	cmp	r3, #0
90004eb2:	d10a      	bne.n	90004eca <xQueueGenericCreateStatic+0x72>
	__asm volatile
90004eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
90004eb8:	f383 8811 	msr	BASEPRI, r3
90004ebc:	f3bf 8f6f 	isb	sy
90004ec0:	f3bf 8f4f 	dsb	sy
90004ec4:	623b      	str	r3, [r7, #32]
}
90004ec6:	bf00      	nop
90004ec8:	e7fe      	b.n	90004ec8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
90004eca:	687b      	ldr	r3, [r7, #4]
90004ecc:	2b00      	cmp	r3, #0
90004ece:	d102      	bne.n	90004ed6 <xQueueGenericCreateStatic+0x7e>
90004ed0:	68bb      	ldr	r3, [r7, #8]
90004ed2:	2b00      	cmp	r3, #0
90004ed4:	d101      	bne.n	90004eda <xQueueGenericCreateStatic+0x82>
90004ed6:	2301      	movs	r3, #1
90004ed8:	e000      	b.n	90004edc <xQueueGenericCreateStatic+0x84>
90004eda:	2300      	movs	r3, #0
90004edc:	2b00      	cmp	r3, #0
90004ede:	d10a      	bne.n	90004ef6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
90004ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
90004ee4:	f383 8811 	msr	BASEPRI, r3
90004ee8:	f3bf 8f6f 	isb	sy
90004eec:	f3bf 8f4f 	dsb	sy
90004ef0:	61fb      	str	r3, [r7, #28]
}
90004ef2:	bf00      	nop
90004ef4:	e7fe      	b.n	90004ef4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
90004ef6:	2348      	movs	r3, #72	; 0x48
90004ef8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
90004efa:	697b      	ldr	r3, [r7, #20]
90004efc:	2b48      	cmp	r3, #72	; 0x48
90004efe:	d00a      	beq.n	90004f16 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
90004f00:	f04f 0350 	mov.w	r3, #80	; 0x50
90004f04:	f383 8811 	msr	BASEPRI, r3
90004f08:	f3bf 8f6f 	isb	sy
90004f0c:	f3bf 8f4f 	dsb	sy
90004f10:	61bb      	str	r3, [r7, #24]
}
90004f12:	bf00      	nop
90004f14:	e7fe      	b.n	90004f14 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
90004f16:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
90004f18:	683b      	ldr	r3, [r7, #0]
90004f1a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
90004f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90004f1e:	2b00      	cmp	r3, #0
90004f20:	d00d      	beq.n	90004f3e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
90004f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90004f24:	2201      	movs	r2, #1
90004f26:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
90004f2a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
90004f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90004f30:	9300      	str	r3, [sp, #0]
90004f32:	4613      	mov	r3, r2
90004f34:	687a      	ldr	r2, [r7, #4]
90004f36:	68b9      	ldr	r1, [r7, #8]
90004f38:	68f8      	ldr	r0, [r7, #12]
90004f3a:	f000 f83f 	bl	90004fbc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
90004f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
90004f40:	4618      	mov	r0, r3
90004f42:	3730      	adds	r7, #48	; 0x30
90004f44:	46bd      	mov	sp, r7
90004f46:	bd80      	pop	{r7, pc}

90004f48 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
90004f48:	b580      	push	{r7, lr}
90004f4a:	b08a      	sub	sp, #40	; 0x28
90004f4c:	af02      	add	r7, sp, #8
90004f4e:	60f8      	str	r0, [r7, #12]
90004f50:	60b9      	str	r1, [r7, #8]
90004f52:	4613      	mov	r3, r2
90004f54:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
90004f56:	68fb      	ldr	r3, [r7, #12]
90004f58:	2b00      	cmp	r3, #0
90004f5a:	d10a      	bne.n	90004f72 <xQueueGenericCreate+0x2a>
	__asm volatile
90004f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
90004f60:	f383 8811 	msr	BASEPRI, r3
90004f64:	f3bf 8f6f 	isb	sy
90004f68:	f3bf 8f4f 	dsb	sy
90004f6c:	613b      	str	r3, [r7, #16]
}
90004f6e:	bf00      	nop
90004f70:	e7fe      	b.n	90004f70 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
90004f72:	68fb      	ldr	r3, [r7, #12]
90004f74:	68ba      	ldr	r2, [r7, #8]
90004f76:	fb02 f303 	mul.w	r3, r2, r3
90004f7a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
90004f7c:	69fb      	ldr	r3, [r7, #28]
90004f7e:	3348      	adds	r3, #72	; 0x48
90004f80:	4618      	mov	r0, r3
90004f82:	f002 f8c1 	bl	90007108 <pvPortMalloc>
90004f86:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
90004f88:	69bb      	ldr	r3, [r7, #24]
90004f8a:	2b00      	cmp	r3, #0
90004f8c:	d011      	beq.n	90004fb2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
90004f8e:	69bb      	ldr	r3, [r7, #24]
90004f90:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
90004f92:	697b      	ldr	r3, [r7, #20]
90004f94:	3348      	adds	r3, #72	; 0x48
90004f96:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
90004f98:	69bb      	ldr	r3, [r7, #24]
90004f9a:	2200      	movs	r2, #0
90004f9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
90004fa0:	79fa      	ldrb	r2, [r7, #7]
90004fa2:	69bb      	ldr	r3, [r7, #24]
90004fa4:	9300      	str	r3, [sp, #0]
90004fa6:	4613      	mov	r3, r2
90004fa8:	697a      	ldr	r2, [r7, #20]
90004faa:	68b9      	ldr	r1, [r7, #8]
90004fac:	68f8      	ldr	r0, [r7, #12]
90004fae:	f000 f805 	bl	90004fbc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
90004fb2:	69bb      	ldr	r3, [r7, #24]
	}
90004fb4:	4618      	mov	r0, r3
90004fb6:	3720      	adds	r7, #32
90004fb8:	46bd      	mov	sp, r7
90004fba:	bd80      	pop	{r7, pc}

90004fbc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
90004fbc:	b580      	push	{r7, lr}
90004fbe:	b084      	sub	sp, #16
90004fc0:	af00      	add	r7, sp, #0
90004fc2:	60f8      	str	r0, [r7, #12]
90004fc4:	60b9      	str	r1, [r7, #8]
90004fc6:	607a      	str	r2, [r7, #4]
90004fc8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
90004fca:	68bb      	ldr	r3, [r7, #8]
90004fcc:	2b00      	cmp	r3, #0
90004fce:	d103      	bne.n	90004fd8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
90004fd0:	69bb      	ldr	r3, [r7, #24]
90004fd2:	69ba      	ldr	r2, [r7, #24]
90004fd4:	601a      	str	r2, [r3, #0]
90004fd6:	e002      	b.n	90004fde <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
90004fd8:	69bb      	ldr	r3, [r7, #24]
90004fda:	687a      	ldr	r2, [r7, #4]
90004fdc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
90004fde:	69bb      	ldr	r3, [r7, #24]
90004fe0:	68fa      	ldr	r2, [r7, #12]
90004fe2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
90004fe4:	69bb      	ldr	r3, [r7, #24]
90004fe6:	68ba      	ldr	r2, [r7, #8]
90004fe8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
90004fea:	2101      	movs	r1, #1
90004fec:	69b8      	ldr	r0, [r7, #24]
90004fee:	f7ff fecb 	bl	90004d88 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
90004ff2:	bf00      	nop
90004ff4:	3710      	adds	r7, #16
90004ff6:	46bd      	mov	sp, r7
90004ff8:	bd80      	pop	{r7, pc}

90004ffa <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
90004ffa:	b580      	push	{r7, lr}
90004ffc:	b082      	sub	sp, #8
90004ffe:	af00      	add	r7, sp, #0
90005000:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
90005002:	687b      	ldr	r3, [r7, #4]
90005004:	2b00      	cmp	r3, #0
90005006:	d00e      	beq.n	90005026 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
90005008:	687b      	ldr	r3, [r7, #4]
9000500a:	2200      	movs	r2, #0
9000500c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
9000500e:	687b      	ldr	r3, [r7, #4]
90005010:	2200      	movs	r2, #0
90005012:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
90005014:	687b      	ldr	r3, [r7, #4]
90005016:	2200      	movs	r2, #0
90005018:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
9000501a:	2300      	movs	r3, #0
9000501c:	2200      	movs	r2, #0
9000501e:	2100      	movs	r1, #0
90005020:	6878      	ldr	r0, [r7, #4]
90005022:	f000 f837 	bl	90005094 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
90005026:	bf00      	nop
90005028:	3708      	adds	r7, #8
9000502a:	46bd      	mov	sp, r7
9000502c:	bd80      	pop	{r7, pc}

9000502e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
9000502e:	b580      	push	{r7, lr}
90005030:	b086      	sub	sp, #24
90005032:	af00      	add	r7, sp, #0
90005034:	4603      	mov	r3, r0
90005036:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
90005038:	2301      	movs	r3, #1
9000503a:	617b      	str	r3, [r7, #20]
9000503c:	2300      	movs	r3, #0
9000503e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
90005040:	79fb      	ldrb	r3, [r7, #7]
90005042:	461a      	mov	r2, r3
90005044:	6939      	ldr	r1, [r7, #16]
90005046:	6978      	ldr	r0, [r7, #20]
90005048:	f7ff ff7e 	bl	90004f48 <xQueueGenericCreate>
9000504c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
9000504e:	68f8      	ldr	r0, [r7, #12]
90005050:	f7ff ffd3 	bl	90004ffa <prvInitialiseMutex>

		return xNewQueue;
90005054:	68fb      	ldr	r3, [r7, #12]
	}
90005056:	4618      	mov	r0, r3
90005058:	3718      	adds	r7, #24
9000505a:	46bd      	mov	sp, r7
9000505c:	bd80      	pop	{r7, pc}

9000505e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
9000505e:	b580      	push	{r7, lr}
90005060:	b088      	sub	sp, #32
90005062:	af02      	add	r7, sp, #8
90005064:	4603      	mov	r3, r0
90005066:	6039      	str	r1, [r7, #0]
90005068:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
9000506a:	2301      	movs	r3, #1
9000506c:	617b      	str	r3, [r7, #20]
9000506e:	2300      	movs	r3, #0
90005070:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
90005072:	79fb      	ldrb	r3, [r7, #7]
90005074:	9300      	str	r3, [sp, #0]
90005076:	683b      	ldr	r3, [r7, #0]
90005078:	2200      	movs	r2, #0
9000507a:	6939      	ldr	r1, [r7, #16]
9000507c:	6978      	ldr	r0, [r7, #20]
9000507e:	f7ff feeb 	bl	90004e58 <xQueueGenericCreateStatic>
90005082:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
90005084:	68f8      	ldr	r0, [r7, #12]
90005086:	f7ff ffb8 	bl	90004ffa <prvInitialiseMutex>

		return xNewQueue;
9000508a:	68fb      	ldr	r3, [r7, #12]
	}
9000508c:	4618      	mov	r0, r3
9000508e:	3718      	adds	r7, #24
90005090:	46bd      	mov	sp, r7
90005092:	bd80      	pop	{r7, pc}

90005094 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
90005094:	b580      	push	{r7, lr}
90005096:	b08e      	sub	sp, #56	; 0x38
90005098:	af00      	add	r7, sp, #0
9000509a:	60f8      	str	r0, [r7, #12]
9000509c:	60b9      	str	r1, [r7, #8]
9000509e:	607a      	str	r2, [r7, #4]
900050a0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
900050a2:	2300      	movs	r3, #0
900050a4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
900050a6:	68fb      	ldr	r3, [r7, #12]
900050a8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
900050aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
900050ac:	2b00      	cmp	r3, #0
900050ae:	d10a      	bne.n	900050c6 <xQueueGenericSend+0x32>
	__asm volatile
900050b0:	f04f 0350 	mov.w	r3, #80	; 0x50
900050b4:	f383 8811 	msr	BASEPRI, r3
900050b8:	f3bf 8f6f 	isb	sy
900050bc:	f3bf 8f4f 	dsb	sy
900050c0:	62bb      	str	r3, [r7, #40]	; 0x28
}
900050c2:	bf00      	nop
900050c4:	e7fe      	b.n	900050c4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
900050c6:	68bb      	ldr	r3, [r7, #8]
900050c8:	2b00      	cmp	r3, #0
900050ca:	d103      	bne.n	900050d4 <xQueueGenericSend+0x40>
900050cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
900050ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
900050d0:	2b00      	cmp	r3, #0
900050d2:	d101      	bne.n	900050d8 <xQueueGenericSend+0x44>
900050d4:	2301      	movs	r3, #1
900050d6:	e000      	b.n	900050da <xQueueGenericSend+0x46>
900050d8:	2300      	movs	r3, #0
900050da:	2b00      	cmp	r3, #0
900050dc:	d10a      	bne.n	900050f4 <xQueueGenericSend+0x60>
	__asm volatile
900050de:	f04f 0350 	mov.w	r3, #80	; 0x50
900050e2:	f383 8811 	msr	BASEPRI, r3
900050e6:	f3bf 8f6f 	isb	sy
900050ea:	f3bf 8f4f 	dsb	sy
900050ee:	627b      	str	r3, [r7, #36]	; 0x24
}
900050f0:	bf00      	nop
900050f2:	e7fe      	b.n	900050f2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
900050f4:	683b      	ldr	r3, [r7, #0]
900050f6:	2b02      	cmp	r3, #2
900050f8:	d103      	bne.n	90005102 <xQueueGenericSend+0x6e>
900050fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
900050fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
900050fe:	2b01      	cmp	r3, #1
90005100:	d101      	bne.n	90005106 <xQueueGenericSend+0x72>
90005102:	2301      	movs	r3, #1
90005104:	e000      	b.n	90005108 <xQueueGenericSend+0x74>
90005106:	2300      	movs	r3, #0
90005108:	2b00      	cmp	r3, #0
9000510a:	d10a      	bne.n	90005122 <xQueueGenericSend+0x8e>
	__asm volatile
9000510c:	f04f 0350 	mov.w	r3, #80	; 0x50
90005110:	f383 8811 	msr	BASEPRI, r3
90005114:	f3bf 8f6f 	isb	sy
90005118:	f3bf 8f4f 	dsb	sy
9000511c:	623b      	str	r3, [r7, #32]
}
9000511e:	bf00      	nop
90005120:	e7fe      	b.n	90005120 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
90005122:	f001 fb83 	bl	9000682c <xTaskGetSchedulerState>
90005126:	4603      	mov	r3, r0
90005128:	2b00      	cmp	r3, #0
9000512a:	d102      	bne.n	90005132 <xQueueGenericSend+0x9e>
9000512c:	687b      	ldr	r3, [r7, #4]
9000512e:	2b00      	cmp	r3, #0
90005130:	d101      	bne.n	90005136 <xQueueGenericSend+0xa2>
90005132:	2301      	movs	r3, #1
90005134:	e000      	b.n	90005138 <xQueueGenericSend+0xa4>
90005136:	2300      	movs	r3, #0
90005138:	2b00      	cmp	r3, #0
9000513a:	d10a      	bne.n	90005152 <xQueueGenericSend+0xbe>
	__asm volatile
9000513c:	f04f 0350 	mov.w	r3, #80	; 0x50
90005140:	f383 8811 	msr	BASEPRI, r3
90005144:	f3bf 8f6f 	isb	sy
90005148:	f3bf 8f4f 	dsb	sy
9000514c:	61fb      	str	r3, [r7, #28]
}
9000514e:	bf00      	nop
90005150:	e7fe      	b.n	90005150 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
90005152:	f001 feb7 	bl	90006ec4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
90005156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90005158:	6b9a      	ldr	r2, [r3, #56]	; 0x38
9000515a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9000515c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
9000515e:	429a      	cmp	r2, r3
90005160:	d302      	bcc.n	90005168 <xQueueGenericSend+0xd4>
90005162:	683b      	ldr	r3, [r7, #0]
90005164:	2b02      	cmp	r3, #2
90005166:	d129      	bne.n	900051bc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
90005168:	683a      	ldr	r2, [r7, #0]
9000516a:	68b9      	ldr	r1, [r7, #8]
9000516c:	6b38      	ldr	r0, [r7, #48]	; 0x30
9000516e:	f000 fc3b 	bl	900059e8 <prvCopyDataToQueue>
90005172:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
90005174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90005176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90005178:	2b00      	cmp	r3, #0
9000517a:	d010      	beq.n	9000519e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000517c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9000517e:	3324      	adds	r3, #36	; 0x24
90005180:	4618      	mov	r0, r3
90005182:	f001 f993 	bl	900064ac <xTaskRemoveFromEventList>
90005186:	4603      	mov	r3, r0
90005188:	2b00      	cmp	r3, #0
9000518a:	d013      	beq.n	900051b4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
9000518c:	4b3f      	ldr	r3, [pc, #252]	; (9000528c <xQueueGenericSend+0x1f8>)
9000518e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
90005192:	601a      	str	r2, [r3, #0]
90005194:	f3bf 8f4f 	dsb	sy
90005198:	f3bf 8f6f 	isb	sy
9000519c:	e00a      	b.n	900051b4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
9000519e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
900051a0:	2b00      	cmp	r3, #0
900051a2:	d007      	beq.n	900051b4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
900051a4:	4b39      	ldr	r3, [pc, #228]	; (9000528c <xQueueGenericSend+0x1f8>)
900051a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
900051aa:	601a      	str	r2, [r3, #0]
900051ac:	f3bf 8f4f 	dsb	sy
900051b0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
900051b4:	f001 feb6 	bl	90006f24 <vPortExitCritical>
				return pdPASS;
900051b8:	2301      	movs	r3, #1
900051ba:	e063      	b.n	90005284 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
900051bc:	687b      	ldr	r3, [r7, #4]
900051be:	2b00      	cmp	r3, #0
900051c0:	d103      	bne.n	900051ca <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
900051c2:	f001 feaf 	bl	90006f24 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
900051c6:	2300      	movs	r3, #0
900051c8:	e05c      	b.n	90005284 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
900051ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
900051cc:	2b00      	cmp	r3, #0
900051ce:	d106      	bne.n	900051de <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
900051d0:	f107 0314 	add.w	r3, r7, #20
900051d4:	4618      	mov	r0, r3
900051d6:	f001 f9cb 	bl	90006570 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
900051da:	2301      	movs	r3, #1
900051dc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
900051de:	f001 fea1 	bl	90006f24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
900051e2:	f000 ff59 	bl	90006098 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
900051e6:	f001 fe6d 	bl	90006ec4 <vPortEnterCritical>
900051ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
900051ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
900051f0:	b25b      	sxtb	r3, r3
900051f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
900051f6:	d103      	bne.n	90005200 <xQueueGenericSend+0x16c>
900051f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
900051fa:	2200      	movs	r2, #0
900051fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
90005200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90005202:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
90005206:	b25b      	sxtb	r3, r3
90005208:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
9000520c:	d103      	bne.n	90005216 <xQueueGenericSend+0x182>
9000520e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90005210:	2200      	movs	r2, #0
90005212:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
90005216:	f001 fe85 	bl	90006f24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
9000521a:	1d3a      	adds	r2, r7, #4
9000521c:	f107 0314 	add.w	r3, r7, #20
90005220:	4611      	mov	r1, r2
90005222:	4618      	mov	r0, r3
90005224:	f001 f9ba 	bl	9000659c <xTaskCheckForTimeOut>
90005228:	4603      	mov	r3, r0
9000522a:	2b00      	cmp	r3, #0
9000522c:	d124      	bne.n	90005278 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
9000522e:	6b38      	ldr	r0, [r7, #48]	; 0x30
90005230:	f000 fcd2 	bl	90005bd8 <prvIsQueueFull>
90005234:	4603      	mov	r3, r0
90005236:	2b00      	cmp	r3, #0
90005238:	d018      	beq.n	9000526c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
9000523a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9000523c:	3310      	adds	r3, #16
9000523e:	687a      	ldr	r2, [r7, #4]
90005240:	4611      	mov	r1, r2
90005242:	4618      	mov	r0, r3
90005244:	f001 f90e 	bl	90006464 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
90005248:	6b38      	ldr	r0, [r7, #48]	; 0x30
9000524a:	f000 fc5d 	bl	90005b08 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
9000524e:	f000 ff31 	bl	900060b4 <xTaskResumeAll>
90005252:	4603      	mov	r3, r0
90005254:	2b00      	cmp	r3, #0
90005256:	f47f af7c 	bne.w	90005152 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
9000525a:	4b0c      	ldr	r3, [pc, #48]	; (9000528c <xQueueGenericSend+0x1f8>)
9000525c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
90005260:	601a      	str	r2, [r3, #0]
90005262:	f3bf 8f4f 	dsb	sy
90005266:	f3bf 8f6f 	isb	sy
9000526a:	e772      	b.n	90005152 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
9000526c:	6b38      	ldr	r0, [r7, #48]	; 0x30
9000526e:	f000 fc4b 	bl	90005b08 <prvUnlockQueue>
				( void ) xTaskResumeAll();
90005272:	f000 ff1f 	bl	900060b4 <xTaskResumeAll>
90005276:	e76c      	b.n	90005152 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
90005278:	6b38      	ldr	r0, [r7, #48]	; 0x30
9000527a:	f000 fc45 	bl	90005b08 <prvUnlockQueue>
			( void ) xTaskResumeAll();
9000527e:	f000 ff19 	bl	900060b4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
90005282:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
90005284:	4618      	mov	r0, r3
90005286:	3738      	adds	r7, #56	; 0x38
90005288:	46bd      	mov	sp, r7
9000528a:	bd80      	pop	{r7, pc}
9000528c:	e000ed04 	.word	0xe000ed04

90005290 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
90005290:	b580      	push	{r7, lr}
90005292:	b090      	sub	sp, #64	; 0x40
90005294:	af00      	add	r7, sp, #0
90005296:	60f8      	str	r0, [r7, #12]
90005298:	60b9      	str	r1, [r7, #8]
9000529a:	607a      	str	r2, [r7, #4]
9000529c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
9000529e:	68fb      	ldr	r3, [r7, #12]
900052a0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
900052a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
900052a4:	2b00      	cmp	r3, #0
900052a6:	d10a      	bne.n	900052be <xQueueGenericSendFromISR+0x2e>
	__asm volatile
900052a8:	f04f 0350 	mov.w	r3, #80	; 0x50
900052ac:	f383 8811 	msr	BASEPRI, r3
900052b0:	f3bf 8f6f 	isb	sy
900052b4:	f3bf 8f4f 	dsb	sy
900052b8:	62bb      	str	r3, [r7, #40]	; 0x28
}
900052ba:	bf00      	nop
900052bc:	e7fe      	b.n	900052bc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
900052be:	68bb      	ldr	r3, [r7, #8]
900052c0:	2b00      	cmp	r3, #0
900052c2:	d103      	bne.n	900052cc <xQueueGenericSendFromISR+0x3c>
900052c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
900052c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
900052c8:	2b00      	cmp	r3, #0
900052ca:	d101      	bne.n	900052d0 <xQueueGenericSendFromISR+0x40>
900052cc:	2301      	movs	r3, #1
900052ce:	e000      	b.n	900052d2 <xQueueGenericSendFromISR+0x42>
900052d0:	2300      	movs	r3, #0
900052d2:	2b00      	cmp	r3, #0
900052d4:	d10a      	bne.n	900052ec <xQueueGenericSendFromISR+0x5c>
	__asm volatile
900052d6:	f04f 0350 	mov.w	r3, #80	; 0x50
900052da:	f383 8811 	msr	BASEPRI, r3
900052de:	f3bf 8f6f 	isb	sy
900052e2:	f3bf 8f4f 	dsb	sy
900052e6:	627b      	str	r3, [r7, #36]	; 0x24
}
900052e8:	bf00      	nop
900052ea:	e7fe      	b.n	900052ea <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
900052ec:	683b      	ldr	r3, [r7, #0]
900052ee:	2b02      	cmp	r3, #2
900052f0:	d103      	bne.n	900052fa <xQueueGenericSendFromISR+0x6a>
900052f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
900052f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
900052f6:	2b01      	cmp	r3, #1
900052f8:	d101      	bne.n	900052fe <xQueueGenericSendFromISR+0x6e>
900052fa:	2301      	movs	r3, #1
900052fc:	e000      	b.n	90005300 <xQueueGenericSendFromISR+0x70>
900052fe:	2300      	movs	r3, #0
90005300:	2b00      	cmp	r3, #0
90005302:	d10a      	bne.n	9000531a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
90005304:	f04f 0350 	mov.w	r3, #80	; 0x50
90005308:	f383 8811 	msr	BASEPRI, r3
9000530c:	f3bf 8f6f 	isb	sy
90005310:	f3bf 8f4f 	dsb	sy
90005314:	623b      	str	r3, [r7, #32]
}
90005316:	bf00      	nop
90005318:	e7fe      	b.n	90005318 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
9000531a:	f001 feb5 	bl	90007088 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
9000531e:	f3ef 8211 	mrs	r2, BASEPRI
90005322:	f04f 0350 	mov.w	r3, #80	; 0x50
90005326:	f383 8811 	msr	BASEPRI, r3
9000532a:	f3bf 8f6f 	isb	sy
9000532e:	f3bf 8f4f 	dsb	sy
90005332:	61fa      	str	r2, [r7, #28]
90005334:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
90005336:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
90005338:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
9000533a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000533c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
9000533e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
90005340:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90005342:	429a      	cmp	r2, r3
90005344:	d302      	bcc.n	9000534c <xQueueGenericSendFromISR+0xbc>
90005346:	683b      	ldr	r3, [r7, #0]
90005348:	2b02      	cmp	r3, #2
9000534a:	d12f      	bne.n	900053ac <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
9000534c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000534e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
90005352:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
90005356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
90005358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9000535a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
9000535c:	683a      	ldr	r2, [r7, #0]
9000535e:	68b9      	ldr	r1, [r7, #8]
90005360:	6bb8      	ldr	r0, [r7, #56]	; 0x38
90005362:	f000 fb41 	bl	900059e8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
90005366:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
9000536a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
9000536e:	d112      	bne.n	90005396 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
90005370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
90005372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90005374:	2b00      	cmp	r3, #0
90005376:	d016      	beq.n	900053a6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
90005378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000537a:	3324      	adds	r3, #36	; 0x24
9000537c:	4618      	mov	r0, r3
9000537e:	f001 f895 	bl	900064ac <xTaskRemoveFromEventList>
90005382:	4603      	mov	r3, r0
90005384:	2b00      	cmp	r3, #0
90005386:	d00e      	beq.n	900053a6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
90005388:	687b      	ldr	r3, [r7, #4]
9000538a:	2b00      	cmp	r3, #0
9000538c:	d00b      	beq.n	900053a6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
9000538e:	687b      	ldr	r3, [r7, #4]
90005390:	2201      	movs	r2, #1
90005392:	601a      	str	r2, [r3, #0]
90005394:	e007      	b.n	900053a6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
90005396:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
9000539a:	3301      	adds	r3, #1
9000539c:	b2db      	uxtb	r3, r3
9000539e:	b25a      	sxtb	r2, r3
900053a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
900053a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
900053a6:	2301      	movs	r3, #1
900053a8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
900053aa:	e001      	b.n	900053b0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
900053ac:	2300      	movs	r3, #0
900053ae:	63fb      	str	r3, [r7, #60]	; 0x3c
900053b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
900053b2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
900053b4:	697b      	ldr	r3, [r7, #20]
900053b6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
900053ba:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
900053bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
900053be:	4618      	mov	r0, r3
900053c0:	3740      	adds	r7, #64	; 0x40
900053c2:	46bd      	mov	sp, r7
900053c4:	bd80      	pop	{r7, pc}

900053c6 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
900053c6:	b580      	push	{r7, lr}
900053c8:	b08e      	sub	sp, #56	; 0x38
900053ca:	af00      	add	r7, sp, #0
900053cc:	6078      	str	r0, [r7, #4]
900053ce:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
900053d0:	687b      	ldr	r3, [r7, #4]
900053d2:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
900053d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
900053d6:	2b00      	cmp	r3, #0
900053d8:	d10a      	bne.n	900053f0 <xQueueGiveFromISR+0x2a>
	__asm volatile
900053da:	f04f 0350 	mov.w	r3, #80	; 0x50
900053de:	f383 8811 	msr	BASEPRI, r3
900053e2:	f3bf 8f6f 	isb	sy
900053e6:	f3bf 8f4f 	dsb	sy
900053ea:	623b      	str	r3, [r7, #32]
}
900053ec:	bf00      	nop
900053ee:	e7fe      	b.n	900053ee <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
900053f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
900053f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
900053f4:	2b00      	cmp	r3, #0
900053f6:	d00a      	beq.n	9000540e <xQueueGiveFromISR+0x48>
	__asm volatile
900053f8:	f04f 0350 	mov.w	r3, #80	; 0x50
900053fc:	f383 8811 	msr	BASEPRI, r3
90005400:	f3bf 8f6f 	isb	sy
90005404:	f3bf 8f4f 	dsb	sy
90005408:	61fb      	str	r3, [r7, #28]
}
9000540a:	bf00      	nop
9000540c:	e7fe      	b.n	9000540c <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
9000540e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90005410:	681b      	ldr	r3, [r3, #0]
90005412:	2b00      	cmp	r3, #0
90005414:	d103      	bne.n	9000541e <xQueueGiveFromISR+0x58>
90005416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90005418:	689b      	ldr	r3, [r3, #8]
9000541a:	2b00      	cmp	r3, #0
9000541c:	d101      	bne.n	90005422 <xQueueGiveFromISR+0x5c>
9000541e:	2301      	movs	r3, #1
90005420:	e000      	b.n	90005424 <xQueueGiveFromISR+0x5e>
90005422:	2300      	movs	r3, #0
90005424:	2b00      	cmp	r3, #0
90005426:	d10a      	bne.n	9000543e <xQueueGiveFromISR+0x78>
	__asm volatile
90005428:	f04f 0350 	mov.w	r3, #80	; 0x50
9000542c:	f383 8811 	msr	BASEPRI, r3
90005430:	f3bf 8f6f 	isb	sy
90005434:	f3bf 8f4f 	dsb	sy
90005438:	61bb      	str	r3, [r7, #24]
}
9000543a:	bf00      	nop
9000543c:	e7fe      	b.n	9000543c <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
9000543e:	f001 fe23 	bl	90007088 <vPortValidateInterruptPriority>
	__asm volatile
90005442:	f3ef 8211 	mrs	r2, BASEPRI
90005446:	f04f 0350 	mov.w	r3, #80	; 0x50
9000544a:	f383 8811 	msr	BASEPRI, r3
9000544e:	f3bf 8f6f 	isb	sy
90005452:	f3bf 8f4f 	dsb	sy
90005456:	617a      	str	r2, [r7, #20]
90005458:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
9000545a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
9000545c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
9000545e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90005460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90005462:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
90005464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90005466:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90005468:	6aba      	ldr	r2, [r7, #40]	; 0x28
9000546a:	429a      	cmp	r2, r3
9000546c:	d22b      	bcs.n	900054c6 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
9000546e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90005470:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
90005474:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
90005478:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000547a:	1c5a      	adds	r2, r3, #1
9000547c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9000547e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
90005480:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
90005484:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
90005488:	d112      	bne.n	900054b0 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000548a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9000548c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000548e:	2b00      	cmp	r3, #0
90005490:	d016      	beq.n	900054c0 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
90005492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90005494:	3324      	adds	r3, #36	; 0x24
90005496:	4618      	mov	r0, r3
90005498:	f001 f808 	bl	900064ac <xTaskRemoveFromEventList>
9000549c:	4603      	mov	r3, r0
9000549e:	2b00      	cmp	r3, #0
900054a0:	d00e      	beq.n	900054c0 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
900054a2:	683b      	ldr	r3, [r7, #0]
900054a4:	2b00      	cmp	r3, #0
900054a6:	d00b      	beq.n	900054c0 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
900054a8:	683b      	ldr	r3, [r7, #0]
900054aa:	2201      	movs	r2, #1
900054ac:	601a      	str	r2, [r3, #0]
900054ae:	e007      	b.n	900054c0 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
900054b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
900054b4:	3301      	adds	r3, #1
900054b6:	b2db      	uxtb	r3, r3
900054b8:	b25a      	sxtb	r2, r3
900054ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
900054bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
900054c0:	2301      	movs	r3, #1
900054c2:	637b      	str	r3, [r7, #52]	; 0x34
900054c4:	e001      	b.n	900054ca <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
900054c6:	2300      	movs	r3, #0
900054c8:	637b      	str	r3, [r7, #52]	; 0x34
900054ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
900054cc:	60fb      	str	r3, [r7, #12]
	__asm volatile
900054ce:	68fb      	ldr	r3, [r7, #12]
900054d0:	f383 8811 	msr	BASEPRI, r3
}
900054d4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
900054d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
900054d8:	4618      	mov	r0, r3
900054da:	3738      	adds	r7, #56	; 0x38
900054dc:	46bd      	mov	sp, r7
900054de:	bd80      	pop	{r7, pc}

900054e0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
900054e0:	b580      	push	{r7, lr}
900054e2:	b08c      	sub	sp, #48	; 0x30
900054e4:	af00      	add	r7, sp, #0
900054e6:	60f8      	str	r0, [r7, #12]
900054e8:	60b9      	str	r1, [r7, #8]
900054ea:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
900054ec:	2300      	movs	r3, #0
900054ee:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
900054f0:	68fb      	ldr	r3, [r7, #12]
900054f2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
900054f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
900054f6:	2b00      	cmp	r3, #0
900054f8:	d10a      	bne.n	90005510 <xQueueReceive+0x30>
	__asm volatile
900054fa:	f04f 0350 	mov.w	r3, #80	; 0x50
900054fe:	f383 8811 	msr	BASEPRI, r3
90005502:	f3bf 8f6f 	isb	sy
90005506:	f3bf 8f4f 	dsb	sy
9000550a:	623b      	str	r3, [r7, #32]
}
9000550c:	bf00      	nop
9000550e:	e7fe      	b.n	9000550e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
90005510:	68bb      	ldr	r3, [r7, #8]
90005512:	2b00      	cmp	r3, #0
90005514:	d103      	bne.n	9000551e <xQueueReceive+0x3e>
90005516:	6abb      	ldr	r3, [r7, #40]	; 0x28
90005518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
9000551a:	2b00      	cmp	r3, #0
9000551c:	d101      	bne.n	90005522 <xQueueReceive+0x42>
9000551e:	2301      	movs	r3, #1
90005520:	e000      	b.n	90005524 <xQueueReceive+0x44>
90005522:	2300      	movs	r3, #0
90005524:	2b00      	cmp	r3, #0
90005526:	d10a      	bne.n	9000553e <xQueueReceive+0x5e>
	__asm volatile
90005528:	f04f 0350 	mov.w	r3, #80	; 0x50
9000552c:	f383 8811 	msr	BASEPRI, r3
90005530:	f3bf 8f6f 	isb	sy
90005534:	f3bf 8f4f 	dsb	sy
90005538:	61fb      	str	r3, [r7, #28]
}
9000553a:	bf00      	nop
9000553c:	e7fe      	b.n	9000553c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
9000553e:	f001 f975 	bl	9000682c <xTaskGetSchedulerState>
90005542:	4603      	mov	r3, r0
90005544:	2b00      	cmp	r3, #0
90005546:	d102      	bne.n	9000554e <xQueueReceive+0x6e>
90005548:	687b      	ldr	r3, [r7, #4]
9000554a:	2b00      	cmp	r3, #0
9000554c:	d101      	bne.n	90005552 <xQueueReceive+0x72>
9000554e:	2301      	movs	r3, #1
90005550:	e000      	b.n	90005554 <xQueueReceive+0x74>
90005552:	2300      	movs	r3, #0
90005554:	2b00      	cmp	r3, #0
90005556:	d10a      	bne.n	9000556e <xQueueReceive+0x8e>
	__asm volatile
90005558:	f04f 0350 	mov.w	r3, #80	; 0x50
9000555c:	f383 8811 	msr	BASEPRI, r3
90005560:	f3bf 8f6f 	isb	sy
90005564:	f3bf 8f4f 	dsb	sy
90005568:	61bb      	str	r3, [r7, #24]
}
9000556a:	bf00      	nop
9000556c:	e7fe      	b.n	9000556c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
9000556e:	f001 fca9 	bl	90006ec4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
90005572:	6abb      	ldr	r3, [r7, #40]	; 0x28
90005574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90005576:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
90005578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000557a:	2b00      	cmp	r3, #0
9000557c:	d01f      	beq.n	900055be <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
9000557e:	68b9      	ldr	r1, [r7, #8]
90005580:	6ab8      	ldr	r0, [r7, #40]	; 0x28
90005582:	f000 fa9b 	bl	90005abc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
90005586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90005588:	1e5a      	subs	r2, r3, #1
9000558a:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000558c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000558e:	6abb      	ldr	r3, [r7, #40]	; 0x28
90005590:	691b      	ldr	r3, [r3, #16]
90005592:	2b00      	cmp	r3, #0
90005594:	d00f      	beq.n	900055b6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
90005596:	6abb      	ldr	r3, [r7, #40]	; 0x28
90005598:	3310      	adds	r3, #16
9000559a:	4618      	mov	r0, r3
9000559c:	f000 ff86 	bl	900064ac <xTaskRemoveFromEventList>
900055a0:	4603      	mov	r3, r0
900055a2:	2b00      	cmp	r3, #0
900055a4:	d007      	beq.n	900055b6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
900055a6:	4b3d      	ldr	r3, [pc, #244]	; (9000569c <xQueueReceive+0x1bc>)
900055a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
900055ac:	601a      	str	r2, [r3, #0]
900055ae:	f3bf 8f4f 	dsb	sy
900055b2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
900055b6:	f001 fcb5 	bl	90006f24 <vPortExitCritical>
				return pdPASS;
900055ba:	2301      	movs	r3, #1
900055bc:	e069      	b.n	90005692 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
900055be:	687b      	ldr	r3, [r7, #4]
900055c0:	2b00      	cmp	r3, #0
900055c2:	d103      	bne.n	900055cc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
900055c4:	f001 fcae 	bl	90006f24 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
900055c8:	2300      	movs	r3, #0
900055ca:	e062      	b.n	90005692 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
900055cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
900055ce:	2b00      	cmp	r3, #0
900055d0:	d106      	bne.n	900055e0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
900055d2:	f107 0310 	add.w	r3, r7, #16
900055d6:	4618      	mov	r0, r3
900055d8:	f000 ffca 	bl	90006570 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
900055dc:	2301      	movs	r3, #1
900055de:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
900055e0:	f001 fca0 	bl	90006f24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
900055e4:	f000 fd58 	bl	90006098 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
900055e8:	f001 fc6c 	bl	90006ec4 <vPortEnterCritical>
900055ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
900055ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
900055f2:	b25b      	sxtb	r3, r3
900055f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
900055f8:	d103      	bne.n	90005602 <xQueueReceive+0x122>
900055fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
900055fc:	2200      	movs	r2, #0
900055fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
90005602:	6abb      	ldr	r3, [r7, #40]	; 0x28
90005604:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
90005608:	b25b      	sxtb	r3, r3
9000560a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
9000560e:	d103      	bne.n	90005618 <xQueueReceive+0x138>
90005610:	6abb      	ldr	r3, [r7, #40]	; 0x28
90005612:	2200      	movs	r2, #0
90005614:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
90005618:	f001 fc84 	bl	90006f24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
9000561c:	1d3a      	adds	r2, r7, #4
9000561e:	f107 0310 	add.w	r3, r7, #16
90005622:	4611      	mov	r1, r2
90005624:	4618      	mov	r0, r3
90005626:	f000 ffb9 	bl	9000659c <xTaskCheckForTimeOut>
9000562a:	4603      	mov	r3, r0
9000562c:	2b00      	cmp	r3, #0
9000562e:	d123      	bne.n	90005678 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
90005630:	6ab8      	ldr	r0, [r7, #40]	; 0x28
90005632:	f000 fabb 	bl	90005bac <prvIsQueueEmpty>
90005636:	4603      	mov	r3, r0
90005638:	2b00      	cmp	r3, #0
9000563a:	d017      	beq.n	9000566c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
9000563c:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000563e:	3324      	adds	r3, #36	; 0x24
90005640:	687a      	ldr	r2, [r7, #4]
90005642:	4611      	mov	r1, r2
90005644:	4618      	mov	r0, r3
90005646:	f000 ff0d 	bl	90006464 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
9000564a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
9000564c:	f000 fa5c 	bl	90005b08 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
90005650:	f000 fd30 	bl	900060b4 <xTaskResumeAll>
90005654:	4603      	mov	r3, r0
90005656:	2b00      	cmp	r3, #0
90005658:	d189      	bne.n	9000556e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
9000565a:	4b10      	ldr	r3, [pc, #64]	; (9000569c <xQueueReceive+0x1bc>)
9000565c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
90005660:	601a      	str	r2, [r3, #0]
90005662:	f3bf 8f4f 	dsb	sy
90005666:	f3bf 8f6f 	isb	sy
9000566a:	e780      	b.n	9000556e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
9000566c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
9000566e:	f000 fa4b 	bl	90005b08 <prvUnlockQueue>
				( void ) xTaskResumeAll();
90005672:	f000 fd1f 	bl	900060b4 <xTaskResumeAll>
90005676:	e77a      	b.n	9000556e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
90005678:	6ab8      	ldr	r0, [r7, #40]	; 0x28
9000567a:	f000 fa45 	bl	90005b08 <prvUnlockQueue>
			( void ) xTaskResumeAll();
9000567e:	f000 fd19 	bl	900060b4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
90005682:	6ab8      	ldr	r0, [r7, #40]	; 0x28
90005684:	f000 fa92 	bl	90005bac <prvIsQueueEmpty>
90005688:	4603      	mov	r3, r0
9000568a:	2b00      	cmp	r3, #0
9000568c:	f43f af6f 	beq.w	9000556e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
90005690:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
90005692:	4618      	mov	r0, r3
90005694:	3730      	adds	r7, #48	; 0x30
90005696:	46bd      	mov	sp, r7
90005698:	bd80      	pop	{r7, pc}
9000569a:	bf00      	nop
9000569c:	e000ed04 	.word	0xe000ed04

900056a0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
900056a0:	b580      	push	{r7, lr}
900056a2:	b08e      	sub	sp, #56	; 0x38
900056a4:	af00      	add	r7, sp, #0
900056a6:	6078      	str	r0, [r7, #4]
900056a8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
900056aa:	2300      	movs	r3, #0
900056ac:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
900056ae:	687b      	ldr	r3, [r7, #4]
900056b0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
900056b2:	2300      	movs	r3, #0
900056b4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
900056b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
900056b8:	2b00      	cmp	r3, #0
900056ba:	d10a      	bne.n	900056d2 <xQueueSemaphoreTake+0x32>
	__asm volatile
900056bc:	f04f 0350 	mov.w	r3, #80	; 0x50
900056c0:	f383 8811 	msr	BASEPRI, r3
900056c4:	f3bf 8f6f 	isb	sy
900056c8:	f3bf 8f4f 	dsb	sy
900056cc:	623b      	str	r3, [r7, #32]
}
900056ce:	bf00      	nop
900056d0:	e7fe      	b.n	900056d0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
900056d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
900056d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
900056d6:	2b00      	cmp	r3, #0
900056d8:	d00a      	beq.n	900056f0 <xQueueSemaphoreTake+0x50>
	__asm volatile
900056da:	f04f 0350 	mov.w	r3, #80	; 0x50
900056de:	f383 8811 	msr	BASEPRI, r3
900056e2:	f3bf 8f6f 	isb	sy
900056e6:	f3bf 8f4f 	dsb	sy
900056ea:	61fb      	str	r3, [r7, #28]
}
900056ec:	bf00      	nop
900056ee:	e7fe      	b.n	900056ee <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
900056f0:	f001 f89c 	bl	9000682c <xTaskGetSchedulerState>
900056f4:	4603      	mov	r3, r0
900056f6:	2b00      	cmp	r3, #0
900056f8:	d102      	bne.n	90005700 <xQueueSemaphoreTake+0x60>
900056fa:	683b      	ldr	r3, [r7, #0]
900056fc:	2b00      	cmp	r3, #0
900056fe:	d101      	bne.n	90005704 <xQueueSemaphoreTake+0x64>
90005700:	2301      	movs	r3, #1
90005702:	e000      	b.n	90005706 <xQueueSemaphoreTake+0x66>
90005704:	2300      	movs	r3, #0
90005706:	2b00      	cmp	r3, #0
90005708:	d10a      	bne.n	90005720 <xQueueSemaphoreTake+0x80>
	__asm volatile
9000570a:	f04f 0350 	mov.w	r3, #80	; 0x50
9000570e:	f383 8811 	msr	BASEPRI, r3
90005712:	f3bf 8f6f 	isb	sy
90005716:	f3bf 8f4f 	dsb	sy
9000571a:	61bb      	str	r3, [r7, #24]
}
9000571c:	bf00      	nop
9000571e:	e7fe      	b.n	9000571e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
90005720:	f001 fbd0 	bl	90006ec4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
90005724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90005726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90005728:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
9000572a:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000572c:	2b00      	cmp	r3, #0
9000572e:	d024      	beq.n	9000577a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
90005730:	6abb      	ldr	r3, [r7, #40]	; 0x28
90005732:	1e5a      	subs	r2, r3, #1
90005734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90005736:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
90005738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000573a:	681b      	ldr	r3, [r3, #0]
9000573c:	2b00      	cmp	r3, #0
9000573e:	d104      	bne.n	9000574a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
90005740:	f001 fa1c 	bl	90006b7c <pvTaskIncrementMutexHeldCount>
90005744:	4602      	mov	r2, r0
90005746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90005748:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000574a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000574c:	691b      	ldr	r3, [r3, #16]
9000574e:	2b00      	cmp	r3, #0
90005750:	d00f      	beq.n	90005772 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
90005752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90005754:	3310      	adds	r3, #16
90005756:	4618      	mov	r0, r3
90005758:	f000 fea8 	bl	900064ac <xTaskRemoveFromEventList>
9000575c:	4603      	mov	r3, r0
9000575e:	2b00      	cmp	r3, #0
90005760:	d007      	beq.n	90005772 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
90005762:	4b54      	ldr	r3, [pc, #336]	; (900058b4 <xQueueSemaphoreTake+0x214>)
90005764:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
90005768:	601a      	str	r2, [r3, #0]
9000576a:	f3bf 8f4f 	dsb	sy
9000576e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
90005772:	f001 fbd7 	bl	90006f24 <vPortExitCritical>
				return pdPASS;
90005776:	2301      	movs	r3, #1
90005778:	e097      	b.n	900058aa <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
9000577a:	683b      	ldr	r3, [r7, #0]
9000577c:	2b00      	cmp	r3, #0
9000577e:	d111      	bne.n	900057a4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
90005780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90005782:	2b00      	cmp	r3, #0
90005784:	d00a      	beq.n	9000579c <xQueueSemaphoreTake+0xfc>
	__asm volatile
90005786:	f04f 0350 	mov.w	r3, #80	; 0x50
9000578a:	f383 8811 	msr	BASEPRI, r3
9000578e:	f3bf 8f6f 	isb	sy
90005792:	f3bf 8f4f 	dsb	sy
90005796:	617b      	str	r3, [r7, #20]
}
90005798:	bf00      	nop
9000579a:	e7fe      	b.n	9000579a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
9000579c:	f001 fbc2 	bl	90006f24 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
900057a0:	2300      	movs	r3, #0
900057a2:	e082      	b.n	900058aa <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
900057a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
900057a6:	2b00      	cmp	r3, #0
900057a8:	d106      	bne.n	900057b8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
900057aa:	f107 030c 	add.w	r3, r7, #12
900057ae:	4618      	mov	r0, r3
900057b0:	f000 fede 	bl	90006570 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
900057b4:	2301      	movs	r3, #1
900057b6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
900057b8:	f001 fbb4 	bl	90006f24 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
900057bc:	f000 fc6c 	bl	90006098 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
900057c0:	f001 fb80 	bl	90006ec4 <vPortEnterCritical>
900057c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
900057c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
900057ca:	b25b      	sxtb	r3, r3
900057cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
900057d0:	d103      	bne.n	900057da <xQueueSemaphoreTake+0x13a>
900057d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
900057d4:	2200      	movs	r2, #0
900057d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
900057da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
900057dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
900057e0:	b25b      	sxtb	r3, r3
900057e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
900057e6:	d103      	bne.n	900057f0 <xQueueSemaphoreTake+0x150>
900057e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
900057ea:	2200      	movs	r2, #0
900057ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
900057f0:	f001 fb98 	bl	90006f24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
900057f4:	463a      	mov	r2, r7
900057f6:	f107 030c 	add.w	r3, r7, #12
900057fa:	4611      	mov	r1, r2
900057fc:	4618      	mov	r0, r3
900057fe:	f000 fecd 	bl	9000659c <xTaskCheckForTimeOut>
90005802:	4603      	mov	r3, r0
90005804:	2b00      	cmp	r3, #0
90005806:	d132      	bne.n	9000586e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
90005808:	6af8      	ldr	r0, [r7, #44]	; 0x2c
9000580a:	f000 f9cf 	bl	90005bac <prvIsQueueEmpty>
9000580e:	4603      	mov	r3, r0
90005810:	2b00      	cmp	r3, #0
90005812:	d026      	beq.n	90005862 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
90005814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90005816:	681b      	ldr	r3, [r3, #0]
90005818:	2b00      	cmp	r3, #0
9000581a:	d109      	bne.n	90005830 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
9000581c:	f001 fb52 	bl	90006ec4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
90005820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90005822:	689b      	ldr	r3, [r3, #8]
90005824:	4618      	mov	r0, r3
90005826:	f001 f81f 	bl	90006868 <xTaskPriorityInherit>
9000582a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
9000582c:	f001 fb7a 	bl	90006f24 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
90005830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90005832:	3324      	adds	r3, #36	; 0x24
90005834:	683a      	ldr	r2, [r7, #0]
90005836:	4611      	mov	r1, r2
90005838:	4618      	mov	r0, r3
9000583a:	f000 fe13 	bl	90006464 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
9000583e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
90005840:	f000 f962 	bl	90005b08 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
90005844:	f000 fc36 	bl	900060b4 <xTaskResumeAll>
90005848:	4603      	mov	r3, r0
9000584a:	2b00      	cmp	r3, #0
9000584c:	f47f af68 	bne.w	90005720 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
90005850:	4b18      	ldr	r3, [pc, #96]	; (900058b4 <xQueueSemaphoreTake+0x214>)
90005852:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
90005856:	601a      	str	r2, [r3, #0]
90005858:	f3bf 8f4f 	dsb	sy
9000585c:	f3bf 8f6f 	isb	sy
90005860:	e75e      	b.n	90005720 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
90005862:	6af8      	ldr	r0, [r7, #44]	; 0x2c
90005864:	f000 f950 	bl	90005b08 <prvUnlockQueue>
				( void ) xTaskResumeAll();
90005868:	f000 fc24 	bl	900060b4 <xTaskResumeAll>
9000586c:	e758      	b.n	90005720 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
9000586e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
90005870:	f000 f94a 	bl	90005b08 <prvUnlockQueue>
			( void ) xTaskResumeAll();
90005874:	f000 fc1e 	bl	900060b4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
90005878:	6af8      	ldr	r0, [r7, #44]	; 0x2c
9000587a:	f000 f997 	bl	90005bac <prvIsQueueEmpty>
9000587e:	4603      	mov	r3, r0
90005880:	2b00      	cmp	r3, #0
90005882:	f43f af4d 	beq.w	90005720 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
90005886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90005888:	2b00      	cmp	r3, #0
9000588a:	d00d      	beq.n	900058a8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
9000588c:	f001 fb1a 	bl	90006ec4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
90005890:	6af8      	ldr	r0, [r7, #44]	; 0x2c
90005892:	f000 f891 	bl	900059b8 <prvGetDisinheritPriorityAfterTimeout>
90005896:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
90005898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000589a:	689b      	ldr	r3, [r3, #8]
9000589c:	6a79      	ldr	r1, [r7, #36]	; 0x24
9000589e:	4618      	mov	r0, r3
900058a0:	f001 f8de 	bl	90006a60 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
900058a4:	f001 fb3e 	bl	90006f24 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
900058a8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
900058aa:	4618      	mov	r0, r3
900058ac:	3738      	adds	r7, #56	; 0x38
900058ae:	46bd      	mov	sp, r7
900058b0:	bd80      	pop	{r7, pc}
900058b2:	bf00      	nop
900058b4:	e000ed04 	.word	0xe000ed04

900058b8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
900058b8:	b580      	push	{r7, lr}
900058ba:	b08e      	sub	sp, #56	; 0x38
900058bc:	af00      	add	r7, sp, #0
900058be:	60f8      	str	r0, [r7, #12]
900058c0:	60b9      	str	r1, [r7, #8]
900058c2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
900058c4:	68fb      	ldr	r3, [r7, #12]
900058c6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
900058c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
900058ca:	2b00      	cmp	r3, #0
900058cc:	d10a      	bne.n	900058e4 <xQueueReceiveFromISR+0x2c>
	__asm volatile
900058ce:	f04f 0350 	mov.w	r3, #80	; 0x50
900058d2:	f383 8811 	msr	BASEPRI, r3
900058d6:	f3bf 8f6f 	isb	sy
900058da:	f3bf 8f4f 	dsb	sy
900058de:	623b      	str	r3, [r7, #32]
}
900058e0:	bf00      	nop
900058e2:	e7fe      	b.n	900058e2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
900058e4:	68bb      	ldr	r3, [r7, #8]
900058e6:	2b00      	cmp	r3, #0
900058e8:	d103      	bne.n	900058f2 <xQueueReceiveFromISR+0x3a>
900058ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
900058ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
900058ee:	2b00      	cmp	r3, #0
900058f0:	d101      	bne.n	900058f6 <xQueueReceiveFromISR+0x3e>
900058f2:	2301      	movs	r3, #1
900058f4:	e000      	b.n	900058f8 <xQueueReceiveFromISR+0x40>
900058f6:	2300      	movs	r3, #0
900058f8:	2b00      	cmp	r3, #0
900058fa:	d10a      	bne.n	90005912 <xQueueReceiveFromISR+0x5a>
	__asm volatile
900058fc:	f04f 0350 	mov.w	r3, #80	; 0x50
90005900:	f383 8811 	msr	BASEPRI, r3
90005904:	f3bf 8f6f 	isb	sy
90005908:	f3bf 8f4f 	dsb	sy
9000590c:	61fb      	str	r3, [r7, #28]
}
9000590e:	bf00      	nop
90005910:	e7fe      	b.n	90005910 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
90005912:	f001 fbb9 	bl	90007088 <vPortValidateInterruptPriority>
	__asm volatile
90005916:	f3ef 8211 	mrs	r2, BASEPRI
9000591a:	f04f 0350 	mov.w	r3, #80	; 0x50
9000591e:	f383 8811 	msr	BASEPRI, r3
90005922:	f3bf 8f6f 	isb	sy
90005926:	f3bf 8f4f 	dsb	sy
9000592a:	61ba      	str	r2, [r7, #24]
9000592c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
9000592e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
90005930:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
90005932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90005934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90005936:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
90005938:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000593a:	2b00      	cmp	r3, #0
9000593c:	d02f      	beq.n	9000599e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
9000593e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90005940:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
90005944:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
90005948:	68b9      	ldr	r1, [r7, #8]
9000594a:	6b38      	ldr	r0, [r7, #48]	; 0x30
9000594c:	f000 f8b6 	bl	90005abc <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
90005950:	6abb      	ldr	r3, [r7, #40]	; 0x28
90005952:	1e5a      	subs	r2, r3, #1
90005954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90005956:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
90005958:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
9000595c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
90005960:	d112      	bne.n	90005988 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
90005962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90005964:	691b      	ldr	r3, [r3, #16]
90005966:	2b00      	cmp	r3, #0
90005968:	d016      	beq.n	90005998 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000596a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9000596c:	3310      	adds	r3, #16
9000596e:	4618      	mov	r0, r3
90005970:	f000 fd9c 	bl	900064ac <xTaskRemoveFromEventList>
90005974:	4603      	mov	r3, r0
90005976:	2b00      	cmp	r3, #0
90005978:	d00e      	beq.n	90005998 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
9000597a:	687b      	ldr	r3, [r7, #4]
9000597c:	2b00      	cmp	r3, #0
9000597e:	d00b      	beq.n	90005998 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
90005980:	687b      	ldr	r3, [r7, #4]
90005982:	2201      	movs	r2, #1
90005984:	601a      	str	r2, [r3, #0]
90005986:	e007      	b.n	90005998 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
90005988:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
9000598c:	3301      	adds	r3, #1
9000598e:	b2db      	uxtb	r3, r3
90005990:	b25a      	sxtb	r2, r3
90005992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90005994:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
90005998:	2301      	movs	r3, #1
9000599a:	637b      	str	r3, [r7, #52]	; 0x34
9000599c:	e001      	b.n	900059a2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
9000599e:	2300      	movs	r3, #0
900059a0:	637b      	str	r3, [r7, #52]	; 0x34
900059a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
900059a4:	613b      	str	r3, [r7, #16]
	__asm volatile
900059a6:	693b      	ldr	r3, [r7, #16]
900059a8:	f383 8811 	msr	BASEPRI, r3
}
900059ac:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
900059ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
900059b0:	4618      	mov	r0, r3
900059b2:	3738      	adds	r7, #56	; 0x38
900059b4:	46bd      	mov	sp, r7
900059b6:	bd80      	pop	{r7, pc}

900059b8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
900059b8:	b480      	push	{r7}
900059ba:	b085      	sub	sp, #20
900059bc:	af00      	add	r7, sp, #0
900059be:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
900059c0:	687b      	ldr	r3, [r7, #4]
900059c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
900059c4:	2b00      	cmp	r3, #0
900059c6:	d006      	beq.n	900059d6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
900059c8:	687b      	ldr	r3, [r7, #4]
900059ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900059cc:	681b      	ldr	r3, [r3, #0]
900059ce:	f1c3 0307 	rsb	r3, r3, #7
900059d2:	60fb      	str	r3, [r7, #12]
900059d4:	e001      	b.n	900059da <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
900059d6:	2300      	movs	r3, #0
900059d8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
900059da:	68fb      	ldr	r3, [r7, #12]
	}
900059dc:	4618      	mov	r0, r3
900059de:	3714      	adds	r7, #20
900059e0:	46bd      	mov	sp, r7
900059e2:	f85d 7b04 	ldr.w	r7, [sp], #4
900059e6:	4770      	bx	lr

900059e8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
900059e8:	b580      	push	{r7, lr}
900059ea:	b086      	sub	sp, #24
900059ec:	af00      	add	r7, sp, #0
900059ee:	60f8      	str	r0, [r7, #12]
900059f0:	60b9      	str	r1, [r7, #8]
900059f2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
900059f4:	2300      	movs	r3, #0
900059f6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
900059f8:	68fb      	ldr	r3, [r7, #12]
900059fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
900059fc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
900059fe:	68fb      	ldr	r3, [r7, #12]
90005a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90005a02:	2b00      	cmp	r3, #0
90005a04:	d10d      	bne.n	90005a22 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
90005a06:	68fb      	ldr	r3, [r7, #12]
90005a08:	681b      	ldr	r3, [r3, #0]
90005a0a:	2b00      	cmp	r3, #0
90005a0c:	d14d      	bne.n	90005aaa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
90005a0e:	68fb      	ldr	r3, [r7, #12]
90005a10:	689b      	ldr	r3, [r3, #8]
90005a12:	4618      	mov	r0, r3
90005a14:	f000 ff9e 	bl	90006954 <xTaskPriorityDisinherit>
90005a18:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
90005a1a:	68fb      	ldr	r3, [r7, #12]
90005a1c:	2200      	movs	r2, #0
90005a1e:	609a      	str	r2, [r3, #8]
90005a20:	e043      	b.n	90005aaa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
90005a22:	687b      	ldr	r3, [r7, #4]
90005a24:	2b00      	cmp	r3, #0
90005a26:	d119      	bne.n	90005a5c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
90005a28:	68fb      	ldr	r3, [r7, #12]
90005a2a:	6858      	ldr	r0, [r3, #4]
90005a2c:	68fb      	ldr	r3, [r7, #12]
90005a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90005a30:	461a      	mov	r2, r3
90005a32:	68b9      	ldr	r1, [r7, #8]
90005a34:	f00d fd55 	bl	900134e2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
90005a38:	68fb      	ldr	r3, [r7, #12]
90005a3a:	685a      	ldr	r2, [r3, #4]
90005a3c:	68fb      	ldr	r3, [r7, #12]
90005a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90005a40:	441a      	add	r2, r3
90005a42:	68fb      	ldr	r3, [r7, #12]
90005a44:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
90005a46:	68fb      	ldr	r3, [r7, #12]
90005a48:	685a      	ldr	r2, [r3, #4]
90005a4a:	68fb      	ldr	r3, [r7, #12]
90005a4c:	689b      	ldr	r3, [r3, #8]
90005a4e:	429a      	cmp	r2, r3
90005a50:	d32b      	bcc.n	90005aaa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
90005a52:	68fb      	ldr	r3, [r7, #12]
90005a54:	681a      	ldr	r2, [r3, #0]
90005a56:	68fb      	ldr	r3, [r7, #12]
90005a58:	605a      	str	r2, [r3, #4]
90005a5a:	e026      	b.n	90005aaa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
90005a5c:	68fb      	ldr	r3, [r7, #12]
90005a5e:	68d8      	ldr	r0, [r3, #12]
90005a60:	68fb      	ldr	r3, [r7, #12]
90005a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90005a64:	461a      	mov	r2, r3
90005a66:	68b9      	ldr	r1, [r7, #8]
90005a68:	f00d fd3b 	bl	900134e2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
90005a6c:	68fb      	ldr	r3, [r7, #12]
90005a6e:	68da      	ldr	r2, [r3, #12]
90005a70:	68fb      	ldr	r3, [r7, #12]
90005a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90005a74:	425b      	negs	r3, r3
90005a76:	441a      	add	r2, r3
90005a78:	68fb      	ldr	r3, [r7, #12]
90005a7a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
90005a7c:	68fb      	ldr	r3, [r7, #12]
90005a7e:	68da      	ldr	r2, [r3, #12]
90005a80:	68fb      	ldr	r3, [r7, #12]
90005a82:	681b      	ldr	r3, [r3, #0]
90005a84:	429a      	cmp	r2, r3
90005a86:	d207      	bcs.n	90005a98 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
90005a88:	68fb      	ldr	r3, [r7, #12]
90005a8a:	689a      	ldr	r2, [r3, #8]
90005a8c:	68fb      	ldr	r3, [r7, #12]
90005a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90005a90:	425b      	negs	r3, r3
90005a92:	441a      	add	r2, r3
90005a94:	68fb      	ldr	r3, [r7, #12]
90005a96:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
90005a98:	687b      	ldr	r3, [r7, #4]
90005a9a:	2b02      	cmp	r3, #2
90005a9c:	d105      	bne.n	90005aaa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
90005a9e:	693b      	ldr	r3, [r7, #16]
90005aa0:	2b00      	cmp	r3, #0
90005aa2:	d002      	beq.n	90005aaa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
90005aa4:	693b      	ldr	r3, [r7, #16]
90005aa6:	3b01      	subs	r3, #1
90005aa8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
90005aaa:	693b      	ldr	r3, [r7, #16]
90005aac:	1c5a      	adds	r2, r3, #1
90005aae:	68fb      	ldr	r3, [r7, #12]
90005ab0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
90005ab2:	697b      	ldr	r3, [r7, #20]
}
90005ab4:	4618      	mov	r0, r3
90005ab6:	3718      	adds	r7, #24
90005ab8:	46bd      	mov	sp, r7
90005aba:	bd80      	pop	{r7, pc}

90005abc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
90005abc:	b580      	push	{r7, lr}
90005abe:	b082      	sub	sp, #8
90005ac0:	af00      	add	r7, sp, #0
90005ac2:	6078      	str	r0, [r7, #4]
90005ac4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
90005ac6:	687b      	ldr	r3, [r7, #4]
90005ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90005aca:	2b00      	cmp	r3, #0
90005acc:	d018      	beq.n	90005b00 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
90005ace:	687b      	ldr	r3, [r7, #4]
90005ad0:	68da      	ldr	r2, [r3, #12]
90005ad2:	687b      	ldr	r3, [r7, #4]
90005ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90005ad6:	441a      	add	r2, r3
90005ad8:	687b      	ldr	r3, [r7, #4]
90005ada:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
90005adc:	687b      	ldr	r3, [r7, #4]
90005ade:	68da      	ldr	r2, [r3, #12]
90005ae0:	687b      	ldr	r3, [r7, #4]
90005ae2:	689b      	ldr	r3, [r3, #8]
90005ae4:	429a      	cmp	r2, r3
90005ae6:	d303      	bcc.n	90005af0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
90005ae8:	687b      	ldr	r3, [r7, #4]
90005aea:	681a      	ldr	r2, [r3, #0]
90005aec:	687b      	ldr	r3, [r7, #4]
90005aee:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
90005af0:	687b      	ldr	r3, [r7, #4]
90005af2:	68d9      	ldr	r1, [r3, #12]
90005af4:	687b      	ldr	r3, [r7, #4]
90005af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90005af8:	461a      	mov	r2, r3
90005afa:	6838      	ldr	r0, [r7, #0]
90005afc:	f00d fcf1 	bl	900134e2 <memcpy>
	}
}
90005b00:	bf00      	nop
90005b02:	3708      	adds	r7, #8
90005b04:	46bd      	mov	sp, r7
90005b06:	bd80      	pop	{r7, pc}

90005b08 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
90005b08:	b580      	push	{r7, lr}
90005b0a:	b084      	sub	sp, #16
90005b0c:	af00      	add	r7, sp, #0
90005b0e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
90005b10:	f001 f9d8 	bl	90006ec4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
90005b14:	687b      	ldr	r3, [r7, #4]
90005b16:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
90005b1a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
90005b1c:	e011      	b.n	90005b42 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
90005b1e:	687b      	ldr	r3, [r7, #4]
90005b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90005b22:	2b00      	cmp	r3, #0
90005b24:	d012      	beq.n	90005b4c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
90005b26:	687b      	ldr	r3, [r7, #4]
90005b28:	3324      	adds	r3, #36	; 0x24
90005b2a:	4618      	mov	r0, r3
90005b2c:	f000 fcbe 	bl	900064ac <xTaskRemoveFromEventList>
90005b30:	4603      	mov	r3, r0
90005b32:	2b00      	cmp	r3, #0
90005b34:	d001      	beq.n	90005b3a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
90005b36:	f000 fd93 	bl	90006660 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
90005b3a:	7bfb      	ldrb	r3, [r7, #15]
90005b3c:	3b01      	subs	r3, #1
90005b3e:	b2db      	uxtb	r3, r3
90005b40:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
90005b42:	f997 300f 	ldrsb.w	r3, [r7, #15]
90005b46:	2b00      	cmp	r3, #0
90005b48:	dce9      	bgt.n	90005b1e <prvUnlockQueue+0x16>
90005b4a:	e000      	b.n	90005b4e <prvUnlockQueue+0x46>
					break;
90005b4c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
90005b4e:	687b      	ldr	r3, [r7, #4]
90005b50:	22ff      	movs	r2, #255	; 0xff
90005b52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
90005b56:	f001 f9e5 	bl	90006f24 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
90005b5a:	f001 f9b3 	bl	90006ec4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
90005b5e:	687b      	ldr	r3, [r7, #4]
90005b60:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
90005b64:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
90005b66:	e011      	b.n	90005b8c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
90005b68:	687b      	ldr	r3, [r7, #4]
90005b6a:	691b      	ldr	r3, [r3, #16]
90005b6c:	2b00      	cmp	r3, #0
90005b6e:	d012      	beq.n	90005b96 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
90005b70:	687b      	ldr	r3, [r7, #4]
90005b72:	3310      	adds	r3, #16
90005b74:	4618      	mov	r0, r3
90005b76:	f000 fc99 	bl	900064ac <xTaskRemoveFromEventList>
90005b7a:	4603      	mov	r3, r0
90005b7c:	2b00      	cmp	r3, #0
90005b7e:	d001      	beq.n	90005b84 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
90005b80:	f000 fd6e 	bl	90006660 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
90005b84:	7bbb      	ldrb	r3, [r7, #14]
90005b86:	3b01      	subs	r3, #1
90005b88:	b2db      	uxtb	r3, r3
90005b8a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
90005b8c:	f997 300e 	ldrsb.w	r3, [r7, #14]
90005b90:	2b00      	cmp	r3, #0
90005b92:	dce9      	bgt.n	90005b68 <prvUnlockQueue+0x60>
90005b94:	e000      	b.n	90005b98 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
90005b96:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
90005b98:	687b      	ldr	r3, [r7, #4]
90005b9a:	22ff      	movs	r2, #255	; 0xff
90005b9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
90005ba0:	f001 f9c0 	bl	90006f24 <vPortExitCritical>
}
90005ba4:	bf00      	nop
90005ba6:	3710      	adds	r7, #16
90005ba8:	46bd      	mov	sp, r7
90005baa:	bd80      	pop	{r7, pc}

90005bac <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
90005bac:	b580      	push	{r7, lr}
90005bae:	b084      	sub	sp, #16
90005bb0:	af00      	add	r7, sp, #0
90005bb2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
90005bb4:	f001 f986 	bl	90006ec4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
90005bb8:	687b      	ldr	r3, [r7, #4]
90005bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90005bbc:	2b00      	cmp	r3, #0
90005bbe:	d102      	bne.n	90005bc6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
90005bc0:	2301      	movs	r3, #1
90005bc2:	60fb      	str	r3, [r7, #12]
90005bc4:	e001      	b.n	90005bca <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
90005bc6:	2300      	movs	r3, #0
90005bc8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
90005bca:	f001 f9ab 	bl	90006f24 <vPortExitCritical>

	return xReturn;
90005bce:	68fb      	ldr	r3, [r7, #12]
}
90005bd0:	4618      	mov	r0, r3
90005bd2:	3710      	adds	r7, #16
90005bd4:	46bd      	mov	sp, r7
90005bd6:	bd80      	pop	{r7, pc}

90005bd8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
90005bd8:	b580      	push	{r7, lr}
90005bda:	b084      	sub	sp, #16
90005bdc:	af00      	add	r7, sp, #0
90005bde:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
90005be0:	f001 f970 	bl	90006ec4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
90005be4:	687b      	ldr	r3, [r7, #4]
90005be6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
90005be8:	687b      	ldr	r3, [r7, #4]
90005bea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90005bec:	429a      	cmp	r2, r3
90005bee:	d102      	bne.n	90005bf6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
90005bf0:	2301      	movs	r3, #1
90005bf2:	60fb      	str	r3, [r7, #12]
90005bf4:	e001      	b.n	90005bfa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
90005bf6:	2300      	movs	r3, #0
90005bf8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
90005bfa:	f001 f993 	bl	90006f24 <vPortExitCritical>

	return xReturn;
90005bfe:	68fb      	ldr	r3, [r7, #12]
}
90005c00:	4618      	mov	r0, r3
90005c02:	3710      	adds	r7, #16
90005c04:	46bd      	mov	sp, r7
90005c06:	bd80      	pop	{r7, pc}

90005c08 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
90005c08:	b580      	push	{r7, lr}
90005c0a:	b08e      	sub	sp, #56	; 0x38
90005c0c:	af04      	add	r7, sp, #16
90005c0e:	60f8      	str	r0, [r7, #12]
90005c10:	60b9      	str	r1, [r7, #8]
90005c12:	607a      	str	r2, [r7, #4]
90005c14:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
90005c16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
90005c18:	2b00      	cmp	r3, #0
90005c1a:	d10a      	bne.n	90005c32 <xTaskCreateStatic+0x2a>
	__asm volatile
90005c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
90005c20:	f383 8811 	msr	BASEPRI, r3
90005c24:	f3bf 8f6f 	isb	sy
90005c28:	f3bf 8f4f 	dsb	sy
90005c2c:	623b      	str	r3, [r7, #32]
}
90005c2e:	bf00      	nop
90005c30:	e7fe      	b.n	90005c30 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
90005c32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
90005c34:	2b00      	cmp	r3, #0
90005c36:	d10a      	bne.n	90005c4e <xTaskCreateStatic+0x46>
	__asm volatile
90005c38:	f04f 0350 	mov.w	r3, #80	; 0x50
90005c3c:	f383 8811 	msr	BASEPRI, r3
90005c40:	f3bf 8f6f 	isb	sy
90005c44:	f3bf 8f4f 	dsb	sy
90005c48:	61fb      	str	r3, [r7, #28]
}
90005c4a:	bf00      	nop
90005c4c:	e7fe      	b.n	90005c4c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
90005c4e:	23b4      	movs	r3, #180	; 0xb4
90005c50:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
90005c52:	693b      	ldr	r3, [r7, #16]
90005c54:	2bb4      	cmp	r3, #180	; 0xb4
90005c56:	d00a      	beq.n	90005c6e <xTaskCreateStatic+0x66>
	__asm volatile
90005c58:	f04f 0350 	mov.w	r3, #80	; 0x50
90005c5c:	f383 8811 	msr	BASEPRI, r3
90005c60:	f3bf 8f6f 	isb	sy
90005c64:	f3bf 8f4f 	dsb	sy
90005c68:	61bb      	str	r3, [r7, #24]
}
90005c6a:	bf00      	nop
90005c6c:	e7fe      	b.n	90005c6c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
90005c6e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
90005c70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
90005c72:	2b00      	cmp	r3, #0
90005c74:	d01e      	beq.n	90005cb4 <xTaskCreateStatic+0xac>
90005c76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
90005c78:	2b00      	cmp	r3, #0
90005c7a:	d01b      	beq.n	90005cb4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
90005c7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
90005c7e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
90005c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90005c82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
90005c84:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
90005c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90005c88:	2202      	movs	r2, #2
90005c8a:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
90005c8e:	2300      	movs	r3, #0
90005c90:	9303      	str	r3, [sp, #12]
90005c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90005c94:	9302      	str	r3, [sp, #8]
90005c96:	f107 0314 	add.w	r3, r7, #20
90005c9a:	9301      	str	r3, [sp, #4]
90005c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90005c9e:	9300      	str	r3, [sp, #0]
90005ca0:	683b      	ldr	r3, [r7, #0]
90005ca2:	687a      	ldr	r2, [r7, #4]
90005ca4:	68b9      	ldr	r1, [r7, #8]
90005ca6:	68f8      	ldr	r0, [r7, #12]
90005ca8:	f000 f850 	bl	90005d4c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
90005cac:	6a78      	ldr	r0, [r7, #36]	; 0x24
90005cae:	f000 f8eb 	bl	90005e88 <prvAddNewTaskToReadyList>
90005cb2:	e001      	b.n	90005cb8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
90005cb4:	2300      	movs	r3, #0
90005cb6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
90005cb8:	697b      	ldr	r3, [r7, #20]
	}
90005cba:	4618      	mov	r0, r3
90005cbc:	3728      	adds	r7, #40	; 0x28
90005cbe:	46bd      	mov	sp, r7
90005cc0:	bd80      	pop	{r7, pc}

90005cc2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
90005cc2:	b580      	push	{r7, lr}
90005cc4:	b08c      	sub	sp, #48	; 0x30
90005cc6:	af04      	add	r7, sp, #16
90005cc8:	60f8      	str	r0, [r7, #12]
90005cca:	60b9      	str	r1, [r7, #8]
90005ccc:	603b      	str	r3, [r7, #0]
90005cce:	4613      	mov	r3, r2
90005cd0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
90005cd2:	88fb      	ldrh	r3, [r7, #6]
90005cd4:	009b      	lsls	r3, r3, #2
90005cd6:	4618      	mov	r0, r3
90005cd8:	f001 fa16 	bl	90007108 <pvPortMalloc>
90005cdc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
90005cde:	697b      	ldr	r3, [r7, #20]
90005ce0:	2b00      	cmp	r3, #0
90005ce2:	d00e      	beq.n	90005d02 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
90005ce4:	20b4      	movs	r0, #180	; 0xb4
90005ce6:	f001 fa0f 	bl	90007108 <pvPortMalloc>
90005cea:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
90005cec:	69fb      	ldr	r3, [r7, #28]
90005cee:	2b00      	cmp	r3, #0
90005cf0:	d003      	beq.n	90005cfa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
90005cf2:	69fb      	ldr	r3, [r7, #28]
90005cf4:	697a      	ldr	r2, [r7, #20]
90005cf6:	631a      	str	r2, [r3, #48]	; 0x30
90005cf8:	e005      	b.n	90005d06 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
90005cfa:	6978      	ldr	r0, [r7, #20]
90005cfc:	f001 fad0 	bl	900072a0 <vPortFree>
90005d00:	e001      	b.n	90005d06 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
90005d02:	2300      	movs	r3, #0
90005d04:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
90005d06:	69fb      	ldr	r3, [r7, #28]
90005d08:	2b00      	cmp	r3, #0
90005d0a:	d017      	beq.n	90005d3c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
90005d0c:	69fb      	ldr	r3, [r7, #28]
90005d0e:	2200      	movs	r2, #0
90005d10:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
90005d14:	88fa      	ldrh	r2, [r7, #6]
90005d16:	2300      	movs	r3, #0
90005d18:	9303      	str	r3, [sp, #12]
90005d1a:	69fb      	ldr	r3, [r7, #28]
90005d1c:	9302      	str	r3, [sp, #8]
90005d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90005d20:	9301      	str	r3, [sp, #4]
90005d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
90005d24:	9300      	str	r3, [sp, #0]
90005d26:	683b      	ldr	r3, [r7, #0]
90005d28:	68b9      	ldr	r1, [r7, #8]
90005d2a:	68f8      	ldr	r0, [r7, #12]
90005d2c:	f000 f80e 	bl	90005d4c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
90005d30:	69f8      	ldr	r0, [r7, #28]
90005d32:	f000 f8a9 	bl	90005e88 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
90005d36:	2301      	movs	r3, #1
90005d38:	61bb      	str	r3, [r7, #24]
90005d3a:	e002      	b.n	90005d42 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
90005d3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
90005d40:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
90005d42:	69bb      	ldr	r3, [r7, #24]
	}
90005d44:	4618      	mov	r0, r3
90005d46:	3720      	adds	r7, #32
90005d48:	46bd      	mov	sp, r7
90005d4a:	bd80      	pop	{r7, pc}

90005d4c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
90005d4c:	b580      	push	{r7, lr}
90005d4e:	b088      	sub	sp, #32
90005d50:	af00      	add	r7, sp, #0
90005d52:	60f8      	str	r0, [r7, #12]
90005d54:	60b9      	str	r1, [r7, #8]
90005d56:	607a      	str	r2, [r7, #4]
90005d58:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
90005d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90005d5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90005d5e:	6879      	ldr	r1, [r7, #4]
90005d60:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
90005d64:	440b      	add	r3, r1
90005d66:	009b      	lsls	r3, r3, #2
90005d68:	4413      	add	r3, r2
90005d6a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
90005d6c:	69bb      	ldr	r3, [r7, #24]
90005d6e:	f023 0307 	bic.w	r3, r3, #7
90005d72:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
90005d74:	69bb      	ldr	r3, [r7, #24]
90005d76:	f003 0307 	and.w	r3, r3, #7
90005d7a:	2b00      	cmp	r3, #0
90005d7c:	d00a      	beq.n	90005d94 <prvInitialiseNewTask+0x48>
	__asm volatile
90005d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
90005d82:	f383 8811 	msr	BASEPRI, r3
90005d86:	f3bf 8f6f 	isb	sy
90005d8a:	f3bf 8f4f 	dsb	sy
90005d8e:	617b      	str	r3, [r7, #20]
}
90005d90:	bf00      	nop
90005d92:	e7fe      	b.n	90005d92 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
90005d94:	68bb      	ldr	r3, [r7, #8]
90005d96:	2b00      	cmp	r3, #0
90005d98:	d01f      	beq.n	90005dda <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
90005d9a:	2300      	movs	r3, #0
90005d9c:	61fb      	str	r3, [r7, #28]
90005d9e:	e012      	b.n	90005dc6 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
90005da0:	68ba      	ldr	r2, [r7, #8]
90005da2:	69fb      	ldr	r3, [r7, #28]
90005da4:	4413      	add	r3, r2
90005da6:	7819      	ldrb	r1, [r3, #0]
90005da8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
90005daa:	69fb      	ldr	r3, [r7, #28]
90005dac:	4413      	add	r3, r2
90005dae:	3334      	adds	r3, #52	; 0x34
90005db0:	460a      	mov	r2, r1
90005db2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
90005db4:	68ba      	ldr	r2, [r7, #8]
90005db6:	69fb      	ldr	r3, [r7, #28]
90005db8:	4413      	add	r3, r2
90005dba:	781b      	ldrb	r3, [r3, #0]
90005dbc:	2b00      	cmp	r3, #0
90005dbe:	d006      	beq.n	90005dce <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
90005dc0:	69fb      	ldr	r3, [r7, #28]
90005dc2:	3301      	adds	r3, #1
90005dc4:	61fb      	str	r3, [r7, #28]
90005dc6:	69fb      	ldr	r3, [r7, #28]
90005dc8:	2b0f      	cmp	r3, #15
90005dca:	d9e9      	bls.n	90005da0 <prvInitialiseNewTask+0x54>
90005dcc:	e000      	b.n	90005dd0 <prvInitialiseNewTask+0x84>
			{
				break;
90005dce:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
90005dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90005dd2:	2200      	movs	r2, #0
90005dd4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
90005dd8:	e003      	b.n	90005de2 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
90005dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90005ddc:	2200      	movs	r2, #0
90005dde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
90005de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
90005de4:	2b06      	cmp	r3, #6
90005de6:	d901      	bls.n	90005dec <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
90005de8:	2306      	movs	r3, #6
90005dea:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
90005dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90005dee:	6aba      	ldr	r2, [r7, #40]	; 0x28
90005df0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
90005df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90005df4:	6aba      	ldr	r2, [r7, #40]	; 0x28
90005df6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
90005df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90005dfa:	2200      	movs	r2, #0
90005dfc:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
90005dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90005e00:	3304      	adds	r3, #4
90005e02:	4618      	mov	r0, r3
90005e04:	f7fe ff2c 	bl	90004c60 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
90005e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90005e0a:	3318      	adds	r3, #24
90005e0c:	4618      	mov	r0, r3
90005e0e:	f7fe ff27 	bl	90004c60 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
90005e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90005e14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
90005e16:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
90005e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
90005e1a:	f1c3 0207 	rsb	r2, r3, #7
90005e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90005e20:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
90005e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90005e24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
90005e26:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
90005e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90005e2a:	2200      	movs	r2, #0
90005e2c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
90005e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90005e32:	2200      	movs	r2, #0
90005e34:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
90005e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90005e3a:	334c      	adds	r3, #76	; 0x4c
90005e3c:	2260      	movs	r2, #96	; 0x60
90005e3e:	2100      	movs	r1, #0
90005e40:	4618      	mov	r0, r3
90005e42:	f00d fb5c 	bl	900134fe <memset>
90005e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90005e48:	4a0c      	ldr	r2, [pc, #48]	; (90005e7c <prvInitialiseNewTask+0x130>)
90005e4a:	651a      	str	r2, [r3, #80]	; 0x50
90005e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90005e4e:	4a0c      	ldr	r2, [pc, #48]	; (90005e80 <prvInitialiseNewTask+0x134>)
90005e50:	655a      	str	r2, [r3, #84]	; 0x54
90005e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90005e54:	4a0b      	ldr	r2, [pc, #44]	; (90005e84 <prvInitialiseNewTask+0x138>)
90005e56:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
90005e58:	683a      	ldr	r2, [r7, #0]
90005e5a:	68f9      	ldr	r1, [r7, #12]
90005e5c:	69b8      	ldr	r0, [r7, #24]
90005e5e:	f000 ff07 	bl	90006c70 <pxPortInitialiseStack>
90005e62:	4602      	mov	r2, r0
90005e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90005e66:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
90005e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90005e6a:	2b00      	cmp	r3, #0
90005e6c:	d002      	beq.n	90005e74 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
90005e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90005e70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
90005e72:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
90005e74:	bf00      	nop
90005e76:	3720      	adds	r7, #32
90005e78:	46bd      	mov	sp, r7
90005e7a:	bd80      	pop	{r7, pc}
90005e7c:	9001750c 	.word	0x9001750c
90005e80:	9001752c 	.word	0x9001752c
90005e84:	900174ec 	.word	0x900174ec

90005e88 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
90005e88:	b580      	push	{r7, lr}
90005e8a:	b082      	sub	sp, #8
90005e8c:	af00      	add	r7, sp, #0
90005e8e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
90005e90:	f001 f818 	bl	90006ec4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
90005e94:	4b2a      	ldr	r3, [pc, #168]	; (90005f40 <prvAddNewTaskToReadyList+0xb8>)
90005e96:	681b      	ldr	r3, [r3, #0]
90005e98:	3301      	adds	r3, #1
90005e9a:	4a29      	ldr	r2, [pc, #164]	; (90005f40 <prvAddNewTaskToReadyList+0xb8>)
90005e9c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
90005e9e:	4b29      	ldr	r3, [pc, #164]	; (90005f44 <prvAddNewTaskToReadyList+0xbc>)
90005ea0:	681b      	ldr	r3, [r3, #0]
90005ea2:	2b00      	cmp	r3, #0
90005ea4:	d109      	bne.n	90005eba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
90005ea6:	4a27      	ldr	r2, [pc, #156]	; (90005f44 <prvAddNewTaskToReadyList+0xbc>)
90005ea8:	687b      	ldr	r3, [r7, #4]
90005eaa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
90005eac:	4b24      	ldr	r3, [pc, #144]	; (90005f40 <prvAddNewTaskToReadyList+0xb8>)
90005eae:	681b      	ldr	r3, [r3, #0]
90005eb0:	2b01      	cmp	r3, #1
90005eb2:	d110      	bne.n	90005ed6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
90005eb4:	f000 fbf8 	bl	900066a8 <prvInitialiseTaskLists>
90005eb8:	e00d      	b.n	90005ed6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
90005eba:	4b23      	ldr	r3, [pc, #140]	; (90005f48 <prvAddNewTaskToReadyList+0xc0>)
90005ebc:	681b      	ldr	r3, [r3, #0]
90005ebe:	2b00      	cmp	r3, #0
90005ec0:	d109      	bne.n	90005ed6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
90005ec2:	4b20      	ldr	r3, [pc, #128]	; (90005f44 <prvAddNewTaskToReadyList+0xbc>)
90005ec4:	681b      	ldr	r3, [r3, #0]
90005ec6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
90005ec8:	687b      	ldr	r3, [r7, #4]
90005eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90005ecc:	429a      	cmp	r2, r3
90005ece:	d802      	bhi.n	90005ed6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
90005ed0:	4a1c      	ldr	r2, [pc, #112]	; (90005f44 <prvAddNewTaskToReadyList+0xbc>)
90005ed2:	687b      	ldr	r3, [r7, #4]
90005ed4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
90005ed6:	4b1d      	ldr	r3, [pc, #116]	; (90005f4c <prvAddNewTaskToReadyList+0xc4>)
90005ed8:	681b      	ldr	r3, [r3, #0]
90005eda:	3301      	adds	r3, #1
90005edc:	4a1b      	ldr	r2, [pc, #108]	; (90005f4c <prvAddNewTaskToReadyList+0xc4>)
90005ede:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
90005ee0:	687b      	ldr	r3, [r7, #4]
90005ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90005ee4:	2201      	movs	r2, #1
90005ee6:	409a      	lsls	r2, r3
90005ee8:	4b19      	ldr	r3, [pc, #100]	; (90005f50 <prvAddNewTaskToReadyList+0xc8>)
90005eea:	681b      	ldr	r3, [r3, #0]
90005eec:	4313      	orrs	r3, r2
90005eee:	4a18      	ldr	r2, [pc, #96]	; (90005f50 <prvAddNewTaskToReadyList+0xc8>)
90005ef0:	6013      	str	r3, [r2, #0]
90005ef2:	687b      	ldr	r3, [r7, #4]
90005ef4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
90005ef6:	4613      	mov	r3, r2
90005ef8:	009b      	lsls	r3, r3, #2
90005efa:	4413      	add	r3, r2
90005efc:	009b      	lsls	r3, r3, #2
90005efe:	4a15      	ldr	r2, [pc, #84]	; (90005f54 <prvAddNewTaskToReadyList+0xcc>)
90005f00:	441a      	add	r2, r3
90005f02:	687b      	ldr	r3, [r7, #4]
90005f04:	3304      	adds	r3, #4
90005f06:	4619      	mov	r1, r3
90005f08:	4610      	mov	r0, r2
90005f0a:	f7fe feb6 	bl	90004c7a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
90005f0e:	f001 f809 	bl	90006f24 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
90005f12:	4b0d      	ldr	r3, [pc, #52]	; (90005f48 <prvAddNewTaskToReadyList+0xc0>)
90005f14:	681b      	ldr	r3, [r3, #0]
90005f16:	2b00      	cmp	r3, #0
90005f18:	d00e      	beq.n	90005f38 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
90005f1a:	4b0a      	ldr	r3, [pc, #40]	; (90005f44 <prvAddNewTaskToReadyList+0xbc>)
90005f1c:	681b      	ldr	r3, [r3, #0]
90005f1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
90005f20:	687b      	ldr	r3, [r7, #4]
90005f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90005f24:	429a      	cmp	r2, r3
90005f26:	d207      	bcs.n	90005f38 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
90005f28:	4b0b      	ldr	r3, [pc, #44]	; (90005f58 <prvAddNewTaskToReadyList+0xd0>)
90005f2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
90005f2e:	601a      	str	r2, [r3, #0]
90005f30:	f3bf 8f4f 	dsb	sy
90005f34:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
90005f38:	bf00      	nop
90005f3a:	3708      	adds	r7, #8
90005f3c:	46bd      	mov	sp, r7
90005f3e:	bd80      	pop	{r7, pc}
90005f40:	24009e7c 	.word	0x24009e7c
90005f44:	24009d7c 	.word	0x24009d7c
90005f48:	24009e88 	.word	0x24009e88
90005f4c:	24009e98 	.word	0x24009e98
90005f50:	24009e84 	.word	0x24009e84
90005f54:	24009d80 	.word	0x24009d80
90005f58:	e000ed04 	.word	0xe000ed04

90005f5c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
90005f5c:	b580      	push	{r7, lr}
90005f5e:	b084      	sub	sp, #16
90005f60:	af00      	add	r7, sp, #0
90005f62:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
90005f64:	2300      	movs	r3, #0
90005f66:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
90005f68:	687b      	ldr	r3, [r7, #4]
90005f6a:	2b00      	cmp	r3, #0
90005f6c:	d017      	beq.n	90005f9e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
90005f6e:	4b13      	ldr	r3, [pc, #76]	; (90005fbc <vTaskDelay+0x60>)
90005f70:	681b      	ldr	r3, [r3, #0]
90005f72:	2b00      	cmp	r3, #0
90005f74:	d00a      	beq.n	90005f8c <vTaskDelay+0x30>
	__asm volatile
90005f76:	f04f 0350 	mov.w	r3, #80	; 0x50
90005f7a:	f383 8811 	msr	BASEPRI, r3
90005f7e:	f3bf 8f6f 	isb	sy
90005f82:	f3bf 8f4f 	dsb	sy
90005f86:	60bb      	str	r3, [r7, #8]
}
90005f88:	bf00      	nop
90005f8a:	e7fe      	b.n	90005f8a <vTaskDelay+0x2e>
			vTaskSuspendAll();
90005f8c:	f000 f884 	bl	90006098 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
90005f90:	2100      	movs	r1, #0
90005f92:	6878      	ldr	r0, [r7, #4]
90005f94:	f000 fe06 	bl	90006ba4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
90005f98:	f000 f88c 	bl	900060b4 <xTaskResumeAll>
90005f9c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
90005f9e:	68fb      	ldr	r3, [r7, #12]
90005fa0:	2b00      	cmp	r3, #0
90005fa2:	d107      	bne.n	90005fb4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
90005fa4:	4b06      	ldr	r3, [pc, #24]	; (90005fc0 <vTaskDelay+0x64>)
90005fa6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
90005faa:	601a      	str	r2, [r3, #0]
90005fac:	f3bf 8f4f 	dsb	sy
90005fb0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
90005fb4:	bf00      	nop
90005fb6:	3710      	adds	r7, #16
90005fb8:	46bd      	mov	sp, r7
90005fba:	bd80      	pop	{r7, pc}
90005fbc:	24009ea4 	.word	0x24009ea4
90005fc0:	e000ed04 	.word	0xe000ed04

90005fc4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
90005fc4:	b580      	push	{r7, lr}
90005fc6:	b08a      	sub	sp, #40	; 0x28
90005fc8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
90005fca:	2300      	movs	r3, #0
90005fcc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
90005fce:	2300      	movs	r3, #0
90005fd0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
90005fd2:	463a      	mov	r2, r7
90005fd4:	1d39      	adds	r1, r7, #4
90005fd6:	f107 0308 	add.w	r3, r7, #8
90005fda:	4618      	mov	r0, r3
90005fdc:	f7fa f9e8 	bl	900003b0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
90005fe0:	6839      	ldr	r1, [r7, #0]
90005fe2:	687b      	ldr	r3, [r7, #4]
90005fe4:	68ba      	ldr	r2, [r7, #8]
90005fe6:	9202      	str	r2, [sp, #8]
90005fe8:	9301      	str	r3, [sp, #4]
90005fea:	2300      	movs	r3, #0
90005fec:	9300      	str	r3, [sp, #0]
90005fee:	2300      	movs	r3, #0
90005ff0:	460a      	mov	r2, r1
90005ff2:	4921      	ldr	r1, [pc, #132]	; (90006078 <vTaskStartScheduler+0xb4>)
90005ff4:	4821      	ldr	r0, [pc, #132]	; (9000607c <vTaskStartScheduler+0xb8>)
90005ff6:	f7ff fe07 	bl	90005c08 <xTaskCreateStatic>
90005ffa:	4603      	mov	r3, r0
90005ffc:	4a20      	ldr	r2, [pc, #128]	; (90006080 <vTaskStartScheduler+0xbc>)
90005ffe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
90006000:	4b1f      	ldr	r3, [pc, #124]	; (90006080 <vTaskStartScheduler+0xbc>)
90006002:	681b      	ldr	r3, [r3, #0]
90006004:	2b00      	cmp	r3, #0
90006006:	d002      	beq.n	9000600e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
90006008:	2301      	movs	r3, #1
9000600a:	617b      	str	r3, [r7, #20]
9000600c:	e001      	b.n	90006012 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
9000600e:	2300      	movs	r3, #0
90006010:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
90006012:	697b      	ldr	r3, [r7, #20]
90006014:	2b01      	cmp	r3, #1
90006016:	d11b      	bne.n	90006050 <vTaskStartScheduler+0x8c>
	__asm volatile
90006018:	f04f 0350 	mov.w	r3, #80	; 0x50
9000601c:	f383 8811 	msr	BASEPRI, r3
90006020:	f3bf 8f6f 	isb	sy
90006024:	f3bf 8f4f 	dsb	sy
90006028:	613b      	str	r3, [r7, #16]
}
9000602a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
9000602c:	4b15      	ldr	r3, [pc, #84]	; (90006084 <vTaskStartScheduler+0xc0>)
9000602e:	681b      	ldr	r3, [r3, #0]
90006030:	334c      	adds	r3, #76	; 0x4c
90006032:	4a15      	ldr	r2, [pc, #84]	; (90006088 <vTaskStartScheduler+0xc4>)
90006034:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
90006036:	4b15      	ldr	r3, [pc, #84]	; (9000608c <vTaskStartScheduler+0xc8>)
90006038:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
9000603c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
9000603e:	4b14      	ldr	r3, [pc, #80]	; (90006090 <vTaskStartScheduler+0xcc>)
90006040:	2201      	movs	r2, #1
90006042:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
90006044:	4b13      	ldr	r3, [pc, #76]	; (90006094 <vTaskStartScheduler+0xd0>)
90006046:	2200      	movs	r2, #0
90006048:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
9000604a:	f000 fe99 	bl	90006d80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
9000604e:	e00e      	b.n	9000606e <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
90006050:	697b      	ldr	r3, [r7, #20]
90006052:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
90006056:	d10a      	bne.n	9000606e <vTaskStartScheduler+0xaa>
	__asm volatile
90006058:	f04f 0350 	mov.w	r3, #80	; 0x50
9000605c:	f383 8811 	msr	BASEPRI, r3
90006060:	f3bf 8f6f 	isb	sy
90006064:	f3bf 8f4f 	dsb	sy
90006068:	60fb      	str	r3, [r7, #12]
}
9000606a:	bf00      	nop
9000606c:	e7fe      	b.n	9000606c <vTaskStartScheduler+0xa8>
}
9000606e:	bf00      	nop
90006070:	3718      	adds	r7, #24
90006072:	46bd      	mov	sp, r7
90006074:	bd80      	pop	{r7, pc}
90006076:	bf00      	nop
90006078:	900145ac 	.word	0x900145ac
9000607c:	90006679 	.word	0x90006679
90006080:	24009ea0 	.word	0x24009ea0
90006084:	24009d7c 	.word	0x24009d7c
90006088:	24000034 	.word	0x24000034
9000608c:	24009e9c 	.word	0x24009e9c
90006090:	24009e88 	.word	0x24009e88
90006094:	24009e80 	.word	0x24009e80

90006098 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
90006098:	b480      	push	{r7}
9000609a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
9000609c:	4b04      	ldr	r3, [pc, #16]	; (900060b0 <vTaskSuspendAll+0x18>)
9000609e:	681b      	ldr	r3, [r3, #0]
900060a0:	3301      	adds	r3, #1
900060a2:	4a03      	ldr	r2, [pc, #12]	; (900060b0 <vTaskSuspendAll+0x18>)
900060a4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
900060a6:	bf00      	nop
900060a8:	46bd      	mov	sp, r7
900060aa:	f85d 7b04 	ldr.w	r7, [sp], #4
900060ae:	4770      	bx	lr
900060b0:	24009ea4 	.word	0x24009ea4

900060b4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
900060b4:	b580      	push	{r7, lr}
900060b6:	b084      	sub	sp, #16
900060b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
900060ba:	2300      	movs	r3, #0
900060bc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
900060be:	2300      	movs	r3, #0
900060c0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
900060c2:	4b41      	ldr	r3, [pc, #260]	; (900061c8 <xTaskResumeAll+0x114>)
900060c4:	681b      	ldr	r3, [r3, #0]
900060c6:	2b00      	cmp	r3, #0
900060c8:	d10a      	bne.n	900060e0 <xTaskResumeAll+0x2c>
	__asm volatile
900060ca:	f04f 0350 	mov.w	r3, #80	; 0x50
900060ce:	f383 8811 	msr	BASEPRI, r3
900060d2:	f3bf 8f6f 	isb	sy
900060d6:	f3bf 8f4f 	dsb	sy
900060da:	603b      	str	r3, [r7, #0]
}
900060dc:	bf00      	nop
900060de:	e7fe      	b.n	900060de <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
900060e0:	f000 fef0 	bl	90006ec4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
900060e4:	4b38      	ldr	r3, [pc, #224]	; (900061c8 <xTaskResumeAll+0x114>)
900060e6:	681b      	ldr	r3, [r3, #0]
900060e8:	3b01      	subs	r3, #1
900060ea:	4a37      	ldr	r2, [pc, #220]	; (900061c8 <xTaskResumeAll+0x114>)
900060ec:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
900060ee:	4b36      	ldr	r3, [pc, #216]	; (900061c8 <xTaskResumeAll+0x114>)
900060f0:	681b      	ldr	r3, [r3, #0]
900060f2:	2b00      	cmp	r3, #0
900060f4:	d161      	bne.n	900061ba <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
900060f6:	4b35      	ldr	r3, [pc, #212]	; (900061cc <xTaskResumeAll+0x118>)
900060f8:	681b      	ldr	r3, [r3, #0]
900060fa:	2b00      	cmp	r3, #0
900060fc:	d05d      	beq.n	900061ba <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
900060fe:	e02e      	b.n	9000615e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
90006100:	4b33      	ldr	r3, [pc, #204]	; (900061d0 <xTaskResumeAll+0x11c>)
90006102:	68db      	ldr	r3, [r3, #12]
90006104:	68db      	ldr	r3, [r3, #12]
90006106:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
90006108:	68fb      	ldr	r3, [r7, #12]
9000610a:	3318      	adds	r3, #24
9000610c:	4618      	mov	r0, r3
9000610e:	f7fe fe11 	bl	90004d34 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
90006112:	68fb      	ldr	r3, [r7, #12]
90006114:	3304      	adds	r3, #4
90006116:	4618      	mov	r0, r3
90006118:	f7fe fe0c 	bl	90004d34 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
9000611c:	68fb      	ldr	r3, [r7, #12]
9000611e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90006120:	2201      	movs	r2, #1
90006122:	409a      	lsls	r2, r3
90006124:	4b2b      	ldr	r3, [pc, #172]	; (900061d4 <xTaskResumeAll+0x120>)
90006126:	681b      	ldr	r3, [r3, #0]
90006128:	4313      	orrs	r3, r2
9000612a:	4a2a      	ldr	r2, [pc, #168]	; (900061d4 <xTaskResumeAll+0x120>)
9000612c:	6013      	str	r3, [r2, #0]
9000612e:	68fb      	ldr	r3, [r7, #12]
90006130:	6ada      	ldr	r2, [r3, #44]	; 0x2c
90006132:	4613      	mov	r3, r2
90006134:	009b      	lsls	r3, r3, #2
90006136:	4413      	add	r3, r2
90006138:	009b      	lsls	r3, r3, #2
9000613a:	4a27      	ldr	r2, [pc, #156]	; (900061d8 <xTaskResumeAll+0x124>)
9000613c:	441a      	add	r2, r3
9000613e:	68fb      	ldr	r3, [r7, #12]
90006140:	3304      	adds	r3, #4
90006142:	4619      	mov	r1, r3
90006144:	4610      	mov	r0, r2
90006146:	f7fe fd98 	bl	90004c7a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
9000614a:	68fb      	ldr	r3, [r7, #12]
9000614c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
9000614e:	4b23      	ldr	r3, [pc, #140]	; (900061dc <xTaskResumeAll+0x128>)
90006150:	681b      	ldr	r3, [r3, #0]
90006152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90006154:	429a      	cmp	r2, r3
90006156:	d302      	bcc.n	9000615e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
90006158:	4b21      	ldr	r3, [pc, #132]	; (900061e0 <xTaskResumeAll+0x12c>)
9000615a:	2201      	movs	r2, #1
9000615c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
9000615e:	4b1c      	ldr	r3, [pc, #112]	; (900061d0 <xTaskResumeAll+0x11c>)
90006160:	681b      	ldr	r3, [r3, #0]
90006162:	2b00      	cmp	r3, #0
90006164:	d1cc      	bne.n	90006100 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
90006166:	68fb      	ldr	r3, [r7, #12]
90006168:	2b00      	cmp	r3, #0
9000616a:	d001      	beq.n	90006170 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
9000616c:	f000 fb3e 	bl	900067ec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
90006170:	4b1c      	ldr	r3, [pc, #112]	; (900061e4 <xTaskResumeAll+0x130>)
90006172:	681b      	ldr	r3, [r3, #0]
90006174:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
90006176:	687b      	ldr	r3, [r7, #4]
90006178:	2b00      	cmp	r3, #0
9000617a:	d010      	beq.n	9000619e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
9000617c:	f000 f858 	bl	90006230 <xTaskIncrementTick>
90006180:	4603      	mov	r3, r0
90006182:	2b00      	cmp	r3, #0
90006184:	d002      	beq.n	9000618c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
90006186:	4b16      	ldr	r3, [pc, #88]	; (900061e0 <xTaskResumeAll+0x12c>)
90006188:	2201      	movs	r2, #1
9000618a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
9000618c:	687b      	ldr	r3, [r7, #4]
9000618e:	3b01      	subs	r3, #1
90006190:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
90006192:	687b      	ldr	r3, [r7, #4]
90006194:	2b00      	cmp	r3, #0
90006196:	d1f1      	bne.n	9000617c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
90006198:	4b12      	ldr	r3, [pc, #72]	; (900061e4 <xTaskResumeAll+0x130>)
9000619a:	2200      	movs	r2, #0
9000619c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
9000619e:	4b10      	ldr	r3, [pc, #64]	; (900061e0 <xTaskResumeAll+0x12c>)
900061a0:	681b      	ldr	r3, [r3, #0]
900061a2:	2b00      	cmp	r3, #0
900061a4:	d009      	beq.n	900061ba <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
900061a6:	2301      	movs	r3, #1
900061a8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
900061aa:	4b0f      	ldr	r3, [pc, #60]	; (900061e8 <xTaskResumeAll+0x134>)
900061ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
900061b0:	601a      	str	r2, [r3, #0]
900061b2:	f3bf 8f4f 	dsb	sy
900061b6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
900061ba:	f000 feb3 	bl	90006f24 <vPortExitCritical>

	return xAlreadyYielded;
900061be:	68bb      	ldr	r3, [r7, #8]
}
900061c0:	4618      	mov	r0, r3
900061c2:	3710      	adds	r7, #16
900061c4:	46bd      	mov	sp, r7
900061c6:	bd80      	pop	{r7, pc}
900061c8:	24009ea4 	.word	0x24009ea4
900061cc:	24009e7c 	.word	0x24009e7c
900061d0:	24009e3c 	.word	0x24009e3c
900061d4:	24009e84 	.word	0x24009e84
900061d8:	24009d80 	.word	0x24009d80
900061dc:	24009d7c 	.word	0x24009d7c
900061e0:	24009e90 	.word	0x24009e90
900061e4:	24009e8c 	.word	0x24009e8c
900061e8:	e000ed04 	.word	0xe000ed04

900061ec <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
900061ec:	b480      	push	{r7}
900061ee:	b083      	sub	sp, #12
900061f0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
900061f2:	4b05      	ldr	r3, [pc, #20]	; (90006208 <xTaskGetTickCount+0x1c>)
900061f4:	681b      	ldr	r3, [r3, #0]
900061f6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
900061f8:	687b      	ldr	r3, [r7, #4]
}
900061fa:	4618      	mov	r0, r3
900061fc:	370c      	adds	r7, #12
900061fe:	46bd      	mov	sp, r7
90006200:	f85d 7b04 	ldr.w	r7, [sp], #4
90006204:	4770      	bx	lr
90006206:	bf00      	nop
90006208:	24009e80 	.word	0x24009e80

9000620c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
9000620c:	b580      	push	{r7, lr}
9000620e:	b082      	sub	sp, #8
90006210:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
90006212:	f000 ff39 	bl	90007088 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
90006216:	2300      	movs	r3, #0
90006218:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
9000621a:	4b04      	ldr	r3, [pc, #16]	; (9000622c <xTaskGetTickCountFromISR+0x20>)
9000621c:	681b      	ldr	r3, [r3, #0]
9000621e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
90006220:	683b      	ldr	r3, [r7, #0]
}
90006222:	4618      	mov	r0, r3
90006224:	3708      	adds	r7, #8
90006226:	46bd      	mov	sp, r7
90006228:	bd80      	pop	{r7, pc}
9000622a:	bf00      	nop
9000622c:	24009e80 	.word	0x24009e80

90006230 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
90006230:	b580      	push	{r7, lr}
90006232:	b086      	sub	sp, #24
90006234:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
90006236:	2300      	movs	r3, #0
90006238:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
9000623a:	4b4e      	ldr	r3, [pc, #312]	; (90006374 <xTaskIncrementTick+0x144>)
9000623c:	681b      	ldr	r3, [r3, #0]
9000623e:	2b00      	cmp	r3, #0
90006240:	f040 808e 	bne.w	90006360 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
90006244:	4b4c      	ldr	r3, [pc, #304]	; (90006378 <xTaskIncrementTick+0x148>)
90006246:	681b      	ldr	r3, [r3, #0]
90006248:	3301      	adds	r3, #1
9000624a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
9000624c:	4a4a      	ldr	r2, [pc, #296]	; (90006378 <xTaskIncrementTick+0x148>)
9000624e:	693b      	ldr	r3, [r7, #16]
90006250:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
90006252:	693b      	ldr	r3, [r7, #16]
90006254:	2b00      	cmp	r3, #0
90006256:	d120      	bne.n	9000629a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
90006258:	4b48      	ldr	r3, [pc, #288]	; (9000637c <xTaskIncrementTick+0x14c>)
9000625a:	681b      	ldr	r3, [r3, #0]
9000625c:	681b      	ldr	r3, [r3, #0]
9000625e:	2b00      	cmp	r3, #0
90006260:	d00a      	beq.n	90006278 <xTaskIncrementTick+0x48>
	__asm volatile
90006262:	f04f 0350 	mov.w	r3, #80	; 0x50
90006266:	f383 8811 	msr	BASEPRI, r3
9000626a:	f3bf 8f6f 	isb	sy
9000626e:	f3bf 8f4f 	dsb	sy
90006272:	603b      	str	r3, [r7, #0]
}
90006274:	bf00      	nop
90006276:	e7fe      	b.n	90006276 <xTaskIncrementTick+0x46>
90006278:	4b40      	ldr	r3, [pc, #256]	; (9000637c <xTaskIncrementTick+0x14c>)
9000627a:	681b      	ldr	r3, [r3, #0]
9000627c:	60fb      	str	r3, [r7, #12]
9000627e:	4b40      	ldr	r3, [pc, #256]	; (90006380 <xTaskIncrementTick+0x150>)
90006280:	681b      	ldr	r3, [r3, #0]
90006282:	4a3e      	ldr	r2, [pc, #248]	; (9000637c <xTaskIncrementTick+0x14c>)
90006284:	6013      	str	r3, [r2, #0]
90006286:	4a3e      	ldr	r2, [pc, #248]	; (90006380 <xTaskIncrementTick+0x150>)
90006288:	68fb      	ldr	r3, [r7, #12]
9000628a:	6013      	str	r3, [r2, #0]
9000628c:	4b3d      	ldr	r3, [pc, #244]	; (90006384 <xTaskIncrementTick+0x154>)
9000628e:	681b      	ldr	r3, [r3, #0]
90006290:	3301      	adds	r3, #1
90006292:	4a3c      	ldr	r2, [pc, #240]	; (90006384 <xTaskIncrementTick+0x154>)
90006294:	6013      	str	r3, [r2, #0]
90006296:	f000 faa9 	bl	900067ec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
9000629a:	4b3b      	ldr	r3, [pc, #236]	; (90006388 <xTaskIncrementTick+0x158>)
9000629c:	681b      	ldr	r3, [r3, #0]
9000629e:	693a      	ldr	r2, [r7, #16]
900062a0:	429a      	cmp	r2, r3
900062a2:	d348      	bcc.n	90006336 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
900062a4:	4b35      	ldr	r3, [pc, #212]	; (9000637c <xTaskIncrementTick+0x14c>)
900062a6:	681b      	ldr	r3, [r3, #0]
900062a8:	681b      	ldr	r3, [r3, #0]
900062aa:	2b00      	cmp	r3, #0
900062ac:	d104      	bne.n	900062b8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
900062ae:	4b36      	ldr	r3, [pc, #216]	; (90006388 <xTaskIncrementTick+0x158>)
900062b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
900062b4:	601a      	str	r2, [r3, #0]
					break;
900062b6:	e03e      	b.n	90006336 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
900062b8:	4b30      	ldr	r3, [pc, #192]	; (9000637c <xTaskIncrementTick+0x14c>)
900062ba:	681b      	ldr	r3, [r3, #0]
900062bc:	68db      	ldr	r3, [r3, #12]
900062be:	68db      	ldr	r3, [r3, #12]
900062c0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
900062c2:	68bb      	ldr	r3, [r7, #8]
900062c4:	685b      	ldr	r3, [r3, #4]
900062c6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
900062c8:	693a      	ldr	r2, [r7, #16]
900062ca:	687b      	ldr	r3, [r7, #4]
900062cc:	429a      	cmp	r2, r3
900062ce:	d203      	bcs.n	900062d8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
900062d0:	4a2d      	ldr	r2, [pc, #180]	; (90006388 <xTaskIncrementTick+0x158>)
900062d2:	687b      	ldr	r3, [r7, #4]
900062d4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
900062d6:	e02e      	b.n	90006336 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
900062d8:	68bb      	ldr	r3, [r7, #8]
900062da:	3304      	adds	r3, #4
900062dc:	4618      	mov	r0, r3
900062de:	f7fe fd29 	bl	90004d34 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
900062e2:	68bb      	ldr	r3, [r7, #8]
900062e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
900062e6:	2b00      	cmp	r3, #0
900062e8:	d004      	beq.n	900062f4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
900062ea:	68bb      	ldr	r3, [r7, #8]
900062ec:	3318      	adds	r3, #24
900062ee:	4618      	mov	r0, r3
900062f0:	f7fe fd20 	bl	90004d34 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
900062f4:	68bb      	ldr	r3, [r7, #8]
900062f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900062f8:	2201      	movs	r2, #1
900062fa:	409a      	lsls	r2, r3
900062fc:	4b23      	ldr	r3, [pc, #140]	; (9000638c <xTaskIncrementTick+0x15c>)
900062fe:	681b      	ldr	r3, [r3, #0]
90006300:	4313      	orrs	r3, r2
90006302:	4a22      	ldr	r2, [pc, #136]	; (9000638c <xTaskIncrementTick+0x15c>)
90006304:	6013      	str	r3, [r2, #0]
90006306:	68bb      	ldr	r3, [r7, #8]
90006308:	6ada      	ldr	r2, [r3, #44]	; 0x2c
9000630a:	4613      	mov	r3, r2
9000630c:	009b      	lsls	r3, r3, #2
9000630e:	4413      	add	r3, r2
90006310:	009b      	lsls	r3, r3, #2
90006312:	4a1f      	ldr	r2, [pc, #124]	; (90006390 <xTaskIncrementTick+0x160>)
90006314:	441a      	add	r2, r3
90006316:	68bb      	ldr	r3, [r7, #8]
90006318:	3304      	adds	r3, #4
9000631a:	4619      	mov	r1, r3
9000631c:	4610      	mov	r0, r2
9000631e:	f7fe fcac 	bl	90004c7a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
90006322:	68bb      	ldr	r3, [r7, #8]
90006324:	6ada      	ldr	r2, [r3, #44]	; 0x2c
90006326:	4b1b      	ldr	r3, [pc, #108]	; (90006394 <xTaskIncrementTick+0x164>)
90006328:	681b      	ldr	r3, [r3, #0]
9000632a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000632c:	429a      	cmp	r2, r3
9000632e:	d3b9      	bcc.n	900062a4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
90006330:	2301      	movs	r3, #1
90006332:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
90006334:	e7b6      	b.n	900062a4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
90006336:	4b17      	ldr	r3, [pc, #92]	; (90006394 <xTaskIncrementTick+0x164>)
90006338:	681b      	ldr	r3, [r3, #0]
9000633a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
9000633c:	4914      	ldr	r1, [pc, #80]	; (90006390 <xTaskIncrementTick+0x160>)
9000633e:	4613      	mov	r3, r2
90006340:	009b      	lsls	r3, r3, #2
90006342:	4413      	add	r3, r2
90006344:	009b      	lsls	r3, r3, #2
90006346:	440b      	add	r3, r1
90006348:	681b      	ldr	r3, [r3, #0]
9000634a:	2b01      	cmp	r3, #1
9000634c:	d901      	bls.n	90006352 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
9000634e:	2301      	movs	r3, #1
90006350:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
90006352:	4b11      	ldr	r3, [pc, #68]	; (90006398 <xTaskIncrementTick+0x168>)
90006354:	681b      	ldr	r3, [r3, #0]
90006356:	2b00      	cmp	r3, #0
90006358:	d007      	beq.n	9000636a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
9000635a:	2301      	movs	r3, #1
9000635c:	617b      	str	r3, [r7, #20]
9000635e:	e004      	b.n	9000636a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
90006360:	4b0e      	ldr	r3, [pc, #56]	; (9000639c <xTaskIncrementTick+0x16c>)
90006362:	681b      	ldr	r3, [r3, #0]
90006364:	3301      	adds	r3, #1
90006366:	4a0d      	ldr	r2, [pc, #52]	; (9000639c <xTaskIncrementTick+0x16c>)
90006368:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
9000636a:	697b      	ldr	r3, [r7, #20]
}
9000636c:	4618      	mov	r0, r3
9000636e:	3718      	adds	r7, #24
90006370:	46bd      	mov	sp, r7
90006372:	bd80      	pop	{r7, pc}
90006374:	24009ea4 	.word	0x24009ea4
90006378:	24009e80 	.word	0x24009e80
9000637c:	24009e34 	.word	0x24009e34
90006380:	24009e38 	.word	0x24009e38
90006384:	24009e94 	.word	0x24009e94
90006388:	24009e9c 	.word	0x24009e9c
9000638c:	24009e84 	.word	0x24009e84
90006390:	24009d80 	.word	0x24009d80
90006394:	24009d7c 	.word	0x24009d7c
90006398:	24009e90 	.word	0x24009e90
9000639c:	24009e8c 	.word	0x24009e8c

900063a0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
900063a0:	b480      	push	{r7}
900063a2:	b087      	sub	sp, #28
900063a4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
900063a6:	4b29      	ldr	r3, [pc, #164]	; (9000644c <vTaskSwitchContext+0xac>)
900063a8:	681b      	ldr	r3, [r3, #0]
900063aa:	2b00      	cmp	r3, #0
900063ac:	d003      	beq.n	900063b6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
900063ae:	4b28      	ldr	r3, [pc, #160]	; (90006450 <vTaskSwitchContext+0xb0>)
900063b0:	2201      	movs	r2, #1
900063b2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
900063b4:	e044      	b.n	90006440 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
900063b6:	4b26      	ldr	r3, [pc, #152]	; (90006450 <vTaskSwitchContext+0xb0>)
900063b8:	2200      	movs	r2, #0
900063ba:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
900063bc:	4b25      	ldr	r3, [pc, #148]	; (90006454 <vTaskSwitchContext+0xb4>)
900063be:	681b      	ldr	r3, [r3, #0]
900063c0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
900063c2:	68fb      	ldr	r3, [r7, #12]
900063c4:	fab3 f383 	clz	r3, r3
900063c8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
900063ca:	7afb      	ldrb	r3, [r7, #11]
900063cc:	f1c3 031f 	rsb	r3, r3, #31
900063d0:	617b      	str	r3, [r7, #20]
900063d2:	4921      	ldr	r1, [pc, #132]	; (90006458 <vTaskSwitchContext+0xb8>)
900063d4:	697a      	ldr	r2, [r7, #20]
900063d6:	4613      	mov	r3, r2
900063d8:	009b      	lsls	r3, r3, #2
900063da:	4413      	add	r3, r2
900063dc:	009b      	lsls	r3, r3, #2
900063de:	440b      	add	r3, r1
900063e0:	681b      	ldr	r3, [r3, #0]
900063e2:	2b00      	cmp	r3, #0
900063e4:	d10a      	bne.n	900063fc <vTaskSwitchContext+0x5c>
	__asm volatile
900063e6:	f04f 0350 	mov.w	r3, #80	; 0x50
900063ea:	f383 8811 	msr	BASEPRI, r3
900063ee:	f3bf 8f6f 	isb	sy
900063f2:	f3bf 8f4f 	dsb	sy
900063f6:	607b      	str	r3, [r7, #4]
}
900063f8:	bf00      	nop
900063fa:	e7fe      	b.n	900063fa <vTaskSwitchContext+0x5a>
900063fc:	697a      	ldr	r2, [r7, #20]
900063fe:	4613      	mov	r3, r2
90006400:	009b      	lsls	r3, r3, #2
90006402:	4413      	add	r3, r2
90006404:	009b      	lsls	r3, r3, #2
90006406:	4a14      	ldr	r2, [pc, #80]	; (90006458 <vTaskSwitchContext+0xb8>)
90006408:	4413      	add	r3, r2
9000640a:	613b      	str	r3, [r7, #16]
9000640c:	693b      	ldr	r3, [r7, #16]
9000640e:	685b      	ldr	r3, [r3, #4]
90006410:	685a      	ldr	r2, [r3, #4]
90006412:	693b      	ldr	r3, [r7, #16]
90006414:	605a      	str	r2, [r3, #4]
90006416:	693b      	ldr	r3, [r7, #16]
90006418:	685a      	ldr	r2, [r3, #4]
9000641a:	693b      	ldr	r3, [r7, #16]
9000641c:	3308      	adds	r3, #8
9000641e:	429a      	cmp	r2, r3
90006420:	d104      	bne.n	9000642c <vTaskSwitchContext+0x8c>
90006422:	693b      	ldr	r3, [r7, #16]
90006424:	685b      	ldr	r3, [r3, #4]
90006426:	685a      	ldr	r2, [r3, #4]
90006428:	693b      	ldr	r3, [r7, #16]
9000642a:	605a      	str	r2, [r3, #4]
9000642c:	693b      	ldr	r3, [r7, #16]
9000642e:	685b      	ldr	r3, [r3, #4]
90006430:	68db      	ldr	r3, [r3, #12]
90006432:	4a0a      	ldr	r2, [pc, #40]	; (9000645c <vTaskSwitchContext+0xbc>)
90006434:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
90006436:	4b09      	ldr	r3, [pc, #36]	; (9000645c <vTaskSwitchContext+0xbc>)
90006438:	681b      	ldr	r3, [r3, #0]
9000643a:	334c      	adds	r3, #76	; 0x4c
9000643c:	4a08      	ldr	r2, [pc, #32]	; (90006460 <vTaskSwitchContext+0xc0>)
9000643e:	6013      	str	r3, [r2, #0]
}
90006440:	bf00      	nop
90006442:	371c      	adds	r7, #28
90006444:	46bd      	mov	sp, r7
90006446:	f85d 7b04 	ldr.w	r7, [sp], #4
9000644a:	4770      	bx	lr
9000644c:	24009ea4 	.word	0x24009ea4
90006450:	24009e90 	.word	0x24009e90
90006454:	24009e84 	.word	0x24009e84
90006458:	24009d80 	.word	0x24009d80
9000645c:	24009d7c 	.word	0x24009d7c
90006460:	24000034 	.word	0x24000034

90006464 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
90006464:	b580      	push	{r7, lr}
90006466:	b084      	sub	sp, #16
90006468:	af00      	add	r7, sp, #0
9000646a:	6078      	str	r0, [r7, #4]
9000646c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
9000646e:	687b      	ldr	r3, [r7, #4]
90006470:	2b00      	cmp	r3, #0
90006472:	d10a      	bne.n	9000648a <vTaskPlaceOnEventList+0x26>
	__asm volatile
90006474:	f04f 0350 	mov.w	r3, #80	; 0x50
90006478:	f383 8811 	msr	BASEPRI, r3
9000647c:	f3bf 8f6f 	isb	sy
90006480:	f3bf 8f4f 	dsb	sy
90006484:	60fb      	str	r3, [r7, #12]
}
90006486:	bf00      	nop
90006488:	e7fe      	b.n	90006488 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
9000648a:	4b07      	ldr	r3, [pc, #28]	; (900064a8 <vTaskPlaceOnEventList+0x44>)
9000648c:	681b      	ldr	r3, [r3, #0]
9000648e:	3318      	adds	r3, #24
90006490:	4619      	mov	r1, r3
90006492:	6878      	ldr	r0, [r7, #4]
90006494:	f7fe fc15 	bl	90004cc2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
90006498:	2101      	movs	r1, #1
9000649a:	6838      	ldr	r0, [r7, #0]
9000649c:	f000 fb82 	bl	90006ba4 <prvAddCurrentTaskToDelayedList>
}
900064a0:	bf00      	nop
900064a2:	3710      	adds	r7, #16
900064a4:	46bd      	mov	sp, r7
900064a6:	bd80      	pop	{r7, pc}
900064a8:	24009d7c 	.word	0x24009d7c

900064ac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
900064ac:	b580      	push	{r7, lr}
900064ae:	b086      	sub	sp, #24
900064b0:	af00      	add	r7, sp, #0
900064b2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
900064b4:	687b      	ldr	r3, [r7, #4]
900064b6:	68db      	ldr	r3, [r3, #12]
900064b8:	68db      	ldr	r3, [r3, #12]
900064ba:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
900064bc:	693b      	ldr	r3, [r7, #16]
900064be:	2b00      	cmp	r3, #0
900064c0:	d10a      	bne.n	900064d8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
900064c2:	f04f 0350 	mov.w	r3, #80	; 0x50
900064c6:	f383 8811 	msr	BASEPRI, r3
900064ca:	f3bf 8f6f 	isb	sy
900064ce:	f3bf 8f4f 	dsb	sy
900064d2:	60fb      	str	r3, [r7, #12]
}
900064d4:	bf00      	nop
900064d6:	e7fe      	b.n	900064d6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
900064d8:	693b      	ldr	r3, [r7, #16]
900064da:	3318      	adds	r3, #24
900064dc:	4618      	mov	r0, r3
900064de:	f7fe fc29 	bl	90004d34 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
900064e2:	4b1d      	ldr	r3, [pc, #116]	; (90006558 <xTaskRemoveFromEventList+0xac>)
900064e4:	681b      	ldr	r3, [r3, #0]
900064e6:	2b00      	cmp	r3, #0
900064e8:	d11c      	bne.n	90006524 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
900064ea:	693b      	ldr	r3, [r7, #16]
900064ec:	3304      	adds	r3, #4
900064ee:	4618      	mov	r0, r3
900064f0:	f7fe fc20 	bl	90004d34 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
900064f4:	693b      	ldr	r3, [r7, #16]
900064f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900064f8:	2201      	movs	r2, #1
900064fa:	409a      	lsls	r2, r3
900064fc:	4b17      	ldr	r3, [pc, #92]	; (9000655c <xTaskRemoveFromEventList+0xb0>)
900064fe:	681b      	ldr	r3, [r3, #0]
90006500:	4313      	orrs	r3, r2
90006502:	4a16      	ldr	r2, [pc, #88]	; (9000655c <xTaskRemoveFromEventList+0xb0>)
90006504:	6013      	str	r3, [r2, #0]
90006506:	693b      	ldr	r3, [r7, #16]
90006508:	6ada      	ldr	r2, [r3, #44]	; 0x2c
9000650a:	4613      	mov	r3, r2
9000650c:	009b      	lsls	r3, r3, #2
9000650e:	4413      	add	r3, r2
90006510:	009b      	lsls	r3, r3, #2
90006512:	4a13      	ldr	r2, [pc, #76]	; (90006560 <xTaskRemoveFromEventList+0xb4>)
90006514:	441a      	add	r2, r3
90006516:	693b      	ldr	r3, [r7, #16]
90006518:	3304      	adds	r3, #4
9000651a:	4619      	mov	r1, r3
9000651c:	4610      	mov	r0, r2
9000651e:	f7fe fbac 	bl	90004c7a <vListInsertEnd>
90006522:	e005      	b.n	90006530 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
90006524:	693b      	ldr	r3, [r7, #16]
90006526:	3318      	adds	r3, #24
90006528:	4619      	mov	r1, r3
9000652a:	480e      	ldr	r0, [pc, #56]	; (90006564 <xTaskRemoveFromEventList+0xb8>)
9000652c:	f7fe fba5 	bl	90004c7a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
90006530:	693b      	ldr	r3, [r7, #16]
90006532:	6ada      	ldr	r2, [r3, #44]	; 0x2c
90006534:	4b0c      	ldr	r3, [pc, #48]	; (90006568 <xTaskRemoveFromEventList+0xbc>)
90006536:	681b      	ldr	r3, [r3, #0]
90006538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000653a:	429a      	cmp	r2, r3
9000653c:	d905      	bls.n	9000654a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
9000653e:	2301      	movs	r3, #1
90006540:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
90006542:	4b0a      	ldr	r3, [pc, #40]	; (9000656c <xTaskRemoveFromEventList+0xc0>)
90006544:	2201      	movs	r2, #1
90006546:	601a      	str	r2, [r3, #0]
90006548:	e001      	b.n	9000654e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
9000654a:	2300      	movs	r3, #0
9000654c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
9000654e:	697b      	ldr	r3, [r7, #20]
}
90006550:	4618      	mov	r0, r3
90006552:	3718      	adds	r7, #24
90006554:	46bd      	mov	sp, r7
90006556:	bd80      	pop	{r7, pc}
90006558:	24009ea4 	.word	0x24009ea4
9000655c:	24009e84 	.word	0x24009e84
90006560:	24009d80 	.word	0x24009d80
90006564:	24009e3c 	.word	0x24009e3c
90006568:	24009d7c 	.word	0x24009d7c
9000656c:	24009e90 	.word	0x24009e90

90006570 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
90006570:	b480      	push	{r7}
90006572:	b083      	sub	sp, #12
90006574:	af00      	add	r7, sp, #0
90006576:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
90006578:	4b06      	ldr	r3, [pc, #24]	; (90006594 <vTaskInternalSetTimeOutState+0x24>)
9000657a:	681a      	ldr	r2, [r3, #0]
9000657c:	687b      	ldr	r3, [r7, #4]
9000657e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
90006580:	4b05      	ldr	r3, [pc, #20]	; (90006598 <vTaskInternalSetTimeOutState+0x28>)
90006582:	681a      	ldr	r2, [r3, #0]
90006584:	687b      	ldr	r3, [r7, #4]
90006586:	605a      	str	r2, [r3, #4]
}
90006588:	bf00      	nop
9000658a:	370c      	adds	r7, #12
9000658c:	46bd      	mov	sp, r7
9000658e:	f85d 7b04 	ldr.w	r7, [sp], #4
90006592:	4770      	bx	lr
90006594:	24009e94 	.word	0x24009e94
90006598:	24009e80 	.word	0x24009e80

9000659c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
9000659c:	b580      	push	{r7, lr}
9000659e:	b088      	sub	sp, #32
900065a0:	af00      	add	r7, sp, #0
900065a2:	6078      	str	r0, [r7, #4]
900065a4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
900065a6:	687b      	ldr	r3, [r7, #4]
900065a8:	2b00      	cmp	r3, #0
900065aa:	d10a      	bne.n	900065c2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
900065ac:	f04f 0350 	mov.w	r3, #80	; 0x50
900065b0:	f383 8811 	msr	BASEPRI, r3
900065b4:	f3bf 8f6f 	isb	sy
900065b8:	f3bf 8f4f 	dsb	sy
900065bc:	613b      	str	r3, [r7, #16]
}
900065be:	bf00      	nop
900065c0:	e7fe      	b.n	900065c0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
900065c2:	683b      	ldr	r3, [r7, #0]
900065c4:	2b00      	cmp	r3, #0
900065c6:	d10a      	bne.n	900065de <xTaskCheckForTimeOut+0x42>
	__asm volatile
900065c8:	f04f 0350 	mov.w	r3, #80	; 0x50
900065cc:	f383 8811 	msr	BASEPRI, r3
900065d0:	f3bf 8f6f 	isb	sy
900065d4:	f3bf 8f4f 	dsb	sy
900065d8:	60fb      	str	r3, [r7, #12]
}
900065da:	bf00      	nop
900065dc:	e7fe      	b.n	900065dc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
900065de:	f000 fc71 	bl	90006ec4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
900065e2:	4b1d      	ldr	r3, [pc, #116]	; (90006658 <xTaskCheckForTimeOut+0xbc>)
900065e4:	681b      	ldr	r3, [r3, #0]
900065e6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
900065e8:	687b      	ldr	r3, [r7, #4]
900065ea:	685b      	ldr	r3, [r3, #4]
900065ec:	69ba      	ldr	r2, [r7, #24]
900065ee:	1ad3      	subs	r3, r2, r3
900065f0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
900065f2:	683b      	ldr	r3, [r7, #0]
900065f4:	681b      	ldr	r3, [r3, #0]
900065f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
900065fa:	d102      	bne.n	90006602 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
900065fc:	2300      	movs	r3, #0
900065fe:	61fb      	str	r3, [r7, #28]
90006600:	e023      	b.n	9000664a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
90006602:	687b      	ldr	r3, [r7, #4]
90006604:	681a      	ldr	r2, [r3, #0]
90006606:	4b15      	ldr	r3, [pc, #84]	; (9000665c <xTaskCheckForTimeOut+0xc0>)
90006608:	681b      	ldr	r3, [r3, #0]
9000660a:	429a      	cmp	r2, r3
9000660c:	d007      	beq.n	9000661e <xTaskCheckForTimeOut+0x82>
9000660e:	687b      	ldr	r3, [r7, #4]
90006610:	685b      	ldr	r3, [r3, #4]
90006612:	69ba      	ldr	r2, [r7, #24]
90006614:	429a      	cmp	r2, r3
90006616:	d302      	bcc.n	9000661e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
90006618:	2301      	movs	r3, #1
9000661a:	61fb      	str	r3, [r7, #28]
9000661c:	e015      	b.n	9000664a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
9000661e:	683b      	ldr	r3, [r7, #0]
90006620:	681b      	ldr	r3, [r3, #0]
90006622:	697a      	ldr	r2, [r7, #20]
90006624:	429a      	cmp	r2, r3
90006626:	d20b      	bcs.n	90006640 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
90006628:	683b      	ldr	r3, [r7, #0]
9000662a:	681a      	ldr	r2, [r3, #0]
9000662c:	697b      	ldr	r3, [r7, #20]
9000662e:	1ad2      	subs	r2, r2, r3
90006630:	683b      	ldr	r3, [r7, #0]
90006632:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
90006634:	6878      	ldr	r0, [r7, #4]
90006636:	f7ff ff9b 	bl	90006570 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
9000663a:	2300      	movs	r3, #0
9000663c:	61fb      	str	r3, [r7, #28]
9000663e:	e004      	b.n	9000664a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
90006640:	683b      	ldr	r3, [r7, #0]
90006642:	2200      	movs	r2, #0
90006644:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
90006646:	2301      	movs	r3, #1
90006648:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
9000664a:	f000 fc6b 	bl	90006f24 <vPortExitCritical>

	return xReturn;
9000664e:	69fb      	ldr	r3, [r7, #28]
}
90006650:	4618      	mov	r0, r3
90006652:	3720      	adds	r7, #32
90006654:	46bd      	mov	sp, r7
90006656:	bd80      	pop	{r7, pc}
90006658:	24009e80 	.word	0x24009e80
9000665c:	24009e94 	.word	0x24009e94

90006660 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
90006660:	b480      	push	{r7}
90006662:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
90006664:	4b03      	ldr	r3, [pc, #12]	; (90006674 <vTaskMissedYield+0x14>)
90006666:	2201      	movs	r2, #1
90006668:	601a      	str	r2, [r3, #0]
}
9000666a:	bf00      	nop
9000666c:	46bd      	mov	sp, r7
9000666e:	f85d 7b04 	ldr.w	r7, [sp], #4
90006672:	4770      	bx	lr
90006674:	24009e90 	.word	0x24009e90

90006678 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
90006678:	b580      	push	{r7, lr}
9000667a:	b082      	sub	sp, #8
9000667c:	af00      	add	r7, sp, #0
9000667e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
90006680:	f000 f852 	bl	90006728 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
90006684:	4b06      	ldr	r3, [pc, #24]	; (900066a0 <prvIdleTask+0x28>)
90006686:	681b      	ldr	r3, [r3, #0]
90006688:	2b01      	cmp	r3, #1
9000668a:	d9f9      	bls.n	90006680 <prvIdleTask+0x8>
			{
				taskYIELD();
9000668c:	4b05      	ldr	r3, [pc, #20]	; (900066a4 <prvIdleTask+0x2c>)
9000668e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
90006692:	601a      	str	r2, [r3, #0]
90006694:	f3bf 8f4f 	dsb	sy
90006698:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
9000669c:	e7f0      	b.n	90006680 <prvIdleTask+0x8>
9000669e:	bf00      	nop
900066a0:	24009d80 	.word	0x24009d80
900066a4:	e000ed04 	.word	0xe000ed04

900066a8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
900066a8:	b580      	push	{r7, lr}
900066aa:	b082      	sub	sp, #8
900066ac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
900066ae:	2300      	movs	r3, #0
900066b0:	607b      	str	r3, [r7, #4]
900066b2:	e00c      	b.n	900066ce <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
900066b4:	687a      	ldr	r2, [r7, #4]
900066b6:	4613      	mov	r3, r2
900066b8:	009b      	lsls	r3, r3, #2
900066ba:	4413      	add	r3, r2
900066bc:	009b      	lsls	r3, r3, #2
900066be:	4a12      	ldr	r2, [pc, #72]	; (90006708 <prvInitialiseTaskLists+0x60>)
900066c0:	4413      	add	r3, r2
900066c2:	4618      	mov	r0, r3
900066c4:	f7fe faac 	bl	90004c20 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
900066c8:	687b      	ldr	r3, [r7, #4]
900066ca:	3301      	adds	r3, #1
900066cc:	607b      	str	r3, [r7, #4]
900066ce:	687b      	ldr	r3, [r7, #4]
900066d0:	2b06      	cmp	r3, #6
900066d2:	d9ef      	bls.n	900066b4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
900066d4:	480d      	ldr	r0, [pc, #52]	; (9000670c <prvInitialiseTaskLists+0x64>)
900066d6:	f7fe faa3 	bl	90004c20 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
900066da:	480d      	ldr	r0, [pc, #52]	; (90006710 <prvInitialiseTaskLists+0x68>)
900066dc:	f7fe faa0 	bl	90004c20 <vListInitialise>
	vListInitialise( &xPendingReadyList );
900066e0:	480c      	ldr	r0, [pc, #48]	; (90006714 <prvInitialiseTaskLists+0x6c>)
900066e2:	f7fe fa9d 	bl	90004c20 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
900066e6:	480c      	ldr	r0, [pc, #48]	; (90006718 <prvInitialiseTaskLists+0x70>)
900066e8:	f7fe fa9a 	bl	90004c20 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
900066ec:	480b      	ldr	r0, [pc, #44]	; (9000671c <prvInitialiseTaskLists+0x74>)
900066ee:	f7fe fa97 	bl	90004c20 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
900066f2:	4b0b      	ldr	r3, [pc, #44]	; (90006720 <prvInitialiseTaskLists+0x78>)
900066f4:	4a05      	ldr	r2, [pc, #20]	; (9000670c <prvInitialiseTaskLists+0x64>)
900066f6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
900066f8:	4b0a      	ldr	r3, [pc, #40]	; (90006724 <prvInitialiseTaskLists+0x7c>)
900066fa:	4a05      	ldr	r2, [pc, #20]	; (90006710 <prvInitialiseTaskLists+0x68>)
900066fc:	601a      	str	r2, [r3, #0]
}
900066fe:	bf00      	nop
90006700:	3708      	adds	r7, #8
90006702:	46bd      	mov	sp, r7
90006704:	bd80      	pop	{r7, pc}
90006706:	bf00      	nop
90006708:	24009d80 	.word	0x24009d80
9000670c:	24009e0c 	.word	0x24009e0c
90006710:	24009e20 	.word	0x24009e20
90006714:	24009e3c 	.word	0x24009e3c
90006718:	24009e50 	.word	0x24009e50
9000671c:	24009e68 	.word	0x24009e68
90006720:	24009e34 	.word	0x24009e34
90006724:	24009e38 	.word	0x24009e38

90006728 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
90006728:	b580      	push	{r7, lr}
9000672a:	b082      	sub	sp, #8
9000672c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
9000672e:	e019      	b.n	90006764 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
90006730:	f000 fbc8 	bl	90006ec4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
90006734:	4b10      	ldr	r3, [pc, #64]	; (90006778 <prvCheckTasksWaitingTermination+0x50>)
90006736:	68db      	ldr	r3, [r3, #12]
90006738:	68db      	ldr	r3, [r3, #12]
9000673a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
9000673c:	687b      	ldr	r3, [r7, #4]
9000673e:	3304      	adds	r3, #4
90006740:	4618      	mov	r0, r3
90006742:	f7fe faf7 	bl	90004d34 <uxListRemove>
				--uxCurrentNumberOfTasks;
90006746:	4b0d      	ldr	r3, [pc, #52]	; (9000677c <prvCheckTasksWaitingTermination+0x54>)
90006748:	681b      	ldr	r3, [r3, #0]
9000674a:	3b01      	subs	r3, #1
9000674c:	4a0b      	ldr	r2, [pc, #44]	; (9000677c <prvCheckTasksWaitingTermination+0x54>)
9000674e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
90006750:	4b0b      	ldr	r3, [pc, #44]	; (90006780 <prvCheckTasksWaitingTermination+0x58>)
90006752:	681b      	ldr	r3, [r3, #0]
90006754:	3b01      	subs	r3, #1
90006756:	4a0a      	ldr	r2, [pc, #40]	; (90006780 <prvCheckTasksWaitingTermination+0x58>)
90006758:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
9000675a:	f000 fbe3 	bl	90006f24 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
9000675e:	6878      	ldr	r0, [r7, #4]
90006760:	f000 f810 	bl	90006784 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
90006764:	4b06      	ldr	r3, [pc, #24]	; (90006780 <prvCheckTasksWaitingTermination+0x58>)
90006766:	681b      	ldr	r3, [r3, #0]
90006768:	2b00      	cmp	r3, #0
9000676a:	d1e1      	bne.n	90006730 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
9000676c:	bf00      	nop
9000676e:	bf00      	nop
90006770:	3708      	adds	r7, #8
90006772:	46bd      	mov	sp, r7
90006774:	bd80      	pop	{r7, pc}
90006776:	bf00      	nop
90006778:	24009e50 	.word	0x24009e50
9000677c:	24009e7c 	.word	0x24009e7c
90006780:	24009e64 	.word	0x24009e64

90006784 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
90006784:	b580      	push	{r7, lr}
90006786:	b084      	sub	sp, #16
90006788:	af00      	add	r7, sp, #0
9000678a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
9000678c:	687b      	ldr	r3, [r7, #4]
9000678e:	334c      	adds	r3, #76	; 0x4c
90006790:	4618      	mov	r0, r3
90006792:	f00c ffb5 	bl	90013700 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
90006796:	687b      	ldr	r3, [r7, #4]
90006798:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
9000679c:	2b00      	cmp	r3, #0
9000679e:	d108      	bne.n	900067b2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
900067a0:	687b      	ldr	r3, [r7, #4]
900067a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900067a4:	4618      	mov	r0, r3
900067a6:	f000 fd7b 	bl	900072a0 <vPortFree>
				vPortFree( pxTCB );
900067aa:	6878      	ldr	r0, [r7, #4]
900067ac:	f000 fd78 	bl	900072a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
900067b0:	e018      	b.n	900067e4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
900067b2:	687b      	ldr	r3, [r7, #4]
900067b4:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
900067b8:	2b01      	cmp	r3, #1
900067ba:	d103      	bne.n	900067c4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
900067bc:	6878      	ldr	r0, [r7, #4]
900067be:	f000 fd6f 	bl	900072a0 <vPortFree>
	}
900067c2:	e00f      	b.n	900067e4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
900067c4:	687b      	ldr	r3, [r7, #4]
900067c6:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
900067ca:	2b02      	cmp	r3, #2
900067cc:	d00a      	beq.n	900067e4 <prvDeleteTCB+0x60>
	__asm volatile
900067ce:	f04f 0350 	mov.w	r3, #80	; 0x50
900067d2:	f383 8811 	msr	BASEPRI, r3
900067d6:	f3bf 8f6f 	isb	sy
900067da:	f3bf 8f4f 	dsb	sy
900067de:	60fb      	str	r3, [r7, #12]
}
900067e0:	bf00      	nop
900067e2:	e7fe      	b.n	900067e2 <prvDeleteTCB+0x5e>
	}
900067e4:	bf00      	nop
900067e6:	3710      	adds	r7, #16
900067e8:	46bd      	mov	sp, r7
900067ea:	bd80      	pop	{r7, pc}

900067ec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
900067ec:	b480      	push	{r7}
900067ee:	b083      	sub	sp, #12
900067f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
900067f2:	4b0c      	ldr	r3, [pc, #48]	; (90006824 <prvResetNextTaskUnblockTime+0x38>)
900067f4:	681b      	ldr	r3, [r3, #0]
900067f6:	681b      	ldr	r3, [r3, #0]
900067f8:	2b00      	cmp	r3, #0
900067fa:	d104      	bne.n	90006806 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
900067fc:	4b0a      	ldr	r3, [pc, #40]	; (90006828 <prvResetNextTaskUnblockTime+0x3c>)
900067fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
90006802:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
90006804:	e008      	b.n	90006818 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
90006806:	4b07      	ldr	r3, [pc, #28]	; (90006824 <prvResetNextTaskUnblockTime+0x38>)
90006808:	681b      	ldr	r3, [r3, #0]
9000680a:	68db      	ldr	r3, [r3, #12]
9000680c:	68db      	ldr	r3, [r3, #12]
9000680e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
90006810:	687b      	ldr	r3, [r7, #4]
90006812:	685b      	ldr	r3, [r3, #4]
90006814:	4a04      	ldr	r2, [pc, #16]	; (90006828 <prvResetNextTaskUnblockTime+0x3c>)
90006816:	6013      	str	r3, [r2, #0]
}
90006818:	bf00      	nop
9000681a:	370c      	adds	r7, #12
9000681c:	46bd      	mov	sp, r7
9000681e:	f85d 7b04 	ldr.w	r7, [sp], #4
90006822:	4770      	bx	lr
90006824:	24009e34 	.word	0x24009e34
90006828:	24009e9c 	.word	0x24009e9c

9000682c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
9000682c:	b480      	push	{r7}
9000682e:	b083      	sub	sp, #12
90006830:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
90006832:	4b0b      	ldr	r3, [pc, #44]	; (90006860 <xTaskGetSchedulerState+0x34>)
90006834:	681b      	ldr	r3, [r3, #0]
90006836:	2b00      	cmp	r3, #0
90006838:	d102      	bne.n	90006840 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
9000683a:	2301      	movs	r3, #1
9000683c:	607b      	str	r3, [r7, #4]
9000683e:	e008      	b.n	90006852 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
90006840:	4b08      	ldr	r3, [pc, #32]	; (90006864 <xTaskGetSchedulerState+0x38>)
90006842:	681b      	ldr	r3, [r3, #0]
90006844:	2b00      	cmp	r3, #0
90006846:	d102      	bne.n	9000684e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
90006848:	2302      	movs	r3, #2
9000684a:	607b      	str	r3, [r7, #4]
9000684c:	e001      	b.n	90006852 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
9000684e:	2300      	movs	r3, #0
90006850:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
90006852:	687b      	ldr	r3, [r7, #4]
	}
90006854:	4618      	mov	r0, r3
90006856:	370c      	adds	r7, #12
90006858:	46bd      	mov	sp, r7
9000685a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000685e:	4770      	bx	lr
90006860:	24009e88 	.word	0x24009e88
90006864:	24009ea4 	.word	0x24009ea4

90006868 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
90006868:	b580      	push	{r7, lr}
9000686a:	b084      	sub	sp, #16
9000686c:	af00      	add	r7, sp, #0
9000686e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
90006870:	687b      	ldr	r3, [r7, #4]
90006872:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
90006874:	2300      	movs	r3, #0
90006876:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
90006878:	687b      	ldr	r3, [r7, #4]
9000687a:	2b00      	cmp	r3, #0
9000687c:	d05e      	beq.n	9000693c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
9000687e:	68bb      	ldr	r3, [r7, #8]
90006880:	6ada      	ldr	r2, [r3, #44]	; 0x2c
90006882:	4b31      	ldr	r3, [pc, #196]	; (90006948 <xTaskPriorityInherit+0xe0>)
90006884:	681b      	ldr	r3, [r3, #0]
90006886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90006888:	429a      	cmp	r2, r3
9000688a:	d24e      	bcs.n	9000692a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
9000688c:	68bb      	ldr	r3, [r7, #8]
9000688e:	699b      	ldr	r3, [r3, #24]
90006890:	2b00      	cmp	r3, #0
90006892:	db06      	blt.n	900068a2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
90006894:	4b2c      	ldr	r3, [pc, #176]	; (90006948 <xTaskPriorityInherit+0xe0>)
90006896:	681b      	ldr	r3, [r3, #0]
90006898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000689a:	f1c3 0207 	rsb	r2, r3, #7
9000689e:	68bb      	ldr	r3, [r7, #8]
900068a0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
900068a2:	68bb      	ldr	r3, [r7, #8]
900068a4:	6959      	ldr	r1, [r3, #20]
900068a6:	68bb      	ldr	r3, [r7, #8]
900068a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
900068aa:	4613      	mov	r3, r2
900068ac:	009b      	lsls	r3, r3, #2
900068ae:	4413      	add	r3, r2
900068b0:	009b      	lsls	r3, r3, #2
900068b2:	4a26      	ldr	r2, [pc, #152]	; (9000694c <xTaskPriorityInherit+0xe4>)
900068b4:	4413      	add	r3, r2
900068b6:	4299      	cmp	r1, r3
900068b8:	d12f      	bne.n	9000691a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
900068ba:	68bb      	ldr	r3, [r7, #8]
900068bc:	3304      	adds	r3, #4
900068be:	4618      	mov	r0, r3
900068c0:	f7fe fa38 	bl	90004d34 <uxListRemove>
900068c4:	4603      	mov	r3, r0
900068c6:	2b00      	cmp	r3, #0
900068c8:	d10a      	bne.n	900068e0 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
900068ca:	68bb      	ldr	r3, [r7, #8]
900068cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900068ce:	2201      	movs	r2, #1
900068d0:	fa02 f303 	lsl.w	r3, r2, r3
900068d4:	43da      	mvns	r2, r3
900068d6:	4b1e      	ldr	r3, [pc, #120]	; (90006950 <xTaskPriorityInherit+0xe8>)
900068d8:	681b      	ldr	r3, [r3, #0]
900068da:	4013      	ands	r3, r2
900068dc:	4a1c      	ldr	r2, [pc, #112]	; (90006950 <xTaskPriorityInherit+0xe8>)
900068de:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
900068e0:	4b19      	ldr	r3, [pc, #100]	; (90006948 <xTaskPriorityInherit+0xe0>)
900068e2:	681b      	ldr	r3, [r3, #0]
900068e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
900068e6:	68bb      	ldr	r3, [r7, #8]
900068e8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
900068ea:	68bb      	ldr	r3, [r7, #8]
900068ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900068ee:	2201      	movs	r2, #1
900068f0:	409a      	lsls	r2, r3
900068f2:	4b17      	ldr	r3, [pc, #92]	; (90006950 <xTaskPriorityInherit+0xe8>)
900068f4:	681b      	ldr	r3, [r3, #0]
900068f6:	4313      	orrs	r3, r2
900068f8:	4a15      	ldr	r2, [pc, #84]	; (90006950 <xTaskPriorityInherit+0xe8>)
900068fa:	6013      	str	r3, [r2, #0]
900068fc:	68bb      	ldr	r3, [r7, #8]
900068fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
90006900:	4613      	mov	r3, r2
90006902:	009b      	lsls	r3, r3, #2
90006904:	4413      	add	r3, r2
90006906:	009b      	lsls	r3, r3, #2
90006908:	4a10      	ldr	r2, [pc, #64]	; (9000694c <xTaskPriorityInherit+0xe4>)
9000690a:	441a      	add	r2, r3
9000690c:	68bb      	ldr	r3, [r7, #8]
9000690e:	3304      	adds	r3, #4
90006910:	4619      	mov	r1, r3
90006912:	4610      	mov	r0, r2
90006914:	f7fe f9b1 	bl	90004c7a <vListInsertEnd>
90006918:	e004      	b.n	90006924 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
9000691a:	4b0b      	ldr	r3, [pc, #44]	; (90006948 <xTaskPriorityInherit+0xe0>)
9000691c:	681b      	ldr	r3, [r3, #0]
9000691e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
90006920:	68bb      	ldr	r3, [r7, #8]
90006922:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
90006924:	2301      	movs	r3, #1
90006926:	60fb      	str	r3, [r7, #12]
90006928:	e008      	b.n	9000693c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
9000692a:	68bb      	ldr	r3, [r7, #8]
9000692c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
9000692e:	4b06      	ldr	r3, [pc, #24]	; (90006948 <xTaskPriorityInherit+0xe0>)
90006930:	681b      	ldr	r3, [r3, #0]
90006932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90006934:	429a      	cmp	r2, r3
90006936:	d201      	bcs.n	9000693c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
90006938:	2301      	movs	r3, #1
9000693a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
9000693c:	68fb      	ldr	r3, [r7, #12]
	}
9000693e:	4618      	mov	r0, r3
90006940:	3710      	adds	r7, #16
90006942:	46bd      	mov	sp, r7
90006944:	bd80      	pop	{r7, pc}
90006946:	bf00      	nop
90006948:	24009d7c 	.word	0x24009d7c
9000694c:	24009d80 	.word	0x24009d80
90006950:	24009e84 	.word	0x24009e84

90006954 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
90006954:	b580      	push	{r7, lr}
90006956:	b086      	sub	sp, #24
90006958:	af00      	add	r7, sp, #0
9000695a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
9000695c:	687b      	ldr	r3, [r7, #4]
9000695e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
90006960:	2300      	movs	r3, #0
90006962:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
90006964:	687b      	ldr	r3, [r7, #4]
90006966:	2b00      	cmp	r3, #0
90006968:	d06e      	beq.n	90006a48 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
9000696a:	4b3a      	ldr	r3, [pc, #232]	; (90006a54 <xTaskPriorityDisinherit+0x100>)
9000696c:	681b      	ldr	r3, [r3, #0]
9000696e:	693a      	ldr	r2, [r7, #16]
90006970:	429a      	cmp	r2, r3
90006972:	d00a      	beq.n	9000698a <xTaskPriorityDisinherit+0x36>
	__asm volatile
90006974:	f04f 0350 	mov.w	r3, #80	; 0x50
90006978:	f383 8811 	msr	BASEPRI, r3
9000697c:	f3bf 8f6f 	isb	sy
90006980:	f3bf 8f4f 	dsb	sy
90006984:	60fb      	str	r3, [r7, #12]
}
90006986:	bf00      	nop
90006988:	e7fe      	b.n	90006988 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
9000698a:	693b      	ldr	r3, [r7, #16]
9000698c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
9000698e:	2b00      	cmp	r3, #0
90006990:	d10a      	bne.n	900069a8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
90006992:	f04f 0350 	mov.w	r3, #80	; 0x50
90006996:	f383 8811 	msr	BASEPRI, r3
9000699a:	f3bf 8f6f 	isb	sy
9000699e:	f3bf 8f4f 	dsb	sy
900069a2:	60bb      	str	r3, [r7, #8]
}
900069a4:	bf00      	nop
900069a6:	e7fe      	b.n	900069a6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
900069a8:	693b      	ldr	r3, [r7, #16]
900069aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
900069ac:	1e5a      	subs	r2, r3, #1
900069ae:	693b      	ldr	r3, [r7, #16]
900069b0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
900069b2:	693b      	ldr	r3, [r7, #16]
900069b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
900069b6:	693b      	ldr	r3, [r7, #16]
900069b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
900069ba:	429a      	cmp	r2, r3
900069bc:	d044      	beq.n	90006a48 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
900069be:	693b      	ldr	r3, [r7, #16]
900069c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
900069c2:	2b00      	cmp	r3, #0
900069c4:	d140      	bne.n	90006a48 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
900069c6:	693b      	ldr	r3, [r7, #16]
900069c8:	3304      	adds	r3, #4
900069ca:	4618      	mov	r0, r3
900069cc:	f7fe f9b2 	bl	90004d34 <uxListRemove>
900069d0:	4603      	mov	r3, r0
900069d2:	2b00      	cmp	r3, #0
900069d4:	d115      	bne.n	90006a02 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
900069d6:	693b      	ldr	r3, [r7, #16]
900069d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
900069da:	491f      	ldr	r1, [pc, #124]	; (90006a58 <xTaskPriorityDisinherit+0x104>)
900069dc:	4613      	mov	r3, r2
900069de:	009b      	lsls	r3, r3, #2
900069e0:	4413      	add	r3, r2
900069e2:	009b      	lsls	r3, r3, #2
900069e4:	440b      	add	r3, r1
900069e6:	681b      	ldr	r3, [r3, #0]
900069e8:	2b00      	cmp	r3, #0
900069ea:	d10a      	bne.n	90006a02 <xTaskPriorityDisinherit+0xae>
900069ec:	693b      	ldr	r3, [r7, #16]
900069ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900069f0:	2201      	movs	r2, #1
900069f2:	fa02 f303 	lsl.w	r3, r2, r3
900069f6:	43da      	mvns	r2, r3
900069f8:	4b18      	ldr	r3, [pc, #96]	; (90006a5c <xTaskPriorityDisinherit+0x108>)
900069fa:	681b      	ldr	r3, [r3, #0]
900069fc:	4013      	ands	r3, r2
900069fe:	4a17      	ldr	r2, [pc, #92]	; (90006a5c <xTaskPriorityDisinherit+0x108>)
90006a00:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
90006a02:	693b      	ldr	r3, [r7, #16]
90006a04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
90006a06:	693b      	ldr	r3, [r7, #16]
90006a08:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
90006a0a:	693b      	ldr	r3, [r7, #16]
90006a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90006a0e:	f1c3 0207 	rsb	r2, r3, #7
90006a12:	693b      	ldr	r3, [r7, #16]
90006a14:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
90006a16:	693b      	ldr	r3, [r7, #16]
90006a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90006a1a:	2201      	movs	r2, #1
90006a1c:	409a      	lsls	r2, r3
90006a1e:	4b0f      	ldr	r3, [pc, #60]	; (90006a5c <xTaskPriorityDisinherit+0x108>)
90006a20:	681b      	ldr	r3, [r3, #0]
90006a22:	4313      	orrs	r3, r2
90006a24:	4a0d      	ldr	r2, [pc, #52]	; (90006a5c <xTaskPriorityDisinherit+0x108>)
90006a26:	6013      	str	r3, [r2, #0]
90006a28:	693b      	ldr	r3, [r7, #16]
90006a2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
90006a2c:	4613      	mov	r3, r2
90006a2e:	009b      	lsls	r3, r3, #2
90006a30:	4413      	add	r3, r2
90006a32:	009b      	lsls	r3, r3, #2
90006a34:	4a08      	ldr	r2, [pc, #32]	; (90006a58 <xTaskPriorityDisinherit+0x104>)
90006a36:	441a      	add	r2, r3
90006a38:	693b      	ldr	r3, [r7, #16]
90006a3a:	3304      	adds	r3, #4
90006a3c:	4619      	mov	r1, r3
90006a3e:	4610      	mov	r0, r2
90006a40:	f7fe f91b 	bl	90004c7a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
90006a44:	2301      	movs	r3, #1
90006a46:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
90006a48:	697b      	ldr	r3, [r7, #20]
	}
90006a4a:	4618      	mov	r0, r3
90006a4c:	3718      	adds	r7, #24
90006a4e:	46bd      	mov	sp, r7
90006a50:	bd80      	pop	{r7, pc}
90006a52:	bf00      	nop
90006a54:	24009d7c 	.word	0x24009d7c
90006a58:	24009d80 	.word	0x24009d80
90006a5c:	24009e84 	.word	0x24009e84

90006a60 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
90006a60:	b580      	push	{r7, lr}
90006a62:	b088      	sub	sp, #32
90006a64:	af00      	add	r7, sp, #0
90006a66:	6078      	str	r0, [r7, #4]
90006a68:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
90006a6a:	687b      	ldr	r3, [r7, #4]
90006a6c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
90006a6e:	2301      	movs	r3, #1
90006a70:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
90006a72:	687b      	ldr	r3, [r7, #4]
90006a74:	2b00      	cmp	r3, #0
90006a76:	d077      	beq.n	90006b68 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
90006a78:	69bb      	ldr	r3, [r7, #24]
90006a7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
90006a7c:	2b00      	cmp	r3, #0
90006a7e:	d10a      	bne.n	90006a96 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
90006a80:	f04f 0350 	mov.w	r3, #80	; 0x50
90006a84:	f383 8811 	msr	BASEPRI, r3
90006a88:	f3bf 8f6f 	isb	sy
90006a8c:	f3bf 8f4f 	dsb	sy
90006a90:	60fb      	str	r3, [r7, #12]
}
90006a92:	bf00      	nop
90006a94:	e7fe      	b.n	90006a94 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
90006a96:	69bb      	ldr	r3, [r7, #24]
90006a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90006a9a:	683a      	ldr	r2, [r7, #0]
90006a9c:	429a      	cmp	r2, r3
90006a9e:	d902      	bls.n	90006aa6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
90006aa0:	683b      	ldr	r3, [r7, #0]
90006aa2:	61fb      	str	r3, [r7, #28]
90006aa4:	e002      	b.n	90006aac <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
90006aa6:	69bb      	ldr	r3, [r7, #24]
90006aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90006aaa:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
90006aac:	69bb      	ldr	r3, [r7, #24]
90006aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90006ab0:	69fa      	ldr	r2, [r7, #28]
90006ab2:	429a      	cmp	r2, r3
90006ab4:	d058      	beq.n	90006b68 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
90006ab6:	69bb      	ldr	r3, [r7, #24]
90006ab8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
90006aba:	697a      	ldr	r2, [r7, #20]
90006abc:	429a      	cmp	r2, r3
90006abe:	d153      	bne.n	90006b68 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
90006ac0:	4b2b      	ldr	r3, [pc, #172]	; (90006b70 <vTaskPriorityDisinheritAfterTimeout+0x110>)
90006ac2:	681b      	ldr	r3, [r3, #0]
90006ac4:	69ba      	ldr	r2, [r7, #24]
90006ac6:	429a      	cmp	r2, r3
90006ac8:	d10a      	bne.n	90006ae0 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
90006aca:	f04f 0350 	mov.w	r3, #80	; 0x50
90006ace:	f383 8811 	msr	BASEPRI, r3
90006ad2:	f3bf 8f6f 	isb	sy
90006ad6:	f3bf 8f4f 	dsb	sy
90006ada:	60bb      	str	r3, [r7, #8]
}
90006adc:	bf00      	nop
90006ade:	e7fe      	b.n	90006ade <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
90006ae0:	69bb      	ldr	r3, [r7, #24]
90006ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90006ae4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
90006ae6:	69bb      	ldr	r3, [r7, #24]
90006ae8:	69fa      	ldr	r2, [r7, #28]
90006aea:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
90006aec:	69bb      	ldr	r3, [r7, #24]
90006aee:	699b      	ldr	r3, [r3, #24]
90006af0:	2b00      	cmp	r3, #0
90006af2:	db04      	blt.n	90006afe <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
90006af4:	69fb      	ldr	r3, [r7, #28]
90006af6:	f1c3 0207 	rsb	r2, r3, #7
90006afa:	69bb      	ldr	r3, [r7, #24]
90006afc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
90006afe:	69bb      	ldr	r3, [r7, #24]
90006b00:	6959      	ldr	r1, [r3, #20]
90006b02:	693a      	ldr	r2, [r7, #16]
90006b04:	4613      	mov	r3, r2
90006b06:	009b      	lsls	r3, r3, #2
90006b08:	4413      	add	r3, r2
90006b0a:	009b      	lsls	r3, r3, #2
90006b0c:	4a19      	ldr	r2, [pc, #100]	; (90006b74 <vTaskPriorityDisinheritAfterTimeout+0x114>)
90006b0e:	4413      	add	r3, r2
90006b10:	4299      	cmp	r1, r3
90006b12:	d129      	bne.n	90006b68 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
90006b14:	69bb      	ldr	r3, [r7, #24]
90006b16:	3304      	adds	r3, #4
90006b18:	4618      	mov	r0, r3
90006b1a:	f7fe f90b 	bl	90004d34 <uxListRemove>
90006b1e:	4603      	mov	r3, r0
90006b20:	2b00      	cmp	r3, #0
90006b22:	d10a      	bne.n	90006b3a <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
90006b24:	69bb      	ldr	r3, [r7, #24]
90006b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90006b28:	2201      	movs	r2, #1
90006b2a:	fa02 f303 	lsl.w	r3, r2, r3
90006b2e:	43da      	mvns	r2, r3
90006b30:	4b11      	ldr	r3, [pc, #68]	; (90006b78 <vTaskPriorityDisinheritAfterTimeout+0x118>)
90006b32:	681b      	ldr	r3, [r3, #0]
90006b34:	4013      	ands	r3, r2
90006b36:	4a10      	ldr	r2, [pc, #64]	; (90006b78 <vTaskPriorityDisinheritAfterTimeout+0x118>)
90006b38:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
90006b3a:	69bb      	ldr	r3, [r7, #24]
90006b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90006b3e:	2201      	movs	r2, #1
90006b40:	409a      	lsls	r2, r3
90006b42:	4b0d      	ldr	r3, [pc, #52]	; (90006b78 <vTaskPriorityDisinheritAfterTimeout+0x118>)
90006b44:	681b      	ldr	r3, [r3, #0]
90006b46:	4313      	orrs	r3, r2
90006b48:	4a0b      	ldr	r2, [pc, #44]	; (90006b78 <vTaskPriorityDisinheritAfterTimeout+0x118>)
90006b4a:	6013      	str	r3, [r2, #0]
90006b4c:	69bb      	ldr	r3, [r7, #24]
90006b4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
90006b50:	4613      	mov	r3, r2
90006b52:	009b      	lsls	r3, r3, #2
90006b54:	4413      	add	r3, r2
90006b56:	009b      	lsls	r3, r3, #2
90006b58:	4a06      	ldr	r2, [pc, #24]	; (90006b74 <vTaskPriorityDisinheritAfterTimeout+0x114>)
90006b5a:	441a      	add	r2, r3
90006b5c:	69bb      	ldr	r3, [r7, #24]
90006b5e:	3304      	adds	r3, #4
90006b60:	4619      	mov	r1, r3
90006b62:	4610      	mov	r0, r2
90006b64:	f7fe f889 	bl	90004c7a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
90006b68:	bf00      	nop
90006b6a:	3720      	adds	r7, #32
90006b6c:	46bd      	mov	sp, r7
90006b6e:	bd80      	pop	{r7, pc}
90006b70:	24009d7c 	.word	0x24009d7c
90006b74:	24009d80 	.word	0x24009d80
90006b78:	24009e84 	.word	0x24009e84

90006b7c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
90006b7c:	b480      	push	{r7}
90006b7e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
90006b80:	4b07      	ldr	r3, [pc, #28]	; (90006ba0 <pvTaskIncrementMutexHeldCount+0x24>)
90006b82:	681b      	ldr	r3, [r3, #0]
90006b84:	2b00      	cmp	r3, #0
90006b86:	d004      	beq.n	90006b92 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
90006b88:	4b05      	ldr	r3, [pc, #20]	; (90006ba0 <pvTaskIncrementMutexHeldCount+0x24>)
90006b8a:	681b      	ldr	r3, [r3, #0]
90006b8c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
90006b8e:	3201      	adds	r2, #1
90006b90:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
90006b92:	4b03      	ldr	r3, [pc, #12]	; (90006ba0 <pvTaskIncrementMutexHeldCount+0x24>)
90006b94:	681b      	ldr	r3, [r3, #0]
	}
90006b96:	4618      	mov	r0, r3
90006b98:	46bd      	mov	sp, r7
90006b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
90006b9e:	4770      	bx	lr
90006ba0:	24009d7c 	.word	0x24009d7c

90006ba4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
90006ba4:	b580      	push	{r7, lr}
90006ba6:	b084      	sub	sp, #16
90006ba8:	af00      	add	r7, sp, #0
90006baa:	6078      	str	r0, [r7, #4]
90006bac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
90006bae:	4b29      	ldr	r3, [pc, #164]	; (90006c54 <prvAddCurrentTaskToDelayedList+0xb0>)
90006bb0:	681b      	ldr	r3, [r3, #0]
90006bb2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
90006bb4:	4b28      	ldr	r3, [pc, #160]	; (90006c58 <prvAddCurrentTaskToDelayedList+0xb4>)
90006bb6:	681b      	ldr	r3, [r3, #0]
90006bb8:	3304      	adds	r3, #4
90006bba:	4618      	mov	r0, r3
90006bbc:	f7fe f8ba 	bl	90004d34 <uxListRemove>
90006bc0:	4603      	mov	r3, r0
90006bc2:	2b00      	cmp	r3, #0
90006bc4:	d10b      	bne.n	90006bde <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
90006bc6:	4b24      	ldr	r3, [pc, #144]	; (90006c58 <prvAddCurrentTaskToDelayedList+0xb4>)
90006bc8:	681b      	ldr	r3, [r3, #0]
90006bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90006bcc:	2201      	movs	r2, #1
90006bce:	fa02 f303 	lsl.w	r3, r2, r3
90006bd2:	43da      	mvns	r2, r3
90006bd4:	4b21      	ldr	r3, [pc, #132]	; (90006c5c <prvAddCurrentTaskToDelayedList+0xb8>)
90006bd6:	681b      	ldr	r3, [r3, #0]
90006bd8:	4013      	ands	r3, r2
90006bda:	4a20      	ldr	r2, [pc, #128]	; (90006c5c <prvAddCurrentTaskToDelayedList+0xb8>)
90006bdc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
90006bde:	687b      	ldr	r3, [r7, #4]
90006be0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
90006be4:	d10a      	bne.n	90006bfc <prvAddCurrentTaskToDelayedList+0x58>
90006be6:	683b      	ldr	r3, [r7, #0]
90006be8:	2b00      	cmp	r3, #0
90006bea:	d007      	beq.n	90006bfc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
90006bec:	4b1a      	ldr	r3, [pc, #104]	; (90006c58 <prvAddCurrentTaskToDelayedList+0xb4>)
90006bee:	681b      	ldr	r3, [r3, #0]
90006bf0:	3304      	adds	r3, #4
90006bf2:	4619      	mov	r1, r3
90006bf4:	481a      	ldr	r0, [pc, #104]	; (90006c60 <prvAddCurrentTaskToDelayedList+0xbc>)
90006bf6:	f7fe f840 	bl	90004c7a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
90006bfa:	e026      	b.n	90006c4a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
90006bfc:	68fa      	ldr	r2, [r7, #12]
90006bfe:	687b      	ldr	r3, [r7, #4]
90006c00:	4413      	add	r3, r2
90006c02:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
90006c04:	4b14      	ldr	r3, [pc, #80]	; (90006c58 <prvAddCurrentTaskToDelayedList+0xb4>)
90006c06:	681b      	ldr	r3, [r3, #0]
90006c08:	68ba      	ldr	r2, [r7, #8]
90006c0a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
90006c0c:	68ba      	ldr	r2, [r7, #8]
90006c0e:	68fb      	ldr	r3, [r7, #12]
90006c10:	429a      	cmp	r2, r3
90006c12:	d209      	bcs.n	90006c28 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
90006c14:	4b13      	ldr	r3, [pc, #76]	; (90006c64 <prvAddCurrentTaskToDelayedList+0xc0>)
90006c16:	681a      	ldr	r2, [r3, #0]
90006c18:	4b0f      	ldr	r3, [pc, #60]	; (90006c58 <prvAddCurrentTaskToDelayedList+0xb4>)
90006c1a:	681b      	ldr	r3, [r3, #0]
90006c1c:	3304      	adds	r3, #4
90006c1e:	4619      	mov	r1, r3
90006c20:	4610      	mov	r0, r2
90006c22:	f7fe f84e 	bl	90004cc2 <vListInsert>
}
90006c26:	e010      	b.n	90006c4a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
90006c28:	4b0f      	ldr	r3, [pc, #60]	; (90006c68 <prvAddCurrentTaskToDelayedList+0xc4>)
90006c2a:	681a      	ldr	r2, [r3, #0]
90006c2c:	4b0a      	ldr	r3, [pc, #40]	; (90006c58 <prvAddCurrentTaskToDelayedList+0xb4>)
90006c2e:	681b      	ldr	r3, [r3, #0]
90006c30:	3304      	adds	r3, #4
90006c32:	4619      	mov	r1, r3
90006c34:	4610      	mov	r0, r2
90006c36:	f7fe f844 	bl	90004cc2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
90006c3a:	4b0c      	ldr	r3, [pc, #48]	; (90006c6c <prvAddCurrentTaskToDelayedList+0xc8>)
90006c3c:	681b      	ldr	r3, [r3, #0]
90006c3e:	68ba      	ldr	r2, [r7, #8]
90006c40:	429a      	cmp	r2, r3
90006c42:	d202      	bcs.n	90006c4a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
90006c44:	4a09      	ldr	r2, [pc, #36]	; (90006c6c <prvAddCurrentTaskToDelayedList+0xc8>)
90006c46:	68bb      	ldr	r3, [r7, #8]
90006c48:	6013      	str	r3, [r2, #0]
}
90006c4a:	bf00      	nop
90006c4c:	3710      	adds	r7, #16
90006c4e:	46bd      	mov	sp, r7
90006c50:	bd80      	pop	{r7, pc}
90006c52:	bf00      	nop
90006c54:	24009e80 	.word	0x24009e80
90006c58:	24009d7c 	.word	0x24009d7c
90006c5c:	24009e84 	.word	0x24009e84
90006c60:	24009e68 	.word	0x24009e68
90006c64:	24009e38 	.word	0x24009e38
90006c68:	24009e34 	.word	0x24009e34
90006c6c:	24009e9c 	.word	0x24009e9c

90006c70 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
90006c70:	b480      	push	{r7}
90006c72:	b085      	sub	sp, #20
90006c74:	af00      	add	r7, sp, #0
90006c76:	60f8      	str	r0, [r7, #12]
90006c78:	60b9      	str	r1, [r7, #8]
90006c7a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
90006c7c:	68fb      	ldr	r3, [r7, #12]
90006c7e:	3b04      	subs	r3, #4
90006c80:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
90006c82:	68fb      	ldr	r3, [r7, #12]
90006c84:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
90006c88:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
90006c8a:	68fb      	ldr	r3, [r7, #12]
90006c8c:	3b04      	subs	r3, #4
90006c8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
90006c90:	68bb      	ldr	r3, [r7, #8]
90006c92:	f023 0201 	bic.w	r2, r3, #1
90006c96:	68fb      	ldr	r3, [r7, #12]
90006c98:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
90006c9a:	68fb      	ldr	r3, [r7, #12]
90006c9c:	3b04      	subs	r3, #4
90006c9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
90006ca0:	4a0c      	ldr	r2, [pc, #48]	; (90006cd4 <pxPortInitialiseStack+0x64>)
90006ca2:	68fb      	ldr	r3, [r7, #12]
90006ca4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
90006ca6:	68fb      	ldr	r3, [r7, #12]
90006ca8:	3b14      	subs	r3, #20
90006caa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
90006cac:	687a      	ldr	r2, [r7, #4]
90006cae:	68fb      	ldr	r3, [r7, #12]
90006cb0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
90006cb2:	68fb      	ldr	r3, [r7, #12]
90006cb4:	3b04      	subs	r3, #4
90006cb6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
90006cb8:	68fb      	ldr	r3, [r7, #12]
90006cba:	f06f 0202 	mvn.w	r2, #2
90006cbe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
90006cc0:	68fb      	ldr	r3, [r7, #12]
90006cc2:	3b20      	subs	r3, #32
90006cc4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
90006cc6:	68fb      	ldr	r3, [r7, #12]
}
90006cc8:	4618      	mov	r0, r3
90006cca:	3714      	adds	r7, #20
90006ccc:	46bd      	mov	sp, r7
90006cce:	f85d 7b04 	ldr.w	r7, [sp], #4
90006cd2:	4770      	bx	lr
90006cd4:	90006cd9 	.word	0x90006cd9

90006cd8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
90006cd8:	b480      	push	{r7}
90006cda:	b085      	sub	sp, #20
90006cdc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
90006cde:	2300      	movs	r3, #0
90006ce0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
90006ce2:	4b12      	ldr	r3, [pc, #72]	; (90006d2c <prvTaskExitError+0x54>)
90006ce4:	681b      	ldr	r3, [r3, #0]
90006ce6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
90006cea:	d00a      	beq.n	90006d02 <prvTaskExitError+0x2a>
	__asm volatile
90006cec:	f04f 0350 	mov.w	r3, #80	; 0x50
90006cf0:	f383 8811 	msr	BASEPRI, r3
90006cf4:	f3bf 8f6f 	isb	sy
90006cf8:	f3bf 8f4f 	dsb	sy
90006cfc:	60fb      	str	r3, [r7, #12]
}
90006cfe:	bf00      	nop
90006d00:	e7fe      	b.n	90006d00 <prvTaskExitError+0x28>
	__asm volatile
90006d02:	f04f 0350 	mov.w	r3, #80	; 0x50
90006d06:	f383 8811 	msr	BASEPRI, r3
90006d0a:	f3bf 8f6f 	isb	sy
90006d0e:	f3bf 8f4f 	dsb	sy
90006d12:	60bb      	str	r3, [r7, #8]
}
90006d14:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
90006d16:	bf00      	nop
90006d18:	687b      	ldr	r3, [r7, #4]
90006d1a:	2b00      	cmp	r3, #0
90006d1c:	d0fc      	beq.n	90006d18 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
90006d1e:	bf00      	nop
90006d20:	bf00      	nop
90006d22:	3714      	adds	r7, #20
90006d24:	46bd      	mov	sp, r7
90006d26:	f85d 7b04 	ldr.w	r7, [sp], #4
90006d2a:	4770      	bx	lr
90006d2c:	24000024 	.word	0x24000024

90006d30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
90006d30:	4b07      	ldr	r3, [pc, #28]	; (90006d50 <pxCurrentTCBConst2>)
90006d32:	6819      	ldr	r1, [r3, #0]
90006d34:	6808      	ldr	r0, [r1, #0]
90006d36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90006d3a:	f380 8809 	msr	PSP, r0
90006d3e:	f3bf 8f6f 	isb	sy
90006d42:	f04f 0000 	mov.w	r0, #0
90006d46:	f380 8811 	msr	BASEPRI, r0
90006d4a:	4770      	bx	lr
90006d4c:	f3af 8000 	nop.w

90006d50 <pxCurrentTCBConst2>:
90006d50:	24009d7c 	.word	0x24009d7c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
90006d54:	bf00      	nop
90006d56:	bf00      	nop

90006d58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
90006d58:	4808      	ldr	r0, [pc, #32]	; (90006d7c <prvPortStartFirstTask+0x24>)
90006d5a:	6800      	ldr	r0, [r0, #0]
90006d5c:	6800      	ldr	r0, [r0, #0]
90006d5e:	f380 8808 	msr	MSP, r0
90006d62:	f04f 0000 	mov.w	r0, #0
90006d66:	f380 8814 	msr	CONTROL, r0
90006d6a:	b662      	cpsie	i
90006d6c:	b661      	cpsie	f
90006d6e:	f3bf 8f4f 	dsb	sy
90006d72:	f3bf 8f6f 	isb	sy
90006d76:	df00      	svc	0
90006d78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
90006d7a:	bf00      	nop
90006d7c:	e000ed08 	.word	0xe000ed08

90006d80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
90006d80:	b580      	push	{r7, lr}
90006d82:	b086      	sub	sp, #24
90006d84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
90006d86:	4b46      	ldr	r3, [pc, #280]	; (90006ea0 <xPortStartScheduler+0x120>)
90006d88:	681b      	ldr	r3, [r3, #0]
90006d8a:	4a46      	ldr	r2, [pc, #280]	; (90006ea4 <xPortStartScheduler+0x124>)
90006d8c:	4293      	cmp	r3, r2
90006d8e:	d10a      	bne.n	90006da6 <xPortStartScheduler+0x26>
	__asm volatile
90006d90:	f04f 0350 	mov.w	r3, #80	; 0x50
90006d94:	f383 8811 	msr	BASEPRI, r3
90006d98:	f3bf 8f6f 	isb	sy
90006d9c:	f3bf 8f4f 	dsb	sy
90006da0:	613b      	str	r3, [r7, #16]
}
90006da2:	bf00      	nop
90006da4:	e7fe      	b.n	90006da4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
90006da6:	4b3e      	ldr	r3, [pc, #248]	; (90006ea0 <xPortStartScheduler+0x120>)
90006da8:	681b      	ldr	r3, [r3, #0]
90006daa:	4a3f      	ldr	r2, [pc, #252]	; (90006ea8 <xPortStartScheduler+0x128>)
90006dac:	4293      	cmp	r3, r2
90006dae:	d10a      	bne.n	90006dc6 <xPortStartScheduler+0x46>
	__asm volatile
90006db0:	f04f 0350 	mov.w	r3, #80	; 0x50
90006db4:	f383 8811 	msr	BASEPRI, r3
90006db8:	f3bf 8f6f 	isb	sy
90006dbc:	f3bf 8f4f 	dsb	sy
90006dc0:	60fb      	str	r3, [r7, #12]
}
90006dc2:	bf00      	nop
90006dc4:	e7fe      	b.n	90006dc4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
90006dc6:	4b39      	ldr	r3, [pc, #228]	; (90006eac <xPortStartScheduler+0x12c>)
90006dc8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
90006dca:	697b      	ldr	r3, [r7, #20]
90006dcc:	781b      	ldrb	r3, [r3, #0]
90006dce:	b2db      	uxtb	r3, r3
90006dd0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
90006dd2:	697b      	ldr	r3, [r7, #20]
90006dd4:	22ff      	movs	r2, #255	; 0xff
90006dd6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
90006dd8:	697b      	ldr	r3, [r7, #20]
90006dda:	781b      	ldrb	r3, [r3, #0]
90006ddc:	b2db      	uxtb	r3, r3
90006dde:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
90006de0:	78fb      	ldrb	r3, [r7, #3]
90006de2:	b2db      	uxtb	r3, r3
90006de4:	f003 0350 	and.w	r3, r3, #80	; 0x50
90006de8:	b2da      	uxtb	r2, r3
90006dea:	4b31      	ldr	r3, [pc, #196]	; (90006eb0 <xPortStartScheduler+0x130>)
90006dec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
90006dee:	4b31      	ldr	r3, [pc, #196]	; (90006eb4 <xPortStartScheduler+0x134>)
90006df0:	2207      	movs	r2, #7
90006df2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
90006df4:	e009      	b.n	90006e0a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
90006df6:	4b2f      	ldr	r3, [pc, #188]	; (90006eb4 <xPortStartScheduler+0x134>)
90006df8:	681b      	ldr	r3, [r3, #0]
90006dfa:	3b01      	subs	r3, #1
90006dfc:	4a2d      	ldr	r2, [pc, #180]	; (90006eb4 <xPortStartScheduler+0x134>)
90006dfe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
90006e00:	78fb      	ldrb	r3, [r7, #3]
90006e02:	b2db      	uxtb	r3, r3
90006e04:	005b      	lsls	r3, r3, #1
90006e06:	b2db      	uxtb	r3, r3
90006e08:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
90006e0a:	78fb      	ldrb	r3, [r7, #3]
90006e0c:	b2db      	uxtb	r3, r3
90006e0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
90006e12:	2b80      	cmp	r3, #128	; 0x80
90006e14:	d0ef      	beq.n	90006df6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
90006e16:	4b27      	ldr	r3, [pc, #156]	; (90006eb4 <xPortStartScheduler+0x134>)
90006e18:	681b      	ldr	r3, [r3, #0]
90006e1a:	f1c3 0307 	rsb	r3, r3, #7
90006e1e:	2b04      	cmp	r3, #4
90006e20:	d00a      	beq.n	90006e38 <xPortStartScheduler+0xb8>
	__asm volatile
90006e22:	f04f 0350 	mov.w	r3, #80	; 0x50
90006e26:	f383 8811 	msr	BASEPRI, r3
90006e2a:	f3bf 8f6f 	isb	sy
90006e2e:	f3bf 8f4f 	dsb	sy
90006e32:	60bb      	str	r3, [r7, #8]
}
90006e34:	bf00      	nop
90006e36:	e7fe      	b.n	90006e36 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
90006e38:	4b1e      	ldr	r3, [pc, #120]	; (90006eb4 <xPortStartScheduler+0x134>)
90006e3a:	681b      	ldr	r3, [r3, #0]
90006e3c:	021b      	lsls	r3, r3, #8
90006e3e:	4a1d      	ldr	r2, [pc, #116]	; (90006eb4 <xPortStartScheduler+0x134>)
90006e40:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
90006e42:	4b1c      	ldr	r3, [pc, #112]	; (90006eb4 <xPortStartScheduler+0x134>)
90006e44:	681b      	ldr	r3, [r3, #0]
90006e46:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
90006e4a:	4a1a      	ldr	r2, [pc, #104]	; (90006eb4 <xPortStartScheduler+0x134>)
90006e4c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
90006e4e:	687b      	ldr	r3, [r7, #4]
90006e50:	b2da      	uxtb	r2, r3
90006e52:	697b      	ldr	r3, [r7, #20]
90006e54:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
90006e56:	4b18      	ldr	r3, [pc, #96]	; (90006eb8 <xPortStartScheduler+0x138>)
90006e58:	681b      	ldr	r3, [r3, #0]
90006e5a:	4a17      	ldr	r2, [pc, #92]	; (90006eb8 <xPortStartScheduler+0x138>)
90006e5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
90006e60:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
90006e62:	4b15      	ldr	r3, [pc, #84]	; (90006eb8 <xPortStartScheduler+0x138>)
90006e64:	681b      	ldr	r3, [r3, #0]
90006e66:	4a14      	ldr	r2, [pc, #80]	; (90006eb8 <xPortStartScheduler+0x138>)
90006e68:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
90006e6c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
90006e6e:	f000 f8dd 	bl	9000702c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
90006e72:	4b12      	ldr	r3, [pc, #72]	; (90006ebc <xPortStartScheduler+0x13c>)
90006e74:	2200      	movs	r2, #0
90006e76:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
90006e78:	f000 f8fc 	bl	90007074 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
90006e7c:	4b10      	ldr	r3, [pc, #64]	; (90006ec0 <xPortStartScheduler+0x140>)
90006e7e:	681b      	ldr	r3, [r3, #0]
90006e80:	4a0f      	ldr	r2, [pc, #60]	; (90006ec0 <xPortStartScheduler+0x140>)
90006e82:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
90006e86:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
90006e88:	f7ff ff66 	bl	90006d58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
90006e8c:	f7ff fa88 	bl	900063a0 <vTaskSwitchContext>
	prvTaskExitError();
90006e90:	f7ff ff22 	bl	90006cd8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
90006e94:	2300      	movs	r3, #0
}
90006e96:	4618      	mov	r0, r3
90006e98:	3718      	adds	r7, #24
90006e9a:	46bd      	mov	sp, r7
90006e9c:	bd80      	pop	{r7, pc}
90006e9e:	bf00      	nop
90006ea0:	e000ed00 	.word	0xe000ed00
90006ea4:	410fc271 	.word	0x410fc271
90006ea8:	410fc270 	.word	0x410fc270
90006eac:	e000e400 	.word	0xe000e400
90006eb0:	24009ea8 	.word	0x24009ea8
90006eb4:	24009eac 	.word	0x24009eac
90006eb8:	e000ed20 	.word	0xe000ed20
90006ebc:	24000024 	.word	0x24000024
90006ec0:	e000ef34 	.word	0xe000ef34

90006ec4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
90006ec4:	b480      	push	{r7}
90006ec6:	b083      	sub	sp, #12
90006ec8:	af00      	add	r7, sp, #0
	__asm volatile
90006eca:	f04f 0350 	mov.w	r3, #80	; 0x50
90006ece:	f383 8811 	msr	BASEPRI, r3
90006ed2:	f3bf 8f6f 	isb	sy
90006ed6:	f3bf 8f4f 	dsb	sy
90006eda:	607b      	str	r3, [r7, #4]
}
90006edc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
90006ede:	4b0f      	ldr	r3, [pc, #60]	; (90006f1c <vPortEnterCritical+0x58>)
90006ee0:	681b      	ldr	r3, [r3, #0]
90006ee2:	3301      	adds	r3, #1
90006ee4:	4a0d      	ldr	r2, [pc, #52]	; (90006f1c <vPortEnterCritical+0x58>)
90006ee6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
90006ee8:	4b0c      	ldr	r3, [pc, #48]	; (90006f1c <vPortEnterCritical+0x58>)
90006eea:	681b      	ldr	r3, [r3, #0]
90006eec:	2b01      	cmp	r3, #1
90006eee:	d10f      	bne.n	90006f10 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
90006ef0:	4b0b      	ldr	r3, [pc, #44]	; (90006f20 <vPortEnterCritical+0x5c>)
90006ef2:	681b      	ldr	r3, [r3, #0]
90006ef4:	b2db      	uxtb	r3, r3
90006ef6:	2b00      	cmp	r3, #0
90006ef8:	d00a      	beq.n	90006f10 <vPortEnterCritical+0x4c>
	__asm volatile
90006efa:	f04f 0350 	mov.w	r3, #80	; 0x50
90006efe:	f383 8811 	msr	BASEPRI, r3
90006f02:	f3bf 8f6f 	isb	sy
90006f06:	f3bf 8f4f 	dsb	sy
90006f0a:	603b      	str	r3, [r7, #0]
}
90006f0c:	bf00      	nop
90006f0e:	e7fe      	b.n	90006f0e <vPortEnterCritical+0x4a>
	}
}
90006f10:	bf00      	nop
90006f12:	370c      	adds	r7, #12
90006f14:	46bd      	mov	sp, r7
90006f16:	f85d 7b04 	ldr.w	r7, [sp], #4
90006f1a:	4770      	bx	lr
90006f1c:	24000024 	.word	0x24000024
90006f20:	e000ed04 	.word	0xe000ed04

90006f24 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
90006f24:	b480      	push	{r7}
90006f26:	b083      	sub	sp, #12
90006f28:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
90006f2a:	4b12      	ldr	r3, [pc, #72]	; (90006f74 <vPortExitCritical+0x50>)
90006f2c:	681b      	ldr	r3, [r3, #0]
90006f2e:	2b00      	cmp	r3, #0
90006f30:	d10a      	bne.n	90006f48 <vPortExitCritical+0x24>
	__asm volatile
90006f32:	f04f 0350 	mov.w	r3, #80	; 0x50
90006f36:	f383 8811 	msr	BASEPRI, r3
90006f3a:	f3bf 8f6f 	isb	sy
90006f3e:	f3bf 8f4f 	dsb	sy
90006f42:	607b      	str	r3, [r7, #4]
}
90006f44:	bf00      	nop
90006f46:	e7fe      	b.n	90006f46 <vPortExitCritical+0x22>
	uxCriticalNesting--;
90006f48:	4b0a      	ldr	r3, [pc, #40]	; (90006f74 <vPortExitCritical+0x50>)
90006f4a:	681b      	ldr	r3, [r3, #0]
90006f4c:	3b01      	subs	r3, #1
90006f4e:	4a09      	ldr	r2, [pc, #36]	; (90006f74 <vPortExitCritical+0x50>)
90006f50:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
90006f52:	4b08      	ldr	r3, [pc, #32]	; (90006f74 <vPortExitCritical+0x50>)
90006f54:	681b      	ldr	r3, [r3, #0]
90006f56:	2b00      	cmp	r3, #0
90006f58:	d105      	bne.n	90006f66 <vPortExitCritical+0x42>
90006f5a:	2300      	movs	r3, #0
90006f5c:	603b      	str	r3, [r7, #0]
	__asm volatile
90006f5e:	683b      	ldr	r3, [r7, #0]
90006f60:	f383 8811 	msr	BASEPRI, r3
}
90006f64:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
90006f66:	bf00      	nop
90006f68:	370c      	adds	r7, #12
90006f6a:	46bd      	mov	sp, r7
90006f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
90006f70:	4770      	bx	lr
90006f72:	bf00      	nop
90006f74:	24000024 	.word	0x24000024
	...

90006f80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
90006f80:	f3ef 8009 	mrs	r0, PSP
90006f84:	f3bf 8f6f 	isb	sy
90006f88:	4b15      	ldr	r3, [pc, #84]	; (90006fe0 <pxCurrentTCBConst>)
90006f8a:	681a      	ldr	r2, [r3, #0]
90006f8c:	f01e 0f10 	tst.w	lr, #16
90006f90:	bf08      	it	eq
90006f92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
90006f96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90006f9a:	6010      	str	r0, [r2, #0]
90006f9c:	e92d 0009 	stmdb	sp!, {r0, r3}
90006fa0:	f04f 0050 	mov.w	r0, #80	; 0x50
90006fa4:	f380 8811 	msr	BASEPRI, r0
90006fa8:	f3bf 8f4f 	dsb	sy
90006fac:	f3bf 8f6f 	isb	sy
90006fb0:	f7ff f9f6 	bl	900063a0 <vTaskSwitchContext>
90006fb4:	f04f 0000 	mov.w	r0, #0
90006fb8:	f380 8811 	msr	BASEPRI, r0
90006fbc:	bc09      	pop	{r0, r3}
90006fbe:	6819      	ldr	r1, [r3, #0]
90006fc0:	6808      	ldr	r0, [r1, #0]
90006fc2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90006fc6:	f01e 0f10 	tst.w	lr, #16
90006fca:	bf08      	it	eq
90006fcc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
90006fd0:	f380 8809 	msr	PSP, r0
90006fd4:	f3bf 8f6f 	isb	sy
90006fd8:	4770      	bx	lr
90006fda:	bf00      	nop
90006fdc:	f3af 8000 	nop.w

90006fe0 <pxCurrentTCBConst>:
90006fe0:	24009d7c 	.word	0x24009d7c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
90006fe4:	bf00      	nop
90006fe6:	bf00      	nop

90006fe8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
90006fe8:	b580      	push	{r7, lr}
90006fea:	b082      	sub	sp, #8
90006fec:	af00      	add	r7, sp, #0
	__asm volatile
90006fee:	f04f 0350 	mov.w	r3, #80	; 0x50
90006ff2:	f383 8811 	msr	BASEPRI, r3
90006ff6:	f3bf 8f6f 	isb	sy
90006ffa:	f3bf 8f4f 	dsb	sy
90006ffe:	607b      	str	r3, [r7, #4]
}
90007000:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
90007002:	f7ff f915 	bl	90006230 <xTaskIncrementTick>
90007006:	4603      	mov	r3, r0
90007008:	2b00      	cmp	r3, #0
9000700a:	d003      	beq.n	90007014 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
9000700c:	4b06      	ldr	r3, [pc, #24]	; (90007028 <SysTick_Handler+0x40>)
9000700e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
90007012:	601a      	str	r2, [r3, #0]
90007014:	2300      	movs	r3, #0
90007016:	603b      	str	r3, [r7, #0]
	__asm volatile
90007018:	683b      	ldr	r3, [r7, #0]
9000701a:	f383 8811 	msr	BASEPRI, r3
}
9000701e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
90007020:	bf00      	nop
90007022:	3708      	adds	r7, #8
90007024:	46bd      	mov	sp, r7
90007026:	bd80      	pop	{r7, pc}
90007028:	e000ed04 	.word	0xe000ed04

9000702c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
9000702c:	b480      	push	{r7}
9000702e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
90007030:	4b0b      	ldr	r3, [pc, #44]	; (90007060 <vPortSetupTimerInterrupt+0x34>)
90007032:	2200      	movs	r2, #0
90007034:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
90007036:	4b0b      	ldr	r3, [pc, #44]	; (90007064 <vPortSetupTimerInterrupt+0x38>)
90007038:	2200      	movs	r2, #0
9000703a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
9000703c:	4b0a      	ldr	r3, [pc, #40]	; (90007068 <vPortSetupTimerInterrupt+0x3c>)
9000703e:	681b      	ldr	r3, [r3, #0]
90007040:	4a0a      	ldr	r2, [pc, #40]	; (9000706c <vPortSetupTimerInterrupt+0x40>)
90007042:	fba2 2303 	umull	r2, r3, r2, r3
90007046:	099b      	lsrs	r3, r3, #6
90007048:	4a09      	ldr	r2, [pc, #36]	; (90007070 <vPortSetupTimerInterrupt+0x44>)
9000704a:	3b01      	subs	r3, #1
9000704c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
9000704e:	4b04      	ldr	r3, [pc, #16]	; (90007060 <vPortSetupTimerInterrupt+0x34>)
90007050:	2207      	movs	r2, #7
90007052:	601a      	str	r2, [r3, #0]
}
90007054:	bf00      	nop
90007056:	46bd      	mov	sp, r7
90007058:	f85d 7b04 	ldr.w	r7, [sp], #4
9000705c:	4770      	bx	lr
9000705e:	bf00      	nop
90007060:	e000e010 	.word	0xe000e010
90007064:	e000e018 	.word	0xe000e018
90007068:	24000000 	.word	0x24000000
9000706c:	10624dd3 	.word	0x10624dd3
90007070:	e000e014 	.word	0xe000e014

90007074 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
90007074:	f8df 000c 	ldr.w	r0, [pc, #12]	; 90007084 <vPortEnableVFP+0x10>
90007078:	6801      	ldr	r1, [r0, #0]
9000707a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
9000707e:	6001      	str	r1, [r0, #0]
90007080:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
90007082:	bf00      	nop
90007084:	e000ed88 	.word	0xe000ed88

90007088 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
90007088:	b480      	push	{r7}
9000708a:	b085      	sub	sp, #20
9000708c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
9000708e:	f3ef 8305 	mrs	r3, IPSR
90007092:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
90007094:	68fb      	ldr	r3, [r7, #12]
90007096:	2b0f      	cmp	r3, #15
90007098:	d914      	bls.n	900070c4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
9000709a:	4a17      	ldr	r2, [pc, #92]	; (900070f8 <vPortValidateInterruptPriority+0x70>)
9000709c:	68fb      	ldr	r3, [r7, #12]
9000709e:	4413      	add	r3, r2
900070a0:	781b      	ldrb	r3, [r3, #0]
900070a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
900070a4:	4b15      	ldr	r3, [pc, #84]	; (900070fc <vPortValidateInterruptPriority+0x74>)
900070a6:	781b      	ldrb	r3, [r3, #0]
900070a8:	7afa      	ldrb	r2, [r7, #11]
900070aa:	429a      	cmp	r2, r3
900070ac:	d20a      	bcs.n	900070c4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
900070ae:	f04f 0350 	mov.w	r3, #80	; 0x50
900070b2:	f383 8811 	msr	BASEPRI, r3
900070b6:	f3bf 8f6f 	isb	sy
900070ba:	f3bf 8f4f 	dsb	sy
900070be:	607b      	str	r3, [r7, #4]
}
900070c0:	bf00      	nop
900070c2:	e7fe      	b.n	900070c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
900070c4:	4b0e      	ldr	r3, [pc, #56]	; (90007100 <vPortValidateInterruptPriority+0x78>)
900070c6:	681b      	ldr	r3, [r3, #0]
900070c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
900070cc:	4b0d      	ldr	r3, [pc, #52]	; (90007104 <vPortValidateInterruptPriority+0x7c>)
900070ce:	681b      	ldr	r3, [r3, #0]
900070d0:	429a      	cmp	r2, r3
900070d2:	d90a      	bls.n	900070ea <vPortValidateInterruptPriority+0x62>
	__asm volatile
900070d4:	f04f 0350 	mov.w	r3, #80	; 0x50
900070d8:	f383 8811 	msr	BASEPRI, r3
900070dc:	f3bf 8f6f 	isb	sy
900070e0:	f3bf 8f4f 	dsb	sy
900070e4:	603b      	str	r3, [r7, #0]
}
900070e6:	bf00      	nop
900070e8:	e7fe      	b.n	900070e8 <vPortValidateInterruptPriority+0x60>
	}
900070ea:	bf00      	nop
900070ec:	3714      	adds	r7, #20
900070ee:	46bd      	mov	sp, r7
900070f0:	f85d 7b04 	ldr.w	r7, [sp], #4
900070f4:	4770      	bx	lr
900070f6:	bf00      	nop
900070f8:	e000e3f0 	.word	0xe000e3f0
900070fc:	24009ea8 	.word	0x24009ea8
90007100:	e000ed0c 	.word	0xe000ed0c
90007104:	24009eac 	.word	0x24009eac

90007108 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
90007108:	b580      	push	{r7, lr}
9000710a:	b08a      	sub	sp, #40	; 0x28
9000710c:	af00      	add	r7, sp, #0
9000710e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
90007110:	2300      	movs	r3, #0
90007112:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
90007114:	f7fe ffc0 	bl	90006098 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
90007118:	4b5b      	ldr	r3, [pc, #364]	; (90007288 <pvPortMalloc+0x180>)
9000711a:	681b      	ldr	r3, [r3, #0]
9000711c:	2b00      	cmp	r3, #0
9000711e:	d101      	bne.n	90007124 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
90007120:	f000 f920 	bl	90007364 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
90007124:	4b59      	ldr	r3, [pc, #356]	; (9000728c <pvPortMalloc+0x184>)
90007126:	681a      	ldr	r2, [r3, #0]
90007128:	687b      	ldr	r3, [r7, #4]
9000712a:	4013      	ands	r3, r2
9000712c:	2b00      	cmp	r3, #0
9000712e:	f040 8093 	bne.w	90007258 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
90007132:	687b      	ldr	r3, [r7, #4]
90007134:	2b00      	cmp	r3, #0
90007136:	d01d      	beq.n	90007174 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
90007138:	2208      	movs	r2, #8
9000713a:	687b      	ldr	r3, [r7, #4]
9000713c:	4413      	add	r3, r2
9000713e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
90007140:	687b      	ldr	r3, [r7, #4]
90007142:	f003 0307 	and.w	r3, r3, #7
90007146:	2b00      	cmp	r3, #0
90007148:	d014      	beq.n	90007174 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
9000714a:	687b      	ldr	r3, [r7, #4]
9000714c:	f023 0307 	bic.w	r3, r3, #7
90007150:	3308      	adds	r3, #8
90007152:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
90007154:	687b      	ldr	r3, [r7, #4]
90007156:	f003 0307 	and.w	r3, r3, #7
9000715a:	2b00      	cmp	r3, #0
9000715c:	d00a      	beq.n	90007174 <pvPortMalloc+0x6c>
	__asm volatile
9000715e:	f04f 0350 	mov.w	r3, #80	; 0x50
90007162:	f383 8811 	msr	BASEPRI, r3
90007166:	f3bf 8f6f 	isb	sy
9000716a:	f3bf 8f4f 	dsb	sy
9000716e:	617b      	str	r3, [r7, #20]
}
90007170:	bf00      	nop
90007172:	e7fe      	b.n	90007172 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
90007174:	687b      	ldr	r3, [r7, #4]
90007176:	2b00      	cmp	r3, #0
90007178:	d06e      	beq.n	90007258 <pvPortMalloc+0x150>
9000717a:	4b45      	ldr	r3, [pc, #276]	; (90007290 <pvPortMalloc+0x188>)
9000717c:	681b      	ldr	r3, [r3, #0]
9000717e:	687a      	ldr	r2, [r7, #4]
90007180:	429a      	cmp	r2, r3
90007182:	d869      	bhi.n	90007258 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
90007184:	4b43      	ldr	r3, [pc, #268]	; (90007294 <pvPortMalloc+0x18c>)
90007186:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
90007188:	4b42      	ldr	r3, [pc, #264]	; (90007294 <pvPortMalloc+0x18c>)
9000718a:	681b      	ldr	r3, [r3, #0]
9000718c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
9000718e:	e004      	b.n	9000719a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
90007190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90007192:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
90007194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90007196:	681b      	ldr	r3, [r3, #0]
90007198:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
9000719a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000719c:	685b      	ldr	r3, [r3, #4]
9000719e:	687a      	ldr	r2, [r7, #4]
900071a0:	429a      	cmp	r2, r3
900071a2:	d903      	bls.n	900071ac <pvPortMalloc+0xa4>
900071a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
900071a6:	681b      	ldr	r3, [r3, #0]
900071a8:	2b00      	cmp	r3, #0
900071aa:	d1f1      	bne.n	90007190 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
900071ac:	4b36      	ldr	r3, [pc, #216]	; (90007288 <pvPortMalloc+0x180>)
900071ae:	681b      	ldr	r3, [r3, #0]
900071b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
900071b2:	429a      	cmp	r2, r3
900071b4:	d050      	beq.n	90007258 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
900071b6:	6a3b      	ldr	r3, [r7, #32]
900071b8:	681b      	ldr	r3, [r3, #0]
900071ba:	2208      	movs	r2, #8
900071bc:	4413      	add	r3, r2
900071be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
900071c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
900071c2:	681a      	ldr	r2, [r3, #0]
900071c4:	6a3b      	ldr	r3, [r7, #32]
900071c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
900071c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
900071ca:	685a      	ldr	r2, [r3, #4]
900071cc:	687b      	ldr	r3, [r7, #4]
900071ce:	1ad2      	subs	r2, r2, r3
900071d0:	2308      	movs	r3, #8
900071d2:	005b      	lsls	r3, r3, #1
900071d4:	429a      	cmp	r2, r3
900071d6:	d91f      	bls.n	90007218 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
900071d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
900071da:	687b      	ldr	r3, [r7, #4]
900071dc:	4413      	add	r3, r2
900071de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
900071e0:	69bb      	ldr	r3, [r7, #24]
900071e2:	f003 0307 	and.w	r3, r3, #7
900071e6:	2b00      	cmp	r3, #0
900071e8:	d00a      	beq.n	90007200 <pvPortMalloc+0xf8>
	__asm volatile
900071ea:	f04f 0350 	mov.w	r3, #80	; 0x50
900071ee:	f383 8811 	msr	BASEPRI, r3
900071f2:	f3bf 8f6f 	isb	sy
900071f6:	f3bf 8f4f 	dsb	sy
900071fa:	613b      	str	r3, [r7, #16]
}
900071fc:	bf00      	nop
900071fe:	e7fe      	b.n	900071fe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
90007200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90007202:	685a      	ldr	r2, [r3, #4]
90007204:	687b      	ldr	r3, [r7, #4]
90007206:	1ad2      	subs	r2, r2, r3
90007208:	69bb      	ldr	r3, [r7, #24]
9000720a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
9000720c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000720e:	687a      	ldr	r2, [r7, #4]
90007210:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
90007212:	69b8      	ldr	r0, [r7, #24]
90007214:	f000 f908 	bl	90007428 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
90007218:	4b1d      	ldr	r3, [pc, #116]	; (90007290 <pvPortMalloc+0x188>)
9000721a:	681a      	ldr	r2, [r3, #0]
9000721c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000721e:	685b      	ldr	r3, [r3, #4]
90007220:	1ad3      	subs	r3, r2, r3
90007222:	4a1b      	ldr	r2, [pc, #108]	; (90007290 <pvPortMalloc+0x188>)
90007224:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
90007226:	4b1a      	ldr	r3, [pc, #104]	; (90007290 <pvPortMalloc+0x188>)
90007228:	681a      	ldr	r2, [r3, #0]
9000722a:	4b1b      	ldr	r3, [pc, #108]	; (90007298 <pvPortMalloc+0x190>)
9000722c:	681b      	ldr	r3, [r3, #0]
9000722e:	429a      	cmp	r2, r3
90007230:	d203      	bcs.n	9000723a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
90007232:	4b17      	ldr	r3, [pc, #92]	; (90007290 <pvPortMalloc+0x188>)
90007234:	681b      	ldr	r3, [r3, #0]
90007236:	4a18      	ldr	r2, [pc, #96]	; (90007298 <pvPortMalloc+0x190>)
90007238:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
9000723a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000723c:	685a      	ldr	r2, [r3, #4]
9000723e:	4b13      	ldr	r3, [pc, #76]	; (9000728c <pvPortMalloc+0x184>)
90007240:	681b      	ldr	r3, [r3, #0]
90007242:	431a      	orrs	r2, r3
90007244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90007246:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
90007248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000724a:	2200      	movs	r2, #0
9000724c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
9000724e:	4b13      	ldr	r3, [pc, #76]	; (9000729c <pvPortMalloc+0x194>)
90007250:	681b      	ldr	r3, [r3, #0]
90007252:	3301      	adds	r3, #1
90007254:	4a11      	ldr	r2, [pc, #68]	; (9000729c <pvPortMalloc+0x194>)
90007256:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
90007258:	f7fe ff2c 	bl	900060b4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
9000725c:	69fb      	ldr	r3, [r7, #28]
9000725e:	f003 0307 	and.w	r3, r3, #7
90007262:	2b00      	cmp	r3, #0
90007264:	d00a      	beq.n	9000727c <pvPortMalloc+0x174>
	__asm volatile
90007266:	f04f 0350 	mov.w	r3, #80	; 0x50
9000726a:	f383 8811 	msr	BASEPRI, r3
9000726e:	f3bf 8f6f 	isb	sy
90007272:	f3bf 8f4f 	dsb	sy
90007276:	60fb      	str	r3, [r7, #12]
}
90007278:	bf00      	nop
9000727a:	e7fe      	b.n	9000727a <pvPortMalloc+0x172>
	return pvReturn;
9000727c:	69fb      	ldr	r3, [r7, #28]
}
9000727e:	4618      	mov	r0, r3
90007280:	3728      	adds	r7, #40	; 0x28
90007282:	46bd      	mov	sp, r7
90007284:	bd80      	pop	{r7, pc}
90007286:	bf00      	nop
90007288:	2400dab8 	.word	0x2400dab8
9000728c:	2400dacc 	.word	0x2400dacc
90007290:	2400dabc 	.word	0x2400dabc
90007294:	2400dab0 	.word	0x2400dab0
90007298:	2400dac0 	.word	0x2400dac0
9000729c:	2400dac4 	.word	0x2400dac4

900072a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
900072a0:	b580      	push	{r7, lr}
900072a2:	b086      	sub	sp, #24
900072a4:	af00      	add	r7, sp, #0
900072a6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
900072a8:	687b      	ldr	r3, [r7, #4]
900072aa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
900072ac:	687b      	ldr	r3, [r7, #4]
900072ae:	2b00      	cmp	r3, #0
900072b0:	d04d      	beq.n	9000734e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
900072b2:	2308      	movs	r3, #8
900072b4:	425b      	negs	r3, r3
900072b6:	697a      	ldr	r2, [r7, #20]
900072b8:	4413      	add	r3, r2
900072ba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
900072bc:	697b      	ldr	r3, [r7, #20]
900072be:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
900072c0:	693b      	ldr	r3, [r7, #16]
900072c2:	685a      	ldr	r2, [r3, #4]
900072c4:	4b24      	ldr	r3, [pc, #144]	; (90007358 <vPortFree+0xb8>)
900072c6:	681b      	ldr	r3, [r3, #0]
900072c8:	4013      	ands	r3, r2
900072ca:	2b00      	cmp	r3, #0
900072cc:	d10a      	bne.n	900072e4 <vPortFree+0x44>
	__asm volatile
900072ce:	f04f 0350 	mov.w	r3, #80	; 0x50
900072d2:	f383 8811 	msr	BASEPRI, r3
900072d6:	f3bf 8f6f 	isb	sy
900072da:	f3bf 8f4f 	dsb	sy
900072de:	60fb      	str	r3, [r7, #12]
}
900072e0:	bf00      	nop
900072e2:	e7fe      	b.n	900072e2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
900072e4:	693b      	ldr	r3, [r7, #16]
900072e6:	681b      	ldr	r3, [r3, #0]
900072e8:	2b00      	cmp	r3, #0
900072ea:	d00a      	beq.n	90007302 <vPortFree+0x62>
	__asm volatile
900072ec:	f04f 0350 	mov.w	r3, #80	; 0x50
900072f0:	f383 8811 	msr	BASEPRI, r3
900072f4:	f3bf 8f6f 	isb	sy
900072f8:	f3bf 8f4f 	dsb	sy
900072fc:	60bb      	str	r3, [r7, #8]
}
900072fe:	bf00      	nop
90007300:	e7fe      	b.n	90007300 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
90007302:	693b      	ldr	r3, [r7, #16]
90007304:	685a      	ldr	r2, [r3, #4]
90007306:	4b14      	ldr	r3, [pc, #80]	; (90007358 <vPortFree+0xb8>)
90007308:	681b      	ldr	r3, [r3, #0]
9000730a:	4013      	ands	r3, r2
9000730c:	2b00      	cmp	r3, #0
9000730e:	d01e      	beq.n	9000734e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
90007310:	693b      	ldr	r3, [r7, #16]
90007312:	681b      	ldr	r3, [r3, #0]
90007314:	2b00      	cmp	r3, #0
90007316:	d11a      	bne.n	9000734e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
90007318:	693b      	ldr	r3, [r7, #16]
9000731a:	685a      	ldr	r2, [r3, #4]
9000731c:	4b0e      	ldr	r3, [pc, #56]	; (90007358 <vPortFree+0xb8>)
9000731e:	681b      	ldr	r3, [r3, #0]
90007320:	43db      	mvns	r3, r3
90007322:	401a      	ands	r2, r3
90007324:	693b      	ldr	r3, [r7, #16]
90007326:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
90007328:	f7fe feb6 	bl	90006098 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
9000732c:	693b      	ldr	r3, [r7, #16]
9000732e:	685a      	ldr	r2, [r3, #4]
90007330:	4b0a      	ldr	r3, [pc, #40]	; (9000735c <vPortFree+0xbc>)
90007332:	681b      	ldr	r3, [r3, #0]
90007334:	4413      	add	r3, r2
90007336:	4a09      	ldr	r2, [pc, #36]	; (9000735c <vPortFree+0xbc>)
90007338:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
9000733a:	6938      	ldr	r0, [r7, #16]
9000733c:	f000 f874 	bl	90007428 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
90007340:	4b07      	ldr	r3, [pc, #28]	; (90007360 <vPortFree+0xc0>)
90007342:	681b      	ldr	r3, [r3, #0]
90007344:	3301      	adds	r3, #1
90007346:	4a06      	ldr	r2, [pc, #24]	; (90007360 <vPortFree+0xc0>)
90007348:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
9000734a:	f7fe feb3 	bl	900060b4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
9000734e:	bf00      	nop
90007350:	3718      	adds	r7, #24
90007352:	46bd      	mov	sp, r7
90007354:	bd80      	pop	{r7, pc}
90007356:	bf00      	nop
90007358:	2400dacc 	.word	0x2400dacc
9000735c:	2400dabc 	.word	0x2400dabc
90007360:	2400dac8 	.word	0x2400dac8

90007364 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
90007364:	b480      	push	{r7}
90007366:	b085      	sub	sp, #20
90007368:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
9000736a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
9000736e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
90007370:	4b27      	ldr	r3, [pc, #156]	; (90007410 <prvHeapInit+0xac>)
90007372:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
90007374:	68fb      	ldr	r3, [r7, #12]
90007376:	f003 0307 	and.w	r3, r3, #7
9000737a:	2b00      	cmp	r3, #0
9000737c:	d00c      	beq.n	90007398 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
9000737e:	68fb      	ldr	r3, [r7, #12]
90007380:	3307      	adds	r3, #7
90007382:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
90007384:	68fb      	ldr	r3, [r7, #12]
90007386:	f023 0307 	bic.w	r3, r3, #7
9000738a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
9000738c:	68ba      	ldr	r2, [r7, #8]
9000738e:	68fb      	ldr	r3, [r7, #12]
90007390:	1ad3      	subs	r3, r2, r3
90007392:	4a1f      	ldr	r2, [pc, #124]	; (90007410 <prvHeapInit+0xac>)
90007394:	4413      	add	r3, r2
90007396:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
90007398:	68fb      	ldr	r3, [r7, #12]
9000739a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
9000739c:	4a1d      	ldr	r2, [pc, #116]	; (90007414 <prvHeapInit+0xb0>)
9000739e:	687b      	ldr	r3, [r7, #4]
900073a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
900073a2:	4b1c      	ldr	r3, [pc, #112]	; (90007414 <prvHeapInit+0xb0>)
900073a4:	2200      	movs	r2, #0
900073a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
900073a8:	687b      	ldr	r3, [r7, #4]
900073aa:	68ba      	ldr	r2, [r7, #8]
900073ac:	4413      	add	r3, r2
900073ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
900073b0:	2208      	movs	r2, #8
900073b2:	68fb      	ldr	r3, [r7, #12]
900073b4:	1a9b      	subs	r3, r3, r2
900073b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
900073b8:	68fb      	ldr	r3, [r7, #12]
900073ba:	f023 0307 	bic.w	r3, r3, #7
900073be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
900073c0:	68fb      	ldr	r3, [r7, #12]
900073c2:	4a15      	ldr	r2, [pc, #84]	; (90007418 <prvHeapInit+0xb4>)
900073c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
900073c6:	4b14      	ldr	r3, [pc, #80]	; (90007418 <prvHeapInit+0xb4>)
900073c8:	681b      	ldr	r3, [r3, #0]
900073ca:	2200      	movs	r2, #0
900073cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
900073ce:	4b12      	ldr	r3, [pc, #72]	; (90007418 <prvHeapInit+0xb4>)
900073d0:	681b      	ldr	r3, [r3, #0]
900073d2:	2200      	movs	r2, #0
900073d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
900073d6:	687b      	ldr	r3, [r7, #4]
900073d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
900073da:	683b      	ldr	r3, [r7, #0]
900073dc:	68fa      	ldr	r2, [r7, #12]
900073de:	1ad2      	subs	r2, r2, r3
900073e0:	683b      	ldr	r3, [r7, #0]
900073e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
900073e4:	4b0c      	ldr	r3, [pc, #48]	; (90007418 <prvHeapInit+0xb4>)
900073e6:	681a      	ldr	r2, [r3, #0]
900073e8:	683b      	ldr	r3, [r7, #0]
900073ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
900073ec:	683b      	ldr	r3, [r7, #0]
900073ee:	685b      	ldr	r3, [r3, #4]
900073f0:	4a0a      	ldr	r2, [pc, #40]	; (9000741c <prvHeapInit+0xb8>)
900073f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
900073f4:	683b      	ldr	r3, [r7, #0]
900073f6:	685b      	ldr	r3, [r3, #4]
900073f8:	4a09      	ldr	r2, [pc, #36]	; (90007420 <prvHeapInit+0xbc>)
900073fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
900073fc:	4b09      	ldr	r3, [pc, #36]	; (90007424 <prvHeapInit+0xc0>)
900073fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
90007402:	601a      	str	r2, [r3, #0]
}
90007404:	bf00      	nop
90007406:	3714      	adds	r7, #20
90007408:	46bd      	mov	sp, r7
9000740a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000740e:	4770      	bx	lr
90007410:	24009eb0 	.word	0x24009eb0
90007414:	2400dab0 	.word	0x2400dab0
90007418:	2400dab8 	.word	0x2400dab8
9000741c:	2400dac0 	.word	0x2400dac0
90007420:	2400dabc 	.word	0x2400dabc
90007424:	2400dacc 	.word	0x2400dacc

90007428 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
90007428:	b480      	push	{r7}
9000742a:	b085      	sub	sp, #20
9000742c:	af00      	add	r7, sp, #0
9000742e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
90007430:	4b28      	ldr	r3, [pc, #160]	; (900074d4 <prvInsertBlockIntoFreeList+0xac>)
90007432:	60fb      	str	r3, [r7, #12]
90007434:	e002      	b.n	9000743c <prvInsertBlockIntoFreeList+0x14>
90007436:	68fb      	ldr	r3, [r7, #12]
90007438:	681b      	ldr	r3, [r3, #0]
9000743a:	60fb      	str	r3, [r7, #12]
9000743c:	68fb      	ldr	r3, [r7, #12]
9000743e:	681b      	ldr	r3, [r3, #0]
90007440:	687a      	ldr	r2, [r7, #4]
90007442:	429a      	cmp	r2, r3
90007444:	d8f7      	bhi.n	90007436 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
90007446:	68fb      	ldr	r3, [r7, #12]
90007448:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
9000744a:	68fb      	ldr	r3, [r7, #12]
9000744c:	685b      	ldr	r3, [r3, #4]
9000744e:	68ba      	ldr	r2, [r7, #8]
90007450:	4413      	add	r3, r2
90007452:	687a      	ldr	r2, [r7, #4]
90007454:	429a      	cmp	r2, r3
90007456:	d108      	bne.n	9000746a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
90007458:	68fb      	ldr	r3, [r7, #12]
9000745a:	685a      	ldr	r2, [r3, #4]
9000745c:	687b      	ldr	r3, [r7, #4]
9000745e:	685b      	ldr	r3, [r3, #4]
90007460:	441a      	add	r2, r3
90007462:	68fb      	ldr	r3, [r7, #12]
90007464:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
90007466:	68fb      	ldr	r3, [r7, #12]
90007468:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
9000746a:	687b      	ldr	r3, [r7, #4]
9000746c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
9000746e:	687b      	ldr	r3, [r7, #4]
90007470:	685b      	ldr	r3, [r3, #4]
90007472:	68ba      	ldr	r2, [r7, #8]
90007474:	441a      	add	r2, r3
90007476:	68fb      	ldr	r3, [r7, #12]
90007478:	681b      	ldr	r3, [r3, #0]
9000747a:	429a      	cmp	r2, r3
9000747c:	d118      	bne.n	900074b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
9000747e:	68fb      	ldr	r3, [r7, #12]
90007480:	681a      	ldr	r2, [r3, #0]
90007482:	4b15      	ldr	r3, [pc, #84]	; (900074d8 <prvInsertBlockIntoFreeList+0xb0>)
90007484:	681b      	ldr	r3, [r3, #0]
90007486:	429a      	cmp	r2, r3
90007488:	d00d      	beq.n	900074a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
9000748a:	687b      	ldr	r3, [r7, #4]
9000748c:	685a      	ldr	r2, [r3, #4]
9000748e:	68fb      	ldr	r3, [r7, #12]
90007490:	681b      	ldr	r3, [r3, #0]
90007492:	685b      	ldr	r3, [r3, #4]
90007494:	441a      	add	r2, r3
90007496:	687b      	ldr	r3, [r7, #4]
90007498:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
9000749a:	68fb      	ldr	r3, [r7, #12]
9000749c:	681b      	ldr	r3, [r3, #0]
9000749e:	681a      	ldr	r2, [r3, #0]
900074a0:	687b      	ldr	r3, [r7, #4]
900074a2:	601a      	str	r2, [r3, #0]
900074a4:	e008      	b.n	900074b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
900074a6:	4b0c      	ldr	r3, [pc, #48]	; (900074d8 <prvInsertBlockIntoFreeList+0xb0>)
900074a8:	681a      	ldr	r2, [r3, #0]
900074aa:	687b      	ldr	r3, [r7, #4]
900074ac:	601a      	str	r2, [r3, #0]
900074ae:	e003      	b.n	900074b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
900074b0:	68fb      	ldr	r3, [r7, #12]
900074b2:	681a      	ldr	r2, [r3, #0]
900074b4:	687b      	ldr	r3, [r7, #4]
900074b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
900074b8:	68fa      	ldr	r2, [r7, #12]
900074ba:	687b      	ldr	r3, [r7, #4]
900074bc:	429a      	cmp	r2, r3
900074be:	d002      	beq.n	900074c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
900074c0:	68fb      	ldr	r3, [r7, #12]
900074c2:	687a      	ldr	r2, [r7, #4]
900074c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
900074c6:	bf00      	nop
900074c8:	3714      	adds	r7, #20
900074ca:	46bd      	mov	sp, r7
900074cc:	f85d 7b04 	ldr.w	r7, [sp], #4
900074d0:	4770      	bx	lr
900074d2:	bf00      	nop
900074d4:	2400dab0 	.word	0x2400dab0
900074d8:	2400dab8 	.word	0x2400dab8

900074dc <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
900074dc:	b580      	push	{r7, lr}
900074de:	b084      	sub	sp, #16
900074e0:	af00      	add	r7, sp, #0
900074e2:	6078      	str	r0, [r7, #4]
900074e4:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
900074e6:	f009 f8db 	bl	900106a0 <sys_timeouts_sleeptime>
900074ea:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
900074ec:	68fb      	ldr	r3, [r7, #12]
900074ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
900074f2:	d10b      	bne.n	9000750c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
900074f4:	4813      	ldr	r0, [pc, #76]	; (90007544 <tcpip_timeouts_mbox_fetch+0x68>)
900074f6:	f00b fe76 	bl	900131e6 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
900074fa:	2200      	movs	r2, #0
900074fc:	6839      	ldr	r1, [r7, #0]
900074fe:	6878      	ldr	r0, [r7, #4]
90007500:	f00b fde8 	bl	900130d4 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
90007504:	480f      	ldr	r0, [pc, #60]	; (90007544 <tcpip_timeouts_mbox_fetch+0x68>)
90007506:	f00b fe5f 	bl	900131c8 <sys_mutex_lock>
    return;
9000750a:	e018      	b.n	9000753e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
9000750c:	68fb      	ldr	r3, [r7, #12]
9000750e:	2b00      	cmp	r3, #0
90007510:	d102      	bne.n	90007518 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
90007512:	f009 f88b 	bl	9001062c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
90007516:	e7e6      	b.n	900074e6 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
90007518:	480a      	ldr	r0, [pc, #40]	; (90007544 <tcpip_timeouts_mbox_fetch+0x68>)
9000751a:	f00b fe64 	bl	900131e6 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
9000751e:	68fa      	ldr	r2, [r7, #12]
90007520:	6839      	ldr	r1, [r7, #0]
90007522:	6878      	ldr	r0, [r7, #4]
90007524:	f00b fdd6 	bl	900130d4 <sys_arch_mbox_fetch>
90007528:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
9000752a:	4806      	ldr	r0, [pc, #24]	; (90007544 <tcpip_timeouts_mbox_fetch+0x68>)
9000752c:	f00b fe4c 	bl	900131c8 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
90007530:	68bb      	ldr	r3, [r7, #8]
90007532:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
90007536:	d102      	bne.n	9000753e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
90007538:	f009 f878 	bl	9001062c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
9000753c:	e7d3      	b.n	900074e6 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
9000753e:	3710      	adds	r7, #16
90007540:	46bd      	mov	sp, r7
90007542:	bd80      	pop	{r7, pc}
90007544:	2400dadc 	.word	0x2400dadc

90007548 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
90007548:	b580      	push	{r7, lr}
9000754a:	b084      	sub	sp, #16
9000754c:	af00      	add	r7, sp, #0
9000754e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
90007550:	4810      	ldr	r0, [pc, #64]	; (90007594 <tcpip_thread+0x4c>)
90007552:	f00b fe39 	bl	900131c8 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
90007556:	4b10      	ldr	r3, [pc, #64]	; (90007598 <tcpip_thread+0x50>)
90007558:	681b      	ldr	r3, [r3, #0]
9000755a:	2b00      	cmp	r3, #0
9000755c:	d005      	beq.n	9000756a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
9000755e:	4b0e      	ldr	r3, [pc, #56]	; (90007598 <tcpip_thread+0x50>)
90007560:	681b      	ldr	r3, [r3, #0]
90007562:	4a0e      	ldr	r2, [pc, #56]	; (9000759c <tcpip_thread+0x54>)
90007564:	6812      	ldr	r2, [r2, #0]
90007566:	4610      	mov	r0, r2
90007568:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
9000756a:	f107 030c 	add.w	r3, r7, #12
9000756e:	4619      	mov	r1, r3
90007570:	480b      	ldr	r0, [pc, #44]	; (900075a0 <tcpip_thread+0x58>)
90007572:	f7ff ffb3 	bl	900074dc <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
90007576:	68fb      	ldr	r3, [r7, #12]
90007578:	2b00      	cmp	r3, #0
9000757a:	d106      	bne.n	9000758a <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
9000757c:	4b09      	ldr	r3, [pc, #36]	; (900075a4 <tcpip_thread+0x5c>)
9000757e:	2291      	movs	r2, #145	; 0x91
90007580:	4909      	ldr	r1, [pc, #36]	; (900075a8 <tcpip_thread+0x60>)
90007582:	480a      	ldr	r0, [pc, #40]	; (900075ac <tcpip_thread+0x64>)
90007584:	f00c f858 	bl	90013638 <iprintf>
      continue;
90007588:	e003      	b.n	90007592 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
9000758a:	68fb      	ldr	r3, [r7, #12]
9000758c:	4618      	mov	r0, r3
9000758e:	f000 f80f 	bl	900075b0 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
90007592:	e7ea      	b.n	9000756a <tcpip_thread+0x22>
90007594:	2400dadc 	.word	0x2400dadc
90007598:	2400dad0 	.word	0x2400dad0
9000759c:	2400dad4 	.word	0x2400dad4
900075a0:	2400dad8 	.word	0x2400dad8
900075a4:	900145b4 	.word	0x900145b4
900075a8:	900145e4 	.word	0x900145e4
900075ac:	90014604 	.word	0x90014604

900075b0 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
900075b0:	b580      	push	{r7, lr}
900075b2:	b082      	sub	sp, #8
900075b4:	af00      	add	r7, sp, #0
900075b6:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
900075b8:	687b      	ldr	r3, [r7, #4]
900075ba:	781b      	ldrb	r3, [r3, #0]
900075bc:	2b02      	cmp	r3, #2
900075be:	d026      	beq.n	9000760e <tcpip_thread_handle_msg+0x5e>
900075c0:	2b02      	cmp	r3, #2
900075c2:	dc2b      	bgt.n	9000761c <tcpip_thread_handle_msg+0x6c>
900075c4:	2b00      	cmp	r3, #0
900075c6:	d002      	beq.n	900075ce <tcpip_thread_handle_msg+0x1e>
900075c8:	2b01      	cmp	r3, #1
900075ca:	d015      	beq.n	900075f8 <tcpip_thread_handle_msg+0x48>
900075cc:	e026      	b.n	9000761c <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
900075ce:	687b      	ldr	r3, [r7, #4]
900075d0:	68db      	ldr	r3, [r3, #12]
900075d2:	687a      	ldr	r2, [r7, #4]
900075d4:	6850      	ldr	r0, [r2, #4]
900075d6:	687a      	ldr	r2, [r7, #4]
900075d8:	6892      	ldr	r2, [r2, #8]
900075da:	4611      	mov	r1, r2
900075dc:	4798      	blx	r3
900075de:	4603      	mov	r3, r0
900075e0:	2b00      	cmp	r3, #0
900075e2:	d004      	beq.n	900075ee <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
900075e4:	687b      	ldr	r3, [r7, #4]
900075e6:	685b      	ldr	r3, [r3, #4]
900075e8:	4618      	mov	r0, r3
900075ea:	f002 fc23 	bl	90009e34 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
900075ee:	6879      	ldr	r1, [r7, #4]
900075f0:	2009      	movs	r0, #9
900075f2:	f001 fd7b 	bl	900090ec <memp_free>
      break;
900075f6:	e018      	b.n	9000762a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
900075f8:	687b      	ldr	r3, [r7, #4]
900075fa:	685b      	ldr	r3, [r3, #4]
900075fc:	687a      	ldr	r2, [r7, #4]
900075fe:	6892      	ldr	r2, [r2, #8]
90007600:	4610      	mov	r0, r2
90007602:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
90007604:	6879      	ldr	r1, [r7, #4]
90007606:	2008      	movs	r0, #8
90007608:	f001 fd70 	bl	900090ec <memp_free>
      break;
9000760c:	e00d      	b.n	9000762a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
9000760e:	687b      	ldr	r3, [r7, #4]
90007610:	685b      	ldr	r3, [r3, #4]
90007612:	687a      	ldr	r2, [r7, #4]
90007614:	6892      	ldr	r2, [r2, #8]
90007616:	4610      	mov	r0, r2
90007618:	4798      	blx	r3
      break;
9000761a:	e006      	b.n	9000762a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
9000761c:	4b05      	ldr	r3, [pc, #20]	; (90007634 <tcpip_thread_handle_msg+0x84>)
9000761e:	22cf      	movs	r2, #207	; 0xcf
90007620:	4905      	ldr	r1, [pc, #20]	; (90007638 <tcpip_thread_handle_msg+0x88>)
90007622:	4806      	ldr	r0, [pc, #24]	; (9000763c <tcpip_thread_handle_msg+0x8c>)
90007624:	f00c f808 	bl	90013638 <iprintf>
      break;
90007628:	bf00      	nop
  }
}
9000762a:	bf00      	nop
9000762c:	3708      	adds	r7, #8
9000762e:	46bd      	mov	sp, r7
90007630:	bd80      	pop	{r7, pc}
90007632:	bf00      	nop
90007634:	900145b4 	.word	0x900145b4
90007638:	900145e4 	.word	0x900145e4
9000763c:	90014604 	.word	0x90014604

90007640 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
90007640:	b580      	push	{r7, lr}
90007642:	b086      	sub	sp, #24
90007644:	af00      	add	r7, sp, #0
90007646:	60f8      	str	r0, [r7, #12]
90007648:	60b9      	str	r1, [r7, #8]
9000764a:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
9000764c:	481a      	ldr	r0, [pc, #104]	; (900076b8 <tcpip_inpkt+0x78>)
9000764e:	f00b fd80 	bl	90013152 <sys_mbox_valid>
90007652:	4603      	mov	r3, r0
90007654:	2b00      	cmp	r3, #0
90007656:	d105      	bne.n	90007664 <tcpip_inpkt+0x24>
90007658:	4b18      	ldr	r3, [pc, #96]	; (900076bc <tcpip_inpkt+0x7c>)
9000765a:	22fc      	movs	r2, #252	; 0xfc
9000765c:	4918      	ldr	r1, [pc, #96]	; (900076c0 <tcpip_inpkt+0x80>)
9000765e:	4819      	ldr	r0, [pc, #100]	; (900076c4 <tcpip_inpkt+0x84>)
90007660:	f00b ffea 	bl	90013638 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
90007664:	2009      	movs	r0, #9
90007666:	f001 fccb 	bl	90009000 <memp_malloc>
9000766a:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
9000766c:	697b      	ldr	r3, [r7, #20]
9000766e:	2b00      	cmp	r3, #0
90007670:	d102      	bne.n	90007678 <tcpip_inpkt+0x38>
    return ERR_MEM;
90007672:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
90007676:	e01a      	b.n	900076ae <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
90007678:	697b      	ldr	r3, [r7, #20]
9000767a:	2200      	movs	r2, #0
9000767c:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
9000767e:	697b      	ldr	r3, [r7, #20]
90007680:	68fa      	ldr	r2, [r7, #12]
90007682:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
90007684:	697b      	ldr	r3, [r7, #20]
90007686:	68ba      	ldr	r2, [r7, #8]
90007688:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
9000768a:	697b      	ldr	r3, [r7, #20]
9000768c:	687a      	ldr	r2, [r7, #4]
9000768e:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
90007690:	6979      	ldr	r1, [r7, #20]
90007692:	4809      	ldr	r0, [pc, #36]	; (900076b8 <tcpip_inpkt+0x78>)
90007694:	f00b fd04 	bl	900130a0 <sys_mbox_trypost>
90007698:	4603      	mov	r3, r0
9000769a:	2b00      	cmp	r3, #0
9000769c:	d006      	beq.n	900076ac <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
9000769e:	6979      	ldr	r1, [r7, #20]
900076a0:	2009      	movs	r0, #9
900076a2:	f001 fd23 	bl	900090ec <memp_free>
    return ERR_MEM;
900076a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
900076aa:	e000      	b.n	900076ae <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
900076ac:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
900076ae:	4618      	mov	r0, r3
900076b0:	3718      	adds	r7, #24
900076b2:	46bd      	mov	sp, r7
900076b4:	bd80      	pop	{r7, pc}
900076b6:	bf00      	nop
900076b8:	2400dad8 	.word	0x2400dad8
900076bc:	900145b4 	.word	0x900145b4
900076c0:	9001462c 	.word	0x9001462c
900076c4:	90014604 	.word	0x90014604

900076c8 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
900076c8:	b580      	push	{r7, lr}
900076ca:	b082      	sub	sp, #8
900076cc:	af00      	add	r7, sp, #0
900076ce:	6078      	str	r0, [r7, #4]
900076d0:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
900076d2:	683b      	ldr	r3, [r7, #0]
900076d4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
900076d8:	f003 0318 	and.w	r3, r3, #24
900076dc:	2b00      	cmp	r3, #0
900076de:	d006      	beq.n	900076ee <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
900076e0:	4a08      	ldr	r2, [pc, #32]	; (90007704 <tcpip_input+0x3c>)
900076e2:	6839      	ldr	r1, [r7, #0]
900076e4:	6878      	ldr	r0, [r7, #4]
900076e6:	f7ff ffab 	bl	90007640 <tcpip_inpkt>
900076ea:	4603      	mov	r3, r0
900076ec:	e005      	b.n	900076fa <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
900076ee:	4a06      	ldr	r2, [pc, #24]	; (90007708 <tcpip_input+0x40>)
900076f0:	6839      	ldr	r1, [r7, #0]
900076f2:	6878      	ldr	r0, [r7, #4]
900076f4:	f7ff ffa4 	bl	90007640 <tcpip_inpkt>
900076f8:	4603      	mov	r3, r0
}
900076fa:	4618      	mov	r0, r3
900076fc:	3708      	adds	r7, #8
900076fe:	46bd      	mov	sp, r7
90007700:	bd80      	pop	{r7, pc}
90007702:	bf00      	nop
90007704:	90012eb1 	.word	0x90012eb1
90007708:	90011db9 	.word	0x90011db9

9000770c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
9000770c:	b580      	push	{r7, lr}
9000770e:	b084      	sub	sp, #16
90007710:	af00      	add	r7, sp, #0
90007712:	6078      	str	r0, [r7, #4]
90007714:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
90007716:	4819      	ldr	r0, [pc, #100]	; (9000777c <tcpip_try_callback+0x70>)
90007718:	f00b fd1b 	bl	90013152 <sys_mbox_valid>
9000771c:	4603      	mov	r3, r0
9000771e:	2b00      	cmp	r3, #0
90007720:	d106      	bne.n	90007730 <tcpip_try_callback+0x24>
90007722:	4b17      	ldr	r3, [pc, #92]	; (90007780 <tcpip_try_callback+0x74>)
90007724:	f240 125d 	movw	r2, #349	; 0x15d
90007728:	4916      	ldr	r1, [pc, #88]	; (90007784 <tcpip_try_callback+0x78>)
9000772a:	4817      	ldr	r0, [pc, #92]	; (90007788 <tcpip_try_callback+0x7c>)
9000772c:	f00b ff84 	bl	90013638 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
90007730:	2008      	movs	r0, #8
90007732:	f001 fc65 	bl	90009000 <memp_malloc>
90007736:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
90007738:	68fb      	ldr	r3, [r7, #12]
9000773a:	2b00      	cmp	r3, #0
9000773c:	d102      	bne.n	90007744 <tcpip_try_callback+0x38>
    return ERR_MEM;
9000773e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
90007742:	e017      	b.n	90007774 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
90007744:	68fb      	ldr	r3, [r7, #12]
90007746:	2201      	movs	r2, #1
90007748:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
9000774a:	68fb      	ldr	r3, [r7, #12]
9000774c:	687a      	ldr	r2, [r7, #4]
9000774e:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
90007750:	68fb      	ldr	r3, [r7, #12]
90007752:	683a      	ldr	r2, [r7, #0]
90007754:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
90007756:	68f9      	ldr	r1, [r7, #12]
90007758:	4808      	ldr	r0, [pc, #32]	; (9000777c <tcpip_try_callback+0x70>)
9000775a:	f00b fca1 	bl	900130a0 <sys_mbox_trypost>
9000775e:	4603      	mov	r3, r0
90007760:	2b00      	cmp	r3, #0
90007762:	d006      	beq.n	90007772 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
90007764:	68f9      	ldr	r1, [r7, #12]
90007766:	2008      	movs	r0, #8
90007768:	f001 fcc0 	bl	900090ec <memp_free>
    return ERR_MEM;
9000776c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
90007770:	e000      	b.n	90007774 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
90007772:	2300      	movs	r3, #0
}
90007774:	4618      	mov	r0, r3
90007776:	3710      	adds	r7, #16
90007778:	46bd      	mov	sp, r7
9000777a:	bd80      	pop	{r7, pc}
9000777c:	2400dad8 	.word	0x2400dad8
90007780:	900145b4 	.word	0x900145b4
90007784:	9001462c 	.word	0x9001462c
90007788:	90014604 	.word	0x90014604

9000778c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
9000778c:	b580      	push	{r7, lr}
9000778e:	b084      	sub	sp, #16
90007790:	af02      	add	r7, sp, #8
90007792:	6078      	str	r0, [r7, #4]
90007794:	6039      	str	r1, [r7, #0]
  lwip_init();
90007796:	f000 ff7d 	bl	90008694 <lwip_init>

  tcpip_init_done = initfunc;
9000779a:	4a17      	ldr	r2, [pc, #92]	; (900077f8 <tcpip_init+0x6c>)
9000779c:	687b      	ldr	r3, [r7, #4]
9000779e:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
900077a0:	4a16      	ldr	r2, [pc, #88]	; (900077fc <tcpip_init+0x70>)
900077a2:	683b      	ldr	r3, [r7, #0]
900077a4:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
900077a6:	2106      	movs	r1, #6
900077a8:	4815      	ldr	r0, [pc, #84]	; (90007800 <tcpip_init+0x74>)
900077aa:	f00b fc57 	bl	9001305c <sys_mbox_new>
900077ae:	4603      	mov	r3, r0
900077b0:	2b00      	cmp	r3, #0
900077b2:	d006      	beq.n	900077c2 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
900077b4:	4b13      	ldr	r3, [pc, #76]	; (90007804 <tcpip_init+0x78>)
900077b6:	f240 2261 	movw	r2, #609	; 0x261
900077ba:	4913      	ldr	r1, [pc, #76]	; (90007808 <tcpip_init+0x7c>)
900077bc:	4813      	ldr	r0, [pc, #76]	; (9000780c <tcpip_init+0x80>)
900077be:	f00b ff3b 	bl	90013638 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
900077c2:	4813      	ldr	r0, [pc, #76]	; (90007810 <tcpip_init+0x84>)
900077c4:	f00b fce4 	bl	90013190 <sys_mutex_new>
900077c8:	4603      	mov	r3, r0
900077ca:	2b00      	cmp	r3, #0
900077cc:	d006      	beq.n	900077dc <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
900077ce:	4b0d      	ldr	r3, [pc, #52]	; (90007804 <tcpip_init+0x78>)
900077d0:	f240 2265 	movw	r2, #613	; 0x265
900077d4:	490f      	ldr	r1, [pc, #60]	; (90007814 <tcpip_init+0x88>)
900077d6:	480d      	ldr	r0, [pc, #52]	; (9000780c <tcpip_init+0x80>)
900077d8:	f00b ff2e 	bl	90013638 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
900077dc:	2300      	movs	r3, #0
900077de:	9300      	str	r3, [sp, #0]
900077e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
900077e4:	2200      	movs	r2, #0
900077e6:	490c      	ldr	r1, [pc, #48]	; (90007818 <tcpip_init+0x8c>)
900077e8:	480c      	ldr	r0, [pc, #48]	; (9000781c <tcpip_init+0x90>)
900077ea:	f00b fd09 	bl	90013200 <sys_thread_new>
}
900077ee:	bf00      	nop
900077f0:	3708      	adds	r7, #8
900077f2:	46bd      	mov	sp, r7
900077f4:	bd80      	pop	{r7, pc}
900077f6:	bf00      	nop
900077f8:	2400dad0 	.word	0x2400dad0
900077fc:	2400dad4 	.word	0x2400dad4
90007800:	2400dad8 	.word	0x2400dad8
90007804:	900145b4 	.word	0x900145b4
90007808:	9001463c 	.word	0x9001463c
9000780c:	90014604 	.word	0x90014604
90007810:	2400dadc 	.word	0x2400dadc
90007814:	90014660 	.word	0x90014660
90007818:	90007549 	.word	0x90007549
9000781c:	90014684 	.word	0x90014684

90007820 <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
90007820:	b580      	push	{r7, lr}
90007822:	b084      	sub	sp, #16
90007824:	af00      	add	r7, sp, #0
90007826:	6078      	str	r0, [r7, #4]
90007828:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
9000782a:	687b      	ldr	r3, [r7, #4]
9000782c:	2b00      	cmp	r3, #0
9000782e:	d002      	beq.n	90007836 <fs_open+0x16>
90007830:	683b      	ldr	r3, [r7, #0]
90007832:	2b00      	cmp	r3, #0
90007834:	d102      	bne.n	9000783c <fs_open+0x1c>
    return ERR_ARG;
90007836:	f06f 030f 	mvn.w	r3, #15
9000783a:	e028      	b.n	9000788e <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
9000783c:	4b16      	ldr	r3, [pc, #88]	; (90007898 <fs_open+0x78>)
9000783e:	60fb      	str	r3, [r7, #12]
90007840:	e020      	b.n	90007884 <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
90007842:	68fb      	ldr	r3, [r7, #12]
90007844:	685b      	ldr	r3, [r3, #4]
90007846:	4619      	mov	r1, r3
90007848:	6838      	ldr	r0, [r7, #0]
9000784a:	f7f8 fd49 	bl	900002e0 <strcmp>
9000784e:	4603      	mov	r3, r0
90007850:	2b00      	cmp	r3, #0
90007852:	d114      	bne.n	9000787e <fs_open+0x5e>
      file->data = (const char *)f->data;
90007854:	68fb      	ldr	r3, [r7, #12]
90007856:	689a      	ldr	r2, [r3, #8]
90007858:	687b      	ldr	r3, [r7, #4]
9000785a:	601a      	str	r2, [r3, #0]
      file->len = f->len;
9000785c:	68fb      	ldr	r3, [r7, #12]
9000785e:	68da      	ldr	r2, [r3, #12]
90007860:	687b      	ldr	r3, [r7, #4]
90007862:	605a      	str	r2, [r3, #4]
      file->index = f->len;
90007864:	68fb      	ldr	r3, [r7, #12]
90007866:	68da      	ldr	r2, [r3, #12]
90007868:	687b      	ldr	r3, [r7, #4]
9000786a:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
9000786c:	687b      	ldr	r3, [r7, #4]
9000786e:	2200      	movs	r2, #0
90007870:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
90007872:	68fb      	ldr	r3, [r7, #12]
90007874:	7c1a      	ldrb	r2, [r3, #16]
90007876:	687b      	ldr	r3, [r7, #4]
90007878:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
9000787a:	2300      	movs	r3, #0
9000787c:	e007      	b.n	9000788e <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
9000787e:	68fb      	ldr	r3, [r7, #12]
90007880:	681b      	ldr	r3, [r3, #0]
90007882:	60fb      	str	r3, [r7, #12]
90007884:	68fb      	ldr	r3, [r7, #12]
90007886:	2b00      	cmp	r3, #0
90007888:	d1db      	bne.n	90007842 <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
9000788a:	f06f 0305 	mvn.w	r3, #5
}
9000788e:	4618      	mov	r0, r3
90007890:	3710      	adds	r7, #16
90007892:	46bd      	mov	sp, r7
90007894:	bd80      	pop	{r7, pc}
90007896:	bf00      	nop
90007898:	90017384 	.word	0x90017384

9000789c <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
9000789c:	b480      	push	{r7}
9000789e:	b083      	sub	sp, #12
900078a0:	af00      	add	r7, sp, #0
900078a2:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
900078a4:	bf00      	nop
900078a6:	370c      	adds	r7, #12
900078a8:	46bd      	mov	sp, r7
900078aa:	f85d 7b04 	ldr.w	r7, [sp], #4
900078ae:	4770      	bx	lr

900078b0 <fs_bytes_left>:
}
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
900078b0:	b480      	push	{r7}
900078b2:	b083      	sub	sp, #12
900078b4:	af00      	add	r7, sp, #0
900078b6:	6078      	str	r0, [r7, #4]
  return file->len - file->index;
900078b8:	687b      	ldr	r3, [r7, #4]
900078ba:	685a      	ldr	r2, [r3, #4]
900078bc:	687b      	ldr	r3, [r7, #4]
900078be:	689b      	ldr	r3, [r3, #8]
900078c0:	1ad3      	subs	r3, r2, r3
}
900078c2:	4618      	mov	r0, r3
900078c4:	370c      	adds	r7, #12
900078c6:	46bd      	mov	sp, r7
900078c8:	f85d 7b04 	ldr.w	r7, [sp], #4
900078cc:	4770      	bx	lr

900078ce <http_state_init>:

/** Initialize a struct http_state.
 */
static void
http_state_init(struct http_state *hs)
{
900078ce:	b580      	push	{r7, lr}
900078d0:	b082      	sub	sp, #8
900078d2:	af00      	add	r7, sp, #0
900078d4:	6078      	str	r0, [r7, #4]
  /* Initialize the structure. */
  memset(hs, 0, sizeof(struct http_state));
900078d6:	222c      	movs	r2, #44	; 0x2c
900078d8:	2100      	movs	r1, #0
900078da:	6878      	ldr	r0, [r7, #4]
900078dc:	f00b fe0f 	bl	900134fe <memset>
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Indicate that the headers are not yet valid */
  hs->hdr_index = NUM_FILE_HDR_STRINGS;
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */
}
900078e0:	bf00      	nop
900078e2:	3708      	adds	r7, #8
900078e4:	46bd      	mov	sp, r7
900078e6:	bd80      	pop	{r7, pc}

900078e8 <http_state_alloc>:

/** Allocate a struct http_state. */
static struct http_state *
http_state_alloc(void)
{
900078e8:	b580      	push	{r7, lr}
900078ea:	b082      	sub	sp, #8
900078ec:	af00      	add	r7, sp, #0
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
900078ee:	202c      	movs	r0, #44	; 0x2c
900078f0:	f001 f9de 	bl	90008cb0 <mem_malloc>
900078f4:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(0);
    ret = HTTP_ALLOC_HTTP_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
900078f6:	687b      	ldr	r3, [r7, #4]
900078f8:	2b00      	cmp	r3, #0
900078fa:	d002      	beq.n	90007902 <http_state_alloc+0x1a>
    http_state_init(ret);
900078fc:	6878      	ldr	r0, [r7, #4]
900078fe:	f7ff ffe6 	bl	900078ce <http_state_init>
    http_add_connection(ret);
  }
  return ret;
90007902:	687b      	ldr	r3, [r7, #4]
}
90007904:	4618      	mov	r0, r3
90007906:	3708      	adds	r7, #8
90007908:	46bd      	mov	sp, r7
9000790a:	bd80      	pop	{r7, pc}

9000790c <http_state_eof>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_eof(struct http_state *hs)
{
9000790c:	b580      	push	{r7, lr}
9000790e:	b082      	sub	sp, #8
90007910:	af00      	add	r7, sp, #0
90007912:	6078      	str	r0, [r7, #4]
  if (hs->handle) {
90007914:	687b      	ldr	r3, [r7, #4]
90007916:	695b      	ldr	r3, [r3, #20]
90007918:	2b00      	cmp	r3, #0
9000791a:	d007      	beq.n	9000792c <http_state_eof+0x20>
    u32_t ms_needed = sys_now() - hs->time_started;
    u32_t needed = LWIP_MAX(1, (ms_needed / 100));
    LWIP_DEBUGF(HTTPD_DEBUG_TIMING, ("httpd: needed %"U32_F" ms to send file of %d bytes -> %"U32_F" bytes/sec\n",
                                     ms_needed, hs->handle->len, ((((u32_t)hs->handle->len) * 10) / needed)));
#endif /* LWIP_HTTPD_TIMING */
    fs_close(hs->handle);
9000791c:	687b      	ldr	r3, [r7, #4]
9000791e:	695b      	ldr	r3, [r3, #20]
90007920:	4618      	mov	r0, r3
90007922:	f7ff ffbb 	bl	9000789c <fs_close>
    hs->handle = NULL;
90007926:	687b      	ldr	r3, [r7, #4]
90007928:	2200      	movs	r2, #0
9000792a:	615a      	str	r2, [r3, #20]
    http_ssi_state_free(hs->ssi);
    hs->ssi = NULL;
  }
#endif /* LWIP_HTTPD_SSI */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  if (hs->req) {
9000792c:	687b      	ldr	r3, [r7, #4]
9000792e:	6a1b      	ldr	r3, [r3, #32]
90007930:	2b00      	cmp	r3, #0
90007932:	d007      	beq.n	90007944 <http_state_eof+0x38>
    pbuf_free(hs->req);
90007934:	687b      	ldr	r3, [r7, #4]
90007936:	6a1b      	ldr	r3, [r3, #32]
90007938:	4618      	mov	r0, r3
9000793a:	f002 fa7b 	bl	90009e34 <pbuf_free>
    hs->req = NULL;
9000793e:	687b      	ldr	r3, [r7, #4]
90007940:	2200      	movs	r2, #0
90007942:	621a      	str	r2, [r3, #32]
  }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
90007944:	bf00      	nop
90007946:	3708      	adds	r7, #8
90007948:	46bd      	mov	sp, r7
9000794a:	bd80      	pop	{r7, pc}

9000794c <http_state_free>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_free(struct http_state *hs)
{
9000794c:	b580      	push	{r7, lr}
9000794e:	b082      	sub	sp, #8
90007950:	af00      	add	r7, sp, #0
90007952:	6078      	str	r0, [r7, #4]
  if (hs != NULL) {
90007954:	687b      	ldr	r3, [r7, #4]
90007956:	2b00      	cmp	r3, #0
90007958:	d005      	beq.n	90007966 <http_state_free+0x1a>
    http_state_eof(hs);
9000795a:	6878      	ldr	r0, [r7, #4]
9000795c:	f7ff ffd6 	bl	9000790c <http_state_eof>
    http_remove_connection(hs);
    HTTP_FREE_HTTP_STATE(hs);
90007960:	6878      	ldr	r0, [r7, #4]
90007962:	f001 f805 	bl	90008970 <mem_free>
  }
}
90007966:	bf00      	nop
90007968:	3708      	adds	r7, #8
9000796a:	46bd      	mov	sp, r7
9000796c:	bd80      	pop	{r7, pc}
	...

90007970 <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct altcp_pcb *pcb, const void *ptr, u16_t *length, u8_t apiflags)
{
90007970:	b580      	push	{r7, lr}
90007972:	b086      	sub	sp, #24
90007974:	af00      	add	r7, sp, #0
90007976:	60f8      	str	r0, [r7, #12]
90007978:	60b9      	str	r1, [r7, #8]
9000797a:	607a      	str	r2, [r7, #4]
9000797c:	70fb      	strb	r3, [r7, #3]
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
9000797e:	687b      	ldr	r3, [r7, #4]
90007980:	2b00      	cmp	r3, #0
90007982:	d106      	bne.n	90007992 <http_write+0x22>
90007984:	4b2c      	ldr	r3, [pc, #176]	; (90007a38 <http_write+0xc8>)
90007986:	f240 2219 	movw	r2, #537	; 0x219
9000798a:	492c      	ldr	r1, [pc, #176]	; (90007a3c <http_write+0xcc>)
9000798c:	482c      	ldr	r0, [pc, #176]	; (90007a40 <http_write+0xd0>)
9000798e:	f00b fe53 	bl	90013638 <iprintf>
  len = *length;
90007992:	687b      	ldr	r3, [r7, #4]
90007994:	881b      	ldrh	r3, [r3, #0]
90007996:	82fb      	strh	r3, [r7, #22]
  if (len == 0) {
90007998:	8afb      	ldrh	r3, [r7, #22]
9000799a:	2b00      	cmp	r3, #0
9000799c:	d101      	bne.n	900079a2 <http_write+0x32>
    return ERR_OK;
9000799e:	2300      	movs	r3, #0
900079a0:	e045      	b.n	90007a2e <http_write+0xbe>
  }
  /* We cannot send more data than space available in the send buffer. */
  max_len = altcp_sndbuf(pcb);
900079a2:	68fb      	ldr	r3, [r7, #12]
900079a4:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
900079a8:	82bb      	strh	r3, [r7, #20]
  if (max_len < len) {
900079aa:	8aba      	ldrh	r2, [r7, #20]
900079ac:	8afb      	ldrh	r3, [r7, #22]
900079ae:	429a      	cmp	r2, r3
900079b0:	d201      	bcs.n	900079b6 <http_write+0x46>
    len = max_len;
900079b2:	8abb      	ldrh	r3, [r7, #20]
900079b4:	82fb      	strh	r3, [r7, #22]
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
900079b6:	68fb      	ldr	r3, [r7, #12]
900079b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
900079ba:	005b      	lsls	r3, r3, #1
900079bc:	82bb      	strh	r3, [r7, #20]
  if (len > max_len) {
900079be:	8afa      	ldrh	r2, [r7, #22]
900079c0:	8abb      	ldrh	r3, [r7, #20]
900079c2:	429a      	cmp	r2, r3
900079c4:	d901      	bls.n	900079ca <http_write+0x5a>
    len = max_len;
900079c6:	8abb      	ldrh	r3, [r7, #20]
900079c8:	82fb      	strh	r3, [r7, #22]
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying to send %d bytes\n", len));
    err = altcp_write(pcb, ptr, len, apiflags);
900079ca:	78fb      	ldrb	r3, [r7, #3]
900079cc:	8afa      	ldrh	r2, [r7, #22]
900079ce:	68b9      	ldr	r1, [r7, #8]
900079d0:	68f8      	ldr	r0, [r7, #12]
900079d2:	f006 ffc3 	bl	9000e95c <tcp_write>
900079d6:	4603      	mov	r3, r0
900079d8:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_MEM) {
900079da:	f997 3013 	ldrsb.w	r3, [r7, #19]
900079de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
900079e2:	d10f      	bne.n	90007a04 <http_write+0x94>
      if ((altcp_sndbuf(pcb) == 0) ||
900079e4:	68fb      	ldr	r3, [r7, #12]
900079e6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
900079ea:	2b00      	cmp	r3, #0
900079ec:	d004      	beq.n	900079f8 <http_write+0x88>
          (altcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
900079ee:	68fb      	ldr	r3, [r7, #12]
900079f0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      if ((altcp_sndbuf(pcb) == 0) ||
900079f4:	2b08      	cmp	r3, #8
900079f6:	d902      	bls.n	900079fe <http_write+0x8e>
        /* no need to try smaller sizes */
        len = 1;
900079f8:	2301      	movs	r3, #1
900079fa:	82fb      	strh	r3, [r7, #22]
900079fc:	e002      	b.n	90007a04 <http_write+0x94>
      } else {
        len /= 2;
900079fe:	8afb      	ldrh	r3, [r7, #22]
90007a00:	085b      	lsrs	r3, r3, #1
90007a02:	82fb      	strh	r3, [r7, #22]
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE,
                  ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));
90007a04:	f997 3013 	ldrsb.w	r3, [r7, #19]
90007a08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
90007a0c:	d102      	bne.n	90007a14 <http_write+0xa4>
90007a0e:	8afb      	ldrh	r3, [r7, #22]
90007a10:	2b01      	cmp	r3, #1
90007a12:	d8da      	bhi.n	900079ca <http_write+0x5a>

  if (err == ERR_OK) {
90007a14:	f997 3013 	ldrsb.w	r3, [r7, #19]
90007a18:	2b00      	cmp	r3, #0
90007a1a:	d103      	bne.n	90007a24 <http_write+0xb4>
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
90007a1c:	687b      	ldr	r3, [r7, #4]
90007a1e:	8afa      	ldrh	r2, [r7, #22]
90007a20:	801a      	strh	r2, [r3, #0]
90007a22:	e002      	b.n	90007a2a <http_write+0xba>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
90007a24:	687b      	ldr	r3, [r7, #4]
90007a26:	2200      	movs	r2, #0
90007a28:	801a      	strh	r2, [r3, #0]
     when all data has been enqueued but the connection stays open for the next
     request */
  altcp_nagle_enable(pcb);
#endif

  return err;
90007a2a:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
90007a2e:	4618      	mov	r0, r3
90007a30:	3718      	adds	r7, #24
90007a32:	46bd      	mov	sp, r7
90007a34:	bd80      	pop	{r7, pc}
90007a36:	bf00      	nop
90007a38:	900146d4 	.word	0x900146d4
90007a3c:	9001470c 	.word	0x9001470c
90007a40:	9001471c 	.word	0x9001471c

90007a44 <http_close_or_abort_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_or_abort_conn(struct altcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
{
90007a44:	b580      	push	{r7, lr}
90007a46:	b086      	sub	sp, #24
90007a48:	af00      	add	r7, sp, #0
90007a4a:	60f8      	str	r0, [r7, #12]
90007a4c:	60b9      	str	r1, [r7, #8]
90007a4e:	4613      	mov	r3, r2
90007a50:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_POST*/


  altcp_arg(pcb, NULL);
90007a52:	2100      	movs	r1, #0
90007a54:	68f8      	ldr	r0, [r7, #12]
90007a56:	f004 f83f 	bl	9000bad8 <tcp_arg>
  altcp_recv(pcb, NULL);
90007a5a:	2100      	movs	r1, #0
90007a5c:	68f8      	ldr	r0, [r7, #12]
90007a5e:	f004 f84d 	bl	9000bafc <tcp_recv>
  altcp_err(pcb, NULL);
90007a62:	2100      	movs	r1, #0
90007a64:	68f8      	ldr	r0, [r7, #12]
90007a66:	f004 f88d 	bl	9000bb84 <tcp_err>
  altcp_poll(pcb, NULL, 0);
90007a6a:	2200      	movs	r2, #0
90007a6c:	2100      	movs	r1, #0
90007a6e:	68f8      	ldr	r0, [r7, #12]
90007a70:	f004 f8c2 	bl	9000bbf8 <tcp_poll>
  altcp_sent(pcb, NULL);
90007a74:	2100      	movs	r1, #0
90007a76:	68f8      	ldr	r0, [r7, #12]
90007a78:	f004 f862 	bl	9000bb40 <tcp_sent>
  if (hs != NULL) {
90007a7c:	68bb      	ldr	r3, [r7, #8]
90007a7e:	2b00      	cmp	r3, #0
90007a80:	d002      	beq.n	90007a88 <http_close_or_abort_conn+0x44>
    http_state_free(hs);
90007a82:	68b8      	ldr	r0, [r7, #8]
90007a84:	f7ff ff62 	bl	9000794c <http_state_free>
  }

  if (abort_conn) {
90007a88:	79fb      	ldrb	r3, [r7, #7]
90007a8a:	2b00      	cmp	r3, #0
90007a8c:	d004      	beq.n	90007a98 <http_close_or_abort_conn+0x54>
    altcp_abort(pcb);
90007a8e:	68f8      	ldr	r0, [r7, #12]
90007a90:	f002 ff64 	bl	9000a95c <tcp_abort>
    return ERR_OK;
90007a94:	2300      	movs	r3, #0
90007a96:	e00f      	b.n	90007ab8 <http_close_or_abort_conn+0x74>
  }
  err = altcp_close(pcb);
90007a98:	68f8      	ldr	r0, [r7, #12]
90007a9a:	f002 fe75 	bl	9000a788 <tcp_close>
90007a9e:	4603      	mov	r3, r0
90007aa0:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
90007aa2:	f997 3017 	ldrsb.w	r3, [r7, #23]
90007aa6:	2b00      	cmp	r3, #0
90007aa8:	d004      	beq.n	90007ab4 <http_close_or_abort_conn+0x70>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error %d closing %p\n", err, (void *)pcb));
    /* error closing, try again later in poll */
    altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
90007aaa:	2204      	movs	r2, #4
90007aac:	4904      	ldr	r1, [pc, #16]	; (90007ac0 <http_close_or_abort_conn+0x7c>)
90007aae:	68f8      	ldr	r0, [r7, #12]
90007ab0:	f004 f8a2 	bl	9000bbf8 <tcp_poll>
  }
  return err;
90007ab4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
90007ab8:	4618      	mov	r0, r3
90007aba:	3718      	adds	r7, #24
90007abc:	46bd      	mov	sp, r7
90007abe:	bd80      	pop	{r7, pc}
90007ac0:	90008187 	.word	0x90008187

90007ac4 <http_close_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_conn(struct altcp_pcb *pcb, struct http_state *hs)
{
90007ac4:	b580      	push	{r7, lr}
90007ac6:	b082      	sub	sp, #8
90007ac8:	af00      	add	r7, sp, #0
90007aca:	6078      	str	r0, [r7, #4]
90007acc:	6039      	str	r1, [r7, #0]
  return http_close_or_abort_conn(pcb, hs, 0);
90007ace:	2200      	movs	r2, #0
90007ad0:	6839      	ldr	r1, [r7, #0]
90007ad2:	6878      	ldr	r0, [r7, #4]
90007ad4:	f7ff ffb6 	bl	90007a44 <http_close_or_abort_conn>
90007ad8:	4603      	mov	r3, r0
}
90007ada:	4618      	mov	r0, r3
90007adc:	3708      	adds	r7, #8
90007ade:	46bd      	mov	sp, r7
90007ae0:	bd80      	pop	{r7, pc}

90007ae2 <http_eof>:
/** End of file: either close the connection (Connection: close) or
 * close the file (Connection: keep-alive)
 */
static void
http_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
90007ae2:	b580      	push	{r7, lr}
90007ae4:	b082      	sub	sp, #8
90007ae6:	af00      	add	r7, sp, #0
90007ae8:	6078      	str	r0, [r7, #4]
90007aea:	6039      	str	r1, [r7, #0]
    /* ensure nagle doesn't interfere with sending all data as fast as possible: */
    altcp_nagle_disable(pcb);
  } else
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  {
    http_close_conn(pcb, hs);
90007aec:	6839      	ldr	r1, [r7, #0]
90007aee:	6878      	ldr	r0, [r7, #4]
90007af0:	f7ff ffe8 	bl	90007ac4 <http_close_conn>
  }
}
90007af4:	bf00      	nop
90007af6:	3708      	adds	r7, #8
90007af8:	46bd      	mov	sp, r7
90007afa:	bd80      	pop	{r7, pc}

90007afc <http_check_eof>:
 * @returns: 0 if the file is finished or no data has been read
 *           1 if the file is not finished and data has been read
 */
static u8_t
http_check_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
90007afc:	b580      	push	{r7, lr}
90007afe:	b084      	sub	sp, #16
90007b00:	af00      	add	r7, sp, #0
90007b02:	6078      	str	r0, [r7, #4]
90007b04:	6039      	str	r1, [r7, #0]
  int max_write_len;
#endif /* HTTPD_MAX_WRITE_LEN */
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */

  /* Do we have a valid file handle? */
  if (hs->handle == NULL) {
90007b06:	683b      	ldr	r3, [r7, #0]
90007b08:	695b      	ldr	r3, [r3, #20]
90007b0a:	2b00      	cmp	r3, #0
90007b0c:	d105      	bne.n	90007b1a <http_check_eof+0x1e>
    /* No - close the connection. */
    http_eof(pcb, hs);
90007b0e:	6839      	ldr	r1, [r7, #0]
90007b10:	6878      	ldr	r0, [r7, #4]
90007b12:	f7ff ffe6 	bl	90007ae2 <http_eof>
    return 0;
90007b16:	2300      	movs	r3, #0
90007b18:	e016      	b.n	90007b48 <http_check_eof+0x4c>
  }
  bytes_left = fs_bytes_left(hs->handle);
90007b1a:	683b      	ldr	r3, [r7, #0]
90007b1c:	695b      	ldr	r3, [r3, #20]
90007b1e:	4618      	mov	r0, r3
90007b20:	f7ff fec6 	bl	900078b0 <fs_bytes_left>
90007b24:	60f8      	str	r0, [r7, #12]
  if (bytes_left <= 0) {
90007b26:	68fb      	ldr	r3, [r7, #12]
90007b28:	2b00      	cmp	r3, #0
90007b2a:	dc05      	bgt.n	90007b38 <http_check_eof+0x3c>
    /* We reached the end of the file so this request is done. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
90007b2c:	6839      	ldr	r1, [r7, #0]
90007b2e:	6878      	ldr	r0, [r7, #4]
90007b30:	f7ff ffd7 	bl	90007ae2 <http_eof>
    return 0;
90007b34:	2300      	movs	r3, #0
90007b36:	e007      	b.n	90007b48 <http_check_eof+0x4c>
    hs->ssi->parse_left = count;
    hs->ssi->parsed = hs->buf;
  }
#endif /* LWIP_HTTPD_SSI */
#else /* LWIP_HTTPD_DYNAMIC_FILE_READ */
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
90007b38:	4b05      	ldr	r3, [pc, #20]	; (90007b50 <http_check_eof+0x54>)
90007b3a:	f240 429d 	movw	r2, #1181	; 0x49d
90007b3e:	4905      	ldr	r1, [pc, #20]	; (90007b54 <http_check_eof+0x58>)
90007b40:	4805      	ldr	r0, [pc, #20]	; (90007b58 <http_check_eof+0x5c>)
90007b42:	f00b fd79 	bl	90013638 <iprintf>
#endif /* LWIP_HTTPD_SSI || LWIP_HTTPD_DYNAMIC_HEADERS */
  return 1;
90007b46:	2301      	movs	r3, #1
}
90007b48:	4618      	mov	r0, r3
90007b4a:	3710      	adds	r7, #16
90007b4c:	46bd      	mov	sp, r7
90007b4e:	bd80      	pop	{r7, pc}
90007b50:	900146d4 	.word	0x900146d4
90007b54:	90014744 	.word	0x90014744
90007b58:	9001471c 	.word	0x9001471c

90007b5c <http_send_data_nonssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_nonssi(struct altcp_pcb *pcb, struct http_state *hs)
{
90007b5c:	b580      	push	{r7, lr}
90007b5e:	b084      	sub	sp, #16
90007b60:	af00      	add	r7, sp, #0
90007b62:	6078      	str	r0, [r7, #4]
90007b64:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = 0;
90007b66:	2300      	movs	r3, #0
90007b68:	73fb      	strb	r3, [r7, #15]

  /* We are not processing an SHTML file so no tag checking is necessary.
   * Just send the data as we received it from the file. */
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
90007b6a:	683b      	ldr	r3, [r7, #0]
90007b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90007b6e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
90007b72:	4293      	cmp	r3, r2
90007b74:	d803      	bhi.n	90007b7e <http_send_data_nonssi+0x22>
90007b76:	683b      	ldr	r3, [r7, #0]
90007b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90007b7a:	b29b      	uxth	r3, r3
90007b7c:	e001      	b.n	90007b82 <http_send_data_nonssi+0x26>
90007b7e:	f64f 73ff 	movw	r3, #65535	; 0xffff
90007b82:	81bb      	strh	r3, [r7, #12]

  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
90007b84:	683b      	ldr	r3, [r7, #0]
90007b86:	6999      	ldr	r1, [r3, #24]
90007b88:	f107 020c 	add.w	r2, r7, #12
90007b8c:	2300      	movs	r3, #0
90007b8e:	6878      	ldr	r0, [r7, #4]
90007b90:	f7ff feee 	bl	90007970 <http_write>
90007b94:	4603      	mov	r3, r0
90007b96:	73bb      	strb	r3, [r7, #14]
  if (err == ERR_OK) {
90007b98:	f997 300e 	ldrsb.w	r3, [r7, #14]
90007b9c:	2b00      	cmp	r3, #0
90007b9e:	d10d      	bne.n	90007bbc <http_send_data_nonssi+0x60>
    data_to_send = 1;
90007ba0:	2301      	movs	r3, #1
90007ba2:	73fb      	strb	r3, [r7, #15]
    hs->file += len;
90007ba4:	683b      	ldr	r3, [r7, #0]
90007ba6:	699b      	ldr	r3, [r3, #24]
90007ba8:	89ba      	ldrh	r2, [r7, #12]
90007baa:	441a      	add	r2, r3
90007bac:	683b      	ldr	r3, [r7, #0]
90007bae:	619a      	str	r2, [r3, #24]
    hs->left -= len;
90007bb0:	683b      	ldr	r3, [r7, #0]
90007bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90007bb4:	89ba      	ldrh	r2, [r7, #12]
90007bb6:	1a9a      	subs	r2, r3, r2
90007bb8:	683b      	ldr	r3, [r7, #0]
90007bba:	625a      	str	r2, [r3, #36]	; 0x24
  }

  return data_to_send;
90007bbc:	7bfb      	ldrb	r3, [r7, #15]
}
90007bbe:	4618      	mov	r0, r3
90007bc0:	3710      	adds	r7, #16
90007bc2:	46bd      	mov	sp, r7
90007bc4:	bd80      	pop	{r7, pc}

90007bc6 <http_send>:
 * @param pcb the pcb to send data
 * @param hs connection state
 */
static u8_t
http_send(struct altcp_pcb *pcb, struct http_state *hs)
{
90007bc6:	b580      	push	{r7, lr}
90007bc8:	b084      	sub	sp, #16
90007bca:	af00      	add	r7, sp, #0
90007bcc:	6078      	str	r0, [r7, #4]
90007bce:	6039      	str	r1, [r7, #0]
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
90007bd0:	2300      	movs	r3, #0
90007bd2:	73fb      	strb	r3, [r7, #15]
    return 0;
  }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */

  /* If we were passed a NULL state structure pointer, ignore the call. */
  if (hs == NULL) {
90007bd4:	683b      	ldr	r3, [r7, #0]
90007bd6:	2b00      	cmp	r3, #0
90007bd8:	d101      	bne.n	90007bde <http_send+0x18>
    return 0;
90007bda:	2300      	movs	r3, #0
90007bdc:	e025      	b.n	90007c2a <http_send+0x64>
  }
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */

  /* Have we run out of file data to send? If so, we need to read the next
   * block from the file. */
  if (hs->left == 0) {
90007bde:	683b      	ldr	r3, [r7, #0]
90007be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90007be2:	2b00      	cmp	r3, #0
90007be4:	d108      	bne.n	90007bf8 <http_send+0x32>
    if (!http_check_eof(pcb, hs)) {
90007be6:	6839      	ldr	r1, [r7, #0]
90007be8:	6878      	ldr	r0, [r7, #4]
90007bea:	f7ff ff87 	bl	90007afc <http_check_eof>
90007bee:	4603      	mov	r3, r0
90007bf0:	2b00      	cmp	r3, #0
90007bf2:	d101      	bne.n	90007bf8 <http_send+0x32>
      return 0;
90007bf4:	2300      	movs	r3, #0
90007bf6:	e018      	b.n	90007c2a <http_send+0x64>
  if (hs->ssi) {
    data_to_send = http_send_data_ssi(pcb, hs);
  } else
#endif /* LWIP_HTTPD_SSI */
  {
    data_to_send = http_send_data_nonssi(pcb, hs);
90007bf8:	6839      	ldr	r1, [r7, #0]
90007bfa:	6878      	ldr	r0, [r7, #4]
90007bfc:	f7ff ffae 	bl	90007b5c <http_send_data_nonssi>
90007c00:	4603      	mov	r3, r0
90007c02:	73fb      	strb	r3, [r7, #15]
  }

  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
90007c04:	683b      	ldr	r3, [r7, #0]
90007c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90007c08:	2b00      	cmp	r3, #0
90007c0a:	d10d      	bne.n	90007c28 <http_send+0x62>
90007c0c:	683b      	ldr	r3, [r7, #0]
90007c0e:	695b      	ldr	r3, [r3, #20]
90007c10:	4618      	mov	r0, r3
90007c12:	f7ff fe4d 	bl	900078b0 <fs_bytes_left>
90007c16:	4603      	mov	r3, r0
90007c18:	2b00      	cmp	r3, #0
90007c1a:	dc05      	bgt.n	90007c28 <http_send+0x62>
    /* We reached the end of the file so this request is done.
     * This adds the FIN flag right into the last data segment. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
90007c1c:	6839      	ldr	r1, [r7, #0]
90007c1e:	6878      	ldr	r0, [r7, #4]
90007c20:	f7ff ff5f 	bl	90007ae2 <http_eof>
    return 0;
90007c24:	2300      	movs	r3, #0
90007c26:	e000      	b.n	90007c2a <http_send+0x64>
  }
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("send_data end.\n"));
  return data_to_send;
90007c28:	7bfb      	ldrb	r3, [r7, #15]
}
90007c2a:	4618      	mov	r0, r3
90007c2c:	3710      	adds	r7, #16
90007c2e:	46bd      	mov	sp, r7
90007c30:	bd80      	pop	{r7, pc}
	...

90007c34 <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
90007c34:	b580      	push	{r7, lr}
90007c36:	b084      	sub	sp, #16
90007c38:	af00      	add	r7, sp, #0
90007c3a:	6078      	str	r0, [r7, #4]
90007c3c:	6039      	str	r1, [r7, #0]
  err_t err;

  *uri = "/404.html";
90007c3e:	683b      	ldr	r3, [r7, #0]
90007c40:	4a1c      	ldr	r2, [pc, #112]	; (90007cb4 <http_get_404_file+0x80>)
90007c42:	601a      	str	r2, [r3, #0]
  err = fs_open(&hs->file_handle, *uri);
90007c44:	687a      	ldr	r2, [r7, #4]
90007c46:	683b      	ldr	r3, [r7, #0]
90007c48:	681b      	ldr	r3, [r3, #0]
90007c4a:	4619      	mov	r1, r3
90007c4c:	4610      	mov	r0, r2
90007c4e:	f7ff fde7 	bl	90007820 <fs_open>
90007c52:	4603      	mov	r3, r0
90007c54:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
90007c56:	f997 300f 	ldrsb.w	r3, [r7, #15]
90007c5a:	2b00      	cmp	r3, #0
90007c5c:	d024      	beq.n	90007ca8 <http_get_404_file+0x74>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
90007c5e:	683b      	ldr	r3, [r7, #0]
90007c60:	4a15      	ldr	r2, [pc, #84]	; (90007cb8 <http_get_404_file+0x84>)
90007c62:	601a      	str	r2, [r3, #0]
    err = fs_open(&hs->file_handle, *uri);
90007c64:	687a      	ldr	r2, [r7, #4]
90007c66:	683b      	ldr	r3, [r7, #0]
90007c68:	681b      	ldr	r3, [r3, #0]
90007c6a:	4619      	mov	r1, r3
90007c6c:	4610      	mov	r0, r2
90007c6e:	f7ff fdd7 	bl	90007820 <fs_open>
90007c72:	4603      	mov	r3, r0
90007c74:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
90007c76:	f997 300f 	ldrsb.w	r3, [r7, #15]
90007c7a:	2b00      	cmp	r3, #0
90007c7c:	d014      	beq.n	90007ca8 <http_get_404_file+0x74>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
90007c7e:	683b      	ldr	r3, [r7, #0]
90007c80:	4a0e      	ldr	r2, [pc, #56]	; (90007cbc <http_get_404_file+0x88>)
90007c82:	601a      	str	r2, [r3, #0]
      err = fs_open(&hs->file_handle, *uri);
90007c84:	687a      	ldr	r2, [r7, #4]
90007c86:	683b      	ldr	r3, [r7, #0]
90007c88:	681b      	ldr	r3, [r3, #0]
90007c8a:	4619      	mov	r1, r3
90007c8c:	4610      	mov	r0, r2
90007c8e:	f7ff fdc7 	bl	90007820 <fs_open>
90007c92:	4603      	mov	r3, r0
90007c94:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
90007c96:	f997 300f 	ldrsb.w	r3, [r7, #15]
90007c9a:	2b00      	cmp	r3, #0
90007c9c:	d004      	beq.n	90007ca8 <http_get_404_file+0x74>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
90007c9e:	683b      	ldr	r3, [r7, #0]
90007ca0:	2200      	movs	r2, #0
90007ca2:	601a      	str	r2, [r3, #0]
        return NULL;
90007ca4:	2300      	movs	r3, #0
90007ca6:	e000      	b.n	90007caa <http_get_404_file+0x76>
      }
    }
  }

  return &hs->file_handle;
90007ca8:	687b      	ldr	r3, [r7, #4]
}
90007caa:	4618      	mov	r0, r3
90007cac:	3710      	adds	r7, #16
90007cae:	46bd      	mov	sp, r7
90007cb0:	bd80      	pop	{r7, pc}
90007cb2:	bf00      	nop
90007cb4:	9001477c 	.word	0x9001477c
90007cb8:	90014788 	.word	0x90014788
90007cbc:	90014794 	.word	0x90014794

90007cc0 <http_parse_request>:
 *         ERR_INPROGRESS if request was OK so far but not fully received
 *         another err_t otherwise
 */
static err_t
http_parse_request(struct pbuf *inp, struct http_state *hs, struct altcp_pcb *pcb)
{
90007cc0:	b580      	push	{r7, lr}
90007cc2:	b08e      	sub	sp, #56	; 0x38
90007cc4:	af00      	add	r7, sp, #0
90007cc6:	60f8      	str	r0, [r7, #12]
90007cc8:	60b9      	str	r1, [r7, #8]
90007cca:	607a      	str	r2, [r7, #4]
  char *data;
  char *crlf;
  u16_t data_len;
  struct pbuf *p = inp;
90007ccc:	68fb      	ldr	r3, [r7, #12]
90007cce:	627b      	str	r3, [r7, #36]	; 0x24
#if LWIP_HTTPD_SUPPORT_POST
  err_t err;
#endif /* LWIP_HTTPD_SUPPORT_POST */

  LWIP_UNUSED_ARG(pcb); /* only used for post */
  LWIP_ASSERT("p != NULL", p != NULL);
90007cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90007cd2:	2b00      	cmp	r3, #0
90007cd4:	d106      	bne.n	90007ce4 <http_parse_request+0x24>
90007cd6:	4b65      	ldr	r3, [pc, #404]	; (90007e6c <http_parse_request+0x1ac>)
90007cd8:	f240 72ae 	movw	r2, #1966	; 0x7ae
90007cdc:	4964      	ldr	r1, [pc, #400]	; (90007e70 <http_parse_request+0x1b0>)
90007cde:	4865      	ldr	r0, [pc, #404]	; (90007e74 <http_parse_request+0x1b4>)
90007ce0:	f00b fcaa 	bl	90013638 <iprintf>
  LWIP_ASSERT("hs != NULL", hs != NULL);
90007ce4:	68bb      	ldr	r3, [r7, #8]
90007ce6:	2b00      	cmp	r3, #0
90007ce8:	d106      	bne.n	90007cf8 <http_parse_request+0x38>
90007cea:	4b60      	ldr	r3, [pc, #384]	; (90007e6c <http_parse_request+0x1ac>)
90007cec:	f240 72af 	movw	r2, #1967	; 0x7af
90007cf0:	4961      	ldr	r1, [pc, #388]	; (90007e78 <http_parse_request+0x1b8>)
90007cf2:	4860      	ldr	r0, [pc, #384]	; (90007e74 <http_parse_request+0x1b4>)
90007cf4:	f00b fca0 	bl	90013638 <iprintf>

  if ((hs->handle != NULL) || (hs->file != NULL)) {
90007cf8:	68bb      	ldr	r3, [r7, #8]
90007cfa:	695b      	ldr	r3, [r3, #20]
90007cfc:	2b00      	cmp	r3, #0
90007cfe:	d103      	bne.n	90007d08 <http_parse_request+0x48>
90007d00:	68bb      	ldr	r3, [r7, #8]
90007d02:	699b      	ldr	r3, [r3, #24]
90007d04:	2b00      	cmp	r3, #0
90007d06:	d002      	beq.n	90007d0e <http_parse_request+0x4e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Received data while sending a file\n"));
    /* already sending a file */
    /* @todo: abort? */
    return ERR_USE;
90007d08:	f06f 0307 	mvn.w	r3, #7
90007d0c:	e0a9      	b.n	90007e62 <http_parse_request+0x1a2>
  LWIP_DEBUGF(HTTPD_DEBUG, ("Received %"U16_F" bytes\n", p->tot_len));

  /* first check allowed characters in this pbuf? */

  /* enqueue the pbuf */
  if (hs->req == NULL) {
90007d0e:	68bb      	ldr	r3, [r7, #8]
90007d10:	6a1b      	ldr	r3, [r3, #32]
90007d12:	2b00      	cmp	r3, #0
90007d14:	d103      	bne.n	90007d1e <http_parse_request+0x5e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("First pbuf\n"));
    hs->req = p;
90007d16:	68bb      	ldr	r3, [r7, #8]
90007d18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
90007d1a:	621a      	str	r2, [r3, #32]
90007d1c:	e005      	b.n	90007d2a <http_parse_request+0x6a>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG, ("pbuf enqueued\n"));
    pbuf_cat(hs->req, p);
90007d1e:	68bb      	ldr	r3, [r7, #8]
90007d20:	6a1b      	ldr	r3, [r3, #32]
90007d22:	6a79      	ldr	r1, [r7, #36]	; 0x24
90007d24:	4618      	mov	r0, r3
90007d26:	f002 f953 	bl	90009fd0 <pbuf_cat>
  }
  /* increase pbuf ref counter as it is freed when we return but we want to
     keep it on the req list */
  pbuf_ref(p);
90007d2a:	6a78      	ldr	r0, [r7, #36]	; 0x24
90007d2c:	f002 f928 	bl	90009f80 <pbuf_ref>

  if (hs->req->next != NULL) {
90007d30:	68bb      	ldr	r3, [r7, #8]
90007d32:	6a1b      	ldr	r3, [r3, #32]
90007d34:	681b      	ldr	r3, [r3, #0]
90007d36:	2b00      	cmp	r3, #0
90007d38:	d012      	beq.n	90007d60 <http_parse_request+0xa0>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
90007d3a:	68bb      	ldr	r3, [r7, #8]
90007d3c:	6a1b      	ldr	r3, [r3, #32]
90007d3e:	891b      	ldrh	r3, [r3, #8]
90007d40:	f240 32ff 	movw	r2, #1023	; 0x3ff
90007d44:	4293      	cmp	r3, r2
90007d46:	bf28      	it	cs
90007d48:	4613      	movcs	r3, r2
90007d4a:	867b      	strh	r3, [r7, #50]	; 0x32
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
90007d4c:	68bb      	ldr	r3, [r7, #8]
90007d4e:	6a18      	ldr	r0, [r3, #32]
90007d50:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
90007d52:	2300      	movs	r3, #0
90007d54:	4949      	ldr	r1, [pc, #292]	; (90007e7c <http_parse_request+0x1bc>)
90007d56:	f002 fa63 	bl	9000a220 <pbuf_copy_partial>
    data = httpd_req_buf;
90007d5a:	4b48      	ldr	r3, [pc, #288]	; (90007e7c <http_parse_request+0x1bc>)
90007d5c:	637b      	str	r3, [r7, #52]	; 0x34
90007d5e:	e005      	b.n	90007d6c <http_parse_request+0xac>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
    data = (char *)p->payload;
90007d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90007d62:	685b      	ldr	r3, [r3, #4]
90007d64:	637b      	str	r3, [r7, #52]	; 0x34
    data_len = p->len;
90007d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90007d68:	895b      	ldrh	r3, [r3, #10]
90007d6a:	867b      	strh	r3, [r7, #50]	; 0x32
      LWIP_DEBUGF(HTTPD_DEBUG, ("Warning: incomplete header due to chained pbufs\n"));
    }
  }

  /* received enough data for minimal request? */
  if (data_len >= MIN_REQ_LEN) {
90007d6c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
90007d6e:	2b06      	cmp	r3, #6
90007d70:	d962      	bls.n	90007e38 <http_parse_request+0x178>
    /* wait for CRLF before parsing anything */
    crlf = lwip_strnstr(data, CRLF, data_len);
90007d72:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
90007d74:	461a      	mov	r2, r3
90007d76:	4942      	ldr	r1, [pc, #264]	; (90007e80 <http_parse_request+0x1c0>)
90007d78:	6b78      	ldr	r0, [r7, #52]	; 0x34
90007d7a:	f000 fb99 	bl	900084b0 <lwip_strnstr>
90007d7e:	6238      	str	r0, [r7, #32]
    if (crlf != NULL) {
90007d80:	6a3b      	ldr	r3, [r7, #32]
90007d82:	2b00      	cmp	r3, #0
90007d84:	d058      	beq.n	90007e38 <http_parse_request+0x178>
#if LWIP_HTTPD_SUPPORT_POST
      int is_post = 0;
#endif /* LWIP_HTTPD_SUPPORT_POST */
      int is_09 = 0;
90007d86:	2300      	movs	r3, #0
90007d88:	62fb      	str	r3, [r7, #44]	; 0x2c
      char *sp1, *sp2;
      u16_t left_len, uri_len;
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("CRLF received, parsing request\n"));
      /* parse method */
      if (!strncmp(data, "GET ", 4)) {
90007d8a:	2204      	movs	r2, #4
90007d8c:	493d      	ldr	r1, [pc, #244]	; (90007e84 <http_parse_request+0x1c4>)
90007d8e:	6b78      	ldr	r0, [r7, #52]	; 0x34
90007d90:	f00b fd72 	bl	90013878 <strncmp>
90007d94:	4603      	mov	r3, r0
90007d96:	2b00      	cmp	r3, #0
90007d98:	d116      	bne.n	90007dc8 <http_parse_request+0x108>
        sp1 = data + 3;
90007d9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
90007d9c:	3303      	adds	r3, #3
90007d9e:	61fb      	str	r3, [r7, #28]
        LWIP_DEBUGF(HTTPD_DEBUG, ("Unsupported request method (not implemented): \"%s\"\n",
                                  data));
        return http_find_error_file(hs, 501);
      }
      /* if we come here, method is OK, parse URI */
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
90007da0:	69fb      	ldr	r3, [r7, #28]
90007da2:	1c5a      	adds	r2, r3, #1
90007da4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
90007da6:	1ad3      	subs	r3, r2, r3
90007da8:	b29b      	uxth	r3, r3
90007daa:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
90007dac:	1ad3      	subs	r3, r2, r3
90007dae:	837b      	strh	r3, [r7, #26]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
90007db0:	69fb      	ldr	r3, [r7, #28]
90007db2:	3301      	adds	r3, #1
90007db4:	8b7a      	ldrh	r2, [r7, #26]
90007db6:	4934      	ldr	r1, [pc, #208]	; (90007e88 <http_parse_request+0x1c8>)
90007db8:	4618      	mov	r0, r3
90007dba:	f000 fb79 	bl	900084b0 <lwip_strnstr>
90007dbe:	62b8      	str	r0, [r7, #40]	; 0x28
#if LWIP_HTTPD_SUPPORT_V09
      if (sp2 == NULL) {
90007dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
90007dc2:	2b00      	cmp	r3, #0
90007dc4:	d111      	bne.n	90007dea <http_parse_request+0x12a>
90007dc6:	e006      	b.n	90007dd6 <http_parse_request+0x116>
        data[4] = 0;
90007dc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
90007dca:	3304      	adds	r3, #4
90007dcc:	2200      	movs	r2, #0
90007dce:	701a      	strb	r2, [r3, #0]
        return http_find_error_file(hs, 501);
90007dd0:	f06f 030f 	mvn.w	r3, #15
90007dd4:	e045      	b.n	90007e62 <http_parse_request+0x1a2>
        /* HTTP 0.9: respond with correct protocol version */
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
90007dd6:	69fb      	ldr	r3, [r7, #28]
90007dd8:	3301      	adds	r3, #1
90007dda:	8b7a      	ldrh	r2, [r7, #26]
90007ddc:	4928      	ldr	r1, [pc, #160]	; (90007e80 <http_parse_request+0x1c0>)
90007dde:	4618      	mov	r0, r3
90007de0:	f000 fb66 	bl	900084b0 <lwip_strnstr>
90007de4:	62b8      	str	r0, [r7, #40]	; 0x28
        is_09 = 1;
90007de6:	2301      	movs	r3, #1
90007de8:	62fb      	str	r3, [r7, #44]	; 0x2c
          goto badrequest;
        }
#endif /* LWIP_HTTPD_SUPPORT_POST */
      }
#endif /* LWIP_HTTPD_SUPPORT_V09 */
      uri_len = (u16_t)(sp2 - (sp1 + 1));
90007dea:	69fb      	ldr	r3, [r7, #28]
90007dec:	3301      	adds	r3, #1
90007dee:	6aba      	ldr	r2, [r7, #40]	; 0x28
90007df0:	1ad3      	subs	r3, r2, r3
90007df2:	833b      	strh	r3, [r7, #24]
      if ((sp2 != 0) && (sp2 > sp1)) {
90007df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
90007df6:	2b00      	cmp	r3, #0
90007df8:	d01e      	beq.n	90007e38 <http_parse_request+0x178>
90007dfa:	6aba      	ldr	r2, [r7, #40]	; 0x28
90007dfc:	69fb      	ldr	r3, [r7, #28]
90007dfe:	429a      	cmp	r2, r3
90007e00:	d91a      	bls.n	90007e38 <http_parse_request+0x178>
        /* wait for CRLFCRLF (indicating end of HTTP headers) before parsing anything */
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
90007e02:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
90007e04:	461a      	mov	r2, r3
90007e06:	4921      	ldr	r1, [pc, #132]	; (90007e8c <http_parse_request+0x1cc>)
90007e08:	6b78      	ldr	r0, [r7, #52]	; 0x34
90007e0a:	f000 fb51 	bl	900084b0 <lwip_strnstr>
90007e0e:	4603      	mov	r3, r0
90007e10:	2b00      	cmp	r3, #0
90007e12:	d011      	beq.n	90007e38 <http_parse_request+0x178>
          char *uri = sp1 + 1;
90007e14:	69fb      	ldr	r3, [r7, #28]
90007e16:	3301      	adds	r3, #1
90007e18:	617b      	str	r3, [r7, #20]
          } else {
            hs->keepalive = 0;
          }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
          /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
          *sp1 = 0;
90007e1a:	69fb      	ldr	r3, [r7, #28]
90007e1c:	2200      	movs	r2, #0
90007e1e:	701a      	strb	r2, [r3, #0]
          uri[uri_len] = 0;
90007e20:	8b3b      	ldrh	r3, [r7, #24]
90007e22:	697a      	ldr	r2, [r7, #20]
90007e24:	4413      	add	r3, r2
90007e26:	2200      	movs	r2, #0
90007e28:	701a      	strb	r2, [r3, #0]
            }
            return err;
          } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
          {
            return http_find_file(hs, uri, is_09);
90007e2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
90007e2c:	6979      	ldr	r1, [r7, #20]
90007e2e:	68b8      	ldr	r0, [r7, #8]
90007e30:	f000 f82e 	bl	90007e90 <http_find_file>
90007e34:	4603      	mov	r3, r0
90007e36:	e014      	b.n	90007e62 <http_parse_request+0x1a2>
      }
    }
  }

#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  clen = pbuf_clen(hs->req);
90007e38:	68bb      	ldr	r3, [r7, #8]
90007e3a:	6a1b      	ldr	r3, [r3, #32]
90007e3c:	4618      	mov	r0, r3
90007e3e:	f002 f887 	bl	90009f50 <pbuf_clen>
90007e42:	4603      	mov	r3, r0
90007e44:	827b      	strh	r3, [r7, #18]
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
90007e46:	68bb      	ldr	r3, [r7, #8]
90007e48:	6a1b      	ldr	r3, [r3, #32]
90007e4a:	891b      	ldrh	r3, [r3, #8]
90007e4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
90007e50:	d205      	bcs.n	90007e5e <http_parse_request+0x19e>
90007e52:	8a7b      	ldrh	r3, [r7, #18]
90007e54:	2b05      	cmp	r3, #5
90007e56:	d802      	bhi.n	90007e5e <http_parse_request+0x19e>
      (clen <= LWIP_HTTPD_REQ_QUEUELEN)) {
    /* request not fully received (too short or CRLF is missing) */
    return ERR_INPROGRESS;
90007e58:	f06f 0304 	mvn.w	r3, #4
90007e5c:	e001      	b.n	90007e62 <http_parse_request+0x1a2>
#if LWIP_HTTPD_SUPPORT_POST
badrequest:
#endif /* LWIP_HTTPD_SUPPORT_POST */
    LWIP_DEBUGF(HTTPD_DEBUG, ("bad request\n"));
    /* could not parse request */
    return http_find_error_file(hs, 400);
90007e5e:	f06f 030f 	mvn.w	r3, #15
  }
}
90007e62:	4618      	mov	r0, r3
90007e64:	3738      	adds	r7, #56	; 0x38
90007e66:	46bd      	mov	sp, r7
90007e68:	bd80      	pop	{r7, pc}
90007e6a:	bf00      	nop
90007e6c:	900146d4 	.word	0x900146d4
90007e70:	900147a0 	.word	0x900147a0
90007e74:	9001471c 	.word	0x9001471c
90007e78:	900147ac 	.word	0x900147ac
90007e7c:	2400dae0 	.word	0x2400dae0
90007e80:	900147b8 	.word	0x900147b8
90007e84:	900147bc 	.word	0x900147bc
90007e88:	900147c4 	.word	0x900147c4
90007e8c:	900147c8 	.word	0x900147c8

90007e90 <http_find_file>:
 * @return ERR_OK if file was found and hs has been initialized correctly
 *         another err_t otherwise
 */
static err_t
http_find_file(struct http_state *hs, const char *uri, int is_09)
{
90007e90:	b580      	push	{r7, lr}
90007e92:	b092      	sub	sp, #72	; 0x48
90007e94:	af02      	add	r7, sp, #8
90007e96:	60f8      	str	r0, [r7, #12]
90007e98:	60b9      	str	r1, [r7, #8]
90007e9a:	607a      	str	r2, [r7, #4]
  size_t loop;
  struct fs_file *file = NULL;
90007e9c:	2300      	movs	r3, #0
90007e9e:	63bb      	str	r3, [r7, #56]	; 0x38
  char *params = NULL;
90007ea0:	2300      	movs	r3, #0
90007ea2:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LWIP_HTTPD_CGI */
#if !LWIP_HTTPD_SSI
  const
#endif /* !LWIP_HTTPD_SSI */
  /* By default, assume we will not be processing server-side-includes tags */
  u8_t tag_check = 0;
90007ea4:	2300      	movs	r3, #0
90007ea6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Have we been asked for the default file (in root or a directory) ? */
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
  size_t uri_len = strlen(uri);
90007eaa:	68bb      	ldr	r3, [r7, #8]
90007eac:	4618      	mov	r0, r3
90007eae:	f7f8 fa21 	bl	900002f4 <strlen>
90007eb2:	62b8      	str	r0, [r7, #40]	; 0x28
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
90007eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
90007eb6:	2b00      	cmp	r3, #0
90007eb8:	d06b      	beq.n	90007f92 <http_find_file+0x102>
90007eba:	68ba      	ldr	r2, [r7, #8]
90007ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
90007ebe:	3b01      	subs	r3, #1
90007ec0:	4413      	add	r3, r2
90007ec2:	781b      	ldrb	r3, [r3, #0]
90007ec4:	2b2f      	cmp	r3, #47	; 0x2f
90007ec6:	d164      	bne.n	90007f92 <http_find_file+0x102>
      ((uri != http_uri_buf) || (uri_len == 1))) {
90007ec8:	68bb      	ldr	r3, [r7, #8]
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
90007eca:	4a53      	ldr	r2, [pc, #332]	; (90008018 <http_find_file+0x188>)
90007ecc:	4293      	cmp	r3, r2
90007ece:	d102      	bne.n	90007ed6 <http_find_file+0x46>
      ((uri != http_uri_buf) || (uri_len == 1))) {
90007ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
90007ed2:	2b01      	cmp	r3, #1
90007ed4:	d15d      	bne.n	90007f92 <http_find_file+0x102>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
90007ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
90007ed8:	3b01      	subs	r3, #1
90007eda:	2b3f      	cmp	r3, #63	; 0x3f
90007edc:	bf28      	it	cs
90007ede:	233f      	movcs	r3, #63	; 0x3f
90007ee0:	627b      	str	r3, [r7, #36]	; 0x24
    if (copy_len > 0) {
90007ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90007ee4:	2b00      	cmp	r3, #0
90007ee6:	d00a      	beq.n	90007efe <http_find_file+0x6e>
      MEMCPY(http_uri_buf, uri, copy_len);
90007ee8:	68bb      	ldr	r3, [r7, #8]
90007eea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
90007eec:	4619      	mov	r1, r3
90007eee:	484a      	ldr	r0, [pc, #296]	; (90008018 <http_find_file+0x188>)
90007ef0:	f00b faf7 	bl	900134e2 <memcpy>
      http_uri_buf[copy_len] = 0;
90007ef4:	4a48      	ldr	r2, [pc, #288]	; (90008018 <http_find_file+0x188>)
90007ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90007ef8:	4413      	add	r3, r2
90007efa:	2200      	movs	r2, #0
90007efc:	701a      	strb	r2, [r3, #0]
#else /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
  if ((uri[0] == '/') &&  (uri[1] == 0)) {
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
    /* Try each of the configured default filenames until we find one
       that exists. */
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
90007efe:	2300      	movs	r3, #0
90007f00:	63fb      	str	r3, [r7, #60]	; 0x3c
90007f02:	e043      	b.n	90007f8c <http_find_file+0xfc>
      const char *file_name;
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
      if (copy_len > 0) {
90007f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90007f06:	2b00      	cmp	r3, #0
90007f08:	d028      	beq.n	90007f5c <http_find_file+0xcc>
        size_t len_left = sizeof(http_uri_buf) - copy_len - 1;
90007f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90007f0c:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
90007f10:	623b      	str	r3, [r7, #32]
        if (len_left > 0) {
90007f12:	6a3b      	ldr	r3, [r7, #32]
90007f14:	2b00      	cmp	r3, #0
90007f16:	d01e      	beq.n	90007f56 <http_find_file+0xc6>
          size_t name_len = strlen(httpd_default_filenames[loop].name);
90007f18:	4a40      	ldr	r2, [pc, #256]	; (9000801c <http_find_file+0x18c>)
90007f1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
90007f1c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
90007f20:	4618      	mov	r0, r3
90007f22:	f7f8 f9e7 	bl	900002f4 <strlen>
90007f26:	61f8      	str	r0, [r7, #28]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
90007f28:	69fa      	ldr	r2, [r7, #28]
90007f2a:	6a3b      	ldr	r3, [r7, #32]
90007f2c:	4293      	cmp	r3, r2
90007f2e:	bf28      	it	cs
90007f30:	4613      	movcs	r3, r2
90007f32:	61bb      	str	r3, [r7, #24]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
90007f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90007f36:	4a38      	ldr	r2, [pc, #224]	; (90008018 <http_find_file+0x188>)
90007f38:	1898      	adds	r0, r3, r2
90007f3a:	4a38      	ldr	r2, [pc, #224]	; (9000801c <http_find_file+0x18c>)
90007f3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
90007f3e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
90007f42:	69ba      	ldr	r2, [r7, #24]
90007f44:	4619      	mov	r1, r3
90007f46:	f00b facc 	bl	900134e2 <memcpy>
          http_uri_buf[copy_len + name_copy_len] = 0;
90007f4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
90007f4c:	69bb      	ldr	r3, [r7, #24]
90007f4e:	4413      	add	r3, r2
90007f50:	4a31      	ldr	r2, [pc, #196]	; (90008018 <http_find_file+0x188>)
90007f52:	2100      	movs	r1, #0
90007f54:	54d1      	strb	r1, [r2, r3]
        }
        file_name = http_uri_buf;
90007f56:	4b30      	ldr	r3, [pc, #192]	; (90008018 <http_find_file+0x188>)
90007f58:	633b      	str	r3, [r7, #48]	; 0x30
90007f5a:	e004      	b.n	90007f66 <http_find_file+0xd6>
      } else
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
      {
        file_name = httpd_default_filenames[loop].name;
90007f5c:	4a2f      	ldr	r2, [pc, #188]	; (9000801c <http_find_file+0x18c>)
90007f5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
90007f60:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
90007f64:	633b      	str	r3, [r7, #48]	; 0x30
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Looking for %s...\n", file_name));
      err = fs_open(&hs->file_handle, file_name);
90007f66:	68fb      	ldr	r3, [r7, #12]
90007f68:	6b39      	ldr	r1, [r7, #48]	; 0x30
90007f6a:	4618      	mov	r0, r3
90007f6c:	f7ff fc58 	bl	90007820 <fs_open>
90007f70:	4603      	mov	r3, r0
90007f72:	75fb      	strb	r3, [r7, #23]
      if (err == ERR_OK) {
90007f74:	f997 3017 	ldrsb.w	r3, [r7, #23]
90007f78:	2b00      	cmp	r3, #0
90007f7a:	d104      	bne.n	90007f86 <http_find_file+0xf6>
        uri = file_name;
90007f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90007f7e:	60bb      	str	r3, [r7, #8]
        file = &hs->file_handle;
90007f80:	68fb      	ldr	r3, [r7, #12]
90007f82:	63bb      	str	r3, [r7, #56]	; 0x38
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opened.\n"));
#if LWIP_HTTPD_SSI
        tag_check = httpd_default_filenames[loop].shtml;
#endif /* LWIP_HTTPD_SSI */
        break;
90007f84:	e005      	b.n	90007f92 <http_find_file+0x102>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
90007f86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
90007f88:	3301      	adds	r3, #1
90007f8a:	63fb      	str	r3, [r7, #60]	; 0x3c
90007f8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
90007f8e:	2b04      	cmp	r3, #4
90007f90:	d9b8      	bls.n	90007f04 <http_find_file+0x74>
      }
    }
  }
  if (file == NULL) {
90007f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
90007f94:	2b00      	cmp	r3, #0
90007f96:	d124      	bne.n	90007fe2 <http_find_file+0x152>
    /* No - we've been asked for a specific file. */
    /* First, isolate the base URI (without any parameters) */
    params = (char *)strchr(uri, '?');
90007f98:	68bb      	ldr	r3, [r7, #8]
90007f9a:	213f      	movs	r1, #63	; 0x3f
90007f9c:	4618      	mov	r0, r3
90007f9e:	f00b fc5e 	bl	9001385e <strchr>
90007fa2:	6378      	str	r0, [r7, #52]	; 0x34
    if (params != NULL) {
90007fa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
90007fa6:	2b00      	cmp	r3, #0
90007fa8:	d005      	beq.n	90007fb6 <http_find_file+0x126>
      /* URI contains parameters. NULL-terminate the base URI */
      *params = '\0';
90007faa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
90007fac:	2200      	movs	r2, #0
90007fae:	701a      	strb	r2, [r3, #0]
      params++;
90007fb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
90007fb2:	3301      	adds	r3, #1
90007fb4:	637b      	str	r3, [r7, #52]	; 0x34
    }
#endif /* LWIP_HTTPD_CGI */

    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opening %s\n", uri));

    err = fs_open(&hs->file_handle, uri);
90007fb6:	68fb      	ldr	r3, [r7, #12]
90007fb8:	68ba      	ldr	r2, [r7, #8]
90007fba:	4611      	mov	r1, r2
90007fbc:	4618      	mov	r0, r3
90007fbe:	f7ff fc2f 	bl	90007820 <fs_open>
90007fc2:	4603      	mov	r3, r0
90007fc4:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
90007fc6:	f997 3017 	ldrsb.w	r3, [r7, #23]
90007fca:	2b00      	cmp	r3, #0
90007fcc:	d102      	bne.n	90007fd4 <http_find_file+0x144>
      file = &hs->file_handle;
90007fce:	68fb      	ldr	r3, [r7, #12]
90007fd0:	63bb      	str	r3, [r7, #56]	; 0x38
90007fd2:	e006      	b.n	90007fe2 <http_find_file+0x152>
    } else {
      file = http_get_404_file(hs, &uri);
90007fd4:	f107 0308 	add.w	r3, r7, #8
90007fd8:	4619      	mov	r1, r3
90007fda:	68f8      	ldr	r0, [r7, #12]
90007fdc:	f7ff fe2a 	bl	90007c34 <http_get_404_file>
90007fe0:	63b8      	str	r0, [r7, #56]	; 0x38
#endif /* LWIP_HTTPD_SSI_BY_FILE_EXTENSION */
      }
    }
#endif /* LWIP_HTTPD_SSI */
  }
  if (file == NULL) {
90007fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
90007fe4:	2b00      	cmp	r3, #0
90007fe6:	d106      	bne.n	90007ff6 <http_find_file+0x166>
    /* None of the default filenames exist so send back a 404 page */
    file = http_get_404_file(hs, &uri);
90007fe8:	f107 0308 	add.w	r3, r7, #8
90007fec:	4619      	mov	r1, r3
90007fee:	68f8      	ldr	r0, [r7, #12]
90007ff0:	f7ff fe20 	bl	90007c34 <http_get_404_file>
90007ff4:	63b8      	str	r0, [r7, #56]	; 0x38
  }
  return http_init_file(hs, file, is_09, uri, tag_check, params);
90007ff6:	68ba      	ldr	r2, [r7, #8]
90007ff8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
90007ffa:	9301      	str	r3, [sp, #4]
90007ffc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
90008000:	9300      	str	r3, [sp, #0]
90008002:	4613      	mov	r3, r2
90008004:	687a      	ldr	r2, [r7, #4]
90008006:	6bb9      	ldr	r1, [r7, #56]	; 0x38
90008008:	68f8      	ldr	r0, [r7, #12]
9000800a:	f000 f809 	bl	90008020 <http_init_file>
9000800e:	4603      	mov	r3, r0
}
90008010:	4618      	mov	r0, r3
90008012:	3740      	adds	r7, #64	; 0x40
90008014:	46bd      	mov	sp, r7
90008016:	bd80      	pop	{r7, pc}
90008018:	2400dee0 	.word	0x2400dee0
9000801c:	90017398 	.word	0x90017398

90008020 <http_init_file>:
 *         another err_t otherwise
 */
static err_t
http_init_file(struct http_state *hs, struct fs_file *file, int is_09, const char *uri,
               u8_t tag_check, char *params)
{
90008020:	b580      	push	{r7, lr}
90008022:	b086      	sub	sp, #24
90008024:	af00      	add	r7, sp, #0
90008026:	60f8      	str	r0, [r7, #12]
90008028:	60b9      	str	r1, [r7, #8]
9000802a:	607a      	str	r2, [r7, #4]
9000802c:	603b      	str	r3, [r7, #0]
#if !LWIP_HTTPD_SUPPORT_V09
  LWIP_UNUSED_ARG(is_09);
#endif
  if (file != NULL) {
9000802e:	68bb      	ldr	r3, [r7, #8]
90008030:	2b00      	cmp	r3, #0
90008032:	d05c      	beq.n	900080ee <http_init_file+0xce>
    /* file opened, initialise struct http_state */
#if !LWIP_HTTPD_DYNAMIC_FILE_READ
    /* If dynamic read is disabled, file data must be in one piece and available now */
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
90008034:	68bb      	ldr	r3, [r7, #8]
90008036:	681b      	ldr	r3, [r3, #0]
90008038:	2b00      	cmp	r3, #0
9000803a:	d106      	bne.n	9000804a <http_init_file+0x2a>
9000803c:	4b35      	ldr	r3, [pc, #212]	; (90008114 <http_init_file+0xf4>)
9000803e:	f640 120b 	movw	r2, #2315	; 0x90b
90008042:	4935      	ldr	r1, [pc, #212]	; (90008118 <http_init_file+0xf8>)
90008044:	4835      	ldr	r0, [pc, #212]	; (9000811c <http_init_file+0xfc>)
90008046:	f00b faf7 	bl	90013638 <iprintf>
      }
    }
#else /* LWIP_HTTPD_SSI */
    LWIP_UNUSED_ARG(tag_check);
#endif /* LWIP_HTTPD_SSI */
    hs->handle = file;
9000804a:	68fb      	ldr	r3, [r7, #12]
9000804c:	68ba      	ldr	r2, [r7, #8]
9000804e:	615a      	str	r2, [r3, #20]
                       );
    }
#else /* LWIP_HTTPD_CGI_SSI */
    LWIP_UNUSED_ARG(params);
#endif /* LWIP_HTTPD_CGI_SSI */
    hs->file = file->data;
90008050:	68bb      	ldr	r3, [r7, #8]
90008052:	681a      	ldr	r2, [r3, #0]
90008054:	68fb      	ldr	r3, [r7, #12]
90008056:	619a      	str	r2, [r3, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
90008058:	68bb      	ldr	r3, [r7, #8]
9000805a:	685b      	ldr	r3, [r3, #4]
9000805c:	2b00      	cmp	r3, #0
9000805e:	da06      	bge.n	9000806e <http_init_file+0x4e>
90008060:	4b2c      	ldr	r3, [pc, #176]	; (90008114 <http_init_file+0xf4>)
90008062:	f640 1234 	movw	r2, #2356	; 0x934
90008066:	492e      	ldr	r1, [pc, #184]	; (90008120 <http_init_file+0x100>)
90008068:	482c      	ldr	r0, [pc, #176]	; (9000811c <http_init_file+0xfc>)
9000806a:	f00b fae5 	bl	90013638 <iprintf>
      /* custom file, need to read data first (via fs_read_custom) */
      hs->left = 0;
    } else
#endif /* LWIP_HTTPD_CUSTOM_FILES */
    {
      hs->left = (u32_t)file->len;
9000806e:	68bb      	ldr	r3, [r7, #8]
90008070:	685b      	ldr	r3, [r3, #4]
90008072:	461a      	mov	r2, r3
90008074:	68fb      	ldr	r3, [r7, #12]
90008076:	625a      	str	r2, [r3, #36]	; 0x24
    }
    hs->retries = 0;
90008078:	68fb      	ldr	r3, [r7, #12]
9000807a:	2200      	movs	r2, #0
9000807c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
#if LWIP_HTTPD_TIMING
    hs->time_started = sys_now();
#endif /* LWIP_HTTPD_TIMING */
#if !LWIP_HTTPD_DYNAMIC_HEADERS
    LWIP_ASSERT("HTTP headers not included in file system",
90008080:	68fb      	ldr	r3, [r7, #12]
90008082:	695b      	ldr	r3, [r3, #20]
90008084:	7c1b      	ldrb	r3, [r3, #16]
90008086:	f003 0301 	and.w	r3, r3, #1
9000808a:	2b00      	cmp	r3, #0
9000808c:	d106      	bne.n	9000809c <http_init_file+0x7c>
9000808e:	4b21      	ldr	r3, [pc, #132]	; (90008114 <http_init_file+0xf4>)
90008090:	f640 1243 	movw	r2, #2371	; 0x943
90008094:	4923      	ldr	r1, [pc, #140]	; (90008124 <http_init_file+0x104>)
90008096:	4821      	ldr	r0, [pc, #132]	; (9000811c <http_init_file+0xfc>)
90008098:	f00b face 	bl	90013638 <iprintf>
                (hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0);
#endif /* !LWIP_HTTPD_DYNAMIC_HEADERS */
#if LWIP_HTTPD_SUPPORT_V09
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
9000809c:	687b      	ldr	r3, [r7, #4]
9000809e:	2b00      	cmp	r3, #0
900080a0:	d032      	beq.n	90008108 <http_init_file+0xe8>
900080a2:	68fb      	ldr	r3, [r7, #12]
900080a4:	695b      	ldr	r3, [r3, #20]
900080a6:	7c1b      	ldrb	r3, [r3, #16]
900080a8:	f003 0301 	and.w	r3, r3, #1
900080ac:	2b00      	cmp	r3, #0
900080ae:	d02b      	beq.n	90008108 <http_init_file+0xe8>
      /* HTTP/0.9 responses are sent without HTTP header,
         search for the end of the header. */
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
900080b0:	68fb      	ldr	r3, [r7, #12]
900080b2:	6998      	ldr	r0, [r3, #24]
900080b4:	68fb      	ldr	r3, [r7, #12]
900080b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
900080b8:	461a      	mov	r2, r3
900080ba:	491b      	ldr	r1, [pc, #108]	; (90008128 <http_init_file+0x108>)
900080bc:	f000 f9f8 	bl	900084b0 <lwip_strnstr>
900080c0:	6178      	str	r0, [r7, #20]
      if (file_start != NULL) {
900080c2:	697b      	ldr	r3, [r7, #20]
900080c4:	2b00      	cmp	r3, #0
900080c6:	d01f      	beq.n	90008108 <http_init_file+0xe8>
        int diff = file_start + 4 - hs->file;
900080c8:	697b      	ldr	r3, [r7, #20]
900080ca:	1d1a      	adds	r2, r3, #4
900080cc:	68fb      	ldr	r3, [r7, #12]
900080ce:	699b      	ldr	r3, [r3, #24]
900080d0:	1ad3      	subs	r3, r2, r3
900080d2:	613b      	str	r3, [r7, #16]
        hs->file += diff;
900080d4:	68fb      	ldr	r3, [r7, #12]
900080d6:	699a      	ldr	r2, [r3, #24]
900080d8:	693b      	ldr	r3, [r7, #16]
900080da:	441a      	add	r2, r3
900080dc:	68fb      	ldr	r3, [r7, #12]
900080de:	619a      	str	r2, [r3, #24]
        hs->left -= (u32_t)diff;
900080e0:	68fb      	ldr	r3, [r7, #12]
900080e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
900080e4:	693b      	ldr	r3, [r7, #16]
900080e6:	1ad2      	subs	r2, r2, r3
900080e8:	68fb      	ldr	r3, [r7, #12]
900080ea:	625a      	str	r2, [r3, #36]	; 0x24
900080ec:	e00c      	b.n	90008108 <http_init_file+0xe8>
      }
    }
#endif /* LWIP_HTTPD_SUPPORT_V09*/
  } else {
    hs->handle = NULL;
900080ee:	68fb      	ldr	r3, [r7, #12]
900080f0:	2200      	movs	r2, #0
900080f2:	615a      	str	r2, [r3, #20]
    hs->file = NULL;
900080f4:	68fb      	ldr	r3, [r7, #12]
900080f6:	2200      	movs	r2, #0
900080f8:	619a      	str	r2, [r3, #24]
    hs->left = 0;
900080fa:	68fb      	ldr	r3, [r7, #12]
900080fc:	2200      	movs	r2, #0
900080fe:	625a      	str	r2, [r3, #36]	; 0x24
    hs->retries = 0;
90008100:	68fb      	ldr	r3, [r7, #12]
90008102:	2200      	movs	r2, #0
90008104:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        hs->keepalive = 0;
      }
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  return ERR_OK;
90008108:	2300      	movs	r3, #0
}
9000810a:	4618      	mov	r0, r3
9000810c:	3718      	adds	r7, #24
9000810e:	46bd      	mov	sp, r7
90008110:	bd80      	pop	{r7, pc}
90008112:	bf00      	nop
90008114:	900146d4 	.word	0x900146d4
90008118:	900147d0 	.word	0x900147d0
9000811c:	9001471c 	.word	0x9001471c
90008120:	900147e4 	.word	0x900147e4
90008124:	90014804 	.word	0x90014804
90008128:	900147c8 	.word	0x900147c8

9000812c <http_err>:
 * The pcb had an error and is already deallocated.
 * The argument might still be valid (if != NULL).
 */
static void
http_err(void *arg, err_t err)
{
9000812c:	b580      	push	{r7, lr}
9000812e:	b084      	sub	sp, #16
90008130:	af00      	add	r7, sp, #0
90008132:	6078      	str	r0, [r7, #4]
90008134:	460b      	mov	r3, r1
90008136:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
90008138:	687b      	ldr	r3, [r7, #4]
9000813a:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);

  LWIP_DEBUGF(HTTPD_DEBUG, ("http_err: %s", lwip_strerr(err)));

  if (hs != NULL) {
9000813c:	68fb      	ldr	r3, [r7, #12]
9000813e:	2b00      	cmp	r3, #0
90008140:	d002      	beq.n	90008148 <http_err+0x1c>
    http_state_free(hs);
90008142:	68f8      	ldr	r0, [r7, #12]
90008144:	f7ff fc02 	bl	9000794c <http_state_free>
  }
}
90008148:	bf00      	nop
9000814a:	3710      	adds	r7, #16
9000814c:	46bd      	mov	sp, r7
9000814e:	bd80      	pop	{r7, pc}

90008150 <http_sent>:
 * Data has been sent and acknowledged by the remote host.
 * This means that more data can be sent.
 */
static err_t
http_sent(void *arg, struct altcp_pcb *pcb, u16_t len)
{
90008150:	b580      	push	{r7, lr}
90008152:	b086      	sub	sp, #24
90008154:	af00      	add	r7, sp, #0
90008156:	60f8      	str	r0, [r7, #12]
90008158:	60b9      	str	r1, [r7, #8]
9000815a:	4613      	mov	r3, r2
9000815c:	80fb      	strh	r3, [r7, #6]
  struct http_state *hs = (struct http_state *)arg;
9000815e:	68fb      	ldr	r3, [r7, #12]
90008160:	617b      	str	r3, [r7, #20]

  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_sent %p\n", (void *)pcb));

  LWIP_UNUSED_ARG(len);

  if (hs == NULL) {
90008162:	697b      	ldr	r3, [r7, #20]
90008164:	2b00      	cmp	r3, #0
90008166:	d101      	bne.n	9000816c <http_sent+0x1c>
    return ERR_OK;
90008168:	2300      	movs	r3, #0
9000816a:	e008      	b.n	9000817e <http_sent+0x2e>
  }

  hs->retries = 0;
9000816c:	697b      	ldr	r3, [r7, #20]
9000816e:	2200      	movs	r2, #0
90008170:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  http_send(pcb, hs);
90008174:	6979      	ldr	r1, [r7, #20]
90008176:	68b8      	ldr	r0, [r7, #8]
90008178:	f7ff fd25 	bl	90007bc6 <http_send>

  return ERR_OK;
9000817c:	2300      	movs	r3, #0
}
9000817e:	4618      	mov	r0, r3
90008180:	3718      	adds	r7, #24
90008182:	46bd      	mov	sp, r7
90008184:	bd80      	pop	{r7, pc}

90008186 <http_poll>:
 *
 * This could be increased, but we don't want to waste resources for bad connections.
 */
static err_t
http_poll(void *arg, struct altcp_pcb *pcb)
{
90008186:	b580      	push	{r7, lr}
90008188:	b084      	sub	sp, #16
9000818a:	af00      	add	r7, sp, #0
9000818c:	6078      	str	r0, [r7, #4]
9000818e:	6039      	str	r1, [r7, #0]
  struct http_state *hs = (struct http_state *)arg;
90008190:	687b      	ldr	r3, [r7, #4]
90008192:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: pcb=%p hs=%p pcb_state=%s\n",
              (void *)pcb, (void *)hs, tcp_debug_state_str(altcp_dbg_get_tcp_state(pcb))));

  if (hs == NULL) {
90008194:	68fb      	ldr	r3, [r7, #12]
90008196:	2b00      	cmp	r3, #0
90008198:	d107      	bne.n	900081aa <http_poll+0x24>
    err_t closed;
    /* arg is null, close. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: arg is NULL, close\n"));
    closed = http_close_conn(pcb, NULL);
9000819a:	2100      	movs	r1, #0
9000819c:	6838      	ldr	r0, [r7, #0]
9000819e:	f7ff fc91 	bl	90007ac4 <http_close_conn>
900081a2:	4603      	mov	r3, r0
900081a4:	72fb      	strb	r3, [r7, #11]
    if (closed == ERR_MEM) {
      altcp_abort(pcb);
      return ERR_ABRT;
    }
#endif /* LWIP_HTTPD_ABORT_ON_CLOSE_MEM_ERROR */
    return ERR_OK;
900081a6:	2300      	movs	r3, #0
900081a8:	e021      	b.n	900081ee <http_poll+0x68>
  } else {
    hs->retries++;
900081aa:	68fb      	ldr	r3, [r7, #12]
900081ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
900081b0:	3301      	adds	r3, #1
900081b2:	b2da      	uxtb	r2, r3
900081b4:	68fb      	ldr	r3, [r7, #12]
900081b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
900081ba:	68fb      	ldr	r3, [r7, #12]
900081bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
900081c0:	2b04      	cmp	r3, #4
900081c2:	d105      	bne.n	900081d0 <http_poll+0x4a>
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: too many retries, close\n"));
      http_close_conn(pcb, hs);
900081c4:	68f9      	ldr	r1, [r7, #12]
900081c6:	6838      	ldr	r0, [r7, #0]
900081c8:	f7ff fc7c 	bl	90007ac4 <http_close_conn>
      return ERR_OK;
900081cc:	2300      	movs	r3, #0
900081ce:	e00e      	b.n	900081ee <http_poll+0x68>
    }

    /* If this connection has a file open, try to send some more data. If
     * it has not yet received a GET request, don't do this since it will
     * cause the connection to close immediately. */
    if (hs->handle) {
900081d0:	68fb      	ldr	r3, [r7, #12]
900081d2:	695b      	ldr	r3, [r3, #20]
900081d4:	2b00      	cmp	r3, #0
900081d6:	d009      	beq.n	900081ec <http_poll+0x66>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: try to send more data\n"));
      if (http_send(pcb, hs)) {
900081d8:	68f9      	ldr	r1, [r7, #12]
900081da:	6838      	ldr	r0, [r7, #0]
900081dc:	f7ff fcf3 	bl	90007bc6 <http_send>
900081e0:	4603      	mov	r3, r0
900081e2:	2b00      	cmp	r3, #0
900081e4:	d002      	beq.n	900081ec <http_poll+0x66>
        /* If we wrote anything to be sent, go ahead and send it now. */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("tcp_output\n"));
        altcp_output(pcb);
900081e6:	6838      	ldr	r0, [r7, #0]
900081e8:	f007 f9a2 	bl	9000f530 <tcp_output>
      }
    }
  }

  return ERR_OK;
900081ec:	2300      	movs	r3, #0
}
900081ee:	4618      	mov	r0, r3
900081f0:	3710      	adds	r7, #16
900081f2:	46bd      	mov	sp, r7
900081f4:	bd80      	pop	{r7, pc}
	...

900081f8 <http_recv>:
 * Data has been received on this pcb.
 * For HTTP 1.0, this should normally only happen once (if the request fits in one packet).
 */
static err_t
http_recv(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
900081f8:	b580      	push	{r7, lr}
900081fa:	b086      	sub	sp, #24
900081fc:	af00      	add	r7, sp, #0
900081fe:	60f8      	str	r0, [r7, #12]
90008200:	60b9      	str	r1, [r7, #8]
90008202:	607a      	str	r2, [r7, #4]
90008204:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
90008206:	68fb      	ldr	r3, [r7, #12]
90008208:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: pcb=%p pbuf=%p err=%s\n", (void *)pcb,
              (void *)p, lwip_strerr(err)));

  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
9000820a:	f997 3003 	ldrsb.w	r3, [r7, #3]
9000820e:	2b00      	cmp	r3, #0
90008210:	d105      	bne.n	9000821e <http_recv+0x26>
90008212:	687b      	ldr	r3, [r7, #4]
90008214:	2b00      	cmp	r3, #0
90008216:	d002      	beq.n	9000821e <http_recv+0x26>
90008218:	697b      	ldr	r3, [r7, #20]
9000821a:	2b00      	cmp	r3, #0
9000821c:	d111      	bne.n	90008242 <http_recv+0x4a>
    /* error or closed by other side? */
    if (p != NULL) {
9000821e:	687b      	ldr	r3, [r7, #4]
90008220:	2b00      	cmp	r3, #0
90008222:	d008      	beq.n	90008236 <http_recv+0x3e>
      /* Inform TCP that we have taken the data. */
      altcp_recved(pcb, p->tot_len);
90008224:	687b      	ldr	r3, [r7, #4]
90008226:	891b      	ldrh	r3, [r3, #8]
90008228:	4619      	mov	r1, r3
9000822a:	68b8      	ldr	r0, [r7, #8]
9000822c:	f002 fd70 	bl	9000ad10 <tcp_recved>
      pbuf_free(p);
90008230:	6878      	ldr	r0, [r7, #4]
90008232:	f001 fdff 	bl	90009e34 <pbuf_free>
    }
    if (hs == NULL) {
      /* this should not happen, only to be robust */
      LWIP_DEBUGF(HTTPD_DEBUG, ("Error, http_recv: hs is NULL, close\n"));
    }
    http_close_conn(pcb, hs);
90008236:	6979      	ldr	r1, [r7, #20]
90008238:	68b8      	ldr	r0, [r7, #8]
9000823a:	f7ff fc43 	bl	90007ac4 <http_close_conn>
    return ERR_OK;
9000823e:	2300      	movs	r3, #0
90008240:	e055      	b.n	900082ee <http_recv+0xf6>
    hs->unrecved_bytes += p->tot_len;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
  {
    /* Inform TCP that we have taken the data. */
    altcp_recved(pcb, p->tot_len);
90008242:	687b      	ldr	r3, [r7, #4]
90008244:	891b      	ldrh	r3, [r3, #8]
90008246:	4619      	mov	r1, r3
90008248:	68b8      	ldr	r0, [r7, #8]
9000824a:	f002 fd61 	bl	9000ad10 <tcp_recved>
    }
    return ERR_OK;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
  {
    if (hs->handle == NULL) {
9000824e:	697b      	ldr	r3, [r7, #20]
90008250:	695b      	ldr	r3, [r3, #20]
90008252:	2b00      	cmp	r3, #0
90008254:	d147      	bne.n	900082e6 <http_recv+0xee>
      err_t parsed = http_parse_request(p, hs, pcb);
90008256:	68ba      	ldr	r2, [r7, #8]
90008258:	6979      	ldr	r1, [r7, #20]
9000825a:	6878      	ldr	r0, [r7, #4]
9000825c:	f7ff fd30 	bl	90007cc0 <http_parse_request>
90008260:	4603      	mov	r3, r0
90008262:	74fb      	strb	r3, [r7, #19]
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
90008264:	f997 3013 	ldrsb.w	r3, [r7, #19]
90008268:	2b00      	cmp	r3, #0
9000826a:	d015      	beq.n	90008298 <http_recv+0xa0>
9000826c:	f997 3013 	ldrsb.w	r3, [r7, #19]
90008270:	f113 0f05 	cmn.w	r3, #5
90008274:	d010      	beq.n	90008298 <http_recv+0xa0>
90008276:	f997 3013 	ldrsb.w	r3, [r7, #19]
9000827a:	f113 0f10 	cmn.w	r3, #16
9000827e:	d00b      	beq.n	90008298 <http_recv+0xa0>
90008280:	f997 3013 	ldrsb.w	r3, [r7, #19]
90008284:	f113 0f08 	cmn.w	r3, #8
90008288:	d006      	beq.n	90008298 <http_recv+0xa0>
9000828a:	4b1b      	ldr	r3, [pc, #108]	; (900082f8 <http_recv+0x100>)
9000828c:	f640 2204 	movw	r2, #2564	; 0xa04
90008290:	491a      	ldr	r1, [pc, #104]	; (900082fc <http_recv+0x104>)
90008292:	481b      	ldr	r0, [pc, #108]	; (90008300 <http_recv+0x108>)
90008294:	f00b f9d0 	bl	90013638 <iprintf>
                  || parsed == ERR_INPROGRESS || parsed == ERR_ARG || parsed == ERR_USE);
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
      if (parsed != ERR_INPROGRESS) {
90008298:	f997 3013 	ldrsb.w	r3, [r7, #19]
9000829c:	f113 0f05 	cmn.w	r3, #5
900082a0:	d00b      	beq.n	900082ba <http_recv+0xc2>
        /* request fully parsed or error */
        if (hs->req != NULL) {
900082a2:	697b      	ldr	r3, [r7, #20]
900082a4:	6a1b      	ldr	r3, [r3, #32]
900082a6:	2b00      	cmp	r3, #0
900082a8:	d007      	beq.n	900082ba <http_recv+0xc2>
          pbuf_free(hs->req);
900082aa:	697b      	ldr	r3, [r7, #20]
900082ac:	6a1b      	ldr	r3, [r3, #32]
900082ae:	4618      	mov	r0, r3
900082b0:	f001 fdc0 	bl	90009e34 <pbuf_free>
          hs->req = NULL;
900082b4:	697b      	ldr	r3, [r7, #20]
900082b6:	2200      	movs	r2, #0
900082b8:	621a      	str	r2, [r3, #32]
        }
      }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
      pbuf_free(p);
900082ba:	6878      	ldr	r0, [r7, #4]
900082bc:	f001 fdba 	bl	90009e34 <pbuf_free>
      if (parsed == ERR_OK) {
900082c0:	f997 3013 	ldrsb.w	r3, [r7, #19]
900082c4:	2b00      	cmp	r3, #0
900082c6:	d104      	bne.n	900082d2 <http_recv+0xda>
#if LWIP_HTTPD_SUPPORT_POST
        if (hs->post_content_len_left == 0)
#endif /* LWIP_HTTPD_SUPPORT_POST */
        {
          LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: data %p len %"S32_F"\n", (const void *)hs->file, hs->left));
          http_send(pcb, hs);
900082c8:	6979      	ldr	r1, [r7, #20]
900082ca:	68b8      	ldr	r0, [r7, #8]
900082cc:	f7ff fc7b 	bl	90007bc6 <http_send>
900082d0:	e00c      	b.n	900082ec <http_recv+0xf4>
        }
      } else if (parsed == ERR_ARG) {
900082d2:	f997 3013 	ldrsb.w	r3, [r7, #19]
900082d6:	f113 0f10 	cmn.w	r3, #16
900082da:	d107      	bne.n	900082ec <http_recv+0xf4>
        /* @todo: close on ERR_USE? */
        http_close_conn(pcb, hs);
900082dc:	6979      	ldr	r1, [r7, #20]
900082de:	68b8      	ldr	r0, [r7, #8]
900082e0:	f7ff fbf0 	bl	90007ac4 <http_close_conn>
900082e4:	e002      	b.n	900082ec <http_recv+0xf4>
      }
    } else {
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_recv: already sending data\n"));
      /* already sending but still receiving data, we might want to RST here? */
      pbuf_free(p);
900082e6:	6878      	ldr	r0, [r7, #4]
900082e8:	f001 fda4 	bl	90009e34 <pbuf_free>
    }
  }
  return ERR_OK;
900082ec:	2300      	movs	r3, #0
}
900082ee:	4618      	mov	r0, r3
900082f0:	3718      	adds	r7, #24
900082f2:	46bd      	mov	sp, r7
900082f4:	bd80      	pop	{r7, pc}
900082f6:	bf00      	nop
900082f8:	900146d4 	.word	0x900146d4
900082fc:	90014830 	.word	0x90014830
90008300:	9001471c 	.word	0x9001471c

90008304 <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct altcp_pcb *pcb, err_t err)
{
90008304:	b580      	push	{r7, lr}
90008306:	b086      	sub	sp, #24
90008308:	af00      	add	r7, sp, #0
9000830a:	60f8      	str	r0, [r7, #12]
9000830c:	60b9      	str	r1, [r7, #8]
9000830e:	4613      	mov	r3, r2
90008310:	71fb      	strb	r3, [r7, #7]
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void *)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
90008312:	f997 3007 	ldrsb.w	r3, [r7, #7]
90008316:	2b00      	cmp	r3, #0
90008318:	d102      	bne.n	90008320 <http_accept+0x1c>
9000831a:	68bb      	ldr	r3, [r7, #8]
9000831c:	2b00      	cmp	r3, #0
9000831e:	d102      	bne.n	90008326 <http_accept+0x22>
    return ERR_VAL;
90008320:	f06f 0305 	mvn.w	r3, #5
90008324:	e025      	b.n	90008372 <http_accept+0x6e>
  }

  /* Set priority */
  altcp_setprio(pcb, HTTPD_TCP_PRIO);
90008326:	2101      	movs	r1, #1
90008328:	68b8      	ldr	r0, [r7, #8]
9000832a:	f003 f9d5 	bl	9000b6d8 <tcp_setprio>

  /* Allocate memory for the structure that holds the state of the
     connection - initialized by that function. */
  hs = http_state_alloc();
9000832e:	f7ff fadb 	bl	900078e8 <http_state_alloc>
90008332:	6178      	str	r0, [r7, #20]
  if (hs == NULL) {
90008334:	697b      	ldr	r3, [r7, #20]
90008336:	2b00      	cmp	r3, #0
90008338:	d102      	bne.n	90008340 <http_accept+0x3c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept: Out of memory, RST\n"));
    return ERR_MEM;
9000833a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
9000833e:	e018      	b.n	90008372 <http_accept+0x6e>
  }
  hs->pcb = pcb;
90008340:	697b      	ldr	r3, [r7, #20]
90008342:	68ba      	ldr	r2, [r7, #8]
90008344:	61da      	str	r2, [r3, #28]

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  altcp_arg(pcb, hs);
90008346:	6979      	ldr	r1, [r7, #20]
90008348:	68b8      	ldr	r0, [r7, #8]
9000834a:	f003 fbc5 	bl	9000bad8 <tcp_arg>

  /* Set up the various callback functions */
  altcp_recv(pcb, http_recv);
9000834e:	490b      	ldr	r1, [pc, #44]	; (9000837c <http_accept+0x78>)
90008350:	68b8      	ldr	r0, [r7, #8]
90008352:	f003 fbd3 	bl	9000bafc <tcp_recv>
  altcp_err(pcb, http_err);
90008356:	490a      	ldr	r1, [pc, #40]	; (90008380 <http_accept+0x7c>)
90008358:	68b8      	ldr	r0, [r7, #8]
9000835a:	f003 fc13 	bl	9000bb84 <tcp_err>
  altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
9000835e:	2204      	movs	r2, #4
90008360:	4908      	ldr	r1, [pc, #32]	; (90008384 <http_accept+0x80>)
90008362:	68b8      	ldr	r0, [r7, #8]
90008364:	f003 fc48 	bl	9000bbf8 <tcp_poll>
  altcp_sent(pcb, http_sent);
90008368:	4907      	ldr	r1, [pc, #28]	; (90008388 <http_accept+0x84>)
9000836a:	68b8      	ldr	r0, [r7, #8]
9000836c:	f003 fbe8 	bl	9000bb40 <tcp_sent>

  return ERR_OK;
90008370:	2300      	movs	r3, #0
}
90008372:	4618      	mov	r0, r3
90008374:	3718      	adds	r7, #24
90008376:	46bd      	mov	sp, r7
90008378:	bd80      	pop	{r7, pc}
9000837a:	bf00      	nop
9000837c:	900081f9 	.word	0x900081f9
90008380:	9000812d 	.word	0x9000812d
90008384:	90008187 	.word	0x90008187
90008388:	90008151 	.word	0x90008151

9000838c <httpd_init_pcb>:

static void
httpd_init_pcb(struct altcp_pcb *pcb, u16_t port)
{
9000838c:	b580      	push	{r7, lr}
9000838e:	b084      	sub	sp, #16
90008390:	af00      	add	r7, sp, #0
90008392:	6078      	str	r0, [r7, #4]
90008394:	460b      	mov	r3, r1
90008396:	807b      	strh	r3, [r7, #2]
  err_t err;

  if (pcb) {
90008398:	687b      	ldr	r3, [r7, #4]
9000839a:	2b00      	cmp	r3, #0
9000839c:	d029      	beq.n	900083f2 <httpd_init_pcb+0x66>
    altcp_setprio(pcb, HTTPD_TCP_PRIO);
9000839e:	2101      	movs	r1, #1
900083a0:	6878      	ldr	r0, [r7, #4]
900083a2:	f003 f999 	bl	9000b6d8 <tcp_setprio>
    /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
    err = altcp_bind(pcb, IP_ANY_TYPE, port);
900083a6:	887b      	ldrh	r3, [r7, #2]
900083a8:	461a      	mov	r2, r3
900083aa:	4914      	ldr	r1, [pc, #80]	; (900083fc <httpd_init_pcb+0x70>)
900083ac:	6878      	ldr	r0, [r7, #4]
900083ae:	f002 fae1 	bl	9000a974 <tcp_bind>
900083b2:	4603      	mov	r3, r0
900083b4:	73fb      	strb	r3, [r7, #15]
    LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
900083b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
900083ba:	2b00      	cmp	r3, #0
900083bc:	d006      	beq.n	900083cc <httpd_init_pcb+0x40>
900083be:	4b10      	ldr	r3, [pc, #64]	; (90008400 <httpd_init_pcb+0x74>)
900083c0:	f640 2257 	movw	r2, #2647	; 0xa57
900083c4:	490f      	ldr	r1, [pc, #60]	; (90008404 <httpd_init_pcb+0x78>)
900083c6:	4810      	ldr	r0, [pc, #64]	; (90008408 <httpd_init_pcb+0x7c>)
900083c8:	f00b f936 	bl	90013638 <iprintf>
    pcb = altcp_listen(pcb);
900083cc:	21ff      	movs	r1, #255	; 0xff
900083ce:	6878      	ldr	r0, [r7, #4]
900083d0:	f002 fb88 	bl	9000aae4 <tcp_listen_with_backlog>
900083d4:	6078      	str	r0, [r7, #4]
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
900083d6:	687b      	ldr	r3, [r7, #4]
900083d8:	2b00      	cmp	r3, #0
900083da:	d106      	bne.n	900083ea <httpd_init_pcb+0x5e>
900083dc:	4b08      	ldr	r3, [pc, #32]	; (90008400 <httpd_init_pcb+0x74>)
900083de:	f640 2259 	movw	r2, #2649	; 0xa59
900083e2:	490a      	ldr	r1, [pc, #40]	; (9000840c <httpd_init_pcb+0x80>)
900083e4:	4808      	ldr	r0, [pc, #32]	; (90008408 <httpd_init_pcb+0x7c>)
900083e6:	f00b f927 	bl	90013638 <iprintf>
    altcp_accept(pcb, http_accept);
900083ea:	4909      	ldr	r1, [pc, #36]	; (90008410 <httpd_init_pcb+0x84>)
900083ec:	6878      	ldr	r0, [r7, #4]
900083ee:	f003 fbeb 	bl	9000bbc8 <tcp_accept>
  }
}
900083f2:	bf00      	nop
900083f4:	3710      	adds	r7, #16
900083f6:	46bd      	mov	sp, r7
900083f8:	bd80      	pop	{r7, pc}
900083fa:	bf00      	nop
900083fc:	900174d0 	.word	0x900174d0
90008400:	900146d4 	.word	0x900146d4
90008404:	9001485c 	.word	0x9001485c
90008408:	9001471c 	.word	0x9001471c
9000840c:	90014878 	.word	0x90014878
90008410:	90008305 	.word	0x90008305

90008414 <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
90008414:	b580      	push	{r7, lr}
90008416:	b082      	sub	sp, #8
90008418:	af00      	add	r7, sp, #0
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by tcp_new() */

  pcb = altcp_tcp_new_ip_type(IPADDR_TYPE_ANY);
9000841a:	202e      	movs	r0, #46	; 0x2e
9000841c:	f003 fb4e 	bl	9000babc <tcp_new_ip_type>
90008420:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
90008422:	687b      	ldr	r3, [r7, #4]
90008424:	2b00      	cmp	r3, #0
90008426:	d106      	bne.n	90008436 <httpd_init+0x22>
90008428:	4b07      	ldr	r3, [pc, #28]	; (90008448 <httpd_init+0x34>)
9000842a:	f640 2272 	movw	r2, #2674	; 0xa72
9000842e:	4907      	ldr	r1, [pc, #28]	; (9000844c <httpd_init+0x38>)
90008430:	4807      	ldr	r0, [pc, #28]	; (90008450 <httpd_init+0x3c>)
90008432:	f00b f901 	bl	90013638 <iprintf>
  httpd_init_pcb(pcb, HTTPD_SERVER_PORT);
90008436:	2150      	movs	r1, #80	; 0x50
90008438:	6878      	ldr	r0, [r7, #4]
9000843a:	f7ff ffa7 	bl	9000838c <httpd_init_pcb>
}
9000843e:	bf00      	nop
90008440:	3708      	adds	r7, #8
90008442:	46bd      	mov	sp, r7
90008444:	bd80      	pop	{r7, pc}
90008446:	bf00      	nop
90008448:	900146d4 	.word	0x900146d4
9000844c:	90014898 	.word	0x90014898
90008450:	9001471c 	.word	0x9001471c

90008454 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
90008454:	b480      	push	{r7}
90008456:	b083      	sub	sp, #12
90008458:	af00      	add	r7, sp, #0
9000845a:	4603      	mov	r3, r0
9000845c:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
9000845e:	88fb      	ldrh	r3, [r7, #6]
90008460:	021b      	lsls	r3, r3, #8
90008462:	b21a      	sxth	r2, r3
90008464:	88fb      	ldrh	r3, [r7, #6]
90008466:	0a1b      	lsrs	r3, r3, #8
90008468:	b29b      	uxth	r3, r3
9000846a:	b21b      	sxth	r3, r3
9000846c:	4313      	orrs	r3, r2
9000846e:	b21b      	sxth	r3, r3
90008470:	b29b      	uxth	r3, r3
}
90008472:	4618      	mov	r0, r3
90008474:	370c      	adds	r7, #12
90008476:	46bd      	mov	sp, r7
90008478:	f85d 7b04 	ldr.w	r7, [sp], #4
9000847c:	4770      	bx	lr

9000847e <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
9000847e:	b480      	push	{r7}
90008480:	b083      	sub	sp, #12
90008482:	af00      	add	r7, sp, #0
90008484:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
90008486:	687b      	ldr	r3, [r7, #4]
90008488:	061a      	lsls	r2, r3, #24
9000848a:	687b      	ldr	r3, [r7, #4]
9000848c:	021b      	lsls	r3, r3, #8
9000848e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
90008492:	431a      	orrs	r2, r3
90008494:	687b      	ldr	r3, [r7, #4]
90008496:	0a1b      	lsrs	r3, r3, #8
90008498:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
9000849c:	431a      	orrs	r2, r3
9000849e:	687b      	ldr	r3, [r7, #4]
900084a0:	0e1b      	lsrs	r3, r3, #24
900084a2:	4313      	orrs	r3, r2
}
900084a4:	4618      	mov	r0, r3
900084a6:	370c      	adds	r7, #12
900084a8:	46bd      	mov	sp, r7
900084aa:	f85d 7b04 	ldr.w	r7, [sp], #4
900084ae:	4770      	bx	lr

900084b0 <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
900084b0:	b580      	push	{r7, lr}
900084b2:	b086      	sub	sp, #24
900084b4:	af00      	add	r7, sp, #0
900084b6:	60f8      	str	r0, [r7, #12]
900084b8:	60b9      	str	r1, [r7, #8]
900084ba:	607a      	str	r2, [r7, #4]
  const char *p;
  size_t tokenlen = strlen(token);
900084bc:	68b8      	ldr	r0, [r7, #8]
900084be:	f7f7 ff19 	bl	900002f4 <strlen>
900084c2:	6138      	str	r0, [r7, #16]
  if (tokenlen == 0) {
900084c4:	693b      	ldr	r3, [r7, #16]
900084c6:	2b00      	cmp	r3, #0
900084c8:	d101      	bne.n	900084ce <lwip_strnstr+0x1e>
    return LWIP_CONST_CAST(char *, buffer);
900084ca:	68fb      	ldr	r3, [r7, #12]
900084cc:	e022      	b.n	90008514 <lwip_strnstr+0x64>
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
900084ce:	68fb      	ldr	r3, [r7, #12]
900084d0:	617b      	str	r3, [r7, #20]
900084d2:	e012      	b.n	900084fa <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
900084d4:	697b      	ldr	r3, [r7, #20]
900084d6:	781a      	ldrb	r2, [r3, #0]
900084d8:	68bb      	ldr	r3, [r7, #8]
900084da:	781b      	ldrb	r3, [r3, #0]
900084dc:	429a      	cmp	r2, r3
900084de:	d109      	bne.n	900084f4 <lwip_strnstr+0x44>
900084e0:	693a      	ldr	r2, [r7, #16]
900084e2:	68b9      	ldr	r1, [r7, #8]
900084e4:	6978      	ldr	r0, [r7, #20]
900084e6:	f00b f9c7 	bl	90013878 <strncmp>
900084ea:	4603      	mov	r3, r0
900084ec:	2b00      	cmp	r3, #0
900084ee:	d101      	bne.n	900084f4 <lwip_strnstr+0x44>
      return LWIP_CONST_CAST(char *, p);
900084f0:	697b      	ldr	r3, [r7, #20]
900084f2:	e00f      	b.n	90008514 <lwip_strnstr+0x64>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
900084f4:	697b      	ldr	r3, [r7, #20]
900084f6:	3301      	adds	r3, #1
900084f8:	617b      	str	r3, [r7, #20]
900084fa:	697b      	ldr	r3, [r7, #20]
900084fc:	781b      	ldrb	r3, [r3, #0]
900084fe:	2b00      	cmp	r3, #0
90008500:	d007      	beq.n	90008512 <lwip_strnstr+0x62>
90008502:	697a      	ldr	r2, [r7, #20]
90008504:	693b      	ldr	r3, [r7, #16]
90008506:	441a      	add	r2, r3
90008508:	68f9      	ldr	r1, [r7, #12]
9000850a:	687b      	ldr	r3, [r7, #4]
9000850c:	440b      	add	r3, r1
9000850e:	429a      	cmp	r2, r3
90008510:	d9e0      	bls.n	900084d4 <lwip_strnstr+0x24>
    }
  }
  return NULL;
90008512:	2300      	movs	r3, #0
}
90008514:	4618      	mov	r0, r3
90008516:	3718      	adds	r7, #24
90008518:	46bd      	mov	sp, r7
9000851a:	bd80      	pop	{r7, pc}

9000851c <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
9000851c:	b480      	push	{r7}
9000851e:	b089      	sub	sp, #36	; 0x24
90008520:	af00      	add	r7, sp, #0
90008522:	6078      	str	r0, [r7, #4]
90008524:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
90008526:	687b      	ldr	r3, [r7, #4]
90008528:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
9000852a:	2300      	movs	r3, #0
9000852c:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
9000852e:	2300      	movs	r3, #0
90008530:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
90008532:	69fb      	ldr	r3, [r7, #28]
90008534:	f003 0301 	and.w	r3, r3, #1
90008538:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
9000853a:	693b      	ldr	r3, [r7, #16]
9000853c:	2b00      	cmp	r3, #0
9000853e:	d00d      	beq.n	9000855c <lwip_standard_chksum+0x40>
90008540:	683b      	ldr	r3, [r7, #0]
90008542:	2b00      	cmp	r3, #0
90008544:	dd0a      	ble.n	9000855c <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
90008546:	69fa      	ldr	r2, [r7, #28]
90008548:	1c53      	adds	r3, r2, #1
9000854a:	61fb      	str	r3, [r7, #28]
9000854c:	f107 030e 	add.w	r3, r7, #14
90008550:	3301      	adds	r3, #1
90008552:	7812      	ldrb	r2, [r2, #0]
90008554:	701a      	strb	r2, [r3, #0]
    len--;
90008556:	683b      	ldr	r3, [r7, #0]
90008558:	3b01      	subs	r3, #1
9000855a:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
9000855c:	69fb      	ldr	r3, [r7, #28]
9000855e:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
90008560:	e00a      	b.n	90008578 <lwip_standard_chksum+0x5c>
    sum += *ps++;
90008562:	69bb      	ldr	r3, [r7, #24]
90008564:	1c9a      	adds	r2, r3, #2
90008566:	61ba      	str	r2, [r7, #24]
90008568:	881b      	ldrh	r3, [r3, #0]
9000856a:	461a      	mov	r2, r3
9000856c:	697b      	ldr	r3, [r7, #20]
9000856e:	4413      	add	r3, r2
90008570:	617b      	str	r3, [r7, #20]
    len -= 2;
90008572:	683b      	ldr	r3, [r7, #0]
90008574:	3b02      	subs	r3, #2
90008576:	603b      	str	r3, [r7, #0]
  while (len > 1) {
90008578:	683b      	ldr	r3, [r7, #0]
9000857a:	2b01      	cmp	r3, #1
9000857c:	dcf1      	bgt.n	90008562 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
9000857e:	683b      	ldr	r3, [r7, #0]
90008580:	2b00      	cmp	r3, #0
90008582:	dd04      	ble.n	9000858e <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
90008584:	f107 030e 	add.w	r3, r7, #14
90008588:	69ba      	ldr	r2, [r7, #24]
9000858a:	7812      	ldrb	r2, [r2, #0]
9000858c:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
9000858e:	89fb      	ldrh	r3, [r7, #14]
90008590:	461a      	mov	r2, r3
90008592:	697b      	ldr	r3, [r7, #20]
90008594:	4413      	add	r3, r2
90008596:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
90008598:	697b      	ldr	r3, [r7, #20]
9000859a:	0c1a      	lsrs	r2, r3, #16
9000859c:	697b      	ldr	r3, [r7, #20]
9000859e:	b29b      	uxth	r3, r3
900085a0:	4413      	add	r3, r2
900085a2:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
900085a4:	697b      	ldr	r3, [r7, #20]
900085a6:	0c1a      	lsrs	r2, r3, #16
900085a8:	697b      	ldr	r3, [r7, #20]
900085aa:	b29b      	uxth	r3, r3
900085ac:	4413      	add	r3, r2
900085ae:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
900085b0:	693b      	ldr	r3, [r7, #16]
900085b2:	2b00      	cmp	r3, #0
900085b4:	d007      	beq.n	900085c6 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
900085b6:	697b      	ldr	r3, [r7, #20]
900085b8:	021b      	lsls	r3, r3, #8
900085ba:	b29a      	uxth	r2, r3
900085bc:	697b      	ldr	r3, [r7, #20]
900085be:	0a1b      	lsrs	r3, r3, #8
900085c0:	b2db      	uxtb	r3, r3
900085c2:	4313      	orrs	r3, r2
900085c4:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
900085c6:	697b      	ldr	r3, [r7, #20]
900085c8:	b29b      	uxth	r3, r3
}
900085ca:	4618      	mov	r0, r3
900085cc:	3724      	adds	r7, #36	; 0x24
900085ce:	46bd      	mov	sp, r7
900085d0:	f85d 7b04 	ldr.w	r7, [sp], #4
900085d4:	4770      	bx	lr

900085d6 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
900085d6:	b580      	push	{r7, lr}
900085d8:	b082      	sub	sp, #8
900085da:	af00      	add	r7, sp, #0
900085dc:	6078      	str	r0, [r7, #4]
900085de:	460b      	mov	r3, r1
900085e0:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
900085e2:	887b      	ldrh	r3, [r7, #2]
900085e4:	4619      	mov	r1, r3
900085e6:	6878      	ldr	r0, [r7, #4]
900085e8:	f7ff ff98 	bl	9000851c <lwip_standard_chksum>
900085ec:	4603      	mov	r3, r0
900085ee:	43db      	mvns	r3, r3
900085f0:	b29b      	uxth	r3, r3
}
900085f2:	4618      	mov	r0, r3
900085f4:	3708      	adds	r7, #8
900085f6:	46bd      	mov	sp, r7
900085f8:	bd80      	pop	{r7, pc}

900085fa <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
900085fa:	b580      	push	{r7, lr}
900085fc:	b086      	sub	sp, #24
900085fe:	af00      	add	r7, sp, #0
90008600:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
90008602:	2300      	movs	r3, #0
90008604:	60fb      	str	r3, [r7, #12]

  acc = 0;
90008606:	2300      	movs	r3, #0
90008608:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
9000860a:	687b      	ldr	r3, [r7, #4]
9000860c:	613b      	str	r3, [r7, #16]
9000860e:	e02b      	b.n	90008668 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
90008610:	693b      	ldr	r3, [r7, #16]
90008612:	685a      	ldr	r2, [r3, #4]
90008614:	693b      	ldr	r3, [r7, #16]
90008616:	895b      	ldrh	r3, [r3, #10]
90008618:	4619      	mov	r1, r3
9000861a:	4610      	mov	r0, r2
9000861c:	f7ff ff7e 	bl	9000851c <lwip_standard_chksum>
90008620:	4603      	mov	r3, r0
90008622:	461a      	mov	r2, r3
90008624:	697b      	ldr	r3, [r7, #20]
90008626:	4413      	add	r3, r2
90008628:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
9000862a:	697b      	ldr	r3, [r7, #20]
9000862c:	0c1a      	lsrs	r2, r3, #16
9000862e:	697b      	ldr	r3, [r7, #20]
90008630:	b29b      	uxth	r3, r3
90008632:	4413      	add	r3, r2
90008634:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
90008636:	693b      	ldr	r3, [r7, #16]
90008638:	895b      	ldrh	r3, [r3, #10]
9000863a:	f003 0301 	and.w	r3, r3, #1
9000863e:	b29b      	uxth	r3, r3
90008640:	2b00      	cmp	r3, #0
90008642:	d00e      	beq.n	90008662 <inet_chksum_pbuf+0x68>
      swapped = !swapped;
90008644:	68fb      	ldr	r3, [r7, #12]
90008646:	2b00      	cmp	r3, #0
90008648:	bf0c      	ite	eq
9000864a:	2301      	moveq	r3, #1
9000864c:	2300      	movne	r3, #0
9000864e:	b2db      	uxtb	r3, r3
90008650:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
90008652:	697b      	ldr	r3, [r7, #20]
90008654:	021b      	lsls	r3, r3, #8
90008656:	b29a      	uxth	r2, r3
90008658:	697b      	ldr	r3, [r7, #20]
9000865a:	0a1b      	lsrs	r3, r3, #8
9000865c:	b2db      	uxtb	r3, r3
9000865e:	4313      	orrs	r3, r2
90008660:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
90008662:	693b      	ldr	r3, [r7, #16]
90008664:	681b      	ldr	r3, [r3, #0]
90008666:	613b      	str	r3, [r7, #16]
90008668:	693b      	ldr	r3, [r7, #16]
9000866a:	2b00      	cmp	r3, #0
9000866c:	d1d0      	bne.n	90008610 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
9000866e:	68fb      	ldr	r3, [r7, #12]
90008670:	2b00      	cmp	r3, #0
90008672:	d007      	beq.n	90008684 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
90008674:	697b      	ldr	r3, [r7, #20]
90008676:	021b      	lsls	r3, r3, #8
90008678:	b29a      	uxth	r2, r3
9000867a:	697b      	ldr	r3, [r7, #20]
9000867c:	0a1b      	lsrs	r3, r3, #8
9000867e:	b2db      	uxtb	r3, r3
90008680:	4313      	orrs	r3, r2
90008682:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
90008684:	697b      	ldr	r3, [r7, #20]
90008686:	b29b      	uxth	r3, r3
90008688:	43db      	mvns	r3, r3
9000868a:	b29b      	uxth	r3, r3
}
9000868c:	4618      	mov	r0, r3
9000868e:	3718      	adds	r7, #24
90008690:	46bd      	mov	sp, r7
90008692:	bd80      	pop	{r7, pc}

90008694 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
90008694:	b580      	push	{r7, lr}
90008696:	b082      	sub	sp, #8
90008698:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
9000869a:	2300      	movs	r3, #0
9000869c:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
9000869e:	f00a fd69 	bl	90013174 <sys_init>
#endif /* !NO_SYS */
  mem_init();
900086a2:	f000 f8d9 	bl	90008858 <mem_init>
  memp_init();
900086a6:	f000 fc3d 	bl	90008f24 <memp_init>
  pbuf_init();
  netif_init();
900086aa:	f000 fd49 	bl	90009140 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
900086ae:	f008 f82f 	bl	90010710 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
900086b2:	f001 fe59 	bl	9000a368 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
900086b6:	f007 ff71 	bl	9001059c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
900086ba:	bf00      	nop
900086bc:	3708      	adds	r7, #8
900086be:	46bd      	mov	sp, r7
900086c0:	bd80      	pop	{r7, pc}
	...

900086c4 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
900086c4:	b480      	push	{r7}
900086c6:	b083      	sub	sp, #12
900086c8:	af00      	add	r7, sp, #0
900086ca:	4603      	mov	r3, r0
900086cc:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
900086ce:	4b05      	ldr	r3, [pc, #20]	; (900086e4 <ptr_to_mem+0x20>)
900086d0:	681a      	ldr	r2, [r3, #0]
900086d2:	88fb      	ldrh	r3, [r7, #6]
900086d4:	4413      	add	r3, r2
}
900086d6:	4618      	mov	r0, r3
900086d8:	370c      	adds	r7, #12
900086da:	46bd      	mov	sp, r7
900086dc:	f85d 7b04 	ldr.w	r7, [sp], #4
900086e0:	4770      	bx	lr
900086e2:	bf00      	nop
900086e4:	2400df38 	.word	0x2400df38

900086e8 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
900086e8:	b480      	push	{r7}
900086ea:	b083      	sub	sp, #12
900086ec:	af00      	add	r7, sp, #0
900086ee:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
900086f0:	4b05      	ldr	r3, [pc, #20]	; (90008708 <mem_to_ptr+0x20>)
900086f2:	681b      	ldr	r3, [r3, #0]
900086f4:	687a      	ldr	r2, [r7, #4]
900086f6:	1ad3      	subs	r3, r2, r3
900086f8:	b29b      	uxth	r3, r3
}
900086fa:	4618      	mov	r0, r3
900086fc:	370c      	adds	r7, #12
900086fe:	46bd      	mov	sp, r7
90008700:	f85d 7b04 	ldr.w	r7, [sp], #4
90008704:	4770      	bx	lr
90008706:	bf00      	nop
90008708:	2400df38 	.word	0x2400df38

9000870c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
9000870c:	b590      	push	{r4, r7, lr}
9000870e:	b085      	sub	sp, #20
90008710:	af00      	add	r7, sp, #0
90008712:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
90008714:	4b47      	ldr	r3, [pc, #284]	; (90008834 <plug_holes+0x128>)
90008716:	681b      	ldr	r3, [r3, #0]
90008718:	687a      	ldr	r2, [r7, #4]
9000871a:	429a      	cmp	r2, r3
9000871c:	d206      	bcs.n	9000872c <plug_holes+0x20>
9000871e:	4b46      	ldr	r3, [pc, #280]	; (90008838 <plug_holes+0x12c>)
90008720:	f240 12df 	movw	r2, #479	; 0x1df
90008724:	4945      	ldr	r1, [pc, #276]	; (9000883c <plug_holes+0x130>)
90008726:	4846      	ldr	r0, [pc, #280]	; (90008840 <plug_holes+0x134>)
90008728:	f00a ff86 	bl	90013638 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
9000872c:	4b45      	ldr	r3, [pc, #276]	; (90008844 <plug_holes+0x138>)
9000872e:	681b      	ldr	r3, [r3, #0]
90008730:	687a      	ldr	r2, [r7, #4]
90008732:	429a      	cmp	r2, r3
90008734:	d306      	bcc.n	90008744 <plug_holes+0x38>
90008736:	4b40      	ldr	r3, [pc, #256]	; (90008838 <plug_holes+0x12c>)
90008738:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
9000873c:	4942      	ldr	r1, [pc, #264]	; (90008848 <plug_holes+0x13c>)
9000873e:	4840      	ldr	r0, [pc, #256]	; (90008840 <plug_holes+0x134>)
90008740:	f00a ff7a 	bl	90013638 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
90008744:	687b      	ldr	r3, [r7, #4]
90008746:	791b      	ldrb	r3, [r3, #4]
90008748:	2b00      	cmp	r3, #0
9000874a:	d006      	beq.n	9000875a <plug_holes+0x4e>
9000874c:	4b3a      	ldr	r3, [pc, #232]	; (90008838 <plug_holes+0x12c>)
9000874e:	f240 12e1 	movw	r2, #481	; 0x1e1
90008752:	493e      	ldr	r1, [pc, #248]	; (9000884c <plug_holes+0x140>)
90008754:	483a      	ldr	r0, [pc, #232]	; (90008840 <plug_holes+0x134>)
90008756:	f00a ff6f 	bl	90013638 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
9000875a:	687b      	ldr	r3, [r7, #4]
9000875c:	881b      	ldrh	r3, [r3, #0]
9000875e:	f643 72e8 	movw	r2, #16360	; 0x3fe8
90008762:	4293      	cmp	r3, r2
90008764:	d906      	bls.n	90008774 <plug_holes+0x68>
90008766:	4b34      	ldr	r3, [pc, #208]	; (90008838 <plug_holes+0x12c>)
90008768:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
9000876c:	4938      	ldr	r1, [pc, #224]	; (90008850 <plug_holes+0x144>)
9000876e:	4834      	ldr	r0, [pc, #208]	; (90008840 <plug_holes+0x134>)
90008770:	f00a ff62 	bl	90013638 <iprintf>

  nmem = ptr_to_mem(mem->next);
90008774:	687b      	ldr	r3, [r7, #4]
90008776:	881b      	ldrh	r3, [r3, #0]
90008778:	4618      	mov	r0, r3
9000877a:	f7ff ffa3 	bl	900086c4 <ptr_to_mem>
9000877e:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
90008780:	687a      	ldr	r2, [r7, #4]
90008782:	68fb      	ldr	r3, [r7, #12]
90008784:	429a      	cmp	r2, r3
90008786:	d025      	beq.n	900087d4 <plug_holes+0xc8>
90008788:	68fb      	ldr	r3, [r7, #12]
9000878a:	791b      	ldrb	r3, [r3, #4]
9000878c:	2b00      	cmp	r3, #0
9000878e:	d121      	bne.n	900087d4 <plug_holes+0xc8>
90008790:	4b2c      	ldr	r3, [pc, #176]	; (90008844 <plug_holes+0x138>)
90008792:	681b      	ldr	r3, [r3, #0]
90008794:	68fa      	ldr	r2, [r7, #12]
90008796:	429a      	cmp	r2, r3
90008798:	d01c      	beq.n	900087d4 <plug_holes+0xc8>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
9000879a:	4b2e      	ldr	r3, [pc, #184]	; (90008854 <plug_holes+0x148>)
9000879c:	681b      	ldr	r3, [r3, #0]
9000879e:	68fa      	ldr	r2, [r7, #12]
900087a0:	429a      	cmp	r2, r3
900087a2:	d102      	bne.n	900087aa <plug_holes+0x9e>
      lfree = mem;
900087a4:	4a2b      	ldr	r2, [pc, #172]	; (90008854 <plug_holes+0x148>)
900087a6:	687b      	ldr	r3, [r7, #4]
900087a8:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
900087aa:	68fb      	ldr	r3, [r7, #12]
900087ac:	881a      	ldrh	r2, [r3, #0]
900087ae:	687b      	ldr	r3, [r7, #4]
900087b0:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
900087b2:	68fb      	ldr	r3, [r7, #12]
900087b4:	881b      	ldrh	r3, [r3, #0]
900087b6:	f643 72e8 	movw	r2, #16360	; 0x3fe8
900087ba:	4293      	cmp	r3, r2
900087bc:	d00a      	beq.n	900087d4 <plug_holes+0xc8>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
900087be:	68fb      	ldr	r3, [r7, #12]
900087c0:	881b      	ldrh	r3, [r3, #0]
900087c2:	4618      	mov	r0, r3
900087c4:	f7ff ff7e 	bl	900086c4 <ptr_to_mem>
900087c8:	4604      	mov	r4, r0
900087ca:	6878      	ldr	r0, [r7, #4]
900087cc:	f7ff ff8c 	bl	900086e8 <mem_to_ptr>
900087d0:	4603      	mov	r3, r0
900087d2:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
900087d4:	687b      	ldr	r3, [r7, #4]
900087d6:	885b      	ldrh	r3, [r3, #2]
900087d8:	4618      	mov	r0, r3
900087da:	f7ff ff73 	bl	900086c4 <ptr_to_mem>
900087de:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
900087e0:	68ba      	ldr	r2, [r7, #8]
900087e2:	687b      	ldr	r3, [r7, #4]
900087e4:	429a      	cmp	r2, r3
900087e6:	d020      	beq.n	9000882a <plug_holes+0x11e>
900087e8:	68bb      	ldr	r3, [r7, #8]
900087ea:	791b      	ldrb	r3, [r3, #4]
900087ec:	2b00      	cmp	r3, #0
900087ee:	d11c      	bne.n	9000882a <plug_holes+0x11e>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
900087f0:	4b18      	ldr	r3, [pc, #96]	; (90008854 <plug_holes+0x148>)
900087f2:	681b      	ldr	r3, [r3, #0]
900087f4:	687a      	ldr	r2, [r7, #4]
900087f6:	429a      	cmp	r2, r3
900087f8:	d102      	bne.n	90008800 <plug_holes+0xf4>
      lfree = pmem;
900087fa:	4a16      	ldr	r2, [pc, #88]	; (90008854 <plug_holes+0x148>)
900087fc:	68bb      	ldr	r3, [r7, #8]
900087fe:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
90008800:	687b      	ldr	r3, [r7, #4]
90008802:	881a      	ldrh	r2, [r3, #0]
90008804:	68bb      	ldr	r3, [r7, #8]
90008806:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
90008808:	687b      	ldr	r3, [r7, #4]
9000880a:	881b      	ldrh	r3, [r3, #0]
9000880c:	f643 72e8 	movw	r2, #16360	; 0x3fe8
90008810:	4293      	cmp	r3, r2
90008812:	d00a      	beq.n	9000882a <plug_holes+0x11e>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
90008814:	687b      	ldr	r3, [r7, #4]
90008816:	881b      	ldrh	r3, [r3, #0]
90008818:	4618      	mov	r0, r3
9000881a:	f7ff ff53 	bl	900086c4 <ptr_to_mem>
9000881e:	4604      	mov	r4, r0
90008820:	68b8      	ldr	r0, [r7, #8]
90008822:	f7ff ff61 	bl	900086e8 <mem_to_ptr>
90008826:	4603      	mov	r3, r0
90008828:	8063      	strh	r3, [r4, #2]
    }
  }
}
9000882a:	bf00      	nop
9000882c:	3714      	adds	r7, #20
9000882e:	46bd      	mov	sp, r7
90008830:	bd90      	pop	{r4, r7, pc}
90008832:	bf00      	nop
90008834:	2400df38 	.word	0x2400df38
90008838:	900148b4 	.word	0x900148b4
9000883c:	900148e4 	.word	0x900148e4
90008840:	900148fc 	.word	0x900148fc
90008844:	2400df3c 	.word	0x2400df3c
90008848:	90014924 	.word	0x90014924
9000884c:	90014940 	.word	0x90014940
90008850:	9001495c 	.word	0x9001495c
90008854:	2400df44 	.word	0x2400df44

90008858 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
90008858:	b580      	push	{r7, lr}
9000885a:	b082      	sub	sp, #8
9000885c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
9000885e:	4b1d      	ldr	r3, [pc, #116]	; (900088d4 <mem_init+0x7c>)
90008860:	4a1d      	ldr	r2, [pc, #116]	; (900088d8 <mem_init+0x80>)
90008862:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
90008864:	4b1b      	ldr	r3, [pc, #108]	; (900088d4 <mem_init+0x7c>)
90008866:	681b      	ldr	r3, [r3, #0]
90008868:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
9000886a:	687b      	ldr	r3, [r7, #4]
9000886c:	f643 72e8 	movw	r2, #16360	; 0x3fe8
90008870:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
90008872:	687b      	ldr	r3, [r7, #4]
90008874:	2200      	movs	r2, #0
90008876:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
90008878:	687b      	ldr	r3, [r7, #4]
9000887a:	2200      	movs	r2, #0
9000887c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
9000887e:	f643 70e8 	movw	r0, #16360	; 0x3fe8
90008882:	f7ff ff1f 	bl	900086c4 <ptr_to_mem>
90008886:	4603      	mov	r3, r0
90008888:	4a14      	ldr	r2, [pc, #80]	; (900088dc <mem_init+0x84>)
9000888a:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
9000888c:	4b13      	ldr	r3, [pc, #76]	; (900088dc <mem_init+0x84>)
9000888e:	681b      	ldr	r3, [r3, #0]
90008890:	2201      	movs	r2, #1
90008892:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
90008894:	4b11      	ldr	r3, [pc, #68]	; (900088dc <mem_init+0x84>)
90008896:	681b      	ldr	r3, [r3, #0]
90008898:	f643 72e8 	movw	r2, #16360	; 0x3fe8
9000889c:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
9000889e:	4b0f      	ldr	r3, [pc, #60]	; (900088dc <mem_init+0x84>)
900088a0:	681b      	ldr	r3, [r3, #0]
900088a2:	f643 72e8 	movw	r2, #16360	; 0x3fe8
900088a6:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
900088a8:	4b0a      	ldr	r3, [pc, #40]	; (900088d4 <mem_init+0x7c>)
900088aa:	681b      	ldr	r3, [r3, #0]
900088ac:	4a0c      	ldr	r2, [pc, #48]	; (900088e0 <mem_init+0x88>)
900088ae:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
900088b0:	480c      	ldr	r0, [pc, #48]	; (900088e4 <mem_init+0x8c>)
900088b2:	f00a fc6d 	bl	90013190 <sys_mutex_new>
900088b6:	4603      	mov	r3, r0
900088b8:	2b00      	cmp	r3, #0
900088ba:	d006      	beq.n	900088ca <mem_init+0x72>
    LWIP_ASSERT("failed to create mem_mutex", 0);
900088bc:	4b0a      	ldr	r3, [pc, #40]	; (900088e8 <mem_init+0x90>)
900088be:	f240 221f 	movw	r2, #543	; 0x21f
900088c2:	490a      	ldr	r1, [pc, #40]	; (900088ec <mem_init+0x94>)
900088c4:	480a      	ldr	r0, [pc, #40]	; (900088f0 <mem_init+0x98>)
900088c6:	f00a feb7 	bl	90013638 <iprintf>
  }
}
900088ca:	bf00      	nop
900088cc:	3708      	adds	r7, #8
900088ce:	46bd      	mov	sp, r7
900088d0:	bd80      	pop	{r7, pc}
900088d2:	bf00      	nop
900088d4:	2400df38 	.word	0x2400df38
900088d8:	30004000 	.word	0x30004000
900088dc:	2400df3c 	.word	0x2400df3c
900088e0:	2400df44 	.word	0x2400df44
900088e4:	2400df40 	.word	0x2400df40
900088e8:	900148b4 	.word	0x900148b4
900088ec:	90014988 	.word	0x90014988
900088f0:	900148fc 	.word	0x900148fc

900088f4 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
900088f4:	b580      	push	{r7, lr}
900088f6:	b086      	sub	sp, #24
900088f8:	af00      	add	r7, sp, #0
900088fa:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
900088fc:	6878      	ldr	r0, [r7, #4]
900088fe:	f7ff fef3 	bl	900086e8 <mem_to_ptr>
90008902:	4603      	mov	r3, r0
90008904:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
90008906:	687b      	ldr	r3, [r7, #4]
90008908:	881b      	ldrh	r3, [r3, #0]
9000890a:	4618      	mov	r0, r3
9000890c:	f7ff feda 	bl	900086c4 <ptr_to_mem>
90008910:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
90008912:	687b      	ldr	r3, [r7, #4]
90008914:	885b      	ldrh	r3, [r3, #2]
90008916:	4618      	mov	r0, r3
90008918:	f7ff fed4 	bl	900086c4 <ptr_to_mem>
9000891c:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
9000891e:	687b      	ldr	r3, [r7, #4]
90008920:	881b      	ldrh	r3, [r3, #0]
90008922:	f643 72e8 	movw	r2, #16360	; 0x3fe8
90008926:	4293      	cmp	r3, r2
90008928:	d819      	bhi.n	9000895e <mem_link_valid+0x6a>
9000892a:	687b      	ldr	r3, [r7, #4]
9000892c:	885b      	ldrh	r3, [r3, #2]
9000892e:	f643 72e8 	movw	r2, #16360	; 0x3fe8
90008932:	4293      	cmp	r3, r2
90008934:	d813      	bhi.n	9000895e <mem_link_valid+0x6a>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
90008936:	687b      	ldr	r3, [r7, #4]
90008938:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
9000893a:	8afa      	ldrh	r2, [r7, #22]
9000893c:	429a      	cmp	r2, r3
9000893e:	d004      	beq.n	9000894a <mem_link_valid+0x56>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
90008940:	68fb      	ldr	r3, [r7, #12]
90008942:	881b      	ldrh	r3, [r3, #0]
90008944:	8afa      	ldrh	r2, [r7, #22]
90008946:	429a      	cmp	r2, r3
90008948:	d109      	bne.n	9000895e <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
9000894a:	4b08      	ldr	r3, [pc, #32]	; (9000896c <mem_link_valid+0x78>)
9000894c:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
9000894e:	693a      	ldr	r2, [r7, #16]
90008950:	429a      	cmp	r2, r3
90008952:	d006      	beq.n	90008962 <mem_link_valid+0x6e>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
90008954:	693b      	ldr	r3, [r7, #16]
90008956:	885b      	ldrh	r3, [r3, #2]
90008958:	8afa      	ldrh	r2, [r7, #22]
9000895a:	429a      	cmp	r2, r3
9000895c:	d001      	beq.n	90008962 <mem_link_valid+0x6e>
    return 0;
9000895e:	2300      	movs	r3, #0
90008960:	e000      	b.n	90008964 <mem_link_valid+0x70>
  }
  return 1;
90008962:	2301      	movs	r3, #1
}
90008964:	4618      	mov	r0, r3
90008966:	3718      	adds	r7, #24
90008968:	46bd      	mov	sp, r7
9000896a:	bd80      	pop	{r7, pc}
9000896c:	2400df3c 	.word	0x2400df3c

90008970 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
90008970:	b580      	push	{r7, lr}
90008972:	b088      	sub	sp, #32
90008974:	af00      	add	r7, sp, #0
90008976:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
90008978:	687b      	ldr	r3, [r7, #4]
9000897a:	2b00      	cmp	r3, #0
9000897c:	d070      	beq.n	90008a60 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
9000897e:	687b      	ldr	r3, [r7, #4]
90008980:	f003 0303 	and.w	r3, r3, #3
90008984:	2b00      	cmp	r3, #0
90008986:	d00d      	beq.n	900089a4 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
90008988:	4b37      	ldr	r3, [pc, #220]	; (90008a68 <mem_free+0xf8>)
9000898a:	f240 2273 	movw	r2, #627	; 0x273
9000898e:	4937      	ldr	r1, [pc, #220]	; (90008a6c <mem_free+0xfc>)
90008990:	4837      	ldr	r0, [pc, #220]	; (90008a70 <mem_free+0x100>)
90008992:	f00a fe51 	bl	90013638 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
90008996:	f00a fc59 	bl	9001324c <sys_arch_protect>
9000899a:	60f8      	str	r0, [r7, #12]
9000899c:	68f8      	ldr	r0, [r7, #12]
9000899e:	f00a fc63 	bl	90013268 <sys_arch_unprotect>
    return;
900089a2:	e05e      	b.n	90008a62 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
900089a4:	687b      	ldr	r3, [r7, #4]
900089a6:	3b08      	subs	r3, #8
900089a8:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
900089aa:	4b32      	ldr	r3, [pc, #200]	; (90008a74 <mem_free+0x104>)
900089ac:	681b      	ldr	r3, [r3, #0]
900089ae:	69fa      	ldr	r2, [r7, #28]
900089b0:	429a      	cmp	r2, r3
900089b2:	d306      	bcc.n	900089c2 <mem_free+0x52>
900089b4:	687b      	ldr	r3, [r7, #4]
900089b6:	f103 020c 	add.w	r2, r3, #12
900089ba:	4b2f      	ldr	r3, [pc, #188]	; (90008a78 <mem_free+0x108>)
900089bc:	681b      	ldr	r3, [r3, #0]
900089be:	429a      	cmp	r2, r3
900089c0:	d90d      	bls.n	900089de <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
900089c2:	4b29      	ldr	r3, [pc, #164]	; (90008a68 <mem_free+0xf8>)
900089c4:	f240 227f 	movw	r2, #639	; 0x27f
900089c8:	492c      	ldr	r1, [pc, #176]	; (90008a7c <mem_free+0x10c>)
900089ca:	4829      	ldr	r0, [pc, #164]	; (90008a70 <mem_free+0x100>)
900089cc:	f00a fe34 	bl	90013638 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
900089d0:	f00a fc3c 	bl	9001324c <sys_arch_protect>
900089d4:	6138      	str	r0, [r7, #16]
900089d6:	6938      	ldr	r0, [r7, #16]
900089d8:	f00a fc46 	bl	90013268 <sys_arch_unprotect>
    return;
900089dc:	e041      	b.n	90008a62 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
900089de:	4828      	ldr	r0, [pc, #160]	; (90008a80 <mem_free+0x110>)
900089e0:	f00a fbf2 	bl	900131c8 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
900089e4:	69fb      	ldr	r3, [r7, #28]
900089e6:	791b      	ldrb	r3, [r3, #4]
900089e8:	2b00      	cmp	r3, #0
900089ea:	d110      	bne.n	90008a0e <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
900089ec:	4b1e      	ldr	r3, [pc, #120]	; (90008a68 <mem_free+0xf8>)
900089ee:	f44f 7223 	mov.w	r2, #652	; 0x28c
900089f2:	4924      	ldr	r1, [pc, #144]	; (90008a84 <mem_free+0x114>)
900089f4:	481e      	ldr	r0, [pc, #120]	; (90008a70 <mem_free+0x100>)
900089f6:	f00a fe1f 	bl	90013638 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
900089fa:	4821      	ldr	r0, [pc, #132]	; (90008a80 <mem_free+0x110>)
900089fc:	f00a fbf3 	bl	900131e6 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
90008a00:	f00a fc24 	bl	9001324c <sys_arch_protect>
90008a04:	6178      	str	r0, [r7, #20]
90008a06:	6978      	ldr	r0, [r7, #20]
90008a08:	f00a fc2e 	bl	90013268 <sys_arch_unprotect>
    return;
90008a0c:	e029      	b.n	90008a62 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
90008a0e:	69f8      	ldr	r0, [r7, #28]
90008a10:	f7ff ff70 	bl	900088f4 <mem_link_valid>
90008a14:	4603      	mov	r3, r0
90008a16:	2b00      	cmp	r3, #0
90008a18:	d110      	bne.n	90008a3c <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
90008a1a:	4b13      	ldr	r3, [pc, #76]	; (90008a68 <mem_free+0xf8>)
90008a1c:	f240 2295 	movw	r2, #661	; 0x295
90008a20:	4919      	ldr	r1, [pc, #100]	; (90008a88 <mem_free+0x118>)
90008a22:	4813      	ldr	r0, [pc, #76]	; (90008a70 <mem_free+0x100>)
90008a24:	f00a fe08 	bl	90013638 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
90008a28:	4815      	ldr	r0, [pc, #84]	; (90008a80 <mem_free+0x110>)
90008a2a:	f00a fbdc 	bl	900131e6 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
90008a2e:	f00a fc0d 	bl	9001324c <sys_arch_protect>
90008a32:	61b8      	str	r0, [r7, #24]
90008a34:	69b8      	ldr	r0, [r7, #24]
90008a36:	f00a fc17 	bl	90013268 <sys_arch_unprotect>
    return;
90008a3a:	e012      	b.n	90008a62 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
90008a3c:	69fb      	ldr	r3, [r7, #28]
90008a3e:	2200      	movs	r2, #0
90008a40:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
90008a42:	4b12      	ldr	r3, [pc, #72]	; (90008a8c <mem_free+0x11c>)
90008a44:	681b      	ldr	r3, [r3, #0]
90008a46:	69fa      	ldr	r2, [r7, #28]
90008a48:	429a      	cmp	r2, r3
90008a4a:	d202      	bcs.n	90008a52 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
90008a4c:	4a0f      	ldr	r2, [pc, #60]	; (90008a8c <mem_free+0x11c>)
90008a4e:	69fb      	ldr	r3, [r7, #28]
90008a50:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
90008a52:	69f8      	ldr	r0, [r7, #28]
90008a54:	f7ff fe5a 	bl	9000870c <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
90008a58:	4809      	ldr	r0, [pc, #36]	; (90008a80 <mem_free+0x110>)
90008a5a:	f00a fbc4 	bl	900131e6 <sys_mutex_unlock>
90008a5e:	e000      	b.n	90008a62 <mem_free+0xf2>
    return;
90008a60:	bf00      	nop
}
90008a62:	3720      	adds	r7, #32
90008a64:	46bd      	mov	sp, r7
90008a66:	bd80      	pop	{r7, pc}
90008a68:	900148b4 	.word	0x900148b4
90008a6c:	900149a4 	.word	0x900149a4
90008a70:	900148fc 	.word	0x900148fc
90008a74:	2400df38 	.word	0x2400df38
90008a78:	2400df3c 	.word	0x2400df3c
90008a7c:	900149c8 	.word	0x900149c8
90008a80:	2400df40 	.word	0x2400df40
90008a84:	900149e4 	.word	0x900149e4
90008a88:	90014a0c 	.word	0x90014a0c
90008a8c:	2400df44 	.word	0x2400df44

90008a90 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
90008a90:	b580      	push	{r7, lr}
90008a92:	b088      	sub	sp, #32
90008a94:	af00      	add	r7, sp, #0
90008a96:	6078      	str	r0, [r7, #4]
90008a98:	460b      	mov	r3, r1
90008a9a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
90008a9c:	887b      	ldrh	r3, [r7, #2]
90008a9e:	3303      	adds	r3, #3
90008aa0:	b29b      	uxth	r3, r3
90008aa2:	f023 0303 	bic.w	r3, r3, #3
90008aa6:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
90008aa8:	8bfb      	ldrh	r3, [r7, #30]
90008aaa:	2b0b      	cmp	r3, #11
90008aac:	d801      	bhi.n	90008ab2 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
90008aae:	230c      	movs	r3, #12
90008ab0:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
90008ab2:	8bfb      	ldrh	r3, [r7, #30]
90008ab4:	f643 72e8 	movw	r2, #16360	; 0x3fe8
90008ab8:	4293      	cmp	r3, r2
90008aba:	d803      	bhi.n	90008ac4 <mem_trim+0x34>
90008abc:	8bfa      	ldrh	r2, [r7, #30]
90008abe:	887b      	ldrh	r3, [r7, #2]
90008ac0:	429a      	cmp	r2, r3
90008ac2:	d201      	bcs.n	90008ac8 <mem_trim+0x38>
    return NULL;
90008ac4:	2300      	movs	r3, #0
90008ac6:	e0dc      	b.n	90008c82 <mem_trim+0x1f2>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
90008ac8:	4b70      	ldr	r3, [pc, #448]	; (90008c8c <mem_trim+0x1fc>)
90008aca:	681b      	ldr	r3, [r3, #0]
90008acc:	687a      	ldr	r2, [r7, #4]
90008ace:	429a      	cmp	r2, r3
90008ad0:	d304      	bcc.n	90008adc <mem_trim+0x4c>
90008ad2:	4b6f      	ldr	r3, [pc, #444]	; (90008c90 <mem_trim+0x200>)
90008ad4:	681b      	ldr	r3, [r3, #0]
90008ad6:	687a      	ldr	r2, [r7, #4]
90008ad8:	429a      	cmp	r2, r3
90008ada:	d306      	bcc.n	90008aea <mem_trim+0x5a>
90008adc:	4b6d      	ldr	r3, [pc, #436]	; (90008c94 <mem_trim+0x204>)
90008ade:	f240 22d1 	movw	r2, #721	; 0x2d1
90008ae2:	496d      	ldr	r1, [pc, #436]	; (90008c98 <mem_trim+0x208>)
90008ae4:	486d      	ldr	r0, [pc, #436]	; (90008c9c <mem_trim+0x20c>)
90008ae6:	f00a fda7 	bl	90013638 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
90008aea:	4b68      	ldr	r3, [pc, #416]	; (90008c8c <mem_trim+0x1fc>)
90008aec:	681b      	ldr	r3, [r3, #0]
90008aee:	687a      	ldr	r2, [r7, #4]
90008af0:	429a      	cmp	r2, r3
90008af2:	d304      	bcc.n	90008afe <mem_trim+0x6e>
90008af4:	4b66      	ldr	r3, [pc, #408]	; (90008c90 <mem_trim+0x200>)
90008af6:	681b      	ldr	r3, [r3, #0]
90008af8:	687a      	ldr	r2, [r7, #4]
90008afa:	429a      	cmp	r2, r3
90008afc:	d307      	bcc.n	90008b0e <mem_trim+0x7e>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
90008afe:	f00a fba5 	bl	9001324c <sys_arch_protect>
90008b02:	60b8      	str	r0, [r7, #8]
90008b04:	68b8      	ldr	r0, [r7, #8]
90008b06:	f00a fbaf 	bl	90013268 <sys_arch_unprotect>
    return rmem;
90008b0a:	687b      	ldr	r3, [r7, #4]
90008b0c:	e0b9      	b.n	90008c82 <mem_trim+0x1f2>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
90008b0e:	687b      	ldr	r3, [r7, #4]
90008b10:	3b08      	subs	r3, #8
90008b12:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
90008b14:	69b8      	ldr	r0, [r7, #24]
90008b16:	f7ff fde7 	bl	900086e8 <mem_to_ptr>
90008b1a:	4603      	mov	r3, r0
90008b1c:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
90008b1e:	69bb      	ldr	r3, [r7, #24]
90008b20:	881a      	ldrh	r2, [r3, #0]
90008b22:	8afb      	ldrh	r3, [r7, #22]
90008b24:	1ad3      	subs	r3, r2, r3
90008b26:	b29b      	uxth	r3, r3
90008b28:	3b08      	subs	r3, #8
90008b2a:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
90008b2c:	8bfa      	ldrh	r2, [r7, #30]
90008b2e:	8abb      	ldrh	r3, [r7, #20]
90008b30:	429a      	cmp	r2, r3
90008b32:	d906      	bls.n	90008b42 <mem_trim+0xb2>
90008b34:	4b57      	ldr	r3, [pc, #348]	; (90008c94 <mem_trim+0x204>)
90008b36:	f44f 7239 	mov.w	r2, #740	; 0x2e4
90008b3a:	4959      	ldr	r1, [pc, #356]	; (90008ca0 <mem_trim+0x210>)
90008b3c:	4857      	ldr	r0, [pc, #348]	; (90008c9c <mem_trim+0x20c>)
90008b3e:	f00a fd7b 	bl	90013638 <iprintf>
  if (newsize > size) {
90008b42:	8bfa      	ldrh	r2, [r7, #30]
90008b44:	8abb      	ldrh	r3, [r7, #20]
90008b46:	429a      	cmp	r2, r3
90008b48:	d901      	bls.n	90008b4e <mem_trim+0xbe>
    /* not supported */
    return NULL;
90008b4a:	2300      	movs	r3, #0
90008b4c:	e099      	b.n	90008c82 <mem_trim+0x1f2>
  }
  if (newsize == size) {
90008b4e:	8bfa      	ldrh	r2, [r7, #30]
90008b50:	8abb      	ldrh	r3, [r7, #20]
90008b52:	429a      	cmp	r2, r3
90008b54:	d101      	bne.n	90008b5a <mem_trim+0xca>
    /* No change in size, simply return */
    return rmem;
90008b56:	687b      	ldr	r3, [r7, #4]
90008b58:	e093      	b.n	90008c82 <mem_trim+0x1f2>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
90008b5a:	4852      	ldr	r0, [pc, #328]	; (90008ca4 <mem_trim+0x214>)
90008b5c:	f00a fb34 	bl	900131c8 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
90008b60:	69bb      	ldr	r3, [r7, #24]
90008b62:	881b      	ldrh	r3, [r3, #0]
90008b64:	4618      	mov	r0, r3
90008b66:	f7ff fdad 	bl	900086c4 <ptr_to_mem>
90008b6a:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
90008b6c:	693b      	ldr	r3, [r7, #16]
90008b6e:	791b      	ldrb	r3, [r3, #4]
90008b70:	2b00      	cmp	r3, #0
90008b72:	d141      	bne.n	90008bf8 <mem_trim+0x168>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
90008b74:	69bb      	ldr	r3, [r7, #24]
90008b76:	881b      	ldrh	r3, [r3, #0]
90008b78:	f643 72e8 	movw	r2, #16360	; 0x3fe8
90008b7c:	4293      	cmp	r3, r2
90008b7e:	d106      	bne.n	90008b8e <mem_trim+0xfe>
90008b80:	4b44      	ldr	r3, [pc, #272]	; (90008c94 <mem_trim+0x204>)
90008b82:	f240 22f5 	movw	r2, #757	; 0x2f5
90008b86:	4948      	ldr	r1, [pc, #288]	; (90008ca8 <mem_trim+0x218>)
90008b88:	4844      	ldr	r0, [pc, #272]	; (90008c9c <mem_trim+0x20c>)
90008b8a:	f00a fd55 	bl	90013638 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
90008b8e:	693b      	ldr	r3, [r7, #16]
90008b90:	881b      	ldrh	r3, [r3, #0]
90008b92:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
90008b94:	8afa      	ldrh	r2, [r7, #22]
90008b96:	8bfb      	ldrh	r3, [r7, #30]
90008b98:	4413      	add	r3, r2
90008b9a:	b29b      	uxth	r3, r3
90008b9c:	3308      	adds	r3, #8
90008b9e:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
90008ba0:	4b42      	ldr	r3, [pc, #264]	; (90008cac <mem_trim+0x21c>)
90008ba2:	681b      	ldr	r3, [r3, #0]
90008ba4:	693a      	ldr	r2, [r7, #16]
90008ba6:	429a      	cmp	r2, r3
90008ba8:	d106      	bne.n	90008bb8 <mem_trim+0x128>
      lfree = ptr_to_mem(ptr2);
90008baa:	89fb      	ldrh	r3, [r7, #14]
90008bac:	4618      	mov	r0, r3
90008bae:	f7ff fd89 	bl	900086c4 <ptr_to_mem>
90008bb2:	4603      	mov	r3, r0
90008bb4:	4a3d      	ldr	r2, [pc, #244]	; (90008cac <mem_trim+0x21c>)
90008bb6:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
90008bb8:	89fb      	ldrh	r3, [r7, #14]
90008bba:	4618      	mov	r0, r3
90008bbc:	f7ff fd82 	bl	900086c4 <ptr_to_mem>
90008bc0:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
90008bc2:	693b      	ldr	r3, [r7, #16]
90008bc4:	2200      	movs	r2, #0
90008bc6:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
90008bc8:	693b      	ldr	r3, [r7, #16]
90008bca:	89ba      	ldrh	r2, [r7, #12]
90008bcc:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
90008bce:	693b      	ldr	r3, [r7, #16]
90008bd0:	8afa      	ldrh	r2, [r7, #22]
90008bd2:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
90008bd4:	69bb      	ldr	r3, [r7, #24]
90008bd6:	89fa      	ldrh	r2, [r7, #14]
90008bd8:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
90008bda:	693b      	ldr	r3, [r7, #16]
90008bdc:	881b      	ldrh	r3, [r3, #0]
90008bde:	f643 72e8 	movw	r2, #16360	; 0x3fe8
90008be2:	4293      	cmp	r3, r2
90008be4:	d049      	beq.n	90008c7a <mem_trim+0x1ea>
      ptr_to_mem(mem2->next)->prev = ptr2;
90008be6:	693b      	ldr	r3, [r7, #16]
90008be8:	881b      	ldrh	r3, [r3, #0]
90008bea:	4618      	mov	r0, r3
90008bec:	f7ff fd6a 	bl	900086c4 <ptr_to_mem>
90008bf0:	4602      	mov	r2, r0
90008bf2:	89fb      	ldrh	r3, [r7, #14]
90008bf4:	8053      	strh	r3, [r2, #2]
90008bf6:	e040      	b.n	90008c7a <mem_trim+0x1ea>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
90008bf8:	8bfb      	ldrh	r3, [r7, #30]
90008bfa:	f103 0214 	add.w	r2, r3, #20
90008bfe:	8abb      	ldrh	r3, [r7, #20]
90008c00:	429a      	cmp	r2, r3
90008c02:	d83a      	bhi.n	90008c7a <mem_trim+0x1ea>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
90008c04:	8afa      	ldrh	r2, [r7, #22]
90008c06:	8bfb      	ldrh	r3, [r7, #30]
90008c08:	4413      	add	r3, r2
90008c0a:	b29b      	uxth	r3, r3
90008c0c:	3308      	adds	r3, #8
90008c0e:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
90008c10:	69bb      	ldr	r3, [r7, #24]
90008c12:	881b      	ldrh	r3, [r3, #0]
90008c14:	f643 72e8 	movw	r2, #16360	; 0x3fe8
90008c18:	4293      	cmp	r3, r2
90008c1a:	d106      	bne.n	90008c2a <mem_trim+0x19a>
90008c1c:	4b1d      	ldr	r3, [pc, #116]	; (90008c94 <mem_trim+0x204>)
90008c1e:	f240 3216 	movw	r2, #790	; 0x316
90008c22:	4921      	ldr	r1, [pc, #132]	; (90008ca8 <mem_trim+0x218>)
90008c24:	481d      	ldr	r0, [pc, #116]	; (90008c9c <mem_trim+0x20c>)
90008c26:	f00a fd07 	bl	90013638 <iprintf>
    mem2 = ptr_to_mem(ptr2);
90008c2a:	89fb      	ldrh	r3, [r7, #14]
90008c2c:	4618      	mov	r0, r3
90008c2e:	f7ff fd49 	bl	900086c4 <ptr_to_mem>
90008c32:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
90008c34:	4b1d      	ldr	r3, [pc, #116]	; (90008cac <mem_trim+0x21c>)
90008c36:	681b      	ldr	r3, [r3, #0]
90008c38:	693a      	ldr	r2, [r7, #16]
90008c3a:	429a      	cmp	r2, r3
90008c3c:	d202      	bcs.n	90008c44 <mem_trim+0x1b4>
      lfree = mem2;
90008c3e:	4a1b      	ldr	r2, [pc, #108]	; (90008cac <mem_trim+0x21c>)
90008c40:	693b      	ldr	r3, [r7, #16]
90008c42:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
90008c44:	693b      	ldr	r3, [r7, #16]
90008c46:	2200      	movs	r2, #0
90008c48:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
90008c4a:	69bb      	ldr	r3, [r7, #24]
90008c4c:	881a      	ldrh	r2, [r3, #0]
90008c4e:	693b      	ldr	r3, [r7, #16]
90008c50:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
90008c52:	693b      	ldr	r3, [r7, #16]
90008c54:	8afa      	ldrh	r2, [r7, #22]
90008c56:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
90008c58:	69bb      	ldr	r3, [r7, #24]
90008c5a:	89fa      	ldrh	r2, [r7, #14]
90008c5c:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
90008c5e:	693b      	ldr	r3, [r7, #16]
90008c60:	881b      	ldrh	r3, [r3, #0]
90008c62:	f643 72e8 	movw	r2, #16360	; 0x3fe8
90008c66:	4293      	cmp	r3, r2
90008c68:	d007      	beq.n	90008c7a <mem_trim+0x1ea>
      ptr_to_mem(mem2->next)->prev = ptr2;
90008c6a:	693b      	ldr	r3, [r7, #16]
90008c6c:	881b      	ldrh	r3, [r3, #0]
90008c6e:	4618      	mov	r0, r3
90008c70:	f7ff fd28 	bl	900086c4 <ptr_to_mem>
90008c74:	4602      	mov	r2, r0
90008c76:	89fb      	ldrh	r3, [r7, #14]
90008c78:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
90008c7a:	480a      	ldr	r0, [pc, #40]	; (90008ca4 <mem_trim+0x214>)
90008c7c:	f00a fab3 	bl	900131e6 <sys_mutex_unlock>
  return rmem;
90008c80:	687b      	ldr	r3, [r7, #4]
}
90008c82:	4618      	mov	r0, r3
90008c84:	3720      	adds	r7, #32
90008c86:	46bd      	mov	sp, r7
90008c88:	bd80      	pop	{r7, pc}
90008c8a:	bf00      	nop
90008c8c:	2400df38 	.word	0x2400df38
90008c90:	2400df3c 	.word	0x2400df3c
90008c94:	900148b4 	.word	0x900148b4
90008c98:	90014a40 	.word	0x90014a40
90008c9c:	900148fc 	.word	0x900148fc
90008ca0:	90014a58 	.word	0x90014a58
90008ca4:	2400df40 	.word	0x2400df40
90008ca8:	90014a78 	.word	0x90014a78
90008cac:	2400df44 	.word	0x2400df44

90008cb0 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
90008cb0:	b580      	push	{r7, lr}
90008cb2:	b088      	sub	sp, #32
90008cb4:	af00      	add	r7, sp, #0
90008cb6:	4603      	mov	r3, r0
90008cb8:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
90008cba:	88fb      	ldrh	r3, [r7, #6]
90008cbc:	2b00      	cmp	r3, #0
90008cbe:	d101      	bne.n	90008cc4 <mem_malloc+0x14>
    return NULL;
90008cc0:	2300      	movs	r3, #0
90008cc2:	e0e6      	b.n	90008e92 <mem_malloc+0x1e2>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
90008cc4:	88fb      	ldrh	r3, [r7, #6]
90008cc6:	3303      	adds	r3, #3
90008cc8:	b29b      	uxth	r3, r3
90008cca:	f023 0303 	bic.w	r3, r3, #3
90008cce:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
90008cd0:	8bbb      	ldrh	r3, [r7, #28]
90008cd2:	2b0b      	cmp	r3, #11
90008cd4:	d801      	bhi.n	90008cda <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
90008cd6:	230c      	movs	r3, #12
90008cd8:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
90008cda:	8bbb      	ldrh	r3, [r7, #28]
90008cdc:	f643 72e8 	movw	r2, #16360	; 0x3fe8
90008ce0:	4293      	cmp	r3, r2
90008ce2:	d803      	bhi.n	90008cec <mem_malloc+0x3c>
90008ce4:	8bba      	ldrh	r2, [r7, #28]
90008ce6:	88fb      	ldrh	r3, [r7, #6]
90008ce8:	429a      	cmp	r2, r3
90008cea:	d201      	bcs.n	90008cf0 <mem_malloc+0x40>
    return NULL;
90008cec:	2300      	movs	r3, #0
90008cee:	e0d0      	b.n	90008e92 <mem_malloc+0x1e2>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
90008cf0:	486a      	ldr	r0, [pc, #424]	; (90008e9c <mem_malloc+0x1ec>)
90008cf2:	f00a fa69 	bl	900131c8 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
90008cf6:	4b6a      	ldr	r3, [pc, #424]	; (90008ea0 <mem_malloc+0x1f0>)
90008cf8:	681b      	ldr	r3, [r3, #0]
90008cfa:	4618      	mov	r0, r3
90008cfc:	f7ff fcf4 	bl	900086e8 <mem_to_ptr>
90008d00:	4603      	mov	r3, r0
90008d02:	83fb      	strh	r3, [r7, #30]
90008d04:	e0b9      	b.n	90008e7a <mem_malloc+0x1ca>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
90008d06:	8bfb      	ldrh	r3, [r7, #30]
90008d08:	4618      	mov	r0, r3
90008d0a:	f7ff fcdb 	bl	900086c4 <ptr_to_mem>
90008d0e:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
90008d10:	697b      	ldr	r3, [r7, #20]
90008d12:	791b      	ldrb	r3, [r3, #4]
90008d14:	2b00      	cmp	r3, #0
90008d16:	f040 80a9 	bne.w	90008e6c <mem_malloc+0x1bc>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
90008d1a:	697b      	ldr	r3, [r7, #20]
90008d1c:	881b      	ldrh	r3, [r3, #0]
90008d1e:	461a      	mov	r2, r3
90008d20:	8bfb      	ldrh	r3, [r7, #30]
90008d22:	1ad3      	subs	r3, r2, r3
90008d24:	f1a3 0208 	sub.w	r2, r3, #8
90008d28:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
90008d2a:	429a      	cmp	r2, r3
90008d2c:	f0c0 809e 	bcc.w	90008e6c <mem_malloc+0x1bc>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
90008d30:	697b      	ldr	r3, [r7, #20]
90008d32:	881b      	ldrh	r3, [r3, #0]
90008d34:	461a      	mov	r2, r3
90008d36:	8bfb      	ldrh	r3, [r7, #30]
90008d38:	1ad3      	subs	r3, r2, r3
90008d3a:	f1a3 0208 	sub.w	r2, r3, #8
90008d3e:	8bbb      	ldrh	r3, [r7, #28]
90008d40:	3314      	adds	r3, #20
90008d42:	429a      	cmp	r2, r3
90008d44:	d335      	bcc.n	90008db2 <mem_malloc+0x102>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
90008d46:	8bfa      	ldrh	r2, [r7, #30]
90008d48:	8bbb      	ldrh	r3, [r7, #28]
90008d4a:	4413      	add	r3, r2
90008d4c:	b29b      	uxth	r3, r3
90008d4e:	3308      	adds	r3, #8
90008d50:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
90008d52:	8a7b      	ldrh	r3, [r7, #18]
90008d54:	f643 72e8 	movw	r2, #16360	; 0x3fe8
90008d58:	4293      	cmp	r3, r2
90008d5a:	d106      	bne.n	90008d6a <mem_malloc+0xba>
90008d5c:	4b51      	ldr	r3, [pc, #324]	; (90008ea4 <mem_malloc+0x1f4>)
90008d5e:	f240 3287 	movw	r2, #903	; 0x387
90008d62:	4951      	ldr	r1, [pc, #324]	; (90008ea8 <mem_malloc+0x1f8>)
90008d64:	4851      	ldr	r0, [pc, #324]	; (90008eac <mem_malloc+0x1fc>)
90008d66:	f00a fc67 	bl	90013638 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
90008d6a:	8a7b      	ldrh	r3, [r7, #18]
90008d6c:	4618      	mov	r0, r3
90008d6e:	f7ff fca9 	bl	900086c4 <ptr_to_mem>
90008d72:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
90008d74:	68fb      	ldr	r3, [r7, #12]
90008d76:	2200      	movs	r2, #0
90008d78:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
90008d7a:	697b      	ldr	r3, [r7, #20]
90008d7c:	881a      	ldrh	r2, [r3, #0]
90008d7e:	68fb      	ldr	r3, [r7, #12]
90008d80:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
90008d82:	68fb      	ldr	r3, [r7, #12]
90008d84:	8bfa      	ldrh	r2, [r7, #30]
90008d86:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
90008d88:	697b      	ldr	r3, [r7, #20]
90008d8a:	8a7a      	ldrh	r2, [r7, #18]
90008d8c:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
90008d8e:	697b      	ldr	r3, [r7, #20]
90008d90:	2201      	movs	r2, #1
90008d92:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
90008d94:	68fb      	ldr	r3, [r7, #12]
90008d96:	881b      	ldrh	r3, [r3, #0]
90008d98:	f643 72e8 	movw	r2, #16360	; 0x3fe8
90008d9c:	4293      	cmp	r3, r2
90008d9e:	d00b      	beq.n	90008db8 <mem_malloc+0x108>
            ptr_to_mem(mem2->next)->prev = ptr2;
90008da0:	68fb      	ldr	r3, [r7, #12]
90008da2:	881b      	ldrh	r3, [r3, #0]
90008da4:	4618      	mov	r0, r3
90008da6:	f7ff fc8d 	bl	900086c4 <ptr_to_mem>
90008daa:	4602      	mov	r2, r0
90008dac:	8a7b      	ldrh	r3, [r7, #18]
90008dae:	8053      	strh	r3, [r2, #2]
90008db0:	e002      	b.n	90008db8 <mem_malloc+0x108>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
90008db2:	697b      	ldr	r3, [r7, #20]
90008db4:	2201      	movs	r2, #1
90008db6:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
90008db8:	4b39      	ldr	r3, [pc, #228]	; (90008ea0 <mem_malloc+0x1f0>)
90008dba:	681b      	ldr	r3, [r3, #0]
90008dbc:	697a      	ldr	r2, [r7, #20]
90008dbe:	429a      	cmp	r2, r3
90008dc0:	d127      	bne.n	90008e12 <mem_malloc+0x162>
          struct mem *cur = lfree;
90008dc2:	4b37      	ldr	r3, [pc, #220]	; (90008ea0 <mem_malloc+0x1f0>)
90008dc4:	681b      	ldr	r3, [r3, #0]
90008dc6:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
90008dc8:	e005      	b.n	90008dd6 <mem_malloc+0x126>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
90008dca:	69bb      	ldr	r3, [r7, #24]
90008dcc:	881b      	ldrh	r3, [r3, #0]
90008dce:	4618      	mov	r0, r3
90008dd0:	f7ff fc78 	bl	900086c4 <ptr_to_mem>
90008dd4:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
90008dd6:	69bb      	ldr	r3, [r7, #24]
90008dd8:	791b      	ldrb	r3, [r3, #4]
90008dda:	2b00      	cmp	r3, #0
90008ddc:	d004      	beq.n	90008de8 <mem_malloc+0x138>
90008dde:	4b34      	ldr	r3, [pc, #208]	; (90008eb0 <mem_malloc+0x200>)
90008de0:	681b      	ldr	r3, [r3, #0]
90008de2:	69ba      	ldr	r2, [r7, #24]
90008de4:	429a      	cmp	r2, r3
90008de6:	d1f0      	bne.n	90008dca <mem_malloc+0x11a>
          }
          lfree = cur;
90008de8:	4a2d      	ldr	r2, [pc, #180]	; (90008ea0 <mem_malloc+0x1f0>)
90008dea:	69bb      	ldr	r3, [r7, #24]
90008dec:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
90008dee:	4b2c      	ldr	r3, [pc, #176]	; (90008ea0 <mem_malloc+0x1f0>)
90008df0:	681a      	ldr	r2, [r3, #0]
90008df2:	4b2f      	ldr	r3, [pc, #188]	; (90008eb0 <mem_malloc+0x200>)
90008df4:	681b      	ldr	r3, [r3, #0]
90008df6:	429a      	cmp	r2, r3
90008df8:	d00b      	beq.n	90008e12 <mem_malloc+0x162>
90008dfa:	4b29      	ldr	r3, [pc, #164]	; (90008ea0 <mem_malloc+0x1f0>)
90008dfc:	681b      	ldr	r3, [r3, #0]
90008dfe:	791b      	ldrb	r3, [r3, #4]
90008e00:	2b00      	cmp	r3, #0
90008e02:	d006      	beq.n	90008e12 <mem_malloc+0x162>
90008e04:	4b27      	ldr	r3, [pc, #156]	; (90008ea4 <mem_malloc+0x1f4>)
90008e06:	f240 32b5 	movw	r2, #949	; 0x3b5
90008e0a:	492a      	ldr	r1, [pc, #168]	; (90008eb4 <mem_malloc+0x204>)
90008e0c:	4827      	ldr	r0, [pc, #156]	; (90008eac <mem_malloc+0x1fc>)
90008e0e:	f00a fc13 	bl	90013638 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
90008e12:	4822      	ldr	r0, [pc, #136]	; (90008e9c <mem_malloc+0x1ec>)
90008e14:	f00a f9e7 	bl	900131e6 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
90008e18:	8bba      	ldrh	r2, [r7, #28]
90008e1a:	697b      	ldr	r3, [r7, #20]
90008e1c:	4413      	add	r3, r2
90008e1e:	3308      	adds	r3, #8
90008e20:	4a23      	ldr	r2, [pc, #140]	; (90008eb0 <mem_malloc+0x200>)
90008e22:	6812      	ldr	r2, [r2, #0]
90008e24:	4293      	cmp	r3, r2
90008e26:	d906      	bls.n	90008e36 <mem_malloc+0x186>
90008e28:	4b1e      	ldr	r3, [pc, #120]	; (90008ea4 <mem_malloc+0x1f4>)
90008e2a:	f240 32b9 	movw	r2, #953	; 0x3b9
90008e2e:	4922      	ldr	r1, [pc, #136]	; (90008eb8 <mem_malloc+0x208>)
90008e30:	481e      	ldr	r0, [pc, #120]	; (90008eac <mem_malloc+0x1fc>)
90008e32:	f00a fc01 	bl	90013638 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
90008e36:	697b      	ldr	r3, [r7, #20]
90008e38:	f003 0303 	and.w	r3, r3, #3
90008e3c:	2b00      	cmp	r3, #0
90008e3e:	d006      	beq.n	90008e4e <mem_malloc+0x19e>
90008e40:	4b18      	ldr	r3, [pc, #96]	; (90008ea4 <mem_malloc+0x1f4>)
90008e42:	f240 32bb 	movw	r2, #955	; 0x3bb
90008e46:	491d      	ldr	r1, [pc, #116]	; (90008ebc <mem_malloc+0x20c>)
90008e48:	4818      	ldr	r0, [pc, #96]	; (90008eac <mem_malloc+0x1fc>)
90008e4a:	f00a fbf5 	bl	90013638 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
90008e4e:	697b      	ldr	r3, [r7, #20]
90008e50:	f003 0303 	and.w	r3, r3, #3
90008e54:	2b00      	cmp	r3, #0
90008e56:	d006      	beq.n	90008e66 <mem_malloc+0x1b6>
90008e58:	4b12      	ldr	r3, [pc, #72]	; (90008ea4 <mem_malloc+0x1f4>)
90008e5a:	f240 32bd 	movw	r2, #957	; 0x3bd
90008e5e:	4918      	ldr	r1, [pc, #96]	; (90008ec0 <mem_malloc+0x210>)
90008e60:	4812      	ldr	r0, [pc, #72]	; (90008eac <mem_malloc+0x1fc>)
90008e62:	f00a fbe9 	bl	90013638 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
90008e66:	697b      	ldr	r3, [r7, #20]
90008e68:	3308      	adds	r3, #8
90008e6a:	e012      	b.n	90008e92 <mem_malloc+0x1e2>
         ptr = ptr_to_mem(ptr)->next) {
90008e6c:	8bfb      	ldrh	r3, [r7, #30]
90008e6e:	4618      	mov	r0, r3
90008e70:	f7ff fc28 	bl	900086c4 <ptr_to_mem>
90008e74:	4603      	mov	r3, r0
90008e76:	881b      	ldrh	r3, [r3, #0]
90008e78:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
90008e7a:	8bfa      	ldrh	r2, [r7, #30]
90008e7c:	8bb9      	ldrh	r1, [r7, #28]
90008e7e:	f643 73e8 	movw	r3, #16360	; 0x3fe8
90008e82:	1a5b      	subs	r3, r3, r1
90008e84:	429a      	cmp	r2, r3
90008e86:	f4ff af3e 	bcc.w	90008d06 <mem_malloc+0x56>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
90008e8a:	4804      	ldr	r0, [pc, #16]	; (90008e9c <mem_malloc+0x1ec>)
90008e8c:	f00a f9ab 	bl	900131e6 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
90008e90:	2300      	movs	r3, #0
}
90008e92:	4618      	mov	r0, r3
90008e94:	3720      	adds	r7, #32
90008e96:	46bd      	mov	sp, r7
90008e98:	bd80      	pop	{r7, pc}
90008e9a:	bf00      	nop
90008e9c:	2400df40 	.word	0x2400df40
90008ea0:	2400df44 	.word	0x2400df44
90008ea4:	900148b4 	.word	0x900148b4
90008ea8:	90014a78 	.word	0x90014a78
90008eac:	900148fc 	.word	0x900148fc
90008eb0:	2400df3c 	.word	0x2400df3c
90008eb4:	90014a8c 	.word	0x90014a8c
90008eb8:	90014aa8 	.word	0x90014aa8
90008ebc:	90014ad8 	.word	0x90014ad8
90008ec0:	90014b08 	.word	0x90014b08

90008ec4 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
90008ec4:	b480      	push	{r7}
90008ec6:	b085      	sub	sp, #20
90008ec8:	af00      	add	r7, sp, #0
90008eca:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
90008ecc:	687b      	ldr	r3, [r7, #4]
90008ece:	689b      	ldr	r3, [r3, #8]
90008ed0:	2200      	movs	r2, #0
90008ed2:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
90008ed4:	687b      	ldr	r3, [r7, #4]
90008ed6:	685b      	ldr	r3, [r3, #4]
90008ed8:	3303      	adds	r3, #3
90008eda:	f023 0303 	bic.w	r3, r3, #3
90008ede:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
90008ee0:	2300      	movs	r3, #0
90008ee2:	60fb      	str	r3, [r7, #12]
90008ee4:	e011      	b.n	90008f0a <memp_init_pool+0x46>
    memp->next = *desc->tab;
90008ee6:	687b      	ldr	r3, [r7, #4]
90008ee8:	689b      	ldr	r3, [r3, #8]
90008eea:	681a      	ldr	r2, [r3, #0]
90008eec:	68bb      	ldr	r3, [r7, #8]
90008eee:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
90008ef0:	687b      	ldr	r3, [r7, #4]
90008ef2:	689b      	ldr	r3, [r3, #8]
90008ef4:	68ba      	ldr	r2, [r7, #8]
90008ef6:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
90008ef8:	687b      	ldr	r3, [r7, #4]
90008efa:	881b      	ldrh	r3, [r3, #0]
90008efc:	461a      	mov	r2, r3
90008efe:	68bb      	ldr	r3, [r7, #8]
90008f00:	4413      	add	r3, r2
90008f02:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
90008f04:	68fb      	ldr	r3, [r7, #12]
90008f06:	3301      	adds	r3, #1
90008f08:	60fb      	str	r3, [r7, #12]
90008f0a:	687b      	ldr	r3, [r7, #4]
90008f0c:	885b      	ldrh	r3, [r3, #2]
90008f0e:	461a      	mov	r2, r3
90008f10:	68fb      	ldr	r3, [r7, #12]
90008f12:	4293      	cmp	r3, r2
90008f14:	dbe7      	blt.n	90008ee6 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
90008f16:	bf00      	nop
90008f18:	bf00      	nop
90008f1a:	3714      	adds	r7, #20
90008f1c:	46bd      	mov	sp, r7
90008f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
90008f22:	4770      	bx	lr

90008f24 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
90008f24:	b580      	push	{r7, lr}
90008f26:	b082      	sub	sp, #8
90008f28:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
90008f2a:	2300      	movs	r3, #0
90008f2c:	80fb      	strh	r3, [r7, #6]
90008f2e:	e009      	b.n	90008f44 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
90008f30:	88fb      	ldrh	r3, [r7, #6]
90008f32:	4a08      	ldr	r2, [pc, #32]	; (90008f54 <memp_init+0x30>)
90008f34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
90008f38:	4618      	mov	r0, r3
90008f3a:	f7ff ffc3 	bl	90008ec4 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
90008f3e:	88fb      	ldrh	r3, [r7, #6]
90008f40:	3301      	adds	r3, #1
90008f42:	80fb      	strh	r3, [r7, #6]
90008f44:	88fb      	ldrh	r3, [r7, #6]
90008f46:	2b0c      	cmp	r3, #12
90008f48:	d9f2      	bls.n	90008f30 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
90008f4a:	bf00      	nop
90008f4c:	bf00      	nop
90008f4e:	3708      	adds	r7, #8
90008f50:	46bd      	mov	sp, r7
90008f52:	bd80      	pop	{r7, pc}
90008f54:	9001745c 	.word	0x9001745c

90008f58 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
90008f58:	b580      	push	{r7, lr}
90008f5a:	b084      	sub	sp, #16
90008f5c:	af00      	add	r7, sp, #0
90008f5e:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
90008f60:	f00a f974 	bl	9001324c <sys_arch_protect>
90008f64:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
90008f66:	687b      	ldr	r3, [r7, #4]
90008f68:	689b      	ldr	r3, [r3, #8]
90008f6a:	681b      	ldr	r3, [r3, #0]
90008f6c:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
90008f6e:	68bb      	ldr	r3, [r7, #8]
90008f70:	2b00      	cmp	r3, #0
90008f72:	d015      	beq.n	90008fa0 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
90008f74:	687b      	ldr	r3, [r7, #4]
90008f76:	689b      	ldr	r3, [r3, #8]
90008f78:	68ba      	ldr	r2, [r7, #8]
90008f7a:	6812      	ldr	r2, [r2, #0]
90008f7c:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
90008f7e:	68bb      	ldr	r3, [r7, #8]
90008f80:	f003 0303 	and.w	r3, r3, #3
90008f84:	2b00      	cmp	r3, #0
90008f86:	d006      	beq.n	90008f96 <do_memp_malloc_pool+0x3e>
90008f88:	4b09      	ldr	r3, [pc, #36]	; (90008fb0 <do_memp_malloc_pool+0x58>)
90008f8a:	f44f 728c 	mov.w	r2, #280	; 0x118
90008f8e:	4909      	ldr	r1, [pc, #36]	; (90008fb4 <do_memp_malloc_pool+0x5c>)
90008f90:	4809      	ldr	r0, [pc, #36]	; (90008fb8 <do_memp_malloc_pool+0x60>)
90008f92:	f00a fb51 	bl	90013638 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
90008f96:	68f8      	ldr	r0, [r7, #12]
90008f98:	f00a f966 	bl	90013268 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
90008f9c:	68bb      	ldr	r3, [r7, #8]
90008f9e:	e003      	b.n	90008fa8 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
90008fa0:	68f8      	ldr	r0, [r7, #12]
90008fa2:	f00a f961 	bl	90013268 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
90008fa6:	2300      	movs	r3, #0
}
90008fa8:	4618      	mov	r0, r3
90008faa:	3710      	adds	r7, #16
90008fac:	46bd      	mov	sp, r7
90008fae:	bd80      	pop	{r7, pc}
90008fb0:	90014b2c 	.word	0x90014b2c
90008fb4:	90014b5c 	.word	0x90014b5c
90008fb8:	90014b80 	.word	0x90014b80

90008fbc <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
90008fbc:	b580      	push	{r7, lr}
90008fbe:	b082      	sub	sp, #8
90008fc0:	af00      	add	r7, sp, #0
90008fc2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
90008fc4:	687b      	ldr	r3, [r7, #4]
90008fc6:	2b00      	cmp	r3, #0
90008fc8:	d106      	bne.n	90008fd8 <memp_malloc_pool+0x1c>
90008fca:	4b0a      	ldr	r3, [pc, #40]	; (90008ff4 <memp_malloc_pool+0x38>)
90008fcc:	f44f 729e 	mov.w	r2, #316	; 0x13c
90008fd0:	4909      	ldr	r1, [pc, #36]	; (90008ff8 <memp_malloc_pool+0x3c>)
90008fd2:	480a      	ldr	r0, [pc, #40]	; (90008ffc <memp_malloc_pool+0x40>)
90008fd4:	f00a fb30 	bl	90013638 <iprintf>
  if (desc == NULL) {
90008fd8:	687b      	ldr	r3, [r7, #4]
90008fda:	2b00      	cmp	r3, #0
90008fdc:	d101      	bne.n	90008fe2 <memp_malloc_pool+0x26>
    return NULL;
90008fde:	2300      	movs	r3, #0
90008fe0:	e003      	b.n	90008fea <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
90008fe2:	6878      	ldr	r0, [r7, #4]
90008fe4:	f7ff ffb8 	bl	90008f58 <do_memp_malloc_pool>
90008fe8:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
90008fea:	4618      	mov	r0, r3
90008fec:	3708      	adds	r7, #8
90008fee:	46bd      	mov	sp, r7
90008ff0:	bd80      	pop	{r7, pc}
90008ff2:	bf00      	nop
90008ff4:	90014b2c 	.word	0x90014b2c
90008ff8:	90014ba8 	.word	0x90014ba8
90008ffc:	90014b80 	.word	0x90014b80

90009000 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
90009000:	b580      	push	{r7, lr}
90009002:	b084      	sub	sp, #16
90009004:	af00      	add	r7, sp, #0
90009006:	4603      	mov	r3, r0
90009008:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
9000900a:	79fb      	ldrb	r3, [r7, #7]
9000900c:	2b0c      	cmp	r3, #12
9000900e:	d908      	bls.n	90009022 <memp_malloc+0x22>
90009010:	4b0a      	ldr	r3, [pc, #40]	; (9000903c <memp_malloc+0x3c>)
90009012:	f240 1257 	movw	r2, #343	; 0x157
90009016:	490a      	ldr	r1, [pc, #40]	; (90009040 <memp_malloc+0x40>)
90009018:	480a      	ldr	r0, [pc, #40]	; (90009044 <memp_malloc+0x44>)
9000901a:	f00a fb0d 	bl	90013638 <iprintf>
9000901e:	2300      	movs	r3, #0
90009020:	e008      	b.n	90009034 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
90009022:	79fb      	ldrb	r3, [r7, #7]
90009024:	4a08      	ldr	r2, [pc, #32]	; (90009048 <memp_malloc+0x48>)
90009026:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
9000902a:	4618      	mov	r0, r3
9000902c:	f7ff ff94 	bl	90008f58 <do_memp_malloc_pool>
90009030:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
90009032:	68fb      	ldr	r3, [r7, #12]
}
90009034:	4618      	mov	r0, r3
90009036:	3710      	adds	r7, #16
90009038:	46bd      	mov	sp, r7
9000903a:	bd80      	pop	{r7, pc}
9000903c:	90014b2c 	.word	0x90014b2c
90009040:	90014bbc 	.word	0x90014bbc
90009044:	90014b80 	.word	0x90014b80
90009048:	9001745c 	.word	0x9001745c

9000904c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
9000904c:	b580      	push	{r7, lr}
9000904e:	b084      	sub	sp, #16
90009050:	af00      	add	r7, sp, #0
90009052:	6078      	str	r0, [r7, #4]
90009054:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
90009056:	683b      	ldr	r3, [r7, #0]
90009058:	f003 0303 	and.w	r3, r3, #3
9000905c:	2b00      	cmp	r3, #0
9000905e:	d006      	beq.n	9000906e <do_memp_free_pool+0x22>
90009060:	4b0d      	ldr	r3, [pc, #52]	; (90009098 <do_memp_free_pool+0x4c>)
90009062:	f44f 72b6 	mov.w	r2, #364	; 0x16c
90009066:	490d      	ldr	r1, [pc, #52]	; (9000909c <do_memp_free_pool+0x50>)
90009068:	480d      	ldr	r0, [pc, #52]	; (900090a0 <do_memp_free_pool+0x54>)
9000906a:	f00a fae5 	bl	90013638 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
9000906e:	683b      	ldr	r3, [r7, #0]
90009070:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
90009072:	f00a f8eb 	bl	9001324c <sys_arch_protect>
90009076:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
90009078:	687b      	ldr	r3, [r7, #4]
9000907a:	689b      	ldr	r3, [r3, #8]
9000907c:	681a      	ldr	r2, [r3, #0]
9000907e:	68fb      	ldr	r3, [r7, #12]
90009080:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
90009082:	687b      	ldr	r3, [r7, #4]
90009084:	689b      	ldr	r3, [r3, #8]
90009086:	68fa      	ldr	r2, [r7, #12]
90009088:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
9000908a:	68b8      	ldr	r0, [r7, #8]
9000908c:	f00a f8ec 	bl	90013268 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
90009090:	bf00      	nop
90009092:	3710      	adds	r7, #16
90009094:	46bd      	mov	sp, r7
90009096:	bd80      	pop	{r7, pc}
90009098:	90014b2c 	.word	0x90014b2c
9000909c:	90014bdc 	.word	0x90014bdc
900090a0:	90014b80 	.word	0x90014b80

900090a4 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
900090a4:	b580      	push	{r7, lr}
900090a6:	b082      	sub	sp, #8
900090a8:	af00      	add	r7, sp, #0
900090aa:	6078      	str	r0, [r7, #4]
900090ac:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
900090ae:	687b      	ldr	r3, [r7, #4]
900090b0:	2b00      	cmp	r3, #0
900090b2:	d106      	bne.n	900090c2 <memp_free_pool+0x1e>
900090b4:	4b0a      	ldr	r3, [pc, #40]	; (900090e0 <memp_free_pool+0x3c>)
900090b6:	f240 1295 	movw	r2, #405	; 0x195
900090ba:	490a      	ldr	r1, [pc, #40]	; (900090e4 <memp_free_pool+0x40>)
900090bc:	480a      	ldr	r0, [pc, #40]	; (900090e8 <memp_free_pool+0x44>)
900090be:	f00a fabb 	bl	90013638 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
900090c2:	687b      	ldr	r3, [r7, #4]
900090c4:	2b00      	cmp	r3, #0
900090c6:	d007      	beq.n	900090d8 <memp_free_pool+0x34>
900090c8:	683b      	ldr	r3, [r7, #0]
900090ca:	2b00      	cmp	r3, #0
900090cc:	d004      	beq.n	900090d8 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
900090ce:	6839      	ldr	r1, [r7, #0]
900090d0:	6878      	ldr	r0, [r7, #4]
900090d2:	f7ff ffbb 	bl	9000904c <do_memp_free_pool>
900090d6:	e000      	b.n	900090da <memp_free_pool+0x36>
    return;
900090d8:	bf00      	nop
}
900090da:	3708      	adds	r7, #8
900090dc:	46bd      	mov	sp, r7
900090de:	bd80      	pop	{r7, pc}
900090e0:	90014b2c 	.word	0x90014b2c
900090e4:	90014ba8 	.word	0x90014ba8
900090e8:	90014b80 	.word	0x90014b80

900090ec <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
900090ec:	b580      	push	{r7, lr}
900090ee:	b082      	sub	sp, #8
900090f0:	af00      	add	r7, sp, #0
900090f2:	4603      	mov	r3, r0
900090f4:	6039      	str	r1, [r7, #0]
900090f6:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
900090f8:	79fb      	ldrb	r3, [r7, #7]
900090fa:	2b0c      	cmp	r3, #12
900090fc:	d907      	bls.n	9000910e <memp_free+0x22>
900090fe:	4b0c      	ldr	r3, [pc, #48]	; (90009130 <memp_free+0x44>)
90009100:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
90009104:	490b      	ldr	r1, [pc, #44]	; (90009134 <memp_free+0x48>)
90009106:	480c      	ldr	r0, [pc, #48]	; (90009138 <memp_free+0x4c>)
90009108:	f00a fa96 	bl	90013638 <iprintf>
9000910c:	e00c      	b.n	90009128 <memp_free+0x3c>

  if (mem == NULL) {
9000910e:	683b      	ldr	r3, [r7, #0]
90009110:	2b00      	cmp	r3, #0
90009112:	d008      	beq.n	90009126 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
90009114:	79fb      	ldrb	r3, [r7, #7]
90009116:	4a09      	ldr	r2, [pc, #36]	; (9000913c <memp_free+0x50>)
90009118:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
9000911c:	6839      	ldr	r1, [r7, #0]
9000911e:	4618      	mov	r0, r3
90009120:	f7ff ff94 	bl	9000904c <do_memp_free_pool>
90009124:	e000      	b.n	90009128 <memp_free+0x3c>
    return;
90009126:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
90009128:	3708      	adds	r7, #8
9000912a:	46bd      	mov	sp, r7
9000912c:	bd80      	pop	{r7, pc}
9000912e:	bf00      	nop
90009130:	90014b2c 	.word	0x90014b2c
90009134:	90014bfc 	.word	0x90014bfc
90009138:	90014b80 	.word	0x90014b80
9000913c:	9001745c 	.word	0x9001745c

90009140 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
90009140:	b480      	push	{r7}
90009142:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
90009144:	bf00      	nop
90009146:	46bd      	mov	sp, r7
90009148:	f85d 7b04 	ldr.w	r7, [sp], #4
9000914c:	4770      	bx	lr
	...

90009150 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
90009150:	b580      	push	{r7, lr}
90009152:	b086      	sub	sp, #24
90009154:	af00      	add	r7, sp, #0
90009156:	60f8      	str	r0, [r7, #12]
90009158:	60b9      	str	r1, [r7, #8]
9000915a:	607a      	str	r2, [r7, #4]
9000915c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
9000915e:	68fb      	ldr	r3, [r7, #12]
90009160:	2b00      	cmp	r3, #0
90009162:	d108      	bne.n	90009176 <netif_add+0x26>
90009164:	4b57      	ldr	r3, [pc, #348]	; (900092c4 <netif_add+0x174>)
90009166:	f240 1227 	movw	r2, #295	; 0x127
9000916a:	4957      	ldr	r1, [pc, #348]	; (900092c8 <netif_add+0x178>)
9000916c:	4857      	ldr	r0, [pc, #348]	; (900092cc <netif_add+0x17c>)
9000916e:	f00a fa63 	bl	90013638 <iprintf>
90009172:	2300      	movs	r3, #0
90009174:	e0a2      	b.n	900092bc <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
90009176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90009178:	2b00      	cmp	r3, #0
9000917a:	d108      	bne.n	9000918e <netif_add+0x3e>
9000917c:	4b51      	ldr	r3, [pc, #324]	; (900092c4 <netif_add+0x174>)
9000917e:	f44f 7294 	mov.w	r2, #296	; 0x128
90009182:	4953      	ldr	r1, [pc, #332]	; (900092d0 <netif_add+0x180>)
90009184:	4851      	ldr	r0, [pc, #324]	; (900092cc <netif_add+0x17c>)
90009186:	f00a fa57 	bl	90013638 <iprintf>
9000918a:	2300      	movs	r3, #0
9000918c:	e096      	b.n	900092bc <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
9000918e:	68bb      	ldr	r3, [r7, #8]
90009190:	2b00      	cmp	r3, #0
90009192:	d101      	bne.n	90009198 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
90009194:	4b4f      	ldr	r3, [pc, #316]	; (900092d4 <netif_add+0x184>)
90009196:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
90009198:	687b      	ldr	r3, [r7, #4]
9000919a:	2b00      	cmp	r3, #0
9000919c:	d101      	bne.n	900091a2 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
9000919e:	4b4d      	ldr	r3, [pc, #308]	; (900092d4 <netif_add+0x184>)
900091a0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
900091a2:	683b      	ldr	r3, [r7, #0]
900091a4:	2b00      	cmp	r3, #0
900091a6:	d101      	bne.n	900091ac <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
900091a8:	4b4a      	ldr	r3, [pc, #296]	; (900092d4 <netif_add+0x184>)
900091aa:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
900091ac:	68fb      	ldr	r3, [r7, #12]
900091ae:	2200      	movs	r2, #0
900091b0:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
900091b2:	68fb      	ldr	r3, [r7, #12]
900091b4:	2200      	movs	r2, #0
900091b6:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
900091b8:	68fb      	ldr	r3, [r7, #12]
900091ba:	2200      	movs	r2, #0
900091bc:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
900091be:	68fb      	ldr	r3, [r7, #12]
900091c0:	4a45      	ldr	r2, [pc, #276]	; (900092d8 <netif_add+0x188>)
900091c2:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
900091c4:	68fb      	ldr	r3, [r7, #12]
900091c6:	2200      	movs	r2, #0
900091c8:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
900091ca:	68fb      	ldr	r3, [r7, #12]
900091cc:	2200      	movs	r2, #0
900091ce:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
900091d2:	68fb      	ldr	r3, [r7, #12]
900091d4:	2200      	movs	r2, #0
900091d6:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
900091d8:	68fb      	ldr	r3, [r7, #12]
900091da:	6a3a      	ldr	r2, [r7, #32]
900091dc:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
900091de:	4b3f      	ldr	r3, [pc, #252]	; (900092dc <netif_add+0x18c>)
900091e0:	781a      	ldrb	r2, [r3, #0]
900091e2:	68fb      	ldr	r3, [r7, #12]
900091e4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
900091e8:	68fb      	ldr	r3, [r7, #12]
900091ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
900091ec:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
900091ee:	683b      	ldr	r3, [r7, #0]
900091f0:	687a      	ldr	r2, [r7, #4]
900091f2:	68b9      	ldr	r1, [r7, #8]
900091f4:	68f8      	ldr	r0, [r7, #12]
900091f6:	f000 f913 	bl	90009420 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
900091fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
900091fc:	68f8      	ldr	r0, [r7, #12]
900091fe:	4798      	blx	r3
90009200:	4603      	mov	r3, r0
90009202:	2b00      	cmp	r3, #0
90009204:	d001      	beq.n	9000920a <netif_add+0xba>
    return NULL;
90009206:	2300      	movs	r3, #0
90009208:	e058      	b.n	900092bc <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
9000920a:	68fb      	ldr	r3, [r7, #12]
9000920c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
90009210:	2bff      	cmp	r3, #255	; 0xff
90009212:	d103      	bne.n	9000921c <netif_add+0xcc>
        netif->num = 0;
90009214:	68fb      	ldr	r3, [r7, #12]
90009216:	2200      	movs	r2, #0
90009218:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
9000921c:	2300      	movs	r3, #0
9000921e:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
90009220:	4b2f      	ldr	r3, [pc, #188]	; (900092e0 <netif_add+0x190>)
90009222:	681b      	ldr	r3, [r3, #0]
90009224:	617b      	str	r3, [r7, #20]
90009226:	e02b      	b.n	90009280 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
90009228:	697a      	ldr	r2, [r7, #20]
9000922a:	68fb      	ldr	r3, [r7, #12]
9000922c:	429a      	cmp	r2, r3
9000922e:	d106      	bne.n	9000923e <netif_add+0xee>
90009230:	4b24      	ldr	r3, [pc, #144]	; (900092c4 <netif_add+0x174>)
90009232:	f240 128b 	movw	r2, #395	; 0x18b
90009236:	492b      	ldr	r1, [pc, #172]	; (900092e4 <netif_add+0x194>)
90009238:	4824      	ldr	r0, [pc, #144]	; (900092cc <netif_add+0x17c>)
9000923a:	f00a f9fd 	bl	90013638 <iprintf>
        num_netifs++;
9000923e:	693b      	ldr	r3, [r7, #16]
90009240:	3301      	adds	r3, #1
90009242:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
90009244:	693b      	ldr	r3, [r7, #16]
90009246:	2bff      	cmp	r3, #255	; 0xff
90009248:	dd06      	ble.n	90009258 <netif_add+0x108>
9000924a:	4b1e      	ldr	r3, [pc, #120]	; (900092c4 <netif_add+0x174>)
9000924c:	f240 128d 	movw	r2, #397	; 0x18d
90009250:	4925      	ldr	r1, [pc, #148]	; (900092e8 <netif_add+0x198>)
90009252:	481e      	ldr	r0, [pc, #120]	; (900092cc <netif_add+0x17c>)
90009254:	f00a f9f0 	bl	90013638 <iprintf>
        if (netif2->num == netif->num) {
90009258:	697b      	ldr	r3, [r7, #20]
9000925a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
9000925e:	68fb      	ldr	r3, [r7, #12]
90009260:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
90009264:	429a      	cmp	r2, r3
90009266:	d108      	bne.n	9000927a <netif_add+0x12a>
          netif->num++;
90009268:	68fb      	ldr	r3, [r7, #12]
9000926a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
9000926e:	3301      	adds	r3, #1
90009270:	b2da      	uxtb	r2, r3
90009272:	68fb      	ldr	r3, [r7, #12]
90009274:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
90009278:	e005      	b.n	90009286 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
9000927a:	697b      	ldr	r3, [r7, #20]
9000927c:	681b      	ldr	r3, [r3, #0]
9000927e:	617b      	str	r3, [r7, #20]
90009280:	697b      	ldr	r3, [r7, #20]
90009282:	2b00      	cmp	r3, #0
90009284:	d1d0      	bne.n	90009228 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
90009286:	697b      	ldr	r3, [r7, #20]
90009288:	2b00      	cmp	r3, #0
9000928a:	d1be      	bne.n	9000920a <netif_add+0xba>
  }
  if (netif->num == 254) {
9000928c:	68fb      	ldr	r3, [r7, #12]
9000928e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
90009292:	2bfe      	cmp	r3, #254	; 0xfe
90009294:	d103      	bne.n	9000929e <netif_add+0x14e>
    netif_num = 0;
90009296:	4b11      	ldr	r3, [pc, #68]	; (900092dc <netif_add+0x18c>)
90009298:	2200      	movs	r2, #0
9000929a:	701a      	strb	r2, [r3, #0]
9000929c:	e006      	b.n	900092ac <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
9000929e:	68fb      	ldr	r3, [r7, #12]
900092a0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
900092a4:	3301      	adds	r3, #1
900092a6:	b2da      	uxtb	r2, r3
900092a8:	4b0c      	ldr	r3, [pc, #48]	; (900092dc <netif_add+0x18c>)
900092aa:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
900092ac:	4b0c      	ldr	r3, [pc, #48]	; (900092e0 <netif_add+0x190>)
900092ae:	681a      	ldr	r2, [r3, #0]
900092b0:	68fb      	ldr	r3, [r7, #12]
900092b2:	601a      	str	r2, [r3, #0]
  netif_list = netif;
900092b4:	4a0a      	ldr	r2, [pc, #40]	; (900092e0 <netif_add+0x190>)
900092b6:	68fb      	ldr	r3, [r7, #12]
900092b8:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
900092ba:	68fb      	ldr	r3, [r7, #12]
}
900092bc:	4618      	mov	r0, r3
900092be:	3718      	adds	r7, #24
900092c0:	46bd      	mov	sp, r7
900092c2:	bd80      	pop	{r7, pc}
900092c4:	90014c18 	.word	0x90014c18
900092c8:	90014cac 	.word	0x90014cac
900092cc:	90014c68 	.word	0x90014c68
900092d0:	90014cc8 	.word	0x90014cc8
900092d4:	900174d0 	.word	0x900174d0
900092d8:	900096fb 	.word	0x900096fb
900092dc:	2401101c 	.word	0x2401101c
900092e0:	24011014 	.word	0x24011014
900092e4:	90014cec 	.word	0x90014cec
900092e8:	90014d00 	.word	0x90014d00

900092ec <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
900092ec:	b580      	push	{r7, lr}
900092ee:	b082      	sub	sp, #8
900092f0:	af00      	add	r7, sp, #0
900092f2:	6078      	str	r0, [r7, #4]
900092f4:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
900092f6:	6839      	ldr	r1, [r7, #0]
900092f8:	6878      	ldr	r0, [r7, #4]
900092fa:	f002 fe23 	bl	9000bf44 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
900092fe:	6839      	ldr	r1, [r7, #0]
90009300:	6878      	ldr	r0, [r7, #4]
90009302:	f007 fb8f 	bl	90010a24 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
90009306:	bf00      	nop
90009308:	3708      	adds	r7, #8
9000930a:	46bd      	mov	sp, r7
9000930c:	bd80      	pop	{r7, pc}
	...

90009310 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
90009310:	b580      	push	{r7, lr}
90009312:	b086      	sub	sp, #24
90009314:	af00      	add	r7, sp, #0
90009316:	60f8      	str	r0, [r7, #12]
90009318:	60b9      	str	r1, [r7, #8]
9000931a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
9000931c:	68bb      	ldr	r3, [r7, #8]
9000931e:	2b00      	cmp	r3, #0
90009320:	d106      	bne.n	90009330 <netif_do_set_ipaddr+0x20>
90009322:	4b1d      	ldr	r3, [pc, #116]	; (90009398 <netif_do_set_ipaddr+0x88>)
90009324:	f240 12cb 	movw	r2, #459	; 0x1cb
90009328:	491c      	ldr	r1, [pc, #112]	; (9000939c <netif_do_set_ipaddr+0x8c>)
9000932a:	481d      	ldr	r0, [pc, #116]	; (900093a0 <netif_do_set_ipaddr+0x90>)
9000932c:	f00a f984 	bl	90013638 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
90009330:	687b      	ldr	r3, [r7, #4]
90009332:	2b00      	cmp	r3, #0
90009334:	d106      	bne.n	90009344 <netif_do_set_ipaddr+0x34>
90009336:	4b18      	ldr	r3, [pc, #96]	; (90009398 <netif_do_set_ipaddr+0x88>)
90009338:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
9000933c:	4917      	ldr	r1, [pc, #92]	; (9000939c <netif_do_set_ipaddr+0x8c>)
9000933e:	4818      	ldr	r0, [pc, #96]	; (900093a0 <netif_do_set_ipaddr+0x90>)
90009340:	f00a f97a 	bl	90013638 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
90009344:	68bb      	ldr	r3, [r7, #8]
90009346:	681a      	ldr	r2, [r3, #0]
90009348:	68fb      	ldr	r3, [r7, #12]
9000934a:	3304      	adds	r3, #4
9000934c:	681b      	ldr	r3, [r3, #0]
9000934e:	429a      	cmp	r2, r3
90009350:	d01c      	beq.n	9000938c <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
90009352:	68bb      	ldr	r3, [r7, #8]
90009354:	681b      	ldr	r3, [r3, #0]
90009356:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
90009358:	68fb      	ldr	r3, [r7, #12]
9000935a:	3304      	adds	r3, #4
9000935c:	681a      	ldr	r2, [r3, #0]
9000935e:	687b      	ldr	r3, [r7, #4]
90009360:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
90009362:	f107 0314 	add.w	r3, r7, #20
90009366:	4619      	mov	r1, r3
90009368:	6878      	ldr	r0, [r7, #4]
9000936a:	f7ff ffbf 	bl	900092ec <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
9000936e:	68bb      	ldr	r3, [r7, #8]
90009370:	2b00      	cmp	r3, #0
90009372:	d002      	beq.n	9000937a <netif_do_set_ipaddr+0x6a>
90009374:	68bb      	ldr	r3, [r7, #8]
90009376:	681b      	ldr	r3, [r3, #0]
90009378:	e000      	b.n	9000937c <netif_do_set_ipaddr+0x6c>
9000937a:	2300      	movs	r3, #0
9000937c:	68fa      	ldr	r2, [r7, #12]
9000937e:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
90009380:	2101      	movs	r1, #1
90009382:	68f8      	ldr	r0, [r7, #12]
90009384:	f000 f8d2 	bl	9000952c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
90009388:	2301      	movs	r3, #1
9000938a:	e000      	b.n	9000938e <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
9000938c:	2300      	movs	r3, #0
}
9000938e:	4618      	mov	r0, r3
90009390:	3718      	adds	r7, #24
90009392:	46bd      	mov	sp, r7
90009394:	bd80      	pop	{r7, pc}
90009396:	bf00      	nop
90009398:	90014c18 	.word	0x90014c18
9000939c:	90014d30 	.word	0x90014d30
900093a0:	90014c68 	.word	0x90014c68

900093a4 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
900093a4:	b480      	push	{r7}
900093a6:	b085      	sub	sp, #20
900093a8:	af00      	add	r7, sp, #0
900093aa:	60f8      	str	r0, [r7, #12]
900093ac:	60b9      	str	r1, [r7, #8]
900093ae:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
900093b0:	68bb      	ldr	r3, [r7, #8]
900093b2:	681a      	ldr	r2, [r3, #0]
900093b4:	68fb      	ldr	r3, [r7, #12]
900093b6:	3308      	adds	r3, #8
900093b8:	681b      	ldr	r3, [r3, #0]
900093ba:	429a      	cmp	r2, r3
900093bc:	d00a      	beq.n	900093d4 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
900093be:	68bb      	ldr	r3, [r7, #8]
900093c0:	2b00      	cmp	r3, #0
900093c2:	d002      	beq.n	900093ca <netif_do_set_netmask+0x26>
900093c4:	68bb      	ldr	r3, [r7, #8]
900093c6:	681b      	ldr	r3, [r3, #0]
900093c8:	e000      	b.n	900093cc <netif_do_set_netmask+0x28>
900093ca:	2300      	movs	r3, #0
900093cc:	68fa      	ldr	r2, [r7, #12]
900093ce:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
900093d0:	2301      	movs	r3, #1
900093d2:	e000      	b.n	900093d6 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
900093d4:	2300      	movs	r3, #0
}
900093d6:	4618      	mov	r0, r3
900093d8:	3714      	adds	r7, #20
900093da:	46bd      	mov	sp, r7
900093dc:	f85d 7b04 	ldr.w	r7, [sp], #4
900093e0:	4770      	bx	lr

900093e2 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
900093e2:	b480      	push	{r7}
900093e4:	b085      	sub	sp, #20
900093e6:	af00      	add	r7, sp, #0
900093e8:	60f8      	str	r0, [r7, #12]
900093ea:	60b9      	str	r1, [r7, #8]
900093ec:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
900093ee:	68bb      	ldr	r3, [r7, #8]
900093f0:	681a      	ldr	r2, [r3, #0]
900093f2:	68fb      	ldr	r3, [r7, #12]
900093f4:	330c      	adds	r3, #12
900093f6:	681b      	ldr	r3, [r3, #0]
900093f8:	429a      	cmp	r2, r3
900093fa:	d00a      	beq.n	90009412 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
900093fc:	68bb      	ldr	r3, [r7, #8]
900093fe:	2b00      	cmp	r3, #0
90009400:	d002      	beq.n	90009408 <netif_do_set_gw+0x26>
90009402:	68bb      	ldr	r3, [r7, #8]
90009404:	681b      	ldr	r3, [r3, #0]
90009406:	e000      	b.n	9000940a <netif_do_set_gw+0x28>
90009408:	2300      	movs	r3, #0
9000940a:	68fa      	ldr	r2, [r7, #12]
9000940c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
9000940e:	2301      	movs	r3, #1
90009410:	e000      	b.n	90009414 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
90009412:	2300      	movs	r3, #0
}
90009414:	4618      	mov	r0, r3
90009416:	3714      	adds	r7, #20
90009418:	46bd      	mov	sp, r7
9000941a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000941e:	4770      	bx	lr

90009420 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
90009420:	b580      	push	{r7, lr}
90009422:	b088      	sub	sp, #32
90009424:	af00      	add	r7, sp, #0
90009426:	60f8      	str	r0, [r7, #12]
90009428:	60b9      	str	r1, [r7, #8]
9000942a:	607a      	str	r2, [r7, #4]
9000942c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
9000942e:	2300      	movs	r3, #0
90009430:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
90009432:	2300      	movs	r3, #0
90009434:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
90009436:	68bb      	ldr	r3, [r7, #8]
90009438:	2b00      	cmp	r3, #0
9000943a:	d101      	bne.n	90009440 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
9000943c:	4b1c      	ldr	r3, [pc, #112]	; (900094b0 <netif_set_addr+0x90>)
9000943e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
90009440:	687b      	ldr	r3, [r7, #4]
90009442:	2b00      	cmp	r3, #0
90009444:	d101      	bne.n	9000944a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
90009446:	4b1a      	ldr	r3, [pc, #104]	; (900094b0 <netif_set_addr+0x90>)
90009448:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
9000944a:	683b      	ldr	r3, [r7, #0]
9000944c:	2b00      	cmp	r3, #0
9000944e:	d101      	bne.n	90009454 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
90009450:	4b17      	ldr	r3, [pc, #92]	; (900094b0 <netif_set_addr+0x90>)
90009452:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
90009454:	68bb      	ldr	r3, [r7, #8]
90009456:	2b00      	cmp	r3, #0
90009458:	d003      	beq.n	90009462 <netif_set_addr+0x42>
9000945a:	68bb      	ldr	r3, [r7, #8]
9000945c:	681b      	ldr	r3, [r3, #0]
9000945e:	2b00      	cmp	r3, #0
90009460:	d101      	bne.n	90009466 <netif_set_addr+0x46>
90009462:	2301      	movs	r3, #1
90009464:	e000      	b.n	90009468 <netif_set_addr+0x48>
90009466:	2300      	movs	r3, #0
90009468:	617b      	str	r3, [r7, #20]
  if (remove) {
9000946a:	697b      	ldr	r3, [r7, #20]
9000946c:	2b00      	cmp	r3, #0
9000946e:	d006      	beq.n	9000947e <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
90009470:	f107 0310 	add.w	r3, r7, #16
90009474:	461a      	mov	r2, r3
90009476:	68b9      	ldr	r1, [r7, #8]
90009478:	68f8      	ldr	r0, [r7, #12]
9000947a:	f7ff ff49 	bl	90009310 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
9000947e:	69fa      	ldr	r2, [r7, #28]
90009480:	6879      	ldr	r1, [r7, #4]
90009482:	68f8      	ldr	r0, [r7, #12]
90009484:	f7ff ff8e 	bl	900093a4 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
90009488:	69ba      	ldr	r2, [r7, #24]
9000948a:	6839      	ldr	r1, [r7, #0]
9000948c:	68f8      	ldr	r0, [r7, #12]
9000948e:	f7ff ffa8 	bl	900093e2 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
90009492:	697b      	ldr	r3, [r7, #20]
90009494:	2b00      	cmp	r3, #0
90009496:	d106      	bne.n	900094a6 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
90009498:	f107 0310 	add.w	r3, r7, #16
9000949c:	461a      	mov	r2, r3
9000949e:	68b9      	ldr	r1, [r7, #8]
900094a0:	68f8      	ldr	r0, [r7, #12]
900094a2:	f7ff ff35 	bl	90009310 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
900094a6:	bf00      	nop
900094a8:	3720      	adds	r7, #32
900094aa:	46bd      	mov	sp, r7
900094ac:	bd80      	pop	{r7, pc}
900094ae:	bf00      	nop
900094b0:	900174d0 	.word	0x900174d0

900094b4 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
900094b4:	b480      	push	{r7}
900094b6:	b083      	sub	sp, #12
900094b8:	af00      	add	r7, sp, #0
900094ba:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
900094bc:	4a04      	ldr	r2, [pc, #16]	; (900094d0 <netif_set_default+0x1c>)
900094be:	687b      	ldr	r3, [r7, #4]
900094c0:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
900094c2:	bf00      	nop
900094c4:	370c      	adds	r7, #12
900094c6:	46bd      	mov	sp, r7
900094c8:	f85d 7b04 	ldr.w	r7, [sp], #4
900094cc:	4770      	bx	lr
900094ce:	bf00      	nop
900094d0:	24011018 	.word	0x24011018

900094d4 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
900094d4:	b580      	push	{r7, lr}
900094d6:	b082      	sub	sp, #8
900094d8:	af00      	add	r7, sp, #0
900094da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
900094dc:	687b      	ldr	r3, [r7, #4]
900094de:	2b00      	cmp	r3, #0
900094e0:	d107      	bne.n	900094f2 <netif_set_up+0x1e>
900094e2:	4b0f      	ldr	r3, [pc, #60]	; (90009520 <netif_set_up+0x4c>)
900094e4:	f44f 7254 	mov.w	r2, #848	; 0x350
900094e8:	490e      	ldr	r1, [pc, #56]	; (90009524 <netif_set_up+0x50>)
900094ea:	480f      	ldr	r0, [pc, #60]	; (90009528 <netif_set_up+0x54>)
900094ec:	f00a f8a4 	bl	90013638 <iprintf>
900094f0:	e013      	b.n	9000951a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
900094f2:	687b      	ldr	r3, [r7, #4]
900094f4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
900094f8:	f003 0301 	and.w	r3, r3, #1
900094fc:	2b00      	cmp	r3, #0
900094fe:	d10c      	bne.n	9000951a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
90009500:	687b      	ldr	r3, [r7, #4]
90009502:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
90009506:	f043 0301 	orr.w	r3, r3, #1
9000950a:	b2da      	uxtb	r2, r3
9000950c:	687b      	ldr	r3, [r7, #4]
9000950e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
90009512:	2103      	movs	r1, #3
90009514:	6878      	ldr	r0, [r7, #4]
90009516:	f000 f809 	bl	9000952c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
9000951a:	3708      	adds	r7, #8
9000951c:	46bd      	mov	sp, r7
9000951e:	bd80      	pop	{r7, pc}
90009520:	90014c18 	.word	0x90014c18
90009524:	90014da0 	.word	0x90014da0
90009528:	90014c68 	.word	0x90014c68

9000952c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
9000952c:	b580      	push	{r7, lr}
9000952e:	b082      	sub	sp, #8
90009530:	af00      	add	r7, sp, #0
90009532:	6078      	str	r0, [r7, #4]
90009534:	460b      	mov	r3, r1
90009536:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
90009538:	687b      	ldr	r3, [r7, #4]
9000953a:	2b00      	cmp	r3, #0
9000953c:	d106      	bne.n	9000954c <netif_issue_reports+0x20>
9000953e:	4b18      	ldr	r3, [pc, #96]	; (900095a0 <netif_issue_reports+0x74>)
90009540:	f240 326d 	movw	r2, #877	; 0x36d
90009544:	4917      	ldr	r1, [pc, #92]	; (900095a4 <netif_issue_reports+0x78>)
90009546:	4818      	ldr	r0, [pc, #96]	; (900095a8 <netif_issue_reports+0x7c>)
90009548:	f00a f876 	bl	90013638 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
9000954c:	687b      	ldr	r3, [r7, #4]
9000954e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
90009552:	f003 0304 	and.w	r3, r3, #4
90009556:	2b00      	cmp	r3, #0
90009558:	d01e      	beq.n	90009598 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
9000955a:	687b      	ldr	r3, [r7, #4]
9000955c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
90009560:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
90009564:	2b00      	cmp	r3, #0
90009566:	d017      	beq.n	90009598 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
90009568:	78fb      	ldrb	r3, [r7, #3]
9000956a:	f003 0301 	and.w	r3, r3, #1
9000956e:	2b00      	cmp	r3, #0
90009570:	d013      	beq.n	9000959a <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
90009572:	687b      	ldr	r3, [r7, #4]
90009574:	3304      	adds	r3, #4
90009576:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
90009578:	2b00      	cmp	r3, #0
9000957a:	d00e      	beq.n	9000959a <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
9000957c:	687b      	ldr	r3, [r7, #4]
9000957e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
90009582:	f003 0308 	and.w	r3, r3, #8
90009586:	2b00      	cmp	r3, #0
90009588:	d007      	beq.n	9000959a <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
9000958a:	687b      	ldr	r3, [r7, #4]
9000958c:	3304      	adds	r3, #4
9000958e:	4619      	mov	r1, r3
90009590:	6878      	ldr	r0, [r7, #4]
90009592:	f008 f9b1 	bl	900118f8 <etharp_request>
90009596:	e000      	b.n	9000959a <netif_issue_reports+0x6e>
    return;
90009598:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
9000959a:	3708      	adds	r7, #8
9000959c:	46bd      	mov	sp, r7
9000959e:	bd80      	pop	{r7, pc}
900095a0:	90014c18 	.word	0x90014c18
900095a4:	90014dbc 	.word	0x90014dbc
900095a8:	90014c68 	.word	0x90014c68

900095ac <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
900095ac:	b580      	push	{r7, lr}
900095ae:	b082      	sub	sp, #8
900095b0:	af00      	add	r7, sp, #0
900095b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
900095b4:	687b      	ldr	r3, [r7, #4]
900095b6:	2b00      	cmp	r3, #0
900095b8:	d107      	bne.n	900095ca <netif_set_down+0x1e>
900095ba:	4b12      	ldr	r3, [pc, #72]	; (90009604 <netif_set_down+0x58>)
900095bc:	f240 329b 	movw	r2, #923	; 0x39b
900095c0:	4911      	ldr	r1, [pc, #68]	; (90009608 <netif_set_down+0x5c>)
900095c2:	4812      	ldr	r0, [pc, #72]	; (9000960c <netif_set_down+0x60>)
900095c4:	f00a f838 	bl	90013638 <iprintf>
900095c8:	e019      	b.n	900095fe <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
900095ca:	687b      	ldr	r3, [r7, #4]
900095cc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
900095d0:	f003 0301 	and.w	r3, r3, #1
900095d4:	2b00      	cmp	r3, #0
900095d6:	d012      	beq.n	900095fe <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
900095d8:	687b      	ldr	r3, [r7, #4]
900095da:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
900095de:	f023 0301 	bic.w	r3, r3, #1
900095e2:	b2da      	uxtb	r2, r3
900095e4:	687b      	ldr	r3, [r7, #4]
900095e6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
900095ea:	687b      	ldr	r3, [r7, #4]
900095ec:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
900095f0:	f003 0308 	and.w	r3, r3, #8
900095f4:	2b00      	cmp	r3, #0
900095f6:	d002      	beq.n	900095fe <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
900095f8:	6878      	ldr	r0, [r7, #4]
900095fa:	f007 fd3b 	bl	90011074 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
900095fe:	3708      	adds	r7, #8
90009600:	46bd      	mov	sp, r7
90009602:	bd80      	pop	{r7, pc}
90009604:	90014c18 	.word	0x90014c18
90009608:	90014de0 	.word	0x90014de0
9000960c:	90014c68 	.word	0x90014c68

90009610 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
90009610:	b580      	push	{r7, lr}
90009612:	b082      	sub	sp, #8
90009614:	af00      	add	r7, sp, #0
90009616:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
90009618:	687b      	ldr	r3, [r7, #4]
9000961a:	2b00      	cmp	r3, #0
9000961c:	d107      	bne.n	9000962e <netif_set_link_up+0x1e>
9000961e:	4b13      	ldr	r3, [pc, #76]	; (9000966c <netif_set_link_up+0x5c>)
90009620:	f44f 7278 	mov.w	r2, #992	; 0x3e0
90009624:	4912      	ldr	r1, [pc, #72]	; (90009670 <netif_set_link_up+0x60>)
90009626:	4813      	ldr	r0, [pc, #76]	; (90009674 <netif_set_link_up+0x64>)
90009628:	f00a f806 	bl	90013638 <iprintf>
9000962c:	e01b      	b.n	90009666 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
9000962e:	687b      	ldr	r3, [r7, #4]
90009630:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
90009634:	f003 0304 	and.w	r3, r3, #4
90009638:	2b00      	cmp	r3, #0
9000963a:	d114      	bne.n	90009666 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
9000963c:	687b      	ldr	r3, [r7, #4]
9000963e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
90009642:	f043 0304 	orr.w	r3, r3, #4
90009646:	b2da      	uxtb	r2, r3
90009648:	687b      	ldr	r3, [r7, #4]
9000964a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
9000964e:	2103      	movs	r1, #3
90009650:	6878      	ldr	r0, [r7, #4]
90009652:	f7ff ff6b 	bl	9000952c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
90009656:	687b      	ldr	r3, [r7, #4]
90009658:	69db      	ldr	r3, [r3, #28]
9000965a:	2b00      	cmp	r3, #0
9000965c:	d003      	beq.n	90009666 <netif_set_link_up+0x56>
9000965e:	687b      	ldr	r3, [r7, #4]
90009660:	69db      	ldr	r3, [r3, #28]
90009662:	6878      	ldr	r0, [r7, #4]
90009664:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
90009666:	3708      	adds	r7, #8
90009668:	46bd      	mov	sp, r7
9000966a:	bd80      	pop	{r7, pc}
9000966c:	90014c18 	.word	0x90014c18
90009670:	90014e00 	.word	0x90014e00
90009674:	90014c68 	.word	0x90014c68

90009678 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
90009678:	b580      	push	{r7, lr}
9000967a:	b082      	sub	sp, #8
9000967c:	af00      	add	r7, sp, #0
9000967e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
90009680:	687b      	ldr	r3, [r7, #4]
90009682:	2b00      	cmp	r3, #0
90009684:	d107      	bne.n	90009696 <netif_set_link_down+0x1e>
90009686:	4b11      	ldr	r3, [pc, #68]	; (900096cc <netif_set_link_down+0x54>)
90009688:	f240 4206 	movw	r2, #1030	; 0x406
9000968c:	4910      	ldr	r1, [pc, #64]	; (900096d0 <netif_set_link_down+0x58>)
9000968e:	4811      	ldr	r0, [pc, #68]	; (900096d4 <netif_set_link_down+0x5c>)
90009690:	f009 ffd2 	bl	90013638 <iprintf>
90009694:	e017      	b.n	900096c6 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
90009696:	687b      	ldr	r3, [r7, #4]
90009698:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
9000969c:	f003 0304 	and.w	r3, r3, #4
900096a0:	2b00      	cmp	r3, #0
900096a2:	d010      	beq.n	900096c6 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
900096a4:	687b      	ldr	r3, [r7, #4]
900096a6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
900096aa:	f023 0304 	bic.w	r3, r3, #4
900096ae:	b2da      	uxtb	r2, r3
900096b0:	687b      	ldr	r3, [r7, #4]
900096b2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
900096b6:	687b      	ldr	r3, [r7, #4]
900096b8:	69db      	ldr	r3, [r3, #28]
900096ba:	2b00      	cmp	r3, #0
900096bc:	d003      	beq.n	900096c6 <netif_set_link_down+0x4e>
900096be:	687b      	ldr	r3, [r7, #4]
900096c0:	69db      	ldr	r3, [r3, #28]
900096c2:	6878      	ldr	r0, [r7, #4]
900096c4:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
900096c6:	3708      	adds	r7, #8
900096c8:	46bd      	mov	sp, r7
900096ca:	bd80      	pop	{r7, pc}
900096cc:	90014c18 	.word	0x90014c18
900096d0:	90014e24 	.word	0x90014e24
900096d4:	90014c68 	.word	0x90014c68

900096d8 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
900096d8:	b480      	push	{r7}
900096da:	b083      	sub	sp, #12
900096dc:	af00      	add	r7, sp, #0
900096de:	6078      	str	r0, [r7, #4]
900096e0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
900096e2:	687b      	ldr	r3, [r7, #4]
900096e4:	2b00      	cmp	r3, #0
900096e6:	d002      	beq.n	900096ee <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
900096e8:	687b      	ldr	r3, [r7, #4]
900096ea:	683a      	ldr	r2, [r7, #0]
900096ec:	61da      	str	r2, [r3, #28]
  }
}
900096ee:	bf00      	nop
900096f0:	370c      	adds	r7, #12
900096f2:	46bd      	mov	sp, r7
900096f4:	f85d 7b04 	ldr.w	r7, [sp], #4
900096f8:	4770      	bx	lr

900096fa <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
900096fa:	b480      	push	{r7}
900096fc:	b085      	sub	sp, #20
900096fe:	af00      	add	r7, sp, #0
90009700:	60f8      	str	r0, [r7, #12]
90009702:	60b9      	str	r1, [r7, #8]
90009704:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
90009706:	f06f 030b 	mvn.w	r3, #11
}
9000970a:	4618      	mov	r0, r3
9000970c:	3714      	adds	r7, #20
9000970e:	46bd      	mov	sp, r7
90009710:	f85d 7b04 	ldr.w	r7, [sp], #4
90009714:	4770      	bx	lr
	...

90009718 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
90009718:	b480      	push	{r7}
9000971a:	b085      	sub	sp, #20
9000971c:	af00      	add	r7, sp, #0
9000971e:	4603      	mov	r3, r0
90009720:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
90009722:	79fb      	ldrb	r3, [r7, #7]
90009724:	2b00      	cmp	r3, #0
90009726:	d013      	beq.n	90009750 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
90009728:	4b0d      	ldr	r3, [pc, #52]	; (90009760 <netif_get_by_index+0x48>)
9000972a:	681b      	ldr	r3, [r3, #0]
9000972c:	60fb      	str	r3, [r7, #12]
9000972e:	e00c      	b.n	9000974a <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
90009730:	68fb      	ldr	r3, [r7, #12]
90009732:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
90009736:	3301      	adds	r3, #1
90009738:	b2db      	uxtb	r3, r3
9000973a:	79fa      	ldrb	r2, [r7, #7]
9000973c:	429a      	cmp	r2, r3
9000973e:	d101      	bne.n	90009744 <netif_get_by_index+0x2c>
        return netif; /* found! */
90009740:	68fb      	ldr	r3, [r7, #12]
90009742:	e006      	b.n	90009752 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
90009744:	68fb      	ldr	r3, [r7, #12]
90009746:	681b      	ldr	r3, [r3, #0]
90009748:	60fb      	str	r3, [r7, #12]
9000974a:	68fb      	ldr	r3, [r7, #12]
9000974c:	2b00      	cmp	r3, #0
9000974e:	d1ef      	bne.n	90009730 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
90009750:	2300      	movs	r3, #0
}
90009752:	4618      	mov	r0, r3
90009754:	3714      	adds	r7, #20
90009756:	46bd      	mov	sp, r7
90009758:	f85d 7b04 	ldr.w	r7, [sp], #4
9000975c:	4770      	bx	lr
9000975e:	bf00      	nop
90009760:	24011014 	.word	0x24011014

90009764 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
90009764:	b580      	push	{r7, lr}
90009766:	b082      	sub	sp, #8
90009768:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
9000976a:	f009 fd6f 	bl	9001324c <sys_arch_protect>
9000976e:	6038      	str	r0, [r7, #0]
90009770:	4b0d      	ldr	r3, [pc, #52]	; (900097a8 <pbuf_free_ooseq+0x44>)
90009772:	2200      	movs	r2, #0
90009774:	701a      	strb	r2, [r3, #0]
90009776:	6838      	ldr	r0, [r7, #0]
90009778:	f009 fd76 	bl	90013268 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
9000977c:	4b0b      	ldr	r3, [pc, #44]	; (900097ac <pbuf_free_ooseq+0x48>)
9000977e:	681b      	ldr	r3, [r3, #0]
90009780:	607b      	str	r3, [r7, #4]
90009782:	e00a      	b.n	9000979a <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
90009784:	687b      	ldr	r3, [r7, #4]
90009786:	6f5b      	ldr	r3, [r3, #116]	; 0x74
90009788:	2b00      	cmp	r3, #0
9000978a:	d003      	beq.n	90009794 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
9000978c:	6878      	ldr	r0, [r7, #4]
9000978e:	f002 fc17 	bl	9000bfc0 <tcp_free_ooseq>
      return;
90009792:	e005      	b.n	900097a0 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
90009794:	687b      	ldr	r3, [r7, #4]
90009796:	68db      	ldr	r3, [r3, #12]
90009798:	607b      	str	r3, [r7, #4]
9000979a:	687b      	ldr	r3, [r7, #4]
9000979c:	2b00      	cmp	r3, #0
9000979e:	d1f1      	bne.n	90009784 <pbuf_free_ooseq+0x20>
    }
  }
}
900097a0:	3708      	adds	r7, #8
900097a2:	46bd      	mov	sp, r7
900097a4:	bd80      	pop	{r7, pc}
900097a6:	bf00      	nop
900097a8:	2401101d 	.word	0x2401101d
900097ac:	2401102c 	.word	0x2401102c

900097b0 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
900097b0:	b580      	push	{r7, lr}
900097b2:	b082      	sub	sp, #8
900097b4:	af00      	add	r7, sp, #0
900097b6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
900097b8:	f7ff ffd4 	bl	90009764 <pbuf_free_ooseq>
}
900097bc:	bf00      	nop
900097be:	3708      	adds	r7, #8
900097c0:	46bd      	mov	sp, r7
900097c2:	bd80      	pop	{r7, pc}

900097c4 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
900097c4:	b580      	push	{r7, lr}
900097c6:	b082      	sub	sp, #8
900097c8:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
900097ca:	f009 fd3f 	bl	9001324c <sys_arch_protect>
900097ce:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
900097d0:	4b0f      	ldr	r3, [pc, #60]	; (90009810 <pbuf_pool_is_empty+0x4c>)
900097d2:	781b      	ldrb	r3, [r3, #0]
900097d4:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
900097d6:	4b0e      	ldr	r3, [pc, #56]	; (90009810 <pbuf_pool_is_empty+0x4c>)
900097d8:	2201      	movs	r2, #1
900097da:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
900097dc:	6878      	ldr	r0, [r7, #4]
900097de:	f009 fd43 	bl	90013268 <sys_arch_unprotect>

  if (!queued) {
900097e2:	78fb      	ldrb	r3, [r7, #3]
900097e4:	2b00      	cmp	r3, #0
900097e6:	d10f      	bne.n	90009808 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
900097e8:	2100      	movs	r1, #0
900097ea:	480a      	ldr	r0, [pc, #40]	; (90009814 <pbuf_pool_is_empty+0x50>)
900097ec:	f7fd ff8e 	bl	9000770c <tcpip_try_callback>
900097f0:	4603      	mov	r3, r0
900097f2:	2b00      	cmp	r3, #0
900097f4:	d008      	beq.n	90009808 <pbuf_pool_is_empty+0x44>
900097f6:	f009 fd29 	bl	9001324c <sys_arch_protect>
900097fa:	6078      	str	r0, [r7, #4]
900097fc:	4b04      	ldr	r3, [pc, #16]	; (90009810 <pbuf_pool_is_empty+0x4c>)
900097fe:	2200      	movs	r2, #0
90009800:	701a      	strb	r2, [r3, #0]
90009802:	6878      	ldr	r0, [r7, #4]
90009804:	f009 fd30 	bl	90013268 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
90009808:	bf00      	nop
9000980a:	3708      	adds	r7, #8
9000980c:	46bd      	mov	sp, r7
9000980e:	bd80      	pop	{r7, pc}
90009810:	2401101d 	.word	0x2401101d
90009814:	900097b1 	.word	0x900097b1

90009818 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
90009818:	b480      	push	{r7}
9000981a:	b085      	sub	sp, #20
9000981c:	af00      	add	r7, sp, #0
9000981e:	60f8      	str	r0, [r7, #12]
90009820:	60b9      	str	r1, [r7, #8]
90009822:	4611      	mov	r1, r2
90009824:	461a      	mov	r2, r3
90009826:	460b      	mov	r3, r1
90009828:	80fb      	strh	r3, [r7, #6]
9000982a:	4613      	mov	r3, r2
9000982c:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
9000982e:	68fb      	ldr	r3, [r7, #12]
90009830:	2200      	movs	r2, #0
90009832:	601a      	str	r2, [r3, #0]
  p->payload = payload;
90009834:	68fb      	ldr	r3, [r7, #12]
90009836:	68ba      	ldr	r2, [r7, #8]
90009838:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
9000983a:	68fb      	ldr	r3, [r7, #12]
9000983c:	88fa      	ldrh	r2, [r7, #6]
9000983e:	811a      	strh	r2, [r3, #8]
  p->len = len;
90009840:	68fb      	ldr	r3, [r7, #12]
90009842:	88ba      	ldrh	r2, [r7, #4]
90009844:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
90009846:	8b3b      	ldrh	r3, [r7, #24]
90009848:	b2da      	uxtb	r2, r3
9000984a:	68fb      	ldr	r3, [r7, #12]
9000984c:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
9000984e:	68fb      	ldr	r3, [r7, #12]
90009850:	7f3a      	ldrb	r2, [r7, #28]
90009852:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
90009854:	68fb      	ldr	r3, [r7, #12]
90009856:	2201      	movs	r2, #1
90009858:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
9000985a:	68fb      	ldr	r3, [r7, #12]
9000985c:	2200      	movs	r2, #0
9000985e:	73da      	strb	r2, [r3, #15]
}
90009860:	bf00      	nop
90009862:	3714      	adds	r7, #20
90009864:	46bd      	mov	sp, r7
90009866:	f85d 7b04 	ldr.w	r7, [sp], #4
9000986a:	4770      	bx	lr

9000986c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
9000986c:	b580      	push	{r7, lr}
9000986e:	b08c      	sub	sp, #48	; 0x30
90009870:	af02      	add	r7, sp, #8
90009872:	4603      	mov	r3, r0
90009874:	71fb      	strb	r3, [r7, #7]
90009876:	460b      	mov	r3, r1
90009878:	80bb      	strh	r3, [r7, #4]
9000987a:	4613      	mov	r3, r2
9000987c:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
9000987e:	79fb      	ldrb	r3, [r7, #7]
90009880:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
90009882:	887b      	ldrh	r3, [r7, #2]
90009884:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
90009888:	d07f      	beq.n	9000998a <pbuf_alloc+0x11e>
9000988a:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
9000988e:	f300 80c8 	bgt.w	90009a22 <pbuf_alloc+0x1b6>
90009892:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
90009896:	d010      	beq.n	900098ba <pbuf_alloc+0x4e>
90009898:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
9000989c:	f300 80c1 	bgt.w	90009a22 <pbuf_alloc+0x1b6>
900098a0:	2b01      	cmp	r3, #1
900098a2:	d002      	beq.n	900098aa <pbuf_alloc+0x3e>
900098a4:	2b41      	cmp	r3, #65	; 0x41
900098a6:	f040 80bc 	bne.w	90009a22 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
900098aa:	887a      	ldrh	r2, [r7, #2]
900098ac:	88bb      	ldrh	r3, [r7, #4]
900098ae:	4619      	mov	r1, r3
900098b0:	2000      	movs	r0, #0
900098b2:	f000 f8d1 	bl	90009a58 <pbuf_alloc_reference>
900098b6:	6278      	str	r0, [r7, #36]	; 0x24
      break;
900098b8:	e0bd      	b.n	90009a36 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
900098ba:	2300      	movs	r3, #0
900098bc:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
900098be:	2300      	movs	r3, #0
900098c0:	61fb      	str	r3, [r7, #28]
      rem_len = length;
900098c2:	88bb      	ldrh	r3, [r7, #4]
900098c4:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
900098c6:	200c      	movs	r0, #12
900098c8:	f7ff fb9a 	bl	90009000 <memp_malloc>
900098cc:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
900098ce:	693b      	ldr	r3, [r7, #16]
900098d0:	2b00      	cmp	r3, #0
900098d2:	d109      	bne.n	900098e8 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
900098d4:	f7ff ff76 	bl	900097c4 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
900098d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
900098da:	2b00      	cmp	r3, #0
900098dc:	d002      	beq.n	900098e4 <pbuf_alloc+0x78>
            pbuf_free(p);
900098de:	6a78      	ldr	r0, [r7, #36]	; 0x24
900098e0:	f000 faa8 	bl	90009e34 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
900098e4:	2300      	movs	r3, #0
900098e6:	e0a7      	b.n	90009a38 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
900098e8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
900098ea:	3303      	adds	r3, #3
900098ec:	b29b      	uxth	r3, r3
900098ee:	f023 0303 	bic.w	r3, r3, #3
900098f2:	b29b      	uxth	r3, r3
900098f4:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
900098f8:	b29b      	uxth	r3, r3
900098fa:	8b7a      	ldrh	r2, [r7, #26]
900098fc:	4293      	cmp	r3, r2
900098fe:	bf28      	it	cs
90009900:	4613      	movcs	r3, r2
90009902:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
90009904:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
90009906:	3310      	adds	r3, #16
90009908:	693a      	ldr	r2, [r7, #16]
9000990a:	4413      	add	r3, r2
9000990c:	3303      	adds	r3, #3
9000990e:	f023 0303 	bic.w	r3, r3, #3
90009912:	4618      	mov	r0, r3
90009914:	89f9      	ldrh	r1, [r7, #14]
90009916:	8b7a      	ldrh	r2, [r7, #26]
90009918:	2300      	movs	r3, #0
9000991a:	9301      	str	r3, [sp, #4]
9000991c:	887b      	ldrh	r3, [r7, #2]
9000991e:	9300      	str	r3, [sp, #0]
90009920:	460b      	mov	r3, r1
90009922:	4601      	mov	r1, r0
90009924:	6938      	ldr	r0, [r7, #16]
90009926:	f7ff ff77 	bl	90009818 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
9000992a:	693b      	ldr	r3, [r7, #16]
9000992c:	685b      	ldr	r3, [r3, #4]
9000992e:	f003 0303 	and.w	r3, r3, #3
90009932:	2b00      	cmp	r3, #0
90009934:	d006      	beq.n	90009944 <pbuf_alloc+0xd8>
90009936:	4b42      	ldr	r3, [pc, #264]	; (90009a40 <pbuf_alloc+0x1d4>)
90009938:	f44f 7280 	mov.w	r2, #256	; 0x100
9000993c:	4941      	ldr	r1, [pc, #260]	; (90009a44 <pbuf_alloc+0x1d8>)
9000993e:	4842      	ldr	r0, [pc, #264]	; (90009a48 <pbuf_alloc+0x1dc>)
90009940:	f009 fe7a 	bl	90013638 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
90009944:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
90009946:	3303      	adds	r3, #3
90009948:	f023 0303 	bic.w	r3, r3, #3
9000994c:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
90009950:	d106      	bne.n	90009960 <pbuf_alloc+0xf4>
90009952:	4b3b      	ldr	r3, [pc, #236]	; (90009a40 <pbuf_alloc+0x1d4>)
90009954:	f44f 7281 	mov.w	r2, #258	; 0x102
90009958:	493c      	ldr	r1, [pc, #240]	; (90009a4c <pbuf_alloc+0x1e0>)
9000995a:	483b      	ldr	r0, [pc, #236]	; (90009a48 <pbuf_alloc+0x1dc>)
9000995c:	f009 fe6c 	bl	90013638 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
90009960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90009962:	2b00      	cmp	r3, #0
90009964:	d102      	bne.n	9000996c <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
90009966:	693b      	ldr	r3, [r7, #16]
90009968:	627b      	str	r3, [r7, #36]	; 0x24
9000996a:	e002      	b.n	90009972 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
9000996c:	69fb      	ldr	r3, [r7, #28]
9000996e:	693a      	ldr	r2, [r7, #16]
90009970:	601a      	str	r2, [r3, #0]
        }
        last = q;
90009972:	693b      	ldr	r3, [r7, #16]
90009974:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
90009976:	8b7a      	ldrh	r2, [r7, #26]
90009978:	89fb      	ldrh	r3, [r7, #14]
9000997a:	1ad3      	subs	r3, r2, r3
9000997c:	837b      	strh	r3, [r7, #26]
        offset = 0;
9000997e:	2300      	movs	r3, #0
90009980:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
90009982:	8b7b      	ldrh	r3, [r7, #26]
90009984:	2b00      	cmp	r3, #0
90009986:	d19e      	bne.n	900098c6 <pbuf_alloc+0x5a>
      break;
90009988:	e055      	b.n	90009a36 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
9000998a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
9000998c:	3303      	adds	r3, #3
9000998e:	b29b      	uxth	r3, r3
90009990:	f023 0303 	bic.w	r3, r3, #3
90009994:	b29a      	uxth	r2, r3
90009996:	88bb      	ldrh	r3, [r7, #4]
90009998:	3303      	adds	r3, #3
9000999a:	b29b      	uxth	r3, r3
9000999c:	f023 0303 	bic.w	r3, r3, #3
900099a0:	b29b      	uxth	r3, r3
900099a2:	4413      	add	r3, r2
900099a4:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
900099a6:	8b3b      	ldrh	r3, [r7, #24]
900099a8:	3310      	adds	r3, #16
900099aa:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
900099ac:	8b3a      	ldrh	r2, [r7, #24]
900099ae:	88bb      	ldrh	r3, [r7, #4]
900099b0:	3303      	adds	r3, #3
900099b2:	f023 0303 	bic.w	r3, r3, #3
900099b6:	429a      	cmp	r2, r3
900099b8:	d306      	bcc.n	900099c8 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
900099ba:	8afa      	ldrh	r2, [r7, #22]
900099bc:	88bb      	ldrh	r3, [r7, #4]
900099be:	3303      	adds	r3, #3
900099c0:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
900099c4:	429a      	cmp	r2, r3
900099c6:	d201      	bcs.n	900099cc <pbuf_alloc+0x160>
        return NULL;
900099c8:	2300      	movs	r3, #0
900099ca:	e035      	b.n	90009a38 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
900099cc:	8afb      	ldrh	r3, [r7, #22]
900099ce:	4618      	mov	r0, r3
900099d0:	f7ff f96e 	bl	90008cb0 <mem_malloc>
900099d4:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
900099d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
900099d8:	2b00      	cmp	r3, #0
900099da:	d101      	bne.n	900099e0 <pbuf_alloc+0x174>
        return NULL;
900099dc:	2300      	movs	r3, #0
900099de:	e02b      	b.n	90009a38 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
900099e0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
900099e2:	3310      	adds	r3, #16
900099e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
900099e6:	4413      	add	r3, r2
900099e8:	3303      	adds	r3, #3
900099ea:	f023 0303 	bic.w	r3, r3, #3
900099ee:	4618      	mov	r0, r3
900099f0:	88b9      	ldrh	r1, [r7, #4]
900099f2:	88ba      	ldrh	r2, [r7, #4]
900099f4:	2300      	movs	r3, #0
900099f6:	9301      	str	r3, [sp, #4]
900099f8:	887b      	ldrh	r3, [r7, #2]
900099fa:	9300      	str	r3, [sp, #0]
900099fc:	460b      	mov	r3, r1
900099fe:	4601      	mov	r1, r0
90009a00:	6a78      	ldr	r0, [r7, #36]	; 0x24
90009a02:	f7ff ff09 	bl	90009818 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
90009a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90009a08:	685b      	ldr	r3, [r3, #4]
90009a0a:	f003 0303 	and.w	r3, r3, #3
90009a0e:	2b00      	cmp	r3, #0
90009a10:	d010      	beq.n	90009a34 <pbuf_alloc+0x1c8>
90009a12:	4b0b      	ldr	r3, [pc, #44]	; (90009a40 <pbuf_alloc+0x1d4>)
90009a14:	f44f 7291 	mov.w	r2, #290	; 0x122
90009a18:	490d      	ldr	r1, [pc, #52]	; (90009a50 <pbuf_alloc+0x1e4>)
90009a1a:	480b      	ldr	r0, [pc, #44]	; (90009a48 <pbuf_alloc+0x1dc>)
90009a1c:	f009 fe0c 	bl	90013638 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
90009a20:	e008      	b.n	90009a34 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
90009a22:	4b07      	ldr	r3, [pc, #28]	; (90009a40 <pbuf_alloc+0x1d4>)
90009a24:	f240 1227 	movw	r2, #295	; 0x127
90009a28:	490a      	ldr	r1, [pc, #40]	; (90009a54 <pbuf_alloc+0x1e8>)
90009a2a:	4807      	ldr	r0, [pc, #28]	; (90009a48 <pbuf_alloc+0x1dc>)
90009a2c:	f009 fe04 	bl	90013638 <iprintf>
      return NULL;
90009a30:	2300      	movs	r3, #0
90009a32:	e001      	b.n	90009a38 <pbuf_alloc+0x1cc>
      break;
90009a34:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
90009a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
90009a38:	4618      	mov	r0, r3
90009a3a:	3728      	adds	r7, #40	; 0x28
90009a3c:	46bd      	mov	sp, r7
90009a3e:	bd80      	pop	{r7, pc}
90009a40:	90014e48 	.word	0x90014e48
90009a44:	90014e78 	.word	0x90014e78
90009a48:	90014ea8 	.word	0x90014ea8
90009a4c:	90014ed0 	.word	0x90014ed0
90009a50:	90014f04 	.word	0x90014f04
90009a54:	90014f30 	.word	0x90014f30

90009a58 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
90009a58:	b580      	push	{r7, lr}
90009a5a:	b086      	sub	sp, #24
90009a5c:	af02      	add	r7, sp, #8
90009a5e:	6078      	str	r0, [r7, #4]
90009a60:	460b      	mov	r3, r1
90009a62:	807b      	strh	r3, [r7, #2]
90009a64:	4613      	mov	r3, r2
90009a66:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
90009a68:	883b      	ldrh	r3, [r7, #0]
90009a6a:	2b41      	cmp	r3, #65	; 0x41
90009a6c:	d009      	beq.n	90009a82 <pbuf_alloc_reference+0x2a>
90009a6e:	883b      	ldrh	r3, [r7, #0]
90009a70:	2b01      	cmp	r3, #1
90009a72:	d006      	beq.n	90009a82 <pbuf_alloc_reference+0x2a>
90009a74:	4b0f      	ldr	r3, [pc, #60]	; (90009ab4 <pbuf_alloc_reference+0x5c>)
90009a76:	f44f 72a5 	mov.w	r2, #330	; 0x14a
90009a7a:	490f      	ldr	r1, [pc, #60]	; (90009ab8 <pbuf_alloc_reference+0x60>)
90009a7c:	480f      	ldr	r0, [pc, #60]	; (90009abc <pbuf_alloc_reference+0x64>)
90009a7e:	f009 fddb 	bl	90013638 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
90009a82:	200b      	movs	r0, #11
90009a84:	f7ff fabc 	bl	90009000 <memp_malloc>
90009a88:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
90009a8a:	68fb      	ldr	r3, [r7, #12]
90009a8c:	2b00      	cmp	r3, #0
90009a8e:	d101      	bne.n	90009a94 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
90009a90:	2300      	movs	r3, #0
90009a92:	e00b      	b.n	90009aac <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
90009a94:	8879      	ldrh	r1, [r7, #2]
90009a96:	887a      	ldrh	r2, [r7, #2]
90009a98:	2300      	movs	r3, #0
90009a9a:	9301      	str	r3, [sp, #4]
90009a9c:	883b      	ldrh	r3, [r7, #0]
90009a9e:	9300      	str	r3, [sp, #0]
90009aa0:	460b      	mov	r3, r1
90009aa2:	6879      	ldr	r1, [r7, #4]
90009aa4:	68f8      	ldr	r0, [r7, #12]
90009aa6:	f7ff feb7 	bl	90009818 <pbuf_init_alloced_pbuf>
  return p;
90009aaa:	68fb      	ldr	r3, [r7, #12]
}
90009aac:	4618      	mov	r0, r3
90009aae:	3710      	adds	r7, #16
90009ab0:	46bd      	mov	sp, r7
90009ab2:	bd80      	pop	{r7, pc}
90009ab4:	90014e48 	.word	0x90014e48
90009ab8:	90014f4c 	.word	0x90014f4c
90009abc:	90014ea8 	.word	0x90014ea8

90009ac0 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
90009ac0:	b580      	push	{r7, lr}
90009ac2:	b088      	sub	sp, #32
90009ac4:	af02      	add	r7, sp, #8
90009ac6:	607b      	str	r3, [r7, #4]
90009ac8:	4603      	mov	r3, r0
90009aca:	73fb      	strb	r3, [r7, #15]
90009acc:	460b      	mov	r3, r1
90009ace:	81bb      	strh	r3, [r7, #12]
90009ad0:	4613      	mov	r3, r2
90009ad2:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
90009ad4:	7bfb      	ldrb	r3, [r7, #15]
90009ad6:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
90009ad8:	8a7b      	ldrh	r3, [r7, #18]
90009ada:	3303      	adds	r3, #3
90009adc:	f023 0203 	bic.w	r2, r3, #3
90009ae0:	89bb      	ldrh	r3, [r7, #12]
90009ae2:	441a      	add	r2, r3
90009ae4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
90009ae6:	429a      	cmp	r2, r3
90009ae8:	d901      	bls.n	90009aee <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
90009aea:	2300      	movs	r3, #0
90009aec:	e018      	b.n	90009b20 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
90009aee:	6a3b      	ldr	r3, [r7, #32]
90009af0:	2b00      	cmp	r3, #0
90009af2:	d007      	beq.n	90009b04 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
90009af4:	8a7b      	ldrh	r3, [r7, #18]
90009af6:	3303      	adds	r3, #3
90009af8:	f023 0303 	bic.w	r3, r3, #3
90009afc:	6a3a      	ldr	r2, [r7, #32]
90009afe:	4413      	add	r3, r2
90009b00:	617b      	str	r3, [r7, #20]
90009b02:	e001      	b.n	90009b08 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
90009b04:	2300      	movs	r3, #0
90009b06:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
90009b08:	6878      	ldr	r0, [r7, #4]
90009b0a:	89b9      	ldrh	r1, [r7, #12]
90009b0c:	89ba      	ldrh	r2, [r7, #12]
90009b0e:	2302      	movs	r3, #2
90009b10:	9301      	str	r3, [sp, #4]
90009b12:	897b      	ldrh	r3, [r7, #10]
90009b14:	9300      	str	r3, [sp, #0]
90009b16:	460b      	mov	r3, r1
90009b18:	6979      	ldr	r1, [r7, #20]
90009b1a:	f7ff fe7d 	bl	90009818 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
90009b1e:	687b      	ldr	r3, [r7, #4]
}
90009b20:	4618      	mov	r0, r3
90009b22:	3718      	adds	r7, #24
90009b24:	46bd      	mov	sp, r7
90009b26:	bd80      	pop	{r7, pc}

90009b28 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
90009b28:	b580      	push	{r7, lr}
90009b2a:	b084      	sub	sp, #16
90009b2c:	af00      	add	r7, sp, #0
90009b2e:	6078      	str	r0, [r7, #4]
90009b30:	460b      	mov	r3, r1
90009b32:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
90009b34:	687b      	ldr	r3, [r7, #4]
90009b36:	2b00      	cmp	r3, #0
90009b38:	d106      	bne.n	90009b48 <pbuf_realloc+0x20>
90009b3a:	4b3a      	ldr	r3, [pc, #232]	; (90009c24 <pbuf_realloc+0xfc>)
90009b3c:	f44f 72cc 	mov.w	r2, #408	; 0x198
90009b40:	4939      	ldr	r1, [pc, #228]	; (90009c28 <pbuf_realloc+0x100>)
90009b42:	483a      	ldr	r0, [pc, #232]	; (90009c2c <pbuf_realloc+0x104>)
90009b44:	f009 fd78 	bl	90013638 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
90009b48:	687b      	ldr	r3, [r7, #4]
90009b4a:	891b      	ldrh	r3, [r3, #8]
90009b4c:	887a      	ldrh	r2, [r7, #2]
90009b4e:	429a      	cmp	r2, r3
90009b50:	d263      	bcs.n	90009c1a <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
90009b52:	687b      	ldr	r3, [r7, #4]
90009b54:	891a      	ldrh	r2, [r3, #8]
90009b56:	887b      	ldrh	r3, [r7, #2]
90009b58:	1ad3      	subs	r3, r2, r3
90009b5a:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
90009b5c:	887b      	ldrh	r3, [r7, #2]
90009b5e:	817b      	strh	r3, [r7, #10]
  q = p;
90009b60:	687b      	ldr	r3, [r7, #4]
90009b62:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
90009b64:	e018      	b.n	90009b98 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
90009b66:	68fb      	ldr	r3, [r7, #12]
90009b68:	895b      	ldrh	r3, [r3, #10]
90009b6a:	897a      	ldrh	r2, [r7, #10]
90009b6c:	1ad3      	subs	r3, r2, r3
90009b6e:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
90009b70:	68fb      	ldr	r3, [r7, #12]
90009b72:	891a      	ldrh	r2, [r3, #8]
90009b74:	893b      	ldrh	r3, [r7, #8]
90009b76:	1ad3      	subs	r3, r2, r3
90009b78:	b29a      	uxth	r2, r3
90009b7a:	68fb      	ldr	r3, [r7, #12]
90009b7c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
90009b7e:	68fb      	ldr	r3, [r7, #12]
90009b80:	681b      	ldr	r3, [r3, #0]
90009b82:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
90009b84:	68fb      	ldr	r3, [r7, #12]
90009b86:	2b00      	cmp	r3, #0
90009b88:	d106      	bne.n	90009b98 <pbuf_realloc+0x70>
90009b8a:	4b26      	ldr	r3, [pc, #152]	; (90009c24 <pbuf_realloc+0xfc>)
90009b8c:	f240 12af 	movw	r2, #431	; 0x1af
90009b90:	4927      	ldr	r1, [pc, #156]	; (90009c30 <pbuf_realloc+0x108>)
90009b92:	4826      	ldr	r0, [pc, #152]	; (90009c2c <pbuf_realloc+0x104>)
90009b94:	f009 fd50 	bl	90013638 <iprintf>
  while (rem_len > q->len) {
90009b98:	68fb      	ldr	r3, [r7, #12]
90009b9a:	895b      	ldrh	r3, [r3, #10]
90009b9c:	897a      	ldrh	r2, [r7, #10]
90009b9e:	429a      	cmp	r2, r3
90009ba0:	d8e1      	bhi.n	90009b66 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
90009ba2:	68fb      	ldr	r3, [r7, #12]
90009ba4:	7b1b      	ldrb	r3, [r3, #12]
90009ba6:	f003 030f 	and.w	r3, r3, #15
90009baa:	2b00      	cmp	r3, #0
90009bac:	d121      	bne.n	90009bf2 <pbuf_realloc+0xca>
90009bae:	68fb      	ldr	r3, [r7, #12]
90009bb0:	895b      	ldrh	r3, [r3, #10]
90009bb2:	897a      	ldrh	r2, [r7, #10]
90009bb4:	429a      	cmp	r2, r3
90009bb6:	d01c      	beq.n	90009bf2 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
90009bb8:	68fb      	ldr	r3, [r7, #12]
90009bba:	7b5b      	ldrb	r3, [r3, #13]
90009bbc:	f003 0302 	and.w	r3, r3, #2
90009bc0:	2b00      	cmp	r3, #0
90009bc2:	d116      	bne.n	90009bf2 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
90009bc4:	68fb      	ldr	r3, [r7, #12]
90009bc6:	685a      	ldr	r2, [r3, #4]
90009bc8:	68fb      	ldr	r3, [r7, #12]
90009bca:	1ad3      	subs	r3, r2, r3
90009bcc:	b29a      	uxth	r2, r3
90009bce:	897b      	ldrh	r3, [r7, #10]
90009bd0:	4413      	add	r3, r2
90009bd2:	b29b      	uxth	r3, r3
90009bd4:	4619      	mov	r1, r3
90009bd6:	68f8      	ldr	r0, [r7, #12]
90009bd8:	f7fe ff5a 	bl	90008a90 <mem_trim>
90009bdc:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
90009bde:	68fb      	ldr	r3, [r7, #12]
90009be0:	2b00      	cmp	r3, #0
90009be2:	d106      	bne.n	90009bf2 <pbuf_realloc+0xca>
90009be4:	4b0f      	ldr	r3, [pc, #60]	; (90009c24 <pbuf_realloc+0xfc>)
90009be6:	f240 12bd 	movw	r2, #445	; 0x1bd
90009bea:	4912      	ldr	r1, [pc, #72]	; (90009c34 <pbuf_realloc+0x10c>)
90009bec:	480f      	ldr	r0, [pc, #60]	; (90009c2c <pbuf_realloc+0x104>)
90009bee:	f009 fd23 	bl	90013638 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
90009bf2:	68fb      	ldr	r3, [r7, #12]
90009bf4:	897a      	ldrh	r2, [r7, #10]
90009bf6:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
90009bf8:	68fb      	ldr	r3, [r7, #12]
90009bfa:	895a      	ldrh	r2, [r3, #10]
90009bfc:	68fb      	ldr	r3, [r7, #12]
90009bfe:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
90009c00:	68fb      	ldr	r3, [r7, #12]
90009c02:	681b      	ldr	r3, [r3, #0]
90009c04:	2b00      	cmp	r3, #0
90009c06:	d004      	beq.n	90009c12 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
90009c08:	68fb      	ldr	r3, [r7, #12]
90009c0a:	681b      	ldr	r3, [r3, #0]
90009c0c:	4618      	mov	r0, r3
90009c0e:	f000 f911 	bl	90009e34 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
90009c12:	68fb      	ldr	r3, [r7, #12]
90009c14:	2200      	movs	r2, #0
90009c16:	601a      	str	r2, [r3, #0]
90009c18:	e000      	b.n	90009c1c <pbuf_realloc+0xf4>
    return;
90009c1a:	bf00      	nop

}
90009c1c:	3710      	adds	r7, #16
90009c1e:	46bd      	mov	sp, r7
90009c20:	bd80      	pop	{r7, pc}
90009c22:	bf00      	nop
90009c24:	90014e48 	.word	0x90014e48
90009c28:	90014f60 	.word	0x90014f60
90009c2c:	90014ea8 	.word	0x90014ea8
90009c30:	90014f78 	.word	0x90014f78
90009c34:	90014f90 	.word	0x90014f90

90009c38 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
90009c38:	b580      	push	{r7, lr}
90009c3a:	b086      	sub	sp, #24
90009c3c:	af00      	add	r7, sp, #0
90009c3e:	60f8      	str	r0, [r7, #12]
90009c40:	60b9      	str	r1, [r7, #8]
90009c42:	4613      	mov	r3, r2
90009c44:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
90009c46:	68fb      	ldr	r3, [r7, #12]
90009c48:	2b00      	cmp	r3, #0
90009c4a:	d106      	bne.n	90009c5a <pbuf_add_header_impl+0x22>
90009c4c:	4b2b      	ldr	r3, [pc, #172]	; (90009cfc <pbuf_add_header_impl+0xc4>)
90009c4e:	f240 12df 	movw	r2, #479	; 0x1df
90009c52:	492b      	ldr	r1, [pc, #172]	; (90009d00 <pbuf_add_header_impl+0xc8>)
90009c54:	482b      	ldr	r0, [pc, #172]	; (90009d04 <pbuf_add_header_impl+0xcc>)
90009c56:	f009 fcef 	bl	90013638 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
90009c5a:	68fb      	ldr	r3, [r7, #12]
90009c5c:	2b00      	cmp	r3, #0
90009c5e:	d003      	beq.n	90009c68 <pbuf_add_header_impl+0x30>
90009c60:	68bb      	ldr	r3, [r7, #8]
90009c62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
90009c66:	d301      	bcc.n	90009c6c <pbuf_add_header_impl+0x34>
    return 1;
90009c68:	2301      	movs	r3, #1
90009c6a:	e043      	b.n	90009cf4 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
90009c6c:	68bb      	ldr	r3, [r7, #8]
90009c6e:	2b00      	cmp	r3, #0
90009c70:	d101      	bne.n	90009c76 <pbuf_add_header_impl+0x3e>
    return 0;
90009c72:	2300      	movs	r3, #0
90009c74:	e03e      	b.n	90009cf4 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
90009c76:	68bb      	ldr	r3, [r7, #8]
90009c78:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
90009c7a:	68fb      	ldr	r3, [r7, #12]
90009c7c:	891a      	ldrh	r2, [r3, #8]
90009c7e:	8a7b      	ldrh	r3, [r7, #18]
90009c80:	4413      	add	r3, r2
90009c82:	b29b      	uxth	r3, r3
90009c84:	8a7a      	ldrh	r2, [r7, #18]
90009c86:	429a      	cmp	r2, r3
90009c88:	d901      	bls.n	90009c8e <pbuf_add_header_impl+0x56>
    return 1;
90009c8a:	2301      	movs	r3, #1
90009c8c:	e032      	b.n	90009cf4 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
90009c8e:	68fb      	ldr	r3, [r7, #12]
90009c90:	7b1b      	ldrb	r3, [r3, #12]
90009c92:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
90009c94:	8a3b      	ldrh	r3, [r7, #16]
90009c96:	f003 0380 	and.w	r3, r3, #128	; 0x80
90009c9a:	2b00      	cmp	r3, #0
90009c9c:	d00c      	beq.n	90009cb8 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
90009c9e:	68fb      	ldr	r3, [r7, #12]
90009ca0:	685a      	ldr	r2, [r3, #4]
90009ca2:	68bb      	ldr	r3, [r7, #8]
90009ca4:	425b      	negs	r3, r3
90009ca6:	4413      	add	r3, r2
90009ca8:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
90009caa:	68fb      	ldr	r3, [r7, #12]
90009cac:	3310      	adds	r3, #16
90009cae:	697a      	ldr	r2, [r7, #20]
90009cb0:	429a      	cmp	r2, r3
90009cb2:	d20d      	bcs.n	90009cd0 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
90009cb4:	2301      	movs	r3, #1
90009cb6:	e01d      	b.n	90009cf4 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
90009cb8:	79fb      	ldrb	r3, [r7, #7]
90009cba:	2b00      	cmp	r3, #0
90009cbc:	d006      	beq.n	90009ccc <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
90009cbe:	68fb      	ldr	r3, [r7, #12]
90009cc0:	685a      	ldr	r2, [r3, #4]
90009cc2:	68bb      	ldr	r3, [r7, #8]
90009cc4:	425b      	negs	r3, r3
90009cc6:	4413      	add	r3, r2
90009cc8:	617b      	str	r3, [r7, #20]
90009cca:	e001      	b.n	90009cd0 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
90009ccc:	2301      	movs	r3, #1
90009cce:	e011      	b.n	90009cf4 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
90009cd0:	68fb      	ldr	r3, [r7, #12]
90009cd2:	697a      	ldr	r2, [r7, #20]
90009cd4:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
90009cd6:	68fb      	ldr	r3, [r7, #12]
90009cd8:	895a      	ldrh	r2, [r3, #10]
90009cda:	8a7b      	ldrh	r3, [r7, #18]
90009cdc:	4413      	add	r3, r2
90009cde:	b29a      	uxth	r2, r3
90009ce0:	68fb      	ldr	r3, [r7, #12]
90009ce2:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
90009ce4:	68fb      	ldr	r3, [r7, #12]
90009ce6:	891a      	ldrh	r2, [r3, #8]
90009ce8:	8a7b      	ldrh	r3, [r7, #18]
90009cea:	4413      	add	r3, r2
90009cec:	b29a      	uxth	r2, r3
90009cee:	68fb      	ldr	r3, [r7, #12]
90009cf0:	811a      	strh	r2, [r3, #8]


  return 0;
90009cf2:	2300      	movs	r3, #0
}
90009cf4:	4618      	mov	r0, r3
90009cf6:	3718      	adds	r7, #24
90009cf8:	46bd      	mov	sp, r7
90009cfa:	bd80      	pop	{r7, pc}
90009cfc:	90014e48 	.word	0x90014e48
90009d00:	90014fac 	.word	0x90014fac
90009d04:	90014ea8 	.word	0x90014ea8

90009d08 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
90009d08:	b580      	push	{r7, lr}
90009d0a:	b082      	sub	sp, #8
90009d0c:	af00      	add	r7, sp, #0
90009d0e:	6078      	str	r0, [r7, #4]
90009d10:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
90009d12:	2200      	movs	r2, #0
90009d14:	6839      	ldr	r1, [r7, #0]
90009d16:	6878      	ldr	r0, [r7, #4]
90009d18:	f7ff ff8e 	bl	90009c38 <pbuf_add_header_impl>
90009d1c:	4603      	mov	r3, r0
}
90009d1e:	4618      	mov	r0, r3
90009d20:	3708      	adds	r7, #8
90009d22:	46bd      	mov	sp, r7
90009d24:	bd80      	pop	{r7, pc}
	...

90009d28 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
90009d28:	b580      	push	{r7, lr}
90009d2a:	b084      	sub	sp, #16
90009d2c:	af00      	add	r7, sp, #0
90009d2e:	6078      	str	r0, [r7, #4]
90009d30:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
90009d32:	687b      	ldr	r3, [r7, #4]
90009d34:	2b00      	cmp	r3, #0
90009d36:	d106      	bne.n	90009d46 <pbuf_remove_header+0x1e>
90009d38:	4b20      	ldr	r3, [pc, #128]	; (90009dbc <pbuf_remove_header+0x94>)
90009d3a:	f240 224b 	movw	r2, #587	; 0x24b
90009d3e:	4920      	ldr	r1, [pc, #128]	; (90009dc0 <pbuf_remove_header+0x98>)
90009d40:	4820      	ldr	r0, [pc, #128]	; (90009dc4 <pbuf_remove_header+0x9c>)
90009d42:	f009 fc79 	bl	90013638 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
90009d46:	687b      	ldr	r3, [r7, #4]
90009d48:	2b00      	cmp	r3, #0
90009d4a:	d003      	beq.n	90009d54 <pbuf_remove_header+0x2c>
90009d4c:	683b      	ldr	r3, [r7, #0]
90009d4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
90009d52:	d301      	bcc.n	90009d58 <pbuf_remove_header+0x30>
    return 1;
90009d54:	2301      	movs	r3, #1
90009d56:	e02c      	b.n	90009db2 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
90009d58:	683b      	ldr	r3, [r7, #0]
90009d5a:	2b00      	cmp	r3, #0
90009d5c:	d101      	bne.n	90009d62 <pbuf_remove_header+0x3a>
    return 0;
90009d5e:	2300      	movs	r3, #0
90009d60:	e027      	b.n	90009db2 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
90009d62:	683b      	ldr	r3, [r7, #0]
90009d64:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
90009d66:	687b      	ldr	r3, [r7, #4]
90009d68:	895b      	ldrh	r3, [r3, #10]
90009d6a:	89fa      	ldrh	r2, [r7, #14]
90009d6c:	429a      	cmp	r2, r3
90009d6e:	d908      	bls.n	90009d82 <pbuf_remove_header+0x5a>
90009d70:	4b12      	ldr	r3, [pc, #72]	; (90009dbc <pbuf_remove_header+0x94>)
90009d72:	f240 2255 	movw	r2, #597	; 0x255
90009d76:	4914      	ldr	r1, [pc, #80]	; (90009dc8 <pbuf_remove_header+0xa0>)
90009d78:	4812      	ldr	r0, [pc, #72]	; (90009dc4 <pbuf_remove_header+0x9c>)
90009d7a:	f009 fc5d 	bl	90013638 <iprintf>
90009d7e:	2301      	movs	r3, #1
90009d80:	e017      	b.n	90009db2 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
90009d82:	687b      	ldr	r3, [r7, #4]
90009d84:	685b      	ldr	r3, [r3, #4]
90009d86:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
90009d88:	687b      	ldr	r3, [r7, #4]
90009d8a:	685a      	ldr	r2, [r3, #4]
90009d8c:	683b      	ldr	r3, [r7, #0]
90009d8e:	441a      	add	r2, r3
90009d90:	687b      	ldr	r3, [r7, #4]
90009d92:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
90009d94:	687b      	ldr	r3, [r7, #4]
90009d96:	895a      	ldrh	r2, [r3, #10]
90009d98:	89fb      	ldrh	r3, [r7, #14]
90009d9a:	1ad3      	subs	r3, r2, r3
90009d9c:	b29a      	uxth	r2, r3
90009d9e:	687b      	ldr	r3, [r7, #4]
90009da0:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
90009da2:	687b      	ldr	r3, [r7, #4]
90009da4:	891a      	ldrh	r2, [r3, #8]
90009da6:	89fb      	ldrh	r3, [r7, #14]
90009da8:	1ad3      	subs	r3, r2, r3
90009daa:	b29a      	uxth	r2, r3
90009dac:	687b      	ldr	r3, [r7, #4]
90009dae:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
90009db0:	2300      	movs	r3, #0
}
90009db2:	4618      	mov	r0, r3
90009db4:	3710      	adds	r7, #16
90009db6:	46bd      	mov	sp, r7
90009db8:	bd80      	pop	{r7, pc}
90009dba:	bf00      	nop
90009dbc:	90014e48 	.word	0x90014e48
90009dc0:	90014fac 	.word	0x90014fac
90009dc4:	90014ea8 	.word	0x90014ea8
90009dc8:	90014fb8 	.word	0x90014fb8

90009dcc <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
90009dcc:	b580      	push	{r7, lr}
90009dce:	b082      	sub	sp, #8
90009dd0:	af00      	add	r7, sp, #0
90009dd2:	6078      	str	r0, [r7, #4]
90009dd4:	460b      	mov	r3, r1
90009dd6:	807b      	strh	r3, [r7, #2]
90009dd8:	4613      	mov	r3, r2
90009dda:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
90009ddc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
90009de0:	2b00      	cmp	r3, #0
90009de2:	da08      	bge.n	90009df6 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
90009de4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
90009de8:	425b      	negs	r3, r3
90009dea:	4619      	mov	r1, r3
90009dec:	6878      	ldr	r0, [r7, #4]
90009dee:	f7ff ff9b 	bl	90009d28 <pbuf_remove_header>
90009df2:	4603      	mov	r3, r0
90009df4:	e007      	b.n	90009e06 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
90009df6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
90009dfa:	787a      	ldrb	r2, [r7, #1]
90009dfc:	4619      	mov	r1, r3
90009dfe:	6878      	ldr	r0, [r7, #4]
90009e00:	f7ff ff1a 	bl	90009c38 <pbuf_add_header_impl>
90009e04:	4603      	mov	r3, r0
  }
}
90009e06:	4618      	mov	r0, r3
90009e08:	3708      	adds	r7, #8
90009e0a:	46bd      	mov	sp, r7
90009e0c:	bd80      	pop	{r7, pc}

90009e0e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
90009e0e:	b580      	push	{r7, lr}
90009e10:	b082      	sub	sp, #8
90009e12:	af00      	add	r7, sp, #0
90009e14:	6078      	str	r0, [r7, #4]
90009e16:	460b      	mov	r3, r1
90009e18:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
90009e1a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
90009e1e:	2201      	movs	r2, #1
90009e20:	4619      	mov	r1, r3
90009e22:	6878      	ldr	r0, [r7, #4]
90009e24:	f7ff ffd2 	bl	90009dcc <pbuf_header_impl>
90009e28:	4603      	mov	r3, r0
}
90009e2a:	4618      	mov	r0, r3
90009e2c:	3708      	adds	r7, #8
90009e2e:	46bd      	mov	sp, r7
90009e30:	bd80      	pop	{r7, pc}
	...

90009e34 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
90009e34:	b580      	push	{r7, lr}
90009e36:	b088      	sub	sp, #32
90009e38:	af00      	add	r7, sp, #0
90009e3a:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
90009e3c:	687b      	ldr	r3, [r7, #4]
90009e3e:	2b00      	cmp	r3, #0
90009e40:	d10b      	bne.n	90009e5a <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
90009e42:	687b      	ldr	r3, [r7, #4]
90009e44:	2b00      	cmp	r3, #0
90009e46:	d106      	bne.n	90009e56 <pbuf_free+0x22>
90009e48:	4b3b      	ldr	r3, [pc, #236]	; (90009f38 <pbuf_free+0x104>)
90009e4a:	f44f 7237 	mov.w	r2, #732	; 0x2dc
90009e4e:	493b      	ldr	r1, [pc, #236]	; (90009f3c <pbuf_free+0x108>)
90009e50:	483b      	ldr	r0, [pc, #236]	; (90009f40 <pbuf_free+0x10c>)
90009e52:	f009 fbf1 	bl	90013638 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
90009e56:	2300      	movs	r3, #0
90009e58:	e069      	b.n	90009f2e <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
90009e5a:	2300      	movs	r3, #0
90009e5c:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
90009e5e:	e062      	b.n	90009f26 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
90009e60:	f009 f9f4 	bl	9001324c <sys_arch_protect>
90009e64:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
90009e66:	687b      	ldr	r3, [r7, #4]
90009e68:	7b9b      	ldrb	r3, [r3, #14]
90009e6a:	2b00      	cmp	r3, #0
90009e6c:	d106      	bne.n	90009e7c <pbuf_free+0x48>
90009e6e:	4b32      	ldr	r3, [pc, #200]	; (90009f38 <pbuf_free+0x104>)
90009e70:	f240 22f1 	movw	r2, #753	; 0x2f1
90009e74:	4933      	ldr	r1, [pc, #204]	; (90009f44 <pbuf_free+0x110>)
90009e76:	4832      	ldr	r0, [pc, #200]	; (90009f40 <pbuf_free+0x10c>)
90009e78:	f009 fbde 	bl	90013638 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
90009e7c:	687b      	ldr	r3, [r7, #4]
90009e7e:	7b9b      	ldrb	r3, [r3, #14]
90009e80:	3b01      	subs	r3, #1
90009e82:	b2da      	uxtb	r2, r3
90009e84:	687b      	ldr	r3, [r7, #4]
90009e86:	739a      	strb	r2, [r3, #14]
90009e88:	687b      	ldr	r3, [r7, #4]
90009e8a:	7b9b      	ldrb	r3, [r3, #14]
90009e8c:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
90009e8e:	69b8      	ldr	r0, [r7, #24]
90009e90:	f009 f9ea 	bl	90013268 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
90009e94:	7dfb      	ldrb	r3, [r7, #23]
90009e96:	2b00      	cmp	r3, #0
90009e98:	d143      	bne.n	90009f22 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
90009e9a:	687b      	ldr	r3, [r7, #4]
90009e9c:	681b      	ldr	r3, [r3, #0]
90009e9e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
90009ea0:	687b      	ldr	r3, [r7, #4]
90009ea2:	7b1b      	ldrb	r3, [r3, #12]
90009ea4:	f003 030f 	and.w	r3, r3, #15
90009ea8:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
90009eaa:	687b      	ldr	r3, [r7, #4]
90009eac:	7b5b      	ldrb	r3, [r3, #13]
90009eae:	f003 0302 	and.w	r3, r3, #2
90009eb2:	2b00      	cmp	r3, #0
90009eb4:	d011      	beq.n	90009eda <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
90009eb6:	687b      	ldr	r3, [r7, #4]
90009eb8:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
90009eba:	68bb      	ldr	r3, [r7, #8]
90009ebc:	691b      	ldr	r3, [r3, #16]
90009ebe:	2b00      	cmp	r3, #0
90009ec0:	d106      	bne.n	90009ed0 <pbuf_free+0x9c>
90009ec2:	4b1d      	ldr	r3, [pc, #116]	; (90009f38 <pbuf_free+0x104>)
90009ec4:	f240 22ff 	movw	r2, #767	; 0x2ff
90009ec8:	491f      	ldr	r1, [pc, #124]	; (90009f48 <pbuf_free+0x114>)
90009eca:	481d      	ldr	r0, [pc, #116]	; (90009f40 <pbuf_free+0x10c>)
90009ecc:	f009 fbb4 	bl	90013638 <iprintf>
        pc->custom_free_function(p);
90009ed0:	68bb      	ldr	r3, [r7, #8]
90009ed2:	691b      	ldr	r3, [r3, #16]
90009ed4:	6878      	ldr	r0, [r7, #4]
90009ed6:	4798      	blx	r3
90009ed8:	e01d      	b.n	90009f16 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
90009eda:	7bfb      	ldrb	r3, [r7, #15]
90009edc:	2b02      	cmp	r3, #2
90009ede:	d104      	bne.n	90009eea <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
90009ee0:	6879      	ldr	r1, [r7, #4]
90009ee2:	200c      	movs	r0, #12
90009ee4:	f7ff f902 	bl	900090ec <memp_free>
90009ee8:	e015      	b.n	90009f16 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
90009eea:	7bfb      	ldrb	r3, [r7, #15]
90009eec:	2b01      	cmp	r3, #1
90009eee:	d104      	bne.n	90009efa <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
90009ef0:	6879      	ldr	r1, [r7, #4]
90009ef2:	200b      	movs	r0, #11
90009ef4:	f7ff f8fa 	bl	900090ec <memp_free>
90009ef8:	e00d      	b.n	90009f16 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
90009efa:	7bfb      	ldrb	r3, [r7, #15]
90009efc:	2b00      	cmp	r3, #0
90009efe:	d103      	bne.n	90009f08 <pbuf_free+0xd4>
          mem_free(p);
90009f00:	6878      	ldr	r0, [r7, #4]
90009f02:	f7fe fd35 	bl	90008970 <mem_free>
90009f06:	e006      	b.n	90009f16 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
90009f08:	4b0b      	ldr	r3, [pc, #44]	; (90009f38 <pbuf_free+0x104>)
90009f0a:	f240 320f 	movw	r2, #783	; 0x30f
90009f0e:	490f      	ldr	r1, [pc, #60]	; (90009f4c <pbuf_free+0x118>)
90009f10:	480b      	ldr	r0, [pc, #44]	; (90009f40 <pbuf_free+0x10c>)
90009f12:	f009 fb91 	bl	90013638 <iprintf>
        }
      }
      count++;
90009f16:	7ffb      	ldrb	r3, [r7, #31]
90009f18:	3301      	adds	r3, #1
90009f1a:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
90009f1c:	693b      	ldr	r3, [r7, #16]
90009f1e:	607b      	str	r3, [r7, #4]
90009f20:	e001      	b.n	90009f26 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
90009f22:	2300      	movs	r3, #0
90009f24:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
90009f26:	687b      	ldr	r3, [r7, #4]
90009f28:	2b00      	cmp	r3, #0
90009f2a:	d199      	bne.n	90009e60 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
90009f2c:	7ffb      	ldrb	r3, [r7, #31]
}
90009f2e:	4618      	mov	r0, r3
90009f30:	3720      	adds	r7, #32
90009f32:	46bd      	mov	sp, r7
90009f34:	bd80      	pop	{r7, pc}
90009f36:	bf00      	nop
90009f38:	90014e48 	.word	0x90014e48
90009f3c:	90014fac 	.word	0x90014fac
90009f40:	90014ea8 	.word	0x90014ea8
90009f44:	90014fd8 	.word	0x90014fd8
90009f48:	90014ff0 	.word	0x90014ff0
90009f4c:	90015014 	.word	0x90015014

90009f50 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
90009f50:	b480      	push	{r7}
90009f52:	b085      	sub	sp, #20
90009f54:	af00      	add	r7, sp, #0
90009f56:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
90009f58:	2300      	movs	r3, #0
90009f5a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
90009f5c:	e005      	b.n	90009f6a <pbuf_clen+0x1a>
    ++len;
90009f5e:	89fb      	ldrh	r3, [r7, #14]
90009f60:	3301      	adds	r3, #1
90009f62:	81fb      	strh	r3, [r7, #14]
    p = p->next;
90009f64:	687b      	ldr	r3, [r7, #4]
90009f66:	681b      	ldr	r3, [r3, #0]
90009f68:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
90009f6a:	687b      	ldr	r3, [r7, #4]
90009f6c:	2b00      	cmp	r3, #0
90009f6e:	d1f6      	bne.n	90009f5e <pbuf_clen+0xe>
  }
  return len;
90009f70:	89fb      	ldrh	r3, [r7, #14]
}
90009f72:	4618      	mov	r0, r3
90009f74:	3714      	adds	r7, #20
90009f76:	46bd      	mov	sp, r7
90009f78:	f85d 7b04 	ldr.w	r7, [sp], #4
90009f7c:	4770      	bx	lr
	...

90009f80 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
90009f80:	b580      	push	{r7, lr}
90009f82:	b084      	sub	sp, #16
90009f84:	af00      	add	r7, sp, #0
90009f86:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
90009f88:	687b      	ldr	r3, [r7, #4]
90009f8a:	2b00      	cmp	r3, #0
90009f8c:	d016      	beq.n	90009fbc <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
90009f8e:	f009 f95d 	bl	9001324c <sys_arch_protect>
90009f92:	60f8      	str	r0, [r7, #12]
90009f94:	687b      	ldr	r3, [r7, #4]
90009f96:	7b9b      	ldrb	r3, [r3, #14]
90009f98:	3301      	adds	r3, #1
90009f9a:	b2da      	uxtb	r2, r3
90009f9c:	687b      	ldr	r3, [r7, #4]
90009f9e:	739a      	strb	r2, [r3, #14]
90009fa0:	68f8      	ldr	r0, [r7, #12]
90009fa2:	f009 f961 	bl	90013268 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
90009fa6:	687b      	ldr	r3, [r7, #4]
90009fa8:	7b9b      	ldrb	r3, [r3, #14]
90009faa:	2b00      	cmp	r3, #0
90009fac:	d106      	bne.n	90009fbc <pbuf_ref+0x3c>
90009fae:	4b05      	ldr	r3, [pc, #20]	; (90009fc4 <pbuf_ref+0x44>)
90009fb0:	f240 3242 	movw	r2, #834	; 0x342
90009fb4:	4904      	ldr	r1, [pc, #16]	; (90009fc8 <pbuf_ref+0x48>)
90009fb6:	4805      	ldr	r0, [pc, #20]	; (90009fcc <pbuf_ref+0x4c>)
90009fb8:	f009 fb3e 	bl	90013638 <iprintf>
  }
}
90009fbc:	bf00      	nop
90009fbe:	3710      	adds	r7, #16
90009fc0:	46bd      	mov	sp, r7
90009fc2:	bd80      	pop	{r7, pc}
90009fc4:	90014e48 	.word	0x90014e48
90009fc8:	90015028 	.word	0x90015028
90009fcc:	90014ea8 	.word	0x90014ea8

90009fd0 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
90009fd0:	b580      	push	{r7, lr}
90009fd2:	b084      	sub	sp, #16
90009fd4:	af00      	add	r7, sp, #0
90009fd6:	6078      	str	r0, [r7, #4]
90009fd8:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
90009fda:	687b      	ldr	r3, [r7, #4]
90009fdc:	2b00      	cmp	r3, #0
90009fde:	d002      	beq.n	90009fe6 <pbuf_cat+0x16>
90009fe0:	683b      	ldr	r3, [r7, #0]
90009fe2:	2b00      	cmp	r3, #0
90009fe4:	d107      	bne.n	90009ff6 <pbuf_cat+0x26>
90009fe6:	4b20      	ldr	r3, [pc, #128]	; (9000a068 <pbuf_cat+0x98>)
90009fe8:	f240 3259 	movw	r2, #857	; 0x359
90009fec:	491f      	ldr	r1, [pc, #124]	; (9000a06c <pbuf_cat+0x9c>)
90009fee:	4820      	ldr	r0, [pc, #128]	; (9000a070 <pbuf_cat+0xa0>)
90009ff0:	f009 fb22 	bl	90013638 <iprintf>
90009ff4:	e034      	b.n	9000a060 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
90009ff6:	687b      	ldr	r3, [r7, #4]
90009ff8:	60fb      	str	r3, [r7, #12]
90009ffa:	e00a      	b.n	9000a012 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
90009ffc:	68fb      	ldr	r3, [r7, #12]
90009ffe:	891a      	ldrh	r2, [r3, #8]
9000a000:	683b      	ldr	r3, [r7, #0]
9000a002:	891b      	ldrh	r3, [r3, #8]
9000a004:	4413      	add	r3, r2
9000a006:	b29a      	uxth	r2, r3
9000a008:	68fb      	ldr	r3, [r7, #12]
9000a00a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
9000a00c:	68fb      	ldr	r3, [r7, #12]
9000a00e:	681b      	ldr	r3, [r3, #0]
9000a010:	60fb      	str	r3, [r7, #12]
9000a012:	68fb      	ldr	r3, [r7, #12]
9000a014:	681b      	ldr	r3, [r3, #0]
9000a016:	2b00      	cmp	r3, #0
9000a018:	d1f0      	bne.n	90009ffc <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
9000a01a:	68fb      	ldr	r3, [r7, #12]
9000a01c:	891a      	ldrh	r2, [r3, #8]
9000a01e:	68fb      	ldr	r3, [r7, #12]
9000a020:	895b      	ldrh	r3, [r3, #10]
9000a022:	429a      	cmp	r2, r3
9000a024:	d006      	beq.n	9000a034 <pbuf_cat+0x64>
9000a026:	4b10      	ldr	r3, [pc, #64]	; (9000a068 <pbuf_cat+0x98>)
9000a028:	f240 3262 	movw	r2, #866	; 0x362
9000a02c:	4911      	ldr	r1, [pc, #68]	; (9000a074 <pbuf_cat+0xa4>)
9000a02e:	4810      	ldr	r0, [pc, #64]	; (9000a070 <pbuf_cat+0xa0>)
9000a030:	f009 fb02 	bl	90013638 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
9000a034:	68fb      	ldr	r3, [r7, #12]
9000a036:	681b      	ldr	r3, [r3, #0]
9000a038:	2b00      	cmp	r3, #0
9000a03a:	d006      	beq.n	9000a04a <pbuf_cat+0x7a>
9000a03c:	4b0a      	ldr	r3, [pc, #40]	; (9000a068 <pbuf_cat+0x98>)
9000a03e:	f240 3263 	movw	r2, #867	; 0x363
9000a042:	490d      	ldr	r1, [pc, #52]	; (9000a078 <pbuf_cat+0xa8>)
9000a044:	480a      	ldr	r0, [pc, #40]	; (9000a070 <pbuf_cat+0xa0>)
9000a046:	f009 faf7 	bl	90013638 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
9000a04a:	68fb      	ldr	r3, [r7, #12]
9000a04c:	891a      	ldrh	r2, [r3, #8]
9000a04e:	683b      	ldr	r3, [r7, #0]
9000a050:	891b      	ldrh	r3, [r3, #8]
9000a052:	4413      	add	r3, r2
9000a054:	b29a      	uxth	r2, r3
9000a056:	68fb      	ldr	r3, [r7, #12]
9000a058:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
9000a05a:	68fb      	ldr	r3, [r7, #12]
9000a05c:	683a      	ldr	r2, [r7, #0]
9000a05e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
9000a060:	3710      	adds	r7, #16
9000a062:	46bd      	mov	sp, r7
9000a064:	bd80      	pop	{r7, pc}
9000a066:	bf00      	nop
9000a068:	90014e48 	.word	0x90014e48
9000a06c:	9001503c 	.word	0x9001503c
9000a070:	90014ea8 	.word	0x90014ea8
9000a074:	90015074 	.word	0x90015074
9000a078:	900150a4 	.word	0x900150a4

9000a07c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
9000a07c:	b580      	push	{r7, lr}
9000a07e:	b086      	sub	sp, #24
9000a080:	af00      	add	r7, sp, #0
9000a082:	6078      	str	r0, [r7, #4]
9000a084:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
9000a086:	2300      	movs	r3, #0
9000a088:	617b      	str	r3, [r7, #20]
9000a08a:	2300      	movs	r3, #0
9000a08c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
9000a08e:	687b      	ldr	r3, [r7, #4]
9000a090:	2b00      	cmp	r3, #0
9000a092:	d008      	beq.n	9000a0a6 <pbuf_copy+0x2a>
9000a094:	683b      	ldr	r3, [r7, #0]
9000a096:	2b00      	cmp	r3, #0
9000a098:	d005      	beq.n	9000a0a6 <pbuf_copy+0x2a>
9000a09a:	687b      	ldr	r3, [r7, #4]
9000a09c:	891a      	ldrh	r2, [r3, #8]
9000a09e:	683b      	ldr	r3, [r7, #0]
9000a0a0:	891b      	ldrh	r3, [r3, #8]
9000a0a2:	429a      	cmp	r2, r3
9000a0a4:	d209      	bcs.n	9000a0ba <pbuf_copy+0x3e>
9000a0a6:	4b57      	ldr	r3, [pc, #348]	; (9000a204 <pbuf_copy+0x188>)
9000a0a8:	f240 32c9 	movw	r2, #969	; 0x3c9
9000a0ac:	4956      	ldr	r1, [pc, #344]	; (9000a208 <pbuf_copy+0x18c>)
9000a0ae:	4857      	ldr	r0, [pc, #348]	; (9000a20c <pbuf_copy+0x190>)
9000a0b0:	f009 fac2 	bl	90013638 <iprintf>
9000a0b4:	f06f 030f 	mvn.w	r3, #15
9000a0b8:	e09f      	b.n	9000a1fa <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
9000a0ba:	687b      	ldr	r3, [r7, #4]
9000a0bc:	895b      	ldrh	r3, [r3, #10]
9000a0be:	461a      	mov	r2, r3
9000a0c0:	697b      	ldr	r3, [r7, #20]
9000a0c2:	1ad2      	subs	r2, r2, r3
9000a0c4:	683b      	ldr	r3, [r7, #0]
9000a0c6:	895b      	ldrh	r3, [r3, #10]
9000a0c8:	4619      	mov	r1, r3
9000a0ca:	693b      	ldr	r3, [r7, #16]
9000a0cc:	1acb      	subs	r3, r1, r3
9000a0ce:	429a      	cmp	r2, r3
9000a0d0:	d306      	bcc.n	9000a0e0 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
9000a0d2:	683b      	ldr	r3, [r7, #0]
9000a0d4:	895b      	ldrh	r3, [r3, #10]
9000a0d6:	461a      	mov	r2, r3
9000a0d8:	693b      	ldr	r3, [r7, #16]
9000a0da:	1ad3      	subs	r3, r2, r3
9000a0dc:	60fb      	str	r3, [r7, #12]
9000a0de:	e005      	b.n	9000a0ec <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
9000a0e0:	687b      	ldr	r3, [r7, #4]
9000a0e2:	895b      	ldrh	r3, [r3, #10]
9000a0e4:	461a      	mov	r2, r3
9000a0e6:	697b      	ldr	r3, [r7, #20]
9000a0e8:	1ad3      	subs	r3, r2, r3
9000a0ea:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
9000a0ec:	687b      	ldr	r3, [r7, #4]
9000a0ee:	685a      	ldr	r2, [r3, #4]
9000a0f0:	697b      	ldr	r3, [r7, #20]
9000a0f2:	18d0      	adds	r0, r2, r3
9000a0f4:	683b      	ldr	r3, [r7, #0]
9000a0f6:	685a      	ldr	r2, [r3, #4]
9000a0f8:	693b      	ldr	r3, [r7, #16]
9000a0fa:	4413      	add	r3, r2
9000a0fc:	68fa      	ldr	r2, [r7, #12]
9000a0fe:	4619      	mov	r1, r3
9000a100:	f009 f9ef 	bl	900134e2 <memcpy>
    offset_to += len;
9000a104:	697a      	ldr	r2, [r7, #20]
9000a106:	68fb      	ldr	r3, [r7, #12]
9000a108:	4413      	add	r3, r2
9000a10a:	617b      	str	r3, [r7, #20]
    offset_from += len;
9000a10c:	693a      	ldr	r2, [r7, #16]
9000a10e:	68fb      	ldr	r3, [r7, #12]
9000a110:	4413      	add	r3, r2
9000a112:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
9000a114:	687b      	ldr	r3, [r7, #4]
9000a116:	895b      	ldrh	r3, [r3, #10]
9000a118:	461a      	mov	r2, r3
9000a11a:	697b      	ldr	r3, [r7, #20]
9000a11c:	4293      	cmp	r3, r2
9000a11e:	d906      	bls.n	9000a12e <pbuf_copy+0xb2>
9000a120:	4b38      	ldr	r3, [pc, #224]	; (9000a204 <pbuf_copy+0x188>)
9000a122:	f240 32d9 	movw	r2, #985	; 0x3d9
9000a126:	493a      	ldr	r1, [pc, #232]	; (9000a210 <pbuf_copy+0x194>)
9000a128:	4838      	ldr	r0, [pc, #224]	; (9000a20c <pbuf_copy+0x190>)
9000a12a:	f009 fa85 	bl	90013638 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
9000a12e:	683b      	ldr	r3, [r7, #0]
9000a130:	895b      	ldrh	r3, [r3, #10]
9000a132:	461a      	mov	r2, r3
9000a134:	693b      	ldr	r3, [r7, #16]
9000a136:	4293      	cmp	r3, r2
9000a138:	d906      	bls.n	9000a148 <pbuf_copy+0xcc>
9000a13a:	4b32      	ldr	r3, [pc, #200]	; (9000a204 <pbuf_copy+0x188>)
9000a13c:	f240 32da 	movw	r2, #986	; 0x3da
9000a140:	4934      	ldr	r1, [pc, #208]	; (9000a214 <pbuf_copy+0x198>)
9000a142:	4832      	ldr	r0, [pc, #200]	; (9000a20c <pbuf_copy+0x190>)
9000a144:	f009 fa78 	bl	90013638 <iprintf>
    if (offset_from >= p_from->len) {
9000a148:	683b      	ldr	r3, [r7, #0]
9000a14a:	895b      	ldrh	r3, [r3, #10]
9000a14c:	461a      	mov	r2, r3
9000a14e:	693b      	ldr	r3, [r7, #16]
9000a150:	4293      	cmp	r3, r2
9000a152:	d304      	bcc.n	9000a15e <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
9000a154:	2300      	movs	r3, #0
9000a156:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
9000a158:	683b      	ldr	r3, [r7, #0]
9000a15a:	681b      	ldr	r3, [r3, #0]
9000a15c:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
9000a15e:	687b      	ldr	r3, [r7, #4]
9000a160:	895b      	ldrh	r3, [r3, #10]
9000a162:	461a      	mov	r2, r3
9000a164:	697b      	ldr	r3, [r7, #20]
9000a166:	4293      	cmp	r3, r2
9000a168:	d114      	bne.n	9000a194 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
9000a16a:	2300      	movs	r3, #0
9000a16c:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
9000a16e:	687b      	ldr	r3, [r7, #4]
9000a170:	681b      	ldr	r3, [r3, #0]
9000a172:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
9000a174:	687b      	ldr	r3, [r7, #4]
9000a176:	2b00      	cmp	r3, #0
9000a178:	d10c      	bne.n	9000a194 <pbuf_copy+0x118>
9000a17a:	683b      	ldr	r3, [r7, #0]
9000a17c:	2b00      	cmp	r3, #0
9000a17e:	d009      	beq.n	9000a194 <pbuf_copy+0x118>
9000a180:	4b20      	ldr	r3, [pc, #128]	; (9000a204 <pbuf_copy+0x188>)
9000a182:	f44f 7279 	mov.w	r2, #996	; 0x3e4
9000a186:	4924      	ldr	r1, [pc, #144]	; (9000a218 <pbuf_copy+0x19c>)
9000a188:	4820      	ldr	r0, [pc, #128]	; (9000a20c <pbuf_copy+0x190>)
9000a18a:	f009 fa55 	bl	90013638 <iprintf>
9000a18e:	f06f 030f 	mvn.w	r3, #15
9000a192:	e032      	b.n	9000a1fa <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
9000a194:	683b      	ldr	r3, [r7, #0]
9000a196:	2b00      	cmp	r3, #0
9000a198:	d013      	beq.n	9000a1c2 <pbuf_copy+0x146>
9000a19a:	683b      	ldr	r3, [r7, #0]
9000a19c:	895a      	ldrh	r2, [r3, #10]
9000a19e:	683b      	ldr	r3, [r7, #0]
9000a1a0:	891b      	ldrh	r3, [r3, #8]
9000a1a2:	429a      	cmp	r2, r3
9000a1a4:	d10d      	bne.n	9000a1c2 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
9000a1a6:	683b      	ldr	r3, [r7, #0]
9000a1a8:	681b      	ldr	r3, [r3, #0]
9000a1aa:	2b00      	cmp	r3, #0
9000a1ac:	d009      	beq.n	9000a1c2 <pbuf_copy+0x146>
9000a1ae:	4b15      	ldr	r3, [pc, #84]	; (9000a204 <pbuf_copy+0x188>)
9000a1b0:	f240 32e9 	movw	r2, #1001	; 0x3e9
9000a1b4:	4919      	ldr	r1, [pc, #100]	; (9000a21c <pbuf_copy+0x1a0>)
9000a1b6:	4815      	ldr	r0, [pc, #84]	; (9000a20c <pbuf_copy+0x190>)
9000a1b8:	f009 fa3e 	bl	90013638 <iprintf>
9000a1bc:	f06f 0305 	mvn.w	r3, #5
9000a1c0:	e01b      	b.n	9000a1fa <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
9000a1c2:	687b      	ldr	r3, [r7, #4]
9000a1c4:	2b00      	cmp	r3, #0
9000a1c6:	d013      	beq.n	9000a1f0 <pbuf_copy+0x174>
9000a1c8:	687b      	ldr	r3, [r7, #4]
9000a1ca:	895a      	ldrh	r2, [r3, #10]
9000a1cc:	687b      	ldr	r3, [r7, #4]
9000a1ce:	891b      	ldrh	r3, [r3, #8]
9000a1d0:	429a      	cmp	r2, r3
9000a1d2:	d10d      	bne.n	9000a1f0 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
9000a1d4:	687b      	ldr	r3, [r7, #4]
9000a1d6:	681b      	ldr	r3, [r3, #0]
9000a1d8:	2b00      	cmp	r3, #0
9000a1da:	d009      	beq.n	9000a1f0 <pbuf_copy+0x174>
9000a1dc:	4b09      	ldr	r3, [pc, #36]	; (9000a204 <pbuf_copy+0x188>)
9000a1de:	f240 32ee 	movw	r2, #1006	; 0x3ee
9000a1e2:	490e      	ldr	r1, [pc, #56]	; (9000a21c <pbuf_copy+0x1a0>)
9000a1e4:	4809      	ldr	r0, [pc, #36]	; (9000a20c <pbuf_copy+0x190>)
9000a1e6:	f009 fa27 	bl	90013638 <iprintf>
9000a1ea:	f06f 0305 	mvn.w	r3, #5
9000a1ee:	e004      	b.n	9000a1fa <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
9000a1f0:	683b      	ldr	r3, [r7, #0]
9000a1f2:	2b00      	cmp	r3, #0
9000a1f4:	f47f af61 	bne.w	9000a0ba <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
9000a1f8:	2300      	movs	r3, #0
}
9000a1fa:	4618      	mov	r0, r3
9000a1fc:	3718      	adds	r7, #24
9000a1fe:	46bd      	mov	sp, r7
9000a200:	bd80      	pop	{r7, pc}
9000a202:	bf00      	nop
9000a204:	90014e48 	.word	0x90014e48
9000a208:	900150f0 	.word	0x900150f0
9000a20c:	90014ea8 	.word	0x90014ea8
9000a210:	90015120 	.word	0x90015120
9000a214:	90015138 	.word	0x90015138
9000a218:	90015154 	.word	0x90015154
9000a21c:	90015164 	.word	0x90015164

9000a220 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
9000a220:	b580      	push	{r7, lr}
9000a222:	b088      	sub	sp, #32
9000a224:	af00      	add	r7, sp, #0
9000a226:	60f8      	str	r0, [r7, #12]
9000a228:	60b9      	str	r1, [r7, #8]
9000a22a:	4611      	mov	r1, r2
9000a22c:	461a      	mov	r2, r3
9000a22e:	460b      	mov	r3, r1
9000a230:	80fb      	strh	r3, [r7, #6]
9000a232:	4613      	mov	r3, r2
9000a234:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
9000a236:	2300      	movs	r3, #0
9000a238:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
9000a23a:	2300      	movs	r3, #0
9000a23c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
9000a23e:	68fb      	ldr	r3, [r7, #12]
9000a240:	2b00      	cmp	r3, #0
9000a242:	d108      	bne.n	9000a256 <pbuf_copy_partial+0x36>
9000a244:	4b2b      	ldr	r3, [pc, #172]	; (9000a2f4 <pbuf_copy_partial+0xd4>)
9000a246:	f240 420a 	movw	r2, #1034	; 0x40a
9000a24a:	492b      	ldr	r1, [pc, #172]	; (9000a2f8 <pbuf_copy_partial+0xd8>)
9000a24c:	482b      	ldr	r0, [pc, #172]	; (9000a2fc <pbuf_copy_partial+0xdc>)
9000a24e:	f009 f9f3 	bl	90013638 <iprintf>
9000a252:	2300      	movs	r3, #0
9000a254:	e04a      	b.n	9000a2ec <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
9000a256:	68bb      	ldr	r3, [r7, #8]
9000a258:	2b00      	cmp	r3, #0
9000a25a:	d108      	bne.n	9000a26e <pbuf_copy_partial+0x4e>
9000a25c:	4b25      	ldr	r3, [pc, #148]	; (9000a2f4 <pbuf_copy_partial+0xd4>)
9000a25e:	f240 420b 	movw	r2, #1035	; 0x40b
9000a262:	4927      	ldr	r1, [pc, #156]	; (9000a300 <pbuf_copy_partial+0xe0>)
9000a264:	4825      	ldr	r0, [pc, #148]	; (9000a2fc <pbuf_copy_partial+0xdc>)
9000a266:	f009 f9e7 	bl	90013638 <iprintf>
9000a26a:	2300      	movs	r3, #0
9000a26c:	e03e      	b.n	9000a2ec <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
9000a26e:	68fb      	ldr	r3, [r7, #12]
9000a270:	61fb      	str	r3, [r7, #28]
9000a272:	e034      	b.n	9000a2de <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
9000a274:	88bb      	ldrh	r3, [r7, #4]
9000a276:	2b00      	cmp	r3, #0
9000a278:	d00a      	beq.n	9000a290 <pbuf_copy_partial+0x70>
9000a27a:	69fb      	ldr	r3, [r7, #28]
9000a27c:	895b      	ldrh	r3, [r3, #10]
9000a27e:	88ba      	ldrh	r2, [r7, #4]
9000a280:	429a      	cmp	r2, r3
9000a282:	d305      	bcc.n	9000a290 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
9000a284:	69fb      	ldr	r3, [r7, #28]
9000a286:	895b      	ldrh	r3, [r3, #10]
9000a288:	88ba      	ldrh	r2, [r7, #4]
9000a28a:	1ad3      	subs	r3, r2, r3
9000a28c:	80bb      	strh	r3, [r7, #4]
9000a28e:	e023      	b.n	9000a2d8 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
9000a290:	69fb      	ldr	r3, [r7, #28]
9000a292:	895a      	ldrh	r2, [r3, #10]
9000a294:	88bb      	ldrh	r3, [r7, #4]
9000a296:	1ad3      	subs	r3, r2, r3
9000a298:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
9000a29a:	8b3a      	ldrh	r2, [r7, #24]
9000a29c:	88fb      	ldrh	r3, [r7, #6]
9000a29e:	429a      	cmp	r2, r3
9000a2a0:	d901      	bls.n	9000a2a6 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
9000a2a2:	88fb      	ldrh	r3, [r7, #6]
9000a2a4:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
9000a2a6:	8b7b      	ldrh	r3, [r7, #26]
9000a2a8:	68ba      	ldr	r2, [r7, #8]
9000a2aa:	18d0      	adds	r0, r2, r3
9000a2ac:	69fb      	ldr	r3, [r7, #28]
9000a2ae:	685a      	ldr	r2, [r3, #4]
9000a2b0:	88bb      	ldrh	r3, [r7, #4]
9000a2b2:	4413      	add	r3, r2
9000a2b4:	8b3a      	ldrh	r2, [r7, #24]
9000a2b6:	4619      	mov	r1, r3
9000a2b8:	f009 f913 	bl	900134e2 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
9000a2bc:	8afa      	ldrh	r2, [r7, #22]
9000a2be:	8b3b      	ldrh	r3, [r7, #24]
9000a2c0:	4413      	add	r3, r2
9000a2c2:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
9000a2c4:	8b7a      	ldrh	r2, [r7, #26]
9000a2c6:	8b3b      	ldrh	r3, [r7, #24]
9000a2c8:	4413      	add	r3, r2
9000a2ca:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
9000a2cc:	88fa      	ldrh	r2, [r7, #6]
9000a2ce:	8b3b      	ldrh	r3, [r7, #24]
9000a2d0:	1ad3      	subs	r3, r2, r3
9000a2d2:	80fb      	strh	r3, [r7, #6]
      offset = 0;
9000a2d4:	2300      	movs	r3, #0
9000a2d6:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
9000a2d8:	69fb      	ldr	r3, [r7, #28]
9000a2da:	681b      	ldr	r3, [r3, #0]
9000a2dc:	61fb      	str	r3, [r7, #28]
9000a2de:	88fb      	ldrh	r3, [r7, #6]
9000a2e0:	2b00      	cmp	r3, #0
9000a2e2:	d002      	beq.n	9000a2ea <pbuf_copy_partial+0xca>
9000a2e4:	69fb      	ldr	r3, [r7, #28]
9000a2e6:	2b00      	cmp	r3, #0
9000a2e8:	d1c4      	bne.n	9000a274 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
9000a2ea:	8afb      	ldrh	r3, [r7, #22]
}
9000a2ec:	4618      	mov	r0, r3
9000a2ee:	3720      	adds	r7, #32
9000a2f0:	46bd      	mov	sp, r7
9000a2f2:	bd80      	pop	{r7, pc}
9000a2f4:	90014e48 	.word	0x90014e48
9000a2f8:	90015190 	.word	0x90015190
9000a2fc:	90014ea8 	.word	0x90014ea8
9000a300:	900151b0 	.word	0x900151b0

9000a304 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
9000a304:	b580      	push	{r7, lr}
9000a306:	b084      	sub	sp, #16
9000a308:	af00      	add	r7, sp, #0
9000a30a:	4603      	mov	r3, r0
9000a30c:	603a      	str	r2, [r7, #0]
9000a30e:	71fb      	strb	r3, [r7, #7]
9000a310:	460b      	mov	r3, r1
9000a312:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
9000a314:	683b      	ldr	r3, [r7, #0]
9000a316:	8919      	ldrh	r1, [r3, #8]
9000a318:	88ba      	ldrh	r2, [r7, #4]
9000a31a:	79fb      	ldrb	r3, [r7, #7]
9000a31c:	4618      	mov	r0, r3
9000a31e:	f7ff faa5 	bl	9000986c <pbuf_alloc>
9000a322:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
9000a324:	68fb      	ldr	r3, [r7, #12]
9000a326:	2b00      	cmp	r3, #0
9000a328:	d101      	bne.n	9000a32e <pbuf_clone+0x2a>
    return NULL;
9000a32a:	2300      	movs	r3, #0
9000a32c:	e011      	b.n	9000a352 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
9000a32e:	6839      	ldr	r1, [r7, #0]
9000a330:	68f8      	ldr	r0, [r7, #12]
9000a332:	f7ff fea3 	bl	9000a07c <pbuf_copy>
9000a336:	4603      	mov	r3, r0
9000a338:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
9000a33a:	f997 300b 	ldrsb.w	r3, [r7, #11]
9000a33e:	2b00      	cmp	r3, #0
9000a340:	d006      	beq.n	9000a350 <pbuf_clone+0x4c>
9000a342:	4b06      	ldr	r3, [pc, #24]	; (9000a35c <pbuf_clone+0x58>)
9000a344:	f240 5224 	movw	r2, #1316	; 0x524
9000a348:	4905      	ldr	r1, [pc, #20]	; (9000a360 <pbuf_clone+0x5c>)
9000a34a:	4806      	ldr	r0, [pc, #24]	; (9000a364 <pbuf_clone+0x60>)
9000a34c:	f009 f974 	bl	90013638 <iprintf>
  return q;
9000a350:	68fb      	ldr	r3, [r7, #12]
}
9000a352:	4618      	mov	r0, r3
9000a354:	3710      	adds	r7, #16
9000a356:	46bd      	mov	sp, r7
9000a358:	bd80      	pop	{r7, pc}
9000a35a:	bf00      	nop
9000a35c:	90014e48 	.word	0x90014e48
9000a360:	900152bc 	.word	0x900152bc
9000a364:	90014ea8 	.word	0x90014ea8

9000a368 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
9000a368:	b580      	push	{r7, lr}
9000a36a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
9000a36c:	f009 f97c 	bl	90013668 <rand>
9000a370:	4603      	mov	r3, r0
9000a372:	b29b      	uxth	r3, r3
9000a374:	f3c3 030d 	ubfx	r3, r3, #0, #14
9000a378:	b29b      	uxth	r3, r3
9000a37a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
9000a37e:	b29a      	uxth	r2, r3
9000a380:	4b01      	ldr	r3, [pc, #4]	; (9000a388 <tcp_init+0x20>)
9000a382:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
9000a384:	bf00      	nop
9000a386:	bd80      	pop	{r7, pc}
9000a388:	24000028 	.word	0x24000028

9000a38c <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
9000a38c:	b580      	push	{r7, lr}
9000a38e:	b082      	sub	sp, #8
9000a390:	af00      	add	r7, sp, #0
9000a392:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
9000a394:	687b      	ldr	r3, [r7, #4]
9000a396:	7d1b      	ldrb	r3, [r3, #20]
9000a398:	2b01      	cmp	r3, #1
9000a39a:	d105      	bne.n	9000a3a8 <tcp_free+0x1c>
9000a39c:	4b06      	ldr	r3, [pc, #24]	; (9000a3b8 <tcp_free+0x2c>)
9000a39e:	22d4      	movs	r2, #212	; 0xd4
9000a3a0:	4906      	ldr	r1, [pc, #24]	; (9000a3bc <tcp_free+0x30>)
9000a3a2:	4807      	ldr	r0, [pc, #28]	; (9000a3c0 <tcp_free+0x34>)
9000a3a4:	f009 f948 	bl	90013638 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
9000a3a8:	6879      	ldr	r1, [r7, #4]
9000a3aa:	2001      	movs	r0, #1
9000a3ac:	f7fe fe9e 	bl	900090ec <memp_free>
}
9000a3b0:	bf00      	nop
9000a3b2:	3708      	adds	r7, #8
9000a3b4:	46bd      	mov	sp, r7
9000a3b6:	bd80      	pop	{r7, pc}
9000a3b8:	90015348 	.word	0x90015348
9000a3bc:	90015378 	.word	0x90015378
9000a3c0:	9001538c 	.word	0x9001538c

9000a3c4 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
9000a3c4:	b580      	push	{r7, lr}
9000a3c6:	b082      	sub	sp, #8
9000a3c8:	af00      	add	r7, sp, #0
9000a3ca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
9000a3cc:	687b      	ldr	r3, [r7, #4]
9000a3ce:	7d1b      	ldrb	r3, [r3, #20]
9000a3d0:	2b01      	cmp	r3, #1
9000a3d2:	d105      	bne.n	9000a3e0 <tcp_free_listen+0x1c>
9000a3d4:	4b06      	ldr	r3, [pc, #24]	; (9000a3f0 <tcp_free_listen+0x2c>)
9000a3d6:	22df      	movs	r2, #223	; 0xdf
9000a3d8:	4906      	ldr	r1, [pc, #24]	; (9000a3f4 <tcp_free_listen+0x30>)
9000a3da:	4807      	ldr	r0, [pc, #28]	; (9000a3f8 <tcp_free_listen+0x34>)
9000a3dc:	f009 f92c 	bl	90013638 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
9000a3e0:	6879      	ldr	r1, [r7, #4]
9000a3e2:	2002      	movs	r0, #2
9000a3e4:	f7fe fe82 	bl	900090ec <memp_free>
}
9000a3e8:	bf00      	nop
9000a3ea:	3708      	adds	r7, #8
9000a3ec:	46bd      	mov	sp, r7
9000a3ee:	bd80      	pop	{r7, pc}
9000a3f0:	90015348 	.word	0x90015348
9000a3f4:	900153b4 	.word	0x900153b4
9000a3f8:	9001538c 	.word	0x9001538c

9000a3fc <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
9000a3fc:	b580      	push	{r7, lr}
9000a3fe:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
9000a400:	f001 f85c 	bl	9000b4bc <tcp_fasttmr>

  if (++tcp_timer & 1) {
9000a404:	4b07      	ldr	r3, [pc, #28]	; (9000a424 <tcp_tmr+0x28>)
9000a406:	781b      	ldrb	r3, [r3, #0]
9000a408:	3301      	adds	r3, #1
9000a40a:	b2da      	uxtb	r2, r3
9000a40c:	4b05      	ldr	r3, [pc, #20]	; (9000a424 <tcp_tmr+0x28>)
9000a40e:	701a      	strb	r2, [r3, #0]
9000a410:	4b04      	ldr	r3, [pc, #16]	; (9000a424 <tcp_tmr+0x28>)
9000a412:	781b      	ldrb	r3, [r3, #0]
9000a414:	f003 0301 	and.w	r3, r3, #1
9000a418:	2b00      	cmp	r3, #0
9000a41a:	d001      	beq.n	9000a420 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
9000a41c:	f000 fd0e 	bl	9000ae3c <tcp_slowtmr>
  }
}
9000a420:	bf00      	nop
9000a422:	bd80      	pop	{r7, pc}
9000a424:	24011035 	.word	0x24011035

9000a428 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
9000a428:	b580      	push	{r7, lr}
9000a42a:	b084      	sub	sp, #16
9000a42c:	af00      	add	r7, sp, #0
9000a42e:	6078      	str	r0, [r7, #4]
9000a430:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
9000a432:	683b      	ldr	r3, [r7, #0]
9000a434:	2b00      	cmp	r3, #0
9000a436:	d105      	bne.n	9000a444 <tcp_remove_listener+0x1c>
9000a438:	4b0d      	ldr	r3, [pc, #52]	; (9000a470 <tcp_remove_listener+0x48>)
9000a43a:	22ff      	movs	r2, #255	; 0xff
9000a43c:	490d      	ldr	r1, [pc, #52]	; (9000a474 <tcp_remove_listener+0x4c>)
9000a43e:	480e      	ldr	r0, [pc, #56]	; (9000a478 <tcp_remove_listener+0x50>)
9000a440:	f009 f8fa 	bl	90013638 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
9000a444:	687b      	ldr	r3, [r7, #4]
9000a446:	60fb      	str	r3, [r7, #12]
9000a448:	e00a      	b.n	9000a460 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
9000a44a:	68fb      	ldr	r3, [r7, #12]
9000a44c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
9000a44e:	683a      	ldr	r2, [r7, #0]
9000a450:	429a      	cmp	r2, r3
9000a452:	d102      	bne.n	9000a45a <tcp_remove_listener+0x32>
      pcb->listener = NULL;
9000a454:	68fb      	ldr	r3, [r7, #12]
9000a456:	2200      	movs	r2, #0
9000a458:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
9000a45a:	68fb      	ldr	r3, [r7, #12]
9000a45c:	68db      	ldr	r3, [r3, #12]
9000a45e:	60fb      	str	r3, [r7, #12]
9000a460:	68fb      	ldr	r3, [r7, #12]
9000a462:	2b00      	cmp	r3, #0
9000a464:	d1f1      	bne.n	9000a44a <tcp_remove_listener+0x22>
    }
  }
}
9000a466:	bf00      	nop
9000a468:	bf00      	nop
9000a46a:	3710      	adds	r7, #16
9000a46c:	46bd      	mov	sp, r7
9000a46e:	bd80      	pop	{r7, pc}
9000a470:	90015348 	.word	0x90015348
9000a474:	900153d0 	.word	0x900153d0
9000a478:	9001538c 	.word	0x9001538c

9000a47c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
9000a47c:	b580      	push	{r7, lr}
9000a47e:	b084      	sub	sp, #16
9000a480:	af00      	add	r7, sp, #0
9000a482:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
9000a484:	687b      	ldr	r3, [r7, #4]
9000a486:	2b00      	cmp	r3, #0
9000a488:	d106      	bne.n	9000a498 <tcp_listen_closed+0x1c>
9000a48a:	4b14      	ldr	r3, [pc, #80]	; (9000a4dc <tcp_listen_closed+0x60>)
9000a48c:	f240 1211 	movw	r2, #273	; 0x111
9000a490:	4913      	ldr	r1, [pc, #76]	; (9000a4e0 <tcp_listen_closed+0x64>)
9000a492:	4814      	ldr	r0, [pc, #80]	; (9000a4e4 <tcp_listen_closed+0x68>)
9000a494:	f009 f8d0 	bl	90013638 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
9000a498:	687b      	ldr	r3, [r7, #4]
9000a49a:	7d1b      	ldrb	r3, [r3, #20]
9000a49c:	2b01      	cmp	r3, #1
9000a49e:	d006      	beq.n	9000a4ae <tcp_listen_closed+0x32>
9000a4a0:	4b0e      	ldr	r3, [pc, #56]	; (9000a4dc <tcp_listen_closed+0x60>)
9000a4a2:	f44f 7289 	mov.w	r2, #274	; 0x112
9000a4a6:	4910      	ldr	r1, [pc, #64]	; (9000a4e8 <tcp_listen_closed+0x6c>)
9000a4a8:	480e      	ldr	r0, [pc, #56]	; (9000a4e4 <tcp_listen_closed+0x68>)
9000a4aa:	f009 f8c5 	bl	90013638 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
9000a4ae:	2301      	movs	r3, #1
9000a4b0:	60fb      	str	r3, [r7, #12]
9000a4b2:	e00b      	b.n	9000a4cc <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
9000a4b4:	4a0d      	ldr	r2, [pc, #52]	; (9000a4ec <tcp_listen_closed+0x70>)
9000a4b6:	68fb      	ldr	r3, [r7, #12]
9000a4b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
9000a4bc:	681b      	ldr	r3, [r3, #0]
9000a4be:	6879      	ldr	r1, [r7, #4]
9000a4c0:	4618      	mov	r0, r3
9000a4c2:	f7ff ffb1 	bl	9000a428 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
9000a4c6:	68fb      	ldr	r3, [r7, #12]
9000a4c8:	3301      	adds	r3, #1
9000a4ca:	60fb      	str	r3, [r7, #12]
9000a4cc:	68fb      	ldr	r3, [r7, #12]
9000a4ce:	2b03      	cmp	r3, #3
9000a4d0:	d9f0      	bls.n	9000a4b4 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
9000a4d2:	bf00      	nop
9000a4d4:	bf00      	nop
9000a4d6:	3710      	adds	r7, #16
9000a4d8:	46bd      	mov	sp, r7
9000a4da:	bd80      	pop	{r7, pc}
9000a4dc:	90015348 	.word	0x90015348
9000a4e0:	900153f8 	.word	0x900153f8
9000a4e4:	9001538c 	.word	0x9001538c
9000a4e8:	90015404 	.word	0x90015404
9000a4ec:	900174a8 	.word	0x900174a8

9000a4f0 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
9000a4f0:	b5b0      	push	{r4, r5, r7, lr}
9000a4f2:	b088      	sub	sp, #32
9000a4f4:	af04      	add	r7, sp, #16
9000a4f6:	6078      	str	r0, [r7, #4]
9000a4f8:	460b      	mov	r3, r1
9000a4fa:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
9000a4fc:	687b      	ldr	r3, [r7, #4]
9000a4fe:	2b00      	cmp	r3, #0
9000a500:	d106      	bne.n	9000a510 <tcp_close_shutdown+0x20>
9000a502:	4b63      	ldr	r3, [pc, #396]	; (9000a690 <tcp_close_shutdown+0x1a0>)
9000a504:	f44f 72af 	mov.w	r2, #350	; 0x15e
9000a508:	4962      	ldr	r1, [pc, #392]	; (9000a694 <tcp_close_shutdown+0x1a4>)
9000a50a:	4863      	ldr	r0, [pc, #396]	; (9000a698 <tcp_close_shutdown+0x1a8>)
9000a50c:	f009 f894 	bl	90013638 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
9000a510:	78fb      	ldrb	r3, [r7, #3]
9000a512:	2b00      	cmp	r3, #0
9000a514:	d066      	beq.n	9000a5e4 <tcp_close_shutdown+0xf4>
9000a516:	687b      	ldr	r3, [r7, #4]
9000a518:	7d1b      	ldrb	r3, [r3, #20]
9000a51a:	2b04      	cmp	r3, #4
9000a51c:	d003      	beq.n	9000a526 <tcp_close_shutdown+0x36>
9000a51e:	687b      	ldr	r3, [r7, #4]
9000a520:	7d1b      	ldrb	r3, [r3, #20]
9000a522:	2b07      	cmp	r3, #7
9000a524:	d15e      	bne.n	9000a5e4 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
9000a526:	687b      	ldr	r3, [r7, #4]
9000a528:	6f9b      	ldr	r3, [r3, #120]	; 0x78
9000a52a:	2b00      	cmp	r3, #0
9000a52c:	d104      	bne.n	9000a538 <tcp_close_shutdown+0x48>
9000a52e:	687b      	ldr	r3, [r7, #4]
9000a530:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
9000a532:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
9000a536:	d055      	beq.n	9000a5e4 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
9000a538:	687b      	ldr	r3, [r7, #4]
9000a53a:	8b5b      	ldrh	r3, [r3, #26]
9000a53c:	f003 0310 	and.w	r3, r3, #16
9000a540:	2b00      	cmp	r3, #0
9000a542:	d106      	bne.n	9000a552 <tcp_close_shutdown+0x62>
9000a544:	4b52      	ldr	r3, [pc, #328]	; (9000a690 <tcp_close_shutdown+0x1a0>)
9000a546:	f44f 72b2 	mov.w	r2, #356	; 0x164
9000a54a:	4954      	ldr	r1, [pc, #336]	; (9000a69c <tcp_close_shutdown+0x1ac>)
9000a54c:	4852      	ldr	r0, [pc, #328]	; (9000a698 <tcp_close_shutdown+0x1a8>)
9000a54e:	f009 f873 	bl	90013638 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
9000a552:	687b      	ldr	r3, [r7, #4]
9000a554:	6d18      	ldr	r0, [r3, #80]	; 0x50
9000a556:	687b      	ldr	r3, [r7, #4]
9000a558:	6a5c      	ldr	r4, [r3, #36]	; 0x24
9000a55a:	687d      	ldr	r5, [r7, #4]
9000a55c:	687b      	ldr	r3, [r7, #4]
9000a55e:	3304      	adds	r3, #4
9000a560:	687a      	ldr	r2, [r7, #4]
9000a562:	8ad2      	ldrh	r2, [r2, #22]
9000a564:	6879      	ldr	r1, [r7, #4]
9000a566:	8b09      	ldrh	r1, [r1, #24]
9000a568:	9102      	str	r1, [sp, #8]
9000a56a:	9201      	str	r2, [sp, #4]
9000a56c:	9300      	str	r3, [sp, #0]
9000a56e:	462b      	mov	r3, r5
9000a570:	4622      	mov	r2, r4
9000a572:	4601      	mov	r1, r0
9000a574:	6878      	ldr	r0, [r7, #4]
9000a576:	f005 fd8f 	bl	90010098 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
9000a57a:	6878      	ldr	r0, [r7, #4]
9000a57c:	f001 fb6c 	bl	9000bc58 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
9000a580:	4b47      	ldr	r3, [pc, #284]	; (9000a6a0 <tcp_close_shutdown+0x1b0>)
9000a582:	681b      	ldr	r3, [r3, #0]
9000a584:	687a      	ldr	r2, [r7, #4]
9000a586:	429a      	cmp	r2, r3
9000a588:	d105      	bne.n	9000a596 <tcp_close_shutdown+0xa6>
9000a58a:	4b45      	ldr	r3, [pc, #276]	; (9000a6a0 <tcp_close_shutdown+0x1b0>)
9000a58c:	681b      	ldr	r3, [r3, #0]
9000a58e:	68db      	ldr	r3, [r3, #12]
9000a590:	4a43      	ldr	r2, [pc, #268]	; (9000a6a0 <tcp_close_shutdown+0x1b0>)
9000a592:	6013      	str	r3, [r2, #0]
9000a594:	e013      	b.n	9000a5be <tcp_close_shutdown+0xce>
9000a596:	4b42      	ldr	r3, [pc, #264]	; (9000a6a0 <tcp_close_shutdown+0x1b0>)
9000a598:	681b      	ldr	r3, [r3, #0]
9000a59a:	60fb      	str	r3, [r7, #12]
9000a59c:	e00c      	b.n	9000a5b8 <tcp_close_shutdown+0xc8>
9000a59e:	68fb      	ldr	r3, [r7, #12]
9000a5a0:	68db      	ldr	r3, [r3, #12]
9000a5a2:	687a      	ldr	r2, [r7, #4]
9000a5a4:	429a      	cmp	r2, r3
9000a5a6:	d104      	bne.n	9000a5b2 <tcp_close_shutdown+0xc2>
9000a5a8:	687b      	ldr	r3, [r7, #4]
9000a5aa:	68da      	ldr	r2, [r3, #12]
9000a5ac:	68fb      	ldr	r3, [r7, #12]
9000a5ae:	60da      	str	r2, [r3, #12]
9000a5b0:	e005      	b.n	9000a5be <tcp_close_shutdown+0xce>
9000a5b2:	68fb      	ldr	r3, [r7, #12]
9000a5b4:	68db      	ldr	r3, [r3, #12]
9000a5b6:	60fb      	str	r3, [r7, #12]
9000a5b8:	68fb      	ldr	r3, [r7, #12]
9000a5ba:	2b00      	cmp	r3, #0
9000a5bc:	d1ef      	bne.n	9000a59e <tcp_close_shutdown+0xae>
9000a5be:	687b      	ldr	r3, [r7, #4]
9000a5c0:	2200      	movs	r2, #0
9000a5c2:	60da      	str	r2, [r3, #12]
9000a5c4:	4b37      	ldr	r3, [pc, #220]	; (9000a6a4 <tcp_close_shutdown+0x1b4>)
9000a5c6:	2201      	movs	r2, #1
9000a5c8:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
9000a5ca:	4b37      	ldr	r3, [pc, #220]	; (9000a6a8 <tcp_close_shutdown+0x1b8>)
9000a5cc:	681b      	ldr	r3, [r3, #0]
9000a5ce:	687a      	ldr	r2, [r7, #4]
9000a5d0:	429a      	cmp	r2, r3
9000a5d2:	d102      	bne.n	9000a5da <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
9000a5d4:	f004 f804 	bl	9000e5e0 <tcp_trigger_input_pcb_close>
9000a5d8:	e002      	b.n	9000a5e0 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
9000a5da:	6878      	ldr	r0, [r7, #4]
9000a5dc:	f7ff fed6 	bl	9000a38c <tcp_free>
      }
      return ERR_OK;
9000a5e0:	2300      	movs	r3, #0
9000a5e2:	e050      	b.n	9000a686 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
9000a5e4:	687b      	ldr	r3, [r7, #4]
9000a5e6:	7d1b      	ldrb	r3, [r3, #20]
9000a5e8:	2b02      	cmp	r3, #2
9000a5ea:	d03b      	beq.n	9000a664 <tcp_close_shutdown+0x174>
9000a5ec:	2b02      	cmp	r3, #2
9000a5ee:	dc44      	bgt.n	9000a67a <tcp_close_shutdown+0x18a>
9000a5f0:	2b00      	cmp	r3, #0
9000a5f2:	d002      	beq.n	9000a5fa <tcp_close_shutdown+0x10a>
9000a5f4:	2b01      	cmp	r3, #1
9000a5f6:	d02a      	beq.n	9000a64e <tcp_close_shutdown+0x15e>
9000a5f8:	e03f      	b.n	9000a67a <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
9000a5fa:	687b      	ldr	r3, [r7, #4]
9000a5fc:	8adb      	ldrh	r3, [r3, #22]
9000a5fe:	2b00      	cmp	r3, #0
9000a600:	d021      	beq.n	9000a646 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
9000a602:	4b2a      	ldr	r3, [pc, #168]	; (9000a6ac <tcp_close_shutdown+0x1bc>)
9000a604:	681b      	ldr	r3, [r3, #0]
9000a606:	687a      	ldr	r2, [r7, #4]
9000a608:	429a      	cmp	r2, r3
9000a60a:	d105      	bne.n	9000a618 <tcp_close_shutdown+0x128>
9000a60c:	4b27      	ldr	r3, [pc, #156]	; (9000a6ac <tcp_close_shutdown+0x1bc>)
9000a60e:	681b      	ldr	r3, [r3, #0]
9000a610:	68db      	ldr	r3, [r3, #12]
9000a612:	4a26      	ldr	r2, [pc, #152]	; (9000a6ac <tcp_close_shutdown+0x1bc>)
9000a614:	6013      	str	r3, [r2, #0]
9000a616:	e013      	b.n	9000a640 <tcp_close_shutdown+0x150>
9000a618:	4b24      	ldr	r3, [pc, #144]	; (9000a6ac <tcp_close_shutdown+0x1bc>)
9000a61a:	681b      	ldr	r3, [r3, #0]
9000a61c:	60bb      	str	r3, [r7, #8]
9000a61e:	e00c      	b.n	9000a63a <tcp_close_shutdown+0x14a>
9000a620:	68bb      	ldr	r3, [r7, #8]
9000a622:	68db      	ldr	r3, [r3, #12]
9000a624:	687a      	ldr	r2, [r7, #4]
9000a626:	429a      	cmp	r2, r3
9000a628:	d104      	bne.n	9000a634 <tcp_close_shutdown+0x144>
9000a62a:	687b      	ldr	r3, [r7, #4]
9000a62c:	68da      	ldr	r2, [r3, #12]
9000a62e:	68bb      	ldr	r3, [r7, #8]
9000a630:	60da      	str	r2, [r3, #12]
9000a632:	e005      	b.n	9000a640 <tcp_close_shutdown+0x150>
9000a634:	68bb      	ldr	r3, [r7, #8]
9000a636:	68db      	ldr	r3, [r3, #12]
9000a638:	60bb      	str	r3, [r7, #8]
9000a63a:	68bb      	ldr	r3, [r7, #8]
9000a63c:	2b00      	cmp	r3, #0
9000a63e:	d1ef      	bne.n	9000a620 <tcp_close_shutdown+0x130>
9000a640:	687b      	ldr	r3, [r7, #4]
9000a642:	2200      	movs	r2, #0
9000a644:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
9000a646:	6878      	ldr	r0, [r7, #4]
9000a648:	f7ff fea0 	bl	9000a38c <tcp_free>
      break;
9000a64c:	e01a      	b.n	9000a684 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
9000a64e:	6878      	ldr	r0, [r7, #4]
9000a650:	f7ff ff14 	bl	9000a47c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
9000a654:	6879      	ldr	r1, [r7, #4]
9000a656:	4816      	ldr	r0, [pc, #88]	; (9000a6b0 <tcp_close_shutdown+0x1c0>)
9000a658:	f001 fb4e 	bl	9000bcf8 <tcp_pcb_remove>
      tcp_free_listen(pcb);
9000a65c:	6878      	ldr	r0, [r7, #4]
9000a65e:	f7ff feb1 	bl	9000a3c4 <tcp_free_listen>
      break;
9000a662:	e00f      	b.n	9000a684 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
9000a664:	6879      	ldr	r1, [r7, #4]
9000a666:	480e      	ldr	r0, [pc, #56]	; (9000a6a0 <tcp_close_shutdown+0x1b0>)
9000a668:	f001 fb46 	bl	9000bcf8 <tcp_pcb_remove>
9000a66c:	4b0d      	ldr	r3, [pc, #52]	; (9000a6a4 <tcp_close_shutdown+0x1b4>)
9000a66e:	2201      	movs	r2, #1
9000a670:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
9000a672:	6878      	ldr	r0, [r7, #4]
9000a674:	f7ff fe8a 	bl	9000a38c <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
9000a678:	e004      	b.n	9000a684 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
9000a67a:	6878      	ldr	r0, [r7, #4]
9000a67c:	f000 f81a 	bl	9000a6b4 <tcp_close_shutdown_fin>
9000a680:	4603      	mov	r3, r0
9000a682:	e000      	b.n	9000a686 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
9000a684:	2300      	movs	r3, #0
}
9000a686:	4618      	mov	r0, r3
9000a688:	3710      	adds	r7, #16
9000a68a:	46bd      	mov	sp, r7
9000a68c:	bdb0      	pop	{r4, r5, r7, pc}
9000a68e:	bf00      	nop
9000a690:	90015348 	.word	0x90015348
9000a694:	9001541c 	.word	0x9001541c
9000a698:	9001538c 	.word	0x9001538c
9000a69c:	9001543c 	.word	0x9001543c
9000a6a0:	2401102c 	.word	0x2401102c
9000a6a4:	24011034 	.word	0x24011034
9000a6a8:	2401106c 	.word	0x2401106c
9000a6ac:	24011024 	.word	0x24011024
9000a6b0:	24011028 	.word	0x24011028

9000a6b4 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
9000a6b4:	b580      	push	{r7, lr}
9000a6b6:	b084      	sub	sp, #16
9000a6b8:	af00      	add	r7, sp, #0
9000a6ba:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
9000a6bc:	687b      	ldr	r3, [r7, #4]
9000a6be:	2b00      	cmp	r3, #0
9000a6c0:	d106      	bne.n	9000a6d0 <tcp_close_shutdown_fin+0x1c>
9000a6c2:	4b2e      	ldr	r3, [pc, #184]	; (9000a77c <tcp_close_shutdown_fin+0xc8>)
9000a6c4:	f44f 72ce 	mov.w	r2, #412	; 0x19c
9000a6c8:	492d      	ldr	r1, [pc, #180]	; (9000a780 <tcp_close_shutdown_fin+0xcc>)
9000a6ca:	482e      	ldr	r0, [pc, #184]	; (9000a784 <tcp_close_shutdown_fin+0xd0>)
9000a6cc:	f008 ffb4 	bl	90013638 <iprintf>

  switch (pcb->state) {
9000a6d0:	687b      	ldr	r3, [r7, #4]
9000a6d2:	7d1b      	ldrb	r3, [r3, #20]
9000a6d4:	2b07      	cmp	r3, #7
9000a6d6:	d020      	beq.n	9000a71a <tcp_close_shutdown_fin+0x66>
9000a6d8:	2b07      	cmp	r3, #7
9000a6da:	dc2b      	bgt.n	9000a734 <tcp_close_shutdown_fin+0x80>
9000a6dc:	2b03      	cmp	r3, #3
9000a6de:	d002      	beq.n	9000a6e6 <tcp_close_shutdown_fin+0x32>
9000a6e0:	2b04      	cmp	r3, #4
9000a6e2:	d00d      	beq.n	9000a700 <tcp_close_shutdown_fin+0x4c>
9000a6e4:	e026      	b.n	9000a734 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
9000a6e6:	6878      	ldr	r0, [r7, #4]
9000a6e8:	f004 fde4 	bl	9000f2b4 <tcp_send_fin>
9000a6ec:	4603      	mov	r3, r0
9000a6ee:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
9000a6f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
9000a6f4:	2b00      	cmp	r3, #0
9000a6f6:	d11f      	bne.n	9000a738 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
9000a6f8:	687b      	ldr	r3, [r7, #4]
9000a6fa:	2205      	movs	r2, #5
9000a6fc:	751a      	strb	r2, [r3, #20]
      }
      break;
9000a6fe:	e01b      	b.n	9000a738 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
9000a700:	6878      	ldr	r0, [r7, #4]
9000a702:	f004 fdd7 	bl	9000f2b4 <tcp_send_fin>
9000a706:	4603      	mov	r3, r0
9000a708:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
9000a70a:	f997 300f 	ldrsb.w	r3, [r7, #15]
9000a70e:	2b00      	cmp	r3, #0
9000a710:	d114      	bne.n	9000a73c <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
9000a712:	687b      	ldr	r3, [r7, #4]
9000a714:	2205      	movs	r2, #5
9000a716:	751a      	strb	r2, [r3, #20]
      }
      break;
9000a718:	e010      	b.n	9000a73c <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
9000a71a:	6878      	ldr	r0, [r7, #4]
9000a71c:	f004 fdca 	bl	9000f2b4 <tcp_send_fin>
9000a720:	4603      	mov	r3, r0
9000a722:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
9000a724:	f997 300f 	ldrsb.w	r3, [r7, #15]
9000a728:	2b00      	cmp	r3, #0
9000a72a:	d109      	bne.n	9000a740 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
9000a72c:	687b      	ldr	r3, [r7, #4]
9000a72e:	2209      	movs	r2, #9
9000a730:	751a      	strb	r2, [r3, #20]
      }
      break;
9000a732:	e005      	b.n	9000a740 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
9000a734:	2300      	movs	r3, #0
9000a736:	e01c      	b.n	9000a772 <tcp_close_shutdown_fin+0xbe>
      break;
9000a738:	bf00      	nop
9000a73a:	e002      	b.n	9000a742 <tcp_close_shutdown_fin+0x8e>
      break;
9000a73c:	bf00      	nop
9000a73e:	e000      	b.n	9000a742 <tcp_close_shutdown_fin+0x8e>
      break;
9000a740:	bf00      	nop
  }

  if (err == ERR_OK) {
9000a742:	f997 300f 	ldrsb.w	r3, [r7, #15]
9000a746:	2b00      	cmp	r3, #0
9000a748:	d103      	bne.n	9000a752 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
9000a74a:	6878      	ldr	r0, [r7, #4]
9000a74c:	f004 fef0 	bl	9000f530 <tcp_output>
9000a750:	e00d      	b.n	9000a76e <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
9000a752:	f997 300f 	ldrsb.w	r3, [r7, #15]
9000a756:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
9000a75a:	d108      	bne.n	9000a76e <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
9000a75c:	687b      	ldr	r3, [r7, #4]
9000a75e:	8b5b      	ldrh	r3, [r3, #26]
9000a760:	f043 0308 	orr.w	r3, r3, #8
9000a764:	b29a      	uxth	r2, r3
9000a766:	687b      	ldr	r3, [r7, #4]
9000a768:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
9000a76a:	2300      	movs	r3, #0
9000a76c:	e001      	b.n	9000a772 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
9000a76e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
9000a772:	4618      	mov	r0, r3
9000a774:	3710      	adds	r7, #16
9000a776:	46bd      	mov	sp, r7
9000a778:	bd80      	pop	{r7, pc}
9000a77a:	bf00      	nop
9000a77c:	90015348 	.word	0x90015348
9000a780:	900153f8 	.word	0x900153f8
9000a784:	9001538c 	.word	0x9001538c

9000a788 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
9000a788:	b580      	push	{r7, lr}
9000a78a:	b082      	sub	sp, #8
9000a78c:	af00      	add	r7, sp, #0
9000a78e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
9000a790:	687b      	ldr	r3, [r7, #4]
9000a792:	2b00      	cmp	r3, #0
9000a794:	d109      	bne.n	9000a7aa <tcp_close+0x22>
9000a796:	4b0f      	ldr	r3, [pc, #60]	; (9000a7d4 <tcp_close+0x4c>)
9000a798:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
9000a79c:	490e      	ldr	r1, [pc, #56]	; (9000a7d8 <tcp_close+0x50>)
9000a79e:	480f      	ldr	r0, [pc, #60]	; (9000a7dc <tcp_close+0x54>)
9000a7a0:	f008 ff4a 	bl	90013638 <iprintf>
9000a7a4:	f06f 030f 	mvn.w	r3, #15
9000a7a8:	e00f      	b.n	9000a7ca <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
9000a7aa:	687b      	ldr	r3, [r7, #4]
9000a7ac:	7d1b      	ldrb	r3, [r3, #20]
9000a7ae:	2b01      	cmp	r3, #1
9000a7b0:	d006      	beq.n	9000a7c0 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
9000a7b2:	687b      	ldr	r3, [r7, #4]
9000a7b4:	8b5b      	ldrh	r3, [r3, #26]
9000a7b6:	f043 0310 	orr.w	r3, r3, #16
9000a7ba:	b29a      	uxth	r2, r3
9000a7bc:	687b      	ldr	r3, [r7, #4]
9000a7be:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
9000a7c0:	2101      	movs	r1, #1
9000a7c2:	6878      	ldr	r0, [r7, #4]
9000a7c4:	f7ff fe94 	bl	9000a4f0 <tcp_close_shutdown>
9000a7c8:	4603      	mov	r3, r0
}
9000a7ca:	4618      	mov	r0, r3
9000a7cc:	3708      	adds	r7, #8
9000a7ce:	46bd      	mov	sp, r7
9000a7d0:	bd80      	pop	{r7, pc}
9000a7d2:	bf00      	nop
9000a7d4:	90015348 	.word	0x90015348
9000a7d8:	90015458 	.word	0x90015458
9000a7dc:	9001538c 	.word	0x9001538c

9000a7e0 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
9000a7e0:	b580      	push	{r7, lr}
9000a7e2:	b08e      	sub	sp, #56	; 0x38
9000a7e4:	af04      	add	r7, sp, #16
9000a7e6:	6078      	str	r0, [r7, #4]
9000a7e8:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
9000a7ea:	687b      	ldr	r3, [r7, #4]
9000a7ec:	2b00      	cmp	r3, #0
9000a7ee:	d107      	bne.n	9000a800 <tcp_abandon+0x20>
9000a7f0:	4b52      	ldr	r3, [pc, #328]	; (9000a93c <tcp_abandon+0x15c>)
9000a7f2:	f240 223d 	movw	r2, #573	; 0x23d
9000a7f6:	4952      	ldr	r1, [pc, #328]	; (9000a940 <tcp_abandon+0x160>)
9000a7f8:	4852      	ldr	r0, [pc, #328]	; (9000a944 <tcp_abandon+0x164>)
9000a7fa:	f008 ff1d 	bl	90013638 <iprintf>
9000a7fe:	e099      	b.n	9000a934 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
9000a800:	687b      	ldr	r3, [r7, #4]
9000a802:	7d1b      	ldrb	r3, [r3, #20]
9000a804:	2b01      	cmp	r3, #1
9000a806:	d106      	bne.n	9000a816 <tcp_abandon+0x36>
9000a808:	4b4c      	ldr	r3, [pc, #304]	; (9000a93c <tcp_abandon+0x15c>)
9000a80a:	f44f 7210 	mov.w	r2, #576	; 0x240
9000a80e:	494e      	ldr	r1, [pc, #312]	; (9000a948 <tcp_abandon+0x168>)
9000a810:	484c      	ldr	r0, [pc, #304]	; (9000a944 <tcp_abandon+0x164>)
9000a812:	f008 ff11 	bl	90013638 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
9000a816:	687b      	ldr	r3, [r7, #4]
9000a818:	7d1b      	ldrb	r3, [r3, #20]
9000a81a:	2b0a      	cmp	r3, #10
9000a81c:	d107      	bne.n	9000a82e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
9000a81e:	6879      	ldr	r1, [r7, #4]
9000a820:	484a      	ldr	r0, [pc, #296]	; (9000a94c <tcp_abandon+0x16c>)
9000a822:	f001 fa69 	bl	9000bcf8 <tcp_pcb_remove>
    tcp_free(pcb);
9000a826:	6878      	ldr	r0, [r7, #4]
9000a828:	f7ff fdb0 	bl	9000a38c <tcp_free>
9000a82c:	e082      	b.n	9000a934 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
9000a82e:	2300      	movs	r3, #0
9000a830:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
9000a832:	2300      	movs	r3, #0
9000a834:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
9000a836:	687b      	ldr	r3, [r7, #4]
9000a838:	6d1b      	ldr	r3, [r3, #80]	; 0x50
9000a83a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
9000a83c:	687b      	ldr	r3, [r7, #4]
9000a83e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000a840:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
9000a842:	687b      	ldr	r3, [r7, #4]
9000a844:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
9000a848:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
9000a84a:	687b      	ldr	r3, [r7, #4]
9000a84c:	691b      	ldr	r3, [r3, #16]
9000a84e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
9000a850:	687b      	ldr	r3, [r7, #4]
9000a852:	7d1b      	ldrb	r3, [r3, #20]
9000a854:	2b00      	cmp	r3, #0
9000a856:	d126      	bne.n	9000a8a6 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
9000a858:	687b      	ldr	r3, [r7, #4]
9000a85a:	8adb      	ldrh	r3, [r3, #22]
9000a85c:	2b00      	cmp	r3, #0
9000a85e:	d02e      	beq.n	9000a8be <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
9000a860:	4b3b      	ldr	r3, [pc, #236]	; (9000a950 <tcp_abandon+0x170>)
9000a862:	681b      	ldr	r3, [r3, #0]
9000a864:	687a      	ldr	r2, [r7, #4]
9000a866:	429a      	cmp	r2, r3
9000a868:	d105      	bne.n	9000a876 <tcp_abandon+0x96>
9000a86a:	4b39      	ldr	r3, [pc, #228]	; (9000a950 <tcp_abandon+0x170>)
9000a86c:	681b      	ldr	r3, [r3, #0]
9000a86e:	68db      	ldr	r3, [r3, #12]
9000a870:	4a37      	ldr	r2, [pc, #220]	; (9000a950 <tcp_abandon+0x170>)
9000a872:	6013      	str	r3, [r2, #0]
9000a874:	e013      	b.n	9000a89e <tcp_abandon+0xbe>
9000a876:	4b36      	ldr	r3, [pc, #216]	; (9000a950 <tcp_abandon+0x170>)
9000a878:	681b      	ldr	r3, [r3, #0]
9000a87a:	61fb      	str	r3, [r7, #28]
9000a87c:	e00c      	b.n	9000a898 <tcp_abandon+0xb8>
9000a87e:	69fb      	ldr	r3, [r7, #28]
9000a880:	68db      	ldr	r3, [r3, #12]
9000a882:	687a      	ldr	r2, [r7, #4]
9000a884:	429a      	cmp	r2, r3
9000a886:	d104      	bne.n	9000a892 <tcp_abandon+0xb2>
9000a888:	687b      	ldr	r3, [r7, #4]
9000a88a:	68da      	ldr	r2, [r3, #12]
9000a88c:	69fb      	ldr	r3, [r7, #28]
9000a88e:	60da      	str	r2, [r3, #12]
9000a890:	e005      	b.n	9000a89e <tcp_abandon+0xbe>
9000a892:	69fb      	ldr	r3, [r7, #28]
9000a894:	68db      	ldr	r3, [r3, #12]
9000a896:	61fb      	str	r3, [r7, #28]
9000a898:	69fb      	ldr	r3, [r7, #28]
9000a89a:	2b00      	cmp	r3, #0
9000a89c:	d1ef      	bne.n	9000a87e <tcp_abandon+0x9e>
9000a89e:	687b      	ldr	r3, [r7, #4]
9000a8a0:	2200      	movs	r2, #0
9000a8a2:	60da      	str	r2, [r3, #12]
9000a8a4:	e00b      	b.n	9000a8be <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
9000a8a6:	683b      	ldr	r3, [r7, #0]
9000a8a8:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
9000a8aa:	687b      	ldr	r3, [r7, #4]
9000a8ac:	8adb      	ldrh	r3, [r3, #22]
9000a8ae:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
9000a8b0:	6879      	ldr	r1, [r7, #4]
9000a8b2:	4828      	ldr	r0, [pc, #160]	; (9000a954 <tcp_abandon+0x174>)
9000a8b4:	f001 fa20 	bl	9000bcf8 <tcp_pcb_remove>
9000a8b8:	4b27      	ldr	r3, [pc, #156]	; (9000a958 <tcp_abandon+0x178>)
9000a8ba:	2201      	movs	r2, #1
9000a8bc:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
9000a8be:	687b      	ldr	r3, [r7, #4]
9000a8c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
9000a8c2:	2b00      	cmp	r3, #0
9000a8c4:	d004      	beq.n	9000a8d0 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
9000a8c6:	687b      	ldr	r3, [r7, #4]
9000a8c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
9000a8ca:	4618      	mov	r0, r3
9000a8cc:	f000 fed6 	bl	9000b67c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
9000a8d0:	687b      	ldr	r3, [r7, #4]
9000a8d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
9000a8d4:	2b00      	cmp	r3, #0
9000a8d6:	d004      	beq.n	9000a8e2 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
9000a8d8:	687b      	ldr	r3, [r7, #4]
9000a8da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
9000a8dc:	4618      	mov	r0, r3
9000a8de:	f000 fecd 	bl	9000b67c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
9000a8e2:	687b      	ldr	r3, [r7, #4]
9000a8e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
9000a8e6:	2b00      	cmp	r3, #0
9000a8e8:	d004      	beq.n	9000a8f4 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
9000a8ea:	687b      	ldr	r3, [r7, #4]
9000a8ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
9000a8ee:	4618      	mov	r0, r3
9000a8f0:	f000 fec4 	bl	9000b67c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
9000a8f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000a8f6:	2b00      	cmp	r3, #0
9000a8f8:	d00e      	beq.n	9000a918 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
9000a8fa:	6879      	ldr	r1, [r7, #4]
9000a8fc:	687b      	ldr	r3, [r7, #4]
9000a8fe:	3304      	adds	r3, #4
9000a900:	687a      	ldr	r2, [r7, #4]
9000a902:	8b12      	ldrh	r2, [r2, #24]
9000a904:	9202      	str	r2, [sp, #8]
9000a906:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
9000a908:	9201      	str	r2, [sp, #4]
9000a90a:	9300      	str	r3, [sp, #0]
9000a90c:	460b      	mov	r3, r1
9000a90e:	697a      	ldr	r2, [r7, #20]
9000a910:	69b9      	ldr	r1, [r7, #24]
9000a912:	6878      	ldr	r0, [r7, #4]
9000a914:	f005 fbc0 	bl	90010098 <tcp_rst>
    }
    last_state = pcb->state;
9000a918:	687b      	ldr	r3, [r7, #4]
9000a91a:	7d1b      	ldrb	r3, [r3, #20]
9000a91c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
9000a91e:	6878      	ldr	r0, [r7, #4]
9000a920:	f7ff fd34 	bl	9000a38c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
9000a924:	693b      	ldr	r3, [r7, #16]
9000a926:	2b00      	cmp	r3, #0
9000a928:	d004      	beq.n	9000a934 <tcp_abandon+0x154>
9000a92a:	693b      	ldr	r3, [r7, #16]
9000a92c:	f06f 010c 	mvn.w	r1, #12
9000a930:	68f8      	ldr	r0, [r7, #12]
9000a932:	4798      	blx	r3
  }
}
9000a934:	3728      	adds	r7, #40	; 0x28
9000a936:	46bd      	mov	sp, r7
9000a938:	bd80      	pop	{r7, pc}
9000a93a:	bf00      	nop
9000a93c:	90015348 	.word	0x90015348
9000a940:	9001548c 	.word	0x9001548c
9000a944:	9001538c 	.word	0x9001538c
9000a948:	900154a8 	.word	0x900154a8
9000a94c:	24011030 	.word	0x24011030
9000a950:	24011024 	.word	0x24011024
9000a954:	2401102c 	.word	0x2401102c
9000a958:	24011034 	.word	0x24011034

9000a95c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
9000a95c:	b580      	push	{r7, lr}
9000a95e:	b082      	sub	sp, #8
9000a960:	af00      	add	r7, sp, #0
9000a962:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
9000a964:	2101      	movs	r1, #1
9000a966:	6878      	ldr	r0, [r7, #4]
9000a968:	f7ff ff3a 	bl	9000a7e0 <tcp_abandon>
}
9000a96c:	bf00      	nop
9000a96e:	3708      	adds	r7, #8
9000a970:	46bd      	mov	sp, r7
9000a972:	bd80      	pop	{r7, pc}

9000a974 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
9000a974:	b580      	push	{r7, lr}
9000a976:	b088      	sub	sp, #32
9000a978:	af00      	add	r7, sp, #0
9000a97a:	60f8      	str	r0, [r7, #12]
9000a97c:	60b9      	str	r1, [r7, #8]
9000a97e:	4613      	mov	r3, r2
9000a980:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
9000a982:	2304      	movs	r3, #4
9000a984:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
9000a986:	68bb      	ldr	r3, [r7, #8]
9000a988:	2b00      	cmp	r3, #0
9000a98a:	d101      	bne.n	9000a990 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
9000a98c:	4b3e      	ldr	r3, [pc, #248]	; (9000aa88 <tcp_bind+0x114>)
9000a98e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
9000a990:	68fb      	ldr	r3, [r7, #12]
9000a992:	2b00      	cmp	r3, #0
9000a994:	d109      	bne.n	9000a9aa <tcp_bind+0x36>
9000a996:	4b3d      	ldr	r3, [pc, #244]	; (9000aa8c <tcp_bind+0x118>)
9000a998:	f240 22a9 	movw	r2, #681	; 0x2a9
9000a99c:	493c      	ldr	r1, [pc, #240]	; (9000aa90 <tcp_bind+0x11c>)
9000a99e:	483d      	ldr	r0, [pc, #244]	; (9000aa94 <tcp_bind+0x120>)
9000a9a0:	f008 fe4a 	bl	90013638 <iprintf>
9000a9a4:	f06f 030f 	mvn.w	r3, #15
9000a9a8:	e06a      	b.n	9000aa80 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
9000a9aa:	68fb      	ldr	r3, [r7, #12]
9000a9ac:	7d1b      	ldrb	r3, [r3, #20]
9000a9ae:	2b00      	cmp	r3, #0
9000a9b0:	d009      	beq.n	9000a9c6 <tcp_bind+0x52>
9000a9b2:	4b36      	ldr	r3, [pc, #216]	; (9000aa8c <tcp_bind+0x118>)
9000a9b4:	f240 22ab 	movw	r2, #683	; 0x2ab
9000a9b8:	4937      	ldr	r1, [pc, #220]	; (9000aa98 <tcp_bind+0x124>)
9000a9ba:	4836      	ldr	r0, [pc, #216]	; (9000aa94 <tcp_bind+0x120>)
9000a9bc:	f008 fe3c 	bl	90013638 <iprintf>
9000a9c0:	f06f 0305 	mvn.w	r3, #5
9000a9c4:	e05c      	b.n	9000aa80 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
9000a9c6:	88fb      	ldrh	r3, [r7, #6]
9000a9c8:	2b00      	cmp	r3, #0
9000a9ca:	d109      	bne.n	9000a9e0 <tcp_bind+0x6c>
    port = tcp_new_port();
9000a9cc:	f000 f9f0 	bl	9000adb0 <tcp_new_port>
9000a9d0:	4603      	mov	r3, r0
9000a9d2:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
9000a9d4:	88fb      	ldrh	r3, [r7, #6]
9000a9d6:	2b00      	cmp	r3, #0
9000a9d8:	d135      	bne.n	9000aa46 <tcp_bind+0xd2>
      return ERR_BUF;
9000a9da:	f06f 0301 	mvn.w	r3, #1
9000a9de:	e04f      	b.n	9000aa80 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
9000a9e0:	2300      	movs	r3, #0
9000a9e2:	61fb      	str	r3, [r7, #28]
9000a9e4:	e02b      	b.n	9000aa3e <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
9000a9e6:	4a2d      	ldr	r2, [pc, #180]	; (9000aa9c <tcp_bind+0x128>)
9000a9e8:	69fb      	ldr	r3, [r7, #28]
9000a9ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
9000a9ee:	681b      	ldr	r3, [r3, #0]
9000a9f0:	61bb      	str	r3, [r7, #24]
9000a9f2:	e01e      	b.n	9000aa32 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
9000a9f4:	69bb      	ldr	r3, [r7, #24]
9000a9f6:	8adb      	ldrh	r3, [r3, #22]
9000a9f8:	88fa      	ldrh	r2, [r7, #6]
9000a9fa:	429a      	cmp	r2, r3
9000a9fc:	d116      	bne.n	9000aa2c <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
9000a9fe:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
9000aa00:	2b00      	cmp	r3, #0
9000aa02:	d010      	beq.n	9000aa26 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
9000aa04:	69bb      	ldr	r3, [r7, #24]
9000aa06:	681b      	ldr	r3, [r3, #0]
9000aa08:	2b00      	cmp	r3, #0
9000aa0a:	d00c      	beq.n	9000aa26 <tcp_bind+0xb2>
9000aa0c:	68bb      	ldr	r3, [r7, #8]
9000aa0e:	2b00      	cmp	r3, #0
9000aa10:	d009      	beq.n	9000aa26 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
9000aa12:	68bb      	ldr	r3, [r7, #8]
9000aa14:	681b      	ldr	r3, [r3, #0]
9000aa16:	2b00      	cmp	r3, #0
9000aa18:	d005      	beq.n	9000aa26 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
9000aa1a:	69bb      	ldr	r3, [r7, #24]
9000aa1c:	681a      	ldr	r2, [r3, #0]
9000aa1e:	68bb      	ldr	r3, [r7, #8]
9000aa20:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
9000aa22:	429a      	cmp	r2, r3
9000aa24:	d102      	bne.n	9000aa2c <tcp_bind+0xb8>
              return ERR_USE;
9000aa26:	f06f 0307 	mvn.w	r3, #7
9000aa2a:	e029      	b.n	9000aa80 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
9000aa2c:	69bb      	ldr	r3, [r7, #24]
9000aa2e:	68db      	ldr	r3, [r3, #12]
9000aa30:	61bb      	str	r3, [r7, #24]
9000aa32:	69bb      	ldr	r3, [r7, #24]
9000aa34:	2b00      	cmp	r3, #0
9000aa36:	d1dd      	bne.n	9000a9f4 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
9000aa38:	69fb      	ldr	r3, [r7, #28]
9000aa3a:	3301      	adds	r3, #1
9000aa3c:	61fb      	str	r3, [r7, #28]
9000aa3e:	69fa      	ldr	r2, [r7, #28]
9000aa40:	697b      	ldr	r3, [r7, #20]
9000aa42:	429a      	cmp	r2, r3
9000aa44:	dbcf      	blt.n	9000a9e6 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
9000aa46:	68bb      	ldr	r3, [r7, #8]
9000aa48:	2b00      	cmp	r3, #0
9000aa4a:	d00c      	beq.n	9000aa66 <tcp_bind+0xf2>
9000aa4c:	68bb      	ldr	r3, [r7, #8]
9000aa4e:	681b      	ldr	r3, [r3, #0]
9000aa50:	2b00      	cmp	r3, #0
9000aa52:	d008      	beq.n	9000aa66 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
9000aa54:	68bb      	ldr	r3, [r7, #8]
9000aa56:	2b00      	cmp	r3, #0
9000aa58:	d002      	beq.n	9000aa60 <tcp_bind+0xec>
9000aa5a:	68bb      	ldr	r3, [r7, #8]
9000aa5c:	681b      	ldr	r3, [r3, #0]
9000aa5e:	e000      	b.n	9000aa62 <tcp_bind+0xee>
9000aa60:	2300      	movs	r3, #0
9000aa62:	68fa      	ldr	r2, [r7, #12]
9000aa64:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
9000aa66:	68fb      	ldr	r3, [r7, #12]
9000aa68:	88fa      	ldrh	r2, [r7, #6]
9000aa6a:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
9000aa6c:	4b0c      	ldr	r3, [pc, #48]	; (9000aaa0 <tcp_bind+0x12c>)
9000aa6e:	681a      	ldr	r2, [r3, #0]
9000aa70:	68fb      	ldr	r3, [r7, #12]
9000aa72:	60da      	str	r2, [r3, #12]
9000aa74:	4a0a      	ldr	r2, [pc, #40]	; (9000aaa0 <tcp_bind+0x12c>)
9000aa76:	68fb      	ldr	r3, [r7, #12]
9000aa78:	6013      	str	r3, [r2, #0]
9000aa7a:	f005 fccf 	bl	9001041c <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
9000aa7e:	2300      	movs	r3, #0
}
9000aa80:	4618      	mov	r0, r3
9000aa82:	3720      	adds	r7, #32
9000aa84:	46bd      	mov	sp, r7
9000aa86:	bd80      	pop	{r7, pc}
9000aa88:	900174d0 	.word	0x900174d0
9000aa8c:	90015348 	.word	0x90015348
9000aa90:	900154dc 	.word	0x900154dc
9000aa94:	9001538c 	.word	0x9001538c
9000aa98:	900154f4 	.word	0x900154f4
9000aa9c:	900174a8 	.word	0x900174a8
9000aaa0:	24011024 	.word	0x24011024

9000aaa4 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
9000aaa4:	b580      	push	{r7, lr}
9000aaa6:	b084      	sub	sp, #16
9000aaa8:	af00      	add	r7, sp, #0
9000aaaa:	60f8      	str	r0, [r7, #12]
9000aaac:	60b9      	str	r1, [r7, #8]
9000aaae:	4613      	mov	r3, r2
9000aab0:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
9000aab2:	68bb      	ldr	r3, [r7, #8]
9000aab4:	2b00      	cmp	r3, #0
9000aab6:	d106      	bne.n	9000aac6 <tcp_accept_null+0x22>
9000aab8:	4b07      	ldr	r3, [pc, #28]	; (9000aad8 <tcp_accept_null+0x34>)
9000aaba:	f240 320f 	movw	r2, #783	; 0x30f
9000aabe:	4907      	ldr	r1, [pc, #28]	; (9000aadc <tcp_accept_null+0x38>)
9000aac0:	4807      	ldr	r0, [pc, #28]	; (9000aae0 <tcp_accept_null+0x3c>)
9000aac2:	f008 fdb9 	bl	90013638 <iprintf>

  tcp_abort(pcb);
9000aac6:	68b8      	ldr	r0, [r7, #8]
9000aac8:	f7ff ff48 	bl	9000a95c <tcp_abort>

  return ERR_ABRT;
9000aacc:	f06f 030c 	mvn.w	r3, #12
}
9000aad0:	4618      	mov	r0, r3
9000aad2:	3710      	adds	r7, #16
9000aad4:	46bd      	mov	sp, r7
9000aad6:	bd80      	pop	{r7, pc}
9000aad8:	90015348 	.word	0x90015348
9000aadc:	9001551c 	.word	0x9001551c
9000aae0:	9001538c 	.word	0x9001538c

9000aae4 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
9000aae4:	b580      	push	{r7, lr}
9000aae6:	b082      	sub	sp, #8
9000aae8:	af00      	add	r7, sp, #0
9000aaea:	6078      	str	r0, [r7, #4]
9000aaec:	460b      	mov	r3, r1
9000aaee:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
9000aaf0:	78fb      	ldrb	r3, [r7, #3]
9000aaf2:	2200      	movs	r2, #0
9000aaf4:	4619      	mov	r1, r3
9000aaf6:	6878      	ldr	r0, [r7, #4]
9000aaf8:	f000 f806 	bl	9000ab08 <tcp_listen_with_backlog_and_err>
9000aafc:	4603      	mov	r3, r0
}
9000aafe:	4618      	mov	r0, r3
9000ab00:	3708      	adds	r7, #8
9000ab02:	46bd      	mov	sp, r7
9000ab04:	bd80      	pop	{r7, pc}
	...

9000ab08 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
9000ab08:	b580      	push	{r7, lr}
9000ab0a:	b088      	sub	sp, #32
9000ab0c:	af00      	add	r7, sp, #0
9000ab0e:	60f8      	str	r0, [r7, #12]
9000ab10:	460b      	mov	r3, r1
9000ab12:	607a      	str	r2, [r7, #4]
9000ab14:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
9000ab16:	2300      	movs	r3, #0
9000ab18:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
9000ab1a:	68fb      	ldr	r3, [r7, #12]
9000ab1c:	2b00      	cmp	r3, #0
9000ab1e:	d109      	bne.n	9000ab34 <tcp_listen_with_backlog_and_err+0x2c>
9000ab20:	4b47      	ldr	r3, [pc, #284]	; (9000ac40 <tcp_listen_with_backlog_and_err+0x138>)
9000ab22:	f240 3259 	movw	r2, #857	; 0x359
9000ab26:	4947      	ldr	r1, [pc, #284]	; (9000ac44 <tcp_listen_with_backlog_and_err+0x13c>)
9000ab28:	4847      	ldr	r0, [pc, #284]	; (9000ac48 <tcp_listen_with_backlog_and_err+0x140>)
9000ab2a:	f008 fd85 	bl	90013638 <iprintf>
9000ab2e:	23f0      	movs	r3, #240	; 0xf0
9000ab30:	76fb      	strb	r3, [r7, #27]
9000ab32:	e079      	b.n	9000ac28 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
9000ab34:	68fb      	ldr	r3, [r7, #12]
9000ab36:	7d1b      	ldrb	r3, [r3, #20]
9000ab38:	2b00      	cmp	r3, #0
9000ab3a:	d009      	beq.n	9000ab50 <tcp_listen_with_backlog_and_err+0x48>
9000ab3c:	4b40      	ldr	r3, [pc, #256]	; (9000ac40 <tcp_listen_with_backlog_and_err+0x138>)
9000ab3e:	f240 325a 	movw	r2, #858	; 0x35a
9000ab42:	4942      	ldr	r1, [pc, #264]	; (9000ac4c <tcp_listen_with_backlog_and_err+0x144>)
9000ab44:	4840      	ldr	r0, [pc, #256]	; (9000ac48 <tcp_listen_with_backlog_and_err+0x140>)
9000ab46:	f008 fd77 	bl	90013638 <iprintf>
9000ab4a:	23f1      	movs	r3, #241	; 0xf1
9000ab4c:	76fb      	strb	r3, [r7, #27]
9000ab4e:	e06b      	b.n	9000ac28 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
9000ab50:	68fb      	ldr	r3, [r7, #12]
9000ab52:	7d1b      	ldrb	r3, [r3, #20]
9000ab54:	2b01      	cmp	r3, #1
9000ab56:	d104      	bne.n	9000ab62 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
9000ab58:	68fb      	ldr	r3, [r7, #12]
9000ab5a:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
9000ab5c:	23f7      	movs	r3, #247	; 0xf7
9000ab5e:	76fb      	strb	r3, [r7, #27]
    goto done;
9000ab60:	e062      	b.n	9000ac28 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
9000ab62:	2002      	movs	r0, #2
9000ab64:	f7fe fa4c 	bl	90009000 <memp_malloc>
9000ab68:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
9000ab6a:	69fb      	ldr	r3, [r7, #28]
9000ab6c:	2b00      	cmp	r3, #0
9000ab6e:	d102      	bne.n	9000ab76 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
9000ab70:	23ff      	movs	r3, #255	; 0xff
9000ab72:	76fb      	strb	r3, [r7, #27]
    goto done;
9000ab74:	e058      	b.n	9000ac28 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
9000ab76:	68fb      	ldr	r3, [r7, #12]
9000ab78:	691a      	ldr	r2, [r3, #16]
9000ab7a:	69fb      	ldr	r3, [r7, #28]
9000ab7c:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
9000ab7e:	68fb      	ldr	r3, [r7, #12]
9000ab80:	8ada      	ldrh	r2, [r3, #22]
9000ab82:	69fb      	ldr	r3, [r7, #28]
9000ab84:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
9000ab86:	69fb      	ldr	r3, [r7, #28]
9000ab88:	2201      	movs	r2, #1
9000ab8a:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
9000ab8c:	68fb      	ldr	r3, [r7, #12]
9000ab8e:	7d5a      	ldrb	r2, [r3, #21]
9000ab90:	69fb      	ldr	r3, [r7, #28]
9000ab92:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
9000ab94:	68fb      	ldr	r3, [r7, #12]
9000ab96:	7a5a      	ldrb	r2, [r3, #9]
9000ab98:	69fb      	ldr	r3, [r7, #28]
9000ab9a:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
9000ab9c:	69fb      	ldr	r3, [r7, #28]
9000ab9e:	2200      	movs	r2, #0
9000aba0:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
9000aba2:	68fb      	ldr	r3, [r7, #12]
9000aba4:	7ada      	ldrb	r2, [r3, #11]
9000aba6:	69fb      	ldr	r3, [r7, #28]
9000aba8:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
9000abaa:	68fb      	ldr	r3, [r7, #12]
9000abac:	7a9a      	ldrb	r2, [r3, #10]
9000abae:	69fb      	ldr	r3, [r7, #28]
9000abb0:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
9000abb2:	68fb      	ldr	r3, [r7, #12]
9000abb4:	681a      	ldr	r2, [r3, #0]
9000abb6:	69fb      	ldr	r3, [r7, #28]
9000abb8:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
9000abba:	68fb      	ldr	r3, [r7, #12]
9000abbc:	8adb      	ldrh	r3, [r3, #22]
9000abbe:	2b00      	cmp	r3, #0
9000abc0:	d021      	beq.n	9000ac06 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
9000abc2:	4b23      	ldr	r3, [pc, #140]	; (9000ac50 <tcp_listen_with_backlog_and_err+0x148>)
9000abc4:	681b      	ldr	r3, [r3, #0]
9000abc6:	68fa      	ldr	r2, [r7, #12]
9000abc8:	429a      	cmp	r2, r3
9000abca:	d105      	bne.n	9000abd8 <tcp_listen_with_backlog_and_err+0xd0>
9000abcc:	4b20      	ldr	r3, [pc, #128]	; (9000ac50 <tcp_listen_with_backlog_and_err+0x148>)
9000abce:	681b      	ldr	r3, [r3, #0]
9000abd0:	68db      	ldr	r3, [r3, #12]
9000abd2:	4a1f      	ldr	r2, [pc, #124]	; (9000ac50 <tcp_listen_with_backlog_and_err+0x148>)
9000abd4:	6013      	str	r3, [r2, #0]
9000abd6:	e013      	b.n	9000ac00 <tcp_listen_with_backlog_and_err+0xf8>
9000abd8:	4b1d      	ldr	r3, [pc, #116]	; (9000ac50 <tcp_listen_with_backlog_and_err+0x148>)
9000abda:	681b      	ldr	r3, [r3, #0]
9000abdc:	617b      	str	r3, [r7, #20]
9000abde:	e00c      	b.n	9000abfa <tcp_listen_with_backlog_and_err+0xf2>
9000abe0:	697b      	ldr	r3, [r7, #20]
9000abe2:	68db      	ldr	r3, [r3, #12]
9000abe4:	68fa      	ldr	r2, [r7, #12]
9000abe6:	429a      	cmp	r2, r3
9000abe8:	d104      	bne.n	9000abf4 <tcp_listen_with_backlog_and_err+0xec>
9000abea:	68fb      	ldr	r3, [r7, #12]
9000abec:	68da      	ldr	r2, [r3, #12]
9000abee:	697b      	ldr	r3, [r7, #20]
9000abf0:	60da      	str	r2, [r3, #12]
9000abf2:	e005      	b.n	9000ac00 <tcp_listen_with_backlog_and_err+0xf8>
9000abf4:	697b      	ldr	r3, [r7, #20]
9000abf6:	68db      	ldr	r3, [r3, #12]
9000abf8:	617b      	str	r3, [r7, #20]
9000abfa:	697b      	ldr	r3, [r7, #20]
9000abfc:	2b00      	cmp	r3, #0
9000abfe:	d1ef      	bne.n	9000abe0 <tcp_listen_with_backlog_and_err+0xd8>
9000ac00:	68fb      	ldr	r3, [r7, #12]
9000ac02:	2200      	movs	r2, #0
9000ac04:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
9000ac06:	68f8      	ldr	r0, [r7, #12]
9000ac08:	f7ff fbc0 	bl	9000a38c <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
9000ac0c:	69fb      	ldr	r3, [r7, #28]
9000ac0e:	4a11      	ldr	r2, [pc, #68]	; (9000ac54 <tcp_listen_with_backlog_and_err+0x14c>)
9000ac10:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
9000ac12:	4b11      	ldr	r3, [pc, #68]	; (9000ac58 <tcp_listen_with_backlog_and_err+0x150>)
9000ac14:	681a      	ldr	r2, [r3, #0]
9000ac16:	69fb      	ldr	r3, [r7, #28]
9000ac18:	60da      	str	r2, [r3, #12]
9000ac1a:	4a0f      	ldr	r2, [pc, #60]	; (9000ac58 <tcp_listen_with_backlog_and_err+0x150>)
9000ac1c:	69fb      	ldr	r3, [r7, #28]
9000ac1e:	6013      	str	r3, [r2, #0]
9000ac20:	f005 fbfc 	bl	9001041c <tcp_timer_needed>
  res = ERR_OK;
9000ac24:	2300      	movs	r3, #0
9000ac26:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
9000ac28:	687b      	ldr	r3, [r7, #4]
9000ac2a:	2b00      	cmp	r3, #0
9000ac2c:	d002      	beq.n	9000ac34 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
9000ac2e:	687b      	ldr	r3, [r7, #4]
9000ac30:	7efa      	ldrb	r2, [r7, #27]
9000ac32:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
9000ac34:	69fb      	ldr	r3, [r7, #28]
}
9000ac36:	4618      	mov	r0, r3
9000ac38:	3720      	adds	r7, #32
9000ac3a:	46bd      	mov	sp, r7
9000ac3c:	bd80      	pop	{r7, pc}
9000ac3e:	bf00      	nop
9000ac40:	90015348 	.word	0x90015348
9000ac44:	9001553c 	.word	0x9001553c
9000ac48:	9001538c 	.word	0x9001538c
9000ac4c:	9001556c 	.word	0x9001556c
9000ac50:	24011024 	.word	0x24011024
9000ac54:	9000aaa5 	.word	0x9000aaa5
9000ac58:	24011028 	.word	0x24011028

9000ac5c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
9000ac5c:	b580      	push	{r7, lr}
9000ac5e:	b084      	sub	sp, #16
9000ac60:	af00      	add	r7, sp, #0
9000ac62:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
9000ac64:	687b      	ldr	r3, [r7, #4]
9000ac66:	2b00      	cmp	r3, #0
9000ac68:	d106      	bne.n	9000ac78 <tcp_update_rcv_ann_wnd+0x1c>
9000ac6a:	4b25      	ldr	r3, [pc, #148]	; (9000ad00 <tcp_update_rcv_ann_wnd+0xa4>)
9000ac6c:	f240 32a6 	movw	r2, #934	; 0x3a6
9000ac70:	4924      	ldr	r1, [pc, #144]	; (9000ad04 <tcp_update_rcv_ann_wnd+0xa8>)
9000ac72:	4825      	ldr	r0, [pc, #148]	; (9000ad08 <tcp_update_rcv_ann_wnd+0xac>)
9000ac74:	f008 fce0 	bl	90013638 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
9000ac78:	687b      	ldr	r3, [r7, #4]
9000ac7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000ac7c:	687a      	ldr	r2, [r7, #4]
9000ac7e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
9000ac80:	4413      	add	r3, r2
9000ac82:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
9000ac84:	687b      	ldr	r3, [r7, #4]
9000ac86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000ac88:	687a      	ldr	r2, [r7, #4]
9000ac8a:	8e52      	ldrh	r2, [r2, #50]	; 0x32
9000ac8c:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
9000ac90:	bf28      	it	cs
9000ac92:	f44f 6286 	movcs.w	r2, #1072	; 0x430
9000ac96:	b292      	uxth	r2, r2
9000ac98:	4413      	add	r3, r2
9000ac9a:	68fa      	ldr	r2, [r7, #12]
9000ac9c:	1ad3      	subs	r3, r2, r3
9000ac9e:	2b00      	cmp	r3, #0
9000aca0:	db08      	blt.n	9000acb4 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
9000aca2:	687b      	ldr	r3, [r7, #4]
9000aca4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
9000aca6:	687b      	ldr	r3, [r7, #4]
9000aca8:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
9000acaa:	687b      	ldr	r3, [r7, #4]
9000acac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000acae:	68fa      	ldr	r2, [r7, #12]
9000acb0:	1ad3      	subs	r3, r2, r3
9000acb2:	e020      	b.n	9000acf6 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
9000acb4:	687b      	ldr	r3, [r7, #4]
9000acb6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
9000acb8:	687b      	ldr	r3, [r7, #4]
9000acba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000acbc:	1ad3      	subs	r3, r2, r3
9000acbe:	2b00      	cmp	r3, #0
9000acc0:	dd03      	ble.n	9000acca <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
9000acc2:	687b      	ldr	r3, [r7, #4]
9000acc4:	2200      	movs	r2, #0
9000acc6:	855a      	strh	r2, [r3, #42]	; 0x2a
9000acc8:	e014      	b.n	9000acf4 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
9000acca:	687b      	ldr	r3, [r7, #4]
9000accc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
9000acce:	687b      	ldr	r3, [r7, #4]
9000acd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000acd2:	1ad3      	subs	r3, r2, r3
9000acd4:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
9000acd6:	68bb      	ldr	r3, [r7, #8]
9000acd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
9000acdc:	d306      	bcc.n	9000acec <tcp_update_rcv_ann_wnd+0x90>
9000acde:	4b08      	ldr	r3, [pc, #32]	; (9000ad00 <tcp_update_rcv_ann_wnd+0xa4>)
9000ace0:	f240 32b6 	movw	r2, #950	; 0x3b6
9000ace4:	4909      	ldr	r1, [pc, #36]	; (9000ad0c <tcp_update_rcv_ann_wnd+0xb0>)
9000ace6:	4808      	ldr	r0, [pc, #32]	; (9000ad08 <tcp_update_rcv_ann_wnd+0xac>)
9000ace8:	f008 fca6 	bl	90013638 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
9000acec:	68bb      	ldr	r3, [r7, #8]
9000acee:	b29a      	uxth	r2, r3
9000acf0:	687b      	ldr	r3, [r7, #4]
9000acf2:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
9000acf4:	2300      	movs	r3, #0
  }
}
9000acf6:	4618      	mov	r0, r3
9000acf8:	3710      	adds	r7, #16
9000acfa:	46bd      	mov	sp, r7
9000acfc:	bd80      	pop	{r7, pc}
9000acfe:	bf00      	nop
9000ad00:	90015348 	.word	0x90015348
9000ad04:	900155a4 	.word	0x900155a4
9000ad08:	9001538c 	.word	0x9001538c
9000ad0c:	900155c8 	.word	0x900155c8

9000ad10 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
9000ad10:	b580      	push	{r7, lr}
9000ad12:	b084      	sub	sp, #16
9000ad14:	af00      	add	r7, sp, #0
9000ad16:	6078      	str	r0, [r7, #4]
9000ad18:	460b      	mov	r3, r1
9000ad1a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
9000ad1c:	687b      	ldr	r3, [r7, #4]
9000ad1e:	2b00      	cmp	r3, #0
9000ad20:	d107      	bne.n	9000ad32 <tcp_recved+0x22>
9000ad22:	4b1f      	ldr	r3, [pc, #124]	; (9000ada0 <tcp_recved+0x90>)
9000ad24:	f240 32cf 	movw	r2, #975	; 0x3cf
9000ad28:	491e      	ldr	r1, [pc, #120]	; (9000ada4 <tcp_recved+0x94>)
9000ad2a:	481f      	ldr	r0, [pc, #124]	; (9000ada8 <tcp_recved+0x98>)
9000ad2c:	f008 fc84 	bl	90013638 <iprintf>
9000ad30:	e032      	b.n	9000ad98 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
9000ad32:	687b      	ldr	r3, [r7, #4]
9000ad34:	7d1b      	ldrb	r3, [r3, #20]
9000ad36:	2b01      	cmp	r3, #1
9000ad38:	d106      	bne.n	9000ad48 <tcp_recved+0x38>
9000ad3a:	4b19      	ldr	r3, [pc, #100]	; (9000ada0 <tcp_recved+0x90>)
9000ad3c:	f240 32d2 	movw	r2, #978	; 0x3d2
9000ad40:	491a      	ldr	r1, [pc, #104]	; (9000adac <tcp_recved+0x9c>)
9000ad42:	4819      	ldr	r0, [pc, #100]	; (9000ada8 <tcp_recved+0x98>)
9000ad44:	f008 fc78 	bl	90013638 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
9000ad48:	687b      	ldr	r3, [r7, #4]
9000ad4a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
9000ad4c:	887b      	ldrh	r3, [r7, #2]
9000ad4e:	4413      	add	r3, r2
9000ad50:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
9000ad52:	89fb      	ldrh	r3, [r7, #14]
9000ad54:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
9000ad58:	d804      	bhi.n	9000ad64 <tcp_recved+0x54>
9000ad5a:	687b      	ldr	r3, [r7, #4]
9000ad5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
9000ad5e:	89fa      	ldrh	r2, [r7, #14]
9000ad60:	429a      	cmp	r2, r3
9000ad62:	d204      	bcs.n	9000ad6e <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
9000ad64:	687b      	ldr	r3, [r7, #4]
9000ad66:	f44f 6206 	mov.w	r2, #2144	; 0x860
9000ad6a:	851a      	strh	r2, [r3, #40]	; 0x28
9000ad6c:	e002      	b.n	9000ad74 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
9000ad6e:	687b      	ldr	r3, [r7, #4]
9000ad70:	89fa      	ldrh	r2, [r7, #14]
9000ad72:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
9000ad74:	6878      	ldr	r0, [r7, #4]
9000ad76:	f7ff ff71 	bl	9000ac5c <tcp_update_rcv_ann_wnd>
9000ad7a:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
9000ad7c:	68bb      	ldr	r3, [r7, #8]
9000ad7e:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
9000ad82:	d309      	bcc.n	9000ad98 <tcp_recved+0x88>
    tcp_ack_now(pcb);
9000ad84:	687b      	ldr	r3, [r7, #4]
9000ad86:	8b5b      	ldrh	r3, [r3, #26]
9000ad88:	f043 0302 	orr.w	r3, r3, #2
9000ad8c:	b29a      	uxth	r2, r3
9000ad8e:	687b      	ldr	r3, [r7, #4]
9000ad90:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
9000ad92:	6878      	ldr	r0, [r7, #4]
9000ad94:	f004 fbcc 	bl	9000f530 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
9000ad98:	3710      	adds	r7, #16
9000ad9a:	46bd      	mov	sp, r7
9000ad9c:	bd80      	pop	{r7, pc}
9000ad9e:	bf00      	nop
9000ada0:	90015348 	.word	0x90015348
9000ada4:	900155e4 	.word	0x900155e4
9000ada8:	9001538c 	.word	0x9001538c
9000adac:	900155fc 	.word	0x900155fc

9000adb0 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
9000adb0:	b480      	push	{r7}
9000adb2:	b083      	sub	sp, #12
9000adb4:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
9000adb6:	2300      	movs	r3, #0
9000adb8:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
9000adba:	4b1e      	ldr	r3, [pc, #120]	; (9000ae34 <tcp_new_port+0x84>)
9000adbc:	881b      	ldrh	r3, [r3, #0]
9000adbe:	3301      	adds	r3, #1
9000adc0:	b29a      	uxth	r2, r3
9000adc2:	4b1c      	ldr	r3, [pc, #112]	; (9000ae34 <tcp_new_port+0x84>)
9000adc4:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
9000adc6:	4b1b      	ldr	r3, [pc, #108]	; (9000ae34 <tcp_new_port+0x84>)
9000adc8:	881b      	ldrh	r3, [r3, #0]
9000adca:	f64f 72ff 	movw	r2, #65535	; 0xffff
9000adce:	4293      	cmp	r3, r2
9000add0:	d103      	bne.n	9000adda <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
9000add2:	4b18      	ldr	r3, [pc, #96]	; (9000ae34 <tcp_new_port+0x84>)
9000add4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
9000add8:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
9000adda:	2300      	movs	r3, #0
9000addc:	71fb      	strb	r3, [r7, #7]
9000adde:	e01e      	b.n	9000ae1e <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
9000ade0:	79fb      	ldrb	r3, [r7, #7]
9000ade2:	4a15      	ldr	r2, [pc, #84]	; (9000ae38 <tcp_new_port+0x88>)
9000ade4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
9000ade8:	681b      	ldr	r3, [r3, #0]
9000adea:	603b      	str	r3, [r7, #0]
9000adec:	e011      	b.n	9000ae12 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
9000adee:	683b      	ldr	r3, [r7, #0]
9000adf0:	8ada      	ldrh	r2, [r3, #22]
9000adf2:	4b10      	ldr	r3, [pc, #64]	; (9000ae34 <tcp_new_port+0x84>)
9000adf4:	881b      	ldrh	r3, [r3, #0]
9000adf6:	429a      	cmp	r2, r3
9000adf8:	d108      	bne.n	9000ae0c <tcp_new_port+0x5c>
        n++;
9000adfa:	88bb      	ldrh	r3, [r7, #4]
9000adfc:	3301      	adds	r3, #1
9000adfe:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
9000ae00:	88bb      	ldrh	r3, [r7, #4]
9000ae02:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
9000ae06:	d3d8      	bcc.n	9000adba <tcp_new_port+0xa>
          return 0;
9000ae08:	2300      	movs	r3, #0
9000ae0a:	e00d      	b.n	9000ae28 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
9000ae0c:	683b      	ldr	r3, [r7, #0]
9000ae0e:	68db      	ldr	r3, [r3, #12]
9000ae10:	603b      	str	r3, [r7, #0]
9000ae12:	683b      	ldr	r3, [r7, #0]
9000ae14:	2b00      	cmp	r3, #0
9000ae16:	d1ea      	bne.n	9000adee <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
9000ae18:	79fb      	ldrb	r3, [r7, #7]
9000ae1a:	3301      	adds	r3, #1
9000ae1c:	71fb      	strb	r3, [r7, #7]
9000ae1e:	79fb      	ldrb	r3, [r7, #7]
9000ae20:	2b03      	cmp	r3, #3
9000ae22:	d9dd      	bls.n	9000ade0 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
9000ae24:	4b03      	ldr	r3, [pc, #12]	; (9000ae34 <tcp_new_port+0x84>)
9000ae26:	881b      	ldrh	r3, [r3, #0]
}
9000ae28:	4618      	mov	r0, r3
9000ae2a:	370c      	adds	r7, #12
9000ae2c:	46bd      	mov	sp, r7
9000ae2e:	f85d 7b04 	ldr.w	r7, [sp], #4
9000ae32:	4770      	bx	lr
9000ae34:	24000028 	.word	0x24000028
9000ae38:	900174a8 	.word	0x900174a8

9000ae3c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
9000ae3c:	b5b0      	push	{r4, r5, r7, lr}
9000ae3e:	b090      	sub	sp, #64	; 0x40
9000ae40:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
9000ae42:	2300      	movs	r3, #0
9000ae44:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
9000ae48:	4b94      	ldr	r3, [pc, #592]	; (9000b09c <tcp_slowtmr+0x260>)
9000ae4a:	681b      	ldr	r3, [r3, #0]
9000ae4c:	3301      	adds	r3, #1
9000ae4e:	4a93      	ldr	r2, [pc, #588]	; (9000b09c <tcp_slowtmr+0x260>)
9000ae50:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
9000ae52:	4b93      	ldr	r3, [pc, #588]	; (9000b0a0 <tcp_slowtmr+0x264>)
9000ae54:	781b      	ldrb	r3, [r3, #0]
9000ae56:	3301      	adds	r3, #1
9000ae58:	b2da      	uxtb	r2, r3
9000ae5a:	4b91      	ldr	r3, [pc, #580]	; (9000b0a0 <tcp_slowtmr+0x264>)
9000ae5c:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
9000ae5e:	2300      	movs	r3, #0
9000ae60:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
9000ae62:	4b90      	ldr	r3, [pc, #576]	; (9000b0a4 <tcp_slowtmr+0x268>)
9000ae64:	681b      	ldr	r3, [r3, #0]
9000ae66:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
9000ae68:	e29d      	b.n	9000b3a6 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
9000ae6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000ae6c:	7d1b      	ldrb	r3, [r3, #20]
9000ae6e:	2b00      	cmp	r3, #0
9000ae70:	d106      	bne.n	9000ae80 <tcp_slowtmr+0x44>
9000ae72:	4b8d      	ldr	r3, [pc, #564]	; (9000b0a8 <tcp_slowtmr+0x26c>)
9000ae74:	f240 42be 	movw	r2, #1214	; 0x4be
9000ae78:	498c      	ldr	r1, [pc, #560]	; (9000b0ac <tcp_slowtmr+0x270>)
9000ae7a:	488d      	ldr	r0, [pc, #564]	; (9000b0b0 <tcp_slowtmr+0x274>)
9000ae7c:	f008 fbdc 	bl	90013638 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
9000ae80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000ae82:	7d1b      	ldrb	r3, [r3, #20]
9000ae84:	2b01      	cmp	r3, #1
9000ae86:	d106      	bne.n	9000ae96 <tcp_slowtmr+0x5a>
9000ae88:	4b87      	ldr	r3, [pc, #540]	; (9000b0a8 <tcp_slowtmr+0x26c>)
9000ae8a:	f240 42bf 	movw	r2, #1215	; 0x4bf
9000ae8e:	4989      	ldr	r1, [pc, #548]	; (9000b0b4 <tcp_slowtmr+0x278>)
9000ae90:	4887      	ldr	r0, [pc, #540]	; (9000b0b0 <tcp_slowtmr+0x274>)
9000ae92:	f008 fbd1 	bl	90013638 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
9000ae96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000ae98:	7d1b      	ldrb	r3, [r3, #20]
9000ae9a:	2b0a      	cmp	r3, #10
9000ae9c:	d106      	bne.n	9000aeac <tcp_slowtmr+0x70>
9000ae9e:	4b82      	ldr	r3, [pc, #520]	; (9000b0a8 <tcp_slowtmr+0x26c>)
9000aea0:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
9000aea4:	4984      	ldr	r1, [pc, #528]	; (9000b0b8 <tcp_slowtmr+0x27c>)
9000aea6:	4882      	ldr	r0, [pc, #520]	; (9000b0b0 <tcp_slowtmr+0x274>)
9000aea8:	f008 fbc6 	bl	90013638 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
9000aeac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000aeae:	7f9a      	ldrb	r2, [r3, #30]
9000aeb0:	4b7b      	ldr	r3, [pc, #492]	; (9000b0a0 <tcp_slowtmr+0x264>)
9000aeb2:	781b      	ldrb	r3, [r3, #0]
9000aeb4:	429a      	cmp	r2, r3
9000aeb6:	d105      	bne.n	9000aec4 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
9000aeb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000aeba:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
9000aebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000aebe:	68db      	ldr	r3, [r3, #12]
9000aec0:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
9000aec2:	e270      	b.n	9000b3a6 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
9000aec4:	4b76      	ldr	r3, [pc, #472]	; (9000b0a0 <tcp_slowtmr+0x264>)
9000aec6:	781a      	ldrb	r2, [r3, #0]
9000aec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000aeca:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
9000aecc:	2300      	movs	r3, #0
9000aece:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
9000aed2:	2300      	movs	r3, #0
9000aed4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
9000aed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000aeda:	7d1b      	ldrb	r3, [r3, #20]
9000aedc:	2b02      	cmp	r3, #2
9000aede:	d10a      	bne.n	9000aef6 <tcp_slowtmr+0xba>
9000aee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000aee2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
9000aee6:	2b05      	cmp	r3, #5
9000aee8:	d905      	bls.n	9000aef6 <tcp_slowtmr+0xba>
      ++pcb_remove;
9000aeea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
9000aeee:	3301      	adds	r3, #1
9000aef0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
9000aef4:	e11e      	b.n	9000b134 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
9000aef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000aef8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
9000aefc:	2b0b      	cmp	r3, #11
9000aefe:	d905      	bls.n	9000af0c <tcp_slowtmr+0xd0>
      ++pcb_remove;
9000af00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
9000af04:	3301      	adds	r3, #1
9000af06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
9000af0a:	e113      	b.n	9000b134 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
9000af0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000af0e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
9000af12:	2b00      	cmp	r3, #0
9000af14:	d075      	beq.n	9000b002 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
9000af16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000af18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
9000af1a:	2b00      	cmp	r3, #0
9000af1c:	d006      	beq.n	9000af2c <tcp_slowtmr+0xf0>
9000af1e:	4b62      	ldr	r3, [pc, #392]	; (9000b0a8 <tcp_slowtmr+0x26c>)
9000af20:	f240 42d4 	movw	r2, #1236	; 0x4d4
9000af24:	4965      	ldr	r1, [pc, #404]	; (9000b0bc <tcp_slowtmr+0x280>)
9000af26:	4862      	ldr	r0, [pc, #392]	; (9000b0b0 <tcp_slowtmr+0x274>)
9000af28:	f008 fb86 	bl	90013638 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
9000af2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000af2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
9000af30:	2b00      	cmp	r3, #0
9000af32:	d106      	bne.n	9000af42 <tcp_slowtmr+0x106>
9000af34:	4b5c      	ldr	r3, [pc, #368]	; (9000b0a8 <tcp_slowtmr+0x26c>)
9000af36:	f240 42d5 	movw	r2, #1237	; 0x4d5
9000af3a:	4961      	ldr	r1, [pc, #388]	; (9000b0c0 <tcp_slowtmr+0x284>)
9000af3c:	485c      	ldr	r0, [pc, #368]	; (9000b0b0 <tcp_slowtmr+0x274>)
9000af3e:	f008 fb7b 	bl	90013638 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
9000af42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000af44:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
9000af48:	2b0b      	cmp	r3, #11
9000af4a:	d905      	bls.n	9000af58 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
9000af4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
9000af50:	3301      	adds	r3, #1
9000af52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
9000af56:	e0ed      	b.n	9000b134 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
9000af58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000af5a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
9000af5e:	3b01      	subs	r3, #1
9000af60:	4a58      	ldr	r2, [pc, #352]	; (9000b0c4 <tcp_slowtmr+0x288>)
9000af62:	5cd3      	ldrb	r3, [r2, r3]
9000af64:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
9000af66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000af68:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
9000af6c:	7c7a      	ldrb	r2, [r7, #17]
9000af6e:	429a      	cmp	r2, r3
9000af70:	d907      	bls.n	9000af82 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
9000af72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000af74:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
9000af78:	3301      	adds	r3, #1
9000af7a:	b2da      	uxtb	r2, r3
9000af7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000af7e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
9000af82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000af84:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
9000af88:	7c7a      	ldrb	r2, [r7, #17]
9000af8a:	429a      	cmp	r2, r3
9000af8c:	f200 80d2 	bhi.w	9000b134 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
9000af90:	2301      	movs	r3, #1
9000af92:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
9000af94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000af96:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
9000af9a:	2b00      	cmp	r3, #0
9000af9c:	d108      	bne.n	9000afb0 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
9000af9e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
9000afa0:	f005 f96e 	bl	90010280 <tcp_zero_window_probe>
9000afa4:	4603      	mov	r3, r0
9000afa6:	2b00      	cmp	r3, #0
9000afa8:	d014      	beq.n	9000afd4 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
9000afaa:	2300      	movs	r3, #0
9000afac:	623b      	str	r3, [r7, #32]
9000afae:	e011      	b.n	9000afd4 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
9000afb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000afb2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
9000afb6:	4619      	mov	r1, r3
9000afb8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
9000afba:	f004 f833 	bl	9000f024 <tcp_split_unsent_seg>
9000afbe:	4603      	mov	r3, r0
9000afc0:	2b00      	cmp	r3, #0
9000afc2:	d107      	bne.n	9000afd4 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
9000afc4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
9000afc6:	f004 fab3 	bl	9000f530 <tcp_output>
9000afca:	4603      	mov	r3, r0
9000afcc:	2b00      	cmp	r3, #0
9000afce:	d101      	bne.n	9000afd4 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
9000afd0:	2300      	movs	r3, #0
9000afd2:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
9000afd4:	6a3b      	ldr	r3, [r7, #32]
9000afd6:	2b00      	cmp	r3, #0
9000afd8:	f000 80ac 	beq.w	9000b134 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
9000afdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000afde:	2200      	movs	r2, #0
9000afe0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
9000afe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000afe6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
9000afea:	2b06      	cmp	r3, #6
9000afec:	f200 80a2 	bhi.w	9000b134 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
9000aff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000aff2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
9000aff6:	3301      	adds	r3, #1
9000aff8:	b2da      	uxtb	r2, r3
9000affa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000affc:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
9000b000:	e098      	b.n	9000b134 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
9000b002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000b004:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
9000b008:	2b00      	cmp	r3, #0
9000b00a:	db0f      	blt.n	9000b02c <tcp_slowtmr+0x1f0>
9000b00c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000b00e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
9000b012:	f647 72ff 	movw	r2, #32767	; 0x7fff
9000b016:	4293      	cmp	r3, r2
9000b018:	d008      	beq.n	9000b02c <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
9000b01a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000b01c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
9000b020:	b29b      	uxth	r3, r3
9000b022:	3301      	adds	r3, #1
9000b024:	b29b      	uxth	r3, r3
9000b026:	b21a      	sxth	r2, r3
9000b028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000b02a:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
9000b02c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000b02e:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
9000b032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000b034:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
9000b038:	429a      	cmp	r2, r3
9000b03a:	db7b      	blt.n	9000b134 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
9000b03c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
9000b03e:	f004 fd69 	bl	9000fb14 <tcp_rexmit_rto_prepare>
9000b042:	4603      	mov	r3, r0
9000b044:	2b00      	cmp	r3, #0
9000b046:	d007      	beq.n	9000b058 <tcp_slowtmr+0x21c>
9000b048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000b04a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
9000b04c:	2b00      	cmp	r3, #0
9000b04e:	d171      	bne.n	9000b134 <tcp_slowtmr+0x2f8>
9000b050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000b052:	6edb      	ldr	r3, [r3, #108]	; 0x6c
9000b054:	2b00      	cmp	r3, #0
9000b056:	d06d      	beq.n	9000b134 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
9000b058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000b05a:	7d1b      	ldrb	r3, [r3, #20]
9000b05c:	2b02      	cmp	r3, #2
9000b05e:	d03a      	beq.n	9000b0d6 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
9000b060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000b062:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
9000b066:	2b0c      	cmp	r3, #12
9000b068:	bf28      	it	cs
9000b06a:	230c      	movcs	r3, #12
9000b06c:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
9000b06e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000b070:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
9000b074:	10db      	asrs	r3, r3, #3
9000b076:	b21b      	sxth	r3, r3
9000b078:	461a      	mov	r2, r3
9000b07a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000b07c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
9000b080:	4413      	add	r3, r2
9000b082:	7efa      	ldrb	r2, [r7, #27]
9000b084:	4910      	ldr	r1, [pc, #64]	; (9000b0c8 <tcp_slowtmr+0x28c>)
9000b086:	5c8a      	ldrb	r2, [r1, r2]
9000b088:	4093      	lsls	r3, r2
9000b08a:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
9000b08c:	697b      	ldr	r3, [r7, #20]
9000b08e:	f647 72fe 	movw	r2, #32766	; 0x7ffe
9000b092:	4293      	cmp	r3, r2
9000b094:	dc1a      	bgt.n	9000b0cc <tcp_slowtmr+0x290>
9000b096:	697b      	ldr	r3, [r7, #20]
9000b098:	b21a      	sxth	r2, r3
9000b09a:	e019      	b.n	9000b0d0 <tcp_slowtmr+0x294>
9000b09c:	24011020 	.word	0x24011020
9000b0a0:	24011036 	.word	0x24011036
9000b0a4:	2401102c 	.word	0x2401102c
9000b0a8:	90015348 	.word	0x90015348
9000b0ac:	9001568c 	.word	0x9001568c
9000b0b0:	9001538c 	.word	0x9001538c
9000b0b4:	900156b8 	.word	0x900156b8
9000b0b8:	900156e4 	.word	0x900156e4
9000b0bc:	90015714 	.word	0x90015714
9000b0c0:	90015748 	.word	0x90015748
9000b0c4:	900174a0 	.word	0x900174a0
9000b0c8:	90017490 	.word	0x90017490
9000b0cc:	f647 72ff 	movw	r2, #32767	; 0x7fff
9000b0d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000b0d2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
9000b0d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000b0d8:	2200      	movs	r2, #0
9000b0da:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
9000b0dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000b0de:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
9000b0e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000b0e4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
9000b0e8:	4293      	cmp	r3, r2
9000b0ea:	bf28      	it	cs
9000b0ec:	4613      	movcs	r3, r2
9000b0ee:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
9000b0f0:	8a7b      	ldrh	r3, [r7, #18]
9000b0f2:	085b      	lsrs	r3, r3, #1
9000b0f4:	b29a      	uxth	r2, r3
9000b0f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000b0f8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
9000b0fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000b0fe:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
9000b102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000b104:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
9000b106:	005b      	lsls	r3, r3, #1
9000b108:	b29b      	uxth	r3, r3
9000b10a:	429a      	cmp	r2, r3
9000b10c:	d206      	bcs.n	9000b11c <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
9000b10e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000b110:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
9000b112:	005b      	lsls	r3, r3, #1
9000b114:	b29a      	uxth	r2, r3
9000b116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000b118:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
9000b11c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000b11e:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
9000b120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000b122:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
9000b126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000b128:	2200      	movs	r2, #0
9000b12a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
9000b12e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
9000b130:	f004 fd60 	bl	9000fbf4 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
9000b134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000b136:	7d1b      	ldrb	r3, [r3, #20]
9000b138:	2b06      	cmp	r3, #6
9000b13a:	d111      	bne.n	9000b160 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
9000b13c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000b13e:	8b5b      	ldrh	r3, [r3, #26]
9000b140:	f003 0310 	and.w	r3, r3, #16
9000b144:	2b00      	cmp	r3, #0
9000b146:	d00b      	beq.n	9000b160 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
9000b148:	4b9c      	ldr	r3, [pc, #624]	; (9000b3bc <tcp_slowtmr+0x580>)
9000b14a:	681a      	ldr	r2, [r3, #0]
9000b14c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000b14e:	6a1b      	ldr	r3, [r3, #32]
9000b150:	1ad3      	subs	r3, r2, r3
9000b152:	2b28      	cmp	r3, #40	; 0x28
9000b154:	d904      	bls.n	9000b160 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
9000b156:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
9000b15a:	3301      	adds	r3, #1
9000b15c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
9000b160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000b162:	7a5b      	ldrb	r3, [r3, #9]
9000b164:	f003 0308 	and.w	r3, r3, #8
9000b168:	2b00      	cmp	r3, #0
9000b16a:	d04a      	beq.n	9000b202 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
9000b16c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000b16e:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
9000b170:	2b04      	cmp	r3, #4
9000b172:	d003      	beq.n	9000b17c <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
9000b174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000b176:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
9000b178:	2b07      	cmp	r3, #7
9000b17a:	d142      	bne.n	9000b202 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
9000b17c:	4b8f      	ldr	r3, [pc, #572]	; (9000b3bc <tcp_slowtmr+0x580>)
9000b17e:	681a      	ldr	r2, [r3, #0]
9000b180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000b182:	6a1b      	ldr	r3, [r3, #32]
9000b184:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
9000b186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000b188:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
9000b18c:	4b8c      	ldr	r3, [pc, #560]	; (9000b3c0 <tcp_slowtmr+0x584>)
9000b18e:	440b      	add	r3, r1
9000b190:	498c      	ldr	r1, [pc, #560]	; (9000b3c4 <tcp_slowtmr+0x588>)
9000b192:	fba1 1303 	umull	r1, r3, r1, r3
9000b196:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
9000b198:	429a      	cmp	r2, r3
9000b19a:	d90a      	bls.n	9000b1b2 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
9000b19c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
9000b1a0:	3301      	adds	r3, #1
9000b1a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
9000b1a6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
9000b1aa:	3301      	adds	r3, #1
9000b1ac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
9000b1b0:	e027      	b.n	9000b202 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
9000b1b2:	4b82      	ldr	r3, [pc, #520]	; (9000b3bc <tcp_slowtmr+0x580>)
9000b1b4:	681a      	ldr	r2, [r3, #0]
9000b1b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000b1b8:	6a1b      	ldr	r3, [r3, #32]
9000b1ba:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
9000b1bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000b1be:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
9000b1c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000b1c4:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
9000b1c8:	4618      	mov	r0, r3
9000b1ca:	4b7f      	ldr	r3, [pc, #508]	; (9000b3c8 <tcp_slowtmr+0x58c>)
9000b1cc:	fb00 f303 	mul.w	r3, r0, r3
9000b1d0:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
9000b1d2:	497c      	ldr	r1, [pc, #496]	; (9000b3c4 <tcp_slowtmr+0x588>)
9000b1d4:	fba1 1303 	umull	r1, r3, r1, r3
9000b1d8:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
9000b1da:	429a      	cmp	r2, r3
9000b1dc:	d911      	bls.n	9000b202 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
9000b1de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
9000b1e0:	f005 f80e 	bl	90010200 <tcp_keepalive>
9000b1e4:	4603      	mov	r3, r0
9000b1e6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
9000b1ea:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
9000b1ee:	2b00      	cmp	r3, #0
9000b1f0:	d107      	bne.n	9000b202 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
9000b1f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000b1f4:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
9000b1f8:	3301      	adds	r3, #1
9000b1fa:	b2da      	uxtb	r2, r3
9000b1fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000b1fe:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
9000b202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000b204:	6f5b      	ldr	r3, [r3, #116]	; 0x74
9000b206:	2b00      	cmp	r3, #0
9000b208:	d011      	beq.n	9000b22e <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
9000b20a:	4b6c      	ldr	r3, [pc, #432]	; (9000b3bc <tcp_slowtmr+0x580>)
9000b20c:	681a      	ldr	r2, [r3, #0]
9000b20e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000b210:	6a1b      	ldr	r3, [r3, #32]
9000b212:	1ad2      	subs	r2, r2, r3
9000b214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000b216:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
9000b21a:	4619      	mov	r1, r3
9000b21c:	460b      	mov	r3, r1
9000b21e:	005b      	lsls	r3, r3, #1
9000b220:	440b      	add	r3, r1
9000b222:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
9000b224:	429a      	cmp	r2, r3
9000b226:	d302      	bcc.n	9000b22e <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
9000b228:	6af8      	ldr	r0, [r7, #44]	; 0x2c
9000b22a:	f000 fec9 	bl	9000bfc0 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
9000b22e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000b230:	7d1b      	ldrb	r3, [r3, #20]
9000b232:	2b03      	cmp	r3, #3
9000b234:	d10b      	bne.n	9000b24e <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
9000b236:	4b61      	ldr	r3, [pc, #388]	; (9000b3bc <tcp_slowtmr+0x580>)
9000b238:	681a      	ldr	r2, [r3, #0]
9000b23a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000b23c:	6a1b      	ldr	r3, [r3, #32]
9000b23e:	1ad3      	subs	r3, r2, r3
9000b240:	2b28      	cmp	r3, #40	; 0x28
9000b242:	d904      	bls.n	9000b24e <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
9000b244:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
9000b248:	3301      	adds	r3, #1
9000b24a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
9000b24e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000b250:	7d1b      	ldrb	r3, [r3, #20]
9000b252:	2b09      	cmp	r3, #9
9000b254:	d10b      	bne.n	9000b26e <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
9000b256:	4b59      	ldr	r3, [pc, #356]	; (9000b3bc <tcp_slowtmr+0x580>)
9000b258:	681a      	ldr	r2, [r3, #0]
9000b25a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000b25c:	6a1b      	ldr	r3, [r3, #32]
9000b25e:	1ad3      	subs	r3, r2, r3
9000b260:	2bf0      	cmp	r3, #240	; 0xf0
9000b262:	d904      	bls.n	9000b26e <tcp_slowtmr+0x432>
        ++pcb_remove;
9000b264:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
9000b268:	3301      	adds	r3, #1
9000b26a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
9000b26e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
9000b272:	2b00      	cmp	r3, #0
9000b274:	d060      	beq.n	9000b338 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
9000b276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000b278:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
9000b27c:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
9000b27e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
9000b280:	f000 fcea 	bl	9000bc58 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
9000b284:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000b286:	2b00      	cmp	r3, #0
9000b288:	d010      	beq.n	9000b2ac <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
9000b28a:	4b50      	ldr	r3, [pc, #320]	; (9000b3cc <tcp_slowtmr+0x590>)
9000b28c:	681b      	ldr	r3, [r3, #0]
9000b28e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
9000b290:	429a      	cmp	r2, r3
9000b292:	d106      	bne.n	9000b2a2 <tcp_slowtmr+0x466>
9000b294:	4b4e      	ldr	r3, [pc, #312]	; (9000b3d0 <tcp_slowtmr+0x594>)
9000b296:	f240 526d 	movw	r2, #1389	; 0x56d
9000b29a:	494e      	ldr	r1, [pc, #312]	; (9000b3d4 <tcp_slowtmr+0x598>)
9000b29c:	484e      	ldr	r0, [pc, #312]	; (9000b3d8 <tcp_slowtmr+0x59c>)
9000b29e:	f008 f9cb 	bl	90013638 <iprintf>
        prev->next = pcb->next;
9000b2a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000b2a4:	68da      	ldr	r2, [r3, #12]
9000b2a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000b2a8:	60da      	str	r2, [r3, #12]
9000b2aa:	e00f      	b.n	9000b2cc <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
9000b2ac:	4b47      	ldr	r3, [pc, #284]	; (9000b3cc <tcp_slowtmr+0x590>)
9000b2ae:	681b      	ldr	r3, [r3, #0]
9000b2b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
9000b2b2:	429a      	cmp	r2, r3
9000b2b4:	d006      	beq.n	9000b2c4 <tcp_slowtmr+0x488>
9000b2b6:	4b46      	ldr	r3, [pc, #280]	; (9000b3d0 <tcp_slowtmr+0x594>)
9000b2b8:	f240 5271 	movw	r2, #1393	; 0x571
9000b2bc:	4947      	ldr	r1, [pc, #284]	; (9000b3dc <tcp_slowtmr+0x5a0>)
9000b2be:	4846      	ldr	r0, [pc, #280]	; (9000b3d8 <tcp_slowtmr+0x59c>)
9000b2c0:	f008 f9ba 	bl	90013638 <iprintf>
        tcp_active_pcbs = pcb->next;
9000b2c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000b2c6:	68db      	ldr	r3, [r3, #12]
9000b2c8:	4a40      	ldr	r2, [pc, #256]	; (9000b3cc <tcp_slowtmr+0x590>)
9000b2ca:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
9000b2cc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
9000b2d0:	2b00      	cmp	r3, #0
9000b2d2:	d013      	beq.n	9000b2fc <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
9000b2d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000b2d6:	6d18      	ldr	r0, [r3, #80]	; 0x50
9000b2d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000b2da:	6a5c      	ldr	r4, [r3, #36]	; 0x24
9000b2dc:	6afd      	ldr	r5, [r7, #44]	; 0x2c
9000b2de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000b2e0:	3304      	adds	r3, #4
9000b2e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
9000b2e4:	8ad2      	ldrh	r2, [r2, #22]
9000b2e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
9000b2e8:	8b09      	ldrh	r1, [r1, #24]
9000b2ea:	9102      	str	r1, [sp, #8]
9000b2ec:	9201      	str	r2, [sp, #4]
9000b2ee:	9300      	str	r3, [sp, #0]
9000b2f0:	462b      	mov	r3, r5
9000b2f2:	4622      	mov	r2, r4
9000b2f4:	4601      	mov	r1, r0
9000b2f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
9000b2f8:	f004 fece 	bl	90010098 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
9000b2fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000b2fe:	691b      	ldr	r3, [r3, #16]
9000b300:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
9000b302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000b304:	7d1b      	ldrb	r3, [r3, #20]
9000b306:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
9000b308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000b30a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
9000b30c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000b30e:	68db      	ldr	r3, [r3, #12]
9000b310:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
9000b312:	6838      	ldr	r0, [r7, #0]
9000b314:	f7ff f83a 	bl	9000a38c <tcp_free>

      tcp_active_pcbs_changed = 0;
9000b318:	4b31      	ldr	r3, [pc, #196]	; (9000b3e0 <tcp_slowtmr+0x5a4>)
9000b31a:	2200      	movs	r2, #0
9000b31c:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
9000b31e:	68fb      	ldr	r3, [r7, #12]
9000b320:	2b00      	cmp	r3, #0
9000b322:	d004      	beq.n	9000b32e <tcp_slowtmr+0x4f2>
9000b324:	68fb      	ldr	r3, [r7, #12]
9000b326:	f06f 010c 	mvn.w	r1, #12
9000b32a:	68b8      	ldr	r0, [r7, #8]
9000b32c:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
9000b32e:	4b2c      	ldr	r3, [pc, #176]	; (9000b3e0 <tcp_slowtmr+0x5a4>)
9000b330:	781b      	ldrb	r3, [r3, #0]
9000b332:	2b00      	cmp	r3, #0
9000b334:	d037      	beq.n	9000b3a6 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
9000b336:	e592      	b.n	9000ae5e <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
9000b338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000b33a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
9000b33c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000b33e:	68db      	ldr	r3, [r3, #12]
9000b340:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
9000b342:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000b344:	7f1b      	ldrb	r3, [r3, #28]
9000b346:	3301      	adds	r3, #1
9000b348:	b2da      	uxtb	r2, r3
9000b34a:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000b34c:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
9000b34e:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000b350:	7f1a      	ldrb	r2, [r3, #28]
9000b352:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000b354:	7f5b      	ldrb	r3, [r3, #29]
9000b356:	429a      	cmp	r2, r3
9000b358:	d325      	bcc.n	9000b3a6 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
9000b35a:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000b35c:	2200      	movs	r2, #0
9000b35e:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
9000b360:	4b1f      	ldr	r3, [pc, #124]	; (9000b3e0 <tcp_slowtmr+0x5a4>)
9000b362:	2200      	movs	r2, #0
9000b364:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
9000b366:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000b368:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
9000b36c:	2b00      	cmp	r3, #0
9000b36e:	d00b      	beq.n	9000b388 <tcp_slowtmr+0x54c>
9000b370:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000b372:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
9000b376:	6aba      	ldr	r2, [r7, #40]	; 0x28
9000b378:	6912      	ldr	r2, [r2, #16]
9000b37a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
9000b37c:	4610      	mov	r0, r2
9000b37e:	4798      	blx	r3
9000b380:	4603      	mov	r3, r0
9000b382:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
9000b386:	e002      	b.n	9000b38e <tcp_slowtmr+0x552>
9000b388:	2300      	movs	r3, #0
9000b38a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
9000b38e:	4b14      	ldr	r3, [pc, #80]	; (9000b3e0 <tcp_slowtmr+0x5a4>)
9000b390:	781b      	ldrb	r3, [r3, #0]
9000b392:	2b00      	cmp	r3, #0
9000b394:	d000      	beq.n	9000b398 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
9000b396:	e562      	b.n	9000ae5e <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
9000b398:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
9000b39c:	2b00      	cmp	r3, #0
9000b39e:	d102      	bne.n	9000b3a6 <tcp_slowtmr+0x56a>
          tcp_output(prev);
9000b3a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
9000b3a2:	f004 f8c5 	bl	9000f530 <tcp_output>
  while (pcb != NULL) {
9000b3a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000b3a8:	2b00      	cmp	r3, #0
9000b3aa:	f47f ad5e 	bne.w	9000ae6a <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
9000b3ae:	2300      	movs	r3, #0
9000b3b0:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
9000b3b2:	4b0c      	ldr	r3, [pc, #48]	; (9000b3e4 <tcp_slowtmr+0x5a8>)
9000b3b4:	681b      	ldr	r3, [r3, #0]
9000b3b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
9000b3b8:	e069      	b.n	9000b48e <tcp_slowtmr+0x652>
9000b3ba:	bf00      	nop
9000b3bc:	24011020 	.word	0x24011020
9000b3c0:	000a4cb8 	.word	0x000a4cb8
9000b3c4:	10624dd3 	.word	0x10624dd3
9000b3c8:	000124f8 	.word	0x000124f8
9000b3cc:	2401102c 	.word	0x2401102c
9000b3d0:	90015348 	.word	0x90015348
9000b3d4:	90015780 	.word	0x90015780
9000b3d8:	9001538c 	.word	0x9001538c
9000b3dc:	900157ac 	.word	0x900157ac
9000b3e0:	24011034 	.word	0x24011034
9000b3e4:	24011030 	.word	0x24011030
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
9000b3e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000b3ea:	7d1b      	ldrb	r3, [r3, #20]
9000b3ec:	2b0a      	cmp	r3, #10
9000b3ee:	d006      	beq.n	9000b3fe <tcp_slowtmr+0x5c2>
9000b3f0:	4b2b      	ldr	r3, [pc, #172]	; (9000b4a0 <tcp_slowtmr+0x664>)
9000b3f2:	f240 52a1 	movw	r2, #1441	; 0x5a1
9000b3f6:	492b      	ldr	r1, [pc, #172]	; (9000b4a4 <tcp_slowtmr+0x668>)
9000b3f8:	482b      	ldr	r0, [pc, #172]	; (9000b4a8 <tcp_slowtmr+0x66c>)
9000b3fa:	f008 f91d 	bl	90013638 <iprintf>
    pcb_remove = 0;
9000b3fe:	2300      	movs	r3, #0
9000b400:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
9000b404:	4b29      	ldr	r3, [pc, #164]	; (9000b4ac <tcp_slowtmr+0x670>)
9000b406:	681a      	ldr	r2, [r3, #0]
9000b408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000b40a:	6a1b      	ldr	r3, [r3, #32]
9000b40c:	1ad3      	subs	r3, r2, r3
9000b40e:	2bf0      	cmp	r3, #240	; 0xf0
9000b410:	d904      	bls.n	9000b41c <tcp_slowtmr+0x5e0>
      ++pcb_remove;
9000b412:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
9000b416:	3301      	adds	r3, #1
9000b418:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
9000b41c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
9000b420:	2b00      	cmp	r3, #0
9000b422:	d02f      	beq.n	9000b484 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
9000b424:	6af8      	ldr	r0, [r7, #44]	; 0x2c
9000b426:	f000 fc17 	bl	9000bc58 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
9000b42a:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000b42c:	2b00      	cmp	r3, #0
9000b42e:	d010      	beq.n	9000b452 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
9000b430:	4b1f      	ldr	r3, [pc, #124]	; (9000b4b0 <tcp_slowtmr+0x674>)
9000b432:	681b      	ldr	r3, [r3, #0]
9000b434:	6afa      	ldr	r2, [r7, #44]	; 0x2c
9000b436:	429a      	cmp	r2, r3
9000b438:	d106      	bne.n	9000b448 <tcp_slowtmr+0x60c>
9000b43a:	4b19      	ldr	r3, [pc, #100]	; (9000b4a0 <tcp_slowtmr+0x664>)
9000b43c:	f240 52af 	movw	r2, #1455	; 0x5af
9000b440:	491c      	ldr	r1, [pc, #112]	; (9000b4b4 <tcp_slowtmr+0x678>)
9000b442:	4819      	ldr	r0, [pc, #100]	; (9000b4a8 <tcp_slowtmr+0x66c>)
9000b444:	f008 f8f8 	bl	90013638 <iprintf>
        prev->next = pcb->next;
9000b448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000b44a:	68da      	ldr	r2, [r3, #12]
9000b44c:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000b44e:	60da      	str	r2, [r3, #12]
9000b450:	e00f      	b.n	9000b472 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
9000b452:	4b17      	ldr	r3, [pc, #92]	; (9000b4b0 <tcp_slowtmr+0x674>)
9000b454:	681b      	ldr	r3, [r3, #0]
9000b456:	6afa      	ldr	r2, [r7, #44]	; 0x2c
9000b458:	429a      	cmp	r2, r3
9000b45a:	d006      	beq.n	9000b46a <tcp_slowtmr+0x62e>
9000b45c:	4b10      	ldr	r3, [pc, #64]	; (9000b4a0 <tcp_slowtmr+0x664>)
9000b45e:	f240 52b3 	movw	r2, #1459	; 0x5b3
9000b462:	4915      	ldr	r1, [pc, #84]	; (9000b4b8 <tcp_slowtmr+0x67c>)
9000b464:	4810      	ldr	r0, [pc, #64]	; (9000b4a8 <tcp_slowtmr+0x66c>)
9000b466:	f008 f8e7 	bl	90013638 <iprintf>
        tcp_tw_pcbs = pcb->next;
9000b46a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000b46c:	68db      	ldr	r3, [r3, #12]
9000b46e:	4a10      	ldr	r2, [pc, #64]	; (9000b4b0 <tcp_slowtmr+0x674>)
9000b470:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
9000b472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000b474:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
9000b476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000b478:	68db      	ldr	r3, [r3, #12]
9000b47a:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
9000b47c:	69f8      	ldr	r0, [r7, #28]
9000b47e:	f7fe ff85 	bl	9000a38c <tcp_free>
9000b482:	e004      	b.n	9000b48e <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
9000b484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000b486:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
9000b488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000b48a:	68db      	ldr	r3, [r3, #12]
9000b48c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
9000b48e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000b490:	2b00      	cmp	r3, #0
9000b492:	d1a9      	bne.n	9000b3e8 <tcp_slowtmr+0x5ac>
    }
  }
}
9000b494:	bf00      	nop
9000b496:	bf00      	nop
9000b498:	3730      	adds	r7, #48	; 0x30
9000b49a:	46bd      	mov	sp, r7
9000b49c:	bdb0      	pop	{r4, r5, r7, pc}
9000b49e:	bf00      	nop
9000b4a0:	90015348 	.word	0x90015348
9000b4a4:	900157d8 	.word	0x900157d8
9000b4a8:	9001538c 	.word	0x9001538c
9000b4ac:	24011020 	.word	0x24011020
9000b4b0:	24011030 	.word	0x24011030
9000b4b4:	90015808 	.word	0x90015808
9000b4b8:	90015830 	.word	0x90015830

9000b4bc <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
9000b4bc:	b580      	push	{r7, lr}
9000b4be:	b082      	sub	sp, #8
9000b4c0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
9000b4c2:	4b2d      	ldr	r3, [pc, #180]	; (9000b578 <tcp_fasttmr+0xbc>)
9000b4c4:	781b      	ldrb	r3, [r3, #0]
9000b4c6:	3301      	adds	r3, #1
9000b4c8:	b2da      	uxtb	r2, r3
9000b4ca:	4b2b      	ldr	r3, [pc, #172]	; (9000b578 <tcp_fasttmr+0xbc>)
9000b4cc:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
9000b4ce:	4b2b      	ldr	r3, [pc, #172]	; (9000b57c <tcp_fasttmr+0xc0>)
9000b4d0:	681b      	ldr	r3, [r3, #0]
9000b4d2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
9000b4d4:	e048      	b.n	9000b568 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
9000b4d6:	687b      	ldr	r3, [r7, #4]
9000b4d8:	7f9a      	ldrb	r2, [r3, #30]
9000b4da:	4b27      	ldr	r3, [pc, #156]	; (9000b578 <tcp_fasttmr+0xbc>)
9000b4dc:	781b      	ldrb	r3, [r3, #0]
9000b4de:	429a      	cmp	r2, r3
9000b4e0:	d03f      	beq.n	9000b562 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
9000b4e2:	4b25      	ldr	r3, [pc, #148]	; (9000b578 <tcp_fasttmr+0xbc>)
9000b4e4:	781a      	ldrb	r2, [r3, #0]
9000b4e6:	687b      	ldr	r3, [r7, #4]
9000b4e8:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
9000b4ea:	687b      	ldr	r3, [r7, #4]
9000b4ec:	8b5b      	ldrh	r3, [r3, #26]
9000b4ee:	f003 0301 	and.w	r3, r3, #1
9000b4f2:	2b00      	cmp	r3, #0
9000b4f4:	d010      	beq.n	9000b518 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
9000b4f6:	687b      	ldr	r3, [r7, #4]
9000b4f8:	8b5b      	ldrh	r3, [r3, #26]
9000b4fa:	f043 0302 	orr.w	r3, r3, #2
9000b4fe:	b29a      	uxth	r2, r3
9000b500:	687b      	ldr	r3, [r7, #4]
9000b502:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
9000b504:	6878      	ldr	r0, [r7, #4]
9000b506:	f004 f813 	bl	9000f530 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
9000b50a:	687b      	ldr	r3, [r7, #4]
9000b50c:	8b5b      	ldrh	r3, [r3, #26]
9000b50e:	f023 0303 	bic.w	r3, r3, #3
9000b512:	b29a      	uxth	r2, r3
9000b514:	687b      	ldr	r3, [r7, #4]
9000b516:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
9000b518:	687b      	ldr	r3, [r7, #4]
9000b51a:	8b5b      	ldrh	r3, [r3, #26]
9000b51c:	f003 0308 	and.w	r3, r3, #8
9000b520:	2b00      	cmp	r3, #0
9000b522:	d009      	beq.n	9000b538 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
9000b524:	687b      	ldr	r3, [r7, #4]
9000b526:	8b5b      	ldrh	r3, [r3, #26]
9000b528:	f023 0308 	bic.w	r3, r3, #8
9000b52c:	b29a      	uxth	r2, r3
9000b52e:	687b      	ldr	r3, [r7, #4]
9000b530:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
9000b532:	6878      	ldr	r0, [r7, #4]
9000b534:	f7ff f8be 	bl	9000a6b4 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
9000b538:	687b      	ldr	r3, [r7, #4]
9000b53a:	68db      	ldr	r3, [r3, #12]
9000b53c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
9000b53e:	687b      	ldr	r3, [r7, #4]
9000b540:	6f9b      	ldr	r3, [r3, #120]	; 0x78
9000b542:	2b00      	cmp	r3, #0
9000b544:	d00a      	beq.n	9000b55c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
9000b546:	4b0e      	ldr	r3, [pc, #56]	; (9000b580 <tcp_fasttmr+0xc4>)
9000b548:	2200      	movs	r2, #0
9000b54a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
9000b54c:	6878      	ldr	r0, [r7, #4]
9000b54e:	f000 f819 	bl	9000b584 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
9000b552:	4b0b      	ldr	r3, [pc, #44]	; (9000b580 <tcp_fasttmr+0xc4>)
9000b554:	781b      	ldrb	r3, [r3, #0]
9000b556:	2b00      	cmp	r3, #0
9000b558:	d000      	beq.n	9000b55c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
9000b55a:	e7b8      	b.n	9000b4ce <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
9000b55c:	683b      	ldr	r3, [r7, #0]
9000b55e:	607b      	str	r3, [r7, #4]
9000b560:	e002      	b.n	9000b568 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
9000b562:	687b      	ldr	r3, [r7, #4]
9000b564:	68db      	ldr	r3, [r3, #12]
9000b566:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
9000b568:	687b      	ldr	r3, [r7, #4]
9000b56a:	2b00      	cmp	r3, #0
9000b56c:	d1b3      	bne.n	9000b4d6 <tcp_fasttmr+0x1a>
    }
  }
}
9000b56e:	bf00      	nop
9000b570:	bf00      	nop
9000b572:	3708      	adds	r7, #8
9000b574:	46bd      	mov	sp, r7
9000b576:	bd80      	pop	{r7, pc}
9000b578:	24011036 	.word	0x24011036
9000b57c:	2401102c 	.word	0x2401102c
9000b580:	24011034 	.word	0x24011034

9000b584 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
9000b584:	b590      	push	{r4, r7, lr}
9000b586:	b085      	sub	sp, #20
9000b588:	af00      	add	r7, sp, #0
9000b58a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
9000b58c:	687b      	ldr	r3, [r7, #4]
9000b58e:	2b00      	cmp	r3, #0
9000b590:	d109      	bne.n	9000b5a6 <tcp_process_refused_data+0x22>
9000b592:	4b37      	ldr	r3, [pc, #220]	; (9000b670 <tcp_process_refused_data+0xec>)
9000b594:	f240 6209 	movw	r2, #1545	; 0x609
9000b598:	4936      	ldr	r1, [pc, #216]	; (9000b674 <tcp_process_refused_data+0xf0>)
9000b59a:	4837      	ldr	r0, [pc, #220]	; (9000b678 <tcp_process_refused_data+0xf4>)
9000b59c:	f008 f84c 	bl	90013638 <iprintf>
9000b5a0:	f06f 030f 	mvn.w	r3, #15
9000b5a4:	e060      	b.n	9000b668 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
9000b5a6:	687b      	ldr	r3, [r7, #4]
9000b5a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
9000b5aa:	7b5b      	ldrb	r3, [r3, #13]
9000b5ac:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
9000b5ae:	687b      	ldr	r3, [r7, #4]
9000b5b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
9000b5b2:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
9000b5b4:	687b      	ldr	r3, [r7, #4]
9000b5b6:	2200      	movs	r2, #0
9000b5b8:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
9000b5ba:	687b      	ldr	r3, [r7, #4]
9000b5bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
9000b5c0:	2b00      	cmp	r3, #0
9000b5c2:	d00b      	beq.n	9000b5dc <tcp_process_refused_data+0x58>
9000b5c4:	687b      	ldr	r3, [r7, #4]
9000b5c6:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
9000b5ca:	687b      	ldr	r3, [r7, #4]
9000b5cc:	6918      	ldr	r0, [r3, #16]
9000b5ce:	2300      	movs	r3, #0
9000b5d0:	68ba      	ldr	r2, [r7, #8]
9000b5d2:	6879      	ldr	r1, [r7, #4]
9000b5d4:	47a0      	blx	r4
9000b5d6:	4603      	mov	r3, r0
9000b5d8:	73fb      	strb	r3, [r7, #15]
9000b5da:	e007      	b.n	9000b5ec <tcp_process_refused_data+0x68>
9000b5dc:	2300      	movs	r3, #0
9000b5de:	68ba      	ldr	r2, [r7, #8]
9000b5e0:	6879      	ldr	r1, [r7, #4]
9000b5e2:	2000      	movs	r0, #0
9000b5e4:	f000 f8c2 	bl	9000b76c <tcp_recv_null>
9000b5e8:	4603      	mov	r3, r0
9000b5ea:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
9000b5ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
9000b5f0:	2b00      	cmp	r3, #0
9000b5f2:	d12a      	bne.n	9000b64a <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
9000b5f4:	7bbb      	ldrb	r3, [r7, #14]
9000b5f6:	f003 0320 	and.w	r3, r3, #32
9000b5fa:	2b00      	cmp	r3, #0
9000b5fc:	d033      	beq.n	9000b666 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
9000b5fe:	687b      	ldr	r3, [r7, #4]
9000b600:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
9000b602:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
9000b606:	d005      	beq.n	9000b614 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
9000b608:	687b      	ldr	r3, [r7, #4]
9000b60a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
9000b60c:	3301      	adds	r3, #1
9000b60e:	b29a      	uxth	r2, r3
9000b610:	687b      	ldr	r3, [r7, #4]
9000b612:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
9000b614:	687b      	ldr	r3, [r7, #4]
9000b616:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
9000b61a:	2b00      	cmp	r3, #0
9000b61c:	d00b      	beq.n	9000b636 <tcp_process_refused_data+0xb2>
9000b61e:	687b      	ldr	r3, [r7, #4]
9000b620:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
9000b624:	687b      	ldr	r3, [r7, #4]
9000b626:	6918      	ldr	r0, [r3, #16]
9000b628:	2300      	movs	r3, #0
9000b62a:	2200      	movs	r2, #0
9000b62c:	6879      	ldr	r1, [r7, #4]
9000b62e:	47a0      	blx	r4
9000b630:	4603      	mov	r3, r0
9000b632:	73fb      	strb	r3, [r7, #15]
9000b634:	e001      	b.n	9000b63a <tcp_process_refused_data+0xb6>
9000b636:	2300      	movs	r3, #0
9000b638:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
9000b63a:	f997 300f 	ldrsb.w	r3, [r7, #15]
9000b63e:	f113 0f0d 	cmn.w	r3, #13
9000b642:	d110      	bne.n	9000b666 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
9000b644:	f06f 030c 	mvn.w	r3, #12
9000b648:	e00e      	b.n	9000b668 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
9000b64a:	f997 300f 	ldrsb.w	r3, [r7, #15]
9000b64e:	f113 0f0d 	cmn.w	r3, #13
9000b652:	d102      	bne.n	9000b65a <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
9000b654:	f06f 030c 	mvn.w	r3, #12
9000b658:	e006      	b.n	9000b668 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
9000b65a:	687b      	ldr	r3, [r7, #4]
9000b65c:	68ba      	ldr	r2, [r7, #8]
9000b65e:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
9000b660:	f06f 0304 	mvn.w	r3, #4
9000b664:	e000      	b.n	9000b668 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
9000b666:	2300      	movs	r3, #0
}
9000b668:	4618      	mov	r0, r3
9000b66a:	3714      	adds	r7, #20
9000b66c:	46bd      	mov	sp, r7
9000b66e:	bd90      	pop	{r4, r7, pc}
9000b670:	90015348 	.word	0x90015348
9000b674:	90015858 	.word	0x90015858
9000b678:	9001538c 	.word	0x9001538c

9000b67c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
9000b67c:	b580      	push	{r7, lr}
9000b67e:	b084      	sub	sp, #16
9000b680:	af00      	add	r7, sp, #0
9000b682:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
9000b684:	e007      	b.n	9000b696 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
9000b686:	687b      	ldr	r3, [r7, #4]
9000b688:	681b      	ldr	r3, [r3, #0]
9000b68a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
9000b68c:	6878      	ldr	r0, [r7, #4]
9000b68e:	f000 f80a 	bl	9000b6a6 <tcp_seg_free>
    seg = next;
9000b692:	68fb      	ldr	r3, [r7, #12]
9000b694:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
9000b696:	687b      	ldr	r3, [r7, #4]
9000b698:	2b00      	cmp	r3, #0
9000b69a:	d1f4      	bne.n	9000b686 <tcp_segs_free+0xa>
  }
}
9000b69c:	bf00      	nop
9000b69e:	bf00      	nop
9000b6a0:	3710      	adds	r7, #16
9000b6a2:	46bd      	mov	sp, r7
9000b6a4:	bd80      	pop	{r7, pc}

9000b6a6 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
9000b6a6:	b580      	push	{r7, lr}
9000b6a8:	b082      	sub	sp, #8
9000b6aa:	af00      	add	r7, sp, #0
9000b6ac:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
9000b6ae:	687b      	ldr	r3, [r7, #4]
9000b6b0:	2b00      	cmp	r3, #0
9000b6b2:	d00c      	beq.n	9000b6ce <tcp_seg_free+0x28>
    if (seg->p != NULL) {
9000b6b4:	687b      	ldr	r3, [r7, #4]
9000b6b6:	685b      	ldr	r3, [r3, #4]
9000b6b8:	2b00      	cmp	r3, #0
9000b6ba:	d004      	beq.n	9000b6c6 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
9000b6bc:	687b      	ldr	r3, [r7, #4]
9000b6be:	685b      	ldr	r3, [r3, #4]
9000b6c0:	4618      	mov	r0, r3
9000b6c2:	f7fe fbb7 	bl	90009e34 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
9000b6c6:	6879      	ldr	r1, [r7, #4]
9000b6c8:	2003      	movs	r0, #3
9000b6ca:	f7fd fd0f 	bl	900090ec <memp_free>
  }
}
9000b6ce:	bf00      	nop
9000b6d0:	3708      	adds	r7, #8
9000b6d2:	46bd      	mov	sp, r7
9000b6d4:	bd80      	pop	{r7, pc}
	...

9000b6d8 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
9000b6d8:	b580      	push	{r7, lr}
9000b6da:	b082      	sub	sp, #8
9000b6dc:	af00      	add	r7, sp, #0
9000b6de:	6078      	str	r0, [r7, #4]
9000b6e0:	460b      	mov	r3, r1
9000b6e2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
9000b6e4:	687b      	ldr	r3, [r7, #4]
9000b6e6:	2b00      	cmp	r3, #0
9000b6e8:	d107      	bne.n	9000b6fa <tcp_setprio+0x22>
9000b6ea:	4b07      	ldr	r3, [pc, #28]	; (9000b708 <tcp_setprio+0x30>)
9000b6ec:	f44f 62ce 	mov.w	r2, #1648	; 0x670
9000b6f0:	4906      	ldr	r1, [pc, #24]	; (9000b70c <tcp_setprio+0x34>)
9000b6f2:	4807      	ldr	r0, [pc, #28]	; (9000b710 <tcp_setprio+0x38>)
9000b6f4:	f007 ffa0 	bl	90013638 <iprintf>
9000b6f8:	e002      	b.n	9000b700 <tcp_setprio+0x28>

  pcb->prio = prio;
9000b6fa:	687b      	ldr	r3, [r7, #4]
9000b6fc:	78fa      	ldrb	r2, [r7, #3]
9000b6fe:	755a      	strb	r2, [r3, #21]
}
9000b700:	3708      	adds	r7, #8
9000b702:	46bd      	mov	sp, r7
9000b704:	bd80      	pop	{r7, pc}
9000b706:	bf00      	nop
9000b708:	90015348 	.word	0x90015348
9000b70c:	90015880 	.word	0x90015880
9000b710:	9001538c 	.word	0x9001538c

9000b714 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
9000b714:	b580      	push	{r7, lr}
9000b716:	b084      	sub	sp, #16
9000b718:	af00      	add	r7, sp, #0
9000b71a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
9000b71c:	687b      	ldr	r3, [r7, #4]
9000b71e:	2b00      	cmp	r3, #0
9000b720:	d106      	bne.n	9000b730 <tcp_seg_copy+0x1c>
9000b722:	4b0f      	ldr	r3, [pc, #60]	; (9000b760 <tcp_seg_copy+0x4c>)
9000b724:	f240 6282 	movw	r2, #1666	; 0x682
9000b728:	490e      	ldr	r1, [pc, #56]	; (9000b764 <tcp_seg_copy+0x50>)
9000b72a:	480f      	ldr	r0, [pc, #60]	; (9000b768 <tcp_seg_copy+0x54>)
9000b72c:	f007 ff84 	bl	90013638 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
9000b730:	2003      	movs	r0, #3
9000b732:	f7fd fc65 	bl	90009000 <memp_malloc>
9000b736:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
9000b738:	68fb      	ldr	r3, [r7, #12]
9000b73a:	2b00      	cmp	r3, #0
9000b73c:	d101      	bne.n	9000b742 <tcp_seg_copy+0x2e>
    return NULL;
9000b73e:	2300      	movs	r3, #0
9000b740:	e00a      	b.n	9000b758 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
9000b742:	2210      	movs	r2, #16
9000b744:	6879      	ldr	r1, [r7, #4]
9000b746:	68f8      	ldr	r0, [r7, #12]
9000b748:	f007 fecb 	bl	900134e2 <memcpy>
  pbuf_ref(cseg->p);
9000b74c:	68fb      	ldr	r3, [r7, #12]
9000b74e:	685b      	ldr	r3, [r3, #4]
9000b750:	4618      	mov	r0, r3
9000b752:	f7fe fc15 	bl	90009f80 <pbuf_ref>
  return cseg;
9000b756:	68fb      	ldr	r3, [r7, #12]
}
9000b758:	4618      	mov	r0, r3
9000b75a:	3710      	adds	r7, #16
9000b75c:	46bd      	mov	sp, r7
9000b75e:	bd80      	pop	{r7, pc}
9000b760:	90015348 	.word	0x90015348
9000b764:	9001589c 	.word	0x9001589c
9000b768:	9001538c 	.word	0x9001538c

9000b76c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
9000b76c:	b580      	push	{r7, lr}
9000b76e:	b084      	sub	sp, #16
9000b770:	af00      	add	r7, sp, #0
9000b772:	60f8      	str	r0, [r7, #12]
9000b774:	60b9      	str	r1, [r7, #8]
9000b776:	607a      	str	r2, [r7, #4]
9000b778:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
9000b77a:	68bb      	ldr	r3, [r7, #8]
9000b77c:	2b00      	cmp	r3, #0
9000b77e:	d109      	bne.n	9000b794 <tcp_recv_null+0x28>
9000b780:	4b12      	ldr	r3, [pc, #72]	; (9000b7cc <tcp_recv_null+0x60>)
9000b782:	f44f 62d3 	mov.w	r2, #1688	; 0x698
9000b786:	4912      	ldr	r1, [pc, #72]	; (9000b7d0 <tcp_recv_null+0x64>)
9000b788:	4812      	ldr	r0, [pc, #72]	; (9000b7d4 <tcp_recv_null+0x68>)
9000b78a:	f007 ff55 	bl	90013638 <iprintf>
9000b78e:	f06f 030f 	mvn.w	r3, #15
9000b792:	e016      	b.n	9000b7c2 <tcp_recv_null+0x56>

  if (p != NULL) {
9000b794:	687b      	ldr	r3, [r7, #4]
9000b796:	2b00      	cmp	r3, #0
9000b798:	d009      	beq.n	9000b7ae <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
9000b79a:	687b      	ldr	r3, [r7, #4]
9000b79c:	891b      	ldrh	r3, [r3, #8]
9000b79e:	4619      	mov	r1, r3
9000b7a0:	68b8      	ldr	r0, [r7, #8]
9000b7a2:	f7ff fab5 	bl	9000ad10 <tcp_recved>
    pbuf_free(p);
9000b7a6:	6878      	ldr	r0, [r7, #4]
9000b7a8:	f7fe fb44 	bl	90009e34 <pbuf_free>
9000b7ac:	e008      	b.n	9000b7c0 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
9000b7ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
9000b7b2:	2b00      	cmp	r3, #0
9000b7b4:	d104      	bne.n	9000b7c0 <tcp_recv_null+0x54>
    return tcp_close(pcb);
9000b7b6:	68b8      	ldr	r0, [r7, #8]
9000b7b8:	f7fe ffe6 	bl	9000a788 <tcp_close>
9000b7bc:	4603      	mov	r3, r0
9000b7be:	e000      	b.n	9000b7c2 <tcp_recv_null+0x56>
  }
  return ERR_OK;
9000b7c0:	2300      	movs	r3, #0
}
9000b7c2:	4618      	mov	r0, r3
9000b7c4:	3710      	adds	r7, #16
9000b7c6:	46bd      	mov	sp, r7
9000b7c8:	bd80      	pop	{r7, pc}
9000b7ca:	bf00      	nop
9000b7cc:	90015348 	.word	0x90015348
9000b7d0:	900158b8 	.word	0x900158b8
9000b7d4:	9001538c 	.word	0x9001538c

9000b7d8 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
9000b7d8:	b580      	push	{r7, lr}
9000b7da:	b086      	sub	sp, #24
9000b7dc:	af00      	add	r7, sp, #0
9000b7de:	4603      	mov	r3, r0
9000b7e0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
9000b7e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
9000b7e6:	2b00      	cmp	r3, #0
9000b7e8:	db01      	blt.n	9000b7ee <tcp_kill_prio+0x16>
9000b7ea:	79fb      	ldrb	r3, [r7, #7]
9000b7ec:	e000      	b.n	9000b7f0 <tcp_kill_prio+0x18>
9000b7ee:	237f      	movs	r3, #127	; 0x7f
9000b7f0:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
9000b7f2:	7afb      	ldrb	r3, [r7, #11]
9000b7f4:	2b00      	cmp	r3, #0
9000b7f6:	d034      	beq.n	9000b862 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
9000b7f8:	7afb      	ldrb	r3, [r7, #11]
9000b7fa:	3b01      	subs	r3, #1
9000b7fc:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
9000b7fe:	2300      	movs	r3, #0
9000b800:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
9000b802:	2300      	movs	r3, #0
9000b804:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
9000b806:	4b19      	ldr	r3, [pc, #100]	; (9000b86c <tcp_kill_prio+0x94>)
9000b808:	681b      	ldr	r3, [r3, #0]
9000b80a:	617b      	str	r3, [r7, #20]
9000b80c:	e01f      	b.n	9000b84e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
9000b80e:	697b      	ldr	r3, [r7, #20]
9000b810:	7d5b      	ldrb	r3, [r3, #21]
9000b812:	7afa      	ldrb	r2, [r7, #11]
9000b814:	429a      	cmp	r2, r3
9000b816:	d80c      	bhi.n	9000b832 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
9000b818:	697b      	ldr	r3, [r7, #20]
9000b81a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
9000b81c:	7afa      	ldrb	r2, [r7, #11]
9000b81e:	429a      	cmp	r2, r3
9000b820:	d112      	bne.n	9000b848 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
9000b822:	4b13      	ldr	r3, [pc, #76]	; (9000b870 <tcp_kill_prio+0x98>)
9000b824:	681a      	ldr	r2, [r3, #0]
9000b826:	697b      	ldr	r3, [r7, #20]
9000b828:	6a1b      	ldr	r3, [r3, #32]
9000b82a:	1ad3      	subs	r3, r2, r3
9000b82c:	68fa      	ldr	r2, [r7, #12]
9000b82e:	429a      	cmp	r2, r3
9000b830:	d80a      	bhi.n	9000b848 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
9000b832:	4b0f      	ldr	r3, [pc, #60]	; (9000b870 <tcp_kill_prio+0x98>)
9000b834:	681a      	ldr	r2, [r3, #0]
9000b836:	697b      	ldr	r3, [r7, #20]
9000b838:	6a1b      	ldr	r3, [r3, #32]
9000b83a:	1ad3      	subs	r3, r2, r3
9000b83c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
9000b83e:	697b      	ldr	r3, [r7, #20]
9000b840:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
9000b842:	697b      	ldr	r3, [r7, #20]
9000b844:	7d5b      	ldrb	r3, [r3, #21]
9000b846:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
9000b848:	697b      	ldr	r3, [r7, #20]
9000b84a:	68db      	ldr	r3, [r3, #12]
9000b84c:	617b      	str	r3, [r7, #20]
9000b84e:	697b      	ldr	r3, [r7, #20]
9000b850:	2b00      	cmp	r3, #0
9000b852:	d1dc      	bne.n	9000b80e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
9000b854:	693b      	ldr	r3, [r7, #16]
9000b856:	2b00      	cmp	r3, #0
9000b858:	d004      	beq.n	9000b864 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
9000b85a:	6938      	ldr	r0, [r7, #16]
9000b85c:	f7ff f87e 	bl	9000a95c <tcp_abort>
9000b860:	e000      	b.n	9000b864 <tcp_kill_prio+0x8c>
    return;
9000b862:	bf00      	nop
  }
}
9000b864:	3718      	adds	r7, #24
9000b866:	46bd      	mov	sp, r7
9000b868:	bd80      	pop	{r7, pc}
9000b86a:	bf00      	nop
9000b86c:	2401102c 	.word	0x2401102c
9000b870:	24011020 	.word	0x24011020

9000b874 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
9000b874:	b580      	push	{r7, lr}
9000b876:	b086      	sub	sp, #24
9000b878:	af00      	add	r7, sp, #0
9000b87a:	4603      	mov	r3, r0
9000b87c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
9000b87e:	79fb      	ldrb	r3, [r7, #7]
9000b880:	2b08      	cmp	r3, #8
9000b882:	d009      	beq.n	9000b898 <tcp_kill_state+0x24>
9000b884:	79fb      	ldrb	r3, [r7, #7]
9000b886:	2b09      	cmp	r3, #9
9000b888:	d006      	beq.n	9000b898 <tcp_kill_state+0x24>
9000b88a:	4b1a      	ldr	r3, [pc, #104]	; (9000b8f4 <tcp_kill_state+0x80>)
9000b88c:	f240 62dd 	movw	r2, #1757	; 0x6dd
9000b890:	4919      	ldr	r1, [pc, #100]	; (9000b8f8 <tcp_kill_state+0x84>)
9000b892:	481a      	ldr	r0, [pc, #104]	; (9000b8fc <tcp_kill_state+0x88>)
9000b894:	f007 fed0 	bl	90013638 <iprintf>

  inactivity = 0;
9000b898:	2300      	movs	r3, #0
9000b89a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
9000b89c:	2300      	movs	r3, #0
9000b89e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
9000b8a0:	4b17      	ldr	r3, [pc, #92]	; (9000b900 <tcp_kill_state+0x8c>)
9000b8a2:	681b      	ldr	r3, [r3, #0]
9000b8a4:	617b      	str	r3, [r7, #20]
9000b8a6:	e017      	b.n	9000b8d8 <tcp_kill_state+0x64>
    if (pcb->state == state) {
9000b8a8:	697b      	ldr	r3, [r7, #20]
9000b8aa:	7d1b      	ldrb	r3, [r3, #20]
9000b8ac:	79fa      	ldrb	r2, [r7, #7]
9000b8ae:	429a      	cmp	r2, r3
9000b8b0:	d10f      	bne.n	9000b8d2 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
9000b8b2:	4b14      	ldr	r3, [pc, #80]	; (9000b904 <tcp_kill_state+0x90>)
9000b8b4:	681a      	ldr	r2, [r3, #0]
9000b8b6:	697b      	ldr	r3, [r7, #20]
9000b8b8:	6a1b      	ldr	r3, [r3, #32]
9000b8ba:	1ad3      	subs	r3, r2, r3
9000b8bc:	68fa      	ldr	r2, [r7, #12]
9000b8be:	429a      	cmp	r2, r3
9000b8c0:	d807      	bhi.n	9000b8d2 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
9000b8c2:	4b10      	ldr	r3, [pc, #64]	; (9000b904 <tcp_kill_state+0x90>)
9000b8c4:	681a      	ldr	r2, [r3, #0]
9000b8c6:	697b      	ldr	r3, [r7, #20]
9000b8c8:	6a1b      	ldr	r3, [r3, #32]
9000b8ca:	1ad3      	subs	r3, r2, r3
9000b8cc:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
9000b8ce:	697b      	ldr	r3, [r7, #20]
9000b8d0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
9000b8d2:	697b      	ldr	r3, [r7, #20]
9000b8d4:	68db      	ldr	r3, [r3, #12]
9000b8d6:	617b      	str	r3, [r7, #20]
9000b8d8:	697b      	ldr	r3, [r7, #20]
9000b8da:	2b00      	cmp	r3, #0
9000b8dc:	d1e4      	bne.n	9000b8a8 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
9000b8de:	693b      	ldr	r3, [r7, #16]
9000b8e0:	2b00      	cmp	r3, #0
9000b8e2:	d003      	beq.n	9000b8ec <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
9000b8e4:	2100      	movs	r1, #0
9000b8e6:	6938      	ldr	r0, [r7, #16]
9000b8e8:	f7fe ff7a 	bl	9000a7e0 <tcp_abandon>
  }
}
9000b8ec:	bf00      	nop
9000b8ee:	3718      	adds	r7, #24
9000b8f0:	46bd      	mov	sp, r7
9000b8f2:	bd80      	pop	{r7, pc}
9000b8f4:	90015348 	.word	0x90015348
9000b8f8:	900158d4 	.word	0x900158d4
9000b8fc:	9001538c 	.word	0x9001538c
9000b900:	2401102c 	.word	0x2401102c
9000b904:	24011020 	.word	0x24011020

9000b908 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
9000b908:	b580      	push	{r7, lr}
9000b90a:	b084      	sub	sp, #16
9000b90c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
9000b90e:	2300      	movs	r3, #0
9000b910:	607b      	str	r3, [r7, #4]
  inactive = NULL;
9000b912:	2300      	movs	r3, #0
9000b914:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
9000b916:	4b12      	ldr	r3, [pc, #72]	; (9000b960 <tcp_kill_timewait+0x58>)
9000b918:	681b      	ldr	r3, [r3, #0]
9000b91a:	60fb      	str	r3, [r7, #12]
9000b91c:	e012      	b.n	9000b944 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
9000b91e:	4b11      	ldr	r3, [pc, #68]	; (9000b964 <tcp_kill_timewait+0x5c>)
9000b920:	681a      	ldr	r2, [r3, #0]
9000b922:	68fb      	ldr	r3, [r7, #12]
9000b924:	6a1b      	ldr	r3, [r3, #32]
9000b926:	1ad3      	subs	r3, r2, r3
9000b928:	687a      	ldr	r2, [r7, #4]
9000b92a:	429a      	cmp	r2, r3
9000b92c:	d807      	bhi.n	9000b93e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
9000b92e:	4b0d      	ldr	r3, [pc, #52]	; (9000b964 <tcp_kill_timewait+0x5c>)
9000b930:	681a      	ldr	r2, [r3, #0]
9000b932:	68fb      	ldr	r3, [r7, #12]
9000b934:	6a1b      	ldr	r3, [r3, #32]
9000b936:	1ad3      	subs	r3, r2, r3
9000b938:	607b      	str	r3, [r7, #4]
      inactive = pcb;
9000b93a:	68fb      	ldr	r3, [r7, #12]
9000b93c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
9000b93e:	68fb      	ldr	r3, [r7, #12]
9000b940:	68db      	ldr	r3, [r3, #12]
9000b942:	60fb      	str	r3, [r7, #12]
9000b944:	68fb      	ldr	r3, [r7, #12]
9000b946:	2b00      	cmp	r3, #0
9000b948:	d1e9      	bne.n	9000b91e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
9000b94a:	68bb      	ldr	r3, [r7, #8]
9000b94c:	2b00      	cmp	r3, #0
9000b94e:	d002      	beq.n	9000b956 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
9000b950:	68b8      	ldr	r0, [r7, #8]
9000b952:	f7ff f803 	bl	9000a95c <tcp_abort>
  }
}
9000b956:	bf00      	nop
9000b958:	3710      	adds	r7, #16
9000b95a:	46bd      	mov	sp, r7
9000b95c:	bd80      	pop	{r7, pc}
9000b95e:	bf00      	nop
9000b960:	24011030 	.word	0x24011030
9000b964:	24011020 	.word	0x24011020

9000b968 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
9000b968:	b580      	push	{r7, lr}
9000b96a:	b082      	sub	sp, #8
9000b96c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
9000b96e:	4b10      	ldr	r3, [pc, #64]	; (9000b9b0 <tcp_handle_closepend+0x48>)
9000b970:	681b      	ldr	r3, [r3, #0]
9000b972:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
9000b974:	e014      	b.n	9000b9a0 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
9000b976:	687b      	ldr	r3, [r7, #4]
9000b978:	68db      	ldr	r3, [r3, #12]
9000b97a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
9000b97c:	687b      	ldr	r3, [r7, #4]
9000b97e:	8b5b      	ldrh	r3, [r3, #26]
9000b980:	f003 0308 	and.w	r3, r3, #8
9000b984:	2b00      	cmp	r3, #0
9000b986:	d009      	beq.n	9000b99c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
9000b988:	687b      	ldr	r3, [r7, #4]
9000b98a:	8b5b      	ldrh	r3, [r3, #26]
9000b98c:	f023 0308 	bic.w	r3, r3, #8
9000b990:	b29a      	uxth	r2, r3
9000b992:	687b      	ldr	r3, [r7, #4]
9000b994:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
9000b996:	6878      	ldr	r0, [r7, #4]
9000b998:	f7fe fe8c 	bl	9000a6b4 <tcp_close_shutdown_fin>
    }
    pcb = next;
9000b99c:	683b      	ldr	r3, [r7, #0]
9000b99e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
9000b9a0:	687b      	ldr	r3, [r7, #4]
9000b9a2:	2b00      	cmp	r3, #0
9000b9a4:	d1e7      	bne.n	9000b976 <tcp_handle_closepend+0xe>
  }
}
9000b9a6:	bf00      	nop
9000b9a8:	bf00      	nop
9000b9aa:	3708      	adds	r7, #8
9000b9ac:	46bd      	mov	sp, r7
9000b9ae:	bd80      	pop	{r7, pc}
9000b9b0:	2401102c 	.word	0x2401102c

9000b9b4 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
9000b9b4:	b580      	push	{r7, lr}
9000b9b6:	b084      	sub	sp, #16
9000b9b8:	af00      	add	r7, sp, #0
9000b9ba:	4603      	mov	r3, r0
9000b9bc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
9000b9be:	2001      	movs	r0, #1
9000b9c0:	f7fd fb1e 	bl	90009000 <memp_malloc>
9000b9c4:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
9000b9c6:	68fb      	ldr	r3, [r7, #12]
9000b9c8:	2b00      	cmp	r3, #0
9000b9ca:	d126      	bne.n	9000ba1a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
9000b9cc:	f7ff ffcc 	bl	9000b968 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
9000b9d0:	f7ff ff9a 	bl	9000b908 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
9000b9d4:	2001      	movs	r0, #1
9000b9d6:	f7fd fb13 	bl	90009000 <memp_malloc>
9000b9da:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
9000b9dc:	68fb      	ldr	r3, [r7, #12]
9000b9de:	2b00      	cmp	r3, #0
9000b9e0:	d11b      	bne.n	9000ba1a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
9000b9e2:	2009      	movs	r0, #9
9000b9e4:	f7ff ff46 	bl	9000b874 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
9000b9e8:	2001      	movs	r0, #1
9000b9ea:	f7fd fb09 	bl	90009000 <memp_malloc>
9000b9ee:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
9000b9f0:	68fb      	ldr	r3, [r7, #12]
9000b9f2:	2b00      	cmp	r3, #0
9000b9f4:	d111      	bne.n	9000ba1a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
9000b9f6:	2008      	movs	r0, #8
9000b9f8:	f7ff ff3c 	bl	9000b874 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
9000b9fc:	2001      	movs	r0, #1
9000b9fe:	f7fd faff 	bl	90009000 <memp_malloc>
9000ba02:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
9000ba04:	68fb      	ldr	r3, [r7, #12]
9000ba06:	2b00      	cmp	r3, #0
9000ba08:	d107      	bne.n	9000ba1a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
9000ba0a:	79fb      	ldrb	r3, [r7, #7]
9000ba0c:	4618      	mov	r0, r3
9000ba0e:	f7ff fee3 	bl	9000b7d8 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
9000ba12:	2001      	movs	r0, #1
9000ba14:	f7fd faf4 	bl	90009000 <memp_malloc>
9000ba18:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
9000ba1a:	68fb      	ldr	r3, [r7, #12]
9000ba1c:	2b00      	cmp	r3, #0
9000ba1e:	d03f      	beq.n	9000baa0 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
9000ba20:	229c      	movs	r2, #156	; 0x9c
9000ba22:	2100      	movs	r1, #0
9000ba24:	68f8      	ldr	r0, [r7, #12]
9000ba26:	f007 fd6a 	bl	900134fe <memset>
    pcb->prio = prio;
9000ba2a:	68fb      	ldr	r3, [r7, #12]
9000ba2c:	79fa      	ldrb	r2, [r7, #7]
9000ba2e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
9000ba30:	68fb      	ldr	r3, [r7, #12]
9000ba32:	f44f 6286 	mov.w	r2, #1072	; 0x430
9000ba36:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
9000ba3a:	68fb      	ldr	r3, [r7, #12]
9000ba3c:	f44f 6206 	mov.w	r2, #2144	; 0x860
9000ba40:	855a      	strh	r2, [r3, #42]	; 0x2a
9000ba42:	68fb      	ldr	r3, [r7, #12]
9000ba44:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
9000ba46:	68fb      	ldr	r3, [r7, #12]
9000ba48:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
9000ba4a:	68fb      	ldr	r3, [r7, #12]
9000ba4c:	22ff      	movs	r2, #255	; 0xff
9000ba4e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
9000ba50:	68fb      	ldr	r3, [r7, #12]
9000ba52:	f44f 7206 	mov.w	r2, #536	; 0x218
9000ba56:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
9000ba58:	68fb      	ldr	r3, [r7, #12]
9000ba5a:	2206      	movs	r2, #6
9000ba5c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
9000ba60:	68fb      	ldr	r3, [r7, #12]
9000ba62:	2206      	movs	r2, #6
9000ba64:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
9000ba66:	68fb      	ldr	r3, [r7, #12]
9000ba68:	f64f 72ff 	movw	r2, #65535	; 0xffff
9000ba6c:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
9000ba6e:	68fb      	ldr	r3, [r7, #12]
9000ba70:	2201      	movs	r2, #1
9000ba72:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
9000ba76:	4b0d      	ldr	r3, [pc, #52]	; (9000baac <tcp_alloc+0xf8>)
9000ba78:	681a      	ldr	r2, [r3, #0]
9000ba7a:	68fb      	ldr	r3, [r7, #12]
9000ba7c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
9000ba7e:	4b0c      	ldr	r3, [pc, #48]	; (9000bab0 <tcp_alloc+0xfc>)
9000ba80:	781a      	ldrb	r2, [r3, #0]
9000ba82:	68fb      	ldr	r3, [r7, #12]
9000ba84:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
9000ba86:	68fb      	ldr	r3, [r7, #12]
9000ba88:	f44f 6286 	mov.w	r2, #1072	; 0x430
9000ba8c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
9000ba90:	68fb      	ldr	r3, [r7, #12]
9000ba92:	4a08      	ldr	r2, [pc, #32]	; (9000bab4 <tcp_alloc+0x100>)
9000ba94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
9000ba98:	68fb      	ldr	r3, [r7, #12]
9000ba9a:	4a07      	ldr	r2, [pc, #28]	; (9000bab8 <tcp_alloc+0x104>)
9000ba9c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
9000baa0:	68fb      	ldr	r3, [r7, #12]
}
9000baa2:	4618      	mov	r0, r3
9000baa4:	3710      	adds	r7, #16
9000baa6:	46bd      	mov	sp, r7
9000baa8:	bd80      	pop	{r7, pc}
9000baaa:	bf00      	nop
9000baac:	24011020 	.word	0x24011020
9000bab0:	24011036 	.word	0x24011036
9000bab4:	9000b76d 	.word	0x9000b76d
9000bab8:	006ddd00 	.word	0x006ddd00

9000babc <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
9000babc:	b580      	push	{r7, lr}
9000babe:	b084      	sub	sp, #16
9000bac0:	af00      	add	r7, sp, #0
9000bac2:	4603      	mov	r3, r0
9000bac4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
9000bac6:	2040      	movs	r0, #64	; 0x40
9000bac8:	f7ff ff74 	bl	9000b9b4 <tcp_alloc>
9000bacc:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
9000bace:	68fb      	ldr	r3, [r7, #12]
}
9000bad0:	4618      	mov	r0, r3
9000bad2:	3710      	adds	r7, #16
9000bad4:	46bd      	mov	sp, r7
9000bad6:	bd80      	pop	{r7, pc}

9000bad8 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
9000bad8:	b480      	push	{r7}
9000bada:	b083      	sub	sp, #12
9000badc:	af00      	add	r7, sp, #0
9000bade:	6078      	str	r0, [r7, #4]
9000bae0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
9000bae2:	687b      	ldr	r3, [r7, #4]
9000bae4:	2b00      	cmp	r3, #0
9000bae6:	d002      	beq.n	9000baee <tcp_arg+0x16>
    pcb->callback_arg = arg;
9000bae8:	687b      	ldr	r3, [r7, #4]
9000baea:	683a      	ldr	r2, [r7, #0]
9000baec:	611a      	str	r2, [r3, #16]
  }
}
9000baee:	bf00      	nop
9000baf0:	370c      	adds	r7, #12
9000baf2:	46bd      	mov	sp, r7
9000baf4:	f85d 7b04 	ldr.w	r7, [sp], #4
9000baf8:	4770      	bx	lr
	...

9000bafc <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
9000bafc:	b580      	push	{r7, lr}
9000bafe:	b082      	sub	sp, #8
9000bb00:	af00      	add	r7, sp, #0
9000bb02:	6078      	str	r0, [r7, #4]
9000bb04:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
9000bb06:	687b      	ldr	r3, [r7, #4]
9000bb08:	2b00      	cmp	r3, #0
9000bb0a:	d00e      	beq.n	9000bb2a <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
9000bb0c:	687b      	ldr	r3, [r7, #4]
9000bb0e:	7d1b      	ldrb	r3, [r3, #20]
9000bb10:	2b01      	cmp	r3, #1
9000bb12:	d106      	bne.n	9000bb22 <tcp_recv+0x26>
9000bb14:	4b07      	ldr	r3, [pc, #28]	; (9000bb34 <tcp_recv+0x38>)
9000bb16:	f240 72df 	movw	r2, #2015	; 0x7df
9000bb1a:	4907      	ldr	r1, [pc, #28]	; (9000bb38 <tcp_recv+0x3c>)
9000bb1c:	4807      	ldr	r0, [pc, #28]	; (9000bb3c <tcp_recv+0x40>)
9000bb1e:	f007 fd8b 	bl	90013638 <iprintf>
    pcb->recv = recv;
9000bb22:	687b      	ldr	r3, [r7, #4]
9000bb24:	683a      	ldr	r2, [r7, #0]
9000bb26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
9000bb2a:	bf00      	nop
9000bb2c:	3708      	adds	r7, #8
9000bb2e:	46bd      	mov	sp, r7
9000bb30:	bd80      	pop	{r7, pc}
9000bb32:	bf00      	nop
9000bb34:	90015348 	.word	0x90015348
9000bb38:	900158e4 	.word	0x900158e4
9000bb3c:	9001538c 	.word	0x9001538c

9000bb40 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
9000bb40:	b580      	push	{r7, lr}
9000bb42:	b082      	sub	sp, #8
9000bb44:	af00      	add	r7, sp, #0
9000bb46:	6078      	str	r0, [r7, #4]
9000bb48:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
9000bb4a:	687b      	ldr	r3, [r7, #4]
9000bb4c:	2b00      	cmp	r3, #0
9000bb4e:	d00e      	beq.n	9000bb6e <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
9000bb50:	687b      	ldr	r3, [r7, #4]
9000bb52:	7d1b      	ldrb	r3, [r3, #20]
9000bb54:	2b01      	cmp	r3, #1
9000bb56:	d106      	bne.n	9000bb66 <tcp_sent+0x26>
9000bb58:	4b07      	ldr	r3, [pc, #28]	; (9000bb78 <tcp_sent+0x38>)
9000bb5a:	f240 72f3 	movw	r2, #2035	; 0x7f3
9000bb5e:	4907      	ldr	r1, [pc, #28]	; (9000bb7c <tcp_sent+0x3c>)
9000bb60:	4807      	ldr	r0, [pc, #28]	; (9000bb80 <tcp_sent+0x40>)
9000bb62:	f007 fd69 	bl	90013638 <iprintf>
    pcb->sent = sent;
9000bb66:	687b      	ldr	r3, [r7, #4]
9000bb68:	683a      	ldr	r2, [r7, #0]
9000bb6a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
9000bb6e:	bf00      	nop
9000bb70:	3708      	adds	r7, #8
9000bb72:	46bd      	mov	sp, r7
9000bb74:	bd80      	pop	{r7, pc}
9000bb76:	bf00      	nop
9000bb78:	90015348 	.word	0x90015348
9000bb7c:	9001590c 	.word	0x9001590c
9000bb80:	9001538c 	.word	0x9001538c

9000bb84 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
9000bb84:	b580      	push	{r7, lr}
9000bb86:	b082      	sub	sp, #8
9000bb88:	af00      	add	r7, sp, #0
9000bb8a:	6078      	str	r0, [r7, #4]
9000bb8c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
9000bb8e:	687b      	ldr	r3, [r7, #4]
9000bb90:	2b00      	cmp	r3, #0
9000bb92:	d00e      	beq.n	9000bbb2 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
9000bb94:	687b      	ldr	r3, [r7, #4]
9000bb96:	7d1b      	ldrb	r3, [r3, #20]
9000bb98:	2b01      	cmp	r3, #1
9000bb9a:	d106      	bne.n	9000bbaa <tcp_err+0x26>
9000bb9c:	4b07      	ldr	r3, [pc, #28]	; (9000bbbc <tcp_err+0x38>)
9000bb9e:	f640 020d 	movw	r2, #2061	; 0x80d
9000bba2:	4907      	ldr	r1, [pc, #28]	; (9000bbc0 <tcp_err+0x3c>)
9000bba4:	4807      	ldr	r0, [pc, #28]	; (9000bbc4 <tcp_err+0x40>)
9000bba6:	f007 fd47 	bl	90013638 <iprintf>
    pcb->errf = err;
9000bbaa:	687b      	ldr	r3, [r7, #4]
9000bbac:	683a      	ldr	r2, [r7, #0]
9000bbae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
9000bbb2:	bf00      	nop
9000bbb4:	3708      	adds	r7, #8
9000bbb6:	46bd      	mov	sp, r7
9000bbb8:	bd80      	pop	{r7, pc}
9000bbba:	bf00      	nop
9000bbbc:	90015348 	.word	0x90015348
9000bbc0:	90015934 	.word	0x90015934
9000bbc4:	9001538c 	.word	0x9001538c

9000bbc8 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
9000bbc8:	b480      	push	{r7}
9000bbca:	b085      	sub	sp, #20
9000bbcc:	af00      	add	r7, sp, #0
9000bbce:	6078      	str	r0, [r7, #4]
9000bbd0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
9000bbd2:	687b      	ldr	r3, [r7, #4]
9000bbd4:	2b00      	cmp	r3, #0
9000bbd6:	d008      	beq.n	9000bbea <tcp_accept+0x22>
9000bbd8:	687b      	ldr	r3, [r7, #4]
9000bbda:	7d1b      	ldrb	r3, [r3, #20]
9000bbdc:	2b01      	cmp	r3, #1
9000bbde:	d104      	bne.n	9000bbea <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
9000bbe0:	687b      	ldr	r3, [r7, #4]
9000bbe2:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
9000bbe4:	68fb      	ldr	r3, [r7, #12]
9000bbe6:	683a      	ldr	r2, [r7, #0]
9000bbe8:	619a      	str	r2, [r3, #24]
  }
}
9000bbea:	bf00      	nop
9000bbec:	3714      	adds	r7, #20
9000bbee:	46bd      	mov	sp, r7
9000bbf0:	f85d 7b04 	ldr.w	r7, [sp], #4
9000bbf4:	4770      	bx	lr
	...

9000bbf8 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
9000bbf8:	b580      	push	{r7, lr}
9000bbfa:	b084      	sub	sp, #16
9000bbfc:	af00      	add	r7, sp, #0
9000bbfe:	60f8      	str	r0, [r7, #12]
9000bc00:	60b9      	str	r1, [r7, #8]
9000bc02:	4613      	mov	r3, r2
9000bc04:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
9000bc06:	68fb      	ldr	r3, [r7, #12]
9000bc08:	2b00      	cmp	r3, #0
9000bc0a:	d107      	bne.n	9000bc1c <tcp_poll+0x24>
9000bc0c:	4b0e      	ldr	r3, [pc, #56]	; (9000bc48 <tcp_poll+0x50>)
9000bc0e:	f640 023d 	movw	r2, #2109	; 0x83d
9000bc12:	490e      	ldr	r1, [pc, #56]	; (9000bc4c <tcp_poll+0x54>)
9000bc14:	480e      	ldr	r0, [pc, #56]	; (9000bc50 <tcp_poll+0x58>)
9000bc16:	f007 fd0f 	bl	90013638 <iprintf>
9000bc1a:	e011      	b.n	9000bc40 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
9000bc1c:	68fb      	ldr	r3, [r7, #12]
9000bc1e:	7d1b      	ldrb	r3, [r3, #20]
9000bc20:	2b01      	cmp	r3, #1
9000bc22:	d106      	bne.n	9000bc32 <tcp_poll+0x3a>
9000bc24:	4b08      	ldr	r3, [pc, #32]	; (9000bc48 <tcp_poll+0x50>)
9000bc26:	f640 023e 	movw	r2, #2110	; 0x83e
9000bc2a:	490a      	ldr	r1, [pc, #40]	; (9000bc54 <tcp_poll+0x5c>)
9000bc2c:	4808      	ldr	r0, [pc, #32]	; (9000bc50 <tcp_poll+0x58>)
9000bc2e:	f007 fd03 	bl	90013638 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
9000bc32:	68fb      	ldr	r3, [r7, #12]
9000bc34:	68ba      	ldr	r2, [r7, #8]
9000bc36:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
9000bc3a:	68fb      	ldr	r3, [r7, #12]
9000bc3c:	79fa      	ldrb	r2, [r7, #7]
9000bc3e:	775a      	strb	r2, [r3, #29]
}
9000bc40:	3710      	adds	r7, #16
9000bc42:	46bd      	mov	sp, r7
9000bc44:	bd80      	pop	{r7, pc}
9000bc46:	bf00      	nop
9000bc48:	90015348 	.word	0x90015348
9000bc4c:	9001595c 	.word	0x9001595c
9000bc50:	9001538c 	.word	0x9001538c
9000bc54:	90015974 	.word	0x90015974

9000bc58 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
9000bc58:	b580      	push	{r7, lr}
9000bc5a:	b082      	sub	sp, #8
9000bc5c:	af00      	add	r7, sp, #0
9000bc5e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
9000bc60:	687b      	ldr	r3, [r7, #4]
9000bc62:	2b00      	cmp	r3, #0
9000bc64:	d107      	bne.n	9000bc76 <tcp_pcb_purge+0x1e>
9000bc66:	4b21      	ldr	r3, [pc, #132]	; (9000bcec <tcp_pcb_purge+0x94>)
9000bc68:	f640 0251 	movw	r2, #2129	; 0x851
9000bc6c:	4920      	ldr	r1, [pc, #128]	; (9000bcf0 <tcp_pcb_purge+0x98>)
9000bc6e:	4821      	ldr	r0, [pc, #132]	; (9000bcf4 <tcp_pcb_purge+0x9c>)
9000bc70:	f007 fce2 	bl	90013638 <iprintf>
9000bc74:	e037      	b.n	9000bce6 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
9000bc76:	687b      	ldr	r3, [r7, #4]
9000bc78:	7d1b      	ldrb	r3, [r3, #20]
9000bc7a:	2b00      	cmp	r3, #0
9000bc7c:	d033      	beq.n	9000bce6 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
9000bc7e:	687b      	ldr	r3, [r7, #4]
9000bc80:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
9000bc82:	2b0a      	cmp	r3, #10
9000bc84:	d02f      	beq.n	9000bce6 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
9000bc86:	687b      	ldr	r3, [r7, #4]
9000bc88:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
9000bc8a:	2b01      	cmp	r3, #1
9000bc8c:	d02b      	beq.n	9000bce6 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
9000bc8e:	687b      	ldr	r3, [r7, #4]
9000bc90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
9000bc92:	2b00      	cmp	r3, #0
9000bc94:	d007      	beq.n	9000bca6 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
9000bc96:	687b      	ldr	r3, [r7, #4]
9000bc98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
9000bc9a:	4618      	mov	r0, r3
9000bc9c:	f7fe f8ca 	bl	90009e34 <pbuf_free>
      pcb->refused_data = NULL;
9000bca0:	687b      	ldr	r3, [r7, #4]
9000bca2:	2200      	movs	r2, #0
9000bca4:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
9000bca6:	687b      	ldr	r3, [r7, #4]
9000bca8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
9000bcaa:	2b00      	cmp	r3, #0
9000bcac:	d002      	beq.n	9000bcb4 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
9000bcae:	6878      	ldr	r0, [r7, #4]
9000bcb0:	f000 f986 	bl	9000bfc0 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
9000bcb4:	687b      	ldr	r3, [r7, #4]
9000bcb6:	f64f 72ff 	movw	r2, #65535	; 0xffff
9000bcba:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
9000bcbc:	687b      	ldr	r3, [r7, #4]
9000bcbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
9000bcc0:	4618      	mov	r0, r3
9000bcc2:	f7ff fcdb 	bl	9000b67c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
9000bcc6:	687b      	ldr	r3, [r7, #4]
9000bcc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
9000bcca:	4618      	mov	r0, r3
9000bccc:	f7ff fcd6 	bl	9000b67c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
9000bcd0:	687b      	ldr	r3, [r7, #4]
9000bcd2:	2200      	movs	r2, #0
9000bcd4:	66da      	str	r2, [r3, #108]	; 0x6c
9000bcd6:	687b      	ldr	r3, [r7, #4]
9000bcd8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
9000bcda:	687b      	ldr	r3, [r7, #4]
9000bcdc:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
9000bcde:	687b      	ldr	r3, [r7, #4]
9000bce0:	2200      	movs	r2, #0
9000bce2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
9000bce6:	3708      	adds	r7, #8
9000bce8:	46bd      	mov	sp, r7
9000bcea:	bd80      	pop	{r7, pc}
9000bcec:	90015348 	.word	0x90015348
9000bcf0:	90015994 	.word	0x90015994
9000bcf4:	9001538c 	.word	0x9001538c

9000bcf8 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
9000bcf8:	b580      	push	{r7, lr}
9000bcfa:	b084      	sub	sp, #16
9000bcfc:	af00      	add	r7, sp, #0
9000bcfe:	6078      	str	r0, [r7, #4]
9000bd00:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
9000bd02:	683b      	ldr	r3, [r7, #0]
9000bd04:	2b00      	cmp	r3, #0
9000bd06:	d106      	bne.n	9000bd16 <tcp_pcb_remove+0x1e>
9000bd08:	4b3e      	ldr	r3, [pc, #248]	; (9000be04 <tcp_pcb_remove+0x10c>)
9000bd0a:	f640 0283 	movw	r2, #2179	; 0x883
9000bd0e:	493e      	ldr	r1, [pc, #248]	; (9000be08 <tcp_pcb_remove+0x110>)
9000bd10:	483e      	ldr	r0, [pc, #248]	; (9000be0c <tcp_pcb_remove+0x114>)
9000bd12:	f007 fc91 	bl	90013638 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
9000bd16:	687b      	ldr	r3, [r7, #4]
9000bd18:	2b00      	cmp	r3, #0
9000bd1a:	d106      	bne.n	9000bd2a <tcp_pcb_remove+0x32>
9000bd1c:	4b39      	ldr	r3, [pc, #228]	; (9000be04 <tcp_pcb_remove+0x10c>)
9000bd1e:	f640 0284 	movw	r2, #2180	; 0x884
9000bd22:	493b      	ldr	r1, [pc, #236]	; (9000be10 <tcp_pcb_remove+0x118>)
9000bd24:	4839      	ldr	r0, [pc, #228]	; (9000be0c <tcp_pcb_remove+0x114>)
9000bd26:	f007 fc87 	bl	90013638 <iprintf>

  TCP_RMV(pcblist, pcb);
9000bd2a:	687b      	ldr	r3, [r7, #4]
9000bd2c:	681b      	ldr	r3, [r3, #0]
9000bd2e:	683a      	ldr	r2, [r7, #0]
9000bd30:	429a      	cmp	r2, r3
9000bd32:	d105      	bne.n	9000bd40 <tcp_pcb_remove+0x48>
9000bd34:	687b      	ldr	r3, [r7, #4]
9000bd36:	681b      	ldr	r3, [r3, #0]
9000bd38:	68da      	ldr	r2, [r3, #12]
9000bd3a:	687b      	ldr	r3, [r7, #4]
9000bd3c:	601a      	str	r2, [r3, #0]
9000bd3e:	e013      	b.n	9000bd68 <tcp_pcb_remove+0x70>
9000bd40:	687b      	ldr	r3, [r7, #4]
9000bd42:	681b      	ldr	r3, [r3, #0]
9000bd44:	60fb      	str	r3, [r7, #12]
9000bd46:	e00c      	b.n	9000bd62 <tcp_pcb_remove+0x6a>
9000bd48:	68fb      	ldr	r3, [r7, #12]
9000bd4a:	68db      	ldr	r3, [r3, #12]
9000bd4c:	683a      	ldr	r2, [r7, #0]
9000bd4e:	429a      	cmp	r2, r3
9000bd50:	d104      	bne.n	9000bd5c <tcp_pcb_remove+0x64>
9000bd52:	683b      	ldr	r3, [r7, #0]
9000bd54:	68da      	ldr	r2, [r3, #12]
9000bd56:	68fb      	ldr	r3, [r7, #12]
9000bd58:	60da      	str	r2, [r3, #12]
9000bd5a:	e005      	b.n	9000bd68 <tcp_pcb_remove+0x70>
9000bd5c:	68fb      	ldr	r3, [r7, #12]
9000bd5e:	68db      	ldr	r3, [r3, #12]
9000bd60:	60fb      	str	r3, [r7, #12]
9000bd62:	68fb      	ldr	r3, [r7, #12]
9000bd64:	2b00      	cmp	r3, #0
9000bd66:	d1ef      	bne.n	9000bd48 <tcp_pcb_remove+0x50>
9000bd68:	683b      	ldr	r3, [r7, #0]
9000bd6a:	2200      	movs	r2, #0
9000bd6c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
9000bd6e:	6838      	ldr	r0, [r7, #0]
9000bd70:	f7ff ff72 	bl	9000bc58 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
9000bd74:	683b      	ldr	r3, [r7, #0]
9000bd76:	7d1b      	ldrb	r3, [r3, #20]
9000bd78:	2b0a      	cmp	r3, #10
9000bd7a:	d013      	beq.n	9000bda4 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
9000bd7c:	683b      	ldr	r3, [r7, #0]
9000bd7e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
9000bd80:	2b01      	cmp	r3, #1
9000bd82:	d00f      	beq.n	9000bda4 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
9000bd84:	683b      	ldr	r3, [r7, #0]
9000bd86:	8b5b      	ldrh	r3, [r3, #26]
9000bd88:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
9000bd8c:	2b00      	cmp	r3, #0
9000bd8e:	d009      	beq.n	9000bda4 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
9000bd90:	683b      	ldr	r3, [r7, #0]
9000bd92:	8b5b      	ldrh	r3, [r3, #26]
9000bd94:	f043 0302 	orr.w	r3, r3, #2
9000bd98:	b29a      	uxth	r2, r3
9000bd9a:	683b      	ldr	r3, [r7, #0]
9000bd9c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
9000bd9e:	6838      	ldr	r0, [r7, #0]
9000bda0:	f003 fbc6 	bl	9000f530 <tcp_output>
  }

  if (pcb->state != LISTEN) {
9000bda4:	683b      	ldr	r3, [r7, #0]
9000bda6:	7d1b      	ldrb	r3, [r3, #20]
9000bda8:	2b01      	cmp	r3, #1
9000bdaa:	d020      	beq.n	9000bdee <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
9000bdac:	683b      	ldr	r3, [r7, #0]
9000bdae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
9000bdb0:	2b00      	cmp	r3, #0
9000bdb2:	d006      	beq.n	9000bdc2 <tcp_pcb_remove+0xca>
9000bdb4:	4b13      	ldr	r3, [pc, #76]	; (9000be04 <tcp_pcb_remove+0x10c>)
9000bdb6:	f640 0293 	movw	r2, #2195	; 0x893
9000bdba:	4916      	ldr	r1, [pc, #88]	; (9000be14 <tcp_pcb_remove+0x11c>)
9000bdbc:	4813      	ldr	r0, [pc, #76]	; (9000be0c <tcp_pcb_remove+0x114>)
9000bdbe:	f007 fc3b 	bl	90013638 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
9000bdc2:	683b      	ldr	r3, [r7, #0]
9000bdc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
9000bdc6:	2b00      	cmp	r3, #0
9000bdc8:	d006      	beq.n	9000bdd8 <tcp_pcb_remove+0xe0>
9000bdca:	4b0e      	ldr	r3, [pc, #56]	; (9000be04 <tcp_pcb_remove+0x10c>)
9000bdcc:	f640 0294 	movw	r2, #2196	; 0x894
9000bdd0:	4911      	ldr	r1, [pc, #68]	; (9000be18 <tcp_pcb_remove+0x120>)
9000bdd2:	480e      	ldr	r0, [pc, #56]	; (9000be0c <tcp_pcb_remove+0x114>)
9000bdd4:	f007 fc30 	bl	90013638 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
9000bdd8:	683b      	ldr	r3, [r7, #0]
9000bdda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
9000bddc:	2b00      	cmp	r3, #0
9000bdde:	d006      	beq.n	9000bdee <tcp_pcb_remove+0xf6>
9000bde0:	4b08      	ldr	r3, [pc, #32]	; (9000be04 <tcp_pcb_remove+0x10c>)
9000bde2:	f640 0296 	movw	r2, #2198	; 0x896
9000bde6:	490d      	ldr	r1, [pc, #52]	; (9000be1c <tcp_pcb_remove+0x124>)
9000bde8:	4808      	ldr	r0, [pc, #32]	; (9000be0c <tcp_pcb_remove+0x114>)
9000bdea:	f007 fc25 	bl	90013638 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
9000bdee:	683b      	ldr	r3, [r7, #0]
9000bdf0:	2200      	movs	r2, #0
9000bdf2:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
9000bdf4:	683b      	ldr	r3, [r7, #0]
9000bdf6:	2200      	movs	r2, #0
9000bdf8:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
9000bdfa:	bf00      	nop
9000bdfc:	3710      	adds	r7, #16
9000bdfe:	46bd      	mov	sp, r7
9000be00:	bd80      	pop	{r7, pc}
9000be02:	bf00      	nop
9000be04:	90015348 	.word	0x90015348
9000be08:	900159b0 	.word	0x900159b0
9000be0c:	9001538c 	.word	0x9001538c
9000be10:	900159cc 	.word	0x900159cc
9000be14:	900159ec 	.word	0x900159ec
9000be18:	90015a04 	.word	0x90015a04
9000be1c:	90015a20 	.word	0x90015a20

9000be20 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
9000be20:	b580      	push	{r7, lr}
9000be22:	b082      	sub	sp, #8
9000be24:	af00      	add	r7, sp, #0
9000be26:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
9000be28:	687b      	ldr	r3, [r7, #4]
9000be2a:	2b00      	cmp	r3, #0
9000be2c:	d106      	bne.n	9000be3c <tcp_next_iss+0x1c>
9000be2e:	4b0a      	ldr	r3, [pc, #40]	; (9000be58 <tcp_next_iss+0x38>)
9000be30:	f640 02af 	movw	r2, #2223	; 0x8af
9000be34:	4909      	ldr	r1, [pc, #36]	; (9000be5c <tcp_next_iss+0x3c>)
9000be36:	480a      	ldr	r0, [pc, #40]	; (9000be60 <tcp_next_iss+0x40>)
9000be38:	f007 fbfe 	bl	90013638 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
9000be3c:	4b09      	ldr	r3, [pc, #36]	; (9000be64 <tcp_next_iss+0x44>)
9000be3e:	681a      	ldr	r2, [r3, #0]
9000be40:	4b09      	ldr	r3, [pc, #36]	; (9000be68 <tcp_next_iss+0x48>)
9000be42:	681b      	ldr	r3, [r3, #0]
9000be44:	4413      	add	r3, r2
9000be46:	4a07      	ldr	r2, [pc, #28]	; (9000be64 <tcp_next_iss+0x44>)
9000be48:	6013      	str	r3, [r2, #0]
  return iss;
9000be4a:	4b06      	ldr	r3, [pc, #24]	; (9000be64 <tcp_next_iss+0x44>)
9000be4c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
9000be4e:	4618      	mov	r0, r3
9000be50:	3708      	adds	r7, #8
9000be52:	46bd      	mov	sp, r7
9000be54:	bd80      	pop	{r7, pc}
9000be56:	bf00      	nop
9000be58:	90015348 	.word	0x90015348
9000be5c:	90015a38 	.word	0x90015a38
9000be60:	9001538c 	.word	0x9001538c
9000be64:	2400002c 	.word	0x2400002c
9000be68:	24011020 	.word	0x24011020

9000be6c <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
9000be6c:	b580      	push	{r7, lr}
9000be6e:	b086      	sub	sp, #24
9000be70:	af00      	add	r7, sp, #0
9000be72:	4603      	mov	r3, r0
9000be74:	60b9      	str	r1, [r7, #8]
9000be76:	607a      	str	r2, [r7, #4]
9000be78:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
9000be7a:	687b      	ldr	r3, [r7, #4]
9000be7c:	2b00      	cmp	r3, #0
9000be7e:	d106      	bne.n	9000be8e <tcp_eff_send_mss_netif+0x22>
9000be80:	4b14      	ldr	r3, [pc, #80]	; (9000bed4 <tcp_eff_send_mss_netif+0x68>)
9000be82:	f640 02c5 	movw	r2, #2245	; 0x8c5
9000be86:	4914      	ldr	r1, [pc, #80]	; (9000bed8 <tcp_eff_send_mss_netif+0x6c>)
9000be88:	4814      	ldr	r0, [pc, #80]	; (9000bedc <tcp_eff_send_mss_netif+0x70>)
9000be8a:	f007 fbd5 	bl	90013638 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
9000be8e:	68bb      	ldr	r3, [r7, #8]
9000be90:	2b00      	cmp	r3, #0
9000be92:	d101      	bne.n	9000be98 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
9000be94:	89fb      	ldrh	r3, [r7, #14]
9000be96:	e019      	b.n	9000becc <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
9000be98:	68bb      	ldr	r3, [r7, #8]
9000be9a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
9000be9c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
9000be9e:	8afb      	ldrh	r3, [r7, #22]
9000bea0:	2b00      	cmp	r3, #0
9000bea2:	d012      	beq.n	9000beca <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
9000bea4:	2328      	movs	r3, #40	; 0x28
9000bea6:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
9000bea8:	8afa      	ldrh	r2, [r7, #22]
9000beaa:	8abb      	ldrh	r3, [r7, #20]
9000beac:	429a      	cmp	r2, r3
9000beae:	d904      	bls.n	9000beba <tcp_eff_send_mss_netif+0x4e>
9000beb0:	8afa      	ldrh	r2, [r7, #22]
9000beb2:	8abb      	ldrh	r3, [r7, #20]
9000beb4:	1ad3      	subs	r3, r2, r3
9000beb6:	b29b      	uxth	r3, r3
9000beb8:	e000      	b.n	9000bebc <tcp_eff_send_mss_netif+0x50>
9000beba:	2300      	movs	r3, #0
9000bebc:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
9000bebe:	8a7a      	ldrh	r2, [r7, #18]
9000bec0:	89fb      	ldrh	r3, [r7, #14]
9000bec2:	4293      	cmp	r3, r2
9000bec4:	bf28      	it	cs
9000bec6:	4613      	movcs	r3, r2
9000bec8:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
9000beca:	89fb      	ldrh	r3, [r7, #14]
}
9000becc:	4618      	mov	r0, r3
9000bece:	3718      	adds	r7, #24
9000bed0:	46bd      	mov	sp, r7
9000bed2:	bd80      	pop	{r7, pc}
9000bed4:	90015348 	.word	0x90015348
9000bed8:	90015a54 	.word	0x90015a54
9000bedc:	9001538c 	.word	0x9001538c

9000bee0 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
9000bee0:	b580      	push	{r7, lr}
9000bee2:	b084      	sub	sp, #16
9000bee4:	af00      	add	r7, sp, #0
9000bee6:	6078      	str	r0, [r7, #4]
9000bee8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
9000beea:	683b      	ldr	r3, [r7, #0]
9000beec:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
9000beee:	687b      	ldr	r3, [r7, #4]
9000bef0:	2b00      	cmp	r3, #0
9000bef2:	d119      	bne.n	9000bf28 <tcp_netif_ip_addr_changed_pcblist+0x48>
9000bef4:	4b10      	ldr	r3, [pc, #64]	; (9000bf38 <tcp_netif_ip_addr_changed_pcblist+0x58>)
9000bef6:	f44f 6210 	mov.w	r2, #2304	; 0x900
9000befa:	4910      	ldr	r1, [pc, #64]	; (9000bf3c <tcp_netif_ip_addr_changed_pcblist+0x5c>)
9000befc:	4810      	ldr	r0, [pc, #64]	; (9000bf40 <tcp_netif_ip_addr_changed_pcblist+0x60>)
9000befe:	f007 fb9b 	bl	90013638 <iprintf>

  while (pcb != NULL) {
9000bf02:	e011      	b.n	9000bf28 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
9000bf04:	68fb      	ldr	r3, [r7, #12]
9000bf06:	681a      	ldr	r2, [r3, #0]
9000bf08:	687b      	ldr	r3, [r7, #4]
9000bf0a:	681b      	ldr	r3, [r3, #0]
9000bf0c:	429a      	cmp	r2, r3
9000bf0e:	d108      	bne.n	9000bf22 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
9000bf10:	68fb      	ldr	r3, [r7, #12]
9000bf12:	68db      	ldr	r3, [r3, #12]
9000bf14:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
9000bf16:	68f8      	ldr	r0, [r7, #12]
9000bf18:	f7fe fd20 	bl	9000a95c <tcp_abort>
      pcb = next;
9000bf1c:	68bb      	ldr	r3, [r7, #8]
9000bf1e:	60fb      	str	r3, [r7, #12]
9000bf20:	e002      	b.n	9000bf28 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
9000bf22:	68fb      	ldr	r3, [r7, #12]
9000bf24:	68db      	ldr	r3, [r3, #12]
9000bf26:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
9000bf28:	68fb      	ldr	r3, [r7, #12]
9000bf2a:	2b00      	cmp	r3, #0
9000bf2c:	d1ea      	bne.n	9000bf04 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
9000bf2e:	bf00      	nop
9000bf30:	bf00      	nop
9000bf32:	3710      	adds	r7, #16
9000bf34:	46bd      	mov	sp, r7
9000bf36:	bd80      	pop	{r7, pc}
9000bf38:	90015348 	.word	0x90015348
9000bf3c:	90015a7c 	.word	0x90015a7c
9000bf40:	9001538c 	.word	0x9001538c

9000bf44 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
9000bf44:	b580      	push	{r7, lr}
9000bf46:	b084      	sub	sp, #16
9000bf48:	af00      	add	r7, sp, #0
9000bf4a:	6078      	str	r0, [r7, #4]
9000bf4c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
9000bf4e:	687b      	ldr	r3, [r7, #4]
9000bf50:	2b00      	cmp	r3, #0
9000bf52:	d02a      	beq.n	9000bfaa <tcp_netif_ip_addr_changed+0x66>
9000bf54:	687b      	ldr	r3, [r7, #4]
9000bf56:	681b      	ldr	r3, [r3, #0]
9000bf58:	2b00      	cmp	r3, #0
9000bf5a:	d026      	beq.n	9000bfaa <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
9000bf5c:	4b15      	ldr	r3, [pc, #84]	; (9000bfb4 <tcp_netif_ip_addr_changed+0x70>)
9000bf5e:	681b      	ldr	r3, [r3, #0]
9000bf60:	4619      	mov	r1, r3
9000bf62:	6878      	ldr	r0, [r7, #4]
9000bf64:	f7ff ffbc 	bl	9000bee0 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
9000bf68:	4b13      	ldr	r3, [pc, #76]	; (9000bfb8 <tcp_netif_ip_addr_changed+0x74>)
9000bf6a:	681b      	ldr	r3, [r3, #0]
9000bf6c:	4619      	mov	r1, r3
9000bf6e:	6878      	ldr	r0, [r7, #4]
9000bf70:	f7ff ffb6 	bl	9000bee0 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
9000bf74:	683b      	ldr	r3, [r7, #0]
9000bf76:	2b00      	cmp	r3, #0
9000bf78:	d017      	beq.n	9000bfaa <tcp_netif_ip_addr_changed+0x66>
9000bf7a:	683b      	ldr	r3, [r7, #0]
9000bf7c:	681b      	ldr	r3, [r3, #0]
9000bf7e:	2b00      	cmp	r3, #0
9000bf80:	d013      	beq.n	9000bfaa <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
9000bf82:	4b0e      	ldr	r3, [pc, #56]	; (9000bfbc <tcp_netif_ip_addr_changed+0x78>)
9000bf84:	681b      	ldr	r3, [r3, #0]
9000bf86:	60fb      	str	r3, [r7, #12]
9000bf88:	e00c      	b.n	9000bfa4 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
9000bf8a:	68fb      	ldr	r3, [r7, #12]
9000bf8c:	681a      	ldr	r2, [r3, #0]
9000bf8e:	687b      	ldr	r3, [r7, #4]
9000bf90:	681b      	ldr	r3, [r3, #0]
9000bf92:	429a      	cmp	r2, r3
9000bf94:	d103      	bne.n	9000bf9e <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
9000bf96:	683b      	ldr	r3, [r7, #0]
9000bf98:	681a      	ldr	r2, [r3, #0]
9000bf9a:	68fb      	ldr	r3, [r7, #12]
9000bf9c:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
9000bf9e:	68fb      	ldr	r3, [r7, #12]
9000bfa0:	68db      	ldr	r3, [r3, #12]
9000bfa2:	60fb      	str	r3, [r7, #12]
9000bfa4:	68fb      	ldr	r3, [r7, #12]
9000bfa6:	2b00      	cmp	r3, #0
9000bfa8:	d1ef      	bne.n	9000bf8a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
9000bfaa:	bf00      	nop
9000bfac:	3710      	adds	r7, #16
9000bfae:	46bd      	mov	sp, r7
9000bfb0:	bd80      	pop	{r7, pc}
9000bfb2:	bf00      	nop
9000bfb4:	2401102c 	.word	0x2401102c
9000bfb8:	24011024 	.word	0x24011024
9000bfbc:	24011028 	.word	0x24011028

9000bfc0 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
9000bfc0:	b580      	push	{r7, lr}
9000bfc2:	b082      	sub	sp, #8
9000bfc4:	af00      	add	r7, sp, #0
9000bfc6:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
9000bfc8:	687b      	ldr	r3, [r7, #4]
9000bfca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
9000bfcc:	2b00      	cmp	r3, #0
9000bfce:	d007      	beq.n	9000bfe0 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
9000bfd0:	687b      	ldr	r3, [r7, #4]
9000bfd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
9000bfd4:	4618      	mov	r0, r3
9000bfd6:	f7ff fb51 	bl	9000b67c <tcp_segs_free>
    pcb->ooseq = NULL;
9000bfda:	687b      	ldr	r3, [r7, #4]
9000bfdc:	2200      	movs	r2, #0
9000bfde:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
9000bfe0:	bf00      	nop
9000bfe2:	3708      	adds	r7, #8
9000bfe4:	46bd      	mov	sp, r7
9000bfe6:	bd80      	pop	{r7, pc}

9000bfe8 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
9000bfe8:	b590      	push	{r4, r7, lr}
9000bfea:	b08d      	sub	sp, #52	; 0x34
9000bfec:	af04      	add	r7, sp, #16
9000bfee:	6078      	str	r0, [r7, #4]
9000bff0:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
9000bff2:	687b      	ldr	r3, [r7, #4]
9000bff4:	2b00      	cmp	r3, #0
9000bff6:	d105      	bne.n	9000c004 <tcp_input+0x1c>
9000bff8:	4b9b      	ldr	r3, [pc, #620]	; (9000c268 <tcp_input+0x280>)
9000bffa:	2283      	movs	r2, #131	; 0x83
9000bffc:	499b      	ldr	r1, [pc, #620]	; (9000c26c <tcp_input+0x284>)
9000bffe:	489c      	ldr	r0, [pc, #624]	; (9000c270 <tcp_input+0x288>)
9000c000:	f007 fb1a 	bl	90013638 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
9000c004:	687b      	ldr	r3, [r7, #4]
9000c006:	685b      	ldr	r3, [r3, #4]
9000c008:	4a9a      	ldr	r2, [pc, #616]	; (9000c274 <tcp_input+0x28c>)
9000c00a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
9000c00c:	687b      	ldr	r3, [r7, #4]
9000c00e:	895b      	ldrh	r3, [r3, #10]
9000c010:	2b13      	cmp	r3, #19
9000c012:	f240 83d1 	bls.w	9000c7b8 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
9000c016:	4b98      	ldr	r3, [pc, #608]	; (9000c278 <tcp_input+0x290>)
9000c018:	695b      	ldr	r3, [r3, #20]
9000c01a:	4a97      	ldr	r2, [pc, #604]	; (9000c278 <tcp_input+0x290>)
9000c01c:	6812      	ldr	r2, [r2, #0]
9000c01e:	4611      	mov	r1, r2
9000c020:	4618      	mov	r0, r3
9000c022:	f006 f8c5 	bl	900121b0 <ip4_addr_isbroadcast_u32>
9000c026:	4603      	mov	r3, r0
9000c028:	2b00      	cmp	r3, #0
9000c02a:	f040 83c7 	bne.w	9000c7bc <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
9000c02e:	4b92      	ldr	r3, [pc, #584]	; (9000c278 <tcp_input+0x290>)
9000c030:	695b      	ldr	r3, [r3, #20]
9000c032:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
9000c036:	2be0      	cmp	r3, #224	; 0xe0
9000c038:	f000 83c0 	beq.w	9000c7bc <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
9000c03c:	4b8d      	ldr	r3, [pc, #564]	; (9000c274 <tcp_input+0x28c>)
9000c03e:	681b      	ldr	r3, [r3, #0]
9000c040:	899b      	ldrh	r3, [r3, #12]
9000c042:	b29b      	uxth	r3, r3
9000c044:	4618      	mov	r0, r3
9000c046:	f7fc fa05 	bl	90008454 <lwip_htons>
9000c04a:	4603      	mov	r3, r0
9000c04c:	0b1b      	lsrs	r3, r3, #12
9000c04e:	b29b      	uxth	r3, r3
9000c050:	b2db      	uxtb	r3, r3
9000c052:	009b      	lsls	r3, r3, #2
9000c054:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
9000c056:	7cbb      	ldrb	r3, [r7, #18]
9000c058:	2b13      	cmp	r3, #19
9000c05a:	f240 83b1 	bls.w	9000c7c0 <tcp_input+0x7d8>
9000c05e:	7cbb      	ldrb	r3, [r7, #18]
9000c060:	b29a      	uxth	r2, r3
9000c062:	687b      	ldr	r3, [r7, #4]
9000c064:	891b      	ldrh	r3, [r3, #8]
9000c066:	429a      	cmp	r2, r3
9000c068:	f200 83aa 	bhi.w	9000c7c0 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
9000c06c:	7cbb      	ldrb	r3, [r7, #18]
9000c06e:	b29b      	uxth	r3, r3
9000c070:	3b14      	subs	r3, #20
9000c072:	b29a      	uxth	r2, r3
9000c074:	4b81      	ldr	r3, [pc, #516]	; (9000c27c <tcp_input+0x294>)
9000c076:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
9000c078:	4b81      	ldr	r3, [pc, #516]	; (9000c280 <tcp_input+0x298>)
9000c07a:	2200      	movs	r2, #0
9000c07c:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
9000c07e:	687b      	ldr	r3, [r7, #4]
9000c080:	895a      	ldrh	r2, [r3, #10]
9000c082:	7cbb      	ldrb	r3, [r7, #18]
9000c084:	b29b      	uxth	r3, r3
9000c086:	429a      	cmp	r2, r3
9000c088:	d309      	bcc.n	9000c09e <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
9000c08a:	4b7c      	ldr	r3, [pc, #496]	; (9000c27c <tcp_input+0x294>)
9000c08c:	881a      	ldrh	r2, [r3, #0]
9000c08e:	4b7d      	ldr	r3, [pc, #500]	; (9000c284 <tcp_input+0x29c>)
9000c090:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
9000c092:	7cbb      	ldrb	r3, [r7, #18]
9000c094:	4619      	mov	r1, r3
9000c096:	6878      	ldr	r0, [r7, #4]
9000c098:	f7fd fe46 	bl	90009d28 <pbuf_remove_header>
9000c09c:	e04e      	b.n	9000c13c <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
9000c09e:	687b      	ldr	r3, [r7, #4]
9000c0a0:	681b      	ldr	r3, [r3, #0]
9000c0a2:	2b00      	cmp	r3, #0
9000c0a4:	d105      	bne.n	9000c0b2 <tcp_input+0xca>
9000c0a6:	4b70      	ldr	r3, [pc, #448]	; (9000c268 <tcp_input+0x280>)
9000c0a8:	22c2      	movs	r2, #194	; 0xc2
9000c0aa:	4977      	ldr	r1, [pc, #476]	; (9000c288 <tcp_input+0x2a0>)
9000c0ac:	4870      	ldr	r0, [pc, #448]	; (9000c270 <tcp_input+0x288>)
9000c0ae:	f007 fac3 	bl	90013638 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
9000c0b2:	2114      	movs	r1, #20
9000c0b4:	6878      	ldr	r0, [r7, #4]
9000c0b6:	f7fd fe37 	bl	90009d28 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
9000c0ba:	687b      	ldr	r3, [r7, #4]
9000c0bc:	895a      	ldrh	r2, [r3, #10]
9000c0be:	4b71      	ldr	r3, [pc, #452]	; (9000c284 <tcp_input+0x29c>)
9000c0c0:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
9000c0c2:	4b6e      	ldr	r3, [pc, #440]	; (9000c27c <tcp_input+0x294>)
9000c0c4:	881a      	ldrh	r2, [r3, #0]
9000c0c6:	4b6f      	ldr	r3, [pc, #444]	; (9000c284 <tcp_input+0x29c>)
9000c0c8:	881b      	ldrh	r3, [r3, #0]
9000c0ca:	1ad3      	subs	r3, r2, r3
9000c0cc:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
9000c0ce:	4b6d      	ldr	r3, [pc, #436]	; (9000c284 <tcp_input+0x29c>)
9000c0d0:	881b      	ldrh	r3, [r3, #0]
9000c0d2:	4619      	mov	r1, r3
9000c0d4:	6878      	ldr	r0, [r7, #4]
9000c0d6:	f7fd fe27 	bl	90009d28 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
9000c0da:	687b      	ldr	r3, [r7, #4]
9000c0dc:	681b      	ldr	r3, [r3, #0]
9000c0de:	895b      	ldrh	r3, [r3, #10]
9000c0e0:	8a3a      	ldrh	r2, [r7, #16]
9000c0e2:	429a      	cmp	r2, r3
9000c0e4:	f200 836e 	bhi.w	9000c7c4 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
9000c0e8:	687b      	ldr	r3, [r7, #4]
9000c0ea:	681b      	ldr	r3, [r3, #0]
9000c0ec:	685b      	ldr	r3, [r3, #4]
9000c0ee:	4a64      	ldr	r2, [pc, #400]	; (9000c280 <tcp_input+0x298>)
9000c0f0:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
9000c0f2:	687b      	ldr	r3, [r7, #4]
9000c0f4:	681b      	ldr	r3, [r3, #0]
9000c0f6:	8a3a      	ldrh	r2, [r7, #16]
9000c0f8:	4611      	mov	r1, r2
9000c0fa:	4618      	mov	r0, r3
9000c0fc:	f7fd fe14 	bl	90009d28 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
9000c100:	687b      	ldr	r3, [r7, #4]
9000c102:	891a      	ldrh	r2, [r3, #8]
9000c104:	8a3b      	ldrh	r3, [r7, #16]
9000c106:	1ad3      	subs	r3, r2, r3
9000c108:	b29a      	uxth	r2, r3
9000c10a:	687b      	ldr	r3, [r7, #4]
9000c10c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
9000c10e:	687b      	ldr	r3, [r7, #4]
9000c110:	895b      	ldrh	r3, [r3, #10]
9000c112:	2b00      	cmp	r3, #0
9000c114:	d005      	beq.n	9000c122 <tcp_input+0x13a>
9000c116:	4b54      	ldr	r3, [pc, #336]	; (9000c268 <tcp_input+0x280>)
9000c118:	22df      	movs	r2, #223	; 0xdf
9000c11a:	495c      	ldr	r1, [pc, #368]	; (9000c28c <tcp_input+0x2a4>)
9000c11c:	4854      	ldr	r0, [pc, #336]	; (9000c270 <tcp_input+0x288>)
9000c11e:	f007 fa8b 	bl	90013638 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
9000c122:	687b      	ldr	r3, [r7, #4]
9000c124:	891a      	ldrh	r2, [r3, #8]
9000c126:	687b      	ldr	r3, [r7, #4]
9000c128:	681b      	ldr	r3, [r3, #0]
9000c12a:	891b      	ldrh	r3, [r3, #8]
9000c12c:	429a      	cmp	r2, r3
9000c12e:	d005      	beq.n	9000c13c <tcp_input+0x154>
9000c130:	4b4d      	ldr	r3, [pc, #308]	; (9000c268 <tcp_input+0x280>)
9000c132:	22e0      	movs	r2, #224	; 0xe0
9000c134:	4956      	ldr	r1, [pc, #344]	; (9000c290 <tcp_input+0x2a8>)
9000c136:	484e      	ldr	r0, [pc, #312]	; (9000c270 <tcp_input+0x288>)
9000c138:	f007 fa7e 	bl	90013638 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
9000c13c:	4b4d      	ldr	r3, [pc, #308]	; (9000c274 <tcp_input+0x28c>)
9000c13e:	681b      	ldr	r3, [r3, #0]
9000c140:	881b      	ldrh	r3, [r3, #0]
9000c142:	b29b      	uxth	r3, r3
9000c144:	4a4b      	ldr	r2, [pc, #300]	; (9000c274 <tcp_input+0x28c>)
9000c146:	6814      	ldr	r4, [r2, #0]
9000c148:	4618      	mov	r0, r3
9000c14a:	f7fc f983 	bl	90008454 <lwip_htons>
9000c14e:	4603      	mov	r3, r0
9000c150:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
9000c152:	4b48      	ldr	r3, [pc, #288]	; (9000c274 <tcp_input+0x28c>)
9000c154:	681b      	ldr	r3, [r3, #0]
9000c156:	885b      	ldrh	r3, [r3, #2]
9000c158:	b29b      	uxth	r3, r3
9000c15a:	4a46      	ldr	r2, [pc, #280]	; (9000c274 <tcp_input+0x28c>)
9000c15c:	6814      	ldr	r4, [r2, #0]
9000c15e:	4618      	mov	r0, r3
9000c160:	f7fc f978 	bl	90008454 <lwip_htons>
9000c164:	4603      	mov	r3, r0
9000c166:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
9000c168:	4b42      	ldr	r3, [pc, #264]	; (9000c274 <tcp_input+0x28c>)
9000c16a:	681b      	ldr	r3, [r3, #0]
9000c16c:	685b      	ldr	r3, [r3, #4]
9000c16e:	4a41      	ldr	r2, [pc, #260]	; (9000c274 <tcp_input+0x28c>)
9000c170:	6814      	ldr	r4, [r2, #0]
9000c172:	4618      	mov	r0, r3
9000c174:	f7fc f983 	bl	9000847e <lwip_htonl>
9000c178:	4603      	mov	r3, r0
9000c17a:	6063      	str	r3, [r4, #4]
9000c17c:	6863      	ldr	r3, [r4, #4]
9000c17e:	4a45      	ldr	r2, [pc, #276]	; (9000c294 <tcp_input+0x2ac>)
9000c180:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
9000c182:	4b3c      	ldr	r3, [pc, #240]	; (9000c274 <tcp_input+0x28c>)
9000c184:	681b      	ldr	r3, [r3, #0]
9000c186:	689b      	ldr	r3, [r3, #8]
9000c188:	4a3a      	ldr	r2, [pc, #232]	; (9000c274 <tcp_input+0x28c>)
9000c18a:	6814      	ldr	r4, [r2, #0]
9000c18c:	4618      	mov	r0, r3
9000c18e:	f7fc f976 	bl	9000847e <lwip_htonl>
9000c192:	4603      	mov	r3, r0
9000c194:	60a3      	str	r3, [r4, #8]
9000c196:	68a3      	ldr	r3, [r4, #8]
9000c198:	4a3f      	ldr	r2, [pc, #252]	; (9000c298 <tcp_input+0x2b0>)
9000c19a:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
9000c19c:	4b35      	ldr	r3, [pc, #212]	; (9000c274 <tcp_input+0x28c>)
9000c19e:	681b      	ldr	r3, [r3, #0]
9000c1a0:	89db      	ldrh	r3, [r3, #14]
9000c1a2:	b29b      	uxth	r3, r3
9000c1a4:	4a33      	ldr	r2, [pc, #204]	; (9000c274 <tcp_input+0x28c>)
9000c1a6:	6814      	ldr	r4, [r2, #0]
9000c1a8:	4618      	mov	r0, r3
9000c1aa:	f7fc f953 	bl	90008454 <lwip_htons>
9000c1ae:	4603      	mov	r3, r0
9000c1b0:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
9000c1b2:	4b30      	ldr	r3, [pc, #192]	; (9000c274 <tcp_input+0x28c>)
9000c1b4:	681b      	ldr	r3, [r3, #0]
9000c1b6:	899b      	ldrh	r3, [r3, #12]
9000c1b8:	b29b      	uxth	r3, r3
9000c1ba:	4618      	mov	r0, r3
9000c1bc:	f7fc f94a 	bl	90008454 <lwip_htons>
9000c1c0:	4603      	mov	r3, r0
9000c1c2:	b2db      	uxtb	r3, r3
9000c1c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
9000c1c8:	b2da      	uxtb	r2, r3
9000c1ca:	4b34      	ldr	r3, [pc, #208]	; (9000c29c <tcp_input+0x2b4>)
9000c1cc:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
9000c1ce:	687b      	ldr	r3, [r7, #4]
9000c1d0:	891a      	ldrh	r2, [r3, #8]
9000c1d2:	4b33      	ldr	r3, [pc, #204]	; (9000c2a0 <tcp_input+0x2b8>)
9000c1d4:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
9000c1d6:	4b31      	ldr	r3, [pc, #196]	; (9000c29c <tcp_input+0x2b4>)
9000c1d8:	781b      	ldrb	r3, [r3, #0]
9000c1da:	f003 0303 	and.w	r3, r3, #3
9000c1de:	2b00      	cmp	r3, #0
9000c1e0:	d00c      	beq.n	9000c1fc <tcp_input+0x214>
    tcplen++;
9000c1e2:	4b2f      	ldr	r3, [pc, #188]	; (9000c2a0 <tcp_input+0x2b8>)
9000c1e4:	881b      	ldrh	r3, [r3, #0]
9000c1e6:	3301      	adds	r3, #1
9000c1e8:	b29a      	uxth	r2, r3
9000c1ea:	4b2d      	ldr	r3, [pc, #180]	; (9000c2a0 <tcp_input+0x2b8>)
9000c1ec:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
9000c1ee:	687b      	ldr	r3, [r7, #4]
9000c1f0:	891a      	ldrh	r2, [r3, #8]
9000c1f2:	4b2b      	ldr	r3, [pc, #172]	; (9000c2a0 <tcp_input+0x2b8>)
9000c1f4:	881b      	ldrh	r3, [r3, #0]
9000c1f6:	429a      	cmp	r2, r3
9000c1f8:	f200 82e6 	bhi.w	9000c7c8 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
9000c1fc:	2300      	movs	r3, #0
9000c1fe:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
9000c200:	4b28      	ldr	r3, [pc, #160]	; (9000c2a4 <tcp_input+0x2bc>)
9000c202:	681b      	ldr	r3, [r3, #0]
9000c204:	61fb      	str	r3, [r7, #28]
9000c206:	e09d      	b.n	9000c344 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
9000c208:	69fb      	ldr	r3, [r7, #28]
9000c20a:	7d1b      	ldrb	r3, [r3, #20]
9000c20c:	2b00      	cmp	r3, #0
9000c20e:	d105      	bne.n	9000c21c <tcp_input+0x234>
9000c210:	4b15      	ldr	r3, [pc, #84]	; (9000c268 <tcp_input+0x280>)
9000c212:	22fb      	movs	r2, #251	; 0xfb
9000c214:	4924      	ldr	r1, [pc, #144]	; (9000c2a8 <tcp_input+0x2c0>)
9000c216:	4816      	ldr	r0, [pc, #88]	; (9000c270 <tcp_input+0x288>)
9000c218:	f007 fa0e 	bl	90013638 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
9000c21c:	69fb      	ldr	r3, [r7, #28]
9000c21e:	7d1b      	ldrb	r3, [r3, #20]
9000c220:	2b0a      	cmp	r3, #10
9000c222:	d105      	bne.n	9000c230 <tcp_input+0x248>
9000c224:	4b10      	ldr	r3, [pc, #64]	; (9000c268 <tcp_input+0x280>)
9000c226:	22fc      	movs	r2, #252	; 0xfc
9000c228:	4920      	ldr	r1, [pc, #128]	; (9000c2ac <tcp_input+0x2c4>)
9000c22a:	4811      	ldr	r0, [pc, #68]	; (9000c270 <tcp_input+0x288>)
9000c22c:	f007 fa04 	bl	90013638 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
9000c230:	69fb      	ldr	r3, [r7, #28]
9000c232:	7d1b      	ldrb	r3, [r3, #20]
9000c234:	2b01      	cmp	r3, #1
9000c236:	d105      	bne.n	9000c244 <tcp_input+0x25c>
9000c238:	4b0b      	ldr	r3, [pc, #44]	; (9000c268 <tcp_input+0x280>)
9000c23a:	22fd      	movs	r2, #253	; 0xfd
9000c23c:	491c      	ldr	r1, [pc, #112]	; (9000c2b0 <tcp_input+0x2c8>)
9000c23e:	480c      	ldr	r0, [pc, #48]	; (9000c270 <tcp_input+0x288>)
9000c240:	f007 f9fa 	bl	90013638 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
9000c244:	69fb      	ldr	r3, [r7, #28]
9000c246:	7a1b      	ldrb	r3, [r3, #8]
9000c248:	2b00      	cmp	r3, #0
9000c24a:	d033      	beq.n	9000c2b4 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
9000c24c:	69fb      	ldr	r3, [r7, #28]
9000c24e:	7a1a      	ldrb	r2, [r3, #8]
9000c250:	4b09      	ldr	r3, [pc, #36]	; (9000c278 <tcp_input+0x290>)
9000c252:	685b      	ldr	r3, [r3, #4]
9000c254:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
9000c258:	3301      	adds	r3, #1
9000c25a:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
9000c25c:	429a      	cmp	r2, r3
9000c25e:	d029      	beq.n	9000c2b4 <tcp_input+0x2cc>
      prev = pcb;
9000c260:	69fb      	ldr	r3, [r7, #28]
9000c262:	61bb      	str	r3, [r7, #24]
      continue;
9000c264:	e06b      	b.n	9000c33e <tcp_input+0x356>
9000c266:	bf00      	nop
9000c268:	90015ab0 	.word	0x90015ab0
9000c26c:	90015ae4 	.word	0x90015ae4
9000c270:	90015afc 	.word	0x90015afc
9000c274:	24011048 	.word	0x24011048
9000c278:	2400df20 	.word	0x2400df20
9000c27c:	2401104c 	.word	0x2401104c
9000c280:	24011050 	.word	0x24011050
9000c284:	2401104e 	.word	0x2401104e
9000c288:	90015b24 	.word	0x90015b24
9000c28c:	90015b34 	.word	0x90015b34
9000c290:	90015b40 	.word	0x90015b40
9000c294:	24011058 	.word	0x24011058
9000c298:	2401105c 	.word	0x2401105c
9000c29c:	24011064 	.word	0x24011064
9000c2a0:	24011062 	.word	0x24011062
9000c2a4:	2401102c 	.word	0x2401102c
9000c2a8:	90015b60 	.word	0x90015b60
9000c2ac:	90015b88 	.word	0x90015b88
9000c2b0:	90015bb4 	.word	0x90015bb4
    }

    if (pcb->remote_port == tcphdr->src &&
9000c2b4:	69fb      	ldr	r3, [r7, #28]
9000c2b6:	8b1a      	ldrh	r2, [r3, #24]
9000c2b8:	4b72      	ldr	r3, [pc, #456]	; (9000c484 <tcp_input+0x49c>)
9000c2ba:	681b      	ldr	r3, [r3, #0]
9000c2bc:	881b      	ldrh	r3, [r3, #0]
9000c2be:	b29b      	uxth	r3, r3
9000c2c0:	429a      	cmp	r2, r3
9000c2c2:	d13a      	bne.n	9000c33a <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
9000c2c4:	69fb      	ldr	r3, [r7, #28]
9000c2c6:	8ada      	ldrh	r2, [r3, #22]
9000c2c8:	4b6e      	ldr	r3, [pc, #440]	; (9000c484 <tcp_input+0x49c>)
9000c2ca:	681b      	ldr	r3, [r3, #0]
9000c2cc:	885b      	ldrh	r3, [r3, #2]
9000c2ce:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
9000c2d0:	429a      	cmp	r2, r3
9000c2d2:	d132      	bne.n	9000c33a <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
9000c2d4:	69fb      	ldr	r3, [r7, #28]
9000c2d6:	685a      	ldr	r2, [r3, #4]
9000c2d8:	4b6b      	ldr	r3, [pc, #428]	; (9000c488 <tcp_input+0x4a0>)
9000c2da:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
9000c2dc:	429a      	cmp	r2, r3
9000c2de:	d12c      	bne.n	9000c33a <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
9000c2e0:	69fb      	ldr	r3, [r7, #28]
9000c2e2:	681a      	ldr	r2, [r3, #0]
9000c2e4:	4b68      	ldr	r3, [pc, #416]	; (9000c488 <tcp_input+0x4a0>)
9000c2e6:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
9000c2e8:	429a      	cmp	r2, r3
9000c2ea:	d126      	bne.n	9000c33a <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
9000c2ec:	69fb      	ldr	r3, [r7, #28]
9000c2ee:	68db      	ldr	r3, [r3, #12]
9000c2f0:	69fa      	ldr	r2, [r7, #28]
9000c2f2:	429a      	cmp	r2, r3
9000c2f4:	d106      	bne.n	9000c304 <tcp_input+0x31c>
9000c2f6:	4b65      	ldr	r3, [pc, #404]	; (9000c48c <tcp_input+0x4a4>)
9000c2f8:	f240 120d 	movw	r2, #269	; 0x10d
9000c2fc:	4964      	ldr	r1, [pc, #400]	; (9000c490 <tcp_input+0x4a8>)
9000c2fe:	4865      	ldr	r0, [pc, #404]	; (9000c494 <tcp_input+0x4ac>)
9000c300:	f007 f99a 	bl	90013638 <iprintf>
      if (prev != NULL) {
9000c304:	69bb      	ldr	r3, [r7, #24]
9000c306:	2b00      	cmp	r3, #0
9000c308:	d00a      	beq.n	9000c320 <tcp_input+0x338>
        prev->next = pcb->next;
9000c30a:	69fb      	ldr	r3, [r7, #28]
9000c30c:	68da      	ldr	r2, [r3, #12]
9000c30e:	69bb      	ldr	r3, [r7, #24]
9000c310:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
9000c312:	4b61      	ldr	r3, [pc, #388]	; (9000c498 <tcp_input+0x4b0>)
9000c314:	681a      	ldr	r2, [r3, #0]
9000c316:	69fb      	ldr	r3, [r7, #28]
9000c318:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
9000c31a:	4a5f      	ldr	r2, [pc, #380]	; (9000c498 <tcp_input+0x4b0>)
9000c31c:	69fb      	ldr	r3, [r7, #28]
9000c31e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
9000c320:	69fb      	ldr	r3, [r7, #28]
9000c322:	68db      	ldr	r3, [r3, #12]
9000c324:	69fa      	ldr	r2, [r7, #28]
9000c326:	429a      	cmp	r2, r3
9000c328:	d111      	bne.n	9000c34e <tcp_input+0x366>
9000c32a:	4b58      	ldr	r3, [pc, #352]	; (9000c48c <tcp_input+0x4a4>)
9000c32c:	f240 1215 	movw	r2, #277	; 0x115
9000c330:	495a      	ldr	r1, [pc, #360]	; (9000c49c <tcp_input+0x4b4>)
9000c332:	4858      	ldr	r0, [pc, #352]	; (9000c494 <tcp_input+0x4ac>)
9000c334:	f007 f980 	bl	90013638 <iprintf>
      break;
9000c338:	e009      	b.n	9000c34e <tcp_input+0x366>
    }
    prev = pcb;
9000c33a:	69fb      	ldr	r3, [r7, #28]
9000c33c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
9000c33e:	69fb      	ldr	r3, [r7, #28]
9000c340:	68db      	ldr	r3, [r3, #12]
9000c342:	61fb      	str	r3, [r7, #28]
9000c344:	69fb      	ldr	r3, [r7, #28]
9000c346:	2b00      	cmp	r3, #0
9000c348:	f47f af5e 	bne.w	9000c208 <tcp_input+0x220>
9000c34c:	e000      	b.n	9000c350 <tcp_input+0x368>
      break;
9000c34e:	bf00      	nop
  }

  if (pcb == NULL) {
9000c350:	69fb      	ldr	r3, [r7, #28]
9000c352:	2b00      	cmp	r3, #0
9000c354:	f040 80aa 	bne.w	9000c4ac <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
9000c358:	4b51      	ldr	r3, [pc, #324]	; (9000c4a0 <tcp_input+0x4b8>)
9000c35a:	681b      	ldr	r3, [r3, #0]
9000c35c:	61fb      	str	r3, [r7, #28]
9000c35e:	e03f      	b.n	9000c3e0 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
9000c360:	69fb      	ldr	r3, [r7, #28]
9000c362:	7d1b      	ldrb	r3, [r3, #20]
9000c364:	2b0a      	cmp	r3, #10
9000c366:	d006      	beq.n	9000c376 <tcp_input+0x38e>
9000c368:	4b48      	ldr	r3, [pc, #288]	; (9000c48c <tcp_input+0x4a4>)
9000c36a:	f240 121f 	movw	r2, #287	; 0x11f
9000c36e:	494d      	ldr	r1, [pc, #308]	; (9000c4a4 <tcp_input+0x4bc>)
9000c370:	4848      	ldr	r0, [pc, #288]	; (9000c494 <tcp_input+0x4ac>)
9000c372:	f007 f961 	bl	90013638 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
9000c376:	69fb      	ldr	r3, [r7, #28]
9000c378:	7a1b      	ldrb	r3, [r3, #8]
9000c37a:	2b00      	cmp	r3, #0
9000c37c:	d009      	beq.n	9000c392 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
9000c37e:	69fb      	ldr	r3, [r7, #28]
9000c380:	7a1a      	ldrb	r2, [r3, #8]
9000c382:	4b41      	ldr	r3, [pc, #260]	; (9000c488 <tcp_input+0x4a0>)
9000c384:	685b      	ldr	r3, [r3, #4]
9000c386:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
9000c38a:	3301      	adds	r3, #1
9000c38c:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
9000c38e:	429a      	cmp	r2, r3
9000c390:	d122      	bne.n	9000c3d8 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
9000c392:	69fb      	ldr	r3, [r7, #28]
9000c394:	8b1a      	ldrh	r2, [r3, #24]
9000c396:	4b3b      	ldr	r3, [pc, #236]	; (9000c484 <tcp_input+0x49c>)
9000c398:	681b      	ldr	r3, [r3, #0]
9000c39a:	881b      	ldrh	r3, [r3, #0]
9000c39c:	b29b      	uxth	r3, r3
9000c39e:	429a      	cmp	r2, r3
9000c3a0:	d11b      	bne.n	9000c3da <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
9000c3a2:	69fb      	ldr	r3, [r7, #28]
9000c3a4:	8ada      	ldrh	r2, [r3, #22]
9000c3a6:	4b37      	ldr	r3, [pc, #220]	; (9000c484 <tcp_input+0x49c>)
9000c3a8:	681b      	ldr	r3, [r3, #0]
9000c3aa:	885b      	ldrh	r3, [r3, #2]
9000c3ac:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
9000c3ae:	429a      	cmp	r2, r3
9000c3b0:	d113      	bne.n	9000c3da <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
9000c3b2:	69fb      	ldr	r3, [r7, #28]
9000c3b4:	685a      	ldr	r2, [r3, #4]
9000c3b6:	4b34      	ldr	r3, [pc, #208]	; (9000c488 <tcp_input+0x4a0>)
9000c3b8:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
9000c3ba:	429a      	cmp	r2, r3
9000c3bc:	d10d      	bne.n	9000c3da <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
9000c3be:	69fb      	ldr	r3, [r7, #28]
9000c3c0:	681a      	ldr	r2, [r3, #0]
9000c3c2:	4b31      	ldr	r3, [pc, #196]	; (9000c488 <tcp_input+0x4a0>)
9000c3c4:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
9000c3c6:	429a      	cmp	r2, r3
9000c3c8:	d107      	bne.n	9000c3da <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
9000c3ca:	69f8      	ldr	r0, [r7, #28]
9000c3cc:	f000 fb56 	bl	9000ca7c <tcp_timewait_input>
        }
        pbuf_free(p);
9000c3d0:	6878      	ldr	r0, [r7, #4]
9000c3d2:	f7fd fd2f 	bl	90009e34 <pbuf_free>
        return;
9000c3d6:	e1fd      	b.n	9000c7d4 <tcp_input+0x7ec>
        continue;
9000c3d8:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
9000c3da:	69fb      	ldr	r3, [r7, #28]
9000c3dc:	68db      	ldr	r3, [r3, #12]
9000c3de:	61fb      	str	r3, [r7, #28]
9000c3e0:	69fb      	ldr	r3, [r7, #28]
9000c3e2:	2b00      	cmp	r3, #0
9000c3e4:	d1bc      	bne.n	9000c360 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
9000c3e6:	2300      	movs	r3, #0
9000c3e8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
9000c3ea:	4b2f      	ldr	r3, [pc, #188]	; (9000c4a8 <tcp_input+0x4c0>)
9000c3ec:	681b      	ldr	r3, [r3, #0]
9000c3ee:	617b      	str	r3, [r7, #20]
9000c3f0:	e02a      	b.n	9000c448 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
9000c3f2:	697b      	ldr	r3, [r7, #20]
9000c3f4:	7a1b      	ldrb	r3, [r3, #8]
9000c3f6:	2b00      	cmp	r3, #0
9000c3f8:	d00c      	beq.n	9000c414 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
9000c3fa:	697b      	ldr	r3, [r7, #20]
9000c3fc:	7a1a      	ldrb	r2, [r3, #8]
9000c3fe:	4b22      	ldr	r3, [pc, #136]	; (9000c488 <tcp_input+0x4a0>)
9000c400:	685b      	ldr	r3, [r3, #4]
9000c402:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
9000c406:	3301      	adds	r3, #1
9000c408:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
9000c40a:	429a      	cmp	r2, r3
9000c40c:	d002      	beq.n	9000c414 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
9000c40e:	697b      	ldr	r3, [r7, #20]
9000c410:	61bb      	str	r3, [r7, #24]
        continue;
9000c412:	e016      	b.n	9000c442 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
9000c414:	697b      	ldr	r3, [r7, #20]
9000c416:	8ada      	ldrh	r2, [r3, #22]
9000c418:	4b1a      	ldr	r3, [pc, #104]	; (9000c484 <tcp_input+0x49c>)
9000c41a:	681b      	ldr	r3, [r3, #0]
9000c41c:	885b      	ldrh	r3, [r3, #2]
9000c41e:	b29b      	uxth	r3, r3
9000c420:	429a      	cmp	r2, r3
9000c422:	d10c      	bne.n	9000c43e <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
9000c424:	697b      	ldr	r3, [r7, #20]
9000c426:	681a      	ldr	r2, [r3, #0]
9000c428:	4b17      	ldr	r3, [pc, #92]	; (9000c488 <tcp_input+0x4a0>)
9000c42a:	695b      	ldr	r3, [r3, #20]
9000c42c:	429a      	cmp	r2, r3
9000c42e:	d00f      	beq.n	9000c450 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
9000c430:	697b      	ldr	r3, [r7, #20]
9000c432:	2b00      	cmp	r3, #0
9000c434:	d00d      	beq.n	9000c452 <tcp_input+0x46a>
9000c436:	697b      	ldr	r3, [r7, #20]
9000c438:	681b      	ldr	r3, [r3, #0]
9000c43a:	2b00      	cmp	r3, #0
9000c43c:	d009      	beq.n	9000c452 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
9000c43e:	697b      	ldr	r3, [r7, #20]
9000c440:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
9000c442:	697b      	ldr	r3, [r7, #20]
9000c444:	68db      	ldr	r3, [r3, #12]
9000c446:	617b      	str	r3, [r7, #20]
9000c448:	697b      	ldr	r3, [r7, #20]
9000c44a:	2b00      	cmp	r3, #0
9000c44c:	d1d1      	bne.n	9000c3f2 <tcp_input+0x40a>
9000c44e:	e000      	b.n	9000c452 <tcp_input+0x46a>
            break;
9000c450:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
9000c452:	697b      	ldr	r3, [r7, #20]
9000c454:	2b00      	cmp	r3, #0
9000c456:	d029      	beq.n	9000c4ac <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
9000c458:	69bb      	ldr	r3, [r7, #24]
9000c45a:	2b00      	cmp	r3, #0
9000c45c:	d00a      	beq.n	9000c474 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
9000c45e:	697b      	ldr	r3, [r7, #20]
9000c460:	68da      	ldr	r2, [r3, #12]
9000c462:	69bb      	ldr	r3, [r7, #24]
9000c464:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
9000c466:	4b10      	ldr	r3, [pc, #64]	; (9000c4a8 <tcp_input+0x4c0>)
9000c468:	681a      	ldr	r2, [r3, #0]
9000c46a:	697b      	ldr	r3, [r7, #20]
9000c46c:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
9000c46e:	4a0e      	ldr	r2, [pc, #56]	; (9000c4a8 <tcp_input+0x4c0>)
9000c470:	697b      	ldr	r3, [r7, #20]
9000c472:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
9000c474:	6978      	ldr	r0, [r7, #20]
9000c476:	f000 fa03 	bl	9000c880 <tcp_listen_input>
      }
      pbuf_free(p);
9000c47a:	6878      	ldr	r0, [r7, #4]
9000c47c:	f7fd fcda 	bl	90009e34 <pbuf_free>
      return;
9000c480:	e1a8      	b.n	9000c7d4 <tcp_input+0x7ec>
9000c482:	bf00      	nop
9000c484:	24011048 	.word	0x24011048
9000c488:	2400df20 	.word	0x2400df20
9000c48c:	90015ab0 	.word	0x90015ab0
9000c490:	90015bdc 	.word	0x90015bdc
9000c494:	90015afc 	.word	0x90015afc
9000c498:	2401102c 	.word	0x2401102c
9000c49c:	90015c08 	.word	0x90015c08
9000c4a0:	24011030 	.word	0x24011030
9000c4a4:	90015c34 	.word	0x90015c34
9000c4a8:	24011028 	.word	0x24011028
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
9000c4ac:	69fb      	ldr	r3, [r7, #28]
9000c4ae:	2b00      	cmp	r3, #0
9000c4b0:	f000 8158 	beq.w	9000c764 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
9000c4b4:	4b95      	ldr	r3, [pc, #596]	; (9000c70c <tcp_input+0x724>)
9000c4b6:	2200      	movs	r2, #0
9000c4b8:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
9000c4ba:	687b      	ldr	r3, [r7, #4]
9000c4bc:	891a      	ldrh	r2, [r3, #8]
9000c4be:	4b93      	ldr	r3, [pc, #588]	; (9000c70c <tcp_input+0x724>)
9000c4c0:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
9000c4c2:	4a92      	ldr	r2, [pc, #584]	; (9000c70c <tcp_input+0x724>)
9000c4c4:	687b      	ldr	r3, [r7, #4]
9000c4c6:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
9000c4c8:	4b91      	ldr	r3, [pc, #580]	; (9000c710 <tcp_input+0x728>)
9000c4ca:	681b      	ldr	r3, [r3, #0]
9000c4cc:	4a8f      	ldr	r2, [pc, #572]	; (9000c70c <tcp_input+0x724>)
9000c4ce:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
9000c4d0:	4b90      	ldr	r3, [pc, #576]	; (9000c714 <tcp_input+0x72c>)
9000c4d2:	2200      	movs	r2, #0
9000c4d4:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
9000c4d6:	4b90      	ldr	r3, [pc, #576]	; (9000c718 <tcp_input+0x730>)
9000c4d8:	2200      	movs	r2, #0
9000c4da:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
9000c4dc:	4b8f      	ldr	r3, [pc, #572]	; (9000c71c <tcp_input+0x734>)
9000c4de:	2200      	movs	r2, #0
9000c4e0:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
9000c4e2:	4b8f      	ldr	r3, [pc, #572]	; (9000c720 <tcp_input+0x738>)
9000c4e4:	781b      	ldrb	r3, [r3, #0]
9000c4e6:	f003 0308 	and.w	r3, r3, #8
9000c4ea:	2b00      	cmp	r3, #0
9000c4ec:	d006      	beq.n	9000c4fc <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
9000c4ee:	687b      	ldr	r3, [r7, #4]
9000c4f0:	7b5b      	ldrb	r3, [r3, #13]
9000c4f2:	f043 0301 	orr.w	r3, r3, #1
9000c4f6:	b2da      	uxtb	r2, r3
9000c4f8:	687b      	ldr	r3, [r7, #4]
9000c4fa:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
9000c4fc:	69fb      	ldr	r3, [r7, #28]
9000c4fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
9000c500:	2b00      	cmp	r3, #0
9000c502:	d017      	beq.n	9000c534 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
9000c504:	69f8      	ldr	r0, [r7, #28]
9000c506:	f7ff f83d 	bl	9000b584 <tcp_process_refused_data>
9000c50a:	4603      	mov	r3, r0
9000c50c:	f113 0f0d 	cmn.w	r3, #13
9000c510:	d007      	beq.n	9000c522 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
9000c512:	69fb      	ldr	r3, [r7, #28]
9000c514:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
9000c516:	2b00      	cmp	r3, #0
9000c518:	d00c      	beq.n	9000c534 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
9000c51a:	4b82      	ldr	r3, [pc, #520]	; (9000c724 <tcp_input+0x73c>)
9000c51c:	881b      	ldrh	r3, [r3, #0]
9000c51e:	2b00      	cmp	r3, #0
9000c520:	d008      	beq.n	9000c534 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
9000c522:	69fb      	ldr	r3, [r7, #28]
9000c524:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
9000c526:	2b00      	cmp	r3, #0
9000c528:	f040 80e3 	bne.w	9000c6f2 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
9000c52c:	69f8      	ldr	r0, [r7, #28]
9000c52e:	f003 fe05 	bl	9001013c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
9000c532:	e0de      	b.n	9000c6f2 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
9000c534:	4a7c      	ldr	r2, [pc, #496]	; (9000c728 <tcp_input+0x740>)
9000c536:	69fb      	ldr	r3, [r7, #28]
9000c538:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
9000c53a:	69f8      	ldr	r0, [r7, #28]
9000c53c:	f000 fb18 	bl	9000cb70 <tcp_process>
9000c540:	4603      	mov	r3, r0
9000c542:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
9000c544:	f997 3013 	ldrsb.w	r3, [r7, #19]
9000c548:	f113 0f0d 	cmn.w	r3, #13
9000c54c:	f000 80d3 	beq.w	9000c6f6 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
9000c550:	4b71      	ldr	r3, [pc, #452]	; (9000c718 <tcp_input+0x730>)
9000c552:	781b      	ldrb	r3, [r3, #0]
9000c554:	f003 0308 	and.w	r3, r3, #8
9000c558:	2b00      	cmp	r3, #0
9000c55a:	d015      	beq.n	9000c588 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
9000c55c:	69fb      	ldr	r3, [r7, #28]
9000c55e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
9000c562:	2b00      	cmp	r3, #0
9000c564:	d008      	beq.n	9000c578 <tcp_input+0x590>
9000c566:	69fb      	ldr	r3, [r7, #28]
9000c568:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
9000c56c:	69fa      	ldr	r2, [r7, #28]
9000c56e:	6912      	ldr	r2, [r2, #16]
9000c570:	f06f 010d 	mvn.w	r1, #13
9000c574:	4610      	mov	r0, r2
9000c576:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
9000c578:	69f9      	ldr	r1, [r7, #28]
9000c57a:	486c      	ldr	r0, [pc, #432]	; (9000c72c <tcp_input+0x744>)
9000c57c:	f7ff fbbc 	bl	9000bcf8 <tcp_pcb_remove>
        tcp_free(pcb);
9000c580:	69f8      	ldr	r0, [r7, #28]
9000c582:	f7fd ff03 	bl	9000a38c <tcp_free>
9000c586:	e0da      	b.n	9000c73e <tcp_input+0x756>
      } else {
        err = ERR_OK;
9000c588:	2300      	movs	r3, #0
9000c58a:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
9000c58c:	4b63      	ldr	r3, [pc, #396]	; (9000c71c <tcp_input+0x734>)
9000c58e:	881b      	ldrh	r3, [r3, #0]
9000c590:	2b00      	cmp	r3, #0
9000c592:	d01d      	beq.n	9000c5d0 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
9000c594:	4b61      	ldr	r3, [pc, #388]	; (9000c71c <tcp_input+0x734>)
9000c596:	881b      	ldrh	r3, [r3, #0]
9000c598:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
9000c59a:	69fb      	ldr	r3, [r7, #28]
9000c59c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
9000c5a0:	2b00      	cmp	r3, #0
9000c5a2:	d00a      	beq.n	9000c5ba <tcp_input+0x5d2>
9000c5a4:	69fb      	ldr	r3, [r7, #28]
9000c5a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
9000c5aa:	69fa      	ldr	r2, [r7, #28]
9000c5ac:	6910      	ldr	r0, [r2, #16]
9000c5ae:	89fa      	ldrh	r2, [r7, #14]
9000c5b0:	69f9      	ldr	r1, [r7, #28]
9000c5b2:	4798      	blx	r3
9000c5b4:	4603      	mov	r3, r0
9000c5b6:	74fb      	strb	r3, [r7, #19]
9000c5b8:	e001      	b.n	9000c5be <tcp_input+0x5d6>
9000c5ba:	2300      	movs	r3, #0
9000c5bc:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
9000c5be:	f997 3013 	ldrsb.w	r3, [r7, #19]
9000c5c2:	f113 0f0d 	cmn.w	r3, #13
9000c5c6:	f000 8098 	beq.w	9000c6fa <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
9000c5ca:	4b54      	ldr	r3, [pc, #336]	; (9000c71c <tcp_input+0x734>)
9000c5cc:	2200      	movs	r2, #0
9000c5ce:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
9000c5d0:	69f8      	ldr	r0, [r7, #28]
9000c5d2:	f000 f915 	bl	9000c800 <tcp_input_delayed_close>
9000c5d6:	4603      	mov	r3, r0
9000c5d8:	2b00      	cmp	r3, #0
9000c5da:	f040 8090 	bne.w	9000c6fe <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
9000c5de:	4b4d      	ldr	r3, [pc, #308]	; (9000c714 <tcp_input+0x72c>)
9000c5e0:	681b      	ldr	r3, [r3, #0]
9000c5e2:	2b00      	cmp	r3, #0
9000c5e4:	d041      	beq.n	9000c66a <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
9000c5e6:	69fb      	ldr	r3, [r7, #28]
9000c5e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
9000c5ea:	2b00      	cmp	r3, #0
9000c5ec:	d006      	beq.n	9000c5fc <tcp_input+0x614>
9000c5ee:	4b50      	ldr	r3, [pc, #320]	; (9000c730 <tcp_input+0x748>)
9000c5f0:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
9000c5f4:	494f      	ldr	r1, [pc, #316]	; (9000c734 <tcp_input+0x74c>)
9000c5f6:	4850      	ldr	r0, [pc, #320]	; (9000c738 <tcp_input+0x750>)
9000c5f8:	f007 f81e 	bl	90013638 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
9000c5fc:	69fb      	ldr	r3, [r7, #28]
9000c5fe:	8b5b      	ldrh	r3, [r3, #26]
9000c600:	f003 0310 	and.w	r3, r3, #16
9000c604:	2b00      	cmp	r3, #0
9000c606:	d008      	beq.n	9000c61a <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
9000c608:	4b42      	ldr	r3, [pc, #264]	; (9000c714 <tcp_input+0x72c>)
9000c60a:	681b      	ldr	r3, [r3, #0]
9000c60c:	4618      	mov	r0, r3
9000c60e:	f7fd fc11 	bl	90009e34 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
9000c612:	69f8      	ldr	r0, [r7, #28]
9000c614:	f7fe f9a2 	bl	9000a95c <tcp_abort>
            goto aborted;
9000c618:	e091      	b.n	9000c73e <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
9000c61a:	69fb      	ldr	r3, [r7, #28]
9000c61c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
9000c620:	2b00      	cmp	r3, #0
9000c622:	d00c      	beq.n	9000c63e <tcp_input+0x656>
9000c624:	69fb      	ldr	r3, [r7, #28]
9000c626:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
9000c62a:	69fb      	ldr	r3, [r7, #28]
9000c62c:	6918      	ldr	r0, [r3, #16]
9000c62e:	4b39      	ldr	r3, [pc, #228]	; (9000c714 <tcp_input+0x72c>)
9000c630:	681a      	ldr	r2, [r3, #0]
9000c632:	2300      	movs	r3, #0
9000c634:	69f9      	ldr	r1, [r7, #28]
9000c636:	47a0      	blx	r4
9000c638:	4603      	mov	r3, r0
9000c63a:	74fb      	strb	r3, [r7, #19]
9000c63c:	e008      	b.n	9000c650 <tcp_input+0x668>
9000c63e:	4b35      	ldr	r3, [pc, #212]	; (9000c714 <tcp_input+0x72c>)
9000c640:	681a      	ldr	r2, [r3, #0]
9000c642:	2300      	movs	r3, #0
9000c644:	69f9      	ldr	r1, [r7, #28]
9000c646:	2000      	movs	r0, #0
9000c648:	f7ff f890 	bl	9000b76c <tcp_recv_null>
9000c64c:	4603      	mov	r3, r0
9000c64e:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
9000c650:	f997 3013 	ldrsb.w	r3, [r7, #19]
9000c654:	f113 0f0d 	cmn.w	r3, #13
9000c658:	d053      	beq.n	9000c702 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
9000c65a:	f997 3013 	ldrsb.w	r3, [r7, #19]
9000c65e:	2b00      	cmp	r3, #0
9000c660:	d003      	beq.n	9000c66a <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
9000c662:	4b2c      	ldr	r3, [pc, #176]	; (9000c714 <tcp_input+0x72c>)
9000c664:	681a      	ldr	r2, [r3, #0]
9000c666:	69fb      	ldr	r3, [r7, #28]
9000c668:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
9000c66a:	4b2b      	ldr	r3, [pc, #172]	; (9000c718 <tcp_input+0x730>)
9000c66c:	781b      	ldrb	r3, [r3, #0]
9000c66e:	f003 0320 	and.w	r3, r3, #32
9000c672:	2b00      	cmp	r3, #0
9000c674:	d030      	beq.n	9000c6d8 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
9000c676:	69fb      	ldr	r3, [r7, #28]
9000c678:	6f9b      	ldr	r3, [r3, #120]	; 0x78
9000c67a:	2b00      	cmp	r3, #0
9000c67c:	d009      	beq.n	9000c692 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
9000c67e:	69fb      	ldr	r3, [r7, #28]
9000c680:	6f9b      	ldr	r3, [r3, #120]	; 0x78
9000c682:	7b5a      	ldrb	r2, [r3, #13]
9000c684:	69fb      	ldr	r3, [r7, #28]
9000c686:	6f9b      	ldr	r3, [r3, #120]	; 0x78
9000c688:	f042 0220 	orr.w	r2, r2, #32
9000c68c:	b2d2      	uxtb	r2, r2
9000c68e:	735a      	strb	r2, [r3, #13]
9000c690:	e022      	b.n	9000c6d8 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
9000c692:	69fb      	ldr	r3, [r7, #28]
9000c694:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
9000c696:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
9000c69a:	d005      	beq.n	9000c6a8 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
9000c69c:	69fb      	ldr	r3, [r7, #28]
9000c69e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
9000c6a0:	3301      	adds	r3, #1
9000c6a2:	b29a      	uxth	r2, r3
9000c6a4:	69fb      	ldr	r3, [r7, #28]
9000c6a6:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
9000c6a8:	69fb      	ldr	r3, [r7, #28]
9000c6aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
9000c6ae:	2b00      	cmp	r3, #0
9000c6b0:	d00b      	beq.n	9000c6ca <tcp_input+0x6e2>
9000c6b2:	69fb      	ldr	r3, [r7, #28]
9000c6b4:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
9000c6b8:	69fb      	ldr	r3, [r7, #28]
9000c6ba:	6918      	ldr	r0, [r3, #16]
9000c6bc:	2300      	movs	r3, #0
9000c6be:	2200      	movs	r2, #0
9000c6c0:	69f9      	ldr	r1, [r7, #28]
9000c6c2:	47a0      	blx	r4
9000c6c4:	4603      	mov	r3, r0
9000c6c6:	74fb      	strb	r3, [r7, #19]
9000c6c8:	e001      	b.n	9000c6ce <tcp_input+0x6e6>
9000c6ca:	2300      	movs	r3, #0
9000c6cc:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
9000c6ce:	f997 3013 	ldrsb.w	r3, [r7, #19]
9000c6d2:	f113 0f0d 	cmn.w	r3, #13
9000c6d6:	d016      	beq.n	9000c706 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
9000c6d8:	4b13      	ldr	r3, [pc, #76]	; (9000c728 <tcp_input+0x740>)
9000c6da:	2200      	movs	r2, #0
9000c6dc:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
9000c6de:	69f8      	ldr	r0, [r7, #28]
9000c6e0:	f000 f88e 	bl	9000c800 <tcp_input_delayed_close>
9000c6e4:	4603      	mov	r3, r0
9000c6e6:	2b00      	cmp	r3, #0
9000c6e8:	d128      	bne.n	9000c73c <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
9000c6ea:	69f8      	ldr	r0, [r7, #28]
9000c6ec:	f002 ff20 	bl	9000f530 <tcp_output>
9000c6f0:	e025      	b.n	9000c73e <tcp_input+0x756>
        goto aborted;
9000c6f2:	bf00      	nop
9000c6f4:	e023      	b.n	9000c73e <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
9000c6f6:	bf00      	nop
9000c6f8:	e021      	b.n	9000c73e <tcp_input+0x756>
              goto aborted;
9000c6fa:	bf00      	nop
9000c6fc:	e01f      	b.n	9000c73e <tcp_input+0x756>
          goto aborted;
9000c6fe:	bf00      	nop
9000c700:	e01d      	b.n	9000c73e <tcp_input+0x756>
            goto aborted;
9000c702:	bf00      	nop
9000c704:	e01b      	b.n	9000c73e <tcp_input+0x756>
              goto aborted;
9000c706:	bf00      	nop
9000c708:	e019      	b.n	9000c73e <tcp_input+0x756>
9000c70a:	bf00      	nop
9000c70c:	24011038 	.word	0x24011038
9000c710:	24011048 	.word	0x24011048
9000c714:	24011068 	.word	0x24011068
9000c718:	24011065 	.word	0x24011065
9000c71c:	24011060 	.word	0x24011060
9000c720:	24011064 	.word	0x24011064
9000c724:	24011062 	.word	0x24011062
9000c728:	2401106c 	.word	0x2401106c
9000c72c:	2401102c 	.word	0x2401102c
9000c730:	90015ab0 	.word	0x90015ab0
9000c734:	90015c64 	.word	0x90015c64
9000c738:	90015afc 	.word	0x90015afc
          goto aborted;
9000c73c:	bf00      	nop
    tcp_input_pcb = NULL;
9000c73e:	4b27      	ldr	r3, [pc, #156]	; (9000c7dc <tcp_input+0x7f4>)
9000c740:	2200      	movs	r2, #0
9000c742:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
9000c744:	4b26      	ldr	r3, [pc, #152]	; (9000c7e0 <tcp_input+0x7f8>)
9000c746:	2200      	movs	r2, #0
9000c748:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
9000c74a:	4b26      	ldr	r3, [pc, #152]	; (9000c7e4 <tcp_input+0x7fc>)
9000c74c:	685b      	ldr	r3, [r3, #4]
9000c74e:	2b00      	cmp	r3, #0
9000c750:	d03f      	beq.n	9000c7d2 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
9000c752:	4b24      	ldr	r3, [pc, #144]	; (9000c7e4 <tcp_input+0x7fc>)
9000c754:	685b      	ldr	r3, [r3, #4]
9000c756:	4618      	mov	r0, r3
9000c758:	f7fd fb6c 	bl	90009e34 <pbuf_free>
      inseg.p = NULL;
9000c75c:	4b21      	ldr	r3, [pc, #132]	; (9000c7e4 <tcp_input+0x7fc>)
9000c75e:	2200      	movs	r2, #0
9000c760:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
9000c762:	e036      	b.n	9000c7d2 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
9000c764:	4b20      	ldr	r3, [pc, #128]	; (9000c7e8 <tcp_input+0x800>)
9000c766:	681b      	ldr	r3, [r3, #0]
9000c768:	899b      	ldrh	r3, [r3, #12]
9000c76a:	b29b      	uxth	r3, r3
9000c76c:	4618      	mov	r0, r3
9000c76e:	f7fb fe71 	bl	90008454 <lwip_htons>
9000c772:	4603      	mov	r3, r0
9000c774:	b2db      	uxtb	r3, r3
9000c776:	f003 0304 	and.w	r3, r3, #4
9000c77a:	2b00      	cmp	r3, #0
9000c77c:	d118      	bne.n	9000c7b0 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
9000c77e:	4b1b      	ldr	r3, [pc, #108]	; (9000c7ec <tcp_input+0x804>)
9000c780:	6819      	ldr	r1, [r3, #0]
9000c782:	4b1b      	ldr	r3, [pc, #108]	; (9000c7f0 <tcp_input+0x808>)
9000c784:	881b      	ldrh	r3, [r3, #0]
9000c786:	461a      	mov	r2, r3
9000c788:	4b1a      	ldr	r3, [pc, #104]	; (9000c7f4 <tcp_input+0x80c>)
9000c78a:	681b      	ldr	r3, [r3, #0]
9000c78c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
9000c78e:	4b16      	ldr	r3, [pc, #88]	; (9000c7e8 <tcp_input+0x800>)
9000c790:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
9000c792:	885b      	ldrh	r3, [r3, #2]
9000c794:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
9000c796:	4a14      	ldr	r2, [pc, #80]	; (9000c7e8 <tcp_input+0x800>)
9000c798:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
9000c79a:	8812      	ldrh	r2, [r2, #0]
9000c79c:	b292      	uxth	r2, r2
9000c79e:	9202      	str	r2, [sp, #8]
9000c7a0:	9301      	str	r3, [sp, #4]
9000c7a2:	4b15      	ldr	r3, [pc, #84]	; (9000c7f8 <tcp_input+0x810>)
9000c7a4:	9300      	str	r3, [sp, #0]
9000c7a6:	4b15      	ldr	r3, [pc, #84]	; (9000c7fc <tcp_input+0x814>)
9000c7a8:	4602      	mov	r2, r0
9000c7aa:	2000      	movs	r0, #0
9000c7ac:	f003 fc74 	bl	90010098 <tcp_rst>
    pbuf_free(p);
9000c7b0:	6878      	ldr	r0, [r7, #4]
9000c7b2:	f7fd fb3f 	bl	90009e34 <pbuf_free>
  return;
9000c7b6:	e00c      	b.n	9000c7d2 <tcp_input+0x7ea>
    goto dropped;
9000c7b8:	bf00      	nop
9000c7ba:	e006      	b.n	9000c7ca <tcp_input+0x7e2>
    goto dropped;
9000c7bc:	bf00      	nop
9000c7be:	e004      	b.n	9000c7ca <tcp_input+0x7e2>
    goto dropped;
9000c7c0:	bf00      	nop
9000c7c2:	e002      	b.n	9000c7ca <tcp_input+0x7e2>
      goto dropped;
9000c7c4:	bf00      	nop
9000c7c6:	e000      	b.n	9000c7ca <tcp_input+0x7e2>
      goto dropped;
9000c7c8:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
9000c7ca:	6878      	ldr	r0, [r7, #4]
9000c7cc:	f7fd fb32 	bl	90009e34 <pbuf_free>
9000c7d0:	e000      	b.n	9000c7d4 <tcp_input+0x7ec>
  return;
9000c7d2:	bf00      	nop
}
9000c7d4:	3724      	adds	r7, #36	; 0x24
9000c7d6:	46bd      	mov	sp, r7
9000c7d8:	bd90      	pop	{r4, r7, pc}
9000c7da:	bf00      	nop
9000c7dc:	2401106c 	.word	0x2401106c
9000c7e0:	24011068 	.word	0x24011068
9000c7e4:	24011038 	.word	0x24011038
9000c7e8:	24011048 	.word	0x24011048
9000c7ec:	2401105c 	.word	0x2401105c
9000c7f0:	24011062 	.word	0x24011062
9000c7f4:	24011058 	.word	0x24011058
9000c7f8:	2400df30 	.word	0x2400df30
9000c7fc:	2400df34 	.word	0x2400df34

9000c800 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
9000c800:	b580      	push	{r7, lr}
9000c802:	b082      	sub	sp, #8
9000c804:	af00      	add	r7, sp, #0
9000c806:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
9000c808:	687b      	ldr	r3, [r7, #4]
9000c80a:	2b00      	cmp	r3, #0
9000c80c:	d106      	bne.n	9000c81c <tcp_input_delayed_close+0x1c>
9000c80e:	4b17      	ldr	r3, [pc, #92]	; (9000c86c <tcp_input_delayed_close+0x6c>)
9000c810:	f240 225a 	movw	r2, #602	; 0x25a
9000c814:	4916      	ldr	r1, [pc, #88]	; (9000c870 <tcp_input_delayed_close+0x70>)
9000c816:	4817      	ldr	r0, [pc, #92]	; (9000c874 <tcp_input_delayed_close+0x74>)
9000c818:	f006 ff0e 	bl	90013638 <iprintf>

  if (recv_flags & TF_CLOSED) {
9000c81c:	4b16      	ldr	r3, [pc, #88]	; (9000c878 <tcp_input_delayed_close+0x78>)
9000c81e:	781b      	ldrb	r3, [r3, #0]
9000c820:	f003 0310 	and.w	r3, r3, #16
9000c824:	2b00      	cmp	r3, #0
9000c826:	d01c      	beq.n	9000c862 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
9000c828:	687b      	ldr	r3, [r7, #4]
9000c82a:	8b5b      	ldrh	r3, [r3, #26]
9000c82c:	f003 0310 	and.w	r3, r3, #16
9000c830:	2b00      	cmp	r3, #0
9000c832:	d10d      	bne.n	9000c850 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
9000c834:	687b      	ldr	r3, [r7, #4]
9000c836:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
9000c83a:	2b00      	cmp	r3, #0
9000c83c:	d008      	beq.n	9000c850 <tcp_input_delayed_close+0x50>
9000c83e:	687b      	ldr	r3, [r7, #4]
9000c840:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
9000c844:	687a      	ldr	r2, [r7, #4]
9000c846:	6912      	ldr	r2, [r2, #16]
9000c848:	f06f 010e 	mvn.w	r1, #14
9000c84c:	4610      	mov	r0, r2
9000c84e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
9000c850:	6879      	ldr	r1, [r7, #4]
9000c852:	480a      	ldr	r0, [pc, #40]	; (9000c87c <tcp_input_delayed_close+0x7c>)
9000c854:	f7ff fa50 	bl	9000bcf8 <tcp_pcb_remove>
    tcp_free(pcb);
9000c858:	6878      	ldr	r0, [r7, #4]
9000c85a:	f7fd fd97 	bl	9000a38c <tcp_free>
    return 1;
9000c85e:	2301      	movs	r3, #1
9000c860:	e000      	b.n	9000c864 <tcp_input_delayed_close+0x64>
  }
  return 0;
9000c862:	2300      	movs	r3, #0
}
9000c864:	4618      	mov	r0, r3
9000c866:	3708      	adds	r7, #8
9000c868:	46bd      	mov	sp, r7
9000c86a:	bd80      	pop	{r7, pc}
9000c86c:	90015ab0 	.word	0x90015ab0
9000c870:	90015c80 	.word	0x90015c80
9000c874:	90015afc 	.word	0x90015afc
9000c878:	24011065 	.word	0x24011065
9000c87c:	2401102c 	.word	0x2401102c

9000c880 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
9000c880:	b590      	push	{r4, r7, lr}
9000c882:	b08b      	sub	sp, #44	; 0x2c
9000c884:	af04      	add	r7, sp, #16
9000c886:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
9000c888:	4b6f      	ldr	r3, [pc, #444]	; (9000ca48 <tcp_listen_input+0x1c8>)
9000c88a:	781b      	ldrb	r3, [r3, #0]
9000c88c:	f003 0304 	and.w	r3, r3, #4
9000c890:	2b00      	cmp	r3, #0
9000c892:	f040 80d2 	bne.w	9000ca3a <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
9000c896:	687b      	ldr	r3, [r7, #4]
9000c898:	2b00      	cmp	r3, #0
9000c89a:	d106      	bne.n	9000c8aa <tcp_listen_input+0x2a>
9000c89c:	4b6b      	ldr	r3, [pc, #428]	; (9000ca4c <tcp_listen_input+0x1cc>)
9000c89e:	f240 2281 	movw	r2, #641	; 0x281
9000c8a2:	496b      	ldr	r1, [pc, #428]	; (9000ca50 <tcp_listen_input+0x1d0>)
9000c8a4:	486b      	ldr	r0, [pc, #428]	; (9000ca54 <tcp_listen_input+0x1d4>)
9000c8a6:	f006 fec7 	bl	90013638 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
9000c8aa:	4b67      	ldr	r3, [pc, #412]	; (9000ca48 <tcp_listen_input+0x1c8>)
9000c8ac:	781b      	ldrb	r3, [r3, #0]
9000c8ae:	f003 0310 	and.w	r3, r3, #16
9000c8b2:	2b00      	cmp	r3, #0
9000c8b4:	d019      	beq.n	9000c8ea <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
9000c8b6:	4b68      	ldr	r3, [pc, #416]	; (9000ca58 <tcp_listen_input+0x1d8>)
9000c8b8:	6819      	ldr	r1, [r3, #0]
9000c8ba:	4b68      	ldr	r3, [pc, #416]	; (9000ca5c <tcp_listen_input+0x1dc>)
9000c8bc:	881b      	ldrh	r3, [r3, #0]
9000c8be:	461a      	mov	r2, r3
9000c8c0:	4b67      	ldr	r3, [pc, #412]	; (9000ca60 <tcp_listen_input+0x1e0>)
9000c8c2:	681b      	ldr	r3, [r3, #0]
9000c8c4:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
9000c8c6:	4b67      	ldr	r3, [pc, #412]	; (9000ca64 <tcp_listen_input+0x1e4>)
9000c8c8:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
9000c8ca:	885b      	ldrh	r3, [r3, #2]
9000c8cc:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
9000c8ce:	4a65      	ldr	r2, [pc, #404]	; (9000ca64 <tcp_listen_input+0x1e4>)
9000c8d0:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
9000c8d2:	8812      	ldrh	r2, [r2, #0]
9000c8d4:	b292      	uxth	r2, r2
9000c8d6:	9202      	str	r2, [sp, #8]
9000c8d8:	9301      	str	r3, [sp, #4]
9000c8da:	4b63      	ldr	r3, [pc, #396]	; (9000ca68 <tcp_listen_input+0x1e8>)
9000c8dc:	9300      	str	r3, [sp, #0]
9000c8de:	4b63      	ldr	r3, [pc, #396]	; (9000ca6c <tcp_listen_input+0x1ec>)
9000c8e0:	4602      	mov	r2, r0
9000c8e2:	6878      	ldr	r0, [r7, #4]
9000c8e4:	f003 fbd8 	bl	90010098 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
9000c8e8:	e0a9      	b.n	9000ca3e <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
9000c8ea:	4b57      	ldr	r3, [pc, #348]	; (9000ca48 <tcp_listen_input+0x1c8>)
9000c8ec:	781b      	ldrb	r3, [r3, #0]
9000c8ee:	f003 0302 	and.w	r3, r3, #2
9000c8f2:	2b00      	cmp	r3, #0
9000c8f4:	f000 80a3 	beq.w	9000ca3e <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
9000c8f8:	687b      	ldr	r3, [r7, #4]
9000c8fa:	7d5b      	ldrb	r3, [r3, #21]
9000c8fc:	4618      	mov	r0, r3
9000c8fe:	f7ff f859 	bl	9000b9b4 <tcp_alloc>
9000c902:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
9000c904:	697b      	ldr	r3, [r7, #20]
9000c906:	2b00      	cmp	r3, #0
9000c908:	d111      	bne.n	9000c92e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
9000c90a:	687b      	ldr	r3, [r7, #4]
9000c90c:	699b      	ldr	r3, [r3, #24]
9000c90e:	2b00      	cmp	r3, #0
9000c910:	d00a      	beq.n	9000c928 <tcp_listen_input+0xa8>
9000c912:	687b      	ldr	r3, [r7, #4]
9000c914:	699b      	ldr	r3, [r3, #24]
9000c916:	687a      	ldr	r2, [r7, #4]
9000c918:	6910      	ldr	r0, [r2, #16]
9000c91a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
9000c91e:	2100      	movs	r1, #0
9000c920:	4798      	blx	r3
9000c922:	4603      	mov	r3, r0
9000c924:	73bb      	strb	r3, [r7, #14]
      return;
9000c926:	e08b      	b.n	9000ca40 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
9000c928:	23f0      	movs	r3, #240	; 0xf0
9000c92a:	73bb      	strb	r3, [r7, #14]
      return;
9000c92c:	e088      	b.n	9000ca40 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
9000c92e:	4b50      	ldr	r3, [pc, #320]	; (9000ca70 <tcp_listen_input+0x1f0>)
9000c930:	695a      	ldr	r2, [r3, #20]
9000c932:	697b      	ldr	r3, [r7, #20]
9000c934:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
9000c936:	4b4e      	ldr	r3, [pc, #312]	; (9000ca70 <tcp_listen_input+0x1f0>)
9000c938:	691a      	ldr	r2, [r3, #16]
9000c93a:	697b      	ldr	r3, [r7, #20]
9000c93c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
9000c93e:	687b      	ldr	r3, [r7, #4]
9000c940:	8ada      	ldrh	r2, [r3, #22]
9000c942:	697b      	ldr	r3, [r7, #20]
9000c944:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
9000c946:	4b47      	ldr	r3, [pc, #284]	; (9000ca64 <tcp_listen_input+0x1e4>)
9000c948:	681b      	ldr	r3, [r3, #0]
9000c94a:	881b      	ldrh	r3, [r3, #0]
9000c94c:	b29a      	uxth	r2, r3
9000c94e:	697b      	ldr	r3, [r7, #20]
9000c950:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
9000c952:	697b      	ldr	r3, [r7, #20]
9000c954:	2203      	movs	r2, #3
9000c956:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
9000c958:	4b41      	ldr	r3, [pc, #260]	; (9000ca60 <tcp_listen_input+0x1e0>)
9000c95a:	681b      	ldr	r3, [r3, #0]
9000c95c:	1c5a      	adds	r2, r3, #1
9000c95e:	697b      	ldr	r3, [r7, #20]
9000c960:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
9000c962:	697b      	ldr	r3, [r7, #20]
9000c964:	6a5a      	ldr	r2, [r3, #36]	; 0x24
9000c966:	697b      	ldr	r3, [r7, #20]
9000c968:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
9000c96a:	6978      	ldr	r0, [r7, #20]
9000c96c:	f7ff fa58 	bl	9000be20 <tcp_next_iss>
9000c970:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
9000c972:	697b      	ldr	r3, [r7, #20]
9000c974:	693a      	ldr	r2, [r7, #16]
9000c976:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
9000c978:	697b      	ldr	r3, [r7, #20]
9000c97a:	693a      	ldr	r2, [r7, #16]
9000c97c:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
9000c97e:	697b      	ldr	r3, [r7, #20]
9000c980:	693a      	ldr	r2, [r7, #16]
9000c982:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
9000c984:	697b      	ldr	r3, [r7, #20]
9000c986:	693a      	ldr	r2, [r7, #16]
9000c988:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
9000c98a:	4b35      	ldr	r3, [pc, #212]	; (9000ca60 <tcp_listen_input+0x1e0>)
9000c98c:	681b      	ldr	r3, [r3, #0]
9000c98e:	1e5a      	subs	r2, r3, #1
9000c990:	697b      	ldr	r3, [r7, #20]
9000c992:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
9000c994:	687b      	ldr	r3, [r7, #4]
9000c996:	691a      	ldr	r2, [r3, #16]
9000c998:	697b      	ldr	r3, [r7, #20]
9000c99a:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
9000c99c:	697b      	ldr	r3, [r7, #20]
9000c99e:	687a      	ldr	r2, [r7, #4]
9000c9a0:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
9000c9a2:	687b      	ldr	r3, [r7, #4]
9000c9a4:	7a5b      	ldrb	r3, [r3, #9]
9000c9a6:	f003 030c 	and.w	r3, r3, #12
9000c9aa:	b2da      	uxtb	r2, r3
9000c9ac:	697b      	ldr	r3, [r7, #20]
9000c9ae:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
9000c9b0:	687b      	ldr	r3, [r7, #4]
9000c9b2:	7a1a      	ldrb	r2, [r3, #8]
9000c9b4:	697b      	ldr	r3, [r7, #20]
9000c9b6:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
9000c9b8:	4b2e      	ldr	r3, [pc, #184]	; (9000ca74 <tcp_listen_input+0x1f4>)
9000c9ba:	681a      	ldr	r2, [r3, #0]
9000c9bc:	697b      	ldr	r3, [r7, #20]
9000c9be:	60da      	str	r2, [r3, #12]
9000c9c0:	4a2c      	ldr	r2, [pc, #176]	; (9000ca74 <tcp_listen_input+0x1f4>)
9000c9c2:	697b      	ldr	r3, [r7, #20]
9000c9c4:	6013      	str	r3, [r2, #0]
9000c9c6:	f003 fd29 	bl	9001041c <tcp_timer_needed>
9000c9ca:	4b2b      	ldr	r3, [pc, #172]	; (9000ca78 <tcp_listen_input+0x1f8>)
9000c9cc:	2201      	movs	r2, #1
9000c9ce:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
9000c9d0:	6978      	ldr	r0, [r7, #20]
9000c9d2:	f001 fd8f 	bl	9000e4f4 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
9000c9d6:	4b23      	ldr	r3, [pc, #140]	; (9000ca64 <tcp_listen_input+0x1e4>)
9000c9d8:	681b      	ldr	r3, [r3, #0]
9000c9da:	89db      	ldrh	r3, [r3, #14]
9000c9dc:	b29a      	uxth	r2, r3
9000c9de:	697b      	ldr	r3, [r7, #20]
9000c9e0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
9000c9e4:	697b      	ldr	r3, [r7, #20]
9000c9e6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
9000c9ea:	697b      	ldr	r3, [r7, #20]
9000c9ec:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
9000c9f0:	697b      	ldr	r3, [r7, #20]
9000c9f2:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
9000c9f4:	697b      	ldr	r3, [r7, #20]
9000c9f6:	3304      	adds	r3, #4
9000c9f8:	4618      	mov	r0, r3
9000c9fa:	f005 f943 	bl	90011c84 <ip4_route>
9000c9fe:	4601      	mov	r1, r0
9000ca00:	697b      	ldr	r3, [r7, #20]
9000ca02:	3304      	adds	r3, #4
9000ca04:	461a      	mov	r2, r3
9000ca06:	4620      	mov	r0, r4
9000ca08:	f7ff fa30 	bl	9000be6c <tcp_eff_send_mss_netif>
9000ca0c:	4603      	mov	r3, r0
9000ca0e:	461a      	mov	r2, r3
9000ca10:	697b      	ldr	r3, [r7, #20]
9000ca12:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
9000ca14:	2112      	movs	r1, #18
9000ca16:	6978      	ldr	r0, [r7, #20]
9000ca18:	f002 fc9c 	bl	9000f354 <tcp_enqueue_flags>
9000ca1c:	4603      	mov	r3, r0
9000ca1e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
9000ca20:	f997 300f 	ldrsb.w	r3, [r7, #15]
9000ca24:	2b00      	cmp	r3, #0
9000ca26:	d004      	beq.n	9000ca32 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
9000ca28:	2100      	movs	r1, #0
9000ca2a:	6978      	ldr	r0, [r7, #20]
9000ca2c:	f7fd fed8 	bl	9000a7e0 <tcp_abandon>
      return;
9000ca30:	e006      	b.n	9000ca40 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
9000ca32:	6978      	ldr	r0, [r7, #20]
9000ca34:	f002 fd7c 	bl	9000f530 <tcp_output>
  return;
9000ca38:	e001      	b.n	9000ca3e <tcp_listen_input+0x1be>
    return;
9000ca3a:	bf00      	nop
9000ca3c:	e000      	b.n	9000ca40 <tcp_listen_input+0x1c0>
  return;
9000ca3e:	bf00      	nop
}
9000ca40:	371c      	adds	r7, #28
9000ca42:	46bd      	mov	sp, r7
9000ca44:	bd90      	pop	{r4, r7, pc}
9000ca46:	bf00      	nop
9000ca48:	24011064 	.word	0x24011064
9000ca4c:	90015ab0 	.word	0x90015ab0
9000ca50:	90015ca8 	.word	0x90015ca8
9000ca54:	90015afc 	.word	0x90015afc
9000ca58:	2401105c 	.word	0x2401105c
9000ca5c:	24011062 	.word	0x24011062
9000ca60:	24011058 	.word	0x24011058
9000ca64:	24011048 	.word	0x24011048
9000ca68:	2400df30 	.word	0x2400df30
9000ca6c:	2400df34 	.word	0x2400df34
9000ca70:	2400df20 	.word	0x2400df20
9000ca74:	2401102c 	.word	0x2401102c
9000ca78:	24011034 	.word	0x24011034

9000ca7c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
9000ca7c:	b580      	push	{r7, lr}
9000ca7e:	b086      	sub	sp, #24
9000ca80:	af04      	add	r7, sp, #16
9000ca82:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
9000ca84:	4b2f      	ldr	r3, [pc, #188]	; (9000cb44 <tcp_timewait_input+0xc8>)
9000ca86:	781b      	ldrb	r3, [r3, #0]
9000ca88:	f003 0304 	and.w	r3, r3, #4
9000ca8c:	2b00      	cmp	r3, #0
9000ca8e:	d153      	bne.n	9000cb38 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
9000ca90:	687b      	ldr	r3, [r7, #4]
9000ca92:	2b00      	cmp	r3, #0
9000ca94:	d106      	bne.n	9000caa4 <tcp_timewait_input+0x28>
9000ca96:	4b2c      	ldr	r3, [pc, #176]	; (9000cb48 <tcp_timewait_input+0xcc>)
9000ca98:	f240 22ee 	movw	r2, #750	; 0x2ee
9000ca9c:	492b      	ldr	r1, [pc, #172]	; (9000cb4c <tcp_timewait_input+0xd0>)
9000ca9e:	482c      	ldr	r0, [pc, #176]	; (9000cb50 <tcp_timewait_input+0xd4>)
9000caa0:	f006 fdca 	bl	90013638 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
9000caa4:	4b27      	ldr	r3, [pc, #156]	; (9000cb44 <tcp_timewait_input+0xc8>)
9000caa6:	781b      	ldrb	r3, [r3, #0]
9000caa8:	f003 0302 	and.w	r3, r3, #2
9000caac:	2b00      	cmp	r3, #0
9000caae:	d02a      	beq.n	9000cb06 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
9000cab0:	4b28      	ldr	r3, [pc, #160]	; (9000cb54 <tcp_timewait_input+0xd8>)
9000cab2:	681a      	ldr	r2, [r3, #0]
9000cab4:	687b      	ldr	r3, [r7, #4]
9000cab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000cab8:	1ad3      	subs	r3, r2, r3
9000caba:	2b00      	cmp	r3, #0
9000cabc:	db2d      	blt.n	9000cb1a <tcp_timewait_input+0x9e>
9000cabe:	4b25      	ldr	r3, [pc, #148]	; (9000cb54 <tcp_timewait_input+0xd8>)
9000cac0:	681a      	ldr	r2, [r3, #0]
9000cac2:	687b      	ldr	r3, [r7, #4]
9000cac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000cac6:	6879      	ldr	r1, [r7, #4]
9000cac8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
9000caca:	440b      	add	r3, r1
9000cacc:	1ad3      	subs	r3, r2, r3
9000cace:	2b00      	cmp	r3, #0
9000cad0:	dc23      	bgt.n	9000cb1a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
9000cad2:	4b21      	ldr	r3, [pc, #132]	; (9000cb58 <tcp_timewait_input+0xdc>)
9000cad4:	6819      	ldr	r1, [r3, #0]
9000cad6:	4b21      	ldr	r3, [pc, #132]	; (9000cb5c <tcp_timewait_input+0xe0>)
9000cad8:	881b      	ldrh	r3, [r3, #0]
9000cada:	461a      	mov	r2, r3
9000cadc:	4b1d      	ldr	r3, [pc, #116]	; (9000cb54 <tcp_timewait_input+0xd8>)
9000cade:	681b      	ldr	r3, [r3, #0]
9000cae0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
9000cae2:	4b1f      	ldr	r3, [pc, #124]	; (9000cb60 <tcp_timewait_input+0xe4>)
9000cae4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
9000cae6:	885b      	ldrh	r3, [r3, #2]
9000cae8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
9000caea:	4a1d      	ldr	r2, [pc, #116]	; (9000cb60 <tcp_timewait_input+0xe4>)
9000caec:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
9000caee:	8812      	ldrh	r2, [r2, #0]
9000caf0:	b292      	uxth	r2, r2
9000caf2:	9202      	str	r2, [sp, #8]
9000caf4:	9301      	str	r3, [sp, #4]
9000caf6:	4b1b      	ldr	r3, [pc, #108]	; (9000cb64 <tcp_timewait_input+0xe8>)
9000caf8:	9300      	str	r3, [sp, #0]
9000cafa:	4b1b      	ldr	r3, [pc, #108]	; (9000cb68 <tcp_timewait_input+0xec>)
9000cafc:	4602      	mov	r2, r0
9000cafe:	6878      	ldr	r0, [r7, #4]
9000cb00:	f003 faca 	bl	90010098 <tcp_rst>
      return;
9000cb04:	e01b      	b.n	9000cb3e <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
9000cb06:	4b0f      	ldr	r3, [pc, #60]	; (9000cb44 <tcp_timewait_input+0xc8>)
9000cb08:	781b      	ldrb	r3, [r3, #0]
9000cb0a:	f003 0301 	and.w	r3, r3, #1
9000cb0e:	2b00      	cmp	r3, #0
9000cb10:	d003      	beq.n	9000cb1a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
9000cb12:	4b16      	ldr	r3, [pc, #88]	; (9000cb6c <tcp_timewait_input+0xf0>)
9000cb14:	681a      	ldr	r2, [r3, #0]
9000cb16:	687b      	ldr	r3, [r7, #4]
9000cb18:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
9000cb1a:	4b10      	ldr	r3, [pc, #64]	; (9000cb5c <tcp_timewait_input+0xe0>)
9000cb1c:	881b      	ldrh	r3, [r3, #0]
9000cb1e:	2b00      	cmp	r3, #0
9000cb20:	d00c      	beq.n	9000cb3c <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
9000cb22:	687b      	ldr	r3, [r7, #4]
9000cb24:	8b5b      	ldrh	r3, [r3, #26]
9000cb26:	f043 0302 	orr.w	r3, r3, #2
9000cb2a:	b29a      	uxth	r2, r3
9000cb2c:	687b      	ldr	r3, [r7, #4]
9000cb2e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
9000cb30:	6878      	ldr	r0, [r7, #4]
9000cb32:	f002 fcfd 	bl	9000f530 <tcp_output>
  }
  return;
9000cb36:	e001      	b.n	9000cb3c <tcp_timewait_input+0xc0>
    return;
9000cb38:	bf00      	nop
9000cb3a:	e000      	b.n	9000cb3e <tcp_timewait_input+0xc2>
  return;
9000cb3c:	bf00      	nop
}
9000cb3e:	3708      	adds	r7, #8
9000cb40:	46bd      	mov	sp, r7
9000cb42:	bd80      	pop	{r7, pc}
9000cb44:	24011064 	.word	0x24011064
9000cb48:	90015ab0 	.word	0x90015ab0
9000cb4c:	90015cc8 	.word	0x90015cc8
9000cb50:	90015afc 	.word	0x90015afc
9000cb54:	24011058 	.word	0x24011058
9000cb58:	2401105c 	.word	0x2401105c
9000cb5c:	24011062 	.word	0x24011062
9000cb60:	24011048 	.word	0x24011048
9000cb64:	2400df30 	.word	0x2400df30
9000cb68:	2400df34 	.word	0x2400df34
9000cb6c:	24011020 	.word	0x24011020

9000cb70 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
9000cb70:	b590      	push	{r4, r7, lr}
9000cb72:	b08d      	sub	sp, #52	; 0x34
9000cb74:	af04      	add	r7, sp, #16
9000cb76:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
9000cb78:	2300      	movs	r3, #0
9000cb7a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
9000cb7c:	2300      	movs	r3, #0
9000cb7e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
9000cb80:	687b      	ldr	r3, [r7, #4]
9000cb82:	2b00      	cmp	r3, #0
9000cb84:	d106      	bne.n	9000cb94 <tcp_process+0x24>
9000cb86:	4b9d      	ldr	r3, [pc, #628]	; (9000cdfc <tcp_process+0x28c>)
9000cb88:	f44f 7247 	mov.w	r2, #796	; 0x31c
9000cb8c:	499c      	ldr	r1, [pc, #624]	; (9000ce00 <tcp_process+0x290>)
9000cb8e:	489d      	ldr	r0, [pc, #628]	; (9000ce04 <tcp_process+0x294>)
9000cb90:	f006 fd52 	bl	90013638 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
9000cb94:	4b9c      	ldr	r3, [pc, #624]	; (9000ce08 <tcp_process+0x298>)
9000cb96:	781b      	ldrb	r3, [r3, #0]
9000cb98:	f003 0304 	and.w	r3, r3, #4
9000cb9c:	2b00      	cmp	r3, #0
9000cb9e:	d04e      	beq.n	9000cc3e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
9000cba0:	687b      	ldr	r3, [r7, #4]
9000cba2:	7d1b      	ldrb	r3, [r3, #20]
9000cba4:	2b02      	cmp	r3, #2
9000cba6:	d108      	bne.n	9000cbba <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
9000cba8:	687b      	ldr	r3, [r7, #4]
9000cbaa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
9000cbac:	4b97      	ldr	r3, [pc, #604]	; (9000ce0c <tcp_process+0x29c>)
9000cbae:	681b      	ldr	r3, [r3, #0]
9000cbb0:	429a      	cmp	r2, r3
9000cbb2:	d123      	bne.n	9000cbfc <tcp_process+0x8c>
        acceptable = 1;
9000cbb4:	2301      	movs	r3, #1
9000cbb6:	76fb      	strb	r3, [r7, #27]
9000cbb8:	e020      	b.n	9000cbfc <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
9000cbba:	687b      	ldr	r3, [r7, #4]
9000cbbc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
9000cbbe:	4b94      	ldr	r3, [pc, #592]	; (9000ce10 <tcp_process+0x2a0>)
9000cbc0:	681b      	ldr	r3, [r3, #0]
9000cbc2:	429a      	cmp	r2, r3
9000cbc4:	d102      	bne.n	9000cbcc <tcp_process+0x5c>
        acceptable = 1;
9000cbc6:	2301      	movs	r3, #1
9000cbc8:	76fb      	strb	r3, [r7, #27]
9000cbca:	e017      	b.n	9000cbfc <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
9000cbcc:	4b90      	ldr	r3, [pc, #576]	; (9000ce10 <tcp_process+0x2a0>)
9000cbce:	681a      	ldr	r2, [r3, #0]
9000cbd0:	687b      	ldr	r3, [r7, #4]
9000cbd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000cbd4:	1ad3      	subs	r3, r2, r3
9000cbd6:	2b00      	cmp	r3, #0
9000cbd8:	db10      	blt.n	9000cbfc <tcp_process+0x8c>
9000cbda:	4b8d      	ldr	r3, [pc, #564]	; (9000ce10 <tcp_process+0x2a0>)
9000cbdc:	681a      	ldr	r2, [r3, #0]
9000cbde:	687b      	ldr	r3, [r7, #4]
9000cbe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000cbe2:	6879      	ldr	r1, [r7, #4]
9000cbe4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
9000cbe6:	440b      	add	r3, r1
9000cbe8:	1ad3      	subs	r3, r2, r3
9000cbea:	2b00      	cmp	r3, #0
9000cbec:	dc06      	bgt.n	9000cbfc <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
9000cbee:	687b      	ldr	r3, [r7, #4]
9000cbf0:	8b5b      	ldrh	r3, [r3, #26]
9000cbf2:	f043 0302 	orr.w	r3, r3, #2
9000cbf6:	b29a      	uxth	r2, r3
9000cbf8:	687b      	ldr	r3, [r7, #4]
9000cbfa:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
9000cbfc:	7efb      	ldrb	r3, [r7, #27]
9000cbfe:	2b00      	cmp	r3, #0
9000cc00:	d01b      	beq.n	9000cc3a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
9000cc02:	687b      	ldr	r3, [r7, #4]
9000cc04:	7d1b      	ldrb	r3, [r3, #20]
9000cc06:	2b00      	cmp	r3, #0
9000cc08:	d106      	bne.n	9000cc18 <tcp_process+0xa8>
9000cc0a:	4b7c      	ldr	r3, [pc, #496]	; (9000cdfc <tcp_process+0x28c>)
9000cc0c:	f44f 724e 	mov.w	r2, #824	; 0x338
9000cc10:	4980      	ldr	r1, [pc, #512]	; (9000ce14 <tcp_process+0x2a4>)
9000cc12:	487c      	ldr	r0, [pc, #496]	; (9000ce04 <tcp_process+0x294>)
9000cc14:	f006 fd10 	bl	90013638 <iprintf>
      recv_flags |= TF_RESET;
9000cc18:	4b7f      	ldr	r3, [pc, #508]	; (9000ce18 <tcp_process+0x2a8>)
9000cc1a:	781b      	ldrb	r3, [r3, #0]
9000cc1c:	f043 0308 	orr.w	r3, r3, #8
9000cc20:	b2da      	uxtb	r2, r3
9000cc22:	4b7d      	ldr	r3, [pc, #500]	; (9000ce18 <tcp_process+0x2a8>)
9000cc24:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
9000cc26:	687b      	ldr	r3, [r7, #4]
9000cc28:	8b5b      	ldrh	r3, [r3, #26]
9000cc2a:	f023 0301 	bic.w	r3, r3, #1
9000cc2e:	b29a      	uxth	r2, r3
9000cc30:	687b      	ldr	r3, [r7, #4]
9000cc32:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
9000cc34:	f06f 030d 	mvn.w	r3, #13
9000cc38:	e37a      	b.n	9000d330 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
9000cc3a:	2300      	movs	r3, #0
9000cc3c:	e378      	b.n	9000d330 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
9000cc3e:	4b72      	ldr	r3, [pc, #456]	; (9000ce08 <tcp_process+0x298>)
9000cc40:	781b      	ldrb	r3, [r3, #0]
9000cc42:	f003 0302 	and.w	r3, r3, #2
9000cc46:	2b00      	cmp	r3, #0
9000cc48:	d010      	beq.n	9000cc6c <tcp_process+0xfc>
9000cc4a:	687b      	ldr	r3, [r7, #4]
9000cc4c:	7d1b      	ldrb	r3, [r3, #20]
9000cc4e:	2b02      	cmp	r3, #2
9000cc50:	d00c      	beq.n	9000cc6c <tcp_process+0xfc>
9000cc52:	687b      	ldr	r3, [r7, #4]
9000cc54:	7d1b      	ldrb	r3, [r3, #20]
9000cc56:	2b03      	cmp	r3, #3
9000cc58:	d008      	beq.n	9000cc6c <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
9000cc5a:	687b      	ldr	r3, [r7, #4]
9000cc5c:	8b5b      	ldrh	r3, [r3, #26]
9000cc5e:	f043 0302 	orr.w	r3, r3, #2
9000cc62:	b29a      	uxth	r2, r3
9000cc64:	687b      	ldr	r3, [r7, #4]
9000cc66:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
9000cc68:	2300      	movs	r3, #0
9000cc6a:	e361      	b.n	9000d330 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
9000cc6c:	687b      	ldr	r3, [r7, #4]
9000cc6e:	8b5b      	ldrh	r3, [r3, #26]
9000cc70:	f003 0310 	and.w	r3, r3, #16
9000cc74:	2b00      	cmp	r3, #0
9000cc76:	d103      	bne.n	9000cc80 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
9000cc78:	4b68      	ldr	r3, [pc, #416]	; (9000ce1c <tcp_process+0x2ac>)
9000cc7a:	681a      	ldr	r2, [r3, #0]
9000cc7c:	687b      	ldr	r3, [r7, #4]
9000cc7e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
9000cc80:	687b      	ldr	r3, [r7, #4]
9000cc82:	2200      	movs	r2, #0
9000cc84:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
9000cc88:	687b      	ldr	r3, [r7, #4]
9000cc8a:	2200      	movs	r2, #0
9000cc8c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
9000cc90:	6878      	ldr	r0, [r7, #4]
9000cc92:	f001 fc2f 	bl	9000e4f4 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
9000cc96:	687b      	ldr	r3, [r7, #4]
9000cc98:	7d1b      	ldrb	r3, [r3, #20]
9000cc9a:	3b02      	subs	r3, #2
9000cc9c:	2b07      	cmp	r3, #7
9000cc9e:	f200 8337 	bhi.w	9000d310 <tcp_process+0x7a0>
9000cca2:	a201      	add	r2, pc, #4	; (adr r2, 9000cca8 <tcp_process+0x138>)
9000cca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000cca8:	9000ccc9 	.word	0x9000ccc9
9000ccac:	9000cef9 	.word	0x9000cef9
9000ccb0:	9000d071 	.word	0x9000d071
9000ccb4:	9000d09b 	.word	0x9000d09b
9000ccb8:	9000d1bf 	.word	0x9000d1bf
9000ccbc:	9000d071 	.word	0x9000d071
9000ccc0:	9000d24b 	.word	0x9000d24b
9000ccc4:	9000d2db 	.word	0x9000d2db
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
9000ccc8:	4b4f      	ldr	r3, [pc, #316]	; (9000ce08 <tcp_process+0x298>)
9000ccca:	781b      	ldrb	r3, [r3, #0]
9000cccc:	f003 0310 	and.w	r3, r3, #16
9000ccd0:	2b00      	cmp	r3, #0
9000ccd2:	f000 80e4 	beq.w	9000ce9e <tcp_process+0x32e>
9000ccd6:	4b4c      	ldr	r3, [pc, #304]	; (9000ce08 <tcp_process+0x298>)
9000ccd8:	781b      	ldrb	r3, [r3, #0]
9000ccda:	f003 0302 	and.w	r3, r3, #2
9000ccde:	2b00      	cmp	r3, #0
9000cce0:	f000 80dd 	beq.w	9000ce9e <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
9000cce4:	687b      	ldr	r3, [r7, #4]
9000cce6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
9000cce8:	1c5a      	adds	r2, r3, #1
9000ccea:	4b48      	ldr	r3, [pc, #288]	; (9000ce0c <tcp_process+0x29c>)
9000ccec:	681b      	ldr	r3, [r3, #0]
9000ccee:	429a      	cmp	r2, r3
9000ccf0:	f040 80d5 	bne.w	9000ce9e <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
9000ccf4:	4b46      	ldr	r3, [pc, #280]	; (9000ce10 <tcp_process+0x2a0>)
9000ccf6:	681b      	ldr	r3, [r3, #0]
9000ccf8:	1c5a      	adds	r2, r3, #1
9000ccfa:	687b      	ldr	r3, [r7, #4]
9000ccfc:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
9000ccfe:	687b      	ldr	r3, [r7, #4]
9000cd00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
9000cd02:	687b      	ldr	r3, [r7, #4]
9000cd04:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
9000cd06:	4b41      	ldr	r3, [pc, #260]	; (9000ce0c <tcp_process+0x29c>)
9000cd08:	681a      	ldr	r2, [r3, #0]
9000cd0a:	687b      	ldr	r3, [r7, #4]
9000cd0c:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
9000cd0e:	4b44      	ldr	r3, [pc, #272]	; (9000ce20 <tcp_process+0x2b0>)
9000cd10:	681b      	ldr	r3, [r3, #0]
9000cd12:	89db      	ldrh	r3, [r3, #14]
9000cd14:	b29a      	uxth	r2, r3
9000cd16:	687b      	ldr	r3, [r7, #4]
9000cd18:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
9000cd1c:	687b      	ldr	r3, [r7, #4]
9000cd1e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
9000cd22:	687b      	ldr	r3, [r7, #4]
9000cd24:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
9000cd28:	4b39      	ldr	r3, [pc, #228]	; (9000ce10 <tcp_process+0x2a0>)
9000cd2a:	681b      	ldr	r3, [r3, #0]
9000cd2c:	1e5a      	subs	r2, r3, #1
9000cd2e:	687b      	ldr	r3, [r7, #4]
9000cd30:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
9000cd32:	687b      	ldr	r3, [r7, #4]
9000cd34:	2204      	movs	r2, #4
9000cd36:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
9000cd38:	687b      	ldr	r3, [r7, #4]
9000cd3a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
9000cd3c:	687b      	ldr	r3, [r7, #4]
9000cd3e:	3304      	adds	r3, #4
9000cd40:	4618      	mov	r0, r3
9000cd42:	f004 ff9f 	bl	90011c84 <ip4_route>
9000cd46:	4601      	mov	r1, r0
9000cd48:	687b      	ldr	r3, [r7, #4]
9000cd4a:	3304      	adds	r3, #4
9000cd4c:	461a      	mov	r2, r3
9000cd4e:	4620      	mov	r0, r4
9000cd50:	f7ff f88c 	bl	9000be6c <tcp_eff_send_mss_netif>
9000cd54:	4603      	mov	r3, r0
9000cd56:	461a      	mov	r2, r3
9000cd58:	687b      	ldr	r3, [r7, #4]
9000cd5a:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
9000cd5c:	687b      	ldr	r3, [r7, #4]
9000cd5e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
9000cd60:	009a      	lsls	r2, r3, #2
9000cd62:	687b      	ldr	r3, [r7, #4]
9000cd64:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
9000cd66:	005b      	lsls	r3, r3, #1
9000cd68:	f241 111c 	movw	r1, #4380	; 0x111c
9000cd6c:	428b      	cmp	r3, r1
9000cd6e:	bf38      	it	cc
9000cd70:	460b      	movcc	r3, r1
9000cd72:	429a      	cmp	r2, r3
9000cd74:	d204      	bcs.n	9000cd80 <tcp_process+0x210>
9000cd76:	687b      	ldr	r3, [r7, #4]
9000cd78:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
9000cd7a:	009b      	lsls	r3, r3, #2
9000cd7c:	b29b      	uxth	r3, r3
9000cd7e:	e00d      	b.n	9000cd9c <tcp_process+0x22c>
9000cd80:	687b      	ldr	r3, [r7, #4]
9000cd82:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
9000cd84:	005b      	lsls	r3, r3, #1
9000cd86:	f241 121c 	movw	r2, #4380	; 0x111c
9000cd8a:	4293      	cmp	r3, r2
9000cd8c:	d904      	bls.n	9000cd98 <tcp_process+0x228>
9000cd8e:	687b      	ldr	r3, [r7, #4]
9000cd90:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
9000cd92:	005b      	lsls	r3, r3, #1
9000cd94:	b29b      	uxth	r3, r3
9000cd96:	e001      	b.n	9000cd9c <tcp_process+0x22c>
9000cd98:	f241 131c 	movw	r3, #4380	; 0x111c
9000cd9c:	687a      	ldr	r2, [r7, #4]
9000cd9e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
9000cda2:	687b      	ldr	r3, [r7, #4]
9000cda4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
9000cda8:	2b00      	cmp	r3, #0
9000cdaa:	d106      	bne.n	9000cdba <tcp_process+0x24a>
9000cdac:	4b13      	ldr	r3, [pc, #76]	; (9000cdfc <tcp_process+0x28c>)
9000cdae:	f44f 725b 	mov.w	r2, #876	; 0x36c
9000cdb2:	491c      	ldr	r1, [pc, #112]	; (9000ce24 <tcp_process+0x2b4>)
9000cdb4:	4813      	ldr	r0, [pc, #76]	; (9000ce04 <tcp_process+0x294>)
9000cdb6:	f006 fc3f 	bl	90013638 <iprintf>
        --pcb->snd_queuelen;
9000cdba:	687b      	ldr	r3, [r7, #4]
9000cdbc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
9000cdc0:	3b01      	subs	r3, #1
9000cdc2:	b29a      	uxth	r2, r3
9000cdc4:	687b      	ldr	r3, [r7, #4]
9000cdc6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
9000cdca:	687b      	ldr	r3, [r7, #4]
9000cdcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
9000cdce:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
9000cdd0:	69fb      	ldr	r3, [r7, #28]
9000cdd2:	2b00      	cmp	r3, #0
9000cdd4:	d12a      	bne.n	9000ce2c <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
9000cdd6:	687b      	ldr	r3, [r7, #4]
9000cdd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
9000cdda:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
9000cddc:	69fb      	ldr	r3, [r7, #28]
9000cdde:	2b00      	cmp	r3, #0
9000cde0:	d106      	bne.n	9000cdf0 <tcp_process+0x280>
9000cde2:	4b06      	ldr	r3, [pc, #24]	; (9000cdfc <tcp_process+0x28c>)
9000cde4:	f44f 725d 	mov.w	r2, #884	; 0x374
9000cde8:	490f      	ldr	r1, [pc, #60]	; (9000ce28 <tcp_process+0x2b8>)
9000cdea:	4806      	ldr	r0, [pc, #24]	; (9000ce04 <tcp_process+0x294>)
9000cdec:	f006 fc24 	bl	90013638 <iprintf>
          pcb->unsent = rseg->next;
9000cdf0:	69fb      	ldr	r3, [r7, #28]
9000cdf2:	681a      	ldr	r2, [r3, #0]
9000cdf4:	687b      	ldr	r3, [r7, #4]
9000cdf6:	66da      	str	r2, [r3, #108]	; 0x6c
9000cdf8:	e01c      	b.n	9000ce34 <tcp_process+0x2c4>
9000cdfa:	bf00      	nop
9000cdfc:	90015ab0 	.word	0x90015ab0
9000ce00:	90015ce8 	.word	0x90015ce8
9000ce04:	90015afc 	.word	0x90015afc
9000ce08:	24011064 	.word	0x24011064
9000ce0c:	2401105c 	.word	0x2401105c
9000ce10:	24011058 	.word	0x24011058
9000ce14:	90015d04 	.word	0x90015d04
9000ce18:	24011065 	.word	0x24011065
9000ce1c:	24011020 	.word	0x24011020
9000ce20:	24011048 	.word	0x24011048
9000ce24:	90015d24 	.word	0x90015d24
9000ce28:	90015d3c 	.word	0x90015d3c
        } else {
          pcb->unacked = rseg->next;
9000ce2c:	69fb      	ldr	r3, [r7, #28]
9000ce2e:	681a      	ldr	r2, [r3, #0]
9000ce30:	687b      	ldr	r3, [r7, #4]
9000ce32:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
9000ce34:	69f8      	ldr	r0, [r7, #28]
9000ce36:	f7fe fc36 	bl	9000b6a6 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
9000ce3a:	687b      	ldr	r3, [r7, #4]
9000ce3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
9000ce3e:	2b00      	cmp	r3, #0
9000ce40:	d104      	bne.n	9000ce4c <tcp_process+0x2dc>
          pcb->rtime = -1;
9000ce42:	687b      	ldr	r3, [r7, #4]
9000ce44:	f64f 72ff 	movw	r2, #65535	; 0xffff
9000ce48:	861a      	strh	r2, [r3, #48]	; 0x30
9000ce4a:	e006      	b.n	9000ce5a <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
9000ce4c:	687b      	ldr	r3, [r7, #4]
9000ce4e:	2200      	movs	r2, #0
9000ce50:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
9000ce52:	687b      	ldr	r3, [r7, #4]
9000ce54:	2200      	movs	r2, #0
9000ce56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
9000ce5a:	687b      	ldr	r3, [r7, #4]
9000ce5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
9000ce60:	2b00      	cmp	r3, #0
9000ce62:	d00a      	beq.n	9000ce7a <tcp_process+0x30a>
9000ce64:	687b      	ldr	r3, [r7, #4]
9000ce66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
9000ce6a:	687a      	ldr	r2, [r7, #4]
9000ce6c:	6910      	ldr	r0, [r2, #16]
9000ce6e:	2200      	movs	r2, #0
9000ce70:	6879      	ldr	r1, [r7, #4]
9000ce72:	4798      	blx	r3
9000ce74:	4603      	mov	r3, r0
9000ce76:	76bb      	strb	r3, [r7, #26]
9000ce78:	e001      	b.n	9000ce7e <tcp_process+0x30e>
9000ce7a:	2300      	movs	r3, #0
9000ce7c:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
9000ce7e:	f997 301a 	ldrsb.w	r3, [r7, #26]
9000ce82:	f113 0f0d 	cmn.w	r3, #13
9000ce86:	d102      	bne.n	9000ce8e <tcp_process+0x31e>
          return ERR_ABRT;
9000ce88:	f06f 030c 	mvn.w	r3, #12
9000ce8c:	e250      	b.n	9000d330 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
9000ce8e:	687b      	ldr	r3, [r7, #4]
9000ce90:	8b5b      	ldrh	r3, [r3, #26]
9000ce92:	f043 0302 	orr.w	r3, r3, #2
9000ce96:	b29a      	uxth	r2, r3
9000ce98:	687b      	ldr	r3, [r7, #4]
9000ce9a:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
9000ce9c:	e23a      	b.n	9000d314 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
9000ce9e:	4b98      	ldr	r3, [pc, #608]	; (9000d100 <tcp_process+0x590>)
9000cea0:	781b      	ldrb	r3, [r3, #0]
9000cea2:	f003 0310 	and.w	r3, r3, #16
9000cea6:	2b00      	cmp	r3, #0
9000cea8:	f000 8234 	beq.w	9000d314 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
9000ceac:	4b95      	ldr	r3, [pc, #596]	; (9000d104 <tcp_process+0x594>)
9000ceae:	6819      	ldr	r1, [r3, #0]
9000ceb0:	4b95      	ldr	r3, [pc, #596]	; (9000d108 <tcp_process+0x598>)
9000ceb2:	881b      	ldrh	r3, [r3, #0]
9000ceb4:	461a      	mov	r2, r3
9000ceb6:	4b95      	ldr	r3, [pc, #596]	; (9000d10c <tcp_process+0x59c>)
9000ceb8:	681b      	ldr	r3, [r3, #0]
9000ceba:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
9000cebc:	4b94      	ldr	r3, [pc, #592]	; (9000d110 <tcp_process+0x5a0>)
9000cebe:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
9000cec0:	885b      	ldrh	r3, [r3, #2]
9000cec2:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
9000cec4:	4a92      	ldr	r2, [pc, #584]	; (9000d110 <tcp_process+0x5a0>)
9000cec6:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
9000cec8:	8812      	ldrh	r2, [r2, #0]
9000ceca:	b292      	uxth	r2, r2
9000cecc:	9202      	str	r2, [sp, #8]
9000cece:	9301      	str	r3, [sp, #4]
9000ced0:	4b90      	ldr	r3, [pc, #576]	; (9000d114 <tcp_process+0x5a4>)
9000ced2:	9300      	str	r3, [sp, #0]
9000ced4:	4b90      	ldr	r3, [pc, #576]	; (9000d118 <tcp_process+0x5a8>)
9000ced6:	4602      	mov	r2, r0
9000ced8:	6878      	ldr	r0, [r7, #4]
9000ceda:	f003 f8dd 	bl	90010098 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
9000cede:	687b      	ldr	r3, [r7, #4]
9000cee0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
9000cee4:	2b05      	cmp	r3, #5
9000cee6:	f200 8215 	bhi.w	9000d314 <tcp_process+0x7a4>
          pcb->rtime = 0;
9000ceea:	687b      	ldr	r3, [r7, #4]
9000ceec:	2200      	movs	r2, #0
9000ceee:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
9000cef0:	6878      	ldr	r0, [r7, #4]
9000cef2:	f002 fea7 	bl	9000fc44 <tcp_rexmit_rto>
      break;
9000cef6:	e20d      	b.n	9000d314 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
9000cef8:	4b81      	ldr	r3, [pc, #516]	; (9000d100 <tcp_process+0x590>)
9000cefa:	781b      	ldrb	r3, [r3, #0]
9000cefc:	f003 0310 	and.w	r3, r3, #16
9000cf00:	2b00      	cmp	r3, #0
9000cf02:	f000 80a1 	beq.w	9000d048 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
9000cf06:	4b7f      	ldr	r3, [pc, #508]	; (9000d104 <tcp_process+0x594>)
9000cf08:	681a      	ldr	r2, [r3, #0]
9000cf0a:	687b      	ldr	r3, [r7, #4]
9000cf0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
9000cf0e:	1ad3      	subs	r3, r2, r3
9000cf10:	3b01      	subs	r3, #1
9000cf12:	2b00      	cmp	r3, #0
9000cf14:	db7e      	blt.n	9000d014 <tcp_process+0x4a4>
9000cf16:	4b7b      	ldr	r3, [pc, #492]	; (9000d104 <tcp_process+0x594>)
9000cf18:	681a      	ldr	r2, [r3, #0]
9000cf1a:	687b      	ldr	r3, [r7, #4]
9000cf1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
9000cf1e:	1ad3      	subs	r3, r2, r3
9000cf20:	2b00      	cmp	r3, #0
9000cf22:	dc77      	bgt.n	9000d014 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
9000cf24:	687b      	ldr	r3, [r7, #4]
9000cf26:	2204      	movs	r2, #4
9000cf28:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
9000cf2a:	687b      	ldr	r3, [r7, #4]
9000cf2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
9000cf2e:	2b00      	cmp	r3, #0
9000cf30:	d102      	bne.n	9000cf38 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
9000cf32:	23fa      	movs	r3, #250	; 0xfa
9000cf34:	76bb      	strb	r3, [r7, #26]
9000cf36:	e01d      	b.n	9000cf74 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
9000cf38:	687b      	ldr	r3, [r7, #4]
9000cf3a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
9000cf3c:	699b      	ldr	r3, [r3, #24]
9000cf3e:	2b00      	cmp	r3, #0
9000cf40:	d106      	bne.n	9000cf50 <tcp_process+0x3e0>
9000cf42:	4b76      	ldr	r3, [pc, #472]	; (9000d11c <tcp_process+0x5ac>)
9000cf44:	f44f 726a 	mov.w	r2, #936	; 0x3a8
9000cf48:	4975      	ldr	r1, [pc, #468]	; (9000d120 <tcp_process+0x5b0>)
9000cf4a:	4876      	ldr	r0, [pc, #472]	; (9000d124 <tcp_process+0x5b4>)
9000cf4c:	f006 fb74 	bl	90013638 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
9000cf50:	687b      	ldr	r3, [r7, #4]
9000cf52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
9000cf54:	699b      	ldr	r3, [r3, #24]
9000cf56:	2b00      	cmp	r3, #0
9000cf58:	d00a      	beq.n	9000cf70 <tcp_process+0x400>
9000cf5a:	687b      	ldr	r3, [r7, #4]
9000cf5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
9000cf5e:	699b      	ldr	r3, [r3, #24]
9000cf60:	687a      	ldr	r2, [r7, #4]
9000cf62:	6910      	ldr	r0, [r2, #16]
9000cf64:	2200      	movs	r2, #0
9000cf66:	6879      	ldr	r1, [r7, #4]
9000cf68:	4798      	blx	r3
9000cf6a:	4603      	mov	r3, r0
9000cf6c:	76bb      	strb	r3, [r7, #26]
9000cf6e:	e001      	b.n	9000cf74 <tcp_process+0x404>
9000cf70:	23f0      	movs	r3, #240	; 0xf0
9000cf72:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
9000cf74:	f997 301a 	ldrsb.w	r3, [r7, #26]
9000cf78:	2b00      	cmp	r3, #0
9000cf7a:	d00a      	beq.n	9000cf92 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
9000cf7c:	f997 301a 	ldrsb.w	r3, [r7, #26]
9000cf80:	f113 0f0d 	cmn.w	r3, #13
9000cf84:	d002      	beq.n	9000cf8c <tcp_process+0x41c>
              tcp_abort(pcb);
9000cf86:	6878      	ldr	r0, [r7, #4]
9000cf88:	f7fd fce8 	bl	9000a95c <tcp_abort>
            }
            return ERR_ABRT;
9000cf8c:	f06f 030c 	mvn.w	r3, #12
9000cf90:	e1ce      	b.n	9000d330 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
9000cf92:	6878      	ldr	r0, [r7, #4]
9000cf94:	f000 fae0 	bl	9000d558 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
9000cf98:	4b63      	ldr	r3, [pc, #396]	; (9000d128 <tcp_process+0x5b8>)
9000cf9a:	881b      	ldrh	r3, [r3, #0]
9000cf9c:	2b00      	cmp	r3, #0
9000cf9e:	d005      	beq.n	9000cfac <tcp_process+0x43c>
            recv_acked--;
9000cfa0:	4b61      	ldr	r3, [pc, #388]	; (9000d128 <tcp_process+0x5b8>)
9000cfa2:	881b      	ldrh	r3, [r3, #0]
9000cfa4:	3b01      	subs	r3, #1
9000cfa6:	b29a      	uxth	r2, r3
9000cfa8:	4b5f      	ldr	r3, [pc, #380]	; (9000d128 <tcp_process+0x5b8>)
9000cfaa:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
9000cfac:	687b      	ldr	r3, [r7, #4]
9000cfae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
9000cfb0:	009a      	lsls	r2, r3, #2
9000cfb2:	687b      	ldr	r3, [r7, #4]
9000cfb4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
9000cfb6:	005b      	lsls	r3, r3, #1
9000cfb8:	f241 111c 	movw	r1, #4380	; 0x111c
9000cfbc:	428b      	cmp	r3, r1
9000cfbe:	bf38      	it	cc
9000cfc0:	460b      	movcc	r3, r1
9000cfc2:	429a      	cmp	r2, r3
9000cfc4:	d204      	bcs.n	9000cfd0 <tcp_process+0x460>
9000cfc6:	687b      	ldr	r3, [r7, #4]
9000cfc8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
9000cfca:	009b      	lsls	r3, r3, #2
9000cfcc:	b29b      	uxth	r3, r3
9000cfce:	e00d      	b.n	9000cfec <tcp_process+0x47c>
9000cfd0:	687b      	ldr	r3, [r7, #4]
9000cfd2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
9000cfd4:	005b      	lsls	r3, r3, #1
9000cfd6:	f241 121c 	movw	r2, #4380	; 0x111c
9000cfda:	4293      	cmp	r3, r2
9000cfdc:	d904      	bls.n	9000cfe8 <tcp_process+0x478>
9000cfde:	687b      	ldr	r3, [r7, #4]
9000cfe0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
9000cfe2:	005b      	lsls	r3, r3, #1
9000cfe4:	b29b      	uxth	r3, r3
9000cfe6:	e001      	b.n	9000cfec <tcp_process+0x47c>
9000cfe8:	f241 131c 	movw	r3, #4380	; 0x111c
9000cfec:	687a      	ldr	r2, [r7, #4]
9000cfee:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
9000cff2:	4b4e      	ldr	r3, [pc, #312]	; (9000d12c <tcp_process+0x5bc>)
9000cff4:	781b      	ldrb	r3, [r3, #0]
9000cff6:	f003 0320 	and.w	r3, r3, #32
9000cffa:	2b00      	cmp	r3, #0
9000cffc:	d037      	beq.n	9000d06e <tcp_process+0x4fe>
            tcp_ack_now(pcb);
9000cffe:	687b      	ldr	r3, [r7, #4]
9000d000:	8b5b      	ldrh	r3, [r3, #26]
9000d002:	f043 0302 	orr.w	r3, r3, #2
9000d006:	b29a      	uxth	r2, r3
9000d008:	687b      	ldr	r3, [r7, #4]
9000d00a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
9000d00c:	687b      	ldr	r3, [r7, #4]
9000d00e:	2207      	movs	r2, #7
9000d010:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
9000d012:	e02c      	b.n	9000d06e <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
9000d014:	4b3b      	ldr	r3, [pc, #236]	; (9000d104 <tcp_process+0x594>)
9000d016:	6819      	ldr	r1, [r3, #0]
9000d018:	4b3b      	ldr	r3, [pc, #236]	; (9000d108 <tcp_process+0x598>)
9000d01a:	881b      	ldrh	r3, [r3, #0]
9000d01c:	461a      	mov	r2, r3
9000d01e:	4b3b      	ldr	r3, [pc, #236]	; (9000d10c <tcp_process+0x59c>)
9000d020:	681b      	ldr	r3, [r3, #0]
9000d022:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
9000d024:	4b3a      	ldr	r3, [pc, #232]	; (9000d110 <tcp_process+0x5a0>)
9000d026:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
9000d028:	885b      	ldrh	r3, [r3, #2]
9000d02a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
9000d02c:	4a38      	ldr	r2, [pc, #224]	; (9000d110 <tcp_process+0x5a0>)
9000d02e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
9000d030:	8812      	ldrh	r2, [r2, #0]
9000d032:	b292      	uxth	r2, r2
9000d034:	9202      	str	r2, [sp, #8]
9000d036:	9301      	str	r3, [sp, #4]
9000d038:	4b36      	ldr	r3, [pc, #216]	; (9000d114 <tcp_process+0x5a4>)
9000d03a:	9300      	str	r3, [sp, #0]
9000d03c:	4b36      	ldr	r3, [pc, #216]	; (9000d118 <tcp_process+0x5a8>)
9000d03e:	4602      	mov	r2, r0
9000d040:	6878      	ldr	r0, [r7, #4]
9000d042:	f003 f829 	bl	90010098 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
9000d046:	e167      	b.n	9000d318 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
9000d048:	4b2d      	ldr	r3, [pc, #180]	; (9000d100 <tcp_process+0x590>)
9000d04a:	781b      	ldrb	r3, [r3, #0]
9000d04c:	f003 0302 	and.w	r3, r3, #2
9000d050:	2b00      	cmp	r3, #0
9000d052:	f000 8161 	beq.w	9000d318 <tcp_process+0x7a8>
9000d056:	687b      	ldr	r3, [r7, #4]
9000d058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000d05a:	1e5a      	subs	r2, r3, #1
9000d05c:	4b2b      	ldr	r3, [pc, #172]	; (9000d10c <tcp_process+0x59c>)
9000d05e:	681b      	ldr	r3, [r3, #0]
9000d060:	429a      	cmp	r2, r3
9000d062:	f040 8159 	bne.w	9000d318 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
9000d066:	6878      	ldr	r0, [r7, #4]
9000d068:	f002 fe0e 	bl	9000fc88 <tcp_rexmit>
      break;
9000d06c:	e154      	b.n	9000d318 <tcp_process+0x7a8>
9000d06e:	e153      	b.n	9000d318 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
9000d070:	6878      	ldr	r0, [r7, #4]
9000d072:	f000 fa71 	bl	9000d558 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
9000d076:	4b2d      	ldr	r3, [pc, #180]	; (9000d12c <tcp_process+0x5bc>)
9000d078:	781b      	ldrb	r3, [r3, #0]
9000d07a:	f003 0320 	and.w	r3, r3, #32
9000d07e:	2b00      	cmp	r3, #0
9000d080:	f000 814c 	beq.w	9000d31c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
9000d084:	687b      	ldr	r3, [r7, #4]
9000d086:	8b5b      	ldrh	r3, [r3, #26]
9000d088:	f043 0302 	orr.w	r3, r3, #2
9000d08c:	b29a      	uxth	r2, r3
9000d08e:	687b      	ldr	r3, [r7, #4]
9000d090:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
9000d092:	687b      	ldr	r3, [r7, #4]
9000d094:	2207      	movs	r2, #7
9000d096:	751a      	strb	r2, [r3, #20]
      }
      break;
9000d098:	e140      	b.n	9000d31c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
9000d09a:	6878      	ldr	r0, [r7, #4]
9000d09c:	f000 fa5c 	bl	9000d558 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
9000d0a0:	4b22      	ldr	r3, [pc, #136]	; (9000d12c <tcp_process+0x5bc>)
9000d0a2:	781b      	ldrb	r3, [r3, #0]
9000d0a4:	f003 0320 	and.w	r3, r3, #32
9000d0a8:	2b00      	cmp	r3, #0
9000d0aa:	d071      	beq.n	9000d190 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
9000d0ac:	4b14      	ldr	r3, [pc, #80]	; (9000d100 <tcp_process+0x590>)
9000d0ae:	781b      	ldrb	r3, [r3, #0]
9000d0b0:	f003 0310 	and.w	r3, r3, #16
9000d0b4:	2b00      	cmp	r3, #0
9000d0b6:	d060      	beq.n	9000d17a <tcp_process+0x60a>
9000d0b8:	687b      	ldr	r3, [r7, #4]
9000d0ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
9000d0bc:	4b11      	ldr	r3, [pc, #68]	; (9000d104 <tcp_process+0x594>)
9000d0be:	681b      	ldr	r3, [r3, #0]
9000d0c0:	429a      	cmp	r2, r3
9000d0c2:	d15a      	bne.n	9000d17a <tcp_process+0x60a>
            pcb->unsent == NULL) {
9000d0c4:	687b      	ldr	r3, [r7, #4]
9000d0c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
9000d0c8:	2b00      	cmp	r3, #0
9000d0ca:	d156      	bne.n	9000d17a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
9000d0cc:	687b      	ldr	r3, [r7, #4]
9000d0ce:	8b5b      	ldrh	r3, [r3, #26]
9000d0d0:	f043 0302 	orr.w	r3, r3, #2
9000d0d4:	b29a      	uxth	r2, r3
9000d0d6:	687b      	ldr	r3, [r7, #4]
9000d0d8:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
9000d0da:	6878      	ldr	r0, [r7, #4]
9000d0dc:	f7fe fdbc 	bl	9000bc58 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
9000d0e0:	4b13      	ldr	r3, [pc, #76]	; (9000d130 <tcp_process+0x5c0>)
9000d0e2:	681b      	ldr	r3, [r3, #0]
9000d0e4:	687a      	ldr	r2, [r7, #4]
9000d0e6:	429a      	cmp	r2, r3
9000d0e8:	d105      	bne.n	9000d0f6 <tcp_process+0x586>
9000d0ea:	4b11      	ldr	r3, [pc, #68]	; (9000d130 <tcp_process+0x5c0>)
9000d0ec:	681b      	ldr	r3, [r3, #0]
9000d0ee:	68db      	ldr	r3, [r3, #12]
9000d0f0:	4a0f      	ldr	r2, [pc, #60]	; (9000d130 <tcp_process+0x5c0>)
9000d0f2:	6013      	str	r3, [r2, #0]
9000d0f4:	e02e      	b.n	9000d154 <tcp_process+0x5e4>
9000d0f6:	4b0e      	ldr	r3, [pc, #56]	; (9000d130 <tcp_process+0x5c0>)
9000d0f8:	681b      	ldr	r3, [r3, #0]
9000d0fa:	617b      	str	r3, [r7, #20]
9000d0fc:	e027      	b.n	9000d14e <tcp_process+0x5de>
9000d0fe:	bf00      	nop
9000d100:	24011064 	.word	0x24011064
9000d104:	2401105c 	.word	0x2401105c
9000d108:	24011062 	.word	0x24011062
9000d10c:	24011058 	.word	0x24011058
9000d110:	24011048 	.word	0x24011048
9000d114:	2400df30 	.word	0x2400df30
9000d118:	2400df34 	.word	0x2400df34
9000d11c:	90015ab0 	.word	0x90015ab0
9000d120:	90015d50 	.word	0x90015d50
9000d124:	90015afc 	.word	0x90015afc
9000d128:	24011060 	.word	0x24011060
9000d12c:	24011065 	.word	0x24011065
9000d130:	2401102c 	.word	0x2401102c
9000d134:	697b      	ldr	r3, [r7, #20]
9000d136:	68db      	ldr	r3, [r3, #12]
9000d138:	687a      	ldr	r2, [r7, #4]
9000d13a:	429a      	cmp	r2, r3
9000d13c:	d104      	bne.n	9000d148 <tcp_process+0x5d8>
9000d13e:	687b      	ldr	r3, [r7, #4]
9000d140:	68da      	ldr	r2, [r3, #12]
9000d142:	697b      	ldr	r3, [r7, #20]
9000d144:	60da      	str	r2, [r3, #12]
9000d146:	e005      	b.n	9000d154 <tcp_process+0x5e4>
9000d148:	697b      	ldr	r3, [r7, #20]
9000d14a:	68db      	ldr	r3, [r3, #12]
9000d14c:	617b      	str	r3, [r7, #20]
9000d14e:	697b      	ldr	r3, [r7, #20]
9000d150:	2b00      	cmp	r3, #0
9000d152:	d1ef      	bne.n	9000d134 <tcp_process+0x5c4>
9000d154:	687b      	ldr	r3, [r7, #4]
9000d156:	2200      	movs	r2, #0
9000d158:	60da      	str	r2, [r3, #12]
9000d15a:	4b77      	ldr	r3, [pc, #476]	; (9000d338 <tcp_process+0x7c8>)
9000d15c:	2201      	movs	r2, #1
9000d15e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
9000d160:	687b      	ldr	r3, [r7, #4]
9000d162:	220a      	movs	r2, #10
9000d164:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
9000d166:	4b75      	ldr	r3, [pc, #468]	; (9000d33c <tcp_process+0x7cc>)
9000d168:	681a      	ldr	r2, [r3, #0]
9000d16a:	687b      	ldr	r3, [r7, #4]
9000d16c:	60da      	str	r2, [r3, #12]
9000d16e:	4a73      	ldr	r2, [pc, #460]	; (9000d33c <tcp_process+0x7cc>)
9000d170:	687b      	ldr	r3, [r7, #4]
9000d172:	6013      	str	r3, [r2, #0]
9000d174:	f003 f952 	bl	9001041c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
9000d178:	e0d2      	b.n	9000d320 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
9000d17a:	687b      	ldr	r3, [r7, #4]
9000d17c:	8b5b      	ldrh	r3, [r3, #26]
9000d17e:	f043 0302 	orr.w	r3, r3, #2
9000d182:	b29a      	uxth	r2, r3
9000d184:	687b      	ldr	r3, [r7, #4]
9000d186:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
9000d188:	687b      	ldr	r3, [r7, #4]
9000d18a:	2208      	movs	r2, #8
9000d18c:	751a      	strb	r2, [r3, #20]
      break;
9000d18e:	e0c7      	b.n	9000d320 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
9000d190:	4b6b      	ldr	r3, [pc, #428]	; (9000d340 <tcp_process+0x7d0>)
9000d192:	781b      	ldrb	r3, [r3, #0]
9000d194:	f003 0310 	and.w	r3, r3, #16
9000d198:	2b00      	cmp	r3, #0
9000d19a:	f000 80c1 	beq.w	9000d320 <tcp_process+0x7b0>
9000d19e:	687b      	ldr	r3, [r7, #4]
9000d1a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
9000d1a2:	4b68      	ldr	r3, [pc, #416]	; (9000d344 <tcp_process+0x7d4>)
9000d1a4:	681b      	ldr	r3, [r3, #0]
9000d1a6:	429a      	cmp	r2, r3
9000d1a8:	f040 80ba 	bne.w	9000d320 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
9000d1ac:	687b      	ldr	r3, [r7, #4]
9000d1ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
9000d1b0:	2b00      	cmp	r3, #0
9000d1b2:	f040 80b5 	bne.w	9000d320 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
9000d1b6:	687b      	ldr	r3, [r7, #4]
9000d1b8:	2206      	movs	r2, #6
9000d1ba:	751a      	strb	r2, [r3, #20]
      break;
9000d1bc:	e0b0      	b.n	9000d320 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
9000d1be:	6878      	ldr	r0, [r7, #4]
9000d1c0:	f000 f9ca 	bl	9000d558 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
9000d1c4:	4b60      	ldr	r3, [pc, #384]	; (9000d348 <tcp_process+0x7d8>)
9000d1c6:	781b      	ldrb	r3, [r3, #0]
9000d1c8:	f003 0320 	and.w	r3, r3, #32
9000d1cc:	2b00      	cmp	r3, #0
9000d1ce:	f000 80a9 	beq.w	9000d324 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
9000d1d2:	687b      	ldr	r3, [r7, #4]
9000d1d4:	8b5b      	ldrh	r3, [r3, #26]
9000d1d6:	f043 0302 	orr.w	r3, r3, #2
9000d1da:	b29a      	uxth	r2, r3
9000d1dc:	687b      	ldr	r3, [r7, #4]
9000d1de:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
9000d1e0:	6878      	ldr	r0, [r7, #4]
9000d1e2:	f7fe fd39 	bl	9000bc58 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
9000d1e6:	4b59      	ldr	r3, [pc, #356]	; (9000d34c <tcp_process+0x7dc>)
9000d1e8:	681b      	ldr	r3, [r3, #0]
9000d1ea:	687a      	ldr	r2, [r7, #4]
9000d1ec:	429a      	cmp	r2, r3
9000d1ee:	d105      	bne.n	9000d1fc <tcp_process+0x68c>
9000d1f0:	4b56      	ldr	r3, [pc, #344]	; (9000d34c <tcp_process+0x7dc>)
9000d1f2:	681b      	ldr	r3, [r3, #0]
9000d1f4:	68db      	ldr	r3, [r3, #12]
9000d1f6:	4a55      	ldr	r2, [pc, #340]	; (9000d34c <tcp_process+0x7dc>)
9000d1f8:	6013      	str	r3, [r2, #0]
9000d1fa:	e013      	b.n	9000d224 <tcp_process+0x6b4>
9000d1fc:	4b53      	ldr	r3, [pc, #332]	; (9000d34c <tcp_process+0x7dc>)
9000d1fe:	681b      	ldr	r3, [r3, #0]
9000d200:	613b      	str	r3, [r7, #16]
9000d202:	e00c      	b.n	9000d21e <tcp_process+0x6ae>
9000d204:	693b      	ldr	r3, [r7, #16]
9000d206:	68db      	ldr	r3, [r3, #12]
9000d208:	687a      	ldr	r2, [r7, #4]
9000d20a:	429a      	cmp	r2, r3
9000d20c:	d104      	bne.n	9000d218 <tcp_process+0x6a8>
9000d20e:	687b      	ldr	r3, [r7, #4]
9000d210:	68da      	ldr	r2, [r3, #12]
9000d212:	693b      	ldr	r3, [r7, #16]
9000d214:	60da      	str	r2, [r3, #12]
9000d216:	e005      	b.n	9000d224 <tcp_process+0x6b4>
9000d218:	693b      	ldr	r3, [r7, #16]
9000d21a:	68db      	ldr	r3, [r3, #12]
9000d21c:	613b      	str	r3, [r7, #16]
9000d21e:	693b      	ldr	r3, [r7, #16]
9000d220:	2b00      	cmp	r3, #0
9000d222:	d1ef      	bne.n	9000d204 <tcp_process+0x694>
9000d224:	687b      	ldr	r3, [r7, #4]
9000d226:	2200      	movs	r2, #0
9000d228:	60da      	str	r2, [r3, #12]
9000d22a:	4b43      	ldr	r3, [pc, #268]	; (9000d338 <tcp_process+0x7c8>)
9000d22c:	2201      	movs	r2, #1
9000d22e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
9000d230:	687b      	ldr	r3, [r7, #4]
9000d232:	220a      	movs	r2, #10
9000d234:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
9000d236:	4b41      	ldr	r3, [pc, #260]	; (9000d33c <tcp_process+0x7cc>)
9000d238:	681a      	ldr	r2, [r3, #0]
9000d23a:	687b      	ldr	r3, [r7, #4]
9000d23c:	60da      	str	r2, [r3, #12]
9000d23e:	4a3f      	ldr	r2, [pc, #252]	; (9000d33c <tcp_process+0x7cc>)
9000d240:	687b      	ldr	r3, [r7, #4]
9000d242:	6013      	str	r3, [r2, #0]
9000d244:	f003 f8ea 	bl	9001041c <tcp_timer_needed>
      }
      break;
9000d248:	e06c      	b.n	9000d324 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
9000d24a:	6878      	ldr	r0, [r7, #4]
9000d24c:	f000 f984 	bl	9000d558 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
9000d250:	4b3b      	ldr	r3, [pc, #236]	; (9000d340 <tcp_process+0x7d0>)
9000d252:	781b      	ldrb	r3, [r3, #0]
9000d254:	f003 0310 	and.w	r3, r3, #16
9000d258:	2b00      	cmp	r3, #0
9000d25a:	d065      	beq.n	9000d328 <tcp_process+0x7b8>
9000d25c:	687b      	ldr	r3, [r7, #4]
9000d25e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
9000d260:	4b38      	ldr	r3, [pc, #224]	; (9000d344 <tcp_process+0x7d4>)
9000d262:	681b      	ldr	r3, [r3, #0]
9000d264:	429a      	cmp	r2, r3
9000d266:	d15f      	bne.n	9000d328 <tcp_process+0x7b8>
9000d268:	687b      	ldr	r3, [r7, #4]
9000d26a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
9000d26c:	2b00      	cmp	r3, #0
9000d26e:	d15b      	bne.n	9000d328 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
9000d270:	6878      	ldr	r0, [r7, #4]
9000d272:	f7fe fcf1 	bl	9000bc58 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
9000d276:	4b35      	ldr	r3, [pc, #212]	; (9000d34c <tcp_process+0x7dc>)
9000d278:	681b      	ldr	r3, [r3, #0]
9000d27a:	687a      	ldr	r2, [r7, #4]
9000d27c:	429a      	cmp	r2, r3
9000d27e:	d105      	bne.n	9000d28c <tcp_process+0x71c>
9000d280:	4b32      	ldr	r3, [pc, #200]	; (9000d34c <tcp_process+0x7dc>)
9000d282:	681b      	ldr	r3, [r3, #0]
9000d284:	68db      	ldr	r3, [r3, #12]
9000d286:	4a31      	ldr	r2, [pc, #196]	; (9000d34c <tcp_process+0x7dc>)
9000d288:	6013      	str	r3, [r2, #0]
9000d28a:	e013      	b.n	9000d2b4 <tcp_process+0x744>
9000d28c:	4b2f      	ldr	r3, [pc, #188]	; (9000d34c <tcp_process+0x7dc>)
9000d28e:	681b      	ldr	r3, [r3, #0]
9000d290:	60fb      	str	r3, [r7, #12]
9000d292:	e00c      	b.n	9000d2ae <tcp_process+0x73e>
9000d294:	68fb      	ldr	r3, [r7, #12]
9000d296:	68db      	ldr	r3, [r3, #12]
9000d298:	687a      	ldr	r2, [r7, #4]
9000d29a:	429a      	cmp	r2, r3
9000d29c:	d104      	bne.n	9000d2a8 <tcp_process+0x738>
9000d29e:	687b      	ldr	r3, [r7, #4]
9000d2a0:	68da      	ldr	r2, [r3, #12]
9000d2a2:	68fb      	ldr	r3, [r7, #12]
9000d2a4:	60da      	str	r2, [r3, #12]
9000d2a6:	e005      	b.n	9000d2b4 <tcp_process+0x744>
9000d2a8:	68fb      	ldr	r3, [r7, #12]
9000d2aa:	68db      	ldr	r3, [r3, #12]
9000d2ac:	60fb      	str	r3, [r7, #12]
9000d2ae:	68fb      	ldr	r3, [r7, #12]
9000d2b0:	2b00      	cmp	r3, #0
9000d2b2:	d1ef      	bne.n	9000d294 <tcp_process+0x724>
9000d2b4:	687b      	ldr	r3, [r7, #4]
9000d2b6:	2200      	movs	r2, #0
9000d2b8:	60da      	str	r2, [r3, #12]
9000d2ba:	4b1f      	ldr	r3, [pc, #124]	; (9000d338 <tcp_process+0x7c8>)
9000d2bc:	2201      	movs	r2, #1
9000d2be:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
9000d2c0:	687b      	ldr	r3, [r7, #4]
9000d2c2:	220a      	movs	r2, #10
9000d2c4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
9000d2c6:	4b1d      	ldr	r3, [pc, #116]	; (9000d33c <tcp_process+0x7cc>)
9000d2c8:	681a      	ldr	r2, [r3, #0]
9000d2ca:	687b      	ldr	r3, [r7, #4]
9000d2cc:	60da      	str	r2, [r3, #12]
9000d2ce:	4a1b      	ldr	r2, [pc, #108]	; (9000d33c <tcp_process+0x7cc>)
9000d2d0:	687b      	ldr	r3, [r7, #4]
9000d2d2:	6013      	str	r3, [r2, #0]
9000d2d4:	f003 f8a2 	bl	9001041c <tcp_timer_needed>
      }
      break;
9000d2d8:	e026      	b.n	9000d328 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
9000d2da:	6878      	ldr	r0, [r7, #4]
9000d2dc:	f000 f93c 	bl	9000d558 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
9000d2e0:	4b17      	ldr	r3, [pc, #92]	; (9000d340 <tcp_process+0x7d0>)
9000d2e2:	781b      	ldrb	r3, [r3, #0]
9000d2e4:	f003 0310 	and.w	r3, r3, #16
9000d2e8:	2b00      	cmp	r3, #0
9000d2ea:	d01f      	beq.n	9000d32c <tcp_process+0x7bc>
9000d2ec:	687b      	ldr	r3, [r7, #4]
9000d2ee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
9000d2f0:	4b14      	ldr	r3, [pc, #80]	; (9000d344 <tcp_process+0x7d4>)
9000d2f2:	681b      	ldr	r3, [r3, #0]
9000d2f4:	429a      	cmp	r2, r3
9000d2f6:	d119      	bne.n	9000d32c <tcp_process+0x7bc>
9000d2f8:	687b      	ldr	r3, [r7, #4]
9000d2fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
9000d2fc:	2b00      	cmp	r3, #0
9000d2fe:	d115      	bne.n	9000d32c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
9000d300:	4b11      	ldr	r3, [pc, #68]	; (9000d348 <tcp_process+0x7d8>)
9000d302:	781b      	ldrb	r3, [r3, #0]
9000d304:	f043 0310 	orr.w	r3, r3, #16
9000d308:	b2da      	uxtb	r2, r3
9000d30a:	4b0f      	ldr	r3, [pc, #60]	; (9000d348 <tcp_process+0x7d8>)
9000d30c:	701a      	strb	r2, [r3, #0]
      }
      break;
9000d30e:	e00d      	b.n	9000d32c <tcp_process+0x7bc>
    default:
      break;
9000d310:	bf00      	nop
9000d312:	e00c      	b.n	9000d32e <tcp_process+0x7be>
      break;
9000d314:	bf00      	nop
9000d316:	e00a      	b.n	9000d32e <tcp_process+0x7be>
      break;
9000d318:	bf00      	nop
9000d31a:	e008      	b.n	9000d32e <tcp_process+0x7be>
      break;
9000d31c:	bf00      	nop
9000d31e:	e006      	b.n	9000d32e <tcp_process+0x7be>
      break;
9000d320:	bf00      	nop
9000d322:	e004      	b.n	9000d32e <tcp_process+0x7be>
      break;
9000d324:	bf00      	nop
9000d326:	e002      	b.n	9000d32e <tcp_process+0x7be>
      break;
9000d328:	bf00      	nop
9000d32a:	e000      	b.n	9000d32e <tcp_process+0x7be>
      break;
9000d32c:	bf00      	nop
  }
  return ERR_OK;
9000d32e:	2300      	movs	r3, #0
}
9000d330:	4618      	mov	r0, r3
9000d332:	3724      	adds	r7, #36	; 0x24
9000d334:	46bd      	mov	sp, r7
9000d336:	bd90      	pop	{r4, r7, pc}
9000d338:	24011034 	.word	0x24011034
9000d33c:	24011030 	.word	0x24011030
9000d340:	24011064 	.word	0x24011064
9000d344:	2401105c 	.word	0x2401105c
9000d348:	24011065 	.word	0x24011065
9000d34c:	2401102c 	.word	0x2401102c

9000d350 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
9000d350:	b590      	push	{r4, r7, lr}
9000d352:	b085      	sub	sp, #20
9000d354:	af00      	add	r7, sp, #0
9000d356:	6078      	str	r0, [r7, #4]
9000d358:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
9000d35a:	687b      	ldr	r3, [r7, #4]
9000d35c:	2b00      	cmp	r3, #0
9000d35e:	d106      	bne.n	9000d36e <tcp_oos_insert_segment+0x1e>
9000d360:	4b3b      	ldr	r3, [pc, #236]	; (9000d450 <tcp_oos_insert_segment+0x100>)
9000d362:	f240 421f 	movw	r2, #1055	; 0x41f
9000d366:	493b      	ldr	r1, [pc, #236]	; (9000d454 <tcp_oos_insert_segment+0x104>)
9000d368:	483b      	ldr	r0, [pc, #236]	; (9000d458 <tcp_oos_insert_segment+0x108>)
9000d36a:	f006 f965 	bl	90013638 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
9000d36e:	687b      	ldr	r3, [r7, #4]
9000d370:	68db      	ldr	r3, [r3, #12]
9000d372:	899b      	ldrh	r3, [r3, #12]
9000d374:	b29b      	uxth	r3, r3
9000d376:	4618      	mov	r0, r3
9000d378:	f7fb f86c 	bl	90008454 <lwip_htons>
9000d37c:	4603      	mov	r3, r0
9000d37e:	b2db      	uxtb	r3, r3
9000d380:	f003 0301 	and.w	r3, r3, #1
9000d384:	2b00      	cmp	r3, #0
9000d386:	d028      	beq.n	9000d3da <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
9000d388:	6838      	ldr	r0, [r7, #0]
9000d38a:	f7fe f977 	bl	9000b67c <tcp_segs_free>
    next = NULL;
9000d38e:	2300      	movs	r3, #0
9000d390:	603b      	str	r3, [r7, #0]
9000d392:	e056      	b.n	9000d442 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
9000d394:	683b      	ldr	r3, [r7, #0]
9000d396:	68db      	ldr	r3, [r3, #12]
9000d398:	899b      	ldrh	r3, [r3, #12]
9000d39a:	b29b      	uxth	r3, r3
9000d39c:	4618      	mov	r0, r3
9000d39e:	f7fb f859 	bl	90008454 <lwip_htons>
9000d3a2:	4603      	mov	r3, r0
9000d3a4:	b2db      	uxtb	r3, r3
9000d3a6:	f003 0301 	and.w	r3, r3, #1
9000d3aa:	2b00      	cmp	r3, #0
9000d3ac:	d00d      	beq.n	9000d3ca <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
9000d3ae:	687b      	ldr	r3, [r7, #4]
9000d3b0:	68db      	ldr	r3, [r3, #12]
9000d3b2:	899b      	ldrh	r3, [r3, #12]
9000d3b4:	b29c      	uxth	r4, r3
9000d3b6:	2001      	movs	r0, #1
9000d3b8:	f7fb f84c 	bl	90008454 <lwip_htons>
9000d3bc:	4603      	mov	r3, r0
9000d3be:	461a      	mov	r2, r3
9000d3c0:	687b      	ldr	r3, [r7, #4]
9000d3c2:	68db      	ldr	r3, [r3, #12]
9000d3c4:	4322      	orrs	r2, r4
9000d3c6:	b292      	uxth	r2, r2
9000d3c8:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
9000d3ca:	683b      	ldr	r3, [r7, #0]
9000d3cc:	60fb      	str	r3, [r7, #12]
      next = next->next;
9000d3ce:	683b      	ldr	r3, [r7, #0]
9000d3d0:	681b      	ldr	r3, [r3, #0]
9000d3d2:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
9000d3d4:	68f8      	ldr	r0, [r7, #12]
9000d3d6:	f7fe f966 	bl	9000b6a6 <tcp_seg_free>
    while (next &&
9000d3da:	683b      	ldr	r3, [r7, #0]
9000d3dc:	2b00      	cmp	r3, #0
9000d3de:	d00e      	beq.n	9000d3fe <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
9000d3e0:	687b      	ldr	r3, [r7, #4]
9000d3e2:	891b      	ldrh	r3, [r3, #8]
9000d3e4:	461a      	mov	r2, r3
9000d3e6:	4b1d      	ldr	r3, [pc, #116]	; (9000d45c <tcp_oos_insert_segment+0x10c>)
9000d3e8:	681b      	ldr	r3, [r3, #0]
9000d3ea:	441a      	add	r2, r3
9000d3ec:	683b      	ldr	r3, [r7, #0]
9000d3ee:	68db      	ldr	r3, [r3, #12]
9000d3f0:	685b      	ldr	r3, [r3, #4]
9000d3f2:	6839      	ldr	r1, [r7, #0]
9000d3f4:	8909      	ldrh	r1, [r1, #8]
9000d3f6:	440b      	add	r3, r1
9000d3f8:	1ad3      	subs	r3, r2, r3
    while (next &&
9000d3fa:	2b00      	cmp	r3, #0
9000d3fc:	daca      	bge.n	9000d394 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
9000d3fe:	683b      	ldr	r3, [r7, #0]
9000d400:	2b00      	cmp	r3, #0
9000d402:	d01e      	beq.n	9000d442 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
9000d404:	687b      	ldr	r3, [r7, #4]
9000d406:	891b      	ldrh	r3, [r3, #8]
9000d408:	461a      	mov	r2, r3
9000d40a:	4b14      	ldr	r3, [pc, #80]	; (9000d45c <tcp_oos_insert_segment+0x10c>)
9000d40c:	681b      	ldr	r3, [r3, #0]
9000d40e:	441a      	add	r2, r3
9000d410:	683b      	ldr	r3, [r7, #0]
9000d412:	68db      	ldr	r3, [r3, #12]
9000d414:	685b      	ldr	r3, [r3, #4]
9000d416:	1ad3      	subs	r3, r2, r3
    if (next &&
9000d418:	2b00      	cmp	r3, #0
9000d41a:	dd12      	ble.n	9000d442 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
9000d41c:	683b      	ldr	r3, [r7, #0]
9000d41e:	68db      	ldr	r3, [r3, #12]
9000d420:	685b      	ldr	r3, [r3, #4]
9000d422:	b29a      	uxth	r2, r3
9000d424:	4b0d      	ldr	r3, [pc, #52]	; (9000d45c <tcp_oos_insert_segment+0x10c>)
9000d426:	681b      	ldr	r3, [r3, #0]
9000d428:	b29b      	uxth	r3, r3
9000d42a:	1ad3      	subs	r3, r2, r3
9000d42c:	b29a      	uxth	r2, r3
9000d42e:	687b      	ldr	r3, [r7, #4]
9000d430:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
9000d432:	687b      	ldr	r3, [r7, #4]
9000d434:	685a      	ldr	r2, [r3, #4]
9000d436:	687b      	ldr	r3, [r7, #4]
9000d438:	891b      	ldrh	r3, [r3, #8]
9000d43a:	4619      	mov	r1, r3
9000d43c:	4610      	mov	r0, r2
9000d43e:	f7fc fb73 	bl	90009b28 <pbuf_realloc>
    }
  }
  cseg->next = next;
9000d442:	687b      	ldr	r3, [r7, #4]
9000d444:	683a      	ldr	r2, [r7, #0]
9000d446:	601a      	str	r2, [r3, #0]
}
9000d448:	bf00      	nop
9000d44a:	3714      	adds	r7, #20
9000d44c:	46bd      	mov	sp, r7
9000d44e:	bd90      	pop	{r4, r7, pc}
9000d450:	90015ab0 	.word	0x90015ab0
9000d454:	90015d70 	.word	0x90015d70
9000d458:	90015afc 	.word	0x90015afc
9000d45c:	24011058 	.word	0x24011058

9000d460 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
9000d460:	b5b0      	push	{r4, r5, r7, lr}
9000d462:	b086      	sub	sp, #24
9000d464:	af00      	add	r7, sp, #0
9000d466:	60f8      	str	r0, [r7, #12]
9000d468:	60b9      	str	r1, [r7, #8]
9000d46a:	607a      	str	r2, [r7, #4]
9000d46c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
9000d46e:	e03e      	b.n	9000d4ee <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
9000d470:	68bb      	ldr	r3, [r7, #8]
9000d472:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
9000d474:	68bb      	ldr	r3, [r7, #8]
9000d476:	681b      	ldr	r3, [r3, #0]
9000d478:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
9000d47a:	697b      	ldr	r3, [r7, #20]
9000d47c:	685b      	ldr	r3, [r3, #4]
9000d47e:	4618      	mov	r0, r3
9000d480:	f7fc fd66 	bl	90009f50 <pbuf_clen>
9000d484:	4603      	mov	r3, r0
9000d486:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
9000d488:	68fb      	ldr	r3, [r7, #12]
9000d48a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
9000d48e:	8a7a      	ldrh	r2, [r7, #18]
9000d490:	429a      	cmp	r2, r3
9000d492:	d906      	bls.n	9000d4a2 <tcp_free_acked_segments+0x42>
9000d494:	4b2a      	ldr	r3, [pc, #168]	; (9000d540 <tcp_free_acked_segments+0xe0>)
9000d496:	f240 4257 	movw	r2, #1111	; 0x457
9000d49a:	492a      	ldr	r1, [pc, #168]	; (9000d544 <tcp_free_acked_segments+0xe4>)
9000d49c:	482a      	ldr	r0, [pc, #168]	; (9000d548 <tcp_free_acked_segments+0xe8>)
9000d49e:	f006 f8cb 	bl	90013638 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
9000d4a2:	68fb      	ldr	r3, [r7, #12]
9000d4a4:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
9000d4a8:	8a7b      	ldrh	r3, [r7, #18]
9000d4aa:	1ad3      	subs	r3, r2, r3
9000d4ac:	b29a      	uxth	r2, r3
9000d4ae:	68fb      	ldr	r3, [r7, #12]
9000d4b0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
9000d4b4:	697b      	ldr	r3, [r7, #20]
9000d4b6:	891a      	ldrh	r2, [r3, #8]
9000d4b8:	4b24      	ldr	r3, [pc, #144]	; (9000d54c <tcp_free_acked_segments+0xec>)
9000d4ba:	881b      	ldrh	r3, [r3, #0]
9000d4bc:	4413      	add	r3, r2
9000d4be:	b29a      	uxth	r2, r3
9000d4c0:	4b22      	ldr	r3, [pc, #136]	; (9000d54c <tcp_free_acked_segments+0xec>)
9000d4c2:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
9000d4c4:	6978      	ldr	r0, [r7, #20]
9000d4c6:	f7fe f8ee 	bl	9000b6a6 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
9000d4ca:	68fb      	ldr	r3, [r7, #12]
9000d4cc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
9000d4d0:	2b00      	cmp	r3, #0
9000d4d2:	d00c      	beq.n	9000d4ee <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
9000d4d4:	68bb      	ldr	r3, [r7, #8]
9000d4d6:	2b00      	cmp	r3, #0
9000d4d8:	d109      	bne.n	9000d4ee <tcp_free_acked_segments+0x8e>
9000d4da:	683b      	ldr	r3, [r7, #0]
9000d4dc:	2b00      	cmp	r3, #0
9000d4de:	d106      	bne.n	9000d4ee <tcp_free_acked_segments+0x8e>
9000d4e0:	4b17      	ldr	r3, [pc, #92]	; (9000d540 <tcp_free_acked_segments+0xe0>)
9000d4e2:	f240 4261 	movw	r2, #1121	; 0x461
9000d4e6:	491a      	ldr	r1, [pc, #104]	; (9000d550 <tcp_free_acked_segments+0xf0>)
9000d4e8:	4817      	ldr	r0, [pc, #92]	; (9000d548 <tcp_free_acked_segments+0xe8>)
9000d4ea:	f006 f8a5 	bl	90013638 <iprintf>
  while (seg_list != NULL &&
9000d4ee:	68bb      	ldr	r3, [r7, #8]
9000d4f0:	2b00      	cmp	r3, #0
9000d4f2:	d020      	beq.n	9000d536 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
9000d4f4:	68bb      	ldr	r3, [r7, #8]
9000d4f6:	68db      	ldr	r3, [r3, #12]
9000d4f8:	685b      	ldr	r3, [r3, #4]
9000d4fa:	4618      	mov	r0, r3
9000d4fc:	f7fa ffbf 	bl	9000847e <lwip_htonl>
9000d500:	4604      	mov	r4, r0
9000d502:	68bb      	ldr	r3, [r7, #8]
9000d504:	891b      	ldrh	r3, [r3, #8]
9000d506:	461d      	mov	r5, r3
9000d508:	68bb      	ldr	r3, [r7, #8]
9000d50a:	68db      	ldr	r3, [r3, #12]
9000d50c:	899b      	ldrh	r3, [r3, #12]
9000d50e:	b29b      	uxth	r3, r3
9000d510:	4618      	mov	r0, r3
9000d512:	f7fa ff9f 	bl	90008454 <lwip_htons>
9000d516:	4603      	mov	r3, r0
9000d518:	b2db      	uxtb	r3, r3
9000d51a:	f003 0303 	and.w	r3, r3, #3
9000d51e:	2b00      	cmp	r3, #0
9000d520:	d001      	beq.n	9000d526 <tcp_free_acked_segments+0xc6>
9000d522:	2301      	movs	r3, #1
9000d524:	e000      	b.n	9000d528 <tcp_free_acked_segments+0xc8>
9000d526:	2300      	movs	r3, #0
9000d528:	442b      	add	r3, r5
9000d52a:	18e2      	adds	r2, r4, r3
9000d52c:	4b09      	ldr	r3, [pc, #36]	; (9000d554 <tcp_free_acked_segments+0xf4>)
9000d52e:	681b      	ldr	r3, [r3, #0]
9000d530:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
9000d532:	2b00      	cmp	r3, #0
9000d534:	dd9c      	ble.n	9000d470 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
9000d536:	68bb      	ldr	r3, [r7, #8]
}
9000d538:	4618      	mov	r0, r3
9000d53a:	3718      	adds	r7, #24
9000d53c:	46bd      	mov	sp, r7
9000d53e:	bdb0      	pop	{r4, r5, r7, pc}
9000d540:	90015ab0 	.word	0x90015ab0
9000d544:	90015d98 	.word	0x90015d98
9000d548:	90015afc 	.word	0x90015afc
9000d54c:	24011060 	.word	0x24011060
9000d550:	90015dc0 	.word	0x90015dc0
9000d554:	2401105c 	.word	0x2401105c

9000d558 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
9000d558:	b5b0      	push	{r4, r5, r7, lr}
9000d55a:	b094      	sub	sp, #80	; 0x50
9000d55c:	af00      	add	r7, sp, #0
9000d55e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
9000d560:	2300      	movs	r3, #0
9000d562:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
9000d564:	687b      	ldr	r3, [r7, #4]
9000d566:	2b00      	cmp	r3, #0
9000d568:	d106      	bne.n	9000d578 <tcp_receive+0x20>
9000d56a:	4b91      	ldr	r3, [pc, #580]	; (9000d7b0 <tcp_receive+0x258>)
9000d56c:	f240 427b 	movw	r2, #1147	; 0x47b
9000d570:	4990      	ldr	r1, [pc, #576]	; (9000d7b4 <tcp_receive+0x25c>)
9000d572:	4891      	ldr	r0, [pc, #580]	; (9000d7b8 <tcp_receive+0x260>)
9000d574:	f006 f860 	bl	90013638 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
9000d578:	687b      	ldr	r3, [r7, #4]
9000d57a:	7d1b      	ldrb	r3, [r3, #20]
9000d57c:	2b03      	cmp	r3, #3
9000d57e:	d806      	bhi.n	9000d58e <tcp_receive+0x36>
9000d580:	4b8b      	ldr	r3, [pc, #556]	; (9000d7b0 <tcp_receive+0x258>)
9000d582:	f240 427c 	movw	r2, #1148	; 0x47c
9000d586:	498d      	ldr	r1, [pc, #564]	; (9000d7bc <tcp_receive+0x264>)
9000d588:	488b      	ldr	r0, [pc, #556]	; (9000d7b8 <tcp_receive+0x260>)
9000d58a:	f006 f855 	bl	90013638 <iprintf>

  if (flags & TCP_ACK) {
9000d58e:	4b8c      	ldr	r3, [pc, #560]	; (9000d7c0 <tcp_receive+0x268>)
9000d590:	781b      	ldrb	r3, [r3, #0]
9000d592:	f003 0310 	and.w	r3, r3, #16
9000d596:	2b00      	cmp	r3, #0
9000d598:	f000 8264 	beq.w	9000da64 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
9000d59c:	687b      	ldr	r3, [r7, #4]
9000d59e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
9000d5a2:	461a      	mov	r2, r3
9000d5a4:	687b      	ldr	r3, [r7, #4]
9000d5a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
9000d5a8:	4413      	add	r3, r2
9000d5aa:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
9000d5ac:	687b      	ldr	r3, [r7, #4]
9000d5ae:	6d5a      	ldr	r2, [r3, #84]	; 0x54
9000d5b0:	4b84      	ldr	r3, [pc, #528]	; (9000d7c4 <tcp_receive+0x26c>)
9000d5b2:	681b      	ldr	r3, [r3, #0]
9000d5b4:	1ad3      	subs	r3, r2, r3
9000d5b6:	2b00      	cmp	r3, #0
9000d5b8:	db1b      	blt.n	9000d5f2 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
9000d5ba:	687b      	ldr	r3, [r7, #4]
9000d5bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
9000d5be:	4b81      	ldr	r3, [pc, #516]	; (9000d7c4 <tcp_receive+0x26c>)
9000d5c0:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
9000d5c2:	429a      	cmp	r2, r3
9000d5c4:	d106      	bne.n	9000d5d4 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
9000d5c6:	687b      	ldr	r3, [r7, #4]
9000d5c8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
9000d5ca:	4b7f      	ldr	r3, [pc, #508]	; (9000d7c8 <tcp_receive+0x270>)
9000d5cc:	681b      	ldr	r3, [r3, #0]
9000d5ce:	1ad3      	subs	r3, r2, r3
9000d5d0:	2b00      	cmp	r3, #0
9000d5d2:	db0e      	blt.n	9000d5f2 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
9000d5d4:	687b      	ldr	r3, [r7, #4]
9000d5d6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
9000d5d8:	4b7b      	ldr	r3, [pc, #492]	; (9000d7c8 <tcp_receive+0x270>)
9000d5da:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
9000d5dc:	429a      	cmp	r2, r3
9000d5de:	d125      	bne.n	9000d62c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
9000d5e0:	4b7a      	ldr	r3, [pc, #488]	; (9000d7cc <tcp_receive+0x274>)
9000d5e2:	681b      	ldr	r3, [r3, #0]
9000d5e4:	89db      	ldrh	r3, [r3, #14]
9000d5e6:	b29a      	uxth	r2, r3
9000d5e8:	687b      	ldr	r3, [r7, #4]
9000d5ea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
9000d5ee:	429a      	cmp	r2, r3
9000d5f0:	d91c      	bls.n	9000d62c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
9000d5f2:	4b76      	ldr	r3, [pc, #472]	; (9000d7cc <tcp_receive+0x274>)
9000d5f4:	681b      	ldr	r3, [r3, #0]
9000d5f6:	89db      	ldrh	r3, [r3, #14]
9000d5f8:	b29a      	uxth	r2, r3
9000d5fa:	687b      	ldr	r3, [r7, #4]
9000d5fc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
9000d600:	687b      	ldr	r3, [r7, #4]
9000d602:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
9000d606:	687b      	ldr	r3, [r7, #4]
9000d608:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
9000d60c:	429a      	cmp	r2, r3
9000d60e:	d205      	bcs.n	9000d61c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
9000d610:	687b      	ldr	r3, [r7, #4]
9000d612:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
9000d616:	687b      	ldr	r3, [r7, #4]
9000d618:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
9000d61c:	4b69      	ldr	r3, [pc, #420]	; (9000d7c4 <tcp_receive+0x26c>)
9000d61e:	681a      	ldr	r2, [r3, #0]
9000d620:	687b      	ldr	r3, [r7, #4]
9000d622:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
9000d624:	4b68      	ldr	r3, [pc, #416]	; (9000d7c8 <tcp_receive+0x270>)
9000d626:	681a      	ldr	r2, [r3, #0]
9000d628:	687b      	ldr	r3, [r7, #4]
9000d62a:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
9000d62c:	4b66      	ldr	r3, [pc, #408]	; (9000d7c8 <tcp_receive+0x270>)
9000d62e:	681a      	ldr	r2, [r3, #0]
9000d630:	687b      	ldr	r3, [r7, #4]
9000d632:	6c5b      	ldr	r3, [r3, #68]	; 0x44
9000d634:	1ad3      	subs	r3, r2, r3
9000d636:	2b00      	cmp	r3, #0
9000d638:	dc58      	bgt.n	9000d6ec <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
9000d63a:	4b65      	ldr	r3, [pc, #404]	; (9000d7d0 <tcp_receive+0x278>)
9000d63c:	881b      	ldrh	r3, [r3, #0]
9000d63e:	2b00      	cmp	r3, #0
9000d640:	d14b      	bne.n	9000d6da <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
9000d642:	687b      	ldr	r3, [r7, #4]
9000d644:	6d9b      	ldr	r3, [r3, #88]	; 0x58
9000d646:	687a      	ldr	r2, [r7, #4]
9000d648:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
9000d64c:	4413      	add	r3, r2
9000d64e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
9000d650:	429a      	cmp	r2, r3
9000d652:	d142      	bne.n	9000d6da <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
9000d654:	687b      	ldr	r3, [r7, #4]
9000d656:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
9000d65a:	2b00      	cmp	r3, #0
9000d65c:	db3d      	blt.n	9000d6da <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
9000d65e:	687b      	ldr	r3, [r7, #4]
9000d660:	6c5a      	ldr	r2, [r3, #68]	; 0x44
9000d662:	4b59      	ldr	r3, [pc, #356]	; (9000d7c8 <tcp_receive+0x270>)
9000d664:	681b      	ldr	r3, [r3, #0]
9000d666:	429a      	cmp	r2, r3
9000d668:	d137      	bne.n	9000d6da <tcp_receive+0x182>
              found_dupack = 1;
9000d66a:	2301      	movs	r3, #1
9000d66c:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
9000d66e:	687b      	ldr	r3, [r7, #4]
9000d670:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
9000d674:	2bff      	cmp	r3, #255	; 0xff
9000d676:	d007      	beq.n	9000d688 <tcp_receive+0x130>
                ++pcb->dupacks;
9000d678:	687b      	ldr	r3, [r7, #4]
9000d67a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
9000d67e:	3301      	adds	r3, #1
9000d680:	b2da      	uxtb	r2, r3
9000d682:	687b      	ldr	r3, [r7, #4]
9000d684:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
9000d688:	687b      	ldr	r3, [r7, #4]
9000d68a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
9000d68e:	2b03      	cmp	r3, #3
9000d690:	d91b      	bls.n	9000d6ca <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
9000d692:	687b      	ldr	r3, [r7, #4]
9000d694:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
9000d698:	687b      	ldr	r3, [r7, #4]
9000d69a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
9000d69c:	4413      	add	r3, r2
9000d69e:	b29a      	uxth	r2, r3
9000d6a0:	687b      	ldr	r3, [r7, #4]
9000d6a2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
9000d6a6:	429a      	cmp	r2, r3
9000d6a8:	d30a      	bcc.n	9000d6c0 <tcp_receive+0x168>
9000d6aa:	687b      	ldr	r3, [r7, #4]
9000d6ac:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
9000d6b0:	687b      	ldr	r3, [r7, #4]
9000d6b2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
9000d6b4:	4413      	add	r3, r2
9000d6b6:	b29a      	uxth	r2, r3
9000d6b8:	687b      	ldr	r3, [r7, #4]
9000d6ba:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
9000d6be:	e004      	b.n	9000d6ca <tcp_receive+0x172>
9000d6c0:	687b      	ldr	r3, [r7, #4]
9000d6c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
9000d6c6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
9000d6ca:	687b      	ldr	r3, [r7, #4]
9000d6cc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
9000d6d0:	2b02      	cmp	r3, #2
9000d6d2:	d902      	bls.n	9000d6da <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
9000d6d4:	6878      	ldr	r0, [r7, #4]
9000d6d6:	f002 fb43 	bl	9000fd60 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
9000d6da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
9000d6dc:	2b00      	cmp	r3, #0
9000d6de:	f040 8161 	bne.w	9000d9a4 <tcp_receive+0x44c>
        pcb->dupacks = 0;
9000d6e2:	687b      	ldr	r3, [r7, #4]
9000d6e4:	2200      	movs	r2, #0
9000d6e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
9000d6ea:	e15b      	b.n	9000d9a4 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
9000d6ec:	4b36      	ldr	r3, [pc, #216]	; (9000d7c8 <tcp_receive+0x270>)
9000d6ee:	681a      	ldr	r2, [r3, #0]
9000d6f0:	687b      	ldr	r3, [r7, #4]
9000d6f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
9000d6f4:	1ad3      	subs	r3, r2, r3
9000d6f6:	3b01      	subs	r3, #1
9000d6f8:	2b00      	cmp	r3, #0
9000d6fa:	f2c0 814e 	blt.w	9000d99a <tcp_receive+0x442>
9000d6fe:	4b32      	ldr	r3, [pc, #200]	; (9000d7c8 <tcp_receive+0x270>)
9000d700:	681a      	ldr	r2, [r3, #0]
9000d702:	687b      	ldr	r3, [r7, #4]
9000d704:	6d1b      	ldr	r3, [r3, #80]	; 0x50
9000d706:	1ad3      	subs	r3, r2, r3
9000d708:	2b00      	cmp	r3, #0
9000d70a:	f300 8146 	bgt.w	9000d99a <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
9000d70e:	687b      	ldr	r3, [r7, #4]
9000d710:	8b5b      	ldrh	r3, [r3, #26]
9000d712:	f003 0304 	and.w	r3, r3, #4
9000d716:	2b00      	cmp	r3, #0
9000d718:	d010      	beq.n	9000d73c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
9000d71a:	687b      	ldr	r3, [r7, #4]
9000d71c:	8b5b      	ldrh	r3, [r3, #26]
9000d71e:	f023 0304 	bic.w	r3, r3, #4
9000d722:	b29a      	uxth	r2, r3
9000d724:	687b      	ldr	r3, [r7, #4]
9000d726:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
9000d728:	687b      	ldr	r3, [r7, #4]
9000d72a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
9000d72e:	687b      	ldr	r3, [r7, #4]
9000d730:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
9000d734:	687b      	ldr	r3, [r7, #4]
9000d736:	2200      	movs	r2, #0
9000d738:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
9000d73c:	687b      	ldr	r3, [r7, #4]
9000d73e:	2200      	movs	r2, #0
9000d740:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
9000d744:	687b      	ldr	r3, [r7, #4]
9000d746:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
9000d74a:	10db      	asrs	r3, r3, #3
9000d74c:	b21b      	sxth	r3, r3
9000d74e:	b29a      	uxth	r2, r3
9000d750:	687b      	ldr	r3, [r7, #4]
9000d752:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
9000d756:	b29b      	uxth	r3, r3
9000d758:	4413      	add	r3, r2
9000d75a:	b29b      	uxth	r3, r3
9000d75c:	b21a      	sxth	r2, r3
9000d75e:	687b      	ldr	r3, [r7, #4]
9000d760:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
9000d764:	4b18      	ldr	r3, [pc, #96]	; (9000d7c8 <tcp_receive+0x270>)
9000d766:	681b      	ldr	r3, [r3, #0]
9000d768:	b29a      	uxth	r2, r3
9000d76a:	687b      	ldr	r3, [r7, #4]
9000d76c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
9000d76e:	b29b      	uxth	r3, r3
9000d770:	1ad3      	subs	r3, r2, r3
9000d772:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
9000d774:	687b      	ldr	r3, [r7, #4]
9000d776:	2200      	movs	r2, #0
9000d778:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
9000d77c:	4b12      	ldr	r3, [pc, #72]	; (9000d7c8 <tcp_receive+0x270>)
9000d77e:	681a      	ldr	r2, [r3, #0]
9000d780:	687b      	ldr	r3, [r7, #4]
9000d782:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
9000d784:	687b      	ldr	r3, [r7, #4]
9000d786:	7d1b      	ldrb	r3, [r3, #20]
9000d788:	2b03      	cmp	r3, #3
9000d78a:	f240 8097 	bls.w	9000d8bc <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
9000d78e:	687b      	ldr	r3, [r7, #4]
9000d790:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
9000d794:	687b      	ldr	r3, [r7, #4]
9000d796:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
9000d79a:	429a      	cmp	r2, r3
9000d79c:	d245      	bcs.n	9000d82a <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
9000d79e:	687b      	ldr	r3, [r7, #4]
9000d7a0:	8b5b      	ldrh	r3, [r3, #26]
9000d7a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
9000d7a6:	2b00      	cmp	r3, #0
9000d7a8:	d014      	beq.n	9000d7d4 <tcp_receive+0x27c>
9000d7aa:	2301      	movs	r3, #1
9000d7ac:	e013      	b.n	9000d7d6 <tcp_receive+0x27e>
9000d7ae:	bf00      	nop
9000d7b0:	90015ab0 	.word	0x90015ab0
9000d7b4:	90015de0 	.word	0x90015de0
9000d7b8:	90015afc 	.word	0x90015afc
9000d7bc:	90015dfc 	.word	0x90015dfc
9000d7c0:	24011064 	.word	0x24011064
9000d7c4:	24011058 	.word	0x24011058
9000d7c8:	2401105c 	.word	0x2401105c
9000d7cc:	24011048 	.word	0x24011048
9000d7d0:	24011062 	.word	0x24011062
9000d7d4:	2302      	movs	r3, #2
9000d7d6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
9000d7da:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
9000d7de:	b29a      	uxth	r2, r3
9000d7e0:	687b      	ldr	r3, [r7, #4]
9000d7e2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
9000d7e4:	fb12 f303 	smulbb	r3, r2, r3
9000d7e8:	b29b      	uxth	r3, r3
9000d7ea:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
9000d7ec:	4293      	cmp	r3, r2
9000d7ee:	bf28      	it	cs
9000d7f0:	4613      	movcs	r3, r2
9000d7f2:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
9000d7f4:	687b      	ldr	r3, [r7, #4]
9000d7f6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
9000d7fa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
9000d7fc:	4413      	add	r3, r2
9000d7fe:	b29a      	uxth	r2, r3
9000d800:	687b      	ldr	r3, [r7, #4]
9000d802:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
9000d806:	429a      	cmp	r2, r3
9000d808:	d309      	bcc.n	9000d81e <tcp_receive+0x2c6>
9000d80a:	687b      	ldr	r3, [r7, #4]
9000d80c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
9000d810:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
9000d812:	4413      	add	r3, r2
9000d814:	b29a      	uxth	r2, r3
9000d816:	687b      	ldr	r3, [r7, #4]
9000d818:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
9000d81c:	e04e      	b.n	9000d8bc <tcp_receive+0x364>
9000d81e:	687b      	ldr	r3, [r7, #4]
9000d820:	f64f 72ff 	movw	r2, #65535	; 0xffff
9000d824:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
9000d828:	e048      	b.n	9000d8bc <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
9000d82a:	687b      	ldr	r3, [r7, #4]
9000d82c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
9000d830:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
9000d832:	4413      	add	r3, r2
9000d834:	b29a      	uxth	r2, r3
9000d836:	687b      	ldr	r3, [r7, #4]
9000d838:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
9000d83c:	429a      	cmp	r2, r3
9000d83e:	d309      	bcc.n	9000d854 <tcp_receive+0x2fc>
9000d840:	687b      	ldr	r3, [r7, #4]
9000d842:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
9000d846:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
9000d848:	4413      	add	r3, r2
9000d84a:	b29a      	uxth	r2, r3
9000d84c:	687b      	ldr	r3, [r7, #4]
9000d84e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
9000d852:	e004      	b.n	9000d85e <tcp_receive+0x306>
9000d854:	687b      	ldr	r3, [r7, #4]
9000d856:	f64f 72ff 	movw	r2, #65535	; 0xffff
9000d85a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
9000d85e:	687b      	ldr	r3, [r7, #4]
9000d860:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
9000d864:	687b      	ldr	r3, [r7, #4]
9000d866:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
9000d86a:	429a      	cmp	r2, r3
9000d86c:	d326      	bcc.n	9000d8bc <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
9000d86e:	687b      	ldr	r3, [r7, #4]
9000d870:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
9000d874:	687b      	ldr	r3, [r7, #4]
9000d876:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
9000d87a:	1ad3      	subs	r3, r2, r3
9000d87c:	b29a      	uxth	r2, r3
9000d87e:	687b      	ldr	r3, [r7, #4]
9000d880:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
9000d884:	687b      	ldr	r3, [r7, #4]
9000d886:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
9000d88a:	687b      	ldr	r3, [r7, #4]
9000d88c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
9000d88e:	4413      	add	r3, r2
9000d890:	b29a      	uxth	r2, r3
9000d892:	687b      	ldr	r3, [r7, #4]
9000d894:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
9000d898:	429a      	cmp	r2, r3
9000d89a:	d30a      	bcc.n	9000d8b2 <tcp_receive+0x35a>
9000d89c:	687b      	ldr	r3, [r7, #4]
9000d89e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
9000d8a2:	687b      	ldr	r3, [r7, #4]
9000d8a4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
9000d8a6:	4413      	add	r3, r2
9000d8a8:	b29a      	uxth	r2, r3
9000d8aa:	687b      	ldr	r3, [r7, #4]
9000d8ac:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
9000d8b0:	e004      	b.n	9000d8bc <tcp_receive+0x364>
9000d8b2:	687b      	ldr	r3, [r7, #4]
9000d8b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
9000d8b8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
9000d8bc:	687b      	ldr	r3, [r7, #4]
9000d8be:	6f19      	ldr	r1, [r3, #112]	; 0x70
9000d8c0:	687b      	ldr	r3, [r7, #4]
9000d8c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
9000d8c4:	4a98      	ldr	r2, [pc, #608]	; (9000db28 <tcp_receive+0x5d0>)
9000d8c6:	6878      	ldr	r0, [r7, #4]
9000d8c8:	f7ff fdca 	bl	9000d460 <tcp_free_acked_segments>
9000d8cc:	4602      	mov	r2, r0
9000d8ce:	687b      	ldr	r3, [r7, #4]
9000d8d0:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
9000d8d2:	687b      	ldr	r3, [r7, #4]
9000d8d4:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
9000d8d6:	687b      	ldr	r3, [r7, #4]
9000d8d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
9000d8da:	4a94      	ldr	r2, [pc, #592]	; (9000db2c <tcp_receive+0x5d4>)
9000d8dc:	6878      	ldr	r0, [r7, #4]
9000d8de:	f7ff fdbf 	bl	9000d460 <tcp_free_acked_segments>
9000d8e2:	4602      	mov	r2, r0
9000d8e4:	687b      	ldr	r3, [r7, #4]
9000d8e6:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
9000d8e8:	687b      	ldr	r3, [r7, #4]
9000d8ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
9000d8ec:	2b00      	cmp	r3, #0
9000d8ee:	d104      	bne.n	9000d8fa <tcp_receive+0x3a2>
        pcb->rtime = -1;
9000d8f0:	687b      	ldr	r3, [r7, #4]
9000d8f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
9000d8f6:	861a      	strh	r2, [r3, #48]	; 0x30
9000d8f8:	e002      	b.n	9000d900 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
9000d8fa:	687b      	ldr	r3, [r7, #4]
9000d8fc:	2200      	movs	r2, #0
9000d8fe:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
9000d900:	687b      	ldr	r3, [r7, #4]
9000d902:	2200      	movs	r2, #0
9000d904:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
9000d906:	687b      	ldr	r3, [r7, #4]
9000d908:	6edb      	ldr	r3, [r3, #108]	; 0x6c
9000d90a:	2b00      	cmp	r3, #0
9000d90c:	d103      	bne.n	9000d916 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
9000d90e:	687b      	ldr	r3, [r7, #4]
9000d910:	2200      	movs	r2, #0
9000d912:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
9000d916:	687b      	ldr	r3, [r7, #4]
9000d918:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
9000d91c:	4b84      	ldr	r3, [pc, #528]	; (9000db30 <tcp_receive+0x5d8>)
9000d91e:	881b      	ldrh	r3, [r3, #0]
9000d920:	4413      	add	r3, r2
9000d922:	b29a      	uxth	r2, r3
9000d924:	687b      	ldr	r3, [r7, #4]
9000d926:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
9000d92a:	687b      	ldr	r3, [r7, #4]
9000d92c:	8b5b      	ldrh	r3, [r3, #26]
9000d92e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
9000d932:	2b00      	cmp	r3, #0
9000d934:	d035      	beq.n	9000d9a2 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
9000d936:	687b      	ldr	r3, [r7, #4]
9000d938:	6f1b      	ldr	r3, [r3, #112]	; 0x70
9000d93a:	2b00      	cmp	r3, #0
9000d93c:	d118      	bne.n	9000d970 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
9000d93e:	687b      	ldr	r3, [r7, #4]
9000d940:	6edb      	ldr	r3, [r3, #108]	; 0x6c
9000d942:	2b00      	cmp	r3, #0
9000d944:	d00c      	beq.n	9000d960 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
9000d946:	687b      	ldr	r3, [r7, #4]
9000d948:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
9000d94a:	687b      	ldr	r3, [r7, #4]
9000d94c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
9000d94e:	68db      	ldr	r3, [r3, #12]
9000d950:	685b      	ldr	r3, [r3, #4]
9000d952:	4618      	mov	r0, r3
9000d954:	f7fa fd93 	bl	9000847e <lwip_htonl>
9000d958:	4603      	mov	r3, r0
9000d95a:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
9000d95c:	2b00      	cmp	r3, #0
9000d95e:	dc20      	bgt.n	9000d9a2 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
9000d960:	687b      	ldr	r3, [r7, #4]
9000d962:	8b5b      	ldrh	r3, [r3, #26]
9000d964:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
9000d968:	b29a      	uxth	r2, r3
9000d96a:	687b      	ldr	r3, [r7, #4]
9000d96c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
9000d96e:	e018      	b.n	9000d9a2 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
9000d970:	687b      	ldr	r3, [r7, #4]
9000d972:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
9000d974:	687b      	ldr	r3, [r7, #4]
9000d976:	6f1b      	ldr	r3, [r3, #112]	; 0x70
9000d978:	68db      	ldr	r3, [r3, #12]
9000d97a:	685b      	ldr	r3, [r3, #4]
9000d97c:	4618      	mov	r0, r3
9000d97e:	f7fa fd7e 	bl	9000847e <lwip_htonl>
9000d982:	4603      	mov	r3, r0
9000d984:	1ae3      	subs	r3, r4, r3
9000d986:	2b00      	cmp	r3, #0
9000d988:	dc0b      	bgt.n	9000d9a2 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
9000d98a:	687b      	ldr	r3, [r7, #4]
9000d98c:	8b5b      	ldrh	r3, [r3, #26]
9000d98e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
9000d992:	b29a      	uxth	r2, r3
9000d994:	687b      	ldr	r3, [r7, #4]
9000d996:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
9000d998:	e003      	b.n	9000d9a2 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
9000d99a:	6878      	ldr	r0, [r7, #4]
9000d99c:	f002 fbce 	bl	9001013c <tcp_send_empty_ack>
9000d9a0:	e000      	b.n	9000d9a4 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
9000d9a2:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
9000d9a4:	687b      	ldr	r3, [r7, #4]
9000d9a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
9000d9a8:	2b00      	cmp	r3, #0
9000d9aa:	d05b      	beq.n	9000da64 <tcp_receive+0x50c>
9000d9ac:	687b      	ldr	r3, [r7, #4]
9000d9ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
9000d9b0:	4b60      	ldr	r3, [pc, #384]	; (9000db34 <tcp_receive+0x5dc>)
9000d9b2:	681b      	ldr	r3, [r3, #0]
9000d9b4:	1ad3      	subs	r3, r2, r3
9000d9b6:	2b00      	cmp	r3, #0
9000d9b8:	da54      	bge.n	9000da64 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
9000d9ba:	4b5f      	ldr	r3, [pc, #380]	; (9000db38 <tcp_receive+0x5e0>)
9000d9bc:	681b      	ldr	r3, [r3, #0]
9000d9be:	b29a      	uxth	r2, r3
9000d9c0:	687b      	ldr	r3, [r7, #4]
9000d9c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
9000d9c4:	b29b      	uxth	r3, r3
9000d9c6:	1ad3      	subs	r3, r2, r3
9000d9c8:	b29b      	uxth	r3, r3
9000d9ca:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
9000d9ce:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
9000d9d2:	687b      	ldr	r3, [r7, #4]
9000d9d4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
9000d9d8:	10db      	asrs	r3, r3, #3
9000d9da:	b21b      	sxth	r3, r3
9000d9dc:	b29b      	uxth	r3, r3
9000d9de:	1ad3      	subs	r3, r2, r3
9000d9e0:	b29b      	uxth	r3, r3
9000d9e2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
9000d9e6:	687b      	ldr	r3, [r7, #4]
9000d9e8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
9000d9ec:	b29a      	uxth	r2, r3
9000d9ee:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
9000d9f2:	4413      	add	r3, r2
9000d9f4:	b29b      	uxth	r3, r3
9000d9f6:	b21a      	sxth	r2, r3
9000d9f8:	687b      	ldr	r3, [r7, #4]
9000d9fa:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
9000d9fc:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
9000da00:	2b00      	cmp	r3, #0
9000da02:	da05      	bge.n	9000da10 <tcp_receive+0x4b8>
        m = (s16_t) - m;
9000da04:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
9000da08:	425b      	negs	r3, r3
9000da0a:	b29b      	uxth	r3, r3
9000da0c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
9000da10:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
9000da14:	687b      	ldr	r3, [r7, #4]
9000da16:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
9000da1a:	109b      	asrs	r3, r3, #2
9000da1c:	b21b      	sxth	r3, r3
9000da1e:	b29b      	uxth	r3, r3
9000da20:	1ad3      	subs	r3, r2, r3
9000da22:	b29b      	uxth	r3, r3
9000da24:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
9000da28:	687b      	ldr	r3, [r7, #4]
9000da2a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
9000da2e:	b29a      	uxth	r2, r3
9000da30:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
9000da34:	4413      	add	r3, r2
9000da36:	b29b      	uxth	r3, r3
9000da38:	b21a      	sxth	r2, r3
9000da3a:	687b      	ldr	r3, [r7, #4]
9000da3c:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
9000da3e:	687b      	ldr	r3, [r7, #4]
9000da40:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
9000da44:	10db      	asrs	r3, r3, #3
9000da46:	b21b      	sxth	r3, r3
9000da48:	b29a      	uxth	r2, r3
9000da4a:	687b      	ldr	r3, [r7, #4]
9000da4c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
9000da50:	b29b      	uxth	r3, r3
9000da52:	4413      	add	r3, r2
9000da54:	b29b      	uxth	r3, r3
9000da56:	b21a      	sxth	r2, r3
9000da58:	687b      	ldr	r3, [r7, #4]
9000da5a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
9000da5e:	687b      	ldr	r3, [r7, #4]
9000da60:	2200      	movs	r2, #0
9000da62:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
9000da64:	4b35      	ldr	r3, [pc, #212]	; (9000db3c <tcp_receive+0x5e4>)
9000da66:	881b      	ldrh	r3, [r3, #0]
9000da68:	2b00      	cmp	r3, #0
9000da6a:	f000 84e2 	beq.w	9000e432 <tcp_receive+0xeda>
9000da6e:	687b      	ldr	r3, [r7, #4]
9000da70:	7d1b      	ldrb	r3, [r3, #20]
9000da72:	2b06      	cmp	r3, #6
9000da74:	f200 84dd 	bhi.w	9000e432 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
9000da78:	687b      	ldr	r3, [r7, #4]
9000da7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
9000da7c:	4b30      	ldr	r3, [pc, #192]	; (9000db40 <tcp_receive+0x5e8>)
9000da7e:	681b      	ldr	r3, [r3, #0]
9000da80:	1ad3      	subs	r3, r2, r3
9000da82:	3b01      	subs	r3, #1
9000da84:	2b00      	cmp	r3, #0
9000da86:	f2c0 808f 	blt.w	9000dba8 <tcp_receive+0x650>
9000da8a:	687b      	ldr	r3, [r7, #4]
9000da8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
9000da8e:	4b2b      	ldr	r3, [pc, #172]	; (9000db3c <tcp_receive+0x5e4>)
9000da90:	881b      	ldrh	r3, [r3, #0]
9000da92:	4619      	mov	r1, r3
9000da94:	4b2a      	ldr	r3, [pc, #168]	; (9000db40 <tcp_receive+0x5e8>)
9000da96:	681b      	ldr	r3, [r3, #0]
9000da98:	440b      	add	r3, r1
9000da9a:	1ad3      	subs	r3, r2, r3
9000da9c:	3301      	adds	r3, #1
9000da9e:	2b00      	cmp	r3, #0
9000daa0:	f300 8082 	bgt.w	9000dba8 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
9000daa4:	4b27      	ldr	r3, [pc, #156]	; (9000db44 <tcp_receive+0x5ec>)
9000daa6:	685b      	ldr	r3, [r3, #4]
9000daa8:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
9000daaa:	687b      	ldr	r3, [r7, #4]
9000daac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
9000daae:	4b24      	ldr	r3, [pc, #144]	; (9000db40 <tcp_receive+0x5e8>)
9000dab0:	681b      	ldr	r3, [r3, #0]
9000dab2:	1ad3      	subs	r3, r2, r3
9000dab4:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
9000dab6:	4b23      	ldr	r3, [pc, #140]	; (9000db44 <tcp_receive+0x5ec>)
9000dab8:	685b      	ldr	r3, [r3, #4]
9000daba:	2b00      	cmp	r3, #0
9000dabc:	d106      	bne.n	9000dacc <tcp_receive+0x574>
9000dabe:	4b22      	ldr	r3, [pc, #136]	; (9000db48 <tcp_receive+0x5f0>)
9000dac0:	f240 5294 	movw	r2, #1428	; 0x594
9000dac4:	4921      	ldr	r1, [pc, #132]	; (9000db4c <tcp_receive+0x5f4>)
9000dac6:	4822      	ldr	r0, [pc, #136]	; (9000db50 <tcp_receive+0x5f8>)
9000dac8:	f005 fdb6 	bl	90013638 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
9000dacc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000dace:	f64f 72fe 	movw	r2, #65534	; 0xfffe
9000dad2:	4293      	cmp	r3, r2
9000dad4:	d906      	bls.n	9000dae4 <tcp_receive+0x58c>
9000dad6:	4b1c      	ldr	r3, [pc, #112]	; (9000db48 <tcp_receive+0x5f0>)
9000dad8:	f240 5295 	movw	r2, #1429	; 0x595
9000dadc:	491d      	ldr	r1, [pc, #116]	; (9000db54 <tcp_receive+0x5fc>)
9000dade:	481c      	ldr	r0, [pc, #112]	; (9000db50 <tcp_receive+0x5f8>)
9000dae0:	f005 fdaa 	bl	90013638 <iprintf>
      off = (u16_t)off32;
9000dae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000dae6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
9000daea:	4b16      	ldr	r3, [pc, #88]	; (9000db44 <tcp_receive+0x5ec>)
9000daec:	685b      	ldr	r3, [r3, #4]
9000daee:	891b      	ldrh	r3, [r3, #8]
9000daf0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
9000daf4:	429a      	cmp	r2, r3
9000daf6:	d906      	bls.n	9000db06 <tcp_receive+0x5ae>
9000daf8:	4b13      	ldr	r3, [pc, #76]	; (9000db48 <tcp_receive+0x5f0>)
9000dafa:	f240 5297 	movw	r2, #1431	; 0x597
9000dafe:	4916      	ldr	r1, [pc, #88]	; (9000db58 <tcp_receive+0x600>)
9000db00:	4813      	ldr	r0, [pc, #76]	; (9000db50 <tcp_receive+0x5f8>)
9000db02:	f005 fd99 	bl	90013638 <iprintf>
      inseg.len -= off;
9000db06:	4b0f      	ldr	r3, [pc, #60]	; (9000db44 <tcp_receive+0x5ec>)
9000db08:	891a      	ldrh	r2, [r3, #8]
9000db0a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
9000db0e:	1ad3      	subs	r3, r2, r3
9000db10:	b29a      	uxth	r2, r3
9000db12:	4b0c      	ldr	r3, [pc, #48]	; (9000db44 <tcp_receive+0x5ec>)
9000db14:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
9000db16:	4b0b      	ldr	r3, [pc, #44]	; (9000db44 <tcp_receive+0x5ec>)
9000db18:	685b      	ldr	r3, [r3, #4]
9000db1a:	891a      	ldrh	r2, [r3, #8]
9000db1c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
9000db20:	1ad3      	subs	r3, r2, r3
9000db22:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
9000db24:	e02a      	b.n	9000db7c <tcp_receive+0x624>
9000db26:	bf00      	nop
9000db28:	90015e18 	.word	0x90015e18
9000db2c:	90015e20 	.word	0x90015e20
9000db30:	24011060 	.word	0x24011060
9000db34:	2401105c 	.word	0x2401105c
9000db38:	24011020 	.word	0x24011020
9000db3c:	24011062 	.word	0x24011062
9000db40:	24011058 	.word	0x24011058
9000db44:	24011038 	.word	0x24011038
9000db48:	90015ab0 	.word	0x90015ab0
9000db4c:	90015e28 	.word	0x90015e28
9000db50:	90015afc 	.word	0x90015afc
9000db54:	90015e38 	.word	0x90015e38
9000db58:	90015e48 	.word	0x90015e48
        off -= p->len;
9000db5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
9000db5e:	895b      	ldrh	r3, [r3, #10]
9000db60:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
9000db64:	1ad3      	subs	r3, r2, r3
9000db66:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
9000db6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
9000db6c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
9000db6e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
9000db70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
9000db72:	2200      	movs	r2, #0
9000db74:	815a      	strh	r2, [r3, #10]
        p = p->next;
9000db76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
9000db78:	681b      	ldr	r3, [r3, #0]
9000db7a:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
9000db7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
9000db7e:	895b      	ldrh	r3, [r3, #10]
9000db80:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
9000db84:	429a      	cmp	r2, r3
9000db86:	d8e9      	bhi.n	9000db5c <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
9000db88:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
9000db8c:	4619      	mov	r1, r3
9000db8e:	6c78      	ldr	r0, [r7, #68]	; 0x44
9000db90:	f7fc f8ca 	bl	90009d28 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
9000db94:	687b      	ldr	r3, [r7, #4]
9000db96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000db98:	4a91      	ldr	r2, [pc, #580]	; (9000dde0 <tcp_receive+0x888>)
9000db9a:	6013      	str	r3, [r2, #0]
9000db9c:	4b91      	ldr	r3, [pc, #580]	; (9000dde4 <tcp_receive+0x88c>)
9000db9e:	68db      	ldr	r3, [r3, #12]
9000dba0:	4a8f      	ldr	r2, [pc, #572]	; (9000dde0 <tcp_receive+0x888>)
9000dba2:	6812      	ldr	r2, [r2, #0]
9000dba4:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
9000dba6:	e00d      	b.n	9000dbc4 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
9000dba8:	4b8d      	ldr	r3, [pc, #564]	; (9000dde0 <tcp_receive+0x888>)
9000dbaa:	681a      	ldr	r2, [r3, #0]
9000dbac:	687b      	ldr	r3, [r7, #4]
9000dbae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000dbb0:	1ad3      	subs	r3, r2, r3
9000dbb2:	2b00      	cmp	r3, #0
9000dbb4:	da06      	bge.n	9000dbc4 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
9000dbb6:	687b      	ldr	r3, [r7, #4]
9000dbb8:	8b5b      	ldrh	r3, [r3, #26]
9000dbba:	f043 0302 	orr.w	r3, r3, #2
9000dbbe:	b29a      	uxth	r2, r3
9000dbc0:	687b      	ldr	r3, [r7, #4]
9000dbc2:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
9000dbc4:	4b86      	ldr	r3, [pc, #536]	; (9000dde0 <tcp_receive+0x888>)
9000dbc6:	681a      	ldr	r2, [r3, #0]
9000dbc8:	687b      	ldr	r3, [r7, #4]
9000dbca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000dbcc:	1ad3      	subs	r3, r2, r3
9000dbce:	2b00      	cmp	r3, #0
9000dbd0:	f2c0 842a 	blt.w	9000e428 <tcp_receive+0xed0>
9000dbd4:	4b82      	ldr	r3, [pc, #520]	; (9000dde0 <tcp_receive+0x888>)
9000dbd6:	681a      	ldr	r2, [r3, #0]
9000dbd8:	687b      	ldr	r3, [r7, #4]
9000dbda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000dbdc:	6879      	ldr	r1, [r7, #4]
9000dbde:	8d09      	ldrh	r1, [r1, #40]	; 0x28
9000dbe0:	440b      	add	r3, r1
9000dbe2:	1ad3      	subs	r3, r2, r3
9000dbe4:	3301      	adds	r3, #1
9000dbe6:	2b00      	cmp	r3, #0
9000dbe8:	f300 841e 	bgt.w	9000e428 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
9000dbec:	687b      	ldr	r3, [r7, #4]
9000dbee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
9000dbf0:	4b7b      	ldr	r3, [pc, #492]	; (9000dde0 <tcp_receive+0x888>)
9000dbf2:	681b      	ldr	r3, [r3, #0]
9000dbf4:	429a      	cmp	r2, r3
9000dbf6:	f040 829a 	bne.w	9000e12e <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
9000dbfa:	4b7a      	ldr	r3, [pc, #488]	; (9000dde4 <tcp_receive+0x88c>)
9000dbfc:	891c      	ldrh	r4, [r3, #8]
9000dbfe:	4b79      	ldr	r3, [pc, #484]	; (9000dde4 <tcp_receive+0x88c>)
9000dc00:	68db      	ldr	r3, [r3, #12]
9000dc02:	899b      	ldrh	r3, [r3, #12]
9000dc04:	b29b      	uxth	r3, r3
9000dc06:	4618      	mov	r0, r3
9000dc08:	f7fa fc24 	bl	90008454 <lwip_htons>
9000dc0c:	4603      	mov	r3, r0
9000dc0e:	b2db      	uxtb	r3, r3
9000dc10:	f003 0303 	and.w	r3, r3, #3
9000dc14:	2b00      	cmp	r3, #0
9000dc16:	d001      	beq.n	9000dc1c <tcp_receive+0x6c4>
9000dc18:	2301      	movs	r3, #1
9000dc1a:	e000      	b.n	9000dc1e <tcp_receive+0x6c6>
9000dc1c:	2300      	movs	r3, #0
9000dc1e:	4423      	add	r3, r4
9000dc20:	b29a      	uxth	r2, r3
9000dc22:	4b71      	ldr	r3, [pc, #452]	; (9000dde8 <tcp_receive+0x890>)
9000dc24:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
9000dc26:	687b      	ldr	r3, [r7, #4]
9000dc28:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
9000dc2a:	4b6f      	ldr	r3, [pc, #444]	; (9000dde8 <tcp_receive+0x890>)
9000dc2c:	881b      	ldrh	r3, [r3, #0]
9000dc2e:	429a      	cmp	r2, r3
9000dc30:	d275      	bcs.n	9000dd1e <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
9000dc32:	4b6c      	ldr	r3, [pc, #432]	; (9000dde4 <tcp_receive+0x88c>)
9000dc34:	68db      	ldr	r3, [r3, #12]
9000dc36:	899b      	ldrh	r3, [r3, #12]
9000dc38:	b29b      	uxth	r3, r3
9000dc3a:	4618      	mov	r0, r3
9000dc3c:	f7fa fc0a 	bl	90008454 <lwip_htons>
9000dc40:	4603      	mov	r3, r0
9000dc42:	b2db      	uxtb	r3, r3
9000dc44:	f003 0301 	and.w	r3, r3, #1
9000dc48:	2b00      	cmp	r3, #0
9000dc4a:	d01f      	beq.n	9000dc8c <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
9000dc4c:	4b65      	ldr	r3, [pc, #404]	; (9000dde4 <tcp_receive+0x88c>)
9000dc4e:	68db      	ldr	r3, [r3, #12]
9000dc50:	899b      	ldrh	r3, [r3, #12]
9000dc52:	b29b      	uxth	r3, r3
9000dc54:	b21b      	sxth	r3, r3
9000dc56:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
9000dc5a:	b21c      	sxth	r4, r3
9000dc5c:	4b61      	ldr	r3, [pc, #388]	; (9000dde4 <tcp_receive+0x88c>)
9000dc5e:	68db      	ldr	r3, [r3, #12]
9000dc60:	899b      	ldrh	r3, [r3, #12]
9000dc62:	b29b      	uxth	r3, r3
9000dc64:	4618      	mov	r0, r3
9000dc66:	f7fa fbf5 	bl	90008454 <lwip_htons>
9000dc6a:	4603      	mov	r3, r0
9000dc6c:	b2db      	uxtb	r3, r3
9000dc6e:	b29b      	uxth	r3, r3
9000dc70:	f003 033e 	and.w	r3, r3, #62	; 0x3e
9000dc74:	b29b      	uxth	r3, r3
9000dc76:	4618      	mov	r0, r3
9000dc78:	f7fa fbec 	bl	90008454 <lwip_htons>
9000dc7c:	4603      	mov	r3, r0
9000dc7e:	b21b      	sxth	r3, r3
9000dc80:	4323      	orrs	r3, r4
9000dc82:	b21a      	sxth	r2, r3
9000dc84:	4b57      	ldr	r3, [pc, #348]	; (9000dde4 <tcp_receive+0x88c>)
9000dc86:	68db      	ldr	r3, [r3, #12]
9000dc88:	b292      	uxth	r2, r2
9000dc8a:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
9000dc8c:	687b      	ldr	r3, [r7, #4]
9000dc8e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
9000dc90:	4b54      	ldr	r3, [pc, #336]	; (9000dde4 <tcp_receive+0x88c>)
9000dc92:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
9000dc94:	4b53      	ldr	r3, [pc, #332]	; (9000dde4 <tcp_receive+0x88c>)
9000dc96:	68db      	ldr	r3, [r3, #12]
9000dc98:	899b      	ldrh	r3, [r3, #12]
9000dc9a:	b29b      	uxth	r3, r3
9000dc9c:	4618      	mov	r0, r3
9000dc9e:	f7fa fbd9 	bl	90008454 <lwip_htons>
9000dca2:	4603      	mov	r3, r0
9000dca4:	b2db      	uxtb	r3, r3
9000dca6:	f003 0302 	and.w	r3, r3, #2
9000dcaa:	2b00      	cmp	r3, #0
9000dcac:	d005      	beq.n	9000dcba <tcp_receive+0x762>
            inseg.len -= 1;
9000dcae:	4b4d      	ldr	r3, [pc, #308]	; (9000dde4 <tcp_receive+0x88c>)
9000dcb0:	891b      	ldrh	r3, [r3, #8]
9000dcb2:	3b01      	subs	r3, #1
9000dcb4:	b29a      	uxth	r2, r3
9000dcb6:	4b4b      	ldr	r3, [pc, #300]	; (9000dde4 <tcp_receive+0x88c>)
9000dcb8:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
9000dcba:	4b4a      	ldr	r3, [pc, #296]	; (9000dde4 <tcp_receive+0x88c>)
9000dcbc:	685b      	ldr	r3, [r3, #4]
9000dcbe:	4a49      	ldr	r2, [pc, #292]	; (9000dde4 <tcp_receive+0x88c>)
9000dcc0:	8912      	ldrh	r2, [r2, #8]
9000dcc2:	4611      	mov	r1, r2
9000dcc4:	4618      	mov	r0, r3
9000dcc6:	f7fb ff2f 	bl	90009b28 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
9000dcca:	4b46      	ldr	r3, [pc, #280]	; (9000dde4 <tcp_receive+0x88c>)
9000dccc:	891c      	ldrh	r4, [r3, #8]
9000dcce:	4b45      	ldr	r3, [pc, #276]	; (9000dde4 <tcp_receive+0x88c>)
9000dcd0:	68db      	ldr	r3, [r3, #12]
9000dcd2:	899b      	ldrh	r3, [r3, #12]
9000dcd4:	b29b      	uxth	r3, r3
9000dcd6:	4618      	mov	r0, r3
9000dcd8:	f7fa fbbc 	bl	90008454 <lwip_htons>
9000dcdc:	4603      	mov	r3, r0
9000dcde:	b2db      	uxtb	r3, r3
9000dce0:	f003 0303 	and.w	r3, r3, #3
9000dce4:	2b00      	cmp	r3, #0
9000dce6:	d001      	beq.n	9000dcec <tcp_receive+0x794>
9000dce8:	2301      	movs	r3, #1
9000dcea:	e000      	b.n	9000dcee <tcp_receive+0x796>
9000dcec:	2300      	movs	r3, #0
9000dcee:	4423      	add	r3, r4
9000dcf0:	b29a      	uxth	r2, r3
9000dcf2:	4b3d      	ldr	r3, [pc, #244]	; (9000dde8 <tcp_receive+0x890>)
9000dcf4:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
9000dcf6:	4b3c      	ldr	r3, [pc, #240]	; (9000dde8 <tcp_receive+0x890>)
9000dcf8:	881b      	ldrh	r3, [r3, #0]
9000dcfa:	461a      	mov	r2, r3
9000dcfc:	4b38      	ldr	r3, [pc, #224]	; (9000dde0 <tcp_receive+0x888>)
9000dcfe:	681b      	ldr	r3, [r3, #0]
9000dd00:	441a      	add	r2, r3
9000dd02:	687b      	ldr	r3, [r7, #4]
9000dd04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000dd06:	6879      	ldr	r1, [r7, #4]
9000dd08:	8d09      	ldrh	r1, [r1, #40]	; 0x28
9000dd0a:	440b      	add	r3, r1
9000dd0c:	429a      	cmp	r2, r3
9000dd0e:	d006      	beq.n	9000dd1e <tcp_receive+0x7c6>
9000dd10:	4b36      	ldr	r3, [pc, #216]	; (9000ddec <tcp_receive+0x894>)
9000dd12:	f240 52cb 	movw	r2, #1483	; 0x5cb
9000dd16:	4936      	ldr	r1, [pc, #216]	; (9000ddf0 <tcp_receive+0x898>)
9000dd18:	4836      	ldr	r0, [pc, #216]	; (9000ddf4 <tcp_receive+0x89c>)
9000dd1a:	f005 fc8d 	bl	90013638 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
9000dd1e:	687b      	ldr	r3, [r7, #4]
9000dd20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
9000dd22:	2b00      	cmp	r3, #0
9000dd24:	f000 80e7 	beq.w	9000def6 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
9000dd28:	4b2e      	ldr	r3, [pc, #184]	; (9000dde4 <tcp_receive+0x88c>)
9000dd2a:	68db      	ldr	r3, [r3, #12]
9000dd2c:	899b      	ldrh	r3, [r3, #12]
9000dd2e:	b29b      	uxth	r3, r3
9000dd30:	4618      	mov	r0, r3
9000dd32:	f7fa fb8f 	bl	90008454 <lwip_htons>
9000dd36:	4603      	mov	r3, r0
9000dd38:	b2db      	uxtb	r3, r3
9000dd3a:	f003 0301 	and.w	r3, r3, #1
9000dd3e:	2b00      	cmp	r3, #0
9000dd40:	d010      	beq.n	9000dd64 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
9000dd42:	e00a      	b.n	9000dd5a <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
9000dd44:	687b      	ldr	r3, [r7, #4]
9000dd46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
9000dd48:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
9000dd4a:	687b      	ldr	r3, [r7, #4]
9000dd4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
9000dd4e:	681a      	ldr	r2, [r3, #0]
9000dd50:	687b      	ldr	r3, [r7, #4]
9000dd52:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
9000dd54:	68f8      	ldr	r0, [r7, #12]
9000dd56:	f7fd fca6 	bl	9000b6a6 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
9000dd5a:	687b      	ldr	r3, [r7, #4]
9000dd5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
9000dd5e:	2b00      	cmp	r3, #0
9000dd60:	d1f0      	bne.n	9000dd44 <tcp_receive+0x7ec>
9000dd62:	e0c8      	b.n	9000def6 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
9000dd64:	687b      	ldr	r3, [r7, #4]
9000dd66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
9000dd68:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
9000dd6a:	e052      	b.n	9000de12 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
9000dd6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
9000dd6e:	68db      	ldr	r3, [r3, #12]
9000dd70:	899b      	ldrh	r3, [r3, #12]
9000dd72:	b29b      	uxth	r3, r3
9000dd74:	4618      	mov	r0, r3
9000dd76:	f7fa fb6d 	bl	90008454 <lwip_htons>
9000dd7a:	4603      	mov	r3, r0
9000dd7c:	b2db      	uxtb	r3, r3
9000dd7e:	f003 0301 	and.w	r3, r3, #1
9000dd82:	2b00      	cmp	r3, #0
9000dd84:	d03d      	beq.n	9000de02 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
9000dd86:	4b17      	ldr	r3, [pc, #92]	; (9000dde4 <tcp_receive+0x88c>)
9000dd88:	68db      	ldr	r3, [r3, #12]
9000dd8a:	899b      	ldrh	r3, [r3, #12]
9000dd8c:	b29b      	uxth	r3, r3
9000dd8e:	4618      	mov	r0, r3
9000dd90:	f7fa fb60 	bl	90008454 <lwip_htons>
9000dd94:	4603      	mov	r3, r0
9000dd96:	b2db      	uxtb	r3, r3
9000dd98:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
9000dd9c:	2b00      	cmp	r3, #0
9000dd9e:	d130      	bne.n	9000de02 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
9000dda0:	4b10      	ldr	r3, [pc, #64]	; (9000dde4 <tcp_receive+0x88c>)
9000dda2:	68db      	ldr	r3, [r3, #12]
9000dda4:	899b      	ldrh	r3, [r3, #12]
9000dda6:	b29c      	uxth	r4, r3
9000dda8:	2001      	movs	r0, #1
9000ddaa:	f7fa fb53 	bl	90008454 <lwip_htons>
9000ddae:	4603      	mov	r3, r0
9000ddb0:	461a      	mov	r2, r3
9000ddb2:	4b0c      	ldr	r3, [pc, #48]	; (9000dde4 <tcp_receive+0x88c>)
9000ddb4:	68db      	ldr	r3, [r3, #12]
9000ddb6:	4322      	orrs	r2, r4
9000ddb8:	b292      	uxth	r2, r2
9000ddba:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
9000ddbc:	4b09      	ldr	r3, [pc, #36]	; (9000dde4 <tcp_receive+0x88c>)
9000ddbe:	891c      	ldrh	r4, [r3, #8]
9000ddc0:	4b08      	ldr	r3, [pc, #32]	; (9000dde4 <tcp_receive+0x88c>)
9000ddc2:	68db      	ldr	r3, [r3, #12]
9000ddc4:	899b      	ldrh	r3, [r3, #12]
9000ddc6:	b29b      	uxth	r3, r3
9000ddc8:	4618      	mov	r0, r3
9000ddca:	f7fa fb43 	bl	90008454 <lwip_htons>
9000ddce:	4603      	mov	r3, r0
9000ddd0:	b2db      	uxtb	r3, r3
9000ddd2:	f003 0303 	and.w	r3, r3, #3
9000ddd6:	2b00      	cmp	r3, #0
9000ddd8:	d00e      	beq.n	9000ddf8 <tcp_receive+0x8a0>
9000ddda:	2301      	movs	r3, #1
9000dddc:	e00d      	b.n	9000ddfa <tcp_receive+0x8a2>
9000ddde:	bf00      	nop
9000dde0:	24011058 	.word	0x24011058
9000dde4:	24011038 	.word	0x24011038
9000dde8:	24011062 	.word	0x24011062
9000ddec:	90015ab0 	.word	0x90015ab0
9000ddf0:	90015e58 	.word	0x90015e58
9000ddf4:	90015afc 	.word	0x90015afc
9000ddf8:	2300      	movs	r3, #0
9000ddfa:	4423      	add	r3, r4
9000ddfc:	b29a      	uxth	r2, r3
9000ddfe:	4b98      	ldr	r3, [pc, #608]	; (9000e060 <tcp_receive+0xb08>)
9000de00:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
9000de02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
9000de04:	613b      	str	r3, [r7, #16]
              next = next->next;
9000de06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
9000de08:	681b      	ldr	r3, [r3, #0]
9000de0a:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
9000de0c:	6938      	ldr	r0, [r7, #16]
9000de0e:	f7fd fc4a 	bl	9000b6a6 <tcp_seg_free>
            while (next &&
9000de12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
9000de14:	2b00      	cmp	r3, #0
9000de16:	d00e      	beq.n	9000de36 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
9000de18:	4b91      	ldr	r3, [pc, #580]	; (9000e060 <tcp_receive+0xb08>)
9000de1a:	881b      	ldrh	r3, [r3, #0]
9000de1c:	461a      	mov	r2, r3
9000de1e:	4b91      	ldr	r3, [pc, #580]	; (9000e064 <tcp_receive+0xb0c>)
9000de20:	681b      	ldr	r3, [r3, #0]
9000de22:	441a      	add	r2, r3
9000de24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
9000de26:	68db      	ldr	r3, [r3, #12]
9000de28:	685b      	ldr	r3, [r3, #4]
9000de2a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
9000de2c:	8909      	ldrh	r1, [r1, #8]
9000de2e:	440b      	add	r3, r1
9000de30:	1ad3      	subs	r3, r2, r3
            while (next &&
9000de32:	2b00      	cmp	r3, #0
9000de34:	da9a      	bge.n	9000dd6c <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
9000de36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
9000de38:	2b00      	cmp	r3, #0
9000de3a:	d059      	beq.n	9000def0 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
9000de3c:	4b88      	ldr	r3, [pc, #544]	; (9000e060 <tcp_receive+0xb08>)
9000de3e:	881b      	ldrh	r3, [r3, #0]
9000de40:	461a      	mov	r2, r3
9000de42:	4b88      	ldr	r3, [pc, #544]	; (9000e064 <tcp_receive+0xb0c>)
9000de44:	681b      	ldr	r3, [r3, #0]
9000de46:	441a      	add	r2, r3
9000de48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
9000de4a:	68db      	ldr	r3, [r3, #12]
9000de4c:	685b      	ldr	r3, [r3, #4]
9000de4e:	1ad3      	subs	r3, r2, r3
            if (next &&
9000de50:	2b00      	cmp	r3, #0
9000de52:	dd4d      	ble.n	9000def0 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
9000de54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
9000de56:	68db      	ldr	r3, [r3, #12]
9000de58:	685b      	ldr	r3, [r3, #4]
9000de5a:	b29a      	uxth	r2, r3
9000de5c:	4b81      	ldr	r3, [pc, #516]	; (9000e064 <tcp_receive+0xb0c>)
9000de5e:	681b      	ldr	r3, [r3, #0]
9000de60:	b29b      	uxth	r3, r3
9000de62:	1ad3      	subs	r3, r2, r3
9000de64:	b29a      	uxth	r2, r3
9000de66:	4b80      	ldr	r3, [pc, #512]	; (9000e068 <tcp_receive+0xb10>)
9000de68:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
9000de6a:	4b7f      	ldr	r3, [pc, #508]	; (9000e068 <tcp_receive+0xb10>)
9000de6c:	68db      	ldr	r3, [r3, #12]
9000de6e:	899b      	ldrh	r3, [r3, #12]
9000de70:	b29b      	uxth	r3, r3
9000de72:	4618      	mov	r0, r3
9000de74:	f7fa faee 	bl	90008454 <lwip_htons>
9000de78:	4603      	mov	r3, r0
9000de7a:	b2db      	uxtb	r3, r3
9000de7c:	f003 0302 	and.w	r3, r3, #2
9000de80:	2b00      	cmp	r3, #0
9000de82:	d005      	beq.n	9000de90 <tcp_receive+0x938>
                inseg.len -= 1;
9000de84:	4b78      	ldr	r3, [pc, #480]	; (9000e068 <tcp_receive+0xb10>)
9000de86:	891b      	ldrh	r3, [r3, #8]
9000de88:	3b01      	subs	r3, #1
9000de8a:	b29a      	uxth	r2, r3
9000de8c:	4b76      	ldr	r3, [pc, #472]	; (9000e068 <tcp_receive+0xb10>)
9000de8e:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
9000de90:	4b75      	ldr	r3, [pc, #468]	; (9000e068 <tcp_receive+0xb10>)
9000de92:	685b      	ldr	r3, [r3, #4]
9000de94:	4a74      	ldr	r2, [pc, #464]	; (9000e068 <tcp_receive+0xb10>)
9000de96:	8912      	ldrh	r2, [r2, #8]
9000de98:	4611      	mov	r1, r2
9000de9a:	4618      	mov	r0, r3
9000de9c:	f7fb fe44 	bl	90009b28 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
9000dea0:	4b71      	ldr	r3, [pc, #452]	; (9000e068 <tcp_receive+0xb10>)
9000dea2:	891c      	ldrh	r4, [r3, #8]
9000dea4:	4b70      	ldr	r3, [pc, #448]	; (9000e068 <tcp_receive+0xb10>)
9000dea6:	68db      	ldr	r3, [r3, #12]
9000dea8:	899b      	ldrh	r3, [r3, #12]
9000deaa:	b29b      	uxth	r3, r3
9000deac:	4618      	mov	r0, r3
9000deae:	f7fa fad1 	bl	90008454 <lwip_htons>
9000deb2:	4603      	mov	r3, r0
9000deb4:	b2db      	uxtb	r3, r3
9000deb6:	f003 0303 	and.w	r3, r3, #3
9000deba:	2b00      	cmp	r3, #0
9000debc:	d001      	beq.n	9000dec2 <tcp_receive+0x96a>
9000debe:	2301      	movs	r3, #1
9000dec0:	e000      	b.n	9000dec4 <tcp_receive+0x96c>
9000dec2:	2300      	movs	r3, #0
9000dec4:	4423      	add	r3, r4
9000dec6:	b29a      	uxth	r2, r3
9000dec8:	4b65      	ldr	r3, [pc, #404]	; (9000e060 <tcp_receive+0xb08>)
9000deca:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
9000decc:	4b64      	ldr	r3, [pc, #400]	; (9000e060 <tcp_receive+0xb08>)
9000dece:	881b      	ldrh	r3, [r3, #0]
9000ded0:	461a      	mov	r2, r3
9000ded2:	4b64      	ldr	r3, [pc, #400]	; (9000e064 <tcp_receive+0xb0c>)
9000ded4:	681b      	ldr	r3, [r3, #0]
9000ded6:	441a      	add	r2, r3
9000ded8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
9000deda:	68db      	ldr	r3, [r3, #12]
9000dedc:	685b      	ldr	r3, [r3, #4]
9000dede:	429a      	cmp	r2, r3
9000dee0:	d006      	beq.n	9000def0 <tcp_receive+0x998>
9000dee2:	4b62      	ldr	r3, [pc, #392]	; (9000e06c <tcp_receive+0xb14>)
9000dee4:	f240 52fc 	movw	r2, #1532	; 0x5fc
9000dee8:	4961      	ldr	r1, [pc, #388]	; (9000e070 <tcp_receive+0xb18>)
9000deea:	4862      	ldr	r0, [pc, #392]	; (9000e074 <tcp_receive+0xb1c>)
9000deec:	f005 fba4 	bl	90013638 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
9000def0:	687b      	ldr	r3, [r7, #4]
9000def2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
9000def4:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
9000def6:	4b5a      	ldr	r3, [pc, #360]	; (9000e060 <tcp_receive+0xb08>)
9000def8:	881b      	ldrh	r3, [r3, #0]
9000defa:	461a      	mov	r2, r3
9000defc:	4b59      	ldr	r3, [pc, #356]	; (9000e064 <tcp_receive+0xb0c>)
9000defe:	681b      	ldr	r3, [r3, #0]
9000df00:	441a      	add	r2, r3
9000df02:	687b      	ldr	r3, [r7, #4]
9000df04:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
9000df06:	687b      	ldr	r3, [r7, #4]
9000df08:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
9000df0a:	4b55      	ldr	r3, [pc, #340]	; (9000e060 <tcp_receive+0xb08>)
9000df0c:	881b      	ldrh	r3, [r3, #0]
9000df0e:	429a      	cmp	r2, r3
9000df10:	d206      	bcs.n	9000df20 <tcp_receive+0x9c8>
9000df12:	4b56      	ldr	r3, [pc, #344]	; (9000e06c <tcp_receive+0xb14>)
9000df14:	f240 6207 	movw	r2, #1543	; 0x607
9000df18:	4957      	ldr	r1, [pc, #348]	; (9000e078 <tcp_receive+0xb20>)
9000df1a:	4856      	ldr	r0, [pc, #344]	; (9000e074 <tcp_receive+0xb1c>)
9000df1c:	f005 fb8c 	bl	90013638 <iprintf>
        pcb->rcv_wnd -= tcplen;
9000df20:	687b      	ldr	r3, [r7, #4]
9000df22:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
9000df24:	4b4e      	ldr	r3, [pc, #312]	; (9000e060 <tcp_receive+0xb08>)
9000df26:	881b      	ldrh	r3, [r3, #0]
9000df28:	1ad3      	subs	r3, r2, r3
9000df2a:	b29a      	uxth	r2, r3
9000df2c:	687b      	ldr	r3, [r7, #4]
9000df2e:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
9000df30:	6878      	ldr	r0, [r7, #4]
9000df32:	f7fc fe93 	bl	9000ac5c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
9000df36:	4b4c      	ldr	r3, [pc, #304]	; (9000e068 <tcp_receive+0xb10>)
9000df38:	685b      	ldr	r3, [r3, #4]
9000df3a:	891b      	ldrh	r3, [r3, #8]
9000df3c:	2b00      	cmp	r3, #0
9000df3e:	d006      	beq.n	9000df4e <tcp_receive+0x9f6>
          recv_data = inseg.p;
9000df40:	4b49      	ldr	r3, [pc, #292]	; (9000e068 <tcp_receive+0xb10>)
9000df42:	685b      	ldr	r3, [r3, #4]
9000df44:	4a4d      	ldr	r2, [pc, #308]	; (9000e07c <tcp_receive+0xb24>)
9000df46:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
9000df48:	4b47      	ldr	r3, [pc, #284]	; (9000e068 <tcp_receive+0xb10>)
9000df4a:	2200      	movs	r2, #0
9000df4c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
9000df4e:	4b46      	ldr	r3, [pc, #280]	; (9000e068 <tcp_receive+0xb10>)
9000df50:	68db      	ldr	r3, [r3, #12]
9000df52:	899b      	ldrh	r3, [r3, #12]
9000df54:	b29b      	uxth	r3, r3
9000df56:	4618      	mov	r0, r3
9000df58:	f7fa fa7c 	bl	90008454 <lwip_htons>
9000df5c:	4603      	mov	r3, r0
9000df5e:	b2db      	uxtb	r3, r3
9000df60:	f003 0301 	and.w	r3, r3, #1
9000df64:	2b00      	cmp	r3, #0
9000df66:	f000 80b8 	beq.w	9000e0da <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
9000df6a:	4b45      	ldr	r3, [pc, #276]	; (9000e080 <tcp_receive+0xb28>)
9000df6c:	781b      	ldrb	r3, [r3, #0]
9000df6e:	f043 0320 	orr.w	r3, r3, #32
9000df72:	b2da      	uxtb	r2, r3
9000df74:	4b42      	ldr	r3, [pc, #264]	; (9000e080 <tcp_receive+0xb28>)
9000df76:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
9000df78:	e0af      	b.n	9000e0da <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
9000df7a:	687b      	ldr	r3, [r7, #4]
9000df7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
9000df7e:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
9000df80:	687b      	ldr	r3, [r7, #4]
9000df82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
9000df84:	68db      	ldr	r3, [r3, #12]
9000df86:	685b      	ldr	r3, [r3, #4]
9000df88:	4a36      	ldr	r2, [pc, #216]	; (9000e064 <tcp_receive+0xb0c>)
9000df8a:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
9000df8c:	68bb      	ldr	r3, [r7, #8]
9000df8e:	891b      	ldrh	r3, [r3, #8]
9000df90:	461c      	mov	r4, r3
9000df92:	68bb      	ldr	r3, [r7, #8]
9000df94:	68db      	ldr	r3, [r3, #12]
9000df96:	899b      	ldrh	r3, [r3, #12]
9000df98:	b29b      	uxth	r3, r3
9000df9a:	4618      	mov	r0, r3
9000df9c:	f7fa fa5a 	bl	90008454 <lwip_htons>
9000dfa0:	4603      	mov	r3, r0
9000dfa2:	b2db      	uxtb	r3, r3
9000dfa4:	f003 0303 	and.w	r3, r3, #3
9000dfa8:	2b00      	cmp	r3, #0
9000dfaa:	d001      	beq.n	9000dfb0 <tcp_receive+0xa58>
9000dfac:	2301      	movs	r3, #1
9000dfae:	e000      	b.n	9000dfb2 <tcp_receive+0xa5a>
9000dfb0:	2300      	movs	r3, #0
9000dfb2:	191a      	adds	r2, r3, r4
9000dfb4:	687b      	ldr	r3, [r7, #4]
9000dfb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000dfb8:	441a      	add	r2, r3
9000dfba:	687b      	ldr	r3, [r7, #4]
9000dfbc:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
9000dfbe:	687b      	ldr	r3, [r7, #4]
9000dfc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
9000dfc2:	461c      	mov	r4, r3
9000dfc4:	68bb      	ldr	r3, [r7, #8]
9000dfc6:	891b      	ldrh	r3, [r3, #8]
9000dfc8:	461d      	mov	r5, r3
9000dfca:	68bb      	ldr	r3, [r7, #8]
9000dfcc:	68db      	ldr	r3, [r3, #12]
9000dfce:	899b      	ldrh	r3, [r3, #12]
9000dfd0:	b29b      	uxth	r3, r3
9000dfd2:	4618      	mov	r0, r3
9000dfd4:	f7fa fa3e 	bl	90008454 <lwip_htons>
9000dfd8:	4603      	mov	r3, r0
9000dfda:	b2db      	uxtb	r3, r3
9000dfdc:	f003 0303 	and.w	r3, r3, #3
9000dfe0:	2b00      	cmp	r3, #0
9000dfe2:	d001      	beq.n	9000dfe8 <tcp_receive+0xa90>
9000dfe4:	2301      	movs	r3, #1
9000dfe6:	e000      	b.n	9000dfea <tcp_receive+0xa92>
9000dfe8:	2300      	movs	r3, #0
9000dfea:	442b      	add	r3, r5
9000dfec:	429c      	cmp	r4, r3
9000dfee:	d206      	bcs.n	9000dffe <tcp_receive+0xaa6>
9000dff0:	4b1e      	ldr	r3, [pc, #120]	; (9000e06c <tcp_receive+0xb14>)
9000dff2:	f240 622b 	movw	r2, #1579	; 0x62b
9000dff6:	4923      	ldr	r1, [pc, #140]	; (9000e084 <tcp_receive+0xb2c>)
9000dff8:	481e      	ldr	r0, [pc, #120]	; (9000e074 <tcp_receive+0xb1c>)
9000dffa:	f005 fb1d 	bl	90013638 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
9000dffe:	68bb      	ldr	r3, [r7, #8]
9000e000:	891b      	ldrh	r3, [r3, #8]
9000e002:	461c      	mov	r4, r3
9000e004:	68bb      	ldr	r3, [r7, #8]
9000e006:	68db      	ldr	r3, [r3, #12]
9000e008:	899b      	ldrh	r3, [r3, #12]
9000e00a:	b29b      	uxth	r3, r3
9000e00c:	4618      	mov	r0, r3
9000e00e:	f7fa fa21 	bl	90008454 <lwip_htons>
9000e012:	4603      	mov	r3, r0
9000e014:	b2db      	uxtb	r3, r3
9000e016:	f003 0303 	and.w	r3, r3, #3
9000e01a:	2b00      	cmp	r3, #0
9000e01c:	d001      	beq.n	9000e022 <tcp_receive+0xaca>
9000e01e:	2301      	movs	r3, #1
9000e020:	e000      	b.n	9000e024 <tcp_receive+0xacc>
9000e022:	2300      	movs	r3, #0
9000e024:	1919      	adds	r1, r3, r4
9000e026:	687b      	ldr	r3, [r7, #4]
9000e028:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
9000e02a:	b28b      	uxth	r3, r1
9000e02c:	1ad3      	subs	r3, r2, r3
9000e02e:	b29a      	uxth	r2, r3
9000e030:	687b      	ldr	r3, [r7, #4]
9000e032:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
9000e034:	6878      	ldr	r0, [r7, #4]
9000e036:	f7fc fe11 	bl	9000ac5c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
9000e03a:	68bb      	ldr	r3, [r7, #8]
9000e03c:	685b      	ldr	r3, [r3, #4]
9000e03e:	891b      	ldrh	r3, [r3, #8]
9000e040:	2b00      	cmp	r3, #0
9000e042:	d028      	beq.n	9000e096 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
9000e044:	4b0d      	ldr	r3, [pc, #52]	; (9000e07c <tcp_receive+0xb24>)
9000e046:	681b      	ldr	r3, [r3, #0]
9000e048:	2b00      	cmp	r3, #0
9000e04a:	d01d      	beq.n	9000e088 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
9000e04c:	4b0b      	ldr	r3, [pc, #44]	; (9000e07c <tcp_receive+0xb24>)
9000e04e:	681a      	ldr	r2, [r3, #0]
9000e050:	68bb      	ldr	r3, [r7, #8]
9000e052:	685b      	ldr	r3, [r3, #4]
9000e054:	4619      	mov	r1, r3
9000e056:	4610      	mov	r0, r2
9000e058:	f7fb ffba 	bl	90009fd0 <pbuf_cat>
9000e05c:	e018      	b.n	9000e090 <tcp_receive+0xb38>
9000e05e:	bf00      	nop
9000e060:	24011062 	.word	0x24011062
9000e064:	24011058 	.word	0x24011058
9000e068:	24011038 	.word	0x24011038
9000e06c:	90015ab0 	.word	0x90015ab0
9000e070:	90015e90 	.word	0x90015e90
9000e074:	90015afc 	.word	0x90015afc
9000e078:	90015ecc 	.word	0x90015ecc
9000e07c:	24011068 	.word	0x24011068
9000e080:	24011065 	.word	0x24011065
9000e084:	90015eec 	.word	0x90015eec
            } else {
              recv_data = cseg->p;
9000e088:	68bb      	ldr	r3, [r7, #8]
9000e08a:	685b      	ldr	r3, [r3, #4]
9000e08c:	4a70      	ldr	r2, [pc, #448]	; (9000e250 <tcp_receive+0xcf8>)
9000e08e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
9000e090:	68bb      	ldr	r3, [r7, #8]
9000e092:	2200      	movs	r2, #0
9000e094:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
9000e096:	68bb      	ldr	r3, [r7, #8]
9000e098:	68db      	ldr	r3, [r3, #12]
9000e09a:	899b      	ldrh	r3, [r3, #12]
9000e09c:	b29b      	uxth	r3, r3
9000e09e:	4618      	mov	r0, r3
9000e0a0:	f7fa f9d8 	bl	90008454 <lwip_htons>
9000e0a4:	4603      	mov	r3, r0
9000e0a6:	b2db      	uxtb	r3, r3
9000e0a8:	f003 0301 	and.w	r3, r3, #1
9000e0ac:	2b00      	cmp	r3, #0
9000e0ae:	d00d      	beq.n	9000e0cc <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
9000e0b0:	4b68      	ldr	r3, [pc, #416]	; (9000e254 <tcp_receive+0xcfc>)
9000e0b2:	781b      	ldrb	r3, [r3, #0]
9000e0b4:	f043 0320 	orr.w	r3, r3, #32
9000e0b8:	b2da      	uxtb	r2, r3
9000e0ba:	4b66      	ldr	r3, [pc, #408]	; (9000e254 <tcp_receive+0xcfc>)
9000e0bc:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
9000e0be:	687b      	ldr	r3, [r7, #4]
9000e0c0:	7d1b      	ldrb	r3, [r3, #20]
9000e0c2:	2b04      	cmp	r3, #4
9000e0c4:	d102      	bne.n	9000e0cc <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
9000e0c6:	687b      	ldr	r3, [r7, #4]
9000e0c8:	2207      	movs	r2, #7
9000e0ca:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
9000e0cc:	68bb      	ldr	r3, [r7, #8]
9000e0ce:	681a      	ldr	r2, [r3, #0]
9000e0d0:	687b      	ldr	r3, [r7, #4]
9000e0d2:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
9000e0d4:	68b8      	ldr	r0, [r7, #8]
9000e0d6:	f7fd fae6 	bl	9000b6a6 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
9000e0da:	687b      	ldr	r3, [r7, #4]
9000e0dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
9000e0de:	2b00      	cmp	r3, #0
9000e0e0:	d008      	beq.n	9000e0f4 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
9000e0e2:	687b      	ldr	r3, [r7, #4]
9000e0e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
9000e0e6:	68db      	ldr	r3, [r3, #12]
9000e0e8:	685a      	ldr	r2, [r3, #4]
9000e0ea:	687b      	ldr	r3, [r7, #4]
9000e0ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
9000e0ee:	429a      	cmp	r2, r3
9000e0f0:	f43f af43 	beq.w	9000df7a <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
9000e0f4:	687b      	ldr	r3, [r7, #4]
9000e0f6:	8b5b      	ldrh	r3, [r3, #26]
9000e0f8:	f003 0301 	and.w	r3, r3, #1
9000e0fc:	2b00      	cmp	r3, #0
9000e0fe:	d00e      	beq.n	9000e11e <tcp_receive+0xbc6>
9000e100:	687b      	ldr	r3, [r7, #4]
9000e102:	8b5b      	ldrh	r3, [r3, #26]
9000e104:	f023 0301 	bic.w	r3, r3, #1
9000e108:	b29a      	uxth	r2, r3
9000e10a:	687b      	ldr	r3, [r7, #4]
9000e10c:	835a      	strh	r2, [r3, #26]
9000e10e:	687b      	ldr	r3, [r7, #4]
9000e110:	8b5b      	ldrh	r3, [r3, #26]
9000e112:	f043 0302 	orr.w	r3, r3, #2
9000e116:	b29a      	uxth	r2, r3
9000e118:	687b      	ldr	r3, [r7, #4]
9000e11a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
9000e11c:	e188      	b.n	9000e430 <tcp_receive+0xed8>
        tcp_ack(pcb);
9000e11e:	687b      	ldr	r3, [r7, #4]
9000e120:	8b5b      	ldrh	r3, [r3, #26]
9000e122:	f043 0301 	orr.w	r3, r3, #1
9000e126:	b29a      	uxth	r2, r3
9000e128:	687b      	ldr	r3, [r7, #4]
9000e12a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
9000e12c:	e180      	b.n	9000e430 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
9000e12e:	687b      	ldr	r3, [r7, #4]
9000e130:	6f5b      	ldr	r3, [r3, #116]	; 0x74
9000e132:	2b00      	cmp	r3, #0
9000e134:	d106      	bne.n	9000e144 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
9000e136:	4848      	ldr	r0, [pc, #288]	; (9000e258 <tcp_receive+0xd00>)
9000e138:	f7fd faec 	bl	9000b714 <tcp_seg_copy>
9000e13c:	4602      	mov	r2, r0
9000e13e:	687b      	ldr	r3, [r7, #4]
9000e140:	675a      	str	r2, [r3, #116]	; 0x74
9000e142:	e16d      	b.n	9000e420 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
9000e144:	2300      	movs	r3, #0
9000e146:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
9000e148:	687b      	ldr	r3, [r7, #4]
9000e14a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
9000e14c:	63bb      	str	r3, [r7, #56]	; 0x38
9000e14e:	e157      	b.n	9000e400 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
9000e150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000e152:	68db      	ldr	r3, [r3, #12]
9000e154:	685a      	ldr	r2, [r3, #4]
9000e156:	4b41      	ldr	r3, [pc, #260]	; (9000e25c <tcp_receive+0xd04>)
9000e158:	681b      	ldr	r3, [r3, #0]
9000e15a:	429a      	cmp	r2, r3
9000e15c:	d11d      	bne.n	9000e19a <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
9000e15e:	4b3e      	ldr	r3, [pc, #248]	; (9000e258 <tcp_receive+0xd00>)
9000e160:	891a      	ldrh	r2, [r3, #8]
9000e162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000e164:	891b      	ldrh	r3, [r3, #8]
9000e166:	429a      	cmp	r2, r3
9000e168:	f240 814f 	bls.w	9000e40a <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
9000e16c:	483a      	ldr	r0, [pc, #232]	; (9000e258 <tcp_receive+0xd00>)
9000e16e:	f7fd fad1 	bl	9000b714 <tcp_seg_copy>
9000e172:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
9000e174:	697b      	ldr	r3, [r7, #20]
9000e176:	2b00      	cmp	r3, #0
9000e178:	f000 8149 	beq.w	9000e40e <tcp_receive+0xeb6>
                  if (prev != NULL) {
9000e17c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
9000e17e:	2b00      	cmp	r3, #0
9000e180:	d003      	beq.n	9000e18a <tcp_receive+0xc32>
                    prev->next = cseg;
9000e182:	6b7b      	ldr	r3, [r7, #52]	; 0x34
9000e184:	697a      	ldr	r2, [r7, #20]
9000e186:	601a      	str	r2, [r3, #0]
9000e188:	e002      	b.n	9000e190 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
9000e18a:	687b      	ldr	r3, [r7, #4]
9000e18c:	697a      	ldr	r2, [r7, #20]
9000e18e:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
9000e190:	6bb9      	ldr	r1, [r7, #56]	; 0x38
9000e192:	6978      	ldr	r0, [r7, #20]
9000e194:	f7ff f8dc 	bl	9000d350 <tcp_oos_insert_segment>
                }
                break;
9000e198:	e139      	b.n	9000e40e <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
9000e19a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
9000e19c:	2b00      	cmp	r3, #0
9000e19e:	d117      	bne.n	9000e1d0 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
9000e1a0:	4b2e      	ldr	r3, [pc, #184]	; (9000e25c <tcp_receive+0xd04>)
9000e1a2:	681a      	ldr	r2, [r3, #0]
9000e1a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000e1a6:	68db      	ldr	r3, [r3, #12]
9000e1a8:	685b      	ldr	r3, [r3, #4]
9000e1aa:	1ad3      	subs	r3, r2, r3
9000e1ac:	2b00      	cmp	r3, #0
9000e1ae:	da57      	bge.n	9000e260 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
9000e1b0:	4829      	ldr	r0, [pc, #164]	; (9000e258 <tcp_receive+0xd00>)
9000e1b2:	f7fd faaf 	bl	9000b714 <tcp_seg_copy>
9000e1b6:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
9000e1b8:	69bb      	ldr	r3, [r7, #24]
9000e1ba:	2b00      	cmp	r3, #0
9000e1bc:	f000 8129 	beq.w	9000e412 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
9000e1c0:	687b      	ldr	r3, [r7, #4]
9000e1c2:	69ba      	ldr	r2, [r7, #24]
9000e1c4:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
9000e1c6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
9000e1c8:	69b8      	ldr	r0, [r7, #24]
9000e1ca:	f7ff f8c1 	bl	9000d350 <tcp_oos_insert_segment>
                  }
                  break;
9000e1ce:	e120      	b.n	9000e412 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
9000e1d0:	4b22      	ldr	r3, [pc, #136]	; (9000e25c <tcp_receive+0xd04>)
9000e1d2:	681a      	ldr	r2, [r3, #0]
9000e1d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
9000e1d6:	68db      	ldr	r3, [r3, #12]
9000e1d8:	685b      	ldr	r3, [r3, #4]
9000e1da:	1ad3      	subs	r3, r2, r3
9000e1dc:	3b01      	subs	r3, #1
9000e1de:	2b00      	cmp	r3, #0
9000e1e0:	db3e      	blt.n	9000e260 <tcp_receive+0xd08>
9000e1e2:	4b1e      	ldr	r3, [pc, #120]	; (9000e25c <tcp_receive+0xd04>)
9000e1e4:	681a      	ldr	r2, [r3, #0]
9000e1e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000e1e8:	68db      	ldr	r3, [r3, #12]
9000e1ea:	685b      	ldr	r3, [r3, #4]
9000e1ec:	1ad3      	subs	r3, r2, r3
9000e1ee:	3301      	adds	r3, #1
9000e1f0:	2b00      	cmp	r3, #0
9000e1f2:	dc35      	bgt.n	9000e260 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
9000e1f4:	4818      	ldr	r0, [pc, #96]	; (9000e258 <tcp_receive+0xd00>)
9000e1f6:	f7fd fa8d 	bl	9000b714 <tcp_seg_copy>
9000e1fa:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
9000e1fc:	69fb      	ldr	r3, [r7, #28]
9000e1fe:	2b00      	cmp	r3, #0
9000e200:	f000 8109 	beq.w	9000e416 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
9000e204:	6b7b      	ldr	r3, [r7, #52]	; 0x34
9000e206:	68db      	ldr	r3, [r3, #12]
9000e208:	685b      	ldr	r3, [r3, #4]
9000e20a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
9000e20c:	8912      	ldrh	r2, [r2, #8]
9000e20e:	441a      	add	r2, r3
9000e210:	4b12      	ldr	r3, [pc, #72]	; (9000e25c <tcp_receive+0xd04>)
9000e212:	681b      	ldr	r3, [r3, #0]
9000e214:	1ad3      	subs	r3, r2, r3
9000e216:	2b00      	cmp	r3, #0
9000e218:	dd12      	ble.n	9000e240 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
9000e21a:	4b10      	ldr	r3, [pc, #64]	; (9000e25c <tcp_receive+0xd04>)
9000e21c:	681b      	ldr	r3, [r3, #0]
9000e21e:	b29a      	uxth	r2, r3
9000e220:	6b7b      	ldr	r3, [r7, #52]	; 0x34
9000e222:	68db      	ldr	r3, [r3, #12]
9000e224:	685b      	ldr	r3, [r3, #4]
9000e226:	b29b      	uxth	r3, r3
9000e228:	1ad3      	subs	r3, r2, r3
9000e22a:	b29a      	uxth	r2, r3
9000e22c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
9000e22e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
9000e230:	6b7b      	ldr	r3, [r7, #52]	; 0x34
9000e232:	685a      	ldr	r2, [r3, #4]
9000e234:	6b7b      	ldr	r3, [r7, #52]	; 0x34
9000e236:	891b      	ldrh	r3, [r3, #8]
9000e238:	4619      	mov	r1, r3
9000e23a:	4610      	mov	r0, r2
9000e23c:	f7fb fc74 	bl	90009b28 <pbuf_realloc>
                    }
                    prev->next = cseg;
9000e240:	6b7b      	ldr	r3, [r7, #52]	; 0x34
9000e242:	69fa      	ldr	r2, [r7, #28]
9000e244:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
9000e246:	6bb9      	ldr	r1, [r7, #56]	; 0x38
9000e248:	69f8      	ldr	r0, [r7, #28]
9000e24a:	f7ff f881 	bl	9000d350 <tcp_oos_insert_segment>
                  }
                  break;
9000e24e:	e0e2      	b.n	9000e416 <tcp_receive+0xebe>
9000e250:	24011068 	.word	0x24011068
9000e254:	24011065 	.word	0x24011065
9000e258:	24011038 	.word	0x24011038
9000e25c:	24011058 	.word	0x24011058
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
9000e260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000e262:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
9000e264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000e266:	681b      	ldr	r3, [r3, #0]
9000e268:	2b00      	cmp	r3, #0
9000e26a:	f040 80c6 	bne.w	9000e3fa <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
9000e26e:	4b80      	ldr	r3, [pc, #512]	; (9000e470 <tcp_receive+0xf18>)
9000e270:	681a      	ldr	r2, [r3, #0]
9000e272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000e274:	68db      	ldr	r3, [r3, #12]
9000e276:	685b      	ldr	r3, [r3, #4]
9000e278:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
9000e27a:	2b00      	cmp	r3, #0
9000e27c:	f340 80bd 	ble.w	9000e3fa <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
9000e280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000e282:	68db      	ldr	r3, [r3, #12]
9000e284:	899b      	ldrh	r3, [r3, #12]
9000e286:	b29b      	uxth	r3, r3
9000e288:	4618      	mov	r0, r3
9000e28a:	f7fa f8e3 	bl	90008454 <lwip_htons>
9000e28e:	4603      	mov	r3, r0
9000e290:	b2db      	uxtb	r3, r3
9000e292:	f003 0301 	and.w	r3, r3, #1
9000e296:	2b00      	cmp	r3, #0
9000e298:	f040 80bf 	bne.w	9000e41a <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
9000e29c:	4875      	ldr	r0, [pc, #468]	; (9000e474 <tcp_receive+0xf1c>)
9000e29e:	f7fd fa39 	bl	9000b714 <tcp_seg_copy>
9000e2a2:	4602      	mov	r2, r0
9000e2a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000e2a6:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
9000e2a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000e2aa:	681b      	ldr	r3, [r3, #0]
9000e2ac:	2b00      	cmp	r3, #0
9000e2ae:	f000 80b6 	beq.w	9000e41e <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
9000e2b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000e2b4:	68db      	ldr	r3, [r3, #12]
9000e2b6:	685b      	ldr	r3, [r3, #4]
9000e2b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
9000e2ba:	8912      	ldrh	r2, [r2, #8]
9000e2bc:	441a      	add	r2, r3
9000e2be:	4b6c      	ldr	r3, [pc, #432]	; (9000e470 <tcp_receive+0xf18>)
9000e2c0:	681b      	ldr	r3, [r3, #0]
9000e2c2:	1ad3      	subs	r3, r2, r3
9000e2c4:	2b00      	cmp	r3, #0
9000e2c6:	dd12      	ble.n	9000e2ee <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
9000e2c8:	4b69      	ldr	r3, [pc, #420]	; (9000e470 <tcp_receive+0xf18>)
9000e2ca:	681b      	ldr	r3, [r3, #0]
9000e2cc:	b29a      	uxth	r2, r3
9000e2ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000e2d0:	68db      	ldr	r3, [r3, #12]
9000e2d2:	685b      	ldr	r3, [r3, #4]
9000e2d4:	b29b      	uxth	r3, r3
9000e2d6:	1ad3      	subs	r3, r2, r3
9000e2d8:	b29a      	uxth	r2, r3
9000e2da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000e2dc:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
9000e2de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000e2e0:	685a      	ldr	r2, [r3, #4]
9000e2e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000e2e4:	891b      	ldrh	r3, [r3, #8]
9000e2e6:	4619      	mov	r1, r3
9000e2e8:	4610      	mov	r0, r2
9000e2ea:	f7fb fc1d 	bl	90009b28 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
9000e2ee:	4b62      	ldr	r3, [pc, #392]	; (9000e478 <tcp_receive+0xf20>)
9000e2f0:	881b      	ldrh	r3, [r3, #0]
9000e2f2:	461a      	mov	r2, r3
9000e2f4:	4b5e      	ldr	r3, [pc, #376]	; (9000e470 <tcp_receive+0xf18>)
9000e2f6:	681b      	ldr	r3, [r3, #0]
9000e2f8:	441a      	add	r2, r3
9000e2fa:	687b      	ldr	r3, [r7, #4]
9000e2fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000e2fe:	6879      	ldr	r1, [r7, #4]
9000e300:	8d09      	ldrh	r1, [r1, #40]	; 0x28
9000e302:	440b      	add	r3, r1
9000e304:	1ad3      	subs	r3, r2, r3
9000e306:	2b00      	cmp	r3, #0
9000e308:	f340 8089 	ble.w	9000e41e <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
9000e30c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000e30e:	681b      	ldr	r3, [r3, #0]
9000e310:	68db      	ldr	r3, [r3, #12]
9000e312:	899b      	ldrh	r3, [r3, #12]
9000e314:	b29b      	uxth	r3, r3
9000e316:	4618      	mov	r0, r3
9000e318:	f7fa f89c 	bl	90008454 <lwip_htons>
9000e31c:	4603      	mov	r3, r0
9000e31e:	b2db      	uxtb	r3, r3
9000e320:	f003 0301 	and.w	r3, r3, #1
9000e324:	2b00      	cmp	r3, #0
9000e326:	d022      	beq.n	9000e36e <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
9000e328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000e32a:	681b      	ldr	r3, [r3, #0]
9000e32c:	68db      	ldr	r3, [r3, #12]
9000e32e:	899b      	ldrh	r3, [r3, #12]
9000e330:	b29b      	uxth	r3, r3
9000e332:	b21b      	sxth	r3, r3
9000e334:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
9000e338:	b21c      	sxth	r4, r3
9000e33a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000e33c:	681b      	ldr	r3, [r3, #0]
9000e33e:	68db      	ldr	r3, [r3, #12]
9000e340:	899b      	ldrh	r3, [r3, #12]
9000e342:	b29b      	uxth	r3, r3
9000e344:	4618      	mov	r0, r3
9000e346:	f7fa f885 	bl	90008454 <lwip_htons>
9000e34a:	4603      	mov	r3, r0
9000e34c:	b2db      	uxtb	r3, r3
9000e34e:	b29b      	uxth	r3, r3
9000e350:	f003 033e 	and.w	r3, r3, #62	; 0x3e
9000e354:	b29b      	uxth	r3, r3
9000e356:	4618      	mov	r0, r3
9000e358:	f7fa f87c 	bl	90008454 <lwip_htons>
9000e35c:	4603      	mov	r3, r0
9000e35e:	b21b      	sxth	r3, r3
9000e360:	4323      	orrs	r3, r4
9000e362:	b21a      	sxth	r2, r3
9000e364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000e366:	681b      	ldr	r3, [r3, #0]
9000e368:	68db      	ldr	r3, [r3, #12]
9000e36a:	b292      	uxth	r2, r2
9000e36c:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
9000e36e:	687b      	ldr	r3, [r7, #4]
9000e370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000e372:	b29a      	uxth	r2, r3
9000e374:	687b      	ldr	r3, [r7, #4]
9000e376:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
9000e378:	4413      	add	r3, r2
9000e37a:	b299      	uxth	r1, r3
9000e37c:	4b3c      	ldr	r3, [pc, #240]	; (9000e470 <tcp_receive+0xf18>)
9000e37e:	681b      	ldr	r3, [r3, #0]
9000e380:	b29a      	uxth	r2, r3
9000e382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000e384:	681b      	ldr	r3, [r3, #0]
9000e386:	1a8a      	subs	r2, r1, r2
9000e388:	b292      	uxth	r2, r2
9000e38a:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
9000e38c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000e38e:	681b      	ldr	r3, [r3, #0]
9000e390:	685a      	ldr	r2, [r3, #4]
9000e392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000e394:	681b      	ldr	r3, [r3, #0]
9000e396:	891b      	ldrh	r3, [r3, #8]
9000e398:	4619      	mov	r1, r3
9000e39a:	4610      	mov	r0, r2
9000e39c:	f7fb fbc4 	bl	90009b28 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
9000e3a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000e3a2:	681b      	ldr	r3, [r3, #0]
9000e3a4:	891c      	ldrh	r4, [r3, #8]
9000e3a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000e3a8:	681b      	ldr	r3, [r3, #0]
9000e3aa:	68db      	ldr	r3, [r3, #12]
9000e3ac:	899b      	ldrh	r3, [r3, #12]
9000e3ae:	b29b      	uxth	r3, r3
9000e3b0:	4618      	mov	r0, r3
9000e3b2:	f7fa f84f 	bl	90008454 <lwip_htons>
9000e3b6:	4603      	mov	r3, r0
9000e3b8:	b2db      	uxtb	r3, r3
9000e3ba:	f003 0303 	and.w	r3, r3, #3
9000e3be:	2b00      	cmp	r3, #0
9000e3c0:	d001      	beq.n	9000e3c6 <tcp_receive+0xe6e>
9000e3c2:	2301      	movs	r3, #1
9000e3c4:	e000      	b.n	9000e3c8 <tcp_receive+0xe70>
9000e3c6:	2300      	movs	r3, #0
9000e3c8:	4423      	add	r3, r4
9000e3ca:	b29a      	uxth	r2, r3
9000e3cc:	4b2a      	ldr	r3, [pc, #168]	; (9000e478 <tcp_receive+0xf20>)
9000e3ce:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
9000e3d0:	4b29      	ldr	r3, [pc, #164]	; (9000e478 <tcp_receive+0xf20>)
9000e3d2:	881b      	ldrh	r3, [r3, #0]
9000e3d4:	461a      	mov	r2, r3
9000e3d6:	4b26      	ldr	r3, [pc, #152]	; (9000e470 <tcp_receive+0xf18>)
9000e3d8:	681b      	ldr	r3, [r3, #0]
9000e3da:	441a      	add	r2, r3
9000e3dc:	687b      	ldr	r3, [r7, #4]
9000e3de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000e3e0:	6879      	ldr	r1, [r7, #4]
9000e3e2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
9000e3e4:	440b      	add	r3, r1
9000e3e6:	429a      	cmp	r2, r3
9000e3e8:	d019      	beq.n	9000e41e <tcp_receive+0xec6>
9000e3ea:	4b24      	ldr	r3, [pc, #144]	; (9000e47c <tcp_receive+0xf24>)
9000e3ec:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
9000e3f0:	4923      	ldr	r1, [pc, #140]	; (9000e480 <tcp_receive+0xf28>)
9000e3f2:	4824      	ldr	r0, [pc, #144]	; (9000e484 <tcp_receive+0xf2c>)
9000e3f4:	f005 f920 	bl	90013638 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
9000e3f8:	e011      	b.n	9000e41e <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
9000e3fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000e3fc:	681b      	ldr	r3, [r3, #0]
9000e3fe:	63bb      	str	r3, [r7, #56]	; 0x38
9000e400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000e402:	2b00      	cmp	r3, #0
9000e404:	f47f aea4 	bne.w	9000e150 <tcp_receive+0xbf8>
9000e408:	e00a      	b.n	9000e420 <tcp_receive+0xec8>
                break;
9000e40a:	bf00      	nop
9000e40c:	e008      	b.n	9000e420 <tcp_receive+0xec8>
                break;
9000e40e:	bf00      	nop
9000e410:	e006      	b.n	9000e420 <tcp_receive+0xec8>
                  break;
9000e412:	bf00      	nop
9000e414:	e004      	b.n	9000e420 <tcp_receive+0xec8>
                  break;
9000e416:	bf00      	nop
9000e418:	e002      	b.n	9000e420 <tcp_receive+0xec8>
                  break;
9000e41a:	bf00      	nop
9000e41c:	e000      	b.n	9000e420 <tcp_receive+0xec8>
                break;
9000e41e:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
9000e420:	6878      	ldr	r0, [r7, #4]
9000e422:	f001 fe8b 	bl	9001013c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
9000e426:	e003      	b.n	9000e430 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
9000e428:	6878      	ldr	r0, [r7, #4]
9000e42a:	f001 fe87 	bl	9001013c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
9000e42e:	e01a      	b.n	9000e466 <tcp_receive+0xf0e>
9000e430:	e019      	b.n	9000e466 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
9000e432:	4b0f      	ldr	r3, [pc, #60]	; (9000e470 <tcp_receive+0xf18>)
9000e434:	681a      	ldr	r2, [r3, #0]
9000e436:	687b      	ldr	r3, [r7, #4]
9000e438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000e43a:	1ad3      	subs	r3, r2, r3
9000e43c:	2b00      	cmp	r3, #0
9000e43e:	db0a      	blt.n	9000e456 <tcp_receive+0xefe>
9000e440:	4b0b      	ldr	r3, [pc, #44]	; (9000e470 <tcp_receive+0xf18>)
9000e442:	681a      	ldr	r2, [r3, #0]
9000e444:	687b      	ldr	r3, [r7, #4]
9000e446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000e448:	6879      	ldr	r1, [r7, #4]
9000e44a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
9000e44c:	440b      	add	r3, r1
9000e44e:	1ad3      	subs	r3, r2, r3
9000e450:	3301      	adds	r3, #1
9000e452:	2b00      	cmp	r3, #0
9000e454:	dd07      	ble.n	9000e466 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
9000e456:	687b      	ldr	r3, [r7, #4]
9000e458:	8b5b      	ldrh	r3, [r3, #26]
9000e45a:	f043 0302 	orr.w	r3, r3, #2
9000e45e:	b29a      	uxth	r2, r3
9000e460:	687b      	ldr	r3, [r7, #4]
9000e462:	835a      	strh	r2, [r3, #26]
    }
  }
}
9000e464:	e7ff      	b.n	9000e466 <tcp_receive+0xf0e>
9000e466:	bf00      	nop
9000e468:	3750      	adds	r7, #80	; 0x50
9000e46a:	46bd      	mov	sp, r7
9000e46c:	bdb0      	pop	{r4, r5, r7, pc}
9000e46e:	bf00      	nop
9000e470:	24011058 	.word	0x24011058
9000e474:	24011038 	.word	0x24011038
9000e478:	24011062 	.word	0x24011062
9000e47c:	90015ab0 	.word	0x90015ab0
9000e480:	90015e58 	.word	0x90015e58
9000e484:	90015afc 	.word	0x90015afc

9000e488 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
9000e488:	b480      	push	{r7}
9000e48a:	b083      	sub	sp, #12
9000e48c:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
9000e48e:	4b15      	ldr	r3, [pc, #84]	; (9000e4e4 <tcp_get_next_optbyte+0x5c>)
9000e490:	881b      	ldrh	r3, [r3, #0]
9000e492:	1c5a      	adds	r2, r3, #1
9000e494:	b291      	uxth	r1, r2
9000e496:	4a13      	ldr	r2, [pc, #76]	; (9000e4e4 <tcp_get_next_optbyte+0x5c>)
9000e498:	8011      	strh	r1, [r2, #0]
9000e49a:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
9000e49c:	4b12      	ldr	r3, [pc, #72]	; (9000e4e8 <tcp_get_next_optbyte+0x60>)
9000e49e:	681b      	ldr	r3, [r3, #0]
9000e4a0:	2b00      	cmp	r3, #0
9000e4a2:	d004      	beq.n	9000e4ae <tcp_get_next_optbyte+0x26>
9000e4a4:	4b11      	ldr	r3, [pc, #68]	; (9000e4ec <tcp_get_next_optbyte+0x64>)
9000e4a6:	881b      	ldrh	r3, [r3, #0]
9000e4a8:	88fa      	ldrh	r2, [r7, #6]
9000e4aa:	429a      	cmp	r2, r3
9000e4ac:	d208      	bcs.n	9000e4c0 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
9000e4ae:	4b10      	ldr	r3, [pc, #64]	; (9000e4f0 <tcp_get_next_optbyte+0x68>)
9000e4b0:	681b      	ldr	r3, [r3, #0]
9000e4b2:	3314      	adds	r3, #20
9000e4b4:	603b      	str	r3, [r7, #0]
    return opts[optidx];
9000e4b6:	88fb      	ldrh	r3, [r7, #6]
9000e4b8:	683a      	ldr	r2, [r7, #0]
9000e4ba:	4413      	add	r3, r2
9000e4bc:	781b      	ldrb	r3, [r3, #0]
9000e4be:	e00b      	b.n	9000e4d8 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
9000e4c0:	88fb      	ldrh	r3, [r7, #6]
9000e4c2:	b2da      	uxtb	r2, r3
9000e4c4:	4b09      	ldr	r3, [pc, #36]	; (9000e4ec <tcp_get_next_optbyte+0x64>)
9000e4c6:	881b      	ldrh	r3, [r3, #0]
9000e4c8:	b2db      	uxtb	r3, r3
9000e4ca:	1ad3      	subs	r3, r2, r3
9000e4cc:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
9000e4ce:	4b06      	ldr	r3, [pc, #24]	; (9000e4e8 <tcp_get_next_optbyte+0x60>)
9000e4d0:	681a      	ldr	r2, [r3, #0]
9000e4d2:	797b      	ldrb	r3, [r7, #5]
9000e4d4:	4413      	add	r3, r2
9000e4d6:	781b      	ldrb	r3, [r3, #0]
  }
}
9000e4d8:	4618      	mov	r0, r3
9000e4da:	370c      	adds	r7, #12
9000e4dc:	46bd      	mov	sp, r7
9000e4de:	f85d 7b04 	ldr.w	r7, [sp], #4
9000e4e2:	4770      	bx	lr
9000e4e4:	24011054 	.word	0x24011054
9000e4e8:	24011050 	.word	0x24011050
9000e4ec:	2401104e 	.word	0x2401104e
9000e4f0:	24011048 	.word	0x24011048

9000e4f4 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
9000e4f4:	b580      	push	{r7, lr}
9000e4f6:	b084      	sub	sp, #16
9000e4f8:	af00      	add	r7, sp, #0
9000e4fa:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
9000e4fc:	687b      	ldr	r3, [r7, #4]
9000e4fe:	2b00      	cmp	r3, #0
9000e500:	d106      	bne.n	9000e510 <tcp_parseopt+0x1c>
9000e502:	4b32      	ldr	r3, [pc, #200]	; (9000e5cc <tcp_parseopt+0xd8>)
9000e504:	f240 727d 	movw	r2, #1917	; 0x77d
9000e508:	4931      	ldr	r1, [pc, #196]	; (9000e5d0 <tcp_parseopt+0xdc>)
9000e50a:	4832      	ldr	r0, [pc, #200]	; (9000e5d4 <tcp_parseopt+0xe0>)
9000e50c:	f005 f894 	bl	90013638 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
9000e510:	4b31      	ldr	r3, [pc, #196]	; (9000e5d8 <tcp_parseopt+0xe4>)
9000e512:	881b      	ldrh	r3, [r3, #0]
9000e514:	2b00      	cmp	r3, #0
9000e516:	d055      	beq.n	9000e5c4 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
9000e518:	4b30      	ldr	r3, [pc, #192]	; (9000e5dc <tcp_parseopt+0xe8>)
9000e51a:	2200      	movs	r2, #0
9000e51c:	801a      	strh	r2, [r3, #0]
9000e51e:	e045      	b.n	9000e5ac <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
9000e520:	f7ff ffb2 	bl	9000e488 <tcp_get_next_optbyte>
9000e524:	4603      	mov	r3, r0
9000e526:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
9000e528:	7bfb      	ldrb	r3, [r7, #15]
9000e52a:	2b02      	cmp	r3, #2
9000e52c:	d006      	beq.n	9000e53c <tcp_parseopt+0x48>
9000e52e:	2b02      	cmp	r3, #2
9000e530:	dc2b      	bgt.n	9000e58a <tcp_parseopt+0x96>
9000e532:	2b00      	cmp	r3, #0
9000e534:	d041      	beq.n	9000e5ba <tcp_parseopt+0xc6>
9000e536:	2b01      	cmp	r3, #1
9000e538:	d127      	bne.n	9000e58a <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
9000e53a:	e037      	b.n	9000e5ac <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
9000e53c:	f7ff ffa4 	bl	9000e488 <tcp_get_next_optbyte>
9000e540:	4603      	mov	r3, r0
9000e542:	2b04      	cmp	r3, #4
9000e544:	d13b      	bne.n	9000e5be <tcp_parseopt+0xca>
9000e546:	4b25      	ldr	r3, [pc, #148]	; (9000e5dc <tcp_parseopt+0xe8>)
9000e548:	881b      	ldrh	r3, [r3, #0]
9000e54a:	3301      	adds	r3, #1
9000e54c:	4a22      	ldr	r2, [pc, #136]	; (9000e5d8 <tcp_parseopt+0xe4>)
9000e54e:	8812      	ldrh	r2, [r2, #0]
9000e550:	4293      	cmp	r3, r2
9000e552:	da34      	bge.n	9000e5be <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
9000e554:	f7ff ff98 	bl	9000e488 <tcp_get_next_optbyte>
9000e558:	4603      	mov	r3, r0
9000e55a:	b29b      	uxth	r3, r3
9000e55c:	021b      	lsls	r3, r3, #8
9000e55e:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
9000e560:	f7ff ff92 	bl	9000e488 <tcp_get_next_optbyte>
9000e564:	4603      	mov	r3, r0
9000e566:	b29a      	uxth	r2, r3
9000e568:	89bb      	ldrh	r3, [r7, #12]
9000e56a:	4313      	orrs	r3, r2
9000e56c:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
9000e56e:	89bb      	ldrh	r3, [r7, #12]
9000e570:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
9000e574:	d804      	bhi.n	9000e580 <tcp_parseopt+0x8c>
9000e576:	89bb      	ldrh	r3, [r7, #12]
9000e578:	2b00      	cmp	r3, #0
9000e57a:	d001      	beq.n	9000e580 <tcp_parseopt+0x8c>
9000e57c:	89ba      	ldrh	r2, [r7, #12]
9000e57e:	e001      	b.n	9000e584 <tcp_parseopt+0x90>
9000e580:	f44f 7206 	mov.w	r2, #536	; 0x218
9000e584:	687b      	ldr	r3, [r7, #4]
9000e586:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
9000e588:	e010      	b.n	9000e5ac <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
9000e58a:	f7ff ff7d 	bl	9000e488 <tcp_get_next_optbyte>
9000e58e:	4603      	mov	r3, r0
9000e590:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
9000e592:	7afb      	ldrb	r3, [r7, #11]
9000e594:	2b01      	cmp	r3, #1
9000e596:	d914      	bls.n	9000e5c2 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
9000e598:	7afb      	ldrb	r3, [r7, #11]
9000e59a:	b29a      	uxth	r2, r3
9000e59c:	4b0f      	ldr	r3, [pc, #60]	; (9000e5dc <tcp_parseopt+0xe8>)
9000e59e:	881b      	ldrh	r3, [r3, #0]
9000e5a0:	4413      	add	r3, r2
9000e5a2:	b29b      	uxth	r3, r3
9000e5a4:	3b02      	subs	r3, #2
9000e5a6:	b29a      	uxth	r2, r3
9000e5a8:	4b0c      	ldr	r3, [pc, #48]	; (9000e5dc <tcp_parseopt+0xe8>)
9000e5aa:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
9000e5ac:	4b0b      	ldr	r3, [pc, #44]	; (9000e5dc <tcp_parseopt+0xe8>)
9000e5ae:	881a      	ldrh	r2, [r3, #0]
9000e5b0:	4b09      	ldr	r3, [pc, #36]	; (9000e5d8 <tcp_parseopt+0xe4>)
9000e5b2:	881b      	ldrh	r3, [r3, #0]
9000e5b4:	429a      	cmp	r2, r3
9000e5b6:	d3b3      	bcc.n	9000e520 <tcp_parseopt+0x2c>
9000e5b8:	e004      	b.n	9000e5c4 <tcp_parseopt+0xd0>
          return;
9000e5ba:	bf00      	nop
9000e5bc:	e002      	b.n	9000e5c4 <tcp_parseopt+0xd0>
            return;
9000e5be:	bf00      	nop
9000e5c0:	e000      	b.n	9000e5c4 <tcp_parseopt+0xd0>
            return;
9000e5c2:	bf00      	nop
      }
    }
  }
}
9000e5c4:	3710      	adds	r7, #16
9000e5c6:	46bd      	mov	sp, r7
9000e5c8:	bd80      	pop	{r7, pc}
9000e5ca:	bf00      	nop
9000e5cc:	90015ab0 	.word	0x90015ab0
9000e5d0:	90015f14 	.word	0x90015f14
9000e5d4:	90015afc 	.word	0x90015afc
9000e5d8:	2401104c 	.word	0x2401104c
9000e5dc:	24011054 	.word	0x24011054

9000e5e0 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
9000e5e0:	b480      	push	{r7}
9000e5e2:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
9000e5e4:	4b05      	ldr	r3, [pc, #20]	; (9000e5fc <tcp_trigger_input_pcb_close+0x1c>)
9000e5e6:	781b      	ldrb	r3, [r3, #0]
9000e5e8:	f043 0310 	orr.w	r3, r3, #16
9000e5ec:	b2da      	uxtb	r2, r3
9000e5ee:	4b03      	ldr	r3, [pc, #12]	; (9000e5fc <tcp_trigger_input_pcb_close+0x1c>)
9000e5f0:	701a      	strb	r2, [r3, #0]
}
9000e5f2:	bf00      	nop
9000e5f4:	46bd      	mov	sp, r7
9000e5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
9000e5fa:	4770      	bx	lr
9000e5fc:	24011065 	.word	0x24011065

9000e600 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
9000e600:	b580      	push	{r7, lr}
9000e602:	b084      	sub	sp, #16
9000e604:	af00      	add	r7, sp, #0
9000e606:	60f8      	str	r0, [r7, #12]
9000e608:	60b9      	str	r1, [r7, #8]
9000e60a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
9000e60c:	68fb      	ldr	r3, [r7, #12]
9000e60e:	2b00      	cmp	r3, #0
9000e610:	d00a      	beq.n	9000e628 <tcp_route+0x28>
9000e612:	68fb      	ldr	r3, [r7, #12]
9000e614:	7a1b      	ldrb	r3, [r3, #8]
9000e616:	2b00      	cmp	r3, #0
9000e618:	d006      	beq.n	9000e628 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
9000e61a:	68fb      	ldr	r3, [r7, #12]
9000e61c:	7a1b      	ldrb	r3, [r3, #8]
9000e61e:	4618      	mov	r0, r3
9000e620:	f7fb f87a 	bl	90009718 <netif_get_by_index>
9000e624:	4603      	mov	r3, r0
9000e626:	e003      	b.n	9000e630 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
9000e628:	6878      	ldr	r0, [r7, #4]
9000e62a:	f003 fb2b 	bl	90011c84 <ip4_route>
9000e62e:	4603      	mov	r3, r0
  }
}
9000e630:	4618      	mov	r0, r3
9000e632:	3710      	adds	r7, #16
9000e634:	46bd      	mov	sp, r7
9000e636:	bd80      	pop	{r7, pc}

9000e638 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
9000e638:	b590      	push	{r4, r7, lr}
9000e63a:	b087      	sub	sp, #28
9000e63c:	af00      	add	r7, sp, #0
9000e63e:	60f8      	str	r0, [r7, #12]
9000e640:	60b9      	str	r1, [r7, #8]
9000e642:	603b      	str	r3, [r7, #0]
9000e644:	4613      	mov	r3, r2
9000e646:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
9000e648:	68fb      	ldr	r3, [r7, #12]
9000e64a:	2b00      	cmp	r3, #0
9000e64c:	d105      	bne.n	9000e65a <tcp_create_segment+0x22>
9000e64e:	4b44      	ldr	r3, [pc, #272]	; (9000e760 <tcp_create_segment+0x128>)
9000e650:	22a3      	movs	r2, #163	; 0xa3
9000e652:	4944      	ldr	r1, [pc, #272]	; (9000e764 <tcp_create_segment+0x12c>)
9000e654:	4844      	ldr	r0, [pc, #272]	; (9000e768 <tcp_create_segment+0x130>)
9000e656:	f004 ffef 	bl	90013638 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
9000e65a:	68bb      	ldr	r3, [r7, #8]
9000e65c:	2b00      	cmp	r3, #0
9000e65e:	d105      	bne.n	9000e66c <tcp_create_segment+0x34>
9000e660:	4b3f      	ldr	r3, [pc, #252]	; (9000e760 <tcp_create_segment+0x128>)
9000e662:	22a4      	movs	r2, #164	; 0xa4
9000e664:	4941      	ldr	r1, [pc, #260]	; (9000e76c <tcp_create_segment+0x134>)
9000e666:	4840      	ldr	r0, [pc, #256]	; (9000e768 <tcp_create_segment+0x130>)
9000e668:	f004 ffe6 	bl	90013638 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
9000e66c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
9000e670:	009b      	lsls	r3, r3, #2
9000e672:	b2db      	uxtb	r3, r3
9000e674:	f003 0304 	and.w	r3, r3, #4
9000e678:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
9000e67a:	2003      	movs	r0, #3
9000e67c:	f7fa fcc0 	bl	90009000 <memp_malloc>
9000e680:	6138      	str	r0, [r7, #16]
9000e682:	693b      	ldr	r3, [r7, #16]
9000e684:	2b00      	cmp	r3, #0
9000e686:	d104      	bne.n	9000e692 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
9000e688:	68b8      	ldr	r0, [r7, #8]
9000e68a:	f7fb fbd3 	bl	90009e34 <pbuf_free>
    return NULL;
9000e68e:	2300      	movs	r3, #0
9000e690:	e061      	b.n	9000e756 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
9000e692:	693b      	ldr	r3, [r7, #16]
9000e694:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
9000e698:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
9000e69a:	693b      	ldr	r3, [r7, #16]
9000e69c:	2200      	movs	r2, #0
9000e69e:	601a      	str	r2, [r3, #0]
  seg->p = p;
9000e6a0:	693b      	ldr	r3, [r7, #16]
9000e6a2:	68ba      	ldr	r2, [r7, #8]
9000e6a4:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
9000e6a6:	68bb      	ldr	r3, [r7, #8]
9000e6a8:	891a      	ldrh	r2, [r3, #8]
9000e6aa:	7dfb      	ldrb	r3, [r7, #23]
9000e6ac:	b29b      	uxth	r3, r3
9000e6ae:	429a      	cmp	r2, r3
9000e6b0:	d205      	bcs.n	9000e6be <tcp_create_segment+0x86>
9000e6b2:	4b2b      	ldr	r3, [pc, #172]	; (9000e760 <tcp_create_segment+0x128>)
9000e6b4:	22b0      	movs	r2, #176	; 0xb0
9000e6b6:	492e      	ldr	r1, [pc, #184]	; (9000e770 <tcp_create_segment+0x138>)
9000e6b8:	482b      	ldr	r0, [pc, #172]	; (9000e768 <tcp_create_segment+0x130>)
9000e6ba:	f004 ffbd 	bl	90013638 <iprintf>
  seg->len = p->tot_len - optlen;
9000e6be:	68bb      	ldr	r3, [r7, #8]
9000e6c0:	891a      	ldrh	r2, [r3, #8]
9000e6c2:	7dfb      	ldrb	r3, [r7, #23]
9000e6c4:	b29b      	uxth	r3, r3
9000e6c6:	1ad3      	subs	r3, r2, r3
9000e6c8:	b29a      	uxth	r2, r3
9000e6ca:	693b      	ldr	r3, [r7, #16]
9000e6cc:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
9000e6ce:	2114      	movs	r1, #20
9000e6d0:	68b8      	ldr	r0, [r7, #8]
9000e6d2:	f7fb fb19 	bl	90009d08 <pbuf_add_header>
9000e6d6:	4603      	mov	r3, r0
9000e6d8:	2b00      	cmp	r3, #0
9000e6da:	d004      	beq.n	9000e6e6 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
9000e6dc:	6938      	ldr	r0, [r7, #16]
9000e6de:	f7fc ffe2 	bl	9000b6a6 <tcp_seg_free>
    return NULL;
9000e6e2:	2300      	movs	r3, #0
9000e6e4:	e037      	b.n	9000e756 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
9000e6e6:	693b      	ldr	r3, [r7, #16]
9000e6e8:	685b      	ldr	r3, [r3, #4]
9000e6ea:	685a      	ldr	r2, [r3, #4]
9000e6ec:	693b      	ldr	r3, [r7, #16]
9000e6ee:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
9000e6f0:	68fb      	ldr	r3, [r7, #12]
9000e6f2:	8ada      	ldrh	r2, [r3, #22]
9000e6f4:	693b      	ldr	r3, [r7, #16]
9000e6f6:	68dc      	ldr	r4, [r3, #12]
9000e6f8:	4610      	mov	r0, r2
9000e6fa:	f7f9 feab 	bl	90008454 <lwip_htons>
9000e6fe:	4603      	mov	r3, r0
9000e700:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
9000e702:	68fb      	ldr	r3, [r7, #12]
9000e704:	8b1a      	ldrh	r2, [r3, #24]
9000e706:	693b      	ldr	r3, [r7, #16]
9000e708:	68dc      	ldr	r4, [r3, #12]
9000e70a:	4610      	mov	r0, r2
9000e70c:	f7f9 fea2 	bl	90008454 <lwip_htons>
9000e710:	4603      	mov	r3, r0
9000e712:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
9000e714:	693b      	ldr	r3, [r7, #16]
9000e716:	68dc      	ldr	r4, [r3, #12]
9000e718:	6838      	ldr	r0, [r7, #0]
9000e71a:	f7f9 feb0 	bl	9000847e <lwip_htonl>
9000e71e:	4603      	mov	r3, r0
9000e720:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
9000e722:	7dfb      	ldrb	r3, [r7, #23]
9000e724:	089b      	lsrs	r3, r3, #2
9000e726:	b2db      	uxtb	r3, r3
9000e728:	b29b      	uxth	r3, r3
9000e72a:	3305      	adds	r3, #5
9000e72c:	b29b      	uxth	r3, r3
9000e72e:	031b      	lsls	r3, r3, #12
9000e730:	b29a      	uxth	r2, r3
9000e732:	79fb      	ldrb	r3, [r7, #7]
9000e734:	b29b      	uxth	r3, r3
9000e736:	4313      	orrs	r3, r2
9000e738:	b29a      	uxth	r2, r3
9000e73a:	693b      	ldr	r3, [r7, #16]
9000e73c:	68dc      	ldr	r4, [r3, #12]
9000e73e:	4610      	mov	r0, r2
9000e740:	f7f9 fe88 	bl	90008454 <lwip_htons>
9000e744:	4603      	mov	r3, r0
9000e746:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
9000e748:	693b      	ldr	r3, [r7, #16]
9000e74a:	68db      	ldr	r3, [r3, #12]
9000e74c:	2200      	movs	r2, #0
9000e74e:	749a      	strb	r2, [r3, #18]
9000e750:	2200      	movs	r2, #0
9000e752:	74da      	strb	r2, [r3, #19]
  return seg;
9000e754:	693b      	ldr	r3, [r7, #16]
}
9000e756:	4618      	mov	r0, r3
9000e758:	371c      	adds	r7, #28
9000e75a:	46bd      	mov	sp, r7
9000e75c:	bd90      	pop	{r4, r7, pc}
9000e75e:	bf00      	nop
9000e760:	90015f30 	.word	0x90015f30
9000e764:	90015f64 	.word	0x90015f64
9000e768:	90015f84 	.word	0x90015f84
9000e76c:	90015fac 	.word	0x90015fac
9000e770:	90015fd0 	.word	0x90015fd0

9000e774 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
9000e774:	b580      	push	{r7, lr}
9000e776:	b086      	sub	sp, #24
9000e778:	af00      	add	r7, sp, #0
9000e77a:	607b      	str	r3, [r7, #4]
9000e77c:	4603      	mov	r3, r0
9000e77e:	73fb      	strb	r3, [r7, #15]
9000e780:	460b      	mov	r3, r1
9000e782:	81bb      	strh	r3, [r7, #12]
9000e784:	4613      	mov	r3, r2
9000e786:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
9000e788:	89bb      	ldrh	r3, [r7, #12]
9000e78a:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
9000e78c:	687b      	ldr	r3, [r7, #4]
9000e78e:	2b00      	cmp	r3, #0
9000e790:	d105      	bne.n	9000e79e <tcp_pbuf_prealloc+0x2a>
9000e792:	4b30      	ldr	r3, [pc, #192]	; (9000e854 <tcp_pbuf_prealloc+0xe0>)
9000e794:	22e8      	movs	r2, #232	; 0xe8
9000e796:	4930      	ldr	r1, [pc, #192]	; (9000e858 <tcp_pbuf_prealloc+0xe4>)
9000e798:	4830      	ldr	r0, [pc, #192]	; (9000e85c <tcp_pbuf_prealloc+0xe8>)
9000e79a:	f004 ff4d 	bl	90013638 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
9000e79e:	6a3b      	ldr	r3, [r7, #32]
9000e7a0:	2b00      	cmp	r3, #0
9000e7a2:	d105      	bne.n	9000e7b0 <tcp_pbuf_prealloc+0x3c>
9000e7a4:	4b2b      	ldr	r3, [pc, #172]	; (9000e854 <tcp_pbuf_prealloc+0xe0>)
9000e7a6:	22e9      	movs	r2, #233	; 0xe9
9000e7a8:	492d      	ldr	r1, [pc, #180]	; (9000e860 <tcp_pbuf_prealloc+0xec>)
9000e7aa:	482c      	ldr	r0, [pc, #176]	; (9000e85c <tcp_pbuf_prealloc+0xe8>)
9000e7ac:	f004 ff44 	bl	90013638 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
9000e7b0:	89ba      	ldrh	r2, [r7, #12]
9000e7b2:	897b      	ldrh	r3, [r7, #10]
9000e7b4:	429a      	cmp	r2, r3
9000e7b6:	d221      	bcs.n	9000e7fc <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
9000e7b8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
9000e7bc:	f003 0302 	and.w	r3, r3, #2
9000e7c0:	2b00      	cmp	r3, #0
9000e7c2:	d111      	bne.n	9000e7e8 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
9000e7c4:	6a3b      	ldr	r3, [r7, #32]
9000e7c6:	8b5b      	ldrh	r3, [r3, #26]
9000e7c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
9000e7cc:	2b00      	cmp	r3, #0
9000e7ce:	d115      	bne.n	9000e7fc <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
9000e7d0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
9000e7d4:	2b00      	cmp	r3, #0
9000e7d6:	d007      	beq.n	9000e7e8 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
9000e7d8:	6a3b      	ldr	r3, [r7, #32]
9000e7da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
9000e7dc:	2b00      	cmp	r3, #0
9000e7de:	d103      	bne.n	9000e7e8 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
9000e7e0:	6a3b      	ldr	r3, [r7, #32]
9000e7e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
9000e7e4:	2b00      	cmp	r3, #0
9000e7e6:	d009      	beq.n	9000e7fc <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
9000e7e8:	89bb      	ldrh	r3, [r7, #12]
9000e7ea:	f203 231b 	addw	r3, r3, #539	; 0x21b
9000e7ee:	f023 0203 	bic.w	r2, r3, #3
9000e7f2:	897b      	ldrh	r3, [r7, #10]
9000e7f4:	4293      	cmp	r3, r2
9000e7f6:	bf28      	it	cs
9000e7f8:	4613      	movcs	r3, r2
9000e7fa:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
9000e7fc:	8af9      	ldrh	r1, [r7, #22]
9000e7fe:	7bfb      	ldrb	r3, [r7, #15]
9000e800:	f44f 7220 	mov.w	r2, #640	; 0x280
9000e804:	4618      	mov	r0, r3
9000e806:	f7fb f831 	bl	9000986c <pbuf_alloc>
9000e80a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
9000e80c:	693b      	ldr	r3, [r7, #16]
9000e80e:	2b00      	cmp	r3, #0
9000e810:	d101      	bne.n	9000e816 <tcp_pbuf_prealloc+0xa2>
    return NULL;
9000e812:	2300      	movs	r3, #0
9000e814:	e019      	b.n	9000e84a <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
9000e816:	693b      	ldr	r3, [r7, #16]
9000e818:	681b      	ldr	r3, [r3, #0]
9000e81a:	2b00      	cmp	r3, #0
9000e81c:	d006      	beq.n	9000e82c <tcp_pbuf_prealloc+0xb8>
9000e81e:	4b0d      	ldr	r3, [pc, #52]	; (9000e854 <tcp_pbuf_prealloc+0xe0>)
9000e820:	f240 120b 	movw	r2, #267	; 0x10b
9000e824:	490f      	ldr	r1, [pc, #60]	; (9000e864 <tcp_pbuf_prealloc+0xf0>)
9000e826:	480d      	ldr	r0, [pc, #52]	; (9000e85c <tcp_pbuf_prealloc+0xe8>)
9000e828:	f004 ff06 	bl	90013638 <iprintf>
  *oversize = p->len - length;
9000e82c:	693b      	ldr	r3, [r7, #16]
9000e82e:	895a      	ldrh	r2, [r3, #10]
9000e830:	89bb      	ldrh	r3, [r7, #12]
9000e832:	1ad3      	subs	r3, r2, r3
9000e834:	b29a      	uxth	r2, r3
9000e836:	687b      	ldr	r3, [r7, #4]
9000e838:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
9000e83a:	693b      	ldr	r3, [r7, #16]
9000e83c:	89ba      	ldrh	r2, [r7, #12]
9000e83e:	811a      	strh	r2, [r3, #8]
9000e840:	693b      	ldr	r3, [r7, #16]
9000e842:	891a      	ldrh	r2, [r3, #8]
9000e844:	693b      	ldr	r3, [r7, #16]
9000e846:	815a      	strh	r2, [r3, #10]
  return p;
9000e848:	693b      	ldr	r3, [r7, #16]
}
9000e84a:	4618      	mov	r0, r3
9000e84c:	3718      	adds	r7, #24
9000e84e:	46bd      	mov	sp, r7
9000e850:	bd80      	pop	{r7, pc}
9000e852:	bf00      	nop
9000e854:	90015f30 	.word	0x90015f30
9000e858:	90015fe8 	.word	0x90015fe8
9000e85c:	90015f84 	.word	0x90015f84
9000e860:	9001600c 	.word	0x9001600c
9000e864:	9001602c 	.word	0x9001602c

9000e868 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
9000e868:	b580      	push	{r7, lr}
9000e86a:	b082      	sub	sp, #8
9000e86c:	af00      	add	r7, sp, #0
9000e86e:	6078      	str	r0, [r7, #4]
9000e870:	460b      	mov	r3, r1
9000e872:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
9000e874:	687b      	ldr	r3, [r7, #4]
9000e876:	2b00      	cmp	r3, #0
9000e878:	d106      	bne.n	9000e888 <tcp_write_checks+0x20>
9000e87a:	4b33      	ldr	r3, [pc, #204]	; (9000e948 <tcp_write_checks+0xe0>)
9000e87c:	f240 1233 	movw	r2, #307	; 0x133
9000e880:	4932      	ldr	r1, [pc, #200]	; (9000e94c <tcp_write_checks+0xe4>)
9000e882:	4833      	ldr	r0, [pc, #204]	; (9000e950 <tcp_write_checks+0xe8>)
9000e884:	f004 fed8 	bl	90013638 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
9000e888:	687b      	ldr	r3, [r7, #4]
9000e88a:	7d1b      	ldrb	r3, [r3, #20]
9000e88c:	2b04      	cmp	r3, #4
9000e88e:	d00e      	beq.n	9000e8ae <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
9000e890:	687b      	ldr	r3, [r7, #4]
9000e892:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
9000e894:	2b07      	cmp	r3, #7
9000e896:	d00a      	beq.n	9000e8ae <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
9000e898:	687b      	ldr	r3, [r7, #4]
9000e89a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
9000e89c:	2b02      	cmp	r3, #2
9000e89e:	d006      	beq.n	9000e8ae <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
9000e8a0:	687b      	ldr	r3, [r7, #4]
9000e8a2:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
9000e8a4:	2b03      	cmp	r3, #3
9000e8a6:	d002      	beq.n	9000e8ae <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
9000e8a8:	f06f 030a 	mvn.w	r3, #10
9000e8ac:	e048      	b.n	9000e940 <tcp_write_checks+0xd8>
  } else if (len == 0) {
9000e8ae:	887b      	ldrh	r3, [r7, #2]
9000e8b0:	2b00      	cmp	r3, #0
9000e8b2:	d101      	bne.n	9000e8b8 <tcp_write_checks+0x50>
    return ERR_OK;
9000e8b4:	2300      	movs	r3, #0
9000e8b6:	e043      	b.n	9000e940 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
9000e8b8:	687b      	ldr	r3, [r7, #4]
9000e8ba:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
9000e8be:	887a      	ldrh	r2, [r7, #2]
9000e8c0:	429a      	cmp	r2, r3
9000e8c2:	d909      	bls.n	9000e8d8 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
9000e8c4:	687b      	ldr	r3, [r7, #4]
9000e8c6:	8b5b      	ldrh	r3, [r3, #26]
9000e8c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
9000e8cc:	b29a      	uxth	r2, r3
9000e8ce:	687b      	ldr	r3, [r7, #4]
9000e8d0:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
9000e8d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
9000e8d6:	e033      	b.n	9000e940 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
9000e8d8:	687b      	ldr	r3, [r7, #4]
9000e8da:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
9000e8de:	2b08      	cmp	r3, #8
9000e8e0:	d909      	bls.n	9000e8f6 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
9000e8e2:	687b      	ldr	r3, [r7, #4]
9000e8e4:	8b5b      	ldrh	r3, [r3, #26]
9000e8e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
9000e8ea:	b29a      	uxth	r2, r3
9000e8ec:	687b      	ldr	r3, [r7, #4]
9000e8ee:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
9000e8f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
9000e8f4:	e024      	b.n	9000e940 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
9000e8f6:	687b      	ldr	r3, [r7, #4]
9000e8f8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
9000e8fc:	2b00      	cmp	r3, #0
9000e8fe:	d00f      	beq.n	9000e920 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
9000e900:	687b      	ldr	r3, [r7, #4]
9000e902:	6f1b      	ldr	r3, [r3, #112]	; 0x70
9000e904:	2b00      	cmp	r3, #0
9000e906:	d11a      	bne.n	9000e93e <tcp_write_checks+0xd6>
9000e908:	687b      	ldr	r3, [r7, #4]
9000e90a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
9000e90c:	2b00      	cmp	r3, #0
9000e90e:	d116      	bne.n	9000e93e <tcp_write_checks+0xd6>
9000e910:	4b0d      	ldr	r3, [pc, #52]	; (9000e948 <tcp_write_checks+0xe0>)
9000e912:	f240 1255 	movw	r2, #341	; 0x155
9000e916:	490f      	ldr	r1, [pc, #60]	; (9000e954 <tcp_write_checks+0xec>)
9000e918:	480d      	ldr	r0, [pc, #52]	; (9000e950 <tcp_write_checks+0xe8>)
9000e91a:	f004 fe8d 	bl	90013638 <iprintf>
9000e91e:	e00e      	b.n	9000e93e <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
9000e920:	687b      	ldr	r3, [r7, #4]
9000e922:	6f1b      	ldr	r3, [r3, #112]	; 0x70
9000e924:	2b00      	cmp	r3, #0
9000e926:	d103      	bne.n	9000e930 <tcp_write_checks+0xc8>
9000e928:	687b      	ldr	r3, [r7, #4]
9000e92a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
9000e92c:	2b00      	cmp	r3, #0
9000e92e:	d006      	beq.n	9000e93e <tcp_write_checks+0xd6>
9000e930:	4b05      	ldr	r3, [pc, #20]	; (9000e948 <tcp_write_checks+0xe0>)
9000e932:	f44f 72ac 	mov.w	r2, #344	; 0x158
9000e936:	4908      	ldr	r1, [pc, #32]	; (9000e958 <tcp_write_checks+0xf0>)
9000e938:	4805      	ldr	r0, [pc, #20]	; (9000e950 <tcp_write_checks+0xe8>)
9000e93a:	f004 fe7d 	bl	90013638 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
9000e93e:	2300      	movs	r3, #0
}
9000e940:	4618      	mov	r0, r3
9000e942:	3708      	adds	r7, #8
9000e944:	46bd      	mov	sp, r7
9000e946:	bd80      	pop	{r7, pc}
9000e948:	90015f30 	.word	0x90015f30
9000e94c:	90016040 	.word	0x90016040
9000e950:	90015f84 	.word	0x90015f84
9000e954:	90016060 	.word	0x90016060
9000e958:	9001609c 	.word	0x9001609c

9000e95c <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
9000e95c:	b590      	push	{r4, r7, lr}
9000e95e:	b09b      	sub	sp, #108	; 0x6c
9000e960:	af04      	add	r7, sp, #16
9000e962:	60f8      	str	r0, [r7, #12]
9000e964:	60b9      	str	r1, [r7, #8]
9000e966:	4611      	mov	r1, r2
9000e968:	461a      	mov	r2, r3
9000e96a:	460b      	mov	r3, r1
9000e96c:	80fb      	strh	r3, [r7, #6]
9000e96e:	4613      	mov	r3, r2
9000e970:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
9000e972:	2300      	movs	r3, #0
9000e974:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
9000e976:	2300      	movs	r3, #0
9000e978:	653b      	str	r3, [r7, #80]	; 0x50
9000e97a:	2300      	movs	r3, #0
9000e97c:	64fb      	str	r3, [r7, #76]	; 0x4c
9000e97e:	2300      	movs	r3, #0
9000e980:	64bb      	str	r3, [r7, #72]	; 0x48
9000e982:	2300      	movs	r3, #0
9000e984:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
9000e986:	2300      	movs	r3, #0
9000e988:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
9000e98c:	2300      	movs	r3, #0
9000e98e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
9000e992:	2300      	movs	r3, #0
9000e994:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
9000e996:	2300      	movs	r3, #0
9000e998:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
9000e99a:	2300      	movs	r3, #0
9000e99c:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
9000e99e:	68fb      	ldr	r3, [r7, #12]
9000e9a0:	2b00      	cmp	r3, #0
9000e9a2:	d109      	bne.n	9000e9b8 <tcp_write+0x5c>
9000e9a4:	4ba4      	ldr	r3, [pc, #656]	; (9000ec38 <tcp_write+0x2dc>)
9000e9a6:	f44f 72cf 	mov.w	r2, #414	; 0x19e
9000e9aa:	49a4      	ldr	r1, [pc, #656]	; (9000ec3c <tcp_write+0x2e0>)
9000e9ac:	48a4      	ldr	r0, [pc, #656]	; (9000ec40 <tcp_write+0x2e4>)
9000e9ae:	f004 fe43 	bl	90013638 <iprintf>
9000e9b2:	f06f 030f 	mvn.w	r3, #15
9000e9b6:	e32a      	b.n	9000f00e <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
9000e9b8:	68fb      	ldr	r3, [r7, #12]
9000e9ba:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
9000e9be:	085b      	lsrs	r3, r3, #1
9000e9c0:	b29a      	uxth	r2, r3
9000e9c2:	68fb      	ldr	r3, [r7, #12]
9000e9c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
9000e9c6:	4293      	cmp	r3, r2
9000e9c8:	bf28      	it	cs
9000e9ca:	4613      	movcs	r3, r2
9000e9cc:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
9000e9ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
9000e9d0:	2b00      	cmp	r3, #0
9000e9d2:	d102      	bne.n	9000e9da <tcp_write+0x7e>
9000e9d4:	68fb      	ldr	r3, [r7, #12]
9000e9d6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
9000e9d8:	e000      	b.n	9000e9dc <tcp_write+0x80>
9000e9da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
9000e9dc:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
9000e9de:	68bb      	ldr	r3, [r7, #8]
9000e9e0:	2b00      	cmp	r3, #0
9000e9e2:	d109      	bne.n	9000e9f8 <tcp_write+0x9c>
9000e9e4:	4b94      	ldr	r3, [pc, #592]	; (9000ec38 <tcp_write+0x2dc>)
9000e9e6:	f240 12ad 	movw	r2, #429	; 0x1ad
9000e9ea:	4996      	ldr	r1, [pc, #600]	; (9000ec44 <tcp_write+0x2e8>)
9000e9ec:	4894      	ldr	r0, [pc, #592]	; (9000ec40 <tcp_write+0x2e4>)
9000e9ee:	f004 fe23 	bl	90013638 <iprintf>
9000e9f2:	f06f 030f 	mvn.w	r3, #15
9000e9f6:	e30a      	b.n	9000f00e <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
9000e9f8:	88fb      	ldrh	r3, [r7, #6]
9000e9fa:	4619      	mov	r1, r3
9000e9fc:	68f8      	ldr	r0, [r7, #12]
9000e9fe:	f7ff ff33 	bl	9000e868 <tcp_write_checks>
9000ea02:	4603      	mov	r3, r0
9000ea04:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
9000ea08:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
9000ea0c:	2b00      	cmp	r3, #0
9000ea0e:	d002      	beq.n	9000ea16 <tcp_write+0xba>
    return err;
9000ea10:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
9000ea14:	e2fb      	b.n	9000f00e <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
9000ea16:	68fb      	ldr	r3, [r7, #12]
9000ea18:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
9000ea1c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
9000ea20:	2300      	movs	r3, #0
9000ea22:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
9000ea26:	68fb      	ldr	r3, [r7, #12]
9000ea28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
9000ea2a:	2b00      	cmp	r3, #0
9000ea2c:	f000 80f6 	beq.w	9000ec1c <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
9000ea30:	68fb      	ldr	r3, [r7, #12]
9000ea32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
9000ea34:	653b      	str	r3, [r7, #80]	; 0x50
9000ea36:	e002      	b.n	9000ea3e <tcp_write+0xe2>
         last_unsent = last_unsent->next);
9000ea38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
9000ea3a:	681b      	ldr	r3, [r3, #0]
9000ea3c:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
9000ea3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
9000ea40:	681b      	ldr	r3, [r3, #0]
9000ea42:	2b00      	cmp	r3, #0
9000ea44:	d1f8      	bne.n	9000ea38 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
9000ea46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
9000ea48:	7a9b      	ldrb	r3, [r3, #10]
9000ea4a:	009b      	lsls	r3, r3, #2
9000ea4c:	b29b      	uxth	r3, r3
9000ea4e:	f003 0304 	and.w	r3, r3, #4
9000ea52:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
9000ea54:	8cba      	ldrh	r2, [r7, #36]	; 0x24
9000ea56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
9000ea58:	891b      	ldrh	r3, [r3, #8]
9000ea5a:	4619      	mov	r1, r3
9000ea5c:	8c3b      	ldrh	r3, [r7, #32]
9000ea5e:	440b      	add	r3, r1
9000ea60:	429a      	cmp	r2, r3
9000ea62:	da06      	bge.n	9000ea72 <tcp_write+0x116>
9000ea64:	4b74      	ldr	r3, [pc, #464]	; (9000ec38 <tcp_write+0x2dc>)
9000ea66:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
9000ea6a:	4977      	ldr	r1, [pc, #476]	; (9000ec48 <tcp_write+0x2ec>)
9000ea6c:	4874      	ldr	r0, [pc, #464]	; (9000ec40 <tcp_write+0x2e4>)
9000ea6e:	f004 fde3 	bl	90013638 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
9000ea72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
9000ea74:	891a      	ldrh	r2, [r3, #8]
9000ea76:	8c3b      	ldrh	r3, [r7, #32]
9000ea78:	4413      	add	r3, r2
9000ea7a:	b29b      	uxth	r3, r3
9000ea7c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
9000ea7e:	1ad3      	subs	r3, r2, r3
9000ea80:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
9000ea82:	68fb      	ldr	r3, [r7, #12]
9000ea84:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
9000ea88:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
9000ea8a:	8a7b      	ldrh	r3, [r7, #18]
9000ea8c:	2b00      	cmp	r3, #0
9000ea8e:	d026      	beq.n	9000eade <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
9000ea90:	8a7b      	ldrh	r3, [r7, #18]
9000ea92:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
9000ea94:	429a      	cmp	r2, r3
9000ea96:	d206      	bcs.n	9000eaa6 <tcp_write+0x14a>
9000ea98:	4b67      	ldr	r3, [pc, #412]	; (9000ec38 <tcp_write+0x2dc>)
9000ea9a:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
9000ea9e:	496b      	ldr	r1, [pc, #428]	; (9000ec4c <tcp_write+0x2f0>)
9000eaa0:	4867      	ldr	r0, [pc, #412]	; (9000ec40 <tcp_write+0x2e4>)
9000eaa2:	f004 fdc9 	bl	90013638 <iprintf>
      seg = last_unsent;
9000eaa6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
9000eaa8:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
9000eaaa:	8a7b      	ldrh	r3, [r7, #18]
9000eaac:	88fa      	ldrh	r2, [r7, #6]
9000eaae:	4293      	cmp	r3, r2
9000eab0:	bf28      	it	cs
9000eab2:	4613      	movcs	r3, r2
9000eab4:	b29b      	uxth	r3, r3
9000eab6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
9000eab8:	4293      	cmp	r3, r2
9000eaba:	bf28      	it	cs
9000eabc:	4613      	movcs	r3, r2
9000eabe:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
9000eac0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
9000eac4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
9000eac6:	4413      	add	r3, r2
9000eac8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
9000eacc:	8a7a      	ldrh	r2, [r7, #18]
9000eace:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
9000ead0:	1ad3      	subs	r3, r2, r3
9000ead2:	b29b      	uxth	r3, r3
9000ead4:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
9000ead6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
9000ead8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
9000eada:	1ad3      	subs	r3, r2, r3
9000eadc:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
9000eade:	8a7b      	ldrh	r3, [r7, #18]
9000eae0:	2b00      	cmp	r3, #0
9000eae2:	d00b      	beq.n	9000eafc <tcp_write+0x1a0>
9000eae4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
9000eae8:	88fb      	ldrh	r3, [r7, #6]
9000eaea:	429a      	cmp	r2, r3
9000eaec:	d006      	beq.n	9000eafc <tcp_write+0x1a0>
9000eaee:	4b52      	ldr	r3, [pc, #328]	; (9000ec38 <tcp_write+0x2dc>)
9000eaf0:	f44f 7200 	mov.w	r2, #512	; 0x200
9000eaf4:	4956      	ldr	r1, [pc, #344]	; (9000ec50 <tcp_write+0x2f4>)
9000eaf6:	4852      	ldr	r0, [pc, #328]	; (9000ec40 <tcp_write+0x2e4>)
9000eaf8:	f004 fd9e 	bl	90013638 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
9000eafc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
9000eb00:	88fb      	ldrh	r3, [r7, #6]
9000eb02:	429a      	cmp	r2, r3
9000eb04:	f080 8167 	bcs.w	9000edd6 <tcp_write+0x47a>
9000eb08:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
9000eb0a:	2b00      	cmp	r3, #0
9000eb0c:	f000 8163 	beq.w	9000edd6 <tcp_write+0x47a>
9000eb10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
9000eb12:	891b      	ldrh	r3, [r3, #8]
9000eb14:	2b00      	cmp	r3, #0
9000eb16:	f000 815e 	beq.w	9000edd6 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
9000eb1a:	88fa      	ldrh	r2, [r7, #6]
9000eb1c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
9000eb20:	1ad2      	subs	r2, r2, r3
9000eb22:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
9000eb24:	4293      	cmp	r3, r2
9000eb26:	bfa8      	it	ge
9000eb28:	4613      	movge	r3, r2
9000eb2a:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
9000eb2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
9000eb2e:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
9000eb30:	797b      	ldrb	r3, [r7, #5]
9000eb32:	f003 0301 	and.w	r3, r3, #1
9000eb36:	2b00      	cmp	r3, #0
9000eb38:	d027      	beq.n	9000eb8a <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
9000eb3a:	f107 0012 	add.w	r0, r7, #18
9000eb3e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
9000eb40:	8bf9      	ldrh	r1, [r7, #30]
9000eb42:	2301      	movs	r3, #1
9000eb44:	9302      	str	r3, [sp, #8]
9000eb46:	797b      	ldrb	r3, [r7, #5]
9000eb48:	9301      	str	r3, [sp, #4]
9000eb4a:	68fb      	ldr	r3, [r7, #12]
9000eb4c:	9300      	str	r3, [sp, #0]
9000eb4e:	4603      	mov	r3, r0
9000eb50:	2000      	movs	r0, #0
9000eb52:	f7ff fe0f 	bl	9000e774 <tcp_pbuf_prealloc>
9000eb56:	6578      	str	r0, [r7, #84]	; 0x54
9000eb58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
9000eb5a:	2b00      	cmp	r3, #0
9000eb5c:	f000 8225 	beq.w	9000efaa <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
9000eb60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
9000eb62:	6858      	ldr	r0, [r3, #4]
9000eb64:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
9000eb68:	68ba      	ldr	r2, [r7, #8]
9000eb6a:	4413      	add	r3, r2
9000eb6c:	8bfa      	ldrh	r2, [r7, #30]
9000eb6e:	4619      	mov	r1, r3
9000eb70:	f004 fcb7 	bl	900134e2 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
9000eb74:	6d78      	ldr	r0, [r7, #84]	; 0x54
9000eb76:	f7fb f9eb 	bl	90009f50 <pbuf_clen>
9000eb7a:	4603      	mov	r3, r0
9000eb7c:	461a      	mov	r2, r3
9000eb7e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
9000eb82:	4413      	add	r3, r2
9000eb84:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
9000eb88:	e041      	b.n	9000ec0e <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
9000eb8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
9000eb8c:	685b      	ldr	r3, [r3, #4]
9000eb8e:	637b      	str	r3, [r7, #52]	; 0x34
9000eb90:	e002      	b.n	9000eb98 <tcp_write+0x23c>
9000eb92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
9000eb94:	681b      	ldr	r3, [r3, #0]
9000eb96:	637b      	str	r3, [r7, #52]	; 0x34
9000eb98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
9000eb9a:	681b      	ldr	r3, [r3, #0]
9000eb9c:	2b00      	cmp	r3, #0
9000eb9e:	d1f8      	bne.n	9000eb92 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
9000eba0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
9000eba2:	7b1b      	ldrb	r3, [r3, #12]
9000eba4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
9000eba8:	2b00      	cmp	r3, #0
9000ebaa:	d115      	bne.n	9000ebd8 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
9000ebac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
9000ebae:	685b      	ldr	r3, [r3, #4]
9000ebb0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
9000ebb2:	8952      	ldrh	r2, [r2, #10]
9000ebb4:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
9000ebb6:	68ba      	ldr	r2, [r7, #8]
9000ebb8:	429a      	cmp	r2, r3
9000ebba:	d10d      	bne.n	9000ebd8 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
9000ebbc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
9000ebc0:	2b00      	cmp	r3, #0
9000ebc2:	d006      	beq.n	9000ebd2 <tcp_write+0x276>
9000ebc4:	4b1c      	ldr	r3, [pc, #112]	; (9000ec38 <tcp_write+0x2dc>)
9000ebc6:	f240 2231 	movw	r2, #561	; 0x231
9000ebca:	4922      	ldr	r1, [pc, #136]	; (9000ec54 <tcp_write+0x2f8>)
9000ebcc:	481c      	ldr	r0, [pc, #112]	; (9000ec40 <tcp_write+0x2e4>)
9000ebce:	f004 fd33 	bl	90013638 <iprintf>
          extendlen = seglen;
9000ebd2:	8bfb      	ldrh	r3, [r7, #30]
9000ebd4:	87bb      	strh	r3, [r7, #60]	; 0x3c
9000ebd6:	e01a      	b.n	9000ec0e <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
9000ebd8:	8bfb      	ldrh	r3, [r7, #30]
9000ebda:	2201      	movs	r2, #1
9000ebdc:	4619      	mov	r1, r3
9000ebde:	2000      	movs	r0, #0
9000ebe0:	f7fa fe44 	bl	9000986c <pbuf_alloc>
9000ebe4:	6578      	str	r0, [r7, #84]	; 0x54
9000ebe6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
9000ebe8:	2b00      	cmp	r3, #0
9000ebea:	f000 81e0 	beq.w	9000efae <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
9000ebee:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
9000ebf2:	68ba      	ldr	r2, [r7, #8]
9000ebf4:	441a      	add	r2, r3
9000ebf6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
9000ebf8:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
9000ebfa:	6d78      	ldr	r0, [r7, #84]	; 0x54
9000ebfc:	f7fb f9a8 	bl	90009f50 <pbuf_clen>
9000ec00:	4603      	mov	r3, r0
9000ec02:	461a      	mov	r2, r3
9000ec04:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
9000ec08:	4413      	add	r3, r2
9000ec0a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
9000ec0e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
9000ec12:	8bfb      	ldrh	r3, [r7, #30]
9000ec14:	4413      	add	r3, r2
9000ec16:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
9000ec1a:	e0dc      	b.n	9000edd6 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
9000ec1c:	68fb      	ldr	r3, [r7, #12]
9000ec1e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
9000ec22:	2b00      	cmp	r3, #0
9000ec24:	f000 80d7 	beq.w	9000edd6 <tcp_write+0x47a>
9000ec28:	4b03      	ldr	r3, [pc, #12]	; (9000ec38 <tcp_write+0x2dc>)
9000ec2a:	f240 224a 	movw	r2, #586	; 0x24a
9000ec2e:	490a      	ldr	r1, [pc, #40]	; (9000ec58 <tcp_write+0x2fc>)
9000ec30:	4803      	ldr	r0, [pc, #12]	; (9000ec40 <tcp_write+0x2e4>)
9000ec32:	f004 fd01 	bl	90013638 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
9000ec36:	e0ce      	b.n	9000edd6 <tcp_write+0x47a>
9000ec38:	90015f30 	.word	0x90015f30
9000ec3c:	900160d0 	.word	0x900160d0
9000ec40:	90015f84 	.word	0x90015f84
9000ec44:	900160e8 	.word	0x900160e8
9000ec48:	9001611c 	.word	0x9001611c
9000ec4c:	90016134 	.word	0x90016134
9000ec50:	90016154 	.word	0x90016154
9000ec54:	90016174 	.word	0x90016174
9000ec58:	900161a0 	.word	0x900161a0
    struct pbuf *p;
    u16_t left = len - pos;
9000ec5c:	88fa      	ldrh	r2, [r7, #6]
9000ec5e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
9000ec62:	1ad3      	subs	r3, r2, r3
9000ec64:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
9000ec66:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
9000ec6a:	b29b      	uxth	r3, r3
9000ec6c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
9000ec6e:	1ad3      	subs	r3, r2, r3
9000ec70:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
9000ec72:	8b7a      	ldrh	r2, [r7, #26]
9000ec74:	8bbb      	ldrh	r3, [r7, #28]
9000ec76:	4293      	cmp	r3, r2
9000ec78:	bf28      	it	cs
9000ec7a:	4613      	movcs	r3, r2
9000ec7c:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
9000ec7e:	797b      	ldrb	r3, [r7, #5]
9000ec80:	f003 0301 	and.w	r3, r3, #1
9000ec84:	2b00      	cmp	r3, #0
9000ec86:	d036      	beq.n	9000ecf6 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
9000ec88:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
9000ec8c:	b29a      	uxth	r2, r3
9000ec8e:	8b3b      	ldrh	r3, [r7, #24]
9000ec90:	4413      	add	r3, r2
9000ec92:	b299      	uxth	r1, r3
9000ec94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
9000ec96:	2b00      	cmp	r3, #0
9000ec98:	bf0c      	ite	eq
9000ec9a:	2301      	moveq	r3, #1
9000ec9c:	2300      	movne	r3, #0
9000ec9e:	b2db      	uxtb	r3, r3
9000eca0:	f107 0012 	add.w	r0, r7, #18
9000eca4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
9000eca6:	9302      	str	r3, [sp, #8]
9000eca8:	797b      	ldrb	r3, [r7, #5]
9000ecaa:	9301      	str	r3, [sp, #4]
9000ecac:	68fb      	ldr	r3, [r7, #12]
9000ecae:	9300      	str	r3, [sp, #0]
9000ecb0:	4603      	mov	r3, r0
9000ecb2:	2036      	movs	r0, #54	; 0x36
9000ecb4:	f7ff fd5e 	bl	9000e774 <tcp_pbuf_prealloc>
9000ecb8:	6338      	str	r0, [r7, #48]	; 0x30
9000ecba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9000ecbc:	2b00      	cmp	r3, #0
9000ecbe:	f000 8178 	beq.w	9000efb2 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
9000ecc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9000ecc4:	895b      	ldrh	r3, [r3, #10]
9000ecc6:	8b3a      	ldrh	r2, [r7, #24]
9000ecc8:	429a      	cmp	r2, r3
9000ecca:	d906      	bls.n	9000ecda <tcp_write+0x37e>
9000eccc:	4b8c      	ldr	r3, [pc, #560]	; (9000ef00 <tcp_write+0x5a4>)
9000ecce:	f240 2266 	movw	r2, #614	; 0x266
9000ecd2:	498c      	ldr	r1, [pc, #560]	; (9000ef04 <tcp_write+0x5a8>)
9000ecd4:	488c      	ldr	r0, [pc, #560]	; (9000ef08 <tcp_write+0x5ac>)
9000ecd6:	f004 fcaf 	bl	90013638 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
9000ecda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9000ecdc:	685a      	ldr	r2, [r3, #4]
9000ecde:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
9000ece2:	18d0      	adds	r0, r2, r3
9000ece4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
9000ece8:	68ba      	ldr	r2, [r7, #8]
9000ecea:	4413      	add	r3, r2
9000ecec:	8b3a      	ldrh	r2, [r7, #24]
9000ecee:	4619      	mov	r1, r3
9000ecf0:	f004 fbf7 	bl	900134e2 <memcpy>
9000ecf4:	e02f      	b.n	9000ed56 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
9000ecf6:	8a7b      	ldrh	r3, [r7, #18]
9000ecf8:	2b00      	cmp	r3, #0
9000ecfa:	d006      	beq.n	9000ed0a <tcp_write+0x3ae>
9000ecfc:	4b80      	ldr	r3, [pc, #512]	; (9000ef00 <tcp_write+0x5a4>)
9000ecfe:	f240 2271 	movw	r2, #625	; 0x271
9000ed02:	4982      	ldr	r1, [pc, #520]	; (9000ef0c <tcp_write+0x5b0>)
9000ed04:	4880      	ldr	r0, [pc, #512]	; (9000ef08 <tcp_write+0x5ac>)
9000ed06:	f004 fc97 	bl	90013638 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
9000ed0a:	8b3b      	ldrh	r3, [r7, #24]
9000ed0c:	2201      	movs	r2, #1
9000ed0e:	4619      	mov	r1, r3
9000ed10:	2036      	movs	r0, #54	; 0x36
9000ed12:	f7fa fdab 	bl	9000986c <pbuf_alloc>
9000ed16:	6178      	str	r0, [r7, #20]
9000ed18:	697b      	ldr	r3, [r7, #20]
9000ed1a:	2b00      	cmp	r3, #0
9000ed1c:	f000 814b 	beq.w	9000efb6 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
9000ed20:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
9000ed24:	68ba      	ldr	r2, [r7, #8]
9000ed26:	441a      	add	r2, r3
9000ed28:	697b      	ldr	r3, [r7, #20]
9000ed2a:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
9000ed2c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
9000ed30:	b29b      	uxth	r3, r3
9000ed32:	f44f 7220 	mov.w	r2, #640	; 0x280
9000ed36:	4619      	mov	r1, r3
9000ed38:	2036      	movs	r0, #54	; 0x36
9000ed3a:	f7fa fd97 	bl	9000986c <pbuf_alloc>
9000ed3e:	6338      	str	r0, [r7, #48]	; 0x30
9000ed40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9000ed42:	2b00      	cmp	r3, #0
9000ed44:	d103      	bne.n	9000ed4e <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
9000ed46:	6978      	ldr	r0, [r7, #20]
9000ed48:	f7fb f874 	bl	90009e34 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
9000ed4c:	e136      	b.n	9000efbc <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
9000ed4e:	6979      	ldr	r1, [r7, #20]
9000ed50:	6b38      	ldr	r0, [r7, #48]	; 0x30
9000ed52:	f7fb f93d 	bl	90009fd0 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
9000ed56:	6b38      	ldr	r0, [r7, #48]	; 0x30
9000ed58:	f7fb f8fa 	bl	90009f50 <pbuf_clen>
9000ed5c:	4603      	mov	r3, r0
9000ed5e:	461a      	mov	r2, r3
9000ed60:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
9000ed64:	4413      	add	r3, r2
9000ed66:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
9000ed6a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
9000ed6e:	2b09      	cmp	r3, #9
9000ed70:	d903      	bls.n	9000ed7a <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
9000ed72:	6b38      	ldr	r0, [r7, #48]	; 0x30
9000ed74:	f7fb f85e 	bl	90009e34 <pbuf_free>
      goto memerr;
9000ed78:	e120      	b.n	9000efbc <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
9000ed7a:	68fb      	ldr	r3, [r7, #12]
9000ed7c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
9000ed7e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
9000ed82:	441a      	add	r2, r3
9000ed84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
9000ed88:	9300      	str	r3, [sp, #0]
9000ed8a:	4613      	mov	r3, r2
9000ed8c:	2200      	movs	r2, #0
9000ed8e:	6b39      	ldr	r1, [r7, #48]	; 0x30
9000ed90:	68f8      	ldr	r0, [r7, #12]
9000ed92:	f7ff fc51 	bl	9000e638 <tcp_create_segment>
9000ed96:	64f8      	str	r0, [r7, #76]	; 0x4c
9000ed98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
9000ed9a:	2b00      	cmp	r3, #0
9000ed9c:	f000 810d 	beq.w	9000efba <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
9000eda0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
9000eda2:	2b00      	cmp	r3, #0
9000eda4:	d102      	bne.n	9000edac <tcp_write+0x450>
      queue = seg;
9000eda6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
9000eda8:	647b      	str	r3, [r7, #68]	; 0x44
9000edaa:	e00c      	b.n	9000edc6 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
9000edac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
9000edae:	2b00      	cmp	r3, #0
9000edb0:	d106      	bne.n	9000edc0 <tcp_write+0x464>
9000edb2:	4b53      	ldr	r3, [pc, #332]	; (9000ef00 <tcp_write+0x5a4>)
9000edb4:	f240 22ab 	movw	r2, #683	; 0x2ab
9000edb8:	4955      	ldr	r1, [pc, #340]	; (9000ef10 <tcp_write+0x5b4>)
9000edba:	4853      	ldr	r0, [pc, #332]	; (9000ef08 <tcp_write+0x5ac>)
9000edbc:	f004 fc3c 	bl	90013638 <iprintf>
      prev_seg->next = seg;
9000edc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
9000edc2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
9000edc4:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
9000edc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
9000edc8:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
9000edca:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
9000edce:	8b3b      	ldrh	r3, [r7, #24]
9000edd0:	4413      	add	r3, r2
9000edd2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
9000edd6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
9000edda:	88fb      	ldrh	r3, [r7, #6]
9000eddc:	429a      	cmp	r2, r3
9000edde:	f4ff af3d 	bcc.w	9000ec5c <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
9000ede2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
9000ede4:	2b00      	cmp	r3, #0
9000ede6:	d02c      	beq.n	9000ee42 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
9000ede8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
9000edea:	685b      	ldr	r3, [r3, #4]
9000edec:	62fb      	str	r3, [r7, #44]	; 0x2c
9000edee:	e01e      	b.n	9000ee2e <tcp_write+0x4d2>
      p->tot_len += oversize_used;
9000edf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000edf2:	891a      	ldrh	r2, [r3, #8]
9000edf4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
9000edf6:	4413      	add	r3, r2
9000edf8:	b29a      	uxth	r2, r3
9000edfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000edfc:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
9000edfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000ee00:	681b      	ldr	r3, [r3, #0]
9000ee02:	2b00      	cmp	r3, #0
9000ee04:	d110      	bne.n	9000ee28 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
9000ee06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000ee08:	685b      	ldr	r3, [r3, #4]
9000ee0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
9000ee0c:	8952      	ldrh	r2, [r2, #10]
9000ee0e:	4413      	add	r3, r2
9000ee10:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
9000ee12:	68b9      	ldr	r1, [r7, #8]
9000ee14:	4618      	mov	r0, r3
9000ee16:	f004 fb64 	bl	900134e2 <memcpy>
        p->len += oversize_used;
9000ee1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000ee1c:	895a      	ldrh	r2, [r3, #10]
9000ee1e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
9000ee20:	4413      	add	r3, r2
9000ee22:	b29a      	uxth	r2, r3
9000ee24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000ee26:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
9000ee28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000ee2a:	681b      	ldr	r3, [r3, #0]
9000ee2c:	62fb      	str	r3, [r7, #44]	; 0x2c
9000ee2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000ee30:	2b00      	cmp	r3, #0
9000ee32:	d1dd      	bne.n	9000edf0 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
9000ee34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
9000ee36:	891a      	ldrh	r2, [r3, #8]
9000ee38:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
9000ee3a:	4413      	add	r3, r2
9000ee3c:	b29a      	uxth	r2, r3
9000ee3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
9000ee40:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
9000ee42:	8a7a      	ldrh	r2, [r7, #18]
9000ee44:	68fb      	ldr	r3, [r7, #12]
9000ee46:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
9000ee4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
9000ee4c:	2b00      	cmp	r3, #0
9000ee4e:	d018      	beq.n	9000ee82 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
9000ee50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
9000ee52:	2b00      	cmp	r3, #0
9000ee54:	d106      	bne.n	9000ee64 <tcp_write+0x508>
9000ee56:	4b2a      	ldr	r3, [pc, #168]	; (9000ef00 <tcp_write+0x5a4>)
9000ee58:	f44f 7238 	mov.w	r2, #736	; 0x2e0
9000ee5c:	492d      	ldr	r1, [pc, #180]	; (9000ef14 <tcp_write+0x5b8>)
9000ee5e:	482a      	ldr	r0, [pc, #168]	; (9000ef08 <tcp_write+0x5ac>)
9000ee60:	f004 fbea 	bl	90013638 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
9000ee64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
9000ee66:	685b      	ldr	r3, [r3, #4]
9000ee68:	6d79      	ldr	r1, [r7, #84]	; 0x54
9000ee6a:	4618      	mov	r0, r3
9000ee6c:	f7fb f8b0 	bl	90009fd0 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
9000ee70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
9000ee72:	891a      	ldrh	r2, [r3, #8]
9000ee74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
9000ee76:	891b      	ldrh	r3, [r3, #8]
9000ee78:	4413      	add	r3, r2
9000ee7a:	b29a      	uxth	r2, r3
9000ee7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
9000ee7e:	811a      	strh	r2, [r3, #8]
9000ee80:	e037      	b.n	9000eef2 <tcp_write+0x596>
  } else if (extendlen > 0) {
9000ee82:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
9000ee84:	2b00      	cmp	r3, #0
9000ee86:	d034      	beq.n	9000eef2 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
9000ee88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
9000ee8a:	2b00      	cmp	r3, #0
9000ee8c:	d003      	beq.n	9000ee96 <tcp_write+0x53a>
9000ee8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
9000ee90:	685b      	ldr	r3, [r3, #4]
9000ee92:	2b00      	cmp	r3, #0
9000ee94:	d106      	bne.n	9000eea4 <tcp_write+0x548>
9000ee96:	4b1a      	ldr	r3, [pc, #104]	; (9000ef00 <tcp_write+0x5a4>)
9000ee98:	f240 22e6 	movw	r2, #742	; 0x2e6
9000ee9c:	491e      	ldr	r1, [pc, #120]	; (9000ef18 <tcp_write+0x5bc>)
9000ee9e:	481a      	ldr	r0, [pc, #104]	; (9000ef08 <tcp_write+0x5ac>)
9000eea0:	f004 fbca 	bl	90013638 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
9000eea4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
9000eea6:	685b      	ldr	r3, [r3, #4]
9000eea8:	62bb      	str	r3, [r7, #40]	; 0x28
9000eeaa:	e009      	b.n	9000eec0 <tcp_write+0x564>
      p->tot_len += extendlen;
9000eeac:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000eeae:	891a      	ldrh	r2, [r3, #8]
9000eeb0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
9000eeb2:	4413      	add	r3, r2
9000eeb4:	b29a      	uxth	r2, r3
9000eeb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000eeb8:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
9000eeba:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000eebc:	681b      	ldr	r3, [r3, #0]
9000eebe:	62bb      	str	r3, [r7, #40]	; 0x28
9000eec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000eec2:	681b      	ldr	r3, [r3, #0]
9000eec4:	2b00      	cmp	r3, #0
9000eec6:	d1f1      	bne.n	9000eeac <tcp_write+0x550>
    }
    p->tot_len += extendlen;
9000eec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000eeca:	891a      	ldrh	r2, [r3, #8]
9000eecc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
9000eece:	4413      	add	r3, r2
9000eed0:	b29a      	uxth	r2, r3
9000eed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000eed4:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
9000eed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000eed8:	895a      	ldrh	r2, [r3, #10]
9000eeda:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
9000eedc:	4413      	add	r3, r2
9000eede:	b29a      	uxth	r2, r3
9000eee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000eee2:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
9000eee4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
9000eee6:	891a      	ldrh	r2, [r3, #8]
9000eee8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
9000eeea:	4413      	add	r3, r2
9000eeec:	b29a      	uxth	r2, r3
9000eeee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
9000eef0:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
9000eef2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
9000eef4:	2b00      	cmp	r3, #0
9000eef6:	d111      	bne.n	9000ef1c <tcp_write+0x5c0>
    pcb->unsent = queue;
9000eef8:	68fb      	ldr	r3, [r7, #12]
9000eefa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
9000eefc:	66da      	str	r2, [r3, #108]	; 0x6c
9000eefe:	e010      	b.n	9000ef22 <tcp_write+0x5c6>
9000ef00:	90015f30 	.word	0x90015f30
9000ef04:	900161d0 	.word	0x900161d0
9000ef08:	90015f84 	.word	0x90015f84
9000ef0c:	90016210 	.word	0x90016210
9000ef10:	90016220 	.word	0x90016220
9000ef14:	90016234 	.word	0x90016234
9000ef18:	9001626c 	.word	0x9001626c
  } else {
    last_unsent->next = queue;
9000ef1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
9000ef1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
9000ef20:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
9000ef22:	68fb      	ldr	r3, [r7, #12]
9000ef24:	6dda      	ldr	r2, [r3, #92]	; 0x5c
9000ef26:	88fb      	ldrh	r3, [r7, #6]
9000ef28:	441a      	add	r2, r3
9000ef2a:	68fb      	ldr	r3, [r7, #12]
9000ef2c:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
9000ef2e:	68fb      	ldr	r3, [r7, #12]
9000ef30:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
9000ef34:	88fb      	ldrh	r3, [r7, #6]
9000ef36:	1ad3      	subs	r3, r2, r3
9000ef38:	b29a      	uxth	r2, r3
9000ef3a:	68fb      	ldr	r3, [r7, #12]
9000ef3c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
9000ef40:	68fb      	ldr	r3, [r7, #12]
9000ef42:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
9000ef46:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
9000ef4a:	68fb      	ldr	r3, [r7, #12]
9000ef4c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
9000ef50:	2b00      	cmp	r3, #0
9000ef52:	d00e      	beq.n	9000ef72 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
9000ef54:	68fb      	ldr	r3, [r7, #12]
9000ef56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
9000ef58:	2b00      	cmp	r3, #0
9000ef5a:	d10a      	bne.n	9000ef72 <tcp_write+0x616>
9000ef5c:	68fb      	ldr	r3, [r7, #12]
9000ef5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
9000ef60:	2b00      	cmp	r3, #0
9000ef62:	d106      	bne.n	9000ef72 <tcp_write+0x616>
9000ef64:	4b2c      	ldr	r3, [pc, #176]	; (9000f018 <tcp_write+0x6bc>)
9000ef66:	f240 3212 	movw	r2, #786	; 0x312
9000ef6a:	492c      	ldr	r1, [pc, #176]	; (9000f01c <tcp_write+0x6c0>)
9000ef6c:	482c      	ldr	r0, [pc, #176]	; (9000f020 <tcp_write+0x6c4>)
9000ef6e:	f004 fb63 	bl	90013638 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
9000ef72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
9000ef74:	2b00      	cmp	r3, #0
9000ef76:	d016      	beq.n	9000efa6 <tcp_write+0x64a>
9000ef78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
9000ef7a:	68db      	ldr	r3, [r3, #12]
9000ef7c:	2b00      	cmp	r3, #0
9000ef7e:	d012      	beq.n	9000efa6 <tcp_write+0x64a>
9000ef80:	797b      	ldrb	r3, [r7, #5]
9000ef82:	f003 0302 	and.w	r3, r3, #2
9000ef86:	2b00      	cmp	r3, #0
9000ef88:	d10d      	bne.n	9000efa6 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
9000ef8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
9000ef8c:	68db      	ldr	r3, [r3, #12]
9000ef8e:	899b      	ldrh	r3, [r3, #12]
9000ef90:	b29c      	uxth	r4, r3
9000ef92:	2008      	movs	r0, #8
9000ef94:	f7f9 fa5e 	bl	90008454 <lwip_htons>
9000ef98:	4603      	mov	r3, r0
9000ef9a:	461a      	mov	r2, r3
9000ef9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
9000ef9e:	68db      	ldr	r3, [r3, #12]
9000efa0:	4322      	orrs	r2, r4
9000efa2:	b292      	uxth	r2, r2
9000efa4:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
9000efa6:	2300      	movs	r3, #0
9000efa8:	e031      	b.n	9000f00e <tcp_write+0x6b2>
          goto memerr;
9000efaa:	bf00      	nop
9000efac:	e006      	b.n	9000efbc <tcp_write+0x660>
            goto memerr;
9000efae:	bf00      	nop
9000efb0:	e004      	b.n	9000efbc <tcp_write+0x660>
        goto memerr;
9000efb2:	bf00      	nop
9000efb4:	e002      	b.n	9000efbc <tcp_write+0x660>
        goto memerr;
9000efb6:	bf00      	nop
9000efb8:	e000      	b.n	9000efbc <tcp_write+0x660>
      goto memerr;
9000efba:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
9000efbc:	68fb      	ldr	r3, [r7, #12]
9000efbe:	8b5b      	ldrh	r3, [r3, #26]
9000efc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
9000efc4:	b29a      	uxth	r2, r3
9000efc6:	68fb      	ldr	r3, [r7, #12]
9000efc8:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
9000efca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
9000efcc:	2b00      	cmp	r3, #0
9000efce:	d002      	beq.n	9000efd6 <tcp_write+0x67a>
    pbuf_free(concat_p);
9000efd0:	6d78      	ldr	r0, [r7, #84]	; 0x54
9000efd2:	f7fa ff2f 	bl	90009e34 <pbuf_free>
  }
  if (queue != NULL) {
9000efd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
9000efd8:	2b00      	cmp	r3, #0
9000efda:	d002      	beq.n	9000efe2 <tcp_write+0x686>
    tcp_segs_free(queue);
9000efdc:	6c78      	ldr	r0, [r7, #68]	; 0x44
9000efde:	f7fc fb4d 	bl	9000b67c <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
9000efe2:	68fb      	ldr	r3, [r7, #12]
9000efe4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
9000efe8:	2b00      	cmp	r3, #0
9000efea:	d00e      	beq.n	9000f00a <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
9000efec:	68fb      	ldr	r3, [r7, #12]
9000efee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
9000eff0:	2b00      	cmp	r3, #0
9000eff2:	d10a      	bne.n	9000f00a <tcp_write+0x6ae>
9000eff4:	68fb      	ldr	r3, [r7, #12]
9000eff6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
9000eff8:	2b00      	cmp	r3, #0
9000effa:	d106      	bne.n	9000f00a <tcp_write+0x6ae>
9000effc:	4b06      	ldr	r3, [pc, #24]	; (9000f018 <tcp_write+0x6bc>)
9000effe:	f240 3227 	movw	r2, #807	; 0x327
9000f002:	4906      	ldr	r1, [pc, #24]	; (9000f01c <tcp_write+0x6c0>)
9000f004:	4806      	ldr	r0, [pc, #24]	; (9000f020 <tcp_write+0x6c4>)
9000f006:	f004 fb17 	bl	90013638 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
9000f00a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
9000f00e:	4618      	mov	r0, r3
9000f010:	375c      	adds	r7, #92	; 0x5c
9000f012:	46bd      	mov	sp, r7
9000f014:	bd90      	pop	{r4, r7, pc}
9000f016:	bf00      	nop
9000f018:	90015f30 	.word	0x90015f30
9000f01c:	900162a4 	.word	0x900162a4
9000f020:	90015f84 	.word	0x90015f84

9000f024 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
9000f024:	b590      	push	{r4, r7, lr}
9000f026:	b08b      	sub	sp, #44	; 0x2c
9000f028:	af02      	add	r7, sp, #8
9000f02a:	6078      	str	r0, [r7, #4]
9000f02c:	460b      	mov	r3, r1
9000f02e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
9000f030:	2300      	movs	r3, #0
9000f032:	61fb      	str	r3, [r7, #28]
9000f034:	2300      	movs	r3, #0
9000f036:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
9000f038:	2300      	movs	r3, #0
9000f03a:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
9000f03c:	687b      	ldr	r3, [r7, #4]
9000f03e:	2b00      	cmp	r3, #0
9000f040:	d106      	bne.n	9000f050 <tcp_split_unsent_seg+0x2c>
9000f042:	4b95      	ldr	r3, [pc, #596]	; (9000f298 <tcp_split_unsent_seg+0x274>)
9000f044:	f240 324b 	movw	r2, #843	; 0x34b
9000f048:	4994      	ldr	r1, [pc, #592]	; (9000f29c <tcp_split_unsent_seg+0x278>)
9000f04a:	4895      	ldr	r0, [pc, #596]	; (9000f2a0 <tcp_split_unsent_seg+0x27c>)
9000f04c:	f004 faf4 	bl	90013638 <iprintf>

  useg = pcb->unsent;
9000f050:	687b      	ldr	r3, [r7, #4]
9000f052:	6edb      	ldr	r3, [r3, #108]	; 0x6c
9000f054:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
9000f056:	697b      	ldr	r3, [r7, #20]
9000f058:	2b00      	cmp	r3, #0
9000f05a:	d102      	bne.n	9000f062 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
9000f05c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
9000f060:	e116      	b.n	9000f290 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
9000f062:	887b      	ldrh	r3, [r7, #2]
9000f064:	2b00      	cmp	r3, #0
9000f066:	d109      	bne.n	9000f07c <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
9000f068:	4b8b      	ldr	r3, [pc, #556]	; (9000f298 <tcp_split_unsent_seg+0x274>)
9000f06a:	f240 3253 	movw	r2, #851	; 0x353
9000f06e:	498d      	ldr	r1, [pc, #564]	; (9000f2a4 <tcp_split_unsent_seg+0x280>)
9000f070:	488b      	ldr	r0, [pc, #556]	; (9000f2a0 <tcp_split_unsent_seg+0x27c>)
9000f072:	f004 fae1 	bl	90013638 <iprintf>
    return ERR_VAL;
9000f076:	f06f 0305 	mvn.w	r3, #5
9000f07a:	e109      	b.n	9000f290 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
9000f07c:	697b      	ldr	r3, [r7, #20]
9000f07e:	891b      	ldrh	r3, [r3, #8]
9000f080:	887a      	ldrh	r2, [r7, #2]
9000f082:	429a      	cmp	r2, r3
9000f084:	d301      	bcc.n	9000f08a <tcp_split_unsent_seg+0x66>
    return ERR_OK;
9000f086:	2300      	movs	r3, #0
9000f088:	e102      	b.n	9000f290 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
9000f08a:	687b      	ldr	r3, [r7, #4]
9000f08c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
9000f08e:	887a      	ldrh	r2, [r7, #2]
9000f090:	429a      	cmp	r2, r3
9000f092:	d906      	bls.n	9000f0a2 <tcp_split_unsent_seg+0x7e>
9000f094:	4b80      	ldr	r3, [pc, #512]	; (9000f298 <tcp_split_unsent_seg+0x274>)
9000f096:	f240 325b 	movw	r2, #859	; 0x35b
9000f09a:	4983      	ldr	r1, [pc, #524]	; (9000f2a8 <tcp_split_unsent_seg+0x284>)
9000f09c:	4880      	ldr	r0, [pc, #512]	; (9000f2a0 <tcp_split_unsent_seg+0x27c>)
9000f09e:	f004 facb 	bl	90013638 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
9000f0a2:	697b      	ldr	r3, [r7, #20]
9000f0a4:	891b      	ldrh	r3, [r3, #8]
9000f0a6:	2b00      	cmp	r3, #0
9000f0a8:	d106      	bne.n	9000f0b8 <tcp_split_unsent_seg+0x94>
9000f0aa:	4b7b      	ldr	r3, [pc, #492]	; (9000f298 <tcp_split_unsent_seg+0x274>)
9000f0ac:	f44f 7257 	mov.w	r2, #860	; 0x35c
9000f0b0:	497e      	ldr	r1, [pc, #504]	; (9000f2ac <tcp_split_unsent_seg+0x288>)
9000f0b2:	487b      	ldr	r0, [pc, #492]	; (9000f2a0 <tcp_split_unsent_seg+0x27c>)
9000f0b4:	f004 fac0 	bl	90013638 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
9000f0b8:	697b      	ldr	r3, [r7, #20]
9000f0ba:	7a9b      	ldrb	r3, [r3, #10]
9000f0bc:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
9000f0be:	7bfb      	ldrb	r3, [r7, #15]
9000f0c0:	009b      	lsls	r3, r3, #2
9000f0c2:	b2db      	uxtb	r3, r3
9000f0c4:	f003 0304 	and.w	r3, r3, #4
9000f0c8:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
9000f0ca:	697b      	ldr	r3, [r7, #20]
9000f0cc:	891a      	ldrh	r2, [r3, #8]
9000f0ce:	887b      	ldrh	r3, [r7, #2]
9000f0d0:	1ad3      	subs	r3, r2, r3
9000f0d2:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
9000f0d4:	7bbb      	ldrb	r3, [r7, #14]
9000f0d6:	b29a      	uxth	r2, r3
9000f0d8:	89bb      	ldrh	r3, [r7, #12]
9000f0da:	4413      	add	r3, r2
9000f0dc:	b29b      	uxth	r3, r3
9000f0de:	f44f 7220 	mov.w	r2, #640	; 0x280
9000f0e2:	4619      	mov	r1, r3
9000f0e4:	2036      	movs	r0, #54	; 0x36
9000f0e6:	f7fa fbc1 	bl	9000986c <pbuf_alloc>
9000f0ea:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
9000f0ec:	693b      	ldr	r3, [r7, #16]
9000f0ee:	2b00      	cmp	r3, #0
9000f0f0:	f000 80b7 	beq.w	9000f262 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
9000f0f4:	697b      	ldr	r3, [r7, #20]
9000f0f6:	685b      	ldr	r3, [r3, #4]
9000f0f8:	891a      	ldrh	r2, [r3, #8]
9000f0fa:	697b      	ldr	r3, [r7, #20]
9000f0fc:	891b      	ldrh	r3, [r3, #8]
9000f0fe:	1ad3      	subs	r3, r2, r3
9000f100:	b29a      	uxth	r2, r3
9000f102:	887b      	ldrh	r3, [r7, #2]
9000f104:	4413      	add	r3, r2
9000f106:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
9000f108:	697b      	ldr	r3, [r7, #20]
9000f10a:	6858      	ldr	r0, [r3, #4]
9000f10c:	693b      	ldr	r3, [r7, #16]
9000f10e:	685a      	ldr	r2, [r3, #4]
9000f110:	7bbb      	ldrb	r3, [r7, #14]
9000f112:	18d1      	adds	r1, r2, r3
9000f114:	897b      	ldrh	r3, [r7, #10]
9000f116:	89ba      	ldrh	r2, [r7, #12]
9000f118:	f7fb f882 	bl	9000a220 <pbuf_copy_partial>
9000f11c:	4603      	mov	r3, r0
9000f11e:	461a      	mov	r2, r3
9000f120:	89bb      	ldrh	r3, [r7, #12]
9000f122:	4293      	cmp	r3, r2
9000f124:	f040 809f 	bne.w	9000f266 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
9000f128:	697b      	ldr	r3, [r7, #20]
9000f12a:	68db      	ldr	r3, [r3, #12]
9000f12c:	899b      	ldrh	r3, [r3, #12]
9000f12e:	b29b      	uxth	r3, r3
9000f130:	4618      	mov	r0, r3
9000f132:	f7f9 f98f 	bl	90008454 <lwip_htons>
9000f136:	4603      	mov	r3, r0
9000f138:	b2db      	uxtb	r3, r3
9000f13a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
9000f13e:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
9000f140:	2300      	movs	r3, #0
9000f142:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
9000f144:	7efb      	ldrb	r3, [r7, #27]
9000f146:	f003 0308 	and.w	r3, r3, #8
9000f14a:	2b00      	cmp	r3, #0
9000f14c:	d007      	beq.n	9000f15e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
9000f14e:	7efb      	ldrb	r3, [r7, #27]
9000f150:	f023 0308 	bic.w	r3, r3, #8
9000f154:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
9000f156:	7ebb      	ldrb	r3, [r7, #26]
9000f158:	f043 0308 	orr.w	r3, r3, #8
9000f15c:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
9000f15e:	7efb      	ldrb	r3, [r7, #27]
9000f160:	f003 0301 	and.w	r3, r3, #1
9000f164:	2b00      	cmp	r3, #0
9000f166:	d007      	beq.n	9000f178 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
9000f168:	7efb      	ldrb	r3, [r7, #27]
9000f16a:	f023 0301 	bic.w	r3, r3, #1
9000f16e:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
9000f170:	7ebb      	ldrb	r3, [r7, #26]
9000f172:	f043 0301 	orr.w	r3, r3, #1
9000f176:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
9000f178:	697b      	ldr	r3, [r7, #20]
9000f17a:	68db      	ldr	r3, [r3, #12]
9000f17c:	685b      	ldr	r3, [r3, #4]
9000f17e:	4618      	mov	r0, r3
9000f180:	f7f9 f97d 	bl	9000847e <lwip_htonl>
9000f184:	4602      	mov	r2, r0
9000f186:	887b      	ldrh	r3, [r7, #2]
9000f188:	18d1      	adds	r1, r2, r3
9000f18a:	7eba      	ldrb	r2, [r7, #26]
9000f18c:	7bfb      	ldrb	r3, [r7, #15]
9000f18e:	9300      	str	r3, [sp, #0]
9000f190:	460b      	mov	r3, r1
9000f192:	6939      	ldr	r1, [r7, #16]
9000f194:	6878      	ldr	r0, [r7, #4]
9000f196:	f7ff fa4f 	bl	9000e638 <tcp_create_segment>
9000f19a:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
9000f19c:	69fb      	ldr	r3, [r7, #28]
9000f19e:	2b00      	cmp	r3, #0
9000f1a0:	d063      	beq.n	9000f26a <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
9000f1a2:	697b      	ldr	r3, [r7, #20]
9000f1a4:	685b      	ldr	r3, [r3, #4]
9000f1a6:	4618      	mov	r0, r3
9000f1a8:	f7fa fed2 	bl	90009f50 <pbuf_clen>
9000f1ac:	4603      	mov	r3, r0
9000f1ae:	461a      	mov	r2, r3
9000f1b0:	687b      	ldr	r3, [r7, #4]
9000f1b2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
9000f1b6:	1a9b      	subs	r3, r3, r2
9000f1b8:	b29a      	uxth	r2, r3
9000f1ba:	687b      	ldr	r3, [r7, #4]
9000f1bc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
9000f1c0:	697b      	ldr	r3, [r7, #20]
9000f1c2:	6858      	ldr	r0, [r3, #4]
9000f1c4:	697b      	ldr	r3, [r7, #20]
9000f1c6:	685b      	ldr	r3, [r3, #4]
9000f1c8:	891a      	ldrh	r2, [r3, #8]
9000f1ca:	89bb      	ldrh	r3, [r7, #12]
9000f1cc:	1ad3      	subs	r3, r2, r3
9000f1ce:	b29b      	uxth	r3, r3
9000f1d0:	4619      	mov	r1, r3
9000f1d2:	f7fa fca9 	bl	90009b28 <pbuf_realloc>
  useg->len -= remainder;
9000f1d6:	697b      	ldr	r3, [r7, #20]
9000f1d8:	891a      	ldrh	r2, [r3, #8]
9000f1da:	89bb      	ldrh	r3, [r7, #12]
9000f1dc:	1ad3      	subs	r3, r2, r3
9000f1de:	b29a      	uxth	r2, r3
9000f1e0:	697b      	ldr	r3, [r7, #20]
9000f1e2:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
9000f1e4:	697b      	ldr	r3, [r7, #20]
9000f1e6:	68db      	ldr	r3, [r3, #12]
9000f1e8:	899b      	ldrh	r3, [r3, #12]
9000f1ea:	b29c      	uxth	r4, r3
9000f1ec:	7efb      	ldrb	r3, [r7, #27]
9000f1ee:	b29b      	uxth	r3, r3
9000f1f0:	4618      	mov	r0, r3
9000f1f2:	f7f9 f92f 	bl	90008454 <lwip_htons>
9000f1f6:	4603      	mov	r3, r0
9000f1f8:	461a      	mov	r2, r3
9000f1fa:	697b      	ldr	r3, [r7, #20]
9000f1fc:	68db      	ldr	r3, [r3, #12]
9000f1fe:	4322      	orrs	r2, r4
9000f200:	b292      	uxth	r2, r2
9000f202:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
9000f204:	697b      	ldr	r3, [r7, #20]
9000f206:	685b      	ldr	r3, [r3, #4]
9000f208:	4618      	mov	r0, r3
9000f20a:	f7fa fea1 	bl	90009f50 <pbuf_clen>
9000f20e:	4603      	mov	r3, r0
9000f210:	461a      	mov	r2, r3
9000f212:	687b      	ldr	r3, [r7, #4]
9000f214:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
9000f218:	4413      	add	r3, r2
9000f21a:	b29a      	uxth	r2, r3
9000f21c:	687b      	ldr	r3, [r7, #4]
9000f21e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
9000f222:	69fb      	ldr	r3, [r7, #28]
9000f224:	685b      	ldr	r3, [r3, #4]
9000f226:	4618      	mov	r0, r3
9000f228:	f7fa fe92 	bl	90009f50 <pbuf_clen>
9000f22c:	4603      	mov	r3, r0
9000f22e:	461a      	mov	r2, r3
9000f230:	687b      	ldr	r3, [r7, #4]
9000f232:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
9000f236:	4413      	add	r3, r2
9000f238:	b29a      	uxth	r2, r3
9000f23a:	687b      	ldr	r3, [r7, #4]
9000f23c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
9000f240:	697b      	ldr	r3, [r7, #20]
9000f242:	681a      	ldr	r2, [r3, #0]
9000f244:	69fb      	ldr	r3, [r7, #28]
9000f246:	601a      	str	r2, [r3, #0]
  useg->next = seg;
9000f248:	697b      	ldr	r3, [r7, #20]
9000f24a:	69fa      	ldr	r2, [r7, #28]
9000f24c:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
9000f24e:	69fb      	ldr	r3, [r7, #28]
9000f250:	681b      	ldr	r3, [r3, #0]
9000f252:	2b00      	cmp	r3, #0
9000f254:	d103      	bne.n	9000f25e <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
9000f256:	687b      	ldr	r3, [r7, #4]
9000f258:	2200      	movs	r2, #0
9000f25a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
9000f25e:	2300      	movs	r3, #0
9000f260:	e016      	b.n	9000f290 <tcp_split_unsent_seg+0x26c>
    goto memerr;
9000f262:	bf00      	nop
9000f264:	e002      	b.n	9000f26c <tcp_split_unsent_seg+0x248>
    goto memerr;
9000f266:	bf00      	nop
9000f268:	e000      	b.n	9000f26c <tcp_split_unsent_seg+0x248>
    goto memerr;
9000f26a:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
9000f26c:	69fb      	ldr	r3, [r7, #28]
9000f26e:	2b00      	cmp	r3, #0
9000f270:	d006      	beq.n	9000f280 <tcp_split_unsent_seg+0x25c>
9000f272:	4b09      	ldr	r3, [pc, #36]	; (9000f298 <tcp_split_unsent_seg+0x274>)
9000f274:	f44f 7276 	mov.w	r2, #984	; 0x3d8
9000f278:	490d      	ldr	r1, [pc, #52]	; (9000f2b0 <tcp_split_unsent_seg+0x28c>)
9000f27a:	4809      	ldr	r0, [pc, #36]	; (9000f2a0 <tcp_split_unsent_seg+0x27c>)
9000f27c:	f004 f9dc 	bl	90013638 <iprintf>
  if (p != NULL) {
9000f280:	693b      	ldr	r3, [r7, #16]
9000f282:	2b00      	cmp	r3, #0
9000f284:	d002      	beq.n	9000f28c <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
9000f286:	6938      	ldr	r0, [r7, #16]
9000f288:	f7fa fdd4 	bl	90009e34 <pbuf_free>
  }

  return ERR_MEM;
9000f28c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
9000f290:	4618      	mov	r0, r3
9000f292:	3724      	adds	r7, #36	; 0x24
9000f294:	46bd      	mov	sp, r7
9000f296:	bd90      	pop	{r4, r7, pc}
9000f298:	90015f30 	.word	0x90015f30
9000f29c:	900162c4 	.word	0x900162c4
9000f2a0:	90015f84 	.word	0x90015f84
9000f2a4:	900162e8 	.word	0x900162e8
9000f2a8:	9001630c 	.word	0x9001630c
9000f2ac:	9001631c 	.word	0x9001631c
9000f2b0:	9001632c 	.word	0x9001632c

9000f2b4 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
9000f2b4:	b590      	push	{r4, r7, lr}
9000f2b6:	b085      	sub	sp, #20
9000f2b8:	af00      	add	r7, sp, #0
9000f2ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
9000f2bc:	687b      	ldr	r3, [r7, #4]
9000f2be:	2b00      	cmp	r3, #0
9000f2c0:	d106      	bne.n	9000f2d0 <tcp_send_fin+0x1c>
9000f2c2:	4b21      	ldr	r3, [pc, #132]	; (9000f348 <tcp_send_fin+0x94>)
9000f2c4:	f240 32eb 	movw	r2, #1003	; 0x3eb
9000f2c8:	4920      	ldr	r1, [pc, #128]	; (9000f34c <tcp_send_fin+0x98>)
9000f2ca:	4821      	ldr	r0, [pc, #132]	; (9000f350 <tcp_send_fin+0x9c>)
9000f2cc:	f004 f9b4 	bl	90013638 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
9000f2d0:	687b      	ldr	r3, [r7, #4]
9000f2d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
9000f2d4:	2b00      	cmp	r3, #0
9000f2d6:	d02e      	beq.n	9000f336 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
9000f2d8:	687b      	ldr	r3, [r7, #4]
9000f2da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
9000f2dc:	60fb      	str	r3, [r7, #12]
9000f2de:	e002      	b.n	9000f2e6 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
9000f2e0:	68fb      	ldr	r3, [r7, #12]
9000f2e2:	681b      	ldr	r3, [r3, #0]
9000f2e4:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
9000f2e6:	68fb      	ldr	r3, [r7, #12]
9000f2e8:	681b      	ldr	r3, [r3, #0]
9000f2ea:	2b00      	cmp	r3, #0
9000f2ec:	d1f8      	bne.n	9000f2e0 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
9000f2ee:	68fb      	ldr	r3, [r7, #12]
9000f2f0:	68db      	ldr	r3, [r3, #12]
9000f2f2:	899b      	ldrh	r3, [r3, #12]
9000f2f4:	b29b      	uxth	r3, r3
9000f2f6:	4618      	mov	r0, r3
9000f2f8:	f7f9 f8ac 	bl	90008454 <lwip_htons>
9000f2fc:	4603      	mov	r3, r0
9000f2fe:	b2db      	uxtb	r3, r3
9000f300:	f003 0307 	and.w	r3, r3, #7
9000f304:	2b00      	cmp	r3, #0
9000f306:	d116      	bne.n	9000f336 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
9000f308:	68fb      	ldr	r3, [r7, #12]
9000f30a:	68db      	ldr	r3, [r3, #12]
9000f30c:	899b      	ldrh	r3, [r3, #12]
9000f30e:	b29c      	uxth	r4, r3
9000f310:	2001      	movs	r0, #1
9000f312:	f7f9 f89f 	bl	90008454 <lwip_htons>
9000f316:	4603      	mov	r3, r0
9000f318:	461a      	mov	r2, r3
9000f31a:	68fb      	ldr	r3, [r7, #12]
9000f31c:	68db      	ldr	r3, [r3, #12]
9000f31e:	4322      	orrs	r2, r4
9000f320:	b292      	uxth	r2, r2
9000f322:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
9000f324:	687b      	ldr	r3, [r7, #4]
9000f326:	8b5b      	ldrh	r3, [r3, #26]
9000f328:	f043 0320 	orr.w	r3, r3, #32
9000f32c:	b29a      	uxth	r2, r3
9000f32e:	687b      	ldr	r3, [r7, #4]
9000f330:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
9000f332:	2300      	movs	r3, #0
9000f334:	e004      	b.n	9000f340 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
9000f336:	2101      	movs	r1, #1
9000f338:	6878      	ldr	r0, [r7, #4]
9000f33a:	f000 f80b 	bl	9000f354 <tcp_enqueue_flags>
9000f33e:	4603      	mov	r3, r0
}
9000f340:	4618      	mov	r0, r3
9000f342:	3714      	adds	r7, #20
9000f344:	46bd      	mov	sp, r7
9000f346:	bd90      	pop	{r4, r7, pc}
9000f348:	90015f30 	.word	0x90015f30
9000f34c:	90016338 	.word	0x90016338
9000f350:	90015f84 	.word	0x90015f84

9000f354 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
9000f354:	b580      	push	{r7, lr}
9000f356:	b08a      	sub	sp, #40	; 0x28
9000f358:	af02      	add	r7, sp, #8
9000f35a:	6078      	str	r0, [r7, #4]
9000f35c:	460b      	mov	r3, r1
9000f35e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
9000f360:	2300      	movs	r3, #0
9000f362:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
9000f364:	2300      	movs	r3, #0
9000f366:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
9000f368:	78fb      	ldrb	r3, [r7, #3]
9000f36a:	f003 0303 	and.w	r3, r3, #3
9000f36e:	2b00      	cmp	r3, #0
9000f370:	d106      	bne.n	9000f380 <tcp_enqueue_flags+0x2c>
9000f372:	4b67      	ldr	r3, [pc, #412]	; (9000f510 <tcp_enqueue_flags+0x1bc>)
9000f374:	f240 4211 	movw	r2, #1041	; 0x411
9000f378:	4966      	ldr	r1, [pc, #408]	; (9000f514 <tcp_enqueue_flags+0x1c0>)
9000f37a:	4867      	ldr	r0, [pc, #412]	; (9000f518 <tcp_enqueue_flags+0x1c4>)
9000f37c:	f004 f95c 	bl	90013638 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
9000f380:	687b      	ldr	r3, [r7, #4]
9000f382:	2b00      	cmp	r3, #0
9000f384:	d106      	bne.n	9000f394 <tcp_enqueue_flags+0x40>
9000f386:	4b62      	ldr	r3, [pc, #392]	; (9000f510 <tcp_enqueue_flags+0x1bc>)
9000f388:	f240 4213 	movw	r2, #1043	; 0x413
9000f38c:	4963      	ldr	r1, [pc, #396]	; (9000f51c <tcp_enqueue_flags+0x1c8>)
9000f38e:	4862      	ldr	r0, [pc, #392]	; (9000f518 <tcp_enqueue_flags+0x1c4>)
9000f390:	f004 f952 	bl	90013638 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
9000f394:	78fb      	ldrb	r3, [r7, #3]
9000f396:	f003 0302 	and.w	r3, r3, #2
9000f39a:	2b00      	cmp	r3, #0
9000f39c:	d001      	beq.n	9000f3a2 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
9000f39e:	2301      	movs	r3, #1
9000f3a0:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
9000f3a2:	7ffb      	ldrb	r3, [r7, #31]
9000f3a4:	009b      	lsls	r3, r3, #2
9000f3a6:	b2db      	uxtb	r3, r3
9000f3a8:	f003 0304 	and.w	r3, r3, #4
9000f3ac:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
9000f3ae:	7dfb      	ldrb	r3, [r7, #23]
9000f3b0:	b29b      	uxth	r3, r3
9000f3b2:	f44f 7220 	mov.w	r2, #640	; 0x280
9000f3b6:	4619      	mov	r1, r3
9000f3b8:	2036      	movs	r0, #54	; 0x36
9000f3ba:	f7fa fa57 	bl	9000986c <pbuf_alloc>
9000f3be:	6138      	str	r0, [r7, #16]
9000f3c0:	693b      	ldr	r3, [r7, #16]
9000f3c2:	2b00      	cmp	r3, #0
9000f3c4:	d109      	bne.n	9000f3da <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
9000f3c6:	687b      	ldr	r3, [r7, #4]
9000f3c8:	8b5b      	ldrh	r3, [r3, #26]
9000f3ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
9000f3ce:	b29a      	uxth	r2, r3
9000f3d0:	687b      	ldr	r3, [r7, #4]
9000f3d2:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
9000f3d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
9000f3d8:	e095      	b.n	9000f506 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
9000f3da:	693b      	ldr	r3, [r7, #16]
9000f3dc:	895a      	ldrh	r2, [r3, #10]
9000f3de:	7dfb      	ldrb	r3, [r7, #23]
9000f3e0:	b29b      	uxth	r3, r3
9000f3e2:	429a      	cmp	r2, r3
9000f3e4:	d206      	bcs.n	9000f3f4 <tcp_enqueue_flags+0xa0>
9000f3e6:	4b4a      	ldr	r3, [pc, #296]	; (9000f510 <tcp_enqueue_flags+0x1bc>)
9000f3e8:	f240 4239 	movw	r2, #1081	; 0x439
9000f3ec:	494c      	ldr	r1, [pc, #304]	; (9000f520 <tcp_enqueue_flags+0x1cc>)
9000f3ee:	484a      	ldr	r0, [pc, #296]	; (9000f518 <tcp_enqueue_flags+0x1c4>)
9000f3f0:	f004 f922 	bl	90013638 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
9000f3f4:	687b      	ldr	r3, [r7, #4]
9000f3f6:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
9000f3f8:	78fa      	ldrb	r2, [r7, #3]
9000f3fa:	7ffb      	ldrb	r3, [r7, #31]
9000f3fc:	9300      	str	r3, [sp, #0]
9000f3fe:	460b      	mov	r3, r1
9000f400:	6939      	ldr	r1, [r7, #16]
9000f402:	6878      	ldr	r0, [r7, #4]
9000f404:	f7ff f918 	bl	9000e638 <tcp_create_segment>
9000f408:	60f8      	str	r0, [r7, #12]
9000f40a:	68fb      	ldr	r3, [r7, #12]
9000f40c:	2b00      	cmp	r3, #0
9000f40e:	d109      	bne.n	9000f424 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
9000f410:	687b      	ldr	r3, [r7, #4]
9000f412:	8b5b      	ldrh	r3, [r3, #26]
9000f414:	f043 0380 	orr.w	r3, r3, #128	; 0x80
9000f418:	b29a      	uxth	r2, r3
9000f41a:	687b      	ldr	r3, [r7, #4]
9000f41c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
9000f41e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
9000f422:	e070      	b.n	9000f506 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
9000f424:	68fb      	ldr	r3, [r7, #12]
9000f426:	68db      	ldr	r3, [r3, #12]
9000f428:	f003 0303 	and.w	r3, r3, #3
9000f42c:	2b00      	cmp	r3, #0
9000f42e:	d006      	beq.n	9000f43e <tcp_enqueue_flags+0xea>
9000f430:	4b37      	ldr	r3, [pc, #220]	; (9000f510 <tcp_enqueue_flags+0x1bc>)
9000f432:	f240 4242 	movw	r2, #1090	; 0x442
9000f436:	493b      	ldr	r1, [pc, #236]	; (9000f524 <tcp_enqueue_flags+0x1d0>)
9000f438:	4837      	ldr	r0, [pc, #220]	; (9000f518 <tcp_enqueue_flags+0x1c4>)
9000f43a:	f004 f8fd 	bl	90013638 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
9000f43e:	68fb      	ldr	r3, [r7, #12]
9000f440:	891b      	ldrh	r3, [r3, #8]
9000f442:	2b00      	cmp	r3, #0
9000f444:	d006      	beq.n	9000f454 <tcp_enqueue_flags+0x100>
9000f446:	4b32      	ldr	r3, [pc, #200]	; (9000f510 <tcp_enqueue_flags+0x1bc>)
9000f448:	f240 4243 	movw	r2, #1091	; 0x443
9000f44c:	4936      	ldr	r1, [pc, #216]	; (9000f528 <tcp_enqueue_flags+0x1d4>)
9000f44e:	4832      	ldr	r0, [pc, #200]	; (9000f518 <tcp_enqueue_flags+0x1c4>)
9000f450:	f004 f8f2 	bl	90013638 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
9000f454:	687b      	ldr	r3, [r7, #4]
9000f456:	6edb      	ldr	r3, [r3, #108]	; 0x6c
9000f458:	2b00      	cmp	r3, #0
9000f45a:	d103      	bne.n	9000f464 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
9000f45c:	687b      	ldr	r3, [r7, #4]
9000f45e:	68fa      	ldr	r2, [r7, #12]
9000f460:	66da      	str	r2, [r3, #108]	; 0x6c
9000f462:	e00d      	b.n	9000f480 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
9000f464:	687b      	ldr	r3, [r7, #4]
9000f466:	6edb      	ldr	r3, [r3, #108]	; 0x6c
9000f468:	61bb      	str	r3, [r7, #24]
9000f46a:	e002      	b.n	9000f472 <tcp_enqueue_flags+0x11e>
9000f46c:	69bb      	ldr	r3, [r7, #24]
9000f46e:	681b      	ldr	r3, [r3, #0]
9000f470:	61bb      	str	r3, [r7, #24]
9000f472:	69bb      	ldr	r3, [r7, #24]
9000f474:	681b      	ldr	r3, [r3, #0]
9000f476:	2b00      	cmp	r3, #0
9000f478:	d1f8      	bne.n	9000f46c <tcp_enqueue_flags+0x118>
    useg->next = seg;
9000f47a:	69bb      	ldr	r3, [r7, #24]
9000f47c:	68fa      	ldr	r2, [r7, #12]
9000f47e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
9000f480:	687b      	ldr	r3, [r7, #4]
9000f482:	2200      	movs	r2, #0
9000f484:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
9000f488:	78fb      	ldrb	r3, [r7, #3]
9000f48a:	f003 0302 	and.w	r3, r3, #2
9000f48e:	2b00      	cmp	r3, #0
9000f490:	d104      	bne.n	9000f49c <tcp_enqueue_flags+0x148>
9000f492:	78fb      	ldrb	r3, [r7, #3]
9000f494:	f003 0301 	and.w	r3, r3, #1
9000f498:	2b00      	cmp	r3, #0
9000f49a:	d004      	beq.n	9000f4a6 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
9000f49c:	687b      	ldr	r3, [r7, #4]
9000f49e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
9000f4a0:	1c5a      	adds	r2, r3, #1
9000f4a2:	687b      	ldr	r3, [r7, #4]
9000f4a4:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
9000f4a6:	78fb      	ldrb	r3, [r7, #3]
9000f4a8:	f003 0301 	and.w	r3, r3, #1
9000f4ac:	2b00      	cmp	r3, #0
9000f4ae:	d006      	beq.n	9000f4be <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
9000f4b0:	687b      	ldr	r3, [r7, #4]
9000f4b2:	8b5b      	ldrh	r3, [r3, #26]
9000f4b4:	f043 0320 	orr.w	r3, r3, #32
9000f4b8:	b29a      	uxth	r2, r3
9000f4ba:	687b      	ldr	r3, [r7, #4]
9000f4bc:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
9000f4be:	68fb      	ldr	r3, [r7, #12]
9000f4c0:	685b      	ldr	r3, [r3, #4]
9000f4c2:	4618      	mov	r0, r3
9000f4c4:	f7fa fd44 	bl	90009f50 <pbuf_clen>
9000f4c8:	4603      	mov	r3, r0
9000f4ca:	461a      	mov	r2, r3
9000f4cc:	687b      	ldr	r3, [r7, #4]
9000f4ce:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
9000f4d2:	4413      	add	r3, r2
9000f4d4:	b29a      	uxth	r2, r3
9000f4d6:	687b      	ldr	r3, [r7, #4]
9000f4d8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
9000f4dc:	687b      	ldr	r3, [r7, #4]
9000f4de:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
9000f4e2:	2b00      	cmp	r3, #0
9000f4e4:	d00e      	beq.n	9000f504 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
9000f4e6:	687b      	ldr	r3, [r7, #4]
9000f4e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
9000f4ea:	2b00      	cmp	r3, #0
9000f4ec:	d10a      	bne.n	9000f504 <tcp_enqueue_flags+0x1b0>
9000f4ee:	687b      	ldr	r3, [r7, #4]
9000f4f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
9000f4f2:	2b00      	cmp	r3, #0
9000f4f4:	d106      	bne.n	9000f504 <tcp_enqueue_flags+0x1b0>
9000f4f6:	4b06      	ldr	r3, [pc, #24]	; (9000f510 <tcp_enqueue_flags+0x1bc>)
9000f4f8:	f240 4265 	movw	r2, #1125	; 0x465
9000f4fc:	490b      	ldr	r1, [pc, #44]	; (9000f52c <tcp_enqueue_flags+0x1d8>)
9000f4fe:	4806      	ldr	r0, [pc, #24]	; (9000f518 <tcp_enqueue_flags+0x1c4>)
9000f500:	f004 f89a 	bl	90013638 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
9000f504:	2300      	movs	r3, #0
}
9000f506:	4618      	mov	r0, r3
9000f508:	3720      	adds	r7, #32
9000f50a:	46bd      	mov	sp, r7
9000f50c:	bd80      	pop	{r7, pc}
9000f50e:	bf00      	nop
9000f510:	90015f30 	.word	0x90015f30
9000f514:	90016354 	.word	0x90016354
9000f518:	90015f84 	.word	0x90015f84
9000f51c:	900163ac 	.word	0x900163ac
9000f520:	900163cc 	.word	0x900163cc
9000f524:	90016408 	.word	0x90016408
9000f528:	90016420 	.word	0x90016420
9000f52c:	9001644c 	.word	0x9001644c

9000f530 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
9000f530:	b5b0      	push	{r4, r5, r7, lr}
9000f532:	b08a      	sub	sp, #40	; 0x28
9000f534:	af00      	add	r7, sp, #0
9000f536:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
9000f538:	687b      	ldr	r3, [r7, #4]
9000f53a:	2b00      	cmp	r3, #0
9000f53c:	d106      	bne.n	9000f54c <tcp_output+0x1c>
9000f53e:	4b8a      	ldr	r3, [pc, #552]	; (9000f768 <tcp_output+0x238>)
9000f540:	f240 42e1 	movw	r2, #1249	; 0x4e1
9000f544:	4989      	ldr	r1, [pc, #548]	; (9000f76c <tcp_output+0x23c>)
9000f546:	488a      	ldr	r0, [pc, #552]	; (9000f770 <tcp_output+0x240>)
9000f548:	f004 f876 	bl	90013638 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
9000f54c:	687b      	ldr	r3, [r7, #4]
9000f54e:	7d1b      	ldrb	r3, [r3, #20]
9000f550:	2b01      	cmp	r3, #1
9000f552:	d106      	bne.n	9000f562 <tcp_output+0x32>
9000f554:	4b84      	ldr	r3, [pc, #528]	; (9000f768 <tcp_output+0x238>)
9000f556:	f240 42e3 	movw	r2, #1251	; 0x4e3
9000f55a:	4986      	ldr	r1, [pc, #536]	; (9000f774 <tcp_output+0x244>)
9000f55c:	4884      	ldr	r0, [pc, #528]	; (9000f770 <tcp_output+0x240>)
9000f55e:	f004 f86b 	bl	90013638 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
9000f562:	4b85      	ldr	r3, [pc, #532]	; (9000f778 <tcp_output+0x248>)
9000f564:	681b      	ldr	r3, [r3, #0]
9000f566:	687a      	ldr	r2, [r7, #4]
9000f568:	429a      	cmp	r2, r3
9000f56a:	d101      	bne.n	9000f570 <tcp_output+0x40>
    return ERR_OK;
9000f56c:	2300      	movs	r3, #0
9000f56e:	e1ce      	b.n	9000f90e <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
9000f570:	687b      	ldr	r3, [r7, #4]
9000f572:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
9000f576:	687b      	ldr	r3, [r7, #4]
9000f578:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
9000f57c:	4293      	cmp	r3, r2
9000f57e:	bf28      	it	cs
9000f580:	4613      	movcs	r3, r2
9000f582:	b29b      	uxth	r3, r3
9000f584:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
9000f586:	687b      	ldr	r3, [r7, #4]
9000f588:	6edb      	ldr	r3, [r3, #108]	; 0x6c
9000f58a:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
9000f58c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000f58e:	2b00      	cmp	r3, #0
9000f590:	d10b      	bne.n	9000f5aa <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
9000f592:	687b      	ldr	r3, [r7, #4]
9000f594:	8b5b      	ldrh	r3, [r3, #26]
9000f596:	f003 0302 	and.w	r3, r3, #2
9000f59a:	2b00      	cmp	r3, #0
9000f59c:	f000 81aa 	beq.w	9000f8f4 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
9000f5a0:	6878      	ldr	r0, [r7, #4]
9000f5a2:	f000 fdcb 	bl	9001013c <tcp_send_empty_ack>
9000f5a6:	4603      	mov	r3, r0
9000f5a8:	e1b1      	b.n	9000f90e <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
9000f5aa:	6879      	ldr	r1, [r7, #4]
9000f5ac:	687b      	ldr	r3, [r7, #4]
9000f5ae:	3304      	adds	r3, #4
9000f5b0:	461a      	mov	r2, r3
9000f5b2:	6878      	ldr	r0, [r7, #4]
9000f5b4:	f7ff f824 	bl	9000e600 <tcp_route>
9000f5b8:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
9000f5ba:	697b      	ldr	r3, [r7, #20]
9000f5bc:	2b00      	cmp	r3, #0
9000f5be:	d102      	bne.n	9000f5c6 <tcp_output+0x96>
    return ERR_RTE;
9000f5c0:	f06f 0303 	mvn.w	r3, #3
9000f5c4:	e1a3      	b.n	9000f90e <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
9000f5c6:	687b      	ldr	r3, [r7, #4]
9000f5c8:	2b00      	cmp	r3, #0
9000f5ca:	d003      	beq.n	9000f5d4 <tcp_output+0xa4>
9000f5cc:	687b      	ldr	r3, [r7, #4]
9000f5ce:	681b      	ldr	r3, [r3, #0]
9000f5d0:	2b00      	cmp	r3, #0
9000f5d2:	d111      	bne.n	9000f5f8 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
9000f5d4:	697b      	ldr	r3, [r7, #20]
9000f5d6:	2b00      	cmp	r3, #0
9000f5d8:	d002      	beq.n	9000f5e0 <tcp_output+0xb0>
9000f5da:	697b      	ldr	r3, [r7, #20]
9000f5dc:	3304      	adds	r3, #4
9000f5de:	e000      	b.n	9000f5e2 <tcp_output+0xb2>
9000f5e0:	2300      	movs	r3, #0
9000f5e2:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
9000f5e4:	693b      	ldr	r3, [r7, #16]
9000f5e6:	2b00      	cmp	r3, #0
9000f5e8:	d102      	bne.n	9000f5f0 <tcp_output+0xc0>
      return ERR_RTE;
9000f5ea:	f06f 0303 	mvn.w	r3, #3
9000f5ee:	e18e      	b.n	9000f90e <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
9000f5f0:	693b      	ldr	r3, [r7, #16]
9000f5f2:	681a      	ldr	r2, [r3, #0]
9000f5f4:	687b      	ldr	r3, [r7, #4]
9000f5f6:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
9000f5f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000f5fa:	68db      	ldr	r3, [r3, #12]
9000f5fc:	685b      	ldr	r3, [r3, #4]
9000f5fe:	4618      	mov	r0, r3
9000f600:	f7f8 ff3d 	bl	9000847e <lwip_htonl>
9000f604:	4602      	mov	r2, r0
9000f606:	687b      	ldr	r3, [r7, #4]
9000f608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
9000f60a:	1ad3      	subs	r3, r2, r3
9000f60c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
9000f60e:	8912      	ldrh	r2, [r2, #8]
9000f610:	4413      	add	r3, r2
9000f612:	69ba      	ldr	r2, [r7, #24]
9000f614:	429a      	cmp	r2, r3
9000f616:	d227      	bcs.n	9000f668 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
9000f618:	687b      	ldr	r3, [r7, #4]
9000f61a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
9000f61e:	461a      	mov	r2, r3
9000f620:	69bb      	ldr	r3, [r7, #24]
9000f622:	4293      	cmp	r3, r2
9000f624:	d114      	bne.n	9000f650 <tcp_output+0x120>
9000f626:	687b      	ldr	r3, [r7, #4]
9000f628:	6f1b      	ldr	r3, [r3, #112]	; 0x70
9000f62a:	2b00      	cmp	r3, #0
9000f62c:	d110      	bne.n	9000f650 <tcp_output+0x120>
9000f62e:	687b      	ldr	r3, [r7, #4]
9000f630:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
9000f634:	2b00      	cmp	r3, #0
9000f636:	d10b      	bne.n	9000f650 <tcp_output+0x120>
      pcb->persist_cnt = 0;
9000f638:	687b      	ldr	r3, [r7, #4]
9000f63a:	2200      	movs	r2, #0
9000f63c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
9000f640:	687b      	ldr	r3, [r7, #4]
9000f642:	2201      	movs	r2, #1
9000f644:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
9000f648:	687b      	ldr	r3, [r7, #4]
9000f64a:	2200      	movs	r2, #0
9000f64c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
9000f650:	687b      	ldr	r3, [r7, #4]
9000f652:	8b5b      	ldrh	r3, [r3, #26]
9000f654:	f003 0302 	and.w	r3, r3, #2
9000f658:	2b00      	cmp	r3, #0
9000f65a:	f000 814d 	beq.w	9000f8f8 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
9000f65e:	6878      	ldr	r0, [r7, #4]
9000f660:	f000 fd6c 	bl	9001013c <tcp_send_empty_ack>
9000f664:	4603      	mov	r3, r0
9000f666:	e152      	b.n	9000f90e <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
9000f668:	687b      	ldr	r3, [r7, #4]
9000f66a:	2200      	movs	r2, #0
9000f66c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
9000f670:	687b      	ldr	r3, [r7, #4]
9000f672:	6f1b      	ldr	r3, [r3, #112]	; 0x70
9000f674:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
9000f676:	6a3b      	ldr	r3, [r7, #32]
9000f678:	2b00      	cmp	r3, #0
9000f67a:	f000 811c 	beq.w	9000f8b6 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
9000f67e:	e002      	b.n	9000f686 <tcp_output+0x156>
9000f680:	6a3b      	ldr	r3, [r7, #32]
9000f682:	681b      	ldr	r3, [r3, #0]
9000f684:	623b      	str	r3, [r7, #32]
9000f686:	6a3b      	ldr	r3, [r7, #32]
9000f688:	681b      	ldr	r3, [r3, #0]
9000f68a:	2b00      	cmp	r3, #0
9000f68c:	d1f8      	bne.n	9000f680 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
9000f68e:	e112      	b.n	9000f8b6 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
9000f690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000f692:	68db      	ldr	r3, [r3, #12]
9000f694:	899b      	ldrh	r3, [r3, #12]
9000f696:	b29b      	uxth	r3, r3
9000f698:	4618      	mov	r0, r3
9000f69a:	f7f8 fedb 	bl	90008454 <lwip_htons>
9000f69e:	4603      	mov	r3, r0
9000f6a0:	b2db      	uxtb	r3, r3
9000f6a2:	f003 0304 	and.w	r3, r3, #4
9000f6a6:	2b00      	cmp	r3, #0
9000f6a8:	d006      	beq.n	9000f6b8 <tcp_output+0x188>
9000f6aa:	4b2f      	ldr	r3, [pc, #188]	; (9000f768 <tcp_output+0x238>)
9000f6ac:	f240 5236 	movw	r2, #1334	; 0x536
9000f6b0:	4932      	ldr	r1, [pc, #200]	; (9000f77c <tcp_output+0x24c>)
9000f6b2:	482f      	ldr	r0, [pc, #188]	; (9000f770 <tcp_output+0x240>)
9000f6b4:	f003 ffc0 	bl	90013638 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
9000f6b8:	687b      	ldr	r3, [r7, #4]
9000f6ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
9000f6bc:	2b00      	cmp	r3, #0
9000f6be:	d01f      	beq.n	9000f700 <tcp_output+0x1d0>
9000f6c0:	687b      	ldr	r3, [r7, #4]
9000f6c2:	8b5b      	ldrh	r3, [r3, #26]
9000f6c4:	f003 0344 	and.w	r3, r3, #68	; 0x44
9000f6c8:	2b00      	cmp	r3, #0
9000f6ca:	d119      	bne.n	9000f700 <tcp_output+0x1d0>
9000f6cc:	687b      	ldr	r3, [r7, #4]
9000f6ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
9000f6d0:	2b00      	cmp	r3, #0
9000f6d2:	d00b      	beq.n	9000f6ec <tcp_output+0x1bc>
9000f6d4:	687b      	ldr	r3, [r7, #4]
9000f6d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
9000f6d8:	681b      	ldr	r3, [r3, #0]
9000f6da:	2b00      	cmp	r3, #0
9000f6dc:	d110      	bne.n	9000f700 <tcp_output+0x1d0>
9000f6de:	687b      	ldr	r3, [r7, #4]
9000f6e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
9000f6e2:	891a      	ldrh	r2, [r3, #8]
9000f6e4:	687b      	ldr	r3, [r7, #4]
9000f6e6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
9000f6e8:	429a      	cmp	r2, r3
9000f6ea:	d209      	bcs.n	9000f700 <tcp_output+0x1d0>
9000f6ec:	687b      	ldr	r3, [r7, #4]
9000f6ee:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
9000f6f2:	2b00      	cmp	r3, #0
9000f6f4:	d004      	beq.n	9000f700 <tcp_output+0x1d0>
9000f6f6:	687b      	ldr	r3, [r7, #4]
9000f6f8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
9000f6fc:	2b08      	cmp	r3, #8
9000f6fe:	d901      	bls.n	9000f704 <tcp_output+0x1d4>
9000f700:	2301      	movs	r3, #1
9000f702:	e000      	b.n	9000f706 <tcp_output+0x1d6>
9000f704:	2300      	movs	r3, #0
9000f706:	2b00      	cmp	r3, #0
9000f708:	d106      	bne.n	9000f718 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
9000f70a:	687b      	ldr	r3, [r7, #4]
9000f70c:	8b5b      	ldrh	r3, [r3, #26]
9000f70e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
9000f712:	2b00      	cmp	r3, #0
9000f714:	f000 80e4 	beq.w	9000f8e0 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
9000f718:	687b      	ldr	r3, [r7, #4]
9000f71a:	7d1b      	ldrb	r3, [r3, #20]
9000f71c:	2b02      	cmp	r3, #2
9000f71e:	d00d      	beq.n	9000f73c <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
9000f720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000f722:	68db      	ldr	r3, [r3, #12]
9000f724:	899b      	ldrh	r3, [r3, #12]
9000f726:	b29c      	uxth	r4, r3
9000f728:	2010      	movs	r0, #16
9000f72a:	f7f8 fe93 	bl	90008454 <lwip_htons>
9000f72e:	4603      	mov	r3, r0
9000f730:	461a      	mov	r2, r3
9000f732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000f734:	68db      	ldr	r3, [r3, #12]
9000f736:	4322      	orrs	r2, r4
9000f738:	b292      	uxth	r2, r2
9000f73a:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
9000f73c:	697a      	ldr	r2, [r7, #20]
9000f73e:	6879      	ldr	r1, [r7, #4]
9000f740:	6a78      	ldr	r0, [r7, #36]	; 0x24
9000f742:	f000 f909 	bl	9000f958 <tcp_output_segment>
9000f746:	4603      	mov	r3, r0
9000f748:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
9000f74a:	f997 300f 	ldrsb.w	r3, [r7, #15]
9000f74e:	2b00      	cmp	r3, #0
9000f750:	d016      	beq.n	9000f780 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
9000f752:	687b      	ldr	r3, [r7, #4]
9000f754:	8b5b      	ldrh	r3, [r3, #26]
9000f756:	f043 0380 	orr.w	r3, r3, #128	; 0x80
9000f75a:	b29a      	uxth	r2, r3
9000f75c:	687b      	ldr	r3, [r7, #4]
9000f75e:	835a      	strh	r2, [r3, #26]
      return err;
9000f760:	f997 300f 	ldrsb.w	r3, [r7, #15]
9000f764:	e0d3      	b.n	9000f90e <tcp_output+0x3de>
9000f766:	bf00      	nop
9000f768:	90015f30 	.word	0x90015f30
9000f76c:	90016474 	.word	0x90016474
9000f770:	90015f84 	.word	0x90015f84
9000f774:	9001648c 	.word	0x9001648c
9000f778:	2401106c 	.word	0x2401106c
9000f77c:	900164b4 	.word	0x900164b4
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
9000f780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000f782:	681a      	ldr	r2, [r3, #0]
9000f784:	687b      	ldr	r3, [r7, #4]
9000f786:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
9000f788:	687b      	ldr	r3, [r7, #4]
9000f78a:	7d1b      	ldrb	r3, [r3, #20]
9000f78c:	2b02      	cmp	r3, #2
9000f78e:	d006      	beq.n	9000f79e <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
9000f790:	687b      	ldr	r3, [r7, #4]
9000f792:	8b5b      	ldrh	r3, [r3, #26]
9000f794:	f023 0303 	bic.w	r3, r3, #3
9000f798:	b29a      	uxth	r2, r3
9000f79a:	687b      	ldr	r3, [r7, #4]
9000f79c:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
9000f79e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000f7a0:	68db      	ldr	r3, [r3, #12]
9000f7a2:	685b      	ldr	r3, [r3, #4]
9000f7a4:	4618      	mov	r0, r3
9000f7a6:	f7f8 fe6a 	bl	9000847e <lwip_htonl>
9000f7aa:	4604      	mov	r4, r0
9000f7ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000f7ae:	891b      	ldrh	r3, [r3, #8]
9000f7b0:	461d      	mov	r5, r3
9000f7b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000f7b4:	68db      	ldr	r3, [r3, #12]
9000f7b6:	899b      	ldrh	r3, [r3, #12]
9000f7b8:	b29b      	uxth	r3, r3
9000f7ba:	4618      	mov	r0, r3
9000f7bc:	f7f8 fe4a 	bl	90008454 <lwip_htons>
9000f7c0:	4603      	mov	r3, r0
9000f7c2:	b2db      	uxtb	r3, r3
9000f7c4:	f003 0303 	and.w	r3, r3, #3
9000f7c8:	2b00      	cmp	r3, #0
9000f7ca:	d001      	beq.n	9000f7d0 <tcp_output+0x2a0>
9000f7cc:	2301      	movs	r3, #1
9000f7ce:	e000      	b.n	9000f7d2 <tcp_output+0x2a2>
9000f7d0:	2300      	movs	r3, #0
9000f7d2:	442b      	add	r3, r5
9000f7d4:	4423      	add	r3, r4
9000f7d6:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
9000f7d8:	687b      	ldr	r3, [r7, #4]
9000f7da:	6d1a      	ldr	r2, [r3, #80]	; 0x50
9000f7dc:	68bb      	ldr	r3, [r7, #8]
9000f7de:	1ad3      	subs	r3, r2, r3
9000f7e0:	2b00      	cmp	r3, #0
9000f7e2:	da02      	bge.n	9000f7ea <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
9000f7e4:	687b      	ldr	r3, [r7, #4]
9000f7e6:	68ba      	ldr	r2, [r7, #8]
9000f7e8:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
9000f7ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000f7ec:	891b      	ldrh	r3, [r3, #8]
9000f7ee:	461c      	mov	r4, r3
9000f7f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000f7f2:	68db      	ldr	r3, [r3, #12]
9000f7f4:	899b      	ldrh	r3, [r3, #12]
9000f7f6:	b29b      	uxth	r3, r3
9000f7f8:	4618      	mov	r0, r3
9000f7fa:	f7f8 fe2b 	bl	90008454 <lwip_htons>
9000f7fe:	4603      	mov	r3, r0
9000f800:	b2db      	uxtb	r3, r3
9000f802:	f003 0303 	and.w	r3, r3, #3
9000f806:	2b00      	cmp	r3, #0
9000f808:	d001      	beq.n	9000f80e <tcp_output+0x2de>
9000f80a:	2301      	movs	r3, #1
9000f80c:	e000      	b.n	9000f810 <tcp_output+0x2e0>
9000f80e:	2300      	movs	r3, #0
9000f810:	4423      	add	r3, r4
9000f812:	2b00      	cmp	r3, #0
9000f814:	d049      	beq.n	9000f8aa <tcp_output+0x37a>
      seg->next = NULL;
9000f816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000f818:	2200      	movs	r2, #0
9000f81a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
9000f81c:	687b      	ldr	r3, [r7, #4]
9000f81e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
9000f820:	2b00      	cmp	r3, #0
9000f822:	d105      	bne.n	9000f830 <tcp_output+0x300>
        pcb->unacked = seg;
9000f824:	687b      	ldr	r3, [r7, #4]
9000f826:	6a7a      	ldr	r2, [r7, #36]	; 0x24
9000f828:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
9000f82a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000f82c:	623b      	str	r3, [r7, #32]
9000f82e:	e03f      	b.n	9000f8b0 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
9000f830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000f832:	68db      	ldr	r3, [r3, #12]
9000f834:	685b      	ldr	r3, [r3, #4]
9000f836:	4618      	mov	r0, r3
9000f838:	f7f8 fe21 	bl	9000847e <lwip_htonl>
9000f83c:	4604      	mov	r4, r0
9000f83e:	6a3b      	ldr	r3, [r7, #32]
9000f840:	68db      	ldr	r3, [r3, #12]
9000f842:	685b      	ldr	r3, [r3, #4]
9000f844:	4618      	mov	r0, r3
9000f846:	f7f8 fe1a 	bl	9000847e <lwip_htonl>
9000f84a:	4603      	mov	r3, r0
9000f84c:	1ae3      	subs	r3, r4, r3
9000f84e:	2b00      	cmp	r3, #0
9000f850:	da24      	bge.n	9000f89c <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
9000f852:	687b      	ldr	r3, [r7, #4]
9000f854:	3370      	adds	r3, #112	; 0x70
9000f856:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
9000f858:	e002      	b.n	9000f860 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
9000f85a:	69fb      	ldr	r3, [r7, #28]
9000f85c:	681b      	ldr	r3, [r3, #0]
9000f85e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
9000f860:	69fb      	ldr	r3, [r7, #28]
9000f862:	681b      	ldr	r3, [r3, #0]
9000f864:	2b00      	cmp	r3, #0
9000f866:	d011      	beq.n	9000f88c <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
9000f868:	69fb      	ldr	r3, [r7, #28]
9000f86a:	681b      	ldr	r3, [r3, #0]
9000f86c:	68db      	ldr	r3, [r3, #12]
9000f86e:	685b      	ldr	r3, [r3, #4]
9000f870:	4618      	mov	r0, r3
9000f872:	f7f8 fe04 	bl	9000847e <lwip_htonl>
9000f876:	4604      	mov	r4, r0
9000f878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000f87a:	68db      	ldr	r3, [r3, #12]
9000f87c:	685b      	ldr	r3, [r3, #4]
9000f87e:	4618      	mov	r0, r3
9000f880:	f7f8 fdfd 	bl	9000847e <lwip_htonl>
9000f884:	4603      	mov	r3, r0
9000f886:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
9000f888:	2b00      	cmp	r3, #0
9000f88a:	dbe6      	blt.n	9000f85a <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
9000f88c:	69fb      	ldr	r3, [r7, #28]
9000f88e:	681a      	ldr	r2, [r3, #0]
9000f890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000f892:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
9000f894:	69fb      	ldr	r3, [r7, #28]
9000f896:	6a7a      	ldr	r2, [r7, #36]	; 0x24
9000f898:	601a      	str	r2, [r3, #0]
9000f89a:	e009      	b.n	9000f8b0 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
9000f89c:	6a3b      	ldr	r3, [r7, #32]
9000f89e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
9000f8a0:	601a      	str	r2, [r3, #0]
          useg = useg->next;
9000f8a2:	6a3b      	ldr	r3, [r7, #32]
9000f8a4:	681b      	ldr	r3, [r3, #0]
9000f8a6:	623b      	str	r3, [r7, #32]
9000f8a8:	e002      	b.n	9000f8b0 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
9000f8aa:	6a78      	ldr	r0, [r7, #36]	; 0x24
9000f8ac:	f7fb fefb 	bl	9000b6a6 <tcp_seg_free>
    }
    seg = pcb->unsent;
9000f8b0:	687b      	ldr	r3, [r7, #4]
9000f8b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
9000f8b4:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
9000f8b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000f8b8:	2b00      	cmp	r3, #0
9000f8ba:	d012      	beq.n	9000f8e2 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
9000f8bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000f8be:	68db      	ldr	r3, [r3, #12]
9000f8c0:	685b      	ldr	r3, [r3, #4]
9000f8c2:	4618      	mov	r0, r3
9000f8c4:	f7f8 fddb 	bl	9000847e <lwip_htonl>
9000f8c8:	4602      	mov	r2, r0
9000f8ca:	687b      	ldr	r3, [r7, #4]
9000f8cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
9000f8ce:	1ad3      	subs	r3, r2, r3
9000f8d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
9000f8d2:	8912      	ldrh	r2, [r2, #8]
9000f8d4:	4413      	add	r3, r2
  while (seg != NULL &&
9000f8d6:	69ba      	ldr	r2, [r7, #24]
9000f8d8:	429a      	cmp	r2, r3
9000f8da:	f4bf aed9 	bcs.w	9000f690 <tcp_output+0x160>
9000f8de:	e000      	b.n	9000f8e2 <tcp_output+0x3b2>
      break;
9000f8e0:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
9000f8e2:	687b      	ldr	r3, [r7, #4]
9000f8e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
9000f8e6:	2b00      	cmp	r3, #0
9000f8e8:	d108      	bne.n	9000f8fc <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
9000f8ea:	687b      	ldr	r3, [r7, #4]
9000f8ec:	2200      	movs	r2, #0
9000f8ee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
9000f8f2:	e004      	b.n	9000f8fe <tcp_output+0x3ce>
    goto output_done;
9000f8f4:	bf00      	nop
9000f8f6:	e002      	b.n	9000f8fe <tcp_output+0x3ce>
    goto output_done;
9000f8f8:	bf00      	nop
9000f8fa:	e000      	b.n	9000f8fe <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
9000f8fc:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
9000f8fe:	687b      	ldr	r3, [r7, #4]
9000f900:	8b5b      	ldrh	r3, [r3, #26]
9000f902:	f023 0380 	bic.w	r3, r3, #128	; 0x80
9000f906:	b29a      	uxth	r2, r3
9000f908:	687b      	ldr	r3, [r7, #4]
9000f90a:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
9000f90c:	2300      	movs	r3, #0
}
9000f90e:	4618      	mov	r0, r3
9000f910:	3728      	adds	r7, #40	; 0x28
9000f912:	46bd      	mov	sp, r7
9000f914:	bdb0      	pop	{r4, r5, r7, pc}
9000f916:	bf00      	nop

9000f918 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
9000f918:	b580      	push	{r7, lr}
9000f91a:	b082      	sub	sp, #8
9000f91c:	af00      	add	r7, sp, #0
9000f91e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
9000f920:	687b      	ldr	r3, [r7, #4]
9000f922:	2b00      	cmp	r3, #0
9000f924:	d106      	bne.n	9000f934 <tcp_output_segment_busy+0x1c>
9000f926:	4b09      	ldr	r3, [pc, #36]	; (9000f94c <tcp_output_segment_busy+0x34>)
9000f928:	f240 529a 	movw	r2, #1434	; 0x59a
9000f92c:	4908      	ldr	r1, [pc, #32]	; (9000f950 <tcp_output_segment_busy+0x38>)
9000f92e:	4809      	ldr	r0, [pc, #36]	; (9000f954 <tcp_output_segment_busy+0x3c>)
9000f930:	f003 fe82 	bl	90013638 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
9000f934:	687b      	ldr	r3, [r7, #4]
9000f936:	685b      	ldr	r3, [r3, #4]
9000f938:	7b9b      	ldrb	r3, [r3, #14]
9000f93a:	2b01      	cmp	r3, #1
9000f93c:	d001      	beq.n	9000f942 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
9000f93e:	2301      	movs	r3, #1
9000f940:	e000      	b.n	9000f944 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
9000f942:	2300      	movs	r3, #0
}
9000f944:	4618      	mov	r0, r3
9000f946:	3708      	adds	r7, #8
9000f948:	46bd      	mov	sp, r7
9000f94a:	bd80      	pop	{r7, pc}
9000f94c:	90015f30 	.word	0x90015f30
9000f950:	900164cc 	.word	0x900164cc
9000f954:	90015f84 	.word	0x90015f84

9000f958 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
9000f958:	b5b0      	push	{r4, r5, r7, lr}
9000f95a:	b08c      	sub	sp, #48	; 0x30
9000f95c:	af04      	add	r7, sp, #16
9000f95e:	60f8      	str	r0, [r7, #12]
9000f960:	60b9      	str	r1, [r7, #8]
9000f962:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
9000f964:	68fb      	ldr	r3, [r7, #12]
9000f966:	2b00      	cmp	r3, #0
9000f968:	d106      	bne.n	9000f978 <tcp_output_segment+0x20>
9000f96a:	4b63      	ldr	r3, [pc, #396]	; (9000faf8 <tcp_output_segment+0x1a0>)
9000f96c:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
9000f970:	4962      	ldr	r1, [pc, #392]	; (9000fafc <tcp_output_segment+0x1a4>)
9000f972:	4863      	ldr	r0, [pc, #396]	; (9000fb00 <tcp_output_segment+0x1a8>)
9000f974:	f003 fe60 	bl	90013638 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
9000f978:	68bb      	ldr	r3, [r7, #8]
9000f97a:	2b00      	cmp	r3, #0
9000f97c:	d106      	bne.n	9000f98c <tcp_output_segment+0x34>
9000f97e:	4b5e      	ldr	r3, [pc, #376]	; (9000faf8 <tcp_output_segment+0x1a0>)
9000f980:	f240 52b9 	movw	r2, #1465	; 0x5b9
9000f984:	495f      	ldr	r1, [pc, #380]	; (9000fb04 <tcp_output_segment+0x1ac>)
9000f986:	485e      	ldr	r0, [pc, #376]	; (9000fb00 <tcp_output_segment+0x1a8>)
9000f988:	f003 fe56 	bl	90013638 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
9000f98c:	687b      	ldr	r3, [r7, #4]
9000f98e:	2b00      	cmp	r3, #0
9000f990:	d106      	bne.n	9000f9a0 <tcp_output_segment+0x48>
9000f992:	4b59      	ldr	r3, [pc, #356]	; (9000faf8 <tcp_output_segment+0x1a0>)
9000f994:	f240 52ba 	movw	r2, #1466	; 0x5ba
9000f998:	495b      	ldr	r1, [pc, #364]	; (9000fb08 <tcp_output_segment+0x1b0>)
9000f99a:	4859      	ldr	r0, [pc, #356]	; (9000fb00 <tcp_output_segment+0x1a8>)
9000f99c:	f003 fe4c 	bl	90013638 <iprintf>

  if (tcp_output_segment_busy(seg)) {
9000f9a0:	68f8      	ldr	r0, [r7, #12]
9000f9a2:	f7ff ffb9 	bl	9000f918 <tcp_output_segment_busy>
9000f9a6:	4603      	mov	r3, r0
9000f9a8:	2b00      	cmp	r3, #0
9000f9aa:	d001      	beq.n	9000f9b0 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
9000f9ac:	2300      	movs	r3, #0
9000f9ae:	e09f      	b.n	9000faf0 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
9000f9b0:	68bb      	ldr	r3, [r7, #8]
9000f9b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
9000f9b4:	68fb      	ldr	r3, [r7, #12]
9000f9b6:	68dc      	ldr	r4, [r3, #12]
9000f9b8:	4610      	mov	r0, r2
9000f9ba:	f7f8 fd60 	bl	9000847e <lwip_htonl>
9000f9be:	4603      	mov	r3, r0
9000f9c0:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
9000f9c2:	68bb      	ldr	r3, [r7, #8]
9000f9c4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
9000f9c6:	68fb      	ldr	r3, [r7, #12]
9000f9c8:	68dc      	ldr	r4, [r3, #12]
9000f9ca:	4610      	mov	r0, r2
9000f9cc:	f7f8 fd42 	bl	90008454 <lwip_htons>
9000f9d0:	4603      	mov	r3, r0
9000f9d2:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
9000f9d4:	68bb      	ldr	r3, [r7, #8]
9000f9d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000f9d8:	68ba      	ldr	r2, [r7, #8]
9000f9da:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
9000f9dc:	441a      	add	r2, r3
9000f9de:	68bb      	ldr	r3, [r7, #8]
9000f9e0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
9000f9e2:	68fb      	ldr	r3, [r7, #12]
9000f9e4:	68db      	ldr	r3, [r3, #12]
9000f9e6:	3314      	adds	r3, #20
9000f9e8:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
9000f9ea:	68fb      	ldr	r3, [r7, #12]
9000f9ec:	7a9b      	ldrb	r3, [r3, #10]
9000f9ee:	f003 0301 	and.w	r3, r3, #1
9000f9f2:	2b00      	cmp	r3, #0
9000f9f4:	d015      	beq.n	9000fa22 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
9000f9f6:	68bb      	ldr	r3, [r7, #8]
9000f9f8:	3304      	adds	r3, #4
9000f9fa:	461a      	mov	r2, r3
9000f9fc:	6879      	ldr	r1, [r7, #4]
9000f9fe:	f44f 7006 	mov.w	r0, #536	; 0x218
9000fa02:	f7fc fa33 	bl	9000be6c <tcp_eff_send_mss_netif>
9000fa06:	4603      	mov	r3, r0
9000fa08:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
9000fa0a:	8b7b      	ldrh	r3, [r7, #26]
9000fa0c:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
9000fa10:	4618      	mov	r0, r3
9000fa12:	f7f8 fd34 	bl	9000847e <lwip_htonl>
9000fa16:	4602      	mov	r2, r0
9000fa18:	69fb      	ldr	r3, [r7, #28]
9000fa1a:	601a      	str	r2, [r3, #0]
    opts += 1;
9000fa1c:	69fb      	ldr	r3, [r7, #28]
9000fa1e:	3304      	adds	r3, #4
9000fa20:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
9000fa22:	68bb      	ldr	r3, [r7, #8]
9000fa24:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
9000fa28:	2b00      	cmp	r3, #0
9000fa2a:	da02      	bge.n	9000fa32 <tcp_output_segment+0xda>
    pcb->rtime = 0;
9000fa2c:	68bb      	ldr	r3, [r7, #8]
9000fa2e:	2200      	movs	r2, #0
9000fa30:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
9000fa32:	68bb      	ldr	r3, [r7, #8]
9000fa34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
9000fa36:	2b00      	cmp	r3, #0
9000fa38:	d10c      	bne.n	9000fa54 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
9000fa3a:	4b34      	ldr	r3, [pc, #208]	; (9000fb0c <tcp_output_segment+0x1b4>)
9000fa3c:	681a      	ldr	r2, [r3, #0]
9000fa3e:	68bb      	ldr	r3, [r7, #8]
9000fa40:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
9000fa42:	68fb      	ldr	r3, [r7, #12]
9000fa44:	68db      	ldr	r3, [r3, #12]
9000fa46:	685b      	ldr	r3, [r3, #4]
9000fa48:	4618      	mov	r0, r3
9000fa4a:	f7f8 fd18 	bl	9000847e <lwip_htonl>
9000fa4e:	4602      	mov	r2, r0
9000fa50:	68bb      	ldr	r3, [r7, #8]
9000fa52:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
9000fa54:	68fb      	ldr	r3, [r7, #12]
9000fa56:	68da      	ldr	r2, [r3, #12]
9000fa58:	68fb      	ldr	r3, [r7, #12]
9000fa5a:	685b      	ldr	r3, [r3, #4]
9000fa5c:	685b      	ldr	r3, [r3, #4]
9000fa5e:	1ad3      	subs	r3, r2, r3
9000fa60:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
9000fa62:	68fb      	ldr	r3, [r7, #12]
9000fa64:	685b      	ldr	r3, [r3, #4]
9000fa66:	8959      	ldrh	r1, [r3, #10]
9000fa68:	68fb      	ldr	r3, [r7, #12]
9000fa6a:	685b      	ldr	r3, [r3, #4]
9000fa6c:	8b3a      	ldrh	r2, [r7, #24]
9000fa6e:	1a8a      	subs	r2, r1, r2
9000fa70:	b292      	uxth	r2, r2
9000fa72:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
9000fa74:	68fb      	ldr	r3, [r7, #12]
9000fa76:	685b      	ldr	r3, [r3, #4]
9000fa78:	8919      	ldrh	r1, [r3, #8]
9000fa7a:	68fb      	ldr	r3, [r7, #12]
9000fa7c:	685b      	ldr	r3, [r3, #4]
9000fa7e:	8b3a      	ldrh	r2, [r7, #24]
9000fa80:	1a8a      	subs	r2, r1, r2
9000fa82:	b292      	uxth	r2, r2
9000fa84:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
9000fa86:	68fb      	ldr	r3, [r7, #12]
9000fa88:	685b      	ldr	r3, [r3, #4]
9000fa8a:	68fa      	ldr	r2, [r7, #12]
9000fa8c:	68d2      	ldr	r2, [r2, #12]
9000fa8e:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
9000fa90:	68fb      	ldr	r3, [r7, #12]
9000fa92:	68db      	ldr	r3, [r3, #12]
9000fa94:	2200      	movs	r2, #0
9000fa96:	741a      	strb	r2, [r3, #16]
9000fa98:	2200      	movs	r2, #0
9000fa9a:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
9000fa9c:	68fb      	ldr	r3, [r7, #12]
9000fa9e:	68db      	ldr	r3, [r3, #12]
9000faa0:	f103 0214 	add.w	r2, r3, #20
9000faa4:	68fb      	ldr	r3, [r7, #12]
9000faa6:	7a9b      	ldrb	r3, [r3, #10]
9000faa8:	009b      	lsls	r3, r3, #2
9000faaa:	f003 0304 	and.w	r3, r3, #4
9000faae:	4413      	add	r3, r2
9000fab0:	69fa      	ldr	r2, [r7, #28]
9000fab2:	429a      	cmp	r2, r3
9000fab4:	d006      	beq.n	9000fac4 <tcp_output_segment+0x16c>
9000fab6:	4b10      	ldr	r3, [pc, #64]	; (9000faf8 <tcp_output_segment+0x1a0>)
9000fab8:	f240 621c 	movw	r2, #1564	; 0x61c
9000fabc:	4914      	ldr	r1, [pc, #80]	; (9000fb10 <tcp_output_segment+0x1b8>)
9000fabe:	4810      	ldr	r0, [pc, #64]	; (9000fb00 <tcp_output_segment+0x1a8>)
9000fac0:	f003 fdba 	bl	90013638 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
9000fac4:	68fb      	ldr	r3, [r7, #12]
9000fac6:	6858      	ldr	r0, [r3, #4]
9000fac8:	68b9      	ldr	r1, [r7, #8]
9000faca:	68bb      	ldr	r3, [r7, #8]
9000facc:	1d1c      	adds	r4, r3, #4
9000face:	68bb      	ldr	r3, [r7, #8]
9000fad0:	7add      	ldrb	r5, [r3, #11]
9000fad2:	68bb      	ldr	r3, [r7, #8]
9000fad4:	7a9b      	ldrb	r3, [r3, #10]
9000fad6:	687a      	ldr	r2, [r7, #4]
9000fad8:	9202      	str	r2, [sp, #8]
9000fada:	2206      	movs	r2, #6
9000fadc:	9201      	str	r2, [sp, #4]
9000fade:	9300      	str	r3, [sp, #0]
9000fae0:	462b      	mov	r3, r5
9000fae2:	4622      	mov	r2, r4
9000fae4:	f002 fa8c 	bl	90012000 <ip4_output_if>
9000fae8:	4603      	mov	r3, r0
9000faea:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
9000faec:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
9000faf0:	4618      	mov	r0, r3
9000faf2:	3720      	adds	r7, #32
9000faf4:	46bd      	mov	sp, r7
9000faf6:	bdb0      	pop	{r4, r5, r7, pc}
9000faf8:	90015f30 	.word	0x90015f30
9000fafc:	900164f4 	.word	0x900164f4
9000fb00:	90015f84 	.word	0x90015f84
9000fb04:	90016514 	.word	0x90016514
9000fb08:	90016534 	.word	0x90016534
9000fb0c:	24011020 	.word	0x24011020
9000fb10:	90016558 	.word	0x90016558

9000fb14 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
9000fb14:	b5b0      	push	{r4, r5, r7, lr}
9000fb16:	b084      	sub	sp, #16
9000fb18:	af00      	add	r7, sp, #0
9000fb1a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
9000fb1c:	687b      	ldr	r3, [r7, #4]
9000fb1e:	2b00      	cmp	r3, #0
9000fb20:	d106      	bne.n	9000fb30 <tcp_rexmit_rto_prepare+0x1c>
9000fb22:	4b31      	ldr	r3, [pc, #196]	; (9000fbe8 <tcp_rexmit_rto_prepare+0xd4>)
9000fb24:	f240 6263 	movw	r2, #1635	; 0x663
9000fb28:	4930      	ldr	r1, [pc, #192]	; (9000fbec <tcp_rexmit_rto_prepare+0xd8>)
9000fb2a:	4831      	ldr	r0, [pc, #196]	; (9000fbf0 <tcp_rexmit_rto_prepare+0xdc>)
9000fb2c:	f003 fd84 	bl	90013638 <iprintf>

  if (pcb->unacked == NULL) {
9000fb30:	687b      	ldr	r3, [r7, #4]
9000fb32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
9000fb34:	2b00      	cmp	r3, #0
9000fb36:	d102      	bne.n	9000fb3e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
9000fb38:	f06f 0305 	mvn.w	r3, #5
9000fb3c:	e050      	b.n	9000fbe0 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
9000fb3e:	687b      	ldr	r3, [r7, #4]
9000fb40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
9000fb42:	60fb      	str	r3, [r7, #12]
9000fb44:	e00b      	b.n	9000fb5e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
9000fb46:	68f8      	ldr	r0, [r7, #12]
9000fb48:	f7ff fee6 	bl	9000f918 <tcp_output_segment_busy>
9000fb4c:	4603      	mov	r3, r0
9000fb4e:	2b00      	cmp	r3, #0
9000fb50:	d002      	beq.n	9000fb58 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
9000fb52:	f06f 0305 	mvn.w	r3, #5
9000fb56:	e043      	b.n	9000fbe0 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
9000fb58:	68fb      	ldr	r3, [r7, #12]
9000fb5a:	681b      	ldr	r3, [r3, #0]
9000fb5c:	60fb      	str	r3, [r7, #12]
9000fb5e:	68fb      	ldr	r3, [r7, #12]
9000fb60:	681b      	ldr	r3, [r3, #0]
9000fb62:	2b00      	cmp	r3, #0
9000fb64:	d1ef      	bne.n	9000fb46 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
9000fb66:	68f8      	ldr	r0, [r7, #12]
9000fb68:	f7ff fed6 	bl	9000f918 <tcp_output_segment_busy>
9000fb6c:	4603      	mov	r3, r0
9000fb6e:	2b00      	cmp	r3, #0
9000fb70:	d002      	beq.n	9000fb78 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
9000fb72:	f06f 0305 	mvn.w	r3, #5
9000fb76:	e033      	b.n	9000fbe0 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
9000fb78:	687b      	ldr	r3, [r7, #4]
9000fb7a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
9000fb7c:	68fb      	ldr	r3, [r7, #12]
9000fb7e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
9000fb80:	687b      	ldr	r3, [r7, #4]
9000fb82:	6f1a      	ldr	r2, [r3, #112]	; 0x70
9000fb84:	687b      	ldr	r3, [r7, #4]
9000fb86:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
9000fb88:	687b      	ldr	r3, [r7, #4]
9000fb8a:	2200      	movs	r2, #0
9000fb8c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
9000fb8e:	687b      	ldr	r3, [r7, #4]
9000fb90:	8b5b      	ldrh	r3, [r3, #26]
9000fb92:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
9000fb96:	b29a      	uxth	r2, r3
9000fb98:	687b      	ldr	r3, [r7, #4]
9000fb9a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
9000fb9c:	68fb      	ldr	r3, [r7, #12]
9000fb9e:	68db      	ldr	r3, [r3, #12]
9000fba0:	685b      	ldr	r3, [r3, #4]
9000fba2:	4618      	mov	r0, r3
9000fba4:	f7f8 fc6b 	bl	9000847e <lwip_htonl>
9000fba8:	4604      	mov	r4, r0
9000fbaa:	68fb      	ldr	r3, [r7, #12]
9000fbac:	891b      	ldrh	r3, [r3, #8]
9000fbae:	461d      	mov	r5, r3
9000fbb0:	68fb      	ldr	r3, [r7, #12]
9000fbb2:	68db      	ldr	r3, [r3, #12]
9000fbb4:	899b      	ldrh	r3, [r3, #12]
9000fbb6:	b29b      	uxth	r3, r3
9000fbb8:	4618      	mov	r0, r3
9000fbba:	f7f8 fc4b 	bl	90008454 <lwip_htons>
9000fbbe:	4603      	mov	r3, r0
9000fbc0:	b2db      	uxtb	r3, r3
9000fbc2:	f003 0303 	and.w	r3, r3, #3
9000fbc6:	2b00      	cmp	r3, #0
9000fbc8:	d001      	beq.n	9000fbce <tcp_rexmit_rto_prepare+0xba>
9000fbca:	2301      	movs	r3, #1
9000fbcc:	e000      	b.n	9000fbd0 <tcp_rexmit_rto_prepare+0xbc>
9000fbce:	2300      	movs	r3, #0
9000fbd0:	442b      	add	r3, r5
9000fbd2:	18e2      	adds	r2, r4, r3
9000fbd4:	687b      	ldr	r3, [r7, #4]
9000fbd6:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
9000fbd8:	687b      	ldr	r3, [r7, #4]
9000fbda:	2200      	movs	r2, #0
9000fbdc:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
9000fbde:	2300      	movs	r3, #0
}
9000fbe0:	4618      	mov	r0, r3
9000fbe2:	3710      	adds	r7, #16
9000fbe4:	46bd      	mov	sp, r7
9000fbe6:	bdb0      	pop	{r4, r5, r7, pc}
9000fbe8:	90015f30 	.word	0x90015f30
9000fbec:	9001656c 	.word	0x9001656c
9000fbf0:	90015f84 	.word	0x90015f84

9000fbf4 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
9000fbf4:	b580      	push	{r7, lr}
9000fbf6:	b082      	sub	sp, #8
9000fbf8:	af00      	add	r7, sp, #0
9000fbfa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
9000fbfc:	687b      	ldr	r3, [r7, #4]
9000fbfe:	2b00      	cmp	r3, #0
9000fc00:	d106      	bne.n	9000fc10 <tcp_rexmit_rto_commit+0x1c>
9000fc02:	4b0d      	ldr	r3, [pc, #52]	; (9000fc38 <tcp_rexmit_rto_commit+0x44>)
9000fc04:	f44f 62d3 	mov.w	r2, #1688	; 0x698
9000fc08:	490c      	ldr	r1, [pc, #48]	; (9000fc3c <tcp_rexmit_rto_commit+0x48>)
9000fc0a:	480d      	ldr	r0, [pc, #52]	; (9000fc40 <tcp_rexmit_rto_commit+0x4c>)
9000fc0c:	f003 fd14 	bl	90013638 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
9000fc10:	687b      	ldr	r3, [r7, #4]
9000fc12:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
9000fc16:	2bff      	cmp	r3, #255	; 0xff
9000fc18:	d007      	beq.n	9000fc2a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
9000fc1a:	687b      	ldr	r3, [r7, #4]
9000fc1c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
9000fc20:	3301      	adds	r3, #1
9000fc22:	b2da      	uxtb	r2, r3
9000fc24:	687b      	ldr	r3, [r7, #4]
9000fc26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
9000fc2a:	6878      	ldr	r0, [r7, #4]
9000fc2c:	f7ff fc80 	bl	9000f530 <tcp_output>
}
9000fc30:	bf00      	nop
9000fc32:	3708      	adds	r7, #8
9000fc34:	46bd      	mov	sp, r7
9000fc36:	bd80      	pop	{r7, pc}
9000fc38:	90015f30 	.word	0x90015f30
9000fc3c:	90016590 	.word	0x90016590
9000fc40:	90015f84 	.word	0x90015f84

9000fc44 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
9000fc44:	b580      	push	{r7, lr}
9000fc46:	b082      	sub	sp, #8
9000fc48:	af00      	add	r7, sp, #0
9000fc4a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
9000fc4c:	687b      	ldr	r3, [r7, #4]
9000fc4e:	2b00      	cmp	r3, #0
9000fc50:	d106      	bne.n	9000fc60 <tcp_rexmit_rto+0x1c>
9000fc52:	4b0a      	ldr	r3, [pc, #40]	; (9000fc7c <tcp_rexmit_rto+0x38>)
9000fc54:	f240 62ad 	movw	r2, #1709	; 0x6ad
9000fc58:	4909      	ldr	r1, [pc, #36]	; (9000fc80 <tcp_rexmit_rto+0x3c>)
9000fc5a:	480a      	ldr	r0, [pc, #40]	; (9000fc84 <tcp_rexmit_rto+0x40>)
9000fc5c:	f003 fcec 	bl	90013638 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
9000fc60:	6878      	ldr	r0, [r7, #4]
9000fc62:	f7ff ff57 	bl	9000fb14 <tcp_rexmit_rto_prepare>
9000fc66:	4603      	mov	r3, r0
9000fc68:	2b00      	cmp	r3, #0
9000fc6a:	d102      	bne.n	9000fc72 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
9000fc6c:	6878      	ldr	r0, [r7, #4]
9000fc6e:	f7ff ffc1 	bl	9000fbf4 <tcp_rexmit_rto_commit>
  }
}
9000fc72:	bf00      	nop
9000fc74:	3708      	adds	r7, #8
9000fc76:	46bd      	mov	sp, r7
9000fc78:	bd80      	pop	{r7, pc}
9000fc7a:	bf00      	nop
9000fc7c:	90015f30 	.word	0x90015f30
9000fc80:	900165b4 	.word	0x900165b4
9000fc84:	90015f84 	.word	0x90015f84

9000fc88 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
9000fc88:	b590      	push	{r4, r7, lr}
9000fc8a:	b085      	sub	sp, #20
9000fc8c:	af00      	add	r7, sp, #0
9000fc8e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
9000fc90:	687b      	ldr	r3, [r7, #4]
9000fc92:	2b00      	cmp	r3, #0
9000fc94:	d106      	bne.n	9000fca4 <tcp_rexmit+0x1c>
9000fc96:	4b2f      	ldr	r3, [pc, #188]	; (9000fd54 <tcp_rexmit+0xcc>)
9000fc98:	f240 62c1 	movw	r2, #1729	; 0x6c1
9000fc9c:	492e      	ldr	r1, [pc, #184]	; (9000fd58 <tcp_rexmit+0xd0>)
9000fc9e:	482f      	ldr	r0, [pc, #188]	; (9000fd5c <tcp_rexmit+0xd4>)
9000fca0:	f003 fcca 	bl	90013638 <iprintf>

  if (pcb->unacked == NULL) {
9000fca4:	687b      	ldr	r3, [r7, #4]
9000fca6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
9000fca8:	2b00      	cmp	r3, #0
9000fcaa:	d102      	bne.n	9000fcb2 <tcp_rexmit+0x2a>
    return ERR_VAL;
9000fcac:	f06f 0305 	mvn.w	r3, #5
9000fcb0:	e04c      	b.n	9000fd4c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
9000fcb2:	687b      	ldr	r3, [r7, #4]
9000fcb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
9000fcb6:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
9000fcb8:	68b8      	ldr	r0, [r7, #8]
9000fcba:	f7ff fe2d 	bl	9000f918 <tcp_output_segment_busy>
9000fcbe:	4603      	mov	r3, r0
9000fcc0:	2b00      	cmp	r3, #0
9000fcc2:	d002      	beq.n	9000fcca <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
9000fcc4:	f06f 0305 	mvn.w	r3, #5
9000fcc8:	e040      	b.n	9000fd4c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
9000fcca:	68bb      	ldr	r3, [r7, #8]
9000fccc:	681a      	ldr	r2, [r3, #0]
9000fcce:	687b      	ldr	r3, [r7, #4]
9000fcd0:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
9000fcd2:	687b      	ldr	r3, [r7, #4]
9000fcd4:	336c      	adds	r3, #108	; 0x6c
9000fcd6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
9000fcd8:	e002      	b.n	9000fce0 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
9000fcda:	68fb      	ldr	r3, [r7, #12]
9000fcdc:	681b      	ldr	r3, [r3, #0]
9000fcde:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
9000fce0:	68fb      	ldr	r3, [r7, #12]
9000fce2:	681b      	ldr	r3, [r3, #0]
9000fce4:	2b00      	cmp	r3, #0
9000fce6:	d011      	beq.n	9000fd0c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
9000fce8:	68fb      	ldr	r3, [r7, #12]
9000fcea:	681b      	ldr	r3, [r3, #0]
9000fcec:	68db      	ldr	r3, [r3, #12]
9000fcee:	685b      	ldr	r3, [r3, #4]
9000fcf0:	4618      	mov	r0, r3
9000fcf2:	f7f8 fbc4 	bl	9000847e <lwip_htonl>
9000fcf6:	4604      	mov	r4, r0
9000fcf8:	68bb      	ldr	r3, [r7, #8]
9000fcfa:	68db      	ldr	r3, [r3, #12]
9000fcfc:	685b      	ldr	r3, [r3, #4]
9000fcfe:	4618      	mov	r0, r3
9000fd00:	f7f8 fbbd 	bl	9000847e <lwip_htonl>
9000fd04:	4603      	mov	r3, r0
9000fd06:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
9000fd08:	2b00      	cmp	r3, #0
9000fd0a:	dbe6      	blt.n	9000fcda <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
9000fd0c:	68fb      	ldr	r3, [r7, #12]
9000fd0e:	681a      	ldr	r2, [r3, #0]
9000fd10:	68bb      	ldr	r3, [r7, #8]
9000fd12:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
9000fd14:	68fb      	ldr	r3, [r7, #12]
9000fd16:	68ba      	ldr	r2, [r7, #8]
9000fd18:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
9000fd1a:	68bb      	ldr	r3, [r7, #8]
9000fd1c:	681b      	ldr	r3, [r3, #0]
9000fd1e:	2b00      	cmp	r3, #0
9000fd20:	d103      	bne.n	9000fd2a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
9000fd22:	687b      	ldr	r3, [r7, #4]
9000fd24:	2200      	movs	r2, #0
9000fd26:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
9000fd2a:	687b      	ldr	r3, [r7, #4]
9000fd2c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
9000fd30:	2bff      	cmp	r3, #255	; 0xff
9000fd32:	d007      	beq.n	9000fd44 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
9000fd34:	687b      	ldr	r3, [r7, #4]
9000fd36:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
9000fd3a:	3301      	adds	r3, #1
9000fd3c:	b2da      	uxtb	r2, r3
9000fd3e:	687b      	ldr	r3, [r7, #4]
9000fd40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
9000fd44:	687b      	ldr	r3, [r7, #4]
9000fd46:	2200      	movs	r2, #0
9000fd48:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
9000fd4a:	2300      	movs	r3, #0
}
9000fd4c:	4618      	mov	r0, r3
9000fd4e:	3714      	adds	r7, #20
9000fd50:	46bd      	mov	sp, r7
9000fd52:	bd90      	pop	{r4, r7, pc}
9000fd54:	90015f30 	.word	0x90015f30
9000fd58:	900165d0 	.word	0x900165d0
9000fd5c:	90015f84 	.word	0x90015f84

9000fd60 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
9000fd60:	b580      	push	{r7, lr}
9000fd62:	b082      	sub	sp, #8
9000fd64:	af00      	add	r7, sp, #0
9000fd66:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
9000fd68:	687b      	ldr	r3, [r7, #4]
9000fd6a:	2b00      	cmp	r3, #0
9000fd6c:	d106      	bne.n	9000fd7c <tcp_rexmit_fast+0x1c>
9000fd6e:	4b2a      	ldr	r3, [pc, #168]	; (9000fe18 <tcp_rexmit_fast+0xb8>)
9000fd70:	f240 62f9 	movw	r2, #1785	; 0x6f9
9000fd74:	4929      	ldr	r1, [pc, #164]	; (9000fe1c <tcp_rexmit_fast+0xbc>)
9000fd76:	482a      	ldr	r0, [pc, #168]	; (9000fe20 <tcp_rexmit_fast+0xc0>)
9000fd78:	f003 fc5e 	bl	90013638 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
9000fd7c:	687b      	ldr	r3, [r7, #4]
9000fd7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
9000fd80:	2b00      	cmp	r3, #0
9000fd82:	d045      	beq.n	9000fe10 <tcp_rexmit_fast+0xb0>
9000fd84:	687b      	ldr	r3, [r7, #4]
9000fd86:	8b5b      	ldrh	r3, [r3, #26]
9000fd88:	f003 0304 	and.w	r3, r3, #4
9000fd8c:	2b00      	cmp	r3, #0
9000fd8e:	d13f      	bne.n	9000fe10 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
9000fd90:	6878      	ldr	r0, [r7, #4]
9000fd92:	f7ff ff79 	bl	9000fc88 <tcp_rexmit>
9000fd96:	4603      	mov	r3, r0
9000fd98:	2b00      	cmp	r3, #0
9000fd9a:	d139      	bne.n	9000fe10 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
9000fd9c:	687b      	ldr	r3, [r7, #4]
9000fd9e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
9000fda2:	687b      	ldr	r3, [r7, #4]
9000fda4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
9000fda8:	4293      	cmp	r3, r2
9000fdaa:	bf28      	it	cs
9000fdac:	4613      	movcs	r3, r2
9000fdae:	b29b      	uxth	r3, r3
9000fdb0:	2b00      	cmp	r3, #0
9000fdb2:	da00      	bge.n	9000fdb6 <tcp_rexmit_fast+0x56>
9000fdb4:	3301      	adds	r3, #1
9000fdb6:	105b      	asrs	r3, r3, #1
9000fdb8:	b29a      	uxth	r2, r3
9000fdba:	687b      	ldr	r3, [r7, #4]
9000fdbc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
9000fdc0:	687b      	ldr	r3, [r7, #4]
9000fdc2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
9000fdc6:	461a      	mov	r2, r3
9000fdc8:	687b      	ldr	r3, [r7, #4]
9000fdca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
9000fdcc:	005b      	lsls	r3, r3, #1
9000fdce:	429a      	cmp	r2, r3
9000fdd0:	d206      	bcs.n	9000fde0 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
9000fdd2:	687b      	ldr	r3, [r7, #4]
9000fdd4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
9000fdd6:	005b      	lsls	r3, r3, #1
9000fdd8:	b29a      	uxth	r2, r3
9000fdda:	687b      	ldr	r3, [r7, #4]
9000fddc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
9000fde0:	687b      	ldr	r3, [r7, #4]
9000fde2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
9000fde6:	687b      	ldr	r3, [r7, #4]
9000fde8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
9000fdea:	4619      	mov	r1, r3
9000fdec:	0049      	lsls	r1, r1, #1
9000fdee:	440b      	add	r3, r1
9000fdf0:	b29b      	uxth	r3, r3
9000fdf2:	4413      	add	r3, r2
9000fdf4:	b29a      	uxth	r2, r3
9000fdf6:	687b      	ldr	r3, [r7, #4]
9000fdf8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
9000fdfc:	687b      	ldr	r3, [r7, #4]
9000fdfe:	8b5b      	ldrh	r3, [r3, #26]
9000fe00:	f043 0304 	orr.w	r3, r3, #4
9000fe04:	b29a      	uxth	r2, r3
9000fe06:	687b      	ldr	r3, [r7, #4]
9000fe08:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
9000fe0a:	687b      	ldr	r3, [r7, #4]
9000fe0c:	2200      	movs	r2, #0
9000fe0e:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
9000fe10:	bf00      	nop
9000fe12:	3708      	adds	r7, #8
9000fe14:	46bd      	mov	sp, r7
9000fe16:	bd80      	pop	{r7, pc}
9000fe18:	90015f30 	.word	0x90015f30
9000fe1c:	900165e8 	.word	0x900165e8
9000fe20:	90015f84 	.word	0x90015f84

9000fe24 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
9000fe24:	b580      	push	{r7, lr}
9000fe26:	b086      	sub	sp, #24
9000fe28:	af00      	add	r7, sp, #0
9000fe2a:	60f8      	str	r0, [r7, #12]
9000fe2c:	607b      	str	r3, [r7, #4]
9000fe2e:	460b      	mov	r3, r1
9000fe30:	817b      	strh	r3, [r7, #10]
9000fe32:	4613      	mov	r3, r2
9000fe34:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
9000fe36:	897a      	ldrh	r2, [r7, #10]
9000fe38:	893b      	ldrh	r3, [r7, #8]
9000fe3a:	4413      	add	r3, r2
9000fe3c:	b29b      	uxth	r3, r3
9000fe3e:	3314      	adds	r3, #20
9000fe40:	b29b      	uxth	r3, r3
9000fe42:	f44f 7220 	mov.w	r2, #640	; 0x280
9000fe46:	4619      	mov	r1, r3
9000fe48:	2022      	movs	r0, #34	; 0x22
9000fe4a:	f7f9 fd0f 	bl	9000986c <pbuf_alloc>
9000fe4e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
9000fe50:	697b      	ldr	r3, [r7, #20]
9000fe52:	2b00      	cmp	r3, #0
9000fe54:	d04d      	beq.n	9000fef2 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
9000fe56:	897b      	ldrh	r3, [r7, #10]
9000fe58:	3313      	adds	r3, #19
9000fe5a:	697a      	ldr	r2, [r7, #20]
9000fe5c:	8952      	ldrh	r2, [r2, #10]
9000fe5e:	4293      	cmp	r3, r2
9000fe60:	db06      	blt.n	9000fe70 <tcp_output_alloc_header_common+0x4c>
9000fe62:	4b26      	ldr	r3, [pc, #152]	; (9000fefc <tcp_output_alloc_header_common+0xd8>)
9000fe64:	f240 7223 	movw	r2, #1827	; 0x723
9000fe68:	4925      	ldr	r1, [pc, #148]	; (9000ff00 <tcp_output_alloc_header_common+0xdc>)
9000fe6a:	4826      	ldr	r0, [pc, #152]	; (9000ff04 <tcp_output_alloc_header_common+0xe0>)
9000fe6c:	f003 fbe4 	bl	90013638 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
9000fe70:	697b      	ldr	r3, [r7, #20]
9000fe72:	685b      	ldr	r3, [r3, #4]
9000fe74:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
9000fe76:	8c3b      	ldrh	r3, [r7, #32]
9000fe78:	4618      	mov	r0, r3
9000fe7a:	f7f8 faeb 	bl	90008454 <lwip_htons>
9000fe7e:	4603      	mov	r3, r0
9000fe80:	461a      	mov	r2, r3
9000fe82:	693b      	ldr	r3, [r7, #16]
9000fe84:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
9000fe86:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
9000fe88:	4618      	mov	r0, r3
9000fe8a:	f7f8 fae3 	bl	90008454 <lwip_htons>
9000fe8e:	4603      	mov	r3, r0
9000fe90:	461a      	mov	r2, r3
9000fe92:	693b      	ldr	r3, [r7, #16]
9000fe94:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
9000fe96:	693b      	ldr	r3, [r7, #16]
9000fe98:	687a      	ldr	r2, [r7, #4]
9000fe9a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
9000fe9c:	68f8      	ldr	r0, [r7, #12]
9000fe9e:	f7f8 faee 	bl	9000847e <lwip_htonl>
9000fea2:	4602      	mov	r2, r0
9000fea4:	693b      	ldr	r3, [r7, #16]
9000fea6:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
9000fea8:	897b      	ldrh	r3, [r7, #10]
9000feaa:	089b      	lsrs	r3, r3, #2
9000feac:	b29b      	uxth	r3, r3
9000feae:	3305      	adds	r3, #5
9000feb0:	b29b      	uxth	r3, r3
9000feb2:	031b      	lsls	r3, r3, #12
9000feb4:	b29a      	uxth	r2, r3
9000feb6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
9000feba:	b29b      	uxth	r3, r3
9000febc:	4313      	orrs	r3, r2
9000febe:	b29b      	uxth	r3, r3
9000fec0:	4618      	mov	r0, r3
9000fec2:	f7f8 fac7 	bl	90008454 <lwip_htons>
9000fec6:	4603      	mov	r3, r0
9000fec8:	461a      	mov	r2, r3
9000feca:	693b      	ldr	r3, [r7, #16]
9000fecc:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
9000fece:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
9000fed0:	4618      	mov	r0, r3
9000fed2:	f7f8 fabf 	bl	90008454 <lwip_htons>
9000fed6:	4603      	mov	r3, r0
9000fed8:	461a      	mov	r2, r3
9000feda:	693b      	ldr	r3, [r7, #16]
9000fedc:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
9000fede:	693b      	ldr	r3, [r7, #16]
9000fee0:	2200      	movs	r2, #0
9000fee2:	741a      	strb	r2, [r3, #16]
9000fee4:	2200      	movs	r2, #0
9000fee6:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
9000fee8:	693b      	ldr	r3, [r7, #16]
9000feea:	2200      	movs	r2, #0
9000feec:	749a      	strb	r2, [r3, #18]
9000feee:	2200      	movs	r2, #0
9000fef0:	74da      	strb	r2, [r3, #19]
  }
  return p;
9000fef2:	697b      	ldr	r3, [r7, #20]
}
9000fef4:	4618      	mov	r0, r3
9000fef6:	3718      	adds	r7, #24
9000fef8:	46bd      	mov	sp, r7
9000fefa:	bd80      	pop	{r7, pc}
9000fefc:	90015f30 	.word	0x90015f30
9000ff00:	90016608 	.word	0x90016608
9000ff04:	90015f84 	.word	0x90015f84

9000ff08 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
9000ff08:	b5b0      	push	{r4, r5, r7, lr}
9000ff0a:	b08a      	sub	sp, #40	; 0x28
9000ff0c:	af04      	add	r7, sp, #16
9000ff0e:	60f8      	str	r0, [r7, #12]
9000ff10:	607b      	str	r3, [r7, #4]
9000ff12:	460b      	mov	r3, r1
9000ff14:	817b      	strh	r3, [r7, #10]
9000ff16:	4613      	mov	r3, r2
9000ff18:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
9000ff1a:	68fb      	ldr	r3, [r7, #12]
9000ff1c:	2b00      	cmp	r3, #0
9000ff1e:	d106      	bne.n	9000ff2e <tcp_output_alloc_header+0x26>
9000ff20:	4b15      	ldr	r3, [pc, #84]	; (9000ff78 <tcp_output_alloc_header+0x70>)
9000ff22:	f240 7242 	movw	r2, #1858	; 0x742
9000ff26:	4915      	ldr	r1, [pc, #84]	; (9000ff7c <tcp_output_alloc_header+0x74>)
9000ff28:	4815      	ldr	r0, [pc, #84]	; (9000ff80 <tcp_output_alloc_header+0x78>)
9000ff2a:	f003 fb85 	bl	90013638 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
9000ff2e:	68fb      	ldr	r3, [r7, #12]
9000ff30:	6a58      	ldr	r0, [r3, #36]	; 0x24
9000ff32:	68fb      	ldr	r3, [r7, #12]
9000ff34:	8adb      	ldrh	r3, [r3, #22]
9000ff36:	68fa      	ldr	r2, [r7, #12]
9000ff38:	8b12      	ldrh	r2, [r2, #24]
9000ff3a:	68f9      	ldr	r1, [r7, #12]
9000ff3c:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
9000ff3e:	893d      	ldrh	r5, [r7, #8]
9000ff40:	897c      	ldrh	r4, [r7, #10]
9000ff42:	9103      	str	r1, [sp, #12]
9000ff44:	2110      	movs	r1, #16
9000ff46:	9102      	str	r1, [sp, #8]
9000ff48:	9201      	str	r2, [sp, #4]
9000ff4a:	9300      	str	r3, [sp, #0]
9000ff4c:	687b      	ldr	r3, [r7, #4]
9000ff4e:	462a      	mov	r2, r5
9000ff50:	4621      	mov	r1, r4
9000ff52:	f7ff ff67 	bl	9000fe24 <tcp_output_alloc_header_common>
9000ff56:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
9000ff58:	697b      	ldr	r3, [r7, #20]
9000ff5a:	2b00      	cmp	r3, #0
9000ff5c:	d006      	beq.n	9000ff6c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
9000ff5e:	68fb      	ldr	r3, [r7, #12]
9000ff60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000ff62:	68fa      	ldr	r2, [r7, #12]
9000ff64:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
9000ff66:	441a      	add	r2, r3
9000ff68:	68fb      	ldr	r3, [r7, #12]
9000ff6a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
9000ff6c:	697b      	ldr	r3, [r7, #20]
}
9000ff6e:	4618      	mov	r0, r3
9000ff70:	3718      	adds	r7, #24
9000ff72:	46bd      	mov	sp, r7
9000ff74:	bdb0      	pop	{r4, r5, r7, pc}
9000ff76:	bf00      	nop
9000ff78:	90015f30 	.word	0x90015f30
9000ff7c:	90016638 	.word	0x90016638
9000ff80:	90015f84 	.word	0x90015f84

9000ff84 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
9000ff84:	b580      	push	{r7, lr}
9000ff86:	b088      	sub	sp, #32
9000ff88:	af00      	add	r7, sp, #0
9000ff8a:	60f8      	str	r0, [r7, #12]
9000ff8c:	60b9      	str	r1, [r7, #8]
9000ff8e:	4611      	mov	r1, r2
9000ff90:	461a      	mov	r2, r3
9000ff92:	460b      	mov	r3, r1
9000ff94:	71fb      	strb	r3, [r7, #7]
9000ff96:	4613      	mov	r3, r2
9000ff98:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
9000ff9a:	2300      	movs	r3, #0
9000ff9c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
9000ff9e:	68bb      	ldr	r3, [r7, #8]
9000ffa0:	2b00      	cmp	r3, #0
9000ffa2:	d106      	bne.n	9000ffb2 <tcp_output_fill_options+0x2e>
9000ffa4:	4b13      	ldr	r3, [pc, #76]	; (9000fff4 <tcp_output_fill_options+0x70>)
9000ffa6:	f240 7256 	movw	r2, #1878	; 0x756
9000ffaa:	4913      	ldr	r1, [pc, #76]	; (9000fff8 <tcp_output_fill_options+0x74>)
9000ffac:	4813      	ldr	r0, [pc, #76]	; (9000fffc <tcp_output_fill_options+0x78>)
9000ffae:	f003 fb43 	bl	90013638 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
9000ffb2:	68bb      	ldr	r3, [r7, #8]
9000ffb4:	685b      	ldr	r3, [r3, #4]
9000ffb6:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
9000ffb8:	69bb      	ldr	r3, [r7, #24]
9000ffba:	3314      	adds	r3, #20
9000ffbc:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
9000ffbe:	69bb      	ldr	r3, [r7, #24]
9000ffc0:	f103 0214 	add.w	r2, r3, #20
9000ffc4:	8bfb      	ldrh	r3, [r7, #30]
9000ffc6:	009b      	lsls	r3, r3, #2
9000ffc8:	4619      	mov	r1, r3
9000ffca:	79fb      	ldrb	r3, [r7, #7]
9000ffcc:	009b      	lsls	r3, r3, #2
9000ffce:	f003 0304 	and.w	r3, r3, #4
9000ffd2:	440b      	add	r3, r1
9000ffd4:	4413      	add	r3, r2
9000ffd6:	697a      	ldr	r2, [r7, #20]
9000ffd8:	429a      	cmp	r2, r3
9000ffda:	d006      	beq.n	9000ffea <tcp_output_fill_options+0x66>
9000ffdc:	4b05      	ldr	r3, [pc, #20]	; (9000fff4 <tcp_output_fill_options+0x70>)
9000ffde:	f240 7275 	movw	r2, #1909	; 0x775
9000ffe2:	4907      	ldr	r1, [pc, #28]	; (90010000 <tcp_output_fill_options+0x7c>)
9000ffe4:	4805      	ldr	r0, [pc, #20]	; (9000fffc <tcp_output_fill_options+0x78>)
9000ffe6:	f003 fb27 	bl	90013638 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
9000ffea:	bf00      	nop
9000ffec:	3720      	adds	r7, #32
9000ffee:	46bd      	mov	sp, r7
9000fff0:	bd80      	pop	{r7, pc}
9000fff2:	bf00      	nop
9000fff4:	90015f30 	.word	0x90015f30
9000fff8:	90016660 	.word	0x90016660
9000fffc:	90015f84 	.word	0x90015f84
90010000:	90016558 	.word	0x90016558

90010004 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
90010004:	b580      	push	{r7, lr}
90010006:	b08a      	sub	sp, #40	; 0x28
90010008:	af04      	add	r7, sp, #16
9001000a:	60f8      	str	r0, [r7, #12]
9001000c:	60b9      	str	r1, [r7, #8]
9001000e:	607a      	str	r2, [r7, #4]
90010010:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
90010012:	68bb      	ldr	r3, [r7, #8]
90010014:	2b00      	cmp	r3, #0
90010016:	d106      	bne.n	90010026 <tcp_output_control_segment+0x22>
90010018:	4b1c      	ldr	r3, [pc, #112]	; (9001008c <tcp_output_control_segment+0x88>)
9001001a:	f240 7287 	movw	r2, #1927	; 0x787
9001001e:	491c      	ldr	r1, [pc, #112]	; (90010090 <tcp_output_control_segment+0x8c>)
90010020:	481c      	ldr	r0, [pc, #112]	; (90010094 <tcp_output_control_segment+0x90>)
90010022:	f003 fb09 	bl	90013638 <iprintf>

  netif = tcp_route(pcb, src, dst);
90010026:	683a      	ldr	r2, [r7, #0]
90010028:	6879      	ldr	r1, [r7, #4]
9001002a:	68f8      	ldr	r0, [r7, #12]
9001002c:	f7fe fae8 	bl	9000e600 <tcp_route>
90010030:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
90010032:	693b      	ldr	r3, [r7, #16]
90010034:	2b00      	cmp	r3, #0
90010036:	d102      	bne.n	9001003e <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
90010038:	23fc      	movs	r3, #252	; 0xfc
9001003a:	75fb      	strb	r3, [r7, #23]
9001003c:	e01c      	b.n	90010078 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
9001003e:	68fb      	ldr	r3, [r7, #12]
90010040:	2b00      	cmp	r3, #0
90010042:	d006      	beq.n	90010052 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
90010044:	68fb      	ldr	r3, [r7, #12]
90010046:	7adb      	ldrb	r3, [r3, #11]
90010048:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
9001004a:	68fb      	ldr	r3, [r7, #12]
9001004c:	7a9b      	ldrb	r3, [r3, #10]
9001004e:	757b      	strb	r3, [r7, #21]
90010050:	e003      	b.n	9001005a <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
90010052:	23ff      	movs	r3, #255	; 0xff
90010054:	75bb      	strb	r3, [r7, #22]
      tos = 0;
90010056:	2300      	movs	r3, #0
90010058:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
9001005a:	7dba      	ldrb	r2, [r7, #22]
9001005c:	693b      	ldr	r3, [r7, #16]
9001005e:	9302      	str	r3, [sp, #8]
90010060:	2306      	movs	r3, #6
90010062:	9301      	str	r3, [sp, #4]
90010064:	7d7b      	ldrb	r3, [r7, #21]
90010066:	9300      	str	r3, [sp, #0]
90010068:	4613      	mov	r3, r2
9001006a:	683a      	ldr	r2, [r7, #0]
9001006c:	6879      	ldr	r1, [r7, #4]
9001006e:	68b8      	ldr	r0, [r7, #8]
90010070:	f001 ffc6 	bl	90012000 <ip4_output_if>
90010074:	4603      	mov	r3, r0
90010076:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
90010078:	68b8      	ldr	r0, [r7, #8]
9001007a:	f7f9 fedb 	bl	90009e34 <pbuf_free>
  return err;
9001007e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
90010082:	4618      	mov	r0, r3
90010084:	3718      	adds	r7, #24
90010086:	46bd      	mov	sp, r7
90010088:	bd80      	pop	{r7, pc}
9001008a:	bf00      	nop
9001008c:	90015f30 	.word	0x90015f30
90010090:	90016688 	.word	0x90016688
90010094:	90015f84 	.word	0x90015f84

90010098 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
90010098:	b590      	push	{r4, r7, lr}
9001009a:	b08b      	sub	sp, #44	; 0x2c
9001009c:	af04      	add	r7, sp, #16
9001009e:	60f8      	str	r0, [r7, #12]
900100a0:	60b9      	str	r1, [r7, #8]
900100a2:	607a      	str	r2, [r7, #4]
900100a4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
900100a6:	683b      	ldr	r3, [r7, #0]
900100a8:	2b00      	cmp	r3, #0
900100aa:	d106      	bne.n	900100ba <tcp_rst+0x22>
900100ac:	4b1f      	ldr	r3, [pc, #124]	; (9001012c <tcp_rst+0x94>)
900100ae:	f240 72c4 	movw	r2, #1988	; 0x7c4
900100b2:	491f      	ldr	r1, [pc, #124]	; (90010130 <tcp_rst+0x98>)
900100b4:	481f      	ldr	r0, [pc, #124]	; (90010134 <tcp_rst+0x9c>)
900100b6:	f003 fabf 	bl	90013638 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
900100ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
900100bc:	2b00      	cmp	r3, #0
900100be:	d106      	bne.n	900100ce <tcp_rst+0x36>
900100c0:	4b1a      	ldr	r3, [pc, #104]	; (9001012c <tcp_rst+0x94>)
900100c2:	f240 72c5 	movw	r2, #1989	; 0x7c5
900100c6:	491c      	ldr	r1, [pc, #112]	; (90010138 <tcp_rst+0xa0>)
900100c8:	481a      	ldr	r0, [pc, #104]	; (90010134 <tcp_rst+0x9c>)
900100ca:	f003 fab5 	bl	90013638 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
900100ce:	2300      	movs	r3, #0
900100d0:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
900100d2:	f246 0308 	movw	r3, #24584	; 0x6008
900100d6:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
900100d8:	7dfb      	ldrb	r3, [r7, #23]
900100da:	b29c      	uxth	r4, r3
900100dc:	68b8      	ldr	r0, [r7, #8]
900100de:	f7f8 f9ce 	bl	9000847e <lwip_htonl>
900100e2:	4602      	mov	r2, r0
900100e4:	8abb      	ldrh	r3, [r7, #20]
900100e6:	9303      	str	r3, [sp, #12]
900100e8:	2314      	movs	r3, #20
900100ea:	9302      	str	r3, [sp, #8]
900100ec:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
900100ee:	9301      	str	r3, [sp, #4]
900100f0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
900100f2:	9300      	str	r3, [sp, #0]
900100f4:	4613      	mov	r3, r2
900100f6:	2200      	movs	r2, #0
900100f8:	4621      	mov	r1, r4
900100fa:	6878      	ldr	r0, [r7, #4]
900100fc:	f7ff fe92 	bl	9000fe24 <tcp_output_alloc_header_common>
90010100:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
90010102:	693b      	ldr	r3, [r7, #16]
90010104:	2b00      	cmp	r3, #0
90010106:	d00c      	beq.n	90010122 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
90010108:	7dfb      	ldrb	r3, [r7, #23]
9001010a:	2200      	movs	r2, #0
9001010c:	6939      	ldr	r1, [r7, #16]
9001010e:	68f8      	ldr	r0, [r7, #12]
90010110:	f7ff ff38 	bl	9000ff84 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
90010114:	6abb      	ldr	r3, [r7, #40]	; 0x28
90010116:	683a      	ldr	r2, [r7, #0]
90010118:	6939      	ldr	r1, [r7, #16]
9001011a:	68f8      	ldr	r0, [r7, #12]
9001011c:	f7ff ff72 	bl	90010004 <tcp_output_control_segment>
90010120:	e000      	b.n	90010124 <tcp_rst+0x8c>
    return;
90010122:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
90010124:	371c      	adds	r7, #28
90010126:	46bd      	mov	sp, r7
90010128:	bd90      	pop	{r4, r7, pc}
9001012a:	bf00      	nop
9001012c:	90015f30 	.word	0x90015f30
90010130:	900166b4 	.word	0x900166b4
90010134:	90015f84 	.word	0x90015f84
90010138:	900166d0 	.word	0x900166d0

9001013c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
9001013c:	b590      	push	{r4, r7, lr}
9001013e:	b087      	sub	sp, #28
90010140:	af00      	add	r7, sp, #0
90010142:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
90010144:	2300      	movs	r3, #0
90010146:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
90010148:	2300      	movs	r3, #0
9001014a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
9001014c:	687b      	ldr	r3, [r7, #4]
9001014e:	2b00      	cmp	r3, #0
90010150:	d106      	bne.n	90010160 <tcp_send_empty_ack+0x24>
90010152:	4b28      	ldr	r3, [pc, #160]	; (900101f4 <tcp_send_empty_ack+0xb8>)
90010154:	f240 72ea 	movw	r2, #2026	; 0x7ea
90010158:	4927      	ldr	r1, [pc, #156]	; (900101f8 <tcp_send_empty_ack+0xbc>)
9001015a:	4828      	ldr	r0, [pc, #160]	; (900101fc <tcp_send_empty_ack+0xc0>)
9001015c:	f003 fa6c 	bl	90013638 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
90010160:	7dfb      	ldrb	r3, [r7, #23]
90010162:	009b      	lsls	r3, r3, #2
90010164:	b2db      	uxtb	r3, r3
90010166:	f003 0304 	and.w	r3, r3, #4
9001016a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
9001016c:	7d7b      	ldrb	r3, [r7, #21]
9001016e:	b29c      	uxth	r4, r3
90010170:	687b      	ldr	r3, [r7, #4]
90010172:	6d1b      	ldr	r3, [r3, #80]	; 0x50
90010174:	4618      	mov	r0, r3
90010176:	f7f8 f982 	bl	9000847e <lwip_htonl>
9001017a:	4603      	mov	r3, r0
9001017c:	2200      	movs	r2, #0
9001017e:	4621      	mov	r1, r4
90010180:	6878      	ldr	r0, [r7, #4]
90010182:	f7ff fec1 	bl	9000ff08 <tcp_output_alloc_header>
90010186:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
90010188:	693b      	ldr	r3, [r7, #16]
9001018a:	2b00      	cmp	r3, #0
9001018c:	d109      	bne.n	900101a2 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
9001018e:	687b      	ldr	r3, [r7, #4]
90010190:	8b5b      	ldrh	r3, [r3, #26]
90010192:	f043 0303 	orr.w	r3, r3, #3
90010196:	b29a      	uxth	r2, r3
90010198:	687b      	ldr	r3, [r7, #4]
9001019a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
9001019c:	f06f 0301 	mvn.w	r3, #1
900101a0:	e023      	b.n	900101ea <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
900101a2:	7dbb      	ldrb	r3, [r7, #22]
900101a4:	7dfa      	ldrb	r2, [r7, #23]
900101a6:	6939      	ldr	r1, [r7, #16]
900101a8:	6878      	ldr	r0, [r7, #4]
900101aa:	f7ff feeb 	bl	9000ff84 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
900101ae:	687a      	ldr	r2, [r7, #4]
900101b0:	687b      	ldr	r3, [r7, #4]
900101b2:	3304      	adds	r3, #4
900101b4:	6939      	ldr	r1, [r7, #16]
900101b6:	6878      	ldr	r0, [r7, #4]
900101b8:	f7ff ff24 	bl	90010004 <tcp_output_control_segment>
900101bc:	4603      	mov	r3, r0
900101be:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
900101c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
900101c4:	2b00      	cmp	r3, #0
900101c6:	d007      	beq.n	900101d8 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
900101c8:	687b      	ldr	r3, [r7, #4]
900101ca:	8b5b      	ldrh	r3, [r3, #26]
900101cc:	f043 0303 	orr.w	r3, r3, #3
900101d0:	b29a      	uxth	r2, r3
900101d2:	687b      	ldr	r3, [r7, #4]
900101d4:	835a      	strh	r2, [r3, #26]
900101d6:	e006      	b.n	900101e6 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
900101d8:	687b      	ldr	r3, [r7, #4]
900101da:	8b5b      	ldrh	r3, [r3, #26]
900101dc:	f023 0303 	bic.w	r3, r3, #3
900101e0:	b29a      	uxth	r2, r3
900101e2:	687b      	ldr	r3, [r7, #4]
900101e4:	835a      	strh	r2, [r3, #26]
  }

  return err;
900101e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
900101ea:	4618      	mov	r0, r3
900101ec:	371c      	adds	r7, #28
900101ee:	46bd      	mov	sp, r7
900101f0:	bd90      	pop	{r4, r7, pc}
900101f2:	bf00      	nop
900101f4:	90015f30 	.word	0x90015f30
900101f8:	900166ec 	.word	0x900166ec
900101fc:	90015f84 	.word	0x90015f84

90010200 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
90010200:	b590      	push	{r4, r7, lr}
90010202:	b087      	sub	sp, #28
90010204:	af00      	add	r7, sp, #0
90010206:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
90010208:	2300      	movs	r3, #0
9001020a:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
9001020c:	687b      	ldr	r3, [r7, #4]
9001020e:	2b00      	cmp	r3, #0
90010210:	d106      	bne.n	90010220 <tcp_keepalive+0x20>
90010212:	4b18      	ldr	r3, [pc, #96]	; (90010274 <tcp_keepalive+0x74>)
90010214:	f640 0224 	movw	r2, #2084	; 0x824
90010218:	4917      	ldr	r1, [pc, #92]	; (90010278 <tcp_keepalive+0x78>)
9001021a:	4818      	ldr	r0, [pc, #96]	; (9001027c <tcp_keepalive+0x7c>)
9001021c:	f003 fa0c 	bl	90013638 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
90010220:	7dfb      	ldrb	r3, [r7, #23]
90010222:	b29c      	uxth	r4, r3
90010224:	687b      	ldr	r3, [r7, #4]
90010226:	6d1b      	ldr	r3, [r3, #80]	; 0x50
90010228:	3b01      	subs	r3, #1
9001022a:	4618      	mov	r0, r3
9001022c:	f7f8 f927 	bl	9000847e <lwip_htonl>
90010230:	4603      	mov	r3, r0
90010232:	2200      	movs	r2, #0
90010234:	4621      	mov	r1, r4
90010236:	6878      	ldr	r0, [r7, #4]
90010238:	f7ff fe66 	bl	9000ff08 <tcp_output_alloc_header>
9001023c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
9001023e:	693b      	ldr	r3, [r7, #16]
90010240:	2b00      	cmp	r3, #0
90010242:	d102      	bne.n	9001024a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
90010244:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
90010248:	e010      	b.n	9001026c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
9001024a:	7dfb      	ldrb	r3, [r7, #23]
9001024c:	2200      	movs	r2, #0
9001024e:	6939      	ldr	r1, [r7, #16]
90010250:	6878      	ldr	r0, [r7, #4]
90010252:	f7ff fe97 	bl	9000ff84 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
90010256:	687a      	ldr	r2, [r7, #4]
90010258:	687b      	ldr	r3, [r7, #4]
9001025a:	3304      	adds	r3, #4
9001025c:	6939      	ldr	r1, [r7, #16]
9001025e:	6878      	ldr	r0, [r7, #4]
90010260:	f7ff fed0 	bl	90010004 <tcp_output_control_segment>
90010264:	4603      	mov	r3, r0
90010266:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
90010268:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
9001026c:	4618      	mov	r0, r3
9001026e:	371c      	adds	r7, #28
90010270:	46bd      	mov	sp, r7
90010272:	bd90      	pop	{r4, r7, pc}
90010274:	90015f30 	.word	0x90015f30
90010278:	9001670c 	.word	0x9001670c
9001027c:	90015f84 	.word	0x90015f84

90010280 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
90010280:	b590      	push	{r4, r7, lr}
90010282:	b08b      	sub	sp, #44	; 0x2c
90010284:	af00      	add	r7, sp, #0
90010286:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
90010288:	2300      	movs	r3, #0
9001028a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
9001028e:	687b      	ldr	r3, [r7, #4]
90010290:	2b00      	cmp	r3, #0
90010292:	d106      	bne.n	900102a2 <tcp_zero_window_probe+0x22>
90010294:	4b4c      	ldr	r3, [pc, #304]	; (900103c8 <tcp_zero_window_probe+0x148>)
90010296:	f640 024f 	movw	r2, #2127	; 0x84f
9001029a:	494c      	ldr	r1, [pc, #304]	; (900103cc <tcp_zero_window_probe+0x14c>)
9001029c:	484c      	ldr	r0, [pc, #304]	; (900103d0 <tcp_zero_window_probe+0x150>)
9001029e:	f003 f9cb 	bl	90013638 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
900102a2:	687b      	ldr	r3, [r7, #4]
900102a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
900102a6:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
900102a8:	6a3b      	ldr	r3, [r7, #32]
900102aa:	2b00      	cmp	r3, #0
900102ac:	d101      	bne.n	900102b2 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
900102ae:	2300      	movs	r3, #0
900102b0:	e086      	b.n	900103c0 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
900102b2:	687b      	ldr	r3, [r7, #4]
900102b4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
900102b8:	2bff      	cmp	r3, #255	; 0xff
900102ba:	d007      	beq.n	900102cc <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
900102bc:	687b      	ldr	r3, [r7, #4]
900102be:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
900102c2:	3301      	adds	r3, #1
900102c4:	b2da      	uxtb	r2, r3
900102c6:	687b      	ldr	r3, [r7, #4]
900102c8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
900102cc:	6a3b      	ldr	r3, [r7, #32]
900102ce:	68db      	ldr	r3, [r3, #12]
900102d0:	899b      	ldrh	r3, [r3, #12]
900102d2:	b29b      	uxth	r3, r3
900102d4:	4618      	mov	r0, r3
900102d6:	f7f8 f8bd 	bl	90008454 <lwip_htons>
900102da:	4603      	mov	r3, r0
900102dc:	b2db      	uxtb	r3, r3
900102de:	f003 0301 	and.w	r3, r3, #1
900102e2:	2b00      	cmp	r3, #0
900102e4:	d005      	beq.n	900102f2 <tcp_zero_window_probe+0x72>
900102e6:	6a3b      	ldr	r3, [r7, #32]
900102e8:	891b      	ldrh	r3, [r3, #8]
900102ea:	2b00      	cmp	r3, #0
900102ec:	d101      	bne.n	900102f2 <tcp_zero_window_probe+0x72>
900102ee:	2301      	movs	r3, #1
900102f0:	e000      	b.n	900102f4 <tcp_zero_window_probe+0x74>
900102f2:	2300      	movs	r3, #0
900102f4:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
900102f6:	7ffb      	ldrb	r3, [r7, #31]
900102f8:	2b00      	cmp	r3, #0
900102fa:	bf0c      	ite	eq
900102fc:	2301      	moveq	r3, #1
900102fe:	2300      	movne	r3, #0
90010300:	b2db      	uxtb	r3, r3
90010302:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
90010304:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
90010308:	b299      	uxth	r1, r3
9001030a:	6a3b      	ldr	r3, [r7, #32]
9001030c:	68db      	ldr	r3, [r3, #12]
9001030e:	685b      	ldr	r3, [r3, #4]
90010310:	8bba      	ldrh	r2, [r7, #28]
90010312:	6878      	ldr	r0, [r7, #4]
90010314:	f7ff fdf8 	bl	9000ff08 <tcp_output_alloc_header>
90010318:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
9001031a:	69bb      	ldr	r3, [r7, #24]
9001031c:	2b00      	cmp	r3, #0
9001031e:	d102      	bne.n	90010326 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
90010320:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
90010324:	e04c      	b.n	900103c0 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
90010326:	69bb      	ldr	r3, [r7, #24]
90010328:	685b      	ldr	r3, [r3, #4]
9001032a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
9001032c:	7ffb      	ldrb	r3, [r7, #31]
9001032e:	2b00      	cmp	r3, #0
90010330:	d011      	beq.n	90010356 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
90010332:	697b      	ldr	r3, [r7, #20]
90010334:	899b      	ldrh	r3, [r3, #12]
90010336:	b29b      	uxth	r3, r3
90010338:	b21b      	sxth	r3, r3
9001033a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
9001033e:	b21c      	sxth	r4, r3
90010340:	2011      	movs	r0, #17
90010342:	f7f8 f887 	bl	90008454 <lwip_htons>
90010346:	4603      	mov	r3, r0
90010348:	b21b      	sxth	r3, r3
9001034a:	4323      	orrs	r3, r4
9001034c:	b21b      	sxth	r3, r3
9001034e:	b29a      	uxth	r2, r3
90010350:	697b      	ldr	r3, [r7, #20]
90010352:	819a      	strh	r2, [r3, #12]
90010354:	e010      	b.n	90010378 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
90010356:	69bb      	ldr	r3, [r7, #24]
90010358:	685b      	ldr	r3, [r3, #4]
9001035a:	3314      	adds	r3, #20
9001035c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
9001035e:	6a3b      	ldr	r3, [r7, #32]
90010360:	6858      	ldr	r0, [r3, #4]
90010362:	6a3b      	ldr	r3, [r7, #32]
90010364:	685b      	ldr	r3, [r3, #4]
90010366:	891a      	ldrh	r2, [r3, #8]
90010368:	6a3b      	ldr	r3, [r7, #32]
9001036a:	891b      	ldrh	r3, [r3, #8]
9001036c:	1ad3      	subs	r3, r2, r3
9001036e:	b29b      	uxth	r3, r3
90010370:	2201      	movs	r2, #1
90010372:	6939      	ldr	r1, [r7, #16]
90010374:	f7f9 ff54 	bl	9000a220 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
90010378:	6a3b      	ldr	r3, [r7, #32]
9001037a:	68db      	ldr	r3, [r3, #12]
9001037c:	685b      	ldr	r3, [r3, #4]
9001037e:	4618      	mov	r0, r3
90010380:	f7f8 f87d 	bl	9000847e <lwip_htonl>
90010384:	4603      	mov	r3, r0
90010386:	3301      	adds	r3, #1
90010388:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
9001038a:	687b      	ldr	r3, [r7, #4]
9001038c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
9001038e:	68fb      	ldr	r3, [r7, #12]
90010390:	1ad3      	subs	r3, r2, r3
90010392:	2b00      	cmp	r3, #0
90010394:	da02      	bge.n	9001039c <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
90010396:	687b      	ldr	r3, [r7, #4]
90010398:	68fa      	ldr	r2, [r7, #12]
9001039a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
9001039c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
900103a0:	2200      	movs	r2, #0
900103a2:	69b9      	ldr	r1, [r7, #24]
900103a4:	6878      	ldr	r0, [r7, #4]
900103a6:	f7ff fded 	bl	9000ff84 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
900103aa:	687a      	ldr	r2, [r7, #4]
900103ac:	687b      	ldr	r3, [r7, #4]
900103ae:	3304      	adds	r3, #4
900103b0:	69b9      	ldr	r1, [r7, #24]
900103b2:	6878      	ldr	r0, [r7, #4]
900103b4:	f7ff fe26 	bl	90010004 <tcp_output_control_segment>
900103b8:	4603      	mov	r3, r0
900103ba:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
900103bc:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
900103c0:	4618      	mov	r0, r3
900103c2:	372c      	adds	r7, #44	; 0x2c
900103c4:	46bd      	mov	sp, r7
900103c6:	bd90      	pop	{r4, r7, pc}
900103c8:	90015f30 	.word	0x90015f30
900103cc:	90016728 	.word	0x90016728
900103d0:	90015f84 	.word	0x90015f84

900103d4 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
900103d4:	b580      	push	{r7, lr}
900103d6:	b082      	sub	sp, #8
900103d8:	af00      	add	r7, sp, #0
900103da:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
900103dc:	f7fa f80e 	bl	9000a3fc <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
900103e0:	4b0a      	ldr	r3, [pc, #40]	; (9001040c <tcpip_tcp_timer+0x38>)
900103e2:	681b      	ldr	r3, [r3, #0]
900103e4:	2b00      	cmp	r3, #0
900103e6:	d103      	bne.n	900103f0 <tcpip_tcp_timer+0x1c>
900103e8:	4b09      	ldr	r3, [pc, #36]	; (90010410 <tcpip_tcp_timer+0x3c>)
900103ea:	681b      	ldr	r3, [r3, #0]
900103ec:	2b00      	cmp	r3, #0
900103ee:	d005      	beq.n	900103fc <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
900103f0:	2200      	movs	r2, #0
900103f2:	4908      	ldr	r1, [pc, #32]	; (90010414 <tcpip_tcp_timer+0x40>)
900103f4:	20fa      	movs	r0, #250	; 0xfa
900103f6:	f000 f8f3 	bl	900105e0 <sys_timeout>
900103fa:	e003      	b.n	90010404 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
900103fc:	4b06      	ldr	r3, [pc, #24]	; (90010418 <tcpip_tcp_timer+0x44>)
900103fe:	2200      	movs	r2, #0
90010400:	601a      	str	r2, [r3, #0]
  }
}
90010402:	bf00      	nop
90010404:	bf00      	nop
90010406:	3708      	adds	r7, #8
90010408:	46bd      	mov	sp, r7
9001040a:	bd80      	pop	{r7, pc}
9001040c:	2401102c 	.word	0x2401102c
90010410:	24011030 	.word	0x24011030
90010414:	900103d5 	.word	0x900103d5
90010418:	24011078 	.word	0x24011078

9001041c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
9001041c:	b580      	push	{r7, lr}
9001041e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
90010420:	4b0a      	ldr	r3, [pc, #40]	; (9001044c <tcp_timer_needed+0x30>)
90010422:	681b      	ldr	r3, [r3, #0]
90010424:	2b00      	cmp	r3, #0
90010426:	d10f      	bne.n	90010448 <tcp_timer_needed+0x2c>
90010428:	4b09      	ldr	r3, [pc, #36]	; (90010450 <tcp_timer_needed+0x34>)
9001042a:	681b      	ldr	r3, [r3, #0]
9001042c:	2b00      	cmp	r3, #0
9001042e:	d103      	bne.n	90010438 <tcp_timer_needed+0x1c>
90010430:	4b08      	ldr	r3, [pc, #32]	; (90010454 <tcp_timer_needed+0x38>)
90010432:	681b      	ldr	r3, [r3, #0]
90010434:	2b00      	cmp	r3, #0
90010436:	d007      	beq.n	90010448 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
90010438:	4b04      	ldr	r3, [pc, #16]	; (9001044c <tcp_timer_needed+0x30>)
9001043a:	2201      	movs	r2, #1
9001043c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
9001043e:	2200      	movs	r2, #0
90010440:	4905      	ldr	r1, [pc, #20]	; (90010458 <tcp_timer_needed+0x3c>)
90010442:	20fa      	movs	r0, #250	; 0xfa
90010444:	f000 f8cc 	bl	900105e0 <sys_timeout>
  }
}
90010448:	bf00      	nop
9001044a:	bd80      	pop	{r7, pc}
9001044c:	24011078 	.word	0x24011078
90010450:	2401102c 	.word	0x2401102c
90010454:	24011030 	.word	0x24011030
90010458:	900103d5 	.word	0x900103d5

9001045c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
9001045c:	b580      	push	{r7, lr}
9001045e:	b086      	sub	sp, #24
90010460:	af00      	add	r7, sp, #0
90010462:	60f8      	str	r0, [r7, #12]
90010464:	60b9      	str	r1, [r7, #8]
90010466:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
90010468:	200a      	movs	r0, #10
9001046a:	f7f8 fdc9 	bl	90009000 <memp_malloc>
9001046e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
90010470:	693b      	ldr	r3, [r7, #16]
90010472:	2b00      	cmp	r3, #0
90010474:	d109      	bne.n	9001048a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
90010476:	693b      	ldr	r3, [r7, #16]
90010478:	2b00      	cmp	r3, #0
9001047a:	d151      	bne.n	90010520 <sys_timeout_abs+0xc4>
9001047c:	4b2a      	ldr	r3, [pc, #168]	; (90010528 <sys_timeout_abs+0xcc>)
9001047e:	22be      	movs	r2, #190	; 0xbe
90010480:	492a      	ldr	r1, [pc, #168]	; (9001052c <sys_timeout_abs+0xd0>)
90010482:	482b      	ldr	r0, [pc, #172]	; (90010530 <sys_timeout_abs+0xd4>)
90010484:	f003 f8d8 	bl	90013638 <iprintf>
    return;
90010488:	e04a      	b.n	90010520 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
9001048a:	693b      	ldr	r3, [r7, #16]
9001048c:	2200      	movs	r2, #0
9001048e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
90010490:	693b      	ldr	r3, [r7, #16]
90010492:	68ba      	ldr	r2, [r7, #8]
90010494:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
90010496:	693b      	ldr	r3, [r7, #16]
90010498:	687a      	ldr	r2, [r7, #4]
9001049a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
9001049c:	693b      	ldr	r3, [r7, #16]
9001049e:	68fa      	ldr	r2, [r7, #12]
900104a0:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
900104a2:	4b24      	ldr	r3, [pc, #144]	; (90010534 <sys_timeout_abs+0xd8>)
900104a4:	681b      	ldr	r3, [r3, #0]
900104a6:	2b00      	cmp	r3, #0
900104a8:	d103      	bne.n	900104b2 <sys_timeout_abs+0x56>
    next_timeout = timeout;
900104aa:	4a22      	ldr	r2, [pc, #136]	; (90010534 <sys_timeout_abs+0xd8>)
900104ac:	693b      	ldr	r3, [r7, #16]
900104ae:	6013      	str	r3, [r2, #0]
    return;
900104b0:	e037      	b.n	90010522 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
900104b2:	693b      	ldr	r3, [r7, #16]
900104b4:	685a      	ldr	r2, [r3, #4]
900104b6:	4b1f      	ldr	r3, [pc, #124]	; (90010534 <sys_timeout_abs+0xd8>)
900104b8:	681b      	ldr	r3, [r3, #0]
900104ba:	685b      	ldr	r3, [r3, #4]
900104bc:	1ad3      	subs	r3, r2, r3
900104be:	0fdb      	lsrs	r3, r3, #31
900104c0:	f003 0301 	and.w	r3, r3, #1
900104c4:	b2db      	uxtb	r3, r3
900104c6:	2b00      	cmp	r3, #0
900104c8:	d007      	beq.n	900104da <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
900104ca:	4b1a      	ldr	r3, [pc, #104]	; (90010534 <sys_timeout_abs+0xd8>)
900104cc:	681a      	ldr	r2, [r3, #0]
900104ce:	693b      	ldr	r3, [r7, #16]
900104d0:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
900104d2:	4a18      	ldr	r2, [pc, #96]	; (90010534 <sys_timeout_abs+0xd8>)
900104d4:	693b      	ldr	r3, [r7, #16]
900104d6:	6013      	str	r3, [r2, #0]
900104d8:	e023      	b.n	90010522 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
900104da:	4b16      	ldr	r3, [pc, #88]	; (90010534 <sys_timeout_abs+0xd8>)
900104dc:	681b      	ldr	r3, [r3, #0]
900104de:	617b      	str	r3, [r7, #20]
900104e0:	e01a      	b.n	90010518 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
900104e2:	697b      	ldr	r3, [r7, #20]
900104e4:	681b      	ldr	r3, [r3, #0]
900104e6:	2b00      	cmp	r3, #0
900104e8:	d00b      	beq.n	90010502 <sys_timeout_abs+0xa6>
900104ea:	693b      	ldr	r3, [r7, #16]
900104ec:	685a      	ldr	r2, [r3, #4]
900104ee:	697b      	ldr	r3, [r7, #20]
900104f0:	681b      	ldr	r3, [r3, #0]
900104f2:	685b      	ldr	r3, [r3, #4]
900104f4:	1ad3      	subs	r3, r2, r3
900104f6:	0fdb      	lsrs	r3, r3, #31
900104f8:	f003 0301 	and.w	r3, r3, #1
900104fc:	b2db      	uxtb	r3, r3
900104fe:	2b00      	cmp	r3, #0
90010500:	d007      	beq.n	90010512 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
90010502:	697b      	ldr	r3, [r7, #20]
90010504:	681a      	ldr	r2, [r3, #0]
90010506:	693b      	ldr	r3, [r7, #16]
90010508:	601a      	str	r2, [r3, #0]
        t->next = timeout;
9001050a:	697b      	ldr	r3, [r7, #20]
9001050c:	693a      	ldr	r2, [r7, #16]
9001050e:	601a      	str	r2, [r3, #0]
        break;
90010510:	e007      	b.n	90010522 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
90010512:	697b      	ldr	r3, [r7, #20]
90010514:	681b      	ldr	r3, [r3, #0]
90010516:	617b      	str	r3, [r7, #20]
90010518:	697b      	ldr	r3, [r7, #20]
9001051a:	2b00      	cmp	r3, #0
9001051c:	d1e1      	bne.n	900104e2 <sys_timeout_abs+0x86>
9001051e:	e000      	b.n	90010522 <sys_timeout_abs+0xc6>
    return;
90010520:	bf00      	nop
      }
    }
  }
}
90010522:	3718      	adds	r7, #24
90010524:	46bd      	mov	sp, r7
90010526:	bd80      	pop	{r7, pc}
90010528:	9001674c 	.word	0x9001674c
9001052c:	90016780 	.word	0x90016780
90010530:	900167c0 	.word	0x900167c0
90010534:	24011070 	.word	0x24011070

90010538 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
90010538:	b580      	push	{r7, lr}
9001053a:	b086      	sub	sp, #24
9001053c:	af00      	add	r7, sp, #0
9001053e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
90010540:	687b      	ldr	r3, [r7, #4]
90010542:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
90010544:	697b      	ldr	r3, [r7, #20]
90010546:	685b      	ldr	r3, [r3, #4]
90010548:	4798      	blx	r3

  now = sys_now();
9001054a:	f7f3 fe91 	bl	90004270 <sys_now>
9001054e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
90010550:	697b      	ldr	r3, [r7, #20]
90010552:	681a      	ldr	r2, [r3, #0]
90010554:	4b0f      	ldr	r3, [pc, #60]	; (90010594 <lwip_cyclic_timer+0x5c>)
90010556:	681b      	ldr	r3, [r3, #0]
90010558:	4413      	add	r3, r2
9001055a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
9001055c:	68fa      	ldr	r2, [r7, #12]
9001055e:	693b      	ldr	r3, [r7, #16]
90010560:	1ad3      	subs	r3, r2, r3
90010562:	0fdb      	lsrs	r3, r3, #31
90010564:	f003 0301 	and.w	r3, r3, #1
90010568:	b2db      	uxtb	r3, r3
9001056a:	2b00      	cmp	r3, #0
9001056c:	d009      	beq.n	90010582 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
9001056e:	697b      	ldr	r3, [r7, #20]
90010570:	681a      	ldr	r2, [r3, #0]
90010572:	693b      	ldr	r3, [r7, #16]
90010574:	4413      	add	r3, r2
90010576:	687a      	ldr	r2, [r7, #4]
90010578:	4907      	ldr	r1, [pc, #28]	; (90010598 <lwip_cyclic_timer+0x60>)
9001057a:	4618      	mov	r0, r3
9001057c:	f7ff ff6e 	bl	9001045c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
90010580:	e004      	b.n	9001058c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
90010582:	687a      	ldr	r2, [r7, #4]
90010584:	4904      	ldr	r1, [pc, #16]	; (90010598 <lwip_cyclic_timer+0x60>)
90010586:	68f8      	ldr	r0, [r7, #12]
90010588:	f7ff ff68 	bl	9001045c <sys_timeout_abs>
}
9001058c:	bf00      	nop
9001058e:	3718      	adds	r7, #24
90010590:	46bd      	mov	sp, r7
90010592:	bd80      	pop	{r7, pc}
90010594:	24011074 	.word	0x24011074
90010598:	90010539 	.word	0x90010539

9001059c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
9001059c:	b580      	push	{r7, lr}
9001059e:	b082      	sub	sp, #8
900105a0:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
900105a2:	2301      	movs	r3, #1
900105a4:	607b      	str	r3, [r7, #4]
900105a6:	e00e      	b.n	900105c6 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
900105a8:	4a0b      	ldr	r2, [pc, #44]	; (900105d8 <sys_timeouts_init+0x3c>)
900105aa:	687b      	ldr	r3, [r7, #4]
900105ac:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
900105b0:	687b      	ldr	r3, [r7, #4]
900105b2:	00db      	lsls	r3, r3, #3
900105b4:	4a08      	ldr	r2, [pc, #32]	; (900105d8 <sys_timeouts_init+0x3c>)
900105b6:	4413      	add	r3, r2
900105b8:	461a      	mov	r2, r3
900105ba:	4908      	ldr	r1, [pc, #32]	; (900105dc <sys_timeouts_init+0x40>)
900105bc:	f000 f810 	bl	900105e0 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
900105c0:	687b      	ldr	r3, [r7, #4]
900105c2:	3301      	adds	r3, #1
900105c4:	607b      	str	r3, [r7, #4]
900105c6:	687b      	ldr	r3, [r7, #4]
900105c8:	2b02      	cmp	r3, #2
900105ca:	d9ed      	bls.n	900105a8 <sys_timeouts_init+0xc>
  }
}
900105cc:	bf00      	nop
900105ce:	bf00      	nop
900105d0:	3708      	adds	r7, #8
900105d2:	46bd      	mov	sp, r7
900105d4:	bd80      	pop	{r7, pc}
900105d6:	bf00      	nop
900105d8:	900174b8 	.word	0x900174b8
900105dc:	90010539 	.word	0x90010539

900105e0 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
900105e0:	b580      	push	{r7, lr}
900105e2:	b086      	sub	sp, #24
900105e4:	af00      	add	r7, sp, #0
900105e6:	60f8      	str	r0, [r7, #12]
900105e8:	60b9      	str	r1, [r7, #8]
900105ea:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
900105ec:	68fb      	ldr	r3, [r7, #12]
900105ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
900105f2:	d306      	bcc.n	90010602 <sys_timeout+0x22>
900105f4:	4b0a      	ldr	r3, [pc, #40]	; (90010620 <sys_timeout+0x40>)
900105f6:	f240 1229 	movw	r2, #297	; 0x129
900105fa:	490a      	ldr	r1, [pc, #40]	; (90010624 <sys_timeout+0x44>)
900105fc:	480a      	ldr	r0, [pc, #40]	; (90010628 <sys_timeout+0x48>)
900105fe:	f003 f81b 	bl	90013638 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
90010602:	f7f3 fe35 	bl	90004270 <sys_now>
90010606:	4602      	mov	r2, r0
90010608:	68fb      	ldr	r3, [r7, #12]
9001060a:	4413      	add	r3, r2
9001060c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
9001060e:	687a      	ldr	r2, [r7, #4]
90010610:	68b9      	ldr	r1, [r7, #8]
90010612:	6978      	ldr	r0, [r7, #20]
90010614:	f7ff ff22 	bl	9001045c <sys_timeout_abs>
#endif
}
90010618:	bf00      	nop
9001061a:	3718      	adds	r7, #24
9001061c:	46bd      	mov	sp, r7
9001061e:	bd80      	pop	{r7, pc}
90010620:	9001674c 	.word	0x9001674c
90010624:	900167e8 	.word	0x900167e8
90010628:	900167c0 	.word	0x900167c0

9001062c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
9001062c:	b580      	push	{r7, lr}
9001062e:	b084      	sub	sp, #16
90010630:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
90010632:	f7f3 fe1d 	bl	90004270 <sys_now>
90010636:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
90010638:	4b17      	ldr	r3, [pc, #92]	; (90010698 <sys_check_timeouts+0x6c>)
9001063a:	681b      	ldr	r3, [r3, #0]
9001063c:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
9001063e:	68bb      	ldr	r3, [r7, #8]
90010640:	2b00      	cmp	r3, #0
90010642:	d022      	beq.n	9001068a <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
90010644:	68bb      	ldr	r3, [r7, #8]
90010646:	685b      	ldr	r3, [r3, #4]
90010648:	68fa      	ldr	r2, [r7, #12]
9001064a:	1ad3      	subs	r3, r2, r3
9001064c:	0fdb      	lsrs	r3, r3, #31
9001064e:	f003 0301 	and.w	r3, r3, #1
90010652:	b2db      	uxtb	r3, r3
90010654:	2b00      	cmp	r3, #0
90010656:	d11a      	bne.n	9001068e <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
90010658:	68bb      	ldr	r3, [r7, #8]
9001065a:	681b      	ldr	r3, [r3, #0]
9001065c:	4a0e      	ldr	r2, [pc, #56]	; (90010698 <sys_check_timeouts+0x6c>)
9001065e:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
90010660:	68bb      	ldr	r3, [r7, #8]
90010662:	689b      	ldr	r3, [r3, #8]
90010664:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
90010666:	68bb      	ldr	r3, [r7, #8]
90010668:	68db      	ldr	r3, [r3, #12]
9001066a:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
9001066c:	68bb      	ldr	r3, [r7, #8]
9001066e:	685b      	ldr	r3, [r3, #4]
90010670:	4a0a      	ldr	r2, [pc, #40]	; (9001069c <sys_check_timeouts+0x70>)
90010672:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
90010674:	68b9      	ldr	r1, [r7, #8]
90010676:	200a      	movs	r0, #10
90010678:	f7f8 fd38 	bl	900090ec <memp_free>
    if (handler != NULL) {
9001067c:	687b      	ldr	r3, [r7, #4]
9001067e:	2b00      	cmp	r3, #0
90010680:	d0da      	beq.n	90010638 <sys_check_timeouts+0xc>
      handler(arg);
90010682:	687b      	ldr	r3, [r7, #4]
90010684:	6838      	ldr	r0, [r7, #0]
90010686:	4798      	blx	r3
  do {
90010688:	e7d6      	b.n	90010638 <sys_check_timeouts+0xc>
      return;
9001068a:	bf00      	nop
9001068c:	e000      	b.n	90010690 <sys_check_timeouts+0x64>
      return;
9001068e:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
90010690:	3710      	adds	r7, #16
90010692:	46bd      	mov	sp, r7
90010694:	bd80      	pop	{r7, pc}
90010696:	bf00      	nop
90010698:	24011070 	.word	0x24011070
9001069c:	24011074 	.word	0x24011074

900106a0 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
900106a0:	b580      	push	{r7, lr}
900106a2:	b082      	sub	sp, #8
900106a4:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
900106a6:	4b16      	ldr	r3, [pc, #88]	; (90010700 <sys_timeouts_sleeptime+0x60>)
900106a8:	681b      	ldr	r3, [r3, #0]
900106aa:	2b00      	cmp	r3, #0
900106ac:	d102      	bne.n	900106b4 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
900106ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
900106b2:	e020      	b.n	900106f6 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
900106b4:	f7f3 fddc 	bl	90004270 <sys_now>
900106b8:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
900106ba:	4b11      	ldr	r3, [pc, #68]	; (90010700 <sys_timeouts_sleeptime+0x60>)
900106bc:	681b      	ldr	r3, [r3, #0]
900106be:	685a      	ldr	r2, [r3, #4]
900106c0:	687b      	ldr	r3, [r7, #4]
900106c2:	1ad3      	subs	r3, r2, r3
900106c4:	0fdb      	lsrs	r3, r3, #31
900106c6:	f003 0301 	and.w	r3, r3, #1
900106ca:	b2db      	uxtb	r3, r3
900106cc:	2b00      	cmp	r3, #0
900106ce:	d001      	beq.n	900106d4 <sys_timeouts_sleeptime+0x34>
    return 0;
900106d0:	2300      	movs	r3, #0
900106d2:	e010      	b.n	900106f6 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
900106d4:	4b0a      	ldr	r3, [pc, #40]	; (90010700 <sys_timeouts_sleeptime+0x60>)
900106d6:	681b      	ldr	r3, [r3, #0]
900106d8:	685a      	ldr	r2, [r3, #4]
900106da:	687b      	ldr	r3, [r7, #4]
900106dc:	1ad3      	subs	r3, r2, r3
900106de:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
900106e0:	683b      	ldr	r3, [r7, #0]
900106e2:	2b00      	cmp	r3, #0
900106e4:	da06      	bge.n	900106f4 <sys_timeouts_sleeptime+0x54>
900106e6:	4b07      	ldr	r3, [pc, #28]	; (90010704 <sys_timeouts_sleeptime+0x64>)
900106e8:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
900106ec:	4906      	ldr	r1, [pc, #24]	; (90010708 <sys_timeouts_sleeptime+0x68>)
900106ee:	4807      	ldr	r0, [pc, #28]	; (9001070c <sys_timeouts_sleeptime+0x6c>)
900106f0:	f002 ffa2 	bl	90013638 <iprintf>
    return ret;
900106f4:	683b      	ldr	r3, [r7, #0]
  }
}
900106f6:	4618      	mov	r0, r3
900106f8:	3708      	adds	r7, #8
900106fa:	46bd      	mov	sp, r7
900106fc:	bd80      	pop	{r7, pc}
900106fe:	bf00      	nop
90010700:	24011070 	.word	0x24011070
90010704:	9001674c 	.word	0x9001674c
90010708:	90016820 	.word	0x90016820
9001070c:	900167c0 	.word	0x900167c0

90010710 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
90010710:	b580      	push	{r7, lr}
90010712:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
90010714:	f002 ffa8 	bl	90013668 <rand>
90010718:	4603      	mov	r3, r0
9001071a:	b29b      	uxth	r3, r3
9001071c:	f3c3 030d 	ubfx	r3, r3, #0, #14
90010720:	b29b      	uxth	r3, r3
90010722:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
90010726:	b29a      	uxth	r2, r3
90010728:	4b01      	ldr	r3, [pc, #4]	; (90010730 <udp_init+0x20>)
9001072a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
9001072c:	bf00      	nop
9001072e:	bd80      	pop	{r7, pc}
90010730:	24000030 	.word	0x24000030

90010734 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
90010734:	b580      	push	{r7, lr}
90010736:	b084      	sub	sp, #16
90010738:	af00      	add	r7, sp, #0
9001073a:	60f8      	str	r0, [r7, #12]
9001073c:	60b9      	str	r1, [r7, #8]
9001073e:	4613      	mov	r3, r2
90010740:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
90010742:	68fb      	ldr	r3, [r7, #12]
90010744:	2b00      	cmp	r3, #0
90010746:	d105      	bne.n	90010754 <udp_input_local_match+0x20>
90010748:	4b27      	ldr	r3, [pc, #156]	; (900107e8 <udp_input_local_match+0xb4>)
9001074a:	2287      	movs	r2, #135	; 0x87
9001074c:	4927      	ldr	r1, [pc, #156]	; (900107ec <udp_input_local_match+0xb8>)
9001074e:	4828      	ldr	r0, [pc, #160]	; (900107f0 <udp_input_local_match+0xbc>)
90010750:	f002 ff72 	bl	90013638 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
90010754:	68bb      	ldr	r3, [r7, #8]
90010756:	2b00      	cmp	r3, #0
90010758:	d105      	bne.n	90010766 <udp_input_local_match+0x32>
9001075a:	4b23      	ldr	r3, [pc, #140]	; (900107e8 <udp_input_local_match+0xb4>)
9001075c:	2288      	movs	r2, #136	; 0x88
9001075e:	4925      	ldr	r1, [pc, #148]	; (900107f4 <udp_input_local_match+0xc0>)
90010760:	4823      	ldr	r0, [pc, #140]	; (900107f0 <udp_input_local_match+0xbc>)
90010762:	f002 ff69 	bl	90013638 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
90010766:	68fb      	ldr	r3, [r7, #12]
90010768:	7a1b      	ldrb	r3, [r3, #8]
9001076a:	2b00      	cmp	r3, #0
9001076c:	d00b      	beq.n	90010786 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
9001076e:	68fb      	ldr	r3, [r7, #12]
90010770:	7a1a      	ldrb	r2, [r3, #8]
90010772:	4b21      	ldr	r3, [pc, #132]	; (900107f8 <udp_input_local_match+0xc4>)
90010774:	685b      	ldr	r3, [r3, #4]
90010776:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
9001077a:	3301      	adds	r3, #1
9001077c:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
9001077e:	429a      	cmp	r2, r3
90010780:	d001      	beq.n	90010786 <udp_input_local_match+0x52>
    return 0;
90010782:	2300      	movs	r3, #0
90010784:	e02b      	b.n	900107de <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
90010786:	79fb      	ldrb	r3, [r7, #7]
90010788:	2b00      	cmp	r3, #0
9001078a:	d018      	beq.n	900107be <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
9001078c:	68fb      	ldr	r3, [r7, #12]
9001078e:	2b00      	cmp	r3, #0
90010790:	d013      	beq.n	900107ba <udp_input_local_match+0x86>
90010792:	68fb      	ldr	r3, [r7, #12]
90010794:	681b      	ldr	r3, [r3, #0]
90010796:	2b00      	cmp	r3, #0
90010798:	d00f      	beq.n	900107ba <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
9001079a:	4b17      	ldr	r3, [pc, #92]	; (900107f8 <udp_input_local_match+0xc4>)
9001079c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
9001079e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
900107a2:	d00a      	beq.n	900107ba <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
900107a4:	68fb      	ldr	r3, [r7, #12]
900107a6:	681a      	ldr	r2, [r3, #0]
900107a8:	4b13      	ldr	r3, [pc, #76]	; (900107f8 <udp_input_local_match+0xc4>)
900107aa:	695b      	ldr	r3, [r3, #20]
900107ac:	405a      	eors	r2, r3
900107ae:	68bb      	ldr	r3, [r7, #8]
900107b0:	3308      	adds	r3, #8
900107b2:	681b      	ldr	r3, [r3, #0]
900107b4:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
900107b6:	2b00      	cmp	r3, #0
900107b8:	d110      	bne.n	900107dc <udp_input_local_match+0xa8>
          return 1;
900107ba:	2301      	movs	r3, #1
900107bc:	e00f      	b.n	900107de <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
900107be:	68fb      	ldr	r3, [r7, #12]
900107c0:	2b00      	cmp	r3, #0
900107c2:	d009      	beq.n	900107d8 <udp_input_local_match+0xa4>
900107c4:	68fb      	ldr	r3, [r7, #12]
900107c6:	681b      	ldr	r3, [r3, #0]
900107c8:	2b00      	cmp	r3, #0
900107ca:	d005      	beq.n	900107d8 <udp_input_local_match+0xa4>
900107cc:	68fb      	ldr	r3, [r7, #12]
900107ce:	681a      	ldr	r2, [r3, #0]
900107d0:	4b09      	ldr	r3, [pc, #36]	; (900107f8 <udp_input_local_match+0xc4>)
900107d2:	695b      	ldr	r3, [r3, #20]
900107d4:	429a      	cmp	r2, r3
900107d6:	d101      	bne.n	900107dc <udp_input_local_match+0xa8>
        return 1;
900107d8:	2301      	movs	r3, #1
900107da:	e000      	b.n	900107de <udp_input_local_match+0xaa>
      }
  }

  return 0;
900107dc:	2300      	movs	r3, #0
}
900107de:	4618      	mov	r0, r3
900107e0:	3710      	adds	r7, #16
900107e2:	46bd      	mov	sp, r7
900107e4:	bd80      	pop	{r7, pc}
900107e6:	bf00      	nop
900107e8:	90016834 	.word	0x90016834
900107ec:	90016864 	.word	0x90016864
900107f0:	90016888 	.word	0x90016888
900107f4:	900168b0 	.word	0x900168b0
900107f8:	2400df20 	.word	0x2400df20

900107fc <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
900107fc:	b590      	push	{r4, r7, lr}
900107fe:	b08d      	sub	sp, #52	; 0x34
90010800:	af02      	add	r7, sp, #8
90010802:	6078      	str	r0, [r7, #4]
90010804:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
90010806:	2300      	movs	r3, #0
90010808:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
9001080a:	687b      	ldr	r3, [r7, #4]
9001080c:	2b00      	cmp	r3, #0
9001080e:	d105      	bne.n	9001081c <udp_input+0x20>
90010810:	4b7c      	ldr	r3, [pc, #496]	; (90010a04 <udp_input+0x208>)
90010812:	22cf      	movs	r2, #207	; 0xcf
90010814:	497c      	ldr	r1, [pc, #496]	; (90010a08 <udp_input+0x20c>)
90010816:	487d      	ldr	r0, [pc, #500]	; (90010a0c <udp_input+0x210>)
90010818:	f002 ff0e 	bl	90013638 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
9001081c:	683b      	ldr	r3, [r7, #0]
9001081e:	2b00      	cmp	r3, #0
90010820:	d105      	bne.n	9001082e <udp_input+0x32>
90010822:	4b78      	ldr	r3, [pc, #480]	; (90010a04 <udp_input+0x208>)
90010824:	22d0      	movs	r2, #208	; 0xd0
90010826:	497a      	ldr	r1, [pc, #488]	; (90010a10 <udp_input+0x214>)
90010828:	4878      	ldr	r0, [pc, #480]	; (90010a0c <udp_input+0x210>)
9001082a:	f002 ff05 	bl	90013638 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
9001082e:	687b      	ldr	r3, [r7, #4]
90010830:	895b      	ldrh	r3, [r3, #10]
90010832:	2b07      	cmp	r3, #7
90010834:	d803      	bhi.n	9001083e <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
90010836:	6878      	ldr	r0, [r7, #4]
90010838:	f7f9 fafc 	bl	90009e34 <pbuf_free>
    goto end;
9001083c:	e0de      	b.n	900109fc <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
9001083e:	687b      	ldr	r3, [r7, #4]
90010840:	685b      	ldr	r3, [r3, #4]
90010842:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
90010844:	4b73      	ldr	r3, [pc, #460]	; (90010a14 <udp_input+0x218>)
90010846:	695b      	ldr	r3, [r3, #20]
90010848:	4a72      	ldr	r2, [pc, #456]	; (90010a14 <udp_input+0x218>)
9001084a:	6812      	ldr	r2, [r2, #0]
9001084c:	4611      	mov	r1, r2
9001084e:	4618      	mov	r0, r3
90010850:	f001 fcae 	bl	900121b0 <ip4_addr_isbroadcast_u32>
90010854:	4603      	mov	r3, r0
90010856:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
90010858:	697b      	ldr	r3, [r7, #20]
9001085a:	881b      	ldrh	r3, [r3, #0]
9001085c:	b29b      	uxth	r3, r3
9001085e:	4618      	mov	r0, r3
90010860:	f7f7 fdf8 	bl	90008454 <lwip_htons>
90010864:	4603      	mov	r3, r0
90010866:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
90010868:	697b      	ldr	r3, [r7, #20]
9001086a:	885b      	ldrh	r3, [r3, #2]
9001086c:	b29b      	uxth	r3, r3
9001086e:	4618      	mov	r0, r3
90010870:	f7f7 fdf0 	bl	90008454 <lwip_htons>
90010874:	4603      	mov	r3, r0
90010876:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
90010878:	2300      	movs	r3, #0
9001087a:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
9001087c:	2300      	movs	r3, #0
9001087e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
90010880:	2300      	movs	r3, #0
90010882:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
90010884:	4b64      	ldr	r3, [pc, #400]	; (90010a18 <udp_input+0x21c>)
90010886:	681b      	ldr	r3, [r3, #0]
90010888:	627b      	str	r3, [r7, #36]	; 0x24
9001088a:	e054      	b.n	90010936 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
9001088c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9001088e:	8a5b      	ldrh	r3, [r3, #18]
90010890:	89fa      	ldrh	r2, [r7, #14]
90010892:	429a      	cmp	r2, r3
90010894:	d14a      	bne.n	9001092c <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
90010896:	7cfb      	ldrb	r3, [r7, #19]
90010898:	461a      	mov	r2, r3
9001089a:	6839      	ldr	r1, [r7, #0]
9001089c:	6a78      	ldr	r0, [r7, #36]	; 0x24
9001089e:	f7ff ff49 	bl	90010734 <udp_input_local_match>
900108a2:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
900108a4:	2b00      	cmp	r3, #0
900108a6:	d041      	beq.n	9001092c <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
900108a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
900108aa:	7c1b      	ldrb	r3, [r3, #16]
900108ac:	f003 0304 	and.w	r3, r3, #4
900108b0:	2b00      	cmp	r3, #0
900108b2:	d11d      	bne.n	900108f0 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
900108b4:	69fb      	ldr	r3, [r7, #28]
900108b6:	2b00      	cmp	r3, #0
900108b8:	d102      	bne.n	900108c0 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
900108ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
900108bc:	61fb      	str	r3, [r7, #28]
900108be:	e017      	b.n	900108f0 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
900108c0:	7cfb      	ldrb	r3, [r7, #19]
900108c2:	2b00      	cmp	r3, #0
900108c4:	d014      	beq.n	900108f0 <udp_input+0xf4>
900108c6:	4b53      	ldr	r3, [pc, #332]	; (90010a14 <udp_input+0x218>)
900108c8:	695b      	ldr	r3, [r3, #20]
900108ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
900108ce:	d10f      	bne.n	900108f0 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
900108d0:	69fb      	ldr	r3, [r7, #28]
900108d2:	681a      	ldr	r2, [r3, #0]
900108d4:	683b      	ldr	r3, [r7, #0]
900108d6:	3304      	adds	r3, #4
900108d8:	681b      	ldr	r3, [r3, #0]
900108da:	429a      	cmp	r2, r3
900108dc:	d008      	beq.n	900108f0 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
900108de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
900108e0:	681a      	ldr	r2, [r3, #0]
900108e2:	683b      	ldr	r3, [r7, #0]
900108e4:	3304      	adds	r3, #4
900108e6:	681b      	ldr	r3, [r3, #0]
900108e8:	429a      	cmp	r2, r3
900108ea:	d101      	bne.n	900108f0 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
900108ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
900108ee:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
900108f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
900108f2:	8a9b      	ldrh	r3, [r3, #20]
900108f4:	8a3a      	ldrh	r2, [r7, #16]
900108f6:	429a      	cmp	r2, r3
900108f8:	d118      	bne.n	9001092c <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
900108fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
900108fc:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
900108fe:	2b00      	cmp	r3, #0
90010900:	d005      	beq.n	9001090e <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
90010902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90010904:	685a      	ldr	r2, [r3, #4]
90010906:	4b43      	ldr	r3, [pc, #268]	; (90010a14 <udp_input+0x218>)
90010908:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
9001090a:	429a      	cmp	r2, r3
9001090c:	d10e      	bne.n	9001092c <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
9001090e:	6a3b      	ldr	r3, [r7, #32]
90010910:	2b00      	cmp	r3, #0
90010912:	d014      	beq.n	9001093e <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
90010914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90010916:	68da      	ldr	r2, [r3, #12]
90010918:	6a3b      	ldr	r3, [r7, #32]
9001091a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
9001091c:	4b3e      	ldr	r3, [pc, #248]	; (90010a18 <udp_input+0x21c>)
9001091e:	681a      	ldr	r2, [r3, #0]
90010920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90010922:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
90010924:	4a3c      	ldr	r2, [pc, #240]	; (90010a18 <udp_input+0x21c>)
90010926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90010928:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
9001092a:	e008      	b.n	9001093e <udp_input+0x142>
      }
    }

    prev = pcb;
9001092c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9001092e:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
90010930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90010932:	68db      	ldr	r3, [r3, #12]
90010934:	627b      	str	r3, [r7, #36]	; 0x24
90010936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90010938:	2b00      	cmp	r3, #0
9001093a:	d1a7      	bne.n	9001088c <udp_input+0x90>
9001093c:	e000      	b.n	90010940 <udp_input+0x144>
        break;
9001093e:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
90010940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90010942:	2b00      	cmp	r3, #0
90010944:	d101      	bne.n	9001094a <udp_input+0x14e>
    pcb = uncon_pcb;
90010946:	69fb      	ldr	r3, [r7, #28]
90010948:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
9001094a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9001094c:	2b00      	cmp	r3, #0
9001094e:	d002      	beq.n	90010956 <udp_input+0x15a>
    for_us = 1;
90010950:	2301      	movs	r3, #1
90010952:	76fb      	strb	r3, [r7, #27]
90010954:	e00a      	b.n	9001096c <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
90010956:	683b      	ldr	r3, [r7, #0]
90010958:	3304      	adds	r3, #4
9001095a:	681a      	ldr	r2, [r3, #0]
9001095c:	4b2d      	ldr	r3, [pc, #180]	; (90010a14 <udp_input+0x218>)
9001095e:	695b      	ldr	r3, [r3, #20]
90010960:	429a      	cmp	r2, r3
90010962:	bf0c      	ite	eq
90010964:	2301      	moveq	r3, #1
90010966:	2300      	movne	r3, #0
90010968:	b2db      	uxtb	r3, r3
9001096a:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
9001096c:	7efb      	ldrb	r3, [r7, #27]
9001096e:	2b00      	cmp	r3, #0
90010970:	d041      	beq.n	900109f6 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
90010972:	2108      	movs	r1, #8
90010974:	6878      	ldr	r0, [r7, #4]
90010976:	f7f9 f9d7 	bl	90009d28 <pbuf_remove_header>
9001097a:	4603      	mov	r3, r0
9001097c:	2b00      	cmp	r3, #0
9001097e:	d00a      	beq.n	90010996 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
90010980:	4b20      	ldr	r3, [pc, #128]	; (90010a04 <udp_input+0x208>)
90010982:	f44f 72b8 	mov.w	r2, #368	; 0x170
90010986:	4925      	ldr	r1, [pc, #148]	; (90010a1c <udp_input+0x220>)
90010988:	4820      	ldr	r0, [pc, #128]	; (90010a0c <udp_input+0x210>)
9001098a:	f002 fe55 	bl	90013638 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
9001098e:	6878      	ldr	r0, [r7, #4]
90010990:	f7f9 fa50 	bl	90009e34 <pbuf_free>
      goto end;
90010994:	e032      	b.n	900109fc <udp_input+0x200>
    }

    if (pcb != NULL) {
90010996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90010998:	2b00      	cmp	r3, #0
9001099a:	d012      	beq.n	900109c2 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
9001099c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9001099e:	699b      	ldr	r3, [r3, #24]
900109a0:	2b00      	cmp	r3, #0
900109a2:	d00a      	beq.n	900109ba <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
900109a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
900109a6:	699c      	ldr	r4, [r3, #24]
900109a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
900109aa:	69d8      	ldr	r0, [r3, #28]
900109ac:	8a3b      	ldrh	r3, [r7, #16]
900109ae:	9300      	str	r3, [sp, #0]
900109b0:	4b1b      	ldr	r3, [pc, #108]	; (90010a20 <udp_input+0x224>)
900109b2:	687a      	ldr	r2, [r7, #4]
900109b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
900109b6:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
900109b8:	e021      	b.n	900109fe <udp_input+0x202>
        pbuf_free(p);
900109ba:	6878      	ldr	r0, [r7, #4]
900109bc:	f7f9 fa3a 	bl	90009e34 <pbuf_free>
        goto end;
900109c0:	e01c      	b.n	900109fc <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
900109c2:	7cfb      	ldrb	r3, [r7, #19]
900109c4:	2b00      	cmp	r3, #0
900109c6:	d112      	bne.n	900109ee <udp_input+0x1f2>
900109c8:	4b12      	ldr	r3, [pc, #72]	; (90010a14 <udp_input+0x218>)
900109ca:	695b      	ldr	r3, [r3, #20]
900109cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
900109d0:	2be0      	cmp	r3, #224	; 0xe0
900109d2:	d00c      	beq.n	900109ee <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
900109d4:	4b0f      	ldr	r3, [pc, #60]	; (90010a14 <udp_input+0x218>)
900109d6:	899b      	ldrh	r3, [r3, #12]
900109d8:	3308      	adds	r3, #8
900109da:	b29b      	uxth	r3, r3
900109dc:	b21b      	sxth	r3, r3
900109de:	4619      	mov	r1, r3
900109e0:	6878      	ldr	r0, [r7, #4]
900109e2:	f7f9 fa14 	bl	90009e0e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
900109e6:	2103      	movs	r1, #3
900109e8:	6878      	ldr	r0, [r7, #4]
900109ea:	f001 f8b7 	bl	90011b5c <icmp_dest_unreach>
      pbuf_free(p);
900109ee:	6878      	ldr	r0, [r7, #4]
900109f0:	f7f9 fa20 	bl	90009e34 <pbuf_free>
  return;
900109f4:	e003      	b.n	900109fe <udp_input+0x202>
    pbuf_free(p);
900109f6:	6878      	ldr	r0, [r7, #4]
900109f8:	f7f9 fa1c 	bl	90009e34 <pbuf_free>
  return;
900109fc:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
900109fe:	372c      	adds	r7, #44	; 0x2c
90010a00:	46bd      	mov	sp, r7
90010a02:	bd90      	pop	{r4, r7, pc}
90010a04:	90016834 	.word	0x90016834
90010a08:	900168d8 	.word	0x900168d8
90010a0c:	90016888 	.word	0x90016888
90010a10:	900168f0 	.word	0x900168f0
90010a14:	2400df20 	.word	0x2400df20
90010a18:	2401107c 	.word	0x2401107c
90010a1c:	9001690c 	.word	0x9001690c
90010a20:	2400df30 	.word	0x2400df30

90010a24 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
90010a24:	b480      	push	{r7}
90010a26:	b085      	sub	sp, #20
90010a28:	af00      	add	r7, sp, #0
90010a2a:	6078      	str	r0, [r7, #4]
90010a2c:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
90010a2e:	687b      	ldr	r3, [r7, #4]
90010a30:	2b00      	cmp	r3, #0
90010a32:	d01e      	beq.n	90010a72 <udp_netif_ip_addr_changed+0x4e>
90010a34:	687b      	ldr	r3, [r7, #4]
90010a36:	681b      	ldr	r3, [r3, #0]
90010a38:	2b00      	cmp	r3, #0
90010a3a:	d01a      	beq.n	90010a72 <udp_netif_ip_addr_changed+0x4e>
90010a3c:	683b      	ldr	r3, [r7, #0]
90010a3e:	2b00      	cmp	r3, #0
90010a40:	d017      	beq.n	90010a72 <udp_netif_ip_addr_changed+0x4e>
90010a42:	683b      	ldr	r3, [r7, #0]
90010a44:	681b      	ldr	r3, [r3, #0]
90010a46:	2b00      	cmp	r3, #0
90010a48:	d013      	beq.n	90010a72 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
90010a4a:	4b0d      	ldr	r3, [pc, #52]	; (90010a80 <udp_netif_ip_addr_changed+0x5c>)
90010a4c:	681b      	ldr	r3, [r3, #0]
90010a4e:	60fb      	str	r3, [r7, #12]
90010a50:	e00c      	b.n	90010a6c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
90010a52:	68fb      	ldr	r3, [r7, #12]
90010a54:	681a      	ldr	r2, [r3, #0]
90010a56:	687b      	ldr	r3, [r7, #4]
90010a58:	681b      	ldr	r3, [r3, #0]
90010a5a:	429a      	cmp	r2, r3
90010a5c:	d103      	bne.n	90010a66 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
90010a5e:	683b      	ldr	r3, [r7, #0]
90010a60:	681a      	ldr	r2, [r3, #0]
90010a62:	68fb      	ldr	r3, [r7, #12]
90010a64:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
90010a66:	68fb      	ldr	r3, [r7, #12]
90010a68:	68db      	ldr	r3, [r3, #12]
90010a6a:	60fb      	str	r3, [r7, #12]
90010a6c:	68fb      	ldr	r3, [r7, #12]
90010a6e:	2b00      	cmp	r3, #0
90010a70:	d1ef      	bne.n	90010a52 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
90010a72:	bf00      	nop
90010a74:	3714      	adds	r7, #20
90010a76:	46bd      	mov	sp, r7
90010a78:	f85d 7b04 	ldr.w	r7, [sp], #4
90010a7c:	4770      	bx	lr
90010a7e:	bf00      	nop
90010a80:	2401107c 	.word	0x2401107c

90010a84 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
90010a84:	b580      	push	{r7, lr}
90010a86:	b082      	sub	sp, #8
90010a88:	af00      	add	r7, sp, #0
90010a8a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
90010a8c:	4915      	ldr	r1, [pc, #84]	; (90010ae4 <etharp_free_entry+0x60>)
90010a8e:	687a      	ldr	r2, [r7, #4]
90010a90:	4613      	mov	r3, r2
90010a92:	005b      	lsls	r3, r3, #1
90010a94:	4413      	add	r3, r2
90010a96:	00db      	lsls	r3, r3, #3
90010a98:	440b      	add	r3, r1
90010a9a:	681b      	ldr	r3, [r3, #0]
90010a9c:	2b00      	cmp	r3, #0
90010a9e:	d013      	beq.n	90010ac8 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
90010aa0:	4910      	ldr	r1, [pc, #64]	; (90010ae4 <etharp_free_entry+0x60>)
90010aa2:	687a      	ldr	r2, [r7, #4]
90010aa4:	4613      	mov	r3, r2
90010aa6:	005b      	lsls	r3, r3, #1
90010aa8:	4413      	add	r3, r2
90010aaa:	00db      	lsls	r3, r3, #3
90010aac:	440b      	add	r3, r1
90010aae:	681b      	ldr	r3, [r3, #0]
90010ab0:	4618      	mov	r0, r3
90010ab2:	f7f9 f9bf 	bl	90009e34 <pbuf_free>
    arp_table[i].q = NULL;
90010ab6:	490b      	ldr	r1, [pc, #44]	; (90010ae4 <etharp_free_entry+0x60>)
90010ab8:	687a      	ldr	r2, [r7, #4]
90010aba:	4613      	mov	r3, r2
90010abc:	005b      	lsls	r3, r3, #1
90010abe:	4413      	add	r3, r2
90010ac0:	00db      	lsls	r3, r3, #3
90010ac2:	440b      	add	r3, r1
90010ac4:	2200      	movs	r2, #0
90010ac6:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
90010ac8:	4906      	ldr	r1, [pc, #24]	; (90010ae4 <etharp_free_entry+0x60>)
90010aca:	687a      	ldr	r2, [r7, #4]
90010acc:	4613      	mov	r3, r2
90010ace:	005b      	lsls	r3, r3, #1
90010ad0:	4413      	add	r3, r2
90010ad2:	00db      	lsls	r3, r3, #3
90010ad4:	440b      	add	r3, r1
90010ad6:	3314      	adds	r3, #20
90010ad8:	2200      	movs	r2, #0
90010ada:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
90010adc:	bf00      	nop
90010ade:	3708      	adds	r7, #8
90010ae0:	46bd      	mov	sp, r7
90010ae2:	bd80      	pop	{r7, pc}
90010ae4:	24011080 	.word	0x24011080

90010ae8 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
90010ae8:	b580      	push	{r7, lr}
90010aea:	b082      	sub	sp, #8
90010aec:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
90010aee:	2300      	movs	r3, #0
90010af0:	607b      	str	r3, [r7, #4]
90010af2:	e096      	b.n	90010c22 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
90010af4:	494f      	ldr	r1, [pc, #316]	; (90010c34 <etharp_tmr+0x14c>)
90010af6:	687a      	ldr	r2, [r7, #4]
90010af8:	4613      	mov	r3, r2
90010afa:	005b      	lsls	r3, r3, #1
90010afc:	4413      	add	r3, r2
90010afe:	00db      	lsls	r3, r3, #3
90010b00:	440b      	add	r3, r1
90010b02:	3314      	adds	r3, #20
90010b04:	781b      	ldrb	r3, [r3, #0]
90010b06:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
90010b08:	78fb      	ldrb	r3, [r7, #3]
90010b0a:	2b00      	cmp	r3, #0
90010b0c:	f000 8086 	beq.w	90010c1c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
90010b10:	4948      	ldr	r1, [pc, #288]	; (90010c34 <etharp_tmr+0x14c>)
90010b12:	687a      	ldr	r2, [r7, #4]
90010b14:	4613      	mov	r3, r2
90010b16:	005b      	lsls	r3, r3, #1
90010b18:	4413      	add	r3, r2
90010b1a:	00db      	lsls	r3, r3, #3
90010b1c:	440b      	add	r3, r1
90010b1e:	3312      	adds	r3, #18
90010b20:	881b      	ldrh	r3, [r3, #0]
90010b22:	3301      	adds	r3, #1
90010b24:	b298      	uxth	r0, r3
90010b26:	4943      	ldr	r1, [pc, #268]	; (90010c34 <etharp_tmr+0x14c>)
90010b28:	687a      	ldr	r2, [r7, #4]
90010b2a:	4613      	mov	r3, r2
90010b2c:	005b      	lsls	r3, r3, #1
90010b2e:	4413      	add	r3, r2
90010b30:	00db      	lsls	r3, r3, #3
90010b32:	440b      	add	r3, r1
90010b34:	3312      	adds	r3, #18
90010b36:	4602      	mov	r2, r0
90010b38:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
90010b3a:	493e      	ldr	r1, [pc, #248]	; (90010c34 <etharp_tmr+0x14c>)
90010b3c:	687a      	ldr	r2, [r7, #4]
90010b3e:	4613      	mov	r3, r2
90010b40:	005b      	lsls	r3, r3, #1
90010b42:	4413      	add	r3, r2
90010b44:	00db      	lsls	r3, r3, #3
90010b46:	440b      	add	r3, r1
90010b48:	3312      	adds	r3, #18
90010b4a:	881b      	ldrh	r3, [r3, #0]
90010b4c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
90010b50:	d215      	bcs.n	90010b7e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
90010b52:	4938      	ldr	r1, [pc, #224]	; (90010c34 <etharp_tmr+0x14c>)
90010b54:	687a      	ldr	r2, [r7, #4]
90010b56:	4613      	mov	r3, r2
90010b58:	005b      	lsls	r3, r3, #1
90010b5a:	4413      	add	r3, r2
90010b5c:	00db      	lsls	r3, r3, #3
90010b5e:	440b      	add	r3, r1
90010b60:	3314      	adds	r3, #20
90010b62:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
90010b64:	2b01      	cmp	r3, #1
90010b66:	d10e      	bne.n	90010b86 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
90010b68:	4932      	ldr	r1, [pc, #200]	; (90010c34 <etharp_tmr+0x14c>)
90010b6a:	687a      	ldr	r2, [r7, #4]
90010b6c:	4613      	mov	r3, r2
90010b6e:	005b      	lsls	r3, r3, #1
90010b70:	4413      	add	r3, r2
90010b72:	00db      	lsls	r3, r3, #3
90010b74:	440b      	add	r3, r1
90010b76:	3312      	adds	r3, #18
90010b78:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
90010b7a:	2b04      	cmp	r3, #4
90010b7c:	d903      	bls.n	90010b86 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
90010b7e:	6878      	ldr	r0, [r7, #4]
90010b80:	f7ff ff80 	bl	90010a84 <etharp_free_entry>
90010b84:	e04a      	b.n	90010c1c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
90010b86:	492b      	ldr	r1, [pc, #172]	; (90010c34 <etharp_tmr+0x14c>)
90010b88:	687a      	ldr	r2, [r7, #4]
90010b8a:	4613      	mov	r3, r2
90010b8c:	005b      	lsls	r3, r3, #1
90010b8e:	4413      	add	r3, r2
90010b90:	00db      	lsls	r3, r3, #3
90010b92:	440b      	add	r3, r1
90010b94:	3314      	adds	r3, #20
90010b96:	781b      	ldrb	r3, [r3, #0]
90010b98:	2b03      	cmp	r3, #3
90010b9a:	d10a      	bne.n	90010bb2 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
90010b9c:	4925      	ldr	r1, [pc, #148]	; (90010c34 <etharp_tmr+0x14c>)
90010b9e:	687a      	ldr	r2, [r7, #4]
90010ba0:	4613      	mov	r3, r2
90010ba2:	005b      	lsls	r3, r3, #1
90010ba4:	4413      	add	r3, r2
90010ba6:	00db      	lsls	r3, r3, #3
90010ba8:	440b      	add	r3, r1
90010baa:	3314      	adds	r3, #20
90010bac:	2204      	movs	r2, #4
90010bae:	701a      	strb	r2, [r3, #0]
90010bb0:	e034      	b.n	90010c1c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
90010bb2:	4920      	ldr	r1, [pc, #128]	; (90010c34 <etharp_tmr+0x14c>)
90010bb4:	687a      	ldr	r2, [r7, #4]
90010bb6:	4613      	mov	r3, r2
90010bb8:	005b      	lsls	r3, r3, #1
90010bba:	4413      	add	r3, r2
90010bbc:	00db      	lsls	r3, r3, #3
90010bbe:	440b      	add	r3, r1
90010bc0:	3314      	adds	r3, #20
90010bc2:	781b      	ldrb	r3, [r3, #0]
90010bc4:	2b04      	cmp	r3, #4
90010bc6:	d10a      	bne.n	90010bde <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
90010bc8:	491a      	ldr	r1, [pc, #104]	; (90010c34 <etharp_tmr+0x14c>)
90010bca:	687a      	ldr	r2, [r7, #4]
90010bcc:	4613      	mov	r3, r2
90010bce:	005b      	lsls	r3, r3, #1
90010bd0:	4413      	add	r3, r2
90010bd2:	00db      	lsls	r3, r3, #3
90010bd4:	440b      	add	r3, r1
90010bd6:	3314      	adds	r3, #20
90010bd8:	2202      	movs	r2, #2
90010bda:	701a      	strb	r2, [r3, #0]
90010bdc:	e01e      	b.n	90010c1c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
90010bde:	4915      	ldr	r1, [pc, #84]	; (90010c34 <etharp_tmr+0x14c>)
90010be0:	687a      	ldr	r2, [r7, #4]
90010be2:	4613      	mov	r3, r2
90010be4:	005b      	lsls	r3, r3, #1
90010be6:	4413      	add	r3, r2
90010be8:	00db      	lsls	r3, r3, #3
90010bea:	440b      	add	r3, r1
90010bec:	3314      	adds	r3, #20
90010bee:	781b      	ldrb	r3, [r3, #0]
90010bf0:	2b01      	cmp	r3, #1
90010bf2:	d113      	bne.n	90010c1c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
90010bf4:	490f      	ldr	r1, [pc, #60]	; (90010c34 <etharp_tmr+0x14c>)
90010bf6:	687a      	ldr	r2, [r7, #4]
90010bf8:	4613      	mov	r3, r2
90010bfa:	005b      	lsls	r3, r3, #1
90010bfc:	4413      	add	r3, r2
90010bfe:	00db      	lsls	r3, r3, #3
90010c00:	440b      	add	r3, r1
90010c02:	3308      	adds	r3, #8
90010c04:	6818      	ldr	r0, [r3, #0]
90010c06:	687a      	ldr	r2, [r7, #4]
90010c08:	4613      	mov	r3, r2
90010c0a:	005b      	lsls	r3, r3, #1
90010c0c:	4413      	add	r3, r2
90010c0e:	00db      	lsls	r3, r3, #3
90010c10:	4a08      	ldr	r2, [pc, #32]	; (90010c34 <etharp_tmr+0x14c>)
90010c12:	4413      	add	r3, r2
90010c14:	3304      	adds	r3, #4
90010c16:	4619      	mov	r1, r3
90010c18:	f000 fe6e 	bl	900118f8 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
90010c1c:	687b      	ldr	r3, [r7, #4]
90010c1e:	3301      	adds	r3, #1
90010c20:	607b      	str	r3, [r7, #4]
90010c22:	687b      	ldr	r3, [r7, #4]
90010c24:	2b09      	cmp	r3, #9
90010c26:	f77f af65 	ble.w	90010af4 <etharp_tmr+0xc>
      }
    }
  }
}
90010c2a:	bf00      	nop
90010c2c:	bf00      	nop
90010c2e:	3708      	adds	r7, #8
90010c30:	46bd      	mov	sp, r7
90010c32:	bd80      	pop	{r7, pc}
90010c34:	24011080 	.word	0x24011080

90010c38 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
90010c38:	b580      	push	{r7, lr}
90010c3a:	b08a      	sub	sp, #40	; 0x28
90010c3c:	af00      	add	r7, sp, #0
90010c3e:	60f8      	str	r0, [r7, #12]
90010c40:	460b      	mov	r3, r1
90010c42:	607a      	str	r2, [r7, #4]
90010c44:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
90010c46:	230a      	movs	r3, #10
90010c48:	84fb      	strh	r3, [r7, #38]	; 0x26
90010c4a:	230a      	movs	r3, #10
90010c4c:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
90010c4e:	230a      	movs	r3, #10
90010c50:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
90010c52:	2300      	movs	r3, #0
90010c54:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
90010c56:	230a      	movs	r3, #10
90010c58:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
90010c5a:	2300      	movs	r3, #0
90010c5c:	83bb      	strh	r3, [r7, #28]
90010c5e:	2300      	movs	r3, #0
90010c60:	837b      	strh	r3, [r7, #26]
90010c62:	2300      	movs	r3, #0
90010c64:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
90010c66:	2300      	movs	r3, #0
90010c68:	843b      	strh	r3, [r7, #32]
90010c6a:	e0ae      	b.n	90010dca <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
90010c6c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
90010c70:	49a6      	ldr	r1, [pc, #664]	; (90010f0c <etharp_find_entry+0x2d4>)
90010c72:	4613      	mov	r3, r2
90010c74:	005b      	lsls	r3, r3, #1
90010c76:	4413      	add	r3, r2
90010c78:	00db      	lsls	r3, r3, #3
90010c7a:	440b      	add	r3, r1
90010c7c:	3314      	adds	r3, #20
90010c7e:	781b      	ldrb	r3, [r3, #0]
90010c80:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
90010c82:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
90010c86:	2b0a      	cmp	r3, #10
90010c88:	d105      	bne.n	90010c96 <etharp_find_entry+0x5e>
90010c8a:	7dfb      	ldrb	r3, [r7, #23]
90010c8c:	2b00      	cmp	r3, #0
90010c8e:	d102      	bne.n	90010c96 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
90010c90:	8c3b      	ldrh	r3, [r7, #32]
90010c92:	847b      	strh	r3, [r7, #34]	; 0x22
90010c94:	e095      	b.n	90010dc2 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
90010c96:	7dfb      	ldrb	r3, [r7, #23]
90010c98:	2b00      	cmp	r3, #0
90010c9a:	f000 8092 	beq.w	90010dc2 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
90010c9e:	7dfb      	ldrb	r3, [r7, #23]
90010ca0:	2b01      	cmp	r3, #1
90010ca2:	d009      	beq.n	90010cb8 <etharp_find_entry+0x80>
90010ca4:	7dfb      	ldrb	r3, [r7, #23]
90010ca6:	2b01      	cmp	r3, #1
90010ca8:	d806      	bhi.n	90010cb8 <etharp_find_entry+0x80>
90010caa:	4b99      	ldr	r3, [pc, #612]	; (90010f10 <etharp_find_entry+0x2d8>)
90010cac:	f240 1223 	movw	r2, #291	; 0x123
90010cb0:	4998      	ldr	r1, [pc, #608]	; (90010f14 <etharp_find_entry+0x2dc>)
90010cb2:	4899      	ldr	r0, [pc, #612]	; (90010f18 <etharp_find_entry+0x2e0>)
90010cb4:	f002 fcc0 	bl	90013638 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
90010cb8:	68fb      	ldr	r3, [r7, #12]
90010cba:	2b00      	cmp	r3, #0
90010cbc:	d020      	beq.n	90010d00 <etharp_find_entry+0xc8>
90010cbe:	68fb      	ldr	r3, [r7, #12]
90010cc0:	6819      	ldr	r1, [r3, #0]
90010cc2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
90010cc6:	4891      	ldr	r0, [pc, #580]	; (90010f0c <etharp_find_entry+0x2d4>)
90010cc8:	4613      	mov	r3, r2
90010cca:	005b      	lsls	r3, r3, #1
90010ccc:	4413      	add	r3, r2
90010cce:	00db      	lsls	r3, r3, #3
90010cd0:	4403      	add	r3, r0
90010cd2:	3304      	adds	r3, #4
90010cd4:	681b      	ldr	r3, [r3, #0]
90010cd6:	4299      	cmp	r1, r3
90010cd8:	d112      	bne.n	90010d00 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
90010cda:	687b      	ldr	r3, [r7, #4]
90010cdc:	2b00      	cmp	r3, #0
90010cde:	d00c      	beq.n	90010cfa <etharp_find_entry+0xc2>
90010ce0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
90010ce4:	4989      	ldr	r1, [pc, #548]	; (90010f0c <etharp_find_entry+0x2d4>)
90010ce6:	4613      	mov	r3, r2
90010ce8:	005b      	lsls	r3, r3, #1
90010cea:	4413      	add	r3, r2
90010cec:	00db      	lsls	r3, r3, #3
90010cee:	440b      	add	r3, r1
90010cf0:	3308      	adds	r3, #8
90010cf2:	681b      	ldr	r3, [r3, #0]
90010cf4:	687a      	ldr	r2, [r7, #4]
90010cf6:	429a      	cmp	r2, r3
90010cf8:	d102      	bne.n	90010d00 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
90010cfa:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
90010cfe:	e100      	b.n	90010f02 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
90010d00:	7dfb      	ldrb	r3, [r7, #23]
90010d02:	2b01      	cmp	r3, #1
90010d04:	d140      	bne.n	90010d88 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
90010d06:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
90010d0a:	4980      	ldr	r1, [pc, #512]	; (90010f0c <etharp_find_entry+0x2d4>)
90010d0c:	4613      	mov	r3, r2
90010d0e:	005b      	lsls	r3, r3, #1
90010d10:	4413      	add	r3, r2
90010d12:	00db      	lsls	r3, r3, #3
90010d14:	440b      	add	r3, r1
90010d16:	681b      	ldr	r3, [r3, #0]
90010d18:	2b00      	cmp	r3, #0
90010d1a:	d01a      	beq.n	90010d52 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
90010d1c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
90010d20:	497a      	ldr	r1, [pc, #488]	; (90010f0c <etharp_find_entry+0x2d4>)
90010d22:	4613      	mov	r3, r2
90010d24:	005b      	lsls	r3, r3, #1
90010d26:	4413      	add	r3, r2
90010d28:	00db      	lsls	r3, r3, #3
90010d2a:	440b      	add	r3, r1
90010d2c:	3312      	adds	r3, #18
90010d2e:	881b      	ldrh	r3, [r3, #0]
90010d30:	8bba      	ldrh	r2, [r7, #28]
90010d32:	429a      	cmp	r2, r3
90010d34:	d845      	bhi.n	90010dc2 <etharp_find_entry+0x18a>
            old_queue = i;
90010d36:	8c3b      	ldrh	r3, [r7, #32]
90010d38:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
90010d3a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
90010d3e:	4973      	ldr	r1, [pc, #460]	; (90010f0c <etharp_find_entry+0x2d4>)
90010d40:	4613      	mov	r3, r2
90010d42:	005b      	lsls	r3, r3, #1
90010d44:	4413      	add	r3, r2
90010d46:	00db      	lsls	r3, r3, #3
90010d48:	440b      	add	r3, r1
90010d4a:	3312      	adds	r3, #18
90010d4c:	881b      	ldrh	r3, [r3, #0]
90010d4e:	83bb      	strh	r3, [r7, #28]
90010d50:	e037      	b.n	90010dc2 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
90010d52:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
90010d56:	496d      	ldr	r1, [pc, #436]	; (90010f0c <etharp_find_entry+0x2d4>)
90010d58:	4613      	mov	r3, r2
90010d5a:	005b      	lsls	r3, r3, #1
90010d5c:	4413      	add	r3, r2
90010d5e:	00db      	lsls	r3, r3, #3
90010d60:	440b      	add	r3, r1
90010d62:	3312      	adds	r3, #18
90010d64:	881b      	ldrh	r3, [r3, #0]
90010d66:	8b7a      	ldrh	r2, [r7, #26]
90010d68:	429a      	cmp	r2, r3
90010d6a:	d82a      	bhi.n	90010dc2 <etharp_find_entry+0x18a>
            old_pending = i;
90010d6c:	8c3b      	ldrh	r3, [r7, #32]
90010d6e:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
90010d70:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
90010d74:	4965      	ldr	r1, [pc, #404]	; (90010f0c <etharp_find_entry+0x2d4>)
90010d76:	4613      	mov	r3, r2
90010d78:	005b      	lsls	r3, r3, #1
90010d7a:	4413      	add	r3, r2
90010d7c:	00db      	lsls	r3, r3, #3
90010d7e:	440b      	add	r3, r1
90010d80:	3312      	adds	r3, #18
90010d82:	881b      	ldrh	r3, [r3, #0]
90010d84:	837b      	strh	r3, [r7, #26]
90010d86:	e01c      	b.n	90010dc2 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
90010d88:	7dfb      	ldrb	r3, [r7, #23]
90010d8a:	2b01      	cmp	r3, #1
90010d8c:	d919      	bls.n	90010dc2 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
90010d8e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
90010d92:	495e      	ldr	r1, [pc, #376]	; (90010f0c <etharp_find_entry+0x2d4>)
90010d94:	4613      	mov	r3, r2
90010d96:	005b      	lsls	r3, r3, #1
90010d98:	4413      	add	r3, r2
90010d9a:	00db      	lsls	r3, r3, #3
90010d9c:	440b      	add	r3, r1
90010d9e:	3312      	adds	r3, #18
90010da0:	881b      	ldrh	r3, [r3, #0]
90010da2:	8b3a      	ldrh	r2, [r7, #24]
90010da4:	429a      	cmp	r2, r3
90010da6:	d80c      	bhi.n	90010dc2 <etharp_find_entry+0x18a>
            old_stable = i;
90010da8:	8c3b      	ldrh	r3, [r7, #32]
90010daa:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
90010dac:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
90010db0:	4956      	ldr	r1, [pc, #344]	; (90010f0c <etharp_find_entry+0x2d4>)
90010db2:	4613      	mov	r3, r2
90010db4:	005b      	lsls	r3, r3, #1
90010db6:	4413      	add	r3, r2
90010db8:	00db      	lsls	r3, r3, #3
90010dba:	440b      	add	r3, r1
90010dbc:	3312      	adds	r3, #18
90010dbe:	881b      	ldrh	r3, [r3, #0]
90010dc0:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
90010dc2:	8c3b      	ldrh	r3, [r7, #32]
90010dc4:	3301      	adds	r3, #1
90010dc6:	b29b      	uxth	r3, r3
90010dc8:	843b      	strh	r3, [r7, #32]
90010dca:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
90010dce:	2b09      	cmp	r3, #9
90010dd0:	f77f af4c 	ble.w	90010c6c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
90010dd4:	7afb      	ldrb	r3, [r7, #11]
90010dd6:	f003 0302 	and.w	r3, r3, #2
90010dda:	2b00      	cmp	r3, #0
90010ddc:	d108      	bne.n	90010df0 <etharp_find_entry+0x1b8>
90010dde:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
90010de2:	2b0a      	cmp	r3, #10
90010de4:	d107      	bne.n	90010df6 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
90010de6:	7afb      	ldrb	r3, [r7, #11]
90010de8:	f003 0301 	and.w	r3, r3, #1
90010dec:	2b00      	cmp	r3, #0
90010dee:	d102      	bne.n	90010df6 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
90010df0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
90010df4:	e085      	b.n	90010f02 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
90010df6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
90010dfa:	2b09      	cmp	r3, #9
90010dfc:	dc02      	bgt.n	90010e04 <etharp_find_entry+0x1cc>
    i = empty;
90010dfe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
90010e00:	843b      	strh	r3, [r7, #32]
90010e02:	e039      	b.n	90010e78 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
90010e04:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
90010e08:	2b09      	cmp	r3, #9
90010e0a:	dc14      	bgt.n	90010e36 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
90010e0c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
90010e0e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
90010e10:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
90010e14:	493d      	ldr	r1, [pc, #244]	; (90010f0c <etharp_find_entry+0x2d4>)
90010e16:	4613      	mov	r3, r2
90010e18:	005b      	lsls	r3, r3, #1
90010e1a:	4413      	add	r3, r2
90010e1c:	00db      	lsls	r3, r3, #3
90010e1e:	440b      	add	r3, r1
90010e20:	681b      	ldr	r3, [r3, #0]
90010e22:	2b00      	cmp	r3, #0
90010e24:	d018      	beq.n	90010e58 <etharp_find_entry+0x220>
90010e26:	4b3a      	ldr	r3, [pc, #232]	; (90010f10 <etharp_find_entry+0x2d8>)
90010e28:	f240 126d 	movw	r2, #365	; 0x16d
90010e2c:	493b      	ldr	r1, [pc, #236]	; (90010f1c <etharp_find_entry+0x2e4>)
90010e2e:	483a      	ldr	r0, [pc, #232]	; (90010f18 <etharp_find_entry+0x2e0>)
90010e30:	f002 fc02 	bl	90013638 <iprintf>
90010e34:	e010      	b.n	90010e58 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
90010e36:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
90010e3a:	2b09      	cmp	r3, #9
90010e3c:	dc02      	bgt.n	90010e44 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
90010e3e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
90010e40:	843b      	strh	r3, [r7, #32]
90010e42:	e009      	b.n	90010e58 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
90010e44:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
90010e48:	2b09      	cmp	r3, #9
90010e4a:	dc02      	bgt.n	90010e52 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
90010e4c:	8bfb      	ldrh	r3, [r7, #30]
90010e4e:	843b      	strh	r3, [r7, #32]
90010e50:	e002      	b.n	90010e58 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
90010e52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
90010e56:	e054      	b.n	90010f02 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
90010e58:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
90010e5c:	2b09      	cmp	r3, #9
90010e5e:	dd06      	ble.n	90010e6e <etharp_find_entry+0x236>
90010e60:	4b2b      	ldr	r3, [pc, #172]	; (90010f10 <etharp_find_entry+0x2d8>)
90010e62:	f240 127f 	movw	r2, #383	; 0x17f
90010e66:	492e      	ldr	r1, [pc, #184]	; (90010f20 <etharp_find_entry+0x2e8>)
90010e68:	482b      	ldr	r0, [pc, #172]	; (90010f18 <etharp_find_entry+0x2e0>)
90010e6a:	f002 fbe5 	bl	90013638 <iprintf>
    etharp_free_entry(i);
90010e6e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
90010e72:	4618      	mov	r0, r3
90010e74:	f7ff fe06 	bl	90010a84 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
90010e78:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
90010e7c:	2b09      	cmp	r3, #9
90010e7e:	dd06      	ble.n	90010e8e <etharp_find_entry+0x256>
90010e80:	4b23      	ldr	r3, [pc, #140]	; (90010f10 <etharp_find_entry+0x2d8>)
90010e82:	f240 1283 	movw	r2, #387	; 0x183
90010e86:	4926      	ldr	r1, [pc, #152]	; (90010f20 <etharp_find_entry+0x2e8>)
90010e88:	4823      	ldr	r0, [pc, #140]	; (90010f18 <etharp_find_entry+0x2e0>)
90010e8a:	f002 fbd5 	bl	90013638 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
90010e8e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
90010e92:	491e      	ldr	r1, [pc, #120]	; (90010f0c <etharp_find_entry+0x2d4>)
90010e94:	4613      	mov	r3, r2
90010e96:	005b      	lsls	r3, r3, #1
90010e98:	4413      	add	r3, r2
90010e9a:	00db      	lsls	r3, r3, #3
90010e9c:	440b      	add	r3, r1
90010e9e:	3314      	adds	r3, #20
90010ea0:	781b      	ldrb	r3, [r3, #0]
90010ea2:	2b00      	cmp	r3, #0
90010ea4:	d006      	beq.n	90010eb4 <etharp_find_entry+0x27c>
90010ea6:	4b1a      	ldr	r3, [pc, #104]	; (90010f10 <etharp_find_entry+0x2d8>)
90010ea8:	f44f 72c2 	mov.w	r2, #388	; 0x184
90010eac:	491d      	ldr	r1, [pc, #116]	; (90010f24 <etharp_find_entry+0x2ec>)
90010eae:	481a      	ldr	r0, [pc, #104]	; (90010f18 <etharp_find_entry+0x2e0>)
90010eb0:	f002 fbc2 	bl	90013638 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
90010eb4:	68fb      	ldr	r3, [r7, #12]
90010eb6:	2b00      	cmp	r3, #0
90010eb8:	d00b      	beq.n	90010ed2 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
90010eba:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
90010ebe:	68fb      	ldr	r3, [r7, #12]
90010ec0:	6819      	ldr	r1, [r3, #0]
90010ec2:	4812      	ldr	r0, [pc, #72]	; (90010f0c <etharp_find_entry+0x2d4>)
90010ec4:	4613      	mov	r3, r2
90010ec6:	005b      	lsls	r3, r3, #1
90010ec8:	4413      	add	r3, r2
90010eca:	00db      	lsls	r3, r3, #3
90010ecc:	4403      	add	r3, r0
90010ece:	3304      	adds	r3, #4
90010ed0:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
90010ed2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
90010ed6:	490d      	ldr	r1, [pc, #52]	; (90010f0c <etharp_find_entry+0x2d4>)
90010ed8:	4613      	mov	r3, r2
90010eda:	005b      	lsls	r3, r3, #1
90010edc:	4413      	add	r3, r2
90010ede:	00db      	lsls	r3, r3, #3
90010ee0:	440b      	add	r3, r1
90010ee2:	3312      	adds	r3, #18
90010ee4:	2200      	movs	r2, #0
90010ee6:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
90010ee8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
90010eec:	4907      	ldr	r1, [pc, #28]	; (90010f0c <etharp_find_entry+0x2d4>)
90010eee:	4613      	mov	r3, r2
90010ef0:	005b      	lsls	r3, r3, #1
90010ef2:	4413      	add	r3, r2
90010ef4:	00db      	lsls	r3, r3, #3
90010ef6:	440b      	add	r3, r1
90010ef8:	3308      	adds	r3, #8
90010efa:	687a      	ldr	r2, [r7, #4]
90010efc:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
90010efe:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
90010f02:	4618      	mov	r0, r3
90010f04:	3728      	adds	r7, #40	; 0x28
90010f06:	46bd      	mov	sp, r7
90010f08:	bd80      	pop	{r7, pc}
90010f0a:	bf00      	nop
90010f0c:	24011080 	.word	0x24011080
90010f10:	90016b98 	.word	0x90016b98
90010f14:	90016bd0 	.word	0x90016bd0
90010f18:	90016c10 	.word	0x90016c10
90010f1c:	90016c38 	.word	0x90016c38
90010f20:	90016c50 	.word	0x90016c50
90010f24:	90016c64 	.word	0x90016c64

90010f28 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
90010f28:	b580      	push	{r7, lr}
90010f2a:	b088      	sub	sp, #32
90010f2c:	af02      	add	r7, sp, #8
90010f2e:	60f8      	str	r0, [r7, #12]
90010f30:	60b9      	str	r1, [r7, #8]
90010f32:	607a      	str	r2, [r7, #4]
90010f34:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
90010f36:	68fb      	ldr	r3, [r7, #12]
90010f38:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
90010f3c:	2b06      	cmp	r3, #6
90010f3e:	d006      	beq.n	90010f4e <etharp_update_arp_entry+0x26>
90010f40:	4b48      	ldr	r3, [pc, #288]	; (90011064 <etharp_update_arp_entry+0x13c>)
90010f42:	f240 12a9 	movw	r2, #425	; 0x1a9
90010f46:	4948      	ldr	r1, [pc, #288]	; (90011068 <etharp_update_arp_entry+0x140>)
90010f48:	4848      	ldr	r0, [pc, #288]	; (9001106c <etharp_update_arp_entry+0x144>)
90010f4a:	f002 fb75 	bl	90013638 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
90010f4e:	68bb      	ldr	r3, [r7, #8]
90010f50:	2b00      	cmp	r3, #0
90010f52:	d012      	beq.n	90010f7a <etharp_update_arp_entry+0x52>
90010f54:	68bb      	ldr	r3, [r7, #8]
90010f56:	681b      	ldr	r3, [r3, #0]
90010f58:	2b00      	cmp	r3, #0
90010f5a:	d00e      	beq.n	90010f7a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
90010f5c:	68bb      	ldr	r3, [r7, #8]
90010f5e:	681b      	ldr	r3, [r3, #0]
90010f60:	68f9      	ldr	r1, [r7, #12]
90010f62:	4618      	mov	r0, r3
90010f64:	f001 f924 	bl	900121b0 <ip4_addr_isbroadcast_u32>
90010f68:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
90010f6a:	2b00      	cmp	r3, #0
90010f6c:	d105      	bne.n	90010f7a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
90010f6e:	68bb      	ldr	r3, [r7, #8]
90010f70:	681b      	ldr	r3, [r3, #0]
90010f72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
90010f76:	2be0      	cmp	r3, #224	; 0xe0
90010f78:	d102      	bne.n	90010f80 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
90010f7a:	f06f 030f 	mvn.w	r3, #15
90010f7e:	e06c      	b.n	9001105a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
90010f80:	78fb      	ldrb	r3, [r7, #3]
90010f82:	68fa      	ldr	r2, [r7, #12]
90010f84:	4619      	mov	r1, r3
90010f86:	68b8      	ldr	r0, [r7, #8]
90010f88:	f7ff fe56 	bl	90010c38 <etharp_find_entry>
90010f8c:	4603      	mov	r3, r0
90010f8e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
90010f90:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
90010f94:	2b00      	cmp	r3, #0
90010f96:	da02      	bge.n	90010f9e <etharp_update_arp_entry+0x76>
    return (err_t)i;
90010f98:	8afb      	ldrh	r3, [r7, #22]
90010f9a:	b25b      	sxtb	r3, r3
90010f9c:	e05d      	b.n	9001105a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
90010f9e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
90010fa2:	4933      	ldr	r1, [pc, #204]	; (90011070 <etharp_update_arp_entry+0x148>)
90010fa4:	4613      	mov	r3, r2
90010fa6:	005b      	lsls	r3, r3, #1
90010fa8:	4413      	add	r3, r2
90010faa:	00db      	lsls	r3, r3, #3
90010fac:	440b      	add	r3, r1
90010fae:	3314      	adds	r3, #20
90010fb0:	2202      	movs	r2, #2
90010fb2:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
90010fb4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
90010fb8:	492d      	ldr	r1, [pc, #180]	; (90011070 <etharp_update_arp_entry+0x148>)
90010fba:	4613      	mov	r3, r2
90010fbc:	005b      	lsls	r3, r3, #1
90010fbe:	4413      	add	r3, r2
90010fc0:	00db      	lsls	r3, r3, #3
90010fc2:	440b      	add	r3, r1
90010fc4:	3308      	adds	r3, #8
90010fc6:	68fa      	ldr	r2, [r7, #12]
90010fc8:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
90010fca:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
90010fce:	4613      	mov	r3, r2
90010fd0:	005b      	lsls	r3, r3, #1
90010fd2:	4413      	add	r3, r2
90010fd4:	00db      	lsls	r3, r3, #3
90010fd6:	3308      	adds	r3, #8
90010fd8:	4a25      	ldr	r2, [pc, #148]	; (90011070 <etharp_update_arp_entry+0x148>)
90010fda:	4413      	add	r3, r2
90010fdc:	3304      	adds	r3, #4
90010fde:	2206      	movs	r2, #6
90010fe0:	6879      	ldr	r1, [r7, #4]
90010fe2:	4618      	mov	r0, r3
90010fe4:	f002 fa7d 	bl	900134e2 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
90010fe8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
90010fec:	4920      	ldr	r1, [pc, #128]	; (90011070 <etharp_update_arp_entry+0x148>)
90010fee:	4613      	mov	r3, r2
90010ff0:	005b      	lsls	r3, r3, #1
90010ff2:	4413      	add	r3, r2
90010ff4:	00db      	lsls	r3, r3, #3
90010ff6:	440b      	add	r3, r1
90010ff8:	3312      	adds	r3, #18
90010ffa:	2200      	movs	r2, #0
90010ffc:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
90010ffe:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
90011002:	491b      	ldr	r1, [pc, #108]	; (90011070 <etharp_update_arp_entry+0x148>)
90011004:	4613      	mov	r3, r2
90011006:	005b      	lsls	r3, r3, #1
90011008:	4413      	add	r3, r2
9001100a:	00db      	lsls	r3, r3, #3
9001100c:	440b      	add	r3, r1
9001100e:	681b      	ldr	r3, [r3, #0]
90011010:	2b00      	cmp	r3, #0
90011012:	d021      	beq.n	90011058 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
90011014:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
90011018:	4915      	ldr	r1, [pc, #84]	; (90011070 <etharp_update_arp_entry+0x148>)
9001101a:	4613      	mov	r3, r2
9001101c:	005b      	lsls	r3, r3, #1
9001101e:	4413      	add	r3, r2
90011020:	00db      	lsls	r3, r3, #3
90011022:	440b      	add	r3, r1
90011024:	681b      	ldr	r3, [r3, #0]
90011026:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
90011028:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
9001102c:	4910      	ldr	r1, [pc, #64]	; (90011070 <etharp_update_arp_entry+0x148>)
9001102e:	4613      	mov	r3, r2
90011030:	005b      	lsls	r3, r3, #1
90011032:	4413      	add	r3, r2
90011034:	00db      	lsls	r3, r3, #3
90011036:	440b      	add	r3, r1
90011038:	2200      	movs	r2, #0
9001103a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
9001103c:	68fb      	ldr	r3, [r7, #12]
9001103e:	f103 0226 	add.w	r2, r3, #38	; 0x26
90011042:	f44f 6300 	mov.w	r3, #2048	; 0x800
90011046:	9300      	str	r3, [sp, #0]
90011048:	687b      	ldr	r3, [r7, #4]
9001104a:	6939      	ldr	r1, [r7, #16]
9001104c:	68f8      	ldr	r0, [r7, #12]
9001104e:	f001 ffbd 	bl	90012fcc <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
90011052:	6938      	ldr	r0, [r7, #16]
90011054:	f7f8 feee 	bl	90009e34 <pbuf_free>
  }
  return ERR_OK;
90011058:	2300      	movs	r3, #0
}
9001105a:	4618      	mov	r0, r3
9001105c:	3718      	adds	r7, #24
9001105e:	46bd      	mov	sp, r7
90011060:	bd80      	pop	{r7, pc}
90011062:	bf00      	nop
90011064:	90016b98 	.word	0x90016b98
90011068:	90016c90 	.word	0x90016c90
9001106c:	90016c10 	.word	0x90016c10
90011070:	24011080 	.word	0x24011080

90011074 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
90011074:	b580      	push	{r7, lr}
90011076:	b084      	sub	sp, #16
90011078:	af00      	add	r7, sp, #0
9001107a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
9001107c:	2300      	movs	r3, #0
9001107e:	60fb      	str	r3, [r7, #12]
90011080:	e01e      	b.n	900110c0 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
90011082:	4913      	ldr	r1, [pc, #76]	; (900110d0 <etharp_cleanup_netif+0x5c>)
90011084:	68fa      	ldr	r2, [r7, #12]
90011086:	4613      	mov	r3, r2
90011088:	005b      	lsls	r3, r3, #1
9001108a:	4413      	add	r3, r2
9001108c:	00db      	lsls	r3, r3, #3
9001108e:	440b      	add	r3, r1
90011090:	3314      	adds	r3, #20
90011092:	781b      	ldrb	r3, [r3, #0]
90011094:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
90011096:	7afb      	ldrb	r3, [r7, #11]
90011098:	2b00      	cmp	r3, #0
9001109a:	d00e      	beq.n	900110ba <etharp_cleanup_netif+0x46>
9001109c:	490c      	ldr	r1, [pc, #48]	; (900110d0 <etharp_cleanup_netif+0x5c>)
9001109e:	68fa      	ldr	r2, [r7, #12]
900110a0:	4613      	mov	r3, r2
900110a2:	005b      	lsls	r3, r3, #1
900110a4:	4413      	add	r3, r2
900110a6:	00db      	lsls	r3, r3, #3
900110a8:	440b      	add	r3, r1
900110aa:	3308      	adds	r3, #8
900110ac:	681b      	ldr	r3, [r3, #0]
900110ae:	687a      	ldr	r2, [r7, #4]
900110b0:	429a      	cmp	r2, r3
900110b2:	d102      	bne.n	900110ba <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
900110b4:	68f8      	ldr	r0, [r7, #12]
900110b6:	f7ff fce5 	bl	90010a84 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
900110ba:	68fb      	ldr	r3, [r7, #12]
900110bc:	3301      	adds	r3, #1
900110be:	60fb      	str	r3, [r7, #12]
900110c0:	68fb      	ldr	r3, [r7, #12]
900110c2:	2b09      	cmp	r3, #9
900110c4:	dddd      	ble.n	90011082 <etharp_cleanup_netif+0xe>
    }
  }
}
900110c6:	bf00      	nop
900110c8:	bf00      	nop
900110ca:	3710      	adds	r7, #16
900110cc:	46bd      	mov	sp, r7
900110ce:	bd80      	pop	{r7, pc}
900110d0:	24011080 	.word	0x24011080

900110d4 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
900110d4:	b5b0      	push	{r4, r5, r7, lr}
900110d6:	b08a      	sub	sp, #40	; 0x28
900110d8:	af04      	add	r7, sp, #16
900110da:	6078      	str	r0, [r7, #4]
900110dc:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
900110de:	683b      	ldr	r3, [r7, #0]
900110e0:	2b00      	cmp	r3, #0
900110e2:	d107      	bne.n	900110f4 <etharp_input+0x20>
900110e4:	4b3d      	ldr	r3, [pc, #244]	; (900111dc <etharp_input+0x108>)
900110e6:	f240 228a 	movw	r2, #650	; 0x28a
900110ea:	493d      	ldr	r1, [pc, #244]	; (900111e0 <etharp_input+0x10c>)
900110ec:	483d      	ldr	r0, [pc, #244]	; (900111e4 <etharp_input+0x110>)
900110ee:	f002 faa3 	bl	90013638 <iprintf>
900110f2:	e06f      	b.n	900111d4 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
900110f4:	687b      	ldr	r3, [r7, #4]
900110f6:	685b      	ldr	r3, [r3, #4]
900110f8:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
900110fa:	693b      	ldr	r3, [r7, #16]
900110fc:	881b      	ldrh	r3, [r3, #0]
900110fe:	b29b      	uxth	r3, r3
90011100:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
90011104:	d10c      	bne.n	90011120 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
90011106:	693b      	ldr	r3, [r7, #16]
90011108:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
9001110a:	2b06      	cmp	r3, #6
9001110c:	d108      	bne.n	90011120 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
9001110e:	693b      	ldr	r3, [r7, #16]
90011110:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
90011112:	2b04      	cmp	r3, #4
90011114:	d104      	bne.n	90011120 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
90011116:	693b      	ldr	r3, [r7, #16]
90011118:	885b      	ldrh	r3, [r3, #2]
9001111a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
9001111c:	2b08      	cmp	r3, #8
9001111e:	d003      	beq.n	90011128 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
90011120:	6878      	ldr	r0, [r7, #4]
90011122:	f7f8 fe87 	bl	90009e34 <pbuf_free>
    return;
90011126:	e055      	b.n	900111d4 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
90011128:	693b      	ldr	r3, [r7, #16]
9001112a:	330e      	adds	r3, #14
9001112c:	681b      	ldr	r3, [r3, #0]
9001112e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
90011130:	693b      	ldr	r3, [r7, #16]
90011132:	3318      	adds	r3, #24
90011134:	681b      	ldr	r3, [r3, #0]
90011136:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
90011138:	683b      	ldr	r3, [r7, #0]
9001113a:	3304      	adds	r3, #4
9001113c:	681b      	ldr	r3, [r3, #0]
9001113e:	2b00      	cmp	r3, #0
90011140:	d102      	bne.n	90011148 <etharp_input+0x74>
    for_us = 0;
90011142:	2300      	movs	r3, #0
90011144:	75fb      	strb	r3, [r7, #23]
90011146:	e009      	b.n	9001115c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
90011148:	68ba      	ldr	r2, [r7, #8]
9001114a:	683b      	ldr	r3, [r7, #0]
9001114c:	3304      	adds	r3, #4
9001114e:	681b      	ldr	r3, [r3, #0]
90011150:	429a      	cmp	r2, r3
90011152:	bf0c      	ite	eq
90011154:	2301      	moveq	r3, #1
90011156:	2300      	movne	r3, #0
90011158:	b2db      	uxtb	r3, r3
9001115a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
9001115c:	693b      	ldr	r3, [r7, #16]
9001115e:	f103 0208 	add.w	r2, r3, #8
90011162:	7dfb      	ldrb	r3, [r7, #23]
90011164:	2b00      	cmp	r3, #0
90011166:	d001      	beq.n	9001116c <etharp_input+0x98>
90011168:	2301      	movs	r3, #1
9001116a:	e000      	b.n	9001116e <etharp_input+0x9a>
9001116c:	2302      	movs	r3, #2
9001116e:	f107 010c 	add.w	r1, r7, #12
90011172:	6838      	ldr	r0, [r7, #0]
90011174:	f7ff fed8 	bl	90010f28 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
90011178:	693b      	ldr	r3, [r7, #16]
9001117a:	88db      	ldrh	r3, [r3, #6]
9001117c:	b29b      	uxth	r3, r3
9001117e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
90011182:	d003      	beq.n	9001118c <etharp_input+0xb8>
90011184:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
90011188:	d01e      	beq.n	900111c8 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
9001118a:	e020      	b.n	900111ce <etharp_input+0xfa>
      if (for_us) {
9001118c:	7dfb      	ldrb	r3, [r7, #23]
9001118e:	2b00      	cmp	r3, #0
90011190:	d01c      	beq.n	900111cc <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
90011192:	683b      	ldr	r3, [r7, #0]
90011194:	f103 0026 	add.w	r0, r3, #38	; 0x26
90011198:	693b      	ldr	r3, [r7, #16]
9001119a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
9001119e:	683b      	ldr	r3, [r7, #0]
900111a0:	f103 0526 	add.w	r5, r3, #38	; 0x26
900111a4:	683b      	ldr	r3, [r7, #0]
900111a6:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
900111a8:	693a      	ldr	r2, [r7, #16]
900111aa:	3208      	adds	r2, #8
        etharp_raw(netif,
900111ac:	2102      	movs	r1, #2
900111ae:	9103      	str	r1, [sp, #12]
900111b0:	f107 010c 	add.w	r1, r7, #12
900111b4:	9102      	str	r1, [sp, #8]
900111b6:	9201      	str	r2, [sp, #4]
900111b8:	9300      	str	r3, [sp, #0]
900111ba:	462b      	mov	r3, r5
900111bc:	4622      	mov	r2, r4
900111be:	4601      	mov	r1, r0
900111c0:	6838      	ldr	r0, [r7, #0]
900111c2:	f000 faeb 	bl	9001179c <etharp_raw>
      break;
900111c6:	e001      	b.n	900111cc <etharp_input+0xf8>
      break;
900111c8:	bf00      	nop
900111ca:	e000      	b.n	900111ce <etharp_input+0xfa>
      break;
900111cc:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
900111ce:	6878      	ldr	r0, [r7, #4]
900111d0:	f7f8 fe30 	bl	90009e34 <pbuf_free>
}
900111d4:	3718      	adds	r7, #24
900111d6:	46bd      	mov	sp, r7
900111d8:	bdb0      	pop	{r4, r5, r7, pc}
900111da:	bf00      	nop
900111dc:	90016b98 	.word	0x90016b98
900111e0:	90016ce8 	.word	0x90016ce8
900111e4:	90016c10 	.word	0x90016c10

900111e8 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
900111e8:	b580      	push	{r7, lr}
900111ea:	b086      	sub	sp, #24
900111ec:	af02      	add	r7, sp, #8
900111ee:	60f8      	str	r0, [r7, #12]
900111f0:	60b9      	str	r1, [r7, #8]
900111f2:	4613      	mov	r3, r2
900111f4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
900111f6:	79fa      	ldrb	r2, [r7, #7]
900111f8:	4944      	ldr	r1, [pc, #272]	; (9001130c <etharp_output_to_arp_index+0x124>)
900111fa:	4613      	mov	r3, r2
900111fc:	005b      	lsls	r3, r3, #1
900111fe:	4413      	add	r3, r2
90011200:	00db      	lsls	r3, r3, #3
90011202:	440b      	add	r3, r1
90011204:	3314      	adds	r3, #20
90011206:	781b      	ldrb	r3, [r3, #0]
90011208:	2b01      	cmp	r3, #1
9001120a:	d806      	bhi.n	9001121a <etharp_output_to_arp_index+0x32>
9001120c:	4b40      	ldr	r3, [pc, #256]	; (90011310 <etharp_output_to_arp_index+0x128>)
9001120e:	f240 22ee 	movw	r2, #750	; 0x2ee
90011212:	4940      	ldr	r1, [pc, #256]	; (90011314 <etharp_output_to_arp_index+0x12c>)
90011214:	4840      	ldr	r0, [pc, #256]	; (90011318 <etharp_output_to_arp_index+0x130>)
90011216:	f002 fa0f 	bl	90013638 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
9001121a:	79fa      	ldrb	r2, [r7, #7]
9001121c:	493b      	ldr	r1, [pc, #236]	; (9001130c <etharp_output_to_arp_index+0x124>)
9001121e:	4613      	mov	r3, r2
90011220:	005b      	lsls	r3, r3, #1
90011222:	4413      	add	r3, r2
90011224:	00db      	lsls	r3, r3, #3
90011226:	440b      	add	r3, r1
90011228:	3314      	adds	r3, #20
9001122a:	781b      	ldrb	r3, [r3, #0]
9001122c:	2b02      	cmp	r3, #2
9001122e:	d153      	bne.n	900112d8 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
90011230:	79fa      	ldrb	r2, [r7, #7]
90011232:	4936      	ldr	r1, [pc, #216]	; (9001130c <etharp_output_to_arp_index+0x124>)
90011234:	4613      	mov	r3, r2
90011236:	005b      	lsls	r3, r3, #1
90011238:	4413      	add	r3, r2
9001123a:	00db      	lsls	r3, r3, #3
9001123c:	440b      	add	r3, r1
9001123e:	3312      	adds	r3, #18
90011240:	881b      	ldrh	r3, [r3, #0]
90011242:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
90011246:	d919      	bls.n	9001127c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
90011248:	79fa      	ldrb	r2, [r7, #7]
9001124a:	4613      	mov	r3, r2
9001124c:	005b      	lsls	r3, r3, #1
9001124e:	4413      	add	r3, r2
90011250:	00db      	lsls	r3, r3, #3
90011252:	4a2e      	ldr	r2, [pc, #184]	; (9001130c <etharp_output_to_arp_index+0x124>)
90011254:	4413      	add	r3, r2
90011256:	3304      	adds	r3, #4
90011258:	4619      	mov	r1, r3
9001125a:	68f8      	ldr	r0, [r7, #12]
9001125c:	f000 fb4c 	bl	900118f8 <etharp_request>
90011260:	4603      	mov	r3, r0
90011262:	2b00      	cmp	r3, #0
90011264:	d138      	bne.n	900112d8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
90011266:	79fa      	ldrb	r2, [r7, #7]
90011268:	4928      	ldr	r1, [pc, #160]	; (9001130c <etharp_output_to_arp_index+0x124>)
9001126a:	4613      	mov	r3, r2
9001126c:	005b      	lsls	r3, r3, #1
9001126e:	4413      	add	r3, r2
90011270:	00db      	lsls	r3, r3, #3
90011272:	440b      	add	r3, r1
90011274:	3314      	adds	r3, #20
90011276:	2203      	movs	r2, #3
90011278:	701a      	strb	r2, [r3, #0]
9001127a:	e02d      	b.n	900112d8 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
9001127c:	79fa      	ldrb	r2, [r7, #7]
9001127e:	4923      	ldr	r1, [pc, #140]	; (9001130c <etharp_output_to_arp_index+0x124>)
90011280:	4613      	mov	r3, r2
90011282:	005b      	lsls	r3, r3, #1
90011284:	4413      	add	r3, r2
90011286:	00db      	lsls	r3, r3, #3
90011288:	440b      	add	r3, r1
9001128a:	3312      	adds	r3, #18
9001128c:	881b      	ldrh	r3, [r3, #0]
9001128e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
90011292:	d321      	bcc.n	900112d8 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
90011294:	79fa      	ldrb	r2, [r7, #7]
90011296:	4613      	mov	r3, r2
90011298:	005b      	lsls	r3, r3, #1
9001129a:	4413      	add	r3, r2
9001129c:	00db      	lsls	r3, r3, #3
9001129e:	4a1b      	ldr	r2, [pc, #108]	; (9001130c <etharp_output_to_arp_index+0x124>)
900112a0:	4413      	add	r3, r2
900112a2:	1d19      	adds	r1, r3, #4
900112a4:	79fa      	ldrb	r2, [r7, #7]
900112a6:	4613      	mov	r3, r2
900112a8:	005b      	lsls	r3, r3, #1
900112aa:	4413      	add	r3, r2
900112ac:	00db      	lsls	r3, r3, #3
900112ae:	3308      	adds	r3, #8
900112b0:	4a16      	ldr	r2, [pc, #88]	; (9001130c <etharp_output_to_arp_index+0x124>)
900112b2:	4413      	add	r3, r2
900112b4:	3304      	adds	r3, #4
900112b6:	461a      	mov	r2, r3
900112b8:	68f8      	ldr	r0, [r7, #12]
900112ba:	f000 fafb 	bl	900118b4 <etharp_request_dst>
900112be:	4603      	mov	r3, r0
900112c0:	2b00      	cmp	r3, #0
900112c2:	d109      	bne.n	900112d8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
900112c4:	79fa      	ldrb	r2, [r7, #7]
900112c6:	4911      	ldr	r1, [pc, #68]	; (9001130c <etharp_output_to_arp_index+0x124>)
900112c8:	4613      	mov	r3, r2
900112ca:	005b      	lsls	r3, r3, #1
900112cc:	4413      	add	r3, r2
900112ce:	00db      	lsls	r3, r3, #3
900112d0:	440b      	add	r3, r1
900112d2:	3314      	adds	r3, #20
900112d4:	2203      	movs	r2, #3
900112d6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
900112d8:	68fb      	ldr	r3, [r7, #12]
900112da:	f103 0126 	add.w	r1, r3, #38	; 0x26
900112de:	79fa      	ldrb	r2, [r7, #7]
900112e0:	4613      	mov	r3, r2
900112e2:	005b      	lsls	r3, r3, #1
900112e4:	4413      	add	r3, r2
900112e6:	00db      	lsls	r3, r3, #3
900112e8:	3308      	adds	r3, #8
900112ea:	4a08      	ldr	r2, [pc, #32]	; (9001130c <etharp_output_to_arp_index+0x124>)
900112ec:	4413      	add	r3, r2
900112ee:	3304      	adds	r3, #4
900112f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
900112f4:	9200      	str	r2, [sp, #0]
900112f6:	460a      	mov	r2, r1
900112f8:	68b9      	ldr	r1, [r7, #8]
900112fa:	68f8      	ldr	r0, [r7, #12]
900112fc:	f001 fe66 	bl	90012fcc <ethernet_output>
90011300:	4603      	mov	r3, r0
}
90011302:	4618      	mov	r0, r3
90011304:	3710      	adds	r7, #16
90011306:	46bd      	mov	sp, r7
90011308:	bd80      	pop	{r7, pc}
9001130a:	bf00      	nop
9001130c:	24011080 	.word	0x24011080
90011310:	90016b98 	.word	0x90016b98
90011314:	90016d08 	.word	0x90016d08
90011318:	90016c10 	.word	0x90016c10

9001131c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
9001131c:	b580      	push	{r7, lr}
9001131e:	b08a      	sub	sp, #40	; 0x28
90011320:	af02      	add	r7, sp, #8
90011322:	60f8      	str	r0, [r7, #12]
90011324:	60b9      	str	r1, [r7, #8]
90011326:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
90011328:	687b      	ldr	r3, [r7, #4]
9001132a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
9001132c:	68fb      	ldr	r3, [r7, #12]
9001132e:	2b00      	cmp	r3, #0
90011330:	d106      	bne.n	90011340 <etharp_output+0x24>
90011332:	4b73      	ldr	r3, [pc, #460]	; (90011500 <etharp_output+0x1e4>)
90011334:	f240 321e 	movw	r2, #798	; 0x31e
90011338:	4972      	ldr	r1, [pc, #456]	; (90011504 <etharp_output+0x1e8>)
9001133a:	4873      	ldr	r0, [pc, #460]	; (90011508 <etharp_output+0x1ec>)
9001133c:	f002 f97c 	bl	90013638 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
90011340:	68bb      	ldr	r3, [r7, #8]
90011342:	2b00      	cmp	r3, #0
90011344:	d106      	bne.n	90011354 <etharp_output+0x38>
90011346:	4b6e      	ldr	r3, [pc, #440]	; (90011500 <etharp_output+0x1e4>)
90011348:	f240 321f 	movw	r2, #799	; 0x31f
9001134c:	496f      	ldr	r1, [pc, #444]	; (9001150c <etharp_output+0x1f0>)
9001134e:	486e      	ldr	r0, [pc, #440]	; (90011508 <etharp_output+0x1ec>)
90011350:	f002 f972 	bl	90013638 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
90011354:	687b      	ldr	r3, [r7, #4]
90011356:	2b00      	cmp	r3, #0
90011358:	d106      	bne.n	90011368 <etharp_output+0x4c>
9001135a:	4b69      	ldr	r3, [pc, #420]	; (90011500 <etharp_output+0x1e4>)
9001135c:	f44f 7248 	mov.w	r2, #800	; 0x320
90011360:	496b      	ldr	r1, [pc, #428]	; (90011510 <etharp_output+0x1f4>)
90011362:	4869      	ldr	r0, [pc, #420]	; (90011508 <etharp_output+0x1ec>)
90011364:	f002 f968 	bl	90013638 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
90011368:	687b      	ldr	r3, [r7, #4]
9001136a:	681b      	ldr	r3, [r3, #0]
9001136c:	68f9      	ldr	r1, [r7, #12]
9001136e:	4618      	mov	r0, r3
90011370:	f000 ff1e 	bl	900121b0 <ip4_addr_isbroadcast_u32>
90011374:	4603      	mov	r3, r0
90011376:	2b00      	cmp	r3, #0
90011378:	d002      	beq.n	90011380 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
9001137a:	4b66      	ldr	r3, [pc, #408]	; (90011514 <etharp_output+0x1f8>)
9001137c:	61fb      	str	r3, [r7, #28]
9001137e:	e0af      	b.n	900114e0 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
90011380:	687b      	ldr	r3, [r7, #4]
90011382:	681b      	ldr	r3, [r3, #0]
90011384:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
90011388:	2be0      	cmp	r3, #224	; 0xe0
9001138a:	d118      	bne.n	900113be <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
9001138c:	2301      	movs	r3, #1
9001138e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
90011390:	2300      	movs	r3, #0
90011392:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
90011394:	235e      	movs	r3, #94	; 0x5e
90011396:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
90011398:	687b      	ldr	r3, [r7, #4]
9001139a:	3301      	adds	r3, #1
9001139c:	781b      	ldrb	r3, [r3, #0]
9001139e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
900113a2:	b2db      	uxtb	r3, r3
900113a4:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
900113a6:	687b      	ldr	r3, [r7, #4]
900113a8:	3302      	adds	r3, #2
900113aa:	781b      	ldrb	r3, [r3, #0]
900113ac:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
900113ae:	687b      	ldr	r3, [r7, #4]
900113b0:	3303      	adds	r3, #3
900113b2:	781b      	ldrb	r3, [r3, #0]
900113b4:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
900113b6:	f107 0310 	add.w	r3, r7, #16
900113ba:	61fb      	str	r3, [r7, #28]
900113bc:	e090      	b.n	900114e0 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
900113be:	687b      	ldr	r3, [r7, #4]
900113c0:	681a      	ldr	r2, [r3, #0]
900113c2:	68fb      	ldr	r3, [r7, #12]
900113c4:	3304      	adds	r3, #4
900113c6:	681b      	ldr	r3, [r3, #0]
900113c8:	405a      	eors	r2, r3
900113ca:	68fb      	ldr	r3, [r7, #12]
900113cc:	3308      	adds	r3, #8
900113ce:	681b      	ldr	r3, [r3, #0]
900113d0:	4013      	ands	r3, r2
900113d2:	2b00      	cmp	r3, #0
900113d4:	d012      	beq.n	900113fc <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
900113d6:	687b      	ldr	r3, [r7, #4]
900113d8:	681b      	ldr	r3, [r3, #0]
900113da:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
900113dc:	f64f 62a9 	movw	r2, #65193	; 0xfea9
900113e0:	4293      	cmp	r3, r2
900113e2:	d00b      	beq.n	900113fc <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
900113e4:	68fb      	ldr	r3, [r7, #12]
900113e6:	330c      	adds	r3, #12
900113e8:	681b      	ldr	r3, [r3, #0]
900113ea:	2b00      	cmp	r3, #0
900113ec:	d003      	beq.n	900113f6 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
900113ee:	68fb      	ldr	r3, [r7, #12]
900113f0:	330c      	adds	r3, #12
900113f2:	61bb      	str	r3, [r7, #24]
900113f4:	e002      	b.n	900113fc <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
900113f6:	f06f 0303 	mvn.w	r3, #3
900113fa:	e07d      	b.n	900114f8 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
900113fc:	4b46      	ldr	r3, [pc, #280]	; (90011518 <etharp_output+0x1fc>)
900113fe:	781b      	ldrb	r3, [r3, #0]
90011400:	4619      	mov	r1, r3
90011402:	4a46      	ldr	r2, [pc, #280]	; (9001151c <etharp_output+0x200>)
90011404:	460b      	mov	r3, r1
90011406:	005b      	lsls	r3, r3, #1
90011408:	440b      	add	r3, r1
9001140a:	00db      	lsls	r3, r3, #3
9001140c:	4413      	add	r3, r2
9001140e:	3314      	adds	r3, #20
90011410:	781b      	ldrb	r3, [r3, #0]
90011412:	2b01      	cmp	r3, #1
90011414:	d925      	bls.n	90011462 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
90011416:	4b40      	ldr	r3, [pc, #256]	; (90011518 <etharp_output+0x1fc>)
90011418:	781b      	ldrb	r3, [r3, #0]
9001141a:	4619      	mov	r1, r3
9001141c:	4a3f      	ldr	r2, [pc, #252]	; (9001151c <etharp_output+0x200>)
9001141e:	460b      	mov	r3, r1
90011420:	005b      	lsls	r3, r3, #1
90011422:	440b      	add	r3, r1
90011424:	00db      	lsls	r3, r3, #3
90011426:	4413      	add	r3, r2
90011428:	3308      	adds	r3, #8
9001142a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
9001142c:	68fa      	ldr	r2, [r7, #12]
9001142e:	429a      	cmp	r2, r3
90011430:	d117      	bne.n	90011462 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
90011432:	69bb      	ldr	r3, [r7, #24]
90011434:	681a      	ldr	r2, [r3, #0]
90011436:	4b38      	ldr	r3, [pc, #224]	; (90011518 <etharp_output+0x1fc>)
90011438:	781b      	ldrb	r3, [r3, #0]
9001143a:	4618      	mov	r0, r3
9001143c:	4937      	ldr	r1, [pc, #220]	; (9001151c <etharp_output+0x200>)
9001143e:	4603      	mov	r3, r0
90011440:	005b      	lsls	r3, r3, #1
90011442:	4403      	add	r3, r0
90011444:	00db      	lsls	r3, r3, #3
90011446:	440b      	add	r3, r1
90011448:	3304      	adds	r3, #4
9001144a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
9001144c:	429a      	cmp	r2, r3
9001144e:	d108      	bne.n	90011462 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
90011450:	4b31      	ldr	r3, [pc, #196]	; (90011518 <etharp_output+0x1fc>)
90011452:	781b      	ldrb	r3, [r3, #0]
90011454:	461a      	mov	r2, r3
90011456:	68b9      	ldr	r1, [r7, #8]
90011458:	68f8      	ldr	r0, [r7, #12]
9001145a:	f7ff fec5 	bl	900111e8 <etharp_output_to_arp_index>
9001145e:	4603      	mov	r3, r0
90011460:	e04a      	b.n	900114f8 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
90011462:	2300      	movs	r3, #0
90011464:	75fb      	strb	r3, [r7, #23]
90011466:	e031      	b.n	900114cc <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
90011468:	7dfa      	ldrb	r2, [r7, #23]
9001146a:	492c      	ldr	r1, [pc, #176]	; (9001151c <etharp_output+0x200>)
9001146c:	4613      	mov	r3, r2
9001146e:	005b      	lsls	r3, r3, #1
90011470:	4413      	add	r3, r2
90011472:	00db      	lsls	r3, r3, #3
90011474:	440b      	add	r3, r1
90011476:	3314      	adds	r3, #20
90011478:	781b      	ldrb	r3, [r3, #0]
9001147a:	2b01      	cmp	r3, #1
9001147c:	d923      	bls.n	900114c6 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
9001147e:	7dfa      	ldrb	r2, [r7, #23]
90011480:	4926      	ldr	r1, [pc, #152]	; (9001151c <etharp_output+0x200>)
90011482:	4613      	mov	r3, r2
90011484:	005b      	lsls	r3, r3, #1
90011486:	4413      	add	r3, r2
90011488:	00db      	lsls	r3, r3, #3
9001148a:	440b      	add	r3, r1
9001148c:	3308      	adds	r3, #8
9001148e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
90011490:	68fa      	ldr	r2, [r7, #12]
90011492:	429a      	cmp	r2, r3
90011494:	d117      	bne.n	900114c6 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
90011496:	69bb      	ldr	r3, [r7, #24]
90011498:	6819      	ldr	r1, [r3, #0]
9001149a:	7dfa      	ldrb	r2, [r7, #23]
9001149c:	481f      	ldr	r0, [pc, #124]	; (9001151c <etharp_output+0x200>)
9001149e:	4613      	mov	r3, r2
900114a0:	005b      	lsls	r3, r3, #1
900114a2:	4413      	add	r3, r2
900114a4:	00db      	lsls	r3, r3, #3
900114a6:	4403      	add	r3, r0
900114a8:	3304      	adds	r3, #4
900114aa:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
900114ac:	4299      	cmp	r1, r3
900114ae:	d10a      	bne.n	900114c6 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
900114b0:	4a19      	ldr	r2, [pc, #100]	; (90011518 <etharp_output+0x1fc>)
900114b2:	7dfb      	ldrb	r3, [r7, #23]
900114b4:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
900114b6:	7dfb      	ldrb	r3, [r7, #23]
900114b8:	461a      	mov	r2, r3
900114ba:	68b9      	ldr	r1, [r7, #8]
900114bc:	68f8      	ldr	r0, [r7, #12]
900114be:	f7ff fe93 	bl	900111e8 <etharp_output_to_arp_index>
900114c2:	4603      	mov	r3, r0
900114c4:	e018      	b.n	900114f8 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
900114c6:	7dfb      	ldrb	r3, [r7, #23]
900114c8:	3301      	adds	r3, #1
900114ca:	75fb      	strb	r3, [r7, #23]
900114cc:	7dfb      	ldrb	r3, [r7, #23]
900114ce:	2b09      	cmp	r3, #9
900114d0:	d9ca      	bls.n	90011468 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
900114d2:	68ba      	ldr	r2, [r7, #8]
900114d4:	69b9      	ldr	r1, [r7, #24]
900114d6:	68f8      	ldr	r0, [r7, #12]
900114d8:	f000 f822 	bl	90011520 <etharp_query>
900114dc:	4603      	mov	r3, r0
900114de:	e00b      	b.n	900114f8 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
900114e0:	68fb      	ldr	r3, [r7, #12]
900114e2:	f103 0226 	add.w	r2, r3, #38	; 0x26
900114e6:	f44f 6300 	mov.w	r3, #2048	; 0x800
900114ea:	9300      	str	r3, [sp, #0]
900114ec:	69fb      	ldr	r3, [r7, #28]
900114ee:	68b9      	ldr	r1, [r7, #8]
900114f0:	68f8      	ldr	r0, [r7, #12]
900114f2:	f001 fd6b 	bl	90012fcc <ethernet_output>
900114f6:	4603      	mov	r3, r0
}
900114f8:	4618      	mov	r0, r3
900114fa:	3720      	adds	r7, #32
900114fc:	46bd      	mov	sp, r7
900114fe:	bd80      	pop	{r7, pc}
90011500:	90016b98 	.word	0x90016b98
90011504:	90016ce8 	.word	0x90016ce8
90011508:	90016c10 	.word	0x90016c10
9001150c:	90016d38 	.word	0x90016d38
90011510:	90016cd8 	.word	0x90016cd8
90011514:	900174d4 	.word	0x900174d4
90011518:	24011170 	.word	0x24011170
9001151c:	24011080 	.word	0x24011080

90011520 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
90011520:	b580      	push	{r7, lr}
90011522:	b08c      	sub	sp, #48	; 0x30
90011524:	af02      	add	r7, sp, #8
90011526:	60f8      	str	r0, [r7, #12]
90011528:	60b9      	str	r1, [r7, #8]
9001152a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
9001152c:	68fb      	ldr	r3, [r7, #12]
9001152e:	3326      	adds	r3, #38	; 0x26
90011530:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
90011532:	23ff      	movs	r3, #255	; 0xff
90011534:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
90011538:	2300      	movs	r3, #0
9001153a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
9001153c:	68bb      	ldr	r3, [r7, #8]
9001153e:	681b      	ldr	r3, [r3, #0]
90011540:	68f9      	ldr	r1, [r7, #12]
90011542:	4618      	mov	r0, r3
90011544:	f000 fe34 	bl	900121b0 <ip4_addr_isbroadcast_u32>
90011548:	4603      	mov	r3, r0
9001154a:	2b00      	cmp	r3, #0
9001154c:	d10c      	bne.n	90011568 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
9001154e:	68bb      	ldr	r3, [r7, #8]
90011550:	681b      	ldr	r3, [r3, #0]
90011552:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
90011556:	2be0      	cmp	r3, #224	; 0xe0
90011558:	d006      	beq.n	90011568 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
9001155a:	68bb      	ldr	r3, [r7, #8]
9001155c:	2b00      	cmp	r3, #0
9001155e:	d003      	beq.n	90011568 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
90011560:	68bb      	ldr	r3, [r7, #8]
90011562:	681b      	ldr	r3, [r3, #0]
90011564:	2b00      	cmp	r3, #0
90011566:	d102      	bne.n	9001156e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
90011568:	f06f 030f 	mvn.w	r3, #15
9001156c:	e101      	b.n	90011772 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
9001156e:	68fa      	ldr	r2, [r7, #12]
90011570:	2101      	movs	r1, #1
90011572:	68b8      	ldr	r0, [r7, #8]
90011574:	f7ff fb60 	bl	90010c38 <etharp_find_entry>
90011578:	4603      	mov	r3, r0
9001157a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
9001157c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
90011580:	2b00      	cmp	r3, #0
90011582:	da02      	bge.n	9001158a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
90011584:	8a7b      	ldrh	r3, [r7, #18]
90011586:	b25b      	sxtb	r3, r3
90011588:	e0f3      	b.n	90011772 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
9001158a:	8a7b      	ldrh	r3, [r7, #18]
9001158c:	2b7e      	cmp	r3, #126	; 0x7e
9001158e:	d906      	bls.n	9001159e <etharp_query+0x7e>
90011590:	4b7a      	ldr	r3, [pc, #488]	; (9001177c <etharp_query+0x25c>)
90011592:	f240 32c1 	movw	r2, #961	; 0x3c1
90011596:	497a      	ldr	r1, [pc, #488]	; (90011780 <etharp_query+0x260>)
90011598:	487a      	ldr	r0, [pc, #488]	; (90011784 <etharp_query+0x264>)
9001159a:	f002 f84d 	bl	90013638 <iprintf>
  i = (netif_addr_idx_t)i_err;
9001159e:	8a7b      	ldrh	r3, [r7, #18]
900115a0:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
900115a2:	7c7a      	ldrb	r2, [r7, #17]
900115a4:	4978      	ldr	r1, [pc, #480]	; (90011788 <etharp_query+0x268>)
900115a6:	4613      	mov	r3, r2
900115a8:	005b      	lsls	r3, r3, #1
900115aa:	4413      	add	r3, r2
900115ac:	00db      	lsls	r3, r3, #3
900115ae:	440b      	add	r3, r1
900115b0:	3314      	adds	r3, #20
900115b2:	781b      	ldrb	r3, [r3, #0]
900115b4:	2b00      	cmp	r3, #0
900115b6:	d115      	bne.n	900115e4 <etharp_query+0xc4>
    is_new_entry = 1;
900115b8:	2301      	movs	r3, #1
900115ba:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
900115bc:	7c7a      	ldrb	r2, [r7, #17]
900115be:	4972      	ldr	r1, [pc, #456]	; (90011788 <etharp_query+0x268>)
900115c0:	4613      	mov	r3, r2
900115c2:	005b      	lsls	r3, r3, #1
900115c4:	4413      	add	r3, r2
900115c6:	00db      	lsls	r3, r3, #3
900115c8:	440b      	add	r3, r1
900115ca:	3314      	adds	r3, #20
900115cc:	2201      	movs	r2, #1
900115ce:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
900115d0:	7c7a      	ldrb	r2, [r7, #17]
900115d2:	496d      	ldr	r1, [pc, #436]	; (90011788 <etharp_query+0x268>)
900115d4:	4613      	mov	r3, r2
900115d6:	005b      	lsls	r3, r3, #1
900115d8:	4413      	add	r3, r2
900115da:	00db      	lsls	r3, r3, #3
900115dc:	440b      	add	r3, r1
900115de:	3308      	adds	r3, #8
900115e0:	68fa      	ldr	r2, [r7, #12]
900115e2:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
900115e4:	7c7a      	ldrb	r2, [r7, #17]
900115e6:	4968      	ldr	r1, [pc, #416]	; (90011788 <etharp_query+0x268>)
900115e8:	4613      	mov	r3, r2
900115ea:	005b      	lsls	r3, r3, #1
900115ec:	4413      	add	r3, r2
900115ee:	00db      	lsls	r3, r3, #3
900115f0:	440b      	add	r3, r1
900115f2:	3314      	adds	r3, #20
900115f4:	781b      	ldrb	r3, [r3, #0]
900115f6:	2b01      	cmp	r3, #1
900115f8:	d011      	beq.n	9001161e <etharp_query+0xfe>
900115fa:	7c7a      	ldrb	r2, [r7, #17]
900115fc:	4962      	ldr	r1, [pc, #392]	; (90011788 <etharp_query+0x268>)
900115fe:	4613      	mov	r3, r2
90011600:	005b      	lsls	r3, r3, #1
90011602:	4413      	add	r3, r2
90011604:	00db      	lsls	r3, r3, #3
90011606:	440b      	add	r3, r1
90011608:	3314      	adds	r3, #20
9001160a:	781b      	ldrb	r3, [r3, #0]
9001160c:	2b01      	cmp	r3, #1
9001160e:	d806      	bhi.n	9001161e <etharp_query+0xfe>
90011610:	4b5a      	ldr	r3, [pc, #360]	; (9001177c <etharp_query+0x25c>)
90011612:	f240 32cd 	movw	r2, #973	; 0x3cd
90011616:	495d      	ldr	r1, [pc, #372]	; (9001178c <etharp_query+0x26c>)
90011618:	485a      	ldr	r0, [pc, #360]	; (90011784 <etharp_query+0x264>)
9001161a:	f002 f80d 	bl	90013638 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
9001161e:	6a3b      	ldr	r3, [r7, #32]
90011620:	2b00      	cmp	r3, #0
90011622:	d102      	bne.n	9001162a <etharp_query+0x10a>
90011624:	687b      	ldr	r3, [r7, #4]
90011626:	2b00      	cmp	r3, #0
90011628:	d10c      	bne.n	90011644 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
9001162a:	68b9      	ldr	r1, [r7, #8]
9001162c:	68f8      	ldr	r0, [r7, #12]
9001162e:	f000 f963 	bl	900118f8 <etharp_request>
90011632:	4603      	mov	r3, r0
90011634:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
90011638:	687b      	ldr	r3, [r7, #4]
9001163a:	2b00      	cmp	r3, #0
9001163c:	d102      	bne.n	90011644 <etharp_query+0x124>
      return result;
9001163e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
90011642:	e096      	b.n	90011772 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
90011644:	687b      	ldr	r3, [r7, #4]
90011646:	2b00      	cmp	r3, #0
90011648:	d106      	bne.n	90011658 <etharp_query+0x138>
9001164a:	4b4c      	ldr	r3, [pc, #304]	; (9001177c <etharp_query+0x25c>)
9001164c:	f240 32e1 	movw	r2, #993	; 0x3e1
90011650:	494f      	ldr	r1, [pc, #316]	; (90011790 <etharp_query+0x270>)
90011652:	484c      	ldr	r0, [pc, #304]	; (90011784 <etharp_query+0x264>)
90011654:	f001 fff0 	bl	90013638 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
90011658:	7c7a      	ldrb	r2, [r7, #17]
9001165a:	494b      	ldr	r1, [pc, #300]	; (90011788 <etharp_query+0x268>)
9001165c:	4613      	mov	r3, r2
9001165e:	005b      	lsls	r3, r3, #1
90011660:	4413      	add	r3, r2
90011662:	00db      	lsls	r3, r3, #3
90011664:	440b      	add	r3, r1
90011666:	3314      	adds	r3, #20
90011668:	781b      	ldrb	r3, [r3, #0]
9001166a:	2b01      	cmp	r3, #1
9001166c:	d917      	bls.n	9001169e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
9001166e:	4a49      	ldr	r2, [pc, #292]	; (90011794 <etharp_query+0x274>)
90011670:	7c7b      	ldrb	r3, [r7, #17]
90011672:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
90011674:	7c7a      	ldrb	r2, [r7, #17]
90011676:	4613      	mov	r3, r2
90011678:	005b      	lsls	r3, r3, #1
9001167a:	4413      	add	r3, r2
9001167c:	00db      	lsls	r3, r3, #3
9001167e:	3308      	adds	r3, #8
90011680:	4a41      	ldr	r2, [pc, #260]	; (90011788 <etharp_query+0x268>)
90011682:	4413      	add	r3, r2
90011684:	3304      	adds	r3, #4
90011686:	f44f 6200 	mov.w	r2, #2048	; 0x800
9001168a:	9200      	str	r2, [sp, #0]
9001168c:	697a      	ldr	r2, [r7, #20]
9001168e:	6879      	ldr	r1, [r7, #4]
90011690:	68f8      	ldr	r0, [r7, #12]
90011692:	f001 fc9b 	bl	90012fcc <ethernet_output>
90011696:	4603      	mov	r3, r0
90011698:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
9001169c:	e067      	b.n	9001176e <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
9001169e:	7c7a      	ldrb	r2, [r7, #17]
900116a0:	4939      	ldr	r1, [pc, #228]	; (90011788 <etharp_query+0x268>)
900116a2:	4613      	mov	r3, r2
900116a4:	005b      	lsls	r3, r3, #1
900116a6:	4413      	add	r3, r2
900116a8:	00db      	lsls	r3, r3, #3
900116aa:	440b      	add	r3, r1
900116ac:	3314      	adds	r3, #20
900116ae:	781b      	ldrb	r3, [r3, #0]
900116b0:	2b01      	cmp	r3, #1
900116b2:	d15c      	bne.n	9001176e <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
900116b4:	2300      	movs	r3, #0
900116b6:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
900116b8:	687b      	ldr	r3, [r7, #4]
900116ba:	61fb      	str	r3, [r7, #28]
    while (p) {
900116bc:	e01c      	b.n	900116f8 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
900116be:	69fb      	ldr	r3, [r7, #28]
900116c0:	895a      	ldrh	r2, [r3, #10]
900116c2:	69fb      	ldr	r3, [r7, #28]
900116c4:	891b      	ldrh	r3, [r3, #8]
900116c6:	429a      	cmp	r2, r3
900116c8:	d10a      	bne.n	900116e0 <etharp_query+0x1c0>
900116ca:	69fb      	ldr	r3, [r7, #28]
900116cc:	681b      	ldr	r3, [r3, #0]
900116ce:	2b00      	cmp	r3, #0
900116d0:	d006      	beq.n	900116e0 <etharp_query+0x1c0>
900116d2:	4b2a      	ldr	r3, [pc, #168]	; (9001177c <etharp_query+0x25c>)
900116d4:	f240 32f1 	movw	r2, #1009	; 0x3f1
900116d8:	492f      	ldr	r1, [pc, #188]	; (90011798 <etharp_query+0x278>)
900116da:	482a      	ldr	r0, [pc, #168]	; (90011784 <etharp_query+0x264>)
900116dc:	f001 ffac 	bl	90013638 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
900116e0:	69fb      	ldr	r3, [r7, #28]
900116e2:	7b1b      	ldrb	r3, [r3, #12]
900116e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
900116e8:	2b00      	cmp	r3, #0
900116ea:	d002      	beq.n	900116f2 <etharp_query+0x1d2>
        copy_needed = 1;
900116ec:	2301      	movs	r3, #1
900116ee:	61bb      	str	r3, [r7, #24]
        break;
900116f0:	e005      	b.n	900116fe <etharp_query+0x1de>
      }
      p = p->next;
900116f2:	69fb      	ldr	r3, [r7, #28]
900116f4:	681b      	ldr	r3, [r3, #0]
900116f6:	61fb      	str	r3, [r7, #28]
    while (p) {
900116f8:	69fb      	ldr	r3, [r7, #28]
900116fa:	2b00      	cmp	r3, #0
900116fc:	d1df      	bne.n	900116be <etharp_query+0x19e>
    }
    if (copy_needed) {
900116fe:	69bb      	ldr	r3, [r7, #24]
90011700:	2b00      	cmp	r3, #0
90011702:	d007      	beq.n	90011714 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
90011704:	687a      	ldr	r2, [r7, #4]
90011706:	f44f 7120 	mov.w	r1, #640	; 0x280
9001170a:	200e      	movs	r0, #14
9001170c:	f7f8 fdfa 	bl	9000a304 <pbuf_clone>
90011710:	61f8      	str	r0, [r7, #28]
90011712:	e004      	b.n	9001171e <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
90011714:	687b      	ldr	r3, [r7, #4]
90011716:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
90011718:	69f8      	ldr	r0, [r7, #28]
9001171a:	f7f8 fc31 	bl	90009f80 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
9001171e:	69fb      	ldr	r3, [r7, #28]
90011720:	2b00      	cmp	r3, #0
90011722:	d021      	beq.n	90011768 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
90011724:	7c7a      	ldrb	r2, [r7, #17]
90011726:	4918      	ldr	r1, [pc, #96]	; (90011788 <etharp_query+0x268>)
90011728:	4613      	mov	r3, r2
9001172a:	005b      	lsls	r3, r3, #1
9001172c:	4413      	add	r3, r2
9001172e:	00db      	lsls	r3, r3, #3
90011730:	440b      	add	r3, r1
90011732:	681b      	ldr	r3, [r3, #0]
90011734:	2b00      	cmp	r3, #0
90011736:	d00a      	beq.n	9001174e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
90011738:	7c7a      	ldrb	r2, [r7, #17]
9001173a:	4913      	ldr	r1, [pc, #76]	; (90011788 <etharp_query+0x268>)
9001173c:	4613      	mov	r3, r2
9001173e:	005b      	lsls	r3, r3, #1
90011740:	4413      	add	r3, r2
90011742:	00db      	lsls	r3, r3, #3
90011744:	440b      	add	r3, r1
90011746:	681b      	ldr	r3, [r3, #0]
90011748:	4618      	mov	r0, r3
9001174a:	f7f8 fb73 	bl	90009e34 <pbuf_free>
      }
      arp_table[i].q = p;
9001174e:	7c7a      	ldrb	r2, [r7, #17]
90011750:	490d      	ldr	r1, [pc, #52]	; (90011788 <etharp_query+0x268>)
90011752:	4613      	mov	r3, r2
90011754:	005b      	lsls	r3, r3, #1
90011756:	4413      	add	r3, r2
90011758:	00db      	lsls	r3, r3, #3
9001175a:	440b      	add	r3, r1
9001175c:	69fa      	ldr	r2, [r7, #28]
9001175e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
90011760:	2300      	movs	r3, #0
90011762:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
90011766:	e002      	b.n	9001176e <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
90011768:	23ff      	movs	r3, #255	; 0xff
9001176a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
9001176e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
90011772:	4618      	mov	r0, r3
90011774:	3728      	adds	r7, #40	; 0x28
90011776:	46bd      	mov	sp, r7
90011778:	bd80      	pop	{r7, pc}
9001177a:	bf00      	nop
9001177c:	90016b98 	.word	0x90016b98
90011780:	90016d44 	.word	0x90016d44
90011784:	90016c10 	.word	0x90016c10
90011788:	24011080 	.word	0x24011080
9001178c:	90016d54 	.word	0x90016d54
90011790:	90016d38 	.word	0x90016d38
90011794:	24011170 	.word	0x24011170
90011798:	90016d7c 	.word	0x90016d7c

9001179c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
9001179c:	b580      	push	{r7, lr}
9001179e:	b08a      	sub	sp, #40	; 0x28
900117a0:	af02      	add	r7, sp, #8
900117a2:	60f8      	str	r0, [r7, #12]
900117a4:	60b9      	str	r1, [r7, #8]
900117a6:	607a      	str	r2, [r7, #4]
900117a8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
900117aa:	2300      	movs	r3, #0
900117ac:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
900117ae:	68fb      	ldr	r3, [r7, #12]
900117b0:	2b00      	cmp	r3, #0
900117b2:	d106      	bne.n	900117c2 <etharp_raw+0x26>
900117b4:	4b3a      	ldr	r3, [pc, #232]	; (900118a0 <etharp_raw+0x104>)
900117b6:	f240 4257 	movw	r2, #1111	; 0x457
900117ba:	493a      	ldr	r1, [pc, #232]	; (900118a4 <etharp_raw+0x108>)
900117bc:	483a      	ldr	r0, [pc, #232]	; (900118a8 <etharp_raw+0x10c>)
900117be:	f001 ff3b 	bl	90013638 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
900117c2:	f44f 7220 	mov.w	r2, #640	; 0x280
900117c6:	211c      	movs	r1, #28
900117c8:	200e      	movs	r0, #14
900117ca:	f7f8 f84f 	bl	9000986c <pbuf_alloc>
900117ce:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
900117d0:	69bb      	ldr	r3, [r7, #24]
900117d2:	2b00      	cmp	r3, #0
900117d4:	d102      	bne.n	900117dc <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
900117d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
900117da:	e05d      	b.n	90011898 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
900117dc:	69bb      	ldr	r3, [r7, #24]
900117de:	895b      	ldrh	r3, [r3, #10]
900117e0:	2b1b      	cmp	r3, #27
900117e2:	d806      	bhi.n	900117f2 <etharp_raw+0x56>
900117e4:	4b2e      	ldr	r3, [pc, #184]	; (900118a0 <etharp_raw+0x104>)
900117e6:	f240 4262 	movw	r2, #1122	; 0x462
900117ea:	4930      	ldr	r1, [pc, #192]	; (900118ac <etharp_raw+0x110>)
900117ec:	482e      	ldr	r0, [pc, #184]	; (900118a8 <etharp_raw+0x10c>)
900117ee:	f001 ff23 	bl	90013638 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
900117f2:	69bb      	ldr	r3, [r7, #24]
900117f4:	685b      	ldr	r3, [r3, #4]
900117f6:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
900117f8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
900117fa:	4618      	mov	r0, r3
900117fc:	f7f6 fe2a 	bl	90008454 <lwip_htons>
90011800:	4603      	mov	r3, r0
90011802:	461a      	mov	r2, r3
90011804:	697b      	ldr	r3, [r7, #20]
90011806:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
90011808:	68fb      	ldr	r3, [r7, #12]
9001180a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
9001180e:	2b06      	cmp	r3, #6
90011810:	d006      	beq.n	90011820 <etharp_raw+0x84>
90011812:	4b23      	ldr	r3, [pc, #140]	; (900118a0 <etharp_raw+0x104>)
90011814:	f240 4269 	movw	r2, #1129	; 0x469
90011818:	4925      	ldr	r1, [pc, #148]	; (900118b0 <etharp_raw+0x114>)
9001181a:	4823      	ldr	r0, [pc, #140]	; (900118a8 <etharp_raw+0x10c>)
9001181c:	f001 ff0c 	bl	90013638 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
90011820:	697b      	ldr	r3, [r7, #20]
90011822:	3308      	adds	r3, #8
90011824:	2206      	movs	r2, #6
90011826:	6839      	ldr	r1, [r7, #0]
90011828:	4618      	mov	r0, r3
9001182a:	f001 fe5a 	bl	900134e2 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
9001182e:	697b      	ldr	r3, [r7, #20]
90011830:	3312      	adds	r3, #18
90011832:	2206      	movs	r2, #6
90011834:	6af9      	ldr	r1, [r7, #44]	; 0x2c
90011836:	4618      	mov	r0, r3
90011838:	f001 fe53 	bl	900134e2 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
9001183c:	697b      	ldr	r3, [r7, #20]
9001183e:	330e      	adds	r3, #14
90011840:	6aba      	ldr	r2, [r7, #40]	; 0x28
90011842:	6812      	ldr	r2, [r2, #0]
90011844:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
90011846:	697b      	ldr	r3, [r7, #20]
90011848:	3318      	adds	r3, #24
9001184a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
9001184c:	6812      	ldr	r2, [r2, #0]
9001184e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
90011850:	697b      	ldr	r3, [r7, #20]
90011852:	2200      	movs	r2, #0
90011854:	701a      	strb	r2, [r3, #0]
90011856:	2200      	movs	r2, #0
90011858:	f042 0201 	orr.w	r2, r2, #1
9001185c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
9001185e:	697b      	ldr	r3, [r7, #20]
90011860:	2200      	movs	r2, #0
90011862:	f042 0208 	orr.w	r2, r2, #8
90011866:	709a      	strb	r2, [r3, #2]
90011868:	2200      	movs	r2, #0
9001186a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
9001186c:	697b      	ldr	r3, [r7, #20]
9001186e:	2206      	movs	r2, #6
90011870:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
90011872:	697b      	ldr	r3, [r7, #20]
90011874:	2204      	movs	r2, #4
90011876:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
90011878:	f640 0306 	movw	r3, #2054	; 0x806
9001187c:	9300      	str	r3, [sp, #0]
9001187e:	687b      	ldr	r3, [r7, #4]
90011880:	68ba      	ldr	r2, [r7, #8]
90011882:	69b9      	ldr	r1, [r7, #24]
90011884:	68f8      	ldr	r0, [r7, #12]
90011886:	f001 fba1 	bl	90012fcc <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
9001188a:	69b8      	ldr	r0, [r7, #24]
9001188c:	f7f8 fad2 	bl	90009e34 <pbuf_free>
  p = NULL;
90011890:	2300      	movs	r3, #0
90011892:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
90011894:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
90011898:	4618      	mov	r0, r3
9001189a:	3720      	adds	r7, #32
9001189c:	46bd      	mov	sp, r7
9001189e:	bd80      	pop	{r7, pc}
900118a0:	90016b98 	.word	0x90016b98
900118a4:	90016ce8 	.word	0x90016ce8
900118a8:	90016c10 	.word	0x90016c10
900118ac:	90016d98 	.word	0x90016d98
900118b0:	90016dcc 	.word	0x90016dcc

900118b4 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
900118b4:	b580      	push	{r7, lr}
900118b6:	b088      	sub	sp, #32
900118b8:	af04      	add	r7, sp, #16
900118ba:	60f8      	str	r0, [r7, #12]
900118bc:	60b9      	str	r1, [r7, #8]
900118be:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
900118c0:	68fb      	ldr	r3, [r7, #12]
900118c2:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
900118c6:	68fb      	ldr	r3, [r7, #12]
900118c8:	f103 0026 	add.w	r0, r3, #38	; 0x26
900118cc:	68fb      	ldr	r3, [r7, #12]
900118ce:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
900118d0:	2201      	movs	r2, #1
900118d2:	9203      	str	r2, [sp, #12]
900118d4:	68ba      	ldr	r2, [r7, #8]
900118d6:	9202      	str	r2, [sp, #8]
900118d8:	4a06      	ldr	r2, [pc, #24]	; (900118f4 <etharp_request_dst+0x40>)
900118da:	9201      	str	r2, [sp, #4]
900118dc:	9300      	str	r3, [sp, #0]
900118de:	4603      	mov	r3, r0
900118e0:	687a      	ldr	r2, [r7, #4]
900118e2:	68f8      	ldr	r0, [r7, #12]
900118e4:	f7ff ff5a 	bl	9001179c <etharp_raw>
900118e8:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
900118ea:	4618      	mov	r0, r3
900118ec:	3710      	adds	r7, #16
900118ee:	46bd      	mov	sp, r7
900118f0:	bd80      	pop	{r7, pc}
900118f2:	bf00      	nop
900118f4:	900174dc 	.word	0x900174dc

900118f8 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
900118f8:	b580      	push	{r7, lr}
900118fa:	b082      	sub	sp, #8
900118fc:	af00      	add	r7, sp, #0
900118fe:	6078      	str	r0, [r7, #4]
90011900:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
90011902:	4a05      	ldr	r2, [pc, #20]	; (90011918 <etharp_request+0x20>)
90011904:	6839      	ldr	r1, [r7, #0]
90011906:	6878      	ldr	r0, [r7, #4]
90011908:	f7ff ffd4 	bl	900118b4 <etharp_request_dst>
9001190c:	4603      	mov	r3, r0
}
9001190e:	4618      	mov	r0, r3
90011910:	3708      	adds	r7, #8
90011912:	46bd      	mov	sp, r7
90011914:	bd80      	pop	{r7, pc}
90011916:	bf00      	nop
90011918:	900174d4 	.word	0x900174d4

9001191c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
9001191c:	b580      	push	{r7, lr}
9001191e:	b08e      	sub	sp, #56	; 0x38
90011920:	af04      	add	r7, sp, #16
90011922:	6078      	str	r0, [r7, #4]
90011924:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
90011926:	4b87      	ldr	r3, [pc, #540]	; (90011b44 <icmp_input+0x228>)
90011928:	689b      	ldr	r3, [r3, #8]
9001192a:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
9001192c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9001192e:	781b      	ldrb	r3, [r3, #0]
90011930:	f003 030f 	and.w	r3, r3, #15
90011934:	b2db      	uxtb	r3, r3
90011936:	009b      	lsls	r3, r3, #2
90011938:	b2db      	uxtb	r3, r3
9001193a:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
9001193c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
9001193e:	2b13      	cmp	r3, #19
90011940:	f240 80e8 	bls.w	90011b14 <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
90011944:	687b      	ldr	r3, [r7, #4]
90011946:	895b      	ldrh	r3, [r3, #10]
90011948:	2b03      	cmp	r3, #3
9001194a:	f240 80e5 	bls.w	90011b18 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
9001194e:	687b      	ldr	r3, [r7, #4]
90011950:	685b      	ldr	r3, [r3, #4]
90011952:	781b      	ldrb	r3, [r3, #0]
90011954:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
90011958:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
9001195c:	2b00      	cmp	r3, #0
9001195e:	f000 80d2 	beq.w	90011b06 <icmp_input+0x1ea>
90011962:	2b08      	cmp	r3, #8
90011964:	f040 80d2 	bne.w	90011b0c <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
90011968:	4b77      	ldr	r3, [pc, #476]	; (90011b48 <icmp_input+0x22c>)
9001196a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
9001196c:	4b75      	ldr	r3, [pc, #468]	; (90011b44 <icmp_input+0x228>)
9001196e:	695b      	ldr	r3, [r3, #20]
90011970:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
90011974:	2be0      	cmp	r3, #224	; 0xe0
90011976:	f000 80d6 	beq.w	90011b26 <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
9001197a:	4b72      	ldr	r3, [pc, #456]	; (90011b44 <icmp_input+0x228>)
9001197c:	695b      	ldr	r3, [r3, #20]
9001197e:	4a71      	ldr	r2, [pc, #452]	; (90011b44 <icmp_input+0x228>)
90011980:	6812      	ldr	r2, [r2, #0]
90011982:	4611      	mov	r1, r2
90011984:	4618      	mov	r0, r3
90011986:	f000 fc13 	bl	900121b0 <ip4_addr_isbroadcast_u32>
9001198a:	4603      	mov	r3, r0
9001198c:	2b00      	cmp	r3, #0
9001198e:	f040 80cc 	bne.w	90011b2a <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
90011992:	687b      	ldr	r3, [r7, #4]
90011994:	891b      	ldrh	r3, [r3, #8]
90011996:	2b07      	cmp	r3, #7
90011998:	f240 80c0 	bls.w	90011b1c <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
9001199c:	6878      	ldr	r0, [r7, #4]
9001199e:	f7f6 fe2c 	bl	900085fa <inet_chksum_pbuf>
900119a2:	4603      	mov	r3, r0
900119a4:	2b00      	cmp	r3, #0
900119a6:	d003      	beq.n	900119b0 <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
900119a8:	6878      	ldr	r0, [r7, #4]
900119aa:	f7f8 fa43 	bl	90009e34 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
900119ae:	e0c5      	b.n	90011b3c <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
900119b0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
900119b2:	330e      	adds	r3, #14
900119b4:	4619      	mov	r1, r3
900119b6:	6878      	ldr	r0, [r7, #4]
900119b8:	f7f8 f9a6 	bl	90009d08 <pbuf_add_header>
900119bc:	4603      	mov	r3, r0
900119be:	2b00      	cmp	r3, #0
900119c0:	d04b      	beq.n	90011a5a <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
900119c2:	687b      	ldr	r3, [r7, #4]
900119c4:	891a      	ldrh	r2, [r3, #8]
900119c6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
900119c8:	4413      	add	r3, r2
900119ca:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
900119cc:	687b      	ldr	r3, [r7, #4]
900119ce:	891b      	ldrh	r3, [r3, #8]
900119d0:	8b7a      	ldrh	r2, [r7, #26]
900119d2:	429a      	cmp	r2, r3
900119d4:	f0c0 80ab 	bcc.w	90011b2e <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
900119d8:	8b7b      	ldrh	r3, [r7, #26]
900119da:	f44f 7220 	mov.w	r2, #640	; 0x280
900119de:	4619      	mov	r1, r3
900119e0:	200e      	movs	r0, #14
900119e2:	f7f7 ff43 	bl	9000986c <pbuf_alloc>
900119e6:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
900119e8:	697b      	ldr	r3, [r7, #20]
900119ea:	2b00      	cmp	r3, #0
900119ec:	f000 80a1 	beq.w	90011b32 <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
900119f0:	697b      	ldr	r3, [r7, #20]
900119f2:	895b      	ldrh	r3, [r3, #10]
900119f4:	461a      	mov	r2, r3
900119f6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
900119f8:	3308      	adds	r3, #8
900119fa:	429a      	cmp	r2, r3
900119fc:	d203      	bcs.n	90011a06 <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
900119fe:	6978      	ldr	r0, [r7, #20]
90011a00:	f7f8 fa18 	bl	90009e34 <pbuf_free>
          goto icmperr;
90011a04:	e096      	b.n	90011b34 <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
90011a06:	697b      	ldr	r3, [r7, #20]
90011a08:	685b      	ldr	r3, [r3, #4]
90011a0a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
90011a0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
90011a0e:	4618      	mov	r0, r3
90011a10:	f001 fd67 	bl	900134e2 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
90011a14:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
90011a16:	4619      	mov	r1, r3
90011a18:	6978      	ldr	r0, [r7, #20]
90011a1a:	f7f8 f985 	bl	90009d28 <pbuf_remove_header>
90011a1e:	4603      	mov	r3, r0
90011a20:	2b00      	cmp	r3, #0
90011a22:	d009      	beq.n	90011a38 <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
90011a24:	4b49      	ldr	r3, [pc, #292]	; (90011b4c <icmp_input+0x230>)
90011a26:	22b6      	movs	r2, #182	; 0xb6
90011a28:	4949      	ldr	r1, [pc, #292]	; (90011b50 <icmp_input+0x234>)
90011a2a:	484a      	ldr	r0, [pc, #296]	; (90011b54 <icmp_input+0x238>)
90011a2c:	f001 fe04 	bl	90013638 <iprintf>
          pbuf_free(r);
90011a30:	6978      	ldr	r0, [r7, #20]
90011a32:	f7f8 f9ff 	bl	90009e34 <pbuf_free>
          goto icmperr;
90011a36:	e07d      	b.n	90011b34 <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
90011a38:	6879      	ldr	r1, [r7, #4]
90011a3a:	6978      	ldr	r0, [r7, #20]
90011a3c:	f7f8 fb1e 	bl	9000a07c <pbuf_copy>
90011a40:	4603      	mov	r3, r0
90011a42:	2b00      	cmp	r3, #0
90011a44:	d003      	beq.n	90011a4e <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
90011a46:	6978      	ldr	r0, [r7, #20]
90011a48:	f7f8 f9f4 	bl	90009e34 <pbuf_free>
          goto icmperr;
90011a4c:	e072      	b.n	90011b34 <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
90011a4e:	6878      	ldr	r0, [r7, #4]
90011a50:	f7f8 f9f0 	bl	90009e34 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
90011a54:	697b      	ldr	r3, [r7, #20]
90011a56:	607b      	str	r3, [r7, #4]
90011a58:	e00f      	b.n	90011a7a <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
90011a5a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
90011a5c:	330e      	adds	r3, #14
90011a5e:	4619      	mov	r1, r3
90011a60:	6878      	ldr	r0, [r7, #4]
90011a62:	f7f8 f961 	bl	90009d28 <pbuf_remove_header>
90011a66:	4603      	mov	r3, r0
90011a68:	2b00      	cmp	r3, #0
90011a6a:	d006      	beq.n	90011a7a <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
90011a6c:	4b37      	ldr	r3, [pc, #220]	; (90011b4c <icmp_input+0x230>)
90011a6e:	22c7      	movs	r2, #199	; 0xc7
90011a70:	4939      	ldr	r1, [pc, #228]	; (90011b58 <icmp_input+0x23c>)
90011a72:	4838      	ldr	r0, [pc, #224]	; (90011b54 <icmp_input+0x238>)
90011a74:	f001 fde0 	bl	90013638 <iprintf>
          goto icmperr;
90011a78:	e05c      	b.n	90011b34 <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
90011a7a:	687b      	ldr	r3, [r7, #4]
90011a7c:	685b      	ldr	r3, [r3, #4]
90011a7e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
90011a80:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
90011a82:	4619      	mov	r1, r3
90011a84:	6878      	ldr	r0, [r7, #4]
90011a86:	f7f8 f93f 	bl	90009d08 <pbuf_add_header>
90011a8a:	4603      	mov	r3, r0
90011a8c:	2b00      	cmp	r3, #0
90011a8e:	d13c      	bne.n	90011b0a <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
90011a90:	687b      	ldr	r3, [r7, #4]
90011a92:	685b      	ldr	r3, [r3, #4]
90011a94:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
90011a96:	69fb      	ldr	r3, [r7, #28]
90011a98:	681a      	ldr	r2, [r3, #0]
90011a9a:	68fb      	ldr	r3, [r7, #12]
90011a9c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
90011a9e:	4b29      	ldr	r3, [pc, #164]	; (90011b44 <icmp_input+0x228>)
90011aa0:	691a      	ldr	r2, [r3, #16]
90011aa2:	68fb      	ldr	r3, [r7, #12]
90011aa4:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
90011aa6:	693b      	ldr	r3, [r7, #16]
90011aa8:	2200      	movs	r2, #0
90011aaa:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
90011aac:	693b      	ldr	r3, [r7, #16]
90011aae:	885b      	ldrh	r3, [r3, #2]
90011ab0:	b29b      	uxth	r3, r3
90011ab2:	f64f 72f7 	movw	r2, #65527	; 0xfff7
90011ab6:	4293      	cmp	r3, r2
90011ab8:	d907      	bls.n	90011aca <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
90011aba:	693b      	ldr	r3, [r7, #16]
90011abc:	885b      	ldrh	r3, [r3, #2]
90011abe:	b29b      	uxth	r3, r3
90011ac0:	3309      	adds	r3, #9
90011ac2:	b29a      	uxth	r2, r3
90011ac4:	693b      	ldr	r3, [r7, #16]
90011ac6:	805a      	strh	r2, [r3, #2]
90011ac8:	e006      	b.n	90011ad8 <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
90011aca:	693b      	ldr	r3, [r7, #16]
90011acc:	885b      	ldrh	r3, [r3, #2]
90011ace:	b29b      	uxth	r3, r3
90011ad0:	3308      	adds	r3, #8
90011ad2:	b29a      	uxth	r2, r3
90011ad4:	693b      	ldr	r3, [r7, #16]
90011ad6:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
90011ad8:	68fb      	ldr	r3, [r7, #12]
90011ada:	22ff      	movs	r2, #255	; 0xff
90011adc:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
90011ade:	68fb      	ldr	r3, [r7, #12]
90011ae0:	2200      	movs	r2, #0
90011ae2:	729a      	strb	r2, [r3, #10]
90011ae4:	2200      	movs	r2, #0
90011ae6:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
90011ae8:	683b      	ldr	r3, [r7, #0]
90011aea:	9302      	str	r3, [sp, #8]
90011aec:	2301      	movs	r3, #1
90011aee:	9301      	str	r3, [sp, #4]
90011af0:	2300      	movs	r3, #0
90011af2:	9300      	str	r3, [sp, #0]
90011af4:	23ff      	movs	r3, #255	; 0xff
90011af6:	2200      	movs	r2, #0
90011af8:	69f9      	ldr	r1, [r7, #28]
90011afa:	6878      	ldr	r0, [r7, #4]
90011afc:	f000 fa80 	bl	90012000 <ip4_output_if>
90011b00:	4603      	mov	r3, r0
90011b02:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
90011b04:	e001      	b.n	90011b0a <icmp_input+0x1ee>
      break;
90011b06:	bf00      	nop
90011b08:	e000      	b.n	90011b0c <icmp_input+0x1f0>
      break;
90011b0a:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
90011b0c:	6878      	ldr	r0, [r7, #4]
90011b0e:	f7f8 f991 	bl	90009e34 <pbuf_free>
  return;
90011b12:	e013      	b.n	90011b3c <icmp_input+0x220>
    goto lenerr;
90011b14:	bf00      	nop
90011b16:	e002      	b.n	90011b1e <icmp_input+0x202>
    goto lenerr;
90011b18:	bf00      	nop
90011b1a:	e000      	b.n	90011b1e <icmp_input+0x202>
        goto lenerr;
90011b1c:	bf00      	nop
lenerr:
  pbuf_free(p);
90011b1e:	6878      	ldr	r0, [r7, #4]
90011b20:	f7f8 f988 	bl	90009e34 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
90011b24:	e00a      	b.n	90011b3c <icmp_input+0x220>
        goto icmperr;
90011b26:	bf00      	nop
90011b28:	e004      	b.n	90011b34 <icmp_input+0x218>
        goto icmperr;
90011b2a:	bf00      	nop
90011b2c:	e002      	b.n	90011b34 <icmp_input+0x218>
          goto icmperr;
90011b2e:	bf00      	nop
90011b30:	e000      	b.n	90011b34 <icmp_input+0x218>
          goto icmperr;
90011b32:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
90011b34:	6878      	ldr	r0, [r7, #4]
90011b36:	f7f8 f97d 	bl	90009e34 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
90011b3a:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
90011b3c:	3728      	adds	r7, #40	; 0x28
90011b3e:	46bd      	mov	sp, r7
90011b40:	bd80      	pop	{r7, pc}
90011b42:	bf00      	nop
90011b44:	2400df20 	.word	0x2400df20
90011b48:	2400df34 	.word	0x2400df34
90011b4c:	90016e10 	.word	0x90016e10
90011b50:	90016e48 	.word	0x90016e48
90011b54:	90016e80 	.word	0x90016e80
90011b58:	90016ea8 	.word	0x90016ea8

90011b5c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
90011b5c:	b580      	push	{r7, lr}
90011b5e:	b082      	sub	sp, #8
90011b60:	af00      	add	r7, sp, #0
90011b62:	6078      	str	r0, [r7, #4]
90011b64:	460b      	mov	r3, r1
90011b66:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
90011b68:	78fb      	ldrb	r3, [r7, #3]
90011b6a:	461a      	mov	r2, r3
90011b6c:	2103      	movs	r1, #3
90011b6e:	6878      	ldr	r0, [r7, #4]
90011b70:	f000 f814 	bl	90011b9c <icmp_send_response>
}
90011b74:	bf00      	nop
90011b76:	3708      	adds	r7, #8
90011b78:	46bd      	mov	sp, r7
90011b7a:	bd80      	pop	{r7, pc}

90011b7c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
90011b7c:	b580      	push	{r7, lr}
90011b7e:	b082      	sub	sp, #8
90011b80:	af00      	add	r7, sp, #0
90011b82:	6078      	str	r0, [r7, #4]
90011b84:	460b      	mov	r3, r1
90011b86:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
90011b88:	78fb      	ldrb	r3, [r7, #3]
90011b8a:	461a      	mov	r2, r3
90011b8c:	210b      	movs	r1, #11
90011b8e:	6878      	ldr	r0, [r7, #4]
90011b90:	f000 f804 	bl	90011b9c <icmp_send_response>
}
90011b94:	bf00      	nop
90011b96:	3708      	adds	r7, #8
90011b98:	46bd      	mov	sp, r7
90011b9a:	bd80      	pop	{r7, pc}

90011b9c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
90011b9c:	b580      	push	{r7, lr}
90011b9e:	b08c      	sub	sp, #48	; 0x30
90011ba0:	af04      	add	r7, sp, #16
90011ba2:	6078      	str	r0, [r7, #4]
90011ba4:	460b      	mov	r3, r1
90011ba6:	70fb      	strb	r3, [r7, #3]
90011ba8:	4613      	mov	r3, r2
90011baa:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
90011bac:	f44f 7220 	mov.w	r2, #640	; 0x280
90011bb0:	2124      	movs	r1, #36	; 0x24
90011bb2:	2022      	movs	r0, #34	; 0x22
90011bb4:	f7f7 fe5a 	bl	9000986c <pbuf_alloc>
90011bb8:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
90011bba:	69fb      	ldr	r3, [r7, #28]
90011bbc:	2b00      	cmp	r3, #0
90011bbe:	d056      	beq.n	90011c6e <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
90011bc0:	69fb      	ldr	r3, [r7, #28]
90011bc2:	895b      	ldrh	r3, [r3, #10]
90011bc4:	2b23      	cmp	r3, #35	; 0x23
90011bc6:	d806      	bhi.n	90011bd6 <icmp_send_response+0x3a>
90011bc8:	4b2b      	ldr	r3, [pc, #172]	; (90011c78 <icmp_send_response+0xdc>)
90011bca:	f44f 72b4 	mov.w	r2, #360	; 0x168
90011bce:	492b      	ldr	r1, [pc, #172]	; (90011c7c <icmp_send_response+0xe0>)
90011bd0:	482b      	ldr	r0, [pc, #172]	; (90011c80 <icmp_send_response+0xe4>)
90011bd2:	f001 fd31 	bl	90013638 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
90011bd6:	687b      	ldr	r3, [r7, #4]
90011bd8:	685b      	ldr	r3, [r3, #4]
90011bda:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
90011bdc:	69fb      	ldr	r3, [r7, #28]
90011bde:	685b      	ldr	r3, [r3, #4]
90011be0:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
90011be2:	697b      	ldr	r3, [r7, #20]
90011be4:	78fa      	ldrb	r2, [r7, #3]
90011be6:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
90011be8:	697b      	ldr	r3, [r7, #20]
90011bea:	78ba      	ldrb	r2, [r7, #2]
90011bec:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
90011bee:	697b      	ldr	r3, [r7, #20]
90011bf0:	2200      	movs	r2, #0
90011bf2:	711a      	strb	r2, [r3, #4]
90011bf4:	2200      	movs	r2, #0
90011bf6:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
90011bf8:	697b      	ldr	r3, [r7, #20]
90011bfa:	2200      	movs	r2, #0
90011bfc:	719a      	strb	r2, [r3, #6]
90011bfe:	2200      	movs	r2, #0
90011c00:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
90011c02:	69fb      	ldr	r3, [r7, #28]
90011c04:	685b      	ldr	r3, [r3, #4]
90011c06:	f103 0008 	add.w	r0, r3, #8
90011c0a:	687b      	ldr	r3, [r7, #4]
90011c0c:	685b      	ldr	r3, [r3, #4]
90011c0e:	221c      	movs	r2, #28
90011c10:	4619      	mov	r1, r3
90011c12:	f001 fc66 	bl	900134e2 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
90011c16:	69bb      	ldr	r3, [r7, #24]
90011c18:	68db      	ldr	r3, [r3, #12]
90011c1a:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
90011c1c:	f107 030c 	add.w	r3, r7, #12
90011c20:	4618      	mov	r0, r3
90011c22:	f000 f82f 	bl	90011c84 <ip4_route>
90011c26:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
90011c28:	693b      	ldr	r3, [r7, #16]
90011c2a:	2b00      	cmp	r3, #0
90011c2c:	d01b      	beq.n	90011c66 <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
90011c2e:	697b      	ldr	r3, [r7, #20]
90011c30:	2200      	movs	r2, #0
90011c32:	709a      	strb	r2, [r3, #2]
90011c34:	2200      	movs	r2, #0
90011c36:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
90011c38:	69fb      	ldr	r3, [r7, #28]
90011c3a:	895b      	ldrh	r3, [r3, #10]
90011c3c:	4619      	mov	r1, r3
90011c3e:	6978      	ldr	r0, [r7, #20]
90011c40:	f7f6 fcc9 	bl	900085d6 <inet_chksum>
90011c44:	4603      	mov	r3, r0
90011c46:	461a      	mov	r2, r3
90011c48:	697b      	ldr	r3, [r7, #20]
90011c4a:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
90011c4c:	f107 020c 	add.w	r2, r7, #12
90011c50:	693b      	ldr	r3, [r7, #16]
90011c52:	9302      	str	r3, [sp, #8]
90011c54:	2301      	movs	r3, #1
90011c56:	9301      	str	r3, [sp, #4]
90011c58:	2300      	movs	r3, #0
90011c5a:	9300      	str	r3, [sp, #0]
90011c5c:	23ff      	movs	r3, #255	; 0xff
90011c5e:	2100      	movs	r1, #0
90011c60:	69f8      	ldr	r0, [r7, #28]
90011c62:	f000 f9cd 	bl	90012000 <ip4_output_if>
  }
  pbuf_free(q);
90011c66:	69f8      	ldr	r0, [r7, #28]
90011c68:	f7f8 f8e4 	bl	90009e34 <pbuf_free>
90011c6c:	e000      	b.n	90011c70 <icmp_send_response+0xd4>
    return;
90011c6e:	bf00      	nop
}
90011c70:	3720      	adds	r7, #32
90011c72:	46bd      	mov	sp, r7
90011c74:	bd80      	pop	{r7, pc}
90011c76:	bf00      	nop
90011c78:	90016e10 	.word	0x90016e10
90011c7c:	90016edc 	.word	0x90016edc
90011c80:	90016e80 	.word	0x90016e80

90011c84 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
90011c84:	b480      	push	{r7}
90011c86:	b085      	sub	sp, #20
90011c88:	af00      	add	r7, sp, #0
90011c8a:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
90011c8c:	4b33      	ldr	r3, [pc, #204]	; (90011d5c <ip4_route+0xd8>)
90011c8e:	681b      	ldr	r3, [r3, #0]
90011c90:	60fb      	str	r3, [r7, #12]
90011c92:	e036      	b.n	90011d02 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
90011c94:	68fb      	ldr	r3, [r7, #12]
90011c96:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
90011c9a:	f003 0301 	and.w	r3, r3, #1
90011c9e:	b2db      	uxtb	r3, r3
90011ca0:	2b00      	cmp	r3, #0
90011ca2:	d02b      	beq.n	90011cfc <ip4_route+0x78>
90011ca4:	68fb      	ldr	r3, [r7, #12]
90011ca6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
90011caa:	089b      	lsrs	r3, r3, #2
90011cac:	f003 0301 	and.w	r3, r3, #1
90011cb0:	b2db      	uxtb	r3, r3
90011cb2:	2b00      	cmp	r3, #0
90011cb4:	d022      	beq.n	90011cfc <ip4_route+0x78>
90011cb6:	68fb      	ldr	r3, [r7, #12]
90011cb8:	3304      	adds	r3, #4
90011cba:	681b      	ldr	r3, [r3, #0]
90011cbc:	2b00      	cmp	r3, #0
90011cbe:	d01d      	beq.n	90011cfc <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
90011cc0:	687b      	ldr	r3, [r7, #4]
90011cc2:	681a      	ldr	r2, [r3, #0]
90011cc4:	68fb      	ldr	r3, [r7, #12]
90011cc6:	3304      	adds	r3, #4
90011cc8:	681b      	ldr	r3, [r3, #0]
90011cca:	405a      	eors	r2, r3
90011ccc:	68fb      	ldr	r3, [r7, #12]
90011cce:	3308      	adds	r3, #8
90011cd0:	681b      	ldr	r3, [r3, #0]
90011cd2:	4013      	ands	r3, r2
90011cd4:	2b00      	cmp	r3, #0
90011cd6:	d101      	bne.n	90011cdc <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
90011cd8:	68fb      	ldr	r3, [r7, #12]
90011cda:	e038      	b.n	90011d4e <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
90011cdc:	68fb      	ldr	r3, [r7, #12]
90011cde:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
90011ce2:	f003 0302 	and.w	r3, r3, #2
90011ce6:	2b00      	cmp	r3, #0
90011ce8:	d108      	bne.n	90011cfc <ip4_route+0x78>
90011cea:	687b      	ldr	r3, [r7, #4]
90011cec:	681a      	ldr	r2, [r3, #0]
90011cee:	68fb      	ldr	r3, [r7, #12]
90011cf0:	330c      	adds	r3, #12
90011cf2:	681b      	ldr	r3, [r3, #0]
90011cf4:	429a      	cmp	r2, r3
90011cf6:	d101      	bne.n	90011cfc <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
90011cf8:	68fb      	ldr	r3, [r7, #12]
90011cfa:	e028      	b.n	90011d4e <ip4_route+0xca>
  NETIF_FOREACH(netif) {
90011cfc:	68fb      	ldr	r3, [r7, #12]
90011cfe:	681b      	ldr	r3, [r3, #0]
90011d00:	60fb      	str	r3, [r7, #12]
90011d02:	68fb      	ldr	r3, [r7, #12]
90011d04:	2b00      	cmp	r3, #0
90011d06:	d1c5      	bne.n	90011c94 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
90011d08:	4b15      	ldr	r3, [pc, #84]	; (90011d60 <ip4_route+0xdc>)
90011d0a:	681b      	ldr	r3, [r3, #0]
90011d0c:	2b00      	cmp	r3, #0
90011d0e:	d01a      	beq.n	90011d46 <ip4_route+0xc2>
90011d10:	4b13      	ldr	r3, [pc, #76]	; (90011d60 <ip4_route+0xdc>)
90011d12:	681b      	ldr	r3, [r3, #0]
90011d14:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
90011d18:	f003 0301 	and.w	r3, r3, #1
90011d1c:	2b00      	cmp	r3, #0
90011d1e:	d012      	beq.n	90011d46 <ip4_route+0xc2>
90011d20:	4b0f      	ldr	r3, [pc, #60]	; (90011d60 <ip4_route+0xdc>)
90011d22:	681b      	ldr	r3, [r3, #0]
90011d24:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
90011d28:	f003 0304 	and.w	r3, r3, #4
90011d2c:	2b00      	cmp	r3, #0
90011d2e:	d00a      	beq.n	90011d46 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
90011d30:	4b0b      	ldr	r3, [pc, #44]	; (90011d60 <ip4_route+0xdc>)
90011d32:	681b      	ldr	r3, [r3, #0]
90011d34:	3304      	adds	r3, #4
90011d36:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
90011d38:	2b00      	cmp	r3, #0
90011d3a:	d004      	beq.n	90011d46 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
90011d3c:	687b      	ldr	r3, [r7, #4]
90011d3e:	681b      	ldr	r3, [r3, #0]
90011d40:	b2db      	uxtb	r3, r3
90011d42:	2b7f      	cmp	r3, #127	; 0x7f
90011d44:	d101      	bne.n	90011d4a <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
90011d46:	2300      	movs	r3, #0
90011d48:	e001      	b.n	90011d4e <ip4_route+0xca>
  }

  return netif_default;
90011d4a:	4b05      	ldr	r3, [pc, #20]	; (90011d60 <ip4_route+0xdc>)
90011d4c:	681b      	ldr	r3, [r3, #0]
}
90011d4e:	4618      	mov	r0, r3
90011d50:	3714      	adds	r7, #20
90011d52:	46bd      	mov	sp, r7
90011d54:	f85d 7b04 	ldr.w	r7, [sp], #4
90011d58:	4770      	bx	lr
90011d5a:	bf00      	nop
90011d5c:	24011014 	.word	0x24011014
90011d60:	24011018 	.word	0x24011018

90011d64 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
90011d64:	b580      	push	{r7, lr}
90011d66:	b082      	sub	sp, #8
90011d68:	af00      	add	r7, sp, #0
90011d6a:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
90011d6c:	687b      	ldr	r3, [r7, #4]
90011d6e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
90011d72:	f003 0301 	and.w	r3, r3, #1
90011d76:	b2db      	uxtb	r3, r3
90011d78:	2b00      	cmp	r3, #0
90011d7a:	d016      	beq.n	90011daa <ip4_input_accept+0x46>
90011d7c:	687b      	ldr	r3, [r7, #4]
90011d7e:	3304      	adds	r3, #4
90011d80:	681b      	ldr	r3, [r3, #0]
90011d82:	2b00      	cmp	r3, #0
90011d84:	d011      	beq.n	90011daa <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
90011d86:	4b0b      	ldr	r3, [pc, #44]	; (90011db4 <ip4_input_accept+0x50>)
90011d88:	695a      	ldr	r2, [r3, #20]
90011d8a:	687b      	ldr	r3, [r7, #4]
90011d8c:	3304      	adds	r3, #4
90011d8e:	681b      	ldr	r3, [r3, #0]
90011d90:	429a      	cmp	r2, r3
90011d92:	d008      	beq.n	90011da6 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
90011d94:	4b07      	ldr	r3, [pc, #28]	; (90011db4 <ip4_input_accept+0x50>)
90011d96:	695b      	ldr	r3, [r3, #20]
90011d98:	6879      	ldr	r1, [r7, #4]
90011d9a:	4618      	mov	r0, r3
90011d9c:	f000 fa08 	bl	900121b0 <ip4_addr_isbroadcast_u32>
90011da0:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
90011da2:	2b00      	cmp	r3, #0
90011da4:	d001      	beq.n	90011daa <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
90011da6:	2301      	movs	r3, #1
90011da8:	e000      	b.n	90011dac <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
90011daa:	2300      	movs	r3, #0
}
90011dac:	4618      	mov	r0, r3
90011dae:	3708      	adds	r7, #8
90011db0:	46bd      	mov	sp, r7
90011db2:	bd80      	pop	{r7, pc}
90011db4:	2400df20 	.word	0x2400df20

90011db8 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
90011db8:	b580      	push	{r7, lr}
90011dba:	b086      	sub	sp, #24
90011dbc:	af00      	add	r7, sp, #0
90011dbe:	6078      	str	r0, [r7, #4]
90011dc0:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
90011dc2:	687b      	ldr	r3, [r7, #4]
90011dc4:	685b      	ldr	r3, [r3, #4]
90011dc6:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
90011dc8:	697b      	ldr	r3, [r7, #20]
90011dca:	781b      	ldrb	r3, [r3, #0]
90011dcc:	091b      	lsrs	r3, r3, #4
90011dce:	b2db      	uxtb	r3, r3
90011dd0:	2b04      	cmp	r3, #4
90011dd2:	d004      	beq.n	90011dde <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
90011dd4:	6878      	ldr	r0, [r7, #4]
90011dd6:	f7f8 f82d 	bl	90009e34 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
90011dda:	2300      	movs	r3, #0
90011ddc:	e107      	b.n	90011fee <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
90011dde:	697b      	ldr	r3, [r7, #20]
90011de0:	781b      	ldrb	r3, [r3, #0]
90011de2:	f003 030f 	and.w	r3, r3, #15
90011de6:	b2db      	uxtb	r3, r3
90011de8:	009b      	lsls	r3, r3, #2
90011dea:	b2db      	uxtb	r3, r3
90011dec:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
90011dee:	697b      	ldr	r3, [r7, #20]
90011df0:	885b      	ldrh	r3, [r3, #2]
90011df2:	b29b      	uxth	r3, r3
90011df4:	4618      	mov	r0, r3
90011df6:	f7f6 fb2d 	bl	90008454 <lwip_htons>
90011dfa:	4603      	mov	r3, r0
90011dfc:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
90011dfe:	687b      	ldr	r3, [r7, #4]
90011e00:	891b      	ldrh	r3, [r3, #8]
90011e02:	89ba      	ldrh	r2, [r7, #12]
90011e04:	429a      	cmp	r2, r3
90011e06:	d204      	bcs.n	90011e12 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
90011e08:	89bb      	ldrh	r3, [r7, #12]
90011e0a:	4619      	mov	r1, r3
90011e0c:	6878      	ldr	r0, [r7, #4]
90011e0e:	f7f7 fe8b 	bl	90009b28 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
90011e12:	687b      	ldr	r3, [r7, #4]
90011e14:	895b      	ldrh	r3, [r3, #10]
90011e16:	89fa      	ldrh	r2, [r7, #14]
90011e18:	429a      	cmp	r2, r3
90011e1a:	d807      	bhi.n	90011e2c <ip4_input+0x74>
90011e1c:	687b      	ldr	r3, [r7, #4]
90011e1e:	891b      	ldrh	r3, [r3, #8]
90011e20:	89ba      	ldrh	r2, [r7, #12]
90011e22:	429a      	cmp	r2, r3
90011e24:	d802      	bhi.n	90011e2c <ip4_input+0x74>
90011e26:	89fb      	ldrh	r3, [r7, #14]
90011e28:	2b13      	cmp	r3, #19
90011e2a:	d804      	bhi.n	90011e36 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
90011e2c:	6878      	ldr	r0, [r7, #4]
90011e2e:	f7f8 f801 	bl	90009e34 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
90011e32:	2300      	movs	r3, #0
90011e34:	e0db      	b.n	90011fee <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
90011e36:	697b      	ldr	r3, [r7, #20]
90011e38:	691b      	ldr	r3, [r3, #16]
90011e3a:	4a6f      	ldr	r2, [pc, #444]	; (90011ff8 <ip4_input+0x240>)
90011e3c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
90011e3e:	697b      	ldr	r3, [r7, #20]
90011e40:	68db      	ldr	r3, [r3, #12]
90011e42:	4a6d      	ldr	r2, [pc, #436]	; (90011ff8 <ip4_input+0x240>)
90011e44:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
90011e46:	4b6c      	ldr	r3, [pc, #432]	; (90011ff8 <ip4_input+0x240>)
90011e48:	695b      	ldr	r3, [r3, #20]
90011e4a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
90011e4e:	2be0      	cmp	r3, #224	; 0xe0
90011e50:	d112      	bne.n	90011e78 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
90011e52:	683b      	ldr	r3, [r7, #0]
90011e54:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
90011e58:	f003 0301 	and.w	r3, r3, #1
90011e5c:	b2db      	uxtb	r3, r3
90011e5e:	2b00      	cmp	r3, #0
90011e60:	d007      	beq.n	90011e72 <ip4_input+0xba>
90011e62:	683b      	ldr	r3, [r7, #0]
90011e64:	3304      	adds	r3, #4
90011e66:	681b      	ldr	r3, [r3, #0]
90011e68:	2b00      	cmp	r3, #0
90011e6a:	d002      	beq.n	90011e72 <ip4_input+0xba>
      netif = inp;
90011e6c:	683b      	ldr	r3, [r7, #0]
90011e6e:	613b      	str	r3, [r7, #16]
90011e70:	e02a      	b.n	90011ec8 <ip4_input+0x110>
    } else {
      netif = NULL;
90011e72:	2300      	movs	r3, #0
90011e74:	613b      	str	r3, [r7, #16]
90011e76:	e027      	b.n	90011ec8 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
90011e78:	6838      	ldr	r0, [r7, #0]
90011e7a:	f7ff ff73 	bl	90011d64 <ip4_input_accept>
90011e7e:	4603      	mov	r3, r0
90011e80:	2b00      	cmp	r3, #0
90011e82:	d002      	beq.n	90011e8a <ip4_input+0xd2>
      netif = inp;
90011e84:	683b      	ldr	r3, [r7, #0]
90011e86:	613b      	str	r3, [r7, #16]
90011e88:	e01e      	b.n	90011ec8 <ip4_input+0x110>
    } else {
      netif = NULL;
90011e8a:	2300      	movs	r3, #0
90011e8c:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
90011e8e:	4b5a      	ldr	r3, [pc, #360]	; (90011ff8 <ip4_input+0x240>)
90011e90:	695b      	ldr	r3, [r3, #20]
90011e92:	b2db      	uxtb	r3, r3
90011e94:	2b7f      	cmp	r3, #127	; 0x7f
90011e96:	d017      	beq.n	90011ec8 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
90011e98:	4b58      	ldr	r3, [pc, #352]	; (90011ffc <ip4_input+0x244>)
90011e9a:	681b      	ldr	r3, [r3, #0]
90011e9c:	613b      	str	r3, [r7, #16]
90011e9e:	e00e      	b.n	90011ebe <ip4_input+0x106>
          if (netif == inp) {
90011ea0:	693a      	ldr	r2, [r7, #16]
90011ea2:	683b      	ldr	r3, [r7, #0]
90011ea4:	429a      	cmp	r2, r3
90011ea6:	d006      	beq.n	90011eb6 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
90011ea8:	6938      	ldr	r0, [r7, #16]
90011eaa:	f7ff ff5b 	bl	90011d64 <ip4_input_accept>
90011eae:	4603      	mov	r3, r0
90011eb0:	2b00      	cmp	r3, #0
90011eb2:	d108      	bne.n	90011ec6 <ip4_input+0x10e>
90011eb4:	e000      	b.n	90011eb8 <ip4_input+0x100>
            continue;
90011eb6:	bf00      	nop
        NETIF_FOREACH(netif) {
90011eb8:	693b      	ldr	r3, [r7, #16]
90011eba:	681b      	ldr	r3, [r3, #0]
90011ebc:	613b      	str	r3, [r7, #16]
90011ebe:	693b      	ldr	r3, [r7, #16]
90011ec0:	2b00      	cmp	r3, #0
90011ec2:	d1ed      	bne.n	90011ea0 <ip4_input+0xe8>
90011ec4:	e000      	b.n	90011ec8 <ip4_input+0x110>
            break;
90011ec6:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
90011ec8:	4b4b      	ldr	r3, [pc, #300]	; (90011ff8 <ip4_input+0x240>)
90011eca:	691b      	ldr	r3, [r3, #16]
90011ecc:	6839      	ldr	r1, [r7, #0]
90011ece:	4618      	mov	r0, r3
90011ed0:	f000 f96e 	bl	900121b0 <ip4_addr_isbroadcast_u32>
90011ed4:	4603      	mov	r3, r0
90011ed6:	2b00      	cmp	r3, #0
90011ed8:	d105      	bne.n	90011ee6 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
90011eda:	4b47      	ldr	r3, [pc, #284]	; (90011ff8 <ip4_input+0x240>)
90011edc:	691b      	ldr	r3, [r3, #16]
90011ede:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
90011ee2:	2be0      	cmp	r3, #224	; 0xe0
90011ee4:	d104      	bne.n	90011ef0 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
90011ee6:	6878      	ldr	r0, [r7, #4]
90011ee8:	f7f7 ffa4 	bl	90009e34 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
90011eec:	2300      	movs	r3, #0
90011eee:	e07e      	b.n	90011fee <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
90011ef0:	693b      	ldr	r3, [r7, #16]
90011ef2:	2b00      	cmp	r3, #0
90011ef4:	d104      	bne.n	90011f00 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
90011ef6:	6878      	ldr	r0, [r7, #4]
90011ef8:	f7f7 ff9c 	bl	90009e34 <pbuf_free>
    return ERR_OK;
90011efc:	2300      	movs	r3, #0
90011efe:	e076      	b.n	90011fee <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
90011f00:	697b      	ldr	r3, [r7, #20]
90011f02:	88db      	ldrh	r3, [r3, #6]
90011f04:	b29b      	uxth	r3, r3
90011f06:	461a      	mov	r2, r3
90011f08:	f64f 733f 	movw	r3, #65343	; 0xff3f
90011f0c:	4013      	ands	r3, r2
90011f0e:	2b00      	cmp	r3, #0
90011f10:	d00b      	beq.n	90011f2a <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
90011f12:	6878      	ldr	r0, [r7, #4]
90011f14:	f000 fc92 	bl	9001283c <ip4_reass>
90011f18:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
90011f1a:	687b      	ldr	r3, [r7, #4]
90011f1c:	2b00      	cmp	r3, #0
90011f1e:	d101      	bne.n	90011f24 <ip4_input+0x16c>
      return ERR_OK;
90011f20:	2300      	movs	r3, #0
90011f22:	e064      	b.n	90011fee <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
90011f24:	687b      	ldr	r3, [r7, #4]
90011f26:	685b      	ldr	r3, [r3, #4]
90011f28:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
90011f2a:	4a33      	ldr	r2, [pc, #204]	; (90011ff8 <ip4_input+0x240>)
90011f2c:	693b      	ldr	r3, [r7, #16]
90011f2e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
90011f30:	4a31      	ldr	r2, [pc, #196]	; (90011ff8 <ip4_input+0x240>)
90011f32:	683b      	ldr	r3, [r7, #0]
90011f34:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
90011f36:	4a30      	ldr	r2, [pc, #192]	; (90011ff8 <ip4_input+0x240>)
90011f38:	697b      	ldr	r3, [r7, #20]
90011f3a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
90011f3c:	697b      	ldr	r3, [r7, #20]
90011f3e:	781b      	ldrb	r3, [r3, #0]
90011f40:	f003 030f 	and.w	r3, r3, #15
90011f44:	b2db      	uxtb	r3, r3
90011f46:	009b      	lsls	r3, r3, #2
90011f48:	b2db      	uxtb	r3, r3
90011f4a:	b29a      	uxth	r2, r3
90011f4c:	4b2a      	ldr	r3, [pc, #168]	; (90011ff8 <ip4_input+0x240>)
90011f4e:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
90011f50:	89fb      	ldrh	r3, [r7, #14]
90011f52:	4619      	mov	r1, r3
90011f54:	6878      	ldr	r0, [r7, #4]
90011f56:	f7f7 fee7 	bl	90009d28 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
90011f5a:	697b      	ldr	r3, [r7, #20]
90011f5c:	7a5b      	ldrb	r3, [r3, #9]
90011f5e:	2b11      	cmp	r3, #17
90011f60:	d006      	beq.n	90011f70 <ip4_input+0x1b8>
90011f62:	2b11      	cmp	r3, #17
90011f64:	dc13      	bgt.n	90011f8e <ip4_input+0x1d6>
90011f66:	2b01      	cmp	r3, #1
90011f68:	d00c      	beq.n	90011f84 <ip4_input+0x1cc>
90011f6a:	2b06      	cmp	r3, #6
90011f6c:	d005      	beq.n	90011f7a <ip4_input+0x1c2>
90011f6e:	e00e      	b.n	90011f8e <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
90011f70:	6839      	ldr	r1, [r7, #0]
90011f72:	6878      	ldr	r0, [r7, #4]
90011f74:	f7fe fc42 	bl	900107fc <udp_input>
        break;
90011f78:	e026      	b.n	90011fc8 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
90011f7a:	6839      	ldr	r1, [r7, #0]
90011f7c:	6878      	ldr	r0, [r7, #4]
90011f7e:	f7fa f833 	bl	9000bfe8 <tcp_input>
        break;
90011f82:	e021      	b.n	90011fc8 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
90011f84:	6839      	ldr	r1, [r7, #0]
90011f86:	6878      	ldr	r0, [r7, #4]
90011f88:	f7ff fcc8 	bl	9001191c <icmp_input>
        break;
90011f8c:	e01c      	b.n	90011fc8 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
90011f8e:	4b1a      	ldr	r3, [pc, #104]	; (90011ff8 <ip4_input+0x240>)
90011f90:	695b      	ldr	r3, [r3, #20]
90011f92:	6939      	ldr	r1, [r7, #16]
90011f94:	4618      	mov	r0, r3
90011f96:	f000 f90b 	bl	900121b0 <ip4_addr_isbroadcast_u32>
90011f9a:	4603      	mov	r3, r0
90011f9c:	2b00      	cmp	r3, #0
90011f9e:	d10f      	bne.n	90011fc0 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
90011fa0:	4b15      	ldr	r3, [pc, #84]	; (90011ff8 <ip4_input+0x240>)
90011fa2:	695b      	ldr	r3, [r3, #20]
90011fa4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
90011fa8:	2be0      	cmp	r3, #224	; 0xe0
90011faa:	d009      	beq.n	90011fc0 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
90011fac:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
90011fb0:	4619      	mov	r1, r3
90011fb2:	6878      	ldr	r0, [r7, #4]
90011fb4:	f7f7 ff2b 	bl	90009e0e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
90011fb8:	2102      	movs	r1, #2
90011fba:	6878      	ldr	r0, [r7, #4]
90011fbc:	f7ff fdce 	bl	90011b5c <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
90011fc0:	6878      	ldr	r0, [r7, #4]
90011fc2:	f7f7 ff37 	bl	90009e34 <pbuf_free>
        break;
90011fc6:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
90011fc8:	4b0b      	ldr	r3, [pc, #44]	; (90011ff8 <ip4_input+0x240>)
90011fca:	2200      	movs	r2, #0
90011fcc:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
90011fce:	4b0a      	ldr	r3, [pc, #40]	; (90011ff8 <ip4_input+0x240>)
90011fd0:	2200      	movs	r2, #0
90011fd2:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
90011fd4:	4b08      	ldr	r3, [pc, #32]	; (90011ff8 <ip4_input+0x240>)
90011fd6:	2200      	movs	r2, #0
90011fd8:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
90011fda:	4b07      	ldr	r3, [pc, #28]	; (90011ff8 <ip4_input+0x240>)
90011fdc:	2200      	movs	r2, #0
90011fde:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
90011fe0:	4b05      	ldr	r3, [pc, #20]	; (90011ff8 <ip4_input+0x240>)
90011fe2:	2200      	movs	r2, #0
90011fe4:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
90011fe6:	4b04      	ldr	r3, [pc, #16]	; (90011ff8 <ip4_input+0x240>)
90011fe8:	2200      	movs	r2, #0
90011fea:	615a      	str	r2, [r3, #20]

  return ERR_OK;
90011fec:	2300      	movs	r3, #0
}
90011fee:	4618      	mov	r0, r3
90011ff0:	3718      	adds	r7, #24
90011ff2:	46bd      	mov	sp, r7
90011ff4:	bd80      	pop	{r7, pc}
90011ff6:	bf00      	nop
90011ff8:	2400df20 	.word	0x2400df20
90011ffc:	24011014 	.word	0x24011014

90012000 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
90012000:	b580      	push	{r7, lr}
90012002:	b08a      	sub	sp, #40	; 0x28
90012004:	af04      	add	r7, sp, #16
90012006:	60f8      	str	r0, [r7, #12]
90012008:	60b9      	str	r1, [r7, #8]
9001200a:	607a      	str	r2, [r7, #4]
9001200c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
9001200e:	68bb      	ldr	r3, [r7, #8]
90012010:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
90012012:	687b      	ldr	r3, [r7, #4]
90012014:	2b00      	cmp	r3, #0
90012016:	d009      	beq.n	9001202c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
90012018:	68bb      	ldr	r3, [r7, #8]
9001201a:	2b00      	cmp	r3, #0
9001201c:	d003      	beq.n	90012026 <ip4_output_if+0x26>
9001201e:	68bb      	ldr	r3, [r7, #8]
90012020:	681b      	ldr	r3, [r3, #0]
90012022:	2b00      	cmp	r3, #0
90012024:	d102      	bne.n	9001202c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
90012026:	6abb      	ldr	r3, [r7, #40]	; 0x28
90012028:	3304      	adds	r3, #4
9001202a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
9001202c:	78fa      	ldrb	r2, [r7, #3]
9001202e:	6abb      	ldr	r3, [r7, #40]	; 0x28
90012030:	9302      	str	r3, [sp, #8]
90012032:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
90012036:	9301      	str	r3, [sp, #4]
90012038:	f897 3020 	ldrb.w	r3, [r7, #32]
9001203c:	9300      	str	r3, [sp, #0]
9001203e:	4613      	mov	r3, r2
90012040:	687a      	ldr	r2, [r7, #4]
90012042:	6979      	ldr	r1, [r7, #20]
90012044:	68f8      	ldr	r0, [r7, #12]
90012046:	f000 f805 	bl	90012054 <ip4_output_if_src>
9001204a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
9001204c:	4618      	mov	r0, r3
9001204e:	3718      	adds	r7, #24
90012050:	46bd      	mov	sp, r7
90012052:	bd80      	pop	{r7, pc}

90012054 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
90012054:	b580      	push	{r7, lr}
90012056:	b088      	sub	sp, #32
90012058:	af00      	add	r7, sp, #0
9001205a:	60f8      	str	r0, [r7, #12]
9001205c:	60b9      	str	r1, [r7, #8]
9001205e:	607a      	str	r2, [r7, #4]
90012060:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
90012062:	68fb      	ldr	r3, [r7, #12]
90012064:	7b9b      	ldrb	r3, [r3, #14]
90012066:	2b01      	cmp	r3, #1
90012068:	d006      	beq.n	90012078 <ip4_output_if_src+0x24>
9001206a:	4b4b      	ldr	r3, [pc, #300]	; (90012198 <ip4_output_if_src+0x144>)
9001206c:	f44f 7255 	mov.w	r2, #852	; 0x354
90012070:	494a      	ldr	r1, [pc, #296]	; (9001219c <ip4_output_if_src+0x148>)
90012072:	484b      	ldr	r0, [pc, #300]	; (900121a0 <ip4_output_if_src+0x14c>)
90012074:	f001 fae0 	bl	90013638 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
90012078:	687b      	ldr	r3, [r7, #4]
9001207a:	2b00      	cmp	r3, #0
9001207c:	d060      	beq.n	90012140 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
9001207e:	2314      	movs	r3, #20
90012080:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
90012082:	2114      	movs	r1, #20
90012084:	68f8      	ldr	r0, [r7, #12]
90012086:	f7f7 fe3f 	bl	90009d08 <pbuf_add_header>
9001208a:	4603      	mov	r3, r0
9001208c:	2b00      	cmp	r3, #0
9001208e:	d002      	beq.n	90012096 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
90012090:	f06f 0301 	mvn.w	r3, #1
90012094:	e07c      	b.n	90012190 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
90012096:	68fb      	ldr	r3, [r7, #12]
90012098:	685b      	ldr	r3, [r3, #4]
9001209a:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
9001209c:	68fb      	ldr	r3, [r7, #12]
9001209e:	895b      	ldrh	r3, [r3, #10]
900120a0:	2b13      	cmp	r3, #19
900120a2:	d806      	bhi.n	900120b2 <ip4_output_if_src+0x5e>
900120a4:	4b3c      	ldr	r3, [pc, #240]	; (90012198 <ip4_output_if_src+0x144>)
900120a6:	f44f 7262 	mov.w	r2, #904	; 0x388
900120aa:	493e      	ldr	r1, [pc, #248]	; (900121a4 <ip4_output_if_src+0x150>)
900120ac:	483c      	ldr	r0, [pc, #240]	; (900121a0 <ip4_output_if_src+0x14c>)
900120ae:	f001 fac3 	bl	90013638 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
900120b2:	69fb      	ldr	r3, [r7, #28]
900120b4:	78fa      	ldrb	r2, [r7, #3]
900120b6:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
900120b8:	69fb      	ldr	r3, [r7, #28]
900120ba:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
900120be:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
900120c0:	687b      	ldr	r3, [r7, #4]
900120c2:	681a      	ldr	r2, [r3, #0]
900120c4:	69fb      	ldr	r3, [r7, #28]
900120c6:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
900120c8:	8b7b      	ldrh	r3, [r7, #26]
900120ca:	089b      	lsrs	r3, r3, #2
900120cc:	b29b      	uxth	r3, r3
900120ce:	b2db      	uxtb	r3, r3
900120d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
900120d4:	b2da      	uxtb	r2, r3
900120d6:	69fb      	ldr	r3, [r7, #28]
900120d8:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
900120da:	69fb      	ldr	r3, [r7, #28]
900120dc:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
900120e0:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
900120e2:	68fb      	ldr	r3, [r7, #12]
900120e4:	891b      	ldrh	r3, [r3, #8]
900120e6:	4618      	mov	r0, r3
900120e8:	f7f6 f9b4 	bl	90008454 <lwip_htons>
900120ec:	4603      	mov	r3, r0
900120ee:	461a      	mov	r2, r3
900120f0:	69fb      	ldr	r3, [r7, #28]
900120f2:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
900120f4:	69fb      	ldr	r3, [r7, #28]
900120f6:	2200      	movs	r2, #0
900120f8:	719a      	strb	r2, [r3, #6]
900120fa:	2200      	movs	r2, #0
900120fc:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
900120fe:	4b2a      	ldr	r3, [pc, #168]	; (900121a8 <ip4_output_if_src+0x154>)
90012100:	881b      	ldrh	r3, [r3, #0]
90012102:	4618      	mov	r0, r3
90012104:	f7f6 f9a6 	bl	90008454 <lwip_htons>
90012108:	4603      	mov	r3, r0
9001210a:	461a      	mov	r2, r3
9001210c:	69fb      	ldr	r3, [r7, #28]
9001210e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
90012110:	4b25      	ldr	r3, [pc, #148]	; (900121a8 <ip4_output_if_src+0x154>)
90012112:	881b      	ldrh	r3, [r3, #0]
90012114:	3301      	adds	r3, #1
90012116:	b29a      	uxth	r2, r3
90012118:	4b23      	ldr	r3, [pc, #140]	; (900121a8 <ip4_output_if_src+0x154>)
9001211a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
9001211c:	68bb      	ldr	r3, [r7, #8]
9001211e:	2b00      	cmp	r3, #0
90012120:	d104      	bne.n	9001212c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
90012122:	4b22      	ldr	r3, [pc, #136]	; (900121ac <ip4_output_if_src+0x158>)
90012124:	681a      	ldr	r2, [r3, #0]
90012126:	69fb      	ldr	r3, [r7, #28]
90012128:	60da      	str	r2, [r3, #12]
9001212a:	e003      	b.n	90012134 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
9001212c:	68bb      	ldr	r3, [r7, #8]
9001212e:	681a      	ldr	r2, [r3, #0]
90012130:	69fb      	ldr	r3, [r7, #28]
90012132:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
90012134:	69fb      	ldr	r3, [r7, #28]
90012136:	2200      	movs	r2, #0
90012138:	729a      	strb	r2, [r3, #10]
9001213a:	2200      	movs	r2, #0
9001213c:	72da      	strb	r2, [r3, #11]
9001213e:	e00f      	b.n	90012160 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
90012140:	68fb      	ldr	r3, [r7, #12]
90012142:	895b      	ldrh	r3, [r3, #10]
90012144:	2b13      	cmp	r3, #19
90012146:	d802      	bhi.n	9001214e <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
90012148:	f06f 0301 	mvn.w	r3, #1
9001214c:	e020      	b.n	90012190 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
9001214e:	68fb      	ldr	r3, [r7, #12]
90012150:	685b      	ldr	r3, [r3, #4]
90012152:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
90012154:	69fb      	ldr	r3, [r7, #28]
90012156:	691b      	ldr	r3, [r3, #16]
90012158:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
9001215a:	f107 0314 	add.w	r3, r7, #20
9001215e:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
90012160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90012162:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
90012164:	2b00      	cmp	r3, #0
90012166:	d00c      	beq.n	90012182 <ip4_output_if_src+0x12e>
90012168:	68fb      	ldr	r3, [r7, #12]
9001216a:	891a      	ldrh	r2, [r3, #8]
9001216c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9001216e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
90012170:	429a      	cmp	r2, r3
90012172:	d906      	bls.n	90012182 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
90012174:	687a      	ldr	r2, [r7, #4]
90012176:	6b39      	ldr	r1, [r7, #48]	; 0x30
90012178:	68f8      	ldr	r0, [r7, #12]
9001217a:	f000 fd53 	bl	90012c24 <ip4_frag>
9001217e:	4603      	mov	r3, r0
90012180:	e006      	b.n	90012190 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
90012182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90012184:	695b      	ldr	r3, [r3, #20]
90012186:	687a      	ldr	r2, [r7, #4]
90012188:	68f9      	ldr	r1, [r7, #12]
9001218a:	6b38      	ldr	r0, [r7, #48]	; 0x30
9001218c:	4798      	blx	r3
9001218e:	4603      	mov	r3, r0
}
90012190:	4618      	mov	r0, r3
90012192:	3720      	adds	r7, #32
90012194:	46bd      	mov	sp, r7
90012196:	bd80      	pop	{r7, pc}
90012198:	90016f08 	.word	0x90016f08
9001219c:	90016f3c 	.word	0x90016f3c
900121a0:	90016f48 	.word	0x90016f48
900121a4:	90016f70 	.word	0x90016f70
900121a8:	24011172 	.word	0x24011172
900121ac:	900174d0 	.word	0x900174d0

900121b0 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
900121b0:	b480      	push	{r7}
900121b2:	b085      	sub	sp, #20
900121b4:	af00      	add	r7, sp, #0
900121b6:	6078      	str	r0, [r7, #4]
900121b8:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
900121ba:	687b      	ldr	r3, [r7, #4]
900121bc:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
900121be:	687b      	ldr	r3, [r7, #4]
900121c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
900121c4:	d002      	beq.n	900121cc <ip4_addr_isbroadcast_u32+0x1c>
900121c6:	687b      	ldr	r3, [r7, #4]
900121c8:	2b00      	cmp	r3, #0
900121ca:	d101      	bne.n	900121d0 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
900121cc:	2301      	movs	r3, #1
900121ce:	e02a      	b.n	90012226 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
900121d0:	683b      	ldr	r3, [r7, #0]
900121d2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
900121d6:	f003 0302 	and.w	r3, r3, #2
900121da:	2b00      	cmp	r3, #0
900121dc:	d101      	bne.n	900121e2 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
900121de:	2300      	movs	r3, #0
900121e0:	e021      	b.n	90012226 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
900121e2:	683b      	ldr	r3, [r7, #0]
900121e4:	3304      	adds	r3, #4
900121e6:	681b      	ldr	r3, [r3, #0]
900121e8:	687a      	ldr	r2, [r7, #4]
900121ea:	429a      	cmp	r2, r3
900121ec:	d101      	bne.n	900121f2 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
900121ee:	2300      	movs	r3, #0
900121f0:	e019      	b.n	90012226 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
900121f2:	68fa      	ldr	r2, [r7, #12]
900121f4:	683b      	ldr	r3, [r7, #0]
900121f6:	3304      	adds	r3, #4
900121f8:	681b      	ldr	r3, [r3, #0]
900121fa:	405a      	eors	r2, r3
900121fc:	683b      	ldr	r3, [r7, #0]
900121fe:	3308      	adds	r3, #8
90012200:	681b      	ldr	r3, [r3, #0]
90012202:	4013      	ands	r3, r2
90012204:	2b00      	cmp	r3, #0
90012206:	d10d      	bne.n	90012224 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
90012208:	683b      	ldr	r3, [r7, #0]
9001220a:	3308      	adds	r3, #8
9001220c:	681b      	ldr	r3, [r3, #0]
9001220e:	43da      	mvns	r2, r3
90012210:	687b      	ldr	r3, [r7, #4]
90012212:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
90012214:	683b      	ldr	r3, [r7, #0]
90012216:	3308      	adds	r3, #8
90012218:	681b      	ldr	r3, [r3, #0]
9001221a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
9001221c:	429a      	cmp	r2, r3
9001221e:	d101      	bne.n	90012224 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
90012220:	2301      	movs	r3, #1
90012222:	e000      	b.n	90012226 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
90012224:	2300      	movs	r3, #0
  }
}
90012226:	4618      	mov	r0, r3
90012228:	3714      	adds	r7, #20
9001222a:	46bd      	mov	sp, r7
9001222c:	f85d 7b04 	ldr.w	r7, [sp], #4
90012230:	4770      	bx	lr
	...

90012234 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
90012234:	b580      	push	{r7, lr}
90012236:	b084      	sub	sp, #16
90012238:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
9001223a:	2300      	movs	r3, #0
9001223c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
9001223e:	4b12      	ldr	r3, [pc, #72]	; (90012288 <ip_reass_tmr+0x54>)
90012240:	681b      	ldr	r3, [r3, #0]
90012242:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
90012244:	e018      	b.n	90012278 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
90012246:	68fb      	ldr	r3, [r7, #12]
90012248:	7fdb      	ldrb	r3, [r3, #31]
9001224a:	2b00      	cmp	r3, #0
9001224c:	d00b      	beq.n	90012266 <ip_reass_tmr+0x32>
      r->timer--;
9001224e:	68fb      	ldr	r3, [r7, #12]
90012250:	7fdb      	ldrb	r3, [r3, #31]
90012252:	3b01      	subs	r3, #1
90012254:	b2da      	uxtb	r2, r3
90012256:	68fb      	ldr	r3, [r7, #12]
90012258:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
9001225a:	68fb      	ldr	r3, [r7, #12]
9001225c:	60bb      	str	r3, [r7, #8]
      r = r->next;
9001225e:	68fb      	ldr	r3, [r7, #12]
90012260:	681b      	ldr	r3, [r3, #0]
90012262:	60fb      	str	r3, [r7, #12]
90012264:	e008      	b.n	90012278 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
90012266:	68fb      	ldr	r3, [r7, #12]
90012268:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
9001226a:	68fb      	ldr	r3, [r7, #12]
9001226c:	681b      	ldr	r3, [r3, #0]
9001226e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
90012270:	68b9      	ldr	r1, [r7, #8]
90012272:	6878      	ldr	r0, [r7, #4]
90012274:	f000 f80a 	bl	9001228c <ip_reass_free_complete_datagram>
  while (r != NULL) {
90012278:	68fb      	ldr	r3, [r7, #12]
9001227a:	2b00      	cmp	r3, #0
9001227c:	d1e3      	bne.n	90012246 <ip_reass_tmr+0x12>
    }
  }
}
9001227e:	bf00      	nop
90012280:	bf00      	nop
90012282:	3710      	adds	r7, #16
90012284:	46bd      	mov	sp, r7
90012286:	bd80      	pop	{r7, pc}
90012288:	24011174 	.word	0x24011174

9001228c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
9001228c:	b580      	push	{r7, lr}
9001228e:	b088      	sub	sp, #32
90012290:	af00      	add	r7, sp, #0
90012292:	6078      	str	r0, [r7, #4]
90012294:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
90012296:	2300      	movs	r3, #0
90012298:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
9001229a:	683a      	ldr	r2, [r7, #0]
9001229c:	687b      	ldr	r3, [r7, #4]
9001229e:	429a      	cmp	r2, r3
900122a0:	d105      	bne.n	900122ae <ip_reass_free_complete_datagram+0x22>
900122a2:	4b45      	ldr	r3, [pc, #276]	; (900123b8 <ip_reass_free_complete_datagram+0x12c>)
900122a4:	22ab      	movs	r2, #171	; 0xab
900122a6:	4945      	ldr	r1, [pc, #276]	; (900123bc <ip_reass_free_complete_datagram+0x130>)
900122a8:	4845      	ldr	r0, [pc, #276]	; (900123c0 <ip_reass_free_complete_datagram+0x134>)
900122aa:	f001 f9c5 	bl	90013638 <iprintf>
  if (prev != NULL) {
900122ae:	683b      	ldr	r3, [r7, #0]
900122b0:	2b00      	cmp	r3, #0
900122b2:	d00a      	beq.n	900122ca <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
900122b4:	683b      	ldr	r3, [r7, #0]
900122b6:	681b      	ldr	r3, [r3, #0]
900122b8:	687a      	ldr	r2, [r7, #4]
900122ba:	429a      	cmp	r2, r3
900122bc:	d005      	beq.n	900122ca <ip_reass_free_complete_datagram+0x3e>
900122be:	4b3e      	ldr	r3, [pc, #248]	; (900123b8 <ip_reass_free_complete_datagram+0x12c>)
900122c0:	22ad      	movs	r2, #173	; 0xad
900122c2:	4940      	ldr	r1, [pc, #256]	; (900123c4 <ip_reass_free_complete_datagram+0x138>)
900122c4:	483e      	ldr	r0, [pc, #248]	; (900123c0 <ip_reass_free_complete_datagram+0x134>)
900122c6:	f001 f9b7 	bl	90013638 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
900122ca:	687b      	ldr	r3, [r7, #4]
900122cc:	685b      	ldr	r3, [r3, #4]
900122ce:	685b      	ldr	r3, [r3, #4]
900122d0:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
900122d2:	697b      	ldr	r3, [r7, #20]
900122d4:	889b      	ldrh	r3, [r3, #4]
900122d6:	b29b      	uxth	r3, r3
900122d8:	2b00      	cmp	r3, #0
900122da:	d12a      	bne.n	90012332 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
900122dc:	687b      	ldr	r3, [r7, #4]
900122de:	685b      	ldr	r3, [r3, #4]
900122e0:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
900122e2:	697b      	ldr	r3, [r7, #20]
900122e4:	681a      	ldr	r2, [r3, #0]
900122e6:	687b      	ldr	r3, [r7, #4]
900122e8:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
900122ea:	69bb      	ldr	r3, [r7, #24]
900122ec:	6858      	ldr	r0, [r3, #4]
900122ee:	687b      	ldr	r3, [r7, #4]
900122f0:	3308      	adds	r3, #8
900122f2:	2214      	movs	r2, #20
900122f4:	4619      	mov	r1, r3
900122f6:	f001 f8f4 	bl	900134e2 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
900122fa:	2101      	movs	r1, #1
900122fc:	69b8      	ldr	r0, [r7, #24]
900122fe:	f7ff fc3d 	bl	90011b7c <icmp_time_exceeded>
    clen = pbuf_clen(p);
90012302:	69b8      	ldr	r0, [r7, #24]
90012304:	f7f7 fe24 	bl	90009f50 <pbuf_clen>
90012308:	4603      	mov	r3, r0
9001230a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
9001230c:	8bfa      	ldrh	r2, [r7, #30]
9001230e:	8a7b      	ldrh	r3, [r7, #18]
90012310:	4413      	add	r3, r2
90012312:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
90012316:	db05      	blt.n	90012324 <ip_reass_free_complete_datagram+0x98>
90012318:	4b27      	ldr	r3, [pc, #156]	; (900123b8 <ip_reass_free_complete_datagram+0x12c>)
9001231a:	22bc      	movs	r2, #188	; 0xbc
9001231c:	492a      	ldr	r1, [pc, #168]	; (900123c8 <ip_reass_free_complete_datagram+0x13c>)
9001231e:	4828      	ldr	r0, [pc, #160]	; (900123c0 <ip_reass_free_complete_datagram+0x134>)
90012320:	f001 f98a 	bl	90013638 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
90012324:	8bfa      	ldrh	r2, [r7, #30]
90012326:	8a7b      	ldrh	r3, [r7, #18]
90012328:	4413      	add	r3, r2
9001232a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
9001232c:	69b8      	ldr	r0, [r7, #24]
9001232e:	f7f7 fd81 	bl	90009e34 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
90012332:	687b      	ldr	r3, [r7, #4]
90012334:	685b      	ldr	r3, [r3, #4]
90012336:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
90012338:	e01f      	b.n	9001237a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
9001233a:	69bb      	ldr	r3, [r7, #24]
9001233c:	685b      	ldr	r3, [r3, #4]
9001233e:	617b      	str	r3, [r7, #20]
    pcur = p;
90012340:	69bb      	ldr	r3, [r7, #24]
90012342:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
90012344:	697b      	ldr	r3, [r7, #20]
90012346:	681b      	ldr	r3, [r3, #0]
90012348:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
9001234a:	68f8      	ldr	r0, [r7, #12]
9001234c:	f7f7 fe00 	bl	90009f50 <pbuf_clen>
90012350:	4603      	mov	r3, r0
90012352:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
90012354:	8bfa      	ldrh	r2, [r7, #30]
90012356:	8a7b      	ldrh	r3, [r7, #18]
90012358:	4413      	add	r3, r2
9001235a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
9001235e:	db05      	blt.n	9001236c <ip_reass_free_complete_datagram+0xe0>
90012360:	4b15      	ldr	r3, [pc, #84]	; (900123b8 <ip_reass_free_complete_datagram+0x12c>)
90012362:	22cc      	movs	r2, #204	; 0xcc
90012364:	4918      	ldr	r1, [pc, #96]	; (900123c8 <ip_reass_free_complete_datagram+0x13c>)
90012366:	4816      	ldr	r0, [pc, #88]	; (900123c0 <ip_reass_free_complete_datagram+0x134>)
90012368:	f001 f966 	bl	90013638 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
9001236c:	8bfa      	ldrh	r2, [r7, #30]
9001236e:	8a7b      	ldrh	r3, [r7, #18]
90012370:	4413      	add	r3, r2
90012372:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
90012374:	68f8      	ldr	r0, [r7, #12]
90012376:	f7f7 fd5d 	bl	90009e34 <pbuf_free>
  while (p != NULL) {
9001237a:	69bb      	ldr	r3, [r7, #24]
9001237c:	2b00      	cmp	r3, #0
9001237e:	d1dc      	bne.n	9001233a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
90012380:	6839      	ldr	r1, [r7, #0]
90012382:	6878      	ldr	r0, [r7, #4]
90012384:	f000 f8c2 	bl	9001250c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
90012388:	4b10      	ldr	r3, [pc, #64]	; (900123cc <ip_reass_free_complete_datagram+0x140>)
9001238a:	881b      	ldrh	r3, [r3, #0]
9001238c:	8bfa      	ldrh	r2, [r7, #30]
9001238e:	429a      	cmp	r2, r3
90012390:	d905      	bls.n	9001239e <ip_reass_free_complete_datagram+0x112>
90012392:	4b09      	ldr	r3, [pc, #36]	; (900123b8 <ip_reass_free_complete_datagram+0x12c>)
90012394:	22d2      	movs	r2, #210	; 0xd2
90012396:	490e      	ldr	r1, [pc, #56]	; (900123d0 <ip_reass_free_complete_datagram+0x144>)
90012398:	4809      	ldr	r0, [pc, #36]	; (900123c0 <ip_reass_free_complete_datagram+0x134>)
9001239a:	f001 f94d 	bl	90013638 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
9001239e:	4b0b      	ldr	r3, [pc, #44]	; (900123cc <ip_reass_free_complete_datagram+0x140>)
900123a0:	881a      	ldrh	r2, [r3, #0]
900123a2:	8bfb      	ldrh	r3, [r7, #30]
900123a4:	1ad3      	subs	r3, r2, r3
900123a6:	b29a      	uxth	r2, r3
900123a8:	4b08      	ldr	r3, [pc, #32]	; (900123cc <ip_reass_free_complete_datagram+0x140>)
900123aa:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
900123ac:	8bfb      	ldrh	r3, [r7, #30]
}
900123ae:	4618      	mov	r0, r3
900123b0:	3720      	adds	r7, #32
900123b2:	46bd      	mov	sp, r7
900123b4:	bd80      	pop	{r7, pc}
900123b6:	bf00      	nop
900123b8:	90016fa0 	.word	0x90016fa0
900123bc:	90016fdc 	.word	0x90016fdc
900123c0:	90016fe8 	.word	0x90016fe8
900123c4:	90017010 	.word	0x90017010
900123c8:	90017024 	.word	0x90017024
900123cc:	24011178 	.word	0x24011178
900123d0:	90017044 	.word	0x90017044

900123d4 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
900123d4:	b580      	push	{r7, lr}
900123d6:	b08a      	sub	sp, #40	; 0x28
900123d8:	af00      	add	r7, sp, #0
900123da:	6078      	str	r0, [r7, #4]
900123dc:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
900123de:	2300      	movs	r3, #0
900123e0:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
900123e2:	2300      	movs	r3, #0
900123e4:	623b      	str	r3, [r7, #32]
    prev = NULL;
900123e6:	2300      	movs	r3, #0
900123e8:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
900123ea:	2300      	movs	r3, #0
900123ec:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
900123ee:	2300      	movs	r3, #0
900123f0:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
900123f2:	4b28      	ldr	r3, [pc, #160]	; (90012494 <ip_reass_remove_oldest_datagram+0xc0>)
900123f4:	681b      	ldr	r3, [r3, #0]
900123f6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
900123f8:	e030      	b.n	9001245c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
900123fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
900123fc:	695a      	ldr	r2, [r3, #20]
900123fe:	687b      	ldr	r3, [r7, #4]
90012400:	68db      	ldr	r3, [r3, #12]
90012402:	429a      	cmp	r2, r3
90012404:	d10c      	bne.n	90012420 <ip_reass_remove_oldest_datagram+0x4c>
90012406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90012408:	699a      	ldr	r2, [r3, #24]
9001240a:	687b      	ldr	r3, [r7, #4]
9001240c:	691b      	ldr	r3, [r3, #16]
9001240e:	429a      	cmp	r2, r3
90012410:	d106      	bne.n	90012420 <ip_reass_remove_oldest_datagram+0x4c>
90012412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90012414:	899a      	ldrh	r2, [r3, #12]
90012416:	687b      	ldr	r3, [r7, #4]
90012418:	889b      	ldrh	r3, [r3, #4]
9001241a:	b29b      	uxth	r3, r3
9001241c:	429a      	cmp	r2, r3
9001241e:	d014      	beq.n	9001244a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
90012420:	693b      	ldr	r3, [r7, #16]
90012422:	3301      	adds	r3, #1
90012424:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
90012426:	6a3b      	ldr	r3, [r7, #32]
90012428:	2b00      	cmp	r3, #0
9001242a:	d104      	bne.n	90012436 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
9001242c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9001242e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
90012430:	69fb      	ldr	r3, [r7, #28]
90012432:	61bb      	str	r3, [r7, #24]
90012434:	e009      	b.n	9001244a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
90012436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90012438:	7fda      	ldrb	r2, [r3, #31]
9001243a:	6a3b      	ldr	r3, [r7, #32]
9001243c:	7fdb      	ldrb	r3, [r3, #31]
9001243e:	429a      	cmp	r2, r3
90012440:	d803      	bhi.n	9001244a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
90012442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90012444:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
90012446:	69fb      	ldr	r3, [r7, #28]
90012448:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
9001244a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9001244c:	681b      	ldr	r3, [r3, #0]
9001244e:	2b00      	cmp	r3, #0
90012450:	d001      	beq.n	90012456 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
90012452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90012454:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
90012456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90012458:	681b      	ldr	r3, [r3, #0]
9001245a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
9001245c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9001245e:	2b00      	cmp	r3, #0
90012460:	d1cb      	bne.n	900123fa <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
90012462:	6a3b      	ldr	r3, [r7, #32]
90012464:	2b00      	cmp	r3, #0
90012466:	d008      	beq.n	9001247a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
90012468:	69b9      	ldr	r1, [r7, #24]
9001246a:	6a38      	ldr	r0, [r7, #32]
9001246c:	f7ff ff0e 	bl	9001228c <ip_reass_free_complete_datagram>
90012470:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
90012472:	697a      	ldr	r2, [r7, #20]
90012474:	68fb      	ldr	r3, [r7, #12]
90012476:	4413      	add	r3, r2
90012478:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
9001247a:	697a      	ldr	r2, [r7, #20]
9001247c:	683b      	ldr	r3, [r7, #0]
9001247e:	429a      	cmp	r2, r3
90012480:	da02      	bge.n	90012488 <ip_reass_remove_oldest_datagram+0xb4>
90012482:	693b      	ldr	r3, [r7, #16]
90012484:	2b01      	cmp	r3, #1
90012486:	dcac      	bgt.n	900123e2 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
90012488:	697b      	ldr	r3, [r7, #20]
}
9001248a:	4618      	mov	r0, r3
9001248c:	3728      	adds	r7, #40	; 0x28
9001248e:	46bd      	mov	sp, r7
90012490:	bd80      	pop	{r7, pc}
90012492:	bf00      	nop
90012494:	24011174 	.word	0x24011174

90012498 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
90012498:	b580      	push	{r7, lr}
9001249a:	b084      	sub	sp, #16
9001249c:	af00      	add	r7, sp, #0
9001249e:	6078      	str	r0, [r7, #4]
900124a0:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
900124a2:	2004      	movs	r0, #4
900124a4:	f7f6 fdac 	bl	90009000 <memp_malloc>
900124a8:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
900124aa:	68fb      	ldr	r3, [r7, #12]
900124ac:	2b00      	cmp	r3, #0
900124ae:	d110      	bne.n	900124d2 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
900124b0:	6839      	ldr	r1, [r7, #0]
900124b2:	6878      	ldr	r0, [r7, #4]
900124b4:	f7ff ff8e 	bl	900123d4 <ip_reass_remove_oldest_datagram>
900124b8:	4602      	mov	r2, r0
900124ba:	683b      	ldr	r3, [r7, #0]
900124bc:	4293      	cmp	r3, r2
900124be:	dc03      	bgt.n	900124c8 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
900124c0:	2004      	movs	r0, #4
900124c2:	f7f6 fd9d 	bl	90009000 <memp_malloc>
900124c6:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
900124c8:	68fb      	ldr	r3, [r7, #12]
900124ca:	2b00      	cmp	r3, #0
900124cc:	d101      	bne.n	900124d2 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
900124ce:	2300      	movs	r3, #0
900124d0:	e016      	b.n	90012500 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
900124d2:	2220      	movs	r2, #32
900124d4:	2100      	movs	r1, #0
900124d6:	68f8      	ldr	r0, [r7, #12]
900124d8:	f001 f811 	bl	900134fe <memset>
  ipr->timer = IP_REASS_MAXAGE;
900124dc:	68fb      	ldr	r3, [r7, #12]
900124de:	220f      	movs	r2, #15
900124e0:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
900124e2:	4b09      	ldr	r3, [pc, #36]	; (90012508 <ip_reass_enqueue_new_datagram+0x70>)
900124e4:	681a      	ldr	r2, [r3, #0]
900124e6:	68fb      	ldr	r3, [r7, #12]
900124e8:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
900124ea:	4a07      	ldr	r2, [pc, #28]	; (90012508 <ip_reass_enqueue_new_datagram+0x70>)
900124ec:	68fb      	ldr	r3, [r7, #12]
900124ee:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
900124f0:	68fb      	ldr	r3, [r7, #12]
900124f2:	3308      	adds	r3, #8
900124f4:	2214      	movs	r2, #20
900124f6:	6879      	ldr	r1, [r7, #4]
900124f8:	4618      	mov	r0, r3
900124fa:	f000 fff2 	bl	900134e2 <memcpy>
  return ipr;
900124fe:	68fb      	ldr	r3, [r7, #12]
}
90012500:	4618      	mov	r0, r3
90012502:	3710      	adds	r7, #16
90012504:	46bd      	mov	sp, r7
90012506:	bd80      	pop	{r7, pc}
90012508:	24011174 	.word	0x24011174

9001250c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
9001250c:	b580      	push	{r7, lr}
9001250e:	b082      	sub	sp, #8
90012510:	af00      	add	r7, sp, #0
90012512:	6078      	str	r0, [r7, #4]
90012514:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
90012516:	4b10      	ldr	r3, [pc, #64]	; (90012558 <ip_reass_dequeue_datagram+0x4c>)
90012518:	681b      	ldr	r3, [r3, #0]
9001251a:	687a      	ldr	r2, [r7, #4]
9001251c:	429a      	cmp	r2, r3
9001251e:	d104      	bne.n	9001252a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
90012520:	687b      	ldr	r3, [r7, #4]
90012522:	681b      	ldr	r3, [r3, #0]
90012524:	4a0c      	ldr	r2, [pc, #48]	; (90012558 <ip_reass_dequeue_datagram+0x4c>)
90012526:	6013      	str	r3, [r2, #0]
90012528:	e00d      	b.n	90012546 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
9001252a:	683b      	ldr	r3, [r7, #0]
9001252c:	2b00      	cmp	r3, #0
9001252e:	d106      	bne.n	9001253e <ip_reass_dequeue_datagram+0x32>
90012530:	4b0a      	ldr	r3, [pc, #40]	; (9001255c <ip_reass_dequeue_datagram+0x50>)
90012532:	f240 1245 	movw	r2, #325	; 0x145
90012536:	490a      	ldr	r1, [pc, #40]	; (90012560 <ip_reass_dequeue_datagram+0x54>)
90012538:	480a      	ldr	r0, [pc, #40]	; (90012564 <ip_reass_dequeue_datagram+0x58>)
9001253a:	f001 f87d 	bl	90013638 <iprintf>
    prev->next = ipr->next;
9001253e:	687b      	ldr	r3, [r7, #4]
90012540:	681a      	ldr	r2, [r3, #0]
90012542:	683b      	ldr	r3, [r7, #0]
90012544:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
90012546:	6879      	ldr	r1, [r7, #4]
90012548:	2004      	movs	r0, #4
9001254a:	f7f6 fdcf 	bl	900090ec <memp_free>
}
9001254e:	bf00      	nop
90012550:	3708      	adds	r7, #8
90012552:	46bd      	mov	sp, r7
90012554:	bd80      	pop	{r7, pc}
90012556:	bf00      	nop
90012558:	24011174 	.word	0x24011174
9001255c:	90016fa0 	.word	0x90016fa0
90012560:	90017068 	.word	0x90017068
90012564:	90016fe8 	.word	0x90016fe8

90012568 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
90012568:	b580      	push	{r7, lr}
9001256a:	b08c      	sub	sp, #48	; 0x30
9001256c:	af00      	add	r7, sp, #0
9001256e:	60f8      	str	r0, [r7, #12]
90012570:	60b9      	str	r1, [r7, #8]
90012572:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
90012574:	2300      	movs	r3, #0
90012576:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
90012578:	2301      	movs	r3, #1
9001257a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
9001257c:	68bb      	ldr	r3, [r7, #8]
9001257e:	685b      	ldr	r3, [r3, #4]
90012580:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
90012582:	69fb      	ldr	r3, [r7, #28]
90012584:	885b      	ldrh	r3, [r3, #2]
90012586:	b29b      	uxth	r3, r3
90012588:	4618      	mov	r0, r3
9001258a:	f7f5 ff63 	bl	90008454 <lwip_htons>
9001258e:	4603      	mov	r3, r0
90012590:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
90012592:	69fb      	ldr	r3, [r7, #28]
90012594:	781b      	ldrb	r3, [r3, #0]
90012596:	f003 030f 	and.w	r3, r3, #15
9001259a:	b2db      	uxtb	r3, r3
9001259c:	009b      	lsls	r3, r3, #2
9001259e:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
900125a0:	7e7b      	ldrb	r3, [r7, #25]
900125a2:	b29b      	uxth	r3, r3
900125a4:	8b7a      	ldrh	r2, [r7, #26]
900125a6:	429a      	cmp	r2, r3
900125a8:	d202      	bcs.n	900125b0 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
900125aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
900125ae:	e135      	b.n	9001281c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
900125b0:	7e7b      	ldrb	r3, [r7, #25]
900125b2:	b29b      	uxth	r3, r3
900125b4:	8b7a      	ldrh	r2, [r7, #26]
900125b6:	1ad3      	subs	r3, r2, r3
900125b8:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
900125ba:	69fb      	ldr	r3, [r7, #28]
900125bc:	88db      	ldrh	r3, [r3, #6]
900125be:	b29b      	uxth	r3, r3
900125c0:	4618      	mov	r0, r3
900125c2:	f7f5 ff47 	bl	90008454 <lwip_htons>
900125c6:	4603      	mov	r3, r0
900125c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
900125cc:	b29b      	uxth	r3, r3
900125ce:	00db      	lsls	r3, r3, #3
900125d0:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
900125d2:	68bb      	ldr	r3, [r7, #8]
900125d4:	685b      	ldr	r3, [r3, #4]
900125d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
900125d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
900125da:	2200      	movs	r2, #0
900125dc:	701a      	strb	r2, [r3, #0]
900125de:	2200      	movs	r2, #0
900125e0:	705a      	strb	r2, [r3, #1]
900125e2:	2200      	movs	r2, #0
900125e4:	709a      	strb	r2, [r3, #2]
900125e6:	2200      	movs	r2, #0
900125e8:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
900125ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
900125ec:	8afa      	ldrh	r2, [r7, #22]
900125ee:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
900125f0:	8afa      	ldrh	r2, [r7, #22]
900125f2:	8b7b      	ldrh	r3, [r7, #26]
900125f4:	4413      	add	r3, r2
900125f6:	b29a      	uxth	r2, r3
900125f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
900125fa:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
900125fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
900125fe:	88db      	ldrh	r3, [r3, #6]
90012600:	b29b      	uxth	r3, r3
90012602:	8afa      	ldrh	r2, [r7, #22]
90012604:	429a      	cmp	r2, r3
90012606:	d902      	bls.n	9001260e <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
90012608:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
9001260c:	e106      	b.n	9001281c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
9001260e:	68fb      	ldr	r3, [r7, #12]
90012610:	685b      	ldr	r3, [r3, #4]
90012612:	627b      	str	r3, [r7, #36]	; 0x24
90012614:	e068      	b.n	900126e8 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
90012616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90012618:	685b      	ldr	r3, [r3, #4]
9001261a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
9001261c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9001261e:	889b      	ldrh	r3, [r3, #4]
90012620:	b29a      	uxth	r2, r3
90012622:	693b      	ldr	r3, [r7, #16]
90012624:	889b      	ldrh	r3, [r3, #4]
90012626:	b29b      	uxth	r3, r3
90012628:	429a      	cmp	r2, r3
9001262a:	d235      	bcs.n	90012698 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
9001262c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9001262e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
90012630:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
90012632:	6abb      	ldr	r3, [r7, #40]	; 0x28
90012634:	2b00      	cmp	r3, #0
90012636:	d020      	beq.n	9001267a <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
90012638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9001263a:	889b      	ldrh	r3, [r3, #4]
9001263c:	b29a      	uxth	r2, r3
9001263e:	6abb      	ldr	r3, [r7, #40]	; 0x28
90012640:	88db      	ldrh	r3, [r3, #6]
90012642:	b29b      	uxth	r3, r3
90012644:	429a      	cmp	r2, r3
90012646:	d307      	bcc.n	90012658 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
90012648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9001264a:	88db      	ldrh	r3, [r3, #6]
9001264c:	b29a      	uxth	r2, r3
9001264e:	693b      	ldr	r3, [r7, #16]
90012650:	889b      	ldrh	r3, [r3, #4]
90012652:	b29b      	uxth	r3, r3
90012654:	429a      	cmp	r2, r3
90012656:	d902      	bls.n	9001265e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
90012658:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
9001265c:	e0de      	b.n	9001281c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
9001265e:	6abb      	ldr	r3, [r7, #40]	; 0x28
90012660:	68ba      	ldr	r2, [r7, #8]
90012662:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
90012664:	6abb      	ldr	r3, [r7, #40]	; 0x28
90012666:	88db      	ldrh	r3, [r3, #6]
90012668:	b29a      	uxth	r2, r3
9001266a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9001266c:	889b      	ldrh	r3, [r3, #4]
9001266e:	b29b      	uxth	r3, r3
90012670:	429a      	cmp	r2, r3
90012672:	d03d      	beq.n	900126f0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
90012674:	2300      	movs	r3, #0
90012676:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
90012678:	e03a      	b.n	900126f0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
9001267a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9001267c:	88db      	ldrh	r3, [r3, #6]
9001267e:	b29a      	uxth	r2, r3
90012680:	693b      	ldr	r3, [r7, #16]
90012682:	889b      	ldrh	r3, [r3, #4]
90012684:	b29b      	uxth	r3, r3
90012686:	429a      	cmp	r2, r3
90012688:	d902      	bls.n	90012690 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
9001268a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
9001268e:	e0c5      	b.n	9001281c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
90012690:	68fb      	ldr	r3, [r7, #12]
90012692:	68ba      	ldr	r2, [r7, #8]
90012694:	605a      	str	r2, [r3, #4]
      break;
90012696:	e02b      	b.n	900126f0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
90012698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9001269a:	889b      	ldrh	r3, [r3, #4]
9001269c:	b29a      	uxth	r2, r3
9001269e:	693b      	ldr	r3, [r7, #16]
900126a0:	889b      	ldrh	r3, [r3, #4]
900126a2:	b29b      	uxth	r3, r3
900126a4:	429a      	cmp	r2, r3
900126a6:	d102      	bne.n	900126ae <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
900126a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
900126ac:	e0b6      	b.n	9001281c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
900126ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
900126b0:	889b      	ldrh	r3, [r3, #4]
900126b2:	b29a      	uxth	r2, r3
900126b4:	693b      	ldr	r3, [r7, #16]
900126b6:	88db      	ldrh	r3, [r3, #6]
900126b8:	b29b      	uxth	r3, r3
900126ba:	429a      	cmp	r2, r3
900126bc:	d202      	bcs.n	900126c4 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
900126be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
900126c2:	e0ab      	b.n	9001281c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
900126c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
900126c6:	2b00      	cmp	r3, #0
900126c8:	d009      	beq.n	900126de <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
900126ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
900126cc:	88db      	ldrh	r3, [r3, #6]
900126ce:	b29a      	uxth	r2, r3
900126d0:	693b      	ldr	r3, [r7, #16]
900126d2:	889b      	ldrh	r3, [r3, #4]
900126d4:	b29b      	uxth	r3, r3
900126d6:	429a      	cmp	r2, r3
900126d8:	d001      	beq.n	900126de <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
900126da:	2300      	movs	r3, #0
900126dc:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
900126de:	693b      	ldr	r3, [r7, #16]
900126e0:	681b      	ldr	r3, [r3, #0]
900126e2:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
900126e4:	693b      	ldr	r3, [r7, #16]
900126e6:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
900126e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
900126ea:	2b00      	cmp	r3, #0
900126ec:	d193      	bne.n	90012616 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
900126ee:	e000      	b.n	900126f2 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
900126f0:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
900126f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
900126f4:	2b00      	cmp	r3, #0
900126f6:	d12d      	bne.n	90012754 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
900126f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
900126fa:	2b00      	cmp	r3, #0
900126fc:	d01c      	beq.n	90012738 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
900126fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
90012700:	88db      	ldrh	r3, [r3, #6]
90012702:	b29a      	uxth	r2, r3
90012704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90012706:	889b      	ldrh	r3, [r3, #4]
90012708:	b29b      	uxth	r3, r3
9001270a:	429a      	cmp	r2, r3
9001270c:	d906      	bls.n	9001271c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
9001270e:	4b45      	ldr	r3, [pc, #276]	; (90012824 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
90012710:	f44f 72db 	mov.w	r2, #438	; 0x1b6
90012714:	4944      	ldr	r1, [pc, #272]	; (90012828 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
90012716:	4845      	ldr	r0, [pc, #276]	; (9001282c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
90012718:	f000 ff8e 	bl	90013638 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
9001271c:	6abb      	ldr	r3, [r7, #40]	; 0x28
9001271e:	68ba      	ldr	r2, [r7, #8]
90012720:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
90012722:	6abb      	ldr	r3, [r7, #40]	; 0x28
90012724:	88db      	ldrh	r3, [r3, #6]
90012726:	b29a      	uxth	r2, r3
90012728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9001272a:	889b      	ldrh	r3, [r3, #4]
9001272c:	b29b      	uxth	r3, r3
9001272e:	429a      	cmp	r2, r3
90012730:	d010      	beq.n	90012754 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
90012732:	2300      	movs	r3, #0
90012734:	623b      	str	r3, [r7, #32]
90012736:	e00d      	b.n	90012754 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
90012738:	68fb      	ldr	r3, [r7, #12]
9001273a:	685b      	ldr	r3, [r3, #4]
9001273c:	2b00      	cmp	r3, #0
9001273e:	d006      	beq.n	9001274e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
90012740:	4b38      	ldr	r3, [pc, #224]	; (90012824 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
90012742:	f44f 72df 	mov.w	r2, #446	; 0x1be
90012746:	493a      	ldr	r1, [pc, #232]	; (90012830 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
90012748:	4838      	ldr	r0, [pc, #224]	; (9001282c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
9001274a:	f000 ff75 	bl	90013638 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
9001274e:	68fb      	ldr	r3, [r7, #12]
90012750:	68ba      	ldr	r2, [r7, #8]
90012752:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
90012754:	687b      	ldr	r3, [r7, #4]
90012756:	2b00      	cmp	r3, #0
90012758:	d105      	bne.n	90012766 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
9001275a:	68fb      	ldr	r3, [r7, #12]
9001275c:	7f9b      	ldrb	r3, [r3, #30]
9001275e:	f003 0301 	and.w	r3, r3, #1
90012762:	2b00      	cmp	r3, #0
90012764:	d059      	beq.n	9001281a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
90012766:	6a3b      	ldr	r3, [r7, #32]
90012768:	2b00      	cmp	r3, #0
9001276a:	d04f      	beq.n	9001280c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
9001276c:	68fb      	ldr	r3, [r7, #12]
9001276e:	685b      	ldr	r3, [r3, #4]
90012770:	2b00      	cmp	r3, #0
90012772:	d006      	beq.n	90012782 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
90012774:	68fb      	ldr	r3, [r7, #12]
90012776:	685b      	ldr	r3, [r3, #4]
90012778:	685b      	ldr	r3, [r3, #4]
9001277a:	889b      	ldrh	r3, [r3, #4]
9001277c:	b29b      	uxth	r3, r3
9001277e:	2b00      	cmp	r3, #0
90012780:	d002      	beq.n	90012788 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
90012782:	2300      	movs	r3, #0
90012784:	623b      	str	r3, [r7, #32]
90012786:	e041      	b.n	9001280c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
90012788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9001278a:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
9001278c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9001278e:	681b      	ldr	r3, [r3, #0]
90012790:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
90012792:	e012      	b.n	900127ba <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
90012794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90012796:	685b      	ldr	r3, [r3, #4]
90012798:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
9001279a:	6abb      	ldr	r3, [r7, #40]	; 0x28
9001279c:	88db      	ldrh	r3, [r3, #6]
9001279e:	b29a      	uxth	r2, r3
900127a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
900127a2:	889b      	ldrh	r3, [r3, #4]
900127a4:	b29b      	uxth	r3, r3
900127a6:	429a      	cmp	r2, r3
900127a8:	d002      	beq.n	900127b0 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
900127aa:	2300      	movs	r3, #0
900127ac:	623b      	str	r3, [r7, #32]
            break;
900127ae:	e007      	b.n	900127c0 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
900127b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
900127b2:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
900127b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
900127b6:	681b      	ldr	r3, [r3, #0]
900127b8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
900127ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
900127bc:	2b00      	cmp	r3, #0
900127be:	d1e9      	bne.n	90012794 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
900127c0:	6a3b      	ldr	r3, [r7, #32]
900127c2:	2b00      	cmp	r3, #0
900127c4:	d022      	beq.n	9001280c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
900127c6:	68fb      	ldr	r3, [r7, #12]
900127c8:	685b      	ldr	r3, [r3, #4]
900127ca:	2b00      	cmp	r3, #0
900127cc:	d106      	bne.n	900127dc <ip_reass_chain_frag_into_datagram_and_validate+0x274>
900127ce:	4b15      	ldr	r3, [pc, #84]	; (90012824 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
900127d0:	f240 12df 	movw	r2, #479	; 0x1df
900127d4:	4917      	ldr	r1, [pc, #92]	; (90012834 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
900127d6:	4815      	ldr	r0, [pc, #84]	; (9001282c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
900127d8:	f000 ff2e 	bl	90013638 <iprintf>
          LWIP_ASSERT("sanity check",
900127dc:	68fb      	ldr	r3, [r7, #12]
900127de:	685b      	ldr	r3, [r3, #4]
900127e0:	685b      	ldr	r3, [r3, #4]
900127e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
900127e4:	429a      	cmp	r2, r3
900127e6:	d106      	bne.n	900127f6 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
900127e8:	4b0e      	ldr	r3, [pc, #56]	; (90012824 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
900127ea:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
900127ee:	4911      	ldr	r1, [pc, #68]	; (90012834 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
900127f0:	480e      	ldr	r0, [pc, #56]	; (9001282c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
900127f2:	f000 ff21 	bl	90013638 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
900127f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
900127f8:	681b      	ldr	r3, [r3, #0]
900127fa:	2b00      	cmp	r3, #0
900127fc:	d006      	beq.n	9001280c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
900127fe:	4b09      	ldr	r3, [pc, #36]	; (90012824 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
90012800:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
90012804:	490c      	ldr	r1, [pc, #48]	; (90012838 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
90012806:	4809      	ldr	r0, [pc, #36]	; (9001282c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
90012808:	f000 ff16 	bl	90013638 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
9001280c:	6a3b      	ldr	r3, [r7, #32]
9001280e:	2b00      	cmp	r3, #0
90012810:	bf14      	ite	ne
90012812:	2301      	movne	r3, #1
90012814:	2300      	moveq	r3, #0
90012816:	b2db      	uxtb	r3, r3
90012818:	e000      	b.n	9001281c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
9001281a:	2300      	movs	r3, #0
}
9001281c:	4618      	mov	r0, r3
9001281e:	3730      	adds	r7, #48	; 0x30
90012820:	46bd      	mov	sp, r7
90012822:	bd80      	pop	{r7, pc}
90012824:	90016fa0 	.word	0x90016fa0
90012828:	90017084 	.word	0x90017084
9001282c:	90016fe8 	.word	0x90016fe8
90012830:	900170a4 	.word	0x900170a4
90012834:	900170dc 	.word	0x900170dc
90012838:	900170ec 	.word	0x900170ec

9001283c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
9001283c:	b580      	push	{r7, lr}
9001283e:	b08e      	sub	sp, #56	; 0x38
90012840:	af00      	add	r7, sp, #0
90012842:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
90012844:	687b      	ldr	r3, [r7, #4]
90012846:	685b      	ldr	r3, [r3, #4]
90012848:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
9001284a:	6abb      	ldr	r3, [r7, #40]	; 0x28
9001284c:	781b      	ldrb	r3, [r3, #0]
9001284e:	f003 030f 	and.w	r3, r3, #15
90012852:	b2db      	uxtb	r3, r3
90012854:	009b      	lsls	r3, r3, #2
90012856:	b2db      	uxtb	r3, r3
90012858:	2b14      	cmp	r3, #20
9001285a:	f040 8171 	bne.w	90012b40 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
9001285e:	6abb      	ldr	r3, [r7, #40]	; 0x28
90012860:	88db      	ldrh	r3, [r3, #6]
90012862:	b29b      	uxth	r3, r3
90012864:	4618      	mov	r0, r3
90012866:	f7f5 fdf5 	bl	90008454 <lwip_htons>
9001286a:	4603      	mov	r3, r0
9001286c:	f3c3 030c 	ubfx	r3, r3, #0, #13
90012870:	b29b      	uxth	r3, r3
90012872:	00db      	lsls	r3, r3, #3
90012874:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
90012876:	6abb      	ldr	r3, [r7, #40]	; 0x28
90012878:	885b      	ldrh	r3, [r3, #2]
9001287a:	b29b      	uxth	r3, r3
9001287c:	4618      	mov	r0, r3
9001287e:	f7f5 fde9 	bl	90008454 <lwip_htons>
90012882:	4603      	mov	r3, r0
90012884:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
90012886:	6abb      	ldr	r3, [r7, #40]	; 0x28
90012888:	781b      	ldrb	r3, [r3, #0]
9001288a:	f003 030f 	and.w	r3, r3, #15
9001288e:	b2db      	uxtb	r3, r3
90012890:	009b      	lsls	r3, r3, #2
90012892:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
90012896:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
9001289a:	b29b      	uxth	r3, r3
9001289c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
9001289e:	429a      	cmp	r2, r3
900128a0:	f0c0 8150 	bcc.w	90012b44 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
900128a4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
900128a8:	b29b      	uxth	r3, r3
900128aa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
900128ac:	1ad3      	subs	r3, r2, r3
900128ae:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
900128b0:	6878      	ldr	r0, [r7, #4]
900128b2:	f7f7 fb4d 	bl	90009f50 <pbuf_clen>
900128b6:	4603      	mov	r3, r0
900128b8:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
900128ba:	4b8c      	ldr	r3, [pc, #560]	; (90012aec <ip4_reass+0x2b0>)
900128bc:	881b      	ldrh	r3, [r3, #0]
900128be:	461a      	mov	r2, r3
900128c0:	8c3b      	ldrh	r3, [r7, #32]
900128c2:	4413      	add	r3, r2
900128c4:	2b0a      	cmp	r3, #10
900128c6:	dd10      	ble.n	900128ea <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
900128c8:	8c3b      	ldrh	r3, [r7, #32]
900128ca:	4619      	mov	r1, r3
900128cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
900128ce:	f7ff fd81 	bl	900123d4 <ip_reass_remove_oldest_datagram>
900128d2:	4603      	mov	r3, r0
900128d4:	2b00      	cmp	r3, #0
900128d6:	f000 8137 	beq.w	90012b48 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
900128da:	4b84      	ldr	r3, [pc, #528]	; (90012aec <ip4_reass+0x2b0>)
900128dc:	881b      	ldrh	r3, [r3, #0]
900128de:	461a      	mov	r2, r3
900128e0:	8c3b      	ldrh	r3, [r7, #32]
900128e2:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
900128e4:	2b0a      	cmp	r3, #10
900128e6:	f300 812f 	bgt.w	90012b48 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
900128ea:	4b81      	ldr	r3, [pc, #516]	; (90012af0 <ip4_reass+0x2b4>)
900128ec:	681b      	ldr	r3, [r3, #0]
900128ee:	633b      	str	r3, [r7, #48]	; 0x30
900128f0:	e015      	b.n	9001291e <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
900128f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
900128f4:	695a      	ldr	r2, [r3, #20]
900128f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
900128f8:	68db      	ldr	r3, [r3, #12]
900128fa:	429a      	cmp	r2, r3
900128fc:	d10c      	bne.n	90012918 <ip4_reass+0xdc>
900128fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90012900:	699a      	ldr	r2, [r3, #24]
90012902:	6abb      	ldr	r3, [r7, #40]	; 0x28
90012904:	691b      	ldr	r3, [r3, #16]
90012906:	429a      	cmp	r2, r3
90012908:	d106      	bne.n	90012918 <ip4_reass+0xdc>
9001290a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9001290c:	899a      	ldrh	r2, [r3, #12]
9001290e:	6abb      	ldr	r3, [r7, #40]	; 0x28
90012910:	889b      	ldrh	r3, [r3, #4]
90012912:	b29b      	uxth	r3, r3
90012914:	429a      	cmp	r2, r3
90012916:	d006      	beq.n	90012926 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
90012918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9001291a:	681b      	ldr	r3, [r3, #0]
9001291c:	633b      	str	r3, [r7, #48]	; 0x30
9001291e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90012920:	2b00      	cmp	r3, #0
90012922:	d1e6      	bne.n	900128f2 <ip4_reass+0xb6>
90012924:	e000      	b.n	90012928 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
90012926:	bf00      	nop
    }
  }

  if (ipr == NULL) {
90012928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9001292a:	2b00      	cmp	r3, #0
9001292c:	d109      	bne.n	90012942 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
9001292e:	8c3b      	ldrh	r3, [r7, #32]
90012930:	4619      	mov	r1, r3
90012932:	6ab8      	ldr	r0, [r7, #40]	; 0x28
90012934:	f7ff fdb0 	bl	90012498 <ip_reass_enqueue_new_datagram>
90012938:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
9001293a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9001293c:	2b00      	cmp	r3, #0
9001293e:	d11c      	bne.n	9001297a <ip4_reass+0x13e>
      goto nullreturn;
90012940:	e105      	b.n	90012b4e <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
90012942:	6abb      	ldr	r3, [r7, #40]	; 0x28
90012944:	88db      	ldrh	r3, [r3, #6]
90012946:	b29b      	uxth	r3, r3
90012948:	4618      	mov	r0, r3
9001294a:	f7f5 fd83 	bl	90008454 <lwip_htons>
9001294e:	4603      	mov	r3, r0
90012950:	f3c3 030c 	ubfx	r3, r3, #0, #13
90012954:	2b00      	cmp	r3, #0
90012956:	d110      	bne.n	9001297a <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
90012958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9001295a:	89db      	ldrh	r3, [r3, #14]
9001295c:	4618      	mov	r0, r3
9001295e:	f7f5 fd79 	bl	90008454 <lwip_htons>
90012962:	4603      	mov	r3, r0
90012964:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
90012968:	2b00      	cmp	r3, #0
9001296a:	d006      	beq.n	9001297a <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
9001296c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9001296e:	3308      	adds	r3, #8
90012970:	2214      	movs	r2, #20
90012972:	6ab9      	ldr	r1, [r7, #40]	; 0x28
90012974:	4618      	mov	r0, r3
90012976:	f000 fdb4 	bl	900134e2 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
9001297a:	6abb      	ldr	r3, [r7, #40]	; 0x28
9001297c:	88db      	ldrh	r3, [r3, #6]
9001297e:	b29b      	uxth	r3, r3
90012980:	f003 0320 	and.w	r3, r3, #32
90012984:	2b00      	cmp	r3, #0
90012986:	bf0c      	ite	eq
90012988:	2301      	moveq	r3, #1
9001298a:	2300      	movne	r3, #0
9001298c:	b2db      	uxtb	r3, r3
9001298e:	61fb      	str	r3, [r7, #28]
  if (is_last) {
90012990:	69fb      	ldr	r3, [r7, #28]
90012992:	2b00      	cmp	r3, #0
90012994:	d00e      	beq.n	900129b4 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
90012996:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
90012998:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
9001299a:	4413      	add	r3, r2
9001299c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
9001299e:	8b7a      	ldrh	r2, [r7, #26]
900129a0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
900129a2:	429a      	cmp	r2, r3
900129a4:	f0c0 80a0 	bcc.w	90012ae8 <ip4_reass+0x2ac>
900129a8:	8b7b      	ldrh	r3, [r7, #26]
900129aa:	f64f 72eb 	movw	r2, #65515	; 0xffeb
900129ae:	4293      	cmp	r3, r2
900129b0:	f200 809a 	bhi.w	90012ae8 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
900129b4:	69fa      	ldr	r2, [r7, #28]
900129b6:	6879      	ldr	r1, [r7, #4]
900129b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
900129ba:	f7ff fdd5 	bl	90012568 <ip_reass_chain_frag_into_datagram_and_validate>
900129be:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
900129c0:	697b      	ldr	r3, [r7, #20]
900129c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
900129c6:	f000 809b 	beq.w	90012b00 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
900129ca:	4b48      	ldr	r3, [pc, #288]	; (90012aec <ip4_reass+0x2b0>)
900129cc:	881a      	ldrh	r2, [r3, #0]
900129ce:	8c3b      	ldrh	r3, [r7, #32]
900129d0:	4413      	add	r3, r2
900129d2:	b29a      	uxth	r2, r3
900129d4:	4b45      	ldr	r3, [pc, #276]	; (90012aec <ip4_reass+0x2b0>)
900129d6:	801a      	strh	r2, [r3, #0]
  if (is_last) {
900129d8:	69fb      	ldr	r3, [r7, #28]
900129da:	2b00      	cmp	r3, #0
900129dc:	d00d      	beq.n	900129fa <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
900129de:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
900129e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
900129e2:	4413      	add	r3, r2
900129e4:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
900129e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
900129e8:	8a7a      	ldrh	r2, [r7, #18]
900129ea:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
900129ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
900129ee:	7f9b      	ldrb	r3, [r3, #30]
900129f0:	f043 0301 	orr.w	r3, r3, #1
900129f4:	b2da      	uxtb	r2, r3
900129f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
900129f8:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
900129fa:	697b      	ldr	r3, [r7, #20]
900129fc:	2b01      	cmp	r3, #1
900129fe:	d171      	bne.n	90012ae4 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
90012a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90012a02:	8b9b      	ldrh	r3, [r3, #28]
90012a04:	3314      	adds	r3, #20
90012a06:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
90012a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90012a0a:	685b      	ldr	r3, [r3, #4]
90012a0c:	685b      	ldr	r3, [r3, #4]
90012a0e:	681b      	ldr	r3, [r3, #0]
90012a10:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
90012a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90012a14:	685b      	ldr	r3, [r3, #4]
90012a16:	685b      	ldr	r3, [r3, #4]
90012a18:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
90012a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90012a1c:	3308      	adds	r3, #8
90012a1e:	2214      	movs	r2, #20
90012a20:	4619      	mov	r1, r3
90012a22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
90012a24:	f000 fd5d 	bl	900134e2 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
90012a28:	8a3b      	ldrh	r3, [r7, #16]
90012a2a:	4618      	mov	r0, r3
90012a2c:	f7f5 fd12 	bl	90008454 <lwip_htons>
90012a30:	4603      	mov	r3, r0
90012a32:	461a      	mov	r2, r3
90012a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
90012a36:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
90012a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
90012a3a:	2200      	movs	r2, #0
90012a3c:	719a      	strb	r2, [r3, #6]
90012a3e:	2200      	movs	r2, #0
90012a40:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
90012a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
90012a44:	2200      	movs	r2, #0
90012a46:	729a      	strb	r2, [r3, #10]
90012a48:	2200      	movs	r2, #0
90012a4a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
90012a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90012a4e:	685b      	ldr	r3, [r3, #4]
90012a50:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
90012a52:	e00d      	b.n	90012a70 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
90012a54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
90012a56:	685b      	ldr	r3, [r3, #4]
90012a58:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
90012a5a:	2114      	movs	r1, #20
90012a5c:	6b78      	ldr	r0, [r7, #52]	; 0x34
90012a5e:	f7f7 f963 	bl	90009d28 <pbuf_remove_header>
      pbuf_cat(p, r);
90012a62:	6b79      	ldr	r1, [r7, #52]	; 0x34
90012a64:	6878      	ldr	r0, [r7, #4]
90012a66:	f7f7 fab3 	bl	90009fd0 <pbuf_cat>
      r = iprh->next_pbuf;
90012a6a:	68fb      	ldr	r3, [r7, #12]
90012a6c:	681b      	ldr	r3, [r3, #0]
90012a6e:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
90012a70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
90012a72:	2b00      	cmp	r3, #0
90012a74:	d1ee      	bne.n	90012a54 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
90012a76:	4b1e      	ldr	r3, [pc, #120]	; (90012af0 <ip4_reass+0x2b4>)
90012a78:	681b      	ldr	r3, [r3, #0]
90012a7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
90012a7c:	429a      	cmp	r2, r3
90012a7e:	d102      	bne.n	90012a86 <ip4_reass+0x24a>
      ipr_prev = NULL;
90012a80:	2300      	movs	r3, #0
90012a82:	62fb      	str	r3, [r7, #44]	; 0x2c
90012a84:	e010      	b.n	90012aa8 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
90012a86:	4b1a      	ldr	r3, [pc, #104]	; (90012af0 <ip4_reass+0x2b4>)
90012a88:	681b      	ldr	r3, [r3, #0]
90012a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
90012a8c:	e007      	b.n	90012a9e <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
90012a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90012a90:	681b      	ldr	r3, [r3, #0]
90012a92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
90012a94:	429a      	cmp	r2, r3
90012a96:	d006      	beq.n	90012aa6 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
90012a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90012a9a:	681b      	ldr	r3, [r3, #0]
90012a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
90012a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90012aa0:	2b00      	cmp	r3, #0
90012aa2:	d1f4      	bne.n	90012a8e <ip4_reass+0x252>
90012aa4:	e000      	b.n	90012aa8 <ip4_reass+0x26c>
          break;
90012aa6:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
90012aa8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
90012aaa:	6b38      	ldr	r0, [r7, #48]	; 0x30
90012aac:	f7ff fd2e 	bl	9001250c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
90012ab0:	6878      	ldr	r0, [r7, #4]
90012ab2:	f7f7 fa4d 	bl	90009f50 <pbuf_clen>
90012ab6:	4603      	mov	r3, r0
90012ab8:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
90012aba:	4b0c      	ldr	r3, [pc, #48]	; (90012aec <ip4_reass+0x2b0>)
90012abc:	881b      	ldrh	r3, [r3, #0]
90012abe:	8c3a      	ldrh	r2, [r7, #32]
90012ac0:	429a      	cmp	r2, r3
90012ac2:	d906      	bls.n	90012ad2 <ip4_reass+0x296>
90012ac4:	4b0b      	ldr	r3, [pc, #44]	; (90012af4 <ip4_reass+0x2b8>)
90012ac6:	f240 229b 	movw	r2, #667	; 0x29b
90012aca:	490b      	ldr	r1, [pc, #44]	; (90012af8 <ip4_reass+0x2bc>)
90012acc:	480b      	ldr	r0, [pc, #44]	; (90012afc <ip4_reass+0x2c0>)
90012ace:	f000 fdb3 	bl	90013638 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
90012ad2:	4b06      	ldr	r3, [pc, #24]	; (90012aec <ip4_reass+0x2b0>)
90012ad4:	881a      	ldrh	r2, [r3, #0]
90012ad6:	8c3b      	ldrh	r3, [r7, #32]
90012ad8:	1ad3      	subs	r3, r2, r3
90012ada:	b29a      	uxth	r2, r3
90012adc:	4b03      	ldr	r3, [pc, #12]	; (90012aec <ip4_reass+0x2b0>)
90012ade:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
90012ae0:	687b      	ldr	r3, [r7, #4]
90012ae2:	e038      	b.n	90012b56 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
90012ae4:	2300      	movs	r3, #0
90012ae6:	e036      	b.n	90012b56 <ip4_reass+0x31a>
      goto nullreturn_ipr;
90012ae8:	bf00      	nop
90012aea:	e00a      	b.n	90012b02 <ip4_reass+0x2c6>
90012aec:	24011178 	.word	0x24011178
90012af0:	24011174 	.word	0x24011174
90012af4:	90016fa0 	.word	0x90016fa0
90012af8:	90017110 	.word	0x90017110
90012afc:	90016fe8 	.word	0x90016fe8
    goto nullreturn_ipr;
90012b00:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
90012b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90012b04:	2b00      	cmp	r3, #0
90012b06:	d106      	bne.n	90012b16 <ip4_reass+0x2da>
90012b08:	4b15      	ldr	r3, [pc, #84]	; (90012b60 <ip4_reass+0x324>)
90012b0a:	f44f 722a 	mov.w	r2, #680	; 0x2a8
90012b0e:	4915      	ldr	r1, [pc, #84]	; (90012b64 <ip4_reass+0x328>)
90012b10:	4815      	ldr	r0, [pc, #84]	; (90012b68 <ip4_reass+0x32c>)
90012b12:	f000 fd91 	bl	90013638 <iprintf>
  if (ipr->p == NULL) {
90012b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90012b18:	685b      	ldr	r3, [r3, #4]
90012b1a:	2b00      	cmp	r3, #0
90012b1c:	d116      	bne.n	90012b4c <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
90012b1e:	4b13      	ldr	r3, [pc, #76]	; (90012b6c <ip4_reass+0x330>)
90012b20:	681b      	ldr	r3, [r3, #0]
90012b22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
90012b24:	429a      	cmp	r2, r3
90012b26:	d006      	beq.n	90012b36 <ip4_reass+0x2fa>
90012b28:	4b0d      	ldr	r3, [pc, #52]	; (90012b60 <ip4_reass+0x324>)
90012b2a:	f240 22ab 	movw	r2, #683	; 0x2ab
90012b2e:	4910      	ldr	r1, [pc, #64]	; (90012b70 <ip4_reass+0x334>)
90012b30:	480d      	ldr	r0, [pc, #52]	; (90012b68 <ip4_reass+0x32c>)
90012b32:	f000 fd81 	bl	90013638 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
90012b36:	2100      	movs	r1, #0
90012b38:	6b38      	ldr	r0, [r7, #48]	; 0x30
90012b3a:	f7ff fce7 	bl	9001250c <ip_reass_dequeue_datagram>
90012b3e:	e006      	b.n	90012b4e <ip4_reass+0x312>
    goto nullreturn;
90012b40:	bf00      	nop
90012b42:	e004      	b.n	90012b4e <ip4_reass+0x312>
    goto nullreturn;
90012b44:	bf00      	nop
90012b46:	e002      	b.n	90012b4e <ip4_reass+0x312>
      goto nullreturn;
90012b48:	bf00      	nop
90012b4a:	e000      	b.n	90012b4e <ip4_reass+0x312>
  }

nullreturn:
90012b4c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
90012b4e:	6878      	ldr	r0, [r7, #4]
90012b50:	f7f7 f970 	bl	90009e34 <pbuf_free>
  return NULL;
90012b54:	2300      	movs	r3, #0
}
90012b56:	4618      	mov	r0, r3
90012b58:	3738      	adds	r7, #56	; 0x38
90012b5a:	46bd      	mov	sp, r7
90012b5c:	bd80      	pop	{r7, pc}
90012b5e:	bf00      	nop
90012b60:	90016fa0 	.word	0x90016fa0
90012b64:	9001712c 	.word	0x9001712c
90012b68:	90016fe8 	.word	0x90016fe8
90012b6c:	24011174 	.word	0x24011174
90012b70:	90017138 	.word	0x90017138

90012b74 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
90012b74:	b580      	push	{r7, lr}
90012b76:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
90012b78:	2005      	movs	r0, #5
90012b7a:	f7f6 fa41 	bl	90009000 <memp_malloc>
90012b7e:	4603      	mov	r3, r0
}
90012b80:	4618      	mov	r0, r3
90012b82:	bd80      	pop	{r7, pc}

90012b84 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
90012b84:	b580      	push	{r7, lr}
90012b86:	b082      	sub	sp, #8
90012b88:	af00      	add	r7, sp, #0
90012b8a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
90012b8c:	687b      	ldr	r3, [r7, #4]
90012b8e:	2b00      	cmp	r3, #0
90012b90:	d106      	bne.n	90012ba0 <ip_frag_free_pbuf_custom_ref+0x1c>
90012b92:	4b07      	ldr	r3, [pc, #28]	; (90012bb0 <ip_frag_free_pbuf_custom_ref+0x2c>)
90012b94:	f44f 7231 	mov.w	r2, #708	; 0x2c4
90012b98:	4906      	ldr	r1, [pc, #24]	; (90012bb4 <ip_frag_free_pbuf_custom_ref+0x30>)
90012b9a:	4807      	ldr	r0, [pc, #28]	; (90012bb8 <ip_frag_free_pbuf_custom_ref+0x34>)
90012b9c:	f000 fd4c 	bl	90013638 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
90012ba0:	6879      	ldr	r1, [r7, #4]
90012ba2:	2005      	movs	r0, #5
90012ba4:	f7f6 faa2 	bl	900090ec <memp_free>
}
90012ba8:	bf00      	nop
90012baa:	3708      	adds	r7, #8
90012bac:	46bd      	mov	sp, r7
90012bae:	bd80      	pop	{r7, pc}
90012bb0:	90016fa0 	.word	0x90016fa0
90012bb4:	90017158 	.word	0x90017158
90012bb8:	90016fe8 	.word	0x90016fe8

90012bbc <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
90012bbc:	b580      	push	{r7, lr}
90012bbe:	b084      	sub	sp, #16
90012bc0:	af00      	add	r7, sp, #0
90012bc2:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
90012bc4:	687b      	ldr	r3, [r7, #4]
90012bc6:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
90012bc8:	68fb      	ldr	r3, [r7, #12]
90012bca:	2b00      	cmp	r3, #0
90012bcc:	d106      	bne.n	90012bdc <ipfrag_free_pbuf_custom+0x20>
90012bce:	4b11      	ldr	r3, [pc, #68]	; (90012c14 <ipfrag_free_pbuf_custom+0x58>)
90012bd0:	f240 22ce 	movw	r2, #718	; 0x2ce
90012bd4:	4910      	ldr	r1, [pc, #64]	; (90012c18 <ipfrag_free_pbuf_custom+0x5c>)
90012bd6:	4811      	ldr	r0, [pc, #68]	; (90012c1c <ipfrag_free_pbuf_custom+0x60>)
90012bd8:	f000 fd2e 	bl	90013638 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
90012bdc:	68fa      	ldr	r2, [r7, #12]
90012bde:	687b      	ldr	r3, [r7, #4]
90012be0:	429a      	cmp	r2, r3
90012be2:	d006      	beq.n	90012bf2 <ipfrag_free_pbuf_custom+0x36>
90012be4:	4b0b      	ldr	r3, [pc, #44]	; (90012c14 <ipfrag_free_pbuf_custom+0x58>)
90012be6:	f240 22cf 	movw	r2, #719	; 0x2cf
90012bea:	490d      	ldr	r1, [pc, #52]	; (90012c20 <ipfrag_free_pbuf_custom+0x64>)
90012bec:	480b      	ldr	r0, [pc, #44]	; (90012c1c <ipfrag_free_pbuf_custom+0x60>)
90012bee:	f000 fd23 	bl	90013638 <iprintf>
  if (pcr->original != NULL) {
90012bf2:	68fb      	ldr	r3, [r7, #12]
90012bf4:	695b      	ldr	r3, [r3, #20]
90012bf6:	2b00      	cmp	r3, #0
90012bf8:	d004      	beq.n	90012c04 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
90012bfa:	68fb      	ldr	r3, [r7, #12]
90012bfc:	695b      	ldr	r3, [r3, #20]
90012bfe:	4618      	mov	r0, r3
90012c00:	f7f7 f918 	bl	90009e34 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
90012c04:	68f8      	ldr	r0, [r7, #12]
90012c06:	f7ff ffbd 	bl	90012b84 <ip_frag_free_pbuf_custom_ref>
}
90012c0a:	bf00      	nop
90012c0c:	3710      	adds	r7, #16
90012c0e:	46bd      	mov	sp, r7
90012c10:	bd80      	pop	{r7, pc}
90012c12:	bf00      	nop
90012c14:	90016fa0 	.word	0x90016fa0
90012c18:	90017164 	.word	0x90017164
90012c1c:	90016fe8 	.word	0x90016fe8
90012c20:	90017170 	.word	0x90017170

90012c24 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
90012c24:	b580      	push	{r7, lr}
90012c26:	b094      	sub	sp, #80	; 0x50
90012c28:	af02      	add	r7, sp, #8
90012c2a:	60f8      	str	r0, [r7, #12]
90012c2c:	60b9      	str	r1, [r7, #8]
90012c2e:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
90012c30:	2300      	movs	r3, #0
90012c32:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
90012c36:	68bb      	ldr	r3, [r7, #8]
90012c38:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
90012c3a:	3b14      	subs	r3, #20
90012c3c:	2b00      	cmp	r3, #0
90012c3e:	da00      	bge.n	90012c42 <ip4_frag+0x1e>
90012c40:	3307      	adds	r3, #7
90012c42:	10db      	asrs	r3, r3, #3
90012c44:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
90012c46:	2314      	movs	r3, #20
90012c48:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
90012c4a:	68fb      	ldr	r3, [r7, #12]
90012c4c:	685b      	ldr	r3, [r3, #4]
90012c4e:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
90012c50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
90012c52:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
90012c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90012c56:	781b      	ldrb	r3, [r3, #0]
90012c58:	f003 030f 	and.w	r3, r3, #15
90012c5c:	b2db      	uxtb	r3, r3
90012c5e:	009b      	lsls	r3, r3, #2
90012c60:	b2db      	uxtb	r3, r3
90012c62:	2b14      	cmp	r3, #20
90012c64:	d002      	beq.n	90012c6c <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
90012c66:	f06f 0305 	mvn.w	r3, #5
90012c6a:	e110      	b.n	90012e8e <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
90012c6c:	68fb      	ldr	r3, [r7, #12]
90012c6e:	895b      	ldrh	r3, [r3, #10]
90012c70:	2b13      	cmp	r3, #19
90012c72:	d809      	bhi.n	90012c88 <ip4_frag+0x64>
90012c74:	4b88      	ldr	r3, [pc, #544]	; (90012e98 <ip4_frag+0x274>)
90012c76:	f44f 723f 	mov.w	r2, #764	; 0x2fc
90012c7a:	4988      	ldr	r1, [pc, #544]	; (90012e9c <ip4_frag+0x278>)
90012c7c:	4888      	ldr	r0, [pc, #544]	; (90012ea0 <ip4_frag+0x27c>)
90012c7e:	f000 fcdb 	bl	90013638 <iprintf>
90012c82:	f06f 0305 	mvn.w	r3, #5
90012c86:	e102      	b.n	90012e8e <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
90012c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90012c8a:	88db      	ldrh	r3, [r3, #6]
90012c8c:	b29b      	uxth	r3, r3
90012c8e:	4618      	mov	r0, r3
90012c90:	f7f5 fbe0 	bl	90008454 <lwip_htons>
90012c94:	4603      	mov	r3, r0
90012c96:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
90012c98:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
90012c9a:	f3c3 030c 	ubfx	r3, r3, #0, #13
90012c9e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
90012ca2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
90012ca4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
90012ca8:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
90012caa:	68fb      	ldr	r3, [r7, #12]
90012cac:	891b      	ldrh	r3, [r3, #8]
90012cae:	3b14      	subs	r3, #20
90012cb0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
90012cb4:	e0e1      	b.n	90012e7a <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
90012cb6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
90012cb8:	00db      	lsls	r3, r3, #3
90012cba:	b29b      	uxth	r3, r3
90012cbc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
90012cc0:	4293      	cmp	r3, r2
90012cc2:	bf28      	it	cs
90012cc4:	4613      	movcs	r3, r2
90012cc6:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
90012cc8:	f44f 7220 	mov.w	r2, #640	; 0x280
90012ccc:	2114      	movs	r1, #20
90012cce:	200e      	movs	r0, #14
90012cd0:	f7f6 fdcc 	bl	9000986c <pbuf_alloc>
90012cd4:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
90012cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90012cd8:	2b00      	cmp	r3, #0
90012cda:	f000 80d5 	beq.w	90012e88 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
90012cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90012ce0:	895b      	ldrh	r3, [r3, #10]
90012ce2:	2b13      	cmp	r3, #19
90012ce4:	d806      	bhi.n	90012cf4 <ip4_frag+0xd0>
90012ce6:	4b6c      	ldr	r3, [pc, #432]	; (90012e98 <ip4_frag+0x274>)
90012ce8:	f44f 7249 	mov.w	r2, #804	; 0x324
90012cec:	496d      	ldr	r1, [pc, #436]	; (90012ea4 <ip4_frag+0x280>)
90012cee:	486c      	ldr	r0, [pc, #432]	; (90012ea0 <ip4_frag+0x27c>)
90012cf0:	f000 fca2 	bl	90013638 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
90012cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90012cf6:	685b      	ldr	r3, [r3, #4]
90012cf8:	2214      	movs	r2, #20
90012cfa:	6b79      	ldr	r1, [r7, #52]	; 0x34
90012cfc:	4618      	mov	r0, r3
90012cfe:	f000 fbf0 	bl	900134e2 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
90012d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90012d04:	685b      	ldr	r3, [r3, #4]
90012d06:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
90012d08:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
90012d0a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
90012d0e:	e064      	b.n	90012dda <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
90012d10:	68fb      	ldr	r3, [r7, #12]
90012d12:	895a      	ldrh	r2, [r3, #10]
90012d14:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
90012d16:	1ad3      	subs	r3, r2, r3
90012d18:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
90012d1a:	68fb      	ldr	r3, [r7, #12]
90012d1c:	895b      	ldrh	r3, [r3, #10]
90012d1e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
90012d20:	429a      	cmp	r2, r3
90012d22:	d906      	bls.n	90012d32 <ip4_frag+0x10e>
90012d24:	4b5c      	ldr	r3, [pc, #368]	; (90012e98 <ip4_frag+0x274>)
90012d26:	f240 322d 	movw	r2, #813	; 0x32d
90012d2a:	495f      	ldr	r1, [pc, #380]	; (90012ea8 <ip4_frag+0x284>)
90012d2c:	485c      	ldr	r0, [pc, #368]	; (90012ea0 <ip4_frag+0x27c>)
90012d2e:	f000 fc83 	bl	90013638 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
90012d32:	8bfa      	ldrh	r2, [r7, #30]
90012d34:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
90012d38:	4293      	cmp	r3, r2
90012d3a:	bf28      	it	cs
90012d3c:	4613      	movcs	r3, r2
90012d3e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
90012d42:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
90012d46:	2b00      	cmp	r3, #0
90012d48:	d105      	bne.n	90012d56 <ip4_frag+0x132>
        poff = 0;
90012d4a:	2300      	movs	r3, #0
90012d4c:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
90012d4e:	68fb      	ldr	r3, [r7, #12]
90012d50:	681b      	ldr	r3, [r3, #0]
90012d52:	60fb      	str	r3, [r7, #12]
        continue;
90012d54:	e041      	b.n	90012dda <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
90012d56:	f7ff ff0d 	bl	90012b74 <ip_frag_alloc_pbuf_custom_ref>
90012d5a:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
90012d5c:	69bb      	ldr	r3, [r7, #24]
90012d5e:	2b00      	cmp	r3, #0
90012d60:	d103      	bne.n	90012d6a <ip4_frag+0x146>
        pbuf_free(rambuf);
90012d62:	6a78      	ldr	r0, [r7, #36]	; 0x24
90012d64:	f7f7 f866 	bl	90009e34 <pbuf_free>
        goto memerr;
90012d68:	e08f      	b.n	90012e8a <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
90012d6a:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
90012d6c:	68fb      	ldr	r3, [r7, #12]
90012d6e:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
90012d70:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
90012d72:	4413      	add	r3, r2
90012d74:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
90012d78:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
90012d7c:	9201      	str	r2, [sp, #4]
90012d7e:	9300      	str	r3, [sp, #0]
90012d80:	4603      	mov	r3, r0
90012d82:	2241      	movs	r2, #65	; 0x41
90012d84:	2000      	movs	r0, #0
90012d86:	f7f6 fe9b 	bl	90009ac0 <pbuf_alloced_custom>
90012d8a:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
90012d8c:	697b      	ldr	r3, [r7, #20]
90012d8e:	2b00      	cmp	r3, #0
90012d90:	d106      	bne.n	90012da0 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
90012d92:	69b8      	ldr	r0, [r7, #24]
90012d94:	f7ff fef6 	bl	90012b84 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
90012d98:	6a78      	ldr	r0, [r7, #36]	; 0x24
90012d9a:	f7f7 f84b 	bl	90009e34 <pbuf_free>
        goto memerr;
90012d9e:	e074      	b.n	90012e8a <ip4_frag+0x266>
      }
      pbuf_ref(p);
90012da0:	68f8      	ldr	r0, [r7, #12]
90012da2:	f7f7 f8ed 	bl	90009f80 <pbuf_ref>
      pcr->original = p;
90012da6:	69bb      	ldr	r3, [r7, #24]
90012da8:	68fa      	ldr	r2, [r7, #12]
90012daa:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
90012dac:	69bb      	ldr	r3, [r7, #24]
90012dae:	4a3f      	ldr	r2, [pc, #252]	; (90012eac <ip4_frag+0x288>)
90012db0:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
90012db2:	6979      	ldr	r1, [r7, #20]
90012db4:	6a78      	ldr	r0, [r7, #36]	; 0x24
90012db6:	f7f7 f90b 	bl	90009fd0 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
90012dba:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
90012dbe:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
90012dc2:	1ad3      	subs	r3, r2, r3
90012dc4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
90012dc8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
90012dcc:	2b00      	cmp	r3, #0
90012dce:	d004      	beq.n	90012dda <ip4_frag+0x1b6>
        poff = 0;
90012dd0:	2300      	movs	r3, #0
90012dd2:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
90012dd4:	68fb      	ldr	r3, [r7, #12]
90012dd6:	681b      	ldr	r3, [r3, #0]
90012dd8:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
90012dda:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
90012dde:	2b00      	cmp	r3, #0
90012de0:	d196      	bne.n	90012d10 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
90012de2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
90012de4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
90012de8:	4413      	add	r3, r2
90012dea:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
90012dec:	68bb      	ldr	r3, [r7, #8]
90012dee:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
90012df0:	f1a3 0213 	sub.w	r2, r3, #19
90012df4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
90012df8:	429a      	cmp	r2, r3
90012dfa:	bfcc      	ite	gt
90012dfc:	2301      	movgt	r3, #1
90012dfe:	2300      	movle	r3, #0
90012e00:	b2db      	uxtb	r3, r3
90012e02:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
90012e04:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
90012e08:	f3c3 030c 	ubfx	r3, r3, #0, #13
90012e0c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
90012e0e:	6a3b      	ldr	r3, [r7, #32]
90012e10:	2b00      	cmp	r3, #0
90012e12:	d002      	beq.n	90012e1a <ip4_frag+0x1f6>
90012e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90012e16:	2b00      	cmp	r3, #0
90012e18:	d003      	beq.n	90012e22 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
90012e1a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
90012e1c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
90012e20:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
90012e22:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
90012e24:	4618      	mov	r0, r3
90012e26:	f7f5 fb15 	bl	90008454 <lwip_htons>
90012e2a:	4603      	mov	r3, r0
90012e2c:	461a      	mov	r2, r3
90012e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90012e30:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
90012e32:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
90012e34:	3314      	adds	r3, #20
90012e36:	b29b      	uxth	r3, r3
90012e38:	4618      	mov	r0, r3
90012e3a:	f7f5 fb0b 	bl	90008454 <lwip_htons>
90012e3e:	4603      	mov	r3, r0
90012e40:	461a      	mov	r2, r3
90012e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90012e44:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
90012e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90012e48:	2200      	movs	r2, #0
90012e4a:	729a      	strb	r2, [r3, #10]
90012e4c:	2200      	movs	r2, #0
90012e4e:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
90012e50:	68bb      	ldr	r3, [r7, #8]
90012e52:	695b      	ldr	r3, [r3, #20]
90012e54:	687a      	ldr	r2, [r7, #4]
90012e56:	6a79      	ldr	r1, [r7, #36]	; 0x24
90012e58:	68b8      	ldr	r0, [r7, #8]
90012e5a:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
90012e5c:	6a78      	ldr	r0, [r7, #36]	; 0x24
90012e5e:	f7f6 ffe9 	bl	90009e34 <pbuf_free>
    left = (u16_t)(left - fragsize);
90012e62:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
90012e66:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
90012e68:	1ad3      	subs	r3, r2, r3
90012e6a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
90012e6e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
90012e72:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
90012e74:	4413      	add	r3, r2
90012e76:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
90012e7a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
90012e7e:	2b00      	cmp	r3, #0
90012e80:	f47f af19 	bne.w	90012cb6 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
90012e84:	2300      	movs	r3, #0
90012e86:	e002      	b.n	90012e8e <ip4_frag+0x26a>
      goto memerr;
90012e88:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
90012e8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
90012e8e:	4618      	mov	r0, r3
90012e90:	3748      	adds	r7, #72	; 0x48
90012e92:	46bd      	mov	sp, r7
90012e94:	bd80      	pop	{r7, pc}
90012e96:	bf00      	nop
90012e98:	90016fa0 	.word	0x90016fa0
90012e9c:	9001717c 	.word	0x9001717c
90012ea0:	90016fe8 	.word	0x90016fe8
90012ea4:	90017198 	.word	0x90017198
90012ea8:	900171b8 	.word	0x900171b8
90012eac:	90012bbd 	.word	0x90012bbd

90012eb0 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
90012eb0:	b580      	push	{r7, lr}
90012eb2:	b086      	sub	sp, #24
90012eb4:	af00      	add	r7, sp, #0
90012eb6:	6078      	str	r0, [r7, #4]
90012eb8:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
90012eba:	230e      	movs	r3, #14
90012ebc:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
90012ebe:	687b      	ldr	r3, [r7, #4]
90012ec0:	895b      	ldrh	r3, [r3, #10]
90012ec2:	2b0e      	cmp	r3, #14
90012ec4:	d96e      	bls.n	90012fa4 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
90012ec6:	687b      	ldr	r3, [r7, #4]
90012ec8:	7bdb      	ldrb	r3, [r3, #15]
90012eca:	2b00      	cmp	r3, #0
90012ecc:	d106      	bne.n	90012edc <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
90012ece:	683b      	ldr	r3, [r7, #0]
90012ed0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
90012ed4:	3301      	adds	r3, #1
90012ed6:	b2da      	uxtb	r2, r3
90012ed8:	687b      	ldr	r3, [r7, #4]
90012eda:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
90012edc:	687b      	ldr	r3, [r7, #4]
90012ede:	685b      	ldr	r3, [r3, #4]
90012ee0:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
90012ee2:	693b      	ldr	r3, [r7, #16]
90012ee4:	7b1a      	ldrb	r2, [r3, #12]
90012ee6:	7b5b      	ldrb	r3, [r3, #13]
90012ee8:	021b      	lsls	r3, r3, #8
90012eea:	4313      	orrs	r3, r2
90012eec:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
90012eee:	693b      	ldr	r3, [r7, #16]
90012ef0:	781b      	ldrb	r3, [r3, #0]
90012ef2:	f003 0301 	and.w	r3, r3, #1
90012ef6:	2b00      	cmp	r3, #0
90012ef8:	d023      	beq.n	90012f42 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
90012efa:	693b      	ldr	r3, [r7, #16]
90012efc:	781b      	ldrb	r3, [r3, #0]
90012efe:	2b01      	cmp	r3, #1
90012f00:	d10f      	bne.n	90012f22 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
90012f02:	693b      	ldr	r3, [r7, #16]
90012f04:	785b      	ldrb	r3, [r3, #1]
90012f06:	2b00      	cmp	r3, #0
90012f08:	d11b      	bne.n	90012f42 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
90012f0a:	693b      	ldr	r3, [r7, #16]
90012f0c:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
90012f0e:	2b5e      	cmp	r3, #94	; 0x5e
90012f10:	d117      	bne.n	90012f42 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
90012f12:	687b      	ldr	r3, [r7, #4]
90012f14:	7b5b      	ldrb	r3, [r3, #13]
90012f16:	f043 0310 	orr.w	r3, r3, #16
90012f1a:	b2da      	uxtb	r2, r3
90012f1c:	687b      	ldr	r3, [r7, #4]
90012f1e:	735a      	strb	r2, [r3, #13]
90012f20:	e00f      	b.n	90012f42 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
90012f22:	693b      	ldr	r3, [r7, #16]
90012f24:	2206      	movs	r2, #6
90012f26:	4928      	ldr	r1, [pc, #160]	; (90012fc8 <ethernet_input+0x118>)
90012f28:	4618      	mov	r0, r3
90012f2a:	f000 faca 	bl	900134c2 <memcmp>
90012f2e:	4603      	mov	r3, r0
90012f30:	2b00      	cmp	r3, #0
90012f32:	d106      	bne.n	90012f42 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
90012f34:	687b      	ldr	r3, [r7, #4]
90012f36:	7b5b      	ldrb	r3, [r3, #13]
90012f38:	f043 0308 	orr.w	r3, r3, #8
90012f3c:	b2da      	uxtb	r2, r3
90012f3e:	687b      	ldr	r3, [r7, #4]
90012f40:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
90012f42:	89fb      	ldrh	r3, [r7, #14]
90012f44:	2b08      	cmp	r3, #8
90012f46:	d003      	beq.n	90012f50 <ethernet_input+0xa0>
90012f48:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
90012f4c:	d014      	beq.n	90012f78 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
90012f4e:	e032      	b.n	90012fb6 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
90012f50:	683b      	ldr	r3, [r7, #0]
90012f52:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
90012f56:	f003 0308 	and.w	r3, r3, #8
90012f5a:	2b00      	cmp	r3, #0
90012f5c:	d024      	beq.n	90012fa8 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
90012f5e:	8afb      	ldrh	r3, [r7, #22]
90012f60:	4619      	mov	r1, r3
90012f62:	6878      	ldr	r0, [r7, #4]
90012f64:	f7f6 fee0 	bl	90009d28 <pbuf_remove_header>
90012f68:	4603      	mov	r3, r0
90012f6a:	2b00      	cmp	r3, #0
90012f6c:	d11e      	bne.n	90012fac <ethernet_input+0xfc>
        ip4_input(p, netif);
90012f6e:	6839      	ldr	r1, [r7, #0]
90012f70:	6878      	ldr	r0, [r7, #4]
90012f72:	f7fe ff21 	bl	90011db8 <ip4_input>
      break;
90012f76:	e013      	b.n	90012fa0 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
90012f78:	683b      	ldr	r3, [r7, #0]
90012f7a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
90012f7e:	f003 0308 	and.w	r3, r3, #8
90012f82:	2b00      	cmp	r3, #0
90012f84:	d014      	beq.n	90012fb0 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
90012f86:	8afb      	ldrh	r3, [r7, #22]
90012f88:	4619      	mov	r1, r3
90012f8a:	6878      	ldr	r0, [r7, #4]
90012f8c:	f7f6 fecc 	bl	90009d28 <pbuf_remove_header>
90012f90:	4603      	mov	r3, r0
90012f92:	2b00      	cmp	r3, #0
90012f94:	d10e      	bne.n	90012fb4 <ethernet_input+0x104>
        etharp_input(p, netif);
90012f96:	6839      	ldr	r1, [r7, #0]
90012f98:	6878      	ldr	r0, [r7, #4]
90012f9a:	f7fe f89b 	bl	900110d4 <etharp_input>
      break;
90012f9e:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
90012fa0:	2300      	movs	r3, #0
90012fa2:	e00c      	b.n	90012fbe <ethernet_input+0x10e>
    goto free_and_return;
90012fa4:	bf00      	nop
90012fa6:	e006      	b.n	90012fb6 <ethernet_input+0x106>
        goto free_and_return;
90012fa8:	bf00      	nop
90012faa:	e004      	b.n	90012fb6 <ethernet_input+0x106>
        goto free_and_return;
90012fac:	bf00      	nop
90012fae:	e002      	b.n	90012fb6 <ethernet_input+0x106>
        goto free_and_return;
90012fb0:	bf00      	nop
90012fb2:	e000      	b.n	90012fb6 <ethernet_input+0x106>
        goto free_and_return;
90012fb4:	bf00      	nop

free_and_return:
  pbuf_free(p);
90012fb6:	6878      	ldr	r0, [r7, #4]
90012fb8:	f7f6 ff3c 	bl	90009e34 <pbuf_free>
  return ERR_OK;
90012fbc:	2300      	movs	r3, #0
}
90012fbe:	4618      	mov	r0, r3
90012fc0:	3718      	adds	r7, #24
90012fc2:	46bd      	mov	sp, r7
90012fc4:	bd80      	pop	{r7, pc}
90012fc6:	bf00      	nop
90012fc8:	900174d4 	.word	0x900174d4

90012fcc <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
90012fcc:	b580      	push	{r7, lr}
90012fce:	b086      	sub	sp, #24
90012fd0:	af00      	add	r7, sp, #0
90012fd2:	60f8      	str	r0, [r7, #12]
90012fd4:	60b9      	str	r1, [r7, #8]
90012fd6:	607a      	str	r2, [r7, #4]
90012fd8:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
90012fda:	8c3b      	ldrh	r3, [r7, #32]
90012fdc:	4618      	mov	r0, r3
90012fde:	f7f5 fa39 	bl	90008454 <lwip_htons>
90012fe2:	4603      	mov	r3, r0
90012fe4:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
90012fe6:	210e      	movs	r1, #14
90012fe8:	68b8      	ldr	r0, [r7, #8]
90012fea:	f7f6 fe8d 	bl	90009d08 <pbuf_add_header>
90012fee:	4603      	mov	r3, r0
90012ff0:	2b00      	cmp	r3, #0
90012ff2:	d125      	bne.n	90013040 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
90012ff4:	68bb      	ldr	r3, [r7, #8]
90012ff6:	685b      	ldr	r3, [r3, #4]
90012ff8:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
90012ffa:	693b      	ldr	r3, [r7, #16]
90012ffc:	8afa      	ldrh	r2, [r7, #22]
90012ffe:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
90013000:	693b      	ldr	r3, [r7, #16]
90013002:	2206      	movs	r2, #6
90013004:	6839      	ldr	r1, [r7, #0]
90013006:	4618      	mov	r0, r3
90013008:	f000 fa6b 	bl	900134e2 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
9001300c:	693b      	ldr	r3, [r7, #16]
9001300e:	3306      	adds	r3, #6
90013010:	2206      	movs	r2, #6
90013012:	6879      	ldr	r1, [r7, #4]
90013014:	4618      	mov	r0, r3
90013016:	f000 fa64 	bl	900134e2 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
9001301a:	68fb      	ldr	r3, [r7, #12]
9001301c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
90013020:	2b06      	cmp	r3, #6
90013022:	d006      	beq.n	90013032 <ethernet_output+0x66>
90013024:	4b0a      	ldr	r3, [pc, #40]	; (90013050 <ethernet_output+0x84>)
90013026:	f44f 7299 	mov.w	r2, #306	; 0x132
9001302a:	490a      	ldr	r1, [pc, #40]	; (90013054 <ethernet_output+0x88>)
9001302c:	480a      	ldr	r0, [pc, #40]	; (90013058 <ethernet_output+0x8c>)
9001302e:	f000 fb03 	bl	90013638 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
90013032:	68fb      	ldr	r3, [r7, #12]
90013034:	699b      	ldr	r3, [r3, #24]
90013036:	68b9      	ldr	r1, [r7, #8]
90013038:	68f8      	ldr	r0, [r7, #12]
9001303a:	4798      	blx	r3
9001303c:	4603      	mov	r3, r0
9001303e:	e002      	b.n	90013046 <ethernet_output+0x7a>
      goto pbuf_header_failed;
90013040:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
90013042:	f06f 0301 	mvn.w	r3, #1
}
90013046:	4618      	mov	r0, r3
90013048:	3718      	adds	r7, #24
9001304a:	46bd      	mov	sp, r7
9001304c:	bd80      	pop	{r7, pc}
9001304e:	bf00      	nop
90013050:	900171c8 	.word	0x900171c8
90013054:	90017200 	.word	0x90017200
90013058:	90017234 	.word	0x90017234

9001305c <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
9001305c:	b580      	push	{r7, lr}
9001305e:	b086      	sub	sp, #24
90013060:	af00      	add	r7, sp, #0
90013062:	6078      	str	r0, [r7, #4]
90013064:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
90013066:	683b      	ldr	r3, [r7, #0]
90013068:	60bb      	str	r3, [r7, #8]
9001306a:	2304      	movs	r3, #4
9001306c:	60fb      	str	r3, [r7, #12]
9001306e:	2300      	movs	r3, #0
90013070:	613b      	str	r3, [r7, #16]
90013072:	2300      	movs	r3, #0
90013074:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
90013076:	f107 0308 	add.w	r3, r7, #8
9001307a:	2100      	movs	r1, #0
9001307c:	4618      	mov	r0, r3
9001307e:	f7f1 fcf3 	bl	90004a68 <osMessageCreate>
90013082:	4602      	mov	r2, r0
90013084:	687b      	ldr	r3, [r7, #4]
90013086:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
90013088:	687b      	ldr	r3, [r7, #4]
9001308a:	681b      	ldr	r3, [r3, #0]
9001308c:	2b00      	cmp	r3, #0
9001308e:	d102      	bne.n	90013096 <sys_mbox_new+0x3a>
    return ERR_MEM;
90013090:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
90013094:	e000      	b.n	90013098 <sys_mbox_new+0x3c>

  return ERR_OK;
90013096:	2300      	movs	r3, #0
}
90013098:	4618      	mov	r0, r3
9001309a:	3718      	adds	r7, #24
9001309c:	46bd      	mov	sp, r7
9001309e:	bd80      	pop	{r7, pc}

900130a0 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
900130a0:	b580      	push	{r7, lr}
900130a2:	b084      	sub	sp, #16
900130a4:	af00      	add	r7, sp, #0
900130a6:	6078      	str	r0, [r7, #4]
900130a8:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
900130aa:	687b      	ldr	r3, [r7, #4]
900130ac:	681b      	ldr	r3, [r3, #0]
900130ae:	6839      	ldr	r1, [r7, #0]
900130b0:	2200      	movs	r2, #0
900130b2:	4618      	mov	r0, r3
900130b4:	f7f1 fd00 	bl	90004ab8 <osMessagePut>
900130b8:	4603      	mov	r3, r0
900130ba:	2b00      	cmp	r3, #0
900130bc:	d102      	bne.n	900130c4 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
900130be:	2300      	movs	r3, #0
900130c0:	73fb      	strb	r3, [r7, #15]
900130c2:	e001      	b.n	900130c8 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
900130c4:	23ff      	movs	r3, #255	; 0xff
900130c6:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
900130c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
900130cc:	4618      	mov	r0, r3
900130ce:	3710      	adds	r7, #16
900130d0:	46bd      	mov	sp, r7
900130d2:	bd80      	pop	{r7, pc}

900130d4 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
900130d4:	b580      	push	{r7, lr}
900130d6:	b08c      	sub	sp, #48	; 0x30
900130d8:	af00      	add	r7, sp, #0
900130da:	61f8      	str	r0, [r7, #28]
900130dc:	61b9      	str	r1, [r7, #24]
900130de:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
900130e0:	f7f1 fb32 	bl	90004748 <osKernelSysTick>
900130e4:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
900130e6:	697b      	ldr	r3, [r7, #20]
900130e8:	2b00      	cmp	r3, #0
900130ea:	d017      	beq.n	9001311c <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
900130ec:	69fb      	ldr	r3, [r7, #28]
900130ee:	6819      	ldr	r1, [r3, #0]
900130f0:	f107 0320 	add.w	r3, r7, #32
900130f4:	697a      	ldr	r2, [r7, #20]
900130f6:	4618      	mov	r0, r3
900130f8:	f7f1 fd1e 	bl	90004b38 <osMessageGet>

    if(event.status == osEventMessage)
900130fc:	6a3b      	ldr	r3, [r7, #32]
900130fe:	2b10      	cmp	r3, #16
90013100:	d109      	bne.n	90013116 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
90013102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90013104:	461a      	mov	r2, r3
90013106:	69bb      	ldr	r3, [r7, #24]
90013108:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
9001310a:	f7f1 fb1d 	bl	90004748 <osKernelSysTick>
9001310e:	4602      	mov	r2, r0
90013110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90013112:	1ad3      	subs	r3, r2, r3
90013114:	e019      	b.n	9001314a <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
90013116:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
9001311a:	e016      	b.n	9001314a <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
9001311c:	69fb      	ldr	r3, [r7, #28]
9001311e:	6819      	ldr	r1, [r3, #0]
90013120:	463b      	mov	r3, r7
90013122:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
90013126:	4618      	mov	r0, r3
90013128:	f7f1 fd06 	bl	90004b38 <osMessageGet>
9001312c:	f107 0320 	add.w	r3, r7, #32
90013130:	463a      	mov	r2, r7
90013132:	ca07      	ldmia	r2, {r0, r1, r2}
90013134:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
90013138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9001313a:	461a      	mov	r2, r3
9001313c:	69bb      	ldr	r3, [r7, #24]
9001313e:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
90013140:	f7f1 fb02 	bl	90004748 <osKernelSysTick>
90013144:	4602      	mov	r2, r0
90013146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90013148:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
9001314a:	4618      	mov	r0, r3
9001314c:	3730      	adds	r7, #48	; 0x30
9001314e:	46bd      	mov	sp, r7
90013150:	bd80      	pop	{r7, pc}

90013152 <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
90013152:	b480      	push	{r7}
90013154:	b083      	sub	sp, #12
90013156:	af00      	add	r7, sp, #0
90013158:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
9001315a:	687b      	ldr	r3, [r7, #4]
9001315c:	681b      	ldr	r3, [r3, #0]
9001315e:	2b00      	cmp	r3, #0
90013160:	d101      	bne.n	90013166 <sys_mbox_valid+0x14>
    return 0;
90013162:	2300      	movs	r3, #0
90013164:	e000      	b.n	90013168 <sys_mbox_valid+0x16>
  else
    return 1;
90013166:	2301      	movs	r3, #1
}
90013168:	4618      	mov	r0, r3
9001316a:	370c      	adds	r7, #12
9001316c:	46bd      	mov	sp, r7
9001316e:	f85d 7b04 	ldr.w	r7, [sp], #4
90013172:	4770      	bx	lr

90013174 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
90013174:	b580      	push	{r7, lr}
90013176:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
90013178:	4803      	ldr	r0, [pc, #12]	; (90013188 <sys_init+0x14>)
9001317a:	f7f1 fb55 	bl	90004828 <osMutexCreate>
9001317e:	4603      	mov	r3, r0
90013180:	4a02      	ldr	r2, [pc, #8]	; (9001318c <sys_init+0x18>)
90013182:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
90013184:	bf00      	nop
90013186:	bd80      	pop	{r7, pc}
90013188:	900174e4 	.word	0x900174e4
9001318c:	2401117c 	.word	0x2401117c

90013190 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
90013190:	b580      	push	{r7, lr}
90013192:	b084      	sub	sp, #16
90013194:	af00      	add	r7, sp, #0
90013196:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
90013198:	2300      	movs	r3, #0
9001319a:	60bb      	str	r3, [r7, #8]
9001319c:	2300      	movs	r3, #0
9001319e:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
900131a0:	f107 0308 	add.w	r3, r7, #8
900131a4:	4618      	mov	r0, r3
900131a6:	f7f1 fb3f 	bl	90004828 <osMutexCreate>
900131aa:	4602      	mov	r2, r0
900131ac:	687b      	ldr	r3, [r7, #4]
900131ae:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
900131b0:	687b      	ldr	r3, [r7, #4]
900131b2:	681b      	ldr	r3, [r3, #0]
900131b4:	2b00      	cmp	r3, #0
900131b6:	d102      	bne.n	900131be <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
900131b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
900131bc:	e000      	b.n	900131c0 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
900131be:	2300      	movs	r3, #0
}
900131c0:	4618      	mov	r0, r3
900131c2:	3710      	adds	r7, #16
900131c4:	46bd      	mov	sp, r7
900131c6:	bd80      	pop	{r7, pc}

900131c8 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
900131c8:	b580      	push	{r7, lr}
900131ca:	b082      	sub	sp, #8
900131cc:	af00      	add	r7, sp, #0
900131ce:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
900131d0:	687b      	ldr	r3, [r7, #4]
900131d2:	681b      	ldr	r3, [r3, #0]
900131d4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
900131d8:	4618      	mov	r0, r3
900131da:	f7f1 fb3d 	bl	90004858 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
900131de:	bf00      	nop
900131e0:	3708      	adds	r7, #8
900131e2:	46bd      	mov	sp, r7
900131e4:	bd80      	pop	{r7, pc}

900131e6 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
900131e6:	b580      	push	{r7, lr}
900131e8:	b082      	sub	sp, #8
900131ea:	af00      	add	r7, sp, #0
900131ec:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
900131ee:	687b      	ldr	r3, [r7, #4]
900131f0:	681b      	ldr	r3, [r3, #0]
900131f2:	4618      	mov	r0, r3
900131f4:	f7f1 fb7e 	bl	900048f4 <osMutexRelease>
}
900131f8:	bf00      	nop
900131fa:	3708      	adds	r7, #8
900131fc:	46bd      	mov	sp, r7
900131fe:	bd80      	pop	{r7, pc}

90013200 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
90013200:	b580      	push	{r7, lr}
90013202:	b08c      	sub	sp, #48	; 0x30
90013204:	af00      	add	r7, sp, #0
90013206:	60f8      	str	r0, [r7, #12]
90013208:	60b9      	str	r1, [r7, #8]
9001320a:	607a      	str	r2, [r7, #4]
9001320c:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
9001320e:	f107 0314 	add.w	r3, r7, #20
90013212:	2200      	movs	r2, #0
90013214:	601a      	str	r2, [r3, #0]
90013216:	605a      	str	r2, [r3, #4]
90013218:	609a      	str	r2, [r3, #8]
9001321a:	60da      	str	r2, [r3, #12]
9001321c:	611a      	str	r2, [r3, #16]
9001321e:	615a      	str	r2, [r3, #20]
90013220:	619a      	str	r2, [r3, #24]
90013222:	68fb      	ldr	r3, [r7, #12]
90013224:	617b      	str	r3, [r7, #20]
90013226:	68bb      	ldr	r3, [r7, #8]
90013228:	61bb      	str	r3, [r7, #24]
9001322a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9001322c:	b21b      	sxth	r3, r3
9001322e:	83bb      	strh	r3, [r7, #28]
90013230:	683b      	ldr	r3, [r7, #0]
90013232:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
90013234:	f107 0314 	add.w	r3, r7, #20
90013238:	6879      	ldr	r1, [r7, #4]
9001323a:	4618      	mov	r0, r3
9001323c:	f7f1 fa94 	bl	90004768 <osThreadCreate>
90013240:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
90013242:	4618      	mov	r0, r3
90013244:	3730      	adds	r7, #48	; 0x30
90013246:	46bd      	mov	sp, r7
90013248:	bd80      	pop	{r7, pc}
	...

9001324c <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
9001324c:	b580      	push	{r7, lr}
9001324e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
90013250:	4b04      	ldr	r3, [pc, #16]	; (90013264 <sys_arch_protect+0x18>)
90013252:	681b      	ldr	r3, [r3, #0]
90013254:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
90013258:	4618      	mov	r0, r3
9001325a:	f7f1 fafd 	bl	90004858 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
9001325e:	2301      	movs	r3, #1
}
90013260:	4618      	mov	r0, r3
90013262:	bd80      	pop	{r7, pc}
90013264:	2401117c 	.word	0x2401117c

90013268 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
90013268:	b580      	push	{r7, lr}
9001326a:	b082      	sub	sp, #8
9001326c:	af00      	add	r7, sp, #0
9001326e:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
90013270:	4b04      	ldr	r3, [pc, #16]	; (90013284 <sys_arch_unprotect+0x1c>)
90013272:	681b      	ldr	r3, [r3, #0]
90013274:	4618      	mov	r0, r3
90013276:	f7f1 fb3d 	bl	900048f4 <osMutexRelease>
}
9001327a:	bf00      	nop
9001327c:	3708      	adds	r7, #8
9001327e:	46bd      	mov	sp, r7
90013280:	bd80      	pop	{r7, pc}
90013282:	bf00      	nop
90013284:	2401117c 	.word	0x2401117c

90013288 <std>:
90013288:	2300      	movs	r3, #0
9001328a:	b510      	push	{r4, lr}
9001328c:	4604      	mov	r4, r0
9001328e:	e9c0 3300 	strd	r3, r3, [r0]
90013292:	e9c0 3304 	strd	r3, r3, [r0, #16]
90013296:	6083      	str	r3, [r0, #8]
90013298:	8181      	strh	r1, [r0, #12]
9001329a:	6643      	str	r3, [r0, #100]	; 0x64
9001329c:	81c2      	strh	r2, [r0, #14]
9001329e:	6183      	str	r3, [r0, #24]
900132a0:	4619      	mov	r1, r3
900132a2:	2208      	movs	r2, #8
900132a4:	305c      	adds	r0, #92	; 0x5c
900132a6:	f000 f92a 	bl	900134fe <memset>
900132aa:	4b05      	ldr	r3, [pc, #20]	; (900132c0 <std+0x38>)
900132ac:	6263      	str	r3, [r4, #36]	; 0x24
900132ae:	4b05      	ldr	r3, [pc, #20]	; (900132c4 <std+0x3c>)
900132b0:	62a3      	str	r3, [r4, #40]	; 0x28
900132b2:	4b05      	ldr	r3, [pc, #20]	; (900132c8 <std+0x40>)
900132b4:	62e3      	str	r3, [r4, #44]	; 0x2c
900132b6:	4b05      	ldr	r3, [pc, #20]	; (900132cc <std+0x44>)
900132b8:	6224      	str	r4, [r4, #32]
900132ba:	6323      	str	r3, [r4, #48]	; 0x30
900132bc:	bd10      	pop	{r4, pc}
900132be:	bf00      	nop
900132c0:	900137d9 	.word	0x900137d9
900132c4:	900137fb 	.word	0x900137fb
900132c8:	90013833 	.word	0x90013833
900132cc:	90013857 	.word	0x90013857

900132d0 <_cleanup_r>:
900132d0:	4901      	ldr	r1, [pc, #4]	; (900132d8 <_cleanup_r+0x8>)
900132d2:	f000 b8af 	b.w	90013434 <_fwalk_reent>
900132d6:	bf00      	nop
900132d8:	90013a2d 	.word	0x90013a2d

900132dc <__sfmoreglue>:
900132dc:	b570      	push	{r4, r5, r6, lr}
900132de:	2268      	movs	r2, #104	; 0x68
900132e0:	1e4d      	subs	r5, r1, #1
900132e2:	4355      	muls	r5, r2
900132e4:	460e      	mov	r6, r1
900132e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
900132ea:	f000 f931 	bl	90013550 <_malloc_r>
900132ee:	4604      	mov	r4, r0
900132f0:	b140      	cbz	r0, 90013304 <__sfmoreglue+0x28>
900132f2:	2100      	movs	r1, #0
900132f4:	e9c0 1600 	strd	r1, r6, [r0]
900132f8:	300c      	adds	r0, #12
900132fa:	60a0      	str	r0, [r4, #8]
900132fc:	f105 0268 	add.w	r2, r5, #104	; 0x68
90013300:	f000 f8fd 	bl	900134fe <memset>
90013304:	4620      	mov	r0, r4
90013306:	bd70      	pop	{r4, r5, r6, pc}

90013308 <__sfp_lock_acquire>:
90013308:	4801      	ldr	r0, [pc, #4]	; (90013310 <__sfp_lock_acquire+0x8>)
9001330a:	f000 b8d8 	b.w	900134be <__retarget_lock_acquire_recursive>
9001330e:	bf00      	nop
90013310:	24011181 	.word	0x24011181

90013314 <__sfp_lock_release>:
90013314:	4801      	ldr	r0, [pc, #4]	; (9001331c <__sfp_lock_release+0x8>)
90013316:	f000 b8d3 	b.w	900134c0 <__retarget_lock_release_recursive>
9001331a:	bf00      	nop
9001331c:	24011181 	.word	0x24011181

90013320 <__sinit_lock_acquire>:
90013320:	4801      	ldr	r0, [pc, #4]	; (90013328 <__sinit_lock_acquire+0x8>)
90013322:	f000 b8cc 	b.w	900134be <__retarget_lock_acquire_recursive>
90013326:	bf00      	nop
90013328:	24011182 	.word	0x24011182

9001332c <__sinit_lock_release>:
9001332c:	4801      	ldr	r0, [pc, #4]	; (90013334 <__sinit_lock_release+0x8>)
9001332e:	f000 b8c7 	b.w	900134c0 <__retarget_lock_release_recursive>
90013332:	bf00      	nop
90013334:	24011182 	.word	0x24011182

90013338 <__sinit>:
90013338:	b510      	push	{r4, lr}
9001333a:	4604      	mov	r4, r0
9001333c:	f7ff fff0 	bl	90013320 <__sinit_lock_acquire>
90013340:	69a3      	ldr	r3, [r4, #24]
90013342:	b11b      	cbz	r3, 9001334c <__sinit+0x14>
90013344:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
90013348:	f7ff bff0 	b.w	9001332c <__sinit_lock_release>
9001334c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
90013350:	6523      	str	r3, [r4, #80]	; 0x50
90013352:	4b13      	ldr	r3, [pc, #76]	; (900133a0 <__sinit+0x68>)
90013354:	4a13      	ldr	r2, [pc, #76]	; (900133a4 <__sinit+0x6c>)
90013356:	681b      	ldr	r3, [r3, #0]
90013358:	62a2      	str	r2, [r4, #40]	; 0x28
9001335a:	42a3      	cmp	r3, r4
9001335c:	bf04      	itt	eq
9001335e:	2301      	moveq	r3, #1
90013360:	61a3      	streq	r3, [r4, #24]
90013362:	4620      	mov	r0, r4
90013364:	f000 f820 	bl	900133a8 <__sfp>
90013368:	6060      	str	r0, [r4, #4]
9001336a:	4620      	mov	r0, r4
9001336c:	f000 f81c 	bl	900133a8 <__sfp>
90013370:	60a0      	str	r0, [r4, #8]
90013372:	4620      	mov	r0, r4
90013374:	f000 f818 	bl	900133a8 <__sfp>
90013378:	2200      	movs	r2, #0
9001337a:	60e0      	str	r0, [r4, #12]
9001337c:	2104      	movs	r1, #4
9001337e:	6860      	ldr	r0, [r4, #4]
90013380:	f7ff ff82 	bl	90013288 <std>
90013384:	68a0      	ldr	r0, [r4, #8]
90013386:	2201      	movs	r2, #1
90013388:	2109      	movs	r1, #9
9001338a:	f7ff ff7d 	bl	90013288 <std>
9001338e:	68e0      	ldr	r0, [r4, #12]
90013390:	2202      	movs	r2, #2
90013392:	2112      	movs	r1, #18
90013394:	f7ff ff78 	bl	90013288 <std>
90013398:	2301      	movs	r3, #1
9001339a:	61a3      	str	r3, [r4, #24]
9001339c:	e7d2      	b.n	90013344 <__sinit+0xc>
9001339e:	bf00      	nop
900133a0:	9001754c 	.word	0x9001754c
900133a4:	900132d1 	.word	0x900132d1

900133a8 <__sfp>:
900133a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
900133aa:	4607      	mov	r7, r0
900133ac:	f7ff ffac 	bl	90013308 <__sfp_lock_acquire>
900133b0:	4b1e      	ldr	r3, [pc, #120]	; (9001342c <__sfp+0x84>)
900133b2:	681e      	ldr	r6, [r3, #0]
900133b4:	69b3      	ldr	r3, [r6, #24]
900133b6:	b913      	cbnz	r3, 900133be <__sfp+0x16>
900133b8:	4630      	mov	r0, r6
900133ba:	f7ff ffbd 	bl	90013338 <__sinit>
900133be:	3648      	adds	r6, #72	; 0x48
900133c0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
900133c4:	3b01      	subs	r3, #1
900133c6:	d503      	bpl.n	900133d0 <__sfp+0x28>
900133c8:	6833      	ldr	r3, [r6, #0]
900133ca:	b30b      	cbz	r3, 90013410 <__sfp+0x68>
900133cc:	6836      	ldr	r6, [r6, #0]
900133ce:	e7f7      	b.n	900133c0 <__sfp+0x18>
900133d0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
900133d4:	b9d5      	cbnz	r5, 9001340c <__sfp+0x64>
900133d6:	4b16      	ldr	r3, [pc, #88]	; (90013430 <__sfp+0x88>)
900133d8:	60e3      	str	r3, [r4, #12]
900133da:	f104 0058 	add.w	r0, r4, #88	; 0x58
900133de:	6665      	str	r5, [r4, #100]	; 0x64
900133e0:	f000 f86c 	bl	900134bc <__retarget_lock_init_recursive>
900133e4:	f7ff ff96 	bl	90013314 <__sfp_lock_release>
900133e8:	e9c4 5501 	strd	r5, r5, [r4, #4]
900133ec:	e9c4 5504 	strd	r5, r5, [r4, #16]
900133f0:	6025      	str	r5, [r4, #0]
900133f2:	61a5      	str	r5, [r4, #24]
900133f4:	2208      	movs	r2, #8
900133f6:	4629      	mov	r1, r5
900133f8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
900133fc:	f000 f87f 	bl	900134fe <memset>
90013400:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
90013404:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
90013408:	4620      	mov	r0, r4
9001340a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
9001340c:	3468      	adds	r4, #104	; 0x68
9001340e:	e7d9      	b.n	900133c4 <__sfp+0x1c>
90013410:	2104      	movs	r1, #4
90013412:	4638      	mov	r0, r7
90013414:	f7ff ff62 	bl	900132dc <__sfmoreglue>
90013418:	4604      	mov	r4, r0
9001341a:	6030      	str	r0, [r6, #0]
9001341c:	2800      	cmp	r0, #0
9001341e:	d1d5      	bne.n	900133cc <__sfp+0x24>
90013420:	f7ff ff78 	bl	90013314 <__sfp_lock_release>
90013424:	230c      	movs	r3, #12
90013426:	603b      	str	r3, [r7, #0]
90013428:	e7ee      	b.n	90013408 <__sfp+0x60>
9001342a:	bf00      	nop
9001342c:	9001754c 	.word	0x9001754c
90013430:	ffff0001 	.word	0xffff0001

90013434 <_fwalk_reent>:
90013434:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
90013438:	4606      	mov	r6, r0
9001343a:	4688      	mov	r8, r1
9001343c:	f100 0448 	add.w	r4, r0, #72	; 0x48
90013440:	2700      	movs	r7, #0
90013442:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
90013446:	f1b9 0901 	subs.w	r9, r9, #1
9001344a:	d505      	bpl.n	90013458 <_fwalk_reent+0x24>
9001344c:	6824      	ldr	r4, [r4, #0]
9001344e:	2c00      	cmp	r4, #0
90013450:	d1f7      	bne.n	90013442 <_fwalk_reent+0xe>
90013452:	4638      	mov	r0, r7
90013454:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
90013458:	89ab      	ldrh	r3, [r5, #12]
9001345a:	2b01      	cmp	r3, #1
9001345c:	d907      	bls.n	9001346e <_fwalk_reent+0x3a>
9001345e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
90013462:	3301      	adds	r3, #1
90013464:	d003      	beq.n	9001346e <_fwalk_reent+0x3a>
90013466:	4629      	mov	r1, r5
90013468:	4630      	mov	r0, r6
9001346a:	47c0      	blx	r8
9001346c:	4307      	orrs	r7, r0
9001346e:	3568      	adds	r5, #104	; 0x68
90013470:	e7e9      	b.n	90013446 <_fwalk_reent+0x12>
	...

90013474 <__libc_init_array>:
90013474:	b570      	push	{r4, r5, r6, lr}
90013476:	4d0d      	ldr	r5, [pc, #52]	; (900134ac <__libc_init_array+0x38>)
90013478:	4c0d      	ldr	r4, [pc, #52]	; (900134b0 <__libc_init_array+0x3c>)
9001347a:	1b64      	subs	r4, r4, r5
9001347c:	10a4      	asrs	r4, r4, #2
9001347e:	2600      	movs	r6, #0
90013480:	42a6      	cmp	r6, r4
90013482:	d109      	bne.n	90013498 <__libc_init_array+0x24>
90013484:	4d0b      	ldr	r5, [pc, #44]	; (900134b4 <__libc_init_array+0x40>)
90013486:	4c0c      	ldr	r4, [pc, #48]	; (900134b8 <__libc_init_array+0x44>)
90013488:	f001 f822 	bl	900144d0 <_init>
9001348c:	1b64      	subs	r4, r4, r5
9001348e:	10a4      	asrs	r4, r4, #2
90013490:	2600      	movs	r6, #0
90013492:	42a6      	cmp	r6, r4
90013494:	d105      	bne.n	900134a2 <__libc_init_array+0x2e>
90013496:	bd70      	pop	{r4, r5, r6, pc}
90013498:	f855 3b04 	ldr.w	r3, [r5], #4
9001349c:	4798      	blx	r3
9001349e:	3601      	adds	r6, #1
900134a0:	e7ee      	b.n	90013480 <__libc_init_array+0xc>
900134a2:	f855 3b04 	ldr.w	r3, [r5], #4
900134a6:	4798      	blx	r3
900134a8:	3601      	adds	r6, #1
900134aa:	e7f2      	b.n	90013492 <__libc_init_array+0x1e>
900134ac:	90017634 	.word	0x90017634
900134b0:	90017634 	.word	0x90017634
900134b4:	90017634 	.word	0x90017634
900134b8:	90017638 	.word	0x90017638

900134bc <__retarget_lock_init_recursive>:
900134bc:	4770      	bx	lr

900134be <__retarget_lock_acquire_recursive>:
900134be:	4770      	bx	lr

900134c0 <__retarget_lock_release_recursive>:
900134c0:	4770      	bx	lr

900134c2 <memcmp>:
900134c2:	b510      	push	{r4, lr}
900134c4:	3901      	subs	r1, #1
900134c6:	4402      	add	r2, r0
900134c8:	4290      	cmp	r0, r2
900134ca:	d101      	bne.n	900134d0 <memcmp+0xe>
900134cc:	2000      	movs	r0, #0
900134ce:	e005      	b.n	900134dc <memcmp+0x1a>
900134d0:	7803      	ldrb	r3, [r0, #0]
900134d2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
900134d6:	42a3      	cmp	r3, r4
900134d8:	d001      	beq.n	900134de <memcmp+0x1c>
900134da:	1b18      	subs	r0, r3, r4
900134dc:	bd10      	pop	{r4, pc}
900134de:	3001      	adds	r0, #1
900134e0:	e7f2      	b.n	900134c8 <memcmp+0x6>

900134e2 <memcpy>:
900134e2:	440a      	add	r2, r1
900134e4:	4291      	cmp	r1, r2
900134e6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
900134ea:	d100      	bne.n	900134ee <memcpy+0xc>
900134ec:	4770      	bx	lr
900134ee:	b510      	push	{r4, lr}
900134f0:	f811 4b01 	ldrb.w	r4, [r1], #1
900134f4:	f803 4f01 	strb.w	r4, [r3, #1]!
900134f8:	4291      	cmp	r1, r2
900134fa:	d1f9      	bne.n	900134f0 <memcpy+0xe>
900134fc:	bd10      	pop	{r4, pc}

900134fe <memset>:
900134fe:	4402      	add	r2, r0
90013500:	4603      	mov	r3, r0
90013502:	4293      	cmp	r3, r2
90013504:	d100      	bne.n	90013508 <memset+0xa>
90013506:	4770      	bx	lr
90013508:	f803 1b01 	strb.w	r1, [r3], #1
9001350c:	e7f9      	b.n	90013502 <memset+0x4>
	...

90013510 <sbrk_aligned>:
90013510:	b570      	push	{r4, r5, r6, lr}
90013512:	4e0e      	ldr	r6, [pc, #56]	; (9001354c <sbrk_aligned+0x3c>)
90013514:	460c      	mov	r4, r1
90013516:	6831      	ldr	r1, [r6, #0]
90013518:	4605      	mov	r5, r0
9001351a:	b911      	cbnz	r1, 90013522 <sbrk_aligned+0x12>
9001351c:	f000 f94c 	bl	900137b8 <_sbrk_r>
90013520:	6030      	str	r0, [r6, #0]
90013522:	4621      	mov	r1, r4
90013524:	4628      	mov	r0, r5
90013526:	f000 f947 	bl	900137b8 <_sbrk_r>
9001352a:	1c43      	adds	r3, r0, #1
9001352c:	d00a      	beq.n	90013544 <sbrk_aligned+0x34>
9001352e:	1cc4      	adds	r4, r0, #3
90013530:	f024 0403 	bic.w	r4, r4, #3
90013534:	42a0      	cmp	r0, r4
90013536:	d007      	beq.n	90013548 <sbrk_aligned+0x38>
90013538:	1a21      	subs	r1, r4, r0
9001353a:	4628      	mov	r0, r5
9001353c:	f000 f93c 	bl	900137b8 <_sbrk_r>
90013540:	3001      	adds	r0, #1
90013542:	d101      	bne.n	90013548 <sbrk_aligned+0x38>
90013544:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
90013548:	4620      	mov	r0, r4
9001354a:	bd70      	pop	{r4, r5, r6, pc}
9001354c:	24011188 	.word	0x24011188

90013550 <_malloc_r>:
90013550:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90013554:	1ccd      	adds	r5, r1, #3
90013556:	f025 0503 	bic.w	r5, r5, #3
9001355a:	3508      	adds	r5, #8
9001355c:	2d0c      	cmp	r5, #12
9001355e:	bf38      	it	cc
90013560:	250c      	movcc	r5, #12
90013562:	2d00      	cmp	r5, #0
90013564:	4607      	mov	r7, r0
90013566:	db01      	blt.n	9001356c <_malloc_r+0x1c>
90013568:	42a9      	cmp	r1, r5
9001356a:	d905      	bls.n	90013578 <_malloc_r+0x28>
9001356c:	230c      	movs	r3, #12
9001356e:	603b      	str	r3, [r7, #0]
90013570:	2600      	movs	r6, #0
90013572:	4630      	mov	r0, r6
90013574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90013578:	4e2e      	ldr	r6, [pc, #184]	; (90013634 <_malloc_r+0xe4>)
9001357a:	f000 fabf 	bl	90013afc <__malloc_lock>
9001357e:	6833      	ldr	r3, [r6, #0]
90013580:	461c      	mov	r4, r3
90013582:	bb34      	cbnz	r4, 900135d2 <_malloc_r+0x82>
90013584:	4629      	mov	r1, r5
90013586:	4638      	mov	r0, r7
90013588:	f7ff ffc2 	bl	90013510 <sbrk_aligned>
9001358c:	1c43      	adds	r3, r0, #1
9001358e:	4604      	mov	r4, r0
90013590:	d14d      	bne.n	9001362e <_malloc_r+0xde>
90013592:	6834      	ldr	r4, [r6, #0]
90013594:	4626      	mov	r6, r4
90013596:	2e00      	cmp	r6, #0
90013598:	d140      	bne.n	9001361c <_malloc_r+0xcc>
9001359a:	6823      	ldr	r3, [r4, #0]
9001359c:	4631      	mov	r1, r6
9001359e:	4638      	mov	r0, r7
900135a0:	eb04 0803 	add.w	r8, r4, r3
900135a4:	f000 f908 	bl	900137b8 <_sbrk_r>
900135a8:	4580      	cmp	r8, r0
900135aa:	d13a      	bne.n	90013622 <_malloc_r+0xd2>
900135ac:	6821      	ldr	r1, [r4, #0]
900135ae:	3503      	adds	r5, #3
900135b0:	1a6d      	subs	r5, r5, r1
900135b2:	f025 0503 	bic.w	r5, r5, #3
900135b6:	3508      	adds	r5, #8
900135b8:	2d0c      	cmp	r5, #12
900135ba:	bf38      	it	cc
900135bc:	250c      	movcc	r5, #12
900135be:	4629      	mov	r1, r5
900135c0:	4638      	mov	r0, r7
900135c2:	f7ff ffa5 	bl	90013510 <sbrk_aligned>
900135c6:	3001      	adds	r0, #1
900135c8:	d02b      	beq.n	90013622 <_malloc_r+0xd2>
900135ca:	6823      	ldr	r3, [r4, #0]
900135cc:	442b      	add	r3, r5
900135ce:	6023      	str	r3, [r4, #0]
900135d0:	e00e      	b.n	900135f0 <_malloc_r+0xa0>
900135d2:	6822      	ldr	r2, [r4, #0]
900135d4:	1b52      	subs	r2, r2, r5
900135d6:	d41e      	bmi.n	90013616 <_malloc_r+0xc6>
900135d8:	2a0b      	cmp	r2, #11
900135da:	d916      	bls.n	9001360a <_malloc_r+0xba>
900135dc:	1961      	adds	r1, r4, r5
900135de:	42a3      	cmp	r3, r4
900135e0:	6025      	str	r5, [r4, #0]
900135e2:	bf18      	it	ne
900135e4:	6059      	strne	r1, [r3, #4]
900135e6:	6863      	ldr	r3, [r4, #4]
900135e8:	bf08      	it	eq
900135ea:	6031      	streq	r1, [r6, #0]
900135ec:	5162      	str	r2, [r4, r5]
900135ee:	604b      	str	r3, [r1, #4]
900135f0:	4638      	mov	r0, r7
900135f2:	f104 060b 	add.w	r6, r4, #11
900135f6:	f000 fa87 	bl	90013b08 <__malloc_unlock>
900135fa:	f026 0607 	bic.w	r6, r6, #7
900135fe:	1d23      	adds	r3, r4, #4
90013600:	1af2      	subs	r2, r6, r3
90013602:	d0b6      	beq.n	90013572 <_malloc_r+0x22>
90013604:	1b9b      	subs	r3, r3, r6
90013606:	50a3      	str	r3, [r4, r2]
90013608:	e7b3      	b.n	90013572 <_malloc_r+0x22>
9001360a:	6862      	ldr	r2, [r4, #4]
9001360c:	42a3      	cmp	r3, r4
9001360e:	bf0c      	ite	eq
90013610:	6032      	streq	r2, [r6, #0]
90013612:	605a      	strne	r2, [r3, #4]
90013614:	e7ec      	b.n	900135f0 <_malloc_r+0xa0>
90013616:	4623      	mov	r3, r4
90013618:	6864      	ldr	r4, [r4, #4]
9001361a:	e7b2      	b.n	90013582 <_malloc_r+0x32>
9001361c:	4634      	mov	r4, r6
9001361e:	6876      	ldr	r6, [r6, #4]
90013620:	e7b9      	b.n	90013596 <_malloc_r+0x46>
90013622:	230c      	movs	r3, #12
90013624:	603b      	str	r3, [r7, #0]
90013626:	4638      	mov	r0, r7
90013628:	f000 fa6e 	bl	90013b08 <__malloc_unlock>
9001362c:	e7a1      	b.n	90013572 <_malloc_r+0x22>
9001362e:	6025      	str	r5, [r4, #0]
90013630:	e7de      	b.n	900135f0 <_malloc_r+0xa0>
90013632:	bf00      	nop
90013634:	24011184 	.word	0x24011184

90013638 <iprintf>:
90013638:	b40f      	push	{r0, r1, r2, r3}
9001363a:	4b0a      	ldr	r3, [pc, #40]	; (90013664 <iprintf+0x2c>)
9001363c:	b513      	push	{r0, r1, r4, lr}
9001363e:	681c      	ldr	r4, [r3, #0]
90013640:	b124      	cbz	r4, 9001364c <iprintf+0x14>
90013642:	69a3      	ldr	r3, [r4, #24]
90013644:	b913      	cbnz	r3, 9001364c <iprintf+0x14>
90013646:	4620      	mov	r0, r4
90013648:	f7ff fe76 	bl	90013338 <__sinit>
9001364c:	ab05      	add	r3, sp, #20
9001364e:	9a04      	ldr	r2, [sp, #16]
90013650:	68a1      	ldr	r1, [r4, #8]
90013652:	9301      	str	r3, [sp, #4]
90013654:	4620      	mov	r0, r4
90013656:	f000 fad3 	bl	90013c00 <_vfiprintf_r>
9001365a:	b002      	add	sp, #8
9001365c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
90013660:	b004      	add	sp, #16
90013662:	4770      	bx	lr
90013664:	24000034 	.word	0x24000034

90013668 <rand>:
90013668:	4b16      	ldr	r3, [pc, #88]	; (900136c4 <rand+0x5c>)
9001366a:	b510      	push	{r4, lr}
9001366c:	681c      	ldr	r4, [r3, #0]
9001366e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
90013670:	b9b3      	cbnz	r3, 900136a0 <rand+0x38>
90013672:	2018      	movs	r0, #24
90013674:	f000 fa3a 	bl	90013aec <malloc>
90013678:	63a0      	str	r0, [r4, #56]	; 0x38
9001367a:	b928      	cbnz	r0, 90013688 <rand+0x20>
9001367c:	4602      	mov	r2, r0
9001367e:	4b12      	ldr	r3, [pc, #72]	; (900136c8 <rand+0x60>)
90013680:	4812      	ldr	r0, [pc, #72]	; (900136cc <rand+0x64>)
90013682:	214e      	movs	r1, #78	; 0x4e
90013684:	f000 f91e 	bl	900138c4 <__assert_func>
90013688:	4a11      	ldr	r2, [pc, #68]	; (900136d0 <rand+0x68>)
9001368a:	4b12      	ldr	r3, [pc, #72]	; (900136d4 <rand+0x6c>)
9001368c:	e9c0 2300 	strd	r2, r3, [r0]
90013690:	4b11      	ldr	r3, [pc, #68]	; (900136d8 <rand+0x70>)
90013692:	6083      	str	r3, [r0, #8]
90013694:	230b      	movs	r3, #11
90013696:	8183      	strh	r3, [r0, #12]
90013698:	2201      	movs	r2, #1
9001369a:	2300      	movs	r3, #0
9001369c:	e9c0 2304 	strd	r2, r3, [r0, #16]
900136a0:	6ba4      	ldr	r4, [r4, #56]	; 0x38
900136a2:	4a0e      	ldr	r2, [pc, #56]	; (900136dc <rand+0x74>)
900136a4:	6920      	ldr	r0, [r4, #16]
900136a6:	6963      	ldr	r3, [r4, #20]
900136a8:	490d      	ldr	r1, [pc, #52]	; (900136e0 <rand+0x78>)
900136aa:	4342      	muls	r2, r0
900136ac:	fb01 2203 	mla	r2, r1, r3, r2
900136b0:	fba0 0101 	umull	r0, r1, r0, r1
900136b4:	1c43      	adds	r3, r0, #1
900136b6:	eb42 0001 	adc.w	r0, r2, r1
900136ba:	e9c4 3004 	strd	r3, r0, [r4, #16]
900136be:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
900136c2:	bd10      	pop	{r4, pc}
900136c4:	24000034 	.word	0x24000034
900136c8:	90017550 	.word	0x90017550
900136cc:	90017567 	.word	0x90017567
900136d0:	abcd330e 	.word	0xabcd330e
900136d4:	e66d1234 	.word	0xe66d1234
900136d8:	0005deec 	.word	0x0005deec
900136dc:	5851f42d 	.word	0x5851f42d
900136e0:	4c957f2d 	.word	0x4c957f2d

900136e4 <cleanup_glue>:
900136e4:	b538      	push	{r3, r4, r5, lr}
900136e6:	460c      	mov	r4, r1
900136e8:	6809      	ldr	r1, [r1, #0]
900136ea:	4605      	mov	r5, r0
900136ec:	b109      	cbz	r1, 900136f2 <cleanup_glue+0xe>
900136ee:	f7ff fff9 	bl	900136e4 <cleanup_glue>
900136f2:	4621      	mov	r1, r4
900136f4:	4628      	mov	r0, r5
900136f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
900136fa:	f000 ba0b 	b.w	90013b14 <_free_r>
	...

90013700 <_reclaim_reent>:
90013700:	4b2c      	ldr	r3, [pc, #176]	; (900137b4 <_reclaim_reent+0xb4>)
90013702:	681b      	ldr	r3, [r3, #0]
90013704:	4283      	cmp	r3, r0
90013706:	b570      	push	{r4, r5, r6, lr}
90013708:	4604      	mov	r4, r0
9001370a:	d051      	beq.n	900137b0 <_reclaim_reent+0xb0>
9001370c:	6a43      	ldr	r3, [r0, #36]	; 0x24
9001370e:	b143      	cbz	r3, 90013722 <_reclaim_reent+0x22>
90013710:	68db      	ldr	r3, [r3, #12]
90013712:	2b00      	cmp	r3, #0
90013714:	d14a      	bne.n	900137ac <_reclaim_reent+0xac>
90013716:	6a63      	ldr	r3, [r4, #36]	; 0x24
90013718:	6819      	ldr	r1, [r3, #0]
9001371a:	b111      	cbz	r1, 90013722 <_reclaim_reent+0x22>
9001371c:	4620      	mov	r0, r4
9001371e:	f000 f9f9 	bl	90013b14 <_free_r>
90013722:	6961      	ldr	r1, [r4, #20]
90013724:	b111      	cbz	r1, 9001372c <_reclaim_reent+0x2c>
90013726:	4620      	mov	r0, r4
90013728:	f000 f9f4 	bl	90013b14 <_free_r>
9001372c:	6a61      	ldr	r1, [r4, #36]	; 0x24
9001372e:	b111      	cbz	r1, 90013736 <_reclaim_reent+0x36>
90013730:	4620      	mov	r0, r4
90013732:	f000 f9ef 	bl	90013b14 <_free_r>
90013736:	6ba1      	ldr	r1, [r4, #56]	; 0x38
90013738:	b111      	cbz	r1, 90013740 <_reclaim_reent+0x40>
9001373a:	4620      	mov	r0, r4
9001373c:	f000 f9ea 	bl	90013b14 <_free_r>
90013740:	6be1      	ldr	r1, [r4, #60]	; 0x3c
90013742:	b111      	cbz	r1, 9001374a <_reclaim_reent+0x4a>
90013744:	4620      	mov	r0, r4
90013746:	f000 f9e5 	bl	90013b14 <_free_r>
9001374a:	6c21      	ldr	r1, [r4, #64]	; 0x40
9001374c:	b111      	cbz	r1, 90013754 <_reclaim_reent+0x54>
9001374e:	4620      	mov	r0, r4
90013750:	f000 f9e0 	bl	90013b14 <_free_r>
90013754:	6de1      	ldr	r1, [r4, #92]	; 0x5c
90013756:	b111      	cbz	r1, 9001375e <_reclaim_reent+0x5e>
90013758:	4620      	mov	r0, r4
9001375a:	f000 f9db 	bl	90013b14 <_free_r>
9001375e:	6da1      	ldr	r1, [r4, #88]	; 0x58
90013760:	b111      	cbz	r1, 90013768 <_reclaim_reent+0x68>
90013762:	4620      	mov	r0, r4
90013764:	f000 f9d6 	bl	90013b14 <_free_r>
90013768:	6b61      	ldr	r1, [r4, #52]	; 0x34
9001376a:	b111      	cbz	r1, 90013772 <_reclaim_reent+0x72>
9001376c:	4620      	mov	r0, r4
9001376e:	f000 f9d1 	bl	90013b14 <_free_r>
90013772:	69a3      	ldr	r3, [r4, #24]
90013774:	b1e3      	cbz	r3, 900137b0 <_reclaim_reent+0xb0>
90013776:	6aa3      	ldr	r3, [r4, #40]	; 0x28
90013778:	4620      	mov	r0, r4
9001377a:	4798      	blx	r3
9001377c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
9001377e:	b1b9      	cbz	r1, 900137b0 <_reclaim_reent+0xb0>
90013780:	4620      	mov	r0, r4
90013782:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90013786:	f7ff bfad 	b.w	900136e4 <cleanup_glue>
9001378a:	5949      	ldr	r1, [r1, r5]
9001378c:	b941      	cbnz	r1, 900137a0 <_reclaim_reent+0xa0>
9001378e:	3504      	adds	r5, #4
90013790:	6a63      	ldr	r3, [r4, #36]	; 0x24
90013792:	2d80      	cmp	r5, #128	; 0x80
90013794:	68d9      	ldr	r1, [r3, #12]
90013796:	d1f8      	bne.n	9001378a <_reclaim_reent+0x8a>
90013798:	4620      	mov	r0, r4
9001379a:	f000 f9bb 	bl	90013b14 <_free_r>
9001379e:	e7ba      	b.n	90013716 <_reclaim_reent+0x16>
900137a0:	680e      	ldr	r6, [r1, #0]
900137a2:	4620      	mov	r0, r4
900137a4:	f000 f9b6 	bl	90013b14 <_free_r>
900137a8:	4631      	mov	r1, r6
900137aa:	e7ef      	b.n	9001378c <_reclaim_reent+0x8c>
900137ac:	2500      	movs	r5, #0
900137ae:	e7ef      	b.n	90013790 <_reclaim_reent+0x90>
900137b0:	bd70      	pop	{r4, r5, r6, pc}
900137b2:	bf00      	nop
900137b4:	24000034 	.word	0x24000034

900137b8 <_sbrk_r>:
900137b8:	b538      	push	{r3, r4, r5, lr}
900137ba:	4d06      	ldr	r5, [pc, #24]	; (900137d4 <_sbrk_r+0x1c>)
900137bc:	2300      	movs	r3, #0
900137be:	4604      	mov	r4, r0
900137c0:	4608      	mov	r0, r1
900137c2:	602b      	str	r3, [r5, #0]
900137c4:	f7ed f8bc 	bl	90000940 <_sbrk>
900137c8:	1c43      	adds	r3, r0, #1
900137ca:	d102      	bne.n	900137d2 <_sbrk_r+0x1a>
900137cc:	682b      	ldr	r3, [r5, #0]
900137ce:	b103      	cbz	r3, 900137d2 <_sbrk_r+0x1a>
900137d0:	6023      	str	r3, [r4, #0]
900137d2:	bd38      	pop	{r3, r4, r5, pc}
900137d4:	2401118c 	.word	0x2401118c

900137d8 <__sread>:
900137d8:	b510      	push	{r4, lr}
900137da:	460c      	mov	r4, r1
900137dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
900137e0:	f000 fcd2 	bl	90014188 <_read_r>
900137e4:	2800      	cmp	r0, #0
900137e6:	bfab      	itete	ge
900137e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
900137ea:	89a3      	ldrhlt	r3, [r4, #12]
900137ec:	181b      	addge	r3, r3, r0
900137ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
900137f2:	bfac      	ite	ge
900137f4:	6563      	strge	r3, [r4, #84]	; 0x54
900137f6:	81a3      	strhlt	r3, [r4, #12]
900137f8:	bd10      	pop	{r4, pc}

900137fa <__swrite>:
900137fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
900137fe:	461f      	mov	r7, r3
90013800:	898b      	ldrh	r3, [r1, #12]
90013802:	05db      	lsls	r3, r3, #23
90013804:	4605      	mov	r5, r0
90013806:	460c      	mov	r4, r1
90013808:	4616      	mov	r6, r2
9001380a:	d505      	bpl.n	90013818 <__swrite+0x1e>
9001380c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
90013810:	2302      	movs	r3, #2
90013812:	2200      	movs	r2, #0
90013814:	f000 f958 	bl	90013ac8 <_lseek_r>
90013818:	89a3      	ldrh	r3, [r4, #12]
9001381a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
9001381e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
90013822:	81a3      	strh	r3, [r4, #12]
90013824:	4632      	mov	r2, r6
90013826:	463b      	mov	r3, r7
90013828:	4628      	mov	r0, r5
9001382a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
9001382e:	f000 b837 	b.w	900138a0 <_write_r>

90013832 <__sseek>:
90013832:	b510      	push	{r4, lr}
90013834:	460c      	mov	r4, r1
90013836:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
9001383a:	f000 f945 	bl	90013ac8 <_lseek_r>
9001383e:	1c43      	adds	r3, r0, #1
90013840:	89a3      	ldrh	r3, [r4, #12]
90013842:	bf15      	itete	ne
90013844:	6560      	strne	r0, [r4, #84]	; 0x54
90013846:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
9001384a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
9001384e:	81a3      	strheq	r3, [r4, #12]
90013850:	bf18      	it	ne
90013852:	81a3      	strhne	r3, [r4, #12]
90013854:	bd10      	pop	{r4, pc}

90013856 <__sclose>:
90013856:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
9001385a:	f000 b851 	b.w	90013900 <_close_r>

9001385e <strchr>:
9001385e:	b2c9      	uxtb	r1, r1
90013860:	4603      	mov	r3, r0
90013862:	f810 2b01 	ldrb.w	r2, [r0], #1
90013866:	b11a      	cbz	r2, 90013870 <strchr+0x12>
90013868:	428a      	cmp	r2, r1
9001386a:	d1f9      	bne.n	90013860 <strchr+0x2>
9001386c:	4618      	mov	r0, r3
9001386e:	4770      	bx	lr
90013870:	2900      	cmp	r1, #0
90013872:	bf18      	it	ne
90013874:	2300      	movne	r3, #0
90013876:	e7f9      	b.n	9001386c <strchr+0xe>

90013878 <strncmp>:
90013878:	b510      	push	{r4, lr}
9001387a:	b17a      	cbz	r2, 9001389c <strncmp+0x24>
9001387c:	4603      	mov	r3, r0
9001387e:	3901      	subs	r1, #1
90013880:	1884      	adds	r4, r0, r2
90013882:	f813 0b01 	ldrb.w	r0, [r3], #1
90013886:	f811 2f01 	ldrb.w	r2, [r1, #1]!
9001388a:	4290      	cmp	r0, r2
9001388c:	d101      	bne.n	90013892 <strncmp+0x1a>
9001388e:	42a3      	cmp	r3, r4
90013890:	d101      	bne.n	90013896 <strncmp+0x1e>
90013892:	1a80      	subs	r0, r0, r2
90013894:	bd10      	pop	{r4, pc}
90013896:	2800      	cmp	r0, #0
90013898:	d1f3      	bne.n	90013882 <strncmp+0xa>
9001389a:	e7fa      	b.n	90013892 <strncmp+0x1a>
9001389c:	4610      	mov	r0, r2
9001389e:	e7f9      	b.n	90013894 <strncmp+0x1c>

900138a0 <_write_r>:
900138a0:	b538      	push	{r3, r4, r5, lr}
900138a2:	4d07      	ldr	r5, [pc, #28]	; (900138c0 <_write_r+0x20>)
900138a4:	4604      	mov	r4, r0
900138a6:	4608      	mov	r0, r1
900138a8:	4611      	mov	r1, r2
900138aa:	2200      	movs	r2, #0
900138ac:	602a      	str	r2, [r5, #0]
900138ae:	461a      	mov	r2, r3
900138b0:	f7ec fff5 	bl	9000089e <_write>
900138b4:	1c43      	adds	r3, r0, #1
900138b6:	d102      	bne.n	900138be <_write_r+0x1e>
900138b8:	682b      	ldr	r3, [r5, #0]
900138ba:	b103      	cbz	r3, 900138be <_write_r+0x1e>
900138bc:	6023      	str	r3, [r4, #0]
900138be:	bd38      	pop	{r3, r4, r5, pc}
900138c0:	2401118c 	.word	0x2401118c

900138c4 <__assert_func>:
900138c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
900138c6:	4614      	mov	r4, r2
900138c8:	461a      	mov	r2, r3
900138ca:	4b09      	ldr	r3, [pc, #36]	; (900138f0 <__assert_func+0x2c>)
900138cc:	681b      	ldr	r3, [r3, #0]
900138ce:	4605      	mov	r5, r0
900138d0:	68d8      	ldr	r0, [r3, #12]
900138d2:	b14c      	cbz	r4, 900138e8 <__assert_func+0x24>
900138d4:	4b07      	ldr	r3, [pc, #28]	; (900138f4 <__assert_func+0x30>)
900138d6:	9100      	str	r1, [sp, #0]
900138d8:	e9cd 3401 	strd	r3, r4, [sp, #4]
900138dc:	4906      	ldr	r1, [pc, #24]	; (900138f8 <__assert_func+0x34>)
900138de:	462b      	mov	r3, r5
900138e0:	f000 f8e0 	bl	90013aa4 <fiprintf>
900138e4:	f000 fd22 	bl	9001432c <abort>
900138e8:	4b04      	ldr	r3, [pc, #16]	; (900138fc <__assert_func+0x38>)
900138ea:	461c      	mov	r4, r3
900138ec:	e7f3      	b.n	900138d6 <__assert_func+0x12>
900138ee:	bf00      	nop
900138f0:	24000034 	.word	0x24000034
900138f4:	900175c2 	.word	0x900175c2
900138f8:	900175cf 	.word	0x900175cf
900138fc:	900175fd 	.word	0x900175fd

90013900 <_close_r>:
90013900:	b538      	push	{r3, r4, r5, lr}
90013902:	4d06      	ldr	r5, [pc, #24]	; (9001391c <_close_r+0x1c>)
90013904:	2300      	movs	r3, #0
90013906:	4604      	mov	r4, r0
90013908:	4608      	mov	r0, r1
9001390a:	602b      	str	r3, [r5, #0]
9001390c:	f7ec ffe3 	bl	900008d6 <_close>
90013910:	1c43      	adds	r3, r0, #1
90013912:	d102      	bne.n	9001391a <_close_r+0x1a>
90013914:	682b      	ldr	r3, [r5, #0]
90013916:	b103      	cbz	r3, 9001391a <_close_r+0x1a>
90013918:	6023      	str	r3, [r4, #0]
9001391a:	bd38      	pop	{r3, r4, r5, pc}
9001391c:	2401118c 	.word	0x2401118c

90013920 <__sflush_r>:
90013920:	898a      	ldrh	r2, [r1, #12]
90013922:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90013926:	4605      	mov	r5, r0
90013928:	0710      	lsls	r0, r2, #28
9001392a:	460c      	mov	r4, r1
9001392c:	d458      	bmi.n	900139e0 <__sflush_r+0xc0>
9001392e:	684b      	ldr	r3, [r1, #4]
90013930:	2b00      	cmp	r3, #0
90013932:	dc05      	bgt.n	90013940 <__sflush_r+0x20>
90013934:	6c0b      	ldr	r3, [r1, #64]	; 0x40
90013936:	2b00      	cmp	r3, #0
90013938:	dc02      	bgt.n	90013940 <__sflush_r+0x20>
9001393a:	2000      	movs	r0, #0
9001393c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90013940:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
90013942:	2e00      	cmp	r6, #0
90013944:	d0f9      	beq.n	9001393a <__sflush_r+0x1a>
90013946:	2300      	movs	r3, #0
90013948:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
9001394c:	682f      	ldr	r7, [r5, #0]
9001394e:	602b      	str	r3, [r5, #0]
90013950:	d032      	beq.n	900139b8 <__sflush_r+0x98>
90013952:	6d60      	ldr	r0, [r4, #84]	; 0x54
90013954:	89a3      	ldrh	r3, [r4, #12]
90013956:	075a      	lsls	r2, r3, #29
90013958:	d505      	bpl.n	90013966 <__sflush_r+0x46>
9001395a:	6863      	ldr	r3, [r4, #4]
9001395c:	1ac0      	subs	r0, r0, r3
9001395e:	6b63      	ldr	r3, [r4, #52]	; 0x34
90013960:	b10b      	cbz	r3, 90013966 <__sflush_r+0x46>
90013962:	6c23      	ldr	r3, [r4, #64]	; 0x40
90013964:	1ac0      	subs	r0, r0, r3
90013966:	2300      	movs	r3, #0
90013968:	4602      	mov	r2, r0
9001396a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
9001396c:	6a21      	ldr	r1, [r4, #32]
9001396e:	4628      	mov	r0, r5
90013970:	47b0      	blx	r6
90013972:	1c43      	adds	r3, r0, #1
90013974:	89a3      	ldrh	r3, [r4, #12]
90013976:	d106      	bne.n	90013986 <__sflush_r+0x66>
90013978:	6829      	ldr	r1, [r5, #0]
9001397a:	291d      	cmp	r1, #29
9001397c:	d82c      	bhi.n	900139d8 <__sflush_r+0xb8>
9001397e:	4a2a      	ldr	r2, [pc, #168]	; (90013a28 <__sflush_r+0x108>)
90013980:	40ca      	lsrs	r2, r1
90013982:	07d6      	lsls	r6, r2, #31
90013984:	d528      	bpl.n	900139d8 <__sflush_r+0xb8>
90013986:	2200      	movs	r2, #0
90013988:	6062      	str	r2, [r4, #4]
9001398a:	04d9      	lsls	r1, r3, #19
9001398c:	6922      	ldr	r2, [r4, #16]
9001398e:	6022      	str	r2, [r4, #0]
90013990:	d504      	bpl.n	9001399c <__sflush_r+0x7c>
90013992:	1c42      	adds	r2, r0, #1
90013994:	d101      	bne.n	9001399a <__sflush_r+0x7a>
90013996:	682b      	ldr	r3, [r5, #0]
90013998:	b903      	cbnz	r3, 9001399c <__sflush_r+0x7c>
9001399a:	6560      	str	r0, [r4, #84]	; 0x54
9001399c:	6b61      	ldr	r1, [r4, #52]	; 0x34
9001399e:	602f      	str	r7, [r5, #0]
900139a0:	2900      	cmp	r1, #0
900139a2:	d0ca      	beq.n	9001393a <__sflush_r+0x1a>
900139a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
900139a8:	4299      	cmp	r1, r3
900139aa:	d002      	beq.n	900139b2 <__sflush_r+0x92>
900139ac:	4628      	mov	r0, r5
900139ae:	f000 f8b1 	bl	90013b14 <_free_r>
900139b2:	2000      	movs	r0, #0
900139b4:	6360      	str	r0, [r4, #52]	; 0x34
900139b6:	e7c1      	b.n	9001393c <__sflush_r+0x1c>
900139b8:	6a21      	ldr	r1, [r4, #32]
900139ba:	2301      	movs	r3, #1
900139bc:	4628      	mov	r0, r5
900139be:	47b0      	blx	r6
900139c0:	1c41      	adds	r1, r0, #1
900139c2:	d1c7      	bne.n	90013954 <__sflush_r+0x34>
900139c4:	682b      	ldr	r3, [r5, #0]
900139c6:	2b00      	cmp	r3, #0
900139c8:	d0c4      	beq.n	90013954 <__sflush_r+0x34>
900139ca:	2b1d      	cmp	r3, #29
900139cc:	d001      	beq.n	900139d2 <__sflush_r+0xb2>
900139ce:	2b16      	cmp	r3, #22
900139d0:	d101      	bne.n	900139d6 <__sflush_r+0xb6>
900139d2:	602f      	str	r7, [r5, #0]
900139d4:	e7b1      	b.n	9001393a <__sflush_r+0x1a>
900139d6:	89a3      	ldrh	r3, [r4, #12]
900139d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
900139dc:	81a3      	strh	r3, [r4, #12]
900139de:	e7ad      	b.n	9001393c <__sflush_r+0x1c>
900139e0:	690f      	ldr	r7, [r1, #16]
900139e2:	2f00      	cmp	r7, #0
900139e4:	d0a9      	beq.n	9001393a <__sflush_r+0x1a>
900139e6:	0793      	lsls	r3, r2, #30
900139e8:	680e      	ldr	r6, [r1, #0]
900139ea:	bf08      	it	eq
900139ec:	694b      	ldreq	r3, [r1, #20]
900139ee:	600f      	str	r7, [r1, #0]
900139f0:	bf18      	it	ne
900139f2:	2300      	movne	r3, #0
900139f4:	eba6 0807 	sub.w	r8, r6, r7
900139f8:	608b      	str	r3, [r1, #8]
900139fa:	f1b8 0f00 	cmp.w	r8, #0
900139fe:	dd9c      	ble.n	9001393a <__sflush_r+0x1a>
90013a00:	6a21      	ldr	r1, [r4, #32]
90013a02:	6aa6      	ldr	r6, [r4, #40]	; 0x28
90013a04:	4643      	mov	r3, r8
90013a06:	463a      	mov	r2, r7
90013a08:	4628      	mov	r0, r5
90013a0a:	47b0      	blx	r6
90013a0c:	2800      	cmp	r0, #0
90013a0e:	dc06      	bgt.n	90013a1e <__sflush_r+0xfe>
90013a10:	89a3      	ldrh	r3, [r4, #12]
90013a12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
90013a16:	81a3      	strh	r3, [r4, #12]
90013a18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
90013a1c:	e78e      	b.n	9001393c <__sflush_r+0x1c>
90013a1e:	4407      	add	r7, r0
90013a20:	eba8 0800 	sub.w	r8, r8, r0
90013a24:	e7e9      	b.n	900139fa <__sflush_r+0xda>
90013a26:	bf00      	nop
90013a28:	20400001 	.word	0x20400001

90013a2c <_fflush_r>:
90013a2c:	b538      	push	{r3, r4, r5, lr}
90013a2e:	690b      	ldr	r3, [r1, #16]
90013a30:	4605      	mov	r5, r0
90013a32:	460c      	mov	r4, r1
90013a34:	b913      	cbnz	r3, 90013a3c <_fflush_r+0x10>
90013a36:	2500      	movs	r5, #0
90013a38:	4628      	mov	r0, r5
90013a3a:	bd38      	pop	{r3, r4, r5, pc}
90013a3c:	b118      	cbz	r0, 90013a46 <_fflush_r+0x1a>
90013a3e:	6983      	ldr	r3, [r0, #24]
90013a40:	b90b      	cbnz	r3, 90013a46 <_fflush_r+0x1a>
90013a42:	f7ff fc79 	bl	90013338 <__sinit>
90013a46:	4b14      	ldr	r3, [pc, #80]	; (90013a98 <_fflush_r+0x6c>)
90013a48:	429c      	cmp	r4, r3
90013a4a:	d11b      	bne.n	90013a84 <_fflush_r+0x58>
90013a4c:	686c      	ldr	r4, [r5, #4]
90013a4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
90013a52:	2b00      	cmp	r3, #0
90013a54:	d0ef      	beq.n	90013a36 <_fflush_r+0xa>
90013a56:	6e62      	ldr	r2, [r4, #100]	; 0x64
90013a58:	07d0      	lsls	r0, r2, #31
90013a5a:	d404      	bmi.n	90013a66 <_fflush_r+0x3a>
90013a5c:	0599      	lsls	r1, r3, #22
90013a5e:	d402      	bmi.n	90013a66 <_fflush_r+0x3a>
90013a60:	6da0      	ldr	r0, [r4, #88]	; 0x58
90013a62:	f7ff fd2c 	bl	900134be <__retarget_lock_acquire_recursive>
90013a66:	4628      	mov	r0, r5
90013a68:	4621      	mov	r1, r4
90013a6a:	f7ff ff59 	bl	90013920 <__sflush_r>
90013a6e:	6e63      	ldr	r3, [r4, #100]	; 0x64
90013a70:	07da      	lsls	r2, r3, #31
90013a72:	4605      	mov	r5, r0
90013a74:	d4e0      	bmi.n	90013a38 <_fflush_r+0xc>
90013a76:	89a3      	ldrh	r3, [r4, #12]
90013a78:	059b      	lsls	r3, r3, #22
90013a7a:	d4dd      	bmi.n	90013a38 <_fflush_r+0xc>
90013a7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
90013a7e:	f7ff fd1f 	bl	900134c0 <__retarget_lock_release_recursive>
90013a82:	e7d9      	b.n	90013a38 <_fflush_r+0xc>
90013a84:	4b05      	ldr	r3, [pc, #20]	; (90013a9c <_fflush_r+0x70>)
90013a86:	429c      	cmp	r4, r3
90013a88:	d101      	bne.n	90013a8e <_fflush_r+0x62>
90013a8a:	68ac      	ldr	r4, [r5, #8]
90013a8c:	e7df      	b.n	90013a4e <_fflush_r+0x22>
90013a8e:	4b04      	ldr	r3, [pc, #16]	; (90013aa0 <_fflush_r+0x74>)
90013a90:	429c      	cmp	r4, r3
90013a92:	bf08      	it	eq
90013a94:	68ec      	ldreq	r4, [r5, #12]
90013a96:	e7da      	b.n	90013a4e <_fflush_r+0x22>
90013a98:	9001750c 	.word	0x9001750c
90013a9c:	9001752c 	.word	0x9001752c
90013aa0:	900174ec 	.word	0x900174ec

90013aa4 <fiprintf>:
90013aa4:	b40e      	push	{r1, r2, r3}
90013aa6:	b503      	push	{r0, r1, lr}
90013aa8:	4601      	mov	r1, r0
90013aaa:	ab03      	add	r3, sp, #12
90013aac:	4805      	ldr	r0, [pc, #20]	; (90013ac4 <fiprintf+0x20>)
90013aae:	f853 2b04 	ldr.w	r2, [r3], #4
90013ab2:	6800      	ldr	r0, [r0, #0]
90013ab4:	9301      	str	r3, [sp, #4]
90013ab6:	f000 f8a3 	bl	90013c00 <_vfiprintf_r>
90013aba:	b002      	add	sp, #8
90013abc:	f85d eb04 	ldr.w	lr, [sp], #4
90013ac0:	b003      	add	sp, #12
90013ac2:	4770      	bx	lr
90013ac4:	24000034 	.word	0x24000034

90013ac8 <_lseek_r>:
90013ac8:	b538      	push	{r3, r4, r5, lr}
90013aca:	4d07      	ldr	r5, [pc, #28]	; (90013ae8 <_lseek_r+0x20>)
90013acc:	4604      	mov	r4, r0
90013ace:	4608      	mov	r0, r1
90013ad0:	4611      	mov	r1, r2
90013ad2:	2200      	movs	r2, #0
90013ad4:	602a      	str	r2, [r5, #0]
90013ad6:	461a      	mov	r2, r3
90013ad8:	f7ec ff24 	bl	90000924 <_lseek>
90013adc:	1c43      	adds	r3, r0, #1
90013ade:	d102      	bne.n	90013ae6 <_lseek_r+0x1e>
90013ae0:	682b      	ldr	r3, [r5, #0]
90013ae2:	b103      	cbz	r3, 90013ae6 <_lseek_r+0x1e>
90013ae4:	6023      	str	r3, [r4, #0]
90013ae6:	bd38      	pop	{r3, r4, r5, pc}
90013ae8:	2401118c 	.word	0x2401118c

90013aec <malloc>:
90013aec:	4b02      	ldr	r3, [pc, #8]	; (90013af8 <malloc+0xc>)
90013aee:	4601      	mov	r1, r0
90013af0:	6818      	ldr	r0, [r3, #0]
90013af2:	f7ff bd2d 	b.w	90013550 <_malloc_r>
90013af6:	bf00      	nop
90013af8:	24000034 	.word	0x24000034

90013afc <__malloc_lock>:
90013afc:	4801      	ldr	r0, [pc, #4]	; (90013b04 <__malloc_lock+0x8>)
90013afe:	f7ff bcde 	b.w	900134be <__retarget_lock_acquire_recursive>
90013b02:	bf00      	nop
90013b04:	24011180 	.word	0x24011180

90013b08 <__malloc_unlock>:
90013b08:	4801      	ldr	r0, [pc, #4]	; (90013b10 <__malloc_unlock+0x8>)
90013b0a:	f7ff bcd9 	b.w	900134c0 <__retarget_lock_release_recursive>
90013b0e:	bf00      	nop
90013b10:	24011180 	.word	0x24011180

90013b14 <_free_r>:
90013b14:	b537      	push	{r0, r1, r2, r4, r5, lr}
90013b16:	2900      	cmp	r1, #0
90013b18:	d044      	beq.n	90013ba4 <_free_r+0x90>
90013b1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
90013b1e:	9001      	str	r0, [sp, #4]
90013b20:	2b00      	cmp	r3, #0
90013b22:	f1a1 0404 	sub.w	r4, r1, #4
90013b26:	bfb8      	it	lt
90013b28:	18e4      	addlt	r4, r4, r3
90013b2a:	f7ff ffe7 	bl	90013afc <__malloc_lock>
90013b2e:	4a1e      	ldr	r2, [pc, #120]	; (90013ba8 <_free_r+0x94>)
90013b30:	9801      	ldr	r0, [sp, #4]
90013b32:	6813      	ldr	r3, [r2, #0]
90013b34:	b933      	cbnz	r3, 90013b44 <_free_r+0x30>
90013b36:	6063      	str	r3, [r4, #4]
90013b38:	6014      	str	r4, [r2, #0]
90013b3a:	b003      	add	sp, #12
90013b3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
90013b40:	f7ff bfe2 	b.w	90013b08 <__malloc_unlock>
90013b44:	42a3      	cmp	r3, r4
90013b46:	d908      	bls.n	90013b5a <_free_r+0x46>
90013b48:	6825      	ldr	r5, [r4, #0]
90013b4a:	1961      	adds	r1, r4, r5
90013b4c:	428b      	cmp	r3, r1
90013b4e:	bf01      	itttt	eq
90013b50:	6819      	ldreq	r1, [r3, #0]
90013b52:	685b      	ldreq	r3, [r3, #4]
90013b54:	1949      	addeq	r1, r1, r5
90013b56:	6021      	streq	r1, [r4, #0]
90013b58:	e7ed      	b.n	90013b36 <_free_r+0x22>
90013b5a:	461a      	mov	r2, r3
90013b5c:	685b      	ldr	r3, [r3, #4]
90013b5e:	b10b      	cbz	r3, 90013b64 <_free_r+0x50>
90013b60:	42a3      	cmp	r3, r4
90013b62:	d9fa      	bls.n	90013b5a <_free_r+0x46>
90013b64:	6811      	ldr	r1, [r2, #0]
90013b66:	1855      	adds	r5, r2, r1
90013b68:	42a5      	cmp	r5, r4
90013b6a:	d10b      	bne.n	90013b84 <_free_r+0x70>
90013b6c:	6824      	ldr	r4, [r4, #0]
90013b6e:	4421      	add	r1, r4
90013b70:	1854      	adds	r4, r2, r1
90013b72:	42a3      	cmp	r3, r4
90013b74:	6011      	str	r1, [r2, #0]
90013b76:	d1e0      	bne.n	90013b3a <_free_r+0x26>
90013b78:	681c      	ldr	r4, [r3, #0]
90013b7a:	685b      	ldr	r3, [r3, #4]
90013b7c:	6053      	str	r3, [r2, #4]
90013b7e:	4421      	add	r1, r4
90013b80:	6011      	str	r1, [r2, #0]
90013b82:	e7da      	b.n	90013b3a <_free_r+0x26>
90013b84:	d902      	bls.n	90013b8c <_free_r+0x78>
90013b86:	230c      	movs	r3, #12
90013b88:	6003      	str	r3, [r0, #0]
90013b8a:	e7d6      	b.n	90013b3a <_free_r+0x26>
90013b8c:	6825      	ldr	r5, [r4, #0]
90013b8e:	1961      	adds	r1, r4, r5
90013b90:	428b      	cmp	r3, r1
90013b92:	bf04      	itt	eq
90013b94:	6819      	ldreq	r1, [r3, #0]
90013b96:	685b      	ldreq	r3, [r3, #4]
90013b98:	6063      	str	r3, [r4, #4]
90013b9a:	bf04      	itt	eq
90013b9c:	1949      	addeq	r1, r1, r5
90013b9e:	6021      	streq	r1, [r4, #0]
90013ba0:	6054      	str	r4, [r2, #4]
90013ba2:	e7ca      	b.n	90013b3a <_free_r+0x26>
90013ba4:	b003      	add	sp, #12
90013ba6:	bd30      	pop	{r4, r5, pc}
90013ba8:	24011184 	.word	0x24011184

90013bac <__sfputc_r>:
90013bac:	6893      	ldr	r3, [r2, #8]
90013bae:	3b01      	subs	r3, #1
90013bb0:	2b00      	cmp	r3, #0
90013bb2:	b410      	push	{r4}
90013bb4:	6093      	str	r3, [r2, #8]
90013bb6:	da08      	bge.n	90013bca <__sfputc_r+0x1e>
90013bb8:	6994      	ldr	r4, [r2, #24]
90013bba:	42a3      	cmp	r3, r4
90013bbc:	db01      	blt.n	90013bc2 <__sfputc_r+0x16>
90013bbe:	290a      	cmp	r1, #10
90013bc0:	d103      	bne.n	90013bca <__sfputc_r+0x1e>
90013bc2:	f85d 4b04 	ldr.w	r4, [sp], #4
90013bc6:	f000 baf1 	b.w	900141ac <__swbuf_r>
90013bca:	6813      	ldr	r3, [r2, #0]
90013bcc:	1c58      	adds	r0, r3, #1
90013bce:	6010      	str	r0, [r2, #0]
90013bd0:	7019      	strb	r1, [r3, #0]
90013bd2:	4608      	mov	r0, r1
90013bd4:	f85d 4b04 	ldr.w	r4, [sp], #4
90013bd8:	4770      	bx	lr

90013bda <__sfputs_r>:
90013bda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
90013bdc:	4606      	mov	r6, r0
90013bde:	460f      	mov	r7, r1
90013be0:	4614      	mov	r4, r2
90013be2:	18d5      	adds	r5, r2, r3
90013be4:	42ac      	cmp	r4, r5
90013be6:	d101      	bne.n	90013bec <__sfputs_r+0x12>
90013be8:	2000      	movs	r0, #0
90013bea:	e007      	b.n	90013bfc <__sfputs_r+0x22>
90013bec:	f814 1b01 	ldrb.w	r1, [r4], #1
90013bf0:	463a      	mov	r2, r7
90013bf2:	4630      	mov	r0, r6
90013bf4:	f7ff ffda 	bl	90013bac <__sfputc_r>
90013bf8:	1c43      	adds	r3, r0, #1
90013bfa:	d1f3      	bne.n	90013be4 <__sfputs_r+0xa>
90013bfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

90013c00 <_vfiprintf_r>:
90013c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90013c04:	460d      	mov	r5, r1
90013c06:	b09d      	sub	sp, #116	; 0x74
90013c08:	4614      	mov	r4, r2
90013c0a:	4698      	mov	r8, r3
90013c0c:	4606      	mov	r6, r0
90013c0e:	b118      	cbz	r0, 90013c18 <_vfiprintf_r+0x18>
90013c10:	6983      	ldr	r3, [r0, #24]
90013c12:	b90b      	cbnz	r3, 90013c18 <_vfiprintf_r+0x18>
90013c14:	f7ff fb90 	bl	90013338 <__sinit>
90013c18:	4b89      	ldr	r3, [pc, #548]	; (90013e40 <_vfiprintf_r+0x240>)
90013c1a:	429d      	cmp	r5, r3
90013c1c:	d11b      	bne.n	90013c56 <_vfiprintf_r+0x56>
90013c1e:	6875      	ldr	r5, [r6, #4]
90013c20:	6e6b      	ldr	r3, [r5, #100]	; 0x64
90013c22:	07d9      	lsls	r1, r3, #31
90013c24:	d405      	bmi.n	90013c32 <_vfiprintf_r+0x32>
90013c26:	89ab      	ldrh	r3, [r5, #12]
90013c28:	059a      	lsls	r2, r3, #22
90013c2a:	d402      	bmi.n	90013c32 <_vfiprintf_r+0x32>
90013c2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
90013c2e:	f7ff fc46 	bl	900134be <__retarget_lock_acquire_recursive>
90013c32:	89ab      	ldrh	r3, [r5, #12]
90013c34:	071b      	lsls	r3, r3, #28
90013c36:	d501      	bpl.n	90013c3c <_vfiprintf_r+0x3c>
90013c38:	692b      	ldr	r3, [r5, #16]
90013c3a:	b9eb      	cbnz	r3, 90013c78 <_vfiprintf_r+0x78>
90013c3c:	4629      	mov	r1, r5
90013c3e:	4630      	mov	r0, r6
90013c40:	f000 fb06 	bl	90014250 <__swsetup_r>
90013c44:	b1c0      	cbz	r0, 90013c78 <_vfiprintf_r+0x78>
90013c46:	6e6b      	ldr	r3, [r5, #100]	; 0x64
90013c48:	07dc      	lsls	r4, r3, #31
90013c4a:	d50e      	bpl.n	90013c6a <_vfiprintf_r+0x6a>
90013c4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
90013c50:	b01d      	add	sp, #116	; 0x74
90013c52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90013c56:	4b7b      	ldr	r3, [pc, #492]	; (90013e44 <_vfiprintf_r+0x244>)
90013c58:	429d      	cmp	r5, r3
90013c5a:	d101      	bne.n	90013c60 <_vfiprintf_r+0x60>
90013c5c:	68b5      	ldr	r5, [r6, #8]
90013c5e:	e7df      	b.n	90013c20 <_vfiprintf_r+0x20>
90013c60:	4b79      	ldr	r3, [pc, #484]	; (90013e48 <_vfiprintf_r+0x248>)
90013c62:	429d      	cmp	r5, r3
90013c64:	bf08      	it	eq
90013c66:	68f5      	ldreq	r5, [r6, #12]
90013c68:	e7da      	b.n	90013c20 <_vfiprintf_r+0x20>
90013c6a:	89ab      	ldrh	r3, [r5, #12]
90013c6c:	0598      	lsls	r0, r3, #22
90013c6e:	d4ed      	bmi.n	90013c4c <_vfiprintf_r+0x4c>
90013c70:	6da8      	ldr	r0, [r5, #88]	; 0x58
90013c72:	f7ff fc25 	bl	900134c0 <__retarget_lock_release_recursive>
90013c76:	e7e9      	b.n	90013c4c <_vfiprintf_r+0x4c>
90013c78:	2300      	movs	r3, #0
90013c7a:	9309      	str	r3, [sp, #36]	; 0x24
90013c7c:	2320      	movs	r3, #32
90013c7e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
90013c82:	f8cd 800c 	str.w	r8, [sp, #12]
90013c86:	2330      	movs	r3, #48	; 0x30
90013c88:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 90013e4c <_vfiprintf_r+0x24c>
90013c8c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
90013c90:	f04f 0901 	mov.w	r9, #1
90013c94:	4623      	mov	r3, r4
90013c96:	469a      	mov	sl, r3
90013c98:	f813 2b01 	ldrb.w	r2, [r3], #1
90013c9c:	b10a      	cbz	r2, 90013ca2 <_vfiprintf_r+0xa2>
90013c9e:	2a25      	cmp	r2, #37	; 0x25
90013ca0:	d1f9      	bne.n	90013c96 <_vfiprintf_r+0x96>
90013ca2:	ebba 0b04 	subs.w	fp, sl, r4
90013ca6:	d00b      	beq.n	90013cc0 <_vfiprintf_r+0xc0>
90013ca8:	465b      	mov	r3, fp
90013caa:	4622      	mov	r2, r4
90013cac:	4629      	mov	r1, r5
90013cae:	4630      	mov	r0, r6
90013cb0:	f7ff ff93 	bl	90013bda <__sfputs_r>
90013cb4:	3001      	adds	r0, #1
90013cb6:	f000 80aa 	beq.w	90013e0e <_vfiprintf_r+0x20e>
90013cba:	9a09      	ldr	r2, [sp, #36]	; 0x24
90013cbc:	445a      	add	r2, fp
90013cbe:	9209      	str	r2, [sp, #36]	; 0x24
90013cc0:	f89a 3000 	ldrb.w	r3, [sl]
90013cc4:	2b00      	cmp	r3, #0
90013cc6:	f000 80a2 	beq.w	90013e0e <_vfiprintf_r+0x20e>
90013cca:	2300      	movs	r3, #0
90013ccc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
90013cd0:	e9cd 2305 	strd	r2, r3, [sp, #20]
90013cd4:	f10a 0a01 	add.w	sl, sl, #1
90013cd8:	9304      	str	r3, [sp, #16]
90013cda:	9307      	str	r3, [sp, #28]
90013cdc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
90013ce0:	931a      	str	r3, [sp, #104]	; 0x68
90013ce2:	4654      	mov	r4, sl
90013ce4:	2205      	movs	r2, #5
90013ce6:	f814 1b01 	ldrb.w	r1, [r4], #1
90013cea:	4858      	ldr	r0, [pc, #352]	; (90013e4c <_vfiprintf_r+0x24c>)
90013cec:	f7ec fb10 	bl	90000310 <memchr>
90013cf0:	9a04      	ldr	r2, [sp, #16]
90013cf2:	b9d8      	cbnz	r0, 90013d2c <_vfiprintf_r+0x12c>
90013cf4:	06d1      	lsls	r1, r2, #27
90013cf6:	bf44      	itt	mi
90013cf8:	2320      	movmi	r3, #32
90013cfa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
90013cfe:	0713      	lsls	r3, r2, #28
90013d00:	bf44      	itt	mi
90013d02:	232b      	movmi	r3, #43	; 0x2b
90013d04:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
90013d08:	f89a 3000 	ldrb.w	r3, [sl]
90013d0c:	2b2a      	cmp	r3, #42	; 0x2a
90013d0e:	d015      	beq.n	90013d3c <_vfiprintf_r+0x13c>
90013d10:	9a07      	ldr	r2, [sp, #28]
90013d12:	4654      	mov	r4, sl
90013d14:	2000      	movs	r0, #0
90013d16:	f04f 0c0a 	mov.w	ip, #10
90013d1a:	4621      	mov	r1, r4
90013d1c:	f811 3b01 	ldrb.w	r3, [r1], #1
90013d20:	3b30      	subs	r3, #48	; 0x30
90013d22:	2b09      	cmp	r3, #9
90013d24:	d94e      	bls.n	90013dc4 <_vfiprintf_r+0x1c4>
90013d26:	b1b0      	cbz	r0, 90013d56 <_vfiprintf_r+0x156>
90013d28:	9207      	str	r2, [sp, #28]
90013d2a:	e014      	b.n	90013d56 <_vfiprintf_r+0x156>
90013d2c:	eba0 0308 	sub.w	r3, r0, r8
90013d30:	fa09 f303 	lsl.w	r3, r9, r3
90013d34:	4313      	orrs	r3, r2
90013d36:	9304      	str	r3, [sp, #16]
90013d38:	46a2      	mov	sl, r4
90013d3a:	e7d2      	b.n	90013ce2 <_vfiprintf_r+0xe2>
90013d3c:	9b03      	ldr	r3, [sp, #12]
90013d3e:	1d19      	adds	r1, r3, #4
90013d40:	681b      	ldr	r3, [r3, #0]
90013d42:	9103      	str	r1, [sp, #12]
90013d44:	2b00      	cmp	r3, #0
90013d46:	bfbb      	ittet	lt
90013d48:	425b      	neglt	r3, r3
90013d4a:	f042 0202 	orrlt.w	r2, r2, #2
90013d4e:	9307      	strge	r3, [sp, #28]
90013d50:	9307      	strlt	r3, [sp, #28]
90013d52:	bfb8      	it	lt
90013d54:	9204      	strlt	r2, [sp, #16]
90013d56:	7823      	ldrb	r3, [r4, #0]
90013d58:	2b2e      	cmp	r3, #46	; 0x2e
90013d5a:	d10c      	bne.n	90013d76 <_vfiprintf_r+0x176>
90013d5c:	7863      	ldrb	r3, [r4, #1]
90013d5e:	2b2a      	cmp	r3, #42	; 0x2a
90013d60:	d135      	bne.n	90013dce <_vfiprintf_r+0x1ce>
90013d62:	9b03      	ldr	r3, [sp, #12]
90013d64:	1d1a      	adds	r2, r3, #4
90013d66:	681b      	ldr	r3, [r3, #0]
90013d68:	9203      	str	r2, [sp, #12]
90013d6a:	2b00      	cmp	r3, #0
90013d6c:	bfb8      	it	lt
90013d6e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
90013d72:	3402      	adds	r4, #2
90013d74:	9305      	str	r3, [sp, #20]
90013d76:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 90013e5c <_vfiprintf_r+0x25c>
90013d7a:	7821      	ldrb	r1, [r4, #0]
90013d7c:	2203      	movs	r2, #3
90013d7e:	4650      	mov	r0, sl
90013d80:	f7ec fac6 	bl	90000310 <memchr>
90013d84:	b140      	cbz	r0, 90013d98 <_vfiprintf_r+0x198>
90013d86:	2340      	movs	r3, #64	; 0x40
90013d88:	eba0 000a 	sub.w	r0, r0, sl
90013d8c:	fa03 f000 	lsl.w	r0, r3, r0
90013d90:	9b04      	ldr	r3, [sp, #16]
90013d92:	4303      	orrs	r3, r0
90013d94:	3401      	adds	r4, #1
90013d96:	9304      	str	r3, [sp, #16]
90013d98:	f814 1b01 	ldrb.w	r1, [r4], #1
90013d9c:	482c      	ldr	r0, [pc, #176]	; (90013e50 <_vfiprintf_r+0x250>)
90013d9e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
90013da2:	2206      	movs	r2, #6
90013da4:	f7ec fab4 	bl	90000310 <memchr>
90013da8:	2800      	cmp	r0, #0
90013daa:	d03f      	beq.n	90013e2c <_vfiprintf_r+0x22c>
90013dac:	4b29      	ldr	r3, [pc, #164]	; (90013e54 <_vfiprintf_r+0x254>)
90013dae:	bb1b      	cbnz	r3, 90013df8 <_vfiprintf_r+0x1f8>
90013db0:	9b03      	ldr	r3, [sp, #12]
90013db2:	3307      	adds	r3, #7
90013db4:	f023 0307 	bic.w	r3, r3, #7
90013db8:	3308      	adds	r3, #8
90013dba:	9303      	str	r3, [sp, #12]
90013dbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
90013dbe:	443b      	add	r3, r7
90013dc0:	9309      	str	r3, [sp, #36]	; 0x24
90013dc2:	e767      	b.n	90013c94 <_vfiprintf_r+0x94>
90013dc4:	fb0c 3202 	mla	r2, ip, r2, r3
90013dc8:	460c      	mov	r4, r1
90013dca:	2001      	movs	r0, #1
90013dcc:	e7a5      	b.n	90013d1a <_vfiprintf_r+0x11a>
90013dce:	2300      	movs	r3, #0
90013dd0:	3401      	adds	r4, #1
90013dd2:	9305      	str	r3, [sp, #20]
90013dd4:	4619      	mov	r1, r3
90013dd6:	f04f 0c0a 	mov.w	ip, #10
90013dda:	4620      	mov	r0, r4
90013ddc:	f810 2b01 	ldrb.w	r2, [r0], #1
90013de0:	3a30      	subs	r2, #48	; 0x30
90013de2:	2a09      	cmp	r2, #9
90013de4:	d903      	bls.n	90013dee <_vfiprintf_r+0x1ee>
90013de6:	2b00      	cmp	r3, #0
90013de8:	d0c5      	beq.n	90013d76 <_vfiprintf_r+0x176>
90013dea:	9105      	str	r1, [sp, #20]
90013dec:	e7c3      	b.n	90013d76 <_vfiprintf_r+0x176>
90013dee:	fb0c 2101 	mla	r1, ip, r1, r2
90013df2:	4604      	mov	r4, r0
90013df4:	2301      	movs	r3, #1
90013df6:	e7f0      	b.n	90013dda <_vfiprintf_r+0x1da>
90013df8:	ab03      	add	r3, sp, #12
90013dfa:	9300      	str	r3, [sp, #0]
90013dfc:	462a      	mov	r2, r5
90013dfe:	4b16      	ldr	r3, [pc, #88]	; (90013e58 <_vfiprintf_r+0x258>)
90013e00:	a904      	add	r1, sp, #16
90013e02:	4630      	mov	r0, r6
90013e04:	f3af 8000 	nop.w
90013e08:	4607      	mov	r7, r0
90013e0a:	1c78      	adds	r0, r7, #1
90013e0c:	d1d6      	bne.n	90013dbc <_vfiprintf_r+0x1bc>
90013e0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
90013e10:	07d9      	lsls	r1, r3, #31
90013e12:	d405      	bmi.n	90013e20 <_vfiprintf_r+0x220>
90013e14:	89ab      	ldrh	r3, [r5, #12]
90013e16:	059a      	lsls	r2, r3, #22
90013e18:	d402      	bmi.n	90013e20 <_vfiprintf_r+0x220>
90013e1a:	6da8      	ldr	r0, [r5, #88]	; 0x58
90013e1c:	f7ff fb50 	bl	900134c0 <__retarget_lock_release_recursive>
90013e20:	89ab      	ldrh	r3, [r5, #12]
90013e22:	065b      	lsls	r3, r3, #25
90013e24:	f53f af12 	bmi.w	90013c4c <_vfiprintf_r+0x4c>
90013e28:	9809      	ldr	r0, [sp, #36]	; 0x24
90013e2a:	e711      	b.n	90013c50 <_vfiprintf_r+0x50>
90013e2c:	ab03      	add	r3, sp, #12
90013e2e:	9300      	str	r3, [sp, #0]
90013e30:	462a      	mov	r2, r5
90013e32:	4b09      	ldr	r3, [pc, #36]	; (90013e58 <_vfiprintf_r+0x258>)
90013e34:	a904      	add	r1, sp, #16
90013e36:	4630      	mov	r0, r6
90013e38:	f000 f880 	bl	90013f3c <_printf_i>
90013e3c:	e7e4      	b.n	90013e08 <_vfiprintf_r+0x208>
90013e3e:	bf00      	nop
90013e40:	9001750c 	.word	0x9001750c
90013e44:	9001752c 	.word	0x9001752c
90013e48:	900174ec 	.word	0x900174ec
90013e4c:	900175fe 	.word	0x900175fe
90013e50:	90017608 	.word	0x90017608
90013e54:	00000000 	.word	0x00000000
90013e58:	90013bdb 	.word	0x90013bdb
90013e5c:	90017604 	.word	0x90017604

90013e60 <_printf_common>:
90013e60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
90013e64:	4616      	mov	r6, r2
90013e66:	4699      	mov	r9, r3
90013e68:	688a      	ldr	r2, [r1, #8]
90013e6a:	690b      	ldr	r3, [r1, #16]
90013e6c:	f8dd 8020 	ldr.w	r8, [sp, #32]
90013e70:	4293      	cmp	r3, r2
90013e72:	bfb8      	it	lt
90013e74:	4613      	movlt	r3, r2
90013e76:	6033      	str	r3, [r6, #0]
90013e78:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
90013e7c:	4607      	mov	r7, r0
90013e7e:	460c      	mov	r4, r1
90013e80:	b10a      	cbz	r2, 90013e86 <_printf_common+0x26>
90013e82:	3301      	adds	r3, #1
90013e84:	6033      	str	r3, [r6, #0]
90013e86:	6823      	ldr	r3, [r4, #0]
90013e88:	0699      	lsls	r1, r3, #26
90013e8a:	bf42      	ittt	mi
90013e8c:	6833      	ldrmi	r3, [r6, #0]
90013e8e:	3302      	addmi	r3, #2
90013e90:	6033      	strmi	r3, [r6, #0]
90013e92:	6825      	ldr	r5, [r4, #0]
90013e94:	f015 0506 	ands.w	r5, r5, #6
90013e98:	d106      	bne.n	90013ea8 <_printf_common+0x48>
90013e9a:	f104 0a19 	add.w	sl, r4, #25
90013e9e:	68e3      	ldr	r3, [r4, #12]
90013ea0:	6832      	ldr	r2, [r6, #0]
90013ea2:	1a9b      	subs	r3, r3, r2
90013ea4:	42ab      	cmp	r3, r5
90013ea6:	dc26      	bgt.n	90013ef6 <_printf_common+0x96>
90013ea8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
90013eac:	1e13      	subs	r3, r2, #0
90013eae:	6822      	ldr	r2, [r4, #0]
90013eb0:	bf18      	it	ne
90013eb2:	2301      	movne	r3, #1
90013eb4:	0692      	lsls	r2, r2, #26
90013eb6:	d42b      	bmi.n	90013f10 <_printf_common+0xb0>
90013eb8:	f104 0243 	add.w	r2, r4, #67	; 0x43
90013ebc:	4649      	mov	r1, r9
90013ebe:	4638      	mov	r0, r7
90013ec0:	47c0      	blx	r8
90013ec2:	3001      	adds	r0, #1
90013ec4:	d01e      	beq.n	90013f04 <_printf_common+0xa4>
90013ec6:	6823      	ldr	r3, [r4, #0]
90013ec8:	68e5      	ldr	r5, [r4, #12]
90013eca:	6832      	ldr	r2, [r6, #0]
90013ecc:	f003 0306 	and.w	r3, r3, #6
90013ed0:	2b04      	cmp	r3, #4
90013ed2:	bf08      	it	eq
90013ed4:	1aad      	subeq	r5, r5, r2
90013ed6:	68a3      	ldr	r3, [r4, #8]
90013ed8:	6922      	ldr	r2, [r4, #16]
90013eda:	bf0c      	ite	eq
90013edc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
90013ee0:	2500      	movne	r5, #0
90013ee2:	4293      	cmp	r3, r2
90013ee4:	bfc4      	itt	gt
90013ee6:	1a9b      	subgt	r3, r3, r2
90013ee8:	18ed      	addgt	r5, r5, r3
90013eea:	2600      	movs	r6, #0
90013eec:	341a      	adds	r4, #26
90013eee:	42b5      	cmp	r5, r6
90013ef0:	d11a      	bne.n	90013f28 <_printf_common+0xc8>
90013ef2:	2000      	movs	r0, #0
90013ef4:	e008      	b.n	90013f08 <_printf_common+0xa8>
90013ef6:	2301      	movs	r3, #1
90013ef8:	4652      	mov	r2, sl
90013efa:	4649      	mov	r1, r9
90013efc:	4638      	mov	r0, r7
90013efe:	47c0      	blx	r8
90013f00:	3001      	adds	r0, #1
90013f02:	d103      	bne.n	90013f0c <_printf_common+0xac>
90013f04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
90013f08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
90013f0c:	3501      	adds	r5, #1
90013f0e:	e7c6      	b.n	90013e9e <_printf_common+0x3e>
90013f10:	18e1      	adds	r1, r4, r3
90013f12:	1c5a      	adds	r2, r3, #1
90013f14:	2030      	movs	r0, #48	; 0x30
90013f16:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
90013f1a:	4422      	add	r2, r4
90013f1c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
90013f20:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
90013f24:	3302      	adds	r3, #2
90013f26:	e7c7      	b.n	90013eb8 <_printf_common+0x58>
90013f28:	2301      	movs	r3, #1
90013f2a:	4622      	mov	r2, r4
90013f2c:	4649      	mov	r1, r9
90013f2e:	4638      	mov	r0, r7
90013f30:	47c0      	blx	r8
90013f32:	3001      	adds	r0, #1
90013f34:	d0e6      	beq.n	90013f04 <_printf_common+0xa4>
90013f36:	3601      	adds	r6, #1
90013f38:	e7d9      	b.n	90013eee <_printf_common+0x8e>
	...

90013f3c <_printf_i>:
90013f3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
90013f40:	7e0f      	ldrb	r7, [r1, #24]
90013f42:	9d0c      	ldr	r5, [sp, #48]	; 0x30
90013f44:	2f78      	cmp	r7, #120	; 0x78
90013f46:	4691      	mov	r9, r2
90013f48:	4680      	mov	r8, r0
90013f4a:	460c      	mov	r4, r1
90013f4c:	469a      	mov	sl, r3
90013f4e:	f101 0243 	add.w	r2, r1, #67	; 0x43
90013f52:	d807      	bhi.n	90013f64 <_printf_i+0x28>
90013f54:	2f62      	cmp	r7, #98	; 0x62
90013f56:	d80a      	bhi.n	90013f6e <_printf_i+0x32>
90013f58:	2f00      	cmp	r7, #0
90013f5a:	f000 80d8 	beq.w	9001410e <_printf_i+0x1d2>
90013f5e:	2f58      	cmp	r7, #88	; 0x58
90013f60:	f000 80a3 	beq.w	900140aa <_printf_i+0x16e>
90013f64:	f104 0542 	add.w	r5, r4, #66	; 0x42
90013f68:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
90013f6c:	e03a      	b.n	90013fe4 <_printf_i+0xa8>
90013f6e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
90013f72:	2b15      	cmp	r3, #21
90013f74:	d8f6      	bhi.n	90013f64 <_printf_i+0x28>
90013f76:	a101      	add	r1, pc, #4	; (adr r1, 90013f7c <_printf_i+0x40>)
90013f78:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
90013f7c:	90013fd5 	.word	0x90013fd5
90013f80:	90013fe9 	.word	0x90013fe9
90013f84:	90013f65 	.word	0x90013f65
90013f88:	90013f65 	.word	0x90013f65
90013f8c:	90013f65 	.word	0x90013f65
90013f90:	90013f65 	.word	0x90013f65
90013f94:	90013fe9 	.word	0x90013fe9
90013f98:	90013f65 	.word	0x90013f65
90013f9c:	90013f65 	.word	0x90013f65
90013fa0:	90013f65 	.word	0x90013f65
90013fa4:	90013f65 	.word	0x90013f65
90013fa8:	900140f5 	.word	0x900140f5
90013fac:	90014019 	.word	0x90014019
90013fb0:	900140d7 	.word	0x900140d7
90013fb4:	90013f65 	.word	0x90013f65
90013fb8:	90013f65 	.word	0x90013f65
90013fbc:	90014117 	.word	0x90014117
90013fc0:	90013f65 	.word	0x90013f65
90013fc4:	90014019 	.word	0x90014019
90013fc8:	90013f65 	.word	0x90013f65
90013fcc:	90013f65 	.word	0x90013f65
90013fd0:	900140df 	.word	0x900140df
90013fd4:	682b      	ldr	r3, [r5, #0]
90013fd6:	1d1a      	adds	r2, r3, #4
90013fd8:	681b      	ldr	r3, [r3, #0]
90013fda:	602a      	str	r2, [r5, #0]
90013fdc:	f104 0542 	add.w	r5, r4, #66	; 0x42
90013fe0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
90013fe4:	2301      	movs	r3, #1
90013fe6:	e0a3      	b.n	90014130 <_printf_i+0x1f4>
90013fe8:	6820      	ldr	r0, [r4, #0]
90013fea:	6829      	ldr	r1, [r5, #0]
90013fec:	0606      	lsls	r6, r0, #24
90013fee:	f101 0304 	add.w	r3, r1, #4
90013ff2:	d50a      	bpl.n	9001400a <_printf_i+0xce>
90013ff4:	680e      	ldr	r6, [r1, #0]
90013ff6:	602b      	str	r3, [r5, #0]
90013ff8:	2e00      	cmp	r6, #0
90013ffa:	da03      	bge.n	90014004 <_printf_i+0xc8>
90013ffc:	232d      	movs	r3, #45	; 0x2d
90013ffe:	4276      	negs	r6, r6
90014000:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
90014004:	485e      	ldr	r0, [pc, #376]	; (90014180 <_printf_i+0x244>)
90014006:	230a      	movs	r3, #10
90014008:	e019      	b.n	9001403e <_printf_i+0x102>
9001400a:	680e      	ldr	r6, [r1, #0]
9001400c:	602b      	str	r3, [r5, #0]
9001400e:	f010 0f40 	tst.w	r0, #64	; 0x40
90014012:	bf18      	it	ne
90014014:	b236      	sxthne	r6, r6
90014016:	e7ef      	b.n	90013ff8 <_printf_i+0xbc>
90014018:	682b      	ldr	r3, [r5, #0]
9001401a:	6820      	ldr	r0, [r4, #0]
9001401c:	1d19      	adds	r1, r3, #4
9001401e:	6029      	str	r1, [r5, #0]
90014020:	0601      	lsls	r1, r0, #24
90014022:	d501      	bpl.n	90014028 <_printf_i+0xec>
90014024:	681e      	ldr	r6, [r3, #0]
90014026:	e002      	b.n	9001402e <_printf_i+0xf2>
90014028:	0646      	lsls	r6, r0, #25
9001402a:	d5fb      	bpl.n	90014024 <_printf_i+0xe8>
9001402c:	881e      	ldrh	r6, [r3, #0]
9001402e:	4854      	ldr	r0, [pc, #336]	; (90014180 <_printf_i+0x244>)
90014030:	2f6f      	cmp	r7, #111	; 0x6f
90014032:	bf0c      	ite	eq
90014034:	2308      	moveq	r3, #8
90014036:	230a      	movne	r3, #10
90014038:	2100      	movs	r1, #0
9001403a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
9001403e:	6865      	ldr	r5, [r4, #4]
90014040:	60a5      	str	r5, [r4, #8]
90014042:	2d00      	cmp	r5, #0
90014044:	bfa2      	ittt	ge
90014046:	6821      	ldrge	r1, [r4, #0]
90014048:	f021 0104 	bicge.w	r1, r1, #4
9001404c:	6021      	strge	r1, [r4, #0]
9001404e:	b90e      	cbnz	r6, 90014054 <_printf_i+0x118>
90014050:	2d00      	cmp	r5, #0
90014052:	d04d      	beq.n	900140f0 <_printf_i+0x1b4>
90014054:	4615      	mov	r5, r2
90014056:	fbb6 f1f3 	udiv	r1, r6, r3
9001405a:	fb03 6711 	mls	r7, r3, r1, r6
9001405e:	5dc7      	ldrb	r7, [r0, r7]
90014060:	f805 7d01 	strb.w	r7, [r5, #-1]!
90014064:	4637      	mov	r7, r6
90014066:	42bb      	cmp	r3, r7
90014068:	460e      	mov	r6, r1
9001406a:	d9f4      	bls.n	90014056 <_printf_i+0x11a>
9001406c:	2b08      	cmp	r3, #8
9001406e:	d10b      	bne.n	90014088 <_printf_i+0x14c>
90014070:	6823      	ldr	r3, [r4, #0]
90014072:	07de      	lsls	r6, r3, #31
90014074:	d508      	bpl.n	90014088 <_printf_i+0x14c>
90014076:	6923      	ldr	r3, [r4, #16]
90014078:	6861      	ldr	r1, [r4, #4]
9001407a:	4299      	cmp	r1, r3
9001407c:	bfde      	ittt	le
9001407e:	2330      	movle	r3, #48	; 0x30
90014080:	f805 3c01 	strble.w	r3, [r5, #-1]
90014084:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
90014088:	1b52      	subs	r2, r2, r5
9001408a:	6122      	str	r2, [r4, #16]
9001408c:	f8cd a000 	str.w	sl, [sp]
90014090:	464b      	mov	r3, r9
90014092:	aa03      	add	r2, sp, #12
90014094:	4621      	mov	r1, r4
90014096:	4640      	mov	r0, r8
90014098:	f7ff fee2 	bl	90013e60 <_printf_common>
9001409c:	3001      	adds	r0, #1
9001409e:	d14c      	bne.n	9001413a <_printf_i+0x1fe>
900140a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
900140a4:	b004      	add	sp, #16
900140a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
900140aa:	4835      	ldr	r0, [pc, #212]	; (90014180 <_printf_i+0x244>)
900140ac:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
900140b0:	6829      	ldr	r1, [r5, #0]
900140b2:	6823      	ldr	r3, [r4, #0]
900140b4:	f851 6b04 	ldr.w	r6, [r1], #4
900140b8:	6029      	str	r1, [r5, #0]
900140ba:	061d      	lsls	r5, r3, #24
900140bc:	d514      	bpl.n	900140e8 <_printf_i+0x1ac>
900140be:	07df      	lsls	r7, r3, #31
900140c0:	bf44      	itt	mi
900140c2:	f043 0320 	orrmi.w	r3, r3, #32
900140c6:	6023      	strmi	r3, [r4, #0]
900140c8:	b91e      	cbnz	r6, 900140d2 <_printf_i+0x196>
900140ca:	6823      	ldr	r3, [r4, #0]
900140cc:	f023 0320 	bic.w	r3, r3, #32
900140d0:	6023      	str	r3, [r4, #0]
900140d2:	2310      	movs	r3, #16
900140d4:	e7b0      	b.n	90014038 <_printf_i+0xfc>
900140d6:	6823      	ldr	r3, [r4, #0]
900140d8:	f043 0320 	orr.w	r3, r3, #32
900140dc:	6023      	str	r3, [r4, #0]
900140de:	2378      	movs	r3, #120	; 0x78
900140e0:	4828      	ldr	r0, [pc, #160]	; (90014184 <_printf_i+0x248>)
900140e2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
900140e6:	e7e3      	b.n	900140b0 <_printf_i+0x174>
900140e8:	0659      	lsls	r1, r3, #25
900140ea:	bf48      	it	mi
900140ec:	b2b6      	uxthmi	r6, r6
900140ee:	e7e6      	b.n	900140be <_printf_i+0x182>
900140f0:	4615      	mov	r5, r2
900140f2:	e7bb      	b.n	9001406c <_printf_i+0x130>
900140f4:	682b      	ldr	r3, [r5, #0]
900140f6:	6826      	ldr	r6, [r4, #0]
900140f8:	6961      	ldr	r1, [r4, #20]
900140fa:	1d18      	adds	r0, r3, #4
900140fc:	6028      	str	r0, [r5, #0]
900140fe:	0635      	lsls	r5, r6, #24
90014100:	681b      	ldr	r3, [r3, #0]
90014102:	d501      	bpl.n	90014108 <_printf_i+0x1cc>
90014104:	6019      	str	r1, [r3, #0]
90014106:	e002      	b.n	9001410e <_printf_i+0x1d2>
90014108:	0670      	lsls	r0, r6, #25
9001410a:	d5fb      	bpl.n	90014104 <_printf_i+0x1c8>
9001410c:	8019      	strh	r1, [r3, #0]
9001410e:	2300      	movs	r3, #0
90014110:	6123      	str	r3, [r4, #16]
90014112:	4615      	mov	r5, r2
90014114:	e7ba      	b.n	9001408c <_printf_i+0x150>
90014116:	682b      	ldr	r3, [r5, #0]
90014118:	1d1a      	adds	r2, r3, #4
9001411a:	602a      	str	r2, [r5, #0]
9001411c:	681d      	ldr	r5, [r3, #0]
9001411e:	6862      	ldr	r2, [r4, #4]
90014120:	2100      	movs	r1, #0
90014122:	4628      	mov	r0, r5
90014124:	f7ec f8f4 	bl	90000310 <memchr>
90014128:	b108      	cbz	r0, 9001412e <_printf_i+0x1f2>
9001412a:	1b40      	subs	r0, r0, r5
9001412c:	6060      	str	r0, [r4, #4]
9001412e:	6863      	ldr	r3, [r4, #4]
90014130:	6123      	str	r3, [r4, #16]
90014132:	2300      	movs	r3, #0
90014134:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
90014138:	e7a8      	b.n	9001408c <_printf_i+0x150>
9001413a:	6923      	ldr	r3, [r4, #16]
9001413c:	462a      	mov	r2, r5
9001413e:	4649      	mov	r1, r9
90014140:	4640      	mov	r0, r8
90014142:	47d0      	blx	sl
90014144:	3001      	adds	r0, #1
90014146:	d0ab      	beq.n	900140a0 <_printf_i+0x164>
90014148:	6823      	ldr	r3, [r4, #0]
9001414a:	079b      	lsls	r3, r3, #30
9001414c:	d413      	bmi.n	90014176 <_printf_i+0x23a>
9001414e:	68e0      	ldr	r0, [r4, #12]
90014150:	9b03      	ldr	r3, [sp, #12]
90014152:	4298      	cmp	r0, r3
90014154:	bfb8      	it	lt
90014156:	4618      	movlt	r0, r3
90014158:	e7a4      	b.n	900140a4 <_printf_i+0x168>
9001415a:	2301      	movs	r3, #1
9001415c:	4632      	mov	r2, r6
9001415e:	4649      	mov	r1, r9
90014160:	4640      	mov	r0, r8
90014162:	47d0      	blx	sl
90014164:	3001      	adds	r0, #1
90014166:	d09b      	beq.n	900140a0 <_printf_i+0x164>
90014168:	3501      	adds	r5, #1
9001416a:	68e3      	ldr	r3, [r4, #12]
9001416c:	9903      	ldr	r1, [sp, #12]
9001416e:	1a5b      	subs	r3, r3, r1
90014170:	42ab      	cmp	r3, r5
90014172:	dcf2      	bgt.n	9001415a <_printf_i+0x21e>
90014174:	e7eb      	b.n	9001414e <_printf_i+0x212>
90014176:	2500      	movs	r5, #0
90014178:	f104 0619 	add.w	r6, r4, #25
9001417c:	e7f5      	b.n	9001416a <_printf_i+0x22e>
9001417e:	bf00      	nop
90014180:	9001760f 	.word	0x9001760f
90014184:	90017620 	.word	0x90017620

90014188 <_read_r>:
90014188:	b538      	push	{r3, r4, r5, lr}
9001418a:	4d07      	ldr	r5, [pc, #28]	; (900141a8 <_read_r+0x20>)
9001418c:	4604      	mov	r4, r0
9001418e:	4608      	mov	r0, r1
90014190:	4611      	mov	r1, r2
90014192:	2200      	movs	r2, #0
90014194:	602a      	str	r2, [r5, #0]
90014196:	461a      	mov	r2, r3
90014198:	f7ec fb64 	bl	90000864 <_read>
9001419c:	1c43      	adds	r3, r0, #1
9001419e:	d102      	bne.n	900141a6 <_read_r+0x1e>
900141a0:	682b      	ldr	r3, [r5, #0]
900141a2:	b103      	cbz	r3, 900141a6 <_read_r+0x1e>
900141a4:	6023      	str	r3, [r4, #0]
900141a6:	bd38      	pop	{r3, r4, r5, pc}
900141a8:	2401118c 	.word	0x2401118c

900141ac <__swbuf_r>:
900141ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
900141ae:	460e      	mov	r6, r1
900141b0:	4614      	mov	r4, r2
900141b2:	4605      	mov	r5, r0
900141b4:	b118      	cbz	r0, 900141be <__swbuf_r+0x12>
900141b6:	6983      	ldr	r3, [r0, #24]
900141b8:	b90b      	cbnz	r3, 900141be <__swbuf_r+0x12>
900141ba:	f7ff f8bd 	bl	90013338 <__sinit>
900141be:	4b21      	ldr	r3, [pc, #132]	; (90014244 <__swbuf_r+0x98>)
900141c0:	429c      	cmp	r4, r3
900141c2:	d12b      	bne.n	9001421c <__swbuf_r+0x70>
900141c4:	686c      	ldr	r4, [r5, #4]
900141c6:	69a3      	ldr	r3, [r4, #24]
900141c8:	60a3      	str	r3, [r4, #8]
900141ca:	89a3      	ldrh	r3, [r4, #12]
900141cc:	071a      	lsls	r2, r3, #28
900141ce:	d52f      	bpl.n	90014230 <__swbuf_r+0x84>
900141d0:	6923      	ldr	r3, [r4, #16]
900141d2:	b36b      	cbz	r3, 90014230 <__swbuf_r+0x84>
900141d4:	6923      	ldr	r3, [r4, #16]
900141d6:	6820      	ldr	r0, [r4, #0]
900141d8:	1ac0      	subs	r0, r0, r3
900141da:	6963      	ldr	r3, [r4, #20]
900141dc:	b2f6      	uxtb	r6, r6
900141de:	4283      	cmp	r3, r0
900141e0:	4637      	mov	r7, r6
900141e2:	dc04      	bgt.n	900141ee <__swbuf_r+0x42>
900141e4:	4621      	mov	r1, r4
900141e6:	4628      	mov	r0, r5
900141e8:	f7ff fc20 	bl	90013a2c <_fflush_r>
900141ec:	bb30      	cbnz	r0, 9001423c <__swbuf_r+0x90>
900141ee:	68a3      	ldr	r3, [r4, #8]
900141f0:	3b01      	subs	r3, #1
900141f2:	60a3      	str	r3, [r4, #8]
900141f4:	6823      	ldr	r3, [r4, #0]
900141f6:	1c5a      	adds	r2, r3, #1
900141f8:	6022      	str	r2, [r4, #0]
900141fa:	701e      	strb	r6, [r3, #0]
900141fc:	6963      	ldr	r3, [r4, #20]
900141fe:	3001      	adds	r0, #1
90014200:	4283      	cmp	r3, r0
90014202:	d004      	beq.n	9001420e <__swbuf_r+0x62>
90014204:	89a3      	ldrh	r3, [r4, #12]
90014206:	07db      	lsls	r3, r3, #31
90014208:	d506      	bpl.n	90014218 <__swbuf_r+0x6c>
9001420a:	2e0a      	cmp	r6, #10
9001420c:	d104      	bne.n	90014218 <__swbuf_r+0x6c>
9001420e:	4621      	mov	r1, r4
90014210:	4628      	mov	r0, r5
90014212:	f7ff fc0b 	bl	90013a2c <_fflush_r>
90014216:	b988      	cbnz	r0, 9001423c <__swbuf_r+0x90>
90014218:	4638      	mov	r0, r7
9001421a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
9001421c:	4b0a      	ldr	r3, [pc, #40]	; (90014248 <__swbuf_r+0x9c>)
9001421e:	429c      	cmp	r4, r3
90014220:	d101      	bne.n	90014226 <__swbuf_r+0x7a>
90014222:	68ac      	ldr	r4, [r5, #8]
90014224:	e7cf      	b.n	900141c6 <__swbuf_r+0x1a>
90014226:	4b09      	ldr	r3, [pc, #36]	; (9001424c <__swbuf_r+0xa0>)
90014228:	429c      	cmp	r4, r3
9001422a:	bf08      	it	eq
9001422c:	68ec      	ldreq	r4, [r5, #12]
9001422e:	e7ca      	b.n	900141c6 <__swbuf_r+0x1a>
90014230:	4621      	mov	r1, r4
90014232:	4628      	mov	r0, r5
90014234:	f000 f80c 	bl	90014250 <__swsetup_r>
90014238:	2800      	cmp	r0, #0
9001423a:	d0cb      	beq.n	900141d4 <__swbuf_r+0x28>
9001423c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
90014240:	e7ea      	b.n	90014218 <__swbuf_r+0x6c>
90014242:	bf00      	nop
90014244:	9001750c 	.word	0x9001750c
90014248:	9001752c 	.word	0x9001752c
9001424c:	900174ec 	.word	0x900174ec

90014250 <__swsetup_r>:
90014250:	4b32      	ldr	r3, [pc, #200]	; (9001431c <__swsetup_r+0xcc>)
90014252:	b570      	push	{r4, r5, r6, lr}
90014254:	681d      	ldr	r5, [r3, #0]
90014256:	4606      	mov	r6, r0
90014258:	460c      	mov	r4, r1
9001425a:	b125      	cbz	r5, 90014266 <__swsetup_r+0x16>
9001425c:	69ab      	ldr	r3, [r5, #24]
9001425e:	b913      	cbnz	r3, 90014266 <__swsetup_r+0x16>
90014260:	4628      	mov	r0, r5
90014262:	f7ff f869 	bl	90013338 <__sinit>
90014266:	4b2e      	ldr	r3, [pc, #184]	; (90014320 <__swsetup_r+0xd0>)
90014268:	429c      	cmp	r4, r3
9001426a:	d10f      	bne.n	9001428c <__swsetup_r+0x3c>
9001426c:	686c      	ldr	r4, [r5, #4]
9001426e:	89a3      	ldrh	r3, [r4, #12]
90014270:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
90014274:	0719      	lsls	r1, r3, #28
90014276:	d42c      	bmi.n	900142d2 <__swsetup_r+0x82>
90014278:	06dd      	lsls	r5, r3, #27
9001427a:	d411      	bmi.n	900142a0 <__swsetup_r+0x50>
9001427c:	2309      	movs	r3, #9
9001427e:	6033      	str	r3, [r6, #0]
90014280:	f042 0340 	orr.w	r3, r2, #64	; 0x40
90014284:	81a3      	strh	r3, [r4, #12]
90014286:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
9001428a:	e03e      	b.n	9001430a <__swsetup_r+0xba>
9001428c:	4b25      	ldr	r3, [pc, #148]	; (90014324 <__swsetup_r+0xd4>)
9001428e:	429c      	cmp	r4, r3
90014290:	d101      	bne.n	90014296 <__swsetup_r+0x46>
90014292:	68ac      	ldr	r4, [r5, #8]
90014294:	e7eb      	b.n	9001426e <__swsetup_r+0x1e>
90014296:	4b24      	ldr	r3, [pc, #144]	; (90014328 <__swsetup_r+0xd8>)
90014298:	429c      	cmp	r4, r3
9001429a:	bf08      	it	eq
9001429c:	68ec      	ldreq	r4, [r5, #12]
9001429e:	e7e6      	b.n	9001426e <__swsetup_r+0x1e>
900142a0:	0758      	lsls	r0, r3, #29
900142a2:	d512      	bpl.n	900142ca <__swsetup_r+0x7a>
900142a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
900142a6:	b141      	cbz	r1, 900142ba <__swsetup_r+0x6a>
900142a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
900142ac:	4299      	cmp	r1, r3
900142ae:	d002      	beq.n	900142b6 <__swsetup_r+0x66>
900142b0:	4630      	mov	r0, r6
900142b2:	f7ff fc2f 	bl	90013b14 <_free_r>
900142b6:	2300      	movs	r3, #0
900142b8:	6363      	str	r3, [r4, #52]	; 0x34
900142ba:	89a3      	ldrh	r3, [r4, #12]
900142bc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
900142c0:	81a3      	strh	r3, [r4, #12]
900142c2:	2300      	movs	r3, #0
900142c4:	6063      	str	r3, [r4, #4]
900142c6:	6923      	ldr	r3, [r4, #16]
900142c8:	6023      	str	r3, [r4, #0]
900142ca:	89a3      	ldrh	r3, [r4, #12]
900142cc:	f043 0308 	orr.w	r3, r3, #8
900142d0:	81a3      	strh	r3, [r4, #12]
900142d2:	6923      	ldr	r3, [r4, #16]
900142d4:	b94b      	cbnz	r3, 900142ea <__swsetup_r+0x9a>
900142d6:	89a3      	ldrh	r3, [r4, #12]
900142d8:	f403 7320 	and.w	r3, r3, #640	; 0x280
900142dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
900142e0:	d003      	beq.n	900142ea <__swsetup_r+0x9a>
900142e2:	4621      	mov	r1, r4
900142e4:	4630      	mov	r0, r6
900142e6:	f000 f84d 	bl	90014384 <__smakebuf_r>
900142ea:	89a0      	ldrh	r0, [r4, #12]
900142ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
900142f0:	f010 0301 	ands.w	r3, r0, #1
900142f4:	d00a      	beq.n	9001430c <__swsetup_r+0xbc>
900142f6:	2300      	movs	r3, #0
900142f8:	60a3      	str	r3, [r4, #8]
900142fa:	6963      	ldr	r3, [r4, #20]
900142fc:	425b      	negs	r3, r3
900142fe:	61a3      	str	r3, [r4, #24]
90014300:	6923      	ldr	r3, [r4, #16]
90014302:	b943      	cbnz	r3, 90014316 <__swsetup_r+0xc6>
90014304:	f010 0080 	ands.w	r0, r0, #128	; 0x80
90014308:	d1ba      	bne.n	90014280 <__swsetup_r+0x30>
9001430a:	bd70      	pop	{r4, r5, r6, pc}
9001430c:	0781      	lsls	r1, r0, #30
9001430e:	bf58      	it	pl
90014310:	6963      	ldrpl	r3, [r4, #20]
90014312:	60a3      	str	r3, [r4, #8]
90014314:	e7f4      	b.n	90014300 <__swsetup_r+0xb0>
90014316:	2000      	movs	r0, #0
90014318:	e7f7      	b.n	9001430a <__swsetup_r+0xba>
9001431a:	bf00      	nop
9001431c:	24000034 	.word	0x24000034
90014320:	9001750c 	.word	0x9001750c
90014324:	9001752c 	.word	0x9001752c
90014328:	900174ec 	.word	0x900174ec

9001432c <abort>:
9001432c:	b508      	push	{r3, lr}
9001432e:	2006      	movs	r0, #6
90014330:	f000 f890 	bl	90014454 <raise>
90014334:	2001      	movs	r0, #1
90014336:	f7ec fa8b 	bl	90000850 <_exit>

9001433a <__swhatbuf_r>:
9001433a:	b570      	push	{r4, r5, r6, lr}
9001433c:	460e      	mov	r6, r1
9001433e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
90014342:	2900      	cmp	r1, #0
90014344:	b096      	sub	sp, #88	; 0x58
90014346:	4614      	mov	r4, r2
90014348:	461d      	mov	r5, r3
9001434a:	da08      	bge.n	9001435e <__swhatbuf_r+0x24>
9001434c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
90014350:	2200      	movs	r2, #0
90014352:	602a      	str	r2, [r5, #0]
90014354:	061a      	lsls	r2, r3, #24
90014356:	d410      	bmi.n	9001437a <__swhatbuf_r+0x40>
90014358:	f44f 6380 	mov.w	r3, #1024	; 0x400
9001435c:	e00e      	b.n	9001437c <__swhatbuf_r+0x42>
9001435e:	466a      	mov	r2, sp
90014360:	f000 f894 	bl	9001448c <_fstat_r>
90014364:	2800      	cmp	r0, #0
90014366:	dbf1      	blt.n	9001434c <__swhatbuf_r+0x12>
90014368:	9a01      	ldr	r2, [sp, #4]
9001436a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
9001436e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
90014372:	425a      	negs	r2, r3
90014374:	415a      	adcs	r2, r3
90014376:	602a      	str	r2, [r5, #0]
90014378:	e7ee      	b.n	90014358 <__swhatbuf_r+0x1e>
9001437a:	2340      	movs	r3, #64	; 0x40
9001437c:	2000      	movs	r0, #0
9001437e:	6023      	str	r3, [r4, #0]
90014380:	b016      	add	sp, #88	; 0x58
90014382:	bd70      	pop	{r4, r5, r6, pc}

90014384 <__smakebuf_r>:
90014384:	898b      	ldrh	r3, [r1, #12]
90014386:	b573      	push	{r0, r1, r4, r5, r6, lr}
90014388:	079d      	lsls	r5, r3, #30
9001438a:	4606      	mov	r6, r0
9001438c:	460c      	mov	r4, r1
9001438e:	d507      	bpl.n	900143a0 <__smakebuf_r+0x1c>
90014390:	f104 0347 	add.w	r3, r4, #71	; 0x47
90014394:	6023      	str	r3, [r4, #0]
90014396:	6123      	str	r3, [r4, #16]
90014398:	2301      	movs	r3, #1
9001439a:	6163      	str	r3, [r4, #20]
9001439c:	b002      	add	sp, #8
9001439e:	bd70      	pop	{r4, r5, r6, pc}
900143a0:	ab01      	add	r3, sp, #4
900143a2:	466a      	mov	r2, sp
900143a4:	f7ff ffc9 	bl	9001433a <__swhatbuf_r>
900143a8:	9900      	ldr	r1, [sp, #0]
900143aa:	4605      	mov	r5, r0
900143ac:	4630      	mov	r0, r6
900143ae:	f7ff f8cf 	bl	90013550 <_malloc_r>
900143b2:	b948      	cbnz	r0, 900143c8 <__smakebuf_r+0x44>
900143b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
900143b8:	059a      	lsls	r2, r3, #22
900143ba:	d4ef      	bmi.n	9001439c <__smakebuf_r+0x18>
900143bc:	f023 0303 	bic.w	r3, r3, #3
900143c0:	f043 0302 	orr.w	r3, r3, #2
900143c4:	81a3      	strh	r3, [r4, #12]
900143c6:	e7e3      	b.n	90014390 <__smakebuf_r+0xc>
900143c8:	4b0d      	ldr	r3, [pc, #52]	; (90014400 <__smakebuf_r+0x7c>)
900143ca:	62b3      	str	r3, [r6, #40]	; 0x28
900143cc:	89a3      	ldrh	r3, [r4, #12]
900143ce:	6020      	str	r0, [r4, #0]
900143d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
900143d4:	81a3      	strh	r3, [r4, #12]
900143d6:	9b00      	ldr	r3, [sp, #0]
900143d8:	6163      	str	r3, [r4, #20]
900143da:	9b01      	ldr	r3, [sp, #4]
900143dc:	6120      	str	r0, [r4, #16]
900143de:	b15b      	cbz	r3, 900143f8 <__smakebuf_r+0x74>
900143e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
900143e4:	4630      	mov	r0, r6
900143e6:	f000 f863 	bl	900144b0 <_isatty_r>
900143ea:	b128      	cbz	r0, 900143f8 <__smakebuf_r+0x74>
900143ec:	89a3      	ldrh	r3, [r4, #12]
900143ee:	f023 0303 	bic.w	r3, r3, #3
900143f2:	f043 0301 	orr.w	r3, r3, #1
900143f6:	81a3      	strh	r3, [r4, #12]
900143f8:	89a0      	ldrh	r0, [r4, #12]
900143fa:	4305      	orrs	r5, r0
900143fc:	81a5      	strh	r5, [r4, #12]
900143fe:	e7cd      	b.n	9001439c <__smakebuf_r+0x18>
90014400:	900132d1 	.word	0x900132d1

90014404 <_raise_r>:
90014404:	291f      	cmp	r1, #31
90014406:	b538      	push	{r3, r4, r5, lr}
90014408:	4604      	mov	r4, r0
9001440a:	460d      	mov	r5, r1
9001440c:	d904      	bls.n	90014418 <_raise_r+0x14>
9001440e:	2316      	movs	r3, #22
90014410:	6003      	str	r3, [r0, #0]
90014412:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
90014416:	bd38      	pop	{r3, r4, r5, pc}
90014418:	6c42      	ldr	r2, [r0, #68]	; 0x44
9001441a:	b112      	cbz	r2, 90014422 <_raise_r+0x1e>
9001441c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
90014420:	b94b      	cbnz	r3, 90014436 <_raise_r+0x32>
90014422:	4620      	mov	r0, r4
90014424:	f000 f830 	bl	90014488 <_getpid_r>
90014428:	462a      	mov	r2, r5
9001442a:	4601      	mov	r1, r0
9001442c:	4620      	mov	r0, r4
9001442e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
90014432:	f000 b817 	b.w	90014464 <_kill_r>
90014436:	2b01      	cmp	r3, #1
90014438:	d00a      	beq.n	90014450 <_raise_r+0x4c>
9001443a:	1c59      	adds	r1, r3, #1
9001443c:	d103      	bne.n	90014446 <_raise_r+0x42>
9001443e:	2316      	movs	r3, #22
90014440:	6003      	str	r3, [r0, #0]
90014442:	2001      	movs	r0, #1
90014444:	e7e7      	b.n	90014416 <_raise_r+0x12>
90014446:	2400      	movs	r4, #0
90014448:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
9001444c:	4628      	mov	r0, r5
9001444e:	4798      	blx	r3
90014450:	2000      	movs	r0, #0
90014452:	e7e0      	b.n	90014416 <_raise_r+0x12>

90014454 <raise>:
90014454:	4b02      	ldr	r3, [pc, #8]	; (90014460 <raise+0xc>)
90014456:	4601      	mov	r1, r0
90014458:	6818      	ldr	r0, [r3, #0]
9001445a:	f7ff bfd3 	b.w	90014404 <_raise_r>
9001445e:	bf00      	nop
90014460:	24000034 	.word	0x24000034

90014464 <_kill_r>:
90014464:	b538      	push	{r3, r4, r5, lr}
90014466:	4d07      	ldr	r5, [pc, #28]	; (90014484 <_kill_r+0x20>)
90014468:	2300      	movs	r3, #0
9001446a:	4604      	mov	r4, r0
9001446c:	4608      	mov	r0, r1
9001446e:	4611      	mov	r1, r2
90014470:	602b      	str	r3, [r5, #0]
90014472:	f7ec f9db 	bl	9000082c <_kill>
90014476:	1c43      	adds	r3, r0, #1
90014478:	d102      	bne.n	90014480 <_kill_r+0x1c>
9001447a:	682b      	ldr	r3, [r5, #0]
9001447c:	b103      	cbz	r3, 90014480 <_kill_r+0x1c>
9001447e:	6023      	str	r3, [r4, #0]
90014480:	bd38      	pop	{r3, r4, r5, pc}
90014482:	bf00      	nop
90014484:	2401118c 	.word	0x2401118c

90014488 <_getpid_r>:
90014488:	f7ec b9c8 	b.w	9000081c <_getpid>

9001448c <_fstat_r>:
9001448c:	b538      	push	{r3, r4, r5, lr}
9001448e:	4d07      	ldr	r5, [pc, #28]	; (900144ac <_fstat_r+0x20>)
90014490:	2300      	movs	r3, #0
90014492:	4604      	mov	r4, r0
90014494:	4608      	mov	r0, r1
90014496:	4611      	mov	r1, r2
90014498:	602b      	str	r3, [r5, #0]
9001449a:	f7ec fa28 	bl	900008ee <_fstat>
9001449e:	1c43      	adds	r3, r0, #1
900144a0:	d102      	bne.n	900144a8 <_fstat_r+0x1c>
900144a2:	682b      	ldr	r3, [r5, #0]
900144a4:	b103      	cbz	r3, 900144a8 <_fstat_r+0x1c>
900144a6:	6023      	str	r3, [r4, #0]
900144a8:	bd38      	pop	{r3, r4, r5, pc}
900144aa:	bf00      	nop
900144ac:	2401118c 	.word	0x2401118c

900144b0 <_isatty_r>:
900144b0:	b538      	push	{r3, r4, r5, lr}
900144b2:	4d06      	ldr	r5, [pc, #24]	; (900144cc <_isatty_r+0x1c>)
900144b4:	2300      	movs	r3, #0
900144b6:	4604      	mov	r4, r0
900144b8:	4608      	mov	r0, r1
900144ba:	602b      	str	r3, [r5, #0]
900144bc:	f7ec fa27 	bl	9000090e <_isatty>
900144c0:	1c43      	adds	r3, r0, #1
900144c2:	d102      	bne.n	900144ca <_isatty_r+0x1a>
900144c4:	682b      	ldr	r3, [r5, #0]
900144c6:	b103      	cbz	r3, 900144ca <_isatty_r+0x1a>
900144c8:	6023      	str	r3, [r4, #0]
900144ca:	bd38      	pop	{r3, r4, r5, pc}
900144cc:	2401118c 	.word	0x2401118c

900144d0 <_init>:
900144d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
900144d2:	bf00      	nop
900144d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
900144d6:	bc08      	pop	{r3}
900144d8:	469e      	mov	lr, r3
900144da:	4770      	bx	lr

900144dc <_fini>:
900144dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
900144de:	bf00      	nop
900144e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
900144e2:	bc08      	pop	{r3}
900144e4:	469e      	mov	lr, r3
900144e6:	4770      	bx	lr
