
7_Segment_Display.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000029b4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  08002ac0  08002ac0  00012ac0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b90  08002b90  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002b90  08002b90  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002b90  08002b90  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b90  08002b90  00012b90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b94  08002b94  00012b94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002b98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000080  20000070  08002c08  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f0  08002c08  000200f0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000764a  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001760  00000000  00000000  000276e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006c8  00000000  00000000  00028e48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000640  00000000  00000000  00029510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017a60  00000000  00000000  00029b50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006ec1  00000000  00000000  000415b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083935  00000000  00000000  00048471  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cbda6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000021e8  00000000  00000000  000cbdfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08002aa8 	.word	0x08002aa8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08002aa8 	.word	0x08002aa8

0800014c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000154:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000158:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800015c:	f003 0301 	and.w	r3, r3, #1
 8000160:	2b00      	cmp	r3, #0
 8000162:	d013      	beq.n	800018c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000164:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000168:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800016c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000170:	2b00      	cmp	r3, #0
 8000172:	d00b      	beq.n	800018c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000174:	e000      	b.n	8000178 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000176:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000178:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800017c:	681b      	ldr	r3, [r3, #0]
 800017e:	2b00      	cmp	r3, #0
 8000180:	d0f9      	beq.n	8000176 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000182:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000186:	687a      	ldr	r2, [r7, #4]
 8000188:	b2d2      	uxtb	r2, r2
 800018a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800018c:	687b      	ldr	r3, [r7, #4]
}
 800018e:	4618      	mov	r0, r3
 8000190:	370c      	adds	r7, #12
 8000192:	46bd      	mov	sp, r7
 8000194:	bc80      	pop	{r7}
 8000196:	4770      	bx	lr

08000198 <_write>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART3_UART_Init(void);
/* USER CODE BEGIN PFP */
int _write(int file, char *ptr, int len) {
 8000198:	b580      	push	{r7, lr}
 800019a:	b086      	sub	sp, #24
 800019c:	af00      	add	r7, sp, #0
 800019e:	60f8      	str	r0, [r7, #12]
 80001a0:	60b9      	str	r1, [r7, #8]
 80001a2:	607a      	str	r2, [r7, #4]
	int i;
	HAL_UART_Transmit(&huart3, (uint8_t*) ptr, len, 50);
 80001a4:	687b      	ldr	r3, [r7, #4]
 80001a6:	b29a      	uxth	r2, r3
 80001a8:	2332      	movs	r3, #50	; 0x32
 80001aa:	68b9      	ldr	r1, [r7, #8]
 80001ac:	480c      	ldr	r0, [pc, #48]	; (80001e0 <_write+0x48>)
 80001ae:	f001 fb7e 	bl	80018ae <HAL_UART_Transmit>
	for (i = 0; i < len; i++) {
 80001b2:	2300      	movs	r3, #0
 80001b4:	617b      	str	r3, [r7, #20]
 80001b6:	e009      	b.n	80001cc <_write+0x34>
		ITM_SendChar(*ptr++);
 80001b8:	68bb      	ldr	r3, [r7, #8]
 80001ba:	1c5a      	adds	r2, r3, #1
 80001bc:	60ba      	str	r2, [r7, #8]
 80001be:	781b      	ldrb	r3, [r3, #0]
 80001c0:	4618      	mov	r0, r3
 80001c2:	f7ff ffc3 	bl	800014c <ITM_SendChar>
	for (i = 0; i < len; i++) {
 80001c6:	697b      	ldr	r3, [r7, #20]
 80001c8:	3301      	adds	r3, #1
 80001ca:	617b      	str	r3, [r7, #20]
 80001cc:	697a      	ldr	r2, [r7, #20]
 80001ce:	687b      	ldr	r3, [r7, #4]
 80001d0:	429a      	cmp	r2, r3
 80001d2:	dbf1      	blt.n	80001b8 <_write+0x20>
	}
	return len;
 80001d4:	687b      	ldr	r3, [r7, #4]
}
 80001d6:	4618      	mov	r0, r3
 80001d8:	3718      	adds	r7, #24
 80001da:	46bd      	mov	sp, r7
 80001dc:	bd80      	pop	{r7, pc}
 80001de:	bf00      	nop
 80001e0:	20000098 	.word	0x20000098

080001e4 <setnumber>:

void setnumber (uint8_t number)
{
 80001e4:	b580      	push	{r7, lr}
 80001e6:	b082      	sub	sp, #8
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	4603      	mov	r3, r0
 80001ec:	71fb      	strb	r3, [r7, #7]
	switch (number)
 80001ee:	79fb      	ldrb	r3, [r7, #7]
 80001f0:	2b09      	cmp	r3, #9
 80001f2:	f200 81b1 	bhi.w	8000558 <setnumber+0x374>
 80001f6:	a201      	add	r2, pc, #4	; (adr r2, 80001fc <setnumber+0x18>)
 80001f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001fc:	08000225 	.word	0x08000225
 8000200:	08000277 	.word	0x08000277
 8000204:	080002c9 	.word	0x080002c9
 8000208:	0800031b 	.word	0x0800031b
 800020c:	0800036d 	.word	0x0800036d
 8000210:	080003bf 	.word	0x080003bf
 8000214:	08000411 	.word	0x08000411
 8000218:	08000463 	.word	0x08000463
 800021c:	080004b5 	.word	0x080004b5
 8000220:	08000507 	.word	0x08000507
	{
		case 0:
			{
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET); //dot
 8000224:	2200      	movs	r2, #0
 8000226:	2101      	movs	r1, #1
 8000228:	48cd      	ldr	r0, [pc, #820]	; (8000560 <setnumber+0x37c>)
 800022a:	f000 fec1 	bl	8000fb0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET); //A
 800022e:	2200      	movs	r2, #0
 8000230:	2102      	movs	r1, #2
 8000232:	48cb      	ldr	r0, [pc, #812]	; (8000560 <setnumber+0x37c>)
 8000234:	f000 febc 	bl	8000fb0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET); //B
 8000238:	2200      	movs	r2, #0
 800023a:	2104      	movs	r1, #4
 800023c:	48c8      	ldr	r0, [pc, #800]	; (8000560 <setnumber+0x37c>)
 800023e:	f000 feb7 	bl	8000fb0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET); //C
 8000242:	2200      	movs	r2, #0
 8000244:	2108      	movs	r1, #8
 8000246:	48c6      	ldr	r0, [pc, #792]	; (8000560 <setnumber+0x37c>)
 8000248:	f000 feb2 	bl	8000fb0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); //D
 800024c:	2200      	movs	r2, #0
 800024e:	2110      	movs	r1, #16
 8000250:	48c3      	ldr	r0, [pc, #780]	; (8000560 <setnumber+0x37c>)
 8000252:	f000 fead 	bl	8000fb0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET); //E
 8000256:	2200      	movs	r2, #0
 8000258:	2120      	movs	r1, #32
 800025a:	48c1      	ldr	r0, [pc, #772]	; (8000560 <setnumber+0x37c>)
 800025c:	f000 fea8 	bl	8000fb0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET); //F
 8000260:	2200      	movs	r2, #0
 8000262:	2180      	movs	r1, #128	; 0x80
 8000264:	48be      	ldr	r0, [pc, #760]	; (8000560 <setnumber+0x37c>)
 8000266:	f000 fea3 	bl	8000fb0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);   //G
 800026a:	2201      	movs	r2, #1
 800026c:	2140      	movs	r1, #64	; 0x40
 800026e:	48bc      	ldr	r0, [pc, #752]	; (8000560 <setnumber+0x37c>)
 8000270:	f000 fe9e 	bl	8000fb0 <HAL_GPIO_WritePin>
				break;
 8000274:	e170      	b.n	8000558 <setnumber+0x374>
			}
		case 1:
			{
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);   //dot
 8000276:	2201      	movs	r2, #1
 8000278:	2101      	movs	r1, #1
 800027a:	48b9      	ldr	r0, [pc, #740]	; (8000560 <setnumber+0x37c>)
 800027c:	f000 fe98 	bl	8000fb0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);   //A
 8000280:	2201      	movs	r2, #1
 8000282:	2102      	movs	r1, #2
 8000284:	48b6      	ldr	r0, [pc, #728]	; (8000560 <setnumber+0x37c>)
 8000286:	f000 fe93 	bl	8000fb0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET); //B
 800028a:	2200      	movs	r2, #0
 800028c:	2104      	movs	r1, #4
 800028e:	48b4      	ldr	r0, [pc, #720]	; (8000560 <setnumber+0x37c>)
 8000290:	f000 fe8e 	bl	8000fb0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET); //C
 8000294:	2200      	movs	r2, #0
 8000296:	2108      	movs	r1, #8
 8000298:	48b1      	ldr	r0, [pc, #708]	; (8000560 <setnumber+0x37c>)
 800029a:	f000 fe89 	bl	8000fb0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);   //D
 800029e:	2201      	movs	r2, #1
 80002a0:	2110      	movs	r1, #16
 80002a2:	48af      	ldr	r0, [pc, #700]	; (8000560 <setnumber+0x37c>)
 80002a4:	f000 fe84 	bl	8000fb0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);   //E
 80002a8:	2201      	movs	r2, #1
 80002aa:	2120      	movs	r1, #32
 80002ac:	48ac      	ldr	r0, [pc, #688]	; (8000560 <setnumber+0x37c>)
 80002ae:	f000 fe7f 	bl	8000fb0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);	  //F
 80002b2:	2201      	movs	r2, #1
 80002b4:	2180      	movs	r1, #128	; 0x80
 80002b6:	48aa      	ldr	r0, [pc, #680]	; (8000560 <setnumber+0x37c>)
 80002b8:	f000 fe7a 	bl	8000fb0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);   //G
 80002bc:	2201      	movs	r2, #1
 80002be:	2140      	movs	r1, #64	; 0x40
 80002c0:	48a7      	ldr	r0, [pc, #668]	; (8000560 <setnumber+0x37c>)
 80002c2:	f000 fe75 	bl	8000fb0 <HAL_GPIO_WritePin>
				break;
 80002c6:	e147      	b.n	8000558 <setnumber+0x374>
			}
		case 2:
			{
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);  //dot
 80002c8:	2200      	movs	r2, #0
 80002ca:	2101      	movs	r1, #1
 80002cc:	48a4      	ldr	r0, [pc, #656]	; (8000560 <setnumber+0x37c>)
 80002ce:	f000 fe6f 	bl	8000fb0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);  //A
 80002d2:	2200      	movs	r2, #0
 80002d4:	2102      	movs	r1, #2
 80002d6:	48a2      	ldr	r0, [pc, #648]	; (8000560 <setnumber+0x37c>)
 80002d8:	f000 fe6a 	bl	8000fb0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);  //B
 80002dc:	2200      	movs	r2, #0
 80002de:	2104      	movs	r1, #4
 80002e0:	489f      	ldr	r0, [pc, #636]	; (8000560 <setnumber+0x37c>)
 80002e2:	f000 fe65 	bl	8000fb0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);    //C
 80002e6:	2201      	movs	r2, #1
 80002e8:	2108      	movs	r1, #8
 80002ea:	489d      	ldr	r0, [pc, #628]	; (8000560 <setnumber+0x37c>)
 80002ec:	f000 fe60 	bl	8000fb0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);  //D
 80002f0:	2200      	movs	r2, #0
 80002f2:	2110      	movs	r1, #16
 80002f4:	489a      	ldr	r0, [pc, #616]	; (8000560 <setnumber+0x37c>)
 80002f6:	f000 fe5b 	bl	8000fb0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);  //E
 80002fa:	2200      	movs	r2, #0
 80002fc:	2120      	movs	r1, #32
 80002fe:	4898      	ldr	r0, [pc, #608]	; (8000560 <setnumber+0x37c>)
 8000300:	f000 fe56 	bl	8000fb0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);    //F
 8000304:	2201      	movs	r2, #1
 8000306:	2180      	movs	r1, #128	; 0x80
 8000308:	4895      	ldr	r0, [pc, #596]	; (8000560 <setnumber+0x37c>)
 800030a:	f000 fe51 	bl	8000fb0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);  //G
 800030e:	2200      	movs	r2, #0
 8000310:	2140      	movs	r1, #64	; 0x40
 8000312:	4893      	ldr	r0, [pc, #588]	; (8000560 <setnumber+0x37c>)
 8000314:	f000 fe4c 	bl	8000fb0 <HAL_GPIO_WritePin>
				break;
 8000318:	e11e      	b.n	8000558 <setnumber+0x374>
			}
		case 3:
			{
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);    //dot
 800031a:	2201      	movs	r2, #1
 800031c:	2101      	movs	r1, #1
 800031e:	4890      	ldr	r0, [pc, #576]	; (8000560 <setnumber+0x37c>)
 8000320:	f000 fe46 	bl	8000fb0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);  //A
 8000324:	2200      	movs	r2, #0
 8000326:	2102      	movs	r1, #2
 8000328:	488d      	ldr	r0, [pc, #564]	; (8000560 <setnumber+0x37c>)
 800032a:	f000 fe41 	bl	8000fb0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);  //B
 800032e:	2200      	movs	r2, #0
 8000330:	2104      	movs	r1, #4
 8000332:	488b      	ldr	r0, [pc, #556]	; (8000560 <setnumber+0x37c>)
 8000334:	f000 fe3c 	bl	8000fb0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);  //C
 8000338:	2200      	movs	r2, #0
 800033a:	2108      	movs	r1, #8
 800033c:	4888      	ldr	r0, [pc, #544]	; (8000560 <setnumber+0x37c>)
 800033e:	f000 fe37 	bl	8000fb0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);  //D
 8000342:	2200      	movs	r2, #0
 8000344:	2110      	movs	r1, #16
 8000346:	4886      	ldr	r0, [pc, #536]	; (8000560 <setnumber+0x37c>)
 8000348:	f000 fe32 	bl	8000fb0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);    //E
 800034c:	2201      	movs	r2, #1
 800034e:	2120      	movs	r1, #32
 8000350:	4883      	ldr	r0, [pc, #524]	; (8000560 <setnumber+0x37c>)
 8000352:	f000 fe2d 	bl	8000fb0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);	   //F
 8000356:	2201      	movs	r2, #1
 8000358:	2180      	movs	r1, #128	; 0x80
 800035a:	4881      	ldr	r0, [pc, #516]	; (8000560 <setnumber+0x37c>)
 800035c:	f000 fe28 	bl	8000fb0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);  //G
 8000360:	2200      	movs	r2, #0
 8000362:	2140      	movs	r1, #64	; 0x40
 8000364:	487e      	ldr	r0, [pc, #504]	; (8000560 <setnumber+0x37c>)
 8000366:	f000 fe23 	bl	8000fb0 <HAL_GPIO_WritePin>
				break;
 800036a:	e0f5      	b.n	8000558 <setnumber+0x374>
			}
		case 4:
			{
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);  //dot
 800036c:	2200      	movs	r2, #0
 800036e:	2101      	movs	r1, #1
 8000370:	487b      	ldr	r0, [pc, #492]	; (8000560 <setnumber+0x37c>)
 8000372:	f000 fe1d 	bl	8000fb0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);    //A
 8000376:	2201      	movs	r2, #1
 8000378:	2102      	movs	r1, #2
 800037a:	4879      	ldr	r0, [pc, #484]	; (8000560 <setnumber+0x37c>)
 800037c:	f000 fe18 	bl	8000fb0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);  //B
 8000380:	2200      	movs	r2, #0
 8000382:	2104      	movs	r1, #4
 8000384:	4876      	ldr	r0, [pc, #472]	; (8000560 <setnumber+0x37c>)
 8000386:	f000 fe13 	bl	8000fb0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);  //C
 800038a:	2200      	movs	r2, #0
 800038c:	2108      	movs	r1, #8
 800038e:	4874      	ldr	r0, [pc, #464]	; (8000560 <setnumber+0x37c>)
 8000390:	f000 fe0e 	bl	8000fb0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);    //D
 8000394:	2201      	movs	r2, #1
 8000396:	2110      	movs	r1, #16
 8000398:	4871      	ldr	r0, [pc, #452]	; (8000560 <setnumber+0x37c>)
 800039a:	f000 fe09 	bl	8000fb0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);    //E
 800039e:	2201      	movs	r2, #1
 80003a0:	2120      	movs	r1, #32
 80003a2:	486f      	ldr	r0, [pc, #444]	; (8000560 <setnumber+0x37c>)
 80003a4:	f000 fe04 	bl	8000fb0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);  //F
 80003a8:	2200      	movs	r2, #0
 80003aa:	2180      	movs	r1, #128	; 0x80
 80003ac:	486c      	ldr	r0, [pc, #432]	; (8000560 <setnumber+0x37c>)
 80003ae:	f000 fdff 	bl	8000fb0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);  //G
 80003b2:	2200      	movs	r2, #0
 80003b4:	2140      	movs	r1, #64	; 0x40
 80003b6:	486a      	ldr	r0, [pc, #424]	; (8000560 <setnumber+0x37c>)
 80003b8:	f000 fdfa 	bl	8000fb0 <HAL_GPIO_WritePin>
				break;
 80003bc:	e0cc      	b.n	8000558 <setnumber+0x374>
			}
		case 5:
			{
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);   //dot
 80003be:	2201      	movs	r2, #1
 80003c0:	2101      	movs	r1, #1
 80003c2:	4867      	ldr	r0, [pc, #412]	; (8000560 <setnumber+0x37c>)
 80003c4:	f000 fdf4 	bl	8000fb0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET); //A
 80003c8:	2200      	movs	r2, #0
 80003ca:	2102      	movs	r1, #2
 80003cc:	4864      	ldr	r0, [pc, #400]	; (8000560 <setnumber+0x37c>)
 80003ce:	f000 fdef 	bl	8000fb0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);   //B
 80003d2:	2201      	movs	r2, #1
 80003d4:	2104      	movs	r1, #4
 80003d6:	4862      	ldr	r0, [pc, #392]	; (8000560 <setnumber+0x37c>)
 80003d8:	f000 fdea 	bl	8000fb0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET); //C
 80003dc:	2200      	movs	r2, #0
 80003de:	2108      	movs	r1, #8
 80003e0:	485f      	ldr	r0, [pc, #380]	; (8000560 <setnumber+0x37c>)
 80003e2:	f000 fde5 	bl	8000fb0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); //D
 80003e6:	2200      	movs	r2, #0
 80003e8:	2110      	movs	r1, #16
 80003ea:	485d      	ldr	r0, [pc, #372]	; (8000560 <setnumber+0x37c>)
 80003ec:	f000 fde0 	bl	8000fb0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);   //E
 80003f0:	2201      	movs	r2, #1
 80003f2:	2120      	movs	r1, #32
 80003f4:	485a      	ldr	r0, [pc, #360]	; (8000560 <setnumber+0x37c>)
 80003f6:	f000 fddb 	bl	8000fb0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET); //F
 80003fa:	2200      	movs	r2, #0
 80003fc:	2180      	movs	r1, #128	; 0x80
 80003fe:	4858      	ldr	r0, [pc, #352]	; (8000560 <setnumber+0x37c>)
 8000400:	f000 fdd6 	bl	8000fb0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET); //G
 8000404:	2200      	movs	r2, #0
 8000406:	2140      	movs	r1, #64	; 0x40
 8000408:	4855      	ldr	r0, [pc, #340]	; (8000560 <setnumber+0x37c>)
 800040a:	f000 fdd1 	bl	8000fb0 <HAL_GPIO_WritePin>
				break;
 800040e:	e0a3      	b.n	8000558 <setnumber+0x374>
			}
		case 6:
			{
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET); //dot
 8000410:	2200      	movs	r2, #0
 8000412:	2101      	movs	r1, #1
 8000414:	4852      	ldr	r0, [pc, #328]	; (8000560 <setnumber+0x37c>)
 8000416:	f000 fdcb 	bl	8000fb0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET); //A
 800041a:	2200      	movs	r2, #0
 800041c:	2102      	movs	r1, #2
 800041e:	4850      	ldr	r0, [pc, #320]	; (8000560 <setnumber+0x37c>)
 8000420:	f000 fdc6 	bl	8000fb0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);   //B
 8000424:	2201      	movs	r2, #1
 8000426:	2104      	movs	r1, #4
 8000428:	484d      	ldr	r0, [pc, #308]	; (8000560 <setnumber+0x37c>)
 800042a:	f000 fdc1 	bl	8000fb0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET); //C
 800042e:	2200      	movs	r2, #0
 8000430:	2108      	movs	r1, #8
 8000432:	484b      	ldr	r0, [pc, #300]	; (8000560 <setnumber+0x37c>)
 8000434:	f000 fdbc 	bl	8000fb0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); //D
 8000438:	2200      	movs	r2, #0
 800043a:	2110      	movs	r1, #16
 800043c:	4848      	ldr	r0, [pc, #288]	; (8000560 <setnumber+0x37c>)
 800043e:	f000 fdb7 	bl	8000fb0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET); //E
 8000442:	2200      	movs	r2, #0
 8000444:	2120      	movs	r1, #32
 8000446:	4846      	ldr	r0, [pc, #280]	; (8000560 <setnumber+0x37c>)
 8000448:	f000 fdb2 	bl	8000fb0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET); //F
 800044c:	2200      	movs	r2, #0
 800044e:	2180      	movs	r1, #128	; 0x80
 8000450:	4843      	ldr	r0, [pc, #268]	; (8000560 <setnumber+0x37c>)
 8000452:	f000 fdad 	bl	8000fb0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET); //G
 8000456:	2200      	movs	r2, #0
 8000458:	2140      	movs	r1, #64	; 0x40
 800045a:	4841      	ldr	r0, [pc, #260]	; (8000560 <setnumber+0x37c>)
 800045c:	f000 fda8 	bl	8000fb0 <HAL_GPIO_WritePin>
				break;
 8000460:	e07a      	b.n	8000558 <setnumber+0x374>
			}
		case 7:
			{
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);   //dot
 8000462:	2201      	movs	r2, #1
 8000464:	2101      	movs	r1, #1
 8000466:	483e      	ldr	r0, [pc, #248]	; (8000560 <setnumber+0x37c>)
 8000468:	f000 fda2 	bl	8000fb0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET); //A
 800046c:	2200      	movs	r2, #0
 800046e:	2102      	movs	r1, #2
 8000470:	483b      	ldr	r0, [pc, #236]	; (8000560 <setnumber+0x37c>)
 8000472:	f000 fd9d 	bl	8000fb0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET); //B
 8000476:	2200      	movs	r2, #0
 8000478:	2104      	movs	r1, #4
 800047a:	4839      	ldr	r0, [pc, #228]	; (8000560 <setnumber+0x37c>)
 800047c:	f000 fd98 	bl	8000fb0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET); //C
 8000480:	2200      	movs	r2, #0
 8000482:	2108      	movs	r1, #8
 8000484:	4836      	ldr	r0, [pc, #216]	; (8000560 <setnumber+0x37c>)
 8000486:	f000 fd93 	bl	8000fb0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);   //D
 800048a:	2201      	movs	r2, #1
 800048c:	2110      	movs	r1, #16
 800048e:	4834      	ldr	r0, [pc, #208]	; (8000560 <setnumber+0x37c>)
 8000490:	f000 fd8e 	bl	8000fb0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);   //E
 8000494:	2201      	movs	r2, #1
 8000496:	2120      	movs	r1, #32
 8000498:	4831      	ldr	r0, [pc, #196]	; (8000560 <setnumber+0x37c>)
 800049a:	f000 fd89 	bl	8000fb0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);	  //F
 800049e:	2201      	movs	r2, #1
 80004a0:	2180      	movs	r1, #128	; 0x80
 80004a2:	482f      	ldr	r0, [pc, #188]	; (8000560 <setnumber+0x37c>)
 80004a4:	f000 fd84 	bl	8000fb0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);   //G
 80004a8:	2201      	movs	r2, #1
 80004aa:	2140      	movs	r1, #64	; 0x40
 80004ac:	482c      	ldr	r0, [pc, #176]	; (8000560 <setnumber+0x37c>)
 80004ae:	f000 fd7f 	bl	8000fb0 <HAL_GPIO_WritePin>
				break;
 80004b2:	e051      	b.n	8000558 <setnumber+0x374>
			}
		case 8:
			{
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);   //dot
 80004b4:	2200      	movs	r2, #0
 80004b6:	2101      	movs	r1, #1
 80004b8:	4829      	ldr	r0, [pc, #164]	; (8000560 <setnumber+0x37c>)
 80004ba:	f000 fd79 	bl	8000fb0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET); //A
 80004be:	2200      	movs	r2, #0
 80004c0:	2102      	movs	r1, #2
 80004c2:	4827      	ldr	r0, [pc, #156]	; (8000560 <setnumber+0x37c>)
 80004c4:	f000 fd74 	bl	8000fb0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET); //B
 80004c8:	2200      	movs	r2, #0
 80004ca:	2104      	movs	r1, #4
 80004cc:	4824      	ldr	r0, [pc, #144]	; (8000560 <setnumber+0x37c>)
 80004ce:	f000 fd6f 	bl	8000fb0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET); //C
 80004d2:	2200      	movs	r2, #0
 80004d4:	2108      	movs	r1, #8
 80004d6:	4822      	ldr	r0, [pc, #136]	; (8000560 <setnumber+0x37c>)
 80004d8:	f000 fd6a 	bl	8000fb0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); //D
 80004dc:	2200      	movs	r2, #0
 80004de:	2110      	movs	r1, #16
 80004e0:	481f      	ldr	r0, [pc, #124]	; (8000560 <setnumber+0x37c>)
 80004e2:	f000 fd65 	bl	8000fb0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET); //E
 80004e6:	2200      	movs	r2, #0
 80004e8:	2120      	movs	r1, #32
 80004ea:	481d      	ldr	r0, [pc, #116]	; (8000560 <setnumber+0x37c>)
 80004ec:	f000 fd60 	bl	8000fb0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET); //F
 80004f0:	2200      	movs	r2, #0
 80004f2:	2180      	movs	r1, #128	; 0x80
 80004f4:	481a      	ldr	r0, [pc, #104]	; (8000560 <setnumber+0x37c>)
 80004f6:	f000 fd5b 	bl	8000fb0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET); //G
 80004fa:	2200      	movs	r2, #0
 80004fc:	2140      	movs	r1, #64	; 0x40
 80004fe:	4818      	ldr	r0, [pc, #96]	; (8000560 <setnumber+0x37c>)
 8000500:	f000 fd56 	bl	8000fb0 <HAL_GPIO_WritePin>
				break;
 8000504:	e028      	b.n	8000558 <setnumber+0x374>
			}
		case 9:
			{
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET); //dot
 8000506:	2201      	movs	r2, #1
 8000508:	2101      	movs	r1, #1
 800050a:	4815      	ldr	r0, [pc, #84]	; (8000560 <setnumber+0x37c>)
 800050c:	f000 fd50 	bl	8000fb0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET); //A
 8000510:	2200      	movs	r2, #0
 8000512:	2102      	movs	r1, #2
 8000514:	4812      	ldr	r0, [pc, #72]	; (8000560 <setnumber+0x37c>)
 8000516:	f000 fd4b 	bl	8000fb0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET); //B
 800051a:	2200      	movs	r2, #0
 800051c:	2104      	movs	r1, #4
 800051e:	4810      	ldr	r0, [pc, #64]	; (8000560 <setnumber+0x37c>)
 8000520:	f000 fd46 	bl	8000fb0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET); //C
 8000524:	2200      	movs	r2, #0
 8000526:	2108      	movs	r1, #8
 8000528:	480d      	ldr	r0, [pc, #52]	; (8000560 <setnumber+0x37c>)
 800052a:	f000 fd41 	bl	8000fb0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); //D
 800052e:	2200      	movs	r2, #0
 8000530:	2110      	movs	r1, #16
 8000532:	480b      	ldr	r0, [pc, #44]	; (8000560 <setnumber+0x37c>)
 8000534:	f000 fd3c 	bl	8000fb0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);   //E
 8000538:	2201      	movs	r2, #1
 800053a:	2120      	movs	r1, #32
 800053c:	4808      	ldr	r0, [pc, #32]	; (8000560 <setnumber+0x37c>)
 800053e:	f000 fd37 	bl	8000fb0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET); //F
 8000542:	2200      	movs	r2, #0
 8000544:	2180      	movs	r1, #128	; 0x80
 8000546:	4806      	ldr	r0, [pc, #24]	; (8000560 <setnumber+0x37c>)
 8000548:	f000 fd32 	bl	8000fb0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET); //G
 800054c:	2200      	movs	r2, #0
 800054e:	2140      	movs	r1, #64	; 0x40
 8000550:	4803      	ldr	r0, [pc, #12]	; (8000560 <setnumber+0x37c>)
 8000552:	f000 fd2d 	bl	8000fb0 <HAL_GPIO_WritePin>
				break;
 8000556:	bf00      	nop
			}
	}
}
 8000558:	bf00      	nop
 800055a:	3708      	adds	r7, #8
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	40010800 	.word	0x40010800

08000564 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b082      	sub	sp, #8
 8000568:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800056a:	f000 fa33 	bl	80009d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800056e:	f000 f81d 	bl	80005ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000572:	f000 f88b 	bl	800068c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000576:	f000 f85f 	bl	8000638 <MX_USART3_UART_Init>
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		unsigned int i;
		for (i = 0; i <= 9; i++) {
 800057a:	2300      	movs	r3, #0
 800057c:	607b      	str	r3, [r7, #4]
 800057e:	e00f      	b.n	80005a0 <main+0x3c>
			setnumber(i);             //Sending hex values one by one
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	b2db      	uxtb	r3, r3
 8000584:	4618      	mov	r0, r3
 8000586:	f7ff fe2d 	bl	80001e4 <setnumber>
			printf("Number : %d\r\n", i);
 800058a:	6879      	ldr	r1, [r7, #4]
 800058c:	4806      	ldr	r0, [pc, #24]	; (80005a8 <main+0x44>)
 800058e:	f001 fb2b 	bl	8001be8 <iprintf>
			HAL_Delay(1000);
 8000592:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000596:	f000 fa7f 	bl	8000a98 <HAL_Delay>
		for (i = 0; i <= 9; i++) {
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	3301      	adds	r3, #1
 800059e:	607b      	str	r3, [r7, #4]
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	2b09      	cmp	r3, #9
 80005a4:	d9ec      	bls.n	8000580 <main+0x1c>
	while (1) {
 80005a6:	e7e8      	b.n	800057a <main+0x16>
 80005a8:	08002ac0 	.word	0x08002ac0

080005ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b090      	sub	sp, #64	; 0x40
 80005b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005b2:	f107 0318 	add.w	r3, r7, #24
 80005b6:	2228      	movs	r2, #40	; 0x28
 80005b8:	2100      	movs	r1, #0
 80005ba:	4618      	mov	r0, r3
 80005bc:	f001 fb0c 	bl	8001bd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c0:	1d3b      	adds	r3, r7, #4
 80005c2:	2200      	movs	r2, #0
 80005c4:	601a      	str	r2, [r3, #0]
 80005c6:	605a      	str	r2, [r3, #4]
 80005c8:	609a      	str	r2, [r3, #8]
 80005ca:	60da      	str	r2, [r3, #12]
 80005cc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005ce:	2301      	movs	r3, #1
 80005d0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005d6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80005d8:	2300      	movs	r3, #0
 80005da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005dc:	2301      	movs	r3, #1
 80005de:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005e0:	2302      	movs	r3, #2
 80005e2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80005ea:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80005ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f0:	f107 0318 	add.w	r3, r7, #24
 80005f4:	4618      	mov	r0, r3
 80005f6:	f000 fcf3 	bl	8000fe0 <HAL_RCC_OscConfig>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000600:	f000 f88e 	bl	8000720 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000604:	230f      	movs	r3, #15
 8000606:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000608:	2302      	movs	r3, #2
 800060a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800060c:	2300      	movs	r3, #0
 800060e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000610:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000614:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000616:	2300      	movs	r3, #0
 8000618:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800061a:	1d3b      	adds	r3, r7, #4
 800061c:	2102      	movs	r1, #2
 800061e:	4618      	mov	r0, r3
 8000620:	f000 ff5e 	bl	80014e0 <HAL_RCC_ClockConfig>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800062a:	f000 f879 	bl	8000720 <Error_Handler>
  }
}
 800062e:	bf00      	nop
 8000630:	3740      	adds	r7, #64	; 0x40
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
	...

08000638 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800063c:	4b11      	ldr	r3, [pc, #68]	; (8000684 <MX_USART3_UART_Init+0x4c>)
 800063e:	4a12      	ldr	r2, [pc, #72]	; (8000688 <MX_USART3_UART_Init+0x50>)
 8000640:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000642:	4b10      	ldr	r3, [pc, #64]	; (8000684 <MX_USART3_UART_Init+0x4c>)
 8000644:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000648:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800064a:	4b0e      	ldr	r3, [pc, #56]	; (8000684 <MX_USART3_UART_Init+0x4c>)
 800064c:	2200      	movs	r2, #0
 800064e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000650:	4b0c      	ldr	r3, [pc, #48]	; (8000684 <MX_USART3_UART_Init+0x4c>)
 8000652:	2200      	movs	r2, #0
 8000654:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000656:	4b0b      	ldr	r3, [pc, #44]	; (8000684 <MX_USART3_UART_Init+0x4c>)
 8000658:	2200      	movs	r2, #0
 800065a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800065c:	4b09      	ldr	r3, [pc, #36]	; (8000684 <MX_USART3_UART_Init+0x4c>)
 800065e:	220c      	movs	r2, #12
 8000660:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000662:	4b08      	ldr	r3, [pc, #32]	; (8000684 <MX_USART3_UART_Init+0x4c>)
 8000664:	2200      	movs	r2, #0
 8000666:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000668:	4b06      	ldr	r3, [pc, #24]	; (8000684 <MX_USART3_UART_Init+0x4c>)
 800066a:	2200      	movs	r2, #0
 800066c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800066e:	4805      	ldr	r0, [pc, #20]	; (8000684 <MX_USART3_UART_Init+0x4c>)
 8000670:	f001 f8d0 	bl	8001814 <HAL_UART_Init>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800067a:	f000 f851 	bl	8000720 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800067e:	bf00      	nop
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	20000098 	.word	0x20000098
 8000688:	40004800 	.word	0x40004800

0800068c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b088      	sub	sp, #32
 8000690:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000692:	f107 0310 	add.w	r3, r7, #16
 8000696:	2200      	movs	r2, #0
 8000698:	601a      	str	r2, [r3, #0]
 800069a:	605a      	str	r2, [r3, #4]
 800069c:	609a      	str	r2, [r3, #8]
 800069e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006a0:	4b1d      	ldr	r3, [pc, #116]	; (8000718 <MX_GPIO_Init+0x8c>)
 80006a2:	699b      	ldr	r3, [r3, #24]
 80006a4:	4a1c      	ldr	r2, [pc, #112]	; (8000718 <MX_GPIO_Init+0x8c>)
 80006a6:	f043 0320 	orr.w	r3, r3, #32
 80006aa:	6193      	str	r3, [r2, #24]
 80006ac:	4b1a      	ldr	r3, [pc, #104]	; (8000718 <MX_GPIO_Init+0x8c>)
 80006ae:	699b      	ldr	r3, [r3, #24]
 80006b0:	f003 0320 	and.w	r3, r3, #32
 80006b4:	60fb      	str	r3, [r7, #12]
 80006b6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b8:	4b17      	ldr	r3, [pc, #92]	; (8000718 <MX_GPIO_Init+0x8c>)
 80006ba:	699b      	ldr	r3, [r3, #24]
 80006bc:	4a16      	ldr	r2, [pc, #88]	; (8000718 <MX_GPIO_Init+0x8c>)
 80006be:	f043 0304 	orr.w	r3, r3, #4
 80006c2:	6193      	str	r3, [r2, #24]
 80006c4:	4b14      	ldr	r3, [pc, #80]	; (8000718 <MX_GPIO_Init+0x8c>)
 80006c6:	699b      	ldr	r3, [r3, #24]
 80006c8:	f003 0304 	and.w	r3, r3, #4
 80006cc:	60bb      	str	r3, [r7, #8]
 80006ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006d0:	4b11      	ldr	r3, [pc, #68]	; (8000718 <MX_GPIO_Init+0x8c>)
 80006d2:	699b      	ldr	r3, [r3, #24]
 80006d4:	4a10      	ldr	r2, [pc, #64]	; (8000718 <MX_GPIO_Init+0x8c>)
 80006d6:	f043 0308 	orr.w	r3, r3, #8
 80006da:	6193      	str	r3, [r2, #24]
 80006dc:	4b0e      	ldr	r3, [pc, #56]	; (8000718 <MX_GPIO_Init+0x8c>)
 80006de:	699b      	ldr	r3, [r3, #24]
 80006e0:	f003 0308 	and.w	r3, r3, #8
 80006e4:	607b      	str	r3, [r7, #4]
 80006e6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DP_Pin|A_Pin|B_Pin|C_Pin
 80006e8:	2200      	movs	r2, #0
 80006ea:	21ff      	movs	r1, #255	; 0xff
 80006ec:	480b      	ldr	r0, [pc, #44]	; (800071c <MX_GPIO_Init+0x90>)
 80006ee:	f000 fc5f 	bl	8000fb0 <HAL_GPIO_WritePin>
                          |D_Pin|E_Pin|G_Pin|F_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DP_Pin A_Pin B_Pin C_Pin
                           D_Pin E_Pin G_Pin F_Pin */
  GPIO_InitStruct.Pin = DP_Pin|A_Pin|B_Pin|C_Pin
 80006f2:	23ff      	movs	r3, #255	; 0xff
 80006f4:	613b      	str	r3, [r7, #16]
                          |D_Pin|E_Pin|G_Pin|F_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f6:	2301      	movs	r3, #1
 80006f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80006fa:	2302      	movs	r3, #2
 80006fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006fe:	2302      	movs	r3, #2
 8000700:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000702:	f107 0310 	add.w	r3, r7, #16
 8000706:	4619      	mov	r1, r3
 8000708:	4804      	ldr	r0, [pc, #16]	; (800071c <MX_GPIO_Init+0x90>)
 800070a:	f000 facd 	bl	8000ca8 <HAL_GPIO_Init>

}
 800070e:	bf00      	nop
 8000710:	3720      	adds	r7, #32
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	40021000 	.word	0x40021000
 800071c:	40010800 	.word	0x40010800

08000720 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000724:	b672      	cpsid	i
}
 8000726:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000728:	e7fe      	b.n	8000728 <Error_Handler+0x8>
	...

0800072c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800072c:	b480      	push	{r7}
 800072e:	b085      	sub	sp, #20
 8000730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000732:	4b15      	ldr	r3, [pc, #84]	; (8000788 <HAL_MspInit+0x5c>)
 8000734:	699b      	ldr	r3, [r3, #24]
 8000736:	4a14      	ldr	r2, [pc, #80]	; (8000788 <HAL_MspInit+0x5c>)
 8000738:	f043 0301 	orr.w	r3, r3, #1
 800073c:	6193      	str	r3, [r2, #24]
 800073e:	4b12      	ldr	r3, [pc, #72]	; (8000788 <HAL_MspInit+0x5c>)
 8000740:	699b      	ldr	r3, [r3, #24]
 8000742:	f003 0301 	and.w	r3, r3, #1
 8000746:	60bb      	str	r3, [r7, #8]
 8000748:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800074a:	4b0f      	ldr	r3, [pc, #60]	; (8000788 <HAL_MspInit+0x5c>)
 800074c:	69db      	ldr	r3, [r3, #28]
 800074e:	4a0e      	ldr	r2, [pc, #56]	; (8000788 <HAL_MspInit+0x5c>)
 8000750:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000754:	61d3      	str	r3, [r2, #28]
 8000756:	4b0c      	ldr	r3, [pc, #48]	; (8000788 <HAL_MspInit+0x5c>)
 8000758:	69db      	ldr	r3, [r3, #28]
 800075a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800075e:	607b      	str	r3, [r7, #4]
 8000760:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000762:	4b0a      	ldr	r3, [pc, #40]	; (800078c <HAL_MspInit+0x60>)
 8000764:	685b      	ldr	r3, [r3, #4]
 8000766:	60fb      	str	r3, [r7, #12]
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800076e:	60fb      	str	r3, [r7, #12]
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000776:	60fb      	str	r3, [r7, #12]
 8000778:	4a04      	ldr	r2, [pc, #16]	; (800078c <HAL_MspInit+0x60>)
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800077e:	bf00      	nop
 8000780:	3714      	adds	r7, #20
 8000782:	46bd      	mov	sp, r7
 8000784:	bc80      	pop	{r7}
 8000786:	4770      	bx	lr
 8000788:	40021000 	.word	0x40021000
 800078c:	40010000 	.word	0x40010000

08000790 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b088      	sub	sp, #32
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000798:	f107 0310 	add.w	r3, r7, #16
 800079c:	2200      	movs	r2, #0
 800079e:	601a      	str	r2, [r3, #0]
 80007a0:	605a      	str	r2, [r3, #4]
 80007a2:	609a      	str	r2, [r3, #8]
 80007a4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	4a1c      	ldr	r2, [pc, #112]	; (800081c <HAL_UART_MspInit+0x8c>)
 80007ac:	4293      	cmp	r3, r2
 80007ae:	d131      	bne.n	8000814 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80007b0:	4b1b      	ldr	r3, [pc, #108]	; (8000820 <HAL_UART_MspInit+0x90>)
 80007b2:	69db      	ldr	r3, [r3, #28]
 80007b4:	4a1a      	ldr	r2, [pc, #104]	; (8000820 <HAL_UART_MspInit+0x90>)
 80007b6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80007ba:	61d3      	str	r3, [r2, #28]
 80007bc:	4b18      	ldr	r3, [pc, #96]	; (8000820 <HAL_UART_MspInit+0x90>)
 80007be:	69db      	ldr	r3, [r3, #28]
 80007c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80007c4:	60fb      	str	r3, [r7, #12]
 80007c6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007c8:	4b15      	ldr	r3, [pc, #84]	; (8000820 <HAL_UART_MspInit+0x90>)
 80007ca:	699b      	ldr	r3, [r3, #24]
 80007cc:	4a14      	ldr	r2, [pc, #80]	; (8000820 <HAL_UART_MspInit+0x90>)
 80007ce:	f043 0308 	orr.w	r3, r3, #8
 80007d2:	6193      	str	r3, [r2, #24]
 80007d4:	4b12      	ldr	r3, [pc, #72]	; (8000820 <HAL_UART_MspInit+0x90>)
 80007d6:	699b      	ldr	r3, [r3, #24]
 80007d8:	f003 0308 	and.w	r3, r3, #8
 80007dc:	60bb      	str	r3, [r7, #8]
 80007de:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80007e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007e4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e6:	2302      	movs	r3, #2
 80007e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007ea:	2303      	movs	r3, #3
 80007ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ee:	f107 0310 	add.w	r3, r7, #16
 80007f2:	4619      	mov	r1, r3
 80007f4:	480b      	ldr	r0, [pc, #44]	; (8000824 <HAL_UART_MspInit+0x94>)
 80007f6:	f000 fa57 	bl	8000ca8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80007fa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80007fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000800:	2300      	movs	r3, #0
 8000802:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000804:	2300      	movs	r3, #0
 8000806:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000808:	f107 0310 	add.w	r3, r7, #16
 800080c:	4619      	mov	r1, r3
 800080e:	4805      	ldr	r0, [pc, #20]	; (8000824 <HAL_UART_MspInit+0x94>)
 8000810:	f000 fa4a 	bl	8000ca8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000814:	bf00      	nop
 8000816:	3720      	adds	r7, #32
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	40004800 	.word	0x40004800
 8000820:	40021000 	.word	0x40021000
 8000824:	40010c00 	.word	0x40010c00

08000828 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800082c:	e7fe      	b.n	800082c <NMI_Handler+0x4>

0800082e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800082e:	b480      	push	{r7}
 8000830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000832:	e7fe      	b.n	8000832 <HardFault_Handler+0x4>

08000834 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000838:	e7fe      	b.n	8000838 <MemManage_Handler+0x4>

0800083a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800083a:	b480      	push	{r7}
 800083c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800083e:	e7fe      	b.n	800083e <BusFault_Handler+0x4>

08000840 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000844:	e7fe      	b.n	8000844 <UsageFault_Handler+0x4>

08000846 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000846:	b480      	push	{r7}
 8000848:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800084a:	bf00      	nop
 800084c:	46bd      	mov	sp, r7
 800084e:	bc80      	pop	{r7}
 8000850:	4770      	bx	lr

08000852 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000852:	b480      	push	{r7}
 8000854:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000856:	bf00      	nop
 8000858:	46bd      	mov	sp, r7
 800085a:	bc80      	pop	{r7}
 800085c:	4770      	bx	lr

0800085e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800085e:	b480      	push	{r7}
 8000860:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000862:	bf00      	nop
 8000864:	46bd      	mov	sp, r7
 8000866:	bc80      	pop	{r7}
 8000868:	4770      	bx	lr

0800086a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800086a:	b580      	push	{r7, lr}
 800086c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800086e:	f000 f8f7 	bl	8000a60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000872:	bf00      	nop
 8000874:	bd80      	pop	{r7, pc}

08000876 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000876:	b580      	push	{r7, lr}
 8000878:	b086      	sub	sp, #24
 800087a:	af00      	add	r7, sp, #0
 800087c:	60f8      	str	r0, [r7, #12]
 800087e:	60b9      	str	r1, [r7, #8]
 8000880:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000882:	2300      	movs	r3, #0
 8000884:	617b      	str	r3, [r7, #20]
 8000886:	e00a      	b.n	800089e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000888:	f3af 8000 	nop.w
 800088c:	4601      	mov	r1, r0
 800088e:	68bb      	ldr	r3, [r7, #8]
 8000890:	1c5a      	adds	r2, r3, #1
 8000892:	60ba      	str	r2, [r7, #8]
 8000894:	b2ca      	uxtb	r2, r1
 8000896:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000898:	697b      	ldr	r3, [r7, #20]
 800089a:	3301      	adds	r3, #1
 800089c:	617b      	str	r3, [r7, #20]
 800089e:	697a      	ldr	r2, [r7, #20]
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	429a      	cmp	r2, r3
 80008a4:	dbf0      	blt.n	8000888 <_read+0x12>
	}

return len;
 80008a6:	687b      	ldr	r3, [r7, #4]
}
 80008a8:	4618      	mov	r0, r3
 80008aa:	3718      	adds	r7, #24
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}

080008b0 <_close>:
	}
	return len;
}

int _close(int file)
{
 80008b0:	b480      	push	{r7}
 80008b2:	b083      	sub	sp, #12
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
	return -1;
 80008b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80008bc:	4618      	mov	r0, r3
 80008be:	370c      	adds	r7, #12
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bc80      	pop	{r7}
 80008c4:	4770      	bx	lr

080008c6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80008c6:	b480      	push	{r7}
 80008c8:	b083      	sub	sp, #12
 80008ca:	af00      	add	r7, sp, #0
 80008cc:	6078      	str	r0, [r7, #4]
 80008ce:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80008d0:	683b      	ldr	r3, [r7, #0]
 80008d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008d6:	605a      	str	r2, [r3, #4]
	return 0;
 80008d8:	2300      	movs	r3, #0
}
 80008da:	4618      	mov	r0, r3
 80008dc:	370c      	adds	r7, #12
 80008de:	46bd      	mov	sp, r7
 80008e0:	bc80      	pop	{r7}
 80008e2:	4770      	bx	lr

080008e4 <_isatty>:

int _isatty(int file)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
	return 1;
 80008ec:	2301      	movs	r3, #1
}
 80008ee:	4618      	mov	r0, r3
 80008f0:	370c      	adds	r7, #12
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bc80      	pop	{r7}
 80008f6:	4770      	bx	lr

080008f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80008f8:	b480      	push	{r7}
 80008fa:	b085      	sub	sp, #20
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	60f8      	str	r0, [r7, #12]
 8000900:	60b9      	str	r1, [r7, #8]
 8000902:	607a      	str	r2, [r7, #4]
	return 0;
 8000904:	2300      	movs	r3, #0
}
 8000906:	4618      	mov	r0, r3
 8000908:	3714      	adds	r7, #20
 800090a:	46bd      	mov	sp, r7
 800090c:	bc80      	pop	{r7}
 800090e:	4770      	bx	lr

08000910 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b086      	sub	sp, #24
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000918:	4a14      	ldr	r2, [pc, #80]	; (800096c <_sbrk+0x5c>)
 800091a:	4b15      	ldr	r3, [pc, #84]	; (8000970 <_sbrk+0x60>)
 800091c:	1ad3      	subs	r3, r2, r3
 800091e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000920:	697b      	ldr	r3, [r7, #20]
 8000922:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000924:	4b13      	ldr	r3, [pc, #76]	; (8000974 <_sbrk+0x64>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	2b00      	cmp	r3, #0
 800092a:	d102      	bne.n	8000932 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800092c:	4b11      	ldr	r3, [pc, #68]	; (8000974 <_sbrk+0x64>)
 800092e:	4a12      	ldr	r2, [pc, #72]	; (8000978 <_sbrk+0x68>)
 8000930:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000932:	4b10      	ldr	r3, [pc, #64]	; (8000974 <_sbrk+0x64>)
 8000934:	681a      	ldr	r2, [r3, #0]
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	4413      	add	r3, r2
 800093a:	693a      	ldr	r2, [r7, #16]
 800093c:	429a      	cmp	r2, r3
 800093e:	d207      	bcs.n	8000950 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000940:	f001 f920 	bl	8001b84 <__errno>
 8000944:	4603      	mov	r3, r0
 8000946:	220c      	movs	r2, #12
 8000948:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800094a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800094e:	e009      	b.n	8000964 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000950:	4b08      	ldr	r3, [pc, #32]	; (8000974 <_sbrk+0x64>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000956:	4b07      	ldr	r3, [pc, #28]	; (8000974 <_sbrk+0x64>)
 8000958:	681a      	ldr	r2, [r3, #0]
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	4413      	add	r3, r2
 800095e:	4a05      	ldr	r2, [pc, #20]	; (8000974 <_sbrk+0x64>)
 8000960:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000962:	68fb      	ldr	r3, [r7, #12]
}
 8000964:	4618      	mov	r0, r3
 8000966:	3718      	adds	r7, #24
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	20005000 	.word	0x20005000
 8000970:	00000400 	.word	0x00000400
 8000974:	2000008c 	.word	0x2000008c
 8000978:	200000f0 	.word	0x200000f0

0800097c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000980:	bf00      	nop
 8000982:	46bd      	mov	sp, r7
 8000984:	bc80      	pop	{r7}
 8000986:	4770      	bx	lr

08000988 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000988:	480c      	ldr	r0, [pc, #48]	; (80009bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800098a:	490d      	ldr	r1, [pc, #52]	; (80009c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800098c:	4a0d      	ldr	r2, [pc, #52]	; (80009c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800098e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000990:	e002      	b.n	8000998 <LoopCopyDataInit>

08000992 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000992:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000994:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000996:	3304      	adds	r3, #4

08000998 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000998:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800099a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800099c:	d3f9      	bcc.n	8000992 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800099e:	4a0a      	ldr	r2, [pc, #40]	; (80009c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80009a0:	4c0a      	ldr	r4, [pc, #40]	; (80009cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80009a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009a4:	e001      	b.n	80009aa <LoopFillZerobss>

080009a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009a8:	3204      	adds	r2, #4

080009aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009ac:	d3fb      	bcc.n	80009a6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80009ae:	f7ff ffe5 	bl	800097c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009b2:	f001 f8ed 	bl	8001b90 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009b6:	f7ff fdd5 	bl	8000564 <main>
  bx lr
 80009ba:	4770      	bx	lr
  ldr r0, =_sdata
 80009bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009c0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80009c4:	08002b98 	.word	0x08002b98
  ldr r2, =_sbss
 80009c8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80009cc:	200000f0 	.word	0x200000f0

080009d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009d0:	e7fe      	b.n	80009d0 <ADC1_2_IRQHandler>
	...

080009d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009d8:	4b08      	ldr	r3, [pc, #32]	; (80009fc <HAL_Init+0x28>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4a07      	ldr	r2, [pc, #28]	; (80009fc <HAL_Init+0x28>)
 80009de:	f043 0310 	orr.w	r3, r3, #16
 80009e2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009e4:	2003      	movs	r0, #3
 80009e6:	f000 f92b 	bl	8000c40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009ea:	200f      	movs	r0, #15
 80009ec:	f000 f808 	bl	8000a00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009f0:	f7ff fe9c 	bl	800072c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009f4:	2300      	movs	r3, #0
}
 80009f6:	4618      	mov	r0, r3
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	40022000 	.word	0x40022000

08000a00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a08:	4b12      	ldr	r3, [pc, #72]	; (8000a54 <HAL_InitTick+0x54>)
 8000a0a:	681a      	ldr	r2, [r3, #0]
 8000a0c:	4b12      	ldr	r3, [pc, #72]	; (8000a58 <HAL_InitTick+0x58>)
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	4619      	mov	r1, r3
 8000a12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a16:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f000 f935 	bl	8000c8e <HAL_SYSTICK_Config>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	e00e      	b.n	8000a4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	2b0f      	cmp	r3, #15
 8000a32:	d80a      	bhi.n	8000a4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a34:	2200      	movs	r2, #0
 8000a36:	6879      	ldr	r1, [r7, #4]
 8000a38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a3c:	f000 f90b 	bl	8000c56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a40:	4a06      	ldr	r2, [pc, #24]	; (8000a5c <HAL_InitTick+0x5c>)
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a46:	2300      	movs	r3, #0
 8000a48:	e000      	b.n	8000a4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a4a:	2301      	movs	r3, #1
}
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	3708      	adds	r7, #8
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	20000000 	.word	0x20000000
 8000a58:	20000008 	.word	0x20000008
 8000a5c:	20000004 	.word	0x20000004

08000a60 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a64:	4b05      	ldr	r3, [pc, #20]	; (8000a7c <HAL_IncTick+0x1c>)
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	461a      	mov	r2, r3
 8000a6a:	4b05      	ldr	r3, [pc, #20]	; (8000a80 <HAL_IncTick+0x20>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	4413      	add	r3, r2
 8000a70:	4a03      	ldr	r2, [pc, #12]	; (8000a80 <HAL_IncTick+0x20>)
 8000a72:	6013      	str	r3, [r2, #0]
}
 8000a74:	bf00      	nop
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bc80      	pop	{r7}
 8000a7a:	4770      	bx	lr
 8000a7c:	20000008 	.word	0x20000008
 8000a80:	200000dc 	.word	0x200000dc

08000a84 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  return uwTick;
 8000a88:	4b02      	ldr	r3, [pc, #8]	; (8000a94 <HAL_GetTick+0x10>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bc80      	pop	{r7}
 8000a92:	4770      	bx	lr
 8000a94:	200000dc 	.word	0x200000dc

08000a98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b084      	sub	sp, #16
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000aa0:	f7ff fff0 	bl	8000a84 <HAL_GetTick>
 8000aa4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000ab0:	d005      	beq.n	8000abe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ab2:	4b0a      	ldr	r3, [pc, #40]	; (8000adc <HAL_Delay+0x44>)
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	461a      	mov	r2, r3
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	4413      	add	r3, r2
 8000abc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000abe:	bf00      	nop
 8000ac0:	f7ff ffe0 	bl	8000a84 <HAL_GetTick>
 8000ac4:	4602      	mov	r2, r0
 8000ac6:	68bb      	ldr	r3, [r7, #8]
 8000ac8:	1ad3      	subs	r3, r2, r3
 8000aca:	68fa      	ldr	r2, [r7, #12]
 8000acc:	429a      	cmp	r2, r3
 8000ace:	d8f7      	bhi.n	8000ac0 <HAL_Delay+0x28>
  {
  }
}
 8000ad0:	bf00      	nop
 8000ad2:	bf00      	nop
 8000ad4:	3710      	adds	r7, #16
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	20000008 	.word	0x20000008

08000ae0 <__NVIC_SetPriorityGrouping>:
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b085      	sub	sp, #20
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	f003 0307 	and.w	r3, r3, #7
 8000aee:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000af0:	4b0c      	ldr	r3, [pc, #48]	; (8000b24 <__NVIC_SetPriorityGrouping+0x44>)
 8000af2:	68db      	ldr	r3, [r3, #12]
 8000af4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000af6:	68ba      	ldr	r2, [r7, #8]
 8000af8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000afc:	4013      	ands	r3, r2
 8000afe:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b04:	68bb      	ldr	r3, [r7, #8]
 8000b06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b12:	4a04      	ldr	r2, [pc, #16]	; (8000b24 <__NVIC_SetPriorityGrouping+0x44>)
 8000b14:	68bb      	ldr	r3, [r7, #8]
 8000b16:	60d3      	str	r3, [r2, #12]
}
 8000b18:	bf00      	nop
 8000b1a:	3714      	adds	r7, #20
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bc80      	pop	{r7}
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	e000ed00 	.word	0xe000ed00

08000b28 <__NVIC_GetPriorityGrouping>:
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b2c:	4b04      	ldr	r3, [pc, #16]	; (8000b40 <__NVIC_GetPriorityGrouping+0x18>)
 8000b2e:	68db      	ldr	r3, [r3, #12]
 8000b30:	0a1b      	lsrs	r3, r3, #8
 8000b32:	f003 0307 	and.w	r3, r3, #7
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bc80      	pop	{r7}
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	e000ed00 	.word	0xe000ed00

08000b44 <__NVIC_SetPriority>:
{
 8000b44:	b480      	push	{r7}
 8000b46:	b083      	sub	sp, #12
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	6039      	str	r1, [r7, #0]
 8000b4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	db0a      	blt.n	8000b6e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	b2da      	uxtb	r2, r3
 8000b5c:	490c      	ldr	r1, [pc, #48]	; (8000b90 <__NVIC_SetPriority+0x4c>)
 8000b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b62:	0112      	lsls	r2, r2, #4
 8000b64:	b2d2      	uxtb	r2, r2
 8000b66:	440b      	add	r3, r1
 8000b68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000b6c:	e00a      	b.n	8000b84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	b2da      	uxtb	r2, r3
 8000b72:	4908      	ldr	r1, [pc, #32]	; (8000b94 <__NVIC_SetPriority+0x50>)
 8000b74:	79fb      	ldrb	r3, [r7, #7]
 8000b76:	f003 030f 	and.w	r3, r3, #15
 8000b7a:	3b04      	subs	r3, #4
 8000b7c:	0112      	lsls	r2, r2, #4
 8000b7e:	b2d2      	uxtb	r2, r2
 8000b80:	440b      	add	r3, r1
 8000b82:	761a      	strb	r2, [r3, #24]
}
 8000b84:	bf00      	nop
 8000b86:	370c      	adds	r7, #12
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bc80      	pop	{r7}
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	e000e100 	.word	0xe000e100
 8000b94:	e000ed00 	.word	0xe000ed00

08000b98 <NVIC_EncodePriority>:
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b089      	sub	sp, #36	; 0x24
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	60f8      	str	r0, [r7, #12]
 8000ba0:	60b9      	str	r1, [r7, #8]
 8000ba2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	f003 0307 	and.w	r3, r3, #7
 8000baa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bac:	69fb      	ldr	r3, [r7, #28]
 8000bae:	f1c3 0307 	rsb	r3, r3, #7
 8000bb2:	2b04      	cmp	r3, #4
 8000bb4:	bf28      	it	cs
 8000bb6:	2304      	movcs	r3, #4
 8000bb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bba:	69fb      	ldr	r3, [r7, #28]
 8000bbc:	3304      	adds	r3, #4
 8000bbe:	2b06      	cmp	r3, #6
 8000bc0:	d902      	bls.n	8000bc8 <NVIC_EncodePriority+0x30>
 8000bc2:	69fb      	ldr	r3, [r7, #28]
 8000bc4:	3b03      	subs	r3, #3
 8000bc6:	e000      	b.n	8000bca <NVIC_EncodePriority+0x32>
 8000bc8:	2300      	movs	r3, #0
 8000bca:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bcc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000bd0:	69bb      	ldr	r3, [r7, #24]
 8000bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd6:	43da      	mvns	r2, r3
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	401a      	ands	r2, r3
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000be0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	fa01 f303 	lsl.w	r3, r1, r3
 8000bea:	43d9      	mvns	r1, r3
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bf0:	4313      	orrs	r3, r2
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	3724      	adds	r7, #36	; 0x24
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bc80      	pop	{r7}
 8000bfa:	4770      	bx	lr

08000bfc <SysTick_Config>:
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	3b01      	subs	r3, #1
 8000c08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c0c:	d301      	bcc.n	8000c12 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000c0e:	2301      	movs	r3, #1
 8000c10:	e00f      	b.n	8000c32 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c12:	4a0a      	ldr	r2, [pc, #40]	; (8000c3c <SysTick_Config+0x40>)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	3b01      	subs	r3, #1
 8000c18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c1a:	210f      	movs	r1, #15
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c20:	f7ff ff90 	bl	8000b44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c24:	4b05      	ldr	r3, [pc, #20]	; (8000c3c <SysTick_Config+0x40>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c2a:	4b04      	ldr	r3, [pc, #16]	; (8000c3c <SysTick_Config+0x40>)
 8000c2c:	2207      	movs	r2, #7
 8000c2e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000c30:	2300      	movs	r3, #0
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	3708      	adds	r7, #8
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	e000e010 	.word	0xe000e010

08000c40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c48:	6878      	ldr	r0, [r7, #4]
 8000c4a:	f7ff ff49 	bl	8000ae0 <__NVIC_SetPriorityGrouping>
}
 8000c4e:	bf00      	nop
 8000c50:	3708      	adds	r7, #8
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}

08000c56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c56:	b580      	push	{r7, lr}
 8000c58:	b086      	sub	sp, #24
 8000c5a:	af00      	add	r7, sp, #0
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	60b9      	str	r1, [r7, #8]
 8000c60:	607a      	str	r2, [r7, #4]
 8000c62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c64:	2300      	movs	r3, #0
 8000c66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c68:	f7ff ff5e 	bl	8000b28 <__NVIC_GetPriorityGrouping>
 8000c6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c6e:	687a      	ldr	r2, [r7, #4]
 8000c70:	68b9      	ldr	r1, [r7, #8]
 8000c72:	6978      	ldr	r0, [r7, #20]
 8000c74:	f7ff ff90 	bl	8000b98 <NVIC_EncodePriority>
 8000c78:	4602      	mov	r2, r0
 8000c7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c7e:	4611      	mov	r1, r2
 8000c80:	4618      	mov	r0, r3
 8000c82:	f7ff ff5f 	bl	8000b44 <__NVIC_SetPriority>
}
 8000c86:	bf00      	nop
 8000c88:	3718      	adds	r7, #24
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}

08000c8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c8e:	b580      	push	{r7, lr}
 8000c90:	b082      	sub	sp, #8
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c96:	6878      	ldr	r0, [r7, #4]
 8000c98:	f7ff ffb0 	bl	8000bfc <SysTick_Config>
 8000c9c:	4603      	mov	r3, r0
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	3708      	adds	r7, #8
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
	...

08000ca8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b08b      	sub	sp, #44	; 0x2c
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
 8000cb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cba:	e169      	b.n	8000f90 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	69fa      	ldr	r2, [r7, #28]
 8000ccc:	4013      	ands	r3, r2
 8000cce:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000cd0:	69ba      	ldr	r2, [r7, #24]
 8000cd2:	69fb      	ldr	r3, [r7, #28]
 8000cd4:	429a      	cmp	r2, r3
 8000cd6:	f040 8158 	bne.w	8000f8a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	4a9a      	ldr	r2, [pc, #616]	; (8000f48 <HAL_GPIO_Init+0x2a0>)
 8000ce0:	4293      	cmp	r3, r2
 8000ce2:	d05e      	beq.n	8000da2 <HAL_GPIO_Init+0xfa>
 8000ce4:	4a98      	ldr	r2, [pc, #608]	; (8000f48 <HAL_GPIO_Init+0x2a0>)
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d875      	bhi.n	8000dd6 <HAL_GPIO_Init+0x12e>
 8000cea:	4a98      	ldr	r2, [pc, #608]	; (8000f4c <HAL_GPIO_Init+0x2a4>)
 8000cec:	4293      	cmp	r3, r2
 8000cee:	d058      	beq.n	8000da2 <HAL_GPIO_Init+0xfa>
 8000cf0:	4a96      	ldr	r2, [pc, #600]	; (8000f4c <HAL_GPIO_Init+0x2a4>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d86f      	bhi.n	8000dd6 <HAL_GPIO_Init+0x12e>
 8000cf6:	4a96      	ldr	r2, [pc, #600]	; (8000f50 <HAL_GPIO_Init+0x2a8>)
 8000cf8:	4293      	cmp	r3, r2
 8000cfa:	d052      	beq.n	8000da2 <HAL_GPIO_Init+0xfa>
 8000cfc:	4a94      	ldr	r2, [pc, #592]	; (8000f50 <HAL_GPIO_Init+0x2a8>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d869      	bhi.n	8000dd6 <HAL_GPIO_Init+0x12e>
 8000d02:	4a94      	ldr	r2, [pc, #592]	; (8000f54 <HAL_GPIO_Init+0x2ac>)
 8000d04:	4293      	cmp	r3, r2
 8000d06:	d04c      	beq.n	8000da2 <HAL_GPIO_Init+0xfa>
 8000d08:	4a92      	ldr	r2, [pc, #584]	; (8000f54 <HAL_GPIO_Init+0x2ac>)
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d863      	bhi.n	8000dd6 <HAL_GPIO_Init+0x12e>
 8000d0e:	4a92      	ldr	r2, [pc, #584]	; (8000f58 <HAL_GPIO_Init+0x2b0>)
 8000d10:	4293      	cmp	r3, r2
 8000d12:	d046      	beq.n	8000da2 <HAL_GPIO_Init+0xfa>
 8000d14:	4a90      	ldr	r2, [pc, #576]	; (8000f58 <HAL_GPIO_Init+0x2b0>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d85d      	bhi.n	8000dd6 <HAL_GPIO_Init+0x12e>
 8000d1a:	2b12      	cmp	r3, #18
 8000d1c:	d82a      	bhi.n	8000d74 <HAL_GPIO_Init+0xcc>
 8000d1e:	2b12      	cmp	r3, #18
 8000d20:	d859      	bhi.n	8000dd6 <HAL_GPIO_Init+0x12e>
 8000d22:	a201      	add	r2, pc, #4	; (adr r2, 8000d28 <HAL_GPIO_Init+0x80>)
 8000d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d28:	08000da3 	.word	0x08000da3
 8000d2c:	08000d7d 	.word	0x08000d7d
 8000d30:	08000d8f 	.word	0x08000d8f
 8000d34:	08000dd1 	.word	0x08000dd1
 8000d38:	08000dd7 	.word	0x08000dd7
 8000d3c:	08000dd7 	.word	0x08000dd7
 8000d40:	08000dd7 	.word	0x08000dd7
 8000d44:	08000dd7 	.word	0x08000dd7
 8000d48:	08000dd7 	.word	0x08000dd7
 8000d4c:	08000dd7 	.word	0x08000dd7
 8000d50:	08000dd7 	.word	0x08000dd7
 8000d54:	08000dd7 	.word	0x08000dd7
 8000d58:	08000dd7 	.word	0x08000dd7
 8000d5c:	08000dd7 	.word	0x08000dd7
 8000d60:	08000dd7 	.word	0x08000dd7
 8000d64:	08000dd7 	.word	0x08000dd7
 8000d68:	08000dd7 	.word	0x08000dd7
 8000d6c:	08000d85 	.word	0x08000d85
 8000d70:	08000d99 	.word	0x08000d99
 8000d74:	4a79      	ldr	r2, [pc, #484]	; (8000f5c <HAL_GPIO_Init+0x2b4>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d013      	beq.n	8000da2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000d7a:	e02c      	b.n	8000dd6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	68db      	ldr	r3, [r3, #12]
 8000d80:	623b      	str	r3, [r7, #32]
          break;
 8000d82:	e029      	b.n	8000dd8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	68db      	ldr	r3, [r3, #12]
 8000d88:	3304      	adds	r3, #4
 8000d8a:	623b      	str	r3, [r7, #32]
          break;
 8000d8c:	e024      	b.n	8000dd8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	68db      	ldr	r3, [r3, #12]
 8000d92:	3308      	adds	r3, #8
 8000d94:	623b      	str	r3, [r7, #32]
          break;
 8000d96:	e01f      	b.n	8000dd8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	68db      	ldr	r3, [r3, #12]
 8000d9c:	330c      	adds	r3, #12
 8000d9e:	623b      	str	r3, [r7, #32]
          break;
 8000da0:	e01a      	b.n	8000dd8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	689b      	ldr	r3, [r3, #8]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d102      	bne.n	8000db0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000daa:	2304      	movs	r3, #4
 8000dac:	623b      	str	r3, [r7, #32]
          break;
 8000dae:	e013      	b.n	8000dd8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	689b      	ldr	r3, [r3, #8]
 8000db4:	2b01      	cmp	r3, #1
 8000db6:	d105      	bne.n	8000dc4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000db8:	2308      	movs	r3, #8
 8000dba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	69fa      	ldr	r2, [r7, #28]
 8000dc0:	611a      	str	r2, [r3, #16]
          break;
 8000dc2:	e009      	b.n	8000dd8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000dc4:	2308      	movs	r3, #8
 8000dc6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	69fa      	ldr	r2, [r7, #28]
 8000dcc:	615a      	str	r2, [r3, #20]
          break;
 8000dce:	e003      	b.n	8000dd8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	623b      	str	r3, [r7, #32]
          break;
 8000dd4:	e000      	b.n	8000dd8 <HAL_GPIO_Init+0x130>
          break;
 8000dd6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000dd8:	69bb      	ldr	r3, [r7, #24]
 8000dda:	2bff      	cmp	r3, #255	; 0xff
 8000ddc:	d801      	bhi.n	8000de2 <HAL_GPIO_Init+0x13a>
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	e001      	b.n	8000de6 <HAL_GPIO_Init+0x13e>
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	3304      	adds	r3, #4
 8000de6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000de8:	69bb      	ldr	r3, [r7, #24]
 8000dea:	2bff      	cmp	r3, #255	; 0xff
 8000dec:	d802      	bhi.n	8000df4 <HAL_GPIO_Init+0x14c>
 8000dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000df0:	009b      	lsls	r3, r3, #2
 8000df2:	e002      	b.n	8000dfa <HAL_GPIO_Init+0x152>
 8000df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000df6:	3b08      	subs	r3, #8
 8000df8:	009b      	lsls	r3, r3, #2
 8000dfa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	681a      	ldr	r2, [r3, #0]
 8000e00:	210f      	movs	r1, #15
 8000e02:	693b      	ldr	r3, [r7, #16]
 8000e04:	fa01 f303 	lsl.w	r3, r1, r3
 8000e08:	43db      	mvns	r3, r3
 8000e0a:	401a      	ands	r2, r3
 8000e0c:	6a39      	ldr	r1, [r7, #32]
 8000e0e:	693b      	ldr	r3, [r7, #16]
 8000e10:	fa01 f303 	lsl.w	r3, r1, r3
 8000e14:	431a      	orrs	r2, r3
 8000e16:	697b      	ldr	r3, [r7, #20]
 8000e18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	f000 80b1 	beq.w	8000f8a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000e28:	4b4d      	ldr	r3, [pc, #308]	; (8000f60 <HAL_GPIO_Init+0x2b8>)
 8000e2a:	699b      	ldr	r3, [r3, #24]
 8000e2c:	4a4c      	ldr	r2, [pc, #304]	; (8000f60 <HAL_GPIO_Init+0x2b8>)
 8000e2e:	f043 0301 	orr.w	r3, r3, #1
 8000e32:	6193      	str	r3, [r2, #24]
 8000e34:	4b4a      	ldr	r3, [pc, #296]	; (8000f60 <HAL_GPIO_Init+0x2b8>)
 8000e36:	699b      	ldr	r3, [r3, #24]
 8000e38:	f003 0301 	and.w	r3, r3, #1
 8000e3c:	60bb      	str	r3, [r7, #8]
 8000e3e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000e40:	4a48      	ldr	r2, [pc, #288]	; (8000f64 <HAL_GPIO_Init+0x2bc>)
 8000e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e44:	089b      	lsrs	r3, r3, #2
 8000e46:	3302      	adds	r3, #2
 8000e48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e4c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e50:	f003 0303 	and.w	r3, r3, #3
 8000e54:	009b      	lsls	r3, r3, #2
 8000e56:	220f      	movs	r2, #15
 8000e58:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5c:	43db      	mvns	r3, r3
 8000e5e:	68fa      	ldr	r2, [r7, #12]
 8000e60:	4013      	ands	r3, r2
 8000e62:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	4a40      	ldr	r2, [pc, #256]	; (8000f68 <HAL_GPIO_Init+0x2c0>)
 8000e68:	4293      	cmp	r3, r2
 8000e6a:	d013      	beq.n	8000e94 <HAL_GPIO_Init+0x1ec>
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	4a3f      	ldr	r2, [pc, #252]	; (8000f6c <HAL_GPIO_Init+0x2c4>)
 8000e70:	4293      	cmp	r3, r2
 8000e72:	d00d      	beq.n	8000e90 <HAL_GPIO_Init+0x1e8>
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	4a3e      	ldr	r2, [pc, #248]	; (8000f70 <HAL_GPIO_Init+0x2c8>)
 8000e78:	4293      	cmp	r3, r2
 8000e7a:	d007      	beq.n	8000e8c <HAL_GPIO_Init+0x1e4>
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	4a3d      	ldr	r2, [pc, #244]	; (8000f74 <HAL_GPIO_Init+0x2cc>)
 8000e80:	4293      	cmp	r3, r2
 8000e82:	d101      	bne.n	8000e88 <HAL_GPIO_Init+0x1e0>
 8000e84:	2303      	movs	r3, #3
 8000e86:	e006      	b.n	8000e96 <HAL_GPIO_Init+0x1ee>
 8000e88:	2304      	movs	r3, #4
 8000e8a:	e004      	b.n	8000e96 <HAL_GPIO_Init+0x1ee>
 8000e8c:	2302      	movs	r3, #2
 8000e8e:	e002      	b.n	8000e96 <HAL_GPIO_Init+0x1ee>
 8000e90:	2301      	movs	r3, #1
 8000e92:	e000      	b.n	8000e96 <HAL_GPIO_Init+0x1ee>
 8000e94:	2300      	movs	r3, #0
 8000e96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e98:	f002 0203 	and.w	r2, r2, #3
 8000e9c:	0092      	lsls	r2, r2, #2
 8000e9e:	4093      	lsls	r3, r2
 8000ea0:	68fa      	ldr	r2, [r7, #12]
 8000ea2:	4313      	orrs	r3, r2
 8000ea4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000ea6:	492f      	ldr	r1, [pc, #188]	; (8000f64 <HAL_GPIO_Init+0x2bc>)
 8000ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eaa:	089b      	lsrs	r3, r3, #2
 8000eac:	3302      	adds	r3, #2
 8000eae:	68fa      	ldr	r2, [r7, #12]
 8000eb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d006      	beq.n	8000ece <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000ec0:	4b2d      	ldr	r3, [pc, #180]	; (8000f78 <HAL_GPIO_Init+0x2d0>)
 8000ec2:	681a      	ldr	r2, [r3, #0]
 8000ec4:	492c      	ldr	r1, [pc, #176]	; (8000f78 <HAL_GPIO_Init+0x2d0>)
 8000ec6:	69bb      	ldr	r3, [r7, #24]
 8000ec8:	4313      	orrs	r3, r2
 8000eca:	600b      	str	r3, [r1, #0]
 8000ecc:	e006      	b.n	8000edc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000ece:	4b2a      	ldr	r3, [pc, #168]	; (8000f78 <HAL_GPIO_Init+0x2d0>)
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	69bb      	ldr	r3, [r7, #24]
 8000ed4:	43db      	mvns	r3, r3
 8000ed6:	4928      	ldr	r1, [pc, #160]	; (8000f78 <HAL_GPIO_Init+0x2d0>)
 8000ed8:	4013      	ands	r3, r2
 8000eda:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d006      	beq.n	8000ef6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000ee8:	4b23      	ldr	r3, [pc, #140]	; (8000f78 <HAL_GPIO_Init+0x2d0>)
 8000eea:	685a      	ldr	r2, [r3, #4]
 8000eec:	4922      	ldr	r1, [pc, #136]	; (8000f78 <HAL_GPIO_Init+0x2d0>)
 8000eee:	69bb      	ldr	r3, [r7, #24]
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	604b      	str	r3, [r1, #4]
 8000ef4:	e006      	b.n	8000f04 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000ef6:	4b20      	ldr	r3, [pc, #128]	; (8000f78 <HAL_GPIO_Init+0x2d0>)
 8000ef8:	685a      	ldr	r2, [r3, #4]
 8000efa:	69bb      	ldr	r3, [r7, #24]
 8000efc:	43db      	mvns	r3, r3
 8000efe:	491e      	ldr	r1, [pc, #120]	; (8000f78 <HAL_GPIO_Init+0x2d0>)
 8000f00:	4013      	ands	r3, r2
 8000f02:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d006      	beq.n	8000f1e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000f10:	4b19      	ldr	r3, [pc, #100]	; (8000f78 <HAL_GPIO_Init+0x2d0>)
 8000f12:	689a      	ldr	r2, [r3, #8]
 8000f14:	4918      	ldr	r1, [pc, #96]	; (8000f78 <HAL_GPIO_Init+0x2d0>)
 8000f16:	69bb      	ldr	r3, [r7, #24]
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	608b      	str	r3, [r1, #8]
 8000f1c:	e006      	b.n	8000f2c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000f1e:	4b16      	ldr	r3, [pc, #88]	; (8000f78 <HAL_GPIO_Init+0x2d0>)
 8000f20:	689a      	ldr	r2, [r3, #8]
 8000f22:	69bb      	ldr	r3, [r7, #24]
 8000f24:	43db      	mvns	r3, r3
 8000f26:	4914      	ldr	r1, [pc, #80]	; (8000f78 <HAL_GPIO_Init+0x2d0>)
 8000f28:	4013      	ands	r3, r2
 8000f2a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d021      	beq.n	8000f7c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f38:	4b0f      	ldr	r3, [pc, #60]	; (8000f78 <HAL_GPIO_Init+0x2d0>)
 8000f3a:	68da      	ldr	r2, [r3, #12]
 8000f3c:	490e      	ldr	r1, [pc, #56]	; (8000f78 <HAL_GPIO_Init+0x2d0>)
 8000f3e:	69bb      	ldr	r3, [r7, #24]
 8000f40:	4313      	orrs	r3, r2
 8000f42:	60cb      	str	r3, [r1, #12]
 8000f44:	e021      	b.n	8000f8a <HAL_GPIO_Init+0x2e2>
 8000f46:	bf00      	nop
 8000f48:	10320000 	.word	0x10320000
 8000f4c:	10310000 	.word	0x10310000
 8000f50:	10220000 	.word	0x10220000
 8000f54:	10210000 	.word	0x10210000
 8000f58:	10120000 	.word	0x10120000
 8000f5c:	10110000 	.word	0x10110000
 8000f60:	40021000 	.word	0x40021000
 8000f64:	40010000 	.word	0x40010000
 8000f68:	40010800 	.word	0x40010800
 8000f6c:	40010c00 	.word	0x40010c00
 8000f70:	40011000 	.word	0x40011000
 8000f74:	40011400 	.word	0x40011400
 8000f78:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000f7c:	4b0b      	ldr	r3, [pc, #44]	; (8000fac <HAL_GPIO_Init+0x304>)
 8000f7e:	68da      	ldr	r2, [r3, #12]
 8000f80:	69bb      	ldr	r3, [r7, #24]
 8000f82:	43db      	mvns	r3, r3
 8000f84:	4909      	ldr	r1, [pc, #36]	; (8000fac <HAL_GPIO_Init+0x304>)
 8000f86:	4013      	ands	r3, r2
 8000f88:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f8c:	3301      	adds	r3, #1
 8000f8e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f96:	fa22 f303 	lsr.w	r3, r2, r3
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	f47f ae8e 	bne.w	8000cbc <HAL_GPIO_Init+0x14>
  }
}
 8000fa0:	bf00      	nop
 8000fa2:	bf00      	nop
 8000fa4:	372c      	adds	r7, #44	; 0x2c
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bc80      	pop	{r7}
 8000faa:	4770      	bx	lr
 8000fac:	40010400 	.word	0x40010400

08000fb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
 8000fb8:	460b      	mov	r3, r1
 8000fba:	807b      	strh	r3, [r7, #2]
 8000fbc:	4613      	mov	r3, r2
 8000fbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000fc0:	787b      	ldrb	r3, [r7, #1]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d003      	beq.n	8000fce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fc6:	887a      	ldrh	r2, [r7, #2]
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000fcc:	e003      	b.n	8000fd6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000fce:	887b      	ldrh	r3, [r7, #2]
 8000fd0:	041a      	lsls	r2, r3, #16
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	611a      	str	r2, [r3, #16]
}
 8000fd6:	bf00      	nop
 8000fd8:	370c      	adds	r7, #12
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bc80      	pop	{r7}
 8000fde:	4770      	bx	lr

08000fe0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b086      	sub	sp, #24
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d101      	bne.n	8000ff2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	e26c      	b.n	80014cc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f003 0301 	and.w	r3, r3, #1
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	f000 8087 	beq.w	800110e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001000:	4b92      	ldr	r3, [pc, #584]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	f003 030c 	and.w	r3, r3, #12
 8001008:	2b04      	cmp	r3, #4
 800100a:	d00c      	beq.n	8001026 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800100c:	4b8f      	ldr	r3, [pc, #572]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	f003 030c 	and.w	r3, r3, #12
 8001014:	2b08      	cmp	r3, #8
 8001016:	d112      	bne.n	800103e <HAL_RCC_OscConfig+0x5e>
 8001018:	4b8c      	ldr	r3, [pc, #560]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001020:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001024:	d10b      	bne.n	800103e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001026:	4b89      	ldr	r3, [pc, #548]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800102e:	2b00      	cmp	r3, #0
 8001030:	d06c      	beq.n	800110c <HAL_RCC_OscConfig+0x12c>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d168      	bne.n	800110c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800103a:	2301      	movs	r3, #1
 800103c:	e246      	b.n	80014cc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001046:	d106      	bne.n	8001056 <HAL_RCC_OscConfig+0x76>
 8001048:	4b80      	ldr	r3, [pc, #512]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a7f      	ldr	r2, [pc, #508]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 800104e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001052:	6013      	str	r3, [r2, #0]
 8001054:	e02e      	b.n	80010b4 <HAL_RCC_OscConfig+0xd4>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d10c      	bne.n	8001078 <HAL_RCC_OscConfig+0x98>
 800105e:	4b7b      	ldr	r3, [pc, #492]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4a7a      	ldr	r2, [pc, #488]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 8001064:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001068:	6013      	str	r3, [r2, #0]
 800106a:	4b78      	ldr	r3, [pc, #480]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4a77      	ldr	r2, [pc, #476]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 8001070:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001074:	6013      	str	r3, [r2, #0]
 8001076:	e01d      	b.n	80010b4 <HAL_RCC_OscConfig+0xd4>
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001080:	d10c      	bne.n	800109c <HAL_RCC_OscConfig+0xbc>
 8001082:	4b72      	ldr	r3, [pc, #456]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4a71      	ldr	r2, [pc, #452]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 8001088:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800108c:	6013      	str	r3, [r2, #0]
 800108e:	4b6f      	ldr	r3, [pc, #444]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4a6e      	ldr	r2, [pc, #440]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 8001094:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001098:	6013      	str	r3, [r2, #0]
 800109a:	e00b      	b.n	80010b4 <HAL_RCC_OscConfig+0xd4>
 800109c:	4b6b      	ldr	r3, [pc, #428]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a6a      	ldr	r2, [pc, #424]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 80010a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010a6:	6013      	str	r3, [r2, #0]
 80010a8:	4b68      	ldr	r3, [pc, #416]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a67      	ldr	r2, [pc, #412]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 80010ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010b2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d013      	beq.n	80010e4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010bc:	f7ff fce2 	bl	8000a84 <HAL_GetTick>
 80010c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010c2:	e008      	b.n	80010d6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010c4:	f7ff fcde 	bl	8000a84 <HAL_GetTick>
 80010c8:	4602      	mov	r2, r0
 80010ca:	693b      	ldr	r3, [r7, #16]
 80010cc:	1ad3      	subs	r3, r2, r3
 80010ce:	2b64      	cmp	r3, #100	; 0x64
 80010d0:	d901      	bls.n	80010d6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80010d2:	2303      	movs	r3, #3
 80010d4:	e1fa      	b.n	80014cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010d6:	4b5d      	ldr	r3, [pc, #372]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d0f0      	beq.n	80010c4 <HAL_RCC_OscConfig+0xe4>
 80010e2:	e014      	b.n	800110e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010e4:	f7ff fcce 	bl	8000a84 <HAL_GetTick>
 80010e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010ea:	e008      	b.n	80010fe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010ec:	f7ff fcca 	bl	8000a84 <HAL_GetTick>
 80010f0:	4602      	mov	r2, r0
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	1ad3      	subs	r3, r2, r3
 80010f6:	2b64      	cmp	r3, #100	; 0x64
 80010f8:	d901      	bls.n	80010fe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80010fa:	2303      	movs	r3, #3
 80010fc:	e1e6      	b.n	80014cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010fe:	4b53      	ldr	r3, [pc, #332]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001106:	2b00      	cmp	r3, #0
 8001108:	d1f0      	bne.n	80010ec <HAL_RCC_OscConfig+0x10c>
 800110a:	e000      	b.n	800110e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800110c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f003 0302 	and.w	r3, r3, #2
 8001116:	2b00      	cmp	r3, #0
 8001118:	d063      	beq.n	80011e2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800111a:	4b4c      	ldr	r3, [pc, #304]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	f003 030c 	and.w	r3, r3, #12
 8001122:	2b00      	cmp	r3, #0
 8001124:	d00b      	beq.n	800113e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001126:	4b49      	ldr	r3, [pc, #292]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	f003 030c 	and.w	r3, r3, #12
 800112e:	2b08      	cmp	r3, #8
 8001130:	d11c      	bne.n	800116c <HAL_RCC_OscConfig+0x18c>
 8001132:	4b46      	ldr	r3, [pc, #280]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800113a:	2b00      	cmp	r3, #0
 800113c:	d116      	bne.n	800116c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800113e:	4b43      	ldr	r3, [pc, #268]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f003 0302 	and.w	r3, r3, #2
 8001146:	2b00      	cmp	r3, #0
 8001148:	d005      	beq.n	8001156 <HAL_RCC_OscConfig+0x176>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	691b      	ldr	r3, [r3, #16]
 800114e:	2b01      	cmp	r3, #1
 8001150:	d001      	beq.n	8001156 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001152:	2301      	movs	r3, #1
 8001154:	e1ba      	b.n	80014cc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001156:	4b3d      	ldr	r3, [pc, #244]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	695b      	ldr	r3, [r3, #20]
 8001162:	00db      	lsls	r3, r3, #3
 8001164:	4939      	ldr	r1, [pc, #228]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 8001166:	4313      	orrs	r3, r2
 8001168:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800116a:	e03a      	b.n	80011e2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	691b      	ldr	r3, [r3, #16]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d020      	beq.n	80011b6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001174:	4b36      	ldr	r3, [pc, #216]	; (8001250 <HAL_RCC_OscConfig+0x270>)
 8001176:	2201      	movs	r2, #1
 8001178:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800117a:	f7ff fc83 	bl	8000a84 <HAL_GetTick>
 800117e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001180:	e008      	b.n	8001194 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001182:	f7ff fc7f 	bl	8000a84 <HAL_GetTick>
 8001186:	4602      	mov	r2, r0
 8001188:	693b      	ldr	r3, [r7, #16]
 800118a:	1ad3      	subs	r3, r2, r3
 800118c:	2b02      	cmp	r3, #2
 800118e:	d901      	bls.n	8001194 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001190:	2303      	movs	r3, #3
 8001192:	e19b      	b.n	80014cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001194:	4b2d      	ldr	r3, [pc, #180]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f003 0302 	and.w	r3, r3, #2
 800119c:	2b00      	cmp	r3, #0
 800119e:	d0f0      	beq.n	8001182 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011a0:	4b2a      	ldr	r3, [pc, #168]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	695b      	ldr	r3, [r3, #20]
 80011ac:	00db      	lsls	r3, r3, #3
 80011ae:	4927      	ldr	r1, [pc, #156]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 80011b0:	4313      	orrs	r3, r2
 80011b2:	600b      	str	r3, [r1, #0]
 80011b4:	e015      	b.n	80011e2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011b6:	4b26      	ldr	r3, [pc, #152]	; (8001250 <HAL_RCC_OscConfig+0x270>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011bc:	f7ff fc62 	bl	8000a84 <HAL_GetTick>
 80011c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011c2:	e008      	b.n	80011d6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011c4:	f7ff fc5e 	bl	8000a84 <HAL_GetTick>
 80011c8:	4602      	mov	r2, r0
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	1ad3      	subs	r3, r2, r3
 80011ce:	2b02      	cmp	r3, #2
 80011d0:	d901      	bls.n	80011d6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80011d2:	2303      	movs	r3, #3
 80011d4:	e17a      	b.n	80014cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011d6:	4b1d      	ldr	r3, [pc, #116]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f003 0302 	and.w	r3, r3, #2
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d1f0      	bne.n	80011c4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f003 0308 	and.w	r3, r3, #8
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d03a      	beq.n	8001264 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	699b      	ldr	r3, [r3, #24]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d019      	beq.n	800122a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011f6:	4b17      	ldr	r3, [pc, #92]	; (8001254 <HAL_RCC_OscConfig+0x274>)
 80011f8:	2201      	movs	r2, #1
 80011fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011fc:	f7ff fc42 	bl	8000a84 <HAL_GetTick>
 8001200:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001202:	e008      	b.n	8001216 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001204:	f7ff fc3e 	bl	8000a84 <HAL_GetTick>
 8001208:	4602      	mov	r2, r0
 800120a:	693b      	ldr	r3, [r7, #16]
 800120c:	1ad3      	subs	r3, r2, r3
 800120e:	2b02      	cmp	r3, #2
 8001210:	d901      	bls.n	8001216 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001212:	2303      	movs	r3, #3
 8001214:	e15a      	b.n	80014cc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001216:	4b0d      	ldr	r3, [pc, #52]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 8001218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800121a:	f003 0302 	and.w	r3, r3, #2
 800121e:	2b00      	cmp	r3, #0
 8001220:	d0f0      	beq.n	8001204 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001222:	2001      	movs	r0, #1
 8001224:	f000 fad8 	bl	80017d8 <RCC_Delay>
 8001228:	e01c      	b.n	8001264 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800122a:	4b0a      	ldr	r3, [pc, #40]	; (8001254 <HAL_RCC_OscConfig+0x274>)
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001230:	f7ff fc28 	bl	8000a84 <HAL_GetTick>
 8001234:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001236:	e00f      	b.n	8001258 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001238:	f7ff fc24 	bl	8000a84 <HAL_GetTick>
 800123c:	4602      	mov	r2, r0
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	1ad3      	subs	r3, r2, r3
 8001242:	2b02      	cmp	r3, #2
 8001244:	d908      	bls.n	8001258 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001246:	2303      	movs	r3, #3
 8001248:	e140      	b.n	80014cc <HAL_RCC_OscConfig+0x4ec>
 800124a:	bf00      	nop
 800124c:	40021000 	.word	0x40021000
 8001250:	42420000 	.word	0x42420000
 8001254:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001258:	4b9e      	ldr	r3, [pc, #632]	; (80014d4 <HAL_RCC_OscConfig+0x4f4>)
 800125a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800125c:	f003 0302 	and.w	r3, r3, #2
 8001260:	2b00      	cmp	r3, #0
 8001262:	d1e9      	bne.n	8001238 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f003 0304 	and.w	r3, r3, #4
 800126c:	2b00      	cmp	r3, #0
 800126e:	f000 80a6 	beq.w	80013be <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001272:	2300      	movs	r3, #0
 8001274:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001276:	4b97      	ldr	r3, [pc, #604]	; (80014d4 <HAL_RCC_OscConfig+0x4f4>)
 8001278:	69db      	ldr	r3, [r3, #28]
 800127a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800127e:	2b00      	cmp	r3, #0
 8001280:	d10d      	bne.n	800129e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001282:	4b94      	ldr	r3, [pc, #592]	; (80014d4 <HAL_RCC_OscConfig+0x4f4>)
 8001284:	69db      	ldr	r3, [r3, #28]
 8001286:	4a93      	ldr	r2, [pc, #588]	; (80014d4 <HAL_RCC_OscConfig+0x4f4>)
 8001288:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800128c:	61d3      	str	r3, [r2, #28]
 800128e:	4b91      	ldr	r3, [pc, #580]	; (80014d4 <HAL_RCC_OscConfig+0x4f4>)
 8001290:	69db      	ldr	r3, [r3, #28]
 8001292:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001296:	60bb      	str	r3, [r7, #8]
 8001298:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800129a:	2301      	movs	r3, #1
 800129c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800129e:	4b8e      	ldr	r3, [pc, #568]	; (80014d8 <HAL_RCC_OscConfig+0x4f8>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d118      	bne.n	80012dc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012aa:	4b8b      	ldr	r3, [pc, #556]	; (80014d8 <HAL_RCC_OscConfig+0x4f8>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a8a      	ldr	r2, [pc, #552]	; (80014d8 <HAL_RCC_OscConfig+0x4f8>)
 80012b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012b6:	f7ff fbe5 	bl	8000a84 <HAL_GetTick>
 80012ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012bc:	e008      	b.n	80012d0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012be:	f7ff fbe1 	bl	8000a84 <HAL_GetTick>
 80012c2:	4602      	mov	r2, r0
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	1ad3      	subs	r3, r2, r3
 80012c8:	2b64      	cmp	r3, #100	; 0x64
 80012ca:	d901      	bls.n	80012d0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80012cc:	2303      	movs	r3, #3
 80012ce:	e0fd      	b.n	80014cc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012d0:	4b81      	ldr	r3, [pc, #516]	; (80014d8 <HAL_RCC_OscConfig+0x4f8>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d0f0      	beq.n	80012be <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	68db      	ldr	r3, [r3, #12]
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d106      	bne.n	80012f2 <HAL_RCC_OscConfig+0x312>
 80012e4:	4b7b      	ldr	r3, [pc, #492]	; (80014d4 <HAL_RCC_OscConfig+0x4f4>)
 80012e6:	6a1b      	ldr	r3, [r3, #32]
 80012e8:	4a7a      	ldr	r2, [pc, #488]	; (80014d4 <HAL_RCC_OscConfig+0x4f4>)
 80012ea:	f043 0301 	orr.w	r3, r3, #1
 80012ee:	6213      	str	r3, [r2, #32]
 80012f0:	e02d      	b.n	800134e <HAL_RCC_OscConfig+0x36e>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	68db      	ldr	r3, [r3, #12]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d10c      	bne.n	8001314 <HAL_RCC_OscConfig+0x334>
 80012fa:	4b76      	ldr	r3, [pc, #472]	; (80014d4 <HAL_RCC_OscConfig+0x4f4>)
 80012fc:	6a1b      	ldr	r3, [r3, #32]
 80012fe:	4a75      	ldr	r2, [pc, #468]	; (80014d4 <HAL_RCC_OscConfig+0x4f4>)
 8001300:	f023 0301 	bic.w	r3, r3, #1
 8001304:	6213      	str	r3, [r2, #32]
 8001306:	4b73      	ldr	r3, [pc, #460]	; (80014d4 <HAL_RCC_OscConfig+0x4f4>)
 8001308:	6a1b      	ldr	r3, [r3, #32]
 800130a:	4a72      	ldr	r2, [pc, #456]	; (80014d4 <HAL_RCC_OscConfig+0x4f4>)
 800130c:	f023 0304 	bic.w	r3, r3, #4
 8001310:	6213      	str	r3, [r2, #32]
 8001312:	e01c      	b.n	800134e <HAL_RCC_OscConfig+0x36e>
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	68db      	ldr	r3, [r3, #12]
 8001318:	2b05      	cmp	r3, #5
 800131a:	d10c      	bne.n	8001336 <HAL_RCC_OscConfig+0x356>
 800131c:	4b6d      	ldr	r3, [pc, #436]	; (80014d4 <HAL_RCC_OscConfig+0x4f4>)
 800131e:	6a1b      	ldr	r3, [r3, #32]
 8001320:	4a6c      	ldr	r2, [pc, #432]	; (80014d4 <HAL_RCC_OscConfig+0x4f4>)
 8001322:	f043 0304 	orr.w	r3, r3, #4
 8001326:	6213      	str	r3, [r2, #32]
 8001328:	4b6a      	ldr	r3, [pc, #424]	; (80014d4 <HAL_RCC_OscConfig+0x4f4>)
 800132a:	6a1b      	ldr	r3, [r3, #32]
 800132c:	4a69      	ldr	r2, [pc, #420]	; (80014d4 <HAL_RCC_OscConfig+0x4f4>)
 800132e:	f043 0301 	orr.w	r3, r3, #1
 8001332:	6213      	str	r3, [r2, #32]
 8001334:	e00b      	b.n	800134e <HAL_RCC_OscConfig+0x36e>
 8001336:	4b67      	ldr	r3, [pc, #412]	; (80014d4 <HAL_RCC_OscConfig+0x4f4>)
 8001338:	6a1b      	ldr	r3, [r3, #32]
 800133a:	4a66      	ldr	r2, [pc, #408]	; (80014d4 <HAL_RCC_OscConfig+0x4f4>)
 800133c:	f023 0301 	bic.w	r3, r3, #1
 8001340:	6213      	str	r3, [r2, #32]
 8001342:	4b64      	ldr	r3, [pc, #400]	; (80014d4 <HAL_RCC_OscConfig+0x4f4>)
 8001344:	6a1b      	ldr	r3, [r3, #32]
 8001346:	4a63      	ldr	r2, [pc, #396]	; (80014d4 <HAL_RCC_OscConfig+0x4f4>)
 8001348:	f023 0304 	bic.w	r3, r3, #4
 800134c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	68db      	ldr	r3, [r3, #12]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d015      	beq.n	8001382 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001356:	f7ff fb95 	bl	8000a84 <HAL_GetTick>
 800135a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800135c:	e00a      	b.n	8001374 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800135e:	f7ff fb91 	bl	8000a84 <HAL_GetTick>
 8001362:	4602      	mov	r2, r0
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	1ad3      	subs	r3, r2, r3
 8001368:	f241 3288 	movw	r2, #5000	; 0x1388
 800136c:	4293      	cmp	r3, r2
 800136e:	d901      	bls.n	8001374 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001370:	2303      	movs	r3, #3
 8001372:	e0ab      	b.n	80014cc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001374:	4b57      	ldr	r3, [pc, #348]	; (80014d4 <HAL_RCC_OscConfig+0x4f4>)
 8001376:	6a1b      	ldr	r3, [r3, #32]
 8001378:	f003 0302 	and.w	r3, r3, #2
 800137c:	2b00      	cmp	r3, #0
 800137e:	d0ee      	beq.n	800135e <HAL_RCC_OscConfig+0x37e>
 8001380:	e014      	b.n	80013ac <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001382:	f7ff fb7f 	bl	8000a84 <HAL_GetTick>
 8001386:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001388:	e00a      	b.n	80013a0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800138a:	f7ff fb7b 	bl	8000a84 <HAL_GetTick>
 800138e:	4602      	mov	r2, r0
 8001390:	693b      	ldr	r3, [r7, #16]
 8001392:	1ad3      	subs	r3, r2, r3
 8001394:	f241 3288 	movw	r2, #5000	; 0x1388
 8001398:	4293      	cmp	r3, r2
 800139a:	d901      	bls.n	80013a0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800139c:	2303      	movs	r3, #3
 800139e:	e095      	b.n	80014cc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013a0:	4b4c      	ldr	r3, [pc, #304]	; (80014d4 <HAL_RCC_OscConfig+0x4f4>)
 80013a2:	6a1b      	ldr	r3, [r3, #32]
 80013a4:	f003 0302 	and.w	r3, r3, #2
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d1ee      	bne.n	800138a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80013ac:	7dfb      	ldrb	r3, [r7, #23]
 80013ae:	2b01      	cmp	r3, #1
 80013b0:	d105      	bne.n	80013be <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013b2:	4b48      	ldr	r3, [pc, #288]	; (80014d4 <HAL_RCC_OscConfig+0x4f4>)
 80013b4:	69db      	ldr	r3, [r3, #28]
 80013b6:	4a47      	ldr	r2, [pc, #284]	; (80014d4 <HAL_RCC_OscConfig+0x4f4>)
 80013b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013bc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	69db      	ldr	r3, [r3, #28]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	f000 8081 	beq.w	80014ca <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80013c8:	4b42      	ldr	r3, [pc, #264]	; (80014d4 <HAL_RCC_OscConfig+0x4f4>)
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f003 030c 	and.w	r3, r3, #12
 80013d0:	2b08      	cmp	r3, #8
 80013d2:	d061      	beq.n	8001498 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	69db      	ldr	r3, [r3, #28]
 80013d8:	2b02      	cmp	r3, #2
 80013da:	d146      	bne.n	800146a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013dc:	4b3f      	ldr	r3, [pc, #252]	; (80014dc <HAL_RCC_OscConfig+0x4fc>)
 80013de:	2200      	movs	r2, #0
 80013e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013e2:	f7ff fb4f 	bl	8000a84 <HAL_GetTick>
 80013e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013e8:	e008      	b.n	80013fc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013ea:	f7ff fb4b 	bl	8000a84 <HAL_GetTick>
 80013ee:	4602      	mov	r2, r0
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	1ad3      	subs	r3, r2, r3
 80013f4:	2b02      	cmp	r3, #2
 80013f6:	d901      	bls.n	80013fc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80013f8:	2303      	movs	r3, #3
 80013fa:	e067      	b.n	80014cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013fc:	4b35      	ldr	r3, [pc, #212]	; (80014d4 <HAL_RCC_OscConfig+0x4f4>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001404:	2b00      	cmp	r3, #0
 8001406:	d1f0      	bne.n	80013ea <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6a1b      	ldr	r3, [r3, #32]
 800140c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001410:	d108      	bne.n	8001424 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001412:	4b30      	ldr	r3, [pc, #192]	; (80014d4 <HAL_RCC_OscConfig+0x4f4>)
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	689b      	ldr	r3, [r3, #8]
 800141e:	492d      	ldr	r1, [pc, #180]	; (80014d4 <HAL_RCC_OscConfig+0x4f4>)
 8001420:	4313      	orrs	r3, r2
 8001422:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001424:	4b2b      	ldr	r3, [pc, #172]	; (80014d4 <HAL_RCC_OscConfig+0x4f4>)
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6a19      	ldr	r1, [r3, #32]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001434:	430b      	orrs	r3, r1
 8001436:	4927      	ldr	r1, [pc, #156]	; (80014d4 <HAL_RCC_OscConfig+0x4f4>)
 8001438:	4313      	orrs	r3, r2
 800143a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800143c:	4b27      	ldr	r3, [pc, #156]	; (80014dc <HAL_RCC_OscConfig+0x4fc>)
 800143e:	2201      	movs	r2, #1
 8001440:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001442:	f7ff fb1f 	bl	8000a84 <HAL_GetTick>
 8001446:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001448:	e008      	b.n	800145c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800144a:	f7ff fb1b 	bl	8000a84 <HAL_GetTick>
 800144e:	4602      	mov	r2, r0
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	1ad3      	subs	r3, r2, r3
 8001454:	2b02      	cmp	r3, #2
 8001456:	d901      	bls.n	800145c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001458:	2303      	movs	r3, #3
 800145a:	e037      	b.n	80014cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800145c:	4b1d      	ldr	r3, [pc, #116]	; (80014d4 <HAL_RCC_OscConfig+0x4f4>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001464:	2b00      	cmp	r3, #0
 8001466:	d0f0      	beq.n	800144a <HAL_RCC_OscConfig+0x46a>
 8001468:	e02f      	b.n	80014ca <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800146a:	4b1c      	ldr	r3, [pc, #112]	; (80014dc <HAL_RCC_OscConfig+0x4fc>)
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001470:	f7ff fb08 	bl	8000a84 <HAL_GetTick>
 8001474:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001476:	e008      	b.n	800148a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001478:	f7ff fb04 	bl	8000a84 <HAL_GetTick>
 800147c:	4602      	mov	r2, r0
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	2b02      	cmp	r3, #2
 8001484:	d901      	bls.n	800148a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001486:	2303      	movs	r3, #3
 8001488:	e020      	b.n	80014cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800148a:	4b12      	ldr	r3, [pc, #72]	; (80014d4 <HAL_RCC_OscConfig+0x4f4>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001492:	2b00      	cmp	r3, #0
 8001494:	d1f0      	bne.n	8001478 <HAL_RCC_OscConfig+0x498>
 8001496:	e018      	b.n	80014ca <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	69db      	ldr	r3, [r3, #28]
 800149c:	2b01      	cmp	r3, #1
 800149e:	d101      	bne.n	80014a4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80014a0:	2301      	movs	r3, #1
 80014a2:	e013      	b.n	80014cc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80014a4:	4b0b      	ldr	r3, [pc, #44]	; (80014d4 <HAL_RCC_OscConfig+0x4f4>)
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6a1b      	ldr	r3, [r3, #32]
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d106      	bne.n	80014c6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014c2:	429a      	cmp	r2, r3
 80014c4:	d001      	beq.n	80014ca <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	e000      	b.n	80014cc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80014ca:	2300      	movs	r3, #0
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	3718      	adds	r7, #24
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	40021000 	.word	0x40021000
 80014d8:	40007000 	.word	0x40007000
 80014dc:	42420060 	.word	0x42420060

080014e0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b084      	sub	sp, #16
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
 80014e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d101      	bne.n	80014f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014f0:	2301      	movs	r3, #1
 80014f2:	e0d0      	b.n	8001696 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80014f4:	4b6a      	ldr	r3, [pc, #424]	; (80016a0 <HAL_RCC_ClockConfig+0x1c0>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f003 0307 	and.w	r3, r3, #7
 80014fc:	683a      	ldr	r2, [r7, #0]
 80014fe:	429a      	cmp	r2, r3
 8001500:	d910      	bls.n	8001524 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001502:	4b67      	ldr	r3, [pc, #412]	; (80016a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f023 0207 	bic.w	r2, r3, #7
 800150a:	4965      	ldr	r1, [pc, #404]	; (80016a0 <HAL_RCC_ClockConfig+0x1c0>)
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	4313      	orrs	r3, r2
 8001510:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001512:	4b63      	ldr	r3, [pc, #396]	; (80016a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f003 0307 	and.w	r3, r3, #7
 800151a:	683a      	ldr	r2, [r7, #0]
 800151c:	429a      	cmp	r2, r3
 800151e:	d001      	beq.n	8001524 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001520:	2301      	movs	r3, #1
 8001522:	e0b8      	b.n	8001696 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f003 0302 	and.w	r3, r3, #2
 800152c:	2b00      	cmp	r3, #0
 800152e:	d020      	beq.n	8001572 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f003 0304 	and.w	r3, r3, #4
 8001538:	2b00      	cmp	r3, #0
 800153a:	d005      	beq.n	8001548 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800153c:	4b59      	ldr	r3, [pc, #356]	; (80016a4 <HAL_RCC_ClockConfig+0x1c4>)
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	4a58      	ldr	r2, [pc, #352]	; (80016a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001542:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001546:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f003 0308 	and.w	r3, r3, #8
 8001550:	2b00      	cmp	r3, #0
 8001552:	d005      	beq.n	8001560 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001554:	4b53      	ldr	r3, [pc, #332]	; (80016a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	4a52      	ldr	r2, [pc, #328]	; (80016a4 <HAL_RCC_ClockConfig+0x1c4>)
 800155a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800155e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001560:	4b50      	ldr	r3, [pc, #320]	; (80016a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	494d      	ldr	r1, [pc, #308]	; (80016a4 <HAL_RCC_ClockConfig+0x1c4>)
 800156e:	4313      	orrs	r3, r2
 8001570:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f003 0301 	and.w	r3, r3, #1
 800157a:	2b00      	cmp	r3, #0
 800157c:	d040      	beq.n	8001600 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	2b01      	cmp	r3, #1
 8001584:	d107      	bne.n	8001596 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001586:	4b47      	ldr	r3, [pc, #284]	; (80016a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800158e:	2b00      	cmp	r3, #0
 8001590:	d115      	bne.n	80015be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	e07f      	b.n	8001696 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	2b02      	cmp	r3, #2
 800159c:	d107      	bne.n	80015ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800159e:	4b41      	ldr	r3, [pc, #260]	; (80016a4 <HAL_RCC_ClockConfig+0x1c4>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d109      	bne.n	80015be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	e073      	b.n	8001696 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015ae:	4b3d      	ldr	r3, [pc, #244]	; (80016a4 <HAL_RCC_ClockConfig+0x1c4>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f003 0302 	and.w	r3, r3, #2
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d101      	bne.n	80015be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e06b      	b.n	8001696 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015be:	4b39      	ldr	r3, [pc, #228]	; (80016a4 <HAL_RCC_ClockConfig+0x1c4>)
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	f023 0203 	bic.w	r2, r3, #3
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	4936      	ldr	r1, [pc, #216]	; (80016a4 <HAL_RCC_ClockConfig+0x1c4>)
 80015cc:	4313      	orrs	r3, r2
 80015ce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80015d0:	f7ff fa58 	bl	8000a84 <HAL_GetTick>
 80015d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015d6:	e00a      	b.n	80015ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015d8:	f7ff fa54 	bl	8000a84 <HAL_GetTick>
 80015dc:	4602      	mov	r2, r0
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d901      	bls.n	80015ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80015ea:	2303      	movs	r3, #3
 80015ec:	e053      	b.n	8001696 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015ee:	4b2d      	ldr	r3, [pc, #180]	; (80016a4 <HAL_RCC_ClockConfig+0x1c4>)
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	f003 020c 	and.w	r2, r3, #12
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d1eb      	bne.n	80015d8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001600:	4b27      	ldr	r3, [pc, #156]	; (80016a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f003 0307 	and.w	r3, r3, #7
 8001608:	683a      	ldr	r2, [r7, #0]
 800160a:	429a      	cmp	r2, r3
 800160c:	d210      	bcs.n	8001630 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800160e:	4b24      	ldr	r3, [pc, #144]	; (80016a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f023 0207 	bic.w	r2, r3, #7
 8001616:	4922      	ldr	r1, [pc, #136]	; (80016a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	4313      	orrs	r3, r2
 800161c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800161e:	4b20      	ldr	r3, [pc, #128]	; (80016a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 0307 	and.w	r3, r3, #7
 8001626:	683a      	ldr	r2, [r7, #0]
 8001628:	429a      	cmp	r2, r3
 800162a:	d001      	beq.n	8001630 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800162c:	2301      	movs	r3, #1
 800162e:	e032      	b.n	8001696 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f003 0304 	and.w	r3, r3, #4
 8001638:	2b00      	cmp	r3, #0
 800163a:	d008      	beq.n	800164e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800163c:	4b19      	ldr	r3, [pc, #100]	; (80016a4 <HAL_RCC_ClockConfig+0x1c4>)
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	4916      	ldr	r1, [pc, #88]	; (80016a4 <HAL_RCC_ClockConfig+0x1c4>)
 800164a:	4313      	orrs	r3, r2
 800164c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f003 0308 	and.w	r3, r3, #8
 8001656:	2b00      	cmp	r3, #0
 8001658:	d009      	beq.n	800166e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800165a:	4b12      	ldr	r3, [pc, #72]	; (80016a4 <HAL_RCC_ClockConfig+0x1c4>)
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	691b      	ldr	r3, [r3, #16]
 8001666:	00db      	lsls	r3, r3, #3
 8001668:	490e      	ldr	r1, [pc, #56]	; (80016a4 <HAL_RCC_ClockConfig+0x1c4>)
 800166a:	4313      	orrs	r3, r2
 800166c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800166e:	f000 f821 	bl	80016b4 <HAL_RCC_GetSysClockFreq>
 8001672:	4602      	mov	r2, r0
 8001674:	4b0b      	ldr	r3, [pc, #44]	; (80016a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	091b      	lsrs	r3, r3, #4
 800167a:	f003 030f 	and.w	r3, r3, #15
 800167e:	490a      	ldr	r1, [pc, #40]	; (80016a8 <HAL_RCC_ClockConfig+0x1c8>)
 8001680:	5ccb      	ldrb	r3, [r1, r3]
 8001682:	fa22 f303 	lsr.w	r3, r2, r3
 8001686:	4a09      	ldr	r2, [pc, #36]	; (80016ac <HAL_RCC_ClockConfig+0x1cc>)
 8001688:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800168a:	4b09      	ldr	r3, [pc, #36]	; (80016b0 <HAL_RCC_ClockConfig+0x1d0>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4618      	mov	r0, r3
 8001690:	f7ff f9b6 	bl	8000a00 <HAL_InitTick>

  return HAL_OK;
 8001694:	2300      	movs	r3, #0
}
 8001696:	4618      	mov	r0, r3
 8001698:	3710      	adds	r7, #16
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	40022000 	.word	0x40022000
 80016a4:	40021000 	.word	0x40021000
 80016a8:	08002ae0 	.word	0x08002ae0
 80016ac:	20000000 	.word	0x20000000
 80016b0:	20000004 	.word	0x20000004

080016b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016b4:	b490      	push	{r4, r7}
 80016b6:	b08a      	sub	sp, #40	; 0x28
 80016b8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80016ba:	4b2a      	ldr	r3, [pc, #168]	; (8001764 <HAL_RCC_GetSysClockFreq+0xb0>)
 80016bc:	1d3c      	adds	r4, r7, #4
 80016be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80016c4:	f240 2301 	movw	r3, #513	; 0x201
 80016c8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80016ca:	2300      	movs	r3, #0
 80016cc:	61fb      	str	r3, [r7, #28]
 80016ce:	2300      	movs	r3, #0
 80016d0:	61bb      	str	r3, [r7, #24]
 80016d2:	2300      	movs	r3, #0
 80016d4:	627b      	str	r3, [r7, #36]	; 0x24
 80016d6:	2300      	movs	r3, #0
 80016d8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80016da:	2300      	movs	r3, #0
 80016dc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80016de:	4b22      	ldr	r3, [pc, #136]	; (8001768 <HAL_RCC_GetSysClockFreq+0xb4>)
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80016e4:	69fb      	ldr	r3, [r7, #28]
 80016e6:	f003 030c 	and.w	r3, r3, #12
 80016ea:	2b04      	cmp	r3, #4
 80016ec:	d002      	beq.n	80016f4 <HAL_RCC_GetSysClockFreq+0x40>
 80016ee:	2b08      	cmp	r3, #8
 80016f0:	d003      	beq.n	80016fa <HAL_RCC_GetSysClockFreq+0x46>
 80016f2:	e02d      	b.n	8001750 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80016f4:	4b1d      	ldr	r3, [pc, #116]	; (800176c <HAL_RCC_GetSysClockFreq+0xb8>)
 80016f6:	623b      	str	r3, [r7, #32]
      break;
 80016f8:	e02d      	b.n	8001756 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	0c9b      	lsrs	r3, r3, #18
 80016fe:	f003 030f 	and.w	r3, r3, #15
 8001702:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001706:	4413      	add	r3, r2
 8001708:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800170c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001714:	2b00      	cmp	r3, #0
 8001716:	d013      	beq.n	8001740 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001718:	4b13      	ldr	r3, [pc, #76]	; (8001768 <HAL_RCC_GetSysClockFreq+0xb4>)
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	0c5b      	lsrs	r3, r3, #17
 800171e:	f003 0301 	and.w	r3, r3, #1
 8001722:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001726:	4413      	add	r3, r2
 8001728:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800172c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	4a0e      	ldr	r2, [pc, #56]	; (800176c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001732:	fb02 f203 	mul.w	r2, r2, r3
 8001736:	69bb      	ldr	r3, [r7, #24]
 8001738:	fbb2 f3f3 	udiv	r3, r2, r3
 800173c:	627b      	str	r3, [r7, #36]	; 0x24
 800173e:	e004      	b.n	800174a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	4a0b      	ldr	r2, [pc, #44]	; (8001770 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001744:	fb02 f303 	mul.w	r3, r2, r3
 8001748:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800174a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800174c:	623b      	str	r3, [r7, #32]
      break;
 800174e:	e002      	b.n	8001756 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001750:	4b06      	ldr	r3, [pc, #24]	; (800176c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001752:	623b      	str	r3, [r7, #32]
      break;
 8001754:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001756:	6a3b      	ldr	r3, [r7, #32]
}
 8001758:	4618      	mov	r0, r3
 800175a:	3728      	adds	r7, #40	; 0x28
 800175c:	46bd      	mov	sp, r7
 800175e:	bc90      	pop	{r4, r7}
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	08002ad0 	.word	0x08002ad0
 8001768:	40021000 	.word	0x40021000
 800176c:	007a1200 	.word	0x007a1200
 8001770:	003d0900 	.word	0x003d0900

08001774 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001778:	4b02      	ldr	r3, [pc, #8]	; (8001784 <HAL_RCC_GetHCLKFreq+0x10>)
 800177a:	681b      	ldr	r3, [r3, #0]
}
 800177c:	4618      	mov	r0, r3
 800177e:	46bd      	mov	sp, r7
 8001780:	bc80      	pop	{r7}
 8001782:	4770      	bx	lr
 8001784:	20000000 	.word	0x20000000

08001788 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800178c:	f7ff fff2 	bl	8001774 <HAL_RCC_GetHCLKFreq>
 8001790:	4602      	mov	r2, r0
 8001792:	4b05      	ldr	r3, [pc, #20]	; (80017a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	0a1b      	lsrs	r3, r3, #8
 8001798:	f003 0307 	and.w	r3, r3, #7
 800179c:	4903      	ldr	r1, [pc, #12]	; (80017ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800179e:	5ccb      	ldrb	r3, [r1, r3]
 80017a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	40021000 	.word	0x40021000
 80017ac:	08002af0 	.word	0x08002af0

080017b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80017b4:	f7ff ffde 	bl	8001774 <HAL_RCC_GetHCLKFreq>
 80017b8:	4602      	mov	r2, r0
 80017ba:	4b05      	ldr	r3, [pc, #20]	; (80017d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	0adb      	lsrs	r3, r3, #11
 80017c0:	f003 0307 	and.w	r3, r3, #7
 80017c4:	4903      	ldr	r1, [pc, #12]	; (80017d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80017c6:	5ccb      	ldrb	r3, [r1, r3]
 80017c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	40021000 	.word	0x40021000
 80017d4:	08002af0 	.word	0x08002af0

080017d8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80017d8:	b480      	push	{r7}
 80017da:	b085      	sub	sp, #20
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80017e0:	4b0a      	ldr	r3, [pc, #40]	; (800180c <RCC_Delay+0x34>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a0a      	ldr	r2, [pc, #40]	; (8001810 <RCC_Delay+0x38>)
 80017e6:	fba2 2303 	umull	r2, r3, r2, r3
 80017ea:	0a5b      	lsrs	r3, r3, #9
 80017ec:	687a      	ldr	r2, [r7, #4]
 80017ee:	fb02 f303 	mul.w	r3, r2, r3
 80017f2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80017f4:	bf00      	nop
  }
  while (Delay --);
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	1e5a      	subs	r2, r3, #1
 80017fa:	60fa      	str	r2, [r7, #12]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d1f9      	bne.n	80017f4 <RCC_Delay+0x1c>
}
 8001800:	bf00      	nop
 8001802:	bf00      	nop
 8001804:	3714      	adds	r7, #20
 8001806:	46bd      	mov	sp, r7
 8001808:	bc80      	pop	{r7}
 800180a:	4770      	bx	lr
 800180c:	20000000 	.word	0x20000000
 8001810:	10624dd3 	.word	0x10624dd3

08001814 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d101      	bne.n	8001826 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	e03f      	b.n	80018a6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800182c:	b2db      	uxtb	r3, r3
 800182e:	2b00      	cmp	r3, #0
 8001830:	d106      	bne.n	8001840 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2200      	movs	r2, #0
 8001836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800183a:	6878      	ldr	r0, [r7, #4]
 800183c:	f7fe ffa8 	bl	8000790 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2224      	movs	r2, #36	; 0x24
 8001844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	68da      	ldr	r2, [r3, #12]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001856:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001858:	6878      	ldr	r0, [r7, #4]
 800185a:	f000 f905 	bl	8001a68 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	691a      	ldr	r2, [r3, #16]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800186c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	695a      	ldr	r2, [r3, #20]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800187c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	68da      	ldr	r2, [r3, #12]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800188c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2200      	movs	r2, #0
 8001892:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2220      	movs	r2, #32
 8001898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2220      	movs	r2, #32
 80018a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80018a4:	2300      	movs	r3, #0
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3708      	adds	r7, #8
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}

080018ae <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80018ae:	b580      	push	{r7, lr}
 80018b0:	b08a      	sub	sp, #40	; 0x28
 80018b2:	af02      	add	r7, sp, #8
 80018b4:	60f8      	str	r0, [r7, #12]
 80018b6:	60b9      	str	r1, [r7, #8]
 80018b8:	603b      	str	r3, [r7, #0]
 80018ba:	4613      	mov	r3, r2
 80018bc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80018be:	2300      	movs	r3, #0
 80018c0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	2b20      	cmp	r3, #32
 80018cc:	d17c      	bne.n	80019c8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80018ce:	68bb      	ldr	r3, [r7, #8]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d002      	beq.n	80018da <HAL_UART_Transmit+0x2c>
 80018d4:	88fb      	ldrh	r3, [r7, #6]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d101      	bne.n	80018de <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	e075      	b.n	80019ca <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d101      	bne.n	80018ec <HAL_UART_Transmit+0x3e>
 80018e8:	2302      	movs	r3, #2
 80018ea:	e06e      	b.n	80019ca <HAL_UART_Transmit+0x11c>
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	2201      	movs	r2, #1
 80018f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	2200      	movs	r2, #0
 80018f8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	2221      	movs	r2, #33	; 0x21
 80018fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001902:	f7ff f8bf 	bl	8000a84 <HAL_GetTick>
 8001906:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	88fa      	ldrh	r2, [r7, #6]
 800190c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	88fa      	ldrh	r2, [r7, #6]
 8001912:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800191c:	d108      	bne.n	8001930 <HAL_UART_Transmit+0x82>
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	691b      	ldr	r3, [r3, #16]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d104      	bne.n	8001930 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001926:	2300      	movs	r3, #0
 8001928:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800192a:	68bb      	ldr	r3, [r7, #8]
 800192c:	61bb      	str	r3, [r7, #24]
 800192e:	e003      	b.n	8001938 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001934:	2300      	movs	r3, #0
 8001936:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	2200      	movs	r2, #0
 800193c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001940:	e02a      	b.n	8001998 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	9300      	str	r3, [sp, #0]
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	2200      	movs	r2, #0
 800194a:	2180      	movs	r1, #128	; 0x80
 800194c:	68f8      	ldr	r0, [r7, #12]
 800194e:	f000 f840 	bl	80019d2 <UART_WaitOnFlagUntilTimeout>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d001      	beq.n	800195c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001958:	2303      	movs	r3, #3
 800195a:	e036      	b.n	80019ca <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800195c:	69fb      	ldr	r3, [r7, #28]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d10b      	bne.n	800197a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001962:	69bb      	ldr	r3, [r7, #24]
 8001964:	881b      	ldrh	r3, [r3, #0]
 8001966:	461a      	mov	r2, r3
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001970:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001972:	69bb      	ldr	r3, [r7, #24]
 8001974:	3302      	adds	r3, #2
 8001976:	61bb      	str	r3, [r7, #24]
 8001978:	e007      	b.n	800198a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	781a      	ldrb	r2, [r3, #0]
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001984:	69fb      	ldr	r3, [r7, #28]
 8001986:	3301      	adds	r3, #1
 8001988:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800198e:	b29b      	uxth	r3, r3
 8001990:	3b01      	subs	r3, #1
 8001992:	b29a      	uxth	r2, r3
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800199c:	b29b      	uxth	r3, r3
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d1cf      	bne.n	8001942 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	9300      	str	r3, [sp, #0]
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	2200      	movs	r2, #0
 80019aa:	2140      	movs	r1, #64	; 0x40
 80019ac:	68f8      	ldr	r0, [r7, #12]
 80019ae:	f000 f810 	bl	80019d2 <UART_WaitOnFlagUntilTimeout>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80019b8:	2303      	movs	r3, #3
 80019ba:	e006      	b.n	80019ca <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	2220      	movs	r2, #32
 80019c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80019c4:	2300      	movs	r3, #0
 80019c6:	e000      	b.n	80019ca <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80019c8:	2302      	movs	r3, #2
  }
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3720      	adds	r7, #32
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}

080019d2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80019d2:	b580      	push	{r7, lr}
 80019d4:	b084      	sub	sp, #16
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	60f8      	str	r0, [r7, #12]
 80019da:	60b9      	str	r1, [r7, #8]
 80019dc:	603b      	str	r3, [r7, #0]
 80019de:	4613      	mov	r3, r2
 80019e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80019e2:	e02c      	b.n	8001a3e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80019e4:	69bb      	ldr	r3, [r7, #24]
 80019e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80019ea:	d028      	beq.n	8001a3e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80019ec:	69bb      	ldr	r3, [r7, #24]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d007      	beq.n	8001a02 <UART_WaitOnFlagUntilTimeout+0x30>
 80019f2:	f7ff f847 	bl	8000a84 <HAL_GetTick>
 80019f6:	4602      	mov	r2, r0
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	1ad3      	subs	r3, r2, r3
 80019fc:	69ba      	ldr	r2, [r7, #24]
 80019fe:	429a      	cmp	r2, r3
 8001a00:	d21d      	bcs.n	8001a3e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	68da      	ldr	r2, [r3, #12]
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001a10:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	695a      	ldr	r2, [r3, #20]
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f022 0201 	bic.w	r2, r2, #1
 8001a20:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	2220      	movs	r2, #32
 8001a26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	2220      	movs	r2, #32
 8001a2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	2200      	movs	r2, #0
 8001a36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	e00f      	b.n	8001a5e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	4013      	ands	r3, r2
 8001a48:	68ba      	ldr	r2, [r7, #8]
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	bf0c      	ite	eq
 8001a4e:	2301      	moveq	r3, #1
 8001a50:	2300      	movne	r3, #0
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	461a      	mov	r2, r3
 8001a56:	79fb      	ldrb	r3, [r7, #7]
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d0c3      	beq.n	80019e4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001a5c:	2300      	movs	r3, #0
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3710      	adds	r7, #16
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
	...

08001a68 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b084      	sub	sp, #16
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	691b      	ldr	r3, [r3, #16]
 8001a76:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	68da      	ldr	r2, [r3, #12]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	430a      	orrs	r2, r1
 8001a84:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	689a      	ldr	r2, [r3, #8]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	691b      	ldr	r3, [r3, #16]
 8001a8e:	431a      	orrs	r2, r3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	695b      	ldr	r3, [r3, #20]
 8001a94:	4313      	orrs	r3, r2
 8001a96:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	68db      	ldr	r3, [r3, #12]
 8001a9e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001aa2:	f023 030c 	bic.w	r3, r3, #12
 8001aa6:	687a      	ldr	r2, [r7, #4]
 8001aa8:	6812      	ldr	r2, [r2, #0]
 8001aaa:	68b9      	ldr	r1, [r7, #8]
 8001aac:	430b      	orrs	r3, r1
 8001aae:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	695b      	ldr	r3, [r3, #20]
 8001ab6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	699a      	ldr	r2, [r3, #24]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	430a      	orrs	r2, r1
 8001ac4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a2c      	ldr	r2, [pc, #176]	; (8001b7c <UART_SetConfig+0x114>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d103      	bne.n	8001ad8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001ad0:	f7ff fe6e 	bl	80017b0 <HAL_RCC_GetPCLK2Freq>
 8001ad4:	60f8      	str	r0, [r7, #12]
 8001ad6:	e002      	b.n	8001ade <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001ad8:	f7ff fe56 	bl	8001788 <HAL_RCC_GetPCLK1Freq>
 8001adc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001ade:	68fa      	ldr	r2, [r7, #12]
 8001ae0:	4613      	mov	r3, r2
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	4413      	add	r3, r2
 8001ae6:	009a      	lsls	r2, r3, #2
 8001ae8:	441a      	add	r2, r3
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001af4:	4a22      	ldr	r2, [pc, #136]	; (8001b80 <UART_SetConfig+0x118>)
 8001af6:	fba2 2303 	umull	r2, r3, r2, r3
 8001afa:	095b      	lsrs	r3, r3, #5
 8001afc:	0119      	lsls	r1, r3, #4
 8001afe:	68fa      	ldr	r2, [r7, #12]
 8001b00:	4613      	mov	r3, r2
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	4413      	add	r3, r2
 8001b06:	009a      	lsls	r2, r3, #2
 8001b08:	441a      	add	r2, r3
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	fbb2 f2f3 	udiv	r2, r2, r3
 8001b14:	4b1a      	ldr	r3, [pc, #104]	; (8001b80 <UART_SetConfig+0x118>)
 8001b16:	fba3 0302 	umull	r0, r3, r3, r2
 8001b1a:	095b      	lsrs	r3, r3, #5
 8001b1c:	2064      	movs	r0, #100	; 0x64
 8001b1e:	fb00 f303 	mul.w	r3, r0, r3
 8001b22:	1ad3      	subs	r3, r2, r3
 8001b24:	011b      	lsls	r3, r3, #4
 8001b26:	3332      	adds	r3, #50	; 0x32
 8001b28:	4a15      	ldr	r2, [pc, #84]	; (8001b80 <UART_SetConfig+0x118>)
 8001b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b2e:	095b      	lsrs	r3, r3, #5
 8001b30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b34:	4419      	add	r1, r3
 8001b36:	68fa      	ldr	r2, [r7, #12]
 8001b38:	4613      	mov	r3, r2
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	4413      	add	r3, r2
 8001b3e:	009a      	lsls	r2, r3, #2
 8001b40:	441a      	add	r2, r3
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	fbb2 f2f3 	udiv	r2, r2, r3
 8001b4c:	4b0c      	ldr	r3, [pc, #48]	; (8001b80 <UART_SetConfig+0x118>)
 8001b4e:	fba3 0302 	umull	r0, r3, r3, r2
 8001b52:	095b      	lsrs	r3, r3, #5
 8001b54:	2064      	movs	r0, #100	; 0x64
 8001b56:	fb00 f303 	mul.w	r3, r0, r3
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	011b      	lsls	r3, r3, #4
 8001b5e:	3332      	adds	r3, #50	; 0x32
 8001b60:	4a07      	ldr	r2, [pc, #28]	; (8001b80 <UART_SetConfig+0x118>)
 8001b62:	fba2 2303 	umull	r2, r3, r2, r3
 8001b66:	095b      	lsrs	r3, r3, #5
 8001b68:	f003 020f 	and.w	r2, r3, #15
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	440a      	add	r2, r1
 8001b72:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001b74:	bf00      	nop
 8001b76:	3710      	adds	r7, #16
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	40013800 	.word	0x40013800
 8001b80:	51eb851f 	.word	0x51eb851f

08001b84 <__errno>:
 8001b84:	4b01      	ldr	r3, [pc, #4]	; (8001b8c <__errno+0x8>)
 8001b86:	6818      	ldr	r0, [r3, #0]
 8001b88:	4770      	bx	lr
 8001b8a:	bf00      	nop
 8001b8c:	2000000c 	.word	0x2000000c

08001b90 <__libc_init_array>:
 8001b90:	b570      	push	{r4, r5, r6, lr}
 8001b92:	2600      	movs	r6, #0
 8001b94:	4d0c      	ldr	r5, [pc, #48]	; (8001bc8 <__libc_init_array+0x38>)
 8001b96:	4c0d      	ldr	r4, [pc, #52]	; (8001bcc <__libc_init_array+0x3c>)
 8001b98:	1b64      	subs	r4, r4, r5
 8001b9a:	10a4      	asrs	r4, r4, #2
 8001b9c:	42a6      	cmp	r6, r4
 8001b9e:	d109      	bne.n	8001bb4 <__libc_init_array+0x24>
 8001ba0:	f000 ff82 	bl	8002aa8 <_init>
 8001ba4:	2600      	movs	r6, #0
 8001ba6:	4d0a      	ldr	r5, [pc, #40]	; (8001bd0 <__libc_init_array+0x40>)
 8001ba8:	4c0a      	ldr	r4, [pc, #40]	; (8001bd4 <__libc_init_array+0x44>)
 8001baa:	1b64      	subs	r4, r4, r5
 8001bac:	10a4      	asrs	r4, r4, #2
 8001bae:	42a6      	cmp	r6, r4
 8001bb0:	d105      	bne.n	8001bbe <__libc_init_array+0x2e>
 8001bb2:	bd70      	pop	{r4, r5, r6, pc}
 8001bb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8001bb8:	4798      	blx	r3
 8001bba:	3601      	adds	r6, #1
 8001bbc:	e7ee      	b.n	8001b9c <__libc_init_array+0xc>
 8001bbe:	f855 3b04 	ldr.w	r3, [r5], #4
 8001bc2:	4798      	blx	r3
 8001bc4:	3601      	adds	r6, #1
 8001bc6:	e7f2      	b.n	8001bae <__libc_init_array+0x1e>
 8001bc8:	08002b90 	.word	0x08002b90
 8001bcc:	08002b90 	.word	0x08002b90
 8001bd0:	08002b90 	.word	0x08002b90
 8001bd4:	08002b94 	.word	0x08002b94

08001bd8 <memset>:
 8001bd8:	4603      	mov	r3, r0
 8001bda:	4402      	add	r2, r0
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d100      	bne.n	8001be2 <memset+0xa>
 8001be0:	4770      	bx	lr
 8001be2:	f803 1b01 	strb.w	r1, [r3], #1
 8001be6:	e7f9      	b.n	8001bdc <memset+0x4>

08001be8 <iprintf>:
 8001be8:	b40f      	push	{r0, r1, r2, r3}
 8001bea:	4b0a      	ldr	r3, [pc, #40]	; (8001c14 <iprintf+0x2c>)
 8001bec:	b513      	push	{r0, r1, r4, lr}
 8001bee:	681c      	ldr	r4, [r3, #0]
 8001bf0:	b124      	cbz	r4, 8001bfc <iprintf+0x14>
 8001bf2:	69a3      	ldr	r3, [r4, #24]
 8001bf4:	b913      	cbnz	r3, 8001bfc <iprintf+0x14>
 8001bf6:	4620      	mov	r0, r4
 8001bf8:	f000 f866 	bl	8001cc8 <__sinit>
 8001bfc:	ab05      	add	r3, sp, #20
 8001bfe:	4620      	mov	r0, r4
 8001c00:	9a04      	ldr	r2, [sp, #16]
 8001c02:	68a1      	ldr	r1, [r4, #8]
 8001c04:	9301      	str	r3, [sp, #4]
 8001c06:	f000 f981 	bl	8001f0c <_vfiprintf_r>
 8001c0a:	b002      	add	sp, #8
 8001c0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001c10:	b004      	add	sp, #16
 8001c12:	4770      	bx	lr
 8001c14:	2000000c 	.word	0x2000000c

08001c18 <std>:
 8001c18:	2300      	movs	r3, #0
 8001c1a:	b510      	push	{r4, lr}
 8001c1c:	4604      	mov	r4, r0
 8001c1e:	e9c0 3300 	strd	r3, r3, [r0]
 8001c22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001c26:	6083      	str	r3, [r0, #8]
 8001c28:	8181      	strh	r1, [r0, #12]
 8001c2a:	6643      	str	r3, [r0, #100]	; 0x64
 8001c2c:	81c2      	strh	r2, [r0, #14]
 8001c2e:	6183      	str	r3, [r0, #24]
 8001c30:	4619      	mov	r1, r3
 8001c32:	2208      	movs	r2, #8
 8001c34:	305c      	adds	r0, #92	; 0x5c
 8001c36:	f7ff ffcf 	bl	8001bd8 <memset>
 8001c3a:	4b05      	ldr	r3, [pc, #20]	; (8001c50 <std+0x38>)
 8001c3c:	6224      	str	r4, [r4, #32]
 8001c3e:	6263      	str	r3, [r4, #36]	; 0x24
 8001c40:	4b04      	ldr	r3, [pc, #16]	; (8001c54 <std+0x3c>)
 8001c42:	62a3      	str	r3, [r4, #40]	; 0x28
 8001c44:	4b04      	ldr	r3, [pc, #16]	; (8001c58 <std+0x40>)
 8001c46:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001c48:	4b04      	ldr	r3, [pc, #16]	; (8001c5c <std+0x44>)
 8001c4a:	6323      	str	r3, [r4, #48]	; 0x30
 8001c4c:	bd10      	pop	{r4, pc}
 8001c4e:	bf00      	nop
 8001c50:	080024b9 	.word	0x080024b9
 8001c54:	080024db 	.word	0x080024db
 8001c58:	08002513 	.word	0x08002513
 8001c5c:	08002537 	.word	0x08002537

08001c60 <_cleanup_r>:
 8001c60:	4901      	ldr	r1, [pc, #4]	; (8001c68 <_cleanup_r+0x8>)
 8001c62:	f000 b8af 	b.w	8001dc4 <_fwalk_reent>
 8001c66:	bf00      	nop
 8001c68:	08002811 	.word	0x08002811

08001c6c <__sfmoreglue>:
 8001c6c:	b570      	push	{r4, r5, r6, lr}
 8001c6e:	2568      	movs	r5, #104	; 0x68
 8001c70:	1e4a      	subs	r2, r1, #1
 8001c72:	4355      	muls	r5, r2
 8001c74:	460e      	mov	r6, r1
 8001c76:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001c7a:	f000 f8c5 	bl	8001e08 <_malloc_r>
 8001c7e:	4604      	mov	r4, r0
 8001c80:	b140      	cbz	r0, 8001c94 <__sfmoreglue+0x28>
 8001c82:	2100      	movs	r1, #0
 8001c84:	e9c0 1600 	strd	r1, r6, [r0]
 8001c88:	300c      	adds	r0, #12
 8001c8a:	60a0      	str	r0, [r4, #8]
 8001c8c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001c90:	f7ff ffa2 	bl	8001bd8 <memset>
 8001c94:	4620      	mov	r0, r4
 8001c96:	bd70      	pop	{r4, r5, r6, pc}

08001c98 <__sfp_lock_acquire>:
 8001c98:	4801      	ldr	r0, [pc, #4]	; (8001ca0 <__sfp_lock_acquire+0x8>)
 8001c9a:	f000 b8b3 	b.w	8001e04 <__retarget_lock_acquire_recursive>
 8001c9e:	bf00      	nop
 8001ca0:	200000e8 	.word	0x200000e8

08001ca4 <__sfp_lock_release>:
 8001ca4:	4801      	ldr	r0, [pc, #4]	; (8001cac <__sfp_lock_release+0x8>)
 8001ca6:	f000 b8ae 	b.w	8001e06 <__retarget_lock_release_recursive>
 8001caa:	bf00      	nop
 8001cac:	200000e8 	.word	0x200000e8

08001cb0 <__sinit_lock_acquire>:
 8001cb0:	4801      	ldr	r0, [pc, #4]	; (8001cb8 <__sinit_lock_acquire+0x8>)
 8001cb2:	f000 b8a7 	b.w	8001e04 <__retarget_lock_acquire_recursive>
 8001cb6:	bf00      	nop
 8001cb8:	200000e3 	.word	0x200000e3

08001cbc <__sinit_lock_release>:
 8001cbc:	4801      	ldr	r0, [pc, #4]	; (8001cc4 <__sinit_lock_release+0x8>)
 8001cbe:	f000 b8a2 	b.w	8001e06 <__retarget_lock_release_recursive>
 8001cc2:	bf00      	nop
 8001cc4:	200000e3 	.word	0x200000e3

08001cc8 <__sinit>:
 8001cc8:	b510      	push	{r4, lr}
 8001cca:	4604      	mov	r4, r0
 8001ccc:	f7ff fff0 	bl	8001cb0 <__sinit_lock_acquire>
 8001cd0:	69a3      	ldr	r3, [r4, #24]
 8001cd2:	b11b      	cbz	r3, 8001cdc <__sinit+0x14>
 8001cd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001cd8:	f7ff bff0 	b.w	8001cbc <__sinit_lock_release>
 8001cdc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001ce0:	6523      	str	r3, [r4, #80]	; 0x50
 8001ce2:	4b13      	ldr	r3, [pc, #76]	; (8001d30 <__sinit+0x68>)
 8001ce4:	4a13      	ldr	r2, [pc, #76]	; (8001d34 <__sinit+0x6c>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	62a2      	str	r2, [r4, #40]	; 0x28
 8001cea:	42a3      	cmp	r3, r4
 8001cec:	bf08      	it	eq
 8001cee:	2301      	moveq	r3, #1
 8001cf0:	4620      	mov	r0, r4
 8001cf2:	bf08      	it	eq
 8001cf4:	61a3      	streq	r3, [r4, #24]
 8001cf6:	f000 f81f 	bl	8001d38 <__sfp>
 8001cfa:	6060      	str	r0, [r4, #4]
 8001cfc:	4620      	mov	r0, r4
 8001cfe:	f000 f81b 	bl	8001d38 <__sfp>
 8001d02:	60a0      	str	r0, [r4, #8]
 8001d04:	4620      	mov	r0, r4
 8001d06:	f000 f817 	bl	8001d38 <__sfp>
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	2104      	movs	r1, #4
 8001d0e:	60e0      	str	r0, [r4, #12]
 8001d10:	6860      	ldr	r0, [r4, #4]
 8001d12:	f7ff ff81 	bl	8001c18 <std>
 8001d16:	2201      	movs	r2, #1
 8001d18:	2109      	movs	r1, #9
 8001d1a:	68a0      	ldr	r0, [r4, #8]
 8001d1c:	f7ff ff7c 	bl	8001c18 <std>
 8001d20:	2202      	movs	r2, #2
 8001d22:	2112      	movs	r1, #18
 8001d24:	68e0      	ldr	r0, [r4, #12]
 8001d26:	f7ff ff77 	bl	8001c18 <std>
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	61a3      	str	r3, [r4, #24]
 8001d2e:	e7d1      	b.n	8001cd4 <__sinit+0xc>
 8001d30:	08002af8 	.word	0x08002af8
 8001d34:	08001c61 	.word	0x08001c61

08001d38 <__sfp>:
 8001d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d3a:	4607      	mov	r7, r0
 8001d3c:	f7ff ffac 	bl	8001c98 <__sfp_lock_acquire>
 8001d40:	4b1e      	ldr	r3, [pc, #120]	; (8001dbc <__sfp+0x84>)
 8001d42:	681e      	ldr	r6, [r3, #0]
 8001d44:	69b3      	ldr	r3, [r6, #24]
 8001d46:	b913      	cbnz	r3, 8001d4e <__sfp+0x16>
 8001d48:	4630      	mov	r0, r6
 8001d4a:	f7ff ffbd 	bl	8001cc8 <__sinit>
 8001d4e:	3648      	adds	r6, #72	; 0x48
 8001d50:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001d54:	3b01      	subs	r3, #1
 8001d56:	d503      	bpl.n	8001d60 <__sfp+0x28>
 8001d58:	6833      	ldr	r3, [r6, #0]
 8001d5a:	b30b      	cbz	r3, 8001da0 <__sfp+0x68>
 8001d5c:	6836      	ldr	r6, [r6, #0]
 8001d5e:	e7f7      	b.n	8001d50 <__sfp+0x18>
 8001d60:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001d64:	b9d5      	cbnz	r5, 8001d9c <__sfp+0x64>
 8001d66:	4b16      	ldr	r3, [pc, #88]	; (8001dc0 <__sfp+0x88>)
 8001d68:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001d6c:	60e3      	str	r3, [r4, #12]
 8001d6e:	6665      	str	r5, [r4, #100]	; 0x64
 8001d70:	f000 f847 	bl	8001e02 <__retarget_lock_init_recursive>
 8001d74:	f7ff ff96 	bl	8001ca4 <__sfp_lock_release>
 8001d78:	2208      	movs	r2, #8
 8001d7a:	4629      	mov	r1, r5
 8001d7c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001d80:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001d84:	6025      	str	r5, [r4, #0]
 8001d86:	61a5      	str	r5, [r4, #24]
 8001d88:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001d8c:	f7ff ff24 	bl	8001bd8 <memset>
 8001d90:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001d94:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001d98:	4620      	mov	r0, r4
 8001d9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001d9c:	3468      	adds	r4, #104	; 0x68
 8001d9e:	e7d9      	b.n	8001d54 <__sfp+0x1c>
 8001da0:	2104      	movs	r1, #4
 8001da2:	4638      	mov	r0, r7
 8001da4:	f7ff ff62 	bl	8001c6c <__sfmoreglue>
 8001da8:	4604      	mov	r4, r0
 8001daa:	6030      	str	r0, [r6, #0]
 8001dac:	2800      	cmp	r0, #0
 8001dae:	d1d5      	bne.n	8001d5c <__sfp+0x24>
 8001db0:	f7ff ff78 	bl	8001ca4 <__sfp_lock_release>
 8001db4:	230c      	movs	r3, #12
 8001db6:	603b      	str	r3, [r7, #0]
 8001db8:	e7ee      	b.n	8001d98 <__sfp+0x60>
 8001dba:	bf00      	nop
 8001dbc:	08002af8 	.word	0x08002af8
 8001dc0:	ffff0001 	.word	0xffff0001

08001dc4 <_fwalk_reent>:
 8001dc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001dc8:	4606      	mov	r6, r0
 8001dca:	4688      	mov	r8, r1
 8001dcc:	2700      	movs	r7, #0
 8001dce:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001dd2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001dd6:	f1b9 0901 	subs.w	r9, r9, #1
 8001dda:	d505      	bpl.n	8001de8 <_fwalk_reent+0x24>
 8001ddc:	6824      	ldr	r4, [r4, #0]
 8001dde:	2c00      	cmp	r4, #0
 8001de0:	d1f7      	bne.n	8001dd2 <_fwalk_reent+0xe>
 8001de2:	4638      	mov	r0, r7
 8001de4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001de8:	89ab      	ldrh	r3, [r5, #12]
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d907      	bls.n	8001dfe <_fwalk_reent+0x3a>
 8001dee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001df2:	3301      	adds	r3, #1
 8001df4:	d003      	beq.n	8001dfe <_fwalk_reent+0x3a>
 8001df6:	4629      	mov	r1, r5
 8001df8:	4630      	mov	r0, r6
 8001dfa:	47c0      	blx	r8
 8001dfc:	4307      	orrs	r7, r0
 8001dfe:	3568      	adds	r5, #104	; 0x68
 8001e00:	e7e9      	b.n	8001dd6 <_fwalk_reent+0x12>

08001e02 <__retarget_lock_init_recursive>:
 8001e02:	4770      	bx	lr

08001e04 <__retarget_lock_acquire_recursive>:
 8001e04:	4770      	bx	lr

08001e06 <__retarget_lock_release_recursive>:
 8001e06:	4770      	bx	lr

08001e08 <_malloc_r>:
 8001e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e0a:	1ccd      	adds	r5, r1, #3
 8001e0c:	f025 0503 	bic.w	r5, r5, #3
 8001e10:	3508      	adds	r5, #8
 8001e12:	2d0c      	cmp	r5, #12
 8001e14:	bf38      	it	cc
 8001e16:	250c      	movcc	r5, #12
 8001e18:	2d00      	cmp	r5, #0
 8001e1a:	4606      	mov	r6, r0
 8001e1c:	db01      	blt.n	8001e22 <_malloc_r+0x1a>
 8001e1e:	42a9      	cmp	r1, r5
 8001e20:	d903      	bls.n	8001e2a <_malloc_r+0x22>
 8001e22:	230c      	movs	r3, #12
 8001e24:	6033      	str	r3, [r6, #0]
 8001e26:	2000      	movs	r0, #0
 8001e28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001e2a:	f000 fdb1 	bl	8002990 <__malloc_lock>
 8001e2e:	4921      	ldr	r1, [pc, #132]	; (8001eb4 <_malloc_r+0xac>)
 8001e30:	680a      	ldr	r2, [r1, #0]
 8001e32:	4614      	mov	r4, r2
 8001e34:	b99c      	cbnz	r4, 8001e5e <_malloc_r+0x56>
 8001e36:	4f20      	ldr	r7, [pc, #128]	; (8001eb8 <_malloc_r+0xb0>)
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	b923      	cbnz	r3, 8001e46 <_malloc_r+0x3e>
 8001e3c:	4621      	mov	r1, r4
 8001e3e:	4630      	mov	r0, r6
 8001e40:	f000 fb2a 	bl	8002498 <_sbrk_r>
 8001e44:	6038      	str	r0, [r7, #0]
 8001e46:	4629      	mov	r1, r5
 8001e48:	4630      	mov	r0, r6
 8001e4a:	f000 fb25 	bl	8002498 <_sbrk_r>
 8001e4e:	1c43      	adds	r3, r0, #1
 8001e50:	d123      	bne.n	8001e9a <_malloc_r+0x92>
 8001e52:	230c      	movs	r3, #12
 8001e54:	4630      	mov	r0, r6
 8001e56:	6033      	str	r3, [r6, #0]
 8001e58:	f000 fda0 	bl	800299c <__malloc_unlock>
 8001e5c:	e7e3      	b.n	8001e26 <_malloc_r+0x1e>
 8001e5e:	6823      	ldr	r3, [r4, #0]
 8001e60:	1b5b      	subs	r3, r3, r5
 8001e62:	d417      	bmi.n	8001e94 <_malloc_r+0x8c>
 8001e64:	2b0b      	cmp	r3, #11
 8001e66:	d903      	bls.n	8001e70 <_malloc_r+0x68>
 8001e68:	6023      	str	r3, [r4, #0]
 8001e6a:	441c      	add	r4, r3
 8001e6c:	6025      	str	r5, [r4, #0]
 8001e6e:	e004      	b.n	8001e7a <_malloc_r+0x72>
 8001e70:	6863      	ldr	r3, [r4, #4]
 8001e72:	42a2      	cmp	r2, r4
 8001e74:	bf0c      	ite	eq
 8001e76:	600b      	streq	r3, [r1, #0]
 8001e78:	6053      	strne	r3, [r2, #4]
 8001e7a:	4630      	mov	r0, r6
 8001e7c:	f000 fd8e 	bl	800299c <__malloc_unlock>
 8001e80:	f104 000b 	add.w	r0, r4, #11
 8001e84:	1d23      	adds	r3, r4, #4
 8001e86:	f020 0007 	bic.w	r0, r0, #7
 8001e8a:	1ac2      	subs	r2, r0, r3
 8001e8c:	d0cc      	beq.n	8001e28 <_malloc_r+0x20>
 8001e8e:	1a1b      	subs	r3, r3, r0
 8001e90:	50a3      	str	r3, [r4, r2]
 8001e92:	e7c9      	b.n	8001e28 <_malloc_r+0x20>
 8001e94:	4622      	mov	r2, r4
 8001e96:	6864      	ldr	r4, [r4, #4]
 8001e98:	e7cc      	b.n	8001e34 <_malloc_r+0x2c>
 8001e9a:	1cc4      	adds	r4, r0, #3
 8001e9c:	f024 0403 	bic.w	r4, r4, #3
 8001ea0:	42a0      	cmp	r0, r4
 8001ea2:	d0e3      	beq.n	8001e6c <_malloc_r+0x64>
 8001ea4:	1a21      	subs	r1, r4, r0
 8001ea6:	4630      	mov	r0, r6
 8001ea8:	f000 faf6 	bl	8002498 <_sbrk_r>
 8001eac:	3001      	adds	r0, #1
 8001eae:	d1dd      	bne.n	8001e6c <_malloc_r+0x64>
 8001eb0:	e7cf      	b.n	8001e52 <_malloc_r+0x4a>
 8001eb2:	bf00      	nop
 8001eb4:	20000090 	.word	0x20000090
 8001eb8:	20000094 	.word	0x20000094

08001ebc <__sfputc_r>:
 8001ebc:	6893      	ldr	r3, [r2, #8]
 8001ebe:	b410      	push	{r4}
 8001ec0:	3b01      	subs	r3, #1
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	6093      	str	r3, [r2, #8]
 8001ec6:	da07      	bge.n	8001ed8 <__sfputc_r+0x1c>
 8001ec8:	6994      	ldr	r4, [r2, #24]
 8001eca:	42a3      	cmp	r3, r4
 8001ecc:	db01      	blt.n	8001ed2 <__sfputc_r+0x16>
 8001ece:	290a      	cmp	r1, #10
 8001ed0:	d102      	bne.n	8001ed8 <__sfputc_r+0x1c>
 8001ed2:	bc10      	pop	{r4}
 8001ed4:	f000 bb34 	b.w	8002540 <__swbuf_r>
 8001ed8:	6813      	ldr	r3, [r2, #0]
 8001eda:	1c58      	adds	r0, r3, #1
 8001edc:	6010      	str	r0, [r2, #0]
 8001ede:	7019      	strb	r1, [r3, #0]
 8001ee0:	4608      	mov	r0, r1
 8001ee2:	bc10      	pop	{r4}
 8001ee4:	4770      	bx	lr

08001ee6 <__sfputs_r>:
 8001ee6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ee8:	4606      	mov	r6, r0
 8001eea:	460f      	mov	r7, r1
 8001eec:	4614      	mov	r4, r2
 8001eee:	18d5      	adds	r5, r2, r3
 8001ef0:	42ac      	cmp	r4, r5
 8001ef2:	d101      	bne.n	8001ef8 <__sfputs_r+0x12>
 8001ef4:	2000      	movs	r0, #0
 8001ef6:	e007      	b.n	8001f08 <__sfputs_r+0x22>
 8001ef8:	463a      	mov	r2, r7
 8001efa:	4630      	mov	r0, r6
 8001efc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001f00:	f7ff ffdc 	bl	8001ebc <__sfputc_r>
 8001f04:	1c43      	adds	r3, r0, #1
 8001f06:	d1f3      	bne.n	8001ef0 <__sfputs_r+0xa>
 8001f08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001f0c <_vfiprintf_r>:
 8001f0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f10:	460d      	mov	r5, r1
 8001f12:	4614      	mov	r4, r2
 8001f14:	4698      	mov	r8, r3
 8001f16:	4606      	mov	r6, r0
 8001f18:	b09d      	sub	sp, #116	; 0x74
 8001f1a:	b118      	cbz	r0, 8001f24 <_vfiprintf_r+0x18>
 8001f1c:	6983      	ldr	r3, [r0, #24]
 8001f1e:	b90b      	cbnz	r3, 8001f24 <_vfiprintf_r+0x18>
 8001f20:	f7ff fed2 	bl	8001cc8 <__sinit>
 8001f24:	4b89      	ldr	r3, [pc, #548]	; (800214c <_vfiprintf_r+0x240>)
 8001f26:	429d      	cmp	r5, r3
 8001f28:	d11b      	bne.n	8001f62 <_vfiprintf_r+0x56>
 8001f2a:	6875      	ldr	r5, [r6, #4]
 8001f2c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001f2e:	07d9      	lsls	r1, r3, #31
 8001f30:	d405      	bmi.n	8001f3e <_vfiprintf_r+0x32>
 8001f32:	89ab      	ldrh	r3, [r5, #12]
 8001f34:	059a      	lsls	r2, r3, #22
 8001f36:	d402      	bmi.n	8001f3e <_vfiprintf_r+0x32>
 8001f38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001f3a:	f7ff ff63 	bl	8001e04 <__retarget_lock_acquire_recursive>
 8001f3e:	89ab      	ldrh	r3, [r5, #12]
 8001f40:	071b      	lsls	r3, r3, #28
 8001f42:	d501      	bpl.n	8001f48 <_vfiprintf_r+0x3c>
 8001f44:	692b      	ldr	r3, [r5, #16]
 8001f46:	b9eb      	cbnz	r3, 8001f84 <_vfiprintf_r+0x78>
 8001f48:	4629      	mov	r1, r5
 8001f4a:	4630      	mov	r0, r6
 8001f4c:	f000 fb5c 	bl	8002608 <__swsetup_r>
 8001f50:	b1c0      	cbz	r0, 8001f84 <_vfiprintf_r+0x78>
 8001f52:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001f54:	07dc      	lsls	r4, r3, #31
 8001f56:	d50e      	bpl.n	8001f76 <_vfiprintf_r+0x6a>
 8001f58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f5c:	b01d      	add	sp, #116	; 0x74
 8001f5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001f62:	4b7b      	ldr	r3, [pc, #492]	; (8002150 <_vfiprintf_r+0x244>)
 8001f64:	429d      	cmp	r5, r3
 8001f66:	d101      	bne.n	8001f6c <_vfiprintf_r+0x60>
 8001f68:	68b5      	ldr	r5, [r6, #8]
 8001f6a:	e7df      	b.n	8001f2c <_vfiprintf_r+0x20>
 8001f6c:	4b79      	ldr	r3, [pc, #484]	; (8002154 <_vfiprintf_r+0x248>)
 8001f6e:	429d      	cmp	r5, r3
 8001f70:	bf08      	it	eq
 8001f72:	68f5      	ldreq	r5, [r6, #12]
 8001f74:	e7da      	b.n	8001f2c <_vfiprintf_r+0x20>
 8001f76:	89ab      	ldrh	r3, [r5, #12]
 8001f78:	0598      	lsls	r0, r3, #22
 8001f7a:	d4ed      	bmi.n	8001f58 <_vfiprintf_r+0x4c>
 8001f7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001f7e:	f7ff ff42 	bl	8001e06 <__retarget_lock_release_recursive>
 8001f82:	e7e9      	b.n	8001f58 <_vfiprintf_r+0x4c>
 8001f84:	2300      	movs	r3, #0
 8001f86:	9309      	str	r3, [sp, #36]	; 0x24
 8001f88:	2320      	movs	r3, #32
 8001f8a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001f8e:	2330      	movs	r3, #48	; 0x30
 8001f90:	f04f 0901 	mov.w	r9, #1
 8001f94:	f8cd 800c 	str.w	r8, [sp, #12]
 8001f98:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8002158 <_vfiprintf_r+0x24c>
 8001f9c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001fa0:	4623      	mov	r3, r4
 8001fa2:	469a      	mov	sl, r3
 8001fa4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001fa8:	b10a      	cbz	r2, 8001fae <_vfiprintf_r+0xa2>
 8001faa:	2a25      	cmp	r2, #37	; 0x25
 8001fac:	d1f9      	bne.n	8001fa2 <_vfiprintf_r+0x96>
 8001fae:	ebba 0b04 	subs.w	fp, sl, r4
 8001fb2:	d00b      	beq.n	8001fcc <_vfiprintf_r+0xc0>
 8001fb4:	465b      	mov	r3, fp
 8001fb6:	4622      	mov	r2, r4
 8001fb8:	4629      	mov	r1, r5
 8001fba:	4630      	mov	r0, r6
 8001fbc:	f7ff ff93 	bl	8001ee6 <__sfputs_r>
 8001fc0:	3001      	adds	r0, #1
 8001fc2:	f000 80aa 	beq.w	800211a <_vfiprintf_r+0x20e>
 8001fc6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001fc8:	445a      	add	r2, fp
 8001fca:	9209      	str	r2, [sp, #36]	; 0x24
 8001fcc:	f89a 3000 	ldrb.w	r3, [sl]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	f000 80a2 	beq.w	800211a <_vfiprintf_r+0x20e>
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001fdc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001fe0:	f10a 0a01 	add.w	sl, sl, #1
 8001fe4:	9304      	str	r3, [sp, #16]
 8001fe6:	9307      	str	r3, [sp, #28]
 8001fe8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001fec:	931a      	str	r3, [sp, #104]	; 0x68
 8001fee:	4654      	mov	r4, sl
 8001ff0:	2205      	movs	r2, #5
 8001ff2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001ff6:	4858      	ldr	r0, [pc, #352]	; (8002158 <_vfiprintf_r+0x24c>)
 8001ff8:	f000 fcbc 	bl	8002974 <memchr>
 8001ffc:	9a04      	ldr	r2, [sp, #16]
 8001ffe:	b9d8      	cbnz	r0, 8002038 <_vfiprintf_r+0x12c>
 8002000:	06d1      	lsls	r1, r2, #27
 8002002:	bf44      	itt	mi
 8002004:	2320      	movmi	r3, #32
 8002006:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800200a:	0713      	lsls	r3, r2, #28
 800200c:	bf44      	itt	mi
 800200e:	232b      	movmi	r3, #43	; 0x2b
 8002010:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002014:	f89a 3000 	ldrb.w	r3, [sl]
 8002018:	2b2a      	cmp	r3, #42	; 0x2a
 800201a:	d015      	beq.n	8002048 <_vfiprintf_r+0x13c>
 800201c:	4654      	mov	r4, sl
 800201e:	2000      	movs	r0, #0
 8002020:	f04f 0c0a 	mov.w	ip, #10
 8002024:	9a07      	ldr	r2, [sp, #28]
 8002026:	4621      	mov	r1, r4
 8002028:	f811 3b01 	ldrb.w	r3, [r1], #1
 800202c:	3b30      	subs	r3, #48	; 0x30
 800202e:	2b09      	cmp	r3, #9
 8002030:	d94e      	bls.n	80020d0 <_vfiprintf_r+0x1c4>
 8002032:	b1b0      	cbz	r0, 8002062 <_vfiprintf_r+0x156>
 8002034:	9207      	str	r2, [sp, #28]
 8002036:	e014      	b.n	8002062 <_vfiprintf_r+0x156>
 8002038:	eba0 0308 	sub.w	r3, r0, r8
 800203c:	fa09 f303 	lsl.w	r3, r9, r3
 8002040:	4313      	orrs	r3, r2
 8002042:	46a2      	mov	sl, r4
 8002044:	9304      	str	r3, [sp, #16]
 8002046:	e7d2      	b.n	8001fee <_vfiprintf_r+0xe2>
 8002048:	9b03      	ldr	r3, [sp, #12]
 800204a:	1d19      	adds	r1, r3, #4
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	9103      	str	r1, [sp, #12]
 8002050:	2b00      	cmp	r3, #0
 8002052:	bfbb      	ittet	lt
 8002054:	425b      	neglt	r3, r3
 8002056:	f042 0202 	orrlt.w	r2, r2, #2
 800205a:	9307      	strge	r3, [sp, #28]
 800205c:	9307      	strlt	r3, [sp, #28]
 800205e:	bfb8      	it	lt
 8002060:	9204      	strlt	r2, [sp, #16]
 8002062:	7823      	ldrb	r3, [r4, #0]
 8002064:	2b2e      	cmp	r3, #46	; 0x2e
 8002066:	d10c      	bne.n	8002082 <_vfiprintf_r+0x176>
 8002068:	7863      	ldrb	r3, [r4, #1]
 800206a:	2b2a      	cmp	r3, #42	; 0x2a
 800206c:	d135      	bne.n	80020da <_vfiprintf_r+0x1ce>
 800206e:	9b03      	ldr	r3, [sp, #12]
 8002070:	3402      	adds	r4, #2
 8002072:	1d1a      	adds	r2, r3, #4
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	9203      	str	r2, [sp, #12]
 8002078:	2b00      	cmp	r3, #0
 800207a:	bfb8      	it	lt
 800207c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002080:	9305      	str	r3, [sp, #20]
 8002082:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8002168 <_vfiprintf_r+0x25c>
 8002086:	2203      	movs	r2, #3
 8002088:	4650      	mov	r0, sl
 800208a:	7821      	ldrb	r1, [r4, #0]
 800208c:	f000 fc72 	bl	8002974 <memchr>
 8002090:	b140      	cbz	r0, 80020a4 <_vfiprintf_r+0x198>
 8002092:	2340      	movs	r3, #64	; 0x40
 8002094:	eba0 000a 	sub.w	r0, r0, sl
 8002098:	fa03 f000 	lsl.w	r0, r3, r0
 800209c:	9b04      	ldr	r3, [sp, #16]
 800209e:	3401      	adds	r4, #1
 80020a0:	4303      	orrs	r3, r0
 80020a2:	9304      	str	r3, [sp, #16]
 80020a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80020a8:	2206      	movs	r2, #6
 80020aa:	482c      	ldr	r0, [pc, #176]	; (800215c <_vfiprintf_r+0x250>)
 80020ac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80020b0:	f000 fc60 	bl	8002974 <memchr>
 80020b4:	2800      	cmp	r0, #0
 80020b6:	d03f      	beq.n	8002138 <_vfiprintf_r+0x22c>
 80020b8:	4b29      	ldr	r3, [pc, #164]	; (8002160 <_vfiprintf_r+0x254>)
 80020ba:	bb1b      	cbnz	r3, 8002104 <_vfiprintf_r+0x1f8>
 80020bc:	9b03      	ldr	r3, [sp, #12]
 80020be:	3307      	adds	r3, #7
 80020c0:	f023 0307 	bic.w	r3, r3, #7
 80020c4:	3308      	adds	r3, #8
 80020c6:	9303      	str	r3, [sp, #12]
 80020c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80020ca:	443b      	add	r3, r7
 80020cc:	9309      	str	r3, [sp, #36]	; 0x24
 80020ce:	e767      	b.n	8001fa0 <_vfiprintf_r+0x94>
 80020d0:	460c      	mov	r4, r1
 80020d2:	2001      	movs	r0, #1
 80020d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80020d8:	e7a5      	b.n	8002026 <_vfiprintf_r+0x11a>
 80020da:	2300      	movs	r3, #0
 80020dc:	f04f 0c0a 	mov.w	ip, #10
 80020e0:	4619      	mov	r1, r3
 80020e2:	3401      	adds	r4, #1
 80020e4:	9305      	str	r3, [sp, #20]
 80020e6:	4620      	mov	r0, r4
 80020e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80020ec:	3a30      	subs	r2, #48	; 0x30
 80020ee:	2a09      	cmp	r2, #9
 80020f0:	d903      	bls.n	80020fa <_vfiprintf_r+0x1ee>
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d0c5      	beq.n	8002082 <_vfiprintf_r+0x176>
 80020f6:	9105      	str	r1, [sp, #20]
 80020f8:	e7c3      	b.n	8002082 <_vfiprintf_r+0x176>
 80020fa:	4604      	mov	r4, r0
 80020fc:	2301      	movs	r3, #1
 80020fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8002102:	e7f0      	b.n	80020e6 <_vfiprintf_r+0x1da>
 8002104:	ab03      	add	r3, sp, #12
 8002106:	9300      	str	r3, [sp, #0]
 8002108:	462a      	mov	r2, r5
 800210a:	4630      	mov	r0, r6
 800210c:	4b15      	ldr	r3, [pc, #84]	; (8002164 <_vfiprintf_r+0x258>)
 800210e:	a904      	add	r1, sp, #16
 8002110:	f3af 8000 	nop.w
 8002114:	4607      	mov	r7, r0
 8002116:	1c78      	adds	r0, r7, #1
 8002118:	d1d6      	bne.n	80020c8 <_vfiprintf_r+0x1bc>
 800211a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800211c:	07d9      	lsls	r1, r3, #31
 800211e:	d405      	bmi.n	800212c <_vfiprintf_r+0x220>
 8002120:	89ab      	ldrh	r3, [r5, #12]
 8002122:	059a      	lsls	r2, r3, #22
 8002124:	d402      	bmi.n	800212c <_vfiprintf_r+0x220>
 8002126:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002128:	f7ff fe6d 	bl	8001e06 <__retarget_lock_release_recursive>
 800212c:	89ab      	ldrh	r3, [r5, #12]
 800212e:	065b      	lsls	r3, r3, #25
 8002130:	f53f af12 	bmi.w	8001f58 <_vfiprintf_r+0x4c>
 8002134:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002136:	e711      	b.n	8001f5c <_vfiprintf_r+0x50>
 8002138:	ab03      	add	r3, sp, #12
 800213a:	9300      	str	r3, [sp, #0]
 800213c:	462a      	mov	r2, r5
 800213e:	4630      	mov	r0, r6
 8002140:	4b08      	ldr	r3, [pc, #32]	; (8002164 <_vfiprintf_r+0x258>)
 8002142:	a904      	add	r1, sp, #16
 8002144:	f000 f882 	bl	800224c <_printf_i>
 8002148:	e7e4      	b.n	8002114 <_vfiprintf_r+0x208>
 800214a:	bf00      	nop
 800214c:	08002b1c 	.word	0x08002b1c
 8002150:	08002b3c 	.word	0x08002b3c
 8002154:	08002afc 	.word	0x08002afc
 8002158:	08002b5c 	.word	0x08002b5c
 800215c:	08002b66 	.word	0x08002b66
 8002160:	00000000 	.word	0x00000000
 8002164:	08001ee7 	.word	0x08001ee7
 8002168:	08002b62 	.word	0x08002b62

0800216c <_printf_common>:
 800216c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002170:	4616      	mov	r6, r2
 8002172:	4699      	mov	r9, r3
 8002174:	688a      	ldr	r2, [r1, #8]
 8002176:	690b      	ldr	r3, [r1, #16]
 8002178:	4607      	mov	r7, r0
 800217a:	4293      	cmp	r3, r2
 800217c:	bfb8      	it	lt
 800217e:	4613      	movlt	r3, r2
 8002180:	6033      	str	r3, [r6, #0]
 8002182:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002186:	460c      	mov	r4, r1
 8002188:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800218c:	b10a      	cbz	r2, 8002192 <_printf_common+0x26>
 800218e:	3301      	adds	r3, #1
 8002190:	6033      	str	r3, [r6, #0]
 8002192:	6823      	ldr	r3, [r4, #0]
 8002194:	0699      	lsls	r1, r3, #26
 8002196:	bf42      	ittt	mi
 8002198:	6833      	ldrmi	r3, [r6, #0]
 800219a:	3302      	addmi	r3, #2
 800219c:	6033      	strmi	r3, [r6, #0]
 800219e:	6825      	ldr	r5, [r4, #0]
 80021a0:	f015 0506 	ands.w	r5, r5, #6
 80021a4:	d106      	bne.n	80021b4 <_printf_common+0x48>
 80021a6:	f104 0a19 	add.w	sl, r4, #25
 80021aa:	68e3      	ldr	r3, [r4, #12]
 80021ac:	6832      	ldr	r2, [r6, #0]
 80021ae:	1a9b      	subs	r3, r3, r2
 80021b0:	42ab      	cmp	r3, r5
 80021b2:	dc28      	bgt.n	8002206 <_printf_common+0x9a>
 80021b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80021b8:	1e13      	subs	r3, r2, #0
 80021ba:	6822      	ldr	r2, [r4, #0]
 80021bc:	bf18      	it	ne
 80021be:	2301      	movne	r3, #1
 80021c0:	0692      	lsls	r2, r2, #26
 80021c2:	d42d      	bmi.n	8002220 <_printf_common+0xb4>
 80021c4:	4649      	mov	r1, r9
 80021c6:	4638      	mov	r0, r7
 80021c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80021cc:	47c0      	blx	r8
 80021ce:	3001      	adds	r0, #1
 80021d0:	d020      	beq.n	8002214 <_printf_common+0xa8>
 80021d2:	6823      	ldr	r3, [r4, #0]
 80021d4:	68e5      	ldr	r5, [r4, #12]
 80021d6:	f003 0306 	and.w	r3, r3, #6
 80021da:	2b04      	cmp	r3, #4
 80021dc:	bf18      	it	ne
 80021de:	2500      	movne	r5, #0
 80021e0:	6832      	ldr	r2, [r6, #0]
 80021e2:	f04f 0600 	mov.w	r6, #0
 80021e6:	68a3      	ldr	r3, [r4, #8]
 80021e8:	bf08      	it	eq
 80021ea:	1aad      	subeq	r5, r5, r2
 80021ec:	6922      	ldr	r2, [r4, #16]
 80021ee:	bf08      	it	eq
 80021f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80021f4:	4293      	cmp	r3, r2
 80021f6:	bfc4      	itt	gt
 80021f8:	1a9b      	subgt	r3, r3, r2
 80021fa:	18ed      	addgt	r5, r5, r3
 80021fc:	341a      	adds	r4, #26
 80021fe:	42b5      	cmp	r5, r6
 8002200:	d11a      	bne.n	8002238 <_printf_common+0xcc>
 8002202:	2000      	movs	r0, #0
 8002204:	e008      	b.n	8002218 <_printf_common+0xac>
 8002206:	2301      	movs	r3, #1
 8002208:	4652      	mov	r2, sl
 800220a:	4649      	mov	r1, r9
 800220c:	4638      	mov	r0, r7
 800220e:	47c0      	blx	r8
 8002210:	3001      	adds	r0, #1
 8002212:	d103      	bne.n	800221c <_printf_common+0xb0>
 8002214:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002218:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800221c:	3501      	adds	r5, #1
 800221e:	e7c4      	b.n	80021aa <_printf_common+0x3e>
 8002220:	2030      	movs	r0, #48	; 0x30
 8002222:	18e1      	adds	r1, r4, r3
 8002224:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002228:	1c5a      	adds	r2, r3, #1
 800222a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800222e:	4422      	add	r2, r4
 8002230:	3302      	adds	r3, #2
 8002232:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002236:	e7c5      	b.n	80021c4 <_printf_common+0x58>
 8002238:	2301      	movs	r3, #1
 800223a:	4622      	mov	r2, r4
 800223c:	4649      	mov	r1, r9
 800223e:	4638      	mov	r0, r7
 8002240:	47c0      	blx	r8
 8002242:	3001      	adds	r0, #1
 8002244:	d0e6      	beq.n	8002214 <_printf_common+0xa8>
 8002246:	3601      	adds	r6, #1
 8002248:	e7d9      	b.n	80021fe <_printf_common+0x92>
	...

0800224c <_printf_i>:
 800224c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002250:	460c      	mov	r4, r1
 8002252:	7e27      	ldrb	r7, [r4, #24]
 8002254:	4691      	mov	r9, r2
 8002256:	2f78      	cmp	r7, #120	; 0x78
 8002258:	4680      	mov	r8, r0
 800225a:	469a      	mov	sl, r3
 800225c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800225e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002262:	d807      	bhi.n	8002274 <_printf_i+0x28>
 8002264:	2f62      	cmp	r7, #98	; 0x62
 8002266:	d80a      	bhi.n	800227e <_printf_i+0x32>
 8002268:	2f00      	cmp	r7, #0
 800226a:	f000 80d9 	beq.w	8002420 <_printf_i+0x1d4>
 800226e:	2f58      	cmp	r7, #88	; 0x58
 8002270:	f000 80a4 	beq.w	80023bc <_printf_i+0x170>
 8002274:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002278:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800227c:	e03a      	b.n	80022f4 <_printf_i+0xa8>
 800227e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002282:	2b15      	cmp	r3, #21
 8002284:	d8f6      	bhi.n	8002274 <_printf_i+0x28>
 8002286:	a001      	add	r0, pc, #4	; (adr r0, 800228c <_printf_i+0x40>)
 8002288:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800228c:	080022e5 	.word	0x080022e5
 8002290:	080022f9 	.word	0x080022f9
 8002294:	08002275 	.word	0x08002275
 8002298:	08002275 	.word	0x08002275
 800229c:	08002275 	.word	0x08002275
 80022a0:	08002275 	.word	0x08002275
 80022a4:	080022f9 	.word	0x080022f9
 80022a8:	08002275 	.word	0x08002275
 80022ac:	08002275 	.word	0x08002275
 80022b0:	08002275 	.word	0x08002275
 80022b4:	08002275 	.word	0x08002275
 80022b8:	08002407 	.word	0x08002407
 80022bc:	08002329 	.word	0x08002329
 80022c0:	080023e9 	.word	0x080023e9
 80022c4:	08002275 	.word	0x08002275
 80022c8:	08002275 	.word	0x08002275
 80022cc:	08002429 	.word	0x08002429
 80022d0:	08002275 	.word	0x08002275
 80022d4:	08002329 	.word	0x08002329
 80022d8:	08002275 	.word	0x08002275
 80022dc:	08002275 	.word	0x08002275
 80022e0:	080023f1 	.word	0x080023f1
 80022e4:	680b      	ldr	r3, [r1, #0]
 80022e6:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80022ea:	1d1a      	adds	r2, r3, #4
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	600a      	str	r2, [r1, #0]
 80022f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80022f4:	2301      	movs	r3, #1
 80022f6:	e0a4      	b.n	8002442 <_printf_i+0x1f6>
 80022f8:	6825      	ldr	r5, [r4, #0]
 80022fa:	6808      	ldr	r0, [r1, #0]
 80022fc:	062e      	lsls	r6, r5, #24
 80022fe:	f100 0304 	add.w	r3, r0, #4
 8002302:	d50a      	bpl.n	800231a <_printf_i+0xce>
 8002304:	6805      	ldr	r5, [r0, #0]
 8002306:	600b      	str	r3, [r1, #0]
 8002308:	2d00      	cmp	r5, #0
 800230a:	da03      	bge.n	8002314 <_printf_i+0xc8>
 800230c:	232d      	movs	r3, #45	; 0x2d
 800230e:	426d      	negs	r5, r5
 8002310:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002314:	230a      	movs	r3, #10
 8002316:	485e      	ldr	r0, [pc, #376]	; (8002490 <_printf_i+0x244>)
 8002318:	e019      	b.n	800234e <_printf_i+0x102>
 800231a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800231e:	6805      	ldr	r5, [r0, #0]
 8002320:	600b      	str	r3, [r1, #0]
 8002322:	bf18      	it	ne
 8002324:	b22d      	sxthne	r5, r5
 8002326:	e7ef      	b.n	8002308 <_printf_i+0xbc>
 8002328:	680b      	ldr	r3, [r1, #0]
 800232a:	6825      	ldr	r5, [r4, #0]
 800232c:	1d18      	adds	r0, r3, #4
 800232e:	6008      	str	r0, [r1, #0]
 8002330:	0628      	lsls	r0, r5, #24
 8002332:	d501      	bpl.n	8002338 <_printf_i+0xec>
 8002334:	681d      	ldr	r5, [r3, #0]
 8002336:	e002      	b.n	800233e <_printf_i+0xf2>
 8002338:	0669      	lsls	r1, r5, #25
 800233a:	d5fb      	bpl.n	8002334 <_printf_i+0xe8>
 800233c:	881d      	ldrh	r5, [r3, #0]
 800233e:	2f6f      	cmp	r7, #111	; 0x6f
 8002340:	bf0c      	ite	eq
 8002342:	2308      	moveq	r3, #8
 8002344:	230a      	movne	r3, #10
 8002346:	4852      	ldr	r0, [pc, #328]	; (8002490 <_printf_i+0x244>)
 8002348:	2100      	movs	r1, #0
 800234a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800234e:	6866      	ldr	r6, [r4, #4]
 8002350:	2e00      	cmp	r6, #0
 8002352:	bfa8      	it	ge
 8002354:	6821      	ldrge	r1, [r4, #0]
 8002356:	60a6      	str	r6, [r4, #8]
 8002358:	bfa4      	itt	ge
 800235a:	f021 0104 	bicge.w	r1, r1, #4
 800235e:	6021      	strge	r1, [r4, #0]
 8002360:	b90d      	cbnz	r5, 8002366 <_printf_i+0x11a>
 8002362:	2e00      	cmp	r6, #0
 8002364:	d04d      	beq.n	8002402 <_printf_i+0x1b6>
 8002366:	4616      	mov	r6, r2
 8002368:	fbb5 f1f3 	udiv	r1, r5, r3
 800236c:	fb03 5711 	mls	r7, r3, r1, r5
 8002370:	5dc7      	ldrb	r7, [r0, r7]
 8002372:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002376:	462f      	mov	r7, r5
 8002378:	42bb      	cmp	r3, r7
 800237a:	460d      	mov	r5, r1
 800237c:	d9f4      	bls.n	8002368 <_printf_i+0x11c>
 800237e:	2b08      	cmp	r3, #8
 8002380:	d10b      	bne.n	800239a <_printf_i+0x14e>
 8002382:	6823      	ldr	r3, [r4, #0]
 8002384:	07df      	lsls	r7, r3, #31
 8002386:	d508      	bpl.n	800239a <_printf_i+0x14e>
 8002388:	6923      	ldr	r3, [r4, #16]
 800238a:	6861      	ldr	r1, [r4, #4]
 800238c:	4299      	cmp	r1, r3
 800238e:	bfde      	ittt	le
 8002390:	2330      	movle	r3, #48	; 0x30
 8002392:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002396:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800239a:	1b92      	subs	r2, r2, r6
 800239c:	6122      	str	r2, [r4, #16]
 800239e:	464b      	mov	r3, r9
 80023a0:	4621      	mov	r1, r4
 80023a2:	4640      	mov	r0, r8
 80023a4:	f8cd a000 	str.w	sl, [sp]
 80023a8:	aa03      	add	r2, sp, #12
 80023aa:	f7ff fedf 	bl	800216c <_printf_common>
 80023ae:	3001      	adds	r0, #1
 80023b0:	d14c      	bne.n	800244c <_printf_i+0x200>
 80023b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80023b6:	b004      	add	sp, #16
 80023b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80023bc:	4834      	ldr	r0, [pc, #208]	; (8002490 <_printf_i+0x244>)
 80023be:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80023c2:	680e      	ldr	r6, [r1, #0]
 80023c4:	6823      	ldr	r3, [r4, #0]
 80023c6:	f856 5b04 	ldr.w	r5, [r6], #4
 80023ca:	061f      	lsls	r7, r3, #24
 80023cc:	600e      	str	r6, [r1, #0]
 80023ce:	d514      	bpl.n	80023fa <_printf_i+0x1ae>
 80023d0:	07d9      	lsls	r1, r3, #31
 80023d2:	bf44      	itt	mi
 80023d4:	f043 0320 	orrmi.w	r3, r3, #32
 80023d8:	6023      	strmi	r3, [r4, #0]
 80023da:	b91d      	cbnz	r5, 80023e4 <_printf_i+0x198>
 80023dc:	6823      	ldr	r3, [r4, #0]
 80023de:	f023 0320 	bic.w	r3, r3, #32
 80023e2:	6023      	str	r3, [r4, #0]
 80023e4:	2310      	movs	r3, #16
 80023e6:	e7af      	b.n	8002348 <_printf_i+0xfc>
 80023e8:	6823      	ldr	r3, [r4, #0]
 80023ea:	f043 0320 	orr.w	r3, r3, #32
 80023ee:	6023      	str	r3, [r4, #0]
 80023f0:	2378      	movs	r3, #120	; 0x78
 80023f2:	4828      	ldr	r0, [pc, #160]	; (8002494 <_printf_i+0x248>)
 80023f4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80023f8:	e7e3      	b.n	80023c2 <_printf_i+0x176>
 80023fa:	065e      	lsls	r6, r3, #25
 80023fc:	bf48      	it	mi
 80023fe:	b2ad      	uxthmi	r5, r5
 8002400:	e7e6      	b.n	80023d0 <_printf_i+0x184>
 8002402:	4616      	mov	r6, r2
 8002404:	e7bb      	b.n	800237e <_printf_i+0x132>
 8002406:	680b      	ldr	r3, [r1, #0]
 8002408:	6826      	ldr	r6, [r4, #0]
 800240a:	1d1d      	adds	r5, r3, #4
 800240c:	6960      	ldr	r0, [r4, #20]
 800240e:	600d      	str	r5, [r1, #0]
 8002410:	0635      	lsls	r5, r6, #24
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	d501      	bpl.n	800241a <_printf_i+0x1ce>
 8002416:	6018      	str	r0, [r3, #0]
 8002418:	e002      	b.n	8002420 <_printf_i+0x1d4>
 800241a:	0671      	lsls	r1, r6, #25
 800241c:	d5fb      	bpl.n	8002416 <_printf_i+0x1ca>
 800241e:	8018      	strh	r0, [r3, #0]
 8002420:	2300      	movs	r3, #0
 8002422:	4616      	mov	r6, r2
 8002424:	6123      	str	r3, [r4, #16]
 8002426:	e7ba      	b.n	800239e <_printf_i+0x152>
 8002428:	680b      	ldr	r3, [r1, #0]
 800242a:	1d1a      	adds	r2, r3, #4
 800242c:	600a      	str	r2, [r1, #0]
 800242e:	681e      	ldr	r6, [r3, #0]
 8002430:	2100      	movs	r1, #0
 8002432:	4630      	mov	r0, r6
 8002434:	6862      	ldr	r2, [r4, #4]
 8002436:	f000 fa9d 	bl	8002974 <memchr>
 800243a:	b108      	cbz	r0, 8002440 <_printf_i+0x1f4>
 800243c:	1b80      	subs	r0, r0, r6
 800243e:	6060      	str	r0, [r4, #4]
 8002440:	6863      	ldr	r3, [r4, #4]
 8002442:	6123      	str	r3, [r4, #16]
 8002444:	2300      	movs	r3, #0
 8002446:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800244a:	e7a8      	b.n	800239e <_printf_i+0x152>
 800244c:	4632      	mov	r2, r6
 800244e:	4649      	mov	r1, r9
 8002450:	4640      	mov	r0, r8
 8002452:	6923      	ldr	r3, [r4, #16]
 8002454:	47d0      	blx	sl
 8002456:	3001      	adds	r0, #1
 8002458:	d0ab      	beq.n	80023b2 <_printf_i+0x166>
 800245a:	6823      	ldr	r3, [r4, #0]
 800245c:	079b      	lsls	r3, r3, #30
 800245e:	d413      	bmi.n	8002488 <_printf_i+0x23c>
 8002460:	68e0      	ldr	r0, [r4, #12]
 8002462:	9b03      	ldr	r3, [sp, #12]
 8002464:	4298      	cmp	r0, r3
 8002466:	bfb8      	it	lt
 8002468:	4618      	movlt	r0, r3
 800246a:	e7a4      	b.n	80023b6 <_printf_i+0x16a>
 800246c:	2301      	movs	r3, #1
 800246e:	4632      	mov	r2, r6
 8002470:	4649      	mov	r1, r9
 8002472:	4640      	mov	r0, r8
 8002474:	47d0      	blx	sl
 8002476:	3001      	adds	r0, #1
 8002478:	d09b      	beq.n	80023b2 <_printf_i+0x166>
 800247a:	3501      	adds	r5, #1
 800247c:	68e3      	ldr	r3, [r4, #12]
 800247e:	9903      	ldr	r1, [sp, #12]
 8002480:	1a5b      	subs	r3, r3, r1
 8002482:	42ab      	cmp	r3, r5
 8002484:	dcf2      	bgt.n	800246c <_printf_i+0x220>
 8002486:	e7eb      	b.n	8002460 <_printf_i+0x214>
 8002488:	2500      	movs	r5, #0
 800248a:	f104 0619 	add.w	r6, r4, #25
 800248e:	e7f5      	b.n	800247c <_printf_i+0x230>
 8002490:	08002b6d 	.word	0x08002b6d
 8002494:	08002b7e 	.word	0x08002b7e

08002498 <_sbrk_r>:
 8002498:	b538      	push	{r3, r4, r5, lr}
 800249a:	2300      	movs	r3, #0
 800249c:	4d05      	ldr	r5, [pc, #20]	; (80024b4 <_sbrk_r+0x1c>)
 800249e:	4604      	mov	r4, r0
 80024a0:	4608      	mov	r0, r1
 80024a2:	602b      	str	r3, [r5, #0]
 80024a4:	f7fe fa34 	bl	8000910 <_sbrk>
 80024a8:	1c43      	adds	r3, r0, #1
 80024aa:	d102      	bne.n	80024b2 <_sbrk_r+0x1a>
 80024ac:	682b      	ldr	r3, [r5, #0]
 80024ae:	b103      	cbz	r3, 80024b2 <_sbrk_r+0x1a>
 80024b0:	6023      	str	r3, [r4, #0]
 80024b2:	bd38      	pop	{r3, r4, r5, pc}
 80024b4:	200000ec 	.word	0x200000ec

080024b8 <__sread>:
 80024b8:	b510      	push	{r4, lr}
 80024ba:	460c      	mov	r4, r1
 80024bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80024c0:	f000 fabe 	bl	8002a40 <_read_r>
 80024c4:	2800      	cmp	r0, #0
 80024c6:	bfab      	itete	ge
 80024c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80024ca:	89a3      	ldrhlt	r3, [r4, #12]
 80024cc:	181b      	addge	r3, r3, r0
 80024ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80024d2:	bfac      	ite	ge
 80024d4:	6563      	strge	r3, [r4, #84]	; 0x54
 80024d6:	81a3      	strhlt	r3, [r4, #12]
 80024d8:	bd10      	pop	{r4, pc}

080024da <__swrite>:
 80024da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80024de:	461f      	mov	r7, r3
 80024e0:	898b      	ldrh	r3, [r1, #12]
 80024e2:	4605      	mov	r5, r0
 80024e4:	05db      	lsls	r3, r3, #23
 80024e6:	460c      	mov	r4, r1
 80024e8:	4616      	mov	r6, r2
 80024ea:	d505      	bpl.n	80024f8 <__swrite+0x1e>
 80024ec:	2302      	movs	r3, #2
 80024ee:	2200      	movs	r2, #0
 80024f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80024f4:	f000 f9c8 	bl	8002888 <_lseek_r>
 80024f8:	89a3      	ldrh	r3, [r4, #12]
 80024fa:	4632      	mov	r2, r6
 80024fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002500:	81a3      	strh	r3, [r4, #12]
 8002502:	4628      	mov	r0, r5
 8002504:	463b      	mov	r3, r7
 8002506:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800250a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800250e:	f000 b869 	b.w	80025e4 <_write_r>

08002512 <__sseek>:
 8002512:	b510      	push	{r4, lr}
 8002514:	460c      	mov	r4, r1
 8002516:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800251a:	f000 f9b5 	bl	8002888 <_lseek_r>
 800251e:	1c43      	adds	r3, r0, #1
 8002520:	89a3      	ldrh	r3, [r4, #12]
 8002522:	bf15      	itete	ne
 8002524:	6560      	strne	r0, [r4, #84]	; 0x54
 8002526:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800252a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800252e:	81a3      	strheq	r3, [r4, #12]
 8002530:	bf18      	it	ne
 8002532:	81a3      	strhne	r3, [r4, #12]
 8002534:	bd10      	pop	{r4, pc}

08002536 <__sclose>:
 8002536:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800253a:	f000 b8d3 	b.w	80026e4 <_close_r>
	...

08002540 <__swbuf_r>:
 8002540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002542:	460e      	mov	r6, r1
 8002544:	4614      	mov	r4, r2
 8002546:	4605      	mov	r5, r0
 8002548:	b118      	cbz	r0, 8002552 <__swbuf_r+0x12>
 800254a:	6983      	ldr	r3, [r0, #24]
 800254c:	b90b      	cbnz	r3, 8002552 <__swbuf_r+0x12>
 800254e:	f7ff fbbb 	bl	8001cc8 <__sinit>
 8002552:	4b21      	ldr	r3, [pc, #132]	; (80025d8 <__swbuf_r+0x98>)
 8002554:	429c      	cmp	r4, r3
 8002556:	d12b      	bne.n	80025b0 <__swbuf_r+0x70>
 8002558:	686c      	ldr	r4, [r5, #4]
 800255a:	69a3      	ldr	r3, [r4, #24]
 800255c:	60a3      	str	r3, [r4, #8]
 800255e:	89a3      	ldrh	r3, [r4, #12]
 8002560:	071a      	lsls	r2, r3, #28
 8002562:	d52f      	bpl.n	80025c4 <__swbuf_r+0x84>
 8002564:	6923      	ldr	r3, [r4, #16]
 8002566:	b36b      	cbz	r3, 80025c4 <__swbuf_r+0x84>
 8002568:	6923      	ldr	r3, [r4, #16]
 800256a:	6820      	ldr	r0, [r4, #0]
 800256c:	b2f6      	uxtb	r6, r6
 800256e:	1ac0      	subs	r0, r0, r3
 8002570:	6963      	ldr	r3, [r4, #20]
 8002572:	4637      	mov	r7, r6
 8002574:	4283      	cmp	r3, r0
 8002576:	dc04      	bgt.n	8002582 <__swbuf_r+0x42>
 8002578:	4621      	mov	r1, r4
 800257a:	4628      	mov	r0, r5
 800257c:	f000 f948 	bl	8002810 <_fflush_r>
 8002580:	bb30      	cbnz	r0, 80025d0 <__swbuf_r+0x90>
 8002582:	68a3      	ldr	r3, [r4, #8]
 8002584:	3001      	adds	r0, #1
 8002586:	3b01      	subs	r3, #1
 8002588:	60a3      	str	r3, [r4, #8]
 800258a:	6823      	ldr	r3, [r4, #0]
 800258c:	1c5a      	adds	r2, r3, #1
 800258e:	6022      	str	r2, [r4, #0]
 8002590:	701e      	strb	r6, [r3, #0]
 8002592:	6963      	ldr	r3, [r4, #20]
 8002594:	4283      	cmp	r3, r0
 8002596:	d004      	beq.n	80025a2 <__swbuf_r+0x62>
 8002598:	89a3      	ldrh	r3, [r4, #12]
 800259a:	07db      	lsls	r3, r3, #31
 800259c:	d506      	bpl.n	80025ac <__swbuf_r+0x6c>
 800259e:	2e0a      	cmp	r6, #10
 80025a0:	d104      	bne.n	80025ac <__swbuf_r+0x6c>
 80025a2:	4621      	mov	r1, r4
 80025a4:	4628      	mov	r0, r5
 80025a6:	f000 f933 	bl	8002810 <_fflush_r>
 80025aa:	b988      	cbnz	r0, 80025d0 <__swbuf_r+0x90>
 80025ac:	4638      	mov	r0, r7
 80025ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80025b0:	4b0a      	ldr	r3, [pc, #40]	; (80025dc <__swbuf_r+0x9c>)
 80025b2:	429c      	cmp	r4, r3
 80025b4:	d101      	bne.n	80025ba <__swbuf_r+0x7a>
 80025b6:	68ac      	ldr	r4, [r5, #8]
 80025b8:	e7cf      	b.n	800255a <__swbuf_r+0x1a>
 80025ba:	4b09      	ldr	r3, [pc, #36]	; (80025e0 <__swbuf_r+0xa0>)
 80025bc:	429c      	cmp	r4, r3
 80025be:	bf08      	it	eq
 80025c0:	68ec      	ldreq	r4, [r5, #12]
 80025c2:	e7ca      	b.n	800255a <__swbuf_r+0x1a>
 80025c4:	4621      	mov	r1, r4
 80025c6:	4628      	mov	r0, r5
 80025c8:	f000 f81e 	bl	8002608 <__swsetup_r>
 80025cc:	2800      	cmp	r0, #0
 80025ce:	d0cb      	beq.n	8002568 <__swbuf_r+0x28>
 80025d0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80025d4:	e7ea      	b.n	80025ac <__swbuf_r+0x6c>
 80025d6:	bf00      	nop
 80025d8:	08002b1c 	.word	0x08002b1c
 80025dc:	08002b3c 	.word	0x08002b3c
 80025e0:	08002afc 	.word	0x08002afc

080025e4 <_write_r>:
 80025e4:	b538      	push	{r3, r4, r5, lr}
 80025e6:	4604      	mov	r4, r0
 80025e8:	4608      	mov	r0, r1
 80025ea:	4611      	mov	r1, r2
 80025ec:	2200      	movs	r2, #0
 80025ee:	4d05      	ldr	r5, [pc, #20]	; (8002604 <_write_r+0x20>)
 80025f0:	602a      	str	r2, [r5, #0]
 80025f2:	461a      	mov	r2, r3
 80025f4:	f7fd fdd0 	bl	8000198 <_write>
 80025f8:	1c43      	adds	r3, r0, #1
 80025fa:	d102      	bne.n	8002602 <_write_r+0x1e>
 80025fc:	682b      	ldr	r3, [r5, #0]
 80025fe:	b103      	cbz	r3, 8002602 <_write_r+0x1e>
 8002600:	6023      	str	r3, [r4, #0]
 8002602:	bd38      	pop	{r3, r4, r5, pc}
 8002604:	200000ec 	.word	0x200000ec

08002608 <__swsetup_r>:
 8002608:	4b32      	ldr	r3, [pc, #200]	; (80026d4 <__swsetup_r+0xcc>)
 800260a:	b570      	push	{r4, r5, r6, lr}
 800260c:	681d      	ldr	r5, [r3, #0]
 800260e:	4606      	mov	r6, r0
 8002610:	460c      	mov	r4, r1
 8002612:	b125      	cbz	r5, 800261e <__swsetup_r+0x16>
 8002614:	69ab      	ldr	r3, [r5, #24]
 8002616:	b913      	cbnz	r3, 800261e <__swsetup_r+0x16>
 8002618:	4628      	mov	r0, r5
 800261a:	f7ff fb55 	bl	8001cc8 <__sinit>
 800261e:	4b2e      	ldr	r3, [pc, #184]	; (80026d8 <__swsetup_r+0xd0>)
 8002620:	429c      	cmp	r4, r3
 8002622:	d10f      	bne.n	8002644 <__swsetup_r+0x3c>
 8002624:	686c      	ldr	r4, [r5, #4]
 8002626:	89a3      	ldrh	r3, [r4, #12]
 8002628:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800262c:	0719      	lsls	r1, r3, #28
 800262e:	d42c      	bmi.n	800268a <__swsetup_r+0x82>
 8002630:	06dd      	lsls	r5, r3, #27
 8002632:	d411      	bmi.n	8002658 <__swsetup_r+0x50>
 8002634:	2309      	movs	r3, #9
 8002636:	6033      	str	r3, [r6, #0]
 8002638:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800263c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002640:	81a3      	strh	r3, [r4, #12]
 8002642:	e03e      	b.n	80026c2 <__swsetup_r+0xba>
 8002644:	4b25      	ldr	r3, [pc, #148]	; (80026dc <__swsetup_r+0xd4>)
 8002646:	429c      	cmp	r4, r3
 8002648:	d101      	bne.n	800264e <__swsetup_r+0x46>
 800264a:	68ac      	ldr	r4, [r5, #8]
 800264c:	e7eb      	b.n	8002626 <__swsetup_r+0x1e>
 800264e:	4b24      	ldr	r3, [pc, #144]	; (80026e0 <__swsetup_r+0xd8>)
 8002650:	429c      	cmp	r4, r3
 8002652:	bf08      	it	eq
 8002654:	68ec      	ldreq	r4, [r5, #12]
 8002656:	e7e6      	b.n	8002626 <__swsetup_r+0x1e>
 8002658:	0758      	lsls	r0, r3, #29
 800265a:	d512      	bpl.n	8002682 <__swsetup_r+0x7a>
 800265c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800265e:	b141      	cbz	r1, 8002672 <__swsetup_r+0x6a>
 8002660:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002664:	4299      	cmp	r1, r3
 8002666:	d002      	beq.n	800266e <__swsetup_r+0x66>
 8002668:	4630      	mov	r0, r6
 800266a:	f000 f99d 	bl	80029a8 <_free_r>
 800266e:	2300      	movs	r3, #0
 8002670:	6363      	str	r3, [r4, #52]	; 0x34
 8002672:	89a3      	ldrh	r3, [r4, #12]
 8002674:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002678:	81a3      	strh	r3, [r4, #12]
 800267a:	2300      	movs	r3, #0
 800267c:	6063      	str	r3, [r4, #4]
 800267e:	6923      	ldr	r3, [r4, #16]
 8002680:	6023      	str	r3, [r4, #0]
 8002682:	89a3      	ldrh	r3, [r4, #12]
 8002684:	f043 0308 	orr.w	r3, r3, #8
 8002688:	81a3      	strh	r3, [r4, #12]
 800268a:	6923      	ldr	r3, [r4, #16]
 800268c:	b94b      	cbnz	r3, 80026a2 <__swsetup_r+0x9a>
 800268e:	89a3      	ldrh	r3, [r4, #12]
 8002690:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002694:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002698:	d003      	beq.n	80026a2 <__swsetup_r+0x9a>
 800269a:	4621      	mov	r1, r4
 800269c:	4630      	mov	r0, r6
 800269e:	f000 f929 	bl	80028f4 <__smakebuf_r>
 80026a2:	89a0      	ldrh	r0, [r4, #12]
 80026a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80026a8:	f010 0301 	ands.w	r3, r0, #1
 80026ac:	d00a      	beq.n	80026c4 <__swsetup_r+0xbc>
 80026ae:	2300      	movs	r3, #0
 80026b0:	60a3      	str	r3, [r4, #8]
 80026b2:	6963      	ldr	r3, [r4, #20]
 80026b4:	425b      	negs	r3, r3
 80026b6:	61a3      	str	r3, [r4, #24]
 80026b8:	6923      	ldr	r3, [r4, #16]
 80026ba:	b943      	cbnz	r3, 80026ce <__swsetup_r+0xc6>
 80026bc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80026c0:	d1ba      	bne.n	8002638 <__swsetup_r+0x30>
 80026c2:	bd70      	pop	{r4, r5, r6, pc}
 80026c4:	0781      	lsls	r1, r0, #30
 80026c6:	bf58      	it	pl
 80026c8:	6963      	ldrpl	r3, [r4, #20]
 80026ca:	60a3      	str	r3, [r4, #8]
 80026cc:	e7f4      	b.n	80026b8 <__swsetup_r+0xb0>
 80026ce:	2000      	movs	r0, #0
 80026d0:	e7f7      	b.n	80026c2 <__swsetup_r+0xba>
 80026d2:	bf00      	nop
 80026d4:	2000000c 	.word	0x2000000c
 80026d8:	08002b1c 	.word	0x08002b1c
 80026dc:	08002b3c 	.word	0x08002b3c
 80026e0:	08002afc 	.word	0x08002afc

080026e4 <_close_r>:
 80026e4:	b538      	push	{r3, r4, r5, lr}
 80026e6:	2300      	movs	r3, #0
 80026e8:	4d05      	ldr	r5, [pc, #20]	; (8002700 <_close_r+0x1c>)
 80026ea:	4604      	mov	r4, r0
 80026ec:	4608      	mov	r0, r1
 80026ee:	602b      	str	r3, [r5, #0]
 80026f0:	f7fe f8de 	bl	80008b0 <_close>
 80026f4:	1c43      	adds	r3, r0, #1
 80026f6:	d102      	bne.n	80026fe <_close_r+0x1a>
 80026f8:	682b      	ldr	r3, [r5, #0]
 80026fa:	b103      	cbz	r3, 80026fe <_close_r+0x1a>
 80026fc:	6023      	str	r3, [r4, #0]
 80026fe:	bd38      	pop	{r3, r4, r5, pc}
 8002700:	200000ec 	.word	0x200000ec

08002704 <__sflush_r>:
 8002704:	898a      	ldrh	r2, [r1, #12]
 8002706:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800270a:	4605      	mov	r5, r0
 800270c:	0710      	lsls	r0, r2, #28
 800270e:	460c      	mov	r4, r1
 8002710:	d458      	bmi.n	80027c4 <__sflush_r+0xc0>
 8002712:	684b      	ldr	r3, [r1, #4]
 8002714:	2b00      	cmp	r3, #0
 8002716:	dc05      	bgt.n	8002724 <__sflush_r+0x20>
 8002718:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800271a:	2b00      	cmp	r3, #0
 800271c:	dc02      	bgt.n	8002724 <__sflush_r+0x20>
 800271e:	2000      	movs	r0, #0
 8002720:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002724:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002726:	2e00      	cmp	r6, #0
 8002728:	d0f9      	beq.n	800271e <__sflush_r+0x1a>
 800272a:	2300      	movs	r3, #0
 800272c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002730:	682f      	ldr	r7, [r5, #0]
 8002732:	602b      	str	r3, [r5, #0]
 8002734:	d032      	beq.n	800279c <__sflush_r+0x98>
 8002736:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002738:	89a3      	ldrh	r3, [r4, #12]
 800273a:	075a      	lsls	r2, r3, #29
 800273c:	d505      	bpl.n	800274a <__sflush_r+0x46>
 800273e:	6863      	ldr	r3, [r4, #4]
 8002740:	1ac0      	subs	r0, r0, r3
 8002742:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002744:	b10b      	cbz	r3, 800274a <__sflush_r+0x46>
 8002746:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002748:	1ac0      	subs	r0, r0, r3
 800274a:	2300      	movs	r3, #0
 800274c:	4602      	mov	r2, r0
 800274e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002750:	4628      	mov	r0, r5
 8002752:	6a21      	ldr	r1, [r4, #32]
 8002754:	47b0      	blx	r6
 8002756:	1c43      	adds	r3, r0, #1
 8002758:	89a3      	ldrh	r3, [r4, #12]
 800275a:	d106      	bne.n	800276a <__sflush_r+0x66>
 800275c:	6829      	ldr	r1, [r5, #0]
 800275e:	291d      	cmp	r1, #29
 8002760:	d82c      	bhi.n	80027bc <__sflush_r+0xb8>
 8002762:	4a2a      	ldr	r2, [pc, #168]	; (800280c <__sflush_r+0x108>)
 8002764:	40ca      	lsrs	r2, r1
 8002766:	07d6      	lsls	r6, r2, #31
 8002768:	d528      	bpl.n	80027bc <__sflush_r+0xb8>
 800276a:	2200      	movs	r2, #0
 800276c:	6062      	str	r2, [r4, #4]
 800276e:	6922      	ldr	r2, [r4, #16]
 8002770:	04d9      	lsls	r1, r3, #19
 8002772:	6022      	str	r2, [r4, #0]
 8002774:	d504      	bpl.n	8002780 <__sflush_r+0x7c>
 8002776:	1c42      	adds	r2, r0, #1
 8002778:	d101      	bne.n	800277e <__sflush_r+0x7a>
 800277a:	682b      	ldr	r3, [r5, #0]
 800277c:	b903      	cbnz	r3, 8002780 <__sflush_r+0x7c>
 800277e:	6560      	str	r0, [r4, #84]	; 0x54
 8002780:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002782:	602f      	str	r7, [r5, #0]
 8002784:	2900      	cmp	r1, #0
 8002786:	d0ca      	beq.n	800271e <__sflush_r+0x1a>
 8002788:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800278c:	4299      	cmp	r1, r3
 800278e:	d002      	beq.n	8002796 <__sflush_r+0x92>
 8002790:	4628      	mov	r0, r5
 8002792:	f000 f909 	bl	80029a8 <_free_r>
 8002796:	2000      	movs	r0, #0
 8002798:	6360      	str	r0, [r4, #52]	; 0x34
 800279a:	e7c1      	b.n	8002720 <__sflush_r+0x1c>
 800279c:	6a21      	ldr	r1, [r4, #32]
 800279e:	2301      	movs	r3, #1
 80027a0:	4628      	mov	r0, r5
 80027a2:	47b0      	blx	r6
 80027a4:	1c41      	adds	r1, r0, #1
 80027a6:	d1c7      	bne.n	8002738 <__sflush_r+0x34>
 80027a8:	682b      	ldr	r3, [r5, #0]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d0c4      	beq.n	8002738 <__sflush_r+0x34>
 80027ae:	2b1d      	cmp	r3, #29
 80027b0:	d001      	beq.n	80027b6 <__sflush_r+0xb2>
 80027b2:	2b16      	cmp	r3, #22
 80027b4:	d101      	bne.n	80027ba <__sflush_r+0xb6>
 80027b6:	602f      	str	r7, [r5, #0]
 80027b8:	e7b1      	b.n	800271e <__sflush_r+0x1a>
 80027ba:	89a3      	ldrh	r3, [r4, #12]
 80027bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027c0:	81a3      	strh	r3, [r4, #12]
 80027c2:	e7ad      	b.n	8002720 <__sflush_r+0x1c>
 80027c4:	690f      	ldr	r7, [r1, #16]
 80027c6:	2f00      	cmp	r7, #0
 80027c8:	d0a9      	beq.n	800271e <__sflush_r+0x1a>
 80027ca:	0793      	lsls	r3, r2, #30
 80027cc:	bf18      	it	ne
 80027ce:	2300      	movne	r3, #0
 80027d0:	680e      	ldr	r6, [r1, #0]
 80027d2:	bf08      	it	eq
 80027d4:	694b      	ldreq	r3, [r1, #20]
 80027d6:	eba6 0807 	sub.w	r8, r6, r7
 80027da:	600f      	str	r7, [r1, #0]
 80027dc:	608b      	str	r3, [r1, #8]
 80027de:	f1b8 0f00 	cmp.w	r8, #0
 80027e2:	dd9c      	ble.n	800271e <__sflush_r+0x1a>
 80027e4:	4643      	mov	r3, r8
 80027e6:	463a      	mov	r2, r7
 80027e8:	4628      	mov	r0, r5
 80027ea:	6a21      	ldr	r1, [r4, #32]
 80027ec:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80027ee:	47b0      	blx	r6
 80027f0:	2800      	cmp	r0, #0
 80027f2:	dc06      	bgt.n	8002802 <__sflush_r+0xfe>
 80027f4:	89a3      	ldrh	r3, [r4, #12]
 80027f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80027fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027fe:	81a3      	strh	r3, [r4, #12]
 8002800:	e78e      	b.n	8002720 <__sflush_r+0x1c>
 8002802:	4407      	add	r7, r0
 8002804:	eba8 0800 	sub.w	r8, r8, r0
 8002808:	e7e9      	b.n	80027de <__sflush_r+0xda>
 800280a:	bf00      	nop
 800280c:	20400001 	.word	0x20400001

08002810 <_fflush_r>:
 8002810:	b538      	push	{r3, r4, r5, lr}
 8002812:	690b      	ldr	r3, [r1, #16]
 8002814:	4605      	mov	r5, r0
 8002816:	460c      	mov	r4, r1
 8002818:	b913      	cbnz	r3, 8002820 <_fflush_r+0x10>
 800281a:	2500      	movs	r5, #0
 800281c:	4628      	mov	r0, r5
 800281e:	bd38      	pop	{r3, r4, r5, pc}
 8002820:	b118      	cbz	r0, 800282a <_fflush_r+0x1a>
 8002822:	6983      	ldr	r3, [r0, #24]
 8002824:	b90b      	cbnz	r3, 800282a <_fflush_r+0x1a>
 8002826:	f7ff fa4f 	bl	8001cc8 <__sinit>
 800282a:	4b14      	ldr	r3, [pc, #80]	; (800287c <_fflush_r+0x6c>)
 800282c:	429c      	cmp	r4, r3
 800282e:	d11b      	bne.n	8002868 <_fflush_r+0x58>
 8002830:	686c      	ldr	r4, [r5, #4]
 8002832:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d0ef      	beq.n	800281a <_fflush_r+0xa>
 800283a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800283c:	07d0      	lsls	r0, r2, #31
 800283e:	d404      	bmi.n	800284a <_fflush_r+0x3a>
 8002840:	0599      	lsls	r1, r3, #22
 8002842:	d402      	bmi.n	800284a <_fflush_r+0x3a>
 8002844:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002846:	f7ff fadd 	bl	8001e04 <__retarget_lock_acquire_recursive>
 800284a:	4628      	mov	r0, r5
 800284c:	4621      	mov	r1, r4
 800284e:	f7ff ff59 	bl	8002704 <__sflush_r>
 8002852:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002854:	4605      	mov	r5, r0
 8002856:	07da      	lsls	r2, r3, #31
 8002858:	d4e0      	bmi.n	800281c <_fflush_r+0xc>
 800285a:	89a3      	ldrh	r3, [r4, #12]
 800285c:	059b      	lsls	r3, r3, #22
 800285e:	d4dd      	bmi.n	800281c <_fflush_r+0xc>
 8002860:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002862:	f7ff fad0 	bl	8001e06 <__retarget_lock_release_recursive>
 8002866:	e7d9      	b.n	800281c <_fflush_r+0xc>
 8002868:	4b05      	ldr	r3, [pc, #20]	; (8002880 <_fflush_r+0x70>)
 800286a:	429c      	cmp	r4, r3
 800286c:	d101      	bne.n	8002872 <_fflush_r+0x62>
 800286e:	68ac      	ldr	r4, [r5, #8]
 8002870:	e7df      	b.n	8002832 <_fflush_r+0x22>
 8002872:	4b04      	ldr	r3, [pc, #16]	; (8002884 <_fflush_r+0x74>)
 8002874:	429c      	cmp	r4, r3
 8002876:	bf08      	it	eq
 8002878:	68ec      	ldreq	r4, [r5, #12]
 800287a:	e7da      	b.n	8002832 <_fflush_r+0x22>
 800287c:	08002b1c 	.word	0x08002b1c
 8002880:	08002b3c 	.word	0x08002b3c
 8002884:	08002afc 	.word	0x08002afc

08002888 <_lseek_r>:
 8002888:	b538      	push	{r3, r4, r5, lr}
 800288a:	4604      	mov	r4, r0
 800288c:	4608      	mov	r0, r1
 800288e:	4611      	mov	r1, r2
 8002890:	2200      	movs	r2, #0
 8002892:	4d05      	ldr	r5, [pc, #20]	; (80028a8 <_lseek_r+0x20>)
 8002894:	602a      	str	r2, [r5, #0]
 8002896:	461a      	mov	r2, r3
 8002898:	f7fe f82e 	bl	80008f8 <_lseek>
 800289c:	1c43      	adds	r3, r0, #1
 800289e:	d102      	bne.n	80028a6 <_lseek_r+0x1e>
 80028a0:	682b      	ldr	r3, [r5, #0]
 80028a2:	b103      	cbz	r3, 80028a6 <_lseek_r+0x1e>
 80028a4:	6023      	str	r3, [r4, #0]
 80028a6:	bd38      	pop	{r3, r4, r5, pc}
 80028a8:	200000ec 	.word	0x200000ec

080028ac <__swhatbuf_r>:
 80028ac:	b570      	push	{r4, r5, r6, lr}
 80028ae:	460e      	mov	r6, r1
 80028b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80028b4:	4614      	mov	r4, r2
 80028b6:	2900      	cmp	r1, #0
 80028b8:	461d      	mov	r5, r3
 80028ba:	b096      	sub	sp, #88	; 0x58
 80028bc:	da07      	bge.n	80028ce <__swhatbuf_r+0x22>
 80028be:	2300      	movs	r3, #0
 80028c0:	602b      	str	r3, [r5, #0]
 80028c2:	89b3      	ldrh	r3, [r6, #12]
 80028c4:	061a      	lsls	r2, r3, #24
 80028c6:	d410      	bmi.n	80028ea <__swhatbuf_r+0x3e>
 80028c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028cc:	e00e      	b.n	80028ec <__swhatbuf_r+0x40>
 80028ce:	466a      	mov	r2, sp
 80028d0:	f000 f8c8 	bl	8002a64 <_fstat_r>
 80028d4:	2800      	cmp	r0, #0
 80028d6:	dbf2      	blt.n	80028be <__swhatbuf_r+0x12>
 80028d8:	9a01      	ldr	r2, [sp, #4]
 80028da:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80028de:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80028e2:	425a      	negs	r2, r3
 80028e4:	415a      	adcs	r2, r3
 80028e6:	602a      	str	r2, [r5, #0]
 80028e8:	e7ee      	b.n	80028c8 <__swhatbuf_r+0x1c>
 80028ea:	2340      	movs	r3, #64	; 0x40
 80028ec:	2000      	movs	r0, #0
 80028ee:	6023      	str	r3, [r4, #0]
 80028f0:	b016      	add	sp, #88	; 0x58
 80028f2:	bd70      	pop	{r4, r5, r6, pc}

080028f4 <__smakebuf_r>:
 80028f4:	898b      	ldrh	r3, [r1, #12]
 80028f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80028f8:	079d      	lsls	r5, r3, #30
 80028fa:	4606      	mov	r6, r0
 80028fc:	460c      	mov	r4, r1
 80028fe:	d507      	bpl.n	8002910 <__smakebuf_r+0x1c>
 8002900:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002904:	6023      	str	r3, [r4, #0]
 8002906:	6123      	str	r3, [r4, #16]
 8002908:	2301      	movs	r3, #1
 800290a:	6163      	str	r3, [r4, #20]
 800290c:	b002      	add	sp, #8
 800290e:	bd70      	pop	{r4, r5, r6, pc}
 8002910:	466a      	mov	r2, sp
 8002912:	ab01      	add	r3, sp, #4
 8002914:	f7ff ffca 	bl	80028ac <__swhatbuf_r>
 8002918:	9900      	ldr	r1, [sp, #0]
 800291a:	4605      	mov	r5, r0
 800291c:	4630      	mov	r0, r6
 800291e:	f7ff fa73 	bl	8001e08 <_malloc_r>
 8002922:	b948      	cbnz	r0, 8002938 <__smakebuf_r+0x44>
 8002924:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002928:	059a      	lsls	r2, r3, #22
 800292a:	d4ef      	bmi.n	800290c <__smakebuf_r+0x18>
 800292c:	f023 0303 	bic.w	r3, r3, #3
 8002930:	f043 0302 	orr.w	r3, r3, #2
 8002934:	81a3      	strh	r3, [r4, #12]
 8002936:	e7e3      	b.n	8002900 <__smakebuf_r+0xc>
 8002938:	4b0d      	ldr	r3, [pc, #52]	; (8002970 <__smakebuf_r+0x7c>)
 800293a:	62b3      	str	r3, [r6, #40]	; 0x28
 800293c:	89a3      	ldrh	r3, [r4, #12]
 800293e:	6020      	str	r0, [r4, #0]
 8002940:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002944:	81a3      	strh	r3, [r4, #12]
 8002946:	9b00      	ldr	r3, [sp, #0]
 8002948:	6120      	str	r0, [r4, #16]
 800294a:	6163      	str	r3, [r4, #20]
 800294c:	9b01      	ldr	r3, [sp, #4]
 800294e:	b15b      	cbz	r3, 8002968 <__smakebuf_r+0x74>
 8002950:	4630      	mov	r0, r6
 8002952:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002956:	f000 f897 	bl	8002a88 <_isatty_r>
 800295a:	b128      	cbz	r0, 8002968 <__smakebuf_r+0x74>
 800295c:	89a3      	ldrh	r3, [r4, #12]
 800295e:	f023 0303 	bic.w	r3, r3, #3
 8002962:	f043 0301 	orr.w	r3, r3, #1
 8002966:	81a3      	strh	r3, [r4, #12]
 8002968:	89a0      	ldrh	r0, [r4, #12]
 800296a:	4305      	orrs	r5, r0
 800296c:	81a5      	strh	r5, [r4, #12]
 800296e:	e7cd      	b.n	800290c <__smakebuf_r+0x18>
 8002970:	08001c61 	.word	0x08001c61

08002974 <memchr>:
 8002974:	4603      	mov	r3, r0
 8002976:	b510      	push	{r4, lr}
 8002978:	b2c9      	uxtb	r1, r1
 800297a:	4402      	add	r2, r0
 800297c:	4293      	cmp	r3, r2
 800297e:	4618      	mov	r0, r3
 8002980:	d101      	bne.n	8002986 <memchr+0x12>
 8002982:	2000      	movs	r0, #0
 8002984:	e003      	b.n	800298e <memchr+0x1a>
 8002986:	7804      	ldrb	r4, [r0, #0]
 8002988:	3301      	adds	r3, #1
 800298a:	428c      	cmp	r4, r1
 800298c:	d1f6      	bne.n	800297c <memchr+0x8>
 800298e:	bd10      	pop	{r4, pc}

08002990 <__malloc_lock>:
 8002990:	4801      	ldr	r0, [pc, #4]	; (8002998 <__malloc_lock+0x8>)
 8002992:	f7ff ba37 	b.w	8001e04 <__retarget_lock_acquire_recursive>
 8002996:	bf00      	nop
 8002998:	200000e4 	.word	0x200000e4

0800299c <__malloc_unlock>:
 800299c:	4801      	ldr	r0, [pc, #4]	; (80029a4 <__malloc_unlock+0x8>)
 800299e:	f7ff ba32 	b.w	8001e06 <__retarget_lock_release_recursive>
 80029a2:	bf00      	nop
 80029a4:	200000e4 	.word	0x200000e4

080029a8 <_free_r>:
 80029a8:	b538      	push	{r3, r4, r5, lr}
 80029aa:	4605      	mov	r5, r0
 80029ac:	2900      	cmp	r1, #0
 80029ae:	d043      	beq.n	8002a38 <_free_r+0x90>
 80029b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80029b4:	1f0c      	subs	r4, r1, #4
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	bfb8      	it	lt
 80029ba:	18e4      	addlt	r4, r4, r3
 80029bc:	f7ff ffe8 	bl	8002990 <__malloc_lock>
 80029c0:	4a1e      	ldr	r2, [pc, #120]	; (8002a3c <_free_r+0x94>)
 80029c2:	6813      	ldr	r3, [r2, #0]
 80029c4:	4610      	mov	r0, r2
 80029c6:	b933      	cbnz	r3, 80029d6 <_free_r+0x2e>
 80029c8:	6063      	str	r3, [r4, #4]
 80029ca:	6014      	str	r4, [r2, #0]
 80029cc:	4628      	mov	r0, r5
 80029ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80029d2:	f7ff bfe3 	b.w	800299c <__malloc_unlock>
 80029d6:	42a3      	cmp	r3, r4
 80029d8:	d90a      	bls.n	80029f0 <_free_r+0x48>
 80029da:	6821      	ldr	r1, [r4, #0]
 80029dc:	1862      	adds	r2, r4, r1
 80029de:	4293      	cmp	r3, r2
 80029e0:	bf01      	itttt	eq
 80029e2:	681a      	ldreq	r2, [r3, #0]
 80029e4:	685b      	ldreq	r3, [r3, #4]
 80029e6:	1852      	addeq	r2, r2, r1
 80029e8:	6022      	streq	r2, [r4, #0]
 80029ea:	6063      	str	r3, [r4, #4]
 80029ec:	6004      	str	r4, [r0, #0]
 80029ee:	e7ed      	b.n	80029cc <_free_r+0x24>
 80029f0:	461a      	mov	r2, r3
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	b10b      	cbz	r3, 80029fa <_free_r+0x52>
 80029f6:	42a3      	cmp	r3, r4
 80029f8:	d9fa      	bls.n	80029f0 <_free_r+0x48>
 80029fa:	6811      	ldr	r1, [r2, #0]
 80029fc:	1850      	adds	r0, r2, r1
 80029fe:	42a0      	cmp	r0, r4
 8002a00:	d10b      	bne.n	8002a1a <_free_r+0x72>
 8002a02:	6820      	ldr	r0, [r4, #0]
 8002a04:	4401      	add	r1, r0
 8002a06:	1850      	adds	r0, r2, r1
 8002a08:	4283      	cmp	r3, r0
 8002a0a:	6011      	str	r1, [r2, #0]
 8002a0c:	d1de      	bne.n	80029cc <_free_r+0x24>
 8002a0e:	6818      	ldr	r0, [r3, #0]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	4401      	add	r1, r0
 8002a14:	6011      	str	r1, [r2, #0]
 8002a16:	6053      	str	r3, [r2, #4]
 8002a18:	e7d8      	b.n	80029cc <_free_r+0x24>
 8002a1a:	d902      	bls.n	8002a22 <_free_r+0x7a>
 8002a1c:	230c      	movs	r3, #12
 8002a1e:	602b      	str	r3, [r5, #0]
 8002a20:	e7d4      	b.n	80029cc <_free_r+0x24>
 8002a22:	6820      	ldr	r0, [r4, #0]
 8002a24:	1821      	adds	r1, r4, r0
 8002a26:	428b      	cmp	r3, r1
 8002a28:	bf01      	itttt	eq
 8002a2a:	6819      	ldreq	r1, [r3, #0]
 8002a2c:	685b      	ldreq	r3, [r3, #4]
 8002a2e:	1809      	addeq	r1, r1, r0
 8002a30:	6021      	streq	r1, [r4, #0]
 8002a32:	6063      	str	r3, [r4, #4]
 8002a34:	6054      	str	r4, [r2, #4]
 8002a36:	e7c9      	b.n	80029cc <_free_r+0x24>
 8002a38:	bd38      	pop	{r3, r4, r5, pc}
 8002a3a:	bf00      	nop
 8002a3c:	20000090 	.word	0x20000090

08002a40 <_read_r>:
 8002a40:	b538      	push	{r3, r4, r5, lr}
 8002a42:	4604      	mov	r4, r0
 8002a44:	4608      	mov	r0, r1
 8002a46:	4611      	mov	r1, r2
 8002a48:	2200      	movs	r2, #0
 8002a4a:	4d05      	ldr	r5, [pc, #20]	; (8002a60 <_read_r+0x20>)
 8002a4c:	602a      	str	r2, [r5, #0]
 8002a4e:	461a      	mov	r2, r3
 8002a50:	f7fd ff11 	bl	8000876 <_read>
 8002a54:	1c43      	adds	r3, r0, #1
 8002a56:	d102      	bne.n	8002a5e <_read_r+0x1e>
 8002a58:	682b      	ldr	r3, [r5, #0]
 8002a5a:	b103      	cbz	r3, 8002a5e <_read_r+0x1e>
 8002a5c:	6023      	str	r3, [r4, #0]
 8002a5e:	bd38      	pop	{r3, r4, r5, pc}
 8002a60:	200000ec 	.word	0x200000ec

08002a64 <_fstat_r>:
 8002a64:	b538      	push	{r3, r4, r5, lr}
 8002a66:	2300      	movs	r3, #0
 8002a68:	4d06      	ldr	r5, [pc, #24]	; (8002a84 <_fstat_r+0x20>)
 8002a6a:	4604      	mov	r4, r0
 8002a6c:	4608      	mov	r0, r1
 8002a6e:	4611      	mov	r1, r2
 8002a70:	602b      	str	r3, [r5, #0]
 8002a72:	f7fd ff28 	bl	80008c6 <_fstat>
 8002a76:	1c43      	adds	r3, r0, #1
 8002a78:	d102      	bne.n	8002a80 <_fstat_r+0x1c>
 8002a7a:	682b      	ldr	r3, [r5, #0]
 8002a7c:	b103      	cbz	r3, 8002a80 <_fstat_r+0x1c>
 8002a7e:	6023      	str	r3, [r4, #0]
 8002a80:	bd38      	pop	{r3, r4, r5, pc}
 8002a82:	bf00      	nop
 8002a84:	200000ec 	.word	0x200000ec

08002a88 <_isatty_r>:
 8002a88:	b538      	push	{r3, r4, r5, lr}
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	4d05      	ldr	r5, [pc, #20]	; (8002aa4 <_isatty_r+0x1c>)
 8002a8e:	4604      	mov	r4, r0
 8002a90:	4608      	mov	r0, r1
 8002a92:	602b      	str	r3, [r5, #0]
 8002a94:	f7fd ff26 	bl	80008e4 <_isatty>
 8002a98:	1c43      	adds	r3, r0, #1
 8002a9a:	d102      	bne.n	8002aa2 <_isatty_r+0x1a>
 8002a9c:	682b      	ldr	r3, [r5, #0]
 8002a9e:	b103      	cbz	r3, 8002aa2 <_isatty_r+0x1a>
 8002aa0:	6023      	str	r3, [r4, #0]
 8002aa2:	bd38      	pop	{r3, r4, r5, pc}
 8002aa4:	200000ec 	.word	0x200000ec

08002aa8 <_init>:
 8002aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002aaa:	bf00      	nop
 8002aac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002aae:	bc08      	pop	{r3}
 8002ab0:	469e      	mov	lr, r3
 8002ab2:	4770      	bx	lr

08002ab4 <_fini>:
 8002ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ab6:	bf00      	nop
 8002ab8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002aba:	bc08      	pop	{r3}
 8002abc:	469e      	mov	lr, r3
 8002abe:	4770      	bx	lr
