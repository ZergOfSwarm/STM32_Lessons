
SEGGER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008dc4  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000228  08008fc4  08008fc4  00018fc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080091ec  080091ec  000201b4  2**0
                  CONTENTS
  4 .ARM          00000008  080091ec  080091ec  000191ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080091f4  080091f4  000201b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080091f4  080091f4  000191f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080091f8  080091f8  000191f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080091fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000074  08009270  00020074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000114  08009310  00020114  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00007a44  200001b4  080093b0  000201b4  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20007bf8  080093b0  00027bf8  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000201b4  2**0
                  CONTENTS, READONLY
 14 .debug_info   00029109  00000000  00000000  000201e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000477e  00000000  00000000  000492eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001e18  00000000  00000000  0004da70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001c60  00000000  00000000  0004f888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00004fcb  00000000  00000000  000514e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00021fb1  00000000  00000000  000564b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0011383f  00000000  00000000  00078464  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  0018bca3  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00008428  00000000  00000000  0018bcf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001b4 	.word	0x200001b4
 800021c:	00000000 	.word	0x00000000
 8000220:	08008fac 	.word	0x08008fac

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001b8 	.word	0x200001b8
 800023c:	08008fac 	.word	0x08008fac

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000250:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000254:	f000 b974 	b.w	8000540 <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9d08      	ldr	r5, [sp, #32]
 8000276:	4604      	mov	r4, r0
 8000278:	468e      	mov	lr, r1
 800027a:	2b00      	cmp	r3, #0
 800027c:	d14d      	bne.n	800031a <__udivmoddi4+0xaa>
 800027e:	428a      	cmp	r2, r1
 8000280:	4694      	mov	ip, r2
 8000282:	d969      	bls.n	8000358 <__udivmoddi4+0xe8>
 8000284:	fab2 f282 	clz	r2, r2
 8000288:	b152      	cbz	r2, 80002a0 <__udivmoddi4+0x30>
 800028a:	fa01 f302 	lsl.w	r3, r1, r2
 800028e:	f1c2 0120 	rsb	r1, r2, #32
 8000292:	fa20 f101 	lsr.w	r1, r0, r1
 8000296:	fa0c fc02 	lsl.w	ip, ip, r2
 800029a:	ea41 0e03 	orr.w	lr, r1, r3
 800029e:	4094      	lsls	r4, r2
 80002a0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002a4:	0c21      	lsrs	r1, r4, #16
 80002a6:	fbbe f6f8 	udiv	r6, lr, r8
 80002aa:	fa1f f78c 	uxth.w	r7, ip
 80002ae:	fb08 e316 	mls	r3, r8, r6, lr
 80002b2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002b6:	fb06 f107 	mul.w	r1, r6, r7
 80002ba:	4299      	cmp	r1, r3
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x64>
 80002be:	eb1c 0303 	adds.w	r3, ip, r3
 80002c2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002c6:	f080 811f 	bcs.w	8000508 <__udivmoddi4+0x298>
 80002ca:	4299      	cmp	r1, r3
 80002cc:	f240 811c 	bls.w	8000508 <__udivmoddi4+0x298>
 80002d0:	3e02      	subs	r6, #2
 80002d2:	4463      	add	r3, ip
 80002d4:	1a5b      	subs	r3, r3, r1
 80002d6:	b2a4      	uxth	r4, r4
 80002d8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002dc:	fb08 3310 	mls	r3, r8, r0, r3
 80002e0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e4:	fb00 f707 	mul.w	r7, r0, r7
 80002e8:	42a7      	cmp	r7, r4
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x92>
 80002ec:	eb1c 0404 	adds.w	r4, ip, r4
 80002f0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002f4:	f080 810a 	bcs.w	800050c <__udivmoddi4+0x29c>
 80002f8:	42a7      	cmp	r7, r4
 80002fa:	f240 8107 	bls.w	800050c <__udivmoddi4+0x29c>
 80002fe:	4464      	add	r4, ip
 8000300:	3802      	subs	r0, #2
 8000302:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000306:	1be4      	subs	r4, r4, r7
 8000308:	2600      	movs	r6, #0
 800030a:	b11d      	cbz	r5, 8000314 <__udivmoddi4+0xa4>
 800030c:	40d4      	lsrs	r4, r2
 800030e:	2300      	movs	r3, #0
 8000310:	e9c5 4300 	strd	r4, r3, [r5]
 8000314:	4631      	mov	r1, r6
 8000316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031a:	428b      	cmp	r3, r1
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0xc2>
 800031e:	2d00      	cmp	r5, #0
 8000320:	f000 80ef 	beq.w	8000502 <__udivmoddi4+0x292>
 8000324:	2600      	movs	r6, #0
 8000326:	e9c5 0100 	strd	r0, r1, [r5]
 800032a:	4630      	mov	r0, r6
 800032c:	4631      	mov	r1, r6
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f683 	clz	r6, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x160>
 800033a:	428b      	cmp	r3, r1
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0xd4>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80f9 	bhi.w	8000536 <__udivmoddi4+0x2c6>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb61 0303 	sbc.w	r3, r1, r3
 800034a:	2001      	movs	r0, #1
 800034c:	469e      	mov	lr, r3
 800034e:	2d00      	cmp	r5, #0
 8000350:	d0e0      	beq.n	8000314 <__udivmoddi4+0xa4>
 8000352:	e9c5 4e00 	strd	r4, lr, [r5]
 8000356:	e7dd      	b.n	8000314 <__udivmoddi4+0xa4>
 8000358:	b902      	cbnz	r2, 800035c <__udivmoddi4+0xec>
 800035a:	deff      	udf	#255	; 0xff
 800035c:	fab2 f282 	clz	r2, r2
 8000360:	2a00      	cmp	r2, #0
 8000362:	f040 8092 	bne.w	800048a <__udivmoddi4+0x21a>
 8000366:	eba1 010c 	sub.w	r1, r1, ip
 800036a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800036e:	fa1f fe8c 	uxth.w	lr, ip
 8000372:	2601      	movs	r6, #1
 8000374:	0c20      	lsrs	r0, r4, #16
 8000376:	fbb1 f3f7 	udiv	r3, r1, r7
 800037a:	fb07 1113 	mls	r1, r7, r3, r1
 800037e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000382:	fb0e f003 	mul.w	r0, lr, r3
 8000386:	4288      	cmp	r0, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0x12c>
 800038a:	eb1c 0101 	adds.w	r1, ip, r1
 800038e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x12a>
 8000394:	4288      	cmp	r0, r1
 8000396:	f200 80cb 	bhi.w	8000530 <__udivmoddi4+0x2c0>
 800039a:	4643      	mov	r3, r8
 800039c:	1a09      	subs	r1, r1, r0
 800039e:	b2a4      	uxth	r4, r4
 80003a0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003a4:	fb07 1110 	mls	r1, r7, r0, r1
 80003a8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ac:	fb0e fe00 	mul.w	lr, lr, r0
 80003b0:	45a6      	cmp	lr, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x156>
 80003b4:	eb1c 0404 	adds.w	r4, ip, r4
 80003b8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003bc:	d202      	bcs.n	80003c4 <__udivmoddi4+0x154>
 80003be:	45a6      	cmp	lr, r4
 80003c0:	f200 80bb 	bhi.w	800053a <__udivmoddi4+0x2ca>
 80003c4:	4608      	mov	r0, r1
 80003c6:	eba4 040e 	sub.w	r4, r4, lr
 80003ca:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ce:	e79c      	b.n	800030a <__udivmoddi4+0x9a>
 80003d0:	f1c6 0720 	rsb	r7, r6, #32
 80003d4:	40b3      	lsls	r3, r6
 80003d6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003da:	ea4c 0c03 	orr.w	ip, ip, r3
 80003de:	fa20 f407 	lsr.w	r4, r0, r7
 80003e2:	fa01 f306 	lsl.w	r3, r1, r6
 80003e6:	431c      	orrs	r4, r3
 80003e8:	40f9      	lsrs	r1, r7
 80003ea:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ee:	fa00 f306 	lsl.w	r3, r0, r6
 80003f2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003f6:	0c20      	lsrs	r0, r4, #16
 80003f8:	fa1f fe8c 	uxth.w	lr, ip
 80003fc:	fb09 1118 	mls	r1, r9, r8, r1
 8000400:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000404:	fb08 f00e 	mul.w	r0, r8, lr
 8000408:	4288      	cmp	r0, r1
 800040a:	fa02 f206 	lsl.w	r2, r2, r6
 800040e:	d90b      	bls.n	8000428 <__udivmoddi4+0x1b8>
 8000410:	eb1c 0101 	adds.w	r1, ip, r1
 8000414:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000418:	f080 8088 	bcs.w	800052c <__udivmoddi4+0x2bc>
 800041c:	4288      	cmp	r0, r1
 800041e:	f240 8085 	bls.w	800052c <__udivmoddi4+0x2bc>
 8000422:	f1a8 0802 	sub.w	r8, r8, #2
 8000426:	4461      	add	r1, ip
 8000428:	1a09      	subs	r1, r1, r0
 800042a:	b2a4      	uxth	r4, r4
 800042c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000430:	fb09 1110 	mls	r1, r9, r0, r1
 8000434:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000438:	fb00 fe0e 	mul.w	lr, r0, lr
 800043c:	458e      	cmp	lr, r1
 800043e:	d908      	bls.n	8000452 <__udivmoddi4+0x1e2>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000448:	d26c      	bcs.n	8000524 <__udivmoddi4+0x2b4>
 800044a:	458e      	cmp	lr, r1
 800044c:	d96a      	bls.n	8000524 <__udivmoddi4+0x2b4>
 800044e:	3802      	subs	r0, #2
 8000450:	4461      	add	r1, ip
 8000452:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000456:	fba0 9402 	umull	r9, r4, r0, r2
 800045a:	eba1 010e 	sub.w	r1, r1, lr
 800045e:	42a1      	cmp	r1, r4
 8000460:	46c8      	mov	r8, r9
 8000462:	46a6      	mov	lr, r4
 8000464:	d356      	bcc.n	8000514 <__udivmoddi4+0x2a4>
 8000466:	d053      	beq.n	8000510 <__udivmoddi4+0x2a0>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x212>
 800046a:	ebb3 0208 	subs.w	r2, r3, r8
 800046e:	eb61 010e 	sbc.w	r1, r1, lr
 8000472:	fa01 f707 	lsl.w	r7, r1, r7
 8000476:	fa22 f306 	lsr.w	r3, r2, r6
 800047a:	40f1      	lsrs	r1, r6
 800047c:	431f      	orrs	r7, r3
 800047e:	e9c5 7100 	strd	r7, r1, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	f1c2 0320 	rsb	r3, r2, #32
 800048e:	40d8      	lsrs	r0, r3
 8000490:	fa0c fc02 	lsl.w	ip, ip, r2
 8000494:	fa21 f303 	lsr.w	r3, r1, r3
 8000498:	4091      	lsls	r1, r2
 800049a:	4301      	orrs	r1, r0
 800049c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a0:	fa1f fe8c 	uxth.w	lr, ip
 80004a4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004a8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ac:	0c0b      	lsrs	r3, r1, #16
 80004ae:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004b2:	fb00 f60e 	mul.w	r6, r0, lr
 80004b6:	429e      	cmp	r6, r3
 80004b8:	fa04 f402 	lsl.w	r4, r4, r2
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x260>
 80004be:	eb1c 0303 	adds.w	r3, ip, r3
 80004c2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004c6:	d22f      	bcs.n	8000528 <__udivmoddi4+0x2b8>
 80004c8:	429e      	cmp	r6, r3
 80004ca:	d92d      	bls.n	8000528 <__udivmoddi4+0x2b8>
 80004cc:	3802      	subs	r0, #2
 80004ce:	4463      	add	r3, ip
 80004d0:	1b9b      	subs	r3, r3, r6
 80004d2:	b289      	uxth	r1, r1
 80004d4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004d8:	fb07 3316 	mls	r3, r7, r6, r3
 80004dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004e0:	fb06 f30e 	mul.w	r3, r6, lr
 80004e4:	428b      	cmp	r3, r1
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x28a>
 80004e8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ec:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004f0:	d216      	bcs.n	8000520 <__udivmoddi4+0x2b0>
 80004f2:	428b      	cmp	r3, r1
 80004f4:	d914      	bls.n	8000520 <__udivmoddi4+0x2b0>
 80004f6:	3e02      	subs	r6, #2
 80004f8:	4461      	add	r1, ip
 80004fa:	1ac9      	subs	r1, r1, r3
 80004fc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000500:	e738      	b.n	8000374 <__udivmoddi4+0x104>
 8000502:	462e      	mov	r6, r5
 8000504:	4628      	mov	r0, r5
 8000506:	e705      	b.n	8000314 <__udivmoddi4+0xa4>
 8000508:	4606      	mov	r6, r0
 800050a:	e6e3      	b.n	80002d4 <__udivmoddi4+0x64>
 800050c:	4618      	mov	r0, r3
 800050e:	e6f8      	b.n	8000302 <__udivmoddi4+0x92>
 8000510:	454b      	cmp	r3, r9
 8000512:	d2a9      	bcs.n	8000468 <__udivmoddi4+0x1f8>
 8000514:	ebb9 0802 	subs.w	r8, r9, r2
 8000518:	eb64 0e0c 	sbc.w	lr, r4, ip
 800051c:	3801      	subs	r0, #1
 800051e:	e7a3      	b.n	8000468 <__udivmoddi4+0x1f8>
 8000520:	4646      	mov	r6, r8
 8000522:	e7ea      	b.n	80004fa <__udivmoddi4+0x28a>
 8000524:	4620      	mov	r0, r4
 8000526:	e794      	b.n	8000452 <__udivmoddi4+0x1e2>
 8000528:	4640      	mov	r0, r8
 800052a:	e7d1      	b.n	80004d0 <__udivmoddi4+0x260>
 800052c:	46d0      	mov	r8, sl
 800052e:	e77b      	b.n	8000428 <__udivmoddi4+0x1b8>
 8000530:	3b02      	subs	r3, #2
 8000532:	4461      	add	r1, ip
 8000534:	e732      	b.n	800039c <__udivmoddi4+0x12c>
 8000536:	4630      	mov	r0, r6
 8000538:	e709      	b.n	800034e <__udivmoddi4+0xde>
 800053a:	4464      	add	r4, ip
 800053c:	3802      	subs	r0, #2
 800053e:	e742      	b.n	80003c6 <__udivmoddi4+0x156>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	DWT->CTRL |=(1<<0); // Enable CYCCNT in DWT_CTRL.
 8000548:	4b1d      	ldr	r3, [pc, #116]	; (80005c0 <main+0x7c>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	4a1c      	ldr	r2, [pc, #112]	; (80005c0 <main+0x7c>)
 800054e:	f043 0301 	orr.w	r3, r3, #1
 8000552:	6013      	str	r3, [r2, #0]
	SEGGER_SYSVIEW_Conf(); /* Configure and initialize SystemView */
 8000554:	f006 ff98 	bl	8007488 <SEGGER_SYSVIEW_Conf>
	SEGGER_SYSVIEW_Start();/* Start SystemView */
 8000558:	f007 ff1c 	bl	8008394 <SEGGER_SYSVIEW_Start>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800055c:	f000 fd25 	bl	8000faa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000560:	f000 f848 	bl	80005f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000564:	f000 f962 	bl	800082c <MX_GPIO_Init>
  MX_ETH_Init();
 8000568:	f000 f8b4 	bl	80006d4 <MX_ETH_Init>
  MX_USART3_UART_Init();
 800056c:	f000 f900 	bl	8000770 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000570:	f000 f92e 	bl	80007d0 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000574:	f004 f86c 	bl	8004650 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000578:	4a12      	ldr	r2, [pc, #72]	; (80005c4 <main+0x80>)
 800057a:	2100      	movs	r1, #0
 800057c:	4812      	ldr	r0, [pc, #72]	; (80005c8 <main+0x84>)
 800057e:	f004 f8d1 	bl	8004724 <osThreadNew>
 8000582:	4603      	mov	r3, r0
 8000584:	4a11      	ldr	r2, [pc, #68]	; (80005cc <main+0x88>)
 8000586:	6013      	str	r3, [r2, #0]

  /* creation of myTask_ON */
  myTask_ONHandle = osThreadNew(StartTask_ON, NULL, &myTask_ON_attributes);
 8000588:	4a11      	ldr	r2, [pc, #68]	; (80005d0 <main+0x8c>)
 800058a:	2100      	movs	r1, #0
 800058c:	4811      	ldr	r0, [pc, #68]	; (80005d4 <main+0x90>)
 800058e:	f004 f8c9 	bl	8004724 <osThreadNew>
 8000592:	4603      	mov	r3, r0
 8000594:	4a10      	ldr	r2, [pc, #64]	; (80005d8 <main+0x94>)
 8000596:	6013      	str	r3, [r2, #0]

  /* creation of myTask_OFF */
  myTask_OFFHandle = osThreadNew(StartTask_OFF, NULL, &myTask_OFF_attributes);
 8000598:	4a10      	ldr	r2, [pc, #64]	; (80005dc <main+0x98>)
 800059a:	2100      	movs	r1, #0
 800059c:	4810      	ldr	r0, [pc, #64]	; (80005e0 <main+0x9c>)
 800059e:	f004 f8c1 	bl	8004724 <osThreadNew>
 80005a2:	4603      	mov	r3, r0
 80005a4:	4a0f      	ldr	r2, [pc, #60]	; (80005e4 <main+0xa0>)
 80005a6:	6013      	str	r3, [r2, #0]

  /* creation of myTask_Test */
  myTask_TestHandle = osThreadNew(StartTask_Test, NULL, &myTask_Test_attributes);
 80005a8:	4a0f      	ldr	r2, [pc, #60]	; (80005e8 <main+0xa4>)
 80005aa:	2100      	movs	r1, #0
 80005ac:	480f      	ldr	r0, [pc, #60]	; (80005ec <main+0xa8>)
 80005ae:	f004 f8b9 	bl	8004724 <osThreadNew>
 80005b2:	4603      	mov	r3, r0
 80005b4:	4a0e      	ldr	r2, [pc, #56]	; (80005f0 <main+0xac>)
 80005b6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005b8:	f004 f87e 	bl	80046b8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005bc:	e7fe      	b.n	80005bc <main+0x78>
 80005be:	bf00      	nop
 80005c0:	e0001000 	.word	0xe0001000
 80005c4:	080090d0 	.word	0x080090d0
 80005c8:	08000971 	.word	0x08000971
 80005cc:	20000850 	.word	0x20000850
 80005d0:	080090f4 	.word	0x080090f4
 80005d4:	08000981 	.word	0x08000981
 80005d8:	20000854 	.word	0x20000854
 80005dc:	08009118 	.word	0x08009118
 80005e0:	080009dd 	.word	0x080009dd
 80005e4:	20000858 	.word	0x20000858
 80005e8:	0800913c 	.word	0x0800913c
 80005ec:	08000a3d 	.word	0x08000a3d
 80005f0:	2000085c 	.word	0x2000085c

080005f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b094      	sub	sp, #80	; 0x50
 80005f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005fa:	f107 031c 	add.w	r3, r7, #28
 80005fe:	2234      	movs	r2, #52	; 0x34
 8000600:	2100      	movs	r1, #0
 8000602:	4618      	mov	r0, r3
 8000604:	f008 fc08 	bl	8008e18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000608:	f107 0308 	add.w	r3, r7, #8
 800060c:	2200      	movs	r2, #0
 800060e:	601a      	str	r2, [r3, #0]
 8000610:	605a      	str	r2, [r3, #4]
 8000612:	609a      	str	r2, [r3, #8]
 8000614:	60da      	str	r2, [r3, #12]
 8000616:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000618:	f001 fc48 	bl	8001eac <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800061c:	4b2b      	ldr	r3, [pc, #172]	; (80006cc <SystemClock_Config+0xd8>)
 800061e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000620:	4a2a      	ldr	r2, [pc, #168]	; (80006cc <SystemClock_Config+0xd8>)
 8000622:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000626:	6413      	str	r3, [r2, #64]	; 0x40
 8000628:	4b28      	ldr	r3, [pc, #160]	; (80006cc <SystemClock_Config+0xd8>)
 800062a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800062c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000630:	607b      	str	r3, [r7, #4]
 8000632:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000634:	4b26      	ldr	r3, [pc, #152]	; (80006d0 <SystemClock_Config+0xdc>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	4a25      	ldr	r2, [pc, #148]	; (80006d0 <SystemClock_Config+0xdc>)
 800063a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800063e:	6013      	str	r3, [r2, #0]
 8000640:	4b23      	ldr	r3, [pc, #140]	; (80006d0 <SystemClock_Config+0xdc>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000648:	603b      	str	r3, [r7, #0]
 800064a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800064c:	2301      	movs	r3, #1
 800064e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000650:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000654:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000656:	2302      	movs	r3, #2
 8000658:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800065a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800065e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000660:	2304      	movs	r3, #4
 8000662:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000664:	23d8      	movs	r3, #216	; 0xd8
 8000666:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000668:	2302      	movs	r3, #2
 800066a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800066c:	2309      	movs	r3, #9
 800066e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000670:	2302      	movs	r3, #2
 8000672:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000674:	f107 031c 	add.w	r3, r7, #28
 8000678:	4618      	mov	r0, r3
 800067a:	f001 fc77 	bl	8001f6c <HAL_RCC_OscConfig>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000684:	f000 f9fc 	bl	8000a80 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000688:	f001 fc20 	bl	8001ecc <HAL_PWREx_EnableOverDrive>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000692:	f000 f9f5 	bl	8000a80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000696:	230f      	movs	r3, #15
 8000698:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800069a:	2302      	movs	r3, #2
 800069c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800069e:	2300      	movs	r3, #0
 80006a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006a2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ac:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80006ae:	f107 0308 	add.w	r3, r7, #8
 80006b2:	2107      	movs	r1, #7
 80006b4:	4618      	mov	r0, r3
 80006b6:	f001 ff07 	bl	80024c8 <HAL_RCC_ClockConfig>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80006c0:	f000 f9de 	bl	8000a80 <Error_Handler>
  }
}
 80006c4:	bf00      	nop
 80006c6:	3750      	adds	r7, #80	; 0x50
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	40023800 	.word	0x40023800
 80006d0:	40007000 	.word	0x40007000

080006d4 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80006d8:	4b1f      	ldr	r3, [pc, #124]	; (8000758 <MX_ETH_Init+0x84>)
 80006da:	4a20      	ldr	r2, [pc, #128]	; (800075c <MX_ETH_Init+0x88>)
 80006dc:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80006de:	4b20      	ldr	r3, [pc, #128]	; (8000760 <MX_ETH_Init+0x8c>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80006e4:	4b1e      	ldr	r3, [pc, #120]	; (8000760 <MX_ETH_Init+0x8c>)
 80006e6:	2280      	movs	r2, #128	; 0x80
 80006e8:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80006ea:	4b1d      	ldr	r3, [pc, #116]	; (8000760 <MX_ETH_Init+0x8c>)
 80006ec:	22e1      	movs	r2, #225	; 0xe1
 80006ee:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80006f0:	4b1b      	ldr	r3, [pc, #108]	; (8000760 <MX_ETH_Init+0x8c>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80006f6:	4b1a      	ldr	r3, [pc, #104]	; (8000760 <MX_ETH_Init+0x8c>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80006fc:	4b18      	ldr	r3, [pc, #96]	; (8000760 <MX_ETH_Init+0x8c>)
 80006fe:	2200      	movs	r2, #0
 8000700:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000702:	4b15      	ldr	r3, [pc, #84]	; (8000758 <MX_ETH_Init+0x84>)
 8000704:	4a16      	ldr	r2, [pc, #88]	; (8000760 <MX_ETH_Init+0x8c>)
 8000706:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000708:	4b13      	ldr	r3, [pc, #76]	; (8000758 <MX_ETH_Init+0x84>)
 800070a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800070e:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000710:	4b11      	ldr	r3, [pc, #68]	; (8000758 <MX_ETH_Init+0x84>)
 8000712:	4a14      	ldr	r2, [pc, #80]	; (8000764 <MX_ETH_Init+0x90>)
 8000714:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000716:	4b10      	ldr	r3, [pc, #64]	; (8000758 <MX_ETH_Init+0x84>)
 8000718:	4a13      	ldr	r2, [pc, #76]	; (8000768 <MX_ETH_Init+0x94>)
 800071a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800071c:	4b0e      	ldr	r3, [pc, #56]	; (8000758 <MX_ETH_Init+0x84>)
 800071e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000722:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000724:	480c      	ldr	r0, [pc, #48]	; (8000758 <MX_ETH_Init+0x84>)
 8000726:	f000 fd73 	bl	8001210 <HAL_ETH_Init>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000730:	f000 f9a6 	bl	8000a80 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000734:	2238      	movs	r2, #56	; 0x38
 8000736:	2100      	movs	r1, #0
 8000738:	480c      	ldr	r0, [pc, #48]	; (800076c <MX_ETH_Init+0x98>)
 800073a:	f008 fb6d 	bl	8008e18 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800073e:	4b0b      	ldr	r3, [pc, #44]	; (800076c <MX_ETH_Init+0x98>)
 8000740:	2221      	movs	r2, #33	; 0x21
 8000742:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000744:	4b09      	ldr	r3, [pc, #36]	; (800076c <MX_ETH_Init+0x98>)
 8000746:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800074a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800074c:	4b07      	ldr	r3, [pc, #28]	; (800076c <MX_ETH_Init+0x98>)
 800074e:	2200      	movs	r2, #0
 8000750:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000752:	bf00      	nop
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	20000210 	.word	0x20000210
 800075c:	40028000 	.word	0x40028000
 8000760:	20000b1c 	.word	0x20000b1c
 8000764:	20000114 	.word	0x20000114
 8000768:	20000074 	.word	0x20000074
 800076c:	200001d8 	.word	0x200001d8

08000770 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000774:	4b14      	ldr	r3, [pc, #80]	; (80007c8 <MX_USART3_UART_Init+0x58>)
 8000776:	4a15      	ldr	r2, [pc, #84]	; (80007cc <MX_USART3_UART_Init+0x5c>)
 8000778:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800077a:	4b13      	ldr	r3, [pc, #76]	; (80007c8 <MX_USART3_UART_Init+0x58>)
 800077c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000780:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000782:	4b11      	ldr	r3, [pc, #68]	; (80007c8 <MX_USART3_UART_Init+0x58>)
 8000784:	2200      	movs	r2, #0
 8000786:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000788:	4b0f      	ldr	r3, [pc, #60]	; (80007c8 <MX_USART3_UART_Init+0x58>)
 800078a:	2200      	movs	r2, #0
 800078c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800078e:	4b0e      	ldr	r3, [pc, #56]	; (80007c8 <MX_USART3_UART_Init+0x58>)
 8000790:	2200      	movs	r2, #0
 8000792:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000794:	4b0c      	ldr	r3, [pc, #48]	; (80007c8 <MX_USART3_UART_Init+0x58>)
 8000796:	220c      	movs	r2, #12
 8000798:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800079a:	4b0b      	ldr	r3, [pc, #44]	; (80007c8 <MX_USART3_UART_Init+0x58>)
 800079c:	2200      	movs	r2, #0
 800079e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007a0:	4b09      	ldr	r3, [pc, #36]	; (80007c8 <MX_USART3_UART_Init+0x58>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007a6:	4b08      	ldr	r3, [pc, #32]	; (80007c8 <MX_USART3_UART_Init+0x58>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007ac:	4b06      	ldr	r3, [pc, #24]	; (80007c8 <MX_USART3_UART_Init+0x58>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007b2:	4805      	ldr	r0, [pc, #20]	; (80007c8 <MX_USART3_UART_Init+0x58>)
 80007b4:	f002 ffe8 	bl	8003788 <HAL_UART_Init>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80007be:	f000 f95f 	bl	8000a80 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80007c2:	bf00      	nop
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	200002c0 	.word	0x200002c0
 80007cc:	40004800 	.word	0x40004800

080007d0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80007d4:	4b14      	ldr	r3, [pc, #80]	; (8000828 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007d6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80007da:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80007dc:	4b12      	ldr	r3, [pc, #72]	; (8000828 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007de:	2206      	movs	r2, #6
 80007e0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80007e2:	4b11      	ldr	r3, [pc, #68]	; (8000828 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007e4:	2202      	movs	r2, #2
 80007e6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80007e8:	4b0f      	ldr	r3, [pc, #60]	; (8000828 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80007ee:	4b0e      	ldr	r3, [pc, #56]	; (8000828 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007f0:	2202      	movs	r2, #2
 80007f2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80007f4:	4b0c      	ldr	r3, [pc, #48]	; (8000828 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007f6:	2201      	movs	r2, #1
 80007f8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80007fa:	4b0b      	ldr	r3, [pc, #44]	; (8000828 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000800:	4b09      	ldr	r3, [pc, #36]	; (8000828 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000802:	2200      	movs	r2, #0
 8000804:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000806:	4b08      	ldr	r3, [pc, #32]	; (8000828 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000808:	2201      	movs	r2, #1
 800080a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800080c:	4b06      	ldr	r3, [pc, #24]	; (8000828 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800080e:	2200      	movs	r2, #0
 8000810:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000812:	4805      	ldr	r0, [pc, #20]	; (8000828 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000814:	f001 fa01 	bl	8001c1a <HAL_PCD_Init>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800081e:	f000 f92f 	bl	8000a80 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000822:	bf00      	nop
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	20000348 	.word	0x20000348

0800082c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b08c      	sub	sp, #48	; 0x30
 8000830:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000832:	f107 031c 	add.w	r3, r7, #28
 8000836:	2200      	movs	r2, #0
 8000838:	601a      	str	r2, [r3, #0]
 800083a:	605a      	str	r2, [r3, #4]
 800083c:	609a      	str	r2, [r3, #8]
 800083e:	60da      	str	r2, [r3, #12]
 8000840:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000842:	4b47      	ldr	r3, [pc, #284]	; (8000960 <MX_GPIO_Init+0x134>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	4a46      	ldr	r2, [pc, #280]	; (8000960 <MX_GPIO_Init+0x134>)
 8000848:	f043 0304 	orr.w	r3, r3, #4
 800084c:	6313      	str	r3, [r2, #48]	; 0x30
 800084e:	4b44      	ldr	r3, [pc, #272]	; (8000960 <MX_GPIO_Init+0x134>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	f003 0304 	and.w	r3, r3, #4
 8000856:	61bb      	str	r3, [r7, #24]
 8000858:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800085a:	4b41      	ldr	r3, [pc, #260]	; (8000960 <MX_GPIO_Init+0x134>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	4a40      	ldr	r2, [pc, #256]	; (8000960 <MX_GPIO_Init+0x134>)
 8000860:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000864:	6313      	str	r3, [r2, #48]	; 0x30
 8000866:	4b3e      	ldr	r3, [pc, #248]	; (8000960 <MX_GPIO_Init+0x134>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800086e:	617b      	str	r3, [r7, #20]
 8000870:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000872:	4b3b      	ldr	r3, [pc, #236]	; (8000960 <MX_GPIO_Init+0x134>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	4a3a      	ldr	r2, [pc, #232]	; (8000960 <MX_GPIO_Init+0x134>)
 8000878:	f043 0301 	orr.w	r3, r3, #1
 800087c:	6313      	str	r3, [r2, #48]	; 0x30
 800087e:	4b38      	ldr	r3, [pc, #224]	; (8000960 <MX_GPIO_Init+0x134>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	f003 0301 	and.w	r3, r3, #1
 8000886:	613b      	str	r3, [r7, #16]
 8000888:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800088a:	4b35      	ldr	r3, [pc, #212]	; (8000960 <MX_GPIO_Init+0x134>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	4a34      	ldr	r2, [pc, #208]	; (8000960 <MX_GPIO_Init+0x134>)
 8000890:	f043 0302 	orr.w	r3, r3, #2
 8000894:	6313      	str	r3, [r2, #48]	; 0x30
 8000896:	4b32      	ldr	r3, [pc, #200]	; (8000960 <MX_GPIO_Init+0x134>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	f003 0302 	and.w	r3, r3, #2
 800089e:	60fb      	str	r3, [r7, #12]
 80008a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008a2:	4b2f      	ldr	r3, [pc, #188]	; (8000960 <MX_GPIO_Init+0x134>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	4a2e      	ldr	r2, [pc, #184]	; (8000960 <MX_GPIO_Init+0x134>)
 80008a8:	f043 0308 	orr.w	r3, r3, #8
 80008ac:	6313      	str	r3, [r2, #48]	; 0x30
 80008ae:	4b2c      	ldr	r3, [pc, #176]	; (8000960 <MX_GPIO_Init+0x134>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	f003 0308 	and.w	r3, r3, #8
 80008b6:	60bb      	str	r3, [r7, #8]
 80008b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008ba:	4b29      	ldr	r3, [pc, #164]	; (8000960 <MX_GPIO_Init+0x134>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	4a28      	ldr	r2, [pc, #160]	; (8000960 <MX_GPIO_Init+0x134>)
 80008c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008c4:	6313      	str	r3, [r2, #48]	; 0x30
 80008c6:	4b26      	ldr	r3, [pc, #152]	; (8000960 <MX_GPIO_Init+0x134>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008ce:	607b      	str	r3, [r7, #4]
 80008d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80008d2:	2200      	movs	r2, #0
 80008d4:	f244 0181 	movw	r1, #16513	; 0x4081
 80008d8:	4822      	ldr	r0, [pc, #136]	; (8000964 <MX_GPIO_Init+0x138>)
 80008da:	f001 f96b 	bl	8001bb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80008de:	2200      	movs	r2, #0
 80008e0:	2140      	movs	r1, #64	; 0x40
 80008e2:	4821      	ldr	r0, [pc, #132]	; (8000968 <MX_GPIO_Init+0x13c>)
 80008e4:	f001 f966 	bl	8001bb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80008e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008ee:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	2300      	movs	r3, #0
 80008f6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80008f8:	f107 031c 	add.w	r3, r7, #28
 80008fc:	4619      	mov	r1, r3
 80008fe:	481b      	ldr	r0, [pc, #108]	; (800096c <MX_GPIO_Init+0x140>)
 8000900:	f000 ffac 	bl	800185c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000904:	f244 0381 	movw	r3, #16513	; 0x4081
 8000908:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090a:	2301      	movs	r3, #1
 800090c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090e:	2300      	movs	r3, #0
 8000910:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000912:	2300      	movs	r3, #0
 8000914:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000916:	f107 031c 	add.w	r3, r7, #28
 800091a:	4619      	mov	r1, r3
 800091c:	4811      	ldr	r0, [pc, #68]	; (8000964 <MX_GPIO_Init+0x138>)
 800091e:	f000 ff9d 	bl	800185c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000922:	2340      	movs	r3, #64	; 0x40
 8000924:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000926:	2301      	movs	r3, #1
 8000928:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092a:	2300      	movs	r3, #0
 800092c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092e:	2300      	movs	r3, #0
 8000930:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000932:	f107 031c 	add.w	r3, r7, #28
 8000936:	4619      	mov	r1, r3
 8000938:	480b      	ldr	r0, [pc, #44]	; (8000968 <MX_GPIO_Init+0x13c>)
 800093a:	f000 ff8f 	bl	800185c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800093e:	2380      	movs	r3, #128	; 0x80
 8000940:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000942:	2300      	movs	r3, #0
 8000944:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000946:	2300      	movs	r3, #0
 8000948:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800094a:	f107 031c 	add.w	r3, r7, #28
 800094e:	4619      	mov	r1, r3
 8000950:	4805      	ldr	r0, [pc, #20]	; (8000968 <MX_GPIO_Init+0x13c>)
 8000952:	f000 ff83 	bl	800185c <HAL_GPIO_Init>

}
 8000956:	bf00      	nop
 8000958:	3730      	adds	r7, #48	; 0x30
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	40023800 	.word	0x40023800
 8000964:	40020400 	.word	0x40020400
 8000968:	40021800 	.word	0x40021800
 800096c:	40020800 	.word	0x40020800

08000970 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000978:	2001      	movs	r0, #1
 800097a:	f003 ff79 	bl	8004870 <osDelay>
 800097e:	e7fb      	b.n	8000978 <StartDefaultTask+0x8>

08000980 <StartTask_ON>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask_ON */
void StartTask_ON(void *argument)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask_ON */
  /* Infinite loop */
  for(;;)
	{
		if (flag == 1) {
 8000988:	4b11      	ldr	r3, [pc, #68]	; (80009d0 <StartTask_ON+0x50>)
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	2b00      	cmp	r3, #0
 800098e:	d00f      	beq.n	80009b0 <StartTask_ON+0x30>
			if (HAL_GetTick() - T >= 250) {
 8000990:	f000 fb2c 	bl	8000fec <HAL_GetTick>
 8000994:	4602      	mov	r2, r0
 8000996:	4b0f      	ldr	r3, [pc, #60]	; (80009d4 <StartTask_ON+0x54>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	1ad3      	subs	r3, r2, r3
 800099c:	2bf9      	cmp	r3, #249	; 0xf9
 800099e:	d907      	bls.n	80009b0 <StartTask_ON+0x30>
				flag = 0;
 80009a0:	4b0b      	ldr	r3, [pc, #44]	; (80009d0 <StartTask_ON+0x50>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	701a      	strb	r2, [r3, #0]
				T = HAL_GetTick();
 80009a6:	f000 fb21 	bl	8000fec <HAL_GetTick>
 80009aa:	4603      	mov	r3, r0
 80009ac:	4a09      	ldr	r2, [pc, #36]	; (80009d4 <StartTask_ON+0x54>)
 80009ae:	6013      	str	r3, [r2, #0]
			}
		}
		HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, flag);
 80009b0:	4b07      	ldr	r3, [pc, #28]	; (80009d0 <StartTask_ON+0x50>)
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	461a      	mov	r2, r3
 80009b6:	2101      	movs	r1, #1
 80009b8:	4807      	ldr	r0, [pc, #28]	; (80009d8 <StartTask_ON+0x58>)
 80009ba:	f001 f8fb 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, flag);
 80009be:	4b04      	ldr	r3, [pc, #16]	; (80009d0 <StartTask_ON+0x50>)
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	461a      	mov	r2, r3
 80009c4:	2180      	movs	r1, #128	; 0x80
 80009c6:	4804      	ldr	r0, [pc, #16]	; (80009d8 <StartTask_ON+0x58>)
 80009c8:	f001 f8f4 	bl	8001bb4 <HAL_GPIO_WritePin>
		if (flag == 1) {
 80009cc:	e7dc      	b.n	8000988 <StartTask_ON+0x8>
 80009ce:	bf00      	nop
 80009d0:	200001d0 	.word	0x200001d0
 80009d4:	200001d4 	.word	0x200001d4
 80009d8:	40020400 	.word	0x40020400

080009dc <StartTask_OFF>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask_OFF */
void StartTask_OFF(void *argument)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask_OFF */
  /* Infinite loop */
  for(;;)
	{
		if (flag == 0) {
 80009e4:	4b12      	ldr	r3, [pc, #72]	; (8000a30 <StartTask_OFF+0x54>)
 80009e6:	781b      	ldrb	r3, [r3, #0]
 80009e8:	f083 0301 	eor.w	r3, r3, #1
 80009ec:	b2db      	uxtb	r3, r3
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d00f      	beq.n	8000a12 <StartTask_OFF+0x36>
			if (HAL_GetTick() - T >= 250) {
 80009f2:	f000 fafb 	bl	8000fec <HAL_GetTick>
 80009f6:	4602      	mov	r2, r0
 80009f8:	4b0e      	ldr	r3, [pc, #56]	; (8000a34 <StartTask_OFF+0x58>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	1ad3      	subs	r3, r2, r3
 80009fe:	2bf9      	cmp	r3, #249	; 0xf9
 8000a00:	d907      	bls.n	8000a12 <StartTask_OFF+0x36>
				flag = 1;
 8000a02:	4b0b      	ldr	r3, [pc, #44]	; (8000a30 <StartTask_OFF+0x54>)
 8000a04:	2201      	movs	r2, #1
 8000a06:	701a      	strb	r2, [r3, #0]
				T = HAL_GetTick();
 8000a08:	f000 faf0 	bl	8000fec <HAL_GetTick>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	4a09      	ldr	r2, [pc, #36]	; (8000a34 <StartTask_OFF+0x58>)
 8000a10:	6013      	str	r3, [r2, #0]
			}
		}
		HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, flag);
 8000a12:	4b07      	ldr	r3, [pc, #28]	; (8000a30 <StartTask_OFF+0x54>)
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	461a      	mov	r2, r3
 8000a18:	2101      	movs	r1, #1
 8000a1a:	4807      	ldr	r0, [pc, #28]	; (8000a38 <StartTask_OFF+0x5c>)
 8000a1c:	f001 f8ca 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, flag);
 8000a20:	4b03      	ldr	r3, [pc, #12]	; (8000a30 <StartTask_OFF+0x54>)
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	461a      	mov	r2, r3
 8000a26:	2180      	movs	r1, #128	; 0x80
 8000a28:	4803      	ldr	r0, [pc, #12]	; (8000a38 <StartTask_OFF+0x5c>)
 8000a2a:	f001 f8c3 	bl	8001bb4 <HAL_GPIO_WritePin>
		if (flag == 0) {
 8000a2e:	e7d9      	b.n	80009e4 <StartTask_OFF+0x8>
 8000a30:	200001d0 	.word	0x200001d0
 8000a34:	200001d4 	.word	0x200001d4
 8000a38:	40020400 	.word	0x40020400

08000a3c <StartTask_Test>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask_Test */
void StartTask_Test(void *argument)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask_Test */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin); // Red
 8000a44:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a48:	4803      	ldr	r0, [pc, #12]	; (8000a58 <StartTask_Test+0x1c>)
 8000a4a:	f001 f8cc 	bl	8001be6 <HAL_GPIO_TogglePin>
    osDelay(1000);
 8000a4e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a52:	f003 ff0d 	bl	8004870 <osDelay>
	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin); // Red
 8000a56:	e7f5      	b.n	8000a44 <StartTask_Test+0x8>
 8000a58:	40020400 	.word	0x40020400

08000a5c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a04      	ldr	r2, [pc, #16]	; (8000a7c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a6a:	4293      	cmp	r3, r2
 8000a6c:	d101      	bne.n	8000a72 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a6e:	f000 faa9 	bl	8000fc4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a72:	bf00      	nop
 8000a74:	3708      	adds	r7, #8
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	40002000 	.word	0x40002000

08000a80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a84:	b672      	cpsid	i
}
 8000a86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a88:	e7fe      	b.n	8000a88 <Error_Handler+0x8>
	...

08000a8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000a92:	4b11      	ldr	r3, [pc, #68]	; (8000ad8 <HAL_MspInit+0x4c>)
 8000a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a96:	4a10      	ldr	r2, [pc, #64]	; (8000ad8 <HAL_MspInit+0x4c>)
 8000a98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a9c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a9e:	4b0e      	ldr	r3, [pc, #56]	; (8000ad8 <HAL_MspInit+0x4c>)
 8000aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aa6:	607b      	str	r3, [r7, #4]
 8000aa8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aaa:	4b0b      	ldr	r3, [pc, #44]	; (8000ad8 <HAL_MspInit+0x4c>)
 8000aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aae:	4a0a      	ldr	r2, [pc, #40]	; (8000ad8 <HAL_MspInit+0x4c>)
 8000ab0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ab4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ab6:	4b08      	ldr	r3, [pc, #32]	; (8000ad8 <HAL_MspInit+0x4c>)
 8000ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000abe:	603b      	str	r3, [r7, #0]
 8000ac0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	210f      	movs	r1, #15
 8000ac6:	f06f 0001 	mvn.w	r0, #1
 8000aca:	f000 fb77 	bl	80011bc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ace:	bf00      	nop
 8000ad0:	3708      	adds	r7, #8
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	40023800 	.word	0x40023800

08000adc <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b08e      	sub	sp, #56	; 0x38
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ae8:	2200      	movs	r2, #0
 8000aea:	601a      	str	r2, [r3, #0]
 8000aec:	605a      	str	r2, [r3, #4]
 8000aee:	609a      	str	r2, [r3, #8]
 8000af0:	60da      	str	r2, [r3, #12]
 8000af2:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a4e      	ldr	r2, [pc, #312]	; (8000c34 <HAL_ETH_MspInit+0x158>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	f040 8096 	bne.w	8000c2c <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000b00:	4b4d      	ldr	r3, [pc, #308]	; (8000c38 <HAL_ETH_MspInit+0x15c>)
 8000b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b04:	4a4c      	ldr	r2, [pc, #304]	; (8000c38 <HAL_ETH_MspInit+0x15c>)
 8000b06:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b0a:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0c:	4b4a      	ldr	r3, [pc, #296]	; (8000c38 <HAL_ETH_MspInit+0x15c>)
 8000b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b14:	623b      	str	r3, [r7, #32]
 8000b16:	6a3b      	ldr	r3, [r7, #32]
 8000b18:	4b47      	ldr	r3, [pc, #284]	; (8000c38 <HAL_ETH_MspInit+0x15c>)
 8000b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1c:	4a46      	ldr	r2, [pc, #280]	; (8000c38 <HAL_ETH_MspInit+0x15c>)
 8000b1e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000b22:	6313      	str	r3, [r2, #48]	; 0x30
 8000b24:	4b44      	ldr	r3, [pc, #272]	; (8000c38 <HAL_ETH_MspInit+0x15c>)
 8000b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b28:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000b2c:	61fb      	str	r3, [r7, #28]
 8000b2e:	69fb      	ldr	r3, [r7, #28]
 8000b30:	4b41      	ldr	r3, [pc, #260]	; (8000c38 <HAL_ETH_MspInit+0x15c>)
 8000b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b34:	4a40      	ldr	r2, [pc, #256]	; (8000c38 <HAL_ETH_MspInit+0x15c>)
 8000b36:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000b3a:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3c:	4b3e      	ldr	r3, [pc, #248]	; (8000c38 <HAL_ETH_MspInit+0x15c>)
 8000b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000b44:	61bb      	str	r3, [r7, #24]
 8000b46:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b48:	4b3b      	ldr	r3, [pc, #236]	; (8000c38 <HAL_ETH_MspInit+0x15c>)
 8000b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4c:	4a3a      	ldr	r2, [pc, #232]	; (8000c38 <HAL_ETH_MspInit+0x15c>)
 8000b4e:	f043 0304 	orr.w	r3, r3, #4
 8000b52:	6313      	str	r3, [r2, #48]	; 0x30
 8000b54:	4b38      	ldr	r3, [pc, #224]	; (8000c38 <HAL_ETH_MspInit+0x15c>)
 8000b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b58:	f003 0304 	and.w	r3, r3, #4
 8000b5c:	617b      	str	r3, [r7, #20]
 8000b5e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b60:	4b35      	ldr	r3, [pc, #212]	; (8000c38 <HAL_ETH_MspInit+0x15c>)
 8000b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b64:	4a34      	ldr	r2, [pc, #208]	; (8000c38 <HAL_ETH_MspInit+0x15c>)
 8000b66:	f043 0301 	orr.w	r3, r3, #1
 8000b6a:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6c:	4b32      	ldr	r3, [pc, #200]	; (8000c38 <HAL_ETH_MspInit+0x15c>)
 8000b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b70:	f003 0301 	and.w	r3, r3, #1
 8000b74:	613b      	str	r3, [r7, #16]
 8000b76:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b78:	4b2f      	ldr	r3, [pc, #188]	; (8000c38 <HAL_ETH_MspInit+0x15c>)
 8000b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7c:	4a2e      	ldr	r2, [pc, #184]	; (8000c38 <HAL_ETH_MspInit+0x15c>)
 8000b7e:	f043 0302 	orr.w	r3, r3, #2
 8000b82:	6313      	str	r3, [r2, #48]	; 0x30
 8000b84:	4b2c      	ldr	r3, [pc, #176]	; (8000c38 <HAL_ETH_MspInit+0x15c>)
 8000b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b88:	f003 0302 	and.w	r3, r3, #2
 8000b8c:	60fb      	str	r3, [r7, #12]
 8000b8e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b90:	4b29      	ldr	r3, [pc, #164]	; (8000c38 <HAL_ETH_MspInit+0x15c>)
 8000b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b94:	4a28      	ldr	r2, [pc, #160]	; (8000c38 <HAL_ETH_MspInit+0x15c>)
 8000b96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b9a:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9c:	4b26      	ldr	r3, [pc, #152]	; (8000c38 <HAL_ETH_MspInit+0x15c>)
 8000b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ba4:	60bb      	str	r3, [r7, #8]
 8000ba6:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000ba8:	2332      	movs	r3, #50	; 0x32
 8000baa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bac:	2302      	movs	r3, #2
 8000bae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bb4:	2303      	movs	r3, #3
 8000bb6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bb8:	230b      	movs	r3, #11
 8000bba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	481e      	ldr	r0, [pc, #120]	; (8000c3c <HAL_ETH_MspInit+0x160>)
 8000bc4:	f000 fe4a 	bl	800185c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000bc8:	2386      	movs	r3, #134	; 0x86
 8000bca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bcc:	2302      	movs	r3, #2
 8000bce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bd4:	2303      	movs	r3, #3
 8000bd6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bd8:	230b      	movs	r3, #11
 8000bda:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000be0:	4619      	mov	r1, r3
 8000be2:	4817      	ldr	r0, [pc, #92]	; (8000c40 <HAL_ETH_MspInit+0x164>)
 8000be4:	f000 fe3a 	bl	800185c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000be8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bee:	2302      	movs	r3, #2
 8000bf0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bf6:	2303      	movs	r3, #3
 8000bf8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bfa:	230b      	movs	r3, #11
 8000bfc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000bfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c02:	4619      	mov	r1, r3
 8000c04:	480f      	ldr	r0, [pc, #60]	; (8000c44 <HAL_ETH_MspInit+0x168>)
 8000c06:	f000 fe29 	bl	800185c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000c0a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000c0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c10:	2302      	movs	r3, #2
 8000c12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c14:	2300      	movs	r3, #0
 8000c16:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c18:	2303      	movs	r3, #3
 8000c1a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c1c:	230b      	movs	r3, #11
 8000c1e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c24:	4619      	mov	r1, r3
 8000c26:	4808      	ldr	r0, [pc, #32]	; (8000c48 <HAL_ETH_MspInit+0x16c>)
 8000c28:	f000 fe18 	bl	800185c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000c2c:	bf00      	nop
 8000c2e:	3738      	adds	r7, #56	; 0x38
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	40028000 	.word	0x40028000
 8000c38:	40023800 	.word	0x40023800
 8000c3c:	40020800 	.word	0x40020800
 8000c40:	40020000 	.word	0x40020000
 8000c44:	40020400 	.word	0x40020400
 8000c48:	40021800 	.word	0x40021800

08000c4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b0ae      	sub	sp, #184	; 0xb8
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c54:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000c58:	2200      	movs	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]
 8000c5c:	605a      	str	r2, [r3, #4]
 8000c5e:	609a      	str	r2, [r3, #8]
 8000c60:	60da      	str	r2, [r3, #12]
 8000c62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c64:	f107 0314 	add.w	r3, r7, #20
 8000c68:	2290      	movs	r2, #144	; 0x90
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f008 f8d3 	bl	8008e18 <memset>
  if(huart->Instance==USART3)
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	4a22      	ldr	r2, [pc, #136]	; (8000d00 <HAL_UART_MspInit+0xb4>)
 8000c78:	4293      	cmp	r3, r2
 8000c7a:	d13c      	bne.n	8000cf6 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000c7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c80:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000c82:	2300      	movs	r3, #0
 8000c84:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c86:	f107 0314 	add.w	r3, r7, #20
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f001 fe74 	bl	8002978 <HAL_RCCEx_PeriphCLKConfig>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000c96:	f7ff fef3 	bl	8000a80 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c9a:	4b1a      	ldr	r3, [pc, #104]	; (8000d04 <HAL_UART_MspInit+0xb8>)
 8000c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9e:	4a19      	ldr	r2, [pc, #100]	; (8000d04 <HAL_UART_MspInit+0xb8>)
 8000ca0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ca4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ca6:	4b17      	ldr	r3, [pc, #92]	; (8000d04 <HAL_UART_MspInit+0xb8>)
 8000ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000caa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000cae:	613b      	str	r3, [r7, #16]
 8000cb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cb2:	4b14      	ldr	r3, [pc, #80]	; (8000d04 <HAL_UART_MspInit+0xb8>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	4a13      	ldr	r2, [pc, #76]	; (8000d04 <HAL_UART_MspInit+0xb8>)
 8000cb8:	f043 0308 	orr.w	r3, r3, #8
 8000cbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cbe:	4b11      	ldr	r3, [pc, #68]	; (8000d04 <HAL_UART_MspInit+0xb8>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	f003 0308 	and.w	r3, r3, #8
 8000cc6:	60fb      	str	r3, [r7, #12]
 8000cc8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000cca:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000cce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd2:	2302      	movs	r3, #2
 8000cd4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cde:	2303      	movs	r3, #3
 8000ce0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ce4:	2307      	movs	r3, #7
 8000ce6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cea:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000cee:	4619      	mov	r1, r3
 8000cf0:	4805      	ldr	r0, [pc, #20]	; (8000d08 <HAL_UART_MspInit+0xbc>)
 8000cf2:	f000 fdb3 	bl	800185c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000cf6:	bf00      	nop
 8000cf8:	37b8      	adds	r7, #184	; 0xb8
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	40004800 	.word	0x40004800
 8000d04:	40023800 	.word	0x40023800
 8000d08:	40020c00 	.word	0x40020c00

08000d0c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b0ae      	sub	sp, #184	; 0xb8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d14:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000d18:	2200      	movs	r2, #0
 8000d1a:	601a      	str	r2, [r3, #0]
 8000d1c:	605a      	str	r2, [r3, #4]
 8000d1e:	609a      	str	r2, [r3, #8]
 8000d20:	60da      	str	r2, [r3, #12]
 8000d22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d24:	f107 0314 	add.w	r3, r7, #20
 8000d28:	2290      	movs	r2, #144	; 0x90
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f008 f873 	bl	8008e18 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000d3a:	d159      	bne.n	8000df0 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000d3c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000d40:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000d42:	2300      	movs	r3, #0
 8000d44:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d48:	f107 0314 	add.w	r3, r7, #20
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f001 fe13 	bl	8002978 <HAL_RCCEx_PeriphCLKConfig>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000d58:	f7ff fe92 	bl	8000a80 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d5c:	4b26      	ldr	r3, [pc, #152]	; (8000df8 <HAL_PCD_MspInit+0xec>)
 8000d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d60:	4a25      	ldr	r2, [pc, #148]	; (8000df8 <HAL_PCD_MspInit+0xec>)
 8000d62:	f043 0301 	orr.w	r3, r3, #1
 8000d66:	6313      	str	r3, [r2, #48]	; 0x30
 8000d68:	4b23      	ldr	r3, [pc, #140]	; (8000df8 <HAL_PCD_MspInit+0xec>)
 8000d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6c:	f003 0301 	and.w	r3, r3, #1
 8000d70:	613b      	str	r3, [r7, #16]
 8000d72:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000d74:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000d78:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7c:	2302      	movs	r3, #2
 8000d7e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d82:	2300      	movs	r3, #0
 8000d84:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d88:	2303      	movs	r3, #3
 8000d8a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000d8e:	230a      	movs	r3, #10
 8000d90:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d94:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000d98:	4619      	mov	r1, r3
 8000d9a:	4818      	ldr	r0, [pc, #96]	; (8000dfc <HAL_PCD_MspInit+0xf0>)
 8000d9c:	f000 fd5e 	bl	800185c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000da0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000da4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000da8:	2300      	movs	r3, #0
 8000daa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dae:	2300      	movs	r3, #0
 8000db0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000db4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000db8:	4619      	mov	r1, r3
 8000dba:	4810      	ldr	r0, [pc, #64]	; (8000dfc <HAL_PCD_MspInit+0xf0>)
 8000dbc:	f000 fd4e 	bl	800185c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000dc0:	4b0d      	ldr	r3, [pc, #52]	; (8000df8 <HAL_PCD_MspInit+0xec>)
 8000dc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dc4:	4a0c      	ldr	r2, [pc, #48]	; (8000df8 <HAL_PCD_MspInit+0xec>)
 8000dc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000dca:	6353      	str	r3, [r2, #52]	; 0x34
 8000dcc:	4b0a      	ldr	r3, [pc, #40]	; (8000df8 <HAL_PCD_MspInit+0xec>)
 8000dce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dd4:	60fb      	str	r3, [r7, #12]
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	4b07      	ldr	r3, [pc, #28]	; (8000df8 <HAL_PCD_MspInit+0xec>)
 8000dda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ddc:	4a06      	ldr	r2, [pc, #24]	; (8000df8 <HAL_PCD_MspInit+0xec>)
 8000dde:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000de2:	6453      	str	r3, [r2, #68]	; 0x44
 8000de4:	4b04      	ldr	r3, [pc, #16]	; (8000df8 <HAL_PCD_MspInit+0xec>)
 8000de6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000de8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dec:	60bb      	str	r3, [r7, #8]
 8000dee:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000df0:	bf00      	nop
 8000df2:	37b8      	adds	r7, #184	; 0xb8
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	40023800 	.word	0x40023800
 8000dfc:	40020000 	.word	0x40020000

08000e00 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b08e      	sub	sp, #56	; 0x38
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8000e10:	4b33      	ldr	r3, [pc, #204]	; (8000ee0 <HAL_InitTick+0xe0>)
 8000e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e14:	4a32      	ldr	r2, [pc, #200]	; (8000ee0 <HAL_InitTick+0xe0>)
 8000e16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e1a:	6413      	str	r3, [r2, #64]	; 0x40
 8000e1c:	4b30      	ldr	r3, [pc, #192]	; (8000ee0 <HAL_InitTick+0xe0>)
 8000e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e24:	60fb      	str	r3, [r7, #12]
 8000e26:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e28:	f107 0210 	add.w	r2, r7, #16
 8000e2c:	f107 0314 	add.w	r3, r7, #20
 8000e30:	4611      	mov	r1, r2
 8000e32:	4618      	mov	r0, r3
 8000e34:	f001 fd6e 	bl	8002914 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000e38:	6a3b      	ldr	r3, [r7, #32]
 8000e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d103      	bne.n	8000e4a <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000e42:	f001 fd3f 	bl	80028c4 <HAL_RCC_GetPCLK1Freq>
 8000e46:	6378      	str	r0, [r7, #52]	; 0x34
 8000e48:	e004      	b.n	8000e54 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000e4a:	f001 fd3b 	bl	80028c4 <HAL_RCC_GetPCLK1Freq>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	005b      	lsls	r3, r3, #1
 8000e52:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e56:	4a23      	ldr	r2, [pc, #140]	; (8000ee4 <HAL_InitTick+0xe4>)
 8000e58:	fba2 2303 	umull	r2, r3, r2, r3
 8000e5c:	0c9b      	lsrs	r3, r3, #18
 8000e5e:	3b01      	subs	r3, #1
 8000e60:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8000e62:	4b21      	ldr	r3, [pc, #132]	; (8000ee8 <HAL_InitTick+0xe8>)
 8000e64:	4a21      	ldr	r2, [pc, #132]	; (8000eec <HAL_InitTick+0xec>)
 8000e66:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8000e68:	4b1f      	ldr	r3, [pc, #124]	; (8000ee8 <HAL_InitTick+0xe8>)
 8000e6a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e6e:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8000e70:	4a1d      	ldr	r2, [pc, #116]	; (8000ee8 <HAL_InitTick+0xe8>)
 8000e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e74:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8000e76:	4b1c      	ldr	r3, [pc, #112]	; (8000ee8 <HAL_InitTick+0xe8>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e7c:	4b1a      	ldr	r3, [pc, #104]	; (8000ee8 <HAL_InitTick+0xe8>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e82:	4b19      	ldr	r3, [pc, #100]	; (8000ee8 <HAL_InitTick+0xe8>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 8000e88:	4817      	ldr	r0, [pc, #92]	; (8000ee8 <HAL_InitTick+0xe8>)
 8000e8a:	f002 f99d 	bl	80031c8 <HAL_TIM_Base_Init>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000e94:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d11b      	bne.n	8000ed4 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 8000e9c:	4812      	ldr	r0, [pc, #72]	; (8000ee8 <HAL_InitTick+0xe8>)
 8000e9e:	f002 f9f5 	bl	800328c <HAL_TIM_Base_Start_IT>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000ea8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d111      	bne.n	8000ed4 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8000eb0:	202d      	movs	r0, #45	; 0x2d
 8000eb2:	f000 f99f 	bl	80011f4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	2b0f      	cmp	r3, #15
 8000eba:	d808      	bhi.n	8000ece <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	6879      	ldr	r1, [r7, #4]
 8000ec0:	202d      	movs	r0, #45	; 0x2d
 8000ec2:	f000 f97b 	bl	80011bc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ec6:	4a0a      	ldr	r2, [pc, #40]	; (8000ef0 <HAL_InitTick+0xf0>)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	6013      	str	r3, [r2, #0]
 8000ecc:	e002      	b.n	8000ed4 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000ed4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	3738      	adds	r7, #56	; 0x38
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	40023800 	.word	0x40023800
 8000ee4:	431bde83 	.word	0x431bde83
 8000ee8:	20000b24 	.word	0x20000b24
 8000eec:	40002000 	.word	0x40002000
 8000ef0:	20000004 	.word	0x20000004

08000ef4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ef8:	e7fe      	b.n	8000ef8 <NMI_Handler+0x4>

08000efa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000efa:	b480      	push	{r7}
 8000efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000efe:	e7fe      	b.n	8000efe <HardFault_Handler+0x4>

08000f00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f04:	e7fe      	b.n	8000f04 <MemManage_Handler+0x4>

08000f06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f06:	b480      	push	{r7}
 8000f08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f0a:	e7fe      	b.n	8000f0a <BusFault_Handler+0x4>

08000f0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f10:	e7fe      	b.n	8000f10 <UsageFault_Handler+0x4>

08000f12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f12:	b480      	push	{r7}
 8000f14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f16:	bf00      	nop
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr

08000f20 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000f24:	4802      	ldr	r0, [pc, #8]	; (8000f30 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8000f26:	f002 fa29 	bl	800337c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8000f2a:	bf00      	nop
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	20000b24 	.word	0x20000b24

08000f34 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f38:	4b06      	ldr	r3, [pc, #24]	; (8000f54 <SystemInit+0x20>)
 8000f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f3e:	4a05      	ldr	r2, [pc, #20]	; (8000f54 <SystemInit+0x20>)
 8000f40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f48:	bf00      	nop
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	e000ed00 	.word	0xe000ed00

08000f58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f90 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f5c:	480d      	ldr	r0, [pc, #52]	; (8000f94 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f5e:	490e      	ldr	r1, [pc, #56]	; (8000f98 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f60:	4a0e      	ldr	r2, [pc, #56]	; (8000f9c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f64:	e002      	b.n	8000f6c <LoopCopyDataInit>

08000f66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f6a:	3304      	adds	r3, #4

08000f6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f70:	d3f9      	bcc.n	8000f66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f72:	4a0b      	ldr	r2, [pc, #44]	; (8000fa0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f74:	4c0b      	ldr	r4, [pc, #44]	; (8000fa4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f78:	e001      	b.n	8000f7e <LoopFillZerobss>

08000f7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f7c:	3204      	adds	r2, #4

08000f7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f80:	d3fb      	bcc.n	8000f7a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f82:	f7ff ffd7 	bl	8000f34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f86:	f007 ff03 	bl	8008d90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f8a:	f7ff fadb 	bl	8000544 <main>
  bx  lr    
 8000f8e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f90:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000f94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f98:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000f9c:	080091fc 	.word	0x080091fc
  ldr r2, =_sbss
 8000fa0:	200001b4 	.word	0x200001b4
  ldr r4, =_ebss
 8000fa4:	20007bf8 	.word	0x20007bf8

08000fa8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fa8:	e7fe      	b.n	8000fa8 <ADC_IRQHandler>

08000faa <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000faa:	b580      	push	{r7, lr}
 8000fac:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fae:	2003      	movs	r0, #3
 8000fb0:	f000 f8f9 	bl	80011a6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fb4:	200f      	movs	r0, #15
 8000fb6:	f7ff ff23 	bl	8000e00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fba:	f7ff fd67 	bl	8000a8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fbe:	2300      	movs	r3, #0
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	bd80      	pop	{r7, pc}

08000fc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fc8:	4b06      	ldr	r3, [pc, #24]	; (8000fe4 <HAL_IncTick+0x20>)
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	461a      	mov	r2, r3
 8000fce:	4b06      	ldr	r3, [pc, #24]	; (8000fe8 <HAL_IncTick+0x24>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4413      	add	r3, r2
 8000fd4:	4a04      	ldr	r2, [pc, #16]	; (8000fe8 <HAL_IncTick+0x24>)
 8000fd6:	6013      	str	r3, [r2, #0]
}
 8000fd8:	bf00      	nop
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	20000008 	.word	0x20000008
 8000fe8:	20000b70 	.word	0x20000b70

08000fec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  return uwTick;
 8000ff0:	4b03      	ldr	r3, [pc, #12]	; (8001000 <HAL_GetTick+0x14>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	20000b70 	.word	0x20000b70

08001004 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b084      	sub	sp, #16
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800100c:	f7ff ffee 	bl	8000fec <HAL_GetTick>
 8001010:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800101c:	d005      	beq.n	800102a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800101e:	4b0a      	ldr	r3, [pc, #40]	; (8001048 <HAL_Delay+0x44>)
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	461a      	mov	r2, r3
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	4413      	add	r3, r2
 8001028:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800102a:	bf00      	nop
 800102c:	f7ff ffde 	bl	8000fec <HAL_GetTick>
 8001030:	4602      	mov	r2, r0
 8001032:	68bb      	ldr	r3, [r7, #8]
 8001034:	1ad3      	subs	r3, r2, r3
 8001036:	68fa      	ldr	r2, [r7, #12]
 8001038:	429a      	cmp	r2, r3
 800103a:	d8f7      	bhi.n	800102c <HAL_Delay+0x28>
  {
  }
}
 800103c:	bf00      	nop
 800103e:	bf00      	nop
 8001040:	3710      	adds	r7, #16
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	20000008 	.word	0x20000008

0800104c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800104c:	b480      	push	{r7}
 800104e:	b085      	sub	sp, #20
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	f003 0307 	and.w	r3, r3, #7
 800105a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800105c:	4b0b      	ldr	r3, [pc, #44]	; (800108c <__NVIC_SetPriorityGrouping+0x40>)
 800105e:	68db      	ldr	r3, [r3, #12]
 8001060:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001062:	68ba      	ldr	r2, [r7, #8]
 8001064:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001068:	4013      	ands	r3, r2
 800106a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001074:	4b06      	ldr	r3, [pc, #24]	; (8001090 <__NVIC_SetPriorityGrouping+0x44>)
 8001076:	4313      	orrs	r3, r2
 8001078:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800107a:	4a04      	ldr	r2, [pc, #16]	; (800108c <__NVIC_SetPriorityGrouping+0x40>)
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	60d3      	str	r3, [r2, #12]
}
 8001080:	bf00      	nop
 8001082:	3714      	adds	r7, #20
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr
 800108c:	e000ed00 	.word	0xe000ed00
 8001090:	05fa0000 	.word	0x05fa0000

08001094 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001098:	4b04      	ldr	r3, [pc, #16]	; (80010ac <__NVIC_GetPriorityGrouping+0x18>)
 800109a:	68db      	ldr	r3, [r3, #12]
 800109c:	0a1b      	lsrs	r3, r3, #8
 800109e:	f003 0307 	and.w	r3, r3, #7
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr
 80010ac:	e000ed00 	.word	0xe000ed00

080010b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	4603      	mov	r3, r0
 80010b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	db0b      	blt.n	80010da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010c2:	79fb      	ldrb	r3, [r7, #7]
 80010c4:	f003 021f 	and.w	r2, r3, #31
 80010c8:	4907      	ldr	r1, [pc, #28]	; (80010e8 <__NVIC_EnableIRQ+0x38>)
 80010ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ce:	095b      	lsrs	r3, r3, #5
 80010d0:	2001      	movs	r0, #1
 80010d2:	fa00 f202 	lsl.w	r2, r0, r2
 80010d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010da:	bf00      	nop
 80010dc:	370c      	adds	r7, #12
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	e000e100 	.word	0xe000e100

080010ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	4603      	mov	r3, r0
 80010f4:	6039      	str	r1, [r7, #0]
 80010f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	db0a      	blt.n	8001116 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	b2da      	uxtb	r2, r3
 8001104:	490c      	ldr	r1, [pc, #48]	; (8001138 <__NVIC_SetPriority+0x4c>)
 8001106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110a:	0112      	lsls	r2, r2, #4
 800110c:	b2d2      	uxtb	r2, r2
 800110e:	440b      	add	r3, r1
 8001110:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001114:	e00a      	b.n	800112c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	b2da      	uxtb	r2, r3
 800111a:	4908      	ldr	r1, [pc, #32]	; (800113c <__NVIC_SetPriority+0x50>)
 800111c:	79fb      	ldrb	r3, [r7, #7]
 800111e:	f003 030f 	and.w	r3, r3, #15
 8001122:	3b04      	subs	r3, #4
 8001124:	0112      	lsls	r2, r2, #4
 8001126:	b2d2      	uxtb	r2, r2
 8001128:	440b      	add	r3, r1
 800112a:	761a      	strb	r2, [r3, #24]
}
 800112c:	bf00      	nop
 800112e:	370c      	adds	r7, #12
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr
 8001138:	e000e100 	.word	0xe000e100
 800113c:	e000ed00 	.word	0xe000ed00

08001140 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001140:	b480      	push	{r7}
 8001142:	b089      	sub	sp, #36	; 0x24
 8001144:	af00      	add	r7, sp, #0
 8001146:	60f8      	str	r0, [r7, #12]
 8001148:	60b9      	str	r1, [r7, #8]
 800114a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	f003 0307 	and.w	r3, r3, #7
 8001152:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001154:	69fb      	ldr	r3, [r7, #28]
 8001156:	f1c3 0307 	rsb	r3, r3, #7
 800115a:	2b04      	cmp	r3, #4
 800115c:	bf28      	it	cs
 800115e:	2304      	movcs	r3, #4
 8001160:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	3304      	adds	r3, #4
 8001166:	2b06      	cmp	r3, #6
 8001168:	d902      	bls.n	8001170 <NVIC_EncodePriority+0x30>
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	3b03      	subs	r3, #3
 800116e:	e000      	b.n	8001172 <NVIC_EncodePriority+0x32>
 8001170:	2300      	movs	r3, #0
 8001172:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001174:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001178:	69bb      	ldr	r3, [r7, #24]
 800117a:	fa02 f303 	lsl.w	r3, r2, r3
 800117e:	43da      	mvns	r2, r3
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	401a      	ands	r2, r3
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001188:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	fa01 f303 	lsl.w	r3, r1, r3
 8001192:	43d9      	mvns	r1, r3
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001198:	4313      	orrs	r3, r2
         );
}
 800119a:	4618      	mov	r0, r3
 800119c:	3724      	adds	r7, #36	; 0x24
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr

080011a6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011a6:	b580      	push	{r7, lr}
 80011a8:	b082      	sub	sp, #8
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011ae:	6878      	ldr	r0, [r7, #4]
 80011b0:	f7ff ff4c 	bl	800104c <__NVIC_SetPriorityGrouping>
}
 80011b4:	bf00      	nop
 80011b6:	3708      	adds	r7, #8
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}

080011bc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011bc:	b580      	push	{r7, lr}
 80011be:	b086      	sub	sp, #24
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	4603      	mov	r3, r0
 80011c4:	60b9      	str	r1, [r7, #8]
 80011c6:	607a      	str	r2, [r7, #4]
 80011c8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80011ca:	2300      	movs	r3, #0
 80011cc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011ce:	f7ff ff61 	bl	8001094 <__NVIC_GetPriorityGrouping>
 80011d2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011d4:	687a      	ldr	r2, [r7, #4]
 80011d6:	68b9      	ldr	r1, [r7, #8]
 80011d8:	6978      	ldr	r0, [r7, #20]
 80011da:	f7ff ffb1 	bl	8001140 <NVIC_EncodePriority>
 80011de:	4602      	mov	r2, r0
 80011e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011e4:	4611      	mov	r1, r2
 80011e6:	4618      	mov	r0, r3
 80011e8:	f7ff ff80 	bl	80010ec <__NVIC_SetPriority>
}
 80011ec:	bf00      	nop
 80011ee:	3718      	adds	r7, #24
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}

080011f4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	4603      	mov	r3, r0
 80011fc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001202:	4618      	mov	r0, r3
 8001204:	f7ff ff54 	bl	80010b0 <__NVIC_EnableIRQ>
}
 8001208:	bf00      	nop
 800120a:	3708      	adds	r7, #8
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}

08001210 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d101      	bne.n	8001222 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800121e:	2301      	movs	r3, #1
 8001220:	e06a      	b.n	80012f8 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001228:	2b00      	cmp	r3, #0
 800122a:	d106      	bne.n	800123a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2223      	movs	r2, #35	; 0x23
 8001230:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001234:	6878      	ldr	r0, [r7, #4]
 8001236:	f7ff fc51 	bl	8000adc <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800123a:	4b31      	ldr	r3, [pc, #196]	; (8001300 <HAL_ETH_Init+0xf0>)
 800123c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800123e:	4a30      	ldr	r2, [pc, #192]	; (8001300 <HAL_ETH_Init+0xf0>)
 8001240:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001244:	6453      	str	r3, [r2, #68]	; 0x44
 8001246:	4b2e      	ldr	r3, [pc, #184]	; (8001300 <HAL_ETH_Init+0xf0>)
 8001248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800124a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800124e:	60bb      	str	r3, [r7, #8]
 8001250:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001252:	4b2c      	ldr	r3, [pc, #176]	; (8001304 <HAL_ETH_Init+0xf4>)
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	4a2b      	ldr	r2, [pc, #172]	; (8001304 <HAL_ETH_Init+0xf4>)
 8001258:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800125c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800125e:	4b29      	ldr	r3, [pc, #164]	; (8001304 <HAL_ETH_Init+0xf4>)
 8001260:	685a      	ldr	r2, [r3, #4]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	689b      	ldr	r3, [r3, #8]
 8001266:	4927      	ldr	r1, [pc, #156]	; (8001304 <HAL_ETH_Init+0xf4>)
 8001268:	4313      	orrs	r3, r2
 800126a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 800126c:	4b25      	ldr	r3, [pc, #148]	; (8001304 <HAL_ETH_Init+0xf4>)
 800126e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	687a      	ldr	r2, [r7, #4]
 800127c:	6812      	ldr	r2, [r2, #0]
 800127e:	f043 0301 	orr.w	r3, r3, #1
 8001282:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001286:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001288:	f7ff feb0 	bl	8000fec <HAL_GetTick>
 800128c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800128e:	e011      	b.n	80012b4 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001290:	f7ff feac 	bl	8000fec <HAL_GetTick>
 8001294:	4602      	mov	r2, r0
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	1ad3      	subs	r3, r2, r3
 800129a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800129e:	d909      	bls.n	80012b4 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2204      	movs	r2, #4
 80012a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	22e0      	movs	r2, #224	; 0xe0
 80012ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80012b0:	2301      	movs	r3, #1
 80012b2:	e021      	b.n	80012f8 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f003 0301 	and.w	r3, r3, #1
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d1e4      	bne.n	8001290 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80012c6:	6878      	ldr	r0, [r7, #4]
 80012c8:	f000 f958 	bl	800157c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80012cc:	6878      	ldr	r0, [r7, #4]
 80012ce:	f000 f9ff 	bl	80016d0 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80012d2:	6878      	ldr	r0, [r7, #4]
 80012d4:	f000 fa55 	bl	8001782 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	461a      	mov	r2, r3
 80012de:	2100      	movs	r1, #0
 80012e0:	6878      	ldr	r0, [r7, #4]
 80012e2:	f000 f9bd 	bl	8001660 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2200      	movs	r2, #0
 80012ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2210      	movs	r2, #16
 80012f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80012f6:	2300      	movs	r3, #0
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	3710      	adds	r7, #16
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	40023800 	.word	0x40023800
 8001304:	40013800 	.word	0x40013800

08001308 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b084      	sub	sp, #16
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
 8001310:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800131a:	68fa      	ldr	r2, [r7, #12]
 800131c:	4b51      	ldr	r3, [pc, #324]	; (8001464 <ETH_SetMACConfig+0x15c>)
 800131e:	4013      	ands	r3, r2
 8001320:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	7c1b      	ldrb	r3, [r3, #16]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d102      	bne.n	8001330 <ETH_SetMACConfig+0x28>
 800132a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800132e:	e000      	b.n	8001332 <ETH_SetMACConfig+0x2a>
 8001330:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	7c5b      	ldrb	r3, [r3, #17]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d102      	bne.n	8001340 <ETH_SetMACConfig+0x38>
 800133a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800133e:	e000      	b.n	8001342 <ETH_SetMACConfig+0x3a>
 8001340:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001342:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001348:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	7fdb      	ldrb	r3, [r3, #31]
 800134e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001350:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001356:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001358:	683a      	ldr	r2, [r7, #0]
 800135a:	7f92      	ldrb	r2, [r2, #30]
 800135c:	2a00      	cmp	r2, #0
 800135e:	d102      	bne.n	8001366 <ETH_SetMACConfig+0x5e>
 8001360:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001364:	e000      	b.n	8001368 <ETH_SetMACConfig+0x60>
 8001366:	2200      	movs	r2, #0
                        macconf->Speed |
 8001368:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	7f1b      	ldrb	r3, [r3, #28]
 800136e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001370:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001376:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	791b      	ldrb	r3, [r3, #4]
 800137c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800137e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001380:	683a      	ldr	r2, [r7, #0]
 8001382:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001386:	2a00      	cmp	r2, #0
 8001388:	d102      	bne.n	8001390 <ETH_SetMACConfig+0x88>
 800138a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800138e:	e000      	b.n	8001392 <ETH_SetMACConfig+0x8a>
 8001390:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001392:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	7bdb      	ldrb	r3, [r3, #15]
 8001398:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800139a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80013a0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80013a8:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80013aa:	4313      	orrs	r3, r2
 80013ac:	68fa      	ldr	r2, [r7, #12]
 80013ae:	4313      	orrs	r3, r2
 80013b0:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	68fa      	ldr	r2, [r7, #12]
 80013b8:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80013c2:	2001      	movs	r0, #1
 80013c4:	f7ff fe1e 	bl	8001004 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	68fa      	ldr	r2, [r7, #12]
 80013ce:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	699b      	ldr	r3, [r3, #24]
 80013d6:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80013d8:	68fa      	ldr	r2, [r7, #12]
 80013da:	f64f 7341 	movw	r3, #65345	; 0xff41
 80013de:	4013      	ands	r3, r2
 80013e0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013e6:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80013e8:	683a      	ldr	r2, [r7, #0]
 80013ea:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80013ee:	2a00      	cmp	r2, #0
 80013f0:	d101      	bne.n	80013f6 <ETH_SetMACConfig+0xee>
 80013f2:	2280      	movs	r2, #128	; 0x80
 80013f4:	e000      	b.n	80013f8 <ETH_SetMACConfig+0xf0>
 80013f6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80013f8:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80013fe:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001400:	683a      	ldr	r2, [r7, #0]
 8001402:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8001406:	2a01      	cmp	r2, #1
 8001408:	d101      	bne.n	800140e <ETH_SetMACConfig+0x106>
 800140a:	2208      	movs	r2, #8
 800140c:	e000      	b.n	8001410 <ETH_SetMACConfig+0x108>
 800140e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001410:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001412:	683a      	ldr	r2, [r7, #0]
 8001414:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8001418:	2a01      	cmp	r2, #1
 800141a:	d101      	bne.n	8001420 <ETH_SetMACConfig+0x118>
 800141c:	2204      	movs	r2, #4
 800141e:	e000      	b.n	8001422 <ETH_SetMACConfig+0x11a>
 8001420:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001422:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001424:	683a      	ldr	r2, [r7, #0]
 8001426:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800142a:	2a01      	cmp	r2, #1
 800142c:	d101      	bne.n	8001432 <ETH_SetMACConfig+0x12a>
 800142e:	2202      	movs	r2, #2
 8001430:	e000      	b.n	8001434 <ETH_SetMACConfig+0x12c>
 8001432:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001434:	4313      	orrs	r3, r2
 8001436:	68fa      	ldr	r2, [r7, #12]
 8001438:	4313      	orrs	r3, r2
 800143a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	68fa      	ldr	r2, [r7, #12]
 8001442:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	699b      	ldr	r3, [r3, #24]
 800144a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800144c:	2001      	movs	r0, #1
 800144e:	f7ff fdd9 	bl	8001004 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	68fa      	ldr	r2, [r7, #12]
 8001458:	619a      	str	r2, [r3, #24]
}
 800145a:	bf00      	nop
 800145c:	3710      	adds	r7, #16
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	ff20810f 	.word	0xff20810f

08001468 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b084      	sub	sp, #16
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
 8001470:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800147a:	699b      	ldr	r3, [r3, #24]
 800147c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800147e:	68fa      	ldr	r2, [r7, #12]
 8001480:	4b3d      	ldr	r3, [pc, #244]	; (8001578 <ETH_SetDMAConfig+0x110>)
 8001482:	4013      	ands	r3, r2
 8001484:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	7b1b      	ldrb	r3, [r3, #12]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d102      	bne.n	8001494 <ETH_SetDMAConfig+0x2c>
 800148e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001492:	e000      	b.n	8001496 <ETH_SetDMAConfig+0x2e>
 8001494:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	7b5b      	ldrb	r3, [r3, #13]
 800149a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800149c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800149e:	683a      	ldr	r2, [r7, #0]
 80014a0:	7f52      	ldrb	r2, [r2, #29]
 80014a2:	2a00      	cmp	r2, #0
 80014a4:	d102      	bne.n	80014ac <ETH_SetDMAConfig+0x44>
 80014a6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80014aa:	e000      	b.n	80014ae <ETH_SetDMAConfig+0x46>
 80014ac:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80014ae:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	7b9b      	ldrb	r3, [r3, #14]
 80014b4:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80014b6:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80014bc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	7f1b      	ldrb	r3, [r3, #28]
 80014c2:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80014c4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	7f9b      	ldrb	r3, [r3, #30]
 80014ca:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80014cc:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80014d2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80014da:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80014dc:	4313      	orrs	r3, r2
 80014de:	68fa      	ldr	r2, [r7, #12]
 80014e0:	4313      	orrs	r3, r2
 80014e2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014ec:	461a      	mov	r2, r3
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014fa:	699b      	ldr	r3, [r3, #24]
 80014fc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80014fe:	2001      	movs	r0, #1
 8001500:	f7ff fd80 	bl	8001004 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800150c:	461a      	mov	r2, r3
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	791b      	ldrb	r3, [r3, #4]
 8001516:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800151c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001522:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001528:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001530:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001532:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001538:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800153a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001540:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001542:	687a      	ldr	r2, [r7, #4]
 8001544:	6812      	ldr	r2, [r2, #0]
 8001546:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800154a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800154e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800155c:	2001      	movs	r0, #1
 800155e:	f7ff fd51 	bl	8001004 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800156a:	461a      	mov	r2, r3
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	6013      	str	r3, [r2, #0]
}
 8001570:	bf00      	nop
 8001572:	3710      	adds	r7, #16
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	f8de3f23 	.word	0xf8de3f23

0800157c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b0a6      	sub	sp, #152	; 0x98
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001584:	2301      	movs	r3, #1
 8001586:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800158a:	2301      	movs	r3, #1
 800158c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001590:	2300      	movs	r3, #0
 8001592:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001594:	2300      	movs	r3, #0
 8001596:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800159a:	2301      	movs	r3, #1
 800159c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80015a0:	2300      	movs	r3, #0
 80015a2:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80015a6:	2301      	movs	r3, #1
 80015a8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80015ac:	2300      	movs	r3, #0
 80015ae:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80015b2:	2300      	movs	r3, #0
 80015b4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80015b8:	2300      	movs	r3, #0
 80015ba:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80015bc:	2300      	movs	r3, #0
 80015be:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80015c2:	2300      	movs	r3, #0
 80015c4:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80015c6:	2300      	movs	r3, #0
 80015c8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80015cc:	2300      	movs	r3, #0
 80015ce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80015d2:	2300      	movs	r3, #0
 80015d4:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80015d8:	2300      	movs	r3, #0
 80015da:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80015de:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80015e2:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80015e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80015e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80015ea:	2300      	movs	r3, #0
 80015ec:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80015f0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80015f4:	4619      	mov	r1, r3
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	f7ff fe86 	bl	8001308 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80015fc:	2301      	movs	r3, #1
 80015fe:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001600:	2301      	movs	r3, #1
 8001602:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001604:	2301      	movs	r3, #1
 8001606:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800160a:	2301      	movs	r3, #1
 800160c:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800160e:	2300      	movs	r3, #0
 8001610:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001612:	2300      	movs	r3, #0
 8001614:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001618:	2300      	movs	r3, #0
 800161a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800161e:	2300      	movs	r3, #0
 8001620:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001622:	2301      	movs	r3, #1
 8001624:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001628:	2301      	movs	r3, #1
 800162a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800162c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001630:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001632:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001636:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001638:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800163c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800163e:	2301      	movs	r3, #1
 8001640:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001644:	2300      	movs	r3, #0
 8001646:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001648:	2300      	movs	r3, #0
 800164a:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800164c:	f107 0308 	add.w	r3, r7, #8
 8001650:	4619      	mov	r1, r3
 8001652:	6878      	ldr	r0, [r7, #4]
 8001654:	f7ff ff08 	bl	8001468 <ETH_SetDMAConfig>
}
 8001658:	bf00      	nop
 800165a:	3798      	adds	r7, #152	; 0x98
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}

08001660 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001660:	b480      	push	{r7}
 8001662:	b087      	sub	sp, #28
 8001664:	af00      	add	r7, sp, #0
 8001666:	60f8      	str	r0, [r7, #12]
 8001668:	60b9      	str	r1, [r7, #8]
 800166a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	3305      	adds	r3, #5
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	021b      	lsls	r3, r3, #8
 8001674:	687a      	ldr	r2, [r7, #4]
 8001676:	3204      	adds	r2, #4
 8001678:	7812      	ldrb	r2, [r2, #0]
 800167a:	4313      	orrs	r3, r2
 800167c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800167e:	68ba      	ldr	r2, [r7, #8]
 8001680:	4b11      	ldr	r3, [pc, #68]	; (80016c8 <ETH_MACAddressConfig+0x68>)
 8001682:	4413      	add	r3, r2
 8001684:	461a      	mov	r2, r3
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	3303      	adds	r3, #3
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	061a      	lsls	r2, r3, #24
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	3302      	adds	r3, #2
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	041b      	lsls	r3, r3, #16
 800169a:	431a      	orrs	r2, r3
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	3301      	adds	r3, #1
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	021b      	lsls	r3, r3, #8
 80016a4:	4313      	orrs	r3, r2
 80016a6:	687a      	ldr	r2, [r7, #4]
 80016a8:	7812      	ldrb	r2, [r2, #0]
 80016aa:	4313      	orrs	r3, r2
 80016ac:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80016ae:	68ba      	ldr	r2, [r7, #8]
 80016b0:	4b06      	ldr	r3, [pc, #24]	; (80016cc <ETH_MACAddressConfig+0x6c>)
 80016b2:	4413      	add	r3, r2
 80016b4:	461a      	mov	r2, r3
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	6013      	str	r3, [r2, #0]
}
 80016ba:	bf00      	nop
 80016bc:	371c      	adds	r7, #28
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	40028040 	.word	0x40028040
 80016cc:	40028044 	.word	0x40028044

080016d0 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b085      	sub	sp, #20
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80016d8:	2300      	movs	r3, #0
 80016da:	60fb      	str	r3, [r7, #12]
 80016dc:	e03e      	b.n	800175c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	68d9      	ldr	r1, [r3, #12]
 80016e2:	68fa      	ldr	r2, [r7, #12]
 80016e4:	4613      	mov	r3, r2
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	4413      	add	r3, r2
 80016ea:	00db      	lsls	r3, r3, #3
 80016ec:	440b      	add	r3, r1
 80016ee:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	2200      	movs	r2, #0
 80016f4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80016f6:	68bb      	ldr	r3, [r7, #8]
 80016f8:	2200      	movs	r2, #0
 80016fa:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	2200      	movs	r2, #0
 8001700:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001702:	68bb      	ldr	r3, [r7, #8]
 8001704:	2200      	movs	r2, #0
 8001706:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001708:	68b9      	ldr	r1, [r7, #8]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	68fa      	ldr	r2, [r7, #12]
 800170e:	3206      	adds	r2, #6
 8001710:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	2b02      	cmp	r3, #2
 8001724:	d80c      	bhi.n	8001740 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	68d9      	ldr	r1, [r3, #12]
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	1c5a      	adds	r2, r3, #1
 800172e:	4613      	mov	r3, r2
 8001730:	009b      	lsls	r3, r3, #2
 8001732:	4413      	add	r3, r2
 8001734:	00db      	lsls	r3, r3, #3
 8001736:	440b      	add	r3, r1
 8001738:	461a      	mov	r2, r3
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	60da      	str	r2, [r3, #12]
 800173e:	e004      	b.n	800174a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	461a      	mov	r2, r3
 8001746:	68bb      	ldr	r3, [r7, #8]
 8001748:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001752:	68bb      	ldr	r3, [r7, #8]
 8001754:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	3301      	adds	r3, #1
 800175a:	60fb      	str	r3, [r7, #12]
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	2b03      	cmp	r3, #3
 8001760:	d9bd      	bls.n	80016de <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2200      	movs	r2, #0
 8001766:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	68da      	ldr	r2, [r3, #12]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001774:	611a      	str	r2, [r3, #16]
}
 8001776:	bf00      	nop
 8001778:	3714      	adds	r7, #20
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr

08001782 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001782:	b480      	push	{r7}
 8001784:	b085      	sub	sp, #20
 8001786:	af00      	add	r7, sp, #0
 8001788:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800178a:	2300      	movs	r3, #0
 800178c:	60fb      	str	r3, [r7, #12]
 800178e:	e046      	b.n	800181e <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6919      	ldr	r1, [r3, #16]
 8001794:	68fa      	ldr	r2, [r7, #12]
 8001796:	4613      	mov	r3, r2
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	4413      	add	r3, r2
 800179c:	00db      	lsls	r3, r3, #3
 800179e:	440b      	add	r3, r1
 80017a0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	2200      	movs	r2, #0
 80017a6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	2200      	movs	r2, #0
 80017ac:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	2200      	movs	r2, #0
 80017b2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	2200      	movs	r2, #0
 80017b8:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80017ba:	68bb      	ldr	r3, [r7, #8]
 80017bc:	2200      	movs	r2, #0
 80017be:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	2200      	movs	r2, #0
 80017c4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80017c6:	68bb      	ldr	r3, [r7, #8]
 80017c8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80017cc:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80017d4:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80017de:	68bb      	ldr	r3, [r7, #8]
 80017e0:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80017e2:	68b9      	ldr	r1, [r7, #8]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	68fa      	ldr	r2, [r7, #12]
 80017e8:	3212      	adds	r2, #18
 80017ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	2b02      	cmp	r3, #2
 80017f2:	d80c      	bhi.n	800180e <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6919      	ldr	r1, [r3, #16]
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	1c5a      	adds	r2, r3, #1
 80017fc:	4613      	mov	r3, r2
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	4413      	add	r3, r2
 8001802:	00db      	lsls	r3, r3, #3
 8001804:	440b      	add	r3, r1
 8001806:	461a      	mov	r2, r3
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	60da      	str	r2, [r3, #12]
 800180c:	e004      	b.n	8001818 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	691b      	ldr	r3, [r3, #16]
 8001812:	461a      	mov	r2, r3
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	3301      	adds	r3, #1
 800181c:	60fb      	str	r3, [r7, #12]
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	2b03      	cmp	r3, #3
 8001822:	d9b5      	bls.n	8001790 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2200      	movs	r2, #0
 8001828:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2200      	movs	r2, #0
 800182e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2200      	movs	r2, #0
 8001834:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2200      	movs	r2, #0
 800183a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2200      	movs	r2, #0
 8001840:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	691a      	ldr	r2, [r3, #16]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800184e:	60da      	str	r2, [r3, #12]
}
 8001850:	bf00      	nop
 8001852:	3714      	adds	r7, #20
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr

0800185c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800185c:	b480      	push	{r7}
 800185e:	b089      	sub	sp, #36	; 0x24
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001866:	2300      	movs	r3, #0
 8001868:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800186a:	2300      	movs	r3, #0
 800186c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800186e:	2300      	movs	r3, #0
 8001870:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001872:	2300      	movs	r3, #0
 8001874:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001876:	2300      	movs	r3, #0
 8001878:	61fb      	str	r3, [r7, #28]
 800187a:	e175      	b.n	8001b68 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800187c:	2201      	movs	r2, #1
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	fa02 f303 	lsl.w	r3, r2, r3
 8001884:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	697a      	ldr	r2, [r7, #20]
 800188c:	4013      	ands	r3, r2
 800188e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001890:	693a      	ldr	r2, [r7, #16]
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	429a      	cmp	r2, r3
 8001896:	f040 8164 	bne.w	8001b62 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	f003 0303 	and.w	r3, r3, #3
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d005      	beq.n	80018b2 <HAL_GPIO_Init+0x56>
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	f003 0303 	and.w	r3, r3, #3
 80018ae:	2b02      	cmp	r3, #2
 80018b0:	d130      	bne.n	8001914 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80018b8:	69fb      	ldr	r3, [r7, #28]
 80018ba:	005b      	lsls	r3, r3, #1
 80018bc:	2203      	movs	r2, #3
 80018be:	fa02 f303 	lsl.w	r3, r2, r3
 80018c2:	43db      	mvns	r3, r3
 80018c4:	69ba      	ldr	r2, [r7, #24]
 80018c6:	4013      	ands	r3, r2
 80018c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	68da      	ldr	r2, [r3, #12]
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	005b      	lsls	r3, r3, #1
 80018d2:	fa02 f303 	lsl.w	r3, r2, r3
 80018d6:	69ba      	ldr	r2, [r7, #24]
 80018d8:	4313      	orrs	r3, r2
 80018da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	69ba      	ldr	r2, [r7, #24]
 80018e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018e8:	2201      	movs	r2, #1
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	fa02 f303 	lsl.w	r3, r2, r3
 80018f0:	43db      	mvns	r3, r3
 80018f2:	69ba      	ldr	r2, [r7, #24]
 80018f4:	4013      	ands	r3, r2
 80018f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	091b      	lsrs	r3, r3, #4
 80018fe:	f003 0201 	and.w	r2, r3, #1
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	fa02 f303 	lsl.w	r3, r2, r3
 8001908:	69ba      	ldr	r2, [r7, #24]
 800190a:	4313      	orrs	r3, r2
 800190c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	69ba      	ldr	r2, [r7, #24]
 8001912:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f003 0303 	and.w	r3, r3, #3
 800191c:	2b03      	cmp	r3, #3
 800191e:	d017      	beq.n	8001950 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	005b      	lsls	r3, r3, #1
 800192a:	2203      	movs	r2, #3
 800192c:	fa02 f303 	lsl.w	r3, r2, r3
 8001930:	43db      	mvns	r3, r3
 8001932:	69ba      	ldr	r2, [r7, #24]
 8001934:	4013      	ands	r3, r2
 8001936:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	689a      	ldr	r2, [r3, #8]
 800193c:	69fb      	ldr	r3, [r7, #28]
 800193e:	005b      	lsls	r3, r3, #1
 8001940:	fa02 f303 	lsl.w	r3, r2, r3
 8001944:	69ba      	ldr	r2, [r7, #24]
 8001946:	4313      	orrs	r3, r2
 8001948:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	69ba      	ldr	r2, [r7, #24]
 800194e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f003 0303 	and.w	r3, r3, #3
 8001958:	2b02      	cmp	r3, #2
 800195a:	d123      	bne.n	80019a4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800195c:	69fb      	ldr	r3, [r7, #28]
 800195e:	08da      	lsrs	r2, r3, #3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	3208      	adds	r2, #8
 8001964:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001968:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	f003 0307 	and.w	r3, r3, #7
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	220f      	movs	r2, #15
 8001974:	fa02 f303 	lsl.w	r3, r2, r3
 8001978:	43db      	mvns	r3, r3
 800197a:	69ba      	ldr	r2, [r7, #24]
 800197c:	4013      	ands	r3, r2
 800197e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	691a      	ldr	r2, [r3, #16]
 8001984:	69fb      	ldr	r3, [r7, #28]
 8001986:	f003 0307 	and.w	r3, r3, #7
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	fa02 f303 	lsl.w	r3, r2, r3
 8001990:	69ba      	ldr	r2, [r7, #24]
 8001992:	4313      	orrs	r3, r2
 8001994:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	08da      	lsrs	r2, r3, #3
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	3208      	adds	r2, #8
 800199e:	69b9      	ldr	r1, [r7, #24]
 80019a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	005b      	lsls	r3, r3, #1
 80019ae:	2203      	movs	r2, #3
 80019b0:	fa02 f303 	lsl.w	r3, r2, r3
 80019b4:	43db      	mvns	r3, r3
 80019b6:	69ba      	ldr	r2, [r7, #24]
 80019b8:	4013      	ands	r3, r2
 80019ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f003 0203 	and.w	r2, r3, #3
 80019c4:	69fb      	ldr	r3, [r7, #28]
 80019c6:	005b      	lsls	r3, r3, #1
 80019c8:	fa02 f303 	lsl.w	r3, r2, r3
 80019cc:	69ba      	ldr	r2, [r7, #24]
 80019ce:	4313      	orrs	r3, r2
 80019d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	69ba      	ldr	r2, [r7, #24]
 80019d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	f000 80be 	beq.w	8001b62 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019e6:	4b66      	ldr	r3, [pc, #408]	; (8001b80 <HAL_GPIO_Init+0x324>)
 80019e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ea:	4a65      	ldr	r2, [pc, #404]	; (8001b80 <HAL_GPIO_Init+0x324>)
 80019ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019f0:	6453      	str	r3, [r2, #68]	; 0x44
 80019f2:	4b63      	ldr	r3, [pc, #396]	; (8001b80 <HAL_GPIO_Init+0x324>)
 80019f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019fa:	60fb      	str	r3, [r7, #12]
 80019fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80019fe:	4a61      	ldr	r2, [pc, #388]	; (8001b84 <HAL_GPIO_Init+0x328>)
 8001a00:	69fb      	ldr	r3, [r7, #28]
 8001a02:	089b      	lsrs	r3, r3, #2
 8001a04:	3302      	adds	r3, #2
 8001a06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	f003 0303 	and.w	r3, r3, #3
 8001a12:	009b      	lsls	r3, r3, #2
 8001a14:	220f      	movs	r2, #15
 8001a16:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1a:	43db      	mvns	r3, r3
 8001a1c:	69ba      	ldr	r2, [r7, #24]
 8001a1e:	4013      	ands	r3, r2
 8001a20:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	4a58      	ldr	r2, [pc, #352]	; (8001b88 <HAL_GPIO_Init+0x32c>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d037      	beq.n	8001a9a <HAL_GPIO_Init+0x23e>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	4a57      	ldr	r2, [pc, #348]	; (8001b8c <HAL_GPIO_Init+0x330>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d031      	beq.n	8001a96 <HAL_GPIO_Init+0x23a>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	4a56      	ldr	r2, [pc, #344]	; (8001b90 <HAL_GPIO_Init+0x334>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d02b      	beq.n	8001a92 <HAL_GPIO_Init+0x236>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4a55      	ldr	r2, [pc, #340]	; (8001b94 <HAL_GPIO_Init+0x338>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d025      	beq.n	8001a8e <HAL_GPIO_Init+0x232>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4a54      	ldr	r2, [pc, #336]	; (8001b98 <HAL_GPIO_Init+0x33c>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d01f      	beq.n	8001a8a <HAL_GPIO_Init+0x22e>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	4a53      	ldr	r2, [pc, #332]	; (8001b9c <HAL_GPIO_Init+0x340>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d019      	beq.n	8001a86 <HAL_GPIO_Init+0x22a>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4a52      	ldr	r2, [pc, #328]	; (8001ba0 <HAL_GPIO_Init+0x344>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d013      	beq.n	8001a82 <HAL_GPIO_Init+0x226>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4a51      	ldr	r2, [pc, #324]	; (8001ba4 <HAL_GPIO_Init+0x348>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d00d      	beq.n	8001a7e <HAL_GPIO_Init+0x222>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	4a50      	ldr	r2, [pc, #320]	; (8001ba8 <HAL_GPIO_Init+0x34c>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d007      	beq.n	8001a7a <HAL_GPIO_Init+0x21e>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4a4f      	ldr	r2, [pc, #316]	; (8001bac <HAL_GPIO_Init+0x350>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d101      	bne.n	8001a76 <HAL_GPIO_Init+0x21a>
 8001a72:	2309      	movs	r3, #9
 8001a74:	e012      	b.n	8001a9c <HAL_GPIO_Init+0x240>
 8001a76:	230a      	movs	r3, #10
 8001a78:	e010      	b.n	8001a9c <HAL_GPIO_Init+0x240>
 8001a7a:	2308      	movs	r3, #8
 8001a7c:	e00e      	b.n	8001a9c <HAL_GPIO_Init+0x240>
 8001a7e:	2307      	movs	r3, #7
 8001a80:	e00c      	b.n	8001a9c <HAL_GPIO_Init+0x240>
 8001a82:	2306      	movs	r3, #6
 8001a84:	e00a      	b.n	8001a9c <HAL_GPIO_Init+0x240>
 8001a86:	2305      	movs	r3, #5
 8001a88:	e008      	b.n	8001a9c <HAL_GPIO_Init+0x240>
 8001a8a:	2304      	movs	r3, #4
 8001a8c:	e006      	b.n	8001a9c <HAL_GPIO_Init+0x240>
 8001a8e:	2303      	movs	r3, #3
 8001a90:	e004      	b.n	8001a9c <HAL_GPIO_Init+0x240>
 8001a92:	2302      	movs	r3, #2
 8001a94:	e002      	b.n	8001a9c <HAL_GPIO_Init+0x240>
 8001a96:	2301      	movs	r3, #1
 8001a98:	e000      	b.n	8001a9c <HAL_GPIO_Init+0x240>
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	69fa      	ldr	r2, [r7, #28]
 8001a9e:	f002 0203 	and.w	r2, r2, #3
 8001aa2:	0092      	lsls	r2, r2, #2
 8001aa4:	4093      	lsls	r3, r2
 8001aa6:	69ba      	ldr	r2, [r7, #24]
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001aac:	4935      	ldr	r1, [pc, #212]	; (8001b84 <HAL_GPIO_Init+0x328>)
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	089b      	lsrs	r3, r3, #2
 8001ab2:	3302      	adds	r3, #2
 8001ab4:	69ba      	ldr	r2, [r7, #24]
 8001ab6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001aba:	4b3d      	ldr	r3, [pc, #244]	; (8001bb0 <HAL_GPIO_Init+0x354>)
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	43db      	mvns	r3, r3
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d003      	beq.n	8001ade <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001ad6:	69ba      	ldr	r2, [r7, #24]
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	4313      	orrs	r3, r2
 8001adc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ade:	4a34      	ldr	r2, [pc, #208]	; (8001bb0 <HAL_GPIO_Init+0x354>)
 8001ae0:	69bb      	ldr	r3, [r7, #24]
 8001ae2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ae4:	4b32      	ldr	r3, [pc, #200]	; (8001bb0 <HAL_GPIO_Init+0x354>)
 8001ae6:	68db      	ldr	r3, [r3, #12]
 8001ae8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	43db      	mvns	r3, r3
 8001aee:	69ba      	ldr	r2, [r7, #24]
 8001af0:	4013      	ands	r3, r2
 8001af2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d003      	beq.n	8001b08 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001b00:	69ba      	ldr	r2, [r7, #24]
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b08:	4a29      	ldr	r2, [pc, #164]	; (8001bb0 <HAL_GPIO_Init+0x354>)
 8001b0a:	69bb      	ldr	r3, [r7, #24]
 8001b0c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b0e:	4b28      	ldr	r3, [pc, #160]	; (8001bb0 <HAL_GPIO_Init+0x354>)
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	43db      	mvns	r3, r3
 8001b18:	69ba      	ldr	r2, [r7, #24]
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d003      	beq.n	8001b32 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001b2a:	69ba      	ldr	r2, [r7, #24]
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b32:	4a1f      	ldr	r2, [pc, #124]	; (8001bb0 <HAL_GPIO_Init+0x354>)
 8001b34:	69bb      	ldr	r3, [r7, #24]
 8001b36:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b38:	4b1d      	ldr	r3, [pc, #116]	; (8001bb0 <HAL_GPIO_Init+0x354>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	43db      	mvns	r3, r3
 8001b42:	69ba      	ldr	r2, [r7, #24]
 8001b44:	4013      	ands	r3, r2
 8001b46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d003      	beq.n	8001b5c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b5c:	4a14      	ldr	r2, [pc, #80]	; (8001bb0 <HAL_GPIO_Init+0x354>)
 8001b5e:	69bb      	ldr	r3, [r7, #24]
 8001b60:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	3301      	adds	r3, #1
 8001b66:	61fb      	str	r3, [r7, #28]
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	2b0f      	cmp	r3, #15
 8001b6c:	f67f ae86 	bls.w	800187c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001b70:	bf00      	nop
 8001b72:	bf00      	nop
 8001b74:	3724      	adds	r7, #36	; 0x24
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	40023800 	.word	0x40023800
 8001b84:	40013800 	.word	0x40013800
 8001b88:	40020000 	.word	0x40020000
 8001b8c:	40020400 	.word	0x40020400
 8001b90:	40020800 	.word	0x40020800
 8001b94:	40020c00 	.word	0x40020c00
 8001b98:	40021000 	.word	0x40021000
 8001b9c:	40021400 	.word	0x40021400
 8001ba0:	40021800 	.word	0x40021800
 8001ba4:	40021c00 	.word	0x40021c00
 8001ba8:	40022000 	.word	0x40022000
 8001bac:	40022400 	.word	0x40022400
 8001bb0:	40013c00 	.word	0x40013c00

08001bb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	460b      	mov	r3, r1
 8001bbe:	807b      	strh	r3, [r7, #2]
 8001bc0:	4613      	mov	r3, r2
 8001bc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bc4:	787b      	ldrb	r3, [r7, #1]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d003      	beq.n	8001bd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bca:	887a      	ldrh	r2, [r7, #2]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001bd0:	e003      	b.n	8001bda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001bd2:	887b      	ldrh	r3, [r7, #2]
 8001bd4:	041a      	lsls	r2, r3, #16
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	619a      	str	r2, [r3, #24]
}
 8001bda:	bf00      	nop
 8001bdc:	370c      	adds	r7, #12
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr

08001be6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001be6:	b480      	push	{r7}
 8001be8:	b085      	sub	sp, #20
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	6078      	str	r0, [r7, #4]
 8001bee:	460b      	mov	r3, r1
 8001bf0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	695b      	ldr	r3, [r3, #20]
 8001bf6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001bf8:	887a      	ldrh	r2, [r7, #2]
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	041a      	lsls	r2, r3, #16
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	43d9      	mvns	r1, r3
 8001c04:	887b      	ldrh	r3, [r7, #2]
 8001c06:	400b      	ands	r3, r1
 8001c08:	431a      	orrs	r2, r3
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	619a      	str	r2, [r3, #24]
}
 8001c0e:	bf00      	nop
 8001c10:	3714      	adds	r7, #20
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr

08001c1a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001c1a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c1c:	b08f      	sub	sp, #60	; 0x3c
 8001c1e:	af0a      	add	r7, sp, #40	; 0x28
 8001c20:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d101      	bne.n	8001c2c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e116      	b.n	8001e5a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d106      	bne.n	8001c4c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2200      	movs	r2, #0
 8001c42:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f7ff f860 	bl	8000d0c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2203      	movs	r2, #3
 8001c50:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d102      	bne.n	8001c66 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2200      	movs	r2, #0
 8001c64:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f002 fa4c 	bl	8004108 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	603b      	str	r3, [r7, #0]
 8001c76:	687e      	ldr	r6, [r7, #4]
 8001c78:	466d      	mov	r5, sp
 8001c7a:	f106 0410 	add.w	r4, r6, #16
 8001c7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c86:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001c8a:	e885 0003 	stmia.w	r5, {r0, r1}
 8001c8e:	1d33      	adds	r3, r6, #4
 8001c90:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c92:	6838      	ldr	r0, [r7, #0]
 8001c94:	f002 f9e0 	bl	8004058 <USB_CoreInit>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d005      	beq.n	8001caa <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2202      	movs	r2, #2
 8001ca2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e0d7      	b.n	8001e5a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	2100      	movs	r1, #0
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f002 fa3a 	bl	800412a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	73fb      	strb	r3, [r7, #15]
 8001cba:	e04a      	b.n	8001d52 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001cbc:	7bfa      	ldrb	r2, [r7, #15]
 8001cbe:	6879      	ldr	r1, [r7, #4]
 8001cc0:	4613      	mov	r3, r2
 8001cc2:	00db      	lsls	r3, r3, #3
 8001cc4:	4413      	add	r3, r2
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	440b      	add	r3, r1
 8001cca:	333d      	adds	r3, #61	; 0x3d
 8001ccc:	2201      	movs	r2, #1
 8001cce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001cd0:	7bfa      	ldrb	r2, [r7, #15]
 8001cd2:	6879      	ldr	r1, [r7, #4]
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	00db      	lsls	r3, r3, #3
 8001cd8:	4413      	add	r3, r2
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	440b      	add	r3, r1
 8001cde:	333c      	adds	r3, #60	; 0x3c
 8001ce0:	7bfa      	ldrb	r2, [r7, #15]
 8001ce2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001ce4:	7bfa      	ldrb	r2, [r7, #15]
 8001ce6:	7bfb      	ldrb	r3, [r7, #15]
 8001ce8:	b298      	uxth	r0, r3
 8001cea:	6879      	ldr	r1, [r7, #4]
 8001cec:	4613      	mov	r3, r2
 8001cee:	00db      	lsls	r3, r3, #3
 8001cf0:	4413      	add	r3, r2
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	440b      	add	r3, r1
 8001cf6:	3344      	adds	r3, #68	; 0x44
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001cfc:	7bfa      	ldrb	r2, [r7, #15]
 8001cfe:	6879      	ldr	r1, [r7, #4]
 8001d00:	4613      	mov	r3, r2
 8001d02:	00db      	lsls	r3, r3, #3
 8001d04:	4413      	add	r3, r2
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	440b      	add	r3, r1
 8001d0a:	3340      	adds	r3, #64	; 0x40
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001d10:	7bfa      	ldrb	r2, [r7, #15]
 8001d12:	6879      	ldr	r1, [r7, #4]
 8001d14:	4613      	mov	r3, r2
 8001d16:	00db      	lsls	r3, r3, #3
 8001d18:	4413      	add	r3, r2
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	440b      	add	r3, r1
 8001d1e:	3348      	adds	r3, #72	; 0x48
 8001d20:	2200      	movs	r2, #0
 8001d22:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001d24:	7bfa      	ldrb	r2, [r7, #15]
 8001d26:	6879      	ldr	r1, [r7, #4]
 8001d28:	4613      	mov	r3, r2
 8001d2a:	00db      	lsls	r3, r3, #3
 8001d2c:	4413      	add	r3, r2
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	440b      	add	r3, r1
 8001d32:	334c      	adds	r3, #76	; 0x4c
 8001d34:	2200      	movs	r2, #0
 8001d36:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001d38:	7bfa      	ldrb	r2, [r7, #15]
 8001d3a:	6879      	ldr	r1, [r7, #4]
 8001d3c:	4613      	mov	r3, r2
 8001d3e:	00db      	lsls	r3, r3, #3
 8001d40:	4413      	add	r3, r2
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	440b      	add	r3, r1
 8001d46:	3354      	adds	r3, #84	; 0x54
 8001d48:	2200      	movs	r2, #0
 8001d4a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d4c:	7bfb      	ldrb	r3, [r7, #15]
 8001d4e:	3301      	adds	r3, #1
 8001d50:	73fb      	strb	r3, [r7, #15]
 8001d52:	7bfa      	ldrb	r2, [r7, #15]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d3af      	bcc.n	8001cbc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	73fb      	strb	r3, [r7, #15]
 8001d60:	e044      	b.n	8001dec <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001d62:	7bfa      	ldrb	r2, [r7, #15]
 8001d64:	6879      	ldr	r1, [r7, #4]
 8001d66:	4613      	mov	r3, r2
 8001d68:	00db      	lsls	r3, r3, #3
 8001d6a:	4413      	add	r3, r2
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	440b      	add	r3, r1
 8001d70:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001d74:	2200      	movs	r2, #0
 8001d76:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001d78:	7bfa      	ldrb	r2, [r7, #15]
 8001d7a:	6879      	ldr	r1, [r7, #4]
 8001d7c:	4613      	mov	r3, r2
 8001d7e:	00db      	lsls	r3, r3, #3
 8001d80:	4413      	add	r3, r2
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	440b      	add	r3, r1
 8001d86:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001d8a:	7bfa      	ldrb	r2, [r7, #15]
 8001d8c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001d8e:	7bfa      	ldrb	r2, [r7, #15]
 8001d90:	6879      	ldr	r1, [r7, #4]
 8001d92:	4613      	mov	r3, r2
 8001d94:	00db      	lsls	r3, r3, #3
 8001d96:	4413      	add	r3, r2
 8001d98:	009b      	lsls	r3, r3, #2
 8001d9a:	440b      	add	r3, r1
 8001d9c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001da0:	2200      	movs	r2, #0
 8001da2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001da4:	7bfa      	ldrb	r2, [r7, #15]
 8001da6:	6879      	ldr	r1, [r7, #4]
 8001da8:	4613      	mov	r3, r2
 8001daa:	00db      	lsls	r3, r3, #3
 8001dac:	4413      	add	r3, r2
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	440b      	add	r3, r1
 8001db2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001db6:	2200      	movs	r2, #0
 8001db8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001dba:	7bfa      	ldrb	r2, [r7, #15]
 8001dbc:	6879      	ldr	r1, [r7, #4]
 8001dbe:	4613      	mov	r3, r2
 8001dc0:	00db      	lsls	r3, r3, #3
 8001dc2:	4413      	add	r3, r2
 8001dc4:	009b      	lsls	r3, r3, #2
 8001dc6:	440b      	add	r3, r1
 8001dc8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001dcc:	2200      	movs	r2, #0
 8001dce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001dd0:	7bfa      	ldrb	r2, [r7, #15]
 8001dd2:	6879      	ldr	r1, [r7, #4]
 8001dd4:	4613      	mov	r3, r2
 8001dd6:	00db      	lsls	r3, r3, #3
 8001dd8:	4413      	add	r3, r2
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	440b      	add	r3, r1
 8001dde:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001de2:	2200      	movs	r2, #0
 8001de4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001de6:	7bfb      	ldrb	r3, [r7, #15]
 8001de8:	3301      	adds	r3, #1
 8001dea:	73fb      	strb	r3, [r7, #15]
 8001dec:	7bfa      	ldrb	r2, [r7, #15]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	429a      	cmp	r2, r3
 8001df4:	d3b5      	bcc.n	8001d62 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	603b      	str	r3, [r7, #0]
 8001dfc:	687e      	ldr	r6, [r7, #4]
 8001dfe:	466d      	mov	r5, sp
 8001e00:	f106 0410 	add.w	r4, r6, #16
 8001e04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e06:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e0a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e0c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e10:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e14:	1d33      	adds	r3, r6, #4
 8001e16:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e18:	6838      	ldr	r0, [r7, #0]
 8001e1a:	f002 f9d3 	bl	80041c4 <USB_DevInit>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d005      	beq.n	8001e30 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2202      	movs	r2, #2
 8001e28:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e014      	b.n	8001e5a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2200      	movs	r2, #0
 8001e34:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d102      	bne.n	8001e4e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001e48:	6878      	ldr	r0, [r7, #4]
 8001e4a:	f000 f80b 	bl	8001e64 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4618      	mov	r0, r3
 8001e54:	f002 fb91 	bl	800457a <USB_DevDisconnect>

  return HAL_OK;
 8001e58:	2300      	movs	r3, #0
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3714      	adds	r7, #20
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001e64 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b085      	sub	sp, #20
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2201      	movs	r2, #1
 8001e76:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	699b      	ldr	r3, [r3, #24]
 8001e86:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001e92:	4b05      	ldr	r3, [pc, #20]	; (8001ea8 <HAL_PCDEx_ActivateLPM+0x44>)
 8001e94:	4313      	orrs	r3, r2
 8001e96:	68fa      	ldr	r2, [r7, #12]
 8001e98:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8001e9a:	2300      	movs	r3, #0
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3714      	adds	r7, #20
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr
 8001ea8:	10000003 	.word	0x10000003

08001eac <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001eb0:	4b05      	ldr	r3, [pc, #20]	; (8001ec8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a04      	ldr	r2, [pc, #16]	; (8001ec8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001eb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eba:	6013      	str	r3, [r2, #0]
}
 8001ebc:	bf00      	nop
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop
 8001ec8:	40007000 	.word	0x40007000

08001ecc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001ed6:	4b23      	ldr	r3, [pc, #140]	; (8001f64 <HAL_PWREx_EnableOverDrive+0x98>)
 8001ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eda:	4a22      	ldr	r2, [pc, #136]	; (8001f64 <HAL_PWREx_EnableOverDrive+0x98>)
 8001edc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ee0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ee2:	4b20      	ldr	r3, [pc, #128]	; (8001f64 <HAL_PWREx_EnableOverDrive+0x98>)
 8001ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eea:	603b      	str	r3, [r7, #0]
 8001eec:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001eee:	4b1e      	ldr	r3, [pc, #120]	; (8001f68 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a1d      	ldr	r2, [pc, #116]	; (8001f68 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001ef4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ef8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001efa:	f7ff f877 	bl	8000fec <HAL_GetTick>
 8001efe:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001f00:	e009      	b.n	8001f16 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001f02:	f7ff f873 	bl	8000fec <HAL_GetTick>
 8001f06:	4602      	mov	r2, r0
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	1ad3      	subs	r3, r2, r3
 8001f0c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001f10:	d901      	bls.n	8001f16 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e022      	b.n	8001f5c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001f16:	4b14      	ldr	r3, [pc, #80]	; (8001f68 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f22:	d1ee      	bne.n	8001f02 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001f24:	4b10      	ldr	r3, [pc, #64]	; (8001f68 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a0f      	ldr	r2, [pc, #60]	; (8001f68 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001f2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f2e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f30:	f7ff f85c 	bl	8000fec <HAL_GetTick>
 8001f34:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001f36:	e009      	b.n	8001f4c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001f38:	f7ff f858 	bl	8000fec <HAL_GetTick>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001f46:	d901      	bls.n	8001f4c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001f48:	2303      	movs	r3, #3
 8001f4a:	e007      	b.n	8001f5c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001f4c:	4b06      	ldr	r3, [pc, #24]	; (8001f68 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f54:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001f58:	d1ee      	bne.n	8001f38 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001f5a:	2300      	movs	r3, #0
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	3708      	adds	r7, #8
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	40023800 	.word	0x40023800
 8001f68:	40007000 	.word	0x40007000

08001f6c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b086      	sub	sp, #24
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001f74:	2300      	movs	r3, #0
 8001f76:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d101      	bne.n	8001f82 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e29b      	b.n	80024ba <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0301 	and.w	r3, r3, #1
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	f000 8087 	beq.w	800209e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f90:	4b96      	ldr	r3, [pc, #600]	; (80021ec <HAL_RCC_OscConfig+0x280>)
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	f003 030c 	and.w	r3, r3, #12
 8001f98:	2b04      	cmp	r3, #4
 8001f9a:	d00c      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f9c:	4b93      	ldr	r3, [pc, #588]	; (80021ec <HAL_RCC_OscConfig+0x280>)
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	f003 030c 	and.w	r3, r3, #12
 8001fa4:	2b08      	cmp	r3, #8
 8001fa6:	d112      	bne.n	8001fce <HAL_RCC_OscConfig+0x62>
 8001fa8:	4b90      	ldr	r3, [pc, #576]	; (80021ec <HAL_RCC_OscConfig+0x280>)
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fb0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001fb4:	d10b      	bne.n	8001fce <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fb6:	4b8d      	ldr	r3, [pc, #564]	; (80021ec <HAL_RCC_OscConfig+0x280>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d06c      	beq.n	800209c <HAL_RCC_OscConfig+0x130>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d168      	bne.n	800209c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e275      	b.n	80024ba <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fd6:	d106      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x7a>
 8001fd8:	4b84      	ldr	r3, [pc, #528]	; (80021ec <HAL_RCC_OscConfig+0x280>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a83      	ldr	r2, [pc, #524]	; (80021ec <HAL_RCC_OscConfig+0x280>)
 8001fde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fe2:	6013      	str	r3, [r2, #0]
 8001fe4:	e02e      	b.n	8002044 <HAL_RCC_OscConfig+0xd8>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d10c      	bne.n	8002008 <HAL_RCC_OscConfig+0x9c>
 8001fee:	4b7f      	ldr	r3, [pc, #508]	; (80021ec <HAL_RCC_OscConfig+0x280>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a7e      	ldr	r2, [pc, #504]	; (80021ec <HAL_RCC_OscConfig+0x280>)
 8001ff4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ff8:	6013      	str	r3, [r2, #0]
 8001ffa:	4b7c      	ldr	r3, [pc, #496]	; (80021ec <HAL_RCC_OscConfig+0x280>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a7b      	ldr	r2, [pc, #492]	; (80021ec <HAL_RCC_OscConfig+0x280>)
 8002000:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002004:	6013      	str	r3, [r2, #0]
 8002006:	e01d      	b.n	8002044 <HAL_RCC_OscConfig+0xd8>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002010:	d10c      	bne.n	800202c <HAL_RCC_OscConfig+0xc0>
 8002012:	4b76      	ldr	r3, [pc, #472]	; (80021ec <HAL_RCC_OscConfig+0x280>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a75      	ldr	r2, [pc, #468]	; (80021ec <HAL_RCC_OscConfig+0x280>)
 8002018:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800201c:	6013      	str	r3, [r2, #0]
 800201e:	4b73      	ldr	r3, [pc, #460]	; (80021ec <HAL_RCC_OscConfig+0x280>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a72      	ldr	r2, [pc, #456]	; (80021ec <HAL_RCC_OscConfig+0x280>)
 8002024:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002028:	6013      	str	r3, [r2, #0]
 800202a:	e00b      	b.n	8002044 <HAL_RCC_OscConfig+0xd8>
 800202c:	4b6f      	ldr	r3, [pc, #444]	; (80021ec <HAL_RCC_OscConfig+0x280>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a6e      	ldr	r2, [pc, #440]	; (80021ec <HAL_RCC_OscConfig+0x280>)
 8002032:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002036:	6013      	str	r3, [r2, #0]
 8002038:	4b6c      	ldr	r3, [pc, #432]	; (80021ec <HAL_RCC_OscConfig+0x280>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a6b      	ldr	r2, [pc, #428]	; (80021ec <HAL_RCC_OscConfig+0x280>)
 800203e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002042:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d013      	beq.n	8002074 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800204c:	f7fe ffce 	bl	8000fec <HAL_GetTick>
 8002050:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002052:	e008      	b.n	8002066 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002054:	f7fe ffca 	bl	8000fec <HAL_GetTick>
 8002058:	4602      	mov	r2, r0
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	2b64      	cmp	r3, #100	; 0x64
 8002060:	d901      	bls.n	8002066 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002062:	2303      	movs	r3, #3
 8002064:	e229      	b.n	80024ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002066:	4b61      	ldr	r3, [pc, #388]	; (80021ec <HAL_RCC_OscConfig+0x280>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d0f0      	beq.n	8002054 <HAL_RCC_OscConfig+0xe8>
 8002072:	e014      	b.n	800209e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002074:	f7fe ffba 	bl	8000fec <HAL_GetTick>
 8002078:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800207a:	e008      	b.n	800208e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800207c:	f7fe ffb6 	bl	8000fec <HAL_GetTick>
 8002080:	4602      	mov	r2, r0
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	2b64      	cmp	r3, #100	; 0x64
 8002088:	d901      	bls.n	800208e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800208a:	2303      	movs	r3, #3
 800208c:	e215      	b.n	80024ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800208e:	4b57      	ldr	r3, [pc, #348]	; (80021ec <HAL_RCC_OscConfig+0x280>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d1f0      	bne.n	800207c <HAL_RCC_OscConfig+0x110>
 800209a:	e000      	b.n	800209e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800209c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 0302 	and.w	r3, r3, #2
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d069      	beq.n	800217e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80020aa:	4b50      	ldr	r3, [pc, #320]	; (80021ec <HAL_RCC_OscConfig+0x280>)
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	f003 030c 	and.w	r3, r3, #12
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d00b      	beq.n	80020ce <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020b6:	4b4d      	ldr	r3, [pc, #308]	; (80021ec <HAL_RCC_OscConfig+0x280>)
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	f003 030c 	and.w	r3, r3, #12
 80020be:	2b08      	cmp	r3, #8
 80020c0:	d11c      	bne.n	80020fc <HAL_RCC_OscConfig+0x190>
 80020c2:	4b4a      	ldr	r3, [pc, #296]	; (80021ec <HAL_RCC_OscConfig+0x280>)
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d116      	bne.n	80020fc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020ce:	4b47      	ldr	r3, [pc, #284]	; (80021ec <HAL_RCC_OscConfig+0x280>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 0302 	and.w	r3, r3, #2
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d005      	beq.n	80020e6 <HAL_RCC_OscConfig+0x17a>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	68db      	ldr	r3, [r3, #12]
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d001      	beq.n	80020e6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e1e9      	b.n	80024ba <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020e6:	4b41      	ldr	r3, [pc, #260]	; (80021ec <HAL_RCC_OscConfig+0x280>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	691b      	ldr	r3, [r3, #16]
 80020f2:	00db      	lsls	r3, r3, #3
 80020f4:	493d      	ldr	r1, [pc, #244]	; (80021ec <HAL_RCC_OscConfig+0x280>)
 80020f6:	4313      	orrs	r3, r2
 80020f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020fa:	e040      	b.n	800217e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d023      	beq.n	800214c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002104:	4b39      	ldr	r3, [pc, #228]	; (80021ec <HAL_RCC_OscConfig+0x280>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a38      	ldr	r2, [pc, #224]	; (80021ec <HAL_RCC_OscConfig+0x280>)
 800210a:	f043 0301 	orr.w	r3, r3, #1
 800210e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002110:	f7fe ff6c 	bl	8000fec <HAL_GetTick>
 8002114:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002116:	e008      	b.n	800212a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002118:	f7fe ff68 	bl	8000fec <HAL_GetTick>
 800211c:	4602      	mov	r2, r0
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	2b02      	cmp	r3, #2
 8002124:	d901      	bls.n	800212a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002126:	2303      	movs	r3, #3
 8002128:	e1c7      	b.n	80024ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800212a:	4b30      	ldr	r3, [pc, #192]	; (80021ec <HAL_RCC_OscConfig+0x280>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0302 	and.w	r3, r3, #2
 8002132:	2b00      	cmp	r3, #0
 8002134:	d0f0      	beq.n	8002118 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002136:	4b2d      	ldr	r3, [pc, #180]	; (80021ec <HAL_RCC_OscConfig+0x280>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	691b      	ldr	r3, [r3, #16]
 8002142:	00db      	lsls	r3, r3, #3
 8002144:	4929      	ldr	r1, [pc, #164]	; (80021ec <HAL_RCC_OscConfig+0x280>)
 8002146:	4313      	orrs	r3, r2
 8002148:	600b      	str	r3, [r1, #0]
 800214a:	e018      	b.n	800217e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800214c:	4b27      	ldr	r3, [pc, #156]	; (80021ec <HAL_RCC_OscConfig+0x280>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a26      	ldr	r2, [pc, #152]	; (80021ec <HAL_RCC_OscConfig+0x280>)
 8002152:	f023 0301 	bic.w	r3, r3, #1
 8002156:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002158:	f7fe ff48 	bl	8000fec <HAL_GetTick>
 800215c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800215e:	e008      	b.n	8002172 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002160:	f7fe ff44 	bl	8000fec <HAL_GetTick>
 8002164:	4602      	mov	r2, r0
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	2b02      	cmp	r3, #2
 800216c:	d901      	bls.n	8002172 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800216e:	2303      	movs	r3, #3
 8002170:	e1a3      	b.n	80024ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002172:	4b1e      	ldr	r3, [pc, #120]	; (80021ec <HAL_RCC_OscConfig+0x280>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 0302 	and.w	r3, r3, #2
 800217a:	2b00      	cmp	r3, #0
 800217c:	d1f0      	bne.n	8002160 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 0308 	and.w	r3, r3, #8
 8002186:	2b00      	cmp	r3, #0
 8002188:	d038      	beq.n	80021fc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	695b      	ldr	r3, [r3, #20]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d019      	beq.n	80021c6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002192:	4b16      	ldr	r3, [pc, #88]	; (80021ec <HAL_RCC_OscConfig+0x280>)
 8002194:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002196:	4a15      	ldr	r2, [pc, #84]	; (80021ec <HAL_RCC_OscConfig+0x280>)
 8002198:	f043 0301 	orr.w	r3, r3, #1
 800219c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800219e:	f7fe ff25 	bl	8000fec <HAL_GetTick>
 80021a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021a4:	e008      	b.n	80021b8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021a6:	f7fe ff21 	bl	8000fec <HAL_GetTick>
 80021aa:	4602      	mov	r2, r0
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	1ad3      	subs	r3, r2, r3
 80021b0:	2b02      	cmp	r3, #2
 80021b2:	d901      	bls.n	80021b8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80021b4:	2303      	movs	r3, #3
 80021b6:	e180      	b.n	80024ba <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021b8:	4b0c      	ldr	r3, [pc, #48]	; (80021ec <HAL_RCC_OscConfig+0x280>)
 80021ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021bc:	f003 0302 	and.w	r3, r3, #2
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d0f0      	beq.n	80021a6 <HAL_RCC_OscConfig+0x23a>
 80021c4:	e01a      	b.n	80021fc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021c6:	4b09      	ldr	r3, [pc, #36]	; (80021ec <HAL_RCC_OscConfig+0x280>)
 80021c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021ca:	4a08      	ldr	r2, [pc, #32]	; (80021ec <HAL_RCC_OscConfig+0x280>)
 80021cc:	f023 0301 	bic.w	r3, r3, #1
 80021d0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021d2:	f7fe ff0b 	bl	8000fec <HAL_GetTick>
 80021d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021d8:	e00a      	b.n	80021f0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021da:	f7fe ff07 	bl	8000fec <HAL_GetTick>
 80021de:	4602      	mov	r2, r0
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	1ad3      	subs	r3, r2, r3
 80021e4:	2b02      	cmp	r3, #2
 80021e6:	d903      	bls.n	80021f0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80021e8:	2303      	movs	r3, #3
 80021ea:	e166      	b.n	80024ba <HAL_RCC_OscConfig+0x54e>
 80021ec:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021f0:	4b92      	ldr	r3, [pc, #584]	; (800243c <HAL_RCC_OscConfig+0x4d0>)
 80021f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021f4:	f003 0302 	and.w	r3, r3, #2
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d1ee      	bne.n	80021da <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 0304 	and.w	r3, r3, #4
 8002204:	2b00      	cmp	r3, #0
 8002206:	f000 80a4 	beq.w	8002352 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800220a:	4b8c      	ldr	r3, [pc, #560]	; (800243c <HAL_RCC_OscConfig+0x4d0>)
 800220c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002212:	2b00      	cmp	r3, #0
 8002214:	d10d      	bne.n	8002232 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002216:	4b89      	ldr	r3, [pc, #548]	; (800243c <HAL_RCC_OscConfig+0x4d0>)
 8002218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221a:	4a88      	ldr	r2, [pc, #544]	; (800243c <HAL_RCC_OscConfig+0x4d0>)
 800221c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002220:	6413      	str	r3, [r2, #64]	; 0x40
 8002222:	4b86      	ldr	r3, [pc, #536]	; (800243c <HAL_RCC_OscConfig+0x4d0>)
 8002224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002226:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800222a:	60bb      	str	r3, [r7, #8]
 800222c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800222e:	2301      	movs	r3, #1
 8002230:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002232:	4b83      	ldr	r3, [pc, #524]	; (8002440 <HAL_RCC_OscConfig+0x4d4>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800223a:	2b00      	cmp	r3, #0
 800223c:	d118      	bne.n	8002270 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800223e:	4b80      	ldr	r3, [pc, #512]	; (8002440 <HAL_RCC_OscConfig+0x4d4>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a7f      	ldr	r2, [pc, #508]	; (8002440 <HAL_RCC_OscConfig+0x4d4>)
 8002244:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002248:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800224a:	f7fe fecf 	bl	8000fec <HAL_GetTick>
 800224e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002250:	e008      	b.n	8002264 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002252:	f7fe fecb 	bl	8000fec <HAL_GetTick>
 8002256:	4602      	mov	r2, r0
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	1ad3      	subs	r3, r2, r3
 800225c:	2b64      	cmp	r3, #100	; 0x64
 800225e:	d901      	bls.n	8002264 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002260:	2303      	movs	r3, #3
 8002262:	e12a      	b.n	80024ba <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002264:	4b76      	ldr	r3, [pc, #472]	; (8002440 <HAL_RCC_OscConfig+0x4d4>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800226c:	2b00      	cmp	r3, #0
 800226e:	d0f0      	beq.n	8002252 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	2b01      	cmp	r3, #1
 8002276:	d106      	bne.n	8002286 <HAL_RCC_OscConfig+0x31a>
 8002278:	4b70      	ldr	r3, [pc, #448]	; (800243c <HAL_RCC_OscConfig+0x4d0>)
 800227a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800227c:	4a6f      	ldr	r2, [pc, #444]	; (800243c <HAL_RCC_OscConfig+0x4d0>)
 800227e:	f043 0301 	orr.w	r3, r3, #1
 8002282:	6713      	str	r3, [r2, #112]	; 0x70
 8002284:	e02d      	b.n	80022e2 <HAL_RCC_OscConfig+0x376>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d10c      	bne.n	80022a8 <HAL_RCC_OscConfig+0x33c>
 800228e:	4b6b      	ldr	r3, [pc, #428]	; (800243c <HAL_RCC_OscConfig+0x4d0>)
 8002290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002292:	4a6a      	ldr	r2, [pc, #424]	; (800243c <HAL_RCC_OscConfig+0x4d0>)
 8002294:	f023 0301 	bic.w	r3, r3, #1
 8002298:	6713      	str	r3, [r2, #112]	; 0x70
 800229a:	4b68      	ldr	r3, [pc, #416]	; (800243c <HAL_RCC_OscConfig+0x4d0>)
 800229c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800229e:	4a67      	ldr	r2, [pc, #412]	; (800243c <HAL_RCC_OscConfig+0x4d0>)
 80022a0:	f023 0304 	bic.w	r3, r3, #4
 80022a4:	6713      	str	r3, [r2, #112]	; 0x70
 80022a6:	e01c      	b.n	80022e2 <HAL_RCC_OscConfig+0x376>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	2b05      	cmp	r3, #5
 80022ae:	d10c      	bne.n	80022ca <HAL_RCC_OscConfig+0x35e>
 80022b0:	4b62      	ldr	r3, [pc, #392]	; (800243c <HAL_RCC_OscConfig+0x4d0>)
 80022b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022b4:	4a61      	ldr	r2, [pc, #388]	; (800243c <HAL_RCC_OscConfig+0x4d0>)
 80022b6:	f043 0304 	orr.w	r3, r3, #4
 80022ba:	6713      	str	r3, [r2, #112]	; 0x70
 80022bc:	4b5f      	ldr	r3, [pc, #380]	; (800243c <HAL_RCC_OscConfig+0x4d0>)
 80022be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022c0:	4a5e      	ldr	r2, [pc, #376]	; (800243c <HAL_RCC_OscConfig+0x4d0>)
 80022c2:	f043 0301 	orr.w	r3, r3, #1
 80022c6:	6713      	str	r3, [r2, #112]	; 0x70
 80022c8:	e00b      	b.n	80022e2 <HAL_RCC_OscConfig+0x376>
 80022ca:	4b5c      	ldr	r3, [pc, #368]	; (800243c <HAL_RCC_OscConfig+0x4d0>)
 80022cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ce:	4a5b      	ldr	r2, [pc, #364]	; (800243c <HAL_RCC_OscConfig+0x4d0>)
 80022d0:	f023 0301 	bic.w	r3, r3, #1
 80022d4:	6713      	str	r3, [r2, #112]	; 0x70
 80022d6:	4b59      	ldr	r3, [pc, #356]	; (800243c <HAL_RCC_OscConfig+0x4d0>)
 80022d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022da:	4a58      	ldr	r2, [pc, #352]	; (800243c <HAL_RCC_OscConfig+0x4d0>)
 80022dc:	f023 0304 	bic.w	r3, r3, #4
 80022e0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d015      	beq.n	8002316 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022ea:	f7fe fe7f 	bl	8000fec <HAL_GetTick>
 80022ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022f0:	e00a      	b.n	8002308 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022f2:	f7fe fe7b 	bl	8000fec <HAL_GetTick>
 80022f6:	4602      	mov	r2, r0
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002300:	4293      	cmp	r3, r2
 8002302:	d901      	bls.n	8002308 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002304:	2303      	movs	r3, #3
 8002306:	e0d8      	b.n	80024ba <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002308:	4b4c      	ldr	r3, [pc, #304]	; (800243c <HAL_RCC_OscConfig+0x4d0>)
 800230a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800230c:	f003 0302 	and.w	r3, r3, #2
 8002310:	2b00      	cmp	r3, #0
 8002312:	d0ee      	beq.n	80022f2 <HAL_RCC_OscConfig+0x386>
 8002314:	e014      	b.n	8002340 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002316:	f7fe fe69 	bl	8000fec <HAL_GetTick>
 800231a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800231c:	e00a      	b.n	8002334 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800231e:	f7fe fe65 	bl	8000fec <HAL_GetTick>
 8002322:	4602      	mov	r2, r0
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	1ad3      	subs	r3, r2, r3
 8002328:	f241 3288 	movw	r2, #5000	; 0x1388
 800232c:	4293      	cmp	r3, r2
 800232e:	d901      	bls.n	8002334 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002330:	2303      	movs	r3, #3
 8002332:	e0c2      	b.n	80024ba <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002334:	4b41      	ldr	r3, [pc, #260]	; (800243c <HAL_RCC_OscConfig+0x4d0>)
 8002336:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002338:	f003 0302 	and.w	r3, r3, #2
 800233c:	2b00      	cmp	r3, #0
 800233e:	d1ee      	bne.n	800231e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002340:	7dfb      	ldrb	r3, [r7, #23]
 8002342:	2b01      	cmp	r3, #1
 8002344:	d105      	bne.n	8002352 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002346:	4b3d      	ldr	r3, [pc, #244]	; (800243c <HAL_RCC_OscConfig+0x4d0>)
 8002348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234a:	4a3c      	ldr	r2, [pc, #240]	; (800243c <HAL_RCC_OscConfig+0x4d0>)
 800234c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002350:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	699b      	ldr	r3, [r3, #24]
 8002356:	2b00      	cmp	r3, #0
 8002358:	f000 80ae 	beq.w	80024b8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800235c:	4b37      	ldr	r3, [pc, #220]	; (800243c <HAL_RCC_OscConfig+0x4d0>)
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	f003 030c 	and.w	r3, r3, #12
 8002364:	2b08      	cmp	r3, #8
 8002366:	d06d      	beq.n	8002444 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	699b      	ldr	r3, [r3, #24]
 800236c:	2b02      	cmp	r3, #2
 800236e:	d14b      	bne.n	8002408 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002370:	4b32      	ldr	r3, [pc, #200]	; (800243c <HAL_RCC_OscConfig+0x4d0>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a31      	ldr	r2, [pc, #196]	; (800243c <HAL_RCC_OscConfig+0x4d0>)
 8002376:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800237a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800237c:	f7fe fe36 	bl	8000fec <HAL_GetTick>
 8002380:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002382:	e008      	b.n	8002396 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002384:	f7fe fe32 	bl	8000fec <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	2b02      	cmp	r3, #2
 8002390:	d901      	bls.n	8002396 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	e091      	b.n	80024ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002396:	4b29      	ldr	r3, [pc, #164]	; (800243c <HAL_RCC_OscConfig+0x4d0>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d1f0      	bne.n	8002384 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	69da      	ldr	r2, [r3, #28]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6a1b      	ldr	r3, [r3, #32]
 80023aa:	431a      	orrs	r2, r3
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b0:	019b      	lsls	r3, r3, #6
 80023b2:	431a      	orrs	r2, r3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023b8:	085b      	lsrs	r3, r3, #1
 80023ba:	3b01      	subs	r3, #1
 80023bc:	041b      	lsls	r3, r3, #16
 80023be:	431a      	orrs	r2, r3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c4:	061b      	lsls	r3, r3, #24
 80023c6:	431a      	orrs	r2, r3
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023cc:	071b      	lsls	r3, r3, #28
 80023ce:	491b      	ldr	r1, [pc, #108]	; (800243c <HAL_RCC_OscConfig+0x4d0>)
 80023d0:	4313      	orrs	r3, r2
 80023d2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023d4:	4b19      	ldr	r3, [pc, #100]	; (800243c <HAL_RCC_OscConfig+0x4d0>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a18      	ldr	r2, [pc, #96]	; (800243c <HAL_RCC_OscConfig+0x4d0>)
 80023da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023e0:	f7fe fe04 	bl	8000fec <HAL_GetTick>
 80023e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023e6:	e008      	b.n	80023fa <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023e8:	f7fe fe00 	bl	8000fec <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	d901      	bls.n	80023fa <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80023f6:	2303      	movs	r3, #3
 80023f8:	e05f      	b.n	80024ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023fa:	4b10      	ldr	r3, [pc, #64]	; (800243c <HAL_RCC_OscConfig+0x4d0>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d0f0      	beq.n	80023e8 <HAL_RCC_OscConfig+0x47c>
 8002406:	e057      	b.n	80024b8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002408:	4b0c      	ldr	r3, [pc, #48]	; (800243c <HAL_RCC_OscConfig+0x4d0>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a0b      	ldr	r2, [pc, #44]	; (800243c <HAL_RCC_OscConfig+0x4d0>)
 800240e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002412:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002414:	f7fe fdea 	bl	8000fec <HAL_GetTick>
 8002418:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800241a:	e008      	b.n	800242e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800241c:	f7fe fde6 	bl	8000fec <HAL_GetTick>
 8002420:	4602      	mov	r2, r0
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	2b02      	cmp	r3, #2
 8002428:	d901      	bls.n	800242e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	e045      	b.n	80024ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800242e:	4b03      	ldr	r3, [pc, #12]	; (800243c <HAL_RCC_OscConfig+0x4d0>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d1f0      	bne.n	800241c <HAL_RCC_OscConfig+0x4b0>
 800243a:	e03d      	b.n	80024b8 <HAL_RCC_OscConfig+0x54c>
 800243c:	40023800 	.word	0x40023800
 8002440:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002444:	4b1f      	ldr	r3, [pc, #124]	; (80024c4 <HAL_RCC_OscConfig+0x558>)
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	699b      	ldr	r3, [r3, #24]
 800244e:	2b01      	cmp	r3, #1
 8002450:	d030      	beq.n	80024b4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800245c:	429a      	cmp	r2, r3
 800245e:	d129      	bne.n	80024b4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800246a:	429a      	cmp	r2, r3
 800246c:	d122      	bne.n	80024b4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800246e:	68fa      	ldr	r2, [r7, #12]
 8002470:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002474:	4013      	ands	r3, r2
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800247a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800247c:	4293      	cmp	r3, r2
 800247e:	d119      	bne.n	80024b4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800248a:	085b      	lsrs	r3, r3, #1
 800248c:	3b01      	subs	r3, #1
 800248e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002490:	429a      	cmp	r2, r3
 8002492:	d10f      	bne.n	80024b4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800249e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d107      	bne.n	80024b4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ae:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d001      	beq.n	80024b8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	e000      	b.n	80024ba <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80024b8:	2300      	movs	r3, #0
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3718      	adds	r7, #24
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	40023800 	.word	0x40023800

080024c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b084      	sub	sp, #16
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80024d2:	2300      	movs	r3, #0
 80024d4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d101      	bne.n	80024e0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e0d0      	b.n	8002682 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024e0:	4b6a      	ldr	r3, [pc, #424]	; (800268c <HAL_RCC_ClockConfig+0x1c4>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 030f 	and.w	r3, r3, #15
 80024e8:	683a      	ldr	r2, [r7, #0]
 80024ea:	429a      	cmp	r2, r3
 80024ec:	d910      	bls.n	8002510 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ee:	4b67      	ldr	r3, [pc, #412]	; (800268c <HAL_RCC_ClockConfig+0x1c4>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f023 020f 	bic.w	r2, r3, #15
 80024f6:	4965      	ldr	r1, [pc, #404]	; (800268c <HAL_RCC_ClockConfig+0x1c4>)
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	4313      	orrs	r3, r2
 80024fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024fe:	4b63      	ldr	r3, [pc, #396]	; (800268c <HAL_RCC_ClockConfig+0x1c4>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 030f 	and.w	r3, r3, #15
 8002506:	683a      	ldr	r2, [r7, #0]
 8002508:	429a      	cmp	r2, r3
 800250a:	d001      	beq.n	8002510 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e0b8      	b.n	8002682 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 0302 	and.w	r3, r3, #2
 8002518:	2b00      	cmp	r3, #0
 800251a:	d020      	beq.n	800255e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 0304 	and.w	r3, r3, #4
 8002524:	2b00      	cmp	r3, #0
 8002526:	d005      	beq.n	8002534 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002528:	4b59      	ldr	r3, [pc, #356]	; (8002690 <HAL_RCC_ClockConfig+0x1c8>)
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	4a58      	ldr	r2, [pc, #352]	; (8002690 <HAL_RCC_ClockConfig+0x1c8>)
 800252e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002532:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 0308 	and.w	r3, r3, #8
 800253c:	2b00      	cmp	r3, #0
 800253e:	d005      	beq.n	800254c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002540:	4b53      	ldr	r3, [pc, #332]	; (8002690 <HAL_RCC_ClockConfig+0x1c8>)
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	4a52      	ldr	r2, [pc, #328]	; (8002690 <HAL_RCC_ClockConfig+0x1c8>)
 8002546:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800254a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800254c:	4b50      	ldr	r3, [pc, #320]	; (8002690 <HAL_RCC_ClockConfig+0x1c8>)
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	494d      	ldr	r1, [pc, #308]	; (8002690 <HAL_RCC_ClockConfig+0x1c8>)
 800255a:	4313      	orrs	r3, r2
 800255c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0301 	and.w	r3, r3, #1
 8002566:	2b00      	cmp	r3, #0
 8002568:	d040      	beq.n	80025ec <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	2b01      	cmp	r3, #1
 8002570:	d107      	bne.n	8002582 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002572:	4b47      	ldr	r3, [pc, #284]	; (8002690 <HAL_RCC_ClockConfig+0x1c8>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d115      	bne.n	80025aa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e07f      	b.n	8002682 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	2b02      	cmp	r3, #2
 8002588:	d107      	bne.n	800259a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800258a:	4b41      	ldr	r3, [pc, #260]	; (8002690 <HAL_RCC_ClockConfig+0x1c8>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d109      	bne.n	80025aa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e073      	b.n	8002682 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800259a:	4b3d      	ldr	r3, [pc, #244]	; (8002690 <HAL_RCC_ClockConfig+0x1c8>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0302 	and.w	r3, r3, #2
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d101      	bne.n	80025aa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e06b      	b.n	8002682 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025aa:	4b39      	ldr	r3, [pc, #228]	; (8002690 <HAL_RCC_ClockConfig+0x1c8>)
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	f023 0203 	bic.w	r2, r3, #3
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	4936      	ldr	r1, [pc, #216]	; (8002690 <HAL_RCC_ClockConfig+0x1c8>)
 80025b8:	4313      	orrs	r3, r2
 80025ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025bc:	f7fe fd16 	bl	8000fec <HAL_GetTick>
 80025c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025c2:	e00a      	b.n	80025da <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025c4:	f7fe fd12 	bl	8000fec <HAL_GetTick>
 80025c8:	4602      	mov	r2, r0
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d901      	bls.n	80025da <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e053      	b.n	8002682 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025da:	4b2d      	ldr	r3, [pc, #180]	; (8002690 <HAL_RCC_ClockConfig+0x1c8>)
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	f003 020c 	and.w	r2, r3, #12
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d1eb      	bne.n	80025c4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80025ec:	4b27      	ldr	r3, [pc, #156]	; (800268c <HAL_RCC_ClockConfig+0x1c4>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 030f 	and.w	r3, r3, #15
 80025f4:	683a      	ldr	r2, [r7, #0]
 80025f6:	429a      	cmp	r2, r3
 80025f8:	d210      	bcs.n	800261c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025fa:	4b24      	ldr	r3, [pc, #144]	; (800268c <HAL_RCC_ClockConfig+0x1c4>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f023 020f 	bic.w	r2, r3, #15
 8002602:	4922      	ldr	r1, [pc, #136]	; (800268c <HAL_RCC_ClockConfig+0x1c4>)
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	4313      	orrs	r3, r2
 8002608:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800260a:	4b20      	ldr	r3, [pc, #128]	; (800268c <HAL_RCC_ClockConfig+0x1c4>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 030f 	and.w	r3, r3, #15
 8002612:	683a      	ldr	r2, [r7, #0]
 8002614:	429a      	cmp	r2, r3
 8002616:	d001      	beq.n	800261c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	e032      	b.n	8002682 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 0304 	and.w	r3, r3, #4
 8002624:	2b00      	cmp	r3, #0
 8002626:	d008      	beq.n	800263a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002628:	4b19      	ldr	r3, [pc, #100]	; (8002690 <HAL_RCC_ClockConfig+0x1c8>)
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	4916      	ldr	r1, [pc, #88]	; (8002690 <HAL_RCC_ClockConfig+0x1c8>)
 8002636:	4313      	orrs	r3, r2
 8002638:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0308 	and.w	r3, r3, #8
 8002642:	2b00      	cmp	r3, #0
 8002644:	d009      	beq.n	800265a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002646:	4b12      	ldr	r3, [pc, #72]	; (8002690 <HAL_RCC_ClockConfig+0x1c8>)
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	691b      	ldr	r3, [r3, #16]
 8002652:	00db      	lsls	r3, r3, #3
 8002654:	490e      	ldr	r1, [pc, #56]	; (8002690 <HAL_RCC_ClockConfig+0x1c8>)
 8002656:	4313      	orrs	r3, r2
 8002658:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800265a:	f000 f821 	bl	80026a0 <HAL_RCC_GetSysClockFreq>
 800265e:	4602      	mov	r2, r0
 8002660:	4b0b      	ldr	r3, [pc, #44]	; (8002690 <HAL_RCC_ClockConfig+0x1c8>)
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	091b      	lsrs	r3, r3, #4
 8002666:	f003 030f 	and.w	r3, r3, #15
 800266a:	490a      	ldr	r1, [pc, #40]	; (8002694 <HAL_RCC_ClockConfig+0x1cc>)
 800266c:	5ccb      	ldrb	r3, [r1, r3]
 800266e:	fa22 f303 	lsr.w	r3, r2, r3
 8002672:	4a09      	ldr	r2, [pc, #36]	; (8002698 <HAL_RCC_ClockConfig+0x1d0>)
 8002674:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002676:	4b09      	ldr	r3, [pc, #36]	; (800269c <HAL_RCC_ClockConfig+0x1d4>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4618      	mov	r0, r3
 800267c:	f7fe fbc0 	bl	8000e00 <HAL_InitTick>

  return HAL_OK;
 8002680:	2300      	movs	r3, #0
}
 8002682:	4618      	mov	r0, r3
 8002684:	3710      	adds	r7, #16
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	40023c00 	.word	0x40023c00
 8002690:	40023800 	.word	0x40023800
 8002694:	08009160 	.word	0x08009160
 8002698:	20000000 	.word	0x20000000
 800269c:	20000004 	.word	0x20000004

080026a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026a4:	b094      	sub	sp, #80	; 0x50
 80026a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80026a8:	2300      	movs	r3, #0
 80026aa:	647b      	str	r3, [r7, #68]	; 0x44
 80026ac:	2300      	movs	r3, #0
 80026ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80026b0:	2300      	movs	r3, #0
 80026b2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80026b4:	2300      	movs	r3, #0
 80026b6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026b8:	4b79      	ldr	r3, [pc, #484]	; (80028a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	f003 030c 	and.w	r3, r3, #12
 80026c0:	2b08      	cmp	r3, #8
 80026c2:	d00d      	beq.n	80026e0 <HAL_RCC_GetSysClockFreq+0x40>
 80026c4:	2b08      	cmp	r3, #8
 80026c6:	f200 80e1 	bhi.w	800288c <HAL_RCC_GetSysClockFreq+0x1ec>
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d002      	beq.n	80026d4 <HAL_RCC_GetSysClockFreq+0x34>
 80026ce:	2b04      	cmp	r3, #4
 80026d0:	d003      	beq.n	80026da <HAL_RCC_GetSysClockFreq+0x3a>
 80026d2:	e0db      	b.n	800288c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80026d4:	4b73      	ldr	r3, [pc, #460]	; (80028a4 <HAL_RCC_GetSysClockFreq+0x204>)
 80026d6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80026d8:	e0db      	b.n	8002892 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80026da:	4b73      	ldr	r3, [pc, #460]	; (80028a8 <HAL_RCC_GetSysClockFreq+0x208>)
 80026dc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80026de:	e0d8      	b.n	8002892 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80026e0:	4b6f      	ldr	r3, [pc, #444]	; (80028a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80026e8:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80026ea:	4b6d      	ldr	r3, [pc, #436]	; (80028a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d063      	beq.n	80027be <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026f6:	4b6a      	ldr	r3, [pc, #424]	; (80028a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	099b      	lsrs	r3, r3, #6
 80026fc:	2200      	movs	r2, #0
 80026fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8002700:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002704:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002708:	633b      	str	r3, [r7, #48]	; 0x30
 800270a:	2300      	movs	r3, #0
 800270c:	637b      	str	r3, [r7, #52]	; 0x34
 800270e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002712:	4622      	mov	r2, r4
 8002714:	462b      	mov	r3, r5
 8002716:	f04f 0000 	mov.w	r0, #0
 800271a:	f04f 0100 	mov.w	r1, #0
 800271e:	0159      	lsls	r1, r3, #5
 8002720:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002724:	0150      	lsls	r0, r2, #5
 8002726:	4602      	mov	r2, r0
 8002728:	460b      	mov	r3, r1
 800272a:	4621      	mov	r1, r4
 800272c:	1a51      	subs	r1, r2, r1
 800272e:	6139      	str	r1, [r7, #16]
 8002730:	4629      	mov	r1, r5
 8002732:	eb63 0301 	sbc.w	r3, r3, r1
 8002736:	617b      	str	r3, [r7, #20]
 8002738:	f04f 0200 	mov.w	r2, #0
 800273c:	f04f 0300 	mov.w	r3, #0
 8002740:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002744:	4659      	mov	r1, fp
 8002746:	018b      	lsls	r3, r1, #6
 8002748:	4651      	mov	r1, sl
 800274a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800274e:	4651      	mov	r1, sl
 8002750:	018a      	lsls	r2, r1, #6
 8002752:	4651      	mov	r1, sl
 8002754:	ebb2 0801 	subs.w	r8, r2, r1
 8002758:	4659      	mov	r1, fp
 800275a:	eb63 0901 	sbc.w	r9, r3, r1
 800275e:	f04f 0200 	mov.w	r2, #0
 8002762:	f04f 0300 	mov.w	r3, #0
 8002766:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800276a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800276e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002772:	4690      	mov	r8, r2
 8002774:	4699      	mov	r9, r3
 8002776:	4623      	mov	r3, r4
 8002778:	eb18 0303 	adds.w	r3, r8, r3
 800277c:	60bb      	str	r3, [r7, #8]
 800277e:	462b      	mov	r3, r5
 8002780:	eb49 0303 	adc.w	r3, r9, r3
 8002784:	60fb      	str	r3, [r7, #12]
 8002786:	f04f 0200 	mov.w	r2, #0
 800278a:	f04f 0300 	mov.w	r3, #0
 800278e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002792:	4629      	mov	r1, r5
 8002794:	024b      	lsls	r3, r1, #9
 8002796:	4621      	mov	r1, r4
 8002798:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800279c:	4621      	mov	r1, r4
 800279e:	024a      	lsls	r2, r1, #9
 80027a0:	4610      	mov	r0, r2
 80027a2:	4619      	mov	r1, r3
 80027a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027a6:	2200      	movs	r2, #0
 80027a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80027aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80027ac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80027b0:	f7fd fd46 	bl	8000240 <__aeabi_uldivmod>
 80027b4:	4602      	mov	r2, r0
 80027b6:	460b      	mov	r3, r1
 80027b8:	4613      	mov	r3, r2
 80027ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80027bc:	e058      	b.n	8002870 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027be:	4b38      	ldr	r3, [pc, #224]	; (80028a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	099b      	lsrs	r3, r3, #6
 80027c4:	2200      	movs	r2, #0
 80027c6:	4618      	mov	r0, r3
 80027c8:	4611      	mov	r1, r2
 80027ca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80027ce:	623b      	str	r3, [r7, #32]
 80027d0:	2300      	movs	r3, #0
 80027d2:	627b      	str	r3, [r7, #36]	; 0x24
 80027d4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80027d8:	4642      	mov	r2, r8
 80027da:	464b      	mov	r3, r9
 80027dc:	f04f 0000 	mov.w	r0, #0
 80027e0:	f04f 0100 	mov.w	r1, #0
 80027e4:	0159      	lsls	r1, r3, #5
 80027e6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027ea:	0150      	lsls	r0, r2, #5
 80027ec:	4602      	mov	r2, r0
 80027ee:	460b      	mov	r3, r1
 80027f0:	4641      	mov	r1, r8
 80027f2:	ebb2 0a01 	subs.w	sl, r2, r1
 80027f6:	4649      	mov	r1, r9
 80027f8:	eb63 0b01 	sbc.w	fp, r3, r1
 80027fc:	f04f 0200 	mov.w	r2, #0
 8002800:	f04f 0300 	mov.w	r3, #0
 8002804:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002808:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800280c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002810:	ebb2 040a 	subs.w	r4, r2, sl
 8002814:	eb63 050b 	sbc.w	r5, r3, fp
 8002818:	f04f 0200 	mov.w	r2, #0
 800281c:	f04f 0300 	mov.w	r3, #0
 8002820:	00eb      	lsls	r3, r5, #3
 8002822:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002826:	00e2      	lsls	r2, r4, #3
 8002828:	4614      	mov	r4, r2
 800282a:	461d      	mov	r5, r3
 800282c:	4643      	mov	r3, r8
 800282e:	18e3      	adds	r3, r4, r3
 8002830:	603b      	str	r3, [r7, #0]
 8002832:	464b      	mov	r3, r9
 8002834:	eb45 0303 	adc.w	r3, r5, r3
 8002838:	607b      	str	r3, [r7, #4]
 800283a:	f04f 0200 	mov.w	r2, #0
 800283e:	f04f 0300 	mov.w	r3, #0
 8002842:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002846:	4629      	mov	r1, r5
 8002848:	028b      	lsls	r3, r1, #10
 800284a:	4621      	mov	r1, r4
 800284c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002850:	4621      	mov	r1, r4
 8002852:	028a      	lsls	r2, r1, #10
 8002854:	4610      	mov	r0, r2
 8002856:	4619      	mov	r1, r3
 8002858:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800285a:	2200      	movs	r2, #0
 800285c:	61bb      	str	r3, [r7, #24]
 800285e:	61fa      	str	r2, [r7, #28]
 8002860:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002864:	f7fd fcec 	bl	8000240 <__aeabi_uldivmod>
 8002868:	4602      	mov	r2, r0
 800286a:	460b      	mov	r3, r1
 800286c:	4613      	mov	r3, r2
 800286e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002870:	4b0b      	ldr	r3, [pc, #44]	; (80028a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	0c1b      	lsrs	r3, r3, #16
 8002876:	f003 0303 	and.w	r3, r3, #3
 800287a:	3301      	adds	r3, #1
 800287c:	005b      	lsls	r3, r3, #1
 800287e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8002880:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002882:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002884:	fbb2 f3f3 	udiv	r3, r2, r3
 8002888:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800288a:	e002      	b.n	8002892 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800288c:	4b05      	ldr	r3, [pc, #20]	; (80028a4 <HAL_RCC_GetSysClockFreq+0x204>)
 800288e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002890:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002892:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002894:	4618      	mov	r0, r3
 8002896:	3750      	adds	r7, #80	; 0x50
 8002898:	46bd      	mov	sp, r7
 800289a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800289e:	bf00      	nop
 80028a0:	40023800 	.word	0x40023800
 80028a4:	00f42400 	.word	0x00f42400
 80028a8:	007a1200 	.word	0x007a1200

080028ac <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028ac:	b480      	push	{r7}
 80028ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028b0:	4b03      	ldr	r3, [pc, #12]	; (80028c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80028b2:	681b      	ldr	r3, [r3, #0]
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr
 80028be:	bf00      	nop
 80028c0:	20000000 	.word	0x20000000

080028c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80028c8:	f7ff fff0 	bl	80028ac <HAL_RCC_GetHCLKFreq>
 80028cc:	4602      	mov	r2, r0
 80028ce:	4b05      	ldr	r3, [pc, #20]	; (80028e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	0a9b      	lsrs	r3, r3, #10
 80028d4:	f003 0307 	and.w	r3, r3, #7
 80028d8:	4903      	ldr	r1, [pc, #12]	; (80028e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028da:	5ccb      	ldrb	r3, [r1, r3]
 80028dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	bd80      	pop	{r7, pc}
 80028e4:	40023800 	.word	0x40023800
 80028e8:	08009170 	.word	0x08009170

080028ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80028f0:	f7ff ffdc 	bl	80028ac <HAL_RCC_GetHCLKFreq>
 80028f4:	4602      	mov	r2, r0
 80028f6:	4b05      	ldr	r3, [pc, #20]	; (800290c <HAL_RCC_GetPCLK2Freq+0x20>)
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	0b5b      	lsrs	r3, r3, #13
 80028fc:	f003 0307 	and.w	r3, r3, #7
 8002900:	4903      	ldr	r1, [pc, #12]	; (8002910 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002902:	5ccb      	ldrb	r3, [r1, r3]
 8002904:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002908:	4618      	mov	r0, r3
 800290a:	bd80      	pop	{r7, pc}
 800290c:	40023800 	.word	0x40023800
 8002910:	08009170 	.word	0x08009170

08002914 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002914:	b480      	push	{r7}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	220f      	movs	r2, #15
 8002922:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002924:	4b12      	ldr	r3, [pc, #72]	; (8002970 <HAL_RCC_GetClockConfig+0x5c>)
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	f003 0203 	and.w	r2, r3, #3
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002930:	4b0f      	ldr	r3, [pc, #60]	; (8002970 <HAL_RCC_GetClockConfig+0x5c>)
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800293c:	4b0c      	ldr	r3, [pc, #48]	; (8002970 <HAL_RCC_GetClockConfig+0x5c>)
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002948:	4b09      	ldr	r3, [pc, #36]	; (8002970 <HAL_RCC_GetClockConfig+0x5c>)
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	08db      	lsrs	r3, r3, #3
 800294e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002956:	4b07      	ldr	r3, [pc, #28]	; (8002974 <HAL_RCC_GetClockConfig+0x60>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 020f 	and.w	r2, r3, #15
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	601a      	str	r2, [r3, #0]
}
 8002962:	bf00      	nop
 8002964:	370c      	adds	r7, #12
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr
 800296e:	bf00      	nop
 8002970:	40023800 	.word	0x40023800
 8002974:	40023c00 	.word	0x40023c00

08002978 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b088      	sub	sp, #32
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002980:	2300      	movs	r3, #0
 8002982:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002984:	2300      	movs	r3, #0
 8002986:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002988:	2300      	movs	r3, #0
 800298a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800298c:	2300      	movs	r3, #0
 800298e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002990:	2300      	movs	r3, #0
 8002992:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 0301 	and.w	r3, r3, #1
 800299c:	2b00      	cmp	r3, #0
 800299e:	d012      	beq.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80029a0:	4b69      	ldr	r3, [pc, #420]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	4a68      	ldr	r2, [pc, #416]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029a6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80029aa:	6093      	str	r3, [r2, #8]
 80029ac:	4b66      	ldr	r3, [pc, #408]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029ae:	689a      	ldr	r2, [r3, #8]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029b4:	4964      	ldr	r1, [pc, #400]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029b6:	4313      	orrs	r3, r2
 80029b8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d101      	bne.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80029c2:	2301      	movs	r3, #1
 80029c4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d017      	beq.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80029d2:	4b5d      	ldr	r3, [pc, #372]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029d8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029e0:	4959      	ldr	r1, [pc, #356]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029e2:	4313      	orrs	r3, r2
 80029e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80029f0:	d101      	bne.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80029f2:	2301      	movs	r3, #1
 80029f4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d101      	bne.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80029fe:	2301      	movs	r3, #1
 8002a00:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d017      	beq.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002a0e:	4b4e      	ldr	r3, [pc, #312]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a14:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1c:	494a      	ldr	r1, [pc, #296]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a28:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a2c:	d101      	bne.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d101      	bne.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d001      	beq.n	8002a4e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 0320 	and.w	r3, r3, #32
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	f000 808b 	beq.w	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002a5c:	4b3a      	ldr	r3, [pc, #232]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a60:	4a39      	ldr	r2, [pc, #228]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a66:	6413      	str	r3, [r2, #64]	; 0x40
 8002a68:	4b37      	ldr	r3, [pc, #220]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a70:	60bb      	str	r3, [r7, #8]
 8002a72:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002a74:	4b35      	ldr	r3, [pc, #212]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a34      	ldr	r2, [pc, #208]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002a7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a7e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a80:	f7fe fab4 	bl	8000fec <HAL_GetTick>
 8002a84:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002a86:	e008      	b.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a88:	f7fe fab0 	bl	8000fec <HAL_GetTick>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	2b64      	cmp	r3, #100	; 0x64
 8002a94:	d901      	bls.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002a96:	2303      	movs	r3, #3
 8002a98:	e38f      	b.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002a9a:	4b2c      	ldr	r3, [pc, #176]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d0f0      	beq.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002aa6:	4b28      	ldr	r3, [pc, #160]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002aa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aaa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002aae:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d035      	beq.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002abe:	693a      	ldr	r2, [r7, #16]
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d02e      	beq.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ac4:	4b20      	ldr	r3, [pc, #128]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ac6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ac8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002acc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002ace:	4b1e      	ldr	r3, [pc, #120]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ad0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ad2:	4a1d      	ldr	r2, [pc, #116]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ad4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ad8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ada:	4b1b      	ldr	r3, [pc, #108]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002adc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ade:	4a1a      	ldr	r2, [pc, #104]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ae0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ae4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002ae6:	4a18      	ldr	r2, [pc, #96]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002aec:	4b16      	ldr	r3, [pc, #88]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002aee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002af0:	f003 0301 	and.w	r3, r3, #1
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	d114      	bne.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002af8:	f7fe fa78 	bl	8000fec <HAL_GetTick>
 8002afc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002afe:	e00a      	b.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b00:	f7fe fa74 	bl	8000fec <HAL_GetTick>
 8002b04:	4602      	mov	r2, r0
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d901      	bls.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002b12:	2303      	movs	r3, #3
 8002b14:	e351      	b.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b16:	4b0c      	ldr	r3, [pc, #48]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b1a:	f003 0302 	and.w	r3, r3, #2
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d0ee      	beq.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002b2e:	d111      	bne.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002b30:	4b05      	ldr	r3, [pc, #20]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002b3c:	4b04      	ldr	r3, [pc, #16]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002b3e:	400b      	ands	r3, r1
 8002b40:	4901      	ldr	r1, [pc, #4]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b42:	4313      	orrs	r3, r2
 8002b44:	608b      	str	r3, [r1, #8]
 8002b46:	e00b      	b.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002b48:	40023800 	.word	0x40023800
 8002b4c:	40007000 	.word	0x40007000
 8002b50:	0ffffcff 	.word	0x0ffffcff
 8002b54:	4bac      	ldr	r3, [pc, #688]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	4aab      	ldr	r2, [pc, #684]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b5a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002b5e:	6093      	str	r3, [r2, #8]
 8002b60:	4ba9      	ldr	r3, [pc, #676]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b62:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b6c:	49a6      	ldr	r1, [pc, #664]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0310 	and.w	r3, r3, #16
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d010      	beq.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002b7e:	4ba2      	ldr	r3, [pc, #648]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b84:	4aa0      	ldr	r2, [pc, #640]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b8a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002b8e:	4b9e      	ldr	r3, [pc, #632]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b90:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b98:	499b      	ldr	r1, [pc, #620]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d00a      	beq.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002bac:	4b96      	ldr	r3, [pc, #600]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bb2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002bba:	4993      	ldr	r1, [pc, #588]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d00a      	beq.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002bce:	4b8e      	ldr	r3, [pc, #568]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bd4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002bdc:	498a      	ldr	r1, [pc, #552]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bde:	4313      	orrs	r3, r2
 8002be0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d00a      	beq.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002bf0:	4b85      	ldr	r3, [pc, #532]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bf6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bfe:	4982      	ldr	r1, [pc, #520]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c00:	4313      	orrs	r3, r2
 8002c02:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d00a      	beq.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002c12:	4b7d      	ldr	r3, [pc, #500]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c18:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c20:	4979      	ldr	r1, [pc, #484]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c22:	4313      	orrs	r3, r2
 8002c24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d00a      	beq.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c34:	4b74      	ldr	r3, [pc, #464]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c3a:	f023 0203 	bic.w	r2, r3, #3
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c42:	4971      	ldr	r1, [pc, #452]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c44:	4313      	orrs	r3, r2
 8002c46:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d00a      	beq.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002c56:	4b6c      	ldr	r3, [pc, #432]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c5c:	f023 020c 	bic.w	r2, r3, #12
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c64:	4968      	ldr	r1, [pc, #416]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c66:	4313      	orrs	r3, r2
 8002c68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d00a      	beq.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002c78:	4b63      	ldr	r3, [pc, #396]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c7e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c86:	4960      	ldr	r1, [pc, #384]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d00a      	beq.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002c9a:	4b5b      	ldr	r3, [pc, #364]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ca0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ca8:	4957      	ldr	r1, [pc, #348]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002caa:	4313      	orrs	r3, r2
 8002cac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d00a      	beq.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002cbc:	4b52      	ldr	r3, [pc, #328]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cc2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cca:	494f      	ldr	r1, [pc, #316]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d00a      	beq.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002cde:	4b4a      	ldr	r3, [pc, #296]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ce0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ce4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cec:	4946      	ldr	r1, [pc, #280]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d00a      	beq.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002d00:	4b41      	ldr	r3, [pc, #260]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d06:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d0e:	493e      	ldr	r1, [pc, #248]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d10:	4313      	orrs	r3, r2
 8002d12:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d00a      	beq.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002d22:	4b39      	ldr	r3, [pc, #228]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d28:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d30:	4935      	ldr	r1, [pc, #212]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d32:	4313      	orrs	r3, r2
 8002d34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d00a      	beq.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002d44:	4b30      	ldr	r3, [pc, #192]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d4a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d52:	492d      	ldr	r1, [pc, #180]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d54:	4313      	orrs	r3, r2
 8002d56:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d011      	beq.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002d66:	4b28      	ldr	r3, [pc, #160]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d6c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d74:	4924      	ldr	r1, [pc, #144]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d76:	4313      	orrs	r3, r2
 8002d78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d80:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d84:	d101      	bne.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002d86:	2301      	movs	r3, #1
 8002d88:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 0308 	and.w	r3, r3, #8
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d001      	beq.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002d96:	2301      	movs	r3, #1
 8002d98:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d00a      	beq.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002da6:	4b18      	ldr	r3, [pc, #96]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002da8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dac:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002db4:	4914      	ldr	r1, [pc, #80]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002db6:	4313      	orrs	r3, r2
 8002db8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d00b      	beq.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002dc8:	4b0f      	ldr	r3, [pc, #60]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dce:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002dd8:	490b      	ldr	r1, [pc, #44]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d00f      	beq.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002dec:	4b06      	ldr	r3, [pc, #24]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002df2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002dfc:	4902      	ldr	r1, [pc, #8]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002e04:	e002      	b.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002e06:	bf00      	nop
 8002e08:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d00b      	beq.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002e18:	4b8a      	ldr	r3, [pc, #552]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e1e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e28:	4986      	ldr	r1, [pc, #536]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d00b      	beq.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002e3c:	4b81      	ldr	r3, [pc, #516]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e42:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e4c:	497d      	ldr	r1, [pc, #500]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002e54:	69fb      	ldr	r3, [r7, #28]
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d006      	beq.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	f000 80d6 	beq.w	8003014 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002e68:	4b76      	ldr	r3, [pc, #472]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a75      	ldr	r2, [pc, #468]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e6e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002e72:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e74:	f7fe f8ba 	bl	8000fec <HAL_GetTick>
 8002e78:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002e7a:	e008      	b.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002e7c:	f7fe f8b6 	bl	8000fec <HAL_GetTick>
 8002e80:	4602      	mov	r2, r0
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	1ad3      	subs	r3, r2, r3
 8002e86:	2b64      	cmp	r3, #100	; 0x64
 8002e88:	d901      	bls.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e8a:	2303      	movs	r3, #3
 8002e8c:	e195      	b.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002e8e:	4b6d      	ldr	r3, [pc, #436]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d1f0      	bne.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 0301 	and.w	r3, r3, #1
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d021      	beq.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d11d      	bne.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002eae:	4b65      	ldr	r3, [pc, #404]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002eb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002eb4:	0c1b      	lsrs	r3, r3, #16
 8002eb6:	f003 0303 	and.w	r3, r3, #3
 8002eba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002ebc:	4b61      	ldr	r3, [pc, #388]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ebe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ec2:	0e1b      	lsrs	r3, r3, #24
 8002ec4:	f003 030f 	and.w	r3, r3, #15
 8002ec8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	019a      	lsls	r2, r3, #6
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	041b      	lsls	r3, r3, #16
 8002ed4:	431a      	orrs	r2, r3
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	061b      	lsls	r3, r3, #24
 8002eda:	431a      	orrs	r2, r3
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	071b      	lsls	r3, r3, #28
 8002ee2:	4958      	ldr	r1, [pc, #352]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d004      	beq.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002efa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002efe:	d00a      	beq.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d02e      	beq.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f10:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f14:	d129      	bne.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002f16:	4b4b      	ldr	r3, [pc, #300]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f1c:	0c1b      	lsrs	r3, r3, #16
 8002f1e:	f003 0303 	and.w	r3, r3, #3
 8002f22:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002f24:	4b47      	ldr	r3, [pc, #284]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f2a:	0f1b      	lsrs	r3, r3, #28
 8002f2c:	f003 0307 	and.w	r3, r3, #7
 8002f30:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	019a      	lsls	r2, r3, #6
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	041b      	lsls	r3, r3, #16
 8002f3c:	431a      	orrs	r2, r3
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	68db      	ldr	r3, [r3, #12]
 8002f42:	061b      	lsls	r3, r3, #24
 8002f44:	431a      	orrs	r2, r3
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	071b      	lsls	r3, r3, #28
 8002f4a:	493e      	ldr	r1, [pc, #248]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002f52:	4b3c      	ldr	r3, [pc, #240]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f58:	f023 021f 	bic.w	r2, r3, #31
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f60:	3b01      	subs	r3, #1
 8002f62:	4938      	ldr	r1, [pc, #224]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f64:	4313      	orrs	r3, r2
 8002f66:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d01d      	beq.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002f76:	4b33      	ldr	r3, [pc, #204]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f7c:	0e1b      	lsrs	r3, r3, #24
 8002f7e:	f003 030f 	and.w	r3, r3, #15
 8002f82:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002f84:	4b2f      	ldr	r3, [pc, #188]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f8a:	0f1b      	lsrs	r3, r3, #28
 8002f8c:	f003 0307 	and.w	r3, r3, #7
 8002f90:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	019a      	lsls	r2, r3, #6
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	691b      	ldr	r3, [r3, #16]
 8002f9c:	041b      	lsls	r3, r3, #16
 8002f9e:	431a      	orrs	r2, r3
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	061b      	lsls	r3, r3, #24
 8002fa4:	431a      	orrs	r2, r3
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	071b      	lsls	r3, r3, #28
 8002faa:	4926      	ldr	r1, [pc, #152]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fac:	4313      	orrs	r3, r2
 8002fae:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d011      	beq.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	019a      	lsls	r2, r3, #6
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	691b      	ldr	r3, [r3, #16]
 8002fc8:	041b      	lsls	r3, r3, #16
 8002fca:	431a      	orrs	r2, r3
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	061b      	lsls	r3, r3, #24
 8002fd2:	431a      	orrs	r2, r3
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	071b      	lsls	r3, r3, #28
 8002fda:	491a      	ldr	r1, [pc, #104]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002fe2:	4b18      	ldr	r3, [pc, #96]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a17      	ldr	r2, [pc, #92]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fe8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002fec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fee:	f7fd fffd 	bl	8000fec <HAL_GetTick>
 8002ff2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002ff4:	e008      	b.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002ff6:	f7fd fff9 	bl	8000fec <HAL_GetTick>
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	1ad3      	subs	r3, r2, r3
 8003000:	2b64      	cmp	r3, #100	; 0x64
 8003002:	d901      	bls.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003004:	2303      	movs	r3, #3
 8003006:	e0d8      	b.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003008:	4b0e      	ldr	r3, [pc, #56]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003010:	2b00      	cmp	r3, #0
 8003012:	d0f0      	beq.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003014:	69bb      	ldr	r3, [r7, #24]
 8003016:	2b01      	cmp	r3, #1
 8003018:	f040 80ce 	bne.w	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800301c:	4b09      	ldr	r3, [pc, #36]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a08      	ldr	r2, [pc, #32]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003022:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003026:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003028:	f7fd ffe0 	bl	8000fec <HAL_GetTick>
 800302c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800302e:	e00b      	b.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003030:	f7fd ffdc 	bl	8000fec <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	2b64      	cmp	r3, #100	; 0x64
 800303c:	d904      	bls.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	e0bb      	b.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003042:	bf00      	nop
 8003044:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003048:	4b5e      	ldr	r3, [pc, #376]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003050:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003054:	d0ec      	beq.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d003      	beq.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003066:	2b00      	cmp	r3, #0
 8003068:	d009      	beq.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003072:	2b00      	cmp	r3, #0
 8003074:	d02e      	beq.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307a:	2b00      	cmp	r3, #0
 800307c:	d12a      	bne.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800307e:	4b51      	ldr	r3, [pc, #324]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003080:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003084:	0c1b      	lsrs	r3, r3, #16
 8003086:	f003 0303 	and.w	r3, r3, #3
 800308a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800308c:	4b4d      	ldr	r3, [pc, #308]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800308e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003092:	0f1b      	lsrs	r3, r3, #28
 8003094:	f003 0307 	and.w	r3, r3, #7
 8003098:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	695b      	ldr	r3, [r3, #20]
 800309e:	019a      	lsls	r2, r3, #6
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	041b      	lsls	r3, r3, #16
 80030a4:	431a      	orrs	r2, r3
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	699b      	ldr	r3, [r3, #24]
 80030aa:	061b      	lsls	r3, r3, #24
 80030ac:	431a      	orrs	r2, r3
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	071b      	lsls	r3, r3, #28
 80030b2:	4944      	ldr	r1, [pc, #272]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030b4:	4313      	orrs	r3, r2
 80030b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80030ba:	4b42      	ldr	r3, [pc, #264]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80030c0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030c8:	3b01      	subs	r3, #1
 80030ca:	021b      	lsls	r3, r3, #8
 80030cc:	493d      	ldr	r1, [pc, #244]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030ce:	4313      	orrs	r3, r2
 80030d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d022      	beq.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80030e8:	d11d      	bne.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80030ea:	4b36      	ldr	r3, [pc, #216]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030f0:	0e1b      	lsrs	r3, r3, #24
 80030f2:	f003 030f 	and.w	r3, r3, #15
 80030f6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80030f8:	4b32      	ldr	r3, [pc, #200]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030fe:	0f1b      	lsrs	r3, r3, #28
 8003100:	f003 0307 	and.w	r3, r3, #7
 8003104:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	695b      	ldr	r3, [r3, #20]
 800310a:	019a      	lsls	r2, r3, #6
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6a1b      	ldr	r3, [r3, #32]
 8003110:	041b      	lsls	r3, r3, #16
 8003112:	431a      	orrs	r2, r3
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	061b      	lsls	r3, r3, #24
 8003118:	431a      	orrs	r2, r3
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	071b      	lsls	r3, r3, #28
 800311e:	4929      	ldr	r1, [pc, #164]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003120:	4313      	orrs	r3, r2
 8003122:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 0308 	and.w	r3, r3, #8
 800312e:	2b00      	cmp	r3, #0
 8003130:	d028      	beq.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003132:	4b24      	ldr	r3, [pc, #144]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003134:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003138:	0e1b      	lsrs	r3, r3, #24
 800313a:	f003 030f 	and.w	r3, r3, #15
 800313e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003140:	4b20      	ldr	r3, [pc, #128]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003142:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003146:	0c1b      	lsrs	r3, r3, #16
 8003148:	f003 0303 	and.w	r3, r3, #3
 800314c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	695b      	ldr	r3, [r3, #20]
 8003152:	019a      	lsls	r2, r3, #6
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	041b      	lsls	r3, r3, #16
 8003158:	431a      	orrs	r2, r3
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	061b      	lsls	r3, r3, #24
 800315e:	431a      	orrs	r2, r3
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	69db      	ldr	r3, [r3, #28]
 8003164:	071b      	lsls	r3, r3, #28
 8003166:	4917      	ldr	r1, [pc, #92]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003168:	4313      	orrs	r3, r2
 800316a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800316e:	4b15      	ldr	r3, [pc, #84]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003170:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003174:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800317c:	4911      	ldr	r1, [pc, #68]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800317e:	4313      	orrs	r3, r2
 8003180:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003184:	4b0f      	ldr	r3, [pc, #60]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a0e      	ldr	r2, [pc, #56]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800318a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800318e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003190:	f7fd ff2c 	bl	8000fec <HAL_GetTick>
 8003194:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003196:	e008      	b.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003198:	f7fd ff28 	bl	8000fec <HAL_GetTick>
 800319c:	4602      	mov	r2, r0
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	2b64      	cmp	r3, #100	; 0x64
 80031a4:	d901      	bls.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80031a6:	2303      	movs	r3, #3
 80031a8:	e007      	b.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80031aa:	4b06      	ldr	r3, [pc, #24]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80031b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80031b6:	d1ef      	bne.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80031b8:	2300      	movs	r3, #0
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3720      	adds	r7, #32
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	bf00      	nop
 80031c4:	40023800 	.word	0x40023800

080031c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b082      	sub	sp, #8
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d101      	bne.n	80031da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e049      	b.n	800326e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d106      	bne.n	80031f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2200      	movs	r2, #0
 80031ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f000 f841 	bl	8003276 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2202      	movs	r2, #2
 80031f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	3304      	adds	r3, #4
 8003204:	4619      	mov	r1, r3
 8003206:	4610      	mov	r0, r2
 8003208:	f000 fa00 	bl	800360c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2201      	movs	r2, #1
 8003210:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2201      	movs	r2, #1
 8003218:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2201      	movs	r2, #1
 8003220:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2201      	movs	r2, #1
 8003228:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2201      	movs	r2, #1
 8003230:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2201      	movs	r2, #1
 8003238:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2201      	movs	r2, #1
 8003240:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2201      	movs	r2, #1
 8003248:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2201      	movs	r2, #1
 8003250:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2201      	movs	r2, #1
 8003258:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2201      	movs	r2, #1
 8003260:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2201      	movs	r2, #1
 8003268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800326c:	2300      	movs	r3, #0
}
 800326e:	4618      	mov	r0, r3
 8003270:	3708      	adds	r7, #8
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}

08003276 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003276:	b480      	push	{r7}
 8003278:	b083      	sub	sp, #12
 800327a:	af00      	add	r7, sp, #0
 800327c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800327e:	bf00      	nop
 8003280:	370c      	adds	r7, #12
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr
	...

0800328c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800328c:	b480      	push	{r7}
 800328e:	b085      	sub	sp, #20
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800329a:	b2db      	uxtb	r3, r3
 800329c:	2b01      	cmp	r3, #1
 800329e:	d001      	beq.n	80032a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e054      	b.n	800334e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2202      	movs	r2, #2
 80032a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	68da      	ldr	r2, [r3, #12]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f042 0201 	orr.w	r2, r2, #1
 80032ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a26      	ldr	r2, [pc, #152]	; (800335c <HAL_TIM_Base_Start_IT+0xd0>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d022      	beq.n	800330c <HAL_TIM_Base_Start_IT+0x80>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032ce:	d01d      	beq.n	800330c <HAL_TIM_Base_Start_IT+0x80>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a22      	ldr	r2, [pc, #136]	; (8003360 <HAL_TIM_Base_Start_IT+0xd4>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d018      	beq.n	800330c <HAL_TIM_Base_Start_IT+0x80>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a21      	ldr	r2, [pc, #132]	; (8003364 <HAL_TIM_Base_Start_IT+0xd8>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d013      	beq.n	800330c <HAL_TIM_Base_Start_IT+0x80>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a1f      	ldr	r2, [pc, #124]	; (8003368 <HAL_TIM_Base_Start_IT+0xdc>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d00e      	beq.n	800330c <HAL_TIM_Base_Start_IT+0x80>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a1e      	ldr	r2, [pc, #120]	; (800336c <HAL_TIM_Base_Start_IT+0xe0>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d009      	beq.n	800330c <HAL_TIM_Base_Start_IT+0x80>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a1c      	ldr	r2, [pc, #112]	; (8003370 <HAL_TIM_Base_Start_IT+0xe4>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d004      	beq.n	800330c <HAL_TIM_Base_Start_IT+0x80>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a1b      	ldr	r2, [pc, #108]	; (8003374 <HAL_TIM_Base_Start_IT+0xe8>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d115      	bne.n	8003338 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	689a      	ldr	r2, [r3, #8]
 8003312:	4b19      	ldr	r3, [pc, #100]	; (8003378 <HAL_TIM_Base_Start_IT+0xec>)
 8003314:	4013      	ands	r3, r2
 8003316:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2b06      	cmp	r3, #6
 800331c:	d015      	beq.n	800334a <HAL_TIM_Base_Start_IT+0xbe>
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003324:	d011      	beq.n	800334a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f042 0201 	orr.w	r2, r2, #1
 8003334:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003336:	e008      	b.n	800334a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f042 0201 	orr.w	r2, r2, #1
 8003346:	601a      	str	r2, [r3, #0]
 8003348:	e000      	b.n	800334c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800334a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800334c:	2300      	movs	r3, #0
}
 800334e:	4618      	mov	r0, r3
 8003350:	3714      	adds	r7, #20
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr
 800335a:	bf00      	nop
 800335c:	40010000 	.word	0x40010000
 8003360:	40000400 	.word	0x40000400
 8003364:	40000800 	.word	0x40000800
 8003368:	40000c00 	.word	0x40000c00
 800336c:	40010400 	.word	0x40010400
 8003370:	40014000 	.word	0x40014000
 8003374:	40001800 	.word	0x40001800
 8003378:	00010007 	.word	0x00010007

0800337c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b082      	sub	sp, #8
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	691b      	ldr	r3, [r3, #16]
 800338a:	f003 0302 	and.w	r3, r3, #2
 800338e:	2b02      	cmp	r3, #2
 8003390:	d122      	bne.n	80033d8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	f003 0302 	and.w	r3, r3, #2
 800339c:	2b02      	cmp	r3, #2
 800339e:	d11b      	bne.n	80033d8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f06f 0202 	mvn.w	r2, #2
 80033a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2201      	movs	r2, #1
 80033ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	699b      	ldr	r3, [r3, #24]
 80033b6:	f003 0303 	and.w	r3, r3, #3
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d003      	beq.n	80033c6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f000 f905 	bl	80035ce <HAL_TIM_IC_CaptureCallback>
 80033c4:	e005      	b.n	80033d2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f000 f8f7 	bl	80035ba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033cc:	6878      	ldr	r0, [r7, #4]
 80033ce:	f000 f908 	bl	80035e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2200      	movs	r2, #0
 80033d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	691b      	ldr	r3, [r3, #16]
 80033de:	f003 0304 	and.w	r3, r3, #4
 80033e2:	2b04      	cmp	r3, #4
 80033e4:	d122      	bne.n	800342c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	68db      	ldr	r3, [r3, #12]
 80033ec:	f003 0304 	and.w	r3, r3, #4
 80033f0:	2b04      	cmp	r3, #4
 80033f2:	d11b      	bne.n	800342c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f06f 0204 	mvn.w	r2, #4
 80033fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2202      	movs	r2, #2
 8003402:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	699b      	ldr	r3, [r3, #24]
 800340a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800340e:	2b00      	cmp	r3, #0
 8003410:	d003      	beq.n	800341a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f000 f8db 	bl	80035ce <HAL_TIM_IC_CaptureCallback>
 8003418:	e005      	b.n	8003426 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f000 f8cd 	bl	80035ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003420:	6878      	ldr	r0, [r7, #4]
 8003422:	f000 f8de 	bl	80035e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2200      	movs	r2, #0
 800342a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	691b      	ldr	r3, [r3, #16]
 8003432:	f003 0308 	and.w	r3, r3, #8
 8003436:	2b08      	cmp	r3, #8
 8003438:	d122      	bne.n	8003480 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	f003 0308 	and.w	r3, r3, #8
 8003444:	2b08      	cmp	r3, #8
 8003446:	d11b      	bne.n	8003480 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f06f 0208 	mvn.w	r2, #8
 8003450:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2204      	movs	r2, #4
 8003456:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	69db      	ldr	r3, [r3, #28]
 800345e:	f003 0303 	and.w	r3, r3, #3
 8003462:	2b00      	cmp	r3, #0
 8003464:	d003      	beq.n	800346e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f000 f8b1 	bl	80035ce <HAL_TIM_IC_CaptureCallback>
 800346c:	e005      	b.n	800347a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f000 f8a3 	bl	80035ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f000 f8b4 	bl	80035e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2200      	movs	r2, #0
 800347e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	691b      	ldr	r3, [r3, #16]
 8003486:	f003 0310 	and.w	r3, r3, #16
 800348a:	2b10      	cmp	r3, #16
 800348c:	d122      	bne.n	80034d4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	f003 0310 	and.w	r3, r3, #16
 8003498:	2b10      	cmp	r3, #16
 800349a:	d11b      	bne.n	80034d4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f06f 0210 	mvn.w	r2, #16
 80034a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2208      	movs	r2, #8
 80034aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	69db      	ldr	r3, [r3, #28]
 80034b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d003      	beq.n	80034c2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f000 f887 	bl	80035ce <HAL_TIM_IC_CaptureCallback>
 80034c0:	e005      	b.n	80034ce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f000 f879 	bl	80035ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	f000 f88a 	bl	80035e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	691b      	ldr	r3, [r3, #16]
 80034da:	f003 0301 	and.w	r3, r3, #1
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d10e      	bne.n	8003500 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	f003 0301 	and.w	r3, r3, #1
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d107      	bne.n	8003500 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f06f 0201 	mvn.w	r2, #1
 80034f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f7fd faae 	bl	8000a5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	691b      	ldr	r3, [r3, #16]
 8003506:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800350a:	2b80      	cmp	r3, #128	; 0x80
 800350c:	d10e      	bne.n	800352c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003518:	2b80      	cmp	r3, #128	; 0x80
 800351a:	d107      	bne.n	800352c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003524:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f000 f91a 	bl	8003760 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	691b      	ldr	r3, [r3, #16]
 8003532:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003536:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800353a:	d10e      	bne.n	800355a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	68db      	ldr	r3, [r3, #12]
 8003542:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003546:	2b80      	cmp	r3, #128	; 0x80
 8003548:	d107      	bne.n	800355a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003552:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	f000 f90d 	bl	8003774 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	691b      	ldr	r3, [r3, #16]
 8003560:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003564:	2b40      	cmp	r3, #64	; 0x40
 8003566:	d10e      	bne.n	8003586 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	68db      	ldr	r3, [r3, #12]
 800356e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003572:	2b40      	cmp	r3, #64	; 0x40
 8003574:	d107      	bne.n	8003586 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800357e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	f000 f838 	bl	80035f6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	691b      	ldr	r3, [r3, #16]
 800358c:	f003 0320 	and.w	r3, r3, #32
 8003590:	2b20      	cmp	r3, #32
 8003592:	d10e      	bne.n	80035b2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	68db      	ldr	r3, [r3, #12]
 800359a:	f003 0320 	and.w	r3, r3, #32
 800359e:	2b20      	cmp	r3, #32
 80035a0:	d107      	bne.n	80035b2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f06f 0220 	mvn.w	r2, #32
 80035aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	f000 f8cd 	bl	800374c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80035b2:	bf00      	nop
 80035b4:	3708      	adds	r7, #8
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}

080035ba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80035ba:	b480      	push	{r7}
 80035bc:	b083      	sub	sp, #12
 80035be:	af00      	add	r7, sp, #0
 80035c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80035c2:	bf00      	nop
 80035c4:	370c      	adds	r7, #12
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr

080035ce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80035ce:	b480      	push	{r7}
 80035d0:	b083      	sub	sp, #12
 80035d2:	af00      	add	r7, sp, #0
 80035d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80035d6:	bf00      	nop
 80035d8:	370c      	adds	r7, #12
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr

080035e2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80035e2:	b480      	push	{r7}
 80035e4:	b083      	sub	sp, #12
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80035ea:	bf00      	nop
 80035ec:	370c      	adds	r7, #12
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr

080035f6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80035f6:	b480      	push	{r7}
 80035f8:	b083      	sub	sp, #12
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80035fe:	bf00      	nop
 8003600:	370c      	adds	r7, #12
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr
	...

0800360c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800360c:	b480      	push	{r7}
 800360e:	b085      	sub	sp, #20
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
 8003614:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	4a40      	ldr	r2, [pc, #256]	; (8003720 <TIM_Base_SetConfig+0x114>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d013      	beq.n	800364c <TIM_Base_SetConfig+0x40>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800362a:	d00f      	beq.n	800364c <TIM_Base_SetConfig+0x40>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	4a3d      	ldr	r2, [pc, #244]	; (8003724 <TIM_Base_SetConfig+0x118>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d00b      	beq.n	800364c <TIM_Base_SetConfig+0x40>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	4a3c      	ldr	r2, [pc, #240]	; (8003728 <TIM_Base_SetConfig+0x11c>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d007      	beq.n	800364c <TIM_Base_SetConfig+0x40>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	4a3b      	ldr	r2, [pc, #236]	; (800372c <TIM_Base_SetConfig+0x120>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d003      	beq.n	800364c <TIM_Base_SetConfig+0x40>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	4a3a      	ldr	r2, [pc, #232]	; (8003730 <TIM_Base_SetConfig+0x124>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d108      	bne.n	800365e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003652:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	68fa      	ldr	r2, [r7, #12]
 800365a:	4313      	orrs	r3, r2
 800365c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	4a2f      	ldr	r2, [pc, #188]	; (8003720 <TIM_Base_SetConfig+0x114>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d02b      	beq.n	80036be <TIM_Base_SetConfig+0xb2>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800366c:	d027      	beq.n	80036be <TIM_Base_SetConfig+0xb2>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	4a2c      	ldr	r2, [pc, #176]	; (8003724 <TIM_Base_SetConfig+0x118>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d023      	beq.n	80036be <TIM_Base_SetConfig+0xb2>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	4a2b      	ldr	r2, [pc, #172]	; (8003728 <TIM_Base_SetConfig+0x11c>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d01f      	beq.n	80036be <TIM_Base_SetConfig+0xb2>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	4a2a      	ldr	r2, [pc, #168]	; (800372c <TIM_Base_SetConfig+0x120>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d01b      	beq.n	80036be <TIM_Base_SetConfig+0xb2>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	4a29      	ldr	r2, [pc, #164]	; (8003730 <TIM_Base_SetConfig+0x124>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d017      	beq.n	80036be <TIM_Base_SetConfig+0xb2>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	4a28      	ldr	r2, [pc, #160]	; (8003734 <TIM_Base_SetConfig+0x128>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d013      	beq.n	80036be <TIM_Base_SetConfig+0xb2>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	4a27      	ldr	r2, [pc, #156]	; (8003738 <TIM_Base_SetConfig+0x12c>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d00f      	beq.n	80036be <TIM_Base_SetConfig+0xb2>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	4a26      	ldr	r2, [pc, #152]	; (800373c <TIM_Base_SetConfig+0x130>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d00b      	beq.n	80036be <TIM_Base_SetConfig+0xb2>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	4a25      	ldr	r2, [pc, #148]	; (8003740 <TIM_Base_SetConfig+0x134>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d007      	beq.n	80036be <TIM_Base_SetConfig+0xb2>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	4a24      	ldr	r2, [pc, #144]	; (8003744 <TIM_Base_SetConfig+0x138>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d003      	beq.n	80036be <TIM_Base_SetConfig+0xb2>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	4a23      	ldr	r2, [pc, #140]	; (8003748 <TIM_Base_SetConfig+0x13c>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d108      	bne.n	80036d0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	68db      	ldr	r3, [r3, #12]
 80036ca:	68fa      	ldr	r2, [r7, #12]
 80036cc:	4313      	orrs	r3, r2
 80036ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	695b      	ldr	r3, [r3, #20]
 80036da:	4313      	orrs	r3, r2
 80036dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	68fa      	ldr	r2, [r7, #12]
 80036e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	689a      	ldr	r2, [r3, #8]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	4a0a      	ldr	r2, [pc, #40]	; (8003720 <TIM_Base_SetConfig+0x114>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d003      	beq.n	8003704 <TIM_Base_SetConfig+0xf8>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	4a0c      	ldr	r2, [pc, #48]	; (8003730 <TIM_Base_SetConfig+0x124>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d103      	bne.n	800370c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	691a      	ldr	r2, [r3, #16]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2201      	movs	r2, #1
 8003710:	615a      	str	r2, [r3, #20]
}
 8003712:	bf00      	nop
 8003714:	3714      	adds	r7, #20
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr
 800371e:	bf00      	nop
 8003720:	40010000 	.word	0x40010000
 8003724:	40000400 	.word	0x40000400
 8003728:	40000800 	.word	0x40000800
 800372c:	40000c00 	.word	0x40000c00
 8003730:	40010400 	.word	0x40010400
 8003734:	40014000 	.word	0x40014000
 8003738:	40014400 	.word	0x40014400
 800373c:	40014800 	.word	0x40014800
 8003740:	40001800 	.word	0x40001800
 8003744:	40001c00 	.word	0x40001c00
 8003748:	40002000 	.word	0x40002000

0800374c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800374c:	b480      	push	{r7}
 800374e:	b083      	sub	sp, #12
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003754:	bf00      	nop
 8003756:	370c      	adds	r7, #12
 8003758:	46bd      	mov	sp, r7
 800375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375e:	4770      	bx	lr

08003760 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003760:	b480      	push	{r7}
 8003762:	b083      	sub	sp, #12
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003768:	bf00      	nop
 800376a:	370c      	adds	r7, #12
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr

08003774 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003774:	b480      	push	{r7}
 8003776:	b083      	sub	sp, #12
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800377c:	bf00      	nop
 800377e:	370c      	adds	r7, #12
 8003780:	46bd      	mov	sp, r7
 8003782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003786:	4770      	bx	lr

08003788 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b082      	sub	sp, #8
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d101      	bne.n	800379a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e040      	b.n	800381c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d106      	bne.n	80037b0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2200      	movs	r2, #0
 80037a6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f7fd fa4e 	bl	8000c4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2224      	movs	r2, #36	; 0x24
 80037b4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f022 0201 	bic.w	r2, r2, #1
 80037c4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f000 f82c 	bl	8003824 <UART_SetConfig>
 80037cc:	4603      	mov	r3, r0
 80037ce:	2b01      	cmp	r3, #1
 80037d0:	d101      	bne.n	80037d6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e022      	b.n	800381c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d002      	beq.n	80037e4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	f000 fa84 	bl	8003cec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	685a      	ldr	r2, [r3, #4]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80037f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	689a      	ldr	r2, [r3, #8]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003802:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f042 0201 	orr.w	r2, r2, #1
 8003812:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f000 fb0b 	bl	8003e30 <UART_CheckIdleState>
 800381a:	4603      	mov	r3, r0
}
 800381c:	4618      	mov	r0, r3
 800381e:	3708      	adds	r7, #8
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}

08003824 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b088      	sub	sp, #32
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800382c:	2300      	movs	r3, #0
 800382e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	689a      	ldr	r2, [r3, #8]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	691b      	ldr	r3, [r3, #16]
 8003838:	431a      	orrs	r2, r3
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	695b      	ldr	r3, [r3, #20]
 800383e:	431a      	orrs	r2, r3
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	69db      	ldr	r3, [r3, #28]
 8003844:	4313      	orrs	r3, r2
 8003846:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	4ba6      	ldr	r3, [pc, #664]	; (8003ae8 <UART_SetConfig+0x2c4>)
 8003850:	4013      	ands	r3, r2
 8003852:	687a      	ldr	r2, [r7, #4]
 8003854:	6812      	ldr	r2, [r2, #0]
 8003856:	6979      	ldr	r1, [r7, #20]
 8003858:	430b      	orrs	r3, r1
 800385a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	68da      	ldr	r2, [r3, #12]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	430a      	orrs	r2, r1
 8003870:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	699b      	ldr	r3, [r3, #24]
 8003876:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6a1b      	ldr	r3, [r3, #32]
 800387c:	697a      	ldr	r2, [r7, #20]
 800387e:	4313      	orrs	r3, r2
 8003880:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	697a      	ldr	r2, [r7, #20]
 8003892:	430a      	orrs	r2, r1
 8003894:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a94      	ldr	r2, [pc, #592]	; (8003aec <UART_SetConfig+0x2c8>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d120      	bne.n	80038e2 <UART_SetConfig+0xbe>
 80038a0:	4b93      	ldr	r3, [pc, #588]	; (8003af0 <UART_SetConfig+0x2cc>)
 80038a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038a6:	f003 0303 	and.w	r3, r3, #3
 80038aa:	2b03      	cmp	r3, #3
 80038ac:	d816      	bhi.n	80038dc <UART_SetConfig+0xb8>
 80038ae:	a201      	add	r2, pc, #4	; (adr r2, 80038b4 <UART_SetConfig+0x90>)
 80038b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038b4:	080038c5 	.word	0x080038c5
 80038b8:	080038d1 	.word	0x080038d1
 80038bc:	080038cb 	.word	0x080038cb
 80038c0:	080038d7 	.word	0x080038d7
 80038c4:	2301      	movs	r3, #1
 80038c6:	77fb      	strb	r3, [r7, #31]
 80038c8:	e150      	b.n	8003b6c <UART_SetConfig+0x348>
 80038ca:	2302      	movs	r3, #2
 80038cc:	77fb      	strb	r3, [r7, #31]
 80038ce:	e14d      	b.n	8003b6c <UART_SetConfig+0x348>
 80038d0:	2304      	movs	r3, #4
 80038d2:	77fb      	strb	r3, [r7, #31]
 80038d4:	e14a      	b.n	8003b6c <UART_SetConfig+0x348>
 80038d6:	2308      	movs	r3, #8
 80038d8:	77fb      	strb	r3, [r7, #31]
 80038da:	e147      	b.n	8003b6c <UART_SetConfig+0x348>
 80038dc:	2310      	movs	r3, #16
 80038de:	77fb      	strb	r3, [r7, #31]
 80038e0:	e144      	b.n	8003b6c <UART_SetConfig+0x348>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a83      	ldr	r2, [pc, #524]	; (8003af4 <UART_SetConfig+0x2d0>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d132      	bne.n	8003952 <UART_SetConfig+0x12e>
 80038ec:	4b80      	ldr	r3, [pc, #512]	; (8003af0 <UART_SetConfig+0x2cc>)
 80038ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038f2:	f003 030c 	and.w	r3, r3, #12
 80038f6:	2b0c      	cmp	r3, #12
 80038f8:	d828      	bhi.n	800394c <UART_SetConfig+0x128>
 80038fa:	a201      	add	r2, pc, #4	; (adr r2, 8003900 <UART_SetConfig+0xdc>)
 80038fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003900:	08003935 	.word	0x08003935
 8003904:	0800394d 	.word	0x0800394d
 8003908:	0800394d 	.word	0x0800394d
 800390c:	0800394d 	.word	0x0800394d
 8003910:	08003941 	.word	0x08003941
 8003914:	0800394d 	.word	0x0800394d
 8003918:	0800394d 	.word	0x0800394d
 800391c:	0800394d 	.word	0x0800394d
 8003920:	0800393b 	.word	0x0800393b
 8003924:	0800394d 	.word	0x0800394d
 8003928:	0800394d 	.word	0x0800394d
 800392c:	0800394d 	.word	0x0800394d
 8003930:	08003947 	.word	0x08003947
 8003934:	2300      	movs	r3, #0
 8003936:	77fb      	strb	r3, [r7, #31]
 8003938:	e118      	b.n	8003b6c <UART_SetConfig+0x348>
 800393a:	2302      	movs	r3, #2
 800393c:	77fb      	strb	r3, [r7, #31]
 800393e:	e115      	b.n	8003b6c <UART_SetConfig+0x348>
 8003940:	2304      	movs	r3, #4
 8003942:	77fb      	strb	r3, [r7, #31]
 8003944:	e112      	b.n	8003b6c <UART_SetConfig+0x348>
 8003946:	2308      	movs	r3, #8
 8003948:	77fb      	strb	r3, [r7, #31]
 800394a:	e10f      	b.n	8003b6c <UART_SetConfig+0x348>
 800394c:	2310      	movs	r3, #16
 800394e:	77fb      	strb	r3, [r7, #31]
 8003950:	e10c      	b.n	8003b6c <UART_SetConfig+0x348>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a68      	ldr	r2, [pc, #416]	; (8003af8 <UART_SetConfig+0x2d4>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d120      	bne.n	800399e <UART_SetConfig+0x17a>
 800395c:	4b64      	ldr	r3, [pc, #400]	; (8003af0 <UART_SetConfig+0x2cc>)
 800395e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003962:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003966:	2b30      	cmp	r3, #48	; 0x30
 8003968:	d013      	beq.n	8003992 <UART_SetConfig+0x16e>
 800396a:	2b30      	cmp	r3, #48	; 0x30
 800396c:	d814      	bhi.n	8003998 <UART_SetConfig+0x174>
 800396e:	2b20      	cmp	r3, #32
 8003970:	d009      	beq.n	8003986 <UART_SetConfig+0x162>
 8003972:	2b20      	cmp	r3, #32
 8003974:	d810      	bhi.n	8003998 <UART_SetConfig+0x174>
 8003976:	2b00      	cmp	r3, #0
 8003978:	d002      	beq.n	8003980 <UART_SetConfig+0x15c>
 800397a:	2b10      	cmp	r3, #16
 800397c:	d006      	beq.n	800398c <UART_SetConfig+0x168>
 800397e:	e00b      	b.n	8003998 <UART_SetConfig+0x174>
 8003980:	2300      	movs	r3, #0
 8003982:	77fb      	strb	r3, [r7, #31]
 8003984:	e0f2      	b.n	8003b6c <UART_SetConfig+0x348>
 8003986:	2302      	movs	r3, #2
 8003988:	77fb      	strb	r3, [r7, #31]
 800398a:	e0ef      	b.n	8003b6c <UART_SetConfig+0x348>
 800398c:	2304      	movs	r3, #4
 800398e:	77fb      	strb	r3, [r7, #31]
 8003990:	e0ec      	b.n	8003b6c <UART_SetConfig+0x348>
 8003992:	2308      	movs	r3, #8
 8003994:	77fb      	strb	r3, [r7, #31]
 8003996:	e0e9      	b.n	8003b6c <UART_SetConfig+0x348>
 8003998:	2310      	movs	r3, #16
 800399a:	77fb      	strb	r3, [r7, #31]
 800399c:	e0e6      	b.n	8003b6c <UART_SetConfig+0x348>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a56      	ldr	r2, [pc, #344]	; (8003afc <UART_SetConfig+0x2d8>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d120      	bne.n	80039ea <UART_SetConfig+0x1c6>
 80039a8:	4b51      	ldr	r3, [pc, #324]	; (8003af0 <UART_SetConfig+0x2cc>)
 80039aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039ae:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80039b2:	2bc0      	cmp	r3, #192	; 0xc0
 80039b4:	d013      	beq.n	80039de <UART_SetConfig+0x1ba>
 80039b6:	2bc0      	cmp	r3, #192	; 0xc0
 80039b8:	d814      	bhi.n	80039e4 <UART_SetConfig+0x1c0>
 80039ba:	2b80      	cmp	r3, #128	; 0x80
 80039bc:	d009      	beq.n	80039d2 <UART_SetConfig+0x1ae>
 80039be:	2b80      	cmp	r3, #128	; 0x80
 80039c0:	d810      	bhi.n	80039e4 <UART_SetConfig+0x1c0>
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d002      	beq.n	80039cc <UART_SetConfig+0x1a8>
 80039c6:	2b40      	cmp	r3, #64	; 0x40
 80039c8:	d006      	beq.n	80039d8 <UART_SetConfig+0x1b4>
 80039ca:	e00b      	b.n	80039e4 <UART_SetConfig+0x1c0>
 80039cc:	2300      	movs	r3, #0
 80039ce:	77fb      	strb	r3, [r7, #31]
 80039d0:	e0cc      	b.n	8003b6c <UART_SetConfig+0x348>
 80039d2:	2302      	movs	r3, #2
 80039d4:	77fb      	strb	r3, [r7, #31]
 80039d6:	e0c9      	b.n	8003b6c <UART_SetConfig+0x348>
 80039d8:	2304      	movs	r3, #4
 80039da:	77fb      	strb	r3, [r7, #31]
 80039dc:	e0c6      	b.n	8003b6c <UART_SetConfig+0x348>
 80039de:	2308      	movs	r3, #8
 80039e0:	77fb      	strb	r3, [r7, #31]
 80039e2:	e0c3      	b.n	8003b6c <UART_SetConfig+0x348>
 80039e4:	2310      	movs	r3, #16
 80039e6:	77fb      	strb	r3, [r7, #31]
 80039e8:	e0c0      	b.n	8003b6c <UART_SetConfig+0x348>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a44      	ldr	r2, [pc, #272]	; (8003b00 <UART_SetConfig+0x2dc>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d125      	bne.n	8003a40 <UART_SetConfig+0x21c>
 80039f4:	4b3e      	ldr	r3, [pc, #248]	; (8003af0 <UART_SetConfig+0x2cc>)
 80039f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a02:	d017      	beq.n	8003a34 <UART_SetConfig+0x210>
 8003a04:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a08:	d817      	bhi.n	8003a3a <UART_SetConfig+0x216>
 8003a0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a0e:	d00b      	beq.n	8003a28 <UART_SetConfig+0x204>
 8003a10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a14:	d811      	bhi.n	8003a3a <UART_SetConfig+0x216>
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d003      	beq.n	8003a22 <UART_SetConfig+0x1fe>
 8003a1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a1e:	d006      	beq.n	8003a2e <UART_SetConfig+0x20a>
 8003a20:	e00b      	b.n	8003a3a <UART_SetConfig+0x216>
 8003a22:	2300      	movs	r3, #0
 8003a24:	77fb      	strb	r3, [r7, #31]
 8003a26:	e0a1      	b.n	8003b6c <UART_SetConfig+0x348>
 8003a28:	2302      	movs	r3, #2
 8003a2a:	77fb      	strb	r3, [r7, #31]
 8003a2c:	e09e      	b.n	8003b6c <UART_SetConfig+0x348>
 8003a2e:	2304      	movs	r3, #4
 8003a30:	77fb      	strb	r3, [r7, #31]
 8003a32:	e09b      	b.n	8003b6c <UART_SetConfig+0x348>
 8003a34:	2308      	movs	r3, #8
 8003a36:	77fb      	strb	r3, [r7, #31]
 8003a38:	e098      	b.n	8003b6c <UART_SetConfig+0x348>
 8003a3a:	2310      	movs	r3, #16
 8003a3c:	77fb      	strb	r3, [r7, #31]
 8003a3e:	e095      	b.n	8003b6c <UART_SetConfig+0x348>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a2f      	ldr	r2, [pc, #188]	; (8003b04 <UART_SetConfig+0x2e0>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d125      	bne.n	8003a96 <UART_SetConfig+0x272>
 8003a4a:	4b29      	ldr	r3, [pc, #164]	; (8003af0 <UART_SetConfig+0x2cc>)
 8003a4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a50:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003a54:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003a58:	d017      	beq.n	8003a8a <UART_SetConfig+0x266>
 8003a5a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003a5e:	d817      	bhi.n	8003a90 <UART_SetConfig+0x26c>
 8003a60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a64:	d00b      	beq.n	8003a7e <UART_SetConfig+0x25a>
 8003a66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a6a:	d811      	bhi.n	8003a90 <UART_SetConfig+0x26c>
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d003      	beq.n	8003a78 <UART_SetConfig+0x254>
 8003a70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a74:	d006      	beq.n	8003a84 <UART_SetConfig+0x260>
 8003a76:	e00b      	b.n	8003a90 <UART_SetConfig+0x26c>
 8003a78:	2301      	movs	r3, #1
 8003a7a:	77fb      	strb	r3, [r7, #31]
 8003a7c:	e076      	b.n	8003b6c <UART_SetConfig+0x348>
 8003a7e:	2302      	movs	r3, #2
 8003a80:	77fb      	strb	r3, [r7, #31]
 8003a82:	e073      	b.n	8003b6c <UART_SetConfig+0x348>
 8003a84:	2304      	movs	r3, #4
 8003a86:	77fb      	strb	r3, [r7, #31]
 8003a88:	e070      	b.n	8003b6c <UART_SetConfig+0x348>
 8003a8a:	2308      	movs	r3, #8
 8003a8c:	77fb      	strb	r3, [r7, #31]
 8003a8e:	e06d      	b.n	8003b6c <UART_SetConfig+0x348>
 8003a90:	2310      	movs	r3, #16
 8003a92:	77fb      	strb	r3, [r7, #31]
 8003a94:	e06a      	b.n	8003b6c <UART_SetConfig+0x348>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a1b      	ldr	r2, [pc, #108]	; (8003b08 <UART_SetConfig+0x2e4>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d138      	bne.n	8003b12 <UART_SetConfig+0x2ee>
 8003aa0:	4b13      	ldr	r3, [pc, #76]	; (8003af0 <UART_SetConfig+0x2cc>)
 8003aa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aa6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003aaa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003aae:	d017      	beq.n	8003ae0 <UART_SetConfig+0x2bc>
 8003ab0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003ab4:	d82a      	bhi.n	8003b0c <UART_SetConfig+0x2e8>
 8003ab6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003aba:	d00b      	beq.n	8003ad4 <UART_SetConfig+0x2b0>
 8003abc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ac0:	d824      	bhi.n	8003b0c <UART_SetConfig+0x2e8>
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d003      	beq.n	8003ace <UART_SetConfig+0x2aa>
 8003ac6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003aca:	d006      	beq.n	8003ada <UART_SetConfig+0x2b6>
 8003acc:	e01e      	b.n	8003b0c <UART_SetConfig+0x2e8>
 8003ace:	2300      	movs	r3, #0
 8003ad0:	77fb      	strb	r3, [r7, #31]
 8003ad2:	e04b      	b.n	8003b6c <UART_SetConfig+0x348>
 8003ad4:	2302      	movs	r3, #2
 8003ad6:	77fb      	strb	r3, [r7, #31]
 8003ad8:	e048      	b.n	8003b6c <UART_SetConfig+0x348>
 8003ada:	2304      	movs	r3, #4
 8003adc:	77fb      	strb	r3, [r7, #31]
 8003ade:	e045      	b.n	8003b6c <UART_SetConfig+0x348>
 8003ae0:	2308      	movs	r3, #8
 8003ae2:	77fb      	strb	r3, [r7, #31]
 8003ae4:	e042      	b.n	8003b6c <UART_SetConfig+0x348>
 8003ae6:	bf00      	nop
 8003ae8:	efff69f3 	.word	0xefff69f3
 8003aec:	40011000 	.word	0x40011000
 8003af0:	40023800 	.word	0x40023800
 8003af4:	40004400 	.word	0x40004400
 8003af8:	40004800 	.word	0x40004800
 8003afc:	40004c00 	.word	0x40004c00
 8003b00:	40005000 	.word	0x40005000
 8003b04:	40011400 	.word	0x40011400
 8003b08:	40007800 	.word	0x40007800
 8003b0c:	2310      	movs	r3, #16
 8003b0e:	77fb      	strb	r3, [r7, #31]
 8003b10:	e02c      	b.n	8003b6c <UART_SetConfig+0x348>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a72      	ldr	r2, [pc, #456]	; (8003ce0 <UART_SetConfig+0x4bc>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d125      	bne.n	8003b68 <UART_SetConfig+0x344>
 8003b1c:	4b71      	ldr	r3, [pc, #452]	; (8003ce4 <UART_SetConfig+0x4c0>)
 8003b1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b22:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003b26:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003b2a:	d017      	beq.n	8003b5c <UART_SetConfig+0x338>
 8003b2c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003b30:	d817      	bhi.n	8003b62 <UART_SetConfig+0x33e>
 8003b32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b36:	d00b      	beq.n	8003b50 <UART_SetConfig+0x32c>
 8003b38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b3c:	d811      	bhi.n	8003b62 <UART_SetConfig+0x33e>
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d003      	beq.n	8003b4a <UART_SetConfig+0x326>
 8003b42:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b46:	d006      	beq.n	8003b56 <UART_SetConfig+0x332>
 8003b48:	e00b      	b.n	8003b62 <UART_SetConfig+0x33e>
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	77fb      	strb	r3, [r7, #31]
 8003b4e:	e00d      	b.n	8003b6c <UART_SetConfig+0x348>
 8003b50:	2302      	movs	r3, #2
 8003b52:	77fb      	strb	r3, [r7, #31]
 8003b54:	e00a      	b.n	8003b6c <UART_SetConfig+0x348>
 8003b56:	2304      	movs	r3, #4
 8003b58:	77fb      	strb	r3, [r7, #31]
 8003b5a:	e007      	b.n	8003b6c <UART_SetConfig+0x348>
 8003b5c:	2308      	movs	r3, #8
 8003b5e:	77fb      	strb	r3, [r7, #31]
 8003b60:	e004      	b.n	8003b6c <UART_SetConfig+0x348>
 8003b62:	2310      	movs	r3, #16
 8003b64:	77fb      	strb	r3, [r7, #31]
 8003b66:	e001      	b.n	8003b6c <UART_SetConfig+0x348>
 8003b68:	2310      	movs	r3, #16
 8003b6a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	69db      	ldr	r3, [r3, #28]
 8003b70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b74:	d15b      	bne.n	8003c2e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003b76:	7ffb      	ldrb	r3, [r7, #31]
 8003b78:	2b08      	cmp	r3, #8
 8003b7a:	d828      	bhi.n	8003bce <UART_SetConfig+0x3aa>
 8003b7c:	a201      	add	r2, pc, #4	; (adr r2, 8003b84 <UART_SetConfig+0x360>)
 8003b7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b82:	bf00      	nop
 8003b84:	08003ba9 	.word	0x08003ba9
 8003b88:	08003bb1 	.word	0x08003bb1
 8003b8c:	08003bb9 	.word	0x08003bb9
 8003b90:	08003bcf 	.word	0x08003bcf
 8003b94:	08003bbf 	.word	0x08003bbf
 8003b98:	08003bcf 	.word	0x08003bcf
 8003b9c:	08003bcf 	.word	0x08003bcf
 8003ba0:	08003bcf 	.word	0x08003bcf
 8003ba4:	08003bc7 	.word	0x08003bc7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ba8:	f7fe fe8c 	bl	80028c4 <HAL_RCC_GetPCLK1Freq>
 8003bac:	61b8      	str	r0, [r7, #24]
        break;
 8003bae:	e013      	b.n	8003bd8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003bb0:	f7fe fe9c 	bl	80028ec <HAL_RCC_GetPCLK2Freq>
 8003bb4:	61b8      	str	r0, [r7, #24]
        break;
 8003bb6:	e00f      	b.n	8003bd8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003bb8:	4b4b      	ldr	r3, [pc, #300]	; (8003ce8 <UART_SetConfig+0x4c4>)
 8003bba:	61bb      	str	r3, [r7, #24]
        break;
 8003bbc:	e00c      	b.n	8003bd8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003bbe:	f7fe fd6f 	bl	80026a0 <HAL_RCC_GetSysClockFreq>
 8003bc2:	61b8      	str	r0, [r7, #24]
        break;
 8003bc4:	e008      	b.n	8003bd8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003bc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003bca:	61bb      	str	r3, [r7, #24]
        break;
 8003bcc:	e004      	b.n	8003bd8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	77bb      	strb	r3, [r7, #30]
        break;
 8003bd6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003bd8:	69bb      	ldr	r3, [r7, #24]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d074      	beq.n	8003cc8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003bde:	69bb      	ldr	r3, [r7, #24]
 8003be0:	005a      	lsls	r2, r3, #1
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	085b      	lsrs	r3, r3, #1
 8003be8:	441a      	add	r2, r3
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bf2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	2b0f      	cmp	r3, #15
 8003bf8:	d916      	bls.n	8003c28 <UART_SetConfig+0x404>
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c00:	d212      	bcs.n	8003c28 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	b29b      	uxth	r3, r3
 8003c06:	f023 030f 	bic.w	r3, r3, #15
 8003c0a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	085b      	lsrs	r3, r3, #1
 8003c10:	b29b      	uxth	r3, r3
 8003c12:	f003 0307 	and.w	r3, r3, #7
 8003c16:	b29a      	uxth	r2, r3
 8003c18:	89fb      	ldrh	r3, [r7, #14]
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	89fa      	ldrh	r2, [r7, #14]
 8003c24:	60da      	str	r2, [r3, #12]
 8003c26:	e04f      	b.n	8003cc8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	77bb      	strb	r3, [r7, #30]
 8003c2c:	e04c      	b.n	8003cc8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003c2e:	7ffb      	ldrb	r3, [r7, #31]
 8003c30:	2b08      	cmp	r3, #8
 8003c32:	d828      	bhi.n	8003c86 <UART_SetConfig+0x462>
 8003c34:	a201      	add	r2, pc, #4	; (adr r2, 8003c3c <UART_SetConfig+0x418>)
 8003c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c3a:	bf00      	nop
 8003c3c:	08003c61 	.word	0x08003c61
 8003c40:	08003c69 	.word	0x08003c69
 8003c44:	08003c71 	.word	0x08003c71
 8003c48:	08003c87 	.word	0x08003c87
 8003c4c:	08003c77 	.word	0x08003c77
 8003c50:	08003c87 	.word	0x08003c87
 8003c54:	08003c87 	.word	0x08003c87
 8003c58:	08003c87 	.word	0x08003c87
 8003c5c:	08003c7f 	.word	0x08003c7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c60:	f7fe fe30 	bl	80028c4 <HAL_RCC_GetPCLK1Freq>
 8003c64:	61b8      	str	r0, [r7, #24]
        break;
 8003c66:	e013      	b.n	8003c90 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c68:	f7fe fe40 	bl	80028ec <HAL_RCC_GetPCLK2Freq>
 8003c6c:	61b8      	str	r0, [r7, #24]
        break;
 8003c6e:	e00f      	b.n	8003c90 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c70:	4b1d      	ldr	r3, [pc, #116]	; (8003ce8 <UART_SetConfig+0x4c4>)
 8003c72:	61bb      	str	r3, [r7, #24]
        break;
 8003c74:	e00c      	b.n	8003c90 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c76:	f7fe fd13 	bl	80026a0 <HAL_RCC_GetSysClockFreq>
 8003c7a:	61b8      	str	r0, [r7, #24]
        break;
 8003c7c:	e008      	b.n	8003c90 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c82:	61bb      	str	r3, [r7, #24]
        break;
 8003c84:	e004      	b.n	8003c90 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003c86:	2300      	movs	r3, #0
 8003c88:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	77bb      	strb	r3, [r7, #30]
        break;
 8003c8e:	bf00      	nop
    }

    if (pclk != 0U)
 8003c90:	69bb      	ldr	r3, [r7, #24]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d018      	beq.n	8003cc8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	085a      	lsrs	r2, r3, #1
 8003c9c:	69bb      	ldr	r3, [r7, #24]
 8003c9e:	441a      	add	r2, r3
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ca8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	2b0f      	cmp	r3, #15
 8003cae:	d909      	bls.n	8003cc4 <UART_SetConfig+0x4a0>
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cb6:	d205      	bcs.n	8003cc4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	b29a      	uxth	r2, r3
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	60da      	str	r2, [r3, #12]
 8003cc2:	e001      	b.n	8003cc8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003cd4:	7fbb      	ldrb	r3, [r7, #30]
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3720      	adds	r7, #32
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	bf00      	nop
 8003ce0:	40007c00 	.word	0x40007c00
 8003ce4:	40023800 	.word	0x40023800
 8003ce8:	00f42400 	.word	0x00f42400

08003cec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b083      	sub	sp, #12
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf8:	f003 0301 	and.w	r3, r3, #1
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d00a      	beq.n	8003d16 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	430a      	orrs	r2, r1
 8003d14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1a:	f003 0302 	and.w	r3, r3, #2
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d00a      	beq.n	8003d38 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	430a      	orrs	r2, r1
 8003d36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d3c:	f003 0304 	and.w	r3, r3, #4
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d00a      	beq.n	8003d5a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	430a      	orrs	r2, r1
 8003d58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5e:	f003 0308 	and.w	r3, r3, #8
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d00a      	beq.n	8003d7c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	430a      	orrs	r2, r1
 8003d7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d80:	f003 0310 	and.w	r3, r3, #16
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d00a      	beq.n	8003d9e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	430a      	orrs	r2, r1
 8003d9c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da2:	f003 0320 	and.w	r3, r3, #32
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d00a      	beq.n	8003dc0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	430a      	orrs	r2, r1
 8003dbe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d01a      	beq.n	8003e02 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	430a      	orrs	r2, r1
 8003de0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003dea:	d10a      	bne.n	8003e02 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	430a      	orrs	r2, r1
 8003e00:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d00a      	beq.n	8003e24 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	430a      	orrs	r2, r1
 8003e22:	605a      	str	r2, [r3, #4]
  }
}
 8003e24:	bf00      	nop
 8003e26:	370c      	adds	r7, #12
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2e:	4770      	bx	lr

08003e30 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b086      	sub	sp, #24
 8003e34:	af02      	add	r7, sp, #8
 8003e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003e40:	f7fd f8d4 	bl	8000fec <HAL_GetTick>
 8003e44:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f003 0308 	and.w	r3, r3, #8
 8003e50:	2b08      	cmp	r3, #8
 8003e52:	d10e      	bne.n	8003e72 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e54:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e58:	9300      	str	r3, [sp, #0]
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f000 f831 	bl	8003eca <UART_WaitOnFlagUntilTimeout>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d001      	beq.n	8003e72 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e6e:	2303      	movs	r3, #3
 8003e70:	e027      	b.n	8003ec2 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 0304 	and.w	r3, r3, #4
 8003e7c:	2b04      	cmp	r3, #4
 8003e7e:	d10e      	bne.n	8003e9e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e80:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e84:	9300      	str	r3, [sp, #0]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f000 f81b 	bl	8003eca <UART_WaitOnFlagUntilTimeout>
 8003e94:	4603      	mov	r3, r0
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d001      	beq.n	8003e9e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e9a:	2303      	movs	r3, #3
 8003e9c:	e011      	b.n	8003ec2 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2220      	movs	r2, #32
 8003ea2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2220      	movs	r2, #32
 8003ea8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003ec0:	2300      	movs	r3, #0
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3710      	adds	r7, #16
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}

08003eca <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003eca:	b580      	push	{r7, lr}
 8003ecc:	b09c      	sub	sp, #112	; 0x70
 8003ece:	af00      	add	r7, sp, #0
 8003ed0:	60f8      	str	r0, [r7, #12]
 8003ed2:	60b9      	str	r1, [r7, #8]
 8003ed4:	603b      	str	r3, [r7, #0]
 8003ed6:	4613      	mov	r3, r2
 8003ed8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003eda:	e0a7      	b.n	800402c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003edc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ede:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ee2:	f000 80a3 	beq.w	800402c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ee6:	f7fd f881 	bl	8000fec <HAL_GetTick>
 8003eea:	4602      	mov	r2, r0
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	1ad3      	subs	r3, r2, r3
 8003ef0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	d302      	bcc.n	8003efc <UART_WaitOnFlagUntilTimeout+0x32>
 8003ef6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d13f      	bne.n	8003f7c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f04:	e853 3f00 	ldrex	r3, [r3]
 8003f08:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003f0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f0c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003f10:	667b      	str	r3, [r7, #100]	; 0x64
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	461a      	mov	r2, r3
 8003f18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f1a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f1c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f1e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003f20:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003f22:	e841 2300 	strex	r3, r2, [r1]
 8003f26:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003f28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d1e6      	bne.n	8003efc <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	3308      	adds	r3, #8
 8003f34:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f38:	e853 3f00 	ldrex	r3, [r3]
 8003f3c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f40:	f023 0301 	bic.w	r3, r3, #1
 8003f44:	663b      	str	r3, [r7, #96]	; 0x60
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	3308      	adds	r3, #8
 8003f4c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003f4e:	64ba      	str	r2, [r7, #72]	; 0x48
 8003f50:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f52:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003f54:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f56:	e841 2300 	strex	r3, r2, [r1]
 8003f5a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003f5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d1e5      	bne.n	8003f2e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2220      	movs	r2, #32
 8003f66:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2220      	movs	r2, #32
 8003f6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2200      	movs	r2, #0
 8003f74:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8003f78:	2303      	movs	r3, #3
 8003f7a:	e068      	b.n	800404e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 0304 	and.w	r3, r3, #4
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d050      	beq.n	800402c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	69db      	ldr	r3, [r3, #28]
 8003f90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f98:	d148      	bne.n	800402c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003fa2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fac:	e853 3f00 	ldrex	r3, [r3]
 8003fb0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003fb8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	461a      	mov	r2, r3
 8003fc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fc2:	637b      	str	r3, [r7, #52]	; 0x34
 8003fc4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fc6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003fc8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003fca:	e841 2300 	strex	r3, r2, [r1]
 8003fce:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d1e6      	bne.n	8003fa4 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	3308      	adds	r3, #8
 8003fdc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	e853 3f00 	ldrex	r3, [r3]
 8003fe4:	613b      	str	r3, [r7, #16]
   return(result);
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	f023 0301 	bic.w	r3, r3, #1
 8003fec:	66bb      	str	r3, [r7, #104]	; 0x68
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	3308      	adds	r3, #8
 8003ff4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003ff6:	623a      	str	r2, [r7, #32]
 8003ff8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ffa:	69f9      	ldr	r1, [r7, #28]
 8003ffc:	6a3a      	ldr	r2, [r7, #32]
 8003ffe:	e841 2300 	strex	r3, r2, [r1]
 8004002:	61bb      	str	r3, [r7, #24]
   return(result);
 8004004:	69bb      	ldr	r3, [r7, #24]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d1e5      	bne.n	8003fd6 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2220      	movs	r2, #32
 800400e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	2220      	movs	r2, #32
 8004014:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2220      	movs	r2, #32
 800401c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2200      	movs	r2, #0
 8004024:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004028:	2303      	movs	r3, #3
 800402a:	e010      	b.n	800404e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	69da      	ldr	r2, [r3, #28]
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	4013      	ands	r3, r2
 8004036:	68ba      	ldr	r2, [r7, #8]
 8004038:	429a      	cmp	r2, r3
 800403a:	bf0c      	ite	eq
 800403c:	2301      	moveq	r3, #1
 800403e:	2300      	movne	r3, #0
 8004040:	b2db      	uxtb	r3, r3
 8004042:	461a      	mov	r2, r3
 8004044:	79fb      	ldrb	r3, [r7, #7]
 8004046:	429a      	cmp	r2, r3
 8004048:	f43f af48 	beq.w	8003edc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800404c:	2300      	movs	r3, #0
}
 800404e:	4618      	mov	r0, r3
 8004050:	3770      	adds	r7, #112	; 0x70
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}
	...

08004058 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004058:	b084      	sub	sp, #16
 800405a:	b580      	push	{r7, lr}
 800405c:	b084      	sub	sp, #16
 800405e:	af00      	add	r7, sp, #0
 8004060:	6078      	str	r0, [r7, #4]
 8004062:	f107 001c 	add.w	r0, r7, #28
 8004066:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800406a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800406c:	2b01      	cmp	r3, #1
 800406e:	d120      	bne.n	80040b2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004074:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	68da      	ldr	r2, [r3, #12]
 8004080:	4b20      	ldr	r3, [pc, #128]	; (8004104 <USB_CoreInit+0xac>)
 8004082:	4013      	ands	r3, r2
 8004084:	687a      	ldr	r2, [r7, #4]
 8004086:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004094:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004096:	2b01      	cmp	r3, #1
 8004098:	d105      	bne.n	80040a6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	68db      	ldr	r3, [r3, #12]
 800409e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f000 fa96 	bl	80045d8 <USB_CoreReset>
 80040ac:	4603      	mov	r3, r0
 80040ae:	73fb      	strb	r3, [r7, #15]
 80040b0:	e010      	b.n	80040d4 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	68db      	ldr	r3, [r3, #12]
 80040b6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f000 fa8a 	bl	80045d8 <USB_CoreReset>
 80040c4:	4603      	mov	r3, r0
 80040c6:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040cc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80040d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d10b      	bne.n	80040f2 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	f043 0206 	orr.w	r2, r3, #6
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	f043 0220 	orr.w	r2, r3, #32
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80040f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	3710      	adds	r7, #16
 80040f8:	46bd      	mov	sp, r7
 80040fa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80040fe:	b004      	add	sp, #16
 8004100:	4770      	bx	lr
 8004102:	bf00      	nop
 8004104:	ffbdffbf 	.word	0xffbdffbf

08004108 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004108:	b480      	push	{r7}
 800410a:	b083      	sub	sp, #12
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	f023 0201 	bic.w	r2, r3, #1
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800411c:	2300      	movs	r3, #0
}
 800411e:	4618      	mov	r0, r3
 8004120:	370c      	adds	r7, #12
 8004122:	46bd      	mov	sp, r7
 8004124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004128:	4770      	bx	lr

0800412a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800412a:	b580      	push	{r7, lr}
 800412c:	b084      	sub	sp, #16
 800412e:	af00      	add	r7, sp, #0
 8004130:	6078      	str	r0, [r7, #4]
 8004132:	460b      	mov	r3, r1
 8004134:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004136:	2300      	movs	r3, #0
 8004138:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	68db      	ldr	r3, [r3, #12]
 800413e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004146:	78fb      	ldrb	r3, [r7, #3]
 8004148:	2b01      	cmp	r3, #1
 800414a:	d115      	bne.n	8004178 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	68db      	ldr	r3, [r3, #12]
 8004150:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004158:	2001      	movs	r0, #1
 800415a:	f7fc ff53 	bl	8001004 <HAL_Delay>
      ms++;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	3301      	adds	r3, #1
 8004162:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	f000 fa29 	bl	80045bc <USB_GetMode>
 800416a:	4603      	mov	r3, r0
 800416c:	2b01      	cmp	r3, #1
 800416e:	d01e      	beq.n	80041ae <USB_SetCurrentMode+0x84>
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2b31      	cmp	r3, #49	; 0x31
 8004174:	d9f0      	bls.n	8004158 <USB_SetCurrentMode+0x2e>
 8004176:	e01a      	b.n	80041ae <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004178:	78fb      	ldrb	r3, [r7, #3]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d115      	bne.n	80041aa <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	68db      	ldr	r3, [r3, #12]
 8004182:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800418a:	2001      	movs	r0, #1
 800418c:	f7fc ff3a 	bl	8001004 <HAL_Delay>
      ms++;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	3301      	adds	r3, #1
 8004194:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	f000 fa10 	bl	80045bc <USB_GetMode>
 800419c:	4603      	mov	r3, r0
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d005      	beq.n	80041ae <USB_SetCurrentMode+0x84>
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2b31      	cmp	r3, #49	; 0x31
 80041a6:	d9f0      	bls.n	800418a <USB_SetCurrentMode+0x60>
 80041a8:	e001      	b.n	80041ae <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	e005      	b.n	80041ba <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2b32      	cmp	r3, #50	; 0x32
 80041b2:	d101      	bne.n	80041b8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	e000      	b.n	80041ba <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80041b8:	2300      	movs	r3, #0
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3710      	adds	r7, #16
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}
	...

080041c4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80041c4:	b084      	sub	sp, #16
 80041c6:	b580      	push	{r7, lr}
 80041c8:	b086      	sub	sp, #24
 80041ca:	af00      	add	r7, sp, #0
 80041cc:	6078      	str	r0, [r7, #4]
 80041ce:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80041d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80041d6:	2300      	movs	r3, #0
 80041d8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80041de:	2300      	movs	r3, #0
 80041e0:	613b      	str	r3, [r7, #16]
 80041e2:	e009      	b.n	80041f8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80041e4:	687a      	ldr	r2, [r7, #4]
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	3340      	adds	r3, #64	; 0x40
 80041ea:	009b      	lsls	r3, r3, #2
 80041ec:	4413      	add	r3, r2
 80041ee:	2200      	movs	r2, #0
 80041f0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	3301      	adds	r3, #1
 80041f6:	613b      	str	r3, [r7, #16]
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	2b0e      	cmp	r3, #14
 80041fc:	d9f2      	bls.n	80041e4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80041fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004200:	2b00      	cmp	r3, #0
 8004202:	d11c      	bne.n	800423e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	68fa      	ldr	r2, [r7, #12]
 800420e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004212:	f043 0302 	orr.w	r3, r3, #2
 8004216:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800421c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	601a      	str	r2, [r3, #0]
 800423c:	e005      	b.n	800424a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004242:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004250:	461a      	mov	r2, r3
 8004252:	2300      	movs	r3, #0
 8004254:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800425c:	4619      	mov	r1, r3
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004264:	461a      	mov	r2, r3
 8004266:	680b      	ldr	r3, [r1, #0]
 8004268:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800426a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800426c:	2b01      	cmp	r3, #1
 800426e:	d10c      	bne.n	800428a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004272:	2b00      	cmp	r3, #0
 8004274:	d104      	bne.n	8004280 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004276:	2100      	movs	r1, #0
 8004278:	6878      	ldr	r0, [r7, #4]
 800427a:	f000 f965 	bl	8004548 <USB_SetDevSpeed>
 800427e:	e008      	b.n	8004292 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004280:	2101      	movs	r1, #1
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f000 f960 	bl	8004548 <USB_SetDevSpeed>
 8004288:	e003      	b.n	8004292 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800428a:	2103      	movs	r1, #3
 800428c:	6878      	ldr	r0, [r7, #4]
 800428e:	f000 f95b 	bl	8004548 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004292:	2110      	movs	r1, #16
 8004294:	6878      	ldr	r0, [r7, #4]
 8004296:	f000 f8f3 	bl	8004480 <USB_FlushTxFifo>
 800429a:	4603      	mov	r3, r0
 800429c:	2b00      	cmp	r3, #0
 800429e:	d001      	beq.n	80042a4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80042a4:	6878      	ldr	r0, [r7, #4]
 80042a6:	f000 f91f 	bl	80044e8 <USB_FlushRxFifo>
 80042aa:	4603      	mov	r3, r0
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d001      	beq.n	80042b4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
 80042b2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042ba:	461a      	mov	r2, r3
 80042bc:	2300      	movs	r3, #0
 80042be:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042c6:	461a      	mov	r2, r3
 80042c8:	2300      	movs	r3, #0
 80042ca:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042d2:	461a      	mov	r2, r3
 80042d4:	2300      	movs	r3, #0
 80042d6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80042d8:	2300      	movs	r3, #0
 80042da:	613b      	str	r3, [r7, #16]
 80042dc:	e043      	b.n	8004366 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	015a      	lsls	r2, r3, #5
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	4413      	add	r3, r2
 80042e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80042f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80042f4:	d118      	bne.n	8004328 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d10a      	bne.n	8004312 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	015a      	lsls	r2, r3, #5
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	4413      	add	r3, r2
 8004304:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004308:	461a      	mov	r2, r3
 800430a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800430e:	6013      	str	r3, [r2, #0]
 8004310:	e013      	b.n	800433a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	015a      	lsls	r2, r3, #5
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	4413      	add	r3, r2
 800431a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800431e:	461a      	mov	r2, r3
 8004320:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004324:	6013      	str	r3, [r2, #0]
 8004326:	e008      	b.n	800433a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	015a      	lsls	r2, r3, #5
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	4413      	add	r3, r2
 8004330:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004334:	461a      	mov	r2, r3
 8004336:	2300      	movs	r3, #0
 8004338:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	015a      	lsls	r2, r3, #5
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	4413      	add	r3, r2
 8004342:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004346:	461a      	mov	r2, r3
 8004348:	2300      	movs	r3, #0
 800434a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	015a      	lsls	r2, r3, #5
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	4413      	add	r3, r2
 8004354:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004358:	461a      	mov	r2, r3
 800435a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800435e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	3301      	adds	r3, #1
 8004364:	613b      	str	r3, [r7, #16]
 8004366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004368:	693a      	ldr	r2, [r7, #16]
 800436a:	429a      	cmp	r2, r3
 800436c:	d3b7      	bcc.n	80042de <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800436e:	2300      	movs	r3, #0
 8004370:	613b      	str	r3, [r7, #16]
 8004372:	e043      	b.n	80043fc <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	015a      	lsls	r2, r3, #5
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	4413      	add	r3, r2
 800437c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004386:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800438a:	d118      	bne.n	80043be <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d10a      	bne.n	80043a8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	015a      	lsls	r2, r3, #5
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	4413      	add	r3, r2
 800439a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800439e:	461a      	mov	r2, r3
 80043a0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80043a4:	6013      	str	r3, [r2, #0]
 80043a6:	e013      	b.n	80043d0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	015a      	lsls	r2, r3, #5
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	4413      	add	r3, r2
 80043b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043b4:	461a      	mov	r2, r3
 80043b6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80043ba:	6013      	str	r3, [r2, #0]
 80043bc:	e008      	b.n	80043d0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	015a      	lsls	r2, r3, #5
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	4413      	add	r3, r2
 80043c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043ca:	461a      	mov	r2, r3
 80043cc:	2300      	movs	r3, #0
 80043ce:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	015a      	lsls	r2, r3, #5
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	4413      	add	r3, r2
 80043d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043dc:	461a      	mov	r2, r3
 80043de:	2300      	movs	r3, #0
 80043e0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	015a      	lsls	r2, r3, #5
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	4413      	add	r3, r2
 80043ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043ee:	461a      	mov	r2, r3
 80043f0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80043f4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	3301      	adds	r3, #1
 80043fa:	613b      	str	r3, [r7, #16]
 80043fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043fe:	693a      	ldr	r2, [r7, #16]
 8004400:	429a      	cmp	r2, r3
 8004402:	d3b7      	bcc.n	8004374 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800440a:	691b      	ldr	r3, [r3, #16]
 800440c:	68fa      	ldr	r2, [r7, #12]
 800440e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004412:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004416:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2200      	movs	r2, #0
 800441c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004424:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004428:	2b00      	cmp	r3, #0
 800442a:	d105      	bne.n	8004438 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	699b      	ldr	r3, [r3, #24]
 8004430:	f043 0210 	orr.w	r2, r3, #16
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	699a      	ldr	r2, [r3, #24]
 800443c:	4b0e      	ldr	r3, [pc, #56]	; (8004478 <USB_DevInit+0x2b4>)
 800443e:	4313      	orrs	r3, r2
 8004440:	687a      	ldr	r2, [r7, #4]
 8004442:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004444:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004446:	2b00      	cmp	r3, #0
 8004448:	d005      	beq.n	8004456 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	699b      	ldr	r3, [r3, #24]
 800444e:	f043 0208 	orr.w	r2, r3, #8
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004456:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004458:	2b01      	cmp	r3, #1
 800445a:	d105      	bne.n	8004468 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	699a      	ldr	r2, [r3, #24]
 8004460:	4b06      	ldr	r3, [pc, #24]	; (800447c <USB_DevInit+0x2b8>)
 8004462:	4313      	orrs	r3, r2
 8004464:	687a      	ldr	r2, [r7, #4]
 8004466:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004468:	7dfb      	ldrb	r3, [r7, #23]
}
 800446a:	4618      	mov	r0, r3
 800446c:	3718      	adds	r7, #24
 800446e:	46bd      	mov	sp, r7
 8004470:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004474:	b004      	add	sp, #16
 8004476:	4770      	bx	lr
 8004478:	803c3800 	.word	0x803c3800
 800447c:	40000004 	.word	0x40000004

08004480 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004480:	b480      	push	{r7}
 8004482:	b085      	sub	sp, #20
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
 8004488:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800448a:	2300      	movs	r3, #0
 800448c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	3301      	adds	r3, #1
 8004492:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	4a13      	ldr	r2, [pc, #76]	; (80044e4 <USB_FlushTxFifo+0x64>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d901      	bls.n	80044a0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800449c:	2303      	movs	r3, #3
 800449e:	e01b      	b.n	80044d8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	691b      	ldr	r3, [r3, #16]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	daf2      	bge.n	800448e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80044a8:	2300      	movs	r3, #0
 80044aa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	019b      	lsls	r3, r3, #6
 80044b0:	f043 0220 	orr.w	r2, r3, #32
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	3301      	adds	r3, #1
 80044bc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	4a08      	ldr	r2, [pc, #32]	; (80044e4 <USB_FlushTxFifo+0x64>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d901      	bls.n	80044ca <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80044c6:	2303      	movs	r3, #3
 80044c8:	e006      	b.n	80044d8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	691b      	ldr	r3, [r3, #16]
 80044ce:	f003 0320 	and.w	r3, r3, #32
 80044d2:	2b20      	cmp	r3, #32
 80044d4:	d0f0      	beq.n	80044b8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80044d6:	2300      	movs	r3, #0
}
 80044d8:	4618      	mov	r0, r3
 80044da:	3714      	adds	r7, #20
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr
 80044e4:	00030d40 	.word	0x00030d40

080044e8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b085      	sub	sp, #20
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80044f0:	2300      	movs	r3, #0
 80044f2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	3301      	adds	r3, #1
 80044f8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	4a11      	ldr	r2, [pc, #68]	; (8004544 <USB_FlushRxFifo+0x5c>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d901      	bls.n	8004506 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004502:	2303      	movs	r3, #3
 8004504:	e018      	b.n	8004538 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	691b      	ldr	r3, [r3, #16]
 800450a:	2b00      	cmp	r3, #0
 800450c:	daf2      	bge.n	80044f4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800450e:	2300      	movs	r3, #0
 8004510:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2210      	movs	r2, #16
 8004516:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	3301      	adds	r3, #1
 800451c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	4a08      	ldr	r2, [pc, #32]	; (8004544 <USB_FlushRxFifo+0x5c>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d901      	bls.n	800452a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004526:	2303      	movs	r3, #3
 8004528:	e006      	b.n	8004538 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	691b      	ldr	r3, [r3, #16]
 800452e:	f003 0310 	and.w	r3, r3, #16
 8004532:	2b10      	cmp	r3, #16
 8004534:	d0f0      	beq.n	8004518 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004536:	2300      	movs	r3, #0
}
 8004538:	4618      	mov	r0, r3
 800453a:	3714      	adds	r7, #20
 800453c:	46bd      	mov	sp, r7
 800453e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004542:	4770      	bx	lr
 8004544:	00030d40 	.word	0x00030d40

08004548 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004548:	b480      	push	{r7}
 800454a:	b085      	sub	sp, #20
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
 8004550:	460b      	mov	r3, r1
 8004552:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	78fb      	ldrb	r3, [r7, #3]
 8004562:	68f9      	ldr	r1, [r7, #12]
 8004564:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004568:	4313      	orrs	r3, r2
 800456a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800456c:	2300      	movs	r3, #0
}
 800456e:	4618      	mov	r0, r3
 8004570:	3714      	adds	r7, #20
 8004572:	46bd      	mov	sp, r7
 8004574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004578:	4770      	bx	lr

0800457a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800457a:	b480      	push	{r7}
 800457c:	b085      	sub	sp, #20
 800457e:	af00      	add	r7, sp, #0
 8004580:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	68fa      	ldr	r2, [r7, #12]
 8004590:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004594:	f023 0303 	bic.w	r3, r3, #3
 8004598:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	68fa      	ldr	r2, [r7, #12]
 80045a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80045a8:	f043 0302 	orr.w	r3, r3, #2
 80045ac:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80045ae:	2300      	movs	r3, #0
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	3714      	adds	r7, #20
 80045b4:	46bd      	mov	sp, r7
 80045b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ba:	4770      	bx	lr

080045bc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80045bc:	b480      	push	{r7}
 80045be:	b083      	sub	sp, #12
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	695b      	ldr	r3, [r3, #20]
 80045c8:	f003 0301 	and.w	r3, r3, #1
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	370c      	adds	r7, #12
 80045d0:	46bd      	mov	sp, r7
 80045d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d6:	4770      	bx	lr

080045d8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80045d8:	b480      	push	{r7}
 80045da:	b085      	sub	sp, #20
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80045e0:	2300      	movs	r3, #0
 80045e2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	3301      	adds	r3, #1
 80045e8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	4a13      	ldr	r2, [pc, #76]	; (800463c <USB_CoreReset+0x64>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d901      	bls.n	80045f6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80045f2:	2303      	movs	r3, #3
 80045f4:	e01b      	b.n	800462e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	691b      	ldr	r3, [r3, #16]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	daf2      	bge.n	80045e4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80045fe:	2300      	movs	r3, #0
 8004600:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	691b      	ldr	r3, [r3, #16]
 8004606:	f043 0201 	orr.w	r2, r3, #1
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	3301      	adds	r3, #1
 8004612:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	4a09      	ldr	r2, [pc, #36]	; (800463c <USB_CoreReset+0x64>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d901      	bls.n	8004620 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800461c:	2303      	movs	r3, #3
 800461e:	e006      	b.n	800462e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	691b      	ldr	r3, [r3, #16]
 8004624:	f003 0301 	and.w	r3, r3, #1
 8004628:	2b01      	cmp	r3, #1
 800462a:	d0f0      	beq.n	800460e <USB_CoreReset+0x36>

  return HAL_OK;
 800462c:	2300      	movs	r3, #0
}
 800462e:	4618      	mov	r0, r3
 8004630:	3714      	adds	r7, #20
 8004632:	46bd      	mov	sp, r7
 8004634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004638:	4770      	bx	lr
 800463a:	bf00      	nop
 800463c:	00030d40 	.word	0x00030d40

08004640 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004640:	b480      	push	{r7}
 8004642:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8004644:	bf00      	nop
 8004646:	46bd      	mov	sp, r7
 8004648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464c:	4770      	bx	lr
	...

08004650 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004650:	b480      	push	{r7}
 8004652:	b085      	sub	sp, #20
 8004654:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004656:	f3ef 8305 	mrs	r3, IPSR
 800465a:	60bb      	str	r3, [r7, #8]
  return(result);
 800465c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800465e:	2b00      	cmp	r3, #0
 8004660:	d10f      	bne.n	8004682 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004662:	f3ef 8310 	mrs	r3, PRIMASK
 8004666:	607b      	str	r3, [r7, #4]
  return(result);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d105      	bne.n	800467a <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800466e:	f3ef 8311 	mrs	r3, BASEPRI
 8004672:	603b      	str	r3, [r7, #0]
  return(result);
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d007      	beq.n	800468a <osKernelInitialize+0x3a>
 800467a:	4b0e      	ldr	r3, [pc, #56]	; (80046b4 <osKernelInitialize+0x64>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	2b02      	cmp	r3, #2
 8004680:	d103      	bne.n	800468a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8004682:	f06f 0305 	mvn.w	r3, #5
 8004686:	60fb      	str	r3, [r7, #12]
 8004688:	e00c      	b.n	80046a4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800468a:	4b0a      	ldr	r3, [pc, #40]	; (80046b4 <osKernelInitialize+0x64>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d105      	bne.n	800469e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004692:	4b08      	ldr	r3, [pc, #32]	; (80046b4 <osKernelInitialize+0x64>)
 8004694:	2201      	movs	r2, #1
 8004696:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004698:	2300      	movs	r3, #0
 800469a:	60fb      	str	r3, [r7, #12]
 800469c:	e002      	b.n	80046a4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800469e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80046a2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80046a4:	68fb      	ldr	r3, [r7, #12]
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3714      	adds	r7, #20
 80046aa:	46bd      	mov	sp, r7
 80046ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b0:	4770      	bx	lr
 80046b2:	bf00      	nop
 80046b4:	20000b74 	.word	0x20000b74

080046b8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b084      	sub	sp, #16
 80046bc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80046be:	f3ef 8305 	mrs	r3, IPSR
 80046c2:	60bb      	str	r3, [r7, #8]
  return(result);
 80046c4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d10f      	bne.n	80046ea <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046ca:	f3ef 8310 	mrs	r3, PRIMASK
 80046ce:	607b      	str	r3, [r7, #4]
  return(result);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d105      	bne.n	80046e2 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80046d6:	f3ef 8311 	mrs	r3, BASEPRI
 80046da:	603b      	str	r3, [r7, #0]
  return(result);
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d007      	beq.n	80046f2 <osKernelStart+0x3a>
 80046e2:	4b0f      	ldr	r3, [pc, #60]	; (8004720 <osKernelStart+0x68>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	2b02      	cmp	r3, #2
 80046e8:	d103      	bne.n	80046f2 <osKernelStart+0x3a>
    stat = osErrorISR;
 80046ea:	f06f 0305 	mvn.w	r3, #5
 80046ee:	60fb      	str	r3, [r7, #12]
 80046f0:	e010      	b.n	8004714 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80046f2:	4b0b      	ldr	r3, [pc, #44]	; (8004720 <osKernelStart+0x68>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d109      	bne.n	800470e <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80046fa:	f7ff ffa1 	bl	8004640 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80046fe:	4b08      	ldr	r3, [pc, #32]	; (8004720 <osKernelStart+0x68>)
 8004700:	2202      	movs	r2, #2
 8004702:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004704:	f001 f966 	bl	80059d4 <vTaskStartScheduler>
      stat = osOK;
 8004708:	2300      	movs	r3, #0
 800470a:	60fb      	str	r3, [r7, #12]
 800470c:	e002      	b.n	8004714 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800470e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004712:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004714:	68fb      	ldr	r3, [r7, #12]
}
 8004716:	4618      	mov	r0, r3
 8004718:	3710      	adds	r7, #16
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}
 800471e:	bf00      	nop
 8004720:	20000b74 	.word	0x20000b74

08004724 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004724:	b580      	push	{r7, lr}
 8004726:	b090      	sub	sp, #64	; 0x40
 8004728:	af04      	add	r7, sp, #16
 800472a:	60f8      	str	r0, [r7, #12]
 800472c:	60b9      	str	r1, [r7, #8]
 800472e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004730:	2300      	movs	r3, #0
 8004732:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004734:	f3ef 8305 	mrs	r3, IPSR
 8004738:	61fb      	str	r3, [r7, #28]
  return(result);
 800473a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800473c:	2b00      	cmp	r3, #0
 800473e:	f040 808f 	bne.w	8004860 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004742:	f3ef 8310 	mrs	r3, PRIMASK
 8004746:	61bb      	str	r3, [r7, #24]
  return(result);
 8004748:	69bb      	ldr	r3, [r7, #24]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d105      	bne.n	800475a <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800474e:	f3ef 8311 	mrs	r3, BASEPRI
 8004752:	617b      	str	r3, [r7, #20]
  return(result);
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d003      	beq.n	8004762 <osThreadNew+0x3e>
 800475a:	4b44      	ldr	r3, [pc, #272]	; (800486c <osThreadNew+0x148>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	2b02      	cmp	r3, #2
 8004760:	d07e      	beq.n	8004860 <osThreadNew+0x13c>
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d07b      	beq.n	8004860 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8004768:	2380      	movs	r3, #128	; 0x80
 800476a:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800476c:	2318      	movs	r3, #24
 800476e:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8004770:	2300      	movs	r3, #0
 8004772:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8004774:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004778:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d045      	beq.n	800480c <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d002      	beq.n	800478e <osThreadNew+0x6a>
        name = attr->name;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	699b      	ldr	r3, [r3, #24]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d002      	beq.n	800479c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	699b      	ldr	r3, [r3, #24]
 800479a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800479c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d008      	beq.n	80047b4 <osThreadNew+0x90>
 80047a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a4:	2b38      	cmp	r3, #56	; 0x38
 80047a6:	d805      	bhi.n	80047b4 <osThreadNew+0x90>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	f003 0301 	and.w	r3, r3, #1
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d001      	beq.n	80047b8 <osThreadNew+0x94>
        return (NULL);
 80047b4:	2300      	movs	r3, #0
 80047b6:	e054      	b.n	8004862 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	695b      	ldr	r3, [r3, #20]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d003      	beq.n	80047c8 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	695b      	ldr	r3, [r3, #20]
 80047c4:	089b      	lsrs	r3, r3, #2
 80047c6:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d00e      	beq.n	80047ee <osThreadNew+0xca>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	68db      	ldr	r3, [r3, #12]
 80047d4:	2bbb      	cmp	r3, #187	; 0xbb
 80047d6:	d90a      	bls.n	80047ee <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d006      	beq.n	80047ee <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	695b      	ldr	r3, [r3, #20]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d002      	beq.n	80047ee <osThreadNew+0xca>
        mem = 1;
 80047e8:	2301      	movs	r3, #1
 80047ea:	623b      	str	r3, [r7, #32]
 80047ec:	e010      	b.n	8004810 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d10c      	bne.n	8004810 <osThreadNew+0xec>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	68db      	ldr	r3, [r3, #12]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d108      	bne.n	8004810 <osThreadNew+0xec>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	691b      	ldr	r3, [r3, #16]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d104      	bne.n	8004810 <osThreadNew+0xec>
          mem = 0;
 8004806:	2300      	movs	r3, #0
 8004808:	623b      	str	r3, [r7, #32]
 800480a:	e001      	b.n	8004810 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800480c:	2300      	movs	r3, #0
 800480e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8004810:	6a3b      	ldr	r3, [r7, #32]
 8004812:	2b01      	cmp	r3, #1
 8004814:	d110      	bne.n	8004838 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800481a:	687a      	ldr	r2, [r7, #4]
 800481c:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800481e:	9202      	str	r2, [sp, #8]
 8004820:	9301      	str	r3, [sp, #4]
 8004822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004824:	9300      	str	r3, [sp, #0]
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800482a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800482c:	68f8      	ldr	r0, [r7, #12]
 800482e:	f000 feb9 	bl	80055a4 <xTaskCreateStatic>
 8004832:	4603      	mov	r3, r0
 8004834:	613b      	str	r3, [r7, #16]
 8004836:	e013      	b.n	8004860 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8004838:	6a3b      	ldr	r3, [r7, #32]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d110      	bne.n	8004860 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800483e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004840:	b29a      	uxth	r2, r3
 8004842:	f107 0310 	add.w	r3, r7, #16
 8004846:	9301      	str	r3, [sp, #4]
 8004848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800484a:	9300      	str	r3, [sp, #0]
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004850:	68f8      	ldr	r0, [r7, #12]
 8004852:	f000 ff0a 	bl	800566a <xTaskCreate>
 8004856:	4603      	mov	r3, r0
 8004858:	2b01      	cmp	r3, #1
 800485a:	d001      	beq.n	8004860 <osThreadNew+0x13c>
          hTask = NULL;
 800485c:	2300      	movs	r3, #0
 800485e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004860:	693b      	ldr	r3, [r7, #16]
}
 8004862:	4618      	mov	r0, r3
 8004864:	3730      	adds	r7, #48	; 0x30
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}
 800486a:	bf00      	nop
 800486c:	20000b74 	.word	0x20000b74

08004870 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004870:	b580      	push	{r7, lr}
 8004872:	b086      	sub	sp, #24
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004878:	f3ef 8305 	mrs	r3, IPSR
 800487c:	613b      	str	r3, [r7, #16]
  return(result);
 800487e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004880:	2b00      	cmp	r3, #0
 8004882:	d10f      	bne.n	80048a4 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004884:	f3ef 8310 	mrs	r3, PRIMASK
 8004888:	60fb      	str	r3, [r7, #12]
  return(result);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d105      	bne.n	800489c <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004890:	f3ef 8311 	mrs	r3, BASEPRI
 8004894:	60bb      	str	r3, [r7, #8]
  return(result);
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d007      	beq.n	80048ac <osDelay+0x3c>
 800489c:	4b0a      	ldr	r3, [pc, #40]	; (80048c8 <osDelay+0x58>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	2b02      	cmp	r3, #2
 80048a2:	d103      	bne.n	80048ac <osDelay+0x3c>
    stat = osErrorISR;
 80048a4:	f06f 0305 	mvn.w	r3, #5
 80048a8:	617b      	str	r3, [r7, #20]
 80048aa:	e007      	b.n	80048bc <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80048ac:	2300      	movs	r3, #0
 80048ae:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d002      	beq.n	80048bc <osDelay+0x4c>
      vTaskDelay(ticks);
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f001 f852 	bl	8005960 <vTaskDelay>
    }
  }

  return (stat);
 80048bc:	697b      	ldr	r3, [r7, #20]
}
 80048be:	4618      	mov	r0, r3
 80048c0:	3718      	adds	r7, #24
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}
 80048c6:	bf00      	nop
 80048c8:	20000b74 	.word	0x20000b74

080048cc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80048cc:	b480      	push	{r7}
 80048ce:	b085      	sub	sp, #20
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	60f8      	str	r0, [r7, #12]
 80048d4:	60b9      	str	r1, [r7, #8]
 80048d6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	4a07      	ldr	r2, [pc, #28]	; (80048f8 <vApplicationGetIdleTaskMemory+0x2c>)
 80048dc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	4a06      	ldr	r2, [pc, #24]	; (80048fc <vApplicationGetIdleTaskMemory+0x30>)
 80048e2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2280      	movs	r2, #128	; 0x80
 80048e8:	601a      	str	r2, [r3, #0]
}
 80048ea:	bf00      	nop
 80048ec:	3714      	adds	r7, #20
 80048ee:	46bd      	mov	sp, r7
 80048f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f4:	4770      	bx	lr
 80048f6:	bf00      	nop
 80048f8:	20000b78 	.word	0x20000b78
 80048fc:	20000c34 	.word	0x20000c34

08004900 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004900:	b480      	push	{r7}
 8004902:	b085      	sub	sp, #20
 8004904:	af00      	add	r7, sp, #0
 8004906:	60f8      	str	r0, [r7, #12]
 8004908:	60b9      	str	r1, [r7, #8]
 800490a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	4a07      	ldr	r2, [pc, #28]	; (800492c <vApplicationGetTimerTaskMemory+0x2c>)
 8004910:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	4a06      	ldr	r2, [pc, #24]	; (8004930 <vApplicationGetTimerTaskMemory+0x30>)
 8004916:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800491e:	601a      	str	r2, [r3, #0]
}
 8004920:	bf00      	nop
 8004922:	3714      	adds	r7, #20
 8004924:	46bd      	mov	sp, r7
 8004926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492a:	4770      	bx	lr
 800492c:	20000e34 	.word	0x20000e34
 8004930:	20000ef0 	.word	0x20000ef0

08004934 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004934:	b480      	push	{r7}
 8004936:	b083      	sub	sp, #12
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	f103 0208 	add.w	r2, r3, #8
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800494c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	f103 0208 	add.w	r2, r3, #8
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	f103 0208 	add.w	r2, r3, #8
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2200      	movs	r2, #0
 8004966:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004968:	bf00      	nop
 800496a:	370c      	adds	r7, #12
 800496c:	46bd      	mov	sp, r7
 800496e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004972:	4770      	bx	lr

08004974 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004974:	b480      	push	{r7}
 8004976:	b083      	sub	sp, #12
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2200      	movs	r2, #0
 8004980:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004982:	bf00      	nop
 8004984:	370c      	adds	r7, #12
 8004986:	46bd      	mov	sp, r7
 8004988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498c:	4770      	bx	lr

0800498e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800498e:	b480      	push	{r7}
 8004990:	b085      	sub	sp, #20
 8004992:	af00      	add	r7, sp, #0
 8004994:	6078      	str	r0, [r7, #4]
 8004996:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	68fa      	ldr	r2, [r7, #12]
 80049a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	689a      	ldr	r2, [r3, #8]
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	683a      	ldr	r2, [r7, #0]
 80049b2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	683a      	ldr	r2, [r7, #0]
 80049b8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	687a      	ldr	r2, [r7, #4]
 80049be:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	1c5a      	adds	r2, r3, #1
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	601a      	str	r2, [r3, #0]
}
 80049ca:	bf00      	nop
 80049cc:	3714      	adds	r7, #20
 80049ce:	46bd      	mov	sp, r7
 80049d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d4:	4770      	bx	lr

080049d6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80049d6:	b480      	push	{r7}
 80049d8:	b085      	sub	sp, #20
 80049da:	af00      	add	r7, sp, #0
 80049dc:	6078      	str	r0, [r7, #4]
 80049de:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049ec:	d103      	bne.n	80049f6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	691b      	ldr	r3, [r3, #16]
 80049f2:	60fb      	str	r3, [r7, #12]
 80049f4:	e00c      	b.n	8004a10 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	3308      	adds	r3, #8
 80049fa:	60fb      	str	r3, [r7, #12]
 80049fc:	e002      	b.n	8004a04 <vListInsert+0x2e>
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	60fb      	str	r3, [r7, #12]
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	68ba      	ldr	r2, [r7, #8]
 8004a0c:	429a      	cmp	r2, r3
 8004a0e:	d2f6      	bcs.n	80049fe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	685a      	ldr	r2, [r3, #4]
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	683a      	ldr	r2, [r7, #0]
 8004a1e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	68fa      	ldr	r2, [r7, #12]
 8004a24:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	683a      	ldr	r2, [r7, #0]
 8004a2a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	687a      	ldr	r2, [r7, #4]
 8004a30:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	1c5a      	adds	r2, r3, #1
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	601a      	str	r2, [r3, #0]
}
 8004a3c:	bf00      	nop
 8004a3e:	3714      	adds	r7, #20
 8004a40:	46bd      	mov	sp, r7
 8004a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a46:	4770      	bx	lr

08004a48 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b085      	sub	sp, #20
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	691b      	ldr	r3, [r3, #16]
 8004a54:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	687a      	ldr	r2, [r7, #4]
 8004a5c:	6892      	ldr	r2, [r2, #8]
 8004a5e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	687a      	ldr	r2, [r7, #4]
 8004a66:	6852      	ldr	r2, [r2, #4]
 8004a68:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	687a      	ldr	r2, [r7, #4]
 8004a70:	429a      	cmp	r2, r3
 8004a72:	d103      	bne.n	8004a7c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	689a      	ldr	r2, [r3, #8]
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	1e5a      	subs	r2, r3, #1
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	3714      	adds	r7, #20
 8004a94:	46bd      	mov	sp, r7
 8004a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9a:	4770      	bx	lr

08004a9c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b084      	sub	sp, #16
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
 8004aa4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d10c      	bne.n	8004aca <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ab4:	b672      	cpsid	i
 8004ab6:	f383 8811 	msr	BASEPRI, r3
 8004aba:	f3bf 8f6f 	isb	sy
 8004abe:	f3bf 8f4f 	dsb	sy
 8004ac2:	b662      	cpsie	i
 8004ac4:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004ac6:	bf00      	nop
 8004ac8:	e7fe      	b.n	8004ac8 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8004aca:	f002 f9bf 	bl	8006e4c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ad6:	68f9      	ldr	r1, [r7, #12]
 8004ad8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004ada:	fb01 f303 	mul.w	r3, r1, r3
 8004ade:	441a      	add	r2, r3
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681a      	ldr	r2, [r3, #0]
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681a      	ldr	r2, [r3, #0]
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004afa:	3b01      	subs	r3, #1
 8004afc:	68f9      	ldr	r1, [r7, #12]
 8004afe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004b00:	fb01 f303 	mul.w	r3, r1, r3
 8004b04:	441a      	add	r2, r3
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	22ff      	movs	r2, #255	; 0xff
 8004b0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	22ff      	movs	r2, #255	; 0xff
 8004b16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d114      	bne.n	8004b4a <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	691b      	ldr	r3, [r3, #16]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d01a      	beq.n	8004b5e <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	3310      	adds	r3, #16
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	f001 fa31 	bl	8005f94 <xTaskRemoveFromEventList>
 8004b32:	4603      	mov	r3, r0
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d012      	beq.n	8004b5e <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004b38:	4b0c      	ldr	r3, [pc, #48]	; (8004b6c <xQueueGenericReset+0xd0>)
 8004b3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b3e:	601a      	str	r2, [r3, #0]
 8004b40:	f3bf 8f4f 	dsb	sy
 8004b44:	f3bf 8f6f 	isb	sy
 8004b48:	e009      	b.n	8004b5e <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	3310      	adds	r3, #16
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f7ff fef0 	bl	8004934 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	3324      	adds	r3, #36	; 0x24
 8004b58:	4618      	mov	r0, r3
 8004b5a:	f7ff feeb 	bl	8004934 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004b5e:	f002 f9a9 	bl	8006eb4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004b62:	2301      	movs	r3, #1
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	3710      	adds	r7, #16
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}
 8004b6c:	e000ed04 	.word	0xe000ed04

08004b70 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b08e      	sub	sp, #56	; 0x38
 8004b74:	af02      	add	r7, sp, #8
 8004b76:	60f8      	str	r0, [r7, #12]
 8004b78:	60b9      	str	r1, [r7, #8]
 8004b7a:	607a      	str	r2, [r7, #4]
 8004b7c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d10c      	bne.n	8004b9e <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8004b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b88:	b672      	cpsid	i
 8004b8a:	f383 8811 	msr	BASEPRI, r3
 8004b8e:	f3bf 8f6f 	isb	sy
 8004b92:	f3bf 8f4f 	dsb	sy
 8004b96:	b662      	cpsie	i
 8004b98:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004b9a:	bf00      	nop
 8004b9c:	e7fe      	b.n	8004b9c <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d10c      	bne.n	8004bbe <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8004ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ba8:	b672      	cpsid	i
 8004baa:	f383 8811 	msr	BASEPRI, r3
 8004bae:	f3bf 8f6f 	isb	sy
 8004bb2:	f3bf 8f4f 	dsb	sy
 8004bb6:	b662      	cpsie	i
 8004bb8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004bba:	bf00      	nop
 8004bbc:	e7fe      	b.n	8004bbc <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d002      	beq.n	8004bca <xQueueGenericCreateStatic+0x5a>
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d001      	beq.n	8004bce <xQueueGenericCreateStatic+0x5e>
 8004bca:	2301      	movs	r3, #1
 8004bcc:	e000      	b.n	8004bd0 <xQueueGenericCreateStatic+0x60>
 8004bce:	2300      	movs	r3, #0
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d10c      	bne.n	8004bee <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8004bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bd8:	b672      	cpsid	i
 8004bda:	f383 8811 	msr	BASEPRI, r3
 8004bde:	f3bf 8f6f 	isb	sy
 8004be2:	f3bf 8f4f 	dsb	sy
 8004be6:	b662      	cpsie	i
 8004be8:	623b      	str	r3, [r7, #32]
}
 8004bea:	bf00      	nop
 8004bec:	e7fe      	b.n	8004bec <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d102      	bne.n	8004bfa <xQueueGenericCreateStatic+0x8a>
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d101      	bne.n	8004bfe <xQueueGenericCreateStatic+0x8e>
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e000      	b.n	8004c00 <xQueueGenericCreateStatic+0x90>
 8004bfe:	2300      	movs	r3, #0
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d10c      	bne.n	8004c1e <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8004c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c08:	b672      	cpsid	i
 8004c0a:	f383 8811 	msr	BASEPRI, r3
 8004c0e:	f3bf 8f6f 	isb	sy
 8004c12:	f3bf 8f4f 	dsb	sy
 8004c16:	b662      	cpsie	i
 8004c18:	61fb      	str	r3, [r7, #28]
}
 8004c1a:	bf00      	nop
 8004c1c:	e7fe      	b.n	8004c1c <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004c1e:	2350      	movs	r3, #80	; 0x50
 8004c20:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	2b50      	cmp	r3, #80	; 0x50
 8004c26:	d00c      	beq.n	8004c42 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8004c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c2c:	b672      	cpsid	i
 8004c2e:	f383 8811 	msr	BASEPRI, r3
 8004c32:	f3bf 8f6f 	isb	sy
 8004c36:	f3bf 8f4f 	dsb	sy
 8004c3a:	b662      	cpsie	i
 8004c3c:	61bb      	str	r3, [r7, #24]
}
 8004c3e:	bf00      	nop
 8004c40:	e7fe      	b.n	8004c40 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004c42:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d00d      	beq.n	8004c6a <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c50:	2201      	movs	r2, #1
 8004c52:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004c56:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c5c:	9300      	str	r3, [sp, #0]
 8004c5e:	4613      	mov	r3, r2
 8004c60:	687a      	ldr	r2, [r7, #4]
 8004c62:	68b9      	ldr	r1, [r7, #8]
 8004c64:	68f8      	ldr	r0, [r7, #12]
 8004c66:	f000 f805 	bl	8004c74 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	3730      	adds	r7, #48	; 0x30
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}

08004c74 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b084      	sub	sp, #16
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	60f8      	str	r0, [r7, #12]
 8004c7c:	60b9      	str	r1, [r7, #8]
 8004c7e:	607a      	str	r2, [r7, #4]
 8004c80:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d103      	bne.n	8004c90 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004c88:	69bb      	ldr	r3, [r7, #24]
 8004c8a:	69ba      	ldr	r2, [r7, #24]
 8004c8c:	601a      	str	r2, [r3, #0]
 8004c8e:	e002      	b.n	8004c96 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004c90:	69bb      	ldr	r3, [r7, #24]
 8004c92:	687a      	ldr	r2, [r7, #4]
 8004c94:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004c96:	69bb      	ldr	r3, [r7, #24]
 8004c98:	68fa      	ldr	r2, [r7, #12]
 8004c9a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004c9c:	69bb      	ldr	r3, [r7, #24]
 8004c9e:	68ba      	ldr	r2, [r7, #8]
 8004ca0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004ca2:	2101      	movs	r1, #1
 8004ca4:	69b8      	ldr	r0, [r7, #24]
 8004ca6:	f7ff fef9 	bl	8004a9c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004caa:	69bb      	ldr	r3, [r7, #24]
 8004cac:	78fa      	ldrb	r2, [r7, #3]
 8004cae:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	{
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
 8004cb2:	78fb      	ldrb	r3, [r7, #3]
 8004cb4:	68ba      	ldr	r2, [r7, #8]
 8004cb6:	68f9      	ldr	r1, [r7, #12]
 8004cb8:	2073      	movs	r0, #115	; 0x73
 8004cba:	f003 fa63 	bl	8008184 <SEGGER_SYSVIEW_RecordU32x3>
}
 8004cbe:	bf00      	nop
 8004cc0:	3710      	adds	r7, #16
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}
	...

08004cc8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b090      	sub	sp, #64	; 0x40
 8004ccc:	af02      	add	r7, sp, #8
 8004cce:	60f8      	str	r0, [r7, #12]
 8004cd0:	60b9      	str	r1, [r7, #8]
 8004cd2:	607a      	str	r2, [r7, #4]
 8004cd4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d10c      	bne.n	8004cfe <xQueueGenericSend+0x36>
	__asm volatile
 8004ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ce8:	b672      	cpsid	i
 8004cea:	f383 8811 	msr	BASEPRI, r3
 8004cee:	f3bf 8f6f 	isb	sy
 8004cf2:	f3bf 8f4f 	dsb	sy
 8004cf6:	b662      	cpsie	i
 8004cf8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004cfa:	bf00      	nop
 8004cfc:	e7fe      	b.n	8004cfc <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d103      	bne.n	8004d0c <xQueueGenericSend+0x44>
 8004d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d101      	bne.n	8004d10 <xQueueGenericSend+0x48>
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	e000      	b.n	8004d12 <xQueueGenericSend+0x4a>
 8004d10:	2300      	movs	r3, #0
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d10c      	bne.n	8004d30 <xQueueGenericSend+0x68>
	__asm volatile
 8004d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d1a:	b672      	cpsid	i
 8004d1c:	f383 8811 	msr	BASEPRI, r3
 8004d20:	f3bf 8f6f 	isb	sy
 8004d24:	f3bf 8f4f 	dsb	sy
 8004d28:	b662      	cpsie	i
 8004d2a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004d2c:	bf00      	nop
 8004d2e:	e7fe      	b.n	8004d2e <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	2b02      	cmp	r3, #2
 8004d34:	d103      	bne.n	8004d3e <xQueueGenericSend+0x76>
 8004d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d3a:	2b01      	cmp	r3, #1
 8004d3c:	d101      	bne.n	8004d42 <xQueueGenericSend+0x7a>
 8004d3e:	2301      	movs	r3, #1
 8004d40:	e000      	b.n	8004d44 <xQueueGenericSend+0x7c>
 8004d42:	2300      	movs	r3, #0
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d10c      	bne.n	8004d62 <xQueueGenericSend+0x9a>
	__asm volatile
 8004d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d4c:	b672      	cpsid	i
 8004d4e:	f383 8811 	msr	BASEPRI, r3
 8004d52:	f3bf 8f6f 	isb	sy
 8004d56:	f3bf 8f4f 	dsb	sy
 8004d5a:	b662      	cpsie	i
 8004d5c:	623b      	str	r3, [r7, #32]
}
 8004d5e:	bf00      	nop
 8004d60:	e7fe      	b.n	8004d60 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004d62:	f001 fb1d 	bl	80063a0 <xTaskGetSchedulerState>
 8004d66:	4603      	mov	r3, r0
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d102      	bne.n	8004d72 <xQueueGenericSend+0xaa>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d101      	bne.n	8004d76 <xQueueGenericSend+0xae>
 8004d72:	2301      	movs	r3, #1
 8004d74:	e000      	b.n	8004d78 <xQueueGenericSend+0xb0>
 8004d76:	2300      	movs	r3, #0
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d10c      	bne.n	8004d96 <xQueueGenericSend+0xce>
	__asm volatile
 8004d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d80:	b672      	cpsid	i
 8004d82:	f383 8811 	msr	BASEPRI, r3
 8004d86:	f3bf 8f6f 	isb	sy
 8004d8a:	f3bf 8f4f 	dsb	sy
 8004d8e:	b662      	cpsie	i
 8004d90:	61fb      	str	r3, [r7, #28]
}
 8004d92:	bf00      	nop
 8004d94:	e7fe      	b.n	8004d94 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004d96:	f002 f859 	bl	8006e4c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004da0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004da2:	429a      	cmp	r2, r3
 8004da4:	d302      	bcc.n	8004dac <xQueueGenericSend+0xe4>
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	2b02      	cmp	r3, #2
 8004daa:	d136      	bne.n	8004e1a <xQueueGenericSend+0x152>
			{
				traceQUEUE_SEND( pxQueue );
 8004dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dae:	4618      	mov	r0, r3
 8004db0:	f003 fea4 	bl	8008afc <SEGGER_SYSVIEW_ShrinkId>
 8004db4:	68ba      	ldr	r2, [r7, #8]
 8004db6:	6879      	ldr	r1, [r7, #4]
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	9300      	str	r3, [sp, #0]
 8004dbc:	460b      	mov	r3, r1
 8004dbe:	4601      	mov	r1, r0
 8004dc0:	205a      	movs	r0, #90	; 0x5a
 8004dc2:	f003 fa55 	bl	8008270 <SEGGER_SYSVIEW_RecordU32x4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004dc6:	683a      	ldr	r2, [r7, #0]
 8004dc8:	68b9      	ldr	r1, [r7, #8]
 8004dca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004dcc:	f000 fa74 	bl	80052b8 <prvCopyDataToQueue>
 8004dd0:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d010      	beq.n	8004dfc <xQueueGenericSend+0x134>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ddc:	3324      	adds	r3, #36	; 0x24
 8004dde:	4618      	mov	r0, r3
 8004de0:	f001 f8d8 	bl	8005f94 <xTaskRemoveFromEventList>
 8004de4:	4603      	mov	r3, r0
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d013      	beq.n	8004e12 <xQueueGenericSend+0x14a>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004dea:	4b4d      	ldr	r3, [pc, #308]	; (8004f20 <xQueueGenericSend+0x258>)
 8004dec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004df0:	601a      	str	r2, [r3, #0]
 8004df2:	f3bf 8f4f 	dsb	sy
 8004df6:	f3bf 8f6f 	isb	sy
 8004dfa:	e00a      	b.n	8004e12 <xQueueGenericSend+0x14a>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004dfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d007      	beq.n	8004e12 <xQueueGenericSend+0x14a>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004e02:	4b47      	ldr	r3, [pc, #284]	; (8004f20 <xQueueGenericSend+0x258>)
 8004e04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e08:	601a      	str	r2, [r3, #0]
 8004e0a:	f3bf 8f4f 	dsb	sy
 8004e0e:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004e12:	f002 f84f 	bl	8006eb4 <vPortExitCritical>
				return pdPASS;
 8004e16:	2301      	movs	r3, #1
 8004e18:	e07d      	b.n	8004f16 <xQueueGenericSend+0x24e>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d110      	bne.n	8004e42 <xQueueGenericSend+0x17a>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004e20:	f002 f848 	bl	8006eb4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
 8004e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e26:	4618      	mov	r0, r3
 8004e28:	f003 fe68 	bl	8008afc <SEGGER_SYSVIEW_ShrinkId>
 8004e2c:	68ba      	ldr	r2, [r7, #8]
 8004e2e:	6879      	ldr	r1, [r7, #4]
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	9300      	str	r3, [sp, #0]
 8004e34:	460b      	mov	r3, r1
 8004e36:	4601      	mov	r1, r0
 8004e38:	205a      	movs	r0, #90	; 0x5a
 8004e3a:	f003 fa19 	bl	8008270 <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_FULL;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	e069      	b.n	8004f16 <xQueueGenericSend+0x24e>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004e42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d106      	bne.n	8004e56 <xQueueGenericSend+0x18e>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004e48:	f107 0314 	add.w	r3, r7, #20
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	f001 f90b 	bl	8006068 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004e52:	2301      	movs	r3, #1
 8004e54:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004e56:	f002 f82d 	bl	8006eb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004e5a:	f000 fe3d 	bl	8005ad8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004e5e:	f001 fff5 	bl	8006e4c <vPortEnterCritical>
 8004e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e64:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004e68:	b25b      	sxtb	r3, r3
 8004e6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e6e:	d103      	bne.n	8004e78 <xQueueGenericSend+0x1b0>
 8004e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e72:	2200      	movs	r2, #0
 8004e74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e7a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e7e:	b25b      	sxtb	r3, r3
 8004e80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e84:	d103      	bne.n	8004e8e <xQueueGenericSend+0x1c6>
 8004e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e88:	2200      	movs	r2, #0
 8004e8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e8e:	f002 f811 	bl	8006eb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004e92:	1d3a      	adds	r2, r7, #4
 8004e94:	f107 0314 	add.w	r3, r7, #20
 8004e98:	4611      	mov	r1, r2
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f001 f8fa 	bl	8006094 <xTaskCheckForTimeOut>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d124      	bne.n	8004ef0 <xQueueGenericSend+0x228>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004ea6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004ea8:	f000 fafe 	bl	80054a8 <prvIsQueueFull>
 8004eac:	4603      	mov	r3, r0
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d018      	beq.n	8004ee4 <xQueueGenericSend+0x21c>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eb4:	3310      	adds	r3, #16
 8004eb6:	687a      	ldr	r2, [r7, #4]
 8004eb8:	4611      	mov	r1, r2
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f001 f814 	bl	8005ee8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004ec0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004ec2:	f000 fa89 	bl	80053d8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004ec6:	f000 fe15 	bl	8005af4 <xTaskResumeAll>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	f47f af62 	bne.w	8004d96 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8004ed2:	4b13      	ldr	r3, [pc, #76]	; (8004f20 <xQueueGenericSend+0x258>)
 8004ed4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ed8:	601a      	str	r2, [r3, #0]
 8004eda:	f3bf 8f4f 	dsb	sy
 8004ede:	f3bf 8f6f 	isb	sy
 8004ee2:	e758      	b.n	8004d96 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004ee4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004ee6:	f000 fa77 	bl	80053d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004eea:	f000 fe03 	bl	8005af4 <xTaskResumeAll>
 8004eee:	e752      	b.n	8004d96 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004ef0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004ef2:	f000 fa71 	bl	80053d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004ef6:	f000 fdfd 	bl	8005af4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
 8004efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004efc:	4618      	mov	r0, r3
 8004efe:	f003 fdfd 	bl	8008afc <SEGGER_SYSVIEW_ShrinkId>
 8004f02:	68ba      	ldr	r2, [r7, #8]
 8004f04:	6879      	ldr	r1, [r7, #4]
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	9300      	str	r3, [sp, #0]
 8004f0a:	460b      	mov	r3, r1
 8004f0c:	4601      	mov	r1, r0
 8004f0e:	205a      	movs	r0, #90	; 0x5a
 8004f10:	f003 f9ae 	bl	8008270 <SEGGER_SYSVIEW_RecordU32x4>
			return errQUEUE_FULL;
 8004f14:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	3738      	adds	r7, #56	; 0x38
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}
 8004f1e:	bf00      	nop
 8004f20:	e000ed04 	.word	0xe000ed04

08004f24 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b08e      	sub	sp, #56	; 0x38
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	60f8      	str	r0, [r7, #12]
 8004f2c:	60b9      	str	r1, [r7, #8]
 8004f2e:	607a      	str	r2, [r7, #4]
 8004f30:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d10c      	bne.n	8004f56 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8004f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f40:	b672      	cpsid	i
 8004f42:	f383 8811 	msr	BASEPRI, r3
 8004f46:	f3bf 8f6f 	isb	sy
 8004f4a:	f3bf 8f4f 	dsb	sy
 8004f4e:	b662      	cpsie	i
 8004f50:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004f52:	bf00      	nop
 8004f54:	e7fe      	b.n	8004f54 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d103      	bne.n	8004f64 <xQueueGenericSendFromISR+0x40>
 8004f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d101      	bne.n	8004f68 <xQueueGenericSendFromISR+0x44>
 8004f64:	2301      	movs	r3, #1
 8004f66:	e000      	b.n	8004f6a <xQueueGenericSendFromISR+0x46>
 8004f68:	2300      	movs	r3, #0
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d10c      	bne.n	8004f88 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8004f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f72:	b672      	cpsid	i
 8004f74:	f383 8811 	msr	BASEPRI, r3
 8004f78:	f3bf 8f6f 	isb	sy
 8004f7c:	f3bf 8f4f 	dsb	sy
 8004f80:	b662      	cpsie	i
 8004f82:	623b      	str	r3, [r7, #32]
}
 8004f84:	bf00      	nop
 8004f86:	e7fe      	b.n	8004f86 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	2b02      	cmp	r3, #2
 8004f8c:	d103      	bne.n	8004f96 <xQueueGenericSendFromISR+0x72>
 8004f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f92:	2b01      	cmp	r3, #1
 8004f94:	d101      	bne.n	8004f9a <xQueueGenericSendFromISR+0x76>
 8004f96:	2301      	movs	r3, #1
 8004f98:	e000      	b.n	8004f9c <xQueueGenericSendFromISR+0x78>
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d10c      	bne.n	8004fba <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8004fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fa4:	b672      	cpsid	i
 8004fa6:	f383 8811 	msr	BASEPRI, r3
 8004faa:	f3bf 8f6f 	isb	sy
 8004fae:	f3bf 8f4f 	dsb	sy
 8004fb2:	b662      	cpsie	i
 8004fb4:	61fb      	str	r3, [r7, #28]
}
 8004fb6:	bf00      	nop
 8004fb8:	e7fe      	b.n	8004fb8 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004fba:	f002 f82f 	bl	800701c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004fbe:	f3ef 8211 	mrs	r2, BASEPRI
 8004fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fc6:	b672      	cpsid	i
 8004fc8:	f383 8811 	msr	BASEPRI, r3
 8004fcc:	f3bf 8f6f 	isb	sy
 8004fd0:	f3bf 8f4f 	dsb	sy
 8004fd4:	b662      	cpsie	i
 8004fd6:	61ba      	str	r2, [r7, #24]
 8004fd8:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004fda:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fe0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fe4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fe6:	429a      	cmp	r2, r3
 8004fe8:	d302      	bcc.n	8004ff0 <xQueueGenericSendFromISR+0xcc>
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	2b02      	cmp	r3, #2
 8004fee:	d136      	bne.n	800505e <xQueueGenericSendFromISR+0x13a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ff2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ff6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

			traceQUEUE_SEND_FROM_ISR( pxQueue );
 8004ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	f003 fd7d 	bl	8008afc <SEGGER_SYSVIEW_ShrinkId>
 8005002:	4601      	mov	r1, r0
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	461a      	mov	r2, r3
 8005008:	2060      	movs	r0, #96	; 0x60
 800500a:	f003 f861 	bl	80080d0 <SEGGER_SYSVIEW_RecordU32x2>
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800500e:	683a      	ldr	r2, [r7, #0]
 8005010:	68b9      	ldr	r1, [r7, #8]
 8005012:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005014:	f000 f950 	bl	80052b8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005018:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800501c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005020:	d112      	bne.n	8005048 <xQueueGenericSendFromISR+0x124>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005026:	2b00      	cmp	r3, #0
 8005028:	d016      	beq.n	8005058 <xQueueGenericSendFromISR+0x134>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800502a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800502c:	3324      	adds	r3, #36	; 0x24
 800502e:	4618      	mov	r0, r3
 8005030:	f000 ffb0 	bl	8005f94 <xTaskRemoveFromEventList>
 8005034:	4603      	mov	r3, r0
 8005036:	2b00      	cmp	r3, #0
 8005038:	d00e      	beq.n	8005058 <xQueueGenericSendFromISR+0x134>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d00b      	beq.n	8005058 <xQueueGenericSendFromISR+0x134>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2201      	movs	r2, #1
 8005044:	601a      	str	r2, [r3, #0]
 8005046:	e007      	b.n	8005058 <xQueueGenericSendFromISR+0x134>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005048:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800504c:	3301      	adds	r3, #1
 800504e:	b2db      	uxtb	r3, r3
 8005050:	b25a      	sxtb	r2, r3
 8005052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005054:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005058:	2301      	movs	r3, #1
 800505a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800505c:	e00b      	b.n	8005076 <xQueueGenericSendFromISR+0x152>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 800505e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005060:	4618      	mov	r0, r3
 8005062:	f003 fd4b 	bl	8008afc <SEGGER_SYSVIEW_ShrinkId>
 8005066:	4601      	mov	r1, r0
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	461a      	mov	r2, r3
 800506c:	2060      	movs	r0, #96	; 0x60
 800506e:	f003 f82f 	bl	80080d0 <SEGGER_SYSVIEW_RecordU32x2>
			xReturn = errQUEUE_FULL;
 8005072:	2300      	movs	r3, #0
 8005074:	637b      	str	r3, [r7, #52]	; 0x34
 8005076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005078:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005080:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005082:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005084:	4618      	mov	r0, r3
 8005086:	3738      	adds	r7, #56	; 0x38
 8005088:	46bd      	mov	sp, r7
 800508a:	bd80      	pop	{r7, pc}

0800508c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800508c:	b590      	push	{r4, r7, lr}
 800508e:	b08f      	sub	sp, #60	; 0x3c
 8005090:	af02      	add	r7, sp, #8
 8005092:	60f8      	str	r0, [r7, #12]
 8005094:	60b9      	str	r1, [r7, #8]
 8005096:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005098:	2300      	movs	r3, #0
 800509a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80050a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d10c      	bne.n	80050c0 <xQueueReceive+0x34>
	__asm volatile
 80050a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050aa:	b672      	cpsid	i
 80050ac:	f383 8811 	msr	BASEPRI, r3
 80050b0:	f3bf 8f6f 	isb	sy
 80050b4:	f3bf 8f4f 	dsb	sy
 80050b8:	b662      	cpsie	i
 80050ba:	623b      	str	r3, [r7, #32]
}
 80050bc:	bf00      	nop
 80050be:	e7fe      	b.n	80050be <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d103      	bne.n	80050ce <xQueueReceive+0x42>
 80050c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d101      	bne.n	80050d2 <xQueueReceive+0x46>
 80050ce:	2301      	movs	r3, #1
 80050d0:	e000      	b.n	80050d4 <xQueueReceive+0x48>
 80050d2:	2300      	movs	r3, #0
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d10c      	bne.n	80050f2 <xQueueReceive+0x66>
	__asm volatile
 80050d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050dc:	b672      	cpsid	i
 80050de:	f383 8811 	msr	BASEPRI, r3
 80050e2:	f3bf 8f6f 	isb	sy
 80050e6:	f3bf 8f4f 	dsb	sy
 80050ea:	b662      	cpsie	i
 80050ec:	61fb      	str	r3, [r7, #28]
}
 80050ee:	bf00      	nop
 80050f0:	e7fe      	b.n	80050f0 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80050f2:	f001 f955 	bl	80063a0 <xTaskGetSchedulerState>
 80050f6:	4603      	mov	r3, r0
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d102      	bne.n	8005102 <xQueueReceive+0x76>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d101      	bne.n	8005106 <xQueueReceive+0x7a>
 8005102:	2301      	movs	r3, #1
 8005104:	e000      	b.n	8005108 <xQueueReceive+0x7c>
 8005106:	2300      	movs	r3, #0
 8005108:	2b00      	cmp	r3, #0
 800510a:	d10c      	bne.n	8005126 <xQueueReceive+0x9a>
	__asm volatile
 800510c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005110:	b672      	cpsid	i
 8005112:	f383 8811 	msr	BASEPRI, r3
 8005116:	f3bf 8f6f 	isb	sy
 800511a:	f3bf 8f4f 	dsb	sy
 800511e:	b662      	cpsie	i
 8005120:	61bb      	str	r3, [r7, #24]
}
 8005122:	bf00      	nop
 8005124:	e7fe      	b.n	8005124 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005126:	f001 fe91 	bl	8006e4c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800512a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800512c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800512e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005132:	2b00      	cmp	r3, #0
 8005134:	d02f      	beq.n	8005196 <xQueueReceive+0x10a>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005136:	68b9      	ldr	r1, [r7, #8]
 8005138:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800513a:	f000 f927 	bl	800538c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
 800513e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005140:	4618      	mov	r0, r3
 8005142:	f003 fcdb 	bl	8008afc <SEGGER_SYSVIEW_ShrinkId>
 8005146:	4604      	mov	r4, r0
 8005148:	2000      	movs	r0, #0
 800514a:	f003 fcd7 	bl	8008afc <SEGGER_SYSVIEW_ShrinkId>
 800514e:	4602      	mov	r2, r0
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2101      	movs	r1, #1
 8005154:	9100      	str	r1, [sp, #0]
 8005156:	4621      	mov	r1, r4
 8005158:	205c      	movs	r0, #92	; 0x5c
 800515a:	f003 f889 	bl	8008270 <SEGGER_SYSVIEW_RecordU32x4>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800515e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005160:	1e5a      	subs	r2, r3, #1
 8005162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005164:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005168:	691b      	ldr	r3, [r3, #16]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d00f      	beq.n	800518e <xQueueReceive+0x102>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800516e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005170:	3310      	adds	r3, #16
 8005172:	4618      	mov	r0, r3
 8005174:	f000 ff0e 	bl	8005f94 <xTaskRemoveFromEventList>
 8005178:	4603      	mov	r3, r0
 800517a:	2b00      	cmp	r3, #0
 800517c:	d007      	beq.n	800518e <xQueueReceive+0x102>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800517e:	4b4d      	ldr	r3, [pc, #308]	; (80052b4 <xQueueReceive+0x228>)
 8005180:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005184:	601a      	str	r2, [r3, #0]
 8005186:	f3bf 8f4f 	dsb	sy
 800518a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800518e:	f001 fe91 	bl	8006eb4 <vPortExitCritical>
				return pdPASS;
 8005192:	2301      	movs	r3, #1
 8005194:	e08a      	b.n	80052ac <xQueueReceive+0x220>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d113      	bne.n	80051c4 <xQueueReceive+0x138>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800519c:	f001 fe8a 	bl	8006eb4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 80051a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051a2:	4618      	mov	r0, r3
 80051a4:	f003 fcaa 	bl	8008afc <SEGGER_SYSVIEW_ShrinkId>
 80051a8:	4604      	mov	r4, r0
 80051aa:	2000      	movs	r0, #0
 80051ac:	f003 fca6 	bl	8008afc <SEGGER_SYSVIEW_ShrinkId>
 80051b0:	4602      	mov	r2, r0
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2101      	movs	r1, #1
 80051b6:	9100      	str	r1, [sp, #0]
 80051b8:	4621      	mov	r1, r4
 80051ba:	205c      	movs	r0, #92	; 0x5c
 80051bc:	f003 f858 	bl	8008270 <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_EMPTY;
 80051c0:	2300      	movs	r3, #0
 80051c2:	e073      	b.n	80052ac <xQueueReceive+0x220>
				}
				else if( xEntryTimeSet == pdFALSE )
 80051c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d106      	bne.n	80051d8 <xQueueReceive+0x14c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80051ca:	f107 0310 	add.w	r3, r7, #16
 80051ce:	4618      	mov	r0, r3
 80051d0:	f000 ff4a 	bl	8006068 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80051d4:	2301      	movs	r3, #1
 80051d6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80051d8:	f001 fe6c 	bl	8006eb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80051dc:	f000 fc7c 	bl	8005ad8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80051e0:	f001 fe34 	bl	8006e4c <vPortEnterCritical>
 80051e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80051ea:	b25b      	sxtb	r3, r3
 80051ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80051f0:	d103      	bne.n	80051fa <xQueueReceive+0x16e>
 80051f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051f4:	2200      	movs	r2, #0
 80051f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005200:	b25b      	sxtb	r3, r3
 8005202:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005206:	d103      	bne.n	8005210 <xQueueReceive+0x184>
 8005208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800520a:	2200      	movs	r2, #0
 800520c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005210:	f001 fe50 	bl	8006eb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005214:	1d3a      	adds	r2, r7, #4
 8005216:	f107 0310 	add.w	r3, r7, #16
 800521a:	4611      	mov	r1, r2
 800521c:	4618      	mov	r0, r3
 800521e:	f000 ff39 	bl	8006094 <xTaskCheckForTimeOut>
 8005222:	4603      	mov	r3, r0
 8005224:	2b00      	cmp	r3, #0
 8005226:	d124      	bne.n	8005272 <xQueueReceive+0x1e6>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005228:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800522a:	f000 f927 	bl	800547c <prvIsQueueEmpty>
 800522e:	4603      	mov	r3, r0
 8005230:	2b00      	cmp	r3, #0
 8005232:	d018      	beq.n	8005266 <xQueueReceive+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005236:	3324      	adds	r3, #36	; 0x24
 8005238:	687a      	ldr	r2, [r7, #4]
 800523a:	4611      	mov	r1, r2
 800523c:	4618      	mov	r0, r3
 800523e:	f000 fe53 	bl	8005ee8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005242:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005244:	f000 f8c8 	bl	80053d8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005248:	f000 fc54 	bl	8005af4 <xTaskResumeAll>
 800524c:	4603      	mov	r3, r0
 800524e:	2b00      	cmp	r3, #0
 8005250:	f47f af69 	bne.w	8005126 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8005254:	4b17      	ldr	r3, [pc, #92]	; (80052b4 <xQueueReceive+0x228>)
 8005256:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800525a:	601a      	str	r2, [r3, #0]
 800525c:	f3bf 8f4f 	dsb	sy
 8005260:	f3bf 8f6f 	isb	sy
 8005264:	e75f      	b.n	8005126 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005266:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005268:	f000 f8b6 	bl	80053d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800526c:	f000 fc42 	bl	8005af4 <xTaskResumeAll>
 8005270:	e759      	b.n	8005126 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005272:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005274:	f000 f8b0 	bl	80053d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005278:	f000 fc3c 	bl	8005af4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800527c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800527e:	f000 f8fd 	bl	800547c <prvIsQueueEmpty>
 8005282:	4603      	mov	r3, r0
 8005284:	2b00      	cmp	r3, #0
 8005286:	f43f af4e 	beq.w	8005126 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 800528a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800528c:	4618      	mov	r0, r3
 800528e:	f003 fc35 	bl	8008afc <SEGGER_SYSVIEW_ShrinkId>
 8005292:	4604      	mov	r4, r0
 8005294:	2000      	movs	r0, #0
 8005296:	f003 fc31 	bl	8008afc <SEGGER_SYSVIEW_ShrinkId>
 800529a:	4602      	mov	r2, r0
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2101      	movs	r1, #1
 80052a0:	9100      	str	r1, [sp, #0]
 80052a2:	4621      	mov	r1, r4
 80052a4:	205c      	movs	r0, #92	; 0x5c
 80052a6:	f002 ffe3 	bl	8008270 <SEGGER_SYSVIEW_RecordU32x4>
				return errQUEUE_EMPTY;
 80052aa:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80052ac:	4618      	mov	r0, r3
 80052ae:	3734      	adds	r7, #52	; 0x34
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bd90      	pop	{r4, r7, pc}
 80052b4:	e000ed04 	.word	0xe000ed04

080052b8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b086      	sub	sp, #24
 80052bc:	af00      	add	r7, sp, #0
 80052be:	60f8      	str	r0, [r7, #12]
 80052c0:	60b9      	str	r1, [r7, #8]
 80052c2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80052c4:	2300      	movs	r3, #0
 80052c6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052cc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d10d      	bne.n	80052f2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d14d      	bne.n	800537a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	4618      	mov	r0, r3
 80052e4:	f001 f87a 	bl	80063dc <xTaskPriorityDisinherit>
 80052e8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	2200      	movs	r2, #0
 80052ee:	609a      	str	r2, [r3, #8]
 80052f0:	e043      	b.n	800537a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d119      	bne.n	800532c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	6858      	ldr	r0, [r3, #4]
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005300:	461a      	mov	r2, r3
 8005302:	68b9      	ldr	r1, [r7, #8]
 8005304:	f003 fd7a 	bl	8008dfc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	685a      	ldr	r2, [r3, #4]
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005310:	441a      	add	r2, r3
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	685a      	ldr	r2, [r3, #4]
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	689b      	ldr	r3, [r3, #8]
 800531e:	429a      	cmp	r2, r3
 8005320:	d32b      	bcc.n	800537a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681a      	ldr	r2, [r3, #0]
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	605a      	str	r2, [r3, #4]
 800532a:	e026      	b.n	800537a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	68d8      	ldr	r0, [r3, #12]
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005334:	461a      	mov	r2, r3
 8005336:	68b9      	ldr	r1, [r7, #8]
 8005338:	f003 fd60 	bl	8008dfc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	68da      	ldr	r2, [r3, #12]
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005344:	425b      	negs	r3, r3
 8005346:	441a      	add	r2, r3
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	68da      	ldr	r2, [r3, #12]
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	429a      	cmp	r2, r3
 8005356:	d207      	bcs.n	8005368 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	689a      	ldr	r2, [r3, #8]
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005360:	425b      	negs	r3, r3
 8005362:	441a      	add	r2, r3
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2b02      	cmp	r3, #2
 800536c:	d105      	bne.n	800537a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800536e:	693b      	ldr	r3, [r7, #16]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d002      	beq.n	800537a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	3b01      	subs	r3, #1
 8005378:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	1c5a      	adds	r2, r3, #1
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005382:	697b      	ldr	r3, [r7, #20]
}
 8005384:	4618      	mov	r0, r3
 8005386:	3718      	adds	r7, #24
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}

0800538c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b082      	sub	sp, #8
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
 8005394:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800539a:	2b00      	cmp	r3, #0
 800539c:	d018      	beq.n	80053d0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	68da      	ldr	r2, [r3, #12]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a6:	441a      	add	r2, r3
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	68da      	ldr	r2, [r3, #12]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	429a      	cmp	r2, r3
 80053b6:	d303      	bcc.n	80053c0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681a      	ldr	r2, [r3, #0]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	68d9      	ldr	r1, [r3, #12]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053c8:	461a      	mov	r2, r3
 80053ca:	6838      	ldr	r0, [r7, #0]
 80053cc:	f003 fd16 	bl	8008dfc <memcpy>
	}
}
 80053d0:	bf00      	nop
 80053d2:	3708      	adds	r7, #8
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bd80      	pop	{r7, pc}

080053d8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b084      	sub	sp, #16
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80053e0:	f001 fd34 	bl	8006e4c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80053ea:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80053ec:	e011      	b.n	8005412 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d012      	beq.n	800541c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	3324      	adds	r3, #36	; 0x24
 80053fa:	4618      	mov	r0, r3
 80053fc:	f000 fdca 	bl	8005f94 <xTaskRemoveFromEventList>
 8005400:	4603      	mov	r3, r0
 8005402:	2b00      	cmp	r3, #0
 8005404:	d001      	beq.n	800540a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005406:	f000 feab 	bl	8006160 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800540a:	7bfb      	ldrb	r3, [r7, #15]
 800540c:	3b01      	subs	r3, #1
 800540e:	b2db      	uxtb	r3, r3
 8005410:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005412:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005416:	2b00      	cmp	r3, #0
 8005418:	dce9      	bgt.n	80053ee <prvUnlockQueue+0x16>
 800541a:	e000      	b.n	800541e <prvUnlockQueue+0x46>
					break;
 800541c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	22ff      	movs	r2, #255	; 0xff
 8005422:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005426:	f001 fd45 	bl	8006eb4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800542a:	f001 fd0f 	bl	8006e4c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005434:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005436:	e011      	b.n	800545c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	691b      	ldr	r3, [r3, #16]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d012      	beq.n	8005466 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	3310      	adds	r3, #16
 8005444:	4618      	mov	r0, r3
 8005446:	f000 fda5 	bl	8005f94 <xTaskRemoveFromEventList>
 800544a:	4603      	mov	r3, r0
 800544c:	2b00      	cmp	r3, #0
 800544e:	d001      	beq.n	8005454 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005450:	f000 fe86 	bl	8006160 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005454:	7bbb      	ldrb	r3, [r7, #14]
 8005456:	3b01      	subs	r3, #1
 8005458:	b2db      	uxtb	r3, r3
 800545a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800545c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005460:	2b00      	cmp	r3, #0
 8005462:	dce9      	bgt.n	8005438 <prvUnlockQueue+0x60>
 8005464:	e000      	b.n	8005468 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005466:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	22ff      	movs	r2, #255	; 0xff
 800546c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005470:	f001 fd20 	bl	8006eb4 <vPortExitCritical>
}
 8005474:	bf00      	nop
 8005476:	3710      	adds	r7, #16
 8005478:	46bd      	mov	sp, r7
 800547a:	bd80      	pop	{r7, pc}

0800547c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b084      	sub	sp, #16
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005484:	f001 fce2 	bl	8006e4c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800548c:	2b00      	cmp	r3, #0
 800548e:	d102      	bne.n	8005496 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005490:	2301      	movs	r3, #1
 8005492:	60fb      	str	r3, [r7, #12]
 8005494:	e001      	b.n	800549a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005496:	2300      	movs	r3, #0
 8005498:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800549a:	f001 fd0b 	bl	8006eb4 <vPortExitCritical>

	return xReturn;
 800549e:	68fb      	ldr	r3, [r7, #12]
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	3710      	adds	r7, #16
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd80      	pop	{r7, pc}

080054a8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b084      	sub	sp, #16
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80054b0:	f001 fccc 	bl	8006e4c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054bc:	429a      	cmp	r2, r3
 80054be:	d102      	bne.n	80054c6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80054c0:	2301      	movs	r3, #1
 80054c2:	60fb      	str	r3, [r7, #12]
 80054c4:	e001      	b.n	80054ca <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80054c6:	2300      	movs	r3, #0
 80054c8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80054ca:	f001 fcf3 	bl	8006eb4 <vPortExitCritical>

	return xReturn;
 80054ce:	68fb      	ldr	r3, [r7, #12]
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	3710      	adds	r7, #16
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bd80      	pop	{r7, pc}

080054d8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b084      	sub	sp, #16
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
 80054e0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80054e2:	2300      	movs	r3, #0
 80054e4:	60fb      	str	r3, [r7, #12]
 80054e6:	e01e      	b.n	8005526 <vQueueAddToRegistry+0x4e>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80054e8:	4a13      	ldr	r2, [pc, #76]	; (8005538 <vQueueAddToRegistry+0x60>)
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d115      	bne.n	8005520 <vQueueAddToRegistry+0x48>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80054f4:	4910      	ldr	r1, [pc, #64]	; (8005538 <vQueueAddToRegistry+0x60>)
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	683a      	ldr	r2, [r7, #0]
 80054fa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80054fe:	4a0e      	ldr	r2, [pc, #56]	; (8005538 <vQueueAddToRegistry+0x60>)
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	00db      	lsls	r3, r3, #3
 8005504:	4413      	add	r3, r2
 8005506:	687a      	ldr	r2, [r7, #4]
 8005508:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	4618      	mov	r0, r3
 800550e:	f003 faf5 	bl	8008afc <SEGGER_SYSVIEW_ShrinkId>
 8005512:	4601      	mov	r1, r0
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	461a      	mov	r2, r3
 8005518:	2071      	movs	r0, #113	; 0x71
 800551a:	f002 fdd9 	bl	80080d0 <SEGGER_SYSVIEW_RecordU32x2>
				break;
 800551e:	e006      	b.n	800552e <vQueueAddToRegistry+0x56>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	3301      	adds	r3, #1
 8005524:	60fb      	str	r3, [r7, #12]
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2b07      	cmp	r3, #7
 800552a:	d9dd      	bls.n	80054e8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800552c:	bf00      	nop
 800552e:	bf00      	nop
 8005530:	3710      	adds	r7, #16
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}
 8005536:	bf00      	nop
 8005538:	200012f0 	.word	0x200012f0

0800553c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800553c:	b580      	push	{r7, lr}
 800553e:	b086      	sub	sp, #24
 8005540:	af00      	add	r7, sp, #0
 8005542:	60f8      	str	r0, [r7, #12]
 8005544:	60b9      	str	r1, [r7, #8]
 8005546:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800554c:	f001 fc7e 	bl	8006e4c <vPortEnterCritical>
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005556:	b25b      	sxtb	r3, r3
 8005558:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800555c:	d103      	bne.n	8005566 <vQueueWaitForMessageRestricted+0x2a>
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	2200      	movs	r2, #0
 8005562:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800556c:	b25b      	sxtb	r3, r3
 800556e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005572:	d103      	bne.n	800557c <vQueueWaitForMessageRestricted+0x40>
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	2200      	movs	r2, #0
 8005578:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800557c:	f001 fc9a 	bl	8006eb4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005584:	2b00      	cmp	r3, #0
 8005586:	d106      	bne.n	8005596 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	3324      	adds	r3, #36	; 0x24
 800558c:	687a      	ldr	r2, [r7, #4]
 800558e:	68b9      	ldr	r1, [r7, #8]
 8005590:	4618      	mov	r0, r3
 8005592:	f000 fccf 	bl	8005f34 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005596:	6978      	ldr	r0, [r7, #20]
 8005598:	f7ff ff1e 	bl	80053d8 <prvUnlockQueue>
	}
 800559c:	bf00      	nop
 800559e:	3718      	adds	r7, #24
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bd80      	pop	{r7, pc}

080055a4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b08e      	sub	sp, #56	; 0x38
 80055a8:	af04      	add	r7, sp, #16
 80055aa:	60f8      	str	r0, [r7, #12]
 80055ac:	60b9      	str	r1, [r7, #8]
 80055ae:	607a      	str	r2, [r7, #4]
 80055b0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80055b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d10c      	bne.n	80055d2 <xTaskCreateStatic+0x2e>
	__asm volatile
 80055b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055bc:	b672      	cpsid	i
 80055be:	f383 8811 	msr	BASEPRI, r3
 80055c2:	f3bf 8f6f 	isb	sy
 80055c6:	f3bf 8f4f 	dsb	sy
 80055ca:	b662      	cpsie	i
 80055cc:	623b      	str	r3, [r7, #32]
}
 80055ce:	bf00      	nop
 80055d0:	e7fe      	b.n	80055d0 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 80055d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d10c      	bne.n	80055f2 <xTaskCreateStatic+0x4e>
	__asm volatile
 80055d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055dc:	b672      	cpsid	i
 80055de:	f383 8811 	msr	BASEPRI, r3
 80055e2:	f3bf 8f6f 	isb	sy
 80055e6:	f3bf 8f4f 	dsb	sy
 80055ea:	b662      	cpsie	i
 80055ec:	61fb      	str	r3, [r7, #28]
}
 80055ee:	bf00      	nop
 80055f0:	e7fe      	b.n	80055f0 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80055f2:	23bc      	movs	r3, #188	; 0xbc
 80055f4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	2bbc      	cmp	r3, #188	; 0xbc
 80055fa:	d00c      	beq.n	8005616 <xTaskCreateStatic+0x72>
	__asm volatile
 80055fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005600:	b672      	cpsid	i
 8005602:	f383 8811 	msr	BASEPRI, r3
 8005606:	f3bf 8f6f 	isb	sy
 800560a:	f3bf 8f4f 	dsb	sy
 800560e:	b662      	cpsie	i
 8005610:	61bb      	str	r3, [r7, #24]
}
 8005612:	bf00      	nop
 8005614:	e7fe      	b.n	8005614 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005616:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800561a:	2b00      	cmp	r3, #0
 800561c:	d01e      	beq.n	800565c <xTaskCreateStatic+0xb8>
 800561e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005620:	2b00      	cmp	r3, #0
 8005622:	d01b      	beq.n	800565c <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005626:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800562a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800562c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800562e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005630:	2202      	movs	r2, #2
 8005632:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005636:	2300      	movs	r3, #0
 8005638:	9303      	str	r3, [sp, #12]
 800563a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800563c:	9302      	str	r3, [sp, #8]
 800563e:	f107 0314 	add.w	r3, r7, #20
 8005642:	9301      	str	r3, [sp, #4]
 8005644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005646:	9300      	str	r3, [sp, #0]
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	687a      	ldr	r2, [r7, #4]
 800564c:	68b9      	ldr	r1, [r7, #8]
 800564e:	68f8      	ldr	r0, [r7, #12]
 8005650:	f000 f850 	bl	80056f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005654:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005656:	f000 f8f5 	bl	8005844 <prvAddNewTaskToReadyList>
 800565a:	e001      	b.n	8005660 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800565c:	2300      	movs	r3, #0
 800565e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005660:	697b      	ldr	r3, [r7, #20]
	}
 8005662:	4618      	mov	r0, r3
 8005664:	3728      	adds	r7, #40	; 0x28
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}

0800566a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800566a:	b580      	push	{r7, lr}
 800566c:	b08c      	sub	sp, #48	; 0x30
 800566e:	af04      	add	r7, sp, #16
 8005670:	60f8      	str	r0, [r7, #12]
 8005672:	60b9      	str	r1, [r7, #8]
 8005674:	603b      	str	r3, [r7, #0]
 8005676:	4613      	mov	r3, r2
 8005678:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800567a:	88fb      	ldrh	r3, [r7, #6]
 800567c:	009b      	lsls	r3, r3, #2
 800567e:	4618      	mov	r0, r3
 8005680:	f001 fd10 	bl	80070a4 <pvPortMalloc>
 8005684:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d00e      	beq.n	80056aa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800568c:	20bc      	movs	r0, #188	; 0xbc
 800568e:	f001 fd09 	bl	80070a4 <pvPortMalloc>
 8005692:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005694:	69fb      	ldr	r3, [r7, #28]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d003      	beq.n	80056a2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800569a:	69fb      	ldr	r3, [r7, #28]
 800569c:	697a      	ldr	r2, [r7, #20]
 800569e:	631a      	str	r2, [r3, #48]	; 0x30
 80056a0:	e005      	b.n	80056ae <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80056a2:	6978      	ldr	r0, [r7, #20]
 80056a4:	f001 fdc8 	bl	8007238 <vPortFree>
 80056a8:	e001      	b.n	80056ae <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80056aa:	2300      	movs	r3, #0
 80056ac:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80056ae:	69fb      	ldr	r3, [r7, #28]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d017      	beq.n	80056e4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80056b4:	69fb      	ldr	r3, [r7, #28]
 80056b6:	2200      	movs	r2, #0
 80056b8:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80056bc:	88fa      	ldrh	r2, [r7, #6]
 80056be:	2300      	movs	r3, #0
 80056c0:	9303      	str	r3, [sp, #12]
 80056c2:	69fb      	ldr	r3, [r7, #28]
 80056c4:	9302      	str	r3, [sp, #8]
 80056c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056c8:	9301      	str	r3, [sp, #4]
 80056ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056cc:	9300      	str	r3, [sp, #0]
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	68b9      	ldr	r1, [r7, #8]
 80056d2:	68f8      	ldr	r0, [r7, #12]
 80056d4:	f000 f80e 	bl	80056f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80056d8:	69f8      	ldr	r0, [r7, #28]
 80056da:	f000 f8b3 	bl	8005844 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80056de:	2301      	movs	r3, #1
 80056e0:	61bb      	str	r3, [r7, #24]
 80056e2:	e002      	b.n	80056ea <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80056e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80056e8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80056ea:	69bb      	ldr	r3, [r7, #24]
	}
 80056ec:	4618      	mov	r0, r3
 80056ee:	3720      	adds	r7, #32
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}

080056f4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b088      	sub	sp, #32
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	60f8      	str	r0, [r7, #12]
 80056fc:	60b9      	str	r1, [r7, #8]
 80056fe:	607a      	str	r2, [r7, #4]
 8005700:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005704:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	009b      	lsls	r3, r3, #2
 800570a:	461a      	mov	r2, r3
 800570c:	21a5      	movs	r1, #165	; 0xa5
 800570e:	f003 fb83 	bl	8008e18 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005714:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005716:	6879      	ldr	r1, [r7, #4]
 8005718:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800571c:	440b      	add	r3, r1
 800571e:	009b      	lsls	r3, r3, #2
 8005720:	4413      	add	r3, r2
 8005722:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005724:	69bb      	ldr	r3, [r7, #24]
 8005726:	f023 0307 	bic.w	r3, r3, #7
 800572a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800572c:	69bb      	ldr	r3, [r7, #24]
 800572e:	f003 0307 	and.w	r3, r3, #7
 8005732:	2b00      	cmp	r3, #0
 8005734:	d00c      	beq.n	8005750 <prvInitialiseNewTask+0x5c>
	__asm volatile
 8005736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800573a:	b672      	cpsid	i
 800573c:	f383 8811 	msr	BASEPRI, r3
 8005740:	f3bf 8f6f 	isb	sy
 8005744:	f3bf 8f4f 	dsb	sy
 8005748:	b662      	cpsie	i
 800574a:	617b      	str	r3, [r7, #20]
}
 800574c:	bf00      	nop
 800574e:	e7fe      	b.n	800574e <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d01f      	beq.n	8005796 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005756:	2300      	movs	r3, #0
 8005758:	61fb      	str	r3, [r7, #28]
 800575a:	e012      	b.n	8005782 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800575c:	68ba      	ldr	r2, [r7, #8]
 800575e:	69fb      	ldr	r3, [r7, #28]
 8005760:	4413      	add	r3, r2
 8005762:	7819      	ldrb	r1, [r3, #0]
 8005764:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005766:	69fb      	ldr	r3, [r7, #28]
 8005768:	4413      	add	r3, r2
 800576a:	3334      	adds	r3, #52	; 0x34
 800576c:	460a      	mov	r2, r1
 800576e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005770:	68ba      	ldr	r2, [r7, #8]
 8005772:	69fb      	ldr	r3, [r7, #28]
 8005774:	4413      	add	r3, r2
 8005776:	781b      	ldrb	r3, [r3, #0]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d006      	beq.n	800578a <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800577c:	69fb      	ldr	r3, [r7, #28]
 800577e:	3301      	adds	r3, #1
 8005780:	61fb      	str	r3, [r7, #28]
 8005782:	69fb      	ldr	r3, [r7, #28]
 8005784:	2b0f      	cmp	r3, #15
 8005786:	d9e9      	bls.n	800575c <prvInitialiseNewTask+0x68>
 8005788:	e000      	b.n	800578c <prvInitialiseNewTask+0x98>
			{
				break;
 800578a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800578c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800578e:	2200      	movs	r2, #0
 8005790:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005794:	e003      	b.n	800579e <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005798:	2200      	movs	r2, #0
 800579a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800579e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057a0:	2b37      	cmp	r3, #55	; 0x37
 80057a2:	d901      	bls.n	80057a8 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80057a4:	2337      	movs	r3, #55	; 0x37
 80057a6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80057a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80057ac:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80057ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80057b2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80057b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057b6:	2200      	movs	r2, #0
 80057b8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80057ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057bc:	3304      	adds	r3, #4
 80057be:	4618      	mov	r0, r3
 80057c0:	f7ff f8d8 	bl	8004974 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80057c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057c6:	3318      	adds	r3, #24
 80057c8:	4618      	mov	r0, r3
 80057ca:	f7ff f8d3 	bl	8004974 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80057ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057d2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057d6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80057da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057dc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80057de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057e2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80057e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057e6:	2200      	movs	r2, #0
 80057e8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80057ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ee:	2200      	movs	r2, #0
 80057f0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80057f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057f6:	3354      	adds	r3, #84	; 0x54
 80057f8:	2260      	movs	r2, #96	; 0x60
 80057fa:	2100      	movs	r1, #0
 80057fc:	4618      	mov	r0, r3
 80057fe:	f003 fb0b 	bl	8008e18 <memset>
 8005802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005804:	4a0c      	ldr	r2, [pc, #48]	; (8005838 <prvInitialiseNewTask+0x144>)
 8005806:	659a      	str	r2, [r3, #88]	; 0x58
 8005808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800580a:	4a0c      	ldr	r2, [pc, #48]	; (800583c <prvInitialiseNewTask+0x148>)
 800580c:	65da      	str	r2, [r3, #92]	; 0x5c
 800580e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005810:	4a0b      	ldr	r2, [pc, #44]	; (8005840 <prvInitialiseNewTask+0x14c>)
 8005812:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005814:	683a      	ldr	r2, [r7, #0]
 8005816:	68f9      	ldr	r1, [r7, #12]
 8005818:	69b8      	ldr	r0, [r7, #24]
 800581a:	f001 fa09 	bl	8006c30 <pxPortInitialiseStack>
 800581e:	4602      	mov	r2, r0
 8005820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005822:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005826:	2b00      	cmp	r3, #0
 8005828:	d002      	beq.n	8005830 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800582a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800582c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800582e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005830:	bf00      	nop
 8005832:	3720      	adds	r7, #32
 8005834:	46bd      	mov	sp, r7
 8005836:	bd80      	pop	{r7, pc}
 8005838:	080091ac 	.word	0x080091ac
 800583c:	080091cc 	.word	0x080091cc
 8005840:	0800918c 	.word	0x0800918c

08005844 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005844:	b5b0      	push	{r4, r5, r7, lr}
 8005846:	b084      	sub	sp, #16
 8005848:	af02      	add	r7, sp, #8
 800584a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800584c:	f001 fafe 	bl	8006e4c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005850:	4b3c      	ldr	r3, [pc, #240]	; (8005944 <prvAddNewTaskToReadyList+0x100>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	3301      	adds	r3, #1
 8005856:	4a3b      	ldr	r2, [pc, #236]	; (8005944 <prvAddNewTaskToReadyList+0x100>)
 8005858:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800585a:	4b3b      	ldr	r3, [pc, #236]	; (8005948 <prvAddNewTaskToReadyList+0x104>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d109      	bne.n	8005876 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005862:	4a39      	ldr	r2, [pc, #228]	; (8005948 <prvAddNewTaskToReadyList+0x104>)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005868:	4b36      	ldr	r3, [pc, #216]	; (8005944 <prvAddNewTaskToReadyList+0x100>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	2b01      	cmp	r3, #1
 800586e:	d110      	bne.n	8005892 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005870:	f000 fc9a 	bl	80061a8 <prvInitialiseTaskLists>
 8005874:	e00d      	b.n	8005892 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005876:	4b35      	ldr	r3, [pc, #212]	; (800594c <prvAddNewTaskToReadyList+0x108>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d109      	bne.n	8005892 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800587e:	4b32      	ldr	r3, [pc, #200]	; (8005948 <prvAddNewTaskToReadyList+0x104>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005888:	429a      	cmp	r2, r3
 800588a:	d802      	bhi.n	8005892 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800588c:	4a2e      	ldr	r2, [pc, #184]	; (8005948 <prvAddNewTaskToReadyList+0x104>)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005892:	4b2f      	ldr	r3, [pc, #188]	; (8005950 <prvAddNewTaskToReadyList+0x10c>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	3301      	adds	r3, #1
 8005898:	4a2d      	ldr	r2, [pc, #180]	; (8005950 <prvAddNewTaskToReadyList+0x10c>)
 800589a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800589c:	4b2c      	ldr	r3, [pc, #176]	; (8005950 <prvAddNewTaskToReadyList+0x10c>)
 800589e:	681a      	ldr	r2, [r3, #0]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d016      	beq.n	80058d8 <prvAddNewTaskToReadyList+0x94>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	4618      	mov	r0, r3
 80058ae:	f003 f859 	bl	8008964 <SEGGER_SYSVIEW_OnTaskCreate>
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058c2:	461d      	mov	r5, r3
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	461c      	mov	r4, r3
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ce:	1ae3      	subs	r3, r4, r3
 80058d0:	9300      	str	r3, [sp, #0]
 80058d2:	462b      	mov	r3, r5
 80058d4:	f001 fe90 	bl	80075f8 <SYSVIEW_AddTask>

		prvAddTaskToReadyList( pxNewTCB );
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	4618      	mov	r0, r3
 80058dc:	f003 f8ca 	bl	8008a74 <SEGGER_SYSVIEW_OnTaskStartReady>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058e4:	4b1b      	ldr	r3, [pc, #108]	; (8005954 <prvAddNewTaskToReadyList+0x110>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	429a      	cmp	r2, r3
 80058ea:	d903      	bls.n	80058f4 <prvAddNewTaskToReadyList+0xb0>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058f0:	4a18      	ldr	r2, [pc, #96]	; (8005954 <prvAddNewTaskToReadyList+0x110>)
 80058f2:	6013      	str	r3, [r2, #0]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058f8:	4613      	mov	r3, r2
 80058fa:	009b      	lsls	r3, r3, #2
 80058fc:	4413      	add	r3, r2
 80058fe:	009b      	lsls	r3, r3, #2
 8005900:	4a15      	ldr	r2, [pc, #84]	; (8005958 <prvAddNewTaskToReadyList+0x114>)
 8005902:	441a      	add	r2, r3
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	3304      	adds	r3, #4
 8005908:	4619      	mov	r1, r3
 800590a:	4610      	mov	r0, r2
 800590c:	f7ff f83f 	bl	800498e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005910:	f001 fad0 	bl	8006eb4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005914:	4b0d      	ldr	r3, [pc, #52]	; (800594c <prvAddNewTaskToReadyList+0x108>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d00e      	beq.n	800593a <prvAddNewTaskToReadyList+0xf6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800591c:	4b0a      	ldr	r3, [pc, #40]	; (8005948 <prvAddNewTaskToReadyList+0x104>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005926:	429a      	cmp	r2, r3
 8005928:	d207      	bcs.n	800593a <prvAddNewTaskToReadyList+0xf6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800592a:	4b0c      	ldr	r3, [pc, #48]	; (800595c <prvAddNewTaskToReadyList+0x118>)
 800592c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005930:	601a      	str	r2, [r3, #0]
 8005932:	f3bf 8f4f 	dsb	sy
 8005936:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800593a:	bf00      	nop
 800593c:	3708      	adds	r7, #8
 800593e:	46bd      	mov	sp, r7
 8005940:	bdb0      	pop	{r4, r5, r7, pc}
 8005942:	bf00      	nop
 8005944:	20001804 	.word	0x20001804
 8005948:	20001330 	.word	0x20001330
 800594c:	20001810 	.word	0x20001810
 8005950:	20001820 	.word	0x20001820
 8005954:	2000180c 	.word	0x2000180c
 8005958:	20001334 	.word	0x20001334
 800595c:	e000ed04 	.word	0xe000ed04

08005960 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005960:	b580      	push	{r7, lr}
 8005962:	b084      	sub	sp, #16
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005968:	2300      	movs	r3, #0
 800596a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d01d      	beq.n	80059ae <vTaskDelay+0x4e>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005972:	4b16      	ldr	r3, [pc, #88]	; (80059cc <vTaskDelay+0x6c>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d00c      	beq.n	8005994 <vTaskDelay+0x34>
	__asm volatile
 800597a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800597e:	b672      	cpsid	i
 8005980:	f383 8811 	msr	BASEPRI, r3
 8005984:	f3bf 8f6f 	isb	sy
 8005988:	f3bf 8f4f 	dsb	sy
 800598c:	b662      	cpsie	i
 800598e:	60bb      	str	r3, [r7, #8]
}
 8005990:	bf00      	nop
 8005992:	e7fe      	b.n	8005992 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8005994:	f000 f8a0 	bl	8005ad8 <vTaskSuspendAll>
			{
				traceTASK_DELAY();
 8005998:	6879      	ldr	r1, [r7, #4]
 800599a:	2023      	movs	r0, #35	; 0x23
 800599c:	f002 fb5c 	bl	8008058 <SEGGER_SYSVIEW_RecordU32>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80059a0:	2100      	movs	r1, #0
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	f000 fd94 	bl	80064d0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80059a8:	f000 f8a4 	bl	8005af4 <xTaskResumeAll>
 80059ac:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d107      	bne.n	80059c4 <vTaskDelay+0x64>
		{
			portYIELD_WITHIN_API();
 80059b4:	4b06      	ldr	r3, [pc, #24]	; (80059d0 <vTaskDelay+0x70>)
 80059b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059ba:	601a      	str	r2, [r3, #0]
 80059bc:	f3bf 8f4f 	dsb	sy
 80059c0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80059c4:	bf00      	nop
 80059c6:	3710      	adds	r7, #16
 80059c8:	46bd      	mov	sp, r7
 80059ca:	bd80      	pop	{r7, pc}
 80059cc:	2000182c 	.word	0x2000182c
 80059d0:	e000ed04 	.word	0xe000ed04

080059d4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b08a      	sub	sp, #40	; 0x28
 80059d8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80059da:	2300      	movs	r3, #0
 80059dc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80059de:	2300      	movs	r3, #0
 80059e0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80059e2:	463a      	mov	r2, r7
 80059e4:	1d39      	adds	r1, r7, #4
 80059e6:	f107 0308 	add.w	r3, r7, #8
 80059ea:	4618      	mov	r0, r3
 80059ec:	f7fe ff6e 	bl	80048cc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80059f0:	6839      	ldr	r1, [r7, #0]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	68ba      	ldr	r2, [r7, #8]
 80059f6:	9202      	str	r2, [sp, #8]
 80059f8:	9301      	str	r3, [sp, #4]
 80059fa:	2300      	movs	r3, #0
 80059fc:	9300      	str	r3, [sp, #0]
 80059fe:	2300      	movs	r3, #0
 8005a00:	460a      	mov	r2, r1
 8005a02:	492d      	ldr	r1, [pc, #180]	; (8005ab8 <vTaskStartScheduler+0xe4>)
 8005a04:	482d      	ldr	r0, [pc, #180]	; (8005abc <vTaskStartScheduler+0xe8>)
 8005a06:	f7ff fdcd 	bl	80055a4 <xTaskCreateStatic>
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	4a2c      	ldr	r2, [pc, #176]	; (8005ac0 <vTaskStartScheduler+0xec>)
 8005a0e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005a10:	4b2b      	ldr	r3, [pc, #172]	; (8005ac0 <vTaskStartScheduler+0xec>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d002      	beq.n	8005a1e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005a18:	2301      	movs	r3, #1
 8005a1a:	617b      	str	r3, [r7, #20]
 8005a1c:	e001      	b.n	8005a22 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005a1e:	2300      	movs	r3, #0
 8005a20:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	2b01      	cmp	r3, #1
 8005a26:	d102      	bne.n	8005a2e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005a28:	f000 fda6 	bl	8006578 <xTimerCreateTimerTask>
 8005a2c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	2b01      	cmp	r3, #1
 8005a32:	d12b      	bne.n	8005a8c <vTaskStartScheduler+0xb8>
	__asm volatile
 8005a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a38:	b672      	cpsid	i
 8005a3a:	f383 8811 	msr	BASEPRI, r3
 8005a3e:	f3bf 8f6f 	isb	sy
 8005a42:	f3bf 8f4f 	dsb	sy
 8005a46:	b662      	cpsie	i
 8005a48:	613b      	str	r3, [r7, #16]
}
 8005a4a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005a4c:	4b1d      	ldr	r3, [pc, #116]	; (8005ac4 <vTaskStartScheduler+0xf0>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	3354      	adds	r3, #84	; 0x54
 8005a52:	4a1d      	ldr	r2, [pc, #116]	; (8005ac8 <vTaskStartScheduler+0xf4>)
 8005a54:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005a56:	4b1d      	ldr	r3, [pc, #116]	; (8005acc <vTaskStartScheduler+0xf8>)
 8005a58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005a5c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005a5e:	4b1c      	ldr	r3, [pc, #112]	; (8005ad0 <vTaskStartScheduler+0xfc>)
 8005a60:	2201      	movs	r2, #1
 8005a62:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005a64:	4b1b      	ldr	r3, [pc, #108]	; (8005ad4 <vTaskStartScheduler+0x100>)
 8005a66:	2200      	movs	r2, #0
 8005a68:	601a      	str	r2, [r3, #0]
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		traceTASK_SWITCHED_IN();
 8005a6a:	4b16      	ldr	r3, [pc, #88]	; (8005ac4 <vTaskStartScheduler+0xf0>)
 8005a6c:	681a      	ldr	r2, [r3, #0]
 8005a6e:	4b14      	ldr	r3, [pc, #80]	; (8005ac0 <vTaskStartScheduler+0xec>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	429a      	cmp	r2, r3
 8005a74:	d102      	bne.n	8005a7c <vTaskStartScheduler+0xa8>
 8005a76:	f002 ff59 	bl	800892c <SEGGER_SYSVIEW_OnIdle>
 8005a7a:	e004      	b.n	8005a86 <vTaskStartScheduler+0xb2>
 8005a7c:	4b11      	ldr	r3, [pc, #68]	; (8005ac4 <vTaskStartScheduler+0xf0>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4618      	mov	r0, r3
 8005a82:	f002 ffb3 	bl	80089ec <SEGGER_SYSVIEW_OnTaskStartExec>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005a86:	f001 f963 	bl	8006d50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005a8a:	e010      	b.n	8005aae <vTaskStartScheduler+0xda>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005a8c:	697b      	ldr	r3, [r7, #20]
 8005a8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a92:	d10c      	bne.n	8005aae <vTaskStartScheduler+0xda>
	__asm volatile
 8005a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a98:	b672      	cpsid	i
 8005a9a:	f383 8811 	msr	BASEPRI, r3
 8005a9e:	f3bf 8f6f 	isb	sy
 8005aa2:	f3bf 8f4f 	dsb	sy
 8005aa6:	b662      	cpsie	i
 8005aa8:	60fb      	str	r3, [r7, #12]
}
 8005aaa:	bf00      	nop
 8005aac:	e7fe      	b.n	8005aac <vTaskStartScheduler+0xd8>
}
 8005aae:	bf00      	nop
 8005ab0:	3718      	adds	r7, #24
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}
 8005ab6:	bf00      	nop
 8005ab8:	08008ff4 	.word	0x08008ff4
 8005abc:	08006179 	.word	0x08006179
 8005ac0:	20001828 	.word	0x20001828
 8005ac4:	20001330 	.word	0x20001330
 8005ac8:	20000010 	.word	0x20000010
 8005acc:	20001824 	.word	0x20001824
 8005ad0:	20001810 	.word	0x20001810
 8005ad4:	20001808 	.word	0x20001808

08005ad8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005ad8:	b480      	push	{r7}
 8005ada:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005adc:	4b04      	ldr	r3, [pc, #16]	; (8005af0 <vTaskSuspendAll+0x18>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	3301      	adds	r3, #1
 8005ae2:	4a03      	ldr	r2, [pc, #12]	; (8005af0 <vTaskSuspendAll+0x18>)
 8005ae4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8005ae6:	bf00      	nop
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aee:	4770      	bx	lr
 8005af0:	2000182c 	.word	0x2000182c

08005af4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b084      	sub	sp, #16
 8005af8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005afa:	2300      	movs	r3, #0
 8005afc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005afe:	2300      	movs	r3, #0
 8005b00:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005b02:	4b45      	ldr	r3, [pc, #276]	; (8005c18 <xTaskResumeAll+0x124>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d10c      	bne.n	8005b24 <xTaskResumeAll+0x30>
	__asm volatile
 8005b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b0e:	b672      	cpsid	i
 8005b10:	f383 8811 	msr	BASEPRI, r3
 8005b14:	f3bf 8f6f 	isb	sy
 8005b18:	f3bf 8f4f 	dsb	sy
 8005b1c:	b662      	cpsie	i
 8005b1e:	603b      	str	r3, [r7, #0]
}
 8005b20:	bf00      	nop
 8005b22:	e7fe      	b.n	8005b22 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005b24:	f001 f992 	bl	8006e4c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005b28:	4b3b      	ldr	r3, [pc, #236]	; (8005c18 <xTaskResumeAll+0x124>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	3b01      	subs	r3, #1
 8005b2e:	4a3a      	ldr	r2, [pc, #232]	; (8005c18 <xTaskResumeAll+0x124>)
 8005b30:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b32:	4b39      	ldr	r3, [pc, #228]	; (8005c18 <xTaskResumeAll+0x124>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d166      	bne.n	8005c08 <xTaskResumeAll+0x114>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005b3a:	4b38      	ldr	r3, [pc, #224]	; (8005c1c <xTaskResumeAll+0x128>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d062      	beq.n	8005c08 <xTaskResumeAll+0x114>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005b42:	e033      	b.n	8005bac <xTaskResumeAll+0xb8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b44:	4b36      	ldr	r3, [pc, #216]	; (8005c20 <xTaskResumeAll+0x12c>)
 8005b46:	68db      	ldr	r3, [r3, #12]
 8005b48:	68db      	ldr	r3, [r3, #12]
 8005b4a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	3318      	adds	r3, #24
 8005b50:	4618      	mov	r0, r3
 8005b52:	f7fe ff79 	bl	8004a48 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	3304      	adds	r3, #4
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	f7fe ff74 	bl	8004a48 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	4618      	mov	r0, r3
 8005b64:	f002 ff86 	bl	8008a74 <SEGGER_SYSVIEW_OnTaskStartReady>
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b6c:	4b2d      	ldr	r3, [pc, #180]	; (8005c24 <xTaskResumeAll+0x130>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	429a      	cmp	r2, r3
 8005b72:	d903      	bls.n	8005b7c <xTaskResumeAll+0x88>
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b78:	4a2a      	ldr	r2, [pc, #168]	; (8005c24 <xTaskResumeAll+0x130>)
 8005b7a:	6013      	str	r3, [r2, #0]
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b80:	4613      	mov	r3, r2
 8005b82:	009b      	lsls	r3, r3, #2
 8005b84:	4413      	add	r3, r2
 8005b86:	009b      	lsls	r3, r3, #2
 8005b88:	4a27      	ldr	r2, [pc, #156]	; (8005c28 <xTaskResumeAll+0x134>)
 8005b8a:	441a      	add	r2, r3
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	3304      	adds	r3, #4
 8005b90:	4619      	mov	r1, r3
 8005b92:	4610      	mov	r0, r2
 8005b94:	f7fe fefb 	bl	800498e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b9c:	4b23      	ldr	r3, [pc, #140]	; (8005c2c <xTaskResumeAll+0x138>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ba2:	429a      	cmp	r2, r3
 8005ba4:	d302      	bcc.n	8005bac <xTaskResumeAll+0xb8>
					{
						xYieldPending = pdTRUE;
 8005ba6:	4b22      	ldr	r3, [pc, #136]	; (8005c30 <xTaskResumeAll+0x13c>)
 8005ba8:	2201      	movs	r2, #1
 8005baa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005bac:	4b1c      	ldr	r3, [pc, #112]	; (8005c20 <xTaskResumeAll+0x12c>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d1c7      	bne.n	8005b44 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d001      	beq.n	8005bbe <xTaskResumeAll+0xca>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005bba:	f000 fbd1 	bl	8006360 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005bbe:	4b1d      	ldr	r3, [pc, #116]	; (8005c34 <xTaskResumeAll+0x140>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d010      	beq.n	8005bec <xTaskResumeAll+0xf8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005bca:	f000 f859 	bl	8005c80 <xTaskIncrementTick>
 8005bce:	4603      	mov	r3, r0
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d002      	beq.n	8005bda <xTaskResumeAll+0xe6>
							{
								xYieldPending = pdTRUE;
 8005bd4:	4b16      	ldr	r3, [pc, #88]	; (8005c30 <xTaskResumeAll+0x13c>)
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	3b01      	subs	r3, #1
 8005bde:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d1f1      	bne.n	8005bca <xTaskResumeAll+0xd6>

						uxPendedTicks = 0;
 8005be6:	4b13      	ldr	r3, [pc, #76]	; (8005c34 <xTaskResumeAll+0x140>)
 8005be8:	2200      	movs	r2, #0
 8005bea:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005bec:	4b10      	ldr	r3, [pc, #64]	; (8005c30 <xTaskResumeAll+0x13c>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d009      	beq.n	8005c08 <xTaskResumeAll+0x114>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005bf8:	4b0f      	ldr	r3, [pc, #60]	; (8005c38 <xTaskResumeAll+0x144>)
 8005bfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bfe:	601a      	str	r2, [r3, #0]
 8005c00:	f3bf 8f4f 	dsb	sy
 8005c04:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005c08:	f001 f954 	bl	8006eb4 <vPortExitCritical>

	return xAlreadyYielded;
 8005c0c:	68bb      	ldr	r3, [r7, #8]
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	3710      	adds	r7, #16
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}
 8005c16:	bf00      	nop
 8005c18:	2000182c 	.word	0x2000182c
 8005c1c:	20001804 	.word	0x20001804
 8005c20:	200017c4 	.word	0x200017c4
 8005c24:	2000180c 	.word	0x2000180c
 8005c28:	20001334 	.word	0x20001334
 8005c2c:	20001330 	.word	0x20001330
 8005c30:	20001818 	.word	0x20001818
 8005c34:	20001814 	.word	0x20001814
 8005c38:	e000ed04 	.word	0xe000ed04

08005c3c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b083      	sub	sp, #12
 8005c40:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005c42:	4b05      	ldr	r3, [pc, #20]	; (8005c58 <xTaskGetTickCount+0x1c>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005c48:	687b      	ldr	r3, [r7, #4]
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	370c      	adds	r7, #12
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c54:	4770      	bx	lr
 8005c56:	bf00      	nop
 8005c58:	20001808 	.word	0x20001808

08005c5c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b082      	sub	sp, #8
 8005c60:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005c62:	f001 f9db 	bl	800701c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8005c66:	2300      	movs	r3, #0
 8005c68:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8005c6a:	4b04      	ldr	r3, [pc, #16]	; (8005c7c <xTaskGetTickCountFromISR+0x20>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005c70:	683b      	ldr	r3, [r7, #0]
}
 8005c72:	4618      	mov	r0, r3
 8005c74:	3708      	adds	r7, #8
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd80      	pop	{r7, pc}
 8005c7a:	bf00      	nop
 8005c7c:	20001808 	.word	0x20001808

08005c80 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b086      	sub	sp, #24
 8005c84:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005c86:	2300      	movs	r3, #0
 8005c88:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c8a:	4b52      	ldr	r3, [pc, #328]	; (8005dd4 <xTaskIncrementTick+0x154>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	f040 808f 	bne.w	8005db2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005c94:	4b50      	ldr	r3, [pc, #320]	; (8005dd8 <xTaskIncrementTick+0x158>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	3301      	adds	r3, #1
 8005c9a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005c9c:	4a4e      	ldr	r2, [pc, #312]	; (8005dd8 <xTaskIncrementTick+0x158>)
 8005c9e:	693b      	ldr	r3, [r7, #16]
 8005ca0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d122      	bne.n	8005cee <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8005ca8:	4b4c      	ldr	r3, [pc, #304]	; (8005ddc <xTaskIncrementTick+0x15c>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d00c      	beq.n	8005ccc <xTaskIncrementTick+0x4c>
	__asm volatile
 8005cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cb6:	b672      	cpsid	i
 8005cb8:	f383 8811 	msr	BASEPRI, r3
 8005cbc:	f3bf 8f6f 	isb	sy
 8005cc0:	f3bf 8f4f 	dsb	sy
 8005cc4:	b662      	cpsie	i
 8005cc6:	603b      	str	r3, [r7, #0]
}
 8005cc8:	bf00      	nop
 8005cca:	e7fe      	b.n	8005cca <xTaskIncrementTick+0x4a>
 8005ccc:	4b43      	ldr	r3, [pc, #268]	; (8005ddc <xTaskIncrementTick+0x15c>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	60fb      	str	r3, [r7, #12]
 8005cd2:	4b43      	ldr	r3, [pc, #268]	; (8005de0 <xTaskIncrementTick+0x160>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4a41      	ldr	r2, [pc, #260]	; (8005ddc <xTaskIncrementTick+0x15c>)
 8005cd8:	6013      	str	r3, [r2, #0]
 8005cda:	4a41      	ldr	r2, [pc, #260]	; (8005de0 <xTaskIncrementTick+0x160>)
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	6013      	str	r3, [r2, #0]
 8005ce0:	4b40      	ldr	r3, [pc, #256]	; (8005de4 <xTaskIncrementTick+0x164>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	3301      	adds	r3, #1
 8005ce6:	4a3f      	ldr	r2, [pc, #252]	; (8005de4 <xTaskIncrementTick+0x164>)
 8005ce8:	6013      	str	r3, [r2, #0]
 8005cea:	f000 fb39 	bl	8006360 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005cee:	4b3e      	ldr	r3, [pc, #248]	; (8005de8 <xTaskIncrementTick+0x168>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	693a      	ldr	r2, [r7, #16]
 8005cf4:	429a      	cmp	r2, r3
 8005cf6:	d34d      	bcc.n	8005d94 <xTaskIncrementTick+0x114>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005cf8:	4b38      	ldr	r3, [pc, #224]	; (8005ddc <xTaskIncrementTick+0x15c>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d104      	bne.n	8005d0c <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d02:	4b39      	ldr	r3, [pc, #228]	; (8005de8 <xTaskIncrementTick+0x168>)
 8005d04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005d08:	601a      	str	r2, [r3, #0]
					break;
 8005d0a:	e043      	b.n	8005d94 <xTaskIncrementTick+0x114>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d0c:	4b33      	ldr	r3, [pc, #204]	; (8005ddc <xTaskIncrementTick+0x15c>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	68db      	ldr	r3, [r3, #12]
 8005d12:	68db      	ldr	r3, [r3, #12]
 8005d14:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005d1c:	693a      	ldr	r2, [r7, #16]
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	429a      	cmp	r2, r3
 8005d22:	d203      	bcs.n	8005d2c <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005d24:	4a30      	ldr	r2, [pc, #192]	; (8005de8 <xTaskIncrementTick+0x168>)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005d2a:	e033      	b.n	8005d94 <xTaskIncrementTick+0x114>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	3304      	adds	r3, #4
 8005d30:	4618      	mov	r0, r3
 8005d32:	f7fe fe89 	bl	8004a48 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d004      	beq.n	8005d48 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	3318      	adds	r3, #24
 8005d42:	4618      	mov	r0, r3
 8005d44:	f7fe fe80 	bl	8004a48 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f002 fe92 	bl	8008a74 <SEGGER_SYSVIEW_OnTaskStartReady>
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d54:	4b25      	ldr	r3, [pc, #148]	; (8005dec <xTaskIncrementTick+0x16c>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	429a      	cmp	r2, r3
 8005d5a:	d903      	bls.n	8005d64 <xTaskIncrementTick+0xe4>
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d60:	4a22      	ldr	r2, [pc, #136]	; (8005dec <xTaskIncrementTick+0x16c>)
 8005d62:	6013      	str	r3, [r2, #0]
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d68:	4613      	mov	r3, r2
 8005d6a:	009b      	lsls	r3, r3, #2
 8005d6c:	4413      	add	r3, r2
 8005d6e:	009b      	lsls	r3, r3, #2
 8005d70:	4a1f      	ldr	r2, [pc, #124]	; (8005df0 <xTaskIncrementTick+0x170>)
 8005d72:	441a      	add	r2, r3
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	3304      	adds	r3, #4
 8005d78:	4619      	mov	r1, r3
 8005d7a:	4610      	mov	r0, r2
 8005d7c:	f7fe fe07 	bl	800498e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d84:	4b1b      	ldr	r3, [pc, #108]	; (8005df4 <xTaskIncrementTick+0x174>)
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d8a:	429a      	cmp	r2, r3
 8005d8c:	d3b4      	bcc.n	8005cf8 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8005d8e:	2301      	movs	r3, #1
 8005d90:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d92:	e7b1      	b.n	8005cf8 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005d94:	4b17      	ldr	r3, [pc, #92]	; (8005df4 <xTaskIncrementTick+0x174>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d9a:	4915      	ldr	r1, [pc, #84]	; (8005df0 <xTaskIncrementTick+0x170>)
 8005d9c:	4613      	mov	r3, r2
 8005d9e:	009b      	lsls	r3, r3, #2
 8005da0:	4413      	add	r3, r2
 8005da2:	009b      	lsls	r3, r3, #2
 8005da4:	440b      	add	r3, r1
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	2b01      	cmp	r3, #1
 8005daa:	d907      	bls.n	8005dbc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005dac:	2301      	movs	r3, #1
 8005dae:	617b      	str	r3, [r7, #20]
 8005db0:	e004      	b.n	8005dbc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005db2:	4b11      	ldr	r3, [pc, #68]	; (8005df8 <xTaskIncrementTick+0x178>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	3301      	adds	r3, #1
 8005db8:	4a0f      	ldr	r2, [pc, #60]	; (8005df8 <xTaskIncrementTick+0x178>)
 8005dba:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005dbc:	4b0f      	ldr	r3, [pc, #60]	; (8005dfc <xTaskIncrementTick+0x17c>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d001      	beq.n	8005dc8 <xTaskIncrementTick+0x148>
		{
			xSwitchRequired = pdTRUE;
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005dc8:	697b      	ldr	r3, [r7, #20]
}
 8005dca:	4618      	mov	r0, r3
 8005dcc:	3718      	adds	r7, #24
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd80      	pop	{r7, pc}
 8005dd2:	bf00      	nop
 8005dd4:	2000182c 	.word	0x2000182c
 8005dd8:	20001808 	.word	0x20001808
 8005ddc:	200017bc 	.word	0x200017bc
 8005de0:	200017c0 	.word	0x200017c0
 8005de4:	2000181c 	.word	0x2000181c
 8005de8:	20001824 	.word	0x20001824
 8005dec:	2000180c 	.word	0x2000180c
 8005df0:	20001334 	.word	0x20001334
 8005df4:	20001330 	.word	0x20001330
 8005df8:	20001814 	.word	0x20001814
 8005dfc:	20001818 	.word	0x20001818

08005e00 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b084      	sub	sp, #16
 8005e04:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005e06:	4b31      	ldr	r3, [pc, #196]	; (8005ecc <vTaskSwitchContext+0xcc>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d003      	beq.n	8005e16 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005e0e:	4b30      	ldr	r3, [pc, #192]	; (8005ed0 <vTaskSwitchContext+0xd0>)
 8005e10:	2201      	movs	r2, #1
 8005e12:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005e14:	e056      	b.n	8005ec4 <vTaskSwitchContext+0xc4>
		xYieldPending = pdFALSE;
 8005e16:	4b2e      	ldr	r3, [pc, #184]	; (8005ed0 <vTaskSwitchContext+0xd0>)
 8005e18:	2200      	movs	r2, #0
 8005e1a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e1c:	4b2d      	ldr	r3, [pc, #180]	; (8005ed4 <vTaskSwitchContext+0xd4>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	60fb      	str	r3, [r7, #12]
 8005e22:	e012      	b.n	8005e4a <vTaskSwitchContext+0x4a>
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d10c      	bne.n	8005e44 <vTaskSwitchContext+0x44>
	__asm volatile
 8005e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e2e:	b672      	cpsid	i
 8005e30:	f383 8811 	msr	BASEPRI, r3
 8005e34:	f3bf 8f6f 	isb	sy
 8005e38:	f3bf 8f4f 	dsb	sy
 8005e3c:	b662      	cpsie	i
 8005e3e:	607b      	str	r3, [r7, #4]
}
 8005e40:	bf00      	nop
 8005e42:	e7fe      	b.n	8005e42 <vTaskSwitchContext+0x42>
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	3b01      	subs	r3, #1
 8005e48:	60fb      	str	r3, [r7, #12]
 8005e4a:	4923      	ldr	r1, [pc, #140]	; (8005ed8 <vTaskSwitchContext+0xd8>)
 8005e4c:	68fa      	ldr	r2, [r7, #12]
 8005e4e:	4613      	mov	r3, r2
 8005e50:	009b      	lsls	r3, r3, #2
 8005e52:	4413      	add	r3, r2
 8005e54:	009b      	lsls	r3, r3, #2
 8005e56:	440b      	add	r3, r1
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d0e2      	beq.n	8005e24 <vTaskSwitchContext+0x24>
 8005e5e:	68fa      	ldr	r2, [r7, #12]
 8005e60:	4613      	mov	r3, r2
 8005e62:	009b      	lsls	r3, r3, #2
 8005e64:	4413      	add	r3, r2
 8005e66:	009b      	lsls	r3, r3, #2
 8005e68:	4a1b      	ldr	r2, [pc, #108]	; (8005ed8 <vTaskSwitchContext+0xd8>)
 8005e6a:	4413      	add	r3, r2
 8005e6c:	60bb      	str	r3, [r7, #8]
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	685a      	ldr	r2, [r3, #4]
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	605a      	str	r2, [r3, #4]
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	685a      	ldr	r2, [r3, #4]
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	3308      	adds	r3, #8
 8005e80:	429a      	cmp	r2, r3
 8005e82:	d104      	bne.n	8005e8e <vTaskSwitchContext+0x8e>
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	685a      	ldr	r2, [r3, #4]
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	605a      	str	r2, [r3, #4]
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	68db      	ldr	r3, [r3, #12]
 8005e94:	4a11      	ldr	r2, [pc, #68]	; (8005edc <vTaskSwitchContext+0xdc>)
 8005e96:	6013      	str	r3, [r2, #0]
 8005e98:	4a0e      	ldr	r2, [pc, #56]	; (8005ed4 <vTaskSwitchContext+0xd4>)
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 8005e9e:	4b0f      	ldr	r3, [pc, #60]	; (8005edc <vTaskSwitchContext+0xdc>)
 8005ea0:	681a      	ldr	r2, [r3, #0]
 8005ea2:	4b0f      	ldr	r3, [pc, #60]	; (8005ee0 <vTaskSwitchContext+0xe0>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	429a      	cmp	r2, r3
 8005ea8:	d102      	bne.n	8005eb0 <vTaskSwitchContext+0xb0>
 8005eaa:	f002 fd3f 	bl	800892c <SEGGER_SYSVIEW_OnIdle>
 8005eae:	e004      	b.n	8005eba <vTaskSwitchContext+0xba>
 8005eb0:	4b0a      	ldr	r3, [pc, #40]	; (8005edc <vTaskSwitchContext+0xdc>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	f002 fd99 	bl	80089ec <SEGGER_SYSVIEW_OnTaskStartExec>
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005eba:	4b08      	ldr	r3, [pc, #32]	; (8005edc <vTaskSwitchContext+0xdc>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	3354      	adds	r3, #84	; 0x54
 8005ec0:	4a08      	ldr	r2, [pc, #32]	; (8005ee4 <vTaskSwitchContext+0xe4>)
 8005ec2:	6013      	str	r3, [r2, #0]
}
 8005ec4:	bf00      	nop
 8005ec6:	3710      	adds	r7, #16
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}
 8005ecc:	2000182c 	.word	0x2000182c
 8005ed0:	20001818 	.word	0x20001818
 8005ed4:	2000180c 	.word	0x2000180c
 8005ed8:	20001334 	.word	0x20001334
 8005edc:	20001330 	.word	0x20001330
 8005ee0:	20001828 	.word	0x20001828
 8005ee4:	20000010 	.word	0x20000010

08005ee8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b084      	sub	sp, #16
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
 8005ef0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d10c      	bne.n	8005f12 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8005ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005efc:	b672      	cpsid	i
 8005efe:	f383 8811 	msr	BASEPRI, r3
 8005f02:	f3bf 8f6f 	isb	sy
 8005f06:	f3bf 8f4f 	dsb	sy
 8005f0a:	b662      	cpsie	i
 8005f0c:	60fb      	str	r3, [r7, #12]
}
 8005f0e:	bf00      	nop
 8005f10:	e7fe      	b.n	8005f10 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005f12:	4b07      	ldr	r3, [pc, #28]	; (8005f30 <vTaskPlaceOnEventList+0x48>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	3318      	adds	r3, #24
 8005f18:	4619      	mov	r1, r3
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f7fe fd5b 	bl	80049d6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005f20:	2101      	movs	r1, #1
 8005f22:	6838      	ldr	r0, [r7, #0]
 8005f24:	f000 fad4 	bl	80064d0 <prvAddCurrentTaskToDelayedList>
}
 8005f28:	bf00      	nop
 8005f2a:	3710      	adds	r7, #16
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bd80      	pop	{r7, pc}
 8005f30:	20001330 	.word	0x20001330

08005f34 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b086      	sub	sp, #24
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	60f8      	str	r0, [r7, #12]
 8005f3c:	60b9      	str	r1, [r7, #8]
 8005f3e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d10c      	bne.n	8005f60 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 8005f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f4a:	b672      	cpsid	i
 8005f4c:	f383 8811 	msr	BASEPRI, r3
 8005f50:	f3bf 8f6f 	isb	sy
 8005f54:	f3bf 8f4f 	dsb	sy
 8005f58:	b662      	cpsie	i
 8005f5a:	617b      	str	r3, [r7, #20]
}
 8005f5c:	bf00      	nop
 8005f5e:	e7fe      	b.n	8005f5e <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005f60:	4b0b      	ldr	r3, [pc, #44]	; (8005f90 <vTaskPlaceOnEventListRestricted+0x5c>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	3318      	adds	r3, #24
 8005f66:	4619      	mov	r1, r3
 8005f68:	68f8      	ldr	r0, [r7, #12]
 8005f6a:	f7fe fd10 	bl	800498e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d002      	beq.n	8005f7a <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8005f74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005f78:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8005f7a:	2024      	movs	r0, #36	; 0x24
 8005f7c:	f002 f84e 	bl	800801c <SEGGER_SYSVIEW_RecordVoid>
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005f80:	6879      	ldr	r1, [r7, #4]
 8005f82:	68b8      	ldr	r0, [r7, #8]
 8005f84:	f000 faa4 	bl	80064d0 <prvAddCurrentTaskToDelayedList>
	}
 8005f88:	bf00      	nop
 8005f8a:	3718      	adds	r7, #24
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	bd80      	pop	{r7, pc}
 8005f90:	20001330 	.word	0x20001330

08005f94 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b086      	sub	sp, #24
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	68db      	ldr	r3, [r3, #12]
 8005fa0:	68db      	ldr	r3, [r3, #12]
 8005fa2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005fa4:	693b      	ldr	r3, [r7, #16]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d10c      	bne.n	8005fc4 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8005faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fae:	b672      	cpsid	i
 8005fb0:	f383 8811 	msr	BASEPRI, r3
 8005fb4:	f3bf 8f6f 	isb	sy
 8005fb8:	f3bf 8f4f 	dsb	sy
 8005fbc:	b662      	cpsie	i
 8005fbe:	60fb      	str	r3, [r7, #12]
}
 8005fc0:	bf00      	nop
 8005fc2:	e7fe      	b.n	8005fc2 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005fc4:	693b      	ldr	r3, [r7, #16]
 8005fc6:	3318      	adds	r3, #24
 8005fc8:	4618      	mov	r0, r3
 8005fca:	f7fe fd3d 	bl	8004a48 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005fce:	4b20      	ldr	r3, [pc, #128]	; (8006050 <xTaskRemoveFromEventList+0xbc>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d121      	bne.n	800601a <xTaskRemoveFromEventList+0x86>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	3304      	adds	r3, #4
 8005fda:	4618      	mov	r0, r3
 8005fdc:	f7fe fd34 	bl	8004a48 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005fe0:	693b      	ldr	r3, [r7, #16]
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	f002 fd46 	bl	8008a74 <SEGGER_SYSVIEW_OnTaskStartReady>
 8005fe8:	693b      	ldr	r3, [r7, #16]
 8005fea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fec:	4b19      	ldr	r3, [pc, #100]	; (8006054 <xTaskRemoveFromEventList+0xc0>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	429a      	cmp	r2, r3
 8005ff2:	d903      	bls.n	8005ffc <xTaskRemoveFromEventList+0x68>
 8005ff4:	693b      	ldr	r3, [r7, #16]
 8005ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ff8:	4a16      	ldr	r2, [pc, #88]	; (8006054 <xTaskRemoveFromEventList+0xc0>)
 8005ffa:	6013      	str	r3, [r2, #0]
 8005ffc:	693b      	ldr	r3, [r7, #16]
 8005ffe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006000:	4613      	mov	r3, r2
 8006002:	009b      	lsls	r3, r3, #2
 8006004:	4413      	add	r3, r2
 8006006:	009b      	lsls	r3, r3, #2
 8006008:	4a13      	ldr	r2, [pc, #76]	; (8006058 <xTaskRemoveFromEventList+0xc4>)
 800600a:	441a      	add	r2, r3
 800600c:	693b      	ldr	r3, [r7, #16]
 800600e:	3304      	adds	r3, #4
 8006010:	4619      	mov	r1, r3
 8006012:	4610      	mov	r0, r2
 8006014:	f7fe fcbb 	bl	800498e <vListInsertEnd>
 8006018:	e005      	b.n	8006026 <xTaskRemoveFromEventList+0x92>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800601a:	693b      	ldr	r3, [r7, #16]
 800601c:	3318      	adds	r3, #24
 800601e:	4619      	mov	r1, r3
 8006020:	480e      	ldr	r0, [pc, #56]	; (800605c <xTaskRemoveFromEventList+0xc8>)
 8006022:	f7fe fcb4 	bl	800498e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006026:	693b      	ldr	r3, [r7, #16]
 8006028:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800602a:	4b0d      	ldr	r3, [pc, #52]	; (8006060 <xTaskRemoveFromEventList+0xcc>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006030:	429a      	cmp	r2, r3
 8006032:	d905      	bls.n	8006040 <xTaskRemoveFromEventList+0xac>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006034:	2301      	movs	r3, #1
 8006036:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006038:	4b0a      	ldr	r3, [pc, #40]	; (8006064 <xTaskRemoveFromEventList+0xd0>)
 800603a:	2201      	movs	r2, #1
 800603c:	601a      	str	r2, [r3, #0]
 800603e:	e001      	b.n	8006044 <xTaskRemoveFromEventList+0xb0>
	}
	else
	{
		xReturn = pdFALSE;
 8006040:	2300      	movs	r3, #0
 8006042:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006044:	697b      	ldr	r3, [r7, #20]
}
 8006046:	4618      	mov	r0, r3
 8006048:	3718      	adds	r7, #24
 800604a:	46bd      	mov	sp, r7
 800604c:	bd80      	pop	{r7, pc}
 800604e:	bf00      	nop
 8006050:	2000182c 	.word	0x2000182c
 8006054:	2000180c 	.word	0x2000180c
 8006058:	20001334 	.word	0x20001334
 800605c:	200017c4 	.word	0x200017c4
 8006060:	20001330 	.word	0x20001330
 8006064:	20001818 	.word	0x20001818

08006068 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006068:	b480      	push	{r7}
 800606a:	b083      	sub	sp, #12
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006070:	4b06      	ldr	r3, [pc, #24]	; (800608c <vTaskInternalSetTimeOutState+0x24>)
 8006072:	681a      	ldr	r2, [r3, #0]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006078:	4b05      	ldr	r3, [pc, #20]	; (8006090 <vTaskInternalSetTimeOutState+0x28>)
 800607a:	681a      	ldr	r2, [r3, #0]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	605a      	str	r2, [r3, #4]
}
 8006080:	bf00      	nop
 8006082:	370c      	adds	r7, #12
 8006084:	46bd      	mov	sp, r7
 8006086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608a:	4770      	bx	lr
 800608c:	2000181c 	.word	0x2000181c
 8006090:	20001808 	.word	0x20001808

08006094 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b088      	sub	sp, #32
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
 800609c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d10c      	bne.n	80060be <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 80060a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060a8:	b672      	cpsid	i
 80060aa:	f383 8811 	msr	BASEPRI, r3
 80060ae:	f3bf 8f6f 	isb	sy
 80060b2:	f3bf 8f4f 	dsb	sy
 80060b6:	b662      	cpsie	i
 80060b8:	613b      	str	r3, [r7, #16]
}
 80060ba:	bf00      	nop
 80060bc:	e7fe      	b.n	80060bc <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d10c      	bne.n	80060de <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 80060c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060c8:	b672      	cpsid	i
 80060ca:	f383 8811 	msr	BASEPRI, r3
 80060ce:	f3bf 8f6f 	isb	sy
 80060d2:	f3bf 8f4f 	dsb	sy
 80060d6:	b662      	cpsie	i
 80060d8:	60fb      	str	r3, [r7, #12]
}
 80060da:	bf00      	nop
 80060dc:	e7fe      	b.n	80060dc <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 80060de:	f000 feb5 	bl	8006e4c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80060e2:	4b1d      	ldr	r3, [pc, #116]	; (8006158 <xTaskCheckForTimeOut+0xc4>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	685b      	ldr	r3, [r3, #4]
 80060ec:	69ba      	ldr	r2, [r7, #24]
 80060ee:	1ad3      	subs	r3, r2, r3
 80060f0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80060fa:	d102      	bne.n	8006102 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80060fc:	2300      	movs	r3, #0
 80060fe:	61fb      	str	r3, [r7, #28]
 8006100:	e023      	b.n	800614a <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681a      	ldr	r2, [r3, #0]
 8006106:	4b15      	ldr	r3, [pc, #84]	; (800615c <xTaskCheckForTimeOut+0xc8>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	429a      	cmp	r2, r3
 800610c:	d007      	beq.n	800611e <xTaskCheckForTimeOut+0x8a>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	685b      	ldr	r3, [r3, #4]
 8006112:	69ba      	ldr	r2, [r7, #24]
 8006114:	429a      	cmp	r2, r3
 8006116:	d302      	bcc.n	800611e <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006118:	2301      	movs	r3, #1
 800611a:	61fb      	str	r3, [r7, #28]
 800611c:	e015      	b.n	800614a <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	697a      	ldr	r2, [r7, #20]
 8006124:	429a      	cmp	r2, r3
 8006126:	d20b      	bcs.n	8006140 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	681a      	ldr	r2, [r3, #0]
 800612c:	697b      	ldr	r3, [r7, #20]
 800612e:	1ad2      	subs	r2, r2, r3
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006134:	6878      	ldr	r0, [r7, #4]
 8006136:	f7ff ff97 	bl	8006068 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800613a:	2300      	movs	r3, #0
 800613c:	61fb      	str	r3, [r7, #28]
 800613e:	e004      	b.n	800614a <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	2200      	movs	r2, #0
 8006144:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006146:	2301      	movs	r3, #1
 8006148:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800614a:	f000 feb3 	bl	8006eb4 <vPortExitCritical>

	return xReturn;
 800614e:	69fb      	ldr	r3, [r7, #28]
}
 8006150:	4618      	mov	r0, r3
 8006152:	3720      	adds	r7, #32
 8006154:	46bd      	mov	sp, r7
 8006156:	bd80      	pop	{r7, pc}
 8006158:	20001808 	.word	0x20001808
 800615c:	2000181c 	.word	0x2000181c

08006160 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006160:	b480      	push	{r7}
 8006162:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006164:	4b03      	ldr	r3, [pc, #12]	; (8006174 <vTaskMissedYield+0x14>)
 8006166:	2201      	movs	r2, #1
 8006168:	601a      	str	r2, [r3, #0]
}
 800616a:	bf00      	nop
 800616c:	46bd      	mov	sp, r7
 800616e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006172:	4770      	bx	lr
 8006174:	20001818 	.word	0x20001818

08006178 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b082      	sub	sp, #8
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006180:	f000 f852 	bl	8006228 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006184:	4b06      	ldr	r3, [pc, #24]	; (80061a0 <prvIdleTask+0x28>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	2b01      	cmp	r3, #1
 800618a:	d9f9      	bls.n	8006180 <prvIdleTask+0x8>
			{
				taskYIELD();
 800618c:	4b05      	ldr	r3, [pc, #20]	; (80061a4 <prvIdleTask+0x2c>)
 800618e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006192:	601a      	str	r2, [r3, #0]
 8006194:	f3bf 8f4f 	dsb	sy
 8006198:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800619c:	e7f0      	b.n	8006180 <prvIdleTask+0x8>
 800619e:	bf00      	nop
 80061a0:	20001334 	.word	0x20001334
 80061a4:	e000ed04 	.word	0xe000ed04

080061a8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b082      	sub	sp, #8
 80061ac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80061ae:	2300      	movs	r3, #0
 80061b0:	607b      	str	r3, [r7, #4]
 80061b2:	e00c      	b.n	80061ce <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80061b4:	687a      	ldr	r2, [r7, #4]
 80061b6:	4613      	mov	r3, r2
 80061b8:	009b      	lsls	r3, r3, #2
 80061ba:	4413      	add	r3, r2
 80061bc:	009b      	lsls	r3, r3, #2
 80061be:	4a12      	ldr	r2, [pc, #72]	; (8006208 <prvInitialiseTaskLists+0x60>)
 80061c0:	4413      	add	r3, r2
 80061c2:	4618      	mov	r0, r3
 80061c4:	f7fe fbb6 	bl	8004934 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	3301      	adds	r3, #1
 80061cc:	607b      	str	r3, [r7, #4]
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2b37      	cmp	r3, #55	; 0x37
 80061d2:	d9ef      	bls.n	80061b4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80061d4:	480d      	ldr	r0, [pc, #52]	; (800620c <prvInitialiseTaskLists+0x64>)
 80061d6:	f7fe fbad 	bl	8004934 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80061da:	480d      	ldr	r0, [pc, #52]	; (8006210 <prvInitialiseTaskLists+0x68>)
 80061dc:	f7fe fbaa 	bl	8004934 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80061e0:	480c      	ldr	r0, [pc, #48]	; (8006214 <prvInitialiseTaskLists+0x6c>)
 80061e2:	f7fe fba7 	bl	8004934 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80061e6:	480c      	ldr	r0, [pc, #48]	; (8006218 <prvInitialiseTaskLists+0x70>)
 80061e8:	f7fe fba4 	bl	8004934 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80061ec:	480b      	ldr	r0, [pc, #44]	; (800621c <prvInitialiseTaskLists+0x74>)
 80061ee:	f7fe fba1 	bl	8004934 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80061f2:	4b0b      	ldr	r3, [pc, #44]	; (8006220 <prvInitialiseTaskLists+0x78>)
 80061f4:	4a05      	ldr	r2, [pc, #20]	; (800620c <prvInitialiseTaskLists+0x64>)
 80061f6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80061f8:	4b0a      	ldr	r3, [pc, #40]	; (8006224 <prvInitialiseTaskLists+0x7c>)
 80061fa:	4a05      	ldr	r2, [pc, #20]	; (8006210 <prvInitialiseTaskLists+0x68>)
 80061fc:	601a      	str	r2, [r3, #0]
}
 80061fe:	bf00      	nop
 8006200:	3708      	adds	r7, #8
 8006202:	46bd      	mov	sp, r7
 8006204:	bd80      	pop	{r7, pc}
 8006206:	bf00      	nop
 8006208:	20001334 	.word	0x20001334
 800620c:	20001794 	.word	0x20001794
 8006210:	200017a8 	.word	0x200017a8
 8006214:	200017c4 	.word	0x200017c4
 8006218:	200017d8 	.word	0x200017d8
 800621c:	200017f0 	.word	0x200017f0
 8006220:	200017bc 	.word	0x200017bc
 8006224:	200017c0 	.word	0x200017c0

08006228 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b082      	sub	sp, #8
 800622c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800622e:	e019      	b.n	8006264 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006230:	f000 fe0c 	bl	8006e4c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006234:	4b10      	ldr	r3, [pc, #64]	; (8006278 <prvCheckTasksWaitingTermination+0x50>)
 8006236:	68db      	ldr	r3, [r3, #12]
 8006238:	68db      	ldr	r3, [r3, #12]
 800623a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	3304      	adds	r3, #4
 8006240:	4618      	mov	r0, r3
 8006242:	f7fe fc01 	bl	8004a48 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006246:	4b0d      	ldr	r3, [pc, #52]	; (800627c <prvCheckTasksWaitingTermination+0x54>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	3b01      	subs	r3, #1
 800624c:	4a0b      	ldr	r2, [pc, #44]	; (800627c <prvCheckTasksWaitingTermination+0x54>)
 800624e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006250:	4b0b      	ldr	r3, [pc, #44]	; (8006280 <prvCheckTasksWaitingTermination+0x58>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	3b01      	subs	r3, #1
 8006256:	4a0a      	ldr	r2, [pc, #40]	; (8006280 <prvCheckTasksWaitingTermination+0x58>)
 8006258:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800625a:	f000 fe2b 	bl	8006eb4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f000 f848 	bl	80062f4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006264:	4b06      	ldr	r3, [pc, #24]	; (8006280 <prvCheckTasksWaitingTermination+0x58>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d1e1      	bne.n	8006230 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800626c:	bf00      	nop
 800626e:	bf00      	nop
 8006270:	3708      	adds	r7, #8
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}
 8006276:	bf00      	nop
 8006278:	200017d8 	.word	0x200017d8
 800627c:	20001804 	.word	0x20001804
 8006280:	200017ec 	.word	0x200017ec

08006284 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8006284:	b480      	push	{r7}
 8006286:	b085      	sub	sp, #20
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 800628c:	2300      	movs	r3, #0
 800628e:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8006290:	e005      	b.n	800629e <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	3301      	adds	r3, #1
 8006296:	607b      	str	r3, [r7, #4]
			ulCount++;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	3301      	adds	r3, #1
 800629c:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	781b      	ldrb	r3, [r3, #0]
 80062a2:	2ba5      	cmp	r3, #165	; 0xa5
 80062a4:	d0f5      	beq.n	8006292 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	089b      	lsrs	r3, r3, #2
 80062aa:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	b29b      	uxth	r3, r3
	}
 80062b0:	4618      	mov	r0, r3
 80062b2:	3714      	adds	r7, #20
 80062b4:	46bd      	mov	sp, r7
 80062b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ba:	4770      	bx	lr

080062bc <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b086      	sub	sp, #24
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d102      	bne.n	80062d0 <uxTaskGetStackHighWaterMark+0x14>
 80062ca:	4b09      	ldr	r3, [pc, #36]	; (80062f0 <uxTaskGetStackHighWaterMark+0x34>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	e000      	b.n	80062d2 <uxTaskGetStackHighWaterMark+0x16>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 80062d4:	697b      	ldr	r3, [r7, #20]
 80062d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062d8:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 80062da:	6938      	ldr	r0, [r7, #16]
 80062dc:	f7ff ffd2 	bl	8006284 <prvTaskCheckFreeStackSpace>
 80062e0:	4603      	mov	r3, r0
 80062e2:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 80062e4:	68fb      	ldr	r3, [r7, #12]
	}
 80062e6:	4618      	mov	r0, r3
 80062e8:	3718      	adds	r7, #24
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bd80      	pop	{r7, pc}
 80062ee:	bf00      	nop
 80062f0:	20001330 	.word	0x20001330

080062f4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b084      	sub	sp, #16
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	3354      	adds	r3, #84	; 0x54
 8006300:	4618      	mov	r0, r3
 8006302:	f002 fd9f 	bl	8008e44 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800630c:	2b00      	cmp	r3, #0
 800630e:	d108      	bne.n	8006322 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006314:	4618      	mov	r0, r3
 8006316:	f000 ff8f 	bl	8007238 <vPortFree>
				vPortFree( pxTCB );
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f000 ff8c 	bl	8007238 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006320:	e01a      	b.n	8006358 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006328:	2b01      	cmp	r3, #1
 800632a:	d103      	bne.n	8006334 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800632c:	6878      	ldr	r0, [r7, #4]
 800632e:	f000 ff83 	bl	8007238 <vPortFree>
	}
 8006332:	e011      	b.n	8006358 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800633a:	2b02      	cmp	r3, #2
 800633c:	d00c      	beq.n	8006358 <prvDeleteTCB+0x64>
	__asm volatile
 800633e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006342:	b672      	cpsid	i
 8006344:	f383 8811 	msr	BASEPRI, r3
 8006348:	f3bf 8f6f 	isb	sy
 800634c:	f3bf 8f4f 	dsb	sy
 8006350:	b662      	cpsie	i
 8006352:	60fb      	str	r3, [r7, #12]
}
 8006354:	bf00      	nop
 8006356:	e7fe      	b.n	8006356 <prvDeleteTCB+0x62>
	}
 8006358:	bf00      	nop
 800635a:	3710      	adds	r7, #16
 800635c:	46bd      	mov	sp, r7
 800635e:	bd80      	pop	{r7, pc}

08006360 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006360:	b480      	push	{r7}
 8006362:	b083      	sub	sp, #12
 8006364:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006366:	4b0c      	ldr	r3, [pc, #48]	; (8006398 <prvResetNextTaskUnblockTime+0x38>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d104      	bne.n	800637a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006370:	4b0a      	ldr	r3, [pc, #40]	; (800639c <prvResetNextTaskUnblockTime+0x3c>)
 8006372:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006376:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006378:	e008      	b.n	800638c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800637a:	4b07      	ldr	r3, [pc, #28]	; (8006398 <prvResetNextTaskUnblockTime+0x38>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	68db      	ldr	r3, [r3, #12]
 8006380:	68db      	ldr	r3, [r3, #12]
 8006382:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	685b      	ldr	r3, [r3, #4]
 8006388:	4a04      	ldr	r2, [pc, #16]	; (800639c <prvResetNextTaskUnblockTime+0x3c>)
 800638a:	6013      	str	r3, [r2, #0]
}
 800638c:	bf00      	nop
 800638e:	370c      	adds	r7, #12
 8006390:	46bd      	mov	sp, r7
 8006392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006396:	4770      	bx	lr
 8006398:	200017bc 	.word	0x200017bc
 800639c:	20001824 	.word	0x20001824

080063a0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80063a0:	b480      	push	{r7}
 80063a2:	b083      	sub	sp, #12
 80063a4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80063a6:	4b0b      	ldr	r3, [pc, #44]	; (80063d4 <xTaskGetSchedulerState+0x34>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d102      	bne.n	80063b4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80063ae:	2301      	movs	r3, #1
 80063b0:	607b      	str	r3, [r7, #4]
 80063b2:	e008      	b.n	80063c6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80063b4:	4b08      	ldr	r3, [pc, #32]	; (80063d8 <xTaskGetSchedulerState+0x38>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d102      	bne.n	80063c2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80063bc:	2302      	movs	r3, #2
 80063be:	607b      	str	r3, [r7, #4]
 80063c0:	e001      	b.n	80063c6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80063c2:	2300      	movs	r3, #0
 80063c4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80063c6:	687b      	ldr	r3, [r7, #4]
	}
 80063c8:	4618      	mov	r0, r3
 80063ca:	370c      	adds	r7, #12
 80063cc:	46bd      	mov	sp, r7
 80063ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d2:	4770      	bx	lr
 80063d4:	20001810 	.word	0x20001810
 80063d8:	2000182c 	.word	0x2000182c

080063dc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b086      	sub	sp, #24
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80063e8:	2300      	movs	r3, #0
 80063ea:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d063      	beq.n	80064ba <xTaskPriorityDisinherit+0xde>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80063f2:	4b34      	ldr	r3, [pc, #208]	; (80064c4 <xTaskPriorityDisinherit+0xe8>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	693a      	ldr	r2, [r7, #16]
 80063f8:	429a      	cmp	r2, r3
 80063fa:	d00c      	beq.n	8006416 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 80063fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006400:	b672      	cpsid	i
 8006402:	f383 8811 	msr	BASEPRI, r3
 8006406:	f3bf 8f6f 	isb	sy
 800640a:	f3bf 8f4f 	dsb	sy
 800640e:	b662      	cpsie	i
 8006410:	60fb      	str	r3, [r7, #12]
}
 8006412:	bf00      	nop
 8006414:	e7fe      	b.n	8006414 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8006416:	693b      	ldr	r3, [r7, #16]
 8006418:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800641a:	2b00      	cmp	r3, #0
 800641c:	d10c      	bne.n	8006438 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800641e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006422:	b672      	cpsid	i
 8006424:	f383 8811 	msr	BASEPRI, r3
 8006428:	f3bf 8f6f 	isb	sy
 800642c:	f3bf 8f4f 	dsb	sy
 8006430:	b662      	cpsie	i
 8006432:	60bb      	str	r3, [r7, #8]
}
 8006434:	bf00      	nop
 8006436:	e7fe      	b.n	8006436 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8006438:	693b      	ldr	r3, [r7, #16]
 800643a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800643c:	1e5a      	subs	r2, r3, #1
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006442:	693b      	ldr	r3, [r7, #16]
 8006444:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006446:	693b      	ldr	r3, [r7, #16]
 8006448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800644a:	429a      	cmp	r2, r3
 800644c:	d035      	beq.n	80064ba <xTaskPriorityDisinherit+0xde>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006452:	2b00      	cmp	r3, #0
 8006454:	d131      	bne.n	80064ba <xTaskPriorityDisinherit+0xde>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006456:	693b      	ldr	r3, [r7, #16]
 8006458:	3304      	adds	r3, #4
 800645a:	4618      	mov	r0, r3
 800645c:	f7fe faf4 	bl	8004a48 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	4619      	mov	r1, r3
 8006464:	204a      	movs	r0, #74	; 0x4a
 8006466:	f001 fdf7 	bl	8008058 <SEGGER_SYSVIEW_RecordU32>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800646a:	693b      	ldr	r3, [r7, #16]
 800646c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800646e:	693b      	ldr	r3, [r7, #16]
 8006470:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006472:	693b      	ldr	r3, [r7, #16]
 8006474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006476:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800647a:	693b      	ldr	r3, [r7, #16]
 800647c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	4618      	mov	r0, r3
 8006482:	f002 faf7 	bl	8008a74 <SEGGER_SYSVIEW_OnTaskStartReady>
 8006486:	693b      	ldr	r3, [r7, #16]
 8006488:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800648a:	4b0f      	ldr	r3, [pc, #60]	; (80064c8 <xTaskPriorityDisinherit+0xec>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	429a      	cmp	r2, r3
 8006490:	d903      	bls.n	800649a <xTaskPriorityDisinherit+0xbe>
 8006492:	693b      	ldr	r3, [r7, #16]
 8006494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006496:	4a0c      	ldr	r2, [pc, #48]	; (80064c8 <xTaskPriorityDisinherit+0xec>)
 8006498:	6013      	str	r3, [r2, #0]
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800649e:	4613      	mov	r3, r2
 80064a0:	009b      	lsls	r3, r3, #2
 80064a2:	4413      	add	r3, r2
 80064a4:	009b      	lsls	r3, r3, #2
 80064a6:	4a09      	ldr	r2, [pc, #36]	; (80064cc <xTaskPriorityDisinherit+0xf0>)
 80064a8:	441a      	add	r2, r3
 80064aa:	693b      	ldr	r3, [r7, #16]
 80064ac:	3304      	adds	r3, #4
 80064ae:	4619      	mov	r1, r3
 80064b0:	4610      	mov	r0, r2
 80064b2:	f7fe fa6c 	bl	800498e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80064b6:	2301      	movs	r3, #1
 80064b8:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80064ba:	697b      	ldr	r3, [r7, #20]
	}
 80064bc:	4618      	mov	r0, r3
 80064be:	3718      	adds	r7, #24
 80064c0:	46bd      	mov	sp, r7
 80064c2:	bd80      	pop	{r7, pc}
 80064c4:	20001330 	.word	0x20001330
 80064c8:	2000180c 	.word	0x2000180c
 80064cc:	20001334 	.word	0x20001334

080064d0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b084      	sub	sp, #16
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
 80064d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80064da:	4b21      	ldr	r3, [pc, #132]	; (8006560 <prvAddCurrentTaskToDelayedList+0x90>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80064e0:	4b20      	ldr	r3, [pc, #128]	; (8006564 <prvAddCurrentTaskToDelayedList+0x94>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	3304      	adds	r3, #4
 80064e6:	4618      	mov	r0, r3
 80064e8:	f7fe faae 	bl	8004a48 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80064f2:	d10a      	bne.n	800650a <prvAddCurrentTaskToDelayedList+0x3a>
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d007      	beq.n	800650a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80064fa:	4b1a      	ldr	r3, [pc, #104]	; (8006564 <prvAddCurrentTaskToDelayedList+0x94>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	3304      	adds	r3, #4
 8006500:	4619      	mov	r1, r3
 8006502:	4819      	ldr	r0, [pc, #100]	; (8006568 <prvAddCurrentTaskToDelayedList+0x98>)
 8006504:	f7fe fa43 	bl	800498e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006508:	e026      	b.n	8006558 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800650a:	68fa      	ldr	r2, [r7, #12]
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	4413      	add	r3, r2
 8006510:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006512:	4b14      	ldr	r3, [pc, #80]	; (8006564 <prvAddCurrentTaskToDelayedList+0x94>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	68ba      	ldr	r2, [r7, #8]
 8006518:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800651a:	68ba      	ldr	r2, [r7, #8]
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	429a      	cmp	r2, r3
 8006520:	d209      	bcs.n	8006536 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006522:	4b12      	ldr	r3, [pc, #72]	; (800656c <prvAddCurrentTaskToDelayedList+0x9c>)
 8006524:	681a      	ldr	r2, [r3, #0]
 8006526:	4b0f      	ldr	r3, [pc, #60]	; (8006564 <prvAddCurrentTaskToDelayedList+0x94>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	3304      	adds	r3, #4
 800652c:	4619      	mov	r1, r3
 800652e:	4610      	mov	r0, r2
 8006530:	f7fe fa51 	bl	80049d6 <vListInsert>
}
 8006534:	e010      	b.n	8006558 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006536:	4b0e      	ldr	r3, [pc, #56]	; (8006570 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006538:	681a      	ldr	r2, [r3, #0]
 800653a:	4b0a      	ldr	r3, [pc, #40]	; (8006564 <prvAddCurrentTaskToDelayedList+0x94>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	3304      	adds	r3, #4
 8006540:	4619      	mov	r1, r3
 8006542:	4610      	mov	r0, r2
 8006544:	f7fe fa47 	bl	80049d6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006548:	4b0a      	ldr	r3, [pc, #40]	; (8006574 <prvAddCurrentTaskToDelayedList+0xa4>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	68ba      	ldr	r2, [r7, #8]
 800654e:	429a      	cmp	r2, r3
 8006550:	d202      	bcs.n	8006558 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006552:	4a08      	ldr	r2, [pc, #32]	; (8006574 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	6013      	str	r3, [r2, #0]
}
 8006558:	bf00      	nop
 800655a:	3710      	adds	r7, #16
 800655c:	46bd      	mov	sp, r7
 800655e:	bd80      	pop	{r7, pc}
 8006560:	20001808 	.word	0x20001808
 8006564:	20001330 	.word	0x20001330
 8006568:	200017f0 	.word	0x200017f0
 800656c:	200017c0 	.word	0x200017c0
 8006570:	200017bc 	.word	0x200017bc
 8006574:	20001824 	.word	0x20001824

08006578 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b08a      	sub	sp, #40	; 0x28
 800657c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800657e:	2300      	movs	r3, #0
 8006580:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006582:	f000 fb15 	bl	8006bb0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006586:	4b1d      	ldr	r3, [pc, #116]	; (80065fc <xTimerCreateTimerTask+0x84>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d021      	beq.n	80065d2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800658e:	2300      	movs	r3, #0
 8006590:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006592:	2300      	movs	r3, #0
 8006594:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006596:	1d3a      	adds	r2, r7, #4
 8006598:	f107 0108 	add.w	r1, r7, #8
 800659c:	f107 030c 	add.w	r3, r7, #12
 80065a0:	4618      	mov	r0, r3
 80065a2:	f7fe f9ad 	bl	8004900 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80065a6:	6879      	ldr	r1, [r7, #4]
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	68fa      	ldr	r2, [r7, #12]
 80065ac:	9202      	str	r2, [sp, #8]
 80065ae:	9301      	str	r3, [sp, #4]
 80065b0:	2302      	movs	r3, #2
 80065b2:	9300      	str	r3, [sp, #0]
 80065b4:	2300      	movs	r3, #0
 80065b6:	460a      	mov	r2, r1
 80065b8:	4911      	ldr	r1, [pc, #68]	; (8006600 <xTimerCreateTimerTask+0x88>)
 80065ba:	4812      	ldr	r0, [pc, #72]	; (8006604 <xTimerCreateTimerTask+0x8c>)
 80065bc:	f7fe fff2 	bl	80055a4 <xTaskCreateStatic>
 80065c0:	4603      	mov	r3, r0
 80065c2:	4a11      	ldr	r2, [pc, #68]	; (8006608 <xTimerCreateTimerTask+0x90>)
 80065c4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80065c6:	4b10      	ldr	r3, [pc, #64]	; (8006608 <xTimerCreateTimerTask+0x90>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d001      	beq.n	80065d2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80065ce:	2301      	movs	r3, #1
 80065d0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d10c      	bne.n	80065f2 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 80065d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065dc:	b672      	cpsid	i
 80065de:	f383 8811 	msr	BASEPRI, r3
 80065e2:	f3bf 8f6f 	isb	sy
 80065e6:	f3bf 8f4f 	dsb	sy
 80065ea:	b662      	cpsie	i
 80065ec:	613b      	str	r3, [r7, #16]
}
 80065ee:	bf00      	nop
 80065f0:	e7fe      	b.n	80065f0 <xTimerCreateTimerTask+0x78>
	return xReturn;
 80065f2:	697b      	ldr	r3, [r7, #20]
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	3718      	adds	r7, #24
 80065f8:	46bd      	mov	sp, r7
 80065fa:	bd80      	pop	{r7, pc}
 80065fc:	20001860 	.word	0x20001860
 8006600:	08008ffc 	.word	0x08008ffc
 8006604:	08006749 	.word	0x08006749
 8006608:	20001864 	.word	0x20001864

0800660c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b08a      	sub	sp, #40	; 0x28
 8006610:	af00      	add	r7, sp, #0
 8006612:	60f8      	str	r0, [r7, #12]
 8006614:	60b9      	str	r1, [r7, #8]
 8006616:	607a      	str	r2, [r7, #4]
 8006618:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800661a:	2300      	movs	r3, #0
 800661c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d10c      	bne.n	800663e <xTimerGenericCommand+0x32>
	__asm volatile
 8006624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006628:	b672      	cpsid	i
 800662a:	f383 8811 	msr	BASEPRI, r3
 800662e:	f3bf 8f6f 	isb	sy
 8006632:	f3bf 8f4f 	dsb	sy
 8006636:	b662      	cpsie	i
 8006638:	623b      	str	r3, [r7, #32]
}
 800663a:	bf00      	nop
 800663c:	e7fe      	b.n	800663c <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800663e:	4b1a      	ldr	r3, [pc, #104]	; (80066a8 <xTimerGenericCommand+0x9c>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d02a      	beq.n	800669c <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006652:	68bb      	ldr	r3, [r7, #8]
 8006654:	2b05      	cmp	r3, #5
 8006656:	dc18      	bgt.n	800668a <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006658:	f7ff fea2 	bl	80063a0 <xTaskGetSchedulerState>
 800665c:	4603      	mov	r3, r0
 800665e:	2b02      	cmp	r3, #2
 8006660:	d109      	bne.n	8006676 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006662:	4b11      	ldr	r3, [pc, #68]	; (80066a8 <xTimerGenericCommand+0x9c>)
 8006664:	6818      	ldr	r0, [r3, #0]
 8006666:	f107 0110 	add.w	r1, r7, #16
 800666a:	2300      	movs	r3, #0
 800666c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800666e:	f7fe fb2b 	bl	8004cc8 <xQueueGenericSend>
 8006672:	6278      	str	r0, [r7, #36]	; 0x24
 8006674:	e012      	b.n	800669c <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006676:	4b0c      	ldr	r3, [pc, #48]	; (80066a8 <xTimerGenericCommand+0x9c>)
 8006678:	6818      	ldr	r0, [r3, #0]
 800667a:	f107 0110 	add.w	r1, r7, #16
 800667e:	2300      	movs	r3, #0
 8006680:	2200      	movs	r2, #0
 8006682:	f7fe fb21 	bl	8004cc8 <xQueueGenericSend>
 8006686:	6278      	str	r0, [r7, #36]	; 0x24
 8006688:	e008      	b.n	800669c <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800668a:	4b07      	ldr	r3, [pc, #28]	; (80066a8 <xTimerGenericCommand+0x9c>)
 800668c:	6818      	ldr	r0, [r3, #0]
 800668e:	f107 0110 	add.w	r1, r7, #16
 8006692:	2300      	movs	r3, #0
 8006694:	683a      	ldr	r2, [r7, #0]
 8006696:	f7fe fc45 	bl	8004f24 <xQueueGenericSendFromISR>
 800669a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800669c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800669e:	4618      	mov	r0, r3
 80066a0:	3728      	adds	r7, #40	; 0x28
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bd80      	pop	{r7, pc}
 80066a6:	bf00      	nop
 80066a8:	20001860 	.word	0x20001860

080066ac <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b088      	sub	sp, #32
 80066b0:	af02      	add	r7, sp, #8
 80066b2:	6078      	str	r0, [r7, #4]
 80066b4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066b6:	4b23      	ldr	r3, [pc, #140]	; (8006744 <prvProcessExpiredTimer+0x98>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	68db      	ldr	r3, [r3, #12]
 80066bc:	68db      	ldr	r3, [r3, #12]
 80066be:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80066c0:	697b      	ldr	r3, [r7, #20]
 80066c2:	3304      	adds	r3, #4
 80066c4:	4618      	mov	r0, r3
 80066c6:	f7fe f9bf 	bl	8004a48 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80066ca:	697b      	ldr	r3, [r7, #20]
 80066cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80066d0:	f003 0304 	and.w	r3, r3, #4
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d024      	beq.n	8006722 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80066d8:	697b      	ldr	r3, [r7, #20]
 80066da:	699a      	ldr	r2, [r3, #24]
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	18d1      	adds	r1, r2, r3
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	683a      	ldr	r2, [r7, #0]
 80066e4:	6978      	ldr	r0, [r7, #20]
 80066e6:	f000 f8d3 	bl	8006890 <prvInsertTimerInActiveList>
 80066ea:	4603      	mov	r3, r0
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d021      	beq.n	8006734 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80066f0:	2300      	movs	r3, #0
 80066f2:	9300      	str	r3, [sp, #0]
 80066f4:	2300      	movs	r3, #0
 80066f6:	687a      	ldr	r2, [r7, #4]
 80066f8:	2100      	movs	r1, #0
 80066fa:	6978      	ldr	r0, [r7, #20]
 80066fc:	f7ff ff86 	bl	800660c <xTimerGenericCommand>
 8006700:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d115      	bne.n	8006734 <prvProcessExpiredTimer+0x88>
	__asm volatile
 8006708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800670c:	b672      	cpsid	i
 800670e:	f383 8811 	msr	BASEPRI, r3
 8006712:	f3bf 8f6f 	isb	sy
 8006716:	f3bf 8f4f 	dsb	sy
 800671a:	b662      	cpsie	i
 800671c:	60fb      	str	r3, [r7, #12]
}
 800671e:	bf00      	nop
 8006720:	e7fe      	b.n	8006720 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006722:	697b      	ldr	r3, [r7, #20]
 8006724:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006728:	f023 0301 	bic.w	r3, r3, #1
 800672c:	b2da      	uxtb	r2, r3
 800672e:	697b      	ldr	r3, [r7, #20]
 8006730:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006734:	697b      	ldr	r3, [r7, #20]
 8006736:	6a1b      	ldr	r3, [r3, #32]
 8006738:	6978      	ldr	r0, [r7, #20]
 800673a:	4798      	blx	r3
}
 800673c:	bf00      	nop
 800673e:	3718      	adds	r7, #24
 8006740:	46bd      	mov	sp, r7
 8006742:	bd80      	pop	{r7, pc}
 8006744:	20001858 	.word	0x20001858

08006748 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b084      	sub	sp, #16
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006750:	f107 0308 	add.w	r3, r7, #8
 8006754:	4618      	mov	r0, r3
 8006756:	f000 f857 	bl	8006808 <prvGetNextExpireTime>
 800675a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	4619      	mov	r1, r3
 8006760:	68f8      	ldr	r0, [r7, #12]
 8006762:	f000 f803 	bl	800676c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006766:	f000 f8d5 	bl	8006914 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800676a:	e7f1      	b.n	8006750 <prvTimerTask+0x8>

0800676c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b084      	sub	sp, #16
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
 8006774:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006776:	f7ff f9af 	bl	8005ad8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800677a:	f107 0308 	add.w	r3, r7, #8
 800677e:	4618      	mov	r0, r3
 8006780:	f000 f866 	bl	8006850 <prvSampleTimeNow>
 8006784:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d130      	bne.n	80067ee <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d10a      	bne.n	80067a8 <prvProcessTimerOrBlockTask+0x3c>
 8006792:	687a      	ldr	r2, [r7, #4]
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	429a      	cmp	r2, r3
 8006798:	d806      	bhi.n	80067a8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800679a:	f7ff f9ab 	bl	8005af4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800679e:	68f9      	ldr	r1, [r7, #12]
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	f7ff ff83 	bl	80066ac <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80067a6:	e024      	b.n	80067f2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d008      	beq.n	80067c0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80067ae:	4b13      	ldr	r3, [pc, #76]	; (80067fc <prvProcessTimerOrBlockTask+0x90>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d101      	bne.n	80067bc <prvProcessTimerOrBlockTask+0x50>
 80067b8:	2301      	movs	r3, #1
 80067ba:	e000      	b.n	80067be <prvProcessTimerOrBlockTask+0x52>
 80067bc:	2300      	movs	r3, #0
 80067be:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80067c0:	4b0f      	ldr	r3, [pc, #60]	; (8006800 <prvProcessTimerOrBlockTask+0x94>)
 80067c2:	6818      	ldr	r0, [r3, #0]
 80067c4:	687a      	ldr	r2, [r7, #4]
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	1ad3      	subs	r3, r2, r3
 80067ca:	683a      	ldr	r2, [r7, #0]
 80067cc:	4619      	mov	r1, r3
 80067ce:	f7fe feb5 	bl	800553c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80067d2:	f7ff f98f 	bl	8005af4 <xTaskResumeAll>
 80067d6:	4603      	mov	r3, r0
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d10a      	bne.n	80067f2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80067dc:	4b09      	ldr	r3, [pc, #36]	; (8006804 <prvProcessTimerOrBlockTask+0x98>)
 80067de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067e2:	601a      	str	r2, [r3, #0]
 80067e4:	f3bf 8f4f 	dsb	sy
 80067e8:	f3bf 8f6f 	isb	sy
}
 80067ec:	e001      	b.n	80067f2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80067ee:	f7ff f981 	bl	8005af4 <xTaskResumeAll>
}
 80067f2:	bf00      	nop
 80067f4:	3710      	adds	r7, #16
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}
 80067fa:	bf00      	nop
 80067fc:	2000185c 	.word	0x2000185c
 8006800:	20001860 	.word	0x20001860
 8006804:	e000ed04 	.word	0xe000ed04

08006808 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006808:	b480      	push	{r7}
 800680a:	b085      	sub	sp, #20
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006810:	4b0e      	ldr	r3, [pc, #56]	; (800684c <prvGetNextExpireTime+0x44>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d101      	bne.n	800681e <prvGetNextExpireTime+0x16>
 800681a:	2201      	movs	r2, #1
 800681c:	e000      	b.n	8006820 <prvGetNextExpireTime+0x18>
 800681e:	2200      	movs	r2, #0
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d105      	bne.n	8006838 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800682c:	4b07      	ldr	r3, [pc, #28]	; (800684c <prvGetNextExpireTime+0x44>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	68db      	ldr	r3, [r3, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	60fb      	str	r3, [r7, #12]
 8006836:	e001      	b.n	800683c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006838:	2300      	movs	r3, #0
 800683a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800683c:	68fb      	ldr	r3, [r7, #12]
}
 800683e:	4618      	mov	r0, r3
 8006840:	3714      	adds	r7, #20
 8006842:	46bd      	mov	sp, r7
 8006844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006848:	4770      	bx	lr
 800684a:	bf00      	nop
 800684c:	20001858 	.word	0x20001858

08006850 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b084      	sub	sp, #16
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006858:	f7ff f9f0 	bl	8005c3c <xTaskGetTickCount>
 800685c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800685e:	4b0b      	ldr	r3, [pc, #44]	; (800688c <prvSampleTimeNow+0x3c>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	68fa      	ldr	r2, [r7, #12]
 8006864:	429a      	cmp	r2, r3
 8006866:	d205      	bcs.n	8006874 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006868:	f000 f93c 	bl	8006ae4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2201      	movs	r2, #1
 8006870:	601a      	str	r2, [r3, #0]
 8006872:	e002      	b.n	800687a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2200      	movs	r2, #0
 8006878:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800687a:	4a04      	ldr	r2, [pc, #16]	; (800688c <prvSampleTimeNow+0x3c>)
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006880:	68fb      	ldr	r3, [r7, #12]
}
 8006882:	4618      	mov	r0, r3
 8006884:	3710      	adds	r7, #16
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}
 800688a:	bf00      	nop
 800688c:	20001868 	.word	0x20001868

08006890 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b086      	sub	sp, #24
 8006894:	af00      	add	r7, sp, #0
 8006896:	60f8      	str	r0, [r7, #12]
 8006898:	60b9      	str	r1, [r7, #8]
 800689a:	607a      	str	r2, [r7, #4]
 800689c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800689e:	2300      	movs	r3, #0
 80068a0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	68ba      	ldr	r2, [r7, #8]
 80068a6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	68fa      	ldr	r2, [r7, #12]
 80068ac:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80068ae:	68ba      	ldr	r2, [r7, #8]
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	429a      	cmp	r2, r3
 80068b4:	d812      	bhi.n	80068dc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80068b6:	687a      	ldr	r2, [r7, #4]
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	1ad2      	subs	r2, r2, r3
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	699b      	ldr	r3, [r3, #24]
 80068c0:	429a      	cmp	r2, r3
 80068c2:	d302      	bcc.n	80068ca <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80068c4:	2301      	movs	r3, #1
 80068c6:	617b      	str	r3, [r7, #20]
 80068c8:	e01b      	b.n	8006902 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80068ca:	4b10      	ldr	r3, [pc, #64]	; (800690c <prvInsertTimerInActiveList+0x7c>)
 80068cc:	681a      	ldr	r2, [r3, #0]
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	3304      	adds	r3, #4
 80068d2:	4619      	mov	r1, r3
 80068d4:	4610      	mov	r0, r2
 80068d6:	f7fe f87e 	bl	80049d6 <vListInsert>
 80068da:	e012      	b.n	8006902 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80068dc:	687a      	ldr	r2, [r7, #4]
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	429a      	cmp	r2, r3
 80068e2:	d206      	bcs.n	80068f2 <prvInsertTimerInActiveList+0x62>
 80068e4:	68ba      	ldr	r2, [r7, #8]
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	429a      	cmp	r2, r3
 80068ea:	d302      	bcc.n	80068f2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80068ec:	2301      	movs	r3, #1
 80068ee:	617b      	str	r3, [r7, #20]
 80068f0:	e007      	b.n	8006902 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80068f2:	4b07      	ldr	r3, [pc, #28]	; (8006910 <prvInsertTimerInActiveList+0x80>)
 80068f4:	681a      	ldr	r2, [r3, #0]
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	3304      	adds	r3, #4
 80068fa:	4619      	mov	r1, r3
 80068fc:	4610      	mov	r0, r2
 80068fe:	f7fe f86a 	bl	80049d6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006902:	697b      	ldr	r3, [r7, #20]
}
 8006904:	4618      	mov	r0, r3
 8006906:	3718      	adds	r7, #24
 8006908:	46bd      	mov	sp, r7
 800690a:	bd80      	pop	{r7, pc}
 800690c:	2000185c 	.word	0x2000185c
 8006910:	20001858 	.word	0x20001858

08006914 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b08e      	sub	sp, #56	; 0x38
 8006918:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800691a:	e0d0      	b.n	8006abe <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2b00      	cmp	r3, #0
 8006920:	da1a      	bge.n	8006958 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006922:	1d3b      	adds	r3, r7, #4
 8006924:	3304      	adds	r3, #4
 8006926:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800692a:	2b00      	cmp	r3, #0
 800692c:	d10c      	bne.n	8006948 <prvProcessReceivedCommands+0x34>
	__asm volatile
 800692e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006932:	b672      	cpsid	i
 8006934:	f383 8811 	msr	BASEPRI, r3
 8006938:	f3bf 8f6f 	isb	sy
 800693c:	f3bf 8f4f 	dsb	sy
 8006940:	b662      	cpsie	i
 8006942:	61fb      	str	r3, [r7, #28]
}
 8006944:	bf00      	nop
 8006946:	e7fe      	b.n	8006946 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800694e:	6850      	ldr	r0, [r2, #4]
 8006950:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006952:	6892      	ldr	r2, [r2, #8]
 8006954:	4611      	mov	r1, r2
 8006956:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2b00      	cmp	r3, #0
 800695c:	f2c0 80ae 	blt.w	8006abc <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006966:	695b      	ldr	r3, [r3, #20]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d004      	beq.n	8006976 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800696c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800696e:	3304      	adds	r3, #4
 8006970:	4618      	mov	r0, r3
 8006972:	f7fe f869 	bl	8004a48 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006976:	463b      	mov	r3, r7
 8006978:	4618      	mov	r0, r3
 800697a:	f7ff ff69 	bl	8006850 <prvSampleTimeNow>
 800697e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2b09      	cmp	r3, #9
 8006984:	f200 809b 	bhi.w	8006abe <prvProcessReceivedCommands+0x1aa>
 8006988:	a201      	add	r2, pc, #4	; (adr r2, 8006990 <prvProcessReceivedCommands+0x7c>)
 800698a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800698e:	bf00      	nop
 8006990:	080069b9 	.word	0x080069b9
 8006994:	080069b9 	.word	0x080069b9
 8006998:	080069b9 	.word	0x080069b9
 800699c:	08006a31 	.word	0x08006a31
 80069a0:	08006a45 	.word	0x08006a45
 80069a4:	08006a93 	.word	0x08006a93
 80069a8:	080069b9 	.word	0x080069b9
 80069ac:	080069b9 	.word	0x080069b9
 80069b0:	08006a31 	.word	0x08006a31
 80069b4:	08006a45 	.word	0x08006a45
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80069b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80069be:	f043 0301 	orr.w	r3, r3, #1
 80069c2:	b2da      	uxtb	r2, r3
 80069c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80069ca:	68ba      	ldr	r2, [r7, #8]
 80069cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ce:	699b      	ldr	r3, [r3, #24]
 80069d0:	18d1      	adds	r1, r2, r3
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80069d8:	f7ff ff5a 	bl	8006890 <prvInsertTimerInActiveList>
 80069dc:	4603      	mov	r3, r0
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d06d      	beq.n	8006abe <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80069e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069e4:	6a1b      	ldr	r3, [r3, #32]
 80069e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80069e8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80069ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80069f0:	f003 0304 	and.w	r3, r3, #4
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d062      	beq.n	8006abe <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80069f8:	68ba      	ldr	r2, [r7, #8]
 80069fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069fc:	699b      	ldr	r3, [r3, #24]
 80069fe:	441a      	add	r2, r3
 8006a00:	2300      	movs	r3, #0
 8006a02:	9300      	str	r3, [sp, #0]
 8006a04:	2300      	movs	r3, #0
 8006a06:	2100      	movs	r1, #0
 8006a08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a0a:	f7ff fdff 	bl	800660c <xTimerGenericCommand>
 8006a0e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006a10:	6a3b      	ldr	r3, [r7, #32]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d153      	bne.n	8006abe <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 8006a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a1a:	b672      	cpsid	i
 8006a1c:	f383 8811 	msr	BASEPRI, r3
 8006a20:	f3bf 8f6f 	isb	sy
 8006a24:	f3bf 8f4f 	dsb	sy
 8006a28:	b662      	cpsie	i
 8006a2a:	61bb      	str	r3, [r7, #24]
}
 8006a2c:	bf00      	nop
 8006a2e:	e7fe      	b.n	8006a2e <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a32:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a36:	f023 0301 	bic.w	r3, r3, #1
 8006a3a:	b2da      	uxtb	r2, r3
 8006a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a3e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006a42:	e03c      	b.n	8006abe <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a46:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a4a:	f043 0301 	orr.w	r3, r3, #1
 8006a4e:	b2da      	uxtb	r2, r3
 8006a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a52:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006a56:	68ba      	ldr	r2, [r7, #8]
 8006a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a5a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a5e:	699b      	ldr	r3, [r3, #24]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d10c      	bne.n	8006a7e <prvProcessReceivedCommands+0x16a>
	__asm volatile
 8006a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a68:	b672      	cpsid	i
 8006a6a:	f383 8811 	msr	BASEPRI, r3
 8006a6e:	f3bf 8f6f 	isb	sy
 8006a72:	f3bf 8f4f 	dsb	sy
 8006a76:	b662      	cpsie	i
 8006a78:	617b      	str	r3, [r7, #20]
}
 8006a7a:	bf00      	nop
 8006a7c:	e7fe      	b.n	8006a7c <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a80:	699a      	ldr	r2, [r3, #24]
 8006a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a84:	18d1      	adds	r1, r2, r3
 8006a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a8c:	f7ff ff00 	bl	8006890 <prvInsertTimerInActiveList>
					break;
 8006a90:	e015      	b.n	8006abe <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a98:	f003 0302 	and.w	r3, r3, #2
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d103      	bne.n	8006aa8 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 8006aa0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006aa2:	f000 fbc9 	bl	8007238 <vPortFree>
 8006aa6:	e00a      	b.n	8006abe <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aaa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006aae:	f023 0301 	bic.w	r3, r3, #1
 8006ab2:	b2da      	uxtb	r2, r3
 8006ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ab6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006aba:	e000      	b.n	8006abe <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006abc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006abe:	4b08      	ldr	r3, [pc, #32]	; (8006ae0 <prvProcessReceivedCommands+0x1cc>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	1d39      	adds	r1, r7, #4
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	f7fe fae0 	bl	800508c <xQueueReceive>
 8006acc:	4603      	mov	r3, r0
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	f47f af24 	bne.w	800691c <prvProcessReceivedCommands+0x8>
	}
}
 8006ad4:	bf00      	nop
 8006ad6:	bf00      	nop
 8006ad8:	3730      	adds	r7, #48	; 0x30
 8006ada:	46bd      	mov	sp, r7
 8006adc:	bd80      	pop	{r7, pc}
 8006ade:	bf00      	nop
 8006ae0:	20001860 	.word	0x20001860

08006ae4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b088      	sub	sp, #32
 8006ae8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006aea:	e04a      	b.n	8006b82 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006aec:	4b2e      	ldr	r3, [pc, #184]	; (8006ba8 <prvSwitchTimerLists+0xc4>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	68db      	ldr	r3, [r3, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006af6:	4b2c      	ldr	r3, [pc, #176]	; (8006ba8 <prvSwitchTimerLists+0xc4>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	68db      	ldr	r3, [r3, #12]
 8006afc:	68db      	ldr	r3, [r3, #12]
 8006afe:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	3304      	adds	r3, #4
 8006b04:	4618      	mov	r0, r3
 8006b06:	f7fd ff9f 	bl	8004a48 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	6a1b      	ldr	r3, [r3, #32]
 8006b0e:	68f8      	ldr	r0, [r7, #12]
 8006b10:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006b18:	f003 0304 	and.w	r3, r3, #4
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d030      	beq.n	8006b82 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	699b      	ldr	r3, [r3, #24]
 8006b24:	693a      	ldr	r2, [r7, #16]
 8006b26:	4413      	add	r3, r2
 8006b28:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006b2a:	68ba      	ldr	r2, [r7, #8]
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	429a      	cmp	r2, r3
 8006b30:	d90e      	bls.n	8006b50 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	68ba      	ldr	r2, [r7, #8]
 8006b36:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	68fa      	ldr	r2, [r7, #12]
 8006b3c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006b3e:	4b1a      	ldr	r3, [pc, #104]	; (8006ba8 <prvSwitchTimerLists+0xc4>)
 8006b40:	681a      	ldr	r2, [r3, #0]
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	3304      	adds	r3, #4
 8006b46:	4619      	mov	r1, r3
 8006b48:	4610      	mov	r0, r2
 8006b4a:	f7fd ff44 	bl	80049d6 <vListInsert>
 8006b4e:	e018      	b.n	8006b82 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006b50:	2300      	movs	r3, #0
 8006b52:	9300      	str	r3, [sp, #0]
 8006b54:	2300      	movs	r3, #0
 8006b56:	693a      	ldr	r2, [r7, #16]
 8006b58:	2100      	movs	r1, #0
 8006b5a:	68f8      	ldr	r0, [r7, #12]
 8006b5c:	f7ff fd56 	bl	800660c <xTimerGenericCommand>
 8006b60:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d10c      	bne.n	8006b82 <prvSwitchTimerLists+0x9e>
	__asm volatile
 8006b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b6c:	b672      	cpsid	i
 8006b6e:	f383 8811 	msr	BASEPRI, r3
 8006b72:	f3bf 8f6f 	isb	sy
 8006b76:	f3bf 8f4f 	dsb	sy
 8006b7a:	b662      	cpsie	i
 8006b7c:	603b      	str	r3, [r7, #0]
}
 8006b7e:	bf00      	nop
 8006b80:	e7fe      	b.n	8006b80 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006b82:	4b09      	ldr	r3, [pc, #36]	; (8006ba8 <prvSwitchTimerLists+0xc4>)
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d1af      	bne.n	8006aec <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006b8c:	4b06      	ldr	r3, [pc, #24]	; (8006ba8 <prvSwitchTimerLists+0xc4>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006b92:	4b06      	ldr	r3, [pc, #24]	; (8006bac <prvSwitchTimerLists+0xc8>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4a04      	ldr	r2, [pc, #16]	; (8006ba8 <prvSwitchTimerLists+0xc4>)
 8006b98:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006b9a:	4a04      	ldr	r2, [pc, #16]	; (8006bac <prvSwitchTimerLists+0xc8>)
 8006b9c:	697b      	ldr	r3, [r7, #20]
 8006b9e:	6013      	str	r3, [r2, #0]
}
 8006ba0:	bf00      	nop
 8006ba2:	3718      	adds	r7, #24
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	bd80      	pop	{r7, pc}
 8006ba8:	20001858 	.word	0x20001858
 8006bac:	2000185c 	.word	0x2000185c

08006bb0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b082      	sub	sp, #8
 8006bb4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006bb6:	f000 f949 	bl	8006e4c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006bba:	4b15      	ldr	r3, [pc, #84]	; (8006c10 <prvCheckForValidListAndQueue+0x60>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d120      	bne.n	8006c04 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006bc2:	4814      	ldr	r0, [pc, #80]	; (8006c14 <prvCheckForValidListAndQueue+0x64>)
 8006bc4:	f7fd feb6 	bl	8004934 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006bc8:	4813      	ldr	r0, [pc, #76]	; (8006c18 <prvCheckForValidListAndQueue+0x68>)
 8006bca:	f7fd feb3 	bl	8004934 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006bce:	4b13      	ldr	r3, [pc, #76]	; (8006c1c <prvCheckForValidListAndQueue+0x6c>)
 8006bd0:	4a10      	ldr	r2, [pc, #64]	; (8006c14 <prvCheckForValidListAndQueue+0x64>)
 8006bd2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006bd4:	4b12      	ldr	r3, [pc, #72]	; (8006c20 <prvCheckForValidListAndQueue+0x70>)
 8006bd6:	4a10      	ldr	r2, [pc, #64]	; (8006c18 <prvCheckForValidListAndQueue+0x68>)
 8006bd8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006bda:	2300      	movs	r3, #0
 8006bdc:	9300      	str	r3, [sp, #0]
 8006bde:	4b11      	ldr	r3, [pc, #68]	; (8006c24 <prvCheckForValidListAndQueue+0x74>)
 8006be0:	4a11      	ldr	r2, [pc, #68]	; (8006c28 <prvCheckForValidListAndQueue+0x78>)
 8006be2:	2110      	movs	r1, #16
 8006be4:	200a      	movs	r0, #10
 8006be6:	f7fd ffc3 	bl	8004b70 <xQueueGenericCreateStatic>
 8006bea:	4603      	mov	r3, r0
 8006bec:	4a08      	ldr	r2, [pc, #32]	; (8006c10 <prvCheckForValidListAndQueue+0x60>)
 8006bee:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006bf0:	4b07      	ldr	r3, [pc, #28]	; (8006c10 <prvCheckForValidListAndQueue+0x60>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d005      	beq.n	8006c04 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006bf8:	4b05      	ldr	r3, [pc, #20]	; (8006c10 <prvCheckForValidListAndQueue+0x60>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	490b      	ldr	r1, [pc, #44]	; (8006c2c <prvCheckForValidListAndQueue+0x7c>)
 8006bfe:	4618      	mov	r0, r3
 8006c00:	f7fe fc6a 	bl	80054d8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006c04:	f000 f956 	bl	8006eb4 <vPortExitCritical>
}
 8006c08:	bf00      	nop
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bd80      	pop	{r7, pc}
 8006c0e:	bf00      	nop
 8006c10:	20001860 	.word	0x20001860
 8006c14:	20001830 	.word	0x20001830
 8006c18:	20001844 	.word	0x20001844
 8006c1c:	20001858 	.word	0x20001858
 8006c20:	2000185c 	.word	0x2000185c
 8006c24:	2000190c 	.word	0x2000190c
 8006c28:	2000186c 	.word	0x2000186c
 8006c2c:	08009004 	.word	0x08009004

08006c30 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006c30:	b480      	push	{r7}
 8006c32:	b085      	sub	sp, #20
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	60f8      	str	r0, [r7, #12]
 8006c38:	60b9      	str	r1, [r7, #8]
 8006c3a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	3b04      	subs	r3, #4
 8006c40:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006c48:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	3b04      	subs	r3, #4
 8006c4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	f023 0201 	bic.w	r2, r3, #1
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	3b04      	subs	r3, #4
 8006c5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006c60:	4a0c      	ldr	r2, [pc, #48]	; (8006c94 <pxPortInitialiseStack+0x64>)
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	3b14      	subs	r3, #20
 8006c6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006c6c:	687a      	ldr	r2, [r7, #4]
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	3b04      	subs	r3, #4
 8006c76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	f06f 0202 	mvn.w	r2, #2
 8006c7e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	3b20      	subs	r3, #32
 8006c84:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006c86:	68fb      	ldr	r3, [r7, #12]
}
 8006c88:	4618      	mov	r0, r3
 8006c8a:	3714      	adds	r7, #20
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c92:	4770      	bx	lr
 8006c94:	08006c99 	.word	0x08006c99

08006c98 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b085      	sub	sp, #20
 8006c9c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006ca2:	4b14      	ldr	r3, [pc, #80]	; (8006cf4 <prvTaskExitError+0x5c>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006caa:	d00c      	beq.n	8006cc6 <prvTaskExitError+0x2e>
	__asm volatile
 8006cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cb0:	b672      	cpsid	i
 8006cb2:	f383 8811 	msr	BASEPRI, r3
 8006cb6:	f3bf 8f6f 	isb	sy
 8006cba:	f3bf 8f4f 	dsb	sy
 8006cbe:	b662      	cpsie	i
 8006cc0:	60fb      	str	r3, [r7, #12]
}
 8006cc2:	bf00      	nop
 8006cc4:	e7fe      	b.n	8006cc4 <prvTaskExitError+0x2c>
	__asm volatile
 8006cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cca:	b672      	cpsid	i
 8006ccc:	f383 8811 	msr	BASEPRI, r3
 8006cd0:	f3bf 8f6f 	isb	sy
 8006cd4:	f3bf 8f4f 	dsb	sy
 8006cd8:	b662      	cpsie	i
 8006cda:	60bb      	str	r3, [r7, #8]
}
 8006cdc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006cde:	bf00      	nop
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d0fc      	beq.n	8006ce0 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006ce6:	bf00      	nop
 8006ce8:	bf00      	nop
 8006cea:	3714      	adds	r7, #20
 8006cec:	46bd      	mov	sp, r7
 8006cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf2:	4770      	bx	lr
 8006cf4:	2000000c 	.word	0x2000000c
	...

08006d00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006d00:	4b07      	ldr	r3, [pc, #28]	; (8006d20 <pxCurrentTCBConst2>)
 8006d02:	6819      	ldr	r1, [r3, #0]
 8006d04:	6808      	ldr	r0, [r1, #0]
 8006d06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d0a:	f380 8809 	msr	PSP, r0
 8006d0e:	f3bf 8f6f 	isb	sy
 8006d12:	f04f 0000 	mov.w	r0, #0
 8006d16:	f380 8811 	msr	BASEPRI, r0
 8006d1a:	4770      	bx	lr
 8006d1c:	f3af 8000 	nop.w

08006d20 <pxCurrentTCBConst2>:
 8006d20:	20001330 	.word	0x20001330
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006d24:	bf00      	nop
 8006d26:	bf00      	nop

08006d28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006d28:	4808      	ldr	r0, [pc, #32]	; (8006d4c <prvPortStartFirstTask+0x24>)
 8006d2a:	6800      	ldr	r0, [r0, #0]
 8006d2c:	6800      	ldr	r0, [r0, #0]
 8006d2e:	f380 8808 	msr	MSP, r0
 8006d32:	f04f 0000 	mov.w	r0, #0
 8006d36:	f380 8814 	msr	CONTROL, r0
 8006d3a:	b662      	cpsie	i
 8006d3c:	b661      	cpsie	f
 8006d3e:	f3bf 8f4f 	dsb	sy
 8006d42:	f3bf 8f6f 	isb	sy
 8006d46:	df00      	svc	0
 8006d48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006d4a:	bf00      	nop
 8006d4c:	e000ed08 	.word	0xe000ed08

08006d50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b084      	sub	sp, #16
 8006d54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006d56:	4b37      	ldr	r3, [pc, #220]	; (8006e34 <xPortStartScheduler+0xe4>)
 8006d58:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	781b      	ldrb	r3, [r3, #0]
 8006d5e:	b2db      	uxtb	r3, r3
 8006d60:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	22ff      	movs	r2, #255	; 0xff
 8006d66:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	781b      	ldrb	r3, [r3, #0]
 8006d6c:	b2db      	uxtb	r3, r3
 8006d6e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006d70:	78fb      	ldrb	r3, [r7, #3]
 8006d72:	b2db      	uxtb	r3, r3
 8006d74:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006d78:	b2da      	uxtb	r2, r3
 8006d7a:	4b2f      	ldr	r3, [pc, #188]	; (8006e38 <xPortStartScheduler+0xe8>)
 8006d7c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006d7e:	4b2f      	ldr	r3, [pc, #188]	; (8006e3c <xPortStartScheduler+0xec>)
 8006d80:	2207      	movs	r2, #7
 8006d82:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006d84:	e009      	b.n	8006d9a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8006d86:	4b2d      	ldr	r3, [pc, #180]	; (8006e3c <xPortStartScheduler+0xec>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	3b01      	subs	r3, #1
 8006d8c:	4a2b      	ldr	r2, [pc, #172]	; (8006e3c <xPortStartScheduler+0xec>)
 8006d8e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006d90:	78fb      	ldrb	r3, [r7, #3]
 8006d92:	b2db      	uxtb	r3, r3
 8006d94:	005b      	lsls	r3, r3, #1
 8006d96:	b2db      	uxtb	r3, r3
 8006d98:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006d9a:	78fb      	ldrb	r3, [r7, #3]
 8006d9c:	b2db      	uxtb	r3, r3
 8006d9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006da2:	2b80      	cmp	r3, #128	; 0x80
 8006da4:	d0ef      	beq.n	8006d86 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006da6:	4b25      	ldr	r3, [pc, #148]	; (8006e3c <xPortStartScheduler+0xec>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f1c3 0307 	rsb	r3, r3, #7
 8006dae:	2b04      	cmp	r3, #4
 8006db0:	d00c      	beq.n	8006dcc <xPortStartScheduler+0x7c>
	__asm volatile
 8006db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006db6:	b672      	cpsid	i
 8006db8:	f383 8811 	msr	BASEPRI, r3
 8006dbc:	f3bf 8f6f 	isb	sy
 8006dc0:	f3bf 8f4f 	dsb	sy
 8006dc4:	b662      	cpsie	i
 8006dc6:	60bb      	str	r3, [r7, #8]
}
 8006dc8:	bf00      	nop
 8006dca:	e7fe      	b.n	8006dca <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006dcc:	4b1b      	ldr	r3, [pc, #108]	; (8006e3c <xPortStartScheduler+0xec>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	021b      	lsls	r3, r3, #8
 8006dd2:	4a1a      	ldr	r2, [pc, #104]	; (8006e3c <xPortStartScheduler+0xec>)
 8006dd4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006dd6:	4b19      	ldr	r3, [pc, #100]	; (8006e3c <xPortStartScheduler+0xec>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006dde:	4a17      	ldr	r2, [pc, #92]	; (8006e3c <xPortStartScheduler+0xec>)
 8006de0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	b2da      	uxtb	r2, r3
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006dea:	4b15      	ldr	r3, [pc, #84]	; (8006e40 <xPortStartScheduler+0xf0>)
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	4a14      	ldr	r2, [pc, #80]	; (8006e40 <xPortStartScheduler+0xf0>)
 8006df0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006df4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006df6:	4b12      	ldr	r3, [pc, #72]	; (8006e40 <xPortStartScheduler+0xf0>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4a11      	ldr	r2, [pc, #68]	; (8006e40 <xPortStartScheduler+0xf0>)
 8006dfc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006e00:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006e02:	f000 f8dd 	bl	8006fc0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006e06:	4b0f      	ldr	r3, [pc, #60]	; (8006e44 <xPortStartScheduler+0xf4>)
 8006e08:	2200      	movs	r2, #0
 8006e0a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006e0c:	f000 f8fc 	bl	8007008 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006e10:	4b0d      	ldr	r3, [pc, #52]	; (8006e48 <xPortStartScheduler+0xf8>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	4a0c      	ldr	r2, [pc, #48]	; (8006e48 <xPortStartScheduler+0xf8>)
 8006e16:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006e1a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006e1c:	f7ff ff84 	bl	8006d28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006e20:	f7fe ffee 	bl	8005e00 <vTaskSwitchContext>
	prvTaskExitError();
 8006e24:	f7ff ff38 	bl	8006c98 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006e28:	2300      	movs	r3, #0
}
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	3710      	adds	r7, #16
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bd80      	pop	{r7, pc}
 8006e32:	bf00      	nop
 8006e34:	e000e400 	.word	0xe000e400
 8006e38:	2000195c 	.word	0x2000195c
 8006e3c:	20001960 	.word	0x20001960
 8006e40:	e000ed20 	.word	0xe000ed20
 8006e44:	2000000c 	.word	0x2000000c
 8006e48:	e000ef34 	.word	0xe000ef34

08006e4c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	b083      	sub	sp, #12
 8006e50:	af00      	add	r7, sp, #0
	__asm volatile
 8006e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e56:	b672      	cpsid	i
 8006e58:	f383 8811 	msr	BASEPRI, r3
 8006e5c:	f3bf 8f6f 	isb	sy
 8006e60:	f3bf 8f4f 	dsb	sy
 8006e64:	b662      	cpsie	i
 8006e66:	607b      	str	r3, [r7, #4]
}
 8006e68:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006e6a:	4b10      	ldr	r3, [pc, #64]	; (8006eac <vPortEnterCritical+0x60>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	3301      	adds	r3, #1
 8006e70:	4a0e      	ldr	r2, [pc, #56]	; (8006eac <vPortEnterCritical+0x60>)
 8006e72:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006e74:	4b0d      	ldr	r3, [pc, #52]	; (8006eac <vPortEnterCritical+0x60>)
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	2b01      	cmp	r3, #1
 8006e7a:	d111      	bne.n	8006ea0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006e7c:	4b0c      	ldr	r3, [pc, #48]	; (8006eb0 <vPortEnterCritical+0x64>)
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	b2db      	uxtb	r3, r3
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d00c      	beq.n	8006ea0 <vPortEnterCritical+0x54>
	__asm volatile
 8006e86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e8a:	b672      	cpsid	i
 8006e8c:	f383 8811 	msr	BASEPRI, r3
 8006e90:	f3bf 8f6f 	isb	sy
 8006e94:	f3bf 8f4f 	dsb	sy
 8006e98:	b662      	cpsie	i
 8006e9a:	603b      	str	r3, [r7, #0]
}
 8006e9c:	bf00      	nop
 8006e9e:	e7fe      	b.n	8006e9e <vPortEnterCritical+0x52>
	}
}
 8006ea0:	bf00      	nop
 8006ea2:	370c      	adds	r7, #12
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eaa:	4770      	bx	lr
 8006eac:	2000000c 	.word	0x2000000c
 8006eb0:	e000ed04 	.word	0xe000ed04

08006eb4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	b083      	sub	sp, #12
 8006eb8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006eba:	4b13      	ldr	r3, [pc, #76]	; (8006f08 <vPortExitCritical+0x54>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d10c      	bne.n	8006edc <vPortExitCritical+0x28>
	__asm volatile
 8006ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ec6:	b672      	cpsid	i
 8006ec8:	f383 8811 	msr	BASEPRI, r3
 8006ecc:	f3bf 8f6f 	isb	sy
 8006ed0:	f3bf 8f4f 	dsb	sy
 8006ed4:	b662      	cpsie	i
 8006ed6:	607b      	str	r3, [r7, #4]
}
 8006ed8:	bf00      	nop
 8006eda:	e7fe      	b.n	8006eda <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8006edc:	4b0a      	ldr	r3, [pc, #40]	; (8006f08 <vPortExitCritical+0x54>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	3b01      	subs	r3, #1
 8006ee2:	4a09      	ldr	r2, [pc, #36]	; (8006f08 <vPortExitCritical+0x54>)
 8006ee4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006ee6:	4b08      	ldr	r3, [pc, #32]	; (8006f08 <vPortExitCritical+0x54>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d105      	bne.n	8006efa <vPortExitCritical+0x46>
 8006eee:	2300      	movs	r3, #0
 8006ef0:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	f383 8811 	msr	BASEPRI, r3
}
 8006ef8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006efa:	bf00      	nop
 8006efc:	370c      	adds	r7, #12
 8006efe:	46bd      	mov	sp, r7
 8006f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f04:	4770      	bx	lr
 8006f06:	bf00      	nop
 8006f08:	2000000c 	.word	0x2000000c
 8006f0c:	00000000 	.word	0x00000000

08006f10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006f10:	f3ef 8009 	mrs	r0, PSP
 8006f14:	f3bf 8f6f 	isb	sy
 8006f18:	4b15      	ldr	r3, [pc, #84]	; (8006f70 <pxCurrentTCBConst>)
 8006f1a:	681a      	ldr	r2, [r3, #0]
 8006f1c:	f01e 0f10 	tst.w	lr, #16
 8006f20:	bf08      	it	eq
 8006f22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006f26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f2a:	6010      	str	r0, [r2, #0]
 8006f2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006f30:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006f34:	b672      	cpsid	i
 8006f36:	f380 8811 	msr	BASEPRI, r0
 8006f3a:	f3bf 8f4f 	dsb	sy
 8006f3e:	f3bf 8f6f 	isb	sy
 8006f42:	b662      	cpsie	i
 8006f44:	f7fe ff5c 	bl	8005e00 <vTaskSwitchContext>
 8006f48:	f04f 0000 	mov.w	r0, #0
 8006f4c:	f380 8811 	msr	BASEPRI, r0
 8006f50:	bc09      	pop	{r0, r3}
 8006f52:	6819      	ldr	r1, [r3, #0]
 8006f54:	6808      	ldr	r0, [r1, #0]
 8006f56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f5a:	f01e 0f10 	tst.w	lr, #16
 8006f5e:	bf08      	it	eq
 8006f60:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006f64:	f380 8809 	msr	PSP, r0
 8006f68:	f3bf 8f6f 	isb	sy
 8006f6c:	4770      	bx	lr
 8006f6e:	bf00      	nop

08006f70 <pxCurrentTCBConst>:
 8006f70:	20001330 	.word	0x20001330
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006f74:	bf00      	nop
 8006f76:	bf00      	nop

08006f78 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b082      	sub	sp, #8
 8006f7c:	af00      	add	r7, sp, #0
	__asm volatile
 8006f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f82:	b672      	cpsid	i
 8006f84:	f383 8811 	msr	BASEPRI, r3
 8006f88:	f3bf 8f6f 	isb	sy
 8006f8c:	f3bf 8f4f 	dsb	sy
 8006f90:	b662      	cpsie	i
 8006f92:	607b      	str	r3, [r7, #4]
}
 8006f94:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006f96:	f7fe fe73 	bl	8005c80 <xTaskIncrementTick>
 8006f9a:	4603      	mov	r3, r0
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d003      	beq.n	8006fa8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006fa0:	4b06      	ldr	r3, [pc, #24]	; (8006fbc <SysTick_Handler+0x44>)
 8006fa2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fa6:	601a      	str	r2, [r3, #0]
 8006fa8:	2300      	movs	r3, #0
 8006faa:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	f383 8811 	msr	BASEPRI, r3
}
 8006fb2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006fb4:	bf00      	nop
 8006fb6:	3708      	adds	r7, #8
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bd80      	pop	{r7, pc}
 8006fbc:	e000ed04 	.word	0xe000ed04

08006fc0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006fc4:	4b0b      	ldr	r3, [pc, #44]	; (8006ff4 <vPortSetupTimerInterrupt+0x34>)
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006fca:	4b0b      	ldr	r3, [pc, #44]	; (8006ff8 <vPortSetupTimerInterrupt+0x38>)
 8006fcc:	2200      	movs	r2, #0
 8006fce:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006fd0:	4b0a      	ldr	r3, [pc, #40]	; (8006ffc <vPortSetupTimerInterrupt+0x3c>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4a0a      	ldr	r2, [pc, #40]	; (8007000 <vPortSetupTimerInterrupt+0x40>)
 8006fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8006fda:	099b      	lsrs	r3, r3, #6
 8006fdc:	4a09      	ldr	r2, [pc, #36]	; (8007004 <vPortSetupTimerInterrupt+0x44>)
 8006fde:	3b01      	subs	r3, #1
 8006fe0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006fe2:	4b04      	ldr	r3, [pc, #16]	; (8006ff4 <vPortSetupTimerInterrupt+0x34>)
 8006fe4:	2207      	movs	r2, #7
 8006fe6:	601a      	str	r2, [r3, #0]
}
 8006fe8:	bf00      	nop
 8006fea:	46bd      	mov	sp, r7
 8006fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff0:	4770      	bx	lr
 8006ff2:	bf00      	nop
 8006ff4:	e000e010 	.word	0xe000e010
 8006ff8:	e000e018 	.word	0xe000e018
 8006ffc:	20000000 	.word	0x20000000
 8007000:	10624dd3 	.word	0x10624dd3
 8007004:	e000e014 	.word	0xe000e014

08007008 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007008:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007018 <vPortEnableVFP+0x10>
 800700c:	6801      	ldr	r1, [r0, #0]
 800700e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007012:	6001      	str	r1, [r0, #0]
 8007014:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007016:	bf00      	nop
 8007018:	e000ed88 	.word	0xe000ed88

0800701c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800701c:	b480      	push	{r7}
 800701e:	b085      	sub	sp, #20
 8007020:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007022:	f3ef 8305 	mrs	r3, IPSR
 8007026:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	2b0f      	cmp	r3, #15
 800702c:	d916      	bls.n	800705c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800702e:	4a19      	ldr	r2, [pc, #100]	; (8007094 <vPortValidateInterruptPriority+0x78>)
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	4413      	add	r3, r2
 8007034:	781b      	ldrb	r3, [r3, #0]
 8007036:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007038:	4b17      	ldr	r3, [pc, #92]	; (8007098 <vPortValidateInterruptPriority+0x7c>)
 800703a:	781b      	ldrb	r3, [r3, #0]
 800703c:	7afa      	ldrb	r2, [r7, #11]
 800703e:	429a      	cmp	r2, r3
 8007040:	d20c      	bcs.n	800705c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8007042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007046:	b672      	cpsid	i
 8007048:	f383 8811 	msr	BASEPRI, r3
 800704c:	f3bf 8f6f 	isb	sy
 8007050:	f3bf 8f4f 	dsb	sy
 8007054:	b662      	cpsie	i
 8007056:	607b      	str	r3, [r7, #4]
}
 8007058:	bf00      	nop
 800705a:	e7fe      	b.n	800705a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800705c:	4b0f      	ldr	r3, [pc, #60]	; (800709c <vPortValidateInterruptPriority+0x80>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007064:	4b0e      	ldr	r3, [pc, #56]	; (80070a0 <vPortValidateInterruptPriority+0x84>)
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	429a      	cmp	r2, r3
 800706a:	d90c      	bls.n	8007086 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800706c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007070:	b672      	cpsid	i
 8007072:	f383 8811 	msr	BASEPRI, r3
 8007076:	f3bf 8f6f 	isb	sy
 800707a:	f3bf 8f4f 	dsb	sy
 800707e:	b662      	cpsie	i
 8007080:	603b      	str	r3, [r7, #0]
}
 8007082:	bf00      	nop
 8007084:	e7fe      	b.n	8007084 <vPortValidateInterruptPriority+0x68>
	}
 8007086:	bf00      	nop
 8007088:	3714      	adds	r7, #20
 800708a:	46bd      	mov	sp, r7
 800708c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007090:	4770      	bx	lr
 8007092:	bf00      	nop
 8007094:	e000e3f0 	.word	0xe000e3f0
 8007098:	2000195c 	.word	0x2000195c
 800709c:	e000ed0c 	.word	0xe000ed0c
 80070a0:	20001960 	.word	0x20001960

080070a4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b08a      	sub	sp, #40	; 0x28
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80070ac:	2300      	movs	r3, #0
 80070ae:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80070b0:	f7fe fd12 	bl	8005ad8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80070b4:	4b5b      	ldr	r3, [pc, #364]	; (8007224 <pvPortMalloc+0x180>)
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d101      	bne.n	80070c0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80070bc:	f000 f91a 	bl	80072f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80070c0:	4b59      	ldr	r3, [pc, #356]	; (8007228 <pvPortMalloc+0x184>)
 80070c2:	681a      	ldr	r2, [r3, #0]
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	4013      	ands	r3, r2
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	f040 8092 	bne.w	80071f2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d01f      	beq.n	8007114 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 80070d4:	2208      	movs	r2, #8
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	4413      	add	r3, r2
 80070da:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	f003 0307 	and.w	r3, r3, #7
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d016      	beq.n	8007114 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	f023 0307 	bic.w	r3, r3, #7
 80070ec:	3308      	adds	r3, #8
 80070ee:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	f003 0307 	and.w	r3, r3, #7
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d00c      	beq.n	8007114 <pvPortMalloc+0x70>
	__asm volatile
 80070fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070fe:	b672      	cpsid	i
 8007100:	f383 8811 	msr	BASEPRI, r3
 8007104:	f3bf 8f6f 	isb	sy
 8007108:	f3bf 8f4f 	dsb	sy
 800710c:	b662      	cpsie	i
 800710e:	617b      	str	r3, [r7, #20]
}
 8007110:	bf00      	nop
 8007112:	e7fe      	b.n	8007112 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d06b      	beq.n	80071f2 <pvPortMalloc+0x14e>
 800711a:	4b44      	ldr	r3, [pc, #272]	; (800722c <pvPortMalloc+0x188>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	687a      	ldr	r2, [r7, #4]
 8007120:	429a      	cmp	r2, r3
 8007122:	d866      	bhi.n	80071f2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007124:	4b42      	ldr	r3, [pc, #264]	; (8007230 <pvPortMalloc+0x18c>)
 8007126:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007128:	4b41      	ldr	r3, [pc, #260]	; (8007230 <pvPortMalloc+0x18c>)
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800712e:	e004      	b.n	800713a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8007130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007132:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800713a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800713c:	685b      	ldr	r3, [r3, #4]
 800713e:	687a      	ldr	r2, [r7, #4]
 8007140:	429a      	cmp	r2, r3
 8007142:	d903      	bls.n	800714c <pvPortMalloc+0xa8>
 8007144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d1f1      	bne.n	8007130 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800714c:	4b35      	ldr	r3, [pc, #212]	; (8007224 <pvPortMalloc+0x180>)
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007152:	429a      	cmp	r2, r3
 8007154:	d04d      	beq.n	80071f2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007156:	6a3b      	ldr	r3, [r7, #32]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	2208      	movs	r2, #8
 800715c:	4413      	add	r3, r2
 800715e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007162:	681a      	ldr	r2, [r3, #0]
 8007164:	6a3b      	ldr	r3, [r7, #32]
 8007166:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800716a:	685a      	ldr	r2, [r3, #4]
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	1ad2      	subs	r2, r2, r3
 8007170:	2308      	movs	r3, #8
 8007172:	005b      	lsls	r3, r3, #1
 8007174:	429a      	cmp	r2, r3
 8007176:	d921      	bls.n	80071bc <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007178:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	4413      	add	r3, r2
 800717e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007180:	69bb      	ldr	r3, [r7, #24]
 8007182:	f003 0307 	and.w	r3, r3, #7
 8007186:	2b00      	cmp	r3, #0
 8007188:	d00c      	beq.n	80071a4 <pvPortMalloc+0x100>
	__asm volatile
 800718a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800718e:	b672      	cpsid	i
 8007190:	f383 8811 	msr	BASEPRI, r3
 8007194:	f3bf 8f6f 	isb	sy
 8007198:	f3bf 8f4f 	dsb	sy
 800719c:	b662      	cpsie	i
 800719e:	613b      	str	r3, [r7, #16]
}
 80071a0:	bf00      	nop
 80071a2:	e7fe      	b.n	80071a2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80071a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071a6:	685a      	ldr	r2, [r3, #4]
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	1ad2      	subs	r2, r2, r3
 80071ac:	69bb      	ldr	r3, [r7, #24]
 80071ae:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80071b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071b2:	687a      	ldr	r2, [r7, #4]
 80071b4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80071b6:	69b8      	ldr	r0, [r7, #24]
 80071b8:	f000 f8fe 	bl	80073b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80071bc:	4b1b      	ldr	r3, [pc, #108]	; (800722c <pvPortMalloc+0x188>)
 80071be:	681a      	ldr	r2, [r3, #0]
 80071c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071c2:	685b      	ldr	r3, [r3, #4]
 80071c4:	1ad3      	subs	r3, r2, r3
 80071c6:	4a19      	ldr	r2, [pc, #100]	; (800722c <pvPortMalloc+0x188>)
 80071c8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80071ca:	4b18      	ldr	r3, [pc, #96]	; (800722c <pvPortMalloc+0x188>)
 80071cc:	681a      	ldr	r2, [r3, #0]
 80071ce:	4b19      	ldr	r3, [pc, #100]	; (8007234 <pvPortMalloc+0x190>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	429a      	cmp	r2, r3
 80071d4:	d203      	bcs.n	80071de <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80071d6:	4b15      	ldr	r3, [pc, #84]	; (800722c <pvPortMalloc+0x188>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	4a16      	ldr	r2, [pc, #88]	; (8007234 <pvPortMalloc+0x190>)
 80071dc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80071de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e0:	685a      	ldr	r2, [r3, #4]
 80071e2:	4b11      	ldr	r3, [pc, #68]	; (8007228 <pvPortMalloc+0x184>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	431a      	orrs	r2, r3
 80071e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ea:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80071ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ee:	2200      	movs	r2, #0
 80071f0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80071f2:	f7fe fc7f 	bl	8005af4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80071f6:	69fb      	ldr	r3, [r7, #28]
 80071f8:	f003 0307 	and.w	r3, r3, #7
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d00c      	beq.n	800721a <pvPortMalloc+0x176>
	__asm volatile
 8007200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007204:	b672      	cpsid	i
 8007206:	f383 8811 	msr	BASEPRI, r3
 800720a:	f3bf 8f6f 	isb	sy
 800720e:	f3bf 8f4f 	dsb	sy
 8007212:	b662      	cpsie	i
 8007214:	60fb      	str	r3, [r7, #12]
}
 8007216:	bf00      	nop
 8007218:	e7fe      	b.n	8007218 <pvPortMalloc+0x174>
	return pvReturn;
 800721a:	69fb      	ldr	r3, [r7, #28]
}
 800721c:	4618      	mov	r0, r3
 800721e:	3728      	adds	r7, #40	; 0x28
 8007220:	46bd      	mov	sp, r7
 8007222:	bd80      	pop	{r7, pc}
 8007224:	2000556c 	.word	0x2000556c
 8007228:	20005578 	.word	0x20005578
 800722c:	20005570 	.word	0x20005570
 8007230:	20005564 	.word	0x20005564
 8007234:	20005574 	.word	0x20005574

08007238 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b086      	sub	sp, #24
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d04c      	beq.n	80072e4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800724a:	2308      	movs	r3, #8
 800724c:	425b      	negs	r3, r3
 800724e:	697a      	ldr	r2, [r7, #20]
 8007250:	4413      	add	r3, r2
 8007252:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007254:	697b      	ldr	r3, [r7, #20]
 8007256:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007258:	693b      	ldr	r3, [r7, #16]
 800725a:	685a      	ldr	r2, [r3, #4]
 800725c:	4b23      	ldr	r3, [pc, #140]	; (80072ec <vPortFree+0xb4>)
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	4013      	ands	r3, r2
 8007262:	2b00      	cmp	r3, #0
 8007264:	d10c      	bne.n	8007280 <vPortFree+0x48>
	__asm volatile
 8007266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800726a:	b672      	cpsid	i
 800726c:	f383 8811 	msr	BASEPRI, r3
 8007270:	f3bf 8f6f 	isb	sy
 8007274:	f3bf 8f4f 	dsb	sy
 8007278:	b662      	cpsie	i
 800727a:	60fb      	str	r3, [r7, #12]
}
 800727c:	bf00      	nop
 800727e:	e7fe      	b.n	800727e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007280:	693b      	ldr	r3, [r7, #16]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d00c      	beq.n	80072a2 <vPortFree+0x6a>
	__asm volatile
 8007288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800728c:	b672      	cpsid	i
 800728e:	f383 8811 	msr	BASEPRI, r3
 8007292:	f3bf 8f6f 	isb	sy
 8007296:	f3bf 8f4f 	dsb	sy
 800729a:	b662      	cpsie	i
 800729c:	60bb      	str	r3, [r7, #8]
}
 800729e:	bf00      	nop
 80072a0:	e7fe      	b.n	80072a0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80072a2:	693b      	ldr	r3, [r7, #16]
 80072a4:	685a      	ldr	r2, [r3, #4]
 80072a6:	4b11      	ldr	r3, [pc, #68]	; (80072ec <vPortFree+0xb4>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	4013      	ands	r3, r2
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d019      	beq.n	80072e4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80072b0:	693b      	ldr	r3, [r7, #16]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d115      	bne.n	80072e4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80072b8:	693b      	ldr	r3, [r7, #16]
 80072ba:	685a      	ldr	r2, [r3, #4]
 80072bc:	4b0b      	ldr	r3, [pc, #44]	; (80072ec <vPortFree+0xb4>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	43db      	mvns	r3, r3
 80072c2:	401a      	ands	r2, r3
 80072c4:	693b      	ldr	r3, [r7, #16]
 80072c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80072c8:	f7fe fc06 	bl	8005ad8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80072cc:	693b      	ldr	r3, [r7, #16]
 80072ce:	685a      	ldr	r2, [r3, #4]
 80072d0:	4b07      	ldr	r3, [pc, #28]	; (80072f0 <vPortFree+0xb8>)
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	4413      	add	r3, r2
 80072d6:	4a06      	ldr	r2, [pc, #24]	; (80072f0 <vPortFree+0xb8>)
 80072d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80072da:	6938      	ldr	r0, [r7, #16]
 80072dc:	f000 f86c 	bl	80073b8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80072e0:	f7fe fc08 	bl	8005af4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80072e4:	bf00      	nop
 80072e6:	3718      	adds	r7, #24
 80072e8:	46bd      	mov	sp, r7
 80072ea:	bd80      	pop	{r7, pc}
 80072ec:	20005578 	.word	0x20005578
 80072f0:	20005570 	.word	0x20005570

080072f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80072f4:	b480      	push	{r7}
 80072f6:	b085      	sub	sp, #20
 80072f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80072fa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80072fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007300:	4b27      	ldr	r3, [pc, #156]	; (80073a0 <prvHeapInit+0xac>)
 8007302:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	f003 0307 	and.w	r3, r3, #7
 800730a:	2b00      	cmp	r3, #0
 800730c:	d00c      	beq.n	8007328 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	3307      	adds	r3, #7
 8007312:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	f023 0307 	bic.w	r3, r3, #7
 800731a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800731c:	68ba      	ldr	r2, [r7, #8]
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	1ad3      	subs	r3, r2, r3
 8007322:	4a1f      	ldr	r2, [pc, #124]	; (80073a0 <prvHeapInit+0xac>)
 8007324:	4413      	add	r3, r2
 8007326:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800732c:	4a1d      	ldr	r2, [pc, #116]	; (80073a4 <prvHeapInit+0xb0>)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007332:	4b1c      	ldr	r3, [pc, #112]	; (80073a4 <prvHeapInit+0xb0>)
 8007334:	2200      	movs	r2, #0
 8007336:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	68ba      	ldr	r2, [r7, #8]
 800733c:	4413      	add	r3, r2
 800733e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007340:	2208      	movs	r2, #8
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	1a9b      	subs	r3, r3, r2
 8007346:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	f023 0307 	bic.w	r3, r3, #7
 800734e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	4a15      	ldr	r2, [pc, #84]	; (80073a8 <prvHeapInit+0xb4>)
 8007354:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007356:	4b14      	ldr	r3, [pc, #80]	; (80073a8 <prvHeapInit+0xb4>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	2200      	movs	r2, #0
 800735c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800735e:	4b12      	ldr	r3, [pc, #72]	; (80073a8 <prvHeapInit+0xb4>)
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	2200      	movs	r2, #0
 8007364:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	68fa      	ldr	r2, [r7, #12]
 800736e:	1ad2      	subs	r2, r2, r3
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007374:	4b0c      	ldr	r3, [pc, #48]	; (80073a8 <prvHeapInit+0xb4>)
 8007376:	681a      	ldr	r2, [r3, #0]
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	685b      	ldr	r3, [r3, #4]
 8007380:	4a0a      	ldr	r2, [pc, #40]	; (80073ac <prvHeapInit+0xb8>)
 8007382:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	685b      	ldr	r3, [r3, #4]
 8007388:	4a09      	ldr	r2, [pc, #36]	; (80073b0 <prvHeapInit+0xbc>)
 800738a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800738c:	4b09      	ldr	r3, [pc, #36]	; (80073b4 <prvHeapInit+0xc0>)
 800738e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007392:	601a      	str	r2, [r3, #0]
}
 8007394:	bf00      	nop
 8007396:	3714      	adds	r7, #20
 8007398:	46bd      	mov	sp, r7
 800739a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739e:	4770      	bx	lr
 80073a0:	20001964 	.word	0x20001964
 80073a4:	20005564 	.word	0x20005564
 80073a8:	2000556c 	.word	0x2000556c
 80073ac:	20005574 	.word	0x20005574
 80073b0:	20005570 	.word	0x20005570
 80073b4:	20005578 	.word	0x20005578

080073b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80073b8:	b480      	push	{r7}
 80073ba:	b085      	sub	sp, #20
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80073c0:	4b28      	ldr	r3, [pc, #160]	; (8007464 <prvInsertBlockIntoFreeList+0xac>)
 80073c2:	60fb      	str	r3, [r7, #12]
 80073c4:	e002      	b.n	80073cc <prvInsertBlockIntoFreeList+0x14>
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	60fb      	str	r3, [r7, #12]
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	687a      	ldr	r2, [r7, #4]
 80073d2:	429a      	cmp	r2, r3
 80073d4:	d8f7      	bhi.n	80073c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	685b      	ldr	r3, [r3, #4]
 80073de:	68ba      	ldr	r2, [r7, #8]
 80073e0:	4413      	add	r3, r2
 80073e2:	687a      	ldr	r2, [r7, #4]
 80073e4:	429a      	cmp	r2, r3
 80073e6:	d108      	bne.n	80073fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	685a      	ldr	r2, [r3, #4]
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	685b      	ldr	r3, [r3, #4]
 80073f0:	441a      	add	r2, r3
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	685b      	ldr	r3, [r3, #4]
 8007402:	68ba      	ldr	r2, [r7, #8]
 8007404:	441a      	add	r2, r3
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	429a      	cmp	r2, r3
 800740c:	d118      	bne.n	8007440 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681a      	ldr	r2, [r3, #0]
 8007412:	4b15      	ldr	r3, [pc, #84]	; (8007468 <prvInsertBlockIntoFreeList+0xb0>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	429a      	cmp	r2, r3
 8007418:	d00d      	beq.n	8007436 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	685a      	ldr	r2, [r3, #4]
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	685b      	ldr	r3, [r3, #4]
 8007424:	441a      	add	r2, r3
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	681a      	ldr	r2, [r3, #0]
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	601a      	str	r2, [r3, #0]
 8007434:	e008      	b.n	8007448 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007436:	4b0c      	ldr	r3, [pc, #48]	; (8007468 <prvInsertBlockIntoFreeList+0xb0>)
 8007438:	681a      	ldr	r2, [r3, #0]
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	601a      	str	r2, [r3, #0]
 800743e:	e003      	b.n	8007448 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	681a      	ldr	r2, [r3, #0]
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007448:	68fa      	ldr	r2, [r7, #12]
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	429a      	cmp	r2, r3
 800744e:	d002      	beq.n	8007456 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	687a      	ldr	r2, [r7, #4]
 8007454:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007456:	bf00      	nop
 8007458:	3714      	adds	r7, #20
 800745a:	46bd      	mov	sp, r7
 800745c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007460:	4770      	bx	lr
 8007462:	bf00      	nop
 8007464:	20005564 	.word	0x20005564
 8007468:	2000556c 	.word	0x2000556c

0800746c <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 800746c:	b580      	push	{r7, lr}
 800746e:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8007470:	4803      	ldr	r0, [pc, #12]	; (8007480 <_cbSendSystemDesc+0x14>)
 8007472:	f001 fa05 	bl	8008880 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8007476:	4803      	ldr	r0, [pc, #12]	; (8007484 <_cbSendSystemDesc+0x18>)
 8007478:	f001 fa02 	bl	8008880 <SEGGER_SYSVIEW_SendSysDesc>
}
 800747c:	bf00      	nop
 800747e:	bd80      	pop	{r7, pc}
 8007480:	0800900c 	.word	0x0800900c
 8007484:	08009048 	.word	0x08009048

08007488 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8007488:	b580      	push	{r7, lr}
 800748a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 800748c:	4b06      	ldr	r3, [pc, #24]	; (80074a8 <SEGGER_SYSVIEW_Conf+0x20>)
 800748e:	6818      	ldr	r0, [r3, #0]
 8007490:	4b05      	ldr	r3, [pc, #20]	; (80074a8 <SEGGER_SYSVIEW_Conf+0x20>)
 8007492:	6819      	ldr	r1, [r3, #0]
 8007494:	4b05      	ldr	r3, [pc, #20]	; (80074ac <SEGGER_SYSVIEW_Conf+0x24>)
 8007496:	4a06      	ldr	r2, [pc, #24]	; (80074b0 <SEGGER_SYSVIEW_Conf+0x28>)
 8007498:	f000 fd72 	bl	8007f80 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 800749c:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 80074a0:	f000 fdac 	bl	8007ffc <SEGGER_SYSVIEW_SetRAMBase>
}
 80074a4:	bf00      	nop
 80074a6:	bd80      	pop	{r7, pc}
 80074a8:	20000000 	.word	0x20000000
 80074ac:	0800746d 	.word	0x0800746d
 80074b0:	08009178 	.word	0x08009178

080074b4 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 80074b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80074b6:	b085      	sub	sp, #20
 80074b8:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 80074ba:	2300      	movs	r3, #0
 80074bc:	607b      	str	r3, [r7, #4]
 80074be:	e048      	b.n	8007552 <_cbSendTaskList+0x9e>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
 80074c0:	4929      	ldr	r1, [pc, #164]	; (8007568 <_cbSendTaskList+0xb4>)
 80074c2:	687a      	ldr	r2, [r7, #4]
 80074c4:	4613      	mov	r3, r2
 80074c6:	009b      	lsls	r3, r3, #2
 80074c8:	4413      	add	r3, r2
 80074ca:	009b      	lsls	r3, r3, #2
 80074cc:	440b      	add	r3, r1
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	4618      	mov	r0, r3
 80074d2:	f7fe fef3 	bl	80062bc <uxTaskGetStackHighWaterMark>
 80074d6:	4601      	mov	r1, r0
 80074d8:	4823      	ldr	r0, [pc, #140]	; (8007568 <_cbSendTaskList+0xb4>)
 80074da:	687a      	ldr	r2, [r7, #4]
 80074dc:	4613      	mov	r3, r2
 80074de:	009b      	lsls	r3, r3, #2
 80074e0:	4413      	add	r3, r2
 80074e2:	009b      	lsls	r3, r3, #2
 80074e4:	4403      	add	r3, r0
 80074e6:	3310      	adds	r3, #16
 80074e8:	6019      	str	r1, [r3, #0]
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 80074ea:	491f      	ldr	r1, [pc, #124]	; (8007568 <_cbSendTaskList+0xb4>)
 80074ec:	687a      	ldr	r2, [r7, #4]
 80074ee:	4613      	mov	r3, r2
 80074f0:	009b      	lsls	r3, r3, #2
 80074f2:	4413      	add	r3, r2
 80074f4:	009b      	lsls	r3, r3, #2
 80074f6:	440b      	add	r3, r1
 80074f8:	6818      	ldr	r0, [r3, #0]
 80074fa:	491b      	ldr	r1, [pc, #108]	; (8007568 <_cbSendTaskList+0xb4>)
 80074fc:	687a      	ldr	r2, [r7, #4]
 80074fe:	4613      	mov	r3, r2
 8007500:	009b      	lsls	r3, r3, #2
 8007502:	4413      	add	r3, r2
 8007504:	009b      	lsls	r3, r3, #2
 8007506:	440b      	add	r3, r1
 8007508:	3304      	adds	r3, #4
 800750a:	6819      	ldr	r1, [r3, #0]
 800750c:	4c16      	ldr	r4, [pc, #88]	; (8007568 <_cbSendTaskList+0xb4>)
 800750e:	687a      	ldr	r2, [r7, #4]
 8007510:	4613      	mov	r3, r2
 8007512:	009b      	lsls	r3, r3, #2
 8007514:	4413      	add	r3, r2
 8007516:	009b      	lsls	r3, r3, #2
 8007518:	4423      	add	r3, r4
 800751a:	3308      	adds	r3, #8
 800751c:	681c      	ldr	r4, [r3, #0]
 800751e:	4d12      	ldr	r5, [pc, #72]	; (8007568 <_cbSendTaskList+0xb4>)
 8007520:	687a      	ldr	r2, [r7, #4]
 8007522:	4613      	mov	r3, r2
 8007524:	009b      	lsls	r3, r3, #2
 8007526:	4413      	add	r3, r2
 8007528:	009b      	lsls	r3, r3, #2
 800752a:	442b      	add	r3, r5
 800752c:	330c      	adds	r3, #12
 800752e:	681d      	ldr	r5, [r3, #0]
 8007530:	4e0d      	ldr	r6, [pc, #52]	; (8007568 <_cbSendTaskList+0xb4>)
 8007532:	687a      	ldr	r2, [r7, #4]
 8007534:	4613      	mov	r3, r2
 8007536:	009b      	lsls	r3, r3, #2
 8007538:	4413      	add	r3, r2
 800753a:	009b      	lsls	r3, r3, #2
 800753c:	4433      	add	r3, r6
 800753e:	3310      	adds	r3, #16
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	9300      	str	r3, [sp, #0]
 8007544:	462b      	mov	r3, r5
 8007546:	4622      	mov	r2, r4
 8007548:	f000 f8be 	bl	80076c8 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	3301      	adds	r3, #1
 8007550:	607b      	str	r3, [r7, #4]
 8007552:	4b06      	ldr	r3, [pc, #24]	; (800756c <_cbSendTaskList+0xb8>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	687a      	ldr	r2, [r7, #4]
 8007558:	429a      	cmp	r2, r3
 800755a:	d3b1      	bcc.n	80074c0 <_cbSendTaskList+0xc>
  }
}
 800755c:	bf00      	nop
 800755e:	bf00      	nop
 8007560:	370c      	adds	r7, #12
 8007562:	46bd      	mov	sp, r7
 8007564:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007566:	bf00      	nop
 8007568:	2000557c 	.word	0x2000557c
 800756c:	2000561c 	.word	0x2000561c

08007570 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8007570:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007574:	b082      	sub	sp, #8
 8007576:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8007578:	f7fe fb70 	bl	8005c5c <xTaskGetTickCountFromISR>
 800757c:	4603      	mov	r3, r0
 800757e:	2200      	movs	r2, #0
 8007580:	469a      	mov	sl, r3
 8007582:	4693      	mov	fp, r2
 8007584:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8007588:	e9d7 0100 	ldrd	r0, r1, [r7]
 800758c:	4602      	mov	r2, r0
 800758e:	460b      	mov	r3, r1
 8007590:	f04f 0a00 	mov.w	sl, #0
 8007594:	f04f 0b00 	mov.w	fp, #0
 8007598:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 800759c:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 80075a0:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 80075a4:	4652      	mov	r2, sl
 80075a6:	465b      	mov	r3, fp
 80075a8:	1a14      	subs	r4, r2, r0
 80075aa:	eb63 0501 	sbc.w	r5, r3, r1
 80075ae:	f04f 0200 	mov.w	r2, #0
 80075b2:	f04f 0300 	mov.w	r3, #0
 80075b6:	00ab      	lsls	r3, r5, #2
 80075b8:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 80075bc:	00a2      	lsls	r2, r4, #2
 80075be:	4614      	mov	r4, r2
 80075c0:	461d      	mov	r5, r3
 80075c2:	eb14 0800 	adds.w	r8, r4, r0
 80075c6:	eb45 0901 	adc.w	r9, r5, r1
 80075ca:	f04f 0200 	mov.w	r2, #0
 80075ce:	f04f 0300 	mov.w	r3, #0
 80075d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80075d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80075da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80075de:	4690      	mov	r8, r2
 80075e0:	4699      	mov	r9, r3
 80075e2:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 80075e6:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 80075ea:	4610      	mov	r0, r2
 80075ec:	4619      	mov	r1, r3
 80075ee:	3708      	adds	r7, #8
 80075f0:	46bd      	mov	sp, r7
 80075f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080075f8 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b086      	sub	sp, #24
 80075fc:	af02      	add	r7, sp, #8
 80075fe:	60f8      	str	r0, [r7, #12]
 8007600:	60b9      	str	r1, [r7, #8]
 8007602:	607a      	str	r2, [r7, #4]
 8007604:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8007606:	2205      	movs	r2, #5
 8007608:	492b      	ldr	r1, [pc, #172]	; (80076b8 <SYSVIEW_AddTask+0xc0>)
 800760a:	68b8      	ldr	r0, [r7, #8]
 800760c:	f001 fbe6 	bl	8008ddc <memcmp>
 8007610:	4603      	mov	r3, r0
 8007612:	2b00      	cmp	r3, #0
 8007614:	d04b      	beq.n	80076ae <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8007616:	4b29      	ldr	r3, [pc, #164]	; (80076bc <SYSVIEW_AddTask+0xc4>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	2b07      	cmp	r3, #7
 800761c:	d903      	bls.n	8007626 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800761e:	4828      	ldr	r0, [pc, #160]	; (80076c0 <SYSVIEW_AddTask+0xc8>)
 8007620:	f001 fb5a 	bl	8008cd8 <SEGGER_SYSVIEW_Warn>
    return;
 8007624:	e044      	b.n	80076b0 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8007626:	4b25      	ldr	r3, [pc, #148]	; (80076bc <SYSVIEW_AddTask+0xc4>)
 8007628:	681a      	ldr	r2, [r3, #0]
 800762a:	4926      	ldr	r1, [pc, #152]	; (80076c4 <SYSVIEW_AddTask+0xcc>)
 800762c:	4613      	mov	r3, r2
 800762e:	009b      	lsls	r3, r3, #2
 8007630:	4413      	add	r3, r2
 8007632:	009b      	lsls	r3, r3, #2
 8007634:	440b      	add	r3, r1
 8007636:	68fa      	ldr	r2, [r7, #12]
 8007638:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800763a:	4b20      	ldr	r3, [pc, #128]	; (80076bc <SYSVIEW_AddTask+0xc4>)
 800763c:	681a      	ldr	r2, [r3, #0]
 800763e:	4921      	ldr	r1, [pc, #132]	; (80076c4 <SYSVIEW_AddTask+0xcc>)
 8007640:	4613      	mov	r3, r2
 8007642:	009b      	lsls	r3, r3, #2
 8007644:	4413      	add	r3, r2
 8007646:	009b      	lsls	r3, r3, #2
 8007648:	440b      	add	r3, r1
 800764a:	3304      	adds	r3, #4
 800764c:	68ba      	ldr	r2, [r7, #8]
 800764e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8007650:	4b1a      	ldr	r3, [pc, #104]	; (80076bc <SYSVIEW_AddTask+0xc4>)
 8007652:	681a      	ldr	r2, [r3, #0]
 8007654:	491b      	ldr	r1, [pc, #108]	; (80076c4 <SYSVIEW_AddTask+0xcc>)
 8007656:	4613      	mov	r3, r2
 8007658:	009b      	lsls	r3, r3, #2
 800765a:	4413      	add	r3, r2
 800765c:	009b      	lsls	r3, r3, #2
 800765e:	440b      	add	r3, r1
 8007660:	3308      	adds	r3, #8
 8007662:	687a      	ldr	r2, [r7, #4]
 8007664:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8007666:	4b15      	ldr	r3, [pc, #84]	; (80076bc <SYSVIEW_AddTask+0xc4>)
 8007668:	681a      	ldr	r2, [r3, #0]
 800766a:	4916      	ldr	r1, [pc, #88]	; (80076c4 <SYSVIEW_AddTask+0xcc>)
 800766c:	4613      	mov	r3, r2
 800766e:	009b      	lsls	r3, r3, #2
 8007670:	4413      	add	r3, r2
 8007672:	009b      	lsls	r3, r3, #2
 8007674:	440b      	add	r3, r1
 8007676:	330c      	adds	r3, #12
 8007678:	683a      	ldr	r2, [r7, #0]
 800767a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800767c:	4b0f      	ldr	r3, [pc, #60]	; (80076bc <SYSVIEW_AddTask+0xc4>)
 800767e:	681a      	ldr	r2, [r3, #0]
 8007680:	4910      	ldr	r1, [pc, #64]	; (80076c4 <SYSVIEW_AddTask+0xcc>)
 8007682:	4613      	mov	r3, r2
 8007684:	009b      	lsls	r3, r3, #2
 8007686:	4413      	add	r3, r2
 8007688:	009b      	lsls	r3, r3, #2
 800768a:	440b      	add	r3, r1
 800768c:	3310      	adds	r3, #16
 800768e:	69ba      	ldr	r2, [r7, #24]
 8007690:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8007692:	4b0a      	ldr	r3, [pc, #40]	; (80076bc <SYSVIEW_AddTask+0xc4>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	3301      	adds	r3, #1
 8007698:	4a08      	ldr	r2, [pc, #32]	; (80076bc <SYSVIEW_AddTask+0xc4>)
 800769a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800769c:	69bb      	ldr	r3, [r7, #24]
 800769e:	9300      	str	r3, [sp, #0]
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	687a      	ldr	r2, [r7, #4]
 80076a4:	68b9      	ldr	r1, [r7, #8]
 80076a6:	68f8      	ldr	r0, [r7, #12]
 80076a8:	f000 f80e 	bl	80076c8 <SYSVIEW_SendTaskInfo>
 80076ac:	e000      	b.n	80076b0 <SYSVIEW_AddTask+0xb8>
    return;
 80076ae:	bf00      	nop

}
 80076b0:	3710      	adds	r7, #16
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bd80      	pop	{r7, pc}
 80076b6:	bf00      	nop
 80076b8:	08009058 	.word	0x08009058
 80076bc:	2000561c 	.word	0x2000561c
 80076c0:	08009060 	.word	0x08009060
 80076c4:	2000557c 	.word	0x2000557c

080076c8 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b08a      	sub	sp, #40	; 0x28
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	60f8      	str	r0, [r7, #12]
 80076d0:	60b9      	str	r1, [r7, #8]
 80076d2:	607a      	str	r2, [r7, #4]
 80076d4:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 80076d6:	f107 0314 	add.w	r3, r7, #20
 80076da:	2214      	movs	r2, #20
 80076dc:	2100      	movs	r1, #0
 80076de:	4618      	mov	r0, r3
 80076e0:	f001 fb9a 	bl	8008e18 <memset>
  TaskInfo.TaskID     = TaskID;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 80076f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076f6:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 80076f8:	f107 0314 	add.w	r3, r7, #20
 80076fc:	4618      	mov	r0, r3
 80076fe:	f000 ffc5 	bl	800868c <SEGGER_SYSVIEW_SendTaskInfo>
}
 8007702:	bf00      	nop
 8007704:	3728      	adds	r7, #40	; 0x28
 8007706:	46bd      	mov	sp, r7
 8007708:	bd80      	pop	{r7, pc}
	...

0800770c <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
 800770c:	b480      	push	{r7}
 800770e:	b083      	sub	sp, #12
 8007710:	af00      	add	r7, sp, #0
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
 8007712:	4b21      	ldr	r3, [pc, #132]	; (8007798 <_DoInit+0x8c>)
 8007714:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2203      	movs	r2, #3
 800771a:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2203      	movs	r2, #3
 8007720:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	4a1d      	ldr	r2, [pc, #116]	; (800779c <_DoInit+0x90>)
 8007726:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	4a1d      	ldr	r2, [pc, #116]	; (80077a0 <_DoInit+0x94>)
 800772c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007734:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2200      	movs	r2, #0
 800773a:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2200      	movs	r2, #0
 8007740:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2200      	movs	r2, #0
 8007746:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	4a14      	ldr	r2, [pc, #80]	; (800779c <_DoInit+0x90>)
 800774c:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	4a14      	ldr	r2, [pc, #80]	; (80077a4 <_DoInit+0x98>)
 8007752:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2210      	movs	r2, #16
 8007758:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2200      	movs	r2, #0
 800775e:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2200      	movs	r2, #0
 8007764:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2200      	movs	r2, #0
 800776a:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	3307      	adds	r3, #7
 8007770:	4a0d      	ldr	r2, [pc, #52]	; (80077a8 <_DoInit+0x9c>)
 8007772:	6810      	ldr	r0, [r2, #0]
 8007774:	6018      	str	r0, [r3, #0]
  strcpy(&p->acID[0], "SEGGER");
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	4a0c      	ldr	r2, [pc, #48]	; (80077ac <_DoInit+0xa0>)
 800777a:	6810      	ldr	r0, [r2, #0]
 800777c:	6018      	str	r0, [r3, #0]
 800777e:	8891      	ldrh	r1, [r2, #4]
 8007780:	7992      	ldrb	r2, [r2, #6]
 8007782:	8099      	strh	r1, [r3, #4]
 8007784:	719a      	strb	r2, [r3, #6]
  p->acID[6] = ' ';
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2220      	movs	r2, #32
 800778a:	719a      	strb	r2, [r3, #6]
}
 800778c:	bf00      	nop
 800778e:	370c      	adds	r7, #12
 8007790:	46bd      	mov	sp, r7
 8007792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007796:	4770      	bx	lr
 8007798:	20005620 	.word	0x20005620
 800779c:	080090b0 	.word	0x080090b0
 80077a0:	200056c8 	.word	0x200056c8
 80077a4:	20005ac8 	.word	0x20005ac8
 80077a8:	080090bc 	.word	0x080090bc
 80077ac:	080090c0 	.word	0x080090c0

080077b0 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b08a      	sub	sp, #40	; 0x28
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	60f8      	str	r0, [r7, #12]
 80077b8:	60b9      	str	r1, [r7, #8]
 80077ba:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_DOWN* pRing;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  const char*             pSrc;
#endif
  //
  INIT();
 80077bc:	4b3c      	ldr	r3, [pc, #240]	; (80078b0 <SEGGER_RTT_ReadNoLock+0x100>)
 80077be:	781b      	ldrb	r3, [r3, #0]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d101      	bne.n	80077c8 <SEGGER_RTT_ReadNoLock+0x18>
 80077c4:	f7ff ffa2 	bl	800770c <_DoInit>
  pRing = &_SEGGER_RTT.aDown[BufferIndex];
 80077c8:	68fa      	ldr	r2, [r7, #12]
 80077ca:	4613      	mov	r3, r2
 80077cc:	005b      	lsls	r3, r3, #1
 80077ce:	4413      	add	r3, r2
 80077d0:	00db      	lsls	r3, r3, #3
 80077d2:	3360      	adds	r3, #96	; 0x60
 80077d4:	4a36      	ldr	r2, [pc, #216]	; (80078b0 <SEGGER_RTT_ReadNoLock+0x100>)
 80077d6:	4413      	add	r3, r2
 80077d8:	61bb      	str	r3, [r7, #24]
  pBuffer = (unsigned char*)pData;
 80077da:	68bb      	ldr	r3, [r7, #8]
 80077dc:	61fb      	str	r3, [r7, #28]
  RdOff = pRing->RdOff;
 80077de:	69bb      	ldr	r3, [r7, #24]
 80077e0:	691b      	ldr	r3, [r3, #16]
 80077e2:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 80077e4:	69bb      	ldr	r3, [r7, #24]
 80077e6:	68db      	ldr	r3, [r3, #12]
 80077e8:	617b      	str	r3, [r7, #20]
  NumBytesRead = 0u;
 80077ea:	2300      	movs	r3, #0
 80077ec:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80077ee:	6a3a      	ldr	r2, [r7, #32]
 80077f0:	697b      	ldr	r3, [r7, #20]
 80077f2:	429a      	cmp	r2, r3
 80077f4:	d92a      	bls.n	800784c <SEGGER_RTT_ReadNoLock+0x9c>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80077f6:	69bb      	ldr	r3, [r7, #24]
 80077f8:	689a      	ldr	r2, [r3, #8]
 80077fa:	6a3b      	ldr	r3, [r7, #32]
 80077fc:	1ad3      	subs	r3, r2, r3
 80077fe:	613b      	str	r3, [r7, #16]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8007800:	693a      	ldr	r2, [r7, #16]
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	4293      	cmp	r3, r2
 8007806:	bf28      	it	cs
 8007808:	4613      	movcs	r3, r2
 800780a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 800780c:	69bb      	ldr	r3, [r7, #24]
 800780e:	685a      	ldr	r2, [r3, #4]
 8007810:	6a3b      	ldr	r3, [r7, #32]
 8007812:	4413      	add	r3, r2
 8007814:	693a      	ldr	r2, [r7, #16]
 8007816:	4619      	mov	r1, r3
 8007818:	69f8      	ldr	r0, [r7, #28]
 800781a:	f001 faef 	bl	8008dfc <memcpy>
    NumBytesRead += NumBytesRem;
 800781e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007820:	693b      	ldr	r3, [r7, #16]
 8007822:	4413      	add	r3, r2
 8007824:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 8007826:	69fa      	ldr	r2, [r7, #28]
 8007828:	693b      	ldr	r3, [r7, #16]
 800782a:	4413      	add	r3, r2
 800782c:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 800782e:	687a      	ldr	r2, [r7, #4]
 8007830:	693b      	ldr	r3, [r7, #16]
 8007832:	1ad3      	subs	r3, r2, r3
 8007834:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8007836:	6a3a      	ldr	r2, [r7, #32]
 8007838:	693b      	ldr	r3, [r7, #16]
 800783a:	4413      	add	r3, r2
 800783c:	623b      	str	r3, [r7, #32]
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800783e:	69bb      	ldr	r3, [r7, #24]
 8007840:	689b      	ldr	r3, [r3, #8]
 8007842:	6a3a      	ldr	r2, [r7, #32]
 8007844:	429a      	cmp	r2, r3
 8007846:	d101      	bne.n	800784c <SEGGER_RTT_ReadNoLock+0x9c>
      RdOff = 0u;
 8007848:	2300      	movs	r3, #0
 800784a:	623b      	str	r3, [r7, #32]
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800784c:	697a      	ldr	r2, [r7, #20]
 800784e:	6a3b      	ldr	r3, [r7, #32]
 8007850:	1ad3      	subs	r3, r2, r3
 8007852:	613b      	str	r3, [r7, #16]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8007854:	693a      	ldr	r2, [r7, #16]
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	4293      	cmp	r3, r2
 800785a:	bf28      	it	cs
 800785c:	4613      	movcs	r3, r2
 800785e:	613b      	str	r3, [r7, #16]
  if (NumBytesRem > 0u) {
 8007860:	693b      	ldr	r3, [r7, #16]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d018      	beq.n	8007898 <SEGGER_RTT_ReadNoLock+0xe8>
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 8007866:	69bb      	ldr	r3, [r7, #24]
 8007868:	685a      	ldr	r2, [r3, #4]
 800786a:	6a3b      	ldr	r3, [r7, #32]
 800786c:	4413      	add	r3, r2
 800786e:	693a      	ldr	r2, [r7, #16]
 8007870:	4619      	mov	r1, r3
 8007872:	69f8      	ldr	r0, [r7, #28]
 8007874:	f001 fac2 	bl	8008dfc <memcpy>
    NumBytesRead += NumBytesRem;
 8007878:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800787a:	693b      	ldr	r3, [r7, #16]
 800787c:	4413      	add	r3, r2
 800787e:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 8007880:	69fa      	ldr	r2, [r7, #28]
 8007882:	693b      	ldr	r3, [r7, #16]
 8007884:	4413      	add	r3, r2
 8007886:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 8007888:	687a      	ldr	r2, [r7, #4]
 800788a:	693b      	ldr	r3, [r7, #16]
 800788c:	1ad3      	subs	r3, r2, r3
 800788e:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8007890:	6a3a      	ldr	r2, [r7, #32]
 8007892:	693b      	ldr	r3, [r7, #16]
 8007894:	4413      	add	r3, r2
 8007896:	623b      	str	r3, [r7, #32]
#endif
  }
  if (NumBytesRead) {
 8007898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800789a:	2b00      	cmp	r3, #0
 800789c:	d002      	beq.n	80078a4 <SEGGER_RTT_ReadNoLock+0xf4>
    pRing->RdOff = RdOff;
 800789e:	69bb      	ldr	r3, [r7, #24]
 80078a0:	6a3a      	ldr	r2, [r7, #32]
 80078a2:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80078a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80078a6:	4618      	mov	r0, r3
 80078a8:	3728      	adds	r7, #40	; 0x28
 80078aa:	46bd      	mov	sp, r7
 80078ac:	bd80      	pop	{r7, pc}
 80078ae:	bf00      	nop
 80078b0:	20005620 	.word	0x20005620

080078b4 <SEGGER_RTT_WriteSkipNoLock>:
*    (1) If there is not enough space in the "Up"-buffer, all data is dropped.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b08a      	sub	sp, #40	; 0x28
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	60f8      	str	r0, [r7, #12]
 80078bc:	60b9      	str	r1, [r7, #8]
 80078be:	607a      	str	r2, [r7, #4]
  unsigned              Rem;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  char*                 pDst;
#endif

  pData = (const char *)pBuffer;
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get "to-host" ring buffer and copy some elements into local variables.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	1c5a      	adds	r2, r3, #1
 80078c8:	4613      	mov	r3, r2
 80078ca:	005b      	lsls	r3, r3, #1
 80078cc:	4413      	add	r3, r2
 80078ce:	00db      	lsls	r3, r3, #3
 80078d0:	4a3f      	ldr	r2, [pc, #252]	; (80079d0 <SEGGER_RTT_WriteSkipNoLock+0x11c>)
 80078d2:	4413      	add	r3, r2
 80078d4:	623b      	str	r3, [r7, #32]
  RdOff = pRing->RdOff;
 80078d6:	6a3b      	ldr	r3, [r7, #32]
 80078d8:	691b      	ldr	r3, [r3, #16]
 80078da:	61fb      	str	r3, [r7, #28]
  WrOff = pRing->WrOff;
 80078dc:	6a3b      	ldr	r3, [r7, #32]
 80078de:	68db      	ldr	r3, [r3, #12]
 80078e0:	61bb      	str	r3, [r7, #24]
  //
  //    RdOff > WrOff -> Space until RdOff - 1 is free.
  //  AND
  //    WrOff + NumBytes < RdOff -> Data fits into buffer
  //
  if (RdOff <= WrOff) {
 80078e2:	69fa      	ldr	r2, [r7, #28]
 80078e4:	69bb      	ldr	r3, [r7, #24]
 80078e6:	429a      	cmp	r2, r3
 80078e8:	d854      	bhi.n	8007994 <SEGGER_RTT_WriteSkipNoLock+0xe0>
    //
    // Get space until WrOff will be at wrap around.
    //
    Avail = pRing->SizeOfBuffer - 1u - WrOff ;
 80078ea:	6a3b      	ldr	r3, [r7, #32]
 80078ec:	689a      	ldr	r2, [r3, #8]
 80078ee:	69bb      	ldr	r3, [r7, #24]
 80078f0:	1ad3      	subs	r3, r2, r3
 80078f2:	3b01      	subs	r3, #1
 80078f4:	617b      	str	r3, [r7, #20]
    if (Avail >= NumBytes) {
 80078f6:	697a      	ldr	r2, [r7, #20]
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	429a      	cmp	r2, r3
 80078fc:	d30f      	bcc.n	800791e <SEGGER_RTT_WriteSkipNoLock+0x6a>
      while (NumBytes--) {
        *pDst++ = *pData++;
      };
      pRing->WrOff = WrOff;
#else
      SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 80078fe:	6a3b      	ldr	r3, [r7, #32]
 8007900:	685a      	ldr	r2, [r3, #4]
 8007902:	69bb      	ldr	r3, [r7, #24]
 8007904:	4413      	add	r3, r2
 8007906:	687a      	ldr	r2, [r7, #4]
 8007908:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800790a:	4618      	mov	r0, r3
 800790c:	f001 fa76 	bl	8008dfc <memcpy>
      pRing->WrOff = WrOff + NumBytes;
 8007910:	69ba      	ldr	r2, [r7, #24]
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	441a      	add	r2, r3
 8007916:	6a3b      	ldr	r3, [r7, #32]
 8007918:	60da      	str	r2, [r3, #12]
#endif
      return 1;
 800791a:	2301      	movs	r3, #1
 800791c:	e054      	b.n	80079c8 <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
    //
    // If data did not fit into space until wrap around calculate complete space in buffer.
    //
    Avail += RdOff;
 800791e:	697a      	ldr	r2, [r7, #20]
 8007920:	69fb      	ldr	r3, [r7, #28]
 8007922:	4413      	add	r3, r2
 8007924:	617b      	str	r3, [r7, #20]
    //
    // If there is still no space for the whole of this output, don't bother.
    //
    if (Avail >= NumBytes) {
 8007926:	697a      	ldr	r2, [r7, #20]
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	429a      	cmp	r2, r3
 800792c:	d34b      	bcc.n	80079c6 <SEGGER_RTT_WriteSkipNoLock+0x112>
      //
      //  OK, we have enough space in buffer. Copy in one or 2 chunks
      //
      Rem = pRing->SizeOfBuffer - WrOff;      // Space until end of buffer
 800792e:	6a3b      	ldr	r3, [r7, #32]
 8007930:	689a      	ldr	r2, [r3, #8]
 8007932:	69bb      	ldr	r3, [r7, #24]
 8007934:	1ad3      	subs	r3, r2, r3
 8007936:	613b      	str	r3, [r7, #16]
      if (Rem > NumBytes) {
 8007938:	693a      	ldr	r2, [r7, #16]
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	429a      	cmp	r2, r3
 800793e:	d90e      	bls.n	800795e <SEGGER_RTT_WriteSkipNoLock+0xaa>
        while (NumBytes--) {
          *pDst++ = *pData++;
        };
        pRing->WrOff = WrOff;
#else
        SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 8007940:	6a3b      	ldr	r3, [r7, #32]
 8007942:	685a      	ldr	r2, [r3, #4]
 8007944:	69bb      	ldr	r3, [r7, #24]
 8007946:	4413      	add	r3, r2
 8007948:	687a      	ldr	r2, [r7, #4]
 800794a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800794c:	4618      	mov	r0, r3
 800794e:	f001 fa55 	bl	8008dfc <memcpy>
        pRing->WrOff = WrOff + NumBytes;
 8007952:	69ba      	ldr	r2, [r7, #24]
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	441a      	add	r2, r3
 8007958:	6a3b      	ldr	r3, [r7, #32]
 800795a:	60da      	str	r2, [r3, #12]
 800795c:	e018      	b.n	8007990 <SEGGER_RTT_WriteSkipNoLock+0xdc>
        while (NumBytes--) {
          *pDst++ = *pData++;
        };
        pRing->WrOff = WrOff;
#else
        SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, Rem);
 800795e:	6a3b      	ldr	r3, [r7, #32]
 8007960:	685a      	ldr	r2, [r3, #4]
 8007962:	69bb      	ldr	r3, [r7, #24]
 8007964:	4413      	add	r3, r2
 8007966:	693a      	ldr	r2, [r7, #16]
 8007968:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800796a:	4618      	mov	r0, r3
 800796c:	f001 fa46 	bl	8008dfc <memcpy>
        SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytes - Rem);
 8007970:	6a3b      	ldr	r3, [r7, #32]
 8007972:	6858      	ldr	r0, [r3, #4]
 8007974:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007976:	693b      	ldr	r3, [r7, #16]
 8007978:	18d1      	adds	r1, r2, r3
 800797a:	687a      	ldr	r2, [r7, #4]
 800797c:	693b      	ldr	r3, [r7, #16]
 800797e:	1ad3      	subs	r3, r2, r3
 8007980:	461a      	mov	r2, r3
 8007982:	f001 fa3b 	bl	8008dfc <memcpy>
        pRing->WrOff = NumBytes - Rem;
 8007986:	687a      	ldr	r2, [r7, #4]
 8007988:	693b      	ldr	r3, [r7, #16]
 800798a:	1ad2      	subs	r2, r2, r3
 800798c:	6a3b      	ldr	r3, [r7, #32]
 800798e:	60da      	str	r2, [r3, #12]
#endif
      }
      return 1;
 8007990:	2301      	movs	r3, #1
 8007992:	e019      	b.n	80079c8 <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
  } else {
    Avail = RdOff - WrOff - 1u;
 8007994:	69fa      	ldr	r2, [r7, #28]
 8007996:	69bb      	ldr	r3, [r7, #24]
 8007998:	1ad3      	subs	r3, r2, r3
 800799a:	3b01      	subs	r3, #1
 800799c:	617b      	str	r3, [r7, #20]
    if (Avail >= NumBytes) {
 800799e:	697a      	ldr	r2, [r7, #20]
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	429a      	cmp	r2, r3
 80079a4:	d30f      	bcc.n	80079c6 <SEGGER_RTT_WriteSkipNoLock+0x112>
      while (NumBytes--) {
        *pDst++ = *pData++;
      };
      pRing->WrOff = WrOff;
#else
      SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 80079a6:	6a3b      	ldr	r3, [r7, #32]
 80079a8:	685a      	ldr	r2, [r3, #4]
 80079aa:	69bb      	ldr	r3, [r7, #24]
 80079ac:	4413      	add	r3, r2
 80079ae:	687a      	ldr	r2, [r7, #4]
 80079b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80079b2:	4618      	mov	r0, r3
 80079b4:	f001 fa22 	bl	8008dfc <memcpy>
      pRing->WrOff = WrOff + NumBytes;
 80079b8:	69ba      	ldr	r2, [r7, #24]
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	441a      	add	r2, r3
 80079be:	6a3b      	ldr	r3, [r7, #32]
 80079c0:	60da      	str	r2, [r3, #12]
#endif
      return 1;
 80079c2:	2301      	movs	r3, #1
 80079c4:	e000      	b.n	80079c8 <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
  }
  //
  // If we reach this point no data has been written
  //
  return 0;
 80079c6:	2300      	movs	r3, #0
}
 80079c8:	4618      	mov	r0, r3
 80079ca:	3728      	adds	r7, #40	; 0x28
 80079cc:	46bd      	mov	sp, r7
 80079ce:	bd80      	pop	{r7, pc}
 80079d0:	20005620 	.word	0x20005620

080079d4 <SEGGER_RTT_ConfigUpBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigUpBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b086      	sub	sp, #24
 80079d8:	af00      	add	r7, sp, #0
 80079da:	60f8      	str	r0, [r7, #12]
 80079dc:	60b9      	str	r1, [r7, #8]
 80079de:	607a      	str	r2, [r7, #4]
 80079e0:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 80079e2:	4b30      	ldr	r3, [pc, #192]	; (8007aa4 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 80079e4:	781b      	ldrb	r3, [r3, #0]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d101      	bne.n	80079ee <SEGGER_RTT_ConfigUpBuffer+0x1a>
 80079ea:	f7ff fe8f 	bl	800770c <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
 80079ee:	4b2d      	ldr	r3, [pc, #180]	; (8007aa4 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 80079f0:	691b      	ldr	r3, [r3, #16]
 80079f2:	461a      	mov	r2, r3
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d24c      	bcs.n	8007a94 <SEGGER_RTT_ConfigUpBuffer+0xc0>
    SEGGER_RTT_LOCK();
 80079fa:	f3ef 8311 	mrs	r3, BASEPRI
 80079fe:	f04f 0120 	mov.w	r1, #32
 8007a02:	f381 8811 	msr	BASEPRI, r1
 8007a06:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d032      	beq.n	8007a74 <SEGGER_RTT_ConfigUpBuffer+0xa0>
      _SEGGER_RTT.aUp[BufferIndex].sName        = sName;
 8007a0e:	4925      	ldr	r1, [pc, #148]	; (8007aa4 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	1c5a      	adds	r2, r3, #1
 8007a14:	4613      	mov	r3, r2
 8007a16:	005b      	lsls	r3, r3, #1
 8007a18:	4413      	add	r3, r2
 8007a1a:	00db      	lsls	r3, r3, #3
 8007a1c:	440b      	add	r3, r1
 8007a1e:	68ba      	ldr	r2, [r7, #8]
 8007a20:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8007a22:	4920      	ldr	r1, [pc, #128]	; (8007aa4 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	1c5a      	adds	r2, r3, #1
 8007a28:	4613      	mov	r3, r2
 8007a2a:	005b      	lsls	r3, r3, #1
 8007a2c:	4413      	add	r3, r2
 8007a2e:	00db      	lsls	r3, r3, #3
 8007a30:	440b      	add	r3, r1
 8007a32:	3304      	adds	r3, #4
 8007a34:	687a      	ldr	r2, [r7, #4]
 8007a36:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8007a38:	491a      	ldr	r1, [pc, #104]	; (8007aa4 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8007a3a:	68fa      	ldr	r2, [r7, #12]
 8007a3c:	4613      	mov	r3, r2
 8007a3e:	005b      	lsls	r3, r3, #1
 8007a40:	4413      	add	r3, r2
 8007a42:	00db      	lsls	r3, r3, #3
 8007a44:	440b      	add	r3, r1
 8007a46:	3320      	adds	r3, #32
 8007a48:	683a      	ldr	r2, [r7, #0]
 8007a4a:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].RdOff        = 0u;
 8007a4c:	4915      	ldr	r1, [pc, #84]	; (8007aa4 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8007a4e:	68fa      	ldr	r2, [r7, #12]
 8007a50:	4613      	mov	r3, r2
 8007a52:	005b      	lsls	r3, r3, #1
 8007a54:	4413      	add	r3, r2
 8007a56:	00db      	lsls	r3, r3, #3
 8007a58:	440b      	add	r3, r1
 8007a5a:	3328      	adds	r3, #40	; 0x28
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].WrOff        = 0u;
 8007a60:	4910      	ldr	r1, [pc, #64]	; (8007aa4 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8007a62:	68fa      	ldr	r2, [r7, #12]
 8007a64:	4613      	mov	r3, r2
 8007a66:	005b      	lsls	r3, r3, #1
 8007a68:	4413      	add	r3, r2
 8007a6a:	00db      	lsls	r3, r3, #3
 8007a6c:	440b      	add	r3, r1
 8007a6e:	3324      	adds	r3, #36	; 0x24
 8007a70:	2200      	movs	r2, #0
 8007a72:	601a      	str	r2, [r3, #0]
    }
    _SEGGER_RTT.aUp[BufferIndex].Flags          = Flags;
 8007a74:	490b      	ldr	r1, [pc, #44]	; (8007aa4 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8007a76:	68fa      	ldr	r2, [r7, #12]
 8007a78:	4613      	mov	r3, r2
 8007a7a:	005b      	lsls	r3, r3, #1
 8007a7c:	4413      	add	r3, r2
 8007a7e:	00db      	lsls	r3, r3, #3
 8007a80:	440b      	add	r3, r1
 8007a82:	332c      	adds	r3, #44	; 0x2c
 8007a84:	6a3a      	ldr	r2, [r7, #32]
 8007a86:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 8007a88:	693b      	ldr	r3, [r7, #16]
 8007a8a:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8007a8e:	2300      	movs	r3, #0
 8007a90:	617b      	str	r3, [r7, #20]
 8007a92:	e002      	b.n	8007a9a <SEGGER_RTT_ConfigUpBuffer+0xc6>
  } else {
    r = -1;
 8007a94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007a98:	617b      	str	r3, [r7, #20]
  }
  return r;
 8007a9a:	697b      	ldr	r3, [r7, #20]
}
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	3718      	adds	r7, #24
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	bd80      	pop	{r7, pc}
 8007aa4:	20005620 	.word	0x20005620

08007aa8 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b086      	sub	sp, #24
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	60f8      	str	r0, [r7, #12]
 8007ab0:	60b9      	str	r1, [r7, #8]
 8007ab2:	607a      	str	r2, [r7, #4]
 8007ab4:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 8007ab6:	4b30      	ldr	r3, [pc, #192]	; (8007b78 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8007ab8:	781b      	ldrb	r3, [r3, #0]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d101      	bne.n	8007ac2 <SEGGER_RTT_ConfigDownBuffer+0x1a>
 8007abe:	f7ff fe25 	bl	800770c <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumDownBuffers) {
 8007ac2:	4b2d      	ldr	r3, [pc, #180]	; (8007b78 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8007ac4:	695b      	ldr	r3, [r3, #20]
 8007ac6:	461a      	mov	r2, r3
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	4293      	cmp	r3, r2
 8007acc:	d24b      	bcs.n	8007b66 <SEGGER_RTT_ConfigDownBuffer+0xbe>
    SEGGER_RTT_LOCK();
 8007ace:	f3ef 8311 	mrs	r3, BASEPRI
 8007ad2:	f04f 0120 	mov.w	r1, #32
 8007ad6:	f381 8811 	msr	BASEPRI, r1
 8007ada:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d031      	beq.n	8007b46 <SEGGER_RTT_ConfigDownBuffer+0x9e>
      _SEGGER_RTT.aDown[BufferIndex].sName        = sName;
 8007ae2:	4925      	ldr	r1, [pc, #148]	; (8007b78 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8007ae4:	68fa      	ldr	r2, [r7, #12]
 8007ae6:	4613      	mov	r3, r2
 8007ae8:	005b      	lsls	r3, r3, #1
 8007aea:	4413      	add	r3, r2
 8007aec:	00db      	lsls	r3, r3, #3
 8007aee:	440b      	add	r3, r1
 8007af0:	3360      	adds	r3, #96	; 0x60
 8007af2:	68ba      	ldr	r2, [r7, #8]
 8007af4:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8007af6:	4920      	ldr	r1, [pc, #128]	; (8007b78 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8007af8:	68fa      	ldr	r2, [r7, #12]
 8007afa:	4613      	mov	r3, r2
 8007afc:	005b      	lsls	r3, r3, #1
 8007afe:	4413      	add	r3, r2
 8007b00:	00db      	lsls	r3, r3, #3
 8007b02:	440b      	add	r3, r1
 8007b04:	3364      	adds	r3, #100	; 0x64
 8007b06:	687a      	ldr	r2, [r7, #4]
 8007b08:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8007b0a:	491b      	ldr	r1, [pc, #108]	; (8007b78 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8007b0c:	68fa      	ldr	r2, [r7, #12]
 8007b0e:	4613      	mov	r3, r2
 8007b10:	005b      	lsls	r3, r3, #1
 8007b12:	4413      	add	r3, r2
 8007b14:	00db      	lsls	r3, r3, #3
 8007b16:	440b      	add	r3, r1
 8007b18:	3368      	adds	r3, #104	; 0x68
 8007b1a:	683a      	ldr	r2, [r7, #0]
 8007b1c:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].RdOff        = 0u;
 8007b1e:	4916      	ldr	r1, [pc, #88]	; (8007b78 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8007b20:	68fa      	ldr	r2, [r7, #12]
 8007b22:	4613      	mov	r3, r2
 8007b24:	005b      	lsls	r3, r3, #1
 8007b26:	4413      	add	r3, r2
 8007b28:	00db      	lsls	r3, r3, #3
 8007b2a:	440b      	add	r3, r1
 8007b2c:	3370      	adds	r3, #112	; 0x70
 8007b2e:	2200      	movs	r2, #0
 8007b30:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].WrOff        = 0u;
 8007b32:	4911      	ldr	r1, [pc, #68]	; (8007b78 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8007b34:	68fa      	ldr	r2, [r7, #12]
 8007b36:	4613      	mov	r3, r2
 8007b38:	005b      	lsls	r3, r3, #1
 8007b3a:	4413      	add	r3, r2
 8007b3c:	00db      	lsls	r3, r3, #3
 8007b3e:	440b      	add	r3, r1
 8007b40:	336c      	adds	r3, #108	; 0x6c
 8007b42:	2200      	movs	r2, #0
 8007b44:	601a      	str	r2, [r3, #0]
    }
    _SEGGER_RTT.aDown[BufferIndex].Flags          = Flags;
 8007b46:	490c      	ldr	r1, [pc, #48]	; (8007b78 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8007b48:	68fa      	ldr	r2, [r7, #12]
 8007b4a:	4613      	mov	r3, r2
 8007b4c:	005b      	lsls	r3, r3, #1
 8007b4e:	4413      	add	r3, r2
 8007b50:	00db      	lsls	r3, r3, #3
 8007b52:	440b      	add	r3, r1
 8007b54:	3374      	adds	r3, #116	; 0x74
 8007b56:	6a3a      	ldr	r2, [r7, #32]
 8007b58:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 8007b5a:	693b      	ldr	r3, [r7, #16]
 8007b5c:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8007b60:	2300      	movs	r3, #0
 8007b62:	617b      	str	r3, [r7, #20]
 8007b64:	e002      	b.n	8007b6c <SEGGER_RTT_ConfigDownBuffer+0xc4>
  } else {
    r = -1;
 8007b66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007b6a:	617b      	str	r3, [r7, #20]
  }
  return r;
 8007b6c:	697b      	ldr	r3, [r7, #20]
}
 8007b6e:	4618      	mov	r0, r3
 8007b70:	3718      	adds	r7, #24
 8007b72:	46bd      	mov	sp, r7
 8007b74:	bd80      	pop	{r7, pc}
 8007b76:	bf00      	nop
 8007b78:	20005620 	.word	0x20005620

08007b7c <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8007b7c:	b480      	push	{r7}
 8007b7e:	b087      	sub	sp, #28
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	60f8      	str	r0, [r7, #12]
 8007b84:	60b9      	str	r1, [r7, #8]
 8007b86:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8007b88:	2300      	movs	r3, #0
 8007b8a:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8007b8c:	e002      	b.n	8007b94 <_EncodeStr+0x18>
    Len++;
 8007b8e:	693b      	ldr	r3, [r7, #16]
 8007b90:	3301      	adds	r3, #1
 8007b92:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8007b94:	68ba      	ldr	r2, [r7, #8]
 8007b96:	693b      	ldr	r3, [r7, #16]
 8007b98:	4413      	add	r3, r2
 8007b9a:	781b      	ldrb	r3, [r3, #0]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d1f6      	bne.n	8007b8e <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8007ba0:	693a      	ldr	r2, [r7, #16]
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	429a      	cmp	r2, r3
 8007ba6:	d901      	bls.n	8007bac <_EncodeStr+0x30>
    Len = Limit;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8007bac:	693b      	ldr	r3, [r7, #16]
 8007bae:	2bfe      	cmp	r3, #254	; 0xfe
 8007bb0:	d806      	bhi.n	8007bc0 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	1c5a      	adds	r2, r3, #1
 8007bb6:	60fa      	str	r2, [r7, #12]
 8007bb8:	693a      	ldr	r2, [r7, #16]
 8007bba:	b2d2      	uxtb	r2, r2
 8007bbc:	701a      	strb	r2, [r3, #0]
 8007bbe:	e011      	b.n	8007be4 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	1c5a      	adds	r2, r3, #1
 8007bc4:	60fa      	str	r2, [r7, #12]
 8007bc6:	22ff      	movs	r2, #255	; 0xff
 8007bc8:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	1c5a      	adds	r2, r3, #1
 8007bce:	60fa      	str	r2, [r7, #12]
 8007bd0:	693a      	ldr	r2, [r7, #16]
 8007bd2:	b2d2      	uxtb	r2, r2
 8007bd4:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8007bd6:	693b      	ldr	r3, [r7, #16]
 8007bd8:	0a19      	lsrs	r1, r3, #8
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	1c5a      	adds	r2, r3, #1
 8007bde:	60fa      	str	r2, [r7, #12]
 8007be0:	b2ca      	uxtb	r2, r1
 8007be2:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8007be4:	2300      	movs	r3, #0
 8007be6:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8007be8:	e00a      	b.n	8007c00 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8007bea:	68ba      	ldr	r2, [r7, #8]
 8007bec:	1c53      	adds	r3, r2, #1
 8007bee:	60bb      	str	r3, [r7, #8]
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	1c59      	adds	r1, r3, #1
 8007bf4:	60f9      	str	r1, [r7, #12]
 8007bf6:	7812      	ldrb	r2, [r2, #0]
 8007bf8:	701a      	strb	r2, [r3, #0]
    n++;
 8007bfa:	697b      	ldr	r3, [r7, #20]
 8007bfc:	3301      	adds	r3, #1
 8007bfe:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8007c00:	697a      	ldr	r2, [r7, #20]
 8007c02:	693b      	ldr	r3, [r7, #16]
 8007c04:	429a      	cmp	r2, r3
 8007c06:	d3f0      	bcc.n	8007bea <_EncodeStr+0x6e>
  }
  return pPayload;
 8007c08:	68fb      	ldr	r3, [r7, #12]
}
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	371c      	adds	r7, #28
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c14:	4770      	bx	lr

08007c16 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8007c16:	b480      	push	{r7}
 8007c18:	b083      	sub	sp, #12
 8007c1a:	af00      	add	r7, sp, #0
 8007c1c:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	3304      	adds	r3, #4
}
 8007c22:	4618      	mov	r0, r3
 8007c24:	370c      	adds	r7, #12
 8007c26:	46bd      	mov	sp, r7
 8007c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2c:	4770      	bx	lr
	...

08007c30 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b082      	sub	sp, #8
 8007c34:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8007c36:	1cfb      	adds	r3, r7, #3
 8007c38:	2201      	movs	r2, #1
 8007c3a:	4619      	mov	r1, r3
 8007c3c:	2001      	movs	r0, #1
 8007c3e:	f7ff fdb7 	bl	80077b0 <SEGGER_RTT_ReadNoLock>
 8007c42:	4603      	mov	r3, r0
 8007c44:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	dd4c      	ble.n	8007ce6 <_HandleIncomingPacket+0xb6>
    switch (Cmd) {
 8007c4c:	78fb      	ldrb	r3, [r7, #3]
 8007c4e:	2b07      	cmp	r3, #7
 8007c50:	dc16      	bgt.n	8007c80 <_HandleIncomingPacket+0x50>
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	dd3c      	ble.n	8007cd0 <_HandleIncomingPacket+0xa0>
 8007c56:	3b01      	subs	r3, #1
 8007c58:	2b06      	cmp	r3, #6
 8007c5a:	d839      	bhi.n	8007cd0 <_HandleIncomingPacket+0xa0>
 8007c5c:	a201      	add	r2, pc, #4	; (adr r2, 8007c64 <_HandleIncomingPacket+0x34>)
 8007c5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c62:	bf00      	nop
 8007c64:	08007c87 	.word	0x08007c87
 8007c68:	08007c8d 	.word	0x08007c8d
 8007c6c:	08007c93 	.word	0x08007c93
 8007c70:	08007c99 	.word	0x08007c99
 8007c74:	08007c9f 	.word	0x08007c9f
 8007c78:	08007ca5 	.word	0x08007ca5
 8007c7c:	08007cab 	.word	0x08007cab
 8007c80:	2b80      	cmp	r3, #128	; 0x80
 8007c82:	d015      	beq.n	8007cb0 <_HandleIncomingPacket+0x80>
 8007c84:	e024      	b.n	8007cd0 <_HandleIncomingPacket+0xa0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8007c86:	f000 fb85 	bl	8008394 <SEGGER_SYSVIEW_Start>
      break;
 8007c8a:	e031      	b.n	8007cf0 <_HandleIncomingPacket+0xc0>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8007c8c:	f000 fc3e 	bl	800850c <SEGGER_SYSVIEW_Stop>
      break;
 8007c90:	e02e      	b.n	8007cf0 <_HandleIncomingPacket+0xc0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8007c92:	f000 fe19 	bl	80088c8 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8007c96:	e02b      	b.n	8007cf0 <_HandleIncomingPacket+0xc0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8007c98:	f000 fdde 	bl	8008858 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8007c9c:	e028      	b.n	8007cf0 <_HandleIncomingPacket+0xc0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8007c9e:	f000 fc5b 	bl	8008558 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8007ca2:	e025      	b.n	8007cf0 <_HandleIncomingPacket+0xc0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8007ca4:	f000 ffda 	bl	8008c5c <SEGGER_SYSVIEW_SendNumModules>
      break;
 8007ca8:	e022      	b.n	8007cf0 <_HandleIncomingPacket+0xc0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8007caa:	f000 ffb9 	bl	8008c20 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8007cae:	e01f      	b.n	8007cf0 <_HandleIncomingPacket+0xc0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8007cb0:	1cfb      	adds	r3, r7, #3
 8007cb2:	2201      	movs	r2, #1
 8007cb4:	4619      	mov	r1, r3
 8007cb6:	2001      	movs	r0, #1
 8007cb8:	f7ff fd7a 	bl	80077b0 <SEGGER_RTT_ReadNoLock>
 8007cbc:	4603      	mov	r3, r0
 8007cbe:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	dd11      	ble.n	8007cea <_HandleIncomingPacket+0xba>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8007cc6:	78fb      	ldrb	r3, [r7, #3]
 8007cc8:	4618      	mov	r0, r3
 8007cca:	f000 ff29 	bl	8008b20 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8007cce:	e00c      	b.n	8007cea <_HandleIncomingPacket+0xba>
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8007cd0:	78fb      	ldrb	r3, [r7, #3]
 8007cd2:	b25b      	sxtb	r3, r3
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	da0a      	bge.n	8007cee <_HandleIncomingPacket+0xbe>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8007cd8:	1cfb      	adds	r3, r7, #3
 8007cda:	2201      	movs	r2, #1
 8007cdc:	4619      	mov	r1, r3
 8007cde:	2001      	movs	r0, #1
 8007ce0:	f7ff fd66 	bl	80077b0 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8007ce4:	e003      	b.n	8007cee <_HandleIncomingPacket+0xbe>
    }
  }
 8007ce6:	bf00      	nop
 8007ce8:	e002      	b.n	8007cf0 <_HandleIncomingPacket+0xc0>
      break;
 8007cea:	bf00      	nop
 8007cec:	e000      	b.n	8007cf0 <_HandleIncomingPacket+0xc0>
      break;
 8007cee:	bf00      	nop
}
 8007cf0:	bf00      	nop
 8007cf2:	3708      	adds	r7, #8
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	bd80      	pop	{r7, pc}

08007cf8 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b08c      	sub	sp, #48	; 0x30
 8007cfc:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8007cfe:	2301      	movs	r3, #1
 8007d00:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8007d02:	1d3b      	adds	r3, r7, #4
 8007d04:	3301      	adds	r3, #1
 8007d06:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8007d08:	69fb      	ldr	r3, [r7, #28]
 8007d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007d0c:	4b30      	ldr	r3, [pc, #192]	; (8007dd0 <_TrySendOverflowPacket+0xd8>)
 8007d0e:	695b      	ldr	r3, [r3, #20]
 8007d10:	62bb      	str	r3, [r7, #40]	; 0x28
 8007d12:	e00b      	b.n	8007d2c <_TrySendOverflowPacket+0x34>
 8007d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d16:	b2da      	uxtb	r2, r3
 8007d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d1a:	1c59      	adds	r1, r3, #1
 8007d1c:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007d1e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007d22:	b2d2      	uxtb	r2, r2
 8007d24:	701a      	strb	r2, [r3, #0]
 8007d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d28:	09db      	lsrs	r3, r3, #7
 8007d2a:	62bb      	str	r3, [r7, #40]	; 0x28
 8007d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d2e:	2b7f      	cmp	r3, #127	; 0x7f
 8007d30:	d8f0      	bhi.n	8007d14 <_TrySendOverflowPacket+0x1c>
 8007d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d34:	1c5a      	adds	r2, r3, #1
 8007d36:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007d38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007d3a:	b2d2      	uxtb	r2, r2
 8007d3c:	701a      	strb	r2, [r3, #0]
 8007d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d40:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8007d42:	4b24      	ldr	r3, [pc, #144]	; (8007dd4 <_TrySendOverflowPacket+0xdc>)
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8007d48:	4b21      	ldr	r3, [pc, #132]	; (8007dd0 <_TrySendOverflowPacket+0xd8>)
 8007d4a:	68db      	ldr	r3, [r3, #12]
 8007d4c:	69ba      	ldr	r2, [r7, #24]
 8007d4e:	1ad3      	subs	r3, r2, r3
 8007d50:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8007d52:	69fb      	ldr	r3, [r7, #28]
 8007d54:	627b      	str	r3, [r7, #36]	; 0x24
 8007d56:	697b      	ldr	r3, [r7, #20]
 8007d58:	623b      	str	r3, [r7, #32]
 8007d5a:	e00b      	b.n	8007d74 <_TrySendOverflowPacket+0x7c>
 8007d5c:	6a3b      	ldr	r3, [r7, #32]
 8007d5e:	b2da      	uxtb	r2, r3
 8007d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d62:	1c59      	adds	r1, r3, #1
 8007d64:	6279      	str	r1, [r7, #36]	; 0x24
 8007d66:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007d6a:	b2d2      	uxtb	r2, r2
 8007d6c:	701a      	strb	r2, [r3, #0]
 8007d6e:	6a3b      	ldr	r3, [r7, #32]
 8007d70:	09db      	lsrs	r3, r3, #7
 8007d72:	623b      	str	r3, [r7, #32]
 8007d74:	6a3b      	ldr	r3, [r7, #32]
 8007d76:	2b7f      	cmp	r3, #127	; 0x7f
 8007d78:	d8f0      	bhi.n	8007d5c <_TrySendOverflowPacket+0x64>
 8007d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d7c:	1c5a      	adds	r2, r3, #1
 8007d7e:	627a      	str	r2, [r7, #36]	; 0x24
 8007d80:	6a3a      	ldr	r2, [r7, #32]
 8007d82:	b2d2      	uxtb	r2, r2
 8007d84:	701a      	strb	r2, [r3, #0]
 8007d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d88:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8007d8a:	1d3b      	adds	r3, r7, #4
 8007d8c:	69fa      	ldr	r2, [r7, #28]
 8007d8e:	1ad3      	subs	r3, r2, r3
 8007d90:	461a      	mov	r2, r3
 8007d92:	1d3b      	adds	r3, r7, #4
 8007d94:	4619      	mov	r1, r3
 8007d96:	2001      	movs	r0, #1
 8007d98:	f7ff fd8c 	bl	80078b4 <SEGGER_RTT_WriteSkipNoLock>
 8007d9c:	4603      	mov	r3, r0
 8007d9e:	613b      	str	r3, [r7, #16]
  if (Status) {
 8007da0:	693b      	ldr	r3, [r7, #16]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d009      	beq.n	8007dba <_TrySendOverflowPacket+0xc2>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8007da6:	4a0a      	ldr	r2, [pc, #40]	; (8007dd0 <_TrySendOverflowPacket+0xd8>)
 8007da8:	69bb      	ldr	r3, [r7, #24]
 8007daa:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8007dac:	4b08      	ldr	r3, [pc, #32]	; (8007dd0 <_TrySendOverflowPacket+0xd8>)
 8007dae:	781b      	ldrb	r3, [r3, #0]
 8007db0:	3b01      	subs	r3, #1
 8007db2:	b2da      	uxtb	r2, r3
 8007db4:	4b06      	ldr	r3, [pc, #24]	; (8007dd0 <_TrySendOverflowPacket+0xd8>)
 8007db6:	701a      	strb	r2, [r3, #0]
 8007db8:	e004      	b.n	8007dc4 <_TrySendOverflowPacket+0xcc>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8007dba:	4b05      	ldr	r3, [pc, #20]	; (8007dd0 <_TrySendOverflowPacket+0xd8>)
 8007dbc:	695b      	ldr	r3, [r3, #20]
 8007dbe:	3301      	adds	r3, #1
 8007dc0:	4a03      	ldr	r2, [pc, #12]	; (8007dd0 <_TrySendOverflowPacket+0xd8>)
 8007dc2:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8007dc4:	693b      	ldr	r3, [r7, #16]
}
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	3730      	adds	r7, #48	; 0x30
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	bd80      	pop	{r7, pc}
 8007dce:	bf00      	nop
 8007dd0:	20007ae0 	.word	0x20007ae0
 8007dd4:	e0001004 	.word	0xe0001004

08007dd8 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b08a      	sub	sp, #40	; 0x28
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	60f8      	str	r0, [r7, #12]
 8007de0:	60b9      	str	r1, [r7, #8]
 8007de2:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8007de4:	4b63      	ldr	r3, [pc, #396]	; (8007f74 <_SendPacket+0x19c>)
 8007de6:	781b      	ldrb	r3, [r3, #0]
 8007de8:	2b01      	cmp	r3, #1
 8007dea:	d010      	beq.n	8007e0e <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8007dec:	4b61      	ldr	r3, [pc, #388]	; (8007f74 <_SendPacket+0x19c>)
 8007dee:	781b      	ldrb	r3, [r3, #0]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	f000 80a1 	beq.w	8007f38 <_SendPacket+0x160>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8007df6:	4b5f      	ldr	r3, [pc, #380]	; (8007f74 <_SendPacket+0x19c>)
 8007df8:	781b      	ldrb	r3, [r3, #0]
 8007dfa:	2b02      	cmp	r3, #2
 8007dfc:	d109      	bne.n	8007e12 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8007dfe:	f7ff ff7b 	bl	8007cf8 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8007e02:	4b5c      	ldr	r3, [pc, #368]	; (8007f74 <_SendPacket+0x19c>)
 8007e04:	781b      	ldrb	r3, [r3, #0]
 8007e06:	2b01      	cmp	r3, #1
 8007e08:	f040 8098 	bne.w	8007f3c <_SendPacket+0x164>
      goto SendDone;
    }
  }
Send:
 8007e0c:	e001      	b.n	8007e12 <_SendPacket+0x3a>
    goto Send;
 8007e0e:	bf00      	nop
 8007e10:	e000      	b.n	8007e14 <_SendPacket+0x3c>
Send:
 8007e12:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2b1f      	cmp	r3, #31
 8007e18:	d809      	bhi.n	8007e2e <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8007e1a:	4b56      	ldr	r3, [pc, #344]	; (8007f74 <_SendPacket+0x19c>)
 8007e1c:	69da      	ldr	r2, [r3, #28]
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	fa22 f303 	lsr.w	r3, r2, r3
 8007e24:	f003 0301 	and.w	r3, r3, #1
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	f040 8089 	bne.w	8007f40 <_SendPacket+0x168>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2b17      	cmp	r3, #23
 8007e32:	d807      	bhi.n	8007e44 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	3b01      	subs	r3, #1
 8007e38:	60fb      	str	r3, [r7, #12]
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	b2da      	uxtb	r2, r3
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	701a      	strb	r2, [r3, #0]
 8007e42:	e03d      	b.n	8007ec0 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8007e44:	68ba      	ldr	r2, [r7, #8]
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	1ad3      	subs	r3, r2, r3
 8007e4a:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8007e4c:	69fb      	ldr	r3, [r7, #28]
 8007e4e:	2b7f      	cmp	r3, #127	; 0x7f
 8007e50:	d912      	bls.n	8007e78 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8007e52:	69fb      	ldr	r3, [r7, #28]
 8007e54:	09da      	lsrs	r2, r3, #7
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	3b01      	subs	r3, #1
 8007e5a:	60fb      	str	r3, [r7, #12]
 8007e5c:	b2d2      	uxtb	r2, r2
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8007e62:	69fb      	ldr	r3, [r7, #28]
 8007e64:	b2db      	uxtb	r3, r3
 8007e66:	68fa      	ldr	r2, [r7, #12]
 8007e68:	3a01      	subs	r2, #1
 8007e6a:	60fa      	str	r2, [r7, #12]
 8007e6c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007e70:	b2da      	uxtb	r2, r3
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	701a      	strb	r2, [r3, #0]
 8007e76:	e006      	b.n	8007e86 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	3b01      	subs	r3, #1
 8007e7c:	60fb      	str	r3, [r7, #12]
 8007e7e:	69fb      	ldr	r3, [r7, #28]
 8007e80:	b2da      	uxtb	r2, r3
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2b7f      	cmp	r3, #127	; 0x7f
 8007e8a:	d912      	bls.n	8007eb2 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	09da      	lsrs	r2, r3, #7
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	3b01      	subs	r3, #1
 8007e94:	60fb      	str	r3, [r7, #12]
 8007e96:	b2d2      	uxtb	r2, r2
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	b2db      	uxtb	r3, r3
 8007ea0:	68fa      	ldr	r2, [r7, #12]
 8007ea2:	3a01      	subs	r2, #1
 8007ea4:	60fa      	str	r2, [r7, #12]
 8007ea6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007eaa:	b2da      	uxtb	r2, r3
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	701a      	strb	r2, [r3, #0]
 8007eb0:	e006      	b.n	8007ec0 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	3b01      	subs	r3, #1
 8007eb6:	60fb      	str	r3, [r7, #12]
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	b2da      	uxtb	r2, r3
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8007ec0:	4b2d      	ldr	r3, [pc, #180]	; (8007f78 <_SendPacket+0x1a0>)
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8007ec6:	4b2b      	ldr	r3, [pc, #172]	; (8007f74 <_SendPacket+0x19c>)
 8007ec8:	68db      	ldr	r3, [r3, #12]
 8007eca:	69ba      	ldr	r2, [r7, #24]
 8007ecc:	1ad3      	subs	r3, r2, r3
 8007ece:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8007ed0:	68bb      	ldr	r3, [r7, #8]
 8007ed2:	627b      	str	r3, [r7, #36]	; 0x24
 8007ed4:	697b      	ldr	r3, [r7, #20]
 8007ed6:	623b      	str	r3, [r7, #32]
 8007ed8:	e00b      	b.n	8007ef2 <_SendPacket+0x11a>
 8007eda:	6a3b      	ldr	r3, [r7, #32]
 8007edc:	b2da      	uxtb	r2, r3
 8007ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ee0:	1c59      	adds	r1, r3, #1
 8007ee2:	6279      	str	r1, [r7, #36]	; 0x24
 8007ee4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007ee8:	b2d2      	uxtb	r2, r2
 8007eea:	701a      	strb	r2, [r3, #0]
 8007eec:	6a3b      	ldr	r3, [r7, #32]
 8007eee:	09db      	lsrs	r3, r3, #7
 8007ef0:	623b      	str	r3, [r7, #32]
 8007ef2:	6a3b      	ldr	r3, [r7, #32]
 8007ef4:	2b7f      	cmp	r3, #127	; 0x7f
 8007ef6:	d8f0      	bhi.n	8007eda <_SendPacket+0x102>
 8007ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007efa:	1c5a      	adds	r2, r3, #1
 8007efc:	627a      	str	r2, [r7, #36]	; 0x24
 8007efe:	6a3a      	ldr	r2, [r7, #32]
 8007f00:	b2d2      	uxtb	r2, r2
 8007f02:	701a      	strb	r2, [r3, #0]
 8007f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f06:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8007f08:	68ba      	ldr	r2, [r7, #8]
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	1ad3      	subs	r3, r2, r3
 8007f0e:	461a      	mov	r2, r3
 8007f10:	68f9      	ldr	r1, [r7, #12]
 8007f12:	2001      	movs	r0, #1
 8007f14:	f7ff fcce 	bl	80078b4 <SEGGER_RTT_WriteSkipNoLock>
 8007f18:	4603      	mov	r3, r0
 8007f1a:	613b      	str	r3, [r7, #16]
  if (Status) {
 8007f1c:	693b      	ldr	r3, [r7, #16]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d003      	beq.n	8007f2a <_SendPacket+0x152>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8007f22:	4a14      	ldr	r2, [pc, #80]	; (8007f74 <_SendPacket+0x19c>)
 8007f24:	69bb      	ldr	r3, [r7, #24]
 8007f26:	60d3      	str	r3, [r2, #12]
 8007f28:	e00b      	b.n	8007f42 <_SendPacket+0x16a>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8007f2a:	4b12      	ldr	r3, [pc, #72]	; (8007f74 <_SendPacket+0x19c>)
 8007f2c:	781b      	ldrb	r3, [r3, #0]
 8007f2e:	3301      	adds	r3, #1
 8007f30:	b2da      	uxtb	r2, r3
 8007f32:	4b10      	ldr	r3, [pc, #64]	; (8007f74 <_SendPacket+0x19c>)
 8007f34:	701a      	strb	r2, [r3, #0]
 8007f36:	e004      	b.n	8007f42 <_SendPacket+0x16a>
    goto SendDone;
 8007f38:	bf00      	nop
 8007f3a:	e002      	b.n	8007f42 <_SendPacket+0x16a>
      goto SendDone;
 8007f3c:	bf00      	nop
 8007f3e:	e000      	b.n	8007f42 <_SendPacket+0x16a>
      goto SendDone;
 8007f40:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8007f42:	4b0e      	ldr	r3, [pc, #56]	; (8007f7c <_SendPacket+0x1a4>)
 8007f44:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8007f48:	4b0c      	ldr	r3, [pc, #48]	; (8007f7c <_SendPacket+0x1a4>)
 8007f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f4e:	429a      	cmp	r2, r3
 8007f50:	d00b      	beq.n	8007f6a <_SendPacket+0x192>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8007f52:	4b08      	ldr	r3, [pc, #32]	; (8007f74 <_SendPacket+0x19c>)
 8007f54:	789b      	ldrb	r3, [r3, #2]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d107      	bne.n	8007f6a <_SendPacket+0x192>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8007f5a:	4b06      	ldr	r3, [pc, #24]	; (8007f74 <_SendPacket+0x19c>)
 8007f5c:	2201      	movs	r2, #1
 8007f5e:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8007f60:	f7ff fe66 	bl	8007c30 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8007f64:	4b03      	ldr	r3, [pc, #12]	; (8007f74 <_SendPacket+0x19c>)
 8007f66:	2200      	movs	r2, #0
 8007f68:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8007f6a:	bf00      	nop
 8007f6c:	3728      	adds	r7, #40	; 0x28
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	bd80      	pop	{r7, pc}
 8007f72:	bf00      	nop
 8007f74:	20007ae0 	.word	0x20007ae0
 8007f78:	e0001004 	.word	0xe0001004
 8007f7c:	20005620 	.word	0x20005620

08007f80 <SEGGER_SYSVIEW_Init>:
*    to identify the SystemView channel.
*
*  Notes
*    The channel is configured by the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b086      	sub	sp, #24
 8007f84:	af02      	add	r7, sp, #8
 8007f86:	60f8      	str	r0, [r7, #12]
 8007f88:	60b9      	str	r1, [r7, #8]
 8007f8a:	607a      	str	r2, [r7, #4]
 8007f8c:	603b      	str	r3, [r7, #0]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
  _SYSVIEW_Globals.EnableState      = 0;
  _SYSVIEW_Globals.PacketCount      = 0;
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8007f8e:	2300      	movs	r3, #0
 8007f90:	9300      	str	r3, [sp, #0]
 8007f92:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007f96:	4a14      	ldr	r2, [pc, #80]	; (8007fe8 <SEGGER_SYSVIEW_Init+0x68>)
 8007f98:	4914      	ldr	r1, [pc, #80]	; (8007fec <SEGGER_SYSVIEW_Init+0x6c>)
 8007f9a:	2001      	movs	r0, #1
 8007f9c:	f7ff fd1a 	bl	80079d4 <SEGGER_RTT_ConfigUpBuffer>
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	9300      	str	r3, [sp, #0]
 8007fa4:	2308      	movs	r3, #8
 8007fa6:	4a12      	ldr	r2, [pc, #72]	; (8007ff0 <SEGGER_SYSVIEW_Init+0x70>)
 8007fa8:	4910      	ldr	r1, [pc, #64]	; (8007fec <SEGGER_SYSVIEW_Init+0x6c>)
 8007faa:	2001      	movs	r0, #1
 8007fac:	f7ff fd7c 	bl	8007aa8 <SEGGER_RTT_ConfigDownBuffer>
  // TODO: Use SEGGER_RTT_AllocDownBuffer when SystemViewer is able to handle another Down Channel than Up Channel.
  //
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8007fb0:	4b10      	ldr	r3, [pc, #64]	; (8007ff4 <SEGGER_SYSVIEW_Init+0x74>)
 8007fb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007fb6:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8007fb8:	4b0f      	ldr	r3, [pc, #60]	; (8007ff8 <SEGGER_SYSVIEW_Init+0x78>)
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	4a0d      	ldr	r2, [pc, #52]	; (8007ff4 <SEGGER_SYSVIEW_Init+0x74>)
 8007fbe:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8007fc0:	4a0c      	ldr	r2, [pc, #48]	; (8007ff4 <SEGGER_SYSVIEW_Init+0x74>)
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8007fc6:	4a0b      	ldr	r2, [pc, #44]	; (8007ff4 <SEGGER_SYSVIEW_Init+0x74>)
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8007fcc:	4a09      	ldr	r2, [pc, #36]	; (8007ff4 <SEGGER_SYSVIEW_Init+0x74>)
 8007fce:	68bb      	ldr	r3, [r7, #8]
 8007fd0:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8007fd2:	4a08      	ldr	r2, [pc, #32]	; (8007ff4 <SEGGER_SYSVIEW_Init+0x74>)
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8007fd8:	4b06      	ldr	r3, [pc, #24]	; (8007ff4 <SEGGER_SYSVIEW_Init+0x74>)
 8007fda:	2200      	movs	r2, #0
 8007fdc:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8007fde:	bf00      	nop
 8007fe0:	3710      	adds	r7, #16
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	bd80      	pop	{r7, pc}
 8007fe6:	bf00      	nop
 8007fe8:	20005ad8 	.word	0x20005ad8
 8007fec:	080090c8 	.word	0x080090c8
 8007ff0:	20007ad8 	.word	0x20007ad8
 8007ff4:	20007ae0 	.word	0x20007ae0
 8007ff8:	e0001004 	.word	0xe0001004

08007ffc <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8007ffc:	b480      	push	{r7}
 8007ffe:	b083      	sub	sp, #12
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8008004:	4a04      	ldr	r2, [pc, #16]	; (8008018 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	6113      	str	r3, [r2, #16]
}
 800800a:	bf00      	nop
 800800c:	370c      	adds	r7, #12
 800800e:	46bd      	mov	sp, r7
 8008010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008014:	4770      	bx	lr
 8008016:	bf00      	nop
 8008018:	20007ae0 	.word	0x20007ae0

0800801c <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 800801c:	b580      	push	{r7, lr}
 800801e:	b084      	sub	sp, #16
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8008024:	f3ef 8311 	mrs	r3, BASEPRI
 8008028:	f04f 0120 	mov.w	r1, #32
 800802c:	f381 8811 	msr	BASEPRI, r1
 8008030:	60fb      	str	r3, [r7, #12]
 8008032:	4808      	ldr	r0, [pc, #32]	; (8008054 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8008034:	f7ff fdef 	bl	8007c16 <_PreparePacket>
 8008038:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800803a:	687a      	ldr	r2, [r7, #4]
 800803c:	68b9      	ldr	r1, [r7, #8]
 800803e:	68b8      	ldr	r0, [r7, #8]
 8008040:	f7ff feca 	bl	8007dd8 <_SendPacket>
  RECORD_END();
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	f383 8811 	msr	BASEPRI, r3
}
 800804a:	bf00      	nop
 800804c:	3710      	adds	r7, #16
 800804e:	46bd      	mov	sp, r7
 8008050:	bd80      	pop	{r7, pc}
 8008052:	bf00      	nop
 8008054:	20007b10 	.word	0x20007b10

08008058 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8008058:	b580      	push	{r7, lr}
 800805a:	b088      	sub	sp, #32
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
 8008060:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8008062:	f3ef 8311 	mrs	r3, BASEPRI
 8008066:	f04f 0120 	mov.w	r1, #32
 800806a:	f381 8811 	msr	BASEPRI, r1
 800806e:	617b      	str	r3, [r7, #20]
 8008070:	4816      	ldr	r0, [pc, #88]	; (80080cc <SEGGER_SYSVIEW_RecordU32+0x74>)
 8008072:	f7ff fdd0 	bl	8007c16 <_PreparePacket>
 8008076:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8008078:	693b      	ldr	r3, [r7, #16]
 800807a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	61fb      	str	r3, [r7, #28]
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	61bb      	str	r3, [r7, #24]
 8008084:	e00b      	b.n	800809e <SEGGER_SYSVIEW_RecordU32+0x46>
 8008086:	69bb      	ldr	r3, [r7, #24]
 8008088:	b2da      	uxtb	r2, r3
 800808a:	69fb      	ldr	r3, [r7, #28]
 800808c:	1c59      	adds	r1, r3, #1
 800808e:	61f9      	str	r1, [r7, #28]
 8008090:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008094:	b2d2      	uxtb	r2, r2
 8008096:	701a      	strb	r2, [r3, #0]
 8008098:	69bb      	ldr	r3, [r7, #24]
 800809a:	09db      	lsrs	r3, r3, #7
 800809c:	61bb      	str	r3, [r7, #24]
 800809e:	69bb      	ldr	r3, [r7, #24]
 80080a0:	2b7f      	cmp	r3, #127	; 0x7f
 80080a2:	d8f0      	bhi.n	8008086 <SEGGER_SYSVIEW_RecordU32+0x2e>
 80080a4:	69fb      	ldr	r3, [r7, #28]
 80080a6:	1c5a      	adds	r2, r3, #1
 80080a8:	61fa      	str	r2, [r7, #28]
 80080aa:	69ba      	ldr	r2, [r7, #24]
 80080ac:	b2d2      	uxtb	r2, r2
 80080ae:	701a      	strb	r2, [r3, #0]
 80080b0:	69fb      	ldr	r3, [r7, #28]
 80080b2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80080b4:	687a      	ldr	r2, [r7, #4]
 80080b6:	68f9      	ldr	r1, [r7, #12]
 80080b8:	6938      	ldr	r0, [r7, #16]
 80080ba:	f7ff fe8d 	bl	8007dd8 <_SendPacket>
  RECORD_END();
 80080be:	697b      	ldr	r3, [r7, #20]
 80080c0:	f383 8811 	msr	BASEPRI, r3
}
 80080c4:	bf00      	nop
 80080c6:	3720      	adds	r7, #32
 80080c8:	46bd      	mov	sp, r7
 80080ca:	bd80      	pop	{r7, pc}
 80080cc:	20007b10 	.word	0x20007b10

080080d0 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b08c      	sub	sp, #48	; 0x30
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	60f8      	str	r0, [r7, #12]
 80080d8:	60b9      	str	r1, [r7, #8]
 80080da:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80080dc:	f3ef 8311 	mrs	r3, BASEPRI
 80080e0:	f04f 0120 	mov.w	r1, #32
 80080e4:	f381 8811 	msr	BASEPRI, r1
 80080e8:	61fb      	str	r3, [r7, #28]
 80080ea:	4825      	ldr	r0, [pc, #148]	; (8008180 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80080ec:	f7ff fd93 	bl	8007c16 <_PreparePacket>
 80080f0:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80080f2:	69bb      	ldr	r3, [r7, #24]
 80080f4:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80080f6:	697b      	ldr	r3, [r7, #20]
 80080f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80080fa:	68bb      	ldr	r3, [r7, #8]
 80080fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80080fe:	e00b      	b.n	8008118 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8008100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008102:	b2da      	uxtb	r2, r3
 8008104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008106:	1c59      	adds	r1, r3, #1
 8008108:	62f9      	str	r1, [r7, #44]	; 0x2c
 800810a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800810e:	b2d2      	uxtb	r2, r2
 8008110:	701a      	strb	r2, [r3, #0]
 8008112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008114:	09db      	lsrs	r3, r3, #7
 8008116:	62bb      	str	r3, [r7, #40]	; 0x28
 8008118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800811a:	2b7f      	cmp	r3, #127	; 0x7f
 800811c:	d8f0      	bhi.n	8008100 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800811e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008120:	1c5a      	adds	r2, r3, #1
 8008122:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008124:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008126:	b2d2      	uxtb	r2, r2
 8008128:	701a      	strb	r2, [r3, #0]
 800812a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800812c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800812e:	697b      	ldr	r3, [r7, #20]
 8008130:	627b      	str	r3, [r7, #36]	; 0x24
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	623b      	str	r3, [r7, #32]
 8008136:	e00b      	b.n	8008150 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8008138:	6a3b      	ldr	r3, [r7, #32]
 800813a:	b2da      	uxtb	r2, r3
 800813c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800813e:	1c59      	adds	r1, r3, #1
 8008140:	6279      	str	r1, [r7, #36]	; 0x24
 8008142:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008146:	b2d2      	uxtb	r2, r2
 8008148:	701a      	strb	r2, [r3, #0]
 800814a:	6a3b      	ldr	r3, [r7, #32]
 800814c:	09db      	lsrs	r3, r3, #7
 800814e:	623b      	str	r3, [r7, #32]
 8008150:	6a3b      	ldr	r3, [r7, #32]
 8008152:	2b7f      	cmp	r3, #127	; 0x7f
 8008154:	d8f0      	bhi.n	8008138 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8008156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008158:	1c5a      	adds	r2, r3, #1
 800815a:	627a      	str	r2, [r7, #36]	; 0x24
 800815c:	6a3a      	ldr	r2, [r7, #32]
 800815e:	b2d2      	uxtb	r2, r2
 8008160:	701a      	strb	r2, [r3, #0]
 8008162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008164:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8008166:	68fa      	ldr	r2, [r7, #12]
 8008168:	6979      	ldr	r1, [r7, #20]
 800816a:	69b8      	ldr	r0, [r7, #24]
 800816c:	f7ff fe34 	bl	8007dd8 <_SendPacket>
  RECORD_END();
 8008170:	69fb      	ldr	r3, [r7, #28]
 8008172:	f383 8811 	msr	BASEPRI, r3
}
 8008176:	bf00      	nop
 8008178:	3730      	adds	r7, #48	; 0x30
 800817a:	46bd      	mov	sp, r7
 800817c:	bd80      	pop	{r7, pc}
 800817e:	bf00      	nop
 8008180:	20007b10 	.word	0x20007b10

08008184 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8008184:	b580      	push	{r7, lr}
 8008186:	b08e      	sub	sp, #56	; 0x38
 8008188:	af00      	add	r7, sp, #0
 800818a:	60f8      	str	r0, [r7, #12]
 800818c:	60b9      	str	r1, [r7, #8]
 800818e:	607a      	str	r2, [r7, #4]
 8008190:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8008192:	f3ef 8311 	mrs	r3, BASEPRI
 8008196:	f04f 0120 	mov.w	r1, #32
 800819a:	f381 8811 	msr	BASEPRI, r1
 800819e:	61fb      	str	r3, [r7, #28]
 80081a0:	4832      	ldr	r0, [pc, #200]	; (800826c <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 80081a2:	f7ff fd38 	bl	8007c16 <_PreparePacket>
 80081a6:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80081a8:	69bb      	ldr	r3, [r7, #24]
 80081aa:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80081ac:	697b      	ldr	r3, [r7, #20]
 80081ae:	637b      	str	r3, [r7, #52]	; 0x34
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	633b      	str	r3, [r7, #48]	; 0x30
 80081b4:	e00b      	b.n	80081ce <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 80081b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081b8:	b2da      	uxtb	r2, r3
 80081ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081bc:	1c59      	adds	r1, r3, #1
 80081be:	6379      	str	r1, [r7, #52]	; 0x34
 80081c0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80081c4:	b2d2      	uxtb	r2, r2
 80081c6:	701a      	strb	r2, [r3, #0]
 80081c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081ca:	09db      	lsrs	r3, r3, #7
 80081cc:	633b      	str	r3, [r7, #48]	; 0x30
 80081ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081d0:	2b7f      	cmp	r3, #127	; 0x7f
 80081d2:	d8f0      	bhi.n	80081b6 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 80081d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081d6:	1c5a      	adds	r2, r3, #1
 80081d8:	637a      	str	r2, [r7, #52]	; 0x34
 80081da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80081dc:	b2d2      	uxtb	r2, r2
 80081de:	701a      	strb	r2, [r3, #0]
 80081e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081e2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80081e4:	697b      	ldr	r3, [r7, #20]
 80081e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80081ec:	e00b      	b.n	8008206 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 80081ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081f0:	b2da      	uxtb	r2, r3
 80081f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081f4:	1c59      	adds	r1, r3, #1
 80081f6:	62f9      	str	r1, [r7, #44]	; 0x2c
 80081f8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80081fc:	b2d2      	uxtb	r2, r2
 80081fe:	701a      	strb	r2, [r3, #0]
 8008200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008202:	09db      	lsrs	r3, r3, #7
 8008204:	62bb      	str	r3, [r7, #40]	; 0x28
 8008206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008208:	2b7f      	cmp	r3, #127	; 0x7f
 800820a:	d8f0      	bhi.n	80081ee <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 800820c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800820e:	1c5a      	adds	r2, r3, #1
 8008210:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008212:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008214:	b2d2      	uxtb	r2, r2
 8008216:	701a      	strb	r2, [r3, #0]
 8008218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800821a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800821c:	697b      	ldr	r3, [r7, #20]
 800821e:	627b      	str	r3, [r7, #36]	; 0x24
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	623b      	str	r3, [r7, #32]
 8008224:	e00b      	b.n	800823e <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8008226:	6a3b      	ldr	r3, [r7, #32]
 8008228:	b2da      	uxtb	r2, r3
 800822a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800822c:	1c59      	adds	r1, r3, #1
 800822e:	6279      	str	r1, [r7, #36]	; 0x24
 8008230:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008234:	b2d2      	uxtb	r2, r2
 8008236:	701a      	strb	r2, [r3, #0]
 8008238:	6a3b      	ldr	r3, [r7, #32]
 800823a:	09db      	lsrs	r3, r3, #7
 800823c:	623b      	str	r3, [r7, #32]
 800823e:	6a3b      	ldr	r3, [r7, #32]
 8008240:	2b7f      	cmp	r3, #127	; 0x7f
 8008242:	d8f0      	bhi.n	8008226 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8008244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008246:	1c5a      	adds	r2, r3, #1
 8008248:	627a      	str	r2, [r7, #36]	; 0x24
 800824a:	6a3a      	ldr	r2, [r7, #32]
 800824c:	b2d2      	uxtb	r2, r2
 800824e:	701a      	strb	r2, [r3, #0]
 8008250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008252:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8008254:	68fa      	ldr	r2, [r7, #12]
 8008256:	6979      	ldr	r1, [r7, #20]
 8008258:	69b8      	ldr	r0, [r7, #24]
 800825a:	f7ff fdbd 	bl	8007dd8 <_SendPacket>
  RECORD_END();
 800825e:	69fb      	ldr	r3, [r7, #28]
 8008260:	f383 8811 	msr	BASEPRI, r3
}
 8008264:	bf00      	nop
 8008266:	3738      	adds	r7, #56	; 0x38
 8008268:	46bd      	mov	sp, r7
 800826a:	bd80      	pop	{r7, pc}
 800826c:	20007b10 	.word	0x20007b10

08008270 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8008270:	b580      	push	{r7, lr}
 8008272:	b090      	sub	sp, #64	; 0x40
 8008274:	af00      	add	r7, sp, #0
 8008276:	60f8      	str	r0, [r7, #12]
 8008278:	60b9      	str	r1, [r7, #8]
 800827a:	607a      	str	r2, [r7, #4]
 800827c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800827e:	f3ef 8311 	mrs	r3, BASEPRI
 8008282:	f04f 0120 	mov.w	r1, #32
 8008286:	f381 8811 	msr	BASEPRI, r1
 800828a:	61fb      	str	r3, [r7, #28]
 800828c:	4840      	ldr	r0, [pc, #256]	; (8008390 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 800828e:	f7ff fcc2 	bl	8007c16 <_PreparePacket>
 8008292:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8008294:	69bb      	ldr	r3, [r7, #24]
 8008296:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8008298:	697b      	ldr	r3, [r7, #20]
 800829a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800829c:	68bb      	ldr	r3, [r7, #8]
 800829e:	63bb      	str	r3, [r7, #56]	; 0x38
 80082a0:	e00b      	b.n	80082ba <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 80082a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082a4:	b2da      	uxtb	r2, r3
 80082a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082a8:	1c59      	adds	r1, r3, #1
 80082aa:	63f9      	str	r1, [r7, #60]	; 0x3c
 80082ac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80082b0:	b2d2      	uxtb	r2, r2
 80082b2:	701a      	strb	r2, [r3, #0]
 80082b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082b6:	09db      	lsrs	r3, r3, #7
 80082b8:	63bb      	str	r3, [r7, #56]	; 0x38
 80082ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082bc:	2b7f      	cmp	r3, #127	; 0x7f
 80082be:	d8f0      	bhi.n	80082a2 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 80082c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082c2:	1c5a      	adds	r2, r3, #1
 80082c4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80082c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80082c8:	b2d2      	uxtb	r2, r2
 80082ca:	701a      	strb	r2, [r3, #0]
 80082cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082ce:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80082d0:	697b      	ldr	r3, [r7, #20]
 80082d2:	637b      	str	r3, [r7, #52]	; 0x34
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	633b      	str	r3, [r7, #48]	; 0x30
 80082d8:	e00b      	b.n	80082f2 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 80082da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082dc:	b2da      	uxtb	r2, r3
 80082de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082e0:	1c59      	adds	r1, r3, #1
 80082e2:	6379      	str	r1, [r7, #52]	; 0x34
 80082e4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80082e8:	b2d2      	uxtb	r2, r2
 80082ea:	701a      	strb	r2, [r3, #0]
 80082ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082ee:	09db      	lsrs	r3, r3, #7
 80082f0:	633b      	str	r3, [r7, #48]	; 0x30
 80082f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082f4:	2b7f      	cmp	r3, #127	; 0x7f
 80082f6:	d8f0      	bhi.n	80082da <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 80082f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082fa:	1c5a      	adds	r2, r3, #1
 80082fc:	637a      	str	r2, [r7, #52]	; 0x34
 80082fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008300:	b2d2      	uxtb	r2, r2
 8008302:	701a      	strb	r2, [r3, #0]
 8008304:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008306:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8008308:	697b      	ldr	r3, [r7, #20]
 800830a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008310:	e00b      	b.n	800832a <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8008312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008314:	b2da      	uxtb	r2, r3
 8008316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008318:	1c59      	adds	r1, r3, #1
 800831a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800831c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008320:	b2d2      	uxtb	r2, r2
 8008322:	701a      	strb	r2, [r3, #0]
 8008324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008326:	09db      	lsrs	r3, r3, #7
 8008328:	62bb      	str	r3, [r7, #40]	; 0x28
 800832a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800832c:	2b7f      	cmp	r3, #127	; 0x7f
 800832e:	d8f0      	bhi.n	8008312 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8008330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008332:	1c5a      	adds	r2, r3, #1
 8008334:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008336:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008338:	b2d2      	uxtb	r2, r2
 800833a:	701a      	strb	r2, [r3, #0]
 800833c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800833e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8008340:	697b      	ldr	r3, [r7, #20]
 8008342:	627b      	str	r3, [r7, #36]	; 0x24
 8008344:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008346:	623b      	str	r3, [r7, #32]
 8008348:	e00b      	b.n	8008362 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 800834a:	6a3b      	ldr	r3, [r7, #32]
 800834c:	b2da      	uxtb	r2, r3
 800834e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008350:	1c59      	adds	r1, r3, #1
 8008352:	6279      	str	r1, [r7, #36]	; 0x24
 8008354:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008358:	b2d2      	uxtb	r2, r2
 800835a:	701a      	strb	r2, [r3, #0]
 800835c:	6a3b      	ldr	r3, [r7, #32]
 800835e:	09db      	lsrs	r3, r3, #7
 8008360:	623b      	str	r3, [r7, #32]
 8008362:	6a3b      	ldr	r3, [r7, #32]
 8008364:	2b7f      	cmp	r3, #127	; 0x7f
 8008366:	d8f0      	bhi.n	800834a <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8008368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800836a:	1c5a      	adds	r2, r3, #1
 800836c:	627a      	str	r2, [r7, #36]	; 0x24
 800836e:	6a3a      	ldr	r2, [r7, #32]
 8008370:	b2d2      	uxtb	r2, r2
 8008372:	701a      	strb	r2, [r3, #0]
 8008374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008376:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8008378:	68fa      	ldr	r2, [r7, #12]
 800837a:	6979      	ldr	r1, [r7, #20]
 800837c:	69b8      	ldr	r0, [r7, #24]
 800837e:	f7ff fd2b 	bl	8007dd8 <_SendPacket>
  RECORD_END();
 8008382:	69fb      	ldr	r3, [r7, #28]
 8008384:	f383 8811 	msr	BASEPRI, r3
}
 8008388:	bf00      	nop
 800838a:	3740      	adds	r7, #64	; 0x40
 800838c:	46bd      	mov	sp, r7
 800838e:	bd80      	pop	{r7, pc}
 8008390:	20007b10 	.word	0x20007b10

08008394 <SEGGER_SYSVIEW_Start>:
*    system description string is sent, too.
*
*  Notes
*    SEGGER_SYSVIEW_Start and SEGGER_SYSVIEW_Stop do not nest.
*/
void SEGGER_SYSVIEW_Start(void) {
 8008394:	b580      	push	{r7, lr}
 8008396:	b08c      	sub	sp, #48	; 0x30
 8008398:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.EnableState == 0) {
 800839a:	4b59      	ldr	r3, [pc, #356]	; (8008500 <SEGGER_SYSVIEW_Start+0x16c>)
 800839c:	781b      	ldrb	r3, [r3, #0]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	f040 80aa 	bne.w	80084f8 <SEGGER_SYSVIEW_Start+0x164>
    _SYSVIEW_Globals.EnableState = 1;
 80083a4:	4b56      	ldr	r3, [pc, #344]	; (8008500 <SEGGER_SYSVIEW_Start+0x16c>)
 80083a6:	2201      	movs	r2, #1
 80083a8:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80083aa:	f3ef 8311 	mrs	r3, BASEPRI
 80083ae:	f04f 0120 	mov.w	r1, #32
 80083b2:	f381 8811 	msr	BASEPRI, r1
 80083b6:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80083b8:	220a      	movs	r2, #10
 80083ba:	4952      	ldr	r1, [pc, #328]	; (8008504 <SEGGER_SYSVIEW_Start+0x170>)
 80083bc:	2001      	movs	r0, #1
 80083be:	f7ff fa79 	bl	80078b4 <SEGGER_RTT_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80083c8:	200a      	movs	r0, #10
 80083ca:	f7ff fe27 	bl	800801c <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80083ce:	f3ef 8311 	mrs	r3, BASEPRI
 80083d2:	f04f 0120 	mov.w	r1, #32
 80083d6:	f381 8811 	msr	BASEPRI, r1
 80083da:	60bb      	str	r3, [r7, #8]
 80083dc:	484a      	ldr	r0, [pc, #296]	; (8008508 <SEGGER_SYSVIEW_Start+0x174>)
 80083de:	f7ff fc1a 	bl	8007c16 <_PreparePacket>
 80083e2:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80083ec:	4b44      	ldr	r3, [pc, #272]	; (8008500 <SEGGER_SYSVIEW_Start+0x16c>)
 80083ee:	685b      	ldr	r3, [r3, #4]
 80083f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80083f2:	e00b      	b.n	800840c <SEGGER_SYSVIEW_Start+0x78>
 80083f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083f6:	b2da      	uxtb	r2, r3
 80083f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083fa:	1c59      	adds	r1, r3, #1
 80083fc:	62f9      	str	r1, [r7, #44]	; 0x2c
 80083fe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008402:	b2d2      	uxtb	r2, r2
 8008404:	701a      	strb	r2, [r3, #0]
 8008406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008408:	09db      	lsrs	r3, r3, #7
 800840a:	62bb      	str	r3, [r7, #40]	; 0x28
 800840c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800840e:	2b7f      	cmp	r3, #127	; 0x7f
 8008410:	d8f0      	bhi.n	80083f4 <SEGGER_SYSVIEW_Start+0x60>
 8008412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008414:	1c5a      	adds	r2, r3, #1
 8008416:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008418:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800841a:	b2d2      	uxtb	r2, r2
 800841c:	701a      	strb	r2, [r3, #0]
 800841e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008420:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	627b      	str	r3, [r7, #36]	; 0x24
 8008426:	4b36      	ldr	r3, [pc, #216]	; (8008500 <SEGGER_SYSVIEW_Start+0x16c>)
 8008428:	689b      	ldr	r3, [r3, #8]
 800842a:	623b      	str	r3, [r7, #32]
 800842c:	e00b      	b.n	8008446 <SEGGER_SYSVIEW_Start+0xb2>
 800842e:	6a3b      	ldr	r3, [r7, #32]
 8008430:	b2da      	uxtb	r2, r3
 8008432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008434:	1c59      	adds	r1, r3, #1
 8008436:	6279      	str	r1, [r7, #36]	; 0x24
 8008438:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800843c:	b2d2      	uxtb	r2, r2
 800843e:	701a      	strb	r2, [r3, #0]
 8008440:	6a3b      	ldr	r3, [r7, #32]
 8008442:	09db      	lsrs	r3, r3, #7
 8008444:	623b      	str	r3, [r7, #32]
 8008446:	6a3b      	ldr	r3, [r7, #32]
 8008448:	2b7f      	cmp	r3, #127	; 0x7f
 800844a:	d8f0      	bhi.n	800842e <SEGGER_SYSVIEW_Start+0x9a>
 800844c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800844e:	1c5a      	adds	r2, r3, #1
 8008450:	627a      	str	r2, [r7, #36]	; 0x24
 8008452:	6a3a      	ldr	r2, [r7, #32]
 8008454:	b2d2      	uxtb	r2, r2
 8008456:	701a      	strb	r2, [r3, #0]
 8008458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800845a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	61fb      	str	r3, [r7, #28]
 8008460:	4b27      	ldr	r3, [pc, #156]	; (8008500 <SEGGER_SYSVIEW_Start+0x16c>)
 8008462:	691b      	ldr	r3, [r3, #16]
 8008464:	61bb      	str	r3, [r7, #24]
 8008466:	e00b      	b.n	8008480 <SEGGER_SYSVIEW_Start+0xec>
 8008468:	69bb      	ldr	r3, [r7, #24]
 800846a:	b2da      	uxtb	r2, r3
 800846c:	69fb      	ldr	r3, [r7, #28]
 800846e:	1c59      	adds	r1, r3, #1
 8008470:	61f9      	str	r1, [r7, #28]
 8008472:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008476:	b2d2      	uxtb	r2, r2
 8008478:	701a      	strb	r2, [r3, #0]
 800847a:	69bb      	ldr	r3, [r7, #24]
 800847c:	09db      	lsrs	r3, r3, #7
 800847e:	61bb      	str	r3, [r7, #24]
 8008480:	69bb      	ldr	r3, [r7, #24]
 8008482:	2b7f      	cmp	r3, #127	; 0x7f
 8008484:	d8f0      	bhi.n	8008468 <SEGGER_SYSVIEW_Start+0xd4>
 8008486:	69fb      	ldr	r3, [r7, #28]
 8008488:	1c5a      	adds	r2, r3, #1
 800848a:	61fa      	str	r2, [r7, #28]
 800848c:	69ba      	ldr	r2, [r7, #24]
 800848e:	b2d2      	uxtb	r2, r2
 8008490:	701a      	strb	r2, [r3, #0]
 8008492:	69fb      	ldr	r3, [r7, #28]
 8008494:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	617b      	str	r3, [r7, #20]
 800849a:	2302      	movs	r3, #2
 800849c:	613b      	str	r3, [r7, #16]
 800849e:	e00b      	b.n	80084b8 <SEGGER_SYSVIEW_Start+0x124>
 80084a0:	693b      	ldr	r3, [r7, #16]
 80084a2:	b2da      	uxtb	r2, r3
 80084a4:	697b      	ldr	r3, [r7, #20]
 80084a6:	1c59      	adds	r1, r3, #1
 80084a8:	6179      	str	r1, [r7, #20]
 80084aa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80084ae:	b2d2      	uxtb	r2, r2
 80084b0:	701a      	strb	r2, [r3, #0]
 80084b2:	693b      	ldr	r3, [r7, #16]
 80084b4:	09db      	lsrs	r3, r3, #7
 80084b6:	613b      	str	r3, [r7, #16]
 80084b8:	693b      	ldr	r3, [r7, #16]
 80084ba:	2b7f      	cmp	r3, #127	; 0x7f
 80084bc:	d8f0      	bhi.n	80084a0 <SEGGER_SYSVIEW_Start+0x10c>
 80084be:	697b      	ldr	r3, [r7, #20]
 80084c0:	1c5a      	adds	r2, r3, #1
 80084c2:	617a      	str	r2, [r7, #20]
 80084c4:	693a      	ldr	r2, [r7, #16]
 80084c6:	b2d2      	uxtb	r2, r2
 80084c8:	701a      	strb	r2, [r3, #0]
 80084ca:	697b      	ldr	r3, [r7, #20]
 80084cc:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80084ce:	2218      	movs	r2, #24
 80084d0:	6839      	ldr	r1, [r7, #0]
 80084d2:	6878      	ldr	r0, [r7, #4]
 80084d4:	f7ff fc80 	bl	8007dd8 <_SendPacket>
      RECORD_END();
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 80084de:	4b08      	ldr	r3, [pc, #32]	; (8008500 <SEGGER_SYSVIEW_Start+0x16c>)
 80084e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d002      	beq.n	80084ec <SEGGER_SYSVIEW_Start+0x158>
      _SYSVIEW_Globals.pfSendSysDesc();
 80084e6:	4b06      	ldr	r3, [pc, #24]	; (8008500 <SEGGER_SYSVIEW_Start+0x16c>)
 80084e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084ea:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 80084ec:	f000 f9ec 	bl	80088c8 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 80084f0:	f000 f9b2 	bl	8008858 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 80084f4:	f000 fbb2 	bl	8008c5c <SEGGER_SYSVIEW_SendNumModules>
#endif
  }
}
 80084f8:	bf00      	nop
 80084fa:	3730      	adds	r7, #48	; 0x30
 80084fc:	46bd      	mov	sp, r7
 80084fe:	bd80      	pop	{r7, pc}
 8008500:	20007ae0 	.word	0x20007ae0
 8008504:	08009180 	.word	0x08009180
 8008508:	20007b10 	.word	0x20007b10

0800850c <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 800850c:	b580      	push	{r7, lr}
 800850e:	b082      	sub	sp, #8
 8008510:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8008512:	f3ef 8311 	mrs	r3, BASEPRI
 8008516:	f04f 0120 	mov.w	r1, #32
 800851a:	f381 8811 	msr	BASEPRI, r1
 800851e:	607b      	str	r3, [r7, #4]
 8008520:	480b      	ldr	r0, [pc, #44]	; (8008550 <SEGGER_SYSVIEW_Stop+0x44>)
 8008522:	f7ff fb78 	bl	8007c16 <_PreparePacket>
 8008526:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8008528:	4b0a      	ldr	r3, [pc, #40]	; (8008554 <SEGGER_SYSVIEW_Stop+0x48>)
 800852a:	781b      	ldrb	r3, [r3, #0]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d007      	beq.n	8008540 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8008530:	220b      	movs	r2, #11
 8008532:	6839      	ldr	r1, [r7, #0]
 8008534:	6838      	ldr	r0, [r7, #0]
 8008536:	f7ff fc4f 	bl	8007dd8 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800853a:	4b06      	ldr	r3, [pc, #24]	; (8008554 <SEGGER_SYSVIEW_Stop+0x48>)
 800853c:	2200      	movs	r2, #0
 800853e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	f383 8811 	msr	BASEPRI, r3
}
 8008546:	bf00      	nop
 8008548:	3708      	adds	r7, #8
 800854a:	46bd      	mov	sp, r7
 800854c:	bd80      	pop	{r7, pc}
 800854e:	bf00      	nop
 8008550:	20007b10 	.word	0x20007b10
 8008554:	20007ae0 	.word	0x20007ae0

08008558 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8008558:	b580      	push	{r7, lr}
 800855a:	b08c      	sub	sp, #48	; 0x30
 800855c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800855e:	f3ef 8311 	mrs	r3, BASEPRI
 8008562:	f04f 0120 	mov.w	r1, #32
 8008566:	f381 8811 	msr	BASEPRI, r1
 800856a:	60fb      	str	r3, [r7, #12]
 800856c:	4845      	ldr	r0, [pc, #276]	; (8008684 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800856e:	f7ff fb52 	bl	8007c16 <_PreparePacket>
 8008572:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8008574:	68bb      	ldr	r3, [r7, #8]
 8008576:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800857c:	4b42      	ldr	r3, [pc, #264]	; (8008688 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800857e:	685b      	ldr	r3, [r3, #4]
 8008580:	62bb      	str	r3, [r7, #40]	; 0x28
 8008582:	e00b      	b.n	800859c <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8008584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008586:	b2da      	uxtb	r2, r3
 8008588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800858a:	1c59      	adds	r1, r3, #1
 800858c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800858e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008592:	b2d2      	uxtb	r2, r2
 8008594:	701a      	strb	r2, [r3, #0]
 8008596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008598:	09db      	lsrs	r3, r3, #7
 800859a:	62bb      	str	r3, [r7, #40]	; 0x28
 800859c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800859e:	2b7f      	cmp	r3, #127	; 0x7f
 80085a0:	d8f0      	bhi.n	8008584 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80085a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085a4:	1c5a      	adds	r2, r3, #1
 80085a6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80085a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80085aa:	b2d2      	uxtb	r2, r2
 80085ac:	701a      	strb	r2, [r3, #0]
 80085ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085b0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	627b      	str	r3, [r7, #36]	; 0x24
 80085b6:	4b34      	ldr	r3, [pc, #208]	; (8008688 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80085b8:	689b      	ldr	r3, [r3, #8]
 80085ba:	623b      	str	r3, [r7, #32]
 80085bc:	e00b      	b.n	80085d6 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80085be:	6a3b      	ldr	r3, [r7, #32]
 80085c0:	b2da      	uxtb	r2, r3
 80085c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085c4:	1c59      	adds	r1, r3, #1
 80085c6:	6279      	str	r1, [r7, #36]	; 0x24
 80085c8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80085cc:	b2d2      	uxtb	r2, r2
 80085ce:	701a      	strb	r2, [r3, #0]
 80085d0:	6a3b      	ldr	r3, [r7, #32]
 80085d2:	09db      	lsrs	r3, r3, #7
 80085d4:	623b      	str	r3, [r7, #32]
 80085d6:	6a3b      	ldr	r3, [r7, #32]
 80085d8:	2b7f      	cmp	r3, #127	; 0x7f
 80085da:	d8f0      	bhi.n	80085be <SEGGER_SYSVIEW_GetSysDesc+0x66>
 80085dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085de:	1c5a      	adds	r2, r3, #1
 80085e0:	627a      	str	r2, [r7, #36]	; 0x24
 80085e2:	6a3a      	ldr	r2, [r7, #32]
 80085e4:	b2d2      	uxtb	r2, r2
 80085e6:	701a      	strb	r2, [r3, #0]
 80085e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ea:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	61fb      	str	r3, [r7, #28]
 80085f0:	4b25      	ldr	r3, [pc, #148]	; (8008688 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80085f2:	691b      	ldr	r3, [r3, #16]
 80085f4:	61bb      	str	r3, [r7, #24]
 80085f6:	e00b      	b.n	8008610 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 80085f8:	69bb      	ldr	r3, [r7, #24]
 80085fa:	b2da      	uxtb	r2, r3
 80085fc:	69fb      	ldr	r3, [r7, #28]
 80085fe:	1c59      	adds	r1, r3, #1
 8008600:	61f9      	str	r1, [r7, #28]
 8008602:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008606:	b2d2      	uxtb	r2, r2
 8008608:	701a      	strb	r2, [r3, #0]
 800860a:	69bb      	ldr	r3, [r7, #24]
 800860c:	09db      	lsrs	r3, r3, #7
 800860e:	61bb      	str	r3, [r7, #24]
 8008610:	69bb      	ldr	r3, [r7, #24]
 8008612:	2b7f      	cmp	r3, #127	; 0x7f
 8008614:	d8f0      	bhi.n	80085f8 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8008616:	69fb      	ldr	r3, [r7, #28]
 8008618:	1c5a      	adds	r2, r3, #1
 800861a:	61fa      	str	r2, [r7, #28]
 800861c:	69ba      	ldr	r2, [r7, #24]
 800861e:	b2d2      	uxtb	r2, r2
 8008620:	701a      	strb	r2, [r3, #0]
 8008622:	69fb      	ldr	r3, [r7, #28]
 8008624:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	617b      	str	r3, [r7, #20]
 800862a:	2302      	movs	r3, #2
 800862c:	613b      	str	r3, [r7, #16]
 800862e:	e00b      	b.n	8008648 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8008630:	693b      	ldr	r3, [r7, #16]
 8008632:	b2da      	uxtb	r2, r3
 8008634:	697b      	ldr	r3, [r7, #20]
 8008636:	1c59      	adds	r1, r3, #1
 8008638:	6179      	str	r1, [r7, #20]
 800863a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800863e:	b2d2      	uxtb	r2, r2
 8008640:	701a      	strb	r2, [r3, #0]
 8008642:	693b      	ldr	r3, [r7, #16]
 8008644:	09db      	lsrs	r3, r3, #7
 8008646:	613b      	str	r3, [r7, #16]
 8008648:	693b      	ldr	r3, [r7, #16]
 800864a:	2b7f      	cmp	r3, #127	; 0x7f
 800864c:	d8f0      	bhi.n	8008630 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800864e:	697b      	ldr	r3, [r7, #20]
 8008650:	1c5a      	adds	r2, r3, #1
 8008652:	617a      	str	r2, [r7, #20]
 8008654:	693a      	ldr	r2, [r7, #16]
 8008656:	b2d2      	uxtb	r2, r2
 8008658:	701a      	strb	r2, [r3, #0]
 800865a:	697b      	ldr	r3, [r7, #20]
 800865c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800865e:	2218      	movs	r2, #24
 8008660:	6879      	ldr	r1, [r7, #4]
 8008662:	68b8      	ldr	r0, [r7, #8]
 8008664:	f7ff fbb8 	bl	8007dd8 <_SendPacket>
  RECORD_END();
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800866e:	4b06      	ldr	r3, [pc, #24]	; (8008688 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8008670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008672:	2b00      	cmp	r3, #0
 8008674:	d002      	beq.n	800867c <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8008676:	4b04      	ldr	r3, [pc, #16]	; (8008688 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8008678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800867a:	4798      	blx	r3
  }
}
 800867c:	bf00      	nop
 800867e:	3730      	adds	r7, #48	; 0x30
 8008680:	46bd      	mov	sp, r7
 8008682:	bd80      	pop	{r7, pc}
 8008684:	20007b10 	.word	0x20007b10
 8008688:	20007ae0 	.word	0x20007ae0

0800868c <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 800868c:	b580      	push	{r7, lr}
 800868e:	b092      	sub	sp, #72	; 0x48
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8008694:	f3ef 8311 	mrs	r3, BASEPRI
 8008698:	f04f 0120 	mov.w	r1, #32
 800869c:	f381 8811 	msr	BASEPRI, r1
 80086a0:	617b      	str	r3, [r7, #20]
 80086a2:	486b      	ldr	r0, [pc, #428]	; (8008850 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80086a4:	f7ff fab7 	bl	8007c16 <_PreparePacket>
 80086a8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80086aa:	693b      	ldr	r3, [r7, #16]
 80086ac:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	647b      	str	r3, [r7, #68]	; 0x44
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681a      	ldr	r2, [r3, #0]
 80086b6:	4b67      	ldr	r3, [pc, #412]	; (8008854 <SEGGER_SYSVIEW_SendTaskInfo+0x1c8>)
 80086b8:	691b      	ldr	r3, [r3, #16]
 80086ba:	1ad3      	subs	r3, r2, r3
 80086bc:	089b      	lsrs	r3, r3, #2
 80086be:	643b      	str	r3, [r7, #64]	; 0x40
 80086c0:	e00b      	b.n	80086da <SEGGER_SYSVIEW_SendTaskInfo+0x4e>
 80086c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80086c4:	b2da      	uxtb	r2, r3
 80086c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086c8:	1c59      	adds	r1, r3, #1
 80086ca:	6479      	str	r1, [r7, #68]	; 0x44
 80086cc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80086d0:	b2d2      	uxtb	r2, r2
 80086d2:	701a      	strb	r2, [r3, #0]
 80086d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80086d6:	09db      	lsrs	r3, r3, #7
 80086d8:	643b      	str	r3, [r7, #64]	; 0x40
 80086da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80086dc:	2b7f      	cmp	r3, #127	; 0x7f
 80086de:	d8f0      	bhi.n	80086c2 <SEGGER_SYSVIEW_SendTaskInfo+0x36>
 80086e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086e2:	1c5a      	adds	r2, r3, #1
 80086e4:	647a      	str	r2, [r7, #68]	; 0x44
 80086e6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80086e8:	b2d2      	uxtb	r2, r2
 80086ea:	701a      	strb	r2, [r3, #0]
 80086ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086ee:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	689b      	ldr	r3, [r3, #8]
 80086f8:	63bb      	str	r3, [r7, #56]	; 0x38
 80086fa:	e00b      	b.n	8008714 <SEGGER_SYSVIEW_SendTaskInfo+0x88>
 80086fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086fe:	b2da      	uxtb	r2, r3
 8008700:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008702:	1c59      	adds	r1, r3, #1
 8008704:	63f9      	str	r1, [r7, #60]	; 0x3c
 8008706:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800870a:	b2d2      	uxtb	r2, r2
 800870c:	701a      	strb	r2, [r3, #0]
 800870e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008710:	09db      	lsrs	r3, r3, #7
 8008712:	63bb      	str	r3, [r7, #56]	; 0x38
 8008714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008716:	2b7f      	cmp	r3, #127	; 0x7f
 8008718:	d8f0      	bhi.n	80086fc <SEGGER_SYSVIEW_SendTaskInfo+0x70>
 800871a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800871c:	1c5a      	adds	r2, r3, #1
 800871e:	63fa      	str	r2, [r7, #60]	; 0x3c
 8008720:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008722:	b2d2      	uxtb	r2, r2
 8008724:	701a      	strb	r2, [r3, #0]
 8008726:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008728:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	685b      	ldr	r3, [r3, #4]
 800872e:	2220      	movs	r2, #32
 8008730:	4619      	mov	r1, r3
 8008732:	68f8      	ldr	r0, [r7, #12]
 8008734:	f7ff fa22 	bl	8007b7c <_EncodeStr>
 8008738:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800873a:	2209      	movs	r2, #9
 800873c:	68f9      	ldr	r1, [r7, #12]
 800873e:	6938      	ldr	r0, [r7, #16]
 8008740:	f7ff fb4a 	bl	8007dd8 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8008744:	693b      	ldr	r3, [r7, #16]
 8008746:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	637b      	str	r3, [r7, #52]	; 0x34
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681a      	ldr	r2, [r3, #0]
 8008750:	4b40      	ldr	r3, [pc, #256]	; (8008854 <SEGGER_SYSVIEW_SendTaskInfo+0x1c8>)
 8008752:	691b      	ldr	r3, [r3, #16]
 8008754:	1ad3      	subs	r3, r2, r3
 8008756:	089b      	lsrs	r3, r3, #2
 8008758:	633b      	str	r3, [r7, #48]	; 0x30
 800875a:	e00b      	b.n	8008774 <SEGGER_SYSVIEW_SendTaskInfo+0xe8>
 800875c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800875e:	b2da      	uxtb	r2, r3
 8008760:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008762:	1c59      	adds	r1, r3, #1
 8008764:	6379      	str	r1, [r7, #52]	; 0x34
 8008766:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800876a:	b2d2      	uxtb	r2, r2
 800876c:	701a      	strb	r2, [r3, #0]
 800876e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008770:	09db      	lsrs	r3, r3, #7
 8008772:	633b      	str	r3, [r7, #48]	; 0x30
 8008774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008776:	2b7f      	cmp	r3, #127	; 0x7f
 8008778:	d8f0      	bhi.n	800875c <SEGGER_SYSVIEW_SendTaskInfo+0xd0>
 800877a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800877c:	1c5a      	adds	r2, r3, #1
 800877e:	637a      	str	r2, [r7, #52]	; 0x34
 8008780:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008782:	b2d2      	uxtb	r2, r2
 8008784:	701a      	strb	r2, [r3, #0]
 8008786:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008788:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	68db      	ldr	r3, [r3, #12]
 8008792:	62bb      	str	r3, [r7, #40]	; 0x28
 8008794:	e00b      	b.n	80087ae <SEGGER_SYSVIEW_SendTaskInfo+0x122>
 8008796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008798:	b2da      	uxtb	r2, r3
 800879a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800879c:	1c59      	adds	r1, r3, #1
 800879e:	62f9      	str	r1, [r7, #44]	; 0x2c
 80087a0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80087a4:	b2d2      	uxtb	r2, r2
 80087a6:	701a      	strb	r2, [r3, #0]
 80087a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087aa:	09db      	lsrs	r3, r3, #7
 80087ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80087ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087b0:	2b7f      	cmp	r3, #127	; 0x7f
 80087b2:	d8f0      	bhi.n	8008796 <SEGGER_SYSVIEW_SendTaskInfo+0x10a>
 80087b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087b6:	1c5a      	adds	r2, r3, #1
 80087b8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80087ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80087bc:	b2d2      	uxtb	r2, r2
 80087be:	701a      	strb	r2, [r3, #0]
 80087c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087c2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	627b      	str	r3, [r7, #36]	; 0x24
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	691b      	ldr	r3, [r3, #16]
 80087cc:	623b      	str	r3, [r7, #32]
 80087ce:	e00b      	b.n	80087e8 <SEGGER_SYSVIEW_SendTaskInfo+0x15c>
 80087d0:	6a3b      	ldr	r3, [r7, #32]
 80087d2:	b2da      	uxtb	r2, r3
 80087d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087d6:	1c59      	adds	r1, r3, #1
 80087d8:	6279      	str	r1, [r7, #36]	; 0x24
 80087da:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80087de:	b2d2      	uxtb	r2, r2
 80087e0:	701a      	strb	r2, [r3, #0]
 80087e2:	6a3b      	ldr	r3, [r7, #32]
 80087e4:	09db      	lsrs	r3, r3, #7
 80087e6:	623b      	str	r3, [r7, #32]
 80087e8:	6a3b      	ldr	r3, [r7, #32]
 80087ea:	2b7f      	cmp	r3, #127	; 0x7f
 80087ec:	d8f0      	bhi.n	80087d0 <SEGGER_SYSVIEW_SendTaskInfo+0x144>
 80087ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087f0:	1c5a      	adds	r2, r3, #1
 80087f2:	627a      	str	r2, [r7, #36]	; 0x24
 80087f4:	6a3a      	ldr	r2, [r7, #32]
 80087f6:	b2d2      	uxtb	r2, r2
 80087f8:	701a      	strb	r2, [r3, #0]
 80087fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087fc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	61fb      	str	r3, [r7, #28]
 8008802:	2300      	movs	r3, #0
 8008804:	61bb      	str	r3, [r7, #24]
 8008806:	e00b      	b.n	8008820 <SEGGER_SYSVIEW_SendTaskInfo+0x194>
 8008808:	69bb      	ldr	r3, [r7, #24]
 800880a:	b2da      	uxtb	r2, r3
 800880c:	69fb      	ldr	r3, [r7, #28]
 800880e:	1c59      	adds	r1, r3, #1
 8008810:	61f9      	str	r1, [r7, #28]
 8008812:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008816:	b2d2      	uxtb	r2, r2
 8008818:	701a      	strb	r2, [r3, #0]
 800881a:	69bb      	ldr	r3, [r7, #24]
 800881c:	09db      	lsrs	r3, r3, #7
 800881e:	61bb      	str	r3, [r7, #24]
 8008820:	69bb      	ldr	r3, [r7, #24]
 8008822:	2b7f      	cmp	r3, #127	; 0x7f
 8008824:	d8f0      	bhi.n	8008808 <SEGGER_SYSVIEW_SendTaskInfo+0x17c>
 8008826:	69fb      	ldr	r3, [r7, #28]
 8008828:	1c5a      	adds	r2, r3, #1
 800882a:	61fa      	str	r2, [r7, #28]
 800882c:	69ba      	ldr	r2, [r7, #24]
 800882e:	b2d2      	uxtb	r2, r2
 8008830:	701a      	strb	r2, [r3, #0]
 8008832:	69fb      	ldr	r3, [r7, #28]
 8008834:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8008836:	2215      	movs	r2, #21
 8008838:	68f9      	ldr	r1, [r7, #12]
 800883a:	6938      	ldr	r0, [r7, #16]
 800883c:	f7ff facc 	bl	8007dd8 <_SendPacket>
  RECORD_END();
 8008840:	697b      	ldr	r3, [r7, #20]
 8008842:	f383 8811 	msr	BASEPRI, r3
}
 8008846:	bf00      	nop
 8008848:	3748      	adds	r7, #72	; 0x48
 800884a:	46bd      	mov	sp, r7
 800884c:	bd80      	pop	{r7, pc}
 800884e:	bf00      	nop
 8008850:	20007b10 	.word	0x20007b10
 8008854:	20007ae0 	.word	0x20007ae0

08008858 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8008858:	b580      	push	{r7, lr}
 800885a:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 800885c:	4b07      	ldr	r3, [pc, #28]	; (800887c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800885e:	6a1b      	ldr	r3, [r3, #32]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d008      	beq.n	8008876 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8008864:	4b05      	ldr	r3, [pc, #20]	; (800887c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8008866:	6a1b      	ldr	r3, [r3, #32]
 8008868:	685b      	ldr	r3, [r3, #4]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d003      	beq.n	8008876 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800886e:	4b03      	ldr	r3, [pc, #12]	; (800887c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8008870:	6a1b      	ldr	r3, [r3, #32]
 8008872:	685b      	ldr	r3, [r3, #4]
 8008874:	4798      	blx	r3
  }
}
 8008876:	bf00      	nop
 8008878:	bd80      	pop	{r7, pc}
 800887a:	bf00      	nop
 800887c:	20007ae0 	.word	0x20007ae0

08008880 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8008880:	b580      	push	{r7, lr}
 8008882:	b086      	sub	sp, #24
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8008888:	f3ef 8311 	mrs	r3, BASEPRI
 800888c:	f04f 0120 	mov.w	r1, #32
 8008890:	f381 8811 	msr	BASEPRI, r1
 8008894:	617b      	str	r3, [r7, #20]
 8008896:	480b      	ldr	r0, [pc, #44]	; (80088c4 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8008898:	f7ff f9bd 	bl	8007c16 <_PreparePacket>
 800889c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800889e:	2280      	movs	r2, #128	; 0x80
 80088a0:	6879      	ldr	r1, [r7, #4]
 80088a2:	6938      	ldr	r0, [r7, #16]
 80088a4:	f7ff f96a 	bl	8007b7c <_EncodeStr>
 80088a8:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 80088aa:	220e      	movs	r2, #14
 80088ac:	68f9      	ldr	r1, [r7, #12]
 80088ae:	6938      	ldr	r0, [r7, #16]
 80088b0:	f7ff fa92 	bl	8007dd8 <_SendPacket>
  RECORD_END();
 80088b4:	697b      	ldr	r3, [r7, #20]
 80088b6:	f383 8811 	msr	BASEPRI, r3
}
 80088ba:	bf00      	nop
 80088bc:	3718      	adds	r7, #24
 80088be:	46bd      	mov	sp, r7
 80088c0:	bd80      	pop	{r7, pc}
 80088c2:	bf00      	nop
 80088c4:	20007b10 	.word	0x20007b10

080088c8 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80088c8:	b590      	push	{r4, r7, lr}
 80088ca:	b083      	sub	sp, #12
 80088cc:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80088ce:	4b15      	ldr	r3, [pc, #84]	; (8008924 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80088d0:	6a1b      	ldr	r3, [r3, #32]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d01a      	beq.n	800890c <SEGGER_SYSVIEW_RecordSystime+0x44>
 80088d6:	4b13      	ldr	r3, [pc, #76]	; (8008924 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80088d8:	6a1b      	ldr	r3, [r3, #32]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d015      	beq.n	800890c <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80088e0:	4b10      	ldr	r3, [pc, #64]	; (8008924 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80088e2:	6a1b      	ldr	r3, [r3, #32]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	4798      	blx	r3
 80088e8:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80088ec:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80088ee:	e9d7 0100 	ldrd	r0, r1, [r7]
 80088f2:	f04f 0200 	mov.w	r2, #0
 80088f6:	f04f 0300 	mov.w	r3, #0
 80088fa:	000a      	movs	r2, r1
 80088fc:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80088fe:	4613      	mov	r3, r2
 8008900:	461a      	mov	r2, r3
 8008902:	4621      	mov	r1, r4
 8008904:	200d      	movs	r0, #13
 8008906:	f7ff fbe3 	bl	80080d0 <SEGGER_SYSVIEW_RecordU32x2>
 800890a:	e006      	b.n	800891a <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800890c:	4b06      	ldr	r3, [pc, #24]	; (8008928 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	4619      	mov	r1, r3
 8008912:	200c      	movs	r0, #12
 8008914:	f7ff fba0 	bl	8008058 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8008918:	bf00      	nop
 800891a:	bf00      	nop
 800891c:	370c      	adds	r7, #12
 800891e:	46bd      	mov	sp, r7
 8008920:	bd90      	pop	{r4, r7, pc}
 8008922:	bf00      	nop
 8008924:	20007ae0 	.word	0x20007ae0
 8008928:	e0001004 	.word	0xe0001004

0800892c <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 800892c:	b580      	push	{r7, lr}
 800892e:	b082      	sub	sp, #8
 8008930:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8008932:	f3ef 8311 	mrs	r3, BASEPRI
 8008936:	f04f 0120 	mov.w	r1, #32
 800893a:	f381 8811 	msr	BASEPRI, r1
 800893e:	607b      	str	r3, [r7, #4]
 8008940:	4807      	ldr	r0, [pc, #28]	; (8008960 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8008942:	f7ff f968 	bl	8007c16 <_PreparePacket>
 8008946:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8008948:	2211      	movs	r2, #17
 800894a:	6839      	ldr	r1, [r7, #0]
 800894c:	6838      	ldr	r0, [r7, #0]
 800894e:	f7ff fa43 	bl	8007dd8 <_SendPacket>
  RECORD_END();
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	f383 8811 	msr	BASEPRI, r3
}
 8008958:	bf00      	nop
 800895a:	3708      	adds	r7, #8
 800895c:	46bd      	mov	sp, r7
 800895e:	bd80      	pop	{r7, pc}
 8008960:	20007b10 	.word	0x20007b10

08008964 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8008964:	b580      	push	{r7, lr}
 8008966:	b088      	sub	sp, #32
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800896c:	f3ef 8311 	mrs	r3, BASEPRI
 8008970:	f04f 0120 	mov.w	r1, #32
 8008974:	f381 8811 	msr	BASEPRI, r1
 8008978:	617b      	str	r3, [r7, #20]
 800897a:	481a      	ldr	r0, [pc, #104]	; (80089e4 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 800897c:	f7ff f94b 	bl	8007c16 <_PreparePacket>
 8008980:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8008982:	693b      	ldr	r3, [r7, #16]
 8008984:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8008986:	4b18      	ldr	r3, [pc, #96]	; (80089e8 <SEGGER_SYSVIEW_OnTaskCreate+0x84>)
 8008988:	691b      	ldr	r3, [r3, #16]
 800898a:	687a      	ldr	r2, [r7, #4]
 800898c:	1ad3      	subs	r3, r2, r3
 800898e:	089b      	lsrs	r3, r3, #2
 8008990:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	61fb      	str	r3, [r7, #28]
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	61bb      	str	r3, [r7, #24]
 800899a:	e00b      	b.n	80089b4 <SEGGER_SYSVIEW_OnTaskCreate+0x50>
 800899c:	69bb      	ldr	r3, [r7, #24]
 800899e:	b2da      	uxtb	r2, r3
 80089a0:	69fb      	ldr	r3, [r7, #28]
 80089a2:	1c59      	adds	r1, r3, #1
 80089a4:	61f9      	str	r1, [r7, #28]
 80089a6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80089aa:	b2d2      	uxtb	r2, r2
 80089ac:	701a      	strb	r2, [r3, #0]
 80089ae:	69bb      	ldr	r3, [r7, #24]
 80089b0:	09db      	lsrs	r3, r3, #7
 80089b2:	61bb      	str	r3, [r7, #24]
 80089b4:	69bb      	ldr	r3, [r7, #24]
 80089b6:	2b7f      	cmp	r3, #127	; 0x7f
 80089b8:	d8f0      	bhi.n	800899c <SEGGER_SYSVIEW_OnTaskCreate+0x38>
 80089ba:	69fb      	ldr	r3, [r7, #28]
 80089bc:	1c5a      	adds	r2, r3, #1
 80089be:	61fa      	str	r2, [r7, #28]
 80089c0:	69ba      	ldr	r2, [r7, #24]
 80089c2:	b2d2      	uxtb	r2, r2
 80089c4:	701a      	strb	r2, [r3, #0]
 80089c6:	69fb      	ldr	r3, [r7, #28]
 80089c8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80089ca:	2208      	movs	r2, #8
 80089cc:	68f9      	ldr	r1, [r7, #12]
 80089ce:	6938      	ldr	r0, [r7, #16]
 80089d0:	f7ff fa02 	bl	8007dd8 <_SendPacket>
  RECORD_END();
 80089d4:	697b      	ldr	r3, [r7, #20]
 80089d6:	f383 8811 	msr	BASEPRI, r3
}
 80089da:	bf00      	nop
 80089dc:	3720      	adds	r7, #32
 80089de:	46bd      	mov	sp, r7
 80089e0:	bd80      	pop	{r7, pc}
 80089e2:	bf00      	nop
 80089e4:	20007b10 	.word	0x20007b10
 80089e8:	20007ae0 	.word	0x20007ae0

080089ec <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b088      	sub	sp, #32
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80089f4:	f3ef 8311 	mrs	r3, BASEPRI
 80089f8:	f04f 0120 	mov.w	r1, #32
 80089fc:	f381 8811 	msr	BASEPRI, r1
 8008a00:	617b      	str	r3, [r7, #20]
 8008a02:	481a      	ldr	r0, [pc, #104]	; (8008a6c <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8008a04:	f7ff f907 	bl	8007c16 <_PreparePacket>
 8008a08:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8008a0a:	693b      	ldr	r3, [r7, #16]
 8008a0c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8008a0e:	4b18      	ldr	r3, [pc, #96]	; (8008a70 <SEGGER_SYSVIEW_OnTaskStartExec+0x84>)
 8008a10:	691b      	ldr	r3, [r3, #16]
 8008a12:	687a      	ldr	r2, [r7, #4]
 8008a14:	1ad3      	subs	r3, r2, r3
 8008a16:	089b      	lsrs	r3, r3, #2
 8008a18:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	61fb      	str	r3, [r7, #28]
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	61bb      	str	r3, [r7, #24]
 8008a22:	e00b      	b.n	8008a3c <SEGGER_SYSVIEW_OnTaskStartExec+0x50>
 8008a24:	69bb      	ldr	r3, [r7, #24]
 8008a26:	b2da      	uxtb	r2, r3
 8008a28:	69fb      	ldr	r3, [r7, #28]
 8008a2a:	1c59      	adds	r1, r3, #1
 8008a2c:	61f9      	str	r1, [r7, #28]
 8008a2e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008a32:	b2d2      	uxtb	r2, r2
 8008a34:	701a      	strb	r2, [r3, #0]
 8008a36:	69bb      	ldr	r3, [r7, #24]
 8008a38:	09db      	lsrs	r3, r3, #7
 8008a3a:	61bb      	str	r3, [r7, #24]
 8008a3c:	69bb      	ldr	r3, [r7, #24]
 8008a3e:	2b7f      	cmp	r3, #127	; 0x7f
 8008a40:	d8f0      	bhi.n	8008a24 <SEGGER_SYSVIEW_OnTaskStartExec+0x38>
 8008a42:	69fb      	ldr	r3, [r7, #28]
 8008a44:	1c5a      	adds	r2, r3, #1
 8008a46:	61fa      	str	r2, [r7, #28]
 8008a48:	69ba      	ldr	r2, [r7, #24]
 8008a4a:	b2d2      	uxtb	r2, r2
 8008a4c:	701a      	strb	r2, [r3, #0]
 8008a4e:	69fb      	ldr	r3, [r7, #28]
 8008a50:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8008a52:	2204      	movs	r2, #4
 8008a54:	68f9      	ldr	r1, [r7, #12]
 8008a56:	6938      	ldr	r0, [r7, #16]
 8008a58:	f7ff f9be 	bl	8007dd8 <_SendPacket>
  RECORD_END();
 8008a5c:	697b      	ldr	r3, [r7, #20]
 8008a5e:	f383 8811 	msr	BASEPRI, r3
}
 8008a62:	bf00      	nop
 8008a64:	3720      	adds	r7, #32
 8008a66:	46bd      	mov	sp, r7
 8008a68:	bd80      	pop	{r7, pc}
 8008a6a:	bf00      	nop
 8008a6c:	20007b10 	.word	0x20007b10
 8008a70:	20007ae0 	.word	0x20007ae0

08008a74 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b088      	sub	sp, #32
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8008a7c:	f3ef 8311 	mrs	r3, BASEPRI
 8008a80:	f04f 0120 	mov.w	r1, #32
 8008a84:	f381 8811 	msr	BASEPRI, r1
 8008a88:	617b      	str	r3, [r7, #20]
 8008a8a:	481a      	ldr	r0, [pc, #104]	; (8008af4 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8008a8c:	f7ff f8c3 	bl	8007c16 <_PreparePacket>
 8008a90:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8008a92:	693b      	ldr	r3, [r7, #16]
 8008a94:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8008a96:	4b18      	ldr	r3, [pc, #96]	; (8008af8 <SEGGER_SYSVIEW_OnTaskStartReady+0x84>)
 8008a98:	691b      	ldr	r3, [r3, #16]
 8008a9a:	687a      	ldr	r2, [r7, #4]
 8008a9c:	1ad3      	subs	r3, r2, r3
 8008a9e:	089b      	lsrs	r3, r3, #2
 8008aa0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	61fb      	str	r3, [r7, #28]
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	61bb      	str	r3, [r7, #24]
 8008aaa:	e00b      	b.n	8008ac4 <SEGGER_SYSVIEW_OnTaskStartReady+0x50>
 8008aac:	69bb      	ldr	r3, [r7, #24]
 8008aae:	b2da      	uxtb	r2, r3
 8008ab0:	69fb      	ldr	r3, [r7, #28]
 8008ab2:	1c59      	adds	r1, r3, #1
 8008ab4:	61f9      	str	r1, [r7, #28]
 8008ab6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008aba:	b2d2      	uxtb	r2, r2
 8008abc:	701a      	strb	r2, [r3, #0]
 8008abe:	69bb      	ldr	r3, [r7, #24]
 8008ac0:	09db      	lsrs	r3, r3, #7
 8008ac2:	61bb      	str	r3, [r7, #24]
 8008ac4:	69bb      	ldr	r3, [r7, #24]
 8008ac6:	2b7f      	cmp	r3, #127	; 0x7f
 8008ac8:	d8f0      	bhi.n	8008aac <SEGGER_SYSVIEW_OnTaskStartReady+0x38>
 8008aca:	69fb      	ldr	r3, [r7, #28]
 8008acc:	1c5a      	adds	r2, r3, #1
 8008ace:	61fa      	str	r2, [r7, #28]
 8008ad0:	69ba      	ldr	r2, [r7, #24]
 8008ad2:	b2d2      	uxtb	r2, r2
 8008ad4:	701a      	strb	r2, [r3, #0]
 8008ad6:	69fb      	ldr	r3, [r7, #28]
 8008ad8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8008ada:	2206      	movs	r2, #6
 8008adc:	68f9      	ldr	r1, [r7, #12]
 8008ade:	6938      	ldr	r0, [r7, #16]
 8008ae0:	f7ff f97a 	bl	8007dd8 <_SendPacket>
  RECORD_END();
 8008ae4:	697b      	ldr	r3, [r7, #20]
 8008ae6:	f383 8811 	msr	BASEPRI, r3
}
 8008aea:	bf00      	nop
 8008aec:	3720      	adds	r7, #32
 8008aee:	46bd      	mov	sp, r7
 8008af0:	bd80      	pop	{r7, pc}
 8008af2:	bf00      	nop
 8008af4:	20007b10 	.word	0x20007b10
 8008af8:	20007ae0 	.word	0x20007ae0

08008afc <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8008afc:	b480      	push	{r7}
 8008afe:	b083      	sub	sp, #12
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8008b04:	4b05      	ldr	r3, [pc, #20]	; (8008b1c <SEGGER_SYSVIEW_ShrinkId+0x20>)
 8008b06:	691b      	ldr	r3, [r3, #16]
 8008b08:	687a      	ldr	r2, [r7, #4]
 8008b0a:	1ad3      	subs	r3, r2, r3
 8008b0c:	089b      	lsrs	r3, r3, #2
}
 8008b0e:	4618      	mov	r0, r3
 8008b10:	370c      	adds	r7, #12
 8008b12:	46bd      	mov	sp, r7
 8008b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b18:	4770      	bx	lr
 8008b1a:	bf00      	nop
 8008b1c:	20007ae0 	.word	0x20007ae0

08008b20 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b08c      	sub	sp, #48	; 0x30
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	4603      	mov	r3, r0
 8008b28:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8008b2a:	4b3b      	ldr	r3, [pc, #236]	; (8008c18 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d06d      	beq.n	8008c0e <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8008b32:	4b39      	ldr	r3, [pc, #228]	; (8008c18 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8008b38:	2300      	movs	r3, #0
 8008b3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8008b3c:	e008      	b.n	8008b50 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8008b3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b40:	691b      	ldr	r3, [r3, #16]
 8008b42:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8008b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d007      	beq.n	8008b5a <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8008b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b4c:	3301      	adds	r3, #1
 8008b4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008b50:	79fb      	ldrb	r3, [r7, #7]
 8008b52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b54:	429a      	cmp	r2, r3
 8008b56:	d3f2      	bcc.n	8008b3e <SEGGER_SYSVIEW_SendModule+0x1e>
 8008b58:	e000      	b.n	8008b5c <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8008b5a:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8008b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d055      	beq.n	8008c0e <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8008b62:	f3ef 8311 	mrs	r3, BASEPRI
 8008b66:	f04f 0120 	mov.w	r1, #32
 8008b6a:	f381 8811 	msr	BASEPRI, r1
 8008b6e:	617b      	str	r3, [r7, #20]
 8008b70:	482a      	ldr	r0, [pc, #168]	; (8008c1c <SEGGER_SYSVIEW_SendModule+0xfc>)
 8008b72:	f7ff f850 	bl	8007c16 <_PreparePacket>
 8008b76:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8008b78:	693b      	ldr	r3, [r7, #16]
 8008b7a:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	627b      	str	r3, [r7, #36]	; 0x24
 8008b80:	79fb      	ldrb	r3, [r7, #7]
 8008b82:	623b      	str	r3, [r7, #32]
 8008b84:	e00b      	b.n	8008b9e <SEGGER_SYSVIEW_SendModule+0x7e>
 8008b86:	6a3b      	ldr	r3, [r7, #32]
 8008b88:	b2da      	uxtb	r2, r3
 8008b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b8c:	1c59      	adds	r1, r3, #1
 8008b8e:	6279      	str	r1, [r7, #36]	; 0x24
 8008b90:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008b94:	b2d2      	uxtb	r2, r2
 8008b96:	701a      	strb	r2, [r3, #0]
 8008b98:	6a3b      	ldr	r3, [r7, #32]
 8008b9a:	09db      	lsrs	r3, r3, #7
 8008b9c:	623b      	str	r3, [r7, #32]
 8008b9e:	6a3b      	ldr	r3, [r7, #32]
 8008ba0:	2b7f      	cmp	r3, #127	; 0x7f
 8008ba2:	d8f0      	bhi.n	8008b86 <SEGGER_SYSVIEW_SendModule+0x66>
 8008ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ba6:	1c5a      	adds	r2, r3, #1
 8008ba8:	627a      	str	r2, [r7, #36]	; 0x24
 8008baa:	6a3a      	ldr	r2, [r7, #32]
 8008bac:	b2d2      	uxtb	r2, r2
 8008bae:	701a      	strb	r2, [r3, #0]
 8008bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bb2:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	61fb      	str	r3, [r7, #28]
 8008bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bba:	689b      	ldr	r3, [r3, #8]
 8008bbc:	61bb      	str	r3, [r7, #24]
 8008bbe:	e00b      	b.n	8008bd8 <SEGGER_SYSVIEW_SendModule+0xb8>
 8008bc0:	69bb      	ldr	r3, [r7, #24]
 8008bc2:	b2da      	uxtb	r2, r3
 8008bc4:	69fb      	ldr	r3, [r7, #28]
 8008bc6:	1c59      	adds	r1, r3, #1
 8008bc8:	61f9      	str	r1, [r7, #28]
 8008bca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008bce:	b2d2      	uxtb	r2, r2
 8008bd0:	701a      	strb	r2, [r3, #0]
 8008bd2:	69bb      	ldr	r3, [r7, #24]
 8008bd4:	09db      	lsrs	r3, r3, #7
 8008bd6:	61bb      	str	r3, [r7, #24]
 8008bd8:	69bb      	ldr	r3, [r7, #24]
 8008bda:	2b7f      	cmp	r3, #127	; 0x7f
 8008bdc:	d8f0      	bhi.n	8008bc0 <SEGGER_SYSVIEW_SendModule+0xa0>
 8008bde:	69fb      	ldr	r3, [r7, #28]
 8008be0:	1c5a      	adds	r2, r3, #1
 8008be2:	61fa      	str	r2, [r7, #28]
 8008be4:	69ba      	ldr	r2, [r7, #24]
 8008be6:	b2d2      	uxtb	r2, r2
 8008be8:	701a      	strb	r2, [r3, #0]
 8008bea:	69fb      	ldr	r3, [r7, #28]
 8008bec:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8008bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	2280      	movs	r2, #128	; 0x80
 8008bf4:	4619      	mov	r1, r3
 8008bf6:	68f8      	ldr	r0, [r7, #12]
 8008bf8:	f7fe ffc0 	bl	8007b7c <_EncodeStr>
 8008bfc:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8008bfe:	2216      	movs	r2, #22
 8008c00:	68f9      	ldr	r1, [r7, #12]
 8008c02:	6938      	ldr	r0, [r7, #16]
 8008c04:	f7ff f8e8 	bl	8007dd8 <_SendPacket>
      RECORD_END();
 8008c08:	697b      	ldr	r3, [r7, #20]
 8008c0a:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8008c0e:	bf00      	nop
 8008c10:	3730      	adds	r7, #48	; 0x30
 8008c12:	46bd      	mov	sp, r7
 8008c14:	bd80      	pop	{r7, pc}
 8008c16:	bf00      	nop
 8008c18:	20007b08 	.word	0x20007b08
 8008c1c:	20007b10 	.word	0x20007b10

08008c20 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b082      	sub	sp, #8
 8008c24:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8008c26:	4b0c      	ldr	r3, [pc, #48]	; (8008c58 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d00f      	beq.n	8008c4e <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8008c2e:	4b0a      	ldr	r3, [pc, #40]	; (8008c58 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	68db      	ldr	r3, [r3, #12]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d002      	beq.n	8008c42 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	68db      	ldr	r3, [r3, #12]
 8008c40:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	691b      	ldr	r3, [r3, #16]
 8008c46:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d1f2      	bne.n	8008c34 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8008c4e:	bf00      	nop
 8008c50:	3708      	adds	r7, #8
 8008c52:	46bd      	mov	sp, r7
 8008c54:	bd80      	pop	{r7, pc}
 8008c56:	bf00      	nop
 8008c58:	20007b08 	.word	0x20007b08

08008c5c <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b086      	sub	sp, #24
 8008c60:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8008c62:	f3ef 8311 	mrs	r3, BASEPRI
 8008c66:	f04f 0120 	mov.w	r1, #32
 8008c6a:	f381 8811 	msr	BASEPRI, r1
 8008c6e:	60fb      	str	r3, [r7, #12]
 8008c70:	4817      	ldr	r0, [pc, #92]	; (8008cd0 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8008c72:	f7fe ffd0 	bl	8007c16 <_PreparePacket>
 8008c76:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8008c78:	68bb      	ldr	r3, [r7, #8]
 8008c7a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	617b      	str	r3, [r7, #20]
 8008c80:	4b14      	ldr	r3, [pc, #80]	; (8008cd4 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8008c82:	781b      	ldrb	r3, [r3, #0]
 8008c84:	613b      	str	r3, [r7, #16]
 8008c86:	e00b      	b.n	8008ca0 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8008c88:	693b      	ldr	r3, [r7, #16]
 8008c8a:	b2da      	uxtb	r2, r3
 8008c8c:	697b      	ldr	r3, [r7, #20]
 8008c8e:	1c59      	adds	r1, r3, #1
 8008c90:	6179      	str	r1, [r7, #20]
 8008c92:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008c96:	b2d2      	uxtb	r2, r2
 8008c98:	701a      	strb	r2, [r3, #0]
 8008c9a:	693b      	ldr	r3, [r7, #16]
 8008c9c:	09db      	lsrs	r3, r3, #7
 8008c9e:	613b      	str	r3, [r7, #16]
 8008ca0:	693b      	ldr	r3, [r7, #16]
 8008ca2:	2b7f      	cmp	r3, #127	; 0x7f
 8008ca4:	d8f0      	bhi.n	8008c88 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8008ca6:	697b      	ldr	r3, [r7, #20]
 8008ca8:	1c5a      	adds	r2, r3, #1
 8008caa:	617a      	str	r2, [r7, #20]
 8008cac:	693a      	ldr	r2, [r7, #16]
 8008cae:	b2d2      	uxtb	r2, r2
 8008cb0:	701a      	strb	r2, [r3, #0]
 8008cb2:	697b      	ldr	r3, [r7, #20]
 8008cb4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8008cb6:	221b      	movs	r2, #27
 8008cb8:	6879      	ldr	r1, [r7, #4]
 8008cba:	68b8      	ldr	r0, [r7, #8]
 8008cbc:	f7ff f88c 	bl	8007dd8 <_SendPacket>
  RECORD_END();
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	f383 8811 	msr	BASEPRI, r3
}
 8008cc6:	bf00      	nop
 8008cc8:	3718      	adds	r7, #24
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	bd80      	pop	{r7, pc}
 8008cce:	bf00      	nop
 8008cd0:	20007b10 	.word	0x20007b10
 8008cd4:	20007b0c 	.word	0x20007b0c

08008cd8 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b08a      	sub	sp, #40	; 0x28
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8008ce0:	f3ef 8311 	mrs	r3, BASEPRI
 8008ce4:	f04f 0120 	mov.w	r1, #32
 8008ce8:	f381 8811 	msr	BASEPRI, r1
 8008cec:	617b      	str	r3, [r7, #20]
 8008cee:	4827      	ldr	r0, [pc, #156]	; (8008d8c <SEGGER_SYSVIEW_Warn+0xb4>)
 8008cf0:	f7fe ff91 	bl	8007c16 <_PreparePacket>
 8008cf4:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8008cf6:	2280      	movs	r2, #128	; 0x80
 8008cf8:	6879      	ldr	r1, [r7, #4]
 8008cfa:	6938      	ldr	r0, [r7, #16]
 8008cfc:	f7fe ff3e 	bl	8007b7c <_EncodeStr>
 8008d00:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	627b      	str	r3, [r7, #36]	; 0x24
 8008d06:	2301      	movs	r3, #1
 8008d08:	623b      	str	r3, [r7, #32]
 8008d0a:	e00b      	b.n	8008d24 <SEGGER_SYSVIEW_Warn+0x4c>
 8008d0c:	6a3b      	ldr	r3, [r7, #32]
 8008d0e:	b2da      	uxtb	r2, r3
 8008d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d12:	1c59      	adds	r1, r3, #1
 8008d14:	6279      	str	r1, [r7, #36]	; 0x24
 8008d16:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008d1a:	b2d2      	uxtb	r2, r2
 8008d1c:	701a      	strb	r2, [r3, #0]
 8008d1e:	6a3b      	ldr	r3, [r7, #32]
 8008d20:	09db      	lsrs	r3, r3, #7
 8008d22:	623b      	str	r3, [r7, #32]
 8008d24:	6a3b      	ldr	r3, [r7, #32]
 8008d26:	2b7f      	cmp	r3, #127	; 0x7f
 8008d28:	d8f0      	bhi.n	8008d0c <SEGGER_SYSVIEW_Warn+0x34>
 8008d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d2c:	1c5a      	adds	r2, r3, #1
 8008d2e:	627a      	str	r2, [r7, #36]	; 0x24
 8008d30:	6a3a      	ldr	r2, [r7, #32]
 8008d32:	b2d2      	uxtb	r2, r2
 8008d34:	701a      	strb	r2, [r3, #0]
 8008d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d38:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	61fb      	str	r3, [r7, #28]
 8008d3e:	2300      	movs	r3, #0
 8008d40:	61bb      	str	r3, [r7, #24]
 8008d42:	e00b      	b.n	8008d5c <SEGGER_SYSVIEW_Warn+0x84>
 8008d44:	69bb      	ldr	r3, [r7, #24]
 8008d46:	b2da      	uxtb	r2, r3
 8008d48:	69fb      	ldr	r3, [r7, #28]
 8008d4a:	1c59      	adds	r1, r3, #1
 8008d4c:	61f9      	str	r1, [r7, #28]
 8008d4e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008d52:	b2d2      	uxtb	r2, r2
 8008d54:	701a      	strb	r2, [r3, #0]
 8008d56:	69bb      	ldr	r3, [r7, #24]
 8008d58:	09db      	lsrs	r3, r3, #7
 8008d5a:	61bb      	str	r3, [r7, #24]
 8008d5c:	69bb      	ldr	r3, [r7, #24]
 8008d5e:	2b7f      	cmp	r3, #127	; 0x7f
 8008d60:	d8f0      	bhi.n	8008d44 <SEGGER_SYSVIEW_Warn+0x6c>
 8008d62:	69fb      	ldr	r3, [r7, #28]
 8008d64:	1c5a      	adds	r2, r3, #1
 8008d66:	61fa      	str	r2, [r7, #28]
 8008d68:	69ba      	ldr	r2, [r7, #24]
 8008d6a:	b2d2      	uxtb	r2, r2
 8008d6c:	701a      	strb	r2, [r3, #0]
 8008d6e:	69fb      	ldr	r3, [r7, #28]
 8008d70:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8008d72:	221a      	movs	r2, #26
 8008d74:	68f9      	ldr	r1, [r7, #12]
 8008d76:	6938      	ldr	r0, [r7, #16]
 8008d78:	f7ff f82e 	bl	8007dd8 <_SendPacket>
  RECORD_END();
 8008d7c:	697b      	ldr	r3, [r7, #20]
 8008d7e:	f383 8811 	msr	BASEPRI, r3
}
 8008d82:	bf00      	nop
 8008d84:	3728      	adds	r7, #40	; 0x28
 8008d86:	46bd      	mov	sp, r7
 8008d88:	bd80      	pop	{r7, pc}
 8008d8a:	bf00      	nop
 8008d8c:	20007b10 	.word	0x20007b10

08008d90 <__libc_init_array>:
 8008d90:	b570      	push	{r4, r5, r6, lr}
 8008d92:	4d0d      	ldr	r5, [pc, #52]	; (8008dc8 <__libc_init_array+0x38>)
 8008d94:	4c0d      	ldr	r4, [pc, #52]	; (8008dcc <__libc_init_array+0x3c>)
 8008d96:	1b64      	subs	r4, r4, r5
 8008d98:	10a4      	asrs	r4, r4, #2
 8008d9a:	2600      	movs	r6, #0
 8008d9c:	42a6      	cmp	r6, r4
 8008d9e:	d109      	bne.n	8008db4 <__libc_init_array+0x24>
 8008da0:	4d0b      	ldr	r5, [pc, #44]	; (8008dd0 <__libc_init_array+0x40>)
 8008da2:	4c0c      	ldr	r4, [pc, #48]	; (8008dd4 <__libc_init_array+0x44>)
 8008da4:	f000 f902 	bl	8008fac <_init>
 8008da8:	1b64      	subs	r4, r4, r5
 8008daa:	10a4      	asrs	r4, r4, #2
 8008dac:	2600      	movs	r6, #0
 8008dae:	42a6      	cmp	r6, r4
 8008db0:	d105      	bne.n	8008dbe <__libc_init_array+0x2e>
 8008db2:	bd70      	pop	{r4, r5, r6, pc}
 8008db4:	f855 3b04 	ldr.w	r3, [r5], #4
 8008db8:	4798      	blx	r3
 8008dba:	3601      	adds	r6, #1
 8008dbc:	e7ee      	b.n	8008d9c <__libc_init_array+0xc>
 8008dbe:	f855 3b04 	ldr.w	r3, [r5], #4
 8008dc2:	4798      	blx	r3
 8008dc4:	3601      	adds	r6, #1
 8008dc6:	e7f2      	b.n	8008dae <__libc_init_array+0x1e>
 8008dc8:	080091f4 	.word	0x080091f4
 8008dcc:	080091f4 	.word	0x080091f4
 8008dd0:	080091f4 	.word	0x080091f4
 8008dd4:	080091f8 	.word	0x080091f8

08008dd8 <__retarget_lock_acquire_recursive>:
 8008dd8:	4770      	bx	lr

08008dda <__retarget_lock_release_recursive>:
 8008dda:	4770      	bx	lr

08008ddc <memcmp>:
 8008ddc:	b510      	push	{r4, lr}
 8008dde:	3901      	subs	r1, #1
 8008de0:	4402      	add	r2, r0
 8008de2:	4290      	cmp	r0, r2
 8008de4:	d101      	bne.n	8008dea <memcmp+0xe>
 8008de6:	2000      	movs	r0, #0
 8008de8:	e005      	b.n	8008df6 <memcmp+0x1a>
 8008dea:	7803      	ldrb	r3, [r0, #0]
 8008dec:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008df0:	42a3      	cmp	r3, r4
 8008df2:	d001      	beq.n	8008df8 <memcmp+0x1c>
 8008df4:	1b18      	subs	r0, r3, r4
 8008df6:	bd10      	pop	{r4, pc}
 8008df8:	3001      	adds	r0, #1
 8008dfa:	e7f2      	b.n	8008de2 <memcmp+0x6>

08008dfc <memcpy>:
 8008dfc:	440a      	add	r2, r1
 8008dfe:	4291      	cmp	r1, r2
 8008e00:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008e04:	d100      	bne.n	8008e08 <memcpy+0xc>
 8008e06:	4770      	bx	lr
 8008e08:	b510      	push	{r4, lr}
 8008e0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e0e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008e12:	4291      	cmp	r1, r2
 8008e14:	d1f9      	bne.n	8008e0a <memcpy+0xe>
 8008e16:	bd10      	pop	{r4, pc}

08008e18 <memset>:
 8008e18:	4402      	add	r2, r0
 8008e1a:	4603      	mov	r3, r0
 8008e1c:	4293      	cmp	r3, r2
 8008e1e:	d100      	bne.n	8008e22 <memset+0xa>
 8008e20:	4770      	bx	lr
 8008e22:	f803 1b01 	strb.w	r1, [r3], #1
 8008e26:	e7f9      	b.n	8008e1c <memset+0x4>

08008e28 <cleanup_glue>:
 8008e28:	b538      	push	{r3, r4, r5, lr}
 8008e2a:	460c      	mov	r4, r1
 8008e2c:	6809      	ldr	r1, [r1, #0]
 8008e2e:	4605      	mov	r5, r0
 8008e30:	b109      	cbz	r1, 8008e36 <cleanup_glue+0xe>
 8008e32:	f7ff fff9 	bl	8008e28 <cleanup_glue>
 8008e36:	4621      	mov	r1, r4
 8008e38:	4628      	mov	r0, r5
 8008e3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008e3e:	f000 b869 	b.w	8008f14 <_free_r>
	...

08008e44 <_reclaim_reent>:
 8008e44:	4b2c      	ldr	r3, [pc, #176]	; (8008ef8 <_reclaim_reent+0xb4>)
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	4283      	cmp	r3, r0
 8008e4a:	b570      	push	{r4, r5, r6, lr}
 8008e4c:	4604      	mov	r4, r0
 8008e4e:	d051      	beq.n	8008ef4 <_reclaim_reent+0xb0>
 8008e50:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008e52:	b143      	cbz	r3, 8008e66 <_reclaim_reent+0x22>
 8008e54:	68db      	ldr	r3, [r3, #12]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d14a      	bne.n	8008ef0 <_reclaim_reent+0xac>
 8008e5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e5c:	6819      	ldr	r1, [r3, #0]
 8008e5e:	b111      	cbz	r1, 8008e66 <_reclaim_reent+0x22>
 8008e60:	4620      	mov	r0, r4
 8008e62:	f000 f857 	bl	8008f14 <_free_r>
 8008e66:	6961      	ldr	r1, [r4, #20]
 8008e68:	b111      	cbz	r1, 8008e70 <_reclaim_reent+0x2c>
 8008e6a:	4620      	mov	r0, r4
 8008e6c:	f000 f852 	bl	8008f14 <_free_r>
 8008e70:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008e72:	b111      	cbz	r1, 8008e7a <_reclaim_reent+0x36>
 8008e74:	4620      	mov	r0, r4
 8008e76:	f000 f84d 	bl	8008f14 <_free_r>
 8008e7a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008e7c:	b111      	cbz	r1, 8008e84 <_reclaim_reent+0x40>
 8008e7e:	4620      	mov	r0, r4
 8008e80:	f000 f848 	bl	8008f14 <_free_r>
 8008e84:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8008e86:	b111      	cbz	r1, 8008e8e <_reclaim_reent+0x4a>
 8008e88:	4620      	mov	r0, r4
 8008e8a:	f000 f843 	bl	8008f14 <_free_r>
 8008e8e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8008e90:	b111      	cbz	r1, 8008e98 <_reclaim_reent+0x54>
 8008e92:	4620      	mov	r0, r4
 8008e94:	f000 f83e 	bl	8008f14 <_free_r>
 8008e98:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8008e9a:	b111      	cbz	r1, 8008ea2 <_reclaim_reent+0x5e>
 8008e9c:	4620      	mov	r0, r4
 8008e9e:	f000 f839 	bl	8008f14 <_free_r>
 8008ea2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008ea4:	b111      	cbz	r1, 8008eac <_reclaim_reent+0x68>
 8008ea6:	4620      	mov	r0, r4
 8008ea8:	f000 f834 	bl	8008f14 <_free_r>
 8008eac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008eae:	b111      	cbz	r1, 8008eb6 <_reclaim_reent+0x72>
 8008eb0:	4620      	mov	r0, r4
 8008eb2:	f000 f82f 	bl	8008f14 <_free_r>
 8008eb6:	69a3      	ldr	r3, [r4, #24]
 8008eb8:	b1e3      	cbz	r3, 8008ef4 <_reclaim_reent+0xb0>
 8008eba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008ebc:	4620      	mov	r0, r4
 8008ebe:	4798      	blx	r3
 8008ec0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008ec2:	b1b9      	cbz	r1, 8008ef4 <_reclaim_reent+0xb0>
 8008ec4:	4620      	mov	r0, r4
 8008ec6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008eca:	f7ff bfad 	b.w	8008e28 <cleanup_glue>
 8008ece:	5949      	ldr	r1, [r1, r5]
 8008ed0:	b941      	cbnz	r1, 8008ee4 <_reclaim_reent+0xa0>
 8008ed2:	3504      	adds	r5, #4
 8008ed4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008ed6:	2d80      	cmp	r5, #128	; 0x80
 8008ed8:	68d9      	ldr	r1, [r3, #12]
 8008eda:	d1f8      	bne.n	8008ece <_reclaim_reent+0x8a>
 8008edc:	4620      	mov	r0, r4
 8008ede:	f000 f819 	bl	8008f14 <_free_r>
 8008ee2:	e7ba      	b.n	8008e5a <_reclaim_reent+0x16>
 8008ee4:	680e      	ldr	r6, [r1, #0]
 8008ee6:	4620      	mov	r0, r4
 8008ee8:	f000 f814 	bl	8008f14 <_free_r>
 8008eec:	4631      	mov	r1, r6
 8008eee:	e7ef      	b.n	8008ed0 <_reclaim_reent+0x8c>
 8008ef0:	2500      	movs	r5, #0
 8008ef2:	e7ef      	b.n	8008ed4 <_reclaim_reent+0x90>
 8008ef4:	bd70      	pop	{r4, r5, r6, pc}
 8008ef6:	bf00      	nop
 8008ef8:	20000010 	.word	0x20000010

08008efc <__malloc_lock>:
 8008efc:	4801      	ldr	r0, [pc, #4]	; (8008f04 <__malloc_lock+0x8>)
 8008efe:	f7ff bf6b 	b.w	8008dd8 <__retarget_lock_acquire_recursive>
 8008f02:	bf00      	nop
 8008f04:	20007bf3 	.word	0x20007bf3

08008f08 <__malloc_unlock>:
 8008f08:	4801      	ldr	r0, [pc, #4]	; (8008f10 <__malloc_unlock+0x8>)
 8008f0a:	f7ff bf66 	b.w	8008dda <__retarget_lock_release_recursive>
 8008f0e:	bf00      	nop
 8008f10:	20007bf3 	.word	0x20007bf3

08008f14 <_free_r>:
 8008f14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008f16:	2900      	cmp	r1, #0
 8008f18:	d044      	beq.n	8008fa4 <_free_r+0x90>
 8008f1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f1e:	9001      	str	r0, [sp, #4]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	f1a1 0404 	sub.w	r4, r1, #4
 8008f26:	bfb8      	it	lt
 8008f28:	18e4      	addlt	r4, r4, r3
 8008f2a:	f7ff ffe7 	bl	8008efc <__malloc_lock>
 8008f2e:	4a1e      	ldr	r2, [pc, #120]	; (8008fa8 <_free_r+0x94>)
 8008f30:	9801      	ldr	r0, [sp, #4]
 8008f32:	6813      	ldr	r3, [r2, #0]
 8008f34:	b933      	cbnz	r3, 8008f44 <_free_r+0x30>
 8008f36:	6063      	str	r3, [r4, #4]
 8008f38:	6014      	str	r4, [r2, #0]
 8008f3a:	b003      	add	sp, #12
 8008f3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008f40:	f7ff bfe2 	b.w	8008f08 <__malloc_unlock>
 8008f44:	42a3      	cmp	r3, r4
 8008f46:	d908      	bls.n	8008f5a <_free_r+0x46>
 8008f48:	6825      	ldr	r5, [r4, #0]
 8008f4a:	1961      	adds	r1, r4, r5
 8008f4c:	428b      	cmp	r3, r1
 8008f4e:	bf01      	itttt	eq
 8008f50:	6819      	ldreq	r1, [r3, #0]
 8008f52:	685b      	ldreq	r3, [r3, #4]
 8008f54:	1949      	addeq	r1, r1, r5
 8008f56:	6021      	streq	r1, [r4, #0]
 8008f58:	e7ed      	b.n	8008f36 <_free_r+0x22>
 8008f5a:	461a      	mov	r2, r3
 8008f5c:	685b      	ldr	r3, [r3, #4]
 8008f5e:	b10b      	cbz	r3, 8008f64 <_free_r+0x50>
 8008f60:	42a3      	cmp	r3, r4
 8008f62:	d9fa      	bls.n	8008f5a <_free_r+0x46>
 8008f64:	6811      	ldr	r1, [r2, #0]
 8008f66:	1855      	adds	r5, r2, r1
 8008f68:	42a5      	cmp	r5, r4
 8008f6a:	d10b      	bne.n	8008f84 <_free_r+0x70>
 8008f6c:	6824      	ldr	r4, [r4, #0]
 8008f6e:	4421      	add	r1, r4
 8008f70:	1854      	adds	r4, r2, r1
 8008f72:	42a3      	cmp	r3, r4
 8008f74:	6011      	str	r1, [r2, #0]
 8008f76:	d1e0      	bne.n	8008f3a <_free_r+0x26>
 8008f78:	681c      	ldr	r4, [r3, #0]
 8008f7a:	685b      	ldr	r3, [r3, #4]
 8008f7c:	6053      	str	r3, [r2, #4]
 8008f7e:	4421      	add	r1, r4
 8008f80:	6011      	str	r1, [r2, #0]
 8008f82:	e7da      	b.n	8008f3a <_free_r+0x26>
 8008f84:	d902      	bls.n	8008f8c <_free_r+0x78>
 8008f86:	230c      	movs	r3, #12
 8008f88:	6003      	str	r3, [r0, #0]
 8008f8a:	e7d6      	b.n	8008f3a <_free_r+0x26>
 8008f8c:	6825      	ldr	r5, [r4, #0]
 8008f8e:	1961      	adds	r1, r4, r5
 8008f90:	428b      	cmp	r3, r1
 8008f92:	bf04      	itt	eq
 8008f94:	6819      	ldreq	r1, [r3, #0]
 8008f96:	685b      	ldreq	r3, [r3, #4]
 8008f98:	6063      	str	r3, [r4, #4]
 8008f9a:	bf04      	itt	eq
 8008f9c:	1949      	addeq	r1, r1, r5
 8008f9e:	6021      	streq	r1, [r4, #0]
 8008fa0:	6054      	str	r4, [r2, #4]
 8008fa2:	e7ca      	b.n	8008f3a <_free_r+0x26>
 8008fa4:	b003      	add	sp, #12
 8008fa6:	bd30      	pop	{r4, r5, pc}
 8008fa8:	20007bf4 	.word	0x20007bf4

08008fac <_init>:
 8008fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fae:	bf00      	nop
 8008fb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fb2:	bc08      	pop	{r3}
 8008fb4:	469e      	mov	lr, r3
 8008fb6:	4770      	bx	lr

08008fb8 <_fini>:
 8008fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fba:	bf00      	nop
 8008fbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fbe:	bc08      	pop	{r3}
 8008fc0:	469e      	mov	lr, r3
 8008fc2:	4770      	bx	lr
