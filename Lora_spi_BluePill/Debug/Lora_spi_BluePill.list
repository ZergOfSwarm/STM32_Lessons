
Lora_spi_BluePill.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004228  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ec  08004338  08004338  00014338  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004524  08004524  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004524  08004524  00014524  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800452c  0800452c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800452c  0800452c  0001452c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004530  08004530  00014530  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004534  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000420  20000070  080045a4  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000490  080045a4  00020490  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c144  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022bb  00000000  00000000  0002c1dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009f8  00000000  00000000  0002e498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000910  00000000  00000000  0002ee90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018c84  00000000  00000000  0002f7a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000afe6  00000000  00000000  00048424  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000863b4  00000000  00000000  0005340a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d97be  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030ac  00000000  00000000  000d9814  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	08004320 	.word	0x08004320

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	08004320 	.word	0x08004320

08000150 <__aeabi_uldivmod>:
 8000150:	b953      	cbnz	r3, 8000168 <__aeabi_uldivmod+0x18>
 8000152:	b94a      	cbnz	r2, 8000168 <__aeabi_uldivmod+0x18>
 8000154:	2900      	cmp	r1, #0
 8000156:	bf08      	it	eq
 8000158:	2800      	cmpeq	r0, #0
 800015a:	bf1c      	itt	ne
 800015c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000160:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000164:	f000 b96e 	b.w	8000444 <__aeabi_idiv0>
 8000168:	f1ad 0c08 	sub.w	ip, sp, #8
 800016c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000170:	f000 f806 	bl	8000180 <__udivmoddi4>
 8000174:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000178:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800017c:	b004      	add	sp, #16
 800017e:	4770      	bx	lr

08000180 <__udivmoddi4>:
 8000180:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000184:	9e08      	ldr	r6, [sp, #32]
 8000186:	460d      	mov	r5, r1
 8000188:	4604      	mov	r4, r0
 800018a:	468e      	mov	lr, r1
 800018c:	2b00      	cmp	r3, #0
 800018e:	f040 8083 	bne.w	8000298 <__udivmoddi4+0x118>
 8000192:	428a      	cmp	r2, r1
 8000194:	4617      	mov	r7, r2
 8000196:	d947      	bls.n	8000228 <__udivmoddi4+0xa8>
 8000198:	fab2 f382 	clz	r3, r2
 800019c:	b14b      	cbz	r3, 80001b2 <__udivmoddi4+0x32>
 800019e:	f1c3 0120 	rsb	r1, r3, #32
 80001a2:	fa05 fe03 	lsl.w	lr, r5, r3
 80001a6:	fa20 f101 	lsr.w	r1, r0, r1
 80001aa:	409f      	lsls	r7, r3
 80001ac:	ea41 0e0e 	orr.w	lr, r1, lr
 80001b0:	409c      	lsls	r4, r3
 80001b2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80001b6:	fbbe fcf8 	udiv	ip, lr, r8
 80001ba:	fa1f f987 	uxth.w	r9, r7
 80001be:	fb08 e21c 	mls	r2, r8, ip, lr
 80001c2:	fb0c f009 	mul.w	r0, ip, r9
 80001c6:	0c21      	lsrs	r1, r4, #16
 80001c8:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 80001cc:	4290      	cmp	r0, r2
 80001ce:	d90a      	bls.n	80001e6 <__udivmoddi4+0x66>
 80001d0:	18ba      	adds	r2, r7, r2
 80001d2:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 80001d6:	f080 8118 	bcs.w	800040a <__udivmoddi4+0x28a>
 80001da:	4290      	cmp	r0, r2
 80001dc:	f240 8115 	bls.w	800040a <__udivmoddi4+0x28a>
 80001e0:	f1ac 0c02 	sub.w	ip, ip, #2
 80001e4:	443a      	add	r2, r7
 80001e6:	1a12      	subs	r2, r2, r0
 80001e8:	fbb2 f0f8 	udiv	r0, r2, r8
 80001ec:	fb08 2210 	mls	r2, r8, r0, r2
 80001f0:	fb00 f109 	mul.w	r1, r0, r9
 80001f4:	b2a4      	uxth	r4, r4
 80001f6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80001fa:	42a1      	cmp	r1, r4
 80001fc:	d909      	bls.n	8000212 <__udivmoddi4+0x92>
 80001fe:	193c      	adds	r4, r7, r4
 8000200:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000204:	f080 8103 	bcs.w	800040e <__udivmoddi4+0x28e>
 8000208:	42a1      	cmp	r1, r4
 800020a:	f240 8100 	bls.w	800040e <__udivmoddi4+0x28e>
 800020e:	3802      	subs	r0, #2
 8000210:	443c      	add	r4, r7
 8000212:	1a64      	subs	r4, r4, r1
 8000214:	2100      	movs	r1, #0
 8000216:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800021a:	b11e      	cbz	r6, 8000224 <__udivmoddi4+0xa4>
 800021c:	2200      	movs	r2, #0
 800021e:	40dc      	lsrs	r4, r3
 8000220:	e9c6 4200 	strd	r4, r2, [r6]
 8000224:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000228:	b902      	cbnz	r2, 800022c <__udivmoddi4+0xac>
 800022a:	deff      	udf	#255	; 0xff
 800022c:	fab2 f382 	clz	r3, r2
 8000230:	2b00      	cmp	r3, #0
 8000232:	d14f      	bne.n	80002d4 <__udivmoddi4+0x154>
 8000234:	1a8d      	subs	r5, r1, r2
 8000236:	2101      	movs	r1, #1
 8000238:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800023c:	fa1f f882 	uxth.w	r8, r2
 8000240:	fbb5 fcfe 	udiv	ip, r5, lr
 8000244:	fb0e 551c 	mls	r5, lr, ip, r5
 8000248:	fb08 f00c 	mul.w	r0, r8, ip
 800024c:	0c22      	lsrs	r2, r4, #16
 800024e:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8000252:	42a8      	cmp	r0, r5
 8000254:	d907      	bls.n	8000266 <__udivmoddi4+0xe6>
 8000256:	197d      	adds	r5, r7, r5
 8000258:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
 800025c:	d202      	bcs.n	8000264 <__udivmoddi4+0xe4>
 800025e:	42a8      	cmp	r0, r5
 8000260:	f200 80e9 	bhi.w	8000436 <__udivmoddi4+0x2b6>
 8000264:	4694      	mov	ip, r2
 8000266:	1a2d      	subs	r5, r5, r0
 8000268:	fbb5 f0fe 	udiv	r0, r5, lr
 800026c:	fb0e 5510 	mls	r5, lr, r0, r5
 8000270:	fb08 f800 	mul.w	r8, r8, r0
 8000274:	b2a4      	uxth	r4, r4
 8000276:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800027a:	45a0      	cmp	r8, r4
 800027c:	d907      	bls.n	800028e <__udivmoddi4+0x10e>
 800027e:	193c      	adds	r4, r7, r4
 8000280:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000284:	d202      	bcs.n	800028c <__udivmoddi4+0x10c>
 8000286:	45a0      	cmp	r8, r4
 8000288:	f200 80d9 	bhi.w	800043e <__udivmoddi4+0x2be>
 800028c:	4610      	mov	r0, r2
 800028e:	eba4 0408 	sub.w	r4, r4, r8
 8000292:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000296:	e7c0      	b.n	800021a <__udivmoddi4+0x9a>
 8000298:	428b      	cmp	r3, r1
 800029a:	d908      	bls.n	80002ae <__udivmoddi4+0x12e>
 800029c:	2e00      	cmp	r6, #0
 800029e:	f000 80b1 	beq.w	8000404 <__udivmoddi4+0x284>
 80002a2:	2100      	movs	r1, #0
 80002a4:	e9c6 0500 	strd	r0, r5, [r6]
 80002a8:	4608      	mov	r0, r1
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d14b      	bne.n	800034e <__udivmoddi4+0x1ce>
 80002b6:	42ab      	cmp	r3, r5
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0x140>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 80b9 	bhi.w	8000432 <__udivmoddi4+0x2b2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb65 0303 	sbc.w	r3, r5, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	469e      	mov	lr, r3
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	d0aa      	beq.n	8000224 <__udivmoddi4+0xa4>
 80002ce:	e9c6 4e00 	strd	r4, lr, [r6]
 80002d2:	e7a7      	b.n	8000224 <__udivmoddi4+0xa4>
 80002d4:	409f      	lsls	r7, r3
 80002d6:	f1c3 0220 	rsb	r2, r3, #32
 80002da:	40d1      	lsrs	r1, r2
 80002dc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fa1f f887 	uxth.w	r8, r7
 80002e8:	fb0e 1110 	mls	r1, lr, r0, r1
 80002ec:	fa24 f202 	lsr.w	r2, r4, r2
 80002f0:	409d      	lsls	r5, r3
 80002f2:	fb00 fc08 	mul.w	ip, r0, r8
 80002f6:	432a      	orrs	r2, r5
 80002f8:	0c15      	lsrs	r5, r2, #16
 80002fa:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 80002fe:	45ac      	cmp	ip, r5
 8000300:	fa04 f403 	lsl.w	r4, r4, r3
 8000304:	d909      	bls.n	800031a <__udivmoddi4+0x19a>
 8000306:	197d      	adds	r5, r7, r5
 8000308:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800030c:	f080 808f 	bcs.w	800042e <__udivmoddi4+0x2ae>
 8000310:	45ac      	cmp	ip, r5
 8000312:	f240 808c 	bls.w	800042e <__udivmoddi4+0x2ae>
 8000316:	3802      	subs	r0, #2
 8000318:	443d      	add	r5, r7
 800031a:	eba5 050c 	sub.w	r5, r5, ip
 800031e:	fbb5 f1fe 	udiv	r1, r5, lr
 8000322:	fb0e 5c11 	mls	ip, lr, r1, r5
 8000326:	fb01 f908 	mul.w	r9, r1, r8
 800032a:	b295      	uxth	r5, r2
 800032c:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000330:	45a9      	cmp	r9, r5
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x1c4>
 8000334:	197d      	adds	r5, r7, r5
 8000336:	f101 32ff 	add.w	r2, r1, #4294967295	; 0xffffffff
 800033a:	d274      	bcs.n	8000426 <__udivmoddi4+0x2a6>
 800033c:	45a9      	cmp	r9, r5
 800033e:	d972      	bls.n	8000426 <__udivmoddi4+0x2a6>
 8000340:	3902      	subs	r1, #2
 8000342:	443d      	add	r5, r7
 8000344:	eba5 0509 	sub.w	r5, r5, r9
 8000348:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800034c:	e778      	b.n	8000240 <__udivmoddi4+0xc0>
 800034e:	f1c1 0720 	rsb	r7, r1, #32
 8000352:	408b      	lsls	r3, r1
 8000354:	fa22 fc07 	lsr.w	ip, r2, r7
 8000358:	ea4c 0c03 	orr.w	ip, ip, r3
 800035c:	fa25 f407 	lsr.w	r4, r5, r7
 8000360:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000364:	fbb4 f9fe 	udiv	r9, r4, lr
 8000368:	fa1f f88c 	uxth.w	r8, ip
 800036c:	fb0e 4419 	mls	r4, lr, r9, r4
 8000370:	fa20 f307 	lsr.w	r3, r0, r7
 8000374:	fb09 fa08 	mul.w	sl, r9, r8
 8000378:	408d      	lsls	r5, r1
 800037a:	431d      	orrs	r5, r3
 800037c:	0c2b      	lsrs	r3, r5, #16
 800037e:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000382:	45a2      	cmp	sl, r4
 8000384:	fa02 f201 	lsl.w	r2, r2, r1
 8000388:	fa00 f301 	lsl.w	r3, r0, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0x222>
 800038e:	eb1c 0404 	adds.w	r4, ip, r4
 8000392:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000396:	d248      	bcs.n	800042a <__udivmoddi4+0x2aa>
 8000398:	45a2      	cmp	sl, r4
 800039a:	d946      	bls.n	800042a <__udivmoddi4+0x2aa>
 800039c:	f1a9 0902 	sub.w	r9, r9, #2
 80003a0:	4464      	add	r4, ip
 80003a2:	eba4 040a 	sub.w	r4, r4, sl
 80003a6:	fbb4 f0fe 	udiv	r0, r4, lr
 80003aa:	fb0e 4410 	mls	r4, lr, r0, r4
 80003ae:	fb00 fa08 	mul.w	sl, r0, r8
 80003b2:	b2ad      	uxth	r5, r5
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	45a2      	cmp	sl, r4
 80003ba:	d908      	bls.n	80003ce <__udivmoddi4+0x24e>
 80003bc:	eb1c 0404 	adds.w	r4, ip, r4
 80003c0:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 80003c4:	d22d      	bcs.n	8000422 <__udivmoddi4+0x2a2>
 80003c6:	45a2      	cmp	sl, r4
 80003c8:	d92b      	bls.n	8000422 <__udivmoddi4+0x2a2>
 80003ca:	3802      	subs	r0, #2
 80003cc:	4464      	add	r4, ip
 80003ce:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d2:	fba0 8902 	umull	r8, r9, r0, r2
 80003d6:	eba4 040a 	sub.w	r4, r4, sl
 80003da:	454c      	cmp	r4, r9
 80003dc:	46c6      	mov	lr, r8
 80003de:	464d      	mov	r5, r9
 80003e0:	d319      	bcc.n	8000416 <__udivmoddi4+0x296>
 80003e2:	d016      	beq.n	8000412 <__udivmoddi4+0x292>
 80003e4:	b15e      	cbz	r6, 80003fe <__udivmoddi4+0x27e>
 80003e6:	ebb3 020e 	subs.w	r2, r3, lr
 80003ea:	eb64 0405 	sbc.w	r4, r4, r5
 80003ee:	fa04 f707 	lsl.w	r7, r4, r7
 80003f2:	fa22 f301 	lsr.w	r3, r2, r1
 80003f6:	431f      	orrs	r7, r3
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	e9c6 7400 	strd	r7, r4, [r6]
 80003fe:	2100      	movs	r1, #0
 8000400:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000404:	4631      	mov	r1, r6
 8000406:	4630      	mov	r0, r6
 8000408:	e70c      	b.n	8000224 <__udivmoddi4+0xa4>
 800040a:	468c      	mov	ip, r1
 800040c:	e6eb      	b.n	80001e6 <__udivmoddi4+0x66>
 800040e:	4610      	mov	r0, r2
 8000410:	e6ff      	b.n	8000212 <__udivmoddi4+0x92>
 8000412:	4543      	cmp	r3, r8
 8000414:	d2e6      	bcs.n	80003e4 <__udivmoddi4+0x264>
 8000416:	ebb8 0e02 	subs.w	lr, r8, r2
 800041a:	eb69 050c 	sbc.w	r5, r9, ip
 800041e:	3801      	subs	r0, #1
 8000420:	e7e0      	b.n	80003e4 <__udivmoddi4+0x264>
 8000422:	4628      	mov	r0, r5
 8000424:	e7d3      	b.n	80003ce <__udivmoddi4+0x24e>
 8000426:	4611      	mov	r1, r2
 8000428:	e78c      	b.n	8000344 <__udivmoddi4+0x1c4>
 800042a:	4681      	mov	r9, r0
 800042c:	e7b9      	b.n	80003a2 <__udivmoddi4+0x222>
 800042e:	4608      	mov	r0, r1
 8000430:	e773      	b.n	800031a <__udivmoddi4+0x19a>
 8000432:	4608      	mov	r0, r1
 8000434:	e749      	b.n	80002ca <__udivmoddi4+0x14a>
 8000436:	f1ac 0c02 	sub.w	ip, ip, #2
 800043a:	443d      	add	r5, r7
 800043c:	e713      	b.n	8000266 <__udivmoddi4+0xe6>
 800043e:	3802      	subs	r0, #2
 8000440:	443c      	add	r4, r7
 8000442:	e724      	b.n	800028e <__udivmoddi4+0x10e>

08000444 <__aeabi_idiv0>:
 8000444:	4770      	bx	lr
 8000446:	bf00      	nop

08000448 <SX1278_SPIRead>:
 */

#include "SX1278.h"
#include <string.h>

uint8_t SX1278_SPIRead(SX1278_t *module, uint8_t addr) {
 8000448:	b580      	push	{r7, lr}
 800044a:	b084      	sub	sp, #16
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
 8000450:	460b      	mov	r3, r1
 8000452:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	SX1278_hw_SPICommand(module->hw, addr);
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	78fa      	ldrb	r2, [r7, #3]
 800045a:	4611      	mov	r1, r2
 800045c:	4618      	mov	r0, r3
 800045e:	f000 fbd0 	bl	8000c02 <SX1278_hw_SPICommand>
	tmp = SX1278_hw_SPIReadByte(module->hw);
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	4618      	mov	r0, r3
 8000468:	f000 fbeb 	bl	8000c42 <SX1278_hw_SPIReadByte>
 800046c:	4603      	mov	r3, r0
 800046e:	73fb      	strb	r3, [r7, #15]
	SX1278_hw_SetNSS(module->hw, 1);
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	2101      	movs	r1, #1
 8000476:	4618      	mov	r0, r3
 8000478:	f000 fb88 	bl	8000b8c <SX1278_hw_SetNSS>
	return tmp;
 800047c:	7bfb      	ldrb	r3, [r7, #15]
}
 800047e:	4618      	mov	r0, r3
 8000480:	3710      	adds	r7, #16
 8000482:	46bd      	mov	sp, r7
 8000484:	bd80      	pop	{r7, pc}

08000486 <SX1278_SPIWrite>:

void SX1278_SPIWrite(SX1278_t *module, uint8_t addr, uint8_t cmd) {
 8000486:	b580      	push	{r7, lr}
 8000488:	b082      	sub	sp, #8
 800048a:	af00      	add	r7, sp, #0
 800048c:	6078      	str	r0, [r7, #4]
 800048e:	460b      	mov	r3, r1
 8000490:	70fb      	strb	r3, [r7, #3]
 8000492:	4613      	mov	r3, r2
 8000494:	70bb      	strb	r3, [r7, #2]
	SX1278_hw_SetNSS(module->hw, 0);
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	2100      	movs	r1, #0
 800049c:	4618      	mov	r0, r3
 800049e:	f000 fb75 	bl	8000b8c <SX1278_hw_SetNSS>
	SX1278_hw_SPICommand(module->hw, addr | 0x80);
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	681a      	ldr	r2, [r3, #0]
 80004a6:	78fb      	ldrb	r3, [r7, #3]
 80004a8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80004ac:	b2db      	uxtb	r3, r3
 80004ae:	4619      	mov	r1, r3
 80004b0:	4610      	mov	r0, r2
 80004b2:	f000 fba6 	bl	8000c02 <SX1278_hw_SPICommand>
	SX1278_hw_SPICommand(module->hw, cmd);
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	78ba      	ldrb	r2, [r7, #2]
 80004bc:	4611      	mov	r1, r2
 80004be:	4618      	mov	r0, r3
 80004c0:	f000 fb9f 	bl	8000c02 <SX1278_hw_SPICommand>
	SX1278_hw_SetNSS(module->hw, 1);
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	2101      	movs	r1, #1
 80004ca:	4618      	mov	r0, r3
 80004cc:	f000 fb5e 	bl	8000b8c <SX1278_hw_SetNSS>
}
 80004d0:	bf00      	nop
 80004d2:	3708      	adds	r7, #8
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bd80      	pop	{r7, pc}

080004d8 <SX1278_SPIBurstRead>:

void SX1278_SPIBurstRead(SX1278_t *module, uint8_t addr, uint8_t *rxBuf,
		uint8_t length) {
 80004d8:	b590      	push	{r4, r7, lr}
 80004da:	b087      	sub	sp, #28
 80004dc:	af00      	add	r7, sp, #0
 80004de:	60f8      	str	r0, [r7, #12]
 80004e0:	607a      	str	r2, [r7, #4]
 80004e2:	461a      	mov	r2, r3
 80004e4:	460b      	mov	r3, r1
 80004e6:	72fb      	strb	r3, [r7, #11]
 80004e8:	4613      	mov	r3, r2
 80004ea:	72bb      	strb	r3, [r7, #10]
	uint8_t i;
	if (length <= 1) {
 80004ec:	7abb      	ldrb	r3, [r7, #10]
 80004ee:	2b01      	cmp	r3, #1
 80004f0:	d927      	bls.n	8000542 <SX1278_SPIBurstRead+0x6a>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 80004f2:	68fb      	ldr	r3, [r7, #12]
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	2100      	movs	r1, #0
 80004f8:	4618      	mov	r0, r3
 80004fa:	f000 fb47 	bl	8000b8c <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr);
 80004fe:	68fb      	ldr	r3, [r7, #12]
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	7afa      	ldrb	r2, [r7, #11]
 8000504:	4611      	mov	r1, r2
 8000506:	4618      	mov	r0, r3
 8000508:	f000 fb7b 	bl	8000c02 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 800050c:	2300      	movs	r3, #0
 800050e:	75fb      	strb	r3, [r7, #23]
 8000510:	e00c      	b.n	800052c <SX1278_SPIBurstRead+0x54>
			*(rxBuf + i) = SX1278_hw_SPIReadByte(module->hw);
 8000512:	68fb      	ldr	r3, [r7, #12]
 8000514:	6819      	ldr	r1, [r3, #0]
 8000516:	7dfb      	ldrb	r3, [r7, #23]
 8000518:	687a      	ldr	r2, [r7, #4]
 800051a:	18d4      	adds	r4, r2, r3
 800051c:	4608      	mov	r0, r1
 800051e:	f000 fb90 	bl	8000c42 <SX1278_hw_SPIReadByte>
 8000522:	4603      	mov	r3, r0
 8000524:	7023      	strb	r3, [r4, #0]
		for (i = 0; i < length; i++) {
 8000526:	7dfb      	ldrb	r3, [r7, #23]
 8000528:	3301      	adds	r3, #1
 800052a:	75fb      	strb	r3, [r7, #23]
 800052c:	7dfa      	ldrb	r2, [r7, #23]
 800052e:	7abb      	ldrb	r3, [r7, #10]
 8000530:	429a      	cmp	r2, r3
 8000532:	d3ee      	bcc.n	8000512 <SX1278_SPIBurstRead+0x3a>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 8000534:	68fb      	ldr	r3, [r7, #12]
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	2101      	movs	r1, #1
 800053a:	4618      	mov	r0, r3
 800053c:	f000 fb26 	bl	8000b8c <SX1278_hw_SetNSS>
 8000540:	e000      	b.n	8000544 <SX1278_SPIBurstRead+0x6c>
		return;
 8000542:	bf00      	nop
	}
}
 8000544:	371c      	adds	r7, #28
 8000546:	46bd      	mov	sp, r7
 8000548:	bd90      	pop	{r4, r7, pc}

0800054a <SX1278_SPIBurstWrite>:

void SX1278_SPIBurstWrite(SX1278_t *module, uint8_t addr, uint8_t *txBuf,
		uint8_t length) {
 800054a:	b580      	push	{r7, lr}
 800054c:	b086      	sub	sp, #24
 800054e:	af00      	add	r7, sp, #0
 8000550:	60f8      	str	r0, [r7, #12]
 8000552:	607a      	str	r2, [r7, #4]
 8000554:	461a      	mov	r2, r3
 8000556:	460b      	mov	r3, r1
 8000558:	72fb      	strb	r3, [r7, #11]
 800055a:	4613      	mov	r3, r2
 800055c:	72bb      	strb	r3, [r7, #10]
	unsigned char i;
	if (length <= 1) {
 800055e:	7abb      	ldrb	r3, [r7, #10]
 8000560:	2b01      	cmp	r3, #1
 8000562:	d929      	bls.n	80005b8 <SX1278_SPIBurstWrite+0x6e>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 8000564:	68fb      	ldr	r3, [r7, #12]
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	2100      	movs	r1, #0
 800056a:	4618      	mov	r0, r3
 800056c:	f000 fb0e 	bl	8000b8c <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr | 0x80);
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	681a      	ldr	r2, [r3, #0]
 8000574:	7afb      	ldrb	r3, [r7, #11]
 8000576:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800057a:	b2db      	uxtb	r3, r3
 800057c:	4619      	mov	r1, r3
 800057e:	4610      	mov	r0, r2
 8000580:	f000 fb3f 	bl	8000c02 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 8000584:	2300      	movs	r3, #0
 8000586:	75fb      	strb	r3, [r7, #23]
 8000588:	e00b      	b.n	80005a2 <SX1278_SPIBurstWrite+0x58>
			SX1278_hw_SPICommand(module->hw, *(txBuf + i));
 800058a:	68fb      	ldr	r3, [r7, #12]
 800058c:	6818      	ldr	r0, [r3, #0]
 800058e:	7dfb      	ldrb	r3, [r7, #23]
 8000590:	687a      	ldr	r2, [r7, #4]
 8000592:	4413      	add	r3, r2
 8000594:	781b      	ldrb	r3, [r3, #0]
 8000596:	4619      	mov	r1, r3
 8000598:	f000 fb33 	bl	8000c02 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 800059c:	7dfb      	ldrb	r3, [r7, #23]
 800059e:	3301      	adds	r3, #1
 80005a0:	75fb      	strb	r3, [r7, #23]
 80005a2:	7dfa      	ldrb	r2, [r7, #23]
 80005a4:	7abb      	ldrb	r3, [r7, #10]
 80005a6:	429a      	cmp	r2, r3
 80005a8:	d3ef      	bcc.n	800058a <SX1278_SPIBurstWrite+0x40>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	2101      	movs	r1, #1
 80005b0:	4618      	mov	r0, r3
 80005b2:	f000 faeb 	bl	8000b8c <SX1278_hw_SetNSS>
 80005b6:	e000      	b.n	80005ba <SX1278_SPIBurstWrite+0x70>
		return;
 80005b8:	bf00      	nop
	}
}
 80005ba:	3718      	adds	r7, #24
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}

080005c0 <SX1278_config>:

void SX1278_config(SX1278_t *module) {
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b086      	sub	sp, #24
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
	SX1278_sleep(module); //Change modem mode Must in Sleep mode
 80005c8:	6878      	ldr	r0, [r7, #4]
 80005ca:	f000 f90d 	bl	80007e8 <SX1278_sleep>
	SX1278_hw_DelayMs(15);
 80005ce:	200f      	movs	r0, #15
 80005d0:	f000 fb5d 	bl	8000c8e <SX1278_hw_DelayMs>

	SX1278_entryLoRa(module);
 80005d4:	6878      	ldr	r0, [r7, #4]
 80005d6:	f000 f917 	bl	8000808 <SX1278_entryLoRa>
	//SX1278_SPIWrite(module, 0x5904); //?? Change digital regulator form 1.6V to 1.47V: see errata note

	uint64_t freq = ((uint64_t) module->frequency << 19) / 32000000;
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80005e0:	f04f 0000 	mov.w	r0, #0
 80005e4:	f04f 0100 	mov.w	r1, #0
 80005e8:	04d9      	lsls	r1, r3, #19
 80005ea:	ea41 3152 	orr.w	r1, r1, r2, lsr #13
 80005ee:	04d0      	lsls	r0, r2, #19
 80005f0:	4a6f      	ldr	r2, [pc, #444]	; (80007b0 <SX1278_config+0x1f0>)
 80005f2:	f04f 0300 	mov.w	r3, #0
 80005f6:	f7ff fdab 	bl	8000150 <__aeabi_uldivmod>
 80005fa:	4602      	mov	r2, r0
 80005fc:	460b      	mov	r3, r1
 80005fe:	e9c7 2304 	strd	r2, r3, [r7, #16]
	uint8_t freq_reg[3];
	freq_reg[0] = (uint8_t) (freq >> 16);
 8000602:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000606:	f04f 0200 	mov.w	r2, #0
 800060a:	f04f 0300 	mov.w	r3, #0
 800060e:	0c02      	lsrs	r2, r0, #16
 8000610:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000614:	0c0b      	lsrs	r3, r1, #16
 8000616:	b2d3      	uxtb	r3, r2
 8000618:	733b      	strb	r3, [r7, #12]
	freq_reg[1] = (uint8_t) (freq >> 8);
 800061a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800061e:	f04f 0200 	mov.w	r2, #0
 8000622:	f04f 0300 	mov.w	r3, #0
 8000626:	0a02      	lsrs	r2, r0, #8
 8000628:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800062c:	0a0b      	lsrs	r3, r1, #8
 800062e:	b2d3      	uxtb	r3, r2
 8000630:	737b      	strb	r3, [r7, #13]
	freq_reg[2] = (uint8_t) (freq >> 0);
 8000632:	7c3b      	ldrb	r3, [r7, #16]
 8000634:	73bb      	strb	r3, [r7, #14]
	SX1278_SPIBurstWrite(module, LR_RegFrMsb, (uint8_t*) freq_reg, 3); //setting  frequency parameter
 8000636:	f107 020c 	add.w	r2, r7, #12
 800063a:	2303      	movs	r3, #3
 800063c:	2106      	movs	r1, #6
 800063e:	6878      	ldr	r0, [r7, #4]
 8000640:	f7ff ff83 	bl	800054a <SX1278_SPIBurstWrite>

	SX1278_SPIWrite(module, RegSyncWord, 0x34);
 8000644:	2234      	movs	r2, #52	; 0x34
 8000646:	2139      	movs	r1, #57	; 0x39
 8000648:	6878      	ldr	r0, [r7, #4]
 800064a:	f7ff ff1c 	bl	8000486 <SX1278_SPIWrite>

	//setting base parameter
	SX1278_SPIWrite(module, LR_RegPaConfig, SX1278_Power[module->power]); //Setting output power parameter
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	7c1b      	ldrb	r3, [r3, #16]
 8000652:	461a      	mov	r2, r3
 8000654:	4b57      	ldr	r3, [pc, #348]	; (80007b4 <SX1278_config+0x1f4>)
 8000656:	5c9b      	ldrb	r3, [r3, r2]
 8000658:	461a      	mov	r2, r3
 800065a:	2109      	movs	r1, #9
 800065c:	6878      	ldr	r0, [r7, #4]
 800065e:	f7ff ff12 	bl	8000486 <SX1278_SPIWrite>

	SX1278_SPIWrite(module, LR_RegOcp, 0x0B);			//RegOcp,Close Ocp
 8000662:	220b      	movs	r2, #11
 8000664:	210b      	movs	r1, #11
 8000666:	6878      	ldr	r0, [r7, #4]
 8000668:	f7ff ff0d 	bl	8000486 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegLna, 0x23);		//RegLNA,High & LNA Enable
 800066c:	2223      	movs	r2, #35	; 0x23
 800066e:	210c      	movs	r1, #12
 8000670:	6878      	ldr	r0, [r7, #4]
 8000672:	f7ff ff08 	bl	8000486 <SX1278_SPIWrite>
	if (SX1278_SpreadFactor[module->LoRa_SF] == 6) {	//SFactor=6
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	7c5b      	ldrb	r3, [r3, #17]
 800067a:	461a      	mov	r2, r3
 800067c:	4b4e      	ldr	r3, [pc, #312]	; (80007b8 <SX1278_config+0x1f8>)
 800067e:	5c9b      	ldrb	r3, [r3, r2]
 8000680:	2b06      	cmp	r3, #6
 8000682:	d147      	bne.n	8000714 <SX1278_config+0x154>
		uint8_t tmp;
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[module->LoRa_BW] << 4)
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	7c9b      	ldrb	r3, [r3, #18]
 8000688:	461a      	mov	r2, r3
 800068a:	4b4c      	ldr	r3, [pc, #304]	; (80007bc <SX1278_config+0x1fc>)
 800068c:	5c9b      	ldrb	r3, [r3, r2]
 800068e:	011b      	lsls	r3, r3, #4
 8000690:	b2da      	uxtb	r2, r3
						+ (SX1278_CodingRate[module->LoRa_CR] << 1) + 0x01)); //Implicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	7cdb      	ldrb	r3, [r3, #19]
 8000696:	4619      	mov	r1, r3
 8000698:	4b49      	ldr	r3, [pc, #292]	; (80007c0 <SX1278_config+0x200>)
 800069a:	5c5b      	ldrb	r3, [r3, r1]
 800069c:	005b      	lsls	r3, r3, #1
 800069e:	b2db      	uxtb	r3, r3
 80006a0:	4413      	add	r3, r2
 80006a2:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 80006a4:	3301      	adds	r3, #1
 80006a6:	b2db      	uxtb	r3, r3
 80006a8:	461a      	mov	r2, r3
 80006aa:	211d      	movs	r1, #29
 80006ac:	6878      	ldr	r0, [r7, #4]
 80006ae:	f7ff feea 	bl	8000486 <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[module->LoRa_SF] << 4)
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	7c5b      	ldrb	r3, [r3, #17]
 80006b6:	461a      	mov	r2, r3
 80006b8:	4b3f      	ldr	r3, [pc, #252]	; (80007b8 <SX1278_config+0x1f8>)
 80006ba:	5c9b      	ldrb	r3, [r3, r2]
 80006bc:	011b      	lsls	r3, r3, #4
 80006be:	b2da      	uxtb	r2, r3
						+ (SX1278_CRC_Sum[module->LoRa_CRC_sum] << 2) + 0x03));
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	7d1b      	ldrb	r3, [r3, #20]
 80006c4:	4619      	mov	r1, r3
 80006c6:	4b3f      	ldr	r3, [pc, #252]	; (80007c4 <SX1278_config+0x204>)
 80006c8:	5c5b      	ldrb	r3, [r3, r1]
 80006ca:	009b      	lsls	r3, r3, #2
 80006cc:	b2db      	uxtb	r3, r3
 80006ce:	4413      	add	r3, r2
 80006d0:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 80006d2:	3303      	adds	r3, #3
 80006d4:	b2db      	uxtb	r3, r3
 80006d6:	461a      	mov	r2, r3
 80006d8:	211e      	movs	r1, #30
 80006da:	6878      	ldr	r0, [r7, #4]
 80006dc:	f7ff fed3 	bl	8000486 <SX1278_SPIWrite>

		tmp = SX1278_SPIRead(module, 0x31);
 80006e0:	2131      	movs	r1, #49	; 0x31
 80006e2:	6878      	ldr	r0, [r7, #4]
 80006e4:	f7ff feb0 	bl	8000448 <SX1278_SPIRead>
 80006e8:	4603      	mov	r3, r0
 80006ea:	73fb      	strb	r3, [r7, #15]
		tmp &= 0xF8;
 80006ec:	7bfb      	ldrb	r3, [r7, #15]
 80006ee:	f023 0307 	bic.w	r3, r3, #7
 80006f2:	73fb      	strb	r3, [r7, #15]
		tmp |= 0x05;
 80006f4:	7bfb      	ldrb	r3, [r7, #15]
 80006f6:	f043 0305 	orr.w	r3, r3, #5
 80006fa:	73fb      	strb	r3, [r7, #15]
		SX1278_SPIWrite(module, 0x31, tmp);
 80006fc:	7bfb      	ldrb	r3, [r7, #15]
 80006fe:	461a      	mov	r2, r3
 8000700:	2131      	movs	r1, #49	; 0x31
 8000702:	6878      	ldr	r0, [r7, #4]
 8000704:	f7ff febf 	bl	8000486 <SX1278_SPIWrite>
		SX1278_SPIWrite(module, 0x37, 0x0C);
 8000708:	220c      	movs	r2, #12
 800070a:	2137      	movs	r1, #55	; 0x37
 800070c:	6878      	ldr	r0, [r7, #4]
 800070e:	f7ff feba 	bl	8000486 <SX1278_SPIWrite>
 8000712:	e029      	b.n	8000768 <SX1278_config+0x1a8>
	} else {
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[module->LoRa_BW] << 4)
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	7c9b      	ldrb	r3, [r3, #18]
 8000718:	461a      	mov	r2, r3
 800071a:	4b28      	ldr	r3, [pc, #160]	; (80007bc <SX1278_config+0x1fc>)
 800071c:	5c9b      	ldrb	r3, [r3, r2]
 800071e:	011b      	lsls	r3, r3, #4
 8000720:	b2da      	uxtb	r2, r3
						+ (SX1278_CodingRate[module->LoRa_CR] << 1) + 0x00)); //Explicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	7cdb      	ldrb	r3, [r3, #19]
 8000726:	4619      	mov	r1, r3
 8000728:	4b25      	ldr	r3, [pc, #148]	; (80007c0 <SX1278_config+0x200>)
 800072a:	5c5b      	ldrb	r3, [r3, r1]
 800072c:	005b      	lsls	r3, r3, #1
 800072e:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8000730:	4413      	add	r3, r2
 8000732:	b2db      	uxtb	r3, r3
 8000734:	461a      	mov	r2, r3
 8000736:	211d      	movs	r1, #29
 8000738:	6878      	ldr	r0, [r7, #4]
 800073a:	f7ff fea4 	bl	8000486 <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[module->LoRa_SF] << 4)
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	7c5b      	ldrb	r3, [r3, #17]
 8000742:	461a      	mov	r2, r3
 8000744:	4b1c      	ldr	r3, [pc, #112]	; (80007b8 <SX1278_config+0x1f8>)
 8000746:	5c9b      	ldrb	r3, [r3, r2]
 8000748:	011b      	lsls	r3, r3, #4
 800074a:	b2da      	uxtb	r2, r3
						+ (SX1278_CRC_Sum[module->LoRa_CRC_sum] << 2) + 0x00)); //SFactor &  LNA gain set by the internal AGC loop
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	7d1b      	ldrb	r3, [r3, #20]
 8000750:	4619      	mov	r1, r3
 8000752:	4b1c      	ldr	r3, [pc, #112]	; (80007c4 <SX1278_config+0x204>)
 8000754:	5c5b      	ldrb	r3, [r3, r1]
 8000756:	009b      	lsls	r3, r3, #2
 8000758:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 800075a:	4413      	add	r3, r2
 800075c:	b2db      	uxtb	r3, r3
 800075e:	461a      	mov	r2, r3
 8000760:	211e      	movs	r1, #30
 8000762:	6878      	ldr	r0, [r7, #4]
 8000764:	f7ff fe8f 	bl	8000486 <SX1278_SPIWrite>
	}

	SX1278_SPIWrite(module, LR_RegModemConfig3, 0x04);
 8000768:	2204      	movs	r2, #4
 800076a:	2126      	movs	r1, #38	; 0x26
 800076c:	6878      	ldr	r0, [r7, #4]
 800076e:	f7ff fe8a 	bl	8000486 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegSymbTimeoutLsb, 0x08); //RegSymbTimeoutLsb Timeout = 0x3FF(Max)
 8000772:	2208      	movs	r2, #8
 8000774:	211f      	movs	r1, #31
 8000776:	6878      	ldr	r0, [r7, #4]
 8000778:	f7ff fe85 	bl	8000486 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleMsb, 0x00); //RegPreambleMsb
 800077c:	2200      	movs	r2, #0
 800077e:	2120      	movs	r1, #32
 8000780:	6878      	ldr	r0, [r7, #4]
 8000782:	f7ff fe80 	bl	8000486 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleLsb, 8); //RegPreambleLsb 8+4=12byte Preamble
 8000786:	2208      	movs	r2, #8
 8000788:	2121      	movs	r1, #33	; 0x21
 800078a:	6878      	ldr	r0, [r7, #4]
 800078c:	f7ff fe7b 	bl	8000486 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING2, 0x01); //RegDioMapping2 DIO5=00, DIO4=01
 8000790:	2201      	movs	r2, #1
 8000792:	2141      	movs	r1, #65	; 0x41
 8000794:	6878      	ldr	r0, [r7, #4]
 8000796:	f7ff fe76 	bl	8000486 <SX1278_SPIWrite>
	module->readBytes = 0;
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	2200      	movs	r2, #0
 800079e:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117
	SX1278_standby(module); //Entry standby mode
 80007a2:	6878      	ldr	r0, [r7, #4]
 80007a4:	f000 f810 	bl	80007c8 <SX1278_standby>
}
 80007a8:	bf00      	nop
 80007aa:	3718      	adds	r7, #24
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	01e84800 	.word	0x01e84800
 80007b4:	08004454 	.word	0x08004454
 80007b8:	08004458 	.word	0x08004458
 80007bc:	08004460 	.word	0x08004460
 80007c0:	0800446c 	.word	0x0800446c
 80007c4:	08004470 	.word	0x08004470

080007c8 <SX1278_standby>:

void SX1278_standby(SX1278_t *module) {
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x09);
 80007d0:	2209      	movs	r2, #9
 80007d2:	2101      	movs	r1, #1
 80007d4:	6878      	ldr	r0, [r7, #4]
 80007d6:	f7ff fe56 	bl	8000486 <SX1278_SPIWrite>
	module->status = STANDBY;
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	2201      	movs	r2, #1
 80007de:	759a      	strb	r2, [r3, #22]
}
 80007e0:	bf00      	nop
 80007e2:	3708      	adds	r7, #8
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}

080007e8 <SX1278_sleep>:

void SX1278_sleep(SX1278_t *module) {
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x08);
 80007f0:	2208      	movs	r2, #8
 80007f2:	2101      	movs	r1, #1
 80007f4:	6878      	ldr	r0, [r7, #4]
 80007f6:	f7ff fe46 	bl	8000486 <SX1278_SPIWrite>
	module->status = SLEEP;
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	2200      	movs	r2, #0
 80007fe:	759a      	strb	r2, [r3, #22]
}
 8000800:	bf00      	nop
 8000802:	3708      	adds	r7, #8
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}

08000808 <SX1278_entryLoRa>:

void SX1278_entryLoRa(SX1278_t *module) {
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x88);
 8000810:	2288      	movs	r2, #136	; 0x88
 8000812:	2101      	movs	r1, #1
 8000814:	6878      	ldr	r0, [r7, #4]
 8000816:	f7ff fe36 	bl	8000486 <SX1278_SPIWrite>
}
 800081a:	bf00      	nop
 800081c:	3708      	adds	r7, #8
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}

08000822 <SX1278_clearLoRaIrq>:

void SX1278_clearLoRaIrq(SX1278_t *module) {
 8000822:	b580      	push	{r7, lr}
 8000824:	b082      	sub	sp, #8
 8000826:	af00      	add	r7, sp, #0
 8000828:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegIrqFlags, 0xFF);
 800082a:	22ff      	movs	r2, #255	; 0xff
 800082c:	2112      	movs	r1, #18
 800082e:	6878      	ldr	r0, [r7, #4]
 8000830:	f7ff fe29 	bl	8000486 <SX1278_SPIWrite>
}
 8000834:	bf00      	nop
 8000836:	3708      	adds	r7, #8
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}

0800083c <SX1278_LoRaEntryRx>:

int SX1278_LoRaEntryRx(SX1278_t *module, uint8_t length, uint32_t timeout) {
 800083c:	b580      	push	{r7, lr}
 800083e:	b086      	sub	sp, #24
 8000840:	af00      	add	r7, sp, #0
 8000842:	60f8      	str	r0, [r7, #12]
 8000844:	460b      	mov	r3, r1
 8000846:	607a      	str	r2, [r7, #4]
 8000848:	72fb      	strb	r3, [r7, #11]
	uint8_t addr;

	module->packetLength = length;
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	7afa      	ldrb	r2, [r7, #11]
 800084e:	755a      	strb	r2, [r3, #21]

	SX1278_config(module);		//Setting base parameter
 8000850:	68f8      	ldr	r0, [r7, #12]
 8000852:	f7ff feb5 	bl	80005c0 <SX1278_config>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x84);	//Normal and RX
 8000856:	2284      	movs	r2, #132	; 0x84
 8000858:	214d      	movs	r1, #77	; 0x4d
 800085a:	68f8      	ldr	r0, [r7, #12]
 800085c:	f7ff fe13 	bl	8000486 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0xFF);	//No FHSS
 8000860:	22ff      	movs	r2, #255	; 0xff
 8000862:	2124      	movs	r1, #36	; 0x24
 8000864:	68f8      	ldr	r0, [r7, #12]
 8000866:	f7ff fe0e 	bl	8000486 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x01);//DIO=00,DIO1=00,DIO2=00, DIO3=01
 800086a:	2201      	movs	r2, #1
 800086c:	2140      	movs	r1, #64	; 0x40
 800086e:	68f8      	ldr	r0, [r7, #12]
 8000870:	f7ff fe09 	bl	8000486 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0x3F);//Open RxDone interrupt & Timeout
 8000874:	223f      	movs	r2, #63	; 0x3f
 8000876:	2111      	movs	r1, #17
 8000878:	68f8      	ldr	r0, [r7, #12]
 800087a:	f7ff fe04 	bl	8000486 <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 800087e:	68f8      	ldr	r0, [r7, #12]
 8000880:	f7ff ffcf 	bl	8000822 <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length);//Payload Length 21byte(this register must difine when the data long of one byte in SF is 6)
 8000884:	7afb      	ldrb	r3, [r7, #11]
 8000886:	461a      	mov	r2, r3
 8000888:	2122      	movs	r1, #34	; 0x22
 800088a:	68f8      	ldr	r0, [r7, #12]
 800088c:	f7ff fdfb 	bl	8000486 <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoRxBaseAddr); //Read RxBaseAddr
 8000890:	210f      	movs	r1, #15
 8000892:	68f8      	ldr	r0, [r7, #12]
 8000894:	f7ff fdd8 	bl	8000448 <SX1278_SPIRead>
 8000898:	4603      	mov	r3, r0
 800089a:	75fb      	strb	r3, [r7, #23]
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr->FiFoAddrPtr
 800089c:	7dfb      	ldrb	r3, [r7, #23]
 800089e:	461a      	mov	r2, r3
 80008a0:	210d      	movs	r1, #13
 80008a2:	68f8      	ldr	r0, [r7, #12]
 80008a4:	f7ff fdef 	bl	8000486 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0x8d);	//Mode//Low Frequency Mode
 80008a8:	228d      	movs	r2, #141	; 0x8d
 80008aa:	2101      	movs	r1, #1
 80008ac:	68f8      	ldr	r0, [r7, #12]
 80008ae:	f7ff fdea 	bl	8000486 <SX1278_SPIWrite>
	//SX1278_SPIWrite(module, LR_RegOpMode,0x05);	//Continuous Rx Mode //High Frequency Mode
	module->readBytes = 0;
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	2200      	movs	r2, #0
 80008b6:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117

	while (1) {
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 80008ba:	2118      	movs	r1, #24
 80008bc:	68f8      	ldr	r0, [r7, #12]
 80008be:	f7ff fdc3 	bl	8000448 <SX1278_SPIRead>
 80008c2:	4603      	mov	r3, r0
 80008c4:	f003 0304 	and.w	r3, r3, #4
 80008c8:	2b04      	cmp	r3, #4
 80008ca:	d104      	bne.n	80008d6 <SX1278_LoRaEntryRx+0x9a>
			module->status = RX;
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	2203      	movs	r2, #3
 80008d0:	759a      	strb	r2, [r3, #22]
			return 1;
 80008d2:	2301      	movs	r3, #1
 80008d4:	e013      	b.n	80008fe <SX1278_LoRaEntryRx+0xc2>
		}
		if (--timeout == 0) {
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	3b01      	subs	r3, #1
 80008da:	607b      	str	r3, [r7, #4]
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d109      	bne.n	80008f6 <SX1278_LoRaEntryRx+0xba>
			SX1278_hw_Reset(module->hw);
 80008e2:	68fb      	ldr	r3, [r7, #12]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	4618      	mov	r0, r3
 80008e8:	f000 f967 	bl	8000bba <SX1278_hw_Reset>
			SX1278_config(module);
 80008ec:	68f8      	ldr	r0, [r7, #12]
 80008ee:	f7ff fe67 	bl	80005c0 <SX1278_config>
			return 0;
 80008f2:	2300      	movs	r3, #0
 80008f4:	e003      	b.n	80008fe <SX1278_LoRaEntryRx+0xc2>
		}
		SX1278_hw_DelayMs(1);
 80008f6:	2001      	movs	r0, #1
 80008f8:	f000 f9c9 	bl	8000c8e <SX1278_hw_DelayMs>
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 80008fc:	e7dd      	b.n	80008ba <SX1278_LoRaEntryRx+0x7e>
	}
}
 80008fe:	4618      	mov	r0, r3
 8000900:	3718      	adds	r7, #24
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}

08000906 <SX1278_LoRaRxPacket>:

uint8_t SX1278_LoRaRxPacket(SX1278_t *module) {
 8000906:	b580      	push	{r7, lr}
 8000908:	b084      	sub	sp, #16
 800090a:	af00      	add	r7, sp, #0
 800090c:	6078      	str	r0, [r7, #4]
	unsigned char addr;
	unsigned char packet_size;

	if (SX1278_hw_GetDIO0(module->hw)) {
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	4618      	mov	r0, r3
 8000914:	f000 f9c6 	bl	8000ca4 <SX1278_hw_GetDIO0>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d030      	beq.n	8000980 <SX1278_LoRaRxPacket+0x7a>
		memset(module->rxBuffer, 0x00, SX1278_MAX_PACKET);
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	3317      	adds	r3, #23
 8000922:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000926:	2100      	movs	r1, #0
 8000928:	4618      	mov	r0, r3
 800092a:	f002 fb57 	bl	8002fdc <memset>

		addr = SX1278_SPIRead(module, LR_RegFifoRxCurrentaddr); //last packet addr
 800092e:	2110      	movs	r1, #16
 8000930:	6878      	ldr	r0, [r7, #4]
 8000932:	f7ff fd89 	bl	8000448 <SX1278_SPIRead>
 8000936:	4603      	mov	r3, r0
 8000938:	73bb      	strb	r3, [r7, #14]
		SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr -> FiFoAddrPtr
 800093a:	7bbb      	ldrb	r3, [r7, #14]
 800093c:	461a      	mov	r2, r3
 800093e:	210d      	movs	r1, #13
 8000940:	6878      	ldr	r0, [r7, #4]
 8000942:	f7ff fda0 	bl	8000486 <SX1278_SPIWrite>

		if (module->LoRa_SF == SX1278_LORA_SF_6) { //When SpreadFactor is six,will used Implicit Header mode(Excluding internal packet length)
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	7c5b      	ldrb	r3, [r3, #17]
 800094a:	2b00      	cmp	r3, #0
 800094c:	d103      	bne.n	8000956 <SX1278_LoRaRxPacket+0x50>
			packet_size = module->packetLength;
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	7d5b      	ldrb	r3, [r3, #21]
 8000952:	73fb      	strb	r3, [r7, #15]
 8000954:	e005      	b.n	8000962 <SX1278_LoRaRxPacket+0x5c>
		} else {
			packet_size = SX1278_SPIRead(module, LR_RegRxNbBytes); //Number for received bytes
 8000956:	2113      	movs	r1, #19
 8000958:	6878      	ldr	r0, [r7, #4]
 800095a:	f7ff fd75 	bl	8000448 <SX1278_SPIRead>
 800095e:	4603      	mov	r3, r0
 8000960:	73fb      	strb	r3, [r7, #15]
		}

		SX1278_SPIBurstRead(module, 0x00, module->rxBuffer, packet_size);
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	f103 0217 	add.w	r2, r3, #23
 8000968:	7bfb      	ldrb	r3, [r7, #15]
 800096a:	2100      	movs	r1, #0
 800096c:	6878      	ldr	r0, [r7, #4]
 800096e:	f7ff fdb3 	bl	80004d8 <SX1278_SPIBurstRead>
		module->readBytes = packet_size;
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	7bfa      	ldrb	r2, [r7, #15]
 8000976:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117
		SX1278_clearLoRaIrq(module);
 800097a:	6878      	ldr	r0, [r7, #4]
 800097c:	f7ff ff51 	bl	8000822 <SX1278_clearLoRaIrq>
	}
	return module->readBytes;
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	f893 3117 	ldrb.w	r3, [r3, #279]	; 0x117
}
 8000986:	4618      	mov	r0, r3
 8000988:	3710      	adds	r7, #16
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}

0800098e <SX1278_LoRaEntryTx>:

int SX1278_LoRaEntryTx(SX1278_t *module, uint8_t length, uint32_t timeout) {
 800098e:	b580      	push	{r7, lr}
 8000990:	b086      	sub	sp, #24
 8000992:	af00      	add	r7, sp, #0
 8000994:	60f8      	str	r0, [r7, #12]
 8000996:	460b      	mov	r3, r1
 8000998:	607a      	str	r2, [r7, #4]
 800099a:	72fb      	strb	r3, [r7, #11]
	uint8_t addr;
	uint8_t temp;

	module->packetLength = length;
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	7afa      	ldrb	r2, [r7, #11]
 80009a0:	755a      	strb	r2, [r3, #21]

	SX1278_config(module); //setting base parameter
 80009a2:	68f8      	ldr	r0, [r7, #12]
 80009a4:	f7ff fe0c 	bl	80005c0 <SX1278_config>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x87);	//Tx for 20dBm
 80009a8:	2287      	movs	r2, #135	; 0x87
 80009aa:	214d      	movs	r1, #77	; 0x4d
 80009ac:	68f8      	ldr	r0, [r7, #12]
 80009ae:	f7ff fd6a 	bl	8000486 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0x00); //RegHopPeriod NO FHSS
 80009b2:	2200      	movs	r2, #0
 80009b4:	2124      	movs	r1, #36	; 0x24
 80009b6:	68f8      	ldr	r0, [r7, #12]
 80009b8:	f7ff fd65 	bl	8000486 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x41); //DIO0=01, DIO1=00,DIO2=00, DIO3=01
 80009bc:	2241      	movs	r2, #65	; 0x41
 80009be:	2140      	movs	r1, #64	; 0x40
 80009c0:	68f8      	ldr	r0, [r7, #12]
 80009c2:	f7ff fd60 	bl	8000486 <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 80009c6:	68f8      	ldr	r0, [r7, #12]
 80009c8:	f7ff ff2b 	bl	8000822 <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0xF7); //Open TxDone interrupt
 80009cc:	22f7      	movs	r2, #247	; 0xf7
 80009ce:	2111      	movs	r1, #17
 80009d0:	68f8      	ldr	r0, [r7, #12]
 80009d2:	f7ff fd58 	bl	8000486 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length); //RegPayloadLength 21byte
 80009d6:	7afb      	ldrb	r3, [r7, #11]
 80009d8:	461a      	mov	r2, r3
 80009da:	2122      	movs	r1, #34	; 0x22
 80009dc:	68f8      	ldr	r0, [r7, #12]
 80009de:	f7ff fd52 	bl	8000486 <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoTxBaseAddr); //RegFiFoTxBaseAddr
 80009e2:	210e      	movs	r1, #14
 80009e4:	68f8      	ldr	r0, [r7, #12]
 80009e6:	f7ff fd2f 	bl	8000448 <SX1278_SPIRead>
 80009ea:	4603      	mov	r3, r0
 80009ec:	75fb      	strb	r3, [r7, #23]
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RegFifoAddrPtr
 80009ee:	7dfb      	ldrb	r3, [r7, #23]
 80009f0:	461a      	mov	r2, r3
 80009f2:	210d      	movs	r1, #13
 80009f4:	68f8      	ldr	r0, [r7, #12]
 80009f6:	f7ff fd46 	bl	8000486 <SX1278_SPIWrite>

	while (1) {
		temp = SX1278_SPIRead(module, LR_RegPayloadLength);
 80009fa:	2122      	movs	r1, #34	; 0x22
 80009fc:	68f8      	ldr	r0, [r7, #12]
 80009fe:	f7ff fd23 	bl	8000448 <SX1278_SPIRead>
 8000a02:	4603      	mov	r3, r0
 8000a04:	75bb      	strb	r3, [r7, #22]
		if (temp == length) {
 8000a06:	7dba      	ldrb	r2, [r7, #22]
 8000a08:	7afb      	ldrb	r3, [r7, #11]
 8000a0a:	429a      	cmp	r2, r3
 8000a0c:	d104      	bne.n	8000a18 <SX1278_LoRaEntryTx+0x8a>
			module->status = TX;
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	2202      	movs	r2, #2
 8000a12:	759a      	strb	r2, [r3, #22]
			return 1;
 8000a14:	2301      	movs	r3, #1
 8000a16:	e00e      	b.n	8000a36 <SX1278_LoRaEntryTx+0xa8>
		}

		if (--timeout == 0) {
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	3b01      	subs	r3, #1
 8000a1c:	607b      	str	r3, [r7, #4]
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d1ea      	bne.n	80009fa <SX1278_LoRaEntryTx+0x6c>
			SX1278_hw_Reset(module->hw);
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f000 f8c6 	bl	8000bba <SX1278_hw_Reset>
			SX1278_config(module);
 8000a2e:	68f8      	ldr	r0, [r7, #12]
 8000a30:	f7ff fdc6 	bl	80005c0 <SX1278_config>
			return 0;
 8000a34:	2300      	movs	r3, #0
		}
	}
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	3718      	adds	r7, #24
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}

08000a3e <SX1278_LoRaTxPacket>:

int SX1278_LoRaTxPacket(SX1278_t *module, uint8_t *txBuffer, uint8_t length,
		uint32_t timeout) {
 8000a3e:	b580      	push	{r7, lr}
 8000a40:	b084      	sub	sp, #16
 8000a42:	af00      	add	r7, sp, #0
 8000a44:	60f8      	str	r0, [r7, #12]
 8000a46:	60b9      	str	r1, [r7, #8]
 8000a48:	603b      	str	r3, [r7, #0]
 8000a4a:	4613      	mov	r3, r2
 8000a4c:	71fb      	strb	r3, [r7, #7]
	SX1278_SPIBurstWrite(module, 0x00, txBuffer, length);
 8000a4e:	79fb      	ldrb	r3, [r7, #7]
 8000a50:	68ba      	ldr	r2, [r7, #8]
 8000a52:	2100      	movs	r1, #0
 8000a54:	68f8      	ldr	r0, [r7, #12]
 8000a56:	f7ff fd78 	bl	800054a <SX1278_SPIBurstWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0x8b);	//Tx Mode
 8000a5a:	228b      	movs	r2, #139	; 0x8b
 8000a5c:	2101      	movs	r1, #1
 8000a5e:	68f8      	ldr	r0, [r7, #12]
 8000a60:	f7ff fd11 	bl	8000486 <SX1278_SPIWrite>
	while (1) {
		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f000 f91b 	bl	8000ca4 <SX1278_hw_GetDIO0>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d00b      	beq.n	8000a8c <SX1278_LoRaTxPacket+0x4e>
			SX1278_SPIRead(module, LR_RegIrqFlags);
 8000a74:	2112      	movs	r1, #18
 8000a76:	68f8      	ldr	r0, [r7, #12]
 8000a78:	f7ff fce6 	bl	8000448 <SX1278_SPIRead>
			SX1278_clearLoRaIrq(module); //Clear irq
 8000a7c:	68f8      	ldr	r0, [r7, #12]
 8000a7e:	f7ff fed0 	bl	8000822 <SX1278_clearLoRaIrq>
			SX1278_standby(module); //Entry Standby mode
 8000a82:	68f8      	ldr	r0, [r7, #12]
 8000a84:	f7ff fea0 	bl	80007c8 <SX1278_standby>
			return 1;
 8000a88:	2301      	movs	r3, #1
 8000a8a:	e013      	b.n	8000ab4 <SX1278_LoRaTxPacket+0x76>
		}

		if (--timeout == 0) {
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	3b01      	subs	r3, #1
 8000a90:	603b      	str	r3, [r7, #0]
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d109      	bne.n	8000aac <SX1278_LoRaTxPacket+0x6e>
			SX1278_hw_Reset(module->hw);
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f000 f88c 	bl	8000bba <SX1278_hw_Reset>
			SX1278_config(module);
 8000aa2:	68f8      	ldr	r0, [r7, #12]
 8000aa4:	f7ff fd8c 	bl	80005c0 <SX1278_config>
			return 0;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	e003      	b.n	8000ab4 <SX1278_LoRaTxPacket+0x76>
		}
		SX1278_hw_DelayMs(1);
 8000aac:	2001      	movs	r0, #1
 8000aae:	f000 f8ee 	bl	8000c8e <SX1278_hw_DelayMs>
		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 8000ab2:	e7d7      	b.n	8000a64 <SX1278_LoRaTxPacket+0x26>
	}
}
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	3710      	adds	r7, #16
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}

08000abc <SX1278_init>:

void SX1278_init(SX1278_t *module, uint64_t frequency, uint8_t power,
		uint8_t LoRa_SF, uint8_t LoRa_BW, uint8_t LoRa_CR,
		uint8_t LoRa_CRC_sum, uint8_t packetLength) {
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b084      	sub	sp, #16
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	60f8      	str	r0, [r7, #12]
 8000ac4:	e9c7 2300 	strd	r2, r3, [r7]
	SX1278_hw_init(module->hw);
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4618      	mov	r0, r3
 8000ace:	f000 f848 	bl	8000b62 <SX1278_hw_init>
	module->frequency = frequency;
 8000ad2:	68f9      	ldr	r1, [r7, #12]
 8000ad4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000ad8:	e9c1 2302 	strd	r2, r3, [r1, #8]
	module->power = power;
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	7e3a      	ldrb	r2, [r7, #24]
 8000ae0:	741a      	strb	r2, [r3, #16]
	module->LoRa_SF = LoRa_SF;
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	7f3a      	ldrb	r2, [r7, #28]
 8000ae6:	745a      	strb	r2, [r3, #17]
	module->LoRa_BW = LoRa_BW;
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000aee:	749a      	strb	r2, [r3, #18]
	module->LoRa_CR = LoRa_CR;
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000af6:	74da      	strb	r2, [r3, #19]
	module->LoRa_CRC_sum = LoRa_CRC_sum;
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8000afe:	751a      	strb	r2, [r3, #20]
	module->packetLength = packetLength;
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8000b06:	755a      	strb	r2, [r3, #21]
	SX1278_config(module);
 8000b08:	68f8      	ldr	r0, [r7, #12]
 8000b0a:	f7ff fd59 	bl	80005c0 <SX1278_config>
}
 8000b0e:	bf00      	nop
 8000b10:	3710      	adds	r7, #16
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}

08000b16 <SX1278_read>:

uint8_t SX1278_available(SX1278_t *module) {
	return SX1278_LoRaRxPacket(module);
}

uint8_t SX1278_read(SX1278_t *module, uint8_t *rxBuf, uint8_t length) {
 8000b16:	b580      	push	{r7, lr}
 8000b18:	b084      	sub	sp, #16
 8000b1a:	af00      	add	r7, sp, #0
 8000b1c:	60f8      	str	r0, [r7, #12]
 8000b1e:	60b9      	str	r1, [r7, #8]
 8000b20:	4613      	mov	r3, r2
 8000b22:	71fb      	strb	r3, [r7, #7]
	if (length != module->readBytes)
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	f893 3117 	ldrb.w	r3, [r3, #279]	; 0x117
 8000b2a:	79fa      	ldrb	r2, [r7, #7]
 8000b2c:	429a      	cmp	r2, r3
 8000b2e:	d003      	beq.n	8000b38 <SX1278_read+0x22>
		length = module->readBytes;
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	f893 3117 	ldrb.w	r3, [r3, #279]	; 0x117
 8000b36:	71fb      	strb	r3, [r7, #7]
	memcpy(rxBuf, module->rxBuffer, length);
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	3317      	adds	r3, #23
 8000b3c:	79fa      	ldrb	r2, [r7, #7]
 8000b3e:	4619      	mov	r1, r3
 8000b40:	68b8      	ldr	r0, [r7, #8]
 8000b42:	f002 fa3d 	bl	8002fc0 <memcpy>
	rxBuf[length] = '\0';
 8000b46:	79fb      	ldrb	r3, [r7, #7]
 8000b48:	68ba      	ldr	r2, [r7, #8]
 8000b4a:	4413      	add	r3, r2
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	701a      	strb	r2, [r3, #0]
	module->readBytes = 0;
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	2200      	movs	r2, #0
 8000b54:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117
	return length;
 8000b58:	79fb      	ldrb	r3, [r7, #7]
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	3710      	adds	r7, #16
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}

08000b62 <SX1278_hw_init>:
#include <string.h>

#include "gpio.h"
#include "spi.h"

__weak void SX1278_hw_init(SX1278_hw_t *hw) {
 8000b62:	b580      	push	{r7, lr}
 8000b64:	b082      	sub	sp, #8
 8000b66:	af00      	add	r7, sp, #0
 8000b68:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 8000b6a:	2101      	movs	r1, #1
 8000b6c:	6878      	ldr	r0, [r7, #4]
 8000b6e:	f000 f80d 	bl	8000b8c <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	6858      	ldr	r0, [r3, #4]
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	b29b      	uxth	r3, r3
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	4619      	mov	r1, r3
 8000b80:	f000 fff3 	bl	8001b6a <HAL_GPIO_WritePin>
}
 8000b84:	bf00      	nop
 8000b86:	3708      	adds	r7, #8
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}

08000b8c <SX1278_hw_SetNSS>:

__weak void SX1278_hw_SetNSS(SX1278_hw_t *hw, int value) {
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
 8000b94:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(hw->nss.port, hw->nss.pin,
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	6958      	ldr	r0, [r3, #20]
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	691b      	ldr	r3, [r3, #16]
 8000b9e:	b299      	uxth	r1, r3
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	2b01      	cmp	r3, #1
 8000ba4:	bf0c      	ite	eq
 8000ba6:	2301      	moveq	r3, #1
 8000ba8:	2300      	movne	r3, #0
 8000baa:	b2db      	uxtb	r3, r3
 8000bac:	461a      	mov	r2, r3
 8000bae:	f000 ffdc 	bl	8001b6a <HAL_GPIO_WritePin>
			(value == 1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 8000bb2:	bf00      	nop
 8000bb4:	3708      	adds	r7, #8
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}

08000bba <SX1278_hw_Reset>:

__weak void SX1278_hw_Reset(SX1278_hw_t *hw) {
 8000bba:	b580      	push	{r7, lr}
 8000bbc:	b082      	sub	sp, #8
 8000bbe:	af00      	add	r7, sp, #0
 8000bc0:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 8000bc2:	2101      	movs	r1, #1
 8000bc4:	6878      	ldr	r0, [r7, #4]
 8000bc6:	f7ff ffe1 	bl	8000b8c <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_RESET);
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	6858      	ldr	r0, [r3, #4]
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	b29b      	uxth	r3, r3
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	f000 ffc7 	bl	8001b6a <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(1);
 8000bdc:	2001      	movs	r0, #1
 8000bde:	f000 f856 	bl	8000c8e <SX1278_hw_DelayMs>

	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	6858      	ldr	r0, [r3, #4]
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	b29b      	uxth	r3, r3
 8000bec:	2201      	movs	r2, #1
 8000bee:	4619      	mov	r1, r3
 8000bf0:	f000 ffbb 	bl	8001b6a <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(100);
 8000bf4:	2064      	movs	r0, #100	; 0x64
 8000bf6:	f000 f84a 	bl	8000c8e <SX1278_hw_DelayMs>
}
 8000bfa:	bf00      	nop
 8000bfc:	3708      	adds	r7, #8
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}

08000c02 <SX1278_hw_SPICommand>:

__weak void SX1278_hw_SPICommand(SX1278_hw_t *hw, uint8_t cmd) {
 8000c02:	b580      	push	{r7, lr}
 8000c04:	b082      	sub	sp, #8
 8000c06:	af00      	add	r7, sp, #0
 8000c08:	6078      	str	r0, [r7, #4]
 8000c0a:	460b      	mov	r3, r1
 8000c0c:	70fb      	strb	r3, [r7, #3]
	SX1278_hw_SetNSS(hw, 0);
 8000c0e:	2100      	movs	r1, #0
 8000c10:	6878      	ldr	r0, [r7, #4]
 8000c12:	f7ff ffbb 	bl	8000b8c <SX1278_hw_SetNSS>
	HAL_SPI_Transmit(hw->spi, &cmd, 1, 1000);
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	6998      	ldr	r0, [r3, #24]
 8000c1a:	1cf9      	adds	r1, r7, #3
 8000c1c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c20:	2201      	movs	r2, #1
 8000c22:	f001 fc59 	bl	80024d8 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 8000c26:	bf00      	nop
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	699b      	ldr	r3, [r3, #24]
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f001 ff31 	bl	8002a94 <HAL_SPI_GetState>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b01      	cmp	r3, #1
 8000c36:	d1f7      	bne.n	8000c28 <SX1278_hw_SPICommand+0x26>
		;
}
 8000c38:	bf00      	nop
 8000c3a:	bf00      	nop
 8000c3c:	3708      	adds	r7, #8
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}

08000c42 <SX1278_hw_SPIReadByte>:

__weak uint8_t SX1278_hw_SPIReadByte(SX1278_hw_t *hw) {
 8000c42:	b580      	push	{r7, lr}
 8000c44:	b086      	sub	sp, #24
 8000c46:	af02      	add	r7, sp, #8
 8000c48:	6078      	str	r0, [r7, #4]
	uint8_t txByte = 0x00;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	73fb      	strb	r3, [r7, #15]
	uint8_t rxByte = 0x00;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	73bb      	strb	r3, [r7, #14]

	SX1278_hw_SetNSS(hw, 0);
 8000c52:	2100      	movs	r1, #0
 8000c54:	6878      	ldr	r0, [r7, #4]
 8000c56:	f7ff ff99 	bl	8000b8c <SX1278_hw_SetNSS>
	HAL_SPI_TransmitReceive(hw->spi, &txByte, &rxByte, 1, 1000);
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	6998      	ldr	r0, [r3, #24]
 8000c5e:	f107 020e 	add.w	r2, r7, #14
 8000c62:	f107 010f 	add.w	r1, r7, #15
 8000c66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c6a:	9300      	str	r3, [sp, #0]
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	f001 fd6f 	bl	8002750 <HAL_SPI_TransmitReceive>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 8000c72:	bf00      	nop
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	699b      	ldr	r3, [r3, #24]
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f001 ff0b 	bl	8002a94 <HAL_SPI_GetState>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b01      	cmp	r3, #1
 8000c82:	d1f7      	bne.n	8000c74 <SX1278_hw_SPIReadByte+0x32>
		;
	return rxByte;
 8000c84:	7bbb      	ldrb	r3, [r7, #14]
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	3710      	adds	r7, #16
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}

08000c8e <SX1278_hw_DelayMs>:

__weak void SX1278_hw_DelayMs(uint32_t msec) {
 8000c8e:	b580      	push	{r7, lr}
 8000c90:	b082      	sub	sp, #8
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	6078      	str	r0, [r7, #4]
	HAL_Delay(msec);
 8000c96:	6878      	ldr	r0, [r7, #4]
 8000c98:	f000 fcc4 	bl	8001624 <HAL_Delay>
}
 8000c9c:	bf00      	nop
 8000c9e:	3708      	adds	r7, #8
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}

08000ca4 <SX1278_hw_GetDIO0>:

__weak int SX1278_hw_GetDIO0(SX1278_hw_t *hw) {
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
	return (HAL_GPIO_ReadPin(hw->dio0.port, hw->dio0.pin) == GPIO_PIN_SET);
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	68da      	ldr	r2, [r3, #12]
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	689b      	ldr	r3, [r3, #8]
 8000cb4:	b29b      	uxth	r3, r3
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	4610      	mov	r0, r2
 8000cba:	f000 ff3f 	bl	8001b3c <HAL_GPIO_ReadPin>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b01      	cmp	r3, #1
 8000cc2:	bf0c      	ite	eq
 8000cc4:	2301      	moveq	r3, #1
 8000cc6:	2300      	movne	r3, #0
 8000cc8:	b2db      	uxtb	r3, r3
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	3708      	adds	r7, #8
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
	...

08000cd4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b088      	sub	sp, #32
 8000cd8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cda:	f107 0310 	add.w	r3, r7, #16
 8000cde:	2200      	movs	r2, #0
 8000ce0:	601a      	str	r2, [r3, #0]
 8000ce2:	605a      	str	r2, [r3, #4]
 8000ce4:	609a      	str	r2, [r3, #8]
 8000ce6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ce8:	4b3d      	ldr	r3, [pc, #244]	; (8000de0 <MX_GPIO_Init+0x10c>)
 8000cea:	699b      	ldr	r3, [r3, #24]
 8000cec:	4a3c      	ldr	r2, [pc, #240]	; (8000de0 <MX_GPIO_Init+0x10c>)
 8000cee:	f043 0310 	orr.w	r3, r3, #16
 8000cf2:	6193      	str	r3, [r2, #24]
 8000cf4:	4b3a      	ldr	r3, [pc, #232]	; (8000de0 <MX_GPIO_Init+0x10c>)
 8000cf6:	699b      	ldr	r3, [r3, #24]
 8000cf8:	f003 0310 	and.w	r3, r3, #16
 8000cfc:	60fb      	str	r3, [r7, #12]
 8000cfe:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d00:	4b37      	ldr	r3, [pc, #220]	; (8000de0 <MX_GPIO_Init+0x10c>)
 8000d02:	699b      	ldr	r3, [r3, #24]
 8000d04:	4a36      	ldr	r2, [pc, #216]	; (8000de0 <MX_GPIO_Init+0x10c>)
 8000d06:	f043 0320 	orr.w	r3, r3, #32
 8000d0a:	6193      	str	r3, [r2, #24]
 8000d0c:	4b34      	ldr	r3, [pc, #208]	; (8000de0 <MX_GPIO_Init+0x10c>)
 8000d0e:	699b      	ldr	r3, [r3, #24]
 8000d10:	f003 0320 	and.w	r3, r3, #32
 8000d14:	60bb      	str	r3, [r7, #8]
 8000d16:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d18:	4b31      	ldr	r3, [pc, #196]	; (8000de0 <MX_GPIO_Init+0x10c>)
 8000d1a:	699b      	ldr	r3, [r3, #24]
 8000d1c:	4a30      	ldr	r2, [pc, #192]	; (8000de0 <MX_GPIO_Init+0x10c>)
 8000d1e:	f043 0304 	orr.w	r3, r3, #4
 8000d22:	6193      	str	r3, [r2, #24]
 8000d24:	4b2e      	ldr	r3, [pc, #184]	; (8000de0 <MX_GPIO_Init+0x10c>)
 8000d26:	699b      	ldr	r3, [r3, #24]
 8000d28:	f003 0304 	and.w	r3, r3, #4
 8000d2c:	607b      	str	r3, [r7, #4]
 8000d2e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d30:	4b2b      	ldr	r3, [pc, #172]	; (8000de0 <MX_GPIO_Init+0x10c>)
 8000d32:	699b      	ldr	r3, [r3, #24]
 8000d34:	4a2a      	ldr	r2, [pc, #168]	; (8000de0 <MX_GPIO_Init+0x10c>)
 8000d36:	f043 0308 	orr.w	r3, r3, #8
 8000d3a:	6193      	str	r3, [r2, #24]
 8000d3c:	4b28      	ldr	r3, [pc, #160]	; (8000de0 <MX_GPIO_Init+0x10c>)
 8000d3e:	699b      	ldr	r3, [r3, #24]
 8000d40:	f003 0308 	and.w	r3, r3, #8
 8000d44:	603b      	str	r3, [r7, #0]
 8000d46:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000d48:	2200      	movs	r2, #0
 8000d4a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d4e:	4825      	ldr	r0, [pc, #148]	; (8000de4 <MX_GPIO_Init+0x110>)
 8000d50:	f000 ff0b 	bl	8001b6a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_SET);
 8000d54:	2201      	movs	r2, #1
 8000d56:	2110      	movs	r1, #16
 8000d58:	4823      	ldr	r0, [pc, #140]	; (8000de8 <MX_GPIO_Init+0x114>)
 8000d5a:	f000 ff06 	bl	8001b6a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RESET_GPIO_Port, RESET_Pin, GPIO_PIN_RESET);
 8000d5e:	2200      	movs	r2, #0
 8000d60:	2102      	movs	r1, #2
 8000d62:	4822      	ldr	r0, [pc, #136]	; (8000dec <MX_GPIO_Init+0x118>)
 8000d64:	f000 ff01 	bl	8001b6a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000d68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d6c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d6e:	2301      	movs	r3, #1
 8000d70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000d72:	2302      	movs	r3, #2
 8000d74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d76:	2302      	movs	r3, #2
 8000d78:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000d7a:	f107 0310 	add.w	r3, r7, #16
 8000d7e:	4619      	mov	r1, r3
 8000d80:	4818      	ldr	r0, [pc, #96]	; (8000de4 <MX_GPIO_Init+0x110>)
 8000d82:	f000 fd57 	bl	8001834 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NSS_Pin;
 8000d86:	2310      	movs	r3, #16
 8000d88:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d92:	2302      	movs	r3, #2
 8000d94:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NSS_GPIO_Port, &GPIO_InitStruct);
 8000d96:	f107 0310 	add.w	r3, r7, #16
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	4812      	ldr	r0, [pc, #72]	; (8000de8 <MX_GPIO_Init+0x114>)
 8000d9e:	f000 fd49 	bl	8001834 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = DIO0_Pin|MODE_Pin;
 8000da2:	2305      	movs	r3, #5
 8000da4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000da6:	2300      	movs	r3, #0
 8000da8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000daa:	2300      	movs	r3, #0
 8000dac:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dae:	f107 0310 	add.w	r3, r7, #16
 8000db2:	4619      	mov	r1, r3
 8000db4:	480d      	ldr	r0, [pc, #52]	; (8000dec <MX_GPIO_Init+0x118>)
 8000db6:	f000 fd3d 	bl	8001834 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RESET_Pin;
 8000dba:	2302      	movs	r3, #2
 8000dbc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc6:	2302      	movs	r3, #2
 8000dc8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RESET_GPIO_Port, &GPIO_InitStruct);
 8000dca:	f107 0310 	add.w	r3, r7, #16
 8000dce:	4619      	mov	r1, r3
 8000dd0:	4806      	ldr	r0, [pc, #24]	; (8000dec <MX_GPIO_Init+0x118>)
 8000dd2:	f000 fd2f 	bl	8001834 <HAL_GPIO_Init>

}
 8000dd6:	bf00      	nop
 8000dd8:	3720      	adds	r7, #32
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	40021000 	.word	0x40021000
 8000de4:	40011000 	.word	0x40011000
 8000de8:	40010800 	.word	0x40010800
 8000dec:	40010c00 	.word	0x40010c00

08000df0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b083      	sub	sp, #12
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000df8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000dfc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000e00:	f003 0301 	and.w	r3, r3, #1
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d013      	beq.n	8000e30 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000e08:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000e0c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000e10:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d00b      	beq.n	8000e30 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000e18:	e000      	b.n	8000e1c <ITM_SendChar+0x2c>
    {
      __NOP();
 8000e1a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000e1c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d0f9      	beq.n	8000e1a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000e26:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000e2a:	687a      	ldr	r2, [r7, #4]
 8000e2c:	b2d2      	uxtb	r2, r2
 8000e2e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000e30:	687b      	ldr	r3, [r7, #4]
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	370c      	adds	r7, #12
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bc80      	pop	{r7}
 8000e3a:	4770      	bx	lr

08000e3c <_write>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
int _write(int file, char *ptr, int len) {
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b086      	sub	sp, #24
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	60f8      	str	r0, [r7, #12]
 8000e44:	60b9      	str	r1, [r7, #8]
 8000e46:	607a      	str	r2, [r7, #4]
	int i;
	HAL_UART_Transmit(&huart2, (uint8_t*) ptr, len, 50);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	b29a      	uxth	r2, r3
 8000e4c:	2332      	movs	r3, #50	; 0x32
 8000e4e:	68b9      	ldr	r1, [r7, #8]
 8000e50:	480c      	ldr	r0, [pc, #48]	; (8000e84 <_write+0x48>)
 8000e52:	f001 ff20 	bl	8002c96 <HAL_UART_Transmit>
	for (i = 0; i < len; i++) {
 8000e56:	2300      	movs	r3, #0
 8000e58:	617b      	str	r3, [r7, #20]
 8000e5a:	e009      	b.n	8000e70 <_write+0x34>
		ITM_SendChar(*ptr++);
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	1c5a      	adds	r2, r3, #1
 8000e60:	60ba      	str	r2, [r7, #8]
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	4618      	mov	r0, r3
 8000e66:	f7ff ffc3 	bl	8000df0 <ITM_SendChar>
	for (i = 0; i < len; i++) {
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	3301      	adds	r3, #1
 8000e6e:	617b      	str	r3, [r7, #20]
 8000e70:	697a      	ldr	r2, [r7, #20]
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	429a      	cmp	r2, r3
 8000e76:	dbf1      	blt.n	8000e5c <_write+0x20>
	}
	return len;
 8000e78:	687b      	ldr	r3, [r7, #4]
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	3718      	adds	r7, #24
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	20000438 	.word	0x20000438

08000e88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b086      	sub	sp, #24
 8000e8c:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e8e:	f000 fb67 	bl	8001560 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e92:	f000 f91f 	bl	80010d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e96:	f7ff ff1d 	bl	8000cd4 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000e9a:	f000 f965 	bl	8001168 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000e9e:	f000 fac5 	bl	800142c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  //master = HAL_GPIO_ReadPin(MODE_GPIO_Port, MODE_Pin);
  	if (master == 1) {
 8000ea2:	4b75      	ldr	r3, [pc, #468]	; (8001078 <main+0x1f0>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	2b01      	cmp	r3, #1
 8000ea8:	d103      	bne.n	8000eb2 <main+0x2a>
  		printf("Mode: Master-BluePill\r\n");
 8000eaa:	4874      	ldr	r0, [pc, #464]	; (800107c <main+0x1f4>)
 8000eac:	f002 f924 	bl	80030f8 <puts>
 8000eb0:	e002      	b.n	8000eb8 <main+0x30>
  		//HAL_GPIO_WritePin(MODE_GPIO_Port, MODE_Pin, GPIO_PIN_RESET);
  	} else {
  		printf("Mode: Slave-BluePill\r\n");
 8000eb2:	4873      	ldr	r0, [pc, #460]	; (8001080 <main+0x1f8>)
 8000eb4:	f002 f920 	bl	80030f8 <puts>
  		//HAL_GPIO_WritePin(MODE_GPIO_Port, MODE_Pin, GPIO_PIN_SET);
  	}

  	//initialize LoRa module
  	SX1278_hw.dio0.port = DIO0_GPIO_Port;
 8000eb8:	4b72      	ldr	r3, [pc, #456]	; (8001084 <main+0x1fc>)
 8000eba:	4a73      	ldr	r2, [pc, #460]	; (8001088 <main+0x200>)
 8000ebc:	60da      	str	r2, [r3, #12]
  	SX1278_hw.dio0.pin = DIO0_Pin;
 8000ebe:	4b71      	ldr	r3, [pc, #452]	; (8001084 <main+0x1fc>)
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	609a      	str	r2, [r3, #8]
  	SX1278_hw.nss.port = NSS_GPIO_Port;
 8000ec4:	4b6f      	ldr	r3, [pc, #444]	; (8001084 <main+0x1fc>)
 8000ec6:	4a71      	ldr	r2, [pc, #452]	; (800108c <main+0x204>)
 8000ec8:	615a      	str	r2, [r3, #20]
  	SX1278_hw.nss.pin = NSS_Pin;
 8000eca:	4b6e      	ldr	r3, [pc, #440]	; (8001084 <main+0x1fc>)
 8000ecc:	2210      	movs	r2, #16
 8000ece:	611a      	str	r2, [r3, #16]
  	SX1278_hw.reset.port = RESET_GPIO_Port;
 8000ed0:	4b6c      	ldr	r3, [pc, #432]	; (8001084 <main+0x1fc>)
 8000ed2:	4a6d      	ldr	r2, [pc, #436]	; (8001088 <main+0x200>)
 8000ed4:	605a      	str	r2, [r3, #4]
  	SX1278_hw.reset.pin = RESET_Pin;
 8000ed6:	4b6b      	ldr	r3, [pc, #428]	; (8001084 <main+0x1fc>)
 8000ed8:	2202      	movs	r2, #2
 8000eda:	601a      	str	r2, [r3, #0]
  	SX1278_hw.spi = &hspi1;
 8000edc:	4b69      	ldr	r3, [pc, #420]	; (8001084 <main+0x1fc>)
 8000ede:	4a6c      	ldr	r2, [pc, #432]	; (8001090 <main+0x208>)
 8000ee0:	619a      	str	r2, [r3, #24]

  	SX1278.hw = &SX1278_hw;
 8000ee2:	4b6c      	ldr	r3, [pc, #432]	; (8001094 <main+0x20c>)
 8000ee4:	4a67      	ldr	r2, [pc, #412]	; (8001084 <main+0x1fc>)
 8000ee6:	601a      	str	r2, [r3, #0]

  	printf("Configuring LoRa module\r\n");
 8000ee8:	486b      	ldr	r0, [pc, #428]	; (8001098 <main+0x210>)
 8000eea:	f002 f905 	bl	80030f8 <puts>
  	SX1278_init(&SX1278, 868000000, SX1278_POWER_17DBM, SX1278_LORA_SF_7,
 8000eee:	230a      	movs	r3, #10
 8000ef0:	9305      	str	r3, [sp, #20]
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	9304      	str	r3, [sp, #16]
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	9303      	str	r3, [sp, #12]
 8000efa:	2307      	movs	r3, #7
 8000efc:	9302      	str	r3, [sp, #8]
 8000efe:	2301      	movs	r3, #1
 8000f00:	9301      	str	r3, [sp, #4]
 8000f02:	2301      	movs	r3, #1
 8000f04:	9300      	str	r3, [sp, #0]
 8000f06:	a35a      	add	r3, pc, #360	; (adr r3, 8001070 <main+0x1e8>)
 8000f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f0c:	4861      	ldr	r0, [pc, #388]	; (8001094 <main+0x20c>)
 8000f0e:	f7ff fdd5 	bl	8000abc <SX1278_init>
  	SX1278_LORA_BW_125KHZ, SX1278_LORA_CR_4_5, SX1278_LORA_CRC_EN, 10);
  	printf("Done configuring LoRaModule\r\n");
 8000f12:	4862      	ldr	r0, [pc, #392]	; (800109c <main+0x214>)
 8000f14:	f002 f8f0 	bl	80030f8 <puts>

  	if (master == 1) {
 8000f18:	4b57      	ldr	r3, [pc, #348]	; (8001078 <main+0x1f0>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	2b01      	cmp	r3, #1
 8000f1e:	d109      	bne.n	8000f34 <main+0xac>
  		ret = SX1278_LoRaEntryTx(&SX1278, 16, 2000);
 8000f20:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000f24:	2110      	movs	r1, #16
 8000f26:	485b      	ldr	r0, [pc, #364]	; (8001094 <main+0x20c>)
 8000f28:	f7ff fd31 	bl	800098e <SX1278_LoRaEntryTx>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	4a5c      	ldr	r2, [pc, #368]	; (80010a0 <main+0x218>)
 8000f30:	6013      	str	r3, [r2, #0]
 8000f32:	e008      	b.n	8000f46 <main+0xbe>
  		//HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
  	} else {
  		ret = SX1278_LoRaEntryRx(&SX1278, 16, 2000);
 8000f34:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000f38:	2110      	movs	r1, #16
 8000f3a:	4856      	ldr	r0, [pc, #344]	; (8001094 <main+0x20c>)
 8000f3c:	f7ff fc7e 	bl	800083c <SX1278_LoRaEntryRx>
 8000f40:	4603      	mov	r3, r0
 8000f42:	4a57      	ldr	r2, [pc, #348]	; (80010a0 <main+0x218>)
 8000f44:	6013      	str	r3, [r2, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  		if (master == 1) {
 8000f46:	4b4c      	ldr	r3, [pc, #304]	; (8001078 <main+0x1f0>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	2b01      	cmp	r3, #1
 8000f4c:	d12e      	bne.n	8000fac <main+0x124>
  				printf("Master-BluePill...\r\n");
 8000f4e:	4855      	ldr	r0, [pc, #340]	; (80010a4 <main+0x21c>)
 8000f50:	f002 f8d2 	bl	80030f8 <puts>
  				HAL_Delay(1000);
 8000f54:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f58:	f000 fb64 	bl	8001624 <HAL_Delay>
  				//printf("Sending package...\r\n");
  				message_length = sprintf(buffer, "Hello from - BluePill %d", message);
 8000f5c:	4b52      	ldr	r3, [pc, #328]	; (80010a8 <main+0x220>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	461a      	mov	r2, r3
 8000f62:	4952      	ldr	r1, [pc, #328]	; (80010ac <main+0x224>)
 8000f64:	4852      	ldr	r0, [pc, #328]	; (80010b0 <main+0x228>)
 8000f66:	f002 f8cf 	bl	8003108 <siprintf>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	4a51      	ldr	r2, [pc, #324]	; (80010b4 <main+0x22c>)
 8000f6e:	6013      	str	r3, [r2, #0]
  				ret = SX1278_LoRaEntryTx(&SX1278, message_length, 2000);
 8000f70:	4b50      	ldr	r3, [pc, #320]	; (80010b4 <main+0x22c>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	b2db      	uxtb	r3, r3
 8000f76:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	4845      	ldr	r0, [pc, #276]	; (8001094 <main+0x20c>)
 8000f7e:	f7ff fd06 	bl	800098e <SX1278_LoRaEntryTx>
 8000f82:	4603      	mov	r3, r0
 8000f84:	4a46      	ldr	r2, [pc, #280]	; (80010a0 <main+0x218>)
 8000f86:	6013      	str	r3, [r2, #0]
  				//printf("Entry: %d\r\n", ret);
  				//printf("Sending %s\r\n", buffer);
  				ret = SX1278_LoRaTxPacket(&SX1278, (uint8_t*) buffer,message_length, 2000);
 8000f88:	4b4a      	ldr	r3, [pc, #296]	; (80010b4 <main+0x22c>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	b2da      	uxtb	r2, r3
 8000f8e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000f92:	4947      	ldr	r1, [pc, #284]	; (80010b0 <main+0x228>)
 8000f94:	483f      	ldr	r0, [pc, #252]	; (8001094 <main+0x20c>)
 8000f96:	f7ff fd52 	bl	8000a3e <SX1278_LoRaTxPacket>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	4a40      	ldr	r2, [pc, #256]	; (80010a0 <main+0x218>)
 8000f9e:	6013      	str	r3, [r2, #0]
  				message += 1;
 8000fa0:	4b41      	ldr	r3, [pc, #260]	; (80010a8 <main+0x220>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	4a40      	ldr	r2, [pc, #256]	; (80010a8 <main+0x220>)
 8000fa8:	6013      	str	r3, [r2, #0]
 8000faa:	e03f      	b.n	800102c <main+0x1a4>
  				//printf("Transmission: %d\r\n", ret);
  				//printf("Package sent...\r\n");

  			} else {
  				printf("Slave-BluePill...\r\n");
 8000fac:	4842      	ldr	r0, [pc, #264]	; (80010b8 <main+0x230>)
 8000fae:	f002 f8a3 	bl	80030f8 <puts>
  				HAL_Delay(800);
 8000fb2:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000fb6:	f000 fb35 	bl	8001624 <HAL_Delay>
  				//printf("Receiving package...\r\n");
  				ret = SX1278_LoRaRxPacket(&SX1278);
 8000fba:	4836      	ldr	r0, [pc, #216]	; (8001094 <main+0x20c>)
 8000fbc:	f7ff fca3 	bl	8000906 <SX1278_LoRaRxPacket>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	4b36      	ldr	r3, [pc, #216]	; (80010a0 <main+0x218>)
 8000fc6:	601a      	str	r2, [r3, #0]
  				//printf("Received: %d\r\n", ret);
  				if (ret > 0) {
 8000fc8:	4b35      	ldr	r3, [pc, #212]	; (80010a0 <main+0x218>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	dd2d      	ble.n	800102c <main+0x1a4>
  					SX1278_read(&SX1278, (uint8_t*) buffer, ret);
 8000fd0:	4b33      	ldr	r3, [pc, #204]	; (80010a0 <main+0x218>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	461a      	mov	r2, r3
 8000fd8:	4935      	ldr	r1, [pc, #212]	; (80010b0 <main+0x228>)
 8000fda:	482e      	ldr	r0, [pc, #184]	; (8001094 <main+0x20c>)
 8000fdc:	f7ff fd9b 	bl	8000b16 <SX1278_read>
  					printf("Content from-407 (%d): %s\r\n", ret, buffer);
 8000fe0:	4b2f      	ldr	r3, [pc, #188]	; (80010a0 <main+0x218>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a32      	ldr	r2, [pc, #200]	; (80010b0 <main+0x228>)
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	4834      	ldr	r0, [pc, #208]	; (80010bc <main+0x234>)
 8000fea:	f001 ffff 	bl	8002fec <iprintf>
  	  				if (*buffer == '1'){
 8000fee:	4b30      	ldr	r3, [pc, #192]	; (80010b0 <main+0x228>)
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	2b31      	cmp	r3, #49	; 0x31
 8000ff4:	d109      	bne.n	800100a <main+0x182>
  	  				printf("WE GET --- 1\r\n");
 8000ff6:	4832      	ldr	r0, [pc, #200]	; (80010c0 <main+0x238>)
 8000ff8:	f002 f87e 	bl	80030f8 <puts>
  	  				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001002:	4830      	ldr	r0, [pc, #192]	; (80010c4 <main+0x23c>)
 8001004:	f000 fdb1 	bl	8001b6a <HAL_GPIO_WritePin>
 8001008:	e010      	b.n	800102c <main+0x1a4>

  	  				} else if(*buffer == '0') {
 800100a:	4b29      	ldr	r3, [pc, #164]	; (80010b0 <main+0x228>)
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	2b30      	cmp	r3, #48	; 0x30
 8001010:	d109      	bne.n	8001026 <main+0x19e>
  	  				printf("WE GET --- 0\r\n");
 8001012:	482d      	ldr	r0, [pc, #180]	; (80010c8 <main+0x240>)
 8001014:	f002 f870 	bl	80030f8 <puts>
  	  				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8001018:	2201      	movs	r2, #1
 800101a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800101e:	4829      	ldr	r0, [pc, #164]	; (80010c4 <main+0x23c>)
 8001020:	f000 fda3 	bl	8001b6a <HAL_GPIO_WritePin>
 8001024:	e002      	b.n	800102c <main+0x1a4>

  	  				} else{
  	  				printf("ZZZZZZZZZZZZ\r\n");
 8001026:	4829      	ldr	r0, [pc, #164]	; (80010cc <main+0x244>)
 8001028:	f002 f866 	bl	80030f8 <puts>
  				//printf("Package received ...\r\n");
  			}

  			//change mode
  			//if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(MODE_GPIO_Port, MODE_Pin)) {
  				printf("Changing mode\r\n");
 800102c:	4828      	ldr	r0, [pc, #160]	; (80010d0 <main+0x248>)
 800102e:	f002 f863 	bl	80030f8 <puts>
  				//master = ~master & 0x01;
  				if (master == 1) {
 8001032:	4b11      	ldr	r3, [pc, #68]	; (8001078 <main+0x1f0>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	2b01      	cmp	r3, #1
 8001038:	d109      	bne.n	800104e <main+0x1c6>
  					ret = SX1278_LoRaEntryTx(&SX1278, 16, 2000);
 800103a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800103e:	2110      	movs	r1, #16
 8001040:	4814      	ldr	r0, [pc, #80]	; (8001094 <main+0x20c>)
 8001042:	f7ff fca4 	bl	800098e <SX1278_LoRaEntryTx>
 8001046:	4603      	mov	r3, r0
 8001048:	4a15      	ldr	r2, [pc, #84]	; (80010a0 <main+0x218>)
 800104a:	6013      	str	r3, [r2, #0]
 800104c:	e008      	b.n	8001060 <main+0x1d8>
  					//HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
  				} else {
  					ret = SX1278_LoRaEntryRx(&SX1278, 16, 2000);
 800104e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001052:	2110      	movs	r1, #16
 8001054:	480f      	ldr	r0, [pc, #60]	; (8001094 <main+0x20c>)
 8001056:	f7ff fbf1 	bl	800083c <SX1278_LoRaEntryRx>
 800105a:	4603      	mov	r3, r0
 800105c:	4a10      	ldr	r2, [pc, #64]	; (80010a0 <main+0x218>)
 800105e:	6013      	str	r3, [r2, #0]
  					//HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
  				}
  				HAL_Delay(1000);
 8001060:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001064:	f000 fade 	bl	8001624 <HAL_Delay>
  		if (master == 1) {
 8001068:	e76d      	b.n	8000f46 <main+0xbe>
 800106a:	bf00      	nop
 800106c:	f3af 8000 	nop.w
 8001070:	33bca100 	.word	0x33bca100
 8001074:	00000000 	.word	0x00000000
 8001078:	2000008c 	.word	0x2000008c
 800107c:	08004338 	.word	0x08004338
 8001080:	08004350 	.word	0x08004350
 8001084:	200003c4 	.word	0x200003c4
 8001088:	40010c00 	.word	0x40010c00
 800108c:	40010800 	.word	0x40010800
 8001090:	200003e0 	.word	0x200003e0
 8001094:	200002a8 	.word	0x200002a8
 8001098:	08004368 	.word	0x08004368
 800109c:	08004384 	.word	0x08004384
 80010a0:	200003c0 	.word	0x200003c0
 80010a4:	080043a4 	.word	0x080043a4
 80010a8:	200000a4 	.word	0x200000a4
 80010ac:	080043b8 	.word	0x080043b8
 80010b0:	200000a8 	.word	0x200000a8
 80010b4:	200000a0 	.word	0x200000a0
 80010b8:	080043d4 	.word	0x080043d4
 80010bc:	080043e8 	.word	0x080043e8
 80010c0:	08004404 	.word	0x08004404
 80010c4:	40011000 	.word	0x40011000
 80010c8:	08004414 	.word	0x08004414
 80010cc:	08004424 	.word	0x08004424
 80010d0:	08004434 	.word	0x08004434

080010d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b090      	sub	sp, #64	; 0x40
 80010d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010da:	f107 0318 	add.w	r3, r7, #24
 80010de:	2228      	movs	r2, #40	; 0x28
 80010e0:	2100      	movs	r1, #0
 80010e2:	4618      	mov	r0, r3
 80010e4:	f001 ff7a 	bl	8002fdc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010e8:	1d3b      	adds	r3, r7, #4
 80010ea:	2200      	movs	r2, #0
 80010ec:	601a      	str	r2, [r3, #0]
 80010ee:	605a      	str	r2, [r3, #4]
 80010f0:	609a      	str	r2, [r3, #8]
 80010f2:	60da      	str	r2, [r3, #12]
 80010f4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010f6:	2301      	movs	r3, #1
 80010f8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010fe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001100:	2300      	movs	r3, #0
 8001102:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001104:	2301      	movs	r3, #1
 8001106:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001108:	2302      	movs	r3, #2
 800110a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800110c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001110:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001112:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001116:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001118:	f107 0318 	add.w	r3, r7, #24
 800111c:	4618      	mov	r0, r3
 800111e:	f000 fd3d 	bl	8001b9c <HAL_RCC_OscConfig>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001128:	f000 f819 	bl	800115e <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800112c:	230f      	movs	r3, #15
 800112e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001130:	2302      	movs	r3, #2
 8001132:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001134:	2300      	movs	r3, #0
 8001136:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001138:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800113c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800113e:	2300      	movs	r3, #0
 8001140:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001142:	1d3b      	adds	r3, r7, #4
 8001144:	2102      	movs	r1, #2
 8001146:	4618      	mov	r0, r3
 8001148:	f000 ffa8 	bl	800209c <HAL_RCC_ClockConfig>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001152:	f000 f804 	bl	800115e <Error_Handler>
  }
}
 8001156:	bf00      	nop
 8001158:	3740      	adds	r7, #64	; 0x40
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}

0800115e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800115e:	b480      	push	{r7}
 8001160:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001162:	b672      	cpsid	i
}
 8001164:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001166:	e7fe      	b.n	8001166 <Error_Handler+0x8>

08001168 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800116c:	4b17      	ldr	r3, [pc, #92]	; (80011cc <MX_SPI1_Init+0x64>)
 800116e:	4a18      	ldr	r2, [pc, #96]	; (80011d0 <MX_SPI1_Init+0x68>)
 8001170:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001172:	4b16      	ldr	r3, [pc, #88]	; (80011cc <MX_SPI1_Init+0x64>)
 8001174:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001178:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800117a:	4b14      	ldr	r3, [pc, #80]	; (80011cc <MX_SPI1_Init+0x64>)
 800117c:	2200      	movs	r2, #0
 800117e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001180:	4b12      	ldr	r3, [pc, #72]	; (80011cc <MX_SPI1_Init+0x64>)
 8001182:	2200      	movs	r2, #0
 8001184:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001186:	4b11      	ldr	r3, [pc, #68]	; (80011cc <MX_SPI1_Init+0x64>)
 8001188:	2200      	movs	r2, #0
 800118a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800118c:	4b0f      	ldr	r3, [pc, #60]	; (80011cc <MX_SPI1_Init+0x64>)
 800118e:	2200      	movs	r2, #0
 8001190:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001192:	4b0e      	ldr	r3, [pc, #56]	; (80011cc <MX_SPI1_Init+0x64>)
 8001194:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001198:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800119a:	4b0c      	ldr	r3, [pc, #48]	; (80011cc <MX_SPI1_Init+0x64>)
 800119c:	2218      	movs	r2, #24
 800119e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011a0:	4b0a      	ldr	r3, [pc, #40]	; (80011cc <MX_SPI1_Init+0x64>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80011a6:	4b09      	ldr	r3, [pc, #36]	; (80011cc <MX_SPI1_Init+0x64>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011ac:	4b07      	ldr	r3, [pc, #28]	; (80011cc <MX_SPI1_Init+0x64>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80011b2:	4b06      	ldr	r3, [pc, #24]	; (80011cc <MX_SPI1_Init+0x64>)
 80011b4:	220a      	movs	r2, #10
 80011b6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80011b8:	4804      	ldr	r0, [pc, #16]	; (80011cc <MX_SPI1_Init+0x64>)
 80011ba:	f001 f909 	bl	80023d0 <HAL_SPI_Init>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80011c4:	f7ff ffcb 	bl	800115e <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80011c8:	bf00      	nop
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	200003e0 	.word	0x200003e0
 80011d0:	40013000 	.word	0x40013000

080011d4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b088      	sub	sp, #32
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011dc:	f107 0310 	add.w	r3, r7, #16
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]
 80011e4:	605a      	str	r2, [r3, #4]
 80011e6:	609a      	str	r2, [r3, #8]
 80011e8:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4a1b      	ldr	r2, [pc, #108]	; (800125c <HAL_SPI_MspInit+0x88>)
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d12f      	bne.n	8001254 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80011f4:	4b1a      	ldr	r3, [pc, #104]	; (8001260 <HAL_SPI_MspInit+0x8c>)
 80011f6:	699b      	ldr	r3, [r3, #24]
 80011f8:	4a19      	ldr	r2, [pc, #100]	; (8001260 <HAL_SPI_MspInit+0x8c>)
 80011fa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80011fe:	6193      	str	r3, [r2, #24]
 8001200:	4b17      	ldr	r3, [pc, #92]	; (8001260 <HAL_SPI_MspInit+0x8c>)
 8001202:	699b      	ldr	r3, [r3, #24]
 8001204:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001208:	60fb      	str	r3, [r7, #12]
 800120a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800120c:	4b14      	ldr	r3, [pc, #80]	; (8001260 <HAL_SPI_MspInit+0x8c>)
 800120e:	699b      	ldr	r3, [r3, #24]
 8001210:	4a13      	ldr	r2, [pc, #76]	; (8001260 <HAL_SPI_MspInit+0x8c>)
 8001212:	f043 0304 	orr.w	r3, r3, #4
 8001216:	6193      	str	r3, [r2, #24]
 8001218:	4b11      	ldr	r3, [pc, #68]	; (8001260 <HAL_SPI_MspInit+0x8c>)
 800121a:	699b      	ldr	r3, [r3, #24]
 800121c:	f003 0304 	and.w	r3, r3, #4
 8001220:	60bb      	str	r3, [r7, #8]
 8001222:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001224:	23a0      	movs	r3, #160	; 0xa0
 8001226:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001228:	2302      	movs	r3, #2
 800122a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800122c:	2303      	movs	r3, #3
 800122e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001230:	f107 0310 	add.w	r3, r7, #16
 8001234:	4619      	mov	r1, r3
 8001236:	480b      	ldr	r0, [pc, #44]	; (8001264 <HAL_SPI_MspInit+0x90>)
 8001238:	f000 fafc 	bl	8001834 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800123c:	2340      	movs	r3, #64	; 0x40
 800123e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001240:	2300      	movs	r3, #0
 8001242:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001244:	2300      	movs	r3, #0
 8001246:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001248:	f107 0310 	add.w	r3, r7, #16
 800124c:	4619      	mov	r1, r3
 800124e:	4805      	ldr	r0, [pc, #20]	; (8001264 <HAL_SPI_MspInit+0x90>)
 8001250:	f000 faf0 	bl	8001834 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001254:	bf00      	nop
 8001256:	3720      	adds	r7, #32
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	40013000 	.word	0x40013000
 8001260:	40021000 	.word	0x40021000
 8001264:	40010800 	.word	0x40010800

08001268 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001268:	b480      	push	{r7}
 800126a:	b085      	sub	sp, #20
 800126c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800126e:	4b15      	ldr	r3, [pc, #84]	; (80012c4 <HAL_MspInit+0x5c>)
 8001270:	699b      	ldr	r3, [r3, #24]
 8001272:	4a14      	ldr	r2, [pc, #80]	; (80012c4 <HAL_MspInit+0x5c>)
 8001274:	f043 0301 	orr.w	r3, r3, #1
 8001278:	6193      	str	r3, [r2, #24]
 800127a:	4b12      	ldr	r3, [pc, #72]	; (80012c4 <HAL_MspInit+0x5c>)
 800127c:	699b      	ldr	r3, [r3, #24]
 800127e:	f003 0301 	and.w	r3, r3, #1
 8001282:	60bb      	str	r3, [r7, #8]
 8001284:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001286:	4b0f      	ldr	r3, [pc, #60]	; (80012c4 <HAL_MspInit+0x5c>)
 8001288:	69db      	ldr	r3, [r3, #28]
 800128a:	4a0e      	ldr	r2, [pc, #56]	; (80012c4 <HAL_MspInit+0x5c>)
 800128c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001290:	61d3      	str	r3, [r2, #28]
 8001292:	4b0c      	ldr	r3, [pc, #48]	; (80012c4 <HAL_MspInit+0x5c>)
 8001294:	69db      	ldr	r3, [r3, #28]
 8001296:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800129a:	607b      	str	r3, [r7, #4]
 800129c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800129e:	4b0a      	ldr	r3, [pc, #40]	; (80012c8 <HAL_MspInit+0x60>)
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	60fb      	str	r3, [r7, #12]
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80012aa:	60fb      	str	r3, [r7, #12]
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80012b2:	60fb      	str	r3, [r7, #12]
 80012b4:	4a04      	ldr	r2, [pc, #16]	; (80012c8 <HAL_MspInit+0x60>)
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012ba:	bf00      	nop
 80012bc:	3714      	adds	r7, #20
 80012be:	46bd      	mov	sp, r7
 80012c0:	bc80      	pop	{r7}
 80012c2:	4770      	bx	lr
 80012c4:	40021000 	.word	0x40021000
 80012c8:	40010000 	.word	0x40010000

080012cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012d0:	e7fe      	b.n	80012d0 <NMI_Handler+0x4>

080012d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012d2:	b480      	push	{r7}
 80012d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012d6:	e7fe      	b.n	80012d6 <HardFault_Handler+0x4>

080012d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012dc:	e7fe      	b.n	80012dc <MemManage_Handler+0x4>

080012de <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012de:	b480      	push	{r7}
 80012e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012e2:	e7fe      	b.n	80012e2 <BusFault_Handler+0x4>

080012e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012e8:	e7fe      	b.n	80012e8 <UsageFault_Handler+0x4>

080012ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012ea:	b480      	push	{r7}
 80012ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012ee:	bf00      	nop
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bc80      	pop	{r7}
 80012f4:	4770      	bx	lr

080012f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012f6:	b480      	push	{r7}
 80012f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012fa:	bf00      	nop
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bc80      	pop	{r7}
 8001300:	4770      	bx	lr

08001302 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001302:	b480      	push	{r7}
 8001304:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001306:	bf00      	nop
 8001308:	46bd      	mov	sp, r7
 800130a:	bc80      	pop	{r7}
 800130c:	4770      	bx	lr

0800130e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800130e:	b580      	push	{r7, lr}
 8001310:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001312:	f000 f96b 	bl	80015ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001316:	bf00      	nop
 8001318:	bd80      	pop	{r7, pc}

0800131a <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800131a:	b580      	push	{r7, lr}
 800131c:	b086      	sub	sp, #24
 800131e:	af00      	add	r7, sp, #0
 8001320:	60f8      	str	r0, [r7, #12]
 8001322:	60b9      	str	r1, [r7, #8]
 8001324:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001326:	2300      	movs	r3, #0
 8001328:	617b      	str	r3, [r7, #20]
 800132a:	e00a      	b.n	8001342 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800132c:	f3af 8000 	nop.w
 8001330:	4601      	mov	r1, r0
 8001332:	68bb      	ldr	r3, [r7, #8]
 8001334:	1c5a      	adds	r2, r3, #1
 8001336:	60ba      	str	r2, [r7, #8]
 8001338:	b2ca      	uxtb	r2, r1
 800133a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	3301      	adds	r3, #1
 8001340:	617b      	str	r3, [r7, #20]
 8001342:	697a      	ldr	r2, [r7, #20]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	429a      	cmp	r2, r3
 8001348:	dbf0      	blt.n	800132c <_read+0x12>
	}

return len;
 800134a:	687b      	ldr	r3, [r7, #4]
}
 800134c:	4618      	mov	r0, r3
 800134e:	3718      	adds	r7, #24
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}

08001354 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
	return -1;
 800135c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001360:	4618      	mov	r0, r3
 8001362:	370c      	adds	r7, #12
 8001364:	46bd      	mov	sp, r7
 8001366:	bc80      	pop	{r7}
 8001368:	4770      	bx	lr

0800136a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800136a:	b480      	push	{r7}
 800136c:	b083      	sub	sp, #12
 800136e:	af00      	add	r7, sp, #0
 8001370:	6078      	str	r0, [r7, #4]
 8001372:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800137a:	605a      	str	r2, [r3, #4]
	return 0;
 800137c:	2300      	movs	r3, #0
}
 800137e:	4618      	mov	r0, r3
 8001380:	370c      	adds	r7, #12
 8001382:	46bd      	mov	sp, r7
 8001384:	bc80      	pop	{r7}
 8001386:	4770      	bx	lr

08001388 <_isatty>:

int _isatty(int file)
{
 8001388:	b480      	push	{r7}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
	return 1;
 8001390:	2301      	movs	r3, #1
}
 8001392:	4618      	mov	r0, r3
 8001394:	370c      	adds	r7, #12
 8001396:	46bd      	mov	sp, r7
 8001398:	bc80      	pop	{r7}
 800139a:	4770      	bx	lr

0800139c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800139c:	b480      	push	{r7}
 800139e:	b085      	sub	sp, #20
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	60f8      	str	r0, [r7, #12]
 80013a4:	60b9      	str	r1, [r7, #8]
 80013a6:	607a      	str	r2, [r7, #4]
	return 0;
 80013a8:	2300      	movs	r3, #0
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3714      	adds	r7, #20
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bc80      	pop	{r7}
 80013b2:	4770      	bx	lr

080013b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b086      	sub	sp, #24
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013bc:	4a14      	ldr	r2, [pc, #80]	; (8001410 <_sbrk+0x5c>)
 80013be:	4b15      	ldr	r3, [pc, #84]	; (8001414 <_sbrk+0x60>)
 80013c0:	1ad3      	subs	r3, r2, r3
 80013c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013c8:	4b13      	ldr	r3, [pc, #76]	; (8001418 <_sbrk+0x64>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d102      	bne.n	80013d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013d0:	4b11      	ldr	r3, [pc, #68]	; (8001418 <_sbrk+0x64>)
 80013d2:	4a12      	ldr	r2, [pc, #72]	; (800141c <_sbrk+0x68>)
 80013d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013d6:	4b10      	ldr	r3, [pc, #64]	; (8001418 <_sbrk+0x64>)
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4413      	add	r3, r2
 80013de:	693a      	ldr	r2, [r7, #16]
 80013e0:	429a      	cmp	r2, r3
 80013e2:	d207      	bcs.n	80013f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013e4:	f001 fdc2 	bl	8002f6c <__errno>
 80013e8:	4603      	mov	r3, r0
 80013ea:	220c      	movs	r2, #12
 80013ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80013f2:	e009      	b.n	8001408 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013f4:	4b08      	ldr	r3, [pc, #32]	; (8001418 <_sbrk+0x64>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013fa:	4b07      	ldr	r3, [pc, #28]	; (8001418 <_sbrk+0x64>)
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4413      	add	r3, r2
 8001402:	4a05      	ldr	r2, [pc, #20]	; (8001418 <_sbrk+0x64>)
 8001404:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001406:	68fb      	ldr	r3, [r7, #12]
}
 8001408:	4618      	mov	r0, r3
 800140a:	3718      	adds	r7, #24
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	20005000 	.word	0x20005000
 8001414:	00000400 	.word	0x00000400
 8001418:	20000090 	.word	0x20000090
 800141c:	20000490 	.word	0x20000490

08001420 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001424:	bf00      	nop
 8001426:	46bd      	mov	sp, r7
 8001428:	bc80      	pop	{r7}
 800142a:	4770      	bx	lr

0800142c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001430:	4b11      	ldr	r3, [pc, #68]	; (8001478 <MX_USART2_UART_Init+0x4c>)
 8001432:	4a12      	ldr	r2, [pc, #72]	; (800147c <MX_USART2_UART_Init+0x50>)
 8001434:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001436:	4b10      	ldr	r3, [pc, #64]	; (8001478 <MX_USART2_UART_Init+0x4c>)
 8001438:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800143c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800143e:	4b0e      	ldr	r3, [pc, #56]	; (8001478 <MX_USART2_UART_Init+0x4c>)
 8001440:	2200      	movs	r2, #0
 8001442:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001444:	4b0c      	ldr	r3, [pc, #48]	; (8001478 <MX_USART2_UART_Init+0x4c>)
 8001446:	2200      	movs	r2, #0
 8001448:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800144a:	4b0b      	ldr	r3, [pc, #44]	; (8001478 <MX_USART2_UART_Init+0x4c>)
 800144c:	2200      	movs	r2, #0
 800144e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001450:	4b09      	ldr	r3, [pc, #36]	; (8001478 <MX_USART2_UART_Init+0x4c>)
 8001452:	220c      	movs	r2, #12
 8001454:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001456:	4b08      	ldr	r3, [pc, #32]	; (8001478 <MX_USART2_UART_Init+0x4c>)
 8001458:	2200      	movs	r2, #0
 800145a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800145c:	4b06      	ldr	r3, [pc, #24]	; (8001478 <MX_USART2_UART_Init+0x4c>)
 800145e:	2200      	movs	r2, #0
 8001460:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001462:	4805      	ldr	r0, [pc, #20]	; (8001478 <MX_USART2_UART_Init+0x4c>)
 8001464:	f001 fbca 	bl	8002bfc <HAL_UART_Init>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800146e:	f7ff fe76 	bl	800115e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001472:	bf00      	nop
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	20000438 	.word	0x20000438
 800147c:	40004400 	.word	0x40004400

08001480 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b088      	sub	sp, #32
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001488:	f107 0310 	add.w	r3, r7, #16
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]
 8001490:	605a      	str	r2, [r3, #4]
 8001492:	609a      	str	r2, [r3, #8]
 8001494:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a1b      	ldr	r2, [pc, #108]	; (8001508 <HAL_UART_MspInit+0x88>)
 800149c:	4293      	cmp	r3, r2
 800149e:	d12f      	bne.n	8001500 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80014a0:	4b1a      	ldr	r3, [pc, #104]	; (800150c <HAL_UART_MspInit+0x8c>)
 80014a2:	69db      	ldr	r3, [r3, #28]
 80014a4:	4a19      	ldr	r2, [pc, #100]	; (800150c <HAL_UART_MspInit+0x8c>)
 80014a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014aa:	61d3      	str	r3, [r2, #28]
 80014ac:	4b17      	ldr	r3, [pc, #92]	; (800150c <HAL_UART_MspInit+0x8c>)
 80014ae:	69db      	ldr	r3, [r3, #28]
 80014b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014b4:	60fb      	str	r3, [r7, #12]
 80014b6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014b8:	4b14      	ldr	r3, [pc, #80]	; (800150c <HAL_UART_MspInit+0x8c>)
 80014ba:	699b      	ldr	r3, [r3, #24]
 80014bc:	4a13      	ldr	r2, [pc, #76]	; (800150c <HAL_UART_MspInit+0x8c>)
 80014be:	f043 0304 	orr.w	r3, r3, #4
 80014c2:	6193      	str	r3, [r2, #24]
 80014c4:	4b11      	ldr	r3, [pc, #68]	; (800150c <HAL_UART_MspInit+0x8c>)
 80014c6:	699b      	ldr	r3, [r3, #24]
 80014c8:	f003 0304 	and.w	r3, r3, #4
 80014cc:	60bb      	str	r3, [r7, #8]
 80014ce:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80014d0:	2304      	movs	r3, #4
 80014d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d4:	2302      	movs	r3, #2
 80014d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014d8:	2303      	movs	r3, #3
 80014da:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014dc:	f107 0310 	add.w	r3, r7, #16
 80014e0:	4619      	mov	r1, r3
 80014e2:	480b      	ldr	r0, [pc, #44]	; (8001510 <HAL_UART_MspInit+0x90>)
 80014e4:	f000 f9a6 	bl	8001834 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80014e8:	2308      	movs	r3, #8
 80014ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014ec:	2300      	movs	r3, #0
 80014ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f0:	2300      	movs	r3, #0
 80014f2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014f4:	f107 0310 	add.w	r3, r7, #16
 80014f8:	4619      	mov	r1, r3
 80014fa:	4805      	ldr	r0, [pc, #20]	; (8001510 <HAL_UART_MspInit+0x90>)
 80014fc:	f000 f99a 	bl	8001834 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001500:	bf00      	nop
 8001502:	3720      	adds	r7, #32
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	40004400 	.word	0x40004400
 800150c:	40021000 	.word	0x40021000
 8001510:	40010800 	.word	0x40010800

08001514 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001514:	480c      	ldr	r0, [pc, #48]	; (8001548 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001516:	490d      	ldr	r1, [pc, #52]	; (800154c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001518:	4a0d      	ldr	r2, [pc, #52]	; (8001550 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800151a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800151c:	e002      	b.n	8001524 <LoopCopyDataInit>

0800151e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800151e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001520:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001522:	3304      	adds	r3, #4

08001524 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001524:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001526:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001528:	d3f9      	bcc.n	800151e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800152a:	4a0a      	ldr	r2, [pc, #40]	; (8001554 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800152c:	4c0a      	ldr	r4, [pc, #40]	; (8001558 <LoopFillZerobss+0x22>)
  movs r3, #0
 800152e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001530:	e001      	b.n	8001536 <LoopFillZerobss>

08001532 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001532:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001534:	3204      	adds	r2, #4

08001536 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001536:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001538:	d3fb      	bcc.n	8001532 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800153a:	f7ff ff71 	bl	8001420 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800153e:	f001 fd1b 	bl	8002f78 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001542:	f7ff fca1 	bl	8000e88 <main>
  bx lr
 8001546:	4770      	bx	lr
  ldr r0, =_sdata
 8001548:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800154c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001550:	08004534 	.word	0x08004534
  ldr r2, =_sbss
 8001554:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001558:	20000490 	.word	0x20000490

0800155c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800155c:	e7fe      	b.n	800155c <ADC1_2_IRQHandler>
	...

08001560 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001564:	4b08      	ldr	r3, [pc, #32]	; (8001588 <HAL_Init+0x28>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a07      	ldr	r2, [pc, #28]	; (8001588 <HAL_Init+0x28>)
 800156a:	f043 0310 	orr.w	r3, r3, #16
 800156e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001570:	2003      	movs	r0, #3
 8001572:	f000 f92b 	bl	80017cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001576:	200f      	movs	r0, #15
 8001578:	f000 f808 	bl	800158c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800157c:	f7ff fe74 	bl	8001268 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001580:	2300      	movs	r3, #0
}
 8001582:	4618      	mov	r0, r3
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	40022000 	.word	0x40022000

0800158c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001594:	4b12      	ldr	r3, [pc, #72]	; (80015e0 <HAL_InitTick+0x54>)
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	4b12      	ldr	r3, [pc, #72]	; (80015e4 <HAL_InitTick+0x58>)
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	4619      	mov	r1, r3
 800159e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80015a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80015aa:	4618      	mov	r0, r3
 80015ac:	f000 f935 	bl	800181a <HAL_SYSTICK_Config>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	e00e      	b.n	80015d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2b0f      	cmp	r3, #15
 80015be:	d80a      	bhi.n	80015d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015c0:	2200      	movs	r2, #0
 80015c2:	6879      	ldr	r1, [r7, #4]
 80015c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80015c8:	f000 f90b 	bl	80017e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015cc:	4a06      	ldr	r2, [pc, #24]	; (80015e8 <HAL_InitTick+0x5c>)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015d2:	2300      	movs	r3, #0
 80015d4:	e000      	b.n	80015d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3708      	adds	r7, #8
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	20000000 	.word	0x20000000
 80015e4:	20000008 	.word	0x20000008
 80015e8:	20000004 	.word	0x20000004

080015ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015f0:	4b05      	ldr	r3, [pc, #20]	; (8001608 <HAL_IncTick+0x1c>)
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	461a      	mov	r2, r3
 80015f6:	4b05      	ldr	r3, [pc, #20]	; (800160c <HAL_IncTick+0x20>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4413      	add	r3, r2
 80015fc:	4a03      	ldr	r2, [pc, #12]	; (800160c <HAL_IncTick+0x20>)
 80015fe:	6013      	str	r3, [r2, #0]
}
 8001600:	bf00      	nop
 8001602:	46bd      	mov	sp, r7
 8001604:	bc80      	pop	{r7}
 8001606:	4770      	bx	lr
 8001608:	20000008 	.word	0x20000008
 800160c:	2000047c 	.word	0x2000047c

08001610 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  return uwTick;
 8001614:	4b02      	ldr	r3, [pc, #8]	; (8001620 <HAL_GetTick+0x10>)
 8001616:	681b      	ldr	r3, [r3, #0]
}
 8001618:	4618      	mov	r0, r3
 800161a:	46bd      	mov	sp, r7
 800161c:	bc80      	pop	{r7}
 800161e:	4770      	bx	lr
 8001620:	2000047c 	.word	0x2000047c

08001624 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b084      	sub	sp, #16
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800162c:	f7ff fff0 	bl	8001610 <HAL_GetTick>
 8001630:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800163c:	d005      	beq.n	800164a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800163e:	4b0a      	ldr	r3, [pc, #40]	; (8001668 <HAL_Delay+0x44>)
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	461a      	mov	r2, r3
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	4413      	add	r3, r2
 8001648:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800164a:	bf00      	nop
 800164c:	f7ff ffe0 	bl	8001610 <HAL_GetTick>
 8001650:	4602      	mov	r2, r0
 8001652:	68bb      	ldr	r3, [r7, #8]
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	68fa      	ldr	r2, [r7, #12]
 8001658:	429a      	cmp	r2, r3
 800165a:	d8f7      	bhi.n	800164c <HAL_Delay+0x28>
  {
  }
}
 800165c:	bf00      	nop
 800165e:	bf00      	nop
 8001660:	3710      	adds	r7, #16
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	20000008 	.word	0x20000008

0800166c <__NVIC_SetPriorityGrouping>:
{
 800166c:	b480      	push	{r7}
 800166e:	b085      	sub	sp, #20
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	f003 0307 	and.w	r3, r3, #7
 800167a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800167c:	4b0c      	ldr	r3, [pc, #48]	; (80016b0 <__NVIC_SetPriorityGrouping+0x44>)
 800167e:	68db      	ldr	r3, [r3, #12]
 8001680:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001682:	68ba      	ldr	r2, [r7, #8]
 8001684:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001688:	4013      	ands	r3, r2
 800168a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001694:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001698:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800169c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800169e:	4a04      	ldr	r2, [pc, #16]	; (80016b0 <__NVIC_SetPriorityGrouping+0x44>)
 80016a0:	68bb      	ldr	r3, [r7, #8]
 80016a2:	60d3      	str	r3, [r2, #12]
}
 80016a4:	bf00      	nop
 80016a6:	3714      	adds	r7, #20
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bc80      	pop	{r7}
 80016ac:	4770      	bx	lr
 80016ae:	bf00      	nop
 80016b0:	e000ed00 	.word	0xe000ed00

080016b4 <__NVIC_GetPriorityGrouping>:
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016b8:	4b04      	ldr	r3, [pc, #16]	; (80016cc <__NVIC_GetPriorityGrouping+0x18>)
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	0a1b      	lsrs	r3, r3, #8
 80016be:	f003 0307 	and.w	r3, r3, #7
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bc80      	pop	{r7}
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	e000ed00 	.word	0xe000ed00

080016d0 <__NVIC_SetPriority>:
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	4603      	mov	r3, r0
 80016d8:	6039      	str	r1, [r7, #0]
 80016da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	db0a      	blt.n	80016fa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	b2da      	uxtb	r2, r3
 80016e8:	490c      	ldr	r1, [pc, #48]	; (800171c <__NVIC_SetPriority+0x4c>)
 80016ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ee:	0112      	lsls	r2, r2, #4
 80016f0:	b2d2      	uxtb	r2, r2
 80016f2:	440b      	add	r3, r1
 80016f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80016f8:	e00a      	b.n	8001710 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	b2da      	uxtb	r2, r3
 80016fe:	4908      	ldr	r1, [pc, #32]	; (8001720 <__NVIC_SetPriority+0x50>)
 8001700:	79fb      	ldrb	r3, [r7, #7]
 8001702:	f003 030f 	and.w	r3, r3, #15
 8001706:	3b04      	subs	r3, #4
 8001708:	0112      	lsls	r2, r2, #4
 800170a:	b2d2      	uxtb	r2, r2
 800170c:	440b      	add	r3, r1
 800170e:	761a      	strb	r2, [r3, #24]
}
 8001710:	bf00      	nop
 8001712:	370c      	adds	r7, #12
 8001714:	46bd      	mov	sp, r7
 8001716:	bc80      	pop	{r7}
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	e000e100 	.word	0xe000e100
 8001720:	e000ed00 	.word	0xe000ed00

08001724 <NVIC_EncodePriority>:
{
 8001724:	b480      	push	{r7}
 8001726:	b089      	sub	sp, #36	; 0x24
 8001728:	af00      	add	r7, sp, #0
 800172a:	60f8      	str	r0, [r7, #12]
 800172c:	60b9      	str	r1, [r7, #8]
 800172e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	f003 0307 	and.w	r3, r3, #7
 8001736:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001738:	69fb      	ldr	r3, [r7, #28]
 800173a:	f1c3 0307 	rsb	r3, r3, #7
 800173e:	2b04      	cmp	r3, #4
 8001740:	bf28      	it	cs
 8001742:	2304      	movcs	r3, #4
 8001744:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	3304      	adds	r3, #4
 800174a:	2b06      	cmp	r3, #6
 800174c:	d902      	bls.n	8001754 <NVIC_EncodePriority+0x30>
 800174e:	69fb      	ldr	r3, [r7, #28]
 8001750:	3b03      	subs	r3, #3
 8001752:	e000      	b.n	8001756 <NVIC_EncodePriority+0x32>
 8001754:	2300      	movs	r3, #0
 8001756:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001758:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800175c:	69bb      	ldr	r3, [r7, #24]
 800175e:	fa02 f303 	lsl.w	r3, r2, r3
 8001762:	43da      	mvns	r2, r3
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	401a      	ands	r2, r3
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800176c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	fa01 f303 	lsl.w	r3, r1, r3
 8001776:	43d9      	mvns	r1, r3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800177c:	4313      	orrs	r3, r2
}
 800177e:	4618      	mov	r0, r3
 8001780:	3724      	adds	r7, #36	; 0x24
 8001782:	46bd      	mov	sp, r7
 8001784:	bc80      	pop	{r7}
 8001786:	4770      	bx	lr

08001788 <SysTick_Config>:
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	3b01      	subs	r3, #1
 8001794:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001798:	d301      	bcc.n	800179e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800179a:	2301      	movs	r3, #1
 800179c:	e00f      	b.n	80017be <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800179e:	4a0a      	ldr	r2, [pc, #40]	; (80017c8 <SysTick_Config+0x40>)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	3b01      	subs	r3, #1
 80017a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017a6:	210f      	movs	r1, #15
 80017a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80017ac:	f7ff ff90 	bl	80016d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017b0:	4b05      	ldr	r3, [pc, #20]	; (80017c8 <SysTick_Config+0x40>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017b6:	4b04      	ldr	r3, [pc, #16]	; (80017c8 <SysTick_Config+0x40>)
 80017b8:	2207      	movs	r2, #7
 80017ba:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80017bc:	2300      	movs	r3, #0
}
 80017be:	4618      	mov	r0, r3
 80017c0:	3708      	adds	r7, #8
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	e000e010 	.word	0xe000e010

080017cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017d4:	6878      	ldr	r0, [r7, #4]
 80017d6:	f7ff ff49 	bl	800166c <__NVIC_SetPriorityGrouping>
}
 80017da:	bf00      	nop
 80017dc:	3708      	adds	r7, #8
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}

080017e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017e2:	b580      	push	{r7, lr}
 80017e4:	b086      	sub	sp, #24
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	4603      	mov	r3, r0
 80017ea:	60b9      	str	r1, [r7, #8]
 80017ec:	607a      	str	r2, [r7, #4]
 80017ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017f0:	2300      	movs	r3, #0
 80017f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017f4:	f7ff ff5e 	bl	80016b4 <__NVIC_GetPriorityGrouping>
 80017f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017fa:	687a      	ldr	r2, [r7, #4]
 80017fc:	68b9      	ldr	r1, [r7, #8]
 80017fe:	6978      	ldr	r0, [r7, #20]
 8001800:	f7ff ff90 	bl	8001724 <NVIC_EncodePriority>
 8001804:	4602      	mov	r2, r0
 8001806:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800180a:	4611      	mov	r1, r2
 800180c:	4618      	mov	r0, r3
 800180e:	f7ff ff5f 	bl	80016d0 <__NVIC_SetPriority>
}
 8001812:	bf00      	nop
 8001814:	3718      	adds	r7, #24
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}

0800181a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800181a:	b580      	push	{r7, lr}
 800181c:	b082      	sub	sp, #8
 800181e:	af00      	add	r7, sp, #0
 8001820:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f7ff ffb0 	bl	8001788 <SysTick_Config>
 8001828:	4603      	mov	r3, r0
}
 800182a:	4618      	mov	r0, r3
 800182c:	3708      	adds	r7, #8
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
	...

08001834 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001834:	b480      	push	{r7}
 8001836:	b08b      	sub	sp, #44	; 0x2c
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800183e:	2300      	movs	r3, #0
 8001840:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001842:	2300      	movs	r3, #0
 8001844:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001846:	e169      	b.n	8001b1c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001848:	2201      	movs	r2, #1
 800184a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800184c:	fa02 f303 	lsl.w	r3, r2, r3
 8001850:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	69fa      	ldr	r2, [r7, #28]
 8001858:	4013      	ands	r3, r2
 800185a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800185c:	69ba      	ldr	r2, [r7, #24]
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	429a      	cmp	r2, r3
 8001862:	f040 8158 	bne.w	8001b16 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	4a9a      	ldr	r2, [pc, #616]	; (8001ad4 <HAL_GPIO_Init+0x2a0>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d05e      	beq.n	800192e <HAL_GPIO_Init+0xfa>
 8001870:	4a98      	ldr	r2, [pc, #608]	; (8001ad4 <HAL_GPIO_Init+0x2a0>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d875      	bhi.n	8001962 <HAL_GPIO_Init+0x12e>
 8001876:	4a98      	ldr	r2, [pc, #608]	; (8001ad8 <HAL_GPIO_Init+0x2a4>)
 8001878:	4293      	cmp	r3, r2
 800187a:	d058      	beq.n	800192e <HAL_GPIO_Init+0xfa>
 800187c:	4a96      	ldr	r2, [pc, #600]	; (8001ad8 <HAL_GPIO_Init+0x2a4>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d86f      	bhi.n	8001962 <HAL_GPIO_Init+0x12e>
 8001882:	4a96      	ldr	r2, [pc, #600]	; (8001adc <HAL_GPIO_Init+0x2a8>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d052      	beq.n	800192e <HAL_GPIO_Init+0xfa>
 8001888:	4a94      	ldr	r2, [pc, #592]	; (8001adc <HAL_GPIO_Init+0x2a8>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d869      	bhi.n	8001962 <HAL_GPIO_Init+0x12e>
 800188e:	4a94      	ldr	r2, [pc, #592]	; (8001ae0 <HAL_GPIO_Init+0x2ac>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d04c      	beq.n	800192e <HAL_GPIO_Init+0xfa>
 8001894:	4a92      	ldr	r2, [pc, #584]	; (8001ae0 <HAL_GPIO_Init+0x2ac>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d863      	bhi.n	8001962 <HAL_GPIO_Init+0x12e>
 800189a:	4a92      	ldr	r2, [pc, #584]	; (8001ae4 <HAL_GPIO_Init+0x2b0>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d046      	beq.n	800192e <HAL_GPIO_Init+0xfa>
 80018a0:	4a90      	ldr	r2, [pc, #576]	; (8001ae4 <HAL_GPIO_Init+0x2b0>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d85d      	bhi.n	8001962 <HAL_GPIO_Init+0x12e>
 80018a6:	2b12      	cmp	r3, #18
 80018a8:	d82a      	bhi.n	8001900 <HAL_GPIO_Init+0xcc>
 80018aa:	2b12      	cmp	r3, #18
 80018ac:	d859      	bhi.n	8001962 <HAL_GPIO_Init+0x12e>
 80018ae:	a201      	add	r2, pc, #4	; (adr r2, 80018b4 <HAL_GPIO_Init+0x80>)
 80018b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018b4:	0800192f 	.word	0x0800192f
 80018b8:	08001909 	.word	0x08001909
 80018bc:	0800191b 	.word	0x0800191b
 80018c0:	0800195d 	.word	0x0800195d
 80018c4:	08001963 	.word	0x08001963
 80018c8:	08001963 	.word	0x08001963
 80018cc:	08001963 	.word	0x08001963
 80018d0:	08001963 	.word	0x08001963
 80018d4:	08001963 	.word	0x08001963
 80018d8:	08001963 	.word	0x08001963
 80018dc:	08001963 	.word	0x08001963
 80018e0:	08001963 	.word	0x08001963
 80018e4:	08001963 	.word	0x08001963
 80018e8:	08001963 	.word	0x08001963
 80018ec:	08001963 	.word	0x08001963
 80018f0:	08001963 	.word	0x08001963
 80018f4:	08001963 	.word	0x08001963
 80018f8:	08001911 	.word	0x08001911
 80018fc:	08001925 	.word	0x08001925
 8001900:	4a79      	ldr	r2, [pc, #484]	; (8001ae8 <HAL_GPIO_Init+0x2b4>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d013      	beq.n	800192e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001906:	e02c      	b.n	8001962 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	623b      	str	r3, [r7, #32]
          break;
 800190e:	e029      	b.n	8001964 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	3304      	adds	r3, #4
 8001916:	623b      	str	r3, [r7, #32]
          break;
 8001918:	e024      	b.n	8001964 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	68db      	ldr	r3, [r3, #12]
 800191e:	3308      	adds	r3, #8
 8001920:	623b      	str	r3, [r7, #32]
          break;
 8001922:	e01f      	b.n	8001964 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	330c      	adds	r3, #12
 800192a:	623b      	str	r3, [r7, #32]
          break;
 800192c:	e01a      	b.n	8001964 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d102      	bne.n	800193c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001936:	2304      	movs	r3, #4
 8001938:	623b      	str	r3, [r7, #32]
          break;
 800193a:	e013      	b.n	8001964 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	2b01      	cmp	r3, #1
 8001942:	d105      	bne.n	8001950 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001944:	2308      	movs	r3, #8
 8001946:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	69fa      	ldr	r2, [r7, #28]
 800194c:	611a      	str	r2, [r3, #16]
          break;
 800194e:	e009      	b.n	8001964 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001950:	2308      	movs	r3, #8
 8001952:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	69fa      	ldr	r2, [r7, #28]
 8001958:	615a      	str	r2, [r3, #20]
          break;
 800195a:	e003      	b.n	8001964 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800195c:	2300      	movs	r3, #0
 800195e:	623b      	str	r3, [r7, #32]
          break;
 8001960:	e000      	b.n	8001964 <HAL_GPIO_Init+0x130>
          break;
 8001962:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001964:	69bb      	ldr	r3, [r7, #24]
 8001966:	2bff      	cmp	r3, #255	; 0xff
 8001968:	d801      	bhi.n	800196e <HAL_GPIO_Init+0x13a>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	e001      	b.n	8001972 <HAL_GPIO_Init+0x13e>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	3304      	adds	r3, #4
 8001972:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001974:	69bb      	ldr	r3, [r7, #24]
 8001976:	2bff      	cmp	r3, #255	; 0xff
 8001978:	d802      	bhi.n	8001980 <HAL_GPIO_Init+0x14c>
 800197a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800197c:	009b      	lsls	r3, r3, #2
 800197e:	e002      	b.n	8001986 <HAL_GPIO_Init+0x152>
 8001980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001982:	3b08      	subs	r3, #8
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	210f      	movs	r1, #15
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	fa01 f303 	lsl.w	r3, r1, r3
 8001994:	43db      	mvns	r3, r3
 8001996:	401a      	ands	r2, r3
 8001998:	6a39      	ldr	r1, [r7, #32]
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	fa01 f303 	lsl.w	r3, r1, r3
 80019a0:	431a      	orrs	r2, r3
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	f000 80b1 	beq.w	8001b16 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80019b4:	4b4d      	ldr	r3, [pc, #308]	; (8001aec <HAL_GPIO_Init+0x2b8>)
 80019b6:	699b      	ldr	r3, [r3, #24]
 80019b8:	4a4c      	ldr	r2, [pc, #304]	; (8001aec <HAL_GPIO_Init+0x2b8>)
 80019ba:	f043 0301 	orr.w	r3, r3, #1
 80019be:	6193      	str	r3, [r2, #24]
 80019c0:	4b4a      	ldr	r3, [pc, #296]	; (8001aec <HAL_GPIO_Init+0x2b8>)
 80019c2:	699b      	ldr	r3, [r3, #24]
 80019c4:	f003 0301 	and.w	r3, r3, #1
 80019c8:	60bb      	str	r3, [r7, #8]
 80019ca:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80019cc:	4a48      	ldr	r2, [pc, #288]	; (8001af0 <HAL_GPIO_Init+0x2bc>)
 80019ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d0:	089b      	lsrs	r3, r3, #2
 80019d2:	3302      	adds	r3, #2
 80019d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019d8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80019da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019dc:	f003 0303 	and.w	r3, r3, #3
 80019e0:	009b      	lsls	r3, r3, #2
 80019e2:	220f      	movs	r2, #15
 80019e4:	fa02 f303 	lsl.w	r3, r2, r3
 80019e8:	43db      	mvns	r3, r3
 80019ea:	68fa      	ldr	r2, [r7, #12]
 80019ec:	4013      	ands	r3, r2
 80019ee:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	4a40      	ldr	r2, [pc, #256]	; (8001af4 <HAL_GPIO_Init+0x2c0>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d013      	beq.n	8001a20 <HAL_GPIO_Init+0x1ec>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	4a3f      	ldr	r2, [pc, #252]	; (8001af8 <HAL_GPIO_Init+0x2c4>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d00d      	beq.n	8001a1c <HAL_GPIO_Init+0x1e8>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	4a3e      	ldr	r2, [pc, #248]	; (8001afc <HAL_GPIO_Init+0x2c8>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d007      	beq.n	8001a18 <HAL_GPIO_Init+0x1e4>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	4a3d      	ldr	r2, [pc, #244]	; (8001b00 <HAL_GPIO_Init+0x2cc>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d101      	bne.n	8001a14 <HAL_GPIO_Init+0x1e0>
 8001a10:	2303      	movs	r3, #3
 8001a12:	e006      	b.n	8001a22 <HAL_GPIO_Init+0x1ee>
 8001a14:	2304      	movs	r3, #4
 8001a16:	e004      	b.n	8001a22 <HAL_GPIO_Init+0x1ee>
 8001a18:	2302      	movs	r3, #2
 8001a1a:	e002      	b.n	8001a22 <HAL_GPIO_Init+0x1ee>
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	e000      	b.n	8001a22 <HAL_GPIO_Init+0x1ee>
 8001a20:	2300      	movs	r3, #0
 8001a22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a24:	f002 0203 	and.w	r2, r2, #3
 8001a28:	0092      	lsls	r2, r2, #2
 8001a2a:	4093      	lsls	r3, r2
 8001a2c:	68fa      	ldr	r2, [r7, #12]
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a32:	492f      	ldr	r1, [pc, #188]	; (8001af0 <HAL_GPIO_Init+0x2bc>)
 8001a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a36:	089b      	lsrs	r3, r3, #2
 8001a38:	3302      	adds	r3, #2
 8001a3a:	68fa      	ldr	r2, [r7, #12]
 8001a3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d006      	beq.n	8001a5a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a4c:	4b2d      	ldr	r3, [pc, #180]	; (8001b04 <HAL_GPIO_Init+0x2d0>)
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	492c      	ldr	r1, [pc, #176]	; (8001b04 <HAL_GPIO_Init+0x2d0>)
 8001a52:	69bb      	ldr	r3, [r7, #24]
 8001a54:	4313      	orrs	r3, r2
 8001a56:	600b      	str	r3, [r1, #0]
 8001a58:	e006      	b.n	8001a68 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a5a:	4b2a      	ldr	r3, [pc, #168]	; (8001b04 <HAL_GPIO_Init+0x2d0>)
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	69bb      	ldr	r3, [r7, #24]
 8001a60:	43db      	mvns	r3, r3
 8001a62:	4928      	ldr	r1, [pc, #160]	; (8001b04 <HAL_GPIO_Init+0x2d0>)
 8001a64:	4013      	ands	r3, r2
 8001a66:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d006      	beq.n	8001a82 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a74:	4b23      	ldr	r3, [pc, #140]	; (8001b04 <HAL_GPIO_Init+0x2d0>)
 8001a76:	685a      	ldr	r2, [r3, #4]
 8001a78:	4922      	ldr	r1, [pc, #136]	; (8001b04 <HAL_GPIO_Init+0x2d0>)
 8001a7a:	69bb      	ldr	r3, [r7, #24]
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	604b      	str	r3, [r1, #4]
 8001a80:	e006      	b.n	8001a90 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a82:	4b20      	ldr	r3, [pc, #128]	; (8001b04 <HAL_GPIO_Init+0x2d0>)
 8001a84:	685a      	ldr	r2, [r3, #4]
 8001a86:	69bb      	ldr	r3, [r7, #24]
 8001a88:	43db      	mvns	r3, r3
 8001a8a:	491e      	ldr	r1, [pc, #120]	; (8001b04 <HAL_GPIO_Init+0x2d0>)
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d006      	beq.n	8001aaa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a9c:	4b19      	ldr	r3, [pc, #100]	; (8001b04 <HAL_GPIO_Init+0x2d0>)
 8001a9e:	689a      	ldr	r2, [r3, #8]
 8001aa0:	4918      	ldr	r1, [pc, #96]	; (8001b04 <HAL_GPIO_Init+0x2d0>)
 8001aa2:	69bb      	ldr	r3, [r7, #24]
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	608b      	str	r3, [r1, #8]
 8001aa8:	e006      	b.n	8001ab8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001aaa:	4b16      	ldr	r3, [pc, #88]	; (8001b04 <HAL_GPIO_Init+0x2d0>)
 8001aac:	689a      	ldr	r2, [r3, #8]
 8001aae:	69bb      	ldr	r3, [r7, #24]
 8001ab0:	43db      	mvns	r3, r3
 8001ab2:	4914      	ldr	r1, [pc, #80]	; (8001b04 <HAL_GPIO_Init+0x2d0>)
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d021      	beq.n	8001b08 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ac4:	4b0f      	ldr	r3, [pc, #60]	; (8001b04 <HAL_GPIO_Init+0x2d0>)
 8001ac6:	68da      	ldr	r2, [r3, #12]
 8001ac8:	490e      	ldr	r1, [pc, #56]	; (8001b04 <HAL_GPIO_Init+0x2d0>)
 8001aca:	69bb      	ldr	r3, [r7, #24]
 8001acc:	4313      	orrs	r3, r2
 8001ace:	60cb      	str	r3, [r1, #12]
 8001ad0:	e021      	b.n	8001b16 <HAL_GPIO_Init+0x2e2>
 8001ad2:	bf00      	nop
 8001ad4:	10320000 	.word	0x10320000
 8001ad8:	10310000 	.word	0x10310000
 8001adc:	10220000 	.word	0x10220000
 8001ae0:	10210000 	.word	0x10210000
 8001ae4:	10120000 	.word	0x10120000
 8001ae8:	10110000 	.word	0x10110000
 8001aec:	40021000 	.word	0x40021000
 8001af0:	40010000 	.word	0x40010000
 8001af4:	40010800 	.word	0x40010800
 8001af8:	40010c00 	.word	0x40010c00
 8001afc:	40011000 	.word	0x40011000
 8001b00:	40011400 	.word	0x40011400
 8001b04:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b08:	4b0b      	ldr	r3, [pc, #44]	; (8001b38 <HAL_GPIO_Init+0x304>)
 8001b0a:	68da      	ldr	r2, [r3, #12]
 8001b0c:	69bb      	ldr	r3, [r7, #24]
 8001b0e:	43db      	mvns	r3, r3
 8001b10:	4909      	ldr	r1, [pc, #36]	; (8001b38 <HAL_GPIO_Init+0x304>)
 8001b12:	4013      	ands	r3, r2
 8001b14:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b18:	3301      	adds	r3, #1
 8001b1a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b22:	fa22 f303 	lsr.w	r3, r2, r3
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	f47f ae8e 	bne.w	8001848 <HAL_GPIO_Init+0x14>
  }
}
 8001b2c:	bf00      	nop
 8001b2e:	bf00      	nop
 8001b30:	372c      	adds	r7, #44	; 0x2c
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bc80      	pop	{r7}
 8001b36:	4770      	bx	lr
 8001b38:	40010400 	.word	0x40010400

08001b3c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b085      	sub	sp, #20
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	460b      	mov	r3, r1
 8001b46:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	689a      	ldr	r2, [r3, #8]
 8001b4c:	887b      	ldrh	r3, [r7, #2]
 8001b4e:	4013      	ands	r3, r2
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d002      	beq.n	8001b5a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b54:	2301      	movs	r3, #1
 8001b56:	73fb      	strb	r3, [r7, #15]
 8001b58:	e001      	b.n	8001b5e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	3714      	adds	r7, #20
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bc80      	pop	{r7}
 8001b68:	4770      	bx	lr

08001b6a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b6a:	b480      	push	{r7}
 8001b6c:	b083      	sub	sp, #12
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	6078      	str	r0, [r7, #4]
 8001b72:	460b      	mov	r3, r1
 8001b74:	807b      	strh	r3, [r7, #2]
 8001b76:	4613      	mov	r3, r2
 8001b78:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b7a:	787b      	ldrb	r3, [r7, #1]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d003      	beq.n	8001b88 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b80:	887a      	ldrh	r2, [r7, #2]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b86:	e003      	b.n	8001b90 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b88:	887b      	ldrh	r3, [r7, #2]
 8001b8a:	041a      	lsls	r2, r3, #16
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	611a      	str	r2, [r3, #16]
}
 8001b90:	bf00      	nop
 8001b92:	370c      	adds	r7, #12
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bc80      	pop	{r7}
 8001b98:	4770      	bx	lr
	...

08001b9c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b086      	sub	sp, #24
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d101      	bne.n	8001bae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e26c      	b.n	8002088 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 0301 	and.w	r3, r3, #1
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	f000 8087 	beq.w	8001cca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bbc:	4b92      	ldr	r3, [pc, #584]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f003 030c 	and.w	r3, r3, #12
 8001bc4:	2b04      	cmp	r3, #4
 8001bc6:	d00c      	beq.n	8001be2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001bc8:	4b8f      	ldr	r3, [pc, #572]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f003 030c 	and.w	r3, r3, #12
 8001bd0:	2b08      	cmp	r3, #8
 8001bd2:	d112      	bne.n	8001bfa <HAL_RCC_OscConfig+0x5e>
 8001bd4:	4b8c      	ldr	r3, [pc, #560]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001be0:	d10b      	bne.n	8001bfa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001be2:	4b89      	ldr	r3, [pc, #548]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d06c      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x12c>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d168      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e246      	b.n	8002088 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c02:	d106      	bne.n	8001c12 <HAL_RCC_OscConfig+0x76>
 8001c04:	4b80      	ldr	r3, [pc, #512]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a7f      	ldr	r2, [pc, #508]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001c0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c0e:	6013      	str	r3, [r2, #0]
 8001c10:	e02e      	b.n	8001c70 <HAL_RCC_OscConfig+0xd4>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d10c      	bne.n	8001c34 <HAL_RCC_OscConfig+0x98>
 8001c1a:	4b7b      	ldr	r3, [pc, #492]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a7a      	ldr	r2, [pc, #488]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001c20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c24:	6013      	str	r3, [r2, #0]
 8001c26:	4b78      	ldr	r3, [pc, #480]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a77      	ldr	r2, [pc, #476]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001c2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c30:	6013      	str	r3, [r2, #0]
 8001c32:	e01d      	b.n	8001c70 <HAL_RCC_OscConfig+0xd4>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c3c:	d10c      	bne.n	8001c58 <HAL_RCC_OscConfig+0xbc>
 8001c3e:	4b72      	ldr	r3, [pc, #456]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a71      	ldr	r2, [pc, #452]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001c44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c48:	6013      	str	r3, [r2, #0]
 8001c4a:	4b6f      	ldr	r3, [pc, #444]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a6e      	ldr	r2, [pc, #440]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001c50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c54:	6013      	str	r3, [r2, #0]
 8001c56:	e00b      	b.n	8001c70 <HAL_RCC_OscConfig+0xd4>
 8001c58:	4b6b      	ldr	r3, [pc, #428]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a6a      	ldr	r2, [pc, #424]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001c5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c62:	6013      	str	r3, [r2, #0]
 8001c64:	4b68      	ldr	r3, [pc, #416]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a67      	ldr	r2, [pc, #412]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001c6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c6e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d013      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c78:	f7ff fcca 	bl	8001610 <HAL_GetTick>
 8001c7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c7e:	e008      	b.n	8001c92 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c80:	f7ff fcc6 	bl	8001610 <HAL_GetTick>
 8001c84:	4602      	mov	r2, r0
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	2b64      	cmp	r3, #100	; 0x64
 8001c8c:	d901      	bls.n	8001c92 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	e1fa      	b.n	8002088 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c92:	4b5d      	ldr	r3, [pc, #372]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d0f0      	beq.n	8001c80 <HAL_RCC_OscConfig+0xe4>
 8001c9e:	e014      	b.n	8001cca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca0:	f7ff fcb6 	bl	8001610 <HAL_GetTick>
 8001ca4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ca6:	e008      	b.n	8001cba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ca8:	f7ff fcb2 	bl	8001610 <HAL_GetTick>
 8001cac:	4602      	mov	r2, r0
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	2b64      	cmp	r3, #100	; 0x64
 8001cb4:	d901      	bls.n	8001cba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e1e6      	b.n	8002088 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cba:	4b53      	ldr	r3, [pc, #332]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d1f0      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x10c>
 8001cc6:	e000      	b.n	8001cca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0302 	and.w	r3, r3, #2
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d063      	beq.n	8001d9e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001cd6:	4b4c      	ldr	r3, [pc, #304]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	f003 030c 	and.w	r3, r3, #12
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d00b      	beq.n	8001cfa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001ce2:	4b49      	ldr	r3, [pc, #292]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	f003 030c 	and.w	r3, r3, #12
 8001cea:	2b08      	cmp	r3, #8
 8001cec:	d11c      	bne.n	8001d28 <HAL_RCC_OscConfig+0x18c>
 8001cee:	4b46      	ldr	r3, [pc, #280]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d116      	bne.n	8001d28 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cfa:	4b43      	ldr	r3, [pc, #268]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 0302 	and.w	r3, r3, #2
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d005      	beq.n	8001d12 <HAL_RCC_OscConfig+0x176>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	691b      	ldr	r3, [r3, #16]
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d001      	beq.n	8001d12 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e1ba      	b.n	8002088 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d12:	4b3d      	ldr	r3, [pc, #244]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	695b      	ldr	r3, [r3, #20]
 8001d1e:	00db      	lsls	r3, r3, #3
 8001d20:	4939      	ldr	r1, [pc, #228]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001d22:	4313      	orrs	r3, r2
 8001d24:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d26:	e03a      	b.n	8001d9e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	691b      	ldr	r3, [r3, #16]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d020      	beq.n	8001d72 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d30:	4b36      	ldr	r3, [pc, #216]	; (8001e0c <HAL_RCC_OscConfig+0x270>)
 8001d32:	2201      	movs	r2, #1
 8001d34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d36:	f7ff fc6b 	bl	8001610 <HAL_GetTick>
 8001d3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d3c:	e008      	b.n	8001d50 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d3e:	f7ff fc67 	bl	8001610 <HAL_GetTick>
 8001d42:	4602      	mov	r2, r0
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	1ad3      	subs	r3, r2, r3
 8001d48:	2b02      	cmp	r3, #2
 8001d4a:	d901      	bls.n	8001d50 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d4c:	2303      	movs	r3, #3
 8001d4e:	e19b      	b.n	8002088 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d50:	4b2d      	ldr	r3, [pc, #180]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 0302 	and.w	r3, r3, #2
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d0f0      	beq.n	8001d3e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d5c:	4b2a      	ldr	r3, [pc, #168]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	695b      	ldr	r3, [r3, #20]
 8001d68:	00db      	lsls	r3, r3, #3
 8001d6a:	4927      	ldr	r1, [pc, #156]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	600b      	str	r3, [r1, #0]
 8001d70:	e015      	b.n	8001d9e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d72:	4b26      	ldr	r3, [pc, #152]	; (8001e0c <HAL_RCC_OscConfig+0x270>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d78:	f7ff fc4a 	bl	8001610 <HAL_GetTick>
 8001d7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d7e:	e008      	b.n	8001d92 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d80:	f7ff fc46 	bl	8001610 <HAL_GetTick>
 8001d84:	4602      	mov	r2, r0
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	2b02      	cmp	r3, #2
 8001d8c:	d901      	bls.n	8001d92 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	e17a      	b.n	8002088 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d92:	4b1d      	ldr	r3, [pc, #116]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 0302 	and.w	r3, r3, #2
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d1f0      	bne.n	8001d80 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 0308 	and.w	r3, r3, #8
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d03a      	beq.n	8001e20 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	699b      	ldr	r3, [r3, #24]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d019      	beq.n	8001de6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001db2:	4b17      	ldr	r3, [pc, #92]	; (8001e10 <HAL_RCC_OscConfig+0x274>)
 8001db4:	2201      	movs	r2, #1
 8001db6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001db8:	f7ff fc2a 	bl	8001610 <HAL_GetTick>
 8001dbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dbe:	e008      	b.n	8001dd2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dc0:	f7ff fc26 	bl	8001610 <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d901      	bls.n	8001dd2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e15a      	b.n	8002088 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dd2:	4b0d      	ldr	r3, [pc, #52]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd6:	f003 0302 	and.w	r3, r3, #2
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d0f0      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001dde:	2001      	movs	r0, #1
 8001de0:	f000 fad8 	bl	8002394 <RCC_Delay>
 8001de4:	e01c      	b.n	8001e20 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001de6:	4b0a      	ldr	r3, [pc, #40]	; (8001e10 <HAL_RCC_OscConfig+0x274>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dec:	f7ff fc10 	bl	8001610 <HAL_GetTick>
 8001df0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001df2:	e00f      	b.n	8001e14 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001df4:	f7ff fc0c 	bl	8001610 <HAL_GetTick>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	2b02      	cmp	r3, #2
 8001e00:	d908      	bls.n	8001e14 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001e02:	2303      	movs	r3, #3
 8001e04:	e140      	b.n	8002088 <HAL_RCC_OscConfig+0x4ec>
 8001e06:	bf00      	nop
 8001e08:	40021000 	.word	0x40021000
 8001e0c:	42420000 	.word	0x42420000
 8001e10:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e14:	4b9e      	ldr	r3, [pc, #632]	; (8002090 <HAL_RCC_OscConfig+0x4f4>)
 8001e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e18:	f003 0302 	and.w	r3, r3, #2
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d1e9      	bne.n	8001df4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0304 	and.w	r3, r3, #4
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	f000 80a6 	beq.w	8001f7a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e32:	4b97      	ldr	r3, [pc, #604]	; (8002090 <HAL_RCC_OscConfig+0x4f4>)
 8001e34:	69db      	ldr	r3, [r3, #28]
 8001e36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d10d      	bne.n	8001e5a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e3e:	4b94      	ldr	r3, [pc, #592]	; (8002090 <HAL_RCC_OscConfig+0x4f4>)
 8001e40:	69db      	ldr	r3, [r3, #28]
 8001e42:	4a93      	ldr	r2, [pc, #588]	; (8002090 <HAL_RCC_OscConfig+0x4f4>)
 8001e44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e48:	61d3      	str	r3, [r2, #28]
 8001e4a:	4b91      	ldr	r3, [pc, #580]	; (8002090 <HAL_RCC_OscConfig+0x4f4>)
 8001e4c:	69db      	ldr	r3, [r3, #28]
 8001e4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e52:	60bb      	str	r3, [r7, #8]
 8001e54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e56:	2301      	movs	r3, #1
 8001e58:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e5a:	4b8e      	ldr	r3, [pc, #568]	; (8002094 <HAL_RCC_OscConfig+0x4f8>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d118      	bne.n	8001e98 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e66:	4b8b      	ldr	r3, [pc, #556]	; (8002094 <HAL_RCC_OscConfig+0x4f8>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a8a      	ldr	r2, [pc, #552]	; (8002094 <HAL_RCC_OscConfig+0x4f8>)
 8001e6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e72:	f7ff fbcd 	bl	8001610 <HAL_GetTick>
 8001e76:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e78:	e008      	b.n	8001e8c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e7a:	f7ff fbc9 	bl	8001610 <HAL_GetTick>
 8001e7e:	4602      	mov	r2, r0
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	1ad3      	subs	r3, r2, r3
 8001e84:	2b64      	cmp	r3, #100	; 0x64
 8001e86:	d901      	bls.n	8001e8c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001e88:	2303      	movs	r3, #3
 8001e8a:	e0fd      	b.n	8002088 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e8c:	4b81      	ldr	r3, [pc, #516]	; (8002094 <HAL_RCC_OscConfig+0x4f8>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d0f0      	beq.n	8001e7a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d106      	bne.n	8001eae <HAL_RCC_OscConfig+0x312>
 8001ea0:	4b7b      	ldr	r3, [pc, #492]	; (8002090 <HAL_RCC_OscConfig+0x4f4>)
 8001ea2:	6a1b      	ldr	r3, [r3, #32]
 8001ea4:	4a7a      	ldr	r2, [pc, #488]	; (8002090 <HAL_RCC_OscConfig+0x4f4>)
 8001ea6:	f043 0301 	orr.w	r3, r3, #1
 8001eaa:	6213      	str	r3, [r2, #32]
 8001eac:	e02d      	b.n	8001f0a <HAL_RCC_OscConfig+0x36e>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	68db      	ldr	r3, [r3, #12]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d10c      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x334>
 8001eb6:	4b76      	ldr	r3, [pc, #472]	; (8002090 <HAL_RCC_OscConfig+0x4f4>)
 8001eb8:	6a1b      	ldr	r3, [r3, #32]
 8001eba:	4a75      	ldr	r2, [pc, #468]	; (8002090 <HAL_RCC_OscConfig+0x4f4>)
 8001ebc:	f023 0301 	bic.w	r3, r3, #1
 8001ec0:	6213      	str	r3, [r2, #32]
 8001ec2:	4b73      	ldr	r3, [pc, #460]	; (8002090 <HAL_RCC_OscConfig+0x4f4>)
 8001ec4:	6a1b      	ldr	r3, [r3, #32]
 8001ec6:	4a72      	ldr	r2, [pc, #456]	; (8002090 <HAL_RCC_OscConfig+0x4f4>)
 8001ec8:	f023 0304 	bic.w	r3, r3, #4
 8001ecc:	6213      	str	r3, [r2, #32]
 8001ece:	e01c      	b.n	8001f0a <HAL_RCC_OscConfig+0x36e>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	2b05      	cmp	r3, #5
 8001ed6:	d10c      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x356>
 8001ed8:	4b6d      	ldr	r3, [pc, #436]	; (8002090 <HAL_RCC_OscConfig+0x4f4>)
 8001eda:	6a1b      	ldr	r3, [r3, #32]
 8001edc:	4a6c      	ldr	r2, [pc, #432]	; (8002090 <HAL_RCC_OscConfig+0x4f4>)
 8001ede:	f043 0304 	orr.w	r3, r3, #4
 8001ee2:	6213      	str	r3, [r2, #32]
 8001ee4:	4b6a      	ldr	r3, [pc, #424]	; (8002090 <HAL_RCC_OscConfig+0x4f4>)
 8001ee6:	6a1b      	ldr	r3, [r3, #32]
 8001ee8:	4a69      	ldr	r2, [pc, #420]	; (8002090 <HAL_RCC_OscConfig+0x4f4>)
 8001eea:	f043 0301 	orr.w	r3, r3, #1
 8001eee:	6213      	str	r3, [r2, #32]
 8001ef0:	e00b      	b.n	8001f0a <HAL_RCC_OscConfig+0x36e>
 8001ef2:	4b67      	ldr	r3, [pc, #412]	; (8002090 <HAL_RCC_OscConfig+0x4f4>)
 8001ef4:	6a1b      	ldr	r3, [r3, #32]
 8001ef6:	4a66      	ldr	r2, [pc, #408]	; (8002090 <HAL_RCC_OscConfig+0x4f4>)
 8001ef8:	f023 0301 	bic.w	r3, r3, #1
 8001efc:	6213      	str	r3, [r2, #32]
 8001efe:	4b64      	ldr	r3, [pc, #400]	; (8002090 <HAL_RCC_OscConfig+0x4f4>)
 8001f00:	6a1b      	ldr	r3, [r3, #32]
 8001f02:	4a63      	ldr	r2, [pc, #396]	; (8002090 <HAL_RCC_OscConfig+0x4f4>)
 8001f04:	f023 0304 	bic.w	r3, r3, #4
 8001f08:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	68db      	ldr	r3, [r3, #12]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d015      	beq.n	8001f3e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f12:	f7ff fb7d 	bl	8001610 <HAL_GetTick>
 8001f16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f18:	e00a      	b.n	8001f30 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f1a:	f7ff fb79 	bl	8001610 <HAL_GetTick>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	1ad3      	subs	r3, r2, r3
 8001f24:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d901      	bls.n	8001f30 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	e0ab      	b.n	8002088 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f30:	4b57      	ldr	r3, [pc, #348]	; (8002090 <HAL_RCC_OscConfig+0x4f4>)
 8001f32:	6a1b      	ldr	r3, [r3, #32]
 8001f34:	f003 0302 	and.w	r3, r3, #2
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d0ee      	beq.n	8001f1a <HAL_RCC_OscConfig+0x37e>
 8001f3c:	e014      	b.n	8001f68 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f3e:	f7ff fb67 	bl	8001610 <HAL_GetTick>
 8001f42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f44:	e00a      	b.n	8001f5c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f46:	f7ff fb63 	bl	8001610 <HAL_GetTick>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	1ad3      	subs	r3, r2, r3
 8001f50:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d901      	bls.n	8001f5c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001f58:	2303      	movs	r3, #3
 8001f5a:	e095      	b.n	8002088 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f5c:	4b4c      	ldr	r3, [pc, #304]	; (8002090 <HAL_RCC_OscConfig+0x4f4>)
 8001f5e:	6a1b      	ldr	r3, [r3, #32]
 8001f60:	f003 0302 	and.w	r3, r3, #2
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d1ee      	bne.n	8001f46 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f68:	7dfb      	ldrb	r3, [r7, #23]
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d105      	bne.n	8001f7a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f6e:	4b48      	ldr	r3, [pc, #288]	; (8002090 <HAL_RCC_OscConfig+0x4f4>)
 8001f70:	69db      	ldr	r3, [r3, #28]
 8001f72:	4a47      	ldr	r2, [pc, #284]	; (8002090 <HAL_RCC_OscConfig+0x4f4>)
 8001f74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f78:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	69db      	ldr	r3, [r3, #28]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	f000 8081 	beq.w	8002086 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f84:	4b42      	ldr	r3, [pc, #264]	; (8002090 <HAL_RCC_OscConfig+0x4f4>)
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f003 030c 	and.w	r3, r3, #12
 8001f8c:	2b08      	cmp	r3, #8
 8001f8e:	d061      	beq.n	8002054 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	69db      	ldr	r3, [r3, #28]
 8001f94:	2b02      	cmp	r3, #2
 8001f96:	d146      	bne.n	8002026 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f98:	4b3f      	ldr	r3, [pc, #252]	; (8002098 <HAL_RCC_OscConfig+0x4fc>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f9e:	f7ff fb37 	bl	8001610 <HAL_GetTick>
 8001fa2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fa4:	e008      	b.n	8001fb8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fa6:	f7ff fb33 	bl	8001610 <HAL_GetTick>
 8001faa:	4602      	mov	r2, r0
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	1ad3      	subs	r3, r2, r3
 8001fb0:	2b02      	cmp	r3, #2
 8001fb2:	d901      	bls.n	8001fb8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	e067      	b.n	8002088 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fb8:	4b35      	ldr	r3, [pc, #212]	; (8002090 <HAL_RCC_OscConfig+0x4f4>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d1f0      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6a1b      	ldr	r3, [r3, #32]
 8001fc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fcc:	d108      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001fce:	4b30      	ldr	r3, [pc, #192]	; (8002090 <HAL_RCC_OscConfig+0x4f4>)
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	492d      	ldr	r1, [pc, #180]	; (8002090 <HAL_RCC_OscConfig+0x4f4>)
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fe0:	4b2b      	ldr	r3, [pc, #172]	; (8002090 <HAL_RCC_OscConfig+0x4f4>)
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6a19      	ldr	r1, [r3, #32]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff0:	430b      	orrs	r3, r1
 8001ff2:	4927      	ldr	r1, [pc, #156]	; (8002090 <HAL_RCC_OscConfig+0x4f4>)
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ff8:	4b27      	ldr	r3, [pc, #156]	; (8002098 <HAL_RCC_OscConfig+0x4fc>)
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ffe:	f7ff fb07 	bl	8001610 <HAL_GetTick>
 8002002:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002004:	e008      	b.n	8002018 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002006:	f7ff fb03 	bl	8001610 <HAL_GetTick>
 800200a:	4602      	mov	r2, r0
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	1ad3      	subs	r3, r2, r3
 8002010:	2b02      	cmp	r3, #2
 8002012:	d901      	bls.n	8002018 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002014:	2303      	movs	r3, #3
 8002016:	e037      	b.n	8002088 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002018:	4b1d      	ldr	r3, [pc, #116]	; (8002090 <HAL_RCC_OscConfig+0x4f4>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002020:	2b00      	cmp	r3, #0
 8002022:	d0f0      	beq.n	8002006 <HAL_RCC_OscConfig+0x46a>
 8002024:	e02f      	b.n	8002086 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002026:	4b1c      	ldr	r3, [pc, #112]	; (8002098 <HAL_RCC_OscConfig+0x4fc>)
 8002028:	2200      	movs	r2, #0
 800202a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800202c:	f7ff faf0 	bl	8001610 <HAL_GetTick>
 8002030:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002032:	e008      	b.n	8002046 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002034:	f7ff faec 	bl	8001610 <HAL_GetTick>
 8002038:	4602      	mov	r2, r0
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	2b02      	cmp	r3, #2
 8002040:	d901      	bls.n	8002046 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002042:	2303      	movs	r3, #3
 8002044:	e020      	b.n	8002088 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002046:	4b12      	ldr	r3, [pc, #72]	; (8002090 <HAL_RCC_OscConfig+0x4f4>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d1f0      	bne.n	8002034 <HAL_RCC_OscConfig+0x498>
 8002052:	e018      	b.n	8002086 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	69db      	ldr	r3, [r3, #28]
 8002058:	2b01      	cmp	r3, #1
 800205a:	d101      	bne.n	8002060 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	e013      	b.n	8002088 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002060:	4b0b      	ldr	r3, [pc, #44]	; (8002090 <HAL_RCC_OscConfig+0x4f4>)
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6a1b      	ldr	r3, [r3, #32]
 8002070:	429a      	cmp	r2, r3
 8002072:	d106      	bne.n	8002082 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800207e:	429a      	cmp	r2, r3
 8002080:	d001      	beq.n	8002086 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e000      	b.n	8002088 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002086:	2300      	movs	r3, #0
}
 8002088:	4618      	mov	r0, r3
 800208a:	3718      	adds	r7, #24
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}
 8002090:	40021000 	.word	0x40021000
 8002094:	40007000 	.word	0x40007000
 8002098:	42420060 	.word	0x42420060

0800209c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b084      	sub	sp, #16
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
 80020a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d101      	bne.n	80020b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	e0d0      	b.n	8002252 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020b0:	4b6a      	ldr	r3, [pc, #424]	; (800225c <HAL_RCC_ClockConfig+0x1c0>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 0307 	and.w	r3, r3, #7
 80020b8:	683a      	ldr	r2, [r7, #0]
 80020ba:	429a      	cmp	r2, r3
 80020bc:	d910      	bls.n	80020e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020be:	4b67      	ldr	r3, [pc, #412]	; (800225c <HAL_RCC_ClockConfig+0x1c0>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f023 0207 	bic.w	r2, r3, #7
 80020c6:	4965      	ldr	r1, [pc, #404]	; (800225c <HAL_RCC_ClockConfig+0x1c0>)
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	4313      	orrs	r3, r2
 80020cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ce:	4b63      	ldr	r3, [pc, #396]	; (800225c <HAL_RCC_ClockConfig+0x1c0>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 0307 	and.w	r3, r3, #7
 80020d6:	683a      	ldr	r2, [r7, #0]
 80020d8:	429a      	cmp	r2, r3
 80020da:	d001      	beq.n	80020e0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
 80020de:	e0b8      	b.n	8002252 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f003 0302 	and.w	r3, r3, #2
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d020      	beq.n	800212e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 0304 	and.w	r3, r3, #4
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d005      	beq.n	8002104 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020f8:	4b59      	ldr	r3, [pc, #356]	; (8002260 <HAL_RCC_ClockConfig+0x1c4>)
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	4a58      	ldr	r2, [pc, #352]	; (8002260 <HAL_RCC_ClockConfig+0x1c4>)
 80020fe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002102:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 0308 	and.w	r3, r3, #8
 800210c:	2b00      	cmp	r3, #0
 800210e:	d005      	beq.n	800211c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002110:	4b53      	ldr	r3, [pc, #332]	; (8002260 <HAL_RCC_ClockConfig+0x1c4>)
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	4a52      	ldr	r2, [pc, #328]	; (8002260 <HAL_RCC_ClockConfig+0x1c4>)
 8002116:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800211a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800211c:	4b50      	ldr	r3, [pc, #320]	; (8002260 <HAL_RCC_ClockConfig+0x1c4>)
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	494d      	ldr	r1, [pc, #308]	; (8002260 <HAL_RCC_ClockConfig+0x1c4>)
 800212a:	4313      	orrs	r3, r2
 800212c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0301 	and.w	r3, r3, #1
 8002136:	2b00      	cmp	r3, #0
 8002138:	d040      	beq.n	80021bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	2b01      	cmp	r3, #1
 8002140:	d107      	bne.n	8002152 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002142:	4b47      	ldr	r3, [pc, #284]	; (8002260 <HAL_RCC_ClockConfig+0x1c4>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800214a:	2b00      	cmp	r3, #0
 800214c:	d115      	bne.n	800217a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e07f      	b.n	8002252 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	2b02      	cmp	r3, #2
 8002158:	d107      	bne.n	800216a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800215a:	4b41      	ldr	r3, [pc, #260]	; (8002260 <HAL_RCC_ClockConfig+0x1c4>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d109      	bne.n	800217a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e073      	b.n	8002252 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800216a:	4b3d      	ldr	r3, [pc, #244]	; (8002260 <HAL_RCC_ClockConfig+0x1c4>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0302 	and.w	r3, r3, #2
 8002172:	2b00      	cmp	r3, #0
 8002174:	d101      	bne.n	800217a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e06b      	b.n	8002252 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800217a:	4b39      	ldr	r3, [pc, #228]	; (8002260 <HAL_RCC_ClockConfig+0x1c4>)
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	f023 0203 	bic.w	r2, r3, #3
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	4936      	ldr	r1, [pc, #216]	; (8002260 <HAL_RCC_ClockConfig+0x1c4>)
 8002188:	4313      	orrs	r3, r2
 800218a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800218c:	f7ff fa40 	bl	8001610 <HAL_GetTick>
 8002190:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002192:	e00a      	b.n	80021aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002194:	f7ff fa3c 	bl	8001610 <HAL_GetTick>
 8002198:	4602      	mov	r2, r0
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	f241 3288 	movw	r2, #5000	; 0x1388
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d901      	bls.n	80021aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021a6:	2303      	movs	r3, #3
 80021a8:	e053      	b.n	8002252 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021aa:	4b2d      	ldr	r3, [pc, #180]	; (8002260 <HAL_RCC_ClockConfig+0x1c4>)
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	f003 020c 	and.w	r2, r3, #12
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d1eb      	bne.n	8002194 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80021bc:	4b27      	ldr	r3, [pc, #156]	; (800225c <HAL_RCC_ClockConfig+0x1c0>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 0307 	and.w	r3, r3, #7
 80021c4:	683a      	ldr	r2, [r7, #0]
 80021c6:	429a      	cmp	r2, r3
 80021c8:	d210      	bcs.n	80021ec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ca:	4b24      	ldr	r3, [pc, #144]	; (800225c <HAL_RCC_ClockConfig+0x1c0>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f023 0207 	bic.w	r2, r3, #7
 80021d2:	4922      	ldr	r1, [pc, #136]	; (800225c <HAL_RCC_ClockConfig+0x1c0>)
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	4313      	orrs	r3, r2
 80021d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021da:	4b20      	ldr	r3, [pc, #128]	; (800225c <HAL_RCC_ClockConfig+0x1c0>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 0307 	and.w	r3, r3, #7
 80021e2:	683a      	ldr	r2, [r7, #0]
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d001      	beq.n	80021ec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e032      	b.n	8002252 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 0304 	and.w	r3, r3, #4
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d008      	beq.n	800220a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021f8:	4b19      	ldr	r3, [pc, #100]	; (8002260 <HAL_RCC_ClockConfig+0x1c4>)
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	4916      	ldr	r1, [pc, #88]	; (8002260 <HAL_RCC_ClockConfig+0x1c4>)
 8002206:	4313      	orrs	r3, r2
 8002208:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0308 	and.w	r3, r3, #8
 8002212:	2b00      	cmp	r3, #0
 8002214:	d009      	beq.n	800222a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002216:	4b12      	ldr	r3, [pc, #72]	; (8002260 <HAL_RCC_ClockConfig+0x1c4>)
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	691b      	ldr	r3, [r3, #16]
 8002222:	00db      	lsls	r3, r3, #3
 8002224:	490e      	ldr	r1, [pc, #56]	; (8002260 <HAL_RCC_ClockConfig+0x1c4>)
 8002226:	4313      	orrs	r3, r2
 8002228:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800222a:	f000 f821 	bl	8002270 <HAL_RCC_GetSysClockFreq>
 800222e:	4602      	mov	r2, r0
 8002230:	4b0b      	ldr	r3, [pc, #44]	; (8002260 <HAL_RCC_ClockConfig+0x1c4>)
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	091b      	lsrs	r3, r3, #4
 8002236:	f003 030f 	and.w	r3, r3, #15
 800223a:	490a      	ldr	r1, [pc, #40]	; (8002264 <HAL_RCC_ClockConfig+0x1c8>)
 800223c:	5ccb      	ldrb	r3, [r1, r3]
 800223e:	fa22 f303 	lsr.w	r3, r2, r3
 8002242:	4a09      	ldr	r2, [pc, #36]	; (8002268 <HAL_RCC_ClockConfig+0x1cc>)
 8002244:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002246:	4b09      	ldr	r3, [pc, #36]	; (800226c <HAL_RCC_ClockConfig+0x1d0>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4618      	mov	r0, r3
 800224c:	f7ff f99e 	bl	800158c <HAL_InitTick>

  return HAL_OK;
 8002250:	2300      	movs	r3, #0
}
 8002252:	4618      	mov	r0, r3
 8002254:	3710      	adds	r7, #16
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	40022000 	.word	0x40022000
 8002260:	40021000 	.word	0x40021000
 8002264:	08004474 	.word	0x08004474
 8002268:	20000000 	.word	0x20000000
 800226c:	20000004 	.word	0x20000004

08002270 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002270:	b490      	push	{r4, r7}
 8002272:	b08a      	sub	sp, #40	; 0x28
 8002274:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002276:	4b2a      	ldr	r3, [pc, #168]	; (8002320 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002278:	1d3c      	adds	r4, r7, #4
 800227a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800227c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002280:	f240 2301 	movw	r3, #513	; 0x201
 8002284:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002286:	2300      	movs	r3, #0
 8002288:	61fb      	str	r3, [r7, #28]
 800228a:	2300      	movs	r3, #0
 800228c:	61bb      	str	r3, [r7, #24]
 800228e:	2300      	movs	r3, #0
 8002290:	627b      	str	r3, [r7, #36]	; 0x24
 8002292:	2300      	movs	r3, #0
 8002294:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002296:	2300      	movs	r3, #0
 8002298:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800229a:	4b22      	ldr	r3, [pc, #136]	; (8002324 <HAL_RCC_GetSysClockFreq+0xb4>)
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80022a0:	69fb      	ldr	r3, [r7, #28]
 80022a2:	f003 030c 	and.w	r3, r3, #12
 80022a6:	2b04      	cmp	r3, #4
 80022a8:	d002      	beq.n	80022b0 <HAL_RCC_GetSysClockFreq+0x40>
 80022aa:	2b08      	cmp	r3, #8
 80022ac:	d003      	beq.n	80022b6 <HAL_RCC_GetSysClockFreq+0x46>
 80022ae:	e02d      	b.n	800230c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80022b0:	4b1d      	ldr	r3, [pc, #116]	; (8002328 <HAL_RCC_GetSysClockFreq+0xb8>)
 80022b2:	623b      	str	r3, [r7, #32]
      break;
 80022b4:	e02d      	b.n	8002312 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	0c9b      	lsrs	r3, r3, #18
 80022ba:	f003 030f 	and.w	r3, r3, #15
 80022be:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80022c2:	4413      	add	r3, r2
 80022c4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80022c8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d013      	beq.n	80022fc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80022d4:	4b13      	ldr	r3, [pc, #76]	; (8002324 <HAL_RCC_GetSysClockFreq+0xb4>)
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	0c5b      	lsrs	r3, r3, #17
 80022da:	f003 0301 	and.w	r3, r3, #1
 80022de:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80022e2:	4413      	add	r3, r2
 80022e4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80022e8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	4a0e      	ldr	r2, [pc, #56]	; (8002328 <HAL_RCC_GetSysClockFreq+0xb8>)
 80022ee:	fb02 f203 	mul.w	r2, r2, r3
 80022f2:	69bb      	ldr	r3, [r7, #24]
 80022f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80022f8:	627b      	str	r3, [r7, #36]	; 0x24
 80022fa:	e004      	b.n	8002306 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	4a0b      	ldr	r2, [pc, #44]	; (800232c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002300:	fb02 f303 	mul.w	r3, r2, r3
 8002304:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002308:	623b      	str	r3, [r7, #32]
      break;
 800230a:	e002      	b.n	8002312 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800230c:	4b06      	ldr	r3, [pc, #24]	; (8002328 <HAL_RCC_GetSysClockFreq+0xb8>)
 800230e:	623b      	str	r3, [r7, #32]
      break;
 8002310:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002312:	6a3b      	ldr	r3, [r7, #32]
}
 8002314:	4618      	mov	r0, r3
 8002316:	3728      	adds	r7, #40	; 0x28
 8002318:	46bd      	mov	sp, r7
 800231a:	bc90      	pop	{r4, r7}
 800231c:	4770      	bx	lr
 800231e:	bf00      	nop
 8002320:	08004444 	.word	0x08004444
 8002324:	40021000 	.word	0x40021000
 8002328:	007a1200 	.word	0x007a1200
 800232c:	003d0900 	.word	0x003d0900

08002330 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002330:	b480      	push	{r7}
 8002332:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002334:	4b02      	ldr	r3, [pc, #8]	; (8002340 <HAL_RCC_GetHCLKFreq+0x10>)
 8002336:	681b      	ldr	r3, [r3, #0]
}
 8002338:	4618      	mov	r0, r3
 800233a:	46bd      	mov	sp, r7
 800233c:	bc80      	pop	{r7}
 800233e:	4770      	bx	lr
 8002340:	20000000 	.word	0x20000000

08002344 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002348:	f7ff fff2 	bl	8002330 <HAL_RCC_GetHCLKFreq>
 800234c:	4602      	mov	r2, r0
 800234e:	4b05      	ldr	r3, [pc, #20]	; (8002364 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	0a1b      	lsrs	r3, r3, #8
 8002354:	f003 0307 	and.w	r3, r3, #7
 8002358:	4903      	ldr	r1, [pc, #12]	; (8002368 <HAL_RCC_GetPCLK1Freq+0x24>)
 800235a:	5ccb      	ldrb	r3, [r1, r3]
 800235c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002360:	4618      	mov	r0, r3
 8002362:	bd80      	pop	{r7, pc}
 8002364:	40021000 	.word	0x40021000
 8002368:	08004484 	.word	0x08004484

0800236c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002370:	f7ff ffde 	bl	8002330 <HAL_RCC_GetHCLKFreq>
 8002374:	4602      	mov	r2, r0
 8002376:	4b05      	ldr	r3, [pc, #20]	; (800238c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	0adb      	lsrs	r3, r3, #11
 800237c:	f003 0307 	and.w	r3, r3, #7
 8002380:	4903      	ldr	r1, [pc, #12]	; (8002390 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002382:	5ccb      	ldrb	r3, [r1, r3]
 8002384:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002388:	4618      	mov	r0, r3
 800238a:	bd80      	pop	{r7, pc}
 800238c:	40021000 	.word	0x40021000
 8002390:	08004484 	.word	0x08004484

08002394 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002394:	b480      	push	{r7}
 8002396:	b085      	sub	sp, #20
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800239c:	4b0a      	ldr	r3, [pc, #40]	; (80023c8 <RCC_Delay+0x34>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a0a      	ldr	r2, [pc, #40]	; (80023cc <RCC_Delay+0x38>)
 80023a2:	fba2 2303 	umull	r2, r3, r2, r3
 80023a6:	0a5b      	lsrs	r3, r3, #9
 80023a8:	687a      	ldr	r2, [r7, #4]
 80023aa:	fb02 f303 	mul.w	r3, r2, r3
 80023ae:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80023b0:	bf00      	nop
  }
  while (Delay --);
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	1e5a      	subs	r2, r3, #1
 80023b6:	60fa      	str	r2, [r7, #12]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d1f9      	bne.n	80023b0 <RCC_Delay+0x1c>
}
 80023bc:	bf00      	nop
 80023be:	bf00      	nop
 80023c0:	3714      	adds	r7, #20
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bc80      	pop	{r7}
 80023c6:	4770      	bx	lr
 80023c8:	20000000 	.word	0x20000000
 80023cc:	10624dd3 	.word	0x10624dd3

080023d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d101      	bne.n	80023e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e076      	b.n	80024d0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d108      	bne.n	80023fc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80023f2:	d009      	beq.n	8002408 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2200      	movs	r2, #0
 80023f8:	61da      	str	r2, [r3, #28]
 80023fa:	e005      	b.n	8002408 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2200      	movs	r2, #0
 8002400:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2200      	movs	r2, #0
 8002406:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2200      	movs	r2, #0
 800240c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002414:	b2db      	uxtb	r3, r3
 8002416:	2b00      	cmp	r3, #0
 8002418:	d106      	bne.n	8002428 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2200      	movs	r2, #0
 800241e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f7fe fed6 	bl	80011d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2202      	movs	r2, #2
 800242c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800243e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002450:	431a      	orrs	r2, r3
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	68db      	ldr	r3, [r3, #12]
 8002456:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800245a:	431a      	orrs	r2, r3
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	691b      	ldr	r3, [r3, #16]
 8002460:	f003 0302 	and.w	r3, r3, #2
 8002464:	431a      	orrs	r2, r3
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	695b      	ldr	r3, [r3, #20]
 800246a:	f003 0301 	and.w	r3, r3, #1
 800246e:	431a      	orrs	r2, r3
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	699b      	ldr	r3, [r3, #24]
 8002474:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002478:	431a      	orrs	r2, r3
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	69db      	ldr	r3, [r3, #28]
 800247e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002482:	431a      	orrs	r2, r3
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6a1b      	ldr	r3, [r3, #32]
 8002488:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800248c:	ea42 0103 	orr.w	r1, r2, r3
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002494:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	430a      	orrs	r2, r1
 800249e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	699b      	ldr	r3, [r3, #24]
 80024a4:	0c1a      	lsrs	r2, r3, #16
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f002 0204 	and.w	r2, r2, #4
 80024ae:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	69da      	ldr	r2, [r3, #28]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024be:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2200      	movs	r2, #0
 80024c4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2201      	movs	r2, #1
 80024ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80024ce:	2300      	movs	r3, #0
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	3708      	adds	r7, #8
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}

080024d8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b088      	sub	sp, #32
 80024dc:	af00      	add	r7, sp, #0
 80024de:	60f8      	str	r0, [r7, #12]
 80024e0:	60b9      	str	r1, [r7, #8]
 80024e2:	603b      	str	r3, [r7, #0]
 80024e4:	4613      	mov	r3, r2
 80024e6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80024e8:	2300      	movs	r3, #0
 80024ea:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d101      	bne.n	80024fa <HAL_SPI_Transmit+0x22>
 80024f6:	2302      	movs	r3, #2
 80024f8:	e126      	b.n	8002748 <HAL_SPI_Transmit+0x270>
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2201      	movs	r2, #1
 80024fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002502:	f7ff f885 	bl	8001610 <HAL_GetTick>
 8002506:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002508:	88fb      	ldrh	r3, [r7, #6]
 800250a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002512:	b2db      	uxtb	r3, r3
 8002514:	2b01      	cmp	r3, #1
 8002516:	d002      	beq.n	800251e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002518:	2302      	movs	r3, #2
 800251a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800251c:	e10b      	b.n	8002736 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d002      	beq.n	800252a <HAL_SPI_Transmit+0x52>
 8002524:	88fb      	ldrh	r3, [r7, #6]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d102      	bne.n	8002530 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800252e:	e102      	b.n	8002736 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2203      	movs	r2, #3
 8002534:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2200      	movs	r2, #0
 800253c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	68ba      	ldr	r2, [r7, #8]
 8002542:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	88fa      	ldrh	r2, [r7, #6]
 8002548:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	88fa      	ldrh	r2, [r7, #6]
 800254e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	2200      	movs	r2, #0
 8002554:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2200      	movs	r2, #0
 800255a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2200      	movs	r2, #0
 8002560:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2200      	movs	r2, #0
 8002566:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2200      	movs	r2, #0
 800256c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002576:	d10f      	bne.n	8002598 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002586:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002596:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025a2:	2b40      	cmp	r3, #64	; 0x40
 80025a4:	d007      	beq.n	80025b6 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025b4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	68db      	ldr	r3, [r3, #12]
 80025ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80025be:	d14b      	bne.n	8002658 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d002      	beq.n	80025ce <HAL_SPI_Transmit+0xf6>
 80025c8:	8afb      	ldrh	r3, [r7, #22]
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d13e      	bne.n	800264c <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d2:	881a      	ldrh	r2, [r3, #0]
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025de:	1c9a      	adds	r2, r3, #2
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025e8:	b29b      	uxth	r3, r3
 80025ea:	3b01      	subs	r3, #1
 80025ec:	b29a      	uxth	r2, r3
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80025f2:	e02b      	b.n	800264c <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	f003 0302 	and.w	r3, r3, #2
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d112      	bne.n	8002628 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002606:	881a      	ldrh	r2, [r3, #0]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002612:	1c9a      	adds	r2, r3, #2
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800261c:	b29b      	uxth	r3, r3
 800261e:	3b01      	subs	r3, #1
 8002620:	b29a      	uxth	r2, r3
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	86da      	strh	r2, [r3, #54]	; 0x36
 8002626:	e011      	b.n	800264c <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002628:	f7fe fff2 	bl	8001610 <HAL_GetTick>
 800262c:	4602      	mov	r2, r0
 800262e:	69bb      	ldr	r3, [r7, #24]
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	683a      	ldr	r2, [r7, #0]
 8002634:	429a      	cmp	r2, r3
 8002636:	d803      	bhi.n	8002640 <HAL_SPI_Transmit+0x168>
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800263e:	d102      	bne.n	8002646 <HAL_SPI_Transmit+0x16e>
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d102      	bne.n	800264c <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002646:	2303      	movs	r3, #3
 8002648:	77fb      	strb	r3, [r7, #31]
          goto error;
 800264a:	e074      	b.n	8002736 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002650:	b29b      	uxth	r3, r3
 8002652:	2b00      	cmp	r3, #0
 8002654:	d1ce      	bne.n	80025f4 <HAL_SPI_Transmit+0x11c>
 8002656:	e04c      	b.n	80026f2 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d002      	beq.n	8002666 <HAL_SPI_Transmit+0x18e>
 8002660:	8afb      	ldrh	r3, [r7, #22]
 8002662:	2b01      	cmp	r3, #1
 8002664:	d140      	bne.n	80026e8 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	330c      	adds	r3, #12
 8002670:	7812      	ldrb	r2, [r2, #0]
 8002672:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002678:	1c5a      	adds	r2, r3, #1
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002682:	b29b      	uxth	r3, r3
 8002684:	3b01      	subs	r3, #1
 8002686:	b29a      	uxth	r2, r3
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800268c:	e02c      	b.n	80026e8 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	f003 0302 	and.w	r3, r3, #2
 8002698:	2b02      	cmp	r3, #2
 800269a:	d113      	bne.n	80026c4 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	330c      	adds	r3, #12
 80026a6:	7812      	ldrb	r2, [r2, #0]
 80026a8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ae:	1c5a      	adds	r2, r3, #1
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	3b01      	subs	r3, #1
 80026bc:	b29a      	uxth	r2, r3
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	86da      	strh	r2, [r3, #54]	; 0x36
 80026c2:	e011      	b.n	80026e8 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80026c4:	f7fe ffa4 	bl	8001610 <HAL_GetTick>
 80026c8:	4602      	mov	r2, r0
 80026ca:	69bb      	ldr	r3, [r7, #24]
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	683a      	ldr	r2, [r7, #0]
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d803      	bhi.n	80026dc <HAL_SPI_Transmit+0x204>
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026da:	d102      	bne.n	80026e2 <HAL_SPI_Transmit+0x20a>
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d102      	bne.n	80026e8 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80026e2:	2303      	movs	r3, #3
 80026e4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80026e6:	e026      	b.n	8002736 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d1cd      	bne.n	800268e <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80026f2:	69ba      	ldr	r2, [r7, #24]
 80026f4:	6839      	ldr	r1, [r7, #0]
 80026f6:	68f8      	ldr	r0, [r7, #12]
 80026f8:	f000 fa62 	bl	8002bc0 <SPI_EndRxTxTransaction>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d002      	beq.n	8002708 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	2220      	movs	r2, #32
 8002706:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d10a      	bne.n	8002726 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002710:	2300      	movs	r3, #0
 8002712:	613b      	str	r3, [r7, #16]
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	68db      	ldr	r3, [r3, #12]
 800271a:	613b      	str	r3, [r7, #16]
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	613b      	str	r3, [r7, #16]
 8002724:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800272a:	2b00      	cmp	r3, #0
 800272c:	d002      	beq.n	8002734 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	77fb      	strb	r3, [r7, #31]
 8002732:	e000      	b.n	8002736 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002734:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2201      	movs	r2, #1
 800273a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2200      	movs	r2, #0
 8002742:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002746:	7ffb      	ldrb	r3, [r7, #31]
}
 8002748:	4618      	mov	r0, r3
 800274a:	3720      	adds	r7, #32
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}

08002750 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b08c      	sub	sp, #48	; 0x30
 8002754:	af00      	add	r7, sp, #0
 8002756:	60f8      	str	r0, [r7, #12]
 8002758:	60b9      	str	r1, [r7, #8]
 800275a:	607a      	str	r2, [r7, #4]
 800275c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800275e:	2301      	movs	r3, #1
 8002760:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002762:	2300      	movs	r3, #0
 8002764:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800276e:	2b01      	cmp	r3, #1
 8002770:	d101      	bne.n	8002776 <HAL_SPI_TransmitReceive+0x26>
 8002772:	2302      	movs	r3, #2
 8002774:	e18a      	b.n	8002a8c <HAL_SPI_TransmitReceive+0x33c>
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2201      	movs	r2, #1
 800277a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800277e:	f7fe ff47 	bl	8001610 <HAL_GetTick>
 8002782:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800278a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002794:	887b      	ldrh	r3, [r7, #2]
 8002796:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002798:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800279c:	2b01      	cmp	r3, #1
 800279e:	d00f      	beq.n	80027c0 <HAL_SPI_TransmitReceive+0x70>
 80027a0:	69fb      	ldr	r3, [r7, #28]
 80027a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80027a6:	d107      	bne.n	80027b8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d103      	bne.n	80027b8 <HAL_SPI_TransmitReceive+0x68>
 80027b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80027b4:	2b04      	cmp	r3, #4
 80027b6:	d003      	beq.n	80027c0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80027b8:	2302      	movs	r3, #2
 80027ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80027be:	e15b      	b.n	8002a78 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d005      	beq.n	80027d2 <HAL_SPI_TransmitReceive+0x82>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d002      	beq.n	80027d2 <HAL_SPI_TransmitReceive+0x82>
 80027cc:	887b      	ldrh	r3, [r7, #2]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d103      	bne.n	80027da <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80027d8:	e14e      	b.n	8002a78 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	2b04      	cmp	r3, #4
 80027e4:	d003      	beq.n	80027ee <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2205      	movs	r2, #5
 80027ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2200      	movs	r2, #0
 80027f2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	687a      	ldr	r2, [r7, #4]
 80027f8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	887a      	ldrh	r2, [r7, #2]
 80027fe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	887a      	ldrh	r2, [r7, #2]
 8002804:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	68ba      	ldr	r2, [r7, #8]
 800280a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	887a      	ldrh	r2, [r7, #2]
 8002810:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	887a      	ldrh	r2, [r7, #2]
 8002816:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2200      	movs	r2, #0
 800281c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	2200      	movs	r2, #0
 8002822:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800282e:	2b40      	cmp	r3, #64	; 0x40
 8002830:	d007      	beq.n	8002842 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002840:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	68db      	ldr	r3, [r3, #12]
 8002846:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800284a:	d178      	bne.n	800293e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d002      	beq.n	800285a <HAL_SPI_TransmitReceive+0x10a>
 8002854:	8b7b      	ldrh	r3, [r7, #26]
 8002856:	2b01      	cmp	r3, #1
 8002858:	d166      	bne.n	8002928 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285e:	881a      	ldrh	r2, [r3, #0]
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286a:	1c9a      	adds	r2, r3, #2
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002874:	b29b      	uxth	r3, r3
 8002876:	3b01      	subs	r3, #1
 8002878:	b29a      	uxth	r2, r3
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800287e:	e053      	b.n	8002928 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	f003 0302 	and.w	r3, r3, #2
 800288a:	2b02      	cmp	r3, #2
 800288c:	d11b      	bne.n	80028c6 <HAL_SPI_TransmitReceive+0x176>
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002892:	b29b      	uxth	r3, r3
 8002894:	2b00      	cmp	r3, #0
 8002896:	d016      	beq.n	80028c6 <HAL_SPI_TransmitReceive+0x176>
 8002898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800289a:	2b01      	cmp	r3, #1
 800289c:	d113      	bne.n	80028c6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a2:	881a      	ldrh	r2, [r3, #0]
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ae:	1c9a      	adds	r2, r3, #2
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028b8:	b29b      	uxth	r3, r3
 80028ba:	3b01      	subs	r3, #1
 80028bc:	b29a      	uxth	r2, r3
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80028c2:	2300      	movs	r3, #0
 80028c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	f003 0301 	and.w	r3, r3, #1
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d119      	bne.n	8002908 <HAL_SPI_TransmitReceive+0x1b8>
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028d8:	b29b      	uxth	r3, r3
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d014      	beq.n	8002908 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	68da      	ldr	r2, [r3, #12]
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028e8:	b292      	uxth	r2, r2
 80028ea:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028f0:	1c9a      	adds	r2, r3, #2
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028fa:	b29b      	uxth	r3, r3
 80028fc:	3b01      	subs	r3, #1
 80028fe:	b29a      	uxth	r2, r3
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002904:	2301      	movs	r3, #1
 8002906:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002908:	f7fe fe82 	bl	8001610 <HAL_GetTick>
 800290c:	4602      	mov	r2, r0
 800290e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002914:	429a      	cmp	r2, r3
 8002916:	d807      	bhi.n	8002928 <HAL_SPI_TransmitReceive+0x1d8>
 8002918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800291a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800291e:	d003      	beq.n	8002928 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002920:	2303      	movs	r3, #3
 8002922:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002926:	e0a7      	b.n	8002a78 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800292c:	b29b      	uxth	r3, r3
 800292e:	2b00      	cmp	r3, #0
 8002930:	d1a6      	bne.n	8002880 <HAL_SPI_TransmitReceive+0x130>
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002936:	b29b      	uxth	r3, r3
 8002938:	2b00      	cmp	r3, #0
 800293a:	d1a1      	bne.n	8002880 <HAL_SPI_TransmitReceive+0x130>
 800293c:	e07c      	b.n	8002a38 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d002      	beq.n	800294c <HAL_SPI_TransmitReceive+0x1fc>
 8002946:	8b7b      	ldrh	r3, [r7, #26]
 8002948:	2b01      	cmp	r3, #1
 800294a:	d16b      	bne.n	8002a24 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	330c      	adds	r3, #12
 8002956:	7812      	ldrb	r2, [r2, #0]
 8002958:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800295e:	1c5a      	adds	r2, r3, #1
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002968:	b29b      	uxth	r3, r3
 800296a:	3b01      	subs	r3, #1
 800296c:	b29a      	uxth	r2, r3
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002972:	e057      	b.n	8002a24 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	f003 0302 	and.w	r3, r3, #2
 800297e:	2b02      	cmp	r3, #2
 8002980:	d11c      	bne.n	80029bc <HAL_SPI_TransmitReceive+0x26c>
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002986:	b29b      	uxth	r3, r3
 8002988:	2b00      	cmp	r3, #0
 800298a:	d017      	beq.n	80029bc <HAL_SPI_TransmitReceive+0x26c>
 800298c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800298e:	2b01      	cmp	r3, #1
 8002990:	d114      	bne.n	80029bc <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	330c      	adds	r3, #12
 800299c:	7812      	ldrb	r2, [r2, #0]
 800299e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a4:	1c5a      	adds	r2, r3, #1
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029ae:	b29b      	uxth	r3, r3
 80029b0:	3b01      	subs	r3, #1
 80029b2:	b29a      	uxth	r2, r3
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80029b8:	2300      	movs	r3, #0
 80029ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	f003 0301 	and.w	r3, r3, #1
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d119      	bne.n	80029fe <HAL_SPI_TransmitReceive+0x2ae>
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029ce:	b29b      	uxth	r3, r3
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d014      	beq.n	80029fe <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	68da      	ldr	r2, [r3, #12]
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029de:	b2d2      	uxtb	r2, r2
 80029e0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029e6:	1c5a      	adds	r2, r3, #1
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029f0:	b29b      	uxth	r3, r3
 80029f2:	3b01      	subs	r3, #1
 80029f4:	b29a      	uxth	r2, r3
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80029fa:	2301      	movs	r3, #1
 80029fc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80029fe:	f7fe fe07 	bl	8001610 <HAL_GetTick>
 8002a02:	4602      	mov	r2, r0
 8002a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a06:	1ad3      	subs	r3, r2, r3
 8002a08:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d803      	bhi.n	8002a16 <HAL_SPI_TransmitReceive+0x2c6>
 8002a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a14:	d102      	bne.n	8002a1c <HAL_SPI_TransmitReceive+0x2cc>
 8002a16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d103      	bne.n	8002a24 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002a1c:	2303      	movs	r3, #3
 8002a1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002a22:	e029      	b.n	8002a78 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a28:	b29b      	uxth	r3, r3
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d1a2      	bne.n	8002974 <HAL_SPI_TransmitReceive+0x224>
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a32:	b29b      	uxth	r3, r3
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d19d      	bne.n	8002974 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002a38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a3a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002a3c:	68f8      	ldr	r0, [r7, #12]
 8002a3e:	f000 f8bf 	bl	8002bc0 <SPI_EndRxTxTransaction>
 8002a42:	4603      	mov	r3, r0
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d006      	beq.n	8002a56 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	2220      	movs	r2, #32
 8002a52:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002a54:	e010      	b.n	8002a78 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d10b      	bne.n	8002a76 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002a5e:	2300      	movs	r3, #0
 8002a60:	617b      	str	r3, [r7, #20]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	617b      	str	r3, [r7, #20]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	617b      	str	r3, [r7, #20]
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	e000      	b.n	8002a78 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002a76:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2200      	movs	r2, #0
 8002a84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002a88:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3730      	adds	r7, #48	; 0x30
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}

08002a94 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002aa2:	b2db      	uxtb	r3, r3
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	370c      	adds	r7, #12
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bc80      	pop	{r7}
 8002aac:	4770      	bx	lr
	...

08002ab0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b088      	sub	sp, #32
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	60f8      	str	r0, [r7, #12]
 8002ab8:	60b9      	str	r1, [r7, #8]
 8002aba:	603b      	str	r3, [r7, #0]
 8002abc:	4613      	mov	r3, r2
 8002abe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002ac0:	f7fe fda6 	bl	8001610 <HAL_GetTick>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ac8:	1a9b      	subs	r3, r3, r2
 8002aca:	683a      	ldr	r2, [r7, #0]
 8002acc:	4413      	add	r3, r2
 8002ace:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002ad0:	f7fe fd9e 	bl	8001610 <HAL_GetTick>
 8002ad4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002ad6:	4b39      	ldr	r3, [pc, #228]	; (8002bbc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	015b      	lsls	r3, r3, #5
 8002adc:	0d1b      	lsrs	r3, r3, #20
 8002ade:	69fa      	ldr	r2, [r7, #28]
 8002ae0:	fb02 f303 	mul.w	r3, r2, r3
 8002ae4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002ae6:	e054      	b.n	8002b92 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002aee:	d050      	beq.n	8002b92 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002af0:	f7fe fd8e 	bl	8001610 <HAL_GetTick>
 8002af4:	4602      	mov	r2, r0
 8002af6:	69bb      	ldr	r3, [r7, #24]
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	69fa      	ldr	r2, [r7, #28]
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d902      	bls.n	8002b06 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d13d      	bne.n	8002b82 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	685a      	ldr	r2, [r3, #4]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002b14:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b1e:	d111      	bne.n	8002b44 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b28:	d004      	beq.n	8002b34 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b32:	d107      	bne.n	8002b44 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b42:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b4c:	d10f      	bne.n	8002b6e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b5c:	601a      	str	r2, [r3, #0]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b6c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2201      	movs	r2, #1
 8002b72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	e017      	b.n	8002bb2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d101      	bne.n	8002b8c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	3b01      	subs	r3, #1
 8002b90:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	689a      	ldr	r2, [r3, #8]
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	68ba      	ldr	r2, [r7, #8]
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	bf0c      	ite	eq
 8002ba2:	2301      	moveq	r3, #1
 8002ba4:	2300      	movne	r3, #0
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	461a      	mov	r2, r3
 8002baa:	79fb      	ldrb	r3, [r7, #7]
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d19b      	bne.n	8002ae8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002bb0:	2300      	movs	r3, #0
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3720      	adds	r7, #32
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	20000000 	.word	0x20000000

08002bc0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b086      	sub	sp, #24
 8002bc4:	af02      	add	r7, sp, #8
 8002bc6:	60f8      	str	r0, [r7, #12]
 8002bc8:	60b9      	str	r1, [r7, #8]
 8002bca:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	9300      	str	r3, [sp, #0]
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	2180      	movs	r1, #128	; 0x80
 8002bd6:	68f8      	ldr	r0, [r7, #12]
 8002bd8:	f7ff ff6a 	bl	8002ab0 <SPI_WaitFlagStateUntilTimeout>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d007      	beq.n	8002bf2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002be6:	f043 0220 	orr.w	r2, r3, #32
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	e000      	b.n	8002bf4 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002bf2:	2300      	movs	r3, #0
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3710      	adds	r7, #16
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}

08002bfc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b082      	sub	sp, #8
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d101      	bne.n	8002c0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e03f      	b.n	8002c8e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d106      	bne.n	8002c28 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f7fe fc2c 	bl	8001480 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2224      	movs	r2, #36	; 0x24
 8002c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	68da      	ldr	r2, [r3, #12]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c3e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	f000 f905 	bl	8002e50 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	691a      	ldr	r2, [r3, #16]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c54:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	695a      	ldr	r2, [r3, #20]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c64:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	68da      	ldr	r2, [r3, #12]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c74:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2220      	movs	r2, #32
 8002c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2220      	movs	r2, #32
 8002c88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002c8c:	2300      	movs	r3, #0
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3708      	adds	r7, #8
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}

08002c96 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c96:	b580      	push	{r7, lr}
 8002c98:	b08a      	sub	sp, #40	; 0x28
 8002c9a:	af02      	add	r7, sp, #8
 8002c9c:	60f8      	str	r0, [r7, #12]
 8002c9e:	60b9      	str	r1, [r7, #8]
 8002ca0:	603b      	str	r3, [r7, #0]
 8002ca2:	4613      	mov	r3, r2
 8002ca4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	2b20      	cmp	r3, #32
 8002cb4:	d17c      	bne.n	8002db0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d002      	beq.n	8002cc2 <HAL_UART_Transmit+0x2c>
 8002cbc:	88fb      	ldrh	r3, [r7, #6]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d101      	bne.n	8002cc6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e075      	b.n	8002db2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d101      	bne.n	8002cd4 <HAL_UART_Transmit+0x3e>
 8002cd0:	2302      	movs	r3, #2
 8002cd2:	e06e      	b.n	8002db2 <HAL_UART_Transmit+0x11c>
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2221      	movs	r2, #33	; 0x21
 8002ce6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002cea:	f7fe fc91 	bl	8001610 <HAL_GetTick>
 8002cee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	88fa      	ldrh	r2, [r7, #6]
 8002cf4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	88fa      	ldrh	r2, [r7, #6]
 8002cfa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d04:	d108      	bne.n	8002d18 <HAL_UART_Transmit+0x82>
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	691b      	ldr	r3, [r3, #16]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d104      	bne.n	8002d18 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	61bb      	str	r3, [r7, #24]
 8002d16:	e003      	b.n	8002d20 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2200      	movs	r2, #0
 8002d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002d28:	e02a      	b.n	8002d80 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	9300      	str	r3, [sp, #0]
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	2200      	movs	r2, #0
 8002d32:	2180      	movs	r1, #128	; 0x80
 8002d34:	68f8      	ldr	r0, [r7, #12]
 8002d36:	f000 f840 	bl	8002dba <UART_WaitOnFlagUntilTimeout>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d001      	beq.n	8002d44 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002d40:	2303      	movs	r3, #3
 8002d42:	e036      	b.n	8002db2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002d44:	69fb      	ldr	r3, [r7, #28]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d10b      	bne.n	8002d62 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d4a:	69bb      	ldr	r3, [r7, #24]
 8002d4c:	881b      	ldrh	r3, [r3, #0]
 8002d4e:	461a      	mov	r2, r3
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d58:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002d5a:	69bb      	ldr	r3, [r7, #24]
 8002d5c:	3302      	adds	r3, #2
 8002d5e:	61bb      	str	r3, [r7, #24]
 8002d60:	e007      	b.n	8002d72 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d62:	69fb      	ldr	r3, [r7, #28]
 8002d64:	781a      	ldrb	r2, [r3, #0]
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002d6c:	69fb      	ldr	r3, [r7, #28]
 8002d6e:	3301      	adds	r3, #1
 8002d70:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d76:	b29b      	uxth	r3, r3
 8002d78:	3b01      	subs	r3, #1
 8002d7a:	b29a      	uxth	r2, r3
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d84:	b29b      	uxth	r3, r3
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d1cf      	bne.n	8002d2a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	9300      	str	r3, [sp, #0]
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	2200      	movs	r2, #0
 8002d92:	2140      	movs	r1, #64	; 0x40
 8002d94:	68f8      	ldr	r0, [r7, #12]
 8002d96:	f000 f810 	bl	8002dba <UART_WaitOnFlagUntilTimeout>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d001      	beq.n	8002da4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002da0:	2303      	movs	r3, #3
 8002da2:	e006      	b.n	8002db2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2220      	movs	r2, #32
 8002da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002dac:	2300      	movs	r3, #0
 8002dae:	e000      	b.n	8002db2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002db0:	2302      	movs	r3, #2
  }
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3720      	adds	r7, #32
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}

08002dba <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002dba:	b580      	push	{r7, lr}
 8002dbc:	b084      	sub	sp, #16
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	60f8      	str	r0, [r7, #12]
 8002dc2:	60b9      	str	r1, [r7, #8]
 8002dc4:	603b      	str	r3, [r7, #0]
 8002dc6:	4613      	mov	r3, r2
 8002dc8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002dca:	e02c      	b.n	8002e26 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dcc:	69bb      	ldr	r3, [r7, #24]
 8002dce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002dd2:	d028      	beq.n	8002e26 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002dd4:	69bb      	ldr	r3, [r7, #24]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d007      	beq.n	8002dea <UART_WaitOnFlagUntilTimeout+0x30>
 8002dda:	f7fe fc19 	bl	8001610 <HAL_GetTick>
 8002dde:	4602      	mov	r2, r0
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	1ad3      	subs	r3, r2, r3
 8002de4:	69ba      	ldr	r2, [r7, #24]
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d21d      	bcs.n	8002e26 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	68da      	ldr	r2, [r3, #12]
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002df8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	695a      	ldr	r2, [r3, #20]
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f022 0201 	bic.w	r2, r2, #1
 8002e08:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2220      	movs	r2, #32
 8002e0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2220      	movs	r2, #32
 8002e16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	e00f      	b.n	8002e46 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	4013      	ands	r3, r2
 8002e30:	68ba      	ldr	r2, [r7, #8]
 8002e32:	429a      	cmp	r2, r3
 8002e34:	bf0c      	ite	eq
 8002e36:	2301      	moveq	r3, #1
 8002e38:	2300      	movne	r3, #0
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	461a      	mov	r2, r3
 8002e3e:	79fb      	ldrb	r3, [r7, #7]
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d0c3      	beq.n	8002dcc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e44:	2300      	movs	r3, #0
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3710      	adds	r7, #16
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
	...

08002e50 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b084      	sub	sp, #16
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	691b      	ldr	r3, [r3, #16]
 8002e5e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	68da      	ldr	r2, [r3, #12]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	430a      	orrs	r2, r1
 8002e6c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	689a      	ldr	r2, [r3, #8]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	691b      	ldr	r3, [r3, #16]
 8002e76:	431a      	orrs	r2, r3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	695b      	ldr	r3, [r3, #20]
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	68db      	ldr	r3, [r3, #12]
 8002e86:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002e8a:	f023 030c 	bic.w	r3, r3, #12
 8002e8e:	687a      	ldr	r2, [r7, #4]
 8002e90:	6812      	ldr	r2, [r2, #0]
 8002e92:	68b9      	ldr	r1, [r7, #8]
 8002e94:	430b      	orrs	r3, r1
 8002e96:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	695b      	ldr	r3, [r3, #20]
 8002e9e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	699a      	ldr	r2, [r3, #24]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	430a      	orrs	r2, r1
 8002eac:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a2c      	ldr	r2, [pc, #176]	; (8002f64 <UART_SetConfig+0x114>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d103      	bne.n	8002ec0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002eb8:	f7ff fa58 	bl	800236c <HAL_RCC_GetPCLK2Freq>
 8002ebc:	60f8      	str	r0, [r7, #12]
 8002ebe:	e002      	b.n	8002ec6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002ec0:	f7ff fa40 	bl	8002344 <HAL_RCC_GetPCLK1Freq>
 8002ec4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002ec6:	68fa      	ldr	r2, [r7, #12]
 8002ec8:	4613      	mov	r3, r2
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	4413      	add	r3, r2
 8002ece:	009a      	lsls	r2, r3, #2
 8002ed0:	441a      	add	r2, r3
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002edc:	4a22      	ldr	r2, [pc, #136]	; (8002f68 <UART_SetConfig+0x118>)
 8002ede:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee2:	095b      	lsrs	r3, r3, #5
 8002ee4:	0119      	lsls	r1, r3, #4
 8002ee6:	68fa      	ldr	r2, [r7, #12]
 8002ee8:	4613      	mov	r3, r2
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	4413      	add	r3, r2
 8002eee:	009a      	lsls	r2, r3, #2
 8002ef0:	441a      	add	r2, r3
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002efc:	4b1a      	ldr	r3, [pc, #104]	; (8002f68 <UART_SetConfig+0x118>)
 8002efe:	fba3 0302 	umull	r0, r3, r3, r2
 8002f02:	095b      	lsrs	r3, r3, #5
 8002f04:	2064      	movs	r0, #100	; 0x64
 8002f06:	fb00 f303 	mul.w	r3, r0, r3
 8002f0a:	1ad3      	subs	r3, r2, r3
 8002f0c:	011b      	lsls	r3, r3, #4
 8002f0e:	3332      	adds	r3, #50	; 0x32
 8002f10:	4a15      	ldr	r2, [pc, #84]	; (8002f68 <UART_SetConfig+0x118>)
 8002f12:	fba2 2303 	umull	r2, r3, r2, r3
 8002f16:	095b      	lsrs	r3, r3, #5
 8002f18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f1c:	4419      	add	r1, r3
 8002f1e:	68fa      	ldr	r2, [r7, #12]
 8002f20:	4613      	mov	r3, r2
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	4413      	add	r3, r2
 8002f26:	009a      	lsls	r2, r3, #2
 8002f28:	441a      	add	r2, r3
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f34:	4b0c      	ldr	r3, [pc, #48]	; (8002f68 <UART_SetConfig+0x118>)
 8002f36:	fba3 0302 	umull	r0, r3, r3, r2
 8002f3a:	095b      	lsrs	r3, r3, #5
 8002f3c:	2064      	movs	r0, #100	; 0x64
 8002f3e:	fb00 f303 	mul.w	r3, r0, r3
 8002f42:	1ad3      	subs	r3, r2, r3
 8002f44:	011b      	lsls	r3, r3, #4
 8002f46:	3332      	adds	r3, #50	; 0x32
 8002f48:	4a07      	ldr	r2, [pc, #28]	; (8002f68 <UART_SetConfig+0x118>)
 8002f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f4e:	095b      	lsrs	r3, r3, #5
 8002f50:	f003 020f 	and.w	r2, r3, #15
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	440a      	add	r2, r1
 8002f5a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002f5c:	bf00      	nop
 8002f5e:	3710      	adds	r7, #16
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	40013800 	.word	0x40013800
 8002f68:	51eb851f 	.word	0x51eb851f

08002f6c <__errno>:
 8002f6c:	4b01      	ldr	r3, [pc, #4]	; (8002f74 <__errno+0x8>)
 8002f6e:	6818      	ldr	r0, [r3, #0]
 8002f70:	4770      	bx	lr
 8002f72:	bf00      	nop
 8002f74:	2000000c 	.word	0x2000000c

08002f78 <__libc_init_array>:
 8002f78:	b570      	push	{r4, r5, r6, lr}
 8002f7a:	2600      	movs	r6, #0
 8002f7c:	4d0c      	ldr	r5, [pc, #48]	; (8002fb0 <__libc_init_array+0x38>)
 8002f7e:	4c0d      	ldr	r4, [pc, #52]	; (8002fb4 <__libc_init_array+0x3c>)
 8002f80:	1b64      	subs	r4, r4, r5
 8002f82:	10a4      	asrs	r4, r4, #2
 8002f84:	42a6      	cmp	r6, r4
 8002f86:	d109      	bne.n	8002f9c <__libc_init_array+0x24>
 8002f88:	f001 f9ca 	bl	8004320 <_init>
 8002f8c:	2600      	movs	r6, #0
 8002f8e:	4d0a      	ldr	r5, [pc, #40]	; (8002fb8 <__libc_init_array+0x40>)
 8002f90:	4c0a      	ldr	r4, [pc, #40]	; (8002fbc <__libc_init_array+0x44>)
 8002f92:	1b64      	subs	r4, r4, r5
 8002f94:	10a4      	asrs	r4, r4, #2
 8002f96:	42a6      	cmp	r6, r4
 8002f98:	d105      	bne.n	8002fa6 <__libc_init_array+0x2e>
 8002f9a:	bd70      	pop	{r4, r5, r6, pc}
 8002f9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fa0:	4798      	blx	r3
 8002fa2:	3601      	adds	r6, #1
 8002fa4:	e7ee      	b.n	8002f84 <__libc_init_array+0xc>
 8002fa6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002faa:	4798      	blx	r3
 8002fac:	3601      	adds	r6, #1
 8002fae:	e7f2      	b.n	8002f96 <__libc_init_array+0x1e>
 8002fb0:	0800452c 	.word	0x0800452c
 8002fb4:	0800452c 	.word	0x0800452c
 8002fb8:	0800452c 	.word	0x0800452c
 8002fbc:	08004530 	.word	0x08004530

08002fc0 <memcpy>:
 8002fc0:	440a      	add	r2, r1
 8002fc2:	4291      	cmp	r1, r2
 8002fc4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8002fc8:	d100      	bne.n	8002fcc <memcpy+0xc>
 8002fca:	4770      	bx	lr
 8002fcc:	b510      	push	{r4, lr}
 8002fce:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002fd2:	4291      	cmp	r1, r2
 8002fd4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002fd8:	d1f9      	bne.n	8002fce <memcpy+0xe>
 8002fda:	bd10      	pop	{r4, pc}

08002fdc <memset>:
 8002fdc:	4603      	mov	r3, r0
 8002fde:	4402      	add	r2, r0
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d100      	bne.n	8002fe6 <memset+0xa>
 8002fe4:	4770      	bx	lr
 8002fe6:	f803 1b01 	strb.w	r1, [r3], #1
 8002fea:	e7f9      	b.n	8002fe0 <memset+0x4>

08002fec <iprintf>:
 8002fec:	b40f      	push	{r0, r1, r2, r3}
 8002fee:	4b0a      	ldr	r3, [pc, #40]	; (8003018 <iprintf+0x2c>)
 8002ff0:	b513      	push	{r0, r1, r4, lr}
 8002ff2:	681c      	ldr	r4, [r3, #0]
 8002ff4:	b124      	cbz	r4, 8003000 <iprintf+0x14>
 8002ff6:	69a3      	ldr	r3, [r4, #24]
 8002ff8:	b913      	cbnz	r3, 8003000 <iprintf+0x14>
 8002ffa:	4620      	mov	r0, r4
 8002ffc:	f000 fa7e 	bl	80034fc <__sinit>
 8003000:	ab05      	add	r3, sp, #20
 8003002:	4620      	mov	r0, r4
 8003004:	9a04      	ldr	r2, [sp, #16]
 8003006:	68a1      	ldr	r1, [r4, #8]
 8003008:	9301      	str	r3, [sp, #4]
 800300a:	f000 fda5 	bl	8003b58 <_vfiprintf_r>
 800300e:	b002      	add	sp, #8
 8003010:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003014:	b004      	add	sp, #16
 8003016:	4770      	bx	lr
 8003018:	2000000c 	.word	0x2000000c

0800301c <_puts_r>:
 800301c:	b570      	push	{r4, r5, r6, lr}
 800301e:	460e      	mov	r6, r1
 8003020:	4605      	mov	r5, r0
 8003022:	b118      	cbz	r0, 800302c <_puts_r+0x10>
 8003024:	6983      	ldr	r3, [r0, #24]
 8003026:	b90b      	cbnz	r3, 800302c <_puts_r+0x10>
 8003028:	f000 fa68 	bl	80034fc <__sinit>
 800302c:	69ab      	ldr	r3, [r5, #24]
 800302e:	68ac      	ldr	r4, [r5, #8]
 8003030:	b913      	cbnz	r3, 8003038 <_puts_r+0x1c>
 8003032:	4628      	mov	r0, r5
 8003034:	f000 fa62 	bl	80034fc <__sinit>
 8003038:	4b2c      	ldr	r3, [pc, #176]	; (80030ec <_puts_r+0xd0>)
 800303a:	429c      	cmp	r4, r3
 800303c:	d120      	bne.n	8003080 <_puts_r+0x64>
 800303e:	686c      	ldr	r4, [r5, #4]
 8003040:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003042:	07db      	lsls	r3, r3, #31
 8003044:	d405      	bmi.n	8003052 <_puts_r+0x36>
 8003046:	89a3      	ldrh	r3, [r4, #12]
 8003048:	0598      	lsls	r0, r3, #22
 800304a:	d402      	bmi.n	8003052 <_puts_r+0x36>
 800304c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800304e:	f000 faf3 	bl	8003638 <__retarget_lock_acquire_recursive>
 8003052:	89a3      	ldrh	r3, [r4, #12]
 8003054:	0719      	lsls	r1, r3, #28
 8003056:	d51d      	bpl.n	8003094 <_puts_r+0x78>
 8003058:	6923      	ldr	r3, [r4, #16]
 800305a:	b1db      	cbz	r3, 8003094 <_puts_r+0x78>
 800305c:	3e01      	subs	r6, #1
 800305e:	68a3      	ldr	r3, [r4, #8]
 8003060:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003064:	3b01      	subs	r3, #1
 8003066:	60a3      	str	r3, [r4, #8]
 8003068:	bb39      	cbnz	r1, 80030ba <_puts_r+0x9e>
 800306a:	2b00      	cmp	r3, #0
 800306c:	da38      	bge.n	80030e0 <_puts_r+0xc4>
 800306e:	4622      	mov	r2, r4
 8003070:	210a      	movs	r1, #10
 8003072:	4628      	mov	r0, r5
 8003074:	f000 f868 	bl	8003148 <__swbuf_r>
 8003078:	3001      	adds	r0, #1
 800307a:	d011      	beq.n	80030a0 <_puts_r+0x84>
 800307c:	250a      	movs	r5, #10
 800307e:	e011      	b.n	80030a4 <_puts_r+0x88>
 8003080:	4b1b      	ldr	r3, [pc, #108]	; (80030f0 <_puts_r+0xd4>)
 8003082:	429c      	cmp	r4, r3
 8003084:	d101      	bne.n	800308a <_puts_r+0x6e>
 8003086:	68ac      	ldr	r4, [r5, #8]
 8003088:	e7da      	b.n	8003040 <_puts_r+0x24>
 800308a:	4b1a      	ldr	r3, [pc, #104]	; (80030f4 <_puts_r+0xd8>)
 800308c:	429c      	cmp	r4, r3
 800308e:	bf08      	it	eq
 8003090:	68ec      	ldreq	r4, [r5, #12]
 8003092:	e7d5      	b.n	8003040 <_puts_r+0x24>
 8003094:	4621      	mov	r1, r4
 8003096:	4628      	mov	r0, r5
 8003098:	f000 f8a8 	bl	80031ec <__swsetup_r>
 800309c:	2800      	cmp	r0, #0
 800309e:	d0dd      	beq.n	800305c <_puts_r+0x40>
 80030a0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80030a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80030a6:	07da      	lsls	r2, r3, #31
 80030a8:	d405      	bmi.n	80030b6 <_puts_r+0x9a>
 80030aa:	89a3      	ldrh	r3, [r4, #12]
 80030ac:	059b      	lsls	r3, r3, #22
 80030ae:	d402      	bmi.n	80030b6 <_puts_r+0x9a>
 80030b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80030b2:	f000 fac2 	bl	800363a <__retarget_lock_release_recursive>
 80030b6:	4628      	mov	r0, r5
 80030b8:	bd70      	pop	{r4, r5, r6, pc}
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	da04      	bge.n	80030c8 <_puts_r+0xac>
 80030be:	69a2      	ldr	r2, [r4, #24]
 80030c0:	429a      	cmp	r2, r3
 80030c2:	dc06      	bgt.n	80030d2 <_puts_r+0xb6>
 80030c4:	290a      	cmp	r1, #10
 80030c6:	d004      	beq.n	80030d2 <_puts_r+0xb6>
 80030c8:	6823      	ldr	r3, [r4, #0]
 80030ca:	1c5a      	adds	r2, r3, #1
 80030cc:	6022      	str	r2, [r4, #0]
 80030ce:	7019      	strb	r1, [r3, #0]
 80030d0:	e7c5      	b.n	800305e <_puts_r+0x42>
 80030d2:	4622      	mov	r2, r4
 80030d4:	4628      	mov	r0, r5
 80030d6:	f000 f837 	bl	8003148 <__swbuf_r>
 80030da:	3001      	adds	r0, #1
 80030dc:	d1bf      	bne.n	800305e <_puts_r+0x42>
 80030de:	e7df      	b.n	80030a0 <_puts_r+0x84>
 80030e0:	250a      	movs	r5, #10
 80030e2:	6823      	ldr	r3, [r4, #0]
 80030e4:	1c5a      	adds	r2, r3, #1
 80030e6:	6022      	str	r2, [r4, #0]
 80030e8:	701d      	strb	r5, [r3, #0]
 80030ea:	e7db      	b.n	80030a4 <_puts_r+0x88>
 80030ec:	080044b0 	.word	0x080044b0
 80030f0:	080044d0 	.word	0x080044d0
 80030f4:	08004490 	.word	0x08004490

080030f8 <puts>:
 80030f8:	4b02      	ldr	r3, [pc, #8]	; (8003104 <puts+0xc>)
 80030fa:	4601      	mov	r1, r0
 80030fc:	6818      	ldr	r0, [r3, #0]
 80030fe:	f7ff bf8d 	b.w	800301c <_puts_r>
 8003102:	bf00      	nop
 8003104:	2000000c 	.word	0x2000000c

08003108 <siprintf>:
 8003108:	b40e      	push	{r1, r2, r3}
 800310a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800310e:	b500      	push	{lr}
 8003110:	b09c      	sub	sp, #112	; 0x70
 8003112:	ab1d      	add	r3, sp, #116	; 0x74
 8003114:	9002      	str	r0, [sp, #8]
 8003116:	9006      	str	r0, [sp, #24]
 8003118:	9107      	str	r1, [sp, #28]
 800311a:	9104      	str	r1, [sp, #16]
 800311c:	4808      	ldr	r0, [pc, #32]	; (8003140 <siprintf+0x38>)
 800311e:	4909      	ldr	r1, [pc, #36]	; (8003144 <siprintf+0x3c>)
 8003120:	f853 2b04 	ldr.w	r2, [r3], #4
 8003124:	9105      	str	r1, [sp, #20]
 8003126:	6800      	ldr	r0, [r0, #0]
 8003128:	a902      	add	r1, sp, #8
 800312a:	9301      	str	r3, [sp, #4]
 800312c:	f000 fbec 	bl	8003908 <_svfiprintf_r>
 8003130:	2200      	movs	r2, #0
 8003132:	9b02      	ldr	r3, [sp, #8]
 8003134:	701a      	strb	r2, [r3, #0]
 8003136:	b01c      	add	sp, #112	; 0x70
 8003138:	f85d eb04 	ldr.w	lr, [sp], #4
 800313c:	b003      	add	sp, #12
 800313e:	4770      	bx	lr
 8003140:	2000000c 	.word	0x2000000c
 8003144:	ffff0208 	.word	0xffff0208

08003148 <__swbuf_r>:
 8003148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800314a:	460e      	mov	r6, r1
 800314c:	4614      	mov	r4, r2
 800314e:	4605      	mov	r5, r0
 8003150:	b118      	cbz	r0, 800315a <__swbuf_r+0x12>
 8003152:	6983      	ldr	r3, [r0, #24]
 8003154:	b90b      	cbnz	r3, 800315a <__swbuf_r+0x12>
 8003156:	f000 f9d1 	bl	80034fc <__sinit>
 800315a:	4b21      	ldr	r3, [pc, #132]	; (80031e0 <__swbuf_r+0x98>)
 800315c:	429c      	cmp	r4, r3
 800315e:	d12b      	bne.n	80031b8 <__swbuf_r+0x70>
 8003160:	686c      	ldr	r4, [r5, #4]
 8003162:	69a3      	ldr	r3, [r4, #24]
 8003164:	60a3      	str	r3, [r4, #8]
 8003166:	89a3      	ldrh	r3, [r4, #12]
 8003168:	071a      	lsls	r2, r3, #28
 800316a:	d52f      	bpl.n	80031cc <__swbuf_r+0x84>
 800316c:	6923      	ldr	r3, [r4, #16]
 800316e:	b36b      	cbz	r3, 80031cc <__swbuf_r+0x84>
 8003170:	6923      	ldr	r3, [r4, #16]
 8003172:	6820      	ldr	r0, [r4, #0]
 8003174:	b2f6      	uxtb	r6, r6
 8003176:	1ac0      	subs	r0, r0, r3
 8003178:	6963      	ldr	r3, [r4, #20]
 800317a:	4637      	mov	r7, r6
 800317c:	4283      	cmp	r3, r0
 800317e:	dc04      	bgt.n	800318a <__swbuf_r+0x42>
 8003180:	4621      	mov	r1, r4
 8003182:	4628      	mov	r0, r5
 8003184:	f000 f926 	bl	80033d4 <_fflush_r>
 8003188:	bb30      	cbnz	r0, 80031d8 <__swbuf_r+0x90>
 800318a:	68a3      	ldr	r3, [r4, #8]
 800318c:	3001      	adds	r0, #1
 800318e:	3b01      	subs	r3, #1
 8003190:	60a3      	str	r3, [r4, #8]
 8003192:	6823      	ldr	r3, [r4, #0]
 8003194:	1c5a      	adds	r2, r3, #1
 8003196:	6022      	str	r2, [r4, #0]
 8003198:	701e      	strb	r6, [r3, #0]
 800319a:	6963      	ldr	r3, [r4, #20]
 800319c:	4283      	cmp	r3, r0
 800319e:	d004      	beq.n	80031aa <__swbuf_r+0x62>
 80031a0:	89a3      	ldrh	r3, [r4, #12]
 80031a2:	07db      	lsls	r3, r3, #31
 80031a4:	d506      	bpl.n	80031b4 <__swbuf_r+0x6c>
 80031a6:	2e0a      	cmp	r6, #10
 80031a8:	d104      	bne.n	80031b4 <__swbuf_r+0x6c>
 80031aa:	4621      	mov	r1, r4
 80031ac:	4628      	mov	r0, r5
 80031ae:	f000 f911 	bl	80033d4 <_fflush_r>
 80031b2:	b988      	cbnz	r0, 80031d8 <__swbuf_r+0x90>
 80031b4:	4638      	mov	r0, r7
 80031b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80031b8:	4b0a      	ldr	r3, [pc, #40]	; (80031e4 <__swbuf_r+0x9c>)
 80031ba:	429c      	cmp	r4, r3
 80031bc:	d101      	bne.n	80031c2 <__swbuf_r+0x7a>
 80031be:	68ac      	ldr	r4, [r5, #8]
 80031c0:	e7cf      	b.n	8003162 <__swbuf_r+0x1a>
 80031c2:	4b09      	ldr	r3, [pc, #36]	; (80031e8 <__swbuf_r+0xa0>)
 80031c4:	429c      	cmp	r4, r3
 80031c6:	bf08      	it	eq
 80031c8:	68ec      	ldreq	r4, [r5, #12]
 80031ca:	e7ca      	b.n	8003162 <__swbuf_r+0x1a>
 80031cc:	4621      	mov	r1, r4
 80031ce:	4628      	mov	r0, r5
 80031d0:	f000 f80c 	bl	80031ec <__swsetup_r>
 80031d4:	2800      	cmp	r0, #0
 80031d6:	d0cb      	beq.n	8003170 <__swbuf_r+0x28>
 80031d8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80031dc:	e7ea      	b.n	80031b4 <__swbuf_r+0x6c>
 80031de:	bf00      	nop
 80031e0:	080044b0 	.word	0x080044b0
 80031e4:	080044d0 	.word	0x080044d0
 80031e8:	08004490 	.word	0x08004490

080031ec <__swsetup_r>:
 80031ec:	4b32      	ldr	r3, [pc, #200]	; (80032b8 <__swsetup_r+0xcc>)
 80031ee:	b570      	push	{r4, r5, r6, lr}
 80031f0:	681d      	ldr	r5, [r3, #0]
 80031f2:	4606      	mov	r6, r0
 80031f4:	460c      	mov	r4, r1
 80031f6:	b125      	cbz	r5, 8003202 <__swsetup_r+0x16>
 80031f8:	69ab      	ldr	r3, [r5, #24]
 80031fa:	b913      	cbnz	r3, 8003202 <__swsetup_r+0x16>
 80031fc:	4628      	mov	r0, r5
 80031fe:	f000 f97d 	bl	80034fc <__sinit>
 8003202:	4b2e      	ldr	r3, [pc, #184]	; (80032bc <__swsetup_r+0xd0>)
 8003204:	429c      	cmp	r4, r3
 8003206:	d10f      	bne.n	8003228 <__swsetup_r+0x3c>
 8003208:	686c      	ldr	r4, [r5, #4]
 800320a:	89a3      	ldrh	r3, [r4, #12]
 800320c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003210:	0719      	lsls	r1, r3, #28
 8003212:	d42c      	bmi.n	800326e <__swsetup_r+0x82>
 8003214:	06dd      	lsls	r5, r3, #27
 8003216:	d411      	bmi.n	800323c <__swsetup_r+0x50>
 8003218:	2309      	movs	r3, #9
 800321a:	6033      	str	r3, [r6, #0]
 800321c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003220:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003224:	81a3      	strh	r3, [r4, #12]
 8003226:	e03e      	b.n	80032a6 <__swsetup_r+0xba>
 8003228:	4b25      	ldr	r3, [pc, #148]	; (80032c0 <__swsetup_r+0xd4>)
 800322a:	429c      	cmp	r4, r3
 800322c:	d101      	bne.n	8003232 <__swsetup_r+0x46>
 800322e:	68ac      	ldr	r4, [r5, #8]
 8003230:	e7eb      	b.n	800320a <__swsetup_r+0x1e>
 8003232:	4b24      	ldr	r3, [pc, #144]	; (80032c4 <__swsetup_r+0xd8>)
 8003234:	429c      	cmp	r4, r3
 8003236:	bf08      	it	eq
 8003238:	68ec      	ldreq	r4, [r5, #12]
 800323a:	e7e6      	b.n	800320a <__swsetup_r+0x1e>
 800323c:	0758      	lsls	r0, r3, #29
 800323e:	d512      	bpl.n	8003266 <__swsetup_r+0x7a>
 8003240:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003242:	b141      	cbz	r1, 8003256 <__swsetup_r+0x6a>
 8003244:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003248:	4299      	cmp	r1, r3
 800324a:	d002      	beq.n	8003252 <__swsetup_r+0x66>
 800324c:	4630      	mov	r0, r6
 800324e:	f000 fa59 	bl	8003704 <_free_r>
 8003252:	2300      	movs	r3, #0
 8003254:	6363      	str	r3, [r4, #52]	; 0x34
 8003256:	89a3      	ldrh	r3, [r4, #12]
 8003258:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800325c:	81a3      	strh	r3, [r4, #12]
 800325e:	2300      	movs	r3, #0
 8003260:	6063      	str	r3, [r4, #4]
 8003262:	6923      	ldr	r3, [r4, #16]
 8003264:	6023      	str	r3, [r4, #0]
 8003266:	89a3      	ldrh	r3, [r4, #12]
 8003268:	f043 0308 	orr.w	r3, r3, #8
 800326c:	81a3      	strh	r3, [r4, #12]
 800326e:	6923      	ldr	r3, [r4, #16]
 8003270:	b94b      	cbnz	r3, 8003286 <__swsetup_r+0x9a>
 8003272:	89a3      	ldrh	r3, [r4, #12]
 8003274:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003278:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800327c:	d003      	beq.n	8003286 <__swsetup_r+0x9a>
 800327e:	4621      	mov	r1, r4
 8003280:	4630      	mov	r0, r6
 8003282:	f000 f9ff 	bl	8003684 <__smakebuf_r>
 8003286:	89a0      	ldrh	r0, [r4, #12]
 8003288:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800328c:	f010 0301 	ands.w	r3, r0, #1
 8003290:	d00a      	beq.n	80032a8 <__swsetup_r+0xbc>
 8003292:	2300      	movs	r3, #0
 8003294:	60a3      	str	r3, [r4, #8]
 8003296:	6963      	ldr	r3, [r4, #20]
 8003298:	425b      	negs	r3, r3
 800329a:	61a3      	str	r3, [r4, #24]
 800329c:	6923      	ldr	r3, [r4, #16]
 800329e:	b943      	cbnz	r3, 80032b2 <__swsetup_r+0xc6>
 80032a0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80032a4:	d1ba      	bne.n	800321c <__swsetup_r+0x30>
 80032a6:	bd70      	pop	{r4, r5, r6, pc}
 80032a8:	0781      	lsls	r1, r0, #30
 80032aa:	bf58      	it	pl
 80032ac:	6963      	ldrpl	r3, [r4, #20]
 80032ae:	60a3      	str	r3, [r4, #8]
 80032b0:	e7f4      	b.n	800329c <__swsetup_r+0xb0>
 80032b2:	2000      	movs	r0, #0
 80032b4:	e7f7      	b.n	80032a6 <__swsetup_r+0xba>
 80032b6:	bf00      	nop
 80032b8:	2000000c 	.word	0x2000000c
 80032bc:	080044b0 	.word	0x080044b0
 80032c0:	080044d0 	.word	0x080044d0
 80032c4:	08004490 	.word	0x08004490

080032c8 <__sflush_r>:
 80032c8:	898a      	ldrh	r2, [r1, #12]
 80032ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80032ce:	4605      	mov	r5, r0
 80032d0:	0710      	lsls	r0, r2, #28
 80032d2:	460c      	mov	r4, r1
 80032d4:	d458      	bmi.n	8003388 <__sflush_r+0xc0>
 80032d6:	684b      	ldr	r3, [r1, #4]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	dc05      	bgt.n	80032e8 <__sflush_r+0x20>
 80032dc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80032de:	2b00      	cmp	r3, #0
 80032e0:	dc02      	bgt.n	80032e8 <__sflush_r+0x20>
 80032e2:	2000      	movs	r0, #0
 80032e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80032e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80032ea:	2e00      	cmp	r6, #0
 80032ec:	d0f9      	beq.n	80032e2 <__sflush_r+0x1a>
 80032ee:	2300      	movs	r3, #0
 80032f0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80032f4:	682f      	ldr	r7, [r5, #0]
 80032f6:	602b      	str	r3, [r5, #0]
 80032f8:	d032      	beq.n	8003360 <__sflush_r+0x98>
 80032fa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80032fc:	89a3      	ldrh	r3, [r4, #12]
 80032fe:	075a      	lsls	r2, r3, #29
 8003300:	d505      	bpl.n	800330e <__sflush_r+0x46>
 8003302:	6863      	ldr	r3, [r4, #4]
 8003304:	1ac0      	subs	r0, r0, r3
 8003306:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003308:	b10b      	cbz	r3, 800330e <__sflush_r+0x46>
 800330a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800330c:	1ac0      	subs	r0, r0, r3
 800330e:	2300      	movs	r3, #0
 8003310:	4602      	mov	r2, r0
 8003312:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003314:	4628      	mov	r0, r5
 8003316:	6a21      	ldr	r1, [r4, #32]
 8003318:	47b0      	blx	r6
 800331a:	1c43      	adds	r3, r0, #1
 800331c:	89a3      	ldrh	r3, [r4, #12]
 800331e:	d106      	bne.n	800332e <__sflush_r+0x66>
 8003320:	6829      	ldr	r1, [r5, #0]
 8003322:	291d      	cmp	r1, #29
 8003324:	d82c      	bhi.n	8003380 <__sflush_r+0xb8>
 8003326:	4a2a      	ldr	r2, [pc, #168]	; (80033d0 <__sflush_r+0x108>)
 8003328:	40ca      	lsrs	r2, r1
 800332a:	07d6      	lsls	r6, r2, #31
 800332c:	d528      	bpl.n	8003380 <__sflush_r+0xb8>
 800332e:	2200      	movs	r2, #0
 8003330:	6062      	str	r2, [r4, #4]
 8003332:	6922      	ldr	r2, [r4, #16]
 8003334:	04d9      	lsls	r1, r3, #19
 8003336:	6022      	str	r2, [r4, #0]
 8003338:	d504      	bpl.n	8003344 <__sflush_r+0x7c>
 800333a:	1c42      	adds	r2, r0, #1
 800333c:	d101      	bne.n	8003342 <__sflush_r+0x7a>
 800333e:	682b      	ldr	r3, [r5, #0]
 8003340:	b903      	cbnz	r3, 8003344 <__sflush_r+0x7c>
 8003342:	6560      	str	r0, [r4, #84]	; 0x54
 8003344:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003346:	602f      	str	r7, [r5, #0]
 8003348:	2900      	cmp	r1, #0
 800334a:	d0ca      	beq.n	80032e2 <__sflush_r+0x1a>
 800334c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003350:	4299      	cmp	r1, r3
 8003352:	d002      	beq.n	800335a <__sflush_r+0x92>
 8003354:	4628      	mov	r0, r5
 8003356:	f000 f9d5 	bl	8003704 <_free_r>
 800335a:	2000      	movs	r0, #0
 800335c:	6360      	str	r0, [r4, #52]	; 0x34
 800335e:	e7c1      	b.n	80032e4 <__sflush_r+0x1c>
 8003360:	6a21      	ldr	r1, [r4, #32]
 8003362:	2301      	movs	r3, #1
 8003364:	4628      	mov	r0, r5
 8003366:	47b0      	blx	r6
 8003368:	1c41      	adds	r1, r0, #1
 800336a:	d1c7      	bne.n	80032fc <__sflush_r+0x34>
 800336c:	682b      	ldr	r3, [r5, #0]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d0c4      	beq.n	80032fc <__sflush_r+0x34>
 8003372:	2b1d      	cmp	r3, #29
 8003374:	d001      	beq.n	800337a <__sflush_r+0xb2>
 8003376:	2b16      	cmp	r3, #22
 8003378:	d101      	bne.n	800337e <__sflush_r+0xb6>
 800337a:	602f      	str	r7, [r5, #0]
 800337c:	e7b1      	b.n	80032e2 <__sflush_r+0x1a>
 800337e:	89a3      	ldrh	r3, [r4, #12]
 8003380:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003384:	81a3      	strh	r3, [r4, #12]
 8003386:	e7ad      	b.n	80032e4 <__sflush_r+0x1c>
 8003388:	690f      	ldr	r7, [r1, #16]
 800338a:	2f00      	cmp	r7, #0
 800338c:	d0a9      	beq.n	80032e2 <__sflush_r+0x1a>
 800338e:	0793      	lsls	r3, r2, #30
 8003390:	bf18      	it	ne
 8003392:	2300      	movne	r3, #0
 8003394:	680e      	ldr	r6, [r1, #0]
 8003396:	bf08      	it	eq
 8003398:	694b      	ldreq	r3, [r1, #20]
 800339a:	eba6 0807 	sub.w	r8, r6, r7
 800339e:	600f      	str	r7, [r1, #0]
 80033a0:	608b      	str	r3, [r1, #8]
 80033a2:	f1b8 0f00 	cmp.w	r8, #0
 80033a6:	dd9c      	ble.n	80032e2 <__sflush_r+0x1a>
 80033a8:	4643      	mov	r3, r8
 80033aa:	463a      	mov	r2, r7
 80033ac:	4628      	mov	r0, r5
 80033ae:	6a21      	ldr	r1, [r4, #32]
 80033b0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80033b2:	47b0      	blx	r6
 80033b4:	2800      	cmp	r0, #0
 80033b6:	dc06      	bgt.n	80033c6 <__sflush_r+0xfe>
 80033b8:	89a3      	ldrh	r3, [r4, #12]
 80033ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80033be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033c2:	81a3      	strh	r3, [r4, #12]
 80033c4:	e78e      	b.n	80032e4 <__sflush_r+0x1c>
 80033c6:	4407      	add	r7, r0
 80033c8:	eba8 0800 	sub.w	r8, r8, r0
 80033cc:	e7e9      	b.n	80033a2 <__sflush_r+0xda>
 80033ce:	bf00      	nop
 80033d0:	20400001 	.word	0x20400001

080033d4 <_fflush_r>:
 80033d4:	b538      	push	{r3, r4, r5, lr}
 80033d6:	690b      	ldr	r3, [r1, #16]
 80033d8:	4605      	mov	r5, r0
 80033da:	460c      	mov	r4, r1
 80033dc:	b913      	cbnz	r3, 80033e4 <_fflush_r+0x10>
 80033de:	2500      	movs	r5, #0
 80033e0:	4628      	mov	r0, r5
 80033e2:	bd38      	pop	{r3, r4, r5, pc}
 80033e4:	b118      	cbz	r0, 80033ee <_fflush_r+0x1a>
 80033e6:	6983      	ldr	r3, [r0, #24]
 80033e8:	b90b      	cbnz	r3, 80033ee <_fflush_r+0x1a>
 80033ea:	f000 f887 	bl	80034fc <__sinit>
 80033ee:	4b14      	ldr	r3, [pc, #80]	; (8003440 <_fflush_r+0x6c>)
 80033f0:	429c      	cmp	r4, r3
 80033f2:	d11b      	bne.n	800342c <_fflush_r+0x58>
 80033f4:	686c      	ldr	r4, [r5, #4]
 80033f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d0ef      	beq.n	80033de <_fflush_r+0xa>
 80033fe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003400:	07d0      	lsls	r0, r2, #31
 8003402:	d404      	bmi.n	800340e <_fflush_r+0x3a>
 8003404:	0599      	lsls	r1, r3, #22
 8003406:	d402      	bmi.n	800340e <_fflush_r+0x3a>
 8003408:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800340a:	f000 f915 	bl	8003638 <__retarget_lock_acquire_recursive>
 800340e:	4628      	mov	r0, r5
 8003410:	4621      	mov	r1, r4
 8003412:	f7ff ff59 	bl	80032c8 <__sflush_r>
 8003416:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003418:	4605      	mov	r5, r0
 800341a:	07da      	lsls	r2, r3, #31
 800341c:	d4e0      	bmi.n	80033e0 <_fflush_r+0xc>
 800341e:	89a3      	ldrh	r3, [r4, #12]
 8003420:	059b      	lsls	r3, r3, #22
 8003422:	d4dd      	bmi.n	80033e0 <_fflush_r+0xc>
 8003424:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003426:	f000 f908 	bl	800363a <__retarget_lock_release_recursive>
 800342a:	e7d9      	b.n	80033e0 <_fflush_r+0xc>
 800342c:	4b05      	ldr	r3, [pc, #20]	; (8003444 <_fflush_r+0x70>)
 800342e:	429c      	cmp	r4, r3
 8003430:	d101      	bne.n	8003436 <_fflush_r+0x62>
 8003432:	68ac      	ldr	r4, [r5, #8]
 8003434:	e7df      	b.n	80033f6 <_fflush_r+0x22>
 8003436:	4b04      	ldr	r3, [pc, #16]	; (8003448 <_fflush_r+0x74>)
 8003438:	429c      	cmp	r4, r3
 800343a:	bf08      	it	eq
 800343c:	68ec      	ldreq	r4, [r5, #12]
 800343e:	e7da      	b.n	80033f6 <_fflush_r+0x22>
 8003440:	080044b0 	.word	0x080044b0
 8003444:	080044d0 	.word	0x080044d0
 8003448:	08004490 	.word	0x08004490

0800344c <std>:
 800344c:	2300      	movs	r3, #0
 800344e:	b510      	push	{r4, lr}
 8003450:	4604      	mov	r4, r0
 8003452:	e9c0 3300 	strd	r3, r3, [r0]
 8003456:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800345a:	6083      	str	r3, [r0, #8]
 800345c:	8181      	strh	r1, [r0, #12]
 800345e:	6643      	str	r3, [r0, #100]	; 0x64
 8003460:	81c2      	strh	r2, [r0, #14]
 8003462:	6183      	str	r3, [r0, #24]
 8003464:	4619      	mov	r1, r3
 8003466:	2208      	movs	r2, #8
 8003468:	305c      	adds	r0, #92	; 0x5c
 800346a:	f7ff fdb7 	bl	8002fdc <memset>
 800346e:	4b05      	ldr	r3, [pc, #20]	; (8003484 <std+0x38>)
 8003470:	6224      	str	r4, [r4, #32]
 8003472:	6263      	str	r3, [r4, #36]	; 0x24
 8003474:	4b04      	ldr	r3, [pc, #16]	; (8003488 <std+0x3c>)
 8003476:	62a3      	str	r3, [r4, #40]	; 0x28
 8003478:	4b04      	ldr	r3, [pc, #16]	; (800348c <std+0x40>)
 800347a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800347c:	4b04      	ldr	r3, [pc, #16]	; (8003490 <std+0x44>)
 800347e:	6323      	str	r3, [r4, #48]	; 0x30
 8003480:	bd10      	pop	{r4, pc}
 8003482:	bf00      	nop
 8003484:	08004105 	.word	0x08004105
 8003488:	08004127 	.word	0x08004127
 800348c:	0800415f 	.word	0x0800415f
 8003490:	08004183 	.word	0x08004183

08003494 <_cleanup_r>:
 8003494:	4901      	ldr	r1, [pc, #4]	; (800349c <_cleanup_r+0x8>)
 8003496:	f000 b8af 	b.w	80035f8 <_fwalk_reent>
 800349a:	bf00      	nop
 800349c:	080033d5 	.word	0x080033d5

080034a0 <__sfmoreglue>:
 80034a0:	b570      	push	{r4, r5, r6, lr}
 80034a2:	2568      	movs	r5, #104	; 0x68
 80034a4:	1e4a      	subs	r2, r1, #1
 80034a6:	4355      	muls	r5, r2
 80034a8:	460e      	mov	r6, r1
 80034aa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80034ae:	f000 f975 	bl	800379c <_malloc_r>
 80034b2:	4604      	mov	r4, r0
 80034b4:	b140      	cbz	r0, 80034c8 <__sfmoreglue+0x28>
 80034b6:	2100      	movs	r1, #0
 80034b8:	e9c0 1600 	strd	r1, r6, [r0]
 80034bc:	300c      	adds	r0, #12
 80034be:	60a0      	str	r0, [r4, #8]
 80034c0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80034c4:	f7ff fd8a 	bl	8002fdc <memset>
 80034c8:	4620      	mov	r0, r4
 80034ca:	bd70      	pop	{r4, r5, r6, pc}

080034cc <__sfp_lock_acquire>:
 80034cc:	4801      	ldr	r0, [pc, #4]	; (80034d4 <__sfp_lock_acquire+0x8>)
 80034ce:	f000 b8b3 	b.w	8003638 <__retarget_lock_acquire_recursive>
 80034d2:	bf00      	nop
 80034d4:	20000488 	.word	0x20000488

080034d8 <__sfp_lock_release>:
 80034d8:	4801      	ldr	r0, [pc, #4]	; (80034e0 <__sfp_lock_release+0x8>)
 80034da:	f000 b8ae 	b.w	800363a <__retarget_lock_release_recursive>
 80034de:	bf00      	nop
 80034e0:	20000488 	.word	0x20000488

080034e4 <__sinit_lock_acquire>:
 80034e4:	4801      	ldr	r0, [pc, #4]	; (80034ec <__sinit_lock_acquire+0x8>)
 80034e6:	f000 b8a7 	b.w	8003638 <__retarget_lock_acquire_recursive>
 80034ea:	bf00      	nop
 80034ec:	20000483 	.word	0x20000483

080034f0 <__sinit_lock_release>:
 80034f0:	4801      	ldr	r0, [pc, #4]	; (80034f8 <__sinit_lock_release+0x8>)
 80034f2:	f000 b8a2 	b.w	800363a <__retarget_lock_release_recursive>
 80034f6:	bf00      	nop
 80034f8:	20000483 	.word	0x20000483

080034fc <__sinit>:
 80034fc:	b510      	push	{r4, lr}
 80034fe:	4604      	mov	r4, r0
 8003500:	f7ff fff0 	bl	80034e4 <__sinit_lock_acquire>
 8003504:	69a3      	ldr	r3, [r4, #24]
 8003506:	b11b      	cbz	r3, 8003510 <__sinit+0x14>
 8003508:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800350c:	f7ff bff0 	b.w	80034f0 <__sinit_lock_release>
 8003510:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003514:	6523      	str	r3, [r4, #80]	; 0x50
 8003516:	4b13      	ldr	r3, [pc, #76]	; (8003564 <__sinit+0x68>)
 8003518:	4a13      	ldr	r2, [pc, #76]	; (8003568 <__sinit+0x6c>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	62a2      	str	r2, [r4, #40]	; 0x28
 800351e:	42a3      	cmp	r3, r4
 8003520:	bf08      	it	eq
 8003522:	2301      	moveq	r3, #1
 8003524:	4620      	mov	r0, r4
 8003526:	bf08      	it	eq
 8003528:	61a3      	streq	r3, [r4, #24]
 800352a:	f000 f81f 	bl	800356c <__sfp>
 800352e:	6060      	str	r0, [r4, #4]
 8003530:	4620      	mov	r0, r4
 8003532:	f000 f81b 	bl	800356c <__sfp>
 8003536:	60a0      	str	r0, [r4, #8]
 8003538:	4620      	mov	r0, r4
 800353a:	f000 f817 	bl	800356c <__sfp>
 800353e:	2200      	movs	r2, #0
 8003540:	2104      	movs	r1, #4
 8003542:	60e0      	str	r0, [r4, #12]
 8003544:	6860      	ldr	r0, [r4, #4]
 8003546:	f7ff ff81 	bl	800344c <std>
 800354a:	2201      	movs	r2, #1
 800354c:	2109      	movs	r1, #9
 800354e:	68a0      	ldr	r0, [r4, #8]
 8003550:	f7ff ff7c 	bl	800344c <std>
 8003554:	2202      	movs	r2, #2
 8003556:	2112      	movs	r1, #18
 8003558:	68e0      	ldr	r0, [r4, #12]
 800355a:	f7ff ff77 	bl	800344c <std>
 800355e:	2301      	movs	r3, #1
 8003560:	61a3      	str	r3, [r4, #24]
 8003562:	e7d1      	b.n	8003508 <__sinit+0xc>
 8003564:	0800448c 	.word	0x0800448c
 8003568:	08003495 	.word	0x08003495

0800356c <__sfp>:
 800356c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800356e:	4607      	mov	r7, r0
 8003570:	f7ff ffac 	bl	80034cc <__sfp_lock_acquire>
 8003574:	4b1e      	ldr	r3, [pc, #120]	; (80035f0 <__sfp+0x84>)
 8003576:	681e      	ldr	r6, [r3, #0]
 8003578:	69b3      	ldr	r3, [r6, #24]
 800357a:	b913      	cbnz	r3, 8003582 <__sfp+0x16>
 800357c:	4630      	mov	r0, r6
 800357e:	f7ff ffbd 	bl	80034fc <__sinit>
 8003582:	3648      	adds	r6, #72	; 0x48
 8003584:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003588:	3b01      	subs	r3, #1
 800358a:	d503      	bpl.n	8003594 <__sfp+0x28>
 800358c:	6833      	ldr	r3, [r6, #0]
 800358e:	b30b      	cbz	r3, 80035d4 <__sfp+0x68>
 8003590:	6836      	ldr	r6, [r6, #0]
 8003592:	e7f7      	b.n	8003584 <__sfp+0x18>
 8003594:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003598:	b9d5      	cbnz	r5, 80035d0 <__sfp+0x64>
 800359a:	4b16      	ldr	r3, [pc, #88]	; (80035f4 <__sfp+0x88>)
 800359c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80035a0:	60e3      	str	r3, [r4, #12]
 80035a2:	6665      	str	r5, [r4, #100]	; 0x64
 80035a4:	f000 f847 	bl	8003636 <__retarget_lock_init_recursive>
 80035a8:	f7ff ff96 	bl	80034d8 <__sfp_lock_release>
 80035ac:	2208      	movs	r2, #8
 80035ae:	4629      	mov	r1, r5
 80035b0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80035b4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80035b8:	6025      	str	r5, [r4, #0]
 80035ba:	61a5      	str	r5, [r4, #24]
 80035bc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80035c0:	f7ff fd0c 	bl	8002fdc <memset>
 80035c4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80035c8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80035cc:	4620      	mov	r0, r4
 80035ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80035d0:	3468      	adds	r4, #104	; 0x68
 80035d2:	e7d9      	b.n	8003588 <__sfp+0x1c>
 80035d4:	2104      	movs	r1, #4
 80035d6:	4638      	mov	r0, r7
 80035d8:	f7ff ff62 	bl	80034a0 <__sfmoreglue>
 80035dc:	4604      	mov	r4, r0
 80035de:	6030      	str	r0, [r6, #0]
 80035e0:	2800      	cmp	r0, #0
 80035e2:	d1d5      	bne.n	8003590 <__sfp+0x24>
 80035e4:	f7ff ff78 	bl	80034d8 <__sfp_lock_release>
 80035e8:	230c      	movs	r3, #12
 80035ea:	603b      	str	r3, [r7, #0]
 80035ec:	e7ee      	b.n	80035cc <__sfp+0x60>
 80035ee:	bf00      	nop
 80035f0:	0800448c 	.word	0x0800448c
 80035f4:	ffff0001 	.word	0xffff0001

080035f8 <_fwalk_reent>:
 80035f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80035fc:	4606      	mov	r6, r0
 80035fe:	4688      	mov	r8, r1
 8003600:	2700      	movs	r7, #0
 8003602:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003606:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800360a:	f1b9 0901 	subs.w	r9, r9, #1
 800360e:	d505      	bpl.n	800361c <_fwalk_reent+0x24>
 8003610:	6824      	ldr	r4, [r4, #0]
 8003612:	2c00      	cmp	r4, #0
 8003614:	d1f7      	bne.n	8003606 <_fwalk_reent+0xe>
 8003616:	4638      	mov	r0, r7
 8003618:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800361c:	89ab      	ldrh	r3, [r5, #12]
 800361e:	2b01      	cmp	r3, #1
 8003620:	d907      	bls.n	8003632 <_fwalk_reent+0x3a>
 8003622:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003626:	3301      	adds	r3, #1
 8003628:	d003      	beq.n	8003632 <_fwalk_reent+0x3a>
 800362a:	4629      	mov	r1, r5
 800362c:	4630      	mov	r0, r6
 800362e:	47c0      	blx	r8
 8003630:	4307      	orrs	r7, r0
 8003632:	3568      	adds	r5, #104	; 0x68
 8003634:	e7e9      	b.n	800360a <_fwalk_reent+0x12>

08003636 <__retarget_lock_init_recursive>:
 8003636:	4770      	bx	lr

08003638 <__retarget_lock_acquire_recursive>:
 8003638:	4770      	bx	lr

0800363a <__retarget_lock_release_recursive>:
 800363a:	4770      	bx	lr

0800363c <__swhatbuf_r>:
 800363c:	b570      	push	{r4, r5, r6, lr}
 800363e:	460e      	mov	r6, r1
 8003640:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003644:	4614      	mov	r4, r2
 8003646:	2900      	cmp	r1, #0
 8003648:	461d      	mov	r5, r3
 800364a:	b096      	sub	sp, #88	; 0x58
 800364c:	da07      	bge.n	800365e <__swhatbuf_r+0x22>
 800364e:	2300      	movs	r3, #0
 8003650:	602b      	str	r3, [r5, #0]
 8003652:	89b3      	ldrh	r3, [r6, #12]
 8003654:	061a      	lsls	r2, r3, #24
 8003656:	d410      	bmi.n	800367a <__swhatbuf_r+0x3e>
 8003658:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800365c:	e00e      	b.n	800367c <__swhatbuf_r+0x40>
 800365e:	466a      	mov	r2, sp
 8003660:	f000 fdb6 	bl	80041d0 <_fstat_r>
 8003664:	2800      	cmp	r0, #0
 8003666:	dbf2      	blt.n	800364e <__swhatbuf_r+0x12>
 8003668:	9a01      	ldr	r2, [sp, #4]
 800366a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800366e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003672:	425a      	negs	r2, r3
 8003674:	415a      	adcs	r2, r3
 8003676:	602a      	str	r2, [r5, #0]
 8003678:	e7ee      	b.n	8003658 <__swhatbuf_r+0x1c>
 800367a:	2340      	movs	r3, #64	; 0x40
 800367c:	2000      	movs	r0, #0
 800367e:	6023      	str	r3, [r4, #0]
 8003680:	b016      	add	sp, #88	; 0x58
 8003682:	bd70      	pop	{r4, r5, r6, pc}

08003684 <__smakebuf_r>:
 8003684:	898b      	ldrh	r3, [r1, #12]
 8003686:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003688:	079d      	lsls	r5, r3, #30
 800368a:	4606      	mov	r6, r0
 800368c:	460c      	mov	r4, r1
 800368e:	d507      	bpl.n	80036a0 <__smakebuf_r+0x1c>
 8003690:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003694:	6023      	str	r3, [r4, #0]
 8003696:	6123      	str	r3, [r4, #16]
 8003698:	2301      	movs	r3, #1
 800369a:	6163      	str	r3, [r4, #20]
 800369c:	b002      	add	sp, #8
 800369e:	bd70      	pop	{r4, r5, r6, pc}
 80036a0:	466a      	mov	r2, sp
 80036a2:	ab01      	add	r3, sp, #4
 80036a4:	f7ff ffca 	bl	800363c <__swhatbuf_r>
 80036a8:	9900      	ldr	r1, [sp, #0]
 80036aa:	4605      	mov	r5, r0
 80036ac:	4630      	mov	r0, r6
 80036ae:	f000 f875 	bl	800379c <_malloc_r>
 80036b2:	b948      	cbnz	r0, 80036c8 <__smakebuf_r+0x44>
 80036b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80036b8:	059a      	lsls	r2, r3, #22
 80036ba:	d4ef      	bmi.n	800369c <__smakebuf_r+0x18>
 80036bc:	f023 0303 	bic.w	r3, r3, #3
 80036c0:	f043 0302 	orr.w	r3, r3, #2
 80036c4:	81a3      	strh	r3, [r4, #12]
 80036c6:	e7e3      	b.n	8003690 <__smakebuf_r+0xc>
 80036c8:	4b0d      	ldr	r3, [pc, #52]	; (8003700 <__smakebuf_r+0x7c>)
 80036ca:	62b3      	str	r3, [r6, #40]	; 0x28
 80036cc:	89a3      	ldrh	r3, [r4, #12]
 80036ce:	6020      	str	r0, [r4, #0]
 80036d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036d4:	81a3      	strh	r3, [r4, #12]
 80036d6:	9b00      	ldr	r3, [sp, #0]
 80036d8:	6120      	str	r0, [r4, #16]
 80036da:	6163      	str	r3, [r4, #20]
 80036dc:	9b01      	ldr	r3, [sp, #4]
 80036de:	b15b      	cbz	r3, 80036f8 <__smakebuf_r+0x74>
 80036e0:	4630      	mov	r0, r6
 80036e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80036e6:	f000 fd85 	bl	80041f4 <_isatty_r>
 80036ea:	b128      	cbz	r0, 80036f8 <__smakebuf_r+0x74>
 80036ec:	89a3      	ldrh	r3, [r4, #12]
 80036ee:	f023 0303 	bic.w	r3, r3, #3
 80036f2:	f043 0301 	orr.w	r3, r3, #1
 80036f6:	81a3      	strh	r3, [r4, #12]
 80036f8:	89a0      	ldrh	r0, [r4, #12]
 80036fa:	4305      	orrs	r5, r0
 80036fc:	81a5      	strh	r5, [r4, #12]
 80036fe:	e7cd      	b.n	800369c <__smakebuf_r+0x18>
 8003700:	08003495 	.word	0x08003495

08003704 <_free_r>:
 8003704:	b538      	push	{r3, r4, r5, lr}
 8003706:	4605      	mov	r5, r0
 8003708:	2900      	cmp	r1, #0
 800370a:	d043      	beq.n	8003794 <_free_r+0x90>
 800370c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003710:	1f0c      	subs	r4, r1, #4
 8003712:	2b00      	cmp	r3, #0
 8003714:	bfb8      	it	lt
 8003716:	18e4      	addlt	r4, r4, r3
 8003718:	f000 fdb6 	bl	8004288 <__malloc_lock>
 800371c:	4a1e      	ldr	r2, [pc, #120]	; (8003798 <_free_r+0x94>)
 800371e:	6813      	ldr	r3, [r2, #0]
 8003720:	4610      	mov	r0, r2
 8003722:	b933      	cbnz	r3, 8003732 <_free_r+0x2e>
 8003724:	6063      	str	r3, [r4, #4]
 8003726:	6014      	str	r4, [r2, #0]
 8003728:	4628      	mov	r0, r5
 800372a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800372e:	f000 bdb1 	b.w	8004294 <__malloc_unlock>
 8003732:	42a3      	cmp	r3, r4
 8003734:	d90a      	bls.n	800374c <_free_r+0x48>
 8003736:	6821      	ldr	r1, [r4, #0]
 8003738:	1862      	adds	r2, r4, r1
 800373a:	4293      	cmp	r3, r2
 800373c:	bf01      	itttt	eq
 800373e:	681a      	ldreq	r2, [r3, #0]
 8003740:	685b      	ldreq	r3, [r3, #4]
 8003742:	1852      	addeq	r2, r2, r1
 8003744:	6022      	streq	r2, [r4, #0]
 8003746:	6063      	str	r3, [r4, #4]
 8003748:	6004      	str	r4, [r0, #0]
 800374a:	e7ed      	b.n	8003728 <_free_r+0x24>
 800374c:	461a      	mov	r2, r3
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	b10b      	cbz	r3, 8003756 <_free_r+0x52>
 8003752:	42a3      	cmp	r3, r4
 8003754:	d9fa      	bls.n	800374c <_free_r+0x48>
 8003756:	6811      	ldr	r1, [r2, #0]
 8003758:	1850      	adds	r0, r2, r1
 800375a:	42a0      	cmp	r0, r4
 800375c:	d10b      	bne.n	8003776 <_free_r+0x72>
 800375e:	6820      	ldr	r0, [r4, #0]
 8003760:	4401      	add	r1, r0
 8003762:	1850      	adds	r0, r2, r1
 8003764:	4283      	cmp	r3, r0
 8003766:	6011      	str	r1, [r2, #0]
 8003768:	d1de      	bne.n	8003728 <_free_r+0x24>
 800376a:	6818      	ldr	r0, [r3, #0]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	4401      	add	r1, r0
 8003770:	6011      	str	r1, [r2, #0]
 8003772:	6053      	str	r3, [r2, #4]
 8003774:	e7d8      	b.n	8003728 <_free_r+0x24>
 8003776:	d902      	bls.n	800377e <_free_r+0x7a>
 8003778:	230c      	movs	r3, #12
 800377a:	602b      	str	r3, [r5, #0]
 800377c:	e7d4      	b.n	8003728 <_free_r+0x24>
 800377e:	6820      	ldr	r0, [r4, #0]
 8003780:	1821      	adds	r1, r4, r0
 8003782:	428b      	cmp	r3, r1
 8003784:	bf01      	itttt	eq
 8003786:	6819      	ldreq	r1, [r3, #0]
 8003788:	685b      	ldreq	r3, [r3, #4]
 800378a:	1809      	addeq	r1, r1, r0
 800378c:	6021      	streq	r1, [r4, #0]
 800378e:	6063      	str	r3, [r4, #4]
 8003790:	6054      	str	r4, [r2, #4]
 8003792:	e7c9      	b.n	8003728 <_free_r+0x24>
 8003794:	bd38      	pop	{r3, r4, r5, pc}
 8003796:	bf00      	nop
 8003798:	20000094 	.word	0x20000094

0800379c <_malloc_r>:
 800379c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800379e:	1ccd      	adds	r5, r1, #3
 80037a0:	f025 0503 	bic.w	r5, r5, #3
 80037a4:	3508      	adds	r5, #8
 80037a6:	2d0c      	cmp	r5, #12
 80037a8:	bf38      	it	cc
 80037aa:	250c      	movcc	r5, #12
 80037ac:	2d00      	cmp	r5, #0
 80037ae:	4606      	mov	r6, r0
 80037b0:	db01      	blt.n	80037b6 <_malloc_r+0x1a>
 80037b2:	42a9      	cmp	r1, r5
 80037b4:	d903      	bls.n	80037be <_malloc_r+0x22>
 80037b6:	230c      	movs	r3, #12
 80037b8:	6033      	str	r3, [r6, #0]
 80037ba:	2000      	movs	r0, #0
 80037bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80037be:	f000 fd63 	bl	8004288 <__malloc_lock>
 80037c2:	4921      	ldr	r1, [pc, #132]	; (8003848 <_malloc_r+0xac>)
 80037c4:	680a      	ldr	r2, [r1, #0]
 80037c6:	4614      	mov	r4, r2
 80037c8:	b99c      	cbnz	r4, 80037f2 <_malloc_r+0x56>
 80037ca:	4f20      	ldr	r7, [pc, #128]	; (800384c <_malloc_r+0xb0>)
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	b923      	cbnz	r3, 80037da <_malloc_r+0x3e>
 80037d0:	4621      	mov	r1, r4
 80037d2:	4630      	mov	r0, r6
 80037d4:	f000 fc86 	bl	80040e4 <_sbrk_r>
 80037d8:	6038      	str	r0, [r7, #0]
 80037da:	4629      	mov	r1, r5
 80037dc:	4630      	mov	r0, r6
 80037de:	f000 fc81 	bl	80040e4 <_sbrk_r>
 80037e2:	1c43      	adds	r3, r0, #1
 80037e4:	d123      	bne.n	800382e <_malloc_r+0x92>
 80037e6:	230c      	movs	r3, #12
 80037e8:	4630      	mov	r0, r6
 80037ea:	6033      	str	r3, [r6, #0]
 80037ec:	f000 fd52 	bl	8004294 <__malloc_unlock>
 80037f0:	e7e3      	b.n	80037ba <_malloc_r+0x1e>
 80037f2:	6823      	ldr	r3, [r4, #0]
 80037f4:	1b5b      	subs	r3, r3, r5
 80037f6:	d417      	bmi.n	8003828 <_malloc_r+0x8c>
 80037f8:	2b0b      	cmp	r3, #11
 80037fa:	d903      	bls.n	8003804 <_malloc_r+0x68>
 80037fc:	6023      	str	r3, [r4, #0]
 80037fe:	441c      	add	r4, r3
 8003800:	6025      	str	r5, [r4, #0]
 8003802:	e004      	b.n	800380e <_malloc_r+0x72>
 8003804:	6863      	ldr	r3, [r4, #4]
 8003806:	42a2      	cmp	r2, r4
 8003808:	bf0c      	ite	eq
 800380a:	600b      	streq	r3, [r1, #0]
 800380c:	6053      	strne	r3, [r2, #4]
 800380e:	4630      	mov	r0, r6
 8003810:	f000 fd40 	bl	8004294 <__malloc_unlock>
 8003814:	f104 000b 	add.w	r0, r4, #11
 8003818:	1d23      	adds	r3, r4, #4
 800381a:	f020 0007 	bic.w	r0, r0, #7
 800381e:	1ac2      	subs	r2, r0, r3
 8003820:	d0cc      	beq.n	80037bc <_malloc_r+0x20>
 8003822:	1a1b      	subs	r3, r3, r0
 8003824:	50a3      	str	r3, [r4, r2]
 8003826:	e7c9      	b.n	80037bc <_malloc_r+0x20>
 8003828:	4622      	mov	r2, r4
 800382a:	6864      	ldr	r4, [r4, #4]
 800382c:	e7cc      	b.n	80037c8 <_malloc_r+0x2c>
 800382e:	1cc4      	adds	r4, r0, #3
 8003830:	f024 0403 	bic.w	r4, r4, #3
 8003834:	42a0      	cmp	r0, r4
 8003836:	d0e3      	beq.n	8003800 <_malloc_r+0x64>
 8003838:	1a21      	subs	r1, r4, r0
 800383a:	4630      	mov	r0, r6
 800383c:	f000 fc52 	bl	80040e4 <_sbrk_r>
 8003840:	3001      	adds	r0, #1
 8003842:	d1dd      	bne.n	8003800 <_malloc_r+0x64>
 8003844:	e7cf      	b.n	80037e6 <_malloc_r+0x4a>
 8003846:	bf00      	nop
 8003848:	20000094 	.word	0x20000094
 800384c:	20000098 	.word	0x20000098

08003850 <__ssputs_r>:
 8003850:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003854:	688e      	ldr	r6, [r1, #8]
 8003856:	4682      	mov	sl, r0
 8003858:	429e      	cmp	r6, r3
 800385a:	460c      	mov	r4, r1
 800385c:	4690      	mov	r8, r2
 800385e:	461f      	mov	r7, r3
 8003860:	d838      	bhi.n	80038d4 <__ssputs_r+0x84>
 8003862:	898a      	ldrh	r2, [r1, #12]
 8003864:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003868:	d032      	beq.n	80038d0 <__ssputs_r+0x80>
 800386a:	6825      	ldr	r5, [r4, #0]
 800386c:	6909      	ldr	r1, [r1, #16]
 800386e:	3301      	adds	r3, #1
 8003870:	eba5 0901 	sub.w	r9, r5, r1
 8003874:	6965      	ldr	r5, [r4, #20]
 8003876:	444b      	add	r3, r9
 8003878:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800387c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003880:	106d      	asrs	r5, r5, #1
 8003882:	429d      	cmp	r5, r3
 8003884:	bf38      	it	cc
 8003886:	461d      	movcc	r5, r3
 8003888:	0553      	lsls	r3, r2, #21
 800388a:	d531      	bpl.n	80038f0 <__ssputs_r+0xa0>
 800388c:	4629      	mov	r1, r5
 800388e:	f7ff ff85 	bl	800379c <_malloc_r>
 8003892:	4606      	mov	r6, r0
 8003894:	b950      	cbnz	r0, 80038ac <__ssputs_r+0x5c>
 8003896:	230c      	movs	r3, #12
 8003898:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800389c:	f8ca 3000 	str.w	r3, [sl]
 80038a0:	89a3      	ldrh	r3, [r4, #12]
 80038a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038a6:	81a3      	strh	r3, [r4, #12]
 80038a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038ac:	464a      	mov	r2, r9
 80038ae:	6921      	ldr	r1, [r4, #16]
 80038b0:	f7ff fb86 	bl	8002fc0 <memcpy>
 80038b4:	89a3      	ldrh	r3, [r4, #12]
 80038b6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80038ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038be:	81a3      	strh	r3, [r4, #12]
 80038c0:	6126      	str	r6, [r4, #16]
 80038c2:	444e      	add	r6, r9
 80038c4:	6026      	str	r6, [r4, #0]
 80038c6:	463e      	mov	r6, r7
 80038c8:	6165      	str	r5, [r4, #20]
 80038ca:	eba5 0509 	sub.w	r5, r5, r9
 80038ce:	60a5      	str	r5, [r4, #8]
 80038d0:	42be      	cmp	r6, r7
 80038d2:	d900      	bls.n	80038d6 <__ssputs_r+0x86>
 80038d4:	463e      	mov	r6, r7
 80038d6:	4632      	mov	r2, r6
 80038d8:	4641      	mov	r1, r8
 80038da:	6820      	ldr	r0, [r4, #0]
 80038dc:	f000 fcba 	bl	8004254 <memmove>
 80038e0:	68a3      	ldr	r3, [r4, #8]
 80038e2:	6822      	ldr	r2, [r4, #0]
 80038e4:	1b9b      	subs	r3, r3, r6
 80038e6:	4432      	add	r2, r6
 80038e8:	2000      	movs	r0, #0
 80038ea:	60a3      	str	r3, [r4, #8]
 80038ec:	6022      	str	r2, [r4, #0]
 80038ee:	e7db      	b.n	80038a8 <__ssputs_r+0x58>
 80038f0:	462a      	mov	r2, r5
 80038f2:	f000 fcd5 	bl	80042a0 <_realloc_r>
 80038f6:	4606      	mov	r6, r0
 80038f8:	2800      	cmp	r0, #0
 80038fa:	d1e1      	bne.n	80038c0 <__ssputs_r+0x70>
 80038fc:	4650      	mov	r0, sl
 80038fe:	6921      	ldr	r1, [r4, #16]
 8003900:	f7ff ff00 	bl	8003704 <_free_r>
 8003904:	e7c7      	b.n	8003896 <__ssputs_r+0x46>
	...

08003908 <_svfiprintf_r>:
 8003908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800390c:	4698      	mov	r8, r3
 800390e:	898b      	ldrh	r3, [r1, #12]
 8003910:	4607      	mov	r7, r0
 8003912:	061b      	lsls	r3, r3, #24
 8003914:	460d      	mov	r5, r1
 8003916:	4614      	mov	r4, r2
 8003918:	b09d      	sub	sp, #116	; 0x74
 800391a:	d50e      	bpl.n	800393a <_svfiprintf_r+0x32>
 800391c:	690b      	ldr	r3, [r1, #16]
 800391e:	b963      	cbnz	r3, 800393a <_svfiprintf_r+0x32>
 8003920:	2140      	movs	r1, #64	; 0x40
 8003922:	f7ff ff3b 	bl	800379c <_malloc_r>
 8003926:	6028      	str	r0, [r5, #0]
 8003928:	6128      	str	r0, [r5, #16]
 800392a:	b920      	cbnz	r0, 8003936 <_svfiprintf_r+0x2e>
 800392c:	230c      	movs	r3, #12
 800392e:	603b      	str	r3, [r7, #0]
 8003930:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003934:	e0d1      	b.n	8003ada <_svfiprintf_r+0x1d2>
 8003936:	2340      	movs	r3, #64	; 0x40
 8003938:	616b      	str	r3, [r5, #20]
 800393a:	2300      	movs	r3, #0
 800393c:	9309      	str	r3, [sp, #36]	; 0x24
 800393e:	2320      	movs	r3, #32
 8003940:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003944:	2330      	movs	r3, #48	; 0x30
 8003946:	f04f 0901 	mov.w	r9, #1
 800394a:	f8cd 800c 	str.w	r8, [sp, #12]
 800394e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003af4 <_svfiprintf_r+0x1ec>
 8003952:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003956:	4623      	mov	r3, r4
 8003958:	469a      	mov	sl, r3
 800395a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800395e:	b10a      	cbz	r2, 8003964 <_svfiprintf_r+0x5c>
 8003960:	2a25      	cmp	r2, #37	; 0x25
 8003962:	d1f9      	bne.n	8003958 <_svfiprintf_r+0x50>
 8003964:	ebba 0b04 	subs.w	fp, sl, r4
 8003968:	d00b      	beq.n	8003982 <_svfiprintf_r+0x7a>
 800396a:	465b      	mov	r3, fp
 800396c:	4622      	mov	r2, r4
 800396e:	4629      	mov	r1, r5
 8003970:	4638      	mov	r0, r7
 8003972:	f7ff ff6d 	bl	8003850 <__ssputs_r>
 8003976:	3001      	adds	r0, #1
 8003978:	f000 80aa 	beq.w	8003ad0 <_svfiprintf_r+0x1c8>
 800397c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800397e:	445a      	add	r2, fp
 8003980:	9209      	str	r2, [sp, #36]	; 0x24
 8003982:	f89a 3000 	ldrb.w	r3, [sl]
 8003986:	2b00      	cmp	r3, #0
 8003988:	f000 80a2 	beq.w	8003ad0 <_svfiprintf_r+0x1c8>
 800398c:	2300      	movs	r3, #0
 800398e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003992:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003996:	f10a 0a01 	add.w	sl, sl, #1
 800399a:	9304      	str	r3, [sp, #16]
 800399c:	9307      	str	r3, [sp, #28]
 800399e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80039a2:	931a      	str	r3, [sp, #104]	; 0x68
 80039a4:	4654      	mov	r4, sl
 80039a6:	2205      	movs	r2, #5
 80039a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80039ac:	4851      	ldr	r0, [pc, #324]	; (8003af4 <_svfiprintf_r+0x1ec>)
 80039ae:	f000 fc43 	bl	8004238 <memchr>
 80039b2:	9a04      	ldr	r2, [sp, #16]
 80039b4:	b9d8      	cbnz	r0, 80039ee <_svfiprintf_r+0xe6>
 80039b6:	06d0      	lsls	r0, r2, #27
 80039b8:	bf44      	itt	mi
 80039ba:	2320      	movmi	r3, #32
 80039bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80039c0:	0711      	lsls	r1, r2, #28
 80039c2:	bf44      	itt	mi
 80039c4:	232b      	movmi	r3, #43	; 0x2b
 80039c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80039ca:	f89a 3000 	ldrb.w	r3, [sl]
 80039ce:	2b2a      	cmp	r3, #42	; 0x2a
 80039d0:	d015      	beq.n	80039fe <_svfiprintf_r+0xf6>
 80039d2:	4654      	mov	r4, sl
 80039d4:	2000      	movs	r0, #0
 80039d6:	f04f 0c0a 	mov.w	ip, #10
 80039da:	9a07      	ldr	r2, [sp, #28]
 80039dc:	4621      	mov	r1, r4
 80039de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80039e2:	3b30      	subs	r3, #48	; 0x30
 80039e4:	2b09      	cmp	r3, #9
 80039e6:	d94e      	bls.n	8003a86 <_svfiprintf_r+0x17e>
 80039e8:	b1b0      	cbz	r0, 8003a18 <_svfiprintf_r+0x110>
 80039ea:	9207      	str	r2, [sp, #28]
 80039ec:	e014      	b.n	8003a18 <_svfiprintf_r+0x110>
 80039ee:	eba0 0308 	sub.w	r3, r0, r8
 80039f2:	fa09 f303 	lsl.w	r3, r9, r3
 80039f6:	4313      	orrs	r3, r2
 80039f8:	46a2      	mov	sl, r4
 80039fa:	9304      	str	r3, [sp, #16]
 80039fc:	e7d2      	b.n	80039a4 <_svfiprintf_r+0x9c>
 80039fe:	9b03      	ldr	r3, [sp, #12]
 8003a00:	1d19      	adds	r1, r3, #4
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	9103      	str	r1, [sp, #12]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	bfbb      	ittet	lt
 8003a0a:	425b      	neglt	r3, r3
 8003a0c:	f042 0202 	orrlt.w	r2, r2, #2
 8003a10:	9307      	strge	r3, [sp, #28]
 8003a12:	9307      	strlt	r3, [sp, #28]
 8003a14:	bfb8      	it	lt
 8003a16:	9204      	strlt	r2, [sp, #16]
 8003a18:	7823      	ldrb	r3, [r4, #0]
 8003a1a:	2b2e      	cmp	r3, #46	; 0x2e
 8003a1c:	d10c      	bne.n	8003a38 <_svfiprintf_r+0x130>
 8003a1e:	7863      	ldrb	r3, [r4, #1]
 8003a20:	2b2a      	cmp	r3, #42	; 0x2a
 8003a22:	d135      	bne.n	8003a90 <_svfiprintf_r+0x188>
 8003a24:	9b03      	ldr	r3, [sp, #12]
 8003a26:	3402      	adds	r4, #2
 8003a28:	1d1a      	adds	r2, r3, #4
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	9203      	str	r2, [sp, #12]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	bfb8      	it	lt
 8003a32:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003a36:	9305      	str	r3, [sp, #20]
 8003a38:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003b04 <_svfiprintf_r+0x1fc>
 8003a3c:	2203      	movs	r2, #3
 8003a3e:	4650      	mov	r0, sl
 8003a40:	7821      	ldrb	r1, [r4, #0]
 8003a42:	f000 fbf9 	bl	8004238 <memchr>
 8003a46:	b140      	cbz	r0, 8003a5a <_svfiprintf_r+0x152>
 8003a48:	2340      	movs	r3, #64	; 0x40
 8003a4a:	eba0 000a 	sub.w	r0, r0, sl
 8003a4e:	fa03 f000 	lsl.w	r0, r3, r0
 8003a52:	9b04      	ldr	r3, [sp, #16]
 8003a54:	3401      	adds	r4, #1
 8003a56:	4303      	orrs	r3, r0
 8003a58:	9304      	str	r3, [sp, #16]
 8003a5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a5e:	2206      	movs	r2, #6
 8003a60:	4825      	ldr	r0, [pc, #148]	; (8003af8 <_svfiprintf_r+0x1f0>)
 8003a62:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003a66:	f000 fbe7 	bl	8004238 <memchr>
 8003a6a:	2800      	cmp	r0, #0
 8003a6c:	d038      	beq.n	8003ae0 <_svfiprintf_r+0x1d8>
 8003a6e:	4b23      	ldr	r3, [pc, #140]	; (8003afc <_svfiprintf_r+0x1f4>)
 8003a70:	bb1b      	cbnz	r3, 8003aba <_svfiprintf_r+0x1b2>
 8003a72:	9b03      	ldr	r3, [sp, #12]
 8003a74:	3307      	adds	r3, #7
 8003a76:	f023 0307 	bic.w	r3, r3, #7
 8003a7a:	3308      	adds	r3, #8
 8003a7c:	9303      	str	r3, [sp, #12]
 8003a7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a80:	4433      	add	r3, r6
 8003a82:	9309      	str	r3, [sp, #36]	; 0x24
 8003a84:	e767      	b.n	8003956 <_svfiprintf_r+0x4e>
 8003a86:	460c      	mov	r4, r1
 8003a88:	2001      	movs	r0, #1
 8003a8a:	fb0c 3202 	mla	r2, ip, r2, r3
 8003a8e:	e7a5      	b.n	80039dc <_svfiprintf_r+0xd4>
 8003a90:	2300      	movs	r3, #0
 8003a92:	f04f 0c0a 	mov.w	ip, #10
 8003a96:	4619      	mov	r1, r3
 8003a98:	3401      	adds	r4, #1
 8003a9a:	9305      	str	r3, [sp, #20]
 8003a9c:	4620      	mov	r0, r4
 8003a9e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003aa2:	3a30      	subs	r2, #48	; 0x30
 8003aa4:	2a09      	cmp	r2, #9
 8003aa6:	d903      	bls.n	8003ab0 <_svfiprintf_r+0x1a8>
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d0c5      	beq.n	8003a38 <_svfiprintf_r+0x130>
 8003aac:	9105      	str	r1, [sp, #20]
 8003aae:	e7c3      	b.n	8003a38 <_svfiprintf_r+0x130>
 8003ab0:	4604      	mov	r4, r0
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	fb0c 2101 	mla	r1, ip, r1, r2
 8003ab8:	e7f0      	b.n	8003a9c <_svfiprintf_r+0x194>
 8003aba:	ab03      	add	r3, sp, #12
 8003abc:	9300      	str	r3, [sp, #0]
 8003abe:	462a      	mov	r2, r5
 8003ac0:	4638      	mov	r0, r7
 8003ac2:	4b0f      	ldr	r3, [pc, #60]	; (8003b00 <_svfiprintf_r+0x1f8>)
 8003ac4:	a904      	add	r1, sp, #16
 8003ac6:	f3af 8000 	nop.w
 8003aca:	1c42      	adds	r2, r0, #1
 8003acc:	4606      	mov	r6, r0
 8003ace:	d1d6      	bne.n	8003a7e <_svfiprintf_r+0x176>
 8003ad0:	89ab      	ldrh	r3, [r5, #12]
 8003ad2:	065b      	lsls	r3, r3, #25
 8003ad4:	f53f af2c 	bmi.w	8003930 <_svfiprintf_r+0x28>
 8003ad8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003ada:	b01d      	add	sp, #116	; 0x74
 8003adc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ae0:	ab03      	add	r3, sp, #12
 8003ae2:	9300      	str	r3, [sp, #0]
 8003ae4:	462a      	mov	r2, r5
 8003ae6:	4638      	mov	r0, r7
 8003ae8:	4b05      	ldr	r3, [pc, #20]	; (8003b00 <_svfiprintf_r+0x1f8>)
 8003aea:	a904      	add	r1, sp, #16
 8003aec:	f000 f9d4 	bl	8003e98 <_printf_i>
 8003af0:	e7eb      	b.n	8003aca <_svfiprintf_r+0x1c2>
 8003af2:	bf00      	nop
 8003af4:	080044f0 	.word	0x080044f0
 8003af8:	080044fa 	.word	0x080044fa
 8003afc:	00000000 	.word	0x00000000
 8003b00:	08003851 	.word	0x08003851
 8003b04:	080044f6 	.word	0x080044f6

08003b08 <__sfputc_r>:
 8003b08:	6893      	ldr	r3, [r2, #8]
 8003b0a:	b410      	push	{r4}
 8003b0c:	3b01      	subs	r3, #1
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	6093      	str	r3, [r2, #8]
 8003b12:	da07      	bge.n	8003b24 <__sfputc_r+0x1c>
 8003b14:	6994      	ldr	r4, [r2, #24]
 8003b16:	42a3      	cmp	r3, r4
 8003b18:	db01      	blt.n	8003b1e <__sfputc_r+0x16>
 8003b1a:	290a      	cmp	r1, #10
 8003b1c:	d102      	bne.n	8003b24 <__sfputc_r+0x1c>
 8003b1e:	bc10      	pop	{r4}
 8003b20:	f7ff bb12 	b.w	8003148 <__swbuf_r>
 8003b24:	6813      	ldr	r3, [r2, #0]
 8003b26:	1c58      	adds	r0, r3, #1
 8003b28:	6010      	str	r0, [r2, #0]
 8003b2a:	7019      	strb	r1, [r3, #0]
 8003b2c:	4608      	mov	r0, r1
 8003b2e:	bc10      	pop	{r4}
 8003b30:	4770      	bx	lr

08003b32 <__sfputs_r>:
 8003b32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b34:	4606      	mov	r6, r0
 8003b36:	460f      	mov	r7, r1
 8003b38:	4614      	mov	r4, r2
 8003b3a:	18d5      	adds	r5, r2, r3
 8003b3c:	42ac      	cmp	r4, r5
 8003b3e:	d101      	bne.n	8003b44 <__sfputs_r+0x12>
 8003b40:	2000      	movs	r0, #0
 8003b42:	e007      	b.n	8003b54 <__sfputs_r+0x22>
 8003b44:	463a      	mov	r2, r7
 8003b46:	4630      	mov	r0, r6
 8003b48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b4c:	f7ff ffdc 	bl	8003b08 <__sfputc_r>
 8003b50:	1c43      	adds	r3, r0, #1
 8003b52:	d1f3      	bne.n	8003b3c <__sfputs_r+0xa>
 8003b54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003b58 <_vfiprintf_r>:
 8003b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b5c:	460d      	mov	r5, r1
 8003b5e:	4614      	mov	r4, r2
 8003b60:	4698      	mov	r8, r3
 8003b62:	4606      	mov	r6, r0
 8003b64:	b09d      	sub	sp, #116	; 0x74
 8003b66:	b118      	cbz	r0, 8003b70 <_vfiprintf_r+0x18>
 8003b68:	6983      	ldr	r3, [r0, #24]
 8003b6a:	b90b      	cbnz	r3, 8003b70 <_vfiprintf_r+0x18>
 8003b6c:	f7ff fcc6 	bl	80034fc <__sinit>
 8003b70:	4b89      	ldr	r3, [pc, #548]	; (8003d98 <_vfiprintf_r+0x240>)
 8003b72:	429d      	cmp	r5, r3
 8003b74:	d11b      	bne.n	8003bae <_vfiprintf_r+0x56>
 8003b76:	6875      	ldr	r5, [r6, #4]
 8003b78:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003b7a:	07d9      	lsls	r1, r3, #31
 8003b7c:	d405      	bmi.n	8003b8a <_vfiprintf_r+0x32>
 8003b7e:	89ab      	ldrh	r3, [r5, #12]
 8003b80:	059a      	lsls	r2, r3, #22
 8003b82:	d402      	bmi.n	8003b8a <_vfiprintf_r+0x32>
 8003b84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003b86:	f7ff fd57 	bl	8003638 <__retarget_lock_acquire_recursive>
 8003b8a:	89ab      	ldrh	r3, [r5, #12]
 8003b8c:	071b      	lsls	r3, r3, #28
 8003b8e:	d501      	bpl.n	8003b94 <_vfiprintf_r+0x3c>
 8003b90:	692b      	ldr	r3, [r5, #16]
 8003b92:	b9eb      	cbnz	r3, 8003bd0 <_vfiprintf_r+0x78>
 8003b94:	4629      	mov	r1, r5
 8003b96:	4630      	mov	r0, r6
 8003b98:	f7ff fb28 	bl	80031ec <__swsetup_r>
 8003b9c:	b1c0      	cbz	r0, 8003bd0 <_vfiprintf_r+0x78>
 8003b9e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003ba0:	07dc      	lsls	r4, r3, #31
 8003ba2:	d50e      	bpl.n	8003bc2 <_vfiprintf_r+0x6a>
 8003ba4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003ba8:	b01d      	add	sp, #116	; 0x74
 8003baa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bae:	4b7b      	ldr	r3, [pc, #492]	; (8003d9c <_vfiprintf_r+0x244>)
 8003bb0:	429d      	cmp	r5, r3
 8003bb2:	d101      	bne.n	8003bb8 <_vfiprintf_r+0x60>
 8003bb4:	68b5      	ldr	r5, [r6, #8]
 8003bb6:	e7df      	b.n	8003b78 <_vfiprintf_r+0x20>
 8003bb8:	4b79      	ldr	r3, [pc, #484]	; (8003da0 <_vfiprintf_r+0x248>)
 8003bba:	429d      	cmp	r5, r3
 8003bbc:	bf08      	it	eq
 8003bbe:	68f5      	ldreq	r5, [r6, #12]
 8003bc0:	e7da      	b.n	8003b78 <_vfiprintf_r+0x20>
 8003bc2:	89ab      	ldrh	r3, [r5, #12]
 8003bc4:	0598      	lsls	r0, r3, #22
 8003bc6:	d4ed      	bmi.n	8003ba4 <_vfiprintf_r+0x4c>
 8003bc8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003bca:	f7ff fd36 	bl	800363a <__retarget_lock_release_recursive>
 8003bce:	e7e9      	b.n	8003ba4 <_vfiprintf_r+0x4c>
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	9309      	str	r3, [sp, #36]	; 0x24
 8003bd4:	2320      	movs	r3, #32
 8003bd6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003bda:	2330      	movs	r3, #48	; 0x30
 8003bdc:	f04f 0901 	mov.w	r9, #1
 8003be0:	f8cd 800c 	str.w	r8, [sp, #12]
 8003be4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8003da4 <_vfiprintf_r+0x24c>
 8003be8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003bec:	4623      	mov	r3, r4
 8003bee:	469a      	mov	sl, r3
 8003bf0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003bf4:	b10a      	cbz	r2, 8003bfa <_vfiprintf_r+0xa2>
 8003bf6:	2a25      	cmp	r2, #37	; 0x25
 8003bf8:	d1f9      	bne.n	8003bee <_vfiprintf_r+0x96>
 8003bfa:	ebba 0b04 	subs.w	fp, sl, r4
 8003bfe:	d00b      	beq.n	8003c18 <_vfiprintf_r+0xc0>
 8003c00:	465b      	mov	r3, fp
 8003c02:	4622      	mov	r2, r4
 8003c04:	4629      	mov	r1, r5
 8003c06:	4630      	mov	r0, r6
 8003c08:	f7ff ff93 	bl	8003b32 <__sfputs_r>
 8003c0c:	3001      	adds	r0, #1
 8003c0e:	f000 80aa 	beq.w	8003d66 <_vfiprintf_r+0x20e>
 8003c12:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003c14:	445a      	add	r2, fp
 8003c16:	9209      	str	r2, [sp, #36]	; 0x24
 8003c18:	f89a 3000 	ldrb.w	r3, [sl]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	f000 80a2 	beq.w	8003d66 <_vfiprintf_r+0x20e>
 8003c22:	2300      	movs	r3, #0
 8003c24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003c28:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003c2c:	f10a 0a01 	add.w	sl, sl, #1
 8003c30:	9304      	str	r3, [sp, #16]
 8003c32:	9307      	str	r3, [sp, #28]
 8003c34:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003c38:	931a      	str	r3, [sp, #104]	; 0x68
 8003c3a:	4654      	mov	r4, sl
 8003c3c:	2205      	movs	r2, #5
 8003c3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c42:	4858      	ldr	r0, [pc, #352]	; (8003da4 <_vfiprintf_r+0x24c>)
 8003c44:	f000 faf8 	bl	8004238 <memchr>
 8003c48:	9a04      	ldr	r2, [sp, #16]
 8003c4a:	b9d8      	cbnz	r0, 8003c84 <_vfiprintf_r+0x12c>
 8003c4c:	06d1      	lsls	r1, r2, #27
 8003c4e:	bf44      	itt	mi
 8003c50:	2320      	movmi	r3, #32
 8003c52:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003c56:	0713      	lsls	r3, r2, #28
 8003c58:	bf44      	itt	mi
 8003c5a:	232b      	movmi	r3, #43	; 0x2b
 8003c5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003c60:	f89a 3000 	ldrb.w	r3, [sl]
 8003c64:	2b2a      	cmp	r3, #42	; 0x2a
 8003c66:	d015      	beq.n	8003c94 <_vfiprintf_r+0x13c>
 8003c68:	4654      	mov	r4, sl
 8003c6a:	2000      	movs	r0, #0
 8003c6c:	f04f 0c0a 	mov.w	ip, #10
 8003c70:	9a07      	ldr	r2, [sp, #28]
 8003c72:	4621      	mov	r1, r4
 8003c74:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003c78:	3b30      	subs	r3, #48	; 0x30
 8003c7a:	2b09      	cmp	r3, #9
 8003c7c:	d94e      	bls.n	8003d1c <_vfiprintf_r+0x1c4>
 8003c7e:	b1b0      	cbz	r0, 8003cae <_vfiprintf_r+0x156>
 8003c80:	9207      	str	r2, [sp, #28]
 8003c82:	e014      	b.n	8003cae <_vfiprintf_r+0x156>
 8003c84:	eba0 0308 	sub.w	r3, r0, r8
 8003c88:	fa09 f303 	lsl.w	r3, r9, r3
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	46a2      	mov	sl, r4
 8003c90:	9304      	str	r3, [sp, #16]
 8003c92:	e7d2      	b.n	8003c3a <_vfiprintf_r+0xe2>
 8003c94:	9b03      	ldr	r3, [sp, #12]
 8003c96:	1d19      	adds	r1, r3, #4
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	9103      	str	r1, [sp, #12]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	bfbb      	ittet	lt
 8003ca0:	425b      	neglt	r3, r3
 8003ca2:	f042 0202 	orrlt.w	r2, r2, #2
 8003ca6:	9307      	strge	r3, [sp, #28]
 8003ca8:	9307      	strlt	r3, [sp, #28]
 8003caa:	bfb8      	it	lt
 8003cac:	9204      	strlt	r2, [sp, #16]
 8003cae:	7823      	ldrb	r3, [r4, #0]
 8003cb0:	2b2e      	cmp	r3, #46	; 0x2e
 8003cb2:	d10c      	bne.n	8003cce <_vfiprintf_r+0x176>
 8003cb4:	7863      	ldrb	r3, [r4, #1]
 8003cb6:	2b2a      	cmp	r3, #42	; 0x2a
 8003cb8:	d135      	bne.n	8003d26 <_vfiprintf_r+0x1ce>
 8003cba:	9b03      	ldr	r3, [sp, #12]
 8003cbc:	3402      	adds	r4, #2
 8003cbe:	1d1a      	adds	r2, r3, #4
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	9203      	str	r2, [sp, #12]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	bfb8      	it	lt
 8003cc8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003ccc:	9305      	str	r3, [sp, #20]
 8003cce:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003db4 <_vfiprintf_r+0x25c>
 8003cd2:	2203      	movs	r2, #3
 8003cd4:	4650      	mov	r0, sl
 8003cd6:	7821      	ldrb	r1, [r4, #0]
 8003cd8:	f000 faae 	bl	8004238 <memchr>
 8003cdc:	b140      	cbz	r0, 8003cf0 <_vfiprintf_r+0x198>
 8003cde:	2340      	movs	r3, #64	; 0x40
 8003ce0:	eba0 000a 	sub.w	r0, r0, sl
 8003ce4:	fa03 f000 	lsl.w	r0, r3, r0
 8003ce8:	9b04      	ldr	r3, [sp, #16]
 8003cea:	3401      	adds	r4, #1
 8003cec:	4303      	orrs	r3, r0
 8003cee:	9304      	str	r3, [sp, #16]
 8003cf0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003cf4:	2206      	movs	r2, #6
 8003cf6:	482c      	ldr	r0, [pc, #176]	; (8003da8 <_vfiprintf_r+0x250>)
 8003cf8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003cfc:	f000 fa9c 	bl	8004238 <memchr>
 8003d00:	2800      	cmp	r0, #0
 8003d02:	d03f      	beq.n	8003d84 <_vfiprintf_r+0x22c>
 8003d04:	4b29      	ldr	r3, [pc, #164]	; (8003dac <_vfiprintf_r+0x254>)
 8003d06:	bb1b      	cbnz	r3, 8003d50 <_vfiprintf_r+0x1f8>
 8003d08:	9b03      	ldr	r3, [sp, #12]
 8003d0a:	3307      	adds	r3, #7
 8003d0c:	f023 0307 	bic.w	r3, r3, #7
 8003d10:	3308      	adds	r3, #8
 8003d12:	9303      	str	r3, [sp, #12]
 8003d14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d16:	443b      	add	r3, r7
 8003d18:	9309      	str	r3, [sp, #36]	; 0x24
 8003d1a:	e767      	b.n	8003bec <_vfiprintf_r+0x94>
 8003d1c:	460c      	mov	r4, r1
 8003d1e:	2001      	movs	r0, #1
 8003d20:	fb0c 3202 	mla	r2, ip, r2, r3
 8003d24:	e7a5      	b.n	8003c72 <_vfiprintf_r+0x11a>
 8003d26:	2300      	movs	r3, #0
 8003d28:	f04f 0c0a 	mov.w	ip, #10
 8003d2c:	4619      	mov	r1, r3
 8003d2e:	3401      	adds	r4, #1
 8003d30:	9305      	str	r3, [sp, #20]
 8003d32:	4620      	mov	r0, r4
 8003d34:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003d38:	3a30      	subs	r2, #48	; 0x30
 8003d3a:	2a09      	cmp	r2, #9
 8003d3c:	d903      	bls.n	8003d46 <_vfiprintf_r+0x1ee>
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d0c5      	beq.n	8003cce <_vfiprintf_r+0x176>
 8003d42:	9105      	str	r1, [sp, #20]
 8003d44:	e7c3      	b.n	8003cce <_vfiprintf_r+0x176>
 8003d46:	4604      	mov	r4, r0
 8003d48:	2301      	movs	r3, #1
 8003d4a:	fb0c 2101 	mla	r1, ip, r1, r2
 8003d4e:	e7f0      	b.n	8003d32 <_vfiprintf_r+0x1da>
 8003d50:	ab03      	add	r3, sp, #12
 8003d52:	9300      	str	r3, [sp, #0]
 8003d54:	462a      	mov	r2, r5
 8003d56:	4630      	mov	r0, r6
 8003d58:	4b15      	ldr	r3, [pc, #84]	; (8003db0 <_vfiprintf_r+0x258>)
 8003d5a:	a904      	add	r1, sp, #16
 8003d5c:	f3af 8000 	nop.w
 8003d60:	4607      	mov	r7, r0
 8003d62:	1c78      	adds	r0, r7, #1
 8003d64:	d1d6      	bne.n	8003d14 <_vfiprintf_r+0x1bc>
 8003d66:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003d68:	07d9      	lsls	r1, r3, #31
 8003d6a:	d405      	bmi.n	8003d78 <_vfiprintf_r+0x220>
 8003d6c:	89ab      	ldrh	r3, [r5, #12]
 8003d6e:	059a      	lsls	r2, r3, #22
 8003d70:	d402      	bmi.n	8003d78 <_vfiprintf_r+0x220>
 8003d72:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003d74:	f7ff fc61 	bl	800363a <__retarget_lock_release_recursive>
 8003d78:	89ab      	ldrh	r3, [r5, #12]
 8003d7a:	065b      	lsls	r3, r3, #25
 8003d7c:	f53f af12 	bmi.w	8003ba4 <_vfiprintf_r+0x4c>
 8003d80:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003d82:	e711      	b.n	8003ba8 <_vfiprintf_r+0x50>
 8003d84:	ab03      	add	r3, sp, #12
 8003d86:	9300      	str	r3, [sp, #0]
 8003d88:	462a      	mov	r2, r5
 8003d8a:	4630      	mov	r0, r6
 8003d8c:	4b08      	ldr	r3, [pc, #32]	; (8003db0 <_vfiprintf_r+0x258>)
 8003d8e:	a904      	add	r1, sp, #16
 8003d90:	f000 f882 	bl	8003e98 <_printf_i>
 8003d94:	e7e4      	b.n	8003d60 <_vfiprintf_r+0x208>
 8003d96:	bf00      	nop
 8003d98:	080044b0 	.word	0x080044b0
 8003d9c:	080044d0 	.word	0x080044d0
 8003da0:	08004490 	.word	0x08004490
 8003da4:	080044f0 	.word	0x080044f0
 8003da8:	080044fa 	.word	0x080044fa
 8003dac:	00000000 	.word	0x00000000
 8003db0:	08003b33 	.word	0x08003b33
 8003db4:	080044f6 	.word	0x080044f6

08003db8 <_printf_common>:
 8003db8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003dbc:	4616      	mov	r6, r2
 8003dbe:	4699      	mov	r9, r3
 8003dc0:	688a      	ldr	r2, [r1, #8]
 8003dc2:	690b      	ldr	r3, [r1, #16]
 8003dc4:	4607      	mov	r7, r0
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	bfb8      	it	lt
 8003dca:	4613      	movlt	r3, r2
 8003dcc:	6033      	str	r3, [r6, #0]
 8003dce:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003dd2:	460c      	mov	r4, r1
 8003dd4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003dd8:	b10a      	cbz	r2, 8003dde <_printf_common+0x26>
 8003dda:	3301      	adds	r3, #1
 8003ddc:	6033      	str	r3, [r6, #0]
 8003dde:	6823      	ldr	r3, [r4, #0]
 8003de0:	0699      	lsls	r1, r3, #26
 8003de2:	bf42      	ittt	mi
 8003de4:	6833      	ldrmi	r3, [r6, #0]
 8003de6:	3302      	addmi	r3, #2
 8003de8:	6033      	strmi	r3, [r6, #0]
 8003dea:	6825      	ldr	r5, [r4, #0]
 8003dec:	f015 0506 	ands.w	r5, r5, #6
 8003df0:	d106      	bne.n	8003e00 <_printf_common+0x48>
 8003df2:	f104 0a19 	add.w	sl, r4, #25
 8003df6:	68e3      	ldr	r3, [r4, #12]
 8003df8:	6832      	ldr	r2, [r6, #0]
 8003dfa:	1a9b      	subs	r3, r3, r2
 8003dfc:	42ab      	cmp	r3, r5
 8003dfe:	dc28      	bgt.n	8003e52 <_printf_common+0x9a>
 8003e00:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003e04:	1e13      	subs	r3, r2, #0
 8003e06:	6822      	ldr	r2, [r4, #0]
 8003e08:	bf18      	it	ne
 8003e0a:	2301      	movne	r3, #1
 8003e0c:	0692      	lsls	r2, r2, #26
 8003e0e:	d42d      	bmi.n	8003e6c <_printf_common+0xb4>
 8003e10:	4649      	mov	r1, r9
 8003e12:	4638      	mov	r0, r7
 8003e14:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003e18:	47c0      	blx	r8
 8003e1a:	3001      	adds	r0, #1
 8003e1c:	d020      	beq.n	8003e60 <_printf_common+0xa8>
 8003e1e:	6823      	ldr	r3, [r4, #0]
 8003e20:	68e5      	ldr	r5, [r4, #12]
 8003e22:	f003 0306 	and.w	r3, r3, #6
 8003e26:	2b04      	cmp	r3, #4
 8003e28:	bf18      	it	ne
 8003e2a:	2500      	movne	r5, #0
 8003e2c:	6832      	ldr	r2, [r6, #0]
 8003e2e:	f04f 0600 	mov.w	r6, #0
 8003e32:	68a3      	ldr	r3, [r4, #8]
 8003e34:	bf08      	it	eq
 8003e36:	1aad      	subeq	r5, r5, r2
 8003e38:	6922      	ldr	r2, [r4, #16]
 8003e3a:	bf08      	it	eq
 8003e3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003e40:	4293      	cmp	r3, r2
 8003e42:	bfc4      	itt	gt
 8003e44:	1a9b      	subgt	r3, r3, r2
 8003e46:	18ed      	addgt	r5, r5, r3
 8003e48:	341a      	adds	r4, #26
 8003e4a:	42b5      	cmp	r5, r6
 8003e4c:	d11a      	bne.n	8003e84 <_printf_common+0xcc>
 8003e4e:	2000      	movs	r0, #0
 8003e50:	e008      	b.n	8003e64 <_printf_common+0xac>
 8003e52:	2301      	movs	r3, #1
 8003e54:	4652      	mov	r2, sl
 8003e56:	4649      	mov	r1, r9
 8003e58:	4638      	mov	r0, r7
 8003e5a:	47c0      	blx	r8
 8003e5c:	3001      	adds	r0, #1
 8003e5e:	d103      	bne.n	8003e68 <_printf_common+0xb0>
 8003e60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003e64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e68:	3501      	adds	r5, #1
 8003e6a:	e7c4      	b.n	8003df6 <_printf_common+0x3e>
 8003e6c:	2030      	movs	r0, #48	; 0x30
 8003e6e:	18e1      	adds	r1, r4, r3
 8003e70:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003e74:	1c5a      	adds	r2, r3, #1
 8003e76:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003e7a:	4422      	add	r2, r4
 8003e7c:	3302      	adds	r3, #2
 8003e7e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003e82:	e7c5      	b.n	8003e10 <_printf_common+0x58>
 8003e84:	2301      	movs	r3, #1
 8003e86:	4622      	mov	r2, r4
 8003e88:	4649      	mov	r1, r9
 8003e8a:	4638      	mov	r0, r7
 8003e8c:	47c0      	blx	r8
 8003e8e:	3001      	adds	r0, #1
 8003e90:	d0e6      	beq.n	8003e60 <_printf_common+0xa8>
 8003e92:	3601      	adds	r6, #1
 8003e94:	e7d9      	b.n	8003e4a <_printf_common+0x92>
	...

08003e98 <_printf_i>:
 8003e98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003e9c:	460c      	mov	r4, r1
 8003e9e:	7e27      	ldrb	r7, [r4, #24]
 8003ea0:	4691      	mov	r9, r2
 8003ea2:	2f78      	cmp	r7, #120	; 0x78
 8003ea4:	4680      	mov	r8, r0
 8003ea6:	469a      	mov	sl, r3
 8003ea8:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003eaa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003eae:	d807      	bhi.n	8003ec0 <_printf_i+0x28>
 8003eb0:	2f62      	cmp	r7, #98	; 0x62
 8003eb2:	d80a      	bhi.n	8003eca <_printf_i+0x32>
 8003eb4:	2f00      	cmp	r7, #0
 8003eb6:	f000 80d9 	beq.w	800406c <_printf_i+0x1d4>
 8003eba:	2f58      	cmp	r7, #88	; 0x58
 8003ebc:	f000 80a4 	beq.w	8004008 <_printf_i+0x170>
 8003ec0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003ec4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003ec8:	e03a      	b.n	8003f40 <_printf_i+0xa8>
 8003eca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003ece:	2b15      	cmp	r3, #21
 8003ed0:	d8f6      	bhi.n	8003ec0 <_printf_i+0x28>
 8003ed2:	a001      	add	r0, pc, #4	; (adr r0, 8003ed8 <_printf_i+0x40>)
 8003ed4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003ed8:	08003f31 	.word	0x08003f31
 8003edc:	08003f45 	.word	0x08003f45
 8003ee0:	08003ec1 	.word	0x08003ec1
 8003ee4:	08003ec1 	.word	0x08003ec1
 8003ee8:	08003ec1 	.word	0x08003ec1
 8003eec:	08003ec1 	.word	0x08003ec1
 8003ef0:	08003f45 	.word	0x08003f45
 8003ef4:	08003ec1 	.word	0x08003ec1
 8003ef8:	08003ec1 	.word	0x08003ec1
 8003efc:	08003ec1 	.word	0x08003ec1
 8003f00:	08003ec1 	.word	0x08003ec1
 8003f04:	08004053 	.word	0x08004053
 8003f08:	08003f75 	.word	0x08003f75
 8003f0c:	08004035 	.word	0x08004035
 8003f10:	08003ec1 	.word	0x08003ec1
 8003f14:	08003ec1 	.word	0x08003ec1
 8003f18:	08004075 	.word	0x08004075
 8003f1c:	08003ec1 	.word	0x08003ec1
 8003f20:	08003f75 	.word	0x08003f75
 8003f24:	08003ec1 	.word	0x08003ec1
 8003f28:	08003ec1 	.word	0x08003ec1
 8003f2c:	0800403d 	.word	0x0800403d
 8003f30:	680b      	ldr	r3, [r1, #0]
 8003f32:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003f36:	1d1a      	adds	r2, r3, #4
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	600a      	str	r2, [r1, #0]
 8003f3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003f40:	2301      	movs	r3, #1
 8003f42:	e0a4      	b.n	800408e <_printf_i+0x1f6>
 8003f44:	6825      	ldr	r5, [r4, #0]
 8003f46:	6808      	ldr	r0, [r1, #0]
 8003f48:	062e      	lsls	r6, r5, #24
 8003f4a:	f100 0304 	add.w	r3, r0, #4
 8003f4e:	d50a      	bpl.n	8003f66 <_printf_i+0xce>
 8003f50:	6805      	ldr	r5, [r0, #0]
 8003f52:	600b      	str	r3, [r1, #0]
 8003f54:	2d00      	cmp	r5, #0
 8003f56:	da03      	bge.n	8003f60 <_printf_i+0xc8>
 8003f58:	232d      	movs	r3, #45	; 0x2d
 8003f5a:	426d      	negs	r5, r5
 8003f5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f60:	230a      	movs	r3, #10
 8003f62:	485e      	ldr	r0, [pc, #376]	; (80040dc <_printf_i+0x244>)
 8003f64:	e019      	b.n	8003f9a <_printf_i+0x102>
 8003f66:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003f6a:	6805      	ldr	r5, [r0, #0]
 8003f6c:	600b      	str	r3, [r1, #0]
 8003f6e:	bf18      	it	ne
 8003f70:	b22d      	sxthne	r5, r5
 8003f72:	e7ef      	b.n	8003f54 <_printf_i+0xbc>
 8003f74:	680b      	ldr	r3, [r1, #0]
 8003f76:	6825      	ldr	r5, [r4, #0]
 8003f78:	1d18      	adds	r0, r3, #4
 8003f7a:	6008      	str	r0, [r1, #0]
 8003f7c:	0628      	lsls	r0, r5, #24
 8003f7e:	d501      	bpl.n	8003f84 <_printf_i+0xec>
 8003f80:	681d      	ldr	r5, [r3, #0]
 8003f82:	e002      	b.n	8003f8a <_printf_i+0xf2>
 8003f84:	0669      	lsls	r1, r5, #25
 8003f86:	d5fb      	bpl.n	8003f80 <_printf_i+0xe8>
 8003f88:	881d      	ldrh	r5, [r3, #0]
 8003f8a:	2f6f      	cmp	r7, #111	; 0x6f
 8003f8c:	bf0c      	ite	eq
 8003f8e:	2308      	moveq	r3, #8
 8003f90:	230a      	movne	r3, #10
 8003f92:	4852      	ldr	r0, [pc, #328]	; (80040dc <_printf_i+0x244>)
 8003f94:	2100      	movs	r1, #0
 8003f96:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003f9a:	6866      	ldr	r6, [r4, #4]
 8003f9c:	2e00      	cmp	r6, #0
 8003f9e:	bfa8      	it	ge
 8003fa0:	6821      	ldrge	r1, [r4, #0]
 8003fa2:	60a6      	str	r6, [r4, #8]
 8003fa4:	bfa4      	itt	ge
 8003fa6:	f021 0104 	bicge.w	r1, r1, #4
 8003faa:	6021      	strge	r1, [r4, #0]
 8003fac:	b90d      	cbnz	r5, 8003fb2 <_printf_i+0x11a>
 8003fae:	2e00      	cmp	r6, #0
 8003fb0:	d04d      	beq.n	800404e <_printf_i+0x1b6>
 8003fb2:	4616      	mov	r6, r2
 8003fb4:	fbb5 f1f3 	udiv	r1, r5, r3
 8003fb8:	fb03 5711 	mls	r7, r3, r1, r5
 8003fbc:	5dc7      	ldrb	r7, [r0, r7]
 8003fbe:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003fc2:	462f      	mov	r7, r5
 8003fc4:	42bb      	cmp	r3, r7
 8003fc6:	460d      	mov	r5, r1
 8003fc8:	d9f4      	bls.n	8003fb4 <_printf_i+0x11c>
 8003fca:	2b08      	cmp	r3, #8
 8003fcc:	d10b      	bne.n	8003fe6 <_printf_i+0x14e>
 8003fce:	6823      	ldr	r3, [r4, #0]
 8003fd0:	07df      	lsls	r7, r3, #31
 8003fd2:	d508      	bpl.n	8003fe6 <_printf_i+0x14e>
 8003fd4:	6923      	ldr	r3, [r4, #16]
 8003fd6:	6861      	ldr	r1, [r4, #4]
 8003fd8:	4299      	cmp	r1, r3
 8003fda:	bfde      	ittt	le
 8003fdc:	2330      	movle	r3, #48	; 0x30
 8003fde:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003fe2:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8003fe6:	1b92      	subs	r2, r2, r6
 8003fe8:	6122      	str	r2, [r4, #16]
 8003fea:	464b      	mov	r3, r9
 8003fec:	4621      	mov	r1, r4
 8003fee:	4640      	mov	r0, r8
 8003ff0:	f8cd a000 	str.w	sl, [sp]
 8003ff4:	aa03      	add	r2, sp, #12
 8003ff6:	f7ff fedf 	bl	8003db8 <_printf_common>
 8003ffa:	3001      	adds	r0, #1
 8003ffc:	d14c      	bne.n	8004098 <_printf_i+0x200>
 8003ffe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004002:	b004      	add	sp, #16
 8004004:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004008:	4834      	ldr	r0, [pc, #208]	; (80040dc <_printf_i+0x244>)
 800400a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800400e:	680e      	ldr	r6, [r1, #0]
 8004010:	6823      	ldr	r3, [r4, #0]
 8004012:	f856 5b04 	ldr.w	r5, [r6], #4
 8004016:	061f      	lsls	r7, r3, #24
 8004018:	600e      	str	r6, [r1, #0]
 800401a:	d514      	bpl.n	8004046 <_printf_i+0x1ae>
 800401c:	07d9      	lsls	r1, r3, #31
 800401e:	bf44      	itt	mi
 8004020:	f043 0320 	orrmi.w	r3, r3, #32
 8004024:	6023      	strmi	r3, [r4, #0]
 8004026:	b91d      	cbnz	r5, 8004030 <_printf_i+0x198>
 8004028:	6823      	ldr	r3, [r4, #0]
 800402a:	f023 0320 	bic.w	r3, r3, #32
 800402e:	6023      	str	r3, [r4, #0]
 8004030:	2310      	movs	r3, #16
 8004032:	e7af      	b.n	8003f94 <_printf_i+0xfc>
 8004034:	6823      	ldr	r3, [r4, #0]
 8004036:	f043 0320 	orr.w	r3, r3, #32
 800403a:	6023      	str	r3, [r4, #0]
 800403c:	2378      	movs	r3, #120	; 0x78
 800403e:	4828      	ldr	r0, [pc, #160]	; (80040e0 <_printf_i+0x248>)
 8004040:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004044:	e7e3      	b.n	800400e <_printf_i+0x176>
 8004046:	065e      	lsls	r6, r3, #25
 8004048:	bf48      	it	mi
 800404a:	b2ad      	uxthmi	r5, r5
 800404c:	e7e6      	b.n	800401c <_printf_i+0x184>
 800404e:	4616      	mov	r6, r2
 8004050:	e7bb      	b.n	8003fca <_printf_i+0x132>
 8004052:	680b      	ldr	r3, [r1, #0]
 8004054:	6826      	ldr	r6, [r4, #0]
 8004056:	1d1d      	adds	r5, r3, #4
 8004058:	6960      	ldr	r0, [r4, #20]
 800405a:	600d      	str	r5, [r1, #0]
 800405c:	0635      	lsls	r5, r6, #24
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	d501      	bpl.n	8004066 <_printf_i+0x1ce>
 8004062:	6018      	str	r0, [r3, #0]
 8004064:	e002      	b.n	800406c <_printf_i+0x1d4>
 8004066:	0671      	lsls	r1, r6, #25
 8004068:	d5fb      	bpl.n	8004062 <_printf_i+0x1ca>
 800406a:	8018      	strh	r0, [r3, #0]
 800406c:	2300      	movs	r3, #0
 800406e:	4616      	mov	r6, r2
 8004070:	6123      	str	r3, [r4, #16]
 8004072:	e7ba      	b.n	8003fea <_printf_i+0x152>
 8004074:	680b      	ldr	r3, [r1, #0]
 8004076:	1d1a      	adds	r2, r3, #4
 8004078:	600a      	str	r2, [r1, #0]
 800407a:	681e      	ldr	r6, [r3, #0]
 800407c:	2100      	movs	r1, #0
 800407e:	4630      	mov	r0, r6
 8004080:	6862      	ldr	r2, [r4, #4]
 8004082:	f000 f8d9 	bl	8004238 <memchr>
 8004086:	b108      	cbz	r0, 800408c <_printf_i+0x1f4>
 8004088:	1b80      	subs	r0, r0, r6
 800408a:	6060      	str	r0, [r4, #4]
 800408c:	6863      	ldr	r3, [r4, #4]
 800408e:	6123      	str	r3, [r4, #16]
 8004090:	2300      	movs	r3, #0
 8004092:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004096:	e7a8      	b.n	8003fea <_printf_i+0x152>
 8004098:	4632      	mov	r2, r6
 800409a:	4649      	mov	r1, r9
 800409c:	4640      	mov	r0, r8
 800409e:	6923      	ldr	r3, [r4, #16]
 80040a0:	47d0      	blx	sl
 80040a2:	3001      	adds	r0, #1
 80040a4:	d0ab      	beq.n	8003ffe <_printf_i+0x166>
 80040a6:	6823      	ldr	r3, [r4, #0]
 80040a8:	079b      	lsls	r3, r3, #30
 80040aa:	d413      	bmi.n	80040d4 <_printf_i+0x23c>
 80040ac:	68e0      	ldr	r0, [r4, #12]
 80040ae:	9b03      	ldr	r3, [sp, #12]
 80040b0:	4298      	cmp	r0, r3
 80040b2:	bfb8      	it	lt
 80040b4:	4618      	movlt	r0, r3
 80040b6:	e7a4      	b.n	8004002 <_printf_i+0x16a>
 80040b8:	2301      	movs	r3, #1
 80040ba:	4632      	mov	r2, r6
 80040bc:	4649      	mov	r1, r9
 80040be:	4640      	mov	r0, r8
 80040c0:	47d0      	blx	sl
 80040c2:	3001      	adds	r0, #1
 80040c4:	d09b      	beq.n	8003ffe <_printf_i+0x166>
 80040c6:	3501      	adds	r5, #1
 80040c8:	68e3      	ldr	r3, [r4, #12]
 80040ca:	9903      	ldr	r1, [sp, #12]
 80040cc:	1a5b      	subs	r3, r3, r1
 80040ce:	42ab      	cmp	r3, r5
 80040d0:	dcf2      	bgt.n	80040b8 <_printf_i+0x220>
 80040d2:	e7eb      	b.n	80040ac <_printf_i+0x214>
 80040d4:	2500      	movs	r5, #0
 80040d6:	f104 0619 	add.w	r6, r4, #25
 80040da:	e7f5      	b.n	80040c8 <_printf_i+0x230>
 80040dc:	08004501 	.word	0x08004501
 80040e0:	08004512 	.word	0x08004512

080040e4 <_sbrk_r>:
 80040e4:	b538      	push	{r3, r4, r5, lr}
 80040e6:	2300      	movs	r3, #0
 80040e8:	4d05      	ldr	r5, [pc, #20]	; (8004100 <_sbrk_r+0x1c>)
 80040ea:	4604      	mov	r4, r0
 80040ec:	4608      	mov	r0, r1
 80040ee:	602b      	str	r3, [r5, #0]
 80040f0:	f7fd f960 	bl	80013b4 <_sbrk>
 80040f4:	1c43      	adds	r3, r0, #1
 80040f6:	d102      	bne.n	80040fe <_sbrk_r+0x1a>
 80040f8:	682b      	ldr	r3, [r5, #0]
 80040fa:	b103      	cbz	r3, 80040fe <_sbrk_r+0x1a>
 80040fc:	6023      	str	r3, [r4, #0]
 80040fe:	bd38      	pop	{r3, r4, r5, pc}
 8004100:	2000048c 	.word	0x2000048c

08004104 <__sread>:
 8004104:	b510      	push	{r4, lr}
 8004106:	460c      	mov	r4, r1
 8004108:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800410c:	f000 f8ee 	bl	80042ec <_read_r>
 8004110:	2800      	cmp	r0, #0
 8004112:	bfab      	itete	ge
 8004114:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004116:	89a3      	ldrhlt	r3, [r4, #12]
 8004118:	181b      	addge	r3, r3, r0
 800411a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800411e:	bfac      	ite	ge
 8004120:	6563      	strge	r3, [r4, #84]	; 0x54
 8004122:	81a3      	strhlt	r3, [r4, #12]
 8004124:	bd10      	pop	{r4, pc}

08004126 <__swrite>:
 8004126:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800412a:	461f      	mov	r7, r3
 800412c:	898b      	ldrh	r3, [r1, #12]
 800412e:	4605      	mov	r5, r0
 8004130:	05db      	lsls	r3, r3, #23
 8004132:	460c      	mov	r4, r1
 8004134:	4616      	mov	r6, r2
 8004136:	d505      	bpl.n	8004144 <__swrite+0x1e>
 8004138:	2302      	movs	r3, #2
 800413a:	2200      	movs	r2, #0
 800413c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004140:	f000 f868 	bl	8004214 <_lseek_r>
 8004144:	89a3      	ldrh	r3, [r4, #12]
 8004146:	4632      	mov	r2, r6
 8004148:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800414c:	81a3      	strh	r3, [r4, #12]
 800414e:	4628      	mov	r0, r5
 8004150:	463b      	mov	r3, r7
 8004152:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004156:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800415a:	f000 b817 	b.w	800418c <_write_r>

0800415e <__sseek>:
 800415e:	b510      	push	{r4, lr}
 8004160:	460c      	mov	r4, r1
 8004162:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004166:	f000 f855 	bl	8004214 <_lseek_r>
 800416a:	1c43      	adds	r3, r0, #1
 800416c:	89a3      	ldrh	r3, [r4, #12]
 800416e:	bf15      	itete	ne
 8004170:	6560      	strne	r0, [r4, #84]	; 0x54
 8004172:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004176:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800417a:	81a3      	strheq	r3, [r4, #12]
 800417c:	bf18      	it	ne
 800417e:	81a3      	strhne	r3, [r4, #12]
 8004180:	bd10      	pop	{r4, pc}

08004182 <__sclose>:
 8004182:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004186:	f000 b813 	b.w	80041b0 <_close_r>
	...

0800418c <_write_r>:
 800418c:	b538      	push	{r3, r4, r5, lr}
 800418e:	4604      	mov	r4, r0
 8004190:	4608      	mov	r0, r1
 8004192:	4611      	mov	r1, r2
 8004194:	2200      	movs	r2, #0
 8004196:	4d05      	ldr	r5, [pc, #20]	; (80041ac <_write_r+0x20>)
 8004198:	602a      	str	r2, [r5, #0]
 800419a:	461a      	mov	r2, r3
 800419c:	f7fc fe4e 	bl	8000e3c <_write>
 80041a0:	1c43      	adds	r3, r0, #1
 80041a2:	d102      	bne.n	80041aa <_write_r+0x1e>
 80041a4:	682b      	ldr	r3, [r5, #0]
 80041a6:	b103      	cbz	r3, 80041aa <_write_r+0x1e>
 80041a8:	6023      	str	r3, [r4, #0]
 80041aa:	bd38      	pop	{r3, r4, r5, pc}
 80041ac:	2000048c 	.word	0x2000048c

080041b0 <_close_r>:
 80041b0:	b538      	push	{r3, r4, r5, lr}
 80041b2:	2300      	movs	r3, #0
 80041b4:	4d05      	ldr	r5, [pc, #20]	; (80041cc <_close_r+0x1c>)
 80041b6:	4604      	mov	r4, r0
 80041b8:	4608      	mov	r0, r1
 80041ba:	602b      	str	r3, [r5, #0]
 80041bc:	f7fd f8ca 	bl	8001354 <_close>
 80041c0:	1c43      	adds	r3, r0, #1
 80041c2:	d102      	bne.n	80041ca <_close_r+0x1a>
 80041c4:	682b      	ldr	r3, [r5, #0]
 80041c6:	b103      	cbz	r3, 80041ca <_close_r+0x1a>
 80041c8:	6023      	str	r3, [r4, #0]
 80041ca:	bd38      	pop	{r3, r4, r5, pc}
 80041cc:	2000048c 	.word	0x2000048c

080041d0 <_fstat_r>:
 80041d0:	b538      	push	{r3, r4, r5, lr}
 80041d2:	2300      	movs	r3, #0
 80041d4:	4d06      	ldr	r5, [pc, #24]	; (80041f0 <_fstat_r+0x20>)
 80041d6:	4604      	mov	r4, r0
 80041d8:	4608      	mov	r0, r1
 80041da:	4611      	mov	r1, r2
 80041dc:	602b      	str	r3, [r5, #0]
 80041de:	f7fd f8c4 	bl	800136a <_fstat>
 80041e2:	1c43      	adds	r3, r0, #1
 80041e4:	d102      	bne.n	80041ec <_fstat_r+0x1c>
 80041e6:	682b      	ldr	r3, [r5, #0]
 80041e8:	b103      	cbz	r3, 80041ec <_fstat_r+0x1c>
 80041ea:	6023      	str	r3, [r4, #0]
 80041ec:	bd38      	pop	{r3, r4, r5, pc}
 80041ee:	bf00      	nop
 80041f0:	2000048c 	.word	0x2000048c

080041f4 <_isatty_r>:
 80041f4:	b538      	push	{r3, r4, r5, lr}
 80041f6:	2300      	movs	r3, #0
 80041f8:	4d05      	ldr	r5, [pc, #20]	; (8004210 <_isatty_r+0x1c>)
 80041fa:	4604      	mov	r4, r0
 80041fc:	4608      	mov	r0, r1
 80041fe:	602b      	str	r3, [r5, #0]
 8004200:	f7fd f8c2 	bl	8001388 <_isatty>
 8004204:	1c43      	adds	r3, r0, #1
 8004206:	d102      	bne.n	800420e <_isatty_r+0x1a>
 8004208:	682b      	ldr	r3, [r5, #0]
 800420a:	b103      	cbz	r3, 800420e <_isatty_r+0x1a>
 800420c:	6023      	str	r3, [r4, #0]
 800420e:	bd38      	pop	{r3, r4, r5, pc}
 8004210:	2000048c 	.word	0x2000048c

08004214 <_lseek_r>:
 8004214:	b538      	push	{r3, r4, r5, lr}
 8004216:	4604      	mov	r4, r0
 8004218:	4608      	mov	r0, r1
 800421a:	4611      	mov	r1, r2
 800421c:	2200      	movs	r2, #0
 800421e:	4d05      	ldr	r5, [pc, #20]	; (8004234 <_lseek_r+0x20>)
 8004220:	602a      	str	r2, [r5, #0]
 8004222:	461a      	mov	r2, r3
 8004224:	f7fd f8ba 	bl	800139c <_lseek>
 8004228:	1c43      	adds	r3, r0, #1
 800422a:	d102      	bne.n	8004232 <_lseek_r+0x1e>
 800422c:	682b      	ldr	r3, [r5, #0]
 800422e:	b103      	cbz	r3, 8004232 <_lseek_r+0x1e>
 8004230:	6023      	str	r3, [r4, #0]
 8004232:	bd38      	pop	{r3, r4, r5, pc}
 8004234:	2000048c 	.word	0x2000048c

08004238 <memchr>:
 8004238:	4603      	mov	r3, r0
 800423a:	b510      	push	{r4, lr}
 800423c:	b2c9      	uxtb	r1, r1
 800423e:	4402      	add	r2, r0
 8004240:	4293      	cmp	r3, r2
 8004242:	4618      	mov	r0, r3
 8004244:	d101      	bne.n	800424a <memchr+0x12>
 8004246:	2000      	movs	r0, #0
 8004248:	e003      	b.n	8004252 <memchr+0x1a>
 800424a:	7804      	ldrb	r4, [r0, #0]
 800424c:	3301      	adds	r3, #1
 800424e:	428c      	cmp	r4, r1
 8004250:	d1f6      	bne.n	8004240 <memchr+0x8>
 8004252:	bd10      	pop	{r4, pc}

08004254 <memmove>:
 8004254:	4288      	cmp	r0, r1
 8004256:	b510      	push	{r4, lr}
 8004258:	eb01 0402 	add.w	r4, r1, r2
 800425c:	d902      	bls.n	8004264 <memmove+0x10>
 800425e:	4284      	cmp	r4, r0
 8004260:	4623      	mov	r3, r4
 8004262:	d807      	bhi.n	8004274 <memmove+0x20>
 8004264:	1e43      	subs	r3, r0, #1
 8004266:	42a1      	cmp	r1, r4
 8004268:	d008      	beq.n	800427c <memmove+0x28>
 800426a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800426e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004272:	e7f8      	b.n	8004266 <memmove+0x12>
 8004274:	4601      	mov	r1, r0
 8004276:	4402      	add	r2, r0
 8004278:	428a      	cmp	r2, r1
 800427a:	d100      	bne.n	800427e <memmove+0x2a>
 800427c:	bd10      	pop	{r4, pc}
 800427e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004282:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004286:	e7f7      	b.n	8004278 <memmove+0x24>

08004288 <__malloc_lock>:
 8004288:	4801      	ldr	r0, [pc, #4]	; (8004290 <__malloc_lock+0x8>)
 800428a:	f7ff b9d5 	b.w	8003638 <__retarget_lock_acquire_recursive>
 800428e:	bf00      	nop
 8004290:	20000484 	.word	0x20000484

08004294 <__malloc_unlock>:
 8004294:	4801      	ldr	r0, [pc, #4]	; (800429c <__malloc_unlock+0x8>)
 8004296:	f7ff b9d0 	b.w	800363a <__retarget_lock_release_recursive>
 800429a:	bf00      	nop
 800429c:	20000484 	.word	0x20000484

080042a0 <_realloc_r>:
 80042a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042a2:	4607      	mov	r7, r0
 80042a4:	4614      	mov	r4, r2
 80042a6:	460e      	mov	r6, r1
 80042a8:	b921      	cbnz	r1, 80042b4 <_realloc_r+0x14>
 80042aa:	4611      	mov	r1, r2
 80042ac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80042b0:	f7ff ba74 	b.w	800379c <_malloc_r>
 80042b4:	b922      	cbnz	r2, 80042c0 <_realloc_r+0x20>
 80042b6:	f7ff fa25 	bl	8003704 <_free_r>
 80042ba:	4625      	mov	r5, r4
 80042bc:	4628      	mov	r0, r5
 80042be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80042c0:	f000 f826 	bl	8004310 <_malloc_usable_size_r>
 80042c4:	42a0      	cmp	r0, r4
 80042c6:	d20f      	bcs.n	80042e8 <_realloc_r+0x48>
 80042c8:	4621      	mov	r1, r4
 80042ca:	4638      	mov	r0, r7
 80042cc:	f7ff fa66 	bl	800379c <_malloc_r>
 80042d0:	4605      	mov	r5, r0
 80042d2:	2800      	cmp	r0, #0
 80042d4:	d0f2      	beq.n	80042bc <_realloc_r+0x1c>
 80042d6:	4631      	mov	r1, r6
 80042d8:	4622      	mov	r2, r4
 80042da:	f7fe fe71 	bl	8002fc0 <memcpy>
 80042de:	4631      	mov	r1, r6
 80042e0:	4638      	mov	r0, r7
 80042e2:	f7ff fa0f 	bl	8003704 <_free_r>
 80042e6:	e7e9      	b.n	80042bc <_realloc_r+0x1c>
 80042e8:	4635      	mov	r5, r6
 80042ea:	e7e7      	b.n	80042bc <_realloc_r+0x1c>

080042ec <_read_r>:
 80042ec:	b538      	push	{r3, r4, r5, lr}
 80042ee:	4604      	mov	r4, r0
 80042f0:	4608      	mov	r0, r1
 80042f2:	4611      	mov	r1, r2
 80042f4:	2200      	movs	r2, #0
 80042f6:	4d05      	ldr	r5, [pc, #20]	; (800430c <_read_r+0x20>)
 80042f8:	602a      	str	r2, [r5, #0]
 80042fa:	461a      	mov	r2, r3
 80042fc:	f7fd f80d 	bl	800131a <_read>
 8004300:	1c43      	adds	r3, r0, #1
 8004302:	d102      	bne.n	800430a <_read_r+0x1e>
 8004304:	682b      	ldr	r3, [r5, #0]
 8004306:	b103      	cbz	r3, 800430a <_read_r+0x1e>
 8004308:	6023      	str	r3, [r4, #0]
 800430a:	bd38      	pop	{r3, r4, r5, pc}
 800430c:	2000048c 	.word	0x2000048c

08004310 <_malloc_usable_size_r>:
 8004310:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004314:	1f18      	subs	r0, r3, #4
 8004316:	2b00      	cmp	r3, #0
 8004318:	bfbc      	itt	lt
 800431a:	580b      	ldrlt	r3, [r1, r0]
 800431c:	18c0      	addlt	r0, r0, r3
 800431e:	4770      	bx	lr

08004320 <_init>:
 8004320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004322:	bf00      	nop
 8004324:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004326:	bc08      	pop	{r3}
 8004328:	469e      	mov	lr, r3
 800432a:	4770      	bx	lr

0800432c <_fini>:
 800432c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800432e:	bf00      	nop
 8004330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004332:	bc08      	pop	{r3}
 8004334:	469e      	mov	lr, r3
 8004336:	4770      	bx	lr
