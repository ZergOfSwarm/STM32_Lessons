
post_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012b40  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004dc0  08012cd0  08012cd0  00022cd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017a90  08017a90  0003008c  2**0
                  CONTENTS
  4 .ARM          00000008  08017a90  08017a90  00027a90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017a98  08017a98  0003008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017a98  08017a98  00027a98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08017a9c  08017a9c  00027a9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08017aa0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0003008c  2**0
                  CONTENTS
 10 .bss          0000d728  2000008c  2000008c  0003008c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000d7b4  2000d7b4  0003008c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0003008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00031c6c  00000000  00000000  000300bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005fc4  00000000  00000000  00061d28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001420  00000000  00000000  00067cf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000013c8  00000000  00000000  00069110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002dd18  00000000  00000000  0006a4d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00025011  00000000  00000000  000981f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dda39  00000000  00000000  000bd201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0019ac3a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005d40  00000000  00000000  0019ac90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000008c 	.word	0x2000008c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08012cb8 	.word	0x08012cb8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000090 	.word	0x20000090
 80001cc:	08012cb8 	.word	0x08012cb8

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002b4:	f000 b96e 	b.w	8000594 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468c      	mov	ip, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	f040 8083 	bne.w	80003e6 <__udivmoddi4+0x116>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d947      	bls.n	8000376 <__udivmoddi4+0xa6>
 80002e6:	fab2 f282 	clz	r2, r2
 80002ea:	b142      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ec:	f1c2 0020 	rsb	r0, r2, #32
 80002f0:	fa24 f000 	lsr.w	r0, r4, r0
 80002f4:	4091      	lsls	r1, r2
 80002f6:	4097      	lsls	r7, r2
 80002f8:	ea40 0c01 	orr.w	ip, r0, r1
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbbc f6f8 	udiv	r6, ip, r8
 8000308:	fa1f fe87 	uxth.w	lr, r7
 800030c:	fb08 c116 	mls	r1, r8, r6, ip
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb06 f10e 	mul.w	r1, r6, lr
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18fb      	adds	r3, r7, r3
 800031e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000322:	f080 8119 	bcs.w	8000558 <__udivmoddi4+0x288>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8116 	bls.w	8000558 <__udivmoddi4+0x288>
 800032c:	3e02      	subs	r6, #2
 800032e:	443b      	add	r3, r7
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0f8 	udiv	r0, r3, r8
 8000338:	fb08 3310 	mls	r3, r8, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fe0e 	mul.w	lr, r0, lr
 8000344:	45a6      	cmp	lr, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	193c      	adds	r4, r7, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800034e:	f080 8105 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f240 8102 	bls.w	800055c <__udivmoddi4+0x28c>
 8000358:	3802      	subs	r0, #2
 800035a:	443c      	add	r4, r7
 800035c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000360:	eba4 040e 	sub.w	r4, r4, lr
 8000364:	2600      	movs	r6, #0
 8000366:	b11d      	cbz	r5, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c5 4300 	strd	r4, r3, [r5]
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	b902      	cbnz	r2, 800037a <__udivmoddi4+0xaa>
 8000378:	deff      	udf	#255	; 0xff
 800037a:	fab2 f282 	clz	r2, r2
 800037e:	2a00      	cmp	r2, #0
 8000380:	d150      	bne.n	8000424 <__udivmoddi4+0x154>
 8000382:	1bcb      	subs	r3, r1, r7
 8000384:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000388:	fa1f f887 	uxth.w	r8, r7
 800038c:	2601      	movs	r6, #1
 800038e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000392:	0c21      	lsrs	r1, r4, #16
 8000394:	fb0e 331c 	mls	r3, lr, ip, r3
 8000398:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800039c:	fb08 f30c 	mul.w	r3, r8, ip
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80003a4:	1879      	adds	r1, r7, r1
 80003a6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0xe2>
 80003ac:	428b      	cmp	r3, r1
 80003ae:	f200 80e9 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003b2:	4684      	mov	ip, r0
 80003b4:	1ac9      	subs	r1, r1, r3
 80003b6:	b2a3      	uxth	r3, r4
 80003b8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003bc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003c0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003c4:	fb08 f800 	mul.w	r8, r8, r0
 80003c8:	45a0      	cmp	r8, r4
 80003ca:	d907      	bls.n	80003dc <__udivmoddi4+0x10c>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x10a>
 80003d4:	45a0      	cmp	r8, r4
 80003d6:	f200 80d9 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003da:	4618      	mov	r0, r3
 80003dc:	eba4 0408 	sub.w	r4, r4, r8
 80003e0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003e4:	e7bf      	b.n	8000366 <__udivmoddi4+0x96>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0x12e>
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	f000 80b1 	beq.w	8000552 <__udivmoddi4+0x282>
 80003f0:	2600      	movs	r6, #0
 80003f2:	e9c5 0100 	strd	r0, r1, [r5]
 80003f6:	4630      	mov	r0, r6
 80003f8:	4631      	mov	r1, r6
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f683 	clz	r6, r3
 8000402:	2e00      	cmp	r6, #0
 8000404:	d14a      	bne.n	800049c <__udivmoddi4+0x1cc>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0x140>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80b8 	bhi.w	8000580 <__udivmoddi4+0x2b0>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0103 	sbc.w	r1, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	468c      	mov	ip, r1
 800041a:	2d00      	cmp	r5, #0
 800041c:	d0a8      	beq.n	8000370 <__udivmoddi4+0xa0>
 800041e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000422:	e7a5      	b.n	8000370 <__udivmoddi4+0xa0>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f603 	lsr.w	r6, r0, r3
 800042c:	4097      	lsls	r7, r2
 800042e:	fa01 f002 	lsl.w	r0, r1, r2
 8000432:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000436:	40d9      	lsrs	r1, r3
 8000438:	4330      	orrs	r0, r6
 800043a:	0c03      	lsrs	r3, r0, #16
 800043c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000440:	fa1f f887 	uxth.w	r8, r7
 8000444:	fb0e 1116 	mls	r1, lr, r6, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb06 f108 	mul.w	r1, r6, r8
 8000450:	4299      	cmp	r1, r3
 8000452:	fa04 f402 	lsl.w	r4, r4, r2
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x19c>
 8000458:	18fb      	adds	r3, r7, r3
 800045a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800045e:	f080 808d 	bcs.w	800057c <__udivmoddi4+0x2ac>
 8000462:	4299      	cmp	r1, r3
 8000464:	f240 808a 	bls.w	800057c <__udivmoddi4+0x2ac>
 8000468:	3e02      	subs	r6, #2
 800046a:	443b      	add	r3, r7
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b281      	uxth	r1, r0
 8000470:	fbb3 f0fe 	udiv	r0, r3, lr
 8000474:	fb0e 3310 	mls	r3, lr, r0, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb00 f308 	mul.w	r3, r0, r8
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0x1c4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800048a:	d273      	bcs.n	8000574 <__udivmoddi4+0x2a4>
 800048c:	428b      	cmp	r3, r1
 800048e:	d971      	bls.n	8000574 <__udivmoddi4+0x2a4>
 8000490:	3802      	subs	r0, #2
 8000492:	4439      	add	r1, r7
 8000494:	1acb      	subs	r3, r1, r3
 8000496:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800049a:	e778      	b.n	800038e <__udivmoddi4+0xbe>
 800049c:	f1c6 0c20 	rsb	ip, r6, #32
 80004a0:	fa03 f406 	lsl.w	r4, r3, r6
 80004a4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004a8:	431c      	orrs	r4, r3
 80004aa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ae:	fa01 f306 	lsl.w	r3, r1, r6
 80004b2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004b6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ba:	431f      	orrs	r7, r3
 80004bc:	0c3b      	lsrs	r3, r7, #16
 80004be:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c2:	fa1f f884 	uxth.w	r8, r4
 80004c6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ce:	fb09 fa08 	mul.w	sl, r9, r8
 80004d2:	458a      	cmp	sl, r1
 80004d4:	fa02 f206 	lsl.w	r2, r2, r6
 80004d8:	fa00 f306 	lsl.w	r3, r0, r6
 80004dc:	d908      	bls.n	80004f0 <__udivmoddi4+0x220>
 80004de:	1861      	adds	r1, r4, r1
 80004e0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004e4:	d248      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 80004e6:	458a      	cmp	sl, r1
 80004e8:	d946      	bls.n	8000578 <__udivmoddi4+0x2a8>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4421      	add	r1, r4
 80004f0:	eba1 010a 	sub.w	r1, r1, sl
 80004f4:	b2bf      	uxth	r7, r7
 80004f6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004fa:	fb0e 1110 	mls	r1, lr, r0, r1
 80004fe:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000502:	fb00 f808 	mul.w	r8, r0, r8
 8000506:	45b8      	cmp	r8, r7
 8000508:	d907      	bls.n	800051a <__udivmoddi4+0x24a>
 800050a:	19e7      	adds	r7, r4, r7
 800050c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000510:	d22e      	bcs.n	8000570 <__udivmoddi4+0x2a0>
 8000512:	45b8      	cmp	r8, r7
 8000514:	d92c      	bls.n	8000570 <__udivmoddi4+0x2a0>
 8000516:	3802      	subs	r0, #2
 8000518:	4427      	add	r7, r4
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	eba7 0708 	sub.w	r7, r7, r8
 8000522:	fba0 8902 	umull	r8, r9, r0, r2
 8000526:	454f      	cmp	r7, r9
 8000528:	46c6      	mov	lr, r8
 800052a:	4649      	mov	r1, r9
 800052c:	d31a      	bcc.n	8000564 <__udivmoddi4+0x294>
 800052e:	d017      	beq.n	8000560 <__udivmoddi4+0x290>
 8000530:	b15d      	cbz	r5, 800054a <__udivmoddi4+0x27a>
 8000532:	ebb3 020e 	subs.w	r2, r3, lr
 8000536:	eb67 0701 	sbc.w	r7, r7, r1
 800053a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800053e:	40f2      	lsrs	r2, r6
 8000540:	ea4c 0202 	orr.w	r2, ip, r2
 8000544:	40f7      	lsrs	r7, r6
 8000546:	e9c5 2700 	strd	r2, r7, [r5]
 800054a:	2600      	movs	r6, #0
 800054c:	4631      	mov	r1, r6
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e70b      	b.n	8000370 <__udivmoddi4+0xa0>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e9      	b.n	8000330 <__udivmoddi4+0x60>
 800055c:	4618      	mov	r0, r3
 800055e:	e6fd      	b.n	800035c <__udivmoddi4+0x8c>
 8000560:	4543      	cmp	r3, r8
 8000562:	d2e5      	bcs.n	8000530 <__udivmoddi4+0x260>
 8000564:	ebb8 0e02 	subs.w	lr, r8, r2
 8000568:	eb69 0104 	sbc.w	r1, r9, r4
 800056c:	3801      	subs	r0, #1
 800056e:	e7df      	b.n	8000530 <__udivmoddi4+0x260>
 8000570:	4608      	mov	r0, r1
 8000572:	e7d2      	b.n	800051a <__udivmoddi4+0x24a>
 8000574:	4660      	mov	r0, ip
 8000576:	e78d      	b.n	8000494 <__udivmoddi4+0x1c4>
 8000578:	4681      	mov	r9, r0
 800057a:	e7b9      	b.n	80004f0 <__udivmoddi4+0x220>
 800057c:	4666      	mov	r6, ip
 800057e:	e775      	b.n	800046c <__udivmoddi4+0x19c>
 8000580:	4630      	mov	r0, r6
 8000582:	e74a      	b.n	800041a <__udivmoddi4+0x14a>
 8000584:	f1ac 0c02 	sub.w	ip, ip, #2
 8000588:	4439      	add	r1, r7
 800058a:	e713      	b.n	80003b4 <__udivmoddi4+0xe4>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	e724      	b.n	80003dc <__udivmoddi4+0x10c>
 8000592:	bf00      	nop

08000594 <__aeabi_idiv0>:
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop

08000598 <ssi_handler>:
char joned_str[500];
/* we will use character "x", "y","z" as tag for SSI */
char const *TAGCHAR[] = { "tab", "test" }; //
char const **TAGS = TAGCHAR;

uint16_t ssi_handler(int iIndex, char *pcInsert, int iInsertLen) {
 8000598:	b580      	push	{r7, lr}
 800059a:	b088      	sub	sp, #32
 800059c:	af02      	add	r7, sp, #8
 800059e:	60f8      	str	r0, [r7, #12]
 80005a0:	60b9      	str	r1, [r7, #8]
 80005a2:	607a      	str	r2, [r7, #4]
	switch (iIndex) {
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d006      	beq.n	80005b8 <ssi_handler+0x20>
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	2b01      	cmp	r3, #1
 80005ae:	f000 80ad 	beq.w	800070c <ssi_handler+0x174>
		indx1 += 1;
		sprintf(pcInsert, "%d", indx1);
		return strlen(pcInsert);
		break;
	default:
		break;
 80005b2:	bf00      	nop
	}

	return 0;
 80005b4:	2300      	movs	r3, #0
 80005b6:	e0ba      	b.n	800072e <ssi_handler+0x196>
		for (int h = 0; h <= 2; h++) { // 9 для 10 строк
 80005b8:	2300      	movs	r3, #0
 80005ba:	617b      	str	r3, [r7, #20]
 80005bc:	e09c      	b.n	80006f8 <ssi_handler+0x160>
					h,h,h, T[h].pulluptype);
 80005be:	697b      	ldr	r3, [r7, #20]
 80005c0:	2258      	movs	r2, #88	; 0x58
 80005c2:	fb02 f303 	mul.w	r3, r2, r3
 80005c6:	4a5c      	ldr	r2, [pc, #368]	; (8000738 <ssi_handler+0x1a0>)
 80005c8:	4413      	add	r3, r2
			sprintf(table1,
 80005ca:	9301      	str	r3, [sp, #4]
 80005cc:	697b      	ldr	r3, [r7, #20]
 80005ce:	9300      	str	r3, [sp, #0]
 80005d0:	697b      	ldr	r3, [r7, #20]
 80005d2:	697a      	ldr	r2, [r7, #20]
 80005d4:	4959      	ldr	r1, [pc, #356]	; (800073c <ssi_handler+0x1a4>)
 80005d6:	485a      	ldr	r0, [pc, #360]	; (8000740 <ssi_handler+0x1a8>)
 80005d8:	f011 f970 	bl	80118bc <siprintf>
			strcat(pcInsert, table1);
 80005dc:	4958      	ldr	r1, [pc, #352]	; (8000740 <ssi_handler+0x1a8>)
 80005de:	68b8      	ldr	r0, [r7, #8]
 80005e0:	f011 f98c 	bl	80118fc <strcat>
			sprintf(table1,
 80005e4:	4a54      	ldr	r2, [pc, #336]	; (8000738 <ssi_handler+0x1a0>)
 80005e6:	697b      	ldr	r3, [r7, #20]
 80005e8:	2158      	movs	r1, #88	; 0x58
 80005ea:	fb01 f303 	mul.w	r3, r1, r3
 80005ee:	4413      	add	r3, r2
 80005f0:	3328      	adds	r3, #40	; 0x28
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	697a      	ldr	r2, [r7, #20]
 80005f6:	4953      	ldr	r1, [pc, #332]	; (8000744 <ssi_handler+0x1ac>)
 80005f8:	4851      	ldr	r0, [pc, #324]	; (8000740 <ssi_handler+0x1a8>)
 80005fa:	f011 f95f 	bl	80118bc <siprintf>
			strcat(pcInsert, table1);
 80005fe:	4950      	ldr	r1, [pc, #320]	; (8000740 <ssi_handler+0x1a8>)
 8000600:	68b8      	ldr	r0, [r7, #8]
 8000602:	f011 f97b 	bl	80118fc <strcat>
			sprintf(table1,
 8000606:	4a4c      	ldr	r2, [pc, #304]	; (8000738 <ssi_handler+0x1a0>)
 8000608:	697b      	ldr	r3, [r7, #20]
 800060a:	2158      	movs	r1, #88	; 0x58
 800060c:	fb01 f303 	mul.w	r3, r1, r3
 8000610:	4413      	add	r3, r2
 8000612:	332c      	adds	r3, #44	; 0x2c
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	697a      	ldr	r2, [r7, #20]
 8000618:	494b      	ldr	r1, [pc, #300]	; (8000748 <ssi_handler+0x1b0>)
 800061a:	4849      	ldr	r0, [pc, #292]	; (8000740 <ssi_handler+0x1a8>)
 800061c:	f011 f94e 	bl	80118bc <siprintf>
			strcat(pcInsert, table1);
 8000620:	4947      	ldr	r1, [pc, #284]	; (8000740 <ssi_handler+0x1a8>)
 8000622:	68b8      	ldr	r0, [r7, #8]
 8000624:	f011 f96a 	bl	80118fc <strcat>
			sprintf(table1,
 8000628:	4a43      	ldr	r2, [pc, #268]	; (8000738 <ssi_handler+0x1a0>)
 800062a:	697b      	ldr	r3, [r7, #20]
 800062c:	2158      	movs	r1, #88	; 0x58
 800062e:	fb01 f303 	mul.w	r3, r1, r3
 8000632:	4413      	add	r3, r2
 8000634:	3330      	adds	r3, #48	; 0x30
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	697a      	ldr	r2, [r7, #20]
 800063a:	4944      	ldr	r1, [pc, #272]	; (800074c <ssi_handler+0x1b4>)
 800063c:	4840      	ldr	r0, [pc, #256]	; (8000740 <ssi_handler+0x1a8>)
 800063e:	f011 f93d 	bl	80118bc <siprintf>
			strcat(pcInsert, table1);
 8000642:	493f      	ldr	r1, [pc, #252]	; (8000740 <ssi_handler+0x1a8>)
 8000644:	68b8      	ldr	r0, [r7, #8]
 8000646:	f011 f959 	bl	80118fc <strcat>
			sprintf(table1,
 800064a:	4a3b      	ldr	r2, [pc, #236]	; (8000738 <ssi_handler+0x1a0>)
 800064c:	697b      	ldr	r3, [r7, #20]
 800064e:	2158      	movs	r1, #88	; 0x58
 8000650:	fb01 f303 	mul.w	r3, r1, r3
 8000654:	4413      	add	r3, r2
 8000656:	3334      	adds	r3, #52	; 0x34
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	697a      	ldr	r2, [r7, #20]
 800065c:	493c      	ldr	r1, [pc, #240]	; (8000750 <ssi_handler+0x1b8>)
 800065e:	4838      	ldr	r0, [pc, #224]	; (8000740 <ssi_handler+0x1a8>)
 8000660:	f011 f92c 	bl	80118bc <siprintf>
			strcat(pcInsert, table1);
 8000664:	4936      	ldr	r1, [pc, #216]	; (8000740 <ssi_handler+0x1a8>)
 8000666:	68b8      	ldr	r0, [r7, #8]
 8000668:	f011 f948 	bl	80118fc <strcat>
			sprintf(table1,
 800066c:	4a32      	ldr	r2, [pc, #200]	; (8000738 <ssi_handler+0x1a0>)
 800066e:	697b      	ldr	r3, [r7, #20]
 8000670:	2158      	movs	r1, #88	; 0x58
 8000672:	fb01 f303 	mul.w	r3, r1, r3
 8000676:	4413      	add	r3, r2
 8000678:	3338      	adds	r3, #56	; 0x38
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	697a      	ldr	r2, [r7, #20]
 800067e:	4935      	ldr	r1, [pc, #212]	; (8000754 <ssi_handler+0x1bc>)
 8000680:	482f      	ldr	r0, [pc, #188]	; (8000740 <ssi_handler+0x1a8>)
 8000682:	f011 f91b 	bl	80118bc <siprintf>
			strcat(pcInsert, table1);
 8000686:	492e      	ldr	r1, [pc, #184]	; (8000740 <ssi_handler+0x1a8>)
 8000688:	68b8      	ldr	r0, [r7, #8]
 800068a:	f011 f937 	bl	80118fc <strcat>
			sprintf(table1,
 800068e:	4a2a      	ldr	r2, [pc, #168]	; (8000738 <ssi_handler+0x1a0>)
 8000690:	697b      	ldr	r3, [r7, #20]
 8000692:	2158      	movs	r1, #88	; 0x58
 8000694:	fb01 f303 	mul.w	r3, r1, r3
 8000698:	4413      	add	r3, r2
 800069a:	333c      	adds	r3, #60	; 0x3c
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	697a      	ldr	r2, [r7, #20]
 80006a0:	492d      	ldr	r1, [pc, #180]	; (8000758 <ssi_handler+0x1c0>)
 80006a2:	4827      	ldr	r0, [pc, #156]	; (8000740 <ssi_handler+0x1a8>)
 80006a4:	f011 f90a 	bl	80118bc <siprintf>
			strcat(pcInsert, table1);
 80006a8:	4925      	ldr	r1, [pc, #148]	; (8000740 <ssi_handler+0x1a8>)
 80006aa:	68b8      	ldr	r0, [r7, #8]
 80006ac:	f011 f926 	bl	80118fc <strcat>
					h, T[h].infofield);
 80006b0:	697b      	ldr	r3, [r7, #20]
 80006b2:	2258      	movs	r2, #88	; 0x58
 80006b4:	fb02 f303 	mul.w	r3, r2, r3
 80006b8:	3340      	adds	r3, #64	; 0x40
 80006ba:	4a1f      	ldr	r2, [pc, #124]	; (8000738 <ssi_handler+0x1a0>)
 80006bc:	4413      	add	r3, r2
			sprintf(table1,
 80006be:	697a      	ldr	r2, [r7, #20]
 80006c0:	4926      	ldr	r1, [pc, #152]	; (800075c <ssi_handler+0x1c4>)
 80006c2:	481f      	ldr	r0, [pc, #124]	; (8000740 <ssi_handler+0x1a8>)
 80006c4:	f011 f8fa 	bl	80118bc <siprintf>
			strcat(pcInsert, table1);
 80006c8:	491d      	ldr	r1, [pc, #116]	; (8000740 <ssi_handler+0x1a8>)
 80006ca:	68b8      	ldr	r0, [r7, #8]
 80006cc:	f011 f916 	bl	80118fc <strcat>
			sprintf(table1,
 80006d0:	4a19      	ldr	r2, [pc, #100]	; (8000738 <ssi_handler+0x1a0>)
 80006d2:	697b      	ldr	r3, [r7, #20]
 80006d4:	2158      	movs	r1, #88	; 0x58
 80006d6:	fb01 f303 	mul.w	r3, r1, r3
 80006da:	4413      	add	r3, r2
 80006dc:	3354      	adds	r3, #84	; 0x54
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	697a      	ldr	r2, [r7, #20]
 80006e2:	491f      	ldr	r1, [pc, #124]	; (8000760 <ssi_handler+0x1c8>)
 80006e4:	4816      	ldr	r0, [pc, #88]	; (8000740 <ssi_handler+0x1a8>)
 80006e6:	f011 f8e9 	bl	80118bc <siprintf>
			strcat(pcInsert, table1);
 80006ea:	4915      	ldr	r1, [pc, #84]	; (8000740 <ssi_handler+0x1a8>)
 80006ec:	68b8      	ldr	r0, [r7, #8]
 80006ee:	f011 f905 	bl	80118fc <strcat>
		for (int h = 0; h <= 2; h++) { // 9 для 10 строк
 80006f2:	697b      	ldr	r3, [r7, #20]
 80006f4:	3301      	adds	r3, #1
 80006f6:	617b      	str	r3, [r7, #20]
 80006f8:	697b      	ldr	r3, [r7, #20]
 80006fa:	2b02      	cmp	r3, #2
 80006fc:	f77f af5f 	ble.w	80005be <ssi_handler+0x26>
		return strlen(pcInsert);
 8000700:	68b8      	ldr	r0, [r7, #8]
 8000702:	f7ff fd6f 	bl	80001e4 <strlen>
 8000706:	4603      	mov	r3, r0
 8000708:	b29b      	uxth	r3, r3
 800070a:	e010      	b.n	800072e <ssi_handler+0x196>
		indx1 += 1;
 800070c:	4b15      	ldr	r3, [pc, #84]	; (8000764 <ssi_handler+0x1cc>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	3301      	adds	r3, #1
 8000712:	4a14      	ldr	r2, [pc, #80]	; (8000764 <ssi_handler+0x1cc>)
 8000714:	6013      	str	r3, [r2, #0]
		sprintf(pcInsert, "%d", indx1);
 8000716:	4b13      	ldr	r3, [pc, #76]	; (8000764 <ssi_handler+0x1cc>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	461a      	mov	r2, r3
 800071c:	4912      	ldr	r1, [pc, #72]	; (8000768 <ssi_handler+0x1d0>)
 800071e:	68b8      	ldr	r0, [r7, #8]
 8000720:	f011 f8cc 	bl	80118bc <siprintf>
		return strlen(pcInsert);
 8000724:	68b8      	ldr	r0, [r7, #8]
 8000726:	f7ff fd5d 	bl	80001e4 <strlen>
 800072a:	4603      	mov	r3, r0
 800072c:	b29b      	uxth	r3, r3
}
 800072e:	4618      	mov	r0, r3
 8000730:	3718      	adds	r7, #24
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	2000095c 	.word	0x2000095c
 800073c:	08012cdc 	.word	0x08012cdc
 8000740:	20000bb0 	.word	0x20000bb0
 8000744:	08012d44 	.word	0x08012d44
 8000748:	08012d94 	.word	0x08012d94
 800074c:	08012de4 	.word	0x08012de4
 8000750:	08012e2c 	.word	0x08012e2c
 8000754:	08012e7c 	.word	0x08012e7c
 8000758:	08012ed0 	.word	0x08012ed0
 800075c:	08012f20 	.word	0x08012f20
 8000760:	08012f68 	.word	0x08012f68
 8000764:	200000b0 	.word	0x200000b0
 8000768:	08012fb4 	.word	0x08012fb4

0800076c <CGIForm_Handler>:
		char *pcValue[]);
const tCGI FORM_CGI = { "/form.cgi", CGIForm_Handler }; // Создаем структуру CGI
char name[300]; // Если цикл перебора найдет "fname" сохранит в переменную 'name[30]' а если найдет "lname" он сканкатенирует сюда данные "lname".

const char* CGIForm_Handler(int iIndex, int iNumParams, char *pcParam[],
		char *pcValue[]) {
 800076c:	b580      	push	{r7, lr}
 800076e:	b086      	sub	sp, #24
 8000770:	af00      	add	r7, sp, #0
 8000772:	60f8      	str	r0, [r7, #12]
 8000774:	60b9      	str	r1, [r7, #8]
 8000776:	607a      	str	r2, [r7, #4]
 8000778:	603b      	str	r3, [r7, #0]
	printf("OK GET \r\n");
 800077a:	487b      	ldr	r0, [pc, #492]	; (8000968 <CGIForm_Handler+0x1fc>)
 800077c:	f011 f846 	bl	801180c <puts>
	if (iIndex == 0) {
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	2b00      	cmp	r3, #0
 8000784:	f040 80ea 	bne.w	800095c <CGIForm_Handler+0x1f0>
		for (int i = 0; i < iNumParams; i++) // Цикл перебора параметров ("fname" и "lname") из html странички
 8000788:	2300      	movs	r3, #0
 800078a:	617b      	str	r3, [r7, #20]
 800078c:	e0e1      	b.n	8000952 <CGIForm_Handler+0x1e6>
				{
			if (strcmp(pcParam[i], "Bounce_interval") == 0) // if the fname string is found
 800078e:	697b      	ldr	r3, [r7, #20]
 8000790:	009b      	lsls	r3, r3, #2
 8000792:	687a      	ldr	r2, [r7, #4]
 8000794:	4413      	add	r3, r2
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	4974      	ldr	r1, [pc, #464]	; (800096c <CGIForm_Handler+0x200>)
 800079a:	4618      	mov	r0, r3
 800079c:	f7ff fd18 	bl	80001d0 <strcmp>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d113      	bne.n	80007ce <CGIForm_Handler+0x62>
					{
				memset(name, '\0', 300); // Очищаем массив перед записью новых данных.
 80007a6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80007aa:	2100      	movs	r1, #0
 80007ac:	4870      	ldr	r0, [pc, #448]	; (8000970 <CGIForm_Handler+0x204>)
 80007ae:	f010 fef5 	bl	801159c <memset>
				strcpy(name, pcValue[i]); // Сохраняем значение в переменную.
 80007b2:	697b      	ldr	r3, [r7, #20]
 80007b4:	009b      	lsls	r3, r3, #2
 80007b6:	683a      	ldr	r2, [r7, #0]
 80007b8:	4413      	add	r3, r2
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	4619      	mov	r1, r3
 80007be:	486c      	ldr	r0, [pc, #432]	; (8000970 <CGIForm_Handler+0x204>)
 80007c0:	f011 f8b8 	bl	8011934 <strcpy>
				printf("Bounce_interval: %s\r\n", name);
 80007c4:	496a      	ldr	r1, [pc, #424]	; (8000970 <CGIForm_Handler+0x204>)
 80007c6:	486b      	ldr	r0, [pc, #428]	; (8000974 <CGIForm_Handler+0x208>)
 80007c8:	f010 ff9a 	bl	8011700 <iprintf>
 80007cc:	e0be      	b.n	800094c <CGIForm_Handler+0x1e0>
			} else if (strcmp(pcParam[i], "Hold_interval") == 0) // if the lname string is found
 80007ce:	697b      	ldr	r3, [r7, #20]
 80007d0:	009b      	lsls	r3, r3, #2
 80007d2:	687a      	ldr	r2, [r7, #4]
 80007d4:	4413      	add	r3, r2
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4967      	ldr	r1, [pc, #412]	; (8000978 <CGIForm_Handler+0x20c>)
 80007da:	4618      	mov	r0, r3
 80007dc:	f7ff fcf8 	bl	80001d0 <strcmp>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d113      	bne.n	800080e <CGIForm_Handler+0xa2>
					{
				memset(name, '\0', 300); // Очищаем массив перед записью новых данных.
 80007e6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80007ea:	2100      	movs	r1, #0
 80007ec:	4860      	ldr	r0, [pc, #384]	; (8000970 <CGIForm_Handler+0x204>)
 80007ee:	f010 fed5 	bl	801159c <memset>
				//strcat(name, " "); // Сконкатенируем fname с lname разделяя пробелом.
				strcat(name, pcValue[i]); // Сохраняем значение в переменную.
 80007f2:	697b      	ldr	r3, [r7, #20]
 80007f4:	009b      	lsls	r3, r3, #2
 80007f6:	683a      	ldr	r2, [r7, #0]
 80007f8:	4413      	add	r3, r2
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4619      	mov	r1, r3
 80007fe:	485c      	ldr	r0, [pc, #368]	; (8000970 <CGIForm_Handler+0x204>)
 8000800:	f011 f87c 	bl	80118fc <strcat>
				printf("Hold_interval: %s\r\n", name);
 8000804:	495a      	ldr	r1, [pc, #360]	; (8000970 <CGIForm_Handler+0x204>)
 8000806:	485d      	ldr	r0, [pc, #372]	; (800097c <CGIForm_Handler+0x210>)
 8000808:	f010 ff7a 	bl	8011700 <iprintf>
 800080c:	e09e      	b.n	800094c <CGIForm_Handler+0x1e0>
			} else if (strcmp(pcParam[i], "Repeat") == 0) // if the lname string is found
 800080e:	697b      	ldr	r3, [r7, #20]
 8000810:	009b      	lsls	r3, r3, #2
 8000812:	687a      	ldr	r2, [r7, #4]
 8000814:	4413      	add	r3, r2
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	4959      	ldr	r1, [pc, #356]	; (8000980 <CGIForm_Handler+0x214>)
 800081a:	4618      	mov	r0, r3
 800081c:	f7ff fcd8 	bl	80001d0 <strcmp>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d113      	bne.n	800084e <CGIForm_Handler+0xe2>
					{
				memset(name, '\0', 300); // Очищаем массив перед записью новых данных.
 8000826:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800082a:	2100      	movs	r1, #0
 800082c:	4850      	ldr	r0, [pc, #320]	; (8000970 <CGIForm_Handler+0x204>)
 800082e:	f010 feb5 	bl	801159c <memset>
				//strcat(name, " "); // Сконкатенируем fname с lname разделяя пробелом.
				strcat(name, pcValue[i]); // Сохраняем значение в переменную.
 8000832:	697b      	ldr	r3, [r7, #20]
 8000834:	009b      	lsls	r3, r3, #2
 8000836:	683a      	ldr	r2, [r7, #0]
 8000838:	4413      	add	r3, r2
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	4619      	mov	r1, r3
 800083e:	484c      	ldr	r0, [pc, #304]	; (8000970 <CGIForm_Handler+0x204>)
 8000840:	f011 f85c 	bl	80118fc <strcat>
				printf("Repeat: %s\r\n", name);
 8000844:	494a      	ldr	r1, [pc, #296]	; (8000970 <CGIForm_Handler+0x204>)
 8000846:	484f      	ldr	r0, [pc, #316]	; (8000984 <CGIForm_Handler+0x218>)
 8000848:	f010 ff5a 	bl	8011700 <iprintf>
 800084c:	e07e      	b.n	800094c <CGIForm_Handler+0x1e0>
			} else if (strcmp(pcParam[i], "Repeat_interval") == 0) // if the lname string is found
 800084e:	697b      	ldr	r3, [r7, #20]
 8000850:	009b      	lsls	r3, r3, #2
 8000852:	687a      	ldr	r2, [r7, #4]
 8000854:	4413      	add	r3, r2
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	494b      	ldr	r1, [pc, #300]	; (8000988 <CGIForm_Handler+0x21c>)
 800085a:	4618      	mov	r0, r3
 800085c:	f7ff fcb8 	bl	80001d0 <strcmp>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d113      	bne.n	800088e <CGIForm_Handler+0x122>
					{
				memset(name, '\0', 300); // Очищаем массив перед записью новых данных.
 8000866:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800086a:	2100      	movs	r1, #0
 800086c:	4840      	ldr	r0, [pc, #256]	; (8000970 <CGIForm_Handler+0x204>)
 800086e:	f010 fe95 	bl	801159c <memset>
				//strcat(name, " "); // Сконкатенируем fname с lname разделяя пробелом.
				strcat(name, pcValue[i]); // Сохраняем значение в переменную.
 8000872:	697b      	ldr	r3, [r7, #20]
 8000874:	009b      	lsls	r3, r3, #2
 8000876:	683a      	ldr	r2, [r7, #0]
 8000878:	4413      	add	r3, r2
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4619      	mov	r1, r3
 800087e:	483c      	ldr	r0, [pc, #240]	; (8000970 <CGIForm_Handler+0x204>)
 8000880:	f011 f83c 	bl	80118fc <strcat>
				printf("Repeat_interval: %s\r\n", name);
 8000884:	493a      	ldr	r1, [pc, #232]	; (8000970 <CGIForm_Handler+0x204>)
 8000886:	4841      	ldr	r0, [pc, #260]	; (800098c <CGIForm_Handler+0x220>)
 8000888:	f010 ff3a 	bl	8011700 <iprintf>
 800088c:	e05e      	b.n	800094c <CGIForm_Handler+0x1e0>
			} else if (strcmp(pcParam[i], "Double_click_interval") == 0) // if the lname string is found
 800088e:	697b      	ldr	r3, [r7, #20]
 8000890:	009b      	lsls	r3, r3, #2
 8000892:	687a      	ldr	r2, [r7, #4]
 8000894:	4413      	add	r3, r2
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	493d      	ldr	r1, [pc, #244]	; (8000990 <CGIForm_Handler+0x224>)
 800089a:	4618      	mov	r0, r3
 800089c:	f7ff fc98 	bl	80001d0 <strcmp>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d113      	bne.n	80008ce <CGIForm_Handler+0x162>
					{
				memset(name, '\0', 300); // Очищаем массив перед записью новых данных.
 80008a6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80008aa:	2100      	movs	r1, #0
 80008ac:	4830      	ldr	r0, [pc, #192]	; (8000970 <CGIForm_Handler+0x204>)
 80008ae:	f010 fe75 	bl	801159c <memset>
				//strcat(name, " "); // Сконкатенируем fname с lname разделяя пробелом.
				strcat(name, pcValue[i]); // Сохраняем значение в переменную.
 80008b2:	697b      	ldr	r3, [r7, #20]
 80008b4:	009b      	lsls	r3, r3, #2
 80008b6:	683a      	ldr	r2, [r7, #0]
 80008b8:	4413      	add	r3, r2
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4619      	mov	r1, r3
 80008be:	482c      	ldr	r0, [pc, #176]	; (8000970 <CGIForm_Handler+0x204>)
 80008c0:	f011 f81c 	bl	80118fc <strcat>
				printf("Double_click_interval: %s\r\n", name);
 80008c4:	492a      	ldr	r1, [pc, #168]	; (8000970 <CGIForm_Handler+0x204>)
 80008c6:	4833      	ldr	r0, [pc, #204]	; (8000994 <CGIForm_Handler+0x228>)
 80008c8:	f010 ff1a 	bl	8011700 <iprintf>
 80008cc:	e03e      	b.n	800094c <CGIForm_Handler+0x1e0>
			} else if (strcmp(pcParam[i], "Prevent_Click") == 0) // if the lname string is found
 80008ce:	697b      	ldr	r3, [r7, #20]
 80008d0:	009b      	lsls	r3, r3, #2
 80008d2:	687a      	ldr	r2, [r7, #4]
 80008d4:	4413      	add	r3, r2
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	492f      	ldr	r1, [pc, #188]	; (8000998 <CGIForm_Handler+0x22c>)
 80008da:	4618      	mov	r0, r3
 80008dc:	f7ff fc78 	bl	80001d0 <strcmp>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d113      	bne.n	800090e <CGIForm_Handler+0x1a2>
					{
				memset(name, '\0', 300); // Очищаем массив перед записью новых данных.
 80008e6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80008ea:	2100      	movs	r1, #0
 80008ec:	4820      	ldr	r0, [pc, #128]	; (8000970 <CGIForm_Handler+0x204>)
 80008ee:	f010 fe55 	bl	801159c <memset>
				//strcat(name, " "); // Сконкатенируем fname с lname разделяя пробелом.
				strcat(name, pcValue[i]); // Сохраняем значение в переменную.
 80008f2:	697b      	ldr	r3, [r7, #20]
 80008f4:	009b      	lsls	r3, r3, #2
 80008f6:	683a      	ldr	r2, [r7, #0]
 80008f8:	4413      	add	r3, r2
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4619      	mov	r1, r3
 80008fe:	481c      	ldr	r0, [pc, #112]	; (8000970 <CGIForm_Handler+0x204>)
 8000900:	f010 fffc 	bl	80118fc <strcat>
				printf("Prevent_Click: %s\r\n", name);
 8000904:	491a      	ldr	r1, [pc, #104]	; (8000970 <CGIForm_Handler+0x204>)
 8000906:	4825      	ldr	r0, [pc, #148]	; (800099c <CGIForm_Handler+0x230>)
 8000908:	f010 fefa 	bl	8011700 <iprintf>
 800090c:	e01e      	b.n	800094c <CGIForm_Handler+0x1e0>
			} else if (strcmp(pcParam[i], "OnOff") == 0) // if the lname string is found
 800090e:	697b      	ldr	r3, [r7, #20]
 8000910:	009b      	lsls	r3, r3, #2
 8000912:	687a      	ldr	r2, [r7, #4]
 8000914:	4413      	add	r3, r2
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4921      	ldr	r1, [pc, #132]	; (80009a0 <CGIForm_Handler+0x234>)
 800091a:	4618      	mov	r0, r3
 800091c:	f7ff fc58 	bl	80001d0 <strcmp>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d112      	bne.n	800094c <CGIForm_Handler+0x1e0>
					{
				memset(name, '\0', 300); // Очищаем массив перед записью новых данных.
 8000926:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800092a:	2100      	movs	r1, #0
 800092c:	4810      	ldr	r0, [pc, #64]	; (8000970 <CGIForm_Handler+0x204>)
 800092e:	f010 fe35 	bl	801159c <memset>
				//strcat(name, " "); // Сконкатенируем fname с lname разделяя пробелом.
				strcat(name, pcValue[i]); // Сохраняем значение в переменную.
 8000932:	697b      	ldr	r3, [r7, #20]
 8000934:	009b      	lsls	r3, r3, #2
 8000936:	683a      	ldr	r2, [r7, #0]
 8000938:	4413      	add	r3, r2
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4619      	mov	r1, r3
 800093e:	480c      	ldr	r0, [pc, #48]	; (8000970 <CGIForm_Handler+0x204>)
 8000940:	f010 ffdc 	bl	80118fc <strcat>
				printf("OnOff: %s\r\n", name);
 8000944:	490a      	ldr	r1, [pc, #40]	; (8000970 <CGIForm_Handler+0x204>)
 8000946:	4817      	ldr	r0, [pc, #92]	; (80009a4 <CGIForm_Handler+0x238>)
 8000948:	f010 feda 	bl	8011700 <iprintf>
		for (int i = 0; i < iNumParams; i++) // Цикл перебора параметров ("fname" и "lname") из html странички
 800094c:	697b      	ldr	r3, [r7, #20]
 800094e:	3301      	adds	r3, #1
 8000950:	617b      	str	r3, [r7, #20]
 8000952:	697a      	ldr	r2, [r7, #20]
 8000954:	68bb      	ldr	r3, [r7, #8]
 8000956:	429a      	cmp	r2, r3
 8000958:	f6ff af19 	blt.w	800078e <CGIForm_Handler+0x22>
			}
		}
	}
	return "/cgiform.shtml"; // По окончании работы 'CGIForm_Handler' возвращаем указатель в нужный файл.
 800095c:	4b12      	ldr	r3, [pc, #72]	; (80009a8 <CGIForm_Handler+0x23c>)
}
 800095e:	4618      	mov	r0, r3
 8000960:	3718      	adds	r7, #24
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	08012fc4 	.word	0x08012fc4
 800096c:	08012fd0 	.word	0x08012fd0
 8000970:	20000ed8 	.word	0x20000ed8
 8000974:	08012fe0 	.word	0x08012fe0
 8000978:	08012ff8 	.word	0x08012ff8
 800097c:	08013008 	.word	0x08013008
 8000980:	0801301c 	.word	0x0801301c
 8000984:	08013024 	.word	0x08013024
 8000988:	08013034 	.word	0x08013034
 800098c:	08013044 	.word	0x08013044
 8000990:	0801305c 	.word	0x0801305c
 8000994:	08013074 	.word	0x08013074
 8000998:	08013090 	.word	0x08013090
 800099c:	080130a0 	.word	0x080130a0
 80009a0:	080130b4 	.word	0x080130b4
 80009a4:	080130bc 	.word	0x080130bc
 80009a8:	080130c8 	.word	0x080130c8

080009ac <find_header_name>:
//////////////////// POST START ////////////////////////
char *content_type;

/* Find Header Key Name in the header. */
const char*
find_header_name(char *header) {
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b084      	sub	sp, #16
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]

#define HEADER_NAME_TITLE               "name="
#define HEADER_NAME_TITLE_LEN           5

	if (header != NULL) {
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d010      	beq.n	80009dc <find_header_name+0x30>
		char *header_name_begin = strstr(header, HEADER_NAME_TITLE); // Find name= in Header
 80009ba:	490b      	ldr	r1, [pc, #44]	; (80009e8 <find_header_name+0x3c>)
 80009bc:	6878      	ldr	r0, [r7, #4]
 80009be:	f010 ffe6 	bl	801198e <strstr>
 80009c2:	60f8      	str	r0, [r7, #12]
		char *header_name = strtok(header_name_begin, "\""); // Find the first "
 80009c4:	4909      	ldr	r1, [pc, #36]	; (80009ec <find_header_name+0x40>)
 80009c6:	68f8      	ldr	r0, [r7, #12]
 80009c8:	f010 fff8 	bl	80119bc <strtok>
 80009cc:	60b8      	str	r0, [r7, #8]
		header_name = strtok(NULL, "\"");					// Go to the last "
 80009ce:	4907      	ldr	r1, [pc, #28]	; (80009ec <find_header_name+0x40>)
 80009d0:	2000      	movs	r0, #0
 80009d2:	f010 fff3 	bl	80119bc <strtok>
 80009d6:	60b8      	str	r0, [r7, #8]
#ifdef  HTTPD_DEBUG
		//printf("POST multipart Header Key found: %s\n", header_name);
#endif

		return header_name;
 80009d8:	68bb      	ldr	r3, [r7, #8]
 80009da:	e000      	b.n	80009de <find_header_name+0x32>
	}
	return NULL;
 80009dc:	2300      	movs	r3, #0
}
 80009de:	4618      	mov	r0, r3
 80009e0:	3710      	adds	r7, #16
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	080130d8 	.word	0x080130d8
 80009ec:	080130e0 	.word	0x080130e0

080009f0 <find_boundary>:

/* Find boundary value in the Content-Type. */
const char*
find_boundary( content_type) {
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b084      	sub	sp, #16
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]

#define BOUNDARY_TITLE               "boundary="
#define BOUNDARY_TITLE_LEN           9

	if (content_type != NULL) {
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d00a      	beq.n	8000a14 <find_boundary+0x24>
		char *boundary_begin = strstr(content_type, BOUNDARY_TITLE);// Find Boundary= in Content-Type
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	4907      	ldr	r1, [pc, #28]	; (8000a20 <find_boundary+0x30>)
 8000a02:	4618      	mov	r0, r3
 8000a04:	f010 ffc3 	bl	801198e <strstr>
 8000a08:	60f8      	str	r0, [r7, #12]
		char *boundary = boundary_begin + BOUNDARY_TITLE_LEN;// Remove the Boundary=
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	3309      	adds	r3, #9
 8000a0e:	60bb      	str	r3, [r7, #8]
#ifdef  HTTPD_DEBUG
		//printf("POST multipart Boundary found: %s\n", boundary);
#endif

		return boundary;
 8000a10:	68bb      	ldr	r3, [r7, #8]
 8000a12:	e000      	b.n	8000a16 <find_boundary+0x26>
	}
	return NULL;
 8000a14:	2300      	movs	r3, #0
}
 8000a16:	4618      	mov	r0, r3
 8000a18:	3710      	adds	r7, #16
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	080130e4 	.word	0x080130e4

08000a24 <read_header_name>:
 */
multipart_parser_settings callbacks;
multipart_parser *_parser;

/* Header which contains the Key with the name */
int read_header_name(multipart_parser *p, const char *at, size_t length) {
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b086      	sub	sp, #24
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	60f8      	str	r0, [r7, #12]
 8000a2c:	60b9      	str	r1, [r7, #8]
 8000a2e:	607a      	str	r2, [r7, #4]
	//printf("read_header_name: %.*s: \n", length, at);
#endif

	/* Parse the Header Value */
	/* Content-Disposition: read_header_value: form-data; name="variable_name" */
	char *key_name = find_header_name(at);
 8000a30:	68b8      	ldr	r0, [r7, #8]
 8000a32:	f7ff ffbb 	bl	80009ac <find_header_name>
 8000a36:	6178      	str	r0, [r7, #20]

#ifdef  HTTPD_DEBUG
	//printf("Key Name: %s\n", key_name);
#endif

	return 0;
 8000a38:	2300      	movs	r3, #0
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	3718      	adds	r7, #24
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}

08000a42 <read_header_value>:

int read_header_value(multipart_parser *p, const char *at, size_t length) {
 8000a42:	b480      	push	{r7}
 8000a44:	b085      	sub	sp, #20
 8000a46:	af00      	add	r7, sp, #0
 8000a48:	60f8      	str	r0, [r7, #12]
 8000a4a:	60b9      	str	r1, [r7, #8]
 8000a4c:	607a      	str	r2, [r7, #4]
#ifdef  HTTPD_DEBUG
	//printf("read_header_value: %.*s\n", length, at);
#endif
	return 0;
 8000a4e:	2300      	movs	r3, #0
}
 8000a50:	4618      	mov	r0, r3
 8000a52:	3714      	adds	r7, #20
 8000a54:	46bd      	mov	sp, r7
 8000a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5a:	4770      	bx	lr

08000a5c <read_part_data>:

/* Value for the latest key */
/* If this is a file, this may be called multiple times. */
/* Wait until part_end for the complete file. */
int read_part_data(multipart_parser *p, const char *at, size_t length) {
 8000a5c:	b480      	push	{r7}
 8000a5e:	b085      	sub	sp, #20
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	60f8      	str	r0, [r7, #12]
 8000a64:	60b9      	str	r1, [r7, #8]
 8000a66:	607a      	str	r2, [r7, #4]
#ifdef  HTTPD_DEBUG
	//printf("read_part_data: %.*s\n", length, at);
#endif
	return 0;
 8000a68:	2300      	movs	r3, #0
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	3714      	adds	r7, #20
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr

08000a76 <read_on_part_data_begin>:

/* Beginning of a key and value */
int read_on_part_data_begin(multipart_parser *p, const char *at, size_t length) {
 8000a76:	b480      	push	{r7}
 8000a78:	b085      	sub	sp, #20
 8000a7a:	af00      	add	r7, sp, #0
 8000a7c:	60f8      	str	r0, [r7, #12]
 8000a7e:	60b9      	str	r1, [r7, #8]
 8000a80:	607a      	str	r2, [r7, #4]
	//printf("Total length is - %d\n", http_post_content_len);
#ifdef  HTTPD_DEBUG
	//printf("read_on_part_data_begin: %.*s\n", length, at);
#endif
	return 0;
 8000a82:	2300      	movs	r3, #0
}
 8000a84:	4618      	mov	r0, r3
 8000a86:	3714      	adds	r7, #20
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8e:	4770      	bx	lr

08000a90 <read_on_headers_complete>:

/* End of header which contains the key */
int read_on_headers_complete(multipart_parser *p, const char *at, size_t length) {
 8000a90:	b480      	push	{r7}
 8000a92:	b085      	sub	sp, #20
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	60f8      	str	r0, [r7, #12]
 8000a98:	60b9      	str	r1, [r7, #8]
 8000a9a:	607a      	str	r2, [r7, #4]
#ifdef  HTTPD_DEBUG
	//printf("read_on_headers_complete: %.*s\n", length, at);
#endif
	return 0;
 8000a9c:	2300      	movs	r3, #0
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	3714      	adds	r7, #20
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr

08000aaa <read_on_part_data_end>:

/** End of the key and value */
/* If this is a file, the file is complete. */
/* If this is a value, then the value is complete. */
int read_on_part_data_end(multipart_parser *p, const char *at, size_t length) {
 8000aaa:	b480      	push	{r7}
 8000aac:	b085      	sub	sp, #20
 8000aae:	af00      	add	r7, sp, #0
 8000ab0:	60f8      	str	r0, [r7, #12]
 8000ab2:	60b9      	str	r1, [r7, #8]
 8000ab4:	607a      	str	r2, [r7, #4]
#ifdef  HTTPD_DEBUG
	//printf("read_on_part_data_end: %.*s\n", length, at);
#endif
	return 0;
 8000ab6:	2300      	movs	r3, #0
}
 8000ab8:	4618      	mov	r0, r3
 8000aba:	3714      	adds	r7, #20
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr

08000ac4 <read_on_body_end>:

/* End of the entire form */
int read_on_body_end(multipart_parser *p, const char *at, size_t length) {
 8000ac4:	b480      	push	{r7}
 8000ac6:	b085      	sub	sp, #20
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	60f8      	str	r0, [r7, #12]
 8000acc:	60b9      	str	r1, [r7, #8]
 8000ace:	607a      	str	r2, [r7, #4]
#ifdef  HTTPD_DEBUG
	//printf("read_on_body_end: %.*s\n", length, at);
#endif
	return 0;
 8000ad0:	2300      	movs	r3, #0
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	3714      	adds	r7, #20
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr
	...

08000ae0 <http_parse_post>:

static err_t http_parse_post(char *data, uint32_t length) {
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
 8000ae8:	6039      	str	r1, [r7, #0]
#ifdef  HTTPD_DEBUG
	//printf("http_parse_post POST data: %s\n", data);
#endif

	/* Parse the data */
	multipart_parser_execute(_parser, data, length);
 8000aea:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <http_parse_post+0x24>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	683a      	ldr	r2, [r7, #0]
 8000af0:	6879      	ldr	r1, [r7, #4]
 8000af2:	4618      	mov	r0, r3
 8000af4:	f000 fc12 	bl	800131c <multipart_parser_execute>

	return ERR_OK;
 8000af8:	2300      	movs	r3, #0
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	3708      	adds	r7, #8
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	20000ed0 	.word	0x20000ed0

08000b08 <httpd_post_begin>:
 * @return ERR_OK: Accept the POST request, data may be passed in
 *         another err_t: Deny the POST request, send back 'bad request'.
 */
err_t httpd_post_begin(void *connection, const char *uri,
		const char *http_request, uint16_t http_request_len, int content_len,
		char *response_uri, uint16_t response_uri_len, uint8_t *post_auto_wnd) {
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b086      	sub	sp, #24
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	60f8      	str	r0, [r7, #12]
 8000b10:	60b9      	str	r1, [r7, #8]
 8000b12:	607a      	str	r2, [r7, #4]
 8000b14:	807b      	strh	r3, [r7, #2]

	// Check the URI given with the list
	for (uint8_t i = 0; i < HTTP_POST_URI_NUM; i++) {
 8000b16:	2300      	movs	r3, #0
 8000b18:	75fb      	strb	r3, [r7, #23]
 8000b1a:	e03f      	b.n	8000b9c <httpd_post_begin+0x94>
		if (strcmp(uri, a[i]) == 0) {
 8000b1c:	7dfb      	ldrb	r3, [r7, #23]
 8000b1e:	4a24      	ldr	r2, [pc, #144]	; (8000bb0 <httpd_post_begin+0xa8>)
 8000b20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b24:	4619      	mov	r1, r3
 8000b26:	68b8      	ldr	r0, [r7, #8]
 8000b28:	f7ff fb52 	bl	80001d0 <strcmp>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d131      	bne.n	8000b96 <httpd_post_begin+0x8e>

			http_post_uri_file_index = i;
 8000b32:	4a20      	ldr	r2, [pc, #128]	; (8000bb4 <httpd_post_begin+0xac>)
 8000b34:	7dfb      	ldrb	r3, [r7, #23]
 8000b36:	7013      	strb	r3, [r2, #0]
			http_post_content_len = content_len;
 8000b38:	6a3b      	ldr	r3, [r7, #32]
 8000b3a:	4a1f      	ldr	r2, [pc, #124]	; (8000bb8 <httpd_post_begin+0xb0>)
 8000b3c:	6013      	str	r3, [r2, #0]

#ifdef  HTTPD_DEBUG
			//printf("httpd_post_begin: Post Content: %s\n",  http_request);
#endif

			memset(&callbacks, 0, sizeof(multipart_parser_settings));
 8000b3e:	221c      	movs	r2, #28
 8000b40:	2100      	movs	r1, #0
 8000b42:	481e      	ldr	r0, [pc, #120]	; (8000bbc <httpd_post_begin+0xb4>)
 8000b44:	f010 fd2a 	bl	801159c <memset>

			callbacks.on_header_field = read_header_name;
 8000b48:	4b1c      	ldr	r3, [pc, #112]	; (8000bbc <httpd_post_begin+0xb4>)
 8000b4a:	4a1d      	ldr	r2, [pc, #116]	; (8000bc0 <httpd_post_begin+0xb8>)
 8000b4c:	601a      	str	r2, [r3, #0]
			callbacks.on_header_value = read_header_value;
 8000b4e:	4b1b      	ldr	r3, [pc, #108]	; (8000bbc <httpd_post_begin+0xb4>)
 8000b50:	4a1c      	ldr	r2, [pc, #112]	; (8000bc4 <httpd_post_begin+0xbc>)
 8000b52:	605a      	str	r2, [r3, #4]
			callbacks.on_part_data = read_part_data;
 8000b54:	4b19      	ldr	r3, [pc, #100]	; (8000bbc <httpd_post_begin+0xb4>)
 8000b56:	4a1c      	ldr	r2, [pc, #112]	; (8000bc8 <httpd_post_begin+0xc0>)
 8000b58:	609a      	str	r2, [r3, #8]
			callbacks.on_part_data_begin = read_on_part_data_begin;
 8000b5a:	4b18      	ldr	r3, [pc, #96]	; (8000bbc <httpd_post_begin+0xb4>)
 8000b5c:	4a1b      	ldr	r2, [pc, #108]	; (8000bcc <httpd_post_begin+0xc4>)
 8000b5e:	60da      	str	r2, [r3, #12]
			callbacks.on_headers_complete = read_on_headers_complete;
 8000b60:	4b16      	ldr	r3, [pc, #88]	; (8000bbc <httpd_post_begin+0xb4>)
 8000b62:	4a1b      	ldr	r2, [pc, #108]	; (8000bd0 <httpd_post_begin+0xc8>)
 8000b64:	611a      	str	r2, [r3, #16]
			callbacks.on_part_data_end = read_on_part_data_end;
 8000b66:	4b15      	ldr	r3, [pc, #84]	; (8000bbc <httpd_post_begin+0xb4>)
 8000b68:	4a1a      	ldr	r2, [pc, #104]	; (8000bd4 <httpd_post_begin+0xcc>)
 8000b6a:	615a      	str	r2, [r3, #20]
			callbacks.on_body_end = read_on_body_end;
 8000b6c:	4b13      	ldr	r3, [pc, #76]	; (8000bbc <httpd_post_begin+0xb4>)
 8000b6e:	4a1a      	ldr	r2, [pc, #104]	; (8000bd8 <httpd_post_begin+0xd0>)
 8000b70:	619a      	str	r2, [r3, #24]

			/*
			 * Get the boundary from the content-type
			 * Then pass it to the parser
			 */
			const char *boundary = find_boundary(content_type);
 8000b72:	4b1a      	ldr	r3, [pc, #104]	; (8000bdc <httpd_post_begin+0xd4>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	4618      	mov	r0, r3
 8000b78:	f7ff ff3a 	bl	80009f0 <find_boundary>
 8000b7c:	6138      	str	r0, [r7, #16]
			if (boundary != NULL) {
 8000b7e:	693b      	ldr	r3, [r7, #16]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d006      	beq.n	8000b92 <httpd_post_begin+0x8a>
				_parser = multipart_parser_init(boundary, &callbacks);
 8000b84:	490d      	ldr	r1, [pc, #52]	; (8000bbc <httpd_post_begin+0xb4>)
 8000b86:	6938      	ldr	r0, [r7, #16]
 8000b88:	f000 fb86 	bl	8001298 <multipart_parser_init>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	4a14      	ldr	r2, [pc, #80]	; (8000be0 <httpd_post_begin+0xd8>)
 8000b90:	6013      	str	r3, [r2, #0]
			}

			return ERR_OK;
 8000b92:	2300      	movs	r3, #0
 8000b94:	e007      	b.n	8000ba6 <httpd_post_begin+0x9e>
	for (uint8_t i = 0; i < HTTP_POST_URI_NUM; i++) {
 8000b96:	7dfb      	ldrb	r3, [r7, #23]
 8000b98:	3301      	adds	r3, #1
 8000b9a:	75fb      	strb	r3, [r7, #23]
 8000b9c:	7dfb      	ldrb	r3, [r7, #23]
 8000b9e:	2b01      	cmp	r3, #1
 8000ba0:	d9bc      	bls.n	8000b1c <httpd_post_begin+0x14>
		}
	}

	//returns /404.html when response_uri is empty
	return ERR_VAL;
 8000ba2:	f06f 0305 	mvn.w	r3, #5
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	3718      	adds	r7, #24
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	2000000c 	.word	0x2000000c
 8000bb4:	200000b4 	.word	0x200000b4
 8000bb8:	200000b8 	.word	0x200000b8
 8000bbc:	20000a64 	.word	0x20000a64
 8000bc0:	08000a25 	.word	0x08000a25
 8000bc4:	08000a43 	.word	0x08000a43
 8000bc8:	08000a5d 	.word	0x08000a5d
 8000bcc:	08000a77 	.word	0x08000a77
 8000bd0:	08000a91 	.word	0x08000a91
 8000bd4:	08000aab 	.word	0x08000aab
 8000bd8:	08000ac5 	.word	0x08000ac5
 8000bdc:	20000698 	.word	0x20000698
 8000be0:	20000ed0 	.word	0x20000ed0

08000be4 <httpd_post_receive_data>:
 * @param connection Unique connection identifier.
 * @param p Received data.
 * @return ERR_OK: Data accepted.
 *         another err_t: Data denied, http_post_get_response_uri will be called.
 */
err_t httpd_post_receive_data(void *connection, struct pbuf *p) {
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b086      	sub	sp, #24
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
 8000bec:	6039      	str	r1, [r7, #0]

	char *data;
	err_t ret_val = ERR_ARG;
 8000bee:	23f0      	movs	r3, #240	; 0xf0
 8000bf0:	74fb      	strb	r3, [r7, #19]

	struct http_state *hs = (struct http_state*) connection;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	60fb      	str	r3, [r7, #12]
	if (hs != NULL && p != NULL) {
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d00d      	beq.n	8000c18 <httpd_post_receive_data+0x34>
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d00a      	beq.n	8000c18 <httpd_post_receive_data+0x34>
		data = p->payload;
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	685b      	ldr	r3, [r3, #4]
 8000c06:	617b      	str	r3, [r7, #20]
		ret_val = http_parse_post(data, http_post_content_len);
 8000c08:	4b0d      	ldr	r3, [pc, #52]	; (8000c40 <httpd_post_receive_data+0x5c>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	6978      	ldr	r0, [r7, #20]
 8000c10:	f7ff ff66 	bl	8000ae0 <http_parse_post>
 8000c14:	4603      	mov	r3, r0
 8000c16:	74fb      	strb	r3, [r7, #19]
		//printf("%s\r\n", data);
	}
	/****************************************************/
	strcat(joined_var, data); // Объединение строк.
 8000c18:	6979      	ldr	r1, [r7, #20]
 8000c1a:	480a      	ldr	r0, [pc, #40]	; (8000c44 <httpd_post_receive_data+0x60>)
 8000c1c:	f010 fe6e 	bl	80118fc <strcat>
	//printf("+++++++++++++%s\n", joined_var);
	printf("\r\n");
 8000c20:	4809      	ldr	r0, [pc, #36]	; (8000c48 <httpd_post_receive_data+0x64>)
 8000c22:	f010 fdf3 	bl	801180c <puts>

	if (p != NULL) {
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d002      	beq.n	8000c32 <httpd_post_receive_data+0x4e>
		pbuf_free(p);
 8000c2c:	6838      	ldr	r0, [r7, #0]
 8000c2e:	f007 fb9f 	bl	8008370 <pbuf_free>
	}
	//printf("************%d\r\n", ret_val);
	return ret_val;
 8000c32:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	3718      	adds	r7, #24
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	200000b8 	.word	0x200000b8
 8000c44:	2000069c 	.word	0x2000069c
 8000c48:	080130f0 	.word	0x080130f0

08000c4c <httpd_post_finished>:
 * @param connection Unique connection identifier.
 * @param response_uri Filename of response file on success
 * @param response_uri_len Size of the 'response_uri' buffer.
 */
void httpd_post_finished(void *connection, char *response_uri,
		u16_t response_uri_len) {
 8000c4c:	b590      	push	{r4, r7, lr}
 8000c4e:	b089      	sub	sp, #36	; 0x24
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	60f8      	str	r0, [r7, #12]
 8000c54:	60b9      	str	r1, [r7, #8]
 8000c56:	4613      	mov	r3, r2
 8000c58:	80fb      	strh	r3, [r7, #6]

	struct http_state *hs = (struct http_state*) connection;
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	61fb      	str	r3, [r7, #28]
	if (hs != NULL) {
 8000c5e:	69fb      	ldr	r3, [r7, #28]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d00a      	beq.n	8000c7a <httpd_post_finished+0x2e>
		strncpy(response_uri, a[http_post_uri_file_index], response_uri_len);
 8000c64:	4b93      	ldr	r3, [pc, #588]	; (8000eb4 <httpd_post_finished+0x268>)
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	461a      	mov	r2, r3
 8000c6a:	4b93      	ldr	r3, [pc, #588]	; (8000eb8 <httpd_post_finished+0x26c>)
 8000c6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c70:	88fa      	ldrh	r2, [r7, #6]
 8000c72:	4619      	mov	r1, r3
 8000c74:	68b8      	ldr	r0, [r7, #8]
 8000c76:	f010 fe77 	bl	8011968 <strncpy>
	}
	char *rest = joined_var;
 8000c7a:	4b90      	ldr	r3, [pc, #576]	; (8000ebc <httpd_post_finished+0x270>)
 8000c7c:	61bb      	str	r3, [r7, #24]
	printf("++++++++joined_var++++++++%s\n", joined_var);
 8000c7e:	498f      	ldr	r1, [pc, #572]	; (8000ebc <httpd_post_finished+0x270>)
 8000c80:	488f      	ldr	r0, [pc, #572]	; (8000ec0 <httpd_post_finished+0x274>)
 8000c82:	f010 fd3d 	bl	8011700 <iprintf>
	//printf("-------rest------%s\n", rest);

	while ((token = strtok_r(rest, "&", &rest))) {
 8000c86:	e171      	b.n	8000f6c <httpd_post_finished+0x320>
		//printf("%s\n", token); // Имя переменной
		char *rest1 = token;
 8000c88:	4b8e      	ldr	r3, [pc, #568]	; (8000ec4 <httpd_post_finished+0x278>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	617b      	str	r3, [r7, #20]
		y = 0;
 8000c8e:	4b8e      	ldr	r3, [pc, #568]	; (8000ec8 <httpd_post_finished+0x27c>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	601a      	str	r2, [r3, #0]
		while ((token1 = strtok_r(rest1, "=", &rest1))) {
 8000c94:	e15b      	b.n	8000f4e <httpd_post_finished+0x302>
			k = 0;
 8000c96:	4b8d      	ldr	r3, [pc, #564]	; (8000ecc <httpd_post_finished+0x280>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	601a      	str	r2, [r3, #0]
			if (y == 0) {
 8000c9c:	4b8a      	ldr	r3, [pc, #552]	; (8000ec8 <httpd_post_finished+0x27c>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d136      	bne.n	8000d12 <httpd_post_finished+0xc6>
				printf("NAME %s\n", token1); // Value переменной
 8000ca4:	4b8a      	ldr	r3, [pc, #552]	; (8000ed0 <httpd_post_finished+0x284>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4619      	mov	r1, r3
 8000caa:	488a      	ldr	r0, [pc, #552]	; (8000ed4 <httpd_post_finished+0x288>)
 8000cac:	f010 fd28 	bl	8011700 <iprintf>
				// имя переменной
				//name = token1;
				// получение id
				char *rest2 = token1;
 8000cb0:	4b87      	ldr	r3, [pc, #540]	; (8000ed0 <httpd_post_finished+0x284>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	613b      	str	r3, [r7, #16]
				while ((token2 = strtok_r(rest2, "_", &rest2))) {
 8000cb6:	e01e      	b.n	8000cf6 <httpd_post_finished+0xaa>
					if (k == 0) {
 8000cb8:	4b84      	ldr	r3, [pc, #528]	; (8000ecc <httpd_post_finished+0x280>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d103      	bne.n	8000cc8 <httpd_post_finished+0x7c>
						name1 = token2;
 8000cc0:	4b85      	ldr	r3, [pc, #532]	; (8000ed8 <httpd_post_finished+0x28c>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a85      	ldr	r2, [pc, #532]	; (8000edc <httpd_post_finished+0x290>)
 8000cc6:	6013      	str	r3, [r2, #0]
					}
					if (k == 1) {
 8000cc8:	4b80      	ldr	r3, [pc, #512]	; (8000ecc <httpd_post_finished+0x280>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	2b01      	cmp	r3, #1
 8000cce:	d10d      	bne.n	8000cec <httpd_post_finished+0xa0>
						id = atoi(token2);
 8000cd0:	4b81      	ldr	r3, [pc, #516]	; (8000ed8 <httpd_post_finished+0x28c>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f010 fbf3 	bl	80114c0 <atoi>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	4a80      	ldr	r2, [pc, #512]	; (8000ee0 <httpd_post_finished+0x294>)
 8000cde:	6013      	str	r3, [r2, #0]
						printf("ID %d\n", id);
 8000ce0:	4b7f      	ldr	r3, [pc, #508]	; (8000ee0 <httpd_post_finished+0x294>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	487f      	ldr	r0, [pc, #508]	; (8000ee4 <httpd_post_finished+0x298>)
 8000ce8:	f010 fd0a 	bl	8011700 <iprintf>
					}
					k++;
 8000cec:	4b77      	ldr	r3, [pc, #476]	; (8000ecc <httpd_post_finished+0x280>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	3301      	adds	r3, #1
 8000cf2:	4a76      	ldr	r2, [pc, #472]	; (8000ecc <httpd_post_finished+0x280>)
 8000cf4:	6013      	str	r3, [r2, #0]
				while ((token2 = strtok_r(rest2, "_", &rest2))) {
 8000cf6:	693b      	ldr	r3, [r7, #16]
 8000cf8:	f107 0210 	add.w	r2, r7, #16
 8000cfc:	497a      	ldr	r1, [pc, #488]	; (8000ee8 <httpd_post_finished+0x29c>)
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f010 feb8 	bl	8011a74 <strtok_r>
 8000d04:	4603      	mov	r3, r0
 8000d06:	4a74      	ldr	r2, [pc, #464]	; (8000ed8 <httpd_post_finished+0x28c>)
 8000d08:	6013      	str	r3, [r2, #0]
 8000d0a:	4b73      	ldr	r3, [pc, #460]	; (8000ed8 <httpd_post_finished+0x28c>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d1d2      	bne.n	8000cb8 <httpd_post_finished+0x6c>
				}
			}
			if (y == 1) {
 8000d12:	4b6d      	ldr	r3, [pc, #436]	; (8000ec8 <httpd_post_finished+0x27c>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	2b01      	cmp	r3, #1
 8000d18:	f040 8114 	bne.w	8000f44 <httpd_post_finished+0x2f8>
				// значение переменной
				printf("VALUE %s\n", token1);
 8000d1c:	4b6c      	ldr	r3, [pc, #432]	; (8000ed0 <httpd_post_finished+0x284>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4619      	mov	r1, r3
 8000d22:	4872      	ldr	r0, [pc, #456]	; (8000eec <httpd_post_finished+0x2a0>)
 8000d24:	f010 fcec 	bl	8011700 <iprintf>
				// записывае в структуру
				if (strcmp(name1, "pulluptype") == 0) {
 8000d28:	4b6c      	ldr	r3, [pc, #432]	; (8000edc <httpd_post_finished+0x290>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4970      	ldr	r1, [pc, #448]	; (8000ef0 <httpd_post_finished+0x2a4>)
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f7ff fa4e 	bl	80001d0 <strcmp>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d10d      	bne.n	8000d56 <httpd_post_finished+0x10a>
					strcpy(T[id].pulluptype, token1);
 8000d3a:	4b69      	ldr	r3, [pc, #420]	; (8000ee0 <httpd_post_finished+0x294>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	2258      	movs	r2, #88	; 0x58
 8000d40:	fb02 f303 	mul.w	r3, r2, r3
 8000d44:	4a6b      	ldr	r2, [pc, #428]	; (8000ef4 <httpd_post_finished+0x2a8>)
 8000d46:	4413      	add	r3, r2
 8000d48:	4a61      	ldr	r2, [pc, #388]	; (8000ed0 <httpd_post_finished+0x284>)
 8000d4a:	6812      	ldr	r2, [r2, #0]
 8000d4c:	4611      	mov	r1, r2
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f010 fdf0 	bl	8011934 <strcpy>
 8000d54:	e0f6      	b.n	8000f44 <httpd_post_finished+0x2f8>
				} else if (strcmp(name1, "bounceinterval") == 0) {
 8000d56:	4b61      	ldr	r3, [pc, #388]	; (8000edc <httpd_post_finished+0x290>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	4967      	ldr	r1, [pc, #412]	; (8000ef8 <httpd_post_finished+0x2ac>)
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f7ff fa37 	bl	80001d0 <strcmp>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d10f      	bne.n	8000d88 <httpd_post_finished+0x13c>
					T[id].bounceinterval = atoi(token1);
 8000d68:	4b59      	ldr	r3, [pc, #356]	; (8000ed0 <httpd_post_finished+0x284>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a5c      	ldr	r2, [pc, #368]	; (8000ee0 <httpd_post_finished+0x294>)
 8000d6e:	6814      	ldr	r4, [r2, #0]
 8000d70:	4618      	mov	r0, r3
 8000d72:	f010 fba5 	bl	80114c0 <atoi>
 8000d76:	4602      	mov	r2, r0
 8000d78:	495e      	ldr	r1, [pc, #376]	; (8000ef4 <httpd_post_finished+0x2a8>)
 8000d7a:	2358      	movs	r3, #88	; 0x58
 8000d7c:	fb03 f304 	mul.w	r3, r3, r4
 8000d80:	440b      	add	r3, r1
 8000d82:	3328      	adds	r3, #40	; 0x28
 8000d84:	601a      	str	r2, [r3, #0]
 8000d86:	e0dd      	b.n	8000f44 <httpd_post_finished+0x2f8>
				} else if (strcmp(name1, "holdinterval") == 0) {
 8000d88:	4b54      	ldr	r3, [pc, #336]	; (8000edc <httpd_post_finished+0x290>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	495b      	ldr	r1, [pc, #364]	; (8000efc <httpd_post_finished+0x2b0>)
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f7ff fa1e 	bl	80001d0 <strcmp>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d10f      	bne.n	8000dba <httpd_post_finished+0x16e>
					T[id].holdinterval = atoi(token1);
 8000d9a:	4b4d      	ldr	r3, [pc, #308]	; (8000ed0 <httpd_post_finished+0x284>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	4a50      	ldr	r2, [pc, #320]	; (8000ee0 <httpd_post_finished+0x294>)
 8000da0:	6814      	ldr	r4, [r2, #0]
 8000da2:	4618      	mov	r0, r3
 8000da4:	f010 fb8c 	bl	80114c0 <atoi>
 8000da8:	4602      	mov	r2, r0
 8000daa:	4952      	ldr	r1, [pc, #328]	; (8000ef4 <httpd_post_finished+0x2a8>)
 8000dac:	2358      	movs	r3, #88	; 0x58
 8000dae:	fb03 f304 	mul.w	r3, r3, r4
 8000db2:	440b      	add	r3, r1
 8000db4:	332c      	adds	r3, #44	; 0x2c
 8000db6:	601a      	str	r2, [r3, #0]
 8000db8:	e0c4      	b.n	8000f44 <httpd_post_finished+0x2f8>
				} else if (strcmp(name1, "repeat") == 0) {
 8000dba:	4b48      	ldr	r3, [pc, #288]	; (8000edc <httpd_post_finished+0x290>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4950      	ldr	r1, [pc, #320]	; (8000f00 <httpd_post_finished+0x2b4>)
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f7ff fa05 	bl	80001d0 <strcmp>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d10f      	bne.n	8000dec <httpd_post_finished+0x1a0>
					T[id].repeat = atoi(token1);
 8000dcc:	4b40      	ldr	r3, [pc, #256]	; (8000ed0 <httpd_post_finished+0x284>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a43      	ldr	r2, [pc, #268]	; (8000ee0 <httpd_post_finished+0x294>)
 8000dd2:	6814      	ldr	r4, [r2, #0]
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f010 fb73 	bl	80114c0 <atoi>
 8000dda:	4602      	mov	r2, r0
 8000ddc:	4945      	ldr	r1, [pc, #276]	; (8000ef4 <httpd_post_finished+0x2a8>)
 8000dde:	2358      	movs	r3, #88	; 0x58
 8000de0:	fb03 f304 	mul.w	r3, r3, r4
 8000de4:	440b      	add	r3, r1
 8000de6:	3330      	adds	r3, #48	; 0x30
 8000de8:	601a      	str	r2, [r3, #0]
 8000dea:	e0ab      	b.n	8000f44 <httpd_post_finished+0x2f8>
				} else if (strcmp(name1, "repeatinterval") == 0) {
 8000dec:	4b3b      	ldr	r3, [pc, #236]	; (8000edc <httpd_post_finished+0x290>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4944      	ldr	r1, [pc, #272]	; (8000f04 <httpd_post_finished+0x2b8>)
 8000df2:	4618      	mov	r0, r3
 8000df4:	f7ff f9ec 	bl	80001d0 <strcmp>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d10f      	bne.n	8000e1e <httpd_post_finished+0x1d2>
					T[id].repeatinterval = atoi(token1);
 8000dfe:	4b34      	ldr	r3, [pc, #208]	; (8000ed0 <httpd_post_finished+0x284>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4a37      	ldr	r2, [pc, #220]	; (8000ee0 <httpd_post_finished+0x294>)
 8000e04:	6814      	ldr	r4, [r2, #0]
 8000e06:	4618      	mov	r0, r3
 8000e08:	f010 fb5a 	bl	80114c0 <atoi>
 8000e0c:	4602      	mov	r2, r0
 8000e0e:	4939      	ldr	r1, [pc, #228]	; (8000ef4 <httpd_post_finished+0x2a8>)
 8000e10:	2358      	movs	r3, #88	; 0x58
 8000e12:	fb03 f304 	mul.w	r3, r3, r4
 8000e16:	440b      	add	r3, r1
 8000e18:	3334      	adds	r3, #52	; 0x34
 8000e1a:	601a      	str	r2, [r3, #0]
 8000e1c:	e092      	b.n	8000f44 <httpd_post_finished+0x2f8>
				} else if (strcmp(name1, "doubleclickinterval") == 0) {
 8000e1e:	4b2f      	ldr	r3, [pc, #188]	; (8000edc <httpd_post_finished+0x290>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4939      	ldr	r1, [pc, #228]	; (8000f08 <httpd_post_finished+0x2bc>)
 8000e24:	4618      	mov	r0, r3
 8000e26:	f7ff f9d3 	bl	80001d0 <strcmp>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d10f      	bne.n	8000e50 <httpd_post_finished+0x204>
					T[id].doubleclickinterval = atoi(token1);
 8000e30:	4b27      	ldr	r3, [pc, #156]	; (8000ed0 <httpd_post_finished+0x284>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a2a      	ldr	r2, [pc, #168]	; (8000ee0 <httpd_post_finished+0x294>)
 8000e36:	6814      	ldr	r4, [r2, #0]
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f010 fb41 	bl	80114c0 <atoi>
 8000e3e:	4602      	mov	r2, r0
 8000e40:	492c      	ldr	r1, [pc, #176]	; (8000ef4 <httpd_post_finished+0x2a8>)
 8000e42:	2358      	movs	r3, #88	; 0x58
 8000e44:	fb03 f304 	mul.w	r3, r3, r4
 8000e48:	440b      	add	r3, r1
 8000e4a:	3338      	adds	r3, #56	; 0x38
 8000e4c:	601a      	str	r2, [r3, #0]
 8000e4e:	e079      	b.n	8000f44 <httpd_post_finished+0x2f8>
				} else if (strcmp(name1, "preventclick") == 0) {
 8000e50:	4b22      	ldr	r3, [pc, #136]	; (8000edc <httpd_post_finished+0x290>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	492d      	ldr	r1, [pc, #180]	; (8000f0c <httpd_post_finished+0x2c0>)
 8000e56:	4618      	mov	r0, r3
 8000e58:	f7ff f9ba 	bl	80001d0 <strcmp>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d10f      	bne.n	8000e82 <httpd_post_finished+0x236>
					T[id].preventclick = atoi(token1);
 8000e62:	4b1b      	ldr	r3, [pc, #108]	; (8000ed0 <httpd_post_finished+0x284>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4a1e      	ldr	r2, [pc, #120]	; (8000ee0 <httpd_post_finished+0x294>)
 8000e68:	6814      	ldr	r4, [r2, #0]
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f010 fb28 	bl	80114c0 <atoi>
 8000e70:	4602      	mov	r2, r0
 8000e72:	4920      	ldr	r1, [pc, #128]	; (8000ef4 <httpd_post_finished+0x2a8>)
 8000e74:	2358      	movs	r3, #88	; 0x58
 8000e76:	fb03 f304 	mul.w	r3, r3, r4
 8000e7a:	440b      	add	r3, r1
 8000e7c:	333c      	adds	r3, #60	; 0x3c
 8000e7e:	601a      	str	r2, [r3, #0]
 8000e80:	e060      	b.n	8000f44 <httpd_post_finished+0x2f8>
				} else if (strcmp(name1, "infofield") == 0) {
 8000e82:	4b16      	ldr	r3, [pc, #88]	; (8000edc <httpd_post_finished+0x290>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4922      	ldr	r1, [pc, #136]	; (8000f10 <httpd_post_finished+0x2c4>)
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f7ff f9a1 	bl	80001d0 <strcmp>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d13f      	bne.n	8000f14 <httpd_post_finished+0x2c8>
					strcpy(T[id].infofield, token1);
 8000e94:	4b12      	ldr	r3, [pc, #72]	; (8000ee0 <httpd_post_finished+0x294>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	2258      	movs	r2, #88	; 0x58
 8000e9a:	fb02 f303 	mul.w	r3, r2, r3
 8000e9e:	3340      	adds	r3, #64	; 0x40
 8000ea0:	4a14      	ldr	r2, [pc, #80]	; (8000ef4 <httpd_post_finished+0x2a8>)
 8000ea2:	4413      	add	r3, r2
 8000ea4:	4a0a      	ldr	r2, [pc, #40]	; (8000ed0 <httpd_post_finished+0x284>)
 8000ea6:	6812      	ldr	r2, [r2, #0]
 8000ea8:	4611      	mov	r1, r2
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f010 fd42 	bl	8011934 <strcpy>
 8000eb0:	e048      	b.n	8000f44 <httpd_post_finished+0x2f8>
 8000eb2:	bf00      	nop
 8000eb4:	200000b4 	.word	0x200000b4
 8000eb8:	2000000c 	.word	0x2000000c
 8000ebc:	2000069c 	.word	0x2000069c
 8000ec0:	080130f4 	.word	0x080130f4
 8000ec4:	20001004 	.word	0x20001004
 8000ec8:	200000ac 	.word	0x200000ac
 8000ecc:	200000a8 	.word	0x200000a8
 8000ed0:	20000690 	.word	0x20000690
 8000ed4:	08013114 	.word	0x08013114
 8000ed8:	20000ed4 	.word	0x20000ed4
 8000edc:	20000958 	.word	0x20000958
 8000ee0:	20000a80 	.word	0x20000a80
 8000ee4:	08013120 	.word	0x08013120
 8000ee8:	08013128 	.word	0x08013128
 8000eec:	0801312c 	.word	0x0801312c
 8000ef0:	08013138 	.word	0x08013138
 8000ef4:	2000095c 	.word	0x2000095c
 8000ef8:	08013144 	.word	0x08013144
 8000efc:	08013154 	.word	0x08013154
 8000f00:	08013164 	.word	0x08013164
 8000f04:	0801316c 	.word	0x0801316c
 8000f08:	0801317c 	.word	0x0801317c
 8000f0c:	08013190 	.word	0x08013190
 8000f10:	080131a0 	.word	0x080131a0
				} else if (strcmp(name1, "onoff") == 0) {
 8000f14:	4b24      	ldr	r3, [pc, #144]	; (8000fa8 <httpd_post_finished+0x35c>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4924      	ldr	r1, [pc, #144]	; (8000fac <httpd_post_finished+0x360>)
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f7ff f958 	bl	80001d0 <strcmp>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d10e      	bne.n	8000f44 <httpd_post_finished+0x2f8>
					T[id].onoff = atoi(token1);
 8000f26:	4b22      	ldr	r3, [pc, #136]	; (8000fb0 <httpd_post_finished+0x364>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4a22      	ldr	r2, [pc, #136]	; (8000fb4 <httpd_post_finished+0x368>)
 8000f2c:	6814      	ldr	r4, [r2, #0]
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f010 fac6 	bl	80114c0 <atoi>
 8000f34:	4602      	mov	r2, r0
 8000f36:	4920      	ldr	r1, [pc, #128]	; (8000fb8 <httpd_post_finished+0x36c>)
 8000f38:	2358      	movs	r3, #88	; 0x58
 8000f3a:	fb03 f304 	mul.w	r3, r3, r4
 8000f3e:	440b      	add	r3, r1
 8000f40:	3354      	adds	r3, #84	; 0x54
 8000f42:	601a      	str	r2, [r3, #0]
				}
			}
			y++;
 8000f44:	4b1d      	ldr	r3, [pc, #116]	; (8000fbc <httpd_post_finished+0x370>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	3301      	adds	r3, #1
 8000f4a:	4a1c      	ldr	r2, [pc, #112]	; (8000fbc <httpd_post_finished+0x370>)
 8000f4c:	6013      	str	r3, [r2, #0]
		while ((token1 = strtok_r(rest1, "=", &rest1))) {
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	f107 0214 	add.w	r2, r7, #20
 8000f54:	491a      	ldr	r1, [pc, #104]	; (8000fc0 <httpd_post_finished+0x374>)
 8000f56:	4618      	mov	r0, r3
 8000f58:	f010 fd8c 	bl	8011a74 <strtok_r>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	4a14      	ldr	r2, [pc, #80]	; (8000fb0 <httpd_post_finished+0x364>)
 8000f60:	6013      	str	r3, [r2, #0]
 8000f62:	4b13      	ldr	r3, [pc, #76]	; (8000fb0 <httpd_post_finished+0x364>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	f47f ae95 	bne.w	8000c96 <httpd_post_finished+0x4a>
	while ((token = strtok_r(rest, "&", &rest))) {
 8000f6c:	69bb      	ldr	r3, [r7, #24]
 8000f6e:	f107 0218 	add.w	r2, r7, #24
 8000f72:	4914      	ldr	r1, [pc, #80]	; (8000fc4 <httpd_post_finished+0x378>)
 8000f74:	4618      	mov	r0, r3
 8000f76:	f010 fd7d 	bl	8011a74 <strtok_r>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	4a12      	ldr	r2, [pc, #72]	; (8000fc8 <httpd_post_finished+0x37c>)
 8000f7e:	6013      	str	r3, [r2, #0]
 8000f80:	4b11      	ldr	r3, [pc, #68]	; (8000fc8 <httpd_post_finished+0x37c>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	f47f ae7f 	bne.w	8000c88 <httpd_post_finished+0x3c>
		}

	}
	k++;
 8000f8a:	4b10      	ldr	r3, [pc, #64]	; (8000fcc <httpd_post_finished+0x380>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	3301      	adds	r3, #1
 8000f90:	4a0e      	ldr	r2, [pc, #56]	; (8000fcc <httpd_post_finished+0x380>)
 8000f92:	6013      	str	r3, [r2, #0]
//	 printf("%s * %s * %s \n", T[0].pulluptype, T[1].pulluptype, T[2].pulluptype);
//	 printf("%d * %d * %d \n", T[0].bounceinterval, T[1].bounceinterval, T[2].bounceinterval);
//	 printf("%d * %d * %d \n", T[0].holdinterval, T[1].holdinterval, T[2].holdinterval);

	/* End the parser */
	multipart_parser_free(_parser);
 8000f94:	4b0e      	ldr	r3, [pc, #56]	; (8000fd0 <httpd_post_finished+0x384>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f000 f9b4 	bl	8001306 <multipart_parser_free>
}
 8000f9e:	bf00      	nop
 8000fa0:	3724      	adds	r7, #36	; 0x24
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd90      	pop	{r4, r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	20000958 	.word	0x20000958
 8000fac:	080131ac 	.word	0x080131ac
 8000fb0:	20000690 	.word	0x20000690
 8000fb4:	20000a80 	.word	0x20000a80
 8000fb8:	2000095c 	.word	0x2000095c
 8000fbc:	200000ac 	.word	0x200000ac
 8000fc0:	080131b4 	.word	0x080131b4
 8000fc4:	080131b8 	.word	0x080131b8
 8000fc8:	20001004 	.word	0x20001004
 8000fcc:	200000a8 	.word	0x200000a8
 8000fd0:	20000ed0 	.word	0x20000ed0

08000fd4 <http_server_init>:
////////////////////  END of POST request ////////////////////////

void http_server_init(void) {
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
	httpd_init();
 8000fd8:	f005 fda6 	bl	8006b28 <httpd_init>
	http_set_ssi_handler(ssi_handler, (char const**) TAGS, 2);
 8000fdc:	4b06      	ldr	r3, [pc, #24]	; (8000ff8 <http_server_init+0x24>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	2202      	movs	r2, #2
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	4805      	ldr	r0, [pc, #20]	; (8000ffc <http_server_init+0x28>)
 8000fe6:	f005 fdbf 	bl	8006b68 <http_set_ssi_handler>
	http_set_cgi_handlers(&FORM_CGI, 1); // Это пример когда у нас всего один "Handler" пример из видео.
 8000fea:	2101      	movs	r1, #1
 8000fec:	4804      	ldr	r0, [pc, #16]	; (8001000 <http_server_init+0x2c>)
 8000fee:	f005 fdfd 	bl	8006bec <http_set_cgi_handlers>
}
 8000ff2:	bf00      	nop
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	20000008 	.word	0x20000008
 8000ffc:	08000599 	.word	0x08000599
 8001000:	080164b4 	.word	0x080164b4

08001004 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800100c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001010:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001014:	f003 0301 	and.w	r3, r3, #1
 8001018:	2b00      	cmp	r3, #0
 800101a:	d013      	beq.n	8001044 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800101c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001020:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001024:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001028:	2b00      	cmp	r3, #0
 800102a:	d00b      	beq.n	8001044 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800102c:	e000      	b.n	8001030 <ITM_SendChar+0x2c>
    {
      __NOP();
 800102e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001030:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d0f9      	beq.n	800102e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800103a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800103e:	687a      	ldr	r2, [r7, #4]
 8001040:	b2d2      	uxtb	r2, r2
 8001042:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001044:	687b      	ldr	r3, [r7, #4]
}
 8001046:	4618      	mov	r0, r3
 8001048:	370c      	adds	r7, #12
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
	...

08001054 <_write>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART6_UART_Init(void);
/* USER CODE BEGIN PFP */
int _write(int file, char *ptr, int len) {
 8001054:	b580      	push	{r7, lr}
 8001056:	b086      	sub	sp, #24
 8001058:	af00      	add	r7, sp, #0
 800105a:	60f8      	str	r0, [r7, #12]
 800105c:	60b9      	str	r1, [r7, #8]
 800105e:	607a      	str	r2, [r7, #4]
	int i;
	HAL_UART_Transmit(&huart6, (uint8_t*) ptr, len, 50);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	b29a      	uxth	r2, r3
 8001064:	2332      	movs	r3, #50	; 0x32
 8001066:	68b9      	ldr	r1, [r7, #8]
 8001068:	480c      	ldr	r0, [pc, #48]	; (800109c <_write+0x48>)
 800106a:	f002 fe9c 	bl	8003da6 <HAL_UART_Transmit>
	for (i = 0; i < len; i++) {
 800106e:	2300      	movs	r3, #0
 8001070:	617b      	str	r3, [r7, #20]
 8001072:	e009      	b.n	8001088 <_write+0x34>
		ITM_SendChar(*ptr++);
 8001074:	68bb      	ldr	r3, [r7, #8]
 8001076:	1c5a      	adds	r2, r3, #1
 8001078:	60ba      	str	r2, [r7, #8]
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff ffc1 	bl	8001004 <ITM_SendChar>
	for (i = 0; i < len; i++) {
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	3301      	adds	r3, #1
 8001086:	617b      	str	r3, [r7, #20]
 8001088:	697a      	ldr	r2, [r7, #20]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	429a      	cmp	r2, r3
 800108e:	dbf1      	blt.n	8001074 <_write+0x20>
	}
	return len;
 8001090:	687b      	ldr	r3, [r7, #4]
}
 8001092:	4618      	mov	r0, r3
 8001094:	3718      	adds	r7, #24
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	2000103c 	.word	0x2000103c

080010a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010a4:	f000 fd80 	bl	8001ba8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010a8:	f000 f810 	bl	80010cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010ac:	f000 f8a2 	bl	80011f4 <MX_GPIO_Init>
  MX_USART6_UART_Init();
 80010b0:	f000 f876 	bl	80011a0 <MX_USART6_UART_Init>
  MX_LWIP_Init();
 80010b4:	f003 f940 	bl	8004338 <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */
	http_server_init();
 80010b8:	f7ff ff8c 	bl	8000fd4 <http_server_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
      ethernetif_input(&gnetif);
 80010bc:	4802      	ldr	r0, [pc, #8]	; (80010c8 <main+0x28>)
 80010be:	f003 fd13 	bl	8004ae8 <ethernetif_input>
      sys_check_timeouts();
 80010c2:	f00d fd41 	bl	800eb48 <sys_check_timeouts>
      ethernetif_input(&gnetif);
 80010c6:	e7f9      	b.n	80010bc <main+0x1c>
 80010c8:	20001008 	.word	0x20001008

080010cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b094      	sub	sp, #80	; 0x50
 80010d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010d2:	f107 0320 	add.w	r3, r7, #32
 80010d6:	2230      	movs	r2, #48	; 0x30
 80010d8:	2100      	movs	r1, #0
 80010da:	4618      	mov	r0, r3
 80010dc:	f010 fa5e 	bl	801159c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010e0:	f107 030c 	add.w	r3, r7, #12
 80010e4:	2200      	movs	r2, #0
 80010e6:	601a      	str	r2, [r3, #0]
 80010e8:	605a      	str	r2, [r3, #4]
 80010ea:	609a      	str	r2, [r3, #8]
 80010ec:	60da      	str	r2, [r3, #12]
 80010ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010f0:	2300      	movs	r3, #0
 80010f2:	60bb      	str	r3, [r7, #8]
 80010f4:	4b28      	ldr	r3, [pc, #160]	; (8001198 <SystemClock_Config+0xcc>)
 80010f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f8:	4a27      	ldr	r2, [pc, #156]	; (8001198 <SystemClock_Config+0xcc>)
 80010fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010fe:	6413      	str	r3, [r2, #64]	; 0x40
 8001100:	4b25      	ldr	r3, [pc, #148]	; (8001198 <SystemClock_Config+0xcc>)
 8001102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001104:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001108:	60bb      	str	r3, [r7, #8]
 800110a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800110c:	2300      	movs	r3, #0
 800110e:	607b      	str	r3, [r7, #4]
 8001110:	4b22      	ldr	r3, [pc, #136]	; (800119c <SystemClock_Config+0xd0>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a21      	ldr	r2, [pc, #132]	; (800119c <SystemClock_Config+0xd0>)
 8001116:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800111a:	6013      	str	r3, [r2, #0]
 800111c:	4b1f      	ldr	r3, [pc, #124]	; (800119c <SystemClock_Config+0xd0>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001124:	607b      	str	r3, [r7, #4]
 8001126:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001128:	2301      	movs	r3, #1
 800112a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800112c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001130:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001132:	2302      	movs	r3, #2
 8001134:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001136:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800113a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800113c:	2304      	movs	r3, #4
 800113e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001140:	23a8      	movs	r3, #168	; 0xa8
 8001142:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001144:	2302      	movs	r3, #2
 8001146:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001148:	2304      	movs	r3, #4
 800114a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800114c:	f107 0320 	add.w	r3, r7, #32
 8001150:	4618      	mov	r0, r3
 8001152:	f002 f967 	bl	8003424 <HAL_RCC_OscConfig>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800115c:	f000 f88e 	bl	800127c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001160:	230f      	movs	r3, #15
 8001162:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001164:	2302      	movs	r3, #2
 8001166:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001168:	2300      	movs	r3, #0
 800116a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800116c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001170:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001172:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001176:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001178:	f107 030c 	add.w	r3, r7, #12
 800117c:	2105      	movs	r1, #5
 800117e:	4618      	mov	r0, r3
 8001180:	f002 fbc8 	bl	8003914 <HAL_RCC_ClockConfig>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800118a:	f000 f877 	bl	800127c <Error_Handler>
  }
}
 800118e:	bf00      	nop
 8001190:	3750      	adds	r7, #80	; 0x50
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	40023800 	.word	0x40023800
 800119c:	40007000 	.word	0x40007000

080011a0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80011a4:	4b11      	ldr	r3, [pc, #68]	; (80011ec <MX_USART6_UART_Init+0x4c>)
 80011a6:	4a12      	ldr	r2, [pc, #72]	; (80011f0 <MX_USART6_UART_Init+0x50>)
 80011a8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80011aa:	4b10      	ldr	r3, [pc, #64]	; (80011ec <MX_USART6_UART_Init+0x4c>)
 80011ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011b0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80011b2:	4b0e      	ldr	r3, [pc, #56]	; (80011ec <MX_USART6_UART_Init+0x4c>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80011b8:	4b0c      	ldr	r3, [pc, #48]	; (80011ec <MX_USART6_UART_Init+0x4c>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80011be:	4b0b      	ldr	r3, [pc, #44]	; (80011ec <MX_USART6_UART_Init+0x4c>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80011c4:	4b09      	ldr	r3, [pc, #36]	; (80011ec <MX_USART6_UART_Init+0x4c>)
 80011c6:	220c      	movs	r2, #12
 80011c8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011ca:	4b08      	ldr	r3, [pc, #32]	; (80011ec <MX_USART6_UART_Init+0x4c>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80011d0:	4b06      	ldr	r3, [pc, #24]	; (80011ec <MX_USART6_UART_Init+0x4c>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80011d6:	4805      	ldr	r0, [pc, #20]	; (80011ec <MX_USART6_UART_Init+0x4c>)
 80011d8:	f002 fd98 	bl	8003d0c <HAL_UART_Init>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80011e2:	f000 f84b 	bl	800127c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80011e6:	bf00      	nop
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	2000103c 	.word	0x2000103c
 80011f0:	40011400 	.word	0x40011400

080011f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b085      	sub	sp, #20
 80011f8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011fa:	2300      	movs	r3, #0
 80011fc:	60fb      	str	r3, [r7, #12]
 80011fe:	4b1e      	ldr	r3, [pc, #120]	; (8001278 <MX_GPIO_Init+0x84>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001202:	4a1d      	ldr	r2, [pc, #116]	; (8001278 <MX_GPIO_Init+0x84>)
 8001204:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001208:	6313      	str	r3, [r2, #48]	; 0x30
 800120a:	4b1b      	ldr	r3, [pc, #108]	; (8001278 <MX_GPIO_Init+0x84>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001212:	60fb      	str	r3, [r7, #12]
 8001214:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001216:	2300      	movs	r3, #0
 8001218:	60bb      	str	r3, [r7, #8]
 800121a:	4b17      	ldr	r3, [pc, #92]	; (8001278 <MX_GPIO_Init+0x84>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121e:	4a16      	ldr	r2, [pc, #88]	; (8001278 <MX_GPIO_Init+0x84>)
 8001220:	f043 0304 	orr.w	r3, r3, #4
 8001224:	6313      	str	r3, [r2, #48]	; 0x30
 8001226:	4b14      	ldr	r3, [pc, #80]	; (8001278 <MX_GPIO_Init+0x84>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122a:	f003 0304 	and.w	r3, r3, #4
 800122e:	60bb      	str	r3, [r7, #8]
 8001230:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001232:	2300      	movs	r3, #0
 8001234:	607b      	str	r3, [r7, #4]
 8001236:	4b10      	ldr	r3, [pc, #64]	; (8001278 <MX_GPIO_Init+0x84>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	4a0f      	ldr	r2, [pc, #60]	; (8001278 <MX_GPIO_Init+0x84>)
 800123c:	f043 0301 	orr.w	r3, r3, #1
 8001240:	6313      	str	r3, [r2, #48]	; 0x30
 8001242:	4b0d      	ldr	r3, [pc, #52]	; (8001278 <MX_GPIO_Init+0x84>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001246:	f003 0301 	and.w	r3, r3, #1
 800124a:	607b      	str	r3, [r7, #4]
 800124c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800124e:	2300      	movs	r3, #0
 8001250:	603b      	str	r3, [r7, #0]
 8001252:	4b09      	ldr	r3, [pc, #36]	; (8001278 <MX_GPIO_Init+0x84>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001256:	4a08      	ldr	r2, [pc, #32]	; (8001278 <MX_GPIO_Init+0x84>)
 8001258:	f043 0302 	orr.w	r3, r3, #2
 800125c:	6313      	str	r3, [r2, #48]	; 0x30
 800125e:	4b06      	ldr	r3, [pc, #24]	; (8001278 <MX_GPIO_Init+0x84>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001262:	f003 0302 	and.w	r3, r3, #2
 8001266:	603b      	str	r3, [r7, #0]
 8001268:	683b      	ldr	r3, [r7, #0]

}
 800126a:	bf00      	nop
 800126c:	3714      	adds	r7, #20
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	40023800 	.word	0x40023800

0800127c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001280:	b672      	cpsid	i
}
 8001282:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001284:	e7fe      	b.n	8001284 <Error_Handler+0x8>

08001286 <multipart_log>:
#include <stdio.h>
#include <stdarg.h>
#include <string.h>

static void multipart_log(const char * format, ...)
{
 8001286:	b40f      	push	{r0, r1, r2, r3}
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0

    fprintf(stderr, "[HTTP_MULTIPART_PARSER] %s:%d: ", __FILE__, __LINE__);
    vfprintf(stderr, format, args);
    fprintf(stderr, "\n");
#endif
}
 800128c:	bf00      	nop
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	b004      	add	sp, #16
 8001296:	4770      	bx	lr

08001298 <multipart_parser_init>:
  s_part_data_final_hyphen,
  s_end
};

multipart_parser* multipart_parser_init
    (const char *boundary, const multipart_parser_settings* settings) {
 8001298:	b590      	push	{r4, r7, lr}
 800129a:	b085      	sub	sp, #20
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	6039      	str	r1, [r7, #0]

  multipart_parser* p = malloc(sizeof(multipart_parser) +
                               strlen(boundary) +
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	f7fe ff9e 	bl	80001e4 <strlen>
 80012a8:	4604      	mov	r4, r0
                               strlen(boundary) + 9);
 80012aa:	6878      	ldr	r0, [r7, #4]
 80012ac:	f7fe ff9a 	bl	80001e4 <strlen>
 80012b0:	4603      	mov	r3, r0
                               strlen(boundary) +
 80012b2:	4423      	add	r3, r4
  multipart_parser* p = malloc(sizeof(multipart_parser) +
 80012b4:	3325      	adds	r3, #37	; 0x25
 80012b6:	4618      	mov	r0, r3
 80012b8:	f010 f92a 	bl	8011510 <malloc>
 80012bc:	4603      	mov	r3, r0
 80012be:	60fb      	str	r3, [r7, #12]

  strcpy(p->multipart_boundary, boundary);
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	3318      	adds	r3, #24
 80012c4:	6879      	ldr	r1, [r7, #4]
 80012c6:	4618      	mov	r0, r3
 80012c8:	f010 fb34 	bl	8011934 <strcpy>
  p->boundary_length = strlen(boundary);
 80012cc:	6878      	ldr	r0, [r7, #4]
 80012ce:	f7fe ff89 	bl	80001e4 <strlen>
 80012d2:	4602      	mov	r2, r0
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	609a      	str	r2, [r3, #8]

  p->lookbehind = (p->multipart_boundary + p->boundary_length + 1);
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	f103 0218 	add.w	r2, r3, #24
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	689b      	ldr	r3, [r3, #8]
 80012e2:	3301      	adds	r3, #1
 80012e4:	441a      	add	r2, r3
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	615a      	str	r2, [r3, #20]

  p->index = 0;
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	2200      	movs	r2, #0
 80012ee:	605a      	str	r2, [r3, #4]
  p->state = s_start;
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	2202      	movs	r2, #2
 80012f4:	731a      	strb	r2, [r3, #12]
  p->settings = settings;
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	683a      	ldr	r2, [r7, #0]
 80012fa:	611a      	str	r2, [r3, #16]

  return p;
 80012fc:	68fb      	ldr	r3, [r7, #12]
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3714      	adds	r7, #20
 8001302:	46bd      	mov	sp, r7
 8001304:	bd90      	pop	{r4, r7, pc}

08001306 <multipart_parser_free>:

void multipart_parser_free(multipart_parser* p) {
 8001306:	b580      	push	{r7, lr}
 8001308:	b082      	sub	sp, #8
 800130a:	af00      	add	r7, sp, #0
 800130c:	6078      	str	r0, [r7, #4]
  free(p);
 800130e:	6878      	ldr	r0, [r7, #4]
 8001310:	f010 f906 	bl	8011520 <free>
}
 8001314:	bf00      	nop
 8001316:	3708      	adds	r7, #8
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}

0800131c <multipart_parser_execute>:

void *multipart_parser_get_data(multipart_parser *p) {
    return p->data;
}

size_t multipart_parser_execute(multipart_parser* p, const char *buf, size_t len) {
 800131c:	b580      	push	{r7, lr}
 800131e:	b088      	sub	sp, #32
 8001320:	af00      	add	r7, sp, #0
 8001322:	60f8      	str	r0, [r7, #12]
 8001324:	60b9      	str	r1, [r7, #8]
 8001326:	607a      	str	r2, [r7, #4]
  size_t i = 0;
 8001328:	2300      	movs	r3, #0
 800132a:	61fb      	str	r3, [r7, #28]
  size_t mark = 0;
 800132c:	2300      	movs	r3, #0
 800132e:	61bb      	str	r3, [r7, #24]
  char c, cl;
  int is_last = 0;
 8001330:	2300      	movs	r3, #0
 8001332:	617b      	str	r3, [r7, #20]

  while(i < len) {
 8001334:	e29a      	b.n	800186c <multipart_parser_execute+0x550>
    c = buf[i];
 8001336:	68ba      	ldr	r2, [r7, #8]
 8001338:	69fb      	ldr	r3, [r7, #28]
 800133a:	4413      	add	r3, r2
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	74fb      	strb	r3, [r7, #19]
    is_last = (i == (len - 1));
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	3b01      	subs	r3, #1
 8001344:	69fa      	ldr	r2, [r7, #28]
 8001346:	429a      	cmp	r2, r3
 8001348:	bf0c      	ite	eq
 800134a:	2301      	moveq	r3, #1
 800134c:	2300      	movne	r3, #0
 800134e:	b2db      	uxtb	r3, r3
 8001350:	617b      	str	r3, [r7, #20]
    switch (p->state) {
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	7b1b      	ldrb	r3, [r3, #12]
 8001356:	3b02      	subs	r3, #2
 8001358:	2b0f      	cmp	r3, #15
 800135a:	f200 8274 	bhi.w	8001846 <multipart_parser_execute+0x52a>
 800135e:	a201      	add	r2, pc, #4	; (adr r2, 8001364 <multipart_parser_execute+0x48>)
 8001360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001364:	080013a5 	.word	0x080013a5
 8001368:	080013b7 	.word	0x080013b7
 800136c:	08001443 	.word	0x08001443
 8001370:	08001453 	.word	0x08001453
 8001374:	08001517 	.word	0x08001517
 8001378:	0800152f 	.word	0x0800152f
 800137c:	08001547 	.word	0x08001547
 8001380:	080015c1 	.word	0x080015c1
 8001384:	080015d9 	.word	0x080015d9
 8001388:	08001633 	.word	0x08001633
 800138c:	080016b9 	.word	0x080016b9
 8001390:	08001711 	.word	0x08001711
 8001394:	080017ab 	.word	0x080017ab
 8001398:	08001807 	.word	0x08001807
 800139c:	080017d1 	.word	0x080017d1
 80013a0:	0800183b 	.word	0x0800183b
      case s_start:
        multipart_log("s_start");
 80013a4:	4895      	ldr	r0, [pc, #596]	; (80015fc <multipart_parser_execute+0x2e0>)
 80013a6:	f7ff ff6e 	bl	8001286 <multipart_log>
        p->index = 0;
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	2200      	movs	r2, #0
 80013ae:	605a      	str	r2, [r3, #4]
        p->state = s_start_boundary;
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	2203      	movs	r2, #3
 80013b4:	731a      	strb	r2, [r3, #12]

      /* fallthrough */
      case s_start_boundary:
        multipart_log("s_start_boundary");
 80013b6:	4892      	ldr	r0, [pc, #584]	; (8001600 <multipart_parser_execute+0x2e4>)
 80013b8:	f7ff ff65 	bl	8001286 <multipart_log>
        if (p->index == p->boundary_length) {
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	685a      	ldr	r2, [r3, #4]
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	689b      	ldr	r3, [r3, #8]
 80013c4:	429a      	cmp	r2, r3
 80013c6:	d10a      	bne.n	80013de <multipart_parser_execute+0xc2>
          if (c != CR) {
 80013c8:	7cfb      	ldrb	r3, [r7, #19]
 80013ca:	2b0d      	cmp	r3, #13
 80013cc:	d001      	beq.n	80013d2 <multipart_parser_execute+0xb6>
            return i;
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	e252      	b.n	8001878 <multipart_parser_execute+0x55c>
          }
          p->index++;
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	1c5a      	adds	r2, r3, #1
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	605a      	str	r2, [r3, #4]
          break;
 80013dc:	e243      	b.n	8001866 <multipart_parser_execute+0x54a>
        } else if (p->index == (p->boundary_length + 1)) {
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	685a      	ldr	r2, [r3, #4]
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	689b      	ldr	r3, [r3, #8]
 80013e6:	3301      	adds	r3, #1
 80013e8:	429a      	cmp	r2, r3
 80013ea:	d11a      	bne.n	8001422 <multipart_parser_execute+0x106>
          if (c != LF) {
 80013ec:	7cfb      	ldrb	r3, [r7, #19]
 80013ee:	2b0a      	cmp	r3, #10
 80013f0:	d001      	beq.n	80013f6 <multipart_parser_execute+0xda>
            return i;
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	e240      	b.n	8001878 <multipart_parser_execute+0x55c>
          }
          p->index = 0;
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	2200      	movs	r2, #0
 80013fa:	605a      	str	r2, [r3, #4]
          NOTIFY_CB(part_data_begin);
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	691b      	ldr	r3, [r3, #16]
 8001400:	68db      	ldr	r3, [r3, #12]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d009      	beq.n	800141a <multipart_parser_execute+0xfe>
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	691b      	ldr	r3, [r3, #16]
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	68f8      	ldr	r0, [r7, #12]
 800140e:	4798      	blx	r3
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <multipart_parser_execute+0xfe>
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	e22e      	b.n	8001878 <multipart_parser_execute+0x55c>
          p->state = s_header_field_start;
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	2204      	movs	r2, #4
 800141e:	731a      	strb	r2, [r3, #12]
          break;
 8001420:	e221      	b.n	8001866 <multipart_parser_execute+0x54a>
        }
        if (c != p->multipart_boundary[p->index]) {
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	68fa      	ldr	r2, [r7, #12]
 8001428:	4413      	add	r3, r2
 800142a:	7e1b      	ldrb	r3, [r3, #24]
 800142c:	7cfa      	ldrb	r2, [r7, #19]
 800142e:	429a      	cmp	r2, r3
 8001430:	d001      	beq.n	8001436 <multipart_parser_execute+0x11a>
          return i;
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	e220      	b.n	8001878 <multipart_parser_execute+0x55c>
        }
        p->index++;
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	1c5a      	adds	r2, r3, #1
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	605a      	str	r2, [r3, #4]
        break;
 8001440:	e211      	b.n	8001866 <multipart_parser_execute+0x54a>

      case s_header_field_start:
        multipart_log("s_header_field_start");
 8001442:	4870      	ldr	r0, [pc, #448]	; (8001604 <multipart_parser_execute+0x2e8>)
 8001444:	f7ff ff1f 	bl	8001286 <multipart_log>
        mark = i;
 8001448:	69fb      	ldr	r3, [r7, #28]
 800144a:	61bb      	str	r3, [r7, #24]
        p->state = s_header_field;
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	2205      	movs	r2, #5
 8001450:	731a      	strb	r2, [r3, #12]

      /* fallthrough */
      case s_header_field:
        multipart_log("s_header_field");
 8001452:	486d      	ldr	r0, [pc, #436]	; (8001608 <multipart_parser_execute+0x2ec>)
 8001454:	f7ff ff17 	bl	8001286 <multipart_log>
        if (c == CR) {
 8001458:	7cfb      	ldrb	r3, [r7, #19]
 800145a:	2b0d      	cmp	r3, #13
 800145c:	d103      	bne.n	8001466 <multipart_parser_execute+0x14a>
          p->state = s_headers_almost_done;
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	2206      	movs	r2, #6
 8001462:	731a      	strb	r2, [r3, #12]
          break;
 8001464:	e1ff      	b.n	8001866 <multipart_parser_execute+0x54a>
        }

        if (c == ':') {
 8001466:	7cfb      	ldrb	r3, [r7, #19]
 8001468:	2b3a      	cmp	r3, #58	; 0x3a
 800146a:	d119      	bne.n	80014a0 <multipart_parser_execute+0x184>
          EMIT_DATA_CB(header_field, buf + mark, i - mark);
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	691b      	ldr	r3, [r3, #16]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d010      	beq.n	8001498 <multipart_parser_execute+0x17c>
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	691b      	ldr	r3, [r3, #16]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	68b9      	ldr	r1, [r7, #8]
 800147e:	69ba      	ldr	r2, [r7, #24]
 8001480:	1888      	adds	r0, r1, r2
 8001482:	69f9      	ldr	r1, [r7, #28]
 8001484:	69ba      	ldr	r2, [r7, #24]
 8001486:	1a8a      	subs	r2, r1, r2
 8001488:	4601      	mov	r1, r0
 800148a:	68f8      	ldr	r0, [r7, #12]
 800148c:	4798      	blx	r3
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <multipart_parser_execute+0x17c>
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	e1ef      	b.n	8001878 <multipart_parser_execute+0x55c>
          p->state = s_header_value_start;
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	2207      	movs	r2, #7
 800149c:	731a      	strb	r2, [r3, #12]
          break;
 800149e:	e1e2      	b.n	8001866 <multipart_parser_execute+0x54a>
        }

        cl = tolower(c);
 80014a0:	7cfb      	ldrb	r3, [r7, #19]
 80014a2:	74bb      	strb	r3, [r7, #18]
 80014a4:	7cbb      	ldrb	r3, [r7, #18]
 80014a6:	3301      	adds	r3, #1
 80014a8:	4a58      	ldr	r2, [pc, #352]	; (800160c <multipart_parser_execute+0x2f0>)
 80014aa:	4413      	add	r3, r2
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	f003 0303 	and.w	r3, r3, #3
 80014b2:	2b01      	cmp	r3, #1
 80014b4:	d102      	bne.n	80014bc <multipart_parser_execute+0x1a0>
 80014b6:	7cbb      	ldrb	r3, [r7, #18]
 80014b8:	3320      	adds	r3, #32
 80014ba:	e000      	b.n	80014be <multipart_parser_execute+0x1a2>
 80014bc:	7cbb      	ldrb	r3, [r7, #18]
 80014be:	747b      	strb	r3, [r7, #17]
        if ((c != '-') && (cl < 'a' || cl > 'z')) {
 80014c0:	7cfb      	ldrb	r3, [r7, #19]
 80014c2:	2b2d      	cmp	r3, #45	; 0x2d
 80014c4:	d00a      	beq.n	80014dc <multipart_parser_execute+0x1c0>
 80014c6:	7c7b      	ldrb	r3, [r7, #17]
 80014c8:	2b60      	cmp	r3, #96	; 0x60
 80014ca:	d902      	bls.n	80014d2 <multipart_parser_execute+0x1b6>
 80014cc:	7c7b      	ldrb	r3, [r7, #17]
 80014ce:	2b7a      	cmp	r3, #122	; 0x7a
 80014d0:	d904      	bls.n	80014dc <multipart_parser_execute+0x1c0>
          multipart_log("invalid character in header name");
 80014d2:	484f      	ldr	r0, [pc, #316]	; (8001610 <multipart_parser_execute+0x2f4>)
 80014d4:	f7ff fed7 	bl	8001286 <multipart_log>
          return i;
 80014d8:	69fb      	ldr	r3, [r7, #28]
 80014da:	e1cd      	b.n	8001878 <multipart_parser_execute+0x55c>
        }
        if (is_last)
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	f000 81b6 	beq.w	8001850 <multipart_parser_execute+0x534>
            EMIT_DATA_CB(header_field, buf + mark, (i - mark) + 1);
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	691b      	ldr	r3, [r3, #16]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	f000 81b0 	beq.w	8001850 <multipart_parser_execute+0x534>
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	691b      	ldr	r3, [r3, #16]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	68b9      	ldr	r1, [r7, #8]
 80014f8:	69ba      	ldr	r2, [r7, #24]
 80014fa:	1888      	adds	r0, r1, r2
 80014fc:	69f9      	ldr	r1, [r7, #28]
 80014fe:	69ba      	ldr	r2, [r7, #24]
 8001500:	1a8a      	subs	r2, r1, r2
 8001502:	3201      	adds	r2, #1
 8001504:	4601      	mov	r1, r0
 8001506:	68f8      	ldr	r0, [r7, #12]
 8001508:	4798      	blx	r3
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	f000 819f 	beq.w	8001850 <multipart_parser_execute+0x534>
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	e1b0      	b.n	8001878 <multipart_parser_execute+0x55c>
        break;

      case s_headers_almost_done:
        multipart_log("s_headers_almost_done");
 8001516:	483f      	ldr	r0, [pc, #252]	; (8001614 <multipart_parser_execute+0x2f8>)
 8001518:	f7ff feb5 	bl	8001286 <multipart_log>
        if (c != LF) {
 800151c:	7cfb      	ldrb	r3, [r7, #19]
 800151e:	2b0a      	cmp	r3, #10
 8001520:	d001      	beq.n	8001526 <multipart_parser_execute+0x20a>
          return i;
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	e1a8      	b.n	8001878 <multipart_parser_execute+0x55c>
        }

        p->state = s_part_data_start;
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	220a      	movs	r2, #10
 800152a:	731a      	strb	r2, [r3, #12]
        break;
 800152c:	e19b      	b.n	8001866 <multipart_parser_execute+0x54a>

      case s_header_value_start:
        multipart_log("s_header_value_start");
 800152e:	483a      	ldr	r0, [pc, #232]	; (8001618 <multipart_parser_execute+0x2fc>)
 8001530:	f7ff fea9 	bl	8001286 <multipart_log>
        if (c == ' ') {
 8001534:	7cfb      	ldrb	r3, [r7, #19]
 8001536:	2b20      	cmp	r3, #32
 8001538:	f000 818c 	beq.w	8001854 <multipart_parser_execute+0x538>
          break;
        }

        mark = i;
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	61bb      	str	r3, [r7, #24]
        p->state = s_header_value;
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	2208      	movs	r2, #8
 8001544:	731a      	strb	r2, [r3, #12]

      /* fallthrough */
      case s_header_value:
        multipart_log("s_header_value");
 8001546:	4835      	ldr	r0, [pc, #212]	; (800161c <multipart_parser_execute+0x300>)
 8001548:	f7ff fe9d 	bl	8001286 <multipart_log>
        if (c == CR) {
 800154c:	7cfb      	ldrb	r3, [r7, #19]
 800154e:	2b0d      	cmp	r3, #13
 8001550:	d119      	bne.n	8001586 <multipart_parser_execute+0x26a>
          EMIT_DATA_CB(header_value, buf + mark, i - mark);
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	691b      	ldr	r3, [r3, #16]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d010      	beq.n	800157e <multipart_parser_execute+0x262>
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	691b      	ldr	r3, [r3, #16]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	68b9      	ldr	r1, [r7, #8]
 8001564:	69ba      	ldr	r2, [r7, #24]
 8001566:	1888      	adds	r0, r1, r2
 8001568:	69f9      	ldr	r1, [r7, #28]
 800156a:	69ba      	ldr	r2, [r7, #24]
 800156c:	1a8a      	subs	r2, r1, r2
 800156e:	4601      	mov	r1, r0
 8001570:	68f8      	ldr	r0, [r7, #12]
 8001572:	4798      	blx	r3
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <multipart_parser_execute+0x262>
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	e17c      	b.n	8001878 <multipart_parser_execute+0x55c>
          p->state = s_header_value_almost_done;
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	2209      	movs	r2, #9
 8001582:	731a      	strb	r2, [r3, #12]
          break;
 8001584:	e16f      	b.n	8001866 <multipart_parser_execute+0x54a>
        }
        if (is_last)
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	2b00      	cmp	r3, #0
 800158a:	f000 8165 	beq.w	8001858 <multipart_parser_execute+0x53c>
            EMIT_DATA_CB(header_value, buf + mark, (i - mark) + 1);
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	691b      	ldr	r3, [r3, #16]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	2b00      	cmp	r3, #0
 8001596:	f000 815f 	beq.w	8001858 <multipart_parser_execute+0x53c>
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	691b      	ldr	r3, [r3, #16]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	68b9      	ldr	r1, [r7, #8]
 80015a2:	69ba      	ldr	r2, [r7, #24]
 80015a4:	1888      	adds	r0, r1, r2
 80015a6:	69f9      	ldr	r1, [r7, #28]
 80015a8:	69ba      	ldr	r2, [r7, #24]
 80015aa:	1a8a      	subs	r2, r1, r2
 80015ac:	3201      	adds	r2, #1
 80015ae:	4601      	mov	r1, r0
 80015b0:	68f8      	ldr	r0, [r7, #12]
 80015b2:	4798      	blx	r3
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	f000 814e 	beq.w	8001858 <multipart_parser_execute+0x53c>
 80015bc:	69fb      	ldr	r3, [r7, #28]
 80015be:	e15b      	b.n	8001878 <multipart_parser_execute+0x55c>
        break;

      case s_header_value_almost_done:
        multipart_log("s_header_value_almost_done");
 80015c0:	4817      	ldr	r0, [pc, #92]	; (8001620 <multipart_parser_execute+0x304>)
 80015c2:	f7ff fe60 	bl	8001286 <multipart_log>
        if (c != LF) {
 80015c6:	7cfb      	ldrb	r3, [r7, #19]
 80015c8:	2b0a      	cmp	r3, #10
 80015ca:	d001      	beq.n	80015d0 <multipart_parser_execute+0x2b4>
          return i;
 80015cc:	69fb      	ldr	r3, [r7, #28]
 80015ce:	e153      	b.n	8001878 <multipart_parser_execute+0x55c>
        }
        p->state = s_header_field_start;
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	2204      	movs	r2, #4
 80015d4:	731a      	strb	r2, [r3, #12]
        break;
 80015d6:	e146      	b.n	8001866 <multipart_parser_execute+0x54a>

      case s_part_data_start:
        multipart_log("s_part_data_start");
 80015d8:	4812      	ldr	r0, [pc, #72]	; (8001624 <multipart_parser_execute+0x308>)
 80015da:	f7ff fe54 	bl	8001286 <multipart_log>
        NOTIFY_CB(headers_complete);
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	691b      	ldr	r3, [r3, #16]
 80015e2:	691b      	ldr	r3, [r3, #16]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d01f      	beq.n	8001628 <multipart_parser_execute+0x30c>
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	691b      	ldr	r3, [r3, #16]
 80015ec:	691b      	ldr	r3, [r3, #16]
 80015ee:	68f8      	ldr	r0, [r7, #12]
 80015f0:	4798      	blx	r3
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d017      	beq.n	8001628 <multipart_parser_execute+0x30c>
 80015f8:	69fb      	ldr	r3, [r7, #28]
 80015fa:	e13d      	b.n	8001878 <multipart_parser_execute+0x55c>
 80015fc:	080131bc 	.word	0x080131bc
 8001600:	080131c4 	.word	0x080131c4
 8001604:	080131d8 	.word	0x080131d8
 8001608:	080131f0 	.word	0x080131f0
 800160c:	080177e2 	.word	0x080177e2
 8001610:	08013200 	.word	0x08013200
 8001614:	08013224 	.word	0x08013224
 8001618:	0801323c 	.word	0x0801323c
 800161c:	08013254 	.word	0x08013254
 8001620:	08013264 	.word	0x08013264
 8001624:	08013280 	.word	0x08013280
        mark = i;
 8001628:	69fb      	ldr	r3, [r7, #28]
 800162a:	61bb      	str	r3, [r7, #24]
        p->state = s_part_data;
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	220b      	movs	r2, #11
 8001630:	731a      	strb	r2, [r3, #12]

      /* fallthrough */
      case s_part_data:
        multipart_log("s_part_data");
 8001632:	4893      	ldr	r0, [pc, #588]	; (8001880 <multipart_parser_execute+0x564>)
 8001634:	f7ff fe27 	bl	8001286 <multipart_log>
        if (c == CR) {
 8001638:	7cfb      	ldrb	r3, [r7, #19]
 800163a:	2b0d      	cmp	r3, #13
 800163c:	d11f      	bne.n	800167e <multipart_parser_execute+0x362>
            EMIT_DATA_CB(part_data, buf + mark, i - mark);
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	691b      	ldr	r3, [r3, #16]
 8001642:	689b      	ldr	r3, [r3, #8]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d010      	beq.n	800166a <multipart_parser_execute+0x34e>
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	691b      	ldr	r3, [r3, #16]
 800164c:	689b      	ldr	r3, [r3, #8]
 800164e:	68b9      	ldr	r1, [r7, #8]
 8001650:	69ba      	ldr	r2, [r7, #24]
 8001652:	1888      	adds	r0, r1, r2
 8001654:	69f9      	ldr	r1, [r7, #28]
 8001656:	69ba      	ldr	r2, [r7, #24]
 8001658:	1a8a      	subs	r2, r1, r2
 800165a:	4601      	mov	r1, r0
 800165c:	68f8      	ldr	r0, [r7, #12]
 800165e:	4798      	blx	r3
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <multipart_parser_execute+0x34e>
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	e106      	b.n	8001878 <multipart_parser_execute+0x55c>
            mark = i;
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	61bb      	str	r3, [r7, #24]
            p->state = s_part_data_almost_boundary;
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	220c      	movs	r2, #12
 8001672:	731a      	strb	r2, [r3, #12]
            p->lookbehind[0] = CR;
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	695b      	ldr	r3, [r3, #20]
 8001678:	220d      	movs	r2, #13
 800167a:	701a      	strb	r2, [r3, #0]
            break;
 800167c:	e0f3      	b.n	8001866 <multipart_parser_execute+0x54a>
        }
        if (is_last)
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	2b00      	cmp	r3, #0
 8001682:	f000 80eb 	beq.w	800185c <multipart_parser_execute+0x540>
            EMIT_DATA_CB(part_data, buf + mark, (i - mark) + 1);
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	691b      	ldr	r3, [r3, #16]
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	2b00      	cmp	r3, #0
 800168e:	f000 80e5 	beq.w	800185c <multipart_parser_execute+0x540>
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	691b      	ldr	r3, [r3, #16]
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	68b9      	ldr	r1, [r7, #8]
 800169a:	69ba      	ldr	r2, [r7, #24]
 800169c:	1888      	adds	r0, r1, r2
 800169e:	69f9      	ldr	r1, [r7, #28]
 80016a0:	69ba      	ldr	r2, [r7, #24]
 80016a2:	1a8a      	subs	r2, r1, r2
 80016a4:	3201      	adds	r2, #1
 80016a6:	4601      	mov	r1, r0
 80016a8:	68f8      	ldr	r0, [r7, #12]
 80016aa:	4798      	blx	r3
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	f000 80d4 	beq.w	800185c <multipart_parser_execute+0x540>
 80016b4:	69fb      	ldr	r3, [r7, #28]
 80016b6:	e0df      	b.n	8001878 <multipart_parser_execute+0x55c>
        break;

      case s_part_data_almost_boundary:
        multipart_log("s_part_data_almost_boundary");
 80016b8:	4872      	ldr	r0, [pc, #456]	; (8001884 <multipart_parser_execute+0x568>)
 80016ba:	f7ff fde4 	bl	8001286 <multipart_log>
        if (c == LF) {
 80016be:	7cfb      	ldrb	r3, [r7, #19]
 80016c0:	2b0a      	cmp	r3, #10
 80016c2:	d10b      	bne.n	80016dc <multipart_parser_execute+0x3c0>
            p->state = s_part_data_boundary;
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	220d      	movs	r2, #13
 80016c8:	731a      	strb	r2, [r3, #12]
            p->lookbehind[1] = LF;
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	695b      	ldr	r3, [r3, #20]
 80016ce:	3301      	adds	r3, #1
 80016d0:	220a      	movs	r2, #10
 80016d2:	701a      	strb	r2, [r3, #0]
            p->index = 0;
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	2200      	movs	r2, #0
 80016d8:	605a      	str	r2, [r3, #4]
            break;
 80016da:	e0c4      	b.n	8001866 <multipart_parser_execute+0x54a>
        }
        EMIT_DATA_CB(part_data, p->lookbehind, 1);
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	691b      	ldr	r3, [r3, #16]
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d00c      	beq.n	8001700 <multipart_parser_execute+0x3e4>
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	691b      	ldr	r3, [r3, #16]
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	68fa      	ldr	r2, [r7, #12]
 80016ee:	6951      	ldr	r1, [r2, #20]
 80016f0:	2201      	movs	r2, #1
 80016f2:	68f8      	ldr	r0, [r7, #12]
 80016f4:	4798      	blx	r3
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d001      	beq.n	8001700 <multipart_parser_execute+0x3e4>
 80016fc:	69fb      	ldr	r3, [r7, #28]
 80016fe:	e0bb      	b.n	8001878 <multipart_parser_execute+0x55c>
        p->state = s_part_data;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	220b      	movs	r2, #11
 8001704:	731a      	strb	r2, [r3, #12]
        mark = i --;
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	1e5a      	subs	r2, r3, #1
 800170a:	61fa      	str	r2, [r7, #28]
 800170c:	61bb      	str	r3, [r7, #24]
        break;
 800170e:	e0aa      	b.n	8001866 <multipart_parser_execute+0x54a>

      case s_part_data_boundary:
        multipart_log("s_part_data_boundary");
 8001710:	485d      	ldr	r0, [pc, #372]	; (8001888 <multipart_parser_execute+0x56c>)
 8001712:	f7ff fdb8 	bl	8001286 <multipart_log>
        if (p->multipart_boundary[p->index] != c) {
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	68fa      	ldr	r2, [r7, #12]
 800171c:	4413      	add	r3, r2
 800171e:	7e1b      	ldrb	r3, [r3, #24]
 8001720:	7cfa      	ldrb	r2, [r7, #19]
 8001722:	429a      	cmp	r2, r3
 8001724:	d01b      	beq.n	800175e <multipart_parser_execute+0x442>
          EMIT_DATA_CB(part_data, p->lookbehind, 2 + p->index);
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	691b      	ldr	r3, [r3, #16]
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d00e      	beq.n	800174e <multipart_parser_execute+0x432>
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	691b      	ldr	r3, [r3, #16]
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	68fa      	ldr	r2, [r7, #12]
 8001738:	6951      	ldr	r1, [r2, #20]
 800173a:	68fa      	ldr	r2, [r7, #12]
 800173c:	6852      	ldr	r2, [r2, #4]
 800173e:	3202      	adds	r2, #2
 8001740:	68f8      	ldr	r0, [r7, #12]
 8001742:	4798      	blx	r3
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <multipart_parser_execute+0x432>
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	e094      	b.n	8001878 <multipart_parser_execute+0x55c>
          p->state = s_part_data;
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	220b      	movs	r2, #11
 8001752:	731a      	strb	r2, [r3, #12]
          mark = i --;
 8001754:	69fb      	ldr	r3, [r7, #28]
 8001756:	1e5a      	subs	r2, r3, #1
 8001758:	61fa      	str	r2, [r7, #28]
 800175a:	61bb      	str	r3, [r7, #24]
          break;
 800175c:	e083      	b.n	8001866 <multipart_parser_execute+0x54a>
        }
        p->lookbehind[2 + p->index] = c;
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	695a      	ldr	r2, [r3, #20]
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	3302      	adds	r3, #2
 8001768:	4413      	add	r3, r2
 800176a:	7cfa      	ldrb	r2, [r7, #19]
 800176c:	701a      	strb	r2, [r3, #0]
        if ((++ p->index) == p->boundary_length) {
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	1c5a      	adds	r2, r3, #1
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	605a      	str	r2, [r3, #4]
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	685a      	ldr	r2, [r3, #4]
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	429a      	cmp	r2, r3
 8001782:	d16d      	bne.n	8001860 <multipart_parser_execute+0x544>
            NOTIFY_CB(part_data_end);
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	691b      	ldr	r3, [r3, #16]
 8001788:	695b      	ldr	r3, [r3, #20]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d009      	beq.n	80017a2 <multipart_parser_execute+0x486>
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	691b      	ldr	r3, [r3, #16]
 8001792:	695b      	ldr	r3, [r3, #20]
 8001794:	68f8      	ldr	r0, [r7, #12]
 8001796:	4798      	blx	r3
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <multipart_parser_execute+0x486>
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	e06a      	b.n	8001878 <multipart_parser_execute+0x55c>
            p->state = s_part_data_almost_end;
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	220e      	movs	r2, #14
 80017a6:	731a      	strb	r2, [r3, #12]
        }
        break;
 80017a8:	e05a      	b.n	8001860 <multipart_parser_execute+0x544>

      case s_part_data_almost_end:
        multipart_log("s_part_data_almost_end");
 80017aa:	4838      	ldr	r0, [pc, #224]	; (800188c <multipart_parser_execute+0x570>)
 80017ac:	f7ff fd6b 	bl	8001286 <multipart_log>
        if (c == '-') {
 80017b0:	7cfb      	ldrb	r3, [r7, #19]
 80017b2:	2b2d      	cmp	r3, #45	; 0x2d
 80017b4:	d103      	bne.n	80017be <multipart_parser_execute+0x4a2>
            p->state = s_part_data_final_hyphen;
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	2210      	movs	r2, #16
 80017ba:	731a      	strb	r2, [r3, #12]
            break;
 80017bc:	e053      	b.n	8001866 <multipart_parser_execute+0x54a>
        }
        if (c == CR) {
 80017be:	7cfb      	ldrb	r3, [r7, #19]
 80017c0:	2b0d      	cmp	r3, #13
 80017c2:	d103      	bne.n	80017cc <multipart_parser_execute+0x4b0>
            p->state = s_part_data_end;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	220f      	movs	r2, #15
 80017c8:	731a      	strb	r2, [r3, #12]
            break;
 80017ca:	e04c      	b.n	8001866 <multipart_parser_execute+0x54a>
        }
        return i;
 80017cc:	69fb      	ldr	r3, [r7, #28]
 80017ce:	e053      	b.n	8001878 <multipart_parser_execute+0x55c>

      case s_part_data_final_hyphen:
        multipart_log("s_part_data_final_hyphen");
 80017d0:	482f      	ldr	r0, [pc, #188]	; (8001890 <multipart_parser_execute+0x574>)
 80017d2:	f7ff fd58 	bl	8001286 <multipart_log>
        if (c == '-') {
 80017d6:	7cfb      	ldrb	r3, [r7, #19]
 80017d8:	2b2d      	cmp	r3, #45	; 0x2d
 80017da:	d112      	bne.n	8001802 <multipart_parser_execute+0x4e6>
            NOTIFY_CB(body_end);
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	691b      	ldr	r3, [r3, #16]
 80017e0:	699b      	ldr	r3, [r3, #24]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d009      	beq.n	80017fa <multipart_parser_execute+0x4de>
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	691b      	ldr	r3, [r3, #16]
 80017ea:	699b      	ldr	r3, [r3, #24]
 80017ec:	68f8      	ldr	r0, [r7, #12]
 80017ee:	4798      	blx	r3
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <multipart_parser_execute+0x4de>
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	e03e      	b.n	8001878 <multipart_parser_execute+0x55c>
            p->state = s_end;
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	2211      	movs	r2, #17
 80017fe:	731a      	strb	r2, [r3, #12]
            break;
 8001800:	e031      	b.n	8001866 <multipart_parser_execute+0x54a>
        }
        return i;
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	e038      	b.n	8001878 <multipart_parser_execute+0x55c>

      case s_part_data_end:
        multipart_log("s_part_data_end");
 8001806:	4823      	ldr	r0, [pc, #140]	; (8001894 <multipart_parser_execute+0x578>)
 8001808:	f7ff fd3d 	bl	8001286 <multipart_log>
        if (c == LF) {
 800180c:	7cfb      	ldrb	r3, [r7, #19]
 800180e:	2b0a      	cmp	r3, #10
 8001810:	d111      	bne.n	8001836 <multipart_parser_execute+0x51a>
            p->state = s_header_field_start;
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	2204      	movs	r2, #4
 8001816:	731a      	strb	r2, [r3, #12]
            NOTIFY_CB(part_data_begin);
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	691b      	ldr	r3, [r3, #16]
 800181c:	68db      	ldr	r3, [r3, #12]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d020      	beq.n	8001864 <multipart_parser_execute+0x548>
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	691b      	ldr	r3, [r3, #16]
 8001826:	68db      	ldr	r3, [r3, #12]
 8001828:	68f8      	ldr	r0, [r7, #12]
 800182a:	4798      	blx	r3
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d018      	beq.n	8001864 <multipart_parser_execute+0x548>
 8001832:	69fb      	ldr	r3, [r7, #28]
 8001834:	e020      	b.n	8001878 <multipart_parser_execute+0x55c>
            break;
        }
        return i;
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	e01e      	b.n	8001878 <multipart_parser_execute+0x55c>

      case s_end:
        multipart_log("s_end: %02X", (int) c);
 800183a:	7cfb      	ldrb	r3, [r7, #19]
 800183c:	4619      	mov	r1, r3
 800183e:	4816      	ldr	r0, [pc, #88]	; (8001898 <multipart_parser_execute+0x57c>)
 8001840:	f7ff fd21 	bl	8001286 <multipart_log>
        break;
 8001844:	e00f      	b.n	8001866 <multipart_parser_execute+0x54a>

      default:
        multipart_log("Multipart parser unrecoverable error");
 8001846:	4815      	ldr	r0, [pc, #84]	; (800189c <multipart_parser_execute+0x580>)
 8001848:	f7ff fd1d 	bl	8001286 <multipart_log>
        return 0;
 800184c:	2300      	movs	r3, #0
 800184e:	e013      	b.n	8001878 <multipart_parser_execute+0x55c>
        break;
 8001850:	bf00      	nop
 8001852:	e008      	b.n	8001866 <multipart_parser_execute+0x54a>
          break;
 8001854:	bf00      	nop
 8001856:	e006      	b.n	8001866 <multipart_parser_execute+0x54a>
        break;
 8001858:	bf00      	nop
 800185a:	e004      	b.n	8001866 <multipart_parser_execute+0x54a>
        break;
 800185c:	bf00      	nop
 800185e:	e002      	b.n	8001866 <multipart_parser_execute+0x54a>
        break;
 8001860:	bf00      	nop
 8001862:	e000      	b.n	8001866 <multipart_parser_execute+0x54a>
            break;
 8001864:	bf00      	nop
    }
    ++ i;
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	3301      	adds	r3, #1
 800186a:	61fb      	str	r3, [r7, #28]
  while(i < len) {
 800186c:	69fa      	ldr	r2, [r7, #28]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	429a      	cmp	r2, r3
 8001872:	f4ff ad60 	bcc.w	8001336 <multipart_parser_execute+0x1a>
  }

  return len;
 8001876:	687b      	ldr	r3, [r7, #4]
}
 8001878:	4618      	mov	r0, r3
 800187a:	3720      	adds	r7, #32
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	08013294 	.word	0x08013294
 8001884:	080132a0 	.word	0x080132a0
 8001888:	080132bc 	.word	0x080132bc
 800188c:	080132d4 	.word	0x080132d4
 8001890:	080132ec 	.word	0x080132ec
 8001894:	08013308 	.word	0x08013308
 8001898:	08013318 	.word	0x08013318
 800189c:	08013324 	.word	0x08013324

080018a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018a6:	2300      	movs	r3, #0
 80018a8:	607b      	str	r3, [r7, #4]
 80018aa:	4b10      	ldr	r3, [pc, #64]	; (80018ec <HAL_MspInit+0x4c>)
 80018ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ae:	4a0f      	ldr	r2, [pc, #60]	; (80018ec <HAL_MspInit+0x4c>)
 80018b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018b4:	6453      	str	r3, [r2, #68]	; 0x44
 80018b6:	4b0d      	ldr	r3, [pc, #52]	; (80018ec <HAL_MspInit+0x4c>)
 80018b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018be:	607b      	str	r3, [r7, #4]
 80018c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018c2:	2300      	movs	r3, #0
 80018c4:	603b      	str	r3, [r7, #0]
 80018c6:	4b09      	ldr	r3, [pc, #36]	; (80018ec <HAL_MspInit+0x4c>)
 80018c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ca:	4a08      	ldr	r2, [pc, #32]	; (80018ec <HAL_MspInit+0x4c>)
 80018cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018d0:	6413      	str	r3, [r2, #64]	; 0x40
 80018d2:	4b06      	ldr	r3, [pc, #24]	; (80018ec <HAL_MspInit+0x4c>)
 80018d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018da:	603b      	str	r3, [r7, #0]
 80018dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018de:	bf00      	nop
 80018e0:	370c      	adds	r7, #12
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop
 80018ec:	40023800 	.word	0x40023800

080018f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b08a      	sub	sp, #40	; 0x28
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f8:	f107 0314 	add.w	r3, r7, #20
 80018fc:	2200      	movs	r2, #0
 80018fe:	601a      	str	r2, [r3, #0]
 8001900:	605a      	str	r2, [r3, #4]
 8001902:	609a      	str	r2, [r3, #8]
 8001904:	60da      	str	r2, [r3, #12]
 8001906:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a19      	ldr	r2, [pc, #100]	; (8001974 <HAL_UART_MspInit+0x84>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d12b      	bne.n	800196a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8001912:	2300      	movs	r3, #0
 8001914:	613b      	str	r3, [r7, #16]
 8001916:	4b18      	ldr	r3, [pc, #96]	; (8001978 <HAL_UART_MspInit+0x88>)
 8001918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800191a:	4a17      	ldr	r2, [pc, #92]	; (8001978 <HAL_UART_MspInit+0x88>)
 800191c:	f043 0320 	orr.w	r3, r3, #32
 8001920:	6453      	str	r3, [r2, #68]	; 0x44
 8001922:	4b15      	ldr	r3, [pc, #84]	; (8001978 <HAL_UART_MspInit+0x88>)
 8001924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001926:	f003 0320 	and.w	r3, r3, #32
 800192a:	613b      	str	r3, [r7, #16]
 800192c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800192e:	2300      	movs	r3, #0
 8001930:	60fb      	str	r3, [r7, #12]
 8001932:	4b11      	ldr	r3, [pc, #68]	; (8001978 <HAL_UART_MspInit+0x88>)
 8001934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001936:	4a10      	ldr	r2, [pc, #64]	; (8001978 <HAL_UART_MspInit+0x88>)
 8001938:	f043 0304 	orr.w	r3, r3, #4
 800193c:	6313      	str	r3, [r2, #48]	; 0x30
 800193e:	4b0e      	ldr	r3, [pc, #56]	; (8001978 <HAL_UART_MspInit+0x88>)
 8001940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001942:	f003 0304 	and.w	r3, r3, #4
 8001946:	60fb      	str	r3, [r7, #12]
 8001948:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800194a:	23c0      	movs	r3, #192	; 0xc0
 800194c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800194e:	2302      	movs	r3, #2
 8001950:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001952:	2300      	movs	r3, #0
 8001954:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001956:	2303      	movs	r3, #3
 8001958:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800195a:	2308      	movs	r3, #8
 800195c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800195e:	f107 0314 	add.w	r3, r7, #20
 8001962:	4619      	mov	r1, r3
 8001964:	4805      	ldr	r0, [pc, #20]	; (800197c <HAL_UART_MspInit+0x8c>)
 8001966:	f001 fbc1 	bl	80030ec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800196a:	bf00      	nop
 800196c:	3728      	adds	r7, #40	; 0x28
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	40011400 	.word	0x40011400
 8001978:	40023800 	.word	0x40023800
 800197c:	40020800 	.word	0x40020800

08001980 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001984:	e7fe      	b.n	8001984 <NMI_Handler+0x4>

08001986 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001986:	b480      	push	{r7}
 8001988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800198a:	e7fe      	b.n	800198a <HardFault_Handler+0x4>

0800198c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001990:	e7fe      	b.n	8001990 <MemManage_Handler+0x4>

08001992 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001992:	b480      	push	{r7}
 8001994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001996:	e7fe      	b.n	8001996 <BusFault_Handler+0x4>

08001998 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800199c:	e7fe      	b.n	800199c <UsageFault_Handler+0x4>

0800199e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800199e:	b480      	push	{r7}
 80019a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019a2:	bf00      	nop
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr

080019ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019b0:	bf00      	nop
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr

080019ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019ba:	b480      	push	{r7}
 80019bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019be:	bf00      	nop
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr

080019c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019cc:	f000 f93e 	bl	8001c4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019d0:	bf00      	nop
 80019d2:	bd80      	pop	{r7, pc}

080019d4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
	return 1;
 80019d8:	2301      	movs	r3, #1
}
 80019da:	4618      	mov	r0, r3
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr

080019e4 <_kill>:

int _kill(int pid, int sig)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
 80019ec:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80019ee:	4b05      	ldr	r3, [pc, #20]	; (8001a04 <_kill+0x20>)
 80019f0:	2216      	movs	r2, #22
 80019f2:	601a      	str	r2, [r3, #0]
	return -1;
 80019f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	370c      	adds	r7, #12
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr
 8001a04:	2000d7a4 	.word	0x2000d7a4

08001a08 <_exit>:

void _exit (int status)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001a10:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	f7ff ffe5 	bl	80019e4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001a1a:	e7fe      	b.n	8001a1a <_exit+0x12>

08001a1c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b086      	sub	sp, #24
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	60f8      	str	r0, [r7, #12]
 8001a24:	60b9      	str	r1, [r7, #8]
 8001a26:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a28:	2300      	movs	r3, #0
 8001a2a:	617b      	str	r3, [r7, #20]
 8001a2c:	e00a      	b.n	8001a44 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001a2e:	f3af 8000 	nop.w
 8001a32:	4601      	mov	r1, r0
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	1c5a      	adds	r2, r3, #1
 8001a38:	60ba      	str	r2, [r7, #8]
 8001a3a:	b2ca      	uxtb	r2, r1
 8001a3c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	3301      	adds	r3, #1
 8001a42:	617b      	str	r3, [r7, #20]
 8001a44:	697a      	ldr	r2, [r7, #20]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	dbf0      	blt.n	8001a2e <_read+0x12>
	}

return len;
 8001a4c:	687b      	ldr	r3, [r7, #4]
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3718      	adds	r7, #24
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}

08001a56 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001a56:	b480      	push	{r7}
 8001a58:	b083      	sub	sp, #12
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	6078      	str	r0, [r7, #4]
	return -1;
 8001a5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	370c      	adds	r7, #12
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr

08001a6e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a6e:	b480      	push	{r7}
 8001a70:	b083      	sub	sp, #12
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	6078      	str	r0, [r7, #4]
 8001a76:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a7e:	605a      	str	r2, [r3, #4]
	return 0;
 8001a80:	2300      	movs	r3, #0
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	370c      	adds	r7, #12
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr

08001a8e <_isatty>:

int _isatty(int file)
{
 8001a8e:	b480      	push	{r7}
 8001a90:	b083      	sub	sp, #12
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	6078      	str	r0, [r7, #4]
	return 1;
 8001a96:	2301      	movs	r3, #1
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	370c      	adds	r7, #12
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr

08001aa4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b085      	sub	sp, #20
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	60f8      	str	r0, [r7, #12]
 8001aac:	60b9      	str	r1, [r7, #8]
 8001aae:	607a      	str	r2, [r7, #4]
	return 0;
 8001ab0:	2300      	movs	r3, #0
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3714      	adds	r7, #20
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
	...

08001ac0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b087      	sub	sp, #28
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ac8:	4a14      	ldr	r2, [pc, #80]	; (8001b1c <_sbrk+0x5c>)
 8001aca:	4b15      	ldr	r3, [pc, #84]	; (8001b20 <_sbrk+0x60>)
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ad4:	4b13      	ldr	r3, [pc, #76]	; (8001b24 <_sbrk+0x64>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d102      	bne.n	8001ae2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001adc:	4b11      	ldr	r3, [pc, #68]	; (8001b24 <_sbrk+0x64>)
 8001ade:	4a12      	ldr	r2, [pc, #72]	; (8001b28 <_sbrk+0x68>)
 8001ae0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ae2:	4b10      	ldr	r3, [pc, #64]	; (8001b24 <_sbrk+0x64>)
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4413      	add	r3, r2
 8001aea:	693a      	ldr	r2, [r7, #16]
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d205      	bcs.n	8001afc <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001af0:	4b0e      	ldr	r3, [pc, #56]	; (8001b2c <_sbrk+0x6c>)
 8001af2:	220c      	movs	r2, #12
 8001af4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001af6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001afa:	e009      	b.n	8001b10 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001afc:	4b09      	ldr	r3, [pc, #36]	; (8001b24 <_sbrk+0x64>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b02:	4b08      	ldr	r3, [pc, #32]	; (8001b24 <_sbrk+0x64>)
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4413      	add	r3, r2
 8001b0a:	4a06      	ldr	r2, [pc, #24]	; (8001b24 <_sbrk+0x64>)
 8001b0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	371c      	adds	r7, #28
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr
 8001b1c:	20020000 	.word	0x20020000
 8001b20:	00000400 	.word	0x00000400
 8001b24:	200000bc 	.word	0x200000bc
 8001b28:	2000d7b8 	.word	0x2000d7b8
 8001b2c:	2000d7a4 	.word	0x2000d7a4

08001b30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b34:	4b06      	ldr	r3, [pc, #24]	; (8001b50 <SystemInit+0x20>)
 8001b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b3a:	4a05      	ldr	r2, [pc, #20]	; (8001b50 <SystemInit+0x20>)
 8001b3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b44:	bf00      	nop
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	e000ed00 	.word	0xe000ed00

08001b54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001b54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b8c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b58:	480d      	ldr	r0, [pc, #52]	; (8001b90 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b5a:	490e      	ldr	r1, [pc, #56]	; (8001b94 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b5c:	4a0e      	ldr	r2, [pc, #56]	; (8001b98 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b60:	e002      	b.n	8001b68 <LoopCopyDataInit>

08001b62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b66:	3304      	adds	r3, #4

08001b68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b6c:	d3f9      	bcc.n	8001b62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b6e:	4a0b      	ldr	r2, [pc, #44]	; (8001b9c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b70:	4c0b      	ldr	r4, [pc, #44]	; (8001ba0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b74:	e001      	b.n	8001b7a <LoopFillZerobss>

08001b76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b78:	3204      	adds	r2, #4

08001b7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b7c:	d3fb      	bcc.n	8001b76 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001b7e:	f7ff ffd7 	bl	8001b30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b82:	f00f fca1 	bl	80114c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b86:	f7ff fa8b 	bl	80010a0 <main>
  bx  lr    
 8001b8a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001b8c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b94:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8001b98:	08017aa0 	.word	0x08017aa0
  ldr r2, =_sbss
 8001b9c:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8001ba0:	2000d7b4 	.word	0x2000d7b4

08001ba4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ba4:	e7fe      	b.n	8001ba4 <ADC_IRQHandler>
	...

08001ba8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001bac:	4b0e      	ldr	r3, [pc, #56]	; (8001be8 <HAL_Init+0x40>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a0d      	ldr	r2, [pc, #52]	; (8001be8 <HAL_Init+0x40>)
 8001bb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bb6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001bb8:	4b0b      	ldr	r3, [pc, #44]	; (8001be8 <HAL_Init+0x40>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a0a      	ldr	r2, [pc, #40]	; (8001be8 <HAL_Init+0x40>)
 8001bbe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bc2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bc4:	4b08      	ldr	r3, [pc, #32]	; (8001be8 <HAL_Init+0x40>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a07      	ldr	r2, [pc, #28]	; (8001be8 <HAL_Init+0x40>)
 8001bca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bd0:	2003      	movs	r0, #3
 8001bd2:	f000 f931 	bl	8001e38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bd6:	200f      	movs	r0, #15
 8001bd8:	f000 f808 	bl	8001bec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bdc:	f7ff fe60 	bl	80018a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001be0:	2300      	movs	r3, #0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	40023c00 	.word	0x40023c00

08001bec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bf4:	4b12      	ldr	r3, [pc, #72]	; (8001c40 <HAL_InitTick+0x54>)
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	4b12      	ldr	r3, [pc, #72]	; (8001c44 <HAL_InitTick+0x58>)
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c02:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c06:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f000 f93b 	bl	8001e86 <HAL_SYSTICK_Config>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d001      	beq.n	8001c1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e00e      	b.n	8001c38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2b0f      	cmp	r3, #15
 8001c1e:	d80a      	bhi.n	8001c36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c20:	2200      	movs	r2, #0
 8001c22:	6879      	ldr	r1, [r7, #4]
 8001c24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c28:	f000 f911 	bl	8001e4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c2c:	4a06      	ldr	r2, [pc, #24]	; (8001c48 <HAL_InitTick+0x5c>)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c32:	2300      	movs	r3, #0
 8001c34:	e000      	b.n	8001c38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3708      	adds	r7, #8
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	20000014 	.word	0x20000014
 8001c44:	2000001c 	.word	0x2000001c
 8001c48:	20000018 	.word	0x20000018

08001c4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c50:	4b06      	ldr	r3, [pc, #24]	; (8001c6c <HAL_IncTick+0x20>)
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	461a      	mov	r2, r3
 8001c56:	4b06      	ldr	r3, [pc, #24]	; (8001c70 <HAL_IncTick+0x24>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4413      	add	r3, r2
 8001c5c:	4a04      	ldr	r2, [pc, #16]	; (8001c70 <HAL_IncTick+0x24>)
 8001c5e:	6013      	str	r3, [r2, #0]
}
 8001c60:	bf00      	nop
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	2000001c 	.word	0x2000001c
 8001c70:	20001080 	.word	0x20001080

08001c74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
  return uwTick;
 8001c78:	4b03      	ldr	r3, [pc, #12]	; (8001c88 <HAL_GetTick+0x14>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop
 8001c88:	20001080 	.word	0x20001080

08001c8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c94:	f7ff ffee 	bl	8001c74 <HAL_GetTick>
 8001c98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ca4:	d005      	beq.n	8001cb2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ca6:	4b0a      	ldr	r3, [pc, #40]	; (8001cd0 <HAL_Delay+0x44>)
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	461a      	mov	r2, r3
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	4413      	add	r3, r2
 8001cb0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001cb2:	bf00      	nop
 8001cb4:	f7ff ffde 	bl	8001c74 <HAL_GetTick>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	68fa      	ldr	r2, [r7, #12]
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	d8f7      	bhi.n	8001cb4 <HAL_Delay+0x28>
  {
  }
}
 8001cc4:	bf00      	nop
 8001cc6:	bf00      	nop
 8001cc8:	3710      	adds	r7, #16
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	2000001c 	.word	0x2000001c

08001cd4 <__NVIC_SetPriorityGrouping>:
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b085      	sub	sp, #20
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	f003 0307 	and.w	r3, r3, #7
 8001ce2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ce4:	4b0c      	ldr	r3, [pc, #48]	; (8001d18 <__NVIC_SetPriorityGrouping+0x44>)
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cea:	68ba      	ldr	r2, [r7, #8]
 8001cec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cfc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d06:	4a04      	ldr	r2, [pc, #16]	; (8001d18 <__NVIC_SetPriorityGrouping+0x44>)
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	60d3      	str	r3, [r2, #12]
}
 8001d0c:	bf00      	nop
 8001d0e:	3714      	adds	r7, #20
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr
 8001d18:	e000ed00 	.word	0xe000ed00

08001d1c <__NVIC_GetPriorityGrouping>:
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d20:	4b04      	ldr	r3, [pc, #16]	; (8001d34 <__NVIC_GetPriorityGrouping+0x18>)
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	0a1b      	lsrs	r3, r3, #8
 8001d26:	f003 0307 	and.w	r3, r3, #7
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr
 8001d34:	e000ed00 	.word	0xe000ed00

08001d38 <__NVIC_SetPriority>:
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	4603      	mov	r3, r0
 8001d40:	6039      	str	r1, [r7, #0]
 8001d42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	db0a      	blt.n	8001d62 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	b2da      	uxtb	r2, r3
 8001d50:	490c      	ldr	r1, [pc, #48]	; (8001d84 <__NVIC_SetPriority+0x4c>)
 8001d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d56:	0112      	lsls	r2, r2, #4
 8001d58:	b2d2      	uxtb	r2, r2
 8001d5a:	440b      	add	r3, r1
 8001d5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001d60:	e00a      	b.n	8001d78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	b2da      	uxtb	r2, r3
 8001d66:	4908      	ldr	r1, [pc, #32]	; (8001d88 <__NVIC_SetPriority+0x50>)
 8001d68:	79fb      	ldrb	r3, [r7, #7]
 8001d6a:	f003 030f 	and.w	r3, r3, #15
 8001d6e:	3b04      	subs	r3, #4
 8001d70:	0112      	lsls	r2, r2, #4
 8001d72:	b2d2      	uxtb	r2, r2
 8001d74:	440b      	add	r3, r1
 8001d76:	761a      	strb	r2, [r3, #24]
}
 8001d78:	bf00      	nop
 8001d7a:	370c      	adds	r7, #12
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr
 8001d84:	e000e100 	.word	0xe000e100
 8001d88:	e000ed00 	.word	0xe000ed00

08001d8c <NVIC_EncodePriority>:
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b089      	sub	sp, #36	; 0x24
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	60f8      	str	r0, [r7, #12]
 8001d94:	60b9      	str	r1, [r7, #8]
 8001d96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	f003 0307 	and.w	r3, r3, #7
 8001d9e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001da0:	69fb      	ldr	r3, [r7, #28]
 8001da2:	f1c3 0307 	rsb	r3, r3, #7
 8001da6:	2b04      	cmp	r3, #4
 8001da8:	bf28      	it	cs
 8001daa:	2304      	movcs	r3, #4
 8001dac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	3304      	adds	r3, #4
 8001db2:	2b06      	cmp	r3, #6
 8001db4:	d902      	bls.n	8001dbc <NVIC_EncodePriority+0x30>
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	3b03      	subs	r3, #3
 8001dba:	e000      	b.n	8001dbe <NVIC_EncodePriority+0x32>
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dc0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001dc4:	69bb      	ldr	r3, [r7, #24]
 8001dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dca:	43da      	mvns	r2, r3
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	401a      	ands	r2, r3
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dd4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	fa01 f303 	lsl.w	r3, r1, r3
 8001dde:	43d9      	mvns	r1, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001de4:	4313      	orrs	r3, r2
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3724      	adds	r7, #36	; 0x24
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr
	...

08001df4 <SysTick_Config>:
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	3b01      	subs	r3, #1
 8001e00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e04:	d301      	bcc.n	8001e0a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001e06:	2301      	movs	r3, #1
 8001e08:	e00f      	b.n	8001e2a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e0a:	4a0a      	ldr	r2, [pc, #40]	; (8001e34 <SysTick_Config+0x40>)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	3b01      	subs	r3, #1
 8001e10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e12:	210f      	movs	r1, #15
 8001e14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e18:	f7ff ff8e 	bl	8001d38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e1c:	4b05      	ldr	r3, [pc, #20]	; (8001e34 <SysTick_Config+0x40>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e22:	4b04      	ldr	r3, [pc, #16]	; (8001e34 <SysTick_Config+0x40>)
 8001e24:	2207      	movs	r2, #7
 8001e26:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001e28:	2300      	movs	r3, #0
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3708      	adds	r7, #8
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	e000e010 	.word	0xe000e010

08001e38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e40:	6878      	ldr	r0, [r7, #4]
 8001e42:	f7ff ff47 	bl	8001cd4 <__NVIC_SetPriorityGrouping>
}
 8001e46:	bf00      	nop
 8001e48:	3708      	adds	r7, #8
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}

08001e4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e4e:	b580      	push	{r7, lr}
 8001e50:	b086      	sub	sp, #24
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	4603      	mov	r3, r0
 8001e56:	60b9      	str	r1, [r7, #8]
 8001e58:	607a      	str	r2, [r7, #4]
 8001e5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e60:	f7ff ff5c 	bl	8001d1c <__NVIC_GetPriorityGrouping>
 8001e64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e66:	687a      	ldr	r2, [r7, #4]
 8001e68:	68b9      	ldr	r1, [r7, #8]
 8001e6a:	6978      	ldr	r0, [r7, #20]
 8001e6c:	f7ff ff8e 	bl	8001d8c <NVIC_EncodePriority>
 8001e70:	4602      	mov	r2, r0
 8001e72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e76:	4611      	mov	r1, r2
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7ff ff5d 	bl	8001d38 <__NVIC_SetPriority>
}
 8001e7e:	bf00      	nop
 8001e80:	3718      	adds	r7, #24
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}

08001e86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e86:	b580      	push	{r7, lr}
 8001e88:	b082      	sub	sp, #8
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f7ff ffb0 	bl	8001df4 <SysTick_Config>
 8001e94:	4603      	mov	r3, r0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3708      	adds	r7, #8
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
	...

08001ea0 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b088      	sub	sp, #32
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	61fb      	str	r3, [r7, #28]
 8001eac:	2300      	movs	r3, #0
 8001eae:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8001eb0:	4baa      	ldr	r3, [pc, #680]	; (800215c <HAL_ETH_Init+0x2bc>)
 8001eb2:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d101      	bne.n	8001ec6 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e183      	b.n	80021ce <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d106      	bne.n	8001ee0 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f002 fb5e 	bl	800459c <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	60bb      	str	r3, [r7, #8]
 8001ee4:	4b9e      	ldr	r3, [pc, #632]	; (8002160 <HAL_ETH_Init+0x2c0>)
 8001ee6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ee8:	4a9d      	ldr	r2, [pc, #628]	; (8002160 <HAL_ETH_Init+0x2c0>)
 8001eea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001eee:	6453      	str	r3, [r2, #68]	; 0x44
 8001ef0:	4b9b      	ldr	r3, [pc, #620]	; (8002160 <HAL_ETH_Init+0x2c0>)
 8001ef2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ef8:	60bb      	str	r3, [r7, #8]
 8001efa:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001efc:	4b99      	ldr	r3, [pc, #612]	; (8002164 <HAL_ETH_Init+0x2c4>)
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	4a98      	ldr	r2, [pc, #608]	; (8002164 <HAL_ETH_Init+0x2c4>)
 8001f02:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001f06:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001f08:	4b96      	ldr	r3, [pc, #600]	; (8002164 <HAL_ETH_Init+0x2c4>)
 8001f0a:	685a      	ldr	r2, [r3, #4]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6a1b      	ldr	r3, [r3, #32]
 8001f10:	4994      	ldr	r1, [pc, #592]	; (8002164 <HAL_ETH_Init+0x2c4>)
 8001f12:	4313      	orrs	r3, r2
 8001f14:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f042 0201 	orr.w	r2, r2, #1
 8001f28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f2c:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001f2e:	f7ff fea1 	bl	8001c74 <HAL_GetTick>
 8001f32:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001f34:	e011      	b.n	8001f5a <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8001f36:	f7ff fe9d 	bl	8001c74 <HAL_GetTick>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	1ad3      	subs	r3, r2, r3
 8001f40:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001f44:	d909      	bls.n	8001f5a <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2203      	movs	r2, #3
 8001f4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2200      	movs	r2, #0
 8001f52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8001f56:	2303      	movs	r3, #3
 8001f58:	e139      	b.n	80021ce <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 0301 	and.w	r3, r3, #1
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d1e4      	bne.n	8001f36 <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	691b      	ldr	r3, [r3, #16]
 8001f72:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	f023 031c 	bic.w	r3, r3, #28
 8001f7a:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001f7c:	f001 fe92 	bl	8003ca4 <HAL_RCC_GetHCLKFreq>
 8001f80:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8001f82:	69bb      	ldr	r3, [r7, #24]
 8001f84:	4a78      	ldr	r2, [pc, #480]	; (8002168 <HAL_ETH_Init+0x2c8>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d908      	bls.n	8001f9c <HAL_ETH_Init+0xfc>
 8001f8a:	69bb      	ldr	r3, [r7, #24]
 8001f8c:	4a77      	ldr	r2, [pc, #476]	; (800216c <HAL_ETH_Init+0x2cc>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d804      	bhi.n	8001f9c <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	f043 0308 	orr.w	r3, r3, #8
 8001f98:	61fb      	str	r3, [r7, #28]
 8001f9a:	e027      	b.n	8001fec <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8001f9c:	69bb      	ldr	r3, [r7, #24]
 8001f9e:	4a73      	ldr	r2, [pc, #460]	; (800216c <HAL_ETH_Init+0x2cc>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d908      	bls.n	8001fb6 <HAL_ETH_Init+0x116>
 8001fa4:	69bb      	ldr	r3, [r7, #24]
 8001fa6:	4a6d      	ldr	r2, [pc, #436]	; (800215c <HAL_ETH_Init+0x2bc>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d204      	bcs.n	8001fb6 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001fac:	69fb      	ldr	r3, [r7, #28]
 8001fae:	f043 030c 	orr.w	r3, r3, #12
 8001fb2:	61fb      	str	r3, [r7, #28]
 8001fb4:	e01a      	b.n	8001fec <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8001fb6:	69bb      	ldr	r3, [r7, #24]
 8001fb8:	4a68      	ldr	r2, [pc, #416]	; (800215c <HAL_ETH_Init+0x2bc>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d303      	bcc.n	8001fc6 <HAL_ETH_Init+0x126>
 8001fbe:	69bb      	ldr	r3, [r7, #24]
 8001fc0:	4a6b      	ldr	r2, [pc, #428]	; (8002170 <HAL_ETH_Init+0x2d0>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d911      	bls.n	8001fea <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8001fc6:	69bb      	ldr	r3, [r7, #24]
 8001fc8:	4a69      	ldr	r2, [pc, #420]	; (8002170 <HAL_ETH_Init+0x2d0>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d908      	bls.n	8001fe0 <HAL_ETH_Init+0x140>
 8001fce:	69bb      	ldr	r3, [r7, #24]
 8001fd0:	4a68      	ldr	r2, [pc, #416]	; (8002174 <HAL_ETH_Init+0x2d4>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d804      	bhi.n	8001fe0 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	f043 0304 	orr.w	r3, r3, #4
 8001fdc:	61fb      	str	r3, [r7, #28]
 8001fde:	e005      	b.n	8001fec <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	f043 0310 	orr.w	r3, r3, #16
 8001fe6:	61fb      	str	r3, [r7, #28]
 8001fe8:	e000      	b.n	8001fec <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001fea:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	69fa      	ldr	r2, [r7, #28]
 8001ff2:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001ff4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001ff8:	2100      	movs	r1, #0
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	f000 fb98 	bl	8002730 <HAL_ETH_WritePHYRegister>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d00b      	beq.n	800201e <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 800200a:	6939      	ldr	r1, [r7, #16]
 800200c:	6878      	ldr	r0, [r7, #4]
 800200e:	f000 fd4d 	bl	8002aac <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2201      	movs	r2, #1
 8002016:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e0d7      	b.n	80021ce <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 800201e:	20ff      	movs	r0, #255	; 0xff
 8002020:	f7ff fe34 	bl	8001c8c <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	2b00      	cmp	r3, #0
 800202a:	f000 80a5 	beq.w	8002178 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800202e:	f7ff fe21 	bl	8001c74 <HAL_GetTick>
 8002032:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8002034:	f107 030c 	add.w	r3, r7, #12
 8002038:	461a      	mov	r2, r3
 800203a:	2101      	movs	r1, #1
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	f000 fb0f 	bl	8002660 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8002042:	f7ff fe17 	bl	8001c74 <HAL_GetTick>
 8002046:	4602      	mov	r2, r0
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	1ad3      	subs	r3, r2, r3
 800204c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002050:	4293      	cmp	r3, r2
 8002052:	d90f      	bls.n	8002074 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8002058:	6939      	ldr	r1, [r7, #16]
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f000 fd26 	bl	8002aac <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2201      	movs	r2, #1
 8002064:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2200      	movs	r2, #0
 800206c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8002070:	2303      	movs	r3, #3
 8002072:	e0ac      	b.n	80021ce <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	f003 0304 	and.w	r3, r3, #4
 800207a:	2b00      	cmp	r3, #0
 800207c:	d0da      	beq.n	8002034 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 800207e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002082:	2100      	movs	r1, #0
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	f000 fb53 	bl	8002730 <HAL_ETH_WritePHYRegister>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d00b      	beq.n	80020a8 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8002094:	6939      	ldr	r1, [r7, #16]
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f000 fd08 	bl	8002aac <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2201      	movs	r2, #1
 80020a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80020a4:	2301      	movs	r3, #1
 80020a6:	e092      	b.n	80021ce <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 80020a8:	f7ff fde4 	bl	8001c74 <HAL_GetTick>
 80020ac:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80020ae:	f107 030c 	add.w	r3, r7, #12
 80020b2:	461a      	mov	r2, r3
 80020b4:	2101      	movs	r1, #1
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f000 fad2 	bl	8002660 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80020bc:	f7ff fdda 	bl	8001c74 <HAL_GetTick>
 80020c0:	4602      	mov	r2, r0
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d90f      	bls.n	80020ee <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80020d2:	6939      	ldr	r1, [r7, #16]
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f000 fce9 	bl	8002aac <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2201      	movs	r2, #1
 80020de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2200      	movs	r2, #0
 80020e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80020ea:	2303      	movs	r3, #3
 80020ec:	e06f      	b.n	80021ce <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	f003 0320 	and.w	r3, r3, #32
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d0da      	beq.n	80020ae <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80020f8:	f107 030c 	add.w	r3, r7, #12
 80020fc:	461a      	mov	r2, r3
 80020fe:	2110      	movs	r1, #16
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	f000 faad 	bl	8002660 <HAL_ETH_ReadPHYRegister>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d00b      	beq.n	8002124 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8002110:	6939      	ldr	r1, [r7, #16]
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f000 fcca 	bl	8002aac <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2201      	movs	r2, #1
 800211c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8002120:	2301      	movs	r3, #1
 8002122:	e054      	b.n	80021ce <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	f003 0304 	and.w	r3, r3, #4
 800212a:	2b00      	cmp	r3, #0
 800212c:	d004      	beq.n	8002138 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002134:	60da      	str	r2, [r3, #12]
 8002136:	e002      	b.n	800213e <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2200      	movs	r2, #0
 800213c:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	f003 0302 	and.w	r3, r3, #2
 8002144:	2b00      	cmp	r3, #0
 8002146:	d003      	beq.n	8002150 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2200      	movs	r2, #0
 800214c:	609a      	str	r2, [r3, #8]
 800214e:	e035      	b.n	80021bc <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002156:	609a      	str	r2, [r3, #8]
 8002158:	e030      	b.n	80021bc <HAL_ETH_Init+0x31c>
 800215a:	bf00      	nop
 800215c:	03938700 	.word	0x03938700
 8002160:	40023800 	.word	0x40023800
 8002164:	40013800 	.word	0x40013800
 8002168:	01312cff 	.word	0x01312cff
 800216c:	02160ebf 	.word	0x02160ebf
 8002170:	05f5e0ff 	.word	0x05f5e0ff
 8002174:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	08db      	lsrs	r3, r3, #3
 800217e:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	085b      	lsrs	r3, r3, #1
 8002186:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8002188:	4313      	orrs	r3, r2
 800218a:	b29b      	uxth	r3, r3
 800218c:	461a      	mov	r2, r3
 800218e:	2100      	movs	r1, #0
 8002190:	6878      	ldr	r0, [r7, #4]
 8002192:	f000 facd 	bl	8002730 <HAL_ETH_WritePHYRegister>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d00b      	beq.n	80021b4 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80021a0:	6939      	ldr	r1, [r7, #16]
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f000 fc82 	bl	8002aac <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2201      	movs	r2, #1
 80021ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	e00c      	b.n	80021ce <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80021b4:	f640 70ff 	movw	r0, #4095	; 0xfff
 80021b8:	f7ff fd68 	bl	8001c8c <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80021bc:	6939      	ldr	r1, [r7, #16]
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f000 fc74 	bl	8002aac <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2201      	movs	r2, #1
 80021c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80021cc:	2300      	movs	r3, #0
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3720      	adds	r7, #32
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop

080021d8 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 80021d8:	b480      	push	{r7}
 80021da:	b087      	sub	sp, #28
 80021dc:	af00      	add	r7, sp, #0
 80021de:	60f8      	str	r0, [r7, #12]
 80021e0:	60b9      	str	r1, [r7, #8]
 80021e2:	607a      	str	r2, [r7, #4]
 80021e4:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80021e6:	2300      	movs	r3, #0
 80021e8:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d101      	bne.n	80021f8 <HAL_ETH_DMATxDescListInit+0x20>
 80021f4:	2302      	movs	r3, #2
 80021f6:	e052      	b.n	800229e <HAL_ETH_DMATxDescListInit+0xc6>
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	2201      	movs	r2, #1
 80021fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	2202      	movs	r2, #2
 8002204:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	68ba      	ldr	r2, [r7, #8]
 800220c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 800220e:	2300      	movs	r3, #0
 8002210:	617b      	str	r3, [r7, #20]
 8002212:	e030      	b.n	8002276 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	015b      	lsls	r3, r3, #5
 8002218:	68ba      	ldr	r2, [r7, #8]
 800221a:	4413      	add	r3, r2
 800221c:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002224:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800222c:	fb02 f303 	mul.w	r3, r2, r3
 8002230:	687a      	ldr	r2, [r7, #4]
 8002232:	4413      	add	r3, r2
 8002234:	461a      	mov	r2, r3
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	69db      	ldr	r3, [r3, #28]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d105      	bne.n	800224e <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	3b01      	subs	r3, #1
 8002252:	697a      	ldr	r2, [r7, #20]
 8002254:	429a      	cmp	r2, r3
 8002256:	d208      	bcs.n	800226a <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	3301      	adds	r3, #1
 800225c:	015b      	lsls	r3, r3, #5
 800225e:	68ba      	ldr	r2, [r7, #8]
 8002260:	4413      	add	r3, r2
 8002262:	461a      	mov	r2, r3
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	60da      	str	r2, [r3, #12]
 8002268:	e002      	b.n	8002270 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 800226a:	68ba      	ldr	r2, [r7, #8]
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	3301      	adds	r3, #1
 8002274:	617b      	str	r3, [r7, #20]
 8002276:	697a      	ldr	r2, [r7, #20]
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	429a      	cmp	r2, r3
 800227c:	d3ca      	bcc.n	8002214 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	68ba      	ldr	r2, [r7, #8]
 8002284:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002288:	3310      	adds	r3, #16
 800228a:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2201      	movs	r2, #1
 8002290:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2200      	movs	r2, #0
 8002298:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800229c:	2300      	movs	r3, #0
}
 800229e:	4618      	mov	r0, r3
 80022a0:	371c      	adds	r7, #28
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr

080022aa <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 80022aa:	b480      	push	{r7}
 80022ac:	b087      	sub	sp, #28
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	60f8      	str	r0, [r7, #12]
 80022b2:	60b9      	str	r1, [r7, #8]
 80022b4:	607a      	str	r2, [r7, #4]
 80022b6:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80022b8:	2300      	movs	r3, #0
 80022ba:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d101      	bne.n	80022ca <HAL_ETH_DMARxDescListInit+0x20>
 80022c6:	2302      	movs	r3, #2
 80022c8:	e056      	b.n	8002378 <HAL_ETH_DMARxDescListInit+0xce>
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	2201      	movs	r2, #1
 80022ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	2202      	movs	r2, #2
 80022d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	68ba      	ldr	r2, [r7, #8]
 80022de:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 80022e0:	2300      	movs	r3, #0
 80022e2:	617b      	str	r3, [r7, #20]
 80022e4:	e034      	b.n	8002350 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	015b      	lsls	r3, r3, #5
 80022ea:	68ba      	ldr	r2, [r7, #8]
 80022ec:	4413      	add	r3, r2
 80022ee:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80022f6:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80022fe:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002306:	fb02 f303 	mul.w	r3, r2, r3
 800230a:	687a      	ldr	r2, [r7, #4]
 800230c:	4413      	add	r3, r2
 800230e:	461a      	mov	r2, r3
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	699b      	ldr	r3, [r3, #24]
 8002318:	2b01      	cmp	r3, #1
 800231a:	d105      	bne.n	8002328 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	3b01      	subs	r3, #1
 800232c:	697a      	ldr	r2, [r7, #20]
 800232e:	429a      	cmp	r2, r3
 8002330:	d208      	bcs.n	8002344 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	3301      	adds	r3, #1
 8002336:	015b      	lsls	r3, r3, #5
 8002338:	68ba      	ldr	r2, [r7, #8]
 800233a:	4413      	add	r3, r2
 800233c:	461a      	mov	r2, r3
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	60da      	str	r2, [r3, #12]
 8002342:	e002      	b.n	800234a <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8002344:	68ba      	ldr	r2, [r7, #8]
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	3301      	adds	r3, #1
 800234e:	617b      	str	r3, [r7, #20]
 8002350:	697a      	ldr	r2, [r7, #20]
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	429a      	cmp	r2, r3
 8002356:	d3c6      	bcc.n	80022e6 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	68ba      	ldr	r2, [r7, #8]
 800235e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002362:	330c      	adds	r3, #12
 8002364:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	2201      	movs	r2, #1
 800236a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	2200      	movs	r2, #0
 8002372:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002376:	2300      	movs	r3, #0
}
 8002378:	4618      	mov	r0, r3
 800237a:	371c      	adds	r7, #28
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr

08002384 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8002384:	b480      	push	{r7}
 8002386:	b087      	sub	sp, #28
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
 800238c:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 800238e:	2300      	movs	r3, #0
 8002390:	617b      	str	r3, [r7, #20]
 8002392:	2300      	movs	r3, #0
 8002394:	60fb      	str	r3, [r7, #12]
 8002396:	2300      	movs	r3, #0
 8002398:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d101      	bne.n	80023a8 <HAL_ETH_TransmitFrame+0x24>
 80023a4:	2302      	movs	r3, #2
 80023a6:	e0cd      	b.n	8002544 <HAL_ETH_TransmitFrame+0x1c0>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2201      	movs	r2, #1
 80023ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2202      	movs	r2, #2
 80023b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d109      	bne.n	80023d2 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2201      	movs	r2, #1
 80023c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2200      	movs	r2, #0
 80023ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 80023ce:	2301      	movs	r3, #1
 80023d0:	e0b8      	b.n	8002544 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	da09      	bge.n	80023f0 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2212      	movs	r2, #18
 80023e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2200      	movs	r2, #0
 80023e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e0a9      	b.n	8002544 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d915      	bls.n	8002426 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	4a54      	ldr	r2, [pc, #336]	; (8002550 <HAL_ETH_TransmitFrame+0x1cc>)
 80023fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002402:	0a9b      	lsrs	r3, r3, #10
 8002404:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8002406:	683a      	ldr	r2, [r7, #0]
 8002408:	4b51      	ldr	r3, [pc, #324]	; (8002550 <HAL_ETH_TransmitFrame+0x1cc>)
 800240a:	fba3 1302 	umull	r1, r3, r3, r2
 800240e:	0a9b      	lsrs	r3, r3, #10
 8002410:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8002414:	fb01 f303 	mul.w	r3, r1, r3
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	2b00      	cmp	r3, #0
 800241c:	d005      	beq.n	800242a <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	3301      	adds	r3, #1
 8002422:	617b      	str	r3, [r7, #20]
 8002424:	e001      	b.n	800242a <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 8002426:	2301      	movs	r3, #1
 8002428:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	2b01      	cmp	r3, #1
 800242e:	d11c      	bne.n	800246a <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800243a:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 800243e:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002444:	683a      	ldr	r2, [r7, #0]
 8002446:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800244a:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002456:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800245a:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002460:	68db      	ldr	r3, [r3, #12]
 8002462:	461a      	mov	r2, r3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	62da      	str	r2, [r3, #44]	; 0x2c
 8002468:	e04b      	b.n	8002502 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 800246a:	2300      	movs	r3, #0
 800246c:	613b      	str	r3, [r7, #16]
 800246e:	e044      	b.n	80024fa <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800247a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800247e:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d107      	bne.n	8002496 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002490:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002494:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800249a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800249e:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	3b01      	subs	r3, #1
 80024a4:	693a      	ldr	r2, [r7, #16]
 80024a6:	429a      	cmp	r2, r3
 80024a8:	d116      	bne.n	80024d8 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024b4:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80024b8:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	4a25      	ldr	r2, [pc, #148]	; (8002554 <HAL_ETH_TransmitFrame+0x1d0>)
 80024be:	fb02 f203 	mul.w	r2, r2, r3
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	4413      	add	r3, r2
 80024c6:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80024ca:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024d0:	68fa      	ldr	r2, [r7, #12]
 80024d2:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80024d6:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024e2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80024e6:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ec:	68db      	ldr	r3, [r3, #12]
 80024ee:	461a      	mov	r2, r3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	3301      	adds	r3, #1
 80024f8:	613b      	str	r3, [r7, #16]
 80024fa:	693a      	ldr	r2, [r7, #16]
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	429a      	cmp	r2, r3
 8002500:	d3b6      	bcc.n	8002470 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800250a:	3314      	adds	r3, #20
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0304 	and.w	r3, r3, #4
 8002512:	2b00      	cmp	r3, #0
 8002514:	d00d      	beq.n	8002532 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800251e:	3314      	adds	r3, #20
 8002520:	2204      	movs	r2, #4
 8002522:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800252c:	3304      	adds	r3, #4
 800252e:	2200      	movs	r2, #0
 8002530:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2201      	movs	r2, #1
 8002536:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2200      	movs	r2, #0
 800253e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002542:	2300      	movs	r3, #0
}
 8002544:	4618      	mov	r0, r3
 8002546:	371c      	adds	r7, #28
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr
 8002550:	ac02b00b 	.word	0xac02b00b
 8002554:	fffffa0c 	.word	0xfffffa0c

08002558 <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 8002558:	b480      	push	{r7}
 800255a:	b085      	sub	sp, #20
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0U;
 8002560:	2300      	movs	r3, #0
 8002562:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800256a:	2b01      	cmp	r3, #1
 800256c:	d101      	bne.n	8002572 <HAL_ETH_GetReceivedFrame+0x1a>
 800256e:	2302      	movs	r3, #2
 8002570:	e070      	b.n	8002654 <HAL_ETH_GetReceivedFrame+0xfc>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2201      	movs	r2, #1
 8002576:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2202      	movs	r2, #2
 800257e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	2b00      	cmp	r3, #0
 800258a:	db5a      	blt.n	8002642 <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002596:	2b00      	cmp	r3, #0
 8002598:	d030      	beq.n	80025fc <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800259e:	1c5a      	adds	r2, r3, #1
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1U)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d103      	bne.n	80025b4 <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	0c1b      	lsrs	r3, r3, #16
 80025c4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80025c8:	3b04      	subs	r3, #4
 80025ca:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	68fa      	ldr	r2, [r7, #12]
 80025d0:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d6:	689a      	ldr	r2, [r3, #8]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025e0:	68db      	ldr	r3, [r3, #12]
 80025e2:	461a      	mov	r2, r3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2201      	movs	r2, #1
 80025ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2200      	movs	r2, #0
 80025f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
      
      /* Return function status */
      return HAL_OK;
 80025f8:	2300      	movs	r3, #0
 80025fa:	e02b      	b.n	8002654 <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002606:	2b00      	cmp	r3, #0
 8002608:	d010      	beq.n	800262c <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2200      	movs	r2, #0
 8002616:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1U;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2201      	movs	r2, #1
 800261c:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002622:	68db      	ldr	r3, [r3, #12]
 8002624:	461a      	mov	r2, r3
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	629a      	str	r2, [r3, #40]	; 0x28
 800262a:	e00a      	b.n	8002642 <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */ 
    else
    {
      (heth->RxFrameInfos).SegCount++;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002630:	1c5a      	adds	r2, r3, #1
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	461a      	mov	r2, r3
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	629a      	str	r2, [r3, #40]	; 0x28
    } 
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2201      	movs	r2, #1
 8002646:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2200      	movs	r2, #0
 800264e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
}
 8002654:	4618      	mov	r0, r3
 8002656:	3714      	adds	r7, #20
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr

08002660 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b086      	sub	sp, #24
 8002664:	af00      	add	r7, sp, #0
 8002666:	60f8      	str	r0, [r7, #12]
 8002668:	460b      	mov	r3, r1
 800266a:	607a      	str	r2, [r7, #4]
 800266c:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 800266e:	2300      	movs	r3, #0
 8002670:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8002672:	2300      	movs	r3, #0
 8002674:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800267c:	b2db      	uxtb	r3, r3
 800267e:	2b82      	cmp	r3, #130	; 0x82
 8002680:	d101      	bne.n	8002686 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8002682:	2302      	movs	r3, #2
 8002684:	e050      	b.n	8002728 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2282      	movs	r2, #130	; 0x82
 800268a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	691b      	ldr	r3, [r3, #16]
 8002694:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	f003 031c 	and.w	r3, r3, #28
 800269c:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	8a1b      	ldrh	r3, [r3, #16]
 80026a2:	02db      	lsls	r3, r3, #11
 80026a4:	b29b      	uxth	r3, r3
 80026a6:	697a      	ldr	r2, [r7, #20]
 80026a8:	4313      	orrs	r3, r2
 80026aa:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80026ac:	897b      	ldrh	r3, [r7, #10]
 80026ae:	019b      	lsls	r3, r3, #6
 80026b0:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80026b4:	697a      	ldr	r2, [r7, #20]
 80026b6:	4313      	orrs	r3, r2
 80026b8:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	f023 0302 	bic.w	r3, r3, #2
 80026c0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	f043 0301 	orr.w	r3, r3, #1
 80026c8:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	697a      	ldr	r2, [r7, #20]
 80026d0:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80026d2:	f7ff facf 	bl	8001c74 <HAL_GetTick>
 80026d6:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80026d8:	e015      	b.n	8002706 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 80026da:	f7ff facb 	bl	8001c74 <HAL_GetTick>
 80026de:	4602      	mov	r2, r0
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026e8:	d309      	bcc.n	80026fe <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2201      	movs	r2, #1
 80026ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2200      	movs	r2, #0
 80026f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80026fa:	2303      	movs	r3, #3
 80026fc:	e014      	b.n	8002728 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	691b      	ldr	r3, [r3, #16]
 8002704:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	f003 0301 	and.w	r3, r3, #1
 800270c:	2b00      	cmp	r3, #0
 800270e:	d1e4      	bne.n	80026da <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	695b      	ldr	r3, [r3, #20]
 8002716:	b29b      	uxth	r3, r3
 8002718:	461a      	mov	r2, r3
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2201      	movs	r2, #1
 8002722:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8002726:	2300      	movs	r3, #0
}
 8002728:	4618      	mov	r0, r3
 800272a:	3718      	adds	r7, #24
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}

08002730 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b086      	sub	sp, #24
 8002734:	af00      	add	r7, sp, #0
 8002736:	60f8      	str	r0, [r7, #12]
 8002738:	460b      	mov	r3, r1
 800273a:	607a      	str	r2, [r7, #4]
 800273c:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 800273e:	2300      	movs	r3, #0
 8002740:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8002742:	2300      	movs	r3, #0
 8002744:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800274c:	b2db      	uxtb	r3, r3
 800274e:	2b42      	cmp	r3, #66	; 0x42
 8002750:	d101      	bne.n	8002756 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8002752:	2302      	movs	r3, #2
 8002754:	e04e      	b.n	80027f4 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2242      	movs	r2, #66	; 0x42
 800275a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	691b      	ldr	r3, [r3, #16]
 8002764:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	f003 031c 	and.w	r3, r3, #28
 800276c:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	8a1b      	ldrh	r3, [r3, #16]
 8002772:	02db      	lsls	r3, r3, #11
 8002774:	b29b      	uxth	r3, r3
 8002776:	697a      	ldr	r2, [r7, #20]
 8002778:	4313      	orrs	r3, r2
 800277a:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 800277c:	897b      	ldrh	r3, [r7, #10]
 800277e:	019b      	lsls	r3, r3, #6
 8002780:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002784:	697a      	ldr	r2, [r7, #20]
 8002786:	4313      	orrs	r3, r2
 8002788:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	f043 0302 	orr.w	r3, r3, #2
 8002790:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	f043 0301 	orr.w	r3, r3, #1
 8002798:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	b29a      	uxth	r2, r3
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	697a      	ldr	r2, [r7, #20]
 80027aa:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80027ac:	f7ff fa62 	bl	8001c74 <HAL_GetTick>
 80027b0:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80027b2:	e015      	b.n	80027e0 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 80027b4:	f7ff fa5e 	bl	8001c74 <HAL_GetTick>
 80027b8:	4602      	mov	r2, r0
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027c2:	d309      	bcc.n	80027d8 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2201      	movs	r2, #1
 80027c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2200      	movs	r2, #0
 80027d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80027d4:	2303      	movs	r3, #3
 80027d6:	e00d      	b.n	80027f4 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	691b      	ldr	r3, [r3, #16]
 80027de:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	f003 0301 	and.w	r3, r3, #1
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d1e4      	bne.n	80027b4 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2201      	movs	r2, #1
 80027ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 80027f2:	2300      	movs	r3, #0
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	3718      	adds	r7, #24
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}

080027fc <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b082      	sub	sp, #8
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800280a:	2b01      	cmp	r3, #1
 800280c:	d101      	bne.n	8002812 <HAL_ETH_Start+0x16>
 800280e:	2302      	movs	r3, #2
 8002810:	e01f      	b.n	8002852 <HAL_ETH_Start+0x56>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2201      	movs	r2, #1
 8002816:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2202      	movs	r2, #2
 800281e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	f000 fb44 	bl	8002eb0 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	f000 fb7b 	bl	8002f24 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f000 fc12 	bl	8003058 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8002834:	6878      	ldr	r0, [r7, #4]
 8002836:	f000 fbaf 	bl	8002f98 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f000 fbdc 	bl	8002ff8 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2201      	movs	r2, #1
 8002844:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2200      	movs	r2, #0
 800284c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002850:	2300      	movs	r3, #0
}
 8002852:	4618      	mov	r0, r3
 8002854:	3708      	adds	r7, #8
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}

0800285a <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 800285a:	b580      	push	{r7, lr}
 800285c:	b082      	sub	sp, #8
 800285e:	af00      	add	r7, sp, #0
 8002860:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002868:	2b01      	cmp	r3, #1
 800286a:	d101      	bne.n	8002870 <HAL_ETH_Stop+0x16>
 800286c:	2302      	movs	r3, #2
 800286e:	e01f      	b.n	80028b0 <HAL_ETH_Stop+0x56>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2201      	movs	r2, #1
 8002874:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2202      	movs	r2, #2
 800287c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	f000 fba1 	bl	8002fc8 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f000 fbce 	bl	8003028 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	f000 fb66 	bl	8002f5e <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f000 fbe0 	bl	8003058 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8002898:	6878      	ldr	r0, [r7, #4]
 800289a:	f000 fb26 	bl	8002eea <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2201      	movs	r2, #1
 80028a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2200      	movs	r2, #0
 80028aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80028ae:	2300      	movs	r3, #0
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3708      	adds	r7, #8
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}

080028b8 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b084      	sub	sp, #16
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
 80028c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 80028c2:	2300      	movs	r3, #0
 80028c4:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d101      	bne.n	80028d4 <HAL_ETH_ConfigMAC+0x1c>
 80028d0:	2302      	movs	r3, #2
 80028d2:	e0e4      	b.n	8002a9e <HAL_ETH_ConfigMAC+0x1e6>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2201      	movs	r2, #1
 80028d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2202      	movs	r2, #2
 80028e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	f000 80b1 	beq.w	8002a4e <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80028f4:	68fa      	ldr	r2, [r7, #12]
 80028f6:	4b6c      	ldr	r3, [pc, #432]	; (8002aa8 <HAL_ETH_ConfigMAC+0x1f0>)
 80028f8:	4013      	ands	r3, r2
 80028fa:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8002904:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 800290a:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8002910:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8002916:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 800291c:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8002922:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8002928:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 800292e:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8002934:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 800293a:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8002940:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8002946:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8002948:	68fa      	ldr	r2, [r7, #12]
 800294a:	4313      	orrs	r3, r2
 800294c:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	68fa      	ldr	r2, [r7, #12]
 8002954:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800295e:	2001      	movs	r0, #1
 8002960:	f7ff f994 	bl	8001c8c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	68fa      	ldr	r2, [r7, #12]
 800296a:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002974:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 800297a:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8002980:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8002986:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 800298c:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8002992:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 800299e:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80029a0:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80029aa:	2001      	movs	r0, #1
 80029ac:	f7ff f96e 	bl	8001c8c <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	68fa      	ldr	r2, [r7, #12]
 80029b6:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	683a      	ldr	r2, [r7, #0]
 80029be:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80029c0:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	683a      	ldr	r2, [r7, #0]
 80029c8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80029ca:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	699b      	ldr	r3, [r3, #24]
 80029d2:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80029d4:	68fa      	ldr	r2, [r7, #12]
 80029d6:	f64f 7341 	movw	r3, #65345	; 0xff41
 80029da:	4013      	ands	r3, r2
 80029dc:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029e2:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 80029e8:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 80029ee:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 80029f4:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 80029fa:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8002a00:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8002a02:	68fa      	ldr	r2, [r7, #12]
 8002a04:	4313      	orrs	r3, r2
 8002a06:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	68fa      	ldr	r2, [r7, #12]
 8002a0e:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	699b      	ldr	r3, [r3, #24]
 8002a16:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002a18:	2001      	movs	r0, #1
 8002a1a:	f7ff f937 	bl	8001c8c <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	68fa      	ldr	r2, [r7, #12]
 8002a24:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	430a      	orrs	r2, r1
 8002a34:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	69db      	ldr	r3, [r3, #28]
 8002a3c:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8002a3e:	2001      	movs	r0, #1
 8002a40:	f7ff f924 	bl	8001c8c <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	68fa      	ldr	r2, [r7, #12]
 8002a4a:	61da      	str	r2, [r3, #28]
 8002a4c:	e01e      	b.n	8002a8c <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002a5c:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	689a      	ldr	r2, [r3, #8]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	68db      	ldr	r3, [r3, #12]
 8002a66:	4313      	orrs	r3, r2
 8002a68:	68fa      	ldr	r2, [r7, #12]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	68fa      	ldr	r2, [r7, #12]
 8002a74:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002a7e:	2001      	movs	r0, #1
 8002a80:	f7ff f904 	bl	8001c8c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	68fa      	ldr	r2, [r7, #12]
 8002a8a:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2201      	movs	r2, #1
 8002a90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2200      	movs	r2, #0
 8002a98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8002a9c:	2300      	movs	r3, #0
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3710      	adds	r7, #16
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	ff20810f 	.word	0xff20810f

08002aac <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b0b0      	sub	sp, #192	; 0xc0
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
 8002ab4:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d007      	beq.n	8002ad2 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ac8:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002ad0:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8002ada:	2300      	movs	r3, #0
 8002adc:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	69db      	ldr	r3, [r3, #28]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d103      	bne.n	8002afa <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8002af2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002af6:	663b      	str	r3, [r7, #96]	; 0x60
 8002af8:	e001      	b.n	8002afe <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8002afa:	2300      	movs	r3, #0
 8002afc:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8002afe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b02:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8002b04:	2300      	movs	r3, #0
 8002b06:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8002b10:	2300      	movs	r3, #0
 8002b12:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8002b14:	2300      	movs	r3, #0
 8002b16:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8002b18:	2340      	movs	r3, #64	; 0x40
 8002b1a:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8002b22:	2300      	movs	r3, #0
 8002b24:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8002b34:	2300      	movs	r3, #0
 8002b36:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8002b40:	2300      	movs	r3, #0
 8002b42:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8002b46:	2300      	movs	r3, #0
 8002b48:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8002b4c:	2380      	movs	r3, #128	; 0x80
 8002b4e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002b52:	2300      	movs	r3, #0
 8002b54:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8002b64:	2300      	movs	r3, #0
 8002b66:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8002b70:	2300      	movs	r3, #0
 8002b72:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002b80:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002b84:	4bac      	ldr	r3, [pc, #688]	; (8002e38 <ETH_MACDMAConfig+0x38c>)
 8002b86:	4013      	ands	r3, r2
 8002b88:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8002b8c:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8002b8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8002b90:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8002b92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8002b94:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8002b96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8002b98:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8002b9e:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8002ba0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8002ba2:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8002ba4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8002ba6:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8002bac:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8002bae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8002bb0:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8002bb2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8002bb4:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8002bb6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8002bb8:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8002bba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8002bbc:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8002bbe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8002bc0:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8002bc2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002bd4:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002be0:	2001      	movs	r0, #1
 8002be2:	f7ff f853 	bl	8001c8c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002bee:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002bf0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8002bf2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002bf4:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8002bf6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8002bf8:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8002bfa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8002bfe:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8002c00:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8002c04:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8002c06:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8002c0a:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8002c0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8002c10:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8002c14:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8002c1c:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002c1e:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002c2a:	2001      	movs	r0, #1
 8002c2c:	f7ff f82e 	bl	8001c8c <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002c38:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002c42:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002c4c:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	699b      	ldr	r3, [r3, #24]
 8002c54:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002c58:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002c5c:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002c60:	4013      	ands	r3, r2
 8002c62:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8002c66:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002c6a:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8002c6c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8002c70:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8002c72:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8002c76:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8002c78:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8002c7c:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8002c7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8002c82:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8002c84:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8002c88:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8002c8a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002c9c:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	699b      	ldr	r3, [r3, #24]
 8002ca4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002ca8:	2001      	movs	r0, #1
 8002caa:	f7fe ffef 	bl	8001c8c <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002cb6:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002cb8:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8002cbc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	430a      	orrs	r2, r1
 8002cc6:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	69db      	ldr	r3, [r3, #28]
 8002cce:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002cd2:	2001      	movs	r0, #1
 8002cd4:	f7fe ffda 	bl	8001c8c <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002ce0:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8002ce6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002cea:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8002cec:	2300      	movs	r3, #0
 8002cee:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8002cf0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002cf4:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002d02:	2300      	movs	r3, #0
 8002d04:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8002d06:	2304      	movs	r3, #4
 8002d08:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8002d0a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8002d10:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d14:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002d16:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002d1a:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002d1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d20:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8002d22:	2380      	movs	r3, #128	; 0x80
 8002d24:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8002d26:	2300      	movs	r3, #0
 8002d28:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d36:	3318      	adds	r3, #24
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002d3e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002d42:	4b3e      	ldr	r3, [pc, #248]	; (8002e3c <ETH_MACDMAConfig+0x390>)
 8002d44:	4013      	ands	r3, r2
 8002d46:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002d4a:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8002d4c:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002d4e:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8002d50:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8002d52:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8002d54:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8002d56:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8002d58:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8002d5a:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8002d5c:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8002d5e:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8002d60:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8002d62:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8002d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8002d66:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8002d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8002d6a:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002d6c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002d70:	4313      	orrs	r3, r2
 8002d72:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d7e:	3318      	adds	r3, #24
 8002d80:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002d84:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d8e:	3318      	adds	r3, #24
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002d96:	2001      	movs	r0, #1
 8002d98:	f7fe ff78 	bl	8001c8c <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002da4:	3318      	adds	r3, #24
 8002da6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002daa:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002dac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8002dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002db0:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002db2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8002db4:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8002db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002db8:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8002dba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8002dbc:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 8002dbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002dc0:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8002dc2:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8002dc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 8002dc6:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002dd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002dd4:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002de4:	2001      	movs	r0, #1
 8002de6:	f7fe ff51 	bl	8001c8c <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002df2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002df6:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	699b      	ldr	r3, [r3, #24]
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d10f      	bne.n	8002e20 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e08:	331c      	adds	r3, #28
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002e14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e1c:	331c      	adds	r3, #28
 8002e1e:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	695b      	ldr	r3, [r3, #20]
 8002e24:	461a      	mov	r2, r3
 8002e26:	2100      	movs	r1, #0
 8002e28:	6878      	ldr	r0, [r7, #4]
 8002e2a:	f000 f809 	bl	8002e40 <ETH_MACAddressConfig>
}
 8002e2e:	bf00      	nop
 8002e30:	37c0      	adds	r7, #192	; 0xc0
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	ff20810f 	.word	0xff20810f
 8002e3c:	f8de3f23 	.word	0xf8de3f23

08002e40 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b087      	sub	sp, #28
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	60f8      	str	r0, [r7, #12]
 8002e48:	60b9      	str	r1, [r7, #8]
 8002e4a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	3305      	adds	r3, #5
 8002e50:	781b      	ldrb	r3, [r3, #0]
 8002e52:	021b      	lsls	r3, r3, #8
 8002e54:	687a      	ldr	r2, [r7, #4]
 8002e56:	3204      	adds	r2, #4
 8002e58:	7812      	ldrb	r2, [r2, #0]
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002e5e:	68ba      	ldr	r2, [r7, #8]
 8002e60:	4b11      	ldr	r3, [pc, #68]	; (8002ea8 <ETH_MACAddressConfig+0x68>)
 8002e62:	4413      	add	r3, r2
 8002e64:	461a      	mov	r2, r3
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	3303      	adds	r3, #3
 8002e6e:	781b      	ldrb	r3, [r3, #0]
 8002e70:	061a      	lsls	r2, r3, #24
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	3302      	adds	r3, #2
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	041b      	lsls	r3, r3, #16
 8002e7a:	431a      	orrs	r2, r3
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	3301      	adds	r3, #1
 8002e80:	781b      	ldrb	r3, [r3, #0]
 8002e82:	021b      	lsls	r3, r3, #8
 8002e84:	4313      	orrs	r3, r2
 8002e86:	687a      	ldr	r2, [r7, #4]
 8002e88:	7812      	ldrb	r2, [r2, #0]
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002e8e:	68ba      	ldr	r2, [r7, #8]
 8002e90:	4b06      	ldr	r3, [pc, #24]	; (8002eac <ETH_MACAddressConfig+0x6c>)
 8002e92:	4413      	add	r3, r2
 8002e94:	461a      	mov	r2, r3
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	6013      	str	r3, [r2, #0]
}
 8002e9a:	bf00      	nop
 8002e9c:	371c      	adds	r7, #28
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr
 8002ea6:	bf00      	nop
 8002ea8:	40028040 	.word	0x40028040
 8002eac:	40028044 	.word	0x40028044

08002eb0 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b084      	sub	sp, #16
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f042 0208 	orr.w	r2, r2, #8
 8002eca:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002ed4:	2001      	movs	r0, #1
 8002ed6:	f000 f8e9 	bl	80030ac <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	68fa      	ldr	r2, [r7, #12]
 8002ee0:	601a      	str	r2, [r3, #0]
}
 8002ee2:	bf00      	nop
 8002ee4:	3710      	adds	r7, #16
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}

08002eea <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002eea:	b580      	push	{r7, lr}
 8002eec:	b084      	sub	sp, #16
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f022 0208 	bic.w	r2, r2, #8
 8002f04:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002f0e:	2001      	movs	r0, #1
 8002f10:	f000 f8cc 	bl	80030ac <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	68fa      	ldr	r2, [r7, #12]
 8002f1a:	601a      	str	r2, [r3, #0]
}
 8002f1c:	bf00      	nop
 8002f1e:	3710      	adds	r7, #16
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}

08002f24 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b084      	sub	sp, #16
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f042 0204 	orr.w	r2, r2, #4
 8002f3e:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002f48:	2001      	movs	r0, #1
 8002f4a:	f000 f8af 	bl	80030ac <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	68fa      	ldr	r2, [r7, #12]
 8002f54:	601a      	str	r2, [r3, #0]
}
 8002f56:	bf00      	nop
 8002f58:	3710      	adds	r7, #16
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}

08002f5e <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002f5e:	b580      	push	{r7, lr}
 8002f60:	b084      	sub	sp, #16
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002f66:	2300      	movs	r3, #0
 8002f68:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f022 0204 	bic.w	r2, r2, #4
 8002f78:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002f82:	2001      	movs	r0, #1
 8002f84:	f000 f892 	bl	80030ac <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	68fa      	ldr	r2, [r7, #12]
 8002f8e:	601a      	str	r2, [r3, #0]
}
 8002f90:	bf00      	nop
 8002f92:	3710      	adds	r7, #16
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}

08002f98 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b083      	sub	sp, #12
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fa8:	3318      	adds	r3, #24
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002fb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fb8:	3318      	adds	r3, #24
 8002fba:	601a      	str	r2, [r3, #0]
}
 8002fbc:	bf00      	nop
 8002fbe:	370c      	adds	r7, #12
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr

08002fc8 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002fc8:	b480      	push	{r7}
 8002fca:	b083      	sub	sp, #12
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fd8:	3318      	adds	r3, #24
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002fe4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fe8:	3318      	adds	r3, #24
 8002fea:	601a      	str	r2, [r3, #0]
}
 8002fec:	bf00      	nop
 8002fee:	370c      	adds	r7, #12
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr

08002ff8 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8002ff8:	b480      	push	{r7}
 8002ffa:	b083      	sub	sp, #12
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003008:	3318      	adds	r3, #24
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f042 0202 	orr.w	r2, r2, #2
 8003014:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003018:	3318      	adds	r3, #24
 800301a:	601a      	str	r2, [r3, #0]
}
 800301c:	bf00      	nop
 800301e:	370c      	adds	r7, #12
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr

08003028 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003038:	3318      	adds	r3, #24
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f022 0202 	bic.w	r2, r2, #2
 8003044:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003048:	3318      	adds	r3, #24
 800304a:	601a      	str	r2, [r3, #0]
}
 800304c:	bf00      	nop
 800304e:	370c      	adds	r7, #12
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr

08003058 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b084      	sub	sp, #16
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8003060:	2300      	movs	r3, #0
 8003062:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800306c:	3318      	adds	r3, #24
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003078:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800307c:	3318      	adds	r3, #24
 800307e:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003088:	3318      	adds	r3, #24
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800308e:	2001      	movs	r0, #1
 8003090:	f000 f80c 	bl	80030ac <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	68fa      	ldr	r2, [r7, #12]
 800309a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800309e:	3318      	adds	r3, #24
 80030a0:	601a      	str	r2, [r3, #0]
}
 80030a2:	bf00      	nop
 80030a4:	3710      	adds	r7, #16
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
	...

080030ac <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b085      	sub	sp, #20
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80030b4:	4b0b      	ldr	r3, [pc, #44]	; (80030e4 <ETH_Delay+0x38>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a0b      	ldr	r2, [pc, #44]	; (80030e8 <ETH_Delay+0x3c>)
 80030ba:	fba2 2303 	umull	r2, r3, r2, r3
 80030be:	0a5b      	lsrs	r3, r3, #9
 80030c0:	687a      	ldr	r2, [r7, #4]
 80030c2:	fb02 f303 	mul.w	r3, r2, r3
 80030c6:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 80030c8:	bf00      	nop
  } 
  while (Delay --);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	1e5a      	subs	r2, r3, #1
 80030ce:	60fa      	str	r2, [r7, #12]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d1f9      	bne.n	80030c8 <ETH_Delay+0x1c>
}
 80030d4:	bf00      	nop
 80030d6:	bf00      	nop
 80030d8:	3714      	adds	r7, #20
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr
 80030e2:	bf00      	nop
 80030e4:	20000014 	.word	0x20000014
 80030e8:	10624dd3 	.word	0x10624dd3

080030ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b089      	sub	sp, #36	; 0x24
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
 80030f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80030f6:	2300      	movs	r3, #0
 80030f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80030fa:	2300      	movs	r3, #0
 80030fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80030fe:	2300      	movs	r3, #0
 8003100:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003102:	2300      	movs	r3, #0
 8003104:	61fb      	str	r3, [r7, #28]
 8003106:	e16b      	b.n	80033e0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003108:	2201      	movs	r2, #1
 800310a:	69fb      	ldr	r3, [r7, #28]
 800310c:	fa02 f303 	lsl.w	r3, r2, r3
 8003110:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	697a      	ldr	r2, [r7, #20]
 8003118:	4013      	ands	r3, r2
 800311a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800311c:	693a      	ldr	r2, [r7, #16]
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	429a      	cmp	r2, r3
 8003122:	f040 815a 	bne.w	80033da <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	f003 0303 	and.w	r3, r3, #3
 800312e:	2b01      	cmp	r3, #1
 8003130:	d005      	beq.n	800313e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800313a:	2b02      	cmp	r3, #2
 800313c:	d130      	bne.n	80031a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003144:	69fb      	ldr	r3, [r7, #28]
 8003146:	005b      	lsls	r3, r3, #1
 8003148:	2203      	movs	r2, #3
 800314a:	fa02 f303 	lsl.w	r3, r2, r3
 800314e:	43db      	mvns	r3, r3
 8003150:	69ba      	ldr	r2, [r7, #24]
 8003152:	4013      	ands	r3, r2
 8003154:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	68da      	ldr	r2, [r3, #12]
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	005b      	lsls	r3, r3, #1
 800315e:	fa02 f303 	lsl.w	r3, r2, r3
 8003162:	69ba      	ldr	r2, [r7, #24]
 8003164:	4313      	orrs	r3, r2
 8003166:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	69ba      	ldr	r2, [r7, #24]
 800316c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003174:	2201      	movs	r2, #1
 8003176:	69fb      	ldr	r3, [r7, #28]
 8003178:	fa02 f303 	lsl.w	r3, r2, r3
 800317c:	43db      	mvns	r3, r3
 800317e:	69ba      	ldr	r2, [r7, #24]
 8003180:	4013      	ands	r3, r2
 8003182:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	091b      	lsrs	r3, r3, #4
 800318a:	f003 0201 	and.w	r2, r3, #1
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	fa02 f303 	lsl.w	r3, r2, r3
 8003194:	69ba      	ldr	r2, [r7, #24]
 8003196:	4313      	orrs	r3, r2
 8003198:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	69ba      	ldr	r2, [r7, #24]
 800319e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	f003 0303 	and.w	r3, r3, #3
 80031a8:	2b03      	cmp	r3, #3
 80031aa:	d017      	beq.n	80031dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80031b2:	69fb      	ldr	r3, [r7, #28]
 80031b4:	005b      	lsls	r3, r3, #1
 80031b6:	2203      	movs	r2, #3
 80031b8:	fa02 f303 	lsl.w	r3, r2, r3
 80031bc:	43db      	mvns	r3, r3
 80031be:	69ba      	ldr	r2, [r7, #24]
 80031c0:	4013      	ands	r3, r2
 80031c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	689a      	ldr	r2, [r3, #8]
 80031c8:	69fb      	ldr	r3, [r7, #28]
 80031ca:	005b      	lsls	r3, r3, #1
 80031cc:	fa02 f303 	lsl.w	r3, r2, r3
 80031d0:	69ba      	ldr	r2, [r7, #24]
 80031d2:	4313      	orrs	r3, r2
 80031d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	69ba      	ldr	r2, [r7, #24]
 80031da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	f003 0303 	and.w	r3, r3, #3
 80031e4:	2b02      	cmp	r3, #2
 80031e6:	d123      	bne.n	8003230 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	08da      	lsrs	r2, r3, #3
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	3208      	adds	r2, #8
 80031f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80031f6:	69fb      	ldr	r3, [r7, #28]
 80031f8:	f003 0307 	and.w	r3, r3, #7
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	220f      	movs	r2, #15
 8003200:	fa02 f303 	lsl.w	r3, r2, r3
 8003204:	43db      	mvns	r3, r3
 8003206:	69ba      	ldr	r2, [r7, #24]
 8003208:	4013      	ands	r3, r2
 800320a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	691a      	ldr	r2, [r3, #16]
 8003210:	69fb      	ldr	r3, [r7, #28]
 8003212:	f003 0307 	and.w	r3, r3, #7
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	fa02 f303 	lsl.w	r3, r2, r3
 800321c:	69ba      	ldr	r2, [r7, #24]
 800321e:	4313      	orrs	r3, r2
 8003220:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003222:	69fb      	ldr	r3, [r7, #28]
 8003224:	08da      	lsrs	r2, r3, #3
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	3208      	adds	r2, #8
 800322a:	69b9      	ldr	r1, [r7, #24]
 800322c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003236:	69fb      	ldr	r3, [r7, #28]
 8003238:	005b      	lsls	r3, r3, #1
 800323a:	2203      	movs	r2, #3
 800323c:	fa02 f303 	lsl.w	r3, r2, r3
 8003240:	43db      	mvns	r3, r3
 8003242:	69ba      	ldr	r2, [r7, #24]
 8003244:	4013      	ands	r3, r2
 8003246:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	f003 0203 	and.w	r2, r3, #3
 8003250:	69fb      	ldr	r3, [r7, #28]
 8003252:	005b      	lsls	r3, r3, #1
 8003254:	fa02 f303 	lsl.w	r3, r2, r3
 8003258:	69ba      	ldr	r2, [r7, #24]
 800325a:	4313      	orrs	r3, r2
 800325c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	69ba      	ldr	r2, [r7, #24]
 8003262:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800326c:	2b00      	cmp	r3, #0
 800326e:	f000 80b4 	beq.w	80033da <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003272:	2300      	movs	r3, #0
 8003274:	60fb      	str	r3, [r7, #12]
 8003276:	4b60      	ldr	r3, [pc, #384]	; (80033f8 <HAL_GPIO_Init+0x30c>)
 8003278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800327a:	4a5f      	ldr	r2, [pc, #380]	; (80033f8 <HAL_GPIO_Init+0x30c>)
 800327c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003280:	6453      	str	r3, [r2, #68]	; 0x44
 8003282:	4b5d      	ldr	r3, [pc, #372]	; (80033f8 <HAL_GPIO_Init+0x30c>)
 8003284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003286:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800328a:	60fb      	str	r3, [r7, #12]
 800328c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800328e:	4a5b      	ldr	r2, [pc, #364]	; (80033fc <HAL_GPIO_Init+0x310>)
 8003290:	69fb      	ldr	r3, [r7, #28]
 8003292:	089b      	lsrs	r3, r3, #2
 8003294:	3302      	adds	r3, #2
 8003296:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800329a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800329c:	69fb      	ldr	r3, [r7, #28]
 800329e:	f003 0303 	and.w	r3, r3, #3
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	220f      	movs	r2, #15
 80032a6:	fa02 f303 	lsl.w	r3, r2, r3
 80032aa:	43db      	mvns	r3, r3
 80032ac:	69ba      	ldr	r2, [r7, #24]
 80032ae:	4013      	ands	r3, r2
 80032b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a52      	ldr	r2, [pc, #328]	; (8003400 <HAL_GPIO_Init+0x314>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d02b      	beq.n	8003312 <HAL_GPIO_Init+0x226>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4a51      	ldr	r2, [pc, #324]	; (8003404 <HAL_GPIO_Init+0x318>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d025      	beq.n	800330e <HAL_GPIO_Init+0x222>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4a50      	ldr	r2, [pc, #320]	; (8003408 <HAL_GPIO_Init+0x31c>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d01f      	beq.n	800330a <HAL_GPIO_Init+0x21e>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4a4f      	ldr	r2, [pc, #316]	; (800340c <HAL_GPIO_Init+0x320>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d019      	beq.n	8003306 <HAL_GPIO_Init+0x21a>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4a4e      	ldr	r2, [pc, #312]	; (8003410 <HAL_GPIO_Init+0x324>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d013      	beq.n	8003302 <HAL_GPIO_Init+0x216>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4a4d      	ldr	r2, [pc, #308]	; (8003414 <HAL_GPIO_Init+0x328>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d00d      	beq.n	80032fe <HAL_GPIO_Init+0x212>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4a4c      	ldr	r2, [pc, #304]	; (8003418 <HAL_GPIO_Init+0x32c>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d007      	beq.n	80032fa <HAL_GPIO_Init+0x20e>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a4b      	ldr	r2, [pc, #300]	; (800341c <HAL_GPIO_Init+0x330>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d101      	bne.n	80032f6 <HAL_GPIO_Init+0x20a>
 80032f2:	2307      	movs	r3, #7
 80032f4:	e00e      	b.n	8003314 <HAL_GPIO_Init+0x228>
 80032f6:	2308      	movs	r3, #8
 80032f8:	e00c      	b.n	8003314 <HAL_GPIO_Init+0x228>
 80032fa:	2306      	movs	r3, #6
 80032fc:	e00a      	b.n	8003314 <HAL_GPIO_Init+0x228>
 80032fe:	2305      	movs	r3, #5
 8003300:	e008      	b.n	8003314 <HAL_GPIO_Init+0x228>
 8003302:	2304      	movs	r3, #4
 8003304:	e006      	b.n	8003314 <HAL_GPIO_Init+0x228>
 8003306:	2303      	movs	r3, #3
 8003308:	e004      	b.n	8003314 <HAL_GPIO_Init+0x228>
 800330a:	2302      	movs	r3, #2
 800330c:	e002      	b.n	8003314 <HAL_GPIO_Init+0x228>
 800330e:	2301      	movs	r3, #1
 8003310:	e000      	b.n	8003314 <HAL_GPIO_Init+0x228>
 8003312:	2300      	movs	r3, #0
 8003314:	69fa      	ldr	r2, [r7, #28]
 8003316:	f002 0203 	and.w	r2, r2, #3
 800331a:	0092      	lsls	r2, r2, #2
 800331c:	4093      	lsls	r3, r2
 800331e:	69ba      	ldr	r2, [r7, #24]
 8003320:	4313      	orrs	r3, r2
 8003322:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003324:	4935      	ldr	r1, [pc, #212]	; (80033fc <HAL_GPIO_Init+0x310>)
 8003326:	69fb      	ldr	r3, [r7, #28]
 8003328:	089b      	lsrs	r3, r3, #2
 800332a:	3302      	adds	r3, #2
 800332c:	69ba      	ldr	r2, [r7, #24]
 800332e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003332:	4b3b      	ldr	r3, [pc, #236]	; (8003420 <HAL_GPIO_Init+0x334>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	43db      	mvns	r3, r3
 800333c:	69ba      	ldr	r2, [r7, #24]
 800333e:	4013      	ands	r3, r2
 8003340:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800334a:	2b00      	cmp	r3, #0
 800334c:	d003      	beq.n	8003356 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800334e:	69ba      	ldr	r2, [r7, #24]
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	4313      	orrs	r3, r2
 8003354:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003356:	4a32      	ldr	r2, [pc, #200]	; (8003420 <HAL_GPIO_Init+0x334>)
 8003358:	69bb      	ldr	r3, [r7, #24]
 800335a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800335c:	4b30      	ldr	r3, [pc, #192]	; (8003420 <HAL_GPIO_Init+0x334>)
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	43db      	mvns	r3, r3
 8003366:	69ba      	ldr	r2, [r7, #24]
 8003368:	4013      	ands	r3, r2
 800336a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003374:	2b00      	cmp	r3, #0
 8003376:	d003      	beq.n	8003380 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003378:	69ba      	ldr	r2, [r7, #24]
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	4313      	orrs	r3, r2
 800337e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003380:	4a27      	ldr	r2, [pc, #156]	; (8003420 <HAL_GPIO_Init+0x334>)
 8003382:	69bb      	ldr	r3, [r7, #24]
 8003384:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003386:	4b26      	ldr	r3, [pc, #152]	; (8003420 <HAL_GPIO_Init+0x334>)
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	43db      	mvns	r3, r3
 8003390:	69ba      	ldr	r2, [r7, #24]
 8003392:	4013      	ands	r3, r2
 8003394:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d003      	beq.n	80033aa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80033a2:	69ba      	ldr	r2, [r7, #24]
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	4313      	orrs	r3, r2
 80033a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80033aa:	4a1d      	ldr	r2, [pc, #116]	; (8003420 <HAL_GPIO_Init+0x334>)
 80033ac:	69bb      	ldr	r3, [r7, #24]
 80033ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80033b0:	4b1b      	ldr	r3, [pc, #108]	; (8003420 <HAL_GPIO_Init+0x334>)
 80033b2:	68db      	ldr	r3, [r3, #12]
 80033b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	43db      	mvns	r3, r3
 80033ba:	69ba      	ldr	r2, [r7, #24]
 80033bc:	4013      	ands	r3, r2
 80033be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d003      	beq.n	80033d4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80033cc:	69ba      	ldr	r2, [r7, #24]
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	4313      	orrs	r3, r2
 80033d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80033d4:	4a12      	ldr	r2, [pc, #72]	; (8003420 <HAL_GPIO_Init+0x334>)
 80033d6:	69bb      	ldr	r3, [r7, #24]
 80033d8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033da:	69fb      	ldr	r3, [r7, #28]
 80033dc:	3301      	adds	r3, #1
 80033de:	61fb      	str	r3, [r7, #28]
 80033e0:	69fb      	ldr	r3, [r7, #28]
 80033e2:	2b0f      	cmp	r3, #15
 80033e4:	f67f ae90 	bls.w	8003108 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80033e8:	bf00      	nop
 80033ea:	bf00      	nop
 80033ec:	3724      	adds	r7, #36	; 0x24
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr
 80033f6:	bf00      	nop
 80033f8:	40023800 	.word	0x40023800
 80033fc:	40013800 	.word	0x40013800
 8003400:	40020000 	.word	0x40020000
 8003404:	40020400 	.word	0x40020400
 8003408:	40020800 	.word	0x40020800
 800340c:	40020c00 	.word	0x40020c00
 8003410:	40021000 	.word	0x40021000
 8003414:	40021400 	.word	0x40021400
 8003418:	40021800 	.word	0x40021800
 800341c:	40021c00 	.word	0x40021c00
 8003420:	40013c00 	.word	0x40013c00

08003424 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b086      	sub	sp, #24
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d101      	bne.n	8003436 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e264      	b.n	8003900 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 0301 	and.w	r3, r3, #1
 800343e:	2b00      	cmp	r3, #0
 8003440:	d075      	beq.n	800352e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003442:	4ba3      	ldr	r3, [pc, #652]	; (80036d0 <HAL_RCC_OscConfig+0x2ac>)
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	f003 030c 	and.w	r3, r3, #12
 800344a:	2b04      	cmp	r3, #4
 800344c:	d00c      	beq.n	8003468 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800344e:	4ba0      	ldr	r3, [pc, #640]	; (80036d0 <HAL_RCC_OscConfig+0x2ac>)
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003456:	2b08      	cmp	r3, #8
 8003458:	d112      	bne.n	8003480 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800345a:	4b9d      	ldr	r3, [pc, #628]	; (80036d0 <HAL_RCC_OscConfig+0x2ac>)
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003462:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003466:	d10b      	bne.n	8003480 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003468:	4b99      	ldr	r3, [pc, #612]	; (80036d0 <HAL_RCC_OscConfig+0x2ac>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003470:	2b00      	cmp	r3, #0
 8003472:	d05b      	beq.n	800352c <HAL_RCC_OscConfig+0x108>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d157      	bne.n	800352c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	e23f      	b.n	8003900 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003488:	d106      	bne.n	8003498 <HAL_RCC_OscConfig+0x74>
 800348a:	4b91      	ldr	r3, [pc, #580]	; (80036d0 <HAL_RCC_OscConfig+0x2ac>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a90      	ldr	r2, [pc, #576]	; (80036d0 <HAL_RCC_OscConfig+0x2ac>)
 8003490:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003494:	6013      	str	r3, [r2, #0]
 8003496:	e01d      	b.n	80034d4 <HAL_RCC_OscConfig+0xb0>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034a0:	d10c      	bne.n	80034bc <HAL_RCC_OscConfig+0x98>
 80034a2:	4b8b      	ldr	r3, [pc, #556]	; (80036d0 <HAL_RCC_OscConfig+0x2ac>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a8a      	ldr	r2, [pc, #552]	; (80036d0 <HAL_RCC_OscConfig+0x2ac>)
 80034a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034ac:	6013      	str	r3, [r2, #0]
 80034ae:	4b88      	ldr	r3, [pc, #544]	; (80036d0 <HAL_RCC_OscConfig+0x2ac>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a87      	ldr	r2, [pc, #540]	; (80036d0 <HAL_RCC_OscConfig+0x2ac>)
 80034b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034b8:	6013      	str	r3, [r2, #0]
 80034ba:	e00b      	b.n	80034d4 <HAL_RCC_OscConfig+0xb0>
 80034bc:	4b84      	ldr	r3, [pc, #528]	; (80036d0 <HAL_RCC_OscConfig+0x2ac>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a83      	ldr	r2, [pc, #524]	; (80036d0 <HAL_RCC_OscConfig+0x2ac>)
 80034c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034c6:	6013      	str	r3, [r2, #0]
 80034c8:	4b81      	ldr	r3, [pc, #516]	; (80036d0 <HAL_RCC_OscConfig+0x2ac>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a80      	ldr	r2, [pc, #512]	; (80036d0 <HAL_RCC_OscConfig+0x2ac>)
 80034ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d013      	beq.n	8003504 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034dc:	f7fe fbca 	bl	8001c74 <HAL_GetTick>
 80034e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034e2:	e008      	b.n	80034f6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034e4:	f7fe fbc6 	bl	8001c74 <HAL_GetTick>
 80034e8:	4602      	mov	r2, r0
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	1ad3      	subs	r3, r2, r3
 80034ee:	2b64      	cmp	r3, #100	; 0x64
 80034f0:	d901      	bls.n	80034f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80034f2:	2303      	movs	r3, #3
 80034f4:	e204      	b.n	8003900 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034f6:	4b76      	ldr	r3, [pc, #472]	; (80036d0 <HAL_RCC_OscConfig+0x2ac>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d0f0      	beq.n	80034e4 <HAL_RCC_OscConfig+0xc0>
 8003502:	e014      	b.n	800352e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003504:	f7fe fbb6 	bl	8001c74 <HAL_GetTick>
 8003508:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800350a:	e008      	b.n	800351e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800350c:	f7fe fbb2 	bl	8001c74 <HAL_GetTick>
 8003510:	4602      	mov	r2, r0
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	2b64      	cmp	r3, #100	; 0x64
 8003518:	d901      	bls.n	800351e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800351a:	2303      	movs	r3, #3
 800351c:	e1f0      	b.n	8003900 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800351e:	4b6c      	ldr	r3, [pc, #432]	; (80036d0 <HAL_RCC_OscConfig+0x2ac>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003526:	2b00      	cmp	r3, #0
 8003528:	d1f0      	bne.n	800350c <HAL_RCC_OscConfig+0xe8>
 800352a:	e000      	b.n	800352e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800352c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 0302 	and.w	r3, r3, #2
 8003536:	2b00      	cmp	r3, #0
 8003538:	d063      	beq.n	8003602 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800353a:	4b65      	ldr	r3, [pc, #404]	; (80036d0 <HAL_RCC_OscConfig+0x2ac>)
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	f003 030c 	and.w	r3, r3, #12
 8003542:	2b00      	cmp	r3, #0
 8003544:	d00b      	beq.n	800355e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003546:	4b62      	ldr	r3, [pc, #392]	; (80036d0 <HAL_RCC_OscConfig+0x2ac>)
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800354e:	2b08      	cmp	r3, #8
 8003550:	d11c      	bne.n	800358c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003552:	4b5f      	ldr	r3, [pc, #380]	; (80036d0 <HAL_RCC_OscConfig+0x2ac>)
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800355a:	2b00      	cmp	r3, #0
 800355c:	d116      	bne.n	800358c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800355e:	4b5c      	ldr	r3, [pc, #368]	; (80036d0 <HAL_RCC_OscConfig+0x2ac>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 0302 	and.w	r3, r3, #2
 8003566:	2b00      	cmp	r3, #0
 8003568:	d005      	beq.n	8003576 <HAL_RCC_OscConfig+0x152>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	68db      	ldr	r3, [r3, #12]
 800356e:	2b01      	cmp	r3, #1
 8003570:	d001      	beq.n	8003576 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e1c4      	b.n	8003900 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003576:	4b56      	ldr	r3, [pc, #344]	; (80036d0 <HAL_RCC_OscConfig+0x2ac>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	691b      	ldr	r3, [r3, #16]
 8003582:	00db      	lsls	r3, r3, #3
 8003584:	4952      	ldr	r1, [pc, #328]	; (80036d0 <HAL_RCC_OscConfig+0x2ac>)
 8003586:	4313      	orrs	r3, r2
 8003588:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800358a:	e03a      	b.n	8003602 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d020      	beq.n	80035d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003594:	4b4f      	ldr	r3, [pc, #316]	; (80036d4 <HAL_RCC_OscConfig+0x2b0>)
 8003596:	2201      	movs	r2, #1
 8003598:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800359a:	f7fe fb6b 	bl	8001c74 <HAL_GetTick>
 800359e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035a0:	e008      	b.n	80035b4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035a2:	f7fe fb67 	bl	8001c74 <HAL_GetTick>
 80035a6:	4602      	mov	r2, r0
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	1ad3      	subs	r3, r2, r3
 80035ac:	2b02      	cmp	r3, #2
 80035ae:	d901      	bls.n	80035b4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80035b0:	2303      	movs	r3, #3
 80035b2:	e1a5      	b.n	8003900 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035b4:	4b46      	ldr	r3, [pc, #280]	; (80036d0 <HAL_RCC_OscConfig+0x2ac>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 0302 	and.w	r3, r3, #2
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d0f0      	beq.n	80035a2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035c0:	4b43      	ldr	r3, [pc, #268]	; (80036d0 <HAL_RCC_OscConfig+0x2ac>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	691b      	ldr	r3, [r3, #16]
 80035cc:	00db      	lsls	r3, r3, #3
 80035ce:	4940      	ldr	r1, [pc, #256]	; (80036d0 <HAL_RCC_OscConfig+0x2ac>)
 80035d0:	4313      	orrs	r3, r2
 80035d2:	600b      	str	r3, [r1, #0]
 80035d4:	e015      	b.n	8003602 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035d6:	4b3f      	ldr	r3, [pc, #252]	; (80036d4 <HAL_RCC_OscConfig+0x2b0>)
 80035d8:	2200      	movs	r2, #0
 80035da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035dc:	f7fe fb4a 	bl	8001c74 <HAL_GetTick>
 80035e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035e2:	e008      	b.n	80035f6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035e4:	f7fe fb46 	bl	8001c74 <HAL_GetTick>
 80035e8:	4602      	mov	r2, r0
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	2b02      	cmp	r3, #2
 80035f0:	d901      	bls.n	80035f6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80035f2:	2303      	movs	r3, #3
 80035f4:	e184      	b.n	8003900 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035f6:	4b36      	ldr	r3, [pc, #216]	; (80036d0 <HAL_RCC_OscConfig+0x2ac>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 0302 	and.w	r3, r3, #2
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d1f0      	bne.n	80035e4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 0308 	and.w	r3, r3, #8
 800360a:	2b00      	cmp	r3, #0
 800360c:	d030      	beq.n	8003670 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	695b      	ldr	r3, [r3, #20]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d016      	beq.n	8003644 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003616:	4b30      	ldr	r3, [pc, #192]	; (80036d8 <HAL_RCC_OscConfig+0x2b4>)
 8003618:	2201      	movs	r2, #1
 800361a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800361c:	f7fe fb2a 	bl	8001c74 <HAL_GetTick>
 8003620:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003622:	e008      	b.n	8003636 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003624:	f7fe fb26 	bl	8001c74 <HAL_GetTick>
 8003628:	4602      	mov	r2, r0
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	2b02      	cmp	r3, #2
 8003630:	d901      	bls.n	8003636 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003632:	2303      	movs	r3, #3
 8003634:	e164      	b.n	8003900 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003636:	4b26      	ldr	r3, [pc, #152]	; (80036d0 <HAL_RCC_OscConfig+0x2ac>)
 8003638:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800363a:	f003 0302 	and.w	r3, r3, #2
 800363e:	2b00      	cmp	r3, #0
 8003640:	d0f0      	beq.n	8003624 <HAL_RCC_OscConfig+0x200>
 8003642:	e015      	b.n	8003670 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003644:	4b24      	ldr	r3, [pc, #144]	; (80036d8 <HAL_RCC_OscConfig+0x2b4>)
 8003646:	2200      	movs	r2, #0
 8003648:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800364a:	f7fe fb13 	bl	8001c74 <HAL_GetTick>
 800364e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003650:	e008      	b.n	8003664 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003652:	f7fe fb0f 	bl	8001c74 <HAL_GetTick>
 8003656:	4602      	mov	r2, r0
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	1ad3      	subs	r3, r2, r3
 800365c:	2b02      	cmp	r3, #2
 800365e:	d901      	bls.n	8003664 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003660:	2303      	movs	r3, #3
 8003662:	e14d      	b.n	8003900 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003664:	4b1a      	ldr	r3, [pc, #104]	; (80036d0 <HAL_RCC_OscConfig+0x2ac>)
 8003666:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003668:	f003 0302 	and.w	r3, r3, #2
 800366c:	2b00      	cmp	r3, #0
 800366e:	d1f0      	bne.n	8003652 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 0304 	and.w	r3, r3, #4
 8003678:	2b00      	cmp	r3, #0
 800367a:	f000 80a0 	beq.w	80037be <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800367e:	2300      	movs	r3, #0
 8003680:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003682:	4b13      	ldr	r3, [pc, #76]	; (80036d0 <HAL_RCC_OscConfig+0x2ac>)
 8003684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003686:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800368a:	2b00      	cmp	r3, #0
 800368c:	d10f      	bne.n	80036ae <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800368e:	2300      	movs	r3, #0
 8003690:	60bb      	str	r3, [r7, #8]
 8003692:	4b0f      	ldr	r3, [pc, #60]	; (80036d0 <HAL_RCC_OscConfig+0x2ac>)
 8003694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003696:	4a0e      	ldr	r2, [pc, #56]	; (80036d0 <HAL_RCC_OscConfig+0x2ac>)
 8003698:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800369c:	6413      	str	r3, [r2, #64]	; 0x40
 800369e:	4b0c      	ldr	r3, [pc, #48]	; (80036d0 <HAL_RCC_OscConfig+0x2ac>)
 80036a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036a6:	60bb      	str	r3, [r7, #8]
 80036a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036aa:	2301      	movs	r3, #1
 80036ac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036ae:	4b0b      	ldr	r3, [pc, #44]	; (80036dc <HAL_RCC_OscConfig+0x2b8>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d121      	bne.n	80036fe <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036ba:	4b08      	ldr	r3, [pc, #32]	; (80036dc <HAL_RCC_OscConfig+0x2b8>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a07      	ldr	r2, [pc, #28]	; (80036dc <HAL_RCC_OscConfig+0x2b8>)
 80036c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036c6:	f7fe fad5 	bl	8001c74 <HAL_GetTick>
 80036ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036cc:	e011      	b.n	80036f2 <HAL_RCC_OscConfig+0x2ce>
 80036ce:	bf00      	nop
 80036d0:	40023800 	.word	0x40023800
 80036d4:	42470000 	.word	0x42470000
 80036d8:	42470e80 	.word	0x42470e80
 80036dc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036e0:	f7fe fac8 	bl	8001c74 <HAL_GetTick>
 80036e4:	4602      	mov	r2, r0
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	1ad3      	subs	r3, r2, r3
 80036ea:	2b02      	cmp	r3, #2
 80036ec:	d901      	bls.n	80036f2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80036ee:	2303      	movs	r3, #3
 80036f0:	e106      	b.n	8003900 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036f2:	4b85      	ldr	r3, [pc, #532]	; (8003908 <HAL_RCC_OscConfig+0x4e4>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d0f0      	beq.n	80036e0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	2b01      	cmp	r3, #1
 8003704:	d106      	bne.n	8003714 <HAL_RCC_OscConfig+0x2f0>
 8003706:	4b81      	ldr	r3, [pc, #516]	; (800390c <HAL_RCC_OscConfig+0x4e8>)
 8003708:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800370a:	4a80      	ldr	r2, [pc, #512]	; (800390c <HAL_RCC_OscConfig+0x4e8>)
 800370c:	f043 0301 	orr.w	r3, r3, #1
 8003710:	6713      	str	r3, [r2, #112]	; 0x70
 8003712:	e01c      	b.n	800374e <HAL_RCC_OscConfig+0x32a>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	2b05      	cmp	r3, #5
 800371a:	d10c      	bne.n	8003736 <HAL_RCC_OscConfig+0x312>
 800371c:	4b7b      	ldr	r3, [pc, #492]	; (800390c <HAL_RCC_OscConfig+0x4e8>)
 800371e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003720:	4a7a      	ldr	r2, [pc, #488]	; (800390c <HAL_RCC_OscConfig+0x4e8>)
 8003722:	f043 0304 	orr.w	r3, r3, #4
 8003726:	6713      	str	r3, [r2, #112]	; 0x70
 8003728:	4b78      	ldr	r3, [pc, #480]	; (800390c <HAL_RCC_OscConfig+0x4e8>)
 800372a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800372c:	4a77      	ldr	r2, [pc, #476]	; (800390c <HAL_RCC_OscConfig+0x4e8>)
 800372e:	f043 0301 	orr.w	r3, r3, #1
 8003732:	6713      	str	r3, [r2, #112]	; 0x70
 8003734:	e00b      	b.n	800374e <HAL_RCC_OscConfig+0x32a>
 8003736:	4b75      	ldr	r3, [pc, #468]	; (800390c <HAL_RCC_OscConfig+0x4e8>)
 8003738:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800373a:	4a74      	ldr	r2, [pc, #464]	; (800390c <HAL_RCC_OscConfig+0x4e8>)
 800373c:	f023 0301 	bic.w	r3, r3, #1
 8003740:	6713      	str	r3, [r2, #112]	; 0x70
 8003742:	4b72      	ldr	r3, [pc, #456]	; (800390c <HAL_RCC_OscConfig+0x4e8>)
 8003744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003746:	4a71      	ldr	r2, [pc, #452]	; (800390c <HAL_RCC_OscConfig+0x4e8>)
 8003748:	f023 0304 	bic.w	r3, r3, #4
 800374c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d015      	beq.n	8003782 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003756:	f7fe fa8d 	bl	8001c74 <HAL_GetTick>
 800375a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800375c:	e00a      	b.n	8003774 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800375e:	f7fe fa89 	bl	8001c74 <HAL_GetTick>
 8003762:	4602      	mov	r2, r0
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	1ad3      	subs	r3, r2, r3
 8003768:	f241 3288 	movw	r2, #5000	; 0x1388
 800376c:	4293      	cmp	r3, r2
 800376e:	d901      	bls.n	8003774 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003770:	2303      	movs	r3, #3
 8003772:	e0c5      	b.n	8003900 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003774:	4b65      	ldr	r3, [pc, #404]	; (800390c <HAL_RCC_OscConfig+0x4e8>)
 8003776:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003778:	f003 0302 	and.w	r3, r3, #2
 800377c:	2b00      	cmp	r3, #0
 800377e:	d0ee      	beq.n	800375e <HAL_RCC_OscConfig+0x33a>
 8003780:	e014      	b.n	80037ac <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003782:	f7fe fa77 	bl	8001c74 <HAL_GetTick>
 8003786:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003788:	e00a      	b.n	80037a0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800378a:	f7fe fa73 	bl	8001c74 <HAL_GetTick>
 800378e:	4602      	mov	r2, r0
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	1ad3      	subs	r3, r2, r3
 8003794:	f241 3288 	movw	r2, #5000	; 0x1388
 8003798:	4293      	cmp	r3, r2
 800379a:	d901      	bls.n	80037a0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800379c:	2303      	movs	r3, #3
 800379e:	e0af      	b.n	8003900 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037a0:	4b5a      	ldr	r3, [pc, #360]	; (800390c <HAL_RCC_OscConfig+0x4e8>)
 80037a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037a4:	f003 0302 	and.w	r3, r3, #2
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d1ee      	bne.n	800378a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80037ac:	7dfb      	ldrb	r3, [r7, #23]
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	d105      	bne.n	80037be <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037b2:	4b56      	ldr	r3, [pc, #344]	; (800390c <HAL_RCC_OscConfig+0x4e8>)
 80037b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b6:	4a55      	ldr	r2, [pc, #340]	; (800390c <HAL_RCC_OscConfig+0x4e8>)
 80037b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037bc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	699b      	ldr	r3, [r3, #24]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	f000 809b 	beq.w	80038fe <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80037c8:	4b50      	ldr	r3, [pc, #320]	; (800390c <HAL_RCC_OscConfig+0x4e8>)
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	f003 030c 	and.w	r3, r3, #12
 80037d0:	2b08      	cmp	r3, #8
 80037d2:	d05c      	beq.n	800388e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	699b      	ldr	r3, [r3, #24]
 80037d8:	2b02      	cmp	r3, #2
 80037da:	d141      	bne.n	8003860 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037dc:	4b4c      	ldr	r3, [pc, #304]	; (8003910 <HAL_RCC_OscConfig+0x4ec>)
 80037de:	2200      	movs	r2, #0
 80037e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037e2:	f7fe fa47 	bl	8001c74 <HAL_GetTick>
 80037e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037e8:	e008      	b.n	80037fc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037ea:	f7fe fa43 	bl	8001c74 <HAL_GetTick>
 80037ee:	4602      	mov	r2, r0
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	1ad3      	subs	r3, r2, r3
 80037f4:	2b02      	cmp	r3, #2
 80037f6:	d901      	bls.n	80037fc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80037f8:	2303      	movs	r3, #3
 80037fa:	e081      	b.n	8003900 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037fc:	4b43      	ldr	r3, [pc, #268]	; (800390c <HAL_RCC_OscConfig+0x4e8>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003804:	2b00      	cmp	r3, #0
 8003806:	d1f0      	bne.n	80037ea <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	69da      	ldr	r2, [r3, #28]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6a1b      	ldr	r3, [r3, #32]
 8003810:	431a      	orrs	r2, r3
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003816:	019b      	lsls	r3, r3, #6
 8003818:	431a      	orrs	r2, r3
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800381e:	085b      	lsrs	r3, r3, #1
 8003820:	3b01      	subs	r3, #1
 8003822:	041b      	lsls	r3, r3, #16
 8003824:	431a      	orrs	r2, r3
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800382a:	061b      	lsls	r3, r3, #24
 800382c:	4937      	ldr	r1, [pc, #220]	; (800390c <HAL_RCC_OscConfig+0x4e8>)
 800382e:	4313      	orrs	r3, r2
 8003830:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003832:	4b37      	ldr	r3, [pc, #220]	; (8003910 <HAL_RCC_OscConfig+0x4ec>)
 8003834:	2201      	movs	r2, #1
 8003836:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003838:	f7fe fa1c 	bl	8001c74 <HAL_GetTick>
 800383c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800383e:	e008      	b.n	8003852 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003840:	f7fe fa18 	bl	8001c74 <HAL_GetTick>
 8003844:	4602      	mov	r2, r0
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	2b02      	cmp	r3, #2
 800384c:	d901      	bls.n	8003852 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800384e:	2303      	movs	r3, #3
 8003850:	e056      	b.n	8003900 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003852:	4b2e      	ldr	r3, [pc, #184]	; (800390c <HAL_RCC_OscConfig+0x4e8>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800385a:	2b00      	cmp	r3, #0
 800385c:	d0f0      	beq.n	8003840 <HAL_RCC_OscConfig+0x41c>
 800385e:	e04e      	b.n	80038fe <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003860:	4b2b      	ldr	r3, [pc, #172]	; (8003910 <HAL_RCC_OscConfig+0x4ec>)
 8003862:	2200      	movs	r2, #0
 8003864:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003866:	f7fe fa05 	bl	8001c74 <HAL_GetTick>
 800386a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800386c:	e008      	b.n	8003880 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800386e:	f7fe fa01 	bl	8001c74 <HAL_GetTick>
 8003872:	4602      	mov	r2, r0
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	1ad3      	subs	r3, r2, r3
 8003878:	2b02      	cmp	r3, #2
 800387a:	d901      	bls.n	8003880 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800387c:	2303      	movs	r3, #3
 800387e:	e03f      	b.n	8003900 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003880:	4b22      	ldr	r3, [pc, #136]	; (800390c <HAL_RCC_OscConfig+0x4e8>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003888:	2b00      	cmp	r3, #0
 800388a:	d1f0      	bne.n	800386e <HAL_RCC_OscConfig+0x44a>
 800388c:	e037      	b.n	80038fe <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	699b      	ldr	r3, [r3, #24]
 8003892:	2b01      	cmp	r3, #1
 8003894:	d101      	bne.n	800389a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	e032      	b.n	8003900 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800389a:	4b1c      	ldr	r3, [pc, #112]	; (800390c <HAL_RCC_OscConfig+0x4e8>)
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	699b      	ldr	r3, [r3, #24]
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d028      	beq.n	80038fa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038b2:	429a      	cmp	r2, r3
 80038b4:	d121      	bne.n	80038fa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d11a      	bne.n	80038fa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80038c4:	68fa      	ldr	r2, [r7, #12]
 80038c6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80038ca:	4013      	ands	r3, r2
 80038cc:	687a      	ldr	r2, [r7, #4]
 80038ce:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80038d0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d111      	bne.n	80038fa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038e0:	085b      	lsrs	r3, r3, #1
 80038e2:	3b01      	subs	r3, #1
 80038e4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d107      	bne.n	80038fa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038f4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038f6:	429a      	cmp	r2, r3
 80038f8:	d001      	beq.n	80038fe <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e000      	b.n	8003900 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80038fe:	2300      	movs	r3, #0
}
 8003900:	4618      	mov	r0, r3
 8003902:	3718      	adds	r7, #24
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}
 8003908:	40007000 	.word	0x40007000
 800390c:	40023800 	.word	0x40023800
 8003910:	42470060 	.word	0x42470060

08003914 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b084      	sub	sp, #16
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
 800391c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d101      	bne.n	8003928 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	e0cc      	b.n	8003ac2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003928:	4b68      	ldr	r3, [pc, #416]	; (8003acc <HAL_RCC_ClockConfig+0x1b8>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 0307 	and.w	r3, r3, #7
 8003930:	683a      	ldr	r2, [r7, #0]
 8003932:	429a      	cmp	r2, r3
 8003934:	d90c      	bls.n	8003950 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003936:	4b65      	ldr	r3, [pc, #404]	; (8003acc <HAL_RCC_ClockConfig+0x1b8>)
 8003938:	683a      	ldr	r2, [r7, #0]
 800393a:	b2d2      	uxtb	r2, r2
 800393c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800393e:	4b63      	ldr	r3, [pc, #396]	; (8003acc <HAL_RCC_ClockConfig+0x1b8>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 0307 	and.w	r3, r3, #7
 8003946:	683a      	ldr	r2, [r7, #0]
 8003948:	429a      	cmp	r2, r3
 800394a:	d001      	beq.n	8003950 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	e0b8      	b.n	8003ac2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 0302 	and.w	r3, r3, #2
 8003958:	2b00      	cmp	r3, #0
 800395a:	d020      	beq.n	800399e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 0304 	and.w	r3, r3, #4
 8003964:	2b00      	cmp	r3, #0
 8003966:	d005      	beq.n	8003974 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003968:	4b59      	ldr	r3, [pc, #356]	; (8003ad0 <HAL_RCC_ClockConfig+0x1bc>)
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	4a58      	ldr	r2, [pc, #352]	; (8003ad0 <HAL_RCC_ClockConfig+0x1bc>)
 800396e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003972:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 0308 	and.w	r3, r3, #8
 800397c:	2b00      	cmp	r3, #0
 800397e:	d005      	beq.n	800398c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003980:	4b53      	ldr	r3, [pc, #332]	; (8003ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	4a52      	ldr	r2, [pc, #328]	; (8003ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8003986:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800398a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800398c:	4b50      	ldr	r3, [pc, #320]	; (8003ad0 <HAL_RCC_ClockConfig+0x1bc>)
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	494d      	ldr	r1, [pc, #308]	; (8003ad0 <HAL_RCC_ClockConfig+0x1bc>)
 800399a:	4313      	orrs	r3, r2
 800399c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 0301 	and.w	r3, r3, #1
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d044      	beq.n	8003a34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d107      	bne.n	80039c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039b2:	4b47      	ldr	r3, [pc, #284]	; (8003ad0 <HAL_RCC_ClockConfig+0x1bc>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d119      	bne.n	80039f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	e07f      	b.n	8003ac2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	2b02      	cmp	r3, #2
 80039c8:	d003      	beq.n	80039d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039ce:	2b03      	cmp	r3, #3
 80039d0:	d107      	bne.n	80039e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039d2:	4b3f      	ldr	r3, [pc, #252]	; (8003ad0 <HAL_RCC_ClockConfig+0x1bc>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d109      	bne.n	80039f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	e06f      	b.n	8003ac2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039e2:	4b3b      	ldr	r3, [pc, #236]	; (8003ad0 <HAL_RCC_ClockConfig+0x1bc>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 0302 	and.w	r3, r3, #2
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d101      	bne.n	80039f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	e067      	b.n	8003ac2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039f2:	4b37      	ldr	r3, [pc, #220]	; (8003ad0 <HAL_RCC_ClockConfig+0x1bc>)
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	f023 0203 	bic.w	r2, r3, #3
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	4934      	ldr	r1, [pc, #208]	; (8003ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a00:	4313      	orrs	r3, r2
 8003a02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a04:	f7fe f936 	bl	8001c74 <HAL_GetTick>
 8003a08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a0a:	e00a      	b.n	8003a22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a0c:	f7fe f932 	bl	8001c74 <HAL_GetTick>
 8003a10:	4602      	mov	r2, r0
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	1ad3      	subs	r3, r2, r3
 8003a16:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d901      	bls.n	8003a22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a1e:	2303      	movs	r3, #3
 8003a20:	e04f      	b.n	8003ac2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a22:	4b2b      	ldr	r3, [pc, #172]	; (8003ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	f003 020c 	and.w	r2, r3, #12
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	429a      	cmp	r2, r3
 8003a32:	d1eb      	bne.n	8003a0c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a34:	4b25      	ldr	r3, [pc, #148]	; (8003acc <HAL_RCC_ClockConfig+0x1b8>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 0307 	and.w	r3, r3, #7
 8003a3c:	683a      	ldr	r2, [r7, #0]
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	d20c      	bcs.n	8003a5c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a42:	4b22      	ldr	r3, [pc, #136]	; (8003acc <HAL_RCC_ClockConfig+0x1b8>)
 8003a44:	683a      	ldr	r2, [r7, #0]
 8003a46:	b2d2      	uxtb	r2, r2
 8003a48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a4a:	4b20      	ldr	r3, [pc, #128]	; (8003acc <HAL_RCC_ClockConfig+0x1b8>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 0307 	and.w	r3, r3, #7
 8003a52:	683a      	ldr	r2, [r7, #0]
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d001      	beq.n	8003a5c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e032      	b.n	8003ac2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 0304 	and.w	r3, r3, #4
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d008      	beq.n	8003a7a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a68:	4b19      	ldr	r3, [pc, #100]	; (8003ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	68db      	ldr	r3, [r3, #12]
 8003a74:	4916      	ldr	r1, [pc, #88]	; (8003ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a76:	4313      	orrs	r3, r2
 8003a78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 0308 	and.w	r3, r3, #8
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d009      	beq.n	8003a9a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a86:	4b12      	ldr	r3, [pc, #72]	; (8003ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	691b      	ldr	r3, [r3, #16]
 8003a92:	00db      	lsls	r3, r3, #3
 8003a94:	490e      	ldr	r1, [pc, #56]	; (8003ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a96:	4313      	orrs	r3, r2
 8003a98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a9a:	f000 f821 	bl	8003ae0 <HAL_RCC_GetSysClockFreq>
 8003a9e:	4602      	mov	r2, r0
 8003aa0:	4b0b      	ldr	r3, [pc, #44]	; (8003ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	091b      	lsrs	r3, r3, #4
 8003aa6:	f003 030f 	and.w	r3, r3, #15
 8003aaa:	490a      	ldr	r1, [pc, #40]	; (8003ad4 <HAL_RCC_ClockConfig+0x1c0>)
 8003aac:	5ccb      	ldrb	r3, [r1, r3]
 8003aae:	fa22 f303 	lsr.w	r3, r2, r3
 8003ab2:	4a09      	ldr	r2, [pc, #36]	; (8003ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8003ab4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003ab6:	4b09      	ldr	r3, [pc, #36]	; (8003adc <HAL_RCC_ClockConfig+0x1c8>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4618      	mov	r0, r3
 8003abc:	f7fe f896 	bl	8001bec <HAL_InitTick>

  return HAL_OK;
 8003ac0:	2300      	movs	r3, #0
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3710      	adds	r7, #16
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}
 8003aca:	bf00      	nop
 8003acc:	40023c00 	.word	0x40023c00
 8003ad0:	40023800 	.word	0x40023800
 8003ad4:	080164bc 	.word	0x080164bc
 8003ad8:	20000014 	.word	0x20000014
 8003adc:	20000018 	.word	0x20000018

08003ae0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ae0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003ae4:	b084      	sub	sp, #16
 8003ae6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	607b      	str	r3, [r7, #4]
 8003aec:	2300      	movs	r3, #0
 8003aee:	60fb      	str	r3, [r7, #12]
 8003af0:	2300      	movs	r3, #0
 8003af2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003af4:	2300      	movs	r3, #0
 8003af6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003af8:	4b67      	ldr	r3, [pc, #412]	; (8003c98 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	f003 030c 	and.w	r3, r3, #12
 8003b00:	2b08      	cmp	r3, #8
 8003b02:	d00d      	beq.n	8003b20 <HAL_RCC_GetSysClockFreq+0x40>
 8003b04:	2b08      	cmp	r3, #8
 8003b06:	f200 80bd 	bhi.w	8003c84 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d002      	beq.n	8003b14 <HAL_RCC_GetSysClockFreq+0x34>
 8003b0e:	2b04      	cmp	r3, #4
 8003b10:	d003      	beq.n	8003b1a <HAL_RCC_GetSysClockFreq+0x3a>
 8003b12:	e0b7      	b.n	8003c84 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b14:	4b61      	ldr	r3, [pc, #388]	; (8003c9c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003b16:	60bb      	str	r3, [r7, #8]
       break;
 8003b18:	e0b7      	b.n	8003c8a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b1a:	4b61      	ldr	r3, [pc, #388]	; (8003ca0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003b1c:	60bb      	str	r3, [r7, #8]
      break;
 8003b1e:	e0b4      	b.n	8003c8a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b20:	4b5d      	ldr	r3, [pc, #372]	; (8003c98 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b28:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b2a:	4b5b      	ldr	r3, [pc, #364]	; (8003c98 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d04d      	beq.n	8003bd2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b36:	4b58      	ldr	r3, [pc, #352]	; (8003c98 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	099b      	lsrs	r3, r3, #6
 8003b3c:	461a      	mov	r2, r3
 8003b3e:	f04f 0300 	mov.w	r3, #0
 8003b42:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003b46:	f04f 0100 	mov.w	r1, #0
 8003b4a:	ea02 0800 	and.w	r8, r2, r0
 8003b4e:	ea03 0901 	and.w	r9, r3, r1
 8003b52:	4640      	mov	r0, r8
 8003b54:	4649      	mov	r1, r9
 8003b56:	f04f 0200 	mov.w	r2, #0
 8003b5a:	f04f 0300 	mov.w	r3, #0
 8003b5e:	014b      	lsls	r3, r1, #5
 8003b60:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003b64:	0142      	lsls	r2, r0, #5
 8003b66:	4610      	mov	r0, r2
 8003b68:	4619      	mov	r1, r3
 8003b6a:	ebb0 0008 	subs.w	r0, r0, r8
 8003b6e:	eb61 0109 	sbc.w	r1, r1, r9
 8003b72:	f04f 0200 	mov.w	r2, #0
 8003b76:	f04f 0300 	mov.w	r3, #0
 8003b7a:	018b      	lsls	r3, r1, #6
 8003b7c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003b80:	0182      	lsls	r2, r0, #6
 8003b82:	1a12      	subs	r2, r2, r0
 8003b84:	eb63 0301 	sbc.w	r3, r3, r1
 8003b88:	f04f 0000 	mov.w	r0, #0
 8003b8c:	f04f 0100 	mov.w	r1, #0
 8003b90:	00d9      	lsls	r1, r3, #3
 8003b92:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003b96:	00d0      	lsls	r0, r2, #3
 8003b98:	4602      	mov	r2, r0
 8003b9a:	460b      	mov	r3, r1
 8003b9c:	eb12 0208 	adds.w	r2, r2, r8
 8003ba0:	eb43 0309 	adc.w	r3, r3, r9
 8003ba4:	f04f 0000 	mov.w	r0, #0
 8003ba8:	f04f 0100 	mov.w	r1, #0
 8003bac:	0259      	lsls	r1, r3, #9
 8003bae:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003bb2:	0250      	lsls	r0, r2, #9
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	460b      	mov	r3, r1
 8003bb8:	4610      	mov	r0, r2
 8003bba:	4619      	mov	r1, r3
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	461a      	mov	r2, r3
 8003bc0:	f04f 0300 	mov.w	r3, #0
 8003bc4:	f7fc fb6c 	bl	80002a0 <__aeabi_uldivmod>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	460b      	mov	r3, r1
 8003bcc:	4613      	mov	r3, r2
 8003bce:	60fb      	str	r3, [r7, #12]
 8003bd0:	e04a      	b.n	8003c68 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bd2:	4b31      	ldr	r3, [pc, #196]	; (8003c98 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	099b      	lsrs	r3, r3, #6
 8003bd8:	461a      	mov	r2, r3
 8003bda:	f04f 0300 	mov.w	r3, #0
 8003bde:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003be2:	f04f 0100 	mov.w	r1, #0
 8003be6:	ea02 0400 	and.w	r4, r2, r0
 8003bea:	ea03 0501 	and.w	r5, r3, r1
 8003bee:	4620      	mov	r0, r4
 8003bf0:	4629      	mov	r1, r5
 8003bf2:	f04f 0200 	mov.w	r2, #0
 8003bf6:	f04f 0300 	mov.w	r3, #0
 8003bfa:	014b      	lsls	r3, r1, #5
 8003bfc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003c00:	0142      	lsls	r2, r0, #5
 8003c02:	4610      	mov	r0, r2
 8003c04:	4619      	mov	r1, r3
 8003c06:	1b00      	subs	r0, r0, r4
 8003c08:	eb61 0105 	sbc.w	r1, r1, r5
 8003c0c:	f04f 0200 	mov.w	r2, #0
 8003c10:	f04f 0300 	mov.w	r3, #0
 8003c14:	018b      	lsls	r3, r1, #6
 8003c16:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003c1a:	0182      	lsls	r2, r0, #6
 8003c1c:	1a12      	subs	r2, r2, r0
 8003c1e:	eb63 0301 	sbc.w	r3, r3, r1
 8003c22:	f04f 0000 	mov.w	r0, #0
 8003c26:	f04f 0100 	mov.w	r1, #0
 8003c2a:	00d9      	lsls	r1, r3, #3
 8003c2c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003c30:	00d0      	lsls	r0, r2, #3
 8003c32:	4602      	mov	r2, r0
 8003c34:	460b      	mov	r3, r1
 8003c36:	1912      	adds	r2, r2, r4
 8003c38:	eb45 0303 	adc.w	r3, r5, r3
 8003c3c:	f04f 0000 	mov.w	r0, #0
 8003c40:	f04f 0100 	mov.w	r1, #0
 8003c44:	0299      	lsls	r1, r3, #10
 8003c46:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003c4a:	0290      	lsls	r0, r2, #10
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	460b      	mov	r3, r1
 8003c50:	4610      	mov	r0, r2
 8003c52:	4619      	mov	r1, r3
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	461a      	mov	r2, r3
 8003c58:	f04f 0300 	mov.w	r3, #0
 8003c5c:	f7fc fb20 	bl	80002a0 <__aeabi_uldivmod>
 8003c60:	4602      	mov	r2, r0
 8003c62:	460b      	mov	r3, r1
 8003c64:	4613      	mov	r3, r2
 8003c66:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003c68:	4b0b      	ldr	r3, [pc, #44]	; (8003c98 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	0c1b      	lsrs	r3, r3, #16
 8003c6e:	f003 0303 	and.w	r3, r3, #3
 8003c72:	3301      	adds	r3, #1
 8003c74:	005b      	lsls	r3, r3, #1
 8003c76:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003c78:	68fa      	ldr	r2, [r7, #12]
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c80:	60bb      	str	r3, [r7, #8]
      break;
 8003c82:	e002      	b.n	8003c8a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c84:	4b05      	ldr	r3, [pc, #20]	; (8003c9c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003c86:	60bb      	str	r3, [r7, #8]
      break;
 8003c88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c8a:	68bb      	ldr	r3, [r7, #8]
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	3710      	adds	r7, #16
 8003c90:	46bd      	mov	sp, r7
 8003c92:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003c96:	bf00      	nop
 8003c98:	40023800 	.word	0x40023800
 8003c9c:	00f42400 	.word	0x00f42400
 8003ca0:	007a1200 	.word	0x007a1200

08003ca4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ca8:	4b03      	ldr	r3, [pc, #12]	; (8003cb8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003caa:	681b      	ldr	r3, [r3, #0]
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb4:	4770      	bx	lr
 8003cb6:	bf00      	nop
 8003cb8:	20000014 	.word	0x20000014

08003cbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003cc0:	f7ff fff0 	bl	8003ca4 <HAL_RCC_GetHCLKFreq>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	4b05      	ldr	r3, [pc, #20]	; (8003cdc <HAL_RCC_GetPCLK1Freq+0x20>)
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	0a9b      	lsrs	r3, r3, #10
 8003ccc:	f003 0307 	and.w	r3, r3, #7
 8003cd0:	4903      	ldr	r1, [pc, #12]	; (8003ce0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003cd2:	5ccb      	ldrb	r3, [r1, r3]
 8003cd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	bd80      	pop	{r7, pc}
 8003cdc:	40023800 	.word	0x40023800
 8003ce0:	080164cc 	.word	0x080164cc

08003ce4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003ce8:	f7ff ffdc 	bl	8003ca4 <HAL_RCC_GetHCLKFreq>
 8003cec:	4602      	mov	r2, r0
 8003cee:	4b05      	ldr	r3, [pc, #20]	; (8003d04 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	0b5b      	lsrs	r3, r3, #13
 8003cf4:	f003 0307 	and.w	r3, r3, #7
 8003cf8:	4903      	ldr	r1, [pc, #12]	; (8003d08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003cfa:	5ccb      	ldrb	r3, [r1, r3]
 8003cfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	bd80      	pop	{r7, pc}
 8003d04:	40023800 	.word	0x40023800
 8003d08:	080164cc 	.word	0x080164cc

08003d0c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b082      	sub	sp, #8
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d101      	bne.n	8003d1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e03f      	b.n	8003d9e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d106      	bne.n	8003d38 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f7fd fddc 	bl	80018f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2224      	movs	r2, #36	; 0x24
 8003d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	68da      	ldr	r2, [r3, #12]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d4e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d50:	6878      	ldr	r0, [r7, #4]
 8003d52:	f000 f929 	bl	8003fa8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	691a      	ldr	r2, [r3, #16]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d64:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	695a      	ldr	r2, [r3, #20]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d74:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	68da      	ldr	r2, [r3, #12]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d84:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2220      	movs	r2, #32
 8003d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2220      	movs	r2, #32
 8003d98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003d9c:	2300      	movs	r3, #0
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3708      	adds	r7, #8
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}

08003da6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003da6:	b580      	push	{r7, lr}
 8003da8:	b08a      	sub	sp, #40	; 0x28
 8003daa:	af02      	add	r7, sp, #8
 8003dac:	60f8      	str	r0, [r7, #12]
 8003dae:	60b9      	str	r1, [r7, #8]
 8003db0:	603b      	str	r3, [r7, #0]
 8003db2:	4613      	mov	r3, r2
 8003db4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003db6:	2300      	movs	r3, #0
 8003db8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	2b20      	cmp	r3, #32
 8003dc4:	d17c      	bne.n	8003ec0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d002      	beq.n	8003dd2 <HAL_UART_Transmit+0x2c>
 8003dcc:	88fb      	ldrh	r3, [r7, #6]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d101      	bne.n	8003dd6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e075      	b.n	8003ec2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d101      	bne.n	8003de4 <HAL_UART_Transmit+0x3e>
 8003de0:	2302      	movs	r3, #2
 8003de2:	e06e      	b.n	8003ec2 <HAL_UART_Transmit+0x11c>
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2201      	movs	r2, #1
 8003de8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2200      	movs	r2, #0
 8003df0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2221      	movs	r2, #33	; 0x21
 8003df6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003dfa:	f7fd ff3b 	bl	8001c74 <HAL_GetTick>
 8003dfe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	88fa      	ldrh	r2, [r7, #6]
 8003e04:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	88fa      	ldrh	r2, [r7, #6]
 8003e0a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e14:	d108      	bne.n	8003e28 <HAL_UART_Transmit+0x82>
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	691b      	ldr	r3, [r3, #16]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d104      	bne.n	8003e28 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	61bb      	str	r3, [r7, #24]
 8003e26:	e003      	b.n	8003e30 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2200      	movs	r2, #0
 8003e34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003e38:	e02a      	b.n	8003e90 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	9300      	str	r3, [sp, #0]
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	2200      	movs	r2, #0
 8003e42:	2180      	movs	r1, #128	; 0x80
 8003e44:	68f8      	ldr	r0, [r7, #12]
 8003e46:	f000 f840 	bl	8003eca <UART_WaitOnFlagUntilTimeout>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d001      	beq.n	8003e54 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003e50:	2303      	movs	r3, #3
 8003e52:	e036      	b.n	8003ec2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003e54:	69fb      	ldr	r3, [r7, #28]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d10b      	bne.n	8003e72 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e5a:	69bb      	ldr	r3, [r7, #24]
 8003e5c:	881b      	ldrh	r3, [r3, #0]
 8003e5e:	461a      	mov	r2, r3
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e68:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003e6a:	69bb      	ldr	r3, [r7, #24]
 8003e6c:	3302      	adds	r3, #2
 8003e6e:	61bb      	str	r3, [r7, #24]
 8003e70:	e007      	b.n	8003e82 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e72:	69fb      	ldr	r3, [r7, #28]
 8003e74:	781a      	ldrb	r2, [r3, #0]
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003e7c:	69fb      	ldr	r3, [r7, #28]
 8003e7e:	3301      	adds	r3, #1
 8003e80:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e86:	b29b      	uxth	r3, r3
 8003e88:	3b01      	subs	r3, #1
 8003e8a:	b29a      	uxth	r2, r3
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e94:	b29b      	uxth	r3, r3
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d1cf      	bne.n	8003e3a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	9300      	str	r3, [sp, #0]
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	2140      	movs	r1, #64	; 0x40
 8003ea4:	68f8      	ldr	r0, [r7, #12]
 8003ea6:	f000 f810 	bl	8003eca <UART_WaitOnFlagUntilTimeout>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d001      	beq.n	8003eb4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003eb0:	2303      	movs	r3, #3
 8003eb2:	e006      	b.n	8003ec2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2220      	movs	r2, #32
 8003eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	e000      	b.n	8003ec2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003ec0:	2302      	movs	r3, #2
  }
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3720      	adds	r7, #32
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}

08003eca <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003eca:	b580      	push	{r7, lr}
 8003ecc:	b090      	sub	sp, #64	; 0x40
 8003ece:	af00      	add	r7, sp, #0
 8003ed0:	60f8      	str	r0, [r7, #12]
 8003ed2:	60b9      	str	r1, [r7, #8]
 8003ed4:	603b      	str	r3, [r7, #0]
 8003ed6:	4613      	mov	r3, r2
 8003ed8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003eda:	e050      	b.n	8003f7e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003edc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ede:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ee2:	d04c      	beq.n	8003f7e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003ee4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d007      	beq.n	8003efa <UART_WaitOnFlagUntilTimeout+0x30>
 8003eea:	f7fd fec3 	bl	8001c74 <HAL_GetTick>
 8003eee:	4602      	mov	r2, r0
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	1ad3      	subs	r3, r2, r3
 8003ef4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	d241      	bcs.n	8003f7e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	330c      	adds	r3, #12
 8003f00:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f04:	e853 3f00 	ldrex	r3, [r3]
 8003f08:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f0c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003f10:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	330c      	adds	r3, #12
 8003f18:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003f1a:	637a      	str	r2, [r7, #52]	; 0x34
 8003f1c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f1e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f22:	e841 2300 	strex	r3, r2, [r1]
 8003f26:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d1e5      	bne.n	8003efa <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	3314      	adds	r3, #20
 8003f34:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	e853 3f00 	ldrex	r3, [r3]
 8003f3c:	613b      	str	r3, [r7, #16]
   return(result);
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	f023 0301 	bic.w	r3, r3, #1
 8003f44:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	3314      	adds	r3, #20
 8003f4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003f4e:	623a      	str	r2, [r7, #32]
 8003f50:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f52:	69f9      	ldr	r1, [r7, #28]
 8003f54:	6a3a      	ldr	r2, [r7, #32]
 8003f56:	e841 2300 	strex	r3, r2, [r1]
 8003f5a:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f5c:	69bb      	ldr	r3, [r7, #24]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d1e5      	bne.n	8003f2e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2220      	movs	r2, #32
 8003f66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2220      	movs	r2, #32
 8003f6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2200      	movs	r2, #0
 8003f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003f7a:	2303      	movs	r3, #3
 8003f7c:	e00f      	b.n	8003f9e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	681a      	ldr	r2, [r3, #0]
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	4013      	ands	r3, r2
 8003f88:	68ba      	ldr	r2, [r7, #8]
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	bf0c      	ite	eq
 8003f8e:	2301      	moveq	r3, #1
 8003f90:	2300      	movne	r3, #0
 8003f92:	b2db      	uxtb	r3, r3
 8003f94:	461a      	mov	r2, r3
 8003f96:	79fb      	ldrb	r3, [r7, #7]
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	d09f      	beq.n	8003edc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003f9c:	2300      	movs	r3, #0
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	3740      	adds	r7, #64	; 0x40
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}
	...

08003fa8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fac:	b09f      	sub	sp, #124	; 0x7c
 8003fae:	af00      	add	r7, sp, #0
 8003fb0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	691b      	ldr	r3, [r3, #16]
 8003fb8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003fbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fbe:	68d9      	ldr	r1, [r3, #12]
 8003fc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fc2:	681a      	ldr	r2, [r3, #0]
 8003fc4:	ea40 0301 	orr.w	r3, r0, r1
 8003fc8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003fca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fcc:	689a      	ldr	r2, [r3, #8]
 8003fce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fd0:	691b      	ldr	r3, [r3, #16]
 8003fd2:	431a      	orrs	r2, r3
 8003fd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fd6:	695b      	ldr	r3, [r3, #20]
 8003fd8:	431a      	orrs	r2, r3
 8003fda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fdc:	69db      	ldr	r3, [r3, #28]
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003fe2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	68db      	ldr	r3, [r3, #12]
 8003fe8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003fec:	f021 010c 	bic.w	r1, r1, #12
 8003ff0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ff6:	430b      	orrs	r3, r1
 8003ff8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ffa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	695b      	ldr	r3, [r3, #20]
 8004000:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004004:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004006:	6999      	ldr	r1, [r3, #24]
 8004008:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	ea40 0301 	orr.w	r3, r0, r1
 8004010:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004012:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	4bc5      	ldr	r3, [pc, #788]	; (800432c <UART_SetConfig+0x384>)
 8004018:	429a      	cmp	r2, r3
 800401a:	d004      	beq.n	8004026 <UART_SetConfig+0x7e>
 800401c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	4bc3      	ldr	r3, [pc, #780]	; (8004330 <UART_SetConfig+0x388>)
 8004022:	429a      	cmp	r2, r3
 8004024:	d103      	bne.n	800402e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004026:	f7ff fe5d 	bl	8003ce4 <HAL_RCC_GetPCLK2Freq>
 800402a:	6778      	str	r0, [r7, #116]	; 0x74
 800402c:	e002      	b.n	8004034 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800402e:	f7ff fe45 	bl	8003cbc <HAL_RCC_GetPCLK1Freq>
 8004032:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004034:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004036:	69db      	ldr	r3, [r3, #28]
 8004038:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800403c:	f040 80b6 	bne.w	80041ac <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004040:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004042:	461c      	mov	r4, r3
 8004044:	f04f 0500 	mov.w	r5, #0
 8004048:	4622      	mov	r2, r4
 800404a:	462b      	mov	r3, r5
 800404c:	1891      	adds	r1, r2, r2
 800404e:	6439      	str	r1, [r7, #64]	; 0x40
 8004050:	415b      	adcs	r3, r3
 8004052:	647b      	str	r3, [r7, #68]	; 0x44
 8004054:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004058:	1912      	adds	r2, r2, r4
 800405a:	eb45 0303 	adc.w	r3, r5, r3
 800405e:	f04f 0000 	mov.w	r0, #0
 8004062:	f04f 0100 	mov.w	r1, #0
 8004066:	00d9      	lsls	r1, r3, #3
 8004068:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800406c:	00d0      	lsls	r0, r2, #3
 800406e:	4602      	mov	r2, r0
 8004070:	460b      	mov	r3, r1
 8004072:	1911      	adds	r1, r2, r4
 8004074:	6639      	str	r1, [r7, #96]	; 0x60
 8004076:	416b      	adcs	r3, r5
 8004078:	667b      	str	r3, [r7, #100]	; 0x64
 800407a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	461a      	mov	r2, r3
 8004080:	f04f 0300 	mov.w	r3, #0
 8004084:	1891      	adds	r1, r2, r2
 8004086:	63b9      	str	r1, [r7, #56]	; 0x38
 8004088:	415b      	adcs	r3, r3
 800408a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800408c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004090:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004094:	f7fc f904 	bl	80002a0 <__aeabi_uldivmod>
 8004098:	4602      	mov	r2, r0
 800409a:	460b      	mov	r3, r1
 800409c:	4ba5      	ldr	r3, [pc, #660]	; (8004334 <UART_SetConfig+0x38c>)
 800409e:	fba3 2302 	umull	r2, r3, r3, r2
 80040a2:	095b      	lsrs	r3, r3, #5
 80040a4:	011e      	lsls	r6, r3, #4
 80040a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040a8:	461c      	mov	r4, r3
 80040aa:	f04f 0500 	mov.w	r5, #0
 80040ae:	4622      	mov	r2, r4
 80040b0:	462b      	mov	r3, r5
 80040b2:	1891      	adds	r1, r2, r2
 80040b4:	6339      	str	r1, [r7, #48]	; 0x30
 80040b6:	415b      	adcs	r3, r3
 80040b8:	637b      	str	r3, [r7, #52]	; 0x34
 80040ba:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80040be:	1912      	adds	r2, r2, r4
 80040c0:	eb45 0303 	adc.w	r3, r5, r3
 80040c4:	f04f 0000 	mov.w	r0, #0
 80040c8:	f04f 0100 	mov.w	r1, #0
 80040cc:	00d9      	lsls	r1, r3, #3
 80040ce:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80040d2:	00d0      	lsls	r0, r2, #3
 80040d4:	4602      	mov	r2, r0
 80040d6:	460b      	mov	r3, r1
 80040d8:	1911      	adds	r1, r2, r4
 80040da:	65b9      	str	r1, [r7, #88]	; 0x58
 80040dc:	416b      	adcs	r3, r5
 80040de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80040e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	461a      	mov	r2, r3
 80040e6:	f04f 0300 	mov.w	r3, #0
 80040ea:	1891      	adds	r1, r2, r2
 80040ec:	62b9      	str	r1, [r7, #40]	; 0x28
 80040ee:	415b      	adcs	r3, r3
 80040f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80040f6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80040fa:	f7fc f8d1 	bl	80002a0 <__aeabi_uldivmod>
 80040fe:	4602      	mov	r2, r0
 8004100:	460b      	mov	r3, r1
 8004102:	4b8c      	ldr	r3, [pc, #560]	; (8004334 <UART_SetConfig+0x38c>)
 8004104:	fba3 1302 	umull	r1, r3, r3, r2
 8004108:	095b      	lsrs	r3, r3, #5
 800410a:	2164      	movs	r1, #100	; 0x64
 800410c:	fb01 f303 	mul.w	r3, r1, r3
 8004110:	1ad3      	subs	r3, r2, r3
 8004112:	00db      	lsls	r3, r3, #3
 8004114:	3332      	adds	r3, #50	; 0x32
 8004116:	4a87      	ldr	r2, [pc, #540]	; (8004334 <UART_SetConfig+0x38c>)
 8004118:	fba2 2303 	umull	r2, r3, r2, r3
 800411c:	095b      	lsrs	r3, r3, #5
 800411e:	005b      	lsls	r3, r3, #1
 8004120:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004124:	441e      	add	r6, r3
 8004126:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004128:	4618      	mov	r0, r3
 800412a:	f04f 0100 	mov.w	r1, #0
 800412e:	4602      	mov	r2, r0
 8004130:	460b      	mov	r3, r1
 8004132:	1894      	adds	r4, r2, r2
 8004134:	623c      	str	r4, [r7, #32]
 8004136:	415b      	adcs	r3, r3
 8004138:	627b      	str	r3, [r7, #36]	; 0x24
 800413a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800413e:	1812      	adds	r2, r2, r0
 8004140:	eb41 0303 	adc.w	r3, r1, r3
 8004144:	f04f 0400 	mov.w	r4, #0
 8004148:	f04f 0500 	mov.w	r5, #0
 800414c:	00dd      	lsls	r5, r3, #3
 800414e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004152:	00d4      	lsls	r4, r2, #3
 8004154:	4622      	mov	r2, r4
 8004156:	462b      	mov	r3, r5
 8004158:	1814      	adds	r4, r2, r0
 800415a:	653c      	str	r4, [r7, #80]	; 0x50
 800415c:	414b      	adcs	r3, r1
 800415e:	657b      	str	r3, [r7, #84]	; 0x54
 8004160:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	461a      	mov	r2, r3
 8004166:	f04f 0300 	mov.w	r3, #0
 800416a:	1891      	adds	r1, r2, r2
 800416c:	61b9      	str	r1, [r7, #24]
 800416e:	415b      	adcs	r3, r3
 8004170:	61fb      	str	r3, [r7, #28]
 8004172:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004176:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800417a:	f7fc f891 	bl	80002a0 <__aeabi_uldivmod>
 800417e:	4602      	mov	r2, r0
 8004180:	460b      	mov	r3, r1
 8004182:	4b6c      	ldr	r3, [pc, #432]	; (8004334 <UART_SetConfig+0x38c>)
 8004184:	fba3 1302 	umull	r1, r3, r3, r2
 8004188:	095b      	lsrs	r3, r3, #5
 800418a:	2164      	movs	r1, #100	; 0x64
 800418c:	fb01 f303 	mul.w	r3, r1, r3
 8004190:	1ad3      	subs	r3, r2, r3
 8004192:	00db      	lsls	r3, r3, #3
 8004194:	3332      	adds	r3, #50	; 0x32
 8004196:	4a67      	ldr	r2, [pc, #412]	; (8004334 <UART_SetConfig+0x38c>)
 8004198:	fba2 2303 	umull	r2, r3, r2, r3
 800419c:	095b      	lsrs	r3, r3, #5
 800419e:	f003 0207 	and.w	r2, r3, #7
 80041a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4432      	add	r2, r6
 80041a8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80041aa:	e0b9      	b.n	8004320 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80041ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041ae:	461c      	mov	r4, r3
 80041b0:	f04f 0500 	mov.w	r5, #0
 80041b4:	4622      	mov	r2, r4
 80041b6:	462b      	mov	r3, r5
 80041b8:	1891      	adds	r1, r2, r2
 80041ba:	6139      	str	r1, [r7, #16]
 80041bc:	415b      	adcs	r3, r3
 80041be:	617b      	str	r3, [r7, #20]
 80041c0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80041c4:	1912      	adds	r2, r2, r4
 80041c6:	eb45 0303 	adc.w	r3, r5, r3
 80041ca:	f04f 0000 	mov.w	r0, #0
 80041ce:	f04f 0100 	mov.w	r1, #0
 80041d2:	00d9      	lsls	r1, r3, #3
 80041d4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80041d8:	00d0      	lsls	r0, r2, #3
 80041da:	4602      	mov	r2, r0
 80041dc:	460b      	mov	r3, r1
 80041de:	eb12 0804 	adds.w	r8, r2, r4
 80041e2:	eb43 0905 	adc.w	r9, r3, r5
 80041e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	4618      	mov	r0, r3
 80041ec:	f04f 0100 	mov.w	r1, #0
 80041f0:	f04f 0200 	mov.w	r2, #0
 80041f4:	f04f 0300 	mov.w	r3, #0
 80041f8:	008b      	lsls	r3, r1, #2
 80041fa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80041fe:	0082      	lsls	r2, r0, #2
 8004200:	4640      	mov	r0, r8
 8004202:	4649      	mov	r1, r9
 8004204:	f7fc f84c 	bl	80002a0 <__aeabi_uldivmod>
 8004208:	4602      	mov	r2, r0
 800420a:	460b      	mov	r3, r1
 800420c:	4b49      	ldr	r3, [pc, #292]	; (8004334 <UART_SetConfig+0x38c>)
 800420e:	fba3 2302 	umull	r2, r3, r3, r2
 8004212:	095b      	lsrs	r3, r3, #5
 8004214:	011e      	lsls	r6, r3, #4
 8004216:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004218:	4618      	mov	r0, r3
 800421a:	f04f 0100 	mov.w	r1, #0
 800421e:	4602      	mov	r2, r0
 8004220:	460b      	mov	r3, r1
 8004222:	1894      	adds	r4, r2, r2
 8004224:	60bc      	str	r4, [r7, #8]
 8004226:	415b      	adcs	r3, r3
 8004228:	60fb      	str	r3, [r7, #12]
 800422a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800422e:	1812      	adds	r2, r2, r0
 8004230:	eb41 0303 	adc.w	r3, r1, r3
 8004234:	f04f 0400 	mov.w	r4, #0
 8004238:	f04f 0500 	mov.w	r5, #0
 800423c:	00dd      	lsls	r5, r3, #3
 800423e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004242:	00d4      	lsls	r4, r2, #3
 8004244:	4622      	mov	r2, r4
 8004246:	462b      	mov	r3, r5
 8004248:	1814      	adds	r4, r2, r0
 800424a:	64bc      	str	r4, [r7, #72]	; 0x48
 800424c:	414b      	adcs	r3, r1
 800424e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004250:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	4618      	mov	r0, r3
 8004256:	f04f 0100 	mov.w	r1, #0
 800425a:	f04f 0200 	mov.w	r2, #0
 800425e:	f04f 0300 	mov.w	r3, #0
 8004262:	008b      	lsls	r3, r1, #2
 8004264:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004268:	0082      	lsls	r2, r0, #2
 800426a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800426e:	f7fc f817 	bl	80002a0 <__aeabi_uldivmod>
 8004272:	4602      	mov	r2, r0
 8004274:	460b      	mov	r3, r1
 8004276:	4b2f      	ldr	r3, [pc, #188]	; (8004334 <UART_SetConfig+0x38c>)
 8004278:	fba3 1302 	umull	r1, r3, r3, r2
 800427c:	095b      	lsrs	r3, r3, #5
 800427e:	2164      	movs	r1, #100	; 0x64
 8004280:	fb01 f303 	mul.w	r3, r1, r3
 8004284:	1ad3      	subs	r3, r2, r3
 8004286:	011b      	lsls	r3, r3, #4
 8004288:	3332      	adds	r3, #50	; 0x32
 800428a:	4a2a      	ldr	r2, [pc, #168]	; (8004334 <UART_SetConfig+0x38c>)
 800428c:	fba2 2303 	umull	r2, r3, r2, r3
 8004290:	095b      	lsrs	r3, r3, #5
 8004292:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004296:	441e      	add	r6, r3
 8004298:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800429a:	4618      	mov	r0, r3
 800429c:	f04f 0100 	mov.w	r1, #0
 80042a0:	4602      	mov	r2, r0
 80042a2:	460b      	mov	r3, r1
 80042a4:	1894      	adds	r4, r2, r2
 80042a6:	603c      	str	r4, [r7, #0]
 80042a8:	415b      	adcs	r3, r3
 80042aa:	607b      	str	r3, [r7, #4]
 80042ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80042b0:	1812      	adds	r2, r2, r0
 80042b2:	eb41 0303 	adc.w	r3, r1, r3
 80042b6:	f04f 0400 	mov.w	r4, #0
 80042ba:	f04f 0500 	mov.w	r5, #0
 80042be:	00dd      	lsls	r5, r3, #3
 80042c0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80042c4:	00d4      	lsls	r4, r2, #3
 80042c6:	4622      	mov	r2, r4
 80042c8:	462b      	mov	r3, r5
 80042ca:	eb12 0a00 	adds.w	sl, r2, r0
 80042ce:	eb43 0b01 	adc.w	fp, r3, r1
 80042d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	4618      	mov	r0, r3
 80042d8:	f04f 0100 	mov.w	r1, #0
 80042dc:	f04f 0200 	mov.w	r2, #0
 80042e0:	f04f 0300 	mov.w	r3, #0
 80042e4:	008b      	lsls	r3, r1, #2
 80042e6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80042ea:	0082      	lsls	r2, r0, #2
 80042ec:	4650      	mov	r0, sl
 80042ee:	4659      	mov	r1, fp
 80042f0:	f7fb ffd6 	bl	80002a0 <__aeabi_uldivmod>
 80042f4:	4602      	mov	r2, r0
 80042f6:	460b      	mov	r3, r1
 80042f8:	4b0e      	ldr	r3, [pc, #56]	; (8004334 <UART_SetConfig+0x38c>)
 80042fa:	fba3 1302 	umull	r1, r3, r3, r2
 80042fe:	095b      	lsrs	r3, r3, #5
 8004300:	2164      	movs	r1, #100	; 0x64
 8004302:	fb01 f303 	mul.w	r3, r1, r3
 8004306:	1ad3      	subs	r3, r2, r3
 8004308:	011b      	lsls	r3, r3, #4
 800430a:	3332      	adds	r3, #50	; 0x32
 800430c:	4a09      	ldr	r2, [pc, #36]	; (8004334 <UART_SetConfig+0x38c>)
 800430e:	fba2 2303 	umull	r2, r3, r2, r3
 8004312:	095b      	lsrs	r3, r3, #5
 8004314:	f003 020f 	and.w	r2, r3, #15
 8004318:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4432      	add	r2, r6
 800431e:	609a      	str	r2, [r3, #8]
}
 8004320:	bf00      	nop
 8004322:	377c      	adds	r7, #124	; 0x7c
 8004324:	46bd      	mov	sp, r7
 8004326:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800432a:	bf00      	nop
 800432c:	40011000 	.word	0x40011000
 8004330:	40011400 	.word	0x40011400
 8004334:	51eb851f 	.word	0x51eb851f

08004338 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b084      	sub	sp, #16
 800433c:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800433e:	4b8d      	ldr	r3, [pc, #564]	; (8004574 <MX_LWIP_Init+0x23c>)
 8004340:	22c0      	movs	r2, #192	; 0xc0
 8004342:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8004344:	4b8b      	ldr	r3, [pc, #556]	; (8004574 <MX_LWIP_Init+0x23c>)
 8004346:	22a8      	movs	r2, #168	; 0xa8
 8004348:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 18;
 800434a:	4b8a      	ldr	r3, [pc, #552]	; (8004574 <MX_LWIP_Init+0x23c>)
 800434c:	2212      	movs	r2, #18
 800434e:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 111;
 8004350:	4b88      	ldr	r3, [pc, #544]	; (8004574 <MX_LWIP_Init+0x23c>)
 8004352:	226f      	movs	r2, #111	; 0x6f
 8004354:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8004356:	4b88      	ldr	r3, [pc, #544]	; (8004578 <MX_LWIP_Init+0x240>)
 8004358:	22ff      	movs	r2, #255	; 0xff
 800435a:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800435c:	4b86      	ldr	r3, [pc, #536]	; (8004578 <MX_LWIP_Init+0x240>)
 800435e:	22ff      	movs	r2, #255	; 0xff
 8004360:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8004362:	4b85      	ldr	r3, [pc, #532]	; (8004578 <MX_LWIP_Init+0x240>)
 8004364:	22ff      	movs	r2, #255	; 0xff
 8004366:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8004368:	4b83      	ldr	r3, [pc, #524]	; (8004578 <MX_LWIP_Init+0x240>)
 800436a:	2200      	movs	r2, #0
 800436c:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800436e:	4b83      	ldr	r3, [pc, #524]	; (800457c <MX_LWIP_Init+0x244>)
 8004370:	22c0      	movs	r2, #192	; 0xc0
 8004372:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8004374:	4b81      	ldr	r3, [pc, #516]	; (800457c <MX_LWIP_Init+0x244>)
 8004376:	22a8      	movs	r2, #168	; 0xa8
 8004378:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 18;
 800437a:	4b80      	ldr	r3, [pc, #512]	; (800457c <MX_LWIP_Init+0x244>)
 800437c:	2212      	movs	r2, #18
 800437e:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8004380:	4b7e      	ldr	r3, [pc, #504]	; (800457c <MX_LWIP_Init+0x244>)
 8004382:	2201      	movs	r2, #1
 8004384:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8004386:	f002 fd6d 	bl	8006e64 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800438a:	4b7a      	ldr	r3, [pc, #488]	; (8004574 <MX_LWIP_Init+0x23c>)
 800438c:	781b      	ldrb	r3, [r3, #0]
 800438e:	061a      	lsls	r2, r3, #24
 8004390:	4b78      	ldr	r3, [pc, #480]	; (8004574 <MX_LWIP_Init+0x23c>)
 8004392:	785b      	ldrb	r3, [r3, #1]
 8004394:	041b      	lsls	r3, r3, #16
 8004396:	431a      	orrs	r2, r3
 8004398:	4b76      	ldr	r3, [pc, #472]	; (8004574 <MX_LWIP_Init+0x23c>)
 800439a:	789b      	ldrb	r3, [r3, #2]
 800439c:	021b      	lsls	r3, r3, #8
 800439e:	4313      	orrs	r3, r2
 80043a0:	4a74      	ldr	r2, [pc, #464]	; (8004574 <MX_LWIP_Init+0x23c>)
 80043a2:	78d2      	ldrb	r2, [r2, #3]
 80043a4:	4313      	orrs	r3, r2
 80043a6:	061a      	lsls	r2, r3, #24
 80043a8:	4b72      	ldr	r3, [pc, #456]	; (8004574 <MX_LWIP_Init+0x23c>)
 80043aa:	781b      	ldrb	r3, [r3, #0]
 80043ac:	0619      	lsls	r1, r3, #24
 80043ae:	4b71      	ldr	r3, [pc, #452]	; (8004574 <MX_LWIP_Init+0x23c>)
 80043b0:	785b      	ldrb	r3, [r3, #1]
 80043b2:	041b      	lsls	r3, r3, #16
 80043b4:	4319      	orrs	r1, r3
 80043b6:	4b6f      	ldr	r3, [pc, #444]	; (8004574 <MX_LWIP_Init+0x23c>)
 80043b8:	789b      	ldrb	r3, [r3, #2]
 80043ba:	021b      	lsls	r3, r3, #8
 80043bc:	430b      	orrs	r3, r1
 80043be:	496d      	ldr	r1, [pc, #436]	; (8004574 <MX_LWIP_Init+0x23c>)
 80043c0:	78c9      	ldrb	r1, [r1, #3]
 80043c2:	430b      	orrs	r3, r1
 80043c4:	021b      	lsls	r3, r3, #8
 80043c6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80043ca:	431a      	orrs	r2, r3
 80043cc:	4b69      	ldr	r3, [pc, #420]	; (8004574 <MX_LWIP_Init+0x23c>)
 80043ce:	781b      	ldrb	r3, [r3, #0]
 80043d0:	0619      	lsls	r1, r3, #24
 80043d2:	4b68      	ldr	r3, [pc, #416]	; (8004574 <MX_LWIP_Init+0x23c>)
 80043d4:	785b      	ldrb	r3, [r3, #1]
 80043d6:	041b      	lsls	r3, r3, #16
 80043d8:	4319      	orrs	r1, r3
 80043da:	4b66      	ldr	r3, [pc, #408]	; (8004574 <MX_LWIP_Init+0x23c>)
 80043dc:	789b      	ldrb	r3, [r3, #2]
 80043de:	021b      	lsls	r3, r3, #8
 80043e0:	430b      	orrs	r3, r1
 80043e2:	4964      	ldr	r1, [pc, #400]	; (8004574 <MX_LWIP_Init+0x23c>)
 80043e4:	78c9      	ldrb	r1, [r1, #3]
 80043e6:	430b      	orrs	r3, r1
 80043e8:	0a1b      	lsrs	r3, r3, #8
 80043ea:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80043ee:	431a      	orrs	r2, r3
 80043f0:	4b60      	ldr	r3, [pc, #384]	; (8004574 <MX_LWIP_Init+0x23c>)
 80043f2:	781b      	ldrb	r3, [r3, #0]
 80043f4:	0619      	lsls	r1, r3, #24
 80043f6:	4b5f      	ldr	r3, [pc, #380]	; (8004574 <MX_LWIP_Init+0x23c>)
 80043f8:	785b      	ldrb	r3, [r3, #1]
 80043fa:	041b      	lsls	r3, r3, #16
 80043fc:	4319      	orrs	r1, r3
 80043fe:	4b5d      	ldr	r3, [pc, #372]	; (8004574 <MX_LWIP_Init+0x23c>)
 8004400:	789b      	ldrb	r3, [r3, #2]
 8004402:	021b      	lsls	r3, r3, #8
 8004404:	430b      	orrs	r3, r1
 8004406:	495b      	ldr	r1, [pc, #364]	; (8004574 <MX_LWIP_Init+0x23c>)
 8004408:	78c9      	ldrb	r1, [r1, #3]
 800440a:	430b      	orrs	r3, r1
 800440c:	0e1b      	lsrs	r3, r3, #24
 800440e:	4313      	orrs	r3, r2
 8004410:	4a5b      	ldr	r2, [pc, #364]	; (8004580 <MX_LWIP_Init+0x248>)
 8004412:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8004414:	4b58      	ldr	r3, [pc, #352]	; (8004578 <MX_LWIP_Init+0x240>)
 8004416:	781b      	ldrb	r3, [r3, #0]
 8004418:	061a      	lsls	r2, r3, #24
 800441a:	4b57      	ldr	r3, [pc, #348]	; (8004578 <MX_LWIP_Init+0x240>)
 800441c:	785b      	ldrb	r3, [r3, #1]
 800441e:	041b      	lsls	r3, r3, #16
 8004420:	431a      	orrs	r2, r3
 8004422:	4b55      	ldr	r3, [pc, #340]	; (8004578 <MX_LWIP_Init+0x240>)
 8004424:	789b      	ldrb	r3, [r3, #2]
 8004426:	021b      	lsls	r3, r3, #8
 8004428:	4313      	orrs	r3, r2
 800442a:	4a53      	ldr	r2, [pc, #332]	; (8004578 <MX_LWIP_Init+0x240>)
 800442c:	78d2      	ldrb	r2, [r2, #3]
 800442e:	4313      	orrs	r3, r2
 8004430:	061a      	lsls	r2, r3, #24
 8004432:	4b51      	ldr	r3, [pc, #324]	; (8004578 <MX_LWIP_Init+0x240>)
 8004434:	781b      	ldrb	r3, [r3, #0]
 8004436:	0619      	lsls	r1, r3, #24
 8004438:	4b4f      	ldr	r3, [pc, #316]	; (8004578 <MX_LWIP_Init+0x240>)
 800443a:	785b      	ldrb	r3, [r3, #1]
 800443c:	041b      	lsls	r3, r3, #16
 800443e:	4319      	orrs	r1, r3
 8004440:	4b4d      	ldr	r3, [pc, #308]	; (8004578 <MX_LWIP_Init+0x240>)
 8004442:	789b      	ldrb	r3, [r3, #2]
 8004444:	021b      	lsls	r3, r3, #8
 8004446:	430b      	orrs	r3, r1
 8004448:	494b      	ldr	r1, [pc, #300]	; (8004578 <MX_LWIP_Init+0x240>)
 800444a:	78c9      	ldrb	r1, [r1, #3]
 800444c:	430b      	orrs	r3, r1
 800444e:	021b      	lsls	r3, r3, #8
 8004450:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004454:	431a      	orrs	r2, r3
 8004456:	4b48      	ldr	r3, [pc, #288]	; (8004578 <MX_LWIP_Init+0x240>)
 8004458:	781b      	ldrb	r3, [r3, #0]
 800445a:	0619      	lsls	r1, r3, #24
 800445c:	4b46      	ldr	r3, [pc, #280]	; (8004578 <MX_LWIP_Init+0x240>)
 800445e:	785b      	ldrb	r3, [r3, #1]
 8004460:	041b      	lsls	r3, r3, #16
 8004462:	4319      	orrs	r1, r3
 8004464:	4b44      	ldr	r3, [pc, #272]	; (8004578 <MX_LWIP_Init+0x240>)
 8004466:	789b      	ldrb	r3, [r3, #2]
 8004468:	021b      	lsls	r3, r3, #8
 800446a:	430b      	orrs	r3, r1
 800446c:	4942      	ldr	r1, [pc, #264]	; (8004578 <MX_LWIP_Init+0x240>)
 800446e:	78c9      	ldrb	r1, [r1, #3]
 8004470:	430b      	orrs	r3, r1
 8004472:	0a1b      	lsrs	r3, r3, #8
 8004474:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004478:	431a      	orrs	r2, r3
 800447a:	4b3f      	ldr	r3, [pc, #252]	; (8004578 <MX_LWIP_Init+0x240>)
 800447c:	781b      	ldrb	r3, [r3, #0]
 800447e:	0619      	lsls	r1, r3, #24
 8004480:	4b3d      	ldr	r3, [pc, #244]	; (8004578 <MX_LWIP_Init+0x240>)
 8004482:	785b      	ldrb	r3, [r3, #1]
 8004484:	041b      	lsls	r3, r3, #16
 8004486:	4319      	orrs	r1, r3
 8004488:	4b3b      	ldr	r3, [pc, #236]	; (8004578 <MX_LWIP_Init+0x240>)
 800448a:	789b      	ldrb	r3, [r3, #2]
 800448c:	021b      	lsls	r3, r3, #8
 800448e:	430b      	orrs	r3, r1
 8004490:	4939      	ldr	r1, [pc, #228]	; (8004578 <MX_LWIP_Init+0x240>)
 8004492:	78c9      	ldrb	r1, [r1, #3]
 8004494:	430b      	orrs	r3, r1
 8004496:	0e1b      	lsrs	r3, r3, #24
 8004498:	4313      	orrs	r3, r2
 800449a:	4a3a      	ldr	r2, [pc, #232]	; (8004584 <MX_LWIP_Init+0x24c>)
 800449c:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800449e:	4b37      	ldr	r3, [pc, #220]	; (800457c <MX_LWIP_Init+0x244>)
 80044a0:	781b      	ldrb	r3, [r3, #0]
 80044a2:	061a      	lsls	r2, r3, #24
 80044a4:	4b35      	ldr	r3, [pc, #212]	; (800457c <MX_LWIP_Init+0x244>)
 80044a6:	785b      	ldrb	r3, [r3, #1]
 80044a8:	041b      	lsls	r3, r3, #16
 80044aa:	431a      	orrs	r2, r3
 80044ac:	4b33      	ldr	r3, [pc, #204]	; (800457c <MX_LWIP_Init+0x244>)
 80044ae:	789b      	ldrb	r3, [r3, #2]
 80044b0:	021b      	lsls	r3, r3, #8
 80044b2:	4313      	orrs	r3, r2
 80044b4:	4a31      	ldr	r2, [pc, #196]	; (800457c <MX_LWIP_Init+0x244>)
 80044b6:	78d2      	ldrb	r2, [r2, #3]
 80044b8:	4313      	orrs	r3, r2
 80044ba:	061a      	lsls	r2, r3, #24
 80044bc:	4b2f      	ldr	r3, [pc, #188]	; (800457c <MX_LWIP_Init+0x244>)
 80044be:	781b      	ldrb	r3, [r3, #0]
 80044c0:	0619      	lsls	r1, r3, #24
 80044c2:	4b2e      	ldr	r3, [pc, #184]	; (800457c <MX_LWIP_Init+0x244>)
 80044c4:	785b      	ldrb	r3, [r3, #1]
 80044c6:	041b      	lsls	r3, r3, #16
 80044c8:	4319      	orrs	r1, r3
 80044ca:	4b2c      	ldr	r3, [pc, #176]	; (800457c <MX_LWIP_Init+0x244>)
 80044cc:	789b      	ldrb	r3, [r3, #2]
 80044ce:	021b      	lsls	r3, r3, #8
 80044d0:	430b      	orrs	r3, r1
 80044d2:	492a      	ldr	r1, [pc, #168]	; (800457c <MX_LWIP_Init+0x244>)
 80044d4:	78c9      	ldrb	r1, [r1, #3]
 80044d6:	430b      	orrs	r3, r1
 80044d8:	021b      	lsls	r3, r3, #8
 80044da:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80044de:	431a      	orrs	r2, r3
 80044e0:	4b26      	ldr	r3, [pc, #152]	; (800457c <MX_LWIP_Init+0x244>)
 80044e2:	781b      	ldrb	r3, [r3, #0]
 80044e4:	0619      	lsls	r1, r3, #24
 80044e6:	4b25      	ldr	r3, [pc, #148]	; (800457c <MX_LWIP_Init+0x244>)
 80044e8:	785b      	ldrb	r3, [r3, #1]
 80044ea:	041b      	lsls	r3, r3, #16
 80044ec:	4319      	orrs	r1, r3
 80044ee:	4b23      	ldr	r3, [pc, #140]	; (800457c <MX_LWIP_Init+0x244>)
 80044f0:	789b      	ldrb	r3, [r3, #2]
 80044f2:	021b      	lsls	r3, r3, #8
 80044f4:	430b      	orrs	r3, r1
 80044f6:	4921      	ldr	r1, [pc, #132]	; (800457c <MX_LWIP_Init+0x244>)
 80044f8:	78c9      	ldrb	r1, [r1, #3]
 80044fa:	430b      	orrs	r3, r1
 80044fc:	0a1b      	lsrs	r3, r3, #8
 80044fe:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004502:	431a      	orrs	r2, r3
 8004504:	4b1d      	ldr	r3, [pc, #116]	; (800457c <MX_LWIP_Init+0x244>)
 8004506:	781b      	ldrb	r3, [r3, #0]
 8004508:	0619      	lsls	r1, r3, #24
 800450a:	4b1c      	ldr	r3, [pc, #112]	; (800457c <MX_LWIP_Init+0x244>)
 800450c:	785b      	ldrb	r3, [r3, #1]
 800450e:	041b      	lsls	r3, r3, #16
 8004510:	4319      	orrs	r1, r3
 8004512:	4b1a      	ldr	r3, [pc, #104]	; (800457c <MX_LWIP_Init+0x244>)
 8004514:	789b      	ldrb	r3, [r3, #2]
 8004516:	021b      	lsls	r3, r3, #8
 8004518:	430b      	orrs	r3, r1
 800451a:	4918      	ldr	r1, [pc, #96]	; (800457c <MX_LWIP_Init+0x244>)
 800451c:	78c9      	ldrb	r1, [r1, #3]
 800451e:	430b      	orrs	r3, r1
 8004520:	0e1b      	lsrs	r3, r3, #24
 8004522:	4313      	orrs	r3, r2
 8004524:	4a18      	ldr	r2, [pc, #96]	; (8004588 <MX_LWIP_Init+0x250>)
 8004526:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8004528:	4b18      	ldr	r3, [pc, #96]	; (800458c <MX_LWIP_Init+0x254>)
 800452a:	9302      	str	r3, [sp, #8]
 800452c:	4b18      	ldr	r3, [pc, #96]	; (8004590 <MX_LWIP_Init+0x258>)
 800452e:	9301      	str	r3, [sp, #4]
 8004530:	2300      	movs	r3, #0
 8004532:	9300      	str	r3, [sp, #0]
 8004534:	4b14      	ldr	r3, [pc, #80]	; (8004588 <MX_LWIP_Init+0x250>)
 8004536:	4a13      	ldr	r2, [pc, #76]	; (8004584 <MX_LWIP_Init+0x24c>)
 8004538:	4911      	ldr	r1, [pc, #68]	; (8004580 <MX_LWIP_Init+0x248>)
 800453a:	4816      	ldr	r0, [pc, #88]	; (8004594 <MX_LWIP_Init+0x25c>)
 800453c:	f003 f938 	bl	80077b0 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8004540:	4814      	ldr	r0, [pc, #80]	; (8004594 <MX_LWIP_Init+0x25c>)
 8004542:	f003 fae7 	bl	8007b14 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8004546:	4b13      	ldr	r3, [pc, #76]	; (8004594 <MX_LWIP_Init+0x25c>)
 8004548:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800454c:	089b      	lsrs	r3, r3, #2
 800454e:	f003 0301 	and.w	r3, r3, #1
 8004552:	b2db      	uxtb	r3, r3
 8004554:	2b00      	cmp	r3, #0
 8004556:	d003      	beq.n	8004560 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8004558:	480e      	ldr	r0, [pc, #56]	; (8004594 <MX_LWIP_Init+0x25c>)
 800455a:	f003 faeb 	bl	8007b34 <netif_set_up>
 800455e:	e002      	b.n	8004566 <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8004560:	480c      	ldr	r0, [pc, #48]	; (8004594 <MX_LWIP_Init+0x25c>)
 8004562:	f003 fb53 	bl	8007c0c <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8004566:	490c      	ldr	r1, [pc, #48]	; (8004598 <MX_LWIP_Init+0x260>)
 8004568:	480a      	ldr	r0, [pc, #40]	; (8004594 <MX_LWIP_Init+0x25c>)
 800456a:	f003 fb81 	bl	8007c70 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800456e:	bf00      	nop
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}
 8004574:	20001090 	.word	0x20001090
 8004578:	2000108c 	.word	0x2000108c
 800457c:	20001084 	.word	0x20001084
 8004580:	20001088 	.word	0x20001088
 8004584:	20001094 	.word	0x20001094
 8004588:	20001098 	.word	0x20001098
 800458c:	08011315 	.word	0x08011315
 8004590:	08004b29 	.word	0x08004b29
 8004594:	20001008 	.word	0x20001008
 8004598:	08004b95 	.word	0x08004b95

0800459c <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b08e      	sub	sp, #56	; 0x38
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80045a8:	2200      	movs	r2, #0
 80045aa:	601a      	str	r2, [r3, #0]
 80045ac:	605a      	str	r2, [r3, #4]
 80045ae:	609a      	str	r2, [r3, #8]
 80045b0:	60da      	str	r2, [r3, #12]
 80045b2:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a46      	ldr	r2, [pc, #280]	; (80046d4 <HAL_ETH_MspInit+0x138>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	f040 8085 	bne.w	80046ca <HAL_ETH_MspInit+0x12e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80045c0:	2300      	movs	r3, #0
 80045c2:	623b      	str	r3, [r7, #32]
 80045c4:	4b44      	ldr	r3, [pc, #272]	; (80046d8 <HAL_ETH_MspInit+0x13c>)
 80045c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045c8:	4a43      	ldr	r2, [pc, #268]	; (80046d8 <HAL_ETH_MspInit+0x13c>)
 80045ca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80045ce:	6313      	str	r3, [r2, #48]	; 0x30
 80045d0:	4b41      	ldr	r3, [pc, #260]	; (80046d8 <HAL_ETH_MspInit+0x13c>)
 80045d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045d8:	623b      	str	r3, [r7, #32]
 80045da:	6a3b      	ldr	r3, [r7, #32]
 80045dc:	2300      	movs	r3, #0
 80045de:	61fb      	str	r3, [r7, #28]
 80045e0:	4b3d      	ldr	r3, [pc, #244]	; (80046d8 <HAL_ETH_MspInit+0x13c>)
 80045e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045e4:	4a3c      	ldr	r2, [pc, #240]	; (80046d8 <HAL_ETH_MspInit+0x13c>)
 80045e6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80045ea:	6313      	str	r3, [r2, #48]	; 0x30
 80045ec:	4b3a      	ldr	r3, [pc, #232]	; (80046d8 <HAL_ETH_MspInit+0x13c>)
 80045ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045f0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80045f4:	61fb      	str	r3, [r7, #28]
 80045f6:	69fb      	ldr	r3, [r7, #28]
 80045f8:	2300      	movs	r3, #0
 80045fa:	61bb      	str	r3, [r7, #24]
 80045fc:	4b36      	ldr	r3, [pc, #216]	; (80046d8 <HAL_ETH_MspInit+0x13c>)
 80045fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004600:	4a35      	ldr	r2, [pc, #212]	; (80046d8 <HAL_ETH_MspInit+0x13c>)
 8004602:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004606:	6313      	str	r3, [r2, #48]	; 0x30
 8004608:	4b33      	ldr	r3, [pc, #204]	; (80046d8 <HAL_ETH_MspInit+0x13c>)
 800460a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800460c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004610:	61bb      	str	r3, [r7, #24]
 8004612:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004614:	2300      	movs	r3, #0
 8004616:	617b      	str	r3, [r7, #20]
 8004618:	4b2f      	ldr	r3, [pc, #188]	; (80046d8 <HAL_ETH_MspInit+0x13c>)
 800461a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800461c:	4a2e      	ldr	r2, [pc, #184]	; (80046d8 <HAL_ETH_MspInit+0x13c>)
 800461e:	f043 0304 	orr.w	r3, r3, #4
 8004622:	6313      	str	r3, [r2, #48]	; 0x30
 8004624:	4b2c      	ldr	r3, [pc, #176]	; (80046d8 <HAL_ETH_MspInit+0x13c>)
 8004626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004628:	f003 0304 	and.w	r3, r3, #4
 800462c:	617b      	str	r3, [r7, #20]
 800462e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004630:	2300      	movs	r3, #0
 8004632:	613b      	str	r3, [r7, #16]
 8004634:	4b28      	ldr	r3, [pc, #160]	; (80046d8 <HAL_ETH_MspInit+0x13c>)
 8004636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004638:	4a27      	ldr	r2, [pc, #156]	; (80046d8 <HAL_ETH_MspInit+0x13c>)
 800463a:	f043 0301 	orr.w	r3, r3, #1
 800463e:	6313      	str	r3, [r2, #48]	; 0x30
 8004640:	4b25      	ldr	r3, [pc, #148]	; (80046d8 <HAL_ETH_MspInit+0x13c>)
 8004642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004644:	f003 0301 	and.w	r3, r3, #1
 8004648:	613b      	str	r3, [r7, #16]
 800464a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800464c:	2300      	movs	r3, #0
 800464e:	60fb      	str	r3, [r7, #12]
 8004650:	4b21      	ldr	r3, [pc, #132]	; (80046d8 <HAL_ETH_MspInit+0x13c>)
 8004652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004654:	4a20      	ldr	r2, [pc, #128]	; (80046d8 <HAL_ETH_MspInit+0x13c>)
 8004656:	f043 0302 	orr.w	r3, r3, #2
 800465a:	6313      	str	r3, [r2, #48]	; 0x30
 800465c:	4b1e      	ldr	r3, [pc, #120]	; (80046d8 <HAL_ETH_MspInit+0x13c>)
 800465e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004660:	f003 0302 	and.w	r3, r3, #2
 8004664:	60fb      	str	r3, [r7, #12]
 8004666:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8004668:	2332      	movs	r3, #50	; 0x32
 800466a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800466c:	2302      	movs	r3, #2
 800466e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004670:	2300      	movs	r3, #0
 8004672:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004674:	2303      	movs	r3, #3
 8004676:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004678:	230b      	movs	r3, #11
 800467a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800467c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004680:	4619      	mov	r1, r3
 8004682:	4816      	ldr	r0, [pc, #88]	; (80046dc <HAL_ETH_MspInit+0x140>)
 8004684:	f7fe fd32 	bl	80030ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8004688:	2386      	movs	r3, #134	; 0x86
 800468a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800468c:	2302      	movs	r3, #2
 800468e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004690:	2300      	movs	r3, #0
 8004692:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004694:	2303      	movs	r3, #3
 8004696:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004698:	230b      	movs	r3, #11
 800469a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800469c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80046a0:	4619      	mov	r1, r3
 80046a2:	480f      	ldr	r0, [pc, #60]	; (80046e0 <HAL_ETH_MspInit+0x144>)
 80046a4:	f7fe fd22 	bl	80030ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 80046a8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80046ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046ae:	2302      	movs	r3, #2
 80046b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046b2:	2300      	movs	r3, #0
 80046b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046b6:	2303      	movs	r3, #3
 80046b8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80046ba:	230b      	movs	r3, #11
 80046bc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80046c2:	4619      	mov	r1, r3
 80046c4:	4807      	ldr	r0, [pc, #28]	; (80046e4 <HAL_ETH_MspInit+0x148>)
 80046c6:	f7fe fd11 	bl	80030ec <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80046ca:	bf00      	nop
 80046cc:	3738      	adds	r7, #56	; 0x38
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}
 80046d2:	bf00      	nop
 80046d4:	40028000 	.word	0x40028000
 80046d8:	40023800 	.word	0x40023800
 80046dc:	40020800 	.word	0x40020800
 80046e0:	40020000 	.word	0x40020000
 80046e4:	40020400 	.word	0x40020400

080046e8 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b086      	sub	sp, #24
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 80046f0:	2300      	movs	r3, #0
 80046f2:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80046f4:	4b4d      	ldr	r3, [pc, #308]	; (800482c <low_level_init+0x144>)
 80046f6:	4a4e      	ldr	r2, [pc, #312]	; (8004830 <low_level_init+0x148>)
 80046f8:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 80046fa:	4b4c      	ldr	r3, [pc, #304]	; (800482c <low_level_init+0x144>)
 80046fc:	2201      	movs	r2, #1
 80046fe:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8004700:	4b4a      	ldr	r3, [pc, #296]	; (800482c <low_level_init+0x144>)
 8004702:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004706:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8004708:	4b48      	ldr	r3, [pc, #288]	; (800482c <low_level_init+0x144>)
 800470a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800470e:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8004710:	4b46      	ldr	r3, [pc, #280]	; (800482c <low_level_init+0x144>)
 8004712:	2201      	movs	r2, #1
 8004714:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8004716:	2300      	movs	r3, #0
 8004718:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800471a:	2380      	movs	r3, #128	; 0x80
 800471c:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800471e:	23e1      	movs	r3, #225	; 0xe1
 8004720:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8004722:	2300      	movs	r3, #0
 8004724:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8004726:	2300      	movs	r3, #0
 8004728:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800472a:	2300      	movs	r3, #0
 800472c:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800472e:	4a3f      	ldr	r2, [pc, #252]	; (800482c <low_level_init+0x144>)
 8004730:	f107 0308 	add.w	r3, r7, #8
 8004734:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8004736:	4b3d      	ldr	r3, [pc, #244]	; (800482c <low_level_init+0x144>)
 8004738:	2200      	movs	r2, #0
 800473a:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800473c:	4b3b      	ldr	r3, [pc, #236]	; (800482c <low_level_init+0x144>)
 800473e:	2200      	movs	r2, #0
 8004740:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8004742:	4b3a      	ldr	r3, [pc, #232]	; (800482c <low_level_init+0x144>)
 8004744:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004748:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800474a:	4838      	ldr	r0, [pc, #224]	; (800482c <low_level_init+0x144>)
 800474c:	f7fd fba8 	bl	8001ea0 <HAL_ETH_Init>
 8004750:	4603      	mov	r3, r0
 8004752:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 8004754:	7dfb      	ldrb	r3, [r7, #23]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d108      	bne.n	800476c <low_level_init+0x84>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004760:	f043 0304 	orr.w	r3, r3, #4
 8004764:	b2da      	uxtb	r2, r3
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800476c:	2304      	movs	r3, #4
 800476e:	4a31      	ldr	r2, [pc, #196]	; (8004834 <low_level_init+0x14c>)
 8004770:	4931      	ldr	r1, [pc, #196]	; (8004838 <low_level_init+0x150>)
 8004772:	482e      	ldr	r0, [pc, #184]	; (800482c <low_level_init+0x144>)
 8004774:	f7fd fd30 	bl	80021d8 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8004778:	2304      	movs	r3, #4
 800477a:	4a30      	ldr	r2, [pc, #192]	; (800483c <low_level_init+0x154>)
 800477c:	4930      	ldr	r1, [pc, #192]	; (8004840 <low_level_init+0x158>)
 800477e:	482b      	ldr	r0, [pc, #172]	; (800482c <low_level_init+0x144>)
 8004780:	f7fd fd93 	bl	80022aa <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2206      	movs	r2, #6
 8004788:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800478c:	4b27      	ldr	r3, [pc, #156]	; (800482c <low_level_init+0x144>)
 800478e:	695b      	ldr	r3, [r3, #20]
 8004790:	781a      	ldrb	r2, [r3, #0]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8004798:	4b24      	ldr	r3, [pc, #144]	; (800482c <low_level_init+0x144>)
 800479a:	695b      	ldr	r3, [r3, #20]
 800479c:	785a      	ldrb	r2, [r3, #1]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80047a4:	4b21      	ldr	r3, [pc, #132]	; (800482c <low_level_init+0x144>)
 80047a6:	695b      	ldr	r3, [r3, #20]
 80047a8:	789a      	ldrb	r2, [r3, #2]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80047b0:	4b1e      	ldr	r3, [pc, #120]	; (800482c <low_level_init+0x144>)
 80047b2:	695b      	ldr	r3, [r3, #20]
 80047b4:	78da      	ldrb	r2, [r3, #3]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80047bc:	4b1b      	ldr	r3, [pc, #108]	; (800482c <low_level_init+0x144>)
 80047be:	695b      	ldr	r3, [r3, #20]
 80047c0:	791a      	ldrb	r2, [r3, #4]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80047c8:	4b18      	ldr	r3, [pc, #96]	; (800482c <low_level_init+0x144>)
 80047ca:	695b      	ldr	r3, [r3, #20]
 80047cc:	795a      	ldrb	r2, [r3, #5]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80047da:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80047e2:	f043 030a 	orr.w	r3, r3, #10
 80047e6:	b2da      	uxtb	r2, r3
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 80047ee:	480f      	ldr	r0, [pc, #60]	; (800482c <low_level_init+0x144>)
 80047f0:	f7fe f804 	bl	80027fc <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 80047f4:	f107 0310 	add.w	r3, r7, #16
 80047f8:	461a      	mov	r2, r3
 80047fa:	211d      	movs	r1, #29
 80047fc:	480b      	ldr	r0, [pc, #44]	; (800482c <low_level_init+0x144>)
 80047fe:	f7fd ff2f 	bl	8002660 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	f043 030b 	orr.w	r3, r3, #11
 8004808:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	461a      	mov	r2, r3
 800480e:	211d      	movs	r1, #29
 8004810:	4806      	ldr	r0, [pc, #24]	; (800482c <low_level_init+0x144>)
 8004812:	f7fd ff8d 	bl	8002730 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8004816:	f107 0310 	add.w	r3, r7, #16
 800481a:	461a      	mov	r2, r3
 800481c:	211d      	movs	r1, #29
 800481e:	4803      	ldr	r0, [pc, #12]	; (800482c <low_level_init+0x144>)
 8004820:	f7fd ff1e 	bl	8002660 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8004824:	bf00      	nop
 8004826:	3718      	adds	r7, #24
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}
 800482c:	2000296c 	.word	0x2000296c
 8004830:	40028000 	.word	0x40028000
 8004834:	200029b4 	.word	0x200029b4
 8004838:	2000109c 	.word	0x2000109c
 800483c:	2000111c 	.word	0x2000111c
 8004840:	200028ec 	.word	0x200028ec

08004844 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b08a      	sub	sp, #40	; 0x28
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
 800484c:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800484e:	4b4b      	ldr	r3, [pc, #300]	; (800497c <low_level_output+0x138>)
 8004850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8004856:	2300      	movs	r3, #0
 8004858:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 800485a:	2300      	movs	r3, #0
 800485c:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 800485e:	2300      	movs	r3, #0
 8004860:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8004862:	2300      	movs	r3, #0
 8004864:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8004866:	4b45      	ldr	r3, [pc, #276]	; (800497c <low_level_output+0x138>)
 8004868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800486a:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 800486c:	2300      	movs	r3, #0
 800486e:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	623b      	str	r3, [r7, #32]
 8004874:	e05a      	b.n	800492c <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8004876:	69bb      	ldr	r3, [r7, #24]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	2b00      	cmp	r3, #0
 800487c:	da03      	bge.n	8004886 <low_level_output+0x42>
      {
        errval = ERR_USE;
 800487e:	23f8      	movs	r3, #248	; 0xf8
 8004880:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8004884:	e05c      	b.n	8004940 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8004886:	6a3b      	ldr	r3, [r7, #32]
 8004888:	895b      	ldrh	r3, [r3, #10]
 800488a:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 800488c:	2300      	movs	r3, #0
 800488e:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8004890:	e02f      	b.n	80048f2 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8004892:	69fa      	ldr	r2, [r7, #28]
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	18d0      	adds	r0, r2, r3
 8004898:	6a3b      	ldr	r3, [r7, #32]
 800489a:	685a      	ldr	r2, [r3, #4]
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	18d1      	adds	r1, r2, r3
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 80048a6:	3304      	adds	r3, #4
 80048a8:	461a      	mov	r2, r3
 80048aa:	f00c fe4f 	bl	801154c <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 80048ae:	69bb      	ldr	r3, [r7, #24]
 80048b0:	68db      	ldr	r3, [r3, #12]
 80048b2:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80048b4:	69bb      	ldr	r3, [r7, #24]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	da03      	bge.n	80048c4 <low_level_output+0x80>
        {
          errval = ERR_USE;
 80048bc:	23f8      	movs	r3, #248	; 0xf8
 80048be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 80048c2:	e03d      	b.n	8004940 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 80048c4:	69bb      	ldr	r3, [r7, #24]
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 80048ca:	693a      	ldr	r2, [r7, #16]
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	4413      	add	r3, r2
 80048d0:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80048d4:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 80048d6:	68ba      	ldr	r2, [r7, #8]
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	1ad3      	subs	r3, r2, r3
 80048dc:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80048e0:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 80048e2:	697a      	ldr	r2, [r7, #20]
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	1ad3      	subs	r3, r2, r3
 80048e8:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80048ec:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 80048ee:	2300      	movs	r3, #0
 80048f0:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80048f2:	68fa      	ldr	r2, [r7, #12]
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	4413      	add	r3, r2
 80048f8:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d8c8      	bhi.n	8004892 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8004900:	69fa      	ldr	r2, [r7, #28]
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	18d0      	adds	r0, r2, r3
 8004906:	6a3b      	ldr	r3, [r7, #32]
 8004908:	685a      	ldr	r2, [r3, #4]
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	4413      	add	r3, r2
 800490e:	68fa      	ldr	r2, [r7, #12]
 8004910:	4619      	mov	r1, r3
 8004912:	f00c fe1b 	bl	801154c <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8004916:	693a      	ldr	r2, [r7, #16]
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	4413      	add	r3, r2
 800491c:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 800491e:	697a      	ldr	r2, [r7, #20]
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	4413      	add	r3, r2
 8004924:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8004926:	6a3b      	ldr	r3, [r7, #32]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	623b      	str	r3, [r7, #32]
 800492c:	6a3b      	ldr	r3, [r7, #32]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d1a1      	bne.n	8004876 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8004932:	6979      	ldr	r1, [r7, #20]
 8004934:	4811      	ldr	r0, [pc, #68]	; (800497c <low_level_output+0x138>)
 8004936:	f7fd fd25 	bl	8002384 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 800493a:	2300      	movs	r3, #0
 800493c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8004940:	4b0e      	ldr	r3, [pc, #56]	; (800497c <low_level_output+0x138>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004948:	3314      	adds	r3, #20
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f003 0320 	and.w	r3, r3, #32
 8004950:	2b00      	cmp	r3, #0
 8004952:	d00d      	beq.n	8004970 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8004954:	4b09      	ldr	r3, [pc, #36]	; (800497c <low_level_output+0x138>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800495c:	3314      	adds	r3, #20
 800495e:	2220      	movs	r2, #32
 8004960:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8004962:	4b06      	ldr	r3, [pc, #24]	; (800497c <low_level_output+0x138>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800496a:	3304      	adds	r3, #4
 800496c:	2200      	movs	r2, #0
 800496e:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8004970:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8004974:	4618      	mov	r0, r3
 8004976:	3728      	adds	r7, #40	; 0x28
 8004978:	46bd      	mov	sp, r7
 800497a:	bd80      	pop	{r7, pc}
 800497c:	2000296c 	.word	0x2000296c

08004980 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b08c      	sub	sp, #48	; 0x30
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004988:	2300      	movs	r3, #0
 800498a:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 800498c:	2300      	movs	r3, #0
 800498e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8004990:	2300      	movs	r3, #0
 8004992:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8004994:	2300      	movs	r3, #0
 8004996:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8004998:	2300      	movs	r3, #0
 800499a:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 800499c:	2300      	movs	r3, #0
 800499e:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 80049a0:	2300      	movs	r3, #0
 80049a2:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 80049a4:	484f      	ldr	r0, [pc, #316]	; (8004ae4 <low_level_input+0x164>)
 80049a6:	f7fd fdd7 	bl	8002558 <HAL_ETH_GetReceivedFrame>
 80049aa:	4603      	mov	r3, r0
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d001      	beq.n	80049b4 <low_level_input+0x34>

    return NULL;
 80049b0:	2300      	movs	r3, #0
 80049b2:	e092      	b.n	8004ada <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 80049b4:	4b4b      	ldr	r3, [pc, #300]	; (8004ae4 <low_level_input+0x164>)
 80049b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049b8:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 80049ba:	4b4a      	ldr	r3, [pc, #296]	; (8004ae4 <low_level_input+0x164>)
 80049bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049be:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 80049c0:	89fb      	ldrh	r3, [r7, #14]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d007      	beq.n	80049d6 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 80049c6:	89fb      	ldrh	r3, [r7, #14]
 80049c8:	f44f 72c1 	mov.w	r2, #386	; 0x182
 80049cc:	4619      	mov	r1, r3
 80049ce:	2000      	movs	r0, #0
 80049d0:	f003 f9ea 	bl	8007da8 <pbuf_alloc>
 80049d4:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 80049d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d04b      	beq.n	8004a74 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80049dc:	4b41      	ldr	r3, [pc, #260]	; (8004ae4 <low_level_input+0x164>)
 80049de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049e0:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 80049e2:	2300      	movs	r3, #0
 80049e4:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80049e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80049ea:	e040      	b.n	8004a6e <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 80049ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ee:	895b      	ldrh	r3, [r3, #10]
 80049f0:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 80049f2:	2300      	movs	r3, #0
 80049f4:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80049f6:	e021      	b.n	8004a3c <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 80049f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049fa:	685a      	ldr	r2, [r3, #4]
 80049fc:	69bb      	ldr	r3, [r7, #24]
 80049fe:	18d0      	adds	r0, r2, r3
 8004a00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a02:	69fb      	ldr	r3, [r7, #28]
 8004a04:	18d1      	adds	r1, r2, r3
 8004a06:	69fb      	ldr	r3, [r7, #28]
 8004a08:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8004a0c:	3304      	adds	r3, #4
 8004a0e:	461a      	mov	r2, r3
 8004a10:	f00c fd9c 	bl	801154c <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8004a14:	6a3b      	ldr	r3, [r7, #32]
 8004a16:	68db      	ldr	r3, [r3, #12]
 8004a18:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8004a1a:	6a3b      	ldr	r3, [r7, #32]
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8004a20:	69fa      	ldr	r2, [r7, #28]
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	4413      	add	r3, r2
 8004a26:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8004a2a:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8004a2c:	69ba      	ldr	r2, [r7, #24]
 8004a2e:	69fb      	ldr	r3, [r7, #28]
 8004a30:	1ad3      	subs	r3, r2, r3
 8004a32:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004a36:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8004a38:	2300      	movs	r3, #0
 8004a3a:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8004a3c:	697a      	ldr	r2, [r7, #20]
 8004a3e:	69fb      	ldr	r3, [r7, #28]
 8004a40:	4413      	add	r3, r2
 8004a42:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d8d6      	bhi.n	80049f8 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8004a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a4c:	685a      	ldr	r2, [r3, #4]
 8004a4e:	69bb      	ldr	r3, [r7, #24]
 8004a50:	18d0      	adds	r0, r2, r3
 8004a52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a54:	69fb      	ldr	r3, [r7, #28]
 8004a56:	4413      	add	r3, r2
 8004a58:	697a      	ldr	r2, [r7, #20]
 8004a5a:	4619      	mov	r1, r3
 8004a5c:	f00c fd76 	bl	801154c <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8004a60:	69fa      	ldr	r2, [r7, #28]
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	4413      	add	r3, r2
 8004a66:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8004a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d1bb      	bne.n	80049ec <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8004a74:	4b1b      	ldr	r3, [pc, #108]	; (8004ae4 <low_level_input+0x164>)
 8004a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a78:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	613b      	str	r3, [r7, #16]
 8004a7e:	e00b      	b.n	8004a98 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8004a80:	6a3b      	ldr	r3, [r7, #32]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004a88:	6a3b      	ldr	r3, [r7, #32]
 8004a8a:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8004a8c:	6a3b      	ldr	r3, [r7, #32]
 8004a8e:	68db      	ldr	r3, [r3, #12]
 8004a90:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	3301      	adds	r3, #1
 8004a96:	613b      	str	r3, [r7, #16]
 8004a98:	4b12      	ldr	r3, [pc, #72]	; (8004ae4 <low_level_input+0x164>)
 8004a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a9c:	693a      	ldr	r2, [r7, #16]
 8004a9e:	429a      	cmp	r2, r3
 8004aa0:	d3ee      	bcc.n	8004a80 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8004aa2:	4b10      	ldr	r3, [pc, #64]	; (8004ae4 <low_level_input+0x164>)
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8004aa8:	4b0e      	ldr	r3, [pc, #56]	; (8004ae4 <low_level_input+0x164>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ab0:	3314      	adds	r3, #20
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d00d      	beq.n	8004ad8 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8004abc:	4b09      	ldr	r3, [pc, #36]	; (8004ae4 <low_level_input+0x164>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ac4:	3314      	adds	r3, #20
 8004ac6:	2280      	movs	r2, #128	; 0x80
 8004ac8:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8004aca:	4b06      	ldr	r3, [pc, #24]	; (8004ae4 <low_level_input+0x164>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ad2:	3308      	adds	r3, #8
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	601a      	str	r2, [r3, #0]
  }
  return p;
 8004ad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	3730      	adds	r7, #48	; 0x30
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}
 8004ae2:	bf00      	nop
 8004ae4:	2000296c 	.word	0x2000296c

08004ae8 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b084      	sub	sp, #16
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 8004af0:	6878      	ldr	r0, [r7, #4]
 8004af2:	f7ff ff45 	bl	8004980 <low_level_input>
 8004af6:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d010      	beq.n	8004b20 <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	691b      	ldr	r3, [r3, #16]
 8004b02:	6879      	ldr	r1, [r7, #4]
 8004b04:	68f8      	ldr	r0, [r7, #12]
 8004b06:	4798      	blx	r3
 8004b08:	4603      	mov	r3, r0
 8004b0a:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 8004b0c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d006      	beq.n	8004b22 <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 8004b14:	68f8      	ldr	r0, [r7, #12]
 8004b16:	f003 fc2b 	bl	8008370 <pbuf_free>
    p = NULL;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	60fb      	str	r3, [r7, #12]
 8004b1e:	e000      	b.n	8004b22 <ethernetif_input+0x3a>
  if (p == NULL) return;
 8004b20:	bf00      	nop
  }
}
 8004b22:	3710      	adds	r7, #16
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}

08004b28 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b082      	sub	sp, #8
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d106      	bne.n	8004b44 <ethernetif_init+0x1c>
 8004b36:	4b0e      	ldr	r3, [pc, #56]	; (8004b70 <ethernetif_init+0x48>)
 8004b38:	f44f 7202 	mov.w	r2, #520	; 0x208
 8004b3c:	490d      	ldr	r1, [pc, #52]	; (8004b74 <ethernetif_init+0x4c>)
 8004b3e:	480e      	ldr	r0, [pc, #56]	; (8004b78 <ethernetif_init+0x50>)
 8004b40:	f00c fdde 	bl	8011700 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2273      	movs	r2, #115	; 0x73
 8004b48:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2274      	movs	r2, #116	; 0x74
 8004b50:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	4a09      	ldr	r2, [pc, #36]	; (8004b7c <ethernetif_init+0x54>)
 8004b58:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	4a08      	ldr	r2, [pc, #32]	; (8004b80 <ethernetif_init+0x58>)
 8004b5e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	f7ff fdc1 	bl	80046e8 <low_level_init>

  return ERR_OK;
 8004b66:	2300      	movs	r3, #0
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	3708      	adds	r7, #8
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}
 8004b70:	0801334c 	.word	0x0801334c
 8004b74:	08013368 	.word	0x08013368
 8004b78:	08013378 	.word	0x08013378
 8004b7c:	0800f7d9 	.word	0x0800f7d9
 8004b80:	08004845 	.word	0x08004845

08004b84 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004b88:	f7fd f874 	bl	8001c74 <HAL_GetTick>
 8004b8c:	4603      	mov	r3, r0
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	bd80      	pop	{r7, pc}
	...

08004b94 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b084      	sub	sp, #16
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004baa:	089b      	lsrs	r3, r3, #2
 8004bac:	f003 0301 	and.w	r3, r3, #1
 8004bb0:	b2db      	uxtb	r3, r3
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d05d      	beq.n	8004c72 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8004bb6:	4b34      	ldr	r3, [pc, #208]	; (8004c88 <ethernetif_update_config+0xf4>)
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d03f      	beq.n	8004c3e <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8004bbe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004bc2:	2100      	movs	r1, #0
 8004bc4:	4830      	ldr	r0, [pc, #192]	; (8004c88 <ethernetif_update_config+0xf4>)
 8004bc6:	f7fd fdb3 	bl	8002730 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 8004bca:	f7fd f853 	bl	8001c74 <HAL_GetTick>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8004bd2:	f107 0308 	add.w	r3, r7, #8
 8004bd6:	461a      	mov	r2, r3
 8004bd8:	2101      	movs	r1, #1
 8004bda:	482b      	ldr	r0, [pc, #172]	; (8004c88 <ethernetif_update_config+0xf4>)
 8004bdc:	f7fd fd40 	bl	8002660 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8004be0:	f7fd f848 	bl	8001c74 <HAL_GetTick>
 8004be4:	4602      	mov	r2, r0
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	1ad3      	subs	r3, r2, r3
 8004bea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004bee:	d828      	bhi.n	8004c42 <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	f003 0320 	and.w	r3, r3, #32
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d0eb      	beq.n	8004bd2 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8004bfa:	f107 0308 	add.w	r3, r7, #8
 8004bfe:	461a      	mov	r2, r3
 8004c00:	2110      	movs	r1, #16
 8004c02:	4821      	ldr	r0, [pc, #132]	; (8004c88 <ethernetif_update_config+0xf4>)
 8004c04:	f7fd fd2c 	bl	8002660 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	f003 0304 	and.w	r3, r3, #4
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d004      	beq.n	8004c1c <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8004c12:	4b1d      	ldr	r3, [pc, #116]	; (8004c88 <ethernetif_update_config+0xf4>)
 8004c14:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c18:	60da      	str	r2, [r3, #12]
 8004c1a:	e002      	b.n	8004c22 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8004c1c:	4b1a      	ldr	r3, [pc, #104]	; (8004c88 <ethernetif_update_config+0xf4>)
 8004c1e:	2200      	movs	r2, #0
 8004c20:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	f003 0302 	and.w	r3, r3, #2
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d003      	beq.n	8004c34 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8004c2c:	4b16      	ldr	r3, [pc, #88]	; (8004c88 <ethernetif_update_config+0xf4>)
 8004c2e:	2200      	movs	r2, #0
 8004c30:	609a      	str	r2, [r3, #8]
 8004c32:	e016      	b.n	8004c62 <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8004c34:	4b14      	ldr	r3, [pc, #80]	; (8004c88 <ethernetif_update_config+0xf4>)
 8004c36:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004c3a:	609a      	str	r2, [r3, #8]
 8004c3c:	e011      	b.n	8004c62 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8004c3e:	bf00      	nop
 8004c40:	e000      	b.n	8004c44 <ethernetif_update_config+0xb0>
          goto error;
 8004c42:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8004c44:	4b10      	ldr	r3, [pc, #64]	; (8004c88 <ethernetif_update_config+0xf4>)
 8004c46:	68db      	ldr	r3, [r3, #12]
 8004c48:	08db      	lsrs	r3, r3, #3
 8004c4a:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8004c4c:	4b0e      	ldr	r3, [pc, #56]	; (8004c88 <ethernetif_update_config+0xf4>)
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	085b      	lsrs	r3, r3, #1
 8004c52:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8004c54:	4313      	orrs	r3, r2
 8004c56:	b29b      	uxth	r3, r3
 8004c58:	461a      	mov	r2, r3
 8004c5a:	2100      	movs	r1, #0
 8004c5c:	480a      	ldr	r0, [pc, #40]	; (8004c88 <ethernetif_update_config+0xf4>)
 8004c5e:	f7fd fd67 	bl	8002730 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8004c62:	2100      	movs	r1, #0
 8004c64:	4808      	ldr	r0, [pc, #32]	; (8004c88 <ethernetif_update_config+0xf4>)
 8004c66:	f7fd fe27 	bl	80028b8 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8004c6a:	4807      	ldr	r0, [pc, #28]	; (8004c88 <ethernetif_update_config+0xf4>)
 8004c6c:	f7fd fdc6 	bl	80027fc <HAL_ETH_Start>
 8004c70:	e002      	b.n	8004c78 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8004c72:	4805      	ldr	r0, [pc, #20]	; (8004c88 <ethernetif_update_config+0xf4>)
 8004c74:	f7fd fdf1 	bl	800285a <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8004c78:	6878      	ldr	r0, [r7, #4]
 8004c7a:	f000 f807 	bl	8004c8c <ethernetif_notify_conn_changed>
}
 8004c7e:	bf00      	nop
 8004c80:	3710      	adds	r7, #16
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}
 8004c86:	bf00      	nop
 8004c88:	2000296c 	.word	0x2000296c

08004c8c <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b083      	sub	sp, #12
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8004c94:	bf00      	nop
 8004c96:	370c      	adds	r7, #12
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9e:	4770      	bx	lr

08004ca0 <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b084      	sub	sp, #16
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
 8004ca8:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d002      	beq.n	8004cb6 <fs_open+0x16>
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d102      	bne.n	8004cbc <fs_open+0x1c>
    return ERR_ARG;
 8004cb6:	f06f 030f 	mvn.w	r3, #15
 8004cba:	e028      	b.n	8004d0e <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 8004cbc:	4b16      	ldr	r3, [pc, #88]	; (8004d18 <fs_open+0x78>)
 8004cbe:	60fb      	str	r3, [r7, #12]
 8004cc0:	e020      	b.n	8004d04 <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	4619      	mov	r1, r3
 8004cc8:	6838      	ldr	r0, [r7, #0]
 8004cca:	f7fb fa81 	bl	80001d0 <strcmp>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d114      	bne.n	8004cfe <fs_open+0x5e>
      file->data = (const char *)f->data;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	689a      	ldr	r2, [r3, #8]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	68da      	ldr	r2, [r3, #12]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	68da      	ldr	r2, [r3, #12]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	7c1a      	ldrb	r2, [r3, #16]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	e007      	b.n	8004d0e <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	60fb      	str	r3, [r7, #12]
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d1db      	bne.n	8004cc2 <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 8004d0a:	f06f 0305 	mvn.w	r3, #5
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	3710      	adds	r7, #16
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}
 8004d16:	bf00      	nop
 8004d18:	08017600 	.word	0x08017600

08004d1c <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b083      	sub	sp, #12
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 8004d24:	bf00      	nop
 8004d26:	370c      	adds	r7, #12
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2e:	4770      	bx	lr

08004d30 <fs_bytes_left>:
}
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
 8004d30:	b480      	push	{r7}
 8004d32:	b083      	sub	sp, #12
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
  return file->len - file->index;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	685a      	ldr	r2, [r3, #4]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	689b      	ldr	r3, [r3, #8]
 8004d40:	1ad3      	subs	r3, r2, r3
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	370c      	adds	r7, #12
 8004d46:	46bd      	mov	sp, r7
 8004d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4c:	4770      	bx	lr

08004d4e <http_ssi_state_alloc>:

#if LWIP_HTTPD_SSI
/** Allocate as struct http_ssi_state. */
static struct http_ssi_state *
http_ssi_state_alloc(void)
{
 8004d4e:	b580      	push	{r7, lr}
 8004d50:	b082      	sub	sp, #8
 8004d52:	af00      	add	r7, sp, #0
  struct http_ssi_state *ret = HTTP_ALLOC_SSI_STATE();
 8004d54:	f640 30d8 	movw	r0, #3032	; 0xbd8
 8004d58:	f002 fb3e 	bl	80073d8 <mem_malloc>
 8004d5c:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(1);
    ret = HTTP_ALLOC_SSI_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d005      	beq.n	8004d70 <http_ssi_state_alloc+0x22>
    memset(ret, 0, sizeof(struct http_ssi_state));
 8004d64:	f640 32d8 	movw	r2, #3032	; 0xbd8
 8004d68:	2100      	movs	r1, #0
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f00c fc16 	bl	801159c <memset>
  }
  return ret;
 8004d70:	687b      	ldr	r3, [r7, #4]
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	3708      	adds	r7, #8
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}

08004d7a <http_ssi_state_free>:

/** Free a struct http_ssi_state. */
static void
http_ssi_state_free(struct http_ssi_state *ssi)
{
 8004d7a:	b580      	push	{r7, lr}
 8004d7c:	b082      	sub	sp, #8
 8004d7e:	af00      	add	r7, sp, #0
 8004d80:	6078      	str	r0, [r7, #4]
  if (ssi != NULL) {
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d002      	beq.n	8004d8e <http_ssi_state_free+0x14>
    HTTP_FREE_SSI_STATE(ssi);
 8004d88:	6878      	ldr	r0, [r7, #4]
 8004d8a:	f002 f9bf 	bl	800710c <mem_free>
  }
}
 8004d8e:	bf00      	nop
 8004d90:	3708      	adds	r7, #8
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}

08004d96 <http_state_init>:

/** Initialize a struct http_state.
 */
static void
http_state_init(struct http_state *hs)
{
 8004d96:	b580      	push	{r7, lr}
 8004d98:	b082      	sub	sp, #8
 8004d9a:	af00      	add	r7, sp, #0
 8004d9c:	6078      	str	r0, [r7, #4]
  /* Initialize the structure. */
  memset(hs, 0, sizeof(struct http_state));
 8004d9e:	f241 6238 	movw	r2, #5688	; 0x1638
 8004da2:	2100      	movs	r1, #0
 8004da4:	6878      	ldr	r0, [r7, #4]
 8004da6:	f00c fbf9 	bl	801159c <memset>
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Indicate that the headers are not yet valid */
  hs->hdr_index = NUM_FILE_HDR_STRINGS;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	f503 53b1 	add.w	r3, r3, #5664	; 0x1620
 8004db0:	3312      	adds	r3, #18
 8004db2:	2205      	movs	r2, #5
 8004db4:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */
}
 8004db6:	bf00      	nop
 8004db8:	3708      	adds	r7, #8
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}

08004dbe <http_state_alloc>:

/** Allocate a struct http_state. */
static struct http_state *
http_state_alloc(void)
{
 8004dbe:	b580      	push	{r7, lr}
 8004dc0:	b082      	sub	sp, #8
 8004dc2:	af00      	add	r7, sp, #0
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 8004dc4:	f241 6038 	movw	r0, #5688	; 0x1638
 8004dc8:	f002 fb06 	bl	80073d8 <mem_malloc>
 8004dcc:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(0);
    ret = HTTP_ALLOC_HTTP_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d002      	beq.n	8004dda <http_state_alloc+0x1c>
    http_state_init(ret);
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	f7ff ffde 	bl	8004d96 <http_state_init>
    http_add_connection(ret);
  }
  return ret;
 8004dda:	687b      	ldr	r3, [r7, #4]
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	3708      	adds	r7, #8
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd80      	pop	{r7, pc}

08004de4 <http_state_eof>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_eof(struct http_state *hs)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b082      	sub	sp, #8
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  if (hs->handle) {
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	695b      	ldr	r3, [r3, #20]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d007      	beq.n	8004e04 <http_state_eof+0x20>
    u32_t ms_needed = sys_now() - hs->time_started;
    u32_t needed = LWIP_MAX(1, (ms_needed / 100));
    LWIP_DEBUGF(HTTPD_DEBUG_TIMING, ("httpd: needed %"U32_F" ms to send file of %d bytes -> %"U32_F" bytes/sec\n",
                                     ms_needed, hs->handle->len, ((((u32_t)hs->handle->len) * 10) / needed)));
#endif /* LWIP_HTTPD_TIMING */
    fs_close(hs->handle);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	695b      	ldr	r3, [r3, #20]
 8004df8:	4618      	mov	r0, r3
 8004dfa:	f7ff ff8f 	bl	8004d1c <fs_close>
    hs->handle = NULL;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2200      	movs	r2, #0
 8004e02:	615a      	str	r2, [r3, #20]
    mem_free(hs->buf);
    hs->buf = NULL;
  }
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */
#if LWIP_HTTPD_SSI
  if (hs->ssi) {
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d007      	beq.n	8004e1c <http_state_eof+0x38>
    http_ssi_state_free(hs->ssi);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e10:	4618      	mov	r0, r3
 8004e12:	f7ff ffb2 	bl	8004d7a <http_ssi_state_free>
    hs->ssi = NULL;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
#endif /* LWIP_HTTPD_SSI */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  if (hs->req) {
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6a1b      	ldr	r3, [r3, #32]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d007      	beq.n	8004e34 <http_state_eof+0x50>
    pbuf_free(hs->req);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6a1b      	ldr	r3, [r3, #32]
 8004e28:	4618      	mov	r0, r3
 8004e2a:	f003 faa1 	bl	8008370 <pbuf_free>
    hs->req = NULL;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2200      	movs	r2, #0
 8004e32:	621a      	str	r2, [r3, #32]
  }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 8004e34:	bf00      	nop
 8004e36:	3708      	adds	r7, #8
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bd80      	pop	{r7, pc}

08004e3c <http_state_free>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_free(struct http_state *hs)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b082      	sub	sp, #8
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  if (hs != NULL) {
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d005      	beq.n	8004e56 <http_state_free+0x1a>
    http_state_eof(hs);
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f7ff ffca 	bl	8004de4 <http_state_eof>
    http_remove_connection(hs);
    HTTP_FREE_HTTP_STATE(hs);
 8004e50:	6878      	ldr	r0, [r7, #4]
 8004e52:	f002 f95b 	bl	800710c <mem_free>
  }
}
 8004e56:	bf00      	nop
 8004e58:	3708      	adds	r7, #8
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}
	...

08004e60 <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct altcp_pcb *pcb, const void *ptr, u16_t *length, u8_t apiflags)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b086      	sub	sp, #24
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	60f8      	str	r0, [r7, #12]
 8004e68:	60b9      	str	r1, [r7, #8]
 8004e6a:	607a      	str	r2, [r7, #4]
 8004e6c:	70fb      	strb	r3, [r7, #3]
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d106      	bne.n	8004e82 <http_write+0x22>
 8004e74:	4b2c      	ldr	r3, [pc, #176]	; (8004f28 <http_write+0xc8>)
 8004e76:	f240 2219 	movw	r2, #537	; 0x219
 8004e7a:	492c      	ldr	r1, [pc, #176]	; (8004f2c <http_write+0xcc>)
 8004e7c:	482c      	ldr	r0, [pc, #176]	; (8004f30 <http_write+0xd0>)
 8004e7e:	f00c fc3f 	bl	8011700 <iprintf>
  len = *length;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	881b      	ldrh	r3, [r3, #0]
 8004e86:	82fb      	strh	r3, [r7, #22]
  if (len == 0) {
 8004e88:	8afb      	ldrh	r3, [r7, #22]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d101      	bne.n	8004e92 <http_write+0x32>
    return ERR_OK;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	e045      	b.n	8004f1e <http_write+0xbe>
  }
  /* We cannot send more data than space available in the send buffer. */
  max_len = altcp_sndbuf(pcb);
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8004e98:	82bb      	strh	r3, [r7, #20]
  if (max_len < len) {
 8004e9a:	8aba      	ldrh	r2, [r7, #20]
 8004e9c:	8afb      	ldrh	r3, [r7, #22]
 8004e9e:	429a      	cmp	r2, r3
 8004ea0:	d201      	bcs.n	8004ea6 <http_write+0x46>
    len = max_len;
 8004ea2:	8abb      	ldrh	r3, [r7, #20]
 8004ea4:	82fb      	strh	r3, [r7, #22]
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004eaa:	005b      	lsls	r3, r3, #1
 8004eac:	82bb      	strh	r3, [r7, #20]
  if (len > max_len) {
 8004eae:	8afa      	ldrh	r2, [r7, #22]
 8004eb0:	8abb      	ldrh	r3, [r7, #20]
 8004eb2:	429a      	cmp	r2, r3
 8004eb4:	d901      	bls.n	8004eba <http_write+0x5a>
    len = max_len;
 8004eb6:	8abb      	ldrh	r3, [r7, #20]
 8004eb8:	82fb      	strh	r3, [r7, #22]
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying to send %d bytes\n", len));
    err = altcp_write(pcb, ptr, len, apiflags);
 8004eba:	78fb      	ldrb	r3, [r7, #3]
 8004ebc:	8afa      	ldrh	r2, [r7, #22]
 8004ebe:	68b9      	ldr	r1, [r7, #8]
 8004ec0:	68f8      	ldr	r0, [r7, #12]
 8004ec2:	f007 ffd9 	bl	800ce78 <tcp_write>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_MEM) {
 8004eca:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004ece:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ed2:	d10f      	bne.n	8004ef4 <http_write+0x94>
      if ((altcp_sndbuf(pcb) == 0) ||
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d004      	beq.n	8004ee8 <http_write+0x88>
          (altcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      if ((altcp_sndbuf(pcb) == 0) ||
 8004ee4:	2b08      	cmp	r3, #8
 8004ee6:	d902      	bls.n	8004eee <http_write+0x8e>
        /* no need to try smaller sizes */
        len = 1;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	82fb      	strh	r3, [r7, #22]
 8004eec:	e002      	b.n	8004ef4 <http_write+0x94>
      } else {
        len /= 2;
 8004eee:	8afb      	ldrh	r3, [r7, #22]
 8004ef0:	085b      	lsrs	r3, r3, #1
 8004ef2:	82fb      	strh	r3, [r7, #22]
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE,
                  ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));
 8004ef4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004ef8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004efc:	d102      	bne.n	8004f04 <http_write+0xa4>
 8004efe:	8afb      	ldrh	r3, [r7, #22]
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d8da      	bhi.n	8004eba <http_write+0x5a>

  if (err == ERR_OK) {
 8004f04:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d103      	bne.n	8004f14 <http_write+0xb4>
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	8afa      	ldrh	r2, [r7, #22]
 8004f10:	801a      	strh	r2, [r3, #0]
 8004f12:	e002      	b.n	8004f1a <http_write+0xba>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2200      	movs	r2, #0
 8004f18:	801a      	strh	r2, [r3, #0]
     when all data has been enqueued but the connection stays open for the next
     request */
  altcp_nagle_enable(pcb);
#endif

  return err;
 8004f1a:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	3718      	adds	r7, #24
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}
 8004f26:	bf00      	nop
 8004f28:	08013870 	.word	0x08013870
 8004f2c:	080138a8 	.word	0x080138a8
 8004f30:	080138b8 	.word	0x080138b8

08004f34 <http_close_or_abort_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_or_abort_conn(struct altcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b086      	sub	sp, #24
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	60f8      	str	r0, [r7, #12]
 8004f3c:	60b9      	str	r1, [r7, #8]
 8004f3e:	4613      	mov	r3, r2
 8004f40:	71fb      	strb	r3, [r7, #7]
  err_t err;
  LWIP_DEBUGF(HTTPD_DEBUG, ("Closing connection %p\n", (void *)pcb));

#if LWIP_HTTPD_SUPPORT_POST
  if (hs != NULL) {
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d00e      	beq.n	8004f66 <http_close_or_abort_conn+0x32>
    if ((hs->post_content_len_left != 0)
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	f503 53b1 	add.w	r3, r3, #5664	; 0x1620
 8004f4e:	3314      	adds	r3, #20
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d007      	beq.n	8004f66 <http_close_or_abort_conn+0x32>
#if LWIP_HTTPD_POST_MANUAL_WND
        || ((hs->no_auto_wnd != 0) && (hs->unrecved_bytes != 0))
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
       ) {
      /* make sure the post code knows that the connection is closed */
      http_uri_buf[0] = 0;
 8004f56:	4b1f      	ldr	r3, [pc, #124]	; (8004fd4 <http_close_or_abort_conn+0xa0>)
 8004f58:	2200      	movs	r2, #0
 8004f5a:	701a      	strb	r2, [r3, #0]
      httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 8004f5c:	223f      	movs	r2, #63	; 0x3f
 8004f5e:	491d      	ldr	r1, [pc, #116]	; (8004fd4 <http_close_or_abort_conn+0xa0>)
 8004f60:	68b8      	ldr	r0, [r7, #8]
 8004f62:	f7fb fe73 	bl	8000c4c <httpd_post_finished>
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_POST*/


  altcp_arg(pcb, NULL);
 8004f66:	2100      	movs	r1, #0
 8004f68:	68f8      	ldr	r0, [r7, #12]
 8004f6a:	f005 f847 	bl	8009ffc <tcp_arg>
  altcp_recv(pcb, NULL);
 8004f6e:	2100      	movs	r1, #0
 8004f70:	68f8      	ldr	r0, [r7, #12]
 8004f72:	f005 f855 	bl	800a020 <tcp_recv>
  altcp_err(pcb, NULL);
 8004f76:	2100      	movs	r1, #0
 8004f78:	68f8      	ldr	r0, [r7, #12]
 8004f7a:	f005 f895 	bl	800a0a8 <tcp_err>
  altcp_poll(pcb, NULL, 0);
 8004f7e:	2200      	movs	r2, #0
 8004f80:	2100      	movs	r1, #0
 8004f82:	68f8      	ldr	r0, [r7, #12]
 8004f84:	f005 f8ca 	bl	800a11c <tcp_poll>
  altcp_sent(pcb, NULL);
 8004f88:	2100      	movs	r1, #0
 8004f8a:	68f8      	ldr	r0, [r7, #12]
 8004f8c:	f005 f86a 	bl	800a064 <tcp_sent>
  if (hs != NULL) {
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d002      	beq.n	8004f9c <http_close_or_abort_conn+0x68>
    http_state_free(hs);
 8004f96:	68b8      	ldr	r0, [r7, #8]
 8004f98:	f7ff ff50 	bl	8004e3c <http_state_free>
  }

  if (abort_conn) {
 8004f9c:	79fb      	ldrb	r3, [r7, #7]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d004      	beq.n	8004fac <http_close_or_abort_conn+0x78>
    altcp_abort(pcb);
 8004fa2:	68f8      	ldr	r0, [r7, #12]
 8004fa4:	f003 ff6c 	bl	8008e80 <tcp_abort>
    return ERR_OK;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	e00f      	b.n	8004fcc <http_close_or_abort_conn+0x98>
  }
  err = altcp_close(pcb);
 8004fac:	68f8      	ldr	r0, [r7, #12]
 8004fae:	f003 fe7d 	bl	8008cac <tcp_close>
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 8004fb6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d004      	beq.n	8004fc8 <http_close_or_abort_conn+0x94>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error %d closing %p\n", err, (void *)pcb));
    /* error closing, try again later in poll */
    altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 8004fbe:	2204      	movs	r2, #4
 8004fc0:	4905      	ldr	r1, [pc, #20]	; (8004fd8 <http_close_or_abort_conn+0xa4>)
 8004fc2:	68f8      	ldr	r0, [r7, #12]
 8004fc4:	f005 f8aa 	bl	800a11c <tcp_poll>
  }
  return err;
 8004fc8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	3718      	adds	r7, #24
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}
 8004fd4:	200004c0 	.word	0x200004c0
 8004fd8:	08006857 	.word	0x08006857

08004fdc <http_close_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_conn(struct altcp_pcb *pcb, struct http_state *hs)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b082      	sub	sp, #8
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
 8004fe4:	6039      	str	r1, [r7, #0]
  return http_close_or_abort_conn(pcb, hs, 0);
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	6839      	ldr	r1, [r7, #0]
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f7ff ffa2 	bl	8004f34 <http_close_or_abort_conn>
 8004ff0:	4603      	mov	r3, r0
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	3708      	adds	r7, #8
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}

08004ffa <http_eof>:
/** End of file: either close the connection (Connection: close) or
 * close the file (Connection: keep-alive)
 */
static void
http_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 8004ffa:	b580      	push	{r7, lr}
 8004ffc:	b082      	sub	sp, #8
 8004ffe:	af00      	add	r7, sp, #0
 8005000:	6078      	str	r0, [r7, #4]
 8005002:	6039      	str	r1, [r7, #0]
    /* ensure nagle doesn't interfere with sending all data as fast as possible: */
    altcp_nagle_disable(pcb);
  } else
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  {
    http_close_conn(pcb, hs);
 8005004:	6839      	ldr	r1, [r7, #0]
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f7ff ffe8 	bl	8004fdc <http_close_conn>
  }
}
 800500c:	bf00      	nop
 800500e:	3708      	adds	r7, #8
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}

08005014 <extract_uri_parameters>:
 * @param params pointer to the NULL-terminated parameter string from the URI
 * @return number of parameters extracted
 */
static int
extract_uri_parameters(struct http_state *hs, char *params)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b086      	sub	sp, #24
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
 800501c:	6039      	str	r1, [r7, #0]
  int loop;

  LWIP_UNUSED_ARG(hs);

  /* If we have no parameters at all, return immediately. */
  if (!params || (params[0] == '\0')) {
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d003      	beq.n	800502c <extract_uri_parameters+0x18>
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	781b      	ldrb	r3, [r3, #0]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d101      	bne.n	8005030 <extract_uri_parameters+0x1c>
    return (0);
 800502c:	2300      	movs	r3, #0
 800502e:	e04e      	b.n	80050ce <extract_uri_parameters+0xba>
  }

  /* Get a pointer to our first parameter */
  pair = params;
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	617b      	str	r3, [r7, #20]

  /* Parse up to LWIP_HTTPD_MAX_CGI_PARAMETERS from the passed string and ignore the
   * remainder (if any) */
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 8005034:	2300      	movs	r3, #0
 8005036:	613b      	str	r3, [r7, #16]
 8005038:	e041      	b.n	80050be <extract_uri_parameters+0xaa>

    /* Save the name of the parameter */
    http_cgi_params[loop] = pair;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	693a      	ldr	r2, [r7, #16]
 800503e:	320c      	adds	r2, #12
 8005040:	6979      	ldr	r1, [r7, #20]
 8005042:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Remember the start of this name=value pair */
    equals = pair;
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	60fb      	str	r3, [r7, #12]

    /* Find the start of the next name=value pair and replace the delimiter
     * with a 0 to terminate the previous pair string. */
    pair = strchr(pair, '&');
 800504a:	2126      	movs	r1, #38	; 0x26
 800504c:	6978      	ldr	r0, [r7, #20]
 800504e:	f00c fc64 	bl	801191a <strchr>
 8005052:	6178      	str	r0, [r7, #20]
    if (pair) {
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d006      	beq.n	8005068 <extract_uri_parameters+0x54>
      *pair = '\0';
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	2200      	movs	r2, #0
 800505e:	701a      	strb	r2, [r3, #0]
      pair++;
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	3301      	adds	r3, #1
 8005064:	617b      	str	r3, [r7, #20]
 8005066:	e00c      	b.n	8005082 <extract_uri_parameters+0x6e>
    } else {
      /* We didn't find a new parameter so find the end of the URI and
       * replace the space with a '\0' */
      pair = strchr(equals, ' ');
 8005068:	2120      	movs	r1, #32
 800506a:	68f8      	ldr	r0, [r7, #12]
 800506c:	f00c fc55 	bl	801191a <strchr>
 8005070:	6178      	str	r0, [r7, #20]
      if (pair) {
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d002      	beq.n	800507e <extract_uri_parameters+0x6a>
        *pair = '\0';
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	2200      	movs	r2, #0
 800507c:	701a      	strb	r2, [r3, #0]
      }

      /* Revert to NULL so that we exit the loop as expected. */
      pair = NULL;
 800507e:	2300      	movs	r3, #0
 8005080:	617b      	str	r3, [r7, #20]
    }

    /* Now find the '=' in the previous pair, replace it with '\0' and save
     * the parameter value string. */
    equals = strchr(equals, '=');
 8005082:	213d      	movs	r1, #61	; 0x3d
 8005084:	68f8      	ldr	r0, [r7, #12]
 8005086:	f00c fc48 	bl	801191a <strchr>
 800508a:	60f8      	str	r0, [r7, #12]
    if (equals) {
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d00b      	beq.n	80050aa <extract_uri_parameters+0x96>
      *equals = '\0';
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	2200      	movs	r2, #0
 8005096:	701a      	strb	r2, [r3, #0]
      http_cgi_param_vals[loop] = equals + 1;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	1c59      	adds	r1, r3, #1
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	693a      	ldr	r2, [r7, #16]
 80050a0:	f502 7232 	add.w	r2, r2, #712	; 0x2c8
 80050a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80050a8:	e006      	b.n	80050b8 <extract_uri_parameters+0xa4>
    } else {
      http_cgi_param_vals[loop] = NULL;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	693a      	ldr	r2, [r7, #16]
 80050ae:	f502 7232 	add.w	r2, r2, #712	; 0x2c8
 80050b2:	2100      	movs	r1, #0
 80050b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	3301      	adds	r3, #1
 80050bc:	613b      	str	r3, [r7, #16]
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80050c4:	da02      	bge.n	80050cc <extract_uri_parameters+0xb8>
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d1b6      	bne.n	800503a <extract_uri_parameters+0x26>
    }
  }

  return loop;
 80050cc:	693b      	ldr	r3, [r7, #16]
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	3718      	adds	r7, #24
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}
	...

080050d8 <get_tag_insert>:
 *
 * @param hs http connection state
 */
static void
get_tag_insert(struct http_state *hs)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b086      	sub	sp, #24
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  struct http_ssi_state *ssi;
#if LWIP_HTTPD_SSI_MULTIPART
  u16_t current_tag_part;
#endif /* LWIP_HTTPD_SSI_MULTIPART */

  LWIP_ASSERT("hs != NULL", hs != NULL);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d106      	bne.n	80050f4 <get_tag_insert+0x1c>
 80050e6:	4b54      	ldr	r3, [pc, #336]	; (8005238 <get_tag_insert+0x160>)
 80050e8:	f44f 7241 	mov.w	r2, #772	; 0x304
 80050ec:	4953      	ldr	r1, [pc, #332]	; (800523c <get_tag_insert+0x164>)
 80050ee:	4854      	ldr	r0, [pc, #336]	; (8005240 <get_tag_insert+0x168>)
 80050f0:	f00c fb06 	bl	8011700 <iprintf>
  ssi = hs->ssi;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050f8:	613b      	str	r3, [r7, #16]
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d106      	bne.n	800510e <get_tag_insert+0x36>
 8005100:	4b4d      	ldr	r3, [pc, #308]	; (8005238 <get_tag_insert+0x160>)
 8005102:	f240 3206 	movw	r2, #774	; 0x306
 8005106:	494f      	ldr	r1, [pc, #316]	; (8005244 <get_tag_insert+0x16c>)
 8005108:	484d      	ldr	r0, [pc, #308]	; (8005240 <get_tag_insert+0x168>)
 800510a:	f00c faf9 	bl	8011700 <iprintf>
#endif /* LWIP_HTTPD_SSI_MULTIPART */
#if LWIP_HTTPD_SSI_RAW
  tag = ssi->tag_name;
#endif

  if (httpd_ssi_handler
 800510e:	4b4e      	ldr	r3, [pc, #312]	; (8005248 <get_tag_insert+0x170>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d02f      	beq.n	8005176 <get_tag_insert+0x9e>
#if !LWIP_HTTPD_SSI_RAW
      && httpd_tags && httpd_num_tags
 8005116:	4b4d      	ldr	r3, [pc, #308]	; (800524c <get_tag_insert+0x174>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d02b      	beq.n	8005176 <get_tag_insert+0x9e>
 800511e:	4b4c      	ldr	r3, [pc, #304]	; (8005250 <get_tag_insert+0x178>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d027      	beq.n	8005176 <get_tag_insert+0x9e>

    /* Find this tag in the list we have been provided. */
#if LWIP_HTTPD_SSI_RAW
    {
#else /* LWIP_HTTPD_SSI_RAW */
    for (tag = 0; tag < httpd_num_tags; tag++) {
 8005126:	2300      	movs	r3, #0
 8005128:	617b      	str	r3, [r7, #20]
 800512a:	e01f      	b.n	800516c <get_tag_insert+0x94>
      if (strcmp(ssi->tag_name, httpd_tags[tag]) == 0)
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	f103 0012 	add.w	r0, r3, #18
 8005132:	4b46      	ldr	r3, [pc, #280]	; (800524c <get_tag_insert+0x174>)
 8005134:	681a      	ldr	r2, [r3, #0]
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	009b      	lsls	r3, r3, #2
 800513a:	4413      	add	r3, r2
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4619      	mov	r1, r3
 8005140:	f7fb f846 	bl	80001d0 <strcmp>
 8005144:	4603      	mov	r3, r0
 8005146:	2b00      	cmp	r3, #0
 8005148:	d10d      	bne.n	8005166 <get_tag_insert+0x8e>
#endif /* LWIP_HTTPD_SSI_RAW */
      {
        ssi->tag_insert_len = httpd_ssi_handler(tag, ssi->tag_insert,
 800514a:	4b3f      	ldr	r3, [pc, #252]	; (8005248 <get_tag_insert+0x170>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	693a      	ldr	r2, [r7, #16]
 8005150:	f102 011b 	add.w	r1, r2, #27
 8005154:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8005158:	6978      	ldr	r0, [r7, #20]
 800515a:	4798      	blx	r3
 800515c:	4603      	mov	r3, r0
 800515e:	461a      	mov	r2, r3
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	81da      	strh	r2, [r3, #14]
                                             );
#if LWIP_HTTPD_SSI_RAW
        if (ssi->tag_insert_len != HTTPD_SSI_TAG_UNKNOWN)
#endif /* LWIP_HTTPD_SSI_RAW */
        {
          return;
 8005164:	e065      	b.n	8005232 <get_tag_insert+0x15a>
    for (tag = 0; tag < httpd_num_tags; tag++) {
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	3301      	adds	r3, #1
 800516a:	617b      	str	r3, [r7, #20]
 800516c:	4b38      	ldr	r3, [pc, #224]	; (8005250 <get_tag_insert+0x178>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	697a      	ldr	r2, [r7, #20]
 8005172:	429a      	cmp	r2, r3
 8005174:	dbda      	blt.n	800512c <get_tag_insert+0x54>
   * marker. */
#define UNKNOWN_TAG1_TEXT "<b>***UNKNOWN TAG "
#define UNKNOWN_TAG1_LEN  18
#define UNKNOWN_TAG2_TEXT "***</b>"
#define UNKNOWN_TAG2_LEN  7
  len = LWIP_MIN(sizeof(ssi->tag_name), LWIP_MIN(strlen(ssi->tag_name),
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	3312      	adds	r3, #18
 800517a:	4618      	mov	r0, r3
 800517c:	f7fb f832 	bl	80001e4 <strlen>
 8005180:	4603      	mov	r3, r0
 8005182:	f640 329e 	movw	r2, #2974	; 0xb9e
 8005186:	4293      	cmp	r3, r2
 8005188:	d81b      	bhi.n	80051c2 <get_tag_insert+0xea>
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	3312      	adds	r3, #18
 800518e:	4618      	mov	r0, r3
 8005190:	f7fb f828 	bl	80001e4 <strlen>
 8005194:	4603      	mov	r3, r0
 8005196:	2b09      	cmp	r3, #9
 8005198:	d813      	bhi.n	80051c2 <get_tag_insert+0xea>
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	3312      	adds	r3, #18
 800519e:	4618      	mov	r0, r3
 80051a0:	f7fb f820 	bl	80001e4 <strlen>
 80051a4:	4603      	mov	r3, r0
 80051a6:	f640 329e 	movw	r2, #2974	; 0xb9e
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d806      	bhi.n	80051bc <get_tag_insert+0xe4>
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	3312      	adds	r3, #18
 80051b2:	4618      	mov	r0, r3
 80051b4:	f7fb f816 	bl	80001e4 <strlen>
 80051b8:	4603      	mov	r3, r0
 80051ba:	e003      	b.n	80051c4 <get_tag_insert+0xec>
 80051bc:	f640 339f 	movw	r3, #2975	; 0xb9f
 80051c0:	e000      	b.n	80051c4 <get_tag_insert+0xec>
 80051c2:	2309      	movs	r3, #9
 80051c4:	60fb      	str	r3, [r7, #12]
                 LWIP_HTTPD_MAX_TAG_INSERT_LEN - (UNKNOWN_TAG1_LEN + UNKNOWN_TAG2_LEN)));
  MEMCPY(ssi->tag_insert, UNKNOWN_TAG1_TEXT, UNKNOWN_TAG1_LEN);
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	331b      	adds	r3, #27
 80051ca:	2212      	movs	r2, #18
 80051cc:	4921      	ldr	r1, [pc, #132]	; (8005254 <get_tag_insert+0x17c>)
 80051ce:	4618      	mov	r0, r3
 80051d0:	f00c f9bc 	bl	801154c <memcpy>
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN], ssi->tag_name, len);
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	f103 002d 	add.w	r0, r3, #45	; 0x2d
 80051da:	693b      	ldr	r3, [r7, #16]
 80051dc:	3312      	adds	r3, #18
 80051de:	68fa      	ldr	r2, [r7, #12]
 80051e0:	4619      	mov	r1, r3
 80051e2:	f00c f9b3 	bl	801154c <memcpy>
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN + len], UNKNOWN_TAG2_TEXT, UNKNOWN_TAG2_LEN);
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	3312      	adds	r3, #18
 80051ea:	3318      	adds	r3, #24
 80051ec:	693a      	ldr	r2, [r7, #16]
 80051ee:	4413      	add	r3, r2
 80051f0:	3303      	adds	r3, #3
 80051f2:	2207      	movs	r2, #7
 80051f4:	4918      	ldr	r1, [pc, #96]	; (8005258 <get_tag_insert+0x180>)
 80051f6:	4618      	mov	r0, r3
 80051f8:	f00c f9a8 	bl	801154c <memcpy>
  ssi->tag_insert[UNKNOWN_TAG1_LEN + len + UNKNOWN_TAG2_LEN] = 0;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	3319      	adds	r3, #25
 8005200:	693a      	ldr	r2, [r7, #16]
 8005202:	4413      	add	r3, r2
 8005204:	2200      	movs	r2, #0
 8005206:	76da      	strb	r2, [r3, #27]

  len = strlen(ssi->tag_insert);
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	331b      	adds	r3, #27
 800520c:	4618      	mov	r0, r3
 800520e:	f7fa ffe9 	bl	80001e4 <strlen>
 8005212:	60f8      	str	r0, [r7, #12]
  LWIP_ASSERT("len <= 0xffff", len <= 0xffff);
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800521a:	d306      	bcc.n	800522a <get_tag_insert+0x152>
 800521c:	4b06      	ldr	r3, [pc, #24]	; (8005238 <get_tag_insert+0x160>)
 800521e:	f240 323f 	movw	r2, #831	; 0x33f
 8005222:	490e      	ldr	r1, [pc, #56]	; (800525c <get_tag_insert+0x184>)
 8005224:	4806      	ldr	r0, [pc, #24]	; (8005240 <get_tag_insert+0x168>)
 8005226:	f00c fa6b 	bl	8011700 <iprintf>
  ssi->tag_insert_len = (u16_t)len;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	b29a      	uxth	r2, r3
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	81da      	strh	r2, [r3, #14]
}
 8005232:	3718      	adds	r7, #24
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}
 8005238:	08013870 	.word	0x08013870
 800523c:	080138e0 	.word	0x080138e0
 8005240:	080138b8 	.word	0x080138b8
 8005244:	080138ec 	.word	0x080138ec
 8005248:	20000500 	.word	0x20000500
 800524c:	20000508 	.word	0x20000508
 8005250:	20000504 	.word	0x20000504
 8005254:	080138f8 	.word	0x080138f8
 8005258:	0801390c 	.word	0x0801390c
 800525c:	08013914 	.word	0x08013914

08005260 <get_http_headers>:
 * Generate the relevant HTTP headers for the given filename and write
 * them into the supplied buffer.
 */
static void
get_http_headers(struct http_state *hs, const char *uri)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b086      	sub	sp, #24
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
 8005268:	6039      	str	r1, [r7, #0]
  char *ext;
  char *vars;

  /* In all cases, the second header we send is the server identification
     so set it here. */
  hs->hdrs[HDR_STRINGS_IDX_SERVER_NAME] = g_psHTTPHeaderStrings[HTTP_HDR_SERVER];
 800526a:	4a63      	ldr	r2, [pc, #396]	; (80053f8 <get_http_headers+0x198>)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	f503 53b0 	add.w	r3, r3, #5632	; 0x1600
 8005272:	3314      	adds	r3, #20
 8005274:	601a      	str	r2, [r3, #0]
  hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_KEEPALIVE] = NULL;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	f503 53b0 	add.w	r3, r3, #5632	; 0x1600
 800527c:	3318      	adds	r3, #24
 800527e:	2200      	movs	r2, #0
 8005280:	601a      	str	r2, [r3, #0]
  hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_NR] = NULL;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	f503 53b0 	add.w	r3, r3, #5632	; 0x1600
 8005288:	331c      	adds	r3, #28
 800528a:	2200      	movs	r2, #0
 800528c:	601a      	str	r2, [r3, #0]

  /* Is this a normal file or the special case we use to send back the
     default "404: Page not found" response? */
  if (uri == NULL) {
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d117      	bne.n	80052c4 <get_http_headers+0x64>
    hs->hdrs[HDR_STRINGS_IDX_HTTP_STATUS] = g_psHTTPHeaderStrings[HTTP_HDR_NOT_FOUND];
 8005294:	4a59      	ldr	r2, [pc, #356]	; (80053fc <get_http_headers+0x19c>)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	f503 53b0 	add.w	r3, r3, #5632	; 0x1600
 800529c:	3310      	adds	r3, #16
 800529e:	601a      	str	r2, [r3, #0]
    if (hs->keepalive) {
      hs->hdrs[HDR_STRINGS_IDX_CONTENT_TYPE] = g_psHTTPHeaderStrings[DEFAULT_404_HTML_PERSISTENT];
    } else
#endif
    {
      hs->hdrs[HDR_STRINGS_IDX_CONTENT_TYPE] = g_psHTTPHeaderStrings[DEFAULT_404_HTML];
 80052a0:	4a57      	ldr	r2, [pc, #348]	; (8005400 <get_http_headers+0x1a0>)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	f503 53b1 	add.w	r3, r3, #5664	; 0x1620
 80052a8:	601a      	str	r2, [r3, #0]
    }

    /* Set up to send the first header string. */
    hs->hdr_index = 0;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	f503 53b1 	add.w	r3, r3, #5664	; 0x1620
 80052b0:	3312      	adds	r3, #18
 80052b2:	2200      	movs	r2, #0
 80052b4:	801a      	strh	r2, [r3, #0]
    hs->hdr_pos = 0;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	f503 53b1 	add.w	r3, r3, #5664	; 0x1620
 80052bc:	3310      	adds	r3, #16
 80052be:	2200      	movs	r2, #0
 80052c0:	801a      	strh	r2, [r3, #0]
    return;
 80052c2:	e096      	b.n	80053f2 <get_http_headers+0x192>
  }
  /* We are dealing with a particular filename. Look for one other
      special case.  We assume that any filename with "404" in it must be
      indicative of a 404 server error whereas all other files require
      the 200 OK header. */
  if (strstr(uri, "404")) {
 80052c4:	494f      	ldr	r1, [pc, #316]	; (8005404 <get_http_headers+0x1a4>)
 80052c6:	6838      	ldr	r0, [r7, #0]
 80052c8:	f00c fb61 	bl	801198e <strstr>
 80052cc:	4603      	mov	r3, r0
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d006      	beq.n	80052e0 <get_http_headers+0x80>
    hs->hdrs[HDR_STRINGS_IDX_HTTP_STATUS] = g_psHTTPHeaderStrings[HTTP_HDR_NOT_FOUND];
 80052d2:	4a4a      	ldr	r2, [pc, #296]	; (80053fc <get_http_headers+0x19c>)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	f503 53b0 	add.w	r3, r3, #5632	; 0x1600
 80052da:	3310      	adds	r3, #16
 80052dc:	601a      	str	r2, [r3, #0]
 80052de:	e021      	b.n	8005324 <get_http_headers+0xc4>
  } else if (strstr(uri, "400")) {
 80052e0:	4949      	ldr	r1, [pc, #292]	; (8005408 <get_http_headers+0x1a8>)
 80052e2:	6838      	ldr	r0, [r7, #0]
 80052e4:	f00c fb53 	bl	801198e <strstr>
 80052e8:	4603      	mov	r3, r0
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d006      	beq.n	80052fc <get_http_headers+0x9c>
    hs->hdrs[HDR_STRINGS_IDX_HTTP_STATUS] = g_psHTTPHeaderStrings[HTTP_HDR_BAD_REQUEST];
 80052ee:	4a47      	ldr	r2, [pc, #284]	; (800540c <get_http_headers+0x1ac>)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	f503 53b0 	add.w	r3, r3, #5632	; 0x1600
 80052f6:	3310      	adds	r3, #16
 80052f8:	601a      	str	r2, [r3, #0]
 80052fa:	e013      	b.n	8005324 <get_http_headers+0xc4>
  } else if (strstr(uri, "501")) {
 80052fc:	4944      	ldr	r1, [pc, #272]	; (8005410 <get_http_headers+0x1b0>)
 80052fe:	6838      	ldr	r0, [r7, #0]
 8005300:	f00c fb45 	bl	801198e <strstr>
 8005304:	4603      	mov	r3, r0
 8005306:	2b00      	cmp	r3, #0
 8005308:	d006      	beq.n	8005318 <get_http_headers+0xb8>
    hs->hdrs[HDR_STRINGS_IDX_HTTP_STATUS] = g_psHTTPHeaderStrings[HTTP_HDR_NOT_IMPL];
 800530a:	4a42      	ldr	r2, [pc, #264]	; (8005414 <get_http_headers+0x1b4>)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	f503 53b0 	add.w	r3, r3, #5632	; 0x1600
 8005312:	3310      	adds	r3, #16
 8005314:	601a      	str	r2, [r3, #0]
 8005316:	e005      	b.n	8005324 <get_http_headers+0xc4>
  } else {
    hs->hdrs[HDR_STRINGS_IDX_HTTP_STATUS] = g_psHTTPHeaderStrings[HTTP_HDR_OK];
 8005318:	4a3f      	ldr	r2, [pc, #252]	; (8005418 <get_http_headers+0x1b8>)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	f503 53b0 	add.w	r3, r3, #5632	; 0x1600
 8005320:	3310      	adds	r3, #16
 8005322:	601a      	str	r2, [r3, #0]
  }

  /* Determine if the URI has any variables and, if so, temporarily remove
      them. */
  vars = strchr(uri, '?');
 8005324:	213f      	movs	r1, #63	; 0x3f
 8005326:	6838      	ldr	r0, [r7, #0]
 8005328:	f00c faf7 	bl	801191a <strchr>
 800532c:	60b8      	str	r0, [r7, #8]
  if (vars) {
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d002      	beq.n	800533a <get_http_headers+0xda>
    *vars = '\0';
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	2200      	movs	r2, #0
 8005338:	701a      	strb	r2, [r3, #0]
  }

  /* Get a pointer to the file extension.  We find this by looking for the
      last occurrence of "." in the filename passed. */
  ext = NULL;
 800533a:	2300      	movs	r3, #0
 800533c:	60fb      	str	r3, [r7, #12]
  tmp = strchr(uri, '.');
 800533e:	212e      	movs	r1, #46	; 0x2e
 8005340:	6838      	ldr	r0, [r7, #0]
 8005342:	f00c faea 	bl	801191a <strchr>
 8005346:	6138      	str	r0, [r7, #16]
  while (tmp) {
 8005348:	e007      	b.n	800535a <get_http_headers+0xfa>
    ext = tmp + 1;
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	3301      	adds	r3, #1
 800534e:	60fb      	str	r3, [r7, #12]
    tmp = strchr(ext, '.');
 8005350:	212e      	movs	r1, #46	; 0x2e
 8005352:	68f8      	ldr	r0, [r7, #12]
 8005354:	f00c fae1 	bl	801191a <strchr>
 8005358:	6138      	str	r0, [r7, #16]
  while (tmp) {
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d1f4      	bne.n	800534a <get_http_headers+0xea>
  }
  if (ext != NULL) {
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d014      	beq.n	8005390 <get_http_headers+0x130>
    /* Now determine the content type and add the relevant header for that. */
    for (content_type = 0; content_type < NUM_HTTP_HEADERS; content_type++) {
 8005366:	2300      	movs	r3, #0
 8005368:	617b      	str	r3, [r7, #20]
 800536a:	e00d      	b.n	8005388 <get_http_headers+0x128>
      /* Have we found a matching extension? */
      if (!lwip_stricmp(g_psHTTPHeaders[content_type].extension, ext)) {
 800536c:	4a2b      	ldr	r2, [pc, #172]	; (800541c <get_http_headers+0x1bc>)
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005374:	68f9      	ldr	r1, [r7, #12]
 8005376:	4618      	mov	r0, r3
 8005378:	f001 fccc 	bl	8006d14 <lwip_stricmp>
 800537c:	4603      	mov	r3, r0
 800537e:	2b00      	cmp	r3, #0
 8005380:	d009      	beq.n	8005396 <get_http_headers+0x136>
    for (content_type = 0; content_type < NUM_HTTP_HEADERS; content_type++) {
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	3301      	adds	r3, #1
 8005386:	617b      	str	r3, [r7, #20]
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	2b13      	cmp	r3, #19
 800538c:	d9ee      	bls.n	800536c <get_http_headers+0x10c>
 800538e:	e003      	b.n	8005398 <get_http_headers+0x138>
        break;
      }
    }
  } else {
    content_type = NUM_HTTP_HEADERS;
 8005390:	2314      	movs	r3, #20
 8005392:	617b      	str	r3, [r7, #20]
 8005394:	e000      	b.n	8005398 <get_http_headers+0x138>
        break;
 8005396:	bf00      	nop
  }

  /* Reinstate the parameter marker if there was one in the original URI. */
  if (vars) {
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d002      	beq.n	80053a4 <get_http_headers+0x144>
    *vars = '?';
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	223f      	movs	r2, #63	; 0x3f
 80053a2:	701a      	strb	r2, [r3, #0]
    hs->hdr_index = NUM_FILE_HDR_STRINGS;
    return;
  }
#endif /* LWIP_HTTPD_OMIT_HEADER_FOR_EXTENSIONLESS_URI */
  /* Did we find a matching extension? */
  if (content_type < NUM_HTTP_HEADERS) {
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	2b13      	cmp	r3, #19
 80053a8:	d809      	bhi.n	80053be <get_http_headers+0x15e>
    /* yes, store it */
    hs->hdrs[HDR_STRINGS_IDX_CONTENT_TYPE] = g_psHTTPHeaders[content_type].content_type;
 80053aa:	4a1c      	ldr	r2, [pc, #112]	; (800541c <get_http_headers+0x1bc>)
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	00db      	lsls	r3, r3, #3
 80053b0:	4413      	add	r3, r2
 80053b2:	685a      	ldr	r2, [r3, #4]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	f503 53b1 	add.w	r3, r3, #5664	; 0x1620
 80053ba:	601a      	str	r2, [r3, #0]
 80053bc:	e00d      	b.n	80053da <get_http_headers+0x17a>
  } else if (!ext) {
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d105      	bne.n	80053d0 <get_http_headers+0x170>
    /* no, no extension found -> use binary transfer to prevent the browser adding '.txt' on save */
    hs->hdrs[HDR_STRINGS_IDX_CONTENT_TYPE] = HTTP_HDR_APP;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	f503 53b1 	add.w	r3, r3, #5664	; 0x1620
 80053ca:	4a15      	ldr	r2, [pc, #84]	; (8005420 <get_http_headers+0x1c0>)
 80053cc:	601a      	str	r2, [r3, #0]
 80053ce:	e004      	b.n	80053da <get_http_headers+0x17a>
  } else {
    /* No - use the default, plain text file type. */
    hs->hdrs[HDR_STRINGS_IDX_CONTENT_TYPE] = HTTP_HDR_DEFAULT_TYPE;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	f503 53b1 	add.w	r3, r3, #5664	; 0x1620
 80053d6:	4a13      	ldr	r2, [pc, #76]	; (8005424 <get_http_headers+0x1c4>)
 80053d8:	601a      	str	r2, [r3, #0]
  }
  /* Set up to send the first header string. */
  hs->hdr_index = 0;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	f503 53b1 	add.w	r3, r3, #5664	; 0x1620
 80053e0:	3312      	adds	r3, #18
 80053e2:	2200      	movs	r2, #0
 80053e4:	801a      	strh	r2, [r3, #0]
  hs->hdr_pos = 0;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	f503 53b1 	add.w	r3, r3, #5664	; 0x1620
 80053ec:	3310      	adds	r3, #16
 80053ee:	2200      	movs	r2, #0
 80053f0:	801a      	strh	r2, [r3, #0]
}
 80053f2:	3718      	adds	r7, #24
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bd80      	pop	{r7, pc}
 80053f8:	080134f0 	.word	0x080134f0
 80053fc:	080133b4 	.word	0x080133b4
 8005400:	08013530 	.word	0x08013530
 8005404:	08013924 	.word	0x08013924
 8005408:	08013928 	.word	0x08013928
 800540c:	080133d4 	.word	0x080133d4
 8005410:	0801392c 	.word	0x0801392c
 8005414:	080133f0 	.word	0x080133f0
 8005418:	080133a0 	.word	0x080133a0
 800541c:	08017614 	.word	0x08017614
 8005420:	080136c4 	.word	0x080136c4
 8005424:	08013930 	.word	0x08013930

08005428 <get_http_content_length>:

/* Add content-length header? */
static void
get_http_content_length(struct http_state *hs)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b084      	sub	sp, #16
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
  u8_t add_content_len = 0;
 8005430:	2300      	movs	r3, #0
 8005432:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("already been here?", hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_KEEPALIVE] == NULL);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	f503 53b0 	add.w	r3, r3, #5632	; 0x1600
 800543a:	3318      	adds	r3, #24
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d006      	beq.n	8005450 <get_http_content_length+0x28>
 8005442:	4b2b      	ldr	r3, [pc, #172]	; (80054f0 <get_http_content_length+0xc8>)
 8005444:	f44f 726e 	mov.w	r2, #952	; 0x3b8
 8005448:	492a      	ldr	r1, [pc, #168]	; (80054f4 <get_http_content_length+0xcc>)
 800544a:	482b      	ldr	r0, [pc, #172]	; (80054f8 <get_http_content_length+0xd0>)
 800544c:	f00c f958 	bl	8011700 <iprintf>

  add_content_len = 0;
 8005450:	2300      	movs	r3, #0
 8005452:	73fb      	strb	r3, [r7, #15]
#if LWIP_HTTPD_SSI
  if (hs->ssi == NULL) /* @todo: get maximum file length from SSI */
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005458:	2b00      	cmp	r3, #0
 800545a:	d10c      	bne.n	8005476 <get_http_content_length+0x4e>
#endif /* LWIP_HTTPD_SSI */
  {
    if ((hs->handle != NULL) && (hs->handle->flags & FS_FILE_FLAGS_HEADER_PERSISTENT)) {
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	695b      	ldr	r3, [r3, #20]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d008      	beq.n	8005476 <get_http_content_length+0x4e>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	695b      	ldr	r3, [r3, #20]
 8005468:	7c1b      	ldrb	r3, [r3, #16]
 800546a:	f003 0302 	and.w	r3, r3, #2
 800546e:	2b00      	cmp	r3, #0
 8005470:	d001      	beq.n	8005476 <get_http_content_length+0x4e>
      add_content_len = 1;
 8005472:	2301      	movs	r3, #1
 8005474:	73fb      	strb	r3, [r7, #15]
    }
  }
  if (add_content_len) {
 8005476:	7bfb      	ldrb	r3, [r7, #15]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d02c      	beq.n	80054d6 <get_http_content_length+0xae>
    size_t len;
    lwip_itoa(hs->hdr_content_len, (size_t)LWIP_HTTPD_MAX_CONTENT_LEN_SIZE,
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	f503 53b1 	add.w	r3, r3, #5664	; 0x1620
 8005482:	3304      	adds	r3, #4
              hs->handle->len);
 8005484:	687a      	ldr	r2, [r7, #4]
 8005486:	6952      	ldr	r2, [r2, #20]
    lwip_itoa(hs->hdr_content_len, (size_t)LWIP_HTTPD_MAX_CONTENT_LEN_SIZE,
 8005488:	6852      	ldr	r2, [r2, #4]
 800548a:	210c      	movs	r1, #12
 800548c:	4618      	mov	r0, r3
 800548e:	f001 fc75 	bl	8006d7c <lwip_itoa>
    len = strlen(hs->hdr_content_len);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	f503 53b1 	add.w	r3, r3, #5664	; 0x1620
 8005498:	3304      	adds	r3, #4
 800549a:	4618      	mov	r0, r3
 800549c:	f7fa fea2 	bl	80001e4 <strlen>
 80054a0:	60b8      	str	r0, [r7, #8]
    if (len <= LWIP_HTTPD_MAX_CONTENT_LEN_SIZE - LWIP_HTTPD_MAX_CONTENT_LEN_OFFSET) {
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	2b09      	cmp	r3, #9
 80054a6:	d814      	bhi.n	80054d2 <get_http_content_length+0xaa>
      SMEMCPY(&hs->hdr_content_len[len], CRLF, 3);
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	f503 53b1 	add.w	r3, r3, #5664	; 0x1620
 80054ae:	687a      	ldr	r2, [r7, #4]
 80054b0:	4413      	add	r3, r2
 80054b2:	3304      	adds	r3, #4
 80054b4:	2203      	movs	r2, #3
 80054b6:	4911      	ldr	r1, [pc, #68]	; (80054fc <get_http_content_length+0xd4>)
 80054b8:	4618      	mov	r0, r3
 80054ba:	f00c f847 	bl	801154c <memcpy>
      hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_NR] = hs->hdr_content_len;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	f503 52b1 	add.w	r2, r3, #5664	; 0x1620
 80054c4:	3204      	adds	r2, #4
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	f503 53b0 	add.w	r3, r3, #5632	; 0x1600
 80054cc:	331c      	adds	r3, #28
 80054ce:	601a      	str	r2, [r3, #0]
 80054d0:	e001      	b.n	80054d6 <get_http_content_length+0xae>
    } else {
      add_content_len = 0;
 80054d2:	2300      	movs	r3, #0
 80054d4:	73fb      	strb	r3, [r7, #15]
  } else {
    hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_KEEPALIVE] = g_psHTTPHeaderStrings[HTTP_HDR_CONN_CLOSE];
    hs->keepalive = 0;
  }
#else /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  if (add_content_len) {
 80054d6:	7bfb      	ldrb	r3, [r7, #15]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d005      	beq.n	80054e8 <get_http_content_length+0xc0>
    hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_KEEPALIVE] = g_psHTTPHeaderStrings[HTTP_HDR_CONTENT_LENGTH];
 80054dc:	4a08      	ldr	r2, [pc, #32]	; (8005500 <get_http_content_length+0xd8>)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	f503 53b0 	add.w	r3, r3, #5632	; 0x1600
 80054e4:	3318      	adds	r3, #24
 80054e6:	601a      	str	r2, [r3, #0]
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
}
 80054e8:	bf00      	nop
 80054ea:	3710      	adds	r7, #16
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bd80      	pop	{r7, pc}
 80054f0:	08013870 	.word	0x08013870
 80054f4:	08013950 	.word	0x08013950
 80054f8:	080138b8 	.word	0x080138b8
 80054fc:	08013964 	.word	0x08013964
 8005500:	08013480 	.word	0x08013480

08005504 <http_send_headers>:
 *                                      so don't send HTTP body yet
 *           - HTTP_DATA_TO_SEND_FREED: http_state and pcb are already freed
 */
static u8_t
http_send_headers(struct altcp_pcb *pcb, struct http_state *hs)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b088      	sub	sp, #32
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
 800550c:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 800550e:	2300      	movs	r3, #0
 8005510:	777b      	strb	r3, [r7, #29]
  u16_t hdrlen, sendlen;

  if (hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_KEEPALIVE] == NULL) {
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	f503 53b0 	add.w	r3, r3, #5632	; 0x1600
 8005518:	3318      	adds	r3, #24
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d102      	bne.n	8005526 <http_send_headers+0x22>
    /* set up "content-length" and "connection:" headers */
    get_http_content_length(hs);
 8005520:	6838      	ldr	r0, [r7, #0]
 8005522:	f7ff ff81 	bl	8005428 <get_http_content_length>
  }

  /* How much data can we send? */
  len = altcp_sndbuf(pcb);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800552c:	83fb      	strh	r3, [r7, #30]
  sendlen = len;
 800552e:	8bfb      	ldrh	r3, [r7, #30]
 8005530:	81fb      	strh	r3, [r7, #14]

  while (len && (hs->hdr_index < NUM_FILE_HDR_STRINGS) && sendlen) {
 8005532:	e0ae      	b.n	8005692 <http_send_headers+0x18e>
    const void *ptr;
    u16_t old_sendlen;
    u8_t apiflags;
    /* How much do we have to send from the current header? */
    hdrlen = (u16_t)strlen(hs->hdrs[hs->hdr_index]);
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	f503 53b1 	add.w	r3, r3, #5664	; 0x1620
 800553a:	3312      	adds	r3, #18
 800553c:	881b      	ldrh	r3, [r3, #0]
 800553e:	461a      	mov	r2, r3
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	f202 5284 	addw	r2, r2, #1412	; 0x584
 8005546:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800554a:	4618      	mov	r0, r3
 800554c:	f7fa fe4a 	bl	80001e4 <strlen>
 8005550:	4603      	mov	r3, r0
 8005552:	837b      	strh	r3, [r7, #26]

    /* How much of this can we send? */
    sendlen = (len < (hdrlen - hs->hdr_pos)) ? len : (hdrlen - hs->hdr_pos);
 8005554:	8b7a      	ldrh	r2, [r7, #26]
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	f503 53b1 	add.w	r3, r3, #5664	; 0x1620
 800555c:	3310      	adds	r3, #16
 800555e:	881b      	ldrh	r3, [r3, #0]
 8005560:	1ad2      	subs	r2, r2, r3
 8005562:	8bfb      	ldrh	r3, [r7, #30]
 8005564:	4293      	cmp	r3, r2
 8005566:	bfa8      	it	ge
 8005568:	4613      	movge	r3, r2
 800556a:	b29b      	uxth	r3, r3
 800556c:	81fb      	strh	r3, [r7, #14]

    /* Send this amount of data or as much as we can given memory
     * constraints. */
    ptr = (const void *)(hs->hdrs[hs->hdr_index] + hs->hdr_pos);
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	f503 53b1 	add.w	r3, r3, #5664	; 0x1620
 8005574:	3312      	adds	r3, #18
 8005576:	881b      	ldrh	r3, [r3, #0]
 8005578:	461a      	mov	r2, r3
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	f202 5284 	addw	r2, r2, #1412	; 0x584
 8005580:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	f503 53b1 	add.w	r3, r3, #5664	; 0x1620
 800558a:	3310      	adds	r3, #16
 800558c:	881b      	ldrh	r3, [r3, #0]
 800558e:	4413      	add	r3, r2
 8005590:	617b      	str	r3, [r7, #20]
    old_sendlen = sendlen;
 8005592:	89fb      	ldrh	r3, [r7, #14]
 8005594:	827b      	strh	r3, [r7, #18]
    apiflags = HTTP_IS_HDR_VOLATILE(hs, ptr);
 8005596:	2300      	movs	r3, #0
 8005598:	773b      	strb	r3, [r7, #28]
    if (hs->hdr_index == HDR_STRINGS_IDX_CONTENT_LEN_NR) {
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	f503 53b1 	add.w	r3, r3, #5664	; 0x1620
 80055a0:	3312      	adds	r3, #18
 80055a2:	881b      	ldrh	r3, [r3, #0]
 80055a4:	2b03      	cmp	r3, #3
 80055a6:	d103      	bne.n	80055b0 <http_send_headers+0xac>
      /* content-length is always volatile */
      apiflags |= TCP_WRITE_FLAG_COPY;
 80055a8:	7f3b      	ldrb	r3, [r7, #28]
 80055aa:	f043 0301 	orr.w	r3, r3, #1
 80055ae:	773b      	strb	r3, [r7, #28]
    }
    if (hs->hdr_index < NUM_FILE_HDR_STRINGS - 1) {
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	f503 53b1 	add.w	r3, r3, #5664	; 0x1620
 80055b6:	3312      	adds	r3, #18
 80055b8:	881b      	ldrh	r3, [r3, #0]
 80055ba:	2b03      	cmp	r3, #3
 80055bc:	d803      	bhi.n	80055c6 <http_send_headers+0xc2>
      apiflags |= TCP_WRITE_FLAG_MORE;
 80055be:	7f3b      	ldrb	r3, [r7, #28]
 80055c0:	f043 0302 	orr.w	r3, r3, #2
 80055c4:	773b      	strb	r3, [r7, #28]
    }
    err = http_write(pcb, ptr, &sendlen, apiflags);
 80055c6:	7f3b      	ldrb	r3, [r7, #28]
 80055c8:	f107 020e 	add.w	r2, r7, #14
 80055cc:	6979      	ldr	r1, [r7, #20]
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f7ff fc46 	bl	8004e60 <http_write>
 80055d4:	4603      	mov	r3, r0
 80055d6:	747b      	strb	r3, [r7, #17]
    if ((err == ERR_OK) && (old_sendlen != sendlen)) {
 80055d8:	f997 3011 	ldrsb.w	r3, [r7, #17]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d106      	bne.n	80055ee <http_send_headers+0xea>
 80055e0:	89fb      	ldrh	r3, [r7, #14]
 80055e2:	8a7a      	ldrh	r2, [r7, #18]
 80055e4:	429a      	cmp	r2, r3
 80055e6:	d002      	beq.n	80055ee <http_send_headers+0xea>
      /* Remember that we added some more data to be transmitted. */
      data_to_send = HTTP_DATA_TO_SEND_CONTINUE;
 80055e8:	2301      	movs	r3, #1
 80055ea:	777b      	strb	r3, [r7, #29]
 80055ec:	e005      	b.n	80055fa <http_send_headers+0xf6>
    } else if (err != ERR_OK) {
 80055ee:	f997 3011 	ldrsb.w	r3, [r7, #17]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d001      	beq.n	80055fa <http_send_headers+0xf6>
      /* special case: http_write does not try to send 1 byte */
      sendlen = 0;
 80055f6:	2300      	movs	r3, #0
 80055f8:	81fb      	strh	r3, [r7, #14]
    }

    /* Fix up the header position for the next time round. */
    hs->hdr_pos += sendlen;
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	f503 53b1 	add.w	r3, r3, #5664	; 0x1620
 8005600:	3310      	adds	r3, #16
 8005602:	881a      	ldrh	r2, [r3, #0]
 8005604:	89fb      	ldrh	r3, [r7, #14]
 8005606:	4413      	add	r3, r2
 8005608:	b29a      	uxth	r2, r3
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	f503 53b1 	add.w	r3, r3, #5664	; 0x1620
 8005610:	3310      	adds	r3, #16
 8005612:	801a      	strh	r2, [r3, #0]
    len -= sendlen;
 8005614:	89fb      	ldrh	r3, [r7, #14]
 8005616:	8bfa      	ldrh	r2, [r7, #30]
 8005618:	1ad3      	subs	r3, r2, r3
 800561a:	83fb      	strh	r3, [r7, #30]

    /* Have we finished sending this string? */
    if (hs->hdr_pos == hdrlen) {
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	f503 53b1 	add.w	r3, r3, #5664	; 0x1620
 8005622:	3310      	adds	r3, #16
 8005624:	881b      	ldrh	r3, [r3, #0]
 8005626:	8b7a      	ldrh	r2, [r7, #26]
 8005628:	429a      	cmp	r2, r3
 800562a:	d132      	bne.n	8005692 <http_send_headers+0x18e>
      /* Yes - move on to the next one */
      hs->hdr_index++;
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	f503 53b1 	add.w	r3, r3, #5664	; 0x1620
 8005632:	3312      	adds	r3, #18
 8005634:	881b      	ldrh	r3, [r3, #0]
 8005636:	3301      	adds	r3, #1
 8005638:	b29a      	uxth	r2, r3
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	f503 53b1 	add.w	r3, r3, #5664	; 0x1620
 8005640:	3312      	adds	r3, #18
 8005642:	801a      	strh	r2, [r3, #0]
      /* skip headers that are NULL (not all headers are required) */
      while ((hs->hdr_index < NUM_FILE_HDR_STRINGS) &&
 8005644:	e00b      	b.n	800565e <http_send_headers+0x15a>
             (hs->hdrs[hs->hdr_index] == NULL)) {
        hs->hdr_index++;
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	f503 53b1 	add.w	r3, r3, #5664	; 0x1620
 800564c:	3312      	adds	r3, #18
 800564e:	881b      	ldrh	r3, [r3, #0]
 8005650:	3301      	adds	r3, #1
 8005652:	b29a      	uxth	r2, r3
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	f503 53b1 	add.w	r3, r3, #5664	; 0x1620
 800565a:	3312      	adds	r3, #18
 800565c:	801a      	strh	r2, [r3, #0]
      while ((hs->hdr_index < NUM_FILE_HDR_STRINGS) &&
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	f503 53b1 	add.w	r3, r3, #5664	; 0x1620
 8005664:	3312      	adds	r3, #18
 8005666:	881b      	ldrh	r3, [r3, #0]
 8005668:	2b04      	cmp	r3, #4
 800566a:	d80c      	bhi.n	8005686 <http_send_headers+0x182>
             (hs->hdrs[hs->hdr_index] == NULL)) {
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	f503 53b1 	add.w	r3, r3, #5664	; 0x1620
 8005672:	3312      	adds	r3, #18
 8005674:	881b      	ldrh	r3, [r3, #0]
 8005676:	461a      	mov	r2, r3
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	f202 5284 	addw	r2, r2, #1412	; 0x584
 800567e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
      while ((hs->hdr_index < NUM_FILE_HDR_STRINGS) &&
 8005682:	2b00      	cmp	r3, #0
 8005684:	d0df      	beq.n	8005646 <http_send_headers+0x142>
      }
      hs->hdr_pos = 0;
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	f503 53b1 	add.w	r3, r3, #5664	; 0x1620
 800568c:	3310      	adds	r3, #16
 800568e:	2200      	movs	r2, #0
 8005690:	801a      	strh	r2, [r3, #0]
  while (len && (hs->hdr_index < NUM_FILE_HDR_STRINGS) && sendlen) {
 8005692:	8bfb      	ldrh	r3, [r7, #30]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d00a      	beq.n	80056ae <http_send_headers+0x1aa>
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	f503 53b1 	add.w	r3, r3, #5664	; 0x1620
 800569e:	3312      	adds	r3, #18
 80056a0:	881b      	ldrh	r3, [r3, #0]
 80056a2:	2b04      	cmp	r3, #4
 80056a4:	d803      	bhi.n	80056ae <http_send_headers+0x1aa>
 80056a6:	89fb      	ldrh	r3, [r7, #14]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	f47f af43 	bne.w	8005534 <http_send_headers+0x30>
    }
  }

  if ((hs->hdr_index >= NUM_FILE_HDR_STRINGS) && (hs->file == NULL)) {
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	f503 53b1 	add.w	r3, r3, #5664	; 0x1620
 80056b4:	3312      	adds	r3, #18
 80056b6:	881b      	ldrh	r3, [r3, #0]
 80056b8:	2b04      	cmp	r3, #4
 80056ba:	d90f      	bls.n	80056dc <http_send_headers+0x1d8>
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	699b      	ldr	r3, [r3, #24]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d10b      	bne.n	80056dc <http_send_headers+0x1d8>
    /* When we are at the end of the headers, check for data to send
     * instead of waiting for ACK from remote side to continue
     * (which would happen when sending files from async read). */
    if (http_check_eof(pcb, hs)) {
 80056c4:	6839      	ldr	r1, [r7, #0]
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f000 f81a 	bl	8005700 <http_check_eof>
 80056cc:	4603      	mov	r3, r0
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d002      	beq.n	80056d8 <http_send_headers+0x1d4>
      data_to_send = HTTP_DATA_TO_SEND_BREAK;
 80056d2:	2302      	movs	r3, #2
 80056d4:	777b      	strb	r3, [r7, #29]
 80056d6:	e001      	b.n	80056dc <http_send_headers+0x1d8>
    } else {
      /* At this point, for non-keepalive connections, hs is deallocated an
         pcb is closed. */
      return HTTP_DATA_TO_SEND_FREED;
 80056d8:	2303      	movs	r3, #3
 80056da:	e00d      	b.n	80056f8 <http_send_headers+0x1f4>
  }
  /* If we get here and there are still header bytes to send, we send
   * the header information we just wrote immediately. If there are no
   * more headers to send, but we do have file data to send, drop through
   * to try to send some file data too. */
  if ((hs->hdr_index < NUM_FILE_HDR_STRINGS) || !hs->file) {
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	f503 53b1 	add.w	r3, r3, #5664	; 0x1620
 80056e2:	3312      	adds	r3, #18
 80056e4:	881b      	ldrh	r3, [r3, #0]
 80056e6:	2b04      	cmp	r3, #4
 80056e8:	d903      	bls.n	80056f2 <http_send_headers+0x1ee>
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	699b      	ldr	r3, [r3, #24]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d101      	bne.n	80056f6 <http_send_headers+0x1f2>
    LWIP_DEBUGF(HTTPD_DEBUG, ("tcp_output\n"));
    return HTTP_DATA_TO_SEND_BREAK;
 80056f2:	2302      	movs	r3, #2
 80056f4:	e000      	b.n	80056f8 <http_send_headers+0x1f4>
  }
  return data_to_send;
 80056f6:	7f7b      	ldrb	r3, [r7, #29]
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	3720      	adds	r7, #32
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd80      	pop	{r7, pc}

08005700 <http_check_eof>:
 * @returns: 0 if the file is finished or no data has been read
 *           1 if the file is not finished and data has been read
 */
static u8_t
http_check_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b084      	sub	sp, #16
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
 8005708:	6039      	str	r1, [r7, #0]
  int max_write_len;
#endif /* HTTPD_MAX_WRITE_LEN */
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */

  /* Do we have a valid file handle? */
  if (hs->handle == NULL) {
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	695b      	ldr	r3, [r3, #20]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d105      	bne.n	800571e <http_check_eof+0x1e>
    /* No - close the connection. */
    http_eof(pcb, hs);
 8005712:	6839      	ldr	r1, [r7, #0]
 8005714:	6878      	ldr	r0, [r7, #4]
 8005716:	f7ff fc70 	bl	8004ffa <http_eof>
    return 0;
 800571a:	2300      	movs	r3, #0
 800571c:	e016      	b.n	800574c <http_check_eof+0x4c>
  }
  bytes_left = fs_bytes_left(hs->handle);
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	695b      	ldr	r3, [r3, #20]
 8005722:	4618      	mov	r0, r3
 8005724:	f7ff fb04 	bl	8004d30 <fs_bytes_left>
 8005728:	60f8      	str	r0, [r7, #12]
  if (bytes_left <= 0) {
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	2b00      	cmp	r3, #0
 800572e:	dc05      	bgt.n	800573c <http_check_eof+0x3c>
    /* We reached the end of the file so this request is done. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 8005730:	6839      	ldr	r1, [r7, #0]
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f7ff fc61 	bl	8004ffa <http_eof>
    return 0;
 8005738:	2300      	movs	r3, #0
 800573a:	e007      	b.n	800574c <http_check_eof+0x4c>
    hs->ssi->parse_left = count;
    hs->ssi->parsed = hs->buf;
  }
#endif /* LWIP_HTTPD_SSI */
#else /* LWIP_HTTPD_DYNAMIC_FILE_READ */
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 800573c:	4b05      	ldr	r3, [pc, #20]	; (8005754 <http_check_eof+0x54>)
 800573e:	f240 429d 	movw	r2, #1181	; 0x49d
 8005742:	4905      	ldr	r1, [pc, #20]	; (8005758 <http_check_eof+0x58>)
 8005744:	4805      	ldr	r0, [pc, #20]	; (800575c <http_check_eof+0x5c>)
 8005746:	f00b ffdb 	bl	8011700 <iprintf>
#endif /* LWIP_HTTPD_SSI || LWIP_HTTPD_DYNAMIC_HEADERS */
  return 1;
 800574a:	2301      	movs	r3, #1
}
 800574c:	4618      	mov	r0, r3
 800574e:	3710      	adds	r7, #16
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}
 8005754:	08013870 	.word	0x08013870
 8005758:	08013968 	.word	0x08013968
 800575c:	080138b8 	.word	0x080138b8

08005760 <http_send_data_nonssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_nonssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b084      	sub	sp, #16
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
 8005768:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = 0;
 800576a:	2300      	movs	r3, #0
 800576c:	73fb      	strb	r3, [r7, #15]

  /* We are not processing an SHTML file so no tag checking is necessary.
   * Just send the data as we received it from the file. */
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005772:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005776:	4293      	cmp	r3, r2
 8005778:	d803      	bhi.n	8005782 <http_send_data_nonssi+0x22>
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800577e:	b29b      	uxth	r3, r3
 8005780:	e001      	b.n	8005786 <http_send_data_nonssi+0x26>
 8005782:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005786:	81bb      	strh	r3, [r7, #12]

  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	6999      	ldr	r1, [r3, #24]
 800578c:	f107 020c 	add.w	r2, r7, #12
 8005790:	2300      	movs	r3, #0
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	f7ff fb64 	bl	8004e60 <http_write>
 8005798:	4603      	mov	r3, r0
 800579a:	73bb      	strb	r3, [r7, #14]
  if (err == ERR_OK) {
 800579c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d10d      	bne.n	80057c0 <http_send_data_nonssi+0x60>
    data_to_send = 1;
 80057a4:	2301      	movs	r3, #1
 80057a6:	73fb      	strb	r3, [r7, #15]
    hs->file += len;
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	699b      	ldr	r3, [r3, #24]
 80057ac:	89ba      	ldrh	r2, [r7, #12]
 80057ae:	441a      	add	r2, r3
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	619a      	str	r2, [r3, #24]
    hs->left -= len;
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b8:	89ba      	ldrh	r2, [r7, #12]
 80057ba:	1a9a      	subs	r2, r3, r2
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	625a      	str	r2, [r3, #36]	; 0x24
  }

  return data_to_send;
 80057c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	3710      	adds	r7, #16
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}
	...

080057cc <http_send_data_ssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_ssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b086      	sub	sp, #24
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
 80057d4:	6039      	str	r1, [r7, #0]
  err_t err = ERR_OK;
 80057d6:	2300      	movs	r3, #0
 80057d8:	75fb      	strb	r3, [r7, #23]
  u16_t len;
  u8_t data_to_send = 0;
 80057da:	2300      	movs	r3, #0
 80057dc:	75bb      	strb	r3, [r7, #22]
  u8_t tag_type;

  struct http_ssi_state *ssi = hs->ssi;
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057e2:	613b      	str	r3, [r7, #16]
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d106      	bne.n	80057f8 <http_send_data_ssi+0x2c>
 80057ea:	4b9d      	ldr	r3, [pc, #628]	; (8005a60 <http_send_data_ssi+0x294>)
 80057ec:	f240 42cb 	movw	r2, #1227	; 0x4cb
 80057f0:	499c      	ldr	r1, [pc, #624]	; (8005a64 <http_send_data_ssi+0x298>)
 80057f2:	489d      	ldr	r0, [pc, #628]	; (8005a68 <http_send_data_ssi+0x29c>)
 80057f4:	f00b ff84 	bl	8011700 <iprintf>
   * them with insert strings. We need to be careful here since a tag may
   * straddle the boundary of two blocks read from the file and we may also
   * have to split the insert string between two tcp_write operations. */

  /* How much data could we send? */
  len = altcp_sndbuf(pcb);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80057fe:	81fb      	strh	r3, [r7, #14]

  /* Do we have remaining data to send before parsing more? */
  if (ssi->parsed > hs->file) {
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	681a      	ldr	r2, [r3, #0]
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	699b      	ldr	r3, [r3, #24]
 8005808:	429a      	cmp	r2, r3
 800580a:	f240 826a 	bls.w	8005ce2 <http_send_data_ssi+0x516>
    len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	681a      	ldr	r2, [r3, #0]
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	699b      	ldr	r3, [r3, #24]
 8005816:	1ad3      	subs	r3, r2, r3
 8005818:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800581c:	4293      	cmp	r3, r2
 800581e:	dc06      	bgt.n	800582e <http_send_data_ssi+0x62>
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	681a      	ldr	r2, [r3, #0]
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	699b      	ldr	r3, [r3, #24]
 8005828:	1ad3      	subs	r3, r2, r3
 800582a:	b29b      	uxth	r3, r3
 800582c:	e001      	b.n	8005832 <http_send_data_ssi+0x66>
 800582e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005832:	81fb      	strh	r3, [r7, #14]

    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	6999      	ldr	r1, [r3, #24]
 8005838:	f107 020e 	add.w	r2, r7, #14
 800583c:	2300      	movs	r3, #0
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	f7ff fb0e 	bl	8004e60 <http_write>
 8005844:	4603      	mov	r3, r0
 8005846:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 8005848:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d10d      	bne.n	800586c <http_send_data_ssi+0xa0>
      data_to_send = 1;
 8005850:	2301      	movs	r3, #1
 8005852:	75bb      	strb	r3, [r7, #22]
      hs->file += len;
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	699b      	ldr	r3, [r3, #24]
 8005858:	89fa      	ldrh	r2, [r7, #14]
 800585a:	441a      	add	r2, r3
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	619a      	str	r2, [r3, #24]
      hs->left -= len;
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005864:	89fa      	ldrh	r2, [r7, #14]
 8005866:	1a9a      	subs	r2, r3, r2
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* If the send buffer is full, return now. */
    if (altcp_sndbuf(pcb) == 0) {
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8005872:	2b00      	cmp	r3, #0
 8005874:	f040 8235 	bne.w	8005ce2 <http_send_data_ssi+0x516>
      return data_to_send;
 8005878:	7dbb      	ldrb	r3, [r7, #22]
 800587a:	e27b      	b.n	8005d74 <http_send_data_ssi+0x5a8>
  LWIP_DEBUGF(HTTPD_DEBUG, ("State %d, %d left\n", ssi->tag_state, (int)ssi->parse_left));

  /* We have sent all the data that was already parsed so continue parsing
   * the buffer contents looking for SSI tags. */
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
    if (len == 0) {
 800587c:	89fb      	ldrh	r3, [r7, #14]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d101      	bne.n	8005886 <http_send_data_ssi+0xba>
      return data_to_send;
 8005882:	7dbb      	ldrb	r3, [r7, #22]
 8005884:	e276      	b.n	8005d74 <http_send_data_ssi+0x5a8>
    }
    switch (ssi->tag_state) {
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	f893 3bd4 	ldrb.w	r3, [r3, #3028]	; 0xbd4
 800588c:	2b04      	cmp	r3, #4
 800588e:	f200 8227 	bhi.w	8005ce0 <http_send_data_ssi+0x514>
 8005892:	a201      	add	r2, pc, #4	; (adr r2, 8005898 <http_send_data_ssi+0xcc>)
 8005894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005898:	080058ad 	.word	0x080058ad
 800589c:	080058ff 	.word	0x080058ff
 80058a0:	08005971 	.word	0x08005971
 80058a4:	08005abf 	.word	0x08005abf
 80058a8:	08005c07 	.word	0x08005c07
      case TAG_NONE:
        /* We are not currently processing an SSI tag so scan for the
         * start of the lead-in marker. */
        for (tag_type = 0; tag_type < LWIP_ARRAYSIZE(http_ssi_tag_desc); tag_type++) {
 80058ac:	2300      	movs	r3, #0
 80058ae:	757b      	strb	r3, [r7, #21]
 80058b0:	e017      	b.n	80058e2 <http_send_data_ssi+0x116>
          if (*ssi->parsed == http_ssi_tag_desc[tag_type].lead_in[0]) {
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	781a      	ldrb	r2, [r3, #0]
 80058b8:	7d7b      	ldrb	r3, [r7, #21]
 80058ba:	496c      	ldr	r1, [pc, #432]	; (8005a6c <http_send_data_ssi+0x2a0>)
 80058bc:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 80058c0:	781b      	ldrb	r3, [r3, #0]
 80058c2:	429a      	cmp	r2, r3
 80058c4:	d10a      	bne.n	80058dc <http_send_data_ssi+0x110>
            /* We found what could be the lead-in for a new tag so change
             * state appropriately. */
            ssi->tag_type = tag_type;
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	7d7a      	ldrb	r2, [r7, #21]
 80058ca:	741a      	strb	r2, [r3, #16]
            ssi->tag_state = TAG_LEADIN;
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	2201      	movs	r2, #1
 80058d0:	f883 2bd4 	strb.w	r2, [r3, #3028]	; 0xbd4
            ssi->tag_index = 1;
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	2201      	movs	r2, #1
 80058d8:	819a      	strh	r2, [r3, #12]
  #if !LWIP_HTTPD_SSI_INCLUDE_TAG
            ssi->tag_started = ssi->parsed;
  #endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG */
            break;
 80058da:	e005      	b.n	80058e8 <http_send_data_ssi+0x11c>
        for (tag_type = 0; tag_type < LWIP_ARRAYSIZE(http_ssi_tag_desc); tag_type++) {
 80058dc:	7d7b      	ldrb	r3, [r7, #21]
 80058de:	3301      	adds	r3, #1
 80058e0:	757b      	strb	r3, [r7, #21]
 80058e2:	7d7b      	ldrb	r3, [r7, #21]
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	d9e4      	bls.n	80058b2 <http_send_data_ssi+0xe6>
          }
        }

        /* Move on to the next character in the buffer */
        ssi->parse_left--;
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	689b      	ldr	r3, [r3, #8]
 80058ec:	1e5a      	subs	r2, r3, #1
 80058ee:	693b      	ldr	r3, [r7, #16]
 80058f0:	609a      	str	r2, [r3, #8]
        ssi->parsed++;
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	1c5a      	adds	r2, r3, #1
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	601a      	str	r2, [r3, #0]
        break;
 80058fc:	e1f1      	b.n	8005ce2 <http_send_data_ssi+0x516>
      case TAG_LEADIN:
        /* We are processing the lead-in marker, looking for the start of
         * the tag name. */

        /* Have we reached the end of the leadin? */
        if (http_ssi_tag_desc[ssi->tag_type].lead_in[ssi->tag_index] == 0) {
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	7c1b      	ldrb	r3, [r3, #16]
 8005902:	461a      	mov	r2, r3
 8005904:	4b59      	ldr	r3, [pc, #356]	; (8005a6c <http_send_data_ssi+0x2a0>)
 8005906:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 800590a:	693a      	ldr	r2, [r7, #16]
 800590c:	8992      	ldrh	r2, [r2, #12]
 800590e:	4413      	add	r3, r2
 8005910:	781b      	ldrb	r3, [r3, #0]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d107      	bne.n	8005926 <http_send_data_ssi+0x15a>
          ssi->tag_index = 0;
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	2200      	movs	r2, #0
 800591a:	819a      	strh	r2, [r3, #12]
          ssi->tag_state = TAG_FOUND;
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	2202      	movs	r2, #2
 8005920:	f883 2bd4 	strb.w	r2, [r3, #3028]	; 0xbd4
 8005924:	e1dd      	b.n	8005ce2 <http_send_data_ssi+0x516>
        } else {
          /* Have we found the next character we expect for the tag leadin? */
          if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_in[ssi->tag_index]) {
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	781a      	ldrb	r2, [r3, #0]
 800592c:	693b      	ldr	r3, [r7, #16]
 800592e:	7c1b      	ldrb	r3, [r3, #16]
 8005930:	4619      	mov	r1, r3
 8005932:	4b4e      	ldr	r3, [pc, #312]	; (8005a6c <http_send_data_ssi+0x2a0>)
 8005934:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
 8005938:	6939      	ldr	r1, [r7, #16]
 800593a:	8989      	ldrh	r1, [r1, #12]
 800593c:	440b      	add	r3, r1
 800593e:	781b      	ldrb	r3, [r3, #0]
 8005940:	429a      	cmp	r2, r3
 8005942:	d106      	bne.n	8005952 <http_send_data_ssi+0x186>
            /* Yes - move to the next one unless we have found the complete
             * leadin, in which case we start looking for the tag itself */
            ssi->tag_index++;
 8005944:	693b      	ldr	r3, [r7, #16]
 8005946:	899b      	ldrh	r3, [r3, #12]
 8005948:	3301      	adds	r3, #1
 800594a:	b29a      	uxth	r2, r3
 800594c:	693b      	ldr	r3, [r7, #16]
 800594e:	819a      	strh	r2, [r3, #12]
 8005950:	e003      	b.n	800595a <http_send_data_ssi+0x18e>
          } else {
            /* We found an unexpected character so this is not a tag. Move
             * back to idle state. */
            ssi->tag_state = TAG_NONE;
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	2200      	movs	r2, #0
 8005956:	f883 2bd4 	strb.w	r2, [r3, #3028]	; 0xbd4
          }

          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	689b      	ldr	r3, [r3, #8]
 800595e:	1e5a      	subs	r2, r3, #1
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	1c5a      	adds	r2, r3, #1
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	601a      	str	r2, [r3, #0]
        }
        break;
 800596e:	e1b8      	b.n	8005ce2 <http_send_data_ssi+0x516>
        /* We are reading the tag name, looking for the start of the
         * lead-out marker and removing any whitespace found. */

        /* Remove leading whitespace between the tag leading and the first
         * tag name character. */
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	899b      	ldrh	r3, [r3, #12]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d11e      	bne.n	80059b6 <http_send_data_ssi+0x1ea>
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	781b      	ldrb	r3, [r3, #0]
 800597e:	2b20      	cmp	r3, #32
 8005980:	d00e      	beq.n	80059a0 <http_send_data_ssi+0x1d4>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8005982:	693b      	ldr	r3, [r7, #16]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	781b      	ldrb	r3, [r3, #0]
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 8005988:	2b09      	cmp	r3, #9
 800598a:	d009      	beq.n	80059a0 <http_send_data_ssi+0x1d4>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	781b      	ldrb	r3, [r3, #0]
 8005992:	2b0a      	cmp	r3, #10
 8005994:	d004      	beq.n	80059a0 <http_send_data_ssi+0x1d4>
                                      (*ssi->parsed == '\r'))) {
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	781b      	ldrb	r3, [r3, #0]
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800599c:	2b0d      	cmp	r3, #13
 800599e:	d10a      	bne.n	80059b6 <http_send_data_ssi+0x1ea>
          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	689b      	ldr	r3, [r3, #8]
 80059a4:	1e5a      	subs	r2, r3, #1
 80059a6:	693b      	ldr	r3, [r7, #16]
 80059a8:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	1c5a      	adds	r2, r3, #1
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	601a      	str	r2, [r3, #0]
          break;
 80059b4:	e195      	b.n	8005ce2 <http_send_data_ssi+0x516>
        }

        /* Have we found the end of the tag name? This is signalled by
         * us finding the first leadout character or whitespace */
        if ((*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) ||
 80059b6:	693b      	ldr	r3, [r7, #16]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	781a      	ldrb	r2, [r3, #0]
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	7c1b      	ldrb	r3, [r3, #16]
 80059c0:	492a      	ldr	r1, [pc, #168]	; (8005a6c <http_send_data_ssi+0x2a0>)
 80059c2:	00db      	lsls	r3, r3, #3
 80059c4:	440b      	add	r3, r1
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	781b      	ldrb	r3, [r3, #0]
 80059ca:	429a      	cmp	r2, r3
 80059cc:	d013      	beq.n	80059f6 <http_send_data_ssi+0x22a>
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	781b      	ldrb	r3, [r3, #0]
        if ((*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) ||
 80059d4:	2b20      	cmp	r3, #32
 80059d6:	d00e      	beq.n	80059f6 <http_send_data_ssi+0x22a>
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	781b      	ldrb	r3, [r3, #0]
 80059de:	2b09      	cmp	r3, #9
 80059e0:	d009      	beq.n	80059f6 <http_send_data_ssi+0x22a>
            (*ssi->parsed == '\n') || (*ssi->parsed == '\r')) {
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	781b      	ldrb	r3, [r3, #0]
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 80059e8:	2b0a      	cmp	r3, #10
 80059ea:	d004      	beq.n	80059f6 <http_send_data_ssi+0x22a>
            (*ssi->parsed == '\n') || (*ssi->parsed == '\r')) {
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	781b      	ldrb	r3, [r3, #0]
 80059f2:	2b0d      	cmp	r3, #13
 80059f4:	d142      	bne.n	8005a7c <http_send_data_ssi+0x2b0>

          if (ssi->tag_index == 0) {
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	899b      	ldrh	r3, [r3, #12]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d104      	bne.n	8005a08 <http_send_data_ssi+0x23c>
            /* We read a zero length tag so ignore it. */
            ssi->tag_state = TAG_NONE;
 80059fe:	693b      	ldr	r3, [r7, #16]
 8005a00:	2200      	movs	r2, #0
 8005a02:	f883 2bd4 	strb.w	r2, [r3, #3028]	; 0xbd4
          if (ssi->tag_index == 0) {
 8005a06:	e04f      	b.n	8005aa8 <http_send_data_ssi+0x2dc>
          } else {
            /* We read a non-empty tag so go ahead and look for the
             * leadout string. */
            ssi->tag_state = TAG_LEADOUT;
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	2203      	movs	r2, #3
 8005a0c:	f883 2bd4 	strb.w	r2, [r3, #3028]	; 0xbd4
            LWIP_ASSERT("ssi->tag_index <= 0xff", ssi->tag_index <= 0xff);
 8005a10:	693b      	ldr	r3, [r7, #16]
 8005a12:	899b      	ldrh	r3, [r3, #12]
 8005a14:	2bff      	cmp	r3, #255	; 0xff
 8005a16:	d906      	bls.n	8005a26 <http_send_data_ssi+0x25a>
 8005a18:	4b11      	ldr	r3, [pc, #68]	; (8005a60 <http_send_data_ssi+0x294>)
 8005a1a:	f240 523a 	movw	r2, #1338	; 0x53a
 8005a1e:	4914      	ldr	r1, [pc, #80]	; (8005a70 <http_send_data_ssi+0x2a4>)
 8005a20:	4811      	ldr	r0, [pc, #68]	; (8005a68 <http_send_data_ssi+0x29c>)
 8005a22:	f00b fe6d 	bl	8011700 <iprintf>
            ssi->tag_name_len = (u8_t)ssi->tag_index;
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	899b      	ldrh	r3, [r3, #12]
 8005a2a:	b2da      	uxtb	r2, r3
 8005a2c:	693b      	ldr	r3, [r7, #16]
 8005a2e:	745a      	strb	r2, [r3, #17]
            ssi->tag_name[ssi->tag_index] = '\0';
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	899b      	ldrh	r3, [r3, #12]
 8005a34:	461a      	mov	r2, r3
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	4413      	add	r3, r2
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	749a      	strb	r2, [r3, #18]
            if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) {
 8005a3e:	693b      	ldr	r3, [r7, #16]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	781a      	ldrb	r2, [r3, #0]
 8005a44:	693b      	ldr	r3, [r7, #16]
 8005a46:	7c1b      	ldrb	r3, [r3, #16]
 8005a48:	4908      	ldr	r1, [pc, #32]	; (8005a6c <http_send_data_ssi+0x2a0>)
 8005a4a:	00db      	lsls	r3, r3, #3
 8005a4c:	440b      	add	r3, r1
 8005a4e:	685b      	ldr	r3, [r3, #4]
 8005a50:	781b      	ldrb	r3, [r3, #0]
 8005a52:	429a      	cmp	r2, r3
 8005a54:	d10e      	bne.n	8005a74 <http_send_data_ssi+0x2a8>
              ssi->tag_index = 1;
 8005a56:	693b      	ldr	r3, [r7, #16]
 8005a58:	2201      	movs	r2, #1
 8005a5a:	819a      	strh	r2, [r3, #12]
          if (ssi->tag_index == 0) {
 8005a5c:	e024      	b.n	8005aa8 <http_send_data_ssi+0x2dc>
 8005a5e:	bf00      	nop
 8005a60:	08013870 	.word	0x08013870
 8005a64:	080138ec 	.word	0x080138ec
 8005a68:	080138b8 	.word	0x080138b8
 8005a6c:	080176f0 	.word	0x080176f0
 8005a70:	080139a0 	.word	0x080139a0
            } else {
              ssi->tag_index = 0;
 8005a74:	693b      	ldr	r3, [r7, #16]
 8005a76:	2200      	movs	r2, #0
 8005a78:	819a      	strh	r2, [r3, #12]
          if (ssi->tag_index == 0) {
 8005a7a:	e015      	b.n	8005aa8 <http_send_data_ssi+0x2dc>
            }
          }
        } else {
          /* This character is part of the tag name so save it */
          if (ssi->tag_index < LWIP_HTTPD_MAX_TAG_NAME_LEN) {
 8005a7c:	693b      	ldr	r3, [r7, #16]
 8005a7e:	899b      	ldrh	r3, [r3, #12]
 8005a80:	2b07      	cmp	r3, #7
 8005a82:	d80d      	bhi.n	8005aa0 <http_send_data_ssi+0x2d4>
            ssi->tag_name[ssi->tag_index++] = *ssi->parsed;
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	681a      	ldr	r2, [r3, #0]
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	899b      	ldrh	r3, [r3, #12]
 8005a8c:	1c59      	adds	r1, r3, #1
 8005a8e:	b288      	uxth	r0, r1
 8005a90:	6939      	ldr	r1, [r7, #16]
 8005a92:	8188      	strh	r0, [r1, #12]
 8005a94:	4619      	mov	r1, r3
 8005a96:	7812      	ldrb	r2, [r2, #0]
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	440b      	add	r3, r1
 8005a9c:	749a      	strb	r2, [r3, #18]
 8005a9e:	e003      	b.n	8005aa8 <http_send_data_ssi+0x2dc>
          } else {
            /* The tag was too long so ignore it. */
            ssi->tag_state = TAG_NONE;
 8005aa0:	693b      	ldr	r3, [r7, #16]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	f883 2bd4 	strb.w	r2, [r3, #3028]	; 0xbd4
          }
        }

        /* Move on to the next character in the buffer */
        ssi->parse_left--;
 8005aa8:	693b      	ldr	r3, [r7, #16]
 8005aaa:	689b      	ldr	r3, [r3, #8]
 8005aac:	1e5a      	subs	r2, r3, #1
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	609a      	str	r2, [r3, #8]
        ssi->parsed++;
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	1c5a      	adds	r2, r3, #1
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	601a      	str	r2, [r3, #0]

        break;
 8005abc:	e111      	b.n	8005ce2 <http_send_data_ssi+0x516>

      /* We are looking for the end of the lead-out marker. */
      case TAG_LEADOUT:
        /* Remove leading whitespace between the tag leading and the first
         * tag leadout character. */
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	899b      	ldrh	r3, [r3, #12]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d11e      	bne.n	8005b04 <http_send_data_ssi+0x338>
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	781b      	ldrb	r3, [r3, #0]
 8005acc:	2b20      	cmp	r3, #32
 8005ace:	d00e      	beq.n	8005aee <http_send_data_ssi+0x322>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	781b      	ldrb	r3, [r3, #0]
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 8005ad6:	2b09      	cmp	r3, #9
 8005ad8:	d009      	beq.n	8005aee <http_send_data_ssi+0x322>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	781b      	ldrb	r3, [r3, #0]
 8005ae0:	2b0a      	cmp	r3, #10
 8005ae2:	d004      	beq.n	8005aee <http_send_data_ssi+0x322>
                                      (*ssi->parsed == '\r'))) {
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	781b      	ldrb	r3, [r3, #0]
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8005aea:	2b0d      	cmp	r3, #13
 8005aec:	d10a      	bne.n	8005b04 <http_send_data_ssi+0x338>
          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	689b      	ldr	r3, [r3, #8]
 8005af2:	1e5a      	subs	r2, r3, #1
 8005af4:	693b      	ldr	r3, [r7, #16]
 8005af6:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	1c5a      	adds	r2, r3, #1
 8005afe:	693b      	ldr	r3, [r7, #16]
 8005b00:	601a      	str	r2, [r3, #0]
          break;
 8005b02:	e0ee      	b.n	8005ce2 <http_send_data_ssi+0x516>
        }

        /* Have we found the next character we expect for the tag leadout? */
        if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[ssi->tag_index]) {
 8005b04:	693b      	ldr	r3, [r7, #16]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	781a      	ldrb	r2, [r3, #0]
 8005b0a:	693b      	ldr	r3, [r7, #16]
 8005b0c:	7c1b      	ldrb	r3, [r3, #16]
 8005b0e:	499b      	ldr	r1, [pc, #620]	; (8005d7c <http_send_data_ssi+0x5b0>)
 8005b10:	00db      	lsls	r3, r3, #3
 8005b12:	440b      	add	r3, r1
 8005b14:	685b      	ldr	r3, [r3, #4]
 8005b16:	6939      	ldr	r1, [r7, #16]
 8005b18:	8989      	ldrh	r1, [r1, #12]
 8005b1a:	440b      	add	r3, r1
 8005b1c:	781b      	ldrb	r3, [r3, #0]
 8005b1e:	429a      	cmp	r2, r3
 8005b20:	d162      	bne.n	8005be8 <http_send_data_ssi+0x41c>
          /* Yes - move to the next one unless we have found the complete
           * leadout, in which case we need to call the client to process
           * the tag. */

          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	689b      	ldr	r3, [r3, #8]
 8005b26:	1e5a      	subs	r2, r3, #1
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 8005b2c:	693b      	ldr	r3, [r7, #16]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	1c5a      	adds	r2, r3, #1
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	601a      	str	r2, [r3, #0]
          ssi->tag_index++;
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	899b      	ldrh	r3, [r3, #12]
 8005b3a:	3301      	adds	r3, #1
 8005b3c:	b29a      	uxth	r2, r3
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	819a      	strh	r2, [r3, #12]

          if (http_ssi_tag_desc[ssi->tag_type].lead_out[ssi->tag_index] == 0) {
 8005b42:	693b      	ldr	r3, [r7, #16]
 8005b44:	7c1b      	ldrb	r3, [r3, #16]
 8005b46:	4a8d      	ldr	r2, [pc, #564]	; (8005d7c <http_send_data_ssi+0x5b0>)
 8005b48:	00db      	lsls	r3, r3, #3
 8005b4a:	4413      	add	r3, r2
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	693a      	ldr	r2, [r7, #16]
 8005b50:	8992      	ldrh	r2, [r2, #12]
 8005b52:	4413      	add	r3, r2
 8005b54:	781b      	ldrb	r3, [r3, #0]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	f040 80c3 	bne.w	8005ce2 <http_send_data_ssi+0x516>
            /* Call the client to ask for the insert string for the
             * tag we just found. */
#if LWIP_HTTPD_SSI_MULTIPART
            ssi->tag_part = 0; /* start with tag part 0 */
#endif /* LWIP_HTTPD_SSI_MULTIPART */
            get_tag_insert(hs);
 8005b5c:	6838      	ldr	r0, [r7, #0]
 8005b5e:	f7ff fabb 	bl	80050d8 <get_tag_insert>

            /* Next time through, we are going to be sending data
             * immediately, either the end of the block we start
             * sending here or the insert string. */
            ssi->tag_index = 0;
 8005b62:	693b      	ldr	r3, [r7, #16]
 8005b64:	2200      	movs	r2, #0
 8005b66:	819a      	strh	r2, [r3, #12]
            ssi->tag_state = TAG_SENDING;
 8005b68:	693b      	ldr	r3, [r7, #16]
 8005b6a:	2204      	movs	r2, #4
 8005b6c:	f883 2bd4 	strb.w	r2, [r3, #3028]	; 0xbd4
            ssi->tag_end = ssi->parsed;
 8005b70:	693b      	ldr	r3, [r7, #16]
 8005b72:	681a      	ldr	r2, [r3, #0]
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	605a      	str	r2, [r3, #4]
            ssi->parsed = ssi->tag_started;
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/

            /* If there is any unsent data in the buffer prior to the
             * tag, we need to send it now. */
            if (ssi->tag_end > hs->file) {
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	685a      	ldr	r2, [r3, #4]
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	699b      	ldr	r3, [r3, #24]
 8005b80:	429a      	cmp	r2, r3
 8005b82:	f240 80ae 	bls.w	8005ce2 <http_send_data_ssi+0x516>
              /* How much of the data can we send? */
#if LWIP_HTTPD_SSI_INCLUDE_TAG
              len = (u16_t)LWIP_MIN(ssi->tag_end - hs->file, 0xffff);
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	685a      	ldr	r2, [r3, #4]
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	699b      	ldr	r3, [r3, #24]
 8005b8e:	1ad3      	subs	r3, r2, r3
 8005b90:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005b94:	4293      	cmp	r3, r2
 8005b96:	dc06      	bgt.n	8005ba6 <http_send_data_ssi+0x3da>
 8005b98:	693b      	ldr	r3, [r7, #16]
 8005b9a:	685a      	ldr	r2, [r3, #4]
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	699b      	ldr	r3, [r3, #24]
 8005ba0:	1ad3      	subs	r3, r2, r3
 8005ba2:	b29b      	uxth	r3, r3
 8005ba4:	e001      	b.n	8005baa <http_send_data_ssi+0x3de>
 8005ba6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005baa:	81fb      	strh	r3, [r7, #14]
#else /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
              /* we would include the tag in sending */
              len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
#endif /* LWIP_HTTPD_SSI_INCLUDE_TAG*/

              err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	6999      	ldr	r1, [r3, #24]
 8005bb0:	f107 020e 	add.w	r2, r7, #14
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f7ff f952 	bl	8004e60 <http_write>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	75fb      	strb	r3, [r7, #23]
              if (err == ERR_OK) {
 8005bc0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	f040 808c 	bne.w	8005ce2 <http_send_data_ssi+0x516>
                data_to_send = 1;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	75bb      	strb	r3, [r7, #22]
                if (ssi->tag_started <= hs->file) {
                  /* pretend to have sent the tag, too */
                  len += (u16_t)(ssi->tag_end - ssi->tag_started);
                }
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
                hs->file += len;
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	699b      	ldr	r3, [r3, #24]
 8005bd2:	89fa      	ldrh	r2, [r7, #14]
 8005bd4:	441a      	add	r2, r3
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	619a      	str	r2, [r3, #24]
                hs->left -= len;
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bde:	89fa      	ldrh	r2, [r7, #14]
 8005be0:	1a9a      	subs	r2, r3, r2
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	625a      	str	r2, [r3, #36]	; 0x24
 8005be6:	e07c      	b.n	8005ce2 <http_send_data_ssi+0x516>
            }
          }
        } else {
          /* We found an unexpected character so this is not a tag. Move
           * back to idle state. */
          ssi->parse_left--;
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	689b      	ldr	r3, [r3, #8]
 8005bec:	1e5a      	subs	r2, r3, #1
 8005bee:	693b      	ldr	r3, [r7, #16]
 8005bf0:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	1c5a      	adds	r2, r3, #1
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	601a      	str	r2, [r3, #0]
          ssi->tag_state = TAG_NONE;
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	f883 2bd4 	strb.w	r2, [r3, #3028]	; 0xbd4
        }
        break;
 8005c04:	e06d      	b.n	8005ce2 <http_send_data_ssi+0x516>
       * from the file prior to the insert point or the insert string itself.
       */
      case TAG_SENDING:
        /* Do we have any remaining file data to send from the buffer prior
         * to the tag? */
        if (ssi->tag_end > hs->file) {
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	685a      	ldr	r2, [r3, #4]
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	699b      	ldr	r3, [r3, #24]
 8005c0e:	429a      	cmp	r2, r3
 8005c10:	d935      	bls.n	8005c7e <http_send_data_ssi+0x4b2>
          /* How much of the data can we send? */
#if LWIP_HTTPD_SSI_INCLUDE_TAG
          len = (u16_t)LWIP_MIN(ssi->tag_end - hs->file, 0xffff);
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	685a      	ldr	r2, [r3, #4]
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	699b      	ldr	r3, [r3, #24]
 8005c1a:	1ad3      	subs	r3, r2, r3
 8005c1c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005c20:	4293      	cmp	r3, r2
 8005c22:	dc06      	bgt.n	8005c32 <http_send_data_ssi+0x466>
 8005c24:	693b      	ldr	r3, [r7, #16]
 8005c26:	685a      	ldr	r2, [r3, #4]
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	699b      	ldr	r3, [r3, #24]
 8005c2c:	1ad3      	subs	r3, r2, r3
 8005c2e:	b29b      	uxth	r3, r3
 8005c30:	e001      	b.n	8005c36 <http_send_data_ssi+0x46a>
 8005c32:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005c36:	81fb      	strh	r3, [r7, #14]
#else /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
          LWIP_ASSERT("hs->started >= hs->file", ssi->tag_started >= hs->file);
          /* we would include the tag in sending */
          len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
#endif /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
          if (len != 0) {
 8005c38:	89fb      	ldrh	r3, [r7, #14]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d00a      	beq.n	8005c54 <http_send_data_ssi+0x488>
            err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	6999      	ldr	r1, [r3, #24]
 8005c42:	f107 020e 	add.w	r2, r7, #14
 8005c46:	2300      	movs	r3, #0
 8005c48:	6878      	ldr	r0, [r7, #4]
 8005c4a:	f7ff f909 	bl	8004e60 <http_write>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	75fb      	strb	r3, [r7, #23]
 8005c52:	e001      	b.n	8005c58 <http_send_data_ssi+0x48c>
          } else {
            err = ERR_OK;
 8005c54:	2300      	movs	r3, #0
 8005c56:	75fb      	strb	r3, [r7, #23]
          }
          if (err == ERR_OK) {
 8005c58:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d140      	bne.n	8005ce2 <http_send_data_ssi+0x516>
            data_to_send = 1;
 8005c60:	2301      	movs	r3, #1
 8005c62:	75bb      	strb	r3, [r7, #22]
            if (ssi->tag_started <= hs->file) {
              /* pretend to have sent the tag, too */
              len += (u16_t)(ssi->tag_end - ssi->tag_started);
            }
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
            hs->file += len;
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	699b      	ldr	r3, [r3, #24]
 8005c68:	89fa      	ldrh	r2, [r7, #14]
 8005c6a:	441a      	add	r2, r3
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	619a      	str	r2, [r3, #24]
            hs->left -= len;
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c74:	89fa      	ldrh	r2, [r7, #14]
 8005c76:	1a9a      	subs	r2, r3, r2
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	625a      	str	r2, [r3, #36]	; 0x24
 8005c7c:	e031      	b.n	8005ce2 <http_send_data_ssi+0x516>
            }
          }
#endif /* LWIP_HTTPD_SSI_MULTIPART */

          /* Do we still have insert data left to send? */
          if (ssi->tag_index < ssi->tag_insert_len) {
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	899a      	ldrh	r2, [r3, #12]
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	89db      	ldrh	r3, [r3, #14]
 8005c86:	429a      	cmp	r2, r3
 8005c88:	d222      	bcs.n	8005cd0 <http_send_data_ssi+0x504>
            /* We are sending the insert string itself. How much of the
             * insert can we send? */
            len = (ssi->tag_insert_len - ssi->tag_index);
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	89da      	ldrh	r2, [r3, #14]
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	899b      	ldrh	r3, [r3, #12]
 8005c92:	1ad3      	subs	r3, r2, r3
 8005c94:	b29b      	uxth	r3, r3
 8005c96:	81fb      	strh	r3, [r7, #14]

            /* Note that we set the copy flag here since we only have a
             * single tag insert buffer per connection. If we don't do
             * this, insert corruption can occur if more than one insert
             * is processed before we call tcp_output. */
            err = http_write(pcb, &(ssi->tag_insert[ssi->tag_index]), &len,
 8005c98:	693b      	ldr	r3, [r7, #16]
 8005c9a:	899b      	ldrh	r3, [r3, #12]
 8005c9c:	3318      	adds	r3, #24
 8005c9e:	693a      	ldr	r2, [r7, #16]
 8005ca0:	4413      	add	r3, r2
 8005ca2:	1cd9      	adds	r1, r3, #3
 8005ca4:	f107 020e 	add.w	r2, r7, #14
 8005ca8:	2301      	movs	r3, #1
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f7ff f8d8 	bl	8004e60 <http_write>
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	75fb      	strb	r3, [r7, #23]
                             HTTP_IS_TAG_VOLATILE(hs));
            if (err == ERR_OK) {
 8005cb4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d112      	bne.n	8005ce2 <http_send_data_ssi+0x516>
              data_to_send = 1;
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	75bb      	strb	r3, [r7, #22]
              ssi->tag_index += len;
 8005cc0:	693b      	ldr	r3, [r7, #16]
 8005cc2:	899a      	ldrh	r2, [r3, #12]
 8005cc4:	89fb      	ldrh	r3, [r7, #14]
 8005cc6:	4413      	add	r3, r2
 8005cc8:	b29a      	uxth	r2, r3
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	819a      	strh	r2, [r3, #12]
 8005cce:	e008      	b.n	8005ce2 <http_send_data_ssi+0x516>
#endif /* LWIP_HTTPD_SSI_MULTIPART */
            {
              /* We have sent all the insert data so go back to looking for
               * a new tag. */
              LWIP_DEBUGF(HTTPD_DEBUG, ("Everything sent.\n"));
              ssi->tag_index = 0;
 8005cd0:	693b      	ldr	r3, [r7, #16]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	819a      	strh	r2, [r3, #12]
              ssi->tag_state = TAG_NONE;
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	f883 2bd4 	strb.w	r2, [r3, #3028]	; 0xbd4
#if !LWIP_HTTPD_SSI_INCLUDE_TAG
              ssi->parsed = ssi->tag_end;
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
            }
          }
          break;
 8005cde:	e000      	b.n	8005ce2 <http_send_data_ssi+0x516>
        default:
          break;
 8005ce0:	bf00      	nop
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 8005ce2:	693b      	ldr	r3, [r7, #16]
 8005ce4:	f893 3bd4 	ldrb.w	r3, [r3, #3028]	; 0xbd4
 8005ce8:	2b04      	cmp	r3, #4
 8005cea:	d003      	beq.n	8005cf4 <http_send_data_ssi+0x528>
 8005cec:	693b      	ldr	r3, [r7, #16]
 8005cee:	689b      	ldr	r3, [r3, #8]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d004      	beq.n	8005cfe <http_send_data_ssi+0x532>
 8005cf4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	f43f adbf 	beq.w	800587c <http_send_data_ssi+0xb0>
  }

  /* If we drop out of the end of the for loop, this implies we must have
   * file data to send so send it now. In TAG_SENDING state, we've already
   * handled this so skip the send if that's the case. */
  if ((ssi->tag_state != TAG_SENDING) && (ssi->parsed > hs->file)) {
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	f893 3bd4 	ldrb.w	r3, [r3, #3028]	; 0xbd4
 8005d04:	2b04      	cmp	r3, #4
 8005d06:	d034      	beq.n	8005d72 <http_send_data_ssi+0x5a6>
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	681a      	ldr	r2, [r3, #0]
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	699b      	ldr	r3, [r3, #24]
 8005d10:	429a      	cmp	r2, r3
 8005d12:	d92e      	bls.n	8005d72 <http_send_data_ssi+0x5a6>
      ssi->parsed = ssi->tag_started;
      ssi->tag_started = hs->buf;
    } else
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ && !LWIP_HTTPD_SSI_INCLUDE_TAG */
    {
      len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 8005d14:	693b      	ldr	r3, [r7, #16]
 8005d16:	681a      	ldr	r2, [r3, #0]
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	699b      	ldr	r3, [r3, #24]
 8005d1c:	1ad3      	subs	r3, r2, r3
 8005d1e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005d22:	4293      	cmp	r3, r2
 8005d24:	dc06      	bgt.n	8005d34 <http_send_data_ssi+0x568>
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	681a      	ldr	r2, [r3, #0]
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	699b      	ldr	r3, [r3, #24]
 8005d2e:	1ad3      	subs	r3, r2, r3
 8005d30:	b29b      	uxth	r3, r3
 8005d32:	e001      	b.n	8005d38 <http_send_data_ssi+0x56c>
 8005d34:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005d38:	81fb      	strh	r3, [r7, #14]
    }

    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	6999      	ldr	r1, [r3, #24]
 8005d3e:	f107 020e 	add.w	r2, r7, #14
 8005d42:	2300      	movs	r3, #0
 8005d44:	6878      	ldr	r0, [r7, #4]
 8005d46:	f7ff f88b 	bl	8004e60 <http_write>
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 8005d4e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d10d      	bne.n	8005d72 <http_send_data_ssi+0x5a6>
      data_to_send = 1;
 8005d56:	2301      	movs	r3, #1
 8005d58:	75bb      	strb	r3, [r7, #22]
      hs->file += len;
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	699b      	ldr	r3, [r3, #24]
 8005d5e:	89fa      	ldrh	r2, [r7, #14]
 8005d60:	441a      	add	r2, r3
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	619a      	str	r2, [r3, #24]
      hs->left -= len;
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d6a:	89fa      	ldrh	r2, [r7, #14]
 8005d6c:	1a9a      	subs	r2, r3, r2
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	625a      	str	r2, [r3, #36]	; 0x24
    }
  }
  return data_to_send;
 8005d72:	7dbb      	ldrb	r3, [r7, #22]
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	3718      	adds	r7, #24
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd80      	pop	{r7, pc}
 8005d7c:	080176f0 	.word	0x080176f0

08005d80 <http_send>:
 * @param pcb the pcb to send data
 * @param hs connection state
 */
static u8_t
http_send(struct altcp_pcb *pcb, struct http_state *hs)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b084      	sub	sp, #16
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
 8005d88:	6039      	str	r1, [r7, #0]
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	73fb      	strb	r3, [r7, #15]
    return 0;
  }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */

  /* If we were passed a NULL state structure pointer, ignore the call. */
  if (hs == NULL) {
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d101      	bne.n	8005d98 <http_send+0x18>
    return 0;
 8005d94:	2300      	movs	r3, #0
 8005d96:	e04c      	b.n	8005e32 <http_send+0xb2>
  }
#endif /* LWIP_HTTPD_FS_ASYNC_READ */

#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Do we have any more header data to send for this file? */
  if (hs->hdr_index < NUM_FILE_HDR_STRINGS) {
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	f503 53b1 	add.w	r3, r3, #5664	; 0x1620
 8005d9e:	3312      	adds	r3, #18
 8005da0:	881b      	ldrh	r3, [r3, #0]
 8005da2:	2b04      	cmp	r3, #4
 8005da4:	d814      	bhi.n	8005dd0 <http_send+0x50>
    data_to_send = http_send_headers(pcb, hs);
 8005da6:	6839      	ldr	r1, [r7, #0]
 8005da8:	6878      	ldr	r0, [r7, #4]
 8005daa:	f7ff fbab 	bl	8005504 <http_send_headers>
 8005dae:	4603      	mov	r3, r0
 8005db0:	73fb      	strb	r3, [r7, #15]
    if ((data_to_send == HTTP_DATA_TO_SEND_FREED) ||
 8005db2:	7bfb      	ldrb	r3, [r7, #15]
 8005db4:	2b03      	cmp	r3, #3
 8005db6:	d009      	beq.n	8005dcc <http_send+0x4c>
 8005db8:	7bfb      	ldrb	r3, [r7, #15]
 8005dba:	2b01      	cmp	r3, #1
 8005dbc:	d008      	beq.n	8005dd0 <http_send+0x50>
        ((data_to_send != HTTP_DATA_TO_SEND_CONTINUE) &&
         (hs->hdr_index < NUM_FILE_HDR_STRINGS))) {
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	f503 53b1 	add.w	r3, r3, #5664	; 0x1620
 8005dc4:	3312      	adds	r3, #18
 8005dc6:	881b      	ldrh	r3, [r3, #0]
        ((data_to_send != HTTP_DATA_TO_SEND_CONTINUE) &&
 8005dc8:	2b04      	cmp	r3, #4
 8005dca:	d801      	bhi.n	8005dd0 <http_send+0x50>
      return data_to_send;
 8005dcc:	7bfb      	ldrb	r3, [r7, #15]
 8005dce:	e030      	b.n	8005e32 <http_send+0xb2>
  }
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */

  /* Have we run out of file data to send? If so, we need to read the next
   * block from the file. */
  if (hs->left == 0) {
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d108      	bne.n	8005dea <http_send+0x6a>
    if (!http_check_eof(pcb, hs)) {
 8005dd8:	6839      	ldr	r1, [r7, #0]
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f7ff fc90 	bl	8005700 <http_check_eof>
 8005de0:	4603      	mov	r3, r0
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d101      	bne.n	8005dea <http_send+0x6a>
      return 0;
 8005de6:	2300      	movs	r3, #0
 8005de8:	e023      	b.n	8005e32 <http_send+0xb2>
    }
  }

#if LWIP_HTTPD_SSI
  if (hs->ssi) {
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d006      	beq.n	8005e00 <http_send+0x80>
    data_to_send = http_send_data_ssi(pcb, hs);
 8005df2:	6839      	ldr	r1, [r7, #0]
 8005df4:	6878      	ldr	r0, [r7, #4]
 8005df6:	f7ff fce9 	bl	80057cc <http_send_data_ssi>
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	73fb      	strb	r3, [r7, #15]
 8005dfe:	e005      	b.n	8005e0c <http_send+0x8c>
  } else
#endif /* LWIP_HTTPD_SSI */
  {
    data_to_send = http_send_data_nonssi(pcb, hs);
 8005e00:	6839      	ldr	r1, [r7, #0]
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f7ff fcac 	bl	8005760 <http_send_data_nonssi>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	73fb      	strb	r3, [r7, #15]
  }

  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d10d      	bne.n	8005e30 <http_send+0xb0>
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	695b      	ldr	r3, [r3, #20]
 8005e18:	4618      	mov	r0, r3
 8005e1a:	f7fe ff89 	bl	8004d30 <fs_bytes_left>
 8005e1e:	4603      	mov	r3, r0
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	dc05      	bgt.n	8005e30 <http_send+0xb0>
    /* We reached the end of the file so this request is done.
     * This adds the FIN flag right into the last data segment. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 8005e24:	6839      	ldr	r1, [r7, #0]
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f7ff f8e7 	bl	8004ffa <http_eof>
    return 0;
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	e000      	b.n	8005e32 <http_send+0xb2>
  }
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("send_data end.\n"));
  return data_to_send;
 8005e30:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	3710      	adds	r7, #16
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bd80      	pop	{r7, pc}
	...

08005e3c <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b084      	sub	sp, #16
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
 8005e44:	6039      	str	r1, [r7, #0]
  err_t err;

  *uri = "/404.html";
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	4a1c      	ldr	r2, [pc, #112]	; (8005ebc <http_get_404_file+0x80>)
 8005e4a:	601a      	str	r2, [r3, #0]
  err = fs_open(&hs->file_handle, *uri);
 8005e4c:	687a      	ldr	r2, [r7, #4]
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4619      	mov	r1, r3
 8005e54:	4610      	mov	r0, r2
 8005e56:	f7fe ff23 	bl	8004ca0 <fs_open>
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8005e5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d024      	beq.n	8005eb0 <http_get_404_file+0x74>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	4a15      	ldr	r2, [pc, #84]	; (8005ec0 <http_get_404_file+0x84>)
 8005e6a:	601a      	str	r2, [r3, #0]
    err = fs_open(&hs->file_handle, *uri);
 8005e6c:	687a      	ldr	r2, [r7, #4]
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4619      	mov	r1, r3
 8005e74:	4610      	mov	r0, r2
 8005e76:	f7fe ff13 	bl	8004ca0 <fs_open>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8005e7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d014      	beq.n	8005eb0 <http_get_404_file+0x74>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	4a0e      	ldr	r2, [pc, #56]	; (8005ec4 <http_get_404_file+0x88>)
 8005e8a:	601a      	str	r2, [r3, #0]
      err = fs_open(&hs->file_handle, *uri);
 8005e8c:	687a      	ldr	r2, [r7, #4]
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4619      	mov	r1, r3
 8005e94:	4610      	mov	r0, r2
 8005e96:	f7fe ff03 	bl	8004ca0 <fs_open>
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 8005e9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d004      	beq.n	8005eb0 <http_get_404_file+0x74>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	601a      	str	r2, [r3, #0]
        return NULL;
 8005eac:	2300      	movs	r3, #0
 8005eae:	e000      	b.n	8005eb2 <http_get_404_file+0x76>
      }
    }
  }

  return &hs->file_handle;
 8005eb0:	687b      	ldr	r3, [r7, #4]
}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	3710      	adds	r7, #16
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bd80      	pop	{r7, pc}
 8005eba:	bf00      	nop
 8005ebc:	080139b8 	.word	0x080139b8
 8005ec0:	080139c4 	.word	0x080139c4
 8005ec4:	080139d0 	.word	0x080139d0

08005ec8 <http_handle_post_finished>:

#if LWIP_HTTPD_SUPPORT_POST
static err_t
http_handle_post_finished(struct http_state *hs)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b082      	sub	sp, #8
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
  }
  hs->post_finished = 1;
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
  /* application error or POST finished */
  /* NULL-terminate the buffer */
  http_uri_buf[0] = 0;
 8005ed0:	4b08      	ldr	r3, [pc, #32]	; (8005ef4 <http_handle_post_finished+0x2c>)
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	701a      	strb	r2, [r3, #0]
  httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 8005ed6:	223f      	movs	r2, #63	; 0x3f
 8005ed8:	4906      	ldr	r1, [pc, #24]	; (8005ef4 <http_handle_post_finished+0x2c>)
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f7fa feb6 	bl	8000c4c <httpd_post_finished>
  return http_find_file(hs, http_uri_buf, 0);
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	4904      	ldr	r1, [pc, #16]	; (8005ef4 <http_handle_post_finished+0x2c>)
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	f000 fabb 	bl	8006460 <http_find_file>
 8005eea:	4603      	mov	r3, r0
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	3708      	adds	r7, #8
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd80      	pop	{r7, pc}
 8005ef4:	200004c0 	.word	0x200004c0

08005ef8 <http_post_rxpbuf>:
 * @return ERR_OK if passed successfully, another err_t if the response file
 *         hasn't been found (after POST finished)
 */
static err_t
http_post_rxpbuf(struct http_state *hs, struct pbuf *p)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b084      	sub	sp, #16
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
 8005f00:	6039      	str	r1, [r7, #0]
  err_t err;

  if (p != NULL) {
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d01c      	beq.n	8005f42 <http_post_rxpbuf+0x4a>
    /* adjust remaining Content-Length */
    if (hs->post_content_len_left < p->tot_len) {
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f503 53b1 	add.w	r3, r3, #5664	; 0x1620
 8005f0e:	3314      	adds	r3, #20
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	683a      	ldr	r2, [r7, #0]
 8005f14:	8912      	ldrh	r2, [r2, #8]
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d206      	bcs.n	8005f28 <http_post_rxpbuf+0x30>
      hs->post_content_len_left = 0;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	f503 53b1 	add.w	r3, r3, #5664	; 0x1620
 8005f20:	3314      	adds	r3, #20
 8005f22:	2200      	movs	r2, #0
 8005f24:	601a      	str	r2, [r3, #0]
 8005f26:	e00c      	b.n	8005f42 <http_post_rxpbuf+0x4a>
    } else {
      hs->post_content_len_left -= p->tot_len;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	f503 53b1 	add.w	r3, r3, #5664	; 0x1620
 8005f2e:	3314      	adds	r3, #20
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	683a      	ldr	r2, [r7, #0]
 8005f34:	8912      	ldrh	r2, [r2, #8]
 8005f36:	1a9a      	subs	r2, r3, r2
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	f503 53b1 	add.w	r3, r3, #5664	; 0x1620
 8005f3e:	3314      	adds	r3, #20
 8005f40:	601a      	str	r2, [r3, #0]
  }
#if LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND
  /* prevent connection being closed if httpd_post_data_recved() is called nested */
  hs->unrecved_bytes++;
#endif
  if (p != NULL) {
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d006      	beq.n	8005f56 <http_post_rxpbuf+0x5e>
    err = httpd_post_receive_data(hs, p);
 8005f48:	6839      	ldr	r1, [r7, #0]
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f7fa fe4a 	bl	8000be4 <httpd_post_receive_data>
 8005f50:	4603      	mov	r3, r0
 8005f52:	73fb      	strb	r3, [r7, #15]
 8005f54:	e001      	b.n	8005f5a <http_post_rxpbuf+0x62>
  } else {
    err = ERR_OK;
 8005f56:	2300      	movs	r3, #0
 8005f58:	73fb      	strb	r3, [r7, #15]
  }
#if LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND
  hs->unrecved_bytes--;
#endif
  if (err != ERR_OK) {
 8005f5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d005      	beq.n	8005f6e <http_post_rxpbuf+0x76>
    /* Ignore remaining content in case of application error */
    hs->post_content_len_left = 0;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	f503 53b1 	add.w	r3, r3, #5664	; 0x1620
 8005f68:	3314      	adds	r3, #20
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	601a      	str	r2, [r3, #0]
  }
  if (hs->post_content_len_left == 0) {
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	f503 53b1 	add.w	r3, r3, #5664	; 0x1620
 8005f74:	3314      	adds	r3, #20
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d104      	bne.n	8005f86 <http_post_rxpbuf+0x8e>
    if (hs->unrecved_bytes != 0) {
      return ERR_OK;
    }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
    /* application error or POST finished */
    return http_handle_post_finished(hs);
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	f7ff ffa3 	bl	8005ec8 <http_handle_post_finished>
 8005f82:	4603      	mov	r3, r0
 8005f84:	e000      	b.n	8005f88 <http_post_rxpbuf+0x90>
  }

  return ERR_OK;
 8005f86:	2300      	movs	r3, #0
}
 8005f88:	4618      	mov	r0, r3
 8005f8a:	3710      	adds	r7, #16
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	bd80      	pop	{r7, pc}

08005f90 <http_post_request>:
 *         another err_t: Error parsing POST or denied by the application
 */
static err_t
http_post_request(struct pbuf *inp, struct http_state *hs,
                  char *data, u16_t data_len, char *uri, char *uri_end)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b092      	sub	sp, #72	; 0x48
 8005f94:	af04      	add	r7, sp, #16
 8005f96:	60f8      	str	r0, [r7, #12]
 8005f98:	60b9      	str	r1, [r7, #8]
 8005f9a:	607a      	str	r2, [r7, #4]
 8005f9c:	807b      	strh	r3, [r7, #2]
  err_t err;
  /* search for end-of-header (first double-CRLF) */
  char *crlfcrlf = lwip_strnstr(uri_end + 1, CRLF CRLF, data_len - (uri_end + 1 - data));
 8005f9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005fa0:	1c58      	adds	r0, r3, #1
 8005fa2:	887a      	ldrh	r2, [r7, #2]
 8005fa4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005fa6:	1c59      	adds	r1, r3, #1
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	1acb      	subs	r3, r1, r3
 8005fac:	1ad3      	subs	r3, r2, r3
 8005fae:	461a      	mov	r2, r3
 8005fb0:	4967      	ldr	r1, [pc, #412]	; (8006150 <http_post_request+0x1c0>)
 8005fb2:	f000 fe79 	bl	8006ca8 <lwip_strnstr>
 8005fb6:	62b8      	str	r0, [r7, #40]	; 0x28

  if (crlfcrlf != NULL) {
 8005fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	f000 80c2 	beq.w	8006144 <http_post_request+0x1b4>
    /* search for "Content-Length: " */
#define HTTP_HDR_CONTENT_LEN                "Content-Length: "
#define HTTP_HDR_CONTENT_LEN_LEN            16
#define HTTP_HDR_CONTENT_LEN_DIGIT_MAX_LEN  10
    char *scontent_len = lwip_strnstr(uri_end + 1, HTTP_HDR_CONTENT_LEN, crlfcrlf - (uri_end + 1));
 8005fc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005fc2:	1c58      	adds	r0, r3, #1
 8005fc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005fc6:	3301      	adds	r3, #1
 8005fc8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005fca:	1ad3      	subs	r3, r2, r3
 8005fcc:	461a      	mov	r2, r3
 8005fce:	4961      	ldr	r1, [pc, #388]	; (8006154 <http_post_request+0x1c4>)
 8005fd0:	f000 fe6a 	bl	8006ca8 <lwip_strnstr>
 8005fd4:	6278      	str	r0, [r7, #36]	; 0x24
    if (scontent_len != NULL) {
 8005fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	f000 80b0 	beq.w	800613e <http_post_request+0x1ae>
      char *scontent_len_end = lwip_strnstr(scontent_len + HTTP_HDR_CONTENT_LEN_LEN, CRLF, HTTP_HDR_CONTENT_LEN_DIGIT_MAX_LEN);
 8005fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe0:	3310      	adds	r3, #16
 8005fe2:	220a      	movs	r2, #10
 8005fe4:	495c      	ldr	r1, [pc, #368]	; (8006158 <http_post_request+0x1c8>)
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f000 fe5e 	bl	8006ca8 <lwip_strnstr>
 8005fec:	6238      	str	r0, [r7, #32]
      if (scontent_len_end != NULL) {
 8005fee:	6a3b      	ldr	r3, [r7, #32]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	f000 80a4 	beq.w	800613e <http_post_request+0x1ae>
        int content_len;
        char *content_len_num = scontent_len + HTTP_HDR_CONTENT_LEN_LEN;
 8005ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff8:	3310      	adds	r3, #16
 8005ffa:	61fb      	str	r3, [r7, #28]
        content_len = atoi(content_len_num);
 8005ffc:	69f8      	ldr	r0, [r7, #28]
 8005ffe:	f00b fa5f 	bl	80114c0 <atoi>
 8006002:	6378      	str	r0, [r7, #52]	; 0x34
        if (content_len == 0) {
 8006004:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006006:	2b00      	cmp	r3, #0
 8006008:	d10b      	bne.n	8006022 <http_post_request+0x92>
          /* if atoi returns 0 on error, fix this */
          if ((content_len_num[0] != '0') || (content_len_num[1] != '\r')) {
 800600a:	69fb      	ldr	r3, [r7, #28]
 800600c:	781b      	ldrb	r3, [r3, #0]
 800600e:	2b30      	cmp	r3, #48	; 0x30
 8006010:	d104      	bne.n	800601c <http_post_request+0x8c>
 8006012:	69fb      	ldr	r3, [r7, #28]
 8006014:	3301      	adds	r3, #1
 8006016:	781b      	ldrb	r3, [r3, #0]
 8006018:	2b0d      	cmp	r3, #13
 800601a:	d002      	beq.n	8006022 <http_post_request+0x92>
            content_len = -1;
 800601c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006020:	637b      	str	r3, [r7, #52]	; 0x34
          }
        }
        if (content_len >= 0) {
 8006022:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006024:	2b00      	cmp	r3, #0
 8006026:	f2c0 8087 	blt.w	8006138 <http_post_request+0x1a8>
          /* adjust length of HTTP header passed to application */
          const char *hdr_start_after_uri = uri_end + 1;
 800602a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800602c:	3301      	adds	r3, #1
 800602e:	61bb      	str	r3, [r7, #24]
          u16_t hdr_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - data);
 8006030:	887a      	ldrh	r2, [r7, #2]
 8006032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006034:	1d19      	adds	r1, r3, #4
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	1acb      	subs	r3, r1, r3
 800603a:	429a      	cmp	r2, r3
 800603c:	db05      	blt.n	800604a <http_post_request+0xba>
 800603e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006040:	1d1a      	adds	r2, r3, #4
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	1ad3      	subs	r3, r2, r3
 8006046:	b29b      	uxth	r3, r3
 8006048:	e000      	b.n	800604c <http_post_request+0xbc>
 800604a:	887b      	ldrh	r3, [r7, #2]
 800604c:	82fb      	strh	r3, [r7, #22]
          u16_t hdr_data_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - hdr_start_after_uri);
 800604e:	887a      	ldrh	r2, [r7, #2]
 8006050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006052:	1d19      	adds	r1, r3, #4
 8006054:	69bb      	ldr	r3, [r7, #24]
 8006056:	1acb      	subs	r3, r1, r3
 8006058:	429a      	cmp	r2, r3
 800605a:	db05      	blt.n	8006068 <http_post_request+0xd8>
 800605c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800605e:	1d1a      	adds	r2, r3, #4
 8006060:	69bb      	ldr	r3, [r7, #24]
 8006062:	1ad3      	subs	r3, r2, r3
 8006064:	b29b      	uxth	r3, r3
 8006066:	e000      	b.n	800606a <http_post_request+0xda>
 8006068:	887b      	ldrh	r3, [r7, #2]
 800606a:	82bb      	strh	r3, [r7, #20]
          u8_t post_auto_wnd = 1;
 800606c:	2301      	movs	r3, #1
 800606e:	74bb      	strb	r3, [r7, #18]
          http_uri_buf[0] = 0;
 8006070:	4b3a      	ldr	r3, [pc, #232]	; (800615c <http_post_request+0x1cc>)
 8006072:	2200      	movs	r2, #0
 8006074:	701a      	strb	r2, [r3, #0]
          /* trim http header */
          *crlfcrlf = 0;
 8006076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006078:	2200      	movs	r2, #0
 800607a:	701a      	strb	r2, [r3, #0]
          err = httpd_post_begin(hs, uri, hdr_start_after_uri, hdr_data_len, content_len,
 800607c:	8aba      	ldrh	r2, [r7, #20]
 800607e:	f107 0312 	add.w	r3, r7, #18
 8006082:	9303      	str	r3, [sp, #12]
 8006084:	233f      	movs	r3, #63	; 0x3f
 8006086:	9302      	str	r3, [sp, #8]
 8006088:	4b34      	ldr	r3, [pc, #208]	; (800615c <http_post_request+0x1cc>)
 800608a:	9301      	str	r3, [sp, #4]
 800608c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800608e:	9300      	str	r3, [sp, #0]
 8006090:	4613      	mov	r3, r2
 8006092:	69ba      	ldr	r2, [r7, #24]
 8006094:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006096:	68b8      	ldr	r0, [r7, #8]
 8006098:	f7fa fd36 	bl	8000b08 <httpd_post_begin>
 800609c:	4603      	mov	r3, r0
 800609e:	74fb      	strb	r3, [r7, #19]
                                 http_uri_buf, LWIP_HTTPD_URI_BUF_LEN, &post_auto_wnd);
          if (err == ERR_OK) {
 80060a0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d140      	bne.n	800612a <http_post_request+0x19a>
            /* try to pass in data of the first pbuf(s) */
            struct pbuf *q = inp;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	633b      	str	r3, [r7, #48]	; 0x30
            u16_t start_offset = hdr_len;
 80060ac:	8afb      	ldrh	r3, [r7, #22]
 80060ae:	85fb      	strh	r3, [r7, #46]	; 0x2e
#if LWIP_HTTPD_POST_MANUAL_WND
            hs->no_auto_wnd = !post_auto_wnd;
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
            /* set the Content-Length to be received for this POST */
            hs->post_content_len_left = (u32_t)content_len;
 80060b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	f503 53b1 	add.w	r3, r3, #5664	; 0x1620
 80060b8:	3314      	adds	r3, #20
 80060ba:	601a      	str	r2, [r3, #0]

            /* get to the pbuf where the body starts */
            while ((q != NULL) && (q->len <= start_offset)) {
 80060bc:	e007      	b.n	80060ce <http_post_request+0x13e>
              start_offset -= q->len;
 80060be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060c0:	895b      	ldrh	r3, [r3, #10]
 80060c2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80060c4:	1ad3      	subs	r3, r2, r3
 80060c6:	85fb      	strh	r3, [r7, #46]	; 0x2e
              q = q->next;
 80060c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	633b      	str	r3, [r7, #48]	; 0x30
            while ((q != NULL) && (q->len <= start_offset)) {
 80060ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d004      	beq.n	80060de <http_post_request+0x14e>
 80060d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060d6:	895b      	ldrh	r3, [r3, #10]
 80060d8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80060da:	429a      	cmp	r2, r3
 80060dc:	d2ef      	bcs.n	80060be <http_post_request+0x12e>
            }
            if (q != NULL) {
 80060de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d00d      	beq.n	8006100 <http_post_request+0x170>
              /* hide the remaining HTTP header */
              pbuf_remove_header(q, start_offset);
 80060e4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80060e6:	4619      	mov	r1, r3
 80060e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80060ea:	f002 f8bb 	bl	8008264 <pbuf_remove_header>
              if (!post_auto_wnd) {
                /* already tcp_recved() this data... */
                hs->unrecved_bytes = q->tot_len;
              }
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
              pbuf_ref(q);
 80060ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80060f0:	f002 f9de 	bl	80084b0 <pbuf_ref>
              return http_post_rxpbuf(hs, q);
 80060f4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80060f6:	68b8      	ldr	r0, [r7, #8]
 80060f8:	f7ff fefe 	bl	8005ef8 <http_post_rxpbuf>
 80060fc:	4603      	mov	r3, r0
 80060fe:	e023      	b.n	8006148 <http_post_request+0x1b8>
            } else if (hs->post_content_len_left == 0) {
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	f503 53b1 	add.w	r3, r3, #5664	; 0x1620
 8006106:	3314      	adds	r3, #20
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d10b      	bne.n	8006126 <http_post_request+0x196>
              q = pbuf_alloc(PBUF_RAW, 0, PBUF_REF);
 800610e:	2241      	movs	r2, #65	; 0x41
 8006110:	2100      	movs	r1, #0
 8006112:	2000      	movs	r0, #0
 8006114:	f001 fe48 	bl	8007da8 <pbuf_alloc>
 8006118:	6338      	str	r0, [r7, #48]	; 0x30
              return http_post_rxpbuf(hs, q);
 800611a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800611c:	68b8      	ldr	r0, [r7, #8]
 800611e:	f7ff feeb 	bl	8005ef8 <http_post_rxpbuf>
 8006122:	4603      	mov	r3, r0
 8006124:	e010      	b.n	8006148 <http_post_request+0x1b8>
            } else {
              return ERR_OK;
 8006126:	2300      	movs	r3, #0
 8006128:	e00e      	b.n	8006148 <http_post_request+0x1b8>
            }
          } else {
            /* return file passed from application */
            return http_find_file(hs, http_uri_buf, 0);
 800612a:	2200      	movs	r2, #0
 800612c:	490b      	ldr	r1, [pc, #44]	; (800615c <http_post_request+0x1cc>)
 800612e:	68b8      	ldr	r0, [r7, #8]
 8006130:	f000 f996 	bl	8006460 <http_find_file>
 8006134:	4603      	mov	r3, r0
 8006136:	e007      	b.n	8006148 <http_post_request+0x1b8>
          }
        } else {
          LWIP_DEBUGF(HTTPD_DEBUG, ("POST received invalid Content-Length: %s\n",
                                    content_len_num));
          return ERR_ARG;
 8006138:	f06f 030f 	mvn.w	r3, #15
 800613c:	e004      	b.n	8006148 <http_post_request+0x1b8>
    }
    /* If we come here, headers are fully received (double-crlf), but Content-Length
       was not included. Since this is currently the only supported method, we have
       to fail in this case! */
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error when parsing Content-Length\n"));
    return ERR_ARG;
 800613e:	f06f 030f 	mvn.w	r3, #15
 8006142:	e001      	b.n	8006148 <http_post_request+0x1b8>
  }
  /* if we come here, the POST is incomplete */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  return ERR_INPROGRESS;
 8006144:	f06f 0304 	mvn.w	r3, #4
#else /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  return ERR_ARG;
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 8006148:	4618      	mov	r0, r3
 800614a:	3738      	adds	r7, #56	; 0x38
 800614c:	46bd      	mov	sp, r7
 800614e:	bd80      	pop	{r7, pc}
 8006150:	080139dc 	.word	0x080139dc
 8006154:	08013480 	.word	0x08013480
 8006158:	08013964 	.word	0x08013964
 800615c:	200004c0 	.word	0x200004c0

08006160 <http_parse_request>:
 *         ERR_INPROGRESS if request was OK so far but not fully received
 *         another err_t otherwise
 */
static err_t
http_parse_request(struct pbuf *inp, struct http_state *hs, struct altcp_pcb *pcb)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b092      	sub	sp, #72	; 0x48
 8006164:	af02      	add	r7, sp, #8
 8006166:	60f8      	str	r0, [r7, #12]
 8006168:	60b9      	str	r1, [r7, #8]
 800616a:	607a      	str	r2, [r7, #4]
  char *data;
  char *crlf;
  u16_t data_len;
  struct pbuf *p = inp;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	627b      	str	r3, [r7, #36]	; 0x24
#if LWIP_HTTPD_SUPPORT_POST
  err_t err;
#endif /* LWIP_HTTPD_SUPPORT_POST */

  LWIP_UNUSED_ARG(pcb); /* only used for post */
  LWIP_ASSERT("p != NULL", p != NULL);
 8006170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006172:	2b00      	cmp	r3, #0
 8006174:	d106      	bne.n	8006184 <http_parse_request+0x24>
 8006176:	4b87      	ldr	r3, [pc, #540]	; (8006394 <http_parse_request+0x234>)
 8006178:	f240 72ae 	movw	r2, #1966	; 0x7ae
 800617c:	4986      	ldr	r1, [pc, #536]	; (8006398 <http_parse_request+0x238>)
 800617e:	4887      	ldr	r0, [pc, #540]	; (800639c <http_parse_request+0x23c>)
 8006180:	f00b fabe 	bl	8011700 <iprintf>
  LWIP_ASSERT("hs != NULL", hs != NULL);
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d106      	bne.n	8006198 <http_parse_request+0x38>
 800618a:	4b82      	ldr	r3, [pc, #520]	; (8006394 <http_parse_request+0x234>)
 800618c:	f240 72af 	movw	r2, #1967	; 0x7af
 8006190:	4983      	ldr	r1, [pc, #524]	; (80063a0 <http_parse_request+0x240>)
 8006192:	4882      	ldr	r0, [pc, #520]	; (800639c <http_parse_request+0x23c>)
 8006194:	f00b fab4 	bl	8011700 <iprintf>

  if ((hs->handle != NULL) || (hs->file != NULL)) {
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	695b      	ldr	r3, [r3, #20]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d103      	bne.n	80061a8 <http_parse_request+0x48>
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	699b      	ldr	r3, [r3, #24]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d002      	beq.n	80061ae <http_parse_request+0x4e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Received data while sending a file\n"));
    /* already sending a file */
    /* @todo: abort? */
    return ERR_USE;
 80061a8:	f06f 0307 	mvn.w	r3, #7
 80061ac:	e0ed      	b.n	800638a <http_parse_request+0x22a>
  LWIP_DEBUGF(HTTPD_DEBUG, ("Received %"U16_F" bytes\n", p->tot_len));

  /* first check allowed characters in this pbuf? */

  /* enqueue the pbuf */
  if (hs->req == NULL) {
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	6a1b      	ldr	r3, [r3, #32]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d103      	bne.n	80061be <http_parse_request+0x5e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("First pbuf\n"));
    hs->req = p;
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061ba:	621a      	str	r2, [r3, #32]
 80061bc:	e005      	b.n	80061ca <http_parse_request+0x6a>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG, ("pbuf enqueued\n"));
    pbuf_cat(hs->req, p);
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	6a1b      	ldr	r3, [r3, #32]
 80061c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80061c4:	4618      	mov	r0, r3
 80061c6:	f002 f995 	bl	80084f4 <pbuf_cat>
  }
  /* increase pbuf ref counter as it is freed when we return but we want to
     keep it on the req list */
  pbuf_ref(p);
 80061ca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80061cc:	f002 f970 	bl	80084b0 <pbuf_ref>

  if (hs->req->next != NULL) {
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	6a1b      	ldr	r3, [r3, #32]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d012      	beq.n	8006200 <http_parse_request+0xa0>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	6a1b      	ldr	r3, [r3, #32]
 80061de:	891b      	ldrh	r3, [r3, #8]
 80061e0:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80061e4:	4293      	cmp	r3, r2
 80061e6:	bf28      	it	cs
 80061e8:	4613      	movcs	r3, r2
 80061ea:	877b      	strh	r3, [r7, #58]	; 0x3a
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	6a18      	ldr	r0, [r3, #32]
 80061f0:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80061f2:	2300      	movs	r3, #0
 80061f4:	496b      	ldr	r1, [pc, #428]	; (80063a4 <http_parse_request+0x244>)
 80061f6:	f002 faa5 	bl	8008744 <pbuf_copy_partial>
    data = httpd_req_buf;
 80061fa:	4b6a      	ldr	r3, [pc, #424]	; (80063a4 <http_parse_request+0x244>)
 80061fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80061fe:	e005      	b.n	800620c <http_parse_request+0xac>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
    data = (char *)p->payload;
 8006200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006202:	685b      	ldr	r3, [r3, #4]
 8006204:	63fb      	str	r3, [r7, #60]	; 0x3c
    data_len = p->len;
 8006206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006208:	895b      	ldrh	r3, [r3, #10]
 800620a:	877b      	strh	r3, [r7, #58]	; 0x3a
      LWIP_DEBUGF(HTTPD_DEBUG, ("Warning: incomplete header due to chained pbufs\n"));
    }
  }

  /* received enough data for minimal request? */
  if (data_len >= MIN_REQ_LEN) {
 800620c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800620e:	2b06      	cmp	r3, #6
 8006210:	f240 80a1 	bls.w	8006356 <http_parse_request+0x1f6>
    /* wait for CRLF before parsing anything */
    crlf = lwip_strnstr(data, CRLF, data_len);
 8006214:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8006216:	461a      	mov	r2, r3
 8006218:	4963      	ldr	r1, [pc, #396]	; (80063a8 <http_parse_request+0x248>)
 800621a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800621c:	f000 fd44 	bl	8006ca8 <lwip_strnstr>
 8006220:	6238      	str	r0, [r7, #32]
    if (crlf != NULL) {
 8006222:	6a3b      	ldr	r3, [r7, #32]
 8006224:	2b00      	cmp	r3, #0
 8006226:	f000 8096 	beq.w	8006356 <http_parse_request+0x1f6>
#if LWIP_HTTPD_SUPPORT_POST
      int is_post = 0;
 800622a:	2300      	movs	r3, #0
 800622c:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LWIP_HTTPD_SUPPORT_POST */
      int is_09 = 0;
 800622e:	2300      	movs	r3, #0
 8006230:	633b      	str	r3, [r7, #48]	; 0x30
      char *sp1, *sp2;
      u16_t left_len, uri_len;
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("CRLF received, parsing request\n"));
      /* parse method */
      if (!strncmp(data, "GET ", 4)) {
 8006232:	2204      	movs	r2, #4
 8006234:	495d      	ldr	r1, [pc, #372]	; (80063ac <http_parse_request+0x24c>)
 8006236:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006238:	f00b fb84 	bl	8011944 <strncmp>
 800623c:	4603      	mov	r3, r0
 800623e:	2b00      	cmp	r3, #0
 8006240:	d103      	bne.n	800624a <http_parse_request+0xea>
        sp1 = data + 3;
 8006242:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006244:	3303      	adds	r3, #3
 8006246:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006248:	e014      	b.n	8006274 <http_parse_request+0x114>
        /* received GET request */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Received GET request\"\n"));
#if LWIP_HTTPD_SUPPORT_POST
      } else if (!strncmp(data, "POST ", 5)) {
 800624a:	2205      	movs	r2, #5
 800624c:	4958      	ldr	r1, [pc, #352]	; (80063b0 <http_parse_request+0x250>)
 800624e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006250:	f00b fb78 	bl	8011944 <strncmp>
 8006254:	4603      	mov	r3, r0
 8006256:	2b00      	cmp	r3, #0
 8006258:	d105      	bne.n	8006266 <http_parse_request+0x106>
        /* store request type */
        is_post = 1;
 800625a:	2301      	movs	r3, #1
 800625c:	637b      	str	r3, [r7, #52]	; 0x34
        sp1 = data + 4;
 800625e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006260:	3304      	adds	r3, #4
 8006262:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006264:	e006      	b.n	8006274 <http_parse_request+0x114>
        /* received GET request */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Received POST request\n"));
#endif /* LWIP_HTTPD_SUPPORT_POST */
      } else {
        /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
        data[4] = 0;
 8006266:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006268:	3304      	adds	r3, #4
 800626a:	2200      	movs	r2, #0
 800626c:	701a      	strb	r2, [r3, #0]
        /* unsupported method! */
        LWIP_DEBUGF(HTTPD_DEBUG, ("Unsupported request method (not implemented): \"%s\"\n",
                                  data));
        return http_find_error_file(hs, 501);
 800626e:	f06f 030f 	mvn.w	r3, #15
 8006272:	e08a      	b.n	800638a <http_parse_request+0x22a>
      }
      /* if we come here, method is OK, parse URI */
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 8006274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006276:	1c5a      	adds	r2, r3, #1
 8006278:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800627a:	1ad3      	subs	r3, r2, r3
 800627c:	b29b      	uxth	r3, r3
 800627e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8006280:	1ad3      	subs	r3, r2, r3
 8006282:	83fb      	strh	r3, [r7, #30]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 8006284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006286:	3301      	adds	r3, #1
 8006288:	8bfa      	ldrh	r2, [r7, #30]
 800628a:	494a      	ldr	r1, [pc, #296]	; (80063b4 <http_parse_request+0x254>)
 800628c:	4618      	mov	r0, r3
 800628e:	f000 fd0b 	bl	8006ca8 <lwip_strnstr>
 8006292:	62b8      	str	r0, [r7, #40]	; 0x28
#if LWIP_HTTPD_SUPPORT_V09
      if (sp2 == NULL) {
 8006294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006296:	2b00      	cmp	r3, #0
 8006298:	d10c      	bne.n	80062b4 <http_parse_request+0x154>
        /* HTTP 0.9: respond with correct protocol version */
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 800629a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800629c:	3301      	adds	r3, #1
 800629e:	8bfa      	ldrh	r2, [r7, #30]
 80062a0:	4941      	ldr	r1, [pc, #260]	; (80063a8 <http_parse_request+0x248>)
 80062a2:	4618      	mov	r0, r3
 80062a4:	f000 fd00 	bl	8006ca8 <lwip_strnstr>
 80062a8:	62b8      	str	r0, [r7, #40]	; 0x28
        is_09 = 1;
 80062aa:	2301      	movs	r3, #1
 80062ac:	633b      	str	r3, [r7, #48]	; 0x30
#if LWIP_HTTPD_SUPPORT_POST
        if (is_post) {
 80062ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d163      	bne.n	800637c <http_parse_request+0x21c>
          goto badrequest;
        }
#endif /* LWIP_HTTPD_SUPPORT_POST */
      }
#endif /* LWIP_HTTPD_SUPPORT_V09 */
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 80062b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062b6:	3301      	adds	r3, #1
 80062b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80062ba:	1ad3      	subs	r3, r2, r3
 80062bc:	83bb      	strh	r3, [r7, #28]
      if ((sp2 != 0) && (sp2 > sp1)) {
 80062be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d048      	beq.n	8006356 <http_parse_request+0x1f6>
 80062c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80062c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062c8:	429a      	cmp	r2, r3
 80062ca:	d944      	bls.n	8006356 <http_parse_request+0x1f6>
        /* wait for CRLFCRLF (indicating end of HTTP headers) before parsing anything */
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 80062cc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80062ce:	461a      	mov	r2, r3
 80062d0:	4939      	ldr	r1, [pc, #228]	; (80063b8 <http_parse_request+0x258>)
 80062d2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80062d4:	f000 fce8 	bl	8006ca8 <lwip_strnstr>
 80062d8:	4603      	mov	r3, r0
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d03b      	beq.n	8006356 <http_parse_request+0x1f6>
          char *uri = sp1 + 1;
 80062de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062e0:	3301      	adds	r3, #1
 80062e2:	61bb      	str	r3, [r7, #24]
          } else {
            hs->keepalive = 0;
          }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
          /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
          *sp1 = 0;
 80062e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062e6:	2200      	movs	r2, #0
 80062e8:	701a      	strb	r2, [r3, #0]
          uri[uri_len] = 0;
 80062ea:	8bbb      	ldrh	r3, [r7, #28]
 80062ec:	69ba      	ldr	r2, [r7, #24]
 80062ee:	4413      	add	r3, r2
 80062f0:	2200      	movs	r2, #0
 80062f2:	701a      	strb	r2, [r3, #0]
          LWIP_DEBUGF(HTTPD_DEBUG, ("Received \"%s\" request for URI: \"%s\"\n",
                                    data, uri));
#if LWIP_HTTPD_SUPPORT_POST
          if (is_post) {
 80062f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d026      	beq.n	8006348 <http_parse_request+0x1e8>
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
            struct pbuf *q = hs->req;
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	6a1b      	ldr	r3, [r3, #32]
 80062fe:	617b      	str	r3, [r7, #20]
#else /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
            struct pbuf *q = inp;
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
            err = http_post_request(q, hs, data, data_len, uri, sp2);
 8006300:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8006302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006304:	9301      	str	r3, [sp, #4]
 8006306:	69bb      	ldr	r3, [r7, #24]
 8006308:	9300      	str	r3, [sp, #0]
 800630a:	4613      	mov	r3, r2
 800630c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800630e:	68b9      	ldr	r1, [r7, #8]
 8006310:	6978      	ldr	r0, [r7, #20]
 8006312:	f7ff fe3d 	bl	8005f90 <http_post_request>
 8006316:	4603      	mov	r3, r0
 8006318:	74fb      	strb	r3, [r7, #19]
            if (err != ERR_OK) {
 800631a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d00a      	beq.n	8006338 <http_parse_request+0x1d8>
              /* restore header for next try */
              *sp1 = ' ';
 8006322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006324:	2220      	movs	r2, #32
 8006326:	701a      	strb	r2, [r3, #0]
              *sp2 = ' ';
 8006328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800632a:	2220      	movs	r2, #32
 800632c:	701a      	strb	r2, [r3, #0]
              uri[uri_len] = ' ';
 800632e:	8bbb      	ldrh	r3, [r7, #28]
 8006330:	69ba      	ldr	r2, [r7, #24]
 8006332:	4413      	add	r3, r2
 8006334:	2220      	movs	r2, #32
 8006336:	701a      	strb	r2, [r3, #0]
            }
            if (err == ERR_ARG) {
 8006338:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800633c:	f113 0f10 	cmn.w	r3, #16
 8006340:	d01e      	beq.n	8006380 <http_parse_request+0x220>
              goto badrequest;
            }
            return err;
 8006342:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006346:	e020      	b.n	800638a <http_parse_request+0x22a>
          } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
          {
            return http_find_file(hs, uri, is_09);
 8006348:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800634a:	69b9      	ldr	r1, [r7, #24]
 800634c:	68b8      	ldr	r0, [r7, #8]
 800634e:	f000 f887 	bl	8006460 <http_find_file>
 8006352:	4603      	mov	r3, r0
 8006354:	e019      	b.n	800638a <http_parse_request+0x22a>
      }
    }
  }

#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  clen = pbuf_clen(hs->req);
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	6a1b      	ldr	r3, [r3, #32]
 800635a:	4618      	mov	r0, r3
 800635c:	f002 f890 	bl	8008480 <pbuf_clen>
 8006360:	4603      	mov	r3, r0
 8006362:	823b      	strh	r3, [r7, #16]
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	6a1b      	ldr	r3, [r3, #32]
 8006368:	891b      	ldrh	r3, [r3, #8]
 800636a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800636e:	d209      	bcs.n	8006384 <http_parse_request+0x224>
 8006370:	8a3b      	ldrh	r3, [r7, #16]
 8006372:	2b05      	cmp	r3, #5
 8006374:	d806      	bhi.n	8006384 <http_parse_request+0x224>
      (clen <= LWIP_HTTPD_REQ_QUEUELEN)) {
    /* request not fully received (too short or CRLF is missing) */
    return ERR_INPROGRESS;
 8006376:	f06f 0304 	mvn.w	r3, #4
 800637a:	e006      	b.n	800638a <http_parse_request+0x22a>
          goto badrequest;
 800637c:	bf00      	nop
 800637e:	e002      	b.n	8006386 <http_parse_request+0x226>
              goto badrequest;
 8006380:	bf00      	nop
 8006382:	e000      	b.n	8006386 <http_parse_request+0x226>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
#if LWIP_HTTPD_SUPPORT_POST
badrequest:
 8006384:	bf00      	nop
#endif /* LWIP_HTTPD_SUPPORT_POST */
    LWIP_DEBUGF(HTTPD_DEBUG, ("bad request\n"));
    /* could not parse request */
    return http_find_error_file(hs, 400);
 8006386:	f06f 030f 	mvn.w	r3, #15
  }
}
 800638a:	4618      	mov	r0, r3
 800638c:	3740      	adds	r7, #64	; 0x40
 800638e:	46bd      	mov	sp, r7
 8006390:	bd80      	pop	{r7, pc}
 8006392:	bf00      	nop
 8006394:	08013870 	.word	0x08013870
 8006398:	080139e4 	.word	0x080139e4
 800639c:	080138b8 	.word	0x080138b8
 80063a0:	080138e0 	.word	0x080138e0
 80063a4:	200000c0 	.word	0x200000c0
 80063a8:	08013964 	.word	0x08013964
 80063ac:	080139f0 	.word	0x080139f0
 80063b0:	080139f8 	.word	0x080139f8
 80063b4:	08013a00 	.word	0x08013a00
 80063b8:	080139dc 	.word	0x080139dc

080063bc <http_uri_is_ssi>:
 *
 * @return 1 for SSI, 0 for standard files
 */
static u8_t
http_uri_is_ssi(struct fs_file *file, const char *uri)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b088      	sub	sp, #32
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
 80063c4:	6039      	str	r1, [r7, #0]
  size_t loop;
  u8_t tag_check = 0;
 80063c6:	2300      	movs	r3, #0
 80063c8:	76fb      	strb	r3, [r7, #27]
  if (file != NULL) {
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d040      	beq.n	8006452 <http_uri_is_ssi+0x96>
    /* See if we have been asked for an shtml file and, if so,
        enable tag checking. */
    const char *ext = NULL, *sub;
 80063d0:	2300      	movs	r3, #0
 80063d2:	617b      	str	r3, [r7, #20]
    char *param = (char *)strstr(uri, "?");
 80063d4:	213f      	movs	r1, #63	; 0x3f
 80063d6:	6838      	ldr	r0, [r7, #0]
 80063d8:	f00b fa9f 	bl	801191a <strchr>
 80063dc:	60f8      	str	r0, [r7, #12]
    if (param != NULL) {
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d002      	beq.n	80063ea <http_uri_is_ssi+0x2e>
      /* separate uri from parameters for now, set back later */
      *param = 0;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	2200      	movs	r2, #0
 80063e8:	701a      	strb	r2, [r3, #0]
    }
    sub = uri;
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	613b      	str	r3, [r7, #16]
    ext = uri;
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	617b      	str	r3, [r7, #20]
    for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, ".")) {
 80063f2:	212e      	movs	r1, #46	; 0x2e
 80063f4:	6938      	ldr	r0, [r7, #16]
 80063f6:	f00b fa90 	bl	801191a <strchr>
 80063fa:	6138      	str	r0, [r7, #16]
 80063fc:	e009      	b.n	8006412 <http_uri_is_ssi+0x56>
      ext = sub;
 80063fe:	693b      	ldr	r3, [r7, #16]
 8006400:	617b      	str	r3, [r7, #20]
      sub++;
 8006402:	693b      	ldr	r3, [r7, #16]
 8006404:	3301      	adds	r3, #1
 8006406:	613b      	str	r3, [r7, #16]
    for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, ".")) {
 8006408:	212e      	movs	r1, #46	; 0x2e
 800640a:	6938      	ldr	r0, [r7, #16]
 800640c:	f00b fa85 	bl	801191a <strchr>
 8006410:	6138      	str	r0, [r7, #16]
 8006412:	693b      	ldr	r3, [r7, #16]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d1f2      	bne.n	80063fe <http_uri_is_ssi+0x42>
    }
    for (loop = 0; loop < NUM_SHTML_EXTENSIONS; loop++) {
 8006418:	2300      	movs	r3, #0
 800641a:	61fb      	str	r3, [r7, #28]
 800641c:	e010      	b.n	8006440 <http_uri_is_ssi+0x84>
      if (!lwip_stricmp(ext, g_pcSSIExtensions[loop])) {
 800641e:	4a0f      	ldr	r2, [pc, #60]	; (800645c <http_uri_is_ssi+0xa0>)
 8006420:	69fb      	ldr	r3, [r7, #28]
 8006422:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006426:	4619      	mov	r1, r3
 8006428:	6978      	ldr	r0, [r7, #20]
 800642a:	f000 fc73 	bl	8006d14 <lwip_stricmp>
 800642e:	4603      	mov	r3, r0
 8006430:	2b00      	cmp	r3, #0
 8006432:	d102      	bne.n	800643a <http_uri_is_ssi+0x7e>
        tag_check = 1;
 8006434:	2301      	movs	r3, #1
 8006436:	76fb      	strb	r3, [r7, #27]
        break;
 8006438:	e005      	b.n	8006446 <http_uri_is_ssi+0x8a>
    for (loop = 0; loop < NUM_SHTML_EXTENSIONS; loop++) {
 800643a:	69fb      	ldr	r3, [r7, #28]
 800643c:	3301      	adds	r3, #1
 800643e:	61fb      	str	r3, [r7, #28]
 8006440:	69fb      	ldr	r3, [r7, #28]
 8006442:	2b04      	cmp	r3, #4
 8006444:	d9eb      	bls.n	800641e <http_uri_is_ssi+0x62>
      }
    }
    if (param != NULL) {
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d002      	beq.n	8006452 <http_uri_is_ssi+0x96>
      *param = '?';
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	223f      	movs	r2, #63	; 0x3f
 8006450:	701a      	strb	r2, [r3, #0]
    }
  }
  return tag_check;
 8006452:	7efb      	ldrb	r3, [r7, #27]
}
 8006454:	4618      	mov	r0, r3
 8006456:	3720      	adds	r7, #32
 8006458:	46bd      	mov	sp, r7
 800645a:	bd80      	pop	{r7, pc}
 800645c:	080176b4 	.word	0x080176b4

08006460 <http_find_file>:
 * @return ERR_OK if file was found and hs has been initialized correctly
 *         another err_t otherwise
 */
static err_t
http_find_file(struct http_state *hs, const char *uri, int is_09)
{
 8006460:	b590      	push	{r4, r7, lr}
 8006462:	b093      	sub	sp, #76	; 0x4c
 8006464:	af02      	add	r7, sp, #8
 8006466:	60f8      	str	r0, [r7, #12]
 8006468:	60b9      	str	r1, [r7, #8]
 800646a:	607a      	str	r2, [r7, #4]
  size_t loop;
  struct fs_file *file = NULL;
 800646c:	2300      	movs	r3, #0
 800646e:	63bb      	str	r3, [r7, #56]	; 0x38
  char *params = NULL;
 8006470:	2300      	movs	r3, #0
 8006472:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LWIP_HTTPD_CGI */
#if !LWIP_HTTPD_SSI
  const
#endif /* !LWIP_HTTPD_SSI */
  /* By default, assume we will not be processing server-side-includes tags */
  u8_t tag_check = 0;
 8006474:	2300      	movs	r3, #0
 8006476:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Have we been asked for the default file (in root or a directory) ? */
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
  size_t uri_len = strlen(uri);
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	4618      	mov	r0, r3
 800647e:	f7f9 feb1 	bl	80001e4 <strlen>
 8006482:	6278      	str	r0, [r7, #36]	; 0x24
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 8006484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006486:	2b00      	cmp	r3, #0
 8006488:	d072      	beq.n	8006570 <http_find_file+0x110>
 800648a:	68ba      	ldr	r2, [r7, #8]
 800648c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800648e:	3b01      	subs	r3, #1
 8006490:	4413      	add	r3, r2
 8006492:	781b      	ldrb	r3, [r3, #0]
 8006494:	2b2f      	cmp	r3, #47	; 0x2f
 8006496:	d16b      	bne.n	8006570 <http_find_file+0x110>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 8006498:	68bb      	ldr	r3, [r7, #8]
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 800649a:	4a80      	ldr	r2, [pc, #512]	; (800669c <http_find_file+0x23c>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d102      	bne.n	80064a6 <http_find_file+0x46>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 80064a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a2:	2b01      	cmp	r3, #1
 80064a4:	d164      	bne.n	8006570 <http_find_file+0x110>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 80064a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a8:	3b01      	subs	r3, #1
 80064aa:	2b3f      	cmp	r3, #63	; 0x3f
 80064ac:	bf28      	it	cs
 80064ae:	233f      	movcs	r3, #63	; 0x3f
 80064b0:	623b      	str	r3, [r7, #32]
    if (copy_len > 0) {
 80064b2:	6a3b      	ldr	r3, [r7, #32]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d00a      	beq.n	80064ce <http_find_file+0x6e>
      MEMCPY(http_uri_buf, uri, copy_len);
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	6a3a      	ldr	r2, [r7, #32]
 80064bc:	4619      	mov	r1, r3
 80064be:	4877      	ldr	r0, [pc, #476]	; (800669c <http_find_file+0x23c>)
 80064c0:	f00b f844 	bl	801154c <memcpy>
      http_uri_buf[copy_len] = 0;
 80064c4:	4a75      	ldr	r2, [pc, #468]	; (800669c <http_find_file+0x23c>)
 80064c6:	6a3b      	ldr	r3, [r7, #32]
 80064c8:	4413      	add	r3, r2
 80064ca:	2200      	movs	r2, #0
 80064cc:	701a      	strb	r2, [r3, #0]
#else /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
  if ((uri[0] == '/') &&  (uri[1] == 0)) {
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
    /* Try each of the configured default filenames until we find one
       that exists. */
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 80064ce:	2300      	movs	r3, #0
 80064d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80064d2:	e04a      	b.n	800656a <http_find_file+0x10a>
      const char *file_name;
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
      if (copy_len > 0) {
 80064d4:	6a3b      	ldr	r3, [r7, #32]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d028      	beq.n	800652c <http_find_file+0xcc>
        size_t len_left = sizeof(http_uri_buf) - copy_len - 1;
 80064da:	6a3b      	ldr	r3, [r7, #32]
 80064dc:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 80064e0:	61fb      	str	r3, [r7, #28]
        if (len_left > 0) {
 80064e2:	69fb      	ldr	r3, [r7, #28]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d01e      	beq.n	8006526 <http_find_file+0xc6>
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 80064e8:	4a6d      	ldr	r2, [pc, #436]	; (80066a0 <http_find_file+0x240>)
 80064ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064ec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80064f0:	4618      	mov	r0, r3
 80064f2:	f7f9 fe77 	bl	80001e4 <strlen>
 80064f6:	61b8      	str	r0, [r7, #24]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 80064f8:	69ba      	ldr	r2, [r7, #24]
 80064fa:	69fb      	ldr	r3, [r7, #28]
 80064fc:	4293      	cmp	r3, r2
 80064fe:	bf28      	it	cs
 8006500:	4613      	movcs	r3, r2
 8006502:	617b      	str	r3, [r7, #20]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 8006504:	6a3b      	ldr	r3, [r7, #32]
 8006506:	4a65      	ldr	r2, [pc, #404]	; (800669c <http_find_file+0x23c>)
 8006508:	1898      	adds	r0, r3, r2
 800650a:	4a65      	ldr	r2, [pc, #404]	; (80066a0 <http_find_file+0x240>)
 800650c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800650e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006512:	697a      	ldr	r2, [r7, #20]
 8006514:	4619      	mov	r1, r3
 8006516:	f00b f819 	bl	801154c <memcpy>
          http_uri_buf[copy_len + name_copy_len] = 0;
 800651a:	6a3a      	ldr	r2, [r7, #32]
 800651c:	697b      	ldr	r3, [r7, #20]
 800651e:	4413      	add	r3, r2
 8006520:	4a5e      	ldr	r2, [pc, #376]	; (800669c <http_find_file+0x23c>)
 8006522:	2100      	movs	r1, #0
 8006524:	54d1      	strb	r1, [r2, r3]
        }
        file_name = http_uri_buf;
 8006526:	4b5d      	ldr	r3, [pc, #372]	; (800669c <http_find_file+0x23c>)
 8006528:	62bb      	str	r3, [r7, #40]	; 0x28
 800652a:	e004      	b.n	8006536 <http_find_file+0xd6>
      } else
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
      {
        file_name = httpd_default_filenames[loop].name;
 800652c:	4a5c      	ldr	r2, [pc, #368]	; (80066a0 <http_find_file+0x240>)
 800652e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006530:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006534:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Looking for %s...\n", file_name));
      err = fs_open(&hs->file_handle, file_name);
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800653a:	4618      	mov	r0, r3
 800653c:	f7fe fbb0 	bl	8004ca0 <fs_open>
 8006540:	4603      	mov	r3, r0
 8006542:	74fb      	strb	r3, [r7, #19]
      if (err == ERR_OK) {
 8006544:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d10b      	bne.n	8006564 <http_find_file+0x104>
        uri = file_name;
 800654c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800654e:	60bb      	str	r3, [r7, #8]
        file = &hs->file_handle;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	63bb      	str	r3, [r7, #56]	; 0x38
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opened.\n"));
#if LWIP_HTTPD_SSI
        tag_check = httpd_default_filenames[loop].shtml;
 8006554:	4a52      	ldr	r2, [pc, #328]	; (80066a0 <http_find_file+0x240>)
 8006556:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006558:	00db      	lsls	r3, r3, #3
 800655a:	4413      	add	r3, r2
 800655c:	791b      	ldrb	r3, [r3, #4]
 800655e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#endif /* LWIP_HTTPD_SSI */
        break;
 8006562:	e005      	b.n	8006570 <http_find_file+0x110>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 8006564:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006566:	3301      	adds	r3, #1
 8006568:	63fb      	str	r3, [r7, #60]	; 0x3c
 800656a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800656c:	2b04      	cmp	r3, #4
 800656e:	d9b1      	bls.n	80064d4 <http_find_file+0x74>
      }
    }
  }
  if (file == NULL) {
 8006570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006572:	2b00      	cmp	r3, #0
 8006574:	d177      	bne.n	8006666 <http_find_file+0x206>
    /* No - we've been asked for a specific file. */
    /* First, isolate the base URI (without any parameters) */
    params = (char *)strchr(uri, '?');
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	213f      	movs	r1, #63	; 0x3f
 800657a:	4618      	mov	r0, r3
 800657c:	f00b f9cd 	bl	801191a <strchr>
 8006580:	6378      	str	r0, [r7, #52]	; 0x34
    if (params != NULL) {
 8006582:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006584:	2b00      	cmp	r3, #0
 8006586:	d005      	beq.n	8006594 <http_find_file+0x134>
      /* URI contains parameters. NULL-terminate the base URI */
      *params = '\0';
 8006588:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800658a:	2200      	movs	r2, #0
 800658c:	701a      	strb	r2, [r3, #0]
      params++;
 800658e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006590:	3301      	adds	r3, #1
 8006592:	637b      	str	r3, [r7, #52]	; 0x34
    }

#if LWIP_HTTPD_CGI
    http_cgi_paramcount = -1;
 8006594:	4b43      	ldr	r3, [pc, #268]	; (80066a4 <http_find_file+0x244>)
 8006596:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800659a:	601a      	str	r2, [r3, #0]
    /* Does the base URI we have isolated correspond to a CGI handler? */
    if (httpd_num_cgis && httpd_cgis) {
 800659c:	4b42      	ldr	r3, [pc, #264]	; (80066a8 <http_find_file+0x248>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d035      	beq.n	8006610 <http_find_file+0x1b0>
 80065a4:	4b41      	ldr	r3, [pc, #260]	; (80066ac <http_find_file+0x24c>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d031      	beq.n	8006610 <http_find_file+0x1b0>
      for (i = 0; i < httpd_num_cgis; i++) {
 80065ac:	2300      	movs	r3, #0
 80065ae:	633b      	str	r3, [r7, #48]	; 0x30
 80065b0:	e029      	b.n	8006606 <http_find_file+0x1a6>
        if (strcmp(uri, httpd_cgis[i].pcCGIName) == 0) {
 80065b2:	68b8      	ldr	r0, [r7, #8]
 80065b4:	4b3d      	ldr	r3, [pc, #244]	; (80066ac <http_find_file+0x24c>)
 80065b6:	681a      	ldr	r2, [r3, #0]
 80065b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ba:	00db      	lsls	r3, r3, #3
 80065bc:	4413      	add	r3, r2
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4619      	mov	r1, r3
 80065c2:	f7f9 fe05 	bl	80001d0 <strcmp>
 80065c6:	4603      	mov	r3, r0
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d119      	bne.n	8006600 <http_find_file+0x1a0>
          /*
           * We found a CGI that handles this URI so extract the
           * parameters and call the handler.
           */
          http_cgi_paramcount = extract_uri_parameters(hs, params);
 80065cc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80065ce:	68f8      	ldr	r0, [r7, #12]
 80065d0:	f7fe fd20 	bl	8005014 <extract_uri_parameters>
 80065d4:	4603      	mov	r3, r0
 80065d6:	4a33      	ldr	r2, [pc, #204]	; (80066a4 <http_find_file+0x244>)
 80065d8:	6013      	str	r3, [r2, #0]
          uri = httpd_cgis[i].pfnCGIHandler(i, http_cgi_paramcount, hs->params,
 80065da:	4b34      	ldr	r3, [pc, #208]	; (80066ac <http_find_file+0x24c>)
 80065dc:	681a      	ldr	r2, [r3, #0]
 80065de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065e0:	00db      	lsls	r3, r3, #3
 80065e2:	4413      	add	r3, r2
 80065e4:	685c      	ldr	r4, [r3, #4]
 80065e6:	4b2f      	ldr	r3, [pc, #188]	; (80066a4 <http_find_file+0x244>)
 80065e8:	6819      	ldr	r1, [r3, #0]
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	f103 0230 	add.w	r2, r3, #48	; 0x30
                                         hs->param_vals);
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	f503 6332 	add.w	r3, r3, #2848	; 0xb20
          uri = httpd_cgis[i].pfnCGIHandler(i, http_cgi_paramcount, hs->params,
 80065f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80065f8:	47a0      	blx	r4
 80065fa:	4603      	mov	r3, r0
 80065fc:	60bb      	str	r3, [r7, #8]
          break;
 80065fe:	e007      	b.n	8006610 <http_find_file+0x1b0>
      for (i = 0; i < httpd_num_cgis; i++) {
 8006600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006602:	3301      	adds	r3, #1
 8006604:	633b      	str	r3, [r7, #48]	; 0x30
 8006606:	4b28      	ldr	r3, [pc, #160]	; (80066a8 <http_find_file+0x248>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800660c:	429a      	cmp	r2, r3
 800660e:	dbd0      	blt.n	80065b2 <http_find_file+0x152>
    }
#endif /* LWIP_HTTPD_CGI */

    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opening %s\n", uri));

    err = fs_open(&hs->file_handle, uri);
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	68ba      	ldr	r2, [r7, #8]
 8006614:	4611      	mov	r1, r2
 8006616:	4618      	mov	r0, r3
 8006618:	f7fe fb42 	bl	8004ca0 <fs_open>
 800661c:	4603      	mov	r3, r0
 800661e:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_OK) {
 8006620:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d102      	bne.n	800662e <http_find_file+0x1ce>
      file = &hs->file_handle;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	63bb      	str	r3, [r7, #56]	; 0x38
 800662c:	e006      	b.n	800663c <http_find_file+0x1dc>
    } else {
      file = http_get_404_file(hs, &uri);
 800662e:	f107 0308 	add.w	r3, r7, #8
 8006632:	4619      	mov	r1, r3
 8006634:	68f8      	ldr	r0, [r7, #12]
 8006636:	f7ff fc01 	bl	8005e3c <http_get_404_file>
 800663a:	63b8      	str	r0, [r7, #56]	; 0x38
    }
#if LWIP_HTTPD_SSI
    if (file != NULL) {
 800663c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800663e:	2b00      	cmp	r3, #0
 8006640:	d011      	beq.n	8006666 <http_find_file+0x206>
      if (file->flags & FS_FILE_FLAGS_SSI) {
 8006642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006644:	7c1b      	ldrb	r3, [r3, #16]
 8006646:	f003 0308 	and.w	r3, r3, #8
 800664a:	2b00      	cmp	r3, #0
 800664c:	d003      	beq.n	8006656 <http_find_file+0x1f6>
        tag_check = 1;
 800664e:	2301      	movs	r3, #1
 8006650:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8006654:	e007      	b.n	8006666 <http_find_file+0x206>
      } else {
#if LWIP_HTTPD_SSI_BY_FILE_EXTENSION
        tag_check = http_uri_is_ssi(file, uri);
 8006656:	68bb      	ldr	r3, [r7, #8]
 8006658:	4619      	mov	r1, r3
 800665a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800665c:	f7ff feae 	bl	80063bc <http_uri_is_ssi>
 8006660:	4603      	mov	r3, r0
 8006662:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#endif /* LWIP_HTTPD_SSI_BY_FILE_EXTENSION */
      }
    }
#endif /* LWIP_HTTPD_SSI */
  }
  if (file == NULL) {
 8006666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006668:	2b00      	cmp	r3, #0
 800666a:	d106      	bne.n	800667a <http_find_file+0x21a>
    /* None of the default filenames exist so send back a 404 page */
    file = http_get_404_file(hs, &uri);
 800666c:	f107 0308 	add.w	r3, r7, #8
 8006670:	4619      	mov	r1, r3
 8006672:	68f8      	ldr	r0, [r7, #12]
 8006674:	f7ff fbe2 	bl	8005e3c <http_get_404_file>
 8006678:	63b8      	str	r0, [r7, #56]	; 0x38
  }
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 800667a:	68ba      	ldr	r2, [r7, #8]
 800667c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800667e:	9301      	str	r3, [sp, #4]
 8006680:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006684:	9300      	str	r3, [sp, #0]
 8006686:	4613      	mov	r3, r2
 8006688:	687a      	ldr	r2, [r7, #4]
 800668a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800668c:	68f8      	ldr	r0, [r7, #12]
 800668e:	f000 f80f 	bl	80066b0 <http_init_file>
 8006692:	4603      	mov	r3, r0
}
 8006694:	4618      	mov	r0, r3
 8006696:	3744      	adds	r7, #68	; 0x44
 8006698:	46bd      	mov	sp, r7
 800669a:	bd90      	pop	{r4, r7, pc}
 800669c:	200004c0 	.word	0x200004c0
 80066a0:	080176c8 	.word	0x080176c8
 80066a4:	20000514 	.word	0x20000514
 80066a8:	20000510 	.word	0x20000510
 80066ac:	2000050c 	.word	0x2000050c

080066b0 <http_init_file>:
 *         another err_t otherwise
 */
static err_t
http_init_file(struct http_state *hs, struct fs_file *file, int is_09, const char *uri,
               u8_t tag_check, char *params)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b088      	sub	sp, #32
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	60f8      	str	r0, [r7, #12]
 80066b8:	60b9      	str	r1, [r7, #8]
 80066ba:	607a      	str	r2, [r7, #4]
 80066bc:	603b      	str	r3, [r7, #0]
#if !LWIP_HTTPD_SUPPORT_V09
  LWIP_UNUSED_ARG(is_09);
#endif
  if (file != NULL) {
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d06f      	beq.n	80067a4 <http_init_file+0xf4>
    /* file opened, initialise struct http_state */
#if !LWIP_HTTPD_DYNAMIC_FILE_READ
    /* If dynamic read is disabled, file data must be in one piece and available now */
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d106      	bne.n	80066da <http_init_file+0x2a>
 80066cc:	4b46      	ldr	r3, [pc, #280]	; (80067e8 <http_init_file+0x138>)
 80066ce:	f640 120b 	movw	r2, #2315	; 0x90b
 80066d2:	4946      	ldr	r1, [pc, #280]	; (80067ec <http_init_file+0x13c>)
 80066d4:	4846      	ldr	r0, [pc, #280]	; (80067f0 <http_init_file+0x140>)
 80066d6:	f00b f813 	bl	8011700 <iprintf>
#endif

#if LWIP_HTTPD_SSI
    if (tag_check) {
 80066da:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d01c      	beq.n	800671c <http_init_file+0x6c>
      struct http_ssi_state *ssi = http_ssi_state_alloc();
 80066e2:	f7fe fb34 	bl	8004d4e <http_ssi_state_alloc>
 80066e6:	61f8      	str	r0, [r7, #28]
      if (ssi != NULL) {
 80066e8:	69fb      	ldr	r3, [r7, #28]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d016      	beq.n	800671c <http_init_file+0x6c>
        ssi->tag_index = 0;
 80066ee:	69fb      	ldr	r3, [r7, #28]
 80066f0:	2200      	movs	r2, #0
 80066f2:	819a      	strh	r2, [r3, #12]
        ssi->tag_state = TAG_NONE;
 80066f4:	69fb      	ldr	r3, [r7, #28]
 80066f6:	2200      	movs	r2, #0
 80066f8:	f883 2bd4 	strb.w	r2, [r3, #3028]	; 0xbd4
        ssi->parsed = file->data;
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	681a      	ldr	r2, [r3, #0]
 8006700:	69fb      	ldr	r3, [r7, #28]
 8006702:	601a      	str	r2, [r3, #0]
        ssi->parse_left = file->len;
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	685b      	ldr	r3, [r3, #4]
 8006708:	461a      	mov	r2, r3
 800670a:	69fb      	ldr	r3, [r7, #28]
 800670c:	609a      	str	r2, [r3, #8]
        ssi->tag_end = file->data;
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	681a      	ldr	r2, [r3, #0]
 8006712:	69fb      	ldr	r3, [r7, #28]
 8006714:	605a      	str	r2, [r3, #4]
        hs->ssi = ssi;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	69fa      	ldr	r2, [r7, #28]
 800671a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
#else /* LWIP_HTTPD_SSI */
    LWIP_UNUSED_ARG(tag_check);
#endif /* LWIP_HTTPD_SSI */
    hs->handle = file;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	68ba      	ldr	r2, [r7, #8]
 8006720:	615a      	str	r2, [r3, #20]
                       );
    }
#else /* LWIP_HTTPD_CGI_SSI */
    LWIP_UNUSED_ARG(params);
#endif /* LWIP_HTTPD_CGI_SSI */
    hs->file = file->data;
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	681a      	ldr	r2, [r3, #0]
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	619a      	str	r2, [r3, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	685b      	ldr	r3, [r3, #4]
 800672e:	2b00      	cmp	r3, #0
 8006730:	da06      	bge.n	8006740 <http_init_file+0x90>
 8006732:	4b2d      	ldr	r3, [pc, #180]	; (80067e8 <http_init_file+0x138>)
 8006734:	f640 1234 	movw	r2, #2356	; 0x934
 8006738:	492e      	ldr	r1, [pc, #184]	; (80067f4 <http_init_file+0x144>)
 800673a:	482d      	ldr	r0, [pc, #180]	; (80067f0 <http_init_file+0x140>)
 800673c:	f00a ffe0 	bl	8011700 <iprintf>
      /* custom file, need to read data first (via fs_read_custom) */
      hs->left = 0;
    } else
#endif /* LWIP_HTTPD_CUSTOM_FILES */
    {
      hs->left = (u32_t)file->len;
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	685b      	ldr	r3, [r3, #4]
 8006744:	461a      	mov	r2, r3
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	625a      	str	r2, [r3, #36]	; 0x24
    }
    hs->retries = 0;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	2200      	movs	r2, #0
 800674e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
#if !LWIP_HTTPD_DYNAMIC_HEADERS
    LWIP_ASSERT("HTTP headers not included in file system",
                (hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0);
#endif /* !LWIP_HTTPD_DYNAMIC_HEADERS */
#if LWIP_HTTPD_SUPPORT_V09
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d032      	beq.n	80067be <http_init_file+0x10e>
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	695b      	ldr	r3, [r3, #20]
 800675c:	7c1b      	ldrb	r3, [r3, #16]
 800675e:	f003 0301 	and.w	r3, r3, #1
 8006762:	2b00      	cmp	r3, #0
 8006764:	d02b      	beq.n	80067be <http_init_file+0x10e>
      /* HTTP/0.9 responses are sent without HTTP header,
         search for the end of the header. */
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	6998      	ldr	r0, [r3, #24]
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800676e:	461a      	mov	r2, r3
 8006770:	4921      	ldr	r1, [pc, #132]	; (80067f8 <http_init_file+0x148>)
 8006772:	f000 fa99 	bl	8006ca8 <lwip_strnstr>
 8006776:	61b8      	str	r0, [r7, #24]
      if (file_start != NULL) {
 8006778:	69bb      	ldr	r3, [r7, #24]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d01f      	beq.n	80067be <http_init_file+0x10e>
        int diff = file_start + 4 - hs->file;
 800677e:	69bb      	ldr	r3, [r7, #24]
 8006780:	1d1a      	adds	r2, r3, #4
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	699b      	ldr	r3, [r3, #24]
 8006786:	1ad3      	subs	r3, r2, r3
 8006788:	617b      	str	r3, [r7, #20]
        hs->file += diff;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	699a      	ldr	r2, [r3, #24]
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	441a      	add	r2, r3
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	619a      	str	r2, [r3, #24]
        hs->left -= (u32_t)diff;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800679a:	697b      	ldr	r3, [r7, #20]
 800679c:	1ad2      	subs	r2, r2, r3
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	625a      	str	r2, [r3, #36]	; 0x24
 80067a2:	e00c      	b.n	80067be <http_init_file+0x10e>
      }
    }
#endif /* LWIP_HTTPD_SUPPORT_V09*/
  } else {
    hs->handle = NULL;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	2200      	movs	r2, #0
 80067a8:	615a      	str	r2, [r3, #20]
    hs->file = NULL;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	2200      	movs	r2, #0
 80067ae:	619a      	str	r2, [r3, #24]
    hs->left = 0;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	2200      	movs	r2, #0
 80067b4:	625a      	str	r2, [r3, #36]	; 0x24
    hs->retries = 0;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	2200      	movs	r2, #0
 80067ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  }
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Determine the HTTP headers to send based on the file extension of
   * the requested URI. */
  if ((hs->handle == NULL) || ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) == 0)) {
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	695b      	ldr	r3, [r3, #20]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d006      	beq.n	80067d4 <http_init_file+0x124>
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	695b      	ldr	r3, [r3, #20]
 80067ca:	7c1b      	ldrb	r3, [r3, #16]
 80067cc:	f003 0301 	and.w	r3, r3, #1
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d103      	bne.n	80067dc <http_init_file+0x12c>
    get_http_headers(hs, uri);
 80067d4:	6839      	ldr	r1, [r7, #0]
 80067d6:	68f8      	ldr	r0, [r7, #12]
 80067d8:	f7fe fd42 	bl	8005260 <get_http_headers>
        hs->keepalive = 0;
      }
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  return ERR_OK;
 80067dc:	2300      	movs	r3, #0
}
 80067de:	4618      	mov	r0, r3
 80067e0:	3720      	adds	r7, #32
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}
 80067e6:	bf00      	nop
 80067e8:	08013870 	.word	0x08013870
 80067ec:	08013a04 	.word	0x08013a04
 80067f0:	080138b8 	.word	0x080138b8
 80067f4:	08013a18 	.word	0x08013a18
 80067f8:	080139dc 	.word	0x080139dc

080067fc <http_err>:
 * The pcb had an error and is already deallocated.
 * The argument might still be valid (if != NULL).
 */
static void
http_err(void *arg, err_t err)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b084      	sub	sp, #16
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
 8006804:	460b      	mov	r3, r1
 8006806:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);

  LWIP_DEBUGF(HTTPD_DEBUG, ("http_err: %s", lwip_strerr(err)));

  if (hs != NULL) {
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d002      	beq.n	8006818 <http_err+0x1c>
    http_state_free(hs);
 8006812:	68f8      	ldr	r0, [r7, #12]
 8006814:	f7fe fb12 	bl	8004e3c <http_state_free>
  }
}
 8006818:	bf00      	nop
 800681a:	3710      	adds	r7, #16
 800681c:	46bd      	mov	sp, r7
 800681e:	bd80      	pop	{r7, pc}

08006820 <http_sent>:
 * Data has been sent and acknowledged by the remote host.
 * This means that more data can be sent.
 */
static err_t
http_sent(void *arg, struct altcp_pcb *pcb, u16_t len)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b086      	sub	sp, #24
 8006824:	af00      	add	r7, sp, #0
 8006826:	60f8      	str	r0, [r7, #12]
 8006828:	60b9      	str	r1, [r7, #8]
 800682a:	4613      	mov	r3, r2
 800682c:	80fb      	strh	r3, [r7, #6]
  struct http_state *hs = (struct http_state *)arg;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	617b      	str	r3, [r7, #20]

  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_sent %p\n", (void *)pcb));

  LWIP_UNUSED_ARG(len);

  if (hs == NULL) {
 8006832:	697b      	ldr	r3, [r7, #20]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d101      	bne.n	800683c <http_sent+0x1c>
    return ERR_OK;
 8006838:	2300      	movs	r3, #0
 800683a:	e008      	b.n	800684e <http_sent+0x2e>
  }

  hs->retries = 0;
 800683c:	697b      	ldr	r3, [r7, #20]
 800683e:	2200      	movs	r2, #0
 8006840:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  http_send(pcb, hs);
 8006844:	6979      	ldr	r1, [r7, #20]
 8006846:	68b8      	ldr	r0, [r7, #8]
 8006848:	f7ff fa9a 	bl	8005d80 <http_send>

  return ERR_OK;
 800684c:	2300      	movs	r3, #0
}
 800684e:	4618      	mov	r0, r3
 8006850:	3718      	adds	r7, #24
 8006852:	46bd      	mov	sp, r7
 8006854:	bd80      	pop	{r7, pc}

08006856 <http_poll>:
 *
 * This could be increased, but we don't want to waste resources for bad connections.
 */
static err_t
http_poll(void *arg, struct altcp_pcb *pcb)
{
 8006856:	b580      	push	{r7, lr}
 8006858:	b084      	sub	sp, #16
 800685a:	af00      	add	r7, sp, #0
 800685c:	6078      	str	r0, [r7, #4]
 800685e:	6039      	str	r1, [r7, #0]
  struct http_state *hs = (struct http_state *)arg;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: pcb=%p hs=%p pcb_state=%s\n",
              (void *)pcb, (void *)hs, tcp_debug_state_str(altcp_dbg_get_tcp_state(pcb))));

  if (hs == NULL) {
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d107      	bne.n	800687a <http_poll+0x24>
    err_t closed;
    /* arg is null, close. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: arg is NULL, close\n"));
    closed = http_close_conn(pcb, NULL);
 800686a:	2100      	movs	r1, #0
 800686c:	6838      	ldr	r0, [r7, #0]
 800686e:	f7fe fbb5 	bl	8004fdc <http_close_conn>
 8006872:	4603      	mov	r3, r0
 8006874:	72fb      	strb	r3, [r7, #11]
    if (closed == ERR_MEM) {
      altcp_abort(pcb);
      return ERR_ABRT;
    }
#endif /* LWIP_HTTPD_ABORT_ON_CLOSE_MEM_ERROR */
    return ERR_OK;
 8006876:	2300      	movs	r3, #0
 8006878:	e021      	b.n	80068be <http_poll+0x68>
  } else {
    hs->retries++;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006880:	3301      	adds	r3, #1
 8006882:	b2da      	uxtb	r2, r3
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006890:	2b04      	cmp	r3, #4
 8006892:	d105      	bne.n	80068a0 <http_poll+0x4a>
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: too many retries, close\n"));
      http_close_conn(pcb, hs);
 8006894:	68f9      	ldr	r1, [r7, #12]
 8006896:	6838      	ldr	r0, [r7, #0]
 8006898:	f7fe fba0 	bl	8004fdc <http_close_conn>
      return ERR_OK;
 800689c:	2300      	movs	r3, #0
 800689e:	e00e      	b.n	80068be <http_poll+0x68>
    }

    /* If this connection has a file open, try to send some more data. If
     * it has not yet received a GET request, don't do this since it will
     * cause the connection to close immediately. */
    if (hs->handle) {
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	695b      	ldr	r3, [r3, #20]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d009      	beq.n	80068bc <http_poll+0x66>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: try to send more data\n"));
      if (http_send(pcb, hs)) {
 80068a8:	68f9      	ldr	r1, [r7, #12]
 80068aa:	6838      	ldr	r0, [r7, #0]
 80068ac:	f7ff fa68 	bl	8005d80 <http_send>
 80068b0:	4603      	mov	r3, r0
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d002      	beq.n	80068bc <http_poll+0x66>
        /* If we wrote anything to be sent, go ahead and send it now. */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("tcp_output\n"));
        altcp_output(pcb);
 80068b6:	6838      	ldr	r0, [r7, #0]
 80068b8:	f007 f8c8 	bl	800da4c <tcp_output>
      }
    }
  }

  return ERR_OK;
 80068bc:	2300      	movs	r3, #0
}
 80068be:	4618      	mov	r0, r3
 80068c0:	3710      	adds	r7, #16
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}
	...

080068c8 <http_recv>:
 * Data has been received on this pcb.
 * For HTTP 1.0, this should normally only happen once (if the request fits in one packet).
 */
static err_t
http_recv(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b086      	sub	sp, #24
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	60f8      	str	r0, [r7, #12]
 80068d0:	60b9      	str	r1, [r7, #8]
 80068d2:	607a      	str	r2, [r7, #4]
 80068d4:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: pcb=%p pbuf=%p err=%s\n", (void *)pcb,
              (void *)p, lwip_strerr(err)));

  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 80068da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d105      	bne.n	80068ee <http_recv+0x26>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d002      	beq.n	80068ee <http_recv+0x26>
 80068e8:	697b      	ldr	r3, [r7, #20]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d111      	bne.n	8006912 <http_recv+0x4a>
    /* error or closed by other side? */
    if (p != NULL) {
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d008      	beq.n	8006906 <http_recv+0x3e>
      /* Inform TCP that we have taken the data. */
      altcp_recved(pcb, p->tot_len);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	891b      	ldrh	r3, [r3, #8]
 80068f8:	4619      	mov	r1, r3
 80068fa:	68b8      	ldr	r0, [r7, #8]
 80068fc:	f002 fc9a 	bl	8009234 <tcp_recved>
      pbuf_free(p);
 8006900:	6878      	ldr	r0, [r7, #4]
 8006902:	f001 fd35 	bl	8008370 <pbuf_free>
    }
    if (hs == NULL) {
      /* this should not happen, only to be robust */
      LWIP_DEBUGF(HTTPD_DEBUG, ("Error, http_recv: hs is NULL, close\n"));
    }
    http_close_conn(pcb, hs);
 8006906:	6979      	ldr	r1, [r7, #20]
 8006908:	68b8      	ldr	r0, [r7, #8]
 800690a:	f7fe fb67 	bl	8004fdc <http_close_conn>
    return ERR_OK;
 800690e:	2300      	movs	r3, #0
 8006910:	e078      	b.n	8006a04 <http_recv+0x13c>
    hs->unrecved_bytes += p->tot_len;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
  {
    /* Inform TCP that we have taken the data. */
    altcp_recved(pcb, p->tot_len);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	891b      	ldrh	r3, [r3, #8]
 8006916:	4619      	mov	r1, r3
 8006918:	68b8      	ldr	r0, [r7, #8]
 800691a:	f002 fc8b 	bl	8009234 <tcp_recved>
  }

#if LWIP_HTTPD_SUPPORT_POST
  if (hs->post_content_len_left > 0) {
 800691e:	697b      	ldr	r3, [r7, #20]
 8006920:	f503 53b1 	add.w	r3, r3, #5664	; 0x1620
 8006924:	3314      	adds	r3, #20
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d014      	beq.n	8006956 <http_recv+0x8e>
    /* reset idle counter when POST data is received */
    hs->retries = 0;
 800692c:	697b      	ldr	r3, [r7, #20]
 800692e:	2200      	movs	r2, #0
 8006930:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    /* this is data for a POST, pass the complete pbuf to the application */
    http_post_rxpbuf(hs, p);
 8006934:	6879      	ldr	r1, [r7, #4]
 8006936:	6978      	ldr	r0, [r7, #20]
 8006938:	f7ff fade 	bl	8005ef8 <http_post_rxpbuf>
    /* pbuf is passed to the application, don't free it! */
    if (hs->post_content_len_left == 0) {
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	f503 53b1 	add.w	r3, r3, #5664	; 0x1620
 8006942:	3314      	adds	r3, #20
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d103      	bne.n	8006952 <http_recv+0x8a>
      /* all data received, send response or close connection */
      http_send(pcb, hs);
 800694a:	6979      	ldr	r1, [r7, #20]
 800694c:	68b8      	ldr	r0, [r7, #8]
 800694e:	f7ff fa17 	bl	8005d80 <http_send>
    }
    return ERR_OK;
 8006952:	2300      	movs	r3, #0
 8006954:	e056      	b.n	8006a04 <http_recv+0x13c>
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
  {
    if (hs->handle == NULL) {
 8006956:	697b      	ldr	r3, [r7, #20]
 8006958:	695b      	ldr	r3, [r3, #20]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d14e      	bne.n	80069fc <http_recv+0x134>
      err_t parsed = http_parse_request(p, hs, pcb);
 800695e:	68ba      	ldr	r2, [r7, #8]
 8006960:	6979      	ldr	r1, [r7, #20]
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f7ff fbfc 	bl	8006160 <http_parse_request>
 8006968:	4603      	mov	r3, r0
 800696a:	74fb      	strb	r3, [r7, #19]
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 800696c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d015      	beq.n	80069a0 <http_recv+0xd8>
 8006974:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006978:	f113 0f05 	cmn.w	r3, #5
 800697c:	d010      	beq.n	80069a0 <http_recv+0xd8>
 800697e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006982:	f113 0f10 	cmn.w	r3, #16
 8006986:	d00b      	beq.n	80069a0 <http_recv+0xd8>
 8006988:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800698c:	f113 0f08 	cmn.w	r3, #8
 8006990:	d006      	beq.n	80069a0 <http_recv+0xd8>
 8006992:	4b1e      	ldr	r3, [pc, #120]	; (8006a0c <http_recv+0x144>)
 8006994:	f640 2204 	movw	r2, #2564	; 0xa04
 8006998:	491d      	ldr	r1, [pc, #116]	; (8006a10 <http_recv+0x148>)
 800699a:	481e      	ldr	r0, [pc, #120]	; (8006a14 <http_recv+0x14c>)
 800699c:	f00a feb0 	bl	8011700 <iprintf>
                  || parsed == ERR_INPROGRESS || parsed == ERR_ARG || parsed == ERR_USE);
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
      if (parsed != ERR_INPROGRESS) {
 80069a0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80069a4:	f113 0f05 	cmn.w	r3, #5
 80069a8:	d00b      	beq.n	80069c2 <http_recv+0xfa>
        /* request fully parsed or error */
        if (hs->req != NULL) {
 80069aa:	697b      	ldr	r3, [r7, #20]
 80069ac:	6a1b      	ldr	r3, [r3, #32]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d007      	beq.n	80069c2 <http_recv+0xfa>
          pbuf_free(hs->req);
 80069b2:	697b      	ldr	r3, [r7, #20]
 80069b4:	6a1b      	ldr	r3, [r3, #32]
 80069b6:	4618      	mov	r0, r3
 80069b8:	f001 fcda 	bl	8008370 <pbuf_free>
          hs->req = NULL;
 80069bc:	697b      	ldr	r3, [r7, #20]
 80069be:	2200      	movs	r2, #0
 80069c0:	621a      	str	r2, [r3, #32]
        }
      }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
      pbuf_free(p);
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	f001 fcd4 	bl	8008370 <pbuf_free>
      if (parsed == ERR_OK) {
 80069c8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d10b      	bne.n	80069e8 <http_recv+0x120>
#if LWIP_HTTPD_SUPPORT_POST
        if (hs->post_content_len_left == 0)
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	f503 53b1 	add.w	r3, r3, #5664	; 0x1620
 80069d6:	3314      	adds	r3, #20
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d111      	bne.n	8006a02 <http_recv+0x13a>
#endif /* LWIP_HTTPD_SUPPORT_POST */
        {
          LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: data %p len %"S32_F"\n", (const void *)hs->file, hs->left));
          http_send(pcb, hs);
 80069de:	6979      	ldr	r1, [r7, #20]
 80069e0:	68b8      	ldr	r0, [r7, #8]
 80069e2:	f7ff f9cd 	bl	8005d80 <http_send>
 80069e6:	e00c      	b.n	8006a02 <http_recv+0x13a>
        }
      } else if (parsed == ERR_ARG) {
 80069e8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80069ec:	f113 0f10 	cmn.w	r3, #16
 80069f0:	d107      	bne.n	8006a02 <http_recv+0x13a>
        /* @todo: close on ERR_USE? */
        http_close_conn(pcb, hs);
 80069f2:	6979      	ldr	r1, [r7, #20]
 80069f4:	68b8      	ldr	r0, [r7, #8]
 80069f6:	f7fe faf1 	bl	8004fdc <http_close_conn>
 80069fa:	e002      	b.n	8006a02 <http_recv+0x13a>
      }
    } else {
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_recv: already sending data\n"));
      /* already sending but still receiving data, we might want to RST here? */
      pbuf_free(p);
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	f001 fcb7 	bl	8008370 <pbuf_free>
    }
  }
  return ERR_OK;
 8006a02:	2300      	movs	r3, #0
}
 8006a04:	4618      	mov	r0, r3
 8006a06:	3718      	adds	r7, #24
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	bd80      	pop	{r7, pc}
 8006a0c:	08013870 	.word	0x08013870
 8006a10:	08013a38 	.word	0x08013a38
 8006a14:	080138b8 	.word	0x080138b8

08006a18 <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct altcp_pcb *pcb, err_t err)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b086      	sub	sp, #24
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	60f8      	str	r0, [r7, #12]
 8006a20:	60b9      	str	r1, [r7, #8]
 8006a22:	4613      	mov	r3, r2
 8006a24:	71fb      	strb	r3, [r7, #7]
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void *)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 8006a26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d102      	bne.n	8006a34 <http_accept+0x1c>
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d102      	bne.n	8006a3a <http_accept+0x22>
    return ERR_VAL;
 8006a34:	f06f 0305 	mvn.w	r3, #5
 8006a38:	e025      	b.n	8006a86 <http_accept+0x6e>
  }

  /* Set priority */
  altcp_setprio(pcb, HTTPD_TCP_PRIO);
 8006a3a:	2101      	movs	r1, #1
 8006a3c:	68b8      	ldr	r0, [r7, #8]
 8006a3e:	f003 f8dd 	bl	8009bfc <tcp_setprio>

  /* Allocate memory for the structure that holds the state of the
     connection - initialized by that function. */
  hs = http_state_alloc();
 8006a42:	f7fe f9bc 	bl	8004dbe <http_state_alloc>
 8006a46:	6178      	str	r0, [r7, #20]
  if (hs == NULL) {
 8006a48:	697b      	ldr	r3, [r7, #20]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d102      	bne.n	8006a54 <http_accept+0x3c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept: Out of memory, RST\n"));
    return ERR_MEM;
 8006a4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006a52:	e018      	b.n	8006a86 <http_accept+0x6e>
  }
  hs->pcb = pcb;
 8006a54:	697b      	ldr	r3, [r7, #20]
 8006a56:	68ba      	ldr	r2, [r7, #8]
 8006a58:	61da      	str	r2, [r3, #28]

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  altcp_arg(pcb, hs);
 8006a5a:	6979      	ldr	r1, [r7, #20]
 8006a5c:	68b8      	ldr	r0, [r7, #8]
 8006a5e:	f003 facd 	bl	8009ffc <tcp_arg>

  /* Set up the various callback functions */
  altcp_recv(pcb, http_recv);
 8006a62:	490b      	ldr	r1, [pc, #44]	; (8006a90 <http_accept+0x78>)
 8006a64:	68b8      	ldr	r0, [r7, #8]
 8006a66:	f003 fadb 	bl	800a020 <tcp_recv>
  altcp_err(pcb, http_err);
 8006a6a:	490a      	ldr	r1, [pc, #40]	; (8006a94 <http_accept+0x7c>)
 8006a6c:	68b8      	ldr	r0, [r7, #8]
 8006a6e:	f003 fb1b 	bl	800a0a8 <tcp_err>
  altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 8006a72:	2204      	movs	r2, #4
 8006a74:	4908      	ldr	r1, [pc, #32]	; (8006a98 <http_accept+0x80>)
 8006a76:	68b8      	ldr	r0, [r7, #8]
 8006a78:	f003 fb50 	bl	800a11c <tcp_poll>
  altcp_sent(pcb, http_sent);
 8006a7c:	4907      	ldr	r1, [pc, #28]	; (8006a9c <http_accept+0x84>)
 8006a7e:	68b8      	ldr	r0, [r7, #8]
 8006a80:	f003 faf0 	bl	800a064 <tcp_sent>

  return ERR_OK;
 8006a84:	2300      	movs	r3, #0
}
 8006a86:	4618      	mov	r0, r3
 8006a88:	3718      	adds	r7, #24
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bd80      	pop	{r7, pc}
 8006a8e:	bf00      	nop
 8006a90:	080068c9 	.word	0x080068c9
 8006a94:	080067fd 	.word	0x080067fd
 8006a98:	08006857 	.word	0x08006857
 8006a9c:	08006821 	.word	0x08006821

08006aa0 <httpd_init_pcb>:

static void
httpd_init_pcb(struct altcp_pcb *pcb, u16_t port)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b084      	sub	sp, #16
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
 8006aa8:	460b      	mov	r3, r1
 8006aaa:	807b      	strh	r3, [r7, #2]
  err_t err;

  if (pcb) {
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d029      	beq.n	8006b06 <httpd_init_pcb+0x66>
    altcp_setprio(pcb, HTTPD_TCP_PRIO);
 8006ab2:	2101      	movs	r1, #1
 8006ab4:	6878      	ldr	r0, [r7, #4]
 8006ab6:	f003 f8a1 	bl	8009bfc <tcp_setprio>
    /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
    err = altcp_bind(pcb, IP_ANY_TYPE, port);
 8006aba:	887b      	ldrh	r3, [r7, #2]
 8006abc:	461a      	mov	r2, r3
 8006abe:	4914      	ldr	r1, [pc, #80]	; (8006b10 <httpd_init_pcb+0x70>)
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	f002 f9e9 	bl	8008e98 <tcp_bind>
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	73fb      	strb	r3, [r7, #15]
    LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 8006aca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d006      	beq.n	8006ae0 <httpd_init_pcb+0x40>
 8006ad2:	4b10      	ldr	r3, [pc, #64]	; (8006b14 <httpd_init_pcb+0x74>)
 8006ad4:	f640 2257 	movw	r2, #2647	; 0xa57
 8006ad8:	490f      	ldr	r1, [pc, #60]	; (8006b18 <httpd_init_pcb+0x78>)
 8006ada:	4810      	ldr	r0, [pc, #64]	; (8006b1c <httpd_init_pcb+0x7c>)
 8006adc:	f00a fe10 	bl	8011700 <iprintf>
    pcb = altcp_listen(pcb);
 8006ae0:	21ff      	movs	r1, #255	; 0xff
 8006ae2:	6878      	ldr	r0, [r7, #4]
 8006ae4:	f002 fa90 	bl	8009008 <tcp_listen_with_backlog>
 8006ae8:	6078      	str	r0, [r7, #4]
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d106      	bne.n	8006afe <httpd_init_pcb+0x5e>
 8006af0:	4b08      	ldr	r3, [pc, #32]	; (8006b14 <httpd_init_pcb+0x74>)
 8006af2:	f640 2259 	movw	r2, #2649	; 0xa59
 8006af6:	490a      	ldr	r1, [pc, #40]	; (8006b20 <httpd_init_pcb+0x80>)
 8006af8:	4808      	ldr	r0, [pc, #32]	; (8006b1c <httpd_init_pcb+0x7c>)
 8006afa:	f00a fe01 	bl	8011700 <iprintf>
    altcp_accept(pcb, http_accept);
 8006afe:	4909      	ldr	r1, [pc, #36]	; (8006b24 <httpd_init_pcb+0x84>)
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	f003 faf3 	bl	800a0ec <tcp_accept>
  }
}
 8006b06:	bf00      	nop
 8006b08:	3710      	adds	r7, #16
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	bd80      	pop	{r7, pc}
 8006b0e:	bf00      	nop
 8006b10:	080177d0 	.word	0x080177d0
 8006b14:	08013870 	.word	0x08013870
 8006b18:	08013a64 	.word	0x08013a64
 8006b1c:	080138b8 	.word	0x080138b8
 8006b20:	08013a80 	.word	0x08013a80
 8006b24:	08006a19 	.word	0x08006a19

08006b28 <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b082      	sub	sp, #8
 8006b2c:	af00      	add	r7, sp, #0
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by tcp_new() */

  pcb = altcp_tcp_new_ip_type(IPADDR_TYPE_ANY);
 8006b2e:	202e      	movs	r0, #46	; 0x2e
 8006b30:	f003 fa56 	bl	8009fe0 <tcp_new_ip_type>
 8006b34:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d106      	bne.n	8006b4a <httpd_init+0x22>
 8006b3c:	4b07      	ldr	r3, [pc, #28]	; (8006b5c <httpd_init+0x34>)
 8006b3e:	f640 2272 	movw	r2, #2674	; 0xa72
 8006b42:	4907      	ldr	r1, [pc, #28]	; (8006b60 <httpd_init+0x38>)
 8006b44:	4807      	ldr	r0, [pc, #28]	; (8006b64 <httpd_init+0x3c>)
 8006b46:	f00a fddb 	bl	8011700 <iprintf>
  httpd_init_pcb(pcb, HTTPD_SERVER_PORT);
 8006b4a:	2150      	movs	r1, #80	; 0x50
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	f7ff ffa7 	bl	8006aa0 <httpd_init_pcb>
}
 8006b52:	bf00      	nop
 8006b54:	3708      	adds	r7, #8
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bd80      	pop	{r7, pc}
 8006b5a:	bf00      	nop
 8006b5c:	08013870 	.word	0x08013870
 8006b60:	08013aa0 	.word	0x08013aa0
 8006b64:	080138b8 	.word	0x080138b8

08006b68 <http_set_ssi_handler>:
 * @param tags an array of SSI tag strings to search for in SSI-enabled files
 * @param num_tags number of tags in the 'tags' array
 */
void
http_set_ssi_handler(tSSIHandler ssi_handler, const char **tags, int num_tags)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b084      	sub	sp, #16
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	60f8      	str	r0, [r7, #12]
 8006b70:	60b9      	str	r1, [r7, #8]
 8006b72:	607a      	str	r2, [r7, #4]
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_set_ssi_handler\n"));

  LWIP_ASSERT("no ssi_handler given", ssi_handler != NULL);
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d106      	bne.n	8006b88 <http_set_ssi_handler+0x20>
 8006b7a:	4b14      	ldr	r3, [pc, #80]	; (8006bcc <http_set_ssi_handler+0x64>)
 8006b7c:	f640 2297 	movw	r2, #2711	; 0xa97
 8006b80:	4913      	ldr	r1, [pc, #76]	; (8006bd0 <http_set_ssi_handler+0x68>)
 8006b82:	4814      	ldr	r0, [pc, #80]	; (8006bd4 <http_set_ssi_handler+0x6c>)
 8006b84:	f00a fdbc 	bl	8011700 <iprintf>
  httpd_ssi_handler = ssi_handler;
 8006b88:	4a13      	ldr	r2, [pc, #76]	; (8006bd8 <http_set_ssi_handler+0x70>)
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	6013      	str	r3, [r2, #0]

#if LWIP_HTTPD_SSI_RAW
  LWIP_UNUSED_ARG(tags);
  LWIP_UNUSED_ARG(num_tags);
#else /* LWIP_HTTPD_SSI_RAW */
  LWIP_ASSERT("no tags given", tags != NULL);
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d106      	bne.n	8006ba2 <http_set_ssi_handler+0x3a>
 8006b94:	4b0d      	ldr	r3, [pc, #52]	; (8006bcc <http_set_ssi_handler+0x64>)
 8006b96:	f640 229e 	movw	r2, #2718	; 0xa9e
 8006b9a:	4910      	ldr	r1, [pc, #64]	; (8006bdc <http_set_ssi_handler+0x74>)
 8006b9c:	480d      	ldr	r0, [pc, #52]	; (8006bd4 <http_set_ssi_handler+0x6c>)
 8006b9e:	f00a fdaf 	bl	8011700 <iprintf>
  LWIP_ASSERT("invalid number of tags", num_tags > 0);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	dc06      	bgt.n	8006bb6 <http_set_ssi_handler+0x4e>
 8006ba8:	4b08      	ldr	r3, [pc, #32]	; (8006bcc <http_set_ssi_handler+0x64>)
 8006baa:	f640 229f 	movw	r2, #2719	; 0xa9f
 8006bae:	490c      	ldr	r1, [pc, #48]	; (8006be0 <http_set_ssi_handler+0x78>)
 8006bb0:	4808      	ldr	r0, [pc, #32]	; (8006bd4 <http_set_ssi_handler+0x6c>)
 8006bb2:	f00a fda5 	bl	8011700 <iprintf>

  httpd_tags = tags;
 8006bb6:	4a0b      	ldr	r2, [pc, #44]	; (8006be4 <http_set_ssi_handler+0x7c>)
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	6013      	str	r3, [r2, #0]
  httpd_num_tags = num_tags;
 8006bbc:	4a0a      	ldr	r2, [pc, #40]	; (8006be8 <http_set_ssi_handler+0x80>)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6013      	str	r3, [r2, #0]
#endif /* !LWIP_HTTPD_SSI_RAW */
}
 8006bc2:	bf00      	nop
 8006bc4:	3710      	adds	r7, #16
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bd80      	pop	{r7, pc}
 8006bca:	bf00      	nop
 8006bcc:	08013870 	.word	0x08013870
 8006bd0:	08013abc 	.word	0x08013abc
 8006bd4:	080138b8 	.word	0x080138b8
 8006bd8:	20000500 	.word	0x20000500
 8006bdc:	08013ad4 	.word	0x08013ad4
 8006be0:	08013ae4 	.word	0x08013ae4
 8006be4:	20000508 	.word	0x20000508
 8006be8:	20000504 	.word	0x20000504

08006bec <http_set_cgi_handlers>:
 * @param cgis an array of CGI filenames/handler functions
 * @param num_handlers number of elements in the 'cgis' array
 */
void
http_set_cgi_handlers(const tCGI *cgis, int num_handlers)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b082      	sub	sp, #8
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
 8006bf4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("no cgis given", cgis != NULL);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d106      	bne.n	8006c0a <http_set_cgi_handlers+0x1e>
 8006bfc:	4b0d      	ldr	r3, [pc, #52]	; (8006c34 <http_set_cgi_handlers+0x48>)
 8006bfe:	f640 22b2 	movw	r2, #2738	; 0xab2
 8006c02:	490d      	ldr	r1, [pc, #52]	; (8006c38 <http_set_cgi_handlers+0x4c>)
 8006c04:	480d      	ldr	r0, [pc, #52]	; (8006c3c <http_set_cgi_handlers+0x50>)
 8006c06:	f00a fd7b 	bl	8011700 <iprintf>
  LWIP_ASSERT("invalid number of handlers", num_handlers > 0);
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	dc06      	bgt.n	8006c1e <http_set_cgi_handlers+0x32>
 8006c10:	4b08      	ldr	r3, [pc, #32]	; (8006c34 <http_set_cgi_handlers+0x48>)
 8006c12:	f640 22b3 	movw	r2, #2739	; 0xab3
 8006c16:	490a      	ldr	r1, [pc, #40]	; (8006c40 <http_set_cgi_handlers+0x54>)
 8006c18:	4808      	ldr	r0, [pc, #32]	; (8006c3c <http_set_cgi_handlers+0x50>)
 8006c1a:	f00a fd71 	bl	8011700 <iprintf>

  httpd_cgis = cgis;
 8006c1e:	4a09      	ldr	r2, [pc, #36]	; (8006c44 <http_set_cgi_handlers+0x58>)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6013      	str	r3, [r2, #0]
  httpd_num_cgis = num_handlers;
 8006c24:	4a08      	ldr	r2, [pc, #32]	; (8006c48 <http_set_cgi_handlers+0x5c>)
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	6013      	str	r3, [r2, #0]
}
 8006c2a:	bf00      	nop
 8006c2c:	3708      	adds	r7, #8
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bd80      	pop	{r7, pc}
 8006c32:	bf00      	nop
 8006c34:	08013870 	.word	0x08013870
 8006c38:	08013afc 	.word	0x08013afc
 8006c3c:	080138b8 	.word	0x080138b8
 8006c40:	08013b0c 	.word	0x08013b0c
 8006c44:	2000050c 	.word	0x2000050c
 8006c48:	20000510 	.word	0x20000510

08006c4c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b083      	sub	sp, #12
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	4603      	mov	r3, r0
 8006c54:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8006c56:	88fb      	ldrh	r3, [r7, #6]
 8006c58:	021b      	lsls	r3, r3, #8
 8006c5a:	b21a      	sxth	r2, r3
 8006c5c:	88fb      	ldrh	r3, [r7, #6]
 8006c5e:	0a1b      	lsrs	r3, r3, #8
 8006c60:	b29b      	uxth	r3, r3
 8006c62:	b21b      	sxth	r3, r3
 8006c64:	4313      	orrs	r3, r2
 8006c66:	b21b      	sxth	r3, r3
 8006c68:	b29b      	uxth	r3, r3
}
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	370c      	adds	r7, #12
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c74:	4770      	bx	lr

08006c76 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8006c76:	b480      	push	{r7}
 8006c78:	b083      	sub	sp, #12
 8006c7a:	af00      	add	r7, sp, #0
 8006c7c:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	061a      	lsls	r2, r3, #24
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	021b      	lsls	r3, r3, #8
 8006c86:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006c8a:	431a      	orrs	r2, r3
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	0a1b      	lsrs	r3, r3, #8
 8006c90:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006c94:	431a      	orrs	r2, r3
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	0e1b      	lsrs	r3, r3, #24
 8006c9a:	4313      	orrs	r3, r2
}
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	370c      	adds	r7, #12
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca6:	4770      	bx	lr

08006ca8 <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b086      	sub	sp, #24
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	60f8      	str	r0, [r7, #12]
 8006cb0:	60b9      	str	r1, [r7, #8]
 8006cb2:	607a      	str	r2, [r7, #4]
  const char *p;
  size_t tokenlen = strlen(token);
 8006cb4:	68b8      	ldr	r0, [r7, #8]
 8006cb6:	f7f9 fa95 	bl	80001e4 <strlen>
 8006cba:	6138      	str	r0, [r7, #16]
  if (tokenlen == 0) {
 8006cbc:	693b      	ldr	r3, [r7, #16]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d101      	bne.n	8006cc6 <lwip_strnstr+0x1e>
    return LWIP_CONST_CAST(char *, buffer);
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	e022      	b.n	8006d0c <lwip_strnstr+0x64>
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	617b      	str	r3, [r7, #20]
 8006cca:	e012      	b.n	8006cf2 <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 8006ccc:	697b      	ldr	r3, [r7, #20]
 8006cce:	781a      	ldrb	r2, [r3, #0]
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	781b      	ldrb	r3, [r3, #0]
 8006cd4:	429a      	cmp	r2, r3
 8006cd6:	d109      	bne.n	8006cec <lwip_strnstr+0x44>
 8006cd8:	693a      	ldr	r2, [r7, #16]
 8006cda:	68b9      	ldr	r1, [r7, #8]
 8006cdc:	6978      	ldr	r0, [r7, #20]
 8006cde:	f00a fe31 	bl	8011944 <strncmp>
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d101      	bne.n	8006cec <lwip_strnstr+0x44>
      return LWIP_CONST_CAST(char *, p);
 8006ce8:	697b      	ldr	r3, [r7, #20]
 8006cea:	e00f      	b.n	8006d0c <lwip_strnstr+0x64>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 8006cec:	697b      	ldr	r3, [r7, #20]
 8006cee:	3301      	adds	r3, #1
 8006cf0:	617b      	str	r3, [r7, #20]
 8006cf2:	697b      	ldr	r3, [r7, #20]
 8006cf4:	781b      	ldrb	r3, [r3, #0]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d007      	beq.n	8006d0a <lwip_strnstr+0x62>
 8006cfa:	697a      	ldr	r2, [r7, #20]
 8006cfc:	693b      	ldr	r3, [r7, #16]
 8006cfe:	441a      	add	r2, r3
 8006d00:	68f9      	ldr	r1, [r7, #12]
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	440b      	add	r3, r1
 8006d06:	429a      	cmp	r2, r3
 8006d08:	d9e0      	bls.n	8006ccc <lwip_strnstr+0x24>
    }
  }
  return NULL;
 8006d0a:	2300      	movs	r3, #0
}
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	3718      	adds	r7, #24
 8006d10:	46bd      	mov	sp, r7
 8006d12:	bd80      	pop	{r7, pc}

08006d14 <lwip_stricmp>:
 * lwIP default implementation for stricmp() non-standard function.
 * This can be \#defined to stricmp() depending on your platform port.
 */
int
lwip_stricmp(const char *str1, const char *str2)
{
 8006d14:	b480      	push	{r7}
 8006d16:	b085      	sub	sp, #20
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
 8006d1c:	6039      	str	r1, [r7, #0]
  char c1, c2;

  do {
    c1 = *str1++;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	1c5a      	adds	r2, r3, #1
 8006d22:	607a      	str	r2, [r7, #4]
 8006d24:	781b      	ldrb	r3, [r3, #0]
 8006d26:	73fb      	strb	r3, [r7, #15]
    c2 = *str2++;
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	1c5a      	adds	r2, r3, #1
 8006d2c:	603a      	str	r2, [r7, #0]
 8006d2e:	781b      	ldrb	r3, [r3, #0]
 8006d30:	73bb      	strb	r3, [r7, #14]
    if (c1 != c2) {
 8006d32:	7bfa      	ldrb	r2, [r7, #15]
 8006d34:	7bbb      	ldrb	r3, [r7, #14]
 8006d36:	429a      	cmp	r2, r3
 8006d38:	d016      	beq.n	8006d68 <lwip_stricmp+0x54>
      char c1_upc = c1 | 0x20;
 8006d3a:	7bfb      	ldrb	r3, [r7, #15]
 8006d3c:	f043 0320 	orr.w	r3, r3, #32
 8006d40:	737b      	strb	r3, [r7, #13]
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 8006d42:	7b7b      	ldrb	r3, [r7, #13]
 8006d44:	2b60      	cmp	r3, #96	; 0x60
 8006d46:	d90c      	bls.n	8006d62 <lwip_stricmp+0x4e>
 8006d48:	7b7b      	ldrb	r3, [r7, #13]
 8006d4a:	2b7a      	cmp	r3, #122	; 0x7a
 8006d4c:	d809      	bhi.n	8006d62 <lwip_stricmp+0x4e>
        /* characters are not equal an one is in the alphabet range:
        downcase both chars and check again */
        char c2_upc = c2 | 0x20;
 8006d4e:	7bbb      	ldrb	r3, [r7, #14]
 8006d50:	f043 0320 	orr.w	r3, r3, #32
 8006d54:	733b      	strb	r3, [r7, #12]
        if (c1_upc != c2_upc) {
 8006d56:	7b7a      	ldrb	r2, [r7, #13]
 8006d58:	7b3b      	ldrb	r3, [r7, #12]
 8006d5a:	429a      	cmp	r2, r3
 8006d5c:	d003      	beq.n	8006d66 <lwip_stricmp+0x52>
          /* still not equal */
          /* don't care for < or > */
          return 1;
 8006d5e:	2301      	movs	r3, #1
 8006d60:	e006      	b.n	8006d70 <lwip_stricmp+0x5c>
        }
      } else {
        /* characters are not equal but none is in the alphabet range */
        return 1;
 8006d62:	2301      	movs	r3, #1
 8006d64:	e004      	b.n	8006d70 <lwip_stricmp+0x5c>
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 8006d66:	bf00      	nop
      }
    }
  } while (c1 != 0);
 8006d68:	7bfb      	ldrb	r3, [r7, #15]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d1d7      	bne.n	8006d1e <lwip_stricmp+0xa>
  return 0;
 8006d6e:	2300      	movs	r3, #0
}
 8006d70:	4618      	mov	r0, r3
 8006d72:	3714      	adds	r7, #20
 8006d74:	46bd      	mov	sp, r7
 8006d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7a:	4770      	bx	lr

08006d7c <lwip_itoa>:
 * lwIP default implementation for itoa() non-standard function.
 * This can be \#defined to itoa() or snprintf(result, bufsize, "%d", number) depending on your platform port.
 */
void
lwip_itoa(char *result, size_t bufsize, int number)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b088      	sub	sp, #32
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	60f8      	str	r0, [r7, #12]
 8006d84:	60b9      	str	r1, [r7, #8]
 8006d86:	607a      	str	r2, [r7, #4]
  char *res = result;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	61fb      	str	r3, [r7, #28]
  char *tmp = result + bufsize - 1;
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	3b01      	subs	r3, #1
 8006d90:	68fa      	ldr	r2, [r7, #12]
 8006d92:	4413      	add	r3, r2
 8006d94:	61bb      	str	r3, [r7, #24]
  int n = (number >= 0) ? number : -number;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	bfb8      	it	lt
 8006d9c:	425b      	neglt	r3, r3
 8006d9e:	617b      	str	r3, [r7, #20]

  /* handle invalid bufsize */
  if (bufsize < 2) {
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	2b01      	cmp	r3, #1
 8006da4:	d806      	bhi.n	8006db4 <lwip_itoa+0x38>
    if (bufsize == 1) {
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	2b01      	cmp	r3, #1
 8006daa:	d154      	bne.n	8006e56 <lwip_itoa+0xda>
      *result = 0;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	2200      	movs	r2, #0
 8006db0:	701a      	strb	r2, [r3, #0]
    }
    return;
 8006db2:	e050      	b.n	8006e56 <lwip_itoa+0xda>
  }

  /* First, add sign */
  if (number < 0) {
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	da04      	bge.n	8006dc4 <lwip_itoa+0x48>
    *res++ = '-';
 8006dba:	69fb      	ldr	r3, [r7, #28]
 8006dbc:	1c5a      	adds	r2, r3, #1
 8006dbe:	61fa      	str	r2, [r7, #28]
 8006dc0:	222d      	movs	r2, #45	; 0x2d
 8006dc2:	701a      	strb	r2, [r3, #0]
  }
  /* Then create the string from the end and stop if buffer full,
     and ensure output string is zero terminated */
  *tmp = 0;
 8006dc4:	69bb      	ldr	r3, [r7, #24]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	701a      	strb	r2, [r3, #0]
  while ((n != 0) && (tmp > res)) {
 8006dca:	e01c      	b.n	8006e06 <lwip_itoa+0x8a>
    char val = (char)('0' + (n % 10));
 8006dcc:	697a      	ldr	r2, [r7, #20]
 8006dce:	4b24      	ldr	r3, [pc, #144]	; (8006e60 <lwip_itoa+0xe4>)
 8006dd0:	fb83 1302 	smull	r1, r3, r3, r2
 8006dd4:	1099      	asrs	r1, r3, #2
 8006dd6:	17d3      	asrs	r3, r2, #31
 8006dd8:	1ac9      	subs	r1, r1, r3
 8006dda:	460b      	mov	r3, r1
 8006ddc:	009b      	lsls	r3, r3, #2
 8006dde:	440b      	add	r3, r1
 8006de0:	005b      	lsls	r3, r3, #1
 8006de2:	1ad1      	subs	r1, r2, r3
 8006de4:	b2cb      	uxtb	r3, r1
 8006de6:	3330      	adds	r3, #48	; 0x30
 8006de8:	74fb      	strb	r3, [r7, #19]
    tmp--;
 8006dea:	69bb      	ldr	r3, [r7, #24]
 8006dec:	3b01      	subs	r3, #1
 8006dee:	61bb      	str	r3, [r7, #24]
    *tmp = val;
 8006df0:	69bb      	ldr	r3, [r7, #24]
 8006df2:	7cfa      	ldrb	r2, [r7, #19]
 8006df4:	701a      	strb	r2, [r3, #0]
    n = n / 10;
 8006df6:	697b      	ldr	r3, [r7, #20]
 8006df8:	4a19      	ldr	r2, [pc, #100]	; (8006e60 <lwip_itoa+0xe4>)
 8006dfa:	fb82 1203 	smull	r1, r2, r2, r3
 8006dfe:	1092      	asrs	r2, r2, #2
 8006e00:	17db      	asrs	r3, r3, #31
 8006e02:	1ad3      	subs	r3, r2, r3
 8006e04:	617b      	str	r3, [r7, #20]
  while ((n != 0) && (tmp > res)) {
 8006e06:	697b      	ldr	r3, [r7, #20]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d003      	beq.n	8006e14 <lwip_itoa+0x98>
 8006e0c:	69ba      	ldr	r2, [r7, #24]
 8006e0e:	69fb      	ldr	r3, [r7, #28]
 8006e10:	429a      	cmp	r2, r3
 8006e12:	d8db      	bhi.n	8006dcc <lwip_itoa+0x50>
  }
  if (n) {
 8006e14:	697b      	ldr	r3, [r7, #20]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d003      	beq.n	8006e22 <lwip_itoa+0xa6>
    /* buffer is too small */
    *result = 0;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	701a      	strb	r2, [r3, #0]
    return;
 8006e20:	e01a      	b.n	8006e58 <lwip_itoa+0xdc>
  }
  if (*tmp == 0) {
 8006e22:	69bb      	ldr	r3, [r7, #24]
 8006e24:	781b      	ldrb	r3, [r3, #0]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d10a      	bne.n	8006e40 <lwip_itoa+0xc4>
    /* Nothing added? */
    *res++ = '0';
 8006e2a:	69fb      	ldr	r3, [r7, #28]
 8006e2c:	1c5a      	adds	r2, r3, #1
 8006e2e:	61fa      	str	r2, [r7, #28]
 8006e30:	2230      	movs	r2, #48	; 0x30
 8006e32:	701a      	strb	r2, [r3, #0]
    *res++ = 0;
 8006e34:	69fb      	ldr	r3, [r7, #28]
 8006e36:	1c5a      	adds	r2, r3, #1
 8006e38:	61fa      	str	r2, [r7, #28]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	701a      	strb	r2, [r3, #0]
    return;
 8006e3e:	e00b      	b.n	8006e58 <lwip_itoa+0xdc>
  }
  /* move from temporary buffer to output buffer (sign is not moved) */
  memmove(res, tmp, (size_t)((result + bufsize) - tmp));
 8006e40:	68fa      	ldr	r2, [r7, #12]
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	441a      	add	r2, r3
 8006e46:	69bb      	ldr	r3, [r7, #24]
 8006e48:	1ad3      	subs	r3, r2, r3
 8006e4a:	461a      	mov	r2, r3
 8006e4c:	69b9      	ldr	r1, [r7, #24]
 8006e4e:	69f8      	ldr	r0, [r7, #28]
 8006e50:	f00a fb8a 	bl	8011568 <memmove>
 8006e54:	e000      	b.n	8006e58 <lwip_itoa+0xdc>
    return;
 8006e56:	bf00      	nop
}
 8006e58:	3720      	adds	r7, #32
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bd80      	pop	{r7, pc}
 8006e5e:	bf00      	nop
 8006e60:	66666667 	.word	0x66666667

08006e64 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b082      	sub	sp, #8
 8006e68:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8006e6e:	f000 f8d5 	bl	800701c <mem_init>
  memp_init();
 8006e72:	f000 fbdb 	bl	800762c <memp_init>
  pbuf_init();
  netif_init();
 8006e76:	f000 fc93 	bl	80077a0 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8006e7a:	f007 fea7 	bl	800ebcc <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8006e7e:	f001 fd05 	bl	800888c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8006e82:	f007 fe19 	bl	800eab8 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8006e86:	bf00      	nop
 8006e88:	3708      	adds	r7, #8
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bd80      	pop	{r7, pc}
	...

08006e90 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8006e90:	b480      	push	{r7}
 8006e92:	b083      	sub	sp, #12
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	4603      	mov	r3, r0
 8006e98:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8006e9a:	4b05      	ldr	r3, [pc, #20]	; (8006eb0 <ptr_to_mem+0x20>)
 8006e9c:	681a      	ldr	r2, [r3, #0]
 8006e9e:	88fb      	ldrh	r3, [r7, #6]
 8006ea0:	4413      	add	r3, r2
}
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	370c      	adds	r7, #12
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eac:	4770      	bx	lr
 8006eae:	bf00      	nop
 8006eb0:	20000518 	.word	0x20000518

08006eb4 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	b083      	sub	sp, #12
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8006ebc:	4b05      	ldr	r3, [pc, #20]	; (8006ed4 <mem_to_ptr+0x20>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	687a      	ldr	r2, [r7, #4]
 8006ec2:	1ad3      	subs	r3, r2, r3
 8006ec4:	b29b      	uxth	r3, r3
}
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	370c      	adds	r7, #12
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed0:	4770      	bx	lr
 8006ed2:	bf00      	nop
 8006ed4:	20000518 	.word	0x20000518

08006ed8 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8006ed8:	b590      	push	{r4, r7, lr}
 8006eda:	b085      	sub	sp, #20
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8006ee0:	4b45      	ldr	r3, [pc, #276]	; (8006ff8 <plug_holes+0x120>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	687a      	ldr	r2, [r7, #4]
 8006ee6:	429a      	cmp	r2, r3
 8006ee8:	d206      	bcs.n	8006ef8 <plug_holes+0x20>
 8006eea:	4b44      	ldr	r3, [pc, #272]	; (8006ffc <plug_holes+0x124>)
 8006eec:	f240 12df 	movw	r2, #479	; 0x1df
 8006ef0:	4943      	ldr	r1, [pc, #268]	; (8007000 <plug_holes+0x128>)
 8006ef2:	4844      	ldr	r0, [pc, #272]	; (8007004 <plug_holes+0x12c>)
 8006ef4:	f00a fc04 	bl	8011700 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8006ef8:	4b43      	ldr	r3, [pc, #268]	; (8007008 <plug_holes+0x130>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	687a      	ldr	r2, [r7, #4]
 8006efe:	429a      	cmp	r2, r3
 8006f00:	d306      	bcc.n	8006f10 <plug_holes+0x38>
 8006f02:	4b3e      	ldr	r3, [pc, #248]	; (8006ffc <plug_holes+0x124>)
 8006f04:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8006f08:	4940      	ldr	r1, [pc, #256]	; (800700c <plug_holes+0x134>)
 8006f0a:	483e      	ldr	r0, [pc, #248]	; (8007004 <plug_holes+0x12c>)
 8006f0c:	f00a fbf8 	bl	8011700 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	791b      	ldrb	r3, [r3, #4]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d006      	beq.n	8006f26 <plug_holes+0x4e>
 8006f18:	4b38      	ldr	r3, [pc, #224]	; (8006ffc <plug_holes+0x124>)
 8006f1a:	f240 12e1 	movw	r2, #481	; 0x1e1
 8006f1e:	493c      	ldr	r1, [pc, #240]	; (8007010 <plug_holes+0x138>)
 8006f20:	4838      	ldr	r0, [pc, #224]	; (8007004 <plug_holes+0x12c>)
 8006f22:	f00a fbed 	bl	8011700 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	881b      	ldrh	r3, [r3, #0]
 8006f2a:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8006f2e:	d906      	bls.n	8006f3e <plug_holes+0x66>
 8006f30:	4b32      	ldr	r3, [pc, #200]	; (8006ffc <plug_holes+0x124>)
 8006f32:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8006f36:	4937      	ldr	r1, [pc, #220]	; (8007014 <plug_holes+0x13c>)
 8006f38:	4832      	ldr	r0, [pc, #200]	; (8007004 <plug_holes+0x12c>)
 8006f3a:	f00a fbe1 	bl	8011700 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	881b      	ldrh	r3, [r3, #0]
 8006f42:	4618      	mov	r0, r3
 8006f44:	f7ff ffa4 	bl	8006e90 <ptr_to_mem>
 8006f48:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8006f4a:	687a      	ldr	r2, [r7, #4]
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	429a      	cmp	r2, r3
 8006f50:	d024      	beq.n	8006f9c <plug_holes+0xc4>
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	791b      	ldrb	r3, [r3, #4]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d120      	bne.n	8006f9c <plug_holes+0xc4>
 8006f5a:	4b2b      	ldr	r3, [pc, #172]	; (8007008 <plug_holes+0x130>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	68fa      	ldr	r2, [r7, #12]
 8006f60:	429a      	cmp	r2, r3
 8006f62:	d01b      	beq.n	8006f9c <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8006f64:	4b2c      	ldr	r3, [pc, #176]	; (8007018 <plug_holes+0x140>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	68fa      	ldr	r2, [r7, #12]
 8006f6a:	429a      	cmp	r2, r3
 8006f6c:	d102      	bne.n	8006f74 <plug_holes+0x9c>
      lfree = mem;
 8006f6e:	4a2a      	ldr	r2, [pc, #168]	; (8007018 <plug_holes+0x140>)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	881a      	ldrh	r2, [r3, #0]
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	881b      	ldrh	r3, [r3, #0]
 8006f80:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8006f84:	d00a      	beq.n	8006f9c <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	881b      	ldrh	r3, [r3, #0]
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	f7ff ff80 	bl	8006e90 <ptr_to_mem>
 8006f90:	4604      	mov	r4, r0
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f7ff ff8e 	bl	8006eb4 <mem_to_ptr>
 8006f98:	4603      	mov	r3, r0
 8006f9a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	885b      	ldrh	r3, [r3, #2]
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	f7ff ff75 	bl	8006e90 <ptr_to_mem>
 8006fa6:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8006fa8:	68ba      	ldr	r2, [r7, #8]
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	429a      	cmp	r2, r3
 8006fae:	d01f      	beq.n	8006ff0 <plug_holes+0x118>
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	791b      	ldrb	r3, [r3, #4]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d11b      	bne.n	8006ff0 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8006fb8:	4b17      	ldr	r3, [pc, #92]	; (8007018 <plug_holes+0x140>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	687a      	ldr	r2, [r7, #4]
 8006fbe:	429a      	cmp	r2, r3
 8006fc0:	d102      	bne.n	8006fc8 <plug_holes+0xf0>
      lfree = pmem;
 8006fc2:	4a15      	ldr	r2, [pc, #84]	; (8007018 <plug_holes+0x140>)
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	881a      	ldrh	r2, [r3, #0]
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	881b      	ldrh	r3, [r3, #0]
 8006fd4:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8006fd8:	d00a      	beq.n	8006ff0 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	881b      	ldrh	r3, [r3, #0]
 8006fde:	4618      	mov	r0, r3
 8006fe0:	f7ff ff56 	bl	8006e90 <ptr_to_mem>
 8006fe4:	4604      	mov	r4, r0
 8006fe6:	68b8      	ldr	r0, [r7, #8]
 8006fe8:	f7ff ff64 	bl	8006eb4 <mem_to_ptr>
 8006fec:	4603      	mov	r3, r0
 8006fee:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8006ff0:	bf00      	nop
 8006ff2:	3714      	adds	r7, #20
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	bd90      	pop	{r4, r7, pc}
 8006ff8:	20000518 	.word	0x20000518
 8006ffc:	08013b28 	.word	0x08013b28
 8007000:	08013b58 	.word	0x08013b58
 8007004:	08013b70 	.word	0x08013b70
 8007008:	2000051c 	.word	0x2000051c
 800700c:	08013b98 	.word	0x08013b98
 8007010:	08013bb4 	.word	0x08013bb4
 8007014:	08013bd0 	.word	0x08013bd0
 8007018:	20000520 	.word	0x20000520

0800701c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b082      	sub	sp, #8
 8007020:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8007022:	4b18      	ldr	r3, [pc, #96]	; (8007084 <mem_init+0x68>)
 8007024:	3303      	adds	r3, #3
 8007026:	f023 0303 	bic.w	r3, r3, #3
 800702a:	461a      	mov	r2, r3
 800702c:	4b16      	ldr	r3, [pc, #88]	; (8007088 <mem_init+0x6c>)
 800702e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8007030:	4b15      	ldr	r3, [pc, #84]	; (8007088 <mem_init+0x6c>)
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800703c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2200      	movs	r2, #0
 8007042:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2200      	movs	r2, #0
 8007048:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800704a:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 800704e:	f7ff ff1f 	bl	8006e90 <ptr_to_mem>
 8007052:	4603      	mov	r3, r0
 8007054:	4a0d      	ldr	r2, [pc, #52]	; (800708c <mem_init+0x70>)
 8007056:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8007058:	4b0c      	ldr	r3, [pc, #48]	; (800708c <mem_init+0x70>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	2201      	movs	r2, #1
 800705e:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8007060:	4b0a      	ldr	r3, [pc, #40]	; (800708c <mem_init+0x70>)
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8007068:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800706a:	4b08      	ldr	r3, [pc, #32]	; (800708c <mem_init+0x70>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8007072:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8007074:	4b04      	ldr	r3, [pc, #16]	; (8007088 <mem_init+0x6c>)
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	4a05      	ldr	r2, [pc, #20]	; (8007090 <mem_init+0x74>)
 800707a:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800707c:	bf00      	nop
 800707e:	3708      	adds	r7, #8
 8007080:	46bd      	mov	sp, r7
 8007082:	bd80      	pop	{r7, pc}
 8007084:	2000419c 	.word	0x2000419c
 8007088:	20000518 	.word	0x20000518
 800708c:	2000051c 	.word	0x2000051c
 8007090:	20000520 	.word	0x20000520

08007094 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b086      	sub	sp, #24
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	f7ff ff09 	bl	8006eb4 <mem_to_ptr>
 80070a2:	4603      	mov	r3, r0
 80070a4:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	881b      	ldrh	r3, [r3, #0]
 80070aa:	4618      	mov	r0, r3
 80070ac:	f7ff fef0 	bl	8006e90 <ptr_to_mem>
 80070b0:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	885b      	ldrh	r3, [r3, #2]
 80070b6:	4618      	mov	r0, r3
 80070b8:	f7ff feea 	bl	8006e90 <ptr_to_mem>
 80070bc:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	881b      	ldrh	r3, [r3, #0]
 80070c2:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80070c6:	d818      	bhi.n	80070fa <mem_link_valid+0x66>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	885b      	ldrh	r3, [r3, #2]
 80070cc:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80070d0:	d813      	bhi.n	80070fa <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80070d6:	8afa      	ldrh	r2, [r7, #22]
 80070d8:	429a      	cmp	r2, r3
 80070da:	d004      	beq.n	80070e6 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	881b      	ldrh	r3, [r3, #0]
 80070e0:	8afa      	ldrh	r2, [r7, #22]
 80070e2:	429a      	cmp	r2, r3
 80070e4:	d109      	bne.n	80070fa <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80070e6:	4b08      	ldr	r3, [pc, #32]	; (8007108 <mem_link_valid+0x74>)
 80070e8:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80070ea:	693a      	ldr	r2, [r7, #16]
 80070ec:	429a      	cmp	r2, r3
 80070ee:	d006      	beq.n	80070fe <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80070f0:	693b      	ldr	r3, [r7, #16]
 80070f2:	885b      	ldrh	r3, [r3, #2]
 80070f4:	8afa      	ldrh	r2, [r7, #22]
 80070f6:	429a      	cmp	r2, r3
 80070f8:	d001      	beq.n	80070fe <mem_link_valid+0x6a>
    return 0;
 80070fa:	2300      	movs	r3, #0
 80070fc:	e000      	b.n	8007100 <mem_link_valid+0x6c>
  }
  return 1;
 80070fe:	2301      	movs	r3, #1
}
 8007100:	4618      	mov	r0, r3
 8007102:	3718      	adds	r7, #24
 8007104:	46bd      	mov	sp, r7
 8007106:	bd80      	pop	{r7, pc}
 8007108:	2000051c 	.word	0x2000051c

0800710c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b084      	sub	sp, #16
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d04c      	beq.n	80071b4 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	f003 0303 	and.w	r3, r3, #3
 8007120:	2b00      	cmp	r3, #0
 8007122:	d007      	beq.n	8007134 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8007124:	4b25      	ldr	r3, [pc, #148]	; (80071bc <mem_free+0xb0>)
 8007126:	f240 2273 	movw	r2, #627	; 0x273
 800712a:	4925      	ldr	r1, [pc, #148]	; (80071c0 <mem_free+0xb4>)
 800712c:	4825      	ldr	r0, [pc, #148]	; (80071c4 <mem_free+0xb8>)
 800712e:	f00a fae7 	bl	8011700 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8007132:	e040      	b.n	80071b6 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	3b08      	subs	r3, #8
 8007138:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800713a:	4b23      	ldr	r3, [pc, #140]	; (80071c8 <mem_free+0xbc>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	68fa      	ldr	r2, [r7, #12]
 8007140:	429a      	cmp	r2, r3
 8007142:	d306      	bcc.n	8007152 <mem_free+0x46>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	f103 020c 	add.w	r2, r3, #12
 800714a:	4b20      	ldr	r3, [pc, #128]	; (80071cc <mem_free+0xc0>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	429a      	cmp	r2, r3
 8007150:	d907      	bls.n	8007162 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8007152:	4b1a      	ldr	r3, [pc, #104]	; (80071bc <mem_free+0xb0>)
 8007154:	f240 227f 	movw	r2, #639	; 0x27f
 8007158:	491d      	ldr	r1, [pc, #116]	; (80071d0 <mem_free+0xc4>)
 800715a:	481a      	ldr	r0, [pc, #104]	; (80071c4 <mem_free+0xb8>)
 800715c:	f00a fad0 	bl	8011700 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8007160:	e029      	b.n	80071b6 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	791b      	ldrb	r3, [r3, #4]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d107      	bne.n	800717a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800716a:	4b14      	ldr	r3, [pc, #80]	; (80071bc <mem_free+0xb0>)
 800716c:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8007170:	4918      	ldr	r1, [pc, #96]	; (80071d4 <mem_free+0xc8>)
 8007172:	4814      	ldr	r0, [pc, #80]	; (80071c4 <mem_free+0xb8>)
 8007174:	f00a fac4 	bl	8011700 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8007178:	e01d      	b.n	80071b6 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800717a:	68f8      	ldr	r0, [r7, #12]
 800717c:	f7ff ff8a 	bl	8007094 <mem_link_valid>
 8007180:	4603      	mov	r3, r0
 8007182:	2b00      	cmp	r3, #0
 8007184:	d107      	bne.n	8007196 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8007186:	4b0d      	ldr	r3, [pc, #52]	; (80071bc <mem_free+0xb0>)
 8007188:	f240 2295 	movw	r2, #661	; 0x295
 800718c:	4912      	ldr	r1, [pc, #72]	; (80071d8 <mem_free+0xcc>)
 800718e:	480d      	ldr	r0, [pc, #52]	; (80071c4 <mem_free+0xb8>)
 8007190:	f00a fab6 	bl	8011700 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8007194:	e00f      	b.n	80071b6 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	2200      	movs	r2, #0
 800719a:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800719c:	4b0f      	ldr	r3, [pc, #60]	; (80071dc <mem_free+0xd0>)
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	68fa      	ldr	r2, [r7, #12]
 80071a2:	429a      	cmp	r2, r3
 80071a4:	d202      	bcs.n	80071ac <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 80071a6:	4a0d      	ldr	r2, [pc, #52]	; (80071dc <mem_free+0xd0>)
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 80071ac:	68f8      	ldr	r0, [r7, #12]
 80071ae:	f7ff fe93 	bl	8006ed8 <plug_holes>
 80071b2:	e000      	b.n	80071b6 <mem_free+0xaa>
    return;
 80071b4:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 80071b6:	3710      	adds	r7, #16
 80071b8:	46bd      	mov	sp, r7
 80071ba:	bd80      	pop	{r7, pc}
 80071bc:	08013b28 	.word	0x08013b28
 80071c0:	08013bfc 	.word	0x08013bfc
 80071c4:	08013b70 	.word	0x08013b70
 80071c8:	20000518 	.word	0x20000518
 80071cc:	2000051c 	.word	0x2000051c
 80071d0:	08013c20 	.word	0x08013c20
 80071d4:	08013c3c 	.word	0x08013c3c
 80071d8:	08013c64 	.word	0x08013c64
 80071dc:	20000520 	.word	0x20000520

080071e0 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b088      	sub	sp, #32
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
 80071e8:	460b      	mov	r3, r1
 80071ea:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80071ec:	887b      	ldrh	r3, [r7, #2]
 80071ee:	3303      	adds	r3, #3
 80071f0:	b29b      	uxth	r3, r3
 80071f2:	f023 0303 	bic.w	r3, r3, #3
 80071f6:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 80071f8:	8bfb      	ldrh	r3, [r7, #30]
 80071fa:	2b0b      	cmp	r3, #11
 80071fc:	d801      	bhi.n	8007202 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80071fe:	230c      	movs	r3, #12
 8007200:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8007202:	8bfb      	ldrh	r3, [r7, #30]
 8007204:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8007208:	d803      	bhi.n	8007212 <mem_trim+0x32>
 800720a:	8bfa      	ldrh	r2, [r7, #30]
 800720c:	887b      	ldrh	r3, [r7, #2]
 800720e:	429a      	cmp	r2, r3
 8007210:	d201      	bcs.n	8007216 <mem_trim+0x36>
    return NULL;
 8007212:	2300      	movs	r3, #0
 8007214:	e0cc      	b.n	80073b0 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8007216:	4b68      	ldr	r3, [pc, #416]	; (80073b8 <mem_trim+0x1d8>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	687a      	ldr	r2, [r7, #4]
 800721c:	429a      	cmp	r2, r3
 800721e:	d304      	bcc.n	800722a <mem_trim+0x4a>
 8007220:	4b66      	ldr	r3, [pc, #408]	; (80073bc <mem_trim+0x1dc>)
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	687a      	ldr	r2, [r7, #4]
 8007226:	429a      	cmp	r2, r3
 8007228:	d306      	bcc.n	8007238 <mem_trim+0x58>
 800722a:	4b65      	ldr	r3, [pc, #404]	; (80073c0 <mem_trim+0x1e0>)
 800722c:	f240 22d1 	movw	r2, #721	; 0x2d1
 8007230:	4964      	ldr	r1, [pc, #400]	; (80073c4 <mem_trim+0x1e4>)
 8007232:	4865      	ldr	r0, [pc, #404]	; (80073c8 <mem_trim+0x1e8>)
 8007234:	f00a fa64 	bl	8011700 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8007238:	4b5f      	ldr	r3, [pc, #380]	; (80073b8 <mem_trim+0x1d8>)
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	687a      	ldr	r2, [r7, #4]
 800723e:	429a      	cmp	r2, r3
 8007240:	d304      	bcc.n	800724c <mem_trim+0x6c>
 8007242:	4b5e      	ldr	r3, [pc, #376]	; (80073bc <mem_trim+0x1dc>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	687a      	ldr	r2, [r7, #4]
 8007248:	429a      	cmp	r2, r3
 800724a:	d301      	bcc.n	8007250 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	e0af      	b.n	80073b0 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	3b08      	subs	r3, #8
 8007254:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8007256:	69b8      	ldr	r0, [r7, #24]
 8007258:	f7ff fe2c 	bl	8006eb4 <mem_to_ptr>
 800725c:	4603      	mov	r3, r0
 800725e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8007260:	69bb      	ldr	r3, [r7, #24]
 8007262:	881a      	ldrh	r2, [r3, #0]
 8007264:	8afb      	ldrh	r3, [r7, #22]
 8007266:	1ad3      	subs	r3, r2, r3
 8007268:	b29b      	uxth	r3, r3
 800726a:	3b08      	subs	r3, #8
 800726c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800726e:	8bfa      	ldrh	r2, [r7, #30]
 8007270:	8abb      	ldrh	r3, [r7, #20]
 8007272:	429a      	cmp	r2, r3
 8007274:	d906      	bls.n	8007284 <mem_trim+0xa4>
 8007276:	4b52      	ldr	r3, [pc, #328]	; (80073c0 <mem_trim+0x1e0>)
 8007278:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800727c:	4953      	ldr	r1, [pc, #332]	; (80073cc <mem_trim+0x1ec>)
 800727e:	4852      	ldr	r0, [pc, #328]	; (80073c8 <mem_trim+0x1e8>)
 8007280:	f00a fa3e 	bl	8011700 <iprintf>
  if (newsize > size) {
 8007284:	8bfa      	ldrh	r2, [r7, #30]
 8007286:	8abb      	ldrh	r3, [r7, #20]
 8007288:	429a      	cmp	r2, r3
 800728a:	d901      	bls.n	8007290 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 800728c:	2300      	movs	r3, #0
 800728e:	e08f      	b.n	80073b0 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8007290:	8bfa      	ldrh	r2, [r7, #30]
 8007292:	8abb      	ldrh	r3, [r7, #20]
 8007294:	429a      	cmp	r2, r3
 8007296:	d101      	bne.n	800729c <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	e089      	b.n	80073b0 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 800729c:	69bb      	ldr	r3, [r7, #24]
 800729e:	881b      	ldrh	r3, [r3, #0]
 80072a0:	4618      	mov	r0, r3
 80072a2:	f7ff fdf5 	bl	8006e90 <ptr_to_mem>
 80072a6:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 80072a8:	693b      	ldr	r3, [r7, #16]
 80072aa:	791b      	ldrb	r3, [r3, #4]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d13f      	bne.n	8007330 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80072b0:	69bb      	ldr	r3, [r7, #24]
 80072b2:	881b      	ldrh	r3, [r3, #0]
 80072b4:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80072b8:	d106      	bne.n	80072c8 <mem_trim+0xe8>
 80072ba:	4b41      	ldr	r3, [pc, #260]	; (80073c0 <mem_trim+0x1e0>)
 80072bc:	f240 22f5 	movw	r2, #757	; 0x2f5
 80072c0:	4943      	ldr	r1, [pc, #268]	; (80073d0 <mem_trim+0x1f0>)
 80072c2:	4841      	ldr	r0, [pc, #260]	; (80073c8 <mem_trim+0x1e8>)
 80072c4:	f00a fa1c 	bl	8011700 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 80072c8:	693b      	ldr	r3, [r7, #16]
 80072ca:	881b      	ldrh	r3, [r3, #0]
 80072cc:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80072ce:	8afa      	ldrh	r2, [r7, #22]
 80072d0:	8bfb      	ldrh	r3, [r7, #30]
 80072d2:	4413      	add	r3, r2
 80072d4:	b29b      	uxth	r3, r3
 80072d6:	3308      	adds	r3, #8
 80072d8:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 80072da:	4b3e      	ldr	r3, [pc, #248]	; (80073d4 <mem_trim+0x1f4>)
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	693a      	ldr	r2, [r7, #16]
 80072e0:	429a      	cmp	r2, r3
 80072e2:	d106      	bne.n	80072f2 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 80072e4:	89fb      	ldrh	r3, [r7, #14]
 80072e6:	4618      	mov	r0, r3
 80072e8:	f7ff fdd2 	bl	8006e90 <ptr_to_mem>
 80072ec:	4603      	mov	r3, r0
 80072ee:	4a39      	ldr	r2, [pc, #228]	; (80073d4 <mem_trim+0x1f4>)
 80072f0:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 80072f2:	89fb      	ldrh	r3, [r7, #14]
 80072f4:	4618      	mov	r0, r3
 80072f6:	f7ff fdcb 	bl	8006e90 <ptr_to_mem>
 80072fa:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 80072fc:	693b      	ldr	r3, [r7, #16]
 80072fe:	2200      	movs	r2, #0
 8007300:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8007302:	693b      	ldr	r3, [r7, #16]
 8007304:	89ba      	ldrh	r2, [r7, #12]
 8007306:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8007308:	693b      	ldr	r3, [r7, #16]
 800730a:	8afa      	ldrh	r2, [r7, #22]
 800730c:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800730e:	69bb      	ldr	r3, [r7, #24]
 8007310:	89fa      	ldrh	r2, [r7, #14]
 8007312:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8007314:	693b      	ldr	r3, [r7, #16]
 8007316:	881b      	ldrh	r3, [r3, #0]
 8007318:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800731c:	d047      	beq.n	80073ae <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800731e:	693b      	ldr	r3, [r7, #16]
 8007320:	881b      	ldrh	r3, [r3, #0]
 8007322:	4618      	mov	r0, r3
 8007324:	f7ff fdb4 	bl	8006e90 <ptr_to_mem>
 8007328:	4602      	mov	r2, r0
 800732a:	89fb      	ldrh	r3, [r7, #14]
 800732c:	8053      	strh	r3, [r2, #2]
 800732e:	e03e      	b.n	80073ae <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8007330:	8bfb      	ldrh	r3, [r7, #30]
 8007332:	f103 0214 	add.w	r2, r3, #20
 8007336:	8abb      	ldrh	r3, [r7, #20]
 8007338:	429a      	cmp	r2, r3
 800733a:	d838      	bhi.n	80073ae <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800733c:	8afa      	ldrh	r2, [r7, #22]
 800733e:	8bfb      	ldrh	r3, [r7, #30]
 8007340:	4413      	add	r3, r2
 8007342:	b29b      	uxth	r3, r3
 8007344:	3308      	adds	r3, #8
 8007346:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8007348:	69bb      	ldr	r3, [r7, #24]
 800734a:	881b      	ldrh	r3, [r3, #0]
 800734c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8007350:	d106      	bne.n	8007360 <mem_trim+0x180>
 8007352:	4b1b      	ldr	r3, [pc, #108]	; (80073c0 <mem_trim+0x1e0>)
 8007354:	f240 3216 	movw	r2, #790	; 0x316
 8007358:	491d      	ldr	r1, [pc, #116]	; (80073d0 <mem_trim+0x1f0>)
 800735a:	481b      	ldr	r0, [pc, #108]	; (80073c8 <mem_trim+0x1e8>)
 800735c:	f00a f9d0 	bl	8011700 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8007360:	89fb      	ldrh	r3, [r7, #14]
 8007362:	4618      	mov	r0, r3
 8007364:	f7ff fd94 	bl	8006e90 <ptr_to_mem>
 8007368:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800736a:	4b1a      	ldr	r3, [pc, #104]	; (80073d4 <mem_trim+0x1f4>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	693a      	ldr	r2, [r7, #16]
 8007370:	429a      	cmp	r2, r3
 8007372:	d202      	bcs.n	800737a <mem_trim+0x19a>
      lfree = mem2;
 8007374:	4a17      	ldr	r2, [pc, #92]	; (80073d4 <mem_trim+0x1f4>)
 8007376:	693b      	ldr	r3, [r7, #16]
 8007378:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800737a:	693b      	ldr	r3, [r7, #16]
 800737c:	2200      	movs	r2, #0
 800737e:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8007380:	69bb      	ldr	r3, [r7, #24]
 8007382:	881a      	ldrh	r2, [r3, #0]
 8007384:	693b      	ldr	r3, [r7, #16]
 8007386:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8007388:	693b      	ldr	r3, [r7, #16]
 800738a:	8afa      	ldrh	r2, [r7, #22]
 800738c:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800738e:	69bb      	ldr	r3, [r7, #24]
 8007390:	89fa      	ldrh	r2, [r7, #14]
 8007392:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8007394:	693b      	ldr	r3, [r7, #16]
 8007396:	881b      	ldrh	r3, [r3, #0]
 8007398:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800739c:	d007      	beq.n	80073ae <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800739e:	693b      	ldr	r3, [r7, #16]
 80073a0:	881b      	ldrh	r3, [r3, #0]
 80073a2:	4618      	mov	r0, r3
 80073a4:	f7ff fd74 	bl	8006e90 <ptr_to_mem>
 80073a8:	4602      	mov	r2, r0
 80073aa:	89fb      	ldrh	r3, [r7, #14]
 80073ac:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 80073ae:	687b      	ldr	r3, [r7, #4]
}
 80073b0:	4618      	mov	r0, r3
 80073b2:	3720      	adds	r7, #32
 80073b4:	46bd      	mov	sp, r7
 80073b6:	bd80      	pop	{r7, pc}
 80073b8:	20000518 	.word	0x20000518
 80073bc:	2000051c 	.word	0x2000051c
 80073c0:	08013b28 	.word	0x08013b28
 80073c4:	08013c98 	.word	0x08013c98
 80073c8:	08013b70 	.word	0x08013b70
 80073cc:	08013cb0 	.word	0x08013cb0
 80073d0:	08013cd0 	.word	0x08013cd0
 80073d4:	20000520 	.word	0x20000520

080073d8 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b088      	sub	sp, #32
 80073dc:	af00      	add	r7, sp, #0
 80073de:	4603      	mov	r3, r0
 80073e0:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 80073e2:	88fb      	ldrh	r3, [r7, #6]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d101      	bne.n	80073ec <mem_malloc+0x14>
    return NULL;
 80073e8:	2300      	movs	r3, #0
 80073ea:	e0d9      	b.n	80075a0 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 80073ec:	88fb      	ldrh	r3, [r7, #6]
 80073ee:	3303      	adds	r3, #3
 80073f0:	b29b      	uxth	r3, r3
 80073f2:	f023 0303 	bic.w	r3, r3, #3
 80073f6:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 80073f8:	8bbb      	ldrh	r3, [r7, #28]
 80073fa:	2b0b      	cmp	r3, #11
 80073fc:	d801      	bhi.n	8007402 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 80073fe:	230c      	movs	r3, #12
 8007400:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8007402:	8bbb      	ldrh	r3, [r7, #28]
 8007404:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8007408:	d803      	bhi.n	8007412 <mem_malloc+0x3a>
 800740a:	8bba      	ldrh	r2, [r7, #28]
 800740c:	88fb      	ldrh	r3, [r7, #6]
 800740e:	429a      	cmp	r2, r3
 8007410:	d201      	bcs.n	8007416 <mem_malloc+0x3e>
    return NULL;
 8007412:	2300      	movs	r3, #0
 8007414:	e0c4      	b.n	80075a0 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8007416:	4b64      	ldr	r3, [pc, #400]	; (80075a8 <mem_malloc+0x1d0>)
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	4618      	mov	r0, r3
 800741c:	f7ff fd4a 	bl	8006eb4 <mem_to_ptr>
 8007420:	4603      	mov	r3, r0
 8007422:	83fb      	strh	r3, [r7, #30]
 8007424:	e0b4      	b.n	8007590 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8007426:	8bfb      	ldrh	r3, [r7, #30]
 8007428:	4618      	mov	r0, r3
 800742a:	f7ff fd31 	bl	8006e90 <ptr_to_mem>
 800742e:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8007430:	697b      	ldr	r3, [r7, #20]
 8007432:	791b      	ldrb	r3, [r3, #4]
 8007434:	2b00      	cmp	r3, #0
 8007436:	f040 80a4 	bne.w	8007582 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800743a:	697b      	ldr	r3, [r7, #20]
 800743c:	881b      	ldrh	r3, [r3, #0]
 800743e:	461a      	mov	r2, r3
 8007440:	8bfb      	ldrh	r3, [r7, #30]
 8007442:	1ad3      	subs	r3, r2, r3
 8007444:	f1a3 0208 	sub.w	r2, r3, #8
 8007448:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800744a:	429a      	cmp	r2, r3
 800744c:	f0c0 8099 	bcc.w	8007582 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8007450:	697b      	ldr	r3, [r7, #20]
 8007452:	881b      	ldrh	r3, [r3, #0]
 8007454:	461a      	mov	r2, r3
 8007456:	8bfb      	ldrh	r3, [r7, #30]
 8007458:	1ad3      	subs	r3, r2, r3
 800745a:	f1a3 0208 	sub.w	r2, r3, #8
 800745e:	8bbb      	ldrh	r3, [r7, #28]
 8007460:	3314      	adds	r3, #20
 8007462:	429a      	cmp	r2, r3
 8007464:	d333      	bcc.n	80074ce <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8007466:	8bfa      	ldrh	r2, [r7, #30]
 8007468:	8bbb      	ldrh	r3, [r7, #28]
 800746a:	4413      	add	r3, r2
 800746c:	b29b      	uxth	r3, r3
 800746e:	3308      	adds	r3, #8
 8007470:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8007472:	8a7b      	ldrh	r3, [r7, #18]
 8007474:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8007478:	d106      	bne.n	8007488 <mem_malloc+0xb0>
 800747a:	4b4c      	ldr	r3, [pc, #304]	; (80075ac <mem_malloc+0x1d4>)
 800747c:	f240 3287 	movw	r2, #903	; 0x387
 8007480:	494b      	ldr	r1, [pc, #300]	; (80075b0 <mem_malloc+0x1d8>)
 8007482:	484c      	ldr	r0, [pc, #304]	; (80075b4 <mem_malloc+0x1dc>)
 8007484:	f00a f93c 	bl	8011700 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8007488:	8a7b      	ldrh	r3, [r7, #18]
 800748a:	4618      	mov	r0, r3
 800748c:	f7ff fd00 	bl	8006e90 <ptr_to_mem>
 8007490:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	2200      	movs	r2, #0
 8007496:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8007498:	697b      	ldr	r3, [r7, #20]
 800749a:	881a      	ldrh	r2, [r3, #0]
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	8bfa      	ldrh	r2, [r7, #30]
 80074a4:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 80074a6:	697b      	ldr	r3, [r7, #20]
 80074a8:	8a7a      	ldrh	r2, [r7, #18]
 80074aa:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 80074ac:	697b      	ldr	r3, [r7, #20]
 80074ae:	2201      	movs	r2, #1
 80074b0:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	881b      	ldrh	r3, [r3, #0]
 80074b6:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80074ba:	d00b      	beq.n	80074d4 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	881b      	ldrh	r3, [r3, #0]
 80074c0:	4618      	mov	r0, r3
 80074c2:	f7ff fce5 	bl	8006e90 <ptr_to_mem>
 80074c6:	4602      	mov	r2, r0
 80074c8:	8a7b      	ldrh	r3, [r7, #18]
 80074ca:	8053      	strh	r3, [r2, #2]
 80074cc:	e002      	b.n	80074d4 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 80074ce:	697b      	ldr	r3, [r7, #20]
 80074d0:	2201      	movs	r2, #1
 80074d2:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 80074d4:	4b34      	ldr	r3, [pc, #208]	; (80075a8 <mem_malloc+0x1d0>)
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	697a      	ldr	r2, [r7, #20]
 80074da:	429a      	cmp	r2, r3
 80074dc:	d127      	bne.n	800752e <mem_malloc+0x156>
          struct mem *cur = lfree;
 80074de:	4b32      	ldr	r3, [pc, #200]	; (80075a8 <mem_malloc+0x1d0>)
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80074e4:	e005      	b.n	80074f2 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 80074e6:	69bb      	ldr	r3, [r7, #24]
 80074e8:	881b      	ldrh	r3, [r3, #0]
 80074ea:	4618      	mov	r0, r3
 80074ec:	f7ff fcd0 	bl	8006e90 <ptr_to_mem>
 80074f0:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 80074f2:	69bb      	ldr	r3, [r7, #24]
 80074f4:	791b      	ldrb	r3, [r3, #4]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d004      	beq.n	8007504 <mem_malloc+0x12c>
 80074fa:	4b2f      	ldr	r3, [pc, #188]	; (80075b8 <mem_malloc+0x1e0>)
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	69ba      	ldr	r2, [r7, #24]
 8007500:	429a      	cmp	r2, r3
 8007502:	d1f0      	bne.n	80074e6 <mem_malloc+0x10e>
          }
          lfree = cur;
 8007504:	4a28      	ldr	r2, [pc, #160]	; (80075a8 <mem_malloc+0x1d0>)
 8007506:	69bb      	ldr	r3, [r7, #24]
 8007508:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800750a:	4b27      	ldr	r3, [pc, #156]	; (80075a8 <mem_malloc+0x1d0>)
 800750c:	681a      	ldr	r2, [r3, #0]
 800750e:	4b2a      	ldr	r3, [pc, #168]	; (80075b8 <mem_malloc+0x1e0>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	429a      	cmp	r2, r3
 8007514:	d00b      	beq.n	800752e <mem_malloc+0x156>
 8007516:	4b24      	ldr	r3, [pc, #144]	; (80075a8 <mem_malloc+0x1d0>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	791b      	ldrb	r3, [r3, #4]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d006      	beq.n	800752e <mem_malloc+0x156>
 8007520:	4b22      	ldr	r3, [pc, #136]	; (80075ac <mem_malloc+0x1d4>)
 8007522:	f240 32b5 	movw	r2, #949	; 0x3b5
 8007526:	4925      	ldr	r1, [pc, #148]	; (80075bc <mem_malloc+0x1e4>)
 8007528:	4822      	ldr	r0, [pc, #136]	; (80075b4 <mem_malloc+0x1dc>)
 800752a:	f00a f8e9 	bl	8011700 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800752e:	8bba      	ldrh	r2, [r7, #28]
 8007530:	697b      	ldr	r3, [r7, #20]
 8007532:	4413      	add	r3, r2
 8007534:	3308      	adds	r3, #8
 8007536:	4a20      	ldr	r2, [pc, #128]	; (80075b8 <mem_malloc+0x1e0>)
 8007538:	6812      	ldr	r2, [r2, #0]
 800753a:	4293      	cmp	r3, r2
 800753c:	d906      	bls.n	800754c <mem_malloc+0x174>
 800753e:	4b1b      	ldr	r3, [pc, #108]	; (80075ac <mem_malloc+0x1d4>)
 8007540:	f240 32b9 	movw	r2, #953	; 0x3b9
 8007544:	491e      	ldr	r1, [pc, #120]	; (80075c0 <mem_malloc+0x1e8>)
 8007546:	481b      	ldr	r0, [pc, #108]	; (80075b4 <mem_malloc+0x1dc>)
 8007548:	f00a f8da 	bl	8011700 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800754c:	697b      	ldr	r3, [r7, #20]
 800754e:	f003 0303 	and.w	r3, r3, #3
 8007552:	2b00      	cmp	r3, #0
 8007554:	d006      	beq.n	8007564 <mem_malloc+0x18c>
 8007556:	4b15      	ldr	r3, [pc, #84]	; (80075ac <mem_malloc+0x1d4>)
 8007558:	f240 32bb 	movw	r2, #955	; 0x3bb
 800755c:	4919      	ldr	r1, [pc, #100]	; (80075c4 <mem_malloc+0x1ec>)
 800755e:	4815      	ldr	r0, [pc, #84]	; (80075b4 <mem_malloc+0x1dc>)
 8007560:	f00a f8ce 	bl	8011700 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8007564:	697b      	ldr	r3, [r7, #20]
 8007566:	f003 0303 	and.w	r3, r3, #3
 800756a:	2b00      	cmp	r3, #0
 800756c:	d006      	beq.n	800757c <mem_malloc+0x1a4>
 800756e:	4b0f      	ldr	r3, [pc, #60]	; (80075ac <mem_malloc+0x1d4>)
 8007570:	f240 32bd 	movw	r2, #957	; 0x3bd
 8007574:	4914      	ldr	r1, [pc, #80]	; (80075c8 <mem_malloc+0x1f0>)
 8007576:	480f      	ldr	r0, [pc, #60]	; (80075b4 <mem_malloc+0x1dc>)
 8007578:	f00a f8c2 	bl	8011700 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800757c:	697b      	ldr	r3, [r7, #20]
 800757e:	3308      	adds	r3, #8
 8007580:	e00e      	b.n	80075a0 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8007582:	8bfb      	ldrh	r3, [r7, #30]
 8007584:	4618      	mov	r0, r3
 8007586:	f7ff fc83 	bl	8006e90 <ptr_to_mem>
 800758a:	4603      	mov	r3, r0
 800758c:	881b      	ldrh	r3, [r3, #0]
 800758e:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8007590:	8bfa      	ldrh	r2, [r7, #30]
 8007592:	8bbb      	ldrh	r3, [r7, #28]
 8007594:	f5c3 5320 	rsb	r3, r3, #10240	; 0x2800
 8007598:	429a      	cmp	r2, r3
 800759a:	f4ff af44 	bcc.w	8007426 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800759e:	2300      	movs	r3, #0
}
 80075a0:	4618      	mov	r0, r3
 80075a2:	3720      	adds	r7, #32
 80075a4:	46bd      	mov	sp, r7
 80075a6:	bd80      	pop	{r7, pc}
 80075a8:	20000520 	.word	0x20000520
 80075ac:	08013b28 	.word	0x08013b28
 80075b0:	08013cd0 	.word	0x08013cd0
 80075b4:	08013b70 	.word	0x08013b70
 80075b8:	2000051c 	.word	0x2000051c
 80075bc:	08013ce4 	.word	0x08013ce4
 80075c0:	08013d00 	.word	0x08013d00
 80075c4:	08013d30 	.word	0x08013d30
 80075c8:	08013d60 	.word	0x08013d60

080075cc <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 80075cc:	b480      	push	{r7}
 80075ce:	b085      	sub	sp, #20
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	689b      	ldr	r3, [r3, #8]
 80075d8:	2200      	movs	r2, #0
 80075da:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	685b      	ldr	r3, [r3, #4]
 80075e0:	3303      	adds	r3, #3
 80075e2:	f023 0303 	bic.w	r3, r3, #3
 80075e6:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80075e8:	2300      	movs	r3, #0
 80075ea:	60fb      	str	r3, [r7, #12]
 80075ec:	e011      	b.n	8007612 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	689b      	ldr	r3, [r3, #8]
 80075f2:	681a      	ldr	r2, [r3, #0]
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	689b      	ldr	r3, [r3, #8]
 80075fc:	68ba      	ldr	r2, [r7, #8]
 80075fe:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	881b      	ldrh	r3, [r3, #0]
 8007604:	461a      	mov	r2, r3
 8007606:	68bb      	ldr	r3, [r7, #8]
 8007608:	4413      	add	r3, r2
 800760a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	3301      	adds	r3, #1
 8007610:	60fb      	str	r3, [r7, #12]
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	885b      	ldrh	r3, [r3, #2]
 8007616:	461a      	mov	r2, r3
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	4293      	cmp	r3, r2
 800761c:	dbe7      	blt.n	80075ee <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800761e:	bf00      	nop
 8007620:	bf00      	nop
 8007622:	3714      	adds	r7, #20
 8007624:	46bd      	mov	sp, r7
 8007626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762a:	4770      	bx	lr

0800762c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b082      	sub	sp, #8
 8007630:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8007632:	2300      	movs	r3, #0
 8007634:	80fb      	strh	r3, [r7, #6]
 8007636:	e009      	b.n	800764c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8007638:	88fb      	ldrh	r3, [r7, #6]
 800763a:	4a08      	ldr	r2, [pc, #32]	; (800765c <memp_init+0x30>)
 800763c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007640:	4618      	mov	r0, r3
 8007642:	f7ff ffc3 	bl	80075cc <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8007646:	88fb      	ldrh	r3, [r7, #6]
 8007648:	3301      	adds	r3, #1
 800764a:	80fb      	strh	r3, [r7, #6]
 800764c:	88fb      	ldrh	r3, [r7, #6]
 800764e:	2b08      	cmp	r3, #8
 8007650:	d9f2      	bls.n	8007638 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8007652:	bf00      	nop
 8007654:	bf00      	nop
 8007656:	3708      	adds	r7, #8
 8007658:	46bd      	mov	sp, r7
 800765a:	bd80      	pop	{r7, pc}
 800765c:	0801776c 	.word	0x0801776c

08007660 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b084      	sub	sp, #16
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	689b      	ldr	r3, [r3, #8]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d012      	beq.n	800769c <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	689b      	ldr	r3, [r3, #8]
 800767a:	68fa      	ldr	r2, [r7, #12]
 800767c:	6812      	ldr	r2, [r2, #0]
 800767e:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	f003 0303 	and.w	r3, r3, #3
 8007686:	2b00      	cmp	r3, #0
 8007688:	d006      	beq.n	8007698 <do_memp_malloc_pool+0x38>
 800768a:	4b07      	ldr	r3, [pc, #28]	; (80076a8 <do_memp_malloc_pool+0x48>)
 800768c:	f44f 728c 	mov.w	r2, #280	; 0x118
 8007690:	4906      	ldr	r1, [pc, #24]	; (80076ac <do_memp_malloc_pool+0x4c>)
 8007692:	4807      	ldr	r0, [pc, #28]	; (80076b0 <do_memp_malloc_pool+0x50>)
 8007694:	f00a f834 	bl	8011700 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	e000      	b.n	800769e <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800769c:	2300      	movs	r3, #0
}
 800769e:	4618      	mov	r0, r3
 80076a0:	3710      	adds	r7, #16
 80076a2:	46bd      	mov	sp, r7
 80076a4:	bd80      	pop	{r7, pc}
 80076a6:	bf00      	nop
 80076a8:	08013d84 	.word	0x08013d84
 80076ac:	08013db4 	.word	0x08013db4
 80076b0:	08013dd8 	.word	0x08013dd8

080076b4 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b084      	sub	sp, #16
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	4603      	mov	r3, r0
 80076bc:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80076be:	79fb      	ldrb	r3, [r7, #7]
 80076c0:	2b08      	cmp	r3, #8
 80076c2:	d908      	bls.n	80076d6 <memp_malloc+0x22>
 80076c4:	4b0a      	ldr	r3, [pc, #40]	; (80076f0 <memp_malloc+0x3c>)
 80076c6:	f240 1257 	movw	r2, #343	; 0x157
 80076ca:	490a      	ldr	r1, [pc, #40]	; (80076f4 <memp_malloc+0x40>)
 80076cc:	480a      	ldr	r0, [pc, #40]	; (80076f8 <memp_malloc+0x44>)
 80076ce:	f00a f817 	bl	8011700 <iprintf>
 80076d2:	2300      	movs	r3, #0
 80076d4:	e008      	b.n	80076e8 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 80076d6:	79fb      	ldrb	r3, [r7, #7]
 80076d8:	4a08      	ldr	r2, [pc, #32]	; (80076fc <memp_malloc+0x48>)
 80076da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80076de:	4618      	mov	r0, r3
 80076e0:	f7ff ffbe 	bl	8007660 <do_memp_malloc_pool>
 80076e4:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 80076e6:	68fb      	ldr	r3, [r7, #12]
}
 80076e8:	4618      	mov	r0, r3
 80076ea:	3710      	adds	r7, #16
 80076ec:	46bd      	mov	sp, r7
 80076ee:	bd80      	pop	{r7, pc}
 80076f0:	08013d84 	.word	0x08013d84
 80076f4:	08013e14 	.word	0x08013e14
 80076f8:	08013dd8 	.word	0x08013dd8
 80076fc:	0801776c 	.word	0x0801776c

08007700 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b084      	sub	sp, #16
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
 8007708:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	f003 0303 	and.w	r3, r3, #3
 8007710:	2b00      	cmp	r3, #0
 8007712:	d006      	beq.n	8007722 <do_memp_free_pool+0x22>
 8007714:	4b0a      	ldr	r3, [pc, #40]	; (8007740 <do_memp_free_pool+0x40>)
 8007716:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800771a:	490a      	ldr	r1, [pc, #40]	; (8007744 <do_memp_free_pool+0x44>)
 800771c:	480a      	ldr	r0, [pc, #40]	; (8007748 <do_memp_free_pool+0x48>)
 800771e:	f009 ffef 	bl	8011700 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	689b      	ldr	r3, [r3, #8]
 800772a:	681a      	ldr	r2, [r3, #0]
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	689b      	ldr	r3, [r3, #8]
 8007734:	68fa      	ldr	r2, [r7, #12]
 8007736:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8007738:	bf00      	nop
 800773a:	3710      	adds	r7, #16
 800773c:	46bd      	mov	sp, r7
 800773e:	bd80      	pop	{r7, pc}
 8007740:	08013d84 	.word	0x08013d84
 8007744:	08013e34 	.word	0x08013e34
 8007748:	08013dd8 	.word	0x08013dd8

0800774c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b082      	sub	sp, #8
 8007750:	af00      	add	r7, sp, #0
 8007752:	4603      	mov	r3, r0
 8007754:	6039      	str	r1, [r7, #0]
 8007756:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8007758:	79fb      	ldrb	r3, [r7, #7]
 800775a:	2b08      	cmp	r3, #8
 800775c:	d907      	bls.n	800776e <memp_free+0x22>
 800775e:	4b0c      	ldr	r3, [pc, #48]	; (8007790 <memp_free+0x44>)
 8007760:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8007764:	490b      	ldr	r1, [pc, #44]	; (8007794 <memp_free+0x48>)
 8007766:	480c      	ldr	r0, [pc, #48]	; (8007798 <memp_free+0x4c>)
 8007768:	f009 ffca 	bl	8011700 <iprintf>
 800776c:	e00c      	b.n	8007788 <memp_free+0x3c>

  if (mem == NULL) {
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d008      	beq.n	8007786 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8007774:	79fb      	ldrb	r3, [r7, #7]
 8007776:	4a09      	ldr	r2, [pc, #36]	; (800779c <memp_free+0x50>)
 8007778:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800777c:	6839      	ldr	r1, [r7, #0]
 800777e:	4618      	mov	r0, r3
 8007780:	f7ff ffbe 	bl	8007700 <do_memp_free_pool>
 8007784:	e000      	b.n	8007788 <memp_free+0x3c>
    return;
 8007786:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8007788:	3708      	adds	r7, #8
 800778a:	46bd      	mov	sp, r7
 800778c:	bd80      	pop	{r7, pc}
 800778e:	bf00      	nop
 8007790:	08013d84 	.word	0x08013d84
 8007794:	08013e54 	.word	0x08013e54
 8007798:	08013dd8 	.word	0x08013dd8
 800779c:	0801776c 	.word	0x0801776c

080077a0 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 80077a0:	b480      	push	{r7}
 80077a2:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 80077a4:	bf00      	nop
 80077a6:	46bd      	mov	sp, r7
 80077a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ac:	4770      	bx	lr
	...

080077b0 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b086      	sub	sp, #24
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	60f8      	str	r0, [r7, #12]
 80077b8:	60b9      	str	r1, [r7, #8]
 80077ba:	607a      	str	r2, [r7, #4]
 80077bc:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d108      	bne.n	80077d6 <netif_add+0x26>
 80077c4:	4b57      	ldr	r3, [pc, #348]	; (8007924 <netif_add+0x174>)
 80077c6:	f240 1227 	movw	r2, #295	; 0x127
 80077ca:	4957      	ldr	r1, [pc, #348]	; (8007928 <netif_add+0x178>)
 80077cc:	4857      	ldr	r0, [pc, #348]	; (800792c <netif_add+0x17c>)
 80077ce:	f009 ff97 	bl	8011700 <iprintf>
 80077d2:	2300      	movs	r3, #0
 80077d4:	e0a2      	b.n	800791c <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80077d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d108      	bne.n	80077ee <netif_add+0x3e>
 80077dc:	4b51      	ldr	r3, [pc, #324]	; (8007924 <netif_add+0x174>)
 80077de:	f44f 7294 	mov.w	r2, #296	; 0x128
 80077e2:	4953      	ldr	r1, [pc, #332]	; (8007930 <netif_add+0x180>)
 80077e4:	4851      	ldr	r0, [pc, #324]	; (800792c <netif_add+0x17c>)
 80077e6:	f009 ff8b 	bl	8011700 <iprintf>
 80077ea:	2300      	movs	r3, #0
 80077ec:	e096      	b.n	800791c <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 80077ee:	68bb      	ldr	r3, [r7, #8]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d101      	bne.n	80077f8 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80077f4:	4b4f      	ldr	r3, [pc, #316]	; (8007934 <netif_add+0x184>)
 80077f6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d101      	bne.n	8007802 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 80077fe:	4b4d      	ldr	r3, [pc, #308]	; (8007934 <netif_add+0x184>)
 8007800:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d101      	bne.n	800780c <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8007808:	4b4a      	ldr	r3, [pc, #296]	; (8007934 <netif_add+0x184>)
 800780a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	2200      	movs	r2, #0
 8007810:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	2200      	movs	r2, #0
 8007816:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	2200      	movs	r2, #0
 800781c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	4a45      	ldr	r2, [pc, #276]	; (8007938 <netif_add+0x188>)
 8007822:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	2200      	movs	r2, #0
 8007828:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	2200      	movs	r2, #0
 800782e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	2200      	movs	r2, #0
 8007836:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	6a3a      	ldr	r2, [r7, #32]
 800783c:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800783e:	4b3f      	ldr	r3, [pc, #252]	; (800793c <netif_add+0x18c>)
 8007840:	781a      	ldrb	r2, [r3, #0]
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800784c:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	687a      	ldr	r2, [r7, #4]
 8007852:	68b9      	ldr	r1, [r7, #8]
 8007854:	68f8      	ldr	r0, [r7, #12]
 8007856:	f000 f913 	bl	8007a80 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800785a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800785c:	68f8      	ldr	r0, [r7, #12]
 800785e:	4798      	blx	r3
 8007860:	4603      	mov	r3, r0
 8007862:	2b00      	cmp	r3, #0
 8007864:	d001      	beq.n	800786a <netif_add+0xba>
    return NULL;
 8007866:	2300      	movs	r3, #0
 8007868:	e058      	b.n	800791c <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007870:	2bff      	cmp	r3, #255	; 0xff
 8007872:	d103      	bne.n	800787c <netif_add+0xcc>
        netif->num = 0;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	2200      	movs	r2, #0
 8007878:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800787c:	2300      	movs	r3, #0
 800787e:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8007880:	4b2f      	ldr	r3, [pc, #188]	; (8007940 <netif_add+0x190>)
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	617b      	str	r3, [r7, #20]
 8007886:	e02b      	b.n	80078e0 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8007888:	697a      	ldr	r2, [r7, #20]
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	429a      	cmp	r2, r3
 800788e:	d106      	bne.n	800789e <netif_add+0xee>
 8007890:	4b24      	ldr	r3, [pc, #144]	; (8007924 <netif_add+0x174>)
 8007892:	f240 128b 	movw	r2, #395	; 0x18b
 8007896:	492b      	ldr	r1, [pc, #172]	; (8007944 <netif_add+0x194>)
 8007898:	4824      	ldr	r0, [pc, #144]	; (800792c <netif_add+0x17c>)
 800789a:	f009 ff31 	bl	8011700 <iprintf>
        num_netifs++;
 800789e:	693b      	ldr	r3, [r7, #16]
 80078a0:	3301      	adds	r3, #1
 80078a2:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80078a4:	693b      	ldr	r3, [r7, #16]
 80078a6:	2bff      	cmp	r3, #255	; 0xff
 80078a8:	dd06      	ble.n	80078b8 <netif_add+0x108>
 80078aa:	4b1e      	ldr	r3, [pc, #120]	; (8007924 <netif_add+0x174>)
 80078ac:	f240 128d 	movw	r2, #397	; 0x18d
 80078b0:	4925      	ldr	r1, [pc, #148]	; (8007948 <netif_add+0x198>)
 80078b2:	481e      	ldr	r0, [pc, #120]	; (800792c <netif_add+0x17c>)
 80078b4:	f009 ff24 	bl	8011700 <iprintf>
        if (netif2->num == netif->num) {
 80078b8:	697b      	ldr	r3, [r7, #20]
 80078ba:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80078c4:	429a      	cmp	r2, r3
 80078c6:	d108      	bne.n	80078da <netif_add+0x12a>
          netif->num++;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80078ce:	3301      	adds	r3, #1
 80078d0:	b2da      	uxtb	r2, r3
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 80078d8:	e005      	b.n	80078e6 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80078da:	697b      	ldr	r3, [r7, #20]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	617b      	str	r3, [r7, #20]
 80078e0:	697b      	ldr	r3, [r7, #20]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d1d0      	bne.n	8007888 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 80078e6:	697b      	ldr	r3, [r7, #20]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d1be      	bne.n	800786a <netif_add+0xba>
  }
  if (netif->num == 254) {
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80078f2:	2bfe      	cmp	r3, #254	; 0xfe
 80078f4:	d103      	bne.n	80078fe <netif_add+0x14e>
    netif_num = 0;
 80078f6:	4b11      	ldr	r3, [pc, #68]	; (800793c <netif_add+0x18c>)
 80078f8:	2200      	movs	r2, #0
 80078fa:	701a      	strb	r2, [r3, #0]
 80078fc:	e006      	b.n	800790c <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007904:	3301      	adds	r3, #1
 8007906:	b2da      	uxtb	r2, r3
 8007908:	4b0c      	ldr	r3, [pc, #48]	; (800793c <netif_add+0x18c>)
 800790a:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800790c:	4b0c      	ldr	r3, [pc, #48]	; (8007940 <netif_add+0x190>)
 800790e:	681a      	ldr	r2, [r3, #0]
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8007914:	4a0a      	ldr	r2, [pc, #40]	; (8007940 <netif_add+0x190>)
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800791a:	68fb      	ldr	r3, [r7, #12]
}
 800791c:	4618      	mov	r0, r3
 800791e:	3718      	adds	r7, #24
 8007920:	46bd      	mov	sp, r7
 8007922:	bd80      	pop	{r7, pc}
 8007924:	08013e70 	.word	0x08013e70
 8007928:	08013f04 	.word	0x08013f04
 800792c:	08013ec0 	.word	0x08013ec0
 8007930:	08013f20 	.word	0x08013f20
 8007934:	080177d0 	.word	0x080177d0
 8007938:	08007c93 	.word	0x08007c93
 800793c:	20000548 	.word	0x20000548
 8007940:	2000d778 	.word	0x2000d778
 8007944:	08013f44 	.word	0x08013f44
 8007948:	08013f58 	.word	0x08013f58

0800794c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b082      	sub	sp, #8
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
 8007954:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8007956:	6839      	ldr	r1, [r7, #0]
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	f002 fd85 	bl	800a468 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800795e:	6839      	ldr	r1, [r7, #0]
 8007960:	6878      	ldr	r0, [r7, #4]
 8007962:	f007 fabd 	bl	800eee0 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8007966:	bf00      	nop
 8007968:	3708      	adds	r7, #8
 800796a:	46bd      	mov	sp, r7
 800796c:	bd80      	pop	{r7, pc}
	...

08007970 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b086      	sub	sp, #24
 8007974:	af00      	add	r7, sp, #0
 8007976:	60f8      	str	r0, [r7, #12]
 8007978:	60b9      	str	r1, [r7, #8]
 800797a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d106      	bne.n	8007990 <netif_do_set_ipaddr+0x20>
 8007982:	4b1d      	ldr	r3, [pc, #116]	; (80079f8 <netif_do_set_ipaddr+0x88>)
 8007984:	f240 12cb 	movw	r2, #459	; 0x1cb
 8007988:	491c      	ldr	r1, [pc, #112]	; (80079fc <netif_do_set_ipaddr+0x8c>)
 800798a:	481d      	ldr	r0, [pc, #116]	; (8007a00 <netif_do_set_ipaddr+0x90>)
 800798c:	f009 feb8 	bl	8011700 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d106      	bne.n	80079a4 <netif_do_set_ipaddr+0x34>
 8007996:	4b18      	ldr	r3, [pc, #96]	; (80079f8 <netif_do_set_ipaddr+0x88>)
 8007998:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800799c:	4917      	ldr	r1, [pc, #92]	; (80079fc <netif_do_set_ipaddr+0x8c>)
 800799e:	4818      	ldr	r0, [pc, #96]	; (8007a00 <netif_do_set_ipaddr+0x90>)
 80079a0:	f009 feae 	bl	8011700 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	681a      	ldr	r2, [r3, #0]
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	3304      	adds	r3, #4
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	429a      	cmp	r2, r3
 80079b0:	d01c      	beq.n	80079ec <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 80079b2:	68bb      	ldr	r3, [r7, #8]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	3304      	adds	r3, #4
 80079bc:	681a      	ldr	r2, [r3, #0]
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 80079c2:	f107 0314 	add.w	r3, r7, #20
 80079c6:	4619      	mov	r1, r3
 80079c8:	6878      	ldr	r0, [r7, #4]
 80079ca:	f7ff ffbf 	bl	800794c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80079ce:	68bb      	ldr	r3, [r7, #8]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d002      	beq.n	80079da <netif_do_set_ipaddr+0x6a>
 80079d4:	68bb      	ldr	r3, [r7, #8]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	e000      	b.n	80079dc <netif_do_set_ipaddr+0x6c>
 80079da:	2300      	movs	r3, #0
 80079dc:	68fa      	ldr	r2, [r7, #12]
 80079de:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80079e0:	2101      	movs	r1, #1
 80079e2:	68f8      	ldr	r0, [r7, #12]
 80079e4:	f000 f8d2 	bl	8007b8c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 80079e8:	2301      	movs	r3, #1
 80079ea:	e000      	b.n	80079ee <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 80079ec:	2300      	movs	r3, #0
}
 80079ee:	4618      	mov	r0, r3
 80079f0:	3718      	adds	r7, #24
 80079f2:	46bd      	mov	sp, r7
 80079f4:	bd80      	pop	{r7, pc}
 80079f6:	bf00      	nop
 80079f8:	08013e70 	.word	0x08013e70
 80079fc:	08013f88 	.word	0x08013f88
 8007a00:	08013ec0 	.word	0x08013ec0

08007a04 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8007a04:	b480      	push	{r7}
 8007a06:	b085      	sub	sp, #20
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	60f8      	str	r0, [r7, #12]
 8007a0c:	60b9      	str	r1, [r7, #8]
 8007a0e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8007a10:	68bb      	ldr	r3, [r7, #8]
 8007a12:	681a      	ldr	r2, [r3, #0]
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	3308      	adds	r3, #8
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	429a      	cmp	r2, r3
 8007a1c:	d00a      	beq.n	8007a34 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8007a1e:	68bb      	ldr	r3, [r7, #8]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d002      	beq.n	8007a2a <netif_do_set_netmask+0x26>
 8007a24:	68bb      	ldr	r3, [r7, #8]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	e000      	b.n	8007a2c <netif_do_set_netmask+0x28>
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	68fa      	ldr	r2, [r7, #12]
 8007a2e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8007a30:	2301      	movs	r3, #1
 8007a32:	e000      	b.n	8007a36 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8007a34:	2300      	movs	r3, #0
}
 8007a36:	4618      	mov	r0, r3
 8007a38:	3714      	adds	r7, #20
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a40:	4770      	bx	lr

08007a42 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8007a42:	b480      	push	{r7}
 8007a44:	b085      	sub	sp, #20
 8007a46:	af00      	add	r7, sp, #0
 8007a48:	60f8      	str	r0, [r7, #12]
 8007a4a:	60b9      	str	r1, [r7, #8]
 8007a4c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8007a4e:	68bb      	ldr	r3, [r7, #8]
 8007a50:	681a      	ldr	r2, [r3, #0]
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	330c      	adds	r3, #12
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	429a      	cmp	r2, r3
 8007a5a:	d00a      	beq.n	8007a72 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8007a5c:	68bb      	ldr	r3, [r7, #8]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d002      	beq.n	8007a68 <netif_do_set_gw+0x26>
 8007a62:	68bb      	ldr	r3, [r7, #8]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	e000      	b.n	8007a6a <netif_do_set_gw+0x28>
 8007a68:	2300      	movs	r3, #0
 8007a6a:	68fa      	ldr	r2, [r7, #12]
 8007a6c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8007a6e:	2301      	movs	r3, #1
 8007a70:	e000      	b.n	8007a74 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8007a72:	2300      	movs	r3, #0
}
 8007a74:	4618      	mov	r0, r3
 8007a76:	3714      	adds	r7, #20
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7e:	4770      	bx	lr

08007a80 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b088      	sub	sp, #32
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	60f8      	str	r0, [r7, #12]
 8007a88:	60b9      	str	r1, [r7, #8]
 8007a8a:	607a      	str	r2, [r7, #4]
 8007a8c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8007a8e:	2300      	movs	r3, #0
 8007a90:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8007a92:	2300      	movs	r3, #0
 8007a94:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8007a96:	68bb      	ldr	r3, [r7, #8]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d101      	bne.n	8007aa0 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8007a9c:	4b1c      	ldr	r3, [pc, #112]	; (8007b10 <netif_set_addr+0x90>)
 8007a9e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d101      	bne.n	8007aaa <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8007aa6:	4b1a      	ldr	r3, [pc, #104]	; (8007b10 <netif_set_addr+0x90>)
 8007aa8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d101      	bne.n	8007ab4 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8007ab0:	4b17      	ldr	r3, [pc, #92]	; (8007b10 <netif_set_addr+0x90>)
 8007ab2:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d003      	beq.n	8007ac2 <netif_set_addr+0x42>
 8007aba:	68bb      	ldr	r3, [r7, #8]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d101      	bne.n	8007ac6 <netif_set_addr+0x46>
 8007ac2:	2301      	movs	r3, #1
 8007ac4:	e000      	b.n	8007ac8 <netif_set_addr+0x48>
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	617b      	str	r3, [r7, #20]
  if (remove) {
 8007aca:	697b      	ldr	r3, [r7, #20]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d006      	beq.n	8007ade <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8007ad0:	f107 0310 	add.w	r3, r7, #16
 8007ad4:	461a      	mov	r2, r3
 8007ad6:	68b9      	ldr	r1, [r7, #8]
 8007ad8:	68f8      	ldr	r0, [r7, #12]
 8007ada:	f7ff ff49 	bl	8007970 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8007ade:	69fa      	ldr	r2, [r7, #28]
 8007ae0:	6879      	ldr	r1, [r7, #4]
 8007ae2:	68f8      	ldr	r0, [r7, #12]
 8007ae4:	f7ff ff8e 	bl	8007a04 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8007ae8:	69ba      	ldr	r2, [r7, #24]
 8007aea:	6839      	ldr	r1, [r7, #0]
 8007aec:	68f8      	ldr	r0, [r7, #12]
 8007aee:	f7ff ffa8 	bl	8007a42 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8007af2:	697b      	ldr	r3, [r7, #20]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d106      	bne.n	8007b06 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8007af8:	f107 0310 	add.w	r3, r7, #16
 8007afc:	461a      	mov	r2, r3
 8007afe:	68b9      	ldr	r1, [r7, #8]
 8007b00:	68f8      	ldr	r0, [r7, #12]
 8007b02:	f7ff ff35 	bl	8007970 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8007b06:	bf00      	nop
 8007b08:	3720      	adds	r7, #32
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	bd80      	pop	{r7, pc}
 8007b0e:	bf00      	nop
 8007b10:	080177d0 	.word	0x080177d0

08007b14 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8007b14:	b480      	push	{r7}
 8007b16:	b083      	sub	sp, #12
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8007b1c:	4a04      	ldr	r2, [pc, #16]	; (8007b30 <netif_set_default+0x1c>)
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8007b22:	bf00      	nop
 8007b24:	370c      	adds	r7, #12
 8007b26:	46bd      	mov	sp, r7
 8007b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2c:	4770      	bx	lr
 8007b2e:	bf00      	nop
 8007b30:	2000d77c 	.word	0x2000d77c

08007b34 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b082      	sub	sp, #8
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d107      	bne.n	8007b52 <netif_set_up+0x1e>
 8007b42:	4b0f      	ldr	r3, [pc, #60]	; (8007b80 <netif_set_up+0x4c>)
 8007b44:	f44f 7254 	mov.w	r2, #848	; 0x350
 8007b48:	490e      	ldr	r1, [pc, #56]	; (8007b84 <netif_set_up+0x50>)
 8007b4a:	480f      	ldr	r0, [pc, #60]	; (8007b88 <netif_set_up+0x54>)
 8007b4c:	f009 fdd8 	bl	8011700 <iprintf>
 8007b50:	e013      	b.n	8007b7a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007b58:	f003 0301 	and.w	r3, r3, #1
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d10c      	bne.n	8007b7a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007b66:	f043 0301 	orr.w	r3, r3, #1
 8007b6a:	b2da      	uxtb	r2, r3
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8007b72:	2103      	movs	r1, #3
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	f000 f809 	bl	8007b8c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8007b7a:	3708      	adds	r7, #8
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	bd80      	pop	{r7, pc}
 8007b80:	08013e70 	.word	0x08013e70
 8007b84:	08013ff8 	.word	0x08013ff8
 8007b88:	08013ec0 	.word	0x08013ec0

08007b8c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b082      	sub	sp, #8
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
 8007b94:	460b      	mov	r3, r1
 8007b96:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d106      	bne.n	8007bac <netif_issue_reports+0x20>
 8007b9e:	4b18      	ldr	r3, [pc, #96]	; (8007c00 <netif_issue_reports+0x74>)
 8007ba0:	f240 326d 	movw	r2, #877	; 0x36d
 8007ba4:	4917      	ldr	r1, [pc, #92]	; (8007c04 <netif_issue_reports+0x78>)
 8007ba6:	4818      	ldr	r0, [pc, #96]	; (8007c08 <netif_issue_reports+0x7c>)
 8007ba8:	f009 fdaa 	bl	8011700 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007bb2:	f003 0304 	and.w	r3, r3, #4
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d01e      	beq.n	8007bf8 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007bc0:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d017      	beq.n	8007bf8 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8007bc8:	78fb      	ldrb	r3, [r7, #3]
 8007bca:	f003 0301 	and.w	r3, r3, #1
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d013      	beq.n	8007bfa <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	3304      	adds	r3, #4
 8007bd6:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d00e      	beq.n	8007bfa <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007be2:	f003 0308 	and.w	r3, r3, #8
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d007      	beq.n	8007bfa <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	3304      	adds	r3, #4
 8007bee:	4619      	mov	r1, r3
 8007bf0:	6878      	ldr	r0, [r7, #4]
 8007bf2:	f008 f8df 	bl	800fdb4 <etharp_request>
 8007bf6:	e000      	b.n	8007bfa <netif_issue_reports+0x6e>
    return;
 8007bf8:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8007bfa:	3708      	adds	r7, #8
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bd80      	pop	{r7, pc}
 8007c00:	08013e70 	.word	0x08013e70
 8007c04:	08014014 	.word	0x08014014
 8007c08:	08013ec0 	.word	0x08013ec0

08007c0c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b082      	sub	sp, #8
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d107      	bne.n	8007c2a <netif_set_down+0x1e>
 8007c1a:	4b12      	ldr	r3, [pc, #72]	; (8007c64 <netif_set_down+0x58>)
 8007c1c:	f240 329b 	movw	r2, #923	; 0x39b
 8007c20:	4911      	ldr	r1, [pc, #68]	; (8007c68 <netif_set_down+0x5c>)
 8007c22:	4812      	ldr	r0, [pc, #72]	; (8007c6c <netif_set_down+0x60>)
 8007c24:	f009 fd6c 	bl	8011700 <iprintf>
 8007c28:	e019      	b.n	8007c5e <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007c30:	f003 0301 	and.w	r3, r3, #1
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d012      	beq.n	8007c5e <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007c3e:	f023 0301 	bic.w	r3, r3, #1
 8007c42:	b2da      	uxtb	r2, r3
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007c50:	f003 0308 	and.w	r3, r3, #8
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d002      	beq.n	8007c5e <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8007c58:	6878      	ldr	r0, [r7, #4]
 8007c5a:	f007 fc69 	bl	800f530 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8007c5e:	3708      	adds	r7, #8
 8007c60:	46bd      	mov	sp, r7
 8007c62:	bd80      	pop	{r7, pc}
 8007c64:	08013e70 	.word	0x08013e70
 8007c68:	08014038 	.word	0x08014038
 8007c6c:	08013ec0 	.word	0x08013ec0

08007c70 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8007c70:	b480      	push	{r7}
 8007c72:	b083      	sub	sp, #12
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
 8007c78:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d002      	beq.n	8007c86 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	683a      	ldr	r2, [r7, #0]
 8007c84:	61da      	str	r2, [r3, #28]
  }
}
 8007c86:	bf00      	nop
 8007c88:	370c      	adds	r7, #12
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c90:	4770      	bx	lr

08007c92 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8007c92:	b480      	push	{r7}
 8007c94:	b085      	sub	sp, #20
 8007c96:	af00      	add	r7, sp, #0
 8007c98:	60f8      	str	r0, [r7, #12]
 8007c9a:	60b9      	str	r1, [r7, #8]
 8007c9c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8007c9e:	f06f 030b 	mvn.w	r3, #11
}
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	3714      	adds	r7, #20
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cac:	4770      	bx	lr
	...

08007cb0 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8007cb0:	b480      	push	{r7}
 8007cb2:	b085      	sub	sp, #20
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	4603      	mov	r3, r0
 8007cb8:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8007cba:	79fb      	ldrb	r3, [r7, #7]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d013      	beq.n	8007ce8 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8007cc0:	4b0d      	ldr	r3, [pc, #52]	; (8007cf8 <netif_get_by_index+0x48>)
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	60fb      	str	r3, [r7, #12]
 8007cc6:	e00c      	b.n	8007ce2 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007cce:	3301      	adds	r3, #1
 8007cd0:	b2db      	uxtb	r3, r3
 8007cd2:	79fa      	ldrb	r2, [r7, #7]
 8007cd4:	429a      	cmp	r2, r3
 8007cd6:	d101      	bne.n	8007cdc <netif_get_by_index+0x2c>
        return netif; /* found! */
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	e006      	b.n	8007cea <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	60fb      	str	r3, [r7, #12]
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d1ef      	bne.n	8007cc8 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8007ce8:	2300      	movs	r3, #0
}
 8007cea:	4618      	mov	r0, r3
 8007cec:	3714      	adds	r7, #20
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf4:	4770      	bx	lr
 8007cf6:	bf00      	nop
 8007cf8:	2000d778 	.word	0x2000d778

08007cfc <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b082      	sub	sp, #8
 8007d00:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8007d02:	4b0c      	ldr	r3, [pc, #48]	; (8007d34 <pbuf_free_ooseq+0x38>)
 8007d04:	2200      	movs	r2, #0
 8007d06:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8007d08:	4b0b      	ldr	r3, [pc, #44]	; (8007d38 <pbuf_free_ooseq+0x3c>)
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	607b      	str	r3, [r7, #4]
 8007d0e:	e00a      	b.n	8007d26 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d003      	beq.n	8007d20 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8007d18:	6878      	ldr	r0, [r7, #4]
 8007d1a:	f002 fbe3 	bl	800a4e4 <tcp_free_ooseq>
      return;
 8007d1e:	e005      	b.n	8007d2c <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	68db      	ldr	r3, [r3, #12]
 8007d24:	607b      	str	r3, [r7, #4]
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d1f1      	bne.n	8007d10 <pbuf_free_ooseq+0x14>
    }
  }
}
 8007d2c:	3708      	adds	r7, #8
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	bd80      	pop	{r7, pc}
 8007d32:	bf00      	nop
 8007d34:	2000d780 	.word	0x2000d780
 8007d38:	2000d788 	.word	0x2000d788

08007d3c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8007d3c:	b480      	push	{r7}
 8007d3e:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8007d40:	4b03      	ldr	r3, [pc, #12]	; (8007d50 <pbuf_pool_is_empty+0x14>)
 8007d42:	2201      	movs	r2, #1
 8007d44:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8007d46:	bf00      	nop
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4e:	4770      	bx	lr
 8007d50:	2000d780 	.word	0x2000d780

08007d54 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8007d54:	b480      	push	{r7}
 8007d56:	b085      	sub	sp, #20
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	60f8      	str	r0, [r7, #12]
 8007d5c:	60b9      	str	r1, [r7, #8]
 8007d5e:	4611      	mov	r1, r2
 8007d60:	461a      	mov	r2, r3
 8007d62:	460b      	mov	r3, r1
 8007d64:	80fb      	strh	r3, [r7, #6]
 8007d66:	4613      	mov	r3, r2
 8007d68:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	68ba      	ldr	r2, [r7, #8]
 8007d74:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	88fa      	ldrh	r2, [r7, #6]
 8007d7a:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	88ba      	ldrh	r2, [r7, #4]
 8007d80:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8007d82:	8b3b      	ldrh	r3, [r7, #24]
 8007d84:	b2da      	uxtb	r2, r3
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	7f3a      	ldrb	r2, [r7, #28]
 8007d8e:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	2201      	movs	r2, #1
 8007d94:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	2200      	movs	r2, #0
 8007d9a:	73da      	strb	r2, [r3, #15]
}
 8007d9c:	bf00      	nop
 8007d9e:	3714      	adds	r7, #20
 8007da0:	46bd      	mov	sp, r7
 8007da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da6:	4770      	bx	lr

08007da8 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b08c      	sub	sp, #48	; 0x30
 8007dac:	af02      	add	r7, sp, #8
 8007dae:	4603      	mov	r3, r0
 8007db0:	71fb      	strb	r3, [r7, #7]
 8007db2:	460b      	mov	r3, r1
 8007db4:	80bb      	strh	r3, [r7, #4]
 8007db6:	4613      	mov	r3, r2
 8007db8:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8007dba:	79fb      	ldrb	r3, [r7, #7]
 8007dbc:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8007dbe:	887b      	ldrh	r3, [r7, #2]
 8007dc0:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8007dc4:	d07f      	beq.n	8007ec6 <pbuf_alloc+0x11e>
 8007dc6:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8007dca:	f300 80c8 	bgt.w	8007f5e <pbuf_alloc+0x1b6>
 8007dce:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8007dd2:	d010      	beq.n	8007df6 <pbuf_alloc+0x4e>
 8007dd4:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8007dd8:	f300 80c1 	bgt.w	8007f5e <pbuf_alloc+0x1b6>
 8007ddc:	2b01      	cmp	r3, #1
 8007dde:	d002      	beq.n	8007de6 <pbuf_alloc+0x3e>
 8007de0:	2b41      	cmp	r3, #65	; 0x41
 8007de2:	f040 80bc 	bne.w	8007f5e <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8007de6:	887a      	ldrh	r2, [r7, #2]
 8007de8:	88bb      	ldrh	r3, [r7, #4]
 8007dea:	4619      	mov	r1, r3
 8007dec:	2000      	movs	r0, #0
 8007dee:	f000 f8d1 	bl	8007f94 <pbuf_alloc_reference>
 8007df2:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8007df4:	e0bd      	b.n	8007f72 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8007df6:	2300      	movs	r3, #0
 8007df8:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8007dfe:	88bb      	ldrh	r3, [r7, #4]
 8007e00:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8007e02:	2008      	movs	r0, #8
 8007e04:	f7ff fc56 	bl	80076b4 <memp_malloc>
 8007e08:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8007e0a:	693b      	ldr	r3, [r7, #16]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d109      	bne.n	8007e24 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8007e10:	f7ff ff94 	bl	8007d3c <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8007e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d002      	beq.n	8007e20 <pbuf_alloc+0x78>
            pbuf_free(p);
 8007e1a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007e1c:	f000 faa8 	bl	8008370 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8007e20:	2300      	movs	r3, #0
 8007e22:	e0a7      	b.n	8007f74 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8007e24:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007e26:	3303      	adds	r3, #3
 8007e28:	b29b      	uxth	r3, r3
 8007e2a:	f023 0303 	bic.w	r3, r3, #3
 8007e2e:	b29b      	uxth	r3, r3
 8007e30:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8007e34:	b29b      	uxth	r3, r3
 8007e36:	8b7a      	ldrh	r2, [r7, #26]
 8007e38:	4293      	cmp	r3, r2
 8007e3a:	bf28      	it	cs
 8007e3c:	4613      	movcs	r3, r2
 8007e3e:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8007e40:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007e42:	3310      	adds	r3, #16
 8007e44:	693a      	ldr	r2, [r7, #16]
 8007e46:	4413      	add	r3, r2
 8007e48:	3303      	adds	r3, #3
 8007e4a:	f023 0303 	bic.w	r3, r3, #3
 8007e4e:	4618      	mov	r0, r3
 8007e50:	89f9      	ldrh	r1, [r7, #14]
 8007e52:	8b7a      	ldrh	r2, [r7, #26]
 8007e54:	2300      	movs	r3, #0
 8007e56:	9301      	str	r3, [sp, #4]
 8007e58:	887b      	ldrh	r3, [r7, #2]
 8007e5a:	9300      	str	r3, [sp, #0]
 8007e5c:	460b      	mov	r3, r1
 8007e5e:	4601      	mov	r1, r0
 8007e60:	6938      	ldr	r0, [r7, #16]
 8007e62:	f7ff ff77 	bl	8007d54 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8007e66:	693b      	ldr	r3, [r7, #16]
 8007e68:	685b      	ldr	r3, [r3, #4]
 8007e6a:	f003 0303 	and.w	r3, r3, #3
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d006      	beq.n	8007e80 <pbuf_alloc+0xd8>
 8007e72:	4b42      	ldr	r3, [pc, #264]	; (8007f7c <pbuf_alloc+0x1d4>)
 8007e74:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007e78:	4941      	ldr	r1, [pc, #260]	; (8007f80 <pbuf_alloc+0x1d8>)
 8007e7a:	4842      	ldr	r0, [pc, #264]	; (8007f84 <pbuf_alloc+0x1dc>)
 8007e7c:	f009 fc40 	bl	8011700 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8007e80:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007e82:	3303      	adds	r3, #3
 8007e84:	f023 0303 	bic.w	r3, r3, #3
 8007e88:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007e8c:	d106      	bne.n	8007e9c <pbuf_alloc+0xf4>
 8007e8e:	4b3b      	ldr	r3, [pc, #236]	; (8007f7c <pbuf_alloc+0x1d4>)
 8007e90:	f44f 7281 	mov.w	r2, #258	; 0x102
 8007e94:	493c      	ldr	r1, [pc, #240]	; (8007f88 <pbuf_alloc+0x1e0>)
 8007e96:	483b      	ldr	r0, [pc, #236]	; (8007f84 <pbuf_alloc+0x1dc>)
 8007e98:	f009 fc32 	bl	8011700 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8007e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d102      	bne.n	8007ea8 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8007ea2:	693b      	ldr	r3, [r7, #16]
 8007ea4:	627b      	str	r3, [r7, #36]	; 0x24
 8007ea6:	e002      	b.n	8007eae <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8007ea8:	69fb      	ldr	r3, [r7, #28]
 8007eaa:	693a      	ldr	r2, [r7, #16]
 8007eac:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8007eae:	693b      	ldr	r3, [r7, #16]
 8007eb0:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8007eb2:	8b7a      	ldrh	r2, [r7, #26]
 8007eb4:	89fb      	ldrh	r3, [r7, #14]
 8007eb6:	1ad3      	subs	r3, r2, r3
 8007eb8:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8007eba:	2300      	movs	r3, #0
 8007ebc:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8007ebe:	8b7b      	ldrh	r3, [r7, #26]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d19e      	bne.n	8007e02 <pbuf_alloc+0x5a>
      break;
 8007ec4:	e055      	b.n	8007f72 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8007ec6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007ec8:	3303      	adds	r3, #3
 8007eca:	b29b      	uxth	r3, r3
 8007ecc:	f023 0303 	bic.w	r3, r3, #3
 8007ed0:	b29a      	uxth	r2, r3
 8007ed2:	88bb      	ldrh	r3, [r7, #4]
 8007ed4:	3303      	adds	r3, #3
 8007ed6:	b29b      	uxth	r3, r3
 8007ed8:	f023 0303 	bic.w	r3, r3, #3
 8007edc:	b29b      	uxth	r3, r3
 8007ede:	4413      	add	r3, r2
 8007ee0:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8007ee2:	8b3b      	ldrh	r3, [r7, #24]
 8007ee4:	3310      	adds	r3, #16
 8007ee6:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8007ee8:	8b3a      	ldrh	r2, [r7, #24]
 8007eea:	88bb      	ldrh	r3, [r7, #4]
 8007eec:	3303      	adds	r3, #3
 8007eee:	f023 0303 	bic.w	r3, r3, #3
 8007ef2:	429a      	cmp	r2, r3
 8007ef4:	d306      	bcc.n	8007f04 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8007ef6:	8afa      	ldrh	r2, [r7, #22]
 8007ef8:	88bb      	ldrh	r3, [r7, #4]
 8007efa:	3303      	adds	r3, #3
 8007efc:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8007f00:	429a      	cmp	r2, r3
 8007f02:	d201      	bcs.n	8007f08 <pbuf_alloc+0x160>
        return NULL;
 8007f04:	2300      	movs	r3, #0
 8007f06:	e035      	b.n	8007f74 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8007f08:	8afb      	ldrh	r3, [r7, #22]
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	f7ff fa64 	bl	80073d8 <mem_malloc>
 8007f10:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8007f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d101      	bne.n	8007f1c <pbuf_alloc+0x174>
        return NULL;
 8007f18:	2300      	movs	r3, #0
 8007f1a:	e02b      	b.n	8007f74 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8007f1c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007f1e:	3310      	adds	r3, #16
 8007f20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f22:	4413      	add	r3, r2
 8007f24:	3303      	adds	r3, #3
 8007f26:	f023 0303 	bic.w	r3, r3, #3
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	88b9      	ldrh	r1, [r7, #4]
 8007f2e:	88ba      	ldrh	r2, [r7, #4]
 8007f30:	2300      	movs	r3, #0
 8007f32:	9301      	str	r3, [sp, #4]
 8007f34:	887b      	ldrh	r3, [r7, #2]
 8007f36:	9300      	str	r3, [sp, #0]
 8007f38:	460b      	mov	r3, r1
 8007f3a:	4601      	mov	r1, r0
 8007f3c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007f3e:	f7ff ff09 	bl	8007d54 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8007f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f44:	685b      	ldr	r3, [r3, #4]
 8007f46:	f003 0303 	and.w	r3, r3, #3
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d010      	beq.n	8007f70 <pbuf_alloc+0x1c8>
 8007f4e:	4b0b      	ldr	r3, [pc, #44]	; (8007f7c <pbuf_alloc+0x1d4>)
 8007f50:	f44f 7291 	mov.w	r2, #290	; 0x122
 8007f54:	490d      	ldr	r1, [pc, #52]	; (8007f8c <pbuf_alloc+0x1e4>)
 8007f56:	480b      	ldr	r0, [pc, #44]	; (8007f84 <pbuf_alloc+0x1dc>)
 8007f58:	f009 fbd2 	bl	8011700 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8007f5c:	e008      	b.n	8007f70 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8007f5e:	4b07      	ldr	r3, [pc, #28]	; (8007f7c <pbuf_alloc+0x1d4>)
 8007f60:	f240 1227 	movw	r2, #295	; 0x127
 8007f64:	490a      	ldr	r1, [pc, #40]	; (8007f90 <pbuf_alloc+0x1e8>)
 8007f66:	4807      	ldr	r0, [pc, #28]	; (8007f84 <pbuf_alloc+0x1dc>)
 8007f68:	f009 fbca 	bl	8011700 <iprintf>
      return NULL;
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	e001      	b.n	8007f74 <pbuf_alloc+0x1cc>
      break;
 8007f70:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8007f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007f74:	4618      	mov	r0, r3
 8007f76:	3728      	adds	r7, #40	; 0x28
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	bd80      	pop	{r7, pc}
 8007f7c:	080140a0 	.word	0x080140a0
 8007f80:	080140d0 	.word	0x080140d0
 8007f84:	08014100 	.word	0x08014100
 8007f88:	08014128 	.word	0x08014128
 8007f8c:	0801415c 	.word	0x0801415c
 8007f90:	08014188 	.word	0x08014188

08007f94 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b086      	sub	sp, #24
 8007f98:	af02      	add	r7, sp, #8
 8007f9a:	6078      	str	r0, [r7, #4]
 8007f9c:	460b      	mov	r3, r1
 8007f9e:	807b      	strh	r3, [r7, #2]
 8007fa0:	4613      	mov	r3, r2
 8007fa2:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8007fa4:	883b      	ldrh	r3, [r7, #0]
 8007fa6:	2b41      	cmp	r3, #65	; 0x41
 8007fa8:	d009      	beq.n	8007fbe <pbuf_alloc_reference+0x2a>
 8007faa:	883b      	ldrh	r3, [r7, #0]
 8007fac:	2b01      	cmp	r3, #1
 8007fae:	d006      	beq.n	8007fbe <pbuf_alloc_reference+0x2a>
 8007fb0:	4b0f      	ldr	r3, [pc, #60]	; (8007ff0 <pbuf_alloc_reference+0x5c>)
 8007fb2:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8007fb6:	490f      	ldr	r1, [pc, #60]	; (8007ff4 <pbuf_alloc_reference+0x60>)
 8007fb8:	480f      	ldr	r0, [pc, #60]	; (8007ff8 <pbuf_alloc_reference+0x64>)
 8007fba:	f009 fba1 	bl	8011700 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8007fbe:	2007      	movs	r0, #7
 8007fc0:	f7ff fb78 	bl	80076b4 <memp_malloc>
 8007fc4:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d101      	bne.n	8007fd0 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8007fcc:	2300      	movs	r3, #0
 8007fce:	e00b      	b.n	8007fe8 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8007fd0:	8879      	ldrh	r1, [r7, #2]
 8007fd2:	887a      	ldrh	r2, [r7, #2]
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	9301      	str	r3, [sp, #4]
 8007fd8:	883b      	ldrh	r3, [r7, #0]
 8007fda:	9300      	str	r3, [sp, #0]
 8007fdc:	460b      	mov	r3, r1
 8007fde:	6879      	ldr	r1, [r7, #4]
 8007fe0:	68f8      	ldr	r0, [r7, #12]
 8007fe2:	f7ff feb7 	bl	8007d54 <pbuf_init_alloced_pbuf>
  return p;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
}
 8007fe8:	4618      	mov	r0, r3
 8007fea:	3710      	adds	r7, #16
 8007fec:	46bd      	mov	sp, r7
 8007fee:	bd80      	pop	{r7, pc}
 8007ff0:	080140a0 	.word	0x080140a0
 8007ff4:	080141a4 	.word	0x080141a4
 8007ff8:	08014100 	.word	0x08014100

08007ffc <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b088      	sub	sp, #32
 8008000:	af02      	add	r7, sp, #8
 8008002:	607b      	str	r3, [r7, #4]
 8008004:	4603      	mov	r3, r0
 8008006:	73fb      	strb	r3, [r7, #15]
 8008008:	460b      	mov	r3, r1
 800800a:	81bb      	strh	r3, [r7, #12]
 800800c:	4613      	mov	r3, r2
 800800e:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8008010:	7bfb      	ldrb	r3, [r7, #15]
 8008012:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8008014:	8a7b      	ldrh	r3, [r7, #18]
 8008016:	3303      	adds	r3, #3
 8008018:	f023 0203 	bic.w	r2, r3, #3
 800801c:	89bb      	ldrh	r3, [r7, #12]
 800801e:	441a      	add	r2, r3
 8008020:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008022:	429a      	cmp	r2, r3
 8008024:	d901      	bls.n	800802a <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8008026:	2300      	movs	r3, #0
 8008028:	e018      	b.n	800805c <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800802a:	6a3b      	ldr	r3, [r7, #32]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d007      	beq.n	8008040 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8008030:	8a7b      	ldrh	r3, [r7, #18]
 8008032:	3303      	adds	r3, #3
 8008034:	f023 0303 	bic.w	r3, r3, #3
 8008038:	6a3a      	ldr	r2, [r7, #32]
 800803a:	4413      	add	r3, r2
 800803c:	617b      	str	r3, [r7, #20]
 800803e:	e001      	b.n	8008044 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8008040:	2300      	movs	r3, #0
 8008042:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8008044:	6878      	ldr	r0, [r7, #4]
 8008046:	89b9      	ldrh	r1, [r7, #12]
 8008048:	89ba      	ldrh	r2, [r7, #12]
 800804a:	2302      	movs	r3, #2
 800804c:	9301      	str	r3, [sp, #4]
 800804e:	897b      	ldrh	r3, [r7, #10]
 8008050:	9300      	str	r3, [sp, #0]
 8008052:	460b      	mov	r3, r1
 8008054:	6979      	ldr	r1, [r7, #20]
 8008056:	f7ff fe7d 	bl	8007d54 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800805a:	687b      	ldr	r3, [r7, #4]
}
 800805c:	4618      	mov	r0, r3
 800805e:	3718      	adds	r7, #24
 8008060:	46bd      	mov	sp, r7
 8008062:	bd80      	pop	{r7, pc}

08008064 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8008064:	b580      	push	{r7, lr}
 8008066:	b084      	sub	sp, #16
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
 800806c:	460b      	mov	r3, r1
 800806e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d106      	bne.n	8008084 <pbuf_realloc+0x20>
 8008076:	4b3a      	ldr	r3, [pc, #232]	; (8008160 <pbuf_realloc+0xfc>)
 8008078:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800807c:	4939      	ldr	r1, [pc, #228]	; (8008164 <pbuf_realloc+0x100>)
 800807e:	483a      	ldr	r0, [pc, #232]	; (8008168 <pbuf_realloc+0x104>)
 8008080:	f009 fb3e 	bl	8011700 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	891b      	ldrh	r3, [r3, #8]
 8008088:	887a      	ldrh	r2, [r7, #2]
 800808a:	429a      	cmp	r2, r3
 800808c:	d263      	bcs.n	8008156 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	891a      	ldrh	r2, [r3, #8]
 8008092:	887b      	ldrh	r3, [r7, #2]
 8008094:	1ad3      	subs	r3, r2, r3
 8008096:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8008098:	887b      	ldrh	r3, [r7, #2]
 800809a:	817b      	strh	r3, [r7, #10]
  q = p;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 80080a0:	e018      	b.n	80080d4 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	895b      	ldrh	r3, [r3, #10]
 80080a6:	897a      	ldrh	r2, [r7, #10]
 80080a8:	1ad3      	subs	r3, r2, r3
 80080aa:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	891a      	ldrh	r2, [r3, #8]
 80080b0:	893b      	ldrh	r3, [r7, #8]
 80080b2:	1ad3      	subs	r3, r2, r3
 80080b4:	b29a      	uxth	r2, r3
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d106      	bne.n	80080d4 <pbuf_realloc+0x70>
 80080c6:	4b26      	ldr	r3, [pc, #152]	; (8008160 <pbuf_realloc+0xfc>)
 80080c8:	f240 12af 	movw	r2, #431	; 0x1af
 80080cc:	4927      	ldr	r1, [pc, #156]	; (800816c <pbuf_realloc+0x108>)
 80080ce:	4826      	ldr	r0, [pc, #152]	; (8008168 <pbuf_realloc+0x104>)
 80080d0:	f009 fb16 	bl	8011700 <iprintf>
  while (rem_len > q->len) {
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	895b      	ldrh	r3, [r3, #10]
 80080d8:	897a      	ldrh	r2, [r7, #10]
 80080da:	429a      	cmp	r2, r3
 80080dc:	d8e1      	bhi.n	80080a2 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	7b1b      	ldrb	r3, [r3, #12]
 80080e2:	f003 030f 	and.w	r3, r3, #15
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d121      	bne.n	800812e <pbuf_realloc+0xca>
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	895b      	ldrh	r3, [r3, #10]
 80080ee:	897a      	ldrh	r2, [r7, #10]
 80080f0:	429a      	cmp	r2, r3
 80080f2:	d01c      	beq.n	800812e <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	7b5b      	ldrb	r3, [r3, #13]
 80080f8:	f003 0302 	and.w	r3, r3, #2
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d116      	bne.n	800812e <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	685a      	ldr	r2, [r3, #4]
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	1ad3      	subs	r3, r2, r3
 8008108:	b29a      	uxth	r2, r3
 800810a:	897b      	ldrh	r3, [r7, #10]
 800810c:	4413      	add	r3, r2
 800810e:	b29b      	uxth	r3, r3
 8008110:	4619      	mov	r1, r3
 8008112:	68f8      	ldr	r0, [r7, #12]
 8008114:	f7ff f864 	bl	80071e0 <mem_trim>
 8008118:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d106      	bne.n	800812e <pbuf_realloc+0xca>
 8008120:	4b0f      	ldr	r3, [pc, #60]	; (8008160 <pbuf_realloc+0xfc>)
 8008122:	f240 12bd 	movw	r2, #445	; 0x1bd
 8008126:	4912      	ldr	r1, [pc, #72]	; (8008170 <pbuf_realloc+0x10c>)
 8008128:	480f      	ldr	r0, [pc, #60]	; (8008168 <pbuf_realloc+0x104>)
 800812a:	f009 fae9 	bl	8011700 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	897a      	ldrh	r2, [r7, #10]
 8008132:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	895a      	ldrh	r2, [r3, #10]
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d004      	beq.n	800814e <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	4618      	mov	r0, r3
 800814a:	f000 f911 	bl	8008370 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	2200      	movs	r2, #0
 8008152:	601a      	str	r2, [r3, #0]
 8008154:	e000      	b.n	8008158 <pbuf_realloc+0xf4>
    return;
 8008156:	bf00      	nop

}
 8008158:	3710      	adds	r7, #16
 800815a:	46bd      	mov	sp, r7
 800815c:	bd80      	pop	{r7, pc}
 800815e:	bf00      	nop
 8008160:	080140a0 	.word	0x080140a0
 8008164:	080141b8 	.word	0x080141b8
 8008168:	08014100 	.word	0x08014100
 800816c:	080141d0 	.word	0x080141d0
 8008170:	080141e8 	.word	0x080141e8

08008174 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b086      	sub	sp, #24
 8008178:	af00      	add	r7, sp, #0
 800817a:	60f8      	str	r0, [r7, #12]
 800817c:	60b9      	str	r1, [r7, #8]
 800817e:	4613      	mov	r3, r2
 8008180:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d106      	bne.n	8008196 <pbuf_add_header_impl+0x22>
 8008188:	4b2b      	ldr	r3, [pc, #172]	; (8008238 <pbuf_add_header_impl+0xc4>)
 800818a:	f240 12df 	movw	r2, #479	; 0x1df
 800818e:	492b      	ldr	r1, [pc, #172]	; (800823c <pbuf_add_header_impl+0xc8>)
 8008190:	482b      	ldr	r0, [pc, #172]	; (8008240 <pbuf_add_header_impl+0xcc>)
 8008192:	f009 fab5 	bl	8011700 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d003      	beq.n	80081a4 <pbuf_add_header_impl+0x30>
 800819c:	68bb      	ldr	r3, [r7, #8]
 800819e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80081a2:	d301      	bcc.n	80081a8 <pbuf_add_header_impl+0x34>
    return 1;
 80081a4:	2301      	movs	r3, #1
 80081a6:	e043      	b.n	8008230 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 80081a8:	68bb      	ldr	r3, [r7, #8]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d101      	bne.n	80081b2 <pbuf_add_header_impl+0x3e>
    return 0;
 80081ae:	2300      	movs	r3, #0
 80081b0:	e03e      	b.n	8008230 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 80081b2:	68bb      	ldr	r3, [r7, #8]
 80081b4:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	891a      	ldrh	r2, [r3, #8]
 80081ba:	8a7b      	ldrh	r3, [r7, #18]
 80081bc:	4413      	add	r3, r2
 80081be:	b29b      	uxth	r3, r3
 80081c0:	8a7a      	ldrh	r2, [r7, #18]
 80081c2:	429a      	cmp	r2, r3
 80081c4:	d901      	bls.n	80081ca <pbuf_add_header_impl+0x56>
    return 1;
 80081c6:	2301      	movs	r3, #1
 80081c8:	e032      	b.n	8008230 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	7b1b      	ldrb	r3, [r3, #12]
 80081ce:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 80081d0:	8a3b      	ldrh	r3, [r7, #16]
 80081d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d00c      	beq.n	80081f4 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	685a      	ldr	r2, [r3, #4]
 80081de:	68bb      	ldr	r3, [r7, #8]
 80081e0:	425b      	negs	r3, r3
 80081e2:	4413      	add	r3, r2
 80081e4:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	3310      	adds	r3, #16
 80081ea:	697a      	ldr	r2, [r7, #20]
 80081ec:	429a      	cmp	r2, r3
 80081ee:	d20d      	bcs.n	800820c <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 80081f0:	2301      	movs	r3, #1
 80081f2:	e01d      	b.n	8008230 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 80081f4:	79fb      	ldrb	r3, [r7, #7]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d006      	beq.n	8008208 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	685a      	ldr	r2, [r3, #4]
 80081fe:	68bb      	ldr	r3, [r7, #8]
 8008200:	425b      	negs	r3, r3
 8008202:	4413      	add	r3, r2
 8008204:	617b      	str	r3, [r7, #20]
 8008206:	e001      	b.n	800820c <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8008208:	2301      	movs	r3, #1
 800820a:	e011      	b.n	8008230 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	697a      	ldr	r2, [r7, #20]
 8008210:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	895a      	ldrh	r2, [r3, #10]
 8008216:	8a7b      	ldrh	r3, [r7, #18]
 8008218:	4413      	add	r3, r2
 800821a:	b29a      	uxth	r2, r3
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	891a      	ldrh	r2, [r3, #8]
 8008224:	8a7b      	ldrh	r3, [r7, #18]
 8008226:	4413      	add	r3, r2
 8008228:	b29a      	uxth	r2, r3
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	811a      	strh	r2, [r3, #8]


  return 0;
 800822e:	2300      	movs	r3, #0
}
 8008230:	4618      	mov	r0, r3
 8008232:	3718      	adds	r7, #24
 8008234:	46bd      	mov	sp, r7
 8008236:	bd80      	pop	{r7, pc}
 8008238:	080140a0 	.word	0x080140a0
 800823c:	08014204 	.word	0x08014204
 8008240:	08014100 	.word	0x08014100

08008244 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b082      	sub	sp, #8
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
 800824c:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800824e:	2200      	movs	r2, #0
 8008250:	6839      	ldr	r1, [r7, #0]
 8008252:	6878      	ldr	r0, [r7, #4]
 8008254:	f7ff ff8e 	bl	8008174 <pbuf_add_header_impl>
 8008258:	4603      	mov	r3, r0
}
 800825a:	4618      	mov	r0, r3
 800825c:	3708      	adds	r7, #8
 800825e:	46bd      	mov	sp, r7
 8008260:	bd80      	pop	{r7, pc}
	...

08008264 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b084      	sub	sp, #16
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
 800826c:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d106      	bne.n	8008282 <pbuf_remove_header+0x1e>
 8008274:	4b20      	ldr	r3, [pc, #128]	; (80082f8 <pbuf_remove_header+0x94>)
 8008276:	f240 224b 	movw	r2, #587	; 0x24b
 800827a:	4920      	ldr	r1, [pc, #128]	; (80082fc <pbuf_remove_header+0x98>)
 800827c:	4820      	ldr	r0, [pc, #128]	; (8008300 <pbuf_remove_header+0x9c>)
 800827e:	f009 fa3f 	bl	8011700 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d003      	beq.n	8008290 <pbuf_remove_header+0x2c>
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800828e:	d301      	bcc.n	8008294 <pbuf_remove_header+0x30>
    return 1;
 8008290:	2301      	movs	r3, #1
 8008292:	e02c      	b.n	80082ee <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d101      	bne.n	800829e <pbuf_remove_header+0x3a>
    return 0;
 800829a:	2300      	movs	r3, #0
 800829c:	e027      	b.n	80082ee <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	895b      	ldrh	r3, [r3, #10]
 80082a6:	89fa      	ldrh	r2, [r7, #14]
 80082a8:	429a      	cmp	r2, r3
 80082aa:	d908      	bls.n	80082be <pbuf_remove_header+0x5a>
 80082ac:	4b12      	ldr	r3, [pc, #72]	; (80082f8 <pbuf_remove_header+0x94>)
 80082ae:	f240 2255 	movw	r2, #597	; 0x255
 80082b2:	4914      	ldr	r1, [pc, #80]	; (8008304 <pbuf_remove_header+0xa0>)
 80082b4:	4812      	ldr	r0, [pc, #72]	; (8008300 <pbuf_remove_header+0x9c>)
 80082b6:	f009 fa23 	bl	8011700 <iprintf>
 80082ba:	2301      	movs	r3, #1
 80082bc:	e017      	b.n	80082ee <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	685b      	ldr	r3, [r3, #4]
 80082c2:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	685a      	ldr	r2, [r3, #4]
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	441a      	add	r2, r3
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	895a      	ldrh	r2, [r3, #10]
 80082d4:	89fb      	ldrh	r3, [r7, #14]
 80082d6:	1ad3      	subs	r3, r2, r3
 80082d8:	b29a      	uxth	r2, r3
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	891a      	ldrh	r2, [r3, #8]
 80082e2:	89fb      	ldrh	r3, [r7, #14]
 80082e4:	1ad3      	subs	r3, r2, r3
 80082e6:	b29a      	uxth	r2, r3
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 80082ec:	2300      	movs	r3, #0
}
 80082ee:	4618      	mov	r0, r3
 80082f0:	3710      	adds	r7, #16
 80082f2:	46bd      	mov	sp, r7
 80082f4:	bd80      	pop	{r7, pc}
 80082f6:	bf00      	nop
 80082f8:	080140a0 	.word	0x080140a0
 80082fc:	08014204 	.word	0x08014204
 8008300:	08014100 	.word	0x08014100
 8008304:	08014210 	.word	0x08014210

08008308 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b082      	sub	sp, #8
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
 8008310:	460b      	mov	r3, r1
 8008312:	807b      	strh	r3, [r7, #2]
 8008314:	4613      	mov	r3, r2
 8008316:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8008318:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800831c:	2b00      	cmp	r3, #0
 800831e:	da08      	bge.n	8008332 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8008320:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008324:	425b      	negs	r3, r3
 8008326:	4619      	mov	r1, r3
 8008328:	6878      	ldr	r0, [r7, #4]
 800832a:	f7ff ff9b 	bl	8008264 <pbuf_remove_header>
 800832e:	4603      	mov	r3, r0
 8008330:	e007      	b.n	8008342 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8008332:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008336:	787a      	ldrb	r2, [r7, #1]
 8008338:	4619      	mov	r1, r3
 800833a:	6878      	ldr	r0, [r7, #4]
 800833c:	f7ff ff1a 	bl	8008174 <pbuf_add_header_impl>
 8008340:	4603      	mov	r3, r0
  }
}
 8008342:	4618      	mov	r0, r3
 8008344:	3708      	adds	r7, #8
 8008346:	46bd      	mov	sp, r7
 8008348:	bd80      	pop	{r7, pc}

0800834a <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800834a:	b580      	push	{r7, lr}
 800834c:	b082      	sub	sp, #8
 800834e:	af00      	add	r7, sp, #0
 8008350:	6078      	str	r0, [r7, #4]
 8008352:	460b      	mov	r3, r1
 8008354:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8008356:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800835a:	2201      	movs	r2, #1
 800835c:	4619      	mov	r1, r3
 800835e:	6878      	ldr	r0, [r7, #4]
 8008360:	f7ff ffd2 	bl	8008308 <pbuf_header_impl>
 8008364:	4603      	mov	r3, r0
}
 8008366:	4618      	mov	r0, r3
 8008368:	3708      	adds	r7, #8
 800836a:	46bd      	mov	sp, r7
 800836c:	bd80      	pop	{r7, pc}
	...

08008370 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b086      	sub	sp, #24
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d10b      	bne.n	8008396 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d106      	bne.n	8008392 <pbuf_free+0x22>
 8008384:	4b38      	ldr	r3, [pc, #224]	; (8008468 <pbuf_free+0xf8>)
 8008386:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800838a:	4938      	ldr	r1, [pc, #224]	; (800846c <pbuf_free+0xfc>)
 800838c:	4838      	ldr	r0, [pc, #224]	; (8008470 <pbuf_free+0x100>)
 800838e:	f009 f9b7 	bl	8011700 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8008392:	2300      	movs	r3, #0
 8008394:	e063      	b.n	800845e <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8008396:	2300      	movs	r3, #0
 8008398:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800839a:	e05c      	b.n	8008456 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	7b9b      	ldrb	r3, [r3, #14]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d106      	bne.n	80083b2 <pbuf_free+0x42>
 80083a4:	4b30      	ldr	r3, [pc, #192]	; (8008468 <pbuf_free+0xf8>)
 80083a6:	f240 22f1 	movw	r2, #753	; 0x2f1
 80083aa:	4932      	ldr	r1, [pc, #200]	; (8008474 <pbuf_free+0x104>)
 80083ac:	4830      	ldr	r0, [pc, #192]	; (8008470 <pbuf_free+0x100>)
 80083ae:	f009 f9a7 	bl	8011700 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	7b9b      	ldrb	r3, [r3, #14]
 80083b6:	3b01      	subs	r3, #1
 80083b8:	b2da      	uxtb	r2, r3
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	739a      	strb	r2, [r3, #14]
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	7b9b      	ldrb	r3, [r3, #14]
 80083c2:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 80083c4:	7dbb      	ldrb	r3, [r7, #22]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d143      	bne.n	8008452 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	7b1b      	ldrb	r3, [r3, #12]
 80083d4:	f003 030f 	and.w	r3, r3, #15
 80083d8:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	7b5b      	ldrb	r3, [r3, #13]
 80083de:	f003 0302 	and.w	r3, r3, #2
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d011      	beq.n	800840a <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80083ea:	68bb      	ldr	r3, [r7, #8]
 80083ec:	691b      	ldr	r3, [r3, #16]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d106      	bne.n	8008400 <pbuf_free+0x90>
 80083f2:	4b1d      	ldr	r3, [pc, #116]	; (8008468 <pbuf_free+0xf8>)
 80083f4:	f240 22ff 	movw	r2, #767	; 0x2ff
 80083f8:	491f      	ldr	r1, [pc, #124]	; (8008478 <pbuf_free+0x108>)
 80083fa:	481d      	ldr	r0, [pc, #116]	; (8008470 <pbuf_free+0x100>)
 80083fc:	f009 f980 	bl	8011700 <iprintf>
        pc->custom_free_function(p);
 8008400:	68bb      	ldr	r3, [r7, #8]
 8008402:	691b      	ldr	r3, [r3, #16]
 8008404:	6878      	ldr	r0, [r7, #4]
 8008406:	4798      	blx	r3
 8008408:	e01d      	b.n	8008446 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800840a:	7bfb      	ldrb	r3, [r7, #15]
 800840c:	2b02      	cmp	r3, #2
 800840e:	d104      	bne.n	800841a <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8008410:	6879      	ldr	r1, [r7, #4]
 8008412:	2008      	movs	r0, #8
 8008414:	f7ff f99a 	bl	800774c <memp_free>
 8008418:	e015      	b.n	8008446 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800841a:	7bfb      	ldrb	r3, [r7, #15]
 800841c:	2b01      	cmp	r3, #1
 800841e:	d104      	bne.n	800842a <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8008420:	6879      	ldr	r1, [r7, #4]
 8008422:	2007      	movs	r0, #7
 8008424:	f7ff f992 	bl	800774c <memp_free>
 8008428:	e00d      	b.n	8008446 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800842a:	7bfb      	ldrb	r3, [r7, #15]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d103      	bne.n	8008438 <pbuf_free+0xc8>
          mem_free(p);
 8008430:	6878      	ldr	r0, [r7, #4]
 8008432:	f7fe fe6b 	bl	800710c <mem_free>
 8008436:	e006      	b.n	8008446 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8008438:	4b0b      	ldr	r3, [pc, #44]	; (8008468 <pbuf_free+0xf8>)
 800843a:	f240 320f 	movw	r2, #783	; 0x30f
 800843e:	490f      	ldr	r1, [pc, #60]	; (800847c <pbuf_free+0x10c>)
 8008440:	480b      	ldr	r0, [pc, #44]	; (8008470 <pbuf_free+0x100>)
 8008442:	f009 f95d 	bl	8011700 <iprintf>
        }
      }
      count++;
 8008446:	7dfb      	ldrb	r3, [r7, #23]
 8008448:	3301      	adds	r3, #1
 800844a:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800844c:	693b      	ldr	r3, [r7, #16]
 800844e:	607b      	str	r3, [r7, #4]
 8008450:	e001      	b.n	8008456 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8008452:	2300      	movs	r3, #0
 8008454:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d19f      	bne.n	800839c <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800845c:	7dfb      	ldrb	r3, [r7, #23]
}
 800845e:	4618      	mov	r0, r3
 8008460:	3718      	adds	r7, #24
 8008462:	46bd      	mov	sp, r7
 8008464:	bd80      	pop	{r7, pc}
 8008466:	bf00      	nop
 8008468:	080140a0 	.word	0x080140a0
 800846c:	08014204 	.word	0x08014204
 8008470:	08014100 	.word	0x08014100
 8008474:	08014230 	.word	0x08014230
 8008478:	08014248 	.word	0x08014248
 800847c:	0801426c 	.word	0x0801426c

08008480 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8008480:	b480      	push	{r7}
 8008482:	b085      	sub	sp, #20
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8008488:	2300      	movs	r3, #0
 800848a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800848c:	e005      	b.n	800849a <pbuf_clen+0x1a>
    ++len;
 800848e:	89fb      	ldrh	r3, [r7, #14]
 8008490:	3301      	adds	r3, #1
 8008492:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d1f6      	bne.n	800848e <pbuf_clen+0xe>
  }
  return len;
 80084a0:	89fb      	ldrh	r3, [r7, #14]
}
 80084a2:	4618      	mov	r0, r3
 80084a4:	3714      	adds	r7, #20
 80084a6:	46bd      	mov	sp, r7
 80084a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ac:	4770      	bx	lr
	...

080084b0 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b082      	sub	sp, #8
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d010      	beq.n	80084e0 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	7b9b      	ldrb	r3, [r3, #14]
 80084c2:	3301      	adds	r3, #1
 80084c4:	b2da      	uxtb	r2, r3
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	7b9b      	ldrb	r3, [r3, #14]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d106      	bne.n	80084e0 <pbuf_ref+0x30>
 80084d2:	4b05      	ldr	r3, [pc, #20]	; (80084e8 <pbuf_ref+0x38>)
 80084d4:	f240 3242 	movw	r2, #834	; 0x342
 80084d8:	4904      	ldr	r1, [pc, #16]	; (80084ec <pbuf_ref+0x3c>)
 80084da:	4805      	ldr	r0, [pc, #20]	; (80084f0 <pbuf_ref+0x40>)
 80084dc:	f009 f910 	bl	8011700 <iprintf>
  }
}
 80084e0:	bf00      	nop
 80084e2:	3708      	adds	r7, #8
 80084e4:	46bd      	mov	sp, r7
 80084e6:	bd80      	pop	{r7, pc}
 80084e8:	080140a0 	.word	0x080140a0
 80084ec:	08014280 	.word	0x08014280
 80084f0:	08014100 	.word	0x08014100

080084f4 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b084      	sub	sp, #16
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
 80084fc:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d002      	beq.n	800850a <pbuf_cat+0x16>
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d107      	bne.n	800851a <pbuf_cat+0x26>
 800850a:	4b20      	ldr	r3, [pc, #128]	; (800858c <pbuf_cat+0x98>)
 800850c:	f240 3259 	movw	r2, #857	; 0x359
 8008510:	491f      	ldr	r1, [pc, #124]	; (8008590 <pbuf_cat+0x9c>)
 8008512:	4820      	ldr	r0, [pc, #128]	; (8008594 <pbuf_cat+0xa0>)
 8008514:	f009 f8f4 	bl	8011700 <iprintf>
 8008518:	e034      	b.n	8008584 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	60fb      	str	r3, [r7, #12]
 800851e:	e00a      	b.n	8008536 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	891a      	ldrh	r2, [r3, #8]
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	891b      	ldrh	r3, [r3, #8]
 8008528:	4413      	add	r3, r2
 800852a:	b29a      	uxth	r2, r3
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	60fb      	str	r3, [r7, #12]
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d1f0      	bne.n	8008520 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	891a      	ldrh	r2, [r3, #8]
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	895b      	ldrh	r3, [r3, #10]
 8008546:	429a      	cmp	r2, r3
 8008548:	d006      	beq.n	8008558 <pbuf_cat+0x64>
 800854a:	4b10      	ldr	r3, [pc, #64]	; (800858c <pbuf_cat+0x98>)
 800854c:	f240 3262 	movw	r2, #866	; 0x362
 8008550:	4911      	ldr	r1, [pc, #68]	; (8008598 <pbuf_cat+0xa4>)
 8008552:	4810      	ldr	r0, [pc, #64]	; (8008594 <pbuf_cat+0xa0>)
 8008554:	f009 f8d4 	bl	8011700 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d006      	beq.n	800856e <pbuf_cat+0x7a>
 8008560:	4b0a      	ldr	r3, [pc, #40]	; (800858c <pbuf_cat+0x98>)
 8008562:	f240 3263 	movw	r2, #867	; 0x363
 8008566:	490d      	ldr	r1, [pc, #52]	; (800859c <pbuf_cat+0xa8>)
 8008568:	480a      	ldr	r0, [pc, #40]	; (8008594 <pbuf_cat+0xa0>)
 800856a:	f009 f8c9 	bl	8011700 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	891a      	ldrh	r2, [r3, #8]
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	891b      	ldrh	r3, [r3, #8]
 8008576:	4413      	add	r3, r2
 8008578:	b29a      	uxth	r2, r3
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	683a      	ldr	r2, [r7, #0]
 8008582:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8008584:	3710      	adds	r7, #16
 8008586:	46bd      	mov	sp, r7
 8008588:	bd80      	pop	{r7, pc}
 800858a:	bf00      	nop
 800858c:	080140a0 	.word	0x080140a0
 8008590:	08014294 	.word	0x08014294
 8008594:	08014100 	.word	0x08014100
 8008598:	080142cc 	.word	0x080142cc
 800859c:	080142fc 	.word	0x080142fc

080085a0 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b086      	sub	sp, #24
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
 80085a8:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 80085aa:	2300      	movs	r3, #0
 80085ac:	617b      	str	r3, [r7, #20]
 80085ae:	2300      	movs	r3, #0
 80085b0:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d008      	beq.n	80085ca <pbuf_copy+0x2a>
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d005      	beq.n	80085ca <pbuf_copy+0x2a>
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	891a      	ldrh	r2, [r3, #8]
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	891b      	ldrh	r3, [r3, #8]
 80085c6:	429a      	cmp	r2, r3
 80085c8:	d209      	bcs.n	80085de <pbuf_copy+0x3e>
 80085ca:	4b57      	ldr	r3, [pc, #348]	; (8008728 <pbuf_copy+0x188>)
 80085cc:	f240 32c9 	movw	r2, #969	; 0x3c9
 80085d0:	4956      	ldr	r1, [pc, #344]	; (800872c <pbuf_copy+0x18c>)
 80085d2:	4857      	ldr	r0, [pc, #348]	; (8008730 <pbuf_copy+0x190>)
 80085d4:	f009 f894 	bl	8011700 <iprintf>
 80085d8:	f06f 030f 	mvn.w	r3, #15
 80085dc:	e09f      	b.n	800871e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	895b      	ldrh	r3, [r3, #10]
 80085e2:	461a      	mov	r2, r3
 80085e4:	697b      	ldr	r3, [r7, #20]
 80085e6:	1ad2      	subs	r2, r2, r3
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	895b      	ldrh	r3, [r3, #10]
 80085ec:	4619      	mov	r1, r3
 80085ee:	693b      	ldr	r3, [r7, #16]
 80085f0:	1acb      	subs	r3, r1, r3
 80085f2:	429a      	cmp	r2, r3
 80085f4:	d306      	bcc.n	8008604 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	895b      	ldrh	r3, [r3, #10]
 80085fa:	461a      	mov	r2, r3
 80085fc:	693b      	ldr	r3, [r7, #16]
 80085fe:	1ad3      	subs	r3, r2, r3
 8008600:	60fb      	str	r3, [r7, #12]
 8008602:	e005      	b.n	8008610 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	895b      	ldrh	r3, [r3, #10]
 8008608:	461a      	mov	r2, r3
 800860a:	697b      	ldr	r3, [r7, #20]
 800860c:	1ad3      	subs	r3, r2, r3
 800860e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	685a      	ldr	r2, [r3, #4]
 8008614:	697b      	ldr	r3, [r7, #20]
 8008616:	18d0      	adds	r0, r2, r3
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	685a      	ldr	r2, [r3, #4]
 800861c:	693b      	ldr	r3, [r7, #16]
 800861e:	4413      	add	r3, r2
 8008620:	68fa      	ldr	r2, [r7, #12]
 8008622:	4619      	mov	r1, r3
 8008624:	f008 ff92 	bl	801154c <memcpy>
    offset_to += len;
 8008628:	697a      	ldr	r2, [r7, #20]
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	4413      	add	r3, r2
 800862e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8008630:	693a      	ldr	r2, [r7, #16]
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	4413      	add	r3, r2
 8008636:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	895b      	ldrh	r3, [r3, #10]
 800863c:	461a      	mov	r2, r3
 800863e:	697b      	ldr	r3, [r7, #20]
 8008640:	4293      	cmp	r3, r2
 8008642:	d906      	bls.n	8008652 <pbuf_copy+0xb2>
 8008644:	4b38      	ldr	r3, [pc, #224]	; (8008728 <pbuf_copy+0x188>)
 8008646:	f240 32d9 	movw	r2, #985	; 0x3d9
 800864a:	493a      	ldr	r1, [pc, #232]	; (8008734 <pbuf_copy+0x194>)
 800864c:	4838      	ldr	r0, [pc, #224]	; (8008730 <pbuf_copy+0x190>)
 800864e:	f009 f857 	bl	8011700 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	895b      	ldrh	r3, [r3, #10]
 8008656:	461a      	mov	r2, r3
 8008658:	693b      	ldr	r3, [r7, #16]
 800865a:	4293      	cmp	r3, r2
 800865c:	d906      	bls.n	800866c <pbuf_copy+0xcc>
 800865e:	4b32      	ldr	r3, [pc, #200]	; (8008728 <pbuf_copy+0x188>)
 8008660:	f240 32da 	movw	r2, #986	; 0x3da
 8008664:	4934      	ldr	r1, [pc, #208]	; (8008738 <pbuf_copy+0x198>)
 8008666:	4832      	ldr	r0, [pc, #200]	; (8008730 <pbuf_copy+0x190>)
 8008668:	f009 f84a 	bl	8011700 <iprintf>
    if (offset_from >= p_from->len) {
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	895b      	ldrh	r3, [r3, #10]
 8008670:	461a      	mov	r2, r3
 8008672:	693b      	ldr	r3, [r7, #16]
 8008674:	4293      	cmp	r3, r2
 8008676:	d304      	bcc.n	8008682 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8008678:	2300      	movs	r3, #0
 800867a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	895b      	ldrh	r3, [r3, #10]
 8008686:	461a      	mov	r2, r3
 8008688:	697b      	ldr	r3, [r7, #20]
 800868a:	4293      	cmp	r3, r2
 800868c:	d114      	bne.n	80086b8 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800868e:	2300      	movs	r3, #0
 8008690:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d10c      	bne.n	80086b8 <pbuf_copy+0x118>
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d009      	beq.n	80086b8 <pbuf_copy+0x118>
 80086a4:	4b20      	ldr	r3, [pc, #128]	; (8008728 <pbuf_copy+0x188>)
 80086a6:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 80086aa:	4924      	ldr	r1, [pc, #144]	; (800873c <pbuf_copy+0x19c>)
 80086ac:	4820      	ldr	r0, [pc, #128]	; (8008730 <pbuf_copy+0x190>)
 80086ae:	f009 f827 	bl	8011700 <iprintf>
 80086b2:	f06f 030f 	mvn.w	r3, #15
 80086b6:	e032      	b.n	800871e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d013      	beq.n	80086e6 <pbuf_copy+0x146>
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	895a      	ldrh	r2, [r3, #10]
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	891b      	ldrh	r3, [r3, #8]
 80086c6:	429a      	cmp	r2, r3
 80086c8:	d10d      	bne.n	80086e6 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d009      	beq.n	80086e6 <pbuf_copy+0x146>
 80086d2:	4b15      	ldr	r3, [pc, #84]	; (8008728 <pbuf_copy+0x188>)
 80086d4:	f240 32e9 	movw	r2, #1001	; 0x3e9
 80086d8:	4919      	ldr	r1, [pc, #100]	; (8008740 <pbuf_copy+0x1a0>)
 80086da:	4815      	ldr	r0, [pc, #84]	; (8008730 <pbuf_copy+0x190>)
 80086dc:	f009 f810 	bl	8011700 <iprintf>
 80086e0:	f06f 0305 	mvn.w	r3, #5
 80086e4:	e01b      	b.n	800871e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d013      	beq.n	8008714 <pbuf_copy+0x174>
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	895a      	ldrh	r2, [r3, #10]
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	891b      	ldrh	r3, [r3, #8]
 80086f4:	429a      	cmp	r2, r3
 80086f6:	d10d      	bne.n	8008714 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d009      	beq.n	8008714 <pbuf_copy+0x174>
 8008700:	4b09      	ldr	r3, [pc, #36]	; (8008728 <pbuf_copy+0x188>)
 8008702:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8008706:	490e      	ldr	r1, [pc, #56]	; (8008740 <pbuf_copy+0x1a0>)
 8008708:	4809      	ldr	r0, [pc, #36]	; (8008730 <pbuf_copy+0x190>)
 800870a:	f008 fff9 	bl	8011700 <iprintf>
 800870e:	f06f 0305 	mvn.w	r3, #5
 8008712:	e004      	b.n	800871e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8008714:	683b      	ldr	r3, [r7, #0]
 8008716:	2b00      	cmp	r3, #0
 8008718:	f47f af61 	bne.w	80085de <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800871c:	2300      	movs	r3, #0
}
 800871e:	4618      	mov	r0, r3
 8008720:	3718      	adds	r7, #24
 8008722:	46bd      	mov	sp, r7
 8008724:	bd80      	pop	{r7, pc}
 8008726:	bf00      	nop
 8008728:	080140a0 	.word	0x080140a0
 800872c:	08014348 	.word	0x08014348
 8008730:	08014100 	.word	0x08014100
 8008734:	08014378 	.word	0x08014378
 8008738:	08014390 	.word	0x08014390
 800873c:	080143ac 	.word	0x080143ac
 8008740:	080143bc 	.word	0x080143bc

08008744 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8008744:	b580      	push	{r7, lr}
 8008746:	b088      	sub	sp, #32
 8008748:	af00      	add	r7, sp, #0
 800874a:	60f8      	str	r0, [r7, #12]
 800874c:	60b9      	str	r1, [r7, #8]
 800874e:	4611      	mov	r1, r2
 8008750:	461a      	mov	r2, r3
 8008752:	460b      	mov	r3, r1
 8008754:	80fb      	strh	r3, [r7, #6]
 8008756:	4613      	mov	r3, r2
 8008758:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800875a:	2300      	movs	r3, #0
 800875c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800875e:	2300      	movs	r3, #0
 8008760:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d108      	bne.n	800877a <pbuf_copy_partial+0x36>
 8008768:	4b2b      	ldr	r3, [pc, #172]	; (8008818 <pbuf_copy_partial+0xd4>)
 800876a:	f240 420a 	movw	r2, #1034	; 0x40a
 800876e:	492b      	ldr	r1, [pc, #172]	; (800881c <pbuf_copy_partial+0xd8>)
 8008770:	482b      	ldr	r0, [pc, #172]	; (8008820 <pbuf_copy_partial+0xdc>)
 8008772:	f008 ffc5 	bl	8011700 <iprintf>
 8008776:	2300      	movs	r3, #0
 8008778:	e04a      	b.n	8008810 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800877a:	68bb      	ldr	r3, [r7, #8]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d108      	bne.n	8008792 <pbuf_copy_partial+0x4e>
 8008780:	4b25      	ldr	r3, [pc, #148]	; (8008818 <pbuf_copy_partial+0xd4>)
 8008782:	f240 420b 	movw	r2, #1035	; 0x40b
 8008786:	4927      	ldr	r1, [pc, #156]	; (8008824 <pbuf_copy_partial+0xe0>)
 8008788:	4825      	ldr	r0, [pc, #148]	; (8008820 <pbuf_copy_partial+0xdc>)
 800878a:	f008 ffb9 	bl	8011700 <iprintf>
 800878e:	2300      	movs	r3, #0
 8008790:	e03e      	b.n	8008810 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	61fb      	str	r3, [r7, #28]
 8008796:	e034      	b.n	8008802 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8008798:	88bb      	ldrh	r3, [r7, #4]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d00a      	beq.n	80087b4 <pbuf_copy_partial+0x70>
 800879e:	69fb      	ldr	r3, [r7, #28]
 80087a0:	895b      	ldrh	r3, [r3, #10]
 80087a2:	88ba      	ldrh	r2, [r7, #4]
 80087a4:	429a      	cmp	r2, r3
 80087a6:	d305      	bcc.n	80087b4 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 80087a8:	69fb      	ldr	r3, [r7, #28]
 80087aa:	895b      	ldrh	r3, [r3, #10]
 80087ac:	88ba      	ldrh	r2, [r7, #4]
 80087ae:	1ad3      	subs	r3, r2, r3
 80087b0:	80bb      	strh	r3, [r7, #4]
 80087b2:	e023      	b.n	80087fc <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 80087b4:	69fb      	ldr	r3, [r7, #28]
 80087b6:	895a      	ldrh	r2, [r3, #10]
 80087b8:	88bb      	ldrh	r3, [r7, #4]
 80087ba:	1ad3      	subs	r3, r2, r3
 80087bc:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 80087be:	8b3a      	ldrh	r2, [r7, #24]
 80087c0:	88fb      	ldrh	r3, [r7, #6]
 80087c2:	429a      	cmp	r2, r3
 80087c4:	d901      	bls.n	80087ca <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 80087c6:	88fb      	ldrh	r3, [r7, #6]
 80087c8:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80087ca:	8b7b      	ldrh	r3, [r7, #26]
 80087cc:	68ba      	ldr	r2, [r7, #8]
 80087ce:	18d0      	adds	r0, r2, r3
 80087d0:	69fb      	ldr	r3, [r7, #28]
 80087d2:	685a      	ldr	r2, [r3, #4]
 80087d4:	88bb      	ldrh	r3, [r7, #4]
 80087d6:	4413      	add	r3, r2
 80087d8:	8b3a      	ldrh	r2, [r7, #24]
 80087da:	4619      	mov	r1, r3
 80087dc:	f008 feb6 	bl	801154c <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80087e0:	8afa      	ldrh	r2, [r7, #22]
 80087e2:	8b3b      	ldrh	r3, [r7, #24]
 80087e4:	4413      	add	r3, r2
 80087e6:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 80087e8:	8b7a      	ldrh	r2, [r7, #26]
 80087ea:	8b3b      	ldrh	r3, [r7, #24]
 80087ec:	4413      	add	r3, r2
 80087ee:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 80087f0:	88fa      	ldrh	r2, [r7, #6]
 80087f2:	8b3b      	ldrh	r3, [r7, #24]
 80087f4:	1ad3      	subs	r3, r2, r3
 80087f6:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80087f8:	2300      	movs	r3, #0
 80087fa:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80087fc:	69fb      	ldr	r3, [r7, #28]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	61fb      	str	r3, [r7, #28]
 8008802:	88fb      	ldrh	r3, [r7, #6]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d002      	beq.n	800880e <pbuf_copy_partial+0xca>
 8008808:	69fb      	ldr	r3, [r7, #28]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d1c4      	bne.n	8008798 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800880e:	8afb      	ldrh	r3, [r7, #22]
}
 8008810:	4618      	mov	r0, r3
 8008812:	3720      	adds	r7, #32
 8008814:	46bd      	mov	sp, r7
 8008816:	bd80      	pop	{r7, pc}
 8008818:	080140a0 	.word	0x080140a0
 800881c:	080143e8 	.word	0x080143e8
 8008820:	08014100 	.word	0x08014100
 8008824:	08014408 	.word	0x08014408

08008828 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b084      	sub	sp, #16
 800882c:	af00      	add	r7, sp, #0
 800882e:	4603      	mov	r3, r0
 8008830:	603a      	str	r2, [r7, #0]
 8008832:	71fb      	strb	r3, [r7, #7]
 8008834:	460b      	mov	r3, r1
 8008836:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	8919      	ldrh	r1, [r3, #8]
 800883c:	88ba      	ldrh	r2, [r7, #4]
 800883e:	79fb      	ldrb	r3, [r7, #7]
 8008840:	4618      	mov	r0, r3
 8008842:	f7ff fab1 	bl	8007da8 <pbuf_alloc>
 8008846:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d101      	bne.n	8008852 <pbuf_clone+0x2a>
    return NULL;
 800884e:	2300      	movs	r3, #0
 8008850:	e011      	b.n	8008876 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8008852:	6839      	ldr	r1, [r7, #0]
 8008854:	68f8      	ldr	r0, [r7, #12]
 8008856:	f7ff fea3 	bl	80085a0 <pbuf_copy>
 800885a:	4603      	mov	r3, r0
 800885c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800885e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d006      	beq.n	8008874 <pbuf_clone+0x4c>
 8008866:	4b06      	ldr	r3, [pc, #24]	; (8008880 <pbuf_clone+0x58>)
 8008868:	f240 5224 	movw	r2, #1316	; 0x524
 800886c:	4905      	ldr	r1, [pc, #20]	; (8008884 <pbuf_clone+0x5c>)
 800886e:	4806      	ldr	r0, [pc, #24]	; (8008888 <pbuf_clone+0x60>)
 8008870:	f008 ff46 	bl	8011700 <iprintf>
  return q;
 8008874:	68fb      	ldr	r3, [r7, #12]
}
 8008876:	4618      	mov	r0, r3
 8008878:	3710      	adds	r7, #16
 800887a:	46bd      	mov	sp, r7
 800887c:	bd80      	pop	{r7, pc}
 800887e:	bf00      	nop
 8008880:	080140a0 	.word	0x080140a0
 8008884:	08014514 	.word	0x08014514
 8008888:	08014100 	.word	0x08014100

0800888c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800888c:	b580      	push	{r7, lr}
 800888e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8008890:	f008 ffc4 	bl	801181c <rand>
 8008894:	4603      	mov	r3, r0
 8008896:	b29b      	uxth	r3, r3
 8008898:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800889c:	b29b      	uxth	r3, r3
 800889e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80088a2:	b29a      	uxth	r2, r3
 80088a4:	4b01      	ldr	r3, [pc, #4]	; (80088ac <tcp_init+0x20>)
 80088a6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80088a8:	bf00      	nop
 80088aa:	bd80      	pop	{r7, pc}
 80088ac:	2000001e 	.word	0x2000001e

080088b0 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b082      	sub	sp, #8
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	7d1b      	ldrb	r3, [r3, #20]
 80088bc:	2b01      	cmp	r3, #1
 80088be:	d105      	bne.n	80088cc <tcp_free+0x1c>
 80088c0:	4b06      	ldr	r3, [pc, #24]	; (80088dc <tcp_free+0x2c>)
 80088c2:	22d4      	movs	r2, #212	; 0xd4
 80088c4:	4906      	ldr	r1, [pc, #24]	; (80088e0 <tcp_free+0x30>)
 80088c6:	4807      	ldr	r0, [pc, #28]	; (80088e4 <tcp_free+0x34>)
 80088c8:	f008 ff1a 	bl	8011700 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 80088cc:	6879      	ldr	r1, [r7, #4]
 80088ce:	2001      	movs	r0, #1
 80088d0:	f7fe ff3c 	bl	800774c <memp_free>
}
 80088d4:	bf00      	nop
 80088d6:	3708      	adds	r7, #8
 80088d8:	46bd      	mov	sp, r7
 80088da:	bd80      	pop	{r7, pc}
 80088dc:	080145a0 	.word	0x080145a0
 80088e0:	080145d0 	.word	0x080145d0
 80088e4:	080145e4 	.word	0x080145e4

080088e8 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 80088e8:	b580      	push	{r7, lr}
 80088ea:	b082      	sub	sp, #8
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	7d1b      	ldrb	r3, [r3, #20]
 80088f4:	2b01      	cmp	r3, #1
 80088f6:	d105      	bne.n	8008904 <tcp_free_listen+0x1c>
 80088f8:	4b06      	ldr	r3, [pc, #24]	; (8008914 <tcp_free_listen+0x2c>)
 80088fa:	22df      	movs	r2, #223	; 0xdf
 80088fc:	4906      	ldr	r1, [pc, #24]	; (8008918 <tcp_free_listen+0x30>)
 80088fe:	4807      	ldr	r0, [pc, #28]	; (800891c <tcp_free_listen+0x34>)
 8008900:	f008 fefe 	bl	8011700 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8008904:	6879      	ldr	r1, [r7, #4]
 8008906:	2002      	movs	r0, #2
 8008908:	f7fe ff20 	bl	800774c <memp_free>
}
 800890c:	bf00      	nop
 800890e:	3708      	adds	r7, #8
 8008910:	46bd      	mov	sp, r7
 8008912:	bd80      	pop	{r7, pc}
 8008914:	080145a0 	.word	0x080145a0
 8008918:	0801460c 	.word	0x0801460c
 800891c:	080145e4 	.word	0x080145e4

08008920 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8008920:	b580      	push	{r7, lr}
 8008922:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8008924:	f001 f85c 	bl	80099e0 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8008928:	4b07      	ldr	r3, [pc, #28]	; (8008948 <tcp_tmr+0x28>)
 800892a:	781b      	ldrb	r3, [r3, #0]
 800892c:	3301      	adds	r3, #1
 800892e:	b2da      	uxtb	r2, r3
 8008930:	4b05      	ldr	r3, [pc, #20]	; (8008948 <tcp_tmr+0x28>)
 8008932:	701a      	strb	r2, [r3, #0]
 8008934:	4b04      	ldr	r3, [pc, #16]	; (8008948 <tcp_tmr+0x28>)
 8008936:	781b      	ldrb	r3, [r3, #0]
 8008938:	f003 0301 	and.w	r3, r3, #1
 800893c:	2b00      	cmp	r3, #0
 800893e:	d001      	beq.n	8008944 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8008940:	f000 fd0e 	bl	8009360 <tcp_slowtmr>
  }
}
 8008944:	bf00      	nop
 8008946:	bd80      	pop	{r7, pc}
 8008948:	20000549 	.word	0x20000549

0800894c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b084      	sub	sp, #16
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
 8008954:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8008956:	683b      	ldr	r3, [r7, #0]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d105      	bne.n	8008968 <tcp_remove_listener+0x1c>
 800895c:	4b0d      	ldr	r3, [pc, #52]	; (8008994 <tcp_remove_listener+0x48>)
 800895e:	22ff      	movs	r2, #255	; 0xff
 8008960:	490d      	ldr	r1, [pc, #52]	; (8008998 <tcp_remove_listener+0x4c>)
 8008962:	480e      	ldr	r0, [pc, #56]	; (800899c <tcp_remove_listener+0x50>)
 8008964:	f008 fecc 	bl	8011700 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	60fb      	str	r3, [r7, #12]
 800896c:	e00a      	b.n	8008984 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008972:	683a      	ldr	r2, [r7, #0]
 8008974:	429a      	cmp	r2, r3
 8008976:	d102      	bne.n	800897e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	2200      	movs	r2, #0
 800897c:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	68db      	ldr	r3, [r3, #12]
 8008982:	60fb      	str	r3, [r7, #12]
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d1f1      	bne.n	800896e <tcp_remove_listener+0x22>
    }
  }
}
 800898a:	bf00      	nop
 800898c:	bf00      	nop
 800898e:	3710      	adds	r7, #16
 8008990:	46bd      	mov	sp, r7
 8008992:	bd80      	pop	{r7, pc}
 8008994:	080145a0 	.word	0x080145a0
 8008998:	08014628 	.word	0x08014628
 800899c:	080145e4 	.word	0x080145e4

080089a0 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b084      	sub	sp, #16
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d106      	bne.n	80089bc <tcp_listen_closed+0x1c>
 80089ae:	4b14      	ldr	r3, [pc, #80]	; (8008a00 <tcp_listen_closed+0x60>)
 80089b0:	f240 1211 	movw	r2, #273	; 0x111
 80089b4:	4913      	ldr	r1, [pc, #76]	; (8008a04 <tcp_listen_closed+0x64>)
 80089b6:	4814      	ldr	r0, [pc, #80]	; (8008a08 <tcp_listen_closed+0x68>)
 80089b8:	f008 fea2 	bl	8011700 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	7d1b      	ldrb	r3, [r3, #20]
 80089c0:	2b01      	cmp	r3, #1
 80089c2:	d006      	beq.n	80089d2 <tcp_listen_closed+0x32>
 80089c4:	4b0e      	ldr	r3, [pc, #56]	; (8008a00 <tcp_listen_closed+0x60>)
 80089c6:	f44f 7289 	mov.w	r2, #274	; 0x112
 80089ca:	4910      	ldr	r1, [pc, #64]	; (8008a0c <tcp_listen_closed+0x6c>)
 80089cc:	480e      	ldr	r0, [pc, #56]	; (8008a08 <tcp_listen_closed+0x68>)
 80089ce:	f008 fe97 	bl	8011700 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80089d2:	2301      	movs	r3, #1
 80089d4:	60fb      	str	r3, [r7, #12]
 80089d6:	e00b      	b.n	80089f0 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 80089d8:	4a0d      	ldr	r2, [pc, #52]	; (8008a10 <tcp_listen_closed+0x70>)
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	6879      	ldr	r1, [r7, #4]
 80089e4:	4618      	mov	r0, r3
 80089e6:	f7ff ffb1 	bl	800894c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	3301      	adds	r3, #1
 80089ee:	60fb      	str	r3, [r7, #12]
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	2b03      	cmp	r3, #3
 80089f4:	d9f0      	bls.n	80089d8 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 80089f6:	bf00      	nop
 80089f8:	bf00      	nop
 80089fa:	3710      	adds	r7, #16
 80089fc:	46bd      	mov	sp, r7
 80089fe:	bd80      	pop	{r7, pc}
 8008a00:	080145a0 	.word	0x080145a0
 8008a04:	08014650 	.word	0x08014650
 8008a08:	080145e4 	.word	0x080145e4
 8008a0c:	0801465c 	.word	0x0801465c
 8008a10:	080177a8 	.word	0x080177a8

08008a14 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8008a14:	b5b0      	push	{r4, r5, r7, lr}
 8008a16:	b088      	sub	sp, #32
 8008a18:	af04      	add	r7, sp, #16
 8008a1a:	6078      	str	r0, [r7, #4]
 8008a1c:	460b      	mov	r3, r1
 8008a1e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d106      	bne.n	8008a34 <tcp_close_shutdown+0x20>
 8008a26:	4b63      	ldr	r3, [pc, #396]	; (8008bb4 <tcp_close_shutdown+0x1a0>)
 8008a28:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8008a2c:	4962      	ldr	r1, [pc, #392]	; (8008bb8 <tcp_close_shutdown+0x1a4>)
 8008a2e:	4863      	ldr	r0, [pc, #396]	; (8008bbc <tcp_close_shutdown+0x1a8>)
 8008a30:	f008 fe66 	bl	8011700 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8008a34:	78fb      	ldrb	r3, [r7, #3]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d066      	beq.n	8008b08 <tcp_close_shutdown+0xf4>
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	7d1b      	ldrb	r3, [r3, #20]
 8008a3e:	2b04      	cmp	r3, #4
 8008a40:	d003      	beq.n	8008a4a <tcp_close_shutdown+0x36>
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	7d1b      	ldrb	r3, [r3, #20]
 8008a46:	2b07      	cmp	r3, #7
 8008a48:	d15e      	bne.n	8008b08 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d104      	bne.n	8008a5c <tcp_close_shutdown+0x48>
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a56:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8008a5a:	d055      	beq.n	8008b08 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	8b5b      	ldrh	r3, [r3, #26]
 8008a60:	f003 0310 	and.w	r3, r3, #16
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d106      	bne.n	8008a76 <tcp_close_shutdown+0x62>
 8008a68:	4b52      	ldr	r3, [pc, #328]	; (8008bb4 <tcp_close_shutdown+0x1a0>)
 8008a6a:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8008a6e:	4954      	ldr	r1, [pc, #336]	; (8008bc0 <tcp_close_shutdown+0x1ac>)
 8008a70:	4852      	ldr	r0, [pc, #328]	; (8008bbc <tcp_close_shutdown+0x1a8>)
 8008a72:	f008 fe45 	bl	8011700 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8008a7e:	687d      	ldr	r5, [r7, #4]
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	3304      	adds	r3, #4
 8008a84:	687a      	ldr	r2, [r7, #4]
 8008a86:	8ad2      	ldrh	r2, [r2, #22]
 8008a88:	6879      	ldr	r1, [r7, #4]
 8008a8a:	8b09      	ldrh	r1, [r1, #24]
 8008a8c:	9102      	str	r1, [sp, #8]
 8008a8e:	9201      	str	r2, [sp, #4]
 8008a90:	9300      	str	r3, [sp, #0]
 8008a92:	462b      	mov	r3, r5
 8008a94:	4622      	mov	r2, r4
 8008a96:	4601      	mov	r1, r0
 8008a98:	6878      	ldr	r0, [r7, #4]
 8008a9a:	f005 fd8b 	bl	800e5b4 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8008a9e:	6878      	ldr	r0, [r7, #4]
 8008aa0:	f001 fb6c 	bl	800a17c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8008aa4:	4b47      	ldr	r3, [pc, #284]	; (8008bc4 <tcp_close_shutdown+0x1b0>)
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	687a      	ldr	r2, [r7, #4]
 8008aaa:	429a      	cmp	r2, r3
 8008aac:	d105      	bne.n	8008aba <tcp_close_shutdown+0xa6>
 8008aae:	4b45      	ldr	r3, [pc, #276]	; (8008bc4 <tcp_close_shutdown+0x1b0>)
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	68db      	ldr	r3, [r3, #12]
 8008ab4:	4a43      	ldr	r2, [pc, #268]	; (8008bc4 <tcp_close_shutdown+0x1b0>)
 8008ab6:	6013      	str	r3, [r2, #0]
 8008ab8:	e013      	b.n	8008ae2 <tcp_close_shutdown+0xce>
 8008aba:	4b42      	ldr	r3, [pc, #264]	; (8008bc4 <tcp_close_shutdown+0x1b0>)
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	60fb      	str	r3, [r7, #12]
 8008ac0:	e00c      	b.n	8008adc <tcp_close_shutdown+0xc8>
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	68db      	ldr	r3, [r3, #12]
 8008ac6:	687a      	ldr	r2, [r7, #4]
 8008ac8:	429a      	cmp	r2, r3
 8008aca:	d104      	bne.n	8008ad6 <tcp_close_shutdown+0xc2>
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	68da      	ldr	r2, [r3, #12]
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	60da      	str	r2, [r3, #12]
 8008ad4:	e005      	b.n	8008ae2 <tcp_close_shutdown+0xce>
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	68db      	ldr	r3, [r3, #12]
 8008ada:	60fb      	str	r3, [r7, #12]
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d1ef      	bne.n	8008ac2 <tcp_close_shutdown+0xae>
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	60da      	str	r2, [r3, #12]
 8008ae8:	4b37      	ldr	r3, [pc, #220]	; (8008bc8 <tcp_close_shutdown+0x1b4>)
 8008aea:	2201      	movs	r2, #1
 8008aec:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8008aee:	4b37      	ldr	r3, [pc, #220]	; (8008bcc <tcp_close_shutdown+0x1b8>)
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	687a      	ldr	r2, [r7, #4]
 8008af4:	429a      	cmp	r2, r3
 8008af6:	d102      	bne.n	8008afe <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8008af8:	f004 f800 	bl	800cafc <tcp_trigger_input_pcb_close>
 8008afc:	e002      	b.n	8008b04 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8008afe:	6878      	ldr	r0, [r7, #4]
 8008b00:	f7ff fed6 	bl	80088b0 <tcp_free>
      }
      return ERR_OK;
 8008b04:	2300      	movs	r3, #0
 8008b06:	e050      	b.n	8008baa <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	7d1b      	ldrb	r3, [r3, #20]
 8008b0c:	2b02      	cmp	r3, #2
 8008b0e:	d03b      	beq.n	8008b88 <tcp_close_shutdown+0x174>
 8008b10:	2b02      	cmp	r3, #2
 8008b12:	dc44      	bgt.n	8008b9e <tcp_close_shutdown+0x18a>
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d002      	beq.n	8008b1e <tcp_close_shutdown+0x10a>
 8008b18:	2b01      	cmp	r3, #1
 8008b1a:	d02a      	beq.n	8008b72 <tcp_close_shutdown+0x15e>
 8008b1c:	e03f      	b.n	8008b9e <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	8adb      	ldrh	r3, [r3, #22]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d021      	beq.n	8008b6a <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8008b26:	4b2a      	ldr	r3, [pc, #168]	; (8008bd0 <tcp_close_shutdown+0x1bc>)
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	687a      	ldr	r2, [r7, #4]
 8008b2c:	429a      	cmp	r2, r3
 8008b2e:	d105      	bne.n	8008b3c <tcp_close_shutdown+0x128>
 8008b30:	4b27      	ldr	r3, [pc, #156]	; (8008bd0 <tcp_close_shutdown+0x1bc>)
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	68db      	ldr	r3, [r3, #12]
 8008b36:	4a26      	ldr	r2, [pc, #152]	; (8008bd0 <tcp_close_shutdown+0x1bc>)
 8008b38:	6013      	str	r3, [r2, #0]
 8008b3a:	e013      	b.n	8008b64 <tcp_close_shutdown+0x150>
 8008b3c:	4b24      	ldr	r3, [pc, #144]	; (8008bd0 <tcp_close_shutdown+0x1bc>)
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	60bb      	str	r3, [r7, #8]
 8008b42:	e00c      	b.n	8008b5e <tcp_close_shutdown+0x14a>
 8008b44:	68bb      	ldr	r3, [r7, #8]
 8008b46:	68db      	ldr	r3, [r3, #12]
 8008b48:	687a      	ldr	r2, [r7, #4]
 8008b4a:	429a      	cmp	r2, r3
 8008b4c:	d104      	bne.n	8008b58 <tcp_close_shutdown+0x144>
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	68da      	ldr	r2, [r3, #12]
 8008b52:	68bb      	ldr	r3, [r7, #8]
 8008b54:	60da      	str	r2, [r3, #12]
 8008b56:	e005      	b.n	8008b64 <tcp_close_shutdown+0x150>
 8008b58:	68bb      	ldr	r3, [r7, #8]
 8008b5a:	68db      	ldr	r3, [r3, #12]
 8008b5c:	60bb      	str	r3, [r7, #8]
 8008b5e:	68bb      	ldr	r3, [r7, #8]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d1ef      	bne.n	8008b44 <tcp_close_shutdown+0x130>
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2200      	movs	r2, #0
 8008b68:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8008b6a:	6878      	ldr	r0, [r7, #4]
 8008b6c:	f7ff fea0 	bl	80088b0 <tcp_free>
      break;
 8008b70:	e01a      	b.n	8008ba8 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8008b72:	6878      	ldr	r0, [r7, #4]
 8008b74:	f7ff ff14 	bl	80089a0 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8008b78:	6879      	ldr	r1, [r7, #4]
 8008b7a:	4816      	ldr	r0, [pc, #88]	; (8008bd4 <tcp_close_shutdown+0x1c0>)
 8008b7c:	f001 fb4e 	bl	800a21c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8008b80:	6878      	ldr	r0, [r7, #4]
 8008b82:	f7ff feb1 	bl	80088e8 <tcp_free_listen>
      break;
 8008b86:	e00f      	b.n	8008ba8 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8008b88:	6879      	ldr	r1, [r7, #4]
 8008b8a:	480e      	ldr	r0, [pc, #56]	; (8008bc4 <tcp_close_shutdown+0x1b0>)
 8008b8c:	f001 fb46 	bl	800a21c <tcp_pcb_remove>
 8008b90:	4b0d      	ldr	r3, [pc, #52]	; (8008bc8 <tcp_close_shutdown+0x1b4>)
 8008b92:	2201      	movs	r2, #1
 8008b94:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8008b96:	6878      	ldr	r0, [r7, #4]
 8008b98:	f7ff fe8a 	bl	80088b0 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8008b9c:	e004      	b.n	8008ba8 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8008b9e:	6878      	ldr	r0, [r7, #4]
 8008ba0:	f000 f81a 	bl	8008bd8 <tcp_close_shutdown_fin>
 8008ba4:	4603      	mov	r3, r0
 8008ba6:	e000      	b.n	8008baa <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8008ba8:	2300      	movs	r3, #0
}
 8008baa:	4618      	mov	r0, r3
 8008bac:	3710      	adds	r7, #16
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	bdb0      	pop	{r4, r5, r7, pc}
 8008bb2:	bf00      	nop
 8008bb4:	080145a0 	.word	0x080145a0
 8008bb8:	08014674 	.word	0x08014674
 8008bbc:	080145e4 	.word	0x080145e4
 8008bc0:	08014694 	.word	0x08014694
 8008bc4:	2000d788 	.word	0x2000d788
 8008bc8:	2000d784 	.word	0x2000d784
 8008bcc:	2000d79c 	.word	0x2000d79c
 8008bd0:	2000d794 	.word	0x2000d794
 8008bd4:	2000d790 	.word	0x2000d790

08008bd8 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b084      	sub	sp, #16
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d106      	bne.n	8008bf4 <tcp_close_shutdown_fin+0x1c>
 8008be6:	4b2e      	ldr	r3, [pc, #184]	; (8008ca0 <tcp_close_shutdown_fin+0xc8>)
 8008be8:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8008bec:	492d      	ldr	r1, [pc, #180]	; (8008ca4 <tcp_close_shutdown_fin+0xcc>)
 8008bee:	482e      	ldr	r0, [pc, #184]	; (8008ca8 <tcp_close_shutdown_fin+0xd0>)
 8008bf0:	f008 fd86 	bl	8011700 <iprintf>

  switch (pcb->state) {
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	7d1b      	ldrb	r3, [r3, #20]
 8008bf8:	2b07      	cmp	r3, #7
 8008bfa:	d020      	beq.n	8008c3e <tcp_close_shutdown_fin+0x66>
 8008bfc:	2b07      	cmp	r3, #7
 8008bfe:	dc2b      	bgt.n	8008c58 <tcp_close_shutdown_fin+0x80>
 8008c00:	2b03      	cmp	r3, #3
 8008c02:	d002      	beq.n	8008c0a <tcp_close_shutdown_fin+0x32>
 8008c04:	2b04      	cmp	r3, #4
 8008c06:	d00d      	beq.n	8008c24 <tcp_close_shutdown_fin+0x4c>
 8008c08:	e026      	b.n	8008c58 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8008c0a:	6878      	ldr	r0, [r7, #4]
 8008c0c:	f004 fde0 	bl	800d7d0 <tcp_send_fin>
 8008c10:	4603      	mov	r3, r0
 8008c12:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8008c14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d11f      	bne.n	8008c5c <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2205      	movs	r2, #5
 8008c20:	751a      	strb	r2, [r3, #20]
      }
      break;
 8008c22:	e01b      	b.n	8008c5c <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8008c24:	6878      	ldr	r0, [r7, #4]
 8008c26:	f004 fdd3 	bl	800d7d0 <tcp_send_fin>
 8008c2a:	4603      	mov	r3, r0
 8008c2c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8008c2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d114      	bne.n	8008c60 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	2205      	movs	r2, #5
 8008c3a:	751a      	strb	r2, [r3, #20]
      }
      break;
 8008c3c:	e010      	b.n	8008c60 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8008c3e:	6878      	ldr	r0, [r7, #4]
 8008c40:	f004 fdc6 	bl	800d7d0 <tcp_send_fin>
 8008c44:	4603      	mov	r3, r0
 8008c46:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8008c48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d109      	bne.n	8008c64 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2209      	movs	r2, #9
 8008c54:	751a      	strb	r2, [r3, #20]
      }
      break;
 8008c56:	e005      	b.n	8008c64 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8008c58:	2300      	movs	r3, #0
 8008c5a:	e01c      	b.n	8008c96 <tcp_close_shutdown_fin+0xbe>
      break;
 8008c5c:	bf00      	nop
 8008c5e:	e002      	b.n	8008c66 <tcp_close_shutdown_fin+0x8e>
      break;
 8008c60:	bf00      	nop
 8008c62:	e000      	b.n	8008c66 <tcp_close_shutdown_fin+0x8e>
      break;
 8008c64:	bf00      	nop
  }

  if (err == ERR_OK) {
 8008c66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d103      	bne.n	8008c76 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8008c6e:	6878      	ldr	r0, [r7, #4]
 8008c70:	f004 feec 	bl	800da4c <tcp_output>
 8008c74:	e00d      	b.n	8008c92 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8008c76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008c7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008c7e:	d108      	bne.n	8008c92 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	8b5b      	ldrh	r3, [r3, #26]
 8008c84:	f043 0308 	orr.w	r3, r3, #8
 8008c88:	b29a      	uxth	r2, r3
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8008c8e:	2300      	movs	r3, #0
 8008c90:	e001      	b.n	8008c96 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8008c92:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008c96:	4618      	mov	r0, r3
 8008c98:	3710      	adds	r7, #16
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	bd80      	pop	{r7, pc}
 8008c9e:	bf00      	nop
 8008ca0:	080145a0 	.word	0x080145a0
 8008ca4:	08014650 	.word	0x08014650
 8008ca8:	080145e4 	.word	0x080145e4

08008cac <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b082      	sub	sp, #8
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d109      	bne.n	8008cce <tcp_close+0x22>
 8008cba:	4b0f      	ldr	r3, [pc, #60]	; (8008cf8 <tcp_close+0x4c>)
 8008cbc:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8008cc0:	490e      	ldr	r1, [pc, #56]	; (8008cfc <tcp_close+0x50>)
 8008cc2:	480f      	ldr	r0, [pc, #60]	; (8008d00 <tcp_close+0x54>)
 8008cc4:	f008 fd1c 	bl	8011700 <iprintf>
 8008cc8:	f06f 030f 	mvn.w	r3, #15
 8008ccc:	e00f      	b.n	8008cee <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	7d1b      	ldrb	r3, [r3, #20]
 8008cd2:	2b01      	cmp	r3, #1
 8008cd4:	d006      	beq.n	8008ce4 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	8b5b      	ldrh	r3, [r3, #26]
 8008cda:	f043 0310 	orr.w	r3, r3, #16
 8008cde:	b29a      	uxth	r2, r3
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8008ce4:	2101      	movs	r1, #1
 8008ce6:	6878      	ldr	r0, [r7, #4]
 8008ce8:	f7ff fe94 	bl	8008a14 <tcp_close_shutdown>
 8008cec:	4603      	mov	r3, r0
}
 8008cee:	4618      	mov	r0, r3
 8008cf0:	3708      	adds	r7, #8
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	bd80      	pop	{r7, pc}
 8008cf6:	bf00      	nop
 8008cf8:	080145a0 	.word	0x080145a0
 8008cfc:	080146b0 	.word	0x080146b0
 8008d00:	080145e4 	.word	0x080145e4

08008d04 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b08e      	sub	sp, #56	; 0x38
 8008d08:	af04      	add	r7, sp, #16
 8008d0a:	6078      	str	r0, [r7, #4]
 8008d0c:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d107      	bne.n	8008d24 <tcp_abandon+0x20>
 8008d14:	4b52      	ldr	r3, [pc, #328]	; (8008e60 <tcp_abandon+0x15c>)
 8008d16:	f240 223d 	movw	r2, #573	; 0x23d
 8008d1a:	4952      	ldr	r1, [pc, #328]	; (8008e64 <tcp_abandon+0x160>)
 8008d1c:	4852      	ldr	r0, [pc, #328]	; (8008e68 <tcp_abandon+0x164>)
 8008d1e:	f008 fcef 	bl	8011700 <iprintf>
 8008d22:	e099      	b.n	8008e58 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	7d1b      	ldrb	r3, [r3, #20]
 8008d28:	2b01      	cmp	r3, #1
 8008d2a:	d106      	bne.n	8008d3a <tcp_abandon+0x36>
 8008d2c:	4b4c      	ldr	r3, [pc, #304]	; (8008e60 <tcp_abandon+0x15c>)
 8008d2e:	f44f 7210 	mov.w	r2, #576	; 0x240
 8008d32:	494e      	ldr	r1, [pc, #312]	; (8008e6c <tcp_abandon+0x168>)
 8008d34:	484c      	ldr	r0, [pc, #304]	; (8008e68 <tcp_abandon+0x164>)
 8008d36:	f008 fce3 	bl	8011700 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	7d1b      	ldrb	r3, [r3, #20]
 8008d3e:	2b0a      	cmp	r3, #10
 8008d40:	d107      	bne.n	8008d52 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8008d42:	6879      	ldr	r1, [r7, #4]
 8008d44:	484a      	ldr	r0, [pc, #296]	; (8008e70 <tcp_abandon+0x16c>)
 8008d46:	f001 fa69 	bl	800a21c <tcp_pcb_remove>
    tcp_free(pcb);
 8008d4a:	6878      	ldr	r0, [r7, #4]
 8008d4c:	f7ff fdb0 	bl	80088b0 <tcp_free>
 8008d50:	e082      	b.n	8008e58 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8008d52:	2300      	movs	r3, #0
 8008d54:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8008d56:	2300      	movs	r3, #0
 8008d58:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d5e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d64:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d6c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	691b      	ldr	r3, [r3, #16]
 8008d72:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	7d1b      	ldrb	r3, [r3, #20]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d126      	bne.n	8008dca <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	8adb      	ldrh	r3, [r3, #22]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d02e      	beq.n	8008de2 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8008d84:	4b3b      	ldr	r3, [pc, #236]	; (8008e74 <tcp_abandon+0x170>)
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	687a      	ldr	r2, [r7, #4]
 8008d8a:	429a      	cmp	r2, r3
 8008d8c:	d105      	bne.n	8008d9a <tcp_abandon+0x96>
 8008d8e:	4b39      	ldr	r3, [pc, #228]	; (8008e74 <tcp_abandon+0x170>)
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	68db      	ldr	r3, [r3, #12]
 8008d94:	4a37      	ldr	r2, [pc, #220]	; (8008e74 <tcp_abandon+0x170>)
 8008d96:	6013      	str	r3, [r2, #0]
 8008d98:	e013      	b.n	8008dc2 <tcp_abandon+0xbe>
 8008d9a:	4b36      	ldr	r3, [pc, #216]	; (8008e74 <tcp_abandon+0x170>)
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	61fb      	str	r3, [r7, #28]
 8008da0:	e00c      	b.n	8008dbc <tcp_abandon+0xb8>
 8008da2:	69fb      	ldr	r3, [r7, #28]
 8008da4:	68db      	ldr	r3, [r3, #12]
 8008da6:	687a      	ldr	r2, [r7, #4]
 8008da8:	429a      	cmp	r2, r3
 8008daa:	d104      	bne.n	8008db6 <tcp_abandon+0xb2>
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	68da      	ldr	r2, [r3, #12]
 8008db0:	69fb      	ldr	r3, [r7, #28]
 8008db2:	60da      	str	r2, [r3, #12]
 8008db4:	e005      	b.n	8008dc2 <tcp_abandon+0xbe>
 8008db6:	69fb      	ldr	r3, [r7, #28]
 8008db8:	68db      	ldr	r3, [r3, #12]
 8008dba:	61fb      	str	r3, [r7, #28]
 8008dbc:	69fb      	ldr	r3, [r7, #28]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d1ef      	bne.n	8008da2 <tcp_abandon+0x9e>
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	60da      	str	r2, [r3, #12]
 8008dc8:	e00b      	b.n	8008de2 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	8adb      	ldrh	r3, [r3, #22]
 8008dd2:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8008dd4:	6879      	ldr	r1, [r7, #4]
 8008dd6:	4828      	ldr	r0, [pc, #160]	; (8008e78 <tcp_abandon+0x174>)
 8008dd8:	f001 fa20 	bl	800a21c <tcp_pcb_remove>
 8008ddc:	4b27      	ldr	r3, [pc, #156]	; (8008e7c <tcp_abandon+0x178>)
 8008dde:	2201      	movs	r2, #1
 8008de0:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d004      	beq.n	8008df4 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008dee:	4618      	mov	r0, r3
 8008df0:	f000 fed6 	bl	8009ba0 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d004      	beq.n	8008e06 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e00:	4618      	mov	r0, r3
 8008e02:	f000 fecd 	bl	8009ba0 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d004      	beq.n	8008e18 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e12:	4618      	mov	r0, r3
 8008e14:	f000 fec4 	bl	8009ba0 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8008e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d00e      	beq.n	8008e3c <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8008e1e:	6879      	ldr	r1, [r7, #4]
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	3304      	adds	r3, #4
 8008e24:	687a      	ldr	r2, [r7, #4]
 8008e26:	8b12      	ldrh	r2, [r2, #24]
 8008e28:	9202      	str	r2, [sp, #8]
 8008e2a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8008e2c:	9201      	str	r2, [sp, #4]
 8008e2e:	9300      	str	r3, [sp, #0]
 8008e30:	460b      	mov	r3, r1
 8008e32:	697a      	ldr	r2, [r7, #20]
 8008e34:	69b9      	ldr	r1, [r7, #24]
 8008e36:	6878      	ldr	r0, [r7, #4]
 8008e38:	f005 fbbc 	bl	800e5b4 <tcp_rst>
    }
    last_state = pcb->state;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	7d1b      	ldrb	r3, [r3, #20]
 8008e40:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8008e42:	6878      	ldr	r0, [r7, #4]
 8008e44:	f7ff fd34 	bl	80088b0 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8008e48:	693b      	ldr	r3, [r7, #16]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d004      	beq.n	8008e58 <tcp_abandon+0x154>
 8008e4e:	693b      	ldr	r3, [r7, #16]
 8008e50:	f06f 010c 	mvn.w	r1, #12
 8008e54:	68f8      	ldr	r0, [r7, #12]
 8008e56:	4798      	blx	r3
  }
}
 8008e58:	3728      	adds	r7, #40	; 0x28
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	bd80      	pop	{r7, pc}
 8008e5e:	bf00      	nop
 8008e60:	080145a0 	.word	0x080145a0
 8008e64:	080146e4 	.word	0x080146e4
 8008e68:	080145e4 	.word	0x080145e4
 8008e6c:	08014700 	.word	0x08014700
 8008e70:	2000d798 	.word	0x2000d798
 8008e74:	2000d794 	.word	0x2000d794
 8008e78:	2000d788 	.word	0x2000d788
 8008e7c:	2000d784 	.word	0x2000d784

08008e80 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b082      	sub	sp, #8
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8008e88:	2101      	movs	r1, #1
 8008e8a:	6878      	ldr	r0, [r7, #4]
 8008e8c:	f7ff ff3a 	bl	8008d04 <tcp_abandon>
}
 8008e90:	bf00      	nop
 8008e92:	3708      	adds	r7, #8
 8008e94:	46bd      	mov	sp, r7
 8008e96:	bd80      	pop	{r7, pc}

08008e98 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b088      	sub	sp, #32
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	60f8      	str	r0, [r7, #12]
 8008ea0:	60b9      	str	r1, [r7, #8]
 8008ea2:	4613      	mov	r3, r2
 8008ea4:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8008ea6:	2304      	movs	r3, #4
 8008ea8:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8008eaa:	68bb      	ldr	r3, [r7, #8]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d101      	bne.n	8008eb4 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8008eb0:	4b3e      	ldr	r3, [pc, #248]	; (8008fac <tcp_bind+0x114>)
 8008eb2:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d109      	bne.n	8008ece <tcp_bind+0x36>
 8008eba:	4b3d      	ldr	r3, [pc, #244]	; (8008fb0 <tcp_bind+0x118>)
 8008ebc:	f240 22a9 	movw	r2, #681	; 0x2a9
 8008ec0:	493c      	ldr	r1, [pc, #240]	; (8008fb4 <tcp_bind+0x11c>)
 8008ec2:	483d      	ldr	r0, [pc, #244]	; (8008fb8 <tcp_bind+0x120>)
 8008ec4:	f008 fc1c 	bl	8011700 <iprintf>
 8008ec8:	f06f 030f 	mvn.w	r3, #15
 8008ecc:	e06a      	b.n	8008fa4 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	7d1b      	ldrb	r3, [r3, #20]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d009      	beq.n	8008eea <tcp_bind+0x52>
 8008ed6:	4b36      	ldr	r3, [pc, #216]	; (8008fb0 <tcp_bind+0x118>)
 8008ed8:	f240 22ab 	movw	r2, #683	; 0x2ab
 8008edc:	4937      	ldr	r1, [pc, #220]	; (8008fbc <tcp_bind+0x124>)
 8008ede:	4836      	ldr	r0, [pc, #216]	; (8008fb8 <tcp_bind+0x120>)
 8008ee0:	f008 fc0e 	bl	8011700 <iprintf>
 8008ee4:	f06f 0305 	mvn.w	r3, #5
 8008ee8:	e05c      	b.n	8008fa4 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 8008eea:	88fb      	ldrh	r3, [r7, #6]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d109      	bne.n	8008f04 <tcp_bind+0x6c>
    port = tcp_new_port();
 8008ef0:	f000 f9f0 	bl	80092d4 <tcp_new_port>
 8008ef4:	4603      	mov	r3, r0
 8008ef6:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8008ef8:	88fb      	ldrh	r3, [r7, #6]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d135      	bne.n	8008f6a <tcp_bind+0xd2>
      return ERR_BUF;
 8008efe:	f06f 0301 	mvn.w	r3, #1
 8008f02:	e04f      	b.n	8008fa4 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8008f04:	2300      	movs	r3, #0
 8008f06:	61fb      	str	r3, [r7, #28]
 8008f08:	e02b      	b.n	8008f62 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8008f0a:	4a2d      	ldr	r2, [pc, #180]	; (8008fc0 <tcp_bind+0x128>)
 8008f0c:	69fb      	ldr	r3, [r7, #28]
 8008f0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	61bb      	str	r3, [r7, #24]
 8008f16:	e01e      	b.n	8008f56 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 8008f18:	69bb      	ldr	r3, [r7, #24]
 8008f1a:	8adb      	ldrh	r3, [r3, #22]
 8008f1c:	88fa      	ldrh	r2, [r7, #6]
 8008f1e:	429a      	cmp	r2, r3
 8008f20:	d116      	bne.n	8008f50 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8008f22:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d010      	beq.n	8008f4a <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8008f28:	69bb      	ldr	r3, [r7, #24]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d00c      	beq.n	8008f4a <tcp_bind+0xb2>
 8008f30:	68bb      	ldr	r3, [r7, #8]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d009      	beq.n	8008f4a <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 8008f36:	68bb      	ldr	r3, [r7, #8]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d005      	beq.n	8008f4a <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8008f3e:	69bb      	ldr	r3, [r7, #24]
 8008f40:	681a      	ldr	r2, [r3, #0]
 8008f42:	68bb      	ldr	r3, [r7, #8]
 8008f44:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8008f46:	429a      	cmp	r2, r3
 8008f48:	d102      	bne.n	8008f50 <tcp_bind+0xb8>
              return ERR_USE;
 8008f4a:	f06f 0307 	mvn.w	r3, #7
 8008f4e:	e029      	b.n	8008fa4 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8008f50:	69bb      	ldr	r3, [r7, #24]
 8008f52:	68db      	ldr	r3, [r3, #12]
 8008f54:	61bb      	str	r3, [r7, #24]
 8008f56:	69bb      	ldr	r3, [r7, #24]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d1dd      	bne.n	8008f18 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8008f5c:	69fb      	ldr	r3, [r7, #28]
 8008f5e:	3301      	adds	r3, #1
 8008f60:	61fb      	str	r3, [r7, #28]
 8008f62:	69fa      	ldr	r2, [r7, #28]
 8008f64:	697b      	ldr	r3, [r7, #20]
 8008f66:	429a      	cmp	r2, r3
 8008f68:	dbcf      	blt.n	8008f0a <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 8008f6a:	68bb      	ldr	r3, [r7, #8]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d00c      	beq.n	8008f8a <tcp_bind+0xf2>
 8008f70:	68bb      	ldr	r3, [r7, #8]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d008      	beq.n	8008f8a <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8008f78:	68bb      	ldr	r3, [r7, #8]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d002      	beq.n	8008f84 <tcp_bind+0xec>
 8008f7e:	68bb      	ldr	r3, [r7, #8]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	e000      	b.n	8008f86 <tcp_bind+0xee>
 8008f84:	2300      	movs	r3, #0
 8008f86:	68fa      	ldr	r2, [r7, #12]
 8008f88:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	88fa      	ldrh	r2, [r7, #6]
 8008f8e:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8008f90:	4b0c      	ldr	r3, [pc, #48]	; (8008fc4 <tcp_bind+0x12c>)
 8008f92:	681a      	ldr	r2, [r3, #0]
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	60da      	str	r2, [r3, #12]
 8008f98:	4a0a      	ldr	r2, [pc, #40]	; (8008fc4 <tcp_bind+0x12c>)
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	6013      	str	r3, [r2, #0]
 8008f9e:	f005 fccb 	bl	800e938 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8008fa2:	2300      	movs	r3, #0
}
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	3720      	adds	r7, #32
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	bd80      	pop	{r7, pc}
 8008fac:	080177d0 	.word	0x080177d0
 8008fb0:	080145a0 	.word	0x080145a0
 8008fb4:	08014734 	.word	0x08014734
 8008fb8:	080145e4 	.word	0x080145e4
 8008fbc:	0801474c 	.word	0x0801474c
 8008fc0:	080177a8 	.word	0x080177a8
 8008fc4:	2000d794 	.word	0x2000d794

08008fc8 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b084      	sub	sp, #16
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	60f8      	str	r0, [r7, #12]
 8008fd0:	60b9      	str	r1, [r7, #8]
 8008fd2:	4613      	mov	r3, r2
 8008fd4:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 8008fd6:	68bb      	ldr	r3, [r7, #8]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d106      	bne.n	8008fea <tcp_accept_null+0x22>
 8008fdc:	4b07      	ldr	r3, [pc, #28]	; (8008ffc <tcp_accept_null+0x34>)
 8008fde:	f240 320f 	movw	r2, #783	; 0x30f
 8008fe2:	4907      	ldr	r1, [pc, #28]	; (8009000 <tcp_accept_null+0x38>)
 8008fe4:	4807      	ldr	r0, [pc, #28]	; (8009004 <tcp_accept_null+0x3c>)
 8008fe6:	f008 fb8b 	bl	8011700 <iprintf>

  tcp_abort(pcb);
 8008fea:	68b8      	ldr	r0, [r7, #8]
 8008fec:	f7ff ff48 	bl	8008e80 <tcp_abort>

  return ERR_ABRT;
 8008ff0:	f06f 030c 	mvn.w	r3, #12
}
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	3710      	adds	r7, #16
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	bd80      	pop	{r7, pc}
 8008ffc:	080145a0 	.word	0x080145a0
 8009000:	08014774 	.word	0x08014774
 8009004:	080145e4 	.word	0x080145e4

08009008 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b082      	sub	sp, #8
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
 8009010:	460b      	mov	r3, r1
 8009012:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 8009014:	78fb      	ldrb	r3, [r7, #3]
 8009016:	2200      	movs	r2, #0
 8009018:	4619      	mov	r1, r3
 800901a:	6878      	ldr	r0, [r7, #4]
 800901c:	f000 f806 	bl	800902c <tcp_listen_with_backlog_and_err>
 8009020:	4603      	mov	r3, r0
}
 8009022:	4618      	mov	r0, r3
 8009024:	3708      	adds	r7, #8
 8009026:	46bd      	mov	sp, r7
 8009028:	bd80      	pop	{r7, pc}
	...

0800902c <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800902c:	b580      	push	{r7, lr}
 800902e:	b088      	sub	sp, #32
 8009030:	af00      	add	r7, sp, #0
 8009032:	60f8      	str	r0, [r7, #12]
 8009034:	460b      	mov	r3, r1
 8009036:	607a      	str	r2, [r7, #4]
 8009038:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800903a:	2300      	movs	r3, #0
 800903c:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d109      	bne.n	8009058 <tcp_listen_with_backlog_and_err+0x2c>
 8009044:	4b47      	ldr	r3, [pc, #284]	; (8009164 <tcp_listen_with_backlog_and_err+0x138>)
 8009046:	f240 3259 	movw	r2, #857	; 0x359
 800904a:	4947      	ldr	r1, [pc, #284]	; (8009168 <tcp_listen_with_backlog_and_err+0x13c>)
 800904c:	4847      	ldr	r0, [pc, #284]	; (800916c <tcp_listen_with_backlog_and_err+0x140>)
 800904e:	f008 fb57 	bl	8011700 <iprintf>
 8009052:	23f0      	movs	r3, #240	; 0xf0
 8009054:	76fb      	strb	r3, [r7, #27]
 8009056:	e079      	b.n	800914c <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	7d1b      	ldrb	r3, [r3, #20]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d009      	beq.n	8009074 <tcp_listen_with_backlog_and_err+0x48>
 8009060:	4b40      	ldr	r3, [pc, #256]	; (8009164 <tcp_listen_with_backlog_and_err+0x138>)
 8009062:	f240 325a 	movw	r2, #858	; 0x35a
 8009066:	4942      	ldr	r1, [pc, #264]	; (8009170 <tcp_listen_with_backlog_and_err+0x144>)
 8009068:	4840      	ldr	r0, [pc, #256]	; (800916c <tcp_listen_with_backlog_and_err+0x140>)
 800906a:	f008 fb49 	bl	8011700 <iprintf>
 800906e:	23f1      	movs	r3, #241	; 0xf1
 8009070:	76fb      	strb	r3, [r7, #27]
 8009072:	e06b      	b.n	800914c <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	7d1b      	ldrb	r3, [r3, #20]
 8009078:	2b01      	cmp	r3, #1
 800907a:	d104      	bne.n	8009086 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 8009080:	23f7      	movs	r3, #247	; 0xf7
 8009082:	76fb      	strb	r3, [r7, #27]
    goto done;
 8009084:	e062      	b.n	800914c <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8009086:	2002      	movs	r0, #2
 8009088:	f7fe fb14 	bl	80076b4 <memp_malloc>
 800908c:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800908e:	69fb      	ldr	r3, [r7, #28]
 8009090:	2b00      	cmp	r3, #0
 8009092:	d102      	bne.n	800909a <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 8009094:	23ff      	movs	r3, #255	; 0xff
 8009096:	76fb      	strb	r3, [r7, #27]
    goto done;
 8009098:	e058      	b.n	800914c <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	691a      	ldr	r2, [r3, #16]
 800909e:	69fb      	ldr	r3, [r7, #28]
 80090a0:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	8ada      	ldrh	r2, [r3, #22]
 80090a6:	69fb      	ldr	r3, [r7, #28]
 80090a8:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 80090aa:	69fb      	ldr	r3, [r7, #28]
 80090ac:	2201      	movs	r2, #1
 80090ae:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	7d5a      	ldrb	r2, [r3, #21]
 80090b4:	69fb      	ldr	r3, [r7, #28]
 80090b6:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	7a5a      	ldrb	r2, [r3, #9]
 80090bc:	69fb      	ldr	r3, [r7, #28]
 80090be:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 80090c0:	69fb      	ldr	r3, [r7, #28]
 80090c2:	2200      	movs	r2, #0
 80090c4:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	7ada      	ldrb	r2, [r3, #11]
 80090ca:	69fb      	ldr	r3, [r7, #28]
 80090cc:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	7a9a      	ldrb	r2, [r3, #10]
 80090d2:	69fb      	ldr	r3, [r7, #28]
 80090d4:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	681a      	ldr	r2, [r3, #0]
 80090da:	69fb      	ldr	r3, [r7, #28]
 80090dc:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	8adb      	ldrh	r3, [r3, #22]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d021      	beq.n	800912a <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 80090e6:	4b23      	ldr	r3, [pc, #140]	; (8009174 <tcp_listen_with_backlog_and_err+0x148>)
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	68fa      	ldr	r2, [r7, #12]
 80090ec:	429a      	cmp	r2, r3
 80090ee:	d105      	bne.n	80090fc <tcp_listen_with_backlog_and_err+0xd0>
 80090f0:	4b20      	ldr	r3, [pc, #128]	; (8009174 <tcp_listen_with_backlog_and_err+0x148>)
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	68db      	ldr	r3, [r3, #12]
 80090f6:	4a1f      	ldr	r2, [pc, #124]	; (8009174 <tcp_listen_with_backlog_and_err+0x148>)
 80090f8:	6013      	str	r3, [r2, #0]
 80090fa:	e013      	b.n	8009124 <tcp_listen_with_backlog_and_err+0xf8>
 80090fc:	4b1d      	ldr	r3, [pc, #116]	; (8009174 <tcp_listen_with_backlog_and_err+0x148>)
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	617b      	str	r3, [r7, #20]
 8009102:	e00c      	b.n	800911e <tcp_listen_with_backlog_and_err+0xf2>
 8009104:	697b      	ldr	r3, [r7, #20]
 8009106:	68db      	ldr	r3, [r3, #12]
 8009108:	68fa      	ldr	r2, [r7, #12]
 800910a:	429a      	cmp	r2, r3
 800910c:	d104      	bne.n	8009118 <tcp_listen_with_backlog_and_err+0xec>
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	68da      	ldr	r2, [r3, #12]
 8009112:	697b      	ldr	r3, [r7, #20]
 8009114:	60da      	str	r2, [r3, #12]
 8009116:	e005      	b.n	8009124 <tcp_listen_with_backlog_and_err+0xf8>
 8009118:	697b      	ldr	r3, [r7, #20]
 800911a:	68db      	ldr	r3, [r3, #12]
 800911c:	617b      	str	r3, [r7, #20]
 800911e:	697b      	ldr	r3, [r7, #20]
 8009120:	2b00      	cmp	r3, #0
 8009122:	d1ef      	bne.n	8009104 <tcp_listen_with_backlog_and_err+0xd8>
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	2200      	movs	r2, #0
 8009128:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800912a:	68f8      	ldr	r0, [r7, #12]
 800912c:	f7ff fbc0 	bl	80088b0 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8009130:	69fb      	ldr	r3, [r7, #28]
 8009132:	4a11      	ldr	r2, [pc, #68]	; (8009178 <tcp_listen_with_backlog_and_err+0x14c>)
 8009134:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8009136:	4b11      	ldr	r3, [pc, #68]	; (800917c <tcp_listen_with_backlog_and_err+0x150>)
 8009138:	681a      	ldr	r2, [r3, #0]
 800913a:	69fb      	ldr	r3, [r7, #28]
 800913c:	60da      	str	r2, [r3, #12]
 800913e:	4a0f      	ldr	r2, [pc, #60]	; (800917c <tcp_listen_with_backlog_and_err+0x150>)
 8009140:	69fb      	ldr	r3, [r7, #28]
 8009142:	6013      	str	r3, [r2, #0]
 8009144:	f005 fbf8 	bl	800e938 <tcp_timer_needed>
  res = ERR_OK;
 8009148:	2300      	movs	r3, #0
 800914a:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d002      	beq.n	8009158 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	7efa      	ldrb	r2, [r7, #27]
 8009156:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8009158:	69fb      	ldr	r3, [r7, #28]
}
 800915a:	4618      	mov	r0, r3
 800915c:	3720      	adds	r7, #32
 800915e:	46bd      	mov	sp, r7
 8009160:	bd80      	pop	{r7, pc}
 8009162:	bf00      	nop
 8009164:	080145a0 	.word	0x080145a0
 8009168:	08014794 	.word	0x08014794
 800916c:	080145e4 	.word	0x080145e4
 8009170:	080147c4 	.word	0x080147c4
 8009174:	2000d794 	.word	0x2000d794
 8009178:	08008fc9 	.word	0x08008fc9
 800917c:	2000d790 	.word	0x2000d790

08009180 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b084      	sub	sp, #16
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d106      	bne.n	800919c <tcp_update_rcv_ann_wnd+0x1c>
 800918e:	4b25      	ldr	r3, [pc, #148]	; (8009224 <tcp_update_rcv_ann_wnd+0xa4>)
 8009190:	f240 32a6 	movw	r2, #934	; 0x3a6
 8009194:	4924      	ldr	r1, [pc, #144]	; (8009228 <tcp_update_rcv_ann_wnd+0xa8>)
 8009196:	4825      	ldr	r0, [pc, #148]	; (800922c <tcp_update_rcv_ann_wnd+0xac>)
 8009198:	f008 fab2 	bl	8011700 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091a0:	687a      	ldr	r2, [r7, #4]
 80091a2:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80091a4:	4413      	add	r3, r2
 80091a6:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091ac:	687a      	ldr	r2, [r7, #4]
 80091ae:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 80091b0:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 80091b4:	bf28      	it	cs
 80091b6:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 80091ba:	b292      	uxth	r2, r2
 80091bc:	4413      	add	r3, r2
 80091be:	68fa      	ldr	r2, [r7, #12]
 80091c0:	1ad3      	subs	r3, r2, r3
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	db08      	blt.n	80091d8 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091d2:	68fa      	ldr	r2, [r7, #12]
 80091d4:	1ad3      	subs	r3, r2, r3
 80091d6:	e020      	b.n	800921a <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091e0:	1ad3      	subs	r3, r2, r3
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	dd03      	ble.n	80091ee <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	2200      	movs	r2, #0
 80091ea:	855a      	strh	r2, [r3, #42]	; 0x2a
 80091ec:	e014      	b.n	8009218 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091f6:	1ad3      	subs	r3, r2, r3
 80091f8:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80091fa:	68bb      	ldr	r3, [r7, #8]
 80091fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009200:	d306      	bcc.n	8009210 <tcp_update_rcv_ann_wnd+0x90>
 8009202:	4b08      	ldr	r3, [pc, #32]	; (8009224 <tcp_update_rcv_ann_wnd+0xa4>)
 8009204:	f240 32b6 	movw	r2, #950	; 0x3b6
 8009208:	4909      	ldr	r1, [pc, #36]	; (8009230 <tcp_update_rcv_ann_wnd+0xb0>)
 800920a:	4808      	ldr	r0, [pc, #32]	; (800922c <tcp_update_rcv_ann_wnd+0xac>)
 800920c:	f008 fa78 	bl	8011700 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8009210:	68bb      	ldr	r3, [r7, #8]
 8009212:	b29a      	uxth	r2, r3
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8009218:	2300      	movs	r3, #0
  }
}
 800921a:	4618      	mov	r0, r3
 800921c:	3710      	adds	r7, #16
 800921e:	46bd      	mov	sp, r7
 8009220:	bd80      	pop	{r7, pc}
 8009222:	bf00      	nop
 8009224:	080145a0 	.word	0x080145a0
 8009228:	080147fc 	.word	0x080147fc
 800922c:	080145e4 	.word	0x080145e4
 8009230:	08014820 	.word	0x08014820

08009234 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8009234:	b580      	push	{r7, lr}
 8009236:	b084      	sub	sp, #16
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
 800923c:	460b      	mov	r3, r1
 800923e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	2b00      	cmp	r3, #0
 8009244:	d107      	bne.n	8009256 <tcp_recved+0x22>
 8009246:	4b1f      	ldr	r3, [pc, #124]	; (80092c4 <tcp_recved+0x90>)
 8009248:	f240 32cf 	movw	r2, #975	; 0x3cf
 800924c:	491e      	ldr	r1, [pc, #120]	; (80092c8 <tcp_recved+0x94>)
 800924e:	481f      	ldr	r0, [pc, #124]	; (80092cc <tcp_recved+0x98>)
 8009250:	f008 fa56 	bl	8011700 <iprintf>
 8009254:	e032      	b.n	80092bc <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	7d1b      	ldrb	r3, [r3, #20]
 800925a:	2b01      	cmp	r3, #1
 800925c:	d106      	bne.n	800926c <tcp_recved+0x38>
 800925e:	4b19      	ldr	r3, [pc, #100]	; (80092c4 <tcp_recved+0x90>)
 8009260:	f240 32d2 	movw	r2, #978	; 0x3d2
 8009264:	491a      	ldr	r1, [pc, #104]	; (80092d0 <tcp_recved+0x9c>)
 8009266:	4819      	ldr	r0, [pc, #100]	; (80092cc <tcp_recved+0x98>)
 8009268:	f008 fa4a 	bl	8011700 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009270:	887b      	ldrh	r3, [r7, #2]
 8009272:	4413      	add	r3, r2
 8009274:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8009276:	89fb      	ldrh	r3, [r7, #14]
 8009278:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800927c:	d804      	bhi.n	8009288 <tcp_recved+0x54>
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009282:	89fa      	ldrh	r2, [r7, #14]
 8009284:	429a      	cmp	r2, r3
 8009286:	d204      	bcs.n	8009292 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800928e:	851a      	strh	r2, [r3, #40]	; 0x28
 8009290:	e002      	b.n	8009298 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	89fa      	ldrh	r2, [r7, #14]
 8009296:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8009298:	6878      	ldr	r0, [r7, #4]
 800929a:	f7ff ff71 	bl	8009180 <tcp_update_rcv_ann_wnd>
 800929e:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80092a0:	68bb      	ldr	r3, [r7, #8]
 80092a2:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80092a6:	d309      	bcc.n	80092bc <tcp_recved+0x88>
    tcp_ack_now(pcb);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	8b5b      	ldrh	r3, [r3, #26]
 80092ac:	f043 0302 	orr.w	r3, r3, #2
 80092b0:	b29a      	uxth	r2, r3
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80092b6:	6878      	ldr	r0, [r7, #4]
 80092b8:	f004 fbc8 	bl	800da4c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 80092bc:	3710      	adds	r7, #16
 80092be:	46bd      	mov	sp, r7
 80092c0:	bd80      	pop	{r7, pc}
 80092c2:	bf00      	nop
 80092c4:	080145a0 	.word	0x080145a0
 80092c8:	0801483c 	.word	0x0801483c
 80092cc:	080145e4 	.word	0x080145e4
 80092d0:	08014854 	.word	0x08014854

080092d4 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 80092d4:	b480      	push	{r7}
 80092d6:	b083      	sub	sp, #12
 80092d8:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 80092da:	2300      	movs	r3, #0
 80092dc:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 80092de:	4b1e      	ldr	r3, [pc, #120]	; (8009358 <tcp_new_port+0x84>)
 80092e0:	881b      	ldrh	r3, [r3, #0]
 80092e2:	3301      	adds	r3, #1
 80092e4:	b29a      	uxth	r2, r3
 80092e6:	4b1c      	ldr	r3, [pc, #112]	; (8009358 <tcp_new_port+0x84>)
 80092e8:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 80092ea:	4b1b      	ldr	r3, [pc, #108]	; (8009358 <tcp_new_port+0x84>)
 80092ec:	881b      	ldrh	r3, [r3, #0]
 80092ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80092f2:	4293      	cmp	r3, r2
 80092f4:	d103      	bne.n	80092fe <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 80092f6:	4b18      	ldr	r3, [pc, #96]	; (8009358 <tcp_new_port+0x84>)
 80092f8:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80092fc:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80092fe:	2300      	movs	r3, #0
 8009300:	71fb      	strb	r3, [r7, #7]
 8009302:	e01e      	b.n	8009342 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8009304:	79fb      	ldrb	r3, [r7, #7]
 8009306:	4a15      	ldr	r2, [pc, #84]	; (800935c <tcp_new_port+0x88>)
 8009308:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	603b      	str	r3, [r7, #0]
 8009310:	e011      	b.n	8009336 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8009312:	683b      	ldr	r3, [r7, #0]
 8009314:	8ada      	ldrh	r2, [r3, #22]
 8009316:	4b10      	ldr	r3, [pc, #64]	; (8009358 <tcp_new_port+0x84>)
 8009318:	881b      	ldrh	r3, [r3, #0]
 800931a:	429a      	cmp	r2, r3
 800931c:	d108      	bne.n	8009330 <tcp_new_port+0x5c>
        n++;
 800931e:	88bb      	ldrh	r3, [r7, #4]
 8009320:	3301      	adds	r3, #1
 8009322:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8009324:	88bb      	ldrh	r3, [r7, #4]
 8009326:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800932a:	d3d8      	bcc.n	80092de <tcp_new_port+0xa>
          return 0;
 800932c:	2300      	movs	r3, #0
 800932e:	e00d      	b.n	800934c <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8009330:	683b      	ldr	r3, [r7, #0]
 8009332:	68db      	ldr	r3, [r3, #12]
 8009334:	603b      	str	r3, [r7, #0]
 8009336:	683b      	ldr	r3, [r7, #0]
 8009338:	2b00      	cmp	r3, #0
 800933a:	d1ea      	bne.n	8009312 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800933c:	79fb      	ldrb	r3, [r7, #7]
 800933e:	3301      	adds	r3, #1
 8009340:	71fb      	strb	r3, [r7, #7]
 8009342:	79fb      	ldrb	r3, [r7, #7]
 8009344:	2b03      	cmp	r3, #3
 8009346:	d9dd      	bls.n	8009304 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8009348:	4b03      	ldr	r3, [pc, #12]	; (8009358 <tcp_new_port+0x84>)
 800934a:	881b      	ldrh	r3, [r3, #0]
}
 800934c:	4618      	mov	r0, r3
 800934e:	370c      	adds	r7, #12
 8009350:	46bd      	mov	sp, r7
 8009352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009356:	4770      	bx	lr
 8009358:	2000001e 	.word	0x2000001e
 800935c:	080177a8 	.word	0x080177a8

08009360 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8009360:	b5b0      	push	{r4, r5, r7, lr}
 8009362:	b090      	sub	sp, #64	; 0x40
 8009364:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8009366:	2300      	movs	r3, #0
 8009368:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800936c:	4b94      	ldr	r3, [pc, #592]	; (80095c0 <tcp_slowtmr+0x260>)
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	3301      	adds	r3, #1
 8009372:	4a93      	ldr	r2, [pc, #588]	; (80095c0 <tcp_slowtmr+0x260>)
 8009374:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8009376:	4b93      	ldr	r3, [pc, #588]	; (80095c4 <tcp_slowtmr+0x264>)
 8009378:	781b      	ldrb	r3, [r3, #0]
 800937a:	3301      	adds	r3, #1
 800937c:	b2da      	uxtb	r2, r3
 800937e:	4b91      	ldr	r3, [pc, #580]	; (80095c4 <tcp_slowtmr+0x264>)
 8009380:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8009382:	2300      	movs	r3, #0
 8009384:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8009386:	4b90      	ldr	r3, [pc, #576]	; (80095c8 <tcp_slowtmr+0x268>)
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800938c:	e29f      	b.n	80098ce <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800938e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009390:	7d1b      	ldrb	r3, [r3, #20]
 8009392:	2b00      	cmp	r3, #0
 8009394:	d106      	bne.n	80093a4 <tcp_slowtmr+0x44>
 8009396:	4b8d      	ldr	r3, [pc, #564]	; (80095cc <tcp_slowtmr+0x26c>)
 8009398:	f240 42be 	movw	r2, #1214	; 0x4be
 800939c:	498c      	ldr	r1, [pc, #560]	; (80095d0 <tcp_slowtmr+0x270>)
 800939e:	488d      	ldr	r0, [pc, #564]	; (80095d4 <tcp_slowtmr+0x274>)
 80093a0:	f008 f9ae 	bl	8011700 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80093a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093a6:	7d1b      	ldrb	r3, [r3, #20]
 80093a8:	2b01      	cmp	r3, #1
 80093aa:	d106      	bne.n	80093ba <tcp_slowtmr+0x5a>
 80093ac:	4b87      	ldr	r3, [pc, #540]	; (80095cc <tcp_slowtmr+0x26c>)
 80093ae:	f240 42bf 	movw	r2, #1215	; 0x4bf
 80093b2:	4989      	ldr	r1, [pc, #548]	; (80095d8 <tcp_slowtmr+0x278>)
 80093b4:	4887      	ldr	r0, [pc, #540]	; (80095d4 <tcp_slowtmr+0x274>)
 80093b6:	f008 f9a3 	bl	8011700 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80093ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093bc:	7d1b      	ldrb	r3, [r3, #20]
 80093be:	2b0a      	cmp	r3, #10
 80093c0:	d106      	bne.n	80093d0 <tcp_slowtmr+0x70>
 80093c2:	4b82      	ldr	r3, [pc, #520]	; (80095cc <tcp_slowtmr+0x26c>)
 80093c4:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 80093c8:	4984      	ldr	r1, [pc, #528]	; (80095dc <tcp_slowtmr+0x27c>)
 80093ca:	4882      	ldr	r0, [pc, #520]	; (80095d4 <tcp_slowtmr+0x274>)
 80093cc:	f008 f998 	bl	8011700 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 80093d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093d2:	7f9a      	ldrb	r2, [r3, #30]
 80093d4:	4b7b      	ldr	r3, [pc, #492]	; (80095c4 <tcp_slowtmr+0x264>)
 80093d6:	781b      	ldrb	r3, [r3, #0]
 80093d8:	429a      	cmp	r2, r3
 80093da:	d105      	bne.n	80093e8 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 80093dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093de:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80093e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093e2:	68db      	ldr	r3, [r3, #12]
 80093e4:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 80093e6:	e272      	b.n	80098ce <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 80093e8:	4b76      	ldr	r3, [pc, #472]	; (80095c4 <tcp_slowtmr+0x264>)
 80093ea:	781a      	ldrb	r2, [r3, #0]
 80093ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093ee:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 80093f0:	2300      	movs	r3, #0
 80093f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 80093f6:	2300      	movs	r3, #0
 80093f8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80093fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093fe:	7d1b      	ldrb	r3, [r3, #20]
 8009400:	2b02      	cmp	r3, #2
 8009402:	d10a      	bne.n	800941a <tcp_slowtmr+0xba>
 8009404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009406:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800940a:	2b05      	cmp	r3, #5
 800940c:	d905      	bls.n	800941a <tcp_slowtmr+0xba>
      ++pcb_remove;
 800940e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009412:	3301      	adds	r3, #1
 8009414:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009418:	e11e      	b.n	8009658 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800941a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800941c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009420:	2b0b      	cmp	r3, #11
 8009422:	d905      	bls.n	8009430 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8009424:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009428:	3301      	adds	r3, #1
 800942a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800942e:	e113      	b.n	8009658 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8009430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009432:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8009436:	2b00      	cmp	r3, #0
 8009438:	d075      	beq.n	8009526 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800943a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800943c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800943e:	2b00      	cmp	r3, #0
 8009440:	d006      	beq.n	8009450 <tcp_slowtmr+0xf0>
 8009442:	4b62      	ldr	r3, [pc, #392]	; (80095cc <tcp_slowtmr+0x26c>)
 8009444:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8009448:	4965      	ldr	r1, [pc, #404]	; (80095e0 <tcp_slowtmr+0x280>)
 800944a:	4862      	ldr	r0, [pc, #392]	; (80095d4 <tcp_slowtmr+0x274>)
 800944c:	f008 f958 	bl	8011700 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8009450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009452:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009454:	2b00      	cmp	r3, #0
 8009456:	d106      	bne.n	8009466 <tcp_slowtmr+0x106>
 8009458:	4b5c      	ldr	r3, [pc, #368]	; (80095cc <tcp_slowtmr+0x26c>)
 800945a:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800945e:	4961      	ldr	r1, [pc, #388]	; (80095e4 <tcp_slowtmr+0x284>)
 8009460:	485c      	ldr	r0, [pc, #368]	; (80095d4 <tcp_slowtmr+0x274>)
 8009462:	f008 f94d 	bl	8011700 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8009466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009468:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800946c:	2b0b      	cmp	r3, #11
 800946e:	d905      	bls.n	800947c <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8009470:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009474:	3301      	adds	r3, #1
 8009476:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800947a:	e0ed      	b.n	8009658 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800947c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800947e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8009482:	3b01      	subs	r3, #1
 8009484:	4a58      	ldr	r2, [pc, #352]	; (80095e8 <tcp_slowtmr+0x288>)
 8009486:	5cd3      	ldrb	r3, [r2, r3]
 8009488:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800948a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800948c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8009490:	7c7a      	ldrb	r2, [r7, #17]
 8009492:	429a      	cmp	r2, r3
 8009494:	d907      	bls.n	80094a6 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8009496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009498:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800949c:	3301      	adds	r3, #1
 800949e:	b2da      	uxtb	r2, r3
 80094a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094a2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 80094a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094a8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80094ac:	7c7a      	ldrb	r2, [r7, #17]
 80094ae:	429a      	cmp	r2, r3
 80094b0:	f200 80d2 	bhi.w	8009658 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 80094b4:	2301      	movs	r3, #1
 80094b6:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 80094b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094ba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d108      	bne.n	80094d4 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 80094c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80094c4:	f005 f96a 	bl	800e79c <tcp_zero_window_probe>
 80094c8:	4603      	mov	r3, r0
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d014      	beq.n	80094f8 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 80094ce:	2300      	movs	r3, #0
 80094d0:	623b      	str	r3, [r7, #32]
 80094d2:	e011      	b.n	80094f8 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 80094d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094d6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80094da:	4619      	mov	r1, r3
 80094dc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80094de:	f004 f82f 	bl	800d540 <tcp_split_unsent_seg>
 80094e2:	4603      	mov	r3, r0
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d107      	bne.n	80094f8 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 80094e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80094ea:	f004 faaf 	bl	800da4c <tcp_output>
 80094ee:	4603      	mov	r3, r0
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d101      	bne.n	80094f8 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 80094f4:	2300      	movs	r3, #0
 80094f6:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 80094f8:	6a3b      	ldr	r3, [r7, #32]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	f000 80ac 	beq.w	8009658 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8009500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009502:	2200      	movs	r2, #0
 8009504:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8009508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800950a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800950e:	2b06      	cmp	r3, #6
 8009510:	f200 80a2 	bhi.w	8009658 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8009514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009516:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800951a:	3301      	adds	r3, #1
 800951c:	b2da      	uxtb	r2, r3
 800951e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009520:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8009524:	e098      	b.n	8009658 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8009526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009528:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800952c:	2b00      	cmp	r3, #0
 800952e:	db0f      	blt.n	8009550 <tcp_slowtmr+0x1f0>
 8009530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009532:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8009536:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800953a:	4293      	cmp	r3, r2
 800953c:	d008      	beq.n	8009550 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800953e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009540:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8009544:	b29b      	uxth	r3, r3
 8009546:	3301      	adds	r3, #1
 8009548:	b29b      	uxth	r3, r3
 800954a:	b21a      	sxth	r2, r3
 800954c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800954e:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8009550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009552:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8009556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009558:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800955c:	429a      	cmp	r2, r3
 800955e:	db7b      	blt.n	8009658 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8009560:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009562:	f004 fd65 	bl	800e030 <tcp_rexmit_rto_prepare>
 8009566:	4603      	mov	r3, r0
 8009568:	2b00      	cmp	r3, #0
 800956a:	d007      	beq.n	800957c <tcp_slowtmr+0x21c>
 800956c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800956e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009570:	2b00      	cmp	r3, #0
 8009572:	d171      	bne.n	8009658 <tcp_slowtmr+0x2f8>
 8009574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009576:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009578:	2b00      	cmp	r3, #0
 800957a:	d06d      	beq.n	8009658 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800957c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800957e:	7d1b      	ldrb	r3, [r3, #20]
 8009580:	2b02      	cmp	r3, #2
 8009582:	d03a      	beq.n	80095fa <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8009584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009586:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800958a:	2b0c      	cmp	r3, #12
 800958c:	bf28      	it	cs
 800958e:	230c      	movcs	r3, #12
 8009590:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8009592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009594:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8009598:	10db      	asrs	r3, r3, #3
 800959a:	b21b      	sxth	r3, r3
 800959c:	461a      	mov	r2, r3
 800959e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095a0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80095a4:	4413      	add	r3, r2
 80095a6:	7efa      	ldrb	r2, [r7, #27]
 80095a8:	4910      	ldr	r1, [pc, #64]	; (80095ec <tcp_slowtmr+0x28c>)
 80095aa:	5c8a      	ldrb	r2, [r1, r2]
 80095ac:	4093      	lsls	r3, r2
 80095ae:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 80095b0:	697b      	ldr	r3, [r7, #20]
 80095b2:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 80095b6:	4293      	cmp	r3, r2
 80095b8:	dc1a      	bgt.n	80095f0 <tcp_slowtmr+0x290>
 80095ba:	697b      	ldr	r3, [r7, #20]
 80095bc:	b21a      	sxth	r2, r3
 80095be:	e019      	b.n	80095f4 <tcp_slowtmr+0x294>
 80095c0:	2000d78c 	.word	0x2000d78c
 80095c4:	2000054a 	.word	0x2000054a
 80095c8:	2000d788 	.word	0x2000d788
 80095cc:	080145a0 	.word	0x080145a0
 80095d0:	080148e4 	.word	0x080148e4
 80095d4:	080145e4 	.word	0x080145e4
 80095d8:	08014910 	.word	0x08014910
 80095dc:	0801493c 	.word	0x0801493c
 80095e0:	0801496c 	.word	0x0801496c
 80095e4:	080149a0 	.word	0x080149a0
 80095e8:	080177a0 	.word	0x080177a0
 80095ec:	08017790 	.word	0x08017790
 80095f0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80095f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095f6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 80095fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095fc:	2200      	movs	r2, #0
 80095fe:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8009600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009602:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8009606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009608:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800960c:	4293      	cmp	r3, r2
 800960e:	bf28      	it	cs
 8009610:	4613      	movcs	r3, r2
 8009612:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8009614:	8a7b      	ldrh	r3, [r7, #18]
 8009616:	085b      	lsrs	r3, r3, #1
 8009618:	b29a      	uxth	r2, r3
 800961a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800961c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8009620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009622:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8009626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009628:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800962a:	005b      	lsls	r3, r3, #1
 800962c:	b29b      	uxth	r3, r3
 800962e:	429a      	cmp	r2, r3
 8009630:	d206      	bcs.n	8009640 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8009632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009634:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009636:	005b      	lsls	r3, r3, #1
 8009638:	b29a      	uxth	r2, r3
 800963a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800963c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8009640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009642:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8009644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009646:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800964a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800964c:	2200      	movs	r2, #0
 800964e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8009652:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009654:	f004 fd5c 	bl	800e110 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8009658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800965a:	7d1b      	ldrb	r3, [r3, #20]
 800965c:	2b06      	cmp	r3, #6
 800965e:	d111      	bne.n	8009684 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8009660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009662:	8b5b      	ldrh	r3, [r3, #26]
 8009664:	f003 0310 	and.w	r3, r3, #16
 8009668:	2b00      	cmp	r3, #0
 800966a:	d00b      	beq.n	8009684 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800966c:	4b9d      	ldr	r3, [pc, #628]	; (80098e4 <tcp_slowtmr+0x584>)
 800966e:	681a      	ldr	r2, [r3, #0]
 8009670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009672:	6a1b      	ldr	r3, [r3, #32]
 8009674:	1ad3      	subs	r3, r2, r3
 8009676:	2b28      	cmp	r3, #40	; 0x28
 8009678:	d904      	bls.n	8009684 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800967a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800967e:	3301      	adds	r3, #1
 8009680:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8009684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009686:	7a5b      	ldrb	r3, [r3, #9]
 8009688:	f003 0308 	and.w	r3, r3, #8
 800968c:	2b00      	cmp	r3, #0
 800968e:	d04c      	beq.n	800972a <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8009690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009692:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8009694:	2b04      	cmp	r3, #4
 8009696:	d003      	beq.n	80096a0 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8009698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800969a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800969c:	2b07      	cmp	r3, #7
 800969e:	d144      	bne.n	800972a <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80096a0:	4b90      	ldr	r3, [pc, #576]	; (80098e4 <tcp_slowtmr+0x584>)
 80096a2:	681a      	ldr	r2, [r3, #0]
 80096a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096a6:	6a1b      	ldr	r3, [r3, #32]
 80096a8:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80096aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80096b0:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 80096b4:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 80096b8:	498b      	ldr	r1, [pc, #556]	; (80098e8 <tcp_slowtmr+0x588>)
 80096ba:	fba1 1303 	umull	r1, r3, r1, r3
 80096be:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80096c0:	429a      	cmp	r2, r3
 80096c2:	d90a      	bls.n	80096da <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 80096c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80096c8:	3301      	adds	r3, #1
 80096ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 80096ce:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80096d2:	3301      	adds	r3, #1
 80096d4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80096d8:	e027      	b.n	800972a <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80096da:	4b82      	ldr	r3, [pc, #520]	; (80098e4 <tcp_slowtmr+0x584>)
 80096dc:	681a      	ldr	r2, [r3, #0]
 80096de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096e0:	6a1b      	ldr	r3, [r3, #32]
 80096e2:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80096e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096e6:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 80096ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096ec:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80096f0:	4618      	mov	r0, r3
 80096f2:	4b7e      	ldr	r3, [pc, #504]	; (80098ec <tcp_slowtmr+0x58c>)
 80096f4:	fb03 f300 	mul.w	r3, r3, r0
 80096f8:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 80096fa:	497b      	ldr	r1, [pc, #492]	; (80098e8 <tcp_slowtmr+0x588>)
 80096fc:	fba1 1303 	umull	r1, r3, r1, r3
 8009700:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009702:	429a      	cmp	r2, r3
 8009704:	d911      	bls.n	800972a <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 8009706:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009708:	f005 f808 	bl	800e71c <tcp_keepalive>
 800970c:	4603      	mov	r3, r0
 800970e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8009712:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8009716:	2b00      	cmp	r3, #0
 8009718:	d107      	bne.n	800972a <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800971a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800971c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8009720:	3301      	adds	r3, #1
 8009722:	b2da      	uxtb	r2, r3
 8009724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009726:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800972a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800972c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800972e:	2b00      	cmp	r3, #0
 8009730:	d011      	beq.n	8009756 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8009732:	4b6c      	ldr	r3, [pc, #432]	; (80098e4 <tcp_slowtmr+0x584>)
 8009734:	681a      	ldr	r2, [r3, #0]
 8009736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009738:	6a1b      	ldr	r3, [r3, #32]
 800973a:	1ad2      	subs	r2, r2, r3
 800973c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800973e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8009742:	4619      	mov	r1, r3
 8009744:	460b      	mov	r3, r1
 8009746:	005b      	lsls	r3, r3, #1
 8009748:	440b      	add	r3, r1
 800974a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800974c:	429a      	cmp	r2, r3
 800974e:	d302      	bcc.n	8009756 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8009750:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009752:	f000 fec7 	bl	800a4e4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8009756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009758:	7d1b      	ldrb	r3, [r3, #20]
 800975a:	2b03      	cmp	r3, #3
 800975c:	d10b      	bne.n	8009776 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800975e:	4b61      	ldr	r3, [pc, #388]	; (80098e4 <tcp_slowtmr+0x584>)
 8009760:	681a      	ldr	r2, [r3, #0]
 8009762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009764:	6a1b      	ldr	r3, [r3, #32]
 8009766:	1ad3      	subs	r3, r2, r3
 8009768:	2b28      	cmp	r3, #40	; 0x28
 800976a:	d904      	bls.n	8009776 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800976c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009770:	3301      	adds	r3, #1
 8009772:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8009776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009778:	7d1b      	ldrb	r3, [r3, #20]
 800977a:	2b09      	cmp	r3, #9
 800977c:	d10b      	bne.n	8009796 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800977e:	4b59      	ldr	r3, [pc, #356]	; (80098e4 <tcp_slowtmr+0x584>)
 8009780:	681a      	ldr	r2, [r3, #0]
 8009782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009784:	6a1b      	ldr	r3, [r3, #32]
 8009786:	1ad3      	subs	r3, r2, r3
 8009788:	2bf0      	cmp	r3, #240	; 0xf0
 800978a:	d904      	bls.n	8009796 <tcp_slowtmr+0x436>
        ++pcb_remove;
 800978c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009790:	3301      	adds	r3, #1
 8009792:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8009796:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800979a:	2b00      	cmp	r3, #0
 800979c:	d060      	beq.n	8009860 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800979e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80097a4:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 80097a6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80097a8:	f000 fce8 	bl	800a17c <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 80097ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d010      	beq.n	80097d4 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80097b2:	4b4f      	ldr	r3, [pc, #316]	; (80098f0 <tcp_slowtmr+0x590>)
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80097b8:	429a      	cmp	r2, r3
 80097ba:	d106      	bne.n	80097ca <tcp_slowtmr+0x46a>
 80097bc:	4b4d      	ldr	r3, [pc, #308]	; (80098f4 <tcp_slowtmr+0x594>)
 80097be:	f240 526d 	movw	r2, #1389	; 0x56d
 80097c2:	494d      	ldr	r1, [pc, #308]	; (80098f8 <tcp_slowtmr+0x598>)
 80097c4:	484d      	ldr	r0, [pc, #308]	; (80098fc <tcp_slowtmr+0x59c>)
 80097c6:	f007 ff9b 	bl	8011700 <iprintf>
        prev->next = pcb->next;
 80097ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097cc:	68da      	ldr	r2, [r3, #12]
 80097ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097d0:	60da      	str	r2, [r3, #12]
 80097d2:	e00f      	b.n	80097f4 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80097d4:	4b46      	ldr	r3, [pc, #280]	; (80098f0 <tcp_slowtmr+0x590>)
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80097da:	429a      	cmp	r2, r3
 80097dc:	d006      	beq.n	80097ec <tcp_slowtmr+0x48c>
 80097de:	4b45      	ldr	r3, [pc, #276]	; (80098f4 <tcp_slowtmr+0x594>)
 80097e0:	f240 5271 	movw	r2, #1393	; 0x571
 80097e4:	4946      	ldr	r1, [pc, #280]	; (8009900 <tcp_slowtmr+0x5a0>)
 80097e6:	4845      	ldr	r0, [pc, #276]	; (80098fc <tcp_slowtmr+0x59c>)
 80097e8:	f007 ff8a 	bl	8011700 <iprintf>
        tcp_active_pcbs = pcb->next;
 80097ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097ee:	68db      	ldr	r3, [r3, #12]
 80097f0:	4a3f      	ldr	r2, [pc, #252]	; (80098f0 <tcp_slowtmr+0x590>)
 80097f2:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 80097f4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d013      	beq.n	8009824 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80097fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097fe:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8009800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009802:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8009804:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8009806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009808:	3304      	adds	r3, #4
 800980a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800980c:	8ad2      	ldrh	r2, [r2, #22]
 800980e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009810:	8b09      	ldrh	r1, [r1, #24]
 8009812:	9102      	str	r1, [sp, #8]
 8009814:	9201      	str	r2, [sp, #4]
 8009816:	9300      	str	r3, [sp, #0]
 8009818:	462b      	mov	r3, r5
 800981a:	4622      	mov	r2, r4
 800981c:	4601      	mov	r1, r0
 800981e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009820:	f004 fec8 	bl	800e5b4 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8009824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009826:	691b      	ldr	r3, [r3, #16]
 8009828:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800982a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800982c:	7d1b      	ldrb	r3, [r3, #20]
 800982e:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8009830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009832:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8009834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009836:	68db      	ldr	r3, [r3, #12]
 8009838:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800983a:	6838      	ldr	r0, [r7, #0]
 800983c:	f7ff f838 	bl	80088b0 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8009840:	4b30      	ldr	r3, [pc, #192]	; (8009904 <tcp_slowtmr+0x5a4>)
 8009842:	2200      	movs	r2, #0
 8009844:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	2b00      	cmp	r3, #0
 800984a:	d004      	beq.n	8009856 <tcp_slowtmr+0x4f6>
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	f06f 010c 	mvn.w	r1, #12
 8009852:	68b8      	ldr	r0, [r7, #8]
 8009854:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8009856:	4b2b      	ldr	r3, [pc, #172]	; (8009904 <tcp_slowtmr+0x5a4>)
 8009858:	781b      	ldrb	r3, [r3, #0]
 800985a:	2b00      	cmp	r3, #0
 800985c:	d037      	beq.n	80098ce <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800985e:	e590      	b.n	8009382 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8009860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009862:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8009864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009866:	68db      	ldr	r3, [r3, #12]
 8009868:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800986a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800986c:	7f1b      	ldrb	r3, [r3, #28]
 800986e:	3301      	adds	r3, #1
 8009870:	b2da      	uxtb	r2, r3
 8009872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009874:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8009876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009878:	7f1a      	ldrb	r2, [r3, #28]
 800987a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800987c:	7f5b      	ldrb	r3, [r3, #29]
 800987e:	429a      	cmp	r2, r3
 8009880:	d325      	bcc.n	80098ce <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 8009882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009884:	2200      	movs	r2, #0
 8009886:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8009888:	4b1e      	ldr	r3, [pc, #120]	; (8009904 <tcp_slowtmr+0x5a4>)
 800988a:	2200      	movs	r2, #0
 800988c:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800988e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009890:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009894:	2b00      	cmp	r3, #0
 8009896:	d00b      	beq.n	80098b0 <tcp_slowtmr+0x550>
 8009898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800989a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800989e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80098a0:	6912      	ldr	r2, [r2, #16]
 80098a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80098a4:	4610      	mov	r0, r2
 80098a6:	4798      	blx	r3
 80098a8:	4603      	mov	r3, r0
 80098aa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80098ae:	e002      	b.n	80098b6 <tcp_slowtmr+0x556>
 80098b0:	2300      	movs	r3, #0
 80098b2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 80098b6:	4b13      	ldr	r3, [pc, #76]	; (8009904 <tcp_slowtmr+0x5a4>)
 80098b8:	781b      	ldrb	r3, [r3, #0]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d000      	beq.n	80098c0 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 80098be:	e560      	b.n	8009382 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 80098c0:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d102      	bne.n	80098ce <tcp_slowtmr+0x56e>
          tcp_output(prev);
 80098c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80098ca:	f004 f8bf 	bl	800da4c <tcp_output>
  while (pcb != NULL) {
 80098ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	f47f ad5c 	bne.w	800938e <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 80098d6:	2300      	movs	r3, #0
 80098d8:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 80098da:	4b0b      	ldr	r3, [pc, #44]	; (8009908 <tcp_slowtmr+0x5a8>)
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80098e0:	e067      	b.n	80099b2 <tcp_slowtmr+0x652>
 80098e2:	bf00      	nop
 80098e4:	2000d78c 	.word	0x2000d78c
 80098e8:	10624dd3 	.word	0x10624dd3
 80098ec:	000124f8 	.word	0x000124f8
 80098f0:	2000d788 	.word	0x2000d788
 80098f4:	080145a0 	.word	0x080145a0
 80098f8:	080149d8 	.word	0x080149d8
 80098fc:	080145e4 	.word	0x080145e4
 8009900:	08014a04 	.word	0x08014a04
 8009904:	2000d784 	.word	0x2000d784
 8009908:	2000d798 	.word	0x2000d798
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800990c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800990e:	7d1b      	ldrb	r3, [r3, #20]
 8009910:	2b0a      	cmp	r3, #10
 8009912:	d006      	beq.n	8009922 <tcp_slowtmr+0x5c2>
 8009914:	4b2b      	ldr	r3, [pc, #172]	; (80099c4 <tcp_slowtmr+0x664>)
 8009916:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800991a:	492b      	ldr	r1, [pc, #172]	; (80099c8 <tcp_slowtmr+0x668>)
 800991c:	482b      	ldr	r0, [pc, #172]	; (80099cc <tcp_slowtmr+0x66c>)
 800991e:	f007 feef 	bl	8011700 <iprintf>
    pcb_remove = 0;
 8009922:	2300      	movs	r3, #0
 8009924:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8009928:	4b29      	ldr	r3, [pc, #164]	; (80099d0 <tcp_slowtmr+0x670>)
 800992a:	681a      	ldr	r2, [r3, #0]
 800992c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800992e:	6a1b      	ldr	r3, [r3, #32]
 8009930:	1ad3      	subs	r3, r2, r3
 8009932:	2bf0      	cmp	r3, #240	; 0xf0
 8009934:	d904      	bls.n	8009940 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8009936:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800993a:	3301      	adds	r3, #1
 800993c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8009940:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009944:	2b00      	cmp	r3, #0
 8009946:	d02f      	beq.n	80099a8 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8009948:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800994a:	f000 fc17 	bl	800a17c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800994e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009950:	2b00      	cmp	r3, #0
 8009952:	d010      	beq.n	8009976 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8009954:	4b1f      	ldr	r3, [pc, #124]	; (80099d4 <tcp_slowtmr+0x674>)
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800995a:	429a      	cmp	r2, r3
 800995c:	d106      	bne.n	800996c <tcp_slowtmr+0x60c>
 800995e:	4b19      	ldr	r3, [pc, #100]	; (80099c4 <tcp_slowtmr+0x664>)
 8009960:	f240 52af 	movw	r2, #1455	; 0x5af
 8009964:	491c      	ldr	r1, [pc, #112]	; (80099d8 <tcp_slowtmr+0x678>)
 8009966:	4819      	ldr	r0, [pc, #100]	; (80099cc <tcp_slowtmr+0x66c>)
 8009968:	f007 feca 	bl	8011700 <iprintf>
        prev->next = pcb->next;
 800996c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800996e:	68da      	ldr	r2, [r3, #12]
 8009970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009972:	60da      	str	r2, [r3, #12]
 8009974:	e00f      	b.n	8009996 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8009976:	4b17      	ldr	r3, [pc, #92]	; (80099d4 <tcp_slowtmr+0x674>)
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800997c:	429a      	cmp	r2, r3
 800997e:	d006      	beq.n	800998e <tcp_slowtmr+0x62e>
 8009980:	4b10      	ldr	r3, [pc, #64]	; (80099c4 <tcp_slowtmr+0x664>)
 8009982:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8009986:	4915      	ldr	r1, [pc, #84]	; (80099dc <tcp_slowtmr+0x67c>)
 8009988:	4810      	ldr	r0, [pc, #64]	; (80099cc <tcp_slowtmr+0x66c>)
 800998a:	f007 feb9 	bl	8011700 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800998e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009990:	68db      	ldr	r3, [r3, #12]
 8009992:	4a10      	ldr	r2, [pc, #64]	; (80099d4 <tcp_slowtmr+0x674>)
 8009994:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8009996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009998:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800999a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800999c:	68db      	ldr	r3, [r3, #12]
 800999e:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80099a0:	69f8      	ldr	r0, [r7, #28]
 80099a2:	f7fe ff85 	bl	80088b0 <tcp_free>
 80099a6:	e004      	b.n	80099b2 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 80099a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099aa:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80099ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099ae:	68db      	ldr	r3, [r3, #12]
 80099b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80099b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d1a9      	bne.n	800990c <tcp_slowtmr+0x5ac>
    }
  }
}
 80099b8:	bf00      	nop
 80099ba:	bf00      	nop
 80099bc:	3730      	adds	r7, #48	; 0x30
 80099be:	46bd      	mov	sp, r7
 80099c0:	bdb0      	pop	{r4, r5, r7, pc}
 80099c2:	bf00      	nop
 80099c4:	080145a0 	.word	0x080145a0
 80099c8:	08014a30 	.word	0x08014a30
 80099cc:	080145e4 	.word	0x080145e4
 80099d0:	2000d78c 	.word	0x2000d78c
 80099d4:	2000d798 	.word	0x2000d798
 80099d8:	08014a60 	.word	0x08014a60
 80099dc:	08014a88 	.word	0x08014a88

080099e0 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b082      	sub	sp, #8
 80099e4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 80099e6:	4b2d      	ldr	r3, [pc, #180]	; (8009a9c <tcp_fasttmr+0xbc>)
 80099e8:	781b      	ldrb	r3, [r3, #0]
 80099ea:	3301      	adds	r3, #1
 80099ec:	b2da      	uxtb	r2, r3
 80099ee:	4b2b      	ldr	r3, [pc, #172]	; (8009a9c <tcp_fasttmr+0xbc>)
 80099f0:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 80099f2:	4b2b      	ldr	r3, [pc, #172]	; (8009aa0 <tcp_fasttmr+0xc0>)
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80099f8:	e048      	b.n	8009a8c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	7f9a      	ldrb	r2, [r3, #30]
 80099fe:	4b27      	ldr	r3, [pc, #156]	; (8009a9c <tcp_fasttmr+0xbc>)
 8009a00:	781b      	ldrb	r3, [r3, #0]
 8009a02:	429a      	cmp	r2, r3
 8009a04:	d03f      	beq.n	8009a86 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8009a06:	4b25      	ldr	r3, [pc, #148]	; (8009a9c <tcp_fasttmr+0xbc>)
 8009a08:	781a      	ldrb	r2, [r3, #0]
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	8b5b      	ldrh	r3, [r3, #26]
 8009a12:	f003 0301 	and.w	r3, r3, #1
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d010      	beq.n	8009a3c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	8b5b      	ldrh	r3, [r3, #26]
 8009a1e:	f043 0302 	orr.w	r3, r3, #2
 8009a22:	b29a      	uxth	r2, r3
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8009a28:	6878      	ldr	r0, [r7, #4]
 8009a2a:	f004 f80f 	bl	800da4c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	8b5b      	ldrh	r3, [r3, #26]
 8009a32:	f023 0303 	bic.w	r3, r3, #3
 8009a36:	b29a      	uxth	r2, r3
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	8b5b      	ldrh	r3, [r3, #26]
 8009a40:	f003 0308 	and.w	r3, r3, #8
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d009      	beq.n	8009a5c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	8b5b      	ldrh	r3, [r3, #26]
 8009a4c:	f023 0308 	bic.w	r3, r3, #8
 8009a50:	b29a      	uxth	r2, r3
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8009a56:	6878      	ldr	r0, [r7, #4]
 8009a58:	f7ff f8be 	bl	8008bd8 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	68db      	ldr	r3, [r3, #12]
 8009a60:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d00a      	beq.n	8009a80 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8009a6a:	4b0e      	ldr	r3, [pc, #56]	; (8009aa4 <tcp_fasttmr+0xc4>)
 8009a6c:	2200      	movs	r2, #0
 8009a6e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8009a70:	6878      	ldr	r0, [r7, #4]
 8009a72:	f000 f819 	bl	8009aa8 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8009a76:	4b0b      	ldr	r3, [pc, #44]	; (8009aa4 <tcp_fasttmr+0xc4>)
 8009a78:	781b      	ldrb	r3, [r3, #0]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d000      	beq.n	8009a80 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8009a7e:	e7b8      	b.n	80099f2 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8009a80:	683b      	ldr	r3, [r7, #0]
 8009a82:	607b      	str	r3, [r7, #4]
 8009a84:	e002      	b.n	8009a8c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	68db      	ldr	r3, [r3, #12]
 8009a8a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d1b3      	bne.n	80099fa <tcp_fasttmr+0x1a>
    }
  }
}
 8009a92:	bf00      	nop
 8009a94:	bf00      	nop
 8009a96:	3708      	adds	r7, #8
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	bd80      	pop	{r7, pc}
 8009a9c:	2000054a 	.word	0x2000054a
 8009aa0:	2000d788 	.word	0x2000d788
 8009aa4:	2000d784 	.word	0x2000d784

08009aa8 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8009aa8:	b590      	push	{r4, r7, lr}
 8009aaa:	b085      	sub	sp, #20
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d109      	bne.n	8009aca <tcp_process_refused_data+0x22>
 8009ab6:	4b37      	ldr	r3, [pc, #220]	; (8009b94 <tcp_process_refused_data+0xec>)
 8009ab8:	f240 6209 	movw	r2, #1545	; 0x609
 8009abc:	4936      	ldr	r1, [pc, #216]	; (8009b98 <tcp_process_refused_data+0xf0>)
 8009abe:	4837      	ldr	r0, [pc, #220]	; (8009b9c <tcp_process_refused_data+0xf4>)
 8009ac0:	f007 fe1e 	bl	8011700 <iprintf>
 8009ac4:	f06f 030f 	mvn.w	r3, #15
 8009ac8:	e060      	b.n	8009b8c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009ace:	7b5b      	ldrb	r3, [r3, #13]
 8009ad0:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009ad6:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	2200      	movs	r2, #0
 8009adc:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d00b      	beq.n	8009b00 <tcp_process_refused_data+0x58>
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	6918      	ldr	r0, [r3, #16]
 8009af2:	2300      	movs	r3, #0
 8009af4:	68ba      	ldr	r2, [r7, #8]
 8009af6:	6879      	ldr	r1, [r7, #4]
 8009af8:	47a0      	blx	r4
 8009afa:	4603      	mov	r3, r0
 8009afc:	73fb      	strb	r3, [r7, #15]
 8009afe:	e007      	b.n	8009b10 <tcp_process_refused_data+0x68>
 8009b00:	2300      	movs	r3, #0
 8009b02:	68ba      	ldr	r2, [r7, #8]
 8009b04:	6879      	ldr	r1, [r7, #4]
 8009b06:	2000      	movs	r0, #0
 8009b08:	f000 f8c2 	bl	8009c90 <tcp_recv_null>
 8009b0c:	4603      	mov	r3, r0
 8009b0e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8009b10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d12a      	bne.n	8009b6e <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8009b18:	7bbb      	ldrb	r3, [r7, #14]
 8009b1a:	f003 0320 	and.w	r3, r3, #32
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d033      	beq.n	8009b8a <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b26:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8009b2a:	d005      	beq.n	8009b38 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b30:	3301      	adds	r3, #1
 8009b32:	b29a      	uxth	r2, r3
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d00b      	beq.n	8009b5a <tcp_process_refused_data+0xb2>
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	6918      	ldr	r0, [r3, #16]
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	2200      	movs	r2, #0
 8009b50:	6879      	ldr	r1, [r7, #4]
 8009b52:	47a0      	blx	r4
 8009b54:	4603      	mov	r3, r0
 8009b56:	73fb      	strb	r3, [r7, #15]
 8009b58:	e001      	b.n	8009b5e <tcp_process_refused_data+0xb6>
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8009b5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009b62:	f113 0f0d 	cmn.w	r3, #13
 8009b66:	d110      	bne.n	8009b8a <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8009b68:	f06f 030c 	mvn.w	r3, #12
 8009b6c:	e00e      	b.n	8009b8c <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8009b6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009b72:	f113 0f0d 	cmn.w	r3, #13
 8009b76:	d102      	bne.n	8009b7e <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8009b78:	f06f 030c 	mvn.w	r3, #12
 8009b7c:	e006      	b.n	8009b8c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	68ba      	ldr	r2, [r7, #8]
 8009b82:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8009b84:	f06f 0304 	mvn.w	r3, #4
 8009b88:	e000      	b.n	8009b8c <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8009b8a:	2300      	movs	r3, #0
}
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	3714      	adds	r7, #20
 8009b90:	46bd      	mov	sp, r7
 8009b92:	bd90      	pop	{r4, r7, pc}
 8009b94:	080145a0 	.word	0x080145a0
 8009b98:	08014ab0 	.word	0x08014ab0
 8009b9c:	080145e4 	.word	0x080145e4

08009ba0 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b084      	sub	sp, #16
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8009ba8:	e007      	b.n	8009bba <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8009bb0:	6878      	ldr	r0, [r7, #4]
 8009bb2:	f000 f80a 	bl	8009bca <tcp_seg_free>
    seg = next;
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d1f4      	bne.n	8009baa <tcp_segs_free+0xa>
  }
}
 8009bc0:	bf00      	nop
 8009bc2:	bf00      	nop
 8009bc4:	3710      	adds	r7, #16
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	bd80      	pop	{r7, pc}

08009bca <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8009bca:	b580      	push	{r7, lr}
 8009bcc:	b082      	sub	sp, #8
 8009bce:	af00      	add	r7, sp, #0
 8009bd0:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d00c      	beq.n	8009bf2 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	685b      	ldr	r3, [r3, #4]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d004      	beq.n	8009bea <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	685b      	ldr	r3, [r3, #4]
 8009be4:	4618      	mov	r0, r3
 8009be6:	f7fe fbc3 	bl	8008370 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8009bea:	6879      	ldr	r1, [r7, #4]
 8009bec:	2003      	movs	r0, #3
 8009bee:	f7fd fdad 	bl	800774c <memp_free>
  }
}
 8009bf2:	bf00      	nop
 8009bf4:	3708      	adds	r7, #8
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	bd80      	pop	{r7, pc}
	...

08009bfc <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 8009bfc:	b580      	push	{r7, lr}
 8009bfe:	b082      	sub	sp, #8
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	6078      	str	r0, [r7, #4]
 8009c04:	460b      	mov	r3, r1
 8009c06:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d107      	bne.n	8009c1e <tcp_setprio+0x22>
 8009c0e:	4b07      	ldr	r3, [pc, #28]	; (8009c2c <tcp_setprio+0x30>)
 8009c10:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 8009c14:	4906      	ldr	r1, [pc, #24]	; (8009c30 <tcp_setprio+0x34>)
 8009c16:	4807      	ldr	r0, [pc, #28]	; (8009c34 <tcp_setprio+0x38>)
 8009c18:	f007 fd72 	bl	8011700 <iprintf>
 8009c1c:	e002      	b.n	8009c24 <tcp_setprio+0x28>

  pcb->prio = prio;
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	78fa      	ldrb	r2, [r7, #3]
 8009c22:	755a      	strb	r2, [r3, #21]
}
 8009c24:	3708      	adds	r7, #8
 8009c26:	46bd      	mov	sp, r7
 8009c28:	bd80      	pop	{r7, pc}
 8009c2a:	bf00      	nop
 8009c2c:	080145a0 	.word	0x080145a0
 8009c30:	08014ad8 	.word	0x08014ad8
 8009c34:	080145e4 	.word	0x080145e4

08009c38 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8009c38:	b580      	push	{r7, lr}
 8009c3a:	b084      	sub	sp, #16
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d106      	bne.n	8009c54 <tcp_seg_copy+0x1c>
 8009c46:	4b0f      	ldr	r3, [pc, #60]	; (8009c84 <tcp_seg_copy+0x4c>)
 8009c48:	f240 6282 	movw	r2, #1666	; 0x682
 8009c4c:	490e      	ldr	r1, [pc, #56]	; (8009c88 <tcp_seg_copy+0x50>)
 8009c4e:	480f      	ldr	r0, [pc, #60]	; (8009c8c <tcp_seg_copy+0x54>)
 8009c50:	f007 fd56 	bl	8011700 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8009c54:	2003      	movs	r0, #3
 8009c56:	f7fd fd2d 	bl	80076b4 <memp_malloc>
 8009c5a:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d101      	bne.n	8009c66 <tcp_seg_copy+0x2e>
    return NULL;
 8009c62:	2300      	movs	r3, #0
 8009c64:	e00a      	b.n	8009c7c <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8009c66:	2210      	movs	r2, #16
 8009c68:	6879      	ldr	r1, [r7, #4]
 8009c6a:	68f8      	ldr	r0, [r7, #12]
 8009c6c:	f007 fc6e 	bl	801154c <memcpy>
  pbuf_ref(cseg->p);
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	685b      	ldr	r3, [r3, #4]
 8009c74:	4618      	mov	r0, r3
 8009c76:	f7fe fc1b 	bl	80084b0 <pbuf_ref>
  return cseg;
 8009c7a:	68fb      	ldr	r3, [r7, #12]
}
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	3710      	adds	r7, #16
 8009c80:	46bd      	mov	sp, r7
 8009c82:	bd80      	pop	{r7, pc}
 8009c84:	080145a0 	.word	0x080145a0
 8009c88:	08014af4 	.word	0x08014af4
 8009c8c:	080145e4 	.word	0x080145e4

08009c90 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8009c90:	b580      	push	{r7, lr}
 8009c92:	b084      	sub	sp, #16
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	60f8      	str	r0, [r7, #12]
 8009c98:	60b9      	str	r1, [r7, #8]
 8009c9a:	607a      	str	r2, [r7, #4]
 8009c9c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8009c9e:	68bb      	ldr	r3, [r7, #8]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d109      	bne.n	8009cb8 <tcp_recv_null+0x28>
 8009ca4:	4b12      	ldr	r3, [pc, #72]	; (8009cf0 <tcp_recv_null+0x60>)
 8009ca6:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8009caa:	4912      	ldr	r1, [pc, #72]	; (8009cf4 <tcp_recv_null+0x64>)
 8009cac:	4812      	ldr	r0, [pc, #72]	; (8009cf8 <tcp_recv_null+0x68>)
 8009cae:	f007 fd27 	bl	8011700 <iprintf>
 8009cb2:	f06f 030f 	mvn.w	r3, #15
 8009cb6:	e016      	b.n	8009ce6 <tcp_recv_null+0x56>

  if (p != NULL) {
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d009      	beq.n	8009cd2 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	891b      	ldrh	r3, [r3, #8]
 8009cc2:	4619      	mov	r1, r3
 8009cc4:	68b8      	ldr	r0, [r7, #8]
 8009cc6:	f7ff fab5 	bl	8009234 <tcp_recved>
    pbuf_free(p);
 8009cca:	6878      	ldr	r0, [r7, #4]
 8009ccc:	f7fe fb50 	bl	8008370 <pbuf_free>
 8009cd0:	e008      	b.n	8009ce4 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8009cd2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d104      	bne.n	8009ce4 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8009cda:	68b8      	ldr	r0, [r7, #8]
 8009cdc:	f7fe ffe6 	bl	8008cac <tcp_close>
 8009ce0:	4603      	mov	r3, r0
 8009ce2:	e000      	b.n	8009ce6 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8009ce4:	2300      	movs	r3, #0
}
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	3710      	adds	r7, #16
 8009cea:	46bd      	mov	sp, r7
 8009cec:	bd80      	pop	{r7, pc}
 8009cee:	bf00      	nop
 8009cf0:	080145a0 	.word	0x080145a0
 8009cf4:	08014b10 	.word	0x08014b10
 8009cf8:	080145e4 	.word	0x080145e4

08009cfc <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	b086      	sub	sp, #24
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	4603      	mov	r3, r0
 8009d04:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8009d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	db01      	blt.n	8009d12 <tcp_kill_prio+0x16>
 8009d0e:	79fb      	ldrb	r3, [r7, #7]
 8009d10:	e000      	b.n	8009d14 <tcp_kill_prio+0x18>
 8009d12:	237f      	movs	r3, #127	; 0x7f
 8009d14:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8009d16:	7afb      	ldrb	r3, [r7, #11]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d034      	beq.n	8009d86 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8009d1c:	7afb      	ldrb	r3, [r7, #11]
 8009d1e:	3b01      	subs	r3, #1
 8009d20:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8009d22:	2300      	movs	r3, #0
 8009d24:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8009d26:	2300      	movs	r3, #0
 8009d28:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009d2a:	4b19      	ldr	r3, [pc, #100]	; (8009d90 <tcp_kill_prio+0x94>)
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	617b      	str	r3, [r7, #20]
 8009d30:	e01f      	b.n	8009d72 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8009d32:	697b      	ldr	r3, [r7, #20]
 8009d34:	7d5b      	ldrb	r3, [r3, #21]
 8009d36:	7afa      	ldrb	r2, [r7, #11]
 8009d38:	429a      	cmp	r2, r3
 8009d3a:	d80c      	bhi.n	8009d56 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8009d3c:	697b      	ldr	r3, [r7, #20]
 8009d3e:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8009d40:	7afa      	ldrb	r2, [r7, #11]
 8009d42:	429a      	cmp	r2, r3
 8009d44:	d112      	bne.n	8009d6c <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8009d46:	4b13      	ldr	r3, [pc, #76]	; (8009d94 <tcp_kill_prio+0x98>)
 8009d48:	681a      	ldr	r2, [r3, #0]
 8009d4a:	697b      	ldr	r3, [r7, #20]
 8009d4c:	6a1b      	ldr	r3, [r3, #32]
 8009d4e:	1ad3      	subs	r3, r2, r3
 8009d50:	68fa      	ldr	r2, [r7, #12]
 8009d52:	429a      	cmp	r2, r3
 8009d54:	d80a      	bhi.n	8009d6c <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8009d56:	4b0f      	ldr	r3, [pc, #60]	; (8009d94 <tcp_kill_prio+0x98>)
 8009d58:	681a      	ldr	r2, [r3, #0]
 8009d5a:	697b      	ldr	r3, [r7, #20]
 8009d5c:	6a1b      	ldr	r3, [r3, #32]
 8009d5e:	1ad3      	subs	r3, r2, r3
 8009d60:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8009d62:	697b      	ldr	r3, [r7, #20]
 8009d64:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8009d66:	697b      	ldr	r3, [r7, #20]
 8009d68:	7d5b      	ldrb	r3, [r3, #21]
 8009d6a:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009d6c:	697b      	ldr	r3, [r7, #20]
 8009d6e:	68db      	ldr	r3, [r3, #12]
 8009d70:	617b      	str	r3, [r7, #20]
 8009d72:	697b      	ldr	r3, [r7, #20]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d1dc      	bne.n	8009d32 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8009d78:	693b      	ldr	r3, [r7, #16]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d004      	beq.n	8009d88 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8009d7e:	6938      	ldr	r0, [r7, #16]
 8009d80:	f7ff f87e 	bl	8008e80 <tcp_abort>
 8009d84:	e000      	b.n	8009d88 <tcp_kill_prio+0x8c>
    return;
 8009d86:	bf00      	nop
  }
}
 8009d88:	3718      	adds	r7, #24
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	bd80      	pop	{r7, pc}
 8009d8e:	bf00      	nop
 8009d90:	2000d788 	.word	0x2000d788
 8009d94:	2000d78c 	.word	0x2000d78c

08009d98 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	b086      	sub	sp, #24
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	4603      	mov	r3, r0
 8009da0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8009da2:	79fb      	ldrb	r3, [r7, #7]
 8009da4:	2b08      	cmp	r3, #8
 8009da6:	d009      	beq.n	8009dbc <tcp_kill_state+0x24>
 8009da8:	79fb      	ldrb	r3, [r7, #7]
 8009daa:	2b09      	cmp	r3, #9
 8009dac:	d006      	beq.n	8009dbc <tcp_kill_state+0x24>
 8009dae:	4b1a      	ldr	r3, [pc, #104]	; (8009e18 <tcp_kill_state+0x80>)
 8009db0:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8009db4:	4919      	ldr	r1, [pc, #100]	; (8009e1c <tcp_kill_state+0x84>)
 8009db6:	481a      	ldr	r0, [pc, #104]	; (8009e20 <tcp_kill_state+0x88>)
 8009db8:	f007 fca2 	bl	8011700 <iprintf>

  inactivity = 0;
 8009dbc:	2300      	movs	r3, #0
 8009dbe:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8009dc0:	2300      	movs	r3, #0
 8009dc2:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009dc4:	4b17      	ldr	r3, [pc, #92]	; (8009e24 <tcp_kill_state+0x8c>)
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	617b      	str	r3, [r7, #20]
 8009dca:	e017      	b.n	8009dfc <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8009dcc:	697b      	ldr	r3, [r7, #20]
 8009dce:	7d1b      	ldrb	r3, [r3, #20]
 8009dd0:	79fa      	ldrb	r2, [r7, #7]
 8009dd2:	429a      	cmp	r2, r3
 8009dd4:	d10f      	bne.n	8009df6 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8009dd6:	4b14      	ldr	r3, [pc, #80]	; (8009e28 <tcp_kill_state+0x90>)
 8009dd8:	681a      	ldr	r2, [r3, #0]
 8009dda:	697b      	ldr	r3, [r7, #20]
 8009ddc:	6a1b      	ldr	r3, [r3, #32]
 8009dde:	1ad3      	subs	r3, r2, r3
 8009de0:	68fa      	ldr	r2, [r7, #12]
 8009de2:	429a      	cmp	r2, r3
 8009de4:	d807      	bhi.n	8009df6 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8009de6:	4b10      	ldr	r3, [pc, #64]	; (8009e28 <tcp_kill_state+0x90>)
 8009de8:	681a      	ldr	r2, [r3, #0]
 8009dea:	697b      	ldr	r3, [r7, #20]
 8009dec:	6a1b      	ldr	r3, [r3, #32]
 8009dee:	1ad3      	subs	r3, r2, r3
 8009df0:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8009df2:	697b      	ldr	r3, [r7, #20]
 8009df4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009df6:	697b      	ldr	r3, [r7, #20]
 8009df8:	68db      	ldr	r3, [r3, #12]
 8009dfa:	617b      	str	r3, [r7, #20]
 8009dfc:	697b      	ldr	r3, [r7, #20]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d1e4      	bne.n	8009dcc <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8009e02:	693b      	ldr	r3, [r7, #16]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d003      	beq.n	8009e10 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8009e08:	2100      	movs	r1, #0
 8009e0a:	6938      	ldr	r0, [r7, #16]
 8009e0c:	f7fe ff7a 	bl	8008d04 <tcp_abandon>
  }
}
 8009e10:	bf00      	nop
 8009e12:	3718      	adds	r7, #24
 8009e14:	46bd      	mov	sp, r7
 8009e16:	bd80      	pop	{r7, pc}
 8009e18:	080145a0 	.word	0x080145a0
 8009e1c:	08014b2c 	.word	0x08014b2c
 8009e20:	080145e4 	.word	0x080145e4
 8009e24:	2000d788 	.word	0x2000d788
 8009e28:	2000d78c 	.word	0x2000d78c

08009e2c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	b084      	sub	sp, #16
 8009e30:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8009e32:	2300      	movs	r3, #0
 8009e34:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8009e36:	2300      	movs	r3, #0
 8009e38:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009e3a:	4b12      	ldr	r3, [pc, #72]	; (8009e84 <tcp_kill_timewait+0x58>)
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	60fb      	str	r3, [r7, #12]
 8009e40:	e012      	b.n	8009e68 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8009e42:	4b11      	ldr	r3, [pc, #68]	; (8009e88 <tcp_kill_timewait+0x5c>)
 8009e44:	681a      	ldr	r2, [r3, #0]
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	6a1b      	ldr	r3, [r3, #32]
 8009e4a:	1ad3      	subs	r3, r2, r3
 8009e4c:	687a      	ldr	r2, [r7, #4]
 8009e4e:	429a      	cmp	r2, r3
 8009e50:	d807      	bhi.n	8009e62 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8009e52:	4b0d      	ldr	r3, [pc, #52]	; (8009e88 <tcp_kill_timewait+0x5c>)
 8009e54:	681a      	ldr	r2, [r3, #0]
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	6a1b      	ldr	r3, [r3, #32]
 8009e5a:	1ad3      	subs	r3, r2, r3
 8009e5c:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	68db      	ldr	r3, [r3, #12]
 8009e66:	60fb      	str	r3, [r7, #12]
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d1e9      	bne.n	8009e42 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8009e6e:	68bb      	ldr	r3, [r7, #8]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d002      	beq.n	8009e7a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8009e74:	68b8      	ldr	r0, [r7, #8]
 8009e76:	f7ff f803 	bl	8008e80 <tcp_abort>
  }
}
 8009e7a:	bf00      	nop
 8009e7c:	3710      	adds	r7, #16
 8009e7e:	46bd      	mov	sp, r7
 8009e80:	bd80      	pop	{r7, pc}
 8009e82:	bf00      	nop
 8009e84:	2000d798 	.word	0x2000d798
 8009e88:	2000d78c 	.word	0x2000d78c

08009e8c <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	b082      	sub	sp, #8
 8009e90:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8009e92:	4b10      	ldr	r3, [pc, #64]	; (8009ed4 <tcp_handle_closepend+0x48>)
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8009e98:	e014      	b.n	8009ec4 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	68db      	ldr	r3, [r3, #12]
 8009e9e:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	8b5b      	ldrh	r3, [r3, #26]
 8009ea4:	f003 0308 	and.w	r3, r3, #8
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d009      	beq.n	8009ec0 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	8b5b      	ldrh	r3, [r3, #26]
 8009eb0:	f023 0308 	bic.w	r3, r3, #8
 8009eb4:	b29a      	uxth	r2, r3
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8009eba:	6878      	ldr	r0, [r7, #4]
 8009ebc:	f7fe fe8c 	bl	8008bd8 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8009ec0:	683b      	ldr	r3, [r7, #0]
 8009ec2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d1e7      	bne.n	8009e9a <tcp_handle_closepend+0xe>
  }
}
 8009eca:	bf00      	nop
 8009ecc:	bf00      	nop
 8009ece:	3708      	adds	r7, #8
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	bd80      	pop	{r7, pc}
 8009ed4:	2000d788 	.word	0x2000d788

08009ed8 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8009ed8:	b580      	push	{r7, lr}
 8009eda:	b084      	sub	sp, #16
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	4603      	mov	r3, r0
 8009ee0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009ee2:	2001      	movs	r0, #1
 8009ee4:	f7fd fbe6 	bl	80076b4 <memp_malloc>
 8009ee8:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d126      	bne.n	8009f3e <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8009ef0:	f7ff ffcc 	bl	8009e8c <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8009ef4:	f7ff ff9a 	bl	8009e2c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009ef8:	2001      	movs	r0, #1
 8009efa:	f7fd fbdb 	bl	80076b4 <memp_malloc>
 8009efe:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d11b      	bne.n	8009f3e <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8009f06:	2009      	movs	r0, #9
 8009f08:	f7ff ff46 	bl	8009d98 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009f0c:	2001      	movs	r0, #1
 8009f0e:	f7fd fbd1 	bl	80076b4 <memp_malloc>
 8009f12:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d111      	bne.n	8009f3e <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8009f1a:	2008      	movs	r0, #8
 8009f1c:	f7ff ff3c 	bl	8009d98 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009f20:	2001      	movs	r0, #1
 8009f22:	f7fd fbc7 	bl	80076b4 <memp_malloc>
 8009f26:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d107      	bne.n	8009f3e <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8009f2e:	79fb      	ldrb	r3, [r7, #7]
 8009f30:	4618      	mov	r0, r3
 8009f32:	f7ff fee3 	bl	8009cfc <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009f36:	2001      	movs	r0, #1
 8009f38:	f7fd fbbc 	bl	80076b4 <memp_malloc>
 8009f3c:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d03f      	beq.n	8009fc4 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8009f44:	229c      	movs	r2, #156	; 0x9c
 8009f46:	2100      	movs	r1, #0
 8009f48:	68f8      	ldr	r0, [r7, #12]
 8009f4a:	f007 fb27 	bl	801159c <memset>
    pcb->prio = prio;
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	79fa      	ldrb	r2, [r7, #7]
 8009f52:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8009f5a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8009f64:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	22ff      	movs	r2, #255	; 0xff
 8009f72:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	f44f 7206 	mov.w	r2, #536	; 0x218
 8009f7a:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	2206      	movs	r2, #6
 8009f80:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	2206      	movs	r2, #6
 8009f88:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009f90:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	2201      	movs	r2, #1
 8009f96:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8009f9a:	4b0d      	ldr	r3, [pc, #52]	; (8009fd0 <tcp_alloc+0xf8>)
 8009f9c:	681a      	ldr	r2, [r3, #0]
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8009fa2:	4b0c      	ldr	r3, [pc, #48]	; (8009fd4 <tcp_alloc+0xfc>)
 8009fa4:	781a      	ldrb	r2, [r3, #0]
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8009fb0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	4a08      	ldr	r2, [pc, #32]	; (8009fd8 <tcp_alloc+0x100>)
 8009fb8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	4a07      	ldr	r2, [pc, #28]	; (8009fdc <tcp_alloc+0x104>)
 8009fc0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8009fc4:	68fb      	ldr	r3, [r7, #12]
}
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	3710      	adds	r7, #16
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	bd80      	pop	{r7, pc}
 8009fce:	bf00      	nop
 8009fd0:	2000d78c 	.word	0x2000d78c
 8009fd4:	2000054a 	.word	0x2000054a
 8009fd8:	08009c91 	.word	0x08009c91
 8009fdc:	006ddd00 	.word	0x006ddd00

08009fe0 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	b084      	sub	sp, #16
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	4603      	mov	r3, r0
 8009fe8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8009fea:	2040      	movs	r0, #64	; 0x40
 8009fec:	f7ff ff74 	bl	8009ed8 <tcp_alloc>
 8009ff0:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8009ff2:	68fb      	ldr	r3, [r7, #12]
}
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	3710      	adds	r7, #16
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	bd80      	pop	{r7, pc}

08009ffc <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8009ffc:	b480      	push	{r7}
 8009ffe:	b083      	sub	sp, #12
 800a000:	af00      	add	r7, sp, #0
 800a002:	6078      	str	r0, [r7, #4]
 800a004:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d002      	beq.n	800a012 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	683a      	ldr	r2, [r7, #0]
 800a010:	611a      	str	r2, [r3, #16]
  }
}
 800a012:	bf00      	nop
 800a014:	370c      	adds	r7, #12
 800a016:	46bd      	mov	sp, r7
 800a018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a01c:	4770      	bx	lr
	...

0800a020 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800a020:	b580      	push	{r7, lr}
 800a022:	b082      	sub	sp, #8
 800a024:	af00      	add	r7, sp, #0
 800a026:	6078      	str	r0, [r7, #4]
 800a028:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d00e      	beq.n	800a04e <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	7d1b      	ldrb	r3, [r3, #20]
 800a034:	2b01      	cmp	r3, #1
 800a036:	d106      	bne.n	800a046 <tcp_recv+0x26>
 800a038:	4b07      	ldr	r3, [pc, #28]	; (800a058 <tcp_recv+0x38>)
 800a03a:	f240 72df 	movw	r2, #2015	; 0x7df
 800a03e:	4907      	ldr	r1, [pc, #28]	; (800a05c <tcp_recv+0x3c>)
 800a040:	4807      	ldr	r0, [pc, #28]	; (800a060 <tcp_recv+0x40>)
 800a042:	f007 fb5d 	bl	8011700 <iprintf>
    pcb->recv = recv;
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	683a      	ldr	r2, [r7, #0]
 800a04a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800a04e:	bf00      	nop
 800a050:	3708      	adds	r7, #8
 800a052:	46bd      	mov	sp, r7
 800a054:	bd80      	pop	{r7, pc}
 800a056:	bf00      	nop
 800a058:	080145a0 	.word	0x080145a0
 800a05c:	08014b3c 	.word	0x08014b3c
 800a060:	080145e4 	.word	0x080145e4

0800a064 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800a064:	b580      	push	{r7, lr}
 800a066:	b082      	sub	sp, #8
 800a068:	af00      	add	r7, sp, #0
 800a06a:	6078      	str	r0, [r7, #4]
 800a06c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d00e      	beq.n	800a092 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	7d1b      	ldrb	r3, [r3, #20]
 800a078:	2b01      	cmp	r3, #1
 800a07a:	d106      	bne.n	800a08a <tcp_sent+0x26>
 800a07c:	4b07      	ldr	r3, [pc, #28]	; (800a09c <tcp_sent+0x38>)
 800a07e:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800a082:	4907      	ldr	r1, [pc, #28]	; (800a0a0 <tcp_sent+0x3c>)
 800a084:	4807      	ldr	r0, [pc, #28]	; (800a0a4 <tcp_sent+0x40>)
 800a086:	f007 fb3b 	bl	8011700 <iprintf>
    pcb->sent = sent;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	683a      	ldr	r2, [r7, #0]
 800a08e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800a092:	bf00      	nop
 800a094:	3708      	adds	r7, #8
 800a096:	46bd      	mov	sp, r7
 800a098:	bd80      	pop	{r7, pc}
 800a09a:	bf00      	nop
 800a09c:	080145a0 	.word	0x080145a0
 800a0a0:	08014b64 	.word	0x08014b64
 800a0a4:	080145e4 	.word	0x080145e4

0800a0a8 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800a0a8:	b580      	push	{r7, lr}
 800a0aa:	b082      	sub	sp, #8
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	6078      	str	r0, [r7, #4]
 800a0b0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d00e      	beq.n	800a0d6 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	7d1b      	ldrb	r3, [r3, #20]
 800a0bc:	2b01      	cmp	r3, #1
 800a0be:	d106      	bne.n	800a0ce <tcp_err+0x26>
 800a0c0:	4b07      	ldr	r3, [pc, #28]	; (800a0e0 <tcp_err+0x38>)
 800a0c2:	f640 020d 	movw	r2, #2061	; 0x80d
 800a0c6:	4907      	ldr	r1, [pc, #28]	; (800a0e4 <tcp_err+0x3c>)
 800a0c8:	4807      	ldr	r0, [pc, #28]	; (800a0e8 <tcp_err+0x40>)
 800a0ca:	f007 fb19 	bl	8011700 <iprintf>
    pcb->errf = err;
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	683a      	ldr	r2, [r7, #0]
 800a0d2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800a0d6:	bf00      	nop
 800a0d8:	3708      	adds	r7, #8
 800a0da:	46bd      	mov	sp, r7
 800a0dc:	bd80      	pop	{r7, pc}
 800a0de:	bf00      	nop
 800a0e0:	080145a0 	.word	0x080145a0
 800a0e4:	08014b8c 	.word	0x08014b8c
 800a0e8:	080145e4 	.word	0x080145e4

0800a0ec <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800a0ec:	b480      	push	{r7}
 800a0ee:	b085      	sub	sp, #20
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]
 800a0f4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d008      	beq.n	800a10e <tcp_accept+0x22>
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	7d1b      	ldrb	r3, [r3, #20]
 800a100:	2b01      	cmp	r3, #1
 800a102:	d104      	bne.n	800a10e <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	683a      	ldr	r2, [r7, #0]
 800a10c:	619a      	str	r2, [r3, #24]
  }
}
 800a10e:	bf00      	nop
 800a110:	3714      	adds	r7, #20
 800a112:	46bd      	mov	sp, r7
 800a114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a118:	4770      	bx	lr
	...

0800a11c <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b084      	sub	sp, #16
 800a120:	af00      	add	r7, sp, #0
 800a122:	60f8      	str	r0, [r7, #12]
 800a124:	60b9      	str	r1, [r7, #8]
 800a126:	4613      	mov	r3, r2
 800a128:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d107      	bne.n	800a140 <tcp_poll+0x24>
 800a130:	4b0e      	ldr	r3, [pc, #56]	; (800a16c <tcp_poll+0x50>)
 800a132:	f640 023d 	movw	r2, #2109	; 0x83d
 800a136:	490e      	ldr	r1, [pc, #56]	; (800a170 <tcp_poll+0x54>)
 800a138:	480e      	ldr	r0, [pc, #56]	; (800a174 <tcp_poll+0x58>)
 800a13a:	f007 fae1 	bl	8011700 <iprintf>
 800a13e:	e011      	b.n	800a164 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	7d1b      	ldrb	r3, [r3, #20]
 800a144:	2b01      	cmp	r3, #1
 800a146:	d106      	bne.n	800a156 <tcp_poll+0x3a>
 800a148:	4b08      	ldr	r3, [pc, #32]	; (800a16c <tcp_poll+0x50>)
 800a14a:	f640 023e 	movw	r2, #2110	; 0x83e
 800a14e:	490a      	ldr	r1, [pc, #40]	; (800a178 <tcp_poll+0x5c>)
 800a150:	4808      	ldr	r0, [pc, #32]	; (800a174 <tcp_poll+0x58>)
 800a152:	f007 fad5 	bl	8011700 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	68ba      	ldr	r2, [r7, #8]
 800a15a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	79fa      	ldrb	r2, [r7, #7]
 800a162:	775a      	strb	r2, [r3, #29]
}
 800a164:	3710      	adds	r7, #16
 800a166:	46bd      	mov	sp, r7
 800a168:	bd80      	pop	{r7, pc}
 800a16a:	bf00      	nop
 800a16c:	080145a0 	.word	0x080145a0
 800a170:	08014bb4 	.word	0x08014bb4
 800a174:	080145e4 	.word	0x080145e4
 800a178:	08014bcc 	.word	0x08014bcc

0800a17c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b082      	sub	sp, #8
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d107      	bne.n	800a19a <tcp_pcb_purge+0x1e>
 800a18a:	4b21      	ldr	r3, [pc, #132]	; (800a210 <tcp_pcb_purge+0x94>)
 800a18c:	f640 0251 	movw	r2, #2129	; 0x851
 800a190:	4920      	ldr	r1, [pc, #128]	; (800a214 <tcp_pcb_purge+0x98>)
 800a192:	4821      	ldr	r0, [pc, #132]	; (800a218 <tcp_pcb_purge+0x9c>)
 800a194:	f007 fab4 	bl	8011700 <iprintf>
 800a198:	e037      	b.n	800a20a <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	7d1b      	ldrb	r3, [r3, #20]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d033      	beq.n	800a20a <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800a1a6:	2b0a      	cmp	r3, #10
 800a1a8:	d02f      	beq.n	800a20a <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800a1ae:	2b01      	cmp	r3, #1
 800a1b0:	d02b      	beq.n	800a20a <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d007      	beq.n	800a1ca <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a1be:	4618      	mov	r0, r3
 800a1c0:	f7fe f8d6 	bl	8008370 <pbuf_free>
      pcb->refused_data = NULL;
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	2200      	movs	r2, #0
 800a1c8:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d002      	beq.n	800a1d8 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800a1d2:	6878      	ldr	r0, [r7, #4]
 800a1d4:	f000 f986 	bl	800a4e4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a1de:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a1e4:	4618      	mov	r0, r3
 800a1e6:	f7ff fcdb 	bl	8009ba0 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	f7ff fcd6 	bl	8009ba0 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	66da      	str	r2, [r3, #108]	; 0x6c
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	2200      	movs	r2, #0
 800a206:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800a20a:	3708      	adds	r7, #8
 800a20c:	46bd      	mov	sp, r7
 800a20e:	bd80      	pop	{r7, pc}
 800a210:	080145a0 	.word	0x080145a0
 800a214:	08014bec 	.word	0x08014bec
 800a218:	080145e4 	.word	0x080145e4

0800a21c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800a21c:	b580      	push	{r7, lr}
 800a21e:	b084      	sub	sp, #16
 800a220:	af00      	add	r7, sp, #0
 800a222:	6078      	str	r0, [r7, #4]
 800a224:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800a226:	683b      	ldr	r3, [r7, #0]
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d106      	bne.n	800a23a <tcp_pcb_remove+0x1e>
 800a22c:	4b3e      	ldr	r3, [pc, #248]	; (800a328 <tcp_pcb_remove+0x10c>)
 800a22e:	f640 0283 	movw	r2, #2179	; 0x883
 800a232:	493e      	ldr	r1, [pc, #248]	; (800a32c <tcp_pcb_remove+0x110>)
 800a234:	483e      	ldr	r0, [pc, #248]	; (800a330 <tcp_pcb_remove+0x114>)
 800a236:	f007 fa63 	bl	8011700 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d106      	bne.n	800a24e <tcp_pcb_remove+0x32>
 800a240:	4b39      	ldr	r3, [pc, #228]	; (800a328 <tcp_pcb_remove+0x10c>)
 800a242:	f640 0284 	movw	r2, #2180	; 0x884
 800a246:	493b      	ldr	r1, [pc, #236]	; (800a334 <tcp_pcb_remove+0x118>)
 800a248:	4839      	ldr	r0, [pc, #228]	; (800a330 <tcp_pcb_remove+0x114>)
 800a24a:	f007 fa59 	bl	8011700 <iprintf>

  TCP_RMV(pcblist, pcb);
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	683a      	ldr	r2, [r7, #0]
 800a254:	429a      	cmp	r2, r3
 800a256:	d105      	bne.n	800a264 <tcp_pcb_remove+0x48>
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	68da      	ldr	r2, [r3, #12]
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	601a      	str	r2, [r3, #0]
 800a262:	e013      	b.n	800a28c <tcp_pcb_remove+0x70>
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	60fb      	str	r3, [r7, #12]
 800a26a:	e00c      	b.n	800a286 <tcp_pcb_remove+0x6a>
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	68db      	ldr	r3, [r3, #12]
 800a270:	683a      	ldr	r2, [r7, #0]
 800a272:	429a      	cmp	r2, r3
 800a274:	d104      	bne.n	800a280 <tcp_pcb_remove+0x64>
 800a276:	683b      	ldr	r3, [r7, #0]
 800a278:	68da      	ldr	r2, [r3, #12]
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	60da      	str	r2, [r3, #12]
 800a27e:	e005      	b.n	800a28c <tcp_pcb_remove+0x70>
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	68db      	ldr	r3, [r3, #12]
 800a284:	60fb      	str	r3, [r7, #12]
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d1ef      	bne.n	800a26c <tcp_pcb_remove+0x50>
 800a28c:	683b      	ldr	r3, [r7, #0]
 800a28e:	2200      	movs	r2, #0
 800a290:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800a292:	6838      	ldr	r0, [r7, #0]
 800a294:	f7ff ff72 	bl	800a17c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800a298:	683b      	ldr	r3, [r7, #0]
 800a29a:	7d1b      	ldrb	r3, [r3, #20]
 800a29c:	2b0a      	cmp	r3, #10
 800a29e:	d013      	beq.n	800a2c8 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800a2a0:	683b      	ldr	r3, [r7, #0]
 800a2a2:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800a2a4:	2b01      	cmp	r3, #1
 800a2a6:	d00f      	beq.n	800a2c8 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800a2a8:	683b      	ldr	r3, [r7, #0]
 800a2aa:	8b5b      	ldrh	r3, [r3, #26]
 800a2ac:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d009      	beq.n	800a2c8 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800a2b4:	683b      	ldr	r3, [r7, #0]
 800a2b6:	8b5b      	ldrh	r3, [r3, #26]
 800a2b8:	f043 0302 	orr.w	r3, r3, #2
 800a2bc:	b29a      	uxth	r2, r3
 800a2be:	683b      	ldr	r3, [r7, #0]
 800a2c0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800a2c2:	6838      	ldr	r0, [r7, #0]
 800a2c4:	f003 fbc2 	bl	800da4c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800a2c8:	683b      	ldr	r3, [r7, #0]
 800a2ca:	7d1b      	ldrb	r3, [r3, #20]
 800a2cc:	2b01      	cmp	r3, #1
 800a2ce:	d020      	beq.n	800a312 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800a2d0:	683b      	ldr	r3, [r7, #0]
 800a2d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d006      	beq.n	800a2e6 <tcp_pcb_remove+0xca>
 800a2d8:	4b13      	ldr	r3, [pc, #76]	; (800a328 <tcp_pcb_remove+0x10c>)
 800a2da:	f640 0293 	movw	r2, #2195	; 0x893
 800a2de:	4916      	ldr	r1, [pc, #88]	; (800a338 <tcp_pcb_remove+0x11c>)
 800a2e0:	4813      	ldr	r0, [pc, #76]	; (800a330 <tcp_pcb_remove+0x114>)
 800a2e2:	f007 fa0d 	bl	8011700 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800a2e6:	683b      	ldr	r3, [r7, #0]
 800a2e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d006      	beq.n	800a2fc <tcp_pcb_remove+0xe0>
 800a2ee:	4b0e      	ldr	r3, [pc, #56]	; (800a328 <tcp_pcb_remove+0x10c>)
 800a2f0:	f640 0294 	movw	r2, #2196	; 0x894
 800a2f4:	4911      	ldr	r1, [pc, #68]	; (800a33c <tcp_pcb_remove+0x120>)
 800a2f6:	480e      	ldr	r0, [pc, #56]	; (800a330 <tcp_pcb_remove+0x114>)
 800a2f8:	f007 fa02 	bl	8011700 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800a2fc:	683b      	ldr	r3, [r7, #0]
 800a2fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a300:	2b00      	cmp	r3, #0
 800a302:	d006      	beq.n	800a312 <tcp_pcb_remove+0xf6>
 800a304:	4b08      	ldr	r3, [pc, #32]	; (800a328 <tcp_pcb_remove+0x10c>)
 800a306:	f640 0296 	movw	r2, #2198	; 0x896
 800a30a:	490d      	ldr	r1, [pc, #52]	; (800a340 <tcp_pcb_remove+0x124>)
 800a30c:	4808      	ldr	r0, [pc, #32]	; (800a330 <tcp_pcb_remove+0x114>)
 800a30e:	f007 f9f7 	bl	8011700 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800a312:	683b      	ldr	r3, [r7, #0]
 800a314:	2200      	movs	r2, #0
 800a316:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800a318:	683b      	ldr	r3, [r7, #0]
 800a31a:	2200      	movs	r2, #0
 800a31c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800a31e:	bf00      	nop
 800a320:	3710      	adds	r7, #16
 800a322:	46bd      	mov	sp, r7
 800a324:	bd80      	pop	{r7, pc}
 800a326:	bf00      	nop
 800a328:	080145a0 	.word	0x080145a0
 800a32c:	08014c08 	.word	0x08014c08
 800a330:	080145e4 	.word	0x080145e4
 800a334:	08014c24 	.word	0x08014c24
 800a338:	08014c44 	.word	0x08014c44
 800a33c:	08014c5c 	.word	0x08014c5c
 800a340:	08014c78 	.word	0x08014c78

0800a344 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800a344:	b580      	push	{r7, lr}
 800a346:	b082      	sub	sp, #8
 800a348:	af00      	add	r7, sp, #0
 800a34a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d106      	bne.n	800a360 <tcp_next_iss+0x1c>
 800a352:	4b0a      	ldr	r3, [pc, #40]	; (800a37c <tcp_next_iss+0x38>)
 800a354:	f640 02af 	movw	r2, #2223	; 0x8af
 800a358:	4909      	ldr	r1, [pc, #36]	; (800a380 <tcp_next_iss+0x3c>)
 800a35a:	480a      	ldr	r0, [pc, #40]	; (800a384 <tcp_next_iss+0x40>)
 800a35c:	f007 f9d0 	bl	8011700 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800a360:	4b09      	ldr	r3, [pc, #36]	; (800a388 <tcp_next_iss+0x44>)
 800a362:	681a      	ldr	r2, [r3, #0]
 800a364:	4b09      	ldr	r3, [pc, #36]	; (800a38c <tcp_next_iss+0x48>)
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	4413      	add	r3, r2
 800a36a:	4a07      	ldr	r2, [pc, #28]	; (800a388 <tcp_next_iss+0x44>)
 800a36c:	6013      	str	r3, [r2, #0]
  return iss;
 800a36e:	4b06      	ldr	r3, [pc, #24]	; (800a388 <tcp_next_iss+0x44>)
 800a370:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800a372:	4618      	mov	r0, r3
 800a374:	3708      	adds	r7, #8
 800a376:	46bd      	mov	sp, r7
 800a378:	bd80      	pop	{r7, pc}
 800a37a:	bf00      	nop
 800a37c:	080145a0 	.word	0x080145a0
 800a380:	08014c90 	.word	0x08014c90
 800a384:	080145e4 	.word	0x080145e4
 800a388:	20000020 	.word	0x20000020
 800a38c:	2000d78c 	.word	0x2000d78c

0800a390 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800a390:	b580      	push	{r7, lr}
 800a392:	b086      	sub	sp, #24
 800a394:	af00      	add	r7, sp, #0
 800a396:	4603      	mov	r3, r0
 800a398:	60b9      	str	r1, [r7, #8]
 800a39a:	607a      	str	r2, [r7, #4]
 800a39c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d106      	bne.n	800a3b2 <tcp_eff_send_mss_netif+0x22>
 800a3a4:	4b14      	ldr	r3, [pc, #80]	; (800a3f8 <tcp_eff_send_mss_netif+0x68>)
 800a3a6:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800a3aa:	4914      	ldr	r1, [pc, #80]	; (800a3fc <tcp_eff_send_mss_netif+0x6c>)
 800a3ac:	4814      	ldr	r0, [pc, #80]	; (800a400 <tcp_eff_send_mss_netif+0x70>)
 800a3ae:	f007 f9a7 	bl	8011700 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800a3b2:	68bb      	ldr	r3, [r7, #8]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d101      	bne.n	800a3bc <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800a3b8:	89fb      	ldrh	r3, [r7, #14]
 800a3ba:	e019      	b.n	800a3f0 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800a3bc:	68bb      	ldr	r3, [r7, #8]
 800a3be:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800a3c0:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800a3c2:	8afb      	ldrh	r3, [r7, #22]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d012      	beq.n	800a3ee <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800a3c8:	2328      	movs	r3, #40	; 0x28
 800a3ca:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800a3cc:	8afa      	ldrh	r2, [r7, #22]
 800a3ce:	8abb      	ldrh	r3, [r7, #20]
 800a3d0:	429a      	cmp	r2, r3
 800a3d2:	d904      	bls.n	800a3de <tcp_eff_send_mss_netif+0x4e>
 800a3d4:	8afa      	ldrh	r2, [r7, #22]
 800a3d6:	8abb      	ldrh	r3, [r7, #20]
 800a3d8:	1ad3      	subs	r3, r2, r3
 800a3da:	b29b      	uxth	r3, r3
 800a3dc:	e000      	b.n	800a3e0 <tcp_eff_send_mss_netif+0x50>
 800a3de:	2300      	movs	r3, #0
 800a3e0:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800a3e2:	8a7a      	ldrh	r2, [r7, #18]
 800a3e4:	89fb      	ldrh	r3, [r7, #14]
 800a3e6:	4293      	cmp	r3, r2
 800a3e8:	bf28      	it	cs
 800a3ea:	4613      	movcs	r3, r2
 800a3ec:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800a3ee:	89fb      	ldrh	r3, [r7, #14]
}
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	3718      	adds	r7, #24
 800a3f4:	46bd      	mov	sp, r7
 800a3f6:	bd80      	pop	{r7, pc}
 800a3f8:	080145a0 	.word	0x080145a0
 800a3fc:	08014cac 	.word	0x08014cac
 800a400:	080145e4 	.word	0x080145e4

0800a404 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800a404:	b580      	push	{r7, lr}
 800a406:	b084      	sub	sp, #16
 800a408:	af00      	add	r7, sp, #0
 800a40a:	6078      	str	r0, [r7, #4]
 800a40c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800a40e:	683b      	ldr	r3, [r7, #0]
 800a410:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d119      	bne.n	800a44c <tcp_netif_ip_addr_changed_pcblist+0x48>
 800a418:	4b10      	ldr	r3, [pc, #64]	; (800a45c <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800a41a:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800a41e:	4910      	ldr	r1, [pc, #64]	; (800a460 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800a420:	4810      	ldr	r0, [pc, #64]	; (800a464 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800a422:	f007 f96d 	bl	8011700 <iprintf>

  while (pcb != NULL) {
 800a426:	e011      	b.n	800a44c <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	681a      	ldr	r2, [r3, #0]
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	429a      	cmp	r2, r3
 800a432:	d108      	bne.n	800a446 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	68db      	ldr	r3, [r3, #12]
 800a438:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800a43a:	68f8      	ldr	r0, [r7, #12]
 800a43c:	f7fe fd20 	bl	8008e80 <tcp_abort>
      pcb = next;
 800a440:	68bb      	ldr	r3, [r7, #8]
 800a442:	60fb      	str	r3, [r7, #12]
 800a444:	e002      	b.n	800a44c <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	68db      	ldr	r3, [r3, #12]
 800a44a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d1ea      	bne.n	800a428 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800a452:	bf00      	nop
 800a454:	bf00      	nop
 800a456:	3710      	adds	r7, #16
 800a458:	46bd      	mov	sp, r7
 800a45a:	bd80      	pop	{r7, pc}
 800a45c:	080145a0 	.word	0x080145a0
 800a460:	08014cd4 	.word	0x08014cd4
 800a464:	080145e4 	.word	0x080145e4

0800a468 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800a468:	b580      	push	{r7, lr}
 800a46a:	b084      	sub	sp, #16
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	6078      	str	r0, [r7, #4]
 800a470:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	2b00      	cmp	r3, #0
 800a476:	d02a      	beq.n	800a4ce <tcp_netif_ip_addr_changed+0x66>
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d026      	beq.n	800a4ce <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800a480:	4b15      	ldr	r3, [pc, #84]	; (800a4d8 <tcp_netif_ip_addr_changed+0x70>)
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	4619      	mov	r1, r3
 800a486:	6878      	ldr	r0, [r7, #4]
 800a488:	f7ff ffbc 	bl	800a404 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800a48c:	4b13      	ldr	r3, [pc, #76]	; (800a4dc <tcp_netif_ip_addr_changed+0x74>)
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	4619      	mov	r1, r3
 800a492:	6878      	ldr	r0, [r7, #4]
 800a494:	f7ff ffb6 	bl	800a404 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800a498:	683b      	ldr	r3, [r7, #0]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d017      	beq.n	800a4ce <tcp_netif_ip_addr_changed+0x66>
 800a49e:	683b      	ldr	r3, [r7, #0]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d013      	beq.n	800a4ce <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a4a6:	4b0e      	ldr	r3, [pc, #56]	; (800a4e0 <tcp_netif_ip_addr_changed+0x78>)
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	60fb      	str	r3, [r7, #12]
 800a4ac:	e00c      	b.n	800a4c8 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	681a      	ldr	r2, [r3, #0]
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	429a      	cmp	r2, r3
 800a4b8:	d103      	bne.n	800a4c2 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800a4ba:	683b      	ldr	r3, [r7, #0]
 800a4bc:	681a      	ldr	r2, [r3, #0]
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	68db      	ldr	r3, [r3, #12]
 800a4c6:	60fb      	str	r3, [r7, #12]
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d1ef      	bne.n	800a4ae <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800a4ce:	bf00      	nop
 800a4d0:	3710      	adds	r7, #16
 800a4d2:	46bd      	mov	sp, r7
 800a4d4:	bd80      	pop	{r7, pc}
 800a4d6:	bf00      	nop
 800a4d8:	2000d788 	.word	0x2000d788
 800a4dc:	2000d794 	.word	0x2000d794
 800a4e0:	2000d790 	.word	0x2000d790

0800a4e4 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800a4e4:	b580      	push	{r7, lr}
 800a4e6:	b082      	sub	sp, #8
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d007      	beq.n	800a504 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a4f8:	4618      	mov	r0, r3
 800a4fa:	f7ff fb51 	bl	8009ba0 <tcp_segs_free>
    pcb->ooseq = NULL;
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	2200      	movs	r2, #0
 800a502:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800a504:	bf00      	nop
 800a506:	3708      	adds	r7, #8
 800a508:	46bd      	mov	sp, r7
 800a50a:	bd80      	pop	{r7, pc}

0800a50c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800a50c:	b590      	push	{r4, r7, lr}
 800a50e:	b08d      	sub	sp, #52	; 0x34
 800a510:	af04      	add	r7, sp, #16
 800a512:	6078      	str	r0, [r7, #4]
 800a514:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d105      	bne.n	800a528 <tcp_input+0x1c>
 800a51c:	4b9b      	ldr	r3, [pc, #620]	; (800a78c <tcp_input+0x280>)
 800a51e:	2283      	movs	r2, #131	; 0x83
 800a520:	499b      	ldr	r1, [pc, #620]	; (800a790 <tcp_input+0x284>)
 800a522:	489c      	ldr	r0, [pc, #624]	; (800a794 <tcp_input+0x288>)
 800a524:	f007 f8ec 	bl	8011700 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	685b      	ldr	r3, [r3, #4]
 800a52c:	4a9a      	ldr	r2, [pc, #616]	; (800a798 <tcp_input+0x28c>)
 800a52e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	895b      	ldrh	r3, [r3, #10]
 800a534:	2b13      	cmp	r3, #19
 800a536:	f240 83c4 	bls.w	800acc2 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800a53a:	4b98      	ldr	r3, [pc, #608]	; (800a79c <tcp_input+0x290>)
 800a53c:	695b      	ldr	r3, [r3, #20]
 800a53e:	4a97      	ldr	r2, [pc, #604]	; (800a79c <tcp_input+0x290>)
 800a540:	6812      	ldr	r2, [r2, #0]
 800a542:	4611      	mov	r1, r2
 800a544:	4618      	mov	r0, r3
 800a546:	f006 f86b 	bl	8010620 <ip4_addr_isbroadcast_u32>
 800a54a:	4603      	mov	r3, r0
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	f040 83ba 	bne.w	800acc6 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800a552:	4b92      	ldr	r3, [pc, #584]	; (800a79c <tcp_input+0x290>)
 800a554:	695b      	ldr	r3, [r3, #20]
 800a556:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800a55a:	2be0      	cmp	r3, #224	; 0xe0
 800a55c:	f000 83b3 	beq.w	800acc6 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800a560:	4b8d      	ldr	r3, [pc, #564]	; (800a798 <tcp_input+0x28c>)
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	899b      	ldrh	r3, [r3, #12]
 800a566:	b29b      	uxth	r3, r3
 800a568:	4618      	mov	r0, r3
 800a56a:	f7fc fb6f 	bl	8006c4c <lwip_htons>
 800a56e:	4603      	mov	r3, r0
 800a570:	0b1b      	lsrs	r3, r3, #12
 800a572:	b29b      	uxth	r3, r3
 800a574:	b2db      	uxtb	r3, r3
 800a576:	009b      	lsls	r3, r3, #2
 800a578:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800a57a:	7cbb      	ldrb	r3, [r7, #18]
 800a57c:	2b13      	cmp	r3, #19
 800a57e:	f240 83a4 	bls.w	800acca <tcp_input+0x7be>
 800a582:	7cbb      	ldrb	r3, [r7, #18]
 800a584:	b29a      	uxth	r2, r3
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	891b      	ldrh	r3, [r3, #8]
 800a58a:	429a      	cmp	r2, r3
 800a58c:	f200 839d 	bhi.w	800acca <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800a590:	7cbb      	ldrb	r3, [r7, #18]
 800a592:	b29b      	uxth	r3, r3
 800a594:	3b14      	subs	r3, #20
 800a596:	b29a      	uxth	r2, r3
 800a598:	4b81      	ldr	r3, [pc, #516]	; (800a7a0 <tcp_input+0x294>)
 800a59a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800a59c:	4b81      	ldr	r3, [pc, #516]	; (800a7a4 <tcp_input+0x298>)
 800a59e:	2200      	movs	r2, #0
 800a5a0:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	895a      	ldrh	r2, [r3, #10]
 800a5a6:	7cbb      	ldrb	r3, [r7, #18]
 800a5a8:	b29b      	uxth	r3, r3
 800a5aa:	429a      	cmp	r2, r3
 800a5ac:	d309      	bcc.n	800a5c2 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800a5ae:	4b7c      	ldr	r3, [pc, #496]	; (800a7a0 <tcp_input+0x294>)
 800a5b0:	881a      	ldrh	r2, [r3, #0]
 800a5b2:	4b7d      	ldr	r3, [pc, #500]	; (800a7a8 <tcp_input+0x29c>)
 800a5b4:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800a5b6:	7cbb      	ldrb	r3, [r7, #18]
 800a5b8:	4619      	mov	r1, r3
 800a5ba:	6878      	ldr	r0, [r7, #4]
 800a5bc:	f7fd fe52 	bl	8008264 <pbuf_remove_header>
 800a5c0:	e04e      	b.n	800a660 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d105      	bne.n	800a5d6 <tcp_input+0xca>
 800a5ca:	4b70      	ldr	r3, [pc, #448]	; (800a78c <tcp_input+0x280>)
 800a5cc:	22c2      	movs	r2, #194	; 0xc2
 800a5ce:	4977      	ldr	r1, [pc, #476]	; (800a7ac <tcp_input+0x2a0>)
 800a5d0:	4870      	ldr	r0, [pc, #448]	; (800a794 <tcp_input+0x288>)
 800a5d2:	f007 f895 	bl	8011700 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800a5d6:	2114      	movs	r1, #20
 800a5d8:	6878      	ldr	r0, [r7, #4]
 800a5da:	f7fd fe43 	bl	8008264 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	895a      	ldrh	r2, [r3, #10]
 800a5e2:	4b71      	ldr	r3, [pc, #452]	; (800a7a8 <tcp_input+0x29c>)
 800a5e4:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800a5e6:	4b6e      	ldr	r3, [pc, #440]	; (800a7a0 <tcp_input+0x294>)
 800a5e8:	881a      	ldrh	r2, [r3, #0]
 800a5ea:	4b6f      	ldr	r3, [pc, #444]	; (800a7a8 <tcp_input+0x29c>)
 800a5ec:	881b      	ldrh	r3, [r3, #0]
 800a5ee:	1ad3      	subs	r3, r2, r3
 800a5f0:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800a5f2:	4b6d      	ldr	r3, [pc, #436]	; (800a7a8 <tcp_input+0x29c>)
 800a5f4:	881b      	ldrh	r3, [r3, #0]
 800a5f6:	4619      	mov	r1, r3
 800a5f8:	6878      	ldr	r0, [r7, #4]
 800a5fa:	f7fd fe33 	bl	8008264 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	895b      	ldrh	r3, [r3, #10]
 800a604:	8a3a      	ldrh	r2, [r7, #16]
 800a606:	429a      	cmp	r2, r3
 800a608:	f200 8361 	bhi.w	800acce <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	685b      	ldr	r3, [r3, #4]
 800a612:	4a64      	ldr	r2, [pc, #400]	; (800a7a4 <tcp_input+0x298>)
 800a614:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	8a3a      	ldrh	r2, [r7, #16]
 800a61c:	4611      	mov	r1, r2
 800a61e:	4618      	mov	r0, r3
 800a620:	f7fd fe20 	bl	8008264 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	891a      	ldrh	r2, [r3, #8]
 800a628:	8a3b      	ldrh	r3, [r7, #16]
 800a62a:	1ad3      	subs	r3, r2, r3
 800a62c:	b29a      	uxth	r2, r3
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	895b      	ldrh	r3, [r3, #10]
 800a636:	2b00      	cmp	r3, #0
 800a638:	d005      	beq.n	800a646 <tcp_input+0x13a>
 800a63a:	4b54      	ldr	r3, [pc, #336]	; (800a78c <tcp_input+0x280>)
 800a63c:	22df      	movs	r2, #223	; 0xdf
 800a63e:	495c      	ldr	r1, [pc, #368]	; (800a7b0 <tcp_input+0x2a4>)
 800a640:	4854      	ldr	r0, [pc, #336]	; (800a794 <tcp_input+0x288>)
 800a642:	f007 f85d 	bl	8011700 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	891a      	ldrh	r2, [r3, #8]
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	891b      	ldrh	r3, [r3, #8]
 800a650:	429a      	cmp	r2, r3
 800a652:	d005      	beq.n	800a660 <tcp_input+0x154>
 800a654:	4b4d      	ldr	r3, [pc, #308]	; (800a78c <tcp_input+0x280>)
 800a656:	22e0      	movs	r2, #224	; 0xe0
 800a658:	4956      	ldr	r1, [pc, #344]	; (800a7b4 <tcp_input+0x2a8>)
 800a65a:	484e      	ldr	r0, [pc, #312]	; (800a794 <tcp_input+0x288>)
 800a65c:	f007 f850 	bl	8011700 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800a660:	4b4d      	ldr	r3, [pc, #308]	; (800a798 <tcp_input+0x28c>)
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	881b      	ldrh	r3, [r3, #0]
 800a666:	b29b      	uxth	r3, r3
 800a668:	4a4b      	ldr	r2, [pc, #300]	; (800a798 <tcp_input+0x28c>)
 800a66a:	6814      	ldr	r4, [r2, #0]
 800a66c:	4618      	mov	r0, r3
 800a66e:	f7fc faed 	bl	8006c4c <lwip_htons>
 800a672:	4603      	mov	r3, r0
 800a674:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800a676:	4b48      	ldr	r3, [pc, #288]	; (800a798 <tcp_input+0x28c>)
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	885b      	ldrh	r3, [r3, #2]
 800a67c:	b29b      	uxth	r3, r3
 800a67e:	4a46      	ldr	r2, [pc, #280]	; (800a798 <tcp_input+0x28c>)
 800a680:	6814      	ldr	r4, [r2, #0]
 800a682:	4618      	mov	r0, r3
 800a684:	f7fc fae2 	bl	8006c4c <lwip_htons>
 800a688:	4603      	mov	r3, r0
 800a68a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800a68c:	4b42      	ldr	r3, [pc, #264]	; (800a798 <tcp_input+0x28c>)
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	685b      	ldr	r3, [r3, #4]
 800a692:	4a41      	ldr	r2, [pc, #260]	; (800a798 <tcp_input+0x28c>)
 800a694:	6814      	ldr	r4, [r2, #0]
 800a696:	4618      	mov	r0, r3
 800a698:	f7fc faed 	bl	8006c76 <lwip_htonl>
 800a69c:	4603      	mov	r3, r0
 800a69e:	6063      	str	r3, [r4, #4]
 800a6a0:	6863      	ldr	r3, [r4, #4]
 800a6a2:	4a45      	ldr	r2, [pc, #276]	; (800a7b8 <tcp_input+0x2ac>)
 800a6a4:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800a6a6:	4b3c      	ldr	r3, [pc, #240]	; (800a798 <tcp_input+0x28c>)
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	689b      	ldr	r3, [r3, #8]
 800a6ac:	4a3a      	ldr	r2, [pc, #232]	; (800a798 <tcp_input+0x28c>)
 800a6ae:	6814      	ldr	r4, [r2, #0]
 800a6b0:	4618      	mov	r0, r3
 800a6b2:	f7fc fae0 	bl	8006c76 <lwip_htonl>
 800a6b6:	4603      	mov	r3, r0
 800a6b8:	60a3      	str	r3, [r4, #8]
 800a6ba:	68a3      	ldr	r3, [r4, #8]
 800a6bc:	4a3f      	ldr	r2, [pc, #252]	; (800a7bc <tcp_input+0x2b0>)
 800a6be:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800a6c0:	4b35      	ldr	r3, [pc, #212]	; (800a798 <tcp_input+0x28c>)
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	89db      	ldrh	r3, [r3, #14]
 800a6c6:	b29b      	uxth	r3, r3
 800a6c8:	4a33      	ldr	r2, [pc, #204]	; (800a798 <tcp_input+0x28c>)
 800a6ca:	6814      	ldr	r4, [r2, #0]
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	f7fc fabd 	bl	8006c4c <lwip_htons>
 800a6d2:	4603      	mov	r3, r0
 800a6d4:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800a6d6:	4b30      	ldr	r3, [pc, #192]	; (800a798 <tcp_input+0x28c>)
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	899b      	ldrh	r3, [r3, #12]
 800a6dc:	b29b      	uxth	r3, r3
 800a6de:	4618      	mov	r0, r3
 800a6e0:	f7fc fab4 	bl	8006c4c <lwip_htons>
 800a6e4:	4603      	mov	r3, r0
 800a6e6:	b2db      	uxtb	r3, r3
 800a6e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a6ec:	b2da      	uxtb	r2, r3
 800a6ee:	4b34      	ldr	r3, [pc, #208]	; (800a7c0 <tcp_input+0x2b4>)
 800a6f0:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	891a      	ldrh	r2, [r3, #8]
 800a6f6:	4b33      	ldr	r3, [pc, #204]	; (800a7c4 <tcp_input+0x2b8>)
 800a6f8:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800a6fa:	4b31      	ldr	r3, [pc, #196]	; (800a7c0 <tcp_input+0x2b4>)
 800a6fc:	781b      	ldrb	r3, [r3, #0]
 800a6fe:	f003 0303 	and.w	r3, r3, #3
 800a702:	2b00      	cmp	r3, #0
 800a704:	d00c      	beq.n	800a720 <tcp_input+0x214>
    tcplen++;
 800a706:	4b2f      	ldr	r3, [pc, #188]	; (800a7c4 <tcp_input+0x2b8>)
 800a708:	881b      	ldrh	r3, [r3, #0]
 800a70a:	3301      	adds	r3, #1
 800a70c:	b29a      	uxth	r2, r3
 800a70e:	4b2d      	ldr	r3, [pc, #180]	; (800a7c4 <tcp_input+0x2b8>)
 800a710:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	891a      	ldrh	r2, [r3, #8]
 800a716:	4b2b      	ldr	r3, [pc, #172]	; (800a7c4 <tcp_input+0x2b8>)
 800a718:	881b      	ldrh	r3, [r3, #0]
 800a71a:	429a      	cmp	r2, r3
 800a71c:	f200 82d9 	bhi.w	800acd2 <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800a720:	2300      	movs	r3, #0
 800a722:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a724:	4b28      	ldr	r3, [pc, #160]	; (800a7c8 <tcp_input+0x2bc>)
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	61fb      	str	r3, [r7, #28]
 800a72a:	e09d      	b.n	800a868 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800a72c:	69fb      	ldr	r3, [r7, #28]
 800a72e:	7d1b      	ldrb	r3, [r3, #20]
 800a730:	2b00      	cmp	r3, #0
 800a732:	d105      	bne.n	800a740 <tcp_input+0x234>
 800a734:	4b15      	ldr	r3, [pc, #84]	; (800a78c <tcp_input+0x280>)
 800a736:	22fb      	movs	r2, #251	; 0xfb
 800a738:	4924      	ldr	r1, [pc, #144]	; (800a7cc <tcp_input+0x2c0>)
 800a73a:	4816      	ldr	r0, [pc, #88]	; (800a794 <tcp_input+0x288>)
 800a73c:	f006 ffe0 	bl	8011700 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800a740:	69fb      	ldr	r3, [r7, #28]
 800a742:	7d1b      	ldrb	r3, [r3, #20]
 800a744:	2b0a      	cmp	r3, #10
 800a746:	d105      	bne.n	800a754 <tcp_input+0x248>
 800a748:	4b10      	ldr	r3, [pc, #64]	; (800a78c <tcp_input+0x280>)
 800a74a:	22fc      	movs	r2, #252	; 0xfc
 800a74c:	4920      	ldr	r1, [pc, #128]	; (800a7d0 <tcp_input+0x2c4>)
 800a74e:	4811      	ldr	r0, [pc, #68]	; (800a794 <tcp_input+0x288>)
 800a750:	f006 ffd6 	bl	8011700 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800a754:	69fb      	ldr	r3, [r7, #28]
 800a756:	7d1b      	ldrb	r3, [r3, #20]
 800a758:	2b01      	cmp	r3, #1
 800a75a:	d105      	bne.n	800a768 <tcp_input+0x25c>
 800a75c:	4b0b      	ldr	r3, [pc, #44]	; (800a78c <tcp_input+0x280>)
 800a75e:	22fd      	movs	r2, #253	; 0xfd
 800a760:	491c      	ldr	r1, [pc, #112]	; (800a7d4 <tcp_input+0x2c8>)
 800a762:	480c      	ldr	r0, [pc, #48]	; (800a794 <tcp_input+0x288>)
 800a764:	f006 ffcc 	bl	8011700 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a768:	69fb      	ldr	r3, [r7, #28]
 800a76a:	7a1b      	ldrb	r3, [r3, #8]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d033      	beq.n	800a7d8 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a770:	69fb      	ldr	r3, [r7, #28]
 800a772:	7a1a      	ldrb	r2, [r3, #8]
 800a774:	4b09      	ldr	r3, [pc, #36]	; (800a79c <tcp_input+0x290>)
 800a776:	685b      	ldr	r3, [r3, #4]
 800a778:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a77c:	3301      	adds	r3, #1
 800a77e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a780:	429a      	cmp	r2, r3
 800a782:	d029      	beq.n	800a7d8 <tcp_input+0x2cc>
      prev = pcb;
 800a784:	69fb      	ldr	r3, [r7, #28]
 800a786:	61bb      	str	r3, [r7, #24]
      continue;
 800a788:	e06b      	b.n	800a862 <tcp_input+0x356>
 800a78a:	bf00      	nop
 800a78c:	08014d08 	.word	0x08014d08
 800a790:	08014d3c 	.word	0x08014d3c
 800a794:	08014d54 	.word	0x08014d54
 800a798:	2000055c 	.word	0x2000055c
 800a79c:	20004184 	.word	0x20004184
 800a7a0:	20000560 	.word	0x20000560
 800a7a4:	20000564 	.word	0x20000564
 800a7a8:	20000562 	.word	0x20000562
 800a7ac:	08014d7c 	.word	0x08014d7c
 800a7b0:	08014d8c 	.word	0x08014d8c
 800a7b4:	08014d98 	.word	0x08014d98
 800a7b8:	2000056c 	.word	0x2000056c
 800a7bc:	20000570 	.word	0x20000570
 800a7c0:	20000578 	.word	0x20000578
 800a7c4:	20000576 	.word	0x20000576
 800a7c8:	2000d788 	.word	0x2000d788
 800a7cc:	08014db8 	.word	0x08014db8
 800a7d0:	08014de0 	.word	0x08014de0
 800a7d4:	08014e0c 	.word	0x08014e0c
    }

    if (pcb->remote_port == tcphdr->src &&
 800a7d8:	69fb      	ldr	r3, [r7, #28]
 800a7da:	8b1a      	ldrh	r2, [r3, #24]
 800a7dc:	4b94      	ldr	r3, [pc, #592]	; (800aa30 <tcp_input+0x524>)
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	881b      	ldrh	r3, [r3, #0]
 800a7e2:	b29b      	uxth	r3, r3
 800a7e4:	429a      	cmp	r2, r3
 800a7e6:	d13a      	bne.n	800a85e <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800a7e8:	69fb      	ldr	r3, [r7, #28]
 800a7ea:	8ada      	ldrh	r2, [r3, #22]
 800a7ec:	4b90      	ldr	r3, [pc, #576]	; (800aa30 <tcp_input+0x524>)
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	885b      	ldrh	r3, [r3, #2]
 800a7f2:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800a7f4:	429a      	cmp	r2, r3
 800a7f6:	d132      	bne.n	800a85e <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a7f8:	69fb      	ldr	r3, [r7, #28]
 800a7fa:	685a      	ldr	r2, [r3, #4]
 800a7fc:	4b8d      	ldr	r3, [pc, #564]	; (800aa34 <tcp_input+0x528>)
 800a7fe:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800a800:	429a      	cmp	r2, r3
 800a802:	d12c      	bne.n	800a85e <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800a804:	69fb      	ldr	r3, [r7, #28]
 800a806:	681a      	ldr	r2, [r3, #0]
 800a808:	4b8a      	ldr	r3, [pc, #552]	; (800aa34 <tcp_input+0x528>)
 800a80a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a80c:	429a      	cmp	r2, r3
 800a80e:	d126      	bne.n	800a85e <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800a810:	69fb      	ldr	r3, [r7, #28]
 800a812:	68db      	ldr	r3, [r3, #12]
 800a814:	69fa      	ldr	r2, [r7, #28]
 800a816:	429a      	cmp	r2, r3
 800a818:	d106      	bne.n	800a828 <tcp_input+0x31c>
 800a81a:	4b87      	ldr	r3, [pc, #540]	; (800aa38 <tcp_input+0x52c>)
 800a81c:	f240 120d 	movw	r2, #269	; 0x10d
 800a820:	4986      	ldr	r1, [pc, #536]	; (800aa3c <tcp_input+0x530>)
 800a822:	4887      	ldr	r0, [pc, #540]	; (800aa40 <tcp_input+0x534>)
 800a824:	f006 ff6c 	bl	8011700 <iprintf>
      if (prev != NULL) {
 800a828:	69bb      	ldr	r3, [r7, #24]
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d00a      	beq.n	800a844 <tcp_input+0x338>
        prev->next = pcb->next;
 800a82e:	69fb      	ldr	r3, [r7, #28]
 800a830:	68da      	ldr	r2, [r3, #12]
 800a832:	69bb      	ldr	r3, [r7, #24]
 800a834:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800a836:	4b83      	ldr	r3, [pc, #524]	; (800aa44 <tcp_input+0x538>)
 800a838:	681a      	ldr	r2, [r3, #0]
 800a83a:	69fb      	ldr	r3, [r7, #28]
 800a83c:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800a83e:	4a81      	ldr	r2, [pc, #516]	; (800aa44 <tcp_input+0x538>)
 800a840:	69fb      	ldr	r3, [r7, #28]
 800a842:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800a844:	69fb      	ldr	r3, [r7, #28]
 800a846:	68db      	ldr	r3, [r3, #12]
 800a848:	69fa      	ldr	r2, [r7, #28]
 800a84a:	429a      	cmp	r2, r3
 800a84c:	d111      	bne.n	800a872 <tcp_input+0x366>
 800a84e:	4b7a      	ldr	r3, [pc, #488]	; (800aa38 <tcp_input+0x52c>)
 800a850:	f240 1215 	movw	r2, #277	; 0x115
 800a854:	497c      	ldr	r1, [pc, #496]	; (800aa48 <tcp_input+0x53c>)
 800a856:	487a      	ldr	r0, [pc, #488]	; (800aa40 <tcp_input+0x534>)
 800a858:	f006 ff52 	bl	8011700 <iprintf>
      break;
 800a85c:	e009      	b.n	800a872 <tcp_input+0x366>
    }
    prev = pcb;
 800a85e:	69fb      	ldr	r3, [r7, #28]
 800a860:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a862:	69fb      	ldr	r3, [r7, #28]
 800a864:	68db      	ldr	r3, [r3, #12]
 800a866:	61fb      	str	r3, [r7, #28]
 800a868:	69fb      	ldr	r3, [r7, #28]
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	f47f af5e 	bne.w	800a72c <tcp_input+0x220>
 800a870:	e000      	b.n	800a874 <tcp_input+0x368>
      break;
 800a872:	bf00      	nop
  }

  if (pcb == NULL) {
 800a874:	69fb      	ldr	r3, [r7, #28]
 800a876:	2b00      	cmp	r3, #0
 800a878:	f040 8095 	bne.w	800a9a6 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a87c:	4b73      	ldr	r3, [pc, #460]	; (800aa4c <tcp_input+0x540>)
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	61fb      	str	r3, [r7, #28]
 800a882:	e03f      	b.n	800a904 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800a884:	69fb      	ldr	r3, [r7, #28]
 800a886:	7d1b      	ldrb	r3, [r3, #20]
 800a888:	2b0a      	cmp	r3, #10
 800a88a:	d006      	beq.n	800a89a <tcp_input+0x38e>
 800a88c:	4b6a      	ldr	r3, [pc, #424]	; (800aa38 <tcp_input+0x52c>)
 800a88e:	f240 121f 	movw	r2, #287	; 0x11f
 800a892:	496f      	ldr	r1, [pc, #444]	; (800aa50 <tcp_input+0x544>)
 800a894:	486a      	ldr	r0, [pc, #424]	; (800aa40 <tcp_input+0x534>)
 800a896:	f006 ff33 	bl	8011700 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a89a:	69fb      	ldr	r3, [r7, #28]
 800a89c:	7a1b      	ldrb	r3, [r3, #8]
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d009      	beq.n	800a8b6 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a8a2:	69fb      	ldr	r3, [r7, #28]
 800a8a4:	7a1a      	ldrb	r2, [r3, #8]
 800a8a6:	4b63      	ldr	r3, [pc, #396]	; (800aa34 <tcp_input+0x528>)
 800a8a8:	685b      	ldr	r3, [r3, #4]
 800a8aa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a8ae:	3301      	adds	r3, #1
 800a8b0:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a8b2:	429a      	cmp	r2, r3
 800a8b4:	d122      	bne.n	800a8fc <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800a8b6:	69fb      	ldr	r3, [r7, #28]
 800a8b8:	8b1a      	ldrh	r2, [r3, #24]
 800a8ba:	4b5d      	ldr	r3, [pc, #372]	; (800aa30 <tcp_input+0x524>)
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	881b      	ldrh	r3, [r3, #0]
 800a8c0:	b29b      	uxth	r3, r3
 800a8c2:	429a      	cmp	r2, r3
 800a8c4:	d11b      	bne.n	800a8fe <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800a8c6:	69fb      	ldr	r3, [r7, #28]
 800a8c8:	8ada      	ldrh	r2, [r3, #22]
 800a8ca:	4b59      	ldr	r3, [pc, #356]	; (800aa30 <tcp_input+0x524>)
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	885b      	ldrh	r3, [r3, #2]
 800a8d0:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800a8d2:	429a      	cmp	r2, r3
 800a8d4:	d113      	bne.n	800a8fe <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a8d6:	69fb      	ldr	r3, [r7, #28]
 800a8d8:	685a      	ldr	r2, [r3, #4]
 800a8da:	4b56      	ldr	r3, [pc, #344]	; (800aa34 <tcp_input+0x528>)
 800a8dc:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800a8de:	429a      	cmp	r2, r3
 800a8e0:	d10d      	bne.n	800a8fe <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800a8e2:	69fb      	ldr	r3, [r7, #28]
 800a8e4:	681a      	ldr	r2, [r3, #0]
 800a8e6:	4b53      	ldr	r3, [pc, #332]	; (800aa34 <tcp_input+0x528>)
 800a8e8:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a8ea:	429a      	cmp	r2, r3
 800a8ec:	d107      	bne.n	800a8fe <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800a8ee:	69f8      	ldr	r0, [r7, #28]
 800a8f0:	f000 fb54 	bl	800af9c <tcp_timewait_input>
        }
        pbuf_free(p);
 800a8f4:	6878      	ldr	r0, [r7, #4]
 800a8f6:	f7fd fd3b 	bl	8008370 <pbuf_free>
        return;
 800a8fa:	e1f0      	b.n	800acde <tcp_input+0x7d2>
        continue;
 800a8fc:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a8fe:	69fb      	ldr	r3, [r7, #28]
 800a900:	68db      	ldr	r3, [r3, #12]
 800a902:	61fb      	str	r3, [r7, #28]
 800a904:	69fb      	ldr	r3, [r7, #28]
 800a906:	2b00      	cmp	r3, #0
 800a908:	d1bc      	bne.n	800a884 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800a90a:	2300      	movs	r3, #0
 800a90c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a90e:	4b51      	ldr	r3, [pc, #324]	; (800aa54 <tcp_input+0x548>)
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	617b      	str	r3, [r7, #20]
 800a914:	e02a      	b.n	800a96c <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800a916:	697b      	ldr	r3, [r7, #20]
 800a918:	7a1b      	ldrb	r3, [r3, #8]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d00c      	beq.n	800a938 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a91e:	697b      	ldr	r3, [r7, #20]
 800a920:	7a1a      	ldrb	r2, [r3, #8]
 800a922:	4b44      	ldr	r3, [pc, #272]	; (800aa34 <tcp_input+0x528>)
 800a924:	685b      	ldr	r3, [r3, #4]
 800a926:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a92a:	3301      	adds	r3, #1
 800a92c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800a92e:	429a      	cmp	r2, r3
 800a930:	d002      	beq.n	800a938 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800a932:	697b      	ldr	r3, [r7, #20]
 800a934:	61bb      	str	r3, [r7, #24]
        continue;
 800a936:	e016      	b.n	800a966 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800a938:	697b      	ldr	r3, [r7, #20]
 800a93a:	8ada      	ldrh	r2, [r3, #22]
 800a93c:	4b3c      	ldr	r3, [pc, #240]	; (800aa30 <tcp_input+0x524>)
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	885b      	ldrh	r3, [r3, #2]
 800a942:	b29b      	uxth	r3, r3
 800a944:	429a      	cmp	r2, r3
 800a946:	d10c      	bne.n	800a962 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800a948:	697b      	ldr	r3, [r7, #20]
 800a94a:	681a      	ldr	r2, [r3, #0]
 800a94c:	4b39      	ldr	r3, [pc, #228]	; (800aa34 <tcp_input+0x528>)
 800a94e:	695b      	ldr	r3, [r3, #20]
 800a950:	429a      	cmp	r2, r3
 800a952:	d00f      	beq.n	800a974 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800a954:	697b      	ldr	r3, [r7, #20]
 800a956:	2b00      	cmp	r3, #0
 800a958:	d00d      	beq.n	800a976 <tcp_input+0x46a>
 800a95a:	697b      	ldr	r3, [r7, #20]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d009      	beq.n	800a976 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800a962:	697b      	ldr	r3, [r7, #20]
 800a964:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a966:	697b      	ldr	r3, [r7, #20]
 800a968:	68db      	ldr	r3, [r3, #12]
 800a96a:	617b      	str	r3, [r7, #20]
 800a96c:	697b      	ldr	r3, [r7, #20]
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d1d1      	bne.n	800a916 <tcp_input+0x40a>
 800a972:	e000      	b.n	800a976 <tcp_input+0x46a>
            break;
 800a974:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800a976:	697b      	ldr	r3, [r7, #20]
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d014      	beq.n	800a9a6 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800a97c:	69bb      	ldr	r3, [r7, #24]
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d00a      	beq.n	800a998 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800a982:	697b      	ldr	r3, [r7, #20]
 800a984:	68da      	ldr	r2, [r3, #12]
 800a986:	69bb      	ldr	r3, [r7, #24]
 800a988:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800a98a:	4b32      	ldr	r3, [pc, #200]	; (800aa54 <tcp_input+0x548>)
 800a98c:	681a      	ldr	r2, [r3, #0]
 800a98e:	697b      	ldr	r3, [r7, #20]
 800a990:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800a992:	4a30      	ldr	r2, [pc, #192]	; (800aa54 <tcp_input+0x548>)
 800a994:	697b      	ldr	r3, [r7, #20]
 800a996:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800a998:	6978      	ldr	r0, [r7, #20]
 800a99a:	f000 fa01 	bl	800ada0 <tcp_listen_input>
      }
      pbuf_free(p);
 800a99e:	6878      	ldr	r0, [r7, #4]
 800a9a0:	f7fd fce6 	bl	8008370 <pbuf_free>
      return;
 800a9a4:	e19b      	b.n	800acde <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800a9a6:	69fb      	ldr	r3, [r7, #28]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	f000 8160 	beq.w	800ac6e <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800a9ae:	4b2a      	ldr	r3, [pc, #168]	; (800aa58 <tcp_input+0x54c>)
 800a9b0:	2200      	movs	r2, #0
 800a9b2:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	891a      	ldrh	r2, [r3, #8]
 800a9b8:	4b27      	ldr	r3, [pc, #156]	; (800aa58 <tcp_input+0x54c>)
 800a9ba:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800a9bc:	4a26      	ldr	r2, [pc, #152]	; (800aa58 <tcp_input+0x54c>)
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800a9c2:	4b1b      	ldr	r3, [pc, #108]	; (800aa30 <tcp_input+0x524>)
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	4a24      	ldr	r2, [pc, #144]	; (800aa58 <tcp_input+0x54c>)
 800a9c8:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800a9ca:	4b24      	ldr	r3, [pc, #144]	; (800aa5c <tcp_input+0x550>)
 800a9cc:	2200      	movs	r2, #0
 800a9ce:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800a9d0:	4b23      	ldr	r3, [pc, #140]	; (800aa60 <tcp_input+0x554>)
 800a9d2:	2200      	movs	r2, #0
 800a9d4:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800a9d6:	4b23      	ldr	r3, [pc, #140]	; (800aa64 <tcp_input+0x558>)
 800a9d8:	2200      	movs	r2, #0
 800a9da:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800a9dc:	4b22      	ldr	r3, [pc, #136]	; (800aa68 <tcp_input+0x55c>)
 800a9de:	781b      	ldrb	r3, [r3, #0]
 800a9e0:	f003 0308 	and.w	r3, r3, #8
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d006      	beq.n	800a9f6 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	7b5b      	ldrb	r3, [r3, #13]
 800a9ec:	f043 0301 	orr.w	r3, r3, #1
 800a9f0:	b2da      	uxtb	r2, r3
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800a9f6:	69fb      	ldr	r3, [r7, #28]
 800a9f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d038      	beq.n	800aa70 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800a9fe:	69f8      	ldr	r0, [r7, #28]
 800aa00:	f7ff f852 	bl	8009aa8 <tcp_process_refused_data>
 800aa04:	4603      	mov	r3, r0
 800aa06:	f113 0f0d 	cmn.w	r3, #13
 800aa0a:	d007      	beq.n	800aa1c <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800aa0c:	69fb      	ldr	r3, [r7, #28]
 800aa0e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d02d      	beq.n	800aa70 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800aa14:	4b15      	ldr	r3, [pc, #84]	; (800aa6c <tcp_input+0x560>)
 800aa16:	881b      	ldrh	r3, [r3, #0]
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d029      	beq.n	800aa70 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800aa1c:	69fb      	ldr	r3, [r7, #28]
 800aa1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	f040 8104 	bne.w	800ac2e <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800aa26:	69f8      	ldr	r0, [r7, #28]
 800aa28:	f003 fe16 	bl	800e658 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800aa2c:	e0ff      	b.n	800ac2e <tcp_input+0x722>
 800aa2e:	bf00      	nop
 800aa30:	2000055c 	.word	0x2000055c
 800aa34:	20004184 	.word	0x20004184
 800aa38:	08014d08 	.word	0x08014d08
 800aa3c:	08014e34 	.word	0x08014e34
 800aa40:	08014d54 	.word	0x08014d54
 800aa44:	2000d788 	.word	0x2000d788
 800aa48:	08014e60 	.word	0x08014e60
 800aa4c:	2000d798 	.word	0x2000d798
 800aa50:	08014e8c 	.word	0x08014e8c
 800aa54:	2000d790 	.word	0x2000d790
 800aa58:	2000054c 	.word	0x2000054c
 800aa5c:	2000057c 	.word	0x2000057c
 800aa60:	20000579 	.word	0x20000579
 800aa64:	20000574 	.word	0x20000574
 800aa68:	20000578 	.word	0x20000578
 800aa6c:	20000576 	.word	0x20000576
      }
    }
    tcp_input_pcb = pcb;
 800aa70:	4a9c      	ldr	r2, [pc, #624]	; (800ace4 <tcp_input+0x7d8>)
 800aa72:	69fb      	ldr	r3, [r7, #28]
 800aa74:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800aa76:	69f8      	ldr	r0, [r7, #28]
 800aa78:	f000 fb0a 	bl	800b090 <tcp_process>
 800aa7c:	4603      	mov	r3, r0
 800aa7e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800aa80:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800aa84:	f113 0f0d 	cmn.w	r3, #13
 800aa88:	f000 80d3 	beq.w	800ac32 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 800aa8c:	4b96      	ldr	r3, [pc, #600]	; (800ace8 <tcp_input+0x7dc>)
 800aa8e:	781b      	ldrb	r3, [r3, #0]
 800aa90:	f003 0308 	and.w	r3, r3, #8
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d015      	beq.n	800aac4 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800aa98:	69fb      	ldr	r3, [r7, #28]
 800aa9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d008      	beq.n	800aab4 <tcp_input+0x5a8>
 800aaa2:	69fb      	ldr	r3, [r7, #28]
 800aaa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aaa8:	69fa      	ldr	r2, [r7, #28]
 800aaaa:	6912      	ldr	r2, [r2, #16]
 800aaac:	f06f 010d 	mvn.w	r1, #13
 800aab0:	4610      	mov	r0, r2
 800aab2:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800aab4:	69f9      	ldr	r1, [r7, #28]
 800aab6:	488d      	ldr	r0, [pc, #564]	; (800acec <tcp_input+0x7e0>)
 800aab8:	f7ff fbb0 	bl	800a21c <tcp_pcb_remove>
        tcp_free(pcb);
 800aabc:	69f8      	ldr	r0, [r7, #28]
 800aabe:	f7fd fef7 	bl	80088b0 <tcp_free>
 800aac2:	e0c1      	b.n	800ac48 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 800aac4:	2300      	movs	r3, #0
 800aac6:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800aac8:	4b89      	ldr	r3, [pc, #548]	; (800acf0 <tcp_input+0x7e4>)
 800aaca:	881b      	ldrh	r3, [r3, #0]
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d01d      	beq.n	800ab0c <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800aad0:	4b87      	ldr	r3, [pc, #540]	; (800acf0 <tcp_input+0x7e4>)
 800aad2:	881b      	ldrh	r3, [r3, #0]
 800aad4:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800aad6:	69fb      	ldr	r3, [r7, #28]
 800aad8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d00a      	beq.n	800aaf6 <tcp_input+0x5ea>
 800aae0:	69fb      	ldr	r3, [r7, #28]
 800aae2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aae6:	69fa      	ldr	r2, [r7, #28]
 800aae8:	6910      	ldr	r0, [r2, #16]
 800aaea:	89fa      	ldrh	r2, [r7, #14]
 800aaec:	69f9      	ldr	r1, [r7, #28]
 800aaee:	4798      	blx	r3
 800aaf0:	4603      	mov	r3, r0
 800aaf2:	74fb      	strb	r3, [r7, #19]
 800aaf4:	e001      	b.n	800aafa <tcp_input+0x5ee>
 800aaf6:	2300      	movs	r3, #0
 800aaf8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800aafa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800aafe:	f113 0f0d 	cmn.w	r3, #13
 800ab02:	f000 8098 	beq.w	800ac36 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 800ab06:	4b7a      	ldr	r3, [pc, #488]	; (800acf0 <tcp_input+0x7e4>)
 800ab08:	2200      	movs	r2, #0
 800ab0a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800ab0c:	69f8      	ldr	r0, [r7, #28]
 800ab0e:	f000 f907 	bl	800ad20 <tcp_input_delayed_close>
 800ab12:	4603      	mov	r3, r0
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	f040 8090 	bne.w	800ac3a <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800ab1a:	4b76      	ldr	r3, [pc, #472]	; (800acf4 <tcp_input+0x7e8>)
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d041      	beq.n	800aba6 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800ab22:	69fb      	ldr	r3, [r7, #28]
 800ab24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d006      	beq.n	800ab38 <tcp_input+0x62c>
 800ab2a:	4b73      	ldr	r3, [pc, #460]	; (800acf8 <tcp_input+0x7ec>)
 800ab2c:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800ab30:	4972      	ldr	r1, [pc, #456]	; (800acfc <tcp_input+0x7f0>)
 800ab32:	4873      	ldr	r0, [pc, #460]	; (800ad00 <tcp_input+0x7f4>)
 800ab34:	f006 fde4 	bl	8011700 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800ab38:	69fb      	ldr	r3, [r7, #28]
 800ab3a:	8b5b      	ldrh	r3, [r3, #26]
 800ab3c:	f003 0310 	and.w	r3, r3, #16
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d008      	beq.n	800ab56 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800ab44:	4b6b      	ldr	r3, [pc, #428]	; (800acf4 <tcp_input+0x7e8>)
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	4618      	mov	r0, r3
 800ab4a:	f7fd fc11 	bl	8008370 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800ab4e:	69f8      	ldr	r0, [r7, #28]
 800ab50:	f7fe f996 	bl	8008e80 <tcp_abort>
            goto aborted;
 800ab54:	e078      	b.n	800ac48 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800ab56:	69fb      	ldr	r3, [r7, #28]
 800ab58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d00c      	beq.n	800ab7a <tcp_input+0x66e>
 800ab60:	69fb      	ldr	r3, [r7, #28]
 800ab62:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800ab66:	69fb      	ldr	r3, [r7, #28]
 800ab68:	6918      	ldr	r0, [r3, #16]
 800ab6a:	4b62      	ldr	r3, [pc, #392]	; (800acf4 <tcp_input+0x7e8>)
 800ab6c:	681a      	ldr	r2, [r3, #0]
 800ab6e:	2300      	movs	r3, #0
 800ab70:	69f9      	ldr	r1, [r7, #28]
 800ab72:	47a0      	blx	r4
 800ab74:	4603      	mov	r3, r0
 800ab76:	74fb      	strb	r3, [r7, #19]
 800ab78:	e008      	b.n	800ab8c <tcp_input+0x680>
 800ab7a:	4b5e      	ldr	r3, [pc, #376]	; (800acf4 <tcp_input+0x7e8>)
 800ab7c:	681a      	ldr	r2, [r3, #0]
 800ab7e:	2300      	movs	r3, #0
 800ab80:	69f9      	ldr	r1, [r7, #28]
 800ab82:	2000      	movs	r0, #0
 800ab84:	f7ff f884 	bl	8009c90 <tcp_recv_null>
 800ab88:	4603      	mov	r3, r0
 800ab8a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800ab8c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ab90:	f113 0f0d 	cmn.w	r3, #13
 800ab94:	d053      	beq.n	800ac3e <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800ab96:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d003      	beq.n	800aba6 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800ab9e:	4b55      	ldr	r3, [pc, #340]	; (800acf4 <tcp_input+0x7e8>)
 800aba0:	681a      	ldr	r2, [r3, #0]
 800aba2:	69fb      	ldr	r3, [r7, #28]
 800aba4:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800aba6:	4b50      	ldr	r3, [pc, #320]	; (800ace8 <tcp_input+0x7dc>)
 800aba8:	781b      	ldrb	r3, [r3, #0]
 800abaa:	f003 0320 	and.w	r3, r3, #32
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d030      	beq.n	800ac14 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 800abb2:	69fb      	ldr	r3, [r7, #28]
 800abb4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d009      	beq.n	800abce <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800abba:	69fb      	ldr	r3, [r7, #28]
 800abbc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800abbe:	7b5a      	ldrb	r2, [r3, #13]
 800abc0:	69fb      	ldr	r3, [r7, #28]
 800abc2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800abc4:	f042 0220 	orr.w	r2, r2, #32
 800abc8:	b2d2      	uxtb	r2, r2
 800abca:	735a      	strb	r2, [r3, #13]
 800abcc:	e022      	b.n	800ac14 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800abce:	69fb      	ldr	r3, [r7, #28]
 800abd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800abd2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800abd6:	d005      	beq.n	800abe4 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 800abd8:	69fb      	ldr	r3, [r7, #28]
 800abda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800abdc:	3301      	adds	r3, #1
 800abde:	b29a      	uxth	r2, r3
 800abe0:	69fb      	ldr	r3, [r7, #28]
 800abe2:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800abe4:	69fb      	ldr	r3, [r7, #28]
 800abe6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800abea:	2b00      	cmp	r3, #0
 800abec:	d00b      	beq.n	800ac06 <tcp_input+0x6fa>
 800abee:	69fb      	ldr	r3, [r7, #28]
 800abf0:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800abf4:	69fb      	ldr	r3, [r7, #28]
 800abf6:	6918      	ldr	r0, [r3, #16]
 800abf8:	2300      	movs	r3, #0
 800abfa:	2200      	movs	r2, #0
 800abfc:	69f9      	ldr	r1, [r7, #28]
 800abfe:	47a0      	blx	r4
 800ac00:	4603      	mov	r3, r0
 800ac02:	74fb      	strb	r3, [r7, #19]
 800ac04:	e001      	b.n	800ac0a <tcp_input+0x6fe>
 800ac06:	2300      	movs	r3, #0
 800ac08:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800ac0a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ac0e:	f113 0f0d 	cmn.w	r3, #13
 800ac12:	d016      	beq.n	800ac42 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800ac14:	4b33      	ldr	r3, [pc, #204]	; (800ace4 <tcp_input+0x7d8>)
 800ac16:	2200      	movs	r2, #0
 800ac18:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800ac1a:	69f8      	ldr	r0, [r7, #28]
 800ac1c:	f000 f880 	bl	800ad20 <tcp_input_delayed_close>
 800ac20:	4603      	mov	r3, r0
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d10f      	bne.n	800ac46 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800ac26:	69f8      	ldr	r0, [r7, #28]
 800ac28:	f002 ff10 	bl	800da4c <tcp_output>
 800ac2c:	e00c      	b.n	800ac48 <tcp_input+0x73c>
        goto aborted;
 800ac2e:	bf00      	nop
 800ac30:	e00a      	b.n	800ac48 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800ac32:	bf00      	nop
 800ac34:	e008      	b.n	800ac48 <tcp_input+0x73c>
              goto aborted;
 800ac36:	bf00      	nop
 800ac38:	e006      	b.n	800ac48 <tcp_input+0x73c>
          goto aborted;
 800ac3a:	bf00      	nop
 800ac3c:	e004      	b.n	800ac48 <tcp_input+0x73c>
            goto aborted;
 800ac3e:	bf00      	nop
 800ac40:	e002      	b.n	800ac48 <tcp_input+0x73c>
              goto aborted;
 800ac42:	bf00      	nop
 800ac44:	e000      	b.n	800ac48 <tcp_input+0x73c>
          goto aborted;
 800ac46:	bf00      	nop
    tcp_input_pcb = NULL;
 800ac48:	4b26      	ldr	r3, [pc, #152]	; (800ace4 <tcp_input+0x7d8>)
 800ac4a:	2200      	movs	r2, #0
 800ac4c:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800ac4e:	4b29      	ldr	r3, [pc, #164]	; (800acf4 <tcp_input+0x7e8>)
 800ac50:	2200      	movs	r2, #0
 800ac52:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800ac54:	4b2b      	ldr	r3, [pc, #172]	; (800ad04 <tcp_input+0x7f8>)
 800ac56:	685b      	ldr	r3, [r3, #4]
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d03f      	beq.n	800acdc <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 800ac5c:	4b29      	ldr	r3, [pc, #164]	; (800ad04 <tcp_input+0x7f8>)
 800ac5e:	685b      	ldr	r3, [r3, #4]
 800ac60:	4618      	mov	r0, r3
 800ac62:	f7fd fb85 	bl	8008370 <pbuf_free>
      inseg.p = NULL;
 800ac66:	4b27      	ldr	r3, [pc, #156]	; (800ad04 <tcp_input+0x7f8>)
 800ac68:	2200      	movs	r2, #0
 800ac6a:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800ac6c:	e036      	b.n	800acdc <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800ac6e:	4b26      	ldr	r3, [pc, #152]	; (800ad08 <tcp_input+0x7fc>)
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	899b      	ldrh	r3, [r3, #12]
 800ac74:	b29b      	uxth	r3, r3
 800ac76:	4618      	mov	r0, r3
 800ac78:	f7fb ffe8 	bl	8006c4c <lwip_htons>
 800ac7c:	4603      	mov	r3, r0
 800ac7e:	b2db      	uxtb	r3, r3
 800ac80:	f003 0304 	and.w	r3, r3, #4
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d118      	bne.n	800acba <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ac88:	4b20      	ldr	r3, [pc, #128]	; (800ad0c <tcp_input+0x800>)
 800ac8a:	6819      	ldr	r1, [r3, #0]
 800ac8c:	4b20      	ldr	r3, [pc, #128]	; (800ad10 <tcp_input+0x804>)
 800ac8e:	881b      	ldrh	r3, [r3, #0]
 800ac90:	461a      	mov	r2, r3
 800ac92:	4b20      	ldr	r3, [pc, #128]	; (800ad14 <tcp_input+0x808>)
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ac98:	4b1b      	ldr	r3, [pc, #108]	; (800ad08 <tcp_input+0x7fc>)
 800ac9a:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ac9c:	885b      	ldrh	r3, [r3, #2]
 800ac9e:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800aca0:	4a19      	ldr	r2, [pc, #100]	; (800ad08 <tcp_input+0x7fc>)
 800aca2:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800aca4:	8812      	ldrh	r2, [r2, #0]
 800aca6:	b292      	uxth	r2, r2
 800aca8:	9202      	str	r2, [sp, #8]
 800acaa:	9301      	str	r3, [sp, #4]
 800acac:	4b1a      	ldr	r3, [pc, #104]	; (800ad18 <tcp_input+0x80c>)
 800acae:	9300      	str	r3, [sp, #0]
 800acb0:	4b1a      	ldr	r3, [pc, #104]	; (800ad1c <tcp_input+0x810>)
 800acb2:	4602      	mov	r2, r0
 800acb4:	2000      	movs	r0, #0
 800acb6:	f003 fc7d 	bl	800e5b4 <tcp_rst>
    pbuf_free(p);
 800acba:	6878      	ldr	r0, [r7, #4]
 800acbc:	f7fd fb58 	bl	8008370 <pbuf_free>
  return;
 800acc0:	e00c      	b.n	800acdc <tcp_input+0x7d0>
    goto dropped;
 800acc2:	bf00      	nop
 800acc4:	e006      	b.n	800acd4 <tcp_input+0x7c8>
    goto dropped;
 800acc6:	bf00      	nop
 800acc8:	e004      	b.n	800acd4 <tcp_input+0x7c8>
    goto dropped;
 800acca:	bf00      	nop
 800accc:	e002      	b.n	800acd4 <tcp_input+0x7c8>
      goto dropped;
 800acce:	bf00      	nop
 800acd0:	e000      	b.n	800acd4 <tcp_input+0x7c8>
      goto dropped;
 800acd2:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800acd4:	6878      	ldr	r0, [r7, #4]
 800acd6:	f7fd fb4b 	bl	8008370 <pbuf_free>
 800acda:	e000      	b.n	800acde <tcp_input+0x7d2>
  return;
 800acdc:	bf00      	nop
}
 800acde:	3724      	adds	r7, #36	; 0x24
 800ace0:	46bd      	mov	sp, r7
 800ace2:	bd90      	pop	{r4, r7, pc}
 800ace4:	2000d79c 	.word	0x2000d79c
 800ace8:	20000579 	.word	0x20000579
 800acec:	2000d788 	.word	0x2000d788
 800acf0:	20000574 	.word	0x20000574
 800acf4:	2000057c 	.word	0x2000057c
 800acf8:	08014d08 	.word	0x08014d08
 800acfc:	08014ebc 	.word	0x08014ebc
 800ad00:	08014d54 	.word	0x08014d54
 800ad04:	2000054c 	.word	0x2000054c
 800ad08:	2000055c 	.word	0x2000055c
 800ad0c:	20000570 	.word	0x20000570
 800ad10:	20000576 	.word	0x20000576
 800ad14:	2000056c 	.word	0x2000056c
 800ad18:	20004194 	.word	0x20004194
 800ad1c:	20004198 	.word	0x20004198

0800ad20 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800ad20:	b580      	push	{r7, lr}
 800ad22:	b082      	sub	sp, #8
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d106      	bne.n	800ad3c <tcp_input_delayed_close+0x1c>
 800ad2e:	4b17      	ldr	r3, [pc, #92]	; (800ad8c <tcp_input_delayed_close+0x6c>)
 800ad30:	f240 225a 	movw	r2, #602	; 0x25a
 800ad34:	4916      	ldr	r1, [pc, #88]	; (800ad90 <tcp_input_delayed_close+0x70>)
 800ad36:	4817      	ldr	r0, [pc, #92]	; (800ad94 <tcp_input_delayed_close+0x74>)
 800ad38:	f006 fce2 	bl	8011700 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800ad3c:	4b16      	ldr	r3, [pc, #88]	; (800ad98 <tcp_input_delayed_close+0x78>)
 800ad3e:	781b      	ldrb	r3, [r3, #0]
 800ad40:	f003 0310 	and.w	r3, r3, #16
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d01c      	beq.n	800ad82 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	8b5b      	ldrh	r3, [r3, #26]
 800ad4c:	f003 0310 	and.w	r3, r3, #16
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d10d      	bne.n	800ad70 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d008      	beq.n	800ad70 <tcp_input_delayed_close+0x50>
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ad64:	687a      	ldr	r2, [r7, #4]
 800ad66:	6912      	ldr	r2, [r2, #16]
 800ad68:	f06f 010e 	mvn.w	r1, #14
 800ad6c:	4610      	mov	r0, r2
 800ad6e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800ad70:	6879      	ldr	r1, [r7, #4]
 800ad72:	480a      	ldr	r0, [pc, #40]	; (800ad9c <tcp_input_delayed_close+0x7c>)
 800ad74:	f7ff fa52 	bl	800a21c <tcp_pcb_remove>
    tcp_free(pcb);
 800ad78:	6878      	ldr	r0, [r7, #4]
 800ad7a:	f7fd fd99 	bl	80088b0 <tcp_free>
    return 1;
 800ad7e:	2301      	movs	r3, #1
 800ad80:	e000      	b.n	800ad84 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800ad82:	2300      	movs	r3, #0
}
 800ad84:	4618      	mov	r0, r3
 800ad86:	3708      	adds	r7, #8
 800ad88:	46bd      	mov	sp, r7
 800ad8a:	bd80      	pop	{r7, pc}
 800ad8c:	08014d08 	.word	0x08014d08
 800ad90:	08014ed8 	.word	0x08014ed8
 800ad94:	08014d54 	.word	0x08014d54
 800ad98:	20000579 	.word	0x20000579
 800ad9c:	2000d788 	.word	0x2000d788

0800ada0 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800ada0:	b590      	push	{r4, r7, lr}
 800ada2:	b08b      	sub	sp, #44	; 0x2c
 800ada4:	af04      	add	r7, sp, #16
 800ada6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800ada8:	4b6f      	ldr	r3, [pc, #444]	; (800af68 <tcp_listen_input+0x1c8>)
 800adaa:	781b      	ldrb	r3, [r3, #0]
 800adac:	f003 0304 	and.w	r3, r3, #4
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	f040 80d2 	bne.w	800af5a <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d106      	bne.n	800adca <tcp_listen_input+0x2a>
 800adbc:	4b6b      	ldr	r3, [pc, #428]	; (800af6c <tcp_listen_input+0x1cc>)
 800adbe:	f240 2281 	movw	r2, #641	; 0x281
 800adc2:	496b      	ldr	r1, [pc, #428]	; (800af70 <tcp_listen_input+0x1d0>)
 800adc4:	486b      	ldr	r0, [pc, #428]	; (800af74 <tcp_listen_input+0x1d4>)
 800adc6:	f006 fc9b 	bl	8011700 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800adca:	4b67      	ldr	r3, [pc, #412]	; (800af68 <tcp_listen_input+0x1c8>)
 800adcc:	781b      	ldrb	r3, [r3, #0]
 800adce:	f003 0310 	and.w	r3, r3, #16
 800add2:	2b00      	cmp	r3, #0
 800add4:	d019      	beq.n	800ae0a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800add6:	4b68      	ldr	r3, [pc, #416]	; (800af78 <tcp_listen_input+0x1d8>)
 800add8:	6819      	ldr	r1, [r3, #0]
 800adda:	4b68      	ldr	r3, [pc, #416]	; (800af7c <tcp_listen_input+0x1dc>)
 800addc:	881b      	ldrh	r3, [r3, #0]
 800adde:	461a      	mov	r2, r3
 800ade0:	4b67      	ldr	r3, [pc, #412]	; (800af80 <tcp_listen_input+0x1e0>)
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ade6:	4b67      	ldr	r3, [pc, #412]	; (800af84 <tcp_listen_input+0x1e4>)
 800ade8:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800adea:	885b      	ldrh	r3, [r3, #2]
 800adec:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800adee:	4a65      	ldr	r2, [pc, #404]	; (800af84 <tcp_listen_input+0x1e4>)
 800adf0:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800adf2:	8812      	ldrh	r2, [r2, #0]
 800adf4:	b292      	uxth	r2, r2
 800adf6:	9202      	str	r2, [sp, #8]
 800adf8:	9301      	str	r3, [sp, #4]
 800adfa:	4b63      	ldr	r3, [pc, #396]	; (800af88 <tcp_listen_input+0x1e8>)
 800adfc:	9300      	str	r3, [sp, #0]
 800adfe:	4b63      	ldr	r3, [pc, #396]	; (800af8c <tcp_listen_input+0x1ec>)
 800ae00:	4602      	mov	r2, r0
 800ae02:	6878      	ldr	r0, [r7, #4]
 800ae04:	f003 fbd6 	bl	800e5b4 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800ae08:	e0a9      	b.n	800af5e <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800ae0a:	4b57      	ldr	r3, [pc, #348]	; (800af68 <tcp_listen_input+0x1c8>)
 800ae0c:	781b      	ldrb	r3, [r3, #0]
 800ae0e:	f003 0302 	and.w	r3, r3, #2
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	f000 80a3 	beq.w	800af5e <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	7d5b      	ldrb	r3, [r3, #21]
 800ae1c:	4618      	mov	r0, r3
 800ae1e:	f7ff f85b 	bl	8009ed8 <tcp_alloc>
 800ae22:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800ae24:	697b      	ldr	r3, [r7, #20]
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d111      	bne.n	800ae4e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	699b      	ldr	r3, [r3, #24]
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d00a      	beq.n	800ae48 <tcp_listen_input+0xa8>
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	699b      	ldr	r3, [r3, #24]
 800ae36:	687a      	ldr	r2, [r7, #4]
 800ae38:	6910      	ldr	r0, [r2, #16]
 800ae3a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ae3e:	2100      	movs	r1, #0
 800ae40:	4798      	blx	r3
 800ae42:	4603      	mov	r3, r0
 800ae44:	73bb      	strb	r3, [r7, #14]
      return;
 800ae46:	e08b      	b.n	800af60 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800ae48:	23f0      	movs	r3, #240	; 0xf0
 800ae4a:	73bb      	strb	r3, [r7, #14]
      return;
 800ae4c:	e088      	b.n	800af60 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800ae4e:	4b50      	ldr	r3, [pc, #320]	; (800af90 <tcp_listen_input+0x1f0>)
 800ae50:	695a      	ldr	r2, [r3, #20]
 800ae52:	697b      	ldr	r3, [r7, #20]
 800ae54:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800ae56:	4b4e      	ldr	r3, [pc, #312]	; (800af90 <tcp_listen_input+0x1f0>)
 800ae58:	691a      	ldr	r2, [r3, #16]
 800ae5a:	697b      	ldr	r3, [r7, #20]
 800ae5c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	8ada      	ldrh	r2, [r3, #22]
 800ae62:	697b      	ldr	r3, [r7, #20]
 800ae64:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800ae66:	4b47      	ldr	r3, [pc, #284]	; (800af84 <tcp_listen_input+0x1e4>)
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	881b      	ldrh	r3, [r3, #0]
 800ae6c:	b29a      	uxth	r2, r3
 800ae6e:	697b      	ldr	r3, [r7, #20]
 800ae70:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800ae72:	697b      	ldr	r3, [r7, #20]
 800ae74:	2203      	movs	r2, #3
 800ae76:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800ae78:	4b41      	ldr	r3, [pc, #260]	; (800af80 <tcp_listen_input+0x1e0>)
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	1c5a      	adds	r2, r3, #1
 800ae7e:	697b      	ldr	r3, [r7, #20]
 800ae80:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800ae82:	697b      	ldr	r3, [r7, #20]
 800ae84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ae86:	697b      	ldr	r3, [r7, #20]
 800ae88:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800ae8a:	6978      	ldr	r0, [r7, #20]
 800ae8c:	f7ff fa5a 	bl	800a344 <tcp_next_iss>
 800ae90:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800ae92:	697b      	ldr	r3, [r7, #20]
 800ae94:	693a      	ldr	r2, [r7, #16]
 800ae96:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800ae98:	697b      	ldr	r3, [r7, #20]
 800ae9a:	693a      	ldr	r2, [r7, #16]
 800ae9c:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800ae9e:	697b      	ldr	r3, [r7, #20]
 800aea0:	693a      	ldr	r2, [r7, #16]
 800aea2:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800aea4:	697b      	ldr	r3, [r7, #20]
 800aea6:	693a      	ldr	r2, [r7, #16]
 800aea8:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800aeaa:	4b35      	ldr	r3, [pc, #212]	; (800af80 <tcp_listen_input+0x1e0>)
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	1e5a      	subs	r2, r3, #1
 800aeb0:	697b      	ldr	r3, [r7, #20]
 800aeb2:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	691a      	ldr	r2, [r3, #16]
 800aeb8:	697b      	ldr	r3, [r7, #20]
 800aeba:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800aebc:	697b      	ldr	r3, [r7, #20]
 800aebe:	687a      	ldr	r2, [r7, #4]
 800aec0:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	7a5b      	ldrb	r3, [r3, #9]
 800aec6:	f003 030c 	and.w	r3, r3, #12
 800aeca:	b2da      	uxtb	r2, r3
 800aecc:	697b      	ldr	r3, [r7, #20]
 800aece:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	7a1a      	ldrb	r2, [r3, #8]
 800aed4:	697b      	ldr	r3, [r7, #20]
 800aed6:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800aed8:	4b2e      	ldr	r3, [pc, #184]	; (800af94 <tcp_listen_input+0x1f4>)
 800aeda:	681a      	ldr	r2, [r3, #0]
 800aedc:	697b      	ldr	r3, [r7, #20]
 800aede:	60da      	str	r2, [r3, #12]
 800aee0:	4a2c      	ldr	r2, [pc, #176]	; (800af94 <tcp_listen_input+0x1f4>)
 800aee2:	697b      	ldr	r3, [r7, #20]
 800aee4:	6013      	str	r3, [r2, #0]
 800aee6:	f003 fd27 	bl	800e938 <tcp_timer_needed>
 800aeea:	4b2b      	ldr	r3, [pc, #172]	; (800af98 <tcp_listen_input+0x1f8>)
 800aeec:	2201      	movs	r2, #1
 800aeee:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800aef0:	6978      	ldr	r0, [r7, #20]
 800aef2:	f001 fd8d 	bl	800ca10 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800aef6:	4b23      	ldr	r3, [pc, #140]	; (800af84 <tcp_listen_input+0x1e4>)
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	89db      	ldrh	r3, [r3, #14]
 800aefc:	b29a      	uxth	r2, r3
 800aefe:	697b      	ldr	r3, [r7, #20]
 800af00:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800af04:	697b      	ldr	r3, [r7, #20]
 800af06:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800af0a:	697b      	ldr	r3, [r7, #20]
 800af0c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800af10:	697b      	ldr	r3, [r7, #20]
 800af12:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800af14:	697b      	ldr	r3, [r7, #20]
 800af16:	3304      	adds	r3, #4
 800af18:	4618      	mov	r0, r3
 800af1a:	f005 f8eb 	bl	80100f4 <ip4_route>
 800af1e:	4601      	mov	r1, r0
 800af20:	697b      	ldr	r3, [r7, #20]
 800af22:	3304      	adds	r3, #4
 800af24:	461a      	mov	r2, r3
 800af26:	4620      	mov	r0, r4
 800af28:	f7ff fa32 	bl	800a390 <tcp_eff_send_mss_netif>
 800af2c:	4603      	mov	r3, r0
 800af2e:	461a      	mov	r2, r3
 800af30:	697b      	ldr	r3, [r7, #20]
 800af32:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800af34:	2112      	movs	r1, #18
 800af36:	6978      	ldr	r0, [r7, #20]
 800af38:	f002 fc9a 	bl	800d870 <tcp_enqueue_flags>
 800af3c:	4603      	mov	r3, r0
 800af3e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800af40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800af44:	2b00      	cmp	r3, #0
 800af46:	d004      	beq.n	800af52 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800af48:	2100      	movs	r1, #0
 800af4a:	6978      	ldr	r0, [r7, #20]
 800af4c:	f7fd feda 	bl	8008d04 <tcp_abandon>
      return;
 800af50:	e006      	b.n	800af60 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800af52:	6978      	ldr	r0, [r7, #20]
 800af54:	f002 fd7a 	bl	800da4c <tcp_output>
  return;
 800af58:	e001      	b.n	800af5e <tcp_listen_input+0x1be>
    return;
 800af5a:	bf00      	nop
 800af5c:	e000      	b.n	800af60 <tcp_listen_input+0x1c0>
  return;
 800af5e:	bf00      	nop
}
 800af60:	371c      	adds	r7, #28
 800af62:	46bd      	mov	sp, r7
 800af64:	bd90      	pop	{r4, r7, pc}
 800af66:	bf00      	nop
 800af68:	20000578 	.word	0x20000578
 800af6c:	08014d08 	.word	0x08014d08
 800af70:	08014f00 	.word	0x08014f00
 800af74:	08014d54 	.word	0x08014d54
 800af78:	20000570 	.word	0x20000570
 800af7c:	20000576 	.word	0x20000576
 800af80:	2000056c 	.word	0x2000056c
 800af84:	2000055c 	.word	0x2000055c
 800af88:	20004194 	.word	0x20004194
 800af8c:	20004198 	.word	0x20004198
 800af90:	20004184 	.word	0x20004184
 800af94:	2000d788 	.word	0x2000d788
 800af98:	2000d784 	.word	0x2000d784

0800af9c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800af9c:	b580      	push	{r7, lr}
 800af9e:	b086      	sub	sp, #24
 800afa0:	af04      	add	r7, sp, #16
 800afa2:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800afa4:	4b2f      	ldr	r3, [pc, #188]	; (800b064 <tcp_timewait_input+0xc8>)
 800afa6:	781b      	ldrb	r3, [r3, #0]
 800afa8:	f003 0304 	and.w	r3, r3, #4
 800afac:	2b00      	cmp	r3, #0
 800afae:	d153      	bne.n	800b058 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d106      	bne.n	800afc4 <tcp_timewait_input+0x28>
 800afb6:	4b2c      	ldr	r3, [pc, #176]	; (800b068 <tcp_timewait_input+0xcc>)
 800afb8:	f240 22ee 	movw	r2, #750	; 0x2ee
 800afbc:	492b      	ldr	r1, [pc, #172]	; (800b06c <tcp_timewait_input+0xd0>)
 800afbe:	482c      	ldr	r0, [pc, #176]	; (800b070 <tcp_timewait_input+0xd4>)
 800afc0:	f006 fb9e 	bl	8011700 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800afc4:	4b27      	ldr	r3, [pc, #156]	; (800b064 <tcp_timewait_input+0xc8>)
 800afc6:	781b      	ldrb	r3, [r3, #0]
 800afc8:	f003 0302 	and.w	r3, r3, #2
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d02a      	beq.n	800b026 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800afd0:	4b28      	ldr	r3, [pc, #160]	; (800b074 <tcp_timewait_input+0xd8>)
 800afd2:	681a      	ldr	r2, [r3, #0]
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afd8:	1ad3      	subs	r3, r2, r3
 800afda:	2b00      	cmp	r3, #0
 800afdc:	db2d      	blt.n	800b03a <tcp_timewait_input+0x9e>
 800afde:	4b25      	ldr	r3, [pc, #148]	; (800b074 <tcp_timewait_input+0xd8>)
 800afe0:	681a      	ldr	r2, [r3, #0]
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afe6:	6879      	ldr	r1, [r7, #4]
 800afe8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800afea:	440b      	add	r3, r1
 800afec:	1ad3      	subs	r3, r2, r3
 800afee:	2b00      	cmp	r3, #0
 800aff0:	dc23      	bgt.n	800b03a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800aff2:	4b21      	ldr	r3, [pc, #132]	; (800b078 <tcp_timewait_input+0xdc>)
 800aff4:	6819      	ldr	r1, [r3, #0]
 800aff6:	4b21      	ldr	r3, [pc, #132]	; (800b07c <tcp_timewait_input+0xe0>)
 800aff8:	881b      	ldrh	r3, [r3, #0]
 800affa:	461a      	mov	r2, r3
 800affc:	4b1d      	ldr	r3, [pc, #116]	; (800b074 <tcp_timewait_input+0xd8>)
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b002:	4b1f      	ldr	r3, [pc, #124]	; (800b080 <tcp_timewait_input+0xe4>)
 800b004:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b006:	885b      	ldrh	r3, [r3, #2]
 800b008:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b00a:	4a1d      	ldr	r2, [pc, #116]	; (800b080 <tcp_timewait_input+0xe4>)
 800b00c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b00e:	8812      	ldrh	r2, [r2, #0]
 800b010:	b292      	uxth	r2, r2
 800b012:	9202      	str	r2, [sp, #8]
 800b014:	9301      	str	r3, [sp, #4]
 800b016:	4b1b      	ldr	r3, [pc, #108]	; (800b084 <tcp_timewait_input+0xe8>)
 800b018:	9300      	str	r3, [sp, #0]
 800b01a:	4b1b      	ldr	r3, [pc, #108]	; (800b088 <tcp_timewait_input+0xec>)
 800b01c:	4602      	mov	r2, r0
 800b01e:	6878      	ldr	r0, [r7, #4]
 800b020:	f003 fac8 	bl	800e5b4 <tcp_rst>
      return;
 800b024:	e01b      	b.n	800b05e <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800b026:	4b0f      	ldr	r3, [pc, #60]	; (800b064 <tcp_timewait_input+0xc8>)
 800b028:	781b      	ldrb	r3, [r3, #0]
 800b02a:	f003 0301 	and.w	r3, r3, #1
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d003      	beq.n	800b03a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800b032:	4b16      	ldr	r3, [pc, #88]	; (800b08c <tcp_timewait_input+0xf0>)
 800b034:	681a      	ldr	r2, [r3, #0]
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800b03a:	4b10      	ldr	r3, [pc, #64]	; (800b07c <tcp_timewait_input+0xe0>)
 800b03c:	881b      	ldrh	r3, [r3, #0]
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d00c      	beq.n	800b05c <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	8b5b      	ldrh	r3, [r3, #26]
 800b046:	f043 0302 	orr.w	r3, r3, #2
 800b04a:	b29a      	uxth	r2, r3
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800b050:	6878      	ldr	r0, [r7, #4]
 800b052:	f002 fcfb 	bl	800da4c <tcp_output>
  }
  return;
 800b056:	e001      	b.n	800b05c <tcp_timewait_input+0xc0>
    return;
 800b058:	bf00      	nop
 800b05a:	e000      	b.n	800b05e <tcp_timewait_input+0xc2>
  return;
 800b05c:	bf00      	nop
}
 800b05e:	3708      	adds	r7, #8
 800b060:	46bd      	mov	sp, r7
 800b062:	bd80      	pop	{r7, pc}
 800b064:	20000578 	.word	0x20000578
 800b068:	08014d08 	.word	0x08014d08
 800b06c:	08014f20 	.word	0x08014f20
 800b070:	08014d54 	.word	0x08014d54
 800b074:	2000056c 	.word	0x2000056c
 800b078:	20000570 	.word	0x20000570
 800b07c:	20000576 	.word	0x20000576
 800b080:	2000055c 	.word	0x2000055c
 800b084:	20004194 	.word	0x20004194
 800b088:	20004198 	.word	0x20004198
 800b08c:	2000d78c 	.word	0x2000d78c

0800b090 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800b090:	b590      	push	{r4, r7, lr}
 800b092:	b08d      	sub	sp, #52	; 0x34
 800b094:	af04      	add	r7, sp, #16
 800b096:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800b098:	2300      	movs	r3, #0
 800b09a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800b09c:	2300      	movs	r3, #0
 800b09e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d106      	bne.n	800b0b4 <tcp_process+0x24>
 800b0a6:	4ba5      	ldr	r3, [pc, #660]	; (800b33c <tcp_process+0x2ac>)
 800b0a8:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800b0ac:	49a4      	ldr	r1, [pc, #656]	; (800b340 <tcp_process+0x2b0>)
 800b0ae:	48a5      	ldr	r0, [pc, #660]	; (800b344 <tcp_process+0x2b4>)
 800b0b0:	f006 fb26 	bl	8011700 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800b0b4:	4ba4      	ldr	r3, [pc, #656]	; (800b348 <tcp_process+0x2b8>)
 800b0b6:	781b      	ldrb	r3, [r3, #0]
 800b0b8:	f003 0304 	and.w	r3, r3, #4
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d04e      	beq.n	800b15e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	7d1b      	ldrb	r3, [r3, #20]
 800b0c4:	2b02      	cmp	r3, #2
 800b0c6:	d108      	bne.n	800b0da <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b0cc:	4b9f      	ldr	r3, [pc, #636]	; (800b34c <tcp_process+0x2bc>)
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	429a      	cmp	r2, r3
 800b0d2:	d123      	bne.n	800b11c <tcp_process+0x8c>
        acceptable = 1;
 800b0d4:	2301      	movs	r3, #1
 800b0d6:	76fb      	strb	r3, [r7, #27]
 800b0d8:	e020      	b.n	800b11c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b0de:	4b9c      	ldr	r3, [pc, #624]	; (800b350 <tcp_process+0x2c0>)
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	429a      	cmp	r2, r3
 800b0e4:	d102      	bne.n	800b0ec <tcp_process+0x5c>
        acceptable = 1;
 800b0e6:	2301      	movs	r3, #1
 800b0e8:	76fb      	strb	r3, [r7, #27]
 800b0ea:	e017      	b.n	800b11c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800b0ec:	4b98      	ldr	r3, [pc, #608]	; (800b350 <tcp_process+0x2c0>)
 800b0ee:	681a      	ldr	r2, [r3, #0]
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0f4:	1ad3      	subs	r3, r2, r3
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	db10      	blt.n	800b11c <tcp_process+0x8c>
 800b0fa:	4b95      	ldr	r3, [pc, #596]	; (800b350 <tcp_process+0x2c0>)
 800b0fc:	681a      	ldr	r2, [r3, #0]
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b102:	6879      	ldr	r1, [r7, #4]
 800b104:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b106:	440b      	add	r3, r1
 800b108:	1ad3      	subs	r3, r2, r3
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	dc06      	bgt.n	800b11c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	8b5b      	ldrh	r3, [r3, #26]
 800b112:	f043 0302 	orr.w	r3, r3, #2
 800b116:	b29a      	uxth	r2, r3
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800b11c:	7efb      	ldrb	r3, [r7, #27]
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d01b      	beq.n	800b15a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	7d1b      	ldrb	r3, [r3, #20]
 800b126:	2b00      	cmp	r3, #0
 800b128:	d106      	bne.n	800b138 <tcp_process+0xa8>
 800b12a:	4b84      	ldr	r3, [pc, #528]	; (800b33c <tcp_process+0x2ac>)
 800b12c:	f44f 724e 	mov.w	r2, #824	; 0x338
 800b130:	4988      	ldr	r1, [pc, #544]	; (800b354 <tcp_process+0x2c4>)
 800b132:	4884      	ldr	r0, [pc, #528]	; (800b344 <tcp_process+0x2b4>)
 800b134:	f006 fae4 	bl	8011700 <iprintf>
      recv_flags |= TF_RESET;
 800b138:	4b87      	ldr	r3, [pc, #540]	; (800b358 <tcp_process+0x2c8>)
 800b13a:	781b      	ldrb	r3, [r3, #0]
 800b13c:	f043 0308 	orr.w	r3, r3, #8
 800b140:	b2da      	uxtb	r2, r3
 800b142:	4b85      	ldr	r3, [pc, #532]	; (800b358 <tcp_process+0x2c8>)
 800b144:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	8b5b      	ldrh	r3, [r3, #26]
 800b14a:	f023 0301 	bic.w	r3, r3, #1
 800b14e:	b29a      	uxth	r2, r3
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800b154:	f06f 030d 	mvn.w	r3, #13
 800b158:	e37a      	b.n	800b850 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800b15a:	2300      	movs	r3, #0
 800b15c:	e378      	b.n	800b850 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800b15e:	4b7a      	ldr	r3, [pc, #488]	; (800b348 <tcp_process+0x2b8>)
 800b160:	781b      	ldrb	r3, [r3, #0]
 800b162:	f003 0302 	and.w	r3, r3, #2
 800b166:	2b00      	cmp	r3, #0
 800b168:	d010      	beq.n	800b18c <tcp_process+0xfc>
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	7d1b      	ldrb	r3, [r3, #20]
 800b16e:	2b02      	cmp	r3, #2
 800b170:	d00c      	beq.n	800b18c <tcp_process+0xfc>
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	7d1b      	ldrb	r3, [r3, #20]
 800b176:	2b03      	cmp	r3, #3
 800b178:	d008      	beq.n	800b18c <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	8b5b      	ldrh	r3, [r3, #26]
 800b17e:	f043 0302 	orr.w	r3, r3, #2
 800b182:	b29a      	uxth	r2, r3
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800b188:	2300      	movs	r3, #0
 800b18a:	e361      	b.n	800b850 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	8b5b      	ldrh	r3, [r3, #26]
 800b190:	f003 0310 	and.w	r3, r3, #16
 800b194:	2b00      	cmp	r3, #0
 800b196:	d103      	bne.n	800b1a0 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800b198:	4b70      	ldr	r3, [pc, #448]	; (800b35c <tcp_process+0x2cc>)
 800b19a:	681a      	ldr	r2, [r3, #0]
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	2200      	movs	r2, #0
 800b1a4:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	2200      	movs	r2, #0
 800b1ac:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800b1b0:	6878      	ldr	r0, [r7, #4]
 800b1b2:	f001 fc2d 	bl	800ca10 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	7d1b      	ldrb	r3, [r3, #20]
 800b1ba:	3b02      	subs	r3, #2
 800b1bc:	2b07      	cmp	r3, #7
 800b1be:	f200 8337 	bhi.w	800b830 <tcp_process+0x7a0>
 800b1c2:	a201      	add	r2, pc, #4	; (adr r2, 800b1c8 <tcp_process+0x138>)
 800b1c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1c8:	0800b1e9 	.word	0x0800b1e9
 800b1cc:	0800b419 	.word	0x0800b419
 800b1d0:	0800b591 	.word	0x0800b591
 800b1d4:	0800b5bb 	.word	0x0800b5bb
 800b1d8:	0800b6df 	.word	0x0800b6df
 800b1dc:	0800b591 	.word	0x0800b591
 800b1e0:	0800b76b 	.word	0x0800b76b
 800b1e4:	0800b7fb 	.word	0x0800b7fb
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800b1e8:	4b57      	ldr	r3, [pc, #348]	; (800b348 <tcp_process+0x2b8>)
 800b1ea:	781b      	ldrb	r3, [r3, #0]
 800b1ec:	f003 0310 	and.w	r3, r3, #16
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	f000 80e4 	beq.w	800b3be <tcp_process+0x32e>
 800b1f6:	4b54      	ldr	r3, [pc, #336]	; (800b348 <tcp_process+0x2b8>)
 800b1f8:	781b      	ldrb	r3, [r3, #0]
 800b1fa:	f003 0302 	and.w	r3, r3, #2
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	f000 80dd 	beq.w	800b3be <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b208:	1c5a      	adds	r2, r3, #1
 800b20a:	4b50      	ldr	r3, [pc, #320]	; (800b34c <tcp_process+0x2bc>)
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	429a      	cmp	r2, r3
 800b210:	f040 80d5 	bne.w	800b3be <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800b214:	4b4e      	ldr	r3, [pc, #312]	; (800b350 <tcp_process+0x2c0>)
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	1c5a      	adds	r2, r3, #1
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800b226:	4b49      	ldr	r3, [pc, #292]	; (800b34c <tcp_process+0x2bc>)
 800b228:	681a      	ldr	r2, [r3, #0]
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800b22e:	4b4c      	ldr	r3, [pc, #304]	; (800b360 <tcp_process+0x2d0>)
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	89db      	ldrh	r3, [r3, #14]
 800b234:	b29a      	uxth	r2, r3
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800b248:	4b41      	ldr	r3, [pc, #260]	; (800b350 <tcp_process+0x2c0>)
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	1e5a      	subs	r2, r3, #1
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	2204      	movs	r2, #4
 800b256:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	3304      	adds	r3, #4
 800b260:	4618      	mov	r0, r3
 800b262:	f004 ff47 	bl	80100f4 <ip4_route>
 800b266:	4601      	mov	r1, r0
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	3304      	adds	r3, #4
 800b26c:	461a      	mov	r2, r3
 800b26e:	4620      	mov	r0, r4
 800b270:	f7ff f88e 	bl	800a390 <tcp_eff_send_mss_netif>
 800b274:	4603      	mov	r3, r0
 800b276:	461a      	mov	r2, r3
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b280:	009a      	lsls	r2, r3, #2
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b286:	005b      	lsls	r3, r3, #1
 800b288:	f241 111c 	movw	r1, #4380	; 0x111c
 800b28c:	428b      	cmp	r3, r1
 800b28e:	bf38      	it	cc
 800b290:	460b      	movcc	r3, r1
 800b292:	429a      	cmp	r2, r3
 800b294:	d204      	bcs.n	800b2a0 <tcp_process+0x210>
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b29a:	009b      	lsls	r3, r3, #2
 800b29c:	b29b      	uxth	r3, r3
 800b29e:	e00d      	b.n	800b2bc <tcp_process+0x22c>
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b2a4:	005b      	lsls	r3, r3, #1
 800b2a6:	f241 121c 	movw	r2, #4380	; 0x111c
 800b2aa:	4293      	cmp	r3, r2
 800b2ac:	d904      	bls.n	800b2b8 <tcp_process+0x228>
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b2b2:	005b      	lsls	r3, r3, #1
 800b2b4:	b29b      	uxth	r3, r3
 800b2b6:	e001      	b.n	800b2bc <tcp_process+0x22c>
 800b2b8:	f241 131c 	movw	r3, #4380	; 0x111c
 800b2bc:	687a      	ldr	r2, [r7, #4]
 800b2be:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d106      	bne.n	800b2da <tcp_process+0x24a>
 800b2cc:	4b1b      	ldr	r3, [pc, #108]	; (800b33c <tcp_process+0x2ac>)
 800b2ce:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800b2d2:	4924      	ldr	r1, [pc, #144]	; (800b364 <tcp_process+0x2d4>)
 800b2d4:	481b      	ldr	r0, [pc, #108]	; (800b344 <tcp_process+0x2b4>)
 800b2d6:	f006 fa13 	bl	8011700 <iprintf>
        --pcb->snd_queuelen;
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b2e0:	3b01      	subs	r3, #1
 800b2e2:	b29a      	uxth	r2, r3
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2ee:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800b2f0:	69fb      	ldr	r3, [r7, #28]
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d111      	bne.n	800b31a <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b2fa:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800b2fc:	69fb      	ldr	r3, [r7, #28]
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d106      	bne.n	800b310 <tcp_process+0x280>
 800b302:	4b0e      	ldr	r3, [pc, #56]	; (800b33c <tcp_process+0x2ac>)
 800b304:	f44f 725d 	mov.w	r2, #884	; 0x374
 800b308:	4917      	ldr	r1, [pc, #92]	; (800b368 <tcp_process+0x2d8>)
 800b30a:	480e      	ldr	r0, [pc, #56]	; (800b344 <tcp_process+0x2b4>)
 800b30c:	f006 f9f8 	bl	8011700 <iprintf>
          pcb->unsent = rseg->next;
 800b310:	69fb      	ldr	r3, [r7, #28]
 800b312:	681a      	ldr	r2, [r3, #0]
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	66da      	str	r2, [r3, #108]	; 0x6c
 800b318:	e003      	b.n	800b322 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 800b31a:	69fb      	ldr	r3, [r7, #28]
 800b31c:	681a      	ldr	r2, [r3, #0]
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800b322:	69f8      	ldr	r0, [r7, #28]
 800b324:	f7fe fc51 	bl	8009bca <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d11d      	bne.n	800b36c <tcp_process+0x2dc>
          pcb->rtime = -1;
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b336:	861a      	strh	r2, [r3, #48]	; 0x30
 800b338:	e01f      	b.n	800b37a <tcp_process+0x2ea>
 800b33a:	bf00      	nop
 800b33c:	08014d08 	.word	0x08014d08
 800b340:	08014f40 	.word	0x08014f40
 800b344:	08014d54 	.word	0x08014d54
 800b348:	20000578 	.word	0x20000578
 800b34c:	20000570 	.word	0x20000570
 800b350:	2000056c 	.word	0x2000056c
 800b354:	08014f5c 	.word	0x08014f5c
 800b358:	20000579 	.word	0x20000579
 800b35c:	2000d78c 	.word	0x2000d78c
 800b360:	2000055c 	.word	0x2000055c
 800b364:	08014f7c 	.word	0x08014f7c
 800b368:	08014f94 	.word	0x08014f94
        } else {
          pcb->rtime = 0;
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	2200      	movs	r2, #0
 800b370:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	2200      	movs	r2, #0
 800b376:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b380:	2b00      	cmp	r3, #0
 800b382:	d00a      	beq.n	800b39a <tcp_process+0x30a>
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b38a:	687a      	ldr	r2, [r7, #4]
 800b38c:	6910      	ldr	r0, [r2, #16]
 800b38e:	2200      	movs	r2, #0
 800b390:	6879      	ldr	r1, [r7, #4]
 800b392:	4798      	blx	r3
 800b394:	4603      	mov	r3, r0
 800b396:	76bb      	strb	r3, [r7, #26]
 800b398:	e001      	b.n	800b39e <tcp_process+0x30e>
 800b39a:	2300      	movs	r3, #0
 800b39c:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800b39e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800b3a2:	f113 0f0d 	cmn.w	r3, #13
 800b3a6:	d102      	bne.n	800b3ae <tcp_process+0x31e>
          return ERR_ABRT;
 800b3a8:	f06f 030c 	mvn.w	r3, #12
 800b3ac:	e250      	b.n	800b850 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	8b5b      	ldrh	r3, [r3, #26]
 800b3b2:	f043 0302 	orr.w	r3, r3, #2
 800b3b6:	b29a      	uxth	r2, r3
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800b3bc:	e23a      	b.n	800b834 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800b3be:	4b9d      	ldr	r3, [pc, #628]	; (800b634 <tcp_process+0x5a4>)
 800b3c0:	781b      	ldrb	r3, [r3, #0]
 800b3c2:	f003 0310 	and.w	r3, r3, #16
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	f000 8234 	beq.w	800b834 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b3cc:	4b9a      	ldr	r3, [pc, #616]	; (800b638 <tcp_process+0x5a8>)
 800b3ce:	6819      	ldr	r1, [r3, #0]
 800b3d0:	4b9a      	ldr	r3, [pc, #616]	; (800b63c <tcp_process+0x5ac>)
 800b3d2:	881b      	ldrh	r3, [r3, #0]
 800b3d4:	461a      	mov	r2, r3
 800b3d6:	4b9a      	ldr	r3, [pc, #616]	; (800b640 <tcp_process+0x5b0>)
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b3dc:	4b99      	ldr	r3, [pc, #612]	; (800b644 <tcp_process+0x5b4>)
 800b3de:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b3e0:	885b      	ldrh	r3, [r3, #2]
 800b3e2:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b3e4:	4a97      	ldr	r2, [pc, #604]	; (800b644 <tcp_process+0x5b4>)
 800b3e6:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b3e8:	8812      	ldrh	r2, [r2, #0]
 800b3ea:	b292      	uxth	r2, r2
 800b3ec:	9202      	str	r2, [sp, #8]
 800b3ee:	9301      	str	r3, [sp, #4]
 800b3f0:	4b95      	ldr	r3, [pc, #596]	; (800b648 <tcp_process+0x5b8>)
 800b3f2:	9300      	str	r3, [sp, #0]
 800b3f4:	4b95      	ldr	r3, [pc, #596]	; (800b64c <tcp_process+0x5bc>)
 800b3f6:	4602      	mov	r2, r0
 800b3f8:	6878      	ldr	r0, [r7, #4]
 800b3fa:	f003 f8db 	bl	800e5b4 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b404:	2b05      	cmp	r3, #5
 800b406:	f200 8215 	bhi.w	800b834 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	2200      	movs	r2, #0
 800b40e:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800b410:	6878      	ldr	r0, [r7, #4]
 800b412:	f002 fea5 	bl	800e160 <tcp_rexmit_rto>
      break;
 800b416:	e20d      	b.n	800b834 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800b418:	4b86      	ldr	r3, [pc, #536]	; (800b634 <tcp_process+0x5a4>)
 800b41a:	781b      	ldrb	r3, [r3, #0]
 800b41c:	f003 0310 	and.w	r3, r3, #16
 800b420:	2b00      	cmp	r3, #0
 800b422:	f000 80a1 	beq.w	800b568 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b426:	4b84      	ldr	r3, [pc, #528]	; (800b638 <tcp_process+0x5a8>)
 800b428:	681a      	ldr	r2, [r3, #0]
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b42e:	1ad3      	subs	r3, r2, r3
 800b430:	3b01      	subs	r3, #1
 800b432:	2b00      	cmp	r3, #0
 800b434:	db7e      	blt.n	800b534 <tcp_process+0x4a4>
 800b436:	4b80      	ldr	r3, [pc, #512]	; (800b638 <tcp_process+0x5a8>)
 800b438:	681a      	ldr	r2, [r3, #0]
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b43e:	1ad3      	subs	r3, r2, r3
 800b440:	2b00      	cmp	r3, #0
 800b442:	dc77      	bgt.n	800b534 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	2204      	movs	r2, #4
 800b448:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d102      	bne.n	800b458 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800b452:	23fa      	movs	r3, #250	; 0xfa
 800b454:	76bb      	strb	r3, [r7, #26]
 800b456:	e01d      	b.n	800b494 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b45c:	699b      	ldr	r3, [r3, #24]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d106      	bne.n	800b470 <tcp_process+0x3e0>
 800b462:	4b7b      	ldr	r3, [pc, #492]	; (800b650 <tcp_process+0x5c0>)
 800b464:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800b468:	497a      	ldr	r1, [pc, #488]	; (800b654 <tcp_process+0x5c4>)
 800b46a:	487b      	ldr	r0, [pc, #492]	; (800b658 <tcp_process+0x5c8>)
 800b46c:	f006 f948 	bl	8011700 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b474:	699b      	ldr	r3, [r3, #24]
 800b476:	2b00      	cmp	r3, #0
 800b478:	d00a      	beq.n	800b490 <tcp_process+0x400>
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b47e:	699b      	ldr	r3, [r3, #24]
 800b480:	687a      	ldr	r2, [r7, #4]
 800b482:	6910      	ldr	r0, [r2, #16]
 800b484:	2200      	movs	r2, #0
 800b486:	6879      	ldr	r1, [r7, #4]
 800b488:	4798      	blx	r3
 800b48a:	4603      	mov	r3, r0
 800b48c:	76bb      	strb	r3, [r7, #26]
 800b48e:	e001      	b.n	800b494 <tcp_process+0x404>
 800b490:	23f0      	movs	r3, #240	; 0xf0
 800b492:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800b494:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d00a      	beq.n	800b4b2 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800b49c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800b4a0:	f113 0f0d 	cmn.w	r3, #13
 800b4a4:	d002      	beq.n	800b4ac <tcp_process+0x41c>
              tcp_abort(pcb);
 800b4a6:	6878      	ldr	r0, [r7, #4]
 800b4a8:	f7fd fcea 	bl	8008e80 <tcp_abort>
            }
            return ERR_ABRT;
 800b4ac:	f06f 030c 	mvn.w	r3, #12
 800b4b0:	e1ce      	b.n	800b850 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800b4b2:	6878      	ldr	r0, [r7, #4]
 800b4b4:	f000 fae0 	bl	800ba78 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800b4b8:	4b68      	ldr	r3, [pc, #416]	; (800b65c <tcp_process+0x5cc>)
 800b4ba:	881b      	ldrh	r3, [r3, #0]
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d005      	beq.n	800b4cc <tcp_process+0x43c>
            recv_acked--;
 800b4c0:	4b66      	ldr	r3, [pc, #408]	; (800b65c <tcp_process+0x5cc>)
 800b4c2:	881b      	ldrh	r3, [r3, #0]
 800b4c4:	3b01      	subs	r3, #1
 800b4c6:	b29a      	uxth	r2, r3
 800b4c8:	4b64      	ldr	r3, [pc, #400]	; (800b65c <tcp_process+0x5cc>)
 800b4ca:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b4d0:	009a      	lsls	r2, r3, #2
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b4d6:	005b      	lsls	r3, r3, #1
 800b4d8:	f241 111c 	movw	r1, #4380	; 0x111c
 800b4dc:	428b      	cmp	r3, r1
 800b4de:	bf38      	it	cc
 800b4e0:	460b      	movcc	r3, r1
 800b4e2:	429a      	cmp	r2, r3
 800b4e4:	d204      	bcs.n	800b4f0 <tcp_process+0x460>
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b4ea:	009b      	lsls	r3, r3, #2
 800b4ec:	b29b      	uxth	r3, r3
 800b4ee:	e00d      	b.n	800b50c <tcp_process+0x47c>
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b4f4:	005b      	lsls	r3, r3, #1
 800b4f6:	f241 121c 	movw	r2, #4380	; 0x111c
 800b4fa:	4293      	cmp	r3, r2
 800b4fc:	d904      	bls.n	800b508 <tcp_process+0x478>
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b502:	005b      	lsls	r3, r3, #1
 800b504:	b29b      	uxth	r3, r3
 800b506:	e001      	b.n	800b50c <tcp_process+0x47c>
 800b508:	f241 131c 	movw	r3, #4380	; 0x111c
 800b50c:	687a      	ldr	r2, [r7, #4]
 800b50e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800b512:	4b53      	ldr	r3, [pc, #332]	; (800b660 <tcp_process+0x5d0>)
 800b514:	781b      	ldrb	r3, [r3, #0]
 800b516:	f003 0320 	and.w	r3, r3, #32
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d037      	beq.n	800b58e <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	8b5b      	ldrh	r3, [r3, #26]
 800b522:	f043 0302 	orr.w	r3, r3, #2
 800b526:	b29a      	uxth	r2, r3
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	2207      	movs	r2, #7
 800b530:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800b532:	e02c      	b.n	800b58e <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b534:	4b40      	ldr	r3, [pc, #256]	; (800b638 <tcp_process+0x5a8>)
 800b536:	6819      	ldr	r1, [r3, #0]
 800b538:	4b40      	ldr	r3, [pc, #256]	; (800b63c <tcp_process+0x5ac>)
 800b53a:	881b      	ldrh	r3, [r3, #0]
 800b53c:	461a      	mov	r2, r3
 800b53e:	4b40      	ldr	r3, [pc, #256]	; (800b640 <tcp_process+0x5b0>)
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b544:	4b3f      	ldr	r3, [pc, #252]	; (800b644 <tcp_process+0x5b4>)
 800b546:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b548:	885b      	ldrh	r3, [r3, #2]
 800b54a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b54c:	4a3d      	ldr	r2, [pc, #244]	; (800b644 <tcp_process+0x5b4>)
 800b54e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b550:	8812      	ldrh	r2, [r2, #0]
 800b552:	b292      	uxth	r2, r2
 800b554:	9202      	str	r2, [sp, #8]
 800b556:	9301      	str	r3, [sp, #4]
 800b558:	4b3b      	ldr	r3, [pc, #236]	; (800b648 <tcp_process+0x5b8>)
 800b55a:	9300      	str	r3, [sp, #0]
 800b55c:	4b3b      	ldr	r3, [pc, #236]	; (800b64c <tcp_process+0x5bc>)
 800b55e:	4602      	mov	r2, r0
 800b560:	6878      	ldr	r0, [r7, #4]
 800b562:	f003 f827 	bl	800e5b4 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800b566:	e167      	b.n	800b838 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800b568:	4b32      	ldr	r3, [pc, #200]	; (800b634 <tcp_process+0x5a4>)
 800b56a:	781b      	ldrb	r3, [r3, #0]
 800b56c:	f003 0302 	and.w	r3, r3, #2
 800b570:	2b00      	cmp	r3, #0
 800b572:	f000 8161 	beq.w	800b838 <tcp_process+0x7a8>
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b57a:	1e5a      	subs	r2, r3, #1
 800b57c:	4b30      	ldr	r3, [pc, #192]	; (800b640 <tcp_process+0x5b0>)
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	429a      	cmp	r2, r3
 800b582:	f040 8159 	bne.w	800b838 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800b586:	6878      	ldr	r0, [r7, #4]
 800b588:	f002 fe0c 	bl	800e1a4 <tcp_rexmit>
      break;
 800b58c:	e154      	b.n	800b838 <tcp_process+0x7a8>
 800b58e:	e153      	b.n	800b838 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800b590:	6878      	ldr	r0, [r7, #4]
 800b592:	f000 fa71 	bl	800ba78 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800b596:	4b32      	ldr	r3, [pc, #200]	; (800b660 <tcp_process+0x5d0>)
 800b598:	781b      	ldrb	r3, [r3, #0]
 800b59a:	f003 0320 	and.w	r3, r3, #32
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	f000 814c 	beq.w	800b83c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	8b5b      	ldrh	r3, [r3, #26]
 800b5a8:	f043 0302 	orr.w	r3, r3, #2
 800b5ac:	b29a      	uxth	r2, r3
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	2207      	movs	r2, #7
 800b5b6:	751a      	strb	r2, [r3, #20]
      }
      break;
 800b5b8:	e140      	b.n	800b83c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800b5ba:	6878      	ldr	r0, [r7, #4]
 800b5bc:	f000 fa5c 	bl	800ba78 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800b5c0:	4b27      	ldr	r3, [pc, #156]	; (800b660 <tcp_process+0x5d0>)
 800b5c2:	781b      	ldrb	r3, [r3, #0]
 800b5c4:	f003 0320 	and.w	r3, r3, #32
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d071      	beq.n	800b6b0 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b5cc:	4b19      	ldr	r3, [pc, #100]	; (800b634 <tcp_process+0x5a4>)
 800b5ce:	781b      	ldrb	r3, [r3, #0]
 800b5d0:	f003 0310 	and.w	r3, r3, #16
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d060      	beq.n	800b69a <tcp_process+0x60a>
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b5dc:	4b16      	ldr	r3, [pc, #88]	; (800b638 <tcp_process+0x5a8>)
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	429a      	cmp	r2, r3
 800b5e2:	d15a      	bne.n	800b69a <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d156      	bne.n	800b69a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	8b5b      	ldrh	r3, [r3, #26]
 800b5f0:	f043 0302 	orr.w	r3, r3, #2
 800b5f4:	b29a      	uxth	r2, r3
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800b5fa:	6878      	ldr	r0, [r7, #4]
 800b5fc:	f7fe fdbe 	bl	800a17c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800b600:	4b18      	ldr	r3, [pc, #96]	; (800b664 <tcp_process+0x5d4>)
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	687a      	ldr	r2, [r7, #4]
 800b606:	429a      	cmp	r2, r3
 800b608:	d105      	bne.n	800b616 <tcp_process+0x586>
 800b60a:	4b16      	ldr	r3, [pc, #88]	; (800b664 <tcp_process+0x5d4>)
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	68db      	ldr	r3, [r3, #12]
 800b610:	4a14      	ldr	r2, [pc, #80]	; (800b664 <tcp_process+0x5d4>)
 800b612:	6013      	str	r3, [r2, #0]
 800b614:	e02e      	b.n	800b674 <tcp_process+0x5e4>
 800b616:	4b13      	ldr	r3, [pc, #76]	; (800b664 <tcp_process+0x5d4>)
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	617b      	str	r3, [r7, #20]
 800b61c:	e027      	b.n	800b66e <tcp_process+0x5de>
 800b61e:	697b      	ldr	r3, [r7, #20]
 800b620:	68db      	ldr	r3, [r3, #12]
 800b622:	687a      	ldr	r2, [r7, #4]
 800b624:	429a      	cmp	r2, r3
 800b626:	d11f      	bne.n	800b668 <tcp_process+0x5d8>
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	68da      	ldr	r2, [r3, #12]
 800b62c:	697b      	ldr	r3, [r7, #20]
 800b62e:	60da      	str	r2, [r3, #12]
 800b630:	e020      	b.n	800b674 <tcp_process+0x5e4>
 800b632:	bf00      	nop
 800b634:	20000578 	.word	0x20000578
 800b638:	20000570 	.word	0x20000570
 800b63c:	20000576 	.word	0x20000576
 800b640:	2000056c 	.word	0x2000056c
 800b644:	2000055c 	.word	0x2000055c
 800b648:	20004194 	.word	0x20004194
 800b64c:	20004198 	.word	0x20004198
 800b650:	08014d08 	.word	0x08014d08
 800b654:	08014fa8 	.word	0x08014fa8
 800b658:	08014d54 	.word	0x08014d54
 800b65c:	20000574 	.word	0x20000574
 800b660:	20000579 	.word	0x20000579
 800b664:	2000d788 	.word	0x2000d788
 800b668:	697b      	ldr	r3, [r7, #20]
 800b66a:	68db      	ldr	r3, [r3, #12]
 800b66c:	617b      	str	r3, [r7, #20]
 800b66e:	697b      	ldr	r3, [r7, #20]
 800b670:	2b00      	cmp	r3, #0
 800b672:	d1d4      	bne.n	800b61e <tcp_process+0x58e>
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	2200      	movs	r2, #0
 800b678:	60da      	str	r2, [r3, #12]
 800b67a:	4b77      	ldr	r3, [pc, #476]	; (800b858 <tcp_process+0x7c8>)
 800b67c:	2201      	movs	r2, #1
 800b67e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	220a      	movs	r2, #10
 800b684:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800b686:	4b75      	ldr	r3, [pc, #468]	; (800b85c <tcp_process+0x7cc>)
 800b688:	681a      	ldr	r2, [r3, #0]
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	60da      	str	r2, [r3, #12]
 800b68e:	4a73      	ldr	r2, [pc, #460]	; (800b85c <tcp_process+0x7cc>)
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	6013      	str	r3, [r2, #0]
 800b694:	f003 f950 	bl	800e938 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800b698:	e0d2      	b.n	800b840 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	8b5b      	ldrh	r3, [r3, #26]
 800b69e:	f043 0302 	orr.w	r3, r3, #2
 800b6a2:	b29a      	uxth	r2, r3
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	2208      	movs	r2, #8
 800b6ac:	751a      	strb	r2, [r3, #20]
      break;
 800b6ae:	e0c7      	b.n	800b840 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b6b0:	4b6b      	ldr	r3, [pc, #428]	; (800b860 <tcp_process+0x7d0>)
 800b6b2:	781b      	ldrb	r3, [r3, #0]
 800b6b4:	f003 0310 	and.w	r3, r3, #16
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	f000 80c1 	beq.w	800b840 <tcp_process+0x7b0>
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b6c2:	4b68      	ldr	r3, [pc, #416]	; (800b864 <tcp_process+0x7d4>)
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	429a      	cmp	r2, r3
 800b6c8:	f040 80ba 	bne.w	800b840 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	f040 80b5 	bne.w	800b840 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	2206      	movs	r2, #6
 800b6da:	751a      	strb	r2, [r3, #20]
      break;
 800b6dc:	e0b0      	b.n	800b840 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800b6de:	6878      	ldr	r0, [r7, #4]
 800b6e0:	f000 f9ca 	bl	800ba78 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800b6e4:	4b60      	ldr	r3, [pc, #384]	; (800b868 <tcp_process+0x7d8>)
 800b6e6:	781b      	ldrb	r3, [r3, #0]
 800b6e8:	f003 0320 	and.w	r3, r3, #32
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	f000 80a9 	beq.w	800b844 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	8b5b      	ldrh	r3, [r3, #26]
 800b6f6:	f043 0302 	orr.w	r3, r3, #2
 800b6fa:	b29a      	uxth	r2, r3
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800b700:	6878      	ldr	r0, [r7, #4]
 800b702:	f7fe fd3b 	bl	800a17c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800b706:	4b59      	ldr	r3, [pc, #356]	; (800b86c <tcp_process+0x7dc>)
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	687a      	ldr	r2, [r7, #4]
 800b70c:	429a      	cmp	r2, r3
 800b70e:	d105      	bne.n	800b71c <tcp_process+0x68c>
 800b710:	4b56      	ldr	r3, [pc, #344]	; (800b86c <tcp_process+0x7dc>)
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	68db      	ldr	r3, [r3, #12]
 800b716:	4a55      	ldr	r2, [pc, #340]	; (800b86c <tcp_process+0x7dc>)
 800b718:	6013      	str	r3, [r2, #0]
 800b71a:	e013      	b.n	800b744 <tcp_process+0x6b4>
 800b71c:	4b53      	ldr	r3, [pc, #332]	; (800b86c <tcp_process+0x7dc>)
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	613b      	str	r3, [r7, #16]
 800b722:	e00c      	b.n	800b73e <tcp_process+0x6ae>
 800b724:	693b      	ldr	r3, [r7, #16]
 800b726:	68db      	ldr	r3, [r3, #12]
 800b728:	687a      	ldr	r2, [r7, #4]
 800b72a:	429a      	cmp	r2, r3
 800b72c:	d104      	bne.n	800b738 <tcp_process+0x6a8>
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	68da      	ldr	r2, [r3, #12]
 800b732:	693b      	ldr	r3, [r7, #16]
 800b734:	60da      	str	r2, [r3, #12]
 800b736:	e005      	b.n	800b744 <tcp_process+0x6b4>
 800b738:	693b      	ldr	r3, [r7, #16]
 800b73a:	68db      	ldr	r3, [r3, #12]
 800b73c:	613b      	str	r3, [r7, #16]
 800b73e:	693b      	ldr	r3, [r7, #16]
 800b740:	2b00      	cmp	r3, #0
 800b742:	d1ef      	bne.n	800b724 <tcp_process+0x694>
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	2200      	movs	r2, #0
 800b748:	60da      	str	r2, [r3, #12]
 800b74a:	4b43      	ldr	r3, [pc, #268]	; (800b858 <tcp_process+0x7c8>)
 800b74c:	2201      	movs	r2, #1
 800b74e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	220a      	movs	r2, #10
 800b754:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800b756:	4b41      	ldr	r3, [pc, #260]	; (800b85c <tcp_process+0x7cc>)
 800b758:	681a      	ldr	r2, [r3, #0]
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	60da      	str	r2, [r3, #12]
 800b75e:	4a3f      	ldr	r2, [pc, #252]	; (800b85c <tcp_process+0x7cc>)
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	6013      	str	r3, [r2, #0]
 800b764:	f003 f8e8 	bl	800e938 <tcp_timer_needed>
      }
      break;
 800b768:	e06c      	b.n	800b844 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800b76a:	6878      	ldr	r0, [r7, #4]
 800b76c:	f000 f984 	bl	800ba78 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800b770:	4b3b      	ldr	r3, [pc, #236]	; (800b860 <tcp_process+0x7d0>)
 800b772:	781b      	ldrb	r3, [r3, #0]
 800b774:	f003 0310 	and.w	r3, r3, #16
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d065      	beq.n	800b848 <tcp_process+0x7b8>
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b780:	4b38      	ldr	r3, [pc, #224]	; (800b864 <tcp_process+0x7d4>)
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	429a      	cmp	r2, r3
 800b786:	d15f      	bne.n	800b848 <tcp_process+0x7b8>
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d15b      	bne.n	800b848 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800b790:	6878      	ldr	r0, [r7, #4]
 800b792:	f7fe fcf3 	bl	800a17c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800b796:	4b35      	ldr	r3, [pc, #212]	; (800b86c <tcp_process+0x7dc>)
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	687a      	ldr	r2, [r7, #4]
 800b79c:	429a      	cmp	r2, r3
 800b79e:	d105      	bne.n	800b7ac <tcp_process+0x71c>
 800b7a0:	4b32      	ldr	r3, [pc, #200]	; (800b86c <tcp_process+0x7dc>)
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	68db      	ldr	r3, [r3, #12]
 800b7a6:	4a31      	ldr	r2, [pc, #196]	; (800b86c <tcp_process+0x7dc>)
 800b7a8:	6013      	str	r3, [r2, #0]
 800b7aa:	e013      	b.n	800b7d4 <tcp_process+0x744>
 800b7ac:	4b2f      	ldr	r3, [pc, #188]	; (800b86c <tcp_process+0x7dc>)
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	60fb      	str	r3, [r7, #12]
 800b7b2:	e00c      	b.n	800b7ce <tcp_process+0x73e>
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	68db      	ldr	r3, [r3, #12]
 800b7b8:	687a      	ldr	r2, [r7, #4]
 800b7ba:	429a      	cmp	r2, r3
 800b7bc:	d104      	bne.n	800b7c8 <tcp_process+0x738>
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	68da      	ldr	r2, [r3, #12]
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	60da      	str	r2, [r3, #12]
 800b7c6:	e005      	b.n	800b7d4 <tcp_process+0x744>
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	68db      	ldr	r3, [r3, #12]
 800b7cc:	60fb      	str	r3, [r7, #12]
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d1ef      	bne.n	800b7b4 <tcp_process+0x724>
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	2200      	movs	r2, #0
 800b7d8:	60da      	str	r2, [r3, #12]
 800b7da:	4b1f      	ldr	r3, [pc, #124]	; (800b858 <tcp_process+0x7c8>)
 800b7dc:	2201      	movs	r2, #1
 800b7de:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	220a      	movs	r2, #10
 800b7e4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800b7e6:	4b1d      	ldr	r3, [pc, #116]	; (800b85c <tcp_process+0x7cc>)
 800b7e8:	681a      	ldr	r2, [r3, #0]
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	60da      	str	r2, [r3, #12]
 800b7ee:	4a1b      	ldr	r2, [pc, #108]	; (800b85c <tcp_process+0x7cc>)
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	6013      	str	r3, [r2, #0]
 800b7f4:	f003 f8a0 	bl	800e938 <tcp_timer_needed>
      }
      break;
 800b7f8:	e026      	b.n	800b848 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800b7fa:	6878      	ldr	r0, [r7, #4]
 800b7fc:	f000 f93c 	bl	800ba78 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800b800:	4b17      	ldr	r3, [pc, #92]	; (800b860 <tcp_process+0x7d0>)
 800b802:	781b      	ldrb	r3, [r3, #0]
 800b804:	f003 0310 	and.w	r3, r3, #16
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d01f      	beq.n	800b84c <tcp_process+0x7bc>
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b810:	4b14      	ldr	r3, [pc, #80]	; (800b864 <tcp_process+0x7d4>)
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	429a      	cmp	r2, r3
 800b816:	d119      	bne.n	800b84c <tcp_process+0x7bc>
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d115      	bne.n	800b84c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800b820:	4b11      	ldr	r3, [pc, #68]	; (800b868 <tcp_process+0x7d8>)
 800b822:	781b      	ldrb	r3, [r3, #0]
 800b824:	f043 0310 	orr.w	r3, r3, #16
 800b828:	b2da      	uxtb	r2, r3
 800b82a:	4b0f      	ldr	r3, [pc, #60]	; (800b868 <tcp_process+0x7d8>)
 800b82c:	701a      	strb	r2, [r3, #0]
      }
      break;
 800b82e:	e00d      	b.n	800b84c <tcp_process+0x7bc>
    default:
      break;
 800b830:	bf00      	nop
 800b832:	e00c      	b.n	800b84e <tcp_process+0x7be>
      break;
 800b834:	bf00      	nop
 800b836:	e00a      	b.n	800b84e <tcp_process+0x7be>
      break;
 800b838:	bf00      	nop
 800b83a:	e008      	b.n	800b84e <tcp_process+0x7be>
      break;
 800b83c:	bf00      	nop
 800b83e:	e006      	b.n	800b84e <tcp_process+0x7be>
      break;
 800b840:	bf00      	nop
 800b842:	e004      	b.n	800b84e <tcp_process+0x7be>
      break;
 800b844:	bf00      	nop
 800b846:	e002      	b.n	800b84e <tcp_process+0x7be>
      break;
 800b848:	bf00      	nop
 800b84a:	e000      	b.n	800b84e <tcp_process+0x7be>
      break;
 800b84c:	bf00      	nop
  }
  return ERR_OK;
 800b84e:	2300      	movs	r3, #0
}
 800b850:	4618      	mov	r0, r3
 800b852:	3724      	adds	r7, #36	; 0x24
 800b854:	46bd      	mov	sp, r7
 800b856:	bd90      	pop	{r4, r7, pc}
 800b858:	2000d784 	.word	0x2000d784
 800b85c:	2000d798 	.word	0x2000d798
 800b860:	20000578 	.word	0x20000578
 800b864:	20000570 	.word	0x20000570
 800b868:	20000579 	.word	0x20000579
 800b86c:	2000d788 	.word	0x2000d788

0800b870 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800b870:	b590      	push	{r4, r7, lr}
 800b872:	b085      	sub	sp, #20
 800b874:	af00      	add	r7, sp, #0
 800b876:	6078      	str	r0, [r7, #4]
 800b878:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d106      	bne.n	800b88e <tcp_oos_insert_segment+0x1e>
 800b880:	4b3b      	ldr	r3, [pc, #236]	; (800b970 <tcp_oos_insert_segment+0x100>)
 800b882:	f240 421f 	movw	r2, #1055	; 0x41f
 800b886:	493b      	ldr	r1, [pc, #236]	; (800b974 <tcp_oos_insert_segment+0x104>)
 800b888:	483b      	ldr	r0, [pc, #236]	; (800b978 <tcp_oos_insert_segment+0x108>)
 800b88a:	f005 ff39 	bl	8011700 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	68db      	ldr	r3, [r3, #12]
 800b892:	899b      	ldrh	r3, [r3, #12]
 800b894:	b29b      	uxth	r3, r3
 800b896:	4618      	mov	r0, r3
 800b898:	f7fb f9d8 	bl	8006c4c <lwip_htons>
 800b89c:	4603      	mov	r3, r0
 800b89e:	b2db      	uxtb	r3, r3
 800b8a0:	f003 0301 	and.w	r3, r3, #1
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d028      	beq.n	800b8fa <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800b8a8:	6838      	ldr	r0, [r7, #0]
 800b8aa:	f7fe f979 	bl	8009ba0 <tcp_segs_free>
    next = NULL;
 800b8ae:	2300      	movs	r3, #0
 800b8b0:	603b      	str	r3, [r7, #0]
 800b8b2:	e056      	b.n	800b962 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800b8b4:	683b      	ldr	r3, [r7, #0]
 800b8b6:	68db      	ldr	r3, [r3, #12]
 800b8b8:	899b      	ldrh	r3, [r3, #12]
 800b8ba:	b29b      	uxth	r3, r3
 800b8bc:	4618      	mov	r0, r3
 800b8be:	f7fb f9c5 	bl	8006c4c <lwip_htons>
 800b8c2:	4603      	mov	r3, r0
 800b8c4:	b2db      	uxtb	r3, r3
 800b8c6:	f003 0301 	and.w	r3, r3, #1
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d00d      	beq.n	800b8ea <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	68db      	ldr	r3, [r3, #12]
 800b8d2:	899b      	ldrh	r3, [r3, #12]
 800b8d4:	b29c      	uxth	r4, r3
 800b8d6:	2001      	movs	r0, #1
 800b8d8:	f7fb f9b8 	bl	8006c4c <lwip_htons>
 800b8dc:	4603      	mov	r3, r0
 800b8de:	461a      	mov	r2, r3
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	68db      	ldr	r3, [r3, #12]
 800b8e4:	4322      	orrs	r2, r4
 800b8e6:	b292      	uxth	r2, r2
 800b8e8:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800b8ea:	683b      	ldr	r3, [r7, #0]
 800b8ec:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800b8ee:	683b      	ldr	r3, [r7, #0]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800b8f4:	68f8      	ldr	r0, [r7, #12]
 800b8f6:	f7fe f968 	bl	8009bca <tcp_seg_free>
    while (next &&
 800b8fa:	683b      	ldr	r3, [r7, #0]
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d00e      	beq.n	800b91e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	891b      	ldrh	r3, [r3, #8]
 800b904:	461a      	mov	r2, r3
 800b906:	4b1d      	ldr	r3, [pc, #116]	; (800b97c <tcp_oos_insert_segment+0x10c>)
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	441a      	add	r2, r3
 800b90c:	683b      	ldr	r3, [r7, #0]
 800b90e:	68db      	ldr	r3, [r3, #12]
 800b910:	685b      	ldr	r3, [r3, #4]
 800b912:	6839      	ldr	r1, [r7, #0]
 800b914:	8909      	ldrh	r1, [r1, #8]
 800b916:	440b      	add	r3, r1
 800b918:	1ad3      	subs	r3, r2, r3
    while (next &&
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	daca      	bge.n	800b8b4 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800b91e:	683b      	ldr	r3, [r7, #0]
 800b920:	2b00      	cmp	r3, #0
 800b922:	d01e      	beq.n	800b962 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	891b      	ldrh	r3, [r3, #8]
 800b928:	461a      	mov	r2, r3
 800b92a:	4b14      	ldr	r3, [pc, #80]	; (800b97c <tcp_oos_insert_segment+0x10c>)
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	441a      	add	r2, r3
 800b930:	683b      	ldr	r3, [r7, #0]
 800b932:	68db      	ldr	r3, [r3, #12]
 800b934:	685b      	ldr	r3, [r3, #4]
 800b936:	1ad3      	subs	r3, r2, r3
    if (next &&
 800b938:	2b00      	cmp	r3, #0
 800b93a:	dd12      	ble.n	800b962 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800b93c:	683b      	ldr	r3, [r7, #0]
 800b93e:	68db      	ldr	r3, [r3, #12]
 800b940:	685b      	ldr	r3, [r3, #4]
 800b942:	b29a      	uxth	r2, r3
 800b944:	4b0d      	ldr	r3, [pc, #52]	; (800b97c <tcp_oos_insert_segment+0x10c>)
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	b29b      	uxth	r3, r3
 800b94a:	1ad3      	subs	r3, r2, r3
 800b94c:	b29a      	uxth	r2, r3
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	685a      	ldr	r2, [r3, #4]
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	891b      	ldrh	r3, [r3, #8]
 800b95a:	4619      	mov	r1, r3
 800b95c:	4610      	mov	r0, r2
 800b95e:	f7fc fb81 	bl	8008064 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	683a      	ldr	r2, [r7, #0]
 800b966:	601a      	str	r2, [r3, #0]
}
 800b968:	bf00      	nop
 800b96a:	3714      	adds	r7, #20
 800b96c:	46bd      	mov	sp, r7
 800b96e:	bd90      	pop	{r4, r7, pc}
 800b970:	08014d08 	.word	0x08014d08
 800b974:	08014fc8 	.word	0x08014fc8
 800b978:	08014d54 	.word	0x08014d54
 800b97c:	2000056c 	.word	0x2000056c

0800b980 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800b980:	b5b0      	push	{r4, r5, r7, lr}
 800b982:	b086      	sub	sp, #24
 800b984:	af00      	add	r7, sp, #0
 800b986:	60f8      	str	r0, [r7, #12]
 800b988:	60b9      	str	r1, [r7, #8]
 800b98a:	607a      	str	r2, [r7, #4]
 800b98c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800b98e:	e03e      	b.n	800ba0e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800b990:	68bb      	ldr	r3, [r7, #8]
 800b992:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800b994:	68bb      	ldr	r3, [r7, #8]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800b99a:	697b      	ldr	r3, [r7, #20]
 800b99c:	685b      	ldr	r3, [r3, #4]
 800b99e:	4618      	mov	r0, r3
 800b9a0:	f7fc fd6e 	bl	8008480 <pbuf_clen>
 800b9a4:	4603      	mov	r3, r0
 800b9a6:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b9ae:	8a7a      	ldrh	r2, [r7, #18]
 800b9b0:	429a      	cmp	r2, r3
 800b9b2:	d906      	bls.n	800b9c2 <tcp_free_acked_segments+0x42>
 800b9b4:	4b2a      	ldr	r3, [pc, #168]	; (800ba60 <tcp_free_acked_segments+0xe0>)
 800b9b6:	f240 4257 	movw	r2, #1111	; 0x457
 800b9ba:	492a      	ldr	r1, [pc, #168]	; (800ba64 <tcp_free_acked_segments+0xe4>)
 800b9bc:	482a      	ldr	r0, [pc, #168]	; (800ba68 <tcp_free_acked_segments+0xe8>)
 800b9be:	f005 fe9f 	bl	8011700 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800b9c8:	8a7b      	ldrh	r3, [r7, #18]
 800b9ca:	1ad3      	subs	r3, r2, r3
 800b9cc:	b29a      	uxth	r2, r3
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800b9d4:	697b      	ldr	r3, [r7, #20]
 800b9d6:	891a      	ldrh	r2, [r3, #8]
 800b9d8:	4b24      	ldr	r3, [pc, #144]	; (800ba6c <tcp_free_acked_segments+0xec>)
 800b9da:	881b      	ldrh	r3, [r3, #0]
 800b9dc:	4413      	add	r3, r2
 800b9de:	b29a      	uxth	r2, r3
 800b9e0:	4b22      	ldr	r3, [pc, #136]	; (800ba6c <tcp_free_acked_segments+0xec>)
 800b9e2:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800b9e4:	6978      	ldr	r0, [r7, #20]
 800b9e6:	f7fe f8f0 	bl	8009bca <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d00c      	beq.n	800ba0e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800b9f4:	68bb      	ldr	r3, [r7, #8]
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d109      	bne.n	800ba0e <tcp_free_acked_segments+0x8e>
 800b9fa:	683b      	ldr	r3, [r7, #0]
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d106      	bne.n	800ba0e <tcp_free_acked_segments+0x8e>
 800ba00:	4b17      	ldr	r3, [pc, #92]	; (800ba60 <tcp_free_acked_segments+0xe0>)
 800ba02:	f240 4261 	movw	r2, #1121	; 0x461
 800ba06:	491a      	ldr	r1, [pc, #104]	; (800ba70 <tcp_free_acked_segments+0xf0>)
 800ba08:	4817      	ldr	r0, [pc, #92]	; (800ba68 <tcp_free_acked_segments+0xe8>)
 800ba0a:	f005 fe79 	bl	8011700 <iprintf>
  while (seg_list != NULL &&
 800ba0e:	68bb      	ldr	r3, [r7, #8]
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d020      	beq.n	800ba56 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800ba14:	68bb      	ldr	r3, [r7, #8]
 800ba16:	68db      	ldr	r3, [r3, #12]
 800ba18:	685b      	ldr	r3, [r3, #4]
 800ba1a:	4618      	mov	r0, r3
 800ba1c:	f7fb f92b 	bl	8006c76 <lwip_htonl>
 800ba20:	4604      	mov	r4, r0
 800ba22:	68bb      	ldr	r3, [r7, #8]
 800ba24:	891b      	ldrh	r3, [r3, #8]
 800ba26:	461d      	mov	r5, r3
 800ba28:	68bb      	ldr	r3, [r7, #8]
 800ba2a:	68db      	ldr	r3, [r3, #12]
 800ba2c:	899b      	ldrh	r3, [r3, #12]
 800ba2e:	b29b      	uxth	r3, r3
 800ba30:	4618      	mov	r0, r3
 800ba32:	f7fb f90b 	bl	8006c4c <lwip_htons>
 800ba36:	4603      	mov	r3, r0
 800ba38:	b2db      	uxtb	r3, r3
 800ba3a:	f003 0303 	and.w	r3, r3, #3
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d001      	beq.n	800ba46 <tcp_free_acked_segments+0xc6>
 800ba42:	2301      	movs	r3, #1
 800ba44:	e000      	b.n	800ba48 <tcp_free_acked_segments+0xc8>
 800ba46:	2300      	movs	r3, #0
 800ba48:	442b      	add	r3, r5
 800ba4a:	18e2      	adds	r2, r4, r3
 800ba4c:	4b09      	ldr	r3, [pc, #36]	; (800ba74 <tcp_free_acked_segments+0xf4>)
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	dd9c      	ble.n	800b990 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800ba56:	68bb      	ldr	r3, [r7, #8]
}
 800ba58:	4618      	mov	r0, r3
 800ba5a:	3718      	adds	r7, #24
 800ba5c:	46bd      	mov	sp, r7
 800ba5e:	bdb0      	pop	{r4, r5, r7, pc}
 800ba60:	08014d08 	.word	0x08014d08
 800ba64:	08014ff0 	.word	0x08014ff0
 800ba68:	08014d54 	.word	0x08014d54
 800ba6c:	20000574 	.word	0x20000574
 800ba70:	08015018 	.word	0x08015018
 800ba74:	20000570 	.word	0x20000570

0800ba78 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800ba78:	b5b0      	push	{r4, r5, r7, lr}
 800ba7a:	b094      	sub	sp, #80	; 0x50
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800ba80:	2300      	movs	r3, #0
 800ba82:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d106      	bne.n	800ba98 <tcp_receive+0x20>
 800ba8a:	4ba6      	ldr	r3, [pc, #664]	; (800bd24 <tcp_receive+0x2ac>)
 800ba8c:	f240 427b 	movw	r2, #1147	; 0x47b
 800ba90:	49a5      	ldr	r1, [pc, #660]	; (800bd28 <tcp_receive+0x2b0>)
 800ba92:	48a6      	ldr	r0, [pc, #664]	; (800bd2c <tcp_receive+0x2b4>)
 800ba94:	f005 fe34 	bl	8011700 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	7d1b      	ldrb	r3, [r3, #20]
 800ba9c:	2b03      	cmp	r3, #3
 800ba9e:	d806      	bhi.n	800baae <tcp_receive+0x36>
 800baa0:	4ba0      	ldr	r3, [pc, #640]	; (800bd24 <tcp_receive+0x2ac>)
 800baa2:	f240 427c 	movw	r2, #1148	; 0x47c
 800baa6:	49a2      	ldr	r1, [pc, #648]	; (800bd30 <tcp_receive+0x2b8>)
 800baa8:	48a0      	ldr	r0, [pc, #640]	; (800bd2c <tcp_receive+0x2b4>)
 800baaa:	f005 fe29 	bl	8011700 <iprintf>

  if (flags & TCP_ACK) {
 800baae:	4ba1      	ldr	r3, [pc, #644]	; (800bd34 <tcp_receive+0x2bc>)
 800bab0:	781b      	ldrb	r3, [r3, #0]
 800bab2:	f003 0310 	and.w	r3, r3, #16
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	f000 8263 	beq.w	800bf82 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800bac2:	461a      	mov	r2, r3
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bac8:	4413      	add	r3, r2
 800baca:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bad0:	4b99      	ldr	r3, [pc, #612]	; (800bd38 <tcp_receive+0x2c0>)
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	1ad3      	subs	r3, r2, r3
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	db1b      	blt.n	800bb12 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bade:	4b96      	ldr	r3, [pc, #600]	; (800bd38 <tcp_receive+0x2c0>)
 800bae0:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800bae2:	429a      	cmp	r2, r3
 800bae4:	d106      	bne.n	800baf4 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800baea:	4b94      	ldr	r3, [pc, #592]	; (800bd3c <tcp_receive+0x2c4>)
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	1ad3      	subs	r3, r2, r3
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	db0e      	blt.n	800bb12 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800baf8:	4b90      	ldr	r3, [pc, #576]	; (800bd3c <tcp_receive+0x2c4>)
 800bafa:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800bafc:	429a      	cmp	r2, r3
 800bafe:	d125      	bne.n	800bb4c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800bb00:	4b8f      	ldr	r3, [pc, #572]	; (800bd40 <tcp_receive+0x2c8>)
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	89db      	ldrh	r3, [r3, #14]
 800bb06:	b29a      	uxth	r2, r3
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800bb0e:	429a      	cmp	r2, r3
 800bb10:	d91c      	bls.n	800bb4c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800bb12:	4b8b      	ldr	r3, [pc, #556]	; (800bd40 <tcp_receive+0x2c8>)
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	89db      	ldrh	r3, [r3, #14]
 800bb18:	b29a      	uxth	r2, r3
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800bb2c:	429a      	cmp	r2, r3
 800bb2e:	d205      	bcs.n	800bb3c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800bb3c:	4b7e      	ldr	r3, [pc, #504]	; (800bd38 <tcp_receive+0x2c0>)
 800bb3e:	681a      	ldr	r2, [r3, #0]
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800bb44:	4b7d      	ldr	r3, [pc, #500]	; (800bd3c <tcp_receive+0x2c4>)
 800bb46:	681a      	ldr	r2, [r3, #0]
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800bb4c:	4b7b      	ldr	r3, [pc, #492]	; (800bd3c <tcp_receive+0x2c4>)
 800bb4e:	681a      	ldr	r2, [r3, #0]
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb54:	1ad3      	subs	r3, r2, r3
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	dc58      	bgt.n	800bc0c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800bb5a:	4b7a      	ldr	r3, [pc, #488]	; (800bd44 <tcp_receive+0x2cc>)
 800bb5c:	881b      	ldrh	r3, [r3, #0]
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d14b      	bne.n	800bbfa <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb66:	687a      	ldr	r2, [r7, #4]
 800bb68:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800bb6c:	4413      	add	r3, r2
 800bb6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bb70:	429a      	cmp	r2, r3
 800bb72:	d142      	bne.n	800bbfa <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	db3d      	blt.n	800bbfa <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bb82:	4b6e      	ldr	r3, [pc, #440]	; (800bd3c <tcp_receive+0x2c4>)
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	429a      	cmp	r2, r3
 800bb88:	d137      	bne.n	800bbfa <tcp_receive+0x182>
              found_dupack = 1;
 800bb8a:	2301      	movs	r3, #1
 800bb8c:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800bb94:	2bff      	cmp	r3, #255	; 0xff
 800bb96:	d007      	beq.n	800bba8 <tcp_receive+0x130>
                ++pcb->dupacks;
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800bb9e:	3301      	adds	r3, #1
 800bba0:	b2da      	uxtb	r2, r3
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800bbae:	2b03      	cmp	r3, #3
 800bbb0:	d91b      	bls.n	800bbea <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bbbc:	4413      	add	r3, r2
 800bbbe:	b29a      	uxth	r2, r3
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800bbc6:	429a      	cmp	r2, r3
 800bbc8:	d30a      	bcc.n	800bbe0 <tcp_receive+0x168>
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bbd4:	4413      	add	r3, r2
 800bbd6:	b29a      	uxth	r2, r3
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800bbde:	e004      	b.n	800bbea <tcp_receive+0x172>
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bbe6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800bbf0:	2b02      	cmp	r3, #2
 800bbf2:	d902      	bls.n	800bbfa <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800bbf4:	6878      	ldr	r0, [r7, #4]
 800bbf6:	f002 fb41 	bl	800e27c <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800bbfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	f040 8160 	bne.w	800bec2 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	2200      	movs	r2, #0
 800bc06:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800bc0a:	e15a      	b.n	800bec2 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800bc0c:	4b4b      	ldr	r3, [pc, #300]	; (800bd3c <tcp_receive+0x2c4>)
 800bc0e:	681a      	ldr	r2, [r3, #0]
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc14:	1ad3      	subs	r3, r2, r3
 800bc16:	3b01      	subs	r3, #1
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	f2c0 814d 	blt.w	800beb8 <tcp_receive+0x440>
 800bc1e:	4b47      	ldr	r3, [pc, #284]	; (800bd3c <tcp_receive+0x2c4>)
 800bc20:	681a      	ldr	r2, [r3, #0]
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc26:	1ad3      	subs	r3, r2, r3
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	f300 8145 	bgt.w	800beb8 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	8b5b      	ldrh	r3, [r3, #26]
 800bc32:	f003 0304 	and.w	r3, r3, #4
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d010      	beq.n	800bc5c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	8b5b      	ldrh	r3, [r3, #26]
 800bc3e:	f023 0304 	bic.w	r3, r3, #4
 800bc42:	b29a      	uxth	r2, r3
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	2200      	movs	r2, #0
 800bc58:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	2200      	movs	r2, #0
 800bc60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800bc6a:	10db      	asrs	r3, r3, #3
 800bc6c:	b21b      	sxth	r3, r3
 800bc6e:	b29a      	uxth	r2, r3
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800bc76:	b29b      	uxth	r3, r3
 800bc78:	4413      	add	r3, r2
 800bc7a:	b29b      	uxth	r3, r3
 800bc7c:	b21a      	sxth	r2, r3
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800bc84:	4b2d      	ldr	r3, [pc, #180]	; (800bd3c <tcp_receive+0x2c4>)
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	b29a      	uxth	r2, r3
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc8e:	b29b      	uxth	r3, r3
 800bc90:	1ad3      	subs	r3, r2, r3
 800bc92:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	2200      	movs	r2, #0
 800bc98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800bc9c:	4b27      	ldr	r3, [pc, #156]	; (800bd3c <tcp_receive+0x2c4>)
 800bc9e:	681a      	ldr	r2, [r3, #0]
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	7d1b      	ldrb	r3, [r3, #20]
 800bca8:	2b03      	cmp	r3, #3
 800bcaa:	f240 8096 	bls.w	800bdda <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800bcba:	429a      	cmp	r2, r3
 800bcbc:	d244      	bcs.n	800bd48 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	8b5b      	ldrh	r3, [r3, #26]
 800bcc2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d001      	beq.n	800bcce <tcp_receive+0x256>
 800bcca:	2301      	movs	r3, #1
 800bccc:	e000      	b.n	800bcd0 <tcp_receive+0x258>
 800bcce:	2302      	movs	r3, #2
 800bcd0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800bcd4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800bcd8:	b29a      	uxth	r2, r3
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bcde:	fb12 f303 	smulbb	r3, r2, r3
 800bce2:	b29b      	uxth	r3, r3
 800bce4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800bce6:	4293      	cmp	r3, r2
 800bce8:	bf28      	it	cs
 800bcea:	4613      	movcs	r3, r2
 800bcec:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800bcf4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800bcf6:	4413      	add	r3, r2
 800bcf8:	b29a      	uxth	r2, r3
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800bd00:	429a      	cmp	r2, r3
 800bd02:	d309      	bcc.n	800bd18 <tcp_receive+0x2a0>
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800bd0a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800bd0c:	4413      	add	r3, r2
 800bd0e:	b29a      	uxth	r2, r3
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800bd16:	e060      	b.n	800bdda <tcp_receive+0x362>
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bd1e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800bd22:	e05a      	b.n	800bdda <tcp_receive+0x362>
 800bd24:	08014d08 	.word	0x08014d08
 800bd28:	08015038 	.word	0x08015038
 800bd2c:	08014d54 	.word	0x08014d54
 800bd30:	08015054 	.word	0x08015054
 800bd34:	20000578 	.word	0x20000578
 800bd38:	2000056c 	.word	0x2000056c
 800bd3c:	20000570 	.word	0x20000570
 800bd40:	2000055c 	.word	0x2000055c
 800bd44:	20000576 	.word	0x20000576
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800bd4e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bd50:	4413      	add	r3, r2
 800bd52:	b29a      	uxth	r2, r3
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bd5a:	429a      	cmp	r2, r3
 800bd5c:	d309      	bcc.n	800bd72 <tcp_receive+0x2fa>
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800bd64:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bd66:	4413      	add	r3, r2
 800bd68:	b29a      	uxth	r2, r3
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800bd70:	e004      	b.n	800bd7c <tcp_receive+0x304>
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bd78:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800bd88:	429a      	cmp	r2, r3
 800bd8a:	d326      	bcc.n	800bdda <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800bd98:	1ad3      	subs	r3, r2, r3
 800bd9a:	b29a      	uxth	r2, r3
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bdac:	4413      	add	r3, r2
 800bdae:	b29a      	uxth	r2, r3
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800bdb6:	429a      	cmp	r2, r3
 800bdb8:	d30a      	bcc.n	800bdd0 <tcp_receive+0x358>
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bdc4:	4413      	add	r3, r2
 800bdc6:	b29a      	uxth	r2, r3
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800bdce:	e004      	b.n	800bdda <tcp_receive+0x362>
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bdd6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bde2:	4a98      	ldr	r2, [pc, #608]	; (800c044 <tcp_receive+0x5cc>)
 800bde4:	6878      	ldr	r0, [r7, #4]
 800bde6:	f7ff fdcb 	bl	800b980 <tcp_free_acked_segments>
 800bdea:	4602      	mov	r2, r0
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bdf8:	4a93      	ldr	r2, [pc, #588]	; (800c048 <tcp_receive+0x5d0>)
 800bdfa:	6878      	ldr	r0, [r7, #4]
 800bdfc:	f7ff fdc0 	bl	800b980 <tcp_free_acked_segments>
 800be00:	4602      	mov	r2, r0
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d104      	bne.n	800be18 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800be14:	861a      	strh	r2, [r3, #48]	; 0x30
 800be16:	e002      	b.n	800be1e <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	2200      	movs	r2, #0
 800be1c:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	2200      	movs	r2, #0
 800be22:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d103      	bne.n	800be34 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	2200      	movs	r2, #0
 800be30:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800be3a:	4b84      	ldr	r3, [pc, #528]	; (800c04c <tcp_receive+0x5d4>)
 800be3c:	881b      	ldrh	r3, [r3, #0]
 800be3e:	4413      	add	r3, r2
 800be40:	b29a      	uxth	r2, r3
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	8b5b      	ldrh	r3, [r3, #26]
 800be4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800be50:	2b00      	cmp	r3, #0
 800be52:	d035      	beq.n	800bec0 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d118      	bne.n	800be8e <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800be60:	2b00      	cmp	r3, #0
 800be62:	d00c      	beq.n	800be7e <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800be6c:	68db      	ldr	r3, [r3, #12]
 800be6e:	685b      	ldr	r3, [r3, #4]
 800be70:	4618      	mov	r0, r3
 800be72:	f7fa ff00 	bl	8006c76 <lwip_htonl>
 800be76:	4603      	mov	r3, r0
 800be78:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	dc20      	bgt.n	800bec0 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	8b5b      	ldrh	r3, [r3, #26]
 800be82:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800be86:	b29a      	uxth	r2, r3
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800be8c:	e018      	b.n	800bec0 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be96:	68db      	ldr	r3, [r3, #12]
 800be98:	685b      	ldr	r3, [r3, #4]
 800be9a:	4618      	mov	r0, r3
 800be9c:	f7fa feeb 	bl	8006c76 <lwip_htonl>
 800bea0:	4603      	mov	r3, r0
 800bea2:	1ae3      	subs	r3, r4, r3
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	dc0b      	bgt.n	800bec0 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	8b5b      	ldrh	r3, [r3, #26]
 800beac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800beb0:	b29a      	uxth	r2, r3
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800beb6:	e003      	b.n	800bec0 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800beb8:	6878      	ldr	r0, [r7, #4]
 800beba:	f002 fbcd 	bl	800e658 <tcp_send_empty_ack>
 800bebe:	e000      	b.n	800bec2 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800bec0:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d05b      	beq.n	800bf82 <tcp_receive+0x50a>
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bece:	4b60      	ldr	r3, [pc, #384]	; (800c050 <tcp_receive+0x5d8>)
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	1ad3      	subs	r3, r2, r3
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	da54      	bge.n	800bf82 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800bed8:	4b5e      	ldr	r3, [pc, #376]	; (800c054 <tcp_receive+0x5dc>)
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	b29a      	uxth	r2, r3
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bee2:	b29b      	uxth	r3, r3
 800bee4:	1ad3      	subs	r3, r2, r3
 800bee6:	b29b      	uxth	r3, r3
 800bee8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800beec:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800bef6:	10db      	asrs	r3, r3, #3
 800bef8:	b21b      	sxth	r3, r3
 800befa:	b29b      	uxth	r3, r3
 800befc:	1ad3      	subs	r3, r2, r3
 800befe:	b29b      	uxth	r3, r3
 800bf00:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800bf0a:	b29a      	uxth	r2, r3
 800bf0c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800bf10:	4413      	add	r3, r2
 800bf12:	b29b      	uxth	r3, r3
 800bf14:	b21a      	sxth	r2, r3
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800bf1a:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	da05      	bge.n	800bf2e <tcp_receive+0x4b6>
        m = (s16_t) - m;
 800bf22:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800bf26:	425b      	negs	r3, r3
 800bf28:	b29b      	uxth	r3, r3
 800bf2a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800bf2e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800bf38:	109b      	asrs	r3, r3, #2
 800bf3a:	b21b      	sxth	r3, r3
 800bf3c:	b29b      	uxth	r3, r3
 800bf3e:	1ad3      	subs	r3, r2, r3
 800bf40:	b29b      	uxth	r3, r3
 800bf42:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800bf4c:	b29a      	uxth	r2, r3
 800bf4e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800bf52:	4413      	add	r3, r2
 800bf54:	b29b      	uxth	r3, r3
 800bf56:	b21a      	sxth	r2, r3
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800bf62:	10db      	asrs	r3, r3, #3
 800bf64:	b21b      	sxth	r3, r3
 800bf66:	b29a      	uxth	r2, r3
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800bf6e:	b29b      	uxth	r3, r3
 800bf70:	4413      	add	r3, r2
 800bf72:	b29b      	uxth	r3, r3
 800bf74:	b21a      	sxth	r2, r3
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	2200      	movs	r2, #0
 800bf80:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800bf82:	4b35      	ldr	r3, [pc, #212]	; (800c058 <tcp_receive+0x5e0>)
 800bf84:	881b      	ldrh	r3, [r3, #0]
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	f000 84e1 	beq.w	800c94e <tcp_receive+0xed6>
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	7d1b      	ldrb	r3, [r3, #20]
 800bf90:	2b06      	cmp	r3, #6
 800bf92:	f200 84dc 	bhi.w	800c94e <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bf9a:	4b30      	ldr	r3, [pc, #192]	; (800c05c <tcp_receive+0x5e4>)
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	1ad3      	subs	r3, r2, r3
 800bfa0:	3b01      	subs	r3, #1
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	f2c0 808e 	blt.w	800c0c4 <tcp_receive+0x64c>
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bfac:	4b2a      	ldr	r3, [pc, #168]	; (800c058 <tcp_receive+0x5e0>)
 800bfae:	881b      	ldrh	r3, [r3, #0]
 800bfb0:	4619      	mov	r1, r3
 800bfb2:	4b2a      	ldr	r3, [pc, #168]	; (800c05c <tcp_receive+0x5e4>)
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	440b      	add	r3, r1
 800bfb8:	1ad3      	subs	r3, r2, r3
 800bfba:	3301      	adds	r3, #1
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	f300 8081 	bgt.w	800c0c4 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800bfc2:	4b27      	ldr	r3, [pc, #156]	; (800c060 <tcp_receive+0x5e8>)
 800bfc4:	685b      	ldr	r3, [r3, #4]
 800bfc6:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bfcc:	4b23      	ldr	r3, [pc, #140]	; (800c05c <tcp_receive+0x5e4>)
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	1ad3      	subs	r3, r2, r3
 800bfd2:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800bfd4:	4b22      	ldr	r3, [pc, #136]	; (800c060 <tcp_receive+0x5e8>)
 800bfd6:	685b      	ldr	r3, [r3, #4]
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d106      	bne.n	800bfea <tcp_receive+0x572>
 800bfdc:	4b21      	ldr	r3, [pc, #132]	; (800c064 <tcp_receive+0x5ec>)
 800bfde:	f240 5294 	movw	r2, #1428	; 0x594
 800bfe2:	4921      	ldr	r1, [pc, #132]	; (800c068 <tcp_receive+0x5f0>)
 800bfe4:	4821      	ldr	r0, [pc, #132]	; (800c06c <tcp_receive+0x5f4>)
 800bfe6:	f005 fb8b 	bl	8011700 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800bfea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfec:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800bff0:	4293      	cmp	r3, r2
 800bff2:	d906      	bls.n	800c002 <tcp_receive+0x58a>
 800bff4:	4b1b      	ldr	r3, [pc, #108]	; (800c064 <tcp_receive+0x5ec>)
 800bff6:	f240 5295 	movw	r2, #1429	; 0x595
 800bffa:	491d      	ldr	r1, [pc, #116]	; (800c070 <tcp_receive+0x5f8>)
 800bffc:	481b      	ldr	r0, [pc, #108]	; (800c06c <tcp_receive+0x5f4>)
 800bffe:	f005 fb7f 	bl	8011700 <iprintf>
      off = (u16_t)off32;
 800c002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c004:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800c008:	4b15      	ldr	r3, [pc, #84]	; (800c060 <tcp_receive+0x5e8>)
 800c00a:	685b      	ldr	r3, [r3, #4]
 800c00c:	891b      	ldrh	r3, [r3, #8]
 800c00e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c012:	429a      	cmp	r2, r3
 800c014:	d906      	bls.n	800c024 <tcp_receive+0x5ac>
 800c016:	4b13      	ldr	r3, [pc, #76]	; (800c064 <tcp_receive+0x5ec>)
 800c018:	f240 5297 	movw	r2, #1431	; 0x597
 800c01c:	4915      	ldr	r1, [pc, #84]	; (800c074 <tcp_receive+0x5fc>)
 800c01e:	4813      	ldr	r0, [pc, #76]	; (800c06c <tcp_receive+0x5f4>)
 800c020:	f005 fb6e 	bl	8011700 <iprintf>
      inseg.len -= off;
 800c024:	4b0e      	ldr	r3, [pc, #56]	; (800c060 <tcp_receive+0x5e8>)
 800c026:	891a      	ldrh	r2, [r3, #8]
 800c028:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c02c:	1ad3      	subs	r3, r2, r3
 800c02e:	b29a      	uxth	r2, r3
 800c030:	4b0b      	ldr	r3, [pc, #44]	; (800c060 <tcp_receive+0x5e8>)
 800c032:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800c034:	4b0a      	ldr	r3, [pc, #40]	; (800c060 <tcp_receive+0x5e8>)
 800c036:	685b      	ldr	r3, [r3, #4]
 800c038:	891a      	ldrh	r2, [r3, #8]
 800c03a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c03e:	1ad3      	subs	r3, r2, r3
 800c040:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800c042:	e029      	b.n	800c098 <tcp_receive+0x620>
 800c044:	08015070 	.word	0x08015070
 800c048:	08015078 	.word	0x08015078
 800c04c:	20000574 	.word	0x20000574
 800c050:	20000570 	.word	0x20000570
 800c054:	2000d78c 	.word	0x2000d78c
 800c058:	20000576 	.word	0x20000576
 800c05c:	2000056c 	.word	0x2000056c
 800c060:	2000054c 	.word	0x2000054c
 800c064:	08014d08 	.word	0x08014d08
 800c068:	08015080 	.word	0x08015080
 800c06c:	08014d54 	.word	0x08014d54
 800c070:	08015090 	.word	0x08015090
 800c074:	080150a0 	.word	0x080150a0
        off -= p->len;
 800c078:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c07a:	895b      	ldrh	r3, [r3, #10]
 800c07c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c080:	1ad3      	subs	r3, r2, r3
 800c082:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800c086:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c088:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800c08a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800c08c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c08e:	2200      	movs	r2, #0
 800c090:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800c092:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800c098:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c09a:	895b      	ldrh	r3, [r3, #10]
 800c09c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c0a0:	429a      	cmp	r2, r3
 800c0a2:	d8e9      	bhi.n	800c078 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800c0a4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c0a8:	4619      	mov	r1, r3
 800c0aa:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800c0ac:	f7fc f8da 	bl	8008264 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0b4:	4a91      	ldr	r2, [pc, #580]	; (800c2fc <tcp_receive+0x884>)
 800c0b6:	6013      	str	r3, [r2, #0]
 800c0b8:	4b91      	ldr	r3, [pc, #580]	; (800c300 <tcp_receive+0x888>)
 800c0ba:	68db      	ldr	r3, [r3, #12]
 800c0bc:	4a8f      	ldr	r2, [pc, #572]	; (800c2fc <tcp_receive+0x884>)
 800c0be:	6812      	ldr	r2, [r2, #0]
 800c0c0:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800c0c2:	e00d      	b.n	800c0e0 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800c0c4:	4b8d      	ldr	r3, [pc, #564]	; (800c2fc <tcp_receive+0x884>)
 800c0c6:	681a      	ldr	r2, [r3, #0]
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0cc:	1ad3      	subs	r3, r2, r3
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	da06      	bge.n	800c0e0 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	8b5b      	ldrh	r3, [r3, #26]
 800c0d6:	f043 0302 	orr.w	r3, r3, #2
 800c0da:	b29a      	uxth	r2, r3
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800c0e0:	4b86      	ldr	r3, [pc, #536]	; (800c2fc <tcp_receive+0x884>)
 800c0e2:	681a      	ldr	r2, [r3, #0]
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0e8:	1ad3      	subs	r3, r2, r3
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	f2c0 842a 	blt.w	800c944 <tcp_receive+0xecc>
 800c0f0:	4b82      	ldr	r3, [pc, #520]	; (800c2fc <tcp_receive+0x884>)
 800c0f2:	681a      	ldr	r2, [r3, #0]
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0f8:	6879      	ldr	r1, [r7, #4]
 800c0fa:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c0fc:	440b      	add	r3, r1
 800c0fe:	1ad3      	subs	r3, r2, r3
 800c100:	3301      	adds	r3, #1
 800c102:	2b00      	cmp	r3, #0
 800c104:	f300 841e 	bgt.w	800c944 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c10c:	4b7b      	ldr	r3, [pc, #492]	; (800c2fc <tcp_receive+0x884>)
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	429a      	cmp	r2, r3
 800c112:	f040 829a 	bne.w	800c64a <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800c116:	4b7a      	ldr	r3, [pc, #488]	; (800c300 <tcp_receive+0x888>)
 800c118:	891c      	ldrh	r4, [r3, #8]
 800c11a:	4b79      	ldr	r3, [pc, #484]	; (800c300 <tcp_receive+0x888>)
 800c11c:	68db      	ldr	r3, [r3, #12]
 800c11e:	899b      	ldrh	r3, [r3, #12]
 800c120:	b29b      	uxth	r3, r3
 800c122:	4618      	mov	r0, r3
 800c124:	f7fa fd92 	bl	8006c4c <lwip_htons>
 800c128:	4603      	mov	r3, r0
 800c12a:	b2db      	uxtb	r3, r3
 800c12c:	f003 0303 	and.w	r3, r3, #3
 800c130:	2b00      	cmp	r3, #0
 800c132:	d001      	beq.n	800c138 <tcp_receive+0x6c0>
 800c134:	2301      	movs	r3, #1
 800c136:	e000      	b.n	800c13a <tcp_receive+0x6c2>
 800c138:	2300      	movs	r3, #0
 800c13a:	4423      	add	r3, r4
 800c13c:	b29a      	uxth	r2, r3
 800c13e:	4b71      	ldr	r3, [pc, #452]	; (800c304 <tcp_receive+0x88c>)
 800c140:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c146:	4b6f      	ldr	r3, [pc, #444]	; (800c304 <tcp_receive+0x88c>)
 800c148:	881b      	ldrh	r3, [r3, #0]
 800c14a:	429a      	cmp	r2, r3
 800c14c:	d275      	bcs.n	800c23a <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800c14e:	4b6c      	ldr	r3, [pc, #432]	; (800c300 <tcp_receive+0x888>)
 800c150:	68db      	ldr	r3, [r3, #12]
 800c152:	899b      	ldrh	r3, [r3, #12]
 800c154:	b29b      	uxth	r3, r3
 800c156:	4618      	mov	r0, r3
 800c158:	f7fa fd78 	bl	8006c4c <lwip_htons>
 800c15c:	4603      	mov	r3, r0
 800c15e:	b2db      	uxtb	r3, r3
 800c160:	f003 0301 	and.w	r3, r3, #1
 800c164:	2b00      	cmp	r3, #0
 800c166:	d01f      	beq.n	800c1a8 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800c168:	4b65      	ldr	r3, [pc, #404]	; (800c300 <tcp_receive+0x888>)
 800c16a:	68db      	ldr	r3, [r3, #12]
 800c16c:	899b      	ldrh	r3, [r3, #12]
 800c16e:	b29b      	uxth	r3, r3
 800c170:	b21b      	sxth	r3, r3
 800c172:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800c176:	b21c      	sxth	r4, r3
 800c178:	4b61      	ldr	r3, [pc, #388]	; (800c300 <tcp_receive+0x888>)
 800c17a:	68db      	ldr	r3, [r3, #12]
 800c17c:	899b      	ldrh	r3, [r3, #12]
 800c17e:	b29b      	uxth	r3, r3
 800c180:	4618      	mov	r0, r3
 800c182:	f7fa fd63 	bl	8006c4c <lwip_htons>
 800c186:	4603      	mov	r3, r0
 800c188:	b2db      	uxtb	r3, r3
 800c18a:	b29b      	uxth	r3, r3
 800c18c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800c190:	b29b      	uxth	r3, r3
 800c192:	4618      	mov	r0, r3
 800c194:	f7fa fd5a 	bl	8006c4c <lwip_htons>
 800c198:	4603      	mov	r3, r0
 800c19a:	b21b      	sxth	r3, r3
 800c19c:	4323      	orrs	r3, r4
 800c19e:	b21a      	sxth	r2, r3
 800c1a0:	4b57      	ldr	r3, [pc, #348]	; (800c300 <tcp_receive+0x888>)
 800c1a2:	68db      	ldr	r3, [r3, #12]
 800c1a4:	b292      	uxth	r2, r2
 800c1a6:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c1ac:	4b54      	ldr	r3, [pc, #336]	; (800c300 <tcp_receive+0x888>)
 800c1ae:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800c1b0:	4b53      	ldr	r3, [pc, #332]	; (800c300 <tcp_receive+0x888>)
 800c1b2:	68db      	ldr	r3, [r3, #12]
 800c1b4:	899b      	ldrh	r3, [r3, #12]
 800c1b6:	b29b      	uxth	r3, r3
 800c1b8:	4618      	mov	r0, r3
 800c1ba:	f7fa fd47 	bl	8006c4c <lwip_htons>
 800c1be:	4603      	mov	r3, r0
 800c1c0:	b2db      	uxtb	r3, r3
 800c1c2:	f003 0302 	and.w	r3, r3, #2
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d005      	beq.n	800c1d6 <tcp_receive+0x75e>
            inseg.len -= 1;
 800c1ca:	4b4d      	ldr	r3, [pc, #308]	; (800c300 <tcp_receive+0x888>)
 800c1cc:	891b      	ldrh	r3, [r3, #8]
 800c1ce:	3b01      	subs	r3, #1
 800c1d0:	b29a      	uxth	r2, r3
 800c1d2:	4b4b      	ldr	r3, [pc, #300]	; (800c300 <tcp_receive+0x888>)
 800c1d4:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800c1d6:	4b4a      	ldr	r3, [pc, #296]	; (800c300 <tcp_receive+0x888>)
 800c1d8:	685b      	ldr	r3, [r3, #4]
 800c1da:	4a49      	ldr	r2, [pc, #292]	; (800c300 <tcp_receive+0x888>)
 800c1dc:	8912      	ldrh	r2, [r2, #8]
 800c1de:	4611      	mov	r1, r2
 800c1e0:	4618      	mov	r0, r3
 800c1e2:	f7fb ff3f 	bl	8008064 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800c1e6:	4b46      	ldr	r3, [pc, #280]	; (800c300 <tcp_receive+0x888>)
 800c1e8:	891c      	ldrh	r4, [r3, #8]
 800c1ea:	4b45      	ldr	r3, [pc, #276]	; (800c300 <tcp_receive+0x888>)
 800c1ec:	68db      	ldr	r3, [r3, #12]
 800c1ee:	899b      	ldrh	r3, [r3, #12]
 800c1f0:	b29b      	uxth	r3, r3
 800c1f2:	4618      	mov	r0, r3
 800c1f4:	f7fa fd2a 	bl	8006c4c <lwip_htons>
 800c1f8:	4603      	mov	r3, r0
 800c1fa:	b2db      	uxtb	r3, r3
 800c1fc:	f003 0303 	and.w	r3, r3, #3
 800c200:	2b00      	cmp	r3, #0
 800c202:	d001      	beq.n	800c208 <tcp_receive+0x790>
 800c204:	2301      	movs	r3, #1
 800c206:	e000      	b.n	800c20a <tcp_receive+0x792>
 800c208:	2300      	movs	r3, #0
 800c20a:	4423      	add	r3, r4
 800c20c:	b29a      	uxth	r2, r3
 800c20e:	4b3d      	ldr	r3, [pc, #244]	; (800c304 <tcp_receive+0x88c>)
 800c210:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800c212:	4b3c      	ldr	r3, [pc, #240]	; (800c304 <tcp_receive+0x88c>)
 800c214:	881b      	ldrh	r3, [r3, #0]
 800c216:	461a      	mov	r2, r3
 800c218:	4b38      	ldr	r3, [pc, #224]	; (800c2fc <tcp_receive+0x884>)
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	441a      	add	r2, r3
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c222:	6879      	ldr	r1, [r7, #4]
 800c224:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c226:	440b      	add	r3, r1
 800c228:	429a      	cmp	r2, r3
 800c22a:	d006      	beq.n	800c23a <tcp_receive+0x7c2>
 800c22c:	4b36      	ldr	r3, [pc, #216]	; (800c308 <tcp_receive+0x890>)
 800c22e:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800c232:	4936      	ldr	r1, [pc, #216]	; (800c30c <tcp_receive+0x894>)
 800c234:	4836      	ldr	r0, [pc, #216]	; (800c310 <tcp_receive+0x898>)
 800c236:	f005 fa63 	bl	8011700 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c23e:	2b00      	cmp	r3, #0
 800c240:	f000 80e7 	beq.w	800c412 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800c244:	4b2e      	ldr	r3, [pc, #184]	; (800c300 <tcp_receive+0x888>)
 800c246:	68db      	ldr	r3, [r3, #12]
 800c248:	899b      	ldrh	r3, [r3, #12]
 800c24a:	b29b      	uxth	r3, r3
 800c24c:	4618      	mov	r0, r3
 800c24e:	f7fa fcfd 	bl	8006c4c <lwip_htons>
 800c252:	4603      	mov	r3, r0
 800c254:	b2db      	uxtb	r3, r3
 800c256:	f003 0301 	and.w	r3, r3, #1
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d010      	beq.n	800c280 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800c25e:	e00a      	b.n	800c276 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c264:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c26a:	681a      	ldr	r2, [r3, #0]
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800c270:	68f8      	ldr	r0, [r7, #12]
 800c272:	f7fd fcaa 	bl	8009bca <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d1f0      	bne.n	800c260 <tcp_receive+0x7e8>
 800c27e:	e0c8      	b.n	800c412 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c284:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800c286:	e052      	b.n	800c32e <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800c288:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c28a:	68db      	ldr	r3, [r3, #12]
 800c28c:	899b      	ldrh	r3, [r3, #12]
 800c28e:	b29b      	uxth	r3, r3
 800c290:	4618      	mov	r0, r3
 800c292:	f7fa fcdb 	bl	8006c4c <lwip_htons>
 800c296:	4603      	mov	r3, r0
 800c298:	b2db      	uxtb	r3, r3
 800c29a:	f003 0301 	and.w	r3, r3, #1
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d03d      	beq.n	800c31e <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800c2a2:	4b17      	ldr	r3, [pc, #92]	; (800c300 <tcp_receive+0x888>)
 800c2a4:	68db      	ldr	r3, [r3, #12]
 800c2a6:	899b      	ldrh	r3, [r3, #12]
 800c2a8:	b29b      	uxth	r3, r3
 800c2aa:	4618      	mov	r0, r3
 800c2ac:	f7fa fcce 	bl	8006c4c <lwip_htons>
 800c2b0:	4603      	mov	r3, r0
 800c2b2:	b2db      	uxtb	r3, r3
 800c2b4:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d130      	bne.n	800c31e <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800c2bc:	4b10      	ldr	r3, [pc, #64]	; (800c300 <tcp_receive+0x888>)
 800c2be:	68db      	ldr	r3, [r3, #12]
 800c2c0:	899b      	ldrh	r3, [r3, #12]
 800c2c2:	b29c      	uxth	r4, r3
 800c2c4:	2001      	movs	r0, #1
 800c2c6:	f7fa fcc1 	bl	8006c4c <lwip_htons>
 800c2ca:	4603      	mov	r3, r0
 800c2cc:	461a      	mov	r2, r3
 800c2ce:	4b0c      	ldr	r3, [pc, #48]	; (800c300 <tcp_receive+0x888>)
 800c2d0:	68db      	ldr	r3, [r3, #12]
 800c2d2:	4322      	orrs	r2, r4
 800c2d4:	b292      	uxth	r2, r2
 800c2d6:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800c2d8:	4b09      	ldr	r3, [pc, #36]	; (800c300 <tcp_receive+0x888>)
 800c2da:	891c      	ldrh	r4, [r3, #8]
 800c2dc:	4b08      	ldr	r3, [pc, #32]	; (800c300 <tcp_receive+0x888>)
 800c2de:	68db      	ldr	r3, [r3, #12]
 800c2e0:	899b      	ldrh	r3, [r3, #12]
 800c2e2:	b29b      	uxth	r3, r3
 800c2e4:	4618      	mov	r0, r3
 800c2e6:	f7fa fcb1 	bl	8006c4c <lwip_htons>
 800c2ea:	4603      	mov	r3, r0
 800c2ec:	b2db      	uxtb	r3, r3
 800c2ee:	f003 0303 	and.w	r3, r3, #3
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d00e      	beq.n	800c314 <tcp_receive+0x89c>
 800c2f6:	2301      	movs	r3, #1
 800c2f8:	e00d      	b.n	800c316 <tcp_receive+0x89e>
 800c2fa:	bf00      	nop
 800c2fc:	2000056c 	.word	0x2000056c
 800c300:	2000054c 	.word	0x2000054c
 800c304:	20000576 	.word	0x20000576
 800c308:	08014d08 	.word	0x08014d08
 800c30c:	080150b0 	.word	0x080150b0
 800c310:	08014d54 	.word	0x08014d54
 800c314:	2300      	movs	r3, #0
 800c316:	4423      	add	r3, r4
 800c318:	b29a      	uxth	r2, r3
 800c31a:	4b98      	ldr	r3, [pc, #608]	; (800c57c <tcp_receive+0xb04>)
 800c31c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800c31e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c320:	613b      	str	r3, [r7, #16]
              next = next->next;
 800c322:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800c328:	6938      	ldr	r0, [r7, #16]
 800c32a:	f7fd fc4e 	bl	8009bca <tcp_seg_free>
            while (next &&
 800c32e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c330:	2b00      	cmp	r3, #0
 800c332:	d00e      	beq.n	800c352 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800c334:	4b91      	ldr	r3, [pc, #580]	; (800c57c <tcp_receive+0xb04>)
 800c336:	881b      	ldrh	r3, [r3, #0]
 800c338:	461a      	mov	r2, r3
 800c33a:	4b91      	ldr	r3, [pc, #580]	; (800c580 <tcp_receive+0xb08>)
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	441a      	add	r2, r3
 800c340:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c342:	68db      	ldr	r3, [r3, #12]
 800c344:	685b      	ldr	r3, [r3, #4]
 800c346:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c348:	8909      	ldrh	r1, [r1, #8]
 800c34a:	440b      	add	r3, r1
 800c34c:	1ad3      	subs	r3, r2, r3
            while (next &&
 800c34e:	2b00      	cmp	r3, #0
 800c350:	da9a      	bge.n	800c288 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800c352:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c354:	2b00      	cmp	r3, #0
 800c356:	d059      	beq.n	800c40c <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800c358:	4b88      	ldr	r3, [pc, #544]	; (800c57c <tcp_receive+0xb04>)
 800c35a:	881b      	ldrh	r3, [r3, #0]
 800c35c:	461a      	mov	r2, r3
 800c35e:	4b88      	ldr	r3, [pc, #544]	; (800c580 <tcp_receive+0xb08>)
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	441a      	add	r2, r3
 800c364:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c366:	68db      	ldr	r3, [r3, #12]
 800c368:	685b      	ldr	r3, [r3, #4]
 800c36a:	1ad3      	subs	r3, r2, r3
            if (next &&
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	dd4d      	ble.n	800c40c <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800c370:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c372:	68db      	ldr	r3, [r3, #12]
 800c374:	685b      	ldr	r3, [r3, #4]
 800c376:	b29a      	uxth	r2, r3
 800c378:	4b81      	ldr	r3, [pc, #516]	; (800c580 <tcp_receive+0xb08>)
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	b29b      	uxth	r3, r3
 800c37e:	1ad3      	subs	r3, r2, r3
 800c380:	b29a      	uxth	r2, r3
 800c382:	4b80      	ldr	r3, [pc, #512]	; (800c584 <tcp_receive+0xb0c>)
 800c384:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800c386:	4b7f      	ldr	r3, [pc, #508]	; (800c584 <tcp_receive+0xb0c>)
 800c388:	68db      	ldr	r3, [r3, #12]
 800c38a:	899b      	ldrh	r3, [r3, #12]
 800c38c:	b29b      	uxth	r3, r3
 800c38e:	4618      	mov	r0, r3
 800c390:	f7fa fc5c 	bl	8006c4c <lwip_htons>
 800c394:	4603      	mov	r3, r0
 800c396:	b2db      	uxtb	r3, r3
 800c398:	f003 0302 	and.w	r3, r3, #2
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d005      	beq.n	800c3ac <tcp_receive+0x934>
                inseg.len -= 1;
 800c3a0:	4b78      	ldr	r3, [pc, #480]	; (800c584 <tcp_receive+0xb0c>)
 800c3a2:	891b      	ldrh	r3, [r3, #8]
 800c3a4:	3b01      	subs	r3, #1
 800c3a6:	b29a      	uxth	r2, r3
 800c3a8:	4b76      	ldr	r3, [pc, #472]	; (800c584 <tcp_receive+0xb0c>)
 800c3aa:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800c3ac:	4b75      	ldr	r3, [pc, #468]	; (800c584 <tcp_receive+0xb0c>)
 800c3ae:	685b      	ldr	r3, [r3, #4]
 800c3b0:	4a74      	ldr	r2, [pc, #464]	; (800c584 <tcp_receive+0xb0c>)
 800c3b2:	8912      	ldrh	r2, [r2, #8]
 800c3b4:	4611      	mov	r1, r2
 800c3b6:	4618      	mov	r0, r3
 800c3b8:	f7fb fe54 	bl	8008064 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800c3bc:	4b71      	ldr	r3, [pc, #452]	; (800c584 <tcp_receive+0xb0c>)
 800c3be:	891c      	ldrh	r4, [r3, #8]
 800c3c0:	4b70      	ldr	r3, [pc, #448]	; (800c584 <tcp_receive+0xb0c>)
 800c3c2:	68db      	ldr	r3, [r3, #12]
 800c3c4:	899b      	ldrh	r3, [r3, #12]
 800c3c6:	b29b      	uxth	r3, r3
 800c3c8:	4618      	mov	r0, r3
 800c3ca:	f7fa fc3f 	bl	8006c4c <lwip_htons>
 800c3ce:	4603      	mov	r3, r0
 800c3d0:	b2db      	uxtb	r3, r3
 800c3d2:	f003 0303 	and.w	r3, r3, #3
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d001      	beq.n	800c3de <tcp_receive+0x966>
 800c3da:	2301      	movs	r3, #1
 800c3dc:	e000      	b.n	800c3e0 <tcp_receive+0x968>
 800c3de:	2300      	movs	r3, #0
 800c3e0:	4423      	add	r3, r4
 800c3e2:	b29a      	uxth	r2, r3
 800c3e4:	4b65      	ldr	r3, [pc, #404]	; (800c57c <tcp_receive+0xb04>)
 800c3e6:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800c3e8:	4b64      	ldr	r3, [pc, #400]	; (800c57c <tcp_receive+0xb04>)
 800c3ea:	881b      	ldrh	r3, [r3, #0]
 800c3ec:	461a      	mov	r2, r3
 800c3ee:	4b64      	ldr	r3, [pc, #400]	; (800c580 <tcp_receive+0xb08>)
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	441a      	add	r2, r3
 800c3f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3f6:	68db      	ldr	r3, [r3, #12]
 800c3f8:	685b      	ldr	r3, [r3, #4]
 800c3fa:	429a      	cmp	r2, r3
 800c3fc:	d006      	beq.n	800c40c <tcp_receive+0x994>
 800c3fe:	4b62      	ldr	r3, [pc, #392]	; (800c588 <tcp_receive+0xb10>)
 800c400:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800c404:	4961      	ldr	r1, [pc, #388]	; (800c58c <tcp_receive+0xb14>)
 800c406:	4862      	ldr	r0, [pc, #392]	; (800c590 <tcp_receive+0xb18>)
 800c408:	f005 f97a 	bl	8011700 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c410:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800c412:	4b5a      	ldr	r3, [pc, #360]	; (800c57c <tcp_receive+0xb04>)
 800c414:	881b      	ldrh	r3, [r3, #0]
 800c416:	461a      	mov	r2, r3
 800c418:	4b59      	ldr	r3, [pc, #356]	; (800c580 <tcp_receive+0xb08>)
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	441a      	add	r2, r3
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c426:	4b55      	ldr	r3, [pc, #340]	; (800c57c <tcp_receive+0xb04>)
 800c428:	881b      	ldrh	r3, [r3, #0]
 800c42a:	429a      	cmp	r2, r3
 800c42c:	d206      	bcs.n	800c43c <tcp_receive+0x9c4>
 800c42e:	4b56      	ldr	r3, [pc, #344]	; (800c588 <tcp_receive+0xb10>)
 800c430:	f240 6207 	movw	r2, #1543	; 0x607
 800c434:	4957      	ldr	r1, [pc, #348]	; (800c594 <tcp_receive+0xb1c>)
 800c436:	4856      	ldr	r0, [pc, #344]	; (800c590 <tcp_receive+0xb18>)
 800c438:	f005 f962 	bl	8011700 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c440:	4b4e      	ldr	r3, [pc, #312]	; (800c57c <tcp_receive+0xb04>)
 800c442:	881b      	ldrh	r3, [r3, #0]
 800c444:	1ad3      	subs	r3, r2, r3
 800c446:	b29a      	uxth	r2, r3
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800c44c:	6878      	ldr	r0, [r7, #4]
 800c44e:	f7fc fe97 	bl	8009180 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800c452:	4b4c      	ldr	r3, [pc, #304]	; (800c584 <tcp_receive+0xb0c>)
 800c454:	685b      	ldr	r3, [r3, #4]
 800c456:	891b      	ldrh	r3, [r3, #8]
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d006      	beq.n	800c46a <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800c45c:	4b49      	ldr	r3, [pc, #292]	; (800c584 <tcp_receive+0xb0c>)
 800c45e:	685b      	ldr	r3, [r3, #4]
 800c460:	4a4d      	ldr	r2, [pc, #308]	; (800c598 <tcp_receive+0xb20>)
 800c462:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800c464:	4b47      	ldr	r3, [pc, #284]	; (800c584 <tcp_receive+0xb0c>)
 800c466:	2200      	movs	r2, #0
 800c468:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800c46a:	4b46      	ldr	r3, [pc, #280]	; (800c584 <tcp_receive+0xb0c>)
 800c46c:	68db      	ldr	r3, [r3, #12]
 800c46e:	899b      	ldrh	r3, [r3, #12]
 800c470:	b29b      	uxth	r3, r3
 800c472:	4618      	mov	r0, r3
 800c474:	f7fa fbea 	bl	8006c4c <lwip_htons>
 800c478:	4603      	mov	r3, r0
 800c47a:	b2db      	uxtb	r3, r3
 800c47c:	f003 0301 	and.w	r3, r3, #1
 800c480:	2b00      	cmp	r3, #0
 800c482:	f000 80b8 	beq.w	800c5f6 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800c486:	4b45      	ldr	r3, [pc, #276]	; (800c59c <tcp_receive+0xb24>)
 800c488:	781b      	ldrb	r3, [r3, #0]
 800c48a:	f043 0320 	orr.w	r3, r3, #32
 800c48e:	b2da      	uxtb	r2, r3
 800c490:	4b42      	ldr	r3, [pc, #264]	; (800c59c <tcp_receive+0xb24>)
 800c492:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800c494:	e0af      	b.n	800c5f6 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c49a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c4a0:	68db      	ldr	r3, [r3, #12]
 800c4a2:	685b      	ldr	r3, [r3, #4]
 800c4a4:	4a36      	ldr	r2, [pc, #216]	; (800c580 <tcp_receive+0xb08>)
 800c4a6:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800c4a8:	68bb      	ldr	r3, [r7, #8]
 800c4aa:	891b      	ldrh	r3, [r3, #8]
 800c4ac:	461c      	mov	r4, r3
 800c4ae:	68bb      	ldr	r3, [r7, #8]
 800c4b0:	68db      	ldr	r3, [r3, #12]
 800c4b2:	899b      	ldrh	r3, [r3, #12]
 800c4b4:	b29b      	uxth	r3, r3
 800c4b6:	4618      	mov	r0, r3
 800c4b8:	f7fa fbc8 	bl	8006c4c <lwip_htons>
 800c4bc:	4603      	mov	r3, r0
 800c4be:	b2db      	uxtb	r3, r3
 800c4c0:	f003 0303 	and.w	r3, r3, #3
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d001      	beq.n	800c4cc <tcp_receive+0xa54>
 800c4c8:	2301      	movs	r3, #1
 800c4ca:	e000      	b.n	800c4ce <tcp_receive+0xa56>
 800c4cc:	2300      	movs	r3, #0
 800c4ce:	191a      	adds	r2, r3, r4
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4d4:	441a      	add	r2, r3
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c4de:	461c      	mov	r4, r3
 800c4e0:	68bb      	ldr	r3, [r7, #8]
 800c4e2:	891b      	ldrh	r3, [r3, #8]
 800c4e4:	461d      	mov	r5, r3
 800c4e6:	68bb      	ldr	r3, [r7, #8]
 800c4e8:	68db      	ldr	r3, [r3, #12]
 800c4ea:	899b      	ldrh	r3, [r3, #12]
 800c4ec:	b29b      	uxth	r3, r3
 800c4ee:	4618      	mov	r0, r3
 800c4f0:	f7fa fbac 	bl	8006c4c <lwip_htons>
 800c4f4:	4603      	mov	r3, r0
 800c4f6:	b2db      	uxtb	r3, r3
 800c4f8:	f003 0303 	and.w	r3, r3, #3
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d001      	beq.n	800c504 <tcp_receive+0xa8c>
 800c500:	2301      	movs	r3, #1
 800c502:	e000      	b.n	800c506 <tcp_receive+0xa8e>
 800c504:	2300      	movs	r3, #0
 800c506:	442b      	add	r3, r5
 800c508:	429c      	cmp	r4, r3
 800c50a:	d206      	bcs.n	800c51a <tcp_receive+0xaa2>
 800c50c:	4b1e      	ldr	r3, [pc, #120]	; (800c588 <tcp_receive+0xb10>)
 800c50e:	f240 622b 	movw	r2, #1579	; 0x62b
 800c512:	4923      	ldr	r1, [pc, #140]	; (800c5a0 <tcp_receive+0xb28>)
 800c514:	481e      	ldr	r0, [pc, #120]	; (800c590 <tcp_receive+0xb18>)
 800c516:	f005 f8f3 	bl	8011700 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800c51a:	68bb      	ldr	r3, [r7, #8]
 800c51c:	891b      	ldrh	r3, [r3, #8]
 800c51e:	461c      	mov	r4, r3
 800c520:	68bb      	ldr	r3, [r7, #8]
 800c522:	68db      	ldr	r3, [r3, #12]
 800c524:	899b      	ldrh	r3, [r3, #12]
 800c526:	b29b      	uxth	r3, r3
 800c528:	4618      	mov	r0, r3
 800c52a:	f7fa fb8f 	bl	8006c4c <lwip_htons>
 800c52e:	4603      	mov	r3, r0
 800c530:	b2db      	uxtb	r3, r3
 800c532:	f003 0303 	and.w	r3, r3, #3
 800c536:	2b00      	cmp	r3, #0
 800c538:	d001      	beq.n	800c53e <tcp_receive+0xac6>
 800c53a:	2301      	movs	r3, #1
 800c53c:	e000      	b.n	800c540 <tcp_receive+0xac8>
 800c53e:	2300      	movs	r3, #0
 800c540:	1919      	adds	r1, r3, r4
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c546:	b28b      	uxth	r3, r1
 800c548:	1ad3      	subs	r3, r2, r3
 800c54a:	b29a      	uxth	r2, r3
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800c550:	6878      	ldr	r0, [r7, #4]
 800c552:	f7fc fe15 	bl	8009180 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800c556:	68bb      	ldr	r3, [r7, #8]
 800c558:	685b      	ldr	r3, [r3, #4]
 800c55a:	891b      	ldrh	r3, [r3, #8]
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d028      	beq.n	800c5b2 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800c560:	4b0d      	ldr	r3, [pc, #52]	; (800c598 <tcp_receive+0xb20>)
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	2b00      	cmp	r3, #0
 800c566:	d01d      	beq.n	800c5a4 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800c568:	4b0b      	ldr	r3, [pc, #44]	; (800c598 <tcp_receive+0xb20>)
 800c56a:	681a      	ldr	r2, [r3, #0]
 800c56c:	68bb      	ldr	r3, [r7, #8]
 800c56e:	685b      	ldr	r3, [r3, #4]
 800c570:	4619      	mov	r1, r3
 800c572:	4610      	mov	r0, r2
 800c574:	f7fb ffbe 	bl	80084f4 <pbuf_cat>
 800c578:	e018      	b.n	800c5ac <tcp_receive+0xb34>
 800c57a:	bf00      	nop
 800c57c:	20000576 	.word	0x20000576
 800c580:	2000056c 	.word	0x2000056c
 800c584:	2000054c 	.word	0x2000054c
 800c588:	08014d08 	.word	0x08014d08
 800c58c:	080150e8 	.word	0x080150e8
 800c590:	08014d54 	.word	0x08014d54
 800c594:	08015124 	.word	0x08015124
 800c598:	2000057c 	.word	0x2000057c
 800c59c:	20000579 	.word	0x20000579
 800c5a0:	08015144 	.word	0x08015144
            } else {
              recv_data = cseg->p;
 800c5a4:	68bb      	ldr	r3, [r7, #8]
 800c5a6:	685b      	ldr	r3, [r3, #4]
 800c5a8:	4a70      	ldr	r2, [pc, #448]	; (800c76c <tcp_receive+0xcf4>)
 800c5aa:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800c5ac:	68bb      	ldr	r3, [r7, #8]
 800c5ae:	2200      	movs	r2, #0
 800c5b0:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800c5b2:	68bb      	ldr	r3, [r7, #8]
 800c5b4:	68db      	ldr	r3, [r3, #12]
 800c5b6:	899b      	ldrh	r3, [r3, #12]
 800c5b8:	b29b      	uxth	r3, r3
 800c5ba:	4618      	mov	r0, r3
 800c5bc:	f7fa fb46 	bl	8006c4c <lwip_htons>
 800c5c0:	4603      	mov	r3, r0
 800c5c2:	b2db      	uxtb	r3, r3
 800c5c4:	f003 0301 	and.w	r3, r3, #1
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d00d      	beq.n	800c5e8 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800c5cc:	4b68      	ldr	r3, [pc, #416]	; (800c770 <tcp_receive+0xcf8>)
 800c5ce:	781b      	ldrb	r3, [r3, #0]
 800c5d0:	f043 0320 	orr.w	r3, r3, #32
 800c5d4:	b2da      	uxtb	r2, r3
 800c5d6:	4b66      	ldr	r3, [pc, #408]	; (800c770 <tcp_receive+0xcf8>)
 800c5d8:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	7d1b      	ldrb	r3, [r3, #20]
 800c5de:	2b04      	cmp	r3, #4
 800c5e0:	d102      	bne.n	800c5e8 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	2207      	movs	r2, #7
 800c5e6:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800c5e8:	68bb      	ldr	r3, [r7, #8]
 800c5ea:	681a      	ldr	r2, [r3, #0]
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800c5f0:	68b8      	ldr	r0, [r7, #8]
 800c5f2:	f7fd faea 	bl	8009bca <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d008      	beq.n	800c610 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c602:	68db      	ldr	r3, [r3, #12]
 800c604:	685a      	ldr	r2, [r3, #4]
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800c60a:	429a      	cmp	r2, r3
 800c60c:	f43f af43 	beq.w	800c496 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	8b5b      	ldrh	r3, [r3, #26]
 800c614:	f003 0301 	and.w	r3, r3, #1
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d00e      	beq.n	800c63a <tcp_receive+0xbc2>
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	8b5b      	ldrh	r3, [r3, #26]
 800c620:	f023 0301 	bic.w	r3, r3, #1
 800c624:	b29a      	uxth	r2, r3
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	835a      	strh	r2, [r3, #26]
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	8b5b      	ldrh	r3, [r3, #26]
 800c62e:	f043 0302 	orr.w	r3, r3, #2
 800c632:	b29a      	uxth	r2, r3
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800c638:	e188      	b.n	800c94c <tcp_receive+0xed4>
        tcp_ack(pcb);
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	8b5b      	ldrh	r3, [r3, #26]
 800c63e:	f043 0301 	orr.w	r3, r3, #1
 800c642:	b29a      	uxth	r2, r3
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800c648:	e180      	b.n	800c94c <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d106      	bne.n	800c660 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800c652:	4848      	ldr	r0, [pc, #288]	; (800c774 <tcp_receive+0xcfc>)
 800c654:	f7fd faf0 	bl	8009c38 <tcp_seg_copy>
 800c658:	4602      	mov	r2, r0
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	675a      	str	r2, [r3, #116]	; 0x74
 800c65e:	e16d      	b.n	800c93c <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800c660:	2300      	movs	r3, #0
 800c662:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c668:	63bb      	str	r3, [r7, #56]	; 0x38
 800c66a:	e157      	b.n	800c91c <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 800c66c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c66e:	68db      	ldr	r3, [r3, #12]
 800c670:	685a      	ldr	r2, [r3, #4]
 800c672:	4b41      	ldr	r3, [pc, #260]	; (800c778 <tcp_receive+0xd00>)
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	429a      	cmp	r2, r3
 800c678:	d11d      	bne.n	800c6b6 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800c67a:	4b3e      	ldr	r3, [pc, #248]	; (800c774 <tcp_receive+0xcfc>)
 800c67c:	891a      	ldrh	r2, [r3, #8]
 800c67e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c680:	891b      	ldrh	r3, [r3, #8]
 800c682:	429a      	cmp	r2, r3
 800c684:	f240 814f 	bls.w	800c926 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800c688:	483a      	ldr	r0, [pc, #232]	; (800c774 <tcp_receive+0xcfc>)
 800c68a:	f7fd fad5 	bl	8009c38 <tcp_seg_copy>
 800c68e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800c690:	697b      	ldr	r3, [r7, #20]
 800c692:	2b00      	cmp	r3, #0
 800c694:	f000 8149 	beq.w	800c92a <tcp_receive+0xeb2>
                  if (prev != NULL) {
 800c698:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d003      	beq.n	800c6a6 <tcp_receive+0xc2e>
                    prev->next = cseg;
 800c69e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6a0:	697a      	ldr	r2, [r7, #20]
 800c6a2:	601a      	str	r2, [r3, #0]
 800c6a4:	e002      	b.n	800c6ac <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	697a      	ldr	r2, [r7, #20]
 800c6aa:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800c6ac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c6ae:	6978      	ldr	r0, [r7, #20]
 800c6b0:	f7ff f8de 	bl	800b870 <tcp_oos_insert_segment>
                }
                break;
 800c6b4:	e139      	b.n	800c92a <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800c6b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d117      	bne.n	800c6ec <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800c6bc:	4b2e      	ldr	r3, [pc, #184]	; (800c778 <tcp_receive+0xd00>)
 800c6be:	681a      	ldr	r2, [r3, #0]
 800c6c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6c2:	68db      	ldr	r3, [r3, #12]
 800c6c4:	685b      	ldr	r3, [r3, #4]
 800c6c6:	1ad3      	subs	r3, r2, r3
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	da57      	bge.n	800c77c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800c6cc:	4829      	ldr	r0, [pc, #164]	; (800c774 <tcp_receive+0xcfc>)
 800c6ce:	f7fd fab3 	bl	8009c38 <tcp_seg_copy>
 800c6d2:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800c6d4:	69bb      	ldr	r3, [r7, #24]
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	f000 8129 	beq.w	800c92e <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	69ba      	ldr	r2, [r7, #24]
 800c6e0:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800c6e2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c6e4:	69b8      	ldr	r0, [r7, #24]
 800c6e6:	f7ff f8c3 	bl	800b870 <tcp_oos_insert_segment>
                  }
                  break;
 800c6ea:	e120      	b.n	800c92e <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800c6ec:	4b22      	ldr	r3, [pc, #136]	; (800c778 <tcp_receive+0xd00>)
 800c6ee:	681a      	ldr	r2, [r3, #0]
 800c6f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6f2:	68db      	ldr	r3, [r3, #12]
 800c6f4:	685b      	ldr	r3, [r3, #4]
 800c6f6:	1ad3      	subs	r3, r2, r3
 800c6f8:	3b01      	subs	r3, #1
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	db3e      	blt.n	800c77c <tcp_receive+0xd04>
 800c6fe:	4b1e      	ldr	r3, [pc, #120]	; (800c778 <tcp_receive+0xd00>)
 800c700:	681a      	ldr	r2, [r3, #0]
 800c702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c704:	68db      	ldr	r3, [r3, #12]
 800c706:	685b      	ldr	r3, [r3, #4]
 800c708:	1ad3      	subs	r3, r2, r3
 800c70a:	3301      	adds	r3, #1
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	dc35      	bgt.n	800c77c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800c710:	4818      	ldr	r0, [pc, #96]	; (800c774 <tcp_receive+0xcfc>)
 800c712:	f7fd fa91 	bl	8009c38 <tcp_seg_copy>
 800c716:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800c718:	69fb      	ldr	r3, [r7, #28]
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	f000 8109 	beq.w	800c932 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800c720:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c722:	68db      	ldr	r3, [r3, #12]
 800c724:	685b      	ldr	r3, [r3, #4]
 800c726:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c728:	8912      	ldrh	r2, [r2, #8]
 800c72a:	441a      	add	r2, r3
 800c72c:	4b12      	ldr	r3, [pc, #72]	; (800c778 <tcp_receive+0xd00>)
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	1ad3      	subs	r3, r2, r3
 800c732:	2b00      	cmp	r3, #0
 800c734:	dd12      	ble.n	800c75c <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800c736:	4b10      	ldr	r3, [pc, #64]	; (800c778 <tcp_receive+0xd00>)
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	b29a      	uxth	r2, r3
 800c73c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c73e:	68db      	ldr	r3, [r3, #12]
 800c740:	685b      	ldr	r3, [r3, #4]
 800c742:	b29b      	uxth	r3, r3
 800c744:	1ad3      	subs	r3, r2, r3
 800c746:	b29a      	uxth	r2, r3
 800c748:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c74a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800c74c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c74e:	685a      	ldr	r2, [r3, #4]
 800c750:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c752:	891b      	ldrh	r3, [r3, #8]
 800c754:	4619      	mov	r1, r3
 800c756:	4610      	mov	r0, r2
 800c758:	f7fb fc84 	bl	8008064 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800c75c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c75e:	69fa      	ldr	r2, [r7, #28]
 800c760:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800c762:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c764:	69f8      	ldr	r0, [r7, #28]
 800c766:	f7ff f883 	bl	800b870 <tcp_oos_insert_segment>
                  }
                  break;
 800c76a:	e0e2      	b.n	800c932 <tcp_receive+0xeba>
 800c76c:	2000057c 	.word	0x2000057c
 800c770:	20000579 	.word	0x20000579
 800c774:	2000054c 	.word	0x2000054c
 800c778:	2000056c 	.word	0x2000056c
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800c77c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c77e:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800c780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	2b00      	cmp	r3, #0
 800c786:	f040 80c6 	bne.w	800c916 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800c78a:	4b80      	ldr	r3, [pc, #512]	; (800c98c <tcp_receive+0xf14>)
 800c78c:	681a      	ldr	r2, [r3, #0]
 800c78e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c790:	68db      	ldr	r3, [r3, #12]
 800c792:	685b      	ldr	r3, [r3, #4]
 800c794:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800c796:	2b00      	cmp	r3, #0
 800c798:	f340 80bd 	ble.w	800c916 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800c79c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c79e:	68db      	ldr	r3, [r3, #12]
 800c7a0:	899b      	ldrh	r3, [r3, #12]
 800c7a2:	b29b      	uxth	r3, r3
 800c7a4:	4618      	mov	r0, r3
 800c7a6:	f7fa fa51 	bl	8006c4c <lwip_htons>
 800c7aa:	4603      	mov	r3, r0
 800c7ac:	b2db      	uxtb	r3, r3
 800c7ae:	f003 0301 	and.w	r3, r3, #1
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	f040 80bf 	bne.w	800c936 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800c7b8:	4875      	ldr	r0, [pc, #468]	; (800c990 <tcp_receive+0xf18>)
 800c7ba:	f7fd fa3d 	bl	8009c38 <tcp_seg_copy>
 800c7be:	4602      	mov	r2, r0
 800c7c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7c2:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800c7c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	f000 80b6 	beq.w	800c93a <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800c7ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7d0:	68db      	ldr	r3, [r3, #12]
 800c7d2:	685b      	ldr	r3, [r3, #4]
 800c7d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c7d6:	8912      	ldrh	r2, [r2, #8]
 800c7d8:	441a      	add	r2, r3
 800c7da:	4b6c      	ldr	r3, [pc, #432]	; (800c98c <tcp_receive+0xf14>)
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	1ad3      	subs	r3, r2, r3
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	dd12      	ble.n	800c80a <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800c7e4:	4b69      	ldr	r3, [pc, #420]	; (800c98c <tcp_receive+0xf14>)
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	b29a      	uxth	r2, r3
 800c7ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7ec:	68db      	ldr	r3, [r3, #12]
 800c7ee:	685b      	ldr	r3, [r3, #4]
 800c7f0:	b29b      	uxth	r3, r3
 800c7f2:	1ad3      	subs	r3, r2, r3
 800c7f4:	b29a      	uxth	r2, r3
 800c7f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7f8:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800c7fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7fc:	685a      	ldr	r2, [r3, #4]
 800c7fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c800:	891b      	ldrh	r3, [r3, #8]
 800c802:	4619      	mov	r1, r3
 800c804:	4610      	mov	r0, r2
 800c806:	f7fb fc2d 	bl	8008064 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800c80a:	4b62      	ldr	r3, [pc, #392]	; (800c994 <tcp_receive+0xf1c>)
 800c80c:	881b      	ldrh	r3, [r3, #0]
 800c80e:	461a      	mov	r2, r3
 800c810:	4b5e      	ldr	r3, [pc, #376]	; (800c98c <tcp_receive+0xf14>)
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	441a      	add	r2, r3
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c81a:	6879      	ldr	r1, [r7, #4]
 800c81c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c81e:	440b      	add	r3, r1
 800c820:	1ad3      	subs	r3, r2, r3
 800c822:	2b00      	cmp	r3, #0
 800c824:	f340 8089 	ble.w	800c93a <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800c828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	68db      	ldr	r3, [r3, #12]
 800c82e:	899b      	ldrh	r3, [r3, #12]
 800c830:	b29b      	uxth	r3, r3
 800c832:	4618      	mov	r0, r3
 800c834:	f7fa fa0a 	bl	8006c4c <lwip_htons>
 800c838:	4603      	mov	r3, r0
 800c83a:	b2db      	uxtb	r3, r3
 800c83c:	f003 0301 	and.w	r3, r3, #1
 800c840:	2b00      	cmp	r3, #0
 800c842:	d022      	beq.n	800c88a <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800c844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	68db      	ldr	r3, [r3, #12]
 800c84a:	899b      	ldrh	r3, [r3, #12]
 800c84c:	b29b      	uxth	r3, r3
 800c84e:	b21b      	sxth	r3, r3
 800c850:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800c854:	b21c      	sxth	r4, r3
 800c856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	68db      	ldr	r3, [r3, #12]
 800c85c:	899b      	ldrh	r3, [r3, #12]
 800c85e:	b29b      	uxth	r3, r3
 800c860:	4618      	mov	r0, r3
 800c862:	f7fa f9f3 	bl	8006c4c <lwip_htons>
 800c866:	4603      	mov	r3, r0
 800c868:	b2db      	uxtb	r3, r3
 800c86a:	b29b      	uxth	r3, r3
 800c86c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800c870:	b29b      	uxth	r3, r3
 800c872:	4618      	mov	r0, r3
 800c874:	f7fa f9ea 	bl	8006c4c <lwip_htons>
 800c878:	4603      	mov	r3, r0
 800c87a:	b21b      	sxth	r3, r3
 800c87c:	4323      	orrs	r3, r4
 800c87e:	b21a      	sxth	r2, r3
 800c880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	68db      	ldr	r3, [r3, #12]
 800c886:	b292      	uxth	r2, r2
 800c888:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c88e:	b29a      	uxth	r2, r3
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c894:	4413      	add	r3, r2
 800c896:	b299      	uxth	r1, r3
 800c898:	4b3c      	ldr	r3, [pc, #240]	; (800c98c <tcp_receive+0xf14>)
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	b29a      	uxth	r2, r3
 800c89e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	1a8a      	subs	r2, r1, r2
 800c8a4:	b292      	uxth	r2, r2
 800c8a6:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800c8a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	685a      	ldr	r2, [r3, #4]
 800c8ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	891b      	ldrh	r3, [r3, #8]
 800c8b4:	4619      	mov	r1, r3
 800c8b6:	4610      	mov	r0, r2
 800c8b8:	f7fb fbd4 	bl	8008064 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800c8bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	891c      	ldrh	r4, [r3, #8]
 800c8c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	68db      	ldr	r3, [r3, #12]
 800c8c8:	899b      	ldrh	r3, [r3, #12]
 800c8ca:	b29b      	uxth	r3, r3
 800c8cc:	4618      	mov	r0, r3
 800c8ce:	f7fa f9bd 	bl	8006c4c <lwip_htons>
 800c8d2:	4603      	mov	r3, r0
 800c8d4:	b2db      	uxtb	r3, r3
 800c8d6:	f003 0303 	and.w	r3, r3, #3
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d001      	beq.n	800c8e2 <tcp_receive+0xe6a>
 800c8de:	2301      	movs	r3, #1
 800c8e0:	e000      	b.n	800c8e4 <tcp_receive+0xe6c>
 800c8e2:	2300      	movs	r3, #0
 800c8e4:	4423      	add	r3, r4
 800c8e6:	b29a      	uxth	r2, r3
 800c8e8:	4b2a      	ldr	r3, [pc, #168]	; (800c994 <tcp_receive+0xf1c>)
 800c8ea:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800c8ec:	4b29      	ldr	r3, [pc, #164]	; (800c994 <tcp_receive+0xf1c>)
 800c8ee:	881b      	ldrh	r3, [r3, #0]
 800c8f0:	461a      	mov	r2, r3
 800c8f2:	4b26      	ldr	r3, [pc, #152]	; (800c98c <tcp_receive+0xf14>)
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	441a      	add	r2, r3
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8fc:	6879      	ldr	r1, [r7, #4]
 800c8fe:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c900:	440b      	add	r3, r1
 800c902:	429a      	cmp	r2, r3
 800c904:	d019      	beq.n	800c93a <tcp_receive+0xec2>
 800c906:	4b24      	ldr	r3, [pc, #144]	; (800c998 <tcp_receive+0xf20>)
 800c908:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800c90c:	4923      	ldr	r1, [pc, #140]	; (800c99c <tcp_receive+0xf24>)
 800c90e:	4824      	ldr	r0, [pc, #144]	; (800c9a0 <tcp_receive+0xf28>)
 800c910:	f004 fef6 	bl	8011700 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800c914:	e011      	b.n	800c93a <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800c916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	63bb      	str	r3, [r7, #56]	; 0x38
 800c91c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c91e:	2b00      	cmp	r3, #0
 800c920:	f47f aea4 	bne.w	800c66c <tcp_receive+0xbf4>
 800c924:	e00a      	b.n	800c93c <tcp_receive+0xec4>
                break;
 800c926:	bf00      	nop
 800c928:	e008      	b.n	800c93c <tcp_receive+0xec4>
                break;
 800c92a:	bf00      	nop
 800c92c:	e006      	b.n	800c93c <tcp_receive+0xec4>
                  break;
 800c92e:	bf00      	nop
 800c930:	e004      	b.n	800c93c <tcp_receive+0xec4>
                  break;
 800c932:	bf00      	nop
 800c934:	e002      	b.n	800c93c <tcp_receive+0xec4>
                  break;
 800c936:	bf00      	nop
 800c938:	e000      	b.n	800c93c <tcp_receive+0xec4>
                break;
 800c93a:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800c93c:	6878      	ldr	r0, [r7, #4]
 800c93e:	f001 fe8b 	bl	800e658 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800c942:	e003      	b.n	800c94c <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800c944:	6878      	ldr	r0, [r7, #4]
 800c946:	f001 fe87 	bl	800e658 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800c94a:	e01a      	b.n	800c982 <tcp_receive+0xf0a>
 800c94c:	e019      	b.n	800c982 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800c94e:	4b0f      	ldr	r3, [pc, #60]	; (800c98c <tcp_receive+0xf14>)
 800c950:	681a      	ldr	r2, [r3, #0]
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c956:	1ad3      	subs	r3, r2, r3
 800c958:	2b00      	cmp	r3, #0
 800c95a:	db0a      	blt.n	800c972 <tcp_receive+0xefa>
 800c95c:	4b0b      	ldr	r3, [pc, #44]	; (800c98c <tcp_receive+0xf14>)
 800c95e:	681a      	ldr	r2, [r3, #0]
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c964:	6879      	ldr	r1, [r7, #4]
 800c966:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c968:	440b      	add	r3, r1
 800c96a:	1ad3      	subs	r3, r2, r3
 800c96c:	3301      	adds	r3, #1
 800c96e:	2b00      	cmp	r3, #0
 800c970:	dd07      	ble.n	800c982 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	8b5b      	ldrh	r3, [r3, #26]
 800c976:	f043 0302 	orr.w	r3, r3, #2
 800c97a:	b29a      	uxth	r2, r3
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800c980:	e7ff      	b.n	800c982 <tcp_receive+0xf0a>
 800c982:	bf00      	nop
 800c984:	3750      	adds	r7, #80	; 0x50
 800c986:	46bd      	mov	sp, r7
 800c988:	bdb0      	pop	{r4, r5, r7, pc}
 800c98a:	bf00      	nop
 800c98c:	2000056c 	.word	0x2000056c
 800c990:	2000054c 	.word	0x2000054c
 800c994:	20000576 	.word	0x20000576
 800c998:	08014d08 	.word	0x08014d08
 800c99c:	080150b0 	.word	0x080150b0
 800c9a0:	08014d54 	.word	0x08014d54

0800c9a4 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800c9a4:	b480      	push	{r7}
 800c9a6:	b083      	sub	sp, #12
 800c9a8:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800c9aa:	4b15      	ldr	r3, [pc, #84]	; (800ca00 <tcp_get_next_optbyte+0x5c>)
 800c9ac:	881b      	ldrh	r3, [r3, #0]
 800c9ae:	1c5a      	adds	r2, r3, #1
 800c9b0:	b291      	uxth	r1, r2
 800c9b2:	4a13      	ldr	r2, [pc, #76]	; (800ca00 <tcp_get_next_optbyte+0x5c>)
 800c9b4:	8011      	strh	r1, [r2, #0]
 800c9b6:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800c9b8:	4b12      	ldr	r3, [pc, #72]	; (800ca04 <tcp_get_next_optbyte+0x60>)
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d004      	beq.n	800c9ca <tcp_get_next_optbyte+0x26>
 800c9c0:	4b11      	ldr	r3, [pc, #68]	; (800ca08 <tcp_get_next_optbyte+0x64>)
 800c9c2:	881b      	ldrh	r3, [r3, #0]
 800c9c4:	88fa      	ldrh	r2, [r7, #6]
 800c9c6:	429a      	cmp	r2, r3
 800c9c8:	d208      	bcs.n	800c9dc <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800c9ca:	4b10      	ldr	r3, [pc, #64]	; (800ca0c <tcp_get_next_optbyte+0x68>)
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	3314      	adds	r3, #20
 800c9d0:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800c9d2:	88fb      	ldrh	r3, [r7, #6]
 800c9d4:	683a      	ldr	r2, [r7, #0]
 800c9d6:	4413      	add	r3, r2
 800c9d8:	781b      	ldrb	r3, [r3, #0]
 800c9da:	e00b      	b.n	800c9f4 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800c9dc:	88fb      	ldrh	r3, [r7, #6]
 800c9de:	b2da      	uxtb	r2, r3
 800c9e0:	4b09      	ldr	r3, [pc, #36]	; (800ca08 <tcp_get_next_optbyte+0x64>)
 800c9e2:	881b      	ldrh	r3, [r3, #0]
 800c9e4:	b2db      	uxtb	r3, r3
 800c9e6:	1ad3      	subs	r3, r2, r3
 800c9e8:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800c9ea:	4b06      	ldr	r3, [pc, #24]	; (800ca04 <tcp_get_next_optbyte+0x60>)
 800c9ec:	681a      	ldr	r2, [r3, #0]
 800c9ee:	797b      	ldrb	r3, [r7, #5]
 800c9f0:	4413      	add	r3, r2
 800c9f2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c9f4:	4618      	mov	r0, r3
 800c9f6:	370c      	adds	r7, #12
 800c9f8:	46bd      	mov	sp, r7
 800c9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9fe:	4770      	bx	lr
 800ca00:	20000568 	.word	0x20000568
 800ca04:	20000564 	.word	0x20000564
 800ca08:	20000562 	.word	0x20000562
 800ca0c:	2000055c 	.word	0x2000055c

0800ca10 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800ca10:	b580      	push	{r7, lr}
 800ca12:	b084      	sub	sp, #16
 800ca14:	af00      	add	r7, sp, #0
 800ca16:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d106      	bne.n	800ca2c <tcp_parseopt+0x1c>
 800ca1e:	4b32      	ldr	r3, [pc, #200]	; (800cae8 <tcp_parseopt+0xd8>)
 800ca20:	f240 727d 	movw	r2, #1917	; 0x77d
 800ca24:	4931      	ldr	r1, [pc, #196]	; (800caec <tcp_parseopt+0xdc>)
 800ca26:	4832      	ldr	r0, [pc, #200]	; (800caf0 <tcp_parseopt+0xe0>)
 800ca28:	f004 fe6a 	bl	8011700 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800ca2c:	4b31      	ldr	r3, [pc, #196]	; (800caf4 <tcp_parseopt+0xe4>)
 800ca2e:	881b      	ldrh	r3, [r3, #0]
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d055      	beq.n	800cae0 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800ca34:	4b30      	ldr	r3, [pc, #192]	; (800caf8 <tcp_parseopt+0xe8>)
 800ca36:	2200      	movs	r2, #0
 800ca38:	801a      	strh	r2, [r3, #0]
 800ca3a:	e045      	b.n	800cac8 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800ca3c:	f7ff ffb2 	bl	800c9a4 <tcp_get_next_optbyte>
 800ca40:	4603      	mov	r3, r0
 800ca42:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800ca44:	7bfb      	ldrb	r3, [r7, #15]
 800ca46:	2b02      	cmp	r3, #2
 800ca48:	d006      	beq.n	800ca58 <tcp_parseopt+0x48>
 800ca4a:	2b02      	cmp	r3, #2
 800ca4c:	dc2b      	bgt.n	800caa6 <tcp_parseopt+0x96>
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d041      	beq.n	800cad6 <tcp_parseopt+0xc6>
 800ca52:	2b01      	cmp	r3, #1
 800ca54:	d127      	bne.n	800caa6 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800ca56:	e037      	b.n	800cac8 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800ca58:	f7ff ffa4 	bl	800c9a4 <tcp_get_next_optbyte>
 800ca5c:	4603      	mov	r3, r0
 800ca5e:	2b04      	cmp	r3, #4
 800ca60:	d13b      	bne.n	800cada <tcp_parseopt+0xca>
 800ca62:	4b25      	ldr	r3, [pc, #148]	; (800caf8 <tcp_parseopt+0xe8>)
 800ca64:	881b      	ldrh	r3, [r3, #0]
 800ca66:	3301      	adds	r3, #1
 800ca68:	4a22      	ldr	r2, [pc, #136]	; (800caf4 <tcp_parseopt+0xe4>)
 800ca6a:	8812      	ldrh	r2, [r2, #0]
 800ca6c:	4293      	cmp	r3, r2
 800ca6e:	da34      	bge.n	800cada <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800ca70:	f7ff ff98 	bl	800c9a4 <tcp_get_next_optbyte>
 800ca74:	4603      	mov	r3, r0
 800ca76:	b29b      	uxth	r3, r3
 800ca78:	021b      	lsls	r3, r3, #8
 800ca7a:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800ca7c:	f7ff ff92 	bl	800c9a4 <tcp_get_next_optbyte>
 800ca80:	4603      	mov	r3, r0
 800ca82:	b29a      	uxth	r2, r3
 800ca84:	89bb      	ldrh	r3, [r7, #12]
 800ca86:	4313      	orrs	r3, r2
 800ca88:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800ca8a:	89bb      	ldrh	r3, [r7, #12]
 800ca8c:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800ca90:	d804      	bhi.n	800ca9c <tcp_parseopt+0x8c>
 800ca92:	89bb      	ldrh	r3, [r7, #12]
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d001      	beq.n	800ca9c <tcp_parseopt+0x8c>
 800ca98:	89ba      	ldrh	r2, [r7, #12]
 800ca9a:	e001      	b.n	800caa0 <tcp_parseopt+0x90>
 800ca9c:	f44f 7206 	mov.w	r2, #536	; 0x218
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800caa4:	e010      	b.n	800cac8 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800caa6:	f7ff ff7d 	bl	800c9a4 <tcp_get_next_optbyte>
 800caaa:	4603      	mov	r3, r0
 800caac:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800caae:	7afb      	ldrb	r3, [r7, #11]
 800cab0:	2b01      	cmp	r3, #1
 800cab2:	d914      	bls.n	800cade <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800cab4:	7afb      	ldrb	r3, [r7, #11]
 800cab6:	b29a      	uxth	r2, r3
 800cab8:	4b0f      	ldr	r3, [pc, #60]	; (800caf8 <tcp_parseopt+0xe8>)
 800caba:	881b      	ldrh	r3, [r3, #0]
 800cabc:	4413      	add	r3, r2
 800cabe:	b29b      	uxth	r3, r3
 800cac0:	3b02      	subs	r3, #2
 800cac2:	b29a      	uxth	r2, r3
 800cac4:	4b0c      	ldr	r3, [pc, #48]	; (800caf8 <tcp_parseopt+0xe8>)
 800cac6:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800cac8:	4b0b      	ldr	r3, [pc, #44]	; (800caf8 <tcp_parseopt+0xe8>)
 800caca:	881a      	ldrh	r2, [r3, #0]
 800cacc:	4b09      	ldr	r3, [pc, #36]	; (800caf4 <tcp_parseopt+0xe4>)
 800cace:	881b      	ldrh	r3, [r3, #0]
 800cad0:	429a      	cmp	r2, r3
 800cad2:	d3b3      	bcc.n	800ca3c <tcp_parseopt+0x2c>
 800cad4:	e004      	b.n	800cae0 <tcp_parseopt+0xd0>
          return;
 800cad6:	bf00      	nop
 800cad8:	e002      	b.n	800cae0 <tcp_parseopt+0xd0>
            return;
 800cada:	bf00      	nop
 800cadc:	e000      	b.n	800cae0 <tcp_parseopt+0xd0>
            return;
 800cade:	bf00      	nop
      }
    }
  }
}
 800cae0:	3710      	adds	r7, #16
 800cae2:	46bd      	mov	sp, r7
 800cae4:	bd80      	pop	{r7, pc}
 800cae6:	bf00      	nop
 800cae8:	08014d08 	.word	0x08014d08
 800caec:	0801516c 	.word	0x0801516c
 800caf0:	08014d54 	.word	0x08014d54
 800caf4:	20000560 	.word	0x20000560
 800caf8:	20000568 	.word	0x20000568

0800cafc <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800cafc:	b480      	push	{r7}
 800cafe:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800cb00:	4b05      	ldr	r3, [pc, #20]	; (800cb18 <tcp_trigger_input_pcb_close+0x1c>)
 800cb02:	781b      	ldrb	r3, [r3, #0]
 800cb04:	f043 0310 	orr.w	r3, r3, #16
 800cb08:	b2da      	uxtb	r2, r3
 800cb0a:	4b03      	ldr	r3, [pc, #12]	; (800cb18 <tcp_trigger_input_pcb_close+0x1c>)
 800cb0c:	701a      	strb	r2, [r3, #0]
}
 800cb0e:	bf00      	nop
 800cb10:	46bd      	mov	sp, r7
 800cb12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb16:	4770      	bx	lr
 800cb18:	20000579 	.word	0x20000579

0800cb1c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800cb1c:	b580      	push	{r7, lr}
 800cb1e:	b084      	sub	sp, #16
 800cb20:	af00      	add	r7, sp, #0
 800cb22:	60f8      	str	r0, [r7, #12]
 800cb24:	60b9      	str	r1, [r7, #8]
 800cb26:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d00a      	beq.n	800cb44 <tcp_route+0x28>
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	7a1b      	ldrb	r3, [r3, #8]
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d006      	beq.n	800cb44 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	7a1b      	ldrb	r3, [r3, #8]
 800cb3a:	4618      	mov	r0, r3
 800cb3c:	f7fb f8b8 	bl	8007cb0 <netif_get_by_index>
 800cb40:	4603      	mov	r3, r0
 800cb42:	e003      	b.n	800cb4c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800cb44:	6878      	ldr	r0, [r7, #4]
 800cb46:	f003 fad5 	bl	80100f4 <ip4_route>
 800cb4a:	4603      	mov	r3, r0
  }
}
 800cb4c:	4618      	mov	r0, r3
 800cb4e:	3710      	adds	r7, #16
 800cb50:	46bd      	mov	sp, r7
 800cb52:	bd80      	pop	{r7, pc}

0800cb54 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800cb54:	b590      	push	{r4, r7, lr}
 800cb56:	b087      	sub	sp, #28
 800cb58:	af00      	add	r7, sp, #0
 800cb5a:	60f8      	str	r0, [r7, #12]
 800cb5c:	60b9      	str	r1, [r7, #8]
 800cb5e:	603b      	str	r3, [r7, #0]
 800cb60:	4613      	mov	r3, r2
 800cb62:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d105      	bne.n	800cb76 <tcp_create_segment+0x22>
 800cb6a:	4b44      	ldr	r3, [pc, #272]	; (800cc7c <tcp_create_segment+0x128>)
 800cb6c:	22a3      	movs	r2, #163	; 0xa3
 800cb6e:	4944      	ldr	r1, [pc, #272]	; (800cc80 <tcp_create_segment+0x12c>)
 800cb70:	4844      	ldr	r0, [pc, #272]	; (800cc84 <tcp_create_segment+0x130>)
 800cb72:	f004 fdc5 	bl	8011700 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800cb76:	68bb      	ldr	r3, [r7, #8]
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d105      	bne.n	800cb88 <tcp_create_segment+0x34>
 800cb7c:	4b3f      	ldr	r3, [pc, #252]	; (800cc7c <tcp_create_segment+0x128>)
 800cb7e:	22a4      	movs	r2, #164	; 0xa4
 800cb80:	4941      	ldr	r1, [pc, #260]	; (800cc88 <tcp_create_segment+0x134>)
 800cb82:	4840      	ldr	r0, [pc, #256]	; (800cc84 <tcp_create_segment+0x130>)
 800cb84:	f004 fdbc 	bl	8011700 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800cb88:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800cb8c:	009b      	lsls	r3, r3, #2
 800cb8e:	b2db      	uxtb	r3, r3
 800cb90:	f003 0304 	and.w	r3, r3, #4
 800cb94:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800cb96:	2003      	movs	r0, #3
 800cb98:	f7fa fd8c 	bl	80076b4 <memp_malloc>
 800cb9c:	6138      	str	r0, [r7, #16]
 800cb9e:	693b      	ldr	r3, [r7, #16]
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d104      	bne.n	800cbae <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800cba4:	68b8      	ldr	r0, [r7, #8]
 800cba6:	f7fb fbe3 	bl	8008370 <pbuf_free>
    return NULL;
 800cbaa:	2300      	movs	r3, #0
 800cbac:	e061      	b.n	800cc72 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800cbae:	693b      	ldr	r3, [r7, #16]
 800cbb0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800cbb4:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800cbb6:	693b      	ldr	r3, [r7, #16]
 800cbb8:	2200      	movs	r2, #0
 800cbba:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800cbbc:	693b      	ldr	r3, [r7, #16]
 800cbbe:	68ba      	ldr	r2, [r7, #8]
 800cbc0:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800cbc2:	68bb      	ldr	r3, [r7, #8]
 800cbc4:	891a      	ldrh	r2, [r3, #8]
 800cbc6:	7dfb      	ldrb	r3, [r7, #23]
 800cbc8:	b29b      	uxth	r3, r3
 800cbca:	429a      	cmp	r2, r3
 800cbcc:	d205      	bcs.n	800cbda <tcp_create_segment+0x86>
 800cbce:	4b2b      	ldr	r3, [pc, #172]	; (800cc7c <tcp_create_segment+0x128>)
 800cbd0:	22b0      	movs	r2, #176	; 0xb0
 800cbd2:	492e      	ldr	r1, [pc, #184]	; (800cc8c <tcp_create_segment+0x138>)
 800cbd4:	482b      	ldr	r0, [pc, #172]	; (800cc84 <tcp_create_segment+0x130>)
 800cbd6:	f004 fd93 	bl	8011700 <iprintf>
  seg->len = p->tot_len - optlen;
 800cbda:	68bb      	ldr	r3, [r7, #8]
 800cbdc:	891a      	ldrh	r2, [r3, #8]
 800cbde:	7dfb      	ldrb	r3, [r7, #23]
 800cbe0:	b29b      	uxth	r3, r3
 800cbe2:	1ad3      	subs	r3, r2, r3
 800cbe4:	b29a      	uxth	r2, r3
 800cbe6:	693b      	ldr	r3, [r7, #16]
 800cbe8:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800cbea:	2114      	movs	r1, #20
 800cbec:	68b8      	ldr	r0, [r7, #8]
 800cbee:	f7fb fb29 	bl	8008244 <pbuf_add_header>
 800cbf2:	4603      	mov	r3, r0
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d004      	beq.n	800cc02 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800cbf8:	6938      	ldr	r0, [r7, #16]
 800cbfa:	f7fc ffe6 	bl	8009bca <tcp_seg_free>
    return NULL;
 800cbfe:	2300      	movs	r3, #0
 800cc00:	e037      	b.n	800cc72 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800cc02:	693b      	ldr	r3, [r7, #16]
 800cc04:	685b      	ldr	r3, [r3, #4]
 800cc06:	685a      	ldr	r2, [r3, #4]
 800cc08:	693b      	ldr	r3, [r7, #16]
 800cc0a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	8ada      	ldrh	r2, [r3, #22]
 800cc10:	693b      	ldr	r3, [r7, #16]
 800cc12:	68dc      	ldr	r4, [r3, #12]
 800cc14:	4610      	mov	r0, r2
 800cc16:	f7fa f819 	bl	8006c4c <lwip_htons>
 800cc1a:	4603      	mov	r3, r0
 800cc1c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	8b1a      	ldrh	r2, [r3, #24]
 800cc22:	693b      	ldr	r3, [r7, #16]
 800cc24:	68dc      	ldr	r4, [r3, #12]
 800cc26:	4610      	mov	r0, r2
 800cc28:	f7fa f810 	bl	8006c4c <lwip_htons>
 800cc2c:	4603      	mov	r3, r0
 800cc2e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800cc30:	693b      	ldr	r3, [r7, #16]
 800cc32:	68dc      	ldr	r4, [r3, #12]
 800cc34:	6838      	ldr	r0, [r7, #0]
 800cc36:	f7fa f81e 	bl	8006c76 <lwip_htonl>
 800cc3a:	4603      	mov	r3, r0
 800cc3c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800cc3e:	7dfb      	ldrb	r3, [r7, #23]
 800cc40:	089b      	lsrs	r3, r3, #2
 800cc42:	b2db      	uxtb	r3, r3
 800cc44:	b29b      	uxth	r3, r3
 800cc46:	3305      	adds	r3, #5
 800cc48:	b29b      	uxth	r3, r3
 800cc4a:	031b      	lsls	r3, r3, #12
 800cc4c:	b29a      	uxth	r2, r3
 800cc4e:	79fb      	ldrb	r3, [r7, #7]
 800cc50:	b29b      	uxth	r3, r3
 800cc52:	4313      	orrs	r3, r2
 800cc54:	b29a      	uxth	r2, r3
 800cc56:	693b      	ldr	r3, [r7, #16]
 800cc58:	68dc      	ldr	r4, [r3, #12]
 800cc5a:	4610      	mov	r0, r2
 800cc5c:	f7f9 fff6 	bl	8006c4c <lwip_htons>
 800cc60:	4603      	mov	r3, r0
 800cc62:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800cc64:	693b      	ldr	r3, [r7, #16]
 800cc66:	68db      	ldr	r3, [r3, #12]
 800cc68:	2200      	movs	r2, #0
 800cc6a:	749a      	strb	r2, [r3, #18]
 800cc6c:	2200      	movs	r2, #0
 800cc6e:	74da      	strb	r2, [r3, #19]
  return seg;
 800cc70:	693b      	ldr	r3, [r7, #16]
}
 800cc72:	4618      	mov	r0, r3
 800cc74:	371c      	adds	r7, #28
 800cc76:	46bd      	mov	sp, r7
 800cc78:	bd90      	pop	{r4, r7, pc}
 800cc7a:	bf00      	nop
 800cc7c:	08015188 	.word	0x08015188
 800cc80:	080151bc 	.word	0x080151bc
 800cc84:	080151dc 	.word	0x080151dc
 800cc88:	08015204 	.word	0x08015204
 800cc8c:	08015228 	.word	0x08015228

0800cc90 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800cc90:	b580      	push	{r7, lr}
 800cc92:	b086      	sub	sp, #24
 800cc94:	af00      	add	r7, sp, #0
 800cc96:	607b      	str	r3, [r7, #4]
 800cc98:	4603      	mov	r3, r0
 800cc9a:	73fb      	strb	r3, [r7, #15]
 800cc9c:	460b      	mov	r3, r1
 800cc9e:	81bb      	strh	r3, [r7, #12]
 800cca0:	4613      	mov	r3, r2
 800cca2:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 800cca4:	89bb      	ldrh	r3, [r7, #12]
 800cca6:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d105      	bne.n	800ccba <tcp_pbuf_prealloc+0x2a>
 800ccae:	4b30      	ldr	r3, [pc, #192]	; (800cd70 <tcp_pbuf_prealloc+0xe0>)
 800ccb0:	22e8      	movs	r2, #232	; 0xe8
 800ccb2:	4930      	ldr	r1, [pc, #192]	; (800cd74 <tcp_pbuf_prealloc+0xe4>)
 800ccb4:	4830      	ldr	r0, [pc, #192]	; (800cd78 <tcp_pbuf_prealloc+0xe8>)
 800ccb6:	f004 fd23 	bl	8011700 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800ccba:	6a3b      	ldr	r3, [r7, #32]
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d105      	bne.n	800cccc <tcp_pbuf_prealloc+0x3c>
 800ccc0:	4b2b      	ldr	r3, [pc, #172]	; (800cd70 <tcp_pbuf_prealloc+0xe0>)
 800ccc2:	22e9      	movs	r2, #233	; 0xe9
 800ccc4:	492d      	ldr	r1, [pc, #180]	; (800cd7c <tcp_pbuf_prealloc+0xec>)
 800ccc6:	482c      	ldr	r0, [pc, #176]	; (800cd78 <tcp_pbuf_prealloc+0xe8>)
 800ccc8:	f004 fd1a 	bl	8011700 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800cccc:	89ba      	ldrh	r2, [r7, #12]
 800ccce:	897b      	ldrh	r3, [r7, #10]
 800ccd0:	429a      	cmp	r2, r3
 800ccd2:	d221      	bcs.n	800cd18 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800ccd4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ccd8:	f003 0302 	and.w	r3, r3, #2
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d111      	bne.n	800cd04 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 800cce0:	6a3b      	ldr	r3, [r7, #32]
 800cce2:	8b5b      	ldrh	r3, [r3, #26]
 800cce4:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d115      	bne.n	800cd18 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 800ccec:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d007      	beq.n	800cd04 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 800ccf4:	6a3b      	ldr	r3, [r7, #32]
 800ccf6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d103      	bne.n	800cd04 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 800ccfc:	6a3b      	ldr	r3, [r7, #32]
 800ccfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d009      	beq.n	800cd18 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800cd04:	89bb      	ldrh	r3, [r7, #12]
 800cd06:	f203 231b 	addw	r3, r3, #539	; 0x21b
 800cd0a:	f023 0203 	bic.w	r2, r3, #3
 800cd0e:	897b      	ldrh	r3, [r7, #10]
 800cd10:	4293      	cmp	r3, r2
 800cd12:	bf28      	it	cs
 800cd14:	4613      	movcs	r3, r2
 800cd16:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800cd18:	8af9      	ldrh	r1, [r7, #22]
 800cd1a:	7bfb      	ldrb	r3, [r7, #15]
 800cd1c:	f44f 7220 	mov.w	r2, #640	; 0x280
 800cd20:	4618      	mov	r0, r3
 800cd22:	f7fb f841 	bl	8007da8 <pbuf_alloc>
 800cd26:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800cd28:	693b      	ldr	r3, [r7, #16]
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d101      	bne.n	800cd32 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 800cd2e:	2300      	movs	r3, #0
 800cd30:	e019      	b.n	800cd66 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800cd32:	693b      	ldr	r3, [r7, #16]
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d006      	beq.n	800cd48 <tcp_pbuf_prealloc+0xb8>
 800cd3a:	4b0d      	ldr	r3, [pc, #52]	; (800cd70 <tcp_pbuf_prealloc+0xe0>)
 800cd3c:	f240 120b 	movw	r2, #267	; 0x10b
 800cd40:	490f      	ldr	r1, [pc, #60]	; (800cd80 <tcp_pbuf_prealloc+0xf0>)
 800cd42:	480d      	ldr	r0, [pc, #52]	; (800cd78 <tcp_pbuf_prealloc+0xe8>)
 800cd44:	f004 fcdc 	bl	8011700 <iprintf>
  *oversize = p->len - length;
 800cd48:	693b      	ldr	r3, [r7, #16]
 800cd4a:	895a      	ldrh	r2, [r3, #10]
 800cd4c:	89bb      	ldrh	r3, [r7, #12]
 800cd4e:	1ad3      	subs	r3, r2, r3
 800cd50:	b29a      	uxth	r2, r3
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800cd56:	693b      	ldr	r3, [r7, #16]
 800cd58:	89ba      	ldrh	r2, [r7, #12]
 800cd5a:	811a      	strh	r2, [r3, #8]
 800cd5c:	693b      	ldr	r3, [r7, #16]
 800cd5e:	891a      	ldrh	r2, [r3, #8]
 800cd60:	693b      	ldr	r3, [r7, #16]
 800cd62:	815a      	strh	r2, [r3, #10]
  return p;
 800cd64:	693b      	ldr	r3, [r7, #16]
}
 800cd66:	4618      	mov	r0, r3
 800cd68:	3718      	adds	r7, #24
 800cd6a:	46bd      	mov	sp, r7
 800cd6c:	bd80      	pop	{r7, pc}
 800cd6e:	bf00      	nop
 800cd70:	08015188 	.word	0x08015188
 800cd74:	08015240 	.word	0x08015240
 800cd78:	080151dc 	.word	0x080151dc
 800cd7c:	08015264 	.word	0x08015264
 800cd80:	08015284 	.word	0x08015284

0800cd84 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800cd84:	b580      	push	{r7, lr}
 800cd86:	b082      	sub	sp, #8
 800cd88:	af00      	add	r7, sp, #0
 800cd8a:	6078      	str	r0, [r7, #4]
 800cd8c:	460b      	mov	r3, r1
 800cd8e:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d106      	bne.n	800cda4 <tcp_write_checks+0x20>
 800cd96:	4b33      	ldr	r3, [pc, #204]	; (800ce64 <tcp_write_checks+0xe0>)
 800cd98:	f240 1233 	movw	r2, #307	; 0x133
 800cd9c:	4932      	ldr	r1, [pc, #200]	; (800ce68 <tcp_write_checks+0xe4>)
 800cd9e:	4833      	ldr	r0, [pc, #204]	; (800ce6c <tcp_write_checks+0xe8>)
 800cda0:	f004 fcae 	bl	8011700 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	7d1b      	ldrb	r3, [r3, #20]
 800cda8:	2b04      	cmp	r3, #4
 800cdaa:	d00e      	beq.n	800cdca <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 800cdb0:	2b07      	cmp	r3, #7
 800cdb2:	d00a      	beq.n	800cdca <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 800cdb8:	2b02      	cmp	r3, #2
 800cdba:	d006      	beq.n	800cdca <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 800cdc0:	2b03      	cmp	r3, #3
 800cdc2:	d002      	beq.n	800cdca <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 800cdc4:	f06f 030a 	mvn.w	r3, #10
 800cdc8:	e048      	b.n	800ce5c <tcp_write_checks+0xd8>
  } else if (len == 0) {
 800cdca:	887b      	ldrh	r3, [r7, #2]
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d101      	bne.n	800cdd4 <tcp_write_checks+0x50>
    return ERR_OK;
 800cdd0:	2300      	movs	r3, #0
 800cdd2:	e043      	b.n	800ce5c <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800cdda:	887a      	ldrh	r2, [r7, #2]
 800cddc:	429a      	cmp	r2, r3
 800cdde:	d909      	bls.n	800cdf4 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	8b5b      	ldrh	r3, [r3, #26]
 800cde4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cde8:	b29a      	uxth	r2, r3
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800cdee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cdf2:	e033      	b.n	800ce5c <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800cdfa:	2b08      	cmp	r3, #8
 800cdfc:	d909      	bls.n	800ce12 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	8b5b      	ldrh	r3, [r3, #26]
 800ce02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ce06:	b29a      	uxth	r2, r3
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800ce0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ce10:	e024      	b.n	800ce5c <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d00f      	beq.n	800ce3c <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d11a      	bne.n	800ce5a <tcp_write_checks+0xd6>
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d116      	bne.n	800ce5a <tcp_write_checks+0xd6>
 800ce2c:	4b0d      	ldr	r3, [pc, #52]	; (800ce64 <tcp_write_checks+0xe0>)
 800ce2e:	f240 1255 	movw	r2, #341	; 0x155
 800ce32:	490f      	ldr	r1, [pc, #60]	; (800ce70 <tcp_write_checks+0xec>)
 800ce34:	480d      	ldr	r0, [pc, #52]	; (800ce6c <tcp_write_checks+0xe8>)
 800ce36:	f004 fc63 	bl	8011700 <iprintf>
 800ce3a:	e00e      	b.n	800ce5a <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d103      	bne.n	800ce4c <tcp_write_checks+0xc8>
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d006      	beq.n	800ce5a <tcp_write_checks+0xd6>
 800ce4c:	4b05      	ldr	r3, [pc, #20]	; (800ce64 <tcp_write_checks+0xe0>)
 800ce4e:	f44f 72ac 	mov.w	r2, #344	; 0x158
 800ce52:	4908      	ldr	r1, [pc, #32]	; (800ce74 <tcp_write_checks+0xf0>)
 800ce54:	4805      	ldr	r0, [pc, #20]	; (800ce6c <tcp_write_checks+0xe8>)
 800ce56:	f004 fc53 	bl	8011700 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800ce5a:	2300      	movs	r3, #0
}
 800ce5c:	4618      	mov	r0, r3
 800ce5e:	3708      	adds	r7, #8
 800ce60:	46bd      	mov	sp, r7
 800ce62:	bd80      	pop	{r7, pc}
 800ce64:	08015188 	.word	0x08015188
 800ce68:	08015298 	.word	0x08015298
 800ce6c:	080151dc 	.word	0x080151dc
 800ce70:	080152b8 	.word	0x080152b8
 800ce74:	080152f4 	.word	0x080152f4

0800ce78 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800ce78:	b590      	push	{r4, r7, lr}
 800ce7a:	b09b      	sub	sp, #108	; 0x6c
 800ce7c:	af04      	add	r7, sp, #16
 800ce7e:	60f8      	str	r0, [r7, #12]
 800ce80:	60b9      	str	r1, [r7, #8]
 800ce82:	4611      	mov	r1, r2
 800ce84:	461a      	mov	r2, r3
 800ce86:	460b      	mov	r3, r1
 800ce88:	80fb      	strh	r3, [r7, #6]
 800ce8a:	4613      	mov	r3, r2
 800ce8c:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 800ce8e:	2300      	movs	r3, #0
 800ce90:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800ce92:	2300      	movs	r3, #0
 800ce94:	653b      	str	r3, [r7, #80]	; 0x50
 800ce96:	2300      	movs	r3, #0
 800ce98:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ce9a:	2300      	movs	r3, #0
 800ce9c:	64bb      	str	r3, [r7, #72]	; 0x48
 800ce9e:	2300      	movs	r3, #0
 800cea0:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 800cea2:	2300      	movs	r3, #0
 800cea4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 800cea8:	2300      	movs	r3, #0
 800ceaa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800ceae:	2300      	movs	r3, #0
 800ceb0:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 800ceb2:	2300      	movs	r3, #0
 800ceb4:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 800ceb6:	2300      	movs	r3, #0
 800ceb8:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d109      	bne.n	800ced4 <tcp_write+0x5c>
 800cec0:	4ba4      	ldr	r3, [pc, #656]	; (800d154 <tcp_write+0x2dc>)
 800cec2:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 800cec6:	49a4      	ldr	r1, [pc, #656]	; (800d158 <tcp_write+0x2e0>)
 800cec8:	48a4      	ldr	r0, [pc, #656]	; (800d15c <tcp_write+0x2e4>)
 800ceca:	f004 fc19 	bl	8011700 <iprintf>
 800cece:	f06f 030f 	mvn.w	r3, #15
 800ced2:	e32a      	b.n	800d52a <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ceda:	085b      	lsrs	r3, r3, #1
 800cedc:	b29a      	uxth	r2, r3
 800cede:	68fb      	ldr	r3, [r7, #12]
 800cee0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cee2:	4293      	cmp	r3, r2
 800cee4:	bf28      	it	cs
 800cee6:	4613      	movcs	r3, r2
 800cee8:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 800ceea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d102      	bne.n	800cef6 <tcp_write+0x7e>
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cef4:	e000      	b.n	800cef8 <tcp_write+0x80>
 800cef6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cef8:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800cefa:	68bb      	ldr	r3, [r7, #8]
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d109      	bne.n	800cf14 <tcp_write+0x9c>
 800cf00:	4b94      	ldr	r3, [pc, #592]	; (800d154 <tcp_write+0x2dc>)
 800cf02:	f240 12ad 	movw	r2, #429	; 0x1ad
 800cf06:	4996      	ldr	r1, [pc, #600]	; (800d160 <tcp_write+0x2e8>)
 800cf08:	4894      	ldr	r0, [pc, #592]	; (800d15c <tcp_write+0x2e4>)
 800cf0a:	f004 fbf9 	bl	8011700 <iprintf>
 800cf0e:	f06f 030f 	mvn.w	r3, #15
 800cf12:	e30a      	b.n	800d52a <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 800cf14:	88fb      	ldrh	r3, [r7, #6]
 800cf16:	4619      	mov	r1, r3
 800cf18:	68f8      	ldr	r0, [r7, #12]
 800cf1a:	f7ff ff33 	bl	800cd84 <tcp_write_checks>
 800cf1e:	4603      	mov	r3, r0
 800cf20:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 800cf24:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d002      	beq.n	800cf32 <tcp_write+0xba>
    return err;
 800cf2c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800cf30:	e2fb      	b.n	800d52a <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800cf38:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800cf3c:	2300      	movs	r3, #0
 800cf3e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	f000 80f6 	beq.w	800d138 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cf50:	653b      	str	r3, [r7, #80]	; 0x50
 800cf52:	e002      	b.n	800cf5a <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 800cf54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800cf5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d1f8      	bne.n	800cf54 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800cf62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cf64:	7a9b      	ldrb	r3, [r3, #10]
 800cf66:	009b      	lsls	r3, r3, #2
 800cf68:	b29b      	uxth	r3, r3
 800cf6a:	f003 0304 	and.w	r3, r3, #4
 800cf6e:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800cf70:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800cf72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cf74:	891b      	ldrh	r3, [r3, #8]
 800cf76:	4619      	mov	r1, r3
 800cf78:	8c3b      	ldrh	r3, [r7, #32]
 800cf7a:	440b      	add	r3, r1
 800cf7c:	429a      	cmp	r2, r3
 800cf7e:	da06      	bge.n	800cf8e <tcp_write+0x116>
 800cf80:	4b74      	ldr	r3, [pc, #464]	; (800d154 <tcp_write+0x2dc>)
 800cf82:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800cf86:	4977      	ldr	r1, [pc, #476]	; (800d164 <tcp_write+0x2ec>)
 800cf88:	4874      	ldr	r0, [pc, #464]	; (800d15c <tcp_write+0x2e4>)
 800cf8a:	f004 fbb9 	bl	8011700 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800cf8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cf90:	891a      	ldrh	r2, [r3, #8]
 800cf92:	8c3b      	ldrh	r3, [r7, #32]
 800cf94:	4413      	add	r3, r2
 800cf96:	b29b      	uxth	r3, r3
 800cf98:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800cf9a:	1ad3      	subs	r3, r2, r3
 800cf9c:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800cfa4:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 800cfa6:	8a7b      	ldrh	r3, [r7, #18]
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d026      	beq.n	800cffa <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800cfac:	8a7b      	ldrh	r3, [r7, #18]
 800cfae:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800cfb0:	429a      	cmp	r2, r3
 800cfb2:	d206      	bcs.n	800cfc2 <tcp_write+0x14a>
 800cfb4:	4b67      	ldr	r3, [pc, #412]	; (800d154 <tcp_write+0x2dc>)
 800cfb6:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 800cfba:	496b      	ldr	r1, [pc, #428]	; (800d168 <tcp_write+0x2f0>)
 800cfbc:	4867      	ldr	r0, [pc, #412]	; (800d15c <tcp_write+0x2e4>)
 800cfbe:	f004 fb9f 	bl	8011700 <iprintf>
      seg = last_unsent;
 800cfc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cfc4:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800cfc6:	8a7b      	ldrh	r3, [r7, #18]
 800cfc8:	88fa      	ldrh	r2, [r7, #6]
 800cfca:	4293      	cmp	r3, r2
 800cfcc:	bf28      	it	cs
 800cfce:	4613      	movcs	r3, r2
 800cfd0:	b29b      	uxth	r3, r3
 800cfd2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800cfd4:	4293      	cmp	r3, r2
 800cfd6:	bf28      	it	cs
 800cfd8:	4613      	movcs	r3, r2
 800cfda:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 800cfdc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800cfe0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800cfe2:	4413      	add	r3, r2
 800cfe4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 800cfe8:	8a7a      	ldrh	r2, [r7, #18]
 800cfea:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800cfec:	1ad3      	subs	r3, r2, r3
 800cfee:	b29b      	uxth	r3, r3
 800cff0:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 800cff2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800cff4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800cff6:	1ad3      	subs	r3, r2, r3
 800cff8:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800cffa:	8a7b      	ldrh	r3, [r7, #18]
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d00b      	beq.n	800d018 <tcp_write+0x1a0>
 800d000:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800d004:	88fb      	ldrh	r3, [r7, #6]
 800d006:	429a      	cmp	r2, r3
 800d008:	d006      	beq.n	800d018 <tcp_write+0x1a0>
 800d00a:	4b52      	ldr	r3, [pc, #328]	; (800d154 <tcp_write+0x2dc>)
 800d00c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d010:	4956      	ldr	r1, [pc, #344]	; (800d16c <tcp_write+0x2f4>)
 800d012:	4852      	ldr	r0, [pc, #328]	; (800d15c <tcp_write+0x2e4>)
 800d014:	f004 fb74 	bl	8011700 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800d018:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800d01c:	88fb      	ldrh	r3, [r7, #6]
 800d01e:	429a      	cmp	r2, r3
 800d020:	f080 8167 	bcs.w	800d2f2 <tcp_write+0x47a>
 800d024:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800d026:	2b00      	cmp	r3, #0
 800d028:	f000 8163 	beq.w	800d2f2 <tcp_write+0x47a>
 800d02c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d02e:	891b      	ldrh	r3, [r3, #8]
 800d030:	2b00      	cmp	r3, #0
 800d032:	f000 815e 	beq.w	800d2f2 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800d036:	88fa      	ldrh	r2, [r7, #6]
 800d038:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d03c:	1ad2      	subs	r2, r2, r3
 800d03e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800d040:	4293      	cmp	r3, r2
 800d042:	bfa8      	it	ge
 800d044:	4613      	movge	r3, r2
 800d046:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 800d048:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d04a:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800d04c:	797b      	ldrb	r3, [r7, #5]
 800d04e:	f003 0301 	and.w	r3, r3, #1
 800d052:	2b00      	cmp	r3, #0
 800d054:	d027      	beq.n	800d0a6 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800d056:	f107 0012 	add.w	r0, r7, #18
 800d05a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800d05c:	8bf9      	ldrh	r1, [r7, #30]
 800d05e:	2301      	movs	r3, #1
 800d060:	9302      	str	r3, [sp, #8]
 800d062:	797b      	ldrb	r3, [r7, #5]
 800d064:	9301      	str	r3, [sp, #4]
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	9300      	str	r3, [sp, #0]
 800d06a:	4603      	mov	r3, r0
 800d06c:	2000      	movs	r0, #0
 800d06e:	f7ff fe0f 	bl	800cc90 <tcp_pbuf_prealloc>
 800d072:	6578      	str	r0, [r7, #84]	; 0x54
 800d074:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d076:	2b00      	cmp	r3, #0
 800d078:	f000 8225 	beq.w	800d4c6 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800d07c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d07e:	6858      	ldr	r0, [r3, #4]
 800d080:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d084:	68ba      	ldr	r2, [r7, #8]
 800d086:	4413      	add	r3, r2
 800d088:	8bfa      	ldrh	r2, [r7, #30]
 800d08a:	4619      	mov	r1, r3
 800d08c:	f004 fa5e 	bl	801154c <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 800d090:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800d092:	f7fb f9f5 	bl	8008480 <pbuf_clen>
 800d096:	4603      	mov	r3, r0
 800d098:	461a      	mov	r2, r3
 800d09a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800d09e:	4413      	add	r3, r2
 800d0a0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800d0a4:	e041      	b.n	800d12a <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800d0a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d0a8:	685b      	ldr	r3, [r3, #4]
 800d0aa:	637b      	str	r3, [r7, #52]	; 0x34
 800d0ac:	e002      	b.n	800d0b4 <tcp_write+0x23c>
 800d0ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	637b      	str	r3, [r7, #52]	; 0x34
 800d0b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d1f8      	bne.n	800d0ae <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800d0bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0be:	7b1b      	ldrb	r3, [r3, #12]
 800d0c0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d115      	bne.n	800d0f4 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800d0c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0ca:	685b      	ldr	r3, [r3, #4]
 800d0cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d0ce:	8952      	ldrh	r2, [r2, #10]
 800d0d0:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800d0d2:	68ba      	ldr	r2, [r7, #8]
 800d0d4:	429a      	cmp	r2, r3
 800d0d6:	d10d      	bne.n	800d0f4 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800d0d8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d006      	beq.n	800d0ee <tcp_write+0x276>
 800d0e0:	4b1c      	ldr	r3, [pc, #112]	; (800d154 <tcp_write+0x2dc>)
 800d0e2:	f240 2231 	movw	r2, #561	; 0x231
 800d0e6:	4922      	ldr	r1, [pc, #136]	; (800d170 <tcp_write+0x2f8>)
 800d0e8:	481c      	ldr	r0, [pc, #112]	; (800d15c <tcp_write+0x2e4>)
 800d0ea:	f004 fb09 	bl	8011700 <iprintf>
          extendlen = seglen;
 800d0ee:	8bfb      	ldrh	r3, [r7, #30]
 800d0f0:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800d0f2:	e01a      	b.n	800d12a <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800d0f4:	8bfb      	ldrh	r3, [r7, #30]
 800d0f6:	2201      	movs	r2, #1
 800d0f8:	4619      	mov	r1, r3
 800d0fa:	2000      	movs	r0, #0
 800d0fc:	f7fa fe54 	bl	8007da8 <pbuf_alloc>
 800d100:	6578      	str	r0, [r7, #84]	; 0x54
 800d102:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d104:	2b00      	cmp	r3, #0
 800d106:	f000 81e0 	beq.w	800d4ca <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800d10a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d10e:	68ba      	ldr	r2, [r7, #8]
 800d110:	441a      	add	r2, r3
 800d112:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d114:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 800d116:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800d118:	f7fb f9b2 	bl	8008480 <pbuf_clen>
 800d11c:	4603      	mov	r3, r0
 800d11e:	461a      	mov	r2, r3
 800d120:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800d124:	4413      	add	r3, r2
 800d126:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 800d12a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800d12e:	8bfb      	ldrh	r3, [r7, #30]
 800d130:	4413      	add	r3, r2
 800d132:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800d136:	e0dc      	b.n	800d2f2 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d13e:	2b00      	cmp	r3, #0
 800d140:	f000 80d7 	beq.w	800d2f2 <tcp_write+0x47a>
 800d144:	4b03      	ldr	r3, [pc, #12]	; (800d154 <tcp_write+0x2dc>)
 800d146:	f240 224a 	movw	r2, #586	; 0x24a
 800d14a:	490a      	ldr	r1, [pc, #40]	; (800d174 <tcp_write+0x2fc>)
 800d14c:	4803      	ldr	r0, [pc, #12]	; (800d15c <tcp_write+0x2e4>)
 800d14e:	f004 fad7 	bl	8011700 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 800d152:	e0ce      	b.n	800d2f2 <tcp_write+0x47a>
 800d154:	08015188 	.word	0x08015188
 800d158:	08015328 	.word	0x08015328
 800d15c:	080151dc 	.word	0x080151dc
 800d160:	08015340 	.word	0x08015340
 800d164:	08015374 	.word	0x08015374
 800d168:	0801538c 	.word	0x0801538c
 800d16c:	080153ac 	.word	0x080153ac
 800d170:	080153cc 	.word	0x080153cc
 800d174:	080153f8 	.word	0x080153f8
    struct pbuf *p;
    u16_t left = len - pos;
 800d178:	88fa      	ldrh	r2, [r7, #6]
 800d17a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d17e:	1ad3      	subs	r3, r2, r3
 800d180:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 800d182:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800d186:	b29b      	uxth	r3, r3
 800d188:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d18a:	1ad3      	subs	r3, r2, r3
 800d18c:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 800d18e:	8b7a      	ldrh	r2, [r7, #26]
 800d190:	8bbb      	ldrh	r3, [r7, #28]
 800d192:	4293      	cmp	r3, r2
 800d194:	bf28      	it	cs
 800d196:	4613      	movcs	r3, r2
 800d198:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800d19a:	797b      	ldrb	r3, [r7, #5]
 800d19c:	f003 0301 	and.w	r3, r3, #1
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d036      	beq.n	800d212 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800d1a4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800d1a8:	b29a      	uxth	r2, r3
 800d1aa:	8b3b      	ldrh	r3, [r7, #24]
 800d1ac:	4413      	add	r3, r2
 800d1ae:	b299      	uxth	r1, r3
 800d1b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	bf0c      	ite	eq
 800d1b6:	2301      	moveq	r3, #1
 800d1b8:	2300      	movne	r3, #0
 800d1ba:	b2db      	uxtb	r3, r3
 800d1bc:	f107 0012 	add.w	r0, r7, #18
 800d1c0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d1c2:	9302      	str	r3, [sp, #8]
 800d1c4:	797b      	ldrb	r3, [r7, #5]
 800d1c6:	9301      	str	r3, [sp, #4]
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	9300      	str	r3, [sp, #0]
 800d1cc:	4603      	mov	r3, r0
 800d1ce:	2036      	movs	r0, #54	; 0x36
 800d1d0:	f7ff fd5e 	bl	800cc90 <tcp_pbuf_prealloc>
 800d1d4:	6338      	str	r0, [r7, #48]	; 0x30
 800d1d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	f000 8178 	beq.w	800d4ce <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800d1de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1e0:	895b      	ldrh	r3, [r3, #10]
 800d1e2:	8b3a      	ldrh	r2, [r7, #24]
 800d1e4:	429a      	cmp	r2, r3
 800d1e6:	d906      	bls.n	800d1f6 <tcp_write+0x37e>
 800d1e8:	4b8c      	ldr	r3, [pc, #560]	; (800d41c <tcp_write+0x5a4>)
 800d1ea:	f240 2266 	movw	r2, #614	; 0x266
 800d1ee:	498c      	ldr	r1, [pc, #560]	; (800d420 <tcp_write+0x5a8>)
 800d1f0:	488c      	ldr	r0, [pc, #560]	; (800d424 <tcp_write+0x5ac>)
 800d1f2:	f004 fa85 	bl	8011700 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800d1f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1f8:	685a      	ldr	r2, [r3, #4]
 800d1fa:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800d1fe:	18d0      	adds	r0, r2, r3
 800d200:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d204:	68ba      	ldr	r2, [r7, #8]
 800d206:	4413      	add	r3, r2
 800d208:	8b3a      	ldrh	r2, [r7, #24]
 800d20a:	4619      	mov	r1, r3
 800d20c:	f004 f99e 	bl	801154c <memcpy>
 800d210:	e02f      	b.n	800d272 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800d212:	8a7b      	ldrh	r3, [r7, #18]
 800d214:	2b00      	cmp	r3, #0
 800d216:	d006      	beq.n	800d226 <tcp_write+0x3ae>
 800d218:	4b80      	ldr	r3, [pc, #512]	; (800d41c <tcp_write+0x5a4>)
 800d21a:	f240 2271 	movw	r2, #625	; 0x271
 800d21e:	4982      	ldr	r1, [pc, #520]	; (800d428 <tcp_write+0x5b0>)
 800d220:	4880      	ldr	r0, [pc, #512]	; (800d424 <tcp_write+0x5ac>)
 800d222:	f004 fa6d 	bl	8011700 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800d226:	8b3b      	ldrh	r3, [r7, #24]
 800d228:	2201      	movs	r2, #1
 800d22a:	4619      	mov	r1, r3
 800d22c:	2036      	movs	r0, #54	; 0x36
 800d22e:	f7fa fdbb 	bl	8007da8 <pbuf_alloc>
 800d232:	6178      	str	r0, [r7, #20]
 800d234:	697b      	ldr	r3, [r7, #20]
 800d236:	2b00      	cmp	r3, #0
 800d238:	f000 814b 	beq.w	800d4d2 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800d23c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d240:	68ba      	ldr	r2, [r7, #8]
 800d242:	441a      	add	r2, r3
 800d244:	697b      	ldr	r3, [r7, #20]
 800d246:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800d248:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800d24c:	b29b      	uxth	r3, r3
 800d24e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d252:	4619      	mov	r1, r3
 800d254:	2036      	movs	r0, #54	; 0x36
 800d256:	f7fa fda7 	bl	8007da8 <pbuf_alloc>
 800d25a:	6338      	str	r0, [r7, #48]	; 0x30
 800d25c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d103      	bne.n	800d26a <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800d262:	6978      	ldr	r0, [r7, #20]
 800d264:	f7fb f884 	bl	8008370 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 800d268:	e136      	b.n	800d4d8 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 800d26a:	6979      	ldr	r1, [r7, #20]
 800d26c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d26e:	f7fb f941 	bl	80084f4 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800d272:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d274:	f7fb f904 	bl	8008480 <pbuf_clen>
 800d278:	4603      	mov	r3, r0
 800d27a:	461a      	mov	r2, r3
 800d27c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800d280:	4413      	add	r3, r2
 800d282:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800d286:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800d28a:	2b09      	cmp	r3, #9
 800d28c:	d903      	bls.n	800d296 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 800d28e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d290:	f7fb f86e 	bl	8008370 <pbuf_free>
      goto memerr;
 800d294:	e120      	b.n	800d4d8 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d29a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d29e:	441a      	add	r2, r3
 800d2a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d2a4:	9300      	str	r3, [sp, #0]
 800d2a6:	4613      	mov	r3, r2
 800d2a8:	2200      	movs	r2, #0
 800d2aa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d2ac:	68f8      	ldr	r0, [r7, #12]
 800d2ae:	f7ff fc51 	bl	800cb54 <tcp_create_segment>
 800d2b2:	64f8      	str	r0, [r7, #76]	; 0x4c
 800d2b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	f000 810d 	beq.w	800d4d6 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 800d2bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d102      	bne.n	800d2c8 <tcp_write+0x450>
      queue = seg;
 800d2c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d2c4:	647b      	str	r3, [r7, #68]	; 0x44
 800d2c6:	e00c      	b.n	800d2e2 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800d2c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d106      	bne.n	800d2dc <tcp_write+0x464>
 800d2ce:	4b53      	ldr	r3, [pc, #332]	; (800d41c <tcp_write+0x5a4>)
 800d2d0:	f240 22ab 	movw	r2, #683	; 0x2ab
 800d2d4:	4955      	ldr	r1, [pc, #340]	; (800d42c <tcp_write+0x5b4>)
 800d2d6:	4853      	ldr	r0, [pc, #332]	; (800d424 <tcp_write+0x5ac>)
 800d2d8:	f004 fa12 	bl	8011700 <iprintf>
      prev_seg->next = seg;
 800d2dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d2de:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d2e0:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 800d2e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d2e4:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800d2e6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800d2ea:	8b3b      	ldrh	r3, [r7, #24]
 800d2ec:	4413      	add	r3, r2
 800d2ee:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 800d2f2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800d2f6:	88fb      	ldrh	r3, [r7, #6]
 800d2f8:	429a      	cmp	r2, r3
 800d2fa:	f4ff af3d 	bcc.w	800d178 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 800d2fe:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d300:	2b00      	cmp	r3, #0
 800d302:	d02c      	beq.n	800d35e <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800d304:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d306:	685b      	ldr	r3, [r3, #4]
 800d308:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d30a:	e01e      	b.n	800d34a <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 800d30c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d30e:	891a      	ldrh	r2, [r3, #8]
 800d310:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d312:	4413      	add	r3, r2
 800d314:	b29a      	uxth	r2, r3
 800d316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d318:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 800d31a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d110      	bne.n	800d344 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800d322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d324:	685b      	ldr	r3, [r3, #4]
 800d326:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d328:	8952      	ldrh	r2, [r2, #10]
 800d32a:	4413      	add	r3, r2
 800d32c:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800d32e:	68b9      	ldr	r1, [r7, #8]
 800d330:	4618      	mov	r0, r3
 800d332:	f004 f90b 	bl	801154c <memcpy>
        p->len += oversize_used;
 800d336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d338:	895a      	ldrh	r2, [r3, #10]
 800d33a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d33c:	4413      	add	r3, r2
 800d33e:	b29a      	uxth	r2, r3
 800d340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d342:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800d344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d34a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d1dd      	bne.n	800d30c <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 800d350:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d352:	891a      	ldrh	r2, [r3, #8]
 800d354:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d356:	4413      	add	r3, r2
 800d358:	b29a      	uxth	r2, r3
 800d35a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d35c:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 800d35e:	8a7a      	ldrh	r2, [r7, #18]
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 800d366:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d018      	beq.n	800d39e <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800d36c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d106      	bne.n	800d380 <tcp_write+0x508>
 800d372:	4b2a      	ldr	r3, [pc, #168]	; (800d41c <tcp_write+0x5a4>)
 800d374:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 800d378:	492d      	ldr	r1, [pc, #180]	; (800d430 <tcp_write+0x5b8>)
 800d37a:	482a      	ldr	r0, [pc, #168]	; (800d424 <tcp_write+0x5ac>)
 800d37c:	f004 f9c0 	bl	8011700 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 800d380:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d382:	685b      	ldr	r3, [r3, #4]
 800d384:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d386:	4618      	mov	r0, r3
 800d388:	f7fb f8b4 	bl	80084f4 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800d38c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d38e:	891a      	ldrh	r2, [r3, #8]
 800d390:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d392:	891b      	ldrh	r3, [r3, #8]
 800d394:	4413      	add	r3, r2
 800d396:	b29a      	uxth	r2, r3
 800d398:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d39a:	811a      	strh	r2, [r3, #8]
 800d39c:	e037      	b.n	800d40e <tcp_write+0x596>
  } else if (extendlen > 0) {
 800d39e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d034      	beq.n	800d40e <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800d3a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d003      	beq.n	800d3b2 <tcp_write+0x53a>
 800d3aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d3ac:	685b      	ldr	r3, [r3, #4]
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d106      	bne.n	800d3c0 <tcp_write+0x548>
 800d3b2:	4b1a      	ldr	r3, [pc, #104]	; (800d41c <tcp_write+0x5a4>)
 800d3b4:	f240 22e6 	movw	r2, #742	; 0x2e6
 800d3b8:	491e      	ldr	r1, [pc, #120]	; (800d434 <tcp_write+0x5bc>)
 800d3ba:	481a      	ldr	r0, [pc, #104]	; (800d424 <tcp_write+0x5ac>)
 800d3bc:	f004 f9a0 	bl	8011700 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800d3c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d3c2:	685b      	ldr	r3, [r3, #4]
 800d3c4:	62bb      	str	r3, [r7, #40]	; 0x28
 800d3c6:	e009      	b.n	800d3dc <tcp_write+0x564>
      p->tot_len += extendlen;
 800d3c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3ca:	891a      	ldrh	r2, [r3, #8]
 800d3cc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800d3ce:	4413      	add	r3, r2
 800d3d0:	b29a      	uxth	r2, r3
 800d3d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3d4:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800d3d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	62bb      	str	r3, [r7, #40]	; 0x28
 800d3dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d1f1      	bne.n	800d3c8 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 800d3e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3e6:	891a      	ldrh	r2, [r3, #8]
 800d3e8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800d3ea:	4413      	add	r3, r2
 800d3ec:	b29a      	uxth	r2, r3
 800d3ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3f0:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800d3f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3f4:	895a      	ldrh	r2, [r3, #10]
 800d3f6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800d3f8:	4413      	add	r3, r2
 800d3fa:	b29a      	uxth	r2, r3
 800d3fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3fe:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800d400:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d402:	891a      	ldrh	r2, [r3, #8]
 800d404:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800d406:	4413      	add	r3, r2
 800d408:	b29a      	uxth	r2, r3
 800d40a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d40c:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 800d40e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d410:	2b00      	cmp	r3, #0
 800d412:	d111      	bne.n	800d438 <tcp_write+0x5c0>
    pcb->unsent = queue;
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d418:	66da      	str	r2, [r3, #108]	; 0x6c
 800d41a:	e010      	b.n	800d43e <tcp_write+0x5c6>
 800d41c:	08015188 	.word	0x08015188
 800d420:	08015428 	.word	0x08015428
 800d424:	080151dc 	.word	0x080151dc
 800d428:	08015468 	.word	0x08015468
 800d42c:	08015478 	.word	0x08015478
 800d430:	0801548c 	.word	0x0801548c
 800d434:	080154c4 	.word	0x080154c4
  } else {
    last_unsent->next = queue;
 800d438:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d43a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d43c:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d442:	88fb      	ldrh	r3, [r7, #6]
 800d444:	441a      	add	r2, r3
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800d450:	88fb      	ldrh	r3, [r7, #6]
 800d452:	1ad3      	subs	r3, r2, r3
 800d454:	b29a      	uxth	r2, r3
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800d462:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d00e      	beq.n	800d48e <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d474:	2b00      	cmp	r3, #0
 800d476:	d10a      	bne.n	800d48e <tcp_write+0x616>
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d106      	bne.n	800d48e <tcp_write+0x616>
 800d480:	4b2c      	ldr	r3, [pc, #176]	; (800d534 <tcp_write+0x6bc>)
 800d482:	f240 3212 	movw	r2, #786	; 0x312
 800d486:	492c      	ldr	r1, [pc, #176]	; (800d538 <tcp_write+0x6c0>)
 800d488:	482c      	ldr	r0, [pc, #176]	; (800d53c <tcp_write+0x6c4>)
 800d48a:	f004 f939 	bl	8011700 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800d48e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d490:	2b00      	cmp	r3, #0
 800d492:	d016      	beq.n	800d4c2 <tcp_write+0x64a>
 800d494:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d496:	68db      	ldr	r3, [r3, #12]
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d012      	beq.n	800d4c2 <tcp_write+0x64a>
 800d49c:	797b      	ldrb	r3, [r7, #5]
 800d49e:	f003 0302 	and.w	r3, r3, #2
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d10d      	bne.n	800d4c2 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800d4a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d4a8:	68db      	ldr	r3, [r3, #12]
 800d4aa:	899b      	ldrh	r3, [r3, #12]
 800d4ac:	b29c      	uxth	r4, r3
 800d4ae:	2008      	movs	r0, #8
 800d4b0:	f7f9 fbcc 	bl	8006c4c <lwip_htons>
 800d4b4:	4603      	mov	r3, r0
 800d4b6:	461a      	mov	r2, r3
 800d4b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d4ba:	68db      	ldr	r3, [r3, #12]
 800d4bc:	4322      	orrs	r2, r4
 800d4be:	b292      	uxth	r2, r2
 800d4c0:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 800d4c2:	2300      	movs	r3, #0
 800d4c4:	e031      	b.n	800d52a <tcp_write+0x6b2>
          goto memerr;
 800d4c6:	bf00      	nop
 800d4c8:	e006      	b.n	800d4d8 <tcp_write+0x660>
            goto memerr;
 800d4ca:	bf00      	nop
 800d4cc:	e004      	b.n	800d4d8 <tcp_write+0x660>
        goto memerr;
 800d4ce:	bf00      	nop
 800d4d0:	e002      	b.n	800d4d8 <tcp_write+0x660>
        goto memerr;
 800d4d2:	bf00      	nop
 800d4d4:	e000      	b.n	800d4d8 <tcp_write+0x660>
      goto memerr;
 800d4d6:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	8b5b      	ldrh	r3, [r3, #26]
 800d4dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d4e0:	b29a      	uxth	r2, r3
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 800d4e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d002      	beq.n	800d4f2 <tcp_write+0x67a>
    pbuf_free(concat_p);
 800d4ec:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800d4ee:	f7fa ff3f 	bl	8008370 <pbuf_free>
  }
  if (queue != NULL) {
 800d4f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d002      	beq.n	800d4fe <tcp_write+0x686>
    tcp_segs_free(queue);
 800d4f8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800d4fa:	f7fc fb51 	bl	8009ba0 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d504:	2b00      	cmp	r3, #0
 800d506:	d00e      	beq.n	800d526 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d10a      	bne.n	800d526 <tcp_write+0x6ae>
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d514:	2b00      	cmp	r3, #0
 800d516:	d106      	bne.n	800d526 <tcp_write+0x6ae>
 800d518:	4b06      	ldr	r3, [pc, #24]	; (800d534 <tcp_write+0x6bc>)
 800d51a:	f240 3227 	movw	r2, #807	; 0x327
 800d51e:	4906      	ldr	r1, [pc, #24]	; (800d538 <tcp_write+0x6c0>)
 800d520:	4806      	ldr	r0, [pc, #24]	; (800d53c <tcp_write+0x6c4>)
 800d522:	f004 f8ed 	bl	8011700 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800d526:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800d52a:	4618      	mov	r0, r3
 800d52c:	375c      	adds	r7, #92	; 0x5c
 800d52e:	46bd      	mov	sp, r7
 800d530:	bd90      	pop	{r4, r7, pc}
 800d532:	bf00      	nop
 800d534:	08015188 	.word	0x08015188
 800d538:	080154fc 	.word	0x080154fc
 800d53c:	080151dc 	.word	0x080151dc

0800d540 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800d540:	b590      	push	{r4, r7, lr}
 800d542:	b08b      	sub	sp, #44	; 0x2c
 800d544:	af02      	add	r7, sp, #8
 800d546:	6078      	str	r0, [r7, #4]
 800d548:	460b      	mov	r3, r1
 800d54a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800d54c:	2300      	movs	r3, #0
 800d54e:	61fb      	str	r3, [r7, #28]
 800d550:	2300      	movs	r3, #0
 800d552:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800d554:	2300      	movs	r3, #0
 800d556:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d106      	bne.n	800d56c <tcp_split_unsent_seg+0x2c>
 800d55e:	4b95      	ldr	r3, [pc, #596]	; (800d7b4 <tcp_split_unsent_seg+0x274>)
 800d560:	f240 324b 	movw	r2, #843	; 0x34b
 800d564:	4994      	ldr	r1, [pc, #592]	; (800d7b8 <tcp_split_unsent_seg+0x278>)
 800d566:	4895      	ldr	r0, [pc, #596]	; (800d7bc <tcp_split_unsent_seg+0x27c>)
 800d568:	f004 f8ca 	bl	8011700 <iprintf>

  useg = pcb->unsent;
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d570:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800d572:	697b      	ldr	r3, [r7, #20]
 800d574:	2b00      	cmp	r3, #0
 800d576:	d102      	bne.n	800d57e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800d578:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d57c:	e116      	b.n	800d7ac <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800d57e:	887b      	ldrh	r3, [r7, #2]
 800d580:	2b00      	cmp	r3, #0
 800d582:	d109      	bne.n	800d598 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800d584:	4b8b      	ldr	r3, [pc, #556]	; (800d7b4 <tcp_split_unsent_seg+0x274>)
 800d586:	f240 3253 	movw	r2, #851	; 0x353
 800d58a:	498d      	ldr	r1, [pc, #564]	; (800d7c0 <tcp_split_unsent_seg+0x280>)
 800d58c:	488b      	ldr	r0, [pc, #556]	; (800d7bc <tcp_split_unsent_seg+0x27c>)
 800d58e:	f004 f8b7 	bl	8011700 <iprintf>
    return ERR_VAL;
 800d592:	f06f 0305 	mvn.w	r3, #5
 800d596:	e109      	b.n	800d7ac <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800d598:	697b      	ldr	r3, [r7, #20]
 800d59a:	891b      	ldrh	r3, [r3, #8]
 800d59c:	887a      	ldrh	r2, [r7, #2]
 800d59e:	429a      	cmp	r2, r3
 800d5a0:	d301      	bcc.n	800d5a6 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800d5a2:	2300      	movs	r3, #0
 800d5a4:	e102      	b.n	800d7ac <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d5aa:	887a      	ldrh	r2, [r7, #2]
 800d5ac:	429a      	cmp	r2, r3
 800d5ae:	d906      	bls.n	800d5be <tcp_split_unsent_seg+0x7e>
 800d5b0:	4b80      	ldr	r3, [pc, #512]	; (800d7b4 <tcp_split_unsent_seg+0x274>)
 800d5b2:	f240 325b 	movw	r2, #859	; 0x35b
 800d5b6:	4983      	ldr	r1, [pc, #524]	; (800d7c4 <tcp_split_unsent_seg+0x284>)
 800d5b8:	4880      	ldr	r0, [pc, #512]	; (800d7bc <tcp_split_unsent_seg+0x27c>)
 800d5ba:	f004 f8a1 	bl	8011700 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800d5be:	697b      	ldr	r3, [r7, #20]
 800d5c0:	891b      	ldrh	r3, [r3, #8]
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d106      	bne.n	800d5d4 <tcp_split_unsent_seg+0x94>
 800d5c6:	4b7b      	ldr	r3, [pc, #492]	; (800d7b4 <tcp_split_unsent_seg+0x274>)
 800d5c8:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800d5cc:	497e      	ldr	r1, [pc, #504]	; (800d7c8 <tcp_split_unsent_seg+0x288>)
 800d5ce:	487b      	ldr	r0, [pc, #492]	; (800d7bc <tcp_split_unsent_seg+0x27c>)
 800d5d0:	f004 f896 	bl	8011700 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800d5d4:	697b      	ldr	r3, [r7, #20]
 800d5d6:	7a9b      	ldrb	r3, [r3, #10]
 800d5d8:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800d5da:	7bfb      	ldrb	r3, [r7, #15]
 800d5dc:	009b      	lsls	r3, r3, #2
 800d5de:	b2db      	uxtb	r3, r3
 800d5e0:	f003 0304 	and.w	r3, r3, #4
 800d5e4:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800d5e6:	697b      	ldr	r3, [r7, #20]
 800d5e8:	891a      	ldrh	r2, [r3, #8]
 800d5ea:	887b      	ldrh	r3, [r7, #2]
 800d5ec:	1ad3      	subs	r3, r2, r3
 800d5ee:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800d5f0:	7bbb      	ldrb	r3, [r7, #14]
 800d5f2:	b29a      	uxth	r2, r3
 800d5f4:	89bb      	ldrh	r3, [r7, #12]
 800d5f6:	4413      	add	r3, r2
 800d5f8:	b29b      	uxth	r3, r3
 800d5fa:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d5fe:	4619      	mov	r1, r3
 800d600:	2036      	movs	r0, #54	; 0x36
 800d602:	f7fa fbd1 	bl	8007da8 <pbuf_alloc>
 800d606:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800d608:	693b      	ldr	r3, [r7, #16]
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	f000 80b7 	beq.w	800d77e <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800d610:	697b      	ldr	r3, [r7, #20]
 800d612:	685b      	ldr	r3, [r3, #4]
 800d614:	891a      	ldrh	r2, [r3, #8]
 800d616:	697b      	ldr	r3, [r7, #20]
 800d618:	891b      	ldrh	r3, [r3, #8]
 800d61a:	1ad3      	subs	r3, r2, r3
 800d61c:	b29a      	uxth	r2, r3
 800d61e:	887b      	ldrh	r3, [r7, #2]
 800d620:	4413      	add	r3, r2
 800d622:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800d624:	697b      	ldr	r3, [r7, #20]
 800d626:	6858      	ldr	r0, [r3, #4]
 800d628:	693b      	ldr	r3, [r7, #16]
 800d62a:	685a      	ldr	r2, [r3, #4]
 800d62c:	7bbb      	ldrb	r3, [r7, #14]
 800d62e:	18d1      	adds	r1, r2, r3
 800d630:	897b      	ldrh	r3, [r7, #10]
 800d632:	89ba      	ldrh	r2, [r7, #12]
 800d634:	f7fb f886 	bl	8008744 <pbuf_copy_partial>
 800d638:	4603      	mov	r3, r0
 800d63a:	461a      	mov	r2, r3
 800d63c:	89bb      	ldrh	r3, [r7, #12]
 800d63e:	4293      	cmp	r3, r2
 800d640:	f040 809f 	bne.w	800d782 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800d644:	697b      	ldr	r3, [r7, #20]
 800d646:	68db      	ldr	r3, [r3, #12]
 800d648:	899b      	ldrh	r3, [r3, #12]
 800d64a:	b29b      	uxth	r3, r3
 800d64c:	4618      	mov	r0, r3
 800d64e:	f7f9 fafd 	bl	8006c4c <lwip_htons>
 800d652:	4603      	mov	r3, r0
 800d654:	b2db      	uxtb	r3, r3
 800d656:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d65a:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800d65c:	2300      	movs	r3, #0
 800d65e:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800d660:	7efb      	ldrb	r3, [r7, #27]
 800d662:	f003 0308 	and.w	r3, r3, #8
 800d666:	2b00      	cmp	r3, #0
 800d668:	d007      	beq.n	800d67a <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800d66a:	7efb      	ldrb	r3, [r7, #27]
 800d66c:	f023 0308 	bic.w	r3, r3, #8
 800d670:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800d672:	7ebb      	ldrb	r3, [r7, #26]
 800d674:	f043 0308 	orr.w	r3, r3, #8
 800d678:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800d67a:	7efb      	ldrb	r3, [r7, #27]
 800d67c:	f003 0301 	and.w	r3, r3, #1
 800d680:	2b00      	cmp	r3, #0
 800d682:	d007      	beq.n	800d694 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800d684:	7efb      	ldrb	r3, [r7, #27]
 800d686:	f023 0301 	bic.w	r3, r3, #1
 800d68a:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800d68c:	7ebb      	ldrb	r3, [r7, #26]
 800d68e:	f043 0301 	orr.w	r3, r3, #1
 800d692:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800d694:	697b      	ldr	r3, [r7, #20]
 800d696:	68db      	ldr	r3, [r3, #12]
 800d698:	685b      	ldr	r3, [r3, #4]
 800d69a:	4618      	mov	r0, r3
 800d69c:	f7f9 faeb 	bl	8006c76 <lwip_htonl>
 800d6a0:	4602      	mov	r2, r0
 800d6a2:	887b      	ldrh	r3, [r7, #2]
 800d6a4:	18d1      	adds	r1, r2, r3
 800d6a6:	7eba      	ldrb	r2, [r7, #26]
 800d6a8:	7bfb      	ldrb	r3, [r7, #15]
 800d6aa:	9300      	str	r3, [sp, #0]
 800d6ac:	460b      	mov	r3, r1
 800d6ae:	6939      	ldr	r1, [r7, #16]
 800d6b0:	6878      	ldr	r0, [r7, #4]
 800d6b2:	f7ff fa4f 	bl	800cb54 <tcp_create_segment>
 800d6b6:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800d6b8:	69fb      	ldr	r3, [r7, #28]
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d063      	beq.n	800d786 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800d6be:	697b      	ldr	r3, [r7, #20]
 800d6c0:	685b      	ldr	r3, [r3, #4]
 800d6c2:	4618      	mov	r0, r3
 800d6c4:	f7fa fedc 	bl	8008480 <pbuf_clen>
 800d6c8:	4603      	mov	r3, r0
 800d6ca:	461a      	mov	r2, r3
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d6d2:	1a9b      	subs	r3, r3, r2
 800d6d4:	b29a      	uxth	r2, r3
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800d6dc:	697b      	ldr	r3, [r7, #20]
 800d6de:	6858      	ldr	r0, [r3, #4]
 800d6e0:	697b      	ldr	r3, [r7, #20]
 800d6e2:	685b      	ldr	r3, [r3, #4]
 800d6e4:	891a      	ldrh	r2, [r3, #8]
 800d6e6:	89bb      	ldrh	r3, [r7, #12]
 800d6e8:	1ad3      	subs	r3, r2, r3
 800d6ea:	b29b      	uxth	r3, r3
 800d6ec:	4619      	mov	r1, r3
 800d6ee:	f7fa fcb9 	bl	8008064 <pbuf_realloc>
  useg->len -= remainder;
 800d6f2:	697b      	ldr	r3, [r7, #20]
 800d6f4:	891a      	ldrh	r2, [r3, #8]
 800d6f6:	89bb      	ldrh	r3, [r7, #12]
 800d6f8:	1ad3      	subs	r3, r2, r3
 800d6fa:	b29a      	uxth	r2, r3
 800d6fc:	697b      	ldr	r3, [r7, #20]
 800d6fe:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800d700:	697b      	ldr	r3, [r7, #20]
 800d702:	68db      	ldr	r3, [r3, #12]
 800d704:	899b      	ldrh	r3, [r3, #12]
 800d706:	b29c      	uxth	r4, r3
 800d708:	7efb      	ldrb	r3, [r7, #27]
 800d70a:	b29b      	uxth	r3, r3
 800d70c:	4618      	mov	r0, r3
 800d70e:	f7f9 fa9d 	bl	8006c4c <lwip_htons>
 800d712:	4603      	mov	r3, r0
 800d714:	461a      	mov	r2, r3
 800d716:	697b      	ldr	r3, [r7, #20]
 800d718:	68db      	ldr	r3, [r3, #12]
 800d71a:	4322      	orrs	r2, r4
 800d71c:	b292      	uxth	r2, r2
 800d71e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800d720:	697b      	ldr	r3, [r7, #20]
 800d722:	685b      	ldr	r3, [r3, #4]
 800d724:	4618      	mov	r0, r3
 800d726:	f7fa feab 	bl	8008480 <pbuf_clen>
 800d72a:	4603      	mov	r3, r0
 800d72c:	461a      	mov	r2, r3
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d734:	4413      	add	r3, r2
 800d736:	b29a      	uxth	r2, r3
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800d73e:	69fb      	ldr	r3, [r7, #28]
 800d740:	685b      	ldr	r3, [r3, #4]
 800d742:	4618      	mov	r0, r3
 800d744:	f7fa fe9c 	bl	8008480 <pbuf_clen>
 800d748:	4603      	mov	r3, r0
 800d74a:	461a      	mov	r2, r3
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d752:	4413      	add	r3, r2
 800d754:	b29a      	uxth	r2, r3
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800d75c:	697b      	ldr	r3, [r7, #20]
 800d75e:	681a      	ldr	r2, [r3, #0]
 800d760:	69fb      	ldr	r3, [r7, #28]
 800d762:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800d764:	697b      	ldr	r3, [r7, #20]
 800d766:	69fa      	ldr	r2, [r7, #28]
 800d768:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800d76a:	69fb      	ldr	r3, [r7, #28]
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d103      	bne.n	800d77a <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	2200      	movs	r2, #0
 800d776:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800d77a:	2300      	movs	r3, #0
 800d77c:	e016      	b.n	800d7ac <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800d77e:	bf00      	nop
 800d780:	e002      	b.n	800d788 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800d782:	bf00      	nop
 800d784:	e000      	b.n	800d788 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800d786:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800d788:	69fb      	ldr	r3, [r7, #28]
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d006      	beq.n	800d79c <tcp_split_unsent_seg+0x25c>
 800d78e:	4b09      	ldr	r3, [pc, #36]	; (800d7b4 <tcp_split_unsent_seg+0x274>)
 800d790:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800d794:	490d      	ldr	r1, [pc, #52]	; (800d7cc <tcp_split_unsent_seg+0x28c>)
 800d796:	4809      	ldr	r0, [pc, #36]	; (800d7bc <tcp_split_unsent_seg+0x27c>)
 800d798:	f003 ffb2 	bl	8011700 <iprintf>
  if (p != NULL) {
 800d79c:	693b      	ldr	r3, [r7, #16]
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d002      	beq.n	800d7a8 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800d7a2:	6938      	ldr	r0, [r7, #16]
 800d7a4:	f7fa fde4 	bl	8008370 <pbuf_free>
  }

  return ERR_MEM;
 800d7a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800d7ac:	4618      	mov	r0, r3
 800d7ae:	3724      	adds	r7, #36	; 0x24
 800d7b0:	46bd      	mov	sp, r7
 800d7b2:	bd90      	pop	{r4, r7, pc}
 800d7b4:	08015188 	.word	0x08015188
 800d7b8:	0801551c 	.word	0x0801551c
 800d7bc:	080151dc 	.word	0x080151dc
 800d7c0:	08015540 	.word	0x08015540
 800d7c4:	08015564 	.word	0x08015564
 800d7c8:	08015574 	.word	0x08015574
 800d7cc:	08015584 	.word	0x08015584

0800d7d0 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800d7d0:	b590      	push	{r4, r7, lr}
 800d7d2:	b085      	sub	sp, #20
 800d7d4:	af00      	add	r7, sp, #0
 800d7d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d106      	bne.n	800d7ec <tcp_send_fin+0x1c>
 800d7de:	4b21      	ldr	r3, [pc, #132]	; (800d864 <tcp_send_fin+0x94>)
 800d7e0:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800d7e4:	4920      	ldr	r1, [pc, #128]	; (800d868 <tcp_send_fin+0x98>)
 800d7e6:	4821      	ldr	r0, [pc, #132]	; (800d86c <tcp_send_fin+0x9c>)
 800d7e8:	f003 ff8a 	bl	8011700 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d02e      	beq.n	800d852 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d7f8:	60fb      	str	r3, [r7, #12]
 800d7fa:	e002      	b.n	800d802 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800d802:	68fb      	ldr	r3, [r7, #12]
 800d804:	681b      	ldr	r3, [r3, #0]
 800d806:	2b00      	cmp	r3, #0
 800d808:	d1f8      	bne.n	800d7fc <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	68db      	ldr	r3, [r3, #12]
 800d80e:	899b      	ldrh	r3, [r3, #12]
 800d810:	b29b      	uxth	r3, r3
 800d812:	4618      	mov	r0, r3
 800d814:	f7f9 fa1a 	bl	8006c4c <lwip_htons>
 800d818:	4603      	mov	r3, r0
 800d81a:	b2db      	uxtb	r3, r3
 800d81c:	f003 0307 	and.w	r3, r3, #7
 800d820:	2b00      	cmp	r3, #0
 800d822:	d116      	bne.n	800d852 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	68db      	ldr	r3, [r3, #12]
 800d828:	899b      	ldrh	r3, [r3, #12]
 800d82a:	b29c      	uxth	r4, r3
 800d82c:	2001      	movs	r0, #1
 800d82e:	f7f9 fa0d 	bl	8006c4c <lwip_htons>
 800d832:	4603      	mov	r3, r0
 800d834:	461a      	mov	r2, r3
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	68db      	ldr	r3, [r3, #12]
 800d83a:	4322      	orrs	r2, r4
 800d83c:	b292      	uxth	r2, r2
 800d83e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	8b5b      	ldrh	r3, [r3, #26]
 800d844:	f043 0320 	orr.w	r3, r3, #32
 800d848:	b29a      	uxth	r2, r3
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800d84e:	2300      	movs	r3, #0
 800d850:	e004      	b.n	800d85c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800d852:	2101      	movs	r1, #1
 800d854:	6878      	ldr	r0, [r7, #4]
 800d856:	f000 f80b 	bl	800d870 <tcp_enqueue_flags>
 800d85a:	4603      	mov	r3, r0
}
 800d85c:	4618      	mov	r0, r3
 800d85e:	3714      	adds	r7, #20
 800d860:	46bd      	mov	sp, r7
 800d862:	bd90      	pop	{r4, r7, pc}
 800d864:	08015188 	.word	0x08015188
 800d868:	08015590 	.word	0x08015590
 800d86c:	080151dc 	.word	0x080151dc

0800d870 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800d870:	b580      	push	{r7, lr}
 800d872:	b08a      	sub	sp, #40	; 0x28
 800d874:	af02      	add	r7, sp, #8
 800d876:	6078      	str	r0, [r7, #4]
 800d878:	460b      	mov	r3, r1
 800d87a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800d87c:	2300      	movs	r3, #0
 800d87e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800d880:	2300      	movs	r3, #0
 800d882:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800d884:	78fb      	ldrb	r3, [r7, #3]
 800d886:	f003 0303 	and.w	r3, r3, #3
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d106      	bne.n	800d89c <tcp_enqueue_flags+0x2c>
 800d88e:	4b67      	ldr	r3, [pc, #412]	; (800da2c <tcp_enqueue_flags+0x1bc>)
 800d890:	f240 4211 	movw	r2, #1041	; 0x411
 800d894:	4966      	ldr	r1, [pc, #408]	; (800da30 <tcp_enqueue_flags+0x1c0>)
 800d896:	4867      	ldr	r0, [pc, #412]	; (800da34 <tcp_enqueue_flags+0x1c4>)
 800d898:	f003 ff32 	bl	8011700 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d106      	bne.n	800d8b0 <tcp_enqueue_flags+0x40>
 800d8a2:	4b62      	ldr	r3, [pc, #392]	; (800da2c <tcp_enqueue_flags+0x1bc>)
 800d8a4:	f240 4213 	movw	r2, #1043	; 0x413
 800d8a8:	4963      	ldr	r1, [pc, #396]	; (800da38 <tcp_enqueue_flags+0x1c8>)
 800d8aa:	4862      	ldr	r0, [pc, #392]	; (800da34 <tcp_enqueue_flags+0x1c4>)
 800d8ac:	f003 ff28 	bl	8011700 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800d8b0:	78fb      	ldrb	r3, [r7, #3]
 800d8b2:	f003 0302 	and.w	r3, r3, #2
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d001      	beq.n	800d8be <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800d8ba:	2301      	movs	r3, #1
 800d8bc:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800d8be:	7ffb      	ldrb	r3, [r7, #31]
 800d8c0:	009b      	lsls	r3, r3, #2
 800d8c2:	b2db      	uxtb	r3, r3
 800d8c4:	f003 0304 	and.w	r3, r3, #4
 800d8c8:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800d8ca:	7dfb      	ldrb	r3, [r7, #23]
 800d8cc:	b29b      	uxth	r3, r3
 800d8ce:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d8d2:	4619      	mov	r1, r3
 800d8d4:	2036      	movs	r0, #54	; 0x36
 800d8d6:	f7fa fa67 	bl	8007da8 <pbuf_alloc>
 800d8da:	6138      	str	r0, [r7, #16]
 800d8dc:	693b      	ldr	r3, [r7, #16]
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d109      	bne.n	800d8f6 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	8b5b      	ldrh	r3, [r3, #26]
 800d8e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d8ea:	b29a      	uxth	r2, r3
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800d8f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d8f4:	e095      	b.n	800da22 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800d8f6:	693b      	ldr	r3, [r7, #16]
 800d8f8:	895a      	ldrh	r2, [r3, #10]
 800d8fa:	7dfb      	ldrb	r3, [r7, #23]
 800d8fc:	b29b      	uxth	r3, r3
 800d8fe:	429a      	cmp	r2, r3
 800d900:	d206      	bcs.n	800d910 <tcp_enqueue_flags+0xa0>
 800d902:	4b4a      	ldr	r3, [pc, #296]	; (800da2c <tcp_enqueue_flags+0x1bc>)
 800d904:	f240 4239 	movw	r2, #1081	; 0x439
 800d908:	494c      	ldr	r1, [pc, #304]	; (800da3c <tcp_enqueue_flags+0x1cc>)
 800d90a:	484a      	ldr	r0, [pc, #296]	; (800da34 <tcp_enqueue_flags+0x1c4>)
 800d90c:	f003 fef8 	bl	8011700 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800d914:	78fa      	ldrb	r2, [r7, #3]
 800d916:	7ffb      	ldrb	r3, [r7, #31]
 800d918:	9300      	str	r3, [sp, #0]
 800d91a:	460b      	mov	r3, r1
 800d91c:	6939      	ldr	r1, [r7, #16]
 800d91e:	6878      	ldr	r0, [r7, #4]
 800d920:	f7ff f918 	bl	800cb54 <tcp_create_segment>
 800d924:	60f8      	str	r0, [r7, #12]
 800d926:	68fb      	ldr	r3, [r7, #12]
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d109      	bne.n	800d940 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	8b5b      	ldrh	r3, [r3, #26]
 800d930:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d934:	b29a      	uxth	r2, r3
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800d93a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d93e:	e070      	b.n	800da22 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800d940:	68fb      	ldr	r3, [r7, #12]
 800d942:	68db      	ldr	r3, [r3, #12]
 800d944:	f003 0303 	and.w	r3, r3, #3
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d006      	beq.n	800d95a <tcp_enqueue_flags+0xea>
 800d94c:	4b37      	ldr	r3, [pc, #220]	; (800da2c <tcp_enqueue_flags+0x1bc>)
 800d94e:	f240 4242 	movw	r2, #1090	; 0x442
 800d952:	493b      	ldr	r1, [pc, #236]	; (800da40 <tcp_enqueue_flags+0x1d0>)
 800d954:	4837      	ldr	r0, [pc, #220]	; (800da34 <tcp_enqueue_flags+0x1c4>)
 800d956:	f003 fed3 	bl	8011700 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	891b      	ldrh	r3, [r3, #8]
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d006      	beq.n	800d970 <tcp_enqueue_flags+0x100>
 800d962:	4b32      	ldr	r3, [pc, #200]	; (800da2c <tcp_enqueue_flags+0x1bc>)
 800d964:	f240 4243 	movw	r2, #1091	; 0x443
 800d968:	4936      	ldr	r1, [pc, #216]	; (800da44 <tcp_enqueue_flags+0x1d4>)
 800d96a:	4832      	ldr	r0, [pc, #200]	; (800da34 <tcp_enqueue_flags+0x1c4>)
 800d96c:	f003 fec8 	bl	8011700 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d974:	2b00      	cmp	r3, #0
 800d976:	d103      	bne.n	800d980 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	68fa      	ldr	r2, [r7, #12]
 800d97c:	66da      	str	r2, [r3, #108]	; 0x6c
 800d97e:	e00d      	b.n	800d99c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d984:	61bb      	str	r3, [r7, #24]
 800d986:	e002      	b.n	800d98e <tcp_enqueue_flags+0x11e>
 800d988:	69bb      	ldr	r3, [r7, #24]
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	61bb      	str	r3, [r7, #24]
 800d98e:	69bb      	ldr	r3, [r7, #24]
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	2b00      	cmp	r3, #0
 800d994:	d1f8      	bne.n	800d988 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800d996:	69bb      	ldr	r3, [r7, #24]
 800d998:	68fa      	ldr	r2, [r7, #12]
 800d99a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	2200      	movs	r2, #0
 800d9a0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800d9a4:	78fb      	ldrb	r3, [r7, #3]
 800d9a6:	f003 0302 	and.w	r3, r3, #2
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d104      	bne.n	800d9b8 <tcp_enqueue_flags+0x148>
 800d9ae:	78fb      	ldrb	r3, [r7, #3]
 800d9b0:	f003 0301 	and.w	r3, r3, #1
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d004      	beq.n	800d9c2 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d9bc:	1c5a      	adds	r2, r3, #1
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800d9c2:	78fb      	ldrb	r3, [r7, #3]
 800d9c4:	f003 0301 	and.w	r3, r3, #1
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d006      	beq.n	800d9da <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	8b5b      	ldrh	r3, [r3, #26]
 800d9d0:	f043 0320 	orr.w	r3, r3, #32
 800d9d4:	b29a      	uxth	r2, r3
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800d9da:	68fb      	ldr	r3, [r7, #12]
 800d9dc:	685b      	ldr	r3, [r3, #4]
 800d9de:	4618      	mov	r0, r3
 800d9e0:	f7fa fd4e 	bl	8008480 <pbuf_clen>
 800d9e4:	4603      	mov	r3, r0
 800d9e6:	461a      	mov	r2, r3
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d9ee:	4413      	add	r3, r2
 800d9f0:	b29a      	uxth	r2, r3
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d00e      	beq.n	800da20 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da06:	2b00      	cmp	r3, #0
 800da08:	d10a      	bne.n	800da20 <tcp_enqueue_flags+0x1b0>
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d106      	bne.n	800da20 <tcp_enqueue_flags+0x1b0>
 800da12:	4b06      	ldr	r3, [pc, #24]	; (800da2c <tcp_enqueue_flags+0x1bc>)
 800da14:	f240 4265 	movw	r2, #1125	; 0x465
 800da18:	490b      	ldr	r1, [pc, #44]	; (800da48 <tcp_enqueue_flags+0x1d8>)
 800da1a:	4806      	ldr	r0, [pc, #24]	; (800da34 <tcp_enqueue_flags+0x1c4>)
 800da1c:	f003 fe70 	bl	8011700 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800da20:	2300      	movs	r3, #0
}
 800da22:	4618      	mov	r0, r3
 800da24:	3720      	adds	r7, #32
 800da26:	46bd      	mov	sp, r7
 800da28:	bd80      	pop	{r7, pc}
 800da2a:	bf00      	nop
 800da2c:	08015188 	.word	0x08015188
 800da30:	080155ac 	.word	0x080155ac
 800da34:	080151dc 	.word	0x080151dc
 800da38:	08015604 	.word	0x08015604
 800da3c:	08015624 	.word	0x08015624
 800da40:	08015660 	.word	0x08015660
 800da44:	08015678 	.word	0x08015678
 800da48:	080156a4 	.word	0x080156a4

0800da4c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800da4c:	b5b0      	push	{r4, r5, r7, lr}
 800da4e:	b08a      	sub	sp, #40	; 0x28
 800da50:	af00      	add	r7, sp, #0
 800da52:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	2b00      	cmp	r3, #0
 800da58:	d106      	bne.n	800da68 <tcp_output+0x1c>
 800da5a:	4b9e      	ldr	r3, [pc, #632]	; (800dcd4 <tcp_output+0x288>)
 800da5c:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800da60:	499d      	ldr	r1, [pc, #628]	; (800dcd8 <tcp_output+0x28c>)
 800da62:	489e      	ldr	r0, [pc, #632]	; (800dcdc <tcp_output+0x290>)
 800da64:	f003 fe4c 	bl	8011700 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	7d1b      	ldrb	r3, [r3, #20]
 800da6c:	2b01      	cmp	r3, #1
 800da6e:	d106      	bne.n	800da7e <tcp_output+0x32>
 800da70:	4b98      	ldr	r3, [pc, #608]	; (800dcd4 <tcp_output+0x288>)
 800da72:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800da76:	499a      	ldr	r1, [pc, #616]	; (800dce0 <tcp_output+0x294>)
 800da78:	4898      	ldr	r0, [pc, #608]	; (800dcdc <tcp_output+0x290>)
 800da7a:	f003 fe41 	bl	8011700 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800da7e:	4b99      	ldr	r3, [pc, #612]	; (800dce4 <tcp_output+0x298>)
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	687a      	ldr	r2, [r7, #4]
 800da84:	429a      	cmp	r2, r3
 800da86:	d101      	bne.n	800da8c <tcp_output+0x40>
    return ERR_OK;
 800da88:	2300      	movs	r3, #0
 800da8a:	e1ce      	b.n	800de2a <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800da98:	4293      	cmp	r3, r2
 800da9a:	bf28      	it	cs
 800da9c:	4613      	movcs	r3, r2
 800da9e:	b29b      	uxth	r3, r3
 800daa0:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800daa6:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800daa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d10b      	bne.n	800dac6 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	8b5b      	ldrh	r3, [r3, #26]
 800dab2:	f003 0302 	and.w	r3, r3, #2
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	f000 81aa 	beq.w	800de10 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800dabc:	6878      	ldr	r0, [r7, #4]
 800dabe:	f000 fdcb 	bl	800e658 <tcp_send_empty_ack>
 800dac2:	4603      	mov	r3, r0
 800dac4:	e1b1      	b.n	800de2a <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800dac6:	6879      	ldr	r1, [r7, #4]
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	3304      	adds	r3, #4
 800dacc:	461a      	mov	r2, r3
 800dace:	6878      	ldr	r0, [r7, #4]
 800dad0:	f7ff f824 	bl	800cb1c <tcp_route>
 800dad4:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800dad6:	697b      	ldr	r3, [r7, #20]
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d102      	bne.n	800dae2 <tcp_output+0x96>
    return ERR_RTE;
 800dadc:	f06f 0303 	mvn.w	r3, #3
 800dae0:	e1a3      	b.n	800de2a <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d003      	beq.n	800daf0 <tcp_output+0xa4>
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	2b00      	cmp	r3, #0
 800daee:	d111      	bne.n	800db14 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800daf0:	697b      	ldr	r3, [r7, #20]
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d002      	beq.n	800dafc <tcp_output+0xb0>
 800daf6:	697b      	ldr	r3, [r7, #20]
 800daf8:	3304      	adds	r3, #4
 800dafa:	e000      	b.n	800dafe <tcp_output+0xb2>
 800dafc:	2300      	movs	r3, #0
 800dafe:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800db00:	693b      	ldr	r3, [r7, #16]
 800db02:	2b00      	cmp	r3, #0
 800db04:	d102      	bne.n	800db0c <tcp_output+0xc0>
      return ERR_RTE;
 800db06:	f06f 0303 	mvn.w	r3, #3
 800db0a:	e18e      	b.n	800de2a <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800db0c:	693b      	ldr	r3, [r7, #16]
 800db0e:	681a      	ldr	r2, [r3, #0]
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800db14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db16:	68db      	ldr	r3, [r3, #12]
 800db18:	685b      	ldr	r3, [r3, #4]
 800db1a:	4618      	mov	r0, r3
 800db1c:	f7f9 f8ab 	bl	8006c76 <lwip_htonl>
 800db20:	4602      	mov	r2, r0
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800db26:	1ad3      	subs	r3, r2, r3
 800db28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800db2a:	8912      	ldrh	r2, [r2, #8]
 800db2c:	4413      	add	r3, r2
 800db2e:	69ba      	ldr	r2, [r7, #24]
 800db30:	429a      	cmp	r2, r3
 800db32:	d227      	bcs.n	800db84 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800db3a:	461a      	mov	r2, r3
 800db3c:	69bb      	ldr	r3, [r7, #24]
 800db3e:	4293      	cmp	r3, r2
 800db40:	d114      	bne.n	800db6c <tcp_output+0x120>
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db46:	2b00      	cmp	r3, #0
 800db48:	d110      	bne.n	800db6c <tcp_output+0x120>
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800db50:	2b00      	cmp	r3, #0
 800db52:	d10b      	bne.n	800db6c <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	2200      	movs	r2, #0
 800db58:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	2201      	movs	r2, #1
 800db60:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	2200      	movs	r2, #0
 800db68:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	8b5b      	ldrh	r3, [r3, #26]
 800db70:	f003 0302 	and.w	r3, r3, #2
 800db74:	2b00      	cmp	r3, #0
 800db76:	f000 814d 	beq.w	800de14 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800db7a:	6878      	ldr	r0, [r7, #4]
 800db7c:	f000 fd6c 	bl	800e658 <tcp_send_empty_ack>
 800db80:	4603      	mov	r3, r0
 800db82:	e152      	b.n	800de2a <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	2200      	movs	r2, #0
 800db88:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db90:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800db92:	6a3b      	ldr	r3, [r7, #32]
 800db94:	2b00      	cmp	r3, #0
 800db96:	f000 811c 	beq.w	800ddd2 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800db9a:	e002      	b.n	800dba2 <tcp_output+0x156>
 800db9c:	6a3b      	ldr	r3, [r7, #32]
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	623b      	str	r3, [r7, #32]
 800dba2:	6a3b      	ldr	r3, [r7, #32]
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d1f8      	bne.n	800db9c <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800dbaa:	e112      	b.n	800ddd2 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800dbac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbae:	68db      	ldr	r3, [r3, #12]
 800dbb0:	899b      	ldrh	r3, [r3, #12]
 800dbb2:	b29b      	uxth	r3, r3
 800dbb4:	4618      	mov	r0, r3
 800dbb6:	f7f9 f849 	bl	8006c4c <lwip_htons>
 800dbba:	4603      	mov	r3, r0
 800dbbc:	b2db      	uxtb	r3, r3
 800dbbe:	f003 0304 	and.w	r3, r3, #4
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d006      	beq.n	800dbd4 <tcp_output+0x188>
 800dbc6:	4b43      	ldr	r3, [pc, #268]	; (800dcd4 <tcp_output+0x288>)
 800dbc8:	f240 5236 	movw	r2, #1334	; 0x536
 800dbcc:	4946      	ldr	r1, [pc, #280]	; (800dce8 <tcp_output+0x29c>)
 800dbce:	4843      	ldr	r0, [pc, #268]	; (800dcdc <tcp_output+0x290>)
 800dbd0:	f003 fd96 	bl	8011700 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d01f      	beq.n	800dc1c <tcp_output+0x1d0>
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	8b5b      	ldrh	r3, [r3, #26]
 800dbe0:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d119      	bne.n	800dc1c <tcp_output+0x1d0>
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d00b      	beq.n	800dc08 <tcp_output+0x1bc>
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d110      	bne.n	800dc1c <tcp_output+0x1d0>
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dbfe:	891a      	ldrh	r2, [r3, #8]
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dc04:	429a      	cmp	r2, r3
 800dc06:	d209      	bcs.n	800dc1c <tcp_output+0x1d0>
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d004      	beq.n	800dc1c <tcp_output+0x1d0>
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800dc18:	2b08      	cmp	r3, #8
 800dc1a:	d901      	bls.n	800dc20 <tcp_output+0x1d4>
 800dc1c:	2301      	movs	r3, #1
 800dc1e:	e000      	b.n	800dc22 <tcp_output+0x1d6>
 800dc20:	2300      	movs	r3, #0
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	d106      	bne.n	800dc34 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	8b5b      	ldrh	r3, [r3, #26]
 800dc2a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	f000 80e4 	beq.w	800ddfc <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	7d1b      	ldrb	r3, [r3, #20]
 800dc38:	2b02      	cmp	r3, #2
 800dc3a:	d00d      	beq.n	800dc58 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800dc3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc3e:	68db      	ldr	r3, [r3, #12]
 800dc40:	899b      	ldrh	r3, [r3, #12]
 800dc42:	b29c      	uxth	r4, r3
 800dc44:	2010      	movs	r0, #16
 800dc46:	f7f9 f801 	bl	8006c4c <lwip_htons>
 800dc4a:	4603      	mov	r3, r0
 800dc4c:	461a      	mov	r2, r3
 800dc4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc50:	68db      	ldr	r3, [r3, #12]
 800dc52:	4322      	orrs	r2, r4
 800dc54:	b292      	uxth	r2, r2
 800dc56:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800dc58:	697a      	ldr	r2, [r7, #20]
 800dc5a:	6879      	ldr	r1, [r7, #4]
 800dc5c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dc5e:	f000 f909 	bl	800de74 <tcp_output_segment>
 800dc62:	4603      	mov	r3, r0
 800dc64:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800dc66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d009      	beq.n	800dc82 <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	8b5b      	ldrh	r3, [r3, #26]
 800dc72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dc76:	b29a      	uxth	r2, r3
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	835a      	strh	r2, [r3, #26]
      return err;
 800dc7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dc80:	e0d3      	b.n	800de2a <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800dc82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc84:	681a      	ldr	r2, [r3, #0]
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	7d1b      	ldrb	r3, [r3, #20]
 800dc8e:	2b02      	cmp	r3, #2
 800dc90:	d006      	beq.n	800dca0 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	8b5b      	ldrh	r3, [r3, #26]
 800dc96:	f023 0303 	bic.w	r3, r3, #3
 800dc9a:	b29a      	uxth	r2, r3
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800dca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dca2:	68db      	ldr	r3, [r3, #12]
 800dca4:	685b      	ldr	r3, [r3, #4]
 800dca6:	4618      	mov	r0, r3
 800dca8:	f7f8 ffe5 	bl	8006c76 <lwip_htonl>
 800dcac:	4604      	mov	r4, r0
 800dcae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcb0:	891b      	ldrh	r3, [r3, #8]
 800dcb2:	461d      	mov	r5, r3
 800dcb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcb6:	68db      	ldr	r3, [r3, #12]
 800dcb8:	899b      	ldrh	r3, [r3, #12]
 800dcba:	b29b      	uxth	r3, r3
 800dcbc:	4618      	mov	r0, r3
 800dcbe:	f7f8 ffc5 	bl	8006c4c <lwip_htons>
 800dcc2:	4603      	mov	r3, r0
 800dcc4:	b2db      	uxtb	r3, r3
 800dcc6:	f003 0303 	and.w	r3, r3, #3
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	d00e      	beq.n	800dcec <tcp_output+0x2a0>
 800dcce:	2301      	movs	r3, #1
 800dcd0:	e00d      	b.n	800dcee <tcp_output+0x2a2>
 800dcd2:	bf00      	nop
 800dcd4:	08015188 	.word	0x08015188
 800dcd8:	080156cc 	.word	0x080156cc
 800dcdc:	080151dc 	.word	0x080151dc
 800dce0:	080156e4 	.word	0x080156e4
 800dce4:	2000d79c 	.word	0x2000d79c
 800dce8:	0801570c 	.word	0x0801570c
 800dcec:	2300      	movs	r3, #0
 800dcee:	442b      	add	r3, r5
 800dcf0:	4423      	add	r3, r4
 800dcf2:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800dcf8:	68bb      	ldr	r3, [r7, #8]
 800dcfa:	1ad3      	subs	r3, r2, r3
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	da02      	bge.n	800dd06 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	68ba      	ldr	r2, [r7, #8]
 800dd04:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800dd06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd08:	891b      	ldrh	r3, [r3, #8]
 800dd0a:	461c      	mov	r4, r3
 800dd0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd0e:	68db      	ldr	r3, [r3, #12]
 800dd10:	899b      	ldrh	r3, [r3, #12]
 800dd12:	b29b      	uxth	r3, r3
 800dd14:	4618      	mov	r0, r3
 800dd16:	f7f8 ff99 	bl	8006c4c <lwip_htons>
 800dd1a:	4603      	mov	r3, r0
 800dd1c:	b2db      	uxtb	r3, r3
 800dd1e:	f003 0303 	and.w	r3, r3, #3
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d001      	beq.n	800dd2a <tcp_output+0x2de>
 800dd26:	2301      	movs	r3, #1
 800dd28:	e000      	b.n	800dd2c <tcp_output+0x2e0>
 800dd2a:	2300      	movs	r3, #0
 800dd2c:	4423      	add	r3, r4
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d049      	beq.n	800ddc6 <tcp_output+0x37a>
      seg->next = NULL;
 800dd32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd34:	2200      	movs	r2, #0
 800dd36:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d105      	bne.n	800dd4c <tcp_output+0x300>
        pcb->unacked = seg;
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dd44:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800dd46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd48:	623b      	str	r3, [r7, #32]
 800dd4a:	e03f      	b.n	800ddcc <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800dd4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd4e:	68db      	ldr	r3, [r3, #12]
 800dd50:	685b      	ldr	r3, [r3, #4]
 800dd52:	4618      	mov	r0, r3
 800dd54:	f7f8 ff8f 	bl	8006c76 <lwip_htonl>
 800dd58:	4604      	mov	r4, r0
 800dd5a:	6a3b      	ldr	r3, [r7, #32]
 800dd5c:	68db      	ldr	r3, [r3, #12]
 800dd5e:	685b      	ldr	r3, [r3, #4]
 800dd60:	4618      	mov	r0, r3
 800dd62:	f7f8 ff88 	bl	8006c76 <lwip_htonl>
 800dd66:	4603      	mov	r3, r0
 800dd68:	1ae3      	subs	r3, r4, r3
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	da24      	bge.n	800ddb8 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	3370      	adds	r3, #112	; 0x70
 800dd72:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800dd74:	e002      	b.n	800dd7c <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800dd76:	69fb      	ldr	r3, [r7, #28]
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800dd7c:	69fb      	ldr	r3, [r7, #28]
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d011      	beq.n	800dda8 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800dd84:	69fb      	ldr	r3, [r7, #28]
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	68db      	ldr	r3, [r3, #12]
 800dd8a:	685b      	ldr	r3, [r3, #4]
 800dd8c:	4618      	mov	r0, r3
 800dd8e:	f7f8 ff72 	bl	8006c76 <lwip_htonl>
 800dd92:	4604      	mov	r4, r0
 800dd94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd96:	68db      	ldr	r3, [r3, #12]
 800dd98:	685b      	ldr	r3, [r3, #4]
 800dd9a:	4618      	mov	r0, r3
 800dd9c:	f7f8 ff6b 	bl	8006c76 <lwip_htonl>
 800dda0:	4603      	mov	r3, r0
 800dda2:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	dbe6      	blt.n	800dd76 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800dda8:	69fb      	ldr	r3, [r7, #28]
 800ddaa:	681a      	ldr	r2, [r3, #0]
 800ddac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddae:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800ddb0:	69fb      	ldr	r3, [r7, #28]
 800ddb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ddb4:	601a      	str	r2, [r3, #0]
 800ddb6:	e009      	b.n	800ddcc <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800ddb8:	6a3b      	ldr	r3, [r7, #32]
 800ddba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ddbc:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800ddbe:	6a3b      	ldr	r3, [r7, #32]
 800ddc0:	681b      	ldr	r3, [r3, #0]
 800ddc2:	623b      	str	r3, [r7, #32]
 800ddc4:	e002      	b.n	800ddcc <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800ddc6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ddc8:	f7fb feff 	bl	8009bca <tcp_seg_free>
    }
    seg = pcb->unsent;
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ddd0:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800ddd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	d012      	beq.n	800ddfe <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800ddd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddda:	68db      	ldr	r3, [r3, #12]
 800dddc:	685b      	ldr	r3, [r3, #4]
 800ddde:	4618      	mov	r0, r3
 800dde0:	f7f8 ff49 	bl	8006c76 <lwip_htonl>
 800dde4:	4602      	mov	r2, r0
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ddea:	1ad3      	subs	r3, r2, r3
 800ddec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ddee:	8912      	ldrh	r2, [r2, #8]
 800ddf0:	4413      	add	r3, r2
  while (seg != NULL &&
 800ddf2:	69ba      	ldr	r2, [r7, #24]
 800ddf4:	429a      	cmp	r2, r3
 800ddf6:	f4bf aed9 	bcs.w	800dbac <tcp_output+0x160>
 800ddfa:	e000      	b.n	800ddfe <tcp_output+0x3b2>
      break;
 800ddfc:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800de02:	2b00      	cmp	r3, #0
 800de04:	d108      	bne.n	800de18 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	2200      	movs	r2, #0
 800de0a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800de0e:	e004      	b.n	800de1a <tcp_output+0x3ce>
    goto output_done;
 800de10:	bf00      	nop
 800de12:	e002      	b.n	800de1a <tcp_output+0x3ce>
    goto output_done;
 800de14:	bf00      	nop
 800de16:	e000      	b.n	800de1a <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800de18:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	8b5b      	ldrh	r3, [r3, #26]
 800de1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800de22:	b29a      	uxth	r2, r3
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800de28:	2300      	movs	r3, #0
}
 800de2a:	4618      	mov	r0, r3
 800de2c:	3728      	adds	r7, #40	; 0x28
 800de2e:	46bd      	mov	sp, r7
 800de30:	bdb0      	pop	{r4, r5, r7, pc}
 800de32:	bf00      	nop

0800de34 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800de34:	b580      	push	{r7, lr}
 800de36:	b082      	sub	sp, #8
 800de38:	af00      	add	r7, sp, #0
 800de3a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d106      	bne.n	800de50 <tcp_output_segment_busy+0x1c>
 800de42:	4b09      	ldr	r3, [pc, #36]	; (800de68 <tcp_output_segment_busy+0x34>)
 800de44:	f240 529a 	movw	r2, #1434	; 0x59a
 800de48:	4908      	ldr	r1, [pc, #32]	; (800de6c <tcp_output_segment_busy+0x38>)
 800de4a:	4809      	ldr	r0, [pc, #36]	; (800de70 <tcp_output_segment_busy+0x3c>)
 800de4c:	f003 fc58 	bl	8011700 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	685b      	ldr	r3, [r3, #4]
 800de54:	7b9b      	ldrb	r3, [r3, #14]
 800de56:	2b01      	cmp	r3, #1
 800de58:	d001      	beq.n	800de5e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800de5a:	2301      	movs	r3, #1
 800de5c:	e000      	b.n	800de60 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800de5e:	2300      	movs	r3, #0
}
 800de60:	4618      	mov	r0, r3
 800de62:	3708      	adds	r7, #8
 800de64:	46bd      	mov	sp, r7
 800de66:	bd80      	pop	{r7, pc}
 800de68:	08015188 	.word	0x08015188
 800de6c:	08015724 	.word	0x08015724
 800de70:	080151dc 	.word	0x080151dc

0800de74 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800de74:	b5b0      	push	{r4, r5, r7, lr}
 800de76:	b08c      	sub	sp, #48	; 0x30
 800de78:	af04      	add	r7, sp, #16
 800de7a:	60f8      	str	r0, [r7, #12]
 800de7c:	60b9      	str	r1, [r7, #8]
 800de7e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	2b00      	cmp	r3, #0
 800de84:	d106      	bne.n	800de94 <tcp_output_segment+0x20>
 800de86:	4b63      	ldr	r3, [pc, #396]	; (800e014 <tcp_output_segment+0x1a0>)
 800de88:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800de8c:	4962      	ldr	r1, [pc, #392]	; (800e018 <tcp_output_segment+0x1a4>)
 800de8e:	4863      	ldr	r0, [pc, #396]	; (800e01c <tcp_output_segment+0x1a8>)
 800de90:	f003 fc36 	bl	8011700 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800de94:	68bb      	ldr	r3, [r7, #8]
 800de96:	2b00      	cmp	r3, #0
 800de98:	d106      	bne.n	800dea8 <tcp_output_segment+0x34>
 800de9a:	4b5e      	ldr	r3, [pc, #376]	; (800e014 <tcp_output_segment+0x1a0>)
 800de9c:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800dea0:	495f      	ldr	r1, [pc, #380]	; (800e020 <tcp_output_segment+0x1ac>)
 800dea2:	485e      	ldr	r0, [pc, #376]	; (800e01c <tcp_output_segment+0x1a8>)
 800dea4:	f003 fc2c 	bl	8011700 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d106      	bne.n	800debc <tcp_output_segment+0x48>
 800deae:	4b59      	ldr	r3, [pc, #356]	; (800e014 <tcp_output_segment+0x1a0>)
 800deb0:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800deb4:	495b      	ldr	r1, [pc, #364]	; (800e024 <tcp_output_segment+0x1b0>)
 800deb6:	4859      	ldr	r0, [pc, #356]	; (800e01c <tcp_output_segment+0x1a8>)
 800deb8:	f003 fc22 	bl	8011700 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800debc:	68f8      	ldr	r0, [r7, #12]
 800debe:	f7ff ffb9 	bl	800de34 <tcp_output_segment_busy>
 800dec2:	4603      	mov	r3, r0
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d001      	beq.n	800decc <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800dec8:	2300      	movs	r3, #0
 800deca:	e09f      	b.n	800e00c <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800decc:	68bb      	ldr	r3, [r7, #8]
 800dece:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ded0:	68fb      	ldr	r3, [r7, #12]
 800ded2:	68dc      	ldr	r4, [r3, #12]
 800ded4:	4610      	mov	r0, r2
 800ded6:	f7f8 fece 	bl	8006c76 <lwip_htonl>
 800deda:	4603      	mov	r3, r0
 800dedc:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800dede:	68bb      	ldr	r3, [r7, #8]
 800dee0:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	68dc      	ldr	r4, [r3, #12]
 800dee6:	4610      	mov	r0, r2
 800dee8:	f7f8 feb0 	bl	8006c4c <lwip_htons>
 800deec:	4603      	mov	r3, r0
 800deee:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800def0:	68bb      	ldr	r3, [r7, #8]
 800def2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800def4:	68ba      	ldr	r2, [r7, #8]
 800def6:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800def8:	441a      	add	r2, r3
 800defa:	68bb      	ldr	r3, [r7, #8]
 800defc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	68db      	ldr	r3, [r3, #12]
 800df02:	3314      	adds	r3, #20
 800df04:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800df06:	68fb      	ldr	r3, [r7, #12]
 800df08:	7a9b      	ldrb	r3, [r3, #10]
 800df0a:	f003 0301 	and.w	r3, r3, #1
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d015      	beq.n	800df3e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800df12:	68bb      	ldr	r3, [r7, #8]
 800df14:	3304      	adds	r3, #4
 800df16:	461a      	mov	r2, r3
 800df18:	6879      	ldr	r1, [r7, #4]
 800df1a:	f44f 7006 	mov.w	r0, #536	; 0x218
 800df1e:	f7fc fa37 	bl	800a390 <tcp_eff_send_mss_netif>
 800df22:	4603      	mov	r3, r0
 800df24:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800df26:	8b7b      	ldrh	r3, [r7, #26]
 800df28:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800df2c:	4618      	mov	r0, r3
 800df2e:	f7f8 fea2 	bl	8006c76 <lwip_htonl>
 800df32:	4602      	mov	r2, r0
 800df34:	69fb      	ldr	r3, [r7, #28]
 800df36:	601a      	str	r2, [r3, #0]
    opts += 1;
 800df38:	69fb      	ldr	r3, [r7, #28]
 800df3a:	3304      	adds	r3, #4
 800df3c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800df3e:	68bb      	ldr	r3, [r7, #8]
 800df40:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800df44:	2b00      	cmp	r3, #0
 800df46:	da02      	bge.n	800df4e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800df48:	68bb      	ldr	r3, [r7, #8]
 800df4a:	2200      	movs	r2, #0
 800df4c:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800df4e:	68bb      	ldr	r3, [r7, #8]
 800df50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df52:	2b00      	cmp	r3, #0
 800df54:	d10c      	bne.n	800df70 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800df56:	4b34      	ldr	r3, [pc, #208]	; (800e028 <tcp_output_segment+0x1b4>)
 800df58:	681a      	ldr	r2, [r3, #0]
 800df5a:	68bb      	ldr	r3, [r7, #8]
 800df5c:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	68db      	ldr	r3, [r3, #12]
 800df62:	685b      	ldr	r3, [r3, #4]
 800df64:	4618      	mov	r0, r3
 800df66:	f7f8 fe86 	bl	8006c76 <lwip_htonl>
 800df6a:	4602      	mov	r2, r0
 800df6c:	68bb      	ldr	r3, [r7, #8]
 800df6e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800df70:	68fb      	ldr	r3, [r7, #12]
 800df72:	68da      	ldr	r2, [r3, #12]
 800df74:	68fb      	ldr	r3, [r7, #12]
 800df76:	685b      	ldr	r3, [r3, #4]
 800df78:	685b      	ldr	r3, [r3, #4]
 800df7a:	1ad3      	subs	r3, r2, r3
 800df7c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800df7e:	68fb      	ldr	r3, [r7, #12]
 800df80:	685b      	ldr	r3, [r3, #4]
 800df82:	8959      	ldrh	r1, [r3, #10]
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	685b      	ldr	r3, [r3, #4]
 800df88:	8b3a      	ldrh	r2, [r7, #24]
 800df8a:	1a8a      	subs	r2, r1, r2
 800df8c:	b292      	uxth	r2, r2
 800df8e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800df90:	68fb      	ldr	r3, [r7, #12]
 800df92:	685b      	ldr	r3, [r3, #4]
 800df94:	8919      	ldrh	r1, [r3, #8]
 800df96:	68fb      	ldr	r3, [r7, #12]
 800df98:	685b      	ldr	r3, [r3, #4]
 800df9a:	8b3a      	ldrh	r2, [r7, #24]
 800df9c:	1a8a      	subs	r2, r1, r2
 800df9e:	b292      	uxth	r2, r2
 800dfa0:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	685b      	ldr	r3, [r3, #4]
 800dfa6:	68fa      	ldr	r2, [r7, #12]
 800dfa8:	68d2      	ldr	r2, [r2, #12]
 800dfaa:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	68db      	ldr	r3, [r3, #12]
 800dfb0:	2200      	movs	r2, #0
 800dfb2:	741a      	strb	r2, [r3, #16]
 800dfb4:	2200      	movs	r2, #0
 800dfb6:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800dfb8:	68fb      	ldr	r3, [r7, #12]
 800dfba:	68db      	ldr	r3, [r3, #12]
 800dfbc:	f103 0214 	add.w	r2, r3, #20
 800dfc0:	68fb      	ldr	r3, [r7, #12]
 800dfc2:	7a9b      	ldrb	r3, [r3, #10]
 800dfc4:	009b      	lsls	r3, r3, #2
 800dfc6:	f003 0304 	and.w	r3, r3, #4
 800dfca:	4413      	add	r3, r2
 800dfcc:	69fa      	ldr	r2, [r7, #28]
 800dfce:	429a      	cmp	r2, r3
 800dfd0:	d006      	beq.n	800dfe0 <tcp_output_segment+0x16c>
 800dfd2:	4b10      	ldr	r3, [pc, #64]	; (800e014 <tcp_output_segment+0x1a0>)
 800dfd4:	f240 621c 	movw	r2, #1564	; 0x61c
 800dfd8:	4914      	ldr	r1, [pc, #80]	; (800e02c <tcp_output_segment+0x1b8>)
 800dfda:	4810      	ldr	r0, [pc, #64]	; (800e01c <tcp_output_segment+0x1a8>)
 800dfdc:	f003 fb90 	bl	8011700 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	6858      	ldr	r0, [r3, #4]
 800dfe4:	68b9      	ldr	r1, [r7, #8]
 800dfe6:	68bb      	ldr	r3, [r7, #8]
 800dfe8:	1d1c      	adds	r4, r3, #4
 800dfea:	68bb      	ldr	r3, [r7, #8]
 800dfec:	7add      	ldrb	r5, [r3, #11]
 800dfee:	68bb      	ldr	r3, [r7, #8]
 800dff0:	7a9b      	ldrb	r3, [r3, #10]
 800dff2:	687a      	ldr	r2, [r7, #4]
 800dff4:	9202      	str	r2, [sp, #8]
 800dff6:	2206      	movs	r2, #6
 800dff8:	9201      	str	r2, [sp, #4]
 800dffa:	9300      	str	r3, [sp, #0]
 800dffc:	462b      	mov	r3, r5
 800dffe:	4622      	mov	r2, r4
 800e000:	f002 fa36 	bl	8010470 <ip4_output_if>
 800e004:	4603      	mov	r3, r0
 800e006:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800e008:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e00c:	4618      	mov	r0, r3
 800e00e:	3720      	adds	r7, #32
 800e010:	46bd      	mov	sp, r7
 800e012:	bdb0      	pop	{r4, r5, r7, pc}
 800e014:	08015188 	.word	0x08015188
 800e018:	0801574c 	.word	0x0801574c
 800e01c:	080151dc 	.word	0x080151dc
 800e020:	0801576c 	.word	0x0801576c
 800e024:	0801578c 	.word	0x0801578c
 800e028:	2000d78c 	.word	0x2000d78c
 800e02c:	080157b0 	.word	0x080157b0

0800e030 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800e030:	b5b0      	push	{r4, r5, r7, lr}
 800e032:	b084      	sub	sp, #16
 800e034:	af00      	add	r7, sp, #0
 800e036:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d106      	bne.n	800e04c <tcp_rexmit_rto_prepare+0x1c>
 800e03e:	4b31      	ldr	r3, [pc, #196]	; (800e104 <tcp_rexmit_rto_prepare+0xd4>)
 800e040:	f240 6263 	movw	r2, #1635	; 0x663
 800e044:	4930      	ldr	r1, [pc, #192]	; (800e108 <tcp_rexmit_rto_prepare+0xd8>)
 800e046:	4831      	ldr	r0, [pc, #196]	; (800e10c <tcp_rexmit_rto_prepare+0xdc>)
 800e048:	f003 fb5a 	bl	8011700 <iprintf>

  if (pcb->unacked == NULL) {
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e050:	2b00      	cmp	r3, #0
 800e052:	d102      	bne.n	800e05a <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800e054:	f06f 0305 	mvn.w	r3, #5
 800e058:	e050      	b.n	800e0fc <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e05e:	60fb      	str	r3, [r7, #12]
 800e060:	e00b      	b.n	800e07a <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800e062:	68f8      	ldr	r0, [r7, #12]
 800e064:	f7ff fee6 	bl	800de34 <tcp_output_segment_busy>
 800e068:	4603      	mov	r3, r0
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d002      	beq.n	800e074 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800e06e:	f06f 0305 	mvn.w	r3, #5
 800e072:	e043      	b.n	800e0fc <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800e074:	68fb      	ldr	r3, [r7, #12]
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	60fb      	str	r3, [r7, #12]
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	681b      	ldr	r3, [r3, #0]
 800e07e:	2b00      	cmp	r3, #0
 800e080:	d1ef      	bne.n	800e062 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800e082:	68f8      	ldr	r0, [r7, #12]
 800e084:	f7ff fed6 	bl	800de34 <tcp_output_segment_busy>
 800e088:	4603      	mov	r3, r0
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d002      	beq.n	800e094 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800e08e:	f06f 0305 	mvn.w	r3, #5
 800e092:	e033      	b.n	800e0fc <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800e098:	68fb      	ldr	r3, [r7, #12]
 800e09a:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	2200      	movs	r2, #0
 800e0a8:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	8b5b      	ldrh	r3, [r3, #26]
 800e0ae:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800e0b2:	b29a      	uxth	r2, r3
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	68db      	ldr	r3, [r3, #12]
 800e0bc:	685b      	ldr	r3, [r3, #4]
 800e0be:	4618      	mov	r0, r3
 800e0c0:	f7f8 fdd9 	bl	8006c76 <lwip_htonl>
 800e0c4:	4604      	mov	r4, r0
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	891b      	ldrh	r3, [r3, #8]
 800e0ca:	461d      	mov	r5, r3
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	68db      	ldr	r3, [r3, #12]
 800e0d0:	899b      	ldrh	r3, [r3, #12]
 800e0d2:	b29b      	uxth	r3, r3
 800e0d4:	4618      	mov	r0, r3
 800e0d6:	f7f8 fdb9 	bl	8006c4c <lwip_htons>
 800e0da:	4603      	mov	r3, r0
 800e0dc:	b2db      	uxtb	r3, r3
 800e0de:	f003 0303 	and.w	r3, r3, #3
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d001      	beq.n	800e0ea <tcp_rexmit_rto_prepare+0xba>
 800e0e6:	2301      	movs	r3, #1
 800e0e8:	e000      	b.n	800e0ec <tcp_rexmit_rto_prepare+0xbc>
 800e0ea:	2300      	movs	r3, #0
 800e0ec:	442b      	add	r3, r5
 800e0ee:	18e2      	adds	r2, r4, r3
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	2200      	movs	r2, #0
 800e0f8:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800e0fa:	2300      	movs	r3, #0
}
 800e0fc:	4618      	mov	r0, r3
 800e0fe:	3710      	adds	r7, #16
 800e100:	46bd      	mov	sp, r7
 800e102:	bdb0      	pop	{r4, r5, r7, pc}
 800e104:	08015188 	.word	0x08015188
 800e108:	080157c4 	.word	0x080157c4
 800e10c:	080151dc 	.word	0x080151dc

0800e110 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800e110:	b580      	push	{r7, lr}
 800e112:	b082      	sub	sp, #8
 800e114:	af00      	add	r7, sp, #0
 800e116:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	d106      	bne.n	800e12c <tcp_rexmit_rto_commit+0x1c>
 800e11e:	4b0d      	ldr	r3, [pc, #52]	; (800e154 <tcp_rexmit_rto_commit+0x44>)
 800e120:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800e124:	490c      	ldr	r1, [pc, #48]	; (800e158 <tcp_rexmit_rto_commit+0x48>)
 800e126:	480d      	ldr	r0, [pc, #52]	; (800e15c <tcp_rexmit_rto_commit+0x4c>)
 800e128:	f003 faea 	bl	8011700 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e132:	2bff      	cmp	r3, #255	; 0xff
 800e134:	d007      	beq.n	800e146 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e13c:	3301      	adds	r3, #1
 800e13e:	b2da      	uxtb	r2, r3
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800e146:	6878      	ldr	r0, [r7, #4]
 800e148:	f7ff fc80 	bl	800da4c <tcp_output>
}
 800e14c:	bf00      	nop
 800e14e:	3708      	adds	r7, #8
 800e150:	46bd      	mov	sp, r7
 800e152:	bd80      	pop	{r7, pc}
 800e154:	08015188 	.word	0x08015188
 800e158:	080157e8 	.word	0x080157e8
 800e15c:	080151dc 	.word	0x080151dc

0800e160 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800e160:	b580      	push	{r7, lr}
 800e162:	b082      	sub	sp, #8
 800e164:	af00      	add	r7, sp, #0
 800e166:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d106      	bne.n	800e17c <tcp_rexmit_rto+0x1c>
 800e16e:	4b0a      	ldr	r3, [pc, #40]	; (800e198 <tcp_rexmit_rto+0x38>)
 800e170:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800e174:	4909      	ldr	r1, [pc, #36]	; (800e19c <tcp_rexmit_rto+0x3c>)
 800e176:	480a      	ldr	r0, [pc, #40]	; (800e1a0 <tcp_rexmit_rto+0x40>)
 800e178:	f003 fac2 	bl	8011700 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800e17c:	6878      	ldr	r0, [r7, #4]
 800e17e:	f7ff ff57 	bl	800e030 <tcp_rexmit_rto_prepare>
 800e182:	4603      	mov	r3, r0
 800e184:	2b00      	cmp	r3, #0
 800e186:	d102      	bne.n	800e18e <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800e188:	6878      	ldr	r0, [r7, #4]
 800e18a:	f7ff ffc1 	bl	800e110 <tcp_rexmit_rto_commit>
  }
}
 800e18e:	bf00      	nop
 800e190:	3708      	adds	r7, #8
 800e192:	46bd      	mov	sp, r7
 800e194:	bd80      	pop	{r7, pc}
 800e196:	bf00      	nop
 800e198:	08015188 	.word	0x08015188
 800e19c:	0801580c 	.word	0x0801580c
 800e1a0:	080151dc 	.word	0x080151dc

0800e1a4 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800e1a4:	b590      	push	{r4, r7, lr}
 800e1a6:	b085      	sub	sp, #20
 800e1a8:	af00      	add	r7, sp, #0
 800e1aa:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d106      	bne.n	800e1c0 <tcp_rexmit+0x1c>
 800e1b2:	4b2f      	ldr	r3, [pc, #188]	; (800e270 <tcp_rexmit+0xcc>)
 800e1b4:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800e1b8:	492e      	ldr	r1, [pc, #184]	; (800e274 <tcp_rexmit+0xd0>)
 800e1ba:	482f      	ldr	r0, [pc, #188]	; (800e278 <tcp_rexmit+0xd4>)
 800e1bc:	f003 faa0 	bl	8011700 <iprintf>

  if (pcb->unacked == NULL) {
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	d102      	bne.n	800e1ce <tcp_rexmit+0x2a>
    return ERR_VAL;
 800e1c8:	f06f 0305 	mvn.w	r3, #5
 800e1cc:	e04c      	b.n	800e268 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e1d2:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800e1d4:	68b8      	ldr	r0, [r7, #8]
 800e1d6:	f7ff fe2d 	bl	800de34 <tcp_output_segment_busy>
 800e1da:	4603      	mov	r3, r0
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	d002      	beq.n	800e1e6 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800e1e0:	f06f 0305 	mvn.w	r3, #5
 800e1e4:	e040      	b.n	800e268 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800e1e6:	68bb      	ldr	r3, [r7, #8]
 800e1e8:	681a      	ldr	r2, [r3, #0]
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	336c      	adds	r3, #108	; 0x6c
 800e1f2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800e1f4:	e002      	b.n	800e1fc <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800e1f6:	68fb      	ldr	r3, [r7, #12]
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800e1fc:	68fb      	ldr	r3, [r7, #12]
 800e1fe:	681b      	ldr	r3, [r3, #0]
 800e200:	2b00      	cmp	r3, #0
 800e202:	d011      	beq.n	800e228 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800e204:	68fb      	ldr	r3, [r7, #12]
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	68db      	ldr	r3, [r3, #12]
 800e20a:	685b      	ldr	r3, [r3, #4]
 800e20c:	4618      	mov	r0, r3
 800e20e:	f7f8 fd32 	bl	8006c76 <lwip_htonl>
 800e212:	4604      	mov	r4, r0
 800e214:	68bb      	ldr	r3, [r7, #8]
 800e216:	68db      	ldr	r3, [r3, #12]
 800e218:	685b      	ldr	r3, [r3, #4]
 800e21a:	4618      	mov	r0, r3
 800e21c:	f7f8 fd2b 	bl	8006c76 <lwip_htonl>
 800e220:	4603      	mov	r3, r0
 800e222:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800e224:	2b00      	cmp	r3, #0
 800e226:	dbe6      	blt.n	800e1f6 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	681a      	ldr	r2, [r3, #0]
 800e22c:	68bb      	ldr	r3, [r7, #8]
 800e22e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800e230:	68fb      	ldr	r3, [r7, #12]
 800e232:	68ba      	ldr	r2, [r7, #8]
 800e234:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800e236:	68bb      	ldr	r3, [r7, #8]
 800e238:	681b      	ldr	r3, [r3, #0]
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d103      	bne.n	800e246 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	2200      	movs	r2, #0
 800e242:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e24c:	2bff      	cmp	r3, #255	; 0xff
 800e24e:	d007      	beq.n	800e260 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e256:	3301      	adds	r3, #1
 800e258:	b2da      	uxtb	r2, r3
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	2200      	movs	r2, #0
 800e264:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800e266:	2300      	movs	r3, #0
}
 800e268:	4618      	mov	r0, r3
 800e26a:	3714      	adds	r7, #20
 800e26c:	46bd      	mov	sp, r7
 800e26e:	bd90      	pop	{r4, r7, pc}
 800e270:	08015188 	.word	0x08015188
 800e274:	08015828 	.word	0x08015828
 800e278:	080151dc 	.word	0x080151dc

0800e27c <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800e27c:	b580      	push	{r7, lr}
 800e27e:	b082      	sub	sp, #8
 800e280:	af00      	add	r7, sp, #0
 800e282:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	2b00      	cmp	r3, #0
 800e288:	d106      	bne.n	800e298 <tcp_rexmit_fast+0x1c>
 800e28a:	4b2a      	ldr	r3, [pc, #168]	; (800e334 <tcp_rexmit_fast+0xb8>)
 800e28c:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800e290:	4929      	ldr	r1, [pc, #164]	; (800e338 <tcp_rexmit_fast+0xbc>)
 800e292:	482a      	ldr	r0, [pc, #168]	; (800e33c <tcp_rexmit_fast+0xc0>)
 800e294:	f003 fa34 	bl	8011700 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d044      	beq.n	800e32a <tcp_rexmit_fast+0xae>
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	8b5b      	ldrh	r3, [r3, #26]
 800e2a4:	f003 0304 	and.w	r3, r3, #4
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d13e      	bne.n	800e32a <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800e2ac:	6878      	ldr	r0, [r7, #4]
 800e2ae:	f7ff ff79 	bl	800e1a4 <tcp_rexmit>
 800e2b2:	4603      	mov	r3, r0
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d138      	bne.n	800e32a <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e2c4:	4293      	cmp	r3, r2
 800e2c6:	bf28      	it	cs
 800e2c8:	4613      	movcs	r3, r2
 800e2ca:	b29b      	uxth	r3, r3
 800e2cc:	0fda      	lsrs	r2, r3, #31
 800e2ce:	4413      	add	r3, r2
 800e2d0:	105b      	asrs	r3, r3, #1
 800e2d2:	b29a      	uxth	r2, r3
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800e2e0:	461a      	mov	r2, r3
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e2e6:	005b      	lsls	r3, r3, #1
 800e2e8:	429a      	cmp	r2, r3
 800e2ea:	d206      	bcs.n	800e2fa <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e2f0:	005b      	lsls	r3, r3, #1
 800e2f2:	b29a      	uxth	r2, r3
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e304:	4619      	mov	r1, r3
 800e306:	0049      	lsls	r1, r1, #1
 800e308:	440b      	add	r3, r1
 800e30a:	b29b      	uxth	r3, r3
 800e30c:	4413      	add	r3, r2
 800e30e:	b29a      	uxth	r2, r3
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	8b5b      	ldrh	r3, [r3, #26]
 800e31a:	f043 0304 	orr.w	r3, r3, #4
 800e31e:	b29a      	uxth	r2, r3
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	2200      	movs	r2, #0
 800e328:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800e32a:	bf00      	nop
 800e32c:	3708      	adds	r7, #8
 800e32e:	46bd      	mov	sp, r7
 800e330:	bd80      	pop	{r7, pc}
 800e332:	bf00      	nop
 800e334:	08015188 	.word	0x08015188
 800e338:	08015840 	.word	0x08015840
 800e33c:	080151dc 	.word	0x080151dc

0800e340 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800e340:	b580      	push	{r7, lr}
 800e342:	b086      	sub	sp, #24
 800e344:	af00      	add	r7, sp, #0
 800e346:	60f8      	str	r0, [r7, #12]
 800e348:	607b      	str	r3, [r7, #4]
 800e34a:	460b      	mov	r3, r1
 800e34c:	817b      	strh	r3, [r7, #10]
 800e34e:	4613      	mov	r3, r2
 800e350:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800e352:	897a      	ldrh	r2, [r7, #10]
 800e354:	893b      	ldrh	r3, [r7, #8]
 800e356:	4413      	add	r3, r2
 800e358:	b29b      	uxth	r3, r3
 800e35a:	3314      	adds	r3, #20
 800e35c:	b29b      	uxth	r3, r3
 800e35e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e362:	4619      	mov	r1, r3
 800e364:	2022      	movs	r0, #34	; 0x22
 800e366:	f7f9 fd1f 	bl	8007da8 <pbuf_alloc>
 800e36a:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800e36c:	697b      	ldr	r3, [r7, #20]
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d04d      	beq.n	800e40e <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800e372:	897b      	ldrh	r3, [r7, #10]
 800e374:	3313      	adds	r3, #19
 800e376:	697a      	ldr	r2, [r7, #20]
 800e378:	8952      	ldrh	r2, [r2, #10]
 800e37a:	4293      	cmp	r3, r2
 800e37c:	db06      	blt.n	800e38c <tcp_output_alloc_header_common+0x4c>
 800e37e:	4b26      	ldr	r3, [pc, #152]	; (800e418 <tcp_output_alloc_header_common+0xd8>)
 800e380:	f240 7223 	movw	r2, #1827	; 0x723
 800e384:	4925      	ldr	r1, [pc, #148]	; (800e41c <tcp_output_alloc_header_common+0xdc>)
 800e386:	4826      	ldr	r0, [pc, #152]	; (800e420 <tcp_output_alloc_header_common+0xe0>)
 800e388:	f003 f9ba 	bl	8011700 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800e38c:	697b      	ldr	r3, [r7, #20]
 800e38e:	685b      	ldr	r3, [r3, #4]
 800e390:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800e392:	8c3b      	ldrh	r3, [r7, #32]
 800e394:	4618      	mov	r0, r3
 800e396:	f7f8 fc59 	bl	8006c4c <lwip_htons>
 800e39a:	4603      	mov	r3, r0
 800e39c:	461a      	mov	r2, r3
 800e39e:	693b      	ldr	r3, [r7, #16]
 800e3a0:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800e3a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e3a4:	4618      	mov	r0, r3
 800e3a6:	f7f8 fc51 	bl	8006c4c <lwip_htons>
 800e3aa:	4603      	mov	r3, r0
 800e3ac:	461a      	mov	r2, r3
 800e3ae:	693b      	ldr	r3, [r7, #16]
 800e3b0:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800e3b2:	693b      	ldr	r3, [r7, #16]
 800e3b4:	687a      	ldr	r2, [r7, #4]
 800e3b6:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800e3b8:	68f8      	ldr	r0, [r7, #12]
 800e3ba:	f7f8 fc5c 	bl	8006c76 <lwip_htonl>
 800e3be:	4602      	mov	r2, r0
 800e3c0:	693b      	ldr	r3, [r7, #16]
 800e3c2:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800e3c4:	897b      	ldrh	r3, [r7, #10]
 800e3c6:	089b      	lsrs	r3, r3, #2
 800e3c8:	b29b      	uxth	r3, r3
 800e3ca:	3305      	adds	r3, #5
 800e3cc:	b29b      	uxth	r3, r3
 800e3ce:	031b      	lsls	r3, r3, #12
 800e3d0:	b29a      	uxth	r2, r3
 800e3d2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e3d6:	b29b      	uxth	r3, r3
 800e3d8:	4313      	orrs	r3, r2
 800e3da:	b29b      	uxth	r3, r3
 800e3dc:	4618      	mov	r0, r3
 800e3de:	f7f8 fc35 	bl	8006c4c <lwip_htons>
 800e3e2:	4603      	mov	r3, r0
 800e3e4:	461a      	mov	r2, r3
 800e3e6:	693b      	ldr	r3, [r7, #16]
 800e3e8:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800e3ea:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e3ec:	4618      	mov	r0, r3
 800e3ee:	f7f8 fc2d 	bl	8006c4c <lwip_htons>
 800e3f2:	4603      	mov	r3, r0
 800e3f4:	461a      	mov	r2, r3
 800e3f6:	693b      	ldr	r3, [r7, #16]
 800e3f8:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800e3fa:	693b      	ldr	r3, [r7, #16]
 800e3fc:	2200      	movs	r2, #0
 800e3fe:	741a      	strb	r2, [r3, #16]
 800e400:	2200      	movs	r2, #0
 800e402:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800e404:	693b      	ldr	r3, [r7, #16]
 800e406:	2200      	movs	r2, #0
 800e408:	749a      	strb	r2, [r3, #18]
 800e40a:	2200      	movs	r2, #0
 800e40c:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800e40e:	697b      	ldr	r3, [r7, #20]
}
 800e410:	4618      	mov	r0, r3
 800e412:	3718      	adds	r7, #24
 800e414:	46bd      	mov	sp, r7
 800e416:	bd80      	pop	{r7, pc}
 800e418:	08015188 	.word	0x08015188
 800e41c:	08015860 	.word	0x08015860
 800e420:	080151dc 	.word	0x080151dc

0800e424 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800e424:	b5b0      	push	{r4, r5, r7, lr}
 800e426:	b08a      	sub	sp, #40	; 0x28
 800e428:	af04      	add	r7, sp, #16
 800e42a:	60f8      	str	r0, [r7, #12]
 800e42c:	607b      	str	r3, [r7, #4]
 800e42e:	460b      	mov	r3, r1
 800e430:	817b      	strh	r3, [r7, #10]
 800e432:	4613      	mov	r3, r2
 800e434:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800e436:	68fb      	ldr	r3, [r7, #12]
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d106      	bne.n	800e44a <tcp_output_alloc_header+0x26>
 800e43c:	4b15      	ldr	r3, [pc, #84]	; (800e494 <tcp_output_alloc_header+0x70>)
 800e43e:	f240 7242 	movw	r2, #1858	; 0x742
 800e442:	4915      	ldr	r1, [pc, #84]	; (800e498 <tcp_output_alloc_header+0x74>)
 800e444:	4815      	ldr	r0, [pc, #84]	; (800e49c <tcp_output_alloc_header+0x78>)
 800e446:	f003 f95b 	bl	8011700 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800e44a:	68fb      	ldr	r3, [r7, #12]
 800e44c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800e44e:	68fb      	ldr	r3, [r7, #12]
 800e450:	8adb      	ldrh	r3, [r3, #22]
 800e452:	68fa      	ldr	r2, [r7, #12]
 800e454:	8b12      	ldrh	r2, [r2, #24]
 800e456:	68f9      	ldr	r1, [r7, #12]
 800e458:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800e45a:	893d      	ldrh	r5, [r7, #8]
 800e45c:	897c      	ldrh	r4, [r7, #10]
 800e45e:	9103      	str	r1, [sp, #12]
 800e460:	2110      	movs	r1, #16
 800e462:	9102      	str	r1, [sp, #8]
 800e464:	9201      	str	r2, [sp, #4]
 800e466:	9300      	str	r3, [sp, #0]
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	462a      	mov	r2, r5
 800e46c:	4621      	mov	r1, r4
 800e46e:	f7ff ff67 	bl	800e340 <tcp_output_alloc_header_common>
 800e472:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800e474:	697b      	ldr	r3, [r7, #20]
 800e476:	2b00      	cmp	r3, #0
 800e478:	d006      	beq.n	800e488 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800e47a:	68fb      	ldr	r3, [r7, #12]
 800e47c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e47e:	68fa      	ldr	r2, [r7, #12]
 800e480:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800e482:	441a      	add	r2, r3
 800e484:	68fb      	ldr	r3, [r7, #12]
 800e486:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800e488:	697b      	ldr	r3, [r7, #20]
}
 800e48a:	4618      	mov	r0, r3
 800e48c:	3718      	adds	r7, #24
 800e48e:	46bd      	mov	sp, r7
 800e490:	bdb0      	pop	{r4, r5, r7, pc}
 800e492:	bf00      	nop
 800e494:	08015188 	.word	0x08015188
 800e498:	08015890 	.word	0x08015890
 800e49c:	080151dc 	.word	0x080151dc

0800e4a0 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800e4a0:	b580      	push	{r7, lr}
 800e4a2:	b088      	sub	sp, #32
 800e4a4:	af00      	add	r7, sp, #0
 800e4a6:	60f8      	str	r0, [r7, #12]
 800e4a8:	60b9      	str	r1, [r7, #8]
 800e4aa:	4611      	mov	r1, r2
 800e4ac:	461a      	mov	r2, r3
 800e4ae:	460b      	mov	r3, r1
 800e4b0:	71fb      	strb	r3, [r7, #7]
 800e4b2:	4613      	mov	r3, r2
 800e4b4:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800e4b6:	2300      	movs	r3, #0
 800e4b8:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800e4ba:	68bb      	ldr	r3, [r7, #8]
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	d106      	bne.n	800e4ce <tcp_output_fill_options+0x2e>
 800e4c0:	4b13      	ldr	r3, [pc, #76]	; (800e510 <tcp_output_fill_options+0x70>)
 800e4c2:	f240 7256 	movw	r2, #1878	; 0x756
 800e4c6:	4913      	ldr	r1, [pc, #76]	; (800e514 <tcp_output_fill_options+0x74>)
 800e4c8:	4813      	ldr	r0, [pc, #76]	; (800e518 <tcp_output_fill_options+0x78>)
 800e4ca:	f003 f919 	bl	8011700 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800e4ce:	68bb      	ldr	r3, [r7, #8]
 800e4d0:	685b      	ldr	r3, [r3, #4]
 800e4d2:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800e4d4:	69bb      	ldr	r3, [r7, #24]
 800e4d6:	3314      	adds	r3, #20
 800e4d8:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800e4da:	69bb      	ldr	r3, [r7, #24]
 800e4dc:	f103 0214 	add.w	r2, r3, #20
 800e4e0:	8bfb      	ldrh	r3, [r7, #30]
 800e4e2:	009b      	lsls	r3, r3, #2
 800e4e4:	4619      	mov	r1, r3
 800e4e6:	79fb      	ldrb	r3, [r7, #7]
 800e4e8:	009b      	lsls	r3, r3, #2
 800e4ea:	f003 0304 	and.w	r3, r3, #4
 800e4ee:	440b      	add	r3, r1
 800e4f0:	4413      	add	r3, r2
 800e4f2:	697a      	ldr	r2, [r7, #20]
 800e4f4:	429a      	cmp	r2, r3
 800e4f6:	d006      	beq.n	800e506 <tcp_output_fill_options+0x66>
 800e4f8:	4b05      	ldr	r3, [pc, #20]	; (800e510 <tcp_output_fill_options+0x70>)
 800e4fa:	f240 7275 	movw	r2, #1909	; 0x775
 800e4fe:	4907      	ldr	r1, [pc, #28]	; (800e51c <tcp_output_fill_options+0x7c>)
 800e500:	4805      	ldr	r0, [pc, #20]	; (800e518 <tcp_output_fill_options+0x78>)
 800e502:	f003 f8fd 	bl	8011700 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800e506:	bf00      	nop
 800e508:	3720      	adds	r7, #32
 800e50a:	46bd      	mov	sp, r7
 800e50c:	bd80      	pop	{r7, pc}
 800e50e:	bf00      	nop
 800e510:	08015188 	.word	0x08015188
 800e514:	080158b8 	.word	0x080158b8
 800e518:	080151dc 	.word	0x080151dc
 800e51c:	080157b0 	.word	0x080157b0

0800e520 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800e520:	b580      	push	{r7, lr}
 800e522:	b08a      	sub	sp, #40	; 0x28
 800e524:	af04      	add	r7, sp, #16
 800e526:	60f8      	str	r0, [r7, #12]
 800e528:	60b9      	str	r1, [r7, #8]
 800e52a:	607a      	str	r2, [r7, #4]
 800e52c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800e52e:	68bb      	ldr	r3, [r7, #8]
 800e530:	2b00      	cmp	r3, #0
 800e532:	d106      	bne.n	800e542 <tcp_output_control_segment+0x22>
 800e534:	4b1c      	ldr	r3, [pc, #112]	; (800e5a8 <tcp_output_control_segment+0x88>)
 800e536:	f240 7287 	movw	r2, #1927	; 0x787
 800e53a:	491c      	ldr	r1, [pc, #112]	; (800e5ac <tcp_output_control_segment+0x8c>)
 800e53c:	481c      	ldr	r0, [pc, #112]	; (800e5b0 <tcp_output_control_segment+0x90>)
 800e53e:	f003 f8df 	bl	8011700 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800e542:	683a      	ldr	r2, [r7, #0]
 800e544:	6879      	ldr	r1, [r7, #4]
 800e546:	68f8      	ldr	r0, [r7, #12]
 800e548:	f7fe fae8 	bl	800cb1c <tcp_route>
 800e54c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800e54e:	693b      	ldr	r3, [r7, #16]
 800e550:	2b00      	cmp	r3, #0
 800e552:	d102      	bne.n	800e55a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800e554:	23fc      	movs	r3, #252	; 0xfc
 800e556:	75fb      	strb	r3, [r7, #23]
 800e558:	e01c      	b.n	800e594 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800e55a:	68fb      	ldr	r3, [r7, #12]
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d006      	beq.n	800e56e <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800e560:	68fb      	ldr	r3, [r7, #12]
 800e562:	7adb      	ldrb	r3, [r3, #11]
 800e564:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800e566:	68fb      	ldr	r3, [r7, #12]
 800e568:	7a9b      	ldrb	r3, [r3, #10]
 800e56a:	757b      	strb	r3, [r7, #21]
 800e56c:	e003      	b.n	800e576 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800e56e:	23ff      	movs	r3, #255	; 0xff
 800e570:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800e572:	2300      	movs	r3, #0
 800e574:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800e576:	7dba      	ldrb	r2, [r7, #22]
 800e578:	693b      	ldr	r3, [r7, #16]
 800e57a:	9302      	str	r3, [sp, #8]
 800e57c:	2306      	movs	r3, #6
 800e57e:	9301      	str	r3, [sp, #4]
 800e580:	7d7b      	ldrb	r3, [r7, #21]
 800e582:	9300      	str	r3, [sp, #0]
 800e584:	4613      	mov	r3, r2
 800e586:	683a      	ldr	r2, [r7, #0]
 800e588:	6879      	ldr	r1, [r7, #4]
 800e58a:	68b8      	ldr	r0, [r7, #8]
 800e58c:	f001 ff70 	bl	8010470 <ip4_output_if>
 800e590:	4603      	mov	r3, r0
 800e592:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800e594:	68b8      	ldr	r0, [r7, #8]
 800e596:	f7f9 feeb 	bl	8008370 <pbuf_free>
  return err;
 800e59a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e59e:	4618      	mov	r0, r3
 800e5a0:	3718      	adds	r7, #24
 800e5a2:	46bd      	mov	sp, r7
 800e5a4:	bd80      	pop	{r7, pc}
 800e5a6:	bf00      	nop
 800e5a8:	08015188 	.word	0x08015188
 800e5ac:	080158e0 	.word	0x080158e0
 800e5b0:	080151dc 	.word	0x080151dc

0800e5b4 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800e5b4:	b590      	push	{r4, r7, lr}
 800e5b6:	b08b      	sub	sp, #44	; 0x2c
 800e5b8:	af04      	add	r7, sp, #16
 800e5ba:	60f8      	str	r0, [r7, #12]
 800e5bc:	60b9      	str	r1, [r7, #8]
 800e5be:	607a      	str	r2, [r7, #4]
 800e5c0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800e5c2:	683b      	ldr	r3, [r7, #0]
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d106      	bne.n	800e5d6 <tcp_rst+0x22>
 800e5c8:	4b1f      	ldr	r3, [pc, #124]	; (800e648 <tcp_rst+0x94>)
 800e5ca:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800e5ce:	491f      	ldr	r1, [pc, #124]	; (800e64c <tcp_rst+0x98>)
 800e5d0:	481f      	ldr	r0, [pc, #124]	; (800e650 <tcp_rst+0x9c>)
 800e5d2:	f003 f895 	bl	8011700 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800e5d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d106      	bne.n	800e5ea <tcp_rst+0x36>
 800e5dc:	4b1a      	ldr	r3, [pc, #104]	; (800e648 <tcp_rst+0x94>)
 800e5de:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800e5e2:	491c      	ldr	r1, [pc, #112]	; (800e654 <tcp_rst+0xa0>)
 800e5e4:	481a      	ldr	r0, [pc, #104]	; (800e650 <tcp_rst+0x9c>)
 800e5e6:	f003 f88b 	bl	8011700 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800e5ea:	2300      	movs	r3, #0
 800e5ec:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800e5ee:	f246 0308 	movw	r3, #24584	; 0x6008
 800e5f2:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800e5f4:	7dfb      	ldrb	r3, [r7, #23]
 800e5f6:	b29c      	uxth	r4, r3
 800e5f8:	68b8      	ldr	r0, [r7, #8]
 800e5fa:	f7f8 fb3c 	bl	8006c76 <lwip_htonl>
 800e5fe:	4602      	mov	r2, r0
 800e600:	8abb      	ldrh	r3, [r7, #20]
 800e602:	9303      	str	r3, [sp, #12]
 800e604:	2314      	movs	r3, #20
 800e606:	9302      	str	r3, [sp, #8]
 800e608:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800e60a:	9301      	str	r3, [sp, #4]
 800e60c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e60e:	9300      	str	r3, [sp, #0]
 800e610:	4613      	mov	r3, r2
 800e612:	2200      	movs	r2, #0
 800e614:	4621      	mov	r1, r4
 800e616:	6878      	ldr	r0, [r7, #4]
 800e618:	f7ff fe92 	bl	800e340 <tcp_output_alloc_header_common>
 800e61c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800e61e:	693b      	ldr	r3, [r7, #16]
 800e620:	2b00      	cmp	r3, #0
 800e622:	d00c      	beq.n	800e63e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800e624:	7dfb      	ldrb	r3, [r7, #23]
 800e626:	2200      	movs	r2, #0
 800e628:	6939      	ldr	r1, [r7, #16]
 800e62a:	68f8      	ldr	r0, [r7, #12]
 800e62c:	f7ff ff38 	bl	800e4a0 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800e630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e632:	683a      	ldr	r2, [r7, #0]
 800e634:	6939      	ldr	r1, [r7, #16]
 800e636:	68f8      	ldr	r0, [r7, #12]
 800e638:	f7ff ff72 	bl	800e520 <tcp_output_control_segment>
 800e63c:	e000      	b.n	800e640 <tcp_rst+0x8c>
    return;
 800e63e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800e640:	371c      	adds	r7, #28
 800e642:	46bd      	mov	sp, r7
 800e644:	bd90      	pop	{r4, r7, pc}
 800e646:	bf00      	nop
 800e648:	08015188 	.word	0x08015188
 800e64c:	0801590c 	.word	0x0801590c
 800e650:	080151dc 	.word	0x080151dc
 800e654:	08015928 	.word	0x08015928

0800e658 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800e658:	b590      	push	{r4, r7, lr}
 800e65a:	b087      	sub	sp, #28
 800e65c:	af00      	add	r7, sp, #0
 800e65e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800e660:	2300      	movs	r3, #0
 800e662:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800e664:	2300      	movs	r3, #0
 800e666:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d106      	bne.n	800e67c <tcp_send_empty_ack+0x24>
 800e66e:	4b28      	ldr	r3, [pc, #160]	; (800e710 <tcp_send_empty_ack+0xb8>)
 800e670:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800e674:	4927      	ldr	r1, [pc, #156]	; (800e714 <tcp_send_empty_ack+0xbc>)
 800e676:	4828      	ldr	r0, [pc, #160]	; (800e718 <tcp_send_empty_ack+0xc0>)
 800e678:	f003 f842 	bl	8011700 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800e67c:	7dfb      	ldrb	r3, [r7, #23]
 800e67e:	009b      	lsls	r3, r3, #2
 800e680:	b2db      	uxtb	r3, r3
 800e682:	f003 0304 	and.w	r3, r3, #4
 800e686:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800e688:	7d7b      	ldrb	r3, [r7, #21]
 800e68a:	b29c      	uxth	r4, r3
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e690:	4618      	mov	r0, r3
 800e692:	f7f8 faf0 	bl	8006c76 <lwip_htonl>
 800e696:	4603      	mov	r3, r0
 800e698:	2200      	movs	r2, #0
 800e69a:	4621      	mov	r1, r4
 800e69c:	6878      	ldr	r0, [r7, #4]
 800e69e:	f7ff fec1 	bl	800e424 <tcp_output_alloc_header>
 800e6a2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800e6a4:	693b      	ldr	r3, [r7, #16]
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d109      	bne.n	800e6be <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	8b5b      	ldrh	r3, [r3, #26]
 800e6ae:	f043 0303 	orr.w	r3, r3, #3
 800e6b2:	b29a      	uxth	r2, r3
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800e6b8:	f06f 0301 	mvn.w	r3, #1
 800e6bc:	e023      	b.n	800e706 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800e6be:	7dbb      	ldrb	r3, [r7, #22]
 800e6c0:	7dfa      	ldrb	r2, [r7, #23]
 800e6c2:	6939      	ldr	r1, [r7, #16]
 800e6c4:	6878      	ldr	r0, [r7, #4]
 800e6c6:	f7ff feeb 	bl	800e4a0 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800e6ca:	687a      	ldr	r2, [r7, #4]
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	3304      	adds	r3, #4
 800e6d0:	6939      	ldr	r1, [r7, #16]
 800e6d2:	6878      	ldr	r0, [r7, #4]
 800e6d4:	f7ff ff24 	bl	800e520 <tcp_output_control_segment>
 800e6d8:	4603      	mov	r3, r0
 800e6da:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800e6dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	d007      	beq.n	800e6f4 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	8b5b      	ldrh	r3, [r3, #26]
 800e6e8:	f043 0303 	orr.w	r3, r3, #3
 800e6ec:	b29a      	uxth	r2, r3
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	835a      	strh	r2, [r3, #26]
 800e6f2:	e006      	b.n	800e702 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	8b5b      	ldrh	r3, [r3, #26]
 800e6f8:	f023 0303 	bic.w	r3, r3, #3
 800e6fc:	b29a      	uxth	r2, r3
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800e702:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e706:	4618      	mov	r0, r3
 800e708:	371c      	adds	r7, #28
 800e70a:	46bd      	mov	sp, r7
 800e70c:	bd90      	pop	{r4, r7, pc}
 800e70e:	bf00      	nop
 800e710:	08015188 	.word	0x08015188
 800e714:	08015944 	.word	0x08015944
 800e718:	080151dc 	.word	0x080151dc

0800e71c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800e71c:	b590      	push	{r4, r7, lr}
 800e71e:	b087      	sub	sp, #28
 800e720:	af00      	add	r7, sp, #0
 800e722:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800e724:	2300      	movs	r3, #0
 800e726:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d106      	bne.n	800e73c <tcp_keepalive+0x20>
 800e72e:	4b18      	ldr	r3, [pc, #96]	; (800e790 <tcp_keepalive+0x74>)
 800e730:	f640 0224 	movw	r2, #2084	; 0x824
 800e734:	4917      	ldr	r1, [pc, #92]	; (800e794 <tcp_keepalive+0x78>)
 800e736:	4818      	ldr	r0, [pc, #96]	; (800e798 <tcp_keepalive+0x7c>)
 800e738:	f002 ffe2 	bl	8011700 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800e73c:	7dfb      	ldrb	r3, [r7, #23]
 800e73e:	b29c      	uxth	r4, r3
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e744:	3b01      	subs	r3, #1
 800e746:	4618      	mov	r0, r3
 800e748:	f7f8 fa95 	bl	8006c76 <lwip_htonl>
 800e74c:	4603      	mov	r3, r0
 800e74e:	2200      	movs	r2, #0
 800e750:	4621      	mov	r1, r4
 800e752:	6878      	ldr	r0, [r7, #4]
 800e754:	f7ff fe66 	bl	800e424 <tcp_output_alloc_header>
 800e758:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800e75a:	693b      	ldr	r3, [r7, #16]
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	d102      	bne.n	800e766 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800e760:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e764:	e010      	b.n	800e788 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800e766:	7dfb      	ldrb	r3, [r7, #23]
 800e768:	2200      	movs	r2, #0
 800e76a:	6939      	ldr	r1, [r7, #16]
 800e76c:	6878      	ldr	r0, [r7, #4]
 800e76e:	f7ff fe97 	bl	800e4a0 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800e772:	687a      	ldr	r2, [r7, #4]
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	3304      	adds	r3, #4
 800e778:	6939      	ldr	r1, [r7, #16]
 800e77a:	6878      	ldr	r0, [r7, #4]
 800e77c:	f7ff fed0 	bl	800e520 <tcp_output_control_segment>
 800e780:	4603      	mov	r3, r0
 800e782:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800e784:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e788:	4618      	mov	r0, r3
 800e78a:	371c      	adds	r7, #28
 800e78c:	46bd      	mov	sp, r7
 800e78e:	bd90      	pop	{r4, r7, pc}
 800e790:	08015188 	.word	0x08015188
 800e794:	08015964 	.word	0x08015964
 800e798:	080151dc 	.word	0x080151dc

0800e79c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800e79c:	b590      	push	{r4, r7, lr}
 800e79e:	b08b      	sub	sp, #44	; 0x2c
 800e7a0:	af00      	add	r7, sp, #0
 800e7a2:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800e7a4:	2300      	movs	r3, #0
 800e7a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	d106      	bne.n	800e7be <tcp_zero_window_probe+0x22>
 800e7b0:	4b4c      	ldr	r3, [pc, #304]	; (800e8e4 <tcp_zero_window_probe+0x148>)
 800e7b2:	f640 024f 	movw	r2, #2127	; 0x84f
 800e7b6:	494c      	ldr	r1, [pc, #304]	; (800e8e8 <tcp_zero_window_probe+0x14c>)
 800e7b8:	484c      	ldr	r0, [pc, #304]	; (800e8ec <tcp_zero_window_probe+0x150>)
 800e7ba:	f002 ffa1 	bl	8011700 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e7c2:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800e7c4:	6a3b      	ldr	r3, [r7, #32]
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d101      	bne.n	800e7ce <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800e7ca:	2300      	movs	r3, #0
 800e7cc:	e086      	b.n	800e8dc <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800e7d4:	2bff      	cmp	r3, #255	; 0xff
 800e7d6:	d007      	beq.n	800e7e8 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800e7de:	3301      	adds	r3, #1
 800e7e0:	b2da      	uxtb	r2, r3
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800e7e8:	6a3b      	ldr	r3, [r7, #32]
 800e7ea:	68db      	ldr	r3, [r3, #12]
 800e7ec:	899b      	ldrh	r3, [r3, #12]
 800e7ee:	b29b      	uxth	r3, r3
 800e7f0:	4618      	mov	r0, r3
 800e7f2:	f7f8 fa2b 	bl	8006c4c <lwip_htons>
 800e7f6:	4603      	mov	r3, r0
 800e7f8:	b2db      	uxtb	r3, r3
 800e7fa:	f003 0301 	and.w	r3, r3, #1
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d005      	beq.n	800e80e <tcp_zero_window_probe+0x72>
 800e802:	6a3b      	ldr	r3, [r7, #32]
 800e804:	891b      	ldrh	r3, [r3, #8]
 800e806:	2b00      	cmp	r3, #0
 800e808:	d101      	bne.n	800e80e <tcp_zero_window_probe+0x72>
 800e80a:	2301      	movs	r3, #1
 800e80c:	e000      	b.n	800e810 <tcp_zero_window_probe+0x74>
 800e80e:	2300      	movs	r3, #0
 800e810:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800e812:	7ffb      	ldrb	r3, [r7, #31]
 800e814:	2b00      	cmp	r3, #0
 800e816:	bf0c      	ite	eq
 800e818:	2301      	moveq	r3, #1
 800e81a:	2300      	movne	r3, #0
 800e81c:	b2db      	uxtb	r3, r3
 800e81e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800e820:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e824:	b299      	uxth	r1, r3
 800e826:	6a3b      	ldr	r3, [r7, #32]
 800e828:	68db      	ldr	r3, [r3, #12]
 800e82a:	685b      	ldr	r3, [r3, #4]
 800e82c:	8bba      	ldrh	r2, [r7, #28]
 800e82e:	6878      	ldr	r0, [r7, #4]
 800e830:	f7ff fdf8 	bl	800e424 <tcp_output_alloc_header>
 800e834:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800e836:	69bb      	ldr	r3, [r7, #24]
 800e838:	2b00      	cmp	r3, #0
 800e83a:	d102      	bne.n	800e842 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800e83c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e840:	e04c      	b.n	800e8dc <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800e842:	69bb      	ldr	r3, [r7, #24]
 800e844:	685b      	ldr	r3, [r3, #4]
 800e846:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800e848:	7ffb      	ldrb	r3, [r7, #31]
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	d011      	beq.n	800e872 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800e84e:	697b      	ldr	r3, [r7, #20]
 800e850:	899b      	ldrh	r3, [r3, #12]
 800e852:	b29b      	uxth	r3, r3
 800e854:	b21b      	sxth	r3, r3
 800e856:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800e85a:	b21c      	sxth	r4, r3
 800e85c:	2011      	movs	r0, #17
 800e85e:	f7f8 f9f5 	bl	8006c4c <lwip_htons>
 800e862:	4603      	mov	r3, r0
 800e864:	b21b      	sxth	r3, r3
 800e866:	4323      	orrs	r3, r4
 800e868:	b21b      	sxth	r3, r3
 800e86a:	b29a      	uxth	r2, r3
 800e86c:	697b      	ldr	r3, [r7, #20]
 800e86e:	819a      	strh	r2, [r3, #12]
 800e870:	e010      	b.n	800e894 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800e872:	69bb      	ldr	r3, [r7, #24]
 800e874:	685b      	ldr	r3, [r3, #4]
 800e876:	3314      	adds	r3, #20
 800e878:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800e87a:	6a3b      	ldr	r3, [r7, #32]
 800e87c:	6858      	ldr	r0, [r3, #4]
 800e87e:	6a3b      	ldr	r3, [r7, #32]
 800e880:	685b      	ldr	r3, [r3, #4]
 800e882:	891a      	ldrh	r2, [r3, #8]
 800e884:	6a3b      	ldr	r3, [r7, #32]
 800e886:	891b      	ldrh	r3, [r3, #8]
 800e888:	1ad3      	subs	r3, r2, r3
 800e88a:	b29b      	uxth	r3, r3
 800e88c:	2201      	movs	r2, #1
 800e88e:	6939      	ldr	r1, [r7, #16]
 800e890:	f7f9 ff58 	bl	8008744 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800e894:	6a3b      	ldr	r3, [r7, #32]
 800e896:	68db      	ldr	r3, [r3, #12]
 800e898:	685b      	ldr	r3, [r3, #4]
 800e89a:	4618      	mov	r0, r3
 800e89c:	f7f8 f9eb 	bl	8006c76 <lwip_htonl>
 800e8a0:	4603      	mov	r3, r0
 800e8a2:	3301      	adds	r3, #1
 800e8a4:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e8aa:	68fb      	ldr	r3, [r7, #12]
 800e8ac:	1ad3      	subs	r3, r2, r3
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	da02      	bge.n	800e8b8 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	68fa      	ldr	r2, [r7, #12]
 800e8b6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800e8b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e8bc:	2200      	movs	r2, #0
 800e8be:	69b9      	ldr	r1, [r7, #24]
 800e8c0:	6878      	ldr	r0, [r7, #4]
 800e8c2:	f7ff fded 	bl	800e4a0 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800e8c6:	687a      	ldr	r2, [r7, #4]
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	3304      	adds	r3, #4
 800e8cc:	69b9      	ldr	r1, [r7, #24]
 800e8ce:	6878      	ldr	r0, [r7, #4]
 800e8d0:	f7ff fe26 	bl	800e520 <tcp_output_control_segment>
 800e8d4:	4603      	mov	r3, r0
 800e8d6:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800e8d8:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800e8dc:	4618      	mov	r0, r3
 800e8de:	372c      	adds	r7, #44	; 0x2c
 800e8e0:	46bd      	mov	sp, r7
 800e8e2:	bd90      	pop	{r4, r7, pc}
 800e8e4:	08015188 	.word	0x08015188
 800e8e8:	08015980 	.word	0x08015980
 800e8ec:	080151dc 	.word	0x080151dc

0800e8f0 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800e8f0:	b580      	push	{r7, lr}
 800e8f2:	b082      	sub	sp, #8
 800e8f4:	af00      	add	r7, sp, #0
 800e8f6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800e8f8:	f7fa f812 	bl	8008920 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800e8fc:	4b0a      	ldr	r3, [pc, #40]	; (800e928 <tcpip_tcp_timer+0x38>)
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	2b00      	cmp	r3, #0
 800e902:	d103      	bne.n	800e90c <tcpip_tcp_timer+0x1c>
 800e904:	4b09      	ldr	r3, [pc, #36]	; (800e92c <tcpip_tcp_timer+0x3c>)
 800e906:	681b      	ldr	r3, [r3, #0]
 800e908:	2b00      	cmp	r3, #0
 800e90a:	d005      	beq.n	800e918 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800e90c:	2200      	movs	r2, #0
 800e90e:	4908      	ldr	r1, [pc, #32]	; (800e930 <tcpip_tcp_timer+0x40>)
 800e910:	20fa      	movs	r0, #250	; 0xfa
 800e912:	f000 f8f3 	bl	800eafc <sys_timeout>
 800e916:	e003      	b.n	800e920 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800e918:	4b06      	ldr	r3, [pc, #24]	; (800e934 <tcpip_tcp_timer+0x44>)
 800e91a:	2200      	movs	r2, #0
 800e91c:	601a      	str	r2, [r3, #0]
  }
}
 800e91e:	bf00      	nop
 800e920:	bf00      	nop
 800e922:	3708      	adds	r7, #8
 800e924:	46bd      	mov	sp, r7
 800e926:	bd80      	pop	{r7, pc}
 800e928:	2000d788 	.word	0x2000d788
 800e92c:	2000d798 	.word	0x2000d798
 800e930:	0800e8f1 	.word	0x0800e8f1
 800e934:	20000588 	.word	0x20000588

0800e938 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800e938:	b580      	push	{r7, lr}
 800e93a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800e93c:	4b0a      	ldr	r3, [pc, #40]	; (800e968 <tcp_timer_needed+0x30>)
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	2b00      	cmp	r3, #0
 800e942:	d10f      	bne.n	800e964 <tcp_timer_needed+0x2c>
 800e944:	4b09      	ldr	r3, [pc, #36]	; (800e96c <tcp_timer_needed+0x34>)
 800e946:	681b      	ldr	r3, [r3, #0]
 800e948:	2b00      	cmp	r3, #0
 800e94a:	d103      	bne.n	800e954 <tcp_timer_needed+0x1c>
 800e94c:	4b08      	ldr	r3, [pc, #32]	; (800e970 <tcp_timer_needed+0x38>)
 800e94e:	681b      	ldr	r3, [r3, #0]
 800e950:	2b00      	cmp	r3, #0
 800e952:	d007      	beq.n	800e964 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800e954:	4b04      	ldr	r3, [pc, #16]	; (800e968 <tcp_timer_needed+0x30>)
 800e956:	2201      	movs	r2, #1
 800e958:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800e95a:	2200      	movs	r2, #0
 800e95c:	4905      	ldr	r1, [pc, #20]	; (800e974 <tcp_timer_needed+0x3c>)
 800e95e:	20fa      	movs	r0, #250	; 0xfa
 800e960:	f000 f8cc 	bl	800eafc <sys_timeout>
  }
}
 800e964:	bf00      	nop
 800e966:	bd80      	pop	{r7, pc}
 800e968:	20000588 	.word	0x20000588
 800e96c:	2000d788 	.word	0x2000d788
 800e970:	2000d798 	.word	0x2000d798
 800e974:	0800e8f1 	.word	0x0800e8f1

0800e978 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800e978:	b580      	push	{r7, lr}
 800e97a:	b086      	sub	sp, #24
 800e97c:	af00      	add	r7, sp, #0
 800e97e:	60f8      	str	r0, [r7, #12]
 800e980:	60b9      	str	r1, [r7, #8]
 800e982:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800e984:	2006      	movs	r0, #6
 800e986:	f7f8 fe95 	bl	80076b4 <memp_malloc>
 800e98a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800e98c:	693b      	ldr	r3, [r7, #16]
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d109      	bne.n	800e9a6 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800e992:	693b      	ldr	r3, [r7, #16]
 800e994:	2b00      	cmp	r3, #0
 800e996:	d151      	bne.n	800ea3c <sys_timeout_abs+0xc4>
 800e998:	4b2a      	ldr	r3, [pc, #168]	; (800ea44 <sys_timeout_abs+0xcc>)
 800e99a:	22be      	movs	r2, #190	; 0xbe
 800e99c:	492a      	ldr	r1, [pc, #168]	; (800ea48 <sys_timeout_abs+0xd0>)
 800e99e:	482b      	ldr	r0, [pc, #172]	; (800ea4c <sys_timeout_abs+0xd4>)
 800e9a0:	f002 feae 	bl	8011700 <iprintf>
    return;
 800e9a4:	e04a      	b.n	800ea3c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800e9a6:	693b      	ldr	r3, [r7, #16]
 800e9a8:	2200      	movs	r2, #0
 800e9aa:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800e9ac:	693b      	ldr	r3, [r7, #16]
 800e9ae:	68ba      	ldr	r2, [r7, #8]
 800e9b0:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800e9b2:	693b      	ldr	r3, [r7, #16]
 800e9b4:	687a      	ldr	r2, [r7, #4]
 800e9b6:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800e9b8:	693b      	ldr	r3, [r7, #16]
 800e9ba:	68fa      	ldr	r2, [r7, #12]
 800e9bc:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800e9be:	4b24      	ldr	r3, [pc, #144]	; (800ea50 <sys_timeout_abs+0xd8>)
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d103      	bne.n	800e9ce <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800e9c6:	4a22      	ldr	r2, [pc, #136]	; (800ea50 <sys_timeout_abs+0xd8>)
 800e9c8:	693b      	ldr	r3, [r7, #16]
 800e9ca:	6013      	str	r3, [r2, #0]
    return;
 800e9cc:	e037      	b.n	800ea3e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800e9ce:	693b      	ldr	r3, [r7, #16]
 800e9d0:	685a      	ldr	r2, [r3, #4]
 800e9d2:	4b1f      	ldr	r3, [pc, #124]	; (800ea50 <sys_timeout_abs+0xd8>)
 800e9d4:	681b      	ldr	r3, [r3, #0]
 800e9d6:	685b      	ldr	r3, [r3, #4]
 800e9d8:	1ad3      	subs	r3, r2, r3
 800e9da:	0fdb      	lsrs	r3, r3, #31
 800e9dc:	f003 0301 	and.w	r3, r3, #1
 800e9e0:	b2db      	uxtb	r3, r3
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d007      	beq.n	800e9f6 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800e9e6:	4b1a      	ldr	r3, [pc, #104]	; (800ea50 <sys_timeout_abs+0xd8>)
 800e9e8:	681a      	ldr	r2, [r3, #0]
 800e9ea:	693b      	ldr	r3, [r7, #16]
 800e9ec:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800e9ee:	4a18      	ldr	r2, [pc, #96]	; (800ea50 <sys_timeout_abs+0xd8>)
 800e9f0:	693b      	ldr	r3, [r7, #16]
 800e9f2:	6013      	str	r3, [r2, #0]
 800e9f4:	e023      	b.n	800ea3e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800e9f6:	4b16      	ldr	r3, [pc, #88]	; (800ea50 <sys_timeout_abs+0xd8>)
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	617b      	str	r3, [r7, #20]
 800e9fc:	e01a      	b.n	800ea34 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800e9fe:	697b      	ldr	r3, [r7, #20]
 800ea00:	681b      	ldr	r3, [r3, #0]
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d00b      	beq.n	800ea1e <sys_timeout_abs+0xa6>
 800ea06:	693b      	ldr	r3, [r7, #16]
 800ea08:	685a      	ldr	r2, [r3, #4]
 800ea0a:	697b      	ldr	r3, [r7, #20]
 800ea0c:	681b      	ldr	r3, [r3, #0]
 800ea0e:	685b      	ldr	r3, [r3, #4]
 800ea10:	1ad3      	subs	r3, r2, r3
 800ea12:	0fdb      	lsrs	r3, r3, #31
 800ea14:	f003 0301 	and.w	r3, r3, #1
 800ea18:	b2db      	uxtb	r3, r3
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	d007      	beq.n	800ea2e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800ea1e:	697b      	ldr	r3, [r7, #20]
 800ea20:	681a      	ldr	r2, [r3, #0]
 800ea22:	693b      	ldr	r3, [r7, #16]
 800ea24:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800ea26:	697b      	ldr	r3, [r7, #20]
 800ea28:	693a      	ldr	r2, [r7, #16]
 800ea2a:	601a      	str	r2, [r3, #0]
        break;
 800ea2c:	e007      	b.n	800ea3e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800ea2e:	697b      	ldr	r3, [r7, #20]
 800ea30:	681b      	ldr	r3, [r3, #0]
 800ea32:	617b      	str	r3, [r7, #20]
 800ea34:	697b      	ldr	r3, [r7, #20]
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d1e1      	bne.n	800e9fe <sys_timeout_abs+0x86>
 800ea3a:	e000      	b.n	800ea3e <sys_timeout_abs+0xc6>
    return;
 800ea3c:	bf00      	nop
      }
    }
  }
}
 800ea3e:	3718      	adds	r7, #24
 800ea40:	46bd      	mov	sp, r7
 800ea42:	bd80      	pop	{r7, pc}
 800ea44:	080159a4 	.word	0x080159a4
 800ea48:	080159d8 	.word	0x080159d8
 800ea4c:	08015a18 	.word	0x08015a18
 800ea50:	20000580 	.word	0x20000580

0800ea54 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800ea54:	b580      	push	{r7, lr}
 800ea56:	b086      	sub	sp, #24
 800ea58:	af00      	add	r7, sp, #0
 800ea5a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800ea60:	697b      	ldr	r3, [r7, #20]
 800ea62:	685b      	ldr	r3, [r3, #4]
 800ea64:	4798      	blx	r3

  now = sys_now();
 800ea66:	f7f6 f88d 	bl	8004b84 <sys_now>
 800ea6a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800ea6c:	697b      	ldr	r3, [r7, #20]
 800ea6e:	681a      	ldr	r2, [r3, #0]
 800ea70:	4b0f      	ldr	r3, [pc, #60]	; (800eab0 <lwip_cyclic_timer+0x5c>)
 800ea72:	681b      	ldr	r3, [r3, #0]
 800ea74:	4413      	add	r3, r2
 800ea76:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800ea78:	68fa      	ldr	r2, [r7, #12]
 800ea7a:	693b      	ldr	r3, [r7, #16]
 800ea7c:	1ad3      	subs	r3, r2, r3
 800ea7e:	0fdb      	lsrs	r3, r3, #31
 800ea80:	f003 0301 	and.w	r3, r3, #1
 800ea84:	b2db      	uxtb	r3, r3
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d009      	beq.n	800ea9e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800ea8a:	697b      	ldr	r3, [r7, #20]
 800ea8c:	681a      	ldr	r2, [r3, #0]
 800ea8e:	693b      	ldr	r3, [r7, #16]
 800ea90:	4413      	add	r3, r2
 800ea92:	687a      	ldr	r2, [r7, #4]
 800ea94:	4907      	ldr	r1, [pc, #28]	; (800eab4 <lwip_cyclic_timer+0x60>)
 800ea96:	4618      	mov	r0, r3
 800ea98:	f7ff ff6e 	bl	800e978 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800ea9c:	e004      	b.n	800eaa8 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800ea9e:	687a      	ldr	r2, [r7, #4]
 800eaa0:	4904      	ldr	r1, [pc, #16]	; (800eab4 <lwip_cyclic_timer+0x60>)
 800eaa2:	68f8      	ldr	r0, [r7, #12]
 800eaa4:	f7ff ff68 	bl	800e978 <sys_timeout_abs>
}
 800eaa8:	bf00      	nop
 800eaaa:	3718      	adds	r7, #24
 800eaac:	46bd      	mov	sp, r7
 800eaae:	bd80      	pop	{r7, pc}
 800eab0:	20000584 	.word	0x20000584
 800eab4:	0800ea55 	.word	0x0800ea55

0800eab8 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800eab8:	b580      	push	{r7, lr}
 800eaba:	b082      	sub	sp, #8
 800eabc:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800eabe:	2301      	movs	r3, #1
 800eac0:	607b      	str	r3, [r7, #4]
 800eac2:	e00e      	b.n	800eae2 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800eac4:	4a0b      	ldr	r2, [pc, #44]	; (800eaf4 <sys_timeouts_init+0x3c>)
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	00db      	lsls	r3, r3, #3
 800ead0:	4a08      	ldr	r2, [pc, #32]	; (800eaf4 <sys_timeouts_init+0x3c>)
 800ead2:	4413      	add	r3, r2
 800ead4:	461a      	mov	r2, r3
 800ead6:	4908      	ldr	r1, [pc, #32]	; (800eaf8 <sys_timeouts_init+0x40>)
 800ead8:	f000 f810 	bl	800eafc <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	3301      	adds	r3, #1
 800eae0:	607b      	str	r3, [r7, #4]
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	2b02      	cmp	r3, #2
 800eae6:	d9ed      	bls.n	800eac4 <sys_timeouts_init+0xc>
  }
}
 800eae8:	bf00      	nop
 800eaea:	bf00      	nop
 800eaec:	3708      	adds	r7, #8
 800eaee:	46bd      	mov	sp, r7
 800eaf0:	bd80      	pop	{r7, pc}
 800eaf2:	bf00      	nop
 800eaf4:	080177b8 	.word	0x080177b8
 800eaf8:	0800ea55 	.word	0x0800ea55

0800eafc <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800eafc:	b580      	push	{r7, lr}
 800eafe:	b086      	sub	sp, #24
 800eb00:	af00      	add	r7, sp, #0
 800eb02:	60f8      	str	r0, [r7, #12]
 800eb04:	60b9      	str	r1, [r7, #8]
 800eb06:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800eb08:	68fb      	ldr	r3, [r7, #12]
 800eb0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800eb0e:	d306      	bcc.n	800eb1e <sys_timeout+0x22>
 800eb10:	4b0a      	ldr	r3, [pc, #40]	; (800eb3c <sys_timeout+0x40>)
 800eb12:	f240 1229 	movw	r2, #297	; 0x129
 800eb16:	490a      	ldr	r1, [pc, #40]	; (800eb40 <sys_timeout+0x44>)
 800eb18:	480a      	ldr	r0, [pc, #40]	; (800eb44 <sys_timeout+0x48>)
 800eb1a:	f002 fdf1 	bl	8011700 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800eb1e:	f7f6 f831 	bl	8004b84 <sys_now>
 800eb22:	4602      	mov	r2, r0
 800eb24:	68fb      	ldr	r3, [r7, #12]
 800eb26:	4413      	add	r3, r2
 800eb28:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800eb2a:	687a      	ldr	r2, [r7, #4]
 800eb2c:	68b9      	ldr	r1, [r7, #8]
 800eb2e:	6978      	ldr	r0, [r7, #20]
 800eb30:	f7ff ff22 	bl	800e978 <sys_timeout_abs>
#endif
}
 800eb34:	bf00      	nop
 800eb36:	3718      	adds	r7, #24
 800eb38:	46bd      	mov	sp, r7
 800eb3a:	bd80      	pop	{r7, pc}
 800eb3c:	080159a4 	.word	0x080159a4
 800eb40:	08015a40 	.word	0x08015a40
 800eb44:	08015a18 	.word	0x08015a18

0800eb48 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800eb48:	b580      	push	{r7, lr}
 800eb4a:	b084      	sub	sp, #16
 800eb4c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800eb4e:	f7f6 f819 	bl	8004b84 <sys_now>
 800eb52:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800eb54:	4b1a      	ldr	r3, [pc, #104]	; (800ebc0 <sys_check_timeouts+0x78>)
 800eb56:	781b      	ldrb	r3, [r3, #0]
 800eb58:	b2db      	uxtb	r3, r3
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d001      	beq.n	800eb62 <sys_check_timeouts+0x1a>
 800eb5e:	f7f9 f8cd 	bl	8007cfc <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800eb62:	4b18      	ldr	r3, [pc, #96]	; (800ebc4 <sys_check_timeouts+0x7c>)
 800eb64:	681b      	ldr	r3, [r3, #0]
 800eb66:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800eb68:	68bb      	ldr	r3, [r7, #8]
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	d022      	beq.n	800ebb4 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800eb6e:	68bb      	ldr	r3, [r7, #8]
 800eb70:	685b      	ldr	r3, [r3, #4]
 800eb72:	68fa      	ldr	r2, [r7, #12]
 800eb74:	1ad3      	subs	r3, r2, r3
 800eb76:	0fdb      	lsrs	r3, r3, #31
 800eb78:	f003 0301 	and.w	r3, r3, #1
 800eb7c:	b2db      	uxtb	r3, r3
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d11a      	bne.n	800ebb8 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800eb82:	68bb      	ldr	r3, [r7, #8]
 800eb84:	681b      	ldr	r3, [r3, #0]
 800eb86:	4a0f      	ldr	r2, [pc, #60]	; (800ebc4 <sys_check_timeouts+0x7c>)
 800eb88:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800eb8a:	68bb      	ldr	r3, [r7, #8]
 800eb8c:	689b      	ldr	r3, [r3, #8]
 800eb8e:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800eb90:	68bb      	ldr	r3, [r7, #8]
 800eb92:	68db      	ldr	r3, [r3, #12]
 800eb94:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800eb96:	68bb      	ldr	r3, [r7, #8]
 800eb98:	685b      	ldr	r3, [r3, #4]
 800eb9a:	4a0b      	ldr	r2, [pc, #44]	; (800ebc8 <sys_check_timeouts+0x80>)
 800eb9c:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800eb9e:	68b9      	ldr	r1, [r7, #8]
 800eba0:	2006      	movs	r0, #6
 800eba2:	f7f8 fdd3 	bl	800774c <memp_free>
    if (handler != NULL) {
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d0d3      	beq.n	800eb54 <sys_check_timeouts+0xc>
      handler(arg);
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	6838      	ldr	r0, [r7, #0]
 800ebb0:	4798      	blx	r3
  do {
 800ebb2:	e7cf      	b.n	800eb54 <sys_check_timeouts+0xc>
      return;
 800ebb4:	bf00      	nop
 800ebb6:	e000      	b.n	800ebba <sys_check_timeouts+0x72>
      return;
 800ebb8:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800ebba:	3710      	adds	r7, #16
 800ebbc:	46bd      	mov	sp, r7
 800ebbe:	bd80      	pop	{r7, pc}
 800ebc0:	2000d780 	.word	0x2000d780
 800ebc4:	20000580 	.word	0x20000580
 800ebc8:	20000584 	.word	0x20000584

0800ebcc <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800ebcc:	b580      	push	{r7, lr}
 800ebce:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800ebd0:	f002 fe24 	bl	801181c <rand>
 800ebd4:	4603      	mov	r3, r0
 800ebd6:	b29b      	uxth	r3, r3
 800ebd8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800ebdc:	b29b      	uxth	r3, r3
 800ebde:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800ebe2:	b29a      	uxth	r2, r3
 800ebe4:	4b01      	ldr	r3, [pc, #4]	; (800ebec <udp_init+0x20>)
 800ebe6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800ebe8:	bf00      	nop
 800ebea:	bd80      	pop	{r7, pc}
 800ebec:	20000024 	.word	0x20000024

0800ebf0 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800ebf0:	b580      	push	{r7, lr}
 800ebf2:	b084      	sub	sp, #16
 800ebf4:	af00      	add	r7, sp, #0
 800ebf6:	60f8      	str	r0, [r7, #12]
 800ebf8:	60b9      	str	r1, [r7, #8]
 800ebfa:	4613      	mov	r3, r2
 800ebfc:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800ebfe:	68fb      	ldr	r3, [r7, #12]
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	d105      	bne.n	800ec10 <udp_input_local_match+0x20>
 800ec04:	4b27      	ldr	r3, [pc, #156]	; (800eca4 <udp_input_local_match+0xb4>)
 800ec06:	2287      	movs	r2, #135	; 0x87
 800ec08:	4927      	ldr	r1, [pc, #156]	; (800eca8 <udp_input_local_match+0xb8>)
 800ec0a:	4828      	ldr	r0, [pc, #160]	; (800ecac <udp_input_local_match+0xbc>)
 800ec0c:	f002 fd78 	bl	8011700 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800ec10:	68bb      	ldr	r3, [r7, #8]
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	d105      	bne.n	800ec22 <udp_input_local_match+0x32>
 800ec16:	4b23      	ldr	r3, [pc, #140]	; (800eca4 <udp_input_local_match+0xb4>)
 800ec18:	2288      	movs	r2, #136	; 0x88
 800ec1a:	4925      	ldr	r1, [pc, #148]	; (800ecb0 <udp_input_local_match+0xc0>)
 800ec1c:	4823      	ldr	r0, [pc, #140]	; (800ecac <udp_input_local_match+0xbc>)
 800ec1e:	f002 fd6f 	bl	8011700 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ec22:	68fb      	ldr	r3, [r7, #12]
 800ec24:	7a1b      	ldrb	r3, [r3, #8]
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	d00b      	beq.n	800ec42 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	7a1a      	ldrb	r2, [r3, #8]
 800ec2e:	4b21      	ldr	r3, [pc, #132]	; (800ecb4 <udp_input_local_match+0xc4>)
 800ec30:	685b      	ldr	r3, [r3, #4]
 800ec32:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ec36:	3301      	adds	r3, #1
 800ec38:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ec3a:	429a      	cmp	r2, r3
 800ec3c:	d001      	beq.n	800ec42 <udp_input_local_match+0x52>
    return 0;
 800ec3e:	2300      	movs	r3, #0
 800ec40:	e02b      	b.n	800ec9a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800ec42:	79fb      	ldrb	r3, [r7, #7]
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	d018      	beq.n	800ec7a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800ec48:	68fb      	ldr	r3, [r7, #12]
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	d013      	beq.n	800ec76 <udp_input_local_match+0x86>
 800ec4e:	68fb      	ldr	r3, [r7, #12]
 800ec50:	681b      	ldr	r3, [r3, #0]
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	d00f      	beq.n	800ec76 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800ec56:	4b17      	ldr	r3, [pc, #92]	; (800ecb4 <udp_input_local_match+0xc4>)
 800ec58:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800ec5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ec5e:	d00a      	beq.n	800ec76 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800ec60:	68fb      	ldr	r3, [r7, #12]
 800ec62:	681a      	ldr	r2, [r3, #0]
 800ec64:	4b13      	ldr	r3, [pc, #76]	; (800ecb4 <udp_input_local_match+0xc4>)
 800ec66:	695b      	ldr	r3, [r3, #20]
 800ec68:	405a      	eors	r2, r3
 800ec6a:	68bb      	ldr	r3, [r7, #8]
 800ec6c:	3308      	adds	r3, #8
 800ec6e:	681b      	ldr	r3, [r3, #0]
 800ec70:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	d110      	bne.n	800ec98 <udp_input_local_match+0xa8>
          return 1;
 800ec76:	2301      	movs	r3, #1
 800ec78:	e00f      	b.n	800ec9a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800ec7a:	68fb      	ldr	r3, [r7, #12]
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	d009      	beq.n	800ec94 <udp_input_local_match+0xa4>
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	681b      	ldr	r3, [r3, #0]
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	d005      	beq.n	800ec94 <udp_input_local_match+0xa4>
 800ec88:	68fb      	ldr	r3, [r7, #12]
 800ec8a:	681a      	ldr	r2, [r3, #0]
 800ec8c:	4b09      	ldr	r3, [pc, #36]	; (800ecb4 <udp_input_local_match+0xc4>)
 800ec8e:	695b      	ldr	r3, [r3, #20]
 800ec90:	429a      	cmp	r2, r3
 800ec92:	d101      	bne.n	800ec98 <udp_input_local_match+0xa8>
        return 1;
 800ec94:	2301      	movs	r3, #1
 800ec96:	e000      	b.n	800ec9a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800ec98:	2300      	movs	r3, #0
}
 800ec9a:	4618      	mov	r0, r3
 800ec9c:	3710      	adds	r7, #16
 800ec9e:	46bd      	mov	sp, r7
 800eca0:	bd80      	pop	{r7, pc}
 800eca2:	bf00      	nop
 800eca4:	08015a8c 	.word	0x08015a8c
 800eca8:	08015abc 	.word	0x08015abc
 800ecac:	08015ae0 	.word	0x08015ae0
 800ecb0:	08015b08 	.word	0x08015b08
 800ecb4:	20004184 	.word	0x20004184

0800ecb8 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800ecb8:	b590      	push	{r4, r7, lr}
 800ecba:	b08d      	sub	sp, #52	; 0x34
 800ecbc:	af02      	add	r7, sp, #8
 800ecbe:	6078      	str	r0, [r7, #4]
 800ecc0:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800ecc2:	2300      	movs	r3, #0
 800ecc4:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	d105      	bne.n	800ecd8 <udp_input+0x20>
 800eccc:	4b7c      	ldr	r3, [pc, #496]	; (800eec0 <udp_input+0x208>)
 800ecce:	22cf      	movs	r2, #207	; 0xcf
 800ecd0:	497c      	ldr	r1, [pc, #496]	; (800eec4 <udp_input+0x20c>)
 800ecd2:	487d      	ldr	r0, [pc, #500]	; (800eec8 <udp_input+0x210>)
 800ecd4:	f002 fd14 	bl	8011700 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800ecd8:	683b      	ldr	r3, [r7, #0]
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	d105      	bne.n	800ecea <udp_input+0x32>
 800ecde:	4b78      	ldr	r3, [pc, #480]	; (800eec0 <udp_input+0x208>)
 800ece0:	22d0      	movs	r2, #208	; 0xd0
 800ece2:	497a      	ldr	r1, [pc, #488]	; (800eecc <udp_input+0x214>)
 800ece4:	4878      	ldr	r0, [pc, #480]	; (800eec8 <udp_input+0x210>)
 800ece6:	f002 fd0b 	bl	8011700 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	895b      	ldrh	r3, [r3, #10]
 800ecee:	2b07      	cmp	r3, #7
 800ecf0:	d803      	bhi.n	800ecfa <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800ecf2:	6878      	ldr	r0, [r7, #4]
 800ecf4:	f7f9 fb3c 	bl	8008370 <pbuf_free>
    goto end;
 800ecf8:	e0de      	b.n	800eeb8 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	685b      	ldr	r3, [r3, #4]
 800ecfe:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800ed00:	4b73      	ldr	r3, [pc, #460]	; (800eed0 <udp_input+0x218>)
 800ed02:	695b      	ldr	r3, [r3, #20]
 800ed04:	4a72      	ldr	r2, [pc, #456]	; (800eed0 <udp_input+0x218>)
 800ed06:	6812      	ldr	r2, [r2, #0]
 800ed08:	4611      	mov	r1, r2
 800ed0a:	4618      	mov	r0, r3
 800ed0c:	f001 fc88 	bl	8010620 <ip4_addr_isbroadcast_u32>
 800ed10:	4603      	mov	r3, r0
 800ed12:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800ed14:	697b      	ldr	r3, [r7, #20]
 800ed16:	881b      	ldrh	r3, [r3, #0]
 800ed18:	b29b      	uxth	r3, r3
 800ed1a:	4618      	mov	r0, r3
 800ed1c:	f7f7 ff96 	bl	8006c4c <lwip_htons>
 800ed20:	4603      	mov	r3, r0
 800ed22:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800ed24:	697b      	ldr	r3, [r7, #20]
 800ed26:	885b      	ldrh	r3, [r3, #2]
 800ed28:	b29b      	uxth	r3, r3
 800ed2a:	4618      	mov	r0, r3
 800ed2c:	f7f7 ff8e 	bl	8006c4c <lwip_htons>
 800ed30:	4603      	mov	r3, r0
 800ed32:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800ed34:	2300      	movs	r3, #0
 800ed36:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800ed38:	2300      	movs	r3, #0
 800ed3a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800ed3c:	2300      	movs	r3, #0
 800ed3e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ed40:	4b64      	ldr	r3, [pc, #400]	; (800eed4 <udp_input+0x21c>)
 800ed42:	681b      	ldr	r3, [r3, #0]
 800ed44:	627b      	str	r3, [r7, #36]	; 0x24
 800ed46:	e054      	b.n	800edf2 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800ed48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed4a:	8a5b      	ldrh	r3, [r3, #18]
 800ed4c:	89fa      	ldrh	r2, [r7, #14]
 800ed4e:	429a      	cmp	r2, r3
 800ed50:	d14a      	bne.n	800ede8 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800ed52:	7cfb      	ldrb	r3, [r7, #19]
 800ed54:	461a      	mov	r2, r3
 800ed56:	6839      	ldr	r1, [r7, #0]
 800ed58:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ed5a:	f7ff ff49 	bl	800ebf0 <udp_input_local_match>
 800ed5e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	d041      	beq.n	800ede8 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800ed64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed66:	7c1b      	ldrb	r3, [r3, #16]
 800ed68:	f003 0304 	and.w	r3, r3, #4
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d11d      	bne.n	800edac <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800ed70:	69fb      	ldr	r3, [r7, #28]
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	d102      	bne.n	800ed7c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800ed76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed78:	61fb      	str	r3, [r7, #28]
 800ed7a:	e017      	b.n	800edac <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800ed7c:	7cfb      	ldrb	r3, [r7, #19]
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	d014      	beq.n	800edac <udp_input+0xf4>
 800ed82:	4b53      	ldr	r3, [pc, #332]	; (800eed0 <udp_input+0x218>)
 800ed84:	695b      	ldr	r3, [r3, #20]
 800ed86:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ed8a:	d10f      	bne.n	800edac <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800ed8c:	69fb      	ldr	r3, [r7, #28]
 800ed8e:	681a      	ldr	r2, [r3, #0]
 800ed90:	683b      	ldr	r3, [r7, #0]
 800ed92:	3304      	adds	r3, #4
 800ed94:	681b      	ldr	r3, [r3, #0]
 800ed96:	429a      	cmp	r2, r3
 800ed98:	d008      	beq.n	800edac <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800ed9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed9c:	681a      	ldr	r2, [r3, #0]
 800ed9e:	683b      	ldr	r3, [r7, #0]
 800eda0:	3304      	adds	r3, #4
 800eda2:	681b      	ldr	r3, [r3, #0]
 800eda4:	429a      	cmp	r2, r3
 800eda6:	d101      	bne.n	800edac <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800eda8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edaa:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800edac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edae:	8a9b      	ldrh	r3, [r3, #20]
 800edb0:	8a3a      	ldrh	r2, [r7, #16]
 800edb2:	429a      	cmp	r2, r3
 800edb4:	d118      	bne.n	800ede8 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800edb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edb8:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800edba:	2b00      	cmp	r3, #0
 800edbc:	d005      	beq.n	800edca <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800edbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edc0:	685a      	ldr	r2, [r3, #4]
 800edc2:	4b43      	ldr	r3, [pc, #268]	; (800eed0 <udp_input+0x218>)
 800edc4:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800edc6:	429a      	cmp	r2, r3
 800edc8:	d10e      	bne.n	800ede8 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800edca:	6a3b      	ldr	r3, [r7, #32]
 800edcc:	2b00      	cmp	r3, #0
 800edce:	d014      	beq.n	800edfa <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800edd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edd2:	68da      	ldr	r2, [r3, #12]
 800edd4:	6a3b      	ldr	r3, [r7, #32]
 800edd6:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800edd8:	4b3e      	ldr	r3, [pc, #248]	; (800eed4 <udp_input+0x21c>)
 800edda:	681a      	ldr	r2, [r3, #0]
 800eddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edde:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800ede0:	4a3c      	ldr	r2, [pc, #240]	; (800eed4 <udp_input+0x21c>)
 800ede2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ede4:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800ede6:	e008      	b.n	800edfa <udp_input+0x142>
      }
    }

    prev = pcb;
 800ede8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edea:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800edec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edee:	68db      	ldr	r3, [r3, #12]
 800edf0:	627b      	str	r3, [r7, #36]	; 0x24
 800edf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	d1a7      	bne.n	800ed48 <udp_input+0x90>
 800edf8:	e000      	b.n	800edfc <udp_input+0x144>
        break;
 800edfa:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800edfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	d101      	bne.n	800ee06 <udp_input+0x14e>
    pcb = uncon_pcb;
 800ee02:	69fb      	ldr	r3, [r7, #28]
 800ee04:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800ee06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	d002      	beq.n	800ee12 <udp_input+0x15a>
    for_us = 1;
 800ee0c:	2301      	movs	r3, #1
 800ee0e:	76fb      	strb	r3, [r7, #27]
 800ee10:	e00a      	b.n	800ee28 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800ee12:	683b      	ldr	r3, [r7, #0]
 800ee14:	3304      	adds	r3, #4
 800ee16:	681a      	ldr	r2, [r3, #0]
 800ee18:	4b2d      	ldr	r3, [pc, #180]	; (800eed0 <udp_input+0x218>)
 800ee1a:	695b      	ldr	r3, [r3, #20]
 800ee1c:	429a      	cmp	r2, r3
 800ee1e:	bf0c      	ite	eq
 800ee20:	2301      	moveq	r3, #1
 800ee22:	2300      	movne	r3, #0
 800ee24:	b2db      	uxtb	r3, r3
 800ee26:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800ee28:	7efb      	ldrb	r3, [r7, #27]
 800ee2a:	2b00      	cmp	r3, #0
 800ee2c:	d041      	beq.n	800eeb2 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800ee2e:	2108      	movs	r1, #8
 800ee30:	6878      	ldr	r0, [r7, #4]
 800ee32:	f7f9 fa17 	bl	8008264 <pbuf_remove_header>
 800ee36:	4603      	mov	r3, r0
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d00a      	beq.n	800ee52 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800ee3c:	4b20      	ldr	r3, [pc, #128]	; (800eec0 <udp_input+0x208>)
 800ee3e:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800ee42:	4925      	ldr	r1, [pc, #148]	; (800eed8 <udp_input+0x220>)
 800ee44:	4820      	ldr	r0, [pc, #128]	; (800eec8 <udp_input+0x210>)
 800ee46:	f002 fc5b 	bl	8011700 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800ee4a:	6878      	ldr	r0, [r7, #4]
 800ee4c:	f7f9 fa90 	bl	8008370 <pbuf_free>
      goto end;
 800ee50:	e032      	b.n	800eeb8 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800ee52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d012      	beq.n	800ee7e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800ee58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee5a:	699b      	ldr	r3, [r3, #24]
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	d00a      	beq.n	800ee76 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800ee60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee62:	699c      	ldr	r4, [r3, #24]
 800ee64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee66:	69d8      	ldr	r0, [r3, #28]
 800ee68:	8a3b      	ldrh	r3, [r7, #16]
 800ee6a:	9300      	str	r3, [sp, #0]
 800ee6c:	4b1b      	ldr	r3, [pc, #108]	; (800eedc <udp_input+0x224>)
 800ee6e:	687a      	ldr	r2, [r7, #4]
 800ee70:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ee72:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800ee74:	e021      	b.n	800eeba <udp_input+0x202>
        pbuf_free(p);
 800ee76:	6878      	ldr	r0, [r7, #4]
 800ee78:	f7f9 fa7a 	bl	8008370 <pbuf_free>
        goto end;
 800ee7c:	e01c      	b.n	800eeb8 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800ee7e:	7cfb      	ldrb	r3, [r7, #19]
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	d112      	bne.n	800eeaa <udp_input+0x1f2>
 800ee84:	4b12      	ldr	r3, [pc, #72]	; (800eed0 <udp_input+0x218>)
 800ee86:	695b      	ldr	r3, [r3, #20]
 800ee88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ee8c:	2be0      	cmp	r3, #224	; 0xe0
 800ee8e:	d00c      	beq.n	800eeaa <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800ee90:	4b0f      	ldr	r3, [pc, #60]	; (800eed0 <udp_input+0x218>)
 800ee92:	899b      	ldrh	r3, [r3, #12]
 800ee94:	3308      	adds	r3, #8
 800ee96:	b29b      	uxth	r3, r3
 800ee98:	b21b      	sxth	r3, r3
 800ee9a:	4619      	mov	r1, r3
 800ee9c:	6878      	ldr	r0, [r7, #4]
 800ee9e:	f7f9 fa54 	bl	800834a <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800eea2:	2103      	movs	r1, #3
 800eea4:	6878      	ldr	r0, [r7, #4]
 800eea6:	f001 f89b 	bl	800ffe0 <icmp_dest_unreach>
      pbuf_free(p);
 800eeaa:	6878      	ldr	r0, [r7, #4]
 800eeac:	f7f9 fa60 	bl	8008370 <pbuf_free>
  return;
 800eeb0:	e003      	b.n	800eeba <udp_input+0x202>
    pbuf_free(p);
 800eeb2:	6878      	ldr	r0, [r7, #4]
 800eeb4:	f7f9 fa5c 	bl	8008370 <pbuf_free>
  return;
 800eeb8:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800eeba:	372c      	adds	r7, #44	; 0x2c
 800eebc:	46bd      	mov	sp, r7
 800eebe:	bd90      	pop	{r4, r7, pc}
 800eec0:	08015a8c 	.word	0x08015a8c
 800eec4:	08015b30 	.word	0x08015b30
 800eec8:	08015ae0 	.word	0x08015ae0
 800eecc:	08015b48 	.word	0x08015b48
 800eed0:	20004184 	.word	0x20004184
 800eed4:	2000d7a0 	.word	0x2000d7a0
 800eed8:	08015b64 	.word	0x08015b64
 800eedc:	20004194 	.word	0x20004194

0800eee0 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800eee0:	b480      	push	{r7}
 800eee2:	b085      	sub	sp, #20
 800eee4:	af00      	add	r7, sp, #0
 800eee6:	6078      	str	r0, [r7, #4]
 800eee8:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	2b00      	cmp	r3, #0
 800eeee:	d01e      	beq.n	800ef2e <udp_netif_ip_addr_changed+0x4e>
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	681b      	ldr	r3, [r3, #0]
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	d01a      	beq.n	800ef2e <udp_netif_ip_addr_changed+0x4e>
 800eef8:	683b      	ldr	r3, [r7, #0]
 800eefa:	2b00      	cmp	r3, #0
 800eefc:	d017      	beq.n	800ef2e <udp_netif_ip_addr_changed+0x4e>
 800eefe:	683b      	ldr	r3, [r7, #0]
 800ef00:	681b      	ldr	r3, [r3, #0]
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	d013      	beq.n	800ef2e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800ef06:	4b0d      	ldr	r3, [pc, #52]	; (800ef3c <udp_netif_ip_addr_changed+0x5c>)
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	60fb      	str	r3, [r7, #12]
 800ef0c:	e00c      	b.n	800ef28 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800ef0e:	68fb      	ldr	r3, [r7, #12]
 800ef10:	681a      	ldr	r2, [r3, #0]
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	681b      	ldr	r3, [r3, #0]
 800ef16:	429a      	cmp	r2, r3
 800ef18:	d103      	bne.n	800ef22 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800ef1a:	683b      	ldr	r3, [r7, #0]
 800ef1c:	681a      	ldr	r2, [r3, #0]
 800ef1e:	68fb      	ldr	r3, [r7, #12]
 800ef20:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800ef22:	68fb      	ldr	r3, [r7, #12]
 800ef24:	68db      	ldr	r3, [r3, #12]
 800ef26:	60fb      	str	r3, [r7, #12]
 800ef28:	68fb      	ldr	r3, [r7, #12]
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	d1ef      	bne.n	800ef0e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800ef2e:	bf00      	nop
 800ef30:	3714      	adds	r7, #20
 800ef32:	46bd      	mov	sp, r7
 800ef34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef38:	4770      	bx	lr
 800ef3a:	bf00      	nop
 800ef3c:	2000d7a0 	.word	0x2000d7a0

0800ef40 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800ef40:	b580      	push	{r7, lr}
 800ef42:	b082      	sub	sp, #8
 800ef44:	af00      	add	r7, sp, #0
 800ef46:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800ef48:	4915      	ldr	r1, [pc, #84]	; (800efa0 <etharp_free_entry+0x60>)
 800ef4a:	687a      	ldr	r2, [r7, #4]
 800ef4c:	4613      	mov	r3, r2
 800ef4e:	005b      	lsls	r3, r3, #1
 800ef50:	4413      	add	r3, r2
 800ef52:	00db      	lsls	r3, r3, #3
 800ef54:	440b      	add	r3, r1
 800ef56:	681b      	ldr	r3, [r3, #0]
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	d013      	beq.n	800ef84 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800ef5c:	4910      	ldr	r1, [pc, #64]	; (800efa0 <etharp_free_entry+0x60>)
 800ef5e:	687a      	ldr	r2, [r7, #4]
 800ef60:	4613      	mov	r3, r2
 800ef62:	005b      	lsls	r3, r3, #1
 800ef64:	4413      	add	r3, r2
 800ef66:	00db      	lsls	r3, r3, #3
 800ef68:	440b      	add	r3, r1
 800ef6a:	681b      	ldr	r3, [r3, #0]
 800ef6c:	4618      	mov	r0, r3
 800ef6e:	f7f9 f9ff 	bl	8008370 <pbuf_free>
    arp_table[i].q = NULL;
 800ef72:	490b      	ldr	r1, [pc, #44]	; (800efa0 <etharp_free_entry+0x60>)
 800ef74:	687a      	ldr	r2, [r7, #4]
 800ef76:	4613      	mov	r3, r2
 800ef78:	005b      	lsls	r3, r3, #1
 800ef7a:	4413      	add	r3, r2
 800ef7c:	00db      	lsls	r3, r3, #3
 800ef7e:	440b      	add	r3, r1
 800ef80:	2200      	movs	r2, #0
 800ef82:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800ef84:	4906      	ldr	r1, [pc, #24]	; (800efa0 <etharp_free_entry+0x60>)
 800ef86:	687a      	ldr	r2, [r7, #4]
 800ef88:	4613      	mov	r3, r2
 800ef8a:	005b      	lsls	r3, r3, #1
 800ef8c:	4413      	add	r3, r2
 800ef8e:	00db      	lsls	r3, r3, #3
 800ef90:	440b      	add	r3, r1
 800ef92:	3314      	adds	r3, #20
 800ef94:	2200      	movs	r2, #0
 800ef96:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800ef98:	bf00      	nop
 800ef9a:	3708      	adds	r7, #8
 800ef9c:	46bd      	mov	sp, r7
 800ef9e:	bd80      	pop	{r7, pc}
 800efa0:	2000058c 	.word	0x2000058c

0800efa4 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800efa4:	b580      	push	{r7, lr}
 800efa6:	b082      	sub	sp, #8
 800efa8:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800efaa:	2300      	movs	r3, #0
 800efac:	607b      	str	r3, [r7, #4]
 800efae:	e096      	b.n	800f0de <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800efb0:	494f      	ldr	r1, [pc, #316]	; (800f0f0 <etharp_tmr+0x14c>)
 800efb2:	687a      	ldr	r2, [r7, #4]
 800efb4:	4613      	mov	r3, r2
 800efb6:	005b      	lsls	r3, r3, #1
 800efb8:	4413      	add	r3, r2
 800efba:	00db      	lsls	r3, r3, #3
 800efbc:	440b      	add	r3, r1
 800efbe:	3314      	adds	r3, #20
 800efc0:	781b      	ldrb	r3, [r3, #0]
 800efc2:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800efc4:	78fb      	ldrb	r3, [r7, #3]
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	f000 8086 	beq.w	800f0d8 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800efcc:	4948      	ldr	r1, [pc, #288]	; (800f0f0 <etharp_tmr+0x14c>)
 800efce:	687a      	ldr	r2, [r7, #4]
 800efd0:	4613      	mov	r3, r2
 800efd2:	005b      	lsls	r3, r3, #1
 800efd4:	4413      	add	r3, r2
 800efd6:	00db      	lsls	r3, r3, #3
 800efd8:	440b      	add	r3, r1
 800efda:	3312      	adds	r3, #18
 800efdc:	881b      	ldrh	r3, [r3, #0]
 800efde:	3301      	adds	r3, #1
 800efe0:	b298      	uxth	r0, r3
 800efe2:	4943      	ldr	r1, [pc, #268]	; (800f0f0 <etharp_tmr+0x14c>)
 800efe4:	687a      	ldr	r2, [r7, #4]
 800efe6:	4613      	mov	r3, r2
 800efe8:	005b      	lsls	r3, r3, #1
 800efea:	4413      	add	r3, r2
 800efec:	00db      	lsls	r3, r3, #3
 800efee:	440b      	add	r3, r1
 800eff0:	3312      	adds	r3, #18
 800eff2:	4602      	mov	r2, r0
 800eff4:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800eff6:	493e      	ldr	r1, [pc, #248]	; (800f0f0 <etharp_tmr+0x14c>)
 800eff8:	687a      	ldr	r2, [r7, #4]
 800effa:	4613      	mov	r3, r2
 800effc:	005b      	lsls	r3, r3, #1
 800effe:	4413      	add	r3, r2
 800f000:	00db      	lsls	r3, r3, #3
 800f002:	440b      	add	r3, r1
 800f004:	3312      	adds	r3, #18
 800f006:	881b      	ldrh	r3, [r3, #0]
 800f008:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800f00c:	d215      	bcs.n	800f03a <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800f00e:	4938      	ldr	r1, [pc, #224]	; (800f0f0 <etharp_tmr+0x14c>)
 800f010:	687a      	ldr	r2, [r7, #4]
 800f012:	4613      	mov	r3, r2
 800f014:	005b      	lsls	r3, r3, #1
 800f016:	4413      	add	r3, r2
 800f018:	00db      	lsls	r3, r3, #3
 800f01a:	440b      	add	r3, r1
 800f01c:	3314      	adds	r3, #20
 800f01e:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800f020:	2b01      	cmp	r3, #1
 800f022:	d10e      	bne.n	800f042 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800f024:	4932      	ldr	r1, [pc, #200]	; (800f0f0 <etharp_tmr+0x14c>)
 800f026:	687a      	ldr	r2, [r7, #4]
 800f028:	4613      	mov	r3, r2
 800f02a:	005b      	lsls	r3, r3, #1
 800f02c:	4413      	add	r3, r2
 800f02e:	00db      	lsls	r3, r3, #3
 800f030:	440b      	add	r3, r1
 800f032:	3312      	adds	r3, #18
 800f034:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800f036:	2b04      	cmp	r3, #4
 800f038:	d903      	bls.n	800f042 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800f03a:	6878      	ldr	r0, [r7, #4]
 800f03c:	f7ff ff80 	bl	800ef40 <etharp_free_entry>
 800f040:	e04a      	b.n	800f0d8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800f042:	492b      	ldr	r1, [pc, #172]	; (800f0f0 <etharp_tmr+0x14c>)
 800f044:	687a      	ldr	r2, [r7, #4]
 800f046:	4613      	mov	r3, r2
 800f048:	005b      	lsls	r3, r3, #1
 800f04a:	4413      	add	r3, r2
 800f04c:	00db      	lsls	r3, r3, #3
 800f04e:	440b      	add	r3, r1
 800f050:	3314      	adds	r3, #20
 800f052:	781b      	ldrb	r3, [r3, #0]
 800f054:	2b03      	cmp	r3, #3
 800f056:	d10a      	bne.n	800f06e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800f058:	4925      	ldr	r1, [pc, #148]	; (800f0f0 <etharp_tmr+0x14c>)
 800f05a:	687a      	ldr	r2, [r7, #4]
 800f05c:	4613      	mov	r3, r2
 800f05e:	005b      	lsls	r3, r3, #1
 800f060:	4413      	add	r3, r2
 800f062:	00db      	lsls	r3, r3, #3
 800f064:	440b      	add	r3, r1
 800f066:	3314      	adds	r3, #20
 800f068:	2204      	movs	r2, #4
 800f06a:	701a      	strb	r2, [r3, #0]
 800f06c:	e034      	b.n	800f0d8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800f06e:	4920      	ldr	r1, [pc, #128]	; (800f0f0 <etharp_tmr+0x14c>)
 800f070:	687a      	ldr	r2, [r7, #4]
 800f072:	4613      	mov	r3, r2
 800f074:	005b      	lsls	r3, r3, #1
 800f076:	4413      	add	r3, r2
 800f078:	00db      	lsls	r3, r3, #3
 800f07a:	440b      	add	r3, r1
 800f07c:	3314      	adds	r3, #20
 800f07e:	781b      	ldrb	r3, [r3, #0]
 800f080:	2b04      	cmp	r3, #4
 800f082:	d10a      	bne.n	800f09a <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800f084:	491a      	ldr	r1, [pc, #104]	; (800f0f0 <etharp_tmr+0x14c>)
 800f086:	687a      	ldr	r2, [r7, #4]
 800f088:	4613      	mov	r3, r2
 800f08a:	005b      	lsls	r3, r3, #1
 800f08c:	4413      	add	r3, r2
 800f08e:	00db      	lsls	r3, r3, #3
 800f090:	440b      	add	r3, r1
 800f092:	3314      	adds	r3, #20
 800f094:	2202      	movs	r2, #2
 800f096:	701a      	strb	r2, [r3, #0]
 800f098:	e01e      	b.n	800f0d8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800f09a:	4915      	ldr	r1, [pc, #84]	; (800f0f0 <etharp_tmr+0x14c>)
 800f09c:	687a      	ldr	r2, [r7, #4]
 800f09e:	4613      	mov	r3, r2
 800f0a0:	005b      	lsls	r3, r3, #1
 800f0a2:	4413      	add	r3, r2
 800f0a4:	00db      	lsls	r3, r3, #3
 800f0a6:	440b      	add	r3, r1
 800f0a8:	3314      	adds	r3, #20
 800f0aa:	781b      	ldrb	r3, [r3, #0]
 800f0ac:	2b01      	cmp	r3, #1
 800f0ae:	d113      	bne.n	800f0d8 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800f0b0:	490f      	ldr	r1, [pc, #60]	; (800f0f0 <etharp_tmr+0x14c>)
 800f0b2:	687a      	ldr	r2, [r7, #4]
 800f0b4:	4613      	mov	r3, r2
 800f0b6:	005b      	lsls	r3, r3, #1
 800f0b8:	4413      	add	r3, r2
 800f0ba:	00db      	lsls	r3, r3, #3
 800f0bc:	440b      	add	r3, r1
 800f0be:	3308      	adds	r3, #8
 800f0c0:	6818      	ldr	r0, [r3, #0]
 800f0c2:	687a      	ldr	r2, [r7, #4]
 800f0c4:	4613      	mov	r3, r2
 800f0c6:	005b      	lsls	r3, r3, #1
 800f0c8:	4413      	add	r3, r2
 800f0ca:	00db      	lsls	r3, r3, #3
 800f0cc:	4a08      	ldr	r2, [pc, #32]	; (800f0f0 <etharp_tmr+0x14c>)
 800f0ce:	4413      	add	r3, r2
 800f0d0:	3304      	adds	r3, #4
 800f0d2:	4619      	mov	r1, r3
 800f0d4:	f000 fe6e 	bl	800fdb4 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	3301      	adds	r3, #1
 800f0dc:	607b      	str	r3, [r7, #4]
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	2b09      	cmp	r3, #9
 800f0e2:	f77f af65 	ble.w	800efb0 <etharp_tmr+0xc>
      }
    }
  }
}
 800f0e6:	bf00      	nop
 800f0e8:	bf00      	nop
 800f0ea:	3708      	adds	r7, #8
 800f0ec:	46bd      	mov	sp, r7
 800f0ee:	bd80      	pop	{r7, pc}
 800f0f0:	2000058c 	.word	0x2000058c

0800f0f4 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800f0f4:	b580      	push	{r7, lr}
 800f0f6:	b08a      	sub	sp, #40	; 0x28
 800f0f8:	af00      	add	r7, sp, #0
 800f0fa:	60f8      	str	r0, [r7, #12]
 800f0fc:	460b      	mov	r3, r1
 800f0fe:	607a      	str	r2, [r7, #4]
 800f100:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800f102:	230a      	movs	r3, #10
 800f104:	84fb      	strh	r3, [r7, #38]	; 0x26
 800f106:	230a      	movs	r3, #10
 800f108:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800f10a:	230a      	movs	r3, #10
 800f10c:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800f10e:	2300      	movs	r3, #0
 800f110:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800f112:	230a      	movs	r3, #10
 800f114:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800f116:	2300      	movs	r3, #0
 800f118:	83bb      	strh	r3, [r7, #28]
 800f11a:	2300      	movs	r3, #0
 800f11c:	837b      	strh	r3, [r7, #26]
 800f11e:	2300      	movs	r3, #0
 800f120:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f122:	2300      	movs	r3, #0
 800f124:	843b      	strh	r3, [r7, #32]
 800f126:	e0ae      	b.n	800f286 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800f128:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f12c:	49a6      	ldr	r1, [pc, #664]	; (800f3c8 <etharp_find_entry+0x2d4>)
 800f12e:	4613      	mov	r3, r2
 800f130:	005b      	lsls	r3, r3, #1
 800f132:	4413      	add	r3, r2
 800f134:	00db      	lsls	r3, r3, #3
 800f136:	440b      	add	r3, r1
 800f138:	3314      	adds	r3, #20
 800f13a:	781b      	ldrb	r3, [r3, #0]
 800f13c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800f13e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800f142:	2b0a      	cmp	r3, #10
 800f144:	d105      	bne.n	800f152 <etharp_find_entry+0x5e>
 800f146:	7dfb      	ldrb	r3, [r7, #23]
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d102      	bne.n	800f152 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800f14c:	8c3b      	ldrh	r3, [r7, #32]
 800f14e:	847b      	strh	r3, [r7, #34]	; 0x22
 800f150:	e095      	b.n	800f27e <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800f152:	7dfb      	ldrb	r3, [r7, #23]
 800f154:	2b00      	cmp	r3, #0
 800f156:	f000 8092 	beq.w	800f27e <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800f15a:	7dfb      	ldrb	r3, [r7, #23]
 800f15c:	2b01      	cmp	r3, #1
 800f15e:	d009      	beq.n	800f174 <etharp_find_entry+0x80>
 800f160:	7dfb      	ldrb	r3, [r7, #23]
 800f162:	2b01      	cmp	r3, #1
 800f164:	d806      	bhi.n	800f174 <etharp_find_entry+0x80>
 800f166:	4b99      	ldr	r3, [pc, #612]	; (800f3cc <etharp_find_entry+0x2d8>)
 800f168:	f240 1223 	movw	r2, #291	; 0x123
 800f16c:	4998      	ldr	r1, [pc, #608]	; (800f3d0 <etharp_find_entry+0x2dc>)
 800f16e:	4899      	ldr	r0, [pc, #612]	; (800f3d4 <etharp_find_entry+0x2e0>)
 800f170:	f002 fac6 	bl	8011700 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800f174:	68fb      	ldr	r3, [r7, #12]
 800f176:	2b00      	cmp	r3, #0
 800f178:	d020      	beq.n	800f1bc <etharp_find_entry+0xc8>
 800f17a:	68fb      	ldr	r3, [r7, #12]
 800f17c:	6819      	ldr	r1, [r3, #0]
 800f17e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f182:	4891      	ldr	r0, [pc, #580]	; (800f3c8 <etharp_find_entry+0x2d4>)
 800f184:	4613      	mov	r3, r2
 800f186:	005b      	lsls	r3, r3, #1
 800f188:	4413      	add	r3, r2
 800f18a:	00db      	lsls	r3, r3, #3
 800f18c:	4403      	add	r3, r0
 800f18e:	3304      	adds	r3, #4
 800f190:	681b      	ldr	r3, [r3, #0]
 800f192:	4299      	cmp	r1, r3
 800f194:	d112      	bne.n	800f1bc <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	2b00      	cmp	r3, #0
 800f19a:	d00c      	beq.n	800f1b6 <etharp_find_entry+0xc2>
 800f19c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f1a0:	4989      	ldr	r1, [pc, #548]	; (800f3c8 <etharp_find_entry+0x2d4>)
 800f1a2:	4613      	mov	r3, r2
 800f1a4:	005b      	lsls	r3, r3, #1
 800f1a6:	4413      	add	r3, r2
 800f1a8:	00db      	lsls	r3, r3, #3
 800f1aa:	440b      	add	r3, r1
 800f1ac:	3308      	adds	r3, #8
 800f1ae:	681b      	ldr	r3, [r3, #0]
 800f1b0:	687a      	ldr	r2, [r7, #4]
 800f1b2:	429a      	cmp	r2, r3
 800f1b4:	d102      	bne.n	800f1bc <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800f1b6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800f1ba:	e100      	b.n	800f3be <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800f1bc:	7dfb      	ldrb	r3, [r7, #23]
 800f1be:	2b01      	cmp	r3, #1
 800f1c0:	d140      	bne.n	800f244 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800f1c2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f1c6:	4980      	ldr	r1, [pc, #512]	; (800f3c8 <etharp_find_entry+0x2d4>)
 800f1c8:	4613      	mov	r3, r2
 800f1ca:	005b      	lsls	r3, r3, #1
 800f1cc:	4413      	add	r3, r2
 800f1ce:	00db      	lsls	r3, r3, #3
 800f1d0:	440b      	add	r3, r1
 800f1d2:	681b      	ldr	r3, [r3, #0]
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d01a      	beq.n	800f20e <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800f1d8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f1dc:	497a      	ldr	r1, [pc, #488]	; (800f3c8 <etharp_find_entry+0x2d4>)
 800f1de:	4613      	mov	r3, r2
 800f1e0:	005b      	lsls	r3, r3, #1
 800f1e2:	4413      	add	r3, r2
 800f1e4:	00db      	lsls	r3, r3, #3
 800f1e6:	440b      	add	r3, r1
 800f1e8:	3312      	adds	r3, #18
 800f1ea:	881b      	ldrh	r3, [r3, #0]
 800f1ec:	8bba      	ldrh	r2, [r7, #28]
 800f1ee:	429a      	cmp	r2, r3
 800f1f0:	d845      	bhi.n	800f27e <etharp_find_entry+0x18a>
            old_queue = i;
 800f1f2:	8c3b      	ldrh	r3, [r7, #32]
 800f1f4:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800f1f6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f1fa:	4973      	ldr	r1, [pc, #460]	; (800f3c8 <etharp_find_entry+0x2d4>)
 800f1fc:	4613      	mov	r3, r2
 800f1fe:	005b      	lsls	r3, r3, #1
 800f200:	4413      	add	r3, r2
 800f202:	00db      	lsls	r3, r3, #3
 800f204:	440b      	add	r3, r1
 800f206:	3312      	adds	r3, #18
 800f208:	881b      	ldrh	r3, [r3, #0]
 800f20a:	83bb      	strh	r3, [r7, #28]
 800f20c:	e037      	b.n	800f27e <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800f20e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f212:	496d      	ldr	r1, [pc, #436]	; (800f3c8 <etharp_find_entry+0x2d4>)
 800f214:	4613      	mov	r3, r2
 800f216:	005b      	lsls	r3, r3, #1
 800f218:	4413      	add	r3, r2
 800f21a:	00db      	lsls	r3, r3, #3
 800f21c:	440b      	add	r3, r1
 800f21e:	3312      	adds	r3, #18
 800f220:	881b      	ldrh	r3, [r3, #0]
 800f222:	8b7a      	ldrh	r2, [r7, #26]
 800f224:	429a      	cmp	r2, r3
 800f226:	d82a      	bhi.n	800f27e <etharp_find_entry+0x18a>
            old_pending = i;
 800f228:	8c3b      	ldrh	r3, [r7, #32]
 800f22a:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800f22c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f230:	4965      	ldr	r1, [pc, #404]	; (800f3c8 <etharp_find_entry+0x2d4>)
 800f232:	4613      	mov	r3, r2
 800f234:	005b      	lsls	r3, r3, #1
 800f236:	4413      	add	r3, r2
 800f238:	00db      	lsls	r3, r3, #3
 800f23a:	440b      	add	r3, r1
 800f23c:	3312      	adds	r3, #18
 800f23e:	881b      	ldrh	r3, [r3, #0]
 800f240:	837b      	strh	r3, [r7, #26]
 800f242:	e01c      	b.n	800f27e <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800f244:	7dfb      	ldrb	r3, [r7, #23]
 800f246:	2b01      	cmp	r3, #1
 800f248:	d919      	bls.n	800f27e <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800f24a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f24e:	495e      	ldr	r1, [pc, #376]	; (800f3c8 <etharp_find_entry+0x2d4>)
 800f250:	4613      	mov	r3, r2
 800f252:	005b      	lsls	r3, r3, #1
 800f254:	4413      	add	r3, r2
 800f256:	00db      	lsls	r3, r3, #3
 800f258:	440b      	add	r3, r1
 800f25a:	3312      	adds	r3, #18
 800f25c:	881b      	ldrh	r3, [r3, #0]
 800f25e:	8b3a      	ldrh	r2, [r7, #24]
 800f260:	429a      	cmp	r2, r3
 800f262:	d80c      	bhi.n	800f27e <etharp_find_entry+0x18a>
            old_stable = i;
 800f264:	8c3b      	ldrh	r3, [r7, #32]
 800f266:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800f268:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f26c:	4956      	ldr	r1, [pc, #344]	; (800f3c8 <etharp_find_entry+0x2d4>)
 800f26e:	4613      	mov	r3, r2
 800f270:	005b      	lsls	r3, r3, #1
 800f272:	4413      	add	r3, r2
 800f274:	00db      	lsls	r3, r3, #3
 800f276:	440b      	add	r3, r1
 800f278:	3312      	adds	r3, #18
 800f27a:	881b      	ldrh	r3, [r3, #0]
 800f27c:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f27e:	8c3b      	ldrh	r3, [r7, #32]
 800f280:	3301      	adds	r3, #1
 800f282:	b29b      	uxth	r3, r3
 800f284:	843b      	strh	r3, [r7, #32]
 800f286:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800f28a:	2b09      	cmp	r3, #9
 800f28c:	f77f af4c 	ble.w	800f128 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800f290:	7afb      	ldrb	r3, [r7, #11]
 800f292:	f003 0302 	and.w	r3, r3, #2
 800f296:	2b00      	cmp	r3, #0
 800f298:	d108      	bne.n	800f2ac <etharp_find_entry+0x1b8>
 800f29a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800f29e:	2b0a      	cmp	r3, #10
 800f2a0:	d107      	bne.n	800f2b2 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800f2a2:	7afb      	ldrb	r3, [r7, #11]
 800f2a4:	f003 0301 	and.w	r3, r3, #1
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	d102      	bne.n	800f2b2 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800f2ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f2b0:	e085      	b.n	800f3be <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800f2b2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800f2b6:	2b09      	cmp	r3, #9
 800f2b8:	dc02      	bgt.n	800f2c0 <etharp_find_entry+0x1cc>
    i = empty;
 800f2ba:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f2bc:	843b      	strh	r3, [r7, #32]
 800f2be:	e039      	b.n	800f334 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800f2c0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800f2c4:	2b09      	cmp	r3, #9
 800f2c6:	dc14      	bgt.n	800f2f2 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800f2c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f2ca:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800f2cc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f2d0:	493d      	ldr	r1, [pc, #244]	; (800f3c8 <etharp_find_entry+0x2d4>)
 800f2d2:	4613      	mov	r3, r2
 800f2d4:	005b      	lsls	r3, r3, #1
 800f2d6:	4413      	add	r3, r2
 800f2d8:	00db      	lsls	r3, r3, #3
 800f2da:	440b      	add	r3, r1
 800f2dc:	681b      	ldr	r3, [r3, #0]
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	d018      	beq.n	800f314 <etharp_find_entry+0x220>
 800f2e2:	4b3a      	ldr	r3, [pc, #232]	; (800f3cc <etharp_find_entry+0x2d8>)
 800f2e4:	f240 126d 	movw	r2, #365	; 0x16d
 800f2e8:	493b      	ldr	r1, [pc, #236]	; (800f3d8 <etharp_find_entry+0x2e4>)
 800f2ea:	483a      	ldr	r0, [pc, #232]	; (800f3d4 <etharp_find_entry+0x2e0>)
 800f2ec:	f002 fa08 	bl	8011700 <iprintf>
 800f2f0:	e010      	b.n	800f314 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800f2f2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800f2f6:	2b09      	cmp	r3, #9
 800f2f8:	dc02      	bgt.n	800f300 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800f2fa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800f2fc:	843b      	strh	r3, [r7, #32]
 800f2fe:	e009      	b.n	800f314 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800f300:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800f304:	2b09      	cmp	r3, #9
 800f306:	dc02      	bgt.n	800f30e <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800f308:	8bfb      	ldrh	r3, [r7, #30]
 800f30a:	843b      	strh	r3, [r7, #32]
 800f30c:	e002      	b.n	800f314 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800f30e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f312:	e054      	b.n	800f3be <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800f314:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800f318:	2b09      	cmp	r3, #9
 800f31a:	dd06      	ble.n	800f32a <etharp_find_entry+0x236>
 800f31c:	4b2b      	ldr	r3, [pc, #172]	; (800f3cc <etharp_find_entry+0x2d8>)
 800f31e:	f240 127f 	movw	r2, #383	; 0x17f
 800f322:	492e      	ldr	r1, [pc, #184]	; (800f3dc <etharp_find_entry+0x2e8>)
 800f324:	482b      	ldr	r0, [pc, #172]	; (800f3d4 <etharp_find_entry+0x2e0>)
 800f326:	f002 f9eb 	bl	8011700 <iprintf>
    etharp_free_entry(i);
 800f32a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800f32e:	4618      	mov	r0, r3
 800f330:	f7ff fe06 	bl	800ef40 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800f334:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800f338:	2b09      	cmp	r3, #9
 800f33a:	dd06      	ble.n	800f34a <etharp_find_entry+0x256>
 800f33c:	4b23      	ldr	r3, [pc, #140]	; (800f3cc <etharp_find_entry+0x2d8>)
 800f33e:	f240 1283 	movw	r2, #387	; 0x183
 800f342:	4926      	ldr	r1, [pc, #152]	; (800f3dc <etharp_find_entry+0x2e8>)
 800f344:	4823      	ldr	r0, [pc, #140]	; (800f3d4 <etharp_find_entry+0x2e0>)
 800f346:	f002 f9db 	bl	8011700 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800f34a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f34e:	491e      	ldr	r1, [pc, #120]	; (800f3c8 <etharp_find_entry+0x2d4>)
 800f350:	4613      	mov	r3, r2
 800f352:	005b      	lsls	r3, r3, #1
 800f354:	4413      	add	r3, r2
 800f356:	00db      	lsls	r3, r3, #3
 800f358:	440b      	add	r3, r1
 800f35a:	3314      	adds	r3, #20
 800f35c:	781b      	ldrb	r3, [r3, #0]
 800f35e:	2b00      	cmp	r3, #0
 800f360:	d006      	beq.n	800f370 <etharp_find_entry+0x27c>
 800f362:	4b1a      	ldr	r3, [pc, #104]	; (800f3cc <etharp_find_entry+0x2d8>)
 800f364:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800f368:	491d      	ldr	r1, [pc, #116]	; (800f3e0 <etharp_find_entry+0x2ec>)
 800f36a:	481a      	ldr	r0, [pc, #104]	; (800f3d4 <etharp_find_entry+0x2e0>)
 800f36c:	f002 f9c8 	bl	8011700 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800f370:	68fb      	ldr	r3, [r7, #12]
 800f372:	2b00      	cmp	r3, #0
 800f374:	d00b      	beq.n	800f38e <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800f376:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f37a:	68fb      	ldr	r3, [r7, #12]
 800f37c:	6819      	ldr	r1, [r3, #0]
 800f37e:	4812      	ldr	r0, [pc, #72]	; (800f3c8 <etharp_find_entry+0x2d4>)
 800f380:	4613      	mov	r3, r2
 800f382:	005b      	lsls	r3, r3, #1
 800f384:	4413      	add	r3, r2
 800f386:	00db      	lsls	r3, r3, #3
 800f388:	4403      	add	r3, r0
 800f38a:	3304      	adds	r3, #4
 800f38c:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800f38e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f392:	490d      	ldr	r1, [pc, #52]	; (800f3c8 <etharp_find_entry+0x2d4>)
 800f394:	4613      	mov	r3, r2
 800f396:	005b      	lsls	r3, r3, #1
 800f398:	4413      	add	r3, r2
 800f39a:	00db      	lsls	r3, r3, #3
 800f39c:	440b      	add	r3, r1
 800f39e:	3312      	adds	r3, #18
 800f3a0:	2200      	movs	r2, #0
 800f3a2:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800f3a4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f3a8:	4907      	ldr	r1, [pc, #28]	; (800f3c8 <etharp_find_entry+0x2d4>)
 800f3aa:	4613      	mov	r3, r2
 800f3ac:	005b      	lsls	r3, r3, #1
 800f3ae:	4413      	add	r3, r2
 800f3b0:	00db      	lsls	r3, r3, #3
 800f3b2:	440b      	add	r3, r1
 800f3b4:	3308      	adds	r3, #8
 800f3b6:	687a      	ldr	r2, [r7, #4]
 800f3b8:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800f3ba:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800f3be:	4618      	mov	r0, r3
 800f3c0:	3728      	adds	r7, #40	; 0x28
 800f3c2:	46bd      	mov	sp, r7
 800f3c4:	bd80      	pop	{r7, pc}
 800f3c6:	bf00      	nop
 800f3c8:	2000058c 	.word	0x2000058c
 800f3cc:	08015df0 	.word	0x08015df0
 800f3d0:	08015e28 	.word	0x08015e28
 800f3d4:	08015e68 	.word	0x08015e68
 800f3d8:	08015e90 	.word	0x08015e90
 800f3dc:	08015ea8 	.word	0x08015ea8
 800f3e0:	08015ebc 	.word	0x08015ebc

0800f3e4 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800f3e4:	b580      	push	{r7, lr}
 800f3e6:	b088      	sub	sp, #32
 800f3e8:	af02      	add	r7, sp, #8
 800f3ea:	60f8      	str	r0, [r7, #12]
 800f3ec:	60b9      	str	r1, [r7, #8]
 800f3ee:	607a      	str	r2, [r7, #4]
 800f3f0:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800f3f2:	68fb      	ldr	r3, [r7, #12]
 800f3f4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800f3f8:	2b06      	cmp	r3, #6
 800f3fa:	d006      	beq.n	800f40a <etharp_update_arp_entry+0x26>
 800f3fc:	4b48      	ldr	r3, [pc, #288]	; (800f520 <etharp_update_arp_entry+0x13c>)
 800f3fe:	f240 12a9 	movw	r2, #425	; 0x1a9
 800f402:	4948      	ldr	r1, [pc, #288]	; (800f524 <etharp_update_arp_entry+0x140>)
 800f404:	4848      	ldr	r0, [pc, #288]	; (800f528 <etharp_update_arp_entry+0x144>)
 800f406:	f002 f97b 	bl	8011700 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800f40a:	68bb      	ldr	r3, [r7, #8]
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	d012      	beq.n	800f436 <etharp_update_arp_entry+0x52>
 800f410:	68bb      	ldr	r3, [r7, #8]
 800f412:	681b      	ldr	r3, [r3, #0]
 800f414:	2b00      	cmp	r3, #0
 800f416:	d00e      	beq.n	800f436 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800f418:	68bb      	ldr	r3, [r7, #8]
 800f41a:	681b      	ldr	r3, [r3, #0]
 800f41c:	68f9      	ldr	r1, [r7, #12]
 800f41e:	4618      	mov	r0, r3
 800f420:	f001 f8fe 	bl	8010620 <ip4_addr_isbroadcast_u32>
 800f424:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800f426:	2b00      	cmp	r3, #0
 800f428:	d105      	bne.n	800f436 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800f42a:	68bb      	ldr	r3, [r7, #8]
 800f42c:	681b      	ldr	r3, [r3, #0]
 800f42e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800f432:	2be0      	cmp	r3, #224	; 0xe0
 800f434:	d102      	bne.n	800f43c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800f436:	f06f 030f 	mvn.w	r3, #15
 800f43a:	e06c      	b.n	800f516 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800f43c:	78fb      	ldrb	r3, [r7, #3]
 800f43e:	68fa      	ldr	r2, [r7, #12]
 800f440:	4619      	mov	r1, r3
 800f442:	68b8      	ldr	r0, [r7, #8]
 800f444:	f7ff fe56 	bl	800f0f4 <etharp_find_entry>
 800f448:	4603      	mov	r3, r0
 800f44a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800f44c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800f450:	2b00      	cmp	r3, #0
 800f452:	da02      	bge.n	800f45a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800f454:	8afb      	ldrh	r3, [r7, #22]
 800f456:	b25b      	sxtb	r3, r3
 800f458:	e05d      	b.n	800f516 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800f45a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f45e:	4933      	ldr	r1, [pc, #204]	; (800f52c <etharp_update_arp_entry+0x148>)
 800f460:	4613      	mov	r3, r2
 800f462:	005b      	lsls	r3, r3, #1
 800f464:	4413      	add	r3, r2
 800f466:	00db      	lsls	r3, r3, #3
 800f468:	440b      	add	r3, r1
 800f46a:	3314      	adds	r3, #20
 800f46c:	2202      	movs	r2, #2
 800f46e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800f470:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f474:	492d      	ldr	r1, [pc, #180]	; (800f52c <etharp_update_arp_entry+0x148>)
 800f476:	4613      	mov	r3, r2
 800f478:	005b      	lsls	r3, r3, #1
 800f47a:	4413      	add	r3, r2
 800f47c:	00db      	lsls	r3, r3, #3
 800f47e:	440b      	add	r3, r1
 800f480:	3308      	adds	r3, #8
 800f482:	68fa      	ldr	r2, [r7, #12]
 800f484:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800f486:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f48a:	4613      	mov	r3, r2
 800f48c:	005b      	lsls	r3, r3, #1
 800f48e:	4413      	add	r3, r2
 800f490:	00db      	lsls	r3, r3, #3
 800f492:	3308      	adds	r3, #8
 800f494:	4a25      	ldr	r2, [pc, #148]	; (800f52c <etharp_update_arp_entry+0x148>)
 800f496:	4413      	add	r3, r2
 800f498:	3304      	adds	r3, #4
 800f49a:	2206      	movs	r2, #6
 800f49c:	6879      	ldr	r1, [r7, #4]
 800f49e:	4618      	mov	r0, r3
 800f4a0:	f002 f854 	bl	801154c <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800f4a4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f4a8:	4920      	ldr	r1, [pc, #128]	; (800f52c <etharp_update_arp_entry+0x148>)
 800f4aa:	4613      	mov	r3, r2
 800f4ac:	005b      	lsls	r3, r3, #1
 800f4ae:	4413      	add	r3, r2
 800f4b0:	00db      	lsls	r3, r3, #3
 800f4b2:	440b      	add	r3, r1
 800f4b4:	3312      	adds	r3, #18
 800f4b6:	2200      	movs	r2, #0
 800f4b8:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800f4ba:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f4be:	491b      	ldr	r1, [pc, #108]	; (800f52c <etharp_update_arp_entry+0x148>)
 800f4c0:	4613      	mov	r3, r2
 800f4c2:	005b      	lsls	r3, r3, #1
 800f4c4:	4413      	add	r3, r2
 800f4c6:	00db      	lsls	r3, r3, #3
 800f4c8:	440b      	add	r3, r1
 800f4ca:	681b      	ldr	r3, [r3, #0]
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	d021      	beq.n	800f514 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800f4d0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f4d4:	4915      	ldr	r1, [pc, #84]	; (800f52c <etharp_update_arp_entry+0x148>)
 800f4d6:	4613      	mov	r3, r2
 800f4d8:	005b      	lsls	r3, r3, #1
 800f4da:	4413      	add	r3, r2
 800f4dc:	00db      	lsls	r3, r3, #3
 800f4de:	440b      	add	r3, r1
 800f4e0:	681b      	ldr	r3, [r3, #0]
 800f4e2:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800f4e4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f4e8:	4910      	ldr	r1, [pc, #64]	; (800f52c <etharp_update_arp_entry+0x148>)
 800f4ea:	4613      	mov	r3, r2
 800f4ec:	005b      	lsls	r3, r3, #1
 800f4ee:	4413      	add	r3, r2
 800f4f0:	00db      	lsls	r3, r3, #3
 800f4f2:	440b      	add	r3, r1
 800f4f4:	2200      	movs	r2, #0
 800f4f6:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800f4f8:	68fb      	ldr	r3, [r7, #12]
 800f4fa:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800f4fe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f502:	9300      	str	r3, [sp, #0]
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	6939      	ldr	r1, [r7, #16]
 800f508:	68f8      	ldr	r0, [r7, #12]
 800f50a:	f001 ff91 	bl	8011430 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800f50e:	6938      	ldr	r0, [r7, #16]
 800f510:	f7f8 ff2e 	bl	8008370 <pbuf_free>
  }
  return ERR_OK;
 800f514:	2300      	movs	r3, #0
}
 800f516:	4618      	mov	r0, r3
 800f518:	3718      	adds	r7, #24
 800f51a:	46bd      	mov	sp, r7
 800f51c:	bd80      	pop	{r7, pc}
 800f51e:	bf00      	nop
 800f520:	08015df0 	.word	0x08015df0
 800f524:	08015ee8 	.word	0x08015ee8
 800f528:	08015e68 	.word	0x08015e68
 800f52c:	2000058c 	.word	0x2000058c

0800f530 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800f530:	b580      	push	{r7, lr}
 800f532:	b084      	sub	sp, #16
 800f534:	af00      	add	r7, sp, #0
 800f536:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f538:	2300      	movs	r3, #0
 800f53a:	60fb      	str	r3, [r7, #12]
 800f53c:	e01e      	b.n	800f57c <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800f53e:	4913      	ldr	r1, [pc, #76]	; (800f58c <etharp_cleanup_netif+0x5c>)
 800f540:	68fa      	ldr	r2, [r7, #12]
 800f542:	4613      	mov	r3, r2
 800f544:	005b      	lsls	r3, r3, #1
 800f546:	4413      	add	r3, r2
 800f548:	00db      	lsls	r3, r3, #3
 800f54a:	440b      	add	r3, r1
 800f54c:	3314      	adds	r3, #20
 800f54e:	781b      	ldrb	r3, [r3, #0]
 800f550:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800f552:	7afb      	ldrb	r3, [r7, #11]
 800f554:	2b00      	cmp	r3, #0
 800f556:	d00e      	beq.n	800f576 <etharp_cleanup_netif+0x46>
 800f558:	490c      	ldr	r1, [pc, #48]	; (800f58c <etharp_cleanup_netif+0x5c>)
 800f55a:	68fa      	ldr	r2, [r7, #12]
 800f55c:	4613      	mov	r3, r2
 800f55e:	005b      	lsls	r3, r3, #1
 800f560:	4413      	add	r3, r2
 800f562:	00db      	lsls	r3, r3, #3
 800f564:	440b      	add	r3, r1
 800f566:	3308      	adds	r3, #8
 800f568:	681b      	ldr	r3, [r3, #0]
 800f56a:	687a      	ldr	r2, [r7, #4]
 800f56c:	429a      	cmp	r2, r3
 800f56e:	d102      	bne.n	800f576 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800f570:	68f8      	ldr	r0, [r7, #12]
 800f572:	f7ff fce5 	bl	800ef40 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f576:	68fb      	ldr	r3, [r7, #12]
 800f578:	3301      	adds	r3, #1
 800f57a:	60fb      	str	r3, [r7, #12]
 800f57c:	68fb      	ldr	r3, [r7, #12]
 800f57e:	2b09      	cmp	r3, #9
 800f580:	dddd      	ble.n	800f53e <etharp_cleanup_netif+0xe>
    }
  }
}
 800f582:	bf00      	nop
 800f584:	bf00      	nop
 800f586:	3710      	adds	r7, #16
 800f588:	46bd      	mov	sp, r7
 800f58a:	bd80      	pop	{r7, pc}
 800f58c:	2000058c 	.word	0x2000058c

0800f590 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800f590:	b5b0      	push	{r4, r5, r7, lr}
 800f592:	b08a      	sub	sp, #40	; 0x28
 800f594:	af04      	add	r7, sp, #16
 800f596:	6078      	str	r0, [r7, #4]
 800f598:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800f59a:	683b      	ldr	r3, [r7, #0]
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	d107      	bne.n	800f5b0 <etharp_input+0x20>
 800f5a0:	4b3d      	ldr	r3, [pc, #244]	; (800f698 <etharp_input+0x108>)
 800f5a2:	f240 228a 	movw	r2, #650	; 0x28a
 800f5a6:	493d      	ldr	r1, [pc, #244]	; (800f69c <etharp_input+0x10c>)
 800f5a8:	483d      	ldr	r0, [pc, #244]	; (800f6a0 <etharp_input+0x110>)
 800f5aa:	f002 f8a9 	bl	8011700 <iprintf>
 800f5ae:	e06f      	b.n	800f690 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	685b      	ldr	r3, [r3, #4]
 800f5b4:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800f5b6:	693b      	ldr	r3, [r7, #16]
 800f5b8:	881b      	ldrh	r3, [r3, #0]
 800f5ba:	b29b      	uxth	r3, r3
 800f5bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f5c0:	d10c      	bne.n	800f5dc <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800f5c2:	693b      	ldr	r3, [r7, #16]
 800f5c4:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800f5c6:	2b06      	cmp	r3, #6
 800f5c8:	d108      	bne.n	800f5dc <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800f5ca:	693b      	ldr	r3, [r7, #16]
 800f5cc:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800f5ce:	2b04      	cmp	r3, #4
 800f5d0:	d104      	bne.n	800f5dc <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800f5d2:	693b      	ldr	r3, [r7, #16]
 800f5d4:	885b      	ldrh	r3, [r3, #2]
 800f5d6:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800f5d8:	2b08      	cmp	r3, #8
 800f5da:	d003      	beq.n	800f5e4 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800f5dc:	6878      	ldr	r0, [r7, #4]
 800f5de:	f7f8 fec7 	bl	8008370 <pbuf_free>
    return;
 800f5e2:	e055      	b.n	800f690 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800f5e4:	693b      	ldr	r3, [r7, #16]
 800f5e6:	330e      	adds	r3, #14
 800f5e8:	681b      	ldr	r3, [r3, #0]
 800f5ea:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800f5ec:	693b      	ldr	r3, [r7, #16]
 800f5ee:	3318      	adds	r3, #24
 800f5f0:	681b      	ldr	r3, [r3, #0]
 800f5f2:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800f5f4:	683b      	ldr	r3, [r7, #0]
 800f5f6:	3304      	adds	r3, #4
 800f5f8:	681b      	ldr	r3, [r3, #0]
 800f5fa:	2b00      	cmp	r3, #0
 800f5fc:	d102      	bne.n	800f604 <etharp_input+0x74>
    for_us = 0;
 800f5fe:	2300      	movs	r3, #0
 800f600:	75fb      	strb	r3, [r7, #23]
 800f602:	e009      	b.n	800f618 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800f604:	68ba      	ldr	r2, [r7, #8]
 800f606:	683b      	ldr	r3, [r7, #0]
 800f608:	3304      	adds	r3, #4
 800f60a:	681b      	ldr	r3, [r3, #0]
 800f60c:	429a      	cmp	r2, r3
 800f60e:	bf0c      	ite	eq
 800f610:	2301      	moveq	r3, #1
 800f612:	2300      	movne	r3, #0
 800f614:	b2db      	uxtb	r3, r3
 800f616:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800f618:	693b      	ldr	r3, [r7, #16]
 800f61a:	f103 0208 	add.w	r2, r3, #8
 800f61e:	7dfb      	ldrb	r3, [r7, #23]
 800f620:	2b00      	cmp	r3, #0
 800f622:	d001      	beq.n	800f628 <etharp_input+0x98>
 800f624:	2301      	movs	r3, #1
 800f626:	e000      	b.n	800f62a <etharp_input+0x9a>
 800f628:	2302      	movs	r3, #2
 800f62a:	f107 010c 	add.w	r1, r7, #12
 800f62e:	6838      	ldr	r0, [r7, #0]
 800f630:	f7ff fed8 	bl	800f3e4 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800f634:	693b      	ldr	r3, [r7, #16]
 800f636:	88db      	ldrh	r3, [r3, #6]
 800f638:	b29b      	uxth	r3, r3
 800f63a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f63e:	d003      	beq.n	800f648 <etharp_input+0xb8>
 800f640:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f644:	d01e      	beq.n	800f684 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800f646:	e020      	b.n	800f68a <etharp_input+0xfa>
      if (for_us) {
 800f648:	7dfb      	ldrb	r3, [r7, #23]
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	d01c      	beq.n	800f688 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800f64e:	683b      	ldr	r3, [r7, #0]
 800f650:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800f654:	693b      	ldr	r3, [r7, #16]
 800f656:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800f65a:	683b      	ldr	r3, [r7, #0]
 800f65c:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800f660:	683b      	ldr	r3, [r7, #0]
 800f662:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800f664:	693a      	ldr	r2, [r7, #16]
 800f666:	3208      	adds	r2, #8
        etharp_raw(netif,
 800f668:	2102      	movs	r1, #2
 800f66a:	9103      	str	r1, [sp, #12]
 800f66c:	f107 010c 	add.w	r1, r7, #12
 800f670:	9102      	str	r1, [sp, #8]
 800f672:	9201      	str	r2, [sp, #4]
 800f674:	9300      	str	r3, [sp, #0]
 800f676:	462b      	mov	r3, r5
 800f678:	4622      	mov	r2, r4
 800f67a:	4601      	mov	r1, r0
 800f67c:	6838      	ldr	r0, [r7, #0]
 800f67e:	f000 faeb 	bl	800fc58 <etharp_raw>
      break;
 800f682:	e001      	b.n	800f688 <etharp_input+0xf8>
      break;
 800f684:	bf00      	nop
 800f686:	e000      	b.n	800f68a <etharp_input+0xfa>
      break;
 800f688:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800f68a:	6878      	ldr	r0, [r7, #4]
 800f68c:	f7f8 fe70 	bl	8008370 <pbuf_free>
}
 800f690:	3718      	adds	r7, #24
 800f692:	46bd      	mov	sp, r7
 800f694:	bdb0      	pop	{r4, r5, r7, pc}
 800f696:	bf00      	nop
 800f698:	08015df0 	.word	0x08015df0
 800f69c:	08015f40 	.word	0x08015f40
 800f6a0:	08015e68 	.word	0x08015e68

0800f6a4 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800f6a4:	b580      	push	{r7, lr}
 800f6a6:	b086      	sub	sp, #24
 800f6a8:	af02      	add	r7, sp, #8
 800f6aa:	60f8      	str	r0, [r7, #12]
 800f6ac:	60b9      	str	r1, [r7, #8]
 800f6ae:	4613      	mov	r3, r2
 800f6b0:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800f6b2:	79fa      	ldrb	r2, [r7, #7]
 800f6b4:	4944      	ldr	r1, [pc, #272]	; (800f7c8 <etharp_output_to_arp_index+0x124>)
 800f6b6:	4613      	mov	r3, r2
 800f6b8:	005b      	lsls	r3, r3, #1
 800f6ba:	4413      	add	r3, r2
 800f6bc:	00db      	lsls	r3, r3, #3
 800f6be:	440b      	add	r3, r1
 800f6c0:	3314      	adds	r3, #20
 800f6c2:	781b      	ldrb	r3, [r3, #0]
 800f6c4:	2b01      	cmp	r3, #1
 800f6c6:	d806      	bhi.n	800f6d6 <etharp_output_to_arp_index+0x32>
 800f6c8:	4b40      	ldr	r3, [pc, #256]	; (800f7cc <etharp_output_to_arp_index+0x128>)
 800f6ca:	f240 22ee 	movw	r2, #750	; 0x2ee
 800f6ce:	4940      	ldr	r1, [pc, #256]	; (800f7d0 <etharp_output_to_arp_index+0x12c>)
 800f6d0:	4840      	ldr	r0, [pc, #256]	; (800f7d4 <etharp_output_to_arp_index+0x130>)
 800f6d2:	f002 f815 	bl	8011700 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800f6d6:	79fa      	ldrb	r2, [r7, #7]
 800f6d8:	493b      	ldr	r1, [pc, #236]	; (800f7c8 <etharp_output_to_arp_index+0x124>)
 800f6da:	4613      	mov	r3, r2
 800f6dc:	005b      	lsls	r3, r3, #1
 800f6de:	4413      	add	r3, r2
 800f6e0:	00db      	lsls	r3, r3, #3
 800f6e2:	440b      	add	r3, r1
 800f6e4:	3314      	adds	r3, #20
 800f6e6:	781b      	ldrb	r3, [r3, #0]
 800f6e8:	2b02      	cmp	r3, #2
 800f6ea:	d153      	bne.n	800f794 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800f6ec:	79fa      	ldrb	r2, [r7, #7]
 800f6ee:	4936      	ldr	r1, [pc, #216]	; (800f7c8 <etharp_output_to_arp_index+0x124>)
 800f6f0:	4613      	mov	r3, r2
 800f6f2:	005b      	lsls	r3, r3, #1
 800f6f4:	4413      	add	r3, r2
 800f6f6:	00db      	lsls	r3, r3, #3
 800f6f8:	440b      	add	r3, r1
 800f6fa:	3312      	adds	r3, #18
 800f6fc:	881b      	ldrh	r3, [r3, #0]
 800f6fe:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800f702:	d919      	bls.n	800f738 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800f704:	79fa      	ldrb	r2, [r7, #7]
 800f706:	4613      	mov	r3, r2
 800f708:	005b      	lsls	r3, r3, #1
 800f70a:	4413      	add	r3, r2
 800f70c:	00db      	lsls	r3, r3, #3
 800f70e:	4a2e      	ldr	r2, [pc, #184]	; (800f7c8 <etharp_output_to_arp_index+0x124>)
 800f710:	4413      	add	r3, r2
 800f712:	3304      	adds	r3, #4
 800f714:	4619      	mov	r1, r3
 800f716:	68f8      	ldr	r0, [r7, #12]
 800f718:	f000 fb4c 	bl	800fdb4 <etharp_request>
 800f71c:	4603      	mov	r3, r0
 800f71e:	2b00      	cmp	r3, #0
 800f720:	d138      	bne.n	800f794 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800f722:	79fa      	ldrb	r2, [r7, #7]
 800f724:	4928      	ldr	r1, [pc, #160]	; (800f7c8 <etharp_output_to_arp_index+0x124>)
 800f726:	4613      	mov	r3, r2
 800f728:	005b      	lsls	r3, r3, #1
 800f72a:	4413      	add	r3, r2
 800f72c:	00db      	lsls	r3, r3, #3
 800f72e:	440b      	add	r3, r1
 800f730:	3314      	adds	r3, #20
 800f732:	2203      	movs	r2, #3
 800f734:	701a      	strb	r2, [r3, #0]
 800f736:	e02d      	b.n	800f794 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800f738:	79fa      	ldrb	r2, [r7, #7]
 800f73a:	4923      	ldr	r1, [pc, #140]	; (800f7c8 <etharp_output_to_arp_index+0x124>)
 800f73c:	4613      	mov	r3, r2
 800f73e:	005b      	lsls	r3, r3, #1
 800f740:	4413      	add	r3, r2
 800f742:	00db      	lsls	r3, r3, #3
 800f744:	440b      	add	r3, r1
 800f746:	3312      	adds	r3, #18
 800f748:	881b      	ldrh	r3, [r3, #0]
 800f74a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800f74e:	d321      	bcc.n	800f794 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800f750:	79fa      	ldrb	r2, [r7, #7]
 800f752:	4613      	mov	r3, r2
 800f754:	005b      	lsls	r3, r3, #1
 800f756:	4413      	add	r3, r2
 800f758:	00db      	lsls	r3, r3, #3
 800f75a:	4a1b      	ldr	r2, [pc, #108]	; (800f7c8 <etharp_output_to_arp_index+0x124>)
 800f75c:	4413      	add	r3, r2
 800f75e:	1d19      	adds	r1, r3, #4
 800f760:	79fa      	ldrb	r2, [r7, #7]
 800f762:	4613      	mov	r3, r2
 800f764:	005b      	lsls	r3, r3, #1
 800f766:	4413      	add	r3, r2
 800f768:	00db      	lsls	r3, r3, #3
 800f76a:	3308      	adds	r3, #8
 800f76c:	4a16      	ldr	r2, [pc, #88]	; (800f7c8 <etharp_output_to_arp_index+0x124>)
 800f76e:	4413      	add	r3, r2
 800f770:	3304      	adds	r3, #4
 800f772:	461a      	mov	r2, r3
 800f774:	68f8      	ldr	r0, [r7, #12]
 800f776:	f000 fafb 	bl	800fd70 <etharp_request_dst>
 800f77a:	4603      	mov	r3, r0
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	d109      	bne.n	800f794 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800f780:	79fa      	ldrb	r2, [r7, #7]
 800f782:	4911      	ldr	r1, [pc, #68]	; (800f7c8 <etharp_output_to_arp_index+0x124>)
 800f784:	4613      	mov	r3, r2
 800f786:	005b      	lsls	r3, r3, #1
 800f788:	4413      	add	r3, r2
 800f78a:	00db      	lsls	r3, r3, #3
 800f78c:	440b      	add	r3, r1
 800f78e:	3314      	adds	r3, #20
 800f790:	2203      	movs	r2, #3
 800f792:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800f794:	68fb      	ldr	r3, [r7, #12]
 800f796:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800f79a:	79fa      	ldrb	r2, [r7, #7]
 800f79c:	4613      	mov	r3, r2
 800f79e:	005b      	lsls	r3, r3, #1
 800f7a0:	4413      	add	r3, r2
 800f7a2:	00db      	lsls	r3, r3, #3
 800f7a4:	3308      	adds	r3, #8
 800f7a6:	4a08      	ldr	r2, [pc, #32]	; (800f7c8 <etharp_output_to_arp_index+0x124>)
 800f7a8:	4413      	add	r3, r2
 800f7aa:	3304      	adds	r3, #4
 800f7ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f7b0:	9200      	str	r2, [sp, #0]
 800f7b2:	460a      	mov	r2, r1
 800f7b4:	68b9      	ldr	r1, [r7, #8]
 800f7b6:	68f8      	ldr	r0, [r7, #12]
 800f7b8:	f001 fe3a 	bl	8011430 <ethernet_output>
 800f7bc:	4603      	mov	r3, r0
}
 800f7be:	4618      	mov	r0, r3
 800f7c0:	3710      	adds	r7, #16
 800f7c2:	46bd      	mov	sp, r7
 800f7c4:	bd80      	pop	{r7, pc}
 800f7c6:	bf00      	nop
 800f7c8:	2000058c 	.word	0x2000058c
 800f7cc:	08015df0 	.word	0x08015df0
 800f7d0:	08015f60 	.word	0x08015f60
 800f7d4:	08015e68 	.word	0x08015e68

0800f7d8 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800f7d8:	b580      	push	{r7, lr}
 800f7da:	b08a      	sub	sp, #40	; 0x28
 800f7dc:	af02      	add	r7, sp, #8
 800f7de:	60f8      	str	r0, [r7, #12]
 800f7e0:	60b9      	str	r1, [r7, #8]
 800f7e2:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800f7e8:	68fb      	ldr	r3, [r7, #12]
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	d106      	bne.n	800f7fc <etharp_output+0x24>
 800f7ee:	4b73      	ldr	r3, [pc, #460]	; (800f9bc <etharp_output+0x1e4>)
 800f7f0:	f240 321e 	movw	r2, #798	; 0x31e
 800f7f4:	4972      	ldr	r1, [pc, #456]	; (800f9c0 <etharp_output+0x1e8>)
 800f7f6:	4873      	ldr	r0, [pc, #460]	; (800f9c4 <etharp_output+0x1ec>)
 800f7f8:	f001 ff82 	bl	8011700 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800f7fc:	68bb      	ldr	r3, [r7, #8]
 800f7fe:	2b00      	cmp	r3, #0
 800f800:	d106      	bne.n	800f810 <etharp_output+0x38>
 800f802:	4b6e      	ldr	r3, [pc, #440]	; (800f9bc <etharp_output+0x1e4>)
 800f804:	f240 321f 	movw	r2, #799	; 0x31f
 800f808:	496f      	ldr	r1, [pc, #444]	; (800f9c8 <etharp_output+0x1f0>)
 800f80a:	486e      	ldr	r0, [pc, #440]	; (800f9c4 <etharp_output+0x1ec>)
 800f80c:	f001 ff78 	bl	8011700 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	2b00      	cmp	r3, #0
 800f814:	d106      	bne.n	800f824 <etharp_output+0x4c>
 800f816:	4b69      	ldr	r3, [pc, #420]	; (800f9bc <etharp_output+0x1e4>)
 800f818:	f44f 7248 	mov.w	r2, #800	; 0x320
 800f81c:	496b      	ldr	r1, [pc, #428]	; (800f9cc <etharp_output+0x1f4>)
 800f81e:	4869      	ldr	r0, [pc, #420]	; (800f9c4 <etharp_output+0x1ec>)
 800f820:	f001 ff6e 	bl	8011700 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	681b      	ldr	r3, [r3, #0]
 800f828:	68f9      	ldr	r1, [r7, #12]
 800f82a:	4618      	mov	r0, r3
 800f82c:	f000 fef8 	bl	8010620 <ip4_addr_isbroadcast_u32>
 800f830:	4603      	mov	r3, r0
 800f832:	2b00      	cmp	r3, #0
 800f834:	d002      	beq.n	800f83c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800f836:	4b66      	ldr	r3, [pc, #408]	; (800f9d0 <etharp_output+0x1f8>)
 800f838:	61fb      	str	r3, [r7, #28]
 800f83a:	e0af      	b.n	800f99c <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	681b      	ldr	r3, [r3, #0]
 800f840:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f844:	2be0      	cmp	r3, #224	; 0xe0
 800f846:	d118      	bne.n	800f87a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800f848:	2301      	movs	r3, #1
 800f84a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800f84c:	2300      	movs	r3, #0
 800f84e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800f850:	235e      	movs	r3, #94	; 0x5e
 800f852:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	3301      	adds	r3, #1
 800f858:	781b      	ldrb	r3, [r3, #0]
 800f85a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f85e:	b2db      	uxtb	r3, r3
 800f860:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	3302      	adds	r3, #2
 800f866:	781b      	ldrb	r3, [r3, #0]
 800f868:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	3303      	adds	r3, #3
 800f86e:	781b      	ldrb	r3, [r3, #0]
 800f870:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800f872:	f107 0310 	add.w	r3, r7, #16
 800f876:	61fb      	str	r3, [r7, #28]
 800f878:	e090      	b.n	800f99c <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	681a      	ldr	r2, [r3, #0]
 800f87e:	68fb      	ldr	r3, [r7, #12]
 800f880:	3304      	adds	r3, #4
 800f882:	681b      	ldr	r3, [r3, #0]
 800f884:	405a      	eors	r2, r3
 800f886:	68fb      	ldr	r3, [r7, #12]
 800f888:	3308      	adds	r3, #8
 800f88a:	681b      	ldr	r3, [r3, #0]
 800f88c:	4013      	ands	r3, r2
 800f88e:	2b00      	cmp	r3, #0
 800f890:	d012      	beq.n	800f8b8 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	681b      	ldr	r3, [r3, #0]
 800f896:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800f898:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800f89c:	4293      	cmp	r3, r2
 800f89e:	d00b      	beq.n	800f8b8 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800f8a0:	68fb      	ldr	r3, [r7, #12]
 800f8a2:	330c      	adds	r3, #12
 800f8a4:	681b      	ldr	r3, [r3, #0]
 800f8a6:	2b00      	cmp	r3, #0
 800f8a8:	d003      	beq.n	800f8b2 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800f8aa:	68fb      	ldr	r3, [r7, #12]
 800f8ac:	330c      	adds	r3, #12
 800f8ae:	61bb      	str	r3, [r7, #24]
 800f8b0:	e002      	b.n	800f8b8 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800f8b2:	f06f 0303 	mvn.w	r3, #3
 800f8b6:	e07d      	b.n	800f9b4 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800f8b8:	4b46      	ldr	r3, [pc, #280]	; (800f9d4 <etharp_output+0x1fc>)
 800f8ba:	781b      	ldrb	r3, [r3, #0]
 800f8bc:	4619      	mov	r1, r3
 800f8be:	4a46      	ldr	r2, [pc, #280]	; (800f9d8 <etharp_output+0x200>)
 800f8c0:	460b      	mov	r3, r1
 800f8c2:	005b      	lsls	r3, r3, #1
 800f8c4:	440b      	add	r3, r1
 800f8c6:	00db      	lsls	r3, r3, #3
 800f8c8:	4413      	add	r3, r2
 800f8ca:	3314      	adds	r3, #20
 800f8cc:	781b      	ldrb	r3, [r3, #0]
 800f8ce:	2b01      	cmp	r3, #1
 800f8d0:	d925      	bls.n	800f91e <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800f8d2:	4b40      	ldr	r3, [pc, #256]	; (800f9d4 <etharp_output+0x1fc>)
 800f8d4:	781b      	ldrb	r3, [r3, #0]
 800f8d6:	4619      	mov	r1, r3
 800f8d8:	4a3f      	ldr	r2, [pc, #252]	; (800f9d8 <etharp_output+0x200>)
 800f8da:	460b      	mov	r3, r1
 800f8dc:	005b      	lsls	r3, r3, #1
 800f8de:	440b      	add	r3, r1
 800f8e0:	00db      	lsls	r3, r3, #3
 800f8e2:	4413      	add	r3, r2
 800f8e4:	3308      	adds	r3, #8
 800f8e6:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800f8e8:	68fa      	ldr	r2, [r7, #12]
 800f8ea:	429a      	cmp	r2, r3
 800f8ec:	d117      	bne.n	800f91e <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800f8ee:	69bb      	ldr	r3, [r7, #24]
 800f8f0:	681a      	ldr	r2, [r3, #0]
 800f8f2:	4b38      	ldr	r3, [pc, #224]	; (800f9d4 <etharp_output+0x1fc>)
 800f8f4:	781b      	ldrb	r3, [r3, #0]
 800f8f6:	4618      	mov	r0, r3
 800f8f8:	4937      	ldr	r1, [pc, #220]	; (800f9d8 <etharp_output+0x200>)
 800f8fa:	4603      	mov	r3, r0
 800f8fc:	005b      	lsls	r3, r3, #1
 800f8fe:	4403      	add	r3, r0
 800f900:	00db      	lsls	r3, r3, #3
 800f902:	440b      	add	r3, r1
 800f904:	3304      	adds	r3, #4
 800f906:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800f908:	429a      	cmp	r2, r3
 800f90a:	d108      	bne.n	800f91e <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800f90c:	4b31      	ldr	r3, [pc, #196]	; (800f9d4 <etharp_output+0x1fc>)
 800f90e:	781b      	ldrb	r3, [r3, #0]
 800f910:	461a      	mov	r2, r3
 800f912:	68b9      	ldr	r1, [r7, #8]
 800f914:	68f8      	ldr	r0, [r7, #12]
 800f916:	f7ff fec5 	bl	800f6a4 <etharp_output_to_arp_index>
 800f91a:	4603      	mov	r3, r0
 800f91c:	e04a      	b.n	800f9b4 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800f91e:	2300      	movs	r3, #0
 800f920:	75fb      	strb	r3, [r7, #23]
 800f922:	e031      	b.n	800f988 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800f924:	7dfa      	ldrb	r2, [r7, #23]
 800f926:	492c      	ldr	r1, [pc, #176]	; (800f9d8 <etharp_output+0x200>)
 800f928:	4613      	mov	r3, r2
 800f92a:	005b      	lsls	r3, r3, #1
 800f92c:	4413      	add	r3, r2
 800f92e:	00db      	lsls	r3, r3, #3
 800f930:	440b      	add	r3, r1
 800f932:	3314      	adds	r3, #20
 800f934:	781b      	ldrb	r3, [r3, #0]
 800f936:	2b01      	cmp	r3, #1
 800f938:	d923      	bls.n	800f982 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800f93a:	7dfa      	ldrb	r2, [r7, #23]
 800f93c:	4926      	ldr	r1, [pc, #152]	; (800f9d8 <etharp_output+0x200>)
 800f93e:	4613      	mov	r3, r2
 800f940:	005b      	lsls	r3, r3, #1
 800f942:	4413      	add	r3, r2
 800f944:	00db      	lsls	r3, r3, #3
 800f946:	440b      	add	r3, r1
 800f948:	3308      	adds	r3, #8
 800f94a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800f94c:	68fa      	ldr	r2, [r7, #12]
 800f94e:	429a      	cmp	r2, r3
 800f950:	d117      	bne.n	800f982 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800f952:	69bb      	ldr	r3, [r7, #24]
 800f954:	6819      	ldr	r1, [r3, #0]
 800f956:	7dfa      	ldrb	r2, [r7, #23]
 800f958:	481f      	ldr	r0, [pc, #124]	; (800f9d8 <etharp_output+0x200>)
 800f95a:	4613      	mov	r3, r2
 800f95c:	005b      	lsls	r3, r3, #1
 800f95e:	4413      	add	r3, r2
 800f960:	00db      	lsls	r3, r3, #3
 800f962:	4403      	add	r3, r0
 800f964:	3304      	adds	r3, #4
 800f966:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800f968:	4299      	cmp	r1, r3
 800f96a:	d10a      	bne.n	800f982 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800f96c:	4a19      	ldr	r2, [pc, #100]	; (800f9d4 <etharp_output+0x1fc>)
 800f96e:	7dfb      	ldrb	r3, [r7, #23]
 800f970:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800f972:	7dfb      	ldrb	r3, [r7, #23]
 800f974:	461a      	mov	r2, r3
 800f976:	68b9      	ldr	r1, [r7, #8]
 800f978:	68f8      	ldr	r0, [r7, #12]
 800f97a:	f7ff fe93 	bl	800f6a4 <etharp_output_to_arp_index>
 800f97e:	4603      	mov	r3, r0
 800f980:	e018      	b.n	800f9b4 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800f982:	7dfb      	ldrb	r3, [r7, #23]
 800f984:	3301      	adds	r3, #1
 800f986:	75fb      	strb	r3, [r7, #23]
 800f988:	7dfb      	ldrb	r3, [r7, #23]
 800f98a:	2b09      	cmp	r3, #9
 800f98c:	d9ca      	bls.n	800f924 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800f98e:	68ba      	ldr	r2, [r7, #8]
 800f990:	69b9      	ldr	r1, [r7, #24]
 800f992:	68f8      	ldr	r0, [r7, #12]
 800f994:	f000 f822 	bl	800f9dc <etharp_query>
 800f998:	4603      	mov	r3, r0
 800f99a:	e00b      	b.n	800f9b4 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800f99c:	68fb      	ldr	r3, [r7, #12]
 800f99e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800f9a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f9a6:	9300      	str	r3, [sp, #0]
 800f9a8:	69fb      	ldr	r3, [r7, #28]
 800f9aa:	68b9      	ldr	r1, [r7, #8]
 800f9ac:	68f8      	ldr	r0, [r7, #12]
 800f9ae:	f001 fd3f 	bl	8011430 <ethernet_output>
 800f9b2:	4603      	mov	r3, r0
}
 800f9b4:	4618      	mov	r0, r3
 800f9b6:	3720      	adds	r7, #32
 800f9b8:	46bd      	mov	sp, r7
 800f9ba:	bd80      	pop	{r7, pc}
 800f9bc:	08015df0 	.word	0x08015df0
 800f9c0:	08015f40 	.word	0x08015f40
 800f9c4:	08015e68 	.word	0x08015e68
 800f9c8:	08015f90 	.word	0x08015f90
 800f9cc:	08015f30 	.word	0x08015f30
 800f9d0:	080177d4 	.word	0x080177d4
 800f9d4:	2000067c 	.word	0x2000067c
 800f9d8:	2000058c 	.word	0x2000058c

0800f9dc <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800f9dc:	b580      	push	{r7, lr}
 800f9de:	b08c      	sub	sp, #48	; 0x30
 800f9e0:	af02      	add	r7, sp, #8
 800f9e2:	60f8      	str	r0, [r7, #12]
 800f9e4:	60b9      	str	r1, [r7, #8]
 800f9e6:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800f9e8:	68fb      	ldr	r3, [r7, #12]
 800f9ea:	3326      	adds	r3, #38	; 0x26
 800f9ec:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800f9ee:	23ff      	movs	r3, #255	; 0xff
 800f9f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800f9f4:	2300      	movs	r3, #0
 800f9f6:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800f9f8:	68bb      	ldr	r3, [r7, #8]
 800f9fa:	681b      	ldr	r3, [r3, #0]
 800f9fc:	68f9      	ldr	r1, [r7, #12]
 800f9fe:	4618      	mov	r0, r3
 800fa00:	f000 fe0e 	bl	8010620 <ip4_addr_isbroadcast_u32>
 800fa04:	4603      	mov	r3, r0
 800fa06:	2b00      	cmp	r3, #0
 800fa08:	d10c      	bne.n	800fa24 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800fa0a:	68bb      	ldr	r3, [r7, #8]
 800fa0c:	681b      	ldr	r3, [r3, #0]
 800fa0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800fa12:	2be0      	cmp	r3, #224	; 0xe0
 800fa14:	d006      	beq.n	800fa24 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800fa16:	68bb      	ldr	r3, [r7, #8]
 800fa18:	2b00      	cmp	r3, #0
 800fa1a:	d003      	beq.n	800fa24 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800fa1c:	68bb      	ldr	r3, [r7, #8]
 800fa1e:	681b      	ldr	r3, [r3, #0]
 800fa20:	2b00      	cmp	r3, #0
 800fa22:	d102      	bne.n	800fa2a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800fa24:	f06f 030f 	mvn.w	r3, #15
 800fa28:	e101      	b.n	800fc2e <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800fa2a:	68fa      	ldr	r2, [r7, #12]
 800fa2c:	2101      	movs	r1, #1
 800fa2e:	68b8      	ldr	r0, [r7, #8]
 800fa30:	f7ff fb60 	bl	800f0f4 <etharp_find_entry>
 800fa34:	4603      	mov	r3, r0
 800fa36:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800fa38:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800fa3c:	2b00      	cmp	r3, #0
 800fa3e:	da02      	bge.n	800fa46 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800fa40:	8a7b      	ldrh	r3, [r7, #18]
 800fa42:	b25b      	sxtb	r3, r3
 800fa44:	e0f3      	b.n	800fc2e <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800fa46:	8a7b      	ldrh	r3, [r7, #18]
 800fa48:	2b7e      	cmp	r3, #126	; 0x7e
 800fa4a:	d906      	bls.n	800fa5a <etharp_query+0x7e>
 800fa4c:	4b7a      	ldr	r3, [pc, #488]	; (800fc38 <etharp_query+0x25c>)
 800fa4e:	f240 32c1 	movw	r2, #961	; 0x3c1
 800fa52:	497a      	ldr	r1, [pc, #488]	; (800fc3c <etharp_query+0x260>)
 800fa54:	487a      	ldr	r0, [pc, #488]	; (800fc40 <etharp_query+0x264>)
 800fa56:	f001 fe53 	bl	8011700 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800fa5a:	8a7b      	ldrh	r3, [r7, #18]
 800fa5c:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800fa5e:	7c7a      	ldrb	r2, [r7, #17]
 800fa60:	4978      	ldr	r1, [pc, #480]	; (800fc44 <etharp_query+0x268>)
 800fa62:	4613      	mov	r3, r2
 800fa64:	005b      	lsls	r3, r3, #1
 800fa66:	4413      	add	r3, r2
 800fa68:	00db      	lsls	r3, r3, #3
 800fa6a:	440b      	add	r3, r1
 800fa6c:	3314      	adds	r3, #20
 800fa6e:	781b      	ldrb	r3, [r3, #0]
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	d115      	bne.n	800faa0 <etharp_query+0xc4>
    is_new_entry = 1;
 800fa74:	2301      	movs	r3, #1
 800fa76:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800fa78:	7c7a      	ldrb	r2, [r7, #17]
 800fa7a:	4972      	ldr	r1, [pc, #456]	; (800fc44 <etharp_query+0x268>)
 800fa7c:	4613      	mov	r3, r2
 800fa7e:	005b      	lsls	r3, r3, #1
 800fa80:	4413      	add	r3, r2
 800fa82:	00db      	lsls	r3, r3, #3
 800fa84:	440b      	add	r3, r1
 800fa86:	3314      	adds	r3, #20
 800fa88:	2201      	movs	r2, #1
 800fa8a:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800fa8c:	7c7a      	ldrb	r2, [r7, #17]
 800fa8e:	496d      	ldr	r1, [pc, #436]	; (800fc44 <etharp_query+0x268>)
 800fa90:	4613      	mov	r3, r2
 800fa92:	005b      	lsls	r3, r3, #1
 800fa94:	4413      	add	r3, r2
 800fa96:	00db      	lsls	r3, r3, #3
 800fa98:	440b      	add	r3, r1
 800fa9a:	3308      	adds	r3, #8
 800fa9c:	68fa      	ldr	r2, [r7, #12]
 800fa9e:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800faa0:	7c7a      	ldrb	r2, [r7, #17]
 800faa2:	4968      	ldr	r1, [pc, #416]	; (800fc44 <etharp_query+0x268>)
 800faa4:	4613      	mov	r3, r2
 800faa6:	005b      	lsls	r3, r3, #1
 800faa8:	4413      	add	r3, r2
 800faaa:	00db      	lsls	r3, r3, #3
 800faac:	440b      	add	r3, r1
 800faae:	3314      	adds	r3, #20
 800fab0:	781b      	ldrb	r3, [r3, #0]
 800fab2:	2b01      	cmp	r3, #1
 800fab4:	d011      	beq.n	800fada <etharp_query+0xfe>
 800fab6:	7c7a      	ldrb	r2, [r7, #17]
 800fab8:	4962      	ldr	r1, [pc, #392]	; (800fc44 <etharp_query+0x268>)
 800faba:	4613      	mov	r3, r2
 800fabc:	005b      	lsls	r3, r3, #1
 800fabe:	4413      	add	r3, r2
 800fac0:	00db      	lsls	r3, r3, #3
 800fac2:	440b      	add	r3, r1
 800fac4:	3314      	adds	r3, #20
 800fac6:	781b      	ldrb	r3, [r3, #0]
 800fac8:	2b01      	cmp	r3, #1
 800faca:	d806      	bhi.n	800fada <etharp_query+0xfe>
 800facc:	4b5a      	ldr	r3, [pc, #360]	; (800fc38 <etharp_query+0x25c>)
 800face:	f240 32cd 	movw	r2, #973	; 0x3cd
 800fad2:	495d      	ldr	r1, [pc, #372]	; (800fc48 <etharp_query+0x26c>)
 800fad4:	485a      	ldr	r0, [pc, #360]	; (800fc40 <etharp_query+0x264>)
 800fad6:	f001 fe13 	bl	8011700 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800fada:	6a3b      	ldr	r3, [r7, #32]
 800fadc:	2b00      	cmp	r3, #0
 800fade:	d102      	bne.n	800fae6 <etharp_query+0x10a>
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	2b00      	cmp	r3, #0
 800fae4:	d10c      	bne.n	800fb00 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800fae6:	68b9      	ldr	r1, [r7, #8]
 800fae8:	68f8      	ldr	r0, [r7, #12]
 800faea:	f000 f963 	bl	800fdb4 <etharp_request>
 800faee:	4603      	mov	r3, r0
 800faf0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	2b00      	cmp	r3, #0
 800faf8:	d102      	bne.n	800fb00 <etharp_query+0x124>
      return result;
 800fafa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800fafe:	e096      	b.n	800fc2e <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	d106      	bne.n	800fb14 <etharp_query+0x138>
 800fb06:	4b4c      	ldr	r3, [pc, #304]	; (800fc38 <etharp_query+0x25c>)
 800fb08:	f240 32e1 	movw	r2, #993	; 0x3e1
 800fb0c:	494f      	ldr	r1, [pc, #316]	; (800fc4c <etharp_query+0x270>)
 800fb0e:	484c      	ldr	r0, [pc, #304]	; (800fc40 <etharp_query+0x264>)
 800fb10:	f001 fdf6 	bl	8011700 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800fb14:	7c7a      	ldrb	r2, [r7, #17]
 800fb16:	494b      	ldr	r1, [pc, #300]	; (800fc44 <etharp_query+0x268>)
 800fb18:	4613      	mov	r3, r2
 800fb1a:	005b      	lsls	r3, r3, #1
 800fb1c:	4413      	add	r3, r2
 800fb1e:	00db      	lsls	r3, r3, #3
 800fb20:	440b      	add	r3, r1
 800fb22:	3314      	adds	r3, #20
 800fb24:	781b      	ldrb	r3, [r3, #0]
 800fb26:	2b01      	cmp	r3, #1
 800fb28:	d917      	bls.n	800fb5a <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800fb2a:	4a49      	ldr	r2, [pc, #292]	; (800fc50 <etharp_query+0x274>)
 800fb2c:	7c7b      	ldrb	r3, [r7, #17]
 800fb2e:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800fb30:	7c7a      	ldrb	r2, [r7, #17]
 800fb32:	4613      	mov	r3, r2
 800fb34:	005b      	lsls	r3, r3, #1
 800fb36:	4413      	add	r3, r2
 800fb38:	00db      	lsls	r3, r3, #3
 800fb3a:	3308      	adds	r3, #8
 800fb3c:	4a41      	ldr	r2, [pc, #260]	; (800fc44 <etharp_query+0x268>)
 800fb3e:	4413      	add	r3, r2
 800fb40:	3304      	adds	r3, #4
 800fb42:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800fb46:	9200      	str	r2, [sp, #0]
 800fb48:	697a      	ldr	r2, [r7, #20]
 800fb4a:	6879      	ldr	r1, [r7, #4]
 800fb4c:	68f8      	ldr	r0, [r7, #12]
 800fb4e:	f001 fc6f 	bl	8011430 <ethernet_output>
 800fb52:	4603      	mov	r3, r0
 800fb54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fb58:	e067      	b.n	800fc2a <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800fb5a:	7c7a      	ldrb	r2, [r7, #17]
 800fb5c:	4939      	ldr	r1, [pc, #228]	; (800fc44 <etharp_query+0x268>)
 800fb5e:	4613      	mov	r3, r2
 800fb60:	005b      	lsls	r3, r3, #1
 800fb62:	4413      	add	r3, r2
 800fb64:	00db      	lsls	r3, r3, #3
 800fb66:	440b      	add	r3, r1
 800fb68:	3314      	adds	r3, #20
 800fb6a:	781b      	ldrb	r3, [r3, #0]
 800fb6c:	2b01      	cmp	r3, #1
 800fb6e:	d15c      	bne.n	800fc2a <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800fb70:	2300      	movs	r3, #0
 800fb72:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	61fb      	str	r3, [r7, #28]
    while (p) {
 800fb78:	e01c      	b.n	800fbb4 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800fb7a:	69fb      	ldr	r3, [r7, #28]
 800fb7c:	895a      	ldrh	r2, [r3, #10]
 800fb7e:	69fb      	ldr	r3, [r7, #28]
 800fb80:	891b      	ldrh	r3, [r3, #8]
 800fb82:	429a      	cmp	r2, r3
 800fb84:	d10a      	bne.n	800fb9c <etharp_query+0x1c0>
 800fb86:	69fb      	ldr	r3, [r7, #28]
 800fb88:	681b      	ldr	r3, [r3, #0]
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	d006      	beq.n	800fb9c <etharp_query+0x1c0>
 800fb8e:	4b2a      	ldr	r3, [pc, #168]	; (800fc38 <etharp_query+0x25c>)
 800fb90:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800fb94:	492f      	ldr	r1, [pc, #188]	; (800fc54 <etharp_query+0x278>)
 800fb96:	482a      	ldr	r0, [pc, #168]	; (800fc40 <etharp_query+0x264>)
 800fb98:	f001 fdb2 	bl	8011700 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800fb9c:	69fb      	ldr	r3, [r7, #28]
 800fb9e:	7b1b      	ldrb	r3, [r3, #12]
 800fba0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	d002      	beq.n	800fbae <etharp_query+0x1d2>
        copy_needed = 1;
 800fba8:	2301      	movs	r3, #1
 800fbaa:	61bb      	str	r3, [r7, #24]
        break;
 800fbac:	e005      	b.n	800fbba <etharp_query+0x1de>
      }
      p = p->next;
 800fbae:	69fb      	ldr	r3, [r7, #28]
 800fbb0:	681b      	ldr	r3, [r3, #0]
 800fbb2:	61fb      	str	r3, [r7, #28]
    while (p) {
 800fbb4:	69fb      	ldr	r3, [r7, #28]
 800fbb6:	2b00      	cmp	r3, #0
 800fbb8:	d1df      	bne.n	800fb7a <etharp_query+0x19e>
    }
    if (copy_needed) {
 800fbba:	69bb      	ldr	r3, [r7, #24]
 800fbbc:	2b00      	cmp	r3, #0
 800fbbe:	d007      	beq.n	800fbd0 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800fbc0:	687a      	ldr	r2, [r7, #4]
 800fbc2:	f44f 7120 	mov.w	r1, #640	; 0x280
 800fbc6:	200e      	movs	r0, #14
 800fbc8:	f7f8 fe2e 	bl	8008828 <pbuf_clone>
 800fbcc:	61f8      	str	r0, [r7, #28]
 800fbce:	e004      	b.n	800fbda <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800fbd4:	69f8      	ldr	r0, [r7, #28]
 800fbd6:	f7f8 fc6b 	bl	80084b0 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800fbda:	69fb      	ldr	r3, [r7, #28]
 800fbdc:	2b00      	cmp	r3, #0
 800fbde:	d021      	beq.n	800fc24 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800fbe0:	7c7a      	ldrb	r2, [r7, #17]
 800fbe2:	4918      	ldr	r1, [pc, #96]	; (800fc44 <etharp_query+0x268>)
 800fbe4:	4613      	mov	r3, r2
 800fbe6:	005b      	lsls	r3, r3, #1
 800fbe8:	4413      	add	r3, r2
 800fbea:	00db      	lsls	r3, r3, #3
 800fbec:	440b      	add	r3, r1
 800fbee:	681b      	ldr	r3, [r3, #0]
 800fbf0:	2b00      	cmp	r3, #0
 800fbf2:	d00a      	beq.n	800fc0a <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800fbf4:	7c7a      	ldrb	r2, [r7, #17]
 800fbf6:	4913      	ldr	r1, [pc, #76]	; (800fc44 <etharp_query+0x268>)
 800fbf8:	4613      	mov	r3, r2
 800fbfa:	005b      	lsls	r3, r3, #1
 800fbfc:	4413      	add	r3, r2
 800fbfe:	00db      	lsls	r3, r3, #3
 800fc00:	440b      	add	r3, r1
 800fc02:	681b      	ldr	r3, [r3, #0]
 800fc04:	4618      	mov	r0, r3
 800fc06:	f7f8 fbb3 	bl	8008370 <pbuf_free>
      }
      arp_table[i].q = p;
 800fc0a:	7c7a      	ldrb	r2, [r7, #17]
 800fc0c:	490d      	ldr	r1, [pc, #52]	; (800fc44 <etharp_query+0x268>)
 800fc0e:	4613      	mov	r3, r2
 800fc10:	005b      	lsls	r3, r3, #1
 800fc12:	4413      	add	r3, r2
 800fc14:	00db      	lsls	r3, r3, #3
 800fc16:	440b      	add	r3, r1
 800fc18:	69fa      	ldr	r2, [r7, #28]
 800fc1a:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800fc1c:	2300      	movs	r3, #0
 800fc1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fc22:	e002      	b.n	800fc2a <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800fc24:	23ff      	movs	r3, #255	; 0xff
 800fc26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800fc2a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800fc2e:	4618      	mov	r0, r3
 800fc30:	3728      	adds	r7, #40	; 0x28
 800fc32:	46bd      	mov	sp, r7
 800fc34:	bd80      	pop	{r7, pc}
 800fc36:	bf00      	nop
 800fc38:	08015df0 	.word	0x08015df0
 800fc3c:	08015f9c 	.word	0x08015f9c
 800fc40:	08015e68 	.word	0x08015e68
 800fc44:	2000058c 	.word	0x2000058c
 800fc48:	08015fac 	.word	0x08015fac
 800fc4c:	08015f90 	.word	0x08015f90
 800fc50:	2000067c 	.word	0x2000067c
 800fc54:	08015fd4 	.word	0x08015fd4

0800fc58 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800fc58:	b580      	push	{r7, lr}
 800fc5a:	b08a      	sub	sp, #40	; 0x28
 800fc5c:	af02      	add	r7, sp, #8
 800fc5e:	60f8      	str	r0, [r7, #12]
 800fc60:	60b9      	str	r1, [r7, #8]
 800fc62:	607a      	str	r2, [r7, #4]
 800fc64:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800fc66:	2300      	movs	r3, #0
 800fc68:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800fc6a:	68fb      	ldr	r3, [r7, #12]
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	d106      	bne.n	800fc7e <etharp_raw+0x26>
 800fc70:	4b3a      	ldr	r3, [pc, #232]	; (800fd5c <etharp_raw+0x104>)
 800fc72:	f240 4257 	movw	r2, #1111	; 0x457
 800fc76:	493a      	ldr	r1, [pc, #232]	; (800fd60 <etharp_raw+0x108>)
 800fc78:	483a      	ldr	r0, [pc, #232]	; (800fd64 <etharp_raw+0x10c>)
 800fc7a:	f001 fd41 	bl	8011700 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800fc7e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800fc82:	211c      	movs	r1, #28
 800fc84:	200e      	movs	r0, #14
 800fc86:	f7f8 f88f 	bl	8007da8 <pbuf_alloc>
 800fc8a:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800fc8c:	69bb      	ldr	r3, [r7, #24]
 800fc8e:	2b00      	cmp	r3, #0
 800fc90:	d102      	bne.n	800fc98 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800fc92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fc96:	e05d      	b.n	800fd54 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800fc98:	69bb      	ldr	r3, [r7, #24]
 800fc9a:	895b      	ldrh	r3, [r3, #10]
 800fc9c:	2b1b      	cmp	r3, #27
 800fc9e:	d806      	bhi.n	800fcae <etharp_raw+0x56>
 800fca0:	4b2e      	ldr	r3, [pc, #184]	; (800fd5c <etharp_raw+0x104>)
 800fca2:	f240 4262 	movw	r2, #1122	; 0x462
 800fca6:	4930      	ldr	r1, [pc, #192]	; (800fd68 <etharp_raw+0x110>)
 800fca8:	482e      	ldr	r0, [pc, #184]	; (800fd64 <etharp_raw+0x10c>)
 800fcaa:	f001 fd29 	bl	8011700 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800fcae:	69bb      	ldr	r3, [r7, #24]
 800fcb0:	685b      	ldr	r3, [r3, #4]
 800fcb2:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800fcb4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800fcb6:	4618      	mov	r0, r3
 800fcb8:	f7f6 ffc8 	bl	8006c4c <lwip_htons>
 800fcbc:	4603      	mov	r3, r0
 800fcbe:	461a      	mov	r2, r3
 800fcc0:	697b      	ldr	r3, [r7, #20]
 800fcc2:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800fcc4:	68fb      	ldr	r3, [r7, #12]
 800fcc6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800fcca:	2b06      	cmp	r3, #6
 800fccc:	d006      	beq.n	800fcdc <etharp_raw+0x84>
 800fcce:	4b23      	ldr	r3, [pc, #140]	; (800fd5c <etharp_raw+0x104>)
 800fcd0:	f240 4269 	movw	r2, #1129	; 0x469
 800fcd4:	4925      	ldr	r1, [pc, #148]	; (800fd6c <etharp_raw+0x114>)
 800fcd6:	4823      	ldr	r0, [pc, #140]	; (800fd64 <etharp_raw+0x10c>)
 800fcd8:	f001 fd12 	bl	8011700 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800fcdc:	697b      	ldr	r3, [r7, #20]
 800fcde:	3308      	adds	r3, #8
 800fce0:	2206      	movs	r2, #6
 800fce2:	6839      	ldr	r1, [r7, #0]
 800fce4:	4618      	mov	r0, r3
 800fce6:	f001 fc31 	bl	801154c <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800fcea:	697b      	ldr	r3, [r7, #20]
 800fcec:	3312      	adds	r3, #18
 800fcee:	2206      	movs	r2, #6
 800fcf0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fcf2:	4618      	mov	r0, r3
 800fcf4:	f001 fc2a 	bl	801154c <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800fcf8:	697b      	ldr	r3, [r7, #20]
 800fcfa:	330e      	adds	r3, #14
 800fcfc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fcfe:	6812      	ldr	r2, [r2, #0]
 800fd00:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800fd02:	697b      	ldr	r3, [r7, #20]
 800fd04:	3318      	adds	r3, #24
 800fd06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fd08:	6812      	ldr	r2, [r2, #0]
 800fd0a:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800fd0c:	697b      	ldr	r3, [r7, #20]
 800fd0e:	2200      	movs	r2, #0
 800fd10:	701a      	strb	r2, [r3, #0]
 800fd12:	2200      	movs	r2, #0
 800fd14:	f042 0201 	orr.w	r2, r2, #1
 800fd18:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800fd1a:	697b      	ldr	r3, [r7, #20]
 800fd1c:	2200      	movs	r2, #0
 800fd1e:	f042 0208 	orr.w	r2, r2, #8
 800fd22:	709a      	strb	r2, [r3, #2]
 800fd24:	2200      	movs	r2, #0
 800fd26:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800fd28:	697b      	ldr	r3, [r7, #20]
 800fd2a:	2206      	movs	r2, #6
 800fd2c:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800fd2e:	697b      	ldr	r3, [r7, #20]
 800fd30:	2204      	movs	r2, #4
 800fd32:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800fd34:	f640 0306 	movw	r3, #2054	; 0x806
 800fd38:	9300      	str	r3, [sp, #0]
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	68ba      	ldr	r2, [r7, #8]
 800fd3e:	69b9      	ldr	r1, [r7, #24]
 800fd40:	68f8      	ldr	r0, [r7, #12]
 800fd42:	f001 fb75 	bl	8011430 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800fd46:	69b8      	ldr	r0, [r7, #24]
 800fd48:	f7f8 fb12 	bl	8008370 <pbuf_free>
  p = NULL;
 800fd4c:	2300      	movs	r3, #0
 800fd4e:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800fd50:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800fd54:	4618      	mov	r0, r3
 800fd56:	3720      	adds	r7, #32
 800fd58:	46bd      	mov	sp, r7
 800fd5a:	bd80      	pop	{r7, pc}
 800fd5c:	08015df0 	.word	0x08015df0
 800fd60:	08015f40 	.word	0x08015f40
 800fd64:	08015e68 	.word	0x08015e68
 800fd68:	08015ff0 	.word	0x08015ff0
 800fd6c:	08016024 	.word	0x08016024

0800fd70 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800fd70:	b580      	push	{r7, lr}
 800fd72:	b088      	sub	sp, #32
 800fd74:	af04      	add	r7, sp, #16
 800fd76:	60f8      	str	r0, [r7, #12]
 800fd78:	60b9      	str	r1, [r7, #8]
 800fd7a:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800fd7c:	68fb      	ldr	r3, [r7, #12]
 800fd7e:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800fd82:	68fb      	ldr	r3, [r7, #12]
 800fd84:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800fd88:	68fb      	ldr	r3, [r7, #12]
 800fd8a:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800fd8c:	2201      	movs	r2, #1
 800fd8e:	9203      	str	r2, [sp, #12]
 800fd90:	68ba      	ldr	r2, [r7, #8]
 800fd92:	9202      	str	r2, [sp, #8]
 800fd94:	4a06      	ldr	r2, [pc, #24]	; (800fdb0 <etharp_request_dst+0x40>)
 800fd96:	9201      	str	r2, [sp, #4]
 800fd98:	9300      	str	r3, [sp, #0]
 800fd9a:	4603      	mov	r3, r0
 800fd9c:	687a      	ldr	r2, [r7, #4]
 800fd9e:	68f8      	ldr	r0, [r7, #12]
 800fda0:	f7ff ff5a 	bl	800fc58 <etharp_raw>
 800fda4:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800fda6:	4618      	mov	r0, r3
 800fda8:	3710      	adds	r7, #16
 800fdaa:	46bd      	mov	sp, r7
 800fdac:	bd80      	pop	{r7, pc}
 800fdae:	bf00      	nop
 800fdb0:	080177dc 	.word	0x080177dc

0800fdb4 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800fdb4:	b580      	push	{r7, lr}
 800fdb6:	b082      	sub	sp, #8
 800fdb8:	af00      	add	r7, sp, #0
 800fdba:	6078      	str	r0, [r7, #4]
 800fdbc:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800fdbe:	4a05      	ldr	r2, [pc, #20]	; (800fdd4 <etharp_request+0x20>)
 800fdc0:	6839      	ldr	r1, [r7, #0]
 800fdc2:	6878      	ldr	r0, [r7, #4]
 800fdc4:	f7ff ffd4 	bl	800fd70 <etharp_request_dst>
 800fdc8:	4603      	mov	r3, r0
}
 800fdca:	4618      	mov	r0, r3
 800fdcc:	3708      	adds	r7, #8
 800fdce:	46bd      	mov	sp, r7
 800fdd0:	bd80      	pop	{r7, pc}
 800fdd2:	bf00      	nop
 800fdd4:	080177d4 	.word	0x080177d4

0800fdd8 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800fdd8:	b580      	push	{r7, lr}
 800fdda:	b08e      	sub	sp, #56	; 0x38
 800fddc:	af04      	add	r7, sp, #16
 800fdde:	6078      	str	r0, [r7, #4]
 800fde0:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800fde2:	4b79      	ldr	r3, [pc, #484]	; (800ffc8 <icmp_input+0x1f0>)
 800fde4:	689b      	ldr	r3, [r3, #8]
 800fde6:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800fde8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdea:	781b      	ldrb	r3, [r3, #0]
 800fdec:	f003 030f 	and.w	r3, r3, #15
 800fdf0:	b2db      	uxtb	r3, r3
 800fdf2:	009b      	lsls	r3, r3, #2
 800fdf4:	b2db      	uxtb	r3, r3
 800fdf6:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800fdf8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fdfa:	2b13      	cmp	r3, #19
 800fdfc:	f240 80cd 	bls.w	800ff9a <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	895b      	ldrh	r3, [r3, #10]
 800fe04:	2b03      	cmp	r3, #3
 800fe06:	f240 80ca 	bls.w	800ff9e <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	685b      	ldr	r3, [r3, #4]
 800fe0e:	781b      	ldrb	r3, [r3, #0]
 800fe10:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800fe14:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800fe18:	2b00      	cmp	r3, #0
 800fe1a:	f000 80b7 	beq.w	800ff8c <icmp_input+0x1b4>
 800fe1e:	2b08      	cmp	r3, #8
 800fe20:	f040 80b7 	bne.w	800ff92 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800fe24:	4b69      	ldr	r3, [pc, #420]	; (800ffcc <icmp_input+0x1f4>)
 800fe26:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800fe28:	4b67      	ldr	r3, [pc, #412]	; (800ffc8 <icmp_input+0x1f0>)
 800fe2a:	695b      	ldr	r3, [r3, #20]
 800fe2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fe30:	2be0      	cmp	r3, #224	; 0xe0
 800fe32:	f000 80bb 	beq.w	800ffac <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800fe36:	4b64      	ldr	r3, [pc, #400]	; (800ffc8 <icmp_input+0x1f0>)
 800fe38:	695b      	ldr	r3, [r3, #20]
 800fe3a:	4a63      	ldr	r2, [pc, #396]	; (800ffc8 <icmp_input+0x1f0>)
 800fe3c:	6812      	ldr	r2, [r2, #0]
 800fe3e:	4611      	mov	r1, r2
 800fe40:	4618      	mov	r0, r3
 800fe42:	f000 fbed 	bl	8010620 <ip4_addr_isbroadcast_u32>
 800fe46:	4603      	mov	r3, r0
 800fe48:	2b00      	cmp	r3, #0
 800fe4a:	f040 80b1 	bne.w	800ffb0 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	891b      	ldrh	r3, [r3, #8]
 800fe52:	2b07      	cmp	r3, #7
 800fe54:	f240 80a5 	bls.w	800ffa2 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800fe58:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fe5a:	330e      	adds	r3, #14
 800fe5c:	4619      	mov	r1, r3
 800fe5e:	6878      	ldr	r0, [r7, #4]
 800fe60:	f7f8 f9f0 	bl	8008244 <pbuf_add_header>
 800fe64:	4603      	mov	r3, r0
 800fe66:	2b00      	cmp	r3, #0
 800fe68:	d04b      	beq.n	800ff02 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	891a      	ldrh	r2, [r3, #8]
 800fe6e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fe70:	4413      	add	r3, r2
 800fe72:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	891b      	ldrh	r3, [r3, #8]
 800fe78:	8b7a      	ldrh	r2, [r7, #26]
 800fe7a:	429a      	cmp	r2, r3
 800fe7c:	f0c0 809a 	bcc.w	800ffb4 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800fe80:	8b7b      	ldrh	r3, [r7, #26]
 800fe82:	f44f 7220 	mov.w	r2, #640	; 0x280
 800fe86:	4619      	mov	r1, r3
 800fe88:	200e      	movs	r0, #14
 800fe8a:	f7f7 ff8d 	bl	8007da8 <pbuf_alloc>
 800fe8e:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800fe90:	697b      	ldr	r3, [r7, #20]
 800fe92:	2b00      	cmp	r3, #0
 800fe94:	f000 8090 	beq.w	800ffb8 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800fe98:	697b      	ldr	r3, [r7, #20]
 800fe9a:	895b      	ldrh	r3, [r3, #10]
 800fe9c:	461a      	mov	r2, r3
 800fe9e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fea0:	3308      	adds	r3, #8
 800fea2:	429a      	cmp	r2, r3
 800fea4:	d203      	bcs.n	800feae <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800fea6:	6978      	ldr	r0, [r7, #20]
 800fea8:	f7f8 fa62 	bl	8008370 <pbuf_free>
          goto icmperr;
 800feac:	e085      	b.n	800ffba <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800feae:	697b      	ldr	r3, [r7, #20]
 800feb0:	685b      	ldr	r3, [r3, #4]
 800feb2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800feb4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800feb6:	4618      	mov	r0, r3
 800feb8:	f001 fb48 	bl	801154c <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800febc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800febe:	4619      	mov	r1, r3
 800fec0:	6978      	ldr	r0, [r7, #20]
 800fec2:	f7f8 f9cf 	bl	8008264 <pbuf_remove_header>
 800fec6:	4603      	mov	r3, r0
 800fec8:	2b00      	cmp	r3, #0
 800feca:	d009      	beq.n	800fee0 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800fecc:	4b40      	ldr	r3, [pc, #256]	; (800ffd0 <icmp_input+0x1f8>)
 800fece:	22b6      	movs	r2, #182	; 0xb6
 800fed0:	4940      	ldr	r1, [pc, #256]	; (800ffd4 <icmp_input+0x1fc>)
 800fed2:	4841      	ldr	r0, [pc, #260]	; (800ffd8 <icmp_input+0x200>)
 800fed4:	f001 fc14 	bl	8011700 <iprintf>
          pbuf_free(r);
 800fed8:	6978      	ldr	r0, [r7, #20]
 800feda:	f7f8 fa49 	bl	8008370 <pbuf_free>
          goto icmperr;
 800fede:	e06c      	b.n	800ffba <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800fee0:	6879      	ldr	r1, [r7, #4]
 800fee2:	6978      	ldr	r0, [r7, #20]
 800fee4:	f7f8 fb5c 	bl	80085a0 <pbuf_copy>
 800fee8:	4603      	mov	r3, r0
 800feea:	2b00      	cmp	r3, #0
 800feec:	d003      	beq.n	800fef6 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800feee:	6978      	ldr	r0, [r7, #20]
 800fef0:	f7f8 fa3e 	bl	8008370 <pbuf_free>
          goto icmperr;
 800fef4:	e061      	b.n	800ffba <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800fef6:	6878      	ldr	r0, [r7, #4]
 800fef8:	f7f8 fa3a 	bl	8008370 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800fefc:	697b      	ldr	r3, [r7, #20]
 800fefe:	607b      	str	r3, [r7, #4]
 800ff00:	e00f      	b.n	800ff22 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800ff02:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ff04:	330e      	adds	r3, #14
 800ff06:	4619      	mov	r1, r3
 800ff08:	6878      	ldr	r0, [r7, #4]
 800ff0a:	f7f8 f9ab 	bl	8008264 <pbuf_remove_header>
 800ff0e:	4603      	mov	r3, r0
 800ff10:	2b00      	cmp	r3, #0
 800ff12:	d006      	beq.n	800ff22 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800ff14:	4b2e      	ldr	r3, [pc, #184]	; (800ffd0 <icmp_input+0x1f8>)
 800ff16:	22c7      	movs	r2, #199	; 0xc7
 800ff18:	4930      	ldr	r1, [pc, #192]	; (800ffdc <icmp_input+0x204>)
 800ff1a:	482f      	ldr	r0, [pc, #188]	; (800ffd8 <icmp_input+0x200>)
 800ff1c:	f001 fbf0 	bl	8011700 <iprintf>
          goto icmperr;
 800ff20:	e04b      	b.n	800ffba <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	685b      	ldr	r3, [r3, #4]
 800ff26:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800ff28:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ff2a:	4619      	mov	r1, r3
 800ff2c:	6878      	ldr	r0, [r7, #4]
 800ff2e:	f7f8 f989 	bl	8008244 <pbuf_add_header>
 800ff32:	4603      	mov	r3, r0
 800ff34:	2b00      	cmp	r3, #0
 800ff36:	d12b      	bne.n	800ff90 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	685b      	ldr	r3, [r3, #4]
 800ff3c:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800ff3e:	69fb      	ldr	r3, [r7, #28]
 800ff40:	681a      	ldr	r2, [r3, #0]
 800ff42:	68fb      	ldr	r3, [r7, #12]
 800ff44:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800ff46:	4b20      	ldr	r3, [pc, #128]	; (800ffc8 <icmp_input+0x1f0>)
 800ff48:	691a      	ldr	r2, [r3, #16]
 800ff4a:	68fb      	ldr	r3, [r7, #12]
 800ff4c:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800ff4e:	693b      	ldr	r3, [r7, #16]
 800ff50:	2200      	movs	r2, #0
 800ff52:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800ff54:	693b      	ldr	r3, [r7, #16]
 800ff56:	2200      	movs	r2, #0
 800ff58:	709a      	strb	r2, [r3, #2]
 800ff5a:	2200      	movs	r2, #0
 800ff5c:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800ff5e:	68fb      	ldr	r3, [r7, #12]
 800ff60:	22ff      	movs	r2, #255	; 0xff
 800ff62:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800ff64:	68fb      	ldr	r3, [r7, #12]
 800ff66:	2200      	movs	r2, #0
 800ff68:	729a      	strb	r2, [r3, #10]
 800ff6a:	2200      	movs	r2, #0
 800ff6c:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800ff6e:	683b      	ldr	r3, [r7, #0]
 800ff70:	9302      	str	r3, [sp, #8]
 800ff72:	2301      	movs	r3, #1
 800ff74:	9301      	str	r3, [sp, #4]
 800ff76:	2300      	movs	r3, #0
 800ff78:	9300      	str	r3, [sp, #0]
 800ff7a:	23ff      	movs	r3, #255	; 0xff
 800ff7c:	2200      	movs	r2, #0
 800ff7e:	69f9      	ldr	r1, [r7, #28]
 800ff80:	6878      	ldr	r0, [r7, #4]
 800ff82:	f000 fa75 	bl	8010470 <ip4_output_if>
 800ff86:	4603      	mov	r3, r0
 800ff88:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800ff8a:	e001      	b.n	800ff90 <icmp_input+0x1b8>
      break;
 800ff8c:	bf00      	nop
 800ff8e:	e000      	b.n	800ff92 <icmp_input+0x1ba>
      break;
 800ff90:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800ff92:	6878      	ldr	r0, [r7, #4]
 800ff94:	f7f8 f9ec 	bl	8008370 <pbuf_free>
  return;
 800ff98:	e013      	b.n	800ffc2 <icmp_input+0x1ea>
    goto lenerr;
 800ff9a:	bf00      	nop
 800ff9c:	e002      	b.n	800ffa4 <icmp_input+0x1cc>
    goto lenerr;
 800ff9e:	bf00      	nop
 800ffa0:	e000      	b.n	800ffa4 <icmp_input+0x1cc>
        goto lenerr;
 800ffa2:	bf00      	nop
lenerr:
  pbuf_free(p);
 800ffa4:	6878      	ldr	r0, [r7, #4]
 800ffa6:	f7f8 f9e3 	bl	8008370 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800ffaa:	e00a      	b.n	800ffc2 <icmp_input+0x1ea>
        goto icmperr;
 800ffac:	bf00      	nop
 800ffae:	e004      	b.n	800ffba <icmp_input+0x1e2>
        goto icmperr;
 800ffb0:	bf00      	nop
 800ffb2:	e002      	b.n	800ffba <icmp_input+0x1e2>
          goto icmperr;
 800ffb4:	bf00      	nop
 800ffb6:	e000      	b.n	800ffba <icmp_input+0x1e2>
          goto icmperr;
 800ffb8:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800ffba:	6878      	ldr	r0, [r7, #4]
 800ffbc:	f7f8 f9d8 	bl	8008370 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800ffc0:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800ffc2:	3728      	adds	r7, #40	; 0x28
 800ffc4:	46bd      	mov	sp, r7
 800ffc6:	bd80      	pop	{r7, pc}
 800ffc8:	20004184 	.word	0x20004184
 800ffcc:	20004198 	.word	0x20004198
 800ffd0:	08016068 	.word	0x08016068
 800ffd4:	080160a0 	.word	0x080160a0
 800ffd8:	080160d8 	.word	0x080160d8
 800ffdc:	08016100 	.word	0x08016100

0800ffe0 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800ffe0:	b580      	push	{r7, lr}
 800ffe2:	b082      	sub	sp, #8
 800ffe4:	af00      	add	r7, sp, #0
 800ffe6:	6078      	str	r0, [r7, #4]
 800ffe8:	460b      	mov	r3, r1
 800ffea:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800ffec:	78fb      	ldrb	r3, [r7, #3]
 800ffee:	461a      	mov	r2, r3
 800fff0:	2103      	movs	r1, #3
 800fff2:	6878      	ldr	r0, [r7, #4]
 800fff4:	f000 f814 	bl	8010020 <icmp_send_response>
}
 800fff8:	bf00      	nop
 800fffa:	3708      	adds	r7, #8
 800fffc:	46bd      	mov	sp, r7
 800fffe:	bd80      	pop	{r7, pc}

08010000 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8010000:	b580      	push	{r7, lr}
 8010002:	b082      	sub	sp, #8
 8010004:	af00      	add	r7, sp, #0
 8010006:	6078      	str	r0, [r7, #4]
 8010008:	460b      	mov	r3, r1
 801000a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801000c:	78fb      	ldrb	r3, [r7, #3]
 801000e:	461a      	mov	r2, r3
 8010010:	210b      	movs	r1, #11
 8010012:	6878      	ldr	r0, [r7, #4]
 8010014:	f000 f804 	bl	8010020 <icmp_send_response>
}
 8010018:	bf00      	nop
 801001a:	3708      	adds	r7, #8
 801001c:	46bd      	mov	sp, r7
 801001e:	bd80      	pop	{r7, pc}

08010020 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8010020:	b580      	push	{r7, lr}
 8010022:	b08c      	sub	sp, #48	; 0x30
 8010024:	af04      	add	r7, sp, #16
 8010026:	6078      	str	r0, [r7, #4]
 8010028:	460b      	mov	r3, r1
 801002a:	70fb      	strb	r3, [r7, #3]
 801002c:	4613      	mov	r3, r2
 801002e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8010030:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010034:	2124      	movs	r1, #36	; 0x24
 8010036:	2022      	movs	r0, #34	; 0x22
 8010038:	f7f7 feb6 	bl	8007da8 <pbuf_alloc>
 801003c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801003e:	69fb      	ldr	r3, [r7, #28]
 8010040:	2b00      	cmp	r3, #0
 8010042:	d04c      	beq.n	80100de <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8010044:	69fb      	ldr	r3, [r7, #28]
 8010046:	895b      	ldrh	r3, [r3, #10]
 8010048:	2b23      	cmp	r3, #35	; 0x23
 801004a:	d806      	bhi.n	801005a <icmp_send_response+0x3a>
 801004c:	4b26      	ldr	r3, [pc, #152]	; (80100e8 <icmp_send_response+0xc8>)
 801004e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8010052:	4926      	ldr	r1, [pc, #152]	; (80100ec <icmp_send_response+0xcc>)
 8010054:	4826      	ldr	r0, [pc, #152]	; (80100f0 <icmp_send_response+0xd0>)
 8010056:	f001 fb53 	bl	8011700 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	685b      	ldr	r3, [r3, #4]
 801005e:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8010060:	69fb      	ldr	r3, [r7, #28]
 8010062:	685b      	ldr	r3, [r3, #4]
 8010064:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8010066:	697b      	ldr	r3, [r7, #20]
 8010068:	78fa      	ldrb	r2, [r7, #3]
 801006a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801006c:	697b      	ldr	r3, [r7, #20]
 801006e:	78ba      	ldrb	r2, [r7, #2]
 8010070:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8010072:	697b      	ldr	r3, [r7, #20]
 8010074:	2200      	movs	r2, #0
 8010076:	711a      	strb	r2, [r3, #4]
 8010078:	2200      	movs	r2, #0
 801007a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801007c:	697b      	ldr	r3, [r7, #20]
 801007e:	2200      	movs	r2, #0
 8010080:	719a      	strb	r2, [r3, #6]
 8010082:	2200      	movs	r2, #0
 8010084:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8010086:	69fb      	ldr	r3, [r7, #28]
 8010088:	685b      	ldr	r3, [r3, #4]
 801008a:	f103 0008 	add.w	r0, r3, #8
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	685b      	ldr	r3, [r3, #4]
 8010092:	221c      	movs	r2, #28
 8010094:	4619      	mov	r1, r3
 8010096:	f001 fa59 	bl	801154c <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801009a:	69bb      	ldr	r3, [r7, #24]
 801009c:	68db      	ldr	r3, [r3, #12]
 801009e:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80100a0:	f107 030c 	add.w	r3, r7, #12
 80100a4:	4618      	mov	r0, r3
 80100a6:	f000 f825 	bl	80100f4 <ip4_route>
 80100aa:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80100ac:	693b      	ldr	r3, [r7, #16]
 80100ae:	2b00      	cmp	r3, #0
 80100b0:	d011      	beq.n	80100d6 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80100b2:	697b      	ldr	r3, [r7, #20]
 80100b4:	2200      	movs	r2, #0
 80100b6:	709a      	strb	r2, [r3, #2]
 80100b8:	2200      	movs	r2, #0
 80100ba:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80100bc:	f107 020c 	add.w	r2, r7, #12
 80100c0:	693b      	ldr	r3, [r7, #16]
 80100c2:	9302      	str	r3, [sp, #8]
 80100c4:	2301      	movs	r3, #1
 80100c6:	9301      	str	r3, [sp, #4]
 80100c8:	2300      	movs	r3, #0
 80100ca:	9300      	str	r3, [sp, #0]
 80100cc:	23ff      	movs	r3, #255	; 0xff
 80100ce:	2100      	movs	r1, #0
 80100d0:	69f8      	ldr	r0, [r7, #28]
 80100d2:	f000 f9cd 	bl	8010470 <ip4_output_if>
  }
  pbuf_free(q);
 80100d6:	69f8      	ldr	r0, [r7, #28]
 80100d8:	f7f8 f94a 	bl	8008370 <pbuf_free>
 80100dc:	e000      	b.n	80100e0 <icmp_send_response+0xc0>
    return;
 80100de:	bf00      	nop
}
 80100e0:	3720      	adds	r7, #32
 80100e2:	46bd      	mov	sp, r7
 80100e4:	bd80      	pop	{r7, pc}
 80100e6:	bf00      	nop
 80100e8:	08016068 	.word	0x08016068
 80100ec:	08016134 	.word	0x08016134
 80100f0:	080160d8 	.word	0x080160d8

080100f4 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80100f4:	b480      	push	{r7}
 80100f6:	b085      	sub	sp, #20
 80100f8:	af00      	add	r7, sp, #0
 80100fa:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80100fc:	4b33      	ldr	r3, [pc, #204]	; (80101cc <ip4_route+0xd8>)
 80100fe:	681b      	ldr	r3, [r3, #0]
 8010100:	60fb      	str	r3, [r7, #12]
 8010102:	e036      	b.n	8010172 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8010104:	68fb      	ldr	r3, [r7, #12]
 8010106:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801010a:	f003 0301 	and.w	r3, r3, #1
 801010e:	b2db      	uxtb	r3, r3
 8010110:	2b00      	cmp	r3, #0
 8010112:	d02b      	beq.n	801016c <ip4_route+0x78>
 8010114:	68fb      	ldr	r3, [r7, #12]
 8010116:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801011a:	089b      	lsrs	r3, r3, #2
 801011c:	f003 0301 	and.w	r3, r3, #1
 8010120:	b2db      	uxtb	r3, r3
 8010122:	2b00      	cmp	r3, #0
 8010124:	d022      	beq.n	801016c <ip4_route+0x78>
 8010126:	68fb      	ldr	r3, [r7, #12]
 8010128:	3304      	adds	r3, #4
 801012a:	681b      	ldr	r3, [r3, #0]
 801012c:	2b00      	cmp	r3, #0
 801012e:	d01d      	beq.n	801016c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	681a      	ldr	r2, [r3, #0]
 8010134:	68fb      	ldr	r3, [r7, #12]
 8010136:	3304      	adds	r3, #4
 8010138:	681b      	ldr	r3, [r3, #0]
 801013a:	405a      	eors	r2, r3
 801013c:	68fb      	ldr	r3, [r7, #12]
 801013e:	3308      	adds	r3, #8
 8010140:	681b      	ldr	r3, [r3, #0]
 8010142:	4013      	ands	r3, r2
 8010144:	2b00      	cmp	r3, #0
 8010146:	d101      	bne.n	801014c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8010148:	68fb      	ldr	r3, [r7, #12]
 801014a:	e038      	b.n	80101be <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801014c:	68fb      	ldr	r3, [r7, #12]
 801014e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010152:	f003 0302 	and.w	r3, r3, #2
 8010156:	2b00      	cmp	r3, #0
 8010158:	d108      	bne.n	801016c <ip4_route+0x78>
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	681a      	ldr	r2, [r3, #0]
 801015e:	68fb      	ldr	r3, [r7, #12]
 8010160:	330c      	adds	r3, #12
 8010162:	681b      	ldr	r3, [r3, #0]
 8010164:	429a      	cmp	r2, r3
 8010166:	d101      	bne.n	801016c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8010168:	68fb      	ldr	r3, [r7, #12]
 801016a:	e028      	b.n	80101be <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801016c:	68fb      	ldr	r3, [r7, #12]
 801016e:	681b      	ldr	r3, [r3, #0]
 8010170:	60fb      	str	r3, [r7, #12]
 8010172:	68fb      	ldr	r3, [r7, #12]
 8010174:	2b00      	cmp	r3, #0
 8010176:	d1c5      	bne.n	8010104 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8010178:	4b15      	ldr	r3, [pc, #84]	; (80101d0 <ip4_route+0xdc>)
 801017a:	681b      	ldr	r3, [r3, #0]
 801017c:	2b00      	cmp	r3, #0
 801017e:	d01a      	beq.n	80101b6 <ip4_route+0xc2>
 8010180:	4b13      	ldr	r3, [pc, #76]	; (80101d0 <ip4_route+0xdc>)
 8010182:	681b      	ldr	r3, [r3, #0]
 8010184:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010188:	f003 0301 	and.w	r3, r3, #1
 801018c:	2b00      	cmp	r3, #0
 801018e:	d012      	beq.n	80101b6 <ip4_route+0xc2>
 8010190:	4b0f      	ldr	r3, [pc, #60]	; (80101d0 <ip4_route+0xdc>)
 8010192:	681b      	ldr	r3, [r3, #0]
 8010194:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010198:	f003 0304 	and.w	r3, r3, #4
 801019c:	2b00      	cmp	r3, #0
 801019e:	d00a      	beq.n	80101b6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80101a0:	4b0b      	ldr	r3, [pc, #44]	; (80101d0 <ip4_route+0xdc>)
 80101a2:	681b      	ldr	r3, [r3, #0]
 80101a4:	3304      	adds	r3, #4
 80101a6:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80101a8:	2b00      	cmp	r3, #0
 80101aa:	d004      	beq.n	80101b6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	681b      	ldr	r3, [r3, #0]
 80101b0:	b2db      	uxtb	r3, r3
 80101b2:	2b7f      	cmp	r3, #127	; 0x7f
 80101b4:	d101      	bne.n	80101ba <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80101b6:	2300      	movs	r3, #0
 80101b8:	e001      	b.n	80101be <ip4_route+0xca>
  }

  return netif_default;
 80101ba:	4b05      	ldr	r3, [pc, #20]	; (80101d0 <ip4_route+0xdc>)
 80101bc:	681b      	ldr	r3, [r3, #0]
}
 80101be:	4618      	mov	r0, r3
 80101c0:	3714      	adds	r7, #20
 80101c2:	46bd      	mov	sp, r7
 80101c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101c8:	4770      	bx	lr
 80101ca:	bf00      	nop
 80101cc:	2000d778 	.word	0x2000d778
 80101d0:	2000d77c 	.word	0x2000d77c

080101d4 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80101d4:	b580      	push	{r7, lr}
 80101d6:	b082      	sub	sp, #8
 80101d8:	af00      	add	r7, sp, #0
 80101da:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80101e2:	f003 0301 	and.w	r3, r3, #1
 80101e6:	b2db      	uxtb	r3, r3
 80101e8:	2b00      	cmp	r3, #0
 80101ea:	d016      	beq.n	801021a <ip4_input_accept+0x46>
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	3304      	adds	r3, #4
 80101f0:	681b      	ldr	r3, [r3, #0]
 80101f2:	2b00      	cmp	r3, #0
 80101f4:	d011      	beq.n	801021a <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80101f6:	4b0b      	ldr	r3, [pc, #44]	; (8010224 <ip4_input_accept+0x50>)
 80101f8:	695a      	ldr	r2, [r3, #20]
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	3304      	adds	r3, #4
 80101fe:	681b      	ldr	r3, [r3, #0]
 8010200:	429a      	cmp	r2, r3
 8010202:	d008      	beq.n	8010216 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8010204:	4b07      	ldr	r3, [pc, #28]	; (8010224 <ip4_input_accept+0x50>)
 8010206:	695b      	ldr	r3, [r3, #20]
 8010208:	6879      	ldr	r1, [r7, #4]
 801020a:	4618      	mov	r0, r3
 801020c:	f000 fa08 	bl	8010620 <ip4_addr_isbroadcast_u32>
 8010210:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8010212:	2b00      	cmp	r3, #0
 8010214:	d001      	beq.n	801021a <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8010216:	2301      	movs	r3, #1
 8010218:	e000      	b.n	801021c <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801021a:	2300      	movs	r3, #0
}
 801021c:	4618      	mov	r0, r3
 801021e:	3708      	adds	r7, #8
 8010220:	46bd      	mov	sp, r7
 8010222:	bd80      	pop	{r7, pc}
 8010224:	20004184 	.word	0x20004184

08010228 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8010228:	b580      	push	{r7, lr}
 801022a:	b086      	sub	sp, #24
 801022c:	af00      	add	r7, sp, #0
 801022e:	6078      	str	r0, [r7, #4]
 8010230:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	685b      	ldr	r3, [r3, #4]
 8010236:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8010238:	697b      	ldr	r3, [r7, #20]
 801023a:	781b      	ldrb	r3, [r3, #0]
 801023c:	091b      	lsrs	r3, r3, #4
 801023e:	b2db      	uxtb	r3, r3
 8010240:	2b04      	cmp	r3, #4
 8010242:	d004      	beq.n	801024e <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8010244:	6878      	ldr	r0, [r7, #4]
 8010246:	f7f8 f893 	bl	8008370 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801024a:	2300      	movs	r3, #0
 801024c:	e107      	b.n	801045e <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801024e:	697b      	ldr	r3, [r7, #20]
 8010250:	781b      	ldrb	r3, [r3, #0]
 8010252:	f003 030f 	and.w	r3, r3, #15
 8010256:	b2db      	uxtb	r3, r3
 8010258:	009b      	lsls	r3, r3, #2
 801025a:	b2db      	uxtb	r3, r3
 801025c:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801025e:	697b      	ldr	r3, [r7, #20]
 8010260:	885b      	ldrh	r3, [r3, #2]
 8010262:	b29b      	uxth	r3, r3
 8010264:	4618      	mov	r0, r3
 8010266:	f7f6 fcf1 	bl	8006c4c <lwip_htons>
 801026a:	4603      	mov	r3, r0
 801026c:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	891b      	ldrh	r3, [r3, #8]
 8010272:	89ba      	ldrh	r2, [r7, #12]
 8010274:	429a      	cmp	r2, r3
 8010276:	d204      	bcs.n	8010282 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8010278:	89bb      	ldrh	r3, [r7, #12]
 801027a:	4619      	mov	r1, r3
 801027c:	6878      	ldr	r0, [r7, #4]
 801027e:	f7f7 fef1 	bl	8008064 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	895b      	ldrh	r3, [r3, #10]
 8010286:	89fa      	ldrh	r2, [r7, #14]
 8010288:	429a      	cmp	r2, r3
 801028a:	d807      	bhi.n	801029c <ip4_input+0x74>
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	891b      	ldrh	r3, [r3, #8]
 8010290:	89ba      	ldrh	r2, [r7, #12]
 8010292:	429a      	cmp	r2, r3
 8010294:	d802      	bhi.n	801029c <ip4_input+0x74>
 8010296:	89fb      	ldrh	r3, [r7, #14]
 8010298:	2b13      	cmp	r3, #19
 801029a:	d804      	bhi.n	80102a6 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801029c:	6878      	ldr	r0, [r7, #4]
 801029e:	f7f8 f867 	bl	8008370 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80102a2:	2300      	movs	r3, #0
 80102a4:	e0db      	b.n	801045e <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80102a6:	697b      	ldr	r3, [r7, #20]
 80102a8:	691b      	ldr	r3, [r3, #16]
 80102aa:	4a6f      	ldr	r2, [pc, #444]	; (8010468 <ip4_input+0x240>)
 80102ac:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80102ae:	697b      	ldr	r3, [r7, #20]
 80102b0:	68db      	ldr	r3, [r3, #12]
 80102b2:	4a6d      	ldr	r2, [pc, #436]	; (8010468 <ip4_input+0x240>)
 80102b4:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80102b6:	4b6c      	ldr	r3, [pc, #432]	; (8010468 <ip4_input+0x240>)
 80102b8:	695b      	ldr	r3, [r3, #20]
 80102ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80102be:	2be0      	cmp	r3, #224	; 0xe0
 80102c0:	d112      	bne.n	80102e8 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80102c2:	683b      	ldr	r3, [r7, #0]
 80102c4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80102c8:	f003 0301 	and.w	r3, r3, #1
 80102cc:	b2db      	uxtb	r3, r3
 80102ce:	2b00      	cmp	r3, #0
 80102d0:	d007      	beq.n	80102e2 <ip4_input+0xba>
 80102d2:	683b      	ldr	r3, [r7, #0]
 80102d4:	3304      	adds	r3, #4
 80102d6:	681b      	ldr	r3, [r3, #0]
 80102d8:	2b00      	cmp	r3, #0
 80102da:	d002      	beq.n	80102e2 <ip4_input+0xba>
      netif = inp;
 80102dc:	683b      	ldr	r3, [r7, #0]
 80102de:	613b      	str	r3, [r7, #16]
 80102e0:	e02a      	b.n	8010338 <ip4_input+0x110>
    } else {
      netif = NULL;
 80102e2:	2300      	movs	r3, #0
 80102e4:	613b      	str	r3, [r7, #16]
 80102e6:	e027      	b.n	8010338 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80102e8:	6838      	ldr	r0, [r7, #0]
 80102ea:	f7ff ff73 	bl	80101d4 <ip4_input_accept>
 80102ee:	4603      	mov	r3, r0
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	d002      	beq.n	80102fa <ip4_input+0xd2>
      netif = inp;
 80102f4:	683b      	ldr	r3, [r7, #0]
 80102f6:	613b      	str	r3, [r7, #16]
 80102f8:	e01e      	b.n	8010338 <ip4_input+0x110>
    } else {
      netif = NULL;
 80102fa:	2300      	movs	r3, #0
 80102fc:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80102fe:	4b5a      	ldr	r3, [pc, #360]	; (8010468 <ip4_input+0x240>)
 8010300:	695b      	ldr	r3, [r3, #20]
 8010302:	b2db      	uxtb	r3, r3
 8010304:	2b7f      	cmp	r3, #127	; 0x7f
 8010306:	d017      	beq.n	8010338 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8010308:	4b58      	ldr	r3, [pc, #352]	; (801046c <ip4_input+0x244>)
 801030a:	681b      	ldr	r3, [r3, #0]
 801030c:	613b      	str	r3, [r7, #16]
 801030e:	e00e      	b.n	801032e <ip4_input+0x106>
          if (netif == inp) {
 8010310:	693a      	ldr	r2, [r7, #16]
 8010312:	683b      	ldr	r3, [r7, #0]
 8010314:	429a      	cmp	r2, r3
 8010316:	d006      	beq.n	8010326 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8010318:	6938      	ldr	r0, [r7, #16]
 801031a:	f7ff ff5b 	bl	80101d4 <ip4_input_accept>
 801031e:	4603      	mov	r3, r0
 8010320:	2b00      	cmp	r3, #0
 8010322:	d108      	bne.n	8010336 <ip4_input+0x10e>
 8010324:	e000      	b.n	8010328 <ip4_input+0x100>
            continue;
 8010326:	bf00      	nop
        NETIF_FOREACH(netif) {
 8010328:	693b      	ldr	r3, [r7, #16]
 801032a:	681b      	ldr	r3, [r3, #0]
 801032c:	613b      	str	r3, [r7, #16]
 801032e:	693b      	ldr	r3, [r7, #16]
 8010330:	2b00      	cmp	r3, #0
 8010332:	d1ed      	bne.n	8010310 <ip4_input+0xe8>
 8010334:	e000      	b.n	8010338 <ip4_input+0x110>
            break;
 8010336:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8010338:	4b4b      	ldr	r3, [pc, #300]	; (8010468 <ip4_input+0x240>)
 801033a:	691b      	ldr	r3, [r3, #16]
 801033c:	6839      	ldr	r1, [r7, #0]
 801033e:	4618      	mov	r0, r3
 8010340:	f000 f96e 	bl	8010620 <ip4_addr_isbroadcast_u32>
 8010344:	4603      	mov	r3, r0
 8010346:	2b00      	cmp	r3, #0
 8010348:	d105      	bne.n	8010356 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801034a:	4b47      	ldr	r3, [pc, #284]	; (8010468 <ip4_input+0x240>)
 801034c:	691b      	ldr	r3, [r3, #16]
 801034e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8010352:	2be0      	cmp	r3, #224	; 0xe0
 8010354:	d104      	bne.n	8010360 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8010356:	6878      	ldr	r0, [r7, #4]
 8010358:	f7f8 f80a 	bl	8008370 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801035c:	2300      	movs	r3, #0
 801035e:	e07e      	b.n	801045e <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8010360:	693b      	ldr	r3, [r7, #16]
 8010362:	2b00      	cmp	r3, #0
 8010364:	d104      	bne.n	8010370 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8010366:	6878      	ldr	r0, [r7, #4]
 8010368:	f7f8 f802 	bl	8008370 <pbuf_free>
    return ERR_OK;
 801036c:	2300      	movs	r3, #0
 801036e:	e076      	b.n	801045e <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8010370:	697b      	ldr	r3, [r7, #20]
 8010372:	88db      	ldrh	r3, [r3, #6]
 8010374:	b29b      	uxth	r3, r3
 8010376:	461a      	mov	r2, r3
 8010378:	f64f 733f 	movw	r3, #65343	; 0xff3f
 801037c:	4013      	ands	r3, r2
 801037e:	2b00      	cmp	r3, #0
 8010380:	d00b      	beq.n	801039a <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8010382:	6878      	ldr	r0, [r7, #4]
 8010384:	f000 fc92 	bl	8010cac <ip4_reass>
 8010388:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	2b00      	cmp	r3, #0
 801038e:	d101      	bne.n	8010394 <ip4_input+0x16c>
      return ERR_OK;
 8010390:	2300      	movs	r3, #0
 8010392:	e064      	b.n	801045e <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	685b      	ldr	r3, [r3, #4]
 8010398:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801039a:	4a33      	ldr	r2, [pc, #204]	; (8010468 <ip4_input+0x240>)
 801039c:	693b      	ldr	r3, [r7, #16]
 801039e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80103a0:	4a31      	ldr	r2, [pc, #196]	; (8010468 <ip4_input+0x240>)
 80103a2:	683b      	ldr	r3, [r7, #0]
 80103a4:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80103a6:	4a30      	ldr	r2, [pc, #192]	; (8010468 <ip4_input+0x240>)
 80103a8:	697b      	ldr	r3, [r7, #20]
 80103aa:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80103ac:	697b      	ldr	r3, [r7, #20]
 80103ae:	781b      	ldrb	r3, [r3, #0]
 80103b0:	f003 030f 	and.w	r3, r3, #15
 80103b4:	b2db      	uxtb	r3, r3
 80103b6:	009b      	lsls	r3, r3, #2
 80103b8:	b2db      	uxtb	r3, r3
 80103ba:	b29a      	uxth	r2, r3
 80103bc:	4b2a      	ldr	r3, [pc, #168]	; (8010468 <ip4_input+0x240>)
 80103be:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80103c0:	89fb      	ldrh	r3, [r7, #14]
 80103c2:	4619      	mov	r1, r3
 80103c4:	6878      	ldr	r0, [r7, #4]
 80103c6:	f7f7 ff4d 	bl	8008264 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80103ca:	697b      	ldr	r3, [r7, #20]
 80103cc:	7a5b      	ldrb	r3, [r3, #9]
 80103ce:	2b11      	cmp	r3, #17
 80103d0:	d006      	beq.n	80103e0 <ip4_input+0x1b8>
 80103d2:	2b11      	cmp	r3, #17
 80103d4:	dc13      	bgt.n	80103fe <ip4_input+0x1d6>
 80103d6:	2b01      	cmp	r3, #1
 80103d8:	d00c      	beq.n	80103f4 <ip4_input+0x1cc>
 80103da:	2b06      	cmp	r3, #6
 80103dc:	d005      	beq.n	80103ea <ip4_input+0x1c2>
 80103de:	e00e      	b.n	80103fe <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 80103e0:	6839      	ldr	r1, [r7, #0]
 80103e2:	6878      	ldr	r0, [r7, #4]
 80103e4:	f7fe fc68 	bl	800ecb8 <udp_input>
        break;
 80103e8:	e026      	b.n	8010438 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80103ea:	6839      	ldr	r1, [r7, #0]
 80103ec:	6878      	ldr	r0, [r7, #4]
 80103ee:	f7fa f88d 	bl	800a50c <tcp_input>
        break;
 80103f2:	e021      	b.n	8010438 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 80103f4:	6839      	ldr	r1, [r7, #0]
 80103f6:	6878      	ldr	r0, [r7, #4]
 80103f8:	f7ff fcee 	bl	800fdd8 <icmp_input>
        break;
 80103fc:	e01c      	b.n	8010438 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80103fe:	4b1a      	ldr	r3, [pc, #104]	; (8010468 <ip4_input+0x240>)
 8010400:	695b      	ldr	r3, [r3, #20]
 8010402:	6939      	ldr	r1, [r7, #16]
 8010404:	4618      	mov	r0, r3
 8010406:	f000 f90b 	bl	8010620 <ip4_addr_isbroadcast_u32>
 801040a:	4603      	mov	r3, r0
 801040c:	2b00      	cmp	r3, #0
 801040e:	d10f      	bne.n	8010430 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8010410:	4b15      	ldr	r3, [pc, #84]	; (8010468 <ip4_input+0x240>)
 8010412:	695b      	ldr	r3, [r3, #20]
 8010414:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8010418:	2be0      	cmp	r3, #224	; 0xe0
 801041a:	d009      	beq.n	8010430 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801041c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8010420:	4619      	mov	r1, r3
 8010422:	6878      	ldr	r0, [r7, #4]
 8010424:	f7f7 ff91 	bl	800834a <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8010428:	2102      	movs	r1, #2
 801042a:	6878      	ldr	r0, [r7, #4]
 801042c:	f7ff fdd8 	bl	800ffe0 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8010430:	6878      	ldr	r0, [r7, #4]
 8010432:	f7f7 ff9d 	bl	8008370 <pbuf_free>
        break;
 8010436:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8010438:	4b0b      	ldr	r3, [pc, #44]	; (8010468 <ip4_input+0x240>)
 801043a:	2200      	movs	r2, #0
 801043c:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801043e:	4b0a      	ldr	r3, [pc, #40]	; (8010468 <ip4_input+0x240>)
 8010440:	2200      	movs	r2, #0
 8010442:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8010444:	4b08      	ldr	r3, [pc, #32]	; (8010468 <ip4_input+0x240>)
 8010446:	2200      	movs	r2, #0
 8010448:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801044a:	4b07      	ldr	r3, [pc, #28]	; (8010468 <ip4_input+0x240>)
 801044c:	2200      	movs	r2, #0
 801044e:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8010450:	4b05      	ldr	r3, [pc, #20]	; (8010468 <ip4_input+0x240>)
 8010452:	2200      	movs	r2, #0
 8010454:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8010456:	4b04      	ldr	r3, [pc, #16]	; (8010468 <ip4_input+0x240>)
 8010458:	2200      	movs	r2, #0
 801045a:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801045c:	2300      	movs	r3, #0
}
 801045e:	4618      	mov	r0, r3
 8010460:	3718      	adds	r7, #24
 8010462:	46bd      	mov	sp, r7
 8010464:	bd80      	pop	{r7, pc}
 8010466:	bf00      	nop
 8010468:	20004184 	.word	0x20004184
 801046c:	2000d778 	.word	0x2000d778

08010470 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8010470:	b580      	push	{r7, lr}
 8010472:	b08a      	sub	sp, #40	; 0x28
 8010474:	af04      	add	r7, sp, #16
 8010476:	60f8      	str	r0, [r7, #12]
 8010478:	60b9      	str	r1, [r7, #8]
 801047a:	607a      	str	r2, [r7, #4]
 801047c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801047e:	68bb      	ldr	r3, [r7, #8]
 8010480:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	2b00      	cmp	r3, #0
 8010486:	d009      	beq.n	801049c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8010488:	68bb      	ldr	r3, [r7, #8]
 801048a:	2b00      	cmp	r3, #0
 801048c:	d003      	beq.n	8010496 <ip4_output_if+0x26>
 801048e:	68bb      	ldr	r3, [r7, #8]
 8010490:	681b      	ldr	r3, [r3, #0]
 8010492:	2b00      	cmp	r3, #0
 8010494:	d102      	bne.n	801049c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8010496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010498:	3304      	adds	r3, #4
 801049a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801049c:	78fa      	ldrb	r2, [r7, #3]
 801049e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104a0:	9302      	str	r3, [sp, #8]
 80104a2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80104a6:	9301      	str	r3, [sp, #4]
 80104a8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80104ac:	9300      	str	r3, [sp, #0]
 80104ae:	4613      	mov	r3, r2
 80104b0:	687a      	ldr	r2, [r7, #4]
 80104b2:	6979      	ldr	r1, [r7, #20]
 80104b4:	68f8      	ldr	r0, [r7, #12]
 80104b6:	f000 f805 	bl	80104c4 <ip4_output_if_src>
 80104ba:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80104bc:	4618      	mov	r0, r3
 80104be:	3718      	adds	r7, #24
 80104c0:	46bd      	mov	sp, r7
 80104c2:	bd80      	pop	{r7, pc}

080104c4 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80104c4:	b580      	push	{r7, lr}
 80104c6:	b088      	sub	sp, #32
 80104c8:	af00      	add	r7, sp, #0
 80104ca:	60f8      	str	r0, [r7, #12]
 80104cc:	60b9      	str	r1, [r7, #8]
 80104ce:	607a      	str	r2, [r7, #4]
 80104d0:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80104d2:	68fb      	ldr	r3, [r7, #12]
 80104d4:	7b9b      	ldrb	r3, [r3, #14]
 80104d6:	2b01      	cmp	r3, #1
 80104d8:	d006      	beq.n	80104e8 <ip4_output_if_src+0x24>
 80104da:	4b4b      	ldr	r3, [pc, #300]	; (8010608 <ip4_output_if_src+0x144>)
 80104dc:	f44f 7255 	mov.w	r2, #852	; 0x354
 80104e0:	494a      	ldr	r1, [pc, #296]	; (801060c <ip4_output_if_src+0x148>)
 80104e2:	484b      	ldr	r0, [pc, #300]	; (8010610 <ip4_output_if_src+0x14c>)
 80104e4:	f001 f90c 	bl	8011700 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	2b00      	cmp	r3, #0
 80104ec:	d060      	beq.n	80105b0 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80104ee:	2314      	movs	r3, #20
 80104f0:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80104f2:	2114      	movs	r1, #20
 80104f4:	68f8      	ldr	r0, [r7, #12]
 80104f6:	f7f7 fea5 	bl	8008244 <pbuf_add_header>
 80104fa:	4603      	mov	r3, r0
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	d002      	beq.n	8010506 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8010500:	f06f 0301 	mvn.w	r3, #1
 8010504:	e07c      	b.n	8010600 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8010506:	68fb      	ldr	r3, [r7, #12]
 8010508:	685b      	ldr	r3, [r3, #4]
 801050a:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801050c:	68fb      	ldr	r3, [r7, #12]
 801050e:	895b      	ldrh	r3, [r3, #10]
 8010510:	2b13      	cmp	r3, #19
 8010512:	d806      	bhi.n	8010522 <ip4_output_if_src+0x5e>
 8010514:	4b3c      	ldr	r3, [pc, #240]	; (8010608 <ip4_output_if_src+0x144>)
 8010516:	f44f 7262 	mov.w	r2, #904	; 0x388
 801051a:	493e      	ldr	r1, [pc, #248]	; (8010614 <ip4_output_if_src+0x150>)
 801051c:	483c      	ldr	r0, [pc, #240]	; (8010610 <ip4_output_if_src+0x14c>)
 801051e:	f001 f8ef 	bl	8011700 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8010522:	69fb      	ldr	r3, [r7, #28]
 8010524:	78fa      	ldrb	r2, [r7, #3]
 8010526:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8010528:	69fb      	ldr	r3, [r7, #28]
 801052a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801052e:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	681a      	ldr	r2, [r3, #0]
 8010534:	69fb      	ldr	r3, [r7, #28]
 8010536:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8010538:	8b7b      	ldrh	r3, [r7, #26]
 801053a:	089b      	lsrs	r3, r3, #2
 801053c:	b29b      	uxth	r3, r3
 801053e:	b2db      	uxtb	r3, r3
 8010540:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010544:	b2da      	uxtb	r2, r3
 8010546:	69fb      	ldr	r3, [r7, #28]
 8010548:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801054a:	69fb      	ldr	r3, [r7, #28]
 801054c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8010550:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8010552:	68fb      	ldr	r3, [r7, #12]
 8010554:	891b      	ldrh	r3, [r3, #8]
 8010556:	4618      	mov	r0, r3
 8010558:	f7f6 fb78 	bl	8006c4c <lwip_htons>
 801055c:	4603      	mov	r3, r0
 801055e:	461a      	mov	r2, r3
 8010560:	69fb      	ldr	r3, [r7, #28]
 8010562:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8010564:	69fb      	ldr	r3, [r7, #28]
 8010566:	2200      	movs	r2, #0
 8010568:	719a      	strb	r2, [r3, #6]
 801056a:	2200      	movs	r2, #0
 801056c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801056e:	4b2a      	ldr	r3, [pc, #168]	; (8010618 <ip4_output_if_src+0x154>)
 8010570:	881b      	ldrh	r3, [r3, #0]
 8010572:	4618      	mov	r0, r3
 8010574:	f7f6 fb6a 	bl	8006c4c <lwip_htons>
 8010578:	4603      	mov	r3, r0
 801057a:	461a      	mov	r2, r3
 801057c:	69fb      	ldr	r3, [r7, #28]
 801057e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8010580:	4b25      	ldr	r3, [pc, #148]	; (8010618 <ip4_output_if_src+0x154>)
 8010582:	881b      	ldrh	r3, [r3, #0]
 8010584:	3301      	adds	r3, #1
 8010586:	b29a      	uxth	r2, r3
 8010588:	4b23      	ldr	r3, [pc, #140]	; (8010618 <ip4_output_if_src+0x154>)
 801058a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801058c:	68bb      	ldr	r3, [r7, #8]
 801058e:	2b00      	cmp	r3, #0
 8010590:	d104      	bne.n	801059c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8010592:	4b22      	ldr	r3, [pc, #136]	; (801061c <ip4_output_if_src+0x158>)
 8010594:	681a      	ldr	r2, [r3, #0]
 8010596:	69fb      	ldr	r3, [r7, #28]
 8010598:	60da      	str	r2, [r3, #12]
 801059a:	e003      	b.n	80105a4 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801059c:	68bb      	ldr	r3, [r7, #8]
 801059e:	681a      	ldr	r2, [r3, #0]
 80105a0:	69fb      	ldr	r3, [r7, #28]
 80105a2:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80105a4:	69fb      	ldr	r3, [r7, #28]
 80105a6:	2200      	movs	r2, #0
 80105a8:	729a      	strb	r2, [r3, #10]
 80105aa:	2200      	movs	r2, #0
 80105ac:	72da      	strb	r2, [r3, #11]
 80105ae:	e00f      	b.n	80105d0 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80105b0:	68fb      	ldr	r3, [r7, #12]
 80105b2:	895b      	ldrh	r3, [r3, #10]
 80105b4:	2b13      	cmp	r3, #19
 80105b6:	d802      	bhi.n	80105be <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80105b8:	f06f 0301 	mvn.w	r3, #1
 80105bc:	e020      	b.n	8010600 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80105be:	68fb      	ldr	r3, [r7, #12]
 80105c0:	685b      	ldr	r3, [r3, #4]
 80105c2:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80105c4:	69fb      	ldr	r3, [r7, #28]
 80105c6:	691b      	ldr	r3, [r3, #16]
 80105c8:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80105ca:	f107 0314 	add.w	r3, r7, #20
 80105ce:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80105d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105d2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80105d4:	2b00      	cmp	r3, #0
 80105d6:	d00c      	beq.n	80105f2 <ip4_output_if_src+0x12e>
 80105d8:	68fb      	ldr	r3, [r7, #12]
 80105da:	891a      	ldrh	r2, [r3, #8]
 80105dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105de:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80105e0:	429a      	cmp	r2, r3
 80105e2:	d906      	bls.n	80105f2 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 80105e4:	687a      	ldr	r2, [r7, #4]
 80105e6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80105e8:	68f8      	ldr	r0, [r7, #12]
 80105ea:	f000 fd4d 	bl	8011088 <ip4_frag>
 80105ee:	4603      	mov	r3, r0
 80105f0:	e006      	b.n	8010600 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80105f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105f4:	695b      	ldr	r3, [r3, #20]
 80105f6:	687a      	ldr	r2, [r7, #4]
 80105f8:	68f9      	ldr	r1, [r7, #12]
 80105fa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80105fc:	4798      	blx	r3
 80105fe:	4603      	mov	r3, r0
}
 8010600:	4618      	mov	r0, r3
 8010602:	3720      	adds	r7, #32
 8010604:	46bd      	mov	sp, r7
 8010606:	bd80      	pop	{r7, pc}
 8010608:	08016160 	.word	0x08016160
 801060c:	08016194 	.word	0x08016194
 8010610:	080161a0 	.word	0x080161a0
 8010614:	080161c8 	.word	0x080161c8
 8010618:	2000067e 	.word	0x2000067e
 801061c:	080177d0 	.word	0x080177d0

08010620 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8010620:	b480      	push	{r7}
 8010622:	b085      	sub	sp, #20
 8010624:	af00      	add	r7, sp, #0
 8010626:	6078      	str	r0, [r7, #4]
 8010628:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010634:	d002      	beq.n	801063c <ip4_addr_isbroadcast_u32+0x1c>
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	2b00      	cmp	r3, #0
 801063a:	d101      	bne.n	8010640 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801063c:	2301      	movs	r3, #1
 801063e:	e02a      	b.n	8010696 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8010640:	683b      	ldr	r3, [r7, #0]
 8010642:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010646:	f003 0302 	and.w	r3, r3, #2
 801064a:	2b00      	cmp	r3, #0
 801064c:	d101      	bne.n	8010652 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801064e:	2300      	movs	r3, #0
 8010650:	e021      	b.n	8010696 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8010652:	683b      	ldr	r3, [r7, #0]
 8010654:	3304      	adds	r3, #4
 8010656:	681b      	ldr	r3, [r3, #0]
 8010658:	687a      	ldr	r2, [r7, #4]
 801065a:	429a      	cmp	r2, r3
 801065c:	d101      	bne.n	8010662 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801065e:	2300      	movs	r3, #0
 8010660:	e019      	b.n	8010696 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8010662:	68fa      	ldr	r2, [r7, #12]
 8010664:	683b      	ldr	r3, [r7, #0]
 8010666:	3304      	adds	r3, #4
 8010668:	681b      	ldr	r3, [r3, #0]
 801066a:	405a      	eors	r2, r3
 801066c:	683b      	ldr	r3, [r7, #0]
 801066e:	3308      	adds	r3, #8
 8010670:	681b      	ldr	r3, [r3, #0]
 8010672:	4013      	ands	r3, r2
 8010674:	2b00      	cmp	r3, #0
 8010676:	d10d      	bne.n	8010694 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8010678:	683b      	ldr	r3, [r7, #0]
 801067a:	3308      	adds	r3, #8
 801067c:	681b      	ldr	r3, [r3, #0]
 801067e:	43da      	mvns	r2, r3
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8010684:	683b      	ldr	r3, [r7, #0]
 8010686:	3308      	adds	r3, #8
 8010688:	681b      	ldr	r3, [r3, #0]
 801068a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801068c:	429a      	cmp	r2, r3
 801068e:	d101      	bne.n	8010694 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8010690:	2301      	movs	r3, #1
 8010692:	e000      	b.n	8010696 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8010694:	2300      	movs	r3, #0
  }
}
 8010696:	4618      	mov	r0, r3
 8010698:	3714      	adds	r7, #20
 801069a:	46bd      	mov	sp, r7
 801069c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106a0:	4770      	bx	lr
	...

080106a4 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80106a4:	b580      	push	{r7, lr}
 80106a6:	b084      	sub	sp, #16
 80106a8:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80106aa:	2300      	movs	r3, #0
 80106ac:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80106ae:	4b12      	ldr	r3, [pc, #72]	; (80106f8 <ip_reass_tmr+0x54>)
 80106b0:	681b      	ldr	r3, [r3, #0]
 80106b2:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80106b4:	e018      	b.n	80106e8 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80106b6:	68fb      	ldr	r3, [r7, #12]
 80106b8:	7fdb      	ldrb	r3, [r3, #31]
 80106ba:	2b00      	cmp	r3, #0
 80106bc:	d00b      	beq.n	80106d6 <ip_reass_tmr+0x32>
      r->timer--;
 80106be:	68fb      	ldr	r3, [r7, #12]
 80106c0:	7fdb      	ldrb	r3, [r3, #31]
 80106c2:	3b01      	subs	r3, #1
 80106c4:	b2da      	uxtb	r2, r3
 80106c6:	68fb      	ldr	r3, [r7, #12]
 80106c8:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80106ca:	68fb      	ldr	r3, [r7, #12]
 80106cc:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80106ce:	68fb      	ldr	r3, [r7, #12]
 80106d0:	681b      	ldr	r3, [r3, #0]
 80106d2:	60fb      	str	r3, [r7, #12]
 80106d4:	e008      	b.n	80106e8 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80106d6:	68fb      	ldr	r3, [r7, #12]
 80106d8:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80106da:	68fb      	ldr	r3, [r7, #12]
 80106dc:	681b      	ldr	r3, [r3, #0]
 80106de:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80106e0:	68b9      	ldr	r1, [r7, #8]
 80106e2:	6878      	ldr	r0, [r7, #4]
 80106e4:	f000 f80a 	bl	80106fc <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80106e8:	68fb      	ldr	r3, [r7, #12]
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	d1e3      	bne.n	80106b6 <ip_reass_tmr+0x12>
    }
  }
}
 80106ee:	bf00      	nop
 80106f0:	bf00      	nop
 80106f2:	3710      	adds	r7, #16
 80106f4:	46bd      	mov	sp, r7
 80106f6:	bd80      	pop	{r7, pc}
 80106f8:	20000680 	.word	0x20000680

080106fc <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80106fc:	b580      	push	{r7, lr}
 80106fe:	b088      	sub	sp, #32
 8010700:	af00      	add	r7, sp, #0
 8010702:	6078      	str	r0, [r7, #4]
 8010704:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8010706:	2300      	movs	r3, #0
 8010708:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801070a:	683a      	ldr	r2, [r7, #0]
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	429a      	cmp	r2, r3
 8010710:	d105      	bne.n	801071e <ip_reass_free_complete_datagram+0x22>
 8010712:	4b45      	ldr	r3, [pc, #276]	; (8010828 <ip_reass_free_complete_datagram+0x12c>)
 8010714:	22ab      	movs	r2, #171	; 0xab
 8010716:	4945      	ldr	r1, [pc, #276]	; (801082c <ip_reass_free_complete_datagram+0x130>)
 8010718:	4845      	ldr	r0, [pc, #276]	; (8010830 <ip_reass_free_complete_datagram+0x134>)
 801071a:	f000 fff1 	bl	8011700 <iprintf>
  if (prev != NULL) {
 801071e:	683b      	ldr	r3, [r7, #0]
 8010720:	2b00      	cmp	r3, #0
 8010722:	d00a      	beq.n	801073a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8010724:	683b      	ldr	r3, [r7, #0]
 8010726:	681b      	ldr	r3, [r3, #0]
 8010728:	687a      	ldr	r2, [r7, #4]
 801072a:	429a      	cmp	r2, r3
 801072c:	d005      	beq.n	801073a <ip_reass_free_complete_datagram+0x3e>
 801072e:	4b3e      	ldr	r3, [pc, #248]	; (8010828 <ip_reass_free_complete_datagram+0x12c>)
 8010730:	22ad      	movs	r2, #173	; 0xad
 8010732:	4940      	ldr	r1, [pc, #256]	; (8010834 <ip_reass_free_complete_datagram+0x138>)
 8010734:	483e      	ldr	r0, [pc, #248]	; (8010830 <ip_reass_free_complete_datagram+0x134>)
 8010736:	f000 ffe3 	bl	8011700 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	685b      	ldr	r3, [r3, #4]
 801073e:	685b      	ldr	r3, [r3, #4]
 8010740:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8010742:	697b      	ldr	r3, [r7, #20]
 8010744:	889b      	ldrh	r3, [r3, #4]
 8010746:	b29b      	uxth	r3, r3
 8010748:	2b00      	cmp	r3, #0
 801074a:	d12a      	bne.n	80107a2 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	685b      	ldr	r3, [r3, #4]
 8010750:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8010752:	697b      	ldr	r3, [r7, #20]
 8010754:	681a      	ldr	r2, [r3, #0]
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801075a:	69bb      	ldr	r3, [r7, #24]
 801075c:	6858      	ldr	r0, [r3, #4]
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	3308      	adds	r3, #8
 8010762:	2214      	movs	r2, #20
 8010764:	4619      	mov	r1, r3
 8010766:	f000 fef1 	bl	801154c <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801076a:	2101      	movs	r1, #1
 801076c:	69b8      	ldr	r0, [r7, #24]
 801076e:	f7ff fc47 	bl	8010000 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8010772:	69b8      	ldr	r0, [r7, #24]
 8010774:	f7f7 fe84 	bl	8008480 <pbuf_clen>
 8010778:	4603      	mov	r3, r0
 801077a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801077c:	8bfa      	ldrh	r2, [r7, #30]
 801077e:	8a7b      	ldrh	r3, [r7, #18]
 8010780:	4413      	add	r3, r2
 8010782:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010786:	db05      	blt.n	8010794 <ip_reass_free_complete_datagram+0x98>
 8010788:	4b27      	ldr	r3, [pc, #156]	; (8010828 <ip_reass_free_complete_datagram+0x12c>)
 801078a:	22bc      	movs	r2, #188	; 0xbc
 801078c:	492a      	ldr	r1, [pc, #168]	; (8010838 <ip_reass_free_complete_datagram+0x13c>)
 801078e:	4828      	ldr	r0, [pc, #160]	; (8010830 <ip_reass_free_complete_datagram+0x134>)
 8010790:	f000 ffb6 	bl	8011700 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8010794:	8bfa      	ldrh	r2, [r7, #30]
 8010796:	8a7b      	ldrh	r3, [r7, #18]
 8010798:	4413      	add	r3, r2
 801079a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801079c:	69b8      	ldr	r0, [r7, #24]
 801079e:	f7f7 fde7 	bl	8008370 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80107a2:	687b      	ldr	r3, [r7, #4]
 80107a4:	685b      	ldr	r3, [r3, #4]
 80107a6:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80107a8:	e01f      	b.n	80107ea <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80107aa:	69bb      	ldr	r3, [r7, #24]
 80107ac:	685b      	ldr	r3, [r3, #4]
 80107ae:	617b      	str	r3, [r7, #20]
    pcur = p;
 80107b0:	69bb      	ldr	r3, [r7, #24]
 80107b2:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80107b4:	697b      	ldr	r3, [r7, #20]
 80107b6:	681b      	ldr	r3, [r3, #0]
 80107b8:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80107ba:	68f8      	ldr	r0, [r7, #12]
 80107bc:	f7f7 fe60 	bl	8008480 <pbuf_clen>
 80107c0:	4603      	mov	r3, r0
 80107c2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80107c4:	8bfa      	ldrh	r2, [r7, #30]
 80107c6:	8a7b      	ldrh	r3, [r7, #18]
 80107c8:	4413      	add	r3, r2
 80107ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80107ce:	db05      	blt.n	80107dc <ip_reass_free_complete_datagram+0xe0>
 80107d0:	4b15      	ldr	r3, [pc, #84]	; (8010828 <ip_reass_free_complete_datagram+0x12c>)
 80107d2:	22cc      	movs	r2, #204	; 0xcc
 80107d4:	4918      	ldr	r1, [pc, #96]	; (8010838 <ip_reass_free_complete_datagram+0x13c>)
 80107d6:	4816      	ldr	r0, [pc, #88]	; (8010830 <ip_reass_free_complete_datagram+0x134>)
 80107d8:	f000 ff92 	bl	8011700 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80107dc:	8bfa      	ldrh	r2, [r7, #30]
 80107de:	8a7b      	ldrh	r3, [r7, #18]
 80107e0:	4413      	add	r3, r2
 80107e2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80107e4:	68f8      	ldr	r0, [r7, #12]
 80107e6:	f7f7 fdc3 	bl	8008370 <pbuf_free>
  while (p != NULL) {
 80107ea:	69bb      	ldr	r3, [r7, #24]
 80107ec:	2b00      	cmp	r3, #0
 80107ee:	d1dc      	bne.n	80107aa <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80107f0:	6839      	ldr	r1, [r7, #0]
 80107f2:	6878      	ldr	r0, [r7, #4]
 80107f4:	f000 f8c2 	bl	801097c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80107f8:	4b10      	ldr	r3, [pc, #64]	; (801083c <ip_reass_free_complete_datagram+0x140>)
 80107fa:	881b      	ldrh	r3, [r3, #0]
 80107fc:	8bfa      	ldrh	r2, [r7, #30]
 80107fe:	429a      	cmp	r2, r3
 8010800:	d905      	bls.n	801080e <ip_reass_free_complete_datagram+0x112>
 8010802:	4b09      	ldr	r3, [pc, #36]	; (8010828 <ip_reass_free_complete_datagram+0x12c>)
 8010804:	22d2      	movs	r2, #210	; 0xd2
 8010806:	490e      	ldr	r1, [pc, #56]	; (8010840 <ip_reass_free_complete_datagram+0x144>)
 8010808:	4809      	ldr	r0, [pc, #36]	; (8010830 <ip_reass_free_complete_datagram+0x134>)
 801080a:	f000 ff79 	bl	8011700 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801080e:	4b0b      	ldr	r3, [pc, #44]	; (801083c <ip_reass_free_complete_datagram+0x140>)
 8010810:	881a      	ldrh	r2, [r3, #0]
 8010812:	8bfb      	ldrh	r3, [r7, #30]
 8010814:	1ad3      	subs	r3, r2, r3
 8010816:	b29a      	uxth	r2, r3
 8010818:	4b08      	ldr	r3, [pc, #32]	; (801083c <ip_reass_free_complete_datagram+0x140>)
 801081a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801081c:	8bfb      	ldrh	r3, [r7, #30]
}
 801081e:	4618      	mov	r0, r3
 8010820:	3720      	adds	r7, #32
 8010822:	46bd      	mov	sp, r7
 8010824:	bd80      	pop	{r7, pc}
 8010826:	bf00      	nop
 8010828:	080161f8 	.word	0x080161f8
 801082c:	08016234 	.word	0x08016234
 8010830:	08016240 	.word	0x08016240
 8010834:	08016268 	.word	0x08016268
 8010838:	0801627c 	.word	0x0801627c
 801083c:	20000684 	.word	0x20000684
 8010840:	0801629c 	.word	0x0801629c

08010844 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8010844:	b580      	push	{r7, lr}
 8010846:	b08a      	sub	sp, #40	; 0x28
 8010848:	af00      	add	r7, sp, #0
 801084a:	6078      	str	r0, [r7, #4]
 801084c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801084e:	2300      	movs	r3, #0
 8010850:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8010852:	2300      	movs	r3, #0
 8010854:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8010856:	2300      	movs	r3, #0
 8010858:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801085a:	2300      	movs	r3, #0
 801085c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801085e:	2300      	movs	r3, #0
 8010860:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8010862:	4b28      	ldr	r3, [pc, #160]	; (8010904 <ip_reass_remove_oldest_datagram+0xc0>)
 8010864:	681b      	ldr	r3, [r3, #0]
 8010866:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8010868:	e030      	b.n	80108cc <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801086a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801086c:	695a      	ldr	r2, [r3, #20]
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	68db      	ldr	r3, [r3, #12]
 8010872:	429a      	cmp	r2, r3
 8010874:	d10c      	bne.n	8010890 <ip_reass_remove_oldest_datagram+0x4c>
 8010876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010878:	699a      	ldr	r2, [r3, #24]
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	691b      	ldr	r3, [r3, #16]
 801087e:	429a      	cmp	r2, r3
 8010880:	d106      	bne.n	8010890 <ip_reass_remove_oldest_datagram+0x4c>
 8010882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010884:	899a      	ldrh	r2, [r3, #12]
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	889b      	ldrh	r3, [r3, #4]
 801088a:	b29b      	uxth	r3, r3
 801088c:	429a      	cmp	r2, r3
 801088e:	d014      	beq.n	80108ba <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8010890:	693b      	ldr	r3, [r7, #16]
 8010892:	3301      	adds	r3, #1
 8010894:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8010896:	6a3b      	ldr	r3, [r7, #32]
 8010898:	2b00      	cmp	r3, #0
 801089a:	d104      	bne.n	80108a6 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801089c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801089e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80108a0:	69fb      	ldr	r3, [r7, #28]
 80108a2:	61bb      	str	r3, [r7, #24]
 80108a4:	e009      	b.n	80108ba <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80108a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108a8:	7fda      	ldrb	r2, [r3, #31]
 80108aa:	6a3b      	ldr	r3, [r7, #32]
 80108ac:	7fdb      	ldrb	r3, [r3, #31]
 80108ae:	429a      	cmp	r2, r3
 80108b0:	d803      	bhi.n	80108ba <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80108b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108b4:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80108b6:	69fb      	ldr	r3, [r7, #28]
 80108b8:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80108ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108bc:	681b      	ldr	r3, [r3, #0]
 80108be:	2b00      	cmp	r3, #0
 80108c0:	d001      	beq.n	80108c6 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80108c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108c4:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80108c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108c8:	681b      	ldr	r3, [r3, #0]
 80108ca:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80108cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108ce:	2b00      	cmp	r3, #0
 80108d0:	d1cb      	bne.n	801086a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80108d2:	6a3b      	ldr	r3, [r7, #32]
 80108d4:	2b00      	cmp	r3, #0
 80108d6:	d008      	beq.n	80108ea <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80108d8:	69b9      	ldr	r1, [r7, #24]
 80108da:	6a38      	ldr	r0, [r7, #32]
 80108dc:	f7ff ff0e 	bl	80106fc <ip_reass_free_complete_datagram>
 80108e0:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80108e2:	697a      	ldr	r2, [r7, #20]
 80108e4:	68fb      	ldr	r3, [r7, #12]
 80108e6:	4413      	add	r3, r2
 80108e8:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80108ea:	697a      	ldr	r2, [r7, #20]
 80108ec:	683b      	ldr	r3, [r7, #0]
 80108ee:	429a      	cmp	r2, r3
 80108f0:	da02      	bge.n	80108f8 <ip_reass_remove_oldest_datagram+0xb4>
 80108f2:	693b      	ldr	r3, [r7, #16]
 80108f4:	2b01      	cmp	r3, #1
 80108f6:	dcac      	bgt.n	8010852 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80108f8:	697b      	ldr	r3, [r7, #20]
}
 80108fa:	4618      	mov	r0, r3
 80108fc:	3728      	adds	r7, #40	; 0x28
 80108fe:	46bd      	mov	sp, r7
 8010900:	bd80      	pop	{r7, pc}
 8010902:	bf00      	nop
 8010904:	20000680 	.word	0x20000680

08010908 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8010908:	b580      	push	{r7, lr}
 801090a:	b084      	sub	sp, #16
 801090c:	af00      	add	r7, sp, #0
 801090e:	6078      	str	r0, [r7, #4]
 8010910:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8010912:	2004      	movs	r0, #4
 8010914:	f7f6 fece 	bl	80076b4 <memp_malloc>
 8010918:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801091a:	68fb      	ldr	r3, [r7, #12]
 801091c:	2b00      	cmp	r3, #0
 801091e:	d110      	bne.n	8010942 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8010920:	6839      	ldr	r1, [r7, #0]
 8010922:	6878      	ldr	r0, [r7, #4]
 8010924:	f7ff ff8e 	bl	8010844 <ip_reass_remove_oldest_datagram>
 8010928:	4602      	mov	r2, r0
 801092a:	683b      	ldr	r3, [r7, #0]
 801092c:	4293      	cmp	r3, r2
 801092e:	dc03      	bgt.n	8010938 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8010930:	2004      	movs	r0, #4
 8010932:	f7f6 febf 	bl	80076b4 <memp_malloc>
 8010936:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8010938:	68fb      	ldr	r3, [r7, #12]
 801093a:	2b00      	cmp	r3, #0
 801093c:	d101      	bne.n	8010942 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801093e:	2300      	movs	r3, #0
 8010940:	e016      	b.n	8010970 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8010942:	2220      	movs	r2, #32
 8010944:	2100      	movs	r1, #0
 8010946:	68f8      	ldr	r0, [r7, #12]
 8010948:	f000 fe28 	bl	801159c <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801094c:	68fb      	ldr	r3, [r7, #12]
 801094e:	220f      	movs	r2, #15
 8010950:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8010952:	4b09      	ldr	r3, [pc, #36]	; (8010978 <ip_reass_enqueue_new_datagram+0x70>)
 8010954:	681a      	ldr	r2, [r3, #0]
 8010956:	68fb      	ldr	r3, [r7, #12]
 8010958:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801095a:	4a07      	ldr	r2, [pc, #28]	; (8010978 <ip_reass_enqueue_new_datagram+0x70>)
 801095c:	68fb      	ldr	r3, [r7, #12]
 801095e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8010960:	68fb      	ldr	r3, [r7, #12]
 8010962:	3308      	adds	r3, #8
 8010964:	2214      	movs	r2, #20
 8010966:	6879      	ldr	r1, [r7, #4]
 8010968:	4618      	mov	r0, r3
 801096a:	f000 fdef 	bl	801154c <memcpy>
  return ipr;
 801096e:	68fb      	ldr	r3, [r7, #12]
}
 8010970:	4618      	mov	r0, r3
 8010972:	3710      	adds	r7, #16
 8010974:	46bd      	mov	sp, r7
 8010976:	bd80      	pop	{r7, pc}
 8010978:	20000680 	.word	0x20000680

0801097c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801097c:	b580      	push	{r7, lr}
 801097e:	b082      	sub	sp, #8
 8010980:	af00      	add	r7, sp, #0
 8010982:	6078      	str	r0, [r7, #4]
 8010984:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8010986:	4b10      	ldr	r3, [pc, #64]	; (80109c8 <ip_reass_dequeue_datagram+0x4c>)
 8010988:	681b      	ldr	r3, [r3, #0]
 801098a:	687a      	ldr	r2, [r7, #4]
 801098c:	429a      	cmp	r2, r3
 801098e:	d104      	bne.n	801099a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	681b      	ldr	r3, [r3, #0]
 8010994:	4a0c      	ldr	r2, [pc, #48]	; (80109c8 <ip_reass_dequeue_datagram+0x4c>)
 8010996:	6013      	str	r3, [r2, #0]
 8010998:	e00d      	b.n	80109b6 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801099a:	683b      	ldr	r3, [r7, #0]
 801099c:	2b00      	cmp	r3, #0
 801099e:	d106      	bne.n	80109ae <ip_reass_dequeue_datagram+0x32>
 80109a0:	4b0a      	ldr	r3, [pc, #40]	; (80109cc <ip_reass_dequeue_datagram+0x50>)
 80109a2:	f240 1245 	movw	r2, #325	; 0x145
 80109a6:	490a      	ldr	r1, [pc, #40]	; (80109d0 <ip_reass_dequeue_datagram+0x54>)
 80109a8:	480a      	ldr	r0, [pc, #40]	; (80109d4 <ip_reass_dequeue_datagram+0x58>)
 80109aa:	f000 fea9 	bl	8011700 <iprintf>
    prev->next = ipr->next;
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	681a      	ldr	r2, [r3, #0]
 80109b2:	683b      	ldr	r3, [r7, #0]
 80109b4:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80109b6:	6879      	ldr	r1, [r7, #4]
 80109b8:	2004      	movs	r0, #4
 80109ba:	f7f6 fec7 	bl	800774c <memp_free>
}
 80109be:	bf00      	nop
 80109c0:	3708      	adds	r7, #8
 80109c2:	46bd      	mov	sp, r7
 80109c4:	bd80      	pop	{r7, pc}
 80109c6:	bf00      	nop
 80109c8:	20000680 	.word	0x20000680
 80109cc:	080161f8 	.word	0x080161f8
 80109d0:	080162c0 	.word	0x080162c0
 80109d4:	08016240 	.word	0x08016240

080109d8 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80109d8:	b580      	push	{r7, lr}
 80109da:	b08c      	sub	sp, #48	; 0x30
 80109dc:	af00      	add	r7, sp, #0
 80109de:	60f8      	str	r0, [r7, #12]
 80109e0:	60b9      	str	r1, [r7, #8]
 80109e2:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80109e4:	2300      	movs	r3, #0
 80109e6:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80109e8:	2301      	movs	r3, #1
 80109ea:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80109ec:	68bb      	ldr	r3, [r7, #8]
 80109ee:	685b      	ldr	r3, [r3, #4]
 80109f0:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80109f2:	69fb      	ldr	r3, [r7, #28]
 80109f4:	885b      	ldrh	r3, [r3, #2]
 80109f6:	b29b      	uxth	r3, r3
 80109f8:	4618      	mov	r0, r3
 80109fa:	f7f6 f927 	bl	8006c4c <lwip_htons>
 80109fe:	4603      	mov	r3, r0
 8010a00:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8010a02:	69fb      	ldr	r3, [r7, #28]
 8010a04:	781b      	ldrb	r3, [r3, #0]
 8010a06:	f003 030f 	and.w	r3, r3, #15
 8010a0a:	b2db      	uxtb	r3, r3
 8010a0c:	009b      	lsls	r3, r3, #2
 8010a0e:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8010a10:	7e7b      	ldrb	r3, [r7, #25]
 8010a12:	b29b      	uxth	r3, r3
 8010a14:	8b7a      	ldrh	r2, [r7, #26]
 8010a16:	429a      	cmp	r2, r3
 8010a18:	d202      	bcs.n	8010a20 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010a1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010a1e:	e135      	b.n	8010c8c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8010a20:	7e7b      	ldrb	r3, [r7, #25]
 8010a22:	b29b      	uxth	r3, r3
 8010a24:	8b7a      	ldrh	r2, [r7, #26]
 8010a26:	1ad3      	subs	r3, r2, r3
 8010a28:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8010a2a:	69fb      	ldr	r3, [r7, #28]
 8010a2c:	88db      	ldrh	r3, [r3, #6]
 8010a2e:	b29b      	uxth	r3, r3
 8010a30:	4618      	mov	r0, r3
 8010a32:	f7f6 f90b 	bl	8006c4c <lwip_htons>
 8010a36:	4603      	mov	r3, r0
 8010a38:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010a3c:	b29b      	uxth	r3, r3
 8010a3e:	00db      	lsls	r3, r3, #3
 8010a40:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8010a42:	68bb      	ldr	r3, [r7, #8]
 8010a44:	685b      	ldr	r3, [r3, #4]
 8010a46:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8010a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a4a:	2200      	movs	r2, #0
 8010a4c:	701a      	strb	r2, [r3, #0]
 8010a4e:	2200      	movs	r2, #0
 8010a50:	705a      	strb	r2, [r3, #1]
 8010a52:	2200      	movs	r2, #0
 8010a54:	709a      	strb	r2, [r3, #2]
 8010a56:	2200      	movs	r2, #0
 8010a58:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8010a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a5c:	8afa      	ldrh	r2, [r7, #22]
 8010a5e:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8010a60:	8afa      	ldrh	r2, [r7, #22]
 8010a62:	8b7b      	ldrh	r3, [r7, #26]
 8010a64:	4413      	add	r3, r2
 8010a66:	b29a      	uxth	r2, r3
 8010a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a6a:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8010a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a6e:	88db      	ldrh	r3, [r3, #6]
 8010a70:	b29b      	uxth	r3, r3
 8010a72:	8afa      	ldrh	r2, [r7, #22]
 8010a74:	429a      	cmp	r2, r3
 8010a76:	d902      	bls.n	8010a7e <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010a78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010a7c:	e106      	b.n	8010c8c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8010a7e:	68fb      	ldr	r3, [r7, #12]
 8010a80:	685b      	ldr	r3, [r3, #4]
 8010a82:	627b      	str	r3, [r7, #36]	; 0x24
 8010a84:	e068      	b.n	8010b58 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8010a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a88:	685b      	ldr	r3, [r3, #4]
 8010a8a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8010a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a8e:	889b      	ldrh	r3, [r3, #4]
 8010a90:	b29a      	uxth	r2, r3
 8010a92:	693b      	ldr	r3, [r7, #16]
 8010a94:	889b      	ldrh	r3, [r3, #4]
 8010a96:	b29b      	uxth	r3, r3
 8010a98:	429a      	cmp	r2, r3
 8010a9a:	d235      	bcs.n	8010b08 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8010a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010aa0:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8010aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010aa4:	2b00      	cmp	r3, #0
 8010aa6:	d020      	beq.n	8010aea <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8010aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010aaa:	889b      	ldrh	r3, [r3, #4]
 8010aac:	b29a      	uxth	r2, r3
 8010aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ab0:	88db      	ldrh	r3, [r3, #6]
 8010ab2:	b29b      	uxth	r3, r3
 8010ab4:	429a      	cmp	r2, r3
 8010ab6:	d307      	bcc.n	8010ac8 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8010ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010aba:	88db      	ldrh	r3, [r3, #6]
 8010abc:	b29a      	uxth	r2, r3
 8010abe:	693b      	ldr	r3, [r7, #16]
 8010ac0:	889b      	ldrh	r3, [r3, #4]
 8010ac2:	b29b      	uxth	r3, r3
 8010ac4:	429a      	cmp	r2, r3
 8010ac6:	d902      	bls.n	8010ace <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010ac8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010acc:	e0de      	b.n	8010c8c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8010ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ad0:	68ba      	ldr	r2, [r7, #8]
 8010ad2:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8010ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ad6:	88db      	ldrh	r3, [r3, #6]
 8010ad8:	b29a      	uxth	r2, r3
 8010ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010adc:	889b      	ldrh	r3, [r3, #4]
 8010ade:	b29b      	uxth	r3, r3
 8010ae0:	429a      	cmp	r2, r3
 8010ae2:	d03d      	beq.n	8010b60 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8010ae4:	2300      	movs	r3, #0
 8010ae6:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8010ae8:	e03a      	b.n	8010b60 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8010aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010aec:	88db      	ldrh	r3, [r3, #6]
 8010aee:	b29a      	uxth	r2, r3
 8010af0:	693b      	ldr	r3, [r7, #16]
 8010af2:	889b      	ldrh	r3, [r3, #4]
 8010af4:	b29b      	uxth	r3, r3
 8010af6:	429a      	cmp	r2, r3
 8010af8:	d902      	bls.n	8010b00 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010afa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010afe:	e0c5      	b.n	8010c8c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8010b00:	68fb      	ldr	r3, [r7, #12]
 8010b02:	68ba      	ldr	r2, [r7, #8]
 8010b04:	605a      	str	r2, [r3, #4]
      break;
 8010b06:	e02b      	b.n	8010b60 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8010b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b0a:	889b      	ldrh	r3, [r3, #4]
 8010b0c:	b29a      	uxth	r2, r3
 8010b0e:	693b      	ldr	r3, [r7, #16]
 8010b10:	889b      	ldrh	r3, [r3, #4]
 8010b12:	b29b      	uxth	r3, r3
 8010b14:	429a      	cmp	r2, r3
 8010b16:	d102      	bne.n	8010b1e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010b18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010b1c:	e0b6      	b.n	8010c8c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8010b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b20:	889b      	ldrh	r3, [r3, #4]
 8010b22:	b29a      	uxth	r2, r3
 8010b24:	693b      	ldr	r3, [r7, #16]
 8010b26:	88db      	ldrh	r3, [r3, #6]
 8010b28:	b29b      	uxth	r3, r3
 8010b2a:	429a      	cmp	r2, r3
 8010b2c:	d202      	bcs.n	8010b34 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010b2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010b32:	e0ab      	b.n	8010c8c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8010b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b36:	2b00      	cmp	r3, #0
 8010b38:	d009      	beq.n	8010b4e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8010b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b3c:	88db      	ldrh	r3, [r3, #6]
 8010b3e:	b29a      	uxth	r2, r3
 8010b40:	693b      	ldr	r3, [r7, #16]
 8010b42:	889b      	ldrh	r3, [r3, #4]
 8010b44:	b29b      	uxth	r3, r3
 8010b46:	429a      	cmp	r2, r3
 8010b48:	d001      	beq.n	8010b4e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8010b4a:	2300      	movs	r3, #0
 8010b4c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8010b4e:	693b      	ldr	r3, [r7, #16]
 8010b50:	681b      	ldr	r3, [r3, #0]
 8010b52:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8010b54:	693b      	ldr	r3, [r7, #16]
 8010b56:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8010b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b5a:	2b00      	cmp	r3, #0
 8010b5c:	d193      	bne.n	8010a86 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8010b5e:	e000      	b.n	8010b62 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8010b60:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8010b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b64:	2b00      	cmp	r3, #0
 8010b66:	d12d      	bne.n	8010bc4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8010b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b6a:	2b00      	cmp	r3, #0
 8010b6c:	d01c      	beq.n	8010ba8 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8010b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b70:	88db      	ldrh	r3, [r3, #6]
 8010b72:	b29a      	uxth	r2, r3
 8010b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b76:	889b      	ldrh	r3, [r3, #4]
 8010b78:	b29b      	uxth	r3, r3
 8010b7a:	429a      	cmp	r2, r3
 8010b7c:	d906      	bls.n	8010b8c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8010b7e:	4b45      	ldr	r3, [pc, #276]	; (8010c94 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010b80:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8010b84:	4944      	ldr	r1, [pc, #272]	; (8010c98 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8010b86:	4845      	ldr	r0, [pc, #276]	; (8010c9c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8010b88:	f000 fdba 	bl	8011700 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8010b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b8e:	68ba      	ldr	r2, [r7, #8]
 8010b90:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8010b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b94:	88db      	ldrh	r3, [r3, #6]
 8010b96:	b29a      	uxth	r2, r3
 8010b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b9a:	889b      	ldrh	r3, [r3, #4]
 8010b9c:	b29b      	uxth	r3, r3
 8010b9e:	429a      	cmp	r2, r3
 8010ba0:	d010      	beq.n	8010bc4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8010ba2:	2300      	movs	r3, #0
 8010ba4:	623b      	str	r3, [r7, #32]
 8010ba6:	e00d      	b.n	8010bc4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8010ba8:	68fb      	ldr	r3, [r7, #12]
 8010baa:	685b      	ldr	r3, [r3, #4]
 8010bac:	2b00      	cmp	r3, #0
 8010bae:	d006      	beq.n	8010bbe <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8010bb0:	4b38      	ldr	r3, [pc, #224]	; (8010c94 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010bb2:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8010bb6:	493a      	ldr	r1, [pc, #232]	; (8010ca0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8010bb8:	4838      	ldr	r0, [pc, #224]	; (8010c9c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8010bba:	f000 fda1 	bl	8011700 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8010bbe:	68fb      	ldr	r3, [r7, #12]
 8010bc0:	68ba      	ldr	r2, [r7, #8]
 8010bc2:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	2b00      	cmp	r3, #0
 8010bc8:	d105      	bne.n	8010bd6 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8010bca:	68fb      	ldr	r3, [r7, #12]
 8010bcc:	7f9b      	ldrb	r3, [r3, #30]
 8010bce:	f003 0301 	and.w	r3, r3, #1
 8010bd2:	2b00      	cmp	r3, #0
 8010bd4:	d059      	beq.n	8010c8a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8010bd6:	6a3b      	ldr	r3, [r7, #32]
 8010bd8:	2b00      	cmp	r3, #0
 8010bda:	d04f      	beq.n	8010c7c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8010bdc:	68fb      	ldr	r3, [r7, #12]
 8010bde:	685b      	ldr	r3, [r3, #4]
 8010be0:	2b00      	cmp	r3, #0
 8010be2:	d006      	beq.n	8010bf2 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8010be4:	68fb      	ldr	r3, [r7, #12]
 8010be6:	685b      	ldr	r3, [r3, #4]
 8010be8:	685b      	ldr	r3, [r3, #4]
 8010bea:	889b      	ldrh	r3, [r3, #4]
 8010bec:	b29b      	uxth	r3, r3
 8010bee:	2b00      	cmp	r3, #0
 8010bf0:	d002      	beq.n	8010bf8 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8010bf2:	2300      	movs	r3, #0
 8010bf4:	623b      	str	r3, [r7, #32]
 8010bf6:	e041      	b.n	8010c7c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8010bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010bfa:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8010bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010bfe:	681b      	ldr	r3, [r3, #0]
 8010c00:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8010c02:	e012      	b.n	8010c2a <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8010c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c06:	685b      	ldr	r3, [r3, #4]
 8010c08:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8010c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c0c:	88db      	ldrh	r3, [r3, #6]
 8010c0e:	b29a      	uxth	r2, r3
 8010c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c12:	889b      	ldrh	r3, [r3, #4]
 8010c14:	b29b      	uxth	r3, r3
 8010c16:	429a      	cmp	r2, r3
 8010c18:	d002      	beq.n	8010c20 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8010c1a:	2300      	movs	r3, #0
 8010c1c:	623b      	str	r3, [r7, #32]
            break;
 8010c1e:	e007      	b.n	8010c30 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8010c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c22:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8010c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c26:	681b      	ldr	r3, [r3, #0]
 8010c28:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8010c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c2c:	2b00      	cmp	r3, #0
 8010c2e:	d1e9      	bne.n	8010c04 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8010c30:	6a3b      	ldr	r3, [r7, #32]
 8010c32:	2b00      	cmp	r3, #0
 8010c34:	d022      	beq.n	8010c7c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8010c36:	68fb      	ldr	r3, [r7, #12]
 8010c38:	685b      	ldr	r3, [r3, #4]
 8010c3a:	2b00      	cmp	r3, #0
 8010c3c:	d106      	bne.n	8010c4c <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8010c3e:	4b15      	ldr	r3, [pc, #84]	; (8010c94 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010c40:	f240 12df 	movw	r2, #479	; 0x1df
 8010c44:	4917      	ldr	r1, [pc, #92]	; (8010ca4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8010c46:	4815      	ldr	r0, [pc, #84]	; (8010c9c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8010c48:	f000 fd5a 	bl	8011700 <iprintf>
          LWIP_ASSERT("sanity check",
 8010c4c:	68fb      	ldr	r3, [r7, #12]
 8010c4e:	685b      	ldr	r3, [r3, #4]
 8010c50:	685b      	ldr	r3, [r3, #4]
 8010c52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010c54:	429a      	cmp	r2, r3
 8010c56:	d106      	bne.n	8010c66 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8010c58:	4b0e      	ldr	r3, [pc, #56]	; (8010c94 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010c5a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8010c5e:	4911      	ldr	r1, [pc, #68]	; (8010ca4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8010c60:	480e      	ldr	r0, [pc, #56]	; (8010c9c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8010c62:	f000 fd4d 	bl	8011700 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8010c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c68:	681b      	ldr	r3, [r3, #0]
 8010c6a:	2b00      	cmp	r3, #0
 8010c6c:	d006      	beq.n	8010c7c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8010c6e:	4b09      	ldr	r3, [pc, #36]	; (8010c94 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010c70:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8010c74:	490c      	ldr	r1, [pc, #48]	; (8010ca8 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8010c76:	4809      	ldr	r0, [pc, #36]	; (8010c9c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8010c78:	f000 fd42 	bl	8011700 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8010c7c:	6a3b      	ldr	r3, [r7, #32]
 8010c7e:	2b00      	cmp	r3, #0
 8010c80:	bf14      	ite	ne
 8010c82:	2301      	movne	r3, #1
 8010c84:	2300      	moveq	r3, #0
 8010c86:	b2db      	uxtb	r3, r3
 8010c88:	e000      	b.n	8010c8c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8010c8a:	2300      	movs	r3, #0
}
 8010c8c:	4618      	mov	r0, r3
 8010c8e:	3730      	adds	r7, #48	; 0x30
 8010c90:	46bd      	mov	sp, r7
 8010c92:	bd80      	pop	{r7, pc}
 8010c94:	080161f8 	.word	0x080161f8
 8010c98:	080162dc 	.word	0x080162dc
 8010c9c:	08016240 	.word	0x08016240
 8010ca0:	080162fc 	.word	0x080162fc
 8010ca4:	08016334 	.word	0x08016334
 8010ca8:	08016344 	.word	0x08016344

08010cac <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8010cac:	b580      	push	{r7, lr}
 8010cae:	b08e      	sub	sp, #56	; 0x38
 8010cb0:	af00      	add	r7, sp, #0
 8010cb2:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	685b      	ldr	r3, [r3, #4]
 8010cb8:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8010cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cbc:	781b      	ldrb	r3, [r3, #0]
 8010cbe:	f003 030f 	and.w	r3, r3, #15
 8010cc2:	b2db      	uxtb	r3, r3
 8010cc4:	009b      	lsls	r3, r3, #2
 8010cc6:	b2db      	uxtb	r3, r3
 8010cc8:	2b14      	cmp	r3, #20
 8010cca:	f040 8167 	bne.w	8010f9c <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8010cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cd0:	88db      	ldrh	r3, [r3, #6]
 8010cd2:	b29b      	uxth	r3, r3
 8010cd4:	4618      	mov	r0, r3
 8010cd6:	f7f5 ffb9 	bl	8006c4c <lwip_htons>
 8010cda:	4603      	mov	r3, r0
 8010cdc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010ce0:	b29b      	uxth	r3, r3
 8010ce2:	00db      	lsls	r3, r3, #3
 8010ce4:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8010ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ce8:	885b      	ldrh	r3, [r3, #2]
 8010cea:	b29b      	uxth	r3, r3
 8010cec:	4618      	mov	r0, r3
 8010cee:	f7f5 ffad 	bl	8006c4c <lwip_htons>
 8010cf2:	4603      	mov	r3, r0
 8010cf4:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8010cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cf8:	781b      	ldrb	r3, [r3, #0]
 8010cfa:	f003 030f 	and.w	r3, r3, #15
 8010cfe:	b2db      	uxtb	r3, r3
 8010d00:	009b      	lsls	r3, r3, #2
 8010d02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8010d06:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8010d0a:	b29b      	uxth	r3, r3
 8010d0c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010d0e:	429a      	cmp	r2, r3
 8010d10:	f0c0 8146 	bcc.w	8010fa0 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8010d14:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8010d18:	b29b      	uxth	r3, r3
 8010d1a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010d1c:	1ad3      	subs	r3, r2, r3
 8010d1e:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8010d20:	6878      	ldr	r0, [r7, #4]
 8010d22:	f7f7 fbad 	bl	8008480 <pbuf_clen>
 8010d26:	4603      	mov	r3, r0
 8010d28:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8010d2a:	4b9f      	ldr	r3, [pc, #636]	; (8010fa8 <ip4_reass+0x2fc>)
 8010d2c:	881b      	ldrh	r3, [r3, #0]
 8010d2e:	461a      	mov	r2, r3
 8010d30:	8c3b      	ldrh	r3, [r7, #32]
 8010d32:	4413      	add	r3, r2
 8010d34:	2b0a      	cmp	r3, #10
 8010d36:	dd10      	ble.n	8010d5a <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8010d38:	8c3b      	ldrh	r3, [r7, #32]
 8010d3a:	4619      	mov	r1, r3
 8010d3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010d3e:	f7ff fd81 	bl	8010844 <ip_reass_remove_oldest_datagram>
 8010d42:	4603      	mov	r3, r0
 8010d44:	2b00      	cmp	r3, #0
 8010d46:	f000 812d 	beq.w	8010fa4 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8010d4a:	4b97      	ldr	r3, [pc, #604]	; (8010fa8 <ip4_reass+0x2fc>)
 8010d4c:	881b      	ldrh	r3, [r3, #0]
 8010d4e:	461a      	mov	r2, r3
 8010d50:	8c3b      	ldrh	r3, [r7, #32]
 8010d52:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8010d54:	2b0a      	cmp	r3, #10
 8010d56:	f300 8125 	bgt.w	8010fa4 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8010d5a:	4b94      	ldr	r3, [pc, #592]	; (8010fac <ip4_reass+0x300>)
 8010d5c:	681b      	ldr	r3, [r3, #0]
 8010d5e:	633b      	str	r3, [r7, #48]	; 0x30
 8010d60:	e015      	b.n	8010d8e <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8010d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d64:	695a      	ldr	r2, [r3, #20]
 8010d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d68:	68db      	ldr	r3, [r3, #12]
 8010d6a:	429a      	cmp	r2, r3
 8010d6c:	d10c      	bne.n	8010d88 <ip4_reass+0xdc>
 8010d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d70:	699a      	ldr	r2, [r3, #24]
 8010d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d74:	691b      	ldr	r3, [r3, #16]
 8010d76:	429a      	cmp	r2, r3
 8010d78:	d106      	bne.n	8010d88 <ip4_reass+0xdc>
 8010d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d7c:	899a      	ldrh	r2, [r3, #12]
 8010d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d80:	889b      	ldrh	r3, [r3, #4]
 8010d82:	b29b      	uxth	r3, r3
 8010d84:	429a      	cmp	r2, r3
 8010d86:	d006      	beq.n	8010d96 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8010d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d8a:	681b      	ldr	r3, [r3, #0]
 8010d8c:	633b      	str	r3, [r7, #48]	; 0x30
 8010d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d90:	2b00      	cmp	r3, #0
 8010d92:	d1e6      	bne.n	8010d62 <ip4_reass+0xb6>
 8010d94:	e000      	b.n	8010d98 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8010d96:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8010d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d9a:	2b00      	cmp	r3, #0
 8010d9c:	d109      	bne.n	8010db2 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8010d9e:	8c3b      	ldrh	r3, [r7, #32]
 8010da0:	4619      	mov	r1, r3
 8010da2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010da4:	f7ff fdb0 	bl	8010908 <ip_reass_enqueue_new_datagram>
 8010da8:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8010daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010dac:	2b00      	cmp	r3, #0
 8010dae:	d11c      	bne.n	8010dea <ip4_reass+0x13e>
      goto nullreturn;
 8010db0:	e109      	b.n	8010fc6 <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8010db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010db4:	88db      	ldrh	r3, [r3, #6]
 8010db6:	b29b      	uxth	r3, r3
 8010db8:	4618      	mov	r0, r3
 8010dba:	f7f5 ff47 	bl	8006c4c <lwip_htons>
 8010dbe:	4603      	mov	r3, r0
 8010dc0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010dc4:	2b00      	cmp	r3, #0
 8010dc6:	d110      	bne.n	8010dea <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8010dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010dca:	89db      	ldrh	r3, [r3, #14]
 8010dcc:	4618      	mov	r0, r3
 8010dce:	f7f5 ff3d 	bl	8006c4c <lwip_htons>
 8010dd2:	4603      	mov	r3, r0
 8010dd4:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8010dd8:	2b00      	cmp	r3, #0
 8010dda:	d006      	beq.n	8010dea <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8010ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010dde:	3308      	adds	r3, #8
 8010de0:	2214      	movs	r2, #20
 8010de2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010de4:	4618      	mov	r0, r3
 8010de6:	f000 fbb1 	bl	801154c <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8010dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010dec:	88db      	ldrh	r3, [r3, #6]
 8010dee:	b29b      	uxth	r3, r3
 8010df0:	f003 0320 	and.w	r3, r3, #32
 8010df4:	2b00      	cmp	r3, #0
 8010df6:	bf0c      	ite	eq
 8010df8:	2301      	moveq	r3, #1
 8010dfa:	2300      	movne	r3, #0
 8010dfc:	b2db      	uxtb	r3, r3
 8010dfe:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8010e00:	69fb      	ldr	r3, [r7, #28]
 8010e02:	2b00      	cmp	r3, #0
 8010e04:	d00e      	beq.n	8010e24 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8010e06:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8010e08:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010e0a:	4413      	add	r3, r2
 8010e0c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8010e0e:	8b7a      	ldrh	r2, [r7, #26]
 8010e10:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010e12:	429a      	cmp	r2, r3
 8010e14:	f0c0 80a0 	bcc.w	8010f58 <ip4_reass+0x2ac>
 8010e18:	8b7b      	ldrh	r3, [r7, #26]
 8010e1a:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8010e1e:	4293      	cmp	r3, r2
 8010e20:	f200 809a 	bhi.w	8010f58 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8010e24:	69fa      	ldr	r2, [r7, #28]
 8010e26:	6879      	ldr	r1, [r7, #4]
 8010e28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010e2a:	f7ff fdd5 	bl	80109d8 <ip_reass_chain_frag_into_datagram_and_validate>
 8010e2e:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8010e30:	697b      	ldr	r3, [r7, #20]
 8010e32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010e36:	f000 8091 	beq.w	8010f5c <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8010e3a:	4b5b      	ldr	r3, [pc, #364]	; (8010fa8 <ip4_reass+0x2fc>)
 8010e3c:	881a      	ldrh	r2, [r3, #0]
 8010e3e:	8c3b      	ldrh	r3, [r7, #32]
 8010e40:	4413      	add	r3, r2
 8010e42:	b29a      	uxth	r2, r3
 8010e44:	4b58      	ldr	r3, [pc, #352]	; (8010fa8 <ip4_reass+0x2fc>)
 8010e46:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8010e48:	69fb      	ldr	r3, [r7, #28]
 8010e4a:	2b00      	cmp	r3, #0
 8010e4c:	d00d      	beq.n	8010e6a <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8010e4e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8010e50:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010e52:	4413      	add	r3, r2
 8010e54:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8010e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e58:	8a7a      	ldrh	r2, [r7, #18]
 8010e5a:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8010e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e5e:	7f9b      	ldrb	r3, [r3, #30]
 8010e60:	f043 0301 	orr.w	r3, r3, #1
 8010e64:	b2da      	uxtb	r2, r3
 8010e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e68:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8010e6a:	697b      	ldr	r3, [r7, #20]
 8010e6c:	2b01      	cmp	r3, #1
 8010e6e:	d171      	bne.n	8010f54 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8010e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e72:	8b9b      	ldrh	r3, [r3, #28]
 8010e74:	3314      	adds	r3, #20
 8010e76:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8010e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e7a:	685b      	ldr	r3, [r3, #4]
 8010e7c:	685b      	ldr	r3, [r3, #4]
 8010e7e:	681b      	ldr	r3, [r3, #0]
 8010e80:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8010e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e84:	685b      	ldr	r3, [r3, #4]
 8010e86:	685b      	ldr	r3, [r3, #4]
 8010e88:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8010e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e8c:	3308      	adds	r3, #8
 8010e8e:	2214      	movs	r2, #20
 8010e90:	4619      	mov	r1, r3
 8010e92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010e94:	f000 fb5a 	bl	801154c <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8010e98:	8a3b      	ldrh	r3, [r7, #16]
 8010e9a:	4618      	mov	r0, r3
 8010e9c:	f7f5 fed6 	bl	8006c4c <lwip_htons>
 8010ea0:	4603      	mov	r3, r0
 8010ea2:	461a      	mov	r2, r3
 8010ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ea6:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8010ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010eaa:	2200      	movs	r2, #0
 8010eac:	719a      	strb	r2, [r3, #6]
 8010eae:	2200      	movs	r2, #0
 8010eb0:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8010eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010eb4:	2200      	movs	r2, #0
 8010eb6:	729a      	strb	r2, [r3, #10]
 8010eb8:	2200      	movs	r2, #0
 8010eba:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8010ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ebe:	685b      	ldr	r3, [r3, #4]
 8010ec0:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8010ec2:	e00d      	b.n	8010ee0 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8010ec4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ec6:	685b      	ldr	r3, [r3, #4]
 8010ec8:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8010eca:	2114      	movs	r1, #20
 8010ecc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010ece:	f7f7 f9c9 	bl	8008264 <pbuf_remove_header>
      pbuf_cat(p, r);
 8010ed2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010ed4:	6878      	ldr	r0, [r7, #4]
 8010ed6:	f7f7 fb0d 	bl	80084f4 <pbuf_cat>
      r = iprh->next_pbuf;
 8010eda:	68fb      	ldr	r3, [r7, #12]
 8010edc:	681b      	ldr	r3, [r3, #0]
 8010ede:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8010ee0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ee2:	2b00      	cmp	r3, #0
 8010ee4:	d1ee      	bne.n	8010ec4 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8010ee6:	4b31      	ldr	r3, [pc, #196]	; (8010fac <ip4_reass+0x300>)
 8010ee8:	681b      	ldr	r3, [r3, #0]
 8010eea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010eec:	429a      	cmp	r2, r3
 8010eee:	d102      	bne.n	8010ef6 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8010ef0:	2300      	movs	r3, #0
 8010ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010ef4:	e010      	b.n	8010f18 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8010ef6:	4b2d      	ldr	r3, [pc, #180]	; (8010fac <ip4_reass+0x300>)
 8010ef8:	681b      	ldr	r3, [r3, #0]
 8010efa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010efc:	e007      	b.n	8010f0e <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8010efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f00:	681b      	ldr	r3, [r3, #0]
 8010f02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010f04:	429a      	cmp	r2, r3
 8010f06:	d006      	beq.n	8010f16 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8010f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f0a:	681b      	ldr	r3, [r3, #0]
 8010f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f10:	2b00      	cmp	r3, #0
 8010f12:	d1f4      	bne.n	8010efe <ip4_reass+0x252>
 8010f14:	e000      	b.n	8010f18 <ip4_reass+0x26c>
          break;
 8010f16:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8010f18:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010f1a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010f1c:	f7ff fd2e 	bl	801097c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8010f20:	6878      	ldr	r0, [r7, #4]
 8010f22:	f7f7 faad 	bl	8008480 <pbuf_clen>
 8010f26:	4603      	mov	r3, r0
 8010f28:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8010f2a:	4b1f      	ldr	r3, [pc, #124]	; (8010fa8 <ip4_reass+0x2fc>)
 8010f2c:	881b      	ldrh	r3, [r3, #0]
 8010f2e:	8c3a      	ldrh	r2, [r7, #32]
 8010f30:	429a      	cmp	r2, r3
 8010f32:	d906      	bls.n	8010f42 <ip4_reass+0x296>
 8010f34:	4b1e      	ldr	r3, [pc, #120]	; (8010fb0 <ip4_reass+0x304>)
 8010f36:	f240 229b 	movw	r2, #667	; 0x29b
 8010f3a:	491e      	ldr	r1, [pc, #120]	; (8010fb4 <ip4_reass+0x308>)
 8010f3c:	481e      	ldr	r0, [pc, #120]	; (8010fb8 <ip4_reass+0x30c>)
 8010f3e:	f000 fbdf 	bl	8011700 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8010f42:	4b19      	ldr	r3, [pc, #100]	; (8010fa8 <ip4_reass+0x2fc>)
 8010f44:	881a      	ldrh	r2, [r3, #0]
 8010f46:	8c3b      	ldrh	r3, [r7, #32]
 8010f48:	1ad3      	subs	r3, r2, r3
 8010f4a:	b29a      	uxth	r2, r3
 8010f4c:	4b16      	ldr	r3, [pc, #88]	; (8010fa8 <ip4_reass+0x2fc>)
 8010f4e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8010f50:	687b      	ldr	r3, [r7, #4]
 8010f52:	e03c      	b.n	8010fce <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8010f54:	2300      	movs	r3, #0
 8010f56:	e03a      	b.n	8010fce <ip4_reass+0x322>
      goto nullreturn_ipr;
 8010f58:	bf00      	nop
 8010f5a:	e000      	b.n	8010f5e <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 8010f5c:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8010f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f60:	2b00      	cmp	r3, #0
 8010f62:	d106      	bne.n	8010f72 <ip4_reass+0x2c6>
 8010f64:	4b12      	ldr	r3, [pc, #72]	; (8010fb0 <ip4_reass+0x304>)
 8010f66:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8010f6a:	4914      	ldr	r1, [pc, #80]	; (8010fbc <ip4_reass+0x310>)
 8010f6c:	4812      	ldr	r0, [pc, #72]	; (8010fb8 <ip4_reass+0x30c>)
 8010f6e:	f000 fbc7 	bl	8011700 <iprintf>
  if (ipr->p == NULL) {
 8010f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f74:	685b      	ldr	r3, [r3, #4]
 8010f76:	2b00      	cmp	r3, #0
 8010f78:	d124      	bne.n	8010fc4 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8010f7a:	4b0c      	ldr	r3, [pc, #48]	; (8010fac <ip4_reass+0x300>)
 8010f7c:	681b      	ldr	r3, [r3, #0]
 8010f7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010f80:	429a      	cmp	r2, r3
 8010f82:	d006      	beq.n	8010f92 <ip4_reass+0x2e6>
 8010f84:	4b0a      	ldr	r3, [pc, #40]	; (8010fb0 <ip4_reass+0x304>)
 8010f86:	f240 22ab 	movw	r2, #683	; 0x2ab
 8010f8a:	490d      	ldr	r1, [pc, #52]	; (8010fc0 <ip4_reass+0x314>)
 8010f8c:	480a      	ldr	r0, [pc, #40]	; (8010fb8 <ip4_reass+0x30c>)
 8010f8e:	f000 fbb7 	bl	8011700 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8010f92:	2100      	movs	r1, #0
 8010f94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010f96:	f7ff fcf1 	bl	801097c <ip_reass_dequeue_datagram>
 8010f9a:	e014      	b.n	8010fc6 <ip4_reass+0x31a>
    goto nullreturn;
 8010f9c:	bf00      	nop
 8010f9e:	e012      	b.n	8010fc6 <ip4_reass+0x31a>
    goto nullreturn;
 8010fa0:	bf00      	nop
 8010fa2:	e010      	b.n	8010fc6 <ip4_reass+0x31a>
      goto nullreturn;
 8010fa4:	bf00      	nop
 8010fa6:	e00e      	b.n	8010fc6 <ip4_reass+0x31a>
 8010fa8:	20000684 	.word	0x20000684
 8010fac:	20000680 	.word	0x20000680
 8010fb0:	080161f8 	.word	0x080161f8
 8010fb4:	08016368 	.word	0x08016368
 8010fb8:	08016240 	.word	0x08016240
 8010fbc:	08016384 	.word	0x08016384
 8010fc0:	08016390 	.word	0x08016390
  }

nullreturn:
 8010fc4:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8010fc6:	6878      	ldr	r0, [r7, #4]
 8010fc8:	f7f7 f9d2 	bl	8008370 <pbuf_free>
  return NULL;
 8010fcc:	2300      	movs	r3, #0
}
 8010fce:	4618      	mov	r0, r3
 8010fd0:	3738      	adds	r7, #56	; 0x38
 8010fd2:	46bd      	mov	sp, r7
 8010fd4:	bd80      	pop	{r7, pc}
 8010fd6:	bf00      	nop

08010fd8 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8010fd8:	b580      	push	{r7, lr}
 8010fda:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8010fdc:	2005      	movs	r0, #5
 8010fde:	f7f6 fb69 	bl	80076b4 <memp_malloc>
 8010fe2:	4603      	mov	r3, r0
}
 8010fe4:	4618      	mov	r0, r3
 8010fe6:	bd80      	pop	{r7, pc}

08010fe8 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8010fe8:	b580      	push	{r7, lr}
 8010fea:	b082      	sub	sp, #8
 8010fec:	af00      	add	r7, sp, #0
 8010fee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8010ff0:	687b      	ldr	r3, [r7, #4]
 8010ff2:	2b00      	cmp	r3, #0
 8010ff4:	d106      	bne.n	8011004 <ip_frag_free_pbuf_custom_ref+0x1c>
 8010ff6:	4b07      	ldr	r3, [pc, #28]	; (8011014 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8010ff8:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8010ffc:	4906      	ldr	r1, [pc, #24]	; (8011018 <ip_frag_free_pbuf_custom_ref+0x30>)
 8010ffe:	4807      	ldr	r0, [pc, #28]	; (801101c <ip_frag_free_pbuf_custom_ref+0x34>)
 8011000:	f000 fb7e 	bl	8011700 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8011004:	6879      	ldr	r1, [r7, #4]
 8011006:	2005      	movs	r0, #5
 8011008:	f7f6 fba0 	bl	800774c <memp_free>
}
 801100c:	bf00      	nop
 801100e:	3708      	adds	r7, #8
 8011010:	46bd      	mov	sp, r7
 8011012:	bd80      	pop	{r7, pc}
 8011014:	080161f8 	.word	0x080161f8
 8011018:	080163b0 	.word	0x080163b0
 801101c:	08016240 	.word	0x08016240

08011020 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8011020:	b580      	push	{r7, lr}
 8011022:	b084      	sub	sp, #16
 8011024:	af00      	add	r7, sp, #0
 8011026:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801102c:	68fb      	ldr	r3, [r7, #12]
 801102e:	2b00      	cmp	r3, #0
 8011030:	d106      	bne.n	8011040 <ipfrag_free_pbuf_custom+0x20>
 8011032:	4b11      	ldr	r3, [pc, #68]	; (8011078 <ipfrag_free_pbuf_custom+0x58>)
 8011034:	f240 22ce 	movw	r2, #718	; 0x2ce
 8011038:	4910      	ldr	r1, [pc, #64]	; (801107c <ipfrag_free_pbuf_custom+0x5c>)
 801103a:	4811      	ldr	r0, [pc, #68]	; (8011080 <ipfrag_free_pbuf_custom+0x60>)
 801103c:	f000 fb60 	bl	8011700 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8011040:	68fa      	ldr	r2, [r7, #12]
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	429a      	cmp	r2, r3
 8011046:	d006      	beq.n	8011056 <ipfrag_free_pbuf_custom+0x36>
 8011048:	4b0b      	ldr	r3, [pc, #44]	; (8011078 <ipfrag_free_pbuf_custom+0x58>)
 801104a:	f240 22cf 	movw	r2, #719	; 0x2cf
 801104e:	490d      	ldr	r1, [pc, #52]	; (8011084 <ipfrag_free_pbuf_custom+0x64>)
 8011050:	480b      	ldr	r0, [pc, #44]	; (8011080 <ipfrag_free_pbuf_custom+0x60>)
 8011052:	f000 fb55 	bl	8011700 <iprintf>
  if (pcr->original != NULL) {
 8011056:	68fb      	ldr	r3, [r7, #12]
 8011058:	695b      	ldr	r3, [r3, #20]
 801105a:	2b00      	cmp	r3, #0
 801105c:	d004      	beq.n	8011068 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801105e:	68fb      	ldr	r3, [r7, #12]
 8011060:	695b      	ldr	r3, [r3, #20]
 8011062:	4618      	mov	r0, r3
 8011064:	f7f7 f984 	bl	8008370 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8011068:	68f8      	ldr	r0, [r7, #12]
 801106a:	f7ff ffbd 	bl	8010fe8 <ip_frag_free_pbuf_custom_ref>
}
 801106e:	bf00      	nop
 8011070:	3710      	adds	r7, #16
 8011072:	46bd      	mov	sp, r7
 8011074:	bd80      	pop	{r7, pc}
 8011076:	bf00      	nop
 8011078:	080161f8 	.word	0x080161f8
 801107c:	080163bc 	.word	0x080163bc
 8011080:	08016240 	.word	0x08016240
 8011084:	080163c8 	.word	0x080163c8

08011088 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8011088:	b580      	push	{r7, lr}
 801108a:	b094      	sub	sp, #80	; 0x50
 801108c:	af02      	add	r7, sp, #8
 801108e:	60f8      	str	r0, [r7, #12]
 8011090:	60b9      	str	r1, [r7, #8]
 8011092:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8011094:	2300      	movs	r3, #0
 8011096:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801109a:	68bb      	ldr	r3, [r7, #8]
 801109c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801109e:	3b14      	subs	r3, #20
 80110a0:	2b00      	cmp	r3, #0
 80110a2:	da00      	bge.n	80110a6 <ip4_frag+0x1e>
 80110a4:	3307      	adds	r3, #7
 80110a6:	10db      	asrs	r3, r3, #3
 80110a8:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80110aa:	2314      	movs	r3, #20
 80110ac:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80110ae:	68fb      	ldr	r3, [r7, #12]
 80110b0:	685b      	ldr	r3, [r3, #4]
 80110b2:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 80110b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80110b6:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80110b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110ba:	781b      	ldrb	r3, [r3, #0]
 80110bc:	f003 030f 	and.w	r3, r3, #15
 80110c0:	b2db      	uxtb	r3, r3
 80110c2:	009b      	lsls	r3, r3, #2
 80110c4:	b2db      	uxtb	r3, r3
 80110c6:	2b14      	cmp	r3, #20
 80110c8:	d002      	beq.n	80110d0 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80110ca:	f06f 0305 	mvn.w	r3, #5
 80110ce:	e110      	b.n	80112f2 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80110d0:	68fb      	ldr	r3, [r7, #12]
 80110d2:	895b      	ldrh	r3, [r3, #10]
 80110d4:	2b13      	cmp	r3, #19
 80110d6:	d809      	bhi.n	80110ec <ip4_frag+0x64>
 80110d8:	4b88      	ldr	r3, [pc, #544]	; (80112fc <ip4_frag+0x274>)
 80110da:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 80110de:	4988      	ldr	r1, [pc, #544]	; (8011300 <ip4_frag+0x278>)
 80110e0:	4888      	ldr	r0, [pc, #544]	; (8011304 <ip4_frag+0x27c>)
 80110e2:	f000 fb0d 	bl	8011700 <iprintf>
 80110e6:	f06f 0305 	mvn.w	r3, #5
 80110ea:	e102      	b.n	80112f2 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80110ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110ee:	88db      	ldrh	r3, [r3, #6]
 80110f0:	b29b      	uxth	r3, r3
 80110f2:	4618      	mov	r0, r3
 80110f4:	f7f5 fdaa 	bl	8006c4c <lwip_htons>
 80110f8:	4603      	mov	r3, r0
 80110fa:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 80110fc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80110fe:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011102:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8011106:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011108:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801110c:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801110e:	68fb      	ldr	r3, [r7, #12]
 8011110:	891b      	ldrh	r3, [r3, #8]
 8011112:	3b14      	subs	r3, #20
 8011114:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8011118:	e0e1      	b.n	80112de <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801111a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801111c:	00db      	lsls	r3, r3, #3
 801111e:	b29b      	uxth	r3, r3
 8011120:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011124:	4293      	cmp	r3, r2
 8011126:	bf28      	it	cs
 8011128:	4613      	movcs	r3, r2
 801112a:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801112c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011130:	2114      	movs	r1, #20
 8011132:	200e      	movs	r0, #14
 8011134:	f7f6 fe38 	bl	8007da8 <pbuf_alloc>
 8011138:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801113a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801113c:	2b00      	cmp	r3, #0
 801113e:	f000 80d5 	beq.w	80112ec <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8011142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011144:	895b      	ldrh	r3, [r3, #10]
 8011146:	2b13      	cmp	r3, #19
 8011148:	d806      	bhi.n	8011158 <ip4_frag+0xd0>
 801114a:	4b6c      	ldr	r3, [pc, #432]	; (80112fc <ip4_frag+0x274>)
 801114c:	f44f 7249 	mov.w	r2, #804	; 0x324
 8011150:	496d      	ldr	r1, [pc, #436]	; (8011308 <ip4_frag+0x280>)
 8011152:	486c      	ldr	r0, [pc, #432]	; (8011304 <ip4_frag+0x27c>)
 8011154:	f000 fad4 	bl	8011700 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8011158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801115a:	685b      	ldr	r3, [r3, #4]
 801115c:	2214      	movs	r2, #20
 801115e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8011160:	4618      	mov	r0, r3
 8011162:	f000 f9f3 	bl	801154c <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8011166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011168:	685b      	ldr	r3, [r3, #4]
 801116a:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 801116c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801116e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8011172:	e064      	b.n	801123e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8011174:	68fb      	ldr	r3, [r7, #12]
 8011176:	895a      	ldrh	r2, [r3, #10]
 8011178:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801117a:	1ad3      	subs	r3, r2, r3
 801117c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801117e:	68fb      	ldr	r3, [r7, #12]
 8011180:	895b      	ldrh	r3, [r3, #10]
 8011182:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8011184:	429a      	cmp	r2, r3
 8011186:	d906      	bls.n	8011196 <ip4_frag+0x10e>
 8011188:	4b5c      	ldr	r3, [pc, #368]	; (80112fc <ip4_frag+0x274>)
 801118a:	f240 322d 	movw	r2, #813	; 0x32d
 801118e:	495f      	ldr	r1, [pc, #380]	; (801130c <ip4_frag+0x284>)
 8011190:	485c      	ldr	r0, [pc, #368]	; (8011304 <ip4_frag+0x27c>)
 8011192:	f000 fab5 	bl	8011700 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8011196:	8bfa      	ldrh	r2, [r7, #30]
 8011198:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801119c:	4293      	cmp	r3, r2
 801119e:	bf28      	it	cs
 80111a0:	4613      	movcs	r3, r2
 80111a2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80111a6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80111aa:	2b00      	cmp	r3, #0
 80111ac:	d105      	bne.n	80111ba <ip4_frag+0x132>
        poff = 0;
 80111ae:	2300      	movs	r3, #0
 80111b0:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80111b2:	68fb      	ldr	r3, [r7, #12]
 80111b4:	681b      	ldr	r3, [r3, #0]
 80111b6:	60fb      	str	r3, [r7, #12]
        continue;
 80111b8:	e041      	b.n	801123e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80111ba:	f7ff ff0d 	bl	8010fd8 <ip_frag_alloc_pbuf_custom_ref>
 80111be:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80111c0:	69bb      	ldr	r3, [r7, #24]
 80111c2:	2b00      	cmp	r3, #0
 80111c4:	d103      	bne.n	80111ce <ip4_frag+0x146>
        pbuf_free(rambuf);
 80111c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80111c8:	f7f7 f8d2 	bl	8008370 <pbuf_free>
        goto memerr;
 80111cc:	e08f      	b.n	80112ee <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80111ce:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80111d0:	68fb      	ldr	r3, [r7, #12]
 80111d2:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80111d4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80111d6:	4413      	add	r3, r2
 80111d8:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 80111dc:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80111e0:	9201      	str	r2, [sp, #4]
 80111e2:	9300      	str	r3, [sp, #0]
 80111e4:	4603      	mov	r3, r0
 80111e6:	2241      	movs	r2, #65	; 0x41
 80111e8:	2000      	movs	r0, #0
 80111ea:	f7f6 ff07 	bl	8007ffc <pbuf_alloced_custom>
 80111ee:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 80111f0:	697b      	ldr	r3, [r7, #20]
 80111f2:	2b00      	cmp	r3, #0
 80111f4:	d106      	bne.n	8011204 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 80111f6:	69b8      	ldr	r0, [r7, #24]
 80111f8:	f7ff fef6 	bl	8010fe8 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 80111fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80111fe:	f7f7 f8b7 	bl	8008370 <pbuf_free>
        goto memerr;
 8011202:	e074      	b.n	80112ee <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8011204:	68f8      	ldr	r0, [r7, #12]
 8011206:	f7f7 f953 	bl	80084b0 <pbuf_ref>
      pcr->original = p;
 801120a:	69bb      	ldr	r3, [r7, #24]
 801120c:	68fa      	ldr	r2, [r7, #12]
 801120e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8011210:	69bb      	ldr	r3, [r7, #24]
 8011212:	4a3f      	ldr	r2, [pc, #252]	; (8011310 <ip4_frag+0x288>)
 8011214:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8011216:	6979      	ldr	r1, [r7, #20]
 8011218:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801121a:	f7f7 f96b 	bl	80084f4 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801121e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8011222:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8011226:	1ad3      	subs	r3, r2, r3
 8011228:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 801122c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8011230:	2b00      	cmp	r3, #0
 8011232:	d004      	beq.n	801123e <ip4_frag+0x1b6>
        poff = 0;
 8011234:	2300      	movs	r3, #0
 8011236:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8011238:	68fb      	ldr	r3, [r7, #12]
 801123a:	681b      	ldr	r3, [r3, #0]
 801123c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801123e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8011242:	2b00      	cmp	r3, #0
 8011244:	d196      	bne.n	8011174 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8011246:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8011248:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801124c:	4413      	add	r3, r2
 801124e:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8011250:	68bb      	ldr	r3, [r7, #8]
 8011252:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8011254:	f1a3 0213 	sub.w	r2, r3, #19
 8011258:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801125c:	429a      	cmp	r2, r3
 801125e:	bfcc      	ite	gt
 8011260:	2301      	movgt	r3, #1
 8011262:	2300      	movle	r3, #0
 8011264:	b2db      	uxtb	r3, r3
 8011266:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8011268:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801126c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011270:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8011272:	6a3b      	ldr	r3, [r7, #32]
 8011274:	2b00      	cmp	r3, #0
 8011276:	d002      	beq.n	801127e <ip4_frag+0x1f6>
 8011278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801127a:	2b00      	cmp	r3, #0
 801127c:	d003      	beq.n	8011286 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801127e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011280:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8011284:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8011286:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011288:	4618      	mov	r0, r3
 801128a:	f7f5 fcdf 	bl	8006c4c <lwip_htons>
 801128e:	4603      	mov	r3, r0
 8011290:	461a      	mov	r2, r3
 8011292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011294:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8011296:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8011298:	3314      	adds	r3, #20
 801129a:	b29b      	uxth	r3, r3
 801129c:	4618      	mov	r0, r3
 801129e:	f7f5 fcd5 	bl	8006c4c <lwip_htons>
 80112a2:	4603      	mov	r3, r0
 80112a4:	461a      	mov	r2, r3
 80112a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112a8:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80112aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112ac:	2200      	movs	r2, #0
 80112ae:	729a      	strb	r2, [r3, #10]
 80112b0:	2200      	movs	r2, #0
 80112b2:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80112b4:	68bb      	ldr	r3, [r7, #8]
 80112b6:	695b      	ldr	r3, [r3, #20]
 80112b8:	687a      	ldr	r2, [r7, #4]
 80112ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80112bc:	68b8      	ldr	r0, [r7, #8]
 80112be:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80112c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80112c2:	f7f7 f855 	bl	8008370 <pbuf_free>
    left = (u16_t)(left - fragsize);
 80112c6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80112ca:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80112cc:	1ad3      	subs	r3, r2, r3
 80112ce:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 80112d2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80112d6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80112d8:	4413      	add	r3, r2
 80112da:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 80112de:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80112e2:	2b00      	cmp	r3, #0
 80112e4:	f47f af19 	bne.w	801111a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80112e8:	2300      	movs	r3, #0
 80112ea:	e002      	b.n	80112f2 <ip4_frag+0x26a>
      goto memerr;
 80112ec:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80112ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80112f2:	4618      	mov	r0, r3
 80112f4:	3748      	adds	r7, #72	; 0x48
 80112f6:	46bd      	mov	sp, r7
 80112f8:	bd80      	pop	{r7, pc}
 80112fa:	bf00      	nop
 80112fc:	080161f8 	.word	0x080161f8
 8011300:	080163d4 	.word	0x080163d4
 8011304:	08016240 	.word	0x08016240
 8011308:	080163f0 	.word	0x080163f0
 801130c:	08016410 	.word	0x08016410
 8011310:	08011021 	.word	0x08011021

08011314 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8011314:	b580      	push	{r7, lr}
 8011316:	b086      	sub	sp, #24
 8011318:	af00      	add	r7, sp, #0
 801131a:	6078      	str	r0, [r7, #4]
 801131c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801131e:	230e      	movs	r3, #14
 8011320:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8011322:	687b      	ldr	r3, [r7, #4]
 8011324:	895b      	ldrh	r3, [r3, #10]
 8011326:	2b0e      	cmp	r3, #14
 8011328:	d96e      	bls.n	8011408 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	7bdb      	ldrb	r3, [r3, #15]
 801132e:	2b00      	cmp	r3, #0
 8011330:	d106      	bne.n	8011340 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8011332:	683b      	ldr	r3, [r7, #0]
 8011334:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011338:	3301      	adds	r3, #1
 801133a:	b2da      	uxtb	r2, r3
 801133c:	687b      	ldr	r3, [r7, #4]
 801133e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	685b      	ldr	r3, [r3, #4]
 8011344:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8011346:	693b      	ldr	r3, [r7, #16]
 8011348:	7b1a      	ldrb	r2, [r3, #12]
 801134a:	7b5b      	ldrb	r3, [r3, #13]
 801134c:	021b      	lsls	r3, r3, #8
 801134e:	4313      	orrs	r3, r2
 8011350:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8011352:	693b      	ldr	r3, [r7, #16]
 8011354:	781b      	ldrb	r3, [r3, #0]
 8011356:	f003 0301 	and.w	r3, r3, #1
 801135a:	2b00      	cmp	r3, #0
 801135c:	d023      	beq.n	80113a6 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801135e:	693b      	ldr	r3, [r7, #16]
 8011360:	781b      	ldrb	r3, [r3, #0]
 8011362:	2b01      	cmp	r3, #1
 8011364:	d10f      	bne.n	8011386 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8011366:	693b      	ldr	r3, [r7, #16]
 8011368:	785b      	ldrb	r3, [r3, #1]
 801136a:	2b00      	cmp	r3, #0
 801136c:	d11b      	bne.n	80113a6 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801136e:	693b      	ldr	r3, [r7, #16]
 8011370:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8011372:	2b5e      	cmp	r3, #94	; 0x5e
 8011374:	d117      	bne.n	80113a6 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8011376:	687b      	ldr	r3, [r7, #4]
 8011378:	7b5b      	ldrb	r3, [r3, #13]
 801137a:	f043 0310 	orr.w	r3, r3, #16
 801137e:	b2da      	uxtb	r2, r3
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	735a      	strb	r2, [r3, #13]
 8011384:	e00f      	b.n	80113a6 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8011386:	693b      	ldr	r3, [r7, #16]
 8011388:	2206      	movs	r2, #6
 801138a:	4928      	ldr	r1, [pc, #160]	; (801142c <ethernet_input+0x118>)
 801138c:	4618      	mov	r0, r3
 801138e:	f000 f8cf 	bl	8011530 <memcmp>
 8011392:	4603      	mov	r3, r0
 8011394:	2b00      	cmp	r3, #0
 8011396:	d106      	bne.n	80113a6 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	7b5b      	ldrb	r3, [r3, #13]
 801139c:	f043 0308 	orr.w	r3, r3, #8
 80113a0:	b2da      	uxtb	r2, r3
 80113a2:	687b      	ldr	r3, [r7, #4]
 80113a4:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80113a6:	89fb      	ldrh	r3, [r7, #14]
 80113a8:	2b08      	cmp	r3, #8
 80113aa:	d003      	beq.n	80113b4 <ethernet_input+0xa0>
 80113ac:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80113b0:	d014      	beq.n	80113dc <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80113b2:	e032      	b.n	801141a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80113b4:	683b      	ldr	r3, [r7, #0]
 80113b6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80113ba:	f003 0308 	and.w	r3, r3, #8
 80113be:	2b00      	cmp	r3, #0
 80113c0:	d024      	beq.n	801140c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80113c2:	8afb      	ldrh	r3, [r7, #22]
 80113c4:	4619      	mov	r1, r3
 80113c6:	6878      	ldr	r0, [r7, #4]
 80113c8:	f7f6 ff4c 	bl	8008264 <pbuf_remove_header>
 80113cc:	4603      	mov	r3, r0
 80113ce:	2b00      	cmp	r3, #0
 80113d0:	d11e      	bne.n	8011410 <ethernet_input+0xfc>
        ip4_input(p, netif);
 80113d2:	6839      	ldr	r1, [r7, #0]
 80113d4:	6878      	ldr	r0, [r7, #4]
 80113d6:	f7fe ff27 	bl	8010228 <ip4_input>
      break;
 80113da:	e013      	b.n	8011404 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80113dc:	683b      	ldr	r3, [r7, #0]
 80113de:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80113e2:	f003 0308 	and.w	r3, r3, #8
 80113e6:	2b00      	cmp	r3, #0
 80113e8:	d014      	beq.n	8011414 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80113ea:	8afb      	ldrh	r3, [r7, #22]
 80113ec:	4619      	mov	r1, r3
 80113ee:	6878      	ldr	r0, [r7, #4]
 80113f0:	f7f6 ff38 	bl	8008264 <pbuf_remove_header>
 80113f4:	4603      	mov	r3, r0
 80113f6:	2b00      	cmp	r3, #0
 80113f8:	d10e      	bne.n	8011418 <ethernet_input+0x104>
        etharp_input(p, netif);
 80113fa:	6839      	ldr	r1, [r7, #0]
 80113fc:	6878      	ldr	r0, [r7, #4]
 80113fe:	f7fe f8c7 	bl	800f590 <etharp_input>
      break;
 8011402:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8011404:	2300      	movs	r3, #0
 8011406:	e00c      	b.n	8011422 <ethernet_input+0x10e>
    goto free_and_return;
 8011408:	bf00      	nop
 801140a:	e006      	b.n	801141a <ethernet_input+0x106>
        goto free_and_return;
 801140c:	bf00      	nop
 801140e:	e004      	b.n	801141a <ethernet_input+0x106>
        goto free_and_return;
 8011410:	bf00      	nop
 8011412:	e002      	b.n	801141a <ethernet_input+0x106>
        goto free_and_return;
 8011414:	bf00      	nop
 8011416:	e000      	b.n	801141a <ethernet_input+0x106>
        goto free_and_return;
 8011418:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801141a:	6878      	ldr	r0, [r7, #4]
 801141c:	f7f6 ffa8 	bl	8008370 <pbuf_free>
  return ERR_OK;
 8011420:	2300      	movs	r3, #0
}
 8011422:	4618      	mov	r0, r3
 8011424:	3718      	adds	r7, #24
 8011426:	46bd      	mov	sp, r7
 8011428:	bd80      	pop	{r7, pc}
 801142a:	bf00      	nop
 801142c:	080177d4 	.word	0x080177d4

08011430 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8011430:	b580      	push	{r7, lr}
 8011432:	b086      	sub	sp, #24
 8011434:	af00      	add	r7, sp, #0
 8011436:	60f8      	str	r0, [r7, #12]
 8011438:	60b9      	str	r1, [r7, #8]
 801143a:	607a      	str	r2, [r7, #4]
 801143c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801143e:	8c3b      	ldrh	r3, [r7, #32]
 8011440:	4618      	mov	r0, r3
 8011442:	f7f5 fc03 	bl	8006c4c <lwip_htons>
 8011446:	4603      	mov	r3, r0
 8011448:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801144a:	210e      	movs	r1, #14
 801144c:	68b8      	ldr	r0, [r7, #8]
 801144e:	f7f6 fef9 	bl	8008244 <pbuf_add_header>
 8011452:	4603      	mov	r3, r0
 8011454:	2b00      	cmp	r3, #0
 8011456:	d125      	bne.n	80114a4 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8011458:	68bb      	ldr	r3, [r7, #8]
 801145a:	685b      	ldr	r3, [r3, #4]
 801145c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801145e:	693b      	ldr	r3, [r7, #16]
 8011460:	8afa      	ldrh	r2, [r7, #22]
 8011462:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8011464:	693b      	ldr	r3, [r7, #16]
 8011466:	2206      	movs	r2, #6
 8011468:	6839      	ldr	r1, [r7, #0]
 801146a:	4618      	mov	r0, r3
 801146c:	f000 f86e 	bl	801154c <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8011470:	693b      	ldr	r3, [r7, #16]
 8011472:	3306      	adds	r3, #6
 8011474:	2206      	movs	r2, #6
 8011476:	6879      	ldr	r1, [r7, #4]
 8011478:	4618      	mov	r0, r3
 801147a:	f000 f867 	bl	801154c <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801147e:	68fb      	ldr	r3, [r7, #12]
 8011480:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8011484:	2b06      	cmp	r3, #6
 8011486:	d006      	beq.n	8011496 <ethernet_output+0x66>
 8011488:	4b0a      	ldr	r3, [pc, #40]	; (80114b4 <ethernet_output+0x84>)
 801148a:	f44f 7299 	mov.w	r2, #306	; 0x132
 801148e:	490a      	ldr	r1, [pc, #40]	; (80114b8 <ethernet_output+0x88>)
 8011490:	480a      	ldr	r0, [pc, #40]	; (80114bc <ethernet_output+0x8c>)
 8011492:	f000 f935 	bl	8011700 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8011496:	68fb      	ldr	r3, [r7, #12]
 8011498:	699b      	ldr	r3, [r3, #24]
 801149a:	68b9      	ldr	r1, [r7, #8]
 801149c:	68f8      	ldr	r0, [r7, #12]
 801149e:	4798      	blx	r3
 80114a0:	4603      	mov	r3, r0
 80114a2:	e002      	b.n	80114aa <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80114a4:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80114a6:	f06f 0301 	mvn.w	r3, #1
}
 80114aa:	4618      	mov	r0, r3
 80114ac:	3718      	adds	r7, #24
 80114ae:	46bd      	mov	sp, r7
 80114b0:	bd80      	pop	{r7, pc}
 80114b2:	bf00      	nop
 80114b4:	08016420 	.word	0x08016420
 80114b8:	08016458 	.word	0x08016458
 80114bc:	0801648c 	.word	0x0801648c

080114c0 <atoi>:
 80114c0:	220a      	movs	r2, #10
 80114c2:	2100      	movs	r1, #0
 80114c4:	f000 bb5e 	b.w	8011b84 <strtol>

080114c8 <__libc_init_array>:
 80114c8:	b570      	push	{r4, r5, r6, lr}
 80114ca:	4d0d      	ldr	r5, [pc, #52]	; (8011500 <__libc_init_array+0x38>)
 80114cc:	4c0d      	ldr	r4, [pc, #52]	; (8011504 <__libc_init_array+0x3c>)
 80114ce:	1b64      	subs	r4, r4, r5
 80114d0:	10a4      	asrs	r4, r4, #2
 80114d2:	2600      	movs	r6, #0
 80114d4:	42a6      	cmp	r6, r4
 80114d6:	d109      	bne.n	80114ec <__libc_init_array+0x24>
 80114d8:	4d0b      	ldr	r5, [pc, #44]	; (8011508 <__libc_init_array+0x40>)
 80114da:	4c0c      	ldr	r4, [pc, #48]	; (801150c <__libc_init_array+0x44>)
 80114dc:	f001 fbec 	bl	8012cb8 <_init>
 80114e0:	1b64      	subs	r4, r4, r5
 80114e2:	10a4      	asrs	r4, r4, #2
 80114e4:	2600      	movs	r6, #0
 80114e6:	42a6      	cmp	r6, r4
 80114e8:	d105      	bne.n	80114f6 <__libc_init_array+0x2e>
 80114ea:	bd70      	pop	{r4, r5, r6, pc}
 80114ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80114f0:	4798      	blx	r3
 80114f2:	3601      	adds	r6, #1
 80114f4:	e7ee      	b.n	80114d4 <__libc_init_array+0xc>
 80114f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80114fa:	4798      	blx	r3
 80114fc:	3601      	adds	r6, #1
 80114fe:	e7f2      	b.n	80114e6 <__libc_init_array+0x1e>
 8011500:	08017a98 	.word	0x08017a98
 8011504:	08017a98 	.word	0x08017a98
 8011508:	08017a98 	.word	0x08017a98
 801150c:	08017a9c 	.word	0x08017a9c

08011510 <malloc>:
 8011510:	4b02      	ldr	r3, [pc, #8]	; (801151c <malloc+0xc>)
 8011512:	4601      	mov	r1, r0
 8011514:	6818      	ldr	r0, [r3, #0]
 8011516:	f000 b899 	b.w	801164c <_malloc_r>
 801151a:	bf00      	nop
 801151c:	20000028 	.word	0x20000028

08011520 <free>:
 8011520:	4b02      	ldr	r3, [pc, #8]	; (801152c <free+0xc>)
 8011522:	4601      	mov	r1, r0
 8011524:	6818      	ldr	r0, [r3, #0]
 8011526:	f000 b841 	b.w	80115ac <_free_r>
 801152a:	bf00      	nop
 801152c:	20000028 	.word	0x20000028

08011530 <memcmp>:
 8011530:	b530      	push	{r4, r5, lr}
 8011532:	3901      	subs	r1, #1
 8011534:	2400      	movs	r4, #0
 8011536:	42a2      	cmp	r2, r4
 8011538:	d101      	bne.n	801153e <memcmp+0xe>
 801153a:	2000      	movs	r0, #0
 801153c:	e005      	b.n	801154a <memcmp+0x1a>
 801153e:	5d03      	ldrb	r3, [r0, r4]
 8011540:	3401      	adds	r4, #1
 8011542:	5d0d      	ldrb	r5, [r1, r4]
 8011544:	42ab      	cmp	r3, r5
 8011546:	d0f6      	beq.n	8011536 <memcmp+0x6>
 8011548:	1b58      	subs	r0, r3, r5
 801154a:	bd30      	pop	{r4, r5, pc}

0801154c <memcpy>:
 801154c:	440a      	add	r2, r1
 801154e:	4291      	cmp	r1, r2
 8011550:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8011554:	d100      	bne.n	8011558 <memcpy+0xc>
 8011556:	4770      	bx	lr
 8011558:	b510      	push	{r4, lr}
 801155a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801155e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011562:	4291      	cmp	r1, r2
 8011564:	d1f9      	bne.n	801155a <memcpy+0xe>
 8011566:	bd10      	pop	{r4, pc}

08011568 <memmove>:
 8011568:	4288      	cmp	r0, r1
 801156a:	b510      	push	{r4, lr}
 801156c:	eb01 0402 	add.w	r4, r1, r2
 8011570:	d902      	bls.n	8011578 <memmove+0x10>
 8011572:	4284      	cmp	r4, r0
 8011574:	4623      	mov	r3, r4
 8011576:	d807      	bhi.n	8011588 <memmove+0x20>
 8011578:	1e43      	subs	r3, r0, #1
 801157a:	42a1      	cmp	r1, r4
 801157c:	d008      	beq.n	8011590 <memmove+0x28>
 801157e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011582:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011586:	e7f8      	b.n	801157a <memmove+0x12>
 8011588:	4402      	add	r2, r0
 801158a:	4601      	mov	r1, r0
 801158c:	428a      	cmp	r2, r1
 801158e:	d100      	bne.n	8011592 <memmove+0x2a>
 8011590:	bd10      	pop	{r4, pc}
 8011592:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011596:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801159a:	e7f7      	b.n	801158c <memmove+0x24>

0801159c <memset>:
 801159c:	4402      	add	r2, r0
 801159e:	4603      	mov	r3, r0
 80115a0:	4293      	cmp	r3, r2
 80115a2:	d100      	bne.n	80115a6 <memset+0xa>
 80115a4:	4770      	bx	lr
 80115a6:	f803 1b01 	strb.w	r1, [r3], #1
 80115aa:	e7f9      	b.n	80115a0 <memset+0x4>

080115ac <_free_r>:
 80115ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80115ae:	2900      	cmp	r1, #0
 80115b0:	d048      	beq.n	8011644 <_free_r+0x98>
 80115b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80115b6:	9001      	str	r0, [sp, #4]
 80115b8:	2b00      	cmp	r3, #0
 80115ba:	f1a1 0404 	sub.w	r4, r1, #4
 80115be:	bfb8      	it	lt
 80115c0:	18e4      	addlt	r4, r4, r3
 80115c2:	f000 fdfd 	bl	80121c0 <__malloc_lock>
 80115c6:	4a20      	ldr	r2, [pc, #128]	; (8011648 <_free_r+0x9c>)
 80115c8:	9801      	ldr	r0, [sp, #4]
 80115ca:	6813      	ldr	r3, [r2, #0]
 80115cc:	4615      	mov	r5, r2
 80115ce:	b933      	cbnz	r3, 80115de <_free_r+0x32>
 80115d0:	6063      	str	r3, [r4, #4]
 80115d2:	6014      	str	r4, [r2, #0]
 80115d4:	b003      	add	sp, #12
 80115d6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80115da:	f000 bdf7 	b.w	80121cc <__malloc_unlock>
 80115de:	42a3      	cmp	r3, r4
 80115e0:	d90b      	bls.n	80115fa <_free_r+0x4e>
 80115e2:	6821      	ldr	r1, [r4, #0]
 80115e4:	1862      	adds	r2, r4, r1
 80115e6:	4293      	cmp	r3, r2
 80115e8:	bf04      	itt	eq
 80115ea:	681a      	ldreq	r2, [r3, #0]
 80115ec:	685b      	ldreq	r3, [r3, #4]
 80115ee:	6063      	str	r3, [r4, #4]
 80115f0:	bf04      	itt	eq
 80115f2:	1852      	addeq	r2, r2, r1
 80115f4:	6022      	streq	r2, [r4, #0]
 80115f6:	602c      	str	r4, [r5, #0]
 80115f8:	e7ec      	b.n	80115d4 <_free_r+0x28>
 80115fa:	461a      	mov	r2, r3
 80115fc:	685b      	ldr	r3, [r3, #4]
 80115fe:	b10b      	cbz	r3, 8011604 <_free_r+0x58>
 8011600:	42a3      	cmp	r3, r4
 8011602:	d9fa      	bls.n	80115fa <_free_r+0x4e>
 8011604:	6811      	ldr	r1, [r2, #0]
 8011606:	1855      	adds	r5, r2, r1
 8011608:	42a5      	cmp	r5, r4
 801160a:	d10b      	bne.n	8011624 <_free_r+0x78>
 801160c:	6824      	ldr	r4, [r4, #0]
 801160e:	4421      	add	r1, r4
 8011610:	1854      	adds	r4, r2, r1
 8011612:	42a3      	cmp	r3, r4
 8011614:	6011      	str	r1, [r2, #0]
 8011616:	d1dd      	bne.n	80115d4 <_free_r+0x28>
 8011618:	681c      	ldr	r4, [r3, #0]
 801161a:	685b      	ldr	r3, [r3, #4]
 801161c:	6053      	str	r3, [r2, #4]
 801161e:	4421      	add	r1, r4
 8011620:	6011      	str	r1, [r2, #0]
 8011622:	e7d7      	b.n	80115d4 <_free_r+0x28>
 8011624:	d902      	bls.n	801162c <_free_r+0x80>
 8011626:	230c      	movs	r3, #12
 8011628:	6003      	str	r3, [r0, #0]
 801162a:	e7d3      	b.n	80115d4 <_free_r+0x28>
 801162c:	6825      	ldr	r5, [r4, #0]
 801162e:	1961      	adds	r1, r4, r5
 8011630:	428b      	cmp	r3, r1
 8011632:	bf04      	itt	eq
 8011634:	6819      	ldreq	r1, [r3, #0]
 8011636:	685b      	ldreq	r3, [r3, #4]
 8011638:	6063      	str	r3, [r4, #4]
 801163a:	bf04      	itt	eq
 801163c:	1949      	addeq	r1, r1, r5
 801163e:	6021      	streq	r1, [r4, #0]
 8011640:	6054      	str	r4, [r2, #4]
 8011642:	e7c7      	b.n	80115d4 <_free_r+0x28>
 8011644:	b003      	add	sp, #12
 8011646:	bd30      	pop	{r4, r5, pc}
 8011648:	20000688 	.word	0x20000688

0801164c <_malloc_r>:
 801164c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801164e:	1ccd      	adds	r5, r1, #3
 8011650:	f025 0503 	bic.w	r5, r5, #3
 8011654:	3508      	adds	r5, #8
 8011656:	2d0c      	cmp	r5, #12
 8011658:	bf38      	it	cc
 801165a:	250c      	movcc	r5, #12
 801165c:	2d00      	cmp	r5, #0
 801165e:	4606      	mov	r6, r0
 8011660:	db01      	blt.n	8011666 <_malloc_r+0x1a>
 8011662:	42a9      	cmp	r1, r5
 8011664:	d903      	bls.n	801166e <_malloc_r+0x22>
 8011666:	230c      	movs	r3, #12
 8011668:	6033      	str	r3, [r6, #0]
 801166a:	2000      	movs	r0, #0
 801166c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801166e:	f000 fda7 	bl	80121c0 <__malloc_lock>
 8011672:	4921      	ldr	r1, [pc, #132]	; (80116f8 <_malloc_r+0xac>)
 8011674:	680a      	ldr	r2, [r1, #0]
 8011676:	4614      	mov	r4, r2
 8011678:	b99c      	cbnz	r4, 80116a2 <_malloc_r+0x56>
 801167a:	4f20      	ldr	r7, [pc, #128]	; (80116fc <_malloc_r+0xb0>)
 801167c:	683b      	ldr	r3, [r7, #0]
 801167e:	b923      	cbnz	r3, 801168a <_malloc_r+0x3e>
 8011680:	4621      	mov	r1, r4
 8011682:	4630      	mov	r0, r6
 8011684:	f000 f90a 	bl	801189c <_sbrk_r>
 8011688:	6038      	str	r0, [r7, #0]
 801168a:	4629      	mov	r1, r5
 801168c:	4630      	mov	r0, r6
 801168e:	f000 f905 	bl	801189c <_sbrk_r>
 8011692:	1c43      	adds	r3, r0, #1
 8011694:	d123      	bne.n	80116de <_malloc_r+0x92>
 8011696:	230c      	movs	r3, #12
 8011698:	6033      	str	r3, [r6, #0]
 801169a:	4630      	mov	r0, r6
 801169c:	f000 fd96 	bl	80121cc <__malloc_unlock>
 80116a0:	e7e3      	b.n	801166a <_malloc_r+0x1e>
 80116a2:	6823      	ldr	r3, [r4, #0]
 80116a4:	1b5b      	subs	r3, r3, r5
 80116a6:	d417      	bmi.n	80116d8 <_malloc_r+0x8c>
 80116a8:	2b0b      	cmp	r3, #11
 80116aa:	d903      	bls.n	80116b4 <_malloc_r+0x68>
 80116ac:	6023      	str	r3, [r4, #0]
 80116ae:	441c      	add	r4, r3
 80116b0:	6025      	str	r5, [r4, #0]
 80116b2:	e004      	b.n	80116be <_malloc_r+0x72>
 80116b4:	6863      	ldr	r3, [r4, #4]
 80116b6:	42a2      	cmp	r2, r4
 80116b8:	bf0c      	ite	eq
 80116ba:	600b      	streq	r3, [r1, #0]
 80116bc:	6053      	strne	r3, [r2, #4]
 80116be:	4630      	mov	r0, r6
 80116c0:	f000 fd84 	bl	80121cc <__malloc_unlock>
 80116c4:	f104 000b 	add.w	r0, r4, #11
 80116c8:	1d23      	adds	r3, r4, #4
 80116ca:	f020 0007 	bic.w	r0, r0, #7
 80116ce:	1ac2      	subs	r2, r0, r3
 80116d0:	d0cc      	beq.n	801166c <_malloc_r+0x20>
 80116d2:	1a1b      	subs	r3, r3, r0
 80116d4:	50a3      	str	r3, [r4, r2]
 80116d6:	e7c9      	b.n	801166c <_malloc_r+0x20>
 80116d8:	4622      	mov	r2, r4
 80116da:	6864      	ldr	r4, [r4, #4]
 80116dc:	e7cc      	b.n	8011678 <_malloc_r+0x2c>
 80116de:	1cc4      	adds	r4, r0, #3
 80116e0:	f024 0403 	bic.w	r4, r4, #3
 80116e4:	42a0      	cmp	r0, r4
 80116e6:	d0e3      	beq.n	80116b0 <_malloc_r+0x64>
 80116e8:	1a21      	subs	r1, r4, r0
 80116ea:	4630      	mov	r0, r6
 80116ec:	f000 f8d6 	bl	801189c <_sbrk_r>
 80116f0:	3001      	adds	r0, #1
 80116f2:	d1dd      	bne.n	80116b0 <_malloc_r+0x64>
 80116f4:	e7cf      	b.n	8011696 <_malloc_r+0x4a>
 80116f6:	bf00      	nop
 80116f8:	20000688 	.word	0x20000688
 80116fc:	2000068c 	.word	0x2000068c

08011700 <iprintf>:
 8011700:	b40f      	push	{r0, r1, r2, r3}
 8011702:	4b0a      	ldr	r3, [pc, #40]	; (801172c <iprintf+0x2c>)
 8011704:	b513      	push	{r0, r1, r4, lr}
 8011706:	681c      	ldr	r4, [r3, #0]
 8011708:	b124      	cbz	r4, 8011714 <iprintf+0x14>
 801170a:	69a3      	ldr	r3, [r4, #24]
 801170c:	b913      	cbnz	r3, 8011714 <iprintf+0x14>
 801170e:	4620      	mov	r0, r4
 8011710:	f000 fc40 	bl	8011f94 <__sinit>
 8011714:	ab05      	add	r3, sp, #20
 8011716:	9a04      	ldr	r2, [sp, #16]
 8011718:	68a1      	ldr	r1, [r4, #8]
 801171a:	9301      	str	r3, [sp, #4]
 801171c:	4620      	mov	r0, r4
 801171e:	f000 fee1 	bl	80124e4 <_vfiprintf_r>
 8011722:	b002      	add	sp, #8
 8011724:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011728:	b004      	add	sp, #16
 801172a:	4770      	bx	lr
 801172c:	20000028 	.word	0x20000028

08011730 <_puts_r>:
 8011730:	b570      	push	{r4, r5, r6, lr}
 8011732:	460e      	mov	r6, r1
 8011734:	4605      	mov	r5, r0
 8011736:	b118      	cbz	r0, 8011740 <_puts_r+0x10>
 8011738:	6983      	ldr	r3, [r0, #24]
 801173a:	b90b      	cbnz	r3, 8011740 <_puts_r+0x10>
 801173c:	f000 fc2a 	bl	8011f94 <__sinit>
 8011740:	69ab      	ldr	r3, [r5, #24]
 8011742:	68ac      	ldr	r4, [r5, #8]
 8011744:	b913      	cbnz	r3, 801174c <_puts_r+0x1c>
 8011746:	4628      	mov	r0, r5
 8011748:	f000 fc24 	bl	8011f94 <__sinit>
 801174c:	4b2c      	ldr	r3, [pc, #176]	; (8011800 <_puts_r+0xd0>)
 801174e:	429c      	cmp	r4, r3
 8011750:	d120      	bne.n	8011794 <_puts_r+0x64>
 8011752:	686c      	ldr	r4, [r5, #4]
 8011754:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011756:	07db      	lsls	r3, r3, #31
 8011758:	d405      	bmi.n	8011766 <_puts_r+0x36>
 801175a:	89a3      	ldrh	r3, [r4, #12]
 801175c:	0598      	lsls	r0, r3, #22
 801175e:	d402      	bmi.n	8011766 <_puts_r+0x36>
 8011760:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011762:	f000 fcc7 	bl	80120f4 <__retarget_lock_acquire_recursive>
 8011766:	89a3      	ldrh	r3, [r4, #12]
 8011768:	0719      	lsls	r1, r3, #28
 801176a:	d51d      	bpl.n	80117a8 <_puts_r+0x78>
 801176c:	6923      	ldr	r3, [r4, #16]
 801176e:	b1db      	cbz	r3, 80117a8 <_puts_r+0x78>
 8011770:	3e01      	subs	r6, #1
 8011772:	68a3      	ldr	r3, [r4, #8]
 8011774:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8011778:	3b01      	subs	r3, #1
 801177a:	60a3      	str	r3, [r4, #8]
 801177c:	bb39      	cbnz	r1, 80117ce <_puts_r+0x9e>
 801177e:	2b00      	cmp	r3, #0
 8011780:	da38      	bge.n	80117f4 <_puts_r+0xc4>
 8011782:	4622      	mov	r2, r4
 8011784:	210a      	movs	r1, #10
 8011786:	4628      	mov	r0, r5
 8011788:	f000 fa06 	bl	8011b98 <__swbuf_r>
 801178c:	3001      	adds	r0, #1
 801178e:	d011      	beq.n	80117b4 <_puts_r+0x84>
 8011790:	250a      	movs	r5, #10
 8011792:	e011      	b.n	80117b8 <_puts_r+0x88>
 8011794:	4b1b      	ldr	r3, [pc, #108]	; (8011804 <_puts_r+0xd4>)
 8011796:	429c      	cmp	r4, r3
 8011798:	d101      	bne.n	801179e <_puts_r+0x6e>
 801179a:	68ac      	ldr	r4, [r5, #8]
 801179c:	e7da      	b.n	8011754 <_puts_r+0x24>
 801179e:	4b1a      	ldr	r3, [pc, #104]	; (8011808 <_puts_r+0xd8>)
 80117a0:	429c      	cmp	r4, r3
 80117a2:	bf08      	it	eq
 80117a4:	68ec      	ldreq	r4, [r5, #12]
 80117a6:	e7d5      	b.n	8011754 <_puts_r+0x24>
 80117a8:	4621      	mov	r1, r4
 80117aa:	4628      	mov	r0, r5
 80117ac:	f000 fa46 	bl	8011c3c <__swsetup_r>
 80117b0:	2800      	cmp	r0, #0
 80117b2:	d0dd      	beq.n	8011770 <_puts_r+0x40>
 80117b4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80117b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80117ba:	07da      	lsls	r2, r3, #31
 80117bc:	d405      	bmi.n	80117ca <_puts_r+0x9a>
 80117be:	89a3      	ldrh	r3, [r4, #12]
 80117c0:	059b      	lsls	r3, r3, #22
 80117c2:	d402      	bmi.n	80117ca <_puts_r+0x9a>
 80117c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80117c6:	f000 fc96 	bl	80120f6 <__retarget_lock_release_recursive>
 80117ca:	4628      	mov	r0, r5
 80117cc:	bd70      	pop	{r4, r5, r6, pc}
 80117ce:	2b00      	cmp	r3, #0
 80117d0:	da04      	bge.n	80117dc <_puts_r+0xac>
 80117d2:	69a2      	ldr	r2, [r4, #24]
 80117d4:	429a      	cmp	r2, r3
 80117d6:	dc06      	bgt.n	80117e6 <_puts_r+0xb6>
 80117d8:	290a      	cmp	r1, #10
 80117da:	d004      	beq.n	80117e6 <_puts_r+0xb6>
 80117dc:	6823      	ldr	r3, [r4, #0]
 80117de:	1c5a      	adds	r2, r3, #1
 80117e0:	6022      	str	r2, [r4, #0]
 80117e2:	7019      	strb	r1, [r3, #0]
 80117e4:	e7c5      	b.n	8011772 <_puts_r+0x42>
 80117e6:	4622      	mov	r2, r4
 80117e8:	4628      	mov	r0, r5
 80117ea:	f000 f9d5 	bl	8011b98 <__swbuf_r>
 80117ee:	3001      	adds	r0, #1
 80117f0:	d1bf      	bne.n	8011772 <_puts_r+0x42>
 80117f2:	e7df      	b.n	80117b4 <_puts_r+0x84>
 80117f4:	6823      	ldr	r3, [r4, #0]
 80117f6:	250a      	movs	r5, #10
 80117f8:	1c5a      	adds	r2, r3, #1
 80117fa:	6022      	str	r2, [r4, #0]
 80117fc:	701d      	strb	r5, [r3, #0]
 80117fe:	e7db      	b.n	80117b8 <_puts_r+0x88>
 8011800:	08017a1c 	.word	0x08017a1c
 8011804:	08017a3c 	.word	0x08017a3c
 8011808:	080179fc 	.word	0x080179fc

0801180c <puts>:
 801180c:	4b02      	ldr	r3, [pc, #8]	; (8011818 <puts+0xc>)
 801180e:	4601      	mov	r1, r0
 8011810:	6818      	ldr	r0, [r3, #0]
 8011812:	f7ff bf8d 	b.w	8011730 <_puts_r>
 8011816:	bf00      	nop
 8011818:	20000028 	.word	0x20000028

0801181c <rand>:
 801181c:	4b17      	ldr	r3, [pc, #92]	; (801187c <rand+0x60>)
 801181e:	b510      	push	{r4, lr}
 8011820:	681c      	ldr	r4, [r3, #0]
 8011822:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8011824:	b9b3      	cbnz	r3, 8011854 <rand+0x38>
 8011826:	2018      	movs	r0, #24
 8011828:	f7ff fe72 	bl	8011510 <malloc>
 801182c:	63a0      	str	r0, [r4, #56]	; 0x38
 801182e:	b928      	cbnz	r0, 801183c <rand+0x20>
 8011830:	4602      	mov	r2, r0
 8011832:	4b13      	ldr	r3, [pc, #76]	; (8011880 <rand+0x64>)
 8011834:	4813      	ldr	r0, [pc, #76]	; (8011884 <rand+0x68>)
 8011836:	214e      	movs	r1, #78	; 0x4e
 8011838:	f000 fa6e 	bl	8011d18 <__assert_func>
 801183c:	4a12      	ldr	r2, [pc, #72]	; (8011888 <rand+0x6c>)
 801183e:	4b13      	ldr	r3, [pc, #76]	; (801188c <rand+0x70>)
 8011840:	e9c0 2300 	strd	r2, r3, [r0]
 8011844:	4b12      	ldr	r3, [pc, #72]	; (8011890 <rand+0x74>)
 8011846:	6083      	str	r3, [r0, #8]
 8011848:	230b      	movs	r3, #11
 801184a:	8183      	strh	r3, [r0, #12]
 801184c:	2201      	movs	r2, #1
 801184e:	2300      	movs	r3, #0
 8011850:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8011854:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8011856:	480f      	ldr	r0, [pc, #60]	; (8011894 <rand+0x78>)
 8011858:	690a      	ldr	r2, [r1, #16]
 801185a:	694b      	ldr	r3, [r1, #20]
 801185c:	4c0e      	ldr	r4, [pc, #56]	; (8011898 <rand+0x7c>)
 801185e:	4350      	muls	r0, r2
 8011860:	fb04 0003 	mla	r0, r4, r3, r0
 8011864:	fba2 3404 	umull	r3, r4, r2, r4
 8011868:	1c5a      	adds	r2, r3, #1
 801186a:	4404      	add	r4, r0
 801186c:	f144 0000 	adc.w	r0, r4, #0
 8011870:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8011874:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8011878:	bd10      	pop	{r4, pc}
 801187a:	bf00      	nop
 801187c:	20000028 	.word	0x20000028
 8011880:	080178e8 	.word	0x080178e8
 8011884:	080178ff 	.word	0x080178ff
 8011888:	abcd330e 	.word	0xabcd330e
 801188c:	e66d1234 	.word	0xe66d1234
 8011890:	0005deec 	.word	0x0005deec
 8011894:	5851f42d 	.word	0x5851f42d
 8011898:	4c957f2d 	.word	0x4c957f2d

0801189c <_sbrk_r>:
 801189c:	b538      	push	{r3, r4, r5, lr}
 801189e:	4d06      	ldr	r5, [pc, #24]	; (80118b8 <_sbrk_r+0x1c>)
 80118a0:	2300      	movs	r3, #0
 80118a2:	4604      	mov	r4, r0
 80118a4:	4608      	mov	r0, r1
 80118a6:	602b      	str	r3, [r5, #0]
 80118a8:	f7f0 f90a 	bl	8001ac0 <_sbrk>
 80118ac:	1c43      	adds	r3, r0, #1
 80118ae:	d102      	bne.n	80118b6 <_sbrk_r+0x1a>
 80118b0:	682b      	ldr	r3, [r5, #0]
 80118b2:	b103      	cbz	r3, 80118b6 <_sbrk_r+0x1a>
 80118b4:	6023      	str	r3, [r4, #0]
 80118b6:	bd38      	pop	{r3, r4, r5, pc}
 80118b8:	2000d7a4 	.word	0x2000d7a4

080118bc <siprintf>:
 80118bc:	b40e      	push	{r1, r2, r3}
 80118be:	b500      	push	{lr}
 80118c0:	b09c      	sub	sp, #112	; 0x70
 80118c2:	ab1d      	add	r3, sp, #116	; 0x74
 80118c4:	9002      	str	r0, [sp, #8]
 80118c6:	9006      	str	r0, [sp, #24]
 80118c8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80118cc:	4809      	ldr	r0, [pc, #36]	; (80118f4 <siprintf+0x38>)
 80118ce:	9107      	str	r1, [sp, #28]
 80118d0:	9104      	str	r1, [sp, #16]
 80118d2:	4909      	ldr	r1, [pc, #36]	; (80118f8 <siprintf+0x3c>)
 80118d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80118d8:	9105      	str	r1, [sp, #20]
 80118da:	6800      	ldr	r0, [r0, #0]
 80118dc:	9301      	str	r3, [sp, #4]
 80118de:	a902      	add	r1, sp, #8
 80118e0:	f000 fcd6 	bl	8012290 <_svfiprintf_r>
 80118e4:	9b02      	ldr	r3, [sp, #8]
 80118e6:	2200      	movs	r2, #0
 80118e8:	701a      	strb	r2, [r3, #0]
 80118ea:	b01c      	add	sp, #112	; 0x70
 80118ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80118f0:	b003      	add	sp, #12
 80118f2:	4770      	bx	lr
 80118f4:	20000028 	.word	0x20000028
 80118f8:	ffff0208 	.word	0xffff0208

080118fc <strcat>:
 80118fc:	b510      	push	{r4, lr}
 80118fe:	4602      	mov	r2, r0
 8011900:	7814      	ldrb	r4, [r2, #0]
 8011902:	4613      	mov	r3, r2
 8011904:	3201      	adds	r2, #1
 8011906:	2c00      	cmp	r4, #0
 8011908:	d1fa      	bne.n	8011900 <strcat+0x4>
 801190a:	3b01      	subs	r3, #1
 801190c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011910:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011914:	2a00      	cmp	r2, #0
 8011916:	d1f9      	bne.n	801190c <strcat+0x10>
 8011918:	bd10      	pop	{r4, pc}

0801191a <strchr>:
 801191a:	b2c9      	uxtb	r1, r1
 801191c:	4603      	mov	r3, r0
 801191e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011922:	b11a      	cbz	r2, 801192c <strchr+0x12>
 8011924:	428a      	cmp	r2, r1
 8011926:	d1f9      	bne.n	801191c <strchr+0x2>
 8011928:	4618      	mov	r0, r3
 801192a:	4770      	bx	lr
 801192c:	2900      	cmp	r1, #0
 801192e:	bf18      	it	ne
 8011930:	2300      	movne	r3, #0
 8011932:	e7f9      	b.n	8011928 <strchr+0xe>

08011934 <strcpy>:
 8011934:	4603      	mov	r3, r0
 8011936:	f811 2b01 	ldrb.w	r2, [r1], #1
 801193a:	f803 2b01 	strb.w	r2, [r3], #1
 801193e:	2a00      	cmp	r2, #0
 8011940:	d1f9      	bne.n	8011936 <strcpy+0x2>
 8011942:	4770      	bx	lr

08011944 <strncmp>:
 8011944:	b510      	push	{r4, lr}
 8011946:	b16a      	cbz	r2, 8011964 <strncmp+0x20>
 8011948:	3901      	subs	r1, #1
 801194a:	1884      	adds	r4, r0, r2
 801194c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8011950:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8011954:	4293      	cmp	r3, r2
 8011956:	d103      	bne.n	8011960 <strncmp+0x1c>
 8011958:	42a0      	cmp	r0, r4
 801195a:	d001      	beq.n	8011960 <strncmp+0x1c>
 801195c:	2b00      	cmp	r3, #0
 801195e:	d1f5      	bne.n	801194c <strncmp+0x8>
 8011960:	1a98      	subs	r0, r3, r2
 8011962:	bd10      	pop	{r4, pc}
 8011964:	4610      	mov	r0, r2
 8011966:	e7fc      	b.n	8011962 <strncmp+0x1e>

08011968 <strncpy>:
 8011968:	b510      	push	{r4, lr}
 801196a:	3901      	subs	r1, #1
 801196c:	4603      	mov	r3, r0
 801196e:	b132      	cbz	r2, 801197e <strncpy+0x16>
 8011970:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8011974:	f803 4b01 	strb.w	r4, [r3], #1
 8011978:	3a01      	subs	r2, #1
 801197a:	2c00      	cmp	r4, #0
 801197c:	d1f7      	bne.n	801196e <strncpy+0x6>
 801197e:	441a      	add	r2, r3
 8011980:	2100      	movs	r1, #0
 8011982:	4293      	cmp	r3, r2
 8011984:	d100      	bne.n	8011988 <strncpy+0x20>
 8011986:	bd10      	pop	{r4, pc}
 8011988:	f803 1b01 	strb.w	r1, [r3], #1
 801198c:	e7f9      	b.n	8011982 <strncpy+0x1a>

0801198e <strstr>:
 801198e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011990:	780c      	ldrb	r4, [r1, #0]
 8011992:	b164      	cbz	r4, 80119ae <strstr+0x20>
 8011994:	4603      	mov	r3, r0
 8011996:	781a      	ldrb	r2, [r3, #0]
 8011998:	4618      	mov	r0, r3
 801199a:	1c5e      	adds	r6, r3, #1
 801199c:	b90a      	cbnz	r2, 80119a2 <strstr+0x14>
 801199e:	4610      	mov	r0, r2
 80119a0:	e005      	b.n	80119ae <strstr+0x20>
 80119a2:	4294      	cmp	r4, r2
 80119a4:	d108      	bne.n	80119b8 <strstr+0x2a>
 80119a6:	460d      	mov	r5, r1
 80119a8:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 80119ac:	b902      	cbnz	r2, 80119b0 <strstr+0x22>
 80119ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80119b0:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 80119b4:	4297      	cmp	r7, r2
 80119b6:	d0f7      	beq.n	80119a8 <strstr+0x1a>
 80119b8:	4633      	mov	r3, r6
 80119ba:	e7ec      	b.n	8011996 <strstr+0x8>

080119bc <strtok>:
 80119bc:	4b16      	ldr	r3, [pc, #88]	; (8011a18 <strtok+0x5c>)
 80119be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80119c0:	681e      	ldr	r6, [r3, #0]
 80119c2:	6db4      	ldr	r4, [r6, #88]	; 0x58
 80119c4:	4605      	mov	r5, r0
 80119c6:	b9fc      	cbnz	r4, 8011a08 <strtok+0x4c>
 80119c8:	2050      	movs	r0, #80	; 0x50
 80119ca:	9101      	str	r1, [sp, #4]
 80119cc:	f7ff fda0 	bl	8011510 <malloc>
 80119d0:	9901      	ldr	r1, [sp, #4]
 80119d2:	65b0      	str	r0, [r6, #88]	; 0x58
 80119d4:	4602      	mov	r2, r0
 80119d6:	b920      	cbnz	r0, 80119e2 <strtok+0x26>
 80119d8:	4b10      	ldr	r3, [pc, #64]	; (8011a1c <strtok+0x60>)
 80119da:	4811      	ldr	r0, [pc, #68]	; (8011a20 <strtok+0x64>)
 80119dc:	2157      	movs	r1, #87	; 0x57
 80119de:	f000 f99b 	bl	8011d18 <__assert_func>
 80119e2:	e9c0 4400 	strd	r4, r4, [r0]
 80119e6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80119ea:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80119ee:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80119f2:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80119f6:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80119fa:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80119fe:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8011a02:	6184      	str	r4, [r0, #24]
 8011a04:	7704      	strb	r4, [r0, #28]
 8011a06:	6244      	str	r4, [r0, #36]	; 0x24
 8011a08:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8011a0a:	2301      	movs	r3, #1
 8011a0c:	4628      	mov	r0, r5
 8011a0e:	b002      	add	sp, #8
 8011a10:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011a14:	f000 b806 	b.w	8011a24 <__strtok_r>
 8011a18:	20000028 	.word	0x20000028
 8011a1c:	080178e8 	.word	0x080178e8
 8011a20:	0801795e 	.word	0x0801795e

08011a24 <__strtok_r>:
 8011a24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011a26:	b908      	cbnz	r0, 8011a2c <__strtok_r+0x8>
 8011a28:	6810      	ldr	r0, [r2, #0]
 8011a2a:	b188      	cbz	r0, 8011a50 <__strtok_r+0x2c>
 8011a2c:	4604      	mov	r4, r0
 8011a2e:	4620      	mov	r0, r4
 8011a30:	f814 5b01 	ldrb.w	r5, [r4], #1
 8011a34:	460f      	mov	r7, r1
 8011a36:	f817 6b01 	ldrb.w	r6, [r7], #1
 8011a3a:	b91e      	cbnz	r6, 8011a44 <__strtok_r+0x20>
 8011a3c:	b965      	cbnz	r5, 8011a58 <__strtok_r+0x34>
 8011a3e:	6015      	str	r5, [r2, #0]
 8011a40:	4628      	mov	r0, r5
 8011a42:	e005      	b.n	8011a50 <__strtok_r+0x2c>
 8011a44:	42b5      	cmp	r5, r6
 8011a46:	d1f6      	bne.n	8011a36 <__strtok_r+0x12>
 8011a48:	2b00      	cmp	r3, #0
 8011a4a:	d1f0      	bne.n	8011a2e <__strtok_r+0xa>
 8011a4c:	6014      	str	r4, [r2, #0]
 8011a4e:	7003      	strb	r3, [r0, #0]
 8011a50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011a52:	461c      	mov	r4, r3
 8011a54:	e00c      	b.n	8011a70 <__strtok_r+0x4c>
 8011a56:	b915      	cbnz	r5, 8011a5e <__strtok_r+0x3a>
 8011a58:	f814 3b01 	ldrb.w	r3, [r4], #1
 8011a5c:	460e      	mov	r6, r1
 8011a5e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8011a62:	42ab      	cmp	r3, r5
 8011a64:	d1f7      	bne.n	8011a56 <__strtok_r+0x32>
 8011a66:	2b00      	cmp	r3, #0
 8011a68:	d0f3      	beq.n	8011a52 <__strtok_r+0x2e>
 8011a6a:	2300      	movs	r3, #0
 8011a6c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8011a70:	6014      	str	r4, [r2, #0]
 8011a72:	e7ed      	b.n	8011a50 <__strtok_r+0x2c>

08011a74 <strtok_r>:
 8011a74:	2301      	movs	r3, #1
 8011a76:	f7ff bfd5 	b.w	8011a24 <__strtok_r>
	...

08011a7c <_strtol_l.isra.0>:
 8011a7c:	2b01      	cmp	r3, #1
 8011a7e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011a82:	d001      	beq.n	8011a88 <_strtol_l.isra.0+0xc>
 8011a84:	2b24      	cmp	r3, #36	; 0x24
 8011a86:	d906      	bls.n	8011a96 <_strtol_l.isra.0+0x1a>
 8011a88:	f000 f964 	bl	8011d54 <__errno>
 8011a8c:	2316      	movs	r3, #22
 8011a8e:	6003      	str	r3, [r0, #0]
 8011a90:	2000      	movs	r0, #0
 8011a92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011a96:	4f3a      	ldr	r7, [pc, #232]	; (8011b80 <_strtol_l.isra.0+0x104>)
 8011a98:	468e      	mov	lr, r1
 8011a9a:	4676      	mov	r6, lr
 8011a9c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8011aa0:	5de5      	ldrb	r5, [r4, r7]
 8011aa2:	f015 0508 	ands.w	r5, r5, #8
 8011aa6:	d1f8      	bne.n	8011a9a <_strtol_l.isra.0+0x1e>
 8011aa8:	2c2d      	cmp	r4, #45	; 0x2d
 8011aaa:	d134      	bne.n	8011b16 <_strtol_l.isra.0+0x9a>
 8011aac:	f89e 4000 	ldrb.w	r4, [lr]
 8011ab0:	f04f 0801 	mov.w	r8, #1
 8011ab4:	f106 0e02 	add.w	lr, r6, #2
 8011ab8:	2b00      	cmp	r3, #0
 8011aba:	d05c      	beq.n	8011b76 <_strtol_l.isra.0+0xfa>
 8011abc:	2b10      	cmp	r3, #16
 8011abe:	d10c      	bne.n	8011ada <_strtol_l.isra.0+0x5e>
 8011ac0:	2c30      	cmp	r4, #48	; 0x30
 8011ac2:	d10a      	bne.n	8011ada <_strtol_l.isra.0+0x5e>
 8011ac4:	f89e 4000 	ldrb.w	r4, [lr]
 8011ac8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8011acc:	2c58      	cmp	r4, #88	; 0x58
 8011ace:	d14d      	bne.n	8011b6c <_strtol_l.isra.0+0xf0>
 8011ad0:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8011ad4:	2310      	movs	r3, #16
 8011ad6:	f10e 0e02 	add.w	lr, lr, #2
 8011ada:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8011ade:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8011ae2:	2600      	movs	r6, #0
 8011ae4:	fbbc f9f3 	udiv	r9, ip, r3
 8011ae8:	4635      	mov	r5, r6
 8011aea:	fb03 ca19 	mls	sl, r3, r9, ip
 8011aee:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8011af2:	2f09      	cmp	r7, #9
 8011af4:	d818      	bhi.n	8011b28 <_strtol_l.isra.0+0xac>
 8011af6:	463c      	mov	r4, r7
 8011af8:	42a3      	cmp	r3, r4
 8011afa:	dd24      	ble.n	8011b46 <_strtol_l.isra.0+0xca>
 8011afc:	2e00      	cmp	r6, #0
 8011afe:	db1f      	blt.n	8011b40 <_strtol_l.isra.0+0xc4>
 8011b00:	45a9      	cmp	r9, r5
 8011b02:	d31d      	bcc.n	8011b40 <_strtol_l.isra.0+0xc4>
 8011b04:	d101      	bne.n	8011b0a <_strtol_l.isra.0+0x8e>
 8011b06:	45a2      	cmp	sl, r4
 8011b08:	db1a      	blt.n	8011b40 <_strtol_l.isra.0+0xc4>
 8011b0a:	fb05 4503 	mla	r5, r5, r3, r4
 8011b0e:	2601      	movs	r6, #1
 8011b10:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8011b14:	e7eb      	b.n	8011aee <_strtol_l.isra.0+0x72>
 8011b16:	2c2b      	cmp	r4, #43	; 0x2b
 8011b18:	bf08      	it	eq
 8011b1a:	f89e 4000 	ldrbeq.w	r4, [lr]
 8011b1e:	46a8      	mov	r8, r5
 8011b20:	bf08      	it	eq
 8011b22:	f106 0e02 	addeq.w	lr, r6, #2
 8011b26:	e7c7      	b.n	8011ab8 <_strtol_l.isra.0+0x3c>
 8011b28:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8011b2c:	2f19      	cmp	r7, #25
 8011b2e:	d801      	bhi.n	8011b34 <_strtol_l.isra.0+0xb8>
 8011b30:	3c37      	subs	r4, #55	; 0x37
 8011b32:	e7e1      	b.n	8011af8 <_strtol_l.isra.0+0x7c>
 8011b34:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8011b38:	2f19      	cmp	r7, #25
 8011b3a:	d804      	bhi.n	8011b46 <_strtol_l.isra.0+0xca>
 8011b3c:	3c57      	subs	r4, #87	; 0x57
 8011b3e:	e7db      	b.n	8011af8 <_strtol_l.isra.0+0x7c>
 8011b40:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8011b44:	e7e4      	b.n	8011b10 <_strtol_l.isra.0+0x94>
 8011b46:	2e00      	cmp	r6, #0
 8011b48:	da05      	bge.n	8011b56 <_strtol_l.isra.0+0xda>
 8011b4a:	2322      	movs	r3, #34	; 0x22
 8011b4c:	6003      	str	r3, [r0, #0]
 8011b4e:	4665      	mov	r5, ip
 8011b50:	b942      	cbnz	r2, 8011b64 <_strtol_l.isra.0+0xe8>
 8011b52:	4628      	mov	r0, r5
 8011b54:	e79d      	b.n	8011a92 <_strtol_l.isra.0+0x16>
 8011b56:	f1b8 0f00 	cmp.w	r8, #0
 8011b5a:	d000      	beq.n	8011b5e <_strtol_l.isra.0+0xe2>
 8011b5c:	426d      	negs	r5, r5
 8011b5e:	2a00      	cmp	r2, #0
 8011b60:	d0f7      	beq.n	8011b52 <_strtol_l.isra.0+0xd6>
 8011b62:	b10e      	cbz	r6, 8011b68 <_strtol_l.isra.0+0xec>
 8011b64:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 8011b68:	6011      	str	r1, [r2, #0]
 8011b6a:	e7f2      	b.n	8011b52 <_strtol_l.isra.0+0xd6>
 8011b6c:	2430      	movs	r4, #48	; 0x30
 8011b6e:	2b00      	cmp	r3, #0
 8011b70:	d1b3      	bne.n	8011ada <_strtol_l.isra.0+0x5e>
 8011b72:	2308      	movs	r3, #8
 8011b74:	e7b1      	b.n	8011ada <_strtol_l.isra.0+0x5e>
 8011b76:	2c30      	cmp	r4, #48	; 0x30
 8011b78:	d0a4      	beq.n	8011ac4 <_strtol_l.isra.0+0x48>
 8011b7a:	230a      	movs	r3, #10
 8011b7c:	e7ad      	b.n	8011ada <_strtol_l.isra.0+0x5e>
 8011b7e:	bf00      	nop
 8011b80:	080177e3 	.word	0x080177e3

08011b84 <strtol>:
 8011b84:	4613      	mov	r3, r2
 8011b86:	460a      	mov	r2, r1
 8011b88:	4601      	mov	r1, r0
 8011b8a:	4802      	ldr	r0, [pc, #8]	; (8011b94 <strtol+0x10>)
 8011b8c:	6800      	ldr	r0, [r0, #0]
 8011b8e:	f7ff bf75 	b.w	8011a7c <_strtol_l.isra.0>
 8011b92:	bf00      	nop
 8011b94:	20000028 	.word	0x20000028

08011b98 <__swbuf_r>:
 8011b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b9a:	460e      	mov	r6, r1
 8011b9c:	4614      	mov	r4, r2
 8011b9e:	4605      	mov	r5, r0
 8011ba0:	b118      	cbz	r0, 8011baa <__swbuf_r+0x12>
 8011ba2:	6983      	ldr	r3, [r0, #24]
 8011ba4:	b90b      	cbnz	r3, 8011baa <__swbuf_r+0x12>
 8011ba6:	f000 f9f5 	bl	8011f94 <__sinit>
 8011baa:	4b21      	ldr	r3, [pc, #132]	; (8011c30 <__swbuf_r+0x98>)
 8011bac:	429c      	cmp	r4, r3
 8011bae:	d12b      	bne.n	8011c08 <__swbuf_r+0x70>
 8011bb0:	686c      	ldr	r4, [r5, #4]
 8011bb2:	69a3      	ldr	r3, [r4, #24]
 8011bb4:	60a3      	str	r3, [r4, #8]
 8011bb6:	89a3      	ldrh	r3, [r4, #12]
 8011bb8:	071a      	lsls	r2, r3, #28
 8011bba:	d52f      	bpl.n	8011c1c <__swbuf_r+0x84>
 8011bbc:	6923      	ldr	r3, [r4, #16]
 8011bbe:	b36b      	cbz	r3, 8011c1c <__swbuf_r+0x84>
 8011bc0:	6923      	ldr	r3, [r4, #16]
 8011bc2:	6820      	ldr	r0, [r4, #0]
 8011bc4:	1ac0      	subs	r0, r0, r3
 8011bc6:	6963      	ldr	r3, [r4, #20]
 8011bc8:	b2f6      	uxtb	r6, r6
 8011bca:	4283      	cmp	r3, r0
 8011bcc:	4637      	mov	r7, r6
 8011bce:	dc04      	bgt.n	8011bda <__swbuf_r+0x42>
 8011bd0:	4621      	mov	r1, r4
 8011bd2:	4628      	mov	r0, r5
 8011bd4:	f000 f94a 	bl	8011e6c <_fflush_r>
 8011bd8:	bb30      	cbnz	r0, 8011c28 <__swbuf_r+0x90>
 8011bda:	68a3      	ldr	r3, [r4, #8]
 8011bdc:	3b01      	subs	r3, #1
 8011bde:	60a3      	str	r3, [r4, #8]
 8011be0:	6823      	ldr	r3, [r4, #0]
 8011be2:	1c5a      	adds	r2, r3, #1
 8011be4:	6022      	str	r2, [r4, #0]
 8011be6:	701e      	strb	r6, [r3, #0]
 8011be8:	6963      	ldr	r3, [r4, #20]
 8011bea:	3001      	adds	r0, #1
 8011bec:	4283      	cmp	r3, r0
 8011bee:	d004      	beq.n	8011bfa <__swbuf_r+0x62>
 8011bf0:	89a3      	ldrh	r3, [r4, #12]
 8011bf2:	07db      	lsls	r3, r3, #31
 8011bf4:	d506      	bpl.n	8011c04 <__swbuf_r+0x6c>
 8011bf6:	2e0a      	cmp	r6, #10
 8011bf8:	d104      	bne.n	8011c04 <__swbuf_r+0x6c>
 8011bfa:	4621      	mov	r1, r4
 8011bfc:	4628      	mov	r0, r5
 8011bfe:	f000 f935 	bl	8011e6c <_fflush_r>
 8011c02:	b988      	cbnz	r0, 8011c28 <__swbuf_r+0x90>
 8011c04:	4638      	mov	r0, r7
 8011c06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011c08:	4b0a      	ldr	r3, [pc, #40]	; (8011c34 <__swbuf_r+0x9c>)
 8011c0a:	429c      	cmp	r4, r3
 8011c0c:	d101      	bne.n	8011c12 <__swbuf_r+0x7a>
 8011c0e:	68ac      	ldr	r4, [r5, #8]
 8011c10:	e7cf      	b.n	8011bb2 <__swbuf_r+0x1a>
 8011c12:	4b09      	ldr	r3, [pc, #36]	; (8011c38 <__swbuf_r+0xa0>)
 8011c14:	429c      	cmp	r4, r3
 8011c16:	bf08      	it	eq
 8011c18:	68ec      	ldreq	r4, [r5, #12]
 8011c1a:	e7ca      	b.n	8011bb2 <__swbuf_r+0x1a>
 8011c1c:	4621      	mov	r1, r4
 8011c1e:	4628      	mov	r0, r5
 8011c20:	f000 f80c 	bl	8011c3c <__swsetup_r>
 8011c24:	2800      	cmp	r0, #0
 8011c26:	d0cb      	beq.n	8011bc0 <__swbuf_r+0x28>
 8011c28:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8011c2c:	e7ea      	b.n	8011c04 <__swbuf_r+0x6c>
 8011c2e:	bf00      	nop
 8011c30:	08017a1c 	.word	0x08017a1c
 8011c34:	08017a3c 	.word	0x08017a3c
 8011c38:	080179fc 	.word	0x080179fc

08011c3c <__swsetup_r>:
 8011c3c:	4b32      	ldr	r3, [pc, #200]	; (8011d08 <__swsetup_r+0xcc>)
 8011c3e:	b570      	push	{r4, r5, r6, lr}
 8011c40:	681d      	ldr	r5, [r3, #0]
 8011c42:	4606      	mov	r6, r0
 8011c44:	460c      	mov	r4, r1
 8011c46:	b125      	cbz	r5, 8011c52 <__swsetup_r+0x16>
 8011c48:	69ab      	ldr	r3, [r5, #24]
 8011c4a:	b913      	cbnz	r3, 8011c52 <__swsetup_r+0x16>
 8011c4c:	4628      	mov	r0, r5
 8011c4e:	f000 f9a1 	bl	8011f94 <__sinit>
 8011c52:	4b2e      	ldr	r3, [pc, #184]	; (8011d0c <__swsetup_r+0xd0>)
 8011c54:	429c      	cmp	r4, r3
 8011c56:	d10f      	bne.n	8011c78 <__swsetup_r+0x3c>
 8011c58:	686c      	ldr	r4, [r5, #4]
 8011c5a:	89a3      	ldrh	r3, [r4, #12]
 8011c5c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011c60:	0719      	lsls	r1, r3, #28
 8011c62:	d42c      	bmi.n	8011cbe <__swsetup_r+0x82>
 8011c64:	06dd      	lsls	r5, r3, #27
 8011c66:	d411      	bmi.n	8011c8c <__swsetup_r+0x50>
 8011c68:	2309      	movs	r3, #9
 8011c6a:	6033      	str	r3, [r6, #0]
 8011c6c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011c70:	81a3      	strh	r3, [r4, #12]
 8011c72:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011c76:	e03e      	b.n	8011cf6 <__swsetup_r+0xba>
 8011c78:	4b25      	ldr	r3, [pc, #148]	; (8011d10 <__swsetup_r+0xd4>)
 8011c7a:	429c      	cmp	r4, r3
 8011c7c:	d101      	bne.n	8011c82 <__swsetup_r+0x46>
 8011c7e:	68ac      	ldr	r4, [r5, #8]
 8011c80:	e7eb      	b.n	8011c5a <__swsetup_r+0x1e>
 8011c82:	4b24      	ldr	r3, [pc, #144]	; (8011d14 <__swsetup_r+0xd8>)
 8011c84:	429c      	cmp	r4, r3
 8011c86:	bf08      	it	eq
 8011c88:	68ec      	ldreq	r4, [r5, #12]
 8011c8a:	e7e6      	b.n	8011c5a <__swsetup_r+0x1e>
 8011c8c:	0758      	lsls	r0, r3, #29
 8011c8e:	d512      	bpl.n	8011cb6 <__swsetup_r+0x7a>
 8011c90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011c92:	b141      	cbz	r1, 8011ca6 <__swsetup_r+0x6a>
 8011c94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011c98:	4299      	cmp	r1, r3
 8011c9a:	d002      	beq.n	8011ca2 <__swsetup_r+0x66>
 8011c9c:	4630      	mov	r0, r6
 8011c9e:	f7ff fc85 	bl	80115ac <_free_r>
 8011ca2:	2300      	movs	r3, #0
 8011ca4:	6363      	str	r3, [r4, #52]	; 0x34
 8011ca6:	89a3      	ldrh	r3, [r4, #12]
 8011ca8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011cac:	81a3      	strh	r3, [r4, #12]
 8011cae:	2300      	movs	r3, #0
 8011cb0:	6063      	str	r3, [r4, #4]
 8011cb2:	6923      	ldr	r3, [r4, #16]
 8011cb4:	6023      	str	r3, [r4, #0]
 8011cb6:	89a3      	ldrh	r3, [r4, #12]
 8011cb8:	f043 0308 	orr.w	r3, r3, #8
 8011cbc:	81a3      	strh	r3, [r4, #12]
 8011cbe:	6923      	ldr	r3, [r4, #16]
 8011cc0:	b94b      	cbnz	r3, 8011cd6 <__swsetup_r+0x9a>
 8011cc2:	89a3      	ldrh	r3, [r4, #12]
 8011cc4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011cc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011ccc:	d003      	beq.n	8011cd6 <__swsetup_r+0x9a>
 8011cce:	4621      	mov	r1, r4
 8011cd0:	4630      	mov	r0, r6
 8011cd2:	f000 fa35 	bl	8012140 <__smakebuf_r>
 8011cd6:	89a0      	ldrh	r0, [r4, #12]
 8011cd8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011cdc:	f010 0301 	ands.w	r3, r0, #1
 8011ce0:	d00a      	beq.n	8011cf8 <__swsetup_r+0xbc>
 8011ce2:	2300      	movs	r3, #0
 8011ce4:	60a3      	str	r3, [r4, #8]
 8011ce6:	6963      	ldr	r3, [r4, #20]
 8011ce8:	425b      	negs	r3, r3
 8011cea:	61a3      	str	r3, [r4, #24]
 8011cec:	6923      	ldr	r3, [r4, #16]
 8011cee:	b943      	cbnz	r3, 8011d02 <__swsetup_r+0xc6>
 8011cf0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011cf4:	d1ba      	bne.n	8011c6c <__swsetup_r+0x30>
 8011cf6:	bd70      	pop	{r4, r5, r6, pc}
 8011cf8:	0781      	lsls	r1, r0, #30
 8011cfa:	bf58      	it	pl
 8011cfc:	6963      	ldrpl	r3, [r4, #20]
 8011cfe:	60a3      	str	r3, [r4, #8]
 8011d00:	e7f4      	b.n	8011cec <__swsetup_r+0xb0>
 8011d02:	2000      	movs	r0, #0
 8011d04:	e7f7      	b.n	8011cf6 <__swsetup_r+0xba>
 8011d06:	bf00      	nop
 8011d08:	20000028 	.word	0x20000028
 8011d0c:	08017a1c 	.word	0x08017a1c
 8011d10:	08017a3c 	.word	0x08017a3c
 8011d14:	080179fc 	.word	0x080179fc

08011d18 <__assert_func>:
 8011d18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011d1a:	4614      	mov	r4, r2
 8011d1c:	461a      	mov	r2, r3
 8011d1e:	4b09      	ldr	r3, [pc, #36]	; (8011d44 <__assert_func+0x2c>)
 8011d20:	681b      	ldr	r3, [r3, #0]
 8011d22:	4605      	mov	r5, r0
 8011d24:	68d8      	ldr	r0, [r3, #12]
 8011d26:	b14c      	cbz	r4, 8011d3c <__assert_func+0x24>
 8011d28:	4b07      	ldr	r3, [pc, #28]	; (8011d48 <__assert_func+0x30>)
 8011d2a:	9100      	str	r1, [sp, #0]
 8011d2c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011d30:	4906      	ldr	r1, [pc, #24]	; (8011d4c <__assert_func+0x34>)
 8011d32:	462b      	mov	r3, r5
 8011d34:	f000 f9ac 	bl	8012090 <fiprintf>
 8011d38:	f000 feee 	bl	8012b18 <abort>
 8011d3c:	4b04      	ldr	r3, [pc, #16]	; (8011d50 <__assert_func+0x38>)
 8011d3e:	461c      	mov	r4, r3
 8011d40:	e7f3      	b.n	8011d2a <__assert_func+0x12>
 8011d42:	bf00      	nop
 8011d44:	20000028 	.word	0x20000028
 8011d48:	080179bf 	.word	0x080179bf
 8011d4c:	080179cc 	.word	0x080179cc
 8011d50:	080179fa 	.word	0x080179fa

08011d54 <__errno>:
 8011d54:	4b01      	ldr	r3, [pc, #4]	; (8011d5c <__errno+0x8>)
 8011d56:	6818      	ldr	r0, [r3, #0]
 8011d58:	4770      	bx	lr
 8011d5a:	bf00      	nop
 8011d5c:	20000028 	.word	0x20000028

08011d60 <__sflush_r>:
 8011d60:	898a      	ldrh	r2, [r1, #12]
 8011d62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d66:	4605      	mov	r5, r0
 8011d68:	0710      	lsls	r0, r2, #28
 8011d6a:	460c      	mov	r4, r1
 8011d6c:	d458      	bmi.n	8011e20 <__sflush_r+0xc0>
 8011d6e:	684b      	ldr	r3, [r1, #4]
 8011d70:	2b00      	cmp	r3, #0
 8011d72:	dc05      	bgt.n	8011d80 <__sflush_r+0x20>
 8011d74:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011d76:	2b00      	cmp	r3, #0
 8011d78:	dc02      	bgt.n	8011d80 <__sflush_r+0x20>
 8011d7a:	2000      	movs	r0, #0
 8011d7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d80:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011d82:	2e00      	cmp	r6, #0
 8011d84:	d0f9      	beq.n	8011d7a <__sflush_r+0x1a>
 8011d86:	2300      	movs	r3, #0
 8011d88:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011d8c:	682f      	ldr	r7, [r5, #0]
 8011d8e:	602b      	str	r3, [r5, #0]
 8011d90:	d032      	beq.n	8011df8 <__sflush_r+0x98>
 8011d92:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011d94:	89a3      	ldrh	r3, [r4, #12]
 8011d96:	075a      	lsls	r2, r3, #29
 8011d98:	d505      	bpl.n	8011da6 <__sflush_r+0x46>
 8011d9a:	6863      	ldr	r3, [r4, #4]
 8011d9c:	1ac0      	subs	r0, r0, r3
 8011d9e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011da0:	b10b      	cbz	r3, 8011da6 <__sflush_r+0x46>
 8011da2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011da4:	1ac0      	subs	r0, r0, r3
 8011da6:	2300      	movs	r3, #0
 8011da8:	4602      	mov	r2, r0
 8011daa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011dac:	6a21      	ldr	r1, [r4, #32]
 8011dae:	4628      	mov	r0, r5
 8011db0:	47b0      	blx	r6
 8011db2:	1c43      	adds	r3, r0, #1
 8011db4:	89a3      	ldrh	r3, [r4, #12]
 8011db6:	d106      	bne.n	8011dc6 <__sflush_r+0x66>
 8011db8:	6829      	ldr	r1, [r5, #0]
 8011dba:	291d      	cmp	r1, #29
 8011dbc:	d82c      	bhi.n	8011e18 <__sflush_r+0xb8>
 8011dbe:	4a2a      	ldr	r2, [pc, #168]	; (8011e68 <__sflush_r+0x108>)
 8011dc0:	40ca      	lsrs	r2, r1
 8011dc2:	07d6      	lsls	r6, r2, #31
 8011dc4:	d528      	bpl.n	8011e18 <__sflush_r+0xb8>
 8011dc6:	2200      	movs	r2, #0
 8011dc8:	6062      	str	r2, [r4, #4]
 8011dca:	04d9      	lsls	r1, r3, #19
 8011dcc:	6922      	ldr	r2, [r4, #16]
 8011dce:	6022      	str	r2, [r4, #0]
 8011dd0:	d504      	bpl.n	8011ddc <__sflush_r+0x7c>
 8011dd2:	1c42      	adds	r2, r0, #1
 8011dd4:	d101      	bne.n	8011dda <__sflush_r+0x7a>
 8011dd6:	682b      	ldr	r3, [r5, #0]
 8011dd8:	b903      	cbnz	r3, 8011ddc <__sflush_r+0x7c>
 8011dda:	6560      	str	r0, [r4, #84]	; 0x54
 8011ddc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011dde:	602f      	str	r7, [r5, #0]
 8011de0:	2900      	cmp	r1, #0
 8011de2:	d0ca      	beq.n	8011d7a <__sflush_r+0x1a>
 8011de4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011de8:	4299      	cmp	r1, r3
 8011dea:	d002      	beq.n	8011df2 <__sflush_r+0x92>
 8011dec:	4628      	mov	r0, r5
 8011dee:	f7ff fbdd 	bl	80115ac <_free_r>
 8011df2:	2000      	movs	r0, #0
 8011df4:	6360      	str	r0, [r4, #52]	; 0x34
 8011df6:	e7c1      	b.n	8011d7c <__sflush_r+0x1c>
 8011df8:	6a21      	ldr	r1, [r4, #32]
 8011dfa:	2301      	movs	r3, #1
 8011dfc:	4628      	mov	r0, r5
 8011dfe:	47b0      	blx	r6
 8011e00:	1c41      	adds	r1, r0, #1
 8011e02:	d1c7      	bne.n	8011d94 <__sflush_r+0x34>
 8011e04:	682b      	ldr	r3, [r5, #0]
 8011e06:	2b00      	cmp	r3, #0
 8011e08:	d0c4      	beq.n	8011d94 <__sflush_r+0x34>
 8011e0a:	2b1d      	cmp	r3, #29
 8011e0c:	d001      	beq.n	8011e12 <__sflush_r+0xb2>
 8011e0e:	2b16      	cmp	r3, #22
 8011e10:	d101      	bne.n	8011e16 <__sflush_r+0xb6>
 8011e12:	602f      	str	r7, [r5, #0]
 8011e14:	e7b1      	b.n	8011d7a <__sflush_r+0x1a>
 8011e16:	89a3      	ldrh	r3, [r4, #12]
 8011e18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011e1c:	81a3      	strh	r3, [r4, #12]
 8011e1e:	e7ad      	b.n	8011d7c <__sflush_r+0x1c>
 8011e20:	690f      	ldr	r7, [r1, #16]
 8011e22:	2f00      	cmp	r7, #0
 8011e24:	d0a9      	beq.n	8011d7a <__sflush_r+0x1a>
 8011e26:	0793      	lsls	r3, r2, #30
 8011e28:	680e      	ldr	r6, [r1, #0]
 8011e2a:	bf08      	it	eq
 8011e2c:	694b      	ldreq	r3, [r1, #20]
 8011e2e:	600f      	str	r7, [r1, #0]
 8011e30:	bf18      	it	ne
 8011e32:	2300      	movne	r3, #0
 8011e34:	eba6 0807 	sub.w	r8, r6, r7
 8011e38:	608b      	str	r3, [r1, #8]
 8011e3a:	f1b8 0f00 	cmp.w	r8, #0
 8011e3e:	dd9c      	ble.n	8011d7a <__sflush_r+0x1a>
 8011e40:	6a21      	ldr	r1, [r4, #32]
 8011e42:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011e44:	4643      	mov	r3, r8
 8011e46:	463a      	mov	r2, r7
 8011e48:	4628      	mov	r0, r5
 8011e4a:	47b0      	blx	r6
 8011e4c:	2800      	cmp	r0, #0
 8011e4e:	dc06      	bgt.n	8011e5e <__sflush_r+0xfe>
 8011e50:	89a3      	ldrh	r3, [r4, #12]
 8011e52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011e56:	81a3      	strh	r3, [r4, #12]
 8011e58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011e5c:	e78e      	b.n	8011d7c <__sflush_r+0x1c>
 8011e5e:	4407      	add	r7, r0
 8011e60:	eba8 0800 	sub.w	r8, r8, r0
 8011e64:	e7e9      	b.n	8011e3a <__sflush_r+0xda>
 8011e66:	bf00      	nop
 8011e68:	20400001 	.word	0x20400001

08011e6c <_fflush_r>:
 8011e6c:	b538      	push	{r3, r4, r5, lr}
 8011e6e:	690b      	ldr	r3, [r1, #16]
 8011e70:	4605      	mov	r5, r0
 8011e72:	460c      	mov	r4, r1
 8011e74:	b913      	cbnz	r3, 8011e7c <_fflush_r+0x10>
 8011e76:	2500      	movs	r5, #0
 8011e78:	4628      	mov	r0, r5
 8011e7a:	bd38      	pop	{r3, r4, r5, pc}
 8011e7c:	b118      	cbz	r0, 8011e86 <_fflush_r+0x1a>
 8011e7e:	6983      	ldr	r3, [r0, #24]
 8011e80:	b90b      	cbnz	r3, 8011e86 <_fflush_r+0x1a>
 8011e82:	f000 f887 	bl	8011f94 <__sinit>
 8011e86:	4b14      	ldr	r3, [pc, #80]	; (8011ed8 <_fflush_r+0x6c>)
 8011e88:	429c      	cmp	r4, r3
 8011e8a:	d11b      	bne.n	8011ec4 <_fflush_r+0x58>
 8011e8c:	686c      	ldr	r4, [r5, #4]
 8011e8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011e92:	2b00      	cmp	r3, #0
 8011e94:	d0ef      	beq.n	8011e76 <_fflush_r+0xa>
 8011e96:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011e98:	07d0      	lsls	r0, r2, #31
 8011e9a:	d404      	bmi.n	8011ea6 <_fflush_r+0x3a>
 8011e9c:	0599      	lsls	r1, r3, #22
 8011e9e:	d402      	bmi.n	8011ea6 <_fflush_r+0x3a>
 8011ea0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011ea2:	f000 f927 	bl	80120f4 <__retarget_lock_acquire_recursive>
 8011ea6:	4628      	mov	r0, r5
 8011ea8:	4621      	mov	r1, r4
 8011eaa:	f7ff ff59 	bl	8011d60 <__sflush_r>
 8011eae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011eb0:	07da      	lsls	r2, r3, #31
 8011eb2:	4605      	mov	r5, r0
 8011eb4:	d4e0      	bmi.n	8011e78 <_fflush_r+0xc>
 8011eb6:	89a3      	ldrh	r3, [r4, #12]
 8011eb8:	059b      	lsls	r3, r3, #22
 8011eba:	d4dd      	bmi.n	8011e78 <_fflush_r+0xc>
 8011ebc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011ebe:	f000 f91a 	bl	80120f6 <__retarget_lock_release_recursive>
 8011ec2:	e7d9      	b.n	8011e78 <_fflush_r+0xc>
 8011ec4:	4b05      	ldr	r3, [pc, #20]	; (8011edc <_fflush_r+0x70>)
 8011ec6:	429c      	cmp	r4, r3
 8011ec8:	d101      	bne.n	8011ece <_fflush_r+0x62>
 8011eca:	68ac      	ldr	r4, [r5, #8]
 8011ecc:	e7df      	b.n	8011e8e <_fflush_r+0x22>
 8011ece:	4b04      	ldr	r3, [pc, #16]	; (8011ee0 <_fflush_r+0x74>)
 8011ed0:	429c      	cmp	r4, r3
 8011ed2:	bf08      	it	eq
 8011ed4:	68ec      	ldreq	r4, [r5, #12]
 8011ed6:	e7da      	b.n	8011e8e <_fflush_r+0x22>
 8011ed8:	08017a1c 	.word	0x08017a1c
 8011edc:	08017a3c 	.word	0x08017a3c
 8011ee0:	080179fc 	.word	0x080179fc

08011ee4 <std>:
 8011ee4:	2300      	movs	r3, #0
 8011ee6:	b510      	push	{r4, lr}
 8011ee8:	4604      	mov	r4, r0
 8011eea:	e9c0 3300 	strd	r3, r3, [r0]
 8011eee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011ef2:	6083      	str	r3, [r0, #8]
 8011ef4:	8181      	strh	r1, [r0, #12]
 8011ef6:	6643      	str	r3, [r0, #100]	; 0x64
 8011ef8:	81c2      	strh	r2, [r0, #14]
 8011efa:	6183      	str	r3, [r0, #24]
 8011efc:	4619      	mov	r1, r3
 8011efe:	2208      	movs	r2, #8
 8011f00:	305c      	adds	r0, #92	; 0x5c
 8011f02:	f7ff fb4b 	bl	801159c <memset>
 8011f06:	4b05      	ldr	r3, [pc, #20]	; (8011f1c <std+0x38>)
 8011f08:	6263      	str	r3, [r4, #36]	; 0x24
 8011f0a:	4b05      	ldr	r3, [pc, #20]	; (8011f20 <std+0x3c>)
 8011f0c:	62a3      	str	r3, [r4, #40]	; 0x28
 8011f0e:	4b05      	ldr	r3, [pc, #20]	; (8011f24 <std+0x40>)
 8011f10:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011f12:	4b05      	ldr	r3, [pc, #20]	; (8011f28 <std+0x44>)
 8011f14:	6224      	str	r4, [r4, #32]
 8011f16:	6323      	str	r3, [r4, #48]	; 0x30
 8011f18:	bd10      	pop	{r4, pc}
 8011f1a:	bf00      	nop
 8011f1c:	08012a6d 	.word	0x08012a6d
 8011f20:	08012a8f 	.word	0x08012a8f
 8011f24:	08012ac7 	.word	0x08012ac7
 8011f28:	08012aeb 	.word	0x08012aeb

08011f2c <_cleanup_r>:
 8011f2c:	4901      	ldr	r1, [pc, #4]	; (8011f34 <_cleanup_r+0x8>)
 8011f2e:	f000 b8c1 	b.w	80120b4 <_fwalk_reent>
 8011f32:	bf00      	nop
 8011f34:	08011e6d 	.word	0x08011e6d

08011f38 <__sfmoreglue>:
 8011f38:	b570      	push	{r4, r5, r6, lr}
 8011f3a:	1e4a      	subs	r2, r1, #1
 8011f3c:	2568      	movs	r5, #104	; 0x68
 8011f3e:	4355      	muls	r5, r2
 8011f40:	460e      	mov	r6, r1
 8011f42:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8011f46:	f7ff fb81 	bl	801164c <_malloc_r>
 8011f4a:	4604      	mov	r4, r0
 8011f4c:	b140      	cbz	r0, 8011f60 <__sfmoreglue+0x28>
 8011f4e:	2100      	movs	r1, #0
 8011f50:	e9c0 1600 	strd	r1, r6, [r0]
 8011f54:	300c      	adds	r0, #12
 8011f56:	60a0      	str	r0, [r4, #8]
 8011f58:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011f5c:	f7ff fb1e 	bl	801159c <memset>
 8011f60:	4620      	mov	r0, r4
 8011f62:	bd70      	pop	{r4, r5, r6, pc}

08011f64 <__sfp_lock_acquire>:
 8011f64:	4801      	ldr	r0, [pc, #4]	; (8011f6c <__sfp_lock_acquire+0x8>)
 8011f66:	f000 b8c5 	b.w	80120f4 <__retarget_lock_acquire_recursive>
 8011f6a:	bf00      	nop
 8011f6c:	2000d7b0 	.word	0x2000d7b0

08011f70 <__sfp_lock_release>:
 8011f70:	4801      	ldr	r0, [pc, #4]	; (8011f78 <__sfp_lock_release+0x8>)
 8011f72:	f000 b8c0 	b.w	80120f6 <__retarget_lock_release_recursive>
 8011f76:	bf00      	nop
 8011f78:	2000d7b0 	.word	0x2000d7b0

08011f7c <__sinit_lock_acquire>:
 8011f7c:	4801      	ldr	r0, [pc, #4]	; (8011f84 <__sinit_lock_acquire+0x8>)
 8011f7e:	f000 b8b9 	b.w	80120f4 <__retarget_lock_acquire_recursive>
 8011f82:	bf00      	nop
 8011f84:	2000d7ab 	.word	0x2000d7ab

08011f88 <__sinit_lock_release>:
 8011f88:	4801      	ldr	r0, [pc, #4]	; (8011f90 <__sinit_lock_release+0x8>)
 8011f8a:	f000 b8b4 	b.w	80120f6 <__retarget_lock_release_recursive>
 8011f8e:	bf00      	nop
 8011f90:	2000d7ab 	.word	0x2000d7ab

08011f94 <__sinit>:
 8011f94:	b510      	push	{r4, lr}
 8011f96:	4604      	mov	r4, r0
 8011f98:	f7ff fff0 	bl	8011f7c <__sinit_lock_acquire>
 8011f9c:	69a3      	ldr	r3, [r4, #24]
 8011f9e:	b11b      	cbz	r3, 8011fa8 <__sinit+0x14>
 8011fa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011fa4:	f7ff bff0 	b.w	8011f88 <__sinit_lock_release>
 8011fa8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011fac:	6523      	str	r3, [r4, #80]	; 0x50
 8011fae:	4b13      	ldr	r3, [pc, #76]	; (8011ffc <__sinit+0x68>)
 8011fb0:	4a13      	ldr	r2, [pc, #76]	; (8012000 <__sinit+0x6c>)
 8011fb2:	681b      	ldr	r3, [r3, #0]
 8011fb4:	62a2      	str	r2, [r4, #40]	; 0x28
 8011fb6:	42a3      	cmp	r3, r4
 8011fb8:	bf04      	itt	eq
 8011fba:	2301      	moveq	r3, #1
 8011fbc:	61a3      	streq	r3, [r4, #24]
 8011fbe:	4620      	mov	r0, r4
 8011fc0:	f000 f820 	bl	8012004 <__sfp>
 8011fc4:	6060      	str	r0, [r4, #4]
 8011fc6:	4620      	mov	r0, r4
 8011fc8:	f000 f81c 	bl	8012004 <__sfp>
 8011fcc:	60a0      	str	r0, [r4, #8]
 8011fce:	4620      	mov	r0, r4
 8011fd0:	f000 f818 	bl	8012004 <__sfp>
 8011fd4:	2200      	movs	r2, #0
 8011fd6:	60e0      	str	r0, [r4, #12]
 8011fd8:	2104      	movs	r1, #4
 8011fda:	6860      	ldr	r0, [r4, #4]
 8011fdc:	f7ff ff82 	bl	8011ee4 <std>
 8011fe0:	68a0      	ldr	r0, [r4, #8]
 8011fe2:	2201      	movs	r2, #1
 8011fe4:	2109      	movs	r1, #9
 8011fe6:	f7ff ff7d 	bl	8011ee4 <std>
 8011fea:	68e0      	ldr	r0, [r4, #12]
 8011fec:	2202      	movs	r2, #2
 8011fee:	2112      	movs	r1, #18
 8011ff0:	f7ff ff78 	bl	8011ee4 <std>
 8011ff4:	2301      	movs	r3, #1
 8011ff6:	61a3      	str	r3, [r4, #24]
 8011ff8:	e7d2      	b.n	8011fa0 <__sinit+0xc>
 8011ffa:	bf00      	nop
 8011ffc:	080178e4 	.word	0x080178e4
 8012000:	08011f2d 	.word	0x08011f2d

08012004 <__sfp>:
 8012004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012006:	4607      	mov	r7, r0
 8012008:	f7ff ffac 	bl	8011f64 <__sfp_lock_acquire>
 801200c:	4b1e      	ldr	r3, [pc, #120]	; (8012088 <__sfp+0x84>)
 801200e:	681e      	ldr	r6, [r3, #0]
 8012010:	69b3      	ldr	r3, [r6, #24]
 8012012:	b913      	cbnz	r3, 801201a <__sfp+0x16>
 8012014:	4630      	mov	r0, r6
 8012016:	f7ff ffbd 	bl	8011f94 <__sinit>
 801201a:	3648      	adds	r6, #72	; 0x48
 801201c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012020:	3b01      	subs	r3, #1
 8012022:	d503      	bpl.n	801202c <__sfp+0x28>
 8012024:	6833      	ldr	r3, [r6, #0]
 8012026:	b30b      	cbz	r3, 801206c <__sfp+0x68>
 8012028:	6836      	ldr	r6, [r6, #0]
 801202a:	e7f7      	b.n	801201c <__sfp+0x18>
 801202c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012030:	b9d5      	cbnz	r5, 8012068 <__sfp+0x64>
 8012032:	4b16      	ldr	r3, [pc, #88]	; (801208c <__sfp+0x88>)
 8012034:	60e3      	str	r3, [r4, #12]
 8012036:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801203a:	6665      	str	r5, [r4, #100]	; 0x64
 801203c:	f000 f859 	bl	80120f2 <__retarget_lock_init_recursive>
 8012040:	f7ff ff96 	bl	8011f70 <__sfp_lock_release>
 8012044:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8012048:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801204c:	6025      	str	r5, [r4, #0]
 801204e:	61a5      	str	r5, [r4, #24]
 8012050:	2208      	movs	r2, #8
 8012052:	4629      	mov	r1, r5
 8012054:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012058:	f7ff faa0 	bl	801159c <memset>
 801205c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012060:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012064:	4620      	mov	r0, r4
 8012066:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012068:	3468      	adds	r4, #104	; 0x68
 801206a:	e7d9      	b.n	8012020 <__sfp+0x1c>
 801206c:	2104      	movs	r1, #4
 801206e:	4638      	mov	r0, r7
 8012070:	f7ff ff62 	bl	8011f38 <__sfmoreglue>
 8012074:	4604      	mov	r4, r0
 8012076:	6030      	str	r0, [r6, #0]
 8012078:	2800      	cmp	r0, #0
 801207a:	d1d5      	bne.n	8012028 <__sfp+0x24>
 801207c:	f7ff ff78 	bl	8011f70 <__sfp_lock_release>
 8012080:	230c      	movs	r3, #12
 8012082:	603b      	str	r3, [r7, #0]
 8012084:	e7ee      	b.n	8012064 <__sfp+0x60>
 8012086:	bf00      	nop
 8012088:	080178e4 	.word	0x080178e4
 801208c:	ffff0001 	.word	0xffff0001

08012090 <fiprintf>:
 8012090:	b40e      	push	{r1, r2, r3}
 8012092:	b503      	push	{r0, r1, lr}
 8012094:	4601      	mov	r1, r0
 8012096:	ab03      	add	r3, sp, #12
 8012098:	4805      	ldr	r0, [pc, #20]	; (80120b0 <fiprintf+0x20>)
 801209a:	f853 2b04 	ldr.w	r2, [r3], #4
 801209e:	6800      	ldr	r0, [r0, #0]
 80120a0:	9301      	str	r3, [sp, #4]
 80120a2:	f000 fa1f 	bl	80124e4 <_vfiprintf_r>
 80120a6:	b002      	add	sp, #8
 80120a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80120ac:	b003      	add	sp, #12
 80120ae:	4770      	bx	lr
 80120b0:	20000028 	.word	0x20000028

080120b4 <_fwalk_reent>:
 80120b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80120b8:	4606      	mov	r6, r0
 80120ba:	4688      	mov	r8, r1
 80120bc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80120c0:	2700      	movs	r7, #0
 80120c2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80120c6:	f1b9 0901 	subs.w	r9, r9, #1
 80120ca:	d505      	bpl.n	80120d8 <_fwalk_reent+0x24>
 80120cc:	6824      	ldr	r4, [r4, #0]
 80120ce:	2c00      	cmp	r4, #0
 80120d0:	d1f7      	bne.n	80120c2 <_fwalk_reent+0xe>
 80120d2:	4638      	mov	r0, r7
 80120d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80120d8:	89ab      	ldrh	r3, [r5, #12]
 80120da:	2b01      	cmp	r3, #1
 80120dc:	d907      	bls.n	80120ee <_fwalk_reent+0x3a>
 80120de:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80120e2:	3301      	adds	r3, #1
 80120e4:	d003      	beq.n	80120ee <_fwalk_reent+0x3a>
 80120e6:	4629      	mov	r1, r5
 80120e8:	4630      	mov	r0, r6
 80120ea:	47c0      	blx	r8
 80120ec:	4307      	orrs	r7, r0
 80120ee:	3568      	adds	r5, #104	; 0x68
 80120f0:	e7e9      	b.n	80120c6 <_fwalk_reent+0x12>

080120f2 <__retarget_lock_init_recursive>:
 80120f2:	4770      	bx	lr

080120f4 <__retarget_lock_acquire_recursive>:
 80120f4:	4770      	bx	lr

080120f6 <__retarget_lock_release_recursive>:
 80120f6:	4770      	bx	lr

080120f8 <__swhatbuf_r>:
 80120f8:	b570      	push	{r4, r5, r6, lr}
 80120fa:	460e      	mov	r6, r1
 80120fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012100:	2900      	cmp	r1, #0
 8012102:	b096      	sub	sp, #88	; 0x58
 8012104:	4614      	mov	r4, r2
 8012106:	461d      	mov	r5, r3
 8012108:	da07      	bge.n	801211a <__swhatbuf_r+0x22>
 801210a:	2300      	movs	r3, #0
 801210c:	602b      	str	r3, [r5, #0]
 801210e:	89b3      	ldrh	r3, [r6, #12]
 8012110:	061a      	lsls	r2, r3, #24
 8012112:	d410      	bmi.n	8012136 <__swhatbuf_r+0x3e>
 8012114:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012118:	e00e      	b.n	8012138 <__swhatbuf_r+0x40>
 801211a:	466a      	mov	r2, sp
 801211c:	f000 fd14 	bl	8012b48 <_fstat_r>
 8012120:	2800      	cmp	r0, #0
 8012122:	dbf2      	blt.n	801210a <__swhatbuf_r+0x12>
 8012124:	9a01      	ldr	r2, [sp, #4]
 8012126:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801212a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801212e:	425a      	negs	r2, r3
 8012130:	415a      	adcs	r2, r3
 8012132:	602a      	str	r2, [r5, #0]
 8012134:	e7ee      	b.n	8012114 <__swhatbuf_r+0x1c>
 8012136:	2340      	movs	r3, #64	; 0x40
 8012138:	2000      	movs	r0, #0
 801213a:	6023      	str	r3, [r4, #0]
 801213c:	b016      	add	sp, #88	; 0x58
 801213e:	bd70      	pop	{r4, r5, r6, pc}

08012140 <__smakebuf_r>:
 8012140:	898b      	ldrh	r3, [r1, #12]
 8012142:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012144:	079d      	lsls	r5, r3, #30
 8012146:	4606      	mov	r6, r0
 8012148:	460c      	mov	r4, r1
 801214a:	d507      	bpl.n	801215c <__smakebuf_r+0x1c>
 801214c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012150:	6023      	str	r3, [r4, #0]
 8012152:	6123      	str	r3, [r4, #16]
 8012154:	2301      	movs	r3, #1
 8012156:	6163      	str	r3, [r4, #20]
 8012158:	b002      	add	sp, #8
 801215a:	bd70      	pop	{r4, r5, r6, pc}
 801215c:	ab01      	add	r3, sp, #4
 801215e:	466a      	mov	r2, sp
 8012160:	f7ff ffca 	bl	80120f8 <__swhatbuf_r>
 8012164:	9900      	ldr	r1, [sp, #0]
 8012166:	4605      	mov	r5, r0
 8012168:	4630      	mov	r0, r6
 801216a:	f7ff fa6f 	bl	801164c <_malloc_r>
 801216e:	b948      	cbnz	r0, 8012184 <__smakebuf_r+0x44>
 8012170:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012174:	059a      	lsls	r2, r3, #22
 8012176:	d4ef      	bmi.n	8012158 <__smakebuf_r+0x18>
 8012178:	f023 0303 	bic.w	r3, r3, #3
 801217c:	f043 0302 	orr.w	r3, r3, #2
 8012180:	81a3      	strh	r3, [r4, #12]
 8012182:	e7e3      	b.n	801214c <__smakebuf_r+0xc>
 8012184:	4b0d      	ldr	r3, [pc, #52]	; (80121bc <__smakebuf_r+0x7c>)
 8012186:	62b3      	str	r3, [r6, #40]	; 0x28
 8012188:	89a3      	ldrh	r3, [r4, #12]
 801218a:	6020      	str	r0, [r4, #0]
 801218c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012190:	81a3      	strh	r3, [r4, #12]
 8012192:	9b00      	ldr	r3, [sp, #0]
 8012194:	6163      	str	r3, [r4, #20]
 8012196:	9b01      	ldr	r3, [sp, #4]
 8012198:	6120      	str	r0, [r4, #16]
 801219a:	b15b      	cbz	r3, 80121b4 <__smakebuf_r+0x74>
 801219c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80121a0:	4630      	mov	r0, r6
 80121a2:	f000 fce3 	bl	8012b6c <_isatty_r>
 80121a6:	b128      	cbz	r0, 80121b4 <__smakebuf_r+0x74>
 80121a8:	89a3      	ldrh	r3, [r4, #12]
 80121aa:	f023 0303 	bic.w	r3, r3, #3
 80121ae:	f043 0301 	orr.w	r3, r3, #1
 80121b2:	81a3      	strh	r3, [r4, #12]
 80121b4:	89a0      	ldrh	r0, [r4, #12]
 80121b6:	4305      	orrs	r5, r0
 80121b8:	81a5      	strh	r5, [r4, #12]
 80121ba:	e7cd      	b.n	8012158 <__smakebuf_r+0x18>
 80121bc:	08011f2d 	.word	0x08011f2d

080121c0 <__malloc_lock>:
 80121c0:	4801      	ldr	r0, [pc, #4]	; (80121c8 <__malloc_lock+0x8>)
 80121c2:	f7ff bf97 	b.w	80120f4 <__retarget_lock_acquire_recursive>
 80121c6:	bf00      	nop
 80121c8:	2000d7ac 	.word	0x2000d7ac

080121cc <__malloc_unlock>:
 80121cc:	4801      	ldr	r0, [pc, #4]	; (80121d4 <__malloc_unlock+0x8>)
 80121ce:	f7ff bf92 	b.w	80120f6 <__retarget_lock_release_recursive>
 80121d2:	bf00      	nop
 80121d4:	2000d7ac 	.word	0x2000d7ac

080121d8 <__ssputs_r>:
 80121d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80121dc:	688e      	ldr	r6, [r1, #8]
 80121de:	429e      	cmp	r6, r3
 80121e0:	4682      	mov	sl, r0
 80121e2:	460c      	mov	r4, r1
 80121e4:	4690      	mov	r8, r2
 80121e6:	461f      	mov	r7, r3
 80121e8:	d838      	bhi.n	801225c <__ssputs_r+0x84>
 80121ea:	898a      	ldrh	r2, [r1, #12]
 80121ec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80121f0:	d032      	beq.n	8012258 <__ssputs_r+0x80>
 80121f2:	6825      	ldr	r5, [r4, #0]
 80121f4:	6909      	ldr	r1, [r1, #16]
 80121f6:	eba5 0901 	sub.w	r9, r5, r1
 80121fa:	6965      	ldr	r5, [r4, #20]
 80121fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012200:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012204:	3301      	adds	r3, #1
 8012206:	444b      	add	r3, r9
 8012208:	106d      	asrs	r5, r5, #1
 801220a:	429d      	cmp	r5, r3
 801220c:	bf38      	it	cc
 801220e:	461d      	movcc	r5, r3
 8012210:	0553      	lsls	r3, r2, #21
 8012212:	d531      	bpl.n	8012278 <__ssputs_r+0xa0>
 8012214:	4629      	mov	r1, r5
 8012216:	f7ff fa19 	bl	801164c <_malloc_r>
 801221a:	4606      	mov	r6, r0
 801221c:	b950      	cbnz	r0, 8012234 <__ssputs_r+0x5c>
 801221e:	230c      	movs	r3, #12
 8012220:	f8ca 3000 	str.w	r3, [sl]
 8012224:	89a3      	ldrh	r3, [r4, #12]
 8012226:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801222a:	81a3      	strh	r3, [r4, #12]
 801222c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012230:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012234:	6921      	ldr	r1, [r4, #16]
 8012236:	464a      	mov	r2, r9
 8012238:	f7ff f988 	bl	801154c <memcpy>
 801223c:	89a3      	ldrh	r3, [r4, #12]
 801223e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8012242:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012246:	81a3      	strh	r3, [r4, #12]
 8012248:	6126      	str	r6, [r4, #16]
 801224a:	6165      	str	r5, [r4, #20]
 801224c:	444e      	add	r6, r9
 801224e:	eba5 0509 	sub.w	r5, r5, r9
 8012252:	6026      	str	r6, [r4, #0]
 8012254:	60a5      	str	r5, [r4, #8]
 8012256:	463e      	mov	r6, r7
 8012258:	42be      	cmp	r6, r7
 801225a:	d900      	bls.n	801225e <__ssputs_r+0x86>
 801225c:	463e      	mov	r6, r7
 801225e:	4632      	mov	r2, r6
 8012260:	6820      	ldr	r0, [r4, #0]
 8012262:	4641      	mov	r1, r8
 8012264:	f7ff f980 	bl	8011568 <memmove>
 8012268:	68a3      	ldr	r3, [r4, #8]
 801226a:	6822      	ldr	r2, [r4, #0]
 801226c:	1b9b      	subs	r3, r3, r6
 801226e:	4432      	add	r2, r6
 8012270:	60a3      	str	r3, [r4, #8]
 8012272:	6022      	str	r2, [r4, #0]
 8012274:	2000      	movs	r0, #0
 8012276:	e7db      	b.n	8012230 <__ssputs_r+0x58>
 8012278:	462a      	mov	r2, r5
 801227a:	f000 fc99 	bl	8012bb0 <_realloc_r>
 801227e:	4606      	mov	r6, r0
 8012280:	2800      	cmp	r0, #0
 8012282:	d1e1      	bne.n	8012248 <__ssputs_r+0x70>
 8012284:	6921      	ldr	r1, [r4, #16]
 8012286:	4650      	mov	r0, sl
 8012288:	f7ff f990 	bl	80115ac <_free_r>
 801228c:	e7c7      	b.n	801221e <__ssputs_r+0x46>
	...

08012290 <_svfiprintf_r>:
 8012290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012294:	4698      	mov	r8, r3
 8012296:	898b      	ldrh	r3, [r1, #12]
 8012298:	061b      	lsls	r3, r3, #24
 801229a:	b09d      	sub	sp, #116	; 0x74
 801229c:	4607      	mov	r7, r0
 801229e:	460d      	mov	r5, r1
 80122a0:	4614      	mov	r4, r2
 80122a2:	d50e      	bpl.n	80122c2 <_svfiprintf_r+0x32>
 80122a4:	690b      	ldr	r3, [r1, #16]
 80122a6:	b963      	cbnz	r3, 80122c2 <_svfiprintf_r+0x32>
 80122a8:	2140      	movs	r1, #64	; 0x40
 80122aa:	f7ff f9cf 	bl	801164c <_malloc_r>
 80122ae:	6028      	str	r0, [r5, #0]
 80122b0:	6128      	str	r0, [r5, #16]
 80122b2:	b920      	cbnz	r0, 80122be <_svfiprintf_r+0x2e>
 80122b4:	230c      	movs	r3, #12
 80122b6:	603b      	str	r3, [r7, #0]
 80122b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80122bc:	e0d1      	b.n	8012462 <_svfiprintf_r+0x1d2>
 80122be:	2340      	movs	r3, #64	; 0x40
 80122c0:	616b      	str	r3, [r5, #20]
 80122c2:	2300      	movs	r3, #0
 80122c4:	9309      	str	r3, [sp, #36]	; 0x24
 80122c6:	2320      	movs	r3, #32
 80122c8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80122cc:	f8cd 800c 	str.w	r8, [sp, #12]
 80122d0:	2330      	movs	r3, #48	; 0x30
 80122d2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801247c <_svfiprintf_r+0x1ec>
 80122d6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80122da:	f04f 0901 	mov.w	r9, #1
 80122de:	4623      	mov	r3, r4
 80122e0:	469a      	mov	sl, r3
 80122e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80122e6:	b10a      	cbz	r2, 80122ec <_svfiprintf_r+0x5c>
 80122e8:	2a25      	cmp	r2, #37	; 0x25
 80122ea:	d1f9      	bne.n	80122e0 <_svfiprintf_r+0x50>
 80122ec:	ebba 0b04 	subs.w	fp, sl, r4
 80122f0:	d00b      	beq.n	801230a <_svfiprintf_r+0x7a>
 80122f2:	465b      	mov	r3, fp
 80122f4:	4622      	mov	r2, r4
 80122f6:	4629      	mov	r1, r5
 80122f8:	4638      	mov	r0, r7
 80122fa:	f7ff ff6d 	bl	80121d8 <__ssputs_r>
 80122fe:	3001      	adds	r0, #1
 8012300:	f000 80aa 	beq.w	8012458 <_svfiprintf_r+0x1c8>
 8012304:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012306:	445a      	add	r2, fp
 8012308:	9209      	str	r2, [sp, #36]	; 0x24
 801230a:	f89a 3000 	ldrb.w	r3, [sl]
 801230e:	2b00      	cmp	r3, #0
 8012310:	f000 80a2 	beq.w	8012458 <_svfiprintf_r+0x1c8>
 8012314:	2300      	movs	r3, #0
 8012316:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801231a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801231e:	f10a 0a01 	add.w	sl, sl, #1
 8012322:	9304      	str	r3, [sp, #16]
 8012324:	9307      	str	r3, [sp, #28]
 8012326:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801232a:	931a      	str	r3, [sp, #104]	; 0x68
 801232c:	4654      	mov	r4, sl
 801232e:	2205      	movs	r2, #5
 8012330:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012334:	4851      	ldr	r0, [pc, #324]	; (801247c <_svfiprintf_r+0x1ec>)
 8012336:	f7ed ff63 	bl	8000200 <memchr>
 801233a:	9a04      	ldr	r2, [sp, #16]
 801233c:	b9d8      	cbnz	r0, 8012376 <_svfiprintf_r+0xe6>
 801233e:	06d0      	lsls	r0, r2, #27
 8012340:	bf44      	itt	mi
 8012342:	2320      	movmi	r3, #32
 8012344:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012348:	0711      	lsls	r1, r2, #28
 801234a:	bf44      	itt	mi
 801234c:	232b      	movmi	r3, #43	; 0x2b
 801234e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012352:	f89a 3000 	ldrb.w	r3, [sl]
 8012356:	2b2a      	cmp	r3, #42	; 0x2a
 8012358:	d015      	beq.n	8012386 <_svfiprintf_r+0xf6>
 801235a:	9a07      	ldr	r2, [sp, #28]
 801235c:	4654      	mov	r4, sl
 801235e:	2000      	movs	r0, #0
 8012360:	f04f 0c0a 	mov.w	ip, #10
 8012364:	4621      	mov	r1, r4
 8012366:	f811 3b01 	ldrb.w	r3, [r1], #1
 801236a:	3b30      	subs	r3, #48	; 0x30
 801236c:	2b09      	cmp	r3, #9
 801236e:	d94e      	bls.n	801240e <_svfiprintf_r+0x17e>
 8012370:	b1b0      	cbz	r0, 80123a0 <_svfiprintf_r+0x110>
 8012372:	9207      	str	r2, [sp, #28]
 8012374:	e014      	b.n	80123a0 <_svfiprintf_r+0x110>
 8012376:	eba0 0308 	sub.w	r3, r0, r8
 801237a:	fa09 f303 	lsl.w	r3, r9, r3
 801237e:	4313      	orrs	r3, r2
 8012380:	9304      	str	r3, [sp, #16]
 8012382:	46a2      	mov	sl, r4
 8012384:	e7d2      	b.n	801232c <_svfiprintf_r+0x9c>
 8012386:	9b03      	ldr	r3, [sp, #12]
 8012388:	1d19      	adds	r1, r3, #4
 801238a:	681b      	ldr	r3, [r3, #0]
 801238c:	9103      	str	r1, [sp, #12]
 801238e:	2b00      	cmp	r3, #0
 8012390:	bfbb      	ittet	lt
 8012392:	425b      	neglt	r3, r3
 8012394:	f042 0202 	orrlt.w	r2, r2, #2
 8012398:	9307      	strge	r3, [sp, #28]
 801239a:	9307      	strlt	r3, [sp, #28]
 801239c:	bfb8      	it	lt
 801239e:	9204      	strlt	r2, [sp, #16]
 80123a0:	7823      	ldrb	r3, [r4, #0]
 80123a2:	2b2e      	cmp	r3, #46	; 0x2e
 80123a4:	d10c      	bne.n	80123c0 <_svfiprintf_r+0x130>
 80123a6:	7863      	ldrb	r3, [r4, #1]
 80123a8:	2b2a      	cmp	r3, #42	; 0x2a
 80123aa:	d135      	bne.n	8012418 <_svfiprintf_r+0x188>
 80123ac:	9b03      	ldr	r3, [sp, #12]
 80123ae:	1d1a      	adds	r2, r3, #4
 80123b0:	681b      	ldr	r3, [r3, #0]
 80123b2:	9203      	str	r2, [sp, #12]
 80123b4:	2b00      	cmp	r3, #0
 80123b6:	bfb8      	it	lt
 80123b8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80123bc:	3402      	adds	r4, #2
 80123be:	9305      	str	r3, [sp, #20]
 80123c0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801248c <_svfiprintf_r+0x1fc>
 80123c4:	7821      	ldrb	r1, [r4, #0]
 80123c6:	2203      	movs	r2, #3
 80123c8:	4650      	mov	r0, sl
 80123ca:	f7ed ff19 	bl	8000200 <memchr>
 80123ce:	b140      	cbz	r0, 80123e2 <_svfiprintf_r+0x152>
 80123d0:	2340      	movs	r3, #64	; 0x40
 80123d2:	eba0 000a 	sub.w	r0, r0, sl
 80123d6:	fa03 f000 	lsl.w	r0, r3, r0
 80123da:	9b04      	ldr	r3, [sp, #16]
 80123dc:	4303      	orrs	r3, r0
 80123de:	3401      	adds	r4, #1
 80123e0:	9304      	str	r3, [sp, #16]
 80123e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80123e6:	4826      	ldr	r0, [pc, #152]	; (8012480 <_svfiprintf_r+0x1f0>)
 80123e8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80123ec:	2206      	movs	r2, #6
 80123ee:	f7ed ff07 	bl	8000200 <memchr>
 80123f2:	2800      	cmp	r0, #0
 80123f4:	d038      	beq.n	8012468 <_svfiprintf_r+0x1d8>
 80123f6:	4b23      	ldr	r3, [pc, #140]	; (8012484 <_svfiprintf_r+0x1f4>)
 80123f8:	bb1b      	cbnz	r3, 8012442 <_svfiprintf_r+0x1b2>
 80123fa:	9b03      	ldr	r3, [sp, #12]
 80123fc:	3307      	adds	r3, #7
 80123fe:	f023 0307 	bic.w	r3, r3, #7
 8012402:	3308      	adds	r3, #8
 8012404:	9303      	str	r3, [sp, #12]
 8012406:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012408:	4433      	add	r3, r6
 801240a:	9309      	str	r3, [sp, #36]	; 0x24
 801240c:	e767      	b.n	80122de <_svfiprintf_r+0x4e>
 801240e:	fb0c 3202 	mla	r2, ip, r2, r3
 8012412:	460c      	mov	r4, r1
 8012414:	2001      	movs	r0, #1
 8012416:	e7a5      	b.n	8012364 <_svfiprintf_r+0xd4>
 8012418:	2300      	movs	r3, #0
 801241a:	3401      	adds	r4, #1
 801241c:	9305      	str	r3, [sp, #20]
 801241e:	4619      	mov	r1, r3
 8012420:	f04f 0c0a 	mov.w	ip, #10
 8012424:	4620      	mov	r0, r4
 8012426:	f810 2b01 	ldrb.w	r2, [r0], #1
 801242a:	3a30      	subs	r2, #48	; 0x30
 801242c:	2a09      	cmp	r2, #9
 801242e:	d903      	bls.n	8012438 <_svfiprintf_r+0x1a8>
 8012430:	2b00      	cmp	r3, #0
 8012432:	d0c5      	beq.n	80123c0 <_svfiprintf_r+0x130>
 8012434:	9105      	str	r1, [sp, #20]
 8012436:	e7c3      	b.n	80123c0 <_svfiprintf_r+0x130>
 8012438:	fb0c 2101 	mla	r1, ip, r1, r2
 801243c:	4604      	mov	r4, r0
 801243e:	2301      	movs	r3, #1
 8012440:	e7f0      	b.n	8012424 <_svfiprintf_r+0x194>
 8012442:	ab03      	add	r3, sp, #12
 8012444:	9300      	str	r3, [sp, #0]
 8012446:	462a      	mov	r2, r5
 8012448:	4b0f      	ldr	r3, [pc, #60]	; (8012488 <_svfiprintf_r+0x1f8>)
 801244a:	a904      	add	r1, sp, #16
 801244c:	4638      	mov	r0, r7
 801244e:	f3af 8000 	nop.w
 8012452:	1c42      	adds	r2, r0, #1
 8012454:	4606      	mov	r6, r0
 8012456:	d1d6      	bne.n	8012406 <_svfiprintf_r+0x176>
 8012458:	89ab      	ldrh	r3, [r5, #12]
 801245a:	065b      	lsls	r3, r3, #25
 801245c:	f53f af2c 	bmi.w	80122b8 <_svfiprintf_r+0x28>
 8012460:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012462:	b01d      	add	sp, #116	; 0x74
 8012464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012468:	ab03      	add	r3, sp, #12
 801246a:	9300      	str	r3, [sp, #0]
 801246c:	462a      	mov	r2, r5
 801246e:	4b06      	ldr	r3, [pc, #24]	; (8012488 <_svfiprintf_r+0x1f8>)
 8012470:	a904      	add	r1, sp, #16
 8012472:	4638      	mov	r0, r7
 8012474:	f000 f9d4 	bl	8012820 <_printf_i>
 8012478:	e7eb      	b.n	8012452 <_svfiprintf_r+0x1c2>
 801247a:	bf00      	nop
 801247c:	08017a5c 	.word	0x08017a5c
 8012480:	08017a66 	.word	0x08017a66
 8012484:	00000000 	.word	0x00000000
 8012488:	080121d9 	.word	0x080121d9
 801248c:	08017a62 	.word	0x08017a62

08012490 <__sfputc_r>:
 8012490:	6893      	ldr	r3, [r2, #8]
 8012492:	3b01      	subs	r3, #1
 8012494:	2b00      	cmp	r3, #0
 8012496:	b410      	push	{r4}
 8012498:	6093      	str	r3, [r2, #8]
 801249a:	da08      	bge.n	80124ae <__sfputc_r+0x1e>
 801249c:	6994      	ldr	r4, [r2, #24]
 801249e:	42a3      	cmp	r3, r4
 80124a0:	db01      	blt.n	80124a6 <__sfputc_r+0x16>
 80124a2:	290a      	cmp	r1, #10
 80124a4:	d103      	bne.n	80124ae <__sfputc_r+0x1e>
 80124a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80124aa:	f7ff bb75 	b.w	8011b98 <__swbuf_r>
 80124ae:	6813      	ldr	r3, [r2, #0]
 80124b0:	1c58      	adds	r0, r3, #1
 80124b2:	6010      	str	r0, [r2, #0]
 80124b4:	7019      	strb	r1, [r3, #0]
 80124b6:	4608      	mov	r0, r1
 80124b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80124bc:	4770      	bx	lr

080124be <__sfputs_r>:
 80124be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80124c0:	4606      	mov	r6, r0
 80124c2:	460f      	mov	r7, r1
 80124c4:	4614      	mov	r4, r2
 80124c6:	18d5      	adds	r5, r2, r3
 80124c8:	42ac      	cmp	r4, r5
 80124ca:	d101      	bne.n	80124d0 <__sfputs_r+0x12>
 80124cc:	2000      	movs	r0, #0
 80124ce:	e007      	b.n	80124e0 <__sfputs_r+0x22>
 80124d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80124d4:	463a      	mov	r2, r7
 80124d6:	4630      	mov	r0, r6
 80124d8:	f7ff ffda 	bl	8012490 <__sfputc_r>
 80124dc:	1c43      	adds	r3, r0, #1
 80124de:	d1f3      	bne.n	80124c8 <__sfputs_r+0xa>
 80124e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080124e4 <_vfiprintf_r>:
 80124e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124e8:	460d      	mov	r5, r1
 80124ea:	b09d      	sub	sp, #116	; 0x74
 80124ec:	4614      	mov	r4, r2
 80124ee:	4698      	mov	r8, r3
 80124f0:	4606      	mov	r6, r0
 80124f2:	b118      	cbz	r0, 80124fc <_vfiprintf_r+0x18>
 80124f4:	6983      	ldr	r3, [r0, #24]
 80124f6:	b90b      	cbnz	r3, 80124fc <_vfiprintf_r+0x18>
 80124f8:	f7ff fd4c 	bl	8011f94 <__sinit>
 80124fc:	4b89      	ldr	r3, [pc, #548]	; (8012724 <_vfiprintf_r+0x240>)
 80124fe:	429d      	cmp	r5, r3
 8012500:	d11b      	bne.n	801253a <_vfiprintf_r+0x56>
 8012502:	6875      	ldr	r5, [r6, #4]
 8012504:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012506:	07d9      	lsls	r1, r3, #31
 8012508:	d405      	bmi.n	8012516 <_vfiprintf_r+0x32>
 801250a:	89ab      	ldrh	r3, [r5, #12]
 801250c:	059a      	lsls	r2, r3, #22
 801250e:	d402      	bmi.n	8012516 <_vfiprintf_r+0x32>
 8012510:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012512:	f7ff fdef 	bl	80120f4 <__retarget_lock_acquire_recursive>
 8012516:	89ab      	ldrh	r3, [r5, #12]
 8012518:	071b      	lsls	r3, r3, #28
 801251a:	d501      	bpl.n	8012520 <_vfiprintf_r+0x3c>
 801251c:	692b      	ldr	r3, [r5, #16]
 801251e:	b9eb      	cbnz	r3, 801255c <_vfiprintf_r+0x78>
 8012520:	4629      	mov	r1, r5
 8012522:	4630      	mov	r0, r6
 8012524:	f7ff fb8a 	bl	8011c3c <__swsetup_r>
 8012528:	b1c0      	cbz	r0, 801255c <_vfiprintf_r+0x78>
 801252a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801252c:	07dc      	lsls	r4, r3, #31
 801252e:	d50e      	bpl.n	801254e <_vfiprintf_r+0x6a>
 8012530:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012534:	b01d      	add	sp, #116	; 0x74
 8012536:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801253a:	4b7b      	ldr	r3, [pc, #492]	; (8012728 <_vfiprintf_r+0x244>)
 801253c:	429d      	cmp	r5, r3
 801253e:	d101      	bne.n	8012544 <_vfiprintf_r+0x60>
 8012540:	68b5      	ldr	r5, [r6, #8]
 8012542:	e7df      	b.n	8012504 <_vfiprintf_r+0x20>
 8012544:	4b79      	ldr	r3, [pc, #484]	; (801272c <_vfiprintf_r+0x248>)
 8012546:	429d      	cmp	r5, r3
 8012548:	bf08      	it	eq
 801254a:	68f5      	ldreq	r5, [r6, #12]
 801254c:	e7da      	b.n	8012504 <_vfiprintf_r+0x20>
 801254e:	89ab      	ldrh	r3, [r5, #12]
 8012550:	0598      	lsls	r0, r3, #22
 8012552:	d4ed      	bmi.n	8012530 <_vfiprintf_r+0x4c>
 8012554:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012556:	f7ff fdce 	bl	80120f6 <__retarget_lock_release_recursive>
 801255a:	e7e9      	b.n	8012530 <_vfiprintf_r+0x4c>
 801255c:	2300      	movs	r3, #0
 801255e:	9309      	str	r3, [sp, #36]	; 0x24
 8012560:	2320      	movs	r3, #32
 8012562:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012566:	f8cd 800c 	str.w	r8, [sp, #12]
 801256a:	2330      	movs	r3, #48	; 0x30
 801256c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8012730 <_vfiprintf_r+0x24c>
 8012570:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012574:	f04f 0901 	mov.w	r9, #1
 8012578:	4623      	mov	r3, r4
 801257a:	469a      	mov	sl, r3
 801257c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012580:	b10a      	cbz	r2, 8012586 <_vfiprintf_r+0xa2>
 8012582:	2a25      	cmp	r2, #37	; 0x25
 8012584:	d1f9      	bne.n	801257a <_vfiprintf_r+0x96>
 8012586:	ebba 0b04 	subs.w	fp, sl, r4
 801258a:	d00b      	beq.n	80125a4 <_vfiprintf_r+0xc0>
 801258c:	465b      	mov	r3, fp
 801258e:	4622      	mov	r2, r4
 8012590:	4629      	mov	r1, r5
 8012592:	4630      	mov	r0, r6
 8012594:	f7ff ff93 	bl	80124be <__sfputs_r>
 8012598:	3001      	adds	r0, #1
 801259a:	f000 80aa 	beq.w	80126f2 <_vfiprintf_r+0x20e>
 801259e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80125a0:	445a      	add	r2, fp
 80125a2:	9209      	str	r2, [sp, #36]	; 0x24
 80125a4:	f89a 3000 	ldrb.w	r3, [sl]
 80125a8:	2b00      	cmp	r3, #0
 80125aa:	f000 80a2 	beq.w	80126f2 <_vfiprintf_r+0x20e>
 80125ae:	2300      	movs	r3, #0
 80125b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80125b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80125b8:	f10a 0a01 	add.w	sl, sl, #1
 80125bc:	9304      	str	r3, [sp, #16]
 80125be:	9307      	str	r3, [sp, #28]
 80125c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80125c4:	931a      	str	r3, [sp, #104]	; 0x68
 80125c6:	4654      	mov	r4, sl
 80125c8:	2205      	movs	r2, #5
 80125ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80125ce:	4858      	ldr	r0, [pc, #352]	; (8012730 <_vfiprintf_r+0x24c>)
 80125d0:	f7ed fe16 	bl	8000200 <memchr>
 80125d4:	9a04      	ldr	r2, [sp, #16]
 80125d6:	b9d8      	cbnz	r0, 8012610 <_vfiprintf_r+0x12c>
 80125d8:	06d1      	lsls	r1, r2, #27
 80125da:	bf44      	itt	mi
 80125dc:	2320      	movmi	r3, #32
 80125de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80125e2:	0713      	lsls	r3, r2, #28
 80125e4:	bf44      	itt	mi
 80125e6:	232b      	movmi	r3, #43	; 0x2b
 80125e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80125ec:	f89a 3000 	ldrb.w	r3, [sl]
 80125f0:	2b2a      	cmp	r3, #42	; 0x2a
 80125f2:	d015      	beq.n	8012620 <_vfiprintf_r+0x13c>
 80125f4:	9a07      	ldr	r2, [sp, #28]
 80125f6:	4654      	mov	r4, sl
 80125f8:	2000      	movs	r0, #0
 80125fa:	f04f 0c0a 	mov.w	ip, #10
 80125fe:	4621      	mov	r1, r4
 8012600:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012604:	3b30      	subs	r3, #48	; 0x30
 8012606:	2b09      	cmp	r3, #9
 8012608:	d94e      	bls.n	80126a8 <_vfiprintf_r+0x1c4>
 801260a:	b1b0      	cbz	r0, 801263a <_vfiprintf_r+0x156>
 801260c:	9207      	str	r2, [sp, #28]
 801260e:	e014      	b.n	801263a <_vfiprintf_r+0x156>
 8012610:	eba0 0308 	sub.w	r3, r0, r8
 8012614:	fa09 f303 	lsl.w	r3, r9, r3
 8012618:	4313      	orrs	r3, r2
 801261a:	9304      	str	r3, [sp, #16]
 801261c:	46a2      	mov	sl, r4
 801261e:	e7d2      	b.n	80125c6 <_vfiprintf_r+0xe2>
 8012620:	9b03      	ldr	r3, [sp, #12]
 8012622:	1d19      	adds	r1, r3, #4
 8012624:	681b      	ldr	r3, [r3, #0]
 8012626:	9103      	str	r1, [sp, #12]
 8012628:	2b00      	cmp	r3, #0
 801262a:	bfbb      	ittet	lt
 801262c:	425b      	neglt	r3, r3
 801262e:	f042 0202 	orrlt.w	r2, r2, #2
 8012632:	9307      	strge	r3, [sp, #28]
 8012634:	9307      	strlt	r3, [sp, #28]
 8012636:	bfb8      	it	lt
 8012638:	9204      	strlt	r2, [sp, #16]
 801263a:	7823      	ldrb	r3, [r4, #0]
 801263c:	2b2e      	cmp	r3, #46	; 0x2e
 801263e:	d10c      	bne.n	801265a <_vfiprintf_r+0x176>
 8012640:	7863      	ldrb	r3, [r4, #1]
 8012642:	2b2a      	cmp	r3, #42	; 0x2a
 8012644:	d135      	bne.n	80126b2 <_vfiprintf_r+0x1ce>
 8012646:	9b03      	ldr	r3, [sp, #12]
 8012648:	1d1a      	adds	r2, r3, #4
 801264a:	681b      	ldr	r3, [r3, #0]
 801264c:	9203      	str	r2, [sp, #12]
 801264e:	2b00      	cmp	r3, #0
 8012650:	bfb8      	it	lt
 8012652:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8012656:	3402      	adds	r4, #2
 8012658:	9305      	str	r3, [sp, #20]
 801265a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8012740 <_vfiprintf_r+0x25c>
 801265e:	7821      	ldrb	r1, [r4, #0]
 8012660:	2203      	movs	r2, #3
 8012662:	4650      	mov	r0, sl
 8012664:	f7ed fdcc 	bl	8000200 <memchr>
 8012668:	b140      	cbz	r0, 801267c <_vfiprintf_r+0x198>
 801266a:	2340      	movs	r3, #64	; 0x40
 801266c:	eba0 000a 	sub.w	r0, r0, sl
 8012670:	fa03 f000 	lsl.w	r0, r3, r0
 8012674:	9b04      	ldr	r3, [sp, #16]
 8012676:	4303      	orrs	r3, r0
 8012678:	3401      	adds	r4, #1
 801267a:	9304      	str	r3, [sp, #16]
 801267c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012680:	482c      	ldr	r0, [pc, #176]	; (8012734 <_vfiprintf_r+0x250>)
 8012682:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012686:	2206      	movs	r2, #6
 8012688:	f7ed fdba 	bl	8000200 <memchr>
 801268c:	2800      	cmp	r0, #0
 801268e:	d03f      	beq.n	8012710 <_vfiprintf_r+0x22c>
 8012690:	4b29      	ldr	r3, [pc, #164]	; (8012738 <_vfiprintf_r+0x254>)
 8012692:	bb1b      	cbnz	r3, 80126dc <_vfiprintf_r+0x1f8>
 8012694:	9b03      	ldr	r3, [sp, #12]
 8012696:	3307      	adds	r3, #7
 8012698:	f023 0307 	bic.w	r3, r3, #7
 801269c:	3308      	adds	r3, #8
 801269e:	9303      	str	r3, [sp, #12]
 80126a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80126a2:	443b      	add	r3, r7
 80126a4:	9309      	str	r3, [sp, #36]	; 0x24
 80126a6:	e767      	b.n	8012578 <_vfiprintf_r+0x94>
 80126a8:	fb0c 3202 	mla	r2, ip, r2, r3
 80126ac:	460c      	mov	r4, r1
 80126ae:	2001      	movs	r0, #1
 80126b0:	e7a5      	b.n	80125fe <_vfiprintf_r+0x11a>
 80126b2:	2300      	movs	r3, #0
 80126b4:	3401      	adds	r4, #1
 80126b6:	9305      	str	r3, [sp, #20]
 80126b8:	4619      	mov	r1, r3
 80126ba:	f04f 0c0a 	mov.w	ip, #10
 80126be:	4620      	mov	r0, r4
 80126c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80126c4:	3a30      	subs	r2, #48	; 0x30
 80126c6:	2a09      	cmp	r2, #9
 80126c8:	d903      	bls.n	80126d2 <_vfiprintf_r+0x1ee>
 80126ca:	2b00      	cmp	r3, #0
 80126cc:	d0c5      	beq.n	801265a <_vfiprintf_r+0x176>
 80126ce:	9105      	str	r1, [sp, #20]
 80126d0:	e7c3      	b.n	801265a <_vfiprintf_r+0x176>
 80126d2:	fb0c 2101 	mla	r1, ip, r1, r2
 80126d6:	4604      	mov	r4, r0
 80126d8:	2301      	movs	r3, #1
 80126da:	e7f0      	b.n	80126be <_vfiprintf_r+0x1da>
 80126dc:	ab03      	add	r3, sp, #12
 80126de:	9300      	str	r3, [sp, #0]
 80126e0:	462a      	mov	r2, r5
 80126e2:	4b16      	ldr	r3, [pc, #88]	; (801273c <_vfiprintf_r+0x258>)
 80126e4:	a904      	add	r1, sp, #16
 80126e6:	4630      	mov	r0, r6
 80126e8:	f3af 8000 	nop.w
 80126ec:	4607      	mov	r7, r0
 80126ee:	1c78      	adds	r0, r7, #1
 80126f0:	d1d6      	bne.n	80126a0 <_vfiprintf_r+0x1bc>
 80126f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80126f4:	07d9      	lsls	r1, r3, #31
 80126f6:	d405      	bmi.n	8012704 <_vfiprintf_r+0x220>
 80126f8:	89ab      	ldrh	r3, [r5, #12]
 80126fa:	059a      	lsls	r2, r3, #22
 80126fc:	d402      	bmi.n	8012704 <_vfiprintf_r+0x220>
 80126fe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012700:	f7ff fcf9 	bl	80120f6 <__retarget_lock_release_recursive>
 8012704:	89ab      	ldrh	r3, [r5, #12]
 8012706:	065b      	lsls	r3, r3, #25
 8012708:	f53f af12 	bmi.w	8012530 <_vfiprintf_r+0x4c>
 801270c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801270e:	e711      	b.n	8012534 <_vfiprintf_r+0x50>
 8012710:	ab03      	add	r3, sp, #12
 8012712:	9300      	str	r3, [sp, #0]
 8012714:	462a      	mov	r2, r5
 8012716:	4b09      	ldr	r3, [pc, #36]	; (801273c <_vfiprintf_r+0x258>)
 8012718:	a904      	add	r1, sp, #16
 801271a:	4630      	mov	r0, r6
 801271c:	f000 f880 	bl	8012820 <_printf_i>
 8012720:	e7e4      	b.n	80126ec <_vfiprintf_r+0x208>
 8012722:	bf00      	nop
 8012724:	08017a1c 	.word	0x08017a1c
 8012728:	08017a3c 	.word	0x08017a3c
 801272c:	080179fc 	.word	0x080179fc
 8012730:	08017a5c 	.word	0x08017a5c
 8012734:	08017a66 	.word	0x08017a66
 8012738:	00000000 	.word	0x00000000
 801273c:	080124bf 	.word	0x080124bf
 8012740:	08017a62 	.word	0x08017a62

08012744 <_printf_common>:
 8012744:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012748:	4616      	mov	r6, r2
 801274a:	4699      	mov	r9, r3
 801274c:	688a      	ldr	r2, [r1, #8]
 801274e:	690b      	ldr	r3, [r1, #16]
 8012750:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012754:	4293      	cmp	r3, r2
 8012756:	bfb8      	it	lt
 8012758:	4613      	movlt	r3, r2
 801275a:	6033      	str	r3, [r6, #0]
 801275c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012760:	4607      	mov	r7, r0
 8012762:	460c      	mov	r4, r1
 8012764:	b10a      	cbz	r2, 801276a <_printf_common+0x26>
 8012766:	3301      	adds	r3, #1
 8012768:	6033      	str	r3, [r6, #0]
 801276a:	6823      	ldr	r3, [r4, #0]
 801276c:	0699      	lsls	r1, r3, #26
 801276e:	bf42      	ittt	mi
 8012770:	6833      	ldrmi	r3, [r6, #0]
 8012772:	3302      	addmi	r3, #2
 8012774:	6033      	strmi	r3, [r6, #0]
 8012776:	6825      	ldr	r5, [r4, #0]
 8012778:	f015 0506 	ands.w	r5, r5, #6
 801277c:	d106      	bne.n	801278c <_printf_common+0x48>
 801277e:	f104 0a19 	add.w	sl, r4, #25
 8012782:	68e3      	ldr	r3, [r4, #12]
 8012784:	6832      	ldr	r2, [r6, #0]
 8012786:	1a9b      	subs	r3, r3, r2
 8012788:	42ab      	cmp	r3, r5
 801278a:	dc26      	bgt.n	80127da <_printf_common+0x96>
 801278c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8012790:	1e13      	subs	r3, r2, #0
 8012792:	6822      	ldr	r2, [r4, #0]
 8012794:	bf18      	it	ne
 8012796:	2301      	movne	r3, #1
 8012798:	0692      	lsls	r2, r2, #26
 801279a:	d42b      	bmi.n	80127f4 <_printf_common+0xb0>
 801279c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80127a0:	4649      	mov	r1, r9
 80127a2:	4638      	mov	r0, r7
 80127a4:	47c0      	blx	r8
 80127a6:	3001      	adds	r0, #1
 80127a8:	d01e      	beq.n	80127e8 <_printf_common+0xa4>
 80127aa:	6823      	ldr	r3, [r4, #0]
 80127ac:	68e5      	ldr	r5, [r4, #12]
 80127ae:	6832      	ldr	r2, [r6, #0]
 80127b0:	f003 0306 	and.w	r3, r3, #6
 80127b4:	2b04      	cmp	r3, #4
 80127b6:	bf08      	it	eq
 80127b8:	1aad      	subeq	r5, r5, r2
 80127ba:	68a3      	ldr	r3, [r4, #8]
 80127bc:	6922      	ldr	r2, [r4, #16]
 80127be:	bf0c      	ite	eq
 80127c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80127c4:	2500      	movne	r5, #0
 80127c6:	4293      	cmp	r3, r2
 80127c8:	bfc4      	itt	gt
 80127ca:	1a9b      	subgt	r3, r3, r2
 80127cc:	18ed      	addgt	r5, r5, r3
 80127ce:	2600      	movs	r6, #0
 80127d0:	341a      	adds	r4, #26
 80127d2:	42b5      	cmp	r5, r6
 80127d4:	d11a      	bne.n	801280c <_printf_common+0xc8>
 80127d6:	2000      	movs	r0, #0
 80127d8:	e008      	b.n	80127ec <_printf_common+0xa8>
 80127da:	2301      	movs	r3, #1
 80127dc:	4652      	mov	r2, sl
 80127de:	4649      	mov	r1, r9
 80127e0:	4638      	mov	r0, r7
 80127e2:	47c0      	blx	r8
 80127e4:	3001      	adds	r0, #1
 80127e6:	d103      	bne.n	80127f0 <_printf_common+0xac>
 80127e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80127ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80127f0:	3501      	adds	r5, #1
 80127f2:	e7c6      	b.n	8012782 <_printf_common+0x3e>
 80127f4:	18e1      	adds	r1, r4, r3
 80127f6:	1c5a      	adds	r2, r3, #1
 80127f8:	2030      	movs	r0, #48	; 0x30
 80127fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80127fe:	4422      	add	r2, r4
 8012800:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012804:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012808:	3302      	adds	r3, #2
 801280a:	e7c7      	b.n	801279c <_printf_common+0x58>
 801280c:	2301      	movs	r3, #1
 801280e:	4622      	mov	r2, r4
 8012810:	4649      	mov	r1, r9
 8012812:	4638      	mov	r0, r7
 8012814:	47c0      	blx	r8
 8012816:	3001      	adds	r0, #1
 8012818:	d0e6      	beq.n	80127e8 <_printf_common+0xa4>
 801281a:	3601      	adds	r6, #1
 801281c:	e7d9      	b.n	80127d2 <_printf_common+0x8e>
	...

08012820 <_printf_i>:
 8012820:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012824:	460c      	mov	r4, r1
 8012826:	4691      	mov	r9, r2
 8012828:	7e27      	ldrb	r7, [r4, #24]
 801282a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801282c:	2f78      	cmp	r7, #120	; 0x78
 801282e:	4680      	mov	r8, r0
 8012830:	469a      	mov	sl, r3
 8012832:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012836:	d807      	bhi.n	8012848 <_printf_i+0x28>
 8012838:	2f62      	cmp	r7, #98	; 0x62
 801283a:	d80a      	bhi.n	8012852 <_printf_i+0x32>
 801283c:	2f00      	cmp	r7, #0
 801283e:	f000 80d8 	beq.w	80129f2 <_printf_i+0x1d2>
 8012842:	2f58      	cmp	r7, #88	; 0x58
 8012844:	f000 80a3 	beq.w	801298e <_printf_i+0x16e>
 8012848:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801284c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012850:	e03a      	b.n	80128c8 <_printf_i+0xa8>
 8012852:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8012856:	2b15      	cmp	r3, #21
 8012858:	d8f6      	bhi.n	8012848 <_printf_i+0x28>
 801285a:	a001      	add	r0, pc, #4	; (adr r0, 8012860 <_printf_i+0x40>)
 801285c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8012860:	080128b9 	.word	0x080128b9
 8012864:	080128cd 	.word	0x080128cd
 8012868:	08012849 	.word	0x08012849
 801286c:	08012849 	.word	0x08012849
 8012870:	08012849 	.word	0x08012849
 8012874:	08012849 	.word	0x08012849
 8012878:	080128cd 	.word	0x080128cd
 801287c:	08012849 	.word	0x08012849
 8012880:	08012849 	.word	0x08012849
 8012884:	08012849 	.word	0x08012849
 8012888:	08012849 	.word	0x08012849
 801288c:	080129d9 	.word	0x080129d9
 8012890:	080128fd 	.word	0x080128fd
 8012894:	080129bb 	.word	0x080129bb
 8012898:	08012849 	.word	0x08012849
 801289c:	08012849 	.word	0x08012849
 80128a0:	080129fb 	.word	0x080129fb
 80128a4:	08012849 	.word	0x08012849
 80128a8:	080128fd 	.word	0x080128fd
 80128ac:	08012849 	.word	0x08012849
 80128b0:	08012849 	.word	0x08012849
 80128b4:	080129c3 	.word	0x080129c3
 80128b8:	680b      	ldr	r3, [r1, #0]
 80128ba:	1d1a      	adds	r2, r3, #4
 80128bc:	681b      	ldr	r3, [r3, #0]
 80128be:	600a      	str	r2, [r1, #0]
 80128c0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80128c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80128c8:	2301      	movs	r3, #1
 80128ca:	e0a3      	b.n	8012a14 <_printf_i+0x1f4>
 80128cc:	6825      	ldr	r5, [r4, #0]
 80128ce:	6808      	ldr	r0, [r1, #0]
 80128d0:	062e      	lsls	r6, r5, #24
 80128d2:	f100 0304 	add.w	r3, r0, #4
 80128d6:	d50a      	bpl.n	80128ee <_printf_i+0xce>
 80128d8:	6805      	ldr	r5, [r0, #0]
 80128da:	600b      	str	r3, [r1, #0]
 80128dc:	2d00      	cmp	r5, #0
 80128de:	da03      	bge.n	80128e8 <_printf_i+0xc8>
 80128e0:	232d      	movs	r3, #45	; 0x2d
 80128e2:	426d      	negs	r5, r5
 80128e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80128e8:	485e      	ldr	r0, [pc, #376]	; (8012a64 <_printf_i+0x244>)
 80128ea:	230a      	movs	r3, #10
 80128ec:	e019      	b.n	8012922 <_printf_i+0x102>
 80128ee:	f015 0f40 	tst.w	r5, #64	; 0x40
 80128f2:	6805      	ldr	r5, [r0, #0]
 80128f4:	600b      	str	r3, [r1, #0]
 80128f6:	bf18      	it	ne
 80128f8:	b22d      	sxthne	r5, r5
 80128fa:	e7ef      	b.n	80128dc <_printf_i+0xbc>
 80128fc:	680b      	ldr	r3, [r1, #0]
 80128fe:	6825      	ldr	r5, [r4, #0]
 8012900:	1d18      	adds	r0, r3, #4
 8012902:	6008      	str	r0, [r1, #0]
 8012904:	0628      	lsls	r0, r5, #24
 8012906:	d501      	bpl.n	801290c <_printf_i+0xec>
 8012908:	681d      	ldr	r5, [r3, #0]
 801290a:	e002      	b.n	8012912 <_printf_i+0xf2>
 801290c:	0669      	lsls	r1, r5, #25
 801290e:	d5fb      	bpl.n	8012908 <_printf_i+0xe8>
 8012910:	881d      	ldrh	r5, [r3, #0]
 8012912:	4854      	ldr	r0, [pc, #336]	; (8012a64 <_printf_i+0x244>)
 8012914:	2f6f      	cmp	r7, #111	; 0x6f
 8012916:	bf0c      	ite	eq
 8012918:	2308      	moveq	r3, #8
 801291a:	230a      	movne	r3, #10
 801291c:	2100      	movs	r1, #0
 801291e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012922:	6866      	ldr	r6, [r4, #4]
 8012924:	60a6      	str	r6, [r4, #8]
 8012926:	2e00      	cmp	r6, #0
 8012928:	bfa2      	ittt	ge
 801292a:	6821      	ldrge	r1, [r4, #0]
 801292c:	f021 0104 	bicge.w	r1, r1, #4
 8012930:	6021      	strge	r1, [r4, #0]
 8012932:	b90d      	cbnz	r5, 8012938 <_printf_i+0x118>
 8012934:	2e00      	cmp	r6, #0
 8012936:	d04d      	beq.n	80129d4 <_printf_i+0x1b4>
 8012938:	4616      	mov	r6, r2
 801293a:	fbb5 f1f3 	udiv	r1, r5, r3
 801293e:	fb03 5711 	mls	r7, r3, r1, r5
 8012942:	5dc7      	ldrb	r7, [r0, r7]
 8012944:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8012948:	462f      	mov	r7, r5
 801294a:	42bb      	cmp	r3, r7
 801294c:	460d      	mov	r5, r1
 801294e:	d9f4      	bls.n	801293a <_printf_i+0x11a>
 8012950:	2b08      	cmp	r3, #8
 8012952:	d10b      	bne.n	801296c <_printf_i+0x14c>
 8012954:	6823      	ldr	r3, [r4, #0]
 8012956:	07df      	lsls	r7, r3, #31
 8012958:	d508      	bpl.n	801296c <_printf_i+0x14c>
 801295a:	6923      	ldr	r3, [r4, #16]
 801295c:	6861      	ldr	r1, [r4, #4]
 801295e:	4299      	cmp	r1, r3
 8012960:	bfde      	ittt	le
 8012962:	2330      	movle	r3, #48	; 0x30
 8012964:	f806 3c01 	strble.w	r3, [r6, #-1]
 8012968:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 801296c:	1b92      	subs	r2, r2, r6
 801296e:	6122      	str	r2, [r4, #16]
 8012970:	f8cd a000 	str.w	sl, [sp]
 8012974:	464b      	mov	r3, r9
 8012976:	aa03      	add	r2, sp, #12
 8012978:	4621      	mov	r1, r4
 801297a:	4640      	mov	r0, r8
 801297c:	f7ff fee2 	bl	8012744 <_printf_common>
 8012980:	3001      	adds	r0, #1
 8012982:	d14c      	bne.n	8012a1e <_printf_i+0x1fe>
 8012984:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012988:	b004      	add	sp, #16
 801298a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801298e:	4835      	ldr	r0, [pc, #212]	; (8012a64 <_printf_i+0x244>)
 8012990:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8012994:	6823      	ldr	r3, [r4, #0]
 8012996:	680e      	ldr	r6, [r1, #0]
 8012998:	061f      	lsls	r7, r3, #24
 801299a:	f856 5b04 	ldr.w	r5, [r6], #4
 801299e:	600e      	str	r6, [r1, #0]
 80129a0:	d514      	bpl.n	80129cc <_printf_i+0x1ac>
 80129a2:	07d9      	lsls	r1, r3, #31
 80129a4:	bf44      	itt	mi
 80129a6:	f043 0320 	orrmi.w	r3, r3, #32
 80129aa:	6023      	strmi	r3, [r4, #0]
 80129ac:	b91d      	cbnz	r5, 80129b6 <_printf_i+0x196>
 80129ae:	6823      	ldr	r3, [r4, #0]
 80129b0:	f023 0320 	bic.w	r3, r3, #32
 80129b4:	6023      	str	r3, [r4, #0]
 80129b6:	2310      	movs	r3, #16
 80129b8:	e7b0      	b.n	801291c <_printf_i+0xfc>
 80129ba:	6823      	ldr	r3, [r4, #0]
 80129bc:	f043 0320 	orr.w	r3, r3, #32
 80129c0:	6023      	str	r3, [r4, #0]
 80129c2:	2378      	movs	r3, #120	; 0x78
 80129c4:	4828      	ldr	r0, [pc, #160]	; (8012a68 <_printf_i+0x248>)
 80129c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80129ca:	e7e3      	b.n	8012994 <_printf_i+0x174>
 80129cc:	065e      	lsls	r6, r3, #25
 80129ce:	bf48      	it	mi
 80129d0:	b2ad      	uxthmi	r5, r5
 80129d2:	e7e6      	b.n	80129a2 <_printf_i+0x182>
 80129d4:	4616      	mov	r6, r2
 80129d6:	e7bb      	b.n	8012950 <_printf_i+0x130>
 80129d8:	680b      	ldr	r3, [r1, #0]
 80129da:	6826      	ldr	r6, [r4, #0]
 80129dc:	6960      	ldr	r0, [r4, #20]
 80129de:	1d1d      	adds	r5, r3, #4
 80129e0:	600d      	str	r5, [r1, #0]
 80129e2:	0635      	lsls	r5, r6, #24
 80129e4:	681b      	ldr	r3, [r3, #0]
 80129e6:	d501      	bpl.n	80129ec <_printf_i+0x1cc>
 80129e8:	6018      	str	r0, [r3, #0]
 80129ea:	e002      	b.n	80129f2 <_printf_i+0x1d2>
 80129ec:	0671      	lsls	r1, r6, #25
 80129ee:	d5fb      	bpl.n	80129e8 <_printf_i+0x1c8>
 80129f0:	8018      	strh	r0, [r3, #0]
 80129f2:	2300      	movs	r3, #0
 80129f4:	6123      	str	r3, [r4, #16]
 80129f6:	4616      	mov	r6, r2
 80129f8:	e7ba      	b.n	8012970 <_printf_i+0x150>
 80129fa:	680b      	ldr	r3, [r1, #0]
 80129fc:	1d1a      	adds	r2, r3, #4
 80129fe:	600a      	str	r2, [r1, #0]
 8012a00:	681e      	ldr	r6, [r3, #0]
 8012a02:	6862      	ldr	r2, [r4, #4]
 8012a04:	2100      	movs	r1, #0
 8012a06:	4630      	mov	r0, r6
 8012a08:	f7ed fbfa 	bl	8000200 <memchr>
 8012a0c:	b108      	cbz	r0, 8012a12 <_printf_i+0x1f2>
 8012a0e:	1b80      	subs	r0, r0, r6
 8012a10:	6060      	str	r0, [r4, #4]
 8012a12:	6863      	ldr	r3, [r4, #4]
 8012a14:	6123      	str	r3, [r4, #16]
 8012a16:	2300      	movs	r3, #0
 8012a18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012a1c:	e7a8      	b.n	8012970 <_printf_i+0x150>
 8012a1e:	6923      	ldr	r3, [r4, #16]
 8012a20:	4632      	mov	r2, r6
 8012a22:	4649      	mov	r1, r9
 8012a24:	4640      	mov	r0, r8
 8012a26:	47d0      	blx	sl
 8012a28:	3001      	adds	r0, #1
 8012a2a:	d0ab      	beq.n	8012984 <_printf_i+0x164>
 8012a2c:	6823      	ldr	r3, [r4, #0]
 8012a2e:	079b      	lsls	r3, r3, #30
 8012a30:	d413      	bmi.n	8012a5a <_printf_i+0x23a>
 8012a32:	68e0      	ldr	r0, [r4, #12]
 8012a34:	9b03      	ldr	r3, [sp, #12]
 8012a36:	4298      	cmp	r0, r3
 8012a38:	bfb8      	it	lt
 8012a3a:	4618      	movlt	r0, r3
 8012a3c:	e7a4      	b.n	8012988 <_printf_i+0x168>
 8012a3e:	2301      	movs	r3, #1
 8012a40:	4632      	mov	r2, r6
 8012a42:	4649      	mov	r1, r9
 8012a44:	4640      	mov	r0, r8
 8012a46:	47d0      	blx	sl
 8012a48:	3001      	adds	r0, #1
 8012a4a:	d09b      	beq.n	8012984 <_printf_i+0x164>
 8012a4c:	3501      	adds	r5, #1
 8012a4e:	68e3      	ldr	r3, [r4, #12]
 8012a50:	9903      	ldr	r1, [sp, #12]
 8012a52:	1a5b      	subs	r3, r3, r1
 8012a54:	42ab      	cmp	r3, r5
 8012a56:	dcf2      	bgt.n	8012a3e <_printf_i+0x21e>
 8012a58:	e7eb      	b.n	8012a32 <_printf_i+0x212>
 8012a5a:	2500      	movs	r5, #0
 8012a5c:	f104 0619 	add.w	r6, r4, #25
 8012a60:	e7f5      	b.n	8012a4e <_printf_i+0x22e>
 8012a62:	bf00      	nop
 8012a64:	08017a6d 	.word	0x08017a6d
 8012a68:	08017a7e 	.word	0x08017a7e

08012a6c <__sread>:
 8012a6c:	b510      	push	{r4, lr}
 8012a6e:	460c      	mov	r4, r1
 8012a70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012a74:	f000 f8c2 	bl	8012bfc <_read_r>
 8012a78:	2800      	cmp	r0, #0
 8012a7a:	bfab      	itete	ge
 8012a7c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012a7e:	89a3      	ldrhlt	r3, [r4, #12]
 8012a80:	181b      	addge	r3, r3, r0
 8012a82:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012a86:	bfac      	ite	ge
 8012a88:	6563      	strge	r3, [r4, #84]	; 0x54
 8012a8a:	81a3      	strhlt	r3, [r4, #12]
 8012a8c:	bd10      	pop	{r4, pc}

08012a8e <__swrite>:
 8012a8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012a92:	461f      	mov	r7, r3
 8012a94:	898b      	ldrh	r3, [r1, #12]
 8012a96:	05db      	lsls	r3, r3, #23
 8012a98:	4605      	mov	r5, r0
 8012a9a:	460c      	mov	r4, r1
 8012a9c:	4616      	mov	r6, r2
 8012a9e:	d505      	bpl.n	8012aac <__swrite+0x1e>
 8012aa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012aa4:	2302      	movs	r3, #2
 8012aa6:	2200      	movs	r2, #0
 8012aa8:	f000 f870 	bl	8012b8c <_lseek_r>
 8012aac:	89a3      	ldrh	r3, [r4, #12]
 8012aae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012ab2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012ab6:	81a3      	strh	r3, [r4, #12]
 8012ab8:	4632      	mov	r2, r6
 8012aba:	463b      	mov	r3, r7
 8012abc:	4628      	mov	r0, r5
 8012abe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012ac2:	f000 b817 	b.w	8012af4 <_write_r>

08012ac6 <__sseek>:
 8012ac6:	b510      	push	{r4, lr}
 8012ac8:	460c      	mov	r4, r1
 8012aca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012ace:	f000 f85d 	bl	8012b8c <_lseek_r>
 8012ad2:	1c43      	adds	r3, r0, #1
 8012ad4:	89a3      	ldrh	r3, [r4, #12]
 8012ad6:	bf15      	itete	ne
 8012ad8:	6560      	strne	r0, [r4, #84]	; 0x54
 8012ada:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012ade:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012ae2:	81a3      	strheq	r3, [r4, #12]
 8012ae4:	bf18      	it	ne
 8012ae6:	81a3      	strhne	r3, [r4, #12]
 8012ae8:	bd10      	pop	{r4, pc}

08012aea <__sclose>:
 8012aea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012aee:	f000 b81b 	b.w	8012b28 <_close_r>
	...

08012af4 <_write_r>:
 8012af4:	b538      	push	{r3, r4, r5, lr}
 8012af6:	4d07      	ldr	r5, [pc, #28]	; (8012b14 <_write_r+0x20>)
 8012af8:	4604      	mov	r4, r0
 8012afa:	4608      	mov	r0, r1
 8012afc:	4611      	mov	r1, r2
 8012afe:	2200      	movs	r2, #0
 8012b00:	602a      	str	r2, [r5, #0]
 8012b02:	461a      	mov	r2, r3
 8012b04:	f7ee faa6 	bl	8001054 <_write>
 8012b08:	1c43      	adds	r3, r0, #1
 8012b0a:	d102      	bne.n	8012b12 <_write_r+0x1e>
 8012b0c:	682b      	ldr	r3, [r5, #0]
 8012b0e:	b103      	cbz	r3, 8012b12 <_write_r+0x1e>
 8012b10:	6023      	str	r3, [r4, #0]
 8012b12:	bd38      	pop	{r3, r4, r5, pc}
 8012b14:	2000d7a4 	.word	0x2000d7a4

08012b18 <abort>:
 8012b18:	b508      	push	{r3, lr}
 8012b1a:	2006      	movs	r0, #6
 8012b1c:	f000 f8a8 	bl	8012c70 <raise>
 8012b20:	2001      	movs	r0, #1
 8012b22:	f7ee ff71 	bl	8001a08 <_exit>
	...

08012b28 <_close_r>:
 8012b28:	b538      	push	{r3, r4, r5, lr}
 8012b2a:	4d06      	ldr	r5, [pc, #24]	; (8012b44 <_close_r+0x1c>)
 8012b2c:	2300      	movs	r3, #0
 8012b2e:	4604      	mov	r4, r0
 8012b30:	4608      	mov	r0, r1
 8012b32:	602b      	str	r3, [r5, #0]
 8012b34:	f7ee ff8f 	bl	8001a56 <_close>
 8012b38:	1c43      	adds	r3, r0, #1
 8012b3a:	d102      	bne.n	8012b42 <_close_r+0x1a>
 8012b3c:	682b      	ldr	r3, [r5, #0]
 8012b3e:	b103      	cbz	r3, 8012b42 <_close_r+0x1a>
 8012b40:	6023      	str	r3, [r4, #0]
 8012b42:	bd38      	pop	{r3, r4, r5, pc}
 8012b44:	2000d7a4 	.word	0x2000d7a4

08012b48 <_fstat_r>:
 8012b48:	b538      	push	{r3, r4, r5, lr}
 8012b4a:	4d07      	ldr	r5, [pc, #28]	; (8012b68 <_fstat_r+0x20>)
 8012b4c:	2300      	movs	r3, #0
 8012b4e:	4604      	mov	r4, r0
 8012b50:	4608      	mov	r0, r1
 8012b52:	4611      	mov	r1, r2
 8012b54:	602b      	str	r3, [r5, #0]
 8012b56:	f7ee ff8a 	bl	8001a6e <_fstat>
 8012b5a:	1c43      	adds	r3, r0, #1
 8012b5c:	d102      	bne.n	8012b64 <_fstat_r+0x1c>
 8012b5e:	682b      	ldr	r3, [r5, #0]
 8012b60:	b103      	cbz	r3, 8012b64 <_fstat_r+0x1c>
 8012b62:	6023      	str	r3, [r4, #0]
 8012b64:	bd38      	pop	{r3, r4, r5, pc}
 8012b66:	bf00      	nop
 8012b68:	2000d7a4 	.word	0x2000d7a4

08012b6c <_isatty_r>:
 8012b6c:	b538      	push	{r3, r4, r5, lr}
 8012b6e:	4d06      	ldr	r5, [pc, #24]	; (8012b88 <_isatty_r+0x1c>)
 8012b70:	2300      	movs	r3, #0
 8012b72:	4604      	mov	r4, r0
 8012b74:	4608      	mov	r0, r1
 8012b76:	602b      	str	r3, [r5, #0]
 8012b78:	f7ee ff89 	bl	8001a8e <_isatty>
 8012b7c:	1c43      	adds	r3, r0, #1
 8012b7e:	d102      	bne.n	8012b86 <_isatty_r+0x1a>
 8012b80:	682b      	ldr	r3, [r5, #0]
 8012b82:	b103      	cbz	r3, 8012b86 <_isatty_r+0x1a>
 8012b84:	6023      	str	r3, [r4, #0]
 8012b86:	bd38      	pop	{r3, r4, r5, pc}
 8012b88:	2000d7a4 	.word	0x2000d7a4

08012b8c <_lseek_r>:
 8012b8c:	b538      	push	{r3, r4, r5, lr}
 8012b8e:	4d07      	ldr	r5, [pc, #28]	; (8012bac <_lseek_r+0x20>)
 8012b90:	4604      	mov	r4, r0
 8012b92:	4608      	mov	r0, r1
 8012b94:	4611      	mov	r1, r2
 8012b96:	2200      	movs	r2, #0
 8012b98:	602a      	str	r2, [r5, #0]
 8012b9a:	461a      	mov	r2, r3
 8012b9c:	f7ee ff82 	bl	8001aa4 <_lseek>
 8012ba0:	1c43      	adds	r3, r0, #1
 8012ba2:	d102      	bne.n	8012baa <_lseek_r+0x1e>
 8012ba4:	682b      	ldr	r3, [r5, #0]
 8012ba6:	b103      	cbz	r3, 8012baa <_lseek_r+0x1e>
 8012ba8:	6023      	str	r3, [r4, #0]
 8012baa:	bd38      	pop	{r3, r4, r5, pc}
 8012bac:	2000d7a4 	.word	0x2000d7a4

08012bb0 <_realloc_r>:
 8012bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012bb2:	4607      	mov	r7, r0
 8012bb4:	4614      	mov	r4, r2
 8012bb6:	460e      	mov	r6, r1
 8012bb8:	b921      	cbnz	r1, 8012bc4 <_realloc_r+0x14>
 8012bba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8012bbe:	4611      	mov	r1, r2
 8012bc0:	f7fe bd44 	b.w	801164c <_malloc_r>
 8012bc4:	b922      	cbnz	r2, 8012bd0 <_realloc_r+0x20>
 8012bc6:	f7fe fcf1 	bl	80115ac <_free_r>
 8012bca:	4625      	mov	r5, r4
 8012bcc:	4628      	mov	r0, r5
 8012bce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012bd0:	f000 f86a 	bl	8012ca8 <_malloc_usable_size_r>
 8012bd4:	42a0      	cmp	r0, r4
 8012bd6:	d20f      	bcs.n	8012bf8 <_realloc_r+0x48>
 8012bd8:	4621      	mov	r1, r4
 8012bda:	4638      	mov	r0, r7
 8012bdc:	f7fe fd36 	bl	801164c <_malloc_r>
 8012be0:	4605      	mov	r5, r0
 8012be2:	2800      	cmp	r0, #0
 8012be4:	d0f2      	beq.n	8012bcc <_realloc_r+0x1c>
 8012be6:	4631      	mov	r1, r6
 8012be8:	4622      	mov	r2, r4
 8012bea:	f7fe fcaf 	bl	801154c <memcpy>
 8012bee:	4631      	mov	r1, r6
 8012bf0:	4638      	mov	r0, r7
 8012bf2:	f7fe fcdb 	bl	80115ac <_free_r>
 8012bf6:	e7e9      	b.n	8012bcc <_realloc_r+0x1c>
 8012bf8:	4635      	mov	r5, r6
 8012bfa:	e7e7      	b.n	8012bcc <_realloc_r+0x1c>

08012bfc <_read_r>:
 8012bfc:	b538      	push	{r3, r4, r5, lr}
 8012bfe:	4d07      	ldr	r5, [pc, #28]	; (8012c1c <_read_r+0x20>)
 8012c00:	4604      	mov	r4, r0
 8012c02:	4608      	mov	r0, r1
 8012c04:	4611      	mov	r1, r2
 8012c06:	2200      	movs	r2, #0
 8012c08:	602a      	str	r2, [r5, #0]
 8012c0a:	461a      	mov	r2, r3
 8012c0c:	f7ee ff06 	bl	8001a1c <_read>
 8012c10:	1c43      	adds	r3, r0, #1
 8012c12:	d102      	bne.n	8012c1a <_read_r+0x1e>
 8012c14:	682b      	ldr	r3, [r5, #0]
 8012c16:	b103      	cbz	r3, 8012c1a <_read_r+0x1e>
 8012c18:	6023      	str	r3, [r4, #0]
 8012c1a:	bd38      	pop	{r3, r4, r5, pc}
 8012c1c:	2000d7a4 	.word	0x2000d7a4

08012c20 <_raise_r>:
 8012c20:	291f      	cmp	r1, #31
 8012c22:	b538      	push	{r3, r4, r5, lr}
 8012c24:	4604      	mov	r4, r0
 8012c26:	460d      	mov	r5, r1
 8012c28:	d904      	bls.n	8012c34 <_raise_r+0x14>
 8012c2a:	2316      	movs	r3, #22
 8012c2c:	6003      	str	r3, [r0, #0]
 8012c2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012c32:	bd38      	pop	{r3, r4, r5, pc}
 8012c34:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8012c36:	b112      	cbz	r2, 8012c3e <_raise_r+0x1e>
 8012c38:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012c3c:	b94b      	cbnz	r3, 8012c52 <_raise_r+0x32>
 8012c3e:	4620      	mov	r0, r4
 8012c40:	f000 f830 	bl	8012ca4 <_getpid_r>
 8012c44:	462a      	mov	r2, r5
 8012c46:	4601      	mov	r1, r0
 8012c48:	4620      	mov	r0, r4
 8012c4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012c4e:	f000 b817 	b.w	8012c80 <_kill_r>
 8012c52:	2b01      	cmp	r3, #1
 8012c54:	d00a      	beq.n	8012c6c <_raise_r+0x4c>
 8012c56:	1c59      	adds	r1, r3, #1
 8012c58:	d103      	bne.n	8012c62 <_raise_r+0x42>
 8012c5a:	2316      	movs	r3, #22
 8012c5c:	6003      	str	r3, [r0, #0]
 8012c5e:	2001      	movs	r0, #1
 8012c60:	e7e7      	b.n	8012c32 <_raise_r+0x12>
 8012c62:	2400      	movs	r4, #0
 8012c64:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012c68:	4628      	mov	r0, r5
 8012c6a:	4798      	blx	r3
 8012c6c:	2000      	movs	r0, #0
 8012c6e:	e7e0      	b.n	8012c32 <_raise_r+0x12>

08012c70 <raise>:
 8012c70:	4b02      	ldr	r3, [pc, #8]	; (8012c7c <raise+0xc>)
 8012c72:	4601      	mov	r1, r0
 8012c74:	6818      	ldr	r0, [r3, #0]
 8012c76:	f7ff bfd3 	b.w	8012c20 <_raise_r>
 8012c7a:	bf00      	nop
 8012c7c:	20000028 	.word	0x20000028

08012c80 <_kill_r>:
 8012c80:	b538      	push	{r3, r4, r5, lr}
 8012c82:	4d07      	ldr	r5, [pc, #28]	; (8012ca0 <_kill_r+0x20>)
 8012c84:	2300      	movs	r3, #0
 8012c86:	4604      	mov	r4, r0
 8012c88:	4608      	mov	r0, r1
 8012c8a:	4611      	mov	r1, r2
 8012c8c:	602b      	str	r3, [r5, #0]
 8012c8e:	f7ee fea9 	bl	80019e4 <_kill>
 8012c92:	1c43      	adds	r3, r0, #1
 8012c94:	d102      	bne.n	8012c9c <_kill_r+0x1c>
 8012c96:	682b      	ldr	r3, [r5, #0]
 8012c98:	b103      	cbz	r3, 8012c9c <_kill_r+0x1c>
 8012c9a:	6023      	str	r3, [r4, #0]
 8012c9c:	bd38      	pop	{r3, r4, r5, pc}
 8012c9e:	bf00      	nop
 8012ca0:	2000d7a4 	.word	0x2000d7a4

08012ca4 <_getpid_r>:
 8012ca4:	f7ee be96 	b.w	80019d4 <_getpid>

08012ca8 <_malloc_usable_size_r>:
 8012ca8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012cac:	1f18      	subs	r0, r3, #4
 8012cae:	2b00      	cmp	r3, #0
 8012cb0:	bfbc      	itt	lt
 8012cb2:	580b      	ldrlt	r3, [r1, r0]
 8012cb4:	18c0      	addlt	r0, r0, r3
 8012cb6:	4770      	bx	lr

08012cb8 <_init>:
 8012cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012cba:	bf00      	nop
 8012cbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012cbe:	bc08      	pop	{r3}
 8012cc0:	469e      	mov	lr, r3
 8012cc2:	4770      	bx	lr

08012cc4 <_fini>:
 8012cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012cc6:	bf00      	nop
 8012cc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012cca:	bc08      	pop	{r3}
 8012ccc:	469e      	mov	lr, r3
 8012cce:	4770      	bx	lr
