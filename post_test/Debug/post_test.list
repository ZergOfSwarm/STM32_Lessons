
post_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012890  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005650  08012a20  08012a20  00022a20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018070  08018070  00030094  2**0
                  CONTENTS
  4 .ARM          00000008  08018070  08018070  00028070  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018078  08018078  00030094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08018078  08018078  00028078  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801807c  0801807c  0002807c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08018080  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030094  2**0
                  CONTENTS
 10 .bss          0000d378  20000094  20000094  00030094  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000d40c  2000d40c  00030094  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030094  2**0
                  CONTENTS, READONLY
 13 .debug_info   00031c9d  00000000  00000000  000300c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005fbe  00000000  00000000  00061d61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001428  00000000  00000000  00067d20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000013d0  00000000  00000000  00069148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002dd0e  00000000  00000000  0006a518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00024f6e  00000000  00000000  00098226  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dda3a  00000000  00000000  000bd194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0019abce  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005d60  00000000  00000000  0019ac24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000094 	.word	0x20000094
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08012a08 	.word	0x08012a08

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000098 	.word	0x20000098
 80001cc:	08012a08 	.word	0x08012a08

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002b4:	f000 b96e 	b.w	8000594 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468c      	mov	ip, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	f040 8083 	bne.w	80003e6 <__udivmoddi4+0x116>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d947      	bls.n	8000376 <__udivmoddi4+0xa6>
 80002e6:	fab2 f282 	clz	r2, r2
 80002ea:	b142      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ec:	f1c2 0020 	rsb	r0, r2, #32
 80002f0:	fa24 f000 	lsr.w	r0, r4, r0
 80002f4:	4091      	lsls	r1, r2
 80002f6:	4097      	lsls	r7, r2
 80002f8:	ea40 0c01 	orr.w	ip, r0, r1
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbbc f6f8 	udiv	r6, ip, r8
 8000308:	fa1f fe87 	uxth.w	lr, r7
 800030c:	fb08 c116 	mls	r1, r8, r6, ip
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb06 f10e 	mul.w	r1, r6, lr
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18fb      	adds	r3, r7, r3
 800031e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000322:	f080 8119 	bcs.w	8000558 <__udivmoddi4+0x288>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8116 	bls.w	8000558 <__udivmoddi4+0x288>
 800032c:	3e02      	subs	r6, #2
 800032e:	443b      	add	r3, r7
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0f8 	udiv	r0, r3, r8
 8000338:	fb08 3310 	mls	r3, r8, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fe0e 	mul.w	lr, r0, lr
 8000344:	45a6      	cmp	lr, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	193c      	adds	r4, r7, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800034e:	f080 8105 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f240 8102 	bls.w	800055c <__udivmoddi4+0x28c>
 8000358:	3802      	subs	r0, #2
 800035a:	443c      	add	r4, r7
 800035c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000360:	eba4 040e 	sub.w	r4, r4, lr
 8000364:	2600      	movs	r6, #0
 8000366:	b11d      	cbz	r5, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c5 4300 	strd	r4, r3, [r5]
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	b902      	cbnz	r2, 800037a <__udivmoddi4+0xaa>
 8000378:	deff      	udf	#255	; 0xff
 800037a:	fab2 f282 	clz	r2, r2
 800037e:	2a00      	cmp	r2, #0
 8000380:	d150      	bne.n	8000424 <__udivmoddi4+0x154>
 8000382:	1bcb      	subs	r3, r1, r7
 8000384:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000388:	fa1f f887 	uxth.w	r8, r7
 800038c:	2601      	movs	r6, #1
 800038e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000392:	0c21      	lsrs	r1, r4, #16
 8000394:	fb0e 331c 	mls	r3, lr, ip, r3
 8000398:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800039c:	fb08 f30c 	mul.w	r3, r8, ip
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80003a4:	1879      	adds	r1, r7, r1
 80003a6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0xe2>
 80003ac:	428b      	cmp	r3, r1
 80003ae:	f200 80e9 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003b2:	4684      	mov	ip, r0
 80003b4:	1ac9      	subs	r1, r1, r3
 80003b6:	b2a3      	uxth	r3, r4
 80003b8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003bc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003c0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003c4:	fb08 f800 	mul.w	r8, r8, r0
 80003c8:	45a0      	cmp	r8, r4
 80003ca:	d907      	bls.n	80003dc <__udivmoddi4+0x10c>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x10a>
 80003d4:	45a0      	cmp	r8, r4
 80003d6:	f200 80d9 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003da:	4618      	mov	r0, r3
 80003dc:	eba4 0408 	sub.w	r4, r4, r8
 80003e0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003e4:	e7bf      	b.n	8000366 <__udivmoddi4+0x96>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0x12e>
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	f000 80b1 	beq.w	8000552 <__udivmoddi4+0x282>
 80003f0:	2600      	movs	r6, #0
 80003f2:	e9c5 0100 	strd	r0, r1, [r5]
 80003f6:	4630      	mov	r0, r6
 80003f8:	4631      	mov	r1, r6
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f683 	clz	r6, r3
 8000402:	2e00      	cmp	r6, #0
 8000404:	d14a      	bne.n	800049c <__udivmoddi4+0x1cc>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0x140>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80b8 	bhi.w	8000580 <__udivmoddi4+0x2b0>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0103 	sbc.w	r1, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	468c      	mov	ip, r1
 800041a:	2d00      	cmp	r5, #0
 800041c:	d0a8      	beq.n	8000370 <__udivmoddi4+0xa0>
 800041e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000422:	e7a5      	b.n	8000370 <__udivmoddi4+0xa0>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f603 	lsr.w	r6, r0, r3
 800042c:	4097      	lsls	r7, r2
 800042e:	fa01 f002 	lsl.w	r0, r1, r2
 8000432:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000436:	40d9      	lsrs	r1, r3
 8000438:	4330      	orrs	r0, r6
 800043a:	0c03      	lsrs	r3, r0, #16
 800043c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000440:	fa1f f887 	uxth.w	r8, r7
 8000444:	fb0e 1116 	mls	r1, lr, r6, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb06 f108 	mul.w	r1, r6, r8
 8000450:	4299      	cmp	r1, r3
 8000452:	fa04 f402 	lsl.w	r4, r4, r2
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x19c>
 8000458:	18fb      	adds	r3, r7, r3
 800045a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800045e:	f080 808d 	bcs.w	800057c <__udivmoddi4+0x2ac>
 8000462:	4299      	cmp	r1, r3
 8000464:	f240 808a 	bls.w	800057c <__udivmoddi4+0x2ac>
 8000468:	3e02      	subs	r6, #2
 800046a:	443b      	add	r3, r7
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b281      	uxth	r1, r0
 8000470:	fbb3 f0fe 	udiv	r0, r3, lr
 8000474:	fb0e 3310 	mls	r3, lr, r0, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb00 f308 	mul.w	r3, r0, r8
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0x1c4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800048a:	d273      	bcs.n	8000574 <__udivmoddi4+0x2a4>
 800048c:	428b      	cmp	r3, r1
 800048e:	d971      	bls.n	8000574 <__udivmoddi4+0x2a4>
 8000490:	3802      	subs	r0, #2
 8000492:	4439      	add	r1, r7
 8000494:	1acb      	subs	r3, r1, r3
 8000496:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800049a:	e778      	b.n	800038e <__udivmoddi4+0xbe>
 800049c:	f1c6 0c20 	rsb	ip, r6, #32
 80004a0:	fa03 f406 	lsl.w	r4, r3, r6
 80004a4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004a8:	431c      	orrs	r4, r3
 80004aa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ae:	fa01 f306 	lsl.w	r3, r1, r6
 80004b2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004b6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ba:	431f      	orrs	r7, r3
 80004bc:	0c3b      	lsrs	r3, r7, #16
 80004be:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c2:	fa1f f884 	uxth.w	r8, r4
 80004c6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ce:	fb09 fa08 	mul.w	sl, r9, r8
 80004d2:	458a      	cmp	sl, r1
 80004d4:	fa02 f206 	lsl.w	r2, r2, r6
 80004d8:	fa00 f306 	lsl.w	r3, r0, r6
 80004dc:	d908      	bls.n	80004f0 <__udivmoddi4+0x220>
 80004de:	1861      	adds	r1, r4, r1
 80004e0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004e4:	d248      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 80004e6:	458a      	cmp	sl, r1
 80004e8:	d946      	bls.n	8000578 <__udivmoddi4+0x2a8>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4421      	add	r1, r4
 80004f0:	eba1 010a 	sub.w	r1, r1, sl
 80004f4:	b2bf      	uxth	r7, r7
 80004f6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004fa:	fb0e 1110 	mls	r1, lr, r0, r1
 80004fe:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000502:	fb00 f808 	mul.w	r8, r0, r8
 8000506:	45b8      	cmp	r8, r7
 8000508:	d907      	bls.n	800051a <__udivmoddi4+0x24a>
 800050a:	19e7      	adds	r7, r4, r7
 800050c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000510:	d22e      	bcs.n	8000570 <__udivmoddi4+0x2a0>
 8000512:	45b8      	cmp	r8, r7
 8000514:	d92c      	bls.n	8000570 <__udivmoddi4+0x2a0>
 8000516:	3802      	subs	r0, #2
 8000518:	4427      	add	r7, r4
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	eba7 0708 	sub.w	r7, r7, r8
 8000522:	fba0 8902 	umull	r8, r9, r0, r2
 8000526:	454f      	cmp	r7, r9
 8000528:	46c6      	mov	lr, r8
 800052a:	4649      	mov	r1, r9
 800052c:	d31a      	bcc.n	8000564 <__udivmoddi4+0x294>
 800052e:	d017      	beq.n	8000560 <__udivmoddi4+0x290>
 8000530:	b15d      	cbz	r5, 800054a <__udivmoddi4+0x27a>
 8000532:	ebb3 020e 	subs.w	r2, r3, lr
 8000536:	eb67 0701 	sbc.w	r7, r7, r1
 800053a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800053e:	40f2      	lsrs	r2, r6
 8000540:	ea4c 0202 	orr.w	r2, ip, r2
 8000544:	40f7      	lsrs	r7, r6
 8000546:	e9c5 2700 	strd	r2, r7, [r5]
 800054a:	2600      	movs	r6, #0
 800054c:	4631      	mov	r1, r6
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e70b      	b.n	8000370 <__udivmoddi4+0xa0>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e9      	b.n	8000330 <__udivmoddi4+0x60>
 800055c:	4618      	mov	r0, r3
 800055e:	e6fd      	b.n	800035c <__udivmoddi4+0x8c>
 8000560:	4543      	cmp	r3, r8
 8000562:	d2e5      	bcs.n	8000530 <__udivmoddi4+0x260>
 8000564:	ebb8 0e02 	subs.w	lr, r8, r2
 8000568:	eb69 0104 	sbc.w	r1, r9, r4
 800056c:	3801      	subs	r0, #1
 800056e:	e7df      	b.n	8000530 <__udivmoddi4+0x260>
 8000570:	4608      	mov	r0, r1
 8000572:	e7d2      	b.n	800051a <__udivmoddi4+0x24a>
 8000574:	4660      	mov	r0, ip
 8000576:	e78d      	b.n	8000494 <__udivmoddi4+0x1c4>
 8000578:	4681      	mov	r9, r0
 800057a:	e7b9      	b.n	80004f0 <__udivmoddi4+0x220>
 800057c:	4666      	mov	r6, ip
 800057e:	e775      	b.n	800046c <__udivmoddi4+0x19c>
 8000580:	4630      	mov	r0, r6
 8000582:	e74a      	b.n	800041a <__udivmoddi4+0x14a>
 8000584:	f1ac 0c02 	sub.w	ip, ip, #2
 8000588:	4439      	add	r1, r7
 800058a:	e713      	b.n	80003b4 <__udivmoddi4+0xe4>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	e724      	b.n	80003dc <__udivmoddi4+0x10c>
 8000592:	bf00      	nop

08000594 <__aeabi_idiv0>:
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop

08000598 <from_int_to_char>:
char *token1;

int y = 0;
int flag = 0;
/************************ My function ***************************/
int from_int_to_char(char *x) {
 8000598:	b580      	push	{r7, lr}
 800059a:	b084      	sub	sp, #16
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
	char *var_char;
	int var_int;

	var_char = x;
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	60fb      	str	r3, [r7, #12]
	var_int = atoi(var_char);
 80005a4:	68f8      	ldr	r0, [r7, #12]
 80005a6:	f010 fe33 	bl	8011210 <atoi>
 80005aa:	60b8      	str	r0, [r7, #8]
	return var_int; // возвращаем значение 'var_int'
 80005ac:	68bb      	ldr	r3, [r7, #8]
}
 80005ae:	4618      	mov	r0, r3
 80005b0:	3710      	adds	r7, #16
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}
	...

080005b8 <ssi_handler>:
char joned_str[500];
/* we will use character "x", "y","z" as tag for SSI */
char const *TAGCHAR[] = { "x", "y", "z", "test" };
char const **TAGS = TAGCHAR;

uint16_t ssi_handler(int iIndex, char *pcInsert, int iInsertLen) {
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b084      	sub	sp, #16
 80005bc:	af00      	add	r7, sp, #0
 80005be:	60f8      	str	r0, [r7, #12]
 80005c0:	60b9      	str	r1, [r7, #8]
 80005c2:	607a      	str	r2, [r7, #4]
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	2b03      	cmp	r3, #3
 80005c8:	d852      	bhi.n	8000670 <ssi_handler+0xb8>
 80005ca:	a201      	add	r2, pc, #4	; (adr r2, 80005d0 <ssi_handler+0x18>)
 80005cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005d0:	080005e1 	.word	0x080005e1
 80005d4:	08000605 	.word	0x08000605
 80005d8:	08000629 	.word	0x08000629
 80005dc:	0800064d 	.word	0x0800064d
	switch (iIndex) {
	case 0:
		indx += 1;
 80005e0:	4b26      	ldr	r3, [pc, #152]	; (800067c <ssi_handler+0xc4>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	3301      	adds	r3, #1
 80005e6:	4a25      	ldr	r2, [pc, #148]	; (800067c <ssi_handler+0xc4>)
 80005e8:	6013      	str	r3, [r2, #0]
		sprintf(pcInsert, "%d", indx);
 80005ea:	4b24      	ldr	r3, [pc, #144]	; (800067c <ssi_handler+0xc4>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	461a      	mov	r2, r3
 80005f0:	4923      	ldr	r1, [pc, #140]	; (8000680 <ssi_handler+0xc8>)
 80005f2:	68b8      	ldr	r0, [r7, #8]
 80005f4:	f011 f80a 	bl	801160c <siprintf>
		return strlen(pcInsert);
 80005f8:	68b8      	ldr	r0, [r7, #8]
 80005fa:	f7ff fdf3 	bl	80001e4 <strlen>
 80005fe:	4603      	mov	r3, r0
 8000600:	b29b      	uxth	r3, r3
 8000602:	e037      	b.n	8000674 <ssi_handler+0xbc>
		break;
	case 1:
		indx += 1;
 8000604:	4b1d      	ldr	r3, [pc, #116]	; (800067c <ssi_handler+0xc4>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	3301      	adds	r3, #1
 800060a:	4a1c      	ldr	r2, [pc, #112]	; (800067c <ssi_handler+0xc4>)
 800060c:	6013      	str	r3, [r2, #0]
		sprintf(pcInsert, "%d", indx);
 800060e:	4b1b      	ldr	r3, [pc, #108]	; (800067c <ssi_handler+0xc4>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	461a      	mov	r2, r3
 8000614:	491a      	ldr	r1, [pc, #104]	; (8000680 <ssi_handler+0xc8>)
 8000616:	68b8      	ldr	r0, [r7, #8]
 8000618:	f010 fff8 	bl	801160c <siprintf>
		return strlen(pcInsert);
 800061c:	68b8      	ldr	r0, [r7, #8]
 800061e:	f7ff fde1 	bl	80001e4 <strlen>
 8000622:	4603      	mov	r3, r0
 8000624:	b29b      	uxth	r3, r3
 8000626:	e025      	b.n	8000674 <ssi_handler+0xbc>
		break;
	case 2:
		indx += 1;
 8000628:	4b14      	ldr	r3, [pc, #80]	; (800067c <ssi_handler+0xc4>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	3301      	adds	r3, #1
 800062e:	4a13      	ldr	r2, [pc, #76]	; (800067c <ssi_handler+0xc4>)
 8000630:	6013      	str	r3, [r2, #0]
		sprintf(pcInsert, "%d", indx);
 8000632:	4b12      	ldr	r3, [pc, #72]	; (800067c <ssi_handler+0xc4>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	461a      	mov	r2, r3
 8000638:	4911      	ldr	r1, [pc, #68]	; (8000680 <ssi_handler+0xc8>)
 800063a:	68b8      	ldr	r0, [r7, #8]
 800063c:	f010 ffe6 	bl	801160c <siprintf>
		return strlen(pcInsert);
 8000640:	68b8      	ldr	r0, [r7, #8]
 8000642:	f7ff fdcf 	bl	80001e4 <strlen>
 8000646:	4603      	mov	r3, r0
 8000648:	b29b      	uxth	r3, r3
 800064a:	e013      	b.n	8000674 <ssi_handler+0xbc>
		break;
	case 3:
		indx1 += 1; //!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 800064c:	4b0d      	ldr	r3, [pc, #52]	; (8000684 <ssi_handler+0xcc>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	3301      	adds	r3, #1
 8000652:	4a0c      	ldr	r2, [pc, #48]	; (8000684 <ssi_handler+0xcc>)
 8000654:	6013      	str	r3, [r2, #0]
		sprintf(pcInsert, "%d", indx1);
 8000656:	4b0b      	ldr	r3, [pc, #44]	; (8000684 <ssi_handler+0xcc>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	461a      	mov	r2, r3
 800065c:	4908      	ldr	r1, [pc, #32]	; (8000680 <ssi_handler+0xc8>)
 800065e:	68b8      	ldr	r0, [r7, #8]
 8000660:	f010 ffd4 	bl	801160c <siprintf>
		return strlen(pcInsert);
 8000664:	68b8      	ldr	r0, [r7, #8]
 8000666:	f7ff fdbd 	bl	80001e4 <strlen>
 800066a:	4603      	mov	r3, r0
 800066c:	b29b      	uxth	r3, r3
 800066e:	e001      	b.n	8000674 <ssi_handler+0xbc>
		break;
	default:
		break;
 8000670:	bf00      	nop
	}
	return 0;
 8000672:	2300      	movs	r3, #0
}
 8000674:	4618      	mov	r0, r3
 8000676:	3710      	adds	r7, #16
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	200000d4 	.word	0x200000d4
 8000680:	08012a34 	.word	0x08012a34
 8000684:	200000d8 	.word	0x200000d8

08000688 <CGIForm_Handler>:
		char *pcValue[]);
const tCGI FORM_CGI = { "/form.cgi", CGIForm_Handler }; // Создаем структуру CGI
char name[300]; // Если цикл перебора найдет "fname" сохранит в переменную 'name[30]' а если найдет "lname" он сканкатенирует сюда данные "lname".

const char* CGIForm_Handler(int iIndex, int iNumParams, char *pcParam[],
		char *pcValue[]) {
 8000688:	b580      	push	{r7, lr}
 800068a:	b086      	sub	sp, #24
 800068c:	af00      	add	r7, sp, #0
 800068e:	60f8      	str	r0, [r7, #12]
 8000690:	60b9      	str	r1, [r7, #8]
 8000692:	607a      	str	r2, [r7, #4]
 8000694:	603b      	str	r3, [r7, #0]
	printf("OK GET \r\n");
 8000696:	487b      	ldr	r0, [pc, #492]	; (8000884 <CGIForm_Handler+0x1fc>)
 8000698:	f010 ff60 	bl	801155c <puts>
	if (iIndex == 0) {
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	2b00      	cmp	r3, #0
 80006a0:	f040 80ea 	bne.w	8000878 <CGIForm_Handler+0x1f0>
		for (int i = 0; i < iNumParams; i++) // Цикл перебора параметров ("fname" и "lname") из html странички
 80006a4:	2300      	movs	r3, #0
 80006a6:	617b      	str	r3, [r7, #20]
 80006a8:	e0e1      	b.n	800086e <CGIForm_Handler+0x1e6>
				{
			if (strcmp(pcParam[i], "Bounce_interval") == 0) // if the fname string is found
 80006aa:	697b      	ldr	r3, [r7, #20]
 80006ac:	009b      	lsls	r3, r3, #2
 80006ae:	687a      	ldr	r2, [r7, #4]
 80006b0:	4413      	add	r3, r2
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4974      	ldr	r1, [pc, #464]	; (8000888 <CGIForm_Handler+0x200>)
 80006b6:	4618      	mov	r0, r3
 80006b8:	f7ff fd8a 	bl	80001d0 <strcmp>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d113      	bne.n	80006ea <CGIForm_Handler+0x62>
					{
				memset(name, '\0', 300); // Очищаем массив перед записью новых данных.
 80006c2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80006c6:	2100      	movs	r1, #0
 80006c8:	4870      	ldr	r0, [pc, #448]	; (800088c <CGIForm_Handler+0x204>)
 80006ca:	f010 fe0f 	bl	80112ec <memset>
				strcpy(name, pcValue[i]); // Сохраняем значение в переменную.
 80006ce:	697b      	ldr	r3, [r7, #20]
 80006d0:	009b      	lsls	r3, r3, #2
 80006d2:	683a      	ldr	r2, [r7, #0]
 80006d4:	4413      	add	r3, r2
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	4619      	mov	r1, r3
 80006da:	486c      	ldr	r0, [pc, #432]	; (800088c <CGIForm_Handler+0x204>)
 80006dc:	f010 ffd2 	bl	8011684 <strcpy>
				printf("Bounce_interval: %s\r\n", name);
 80006e0:	496a      	ldr	r1, [pc, #424]	; (800088c <CGIForm_Handler+0x204>)
 80006e2:	486b      	ldr	r0, [pc, #428]	; (8000890 <CGIForm_Handler+0x208>)
 80006e4:	f010 feb4 	bl	8011450 <iprintf>
 80006e8:	e0be      	b.n	8000868 <CGIForm_Handler+0x1e0>
			} else if (strcmp(pcParam[i], "Hold_interval") == 0) // if the lname string is found
 80006ea:	697b      	ldr	r3, [r7, #20]
 80006ec:	009b      	lsls	r3, r3, #2
 80006ee:	687a      	ldr	r2, [r7, #4]
 80006f0:	4413      	add	r3, r2
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	4967      	ldr	r1, [pc, #412]	; (8000894 <CGIForm_Handler+0x20c>)
 80006f6:	4618      	mov	r0, r3
 80006f8:	f7ff fd6a 	bl	80001d0 <strcmp>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d113      	bne.n	800072a <CGIForm_Handler+0xa2>
					{
				memset(name, '\0', 300); // Очищаем массив перед записью новых данных.
 8000702:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000706:	2100      	movs	r1, #0
 8000708:	4860      	ldr	r0, [pc, #384]	; (800088c <CGIForm_Handler+0x204>)
 800070a:	f010 fdef 	bl	80112ec <memset>
				//strcat(name, " "); // Сконкатенируем fname с lname разделяя пробелом.
				strcat(name, pcValue[i]); // Сохраняем значение в переменную.
 800070e:	697b      	ldr	r3, [r7, #20]
 8000710:	009b      	lsls	r3, r3, #2
 8000712:	683a      	ldr	r2, [r7, #0]
 8000714:	4413      	add	r3, r2
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4619      	mov	r1, r3
 800071a:	485c      	ldr	r0, [pc, #368]	; (800088c <CGIForm_Handler+0x204>)
 800071c:	f010 ff96 	bl	801164c <strcat>
				printf("Hold_interval: %s\r\n", name);
 8000720:	495a      	ldr	r1, [pc, #360]	; (800088c <CGIForm_Handler+0x204>)
 8000722:	485d      	ldr	r0, [pc, #372]	; (8000898 <CGIForm_Handler+0x210>)
 8000724:	f010 fe94 	bl	8011450 <iprintf>
 8000728:	e09e      	b.n	8000868 <CGIForm_Handler+0x1e0>
			} else if (strcmp(pcParam[i], "Repeat") == 0) // if the lname string is found
 800072a:	697b      	ldr	r3, [r7, #20]
 800072c:	009b      	lsls	r3, r3, #2
 800072e:	687a      	ldr	r2, [r7, #4]
 8000730:	4413      	add	r3, r2
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4959      	ldr	r1, [pc, #356]	; (800089c <CGIForm_Handler+0x214>)
 8000736:	4618      	mov	r0, r3
 8000738:	f7ff fd4a 	bl	80001d0 <strcmp>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d113      	bne.n	800076a <CGIForm_Handler+0xe2>
					{
				memset(name, '\0', 300); // Очищаем массив перед записью новых данных.
 8000742:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000746:	2100      	movs	r1, #0
 8000748:	4850      	ldr	r0, [pc, #320]	; (800088c <CGIForm_Handler+0x204>)
 800074a:	f010 fdcf 	bl	80112ec <memset>
				//strcat(name, " "); // Сконкатенируем fname с lname разделяя пробелом.
				strcat(name, pcValue[i]); // Сохраняем значение в переменную.
 800074e:	697b      	ldr	r3, [r7, #20]
 8000750:	009b      	lsls	r3, r3, #2
 8000752:	683a      	ldr	r2, [r7, #0]
 8000754:	4413      	add	r3, r2
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4619      	mov	r1, r3
 800075a:	484c      	ldr	r0, [pc, #304]	; (800088c <CGIForm_Handler+0x204>)
 800075c:	f010 ff76 	bl	801164c <strcat>
				printf("Repeat: %s\r\n", name);
 8000760:	494a      	ldr	r1, [pc, #296]	; (800088c <CGIForm_Handler+0x204>)
 8000762:	484f      	ldr	r0, [pc, #316]	; (80008a0 <CGIForm_Handler+0x218>)
 8000764:	f010 fe74 	bl	8011450 <iprintf>
 8000768:	e07e      	b.n	8000868 <CGIForm_Handler+0x1e0>
			} else if (strcmp(pcParam[i], "Repeat_interval") == 0) // if the lname string is found
 800076a:	697b      	ldr	r3, [r7, #20]
 800076c:	009b      	lsls	r3, r3, #2
 800076e:	687a      	ldr	r2, [r7, #4]
 8000770:	4413      	add	r3, r2
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	494b      	ldr	r1, [pc, #300]	; (80008a4 <CGIForm_Handler+0x21c>)
 8000776:	4618      	mov	r0, r3
 8000778:	f7ff fd2a 	bl	80001d0 <strcmp>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d113      	bne.n	80007aa <CGIForm_Handler+0x122>
					{
				memset(name, '\0', 300); // Очищаем массив перед записью новых данных.
 8000782:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000786:	2100      	movs	r1, #0
 8000788:	4840      	ldr	r0, [pc, #256]	; (800088c <CGIForm_Handler+0x204>)
 800078a:	f010 fdaf 	bl	80112ec <memset>
				//strcat(name, " "); // Сконкатенируем fname с lname разделяя пробелом.
				strcat(name, pcValue[i]); // Сохраняем значение в переменную.
 800078e:	697b      	ldr	r3, [r7, #20]
 8000790:	009b      	lsls	r3, r3, #2
 8000792:	683a      	ldr	r2, [r7, #0]
 8000794:	4413      	add	r3, r2
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	4619      	mov	r1, r3
 800079a:	483c      	ldr	r0, [pc, #240]	; (800088c <CGIForm_Handler+0x204>)
 800079c:	f010 ff56 	bl	801164c <strcat>
				printf("Repeat_interval: %s\r\n", name);
 80007a0:	493a      	ldr	r1, [pc, #232]	; (800088c <CGIForm_Handler+0x204>)
 80007a2:	4841      	ldr	r0, [pc, #260]	; (80008a8 <CGIForm_Handler+0x220>)
 80007a4:	f010 fe54 	bl	8011450 <iprintf>
 80007a8:	e05e      	b.n	8000868 <CGIForm_Handler+0x1e0>
			} else if (strcmp(pcParam[i], "Double_click_interval") == 0) // if the lname string is found
 80007aa:	697b      	ldr	r3, [r7, #20]
 80007ac:	009b      	lsls	r3, r3, #2
 80007ae:	687a      	ldr	r2, [r7, #4]
 80007b0:	4413      	add	r3, r2
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	493d      	ldr	r1, [pc, #244]	; (80008ac <CGIForm_Handler+0x224>)
 80007b6:	4618      	mov	r0, r3
 80007b8:	f7ff fd0a 	bl	80001d0 <strcmp>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d113      	bne.n	80007ea <CGIForm_Handler+0x162>
					{
				memset(name, '\0', 300); // Очищаем массив перед записью новых данных.
 80007c2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80007c6:	2100      	movs	r1, #0
 80007c8:	4830      	ldr	r0, [pc, #192]	; (800088c <CGIForm_Handler+0x204>)
 80007ca:	f010 fd8f 	bl	80112ec <memset>
				//strcat(name, " "); // Сконкатенируем fname с lname разделяя пробелом.
				strcat(name, pcValue[i]); // Сохраняем значение в переменную.
 80007ce:	697b      	ldr	r3, [r7, #20]
 80007d0:	009b      	lsls	r3, r3, #2
 80007d2:	683a      	ldr	r2, [r7, #0]
 80007d4:	4413      	add	r3, r2
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4619      	mov	r1, r3
 80007da:	482c      	ldr	r0, [pc, #176]	; (800088c <CGIForm_Handler+0x204>)
 80007dc:	f010 ff36 	bl	801164c <strcat>
				printf("Double_click_interval: %s\r\n", name);
 80007e0:	492a      	ldr	r1, [pc, #168]	; (800088c <CGIForm_Handler+0x204>)
 80007e2:	4833      	ldr	r0, [pc, #204]	; (80008b0 <CGIForm_Handler+0x228>)
 80007e4:	f010 fe34 	bl	8011450 <iprintf>
 80007e8:	e03e      	b.n	8000868 <CGIForm_Handler+0x1e0>
			} else if (strcmp(pcParam[i], "Prevent_Click") == 0) // if the lname string is found
 80007ea:	697b      	ldr	r3, [r7, #20]
 80007ec:	009b      	lsls	r3, r3, #2
 80007ee:	687a      	ldr	r2, [r7, #4]
 80007f0:	4413      	add	r3, r2
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	492f      	ldr	r1, [pc, #188]	; (80008b4 <CGIForm_Handler+0x22c>)
 80007f6:	4618      	mov	r0, r3
 80007f8:	f7ff fcea 	bl	80001d0 <strcmp>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d113      	bne.n	800082a <CGIForm_Handler+0x1a2>
					{
				memset(name, '\0', 300); // Очищаем массив перед записью новых данных.
 8000802:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000806:	2100      	movs	r1, #0
 8000808:	4820      	ldr	r0, [pc, #128]	; (800088c <CGIForm_Handler+0x204>)
 800080a:	f010 fd6f 	bl	80112ec <memset>
				//strcat(name, " "); // Сконкатенируем fname с lname разделяя пробелом.
				strcat(name, pcValue[i]); // Сохраняем значение в переменную.
 800080e:	697b      	ldr	r3, [r7, #20]
 8000810:	009b      	lsls	r3, r3, #2
 8000812:	683a      	ldr	r2, [r7, #0]
 8000814:	4413      	add	r3, r2
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	4619      	mov	r1, r3
 800081a:	481c      	ldr	r0, [pc, #112]	; (800088c <CGIForm_Handler+0x204>)
 800081c:	f010 ff16 	bl	801164c <strcat>
				printf("Prevent_Click: %s\r\n", name);
 8000820:	491a      	ldr	r1, [pc, #104]	; (800088c <CGIForm_Handler+0x204>)
 8000822:	4825      	ldr	r0, [pc, #148]	; (80008b8 <CGIForm_Handler+0x230>)
 8000824:	f010 fe14 	bl	8011450 <iprintf>
 8000828:	e01e      	b.n	8000868 <CGIForm_Handler+0x1e0>
			} else if (strcmp(pcParam[i], "OnOff") == 0) // if the lname string is found
 800082a:	697b      	ldr	r3, [r7, #20]
 800082c:	009b      	lsls	r3, r3, #2
 800082e:	687a      	ldr	r2, [r7, #4]
 8000830:	4413      	add	r3, r2
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4921      	ldr	r1, [pc, #132]	; (80008bc <CGIForm_Handler+0x234>)
 8000836:	4618      	mov	r0, r3
 8000838:	f7ff fcca 	bl	80001d0 <strcmp>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d112      	bne.n	8000868 <CGIForm_Handler+0x1e0>
					{
				memset(name, '\0', 300); // Очищаем массив перед записью новых данных.
 8000842:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000846:	2100      	movs	r1, #0
 8000848:	4810      	ldr	r0, [pc, #64]	; (800088c <CGIForm_Handler+0x204>)
 800084a:	f010 fd4f 	bl	80112ec <memset>
				//strcat(name, " "); // Сконкатенируем fname с lname разделяя пробелом.
				strcat(name, pcValue[i]); // Сохраняем значение в переменную.
 800084e:	697b      	ldr	r3, [r7, #20]
 8000850:	009b      	lsls	r3, r3, #2
 8000852:	683a      	ldr	r2, [r7, #0]
 8000854:	4413      	add	r3, r2
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	4619      	mov	r1, r3
 800085a:	480c      	ldr	r0, [pc, #48]	; (800088c <CGIForm_Handler+0x204>)
 800085c:	f010 fef6 	bl	801164c <strcat>
				printf("OnOff: %s\r\n", name);
 8000860:	490a      	ldr	r1, [pc, #40]	; (800088c <CGIForm_Handler+0x204>)
 8000862:	4817      	ldr	r0, [pc, #92]	; (80008c0 <CGIForm_Handler+0x238>)
 8000864:	f010 fdf4 	bl	8011450 <iprintf>
		for (int i = 0; i < iNumParams; i++) // Цикл перебора параметров ("fname" и "lname") из html странички
 8000868:	697b      	ldr	r3, [r7, #20]
 800086a:	3301      	adds	r3, #1
 800086c:	617b      	str	r3, [r7, #20]
 800086e:	697a      	ldr	r2, [r7, #20]
 8000870:	68bb      	ldr	r3, [r7, #8]
 8000872:	429a      	cmp	r2, r3
 8000874:	f6ff af19 	blt.w	80006aa <CGIForm_Handler+0x22>
			}
		}
	}
	return "/cgiform.html"; // По окончании работы 'CGIForm_Handler' возвращаем указатель в нужный файл.
 8000878:	4b12      	ldr	r3, [pc, #72]	; (80008c4 <CGIForm_Handler+0x23c>)
}
 800087a:	4618      	mov	r0, r3
 800087c:	3718      	adds	r7, #24
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	08012a44 	.word	0x08012a44
 8000888:	08012a50 	.word	0x08012a50
 800088c:	20000b30 	.word	0x20000b30
 8000890:	08012a60 	.word	0x08012a60
 8000894:	08012a78 	.word	0x08012a78
 8000898:	08012a88 	.word	0x08012a88
 800089c:	08012a9c 	.word	0x08012a9c
 80008a0:	08012aa4 	.word	0x08012aa4
 80008a4:	08012ab4 	.word	0x08012ab4
 80008a8:	08012ac4 	.word	0x08012ac4
 80008ac:	08012adc 	.word	0x08012adc
 80008b0:	08012af4 	.word	0x08012af4
 80008b4:	08012b10 	.word	0x08012b10
 80008b8:	08012b20 	.word	0x08012b20
 80008bc:	08012b34 	.word	0x08012b34
 80008c0:	08012b3c 	.word	0x08012b3c
 80008c4:	08012b48 	.word	0x08012b48

080008c8 <find_header_name>:
//////////////////// POST START ////////////////////////
char *content_type;

/* Find Header Key Name in the header. */
const char*
find_header_name(char *header) {
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b084      	sub	sp, #16
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]

#define HEADER_NAME_TITLE               "name="
#define HEADER_NAME_TITLE_LEN           5

	if (header != NULL) {
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d010      	beq.n	80008f8 <find_header_name+0x30>
		char *header_name_begin = strstr(header, HEADER_NAME_TITLE); // Find name= in Header
 80008d6:	490b      	ldr	r1, [pc, #44]	; (8000904 <find_header_name+0x3c>)
 80008d8:	6878      	ldr	r0, [r7, #4]
 80008da:	f010 ff00 	bl	80116de <strstr>
 80008de:	60f8      	str	r0, [r7, #12]
		char *header_name = strtok(header_name_begin, "\""); // Find the first "
 80008e0:	4909      	ldr	r1, [pc, #36]	; (8000908 <find_header_name+0x40>)
 80008e2:	68f8      	ldr	r0, [r7, #12]
 80008e4:	f010 ff12 	bl	801170c <strtok>
 80008e8:	60b8      	str	r0, [r7, #8]
		header_name = strtok(NULL, "\"");					// Go to the last "
 80008ea:	4907      	ldr	r1, [pc, #28]	; (8000908 <find_header_name+0x40>)
 80008ec:	2000      	movs	r0, #0
 80008ee:	f010 ff0d 	bl	801170c <strtok>
 80008f2:	60b8      	str	r0, [r7, #8]
#ifdef  HTTPD_DEBUG
		//printf("POST multipart Header Key found: %s\n", header_name);
#endif

		return header_name;
 80008f4:	68bb      	ldr	r3, [r7, #8]
 80008f6:	e000      	b.n	80008fa <find_header_name+0x32>
	}
	return NULL;
 80008f8:	2300      	movs	r3, #0
}
 80008fa:	4618      	mov	r0, r3
 80008fc:	3710      	adds	r7, #16
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	08012b58 	.word	0x08012b58
 8000908:	08012b60 	.word	0x08012b60

0800090c <find_boundary>:

/* Find boundary value in the Content-Type. */
const char*
find_boundary( content_type) {
 800090c:	b580      	push	{r7, lr}
 800090e:	b084      	sub	sp, #16
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]

#define BOUNDARY_TITLE               "boundary="
#define BOUNDARY_TITLE_LEN           9

	if (content_type != NULL) {
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	2b00      	cmp	r3, #0
 8000918:	d00a      	beq.n	8000930 <find_boundary+0x24>
		char *boundary_begin = strstr(content_type, BOUNDARY_TITLE);// Find Boundary= in Content-Type
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	4907      	ldr	r1, [pc, #28]	; (800093c <find_boundary+0x30>)
 800091e:	4618      	mov	r0, r3
 8000920:	f010 fedd 	bl	80116de <strstr>
 8000924:	60f8      	str	r0, [r7, #12]
		char *boundary = boundary_begin + BOUNDARY_TITLE_LEN;// Remove the Boundary=
 8000926:	68fb      	ldr	r3, [r7, #12]
 8000928:	3309      	adds	r3, #9
 800092a:	60bb      	str	r3, [r7, #8]
#ifdef  HTTPD_DEBUG
		//printf("POST multipart Boundary found: %s\n", boundary);
#endif

		return boundary;
 800092c:	68bb      	ldr	r3, [r7, #8]
 800092e:	e000      	b.n	8000932 <find_boundary+0x26>
	}
	return NULL;
 8000930:	2300      	movs	r3, #0
}
 8000932:	4618      	mov	r0, r3
 8000934:	3710      	adds	r7, #16
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	08012b64 	.word	0x08012b64

08000940 <read_header_name>:
 */
multipart_parser_settings callbacks;
multipart_parser *_parser;

/* Header which contains the Key with the name */
int read_header_name(multipart_parser *p, const char *at, size_t length) {
 8000940:	b580      	push	{r7, lr}
 8000942:	b086      	sub	sp, #24
 8000944:	af00      	add	r7, sp, #0
 8000946:	60f8      	str	r0, [r7, #12]
 8000948:	60b9      	str	r1, [r7, #8]
 800094a:	607a      	str	r2, [r7, #4]
	//printf("read_header_name: %.*s: \n", length, at);
#endif

	/* Parse the Header Value */
	/* Content-Disposition: read_header_value: form-data; name="variable_name" */
	char *key_name = find_header_name(at);
 800094c:	68b8      	ldr	r0, [r7, #8]
 800094e:	f7ff ffbb 	bl	80008c8 <find_header_name>
 8000952:	6178      	str	r0, [r7, #20]

#ifdef  HTTPD_DEBUG
	//printf("Key Name: %s\n", key_name);
#endif

	return 0;
 8000954:	2300      	movs	r3, #0
}
 8000956:	4618      	mov	r0, r3
 8000958:	3718      	adds	r7, #24
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}

0800095e <read_header_value>:

int read_header_value(multipart_parser *p, const char *at, size_t length) {
 800095e:	b480      	push	{r7}
 8000960:	b085      	sub	sp, #20
 8000962:	af00      	add	r7, sp, #0
 8000964:	60f8      	str	r0, [r7, #12]
 8000966:	60b9      	str	r1, [r7, #8]
 8000968:	607a      	str	r2, [r7, #4]
#ifdef  HTTPD_DEBUG
	//printf("read_header_value: %.*s\n", length, at);
#endif
	return 0;
 800096a:	2300      	movs	r3, #0
}
 800096c:	4618      	mov	r0, r3
 800096e:	3714      	adds	r7, #20
 8000970:	46bd      	mov	sp, r7
 8000972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000976:	4770      	bx	lr

08000978 <read_part_data>:

/* Value for the latest key */
/* If this is a file, this may be called multiple times. */
/* Wait until part_end for the complete file. */
int read_part_data(multipart_parser *p, const char *at, size_t length) {
 8000978:	b480      	push	{r7}
 800097a:	b085      	sub	sp, #20
 800097c:	af00      	add	r7, sp, #0
 800097e:	60f8      	str	r0, [r7, #12]
 8000980:	60b9      	str	r1, [r7, #8]
 8000982:	607a      	str	r2, [r7, #4]
#ifdef  HTTPD_DEBUG
	//printf("read_part_data: %.*s\n", length, at);
#endif
	return 0;
 8000984:	2300      	movs	r3, #0
}
 8000986:	4618      	mov	r0, r3
 8000988:	3714      	adds	r7, #20
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr

08000992 <read_on_part_data_begin>:

/* Beginning of a key and value */
int read_on_part_data_begin(multipart_parser *p, const char *at, size_t length) {
 8000992:	b480      	push	{r7}
 8000994:	b085      	sub	sp, #20
 8000996:	af00      	add	r7, sp, #0
 8000998:	60f8      	str	r0, [r7, #12]
 800099a:	60b9      	str	r1, [r7, #8]
 800099c:	607a      	str	r2, [r7, #4]
	//printf("Total length is - %d\n", http_post_content_len);
#ifdef  HTTPD_DEBUG
	//printf("read_on_part_data_begin: %.*s\n", length, at);
#endif
	return 0;
 800099e:	2300      	movs	r3, #0
}
 80009a0:	4618      	mov	r0, r3
 80009a2:	3714      	adds	r7, #20
 80009a4:	46bd      	mov	sp, r7
 80009a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009aa:	4770      	bx	lr

080009ac <read_on_headers_complete>:

/* End of header which contains the key */
int read_on_headers_complete(multipart_parser *p, const char *at, size_t length) {
 80009ac:	b480      	push	{r7}
 80009ae:	b085      	sub	sp, #20
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	60f8      	str	r0, [r7, #12]
 80009b4:	60b9      	str	r1, [r7, #8]
 80009b6:	607a      	str	r2, [r7, #4]
#ifdef  HTTPD_DEBUG
	//printf("read_on_headers_complete: %.*s\n", length, at);
#endif
	return 0;
 80009b8:	2300      	movs	r3, #0
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	3714      	adds	r7, #20
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr

080009c6 <read_on_part_data_end>:

/** End of the key and value */
/* If this is a file, the file is complete. */
/* If this is a value, then the value is complete. */
int read_on_part_data_end(multipart_parser *p, const char *at, size_t length) {
 80009c6:	b480      	push	{r7}
 80009c8:	b085      	sub	sp, #20
 80009ca:	af00      	add	r7, sp, #0
 80009cc:	60f8      	str	r0, [r7, #12]
 80009ce:	60b9      	str	r1, [r7, #8]
 80009d0:	607a      	str	r2, [r7, #4]
#ifdef  HTTPD_DEBUG
	//printf("read_on_part_data_end: %.*s\n", length, at);
#endif
	return 0;
 80009d2:	2300      	movs	r3, #0
}
 80009d4:	4618      	mov	r0, r3
 80009d6:	3714      	adds	r7, #20
 80009d8:	46bd      	mov	sp, r7
 80009da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009de:	4770      	bx	lr

080009e0 <read_on_body_end>:

/* End of the entire form */
int read_on_body_end(multipart_parser *p, const char *at, size_t length) {
 80009e0:	b480      	push	{r7}
 80009e2:	b085      	sub	sp, #20
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	60f8      	str	r0, [r7, #12]
 80009e8:	60b9      	str	r1, [r7, #8]
 80009ea:	607a      	str	r2, [r7, #4]
#ifdef  HTTPD_DEBUG
	//printf("read_on_body_end: %.*s\n", length, at);
#endif
	return 0;
 80009ec:	2300      	movs	r3, #0
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	3714      	adds	r7, #20
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr
	...

080009fc <http_parse_post>:

static err_t http_parse_post(char *data, uint32_t length) {
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
 8000a04:	6039      	str	r1, [r7, #0]
#ifdef  HTTPD_DEBUG
	//printf("http_parse_post POST data: %s\n", data);
#endif

	/* Parse the data */
	multipart_parser_execute(_parser, data, length);
 8000a06:	4b06      	ldr	r3, [pc, #24]	; (8000a20 <http_parse_post+0x24>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	683a      	ldr	r2, [r7, #0]
 8000a0c:	6879      	ldr	r1, [r7, #4]
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f000 fba8 	bl	8001164 <multipart_parser_execute>

	return ERR_OK;
 8000a14:	2300      	movs	r3, #0
}
 8000a16:	4618      	mov	r0, r3
 8000a18:	3708      	adds	r7, #8
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	20000b2c 	.word	0x20000b2c

08000a24 <httpd_post_begin>:
 * @return ERR_OK: Accept the POST request, data may be passed in
 *         another err_t: Deny the POST request, send back 'bad request'.
 */
err_t httpd_post_begin(void *connection, const char *uri,
		const char *http_request, uint16_t http_request_len, int content_len,
		char *response_uri, uint16_t response_uri_len, uint8_t *post_auto_wnd) {
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b086      	sub	sp, #24
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	60f8      	str	r0, [r7, #12]
 8000a2c:	60b9      	str	r1, [r7, #8]
 8000a2e:	607a      	str	r2, [r7, #4]
 8000a30:	807b      	strh	r3, [r7, #2]

	// Check the URI given with the list
	for (uint8_t i = 0; i < HTTP_POST_URI_NUM; i++) {
 8000a32:	2300      	movs	r3, #0
 8000a34:	75fb      	strb	r3, [r7, #23]
 8000a36:	e03f      	b.n	8000ab8 <httpd_post_begin+0x94>
		if (strcmp(uri, a[i]) == 0) {
 8000a38:	7dfb      	ldrb	r3, [r7, #23]
 8000a3a:	4a24      	ldr	r2, [pc, #144]	; (8000acc <httpd_post_begin+0xa8>)
 8000a3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a40:	4619      	mov	r1, r3
 8000a42:	68b8      	ldr	r0, [r7, #8]
 8000a44:	f7ff fbc4 	bl	80001d0 <strcmp>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d131      	bne.n	8000ab2 <httpd_post_begin+0x8e>

			http_post_uri_file_index = i;
 8000a4e:	4a20      	ldr	r2, [pc, #128]	; (8000ad0 <httpd_post_begin+0xac>)
 8000a50:	7dfb      	ldrb	r3, [r7, #23]
 8000a52:	7013      	strb	r3, [r2, #0]
			http_post_content_len = content_len;
 8000a54:	6a3b      	ldr	r3, [r7, #32]
 8000a56:	4a1f      	ldr	r2, [pc, #124]	; (8000ad4 <httpd_post_begin+0xb0>)
 8000a58:	6013      	str	r3, [r2, #0]

#ifdef  HTTPD_DEBUG
			//printf("httpd_post_begin: Post Content: %s\n",  http_request);
#endif

			memset(&callbacks, 0, sizeof(multipart_parser_settings));
 8000a5a:	221c      	movs	r2, #28
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	481e      	ldr	r0, [pc, #120]	; (8000ad8 <httpd_post_begin+0xb4>)
 8000a60:	f010 fc44 	bl	80112ec <memset>

			callbacks.on_header_field = read_header_name;
 8000a64:	4b1c      	ldr	r3, [pc, #112]	; (8000ad8 <httpd_post_begin+0xb4>)
 8000a66:	4a1d      	ldr	r2, [pc, #116]	; (8000adc <httpd_post_begin+0xb8>)
 8000a68:	601a      	str	r2, [r3, #0]
			callbacks.on_header_value = read_header_value;
 8000a6a:	4b1b      	ldr	r3, [pc, #108]	; (8000ad8 <httpd_post_begin+0xb4>)
 8000a6c:	4a1c      	ldr	r2, [pc, #112]	; (8000ae0 <httpd_post_begin+0xbc>)
 8000a6e:	605a      	str	r2, [r3, #4]
			callbacks.on_part_data = read_part_data;
 8000a70:	4b19      	ldr	r3, [pc, #100]	; (8000ad8 <httpd_post_begin+0xb4>)
 8000a72:	4a1c      	ldr	r2, [pc, #112]	; (8000ae4 <httpd_post_begin+0xc0>)
 8000a74:	609a      	str	r2, [r3, #8]
			callbacks.on_part_data_begin = read_on_part_data_begin;
 8000a76:	4b18      	ldr	r3, [pc, #96]	; (8000ad8 <httpd_post_begin+0xb4>)
 8000a78:	4a1b      	ldr	r2, [pc, #108]	; (8000ae8 <httpd_post_begin+0xc4>)
 8000a7a:	60da      	str	r2, [r3, #12]
			callbacks.on_headers_complete = read_on_headers_complete;
 8000a7c:	4b16      	ldr	r3, [pc, #88]	; (8000ad8 <httpd_post_begin+0xb4>)
 8000a7e:	4a1b      	ldr	r2, [pc, #108]	; (8000aec <httpd_post_begin+0xc8>)
 8000a80:	611a      	str	r2, [r3, #16]
			callbacks.on_part_data_end = read_on_part_data_end;
 8000a82:	4b15      	ldr	r3, [pc, #84]	; (8000ad8 <httpd_post_begin+0xb4>)
 8000a84:	4a1a      	ldr	r2, [pc, #104]	; (8000af0 <httpd_post_begin+0xcc>)
 8000a86:	615a      	str	r2, [r3, #20]
			callbacks.on_body_end = read_on_body_end;
 8000a88:	4b13      	ldr	r3, [pc, #76]	; (8000ad8 <httpd_post_begin+0xb4>)
 8000a8a:	4a1a      	ldr	r2, [pc, #104]	; (8000af4 <httpd_post_begin+0xd0>)
 8000a8c:	619a      	str	r2, [r3, #24]

			/*
			 * Get the boundary from the content-type
			 * Then pass it to the parser
			 */
			const char *boundary = find_boundary(content_type);
 8000a8e:	4b1a      	ldr	r3, [pc, #104]	; (8000af8 <httpd_post_begin+0xd4>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	4618      	mov	r0, r3
 8000a94:	f7ff ff3a 	bl	800090c <find_boundary>
 8000a98:	6138      	str	r0, [r7, #16]
			if (boundary != NULL) {
 8000a9a:	693b      	ldr	r3, [r7, #16]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d006      	beq.n	8000aae <httpd_post_begin+0x8a>
				_parser = multipart_parser_init(boundary, &callbacks);
 8000aa0:	490d      	ldr	r1, [pc, #52]	; (8000ad8 <httpd_post_begin+0xb4>)
 8000aa2:	6938      	ldr	r0, [r7, #16]
 8000aa4:	f000 fb1c 	bl	80010e0 <multipart_parser_init>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	4a14      	ldr	r2, [pc, #80]	; (8000afc <httpd_post_begin+0xd8>)
 8000aac:	6013      	str	r3, [r2, #0]
			}

			return ERR_OK;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	e007      	b.n	8000ac2 <httpd_post_begin+0x9e>
	for (uint8_t i = 0; i < HTTP_POST_URI_NUM; i++) {
 8000ab2:	7dfb      	ldrb	r3, [r7, #23]
 8000ab4:	3301      	adds	r3, #1
 8000ab6:	75fb      	strb	r3, [r7, #23]
 8000ab8:	7dfb      	ldrb	r3, [r7, #23]
 8000aba:	2b01      	cmp	r3, #1
 8000abc:	d9bc      	bls.n	8000a38 <httpd_post_begin+0x14>
		}
	}

	//returns /404.html when response_uri is empty
	return ERR_VAL;
 8000abe:	f06f 0305 	mvn.w	r3, #5
}
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	3718      	adds	r7, #24
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	20000014 	.word	0x20000014
 8000ad0:	200000dc 	.word	0x200000dc
 8000ad4:	200000e0 	.word	0x200000e0
 8000ad8:	200007f0 	.word	0x200007f0
 8000adc:	08000941 	.word	0x08000941
 8000ae0:	0800095f 	.word	0x0800095f
 8000ae4:	08000979 	.word	0x08000979
 8000ae8:	08000993 	.word	0x08000993
 8000aec:	080009ad 	.word	0x080009ad
 8000af0:	080009c7 	.word	0x080009c7
 8000af4:	080009e1 	.word	0x080009e1
 8000af8:	200006c0 	.word	0x200006c0
 8000afc:	20000b2c 	.word	0x20000b2c

08000b00 <httpd_post_receive_data>:
 * @param connection Unique connection identifier.
 * @param p Received data.
 * @return ERR_OK: Data accepted.
 *         another err_t: Data denied, http_post_get_response_uri will be called.
 */
err_t httpd_post_receive_data(void *connection, struct pbuf *p) {
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b086      	sub	sp, #24
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
 8000b08:	6039      	str	r1, [r7, #0]

	char *data;
	err_t ret_val = ERR_ARG;
 8000b0a:	23f0      	movs	r3, #240	; 0xf0
 8000b0c:	74fb      	strb	r3, [r7, #19]

	struct http_state *hs = (struct http_state*) connection;
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	60fb      	str	r3, [r7, #12]
	if (hs != NULL && p != NULL) {
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d00d      	beq.n	8000b34 <httpd_post_receive_data+0x34>
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d00a      	beq.n	8000b34 <httpd_post_receive_data+0x34>
		data = p->payload;
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	685b      	ldr	r3, [r3, #4]
 8000b22:	617b      	str	r3, [r7, #20]
		ret_val = http_parse_post(data, http_post_content_len);
 8000b24:	4b0f      	ldr	r3, [pc, #60]	; (8000b64 <httpd_post_receive_data+0x64>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4619      	mov	r1, r3
 8000b2a:	6978      	ldr	r0, [r7, #20]
 8000b2c:	f7ff ff66 	bl	80009fc <http_parse_post>
 8000b30:	4603      	mov	r3, r0
 8000b32:	74fb      	strb	r3, [r7, #19]
		//printf("%s\r\n",data);
	}

	/****************************************************/
	strcat(joined_var, data); // Объединение строк.
 8000b34:	6979      	ldr	r1, [r7, #20]
 8000b36:	480c      	ldr	r0, [pc, #48]	; (8000b68 <httpd_post_receive_data+0x68>)
 8000b38:	f010 fd88 	bl	801164c <strcat>
	printf("+++++++++++++%s\n", joined_var);
 8000b3c:	490a      	ldr	r1, [pc, #40]	; (8000b68 <httpd_post_receive_data+0x68>)
 8000b3e:	480b      	ldr	r0, [pc, #44]	; (8000b6c <httpd_post_receive_data+0x6c>)
 8000b40:	f010 fc86 	bl	8011450 <iprintf>
	printf("\r\n");
 8000b44:	480a      	ldr	r0, [pc, #40]	; (8000b70 <httpd_post_receive_data+0x70>)
 8000b46:	f010 fd09 	bl	801155c <puts>

	if (p != NULL) {
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d002      	beq.n	8000b56 <httpd_post_receive_data+0x56>
		pbuf_free(p);
 8000b50:	6838      	ldr	r0, [r7, #0]
 8000b52:	f007 fab5 	bl	80080c0 <pbuf_free>
	}
	//printf("************%d\r\n", ret_val);
	return ret_val;
 8000b56:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	3718      	adds	r7, #24
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	200000e0 	.word	0x200000e0
 8000b68:	200006c4 	.word	0x200006c4
 8000b6c:	08012b70 	.word	0x08012b70
 8000b70:	08012b84 	.word	0x08012b84

08000b74 <httpd_post_finished>:
 * @param connection Unique connection identifier.
 * @param response_uri Filename of response file on success
 * @param response_uri_len Size of the 'response_uri' buffer.
 */
void httpd_post_finished(void *connection, char *response_uri,
		u16_t response_uri_len) {
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b090      	sub	sp, #64	; 0x40
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	60f8      	str	r0, [r7, #12]
 8000b7c:	60b9      	str	r1, [r7, #8]
 8000b7e:	4613      	mov	r3, r2
 8000b80:	80fb      	strh	r3, [r7, #6]

	struct http_state *hs = (struct http_state*) connection;
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	63bb      	str	r3, [r7, #56]	; 0x38
	if (hs != NULL) {
 8000b86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d00a      	beq.n	8000ba2 <httpd_post_finished+0x2e>
		strncpy(response_uri, a[http_post_uri_file_index], response_uri_len);
 8000b8c:	4b82      	ldr	r3, [pc, #520]	; (8000d98 <httpd_post_finished+0x224>)
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	461a      	mov	r2, r3
 8000b92:	4b82      	ldr	r3, [pc, #520]	; (8000d9c <httpd_post_finished+0x228>)
 8000b94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b98:	88fa      	ldrh	r2, [r7, #6]
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	68b8      	ldr	r0, [r7, #8]
 8000b9e:	f010 fd8b 	bl	80116b8 <strncpy>
	}

	/************************** Работа с переменными ********************************************/
	char *rest = joined_var;
 8000ba2:	4b7f      	ldr	r3, [pc, #508]	; (8000da0 <httpd_post_finished+0x22c>)
 8000ba4:	61bb      	str	r3, [r7, #24]
	printf("-------------%s\n", rest);
 8000ba6:	69bb      	ldr	r3, [r7, #24]
 8000ba8:	4619      	mov	r1, r3
 8000baa:	487e      	ldr	r0, [pc, #504]	; (8000da4 <httpd_post_finished+0x230>)
 8000bac:	f010 fc50 	bl	8011450 <iprintf>
	flag++;
 8000bb0:	4b7d      	ldr	r3, [pc, #500]	; (8000da8 <httpd_post_finished+0x234>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	3301      	adds	r3, #1
 8000bb6:	4a7c      	ldr	r2, [pc, #496]	; (8000da8 <httpd_post_finished+0x234>)
 8000bb8:	6013      	str	r3, [r2, #0]
	if (flag == 1) {
 8000bba:	4b7b      	ldr	r3, [pc, #492]	; (8000da8 <httpd_post_finished+0x234>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	2b01      	cmp	r3, #1
 8000bc0:	f040 80e0 	bne.w	8000d84 <httpd_post_finished+0x210>

		while ((token = strtok_r(rest, "&", &rest))) {
 8000bc4:	e0cc      	b.n	8000d60 <httpd_post_finished+0x1ec>
			printf("TOKEN is - %s\n", token);
 8000bc6:	4b79      	ldr	r3, [pc, #484]	; (8000dac <httpd_post_finished+0x238>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	4619      	mov	r1, r3
 8000bcc:	4878      	ldr	r0, [pc, #480]	; (8000db0 <httpd_post_finished+0x23c>)
 8000bce:	f010 fc3f 	bl	8011450 <iprintf>
			char *rest1 = token;
 8000bd2:	4b76      	ldr	r3, [pc, #472]	; (8000dac <httpd_post_finished+0x238>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	617b      	str	r3, [r7, #20]
			y = 0;
 8000bd8:	4b76      	ldr	r3, [pc, #472]	; (8000db4 <httpd_post_finished+0x240>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	601a      	str	r2, [r3, #0]
			char *name1;

			while ((token1 = strtok_r(rest1, "=", &rest1))) {
 8000bde:	e0b0      	b.n	8000d42 <httpd_post_finished+0x1ce>
				if (y == 0) {
 8000be0:	4b74      	ldr	r3, [pc, #464]	; (8000db4 <httpd_post_finished+0x240>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d102      	bne.n	8000bee <httpd_post_finished+0x7a>
					//printf("NAME %s\n", token1);
					name1 = token1;
 8000be8:	4b73      	ldr	r3, [pc, #460]	; (8000db8 <httpd_post_finished+0x244>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				if (y == 1) {
 8000bee:	4b71      	ldr	r3, [pc, #452]	; (8000db4 <httpd_post_finished+0x240>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	2b01      	cmp	r3, #1
 8000bf4:	f040 80a0 	bne.w	8000d38 <httpd_post_finished+0x1c4>
					if (strcmp(name1, "Bounce_interval") == 0) {
 8000bf8:	4970      	ldr	r1, [pc, #448]	; (8000dbc <httpd_post_finished+0x248>)
 8000bfa:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000bfc:	f7ff fae8 	bl	80001d0 <strcmp>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d10f      	bne.n	8000c26 <httpd_post_finished+0xb2>
						int d = from_int_to_char(token1);
 8000c06:	4b6c      	ldr	r3, [pc, #432]	; (8000db8 <httpd_post_finished+0x244>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f7ff fcc4 	bl	8000598 <from_int_to_char>
 8000c10:	61f8      	str	r0, [r7, #28]
						//printf("Yes1\n");
						Bounce_interval = d;
 8000c12:	4a6b      	ldr	r2, [pc, #428]	; (8000dc0 <httpd_post_finished+0x24c>)
 8000c14:	69fb      	ldr	r3, [r7, #28]
 8000c16:	6013      	str	r3, [r2, #0]
						printf("Bounce_interval - %d\n", Bounce_interval);
 8000c18:	4b69      	ldr	r3, [pc, #420]	; (8000dc0 <httpd_post_finished+0x24c>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	4869      	ldr	r0, [pc, #420]	; (8000dc4 <httpd_post_finished+0x250>)
 8000c20:	f010 fc16 	bl	8011450 <iprintf>
 8000c24:	e088      	b.n	8000d38 <httpd_post_finished+0x1c4>
					} else if (strcmp(name1, "Hold_interval") == 0) {
 8000c26:	4968      	ldr	r1, [pc, #416]	; (8000dc8 <httpd_post_finished+0x254>)
 8000c28:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000c2a:	f7ff fad1 	bl	80001d0 <strcmp>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d10f      	bne.n	8000c54 <httpd_post_finished+0xe0>
						int d = from_int_to_char(token1);
 8000c34:	4b60      	ldr	r3, [pc, #384]	; (8000db8 <httpd_post_finished+0x244>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f7ff fcad 	bl	8000598 <from_int_to_char>
 8000c3e:	6238      	str	r0, [r7, #32]
						// printf("Yes2\n");
						Hold_interval = d;
 8000c40:	4a62      	ldr	r2, [pc, #392]	; (8000dcc <httpd_post_finished+0x258>)
 8000c42:	6a3b      	ldr	r3, [r7, #32]
 8000c44:	6013      	str	r3, [r2, #0]
						printf("Hold_interval is - %d\n", Hold_interval);
 8000c46:	4b61      	ldr	r3, [pc, #388]	; (8000dcc <httpd_post_finished+0x258>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	4860      	ldr	r0, [pc, #384]	; (8000dd0 <httpd_post_finished+0x25c>)
 8000c4e:	f010 fbff 	bl	8011450 <iprintf>
 8000c52:	e071      	b.n	8000d38 <httpd_post_finished+0x1c4>
					} else if (strcmp(name1, "Repeat") == 0) {
 8000c54:	495f      	ldr	r1, [pc, #380]	; (8000dd4 <httpd_post_finished+0x260>)
 8000c56:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000c58:	f7ff faba 	bl	80001d0 <strcmp>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d10f      	bne.n	8000c82 <httpd_post_finished+0x10e>
						int d = from_int_to_char(token1);
 8000c62:	4b55      	ldr	r3, [pc, #340]	; (8000db8 <httpd_post_finished+0x244>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	4618      	mov	r0, r3
 8000c68:	f7ff fc96 	bl	8000598 <from_int_to_char>
 8000c6c:	6278      	str	r0, [r7, #36]	; 0x24
						// printf("Yes3\n");
						Repeat = d;
 8000c6e:	4a5a      	ldr	r2, [pc, #360]	; (8000dd8 <httpd_post_finished+0x264>)
 8000c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c72:	6013      	str	r3, [r2, #0]
						printf("Repeat - %d\n", Repeat);
 8000c74:	4b58      	ldr	r3, [pc, #352]	; (8000dd8 <httpd_post_finished+0x264>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4619      	mov	r1, r3
 8000c7a:	4858      	ldr	r0, [pc, #352]	; (8000ddc <httpd_post_finished+0x268>)
 8000c7c:	f010 fbe8 	bl	8011450 <iprintf>
 8000c80:	e05a      	b.n	8000d38 <httpd_post_finished+0x1c4>
					} else if (strcmp(name1, "Repeat_interval") == 0) {
 8000c82:	4957      	ldr	r1, [pc, #348]	; (8000de0 <httpd_post_finished+0x26c>)
 8000c84:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000c86:	f7ff faa3 	bl	80001d0 <strcmp>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d10f      	bne.n	8000cb0 <httpd_post_finished+0x13c>
						int d = from_int_to_char(token1);
 8000c90:	4b49      	ldr	r3, [pc, #292]	; (8000db8 <httpd_post_finished+0x244>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4618      	mov	r0, r3
 8000c96:	f7ff fc7f 	bl	8000598 <from_int_to_char>
 8000c9a:	62b8      	str	r0, [r7, #40]	; 0x28
						Repeat_interval = d;
 8000c9c:	4a51      	ldr	r2, [pc, #324]	; (8000de4 <httpd_post_finished+0x270>)
 8000c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ca0:	6013      	str	r3, [r2, #0]
						// printf("Yes4\n");
						printf("Repeat_interval - %d\n", Repeat_interval);
 8000ca2:	4b50      	ldr	r3, [pc, #320]	; (8000de4 <httpd_post_finished+0x270>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	484f      	ldr	r0, [pc, #316]	; (8000de8 <httpd_post_finished+0x274>)
 8000caa:	f010 fbd1 	bl	8011450 <iprintf>
 8000cae:	e043      	b.n	8000d38 <httpd_post_finished+0x1c4>
					} else if (strcmp(name1, "Double_click_interval") == 0) {
 8000cb0:	494e      	ldr	r1, [pc, #312]	; (8000dec <httpd_post_finished+0x278>)
 8000cb2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000cb4:	f7ff fa8c 	bl	80001d0 <strcmp>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d10f      	bne.n	8000cde <httpd_post_finished+0x16a>
						int d = from_int_to_char(token1);
 8000cbe:	4b3e      	ldr	r3, [pc, #248]	; (8000db8 <httpd_post_finished+0x244>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f7ff fc68 	bl	8000598 <from_int_to_char>
 8000cc8:	62f8      	str	r0, [r7, #44]	; 0x2c
						Double_click_interval = d;
 8000cca:	4a49      	ldr	r2, [pc, #292]	; (8000df0 <httpd_post_finished+0x27c>)
 8000ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cce:	6013      	str	r3, [r2, #0]
						// printf("Yes5\n");
						printf("Double_click_interval - %d\n",
 8000cd0:	4b47      	ldr	r3, [pc, #284]	; (8000df0 <httpd_post_finished+0x27c>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4847      	ldr	r0, [pc, #284]	; (8000df4 <httpd_post_finished+0x280>)
 8000cd8:	f010 fbba 	bl	8011450 <iprintf>
 8000cdc:	e02c      	b.n	8000d38 <httpd_post_finished+0x1c4>
								Double_click_interval);
					} else if (strcmp(name1, "Prevent_Click") == 0) {
 8000cde:	4946      	ldr	r1, [pc, #280]	; (8000df8 <httpd_post_finished+0x284>)
 8000ce0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000ce2:	f7ff fa75 	bl	80001d0 <strcmp>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d10f      	bne.n	8000d0c <httpd_post_finished+0x198>
						int d = from_int_to_char(token1);
 8000cec:	4b32      	ldr	r3, [pc, #200]	; (8000db8 <httpd_post_finished+0x244>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f7ff fc51 	bl	8000598 <from_int_to_char>
 8000cf6:	6338      	str	r0, [r7, #48]	; 0x30
						Prevent_Click = d;
 8000cf8:	4a40      	ldr	r2, [pc, #256]	; (8000dfc <httpd_post_finished+0x288>)
 8000cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cfc:	6013      	str	r3, [r2, #0]
						// printf("Yes6\n");
						printf("Prevent_Click - %d\n", Prevent_Click);
 8000cfe:	4b3f      	ldr	r3, [pc, #252]	; (8000dfc <httpd_post_finished+0x288>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	4619      	mov	r1, r3
 8000d04:	483e      	ldr	r0, [pc, #248]	; (8000e00 <httpd_post_finished+0x28c>)
 8000d06:	f010 fba3 	bl	8011450 <iprintf>
 8000d0a:	e015      	b.n	8000d38 <httpd_post_finished+0x1c4>
					} else if (strcmp(name1, "OnOff") == 0) {
 8000d0c:	493d      	ldr	r1, [pc, #244]	; (8000e04 <httpd_post_finished+0x290>)
 8000d0e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000d10:	f7ff fa5e 	bl	80001d0 <strcmp>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d10e      	bne.n	8000d38 <httpd_post_finished+0x1c4>
						int d = from_int_to_char(token1);
 8000d1a:	4b27      	ldr	r3, [pc, #156]	; (8000db8 <httpd_post_finished+0x244>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f7ff fc3a 	bl	8000598 <from_int_to_char>
 8000d24:	6378      	str	r0, [r7, #52]	; 0x34
						// printf("Yes7\n");
						OnOff = d; //!?!?!?!?!???!?!??!?!?!??!
 8000d26:	4a38      	ldr	r2, [pc, #224]	; (8000e08 <httpd_post_finished+0x294>)
 8000d28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d2a:	6013      	str	r3, [r2, #0]
						printf("OnOff - %d\n", OnOff);
 8000d2c:	4b36      	ldr	r3, [pc, #216]	; (8000e08 <httpd_post_finished+0x294>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4619      	mov	r1, r3
 8000d32:	4836      	ldr	r0, [pc, #216]	; (8000e0c <httpd_post_finished+0x298>)
 8000d34:	f010 fb8c 	bl	8011450 <iprintf>
					}
					//printf("VAL %s\n", token1);
				}
				y++;
 8000d38:	4b1e      	ldr	r3, [pc, #120]	; (8000db4 <httpd_post_finished+0x240>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	3301      	adds	r3, #1
 8000d3e:	4a1d      	ldr	r2, [pc, #116]	; (8000db4 <httpd_post_finished+0x240>)
 8000d40:	6013      	str	r3, [r2, #0]
			while ((token1 = strtok_r(rest1, "=", &rest1))) {
 8000d42:	697b      	ldr	r3, [r7, #20]
 8000d44:	f107 0214 	add.w	r2, r7, #20
 8000d48:	4931      	ldr	r1, [pc, #196]	; (8000e10 <httpd_post_finished+0x29c>)
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f010 fd3a 	bl	80117c4 <strtok_r>
 8000d50:	4603      	mov	r3, r0
 8000d52:	4a19      	ldr	r2, [pc, #100]	; (8000db8 <httpd_post_finished+0x244>)
 8000d54:	6013      	str	r3, [r2, #0]
 8000d56:	4b18      	ldr	r3, [pc, #96]	; (8000db8 <httpd_post_finished+0x244>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	f47f af40 	bne.w	8000be0 <httpd_post_finished+0x6c>
		while ((token = strtok_r(rest, "&", &rest))) {
 8000d60:	69bb      	ldr	r3, [r7, #24]
 8000d62:	f107 0218 	add.w	r2, r7, #24
 8000d66:	492b      	ldr	r1, [pc, #172]	; (8000e14 <httpd_post_finished+0x2a0>)
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f010 fd2b 	bl	80117c4 <strtok_r>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	4a0e      	ldr	r2, [pc, #56]	; (8000dac <httpd_post_finished+0x238>)
 8000d72:	6013      	str	r3, [r2, #0]
 8000d74:	4b0d      	ldr	r3, [pc, #52]	; (8000dac <httpd_post_finished+0x238>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	f47f af24 	bne.w	8000bc6 <httpd_post_finished+0x52>
			}
		}
		flag = 0;
 8000d7e:	4b0a      	ldr	r3, [pc, #40]	; (8000da8 <httpd_post_finished+0x234>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	601a      	str	r2, [r3, #0]
	}
	/****************************************************/

	/* End the parser */
	multipart_parser_free(_parser);
 8000d84:	4b24      	ldr	r3, [pc, #144]	; (8000e18 <httpd_post_finished+0x2a4>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f000 f9e0 	bl	800114e <multipart_parser_free>
}
 8000d8e:	bf00      	nop
 8000d90:	3740      	adds	r7, #64	; 0x40
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	200000dc 	.word	0x200000dc
 8000d9c:	20000014 	.word	0x20000014
 8000da0:	200006c4 	.word	0x200006c4
 8000da4:	08012b88 	.word	0x08012b88
 8000da8:	200000d0 	.word	0x200000d0
 8000dac:	20000c5c 	.word	0x20000c5c
 8000db0:	08012b9c 	.word	0x08012b9c
 8000db4:	200000cc 	.word	0x200000cc
 8000db8:	200006b8 	.word	0x200006b8
 8000dbc:	08012a50 	.word	0x08012a50
 8000dc0:	200000b0 	.word	0x200000b0
 8000dc4:	08012bac 	.word	0x08012bac
 8000dc8:	08012a78 	.word	0x08012a78
 8000dcc:	200000b4 	.word	0x200000b4
 8000dd0:	08012bc4 	.word	0x08012bc4
 8000dd4:	08012a9c 	.word	0x08012a9c
 8000dd8:	200000b8 	.word	0x200000b8
 8000ddc:	08012bdc 	.word	0x08012bdc
 8000de0:	08012ab4 	.word	0x08012ab4
 8000de4:	200000bc 	.word	0x200000bc
 8000de8:	08012bec 	.word	0x08012bec
 8000dec:	08012adc 	.word	0x08012adc
 8000df0:	200000c0 	.word	0x200000c0
 8000df4:	08012c04 	.word	0x08012c04
 8000df8:	08012b10 	.word	0x08012b10
 8000dfc:	200000c4 	.word	0x200000c4
 8000e00:	08012c20 	.word	0x08012c20
 8000e04:	08012b34 	.word	0x08012b34
 8000e08:	200000c8 	.word	0x200000c8
 8000e0c:	08012c34 	.word	0x08012c34
 8000e10:	08012c40 	.word	0x08012c40
 8000e14:	08012c44 	.word	0x08012c44
 8000e18:	20000b2c 	.word	0x20000b2c

08000e1c <http_server_init>:
////////////////////  END of POST request ////////////////////////

void http_server_init(void) {
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
	httpd_init();
 8000e20:	f005 fd2a 	bl	8006878 <httpd_init>
	http_set_ssi_handler(ssi_handler, (char const**) TAGS, 4);
 8000e24:	4b06      	ldr	r3, [pc, #24]	; (8000e40 <http_server_init+0x24>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	2204      	movs	r2, #4
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	4805      	ldr	r0, [pc, #20]	; (8000e44 <http_server_init+0x28>)
 8000e2e:	f005 fd43 	bl	80068b8 <http_set_ssi_handler>
	http_set_cgi_handlers(&FORM_CGI, 1); // Это пример когда у нас всего один "Handler" пример из видео.
 8000e32:	2101      	movs	r1, #1
 8000e34:	4804      	ldr	r0, [pc, #16]	; (8000e48 <http_server_init+0x2c>)
 8000e36:	f005 fd81 	bl	800693c <http_set_cgi_handlers>
}
 8000e3a:	bf00      	nop
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	20000010 	.word	0x20000010
 8000e44:	080005b9 	.word	0x080005b9
 8000e48:	08015f40 	.word	0x08015f40

08000e4c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000e54:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000e58:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000e5c:	f003 0301 	and.w	r3, r3, #1
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d013      	beq.n	8000e8c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000e64:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000e68:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000e6c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d00b      	beq.n	8000e8c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000e74:	e000      	b.n	8000e78 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000e76:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000e78:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d0f9      	beq.n	8000e76 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000e82:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000e86:	687a      	ldr	r2, [r7, #4]
 8000e88:	b2d2      	uxtb	r2, r2
 8000e8a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000e8c:	687b      	ldr	r3, [r7, #4]
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	370c      	adds	r7, #12
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
	...

08000e9c <_write>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART6_UART_Init(void);
/* USER CODE BEGIN PFP */
int _write(int file, char *ptr, int len) {
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b086      	sub	sp, #24
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	60f8      	str	r0, [r7, #12]
 8000ea4:	60b9      	str	r1, [r7, #8]
 8000ea6:	607a      	str	r2, [r7, #4]
	int i;
	HAL_UART_Transmit(&huart6, (uint8_t*) ptr, len, 50);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	b29a      	uxth	r2, r3
 8000eac:	2332      	movs	r3, #50	; 0x32
 8000eae:	68b9      	ldr	r1, [r7, #8]
 8000eb0:	480c      	ldr	r0, [pc, #48]	; (8000ee4 <_write+0x48>)
 8000eb2:	f002 fe9c 	bl	8003bee <HAL_UART_Transmit>
	for (i = 0; i < len; i++) {
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	617b      	str	r3, [r7, #20]
 8000eba:	e009      	b.n	8000ed0 <_write+0x34>
		ITM_SendChar(*ptr++);
 8000ebc:	68bb      	ldr	r3, [r7, #8]
 8000ebe:	1c5a      	adds	r2, r3, #1
 8000ec0:	60ba      	str	r2, [r7, #8]
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f7ff ffc1 	bl	8000e4c <ITM_SendChar>
	for (i = 0; i < len; i++) {
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	3301      	adds	r3, #1
 8000ece:	617b      	str	r3, [r7, #20]
 8000ed0:	697a      	ldr	r2, [r7, #20]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	429a      	cmp	r2, r3
 8000ed6:	dbf1      	blt.n	8000ebc <_write+0x20>
	}
	return len;
 8000ed8:	687b      	ldr	r3, [r7, #4]
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	3718      	adds	r7, #24
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	20000c94 	.word	0x20000c94

08000ee8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 HAL_Init();
 8000eec:	f000 fd80 	bl	80019f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ef0:	f000 f810 	bl	8000f14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ef4:	f000 f8a2 	bl	800103c <MX_GPIO_Init>
  MX_USART6_UART_Init();
 8000ef8:	f000 f876 	bl	8000fe8 <MX_USART6_UART_Init>
  MX_LWIP_Init();
 8000efc:	f003 f940 	bl	8004180 <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */
	http_server_init();
 8000f00:	f7ff ff8c 	bl	8000e1c <http_server_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
      ethernetif_input(&gnetif);
 8000f04:	4802      	ldr	r0, [pc, #8]	; (8000f10 <main+0x28>)
 8000f06:	f003 fd13 	bl	8004930 <ethernetif_input>
      sys_check_timeouts();
 8000f0a:	f00d fcc5 	bl	800e898 <sys_check_timeouts>
      ethernetif_input(&gnetif);
 8000f0e:	e7f9      	b.n	8000f04 <main+0x1c>
 8000f10:	20000c60 	.word	0x20000c60

08000f14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b094      	sub	sp, #80	; 0x50
 8000f18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f1a:	f107 0320 	add.w	r3, r7, #32
 8000f1e:	2230      	movs	r2, #48	; 0x30
 8000f20:	2100      	movs	r1, #0
 8000f22:	4618      	mov	r0, r3
 8000f24:	f010 f9e2 	bl	80112ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f28:	f107 030c 	add.w	r3, r7, #12
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	601a      	str	r2, [r3, #0]
 8000f30:	605a      	str	r2, [r3, #4]
 8000f32:	609a      	str	r2, [r3, #8]
 8000f34:	60da      	str	r2, [r3, #12]
 8000f36:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f38:	2300      	movs	r3, #0
 8000f3a:	60bb      	str	r3, [r7, #8]
 8000f3c:	4b28      	ldr	r3, [pc, #160]	; (8000fe0 <SystemClock_Config+0xcc>)
 8000f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f40:	4a27      	ldr	r2, [pc, #156]	; (8000fe0 <SystemClock_Config+0xcc>)
 8000f42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f46:	6413      	str	r3, [r2, #64]	; 0x40
 8000f48:	4b25      	ldr	r3, [pc, #148]	; (8000fe0 <SystemClock_Config+0xcc>)
 8000f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f50:	60bb      	str	r3, [r7, #8]
 8000f52:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f54:	2300      	movs	r3, #0
 8000f56:	607b      	str	r3, [r7, #4]
 8000f58:	4b22      	ldr	r3, [pc, #136]	; (8000fe4 <SystemClock_Config+0xd0>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a21      	ldr	r2, [pc, #132]	; (8000fe4 <SystemClock_Config+0xd0>)
 8000f5e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f62:	6013      	str	r3, [r2, #0]
 8000f64:	4b1f      	ldr	r3, [pc, #124]	; (8000fe4 <SystemClock_Config+0xd0>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f6c:	607b      	str	r3, [r7, #4]
 8000f6e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f70:	2301      	movs	r3, #1
 8000f72:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f74:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f78:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f7e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f82:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000f84:	2304      	movs	r3, #4
 8000f86:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000f88:	23a8      	movs	r3, #168	; 0xa8
 8000f8a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f8c:	2302      	movs	r3, #2
 8000f8e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000f90:	2304      	movs	r3, #4
 8000f92:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f94:	f107 0320 	add.w	r3, r7, #32
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f002 f967 	bl	800326c <HAL_RCC_OscConfig>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000fa4:	f000 f88e 	bl	80010c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fa8:	230f      	movs	r3, #15
 8000faa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fac:	2302      	movs	r3, #2
 8000fae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000fb4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000fb8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000fba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fbe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000fc0:	f107 030c 	add.w	r3, r7, #12
 8000fc4:	2105      	movs	r1, #5
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f002 fbc8 	bl	800375c <HAL_RCC_ClockConfig>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000fd2:	f000 f877 	bl	80010c4 <Error_Handler>
  }
}
 8000fd6:	bf00      	nop
 8000fd8:	3750      	adds	r7, #80	; 0x50
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	40023800 	.word	0x40023800
 8000fe4:	40007000 	.word	0x40007000

08000fe8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000fec:	4b11      	ldr	r3, [pc, #68]	; (8001034 <MX_USART6_UART_Init+0x4c>)
 8000fee:	4a12      	ldr	r2, [pc, #72]	; (8001038 <MX_USART6_UART_Init+0x50>)
 8000ff0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000ff2:	4b10      	ldr	r3, [pc, #64]	; (8001034 <MX_USART6_UART_Init+0x4c>)
 8000ff4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ff8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000ffa:	4b0e      	ldr	r3, [pc, #56]	; (8001034 <MX_USART6_UART_Init+0x4c>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001000:	4b0c      	ldr	r3, [pc, #48]	; (8001034 <MX_USART6_UART_Init+0x4c>)
 8001002:	2200      	movs	r2, #0
 8001004:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001006:	4b0b      	ldr	r3, [pc, #44]	; (8001034 <MX_USART6_UART_Init+0x4c>)
 8001008:	2200      	movs	r2, #0
 800100a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800100c:	4b09      	ldr	r3, [pc, #36]	; (8001034 <MX_USART6_UART_Init+0x4c>)
 800100e:	220c      	movs	r2, #12
 8001010:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001012:	4b08      	ldr	r3, [pc, #32]	; (8001034 <MX_USART6_UART_Init+0x4c>)
 8001014:	2200      	movs	r2, #0
 8001016:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001018:	4b06      	ldr	r3, [pc, #24]	; (8001034 <MX_USART6_UART_Init+0x4c>)
 800101a:	2200      	movs	r2, #0
 800101c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800101e:	4805      	ldr	r0, [pc, #20]	; (8001034 <MX_USART6_UART_Init+0x4c>)
 8001020:	f002 fd98 	bl	8003b54 <HAL_UART_Init>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800102a:	f000 f84b 	bl	80010c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800102e:	bf00      	nop
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	20000c94 	.word	0x20000c94
 8001038:	40011400 	.word	0x40011400

0800103c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800103c:	b480      	push	{r7}
 800103e:	b085      	sub	sp, #20
 8001040:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001042:	2300      	movs	r3, #0
 8001044:	60fb      	str	r3, [r7, #12]
 8001046:	4b1e      	ldr	r3, [pc, #120]	; (80010c0 <MX_GPIO_Init+0x84>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104a:	4a1d      	ldr	r2, [pc, #116]	; (80010c0 <MX_GPIO_Init+0x84>)
 800104c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001050:	6313      	str	r3, [r2, #48]	; 0x30
 8001052:	4b1b      	ldr	r3, [pc, #108]	; (80010c0 <MX_GPIO_Init+0x84>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001056:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800105a:	60fb      	str	r3, [r7, #12]
 800105c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800105e:	2300      	movs	r3, #0
 8001060:	60bb      	str	r3, [r7, #8]
 8001062:	4b17      	ldr	r3, [pc, #92]	; (80010c0 <MX_GPIO_Init+0x84>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001066:	4a16      	ldr	r2, [pc, #88]	; (80010c0 <MX_GPIO_Init+0x84>)
 8001068:	f043 0304 	orr.w	r3, r3, #4
 800106c:	6313      	str	r3, [r2, #48]	; 0x30
 800106e:	4b14      	ldr	r3, [pc, #80]	; (80010c0 <MX_GPIO_Init+0x84>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001072:	f003 0304 	and.w	r3, r3, #4
 8001076:	60bb      	str	r3, [r7, #8]
 8001078:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800107a:	2300      	movs	r3, #0
 800107c:	607b      	str	r3, [r7, #4]
 800107e:	4b10      	ldr	r3, [pc, #64]	; (80010c0 <MX_GPIO_Init+0x84>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001082:	4a0f      	ldr	r2, [pc, #60]	; (80010c0 <MX_GPIO_Init+0x84>)
 8001084:	f043 0301 	orr.w	r3, r3, #1
 8001088:	6313      	str	r3, [r2, #48]	; 0x30
 800108a:	4b0d      	ldr	r3, [pc, #52]	; (80010c0 <MX_GPIO_Init+0x84>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108e:	f003 0301 	and.w	r3, r3, #1
 8001092:	607b      	str	r3, [r7, #4]
 8001094:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001096:	2300      	movs	r3, #0
 8001098:	603b      	str	r3, [r7, #0]
 800109a:	4b09      	ldr	r3, [pc, #36]	; (80010c0 <MX_GPIO_Init+0x84>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109e:	4a08      	ldr	r2, [pc, #32]	; (80010c0 <MX_GPIO_Init+0x84>)
 80010a0:	f043 0302 	orr.w	r3, r3, #2
 80010a4:	6313      	str	r3, [r2, #48]	; 0x30
 80010a6:	4b06      	ldr	r3, [pc, #24]	; (80010c0 <MX_GPIO_Init+0x84>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010aa:	f003 0302 	and.w	r3, r3, #2
 80010ae:	603b      	str	r3, [r7, #0]
 80010b0:	683b      	ldr	r3, [r7, #0]

}
 80010b2:	bf00      	nop
 80010b4:	3714      	adds	r7, #20
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	40023800 	.word	0x40023800

080010c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010c8:	b672      	cpsid	i
}
 80010ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010cc:	e7fe      	b.n	80010cc <Error_Handler+0x8>

080010ce <multipart_log>:
#include <stdio.h>
#include <stdarg.h>
#include <string.h>

static void multipart_log(const char * format, ...)
{
 80010ce:	b40f      	push	{r0, r1, r2, r3}
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0

    fprintf(stderr, "[HTTP_MULTIPART_PARSER] %s:%d: ", __FILE__, __LINE__);
    vfprintf(stderr, format, args);
    fprintf(stderr, "\n");
#endif
}
 80010d4:	bf00      	nop
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	b004      	add	sp, #16
 80010de:	4770      	bx	lr

080010e0 <multipart_parser_init>:
  s_part_data_final_hyphen,
  s_end
};

multipart_parser* multipart_parser_init
    (const char *boundary, const multipart_parser_settings* settings) {
 80010e0:	b590      	push	{r4, r7, lr}
 80010e2:	b085      	sub	sp, #20
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	6039      	str	r1, [r7, #0]

  multipart_parser* p = malloc(sizeof(multipart_parser) +
                               strlen(boundary) +
 80010ea:	6878      	ldr	r0, [r7, #4]
 80010ec:	f7ff f87a 	bl	80001e4 <strlen>
 80010f0:	4604      	mov	r4, r0
                               strlen(boundary) + 9);
 80010f2:	6878      	ldr	r0, [r7, #4]
 80010f4:	f7ff f876 	bl	80001e4 <strlen>
 80010f8:	4603      	mov	r3, r0
                               strlen(boundary) +
 80010fa:	4423      	add	r3, r4
  multipart_parser* p = malloc(sizeof(multipart_parser) +
 80010fc:	3325      	adds	r3, #37	; 0x25
 80010fe:	4618      	mov	r0, r3
 8001100:	f010 f8ae 	bl	8011260 <malloc>
 8001104:	4603      	mov	r3, r0
 8001106:	60fb      	str	r3, [r7, #12]

  strcpy(p->multipart_boundary, boundary);
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	3318      	adds	r3, #24
 800110c:	6879      	ldr	r1, [r7, #4]
 800110e:	4618      	mov	r0, r3
 8001110:	f010 fab8 	bl	8011684 <strcpy>
  p->boundary_length = strlen(boundary);
 8001114:	6878      	ldr	r0, [r7, #4]
 8001116:	f7ff f865 	bl	80001e4 <strlen>
 800111a:	4602      	mov	r2, r0
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	609a      	str	r2, [r3, #8]

  p->lookbehind = (p->multipart_boundary + p->boundary_length + 1);
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	f103 0218 	add.w	r2, r3, #24
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	689b      	ldr	r3, [r3, #8]
 800112a:	3301      	adds	r3, #1
 800112c:	441a      	add	r2, r3
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	615a      	str	r2, [r3, #20]

  p->index = 0;
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	2200      	movs	r2, #0
 8001136:	605a      	str	r2, [r3, #4]
  p->state = s_start;
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	2202      	movs	r2, #2
 800113c:	731a      	strb	r2, [r3, #12]
  p->settings = settings;
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	683a      	ldr	r2, [r7, #0]
 8001142:	611a      	str	r2, [r3, #16]

  return p;
 8001144:	68fb      	ldr	r3, [r7, #12]
}
 8001146:	4618      	mov	r0, r3
 8001148:	3714      	adds	r7, #20
 800114a:	46bd      	mov	sp, r7
 800114c:	bd90      	pop	{r4, r7, pc}

0800114e <multipart_parser_free>:

void multipart_parser_free(multipart_parser* p) {
 800114e:	b580      	push	{r7, lr}
 8001150:	b082      	sub	sp, #8
 8001152:	af00      	add	r7, sp, #0
 8001154:	6078      	str	r0, [r7, #4]
  free(p);
 8001156:	6878      	ldr	r0, [r7, #4]
 8001158:	f010 f88a 	bl	8011270 <free>
}
 800115c:	bf00      	nop
 800115e:	3708      	adds	r7, #8
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}

08001164 <multipart_parser_execute>:

void *multipart_parser_get_data(multipart_parser *p) {
    return p->data;
}

size_t multipart_parser_execute(multipart_parser* p, const char *buf, size_t len) {
 8001164:	b580      	push	{r7, lr}
 8001166:	b088      	sub	sp, #32
 8001168:	af00      	add	r7, sp, #0
 800116a:	60f8      	str	r0, [r7, #12]
 800116c:	60b9      	str	r1, [r7, #8]
 800116e:	607a      	str	r2, [r7, #4]
  size_t i = 0;
 8001170:	2300      	movs	r3, #0
 8001172:	61fb      	str	r3, [r7, #28]
  size_t mark = 0;
 8001174:	2300      	movs	r3, #0
 8001176:	61bb      	str	r3, [r7, #24]
  char c, cl;
  int is_last = 0;
 8001178:	2300      	movs	r3, #0
 800117a:	617b      	str	r3, [r7, #20]

  while(i < len) {
 800117c:	e29a      	b.n	80016b4 <multipart_parser_execute+0x550>
    c = buf[i];
 800117e:	68ba      	ldr	r2, [r7, #8]
 8001180:	69fb      	ldr	r3, [r7, #28]
 8001182:	4413      	add	r3, r2
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	74fb      	strb	r3, [r7, #19]
    is_last = (i == (len - 1));
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	3b01      	subs	r3, #1
 800118c:	69fa      	ldr	r2, [r7, #28]
 800118e:	429a      	cmp	r2, r3
 8001190:	bf0c      	ite	eq
 8001192:	2301      	moveq	r3, #1
 8001194:	2300      	movne	r3, #0
 8001196:	b2db      	uxtb	r3, r3
 8001198:	617b      	str	r3, [r7, #20]
    switch (p->state) {
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	7b1b      	ldrb	r3, [r3, #12]
 800119e:	3b02      	subs	r3, #2
 80011a0:	2b0f      	cmp	r3, #15
 80011a2:	f200 8274 	bhi.w	800168e <multipart_parser_execute+0x52a>
 80011a6:	a201      	add	r2, pc, #4	; (adr r2, 80011ac <multipart_parser_execute+0x48>)
 80011a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011ac:	080011ed 	.word	0x080011ed
 80011b0:	080011ff 	.word	0x080011ff
 80011b4:	0800128b 	.word	0x0800128b
 80011b8:	0800129b 	.word	0x0800129b
 80011bc:	0800135f 	.word	0x0800135f
 80011c0:	08001377 	.word	0x08001377
 80011c4:	0800138f 	.word	0x0800138f
 80011c8:	08001409 	.word	0x08001409
 80011cc:	08001421 	.word	0x08001421
 80011d0:	0800147b 	.word	0x0800147b
 80011d4:	08001501 	.word	0x08001501
 80011d8:	08001559 	.word	0x08001559
 80011dc:	080015f3 	.word	0x080015f3
 80011e0:	0800164f 	.word	0x0800164f
 80011e4:	08001619 	.word	0x08001619
 80011e8:	08001683 	.word	0x08001683
      case s_start:
        multipart_log("s_start");
 80011ec:	4895      	ldr	r0, [pc, #596]	; (8001444 <multipart_parser_execute+0x2e0>)
 80011ee:	f7ff ff6e 	bl	80010ce <multipart_log>
        p->index = 0;
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	2200      	movs	r2, #0
 80011f6:	605a      	str	r2, [r3, #4]
        p->state = s_start_boundary;
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	2203      	movs	r2, #3
 80011fc:	731a      	strb	r2, [r3, #12]

      /* fallthrough */
      case s_start_boundary:
        multipart_log("s_start_boundary");
 80011fe:	4892      	ldr	r0, [pc, #584]	; (8001448 <multipart_parser_execute+0x2e4>)
 8001200:	f7ff ff65 	bl	80010ce <multipart_log>
        if (p->index == p->boundary_length) {
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	685a      	ldr	r2, [r3, #4]
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	689b      	ldr	r3, [r3, #8]
 800120c:	429a      	cmp	r2, r3
 800120e:	d10a      	bne.n	8001226 <multipart_parser_execute+0xc2>
          if (c != CR) {
 8001210:	7cfb      	ldrb	r3, [r7, #19]
 8001212:	2b0d      	cmp	r3, #13
 8001214:	d001      	beq.n	800121a <multipart_parser_execute+0xb6>
            return i;
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	e252      	b.n	80016c0 <multipart_parser_execute+0x55c>
          }
          p->index++;
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	1c5a      	adds	r2, r3, #1
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	605a      	str	r2, [r3, #4]
          break;
 8001224:	e243      	b.n	80016ae <multipart_parser_execute+0x54a>
        } else if (p->index == (p->boundary_length + 1)) {
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	685a      	ldr	r2, [r3, #4]
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	689b      	ldr	r3, [r3, #8]
 800122e:	3301      	adds	r3, #1
 8001230:	429a      	cmp	r2, r3
 8001232:	d11a      	bne.n	800126a <multipart_parser_execute+0x106>
          if (c != LF) {
 8001234:	7cfb      	ldrb	r3, [r7, #19]
 8001236:	2b0a      	cmp	r3, #10
 8001238:	d001      	beq.n	800123e <multipart_parser_execute+0xda>
            return i;
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	e240      	b.n	80016c0 <multipart_parser_execute+0x55c>
          }
          p->index = 0;
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	2200      	movs	r2, #0
 8001242:	605a      	str	r2, [r3, #4]
          NOTIFY_CB(part_data_begin);
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	691b      	ldr	r3, [r3, #16]
 8001248:	68db      	ldr	r3, [r3, #12]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d009      	beq.n	8001262 <multipart_parser_execute+0xfe>
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	691b      	ldr	r3, [r3, #16]
 8001252:	68db      	ldr	r3, [r3, #12]
 8001254:	68f8      	ldr	r0, [r7, #12]
 8001256:	4798      	blx	r3
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <multipart_parser_execute+0xfe>
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	e22e      	b.n	80016c0 <multipart_parser_execute+0x55c>
          p->state = s_header_field_start;
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	2204      	movs	r2, #4
 8001266:	731a      	strb	r2, [r3, #12]
          break;
 8001268:	e221      	b.n	80016ae <multipart_parser_execute+0x54a>
        }
        if (c != p->multipart_boundary[p->index]) {
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	68fa      	ldr	r2, [r7, #12]
 8001270:	4413      	add	r3, r2
 8001272:	7e1b      	ldrb	r3, [r3, #24]
 8001274:	7cfa      	ldrb	r2, [r7, #19]
 8001276:	429a      	cmp	r2, r3
 8001278:	d001      	beq.n	800127e <multipart_parser_execute+0x11a>
          return i;
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	e220      	b.n	80016c0 <multipart_parser_execute+0x55c>
        }
        p->index++;
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	1c5a      	adds	r2, r3, #1
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	605a      	str	r2, [r3, #4]
        break;
 8001288:	e211      	b.n	80016ae <multipart_parser_execute+0x54a>

      case s_header_field_start:
        multipart_log("s_header_field_start");
 800128a:	4870      	ldr	r0, [pc, #448]	; (800144c <multipart_parser_execute+0x2e8>)
 800128c:	f7ff ff1f 	bl	80010ce <multipart_log>
        mark = i;
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	61bb      	str	r3, [r7, #24]
        p->state = s_header_field;
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	2205      	movs	r2, #5
 8001298:	731a      	strb	r2, [r3, #12]

      /* fallthrough */
      case s_header_field:
        multipart_log("s_header_field");
 800129a:	486d      	ldr	r0, [pc, #436]	; (8001450 <multipart_parser_execute+0x2ec>)
 800129c:	f7ff ff17 	bl	80010ce <multipart_log>
        if (c == CR) {
 80012a0:	7cfb      	ldrb	r3, [r7, #19]
 80012a2:	2b0d      	cmp	r3, #13
 80012a4:	d103      	bne.n	80012ae <multipart_parser_execute+0x14a>
          p->state = s_headers_almost_done;
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	2206      	movs	r2, #6
 80012aa:	731a      	strb	r2, [r3, #12]
          break;
 80012ac:	e1ff      	b.n	80016ae <multipart_parser_execute+0x54a>
        }

        if (c == ':') {
 80012ae:	7cfb      	ldrb	r3, [r7, #19]
 80012b0:	2b3a      	cmp	r3, #58	; 0x3a
 80012b2:	d119      	bne.n	80012e8 <multipart_parser_execute+0x184>
          EMIT_DATA_CB(header_field, buf + mark, i - mark);
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	691b      	ldr	r3, [r3, #16]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d010      	beq.n	80012e0 <multipart_parser_execute+0x17c>
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	691b      	ldr	r3, [r3, #16]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	68b9      	ldr	r1, [r7, #8]
 80012c6:	69ba      	ldr	r2, [r7, #24]
 80012c8:	1888      	adds	r0, r1, r2
 80012ca:	69f9      	ldr	r1, [r7, #28]
 80012cc:	69ba      	ldr	r2, [r7, #24]
 80012ce:	1a8a      	subs	r2, r1, r2
 80012d0:	4601      	mov	r1, r0
 80012d2:	68f8      	ldr	r0, [r7, #12]
 80012d4:	4798      	blx	r3
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <multipart_parser_execute+0x17c>
 80012dc:	69fb      	ldr	r3, [r7, #28]
 80012de:	e1ef      	b.n	80016c0 <multipart_parser_execute+0x55c>
          p->state = s_header_value_start;
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	2207      	movs	r2, #7
 80012e4:	731a      	strb	r2, [r3, #12]
          break;
 80012e6:	e1e2      	b.n	80016ae <multipart_parser_execute+0x54a>
        }

        cl = tolower(c);
 80012e8:	7cfb      	ldrb	r3, [r7, #19]
 80012ea:	74bb      	strb	r3, [r7, #18]
 80012ec:	7cbb      	ldrb	r3, [r7, #18]
 80012ee:	3301      	adds	r3, #1
 80012f0:	4a58      	ldr	r2, [pc, #352]	; (8001454 <multipart_parser_execute+0x2f0>)
 80012f2:	4413      	add	r3, r2
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	f003 0303 	and.w	r3, r3, #3
 80012fa:	2b01      	cmp	r3, #1
 80012fc:	d102      	bne.n	8001304 <multipart_parser_execute+0x1a0>
 80012fe:	7cbb      	ldrb	r3, [r7, #18]
 8001300:	3320      	adds	r3, #32
 8001302:	e000      	b.n	8001306 <multipart_parser_execute+0x1a2>
 8001304:	7cbb      	ldrb	r3, [r7, #18]
 8001306:	747b      	strb	r3, [r7, #17]
        if ((c != '-') && (cl < 'a' || cl > 'z')) {
 8001308:	7cfb      	ldrb	r3, [r7, #19]
 800130a:	2b2d      	cmp	r3, #45	; 0x2d
 800130c:	d00a      	beq.n	8001324 <multipart_parser_execute+0x1c0>
 800130e:	7c7b      	ldrb	r3, [r7, #17]
 8001310:	2b60      	cmp	r3, #96	; 0x60
 8001312:	d902      	bls.n	800131a <multipart_parser_execute+0x1b6>
 8001314:	7c7b      	ldrb	r3, [r7, #17]
 8001316:	2b7a      	cmp	r3, #122	; 0x7a
 8001318:	d904      	bls.n	8001324 <multipart_parser_execute+0x1c0>
          multipart_log("invalid character in header name");
 800131a:	484f      	ldr	r0, [pc, #316]	; (8001458 <multipart_parser_execute+0x2f4>)
 800131c:	f7ff fed7 	bl	80010ce <multipart_log>
          return i;
 8001320:	69fb      	ldr	r3, [r7, #28]
 8001322:	e1cd      	b.n	80016c0 <multipart_parser_execute+0x55c>
        }
        if (is_last)
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	2b00      	cmp	r3, #0
 8001328:	f000 81b6 	beq.w	8001698 <multipart_parser_execute+0x534>
            EMIT_DATA_CB(header_field, buf + mark, (i - mark) + 1);
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	691b      	ldr	r3, [r3, #16]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	2b00      	cmp	r3, #0
 8001334:	f000 81b0 	beq.w	8001698 <multipart_parser_execute+0x534>
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	691b      	ldr	r3, [r3, #16]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	68b9      	ldr	r1, [r7, #8]
 8001340:	69ba      	ldr	r2, [r7, #24]
 8001342:	1888      	adds	r0, r1, r2
 8001344:	69f9      	ldr	r1, [r7, #28]
 8001346:	69ba      	ldr	r2, [r7, #24]
 8001348:	1a8a      	subs	r2, r1, r2
 800134a:	3201      	adds	r2, #1
 800134c:	4601      	mov	r1, r0
 800134e:	68f8      	ldr	r0, [r7, #12]
 8001350:	4798      	blx	r3
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	f000 819f 	beq.w	8001698 <multipart_parser_execute+0x534>
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	e1b0      	b.n	80016c0 <multipart_parser_execute+0x55c>
        break;

      case s_headers_almost_done:
        multipart_log("s_headers_almost_done");
 800135e:	483f      	ldr	r0, [pc, #252]	; (800145c <multipart_parser_execute+0x2f8>)
 8001360:	f7ff feb5 	bl	80010ce <multipart_log>
        if (c != LF) {
 8001364:	7cfb      	ldrb	r3, [r7, #19]
 8001366:	2b0a      	cmp	r3, #10
 8001368:	d001      	beq.n	800136e <multipart_parser_execute+0x20a>
          return i;
 800136a:	69fb      	ldr	r3, [r7, #28]
 800136c:	e1a8      	b.n	80016c0 <multipart_parser_execute+0x55c>
        }

        p->state = s_part_data_start;
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	220a      	movs	r2, #10
 8001372:	731a      	strb	r2, [r3, #12]
        break;
 8001374:	e19b      	b.n	80016ae <multipart_parser_execute+0x54a>

      case s_header_value_start:
        multipart_log("s_header_value_start");
 8001376:	483a      	ldr	r0, [pc, #232]	; (8001460 <multipart_parser_execute+0x2fc>)
 8001378:	f7ff fea9 	bl	80010ce <multipart_log>
        if (c == ' ') {
 800137c:	7cfb      	ldrb	r3, [r7, #19]
 800137e:	2b20      	cmp	r3, #32
 8001380:	f000 818c 	beq.w	800169c <multipart_parser_execute+0x538>
          break;
        }

        mark = i;
 8001384:	69fb      	ldr	r3, [r7, #28]
 8001386:	61bb      	str	r3, [r7, #24]
        p->state = s_header_value;
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	2208      	movs	r2, #8
 800138c:	731a      	strb	r2, [r3, #12]

      /* fallthrough */
      case s_header_value:
        multipart_log("s_header_value");
 800138e:	4835      	ldr	r0, [pc, #212]	; (8001464 <multipart_parser_execute+0x300>)
 8001390:	f7ff fe9d 	bl	80010ce <multipart_log>
        if (c == CR) {
 8001394:	7cfb      	ldrb	r3, [r7, #19]
 8001396:	2b0d      	cmp	r3, #13
 8001398:	d119      	bne.n	80013ce <multipart_parser_execute+0x26a>
          EMIT_DATA_CB(header_value, buf + mark, i - mark);
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	691b      	ldr	r3, [r3, #16]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d010      	beq.n	80013c6 <multipart_parser_execute+0x262>
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	691b      	ldr	r3, [r3, #16]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	68b9      	ldr	r1, [r7, #8]
 80013ac:	69ba      	ldr	r2, [r7, #24]
 80013ae:	1888      	adds	r0, r1, r2
 80013b0:	69f9      	ldr	r1, [r7, #28]
 80013b2:	69ba      	ldr	r2, [r7, #24]
 80013b4:	1a8a      	subs	r2, r1, r2
 80013b6:	4601      	mov	r1, r0
 80013b8:	68f8      	ldr	r0, [r7, #12]
 80013ba:	4798      	blx	r3
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <multipart_parser_execute+0x262>
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	e17c      	b.n	80016c0 <multipart_parser_execute+0x55c>
          p->state = s_header_value_almost_done;
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	2209      	movs	r2, #9
 80013ca:	731a      	strb	r2, [r3, #12]
          break;
 80013cc:	e16f      	b.n	80016ae <multipart_parser_execute+0x54a>
        }
        if (is_last)
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	f000 8165 	beq.w	80016a0 <multipart_parser_execute+0x53c>
            EMIT_DATA_CB(header_value, buf + mark, (i - mark) + 1);
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	691b      	ldr	r3, [r3, #16]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	f000 815f 	beq.w	80016a0 <multipart_parser_execute+0x53c>
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	691b      	ldr	r3, [r3, #16]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	68b9      	ldr	r1, [r7, #8]
 80013ea:	69ba      	ldr	r2, [r7, #24]
 80013ec:	1888      	adds	r0, r1, r2
 80013ee:	69f9      	ldr	r1, [r7, #28]
 80013f0:	69ba      	ldr	r2, [r7, #24]
 80013f2:	1a8a      	subs	r2, r1, r2
 80013f4:	3201      	adds	r2, #1
 80013f6:	4601      	mov	r1, r0
 80013f8:	68f8      	ldr	r0, [r7, #12]
 80013fa:	4798      	blx	r3
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	f000 814e 	beq.w	80016a0 <multipart_parser_execute+0x53c>
 8001404:	69fb      	ldr	r3, [r7, #28]
 8001406:	e15b      	b.n	80016c0 <multipart_parser_execute+0x55c>
        break;

      case s_header_value_almost_done:
        multipart_log("s_header_value_almost_done");
 8001408:	4817      	ldr	r0, [pc, #92]	; (8001468 <multipart_parser_execute+0x304>)
 800140a:	f7ff fe60 	bl	80010ce <multipart_log>
        if (c != LF) {
 800140e:	7cfb      	ldrb	r3, [r7, #19]
 8001410:	2b0a      	cmp	r3, #10
 8001412:	d001      	beq.n	8001418 <multipart_parser_execute+0x2b4>
          return i;
 8001414:	69fb      	ldr	r3, [r7, #28]
 8001416:	e153      	b.n	80016c0 <multipart_parser_execute+0x55c>
        }
        p->state = s_header_field_start;
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	2204      	movs	r2, #4
 800141c:	731a      	strb	r2, [r3, #12]
        break;
 800141e:	e146      	b.n	80016ae <multipart_parser_execute+0x54a>

      case s_part_data_start:
        multipart_log("s_part_data_start");
 8001420:	4812      	ldr	r0, [pc, #72]	; (800146c <multipart_parser_execute+0x308>)
 8001422:	f7ff fe54 	bl	80010ce <multipart_log>
        NOTIFY_CB(headers_complete);
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	691b      	ldr	r3, [r3, #16]
 800142a:	691b      	ldr	r3, [r3, #16]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d01f      	beq.n	8001470 <multipart_parser_execute+0x30c>
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	691b      	ldr	r3, [r3, #16]
 8001434:	691b      	ldr	r3, [r3, #16]
 8001436:	68f8      	ldr	r0, [r7, #12]
 8001438:	4798      	blx	r3
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d017      	beq.n	8001470 <multipart_parser_execute+0x30c>
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	e13d      	b.n	80016c0 <multipart_parser_execute+0x55c>
 8001444:	08012c48 	.word	0x08012c48
 8001448:	08012c50 	.word	0x08012c50
 800144c:	08012c64 	.word	0x08012c64
 8001450:	08012c7c 	.word	0x08012c7c
 8001454:	08017dc2 	.word	0x08017dc2
 8001458:	08012c8c 	.word	0x08012c8c
 800145c:	08012cb0 	.word	0x08012cb0
 8001460:	08012cc8 	.word	0x08012cc8
 8001464:	08012ce0 	.word	0x08012ce0
 8001468:	08012cf0 	.word	0x08012cf0
 800146c:	08012d0c 	.word	0x08012d0c
        mark = i;
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	61bb      	str	r3, [r7, #24]
        p->state = s_part_data;
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	220b      	movs	r2, #11
 8001478:	731a      	strb	r2, [r3, #12]

      /* fallthrough */
      case s_part_data:
        multipart_log("s_part_data");
 800147a:	4893      	ldr	r0, [pc, #588]	; (80016c8 <multipart_parser_execute+0x564>)
 800147c:	f7ff fe27 	bl	80010ce <multipart_log>
        if (c == CR) {
 8001480:	7cfb      	ldrb	r3, [r7, #19]
 8001482:	2b0d      	cmp	r3, #13
 8001484:	d11f      	bne.n	80014c6 <multipart_parser_execute+0x362>
            EMIT_DATA_CB(part_data, buf + mark, i - mark);
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	691b      	ldr	r3, [r3, #16]
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d010      	beq.n	80014b2 <multipart_parser_execute+0x34e>
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	691b      	ldr	r3, [r3, #16]
 8001494:	689b      	ldr	r3, [r3, #8]
 8001496:	68b9      	ldr	r1, [r7, #8]
 8001498:	69ba      	ldr	r2, [r7, #24]
 800149a:	1888      	adds	r0, r1, r2
 800149c:	69f9      	ldr	r1, [r7, #28]
 800149e:	69ba      	ldr	r2, [r7, #24]
 80014a0:	1a8a      	subs	r2, r1, r2
 80014a2:	4601      	mov	r1, r0
 80014a4:	68f8      	ldr	r0, [r7, #12]
 80014a6:	4798      	blx	r3
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <multipart_parser_execute+0x34e>
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	e106      	b.n	80016c0 <multipart_parser_execute+0x55c>
            mark = i;
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	61bb      	str	r3, [r7, #24]
            p->state = s_part_data_almost_boundary;
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	220c      	movs	r2, #12
 80014ba:	731a      	strb	r2, [r3, #12]
            p->lookbehind[0] = CR;
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	695b      	ldr	r3, [r3, #20]
 80014c0:	220d      	movs	r2, #13
 80014c2:	701a      	strb	r2, [r3, #0]
            break;
 80014c4:	e0f3      	b.n	80016ae <multipart_parser_execute+0x54a>
        }
        if (is_last)
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	f000 80eb 	beq.w	80016a4 <multipart_parser_execute+0x540>
            EMIT_DATA_CB(part_data, buf + mark, (i - mark) + 1);
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	691b      	ldr	r3, [r3, #16]
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	f000 80e5 	beq.w	80016a4 <multipart_parser_execute+0x540>
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	691b      	ldr	r3, [r3, #16]
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	68b9      	ldr	r1, [r7, #8]
 80014e2:	69ba      	ldr	r2, [r7, #24]
 80014e4:	1888      	adds	r0, r1, r2
 80014e6:	69f9      	ldr	r1, [r7, #28]
 80014e8:	69ba      	ldr	r2, [r7, #24]
 80014ea:	1a8a      	subs	r2, r1, r2
 80014ec:	3201      	adds	r2, #1
 80014ee:	4601      	mov	r1, r0
 80014f0:	68f8      	ldr	r0, [r7, #12]
 80014f2:	4798      	blx	r3
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	f000 80d4 	beq.w	80016a4 <multipart_parser_execute+0x540>
 80014fc:	69fb      	ldr	r3, [r7, #28]
 80014fe:	e0df      	b.n	80016c0 <multipart_parser_execute+0x55c>
        break;

      case s_part_data_almost_boundary:
        multipart_log("s_part_data_almost_boundary");
 8001500:	4872      	ldr	r0, [pc, #456]	; (80016cc <multipart_parser_execute+0x568>)
 8001502:	f7ff fde4 	bl	80010ce <multipart_log>
        if (c == LF) {
 8001506:	7cfb      	ldrb	r3, [r7, #19]
 8001508:	2b0a      	cmp	r3, #10
 800150a:	d10b      	bne.n	8001524 <multipart_parser_execute+0x3c0>
            p->state = s_part_data_boundary;
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	220d      	movs	r2, #13
 8001510:	731a      	strb	r2, [r3, #12]
            p->lookbehind[1] = LF;
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	695b      	ldr	r3, [r3, #20]
 8001516:	3301      	adds	r3, #1
 8001518:	220a      	movs	r2, #10
 800151a:	701a      	strb	r2, [r3, #0]
            p->index = 0;
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	2200      	movs	r2, #0
 8001520:	605a      	str	r2, [r3, #4]
            break;
 8001522:	e0c4      	b.n	80016ae <multipart_parser_execute+0x54a>
        }
        EMIT_DATA_CB(part_data, p->lookbehind, 1);
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	691b      	ldr	r3, [r3, #16]
 8001528:	689b      	ldr	r3, [r3, #8]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d00c      	beq.n	8001548 <multipart_parser_execute+0x3e4>
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	691b      	ldr	r3, [r3, #16]
 8001532:	689b      	ldr	r3, [r3, #8]
 8001534:	68fa      	ldr	r2, [r7, #12]
 8001536:	6951      	ldr	r1, [r2, #20]
 8001538:	2201      	movs	r2, #1
 800153a:	68f8      	ldr	r0, [r7, #12]
 800153c:	4798      	blx	r3
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <multipart_parser_execute+0x3e4>
 8001544:	69fb      	ldr	r3, [r7, #28]
 8001546:	e0bb      	b.n	80016c0 <multipart_parser_execute+0x55c>
        p->state = s_part_data;
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	220b      	movs	r2, #11
 800154c:	731a      	strb	r2, [r3, #12]
        mark = i --;
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	1e5a      	subs	r2, r3, #1
 8001552:	61fa      	str	r2, [r7, #28]
 8001554:	61bb      	str	r3, [r7, #24]
        break;
 8001556:	e0aa      	b.n	80016ae <multipart_parser_execute+0x54a>

      case s_part_data_boundary:
        multipart_log("s_part_data_boundary");
 8001558:	485d      	ldr	r0, [pc, #372]	; (80016d0 <multipart_parser_execute+0x56c>)
 800155a:	f7ff fdb8 	bl	80010ce <multipart_log>
        if (p->multipart_boundary[p->index] != c) {
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	68fa      	ldr	r2, [r7, #12]
 8001564:	4413      	add	r3, r2
 8001566:	7e1b      	ldrb	r3, [r3, #24]
 8001568:	7cfa      	ldrb	r2, [r7, #19]
 800156a:	429a      	cmp	r2, r3
 800156c:	d01b      	beq.n	80015a6 <multipart_parser_execute+0x442>
          EMIT_DATA_CB(part_data, p->lookbehind, 2 + p->index);
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	691b      	ldr	r3, [r3, #16]
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d00e      	beq.n	8001596 <multipart_parser_execute+0x432>
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	691b      	ldr	r3, [r3, #16]
 800157c:	689b      	ldr	r3, [r3, #8]
 800157e:	68fa      	ldr	r2, [r7, #12]
 8001580:	6951      	ldr	r1, [r2, #20]
 8001582:	68fa      	ldr	r2, [r7, #12]
 8001584:	6852      	ldr	r2, [r2, #4]
 8001586:	3202      	adds	r2, #2
 8001588:	68f8      	ldr	r0, [r7, #12]
 800158a:	4798      	blx	r3
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <multipart_parser_execute+0x432>
 8001592:	69fb      	ldr	r3, [r7, #28]
 8001594:	e094      	b.n	80016c0 <multipart_parser_execute+0x55c>
          p->state = s_part_data;
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	220b      	movs	r2, #11
 800159a:	731a      	strb	r2, [r3, #12]
          mark = i --;
 800159c:	69fb      	ldr	r3, [r7, #28]
 800159e:	1e5a      	subs	r2, r3, #1
 80015a0:	61fa      	str	r2, [r7, #28]
 80015a2:	61bb      	str	r3, [r7, #24]
          break;
 80015a4:	e083      	b.n	80016ae <multipart_parser_execute+0x54a>
        }
        p->lookbehind[2 + p->index] = c;
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	695a      	ldr	r2, [r3, #20]
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	3302      	adds	r3, #2
 80015b0:	4413      	add	r3, r2
 80015b2:	7cfa      	ldrb	r2, [r7, #19]
 80015b4:	701a      	strb	r2, [r3, #0]
        if ((++ p->index) == p->boundary_length) {
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	1c5a      	adds	r2, r3, #1
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	605a      	str	r2, [r3, #4]
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	685a      	ldr	r2, [r3, #4]
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d16d      	bne.n	80016a8 <multipart_parser_execute+0x544>
            NOTIFY_CB(part_data_end);
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	691b      	ldr	r3, [r3, #16]
 80015d0:	695b      	ldr	r3, [r3, #20]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d009      	beq.n	80015ea <multipart_parser_execute+0x486>
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	691b      	ldr	r3, [r3, #16]
 80015da:	695b      	ldr	r3, [r3, #20]
 80015dc:	68f8      	ldr	r0, [r7, #12]
 80015de:	4798      	blx	r3
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <multipart_parser_execute+0x486>
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	e06a      	b.n	80016c0 <multipart_parser_execute+0x55c>
            p->state = s_part_data_almost_end;
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	220e      	movs	r2, #14
 80015ee:	731a      	strb	r2, [r3, #12]
        }
        break;
 80015f0:	e05a      	b.n	80016a8 <multipart_parser_execute+0x544>

      case s_part_data_almost_end:
        multipart_log("s_part_data_almost_end");
 80015f2:	4838      	ldr	r0, [pc, #224]	; (80016d4 <multipart_parser_execute+0x570>)
 80015f4:	f7ff fd6b 	bl	80010ce <multipart_log>
        if (c == '-') {
 80015f8:	7cfb      	ldrb	r3, [r7, #19]
 80015fa:	2b2d      	cmp	r3, #45	; 0x2d
 80015fc:	d103      	bne.n	8001606 <multipart_parser_execute+0x4a2>
            p->state = s_part_data_final_hyphen;
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	2210      	movs	r2, #16
 8001602:	731a      	strb	r2, [r3, #12]
            break;
 8001604:	e053      	b.n	80016ae <multipart_parser_execute+0x54a>
        }
        if (c == CR) {
 8001606:	7cfb      	ldrb	r3, [r7, #19]
 8001608:	2b0d      	cmp	r3, #13
 800160a:	d103      	bne.n	8001614 <multipart_parser_execute+0x4b0>
            p->state = s_part_data_end;
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	220f      	movs	r2, #15
 8001610:	731a      	strb	r2, [r3, #12]
            break;
 8001612:	e04c      	b.n	80016ae <multipart_parser_execute+0x54a>
        }
        return i;
 8001614:	69fb      	ldr	r3, [r7, #28]
 8001616:	e053      	b.n	80016c0 <multipart_parser_execute+0x55c>

      case s_part_data_final_hyphen:
        multipart_log("s_part_data_final_hyphen");
 8001618:	482f      	ldr	r0, [pc, #188]	; (80016d8 <multipart_parser_execute+0x574>)
 800161a:	f7ff fd58 	bl	80010ce <multipart_log>
        if (c == '-') {
 800161e:	7cfb      	ldrb	r3, [r7, #19]
 8001620:	2b2d      	cmp	r3, #45	; 0x2d
 8001622:	d112      	bne.n	800164a <multipart_parser_execute+0x4e6>
            NOTIFY_CB(body_end);
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	691b      	ldr	r3, [r3, #16]
 8001628:	699b      	ldr	r3, [r3, #24]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d009      	beq.n	8001642 <multipart_parser_execute+0x4de>
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	691b      	ldr	r3, [r3, #16]
 8001632:	699b      	ldr	r3, [r3, #24]
 8001634:	68f8      	ldr	r0, [r7, #12]
 8001636:	4798      	blx	r3
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <multipart_parser_execute+0x4de>
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	e03e      	b.n	80016c0 <multipart_parser_execute+0x55c>
            p->state = s_end;
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	2211      	movs	r2, #17
 8001646:	731a      	strb	r2, [r3, #12]
            break;
 8001648:	e031      	b.n	80016ae <multipart_parser_execute+0x54a>
        }
        return i;
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	e038      	b.n	80016c0 <multipart_parser_execute+0x55c>

      case s_part_data_end:
        multipart_log("s_part_data_end");
 800164e:	4823      	ldr	r0, [pc, #140]	; (80016dc <multipart_parser_execute+0x578>)
 8001650:	f7ff fd3d 	bl	80010ce <multipart_log>
        if (c == LF) {
 8001654:	7cfb      	ldrb	r3, [r7, #19]
 8001656:	2b0a      	cmp	r3, #10
 8001658:	d111      	bne.n	800167e <multipart_parser_execute+0x51a>
            p->state = s_header_field_start;
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	2204      	movs	r2, #4
 800165e:	731a      	strb	r2, [r3, #12]
            NOTIFY_CB(part_data_begin);
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	691b      	ldr	r3, [r3, #16]
 8001664:	68db      	ldr	r3, [r3, #12]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d020      	beq.n	80016ac <multipart_parser_execute+0x548>
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	691b      	ldr	r3, [r3, #16]
 800166e:	68db      	ldr	r3, [r3, #12]
 8001670:	68f8      	ldr	r0, [r7, #12]
 8001672:	4798      	blx	r3
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d018      	beq.n	80016ac <multipart_parser_execute+0x548>
 800167a:	69fb      	ldr	r3, [r7, #28]
 800167c:	e020      	b.n	80016c0 <multipart_parser_execute+0x55c>
            break;
        }
        return i;
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	e01e      	b.n	80016c0 <multipart_parser_execute+0x55c>

      case s_end:
        multipart_log("s_end: %02X", (int) c);
 8001682:	7cfb      	ldrb	r3, [r7, #19]
 8001684:	4619      	mov	r1, r3
 8001686:	4816      	ldr	r0, [pc, #88]	; (80016e0 <multipart_parser_execute+0x57c>)
 8001688:	f7ff fd21 	bl	80010ce <multipart_log>
        break;
 800168c:	e00f      	b.n	80016ae <multipart_parser_execute+0x54a>

      default:
        multipart_log("Multipart parser unrecoverable error");
 800168e:	4815      	ldr	r0, [pc, #84]	; (80016e4 <multipart_parser_execute+0x580>)
 8001690:	f7ff fd1d 	bl	80010ce <multipart_log>
        return 0;
 8001694:	2300      	movs	r3, #0
 8001696:	e013      	b.n	80016c0 <multipart_parser_execute+0x55c>
        break;
 8001698:	bf00      	nop
 800169a:	e008      	b.n	80016ae <multipart_parser_execute+0x54a>
          break;
 800169c:	bf00      	nop
 800169e:	e006      	b.n	80016ae <multipart_parser_execute+0x54a>
        break;
 80016a0:	bf00      	nop
 80016a2:	e004      	b.n	80016ae <multipart_parser_execute+0x54a>
        break;
 80016a4:	bf00      	nop
 80016a6:	e002      	b.n	80016ae <multipart_parser_execute+0x54a>
        break;
 80016a8:	bf00      	nop
 80016aa:	e000      	b.n	80016ae <multipart_parser_execute+0x54a>
            break;
 80016ac:	bf00      	nop
    }
    ++ i;
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	3301      	adds	r3, #1
 80016b2:	61fb      	str	r3, [r7, #28]
  while(i < len) {
 80016b4:	69fa      	ldr	r2, [r7, #28]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	429a      	cmp	r2, r3
 80016ba:	f4ff ad60 	bcc.w	800117e <multipart_parser_execute+0x1a>
  }

  return len;
 80016be:	687b      	ldr	r3, [r7, #4]
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	3720      	adds	r7, #32
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	08012d20 	.word	0x08012d20
 80016cc:	08012d2c 	.word	0x08012d2c
 80016d0:	08012d48 	.word	0x08012d48
 80016d4:	08012d60 	.word	0x08012d60
 80016d8:	08012d78 	.word	0x08012d78
 80016dc:	08012d94 	.word	0x08012d94
 80016e0:	08012da4 	.word	0x08012da4
 80016e4:	08012db0 	.word	0x08012db0

080016e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ee:	2300      	movs	r3, #0
 80016f0:	607b      	str	r3, [r7, #4]
 80016f2:	4b10      	ldr	r3, [pc, #64]	; (8001734 <HAL_MspInit+0x4c>)
 80016f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016f6:	4a0f      	ldr	r2, [pc, #60]	; (8001734 <HAL_MspInit+0x4c>)
 80016f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016fc:	6453      	str	r3, [r2, #68]	; 0x44
 80016fe:	4b0d      	ldr	r3, [pc, #52]	; (8001734 <HAL_MspInit+0x4c>)
 8001700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001702:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001706:	607b      	str	r3, [r7, #4]
 8001708:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800170a:	2300      	movs	r3, #0
 800170c:	603b      	str	r3, [r7, #0]
 800170e:	4b09      	ldr	r3, [pc, #36]	; (8001734 <HAL_MspInit+0x4c>)
 8001710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001712:	4a08      	ldr	r2, [pc, #32]	; (8001734 <HAL_MspInit+0x4c>)
 8001714:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001718:	6413      	str	r3, [r2, #64]	; 0x40
 800171a:	4b06      	ldr	r3, [pc, #24]	; (8001734 <HAL_MspInit+0x4c>)
 800171c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001722:	603b      	str	r3, [r7, #0]
 8001724:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001726:	bf00      	nop
 8001728:	370c      	adds	r7, #12
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	40023800 	.word	0x40023800

08001738 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b08a      	sub	sp, #40	; 0x28
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001740:	f107 0314 	add.w	r3, r7, #20
 8001744:	2200      	movs	r2, #0
 8001746:	601a      	str	r2, [r3, #0]
 8001748:	605a      	str	r2, [r3, #4]
 800174a:	609a      	str	r2, [r3, #8]
 800174c:	60da      	str	r2, [r3, #12]
 800174e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a19      	ldr	r2, [pc, #100]	; (80017bc <HAL_UART_MspInit+0x84>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d12b      	bne.n	80017b2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 800175a:	2300      	movs	r3, #0
 800175c:	613b      	str	r3, [r7, #16]
 800175e:	4b18      	ldr	r3, [pc, #96]	; (80017c0 <HAL_UART_MspInit+0x88>)
 8001760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001762:	4a17      	ldr	r2, [pc, #92]	; (80017c0 <HAL_UART_MspInit+0x88>)
 8001764:	f043 0320 	orr.w	r3, r3, #32
 8001768:	6453      	str	r3, [r2, #68]	; 0x44
 800176a:	4b15      	ldr	r3, [pc, #84]	; (80017c0 <HAL_UART_MspInit+0x88>)
 800176c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800176e:	f003 0320 	and.w	r3, r3, #32
 8001772:	613b      	str	r3, [r7, #16]
 8001774:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001776:	2300      	movs	r3, #0
 8001778:	60fb      	str	r3, [r7, #12]
 800177a:	4b11      	ldr	r3, [pc, #68]	; (80017c0 <HAL_UART_MspInit+0x88>)
 800177c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177e:	4a10      	ldr	r2, [pc, #64]	; (80017c0 <HAL_UART_MspInit+0x88>)
 8001780:	f043 0304 	orr.w	r3, r3, #4
 8001784:	6313      	str	r3, [r2, #48]	; 0x30
 8001786:	4b0e      	ldr	r3, [pc, #56]	; (80017c0 <HAL_UART_MspInit+0x88>)
 8001788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178a:	f003 0304 	and.w	r3, r3, #4
 800178e:	60fb      	str	r3, [r7, #12]
 8001790:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001792:	23c0      	movs	r3, #192	; 0xc0
 8001794:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001796:	2302      	movs	r3, #2
 8001798:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179a:	2300      	movs	r3, #0
 800179c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800179e:	2303      	movs	r3, #3
 80017a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80017a2:	2308      	movs	r3, #8
 80017a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017a6:	f107 0314 	add.w	r3, r7, #20
 80017aa:	4619      	mov	r1, r3
 80017ac:	4805      	ldr	r0, [pc, #20]	; (80017c4 <HAL_UART_MspInit+0x8c>)
 80017ae:	f001 fbc1 	bl	8002f34 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80017b2:	bf00      	nop
 80017b4:	3728      	adds	r7, #40	; 0x28
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	40011400 	.word	0x40011400
 80017c0:	40023800 	.word	0x40023800
 80017c4:	40020800 	.word	0x40020800

080017c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017cc:	e7fe      	b.n	80017cc <NMI_Handler+0x4>

080017ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017ce:	b480      	push	{r7}
 80017d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017d2:	e7fe      	b.n	80017d2 <HardFault_Handler+0x4>

080017d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017d8:	e7fe      	b.n	80017d8 <MemManage_Handler+0x4>

080017da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017da:	b480      	push	{r7}
 80017dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017de:	e7fe      	b.n	80017de <BusFault_Handler+0x4>

080017e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017e4:	e7fe      	b.n	80017e4 <UsageFault_Handler+0x4>

080017e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017e6:	b480      	push	{r7}
 80017e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017ea:	bf00      	nop
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr

080017f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017f8:	bf00      	nop
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr

08001802 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001802:	b480      	push	{r7}
 8001804:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001806:	bf00      	nop
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr

08001810 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001814:	f000 f93e 	bl	8001a94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001818:	bf00      	nop
 800181a:	bd80      	pop	{r7, pc}

0800181c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
	return 1;
 8001820:	2301      	movs	r3, #1
}
 8001822:	4618      	mov	r0, r3
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr

0800182c <_kill>:

int _kill(int pid, int sig)
{
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
 8001834:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001836:	4b05      	ldr	r3, [pc, #20]	; (800184c <_kill+0x20>)
 8001838:	2216      	movs	r2, #22
 800183a:	601a      	str	r2, [r3, #0]
	return -1;
 800183c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001840:	4618      	mov	r0, r3
 8001842:	370c      	adds	r7, #12
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr
 800184c:	2000d3fc 	.word	0x2000d3fc

08001850 <_exit>:

void _exit (int status)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001858:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800185c:	6878      	ldr	r0, [r7, #4]
 800185e:	f7ff ffe5 	bl	800182c <_kill>
	while (1) {}		/* Make sure we hang here */
 8001862:	e7fe      	b.n	8001862 <_exit+0x12>

08001864 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b086      	sub	sp, #24
 8001868:	af00      	add	r7, sp, #0
 800186a:	60f8      	str	r0, [r7, #12]
 800186c:	60b9      	str	r1, [r7, #8]
 800186e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001870:	2300      	movs	r3, #0
 8001872:	617b      	str	r3, [r7, #20]
 8001874:	e00a      	b.n	800188c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001876:	f3af 8000 	nop.w
 800187a:	4601      	mov	r1, r0
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	1c5a      	adds	r2, r3, #1
 8001880:	60ba      	str	r2, [r7, #8]
 8001882:	b2ca      	uxtb	r2, r1
 8001884:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	3301      	adds	r3, #1
 800188a:	617b      	str	r3, [r7, #20]
 800188c:	697a      	ldr	r2, [r7, #20]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	429a      	cmp	r2, r3
 8001892:	dbf0      	blt.n	8001876 <_read+0x12>
	}

return len;
 8001894:	687b      	ldr	r3, [r7, #4]
}
 8001896:	4618      	mov	r0, r3
 8001898:	3718      	adds	r7, #24
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}

0800189e <_close>:
	}
	return len;
}

int _close(int file)
{
 800189e:	b480      	push	{r7}
 80018a0:	b083      	sub	sp, #12
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	6078      	str	r0, [r7, #4]
	return -1;
 80018a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	370c      	adds	r7, #12
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr

080018b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018b6:	b480      	push	{r7}
 80018b8:	b083      	sub	sp, #12
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	6078      	str	r0, [r7, #4]
 80018be:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018c6:	605a      	str	r2, [r3, #4]
	return 0;
 80018c8:	2300      	movs	r3, #0
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	370c      	adds	r7, #12
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr

080018d6 <_isatty>:

int _isatty(int file)
{
 80018d6:	b480      	push	{r7}
 80018d8:	b083      	sub	sp, #12
 80018da:	af00      	add	r7, sp, #0
 80018dc:	6078      	str	r0, [r7, #4]
	return 1;
 80018de:	2301      	movs	r3, #1
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	370c      	adds	r7, #12
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr

080018ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b085      	sub	sp, #20
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	60f8      	str	r0, [r7, #12]
 80018f4:	60b9      	str	r1, [r7, #8]
 80018f6:	607a      	str	r2, [r7, #4]
	return 0;
 80018f8:	2300      	movs	r3, #0
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3714      	adds	r7, #20
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
	...

08001908 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001908:	b480      	push	{r7}
 800190a:	b087      	sub	sp, #28
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001910:	4a14      	ldr	r2, [pc, #80]	; (8001964 <_sbrk+0x5c>)
 8001912:	4b15      	ldr	r3, [pc, #84]	; (8001968 <_sbrk+0x60>)
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800191c:	4b13      	ldr	r3, [pc, #76]	; (800196c <_sbrk+0x64>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d102      	bne.n	800192a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001924:	4b11      	ldr	r3, [pc, #68]	; (800196c <_sbrk+0x64>)
 8001926:	4a12      	ldr	r2, [pc, #72]	; (8001970 <_sbrk+0x68>)
 8001928:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800192a:	4b10      	ldr	r3, [pc, #64]	; (800196c <_sbrk+0x64>)
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4413      	add	r3, r2
 8001932:	693a      	ldr	r2, [r7, #16]
 8001934:	429a      	cmp	r2, r3
 8001936:	d205      	bcs.n	8001944 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001938:	4b0e      	ldr	r3, [pc, #56]	; (8001974 <_sbrk+0x6c>)
 800193a:	220c      	movs	r2, #12
 800193c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800193e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001942:	e009      	b.n	8001958 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001944:	4b09      	ldr	r3, [pc, #36]	; (800196c <_sbrk+0x64>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800194a:	4b08      	ldr	r3, [pc, #32]	; (800196c <_sbrk+0x64>)
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4413      	add	r3, r2
 8001952:	4a06      	ldr	r2, [pc, #24]	; (800196c <_sbrk+0x64>)
 8001954:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001956:	68fb      	ldr	r3, [r7, #12]
}
 8001958:	4618      	mov	r0, r3
 800195a:	371c      	adds	r7, #28
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr
 8001964:	20020000 	.word	0x20020000
 8001968:	00000400 	.word	0x00000400
 800196c:	200000e4 	.word	0x200000e4
 8001970:	2000d410 	.word	0x2000d410
 8001974:	2000d3fc 	.word	0x2000d3fc

08001978 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800197c:	4b06      	ldr	r3, [pc, #24]	; (8001998 <SystemInit+0x20>)
 800197e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001982:	4a05      	ldr	r2, [pc, #20]	; (8001998 <SystemInit+0x20>)
 8001984:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001988:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800198c:	bf00      	nop
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	e000ed00 	.word	0xe000ed00

0800199c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800199c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019d4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019a0:	480d      	ldr	r0, [pc, #52]	; (80019d8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80019a2:	490e      	ldr	r1, [pc, #56]	; (80019dc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80019a4:	4a0e      	ldr	r2, [pc, #56]	; (80019e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019a8:	e002      	b.n	80019b0 <LoopCopyDataInit>

080019aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019ae:	3304      	adds	r3, #4

080019b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019b4:	d3f9      	bcc.n	80019aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019b6:	4a0b      	ldr	r2, [pc, #44]	; (80019e4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80019b8:	4c0b      	ldr	r4, [pc, #44]	; (80019e8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80019ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019bc:	e001      	b.n	80019c2 <LoopFillZerobss>

080019be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019c0:	3204      	adds	r2, #4

080019c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019c4:	d3fb      	bcc.n	80019be <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80019c6:	f7ff ffd7 	bl	8001978 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019ca:	f00f fc25 	bl	8011218 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019ce:	f7ff fa8b 	bl	8000ee8 <main>
  bx  lr    
 80019d2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80019d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80019d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019dc:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 80019e0:	08018080 	.word	0x08018080
  ldr r2, =_sbss
 80019e4:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 80019e8:	2000d40c 	.word	0x2000d40c

080019ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019ec:	e7fe      	b.n	80019ec <ADC_IRQHandler>
	...

080019f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019f4:	4b0e      	ldr	r3, [pc, #56]	; (8001a30 <HAL_Init+0x40>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a0d      	ldr	r2, [pc, #52]	; (8001a30 <HAL_Init+0x40>)
 80019fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a00:	4b0b      	ldr	r3, [pc, #44]	; (8001a30 <HAL_Init+0x40>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a0a      	ldr	r2, [pc, #40]	; (8001a30 <HAL_Init+0x40>)
 8001a06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a0a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a0c:	4b08      	ldr	r3, [pc, #32]	; (8001a30 <HAL_Init+0x40>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a07      	ldr	r2, [pc, #28]	; (8001a30 <HAL_Init+0x40>)
 8001a12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a16:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a18:	2003      	movs	r0, #3
 8001a1a:	f000 f931 	bl	8001c80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a1e:	200f      	movs	r0, #15
 8001a20:	f000 f808 	bl	8001a34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a24:	f7ff fe60 	bl	80016e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a28:	2300      	movs	r3, #0
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	40023c00 	.word	0x40023c00

08001a34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a3c:	4b12      	ldr	r3, [pc, #72]	; (8001a88 <HAL_InitTick+0x54>)
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	4b12      	ldr	r3, [pc, #72]	; (8001a8c <HAL_InitTick+0x58>)
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	4619      	mov	r1, r3
 8001a46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a52:	4618      	mov	r0, r3
 8001a54:	f000 f93b 	bl	8001cce <HAL_SYSTICK_Config>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d001      	beq.n	8001a62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e00e      	b.n	8001a80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2b0f      	cmp	r3, #15
 8001a66:	d80a      	bhi.n	8001a7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a68:	2200      	movs	r2, #0
 8001a6a:	6879      	ldr	r1, [r7, #4]
 8001a6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a70:	f000 f911 	bl	8001c96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a74:	4a06      	ldr	r2, [pc, #24]	; (8001a90 <HAL_InitTick+0x5c>)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	e000      	b.n	8001a80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	3708      	adds	r7, #8
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	2000001c 	.word	0x2000001c
 8001a8c:	20000024 	.word	0x20000024
 8001a90:	20000020 	.word	0x20000020

08001a94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a98:	4b06      	ldr	r3, [pc, #24]	; (8001ab4 <HAL_IncTick+0x20>)
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	4b06      	ldr	r3, [pc, #24]	; (8001ab8 <HAL_IncTick+0x24>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4413      	add	r3, r2
 8001aa4:	4a04      	ldr	r2, [pc, #16]	; (8001ab8 <HAL_IncTick+0x24>)
 8001aa6:	6013      	str	r3, [r2, #0]
}
 8001aa8:	bf00      	nop
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr
 8001ab2:	bf00      	nop
 8001ab4:	20000024 	.word	0x20000024
 8001ab8:	20000cd8 	.word	0x20000cd8

08001abc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
  return uwTick;
 8001ac0:	4b03      	ldr	r3, [pc, #12]	; (8001ad0 <HAL_GetTick+0x14>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop
 8001ad0:	20000cd8 	.word	0x20000cd8

08001ad4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b084      	sub	sp, #16
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001adc:	f7ff ffee 	bl	8001abc <HAL_GetTick>
 8001ae0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001aec:	d005      	beq.n	8001afa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001aee:	4b0a      	ldr	r3, [pc, #40]	; (8001b18 <HAL_Delay+0x44>)
 8001af0:	781b      	ldrb	r3, [r3, #0]
 8001af2:	461a      	mov	r2, r3
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	4413      	add	r3, r2
 8001af8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001afa:	bf00      	nop
 8001afc:	f7ff ffde 	bl	8001abc <HAL_GetTick>
 8001b00:	4602      	mov	r2, r0
 8001b02:	68bb      	ldr	r3, [r7, #8]
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	68fa      	ldr	r2, [r7, #12]
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d8f7      	bhi.n	8001afc <HAL_Delay+0x28>
  {
  }
}
 8001b0c:	bf00      	nop
 8001b0e:	bf00      	nop
 8001b10:	3710      	adds	r7, #16
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	20000024 	.word	0x20000024

08001b1c <__NVIC_SetPriorityGrouping>:
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b085      	sub	sp, #20
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	f003 0307 	and.w	r3, r3, #7
 8001b2a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b2c:	4b0c      	ldr	r3, [pc, #48]	; (8001b60 <__NVIC_SetPriorityGrouping+0x44>)
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b32:	68ba      	ldr	r2, [r7, #8]
 8001b34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b38:	4013      	ands	r3, r2
 8001b3a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b4e:	4a04      	ldr	r2, [pc, #16]	; (8001b60 <__NVIC_SetPriorityGrouping+0x44>)
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	60d3      	str	r3, [r2, #12]
}
 8001b54:	bf00      	nop
 8001b56:	3714      	adds	r7, #20
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr
 8001b60:	e000ed00 	.word	0xe000ed00

08001b64 <__NVIC_GetPriorityGrouping>:
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b68:	4b04      	ldr	r3, [pc, #16]	; (8001b7c <__NVIC_GetPriorityGrouping+0x18>)
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	0a1b      	lsrs	r3, r3, #8
 8001b6e:	f003 0307 	and.w	r3, r3, #7
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr
 8001b7c:	e000ed00 	.word	0xe000ed00

08001b80 <__NVIC_SetPriority>:
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	4603      	mov	r3, r0
 8001b88:	6039      	str	r1, [r7, #0]
 8001b8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	db0a      	blt.n	8001baa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	b2da      	uxtb	r2, r3
 8001b98:	490c      	ldr	r1, [pc, #48]	; (8001bcc <__NVIC_SetPriority+0x4c>)
 8001b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b9e:	0112      	lsls	r2, r2, #4
 8001ba0:	b2d2      	uxtb	r2, r2
 8001ba2:	440b      	add	r3, r1
 8001ba4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001ba8:	e00a      	b.n	8001bc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	b2da      	uxtb	r2, r3
 8001bae:	4908      	ldr	r1, [pc, #32]	; (8001bd0 <__NVIC_SetPriority+0x50>)
 8001bb0:	79fb      	ldrb	r3, [r7, #7]
 8001bb2:	f003 030f 	and.w	r3, r3, #15
 8001bb6:	3b04      	subs	r3, #4
 8001bb8:	0112      	lsls	r2, r2, #4
 8001bba:	b2d2      	uxtb	r2, r2
 8001bbc:	440b      	add	r3, r1
 8001bbe:	761a      	strb	r2, [r3, #24]
}
 8001bc0:	bf00      	nop
 8001bc2:	370c      	adds	r7, #12
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr
 8001bcc:	e000e100 	.word	0xe000e100
 8001bd0:	e000ed00 	.word	0xe000ed00

08001bd4 <NVIC_EncodePriority>:
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b089      	sub	sp, #36	; 0x24
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	60f8      	str	r0, [r7, #12]
 8001bdc:	60b9      	str	r1, [r7, #8]
 8001bde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	f003 0307 	and.w	r3, r3, #7
 8001be6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001be8:	69fb      	ldr	r3, [r7, #28]
 8001bea:	f1c3 0307 	rsb	r3, r3, #7
 8001bee:	2b04      	cmp	r3, #4
 8001bf0:	bf28      	it	cs
 8001bf2:	2304      	movcs	r3, #4
 8001bf4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	3304      	adds	r3, #4
 8001bfa:	2b06      	cmp	r3, #6
 8001bfc:	d902      	bls.n	8001c04 <NVIC_EncodePriority+0x30>
 8001bfe:	69fb      	ldr	r3, [r7, #28]
 8001c00:	3b03      	subs	r3, #3
 8001c02:	e000      	b.n	8001c06 <NVIC_EncodePriority+0x32>
 8001c04:	2300      	movs	r3, #0
 8001c06:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001c0c:	69bb      	ldr	r3, [r7, #24]
 8001c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c12:	43da      	mvns	r2, r3
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	401a      	ands	r2, r3
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c1c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	fa01 f303 	lsl.w	r3, r1, r3
 8001c26:	43d9      	mvns	r1, r3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c2c:	4313      	orrs	r3, r2
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3724      	adds	r7, #36	; 0x24
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr
	...

08001c3c <SysTick_Config>:
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	3b01      	subs	r3, #1
 8001c48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c4c:	d301      	bcc.n	8001c52 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e00f      	b.n	8001c72 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c52:	4a0a      	ldr	r2, [pc, #40]	; (8001c7c <SysTick_Config+0x40>)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	3b01      	subs	r3, #1
 8001c58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c5a:	210f      	movs	r1, #15
 8001c5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c60:	f7ff ff8e 	bl	8001b80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c64:	4b05      	ldr	r3, [pc, #20]	; (8001c7c <SysTick_Config+0x40>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c6a:	4b04      	ldr	r3, [pc, #16]	; (8001c7c <SysTick_Config+0x40>)
 8001c6c:	2207      	movs	r2, #7
 8001c6e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001c70:	2300      	movs	r3, #0
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3708      	adds	r7, #8
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	e000e010 	.word	0xe000e010

08001c80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c88:	6878      	ldr	r0, [r7, #4]
 8001c8a:	f7ff ff47 	bl	8001b1c <__NVIC_SetPriorityGrouping>
}
 8001c8e:	bf00      	nop
 8001c90:	3708      	adds	r7, #8
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}

08001c96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c96:	b580      	push	{r7, lr}
 8001c98:	b086      	sub	sp, #24
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	60b9      	str	r1, [r7, #8]
 8001ca0:	607a      	str	r2, [r7, #4]
 8001ca2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ca8:	f7ff ff5c 	bl	8001b64 <__NVIC_GetPriorityGrouping>
 8001cac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cae:	687a      	ldr	r2, [r7, #4]
 8001cb0:	68b9      	ldr	r1, [r7, #8]
 8001cb2:	6978      	ldr	r0, [r7, #20]
 8001cb4:	f7ff ff8e 	bl	8001bd4 <NVIC_EncodePriority>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cbe:	4611      	mov	r1, r2
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f7ff ff5d 	bl	8001b80 <__NVIC_SetPriority>
}
 8001cc6:	bf00      	nop
 8001cc8:	3718      	adds	r7, #24
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}

08001cce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cce:	b580      	push	{r7, lr}
 8001cd0:	b082      	sub	sp, #8
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f7ff ffb0 	bl	8001c3c <SysTick_Config>
 8001cdc:	4603      	mov	r3, r0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3708      	adds	r7, #8
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
	...

08001ce8 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b088      	sub	sp, #32
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	61fb      	str	r3, [r7, #28]
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8001cf8:	4baa      	ldr	r3, [pc, #680]	; (8001fa4 <HAL_ETH_Init+0x2bc>)
 8001cfa:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001d00:	2300      	movs	r3, #0
 8001d02:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d101      	bne.n	8001d0e <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e183      	b.n	8002016 <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d106      	bne.n	8001d28 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f002 fb5e 	bl	80043e4 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d28:	2300      	movs	r3, #0
 8001d2a:	60bb      	str	r3, [r7, #8]
 8001d2c:	4b9e      	ldr	r3, [pc, #632]	; (8001fa8 <HAL_ETH_Init+0x2c0>)
 8001d2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d30:	4a9d      	ldr	r2, [pc, #628]	; (8001fa8 <HAL_ETH_Init+0x2c0>)
 8001d32:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d36:	6453      	str	r3, [r2, #68]	; 0x44
 8001d38:	4b9b      	ldr	r3, [pc, #620]	; (8001fa8 <HAL_ETH_Init+0x2c0>)
 8001d3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d40:	60bb      	str	r3, [r7, #8]
 8001d42:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001d44:	4b99      	ldr	r3, [pc, #612]	; (8001fac <HAL_ETH_Init+0x2c4>)
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	4a98      	ldr	r2, [pc, #608]	; (8001fac <HAL_ETH_Init+0x2c4>)
 8001d4a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001d4e:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001d50:	4b96      	ldr	r3, [pc, #600]	; (8001fac <HAL_ETH_Init+0x2c4>)
 8001d52:	685a      	ldr	r2, [r3, #4]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6a1b      	ldr	r3, [r3, #32]
 8001d58:	4994      	ldr	r1, [pc, #592]	; (8001fac <HAL_ETH_Init+0x2c4>)
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f042 0201 	orr.w	r2, r2, #1
 8001d70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d74:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001d76:	f7ff fea1 	bl	8001abc <HAL_GetTick>
 8001d7a:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001d7c:	e011      	b.n	8001da2 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8001d7e:	f7ff fe9d 	bl	8001abc <HAL_GetTick>
 8001d82:	4602      	mov	r2, r0
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001d8c:	d909      	bls.n	8001da2 <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2203      	movs	r2, #3
 8001d92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8001d9e:	2303      	movs	r3, #3
 8001da0:	e139      	b.n	8002016 <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 0301 	and.w	r3, r3, #1
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d1e4      	bne.n	8001d7e <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	691b      	ldr	r3, [r3, #16]
 8001dba:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	f023 031c 	bic.w	r3, r3, #28
 8001dc2:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001dc4:	f001 fe92 	bl	8003aec <HAL_RCC_GetHCLKFreq>
 8001dc8:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8001dca:	69bb      	ldr	r3, [r7, #24]
 8001dcc:	4a78      	ldr	r2, [pc, #480]	; (8001fb0 <HAL_ETH_Init+0x2c8>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d908      	bls.n	8001de4 <HAL_ETH_Init+0xfc>
 8001dd2:	69bb      	ldr	r3, [r7, #24]
 8001dd4:	4a77      	ldr	r2, [pc, #476]	; (8001fb4 <HAL_ETH_Init+0x2cc>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d804      	bhi.n	8001de4 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	f043 0308 	orr.w	r3, r3, #8
 8001de0:	61fb      	str	r3, [r7, #28]
 8001de2:	e027      	b.n	8001e34 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8001de4:	69bb      	ldr	r3, [r7, #24]
 8001de6:	4a73      	ldr	r2, [pc, #460]	; (8001fb4 <HAL_ETH_Init+0x2cc>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d908      	bls.n	8001dfe <HAL_ETH_Init+0x116>
 8001dec:	69bb      	ldr	r3, [r7, #24]
 8001dee:	4a6d      	ldr	r2, [pc, #436]	; (8001fa4 <HAL_ETH_Init+0x2bc>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d204      	bcs.n	8001dfe <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	f043 030c 	orr.w	r3, r3, #12
 8001dfa:	61fb      	str	r3, [r7, #28]
 8001dfc:	e01a      	b.n	8001e34 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8001dfe:	69bb      	ldr	r3, [r7, #24]
 8001e00:	4a68      	ldr	r2, [pc, #416]	; (8001fa4 <HAL_ETH_Init+0x2bc>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d303      	bcc.n	8001e0e <HAL_ETH_Init+0x126>
 8001e06:	69bb      	ldr	r3, [r7, #24]
 8001e08:	4a6b      	ldr	r2, [pc, #428]	; (8001fb8 <HAL_ETH_Init+0x2d0>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d911      	bls.n	8001e32 <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8001e0e:	69bb      	ldr	r3, [r7, #24]
 8001e10:	4a69      	ldr	r2, [pc, #420]	; (8001fb8 <HAL_ETH_Init+0x2d0>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d908      	bls.n	8001e28 <HAL_ETH_Init+0x140>
 8001e16:	69bb      	ldr	r3, [r7, #24]
 8001e18:	4a68      	ldr	r2, [pc, #416]	; (8001fbc <HAL_ETH_Init+0x2d4>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d804      	bhi.n	8001e28 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	f043 0304 	orr.w	r3, r3, #4
 8001e24:	61fb      	str	r3, [r7, #28]
 8001e26:	e005      	b.n	8001e34 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	f043 0310 	orr.w	r3, r3, #16
 8001e2e:	61fb      	str	r3, [r7, #28]
 8001e30:	e000      	b.n	8001e34 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001e32:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	69fa      	ldr	r2, [r7, #28]
 8001e3a:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001e3c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001e40:	2100      	movs	r1, #0
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f000 fb98 	bl	8002578 <HAL_ETH_WritePHYRegister>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d00b      	beq.n	8001e66 <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8001e52:	6939      	ldr	r1, [r7, #16]
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	f000 fd4d 	bl	80028f4 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e0d7      	b.n	8002016 <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8001e66:	20ff      	movs	r0, #255	; 0xff
 8001e68:	f7ff fe34 	bl	8001ad4 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	f000 80a5 	beq.w	8001fc0 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001e76:	f7ff fe21 	bl	8001abc <HAL_GetTick>
 8001e7a:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001e7c:	f107 030c 	add.w	r3, r7, #12
 8001e80:	461a      	mov	r2, r3
 8001e82:	2101      	movs	r1, #1
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	f000 fb0f 	bl	80024a8 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8001e8a:	f7ff fe17 	bl	8001abc <HAL_GetTick>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	1ad3      	subs	r3, r2, r3
 8001e94:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d90f      	bls.n	8001ebc <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001ea0:	6939      	ldr	r1, [r7, #16]
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f000 fd26 	bl	80028f4 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2201      	movs	r2, #1
 8001eac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001eb8:	2303      	movs	r3, #3
 8001eba:	e0ac      	b.n	8002016 <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	f003 0304 	and.w	r3, r3, #4
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d0da      	beq.n	8001e7c <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8001ec6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001eca:	2100      	movs	r1, #0
 8001ecc:	6878      	ldr	r0, [r7, #4]
 8001ece:	f000 fb53 	bl	8002578 <HAL_ETH_WritePHYRegister>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d00b      	beq.n	8001ef0 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001edc:	6939      	ldr	r1, [r7, #16]
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f000 fd08 	bl	80028f4 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001eec:	2301      	movs	r3, #1
 8001eee:	e092      	b.n	8002016 <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8001ef0:	f7ff fde4 	bl	8001abc <HAL_GetTick>
 8001ef4:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001ef6:	f107 030c 	add.w	r3, r7, #12
 8001efa:	461a      	mov	r2, r3
 8001efc:	2101      	movs	r1, #1
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f000 fad2 	bl	80024a8 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001f04:	f7ff fdda 	bl	8001abc <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d90f      	bls.n	8001f36 <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001f1a:	6939      	ldr	r1, [r7, #16]
 8001f1c:	6878      	ldr	r0, [r7, #4]
 8001f1e:	f000 fce9 	bl	80028f4 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2201      	movs	r2, #1
 8001f26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001f32:	2303      	movs	r3, #3
 8001f34:	e06f      	b.n	8002016 <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	f003 0320 	and.w	r3, r3, #32
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d0da      	beq.n	8001ef6 <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001f40:	f107 030c 	add.w	r3, r7, #12
 8001f44:	461a      	mov	r2, r3
 8001f46:	2110      	movs	r1, #16
 8001f48:	6878      	ldr	r0, [r7, #4]
 8001f4a:	f000 faad 	bl	80024a8 <HAL_ETH_ReadPHYRegister>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d00b      	beq.n	8001f6c <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001f58:	6939      	ldr	r1, [r7, #16]
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f000 fcca 	bl	80028f4 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2201      	movs	r2, #1
 8001f64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e054      	b.n	8002016 <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	f003 0304 	and.w	r3, r3, #4
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d004      	beq.n	8001f80 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f7c:	60da      	str	r2, [r3, #12]
 8001f7e:	e002      	b.n	8001f86 <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2200      	movs	r2, #0
 8001f84:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	f003 0302 	and.w	r3, r3, #2
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d003      	beq.n	8001f98 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2200      	movs	r2, #0
 8001f94:	609a      	str	r2, [r3, #8]
 8001f96:	e035      	b.n	8002004 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f9e:	609a      	str	r2, [r3, #8]
 8001fa0:	e030      	b.n	8002004 <HAL_ETH_Init+0x31c>
 8001fa2:	bf00      	nop
 8001fa4:	03938700 	.word	0x03938700
 8001fa8:	40023800 	.word	0x40023800
 8001fac:	40013800 	.word	0x40013800
 8001fb0:	01312cff 	.word	0x01312cff
 8001fb4:	02160ebf 	.word	0x02160ebf
 8001fb8:	05f5e0ff 	.word	0x05f5e0ff
 8001fbc:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	08db      	lsrs	r3, r3, #3
 8001fc6:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	085b      	lsrs	r3, r3, #1
 8001fce:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	b29b      	uxth	r3, r3
 8001fd4:	461a      	mov	r2, r3
 8001fd6:	2100      	movs	r1, #0
 8001fd8:	6878      	ldr	r0, [r7, #4]
 8001fda:	f000 facd 	bl	8002578 <HAL_ETH_WritePHYRegister>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d00b      	beq.n	8001ffc <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001fe8:	6939      	ldr	r1, [r7, #16]
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f000 fc82 	bl	80028f4 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e00c      	b.n	8002016 <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8001ffc:	f640 70ff 	movw	r0, #4095	; 0xfff
 8002000:	f7ff fd68 	bl	8001ad4 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8002004:	6939      	ldr	r1, [r7, #16]
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f000 fc74 	bl	80028f4 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2201      	movs	r2, #1
 8002010:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8002014:	2300      	movs	r3, #0
}
 8002016:	4618      	mov	r0, r3
 8002018:	3720      	adds	r7, #32
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop

08002020 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8002020:	b480      	push	{r7}
 8002022:	b087      	sub	sp, #28
 8002024:	af00      	add	r7, sp, #0
 8002026:	60f8      	str	r0, [r7, #12]
 8002028:	60b9      	str	r1, [r7, #8]
 800202a:	607a      	str	r2, [r7, #4]
 800202c:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 800202e:	2300      	movs	r3, #0
 8002030:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002038:	2b01      	cmp	r3, #1
 800203a:	d101      	bne.n	8002040 <HAL_ETH_DMATxDescListInit+0x20>
 800203c:	2302      	movs	r3, #2
 800203e:	e052      	b.n	80020e6 <HAL_ETH_DMATxDescListInit+0xc6>
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	2201      	movs	r2, #1
 8002044:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	2202      	movs	r2, #2
 800204c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	68ba      	ldr	r2, [r7, #8]
 8002054:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 8002056:	2300      	movs	r3, #0
 8002058:	617b      	str	r3, [r7, #20]
 800205a:	e030      	b.n	80020be <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	015b      	lsls	r3, r3, #5
 8002060:	68ba      	ldr	r2, [r7, #8]
 8002062:	4413      	add	r3, r2
 8002064:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800206c:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002074:	fb02 f303 	mul.w	r3, r2, r3
 8002078:	687a      	ldr	r2, [r7, #4]
 800207a:	4413      	add	r3, r2
 800207c:	461a      	mov	r2, r3
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	69db      	ldr	r3, [r3, #28]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d105      	bne.n	8002096 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	3b01      	subs	r3, #1
 800209a:	697a      	ldr	r2, [r7, #20]
 800209c:	429a      	cmp	r2, r3
 800209e:	d208      	bcs.n	80020b2 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	3301      	adds	r3, #1
 80020a4:	015b      	lsls	r3, r3, #5
 80020a6:	68ba      	ldr	r2, [r7, #8]
 80020a8:	4413      	add	r3, r2
 80020aa:	461a      	mov	r2, r3
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	60da      	str	r2, [r3, #12]
 80020b0:	e002      	b.n	80020b8 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 80020b2:	68ba      	ldr	r2, [r7, #8]
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	3301      	adds	r3, #1
 80020bc:	617b      	str	r3, [r7, #20]
 80020be:	697a      	ldr	r2, [r7, #20]
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	429a      	cmp	r2, r3
 80020c4:	d3ca      	bcc.n	800205c <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	68ba      	ldr	r2, [r7, #8]
 80020cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020d0:	3310      	adds	r3, #16
 80020d2:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	2201      	movs	r2, #1
 80020d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	2200      	movs	r2, #0
 80020e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80020e4:	2300      	movs	r3, #0
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	371c      	adds	r7, #28
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr

080020f2 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 80020f2:	b480      	push	{r7}
 80020f4:	b087      	sub	sp, #28
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	60f8      	str	r0, [r7, #12]
 80020fa:	60b9      	str	r1, [r7, #8]
 80020fc:	607a      	str	r2, [r7, #4]
 80020fe:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8002100:	2300      	movs	r3, #0
 8002102:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800210a:	2b01      	cmp	r3, #1
 800210c:	d101      	bne.n	8002112 <HAL_ETH_DMARxDescListInit+0x20>
 800210e:	2302      	movs	r3, #2
 8002110:	e056      	b.n	80021c0 <HAL_ETH_DMARxDescListInit+0xce>
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	2201      	movs	r2, #1
 8002116:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	2202      	movs	r2, #2
 800211e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	68ba      	ldr	r2, [r7, #8]
 8002126:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 8002128:	2300      	movs	r3, #0
 800212a:	617b      	str	r3, [r7, #20]
 800212c:	e034      	b.n	8002198 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	015b      	lsls	r3, r3, #5
 8002132:	68ba      	ldr	r2, [r7, #8]
 8002134:	4413      	add	r3, r2
 8002136:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800213e:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8002146:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800214e:	fb02 f303 	mul.w	r3, r2, r3
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	4413      	add	r3, r2
 8002156:	461a      	mov	r2, r3
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	699b      	ldr	r3, [r3, #24]
 8002160:	2b01      	cmp	r3, #1
 8002162:	d105      	bne.n	8002170 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	3b01      	subs	r3, #1
 8002174:	697a      	ldr	r2, [r7, #20]
 8002176:	429a      	cmp	r2, r3
 8002178:	d208      	bcs.n	800218c <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	3301      	adds	r3, #1
 800217e:	015b      	lsls	r3, r3, #5
 8002180:	68ba      	ldr	r2, [r7, #8]
 8002182:	4413      	add	r3, r2
 8002184:	461a      	mov	r2, r3
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	60da      	str	r2, [r3, #12]
 800218a:	e002      	b.n	8002192 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 800218c:	68ba      	ldr	r2, [r7, #8]
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	3301      	adds	r3, #1
 8002196:	617b      	str	r3, [r7, #20]
 8002198:	697a      	ldr	r2, [r7, #20]
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	429a      	cmp	r2, r3
 800219e:	d3c6      	bcc.n	800212e <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	68ba      	ldr	r2, [r7, #8]
 80021a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021aa:	330c      	adds	r3, #12
 80021ac:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	2201      	movs	r2, #1
 80021b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2200      	movs	r2, #0
 80021ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80021be:	2300      	movs	r3, #0
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	371c      	adds	r7, #28
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr

080021cc <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b087      	sub	sp, #28
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 80021d6:	2300      	movs	r3, #0
 80021d8:	617b      	str	r3, [r7, #20]
 80021da:	2300      	movs	r3, #0
 80021dc:	60fb      	str	r3, [r7, #12]
 80021de:	2300      	movs	r3, #0
 80021e0:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d101      	bne.n	80021f0 <HAL_ETH_TransmitFrame+0x24>
 80021ec:	2302      	movs	r3, #2
 80021ee:	e0cd      	b.n	800238c <HAL_ETH_TransmitFrame+0x1c0>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2201      	movs	r2, #1
 80021f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2202      	movs	r2, #2
 80021fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d109      	bne.n	800221a <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2201      	movs	r2, #1
 800220a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2200      	movs	r2, #0
 8002212:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8002216:	2301      	movs	r3, #1
 8002218:	e0b8      	b.n	800238c <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	2b00      	cmp	r3, #0
 8002222:	da09      	bge.n	8002238 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2212      	movs	r2, #18
 8002228:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2200      	movs	r2, #0
 8002230:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	e0a9      	b.n	800238c <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800223e:	4293      	cmp	r3, r2
 8002240:	d915      	bls.n	800226e <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	4a54      	ldr	r2, [pc, #336]	; (8002398 <HAL_ETH_TransmitFrame+0x1cc>)
 8002246:	fba2 2303 	umull	r2, r3, r2, r3
 800224a:	0a9b      	lsrs	r3, r3, #10
 800224c:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 800224e:	683a      	ldr	r2, [r7, #0]
 8002250:	4b51      	ldr	r3, [pc, #324]	; (8002398 <HAL_ETH_TransmitFrame+0x1cc>)
 8002252:	fba3 1302 	umull	r1, r3, r3, r2
 8002256:	0a9b      	lsrs	r3, r3, #10
 8002258:	f240 51f4 	movw	r1, #1524	; 0x5f4
 800225c:	fb01 f303 	mul.w	r3, r1, r3
 8002260:	1ad3      	subs	r3, r2, r3
 8002262:	2b00      	cmp	r3, #0
 8002264:	d005      	beq.n	8002272 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	3301      	adds	r3, #1
 800226a:	617b      	str	r3, [r7, #20]
 800226c:	e001      	b.n	8002272 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 800226e:	2301      	movs	r3, #1
 8002270:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	2b01      	cmp	r3, #1
 8002276:	d11c      	bne.n	80022b2 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002282:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8002286:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800228c:	683a      	ldr	r2, [r7, #0]
 800228e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8002292:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800229e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80022a2:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022a8:	68db      	ldr	r3, [r3, #12]
 80022aa:	461a      	mov	r2, r3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	62da      	str	r2, [r3, #44]	; 0x2c
 80022b0:	e04b      	b.n	800234a <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 80022b2:	2300      	movs	r3, #0
 80022b4:	613b      	str	r3, [r7, #16]
 80022b6:	e044      	b.n	8002342 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022c2:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80022c6:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d107      	bne.n	80022de <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022d8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80022dc:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022e2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80022e6:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	3b01      	subs	r3, #1
 80022ec:	693a      	ldr	r2, [r7, #16]
 80022ee:	429a      	cmp	r2, r3
 80022f0:	d116      	bne.n	8002320 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022fc:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002300:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	4a25      	ldr	r2, [pc, #148]	; (800239c <HAL_ETH_TransmitFrame+0x1d0>)
 8002306:	fb02 f203 	mul.w	r2, r2, r3
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	4413      	add	r3, r2
 800230e:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8002312:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002318:	68fa      	ldr	r2, [r7, #12]
 800231a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800231e:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800232a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800232e:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002334:	68db      	ldr	r3, [r3, #12]
 8002336:	461a      	mov	r2, r3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	3301      	adds	r3, #1
 8002340:	613b      	str	r3, [r7, #16]
 8002342:	693a      	ldr	r2, [r7, #16]
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	429a      	cmp	r2, r3
 8002348:	d3b6      	bcc.n	80022b8 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002352:	3314      	adds	r3, #20
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0304 	and.w	r3, r3, #4
 800235a:	2b00      	cmp	r3, #0
 800235c:	d00d      	beq.n	800237a <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002366:	3314      	adds	r3, #20
 8002368:	2204      	movs	r2, #4
 800236a:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002374:	3304      	adds	r3, #4
 8002376:	2200      	movs	r2, #0
 8002378:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2201      	movs	r2, #1
 800237e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2200      	movs	r2, #0
 8002386:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800238a:	2300      	movs	r3, #0
}
 800238c:	4618      	mov	r0, r3
 800238e:	371c      	adds	r7, #28
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr
 8002398:	ac02b00b 	.word	0xac02b00b
 800239c:	fffffa0c 	.word	0xfffffa0c

080023a0 <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b085      	sub	sp, #20
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0U;
 80023a8:	2300      	movs	r3, #0
 80023aa:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d101      	bne.n	80023ba <HAL_ETH_GetReceivedFrame+0x1a>
 80023b6:	2302      	movs	r3, #2
 80023b8:	e070      	b.n	800249c <HAL_ETH_GetReceivedFrame+0xfc>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2201      	movs	r2, #1
 80023be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2202      	movs	r2, #2
 80023c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	db5a      	blt.n	800248a <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d030      	beq.n	8002444 <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023e6:	1c5a      	adds	r2, r3, #1
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1U)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d103      	bne.n	80023fc <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	0c1b      	lsrs	r3, r3, #16
 800240c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8002410:	3b04      	subs	r3, #4
 8002412:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	68fa      	ldr	r2, [r7, #12]
 8002418:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241e:	689a      	ldr	r2, [r3, #8]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002428:	68db      	ldr	r3, [r3, #12]
 800242a:	461a      	mov	r2, r3
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2201      	movs	r2, #1
 8002434:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2200      	movs	r2, #0
 800243c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
      
      /* Return function status */
      return HAL_OK;
 8002440:	2300      	movs	r3, #0
 8002442:	e02b      	b.n	800249c <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800244e:	2b00      	cmp	r3, #0
 8002450:	d010      	beq.n	8002474 <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2200      	movs	r2, #0
 800245e:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1U;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2201      	movs	r2, #1
 8002464:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	461a      	mov	r2, r3
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	629a      	str	r2, [r3, #40]	; 0x28
 8002472:	e00a      	b.n	800248a <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */ 
    else
    {
      (heth->RxFrameInfos).SegCount++;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002478:	1c5a      	adds	r2, r3, #1
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	461a      	mov	r2, r3
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	629a      	str	r2, [r3, #40]	; 0x28
    } 
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2201      	movs	r2, #1
 800248e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2200      	movs	r2, #0
 8002496:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
}
 800249c:	4618      	mov	r0, r3
 800249e:	3714      	adds	r7, #20
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr

080024a8 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b086      	sub	sp, #24
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	60f8      	str	r0, [r7, #12]
 80024b0:	460b      	mov	r3, r1
 80024b2:	607a      	str	r2, [r7, #4]
 80024b4:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 80024b6:	2300      	movs	r3, #0
 80024b8:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80024ba:	2300      	movs	r3, #0
 80024bc:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	2b82      	cmp	r3, #130	; 0x82
 80024c8:	d101      	bne.n	80024ce <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 80024ca:	2302      	movs	r3, #2
 80024cc:	e050      	b.n	8002570 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	2282      	movs	r2, #130	; 0x82
 80024d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	691b      	ldr	r3, [r3, #16]
 80024dc:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	f003 031c 	and.w	r3, r3, #28
 80024e4:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	8a1b      	ldrh	r3, [r3, #16]
 80024ea:	02db      	lsls	r3, r3, #11
 80024ec:	b29b      	uxth	r3, r3
 80024ee:	697a      	ldr	r2, [r7, #20]
 80024f0:	4313      	orrs	r3, r2
 80024f2:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80024f4:	897b      	ldrh	r3, [r7, #10]
 80024f6:	019b      	lsls	r3, r3, #6
 80024f8:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80024fc:	697a      	ldr	r2, [r7, #20]
 80024fe:	4313      	orrs	r3, r2
 8002500:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	f023 0302 	bic.w	r3, r3, #2
 8002508:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	f043 0301 	orr.w	r3, r3, #1
 8002510:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	697a      	ldr	r2, [r7, #20]
 8002518:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800251a:	f7ff facf 	bl	8001abc <HAL_GetTick>
 800251e:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002520:	e015      	b.n	800254e <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8002522:	f7ff facb 	bl	8001abc <HAL_GetTick>
 8002526:	4602      	mov	r2, r0
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	1ad3      	subs	r3, r2, r3
 800252c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002530:	d309      	bcc.n	8002546 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2201      	movs	r2, #1
 8002536:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2200      	movs	r2, #0
 800253e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	e014      	b.n	8002570 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	691b      	ldr	r3, [r3, #16]
 800254c:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	f003 0301 	and.w	r3, r3, #1
 8002554:	2b00      	cmp	r3, #0
 8002556:	d1e4      	bne.n	8002522 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	695b      	ldr	r3, [r3, #20]
 800255e:	b29b      	uxth	r3, r3
 8002560:	461a      	mov	r2, r3
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	2201      	movs	r2, #1
 800256a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 800256e:	2300      	movs	r3, #0
}
 8002570:	4618      	mov	r0, r3
 8002572:	3718      	adds	r7, #24
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}

08002578 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b086      	sub	sp, #24
 800257c:	af00      	add	r7, sp, #0
 800257e:	60f8      	str	r0, [r7, #12]
 8002580:	460b      	mov	r3, r1
 8002582:	607a      	str	r2, [r7, #4]
 8002584:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8002586:	2300      	movs	r3, #0
 8002588:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 800258a:	2300      	movs	r3, #0
 800258c:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002594:	b2db      	uxtb	r3, r3
 8002596:	2b42      	cmp	r3, #66	; 0x42
 8002598:	d101      	bne.n	800259e <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 800259a:	2302      	movs	r3, #2
 800259c:	e04e      	b.n	800263c <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2242      	movs	r2, #66	; 0x42
 80025a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	691b      	ldr	r3, [r3, #16]
 80025ac:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	f003 031c 	and.w	r3, r3, #28
 80025b4:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	8a1b      	ldrh	r3, [r3, #16]
 80025ba:	02db      	lsls	r3, r3, #11
 80025bc:	b29b      	uxth	r3, r3
 80025be:	697a      	ldr	r2, [r7, #20]
 80025c0:	4313      	orrs	r3, r2
 80025c2:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80025c4:	897b      	ldrh	r3, [r7, #10]
 80025c6:	019b      	lsls	r3, r3, #6
 80025c8:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80025cc:	697a      	ldr	r2, [r7, #20]
 80025ce:	4313      	orrs	r3, r2
 80025d0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	f043 0302 	orr.w	r3, r3, #2
 80025d8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	f043 0301 	orr.w	r3, r3, #1
 80025e0:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	b29a      	uxth	r2, r3
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	697a      	ldr	r2, [r7, #20]
 80025f2:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80025f4:	f7ff fa62 	bl	8001abc <HAL_GetTick>
 80025f8:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80025fa:	e015      	b.n	8002628 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 80025fc:	f7ff fa5e 	bl	8001abc <HAL_GetTick>
 8002600:	4602      	mov	r2, r0
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800260a:	d309      	bcc.n	8002620 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2201      	movs	r2, #1
 8002610:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2200      	movs	r2, #0
 8002618:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800261c:	2303      	movs	r3, #3
 800261e:	e00d      	b.n	800263c <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	691b      	ldr	r3, [r3, #16]
 8002626:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	f003 0301 	and.w	r3, r3, #1
 800262e:	2b00      	cmp	r3, #0
 8002630:	d1e4      	bne.n	80025fc <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2201      	movs	r2, #1
 8002636:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 800263a:	2300      	movs	r3, #0
}
 800263c:	4618      	mov	r0, r3
 800263e:	3718      	adds	r7, #24
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}

08002644 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8002644:	b580      	push	{r7, lr}
 8002646:	b082      	sub	sp, #8
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002652:	2b01      	cmp	r3, #1
 8002654:	d101      	bne.n	800265a <HAL_ETH_Start+0x16>
 8002656:	2302      	movs	r3, #2
 8002658:	e01f      	b.n	800269a <HAL_ETH_Start+0x56>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2201      	movs	r2, #1
 800265e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2202      	movs	r2, #2
 8002666:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f000 fb44 	bl	8002cf8 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8002670:	6878      	ldr	r0, [r7, #4]
 8002672:	f000 fb7b 	bl	8002d6c <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f000 fc12 	bl	8002ea0 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	f000 fbaf 	bl	8002de0 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f000 fbdc 	bl	8002e40 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2201      	movs	r2, #1
 800268c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2200      	movs	r2, #0
 8002694:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002698:	2300      	movs	r3, #0
}
 800269a:	4618      	mov	r0, r3
 800269c:	3708      	adds	r7, #8
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}

080026a2 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 80026a2:	b580      	push	{r7, lr}
 80026a4:	b082      	sub	sp, #8
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d101      	bne.n	80026b8 <HAL_ETH_Stop+0x16>
 80026b4:	2302      	movs	r3, #2
 80026b6:	e01f      	b.n	80026f8 <HAL_ETH_Stop+0x56>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2201      	movs	r2, #1
 80026bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2202      	movs	r2, #2
 80026c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	f000 fba1 	bl	8002e10 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f000 fbce 	bl	8002e70 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	f000 fb66 	bl	8002da6 <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f000 fbe0 	bl	8002ea0 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 80026e0:	6878      	ldr	r0, [r7, #4]
 80026e2:	f000 fb26 	bl	8002d32 <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2201      	movs	r2, #1
 80026ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2200      	movs	r2, #0
 80026f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80026f6:	2300      	movs	r3, #0
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	3708      	adds	r7, #8
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}

08002700 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b084      	sub	sp, #16
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
 8002708:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 800270a:	2300      	movs	r3, #0
 800270c:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002714:	2b01      	cmp	r3, #1
 8002716:	d101      	bne.n	800271c <HAL_ETH_ConfigMAC+0x1c>
 8002718:	2302      	movs	r3, #2
 800271a:	e0e4      	b.n	80028e6 <HAL_ETH_ConfigMAC+0x1e6>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2201      	movs	r2, #1
 8002720:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2202      	movs	r2, #2
 8002728:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	2b00      	cmp	r3, #0
 8002730:	f000 80b1 	beq.w	8002896 <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800273c:	68fa      	ldr	r2, [r7, #12]
 800273e:	4b6c      	ldr	r3, [pc, #432]	; (80028f0 <HAL_ETH_ConfigMAC+0x1f0>)
 8002740:	4013      	ands	r3, r2
 8002742:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 800274c:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8002752:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8002758:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 800275e:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8002764:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 800276a:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8002770:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8002776:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 800277c:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8002782:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8002788:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 800278e:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8002790:	68fa      	ldr	r2, [r7, #12]
 8002792:	4313      	orrs	r3, r2
 8002794:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	68fa      	ldr	r2, [r7, #12]
 800279c:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80027a6:	2001      	movs	r0, #1
 80027a8:	f7ff f994 	bl	8001ad4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	68fa      	ldr	r2, [r7, #12]
 80027b2:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80027bc:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 80027c2:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 80027c8:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 80027ce:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 80027d4:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 80027da:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 80027e6:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80027e8:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80027f2:	2001      	movs	r0, #1
 80027f4:	f7ff f96e 	bl	8001ad4 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	68fa      	ldr	r2, [r7, #12]
 80027fe:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	683a      	ldr	r2, [r7, #0]
 8002806:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002808:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	683a      	ldr	r2, [r7, #0]
 8002810:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002812:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	699b      	ldr	r3, [r3, #24]
 800281a:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800281c:	68fa      	ldr	r2, [r7, #12]
 800281e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002822:	4013      	ands	r3, r2
 8002824:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800282a:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8002830:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8002836:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 800283c:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8002842:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8002848:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 800284a:	68fa      	ldr	r2, [r7, #12]
 800284c:	4313      	orrs	r3, r2
 800284e:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	68fa      	ldr	r2, [r7, #12]
 8002856:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	699b      	ldr	r3, [r3, #24]
 800285e:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002860:	2001      	movs	r0, #1
 8002862:	f7ff f937 	bl	8001ad4 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	68fa      	ldr	r2, [r7, #12]
 800286c:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	430a      	orrs	r2, r1
 800287c:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	69db      	ldr	r3, [r3, #28]
 8002884:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8002886:	2001      	movs	r0, #1
 8002888:	f7ff f924 	bl	8001ad4 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	68fa      	ldr	r2, [r7, #12]
 8002892:	61da      	str	r2, [r3, #28]
 8002894:	e01e      	b.n	80028d4 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80028a4:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	689a      	ldr	r2, [r3, #8]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	68db      	ldr	r3, [r3, #12]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	68fa      	ldr	r2, [r7, #12]
 80028b2:	4313      	orrs	r3, r2
 80028b4:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	68fa      	ldr	r2, [r7, #12]
 80028bc:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80028c6:	2001      	movs	r0, #1
 80028c8:	f7ff f904 	bl	8001ad4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	68fa      	ldr	r2, [r7, #12]
 80028d2:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2201      	movs	r2, #1
 80028d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2200      	movs	r2, #0
 80028e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 80028e4:	2300      	movs	r3, #0
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3710      	adds	r7, #16
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	ff20810f 	.word	0xff20810f

080028f4 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b0b0      	sub	sp, #192	; 0xc0
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
 80028fc:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 80028fe:	2300      	movs	r3, #0
 8002900:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d007      	beq.n	800291a <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002910:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002918:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 800291a:	2300      	movs	r3, #0
 800291c:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 800291e:	2300      	movs	r3, #0
 8002920:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8002922:	2300      	movs	r3, #0
 8002924:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8002926:	2300      	movs	r3, #0
 8002928:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 800292a:	2300      	movs	r3, #0
 800292c:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 800292e:	2300      	movs	r3, #0
 8002930:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	69db      	ldr	r3, [r3, #28]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d103      	bne.n	8002942 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 800293a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800293e:	663b      	str	r3, [r7, #96]	; 0x60
 8002940:	e001      	b.n	8002946 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8002942:	2300      	movs	r3, #0
 8002944:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8002946:	f44f 7300 	mov.w	r3, #512	; 0x200
 800294a:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 800294c:	2300      	movs	r3, #0
 800294e:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002950:	2300      	movs	r3, #0
 8002952:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8002954:	2300      	movs	r3, #0
 8002956:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8002958:	2300      	movs	r3, #0
 800295a:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 800295c:	2300      	movs	r3, #0
 800295e:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8002960:	2340      	movs	r3, #64	; 0x40
 8002962:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8002964:	2300      	movs	r3, #0
 8002966:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 800296a:	2300      	movs	r3, #0
 800296c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8002970:	2300      	movs	r3, #0
 8002972:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8002976:	2300      	movs	r3, #0
 8002978:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 800297c:	2300      	movs	r3, #0
 800297e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8002982:	2300      	movs	r3, #0
 8002984:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8002988:	2300      	movs	r3, #0
 800298a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 800298e:	2300      	movs	r3, #0
 8002990:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8002994:	2380      	movs	r3, #128	; 0x80
 8002996:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800299a:	2300      	movs	r3, #0
 800299c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 80029a0:	2300      	movs	r3, #0
 80029a2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 80029a6:	2300      	movs	r3, #0
 80029a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 80029ac:	2300      	movs	r3, #0
 80029ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 80029b2:	2300      	movs	r3, #0
 80029b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 80029b8:	2300      	movs	r3, #0
 80029ba:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80029c8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80029cc:	4bac      	ldr	r3, [pc, #688]	; (8002c80 <ETH_MACDMAConfig+0x38c>)
 80029ce:	4013      	ands	r3, r2
 80029d0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80029d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 80029d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80029d8:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 80029da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 80029dc:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 80029de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 80029e0:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 80029e6:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 80029e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 80029ea:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 80029ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 80029ee:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 80029f4:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 80029f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 80029f8:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 80029fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 80029fc:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 80029fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8002a00:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8002a02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8002a04:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8002a06:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8002a08:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8002a0a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002a1c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002a28:	2001      	movs	r0, #1
 8002a2a:	f7ff f853 	bl	8001ad4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002a36:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002a38:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8002a3a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002a3c:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8002a3e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8002a40:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8002a42:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8002a46:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8002a48:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8002a4c:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8002a4e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8002a52:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8002a54:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8002a58:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8002a5c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8002a64:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002a66:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002a72:	2001      	movs	r0, #1
 8002a74:	f7ff f82e 	bl	8001ad4 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002a80:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002a8a:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002a94:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	699b      	ldr	r3, [r3, #24]
 8002a9c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002aa0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002aa4:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8002aae:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002ab2:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8002ab4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8002ab8:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8002aba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8002abe:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8002ac0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8002ac4:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8002ac6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8002aca:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8002acc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8002ad0:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8002ad2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002ae4:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	699b      	ldr	r3, [r3, #24]
 8002aec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002af0:	2001      	movs	r0, #1
 8002af2:	f7fe ffef 	bl	8001ad4 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002afe:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002b00:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8002b04:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	430a      	orrs	r2, r1
 8002b0e:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	69db      	ldr	r3, [r3, #28]
 8002b16:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002b1a:	2001      	movs	r0, #1
 8002b1c:	f7fe ffda 	bl	8001ad4 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002b28:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8002b2e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b32:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8002b34:	2300      	movs	r3, #0
 8002b36:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8002b38:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002b3c:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8002b42:	2300      	movs	r3, #0
 8002b44:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8002b46:	2300      	movs	r3, #0
 8002b48:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8002b4e:	2304      	movs	r3, #4
 8002b50:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8002b52:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b56:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8002b58:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b5c:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002b5e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002b62:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002b64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b68:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8002b6a:	2380      	movs	r3, #128	; 0x80
 8002b6c:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002b72:	2300      	movs	r3, #0
 8002b74:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b7e:	3318      	adds	r3, #24
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002b86:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002b8a:	4b3e      	ldr	r3, [pc, #248]	; (8002c84 <ETH_MACDMAConfig+0x390>)
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002b92:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8002b94:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002b96:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8002b98:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8002b9a:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8002b9c:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8002b9e:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8002ba0:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8002ba2:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8002ba4:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8002ba6:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8002ba8:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8002baa:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8002bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8002bae:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8002bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8002bb2:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002bb4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002bc6:	3318      	adds	r3, #24
 8002bc8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002bcc:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002bd6:	3318      	adds	r3, #24
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002bde:	2001      	movs	r0, #1
 8002be0:	f7fe ff78 	bl	8001ad4 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002bec:	3318      	adds	r3, #24
 8002bee:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002bf2:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002bf4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8002bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002bf8:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002bfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8002bfc:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8002bfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002c00:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8002c02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8002c04:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 8002c06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c08:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8002c0a:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8002c0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 8002c0e:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002c18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c1c:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002c2c:	2001      	movs	r0, #1
 8002c2e:	f7fe ff51 	bl	8001ad4 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c3a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002c3e:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	699b      	ldr	r3, [r3, #24]
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d10f      	bne.n	8002c68 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c50:	331c      	adds	r3, #28
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002c5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c64:	331c      	adds	r3, #28
 8002c66:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	695b      	ldr	r3, [r3, #20]
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	2100      	movs	r1, #0
 8002c70:	6878      	ldr	r0, [r7, #4]
 8002c72:	f000 f809 	bl	8002c88 <ETH_MACAddressConfig>
}
 8002c76:	bf00      	nop
 8002c78:	37c0      	adds	r7, #192	; 0xc0
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	ff20810f 	.word	0xff20810f
 8002c84:	f8de3f23 	.word	0xf8de3f23

08002c88 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b087      	sub	sp, #28
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	60f8      	str	r0, [r7, #12]
 8002c90:	60b9      	str	r1, [r7, #8]
 8002c92:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	3305      	adds	r3, #5
 8002c98:	781b      	ldrb	r3, [r3, #0]
 8002c9a:	021b      	lsls	r3, r3, #8
 8002c9c:	687a      	ldr	r2, [r7, #4]
 8002c9e:	3204      	adds	r2, #4
 8002ca0:	7812      	ldrb	r2, [r2, #0]
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002ca6:	68ba      	ldr	r2, [r7, #8]
 8002ca8:	4b11      	ldr	r3, [pc, #68]	; (8002cf0 <ETH_MACAddressConfig+0x68>)
 8002caa:	4413      	add	r3, r2
 8002cac:	461a      	mov	r2, r3
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	3303      	adds	r3, #3
 8002cb6:	781b      	ldrb	r3, [r3, #0]
 8002cb8:	061a      	lsls	r2, r3, #24
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	3302      	adds	r3, #2
 8002cbe:	781b      	ldrb	r3, [r3, #0]
 8002cc0:	041b      	lsls	r3, r3, #16
 8002cc2:	431a      	orrs	r2, r3
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	3301      	adds	r3, #1
 8002cc8:	781b      	ldrb	r3, [r3, #0]
 8002cca:	021b      	lsls	r3, r3, #8
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	7812      	ldrb	r2, [r2, #0]
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002cd6:	68ba      	ldr	r2, [r7, #8]
 8002cd8:	4b06      	ldr	r3, [pc, #24]	; (8002cf4 <ETH_MACAddressConfig+0x6c>)
 8002cda:	4413      	add	r3, r2
 8002cdc:	461a      	mov	r2, r3
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	6013      	str	r3, [r2, #0]
}
 8002ce2:	bf00      	nop
 8002ce4:	371c      	adds	r7, #28
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr
 8002cee:	bf00      	nop
 8002cf0:	40028040 	.word	0x40028040
 8002cf4:	40028044 	.word	0x40028044

08002cf8 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b084      	sub	sp, #16
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002d00:	2300      	movs	r3, #0
 8002d02:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f042 0208 	orr.w	r2, r2, #8
 8002d12:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002d1c:	2001      	movs	r0, #1
 8002d1e:	f000 f8e9 	bl	8002ef4 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	68fa      	ldr	r2, [r7, #12]
 8002d28:	601a      	str	r2, [r3, #0]
}
 8002d2a:	bf00      	nop
 8002d2c:	3710      	adds	r7, #16
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}

08002d32 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002d32:	b580      	push	{r7, lr}
 8002d34:	b084      	sub	sp, #16
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f022 0208 	bic.w	r2, r2, #8
 8002d4c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002d56:	2001      	movs	r0, #1
 8002d58:	f000 f8cc 	bl	8002ef4 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	68fa      	ldr	r2, [r7, #12]
 8002d62:	601a      	str	r2, [r3, #0]
}
 8002d64:	bf00      	nop
 8002d66:	3710      	adds	r7, #16
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}

08002d6c <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b084      	sub	sp, #16
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002d74:	2300      	movs	r3, #0
 8002d76:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f042 0204 	orr.w	r2, r2, #4
 8002d86:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002d90:	2001      	movs	r0, #1
 8002d92:	f000 f8af 	bl	8002ef4 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	68fa      	ldr	r2, [r7, #12]
 8002d9c:	601a      	str	r2, [r3, #0]
}
 8002d9e:	bf00      	nop
 8002da0:	3710      	adds	r7, #16
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}

08002da6 <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002da6:	b580      	push	{r7, lr}
 8002da8:	b084      	sub	sp, #16
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002dae:	2300      	movs	r3, #0
 8002db0:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f022 0204 	bic.w	r2, r2, #4
 8002dc0:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002dca:	2001      	movs	r0, #1
 8002dcc:	f000 f892 	bl	8002ef4 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	68fa      	ldr	r2, [r7, #12]
 8002dd6:	601a      	str	r2, [r3, #0]
}
 8002dd8:	bf00      	nop
 8002dda:	3710      	adds	r7, #16
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}

08002de0 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002df0:	3318      	adds	r3, #24
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002dfc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e00:	3318      	adds	r3, #24
 8002e02:	601a      	str	r2, [r3, #0]
}
 8002e04:	bf00      	nop
 8002e06:	370c      	adds	r7, #12
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr

08002e10 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002e10:	b480      	push	{r7}
 8002e12:	b083      	sub	sp, #12
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e20:	3318      	adds	r3, #24
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e30:	3318      	adds	r3, #24
 8002e32:	601a      	str	r2, [r3, #0]
}
 8002e34:	bf00      	nop
 8002e36:	370c      	adds	r7, #12
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr

08002e40 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8002e40:	b480      	push	{r7}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e50:	3318      	adds	r3, #24
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f042 0202 	orr.w	r2, r2, #2
 8002e5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e60:	3318      	adds	r3, #24
 8002e62:	601a      	str	r2, [r3, #0]
}
 8002e64:	bf00      	nop
 8002e66:	370c      	adds	r7, #12
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6e:	4770      	bx	lr

08002e70 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002e70:	b480      	push	{r7}
 8002e72:	b083      	sub	sp, #12
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e80:	3318      	adds	r3, #24
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f022 0202 	bic.w	r2, r2, #2
 8002e8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e90:	3318      	adds	r3, #24
 8002e92:	601a      	str	r2, [r3, #0]
}
 8002e94:	bf00      	nop
 8002e96:	370c      	adds	r7, #12
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr

08002ea0 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b084      	sub	sp, #16
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002eb4:	3318      	adds	r3, #24
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002ec0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ec4:	3318      	adds	r3, #24
 8002ec6:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ed0:	3318      	adds	r3, #24
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002ed6:	2001      	movs	r0, #1
 8002ed8:	f000 f80c 	bl	8002ef4 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	68fa      	ldr	r2, [r7, #12]
 8002ee2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ee6:	3318      	adds	r3, #24
 8002ee8:	601a      	str	r2, [r3, #0]
}
 8002eea:	bf00      	nop
 8002eec:	3710      	adds	r7, #16
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
	...

08002ef4 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b085      	sub	sp, #20
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002efc:	4b0b      	ldr	r3, [pc, #44]	; (8002f2c <ETH_Delay+0x38>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a0b      	ldr	r2, [pc, #44]	; (8002f30 <ETH_Delay+0x3c>)
 8002f02:	fba2 2303 	umull	r2, r3, r2, r3
 8002f06:	0a5b      	lsrs	r3, r3, #9
 8002f08:	687a      	ldr	r2, [r7, #4]
 8002f0a:	fb02 f303 	mul.w	r3, r2, r3
 8002f0e:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 8002f10:	bf00      	nop
  } 
  while (Delay --);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	1e5a      	subs	r2, r3, #1
 8002f16:	60fa      	str	r2, [r7, #12]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d1f9      	bne.n	8002f10 <ETH_Delay+0x1c>
}
 8002f1c:	bf00      	nop
 8002f1e:	bf00      	nop
 8002f20:	3714      	adds	r7, #20
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr
 8002f2a:	bf00      	nop
 8002f2c:	2000001c 	.word	0x2000001c
 8002f30:	10624dd3 	.word	0x10624dd3

08002f34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b089      	sub	sp, #36	; 0x24
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
 8002f3c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f42:	2300      	movs	r3, #0
 8002f44:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f46:	2300      	movs	r3, #0
 8002f48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	61fb      	str	r3, [r7, #28]
 8002f4e:	e16b      	b.n	8003228 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f50:	2201      	movs	r2, #1
 8002f52:	69fb      	ldr	r3, [r7, #28]
 8002f54:	fa02 f303 	lsl.w	r3, r2, r3
 8002f58:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	697a      	ldr	r2, [r7, #20]
 8002f60:	4013      	ands	r3, r2
 8002f62:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f64:	693a      	ldr	r2, [r7, #16]
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	f040 815a 	bne.w	8003222 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	f003 0303 	and.w	r3, r3, #3
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d005      	beq.n	8002f86 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	d130      	bne.n	8002fe8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f8c:	69fb      	ldr	r3, [r7, #28]
 8002f8e:	005b      	lsls	r3, r3, #1
 8002f90:	2203      	movs	r2, #3
 8002f92:	fa02 f303 	lsl.w	r3, r2, r3
 8002f96:	43db      	mvns	r3, r3
 8002f98:	69ba      	ldr	r2, [r7, #24]
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	68da      	ldr	r2, [r3, #12]
 8002fa2:	69fb      	ldr	r3, [r7, #28]
 8002fa4:	005b      	lsls	r3, r3, #1
 8002fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8002faa:	69ba      	ldr	r2, [r7, #24]
 8002fac:	4313      	orrs	r3, r2
 8002fae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	69ba      	ldr	r2, [r7, #24]
 8002fb4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc4:	43db      	mvns	r3, r3
 8002fc6:	69ba      	ldr	r2, [r7, #24]
 8002fc8:	4013      	ands	r3, r2
 8002fca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	091b      	lsrs	r3, r3, #4
 8002fd2:	f003 0201 	and.w	r2, r3, #1
 8002fd6:	69fb      	ldr	r3, [r7, #28]
 8002fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fdc:	69ba      	ldr	r2, [r7, #24]
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	69ba      	ldr	r2, [r7, #24]
 8002fe6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	f003 0303 	and.w	r3, r3, #3
 8002ff0:	2b03      	cmp	r3, #3
 8002ff2:	d017      	beq.n	8003024 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ffa:	69fb      	ldr	r3, [r7, #28]
 8002ffc:	005b      	lsls	r3, r3, #1
 8002ffe:	2203      	movs	r2, #3
 8003000:	fa02 f303 	lsl.w	r3, r2, r3
 8003004:	43db      	mvns	r3, r3
 8003006:	69ba      	ldr	r2, [r7, #24]
 8003008:	4013      	ands	r3, r2
 800300a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	689a      	ldr	r2, [r3, #8]
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	005b      	lsls	r3, r3, #1
 8003014:	fa02 f303 	lsl.w	r3, r2, r3
 8003018:	69ba      	ldr	r2, [r7, #24]
 800301a:	4313      	orrs	r3, r2
 800301c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	69ba      	ldr	r2, [r7, #24]
 8003022:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	f003 0303 	and.w	r3, r3, #3
 800302c:	2b02      	cmp	r3, #2
 800302e:	d123      	bne.n	8003078 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003030:	69fb      	ldr	r3, [r7, #28]
 8003032:	08da      	lsrs	r2, r3, #3
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	3208      	adds	r2, #8
 8003038:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800303c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	f003 0307 	and.w	r3, r3, #7
 8003044:	009b      	lsls	r3, r3, #2
 8003046:	220f      	movs	r2, #15
 8003048:	fa02 f303 	lsl.w	r3, r2, r3
 800304c:	43db      	mvns	r3, r3
 800304e:	69ba      	ldr	r2, [r7, #24]
 8003050:	4013      	ands	r3, r2
 8003052:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	691a      	ldr	r2, [r3, #16]
 8003058:	69fb      	ldr	r3, [r7, #28]
 800305a:	f003 0307 	and.w	r3, r3, #7
 800305e:	009b      	lsls	r3, r3, #2
 8003060:	fa02 f303 	lsl.w	r3, r2, r3
 8003064:	69ba      	ldr	r2, [r7, #24]
 8003066:	4313      	orrs	r3, r2
 8003068:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800306a:	69fb      	ldr	r3, [r7, #28]
 800306c:	08da      	lsrs	r2, r3, #3
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	3208      	adds	r2, #8
 8003072:	69b9      	ldr	r1, [r7, #24]
 8003074:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	005b      	lsls	r3, r3, #1
 8003082:	2203      	movs	r2, #3
 8003084:	fa02 f303 	lsl.w	r3, r2, r3
 8003088:	43db      	mvns	r3, r3
 800308a:	69ba      	ldr	r2, [r7, #24]
 800308c:	4013      	ands	r3, r2
 800308e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	f003 0203 	and.w	r2, r3, #3
 8003098:	69fb      	ldr	r3, [r7, #28]
 800309a:	005b      	lsls	r3, r3, #1
 800309c:	fa02 f303 	lsl.w	r3, r2, r3
 80030a0:	69ba      	ldr	r2, [r7, #24]
 80030a2:	4313      	orrs	r3, r2
 80030a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	69ba      	ldr	r2, [r7, #24]
 80030aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	f000 80b4 	beq.w	8003222 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030ba:	2300      	movs	r3, #0
 80030bc:	60fb      	str	r3, [r7, #12]
 80030be:	4b60      	ldr	r3, [pc, #384]	; (8003240 <HAL_GPIO_Init+0x30c>)
 80030c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030c2:	4a5f      	ldr	r2, [pc, #380]	; (8003240 <HAL_GPIO_Init+0x30c>)
 80030c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030c8:	6453      	str	r3, [r2, #68]	; 0x44
 80030ca:	4b5d      	ldr	r3, [pc, #372]	; (8003240 <HAL_GPIO_Init+0x30c>)
 80030cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030d2:	60fb      	str	r3, [r7, #12]
 80030d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80030d6:	4a5b      	ldr	r2, [pc, #364]	; (8003244 <HAL_GPIO_Init+0x310>)
 80030d8:	69fb      	ldr	r3, [r7, #28]
 80030da:	089b      	lsrs	r3, r3, #2
 80030dc:	3302      	adds	r3, #2
 80030de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	f003 0303 	and.w	r3, r3, #3
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	220f      	movs	r2, #15
 80030ee:	fa02 f303 	lsl.w	r3, r2, r3
 80030f2:	43db      	mvns	r3, r3
 80030f4:	69ba      	ldr	r2, [r7, #24]
 80030f6:	4013      	ands	r3, r2
 80030f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4a52      	ldr	r2, [pc, #328]	; (8003248 <HAL_GPIO_Init+0x314>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d02b      	beq.n	800315a <HAL_GPIO_Init+0x226>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4a51      	ldr	r2, [pc, #324]	; (800324c <HAL_GPIO_Init+0x318>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d025      	beq.n	8003156 <HAL_GPIO_Init+0x222>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	4a50      	ldr	r2, [pc, #320]	; (8003250 <HAL_GPIO_Init+0x31c>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d01f      	beq.n	8003152 <HAL_GPIO_Init+0x21e>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	4a4f      	ldr	r2, [pc, #316]	; (8003254 <HAL_GPIO_Init+0x320>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d019      	beq.n	800314e <HAL_GPIO_Init+0x21a>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	4a4e      	ldr	r2, [pc, #312]	; (8003258 <HAL_GPIO_Init+0x324>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d013      	beq.n	800314a <HAL_GPIO_Init+0x216>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	4a4d      	ldr	r2, [pc, #308]	; (800325c <HAL_GPIO_Init+0x328>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d00d      	beq.n	8003146 <HAL_GPIO_Init+0x212>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4a4c      	ldr	r2, [pc, #304]	; (8003260 <HAL_GPIO_Init+0x32c>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d007      	beq.n	8003142 <HAL_GPIO_Init+0x20e>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	4a4b      	ldr	r2, [pc, #300]	; (8003264 <HAL_GPIO_Init+0x330>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d101      	bne.n	800313e <HAL_GPIO_Init+0x20a>
 800313a:	2307      	movs	r3, #7
 800313c:	e00e      	b.n	800315c <HAL_GPIO_Init+0x228>
 800313e:	2308      	movs	r3, #8
 8003140:	e00c      	b.n	800315c <HAL_GPIO_Init+0x228>
 8003142:	2306      	movs	r3, #6
 8003144:	e00a      	b.n	800315c <HAL_GPIO_Init+0x228>
 8003146:	2305      	movs	r3, #5
 8003148:	e008      	b.n	800315c <HAL_GPIO_Init+0x228>
 800314a:	2304      	movs	r3, #4
 800314c:	e006      	b.n	800315c <HAL_GPIO_Init+0x228>
 800314e:	2303      	movs	r3, #3
 8003150:	e004      	b.n	800315c <HAL_GPIO_Init+0x228>
 8003152:	2302      	movs	r3, #2
 8003154:	e002      	b.n	800315c <HAL_GPIO_Init+0x228>
 8003156:	2301      	movs	r3, #1
 8003158:	e000      	b.n	800315c <HAL_GPIO_Init+0x228>
 800315a:	2300      	movs	r3, #0
 800315c:	69fa      	ldr	r2, [r7, #28]
 800315e:	f002 0203 	and.w	r2, r2, #3
 8003162:	0092      	lsls	r2, r2, #2
 8003164:	4093      	lsls	r3, r2
 8003166:	69ba      	ldr	r2, [r7, #24]
 8003168:	4313      	orrs	r3, r2
 800316a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800316c:	4935      	ldr	r1, [pc, #212]	; (8003244 <HAL_GPIO_Init+0x310>)
 800316e:	69fb      	ldr	r3, [r7, #28]
 8003170:	089b      	lsrs	r3, r3, #2
 8003172:	3302      	adds	r3, #2
 8003174:	69ba      	ldr	r2, [r7, #24]
 8003176:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800317a:	4b3b      	ldr	r3, [pc, #236]	; (8003268 <HAL_GPIO_Init+0x334>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	43db      	mvns	r3, r3
 8003184:	69ba      	ldr	r2, [r7, #24]
 8003186:	4013      	ands	r3, r2
 8003188:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003192:	2b00      	cmp	r3, #0
 8003194:	d003      	beq.n	800319e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003196:	69ba      	ldr	r2, [r7, #24]
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	4313      	orrs	r3, r2
 800319c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800319e:	4a32      	ldr	r2, [pc, #200]	; (8003268 <HAL_GPIO_Init+0x334>)
 80031a0:	69bb      	ldr	r3, [r7, #24]
 80031a2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80031a4:	4b30      	ldr	r3, [pc, #192]	; (8003268 <HAL_GPIO_Init+0x334>)
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	43db      	mvns	r3, r3
 80031ae:	69ba      	ldr	r2, [r7, #24]
 80031b0:	4013      	ands	r3, r2
 80031b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d003      	beq.n	80031c8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80031c0:	69ba      	ldr	r2, [r7, #24]
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	4313      	orrs	r3, r2
 80031c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80031c8:	4a27      	ldr	r2, [pc, #156]	; (8003268 <HAL_GPIO_Init+0x334>)
 80031ca:	69bb      	ldr	r3, [r7, #24]
 80031cc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80031ce:	4b26      	ldr	r3, [pc, #152]	; (8003268 <HAL_GPIO_Init+0x334>)
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	43db      	mvns	r3, r3
 80031d8:	69ba      	ldr	r2, [r7, #24]
 80031da:	4013      	ands	r3, r2
 80031dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d003      	beq.n	80031f2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80031ea:	69ba      	ldr	r2, [r7, #24]
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	4313      	orrs	r3, r2
 80031f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80031f2:	4a1d      	ldr	r2, [pc, #116]	; (8003268 <HAL_GPIO_Init+0x334>)
 80031f4:	69bb      	ldr	r3, [r7, #24]
 80031f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80031f8:	4b1b      	ldr	r3, [pc, #108]	; (8003268 <HAL_GPIO_Init+0x334>)
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	43db      	mvns	r3, r3
 8003202:	69ba      	ldr	r2, [r7, #24]
 8003204:	4013      	ands	r3, r2
 8003206:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003210:	2b00      	cmp	r3, #0
 8003212:	d003      	beq.n	800321c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003214:	69ba      	ldr	r2, [r7, #24]
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	4313      	orrs	r3, r2
 800321a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800321c:	4a12      	ldr	r2, [pc, #72]	; (8003268 <HAL_GPIO_Init+0x334>)
 800321e:	69bb      	ldr	r3, [r7, #24]
 8003220:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003222:	69fb      	ldr	r3, [r7, #28]
 8003224:	3301      	adds	r3, #1
 8003226:	61fb      	str	r3, [r7, #28]
 8003228:	69fb      	ldr	r3, [r7, #28]
 800322a:	2b0f      	cmp	r3, #15
 800322c:	f67f ae90 	bls.w	8002f50 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003230:	bf00      	nop
 8003232:	bf00      	nop
 8003234:	3724      	adds	r7, #36	; 0x24
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr
 800323e:	bf00      	nop
 8003240:	40023800 	.word	0x40023800
 8003244:	40013800 	.word	0x40013800
 8003248:	40020000 	.word	0x40020000
 800324c:	40020400 	.word	0x40020400
 8003250:	40020800 	.word	0x40020800
 8003254:	40020c00 	.word	0x40020c00
 8003258:	40021000 	.word	0x40021000
 800325c:	40021400 	.word	0x40021400
 8003260:	40021800 	.word	0x40021800
 8003264:	40021c00 	.word	0x40021c00
 8003268:	40013c00 	.word	0x40013c00

0800326c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b086      	sub	sp, #24
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d101      	bne.n	800327e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e264      	b.n	8003748 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 0301 	and.w	r3, r3, #1
 8003286:	2b00      	cmp	r3, #0
 8003288:	d075      	beq.n	8003376 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800328a:	4ba3      	ldr	r3, [pc, #652]	; (8003518 <HAL_RCC_OscConfig+0x2ac>)
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	f003 030c 	and.w	r3, r3, #12
 8003292:	2b04      	cmp	r3, #4
 8003294:	d00c      	beq.n	80032b0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003296:	4ba0      	ldr	r3, [pc, #640]	; (8003518 <HAL_RCC_OscConfig+0x2ac>)
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800329e:	2b08      	cmp	r3, #8
 80032a0:	d112      	bne.n	80032c8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032a2:	4b9d      	ldr	r3, [pc, #628]	; (8003518 <HAL_RCC_OscConfig+0x2ac>)
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032ae:	d10b      	bne.n	80032c8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032b0:	4b99      	ldr	r3, [pc, #612]	; (8003518 <HAL_RCC_OscConfig+0x2ac>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d05b      	beq.n	8003374 <HAL_RCC_OscConfig+0x108>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d157      	bne.n	8003374 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	e23f      	b.n	8003748 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032d0:	d106      	bne.n	80032e0 <HAL_RCC_OscConfig+0x74>
 80032d2:	4b91      	ldr	r3, [pc, #580]	; (8003518 <HAL_RCC_OscConfig+0x2ac>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a90      	ldr	r2, [pc, #576]	; (8003518 <HAL_RCC_OscConfig+0x2ac>)
 80032d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032dc:	6013      	str	r3, [r2, #0]
 80032de:	e01d      	b.n	800331c <HAL_RCC_OscConfig+0xb0>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032e8:	d10c      	bne.n	8003304 <HAL_RCC_OscConfig+0x98>
 80032ea:	4b8b      	ldr	r3, [pc, #556]	; (8003518 <HAL_RCC_OscConfig+0x2ac>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a8a      	ldr	r2, [pc, #552]	; (8003518 <HAL_RCC_OscConfig+0x2ac>)
 80032f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032f4:	6013      	str	r3, [r2, #0]
 80032f6:	4b88      	ldr	r3, [pc, #544]	; (8003518 <HAL_RCC_OscConfig+0x2ac>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a87      	ldr	r2, [pc, #540]	; (8003518 <HAL_RCC_OscConfig+0x2ac>)
 80032fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003300:	6013      	str	r3, [r2, #0]
 8003302:	e00b      	b.n	800331c <HAL_RCC_OscConfig+0xb0>
 8003304:	4b84      	ldr	r3, [pc, #528]	; (8003518 <HAL_RCC_OscConfig+0x2ac>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a83      	ldr	r2, [pc, #524]	; (8003518 <HAL_RCC_OscConfig+0x2ac>)
 800330a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800330e:	6013      	str	r3, [r2, #0]
 8003310:	4b81      	ldr	r3, [pc, #516]	; (8003518 <HAL_RCC_OscConfig+0x2ac>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a80      	ldr	r2, [pc, #512]	; (8003518 <HAL_RCC_OscConfig+0x2ac>)
 8003316:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800331a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d013      	beq.n	800334c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003324:	f7fe fbca 	bl	8001abc <HAL_GetTick>
 8003328:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800332a:	e008      	b.n	800333e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800332c:	f7fe fbc6 	bl	8001abc <HAL_GetTick>
 8003330:	4602      	mov	r2, r0
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	2b64      	cmp	r3, #100	; 0x64
 8003338:	d901      	bls.n	800333e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800333a:	2303      	movs	r3, #3
 800333c:	e204      	b.n	8003748 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800333e:	4b76      	ldr	r3, [pc, #472]	; (8003518 <HAL_RCC_OscConfig+0x2ac>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003346:	2b00      	cmp	r3, #0
 8003348:	d0f0      	beq.n	800332c <HAL_RCC_OscConfig+0xc0>
 800334a:	e014      	b.n	8003376 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800334c:	f7fe fbb6 	bl	8001abc <HAL_GetTick>
 8003350:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003352:	e008      	b.n	8003366 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003354:	f7fe fbb2 	bl	8001abc <HAL_GetTick>
 8003358:	4602      	mov	r2, r0
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	2b64      	cmp	r3, #100	; 0x64
 8003360:	d901      	bls.n	8003366 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	e1f0      	b.n	8003748 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003366:	4b6c      	ldr	r3, [pc, #432]	; (8003518 <HAL_RCC_OscConfig+0x2ac>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800336e:	2b00      	cmp	r3, #0
 8003370:	d1f0      	bne.n	8003354 <HAL_RCC_OscConfig+0xe8>
 8003372:	e000      	b.n	8003376 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003374:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 0302 	and.w	r3, r3, #2
 800337e:	2b00      	cmp	r3, #0
 8003380:	d063      	beq.n	800344a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003382:	4b65      	ldr	r3, [pc, #404]	; (8003518 <HAL_RCC_OscConfig+0x2ac>)
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	f003 030c 	and.w	r3, r3, #12
 800338a:	2b00      	cmp	r3, #0
 800338c:	d00b      	beq.n	80033a6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800338e:	4b62      	ldr	r3, [pc, #392]	; (8003518 <HAL_RCC_OscConfig+0x2ac>)
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003396:	2b08      	cmp	r3, #8
 8003398:	d11c      	bne.n	80033d4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800339a:	4b5f      	ldr	r3, [pc, #380]	; (8003518 <HAL_RCC_OscConfig+0x2ac>)
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d116      	bne.n	80033d4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033a6:	4b5c      	ldr	r3, [pc, #368]	; (8003518 <HAL_RCC_OscConfig+0x2ac>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 0302 	and.w	r3, r3, #2
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d005      	beq.n	80033be <HAL_RCC_OscConfig+0x152>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	68db      	ldr	r3, [r3, #12]
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	d001      	beq.n	80033be <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e1c4      	b.n	8003748 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033be:	4b56      	ldr	r3, [pc, #344]	; (8003518 <HAL_RCC_OscConfig+0x2ac>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	691b      	ldr	r3, [r3, #16]
 80033ca:	00db      	lsls	r3, r3, #3
 80033cc:	4952      	ldr	r1, [pc, #328]	; (8003518 <HAL_RCC_OscConfig+0x2ac>)
 80033ce:	4313      	orrs	r3, r2
 80033d0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033d2:	e03a      	b.n	800344a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	68db      	ldr	r3, [r3, #12]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d020      	beq.n	800341e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033dc:	4b4f      	ldr	r3, [pc, #316]	; (800351c <HAL_RCC_OscConfig+0x2b0>)
 80033de:	2201      	movs	r2, #1
 80033e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033e2:	f7fe fb6b 	bl	8001abc <HAL_GetTick>
 80033e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033e8:	e008      	b.n	80033fc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033ea:	f7fe fb67 	bl	8001abc <HAL_GetTick>
 80033ee:	4602      	mov	r2, r0
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	2b02      	cmp	r3, #2
 80033f6:	d901      	bls.n	80033fc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80033f8:	2303      	movs	r3, #3
 80033fa:	e1a5      	b.n	8003748 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033fc:	4b46      	ldr	r3, [pc, #280]	; (8003518 <HAL_RCC_OscConfig+0x2ac>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 0302 	and.w	r3, r3, #2
 8003404:	2b00      	cmp	r3, #0
 8003406:	d0f0      	beq.n	80033ea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003408:	4b43      	ldr	r3, [pc, #268]	; (8003518 <HAL_RCC_OscConfig+0x2ac>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	691b      	ldr	r3, [r3, #16]
 8003414:	00db      	lsls	r3, r3, #3
 8003416:	4940      	ldr	r1, [pc, #256]	; (8003518 <HAL_RCC_OscConfig+0x2ac>)
 8003418:	4313      	orrs	r3, r2
 800341a:	600b      	str	r3, [r1, #0]
 800341c:	e015      	b.n	800344a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800341e:	4b3f      	ldr	r3, [pc, #252]	; (800351c <HAL_RCC_OscConfig+0x2b0>)
 8003420:	2200      	movs	r2, #0
 8003422:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003424:	f7fe fb4a 	bl	8001abc <HAL_GetTick>
 8003428:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800342a:	e008      	b.n	800343e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800342c:	f7fe fb46 	bl	8001abc <HAL_GetTick>
 8003430:	4602      	mov	r2, r0
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	1ad3      	subs	r3, r2, r3
 8003436:	2b02      	cmp	r3, #2
 8003438:	d901      	bls.n	800343e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800343a:	2303      	movs	r3, #3
 800343c:	e184      	b.n	8003748 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800343e:	4b36      	ldr	r3, [pc, #216]	; (8003518 <HAL_RCC_OscConfig+0x2ac>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 0302 	and.w	r3, r3, #2
 8003446:	2b00      	cmp	r3, #0
 8003448:	d1f0      	bne.n	800342c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0308 	and.w	r3, r3, #8
 8003452:	2b00      	cmp	r3, #0
 8003454:	d030      	beq.n	80034b8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	695b      	ldr	r3, [r3, #20]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d016      	beq.n	800348c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800345e:	4b30      	ldr	r3, [pc, #192]	; (8003520 <HAL_RCC_OscConfig+0x2b4>)
 8003460:	2201      	movs	r2, #1
 8003462:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003464:	f7fe fb2a 	bl	8001abc <HAL_GetTick>
 8003468:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800346a:	e008      	b.n	800347e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800346c:	f7fe fb26 	bl	8001abc <HAL_GetTick>
 8003470:	4602      	mov	r2, r0
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	2b02      	cmp	r3, #2
 8003478:	d901      	bls.n	800347e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800347a:	2303      	movs	r3, #3
 800347c:	e164      	b.n	8003748 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800347e:	4b26      	ldr	r3, [pc, #152]	; (8003518 <HAL_RCC_OscConfig+0x2ac>)
 8003480:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003482:	f003 0302 	and.w	r3, r3, #2
 8003486:	2b00      	cmp	r3, #0
 8003488:	d0f0      	beq.n	800346c <HAL_RCC_OscConfig+0x200>
 800348a:	e015      	b.n	80034b8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800348c:	4b24      	ldr	r3, [pc, #144]	; (8003520 <HAL_RCC_OscConfig+0x2b4>)
 800348e:	2200      	movs	r2, #0
 8003490:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003492:	f7fe fb13 	bl	8001abc <HAL_GetTick>
 8003496:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003498:	e008      	b.n	80034ac <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800349a:	f7fe fb0f 	bl	8001abc <HAL_GetTick>
 800349e:	4602      	mov	r2, r0
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	1ad3      	subs	r3, r2, r3
 80034a4:	2b02      	cmp	r3, #2
 80034a6:	d901      	bls.n	80034ac <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80034a8:	2303      	movs	r3, #3
 80034aa:	e14d      	b.n	8003748 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034ac:	4b1a      	ldr	r3, [pc, #104]	; (8003518 <HAL_RCC_OscConfig+0x2ac>)
 80034ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034b0:	f003 0302 	and.w	r3, r3, #2
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d1f0      	bne.n	800349a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 0304 	and.w	r3, r3, #4
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	f000 80a0 	beq.w	8003606 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034c6:	2300      	movs	r3, #0
 80034c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034ca:	4b13      	ldr	r3, [pc, #76]	; (8003518 <HAL_RCC_OscConfig+0x2ac>)
 80034cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d10f      	bne.n	80034f6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034d6:	2300      	movs	r3, #0
 80034d8:	60bb      	str	r3, [r7, #8]
 80034da:	4b0f      	ldr	r3, [pc, #60]	; (8003518 <HAL_RCC_OscConfig+0x2ac>)
 80034dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034de:	4a0e      	ldr	r2, [pc, #56]	; (8003518 <HAL_RCC_OscConfig+0x2ac>)
 80034e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034e4:	6413      	str	r3, [r2, #64]	; 0x40
 80034e6:	4b0c      	ldr	r3, [pc, #48]	; (8003518 <HAL_RCC_OscConfig+0x2ac>)
 80034e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034ee:	60bb      	str	r3, [r7, #8]
 80034f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034f2:	2301      	movs	r3, #1
 80034f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034f6:	4b0b      	ldr	r3, [pc, #44]	; (8003524 <HAL_RCC_OscConfig+0x2b8>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d121      	bne.n	8003546 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003502:	4b08      	ldr	r3, [pc, #32]	; (8003524 <HAL_RCC_OscConfig+0x2b8>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a07      	ldr	r2, [pc, #28]	; (8003524 <HAL_RCC_OscConfig+0x2b8>)
 8003508:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800350c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800350e:	f7fe fad5 	bl	8001abc <HAL_GetTick>
 8003512:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003514:	e011      	b.n	800353a <HAL_RCC_OscConfig+0x2ce>
 8003516:	bf00      	nop
 8003518:	40023800 	.word	0x40023800
 800351c:	42470000 	.word	0x42470000
 8003520:	42470e80 	.word	0x42470e80
 8003524:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003528:	f7fe fac8 	bl	8001abc <HAL_GetTick>
 800352c:	4602      	mov	r2, r0
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	1ad3      	subs	r3, r2, r3
 8003532:	2b02      	cmp	r3, #2
 8003534:	d901      	bls.n	800353a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003536:	2303      	movs	r3, #3
 8003538:	e106      	b.n	8003748 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800353a:	4b85      	ldr	r3, [pc, #532]	; (8003750 <HAL_RCC_OscConfig+0x4e4>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003542:	2b00      	cmp	r3, #0
 8003544:	d0f0      	beq.n	8003528 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	2b01      	cmp	r3, #1
 800354c:	d106      	bne.n	800355c <HAL_RCC_OscConfig+0x2f0>
 800354e:	4b81      	ldr	r3, [pc, #516]	; (8003754 <HAL_RCC_OscConfig+0x4e8>)
 8003550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003552:	4a80      	ldr	r2, [pc, #512]	; (8003754 <HAL_RCC_OscConfig+0x4e8>)
 8003554:	f043 0301 	orr.w	r3, r3, #1
 8003558:	6713      	str	r3, [r2, #112]	; 0x70
 800355a:	e01c      	b.n	8003596 <HAL_RCC_OscConfig+0x32a>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	2b05      	cmp	r3, #5
 8003562:	d10c      	bne.n	800357e <HAL_RCC_OscConfig+0x312>
 8003564:	4b7b      	ldr	r3, [pc, #492]	; (8003754 <HAL_RCC_OscConfig+0x4e8>)
 8003566:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003568:	4a7a      	ldr	r2, [pc, #488]	; (8003754 <HAL_RCC_OscConfig+0x4e8>)
 800356a:	f043 0304 	orr.w	r3, r3, #4
 800356e:	6713      	str	r3, [r2, #112]	; 0x70
 8003570:	4b78      	ldr	r3, [pc, #480]	; (8003754 <HAL_RCC_OscConfig+0x4e8>)
 8003572:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003574:	4a77      	ldr	r2, [pc, #476]	; (8003754 <HAL_RCC_OscConfig+0x4e8>)
 8003576:	f043 0301 	orr.w	r3, r3, #1
 800357a:	6713      	str	r3, [r2, #112]	; 0x70
 800357c:	e00b      	b.n	8003596 <HAL_RCC_OscConfig+0x32a>
 800357e:	4b75      	ldr	r3, [pc, #468]	; (8003754 <HAL_RCC_OscConfig+0x4e8>)
 8003580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003582:	4a74      	ldr	r2, [pc, #464]	; (8003754 <HAL_RCC_OscConfig+0x4e8>)
 8003584:	f023 0301 	bic.w	r3, r3, #1
 8003588:	6713      	str	r3, [r2, #112]	; 0x70
 800358a:	4b72      	ldr	r3, [pc, #456]	; (8003754 <HAL_RCC_OscConfig+0x4e8>)
 800358c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800358e:	4a71      	ldr	r2, [pc, #452]	; (8003754 <HAL_RCC_OscConfig+0x4e8>)
 8003590:	f023 0304 	bic.w	r3, r3, #4
 8003594:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d015      	beq.n	80035ca <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800359e:	f7fe fa8d 	bl	8001abc <HAL_GetTick>
 80035a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035a4:	e00a      	b.n	80035bc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035a6:	f7fe fa89 	bl	8001abc <HAL_GetTick>
 80035aa:	4602      	mov	r2, r0
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	1ad3      	subs	r3, r2, r3
 80035b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d901      	bls.n	80035bc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80035b8:	2303      	movs	r3, #3
 80035ba:	e0c5      	b.n	8003748 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035bc:	4b65      	ldr	r3, [pc, #404]	; (8003754 <HAL_RCC_OscConfig+0x4e8>)
 80035be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035c0:	f003 0302 	and.w	r3, r3, #2
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d0ee      	beq.n	80035a6 <HAL_RCC_OscConfig+0x33a>
 80035c8:	e014      	b.n	80035f4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035ca:	f7fe fa77 	bl	8001abc <HAL_GetTick>
 80035ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035d0:	e00a      	b.n	80035e8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035d2:	f7fe fa73 	bl	8001abc <HAL_GetTick>
 80035d6:	4602      	mov	r2, r0
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	1ad3      	subs	r3, r2, r3
 80035dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d901      	bls.n	80035e8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80035e4:	2303      	movs	r3, #3
 80035e6:	e0af      	b.n	8003748 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035e8:	4b5a      	ldr	r3, [pc, #360]	; (8003754 <HAL_RCC_OscConfig+0x4e8>)
 80035ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ec:	f003 0302 	and.w	r3, r3, #2
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d1ee      	bne.n	80035d2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80035f4:	7dfb      	ldrb	r3, [r7, #23]
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	d105      	bne.n	8003606 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035fa:	4b56      	ldr	r3, [pc, #344]	; (8003754 <HAL_RCC_OscConfig+0x4e8>)
 80035fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035fe:	4a55      	ldr	r2, [pc, #340]	; (8003754 <HAL_RCC_OscConfig+0x4e8>)
 8003600:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003604:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	699b      	ldr	r3, [r3, #24]
 800360a:	2b00      	cmp	r3, #0
 800360c:	f000 809b 	beq.w	8003746 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003610:	4b50      	ldr	r3, [pc, #320]	; (8003754 <HAL_RCC_OscConfig+0x4e8>)
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	f003 030c 	and.w	r3, r3, #12
 8003618:	2b08      	cmp	r3, #8
 800361a:	d05c      	beq.n	80036d6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	699b      	ldr	r3, [r3, #24]
 8003620:	2b02      	cmp	r3, #2
 8003622:	d141      	bne.n	80036a8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003624:	4b4c      	ldr	r3, [pc, #304]	; (8003758 <HAL_RCC_OscConfig+0x4ec>)
 8003626:	2200      	movs	r2, #0
 8003628:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800362a:	f7fe fa47 	bl	8001abc <HAL_GetTick>
 800362e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003630:	e008      	b.n	8003644 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003632:	f7fe fa43 	bl	8001abc <HAL_GetTick>
 8003636:	4602      	mov	r2, r0
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	1ad3      	subs	r3, r2, r3
 800363c:	2b02      	cmp	r3, #2
 800363e:	d901      	bls.n	8003644 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003640:	2303      	movs	r3, #3
 8003642:	e081      	b.n	8003748 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003644:	4b43      	ldr	r3, [pc, #268]	; (8003754 <HAL_RCC_OscConfig+0x4e8>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800364c:	2b00      	cmp	r3, #0
 800364e:	d1f0      	bne.n	8003632 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	69da      	ldr	r2, [r3, #28]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6a1b      	ldr	r3, [r3, #32]
 8003658:	431a      	orrs	r2, r3
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365e:	019b      	lsls	r3, r3, #6
 8003660:	431a      	orrs	r2, r3
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003666:	085b      	lsrs	r3, r3, #1
 8003668:	3b01      	subs	r3, #1
 800366a:	041b      	lsls	r3, r3, #16
 800366c:	431a      	orrs	r2, r3
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003672:	061b      	lsls	r3, r3, #24
 8003674:	4937      	ldr	r1, [pc, #220]	; (8003754 <HAL_RCC_OscConfig+0x4e8>)
 8003676:	4313      	orrs	r3, r2
 8003678:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800367a:	4b37      	ldr	r3, [pc, #220]	; (8003758 <HAL_RCC_OscConfig+0x4ec>)
 800367c:	2201      	movs	r2, #1
 800367e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003680:	f7fe fa1c 	bl	8001abc <HAL_GetTick>
 8003684:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003686:	e008      	b.n	800369a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003688:	f7fe fa18 	bl	8001abc <HAL_GetTick>
 800368c:	4602      	mov	r2, r0
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	1ad3      	subs	r3, r2, r3
 8003692:	2b02      	cmp	r3, #2
 8003694:	d901      	bls.n	800369a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003696:	2303      	movs	r3, #3
 8003698:	e056      	b.n	8003748 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800369a:	4b2e      	ldr	r3, [pc, #184]	; (8003754 <HAL_RCC_OscConfig+0x4e8>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d0f0      	beq.n	8003688 <HAL_RCC_OscConfig+0x41c>
 80036a6:	e04e      	b.n	8003746 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036a8:	4b2b      	ldr	r3, [pc, #172]	; (8003758 <HAL_RCC_OscConfig+0x4ec>)
 80036aa:	2200      	movs	r2, #0
 80036ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036ae:	f7fe fa05 	bl	8001abc <HAL_GetTick>
 80036b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036b4:	e008      	b.n	80036c8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036b6:	f7fe fa01 	bl	8001abc <HAL_GetTick>
 80036ba:	4602      	mov	r2, r0
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	1ad3      	subs	r3, r2, r3
 80036c0:	2b02      	cmp	r3, #2
 80036c2:	d901      	bls.n	80036c8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80036c4:	2303      	movs	r3, #3
 80036c6:	e03f      	b.n	8003748 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036c8:	4b22      	ldr	r3, [pc, #136]	; (8003754 <HAL_RCC_OscConfig+0x4e8>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d1f0      	bne.n	80036b6 <HAL_RCC_OscConfig+0x44a>
 80036d4:	e037      	b.n	8003746 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	699b      	ldr	r3, [r3, #24]
 80036da:	2b01      	cmp	r3, #1
 80036dc:	d101      	bne.n	80036e2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e032      	b.n	8003748 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80036e2:	4b1c      	ldr	r3, [pc, #112]	; (8003754 <HAL_RCC_OscConfig+0x4e8>)
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	699b      	ldr	r3, [r3, #24]
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d028      	beq.n	8003742 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036fa:	429a      	cmp	r2, r3
 80036fc:	d121      	bne.n	8003742 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003708:	429a      	cmp	r2, r3
 800370a:	d11a      	bne.n	8003742 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800370c:	68fa      	ldr	r2, [r7, #12]
 800370e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003712:	4013      	ands	r3, r2
 8003714:	687a      	ldr	r2, [r7, #4]
 8003716:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003718:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800371a:	4293      	cmp	r3, r2
 800371c:	d111      	bne.n	8003742 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003728:	085b      	lsrs	r3, r3, #1
 800372a:	3b01      	subs	r3, #1
 800372c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800372e:	429a      	cmp	r2, r3
 8003730:	d107      	bne.n	8003742 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800373c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800373e:	429a      	cmp	r2, r3
 8003740:	d001      	beq.n	8003746 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e000      	b.n	8003748 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003746:	2300      	movs	r3, #0
}
 8003748:	4618      	mov	r0, r3
 800374a:	3718      	adds	r7, #24
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}
 8003750:	40007000 	.word	0x40007000
 8003754:	40023800 	.word	0x40023800
 8003758:	42470060 	.word	0x42470060

0800375c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b084      	sub	sp, #16
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
 8003764:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d101      	bne.n	8003770 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e0cc      	b.n	800390a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003770:	4b68      	ldr	r3, [pc, #416]	; (8003914 <HAL_RCC_ClockConfig+0x1b8>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 0307 	and.w	r3, r3, #7
 8003778:	683a      	ldr	r2, [r7, #0]
 800377a:	429a      	cmp	r2, r3
 800377c:	d90c      	bls.n	8003798 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800377e:	4b65      	ldr	r3, [pc, #404]	; (8003914 <HAL_RCC_ClockConfig+0x1b8>)
 8003780:	683a      	ldr	r2, [r7, #0]
 8003782:	b2d2      	uxtb	r2, r2
 8003784:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003786:	4b63      	ldr	r3, [pc, #396]	; (8003914 <HAL_RCC_ClockConfig+0x1b8>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 0307 	and.w	r3, r3, #7
 800378e:	683a      	ldr	r2, [r7, #0]
 8003790:	429a      	cmp	r2, r3
 8003792:	d001      	beq.n	8003798 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	e0b8      	b.n	800390a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 0302 	and.w	r3, r3, #2
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d020      	beq.n	80037e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 0304 	and.w	r3, r3, #4
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d005      	beq.n	80037bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037b0:	4b59      	ldr	r3, [pc, #356]	; (8003918 <HAL_RCC_ClockConfig+0x1bc>)
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	4a58      	ldr	r2, [pc, #352]	; (8003918 <HAL_RCC_ClockConfig+0x1bc>)
 80037b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80037ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f003 0308 	and.w	r3, r3, #8
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d005      	beq.n	80037d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037c8:	4b53      	ldr	r3, [pc, #332]	; (8003918 <HAL_RCC_ClockConfig+0x1bc>)
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	4a52      	ldr	r2, [pc, #328]	; (8003918 <HAL_RCC_ClockConfig+0x1bc>)
 80037ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80037d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037d4:	4b50      	ldr	r3, [pc, #320]	; (8003918 <HAL_RCC_ClockConfig+0x1bc>)
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	494d      	ldr	r1, [pc, #308]	; (8003918 <HAL_RCC_ClockConfig+0x1bc>)
 80037e2:	4313      	orrs	r3, r2
 80037e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 0301 	and.w	r3, r3, #1
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d044      	beq.n	800387c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d107      	bne.n	800380a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037fa:	4b47      	ldr	r3, [pc, #284]	; (8003918 <HAL_RCC_ClockConfig+0x1bc>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003802:	2b00      	cmp	r3, #0
 8003804:	d119      	bne.n	800383a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e07f      	b.n	800390a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	2b02      	cmp	r3, #2
 8003810:	d003      	beq.n	800381a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003816:	2b03      	cmp	r3, #3
 8003818:	d107      	bne.n	800382a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800381a:	4b3f      	ldr	r3, [pc, #252]	; (8003918 <HAL_RCC_ClockConfig+0x1bc>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003822:	2b00      	cmp	r3, #0
 8003824:	d109      	bne.n	800383a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e06f      	b.n	800390a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800382a:	4b3b      	ldr	r3, [pc, #236]	; (8003918 <HAL_RCC_ClockConfig+0x1bc>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 0302 	and.w	r3, r3, #2
 8003832:	2b00      	cmp	r3, #0
 8003834:	d101      	bne.n	800383a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e067      	b.n	800390a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800383a:	4b37      	ldr	r3, [pc, #220]	; (8003918 <HAL_RCC_ClockConfig+0x1bc>)
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	f023 0203 	bic.w	r2, r3, #3
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	4934      	ldr	r1, [pc, #208]	; (8003918 <HAL_RCC_ClockConfig+0x1bc>)
 8003848:	4313      	orrs	r3, r2
 800384a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800384c:	f7fe f936 	bl	8001abc <HAL_GetTick>
 8003850:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003852:	e00a      	b.n	800386a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003854:	f7fe f932 	bl	8001abc <HAL_GetTick>
 8003858:	4602      	mov	r2, r0
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003862:	4293      	cmp	r3, r2
 8003864:	d901      	bls.n	800386a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003866:	2303      	movs	r3, #3
 8003868:	e04f      	b.n	800390a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800386a:	4b2b      	ldr	r3, [pc, #172]	; (8003918 <HAL_RCC_ClockConfig+0x1bc>)
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	f003 020c 	and.w	r2, r3, #12
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	429a      	cmp	r2, r3
 800387a:	d1eb      	bne.n	8003854 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800387c:	4b25      	ldr	r3, [pc, #148]	; (8003914 <HAL_RCC_ClockConfig+0x1b8>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 0307 	and.w	r3, r3, #7
 8003884:	683a      	ldr	r2, [r7, #0]
 8003886:	429a      	cmp	r2, r3
 8003888:	d20c      	bcs.n	80038a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800388a:	4b22      	ldr	r3, [pc, #136]	; (8003914 <HAL_RCC_ClockConfig+0x1b8>)
 800388c:	683a      	ldr	r2, [r7, #0]
 800388e:	b2d2      	uxtb	r2, r2
 8003890:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003892:	4b20      	ldr	r3, [pc, #128]	; (8003914 <HAL_RCC_ClockConfig+0x1b8>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 0307 	and.w	r3, r3, #7
 800389a:	683a      	ldr	r2, [r7, #0]
 800389c:	429a      	cmp	r2, r3
 800389e:	d001      	beq.n	80038a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	e032      	b.n	800390a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 0304 	and.w	r3, r3, #4
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d008      	beq.n	80038c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038b0:	4b19      	ldr	r3, [pc, #100]	; (8003918 <HAL_RCC_ClockConfig+0x1bc>)
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	68db      	ldr	r3, [r3, #12]
 80038bc:	4916      	ldr	r1, [pc, #88]	; (8003918 <HAL_RCC_ClockConfig+0x1bc>)
 80038be:	4313      	orrs	r3, r2
 80038c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 0308 	and.w	r3, r3, #8
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d009      	beq.n	80038e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038ce:	4b12      	ldr	r3, [pc, #72]	; (8003918 <HAL_RCC_ClockConfig+0x1bc>)
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	691b      	ldr	r3, [r3, #16]
 80038da:	00db      	lsls	r3, r3, #3
 80038dc:	490e      	ldr	r1, [pc, #56]	; (8003918 <HAL_RCC_ClockConfig+0x1bc>)
 80038de:	4313      	orrs	r3, r2
 80038e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80038e2:	f000 f821 	bl	8003928 <HAL_RCC_GetSysClockFreq>
 80038e6:	4602      	mov	r2, r0
 80038e8:	4b0b      	ldr	r3, [pc, #44]	; (8003918 <HAL_RCC_ClockConfig+0x1bc>)
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	091b      	lsrs	r3, r3, #4
 80038ee:	f003 030f 	and.w	r3, r3, #15
 80038f2:	490a      	ldr	r1, [pc, #40]	; (800391c <HAL_RCC_ClockConfig+0x1c0>)
 80038f4:	5ccb      	ldrb	r3, [r1, r3]
 80038f6:	fa22 f303 	lsr.w	r3, r2, r3
 80038fa:	4a09      	ldr	r2, [pc, #36]	; (8003920 <HAL_RCC_ClockConfig+0x1c4>)
 80038fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80038fe:	4b09      	ldr	r3, [pc, #36]	; (8003924 <HAL_RCC_ClockConfig+0x1c8>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4618      	mov	r0, r3
 8003904:	f7fe f896 	bl	8001a34 <HAL_InitTick>

  return HAL_OK;
 8003908:	2300      	movs	r3, #0
}
 800390a:	4618      	mov	r0, r3
 800390c:	3710      	adds	r7, #16
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
 8003912:	bf00      	nop
 8003914:	40023c00 	.word	0x40023c00
 8003918:	40023800 	.word	0x40023800
 800391c:	08015f48 	.word	0x08015f48
 8003920:	2000001c 	.word	0x2000001c
 8003924:	20000020 	.word	0x20000020

08003928 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003928:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800392c:	b084      	sub	sp, #16
 800392e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003930:	2300      	movs	r3, #0
 8003932:	607b      	str	r3, [r7, #4]
 8003934:	2300      	movs	r3, #0
 8003936:	60fb      	str	r3, [r7, #12]
 8003938:	2300      	movs	r3, #0
 800393a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800393c:	2300      	movs	r3, #0
 800393e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003940:	4b67      	ldr	r3, [pc, #412]	; (8003ae0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	f003 030c 	and.w	r3, r3, #12
 8003948:	2b08      	cmp	r3, #8
 800394a:	d00d      	beq.n	8003968 <HAL_RCC_GetSysClockFreq+0x40>
 800394c:	2b08      	cmp	r3, #8
 800394e:	f200 80bd 	bhi.w	8003acc <HAL_RCC_GetSysClockFreq+0x1a4>
 8003952:	2b00      	cmp	r3, #0
 8003954:	d002      	beq.n	800395c <HAL_RCC_GetSysClockFreq+0x34>
 8003956:	2b04      	cmp	r3, #4
 8003958:	d003      	beq.n	8003962 <HAL_RCC_GetSysClockFreq+0x3a>
 800395a:	e0b7      	b.n	8003acc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800395c:	4b61      	ldr	r3, [pc, #388]	; (8003ae4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800395e:	60bb      	str	r3, [r7, #8]
       break;
 8003960:	e0b7      	b.n	8003ad2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003962:	4b61      	ldr	r3, [pc, #388]	; (8003ae8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003964:	60bb      	str	r3, [r7, #8]
      break;
 8003966:	e0b4      	b.n	8003ad2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003968:	4b5d      	ldr	r3, [pc, #372]	; (8003ae0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003970:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003972:	4b5b      	ldr	r3, [pc, #364]	; (8003ae0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800397a:	2b00      	cmp	r3, #0
 800397c:	d04d      	beq.n	8003a1a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800397e:	4b58      	ldr	r3, [pc, #352]	; (8003ae0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	099b      	lsrs	r3, r3, #6
 8003984:	461a      	mov	r2, r3
 8003986:	f04f 0300 	mov.w	r3, #0
 800398a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800398e:	f04f 0100 	mov.w	r1, #0
 8003992:	ea02 0800 	and.w	r8, r2, r0
 8003996:	ea03 0901 	and.w	r9, r3, r1
 800399a:	4640      	mov	r0, r8
 800399c:	4649      	mov	r1, r9
 800399e:	f04f 0200 	mov.w	r2, #0
 80039a2:	f04f 0300 	mov.w	r3, #0
 80039a6:	014b      	lsls	r3, r1, #5
 80039a8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80039ac:	0142      	lsls	r2, r0, #5
 80039ae:	4610      	mov	r0, r2
 80039b0:	4619      	mov	r1, r3
 80039b2:	ebb0 0008 	subs.w	r0, r0, r8
 80039b6:	eb61 0109 	sbc.w	r1, r1, r9
 80039ba:	f04f 0200 	mov.w	r2, #0
 80039be:	f04f 0300 	mov.w	r3, #0
 80039c2:	018b      	lsls	r3, r1, #6
 80039c4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80039c8:	0182      	lsls	r2, r0, #6
 80039ca:	1a12      	subs	r2, r2, r0
 80039cc:	eb63 0301 	sbc.w	r3, r3, r1
 80039d0:	f04f 0000 	mov.w	r0, #0
 80039d4:	f04f 0100 	mov.w	r1, #0
 80039d8:	00d9      	lsls	r1, r3, #3
 80039da:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80039de:	00d0      	lsls	r0, r2, #3
 80039e0:	4602      	mov	r2, r0
 80039e2:	460b      	mov	r3, r1
 80039e4:	eb12 0208 	adds.w	r2, r2, r8
 80039e8:	eb43 0309 	adc.w	r3, r3, r9
 80039ec:	f04f 0000 	mov.w	r0, #0
 80039f0:	f04f 0100 	mov.w	r1, #0
 80039f4:	0259      	lsls	r1, r3, #9
 80039f6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80039fa:	0250      	lsls	r0, r2, #9
 80039fc:	4602      	mov	r2, r0
 80039fe:	460b      	mov	r3, r1
 8003a00:	4610      	mov	r0, r2
 8003a02:	4619      	mov	r1, r3
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	461a      	mov	r2, r3
 8003a08:	f04f 0300 	mov.w	r3, #0
 8003a0c:	f7fc fc48 	bl	80002a0 <__aeabi_uldivmod>
 8003a10:	4602      	mov	r2, r0
 8003a12:	460b      	mov	r3, r1
 8003a14:	4613      	mov	r3, r2
 8003a16:	60fb      	str	r3, [r7, #12]
 8003a18:	e04a      	b.n	8003ab0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a1a:	4b31      	ldr	r3, [pc, #196]	; (8003ae0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	099b      	lsrs	r3, r3, #6
 8003a20:	461a      	mov	r2, r3
 8003a22:	f04f 0300 	mov.w	r3, #0
 8003a26:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003a2a:	f04f 0100 	mov.w	r1, #0
 8003a2e:	ea02 0400 	and.w	r4, r2, r0
 8003a32:	ea03 0501 	and.w	r5, r3, r1
 8003a36:	4620      	mov	r0, r4
 8003a38:	4629      	mov	r1, r5
 8003a3a:	f04f 0200 	mov.w	r2, #0
 8003a3e:	f04f 0300 	mov.w	r3, #0
 8003a42:	014b      	lsls	r3, r1, #5
 8003a44:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003a48:	0142      	lsls	r2, r0, #5
 8003a4a:	4610      	mov	r0, r2
 8003a4c:	4619      	mov	r1, r3
 8003a4e:	1b00      	subs	r0, r0, r4
 8003a50:	eb61 0105 	sbc.w	r1, r1, r5
 8003a54:	f04f 0200 	mov.w	r2, #0
 8003a58:	f04f 0300 	mov.w	r3, #0
 8003a5c:	018b      	lsls	r3, r1, #6
 8003a5e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003a62:	0182      	lsls	r2, r0, #6
 8003a64:	1a12      	subs	r2, r2, r0
 8003a66:	eb63 0301 	sbc.w	r3, r3, r1
 8003a6a:	f04f 0000 	mov.w	r0, #0
 8003a6e:	f04f 0100 	mov.w	r1, #0
 8003a72:	00d9      	lsls	r1, r3, #3
 8003a74:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003a78:	00d0      	lsls	r0, r2, #3
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	460b      	mov	r3, r1
 8003a7e:	1912      	adds	r2, r2, r4
 8003a80:	eb45 0303 	adc.w	r3, r5, r3
 8003a84:	f04f 0000 	mov.w	r0, #0
 8003a88:	f04f 0100 	mov.w	r1, #0
 8003a8c:	0299      	lsls	r1, r3, #10
 8003a8e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003a92:	0290      	lsls	r0, r2, #10
 8003a94:	4602      	mov	r2, r0
 8003a96:	460b      	mov	r3, r1
 8003a98:	4610      	mov	r0, r2
 8003a9a:	4619      	mov	r1, r3
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	461a      	mov	r2, r3
 8003aa0:	f04f 0300 	mov.w	r3, #0
 8003aa4:	f7fc fbfc 	bl	80002a0 <__aeabi_uldivmod>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	460b      	mov	r3, r1
 8003aac:	4613      	mov	r3, r2
 8003aae:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003ab0:	4b0b      	ldr	r3, [pc, #44]	; (8003ae0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	0c1b      	lsrs	r3, r3, #16
 8003ab6:	f003 0303 	and.w	r3, r3, #3
 8003aba:	3301      	adds	r3, #1
 8003abc:	005b      	lsls	r3, r3, #1
 8003abe:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003ac0:	68fa      	ldr	r2, [r7, #12]
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ac8:	60bb      	str	r3, [r7, #8]
      break;
 8003aca:	e002      	b.n	8003ad2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003acc:	4b05      	ldr	r3, [pc, #20]	; (8003ae4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003ace:	60bb      	str	r3, [r7, #8]
      break;
 8003ad0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ad2:	68bb      	ldr	r3, [r7, #8]
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3710      	adds	r7, #16
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003ade:	bf00      	nop
 8003ae0:	40023800 	.word	0x40023800
 8003ae4:	00f42400 	.word	0x00f42400
 8003ae8:	007a1200 	.word	0x007a1200

08003aec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003aec:	b480      	push	{r7}
 8003aee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003af0:	4b03      	ldr	r3, [pc, #12]	; (8003b00 <HAL_RCC_GetHCLKFreq+0x14>)
 8003af2:	681b      	ldr	r3, [r3, #0]
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	46bd      	mov	sp, r7
 8003af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afc:	4770      	bx	lr
 8003afe:	bf00      	nop
 8003b00:	2000001c 	.word	0x2000001c

08003b04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003b08:	f7ff fff0 	bl	8003aec <HAL_RCC_GetHCLKFreq>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	4b05      	ldr	r3, [pc, #20]	; (8003b24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	0a9b      	lsrs	r3, r3, #10
 8003b14:	f003 0307 	and.w	r3, r3, #7
 8003b18:	4903      	ldr	r1, [pc, #12]	; (8003b28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b1a:	5ccb      	ldrb	r3, [r1, r3]
 8003b1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	bd80      	pop	{r7, pc}
 8003b24:	40023800 	.word	0x40023800
 8003b28:	08015f58 	.word	0x08015f58

08003b2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003b30:	f7ff ffdc 	bl	8003aec <HAL_RCC_GetHCLKFreq>
 8003b34:	4602      	mov	r2, r0
 8003b36:	4b05      	ldr	r3, [pc, #20]	; (8003b4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	0b5b      	lsrs	r3, r3, #13
 8003b3c:	f003 0307 	and.w	r3, r3, #7
 8003b40:	4903      	ldr	r1, [pc, #12]	; (8003b50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b42:	5ccb      	ldrb	r3, [r1, r3]
 8003b44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	40023800 	.word	0x40023800
 8003b50:	08015f58 	.word	0x08015f58

08003b54 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b082      	sub	sp, #8
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d101      	bne.n	8003b66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	e03f      	b.n	8003be6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d106      	bne.n	8003b80 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2200      	movs	r2, #0
 8003b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	f7fd fddc 	bl	8001738 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2224      	movs	r2, #36	; 0x24
 8003b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	68da      	ldr	r2, [r3, #12]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b96:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	f000 f929 	bl	8003df0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	691a      	ldr	r2, [r3, #16]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003bac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	695a      	ldr	r2, [r3, #20]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003bbc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	68da      	ldr	r2, [r3, #12]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003bcc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2220      	movs	r2, #32
 8003bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2220      	movs	r2, #32
 8003be0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003be4:	2300      	movs	r3, #0
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3708      	adds	r7, #8
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}

08003bee <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bee:	b580      	push	{r7, lr}
 8003bf0:	b08a      	sub	sp, #40	; 0x28
 8003bf2:	af02      	add	r7, sp, #8
 8003bf4:	60f8      	str	r0, [r7, #12]
 8003bf6:	60b9      	str	r1, [r7, #8]
 8003bf8:	603b      	str	r3, [r7, #0]
 8003bfa:	4613      	mov	r3, r2
 8003bfc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	2b20      	cmp	r3, #32
 8003c0c:	d17c      	bne.n	8003d08 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d002      	beq.n	8003c1a <HAL_UART_Transmit+0x2c>
 8003c14:	88fb      	ldrh	r3, [r7, #6]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d101      	bne.n	8003c1e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e075      	b.n	8003d0a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d101      	bne.n	8003c2c <HAL_UART_Transmit+0x3e>
 8003c28:	2302      	movs	r3, #2
 8003c2a:	e06e      	b.n	8003d0a <HAL_UART_Transmit+0x11c>
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2200      	movs	r2, #0
 8003c38:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2221      	movs	r2, #33	; 0x21
 8003c3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c42:	f7fd ff3b 	bl	8001abc <HAL_GetTick>
 8003c46:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	88fa      	ldrh	r2, [r7, #6]
 8003c4c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	88fa      	ldrh	r2, [r7, #6]
 8003c52:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c5c:	d108      	bne.n	8003c70 <HAL_UART_Transmit+0x82>
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	691b      	ldr	r3, [r3, #16]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d104      	bne.n	8003c70 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003c66:	2300      	movs	r3, #0
 8003c68:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	61bb      	str	r3, [r7, #24]
 8003c6e:	e003      	b.n	8003c78 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c74:	2300      	movs	r3, #0
 8003c76:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003c80:	e02a      	b.n	8003cd8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	9300      	str	r3, [sp, #0]
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	2180      	movs	r1, #128	; 0x80
 8003c8c:	68f8      	ldr	r0, [r7, #12]
 8003c8e:	f000 f840 	bl	8003d12 <UART_WaitOnFlagUntilTimeout>
 8003c92:	4603      	mov	r3, r0
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d001      	beq.n	8003c9c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003c98:	2303      	movs	r3, #3
 8003c9a:	e036      	b.n	8003d0a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003c9c:	69fb      	ldr	r3, [r7, #28]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d10b      	bne.n	8003cba <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ca2:	69bb      	ldr	r3, [r7, #24]
 8003ca4:	881b      	ldrh	r3, [r3, #0]
 8003ca6:	461a      	mov	r2, r3
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003cb0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003cb2:	69bb      	ldr	r3, [r7, #24]
 8003cb4:	3302      	adds	r3, #2
 8003cb6:	61bb      	str	r3, [r7, #24]
 8003cb8:	e007      	b.n	8003cca <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003cba:	69fb      	ldr	r3, [r7, #28]
 8003cbc:	781a      	ldrb	r2, [r3, #0]
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003cc4:	69fb      	ldr	r3, [r7, #28]
 8003cc6:	3301      	adds	r3, #1
 8003cc8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	3b01      	subs	r3, #1
 8003cd2:	b29a      	uxth	r2, r3
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003cdc:	b29b      	uxth	r3, r3
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d1cf      	bne.n	8003c82 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	9300      	str	r3, [sp, #0]
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	2140      	movs	r1, #64	; 0x40
 8003cec:	68f8      	ldr	r0, [r7, #12]
 8003cee:	f000 f810 	bl	8003d12 <UART_WaitOnFlagUntilTimeout>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d001      	beq.n	8003cfc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003cf8:	2303      	movs	r3, #3
 8003cfa:	e006      	b.n	8003d0a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2220      	movs	r2, #32
 8003d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003d04:	2300      	movs	r3, #0
 8003d06:	e000      	b.n	8003d0a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003d08:	2302      	movs	r3, #2
  }
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3720      	adds	r7, #32
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}

08003d12 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003d12:	b580      	push	{r7, lr}
 8003d14:	b090      	sub	sp, #64	; 0x40
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	60f8      	str	r0, [r7, #12]
 8003d1a:	60b9      	str	r1, [r7, #8]
 8003d1c:	603b      	str	r3, [r7, #0]
 8003d1e:	4613      	mov	r3, r2
 8003d20:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d22:	e050      	b.n	8003dc6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d2a:	d04c      	beq.n	8003dc6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003d2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d007      	beq.n	8003d42 <UART_WaitOnFlagUntilTimeout+0x30>
 8003d32:	f7fd fec3 	bl	8001abc <HAL_GetTick>
 8003d36:	4602      	mov	r2, r0
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	1ad3      	subs	r3, r2, r3
 8003d3c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	d241      	bcs.n	8003dc6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	330c      	adds	r3, #12
 8003d48:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d4c:	e853 3f00 	ldrex	r3, [r3]
 8003d50:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d54:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003d58:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	330c      	adds	r3, #12
 8003d60:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003d62:	637a      	str	r2, [r7, #52]	; 0x34
 8003d64:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d66:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003d68:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d6a:	e841 2300 	strex	r3, r2, [r1]
 8003d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d1e5      	bne.n	8003d42 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	3314      	adds	r3, #20
 8003d7c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	e853 3f00 	ldrex	r3, [r3]
 8003d84:	613b      	str	r3, [r7, #16]
   return(result);
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	f023 0301 	bic.w	r3, r3, #1
 8003d8c:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	3314      	adds	r3, #20
 8003d94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003d96:	623a      	str	r2, [r7, #32]
 8003d98:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d9a:	69f9      	ldr	r1, [r7, #28]
 8003d9c:	6a3a      	ldr	r2, [r7, #32]
 8003d9e:	e841 2300 	strex	r3, r2, [r1]
 8003da2:	61bb      	str	r3, [r7, #24]
   return(result);
 8003da4:	69bb      	ldr	r3, [r7, #24]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d1e5      	bne.n	8003d76 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2220      	movs	r2, #32
 8003dae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2220      	movs	r2, #32
 8003db6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	e00f      	b.n	8003de6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	4013      	ands	r3, r2
 8003dd0:	68ba      	ldr	r2, [r7, #8]
 8003dd2:	429a      	cmp	r2, r3
 8003dd4:	bf0c      	ite	eq
 8003dd6:	2301      	moveq	r3, #1
 8003dd8:	2300      	movne	r3, #0
 8003dda:	b2db      	uxtb	r3, r3
 8003ddc:	461a      	mov	r2, r3
 8003dde:	79fb      	ldrb	r3, [r7, #7]
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d09f      	beq.n	8003d24 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003de4:	2300      	movs	r3, #0
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3740      	adds	r7, #64	; 0x40
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}
	...

08003df0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003df4:	b09f      	sub	sp, #124	; 0x7c
 8003df6:	af00      	add	r7, sp, #0
 8003df8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003dfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	691b      	ldr	r3, [r3, #16]
 8003e00:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003e04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e06:	68d9      	ldr	r1, [r3, #12]
 8003e08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	ea40 0301 	orr.w	r3, r0, r1
 8003e10:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003e12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e14:	689a      	ldr	r2, [r3, #8]
 8003e16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e18:	691b      	ldr	r3, [r3, #16]
 8003e1a:	431a      	orrs	r2, r3
 8003e1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e1e:	695b      	ldr	r3, [r3, #20]
 8003e20:	431a      	orrs	r2, r3
 8003e22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e24:	69db      	ldr	r3, [r3, #28]
 8003e26:	4313      	orrs	r3, r2
 8003e28:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003e2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003e34:	f021 010c 	bic.w	r1, r1, #12
 8003e38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e3e:	430b      	orrs	r3, r1
 8003e40:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	695b      	ldr	r3, [r3, #20]
 8003e48:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003e4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e4e:	6999      	ldr	r1, [r3, #24]
 8003e50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e52:	681a      	ldr	r2, [r3, #0]
 8003e54:	ea40 0301 	orr.w	r3, r0, r1
 8003e58:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003e5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	4bc5      	ldr	r3, [pc, #788]	; (8004174 <UART_SetConfig+0x384>)
 8003e60:	429a      	cmp	r2, r3
 8003e62:	d004      	beq.n	8003e6e <UART_SetConfig+0x7e>
 8003e64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	4bc3      	ldr	r3, [pc, #780]	; (8004178 <UART_SetConfig+0x388>)
 8003e6a:	429a      	cmp	r2, r3
 8003e6c:	d103      	bne.n	8003e76 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003e6e:	f7ff fe5d 	bl	8003b2c <HAL_RCC_GetPCLK2Freq>
 8003e72:	6778      	str	r0, [r7, #116]	; 0x74
 8003e74:	e002      	b.n	8003e7c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003e76:	f7ff fe45 	bl	8003b04 <HAL_RCC_GetPCLK1Freq>
 8003e7a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e7e:	69db      	ldr	r3, [r3, #28]
 8003e80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e84:	f040 80b6 	bne.w	8003ff4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003e88:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e8a:	461c      	mov	r4, r3
 8003e8c:	f04f 0500 	mov.w	r5, #0
 8003e90:	4622      	mov	r2, r4
 8003e92:	462b      	mov	r3, r5
 8003e94:	1891      	adds	r1, r2, r2
 8003e96:	6439      	str	r1, [r7, #64]	; 0x40
 8003e98:	415b      	adcs	r3, r3
 8003e9a:	647b      	str	r3, [r7, #68]	; 0x44
 8003e9c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003ea0:	1912      	adds	r2, r2, r4
 8003ea2:	eb45 0303 	adc.w	r3, r5, r3
 8003ea6:	f04f 0000 	mov.w	r0, #0
 8003eaa:	f04f 0100 	mov.w	r1, #0
 8003eae:	00d9      	lsls	r1, r3, #3
 8003eb0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003eb4:	00d0      	lsls	r0, r2, #3
 8003eb6:	4602      	mov	r2, r0
 8003eb8:	460b      	mov	r3, r1
 8003eba:	1911      	adds	r1, r2, r4
 8003ebc:	6639      	str	r1, [r7, #96]	; 0x60
 8003ebe:	416b      	adcs	r3, r5
 8003ec0:	667b      	str	r3, [r7, #100]	; 0x64
 8003ec2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	461a      	mov	r2, r3
 8003ec8:	f04f 0300 	mov.w	r3, #0
 8003ecc:	1891      	adds	r1, r2, r2
 8003ece:	63b9      	str	r1, [r7, #56]	; 0x38
 8003ed0:	415b      	adcs	r3, r3
 8003ed2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ed4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003ed8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003edc:	f7fc f9e0 	bl	80002a0 <__aeabi_uldivmod>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	460b      	mov	r3, r1
 8003ee4:	4ba5      	ldr	r3, [pc, #660]	; (800417c <UART_SetConfig+0x38c>)
 8003ee6:	fba3 2302 	umull	r2, r3, r3, r2
 8003eea:	095b      	lsrs	r3, r3, #5
 8003eec:	011e      	lsls	r6, r3, #4
 8003eee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ef0:	461c      	mov	r4, r3
 8003ef2:	f04f 0500 	mov.w	r5, #0
 8003ef6:	4622      	mov	r2, r4
 8003ef8:	462b      	mov	r3, r5
 8003efa:	1891      	adds	r1, r2, r2
 8003efc:	6339      	str	r1, [r7, #48]	; 0x30
 8003efe:	415b      	adcs	r3, r3
 8003f00:	637b      	str	r3, [r7, #52]	; 0x34
 8003f02:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003f06:	1912      	adds	r2, r2, r4
 8003f08:	eb45 0303 	adc.w	r3, r5, r3
 8003f0c:	f04f 0000 	mov.w	r0, #0
 8003f10:	f04f 0100 	mov.w	r1, #0
 8003f14:	00d9      	lsls	r1, r3, #3
 8003f16:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003f1a:	00d0      	lsls	r0, r2, #3
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	460b      	mov	r3, r1
 8003f20:	1911      	adds	r1, r2, r4
 8003f22:	65b9      	str	r1, [r7, #88]	; 0x58
 8003f24:	416b      	adcs	r3, r5
 8003f26:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	461a      	mov	r2, r3
 8003f2e:	f04f 0300 	mov.w	r3, #0
 8003f32:	1891      	adds	r1, r2, r2
 8003f34:	62b9      	str	r1, [r7, #40]	; 0x28
 8003f36:	415b      	adcs	r3, r3
 8003f38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f3a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003f3e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003f42:	f7fc f9ad 	bl	80002a0 <__aeabi_uldivmod>
 8003f46:	4602      	mov	r2, r0
 8003f48:	460b      	mov	r3, r1
 8003f4a:	4b8c      	ldr	r3, [pc, #560]	; (800417c <UART_SetConfig+0x38c>)
 8003f4c:	fba3 1302 	umull	r1, r3, r3, r2
 8003f50:	095b      	lsrs	r3, r3, #5
 8003f52:	2164      	movs	r1, #100	; 0x64
 8003f54:	fb01 f303 	mul.w	r3, r1, r3
 8003f58:	1ad3      	subs	r3, r2, r3
 8003f5a:	00db      	lsls	r3, r3, #3
 8003f5c:	3332      	adds	r3, #50	; 0x32
 8003f5e:	4a87      	ldr	r2, [pc, #540]	; (800417c <UART_SetConfig+0x38c>)
 8003f60:	fba2 2303 	umull	r2, r3, r2, r3
 8003f64:	095b      	lsrs	r3, r3, #5
 8003f66:	005b      	lsls	r3, r3, #1
 8003f68:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003f6c:	441e      	add	r6, r3
 8003f6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f70:	4618      	mov	r0, r3
 8003f72:	f04f 0100 	mov.w	r1, #0
 8003f76:	4602      	mov	r2, r0
 8003f78:	460b      	mov	r3, r1
 8003f7a:	1894      	adds	r4, r2, r2
 8003f7c:	623c      	str	r4, [r7, #32]
 8003f7e:	415b      	adcs	r3, r3
 8003f80:	627b      	str	r3, [r7, #36]	; 0x24
 8003f82:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003f86:	1812      	adds	r2, r2, r0
 8003f88:	eb41 0303 	adc.w	r3, r1, r3
 8003f8c:	f04f 0400 	mov.w	r4, #0
 8003f90:	f04f 0500 	mov.w	r5, #0
 8003f94:	00dd      	lsls	r5, r3, #3
 8003f96:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003f9a:	00d4      	lsls	r4, r2, #3
 8003f9c:	4622      	mov	r2, r4
 8003f9e:	462b      	mov	r3, r5
 8003fa0:	1814      	adds	r4, r2, r0
 8003fa2:	653c      	str	r4, [r7, #80]	; 0x50
 8003fa4:	414b      	adcs	r3, r1
 8003fa6:	657b      	str	r3, [r7, #84]	; 0x54
 8003fa8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	461a      	mov	r2, r3
 8003fae:	f04f 0300 	mov.w	r3, #0
 8003fb2:	1891      	adds	r1, r2, r2
 8003fb4:	61b9      	str	r1, [r7, #24]
 8003fb6:	415b      	adcs	r3, r3
 8003fb8:	61fb      	str	r3, [r7, #28]
 8003fba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003fbe:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003fc2:	f7fc f96d 	bl	80002a0 <__aeabi_uldivmod>
 8003fc6:	4602      	mov	r2, r0
 8003fc8:	460b      	mov	r3, r1
 8003fca:	4b6c      	ldr	r3, [pc, #432]	; (800417c <UART_SetConfig+0x38c>)
 8003fcc:	fba3 1302 	umull	r1, r3, r3, r2
 8003fd0:	095b      	lsrs	r3, r3, #5
 8003fd2:	2164      	movs	r1, #100	; 0x64
 8003fd4:	fb01 f303 	mul.w	r3, r1, r3
 8003fd8:	1ad3      	subs	r3, r2, r3
 8003fda:	00db      	lsls	r3, r3, #3
 8003fdc:	3332      	adds	r3, #50	; 0x32
 8003fde:	4a67      	ldr	r2, [pc, #412]	; (800417c <UART_SetConfig+0x38c>)
 8003fe0:	fba2 2303 	umull	r2, r3, r2, r3
 8003fe4:	095b      	lsrs	r3, r3, #5
 8003fe6:	f003 0207 	and.w	r2, r3, #7
 8003fea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4432      	add	r2, r6
 8003ff0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003ff2:	e0b9      	b.n	8004168 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ff4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ff6:	461c      	mov	r4, r3
 8003ff8:	f04f 0500 	mov.w	r5, #0
 8003ffc:	4622      	mov	r2, r4
 8003ffe:	462b      	mov	r3, r5
 8004000:	1891      	adds	r1, r2, r2
 8004002:	6139      	str	r1, [r7, #16]
 8004004:	415b      	adcs	r3, r3
 8004006:	617b      	str	r3, [r7, #20]
 8004008:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800400c:	1912      	adds	r2, r2, r4
 800400e:	eb45 0303 	adc.w	r3, r5, r3
 8004012:	f04f 0000 	mov.w	r0, #0
 8004016:	f04f 0100 	mov.w	r1, #0
 800401a:	00d9      	lsls	r1, r3, #3
 800401c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004020:	00d0      	lsls	r0, r2, #3
 8004022:	4602      	mov	r2, r0
 8004024:	460b      	mov	r3, r1
 8004026:	eb12 0804 	adds.w	r8, r2, r4
 800402a:	eb43 0905 	adc.w	r9, r3, r5
 800402e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	4618      	mov	r0, r3
 8004034:	f04f 0100 	mov.w	r1, #0
 8004038:	f04f 0200 	mov.w	r2, #0
 800403c:	f04f 0300 	mov.w	r3, #0
 8004040:	008b      	lsls	r3, r1, #2
 8004042:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004046:	0082      	lsls	r2, r0, #2
 8004048:	4640      	mov	r0, r8
 800404a:	4649      	mov	r1, r9
 800404c:	f7fc f928 	bl	80002a0 <__aeabi_uldivmod>
 8004050:	4602      	mov	r2, r0
 8004052:	460b      	mov	r3, r1
 8004054:	4b49      	ldr	r3, [pc, #292]	; (800417c <UART_SetConfig+0x38c>)
 8004056:	fba3 2302 	umull	r2, r3, r3, r2
 800405a:	095b      	lsrs	r3, r3, #5
 800405c:	011e      	lsls	r6, r3, #4
 800405e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004060:	4618      	mov	r0, r3
 8004062:	f04f 0100 	mov.w	r1, #0
 8004066:	4602      	mov	r2, r0
 8004068:	460b      	mov	r3, r1
 800406a:	1894      	adds	r4, r2, r2
 800406c:	60bc      	str	r4, [r7, #8]
 800406e:	415b      	adcs	r3, r3
 8004070:	60fb      	str	r3, [r7, #12]
 8004072:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004076:	1812      	adds	r2, r2, r0
 8004078:	eb41 0303 	adc.w	r3, r1, r3
 800407c:	f04f 0400 	mov.w	r4, #0
 8004080:	f04f 0500 	mov.w	r5, #0
 8004084:	00dd      	lsls	r5, r3, #3
 8004086:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800408a:	00d4      	lsls	r4, r2, #3
 800408c:	4622      	mov	r2, r4
 800408e:	462b      	mov	r3, r5
 8004090:	1814      	adds	r4, r2, r0
 8004092:	64bc      	str	r4, [r7, #72]	; 0x48
 8004094:	414b      	adcs	r3, r1
 8004096:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004098:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	4618      	mov	r0, r3
 800409e:	f04f 0100 	mov.w	r1, #0
 80040a2:	f04f 0200 	mov.w	r2, #0
 80040a6:	f04f 0300 	mov.w	r3, #0
 80040aa:	008b      	lsls	r3, r1, #2
 80040ac:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80040b0:	0082      	lsls	r2, r0, #2
 80040b2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80040b6:	f7fc f8f3 	bl	80002a0 <__aeabi_uldivmod>
 80040ba:	4602      	mov	r2, r0
 80040bc:	460b      	mov	r3, r1
 80040be:	4b2f      	ldr	r3, [pc, #188]	; (800417c <UART_SetConfig+0x38c>)
 80040c0:	fba3 1302 	umull	r1, r3, r3, r2
 80040c4:	095b      	lsrs	r3, r3, #5
 80040c6:	2164      	movs	r1, #100	; 0x64
 80040c8:	fb01 f303 	mul.w	r3, r1, r3
 80040cc:	1ad3      	subs	r3, r2, r3
 80040ce:	011b      	lsls	r3, r3, #4
 80040d0:	3332      	adds	r3, #50	; 0x32
 80040d2:	4a2a      	ldr	r2, [pc, #168]	; (800417c <UART_SetConfig+0x38c>)
 80040d4:	fba2 2303 	umull	r2, r3, r2, r3
 80040d8:	095b      	lsrs	r3, r3, #5
 80040da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040de:	441e      	add	r6, r3
 80040e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040e2:	4618      	mov	r0, r3
 80040e4:	f04f 0100 	mov.w	r1, #0
 80040e8:	4602      	mov	r2, r0
 80040ea:	460b      	mov	r3, r1
 80040ec:	1894      	adds	r4, r2, r2
 80040ee:	603c      	str	r4, [r7, #0]
 80040f0:	415b      	adcs	r3, r3
 80040f2:	607b      	str	r3, [r7, #4]
 80040f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80040f8:	1812      	adds	r2, r2, r0
 80040fa:	eb41 0303 	adc.w	r3, r1, r3
 80040fe:	f04f 0400 	mov.w	r4, #0
 8004102:	f04f 0500 	mov.w	r5, #0
 8004106:	00dd      	lsls	r5, r3, #3
 8004108:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800410c:	00d4      	lsls	r4, r2, #3
 800410e:	4622      	mov	r2, r4
 8004110:	462b      	mov	r3, r5
 8004112:	eb12 0a00 	adds.w	sl, r2, r0
 8004116:	eb43 0b01 	adc.w	fp, r3, r1
 800411a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	4618      	mov	r0, r3
 8004120:	f04f 0100 	mov.w	r1, #0
 8004124:	f04f 0200 	mov.w	r2, #0
 8004128:	f04f 0300 	mov.w	r3, #0
 800412c:	008b      	lsls	r3, r1, #2
 800412e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004132:	0082      	lsls	r2, r0, #2
 8004134:	4650      	mov	r0, sl
 8004136:	4659      	mov	r1, fp
 8004138:	f7fc f8b2 	bl	80002a0 <__aeabi_uldivmod>
 800413c:	4602      	mov	r2, r0
 800413e:	460b      	mov	r3, r1
 8004140:	4b0e      	ldr	r3, [pc, #56]	; (800417c <UART_SetConfig+0x38c>)
 8004142:	fba3 1302 	umull	r1, r3, r3, r2
 8004146:	095b      	lsrs	r3, r3, #5
 8004148:	2164      	movs	r1, #100	; 0x64
 800414a:	fb01 f303 	mul.w	r3, r1, r3
 800414e:	1ad3      	subs	r3, r2, r3
 8004150:	011b      	lsls	r3, r3, #4
 8004152:	3332      	adds	r3, #50	; 0x32
 8004154:	4a09      	ldr	r2, [pc, #36]	; (800417c <UART_SetConfig+0x38c>)
 8004156:	fba2 2303 	umull	r2, r3, r2, r3
 800415a:	095b      	lsrs	r3, r3, #5
 800415c:	f003 020f 	and.w	r2, r3, #15
 8004160:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4432      	add	r2, r6
 8004166:	609a      	str	r2, [r3, #8]
}
 8004168:	bf00      	nop
 800416a:	377c      	adds	r7, #124	; 0x7c
 800416c:	46bd      	mov	sp, r7
 800416e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004172:	bf00      	nop
 8004174:	40011000 	.word	0x40011000
 8004178:	40011400 	.word	0x40011400
 800417c:	51eb851f 	.word	0x51eb851f

08004180 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b084      	sub	sp, #16
 8004184:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8004186:	4b8d      	ldr	r3, [pc, #564]	; (80043bc <MX_LWIP_Init+0x23c>)
 8004188:	22c0      	movs	r2, #192	; 0xc0
 800418a:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800418c:	4b8b      	ldr	r3, [pc, #556]	; (80043bc <MX_LWIP_Init+0x23c>)
 800418e:	22a8      	movs	r2, #168	; 0xa8
 8004190:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 18;
 8004192:	4b8a      	ldr	r3, [pc, #552]	; (80043bc <MX_LWIP_Init+0x23c>)
 8004194:	2212      	movs	r2, #18
 8004196:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 111;
 8004198:	4b88      	ldr	r3, [pc, #544]	; (80043bc <MX_LWIP_Init+0x23c>)
 800419a:	226f      	movs	r2, #111	; 0x6f
 800419c:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800419e:	4b88      	ldr	r3, [pc, #544]	; (80043c0 <MX_LWIP_Init+0x240>)
 80041a0:	22ff      	movs	r2, #255	; 0xff
 80041a2:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 80041a4:	4b86      	ldr	r3, [pc, #536]	; (80043c0 <MX_LWIP_Init+0x240>)
 80041a6:	22ff      	movs	r2, #255	; 0xff
 80041a8:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 80041aa:	4b85      	ldr	r3, [pc, #532]	; (80043c0 <MX_LWIP_Init+0x240>)
 80041ac:	22ff      	movs	r2, #255	; 0xff
 80041ae:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 80041b0:	4b83      	ldr	r3, [pc, #524]	; (80043c0 <MX_LWIP_Init+0x240>)
 80041b2:	2200      	movs	r2, #0
 80041b4:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 80041b6:	4b83      	ldr	r3, [pc, #524]	; (80043c4 <MX_LWIP_Init+0x244>)
 80041b8:	22c0      	movs	r2, #192	; 0xc0
 80041ba:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 80041bc:	4b81      	ldr	r3, [pc, #516]	; (80043c4 <MX_LWIP_Init+0x244>)
 80041be:	22a8      	movs	r2, #168	; 0xa8
 80041c0:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 18;
 80041c2:	4b80      	ldr	r3, [pc, #512]	; (80043c4 <MX_LWIP_Init+0x244>)
 80041c4:	2212      	movs	r2, #18
 80041c6:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 80041c8:	4b7e      	ldr	r3, [pc, #504]	; (80043c4 <MX_LWIP_Init+0x244>)
 80041ca:	2201      	movs	r2, #1
 80041cc:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 80041ce:	f002 fcf1 	bl	8006bb4 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80041d2:	4b7a      	ldr	r3, [pc, #488]	; (80043bc <MX_LWIP_Init+0x23c>)
 80041d4:	781b      	ldrb	r3, [r3, #0]
 80041d6:	061a      	lsls	r2, r3, #24
 80041d8:	4b78      	ldr	r3, [pc, #480]	; (80043bc <MX_LWIP_Init+0x23c>)
 80041da:	785b      	ldrb	r3, [r3, #1]
 80041dc:	041b      	lsls	r3, r3, #16
 80041de:	431a      	orrs	r2, r3
 80041e0:	4b76      	ldr	r3, [pc, #472]	; (80043bc <MX_LWIP_Init+0x23c>)
 80041e2:	789b      	ldrb	r3, [r3, #2]
 80041e4:	021b      	lsls	r3, r3, #8
 80041e6:	4313      	orrs	r3, r2
 80041e8:	4a74      	ldr	r2, [pc, #464]	; (80043bc <MX_LWIP_Init+0x23c>)
 80041ea:	78d2      	ldrb	r2, [r2, #3]
 80041ec:	4313      	orrs	r3, r2
 80041ee:	061a      	lsls	r2, r3, #24
 80041f0:	4b72      	ldr	r3, [pc, #456]	; (80043bc <MX_LWIP_Init+0x23c>)
 80041f2:	781b      	ldrb	r3, [r3, #0]
 80041f4:	0619      	lsls	r1, r3, #24
 80041f6:	4b71      	ldr	r3, [pc, #452]	; (80043bc <MX_LWIP_Init+0x23c>)
 80041f8:	785b      	ldrb	r3, [r3, #1]
 80041fa:	041b      	lsls	r3, r3, #16
 80041fc:	4319      	orrs	r1, r3
 80041fe:	4b6f      	ldr	r3, [pc, #444]	; (80043bc <MX_LWIP_Init+0x23c>)
 8004200:	789b      	ldrb	r3, [r3, #2]
 8004202:	021b      	lsls	r3, r3, #8
 8004204:	430b      	orrs	r3, r1
 8004206:	496d      	ldr	r1, [pc, #436]	; (80043bc <MX_LWIP_Init+0x23c>)
 8004208:	78c9      	ldrb	r1, [r1, #3]
 800420a:	430b      	orrs	r3, r1
 800420c:	021b      	lsls	r3, r3, #8
 800420e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004212:	431a      	orrs	r2, r3
 8004214:	4b69      	ldr	r3, [pc, #420]	; (80043bc <MX_LWIP_Init+0x23c>)
 8004216:	781b      	ldrb	r3, [r3, #0]
 8004218:	0619      	lsls	r1, r3, #24
 800421a:	4b68      	ldr	r3, [pc, #416]	; (80043bc <MX_LWIP_Init+0x23c>)
 800421c:	785b      	ldrb	r3, [r3, #1]
 800421e:	041b      	lsls	r3, r3, #16
 8004220:	4319      	orrs	r1, r3
 8004222:	4b66      	ldr	r3, [pc, #408]	; (80043bc <MX_LWIP_Init+0x23c>)
 8004224:	789b      	ldrb	r3, [r3, #2]
 8004226:	021b      	lsls	r3, r3, #8
 8004228:	430b      	orrs	r3, r1
 800422a:	4964      	ldr	r1, [pc, #400]	; (80043bc <MX_LWIP_Init+0x23c>)
 800422c:	78c9      	ldrb	r1, [r1, #3]
 800422e:	430b      	orrs	r3, r1
 8004230:	0a1b      	lsrs	r3, r3, #8
 8004232:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004236:	431a      	orrs	r2, r3
 8004238:	4b60      	ldr	r3, [pc, #384]	; (80043bc <MX_LWIP_Init+0x23c>)
 800423a:	781b      	ldrb	r3, [r3, #0]
 800423c:	0619      	lsls	r1, r3, #24
 800423e:	4b5f      	ldr	r3, [pc, #380]	; (80043bc <MX_LWIP_Init+0x23c>)
 8004240:	785b      	ldrb	r3, [r3, #1]
 8004242:	041b      	lsls	r3, r3, #16
 8004244:	4319      	orrs	r1, r3
 8004246:	4b5d      	ldr	r3, [pc, #372]	; (80043bc <MX_LWIP_Init+0x23c>)
 8004248:	789b      	ldrb	r3, [r3, #2]
 800424a:	021b      	lsls	r3, r3, #8
 800424c:	430b      	orrs	r3, r1
 800424e:	495b      	ldr	r1, [pc, #364]	; (80043bc <MX_LWIP_Init+0x23c>)
 8004250:	78c9      	ldrb	r1, [r1, #3]
 8004252:	430b      	orrs	r3, r1
 8004254:	0e1b      	lsrs	r3, r3, #24
 8004256:	4313      	orrs	r3, r2
 8004258:	4a5b      	ldr	r2, [pc, #364]	; (80043c8 <MX_LWIP_Init+0x248>)
 800425a:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800425c:	4b58      	ldr	r3, [pc, #352]	; (80043c0 <MX_LWIP_Init+0x240>)
 800425e:	781b      	ldrb	r3, [r3, #0]
 8004260:	061a      	lsls	r2, r3, #24
 8004262:	4b57      	ldr	r3, [pc, #348]	; (80043c0 <MX_LWIP_Init+0x240>)
 8004264:	785b      	ldrb	r3, [r3, #1]
 8004266:	041b      	lsls	r3, r3, #16
 8004268:	431a      	orrs	r2, r3
 800426a:	4b55      	ldr	r3, [pc, #340]	; (80043c0 <MX_LWIP_Init+0x240>)
 800426c:	789b      	ldrb	r3, [r3, #2]
 800426e:	021b      	lsls	r3, r3, #8
 8004270:	4313      	orrs	r3, r2
 8004272:	4a53      	ldr	r2, [pc, #332]	; (80043c0 <MX_LWIP_Init+0x240>)
 8004274:	78d2      	ldrb	r2, [r2, #3]
 8004276:	4313      	orrs	r3, r2
 8004278:	061a      	lsls	r2, r3, #24
 800427a:	4b51      	ldr	r3, [pc, #324]	; (80043c0 <MX_LWIP_Init+0x240>)
 800427c:	781b      	ldrb	r3, [r3, #0]
 800427e:	0619      	lsls	r1, r3, #24
 8004280:	4b4f      	ldr	r3, [pc, #316]	; (80043c0 <MX_LWIP_Init+0x240>)
 8004282:	785b      	ldrb	r3, [r3, #1]
 8004284:	041b      	lsls	r3, r3, #16
 8004286:	4319      	orrs	r1, r3
 8004288:	4b4d      	ldr	r3, [pc, #308]	; (80043c0 <MX_LWIP_Init+0x240>)
 800428a:	789b      	ldrb	r3, [r3, #2]
 800428c:	021b      	lsls	r3, r3, #8
 800428e:	430b      	orrs	r3, r1
 8004290:	494b      	ldr	r1, [pc, #300]	; (80043c0 <MX_LWIP_Init+0x240>)
 8004292:	78c9      	ldrb	r1, [r1, #3]
 8004294:	430b      	orrs	r3, r1
 8004296:	021b      	lsls	r3, r3, #8
 8004298:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800429c:	431a      	orrs	r2, r3
 800429e:	4b48      	ldr	r3, [pc, #288]	; (80043c0 <MX_LWIP_Init+0x240>)
 80042a0:	781b      	ldrb	r3, [r3, #0]
 80042a2:	0619      	lsls	r1, r3, #24
 80042a4:	4b46      	ldr	r3, [pc, #280]	; (80043c0 <MX_LWIP_Init+0x240>)
 80042a6:	785b      	ldrb	r3, [r3, #1]
 80042a8:	041b      	lsls	r3, r3, #16
 80042aa:	4319      	orrs	r1, r3
 80042ac:	4b44      	ldr	r3, [pc, #272]	; (80043c0 <MX_LWIP_Init+0x240>)
 80042ae:	789b      	ldrb	r3, [r3, #2]
 80042b0:	021b      	lsls	r3, r3, #8
 80042b2:	430b      	orrs	r3, r1
 80042b4:	4942      	ldr	r1, [pc, #264]	; (80043c0 <MX_LWIP_Init+0x240>)
 80042b6:	78c9      	ldrb	r1, [r1, #3]
 80042b8:	430b      	orrs	r3, r1
 80042ba:	0a1b      	lsrs	r3, r3, #8
 80042bc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80042c0:	431a      	orrs	r2, r3
 80042c2:	4b3f      	ldr	r3, [pc, #252]	; (80043c0 <MX_LWIP_Init+0x240>)
 80042c4:	781b      	ldrb	r3, [r3, #0]
 80042c6:	0619      	lsls	r1, r3, #24
 80042c8:	4b3d      	ldr	r3, [pc, #244]	; (80043c0 <MX_LWIP_Init+0x240>)
 80042ca:	785b      	ldrb	r3, [r3, #1]
 80042cc:	041b      	lsls	r3, r3, #16
 80042ce:	4319      	orrs	r1, r3
 80042d0:	4b3b      	ldr	r3, [pc, #236]	; (80043c0 <MX_LWIP_Init+0x240>)
 80042d2:	789b      	ldrb	r3, [r3, #2]
 80042d4:	021b      	lsls	r3, r3, #8
 80042d6:	430b      	orrs	r3, r1
 80042d8:	4939      	ldr	r1, [pc, #228]	; (80043c0 <MX_LWIP_Init+0x240>)
 80042da:	78c9      	ldrb	r1, [r1, #3]
 80042dc:	430b      	orrs	r3, r1
 80042de:	0e1b      	lsrs	r3, r3, #24
 80042e0:	4313      	orrs	r3, r2
 80042e2:	4a3a      	ldr	r2, [pc, #232]	; (80043cc <MX_LWIP_Init+0x24c>)
 80042e4:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 80042e6:	4b37      	ldr	r3, [pc, #220]	; (80043c4 <MX_LWIP_Init+0x244>)
 80042e8:	781b      	ldrb	r3, [r3, #0]
 80042ea:	061a      	lsls	r2, r3, #24
 80042ec:	4b35      	ldr	r3, [pc, #212]	; (80043c4 <MX_LWIP_Init+0x244>)
 80042ee:	785b      	ldrb	r3, [r3, #1]
 80042f0:	041b      	lsls	r3, r3, #16
 80042f2:	431a      	orrs	r2, r3
 80042f4:	4b33      	ldr	r3, [pc, #204]	; (80043c4 <MX_LWIP_Init+0x244>)
 80042f6:	789b      	ldrb	r3, [r3, #2]
 80042f8:	021b      	lsls	r3, r3, #8
 80042fa:	4313      	orrs	r3, r2
 80042fc:	4a31      	ldr	r2, [pc, #196]	; (80043c4 <MX_LWIP_Init+0x244>)
 80042fe:	78d2      	ldrb	r2, [r2, #3]
 8004300:	4313      	orrs	r3, r2
 8004302:	061a      	lsls	r2, r3, #24
 8004304:	4b2f      	ldr	r3, [pc, #188]	; (80043c4 <MX_LWIP_Init+0x244>)
 8004306:	781b      	ldrb	r3, [r3, #0]
 8004308:	0619      	lsls	r1, r3, #24
 800430a:	4b2e      	ldr	r3, [pc, #184]	; (80043c4 <MX_LWIP_Init+0x244>)
 800430c:	785b      	ldrb	r3, [r3, #1]
 800430e:	041b      	lsls	r3, r3, #16
 8004310:	4319      	orrs	r1, r3
 8004312:	4b2c      	ldr	r3, [pc, #176]	; (80043c4 <MX_LWIP_Init+0x244>)
 8004314:	789b      	ldrb	r3, [r3, #2]
 8004316:	021b      	lsls	r3, r3, #8
 8004318:	430b      	orrs	r3, r1
 800431a:	492a      	ldr	r1, [pc, #168]	; (80043c4 <MX_LWIP_Init+0x244>)
 800431c:	78c9      	ldrb	r1, [r1, #3]
 800431e:	430b      	orrs	r3, r1
 8004320:	021b      	lsls	r3, r3, #8
 8004322:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004326:	431a      	orrs	r2, r3
 8004328:	4b26      	ldr	r3, [pc, #152]	; (80043c4 <MX_LWIP_Init+0x244>)
 800432a:	781b      	ldrb	r3, [r3, #0]
 800432c:	0619      	lsls	r1, r3, #24
 800432e:	4b25      	ldr	r3, [pc, #148]	; (80043c4 <MX_LWIP_Init+0x244>)
 8004330:	785b      	ldrb	r3, [r3, #1]
 8004332:	041b      	lsls	r3, r3, #16
 8004334:	4319      	orrs	r1, r3
 8004336:	4b23      	ldr	r3, [pc, #140]	; (80043c4 <MX_LWIP_Init+0x244>)
 8004338:	789b      	ldrb	r3, [r3, #2]
 800433a:	021b      	lsls	r3, r3, #8
 800433c:	430b      	orrs	r3, r1
 800433e:	4921      	ldr	r1, [pc, #132]	; (80043c4 <MX_LWIP_Init+0x244>)
 8004340:	78c9      	ldrb	r1, [r1, #3]
 8004342:	430b      	orrs	r3, r1
 8004344:	0a1b      	lsrs	r3, r3, #8
 8004346:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800434a:	431a      	orrs	r2, r3
 800434c:	4b1d      	ldr	r3, [pc, #116]	; (80043c4 <MX_LWIP_Init+0x244>)
 800434e:	781b      	ldrb	r3, [r3, #0]
 8004350:	0619      	lsls	r1, r3, #24
 8004352:	4b1c      	ldr	r3, [pc, #112]	; (80043c4 <MX_LWIP_Init+0x244>)
 8004354:	785b      	ldrb	r3, [r3, #1]
 8004356:	041b      	lsls	r3, r3, #16
 8004358:	4319      	orrs	r1, r3
 800435a:	4b1a      	ldr	r3, [pc, #104]	; (80043c4 <MX_LWIP_Init+0x244>)
 800435c:	789b      	ldrb	r3, [r3, #2]
 800435e:	021b      	lsls	r3, r3, #8
 8004360:	430b      	orrs	r3, r1
 8004362:	4918      	ldr	r1, [pc, #96]	; (80043c4 <MX_LWIP_Init+0x244>)
 8004364:	78c9      	ldrb	r1, [r1, #3]
 8004366:	430b      	orrs	r3, r1
 8004368:	0e1b      	lsrs	r3, r3, #24
 800436a:	4313      	orrs	r3, r2
 800436c:	4a18      	ldr	r2, [pc, #96]	; (80043d0 <MX_LWIP_Init+0x250>)
 800436e:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8004370:	4b18      	ldr	r3, [pc, #96]	; (80043d4 <MX_LWIP_Init+0x254>)
 8004372:	9302      	str	r3, [sp, #8]
 8004374:	4b18      	ldr	r3, [pc, #96]	; (80043d8 <MX_LWIP_Init+0x258>)
 8004376:	9301      	str	r3, [sp, #4]
 8004378:	2300      	movs	r3, #0
 800437a:	9300      	str	r3, [sp, #0]
 800437c:	4b14      	ldr	r3, [pc, #80]	; (80043d0 <MX_LWIP_Init+0x250>)
 800437e:	4a13      	ldr	r2, [pc, #76]	; (80043cc <MX_LWIP_Init+0x24c>)
 8004380:	4911      	ldr	r1, [pc, #68]	; (80043c8 <MX_LWIP_Init+0x248>)
 8004382:	4816      	ldr	r0, [pc, #88]	; (80043dc <MX_LWIP_Init+0x25c>)
 8004384:	f003 f8bc 	bl	8007500 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8004388:	4814      	ldr	r0, [pc, #80]	; (80043dc <MX_LWIP_Init+0x25c>)
 800438a:	f003 fa6b 	bl	8007864 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800438e:	4b13      	ldr	r3, [pc, #76]	; (80043dc <MX_LWIP_Init+0x25c>)
 8004390:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004394:	089b      	lsrs	r3, r3, #2
 8004396:	f003 0301 	and.w	r3, r3, #1
 800439a:	b2db      	uxtb	r3, r3
 800439c:	2b00      	cmp	r3, #0
 800439e:	d003      	beq.n	80043a8 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80043a0:	480e      	ldr	r0, [pc, #56]	; (80043dc <MX_LWIP_Init+0x25c>)
 80043a2:	f003 fa6f 	bl	8007884 <netif_set_up>
 80043a6:	e002      	b.n	80043ae <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 80043a8:	480c      	ldr	r0, [pc, #48]	; (80043dc <MX_LWIP_Init+0x25c>)
 80043aa:	f003 fad7 	bl	800795c <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 80043ae:	490c      	ldr	r1, [pc, #48]	; (80043e0 <MX_LWIP_Init+0x260>)
 80043b0:	480a      	ldr	r0, [pc, #40]	; (80043dc <MX_LWIP_Init+0x25c>)
 80043b2:	f003 fb05 	bl	80079c0 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80043b6:	bf00      	nop
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}
 80043bc:	20000ce8 	.word	0x20000ce8
 80043c0:	20000ce4 	.word	0x20000ce4
 80043c4:	20000cdc 	.word	0x20000cdc
 80043c8:	20000ce0 	.word	0x20000ce0
 80043cc:	20000cec 	.word	0x20000cec
 80043d0:	20000cf0 	.word	0x20000cf0
 80043d4:	08011065 	.word	0x08011065
 80043d8:	08004971 	.word	0x08004971
 80043dc:	20000c60 	.word	0x20000c60
 80043e0:	080049dd 	.word	0x080049dd

080043e4 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b08e      	sub	sp, #56	; 0x38
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80043f0:	2200      	movs	r2, #0
 80043f2:	601a      	str	r2, [r3, #0]
 80043f4:	605a      	str	r2, [r3, #4]
 80043f6:	609a      	str	r2, [r3, #8]
 80043f8:	60da      	str	r2, [r3, #12]
 80043fa:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a46      	ldr	r2, [pc, #280]	; (800451c <HAL_ETH_MspInit+0x138>)
 8004402:	4293      	cmp	r3, r2
 8004404:	f040 8085 	bne.w	8004512 <HAL_ETH_MspInit+0x12e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8004408:	2300      	movs	r3, #0
 800440a:	623b      	str	r3, [r7, #32]
 800440c:	4b44      	ldr	r3, [pc, #272]	; (8004520 <HAL_ETH_MspInit+0x13c>)
 800440e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004410:	4a43      	ldr	r2, [pc, #268]	; (8004520 <HAL_ETH_MspInit+0x13c>)
 8004412:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004416:	6313      	str	r3, [r2, #48]	; 0x30
 8004418:	4b41      	ldr	r3, [pc, #260]	; (8004520 <HAL_ETH_MspInit+0x13c>)
 800441a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800441c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004420:	623b      	str	r3, [r7, #32]
 8004422:	6a3b      	ldr	r3, [r7, #32]
 8004424:	2300      	movs	r3, #0
 8004426:	61fb      	str	r3, [r7, #28]
 8004428:	4b3d      	ldr	r3, [pc, #244]	; (8004520 <HAL_ETH_MspInit+0x13c>)
 800442a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800442c:	4a3c      	ldr	r2, [pc, #240]	; (8004520 <HAL_ETH_MspInit+0x13c>)
 800442e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004432:	6313      	str	r3, [r2, #48]	; 0x30
 8004434:	4b3a      	ldr	r3, [pc, #232]	; (8004520 <HAL_ETH_MspInit+0x13c>)
 8004436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004438:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800443c:	61fb      	str	r3, [r7, #28]
 800443e:	69fb      	ldr	r3, [r7, #28]
 8004440:	2300      	movs	r3, #0
 8004442:	61bb      	str	r3, [r7, #24]
 8004444:	4b36      	ldr	r3, [pc, #216]	; (8004520 <HAL_ETH_MspInit+0x13c>)
 8004446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004448:	4a35      	ldr	r2, [pc, #212]	; (8004520 <HAL_ETH_MspInit+0x13c>)
 800444a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800444e:	6313      	str	r3, [r2, #48]	; 0x30
 8004450:	4b33      	ldr	r3, [pc, #204]	; (8004520 <HAL_ETH_MspInit+0x13c>)
 8004452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004454:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004458:	61bb      	str	r3, [r7, #24]
 800445a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800445c:	2300      	movs	r3, #0
 800445e:	617b      	str	r3, [r7, #20]
 8004460:	4b2f      	ldr	r3, [pc, #188]	; (8004520 <HAL_ETH_MspInit+0x13c>)
 8004462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004464:	4a2e      	ldr	r2, [pc, #184]	; (8004520 <HAL_ETH_MspInit+0x13c>)
 8004466:	f043 0304 	orr.w	r3, r3, #4
 800446a:	6313      	str	r3, [r2, #48]	; 0x30
 800446c:	4b2c      	ldr	r3, [pc, #176]	; (8004520 <HAL_ETH_MspInit+0x13c>)
 800446e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004470:	f003 0304 	and.w	r3, r3, #4
 8004474:	617b      	str	r3, [r7, #20]
 8004476:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004478:	2300      	movs	r3, #0
 800447a:	613b      	str	r3, [r7, #16]
 800447c:	4b28      	ldr	r3, [pc, #160]	; (8004520 <HAL_ETH_MspInit+0x13c>)
 800447e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004480:	4a27      	ldr	r2, [pc, #156]	; (8004520 <HAL_ETH_MspInit+0x13c>)
 8004482:	f043 0301 	orr.w	r3, r3, #1
 8004486:	6313      	str	r3, [r2, #48]	; 0x30
 8004488:	4b25      	ldr	r3, [pc, #148]	; (8004520 <HAL_ETH_MspInit+0x13c>)
 800448a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800448c:	f003 0301 	and.w	r3, r3, #1
 8004490:	613b      	str	r3, [r7, #16]
 8004492:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004494:	2300      	movs	r3, #0
 8004496:	60fb      	str	r3, [r7, #12]
 8004498:	4b21      	ldr	r3, [pc, #132]	; (8004520 <HAL_ETH_MspInit+0x13c>)
 800449a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800449c:	4a20      	ldr	r2, [pc, #128]	; (8004520 <HAL_ETH_MspInit+0x13c>)
 800449e:	f043 0302 	orr.w	r3, r3, #2
 80044a2:	6313      	str	r3, [r2, #48]	; 0x30
 80044a4:	4b1e      	ldr	r3, [pc, #120]	; (8004520 <HAL_ETH_MspInit+0x13c>)
 80044a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044a8:	f003 0302 	and.w	r3, r3, #2
 80044ac:	60fb      	str	r3, [r7, #12]
 80044ae:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80044b0:	2332      	movs	r3, #50	; 0x32
 80044b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044b4:	2302      	movs	r3, #2
 80044b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044b8:	2300      	movs	r3, #0
 80044ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044bc:	2303      	movs	r3, #3
 80044be:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80044c0:	230b      	movs	r3, #11
 80044c2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80044c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80044c8:	4619      	mov	r1, r3
 80044ca:	4816      	ldr	r0, [pc, #88]	; (8004524 <HAL_ETH_MspInit+0x140>)
 80044cc:	f7fe fd32 	bl	8002f34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80044d0:	2386      	movs	r3, #134	; 0x86
 80044d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044d4:	2302      	movs	r3, #2
 80044d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044d8:	2300      	movs	r3, #0
 80044da:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044dc:	2303      	movs	r3, #3
 80044de:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80044e0:	230b      	movs	r3, #11
 80044e2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80044e8:	4619      	mov	r1, r3
 80044ea:	480f      	ldr	r0, [pc, #60]	; (8004528 <HAL_ETH_MspInit+0x144>)
 80044ec:	f7fe fd22 	bl	8002f34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 80044f0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80044f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044f6:	2302      	movs	r3, #2
 80044f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044fa:	2300      	movs	r3, #0
 80044fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044fe:	2303      	movs	r3, #3
 8004500:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004502:	230b      	movs	r3, #11
 8004504:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004506:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800450a:	4619      	mov	r1, r3
 800450c:	4807      	ldr	r0, [pc, #28]	; (800452c <HAL_ETH_MspInit+0x148>)
 800450e:	f7fe fd11 	bl	8002f34 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8004512:	bf00      	nop
 8004514:	3738      	adds	r7, #56	; 0x38
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}
 800451a:	bf00      	nop
 800451c:	40028000 	.word	0x40028000
 8004520:	40023800 	.word	0x40023800
 8004524:	40020800 	.word	0x40020800
 8004528:	40020000 	.word	0x40020000
 800452c:	40020400 	.word	0x40020400

08004530 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b086      	sub	sp, #24
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8004538:	2300      	movs	r3, #0
 800453a:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800453c:	4b4d      	ldr	r3, [pc, #308]	; (8004674 <low_level_init+0x144>)
 800453e:	4a4e      	ldr	r2, [pc, #312]	; (8004678 <low_level_init+0x148>)
 8004540:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8004542:	4b4c      	ldr	r3, [pc, #304]	; (8004674 <low_level_init+0x144>)
 8004544:	2201      	movs	r2, #1
 8004546:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8004548:	4b4a      	ldr	r3, [pc, #296]	; (8004674 <low_level_init+0x144>)
 800454a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800454e:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8004550:	4b48      	ldr	r3, [pc, #288]	; (8004674 <low_level_init+0x144>)
 8004552:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004556:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8004558:	4b46      	ldr	r3, [pc, #280]	; (8004674 <low_level_init+0x144>)
 800455a:	2201      	movs	r2, #1
 800455c:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 800455e:	2300      	movs	r3, #0
 8004560:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8004562:	2380      	movs	r3, #128	; 0x80
 8004564:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8004566:	23e1      	movs	r3, #225	; 0xe1
 8004568:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800456a:	2300      	movs	r3, #0
 800456c:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800456e:	2300      	movs	r3, #0
 8004570:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8004572:	2300      	movs	r3, #0
 8004574:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8004576:	4a3f      	ldr	r2, [pc, #252]	; (8004674 <low_level_init+0x144>)
 8004578:	f107 0308 	add.w	r3, r7, #8
 800457c:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 800457e:	4b3d      	ldr	r3, [pc, #244]	; (8004674 <low_level_init+0x144>)
 8004580:	2200      	movs	r2, #0
 8004582:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8004584:	4b3b      	ldr	r3, [pc, #236]	; (8004674 <low_level_init+0x144>)
 8004586:	2200      	movs	r2, #0
 8004588:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800458a:	4b3a      	ldr	r3, [pc, #232]	; (8004674 <low_level_init+0x144>)
 800458c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004590:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8004592:	4838      	ldr	r0, [pc, #224]	; (8004674 <low_level_init+0x144>)
 8004594:	f7fd fba8 	bl	8001ce8 <HAL_ETH_Init>
 8004598:	4603      	mov	r3, r0
 800459a:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 800459c:	7dfb      	ldrb	r3, [r7, #23]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d108      	bne.n	80045b4 <low_level_init+0x84>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80045a8:	f043 0304 	orr.w	r3, r3, #4
 80045ac:	b2da      	uxtb	r2, r3
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 80045b4:	2304      	movs	r3, #4
 80045b6:	4a31      	ldr	r2, [pc, #196]	; (800467c <low_level_init+0x14c>)
 80045b8:	4931      	ldr	r1, [pc, #196]	; (8004680 <low_level_init+0x150>)
 80045ba:	482e      	ldr	r0, [pc, #184]	; (8004674 <low_level_init+0x144>)
 80045bc:	f7fd fd30 	bl	8002020 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 80045c0:	2304      	movs	r3, #4
 80045c2:	4a30      	ldr	r2, [pc, #192]	; (8004684 <low_level_init+0x154>)
 80045c4:	4930      	ldr	r1, [pc, #192]	; (8004688 <low_level_init+0x158>)
 80045c6:	482b      	ldr	r0, [pc, #172]	; (8004674 <low_level_init+0x144>)
 80045c8:	f7fd fd93 	bl	80020f2 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2206      	movs	r2, #6
 80045d0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80045d4:	4b27      	ldr	r3, [pc, #156]	; (8004674 <low_level_init+0x144>)
 80045d6:	695b      	ldr	r3, [r3, #20]
 80045d8:	781a      	ldrb	r2, [r3, #0]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80045e0:	4b24      	ldr	r3, [pc, #144]	; (8004674 <low_level_init+0x144>)
 80045e2:	695b      	ldr	r3, [r3, #20]
 80045e4:	785a      	ldrb	r2, [r3, #1]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80045ec:	4b21      	ldr	r3, [pc, #132]	; (8004674 <low_level_init+0x144>)
 80045ee:	695b      	ldr	r3, [r3, #20]
 80045f0:	789a      	ldrb	r2, [r3, #2]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80045f8:	4b1e      	ldr	r3, [pc, #120]	; (8004674 <low_level_init+0x144>)
 80045fa:	695b      	ldr	r3, [r3, #20]
 80045fc:	78da      	ldrb	r2, [r3, #3]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8004604:	4b1b      	ldr	r3, [pc, #108]	; (8004674 <low_level_init+0x144>)
 8004606:	695b      	ldr	r3, [r3, #20]
 8004608:	791a      	ldrb	r2, [r3, #4]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8004610:	4b18      	ldr	r3, [pc, #96]	; (8004674 <low_level_init+0x144>)
 8004612:	695b      	ldr	r3, [r3, #20]
 8004614:	795a      	ldrb	r2, [r3, #5]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004622:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800462a:	f043 030a 	orr.w	r3, r3, #10
 800462e:	b2da      	uxtb	r2, r3
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8004636:	480f      	ldr	r0, [pc, #60]	; (8004674 <low_level_init+0x144>)
 8004638:	f7fe f804 	bl	8002644 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 800463c:	f107 0310 	add.w	r3, r7, #16
 8004640:	461a      	mov	r2, r3
 8004642:	211d      	movs	r1, #29
 8004644:	480b      	ldr	r0, [pc, #44]	; (8004674 <low_level_init+0x144>)
 8004646:	f7fd ff2f 	bl	80024a8 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	f043 030b 	orr.w	r3, r3, #11
 8004650:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	461a      	mov	r2, r3
 8004656:	211d      	movs	r1, #29
 8004658:	4806      	ldr	r0, [pc, #24]	; (8004674 <low_level_init+0x144>)
 800465a:	f7fd ff8d 	bl	8002578 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 800465e:	f107 0310 	add.w	r3, r7, #16
 8004662:	461a      	mov	r2, r3
 8004664:	211d      	movs	r1, #29
 8004666:	4803      	ldr	r0, [pc, #12]	; (8004674 <low_level_init+0x144>)
 8004668:	f7fd ff1e 	bl	80024a8 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800466c:	bf00      	nop
 800466e:	3718      	adds	r7, #24
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}
 8004674:	200025c4 	.word	0x200025c4
 8004678:	40028000 	.word	0x40028000
 800467c:	2000260c 	.word	0x2000260c
 8004680:	20000cf4 	.word	0x20000cf4
 8004684:	20000d74 	.word	0x20000d74
 8004688:	20002544 	.word	0x20002544

0800468c <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b08a      	sub	sp, #40	; 0x28
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
 8004694:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8004696:	4b4b      	ldr	r3, [pc, #300]	; (80047c4 <low_level_output+0x138>)
 8004698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 800469e:	2300      	movs	r3, #0
 80046a0:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 80046a2:	2300      	movs	r3, #0
 80046a4:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 80046a6:	2300      	movs	r3, #0
 80046a8:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 80046aa:	2300      	movs	r3, #0
 80046ac:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 80046ae:	4b45      	ldr	r3, [pc, #276]	; (80047c4 <low_level_output+0x138>)
 80046b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046b2:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 80046b4:	2300      	movs	r3, #0
 80046b6:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	623b      	str	r3, [r7, #32]
 80046bc:	e05a      	b.n	8004774 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80046be:	69bb      	ldr	r3, [r7, #24]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	da03      	bge.n	80046ce <low_level_output+0x42>
      {
        errval = ERR_USE;
 80046c6:	23f8      	movs	r3, #248	; 0xf8
 80046c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 80046cc:	e05c      	b.n	8004788 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 80046ce:	6a3b      	ldr	r3, [r7, #32]
 80046d0:	895b      	ldrh	r3, [r3, #10]
 80046d2:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 80046d4:	2300      	movs	r3, #0
 80046d6:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80046d8:	e02f      	b.n	800473a <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 80046da:	69fa      	ldr	r2, [r7, #28]
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	18d0      	adds	r0, r2, r3
 80046e0:	6a3b      	ldr	r3, [r7, #32]
 80046e2:	685a      	ldr	r2, [r3, #4]
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	18d1      	adds	r1, r2, r3
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 80046ee:	3304      	adds	r3, #4
 80046f0:	461a      	mov	r2, r3
 80046f2:	f00c fdd3 	bl	801129c <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 80046f6:	69bb      	ldr	r3, [r7, #24]
 80046f8:	68db      	ldr	r3, [r3, #12]
 80046fa:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80046fc:	69bb      	ldr	r3, [r7, #24]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	2b00      	cmp	r3, #0
 8004702:	da03      	bge.n	800470c <low_level_output+0x80>
        {
          errval = ERR_USE;
 8004704:	23f8      	movs	r3, #248	; 0xf8
 8004706:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 800470a:	e03d      	b.n	8004788 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 800470c:	69bb      	ldr	r3, [r7, #24]
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8004712:	693a      	ldr	r2, [r7, #16]
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	4413      	add	r3, r2
 8004718:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800471c:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800471e:	68ba      	ldr	r2, [r7, #8]
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	1ad3      	subs	r3, r2, r3
 8004724:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004728:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800472a:	697a      	ldr	r2, [r7, #20]
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	1ad3      	subs	r3, r2, r3
 8004730:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004734:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8004736:	2300      	movs	r3, #0
 8004738:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800473a:	68fa      	ldr	r2, [r7, #12]
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	4413      	add	r3, r2
 8004740:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004744:	4293      	cmp	r3, r2
 8004746:	d8c8      	bhi.n	80046da <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8004748:	69fa      	ldr	r2, [r7, #28]
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	18d0      	adds	r0, r2, r3
 800474e:	6a3b      	ldr	r3, [r7, #32]
 8004750:	685a      	ldr	r2, [r3, #4]
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	4413      	add	r3, r2
 8004756:	68fa      	ldr	r2, [r7, #12]
 8004758:	4619      	mov	r1, r3
 800475a:	f00c fd9f 	bl	801129c <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800475e:	693a      	ldr	r2, [r7, #16]
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	4413      	add	r3, r2
 8004764:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8004766:	697a      	ldr	r2, [r7, #20]
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	4413      	add	r3, r2
 800476c:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 800476e:	6a3b      	ldr	r3, [r7, #32]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	623b      	str	r3, [r7, #32]
 8004774:	6a3b      	ldr	r3, [r7, #32]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d1a1      	bne.n	80046be <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 800477a:	6979      	ldr	r1, [r7, #20]
 800477c:	4811      	ldr	r0, [pc, #68]	; (80047c4 <low_level_output+0x138>)
 800477e:	f7fd fd25 	bl	80021cc <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8004782:	2300      	movs	r3, #0
 8004784:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8004788:	4b0e      	ldr	r3, [pc, #56]	; (80047c4 <low_level_output+0x138>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004790:	3314      	adds	r3, #20
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 0320 	and.w	r3, r3, #32
 8004798:	2b00      	cmp	r3, #0
 800479a:	d00d      	beq.n	80047b8 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 800479c:	4b09      	ldr	r3, [pc, #36]	; (80047c4 <low_level_output+0x138>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047a4:	3314      	adds	r3, #20
 80047a6:	2220      	movs	r2, #32
 80047a8:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 80047aa:	4b06      	ldr	r3, [pc, #24]	; (80047c4 <low_level_output+0x138>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047b2:	3304      	adds	r3, #4
 80047b4:	2200      	movs	r2, #0
 80047b6:	601a      	str	r2, [r3, #0]
  }
  return errval;
 80047b8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3728      	adds	r7, #40	; 0x28
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}
 80047c4:	200025c4 	.word	0x200025c4

080047c8 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b08c      	sub	sp, #48	; 0x30
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80047d0:	2300      	movs	r3, #0
 80047d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 80047d4:	2300      	movs	r3, #0
 80047d6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 80047d8:	2300      	movs	r3, #0
 80047da:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 80047dc:	2300      	movs	r3, #0
 80047de:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 80047e0:	2300      	movs	r3, #0
 80047e2:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 80047e4:	2300      	movs	r3, #0
 80047e6:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 80047e8:	2300      	movs	r3, #0
 80047ea:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 80047ec:	484f      	ldr	r0, [pc, #316]	; (800492c <low_level_input+0x164>)
 80047ee:	f7fd fdd7 	bl	80023a0 <HAL_ETH_GetReceivedFrame>
 80047f2:	4603      	mov	r3, r0
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d001      	beq.n	80047fc <low_level_input+0x34>

    return NULL;
 80047f8:	2300      	movs	r3, #0
 80047fa:	e092      	b.n	8004922 <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 80047fc:	4b4b      	ldr	r3, [pc, #300]	; (800492c <low_level_input+0x164>)
 80047fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004800:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8004802:	4b4a      	ldr	r3, [pc, #296]	; (800492c <low_level_input+0x164>)
 8004804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004806:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8004808:	89fb      	ldrh	r3, [r7, #14]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d007      	beq.n	800481e <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800480e:	89fb      	ldrh	r3, [r7, #14]
 8004810:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8004814:	4619      	mov	r1, r3
 8004816:	2000      	movs	r0, #0
 8004818:	f003 f96e 	bl	8007af8 <pbuf_alloc>
 800481c:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 800481e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004820:	2b00      	cmp	r3, #0
 8004822:	d04b      	beq.n	80048bc <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8004824:	4b41      	ldr	r3, [pc, #260]	; (800492c <low_level_input+0x164>)
 8004826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004828:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 800482a:	2300      	movs	r3, #0
 800482c:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800482e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004830:	62bb      	str	r3, [r7, #40]	; 0x28
 8004832:	e040      	b.n	80048b6 <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8004834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004836:	895b      	ldrh	r3, [r3, #10]
 8004838:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 800483a:	2300      	movs	r3, #0
 800483c:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800483e:	e021      	b.n	8004884 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8004840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004842:	685a      	ldr	r2, [r3, #4]
 8004844:	69bb      	ldr	r3, [r7, #24]
 8004846:	18d0      	adds	r0, r2, r3
 8004848:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800484a:	69fb      	ldr	r3, [r7, #28]
 800484c:	18d1      	adds	r1, r2, r3
 800484e:	69fb      	ldr	r3, [r7, #28]
 8004850:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8004854:	3304      	adds	r3, #4
 8004856:	461a      	mov	r2, r3
 8004858:	f00c fd20 	bl	801129c <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800485c:	6a3b      	ldr	r3, [r7, #32]
 800485e:	68db      	ldr	r3, [r3, #12]
 8004860:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8004862:	6a3b      	ldr	r3, [r7, #32]
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8004868:	69fa      	ldr	r2, [r7, #28]
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	4413      	add	r3, r2
 800486e:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8004872:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8004874:	69ba      	ldr	r2, [r7, #24]
 8004876:	69fb      	ldr	r3, [r7, #28]
 8004878:	1ad3      	subs	r3, r2, r3
 800487a:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800487e:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8004880:	2300      	movs	r3, #0
 8004882:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8004884:	697a      	ldr	r2, [r7, #20]
 8004886:	69fb      	ldr	r3, [r7, #28]
 8004888:	4413      	add	r3, r2
 800488a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800488e:	4293      	cmp	r3, r2
 8004890:	d8d6      	bhi.n	8004840 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8004892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004894:	685a      	ldr	r2, [r3, #4]
 8004896:	69bb      	ldr	r3, [r7, #24]
 8004898:	18d0      	adds	r0, r2, r3
 800489a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800489c:	69fb      	ldr	r3, [r7, #28]
 800489e:	4413      	add	r3, r2
 80048a0:	697a      	ldr	r2, [r7, #20]
 80048a2:	4619      	mov	r1, r3
 80048a4:	f00c fcfa 	bl	801129c <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80048a8:	69fa      	ldr	r2, [r7, #28]
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	4413      	add	r3, r2
 80048ae:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80048b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80048b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d1bb      	bne.n	8004834 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80048bc:	4b1b      	ldr	r3, [pc, #108]	; (800492c <low_level_input+0x164>)
 80048be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048c0:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80048c2:	2300      	movs	r3, #0
 80048c4:	613b      	str	r3, [r7, #16]
 80048c6:	e00b      	b.n	80048e0 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 80048c8:	6a3b      	ldr	r3, [r7, #32]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80048d0:	6a3b      	ldr	r3, [r7, #32]
 80048d2:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80048d4:	6a3b      	ldr	r3, [r7, #32]
 80048d6:	68db      	ldr	r3, [r3, #12]
 80048d8:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	3301      	adds	r3, #1
 80048de:	613b      	str	r3, [r7, #16]
 80048e0:	4b12      	ldr	r3, [pc, #72]	; (800492c <low_level_input+0x164>)
 80048e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048e4:	693a      	ldr	r2, [r7, #16]
 80048e6:	429a      	cmp	r2, r3
 80048e8:	d3ee      	bcc.n	80048c8 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 80048ea:	4b10      	ldr	r3, [pc, #64]	; (800492c <low_level_input+0x164>)
 80048ec:	2200      	movs	r2, #0
 80048ee:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 80048f0:	4b0e      	ldr	r3, [pc, #56]	; (800492c <low_level_input+0x164>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048f8:	3314      	adds	r3, #20
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004900:	2b00      	cmp	r3, #0
 8004902:	d00d      	beq.n	8004920 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8004904:	4b09      	ldr	r3, [pc, #36]	; (800492c <low_level_input+0x164>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800490c:	3314      	adds	r3, #20
 800490e:	2280      	movs	r2, #128	; 0x80
 8004910:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8004912:	4b06      	ldr	r3, [pc, #24]	; (800492c <low_level_input+0x164>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800491a:	3308      	adds	r3, #8
 800491c:	2200      	movs	r2, #0
 800491e:	601a      	str	r2, [r3, #0]
  }
  return p;
 8004920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004922:	4618      	mov	r0, r3
 8004924:	3730      	adds	r7, #48	; 0x30
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}
 800492a:	bf00      	nop
 800492c:	200025c4 	.word	0x200025c4

08004930 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b084      	sub	sp, #16
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 8004938:	6878      	ldr	r0, [r7, #4]
 800493a:	f7ff ff45 	bl	80047c8 <low_level_input>
 800493e:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d010      	beq.n	8004968 <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	691b      	ldr	r3, [r3, #16]
 800494a:	6879      	ldr	r1, [r7, #4]
 800494c:	68f8      	ldr	r0, [r7, #12]
 800494e:	4798      	blx	r3
 8004950:	4603      	mov	r3, r0
 8004952:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 8004954:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d006      	beq.n	800496a <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 800495c:	68f8      	ldr	r0, [r7, #12]
 800495e:	f003 fbaf 	bl	80080c0 <pbuf_free>
    p = NULL;
 8004962:	2300      	movs	r3, #0
 8004964:	60fb      	str	r3, [r7, #12]
 8004966:	e000      	b.n	800496a <ethernetif_input+0x3a>
  if (p == NULL) return;
 8004968:	bf00      	nop
  }
}
 800496a:	3710      	adds	r7, #16
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}

08004970 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b082      	sub	sp, #8
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d106      	bne.n	800498c <ethernetif_init+0x1c>
 800497e:	4b0e      	ldr	r3, [pc, #56]	; (80049b8 <ethernetif_init+0x48>)
 8004980:	f44f 7202 	mov.w	r2, #520	; 0x208
 8004984:	490d      	ldr	r1, [pc, #52]	; (80049bc <ethernetif_init+0x4c>)
 8004986:	480e      	ldr	r0, [pc, #56]	; (80049c0 <ethernetif_init+0x50>)
 8004988:	f00c fd62 	bl	8011450 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2273      	movs	r2, #115	; 0x73
 8004990:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2274      	movs	r2, #116	; 0x74
 8004998:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	4a09      	ldr	r2, [pc, #36]	; (80049c4 <ethernetif_init+0x54>)
 80049a0:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	4a08      	ldr	r2, [pc, #32]	; (80049c8 <ethernetif_init+0x58>)
 80049a6:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80049a8:	6878      	ldr	r0, [r7, #4]
 80049aa:	f7ff fdc1 	bl	8004530 <low_level_init>

  return ERR_OK;
 80049ae:	2300      	movs	r3, #0
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	3708      	adds	r7, #8
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}
 80049b8:	08012dd8 	.word	0x08012dd8
 80049bc:	08012df4 	.word	0x08012df4
 80049c0:	08012e04 	.word	0x08012e04
 80049c4:	0800f529 	.word	0x0800f529
 80049c8:	0800468d 	.word	0x0800468d

080049cc <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80049d0:	f7fd f874 	bl	8001abc <HAL_GetTick>
 80049d4:	4603      	mov	r3, r0
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	bd80      	pop	{r7, pc}
	...

080049dc <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b084      	sub	sp, #16
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 80049e4:	2300      	movs	r3, #0
 80049e6:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 80049e8:	2300      	movs	r3, #0
 80049ea:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80049f2:	089b      	lsrs	r3, r3, #2
 80049f4:	f003 0301 	and.w	r3, r3, #1
 80049f8:	b2db      	uxtb	r3, r3
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d05d      	beq.n	8004aba <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80049fe:	4b34      	ldr	r3, [pc, #208]	; (8004ad0 <ethernetif_update_config+0xf4>)
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d03f      	beq.n	8004a86 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8004a06:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004a0a:	2100      	movs	r1, #0
 8004a0c:	4830      	ldr	r0, [pc, #192]	; (8004ad0 <ethernetif_update_config+0xf4>)
 8004a0e:	f7fd fdb3 	bl	8002578 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 8004a12:	f7fd f853 	bl	8001abc <HAL_GetTick>
 8004a16:	4603      	mov	r3, r0
 8004a18:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8004a1a:	f107 0308 	add.w	r3, r7, #8
 8004a1e:	461a      	mov	r2, r3
 8004a20:	2101      	movs	r1, #1
 8004a22:	482b      	ldr	r0, [pc, #172]	; (8004ad0 <ethernetif_update_config+0xf4>)
 8004a24:	f7fd fd40 	bl	80024a8 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8004a28:	f7fd f848 	bl	8001abc <HAL_GetTick>
 8004a2c:	4602      	mov	r2, r0
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	1ad3      	subs	r3, r2, r3
 8004a32:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a36:	d828      	bhi.n	8004a8a <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	f003 0320 	and.w	r3, r3, #32
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d0eb      	beq.n	8004a1a <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8004a42:	f107 0308 	add.w	r3, r7, #8
 8004a46:	461a      	mov	r2, r3
 8004a48:	2110      	movs	r1, #16
 8004a4a:	4821      	ldr	r0, [pc, #132]	; (8004ad0 <ethernetif_update_config+0xf4>)
 8004a4c:	f7fd fd2c 	bl	80024a8 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	f003 0304 	and.w	r3, r3, #4
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d004      	beq.n	8004a64 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8004a5a:	4b1d      	ldr	r3, [pc, #116]	; (8004ad0 <ethernetif_update_config+0xf4>)
 8004a5c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a60:	60da      	str	r2, [r3, #12]
 8004a62:	e002      	b.n	8004a6a <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8004a64:	4b1a      	ldr	r3, [pc, #104]	; (8004ad0 <ethernetif_update_config+0xf4>)
 8004a66:	2200      	movs	r2, #0
 8004a68:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	f003 0302 	and.w	r3, r3, #2
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d003      	beq.n	8004a7c <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8004a74:	4b16      	ldr	r3, [pc, #88]	; (8004ad0 <ethernetif_update_config+0xf4>)
 8004a76:	2200      	movs	r2, #0
 8004a78:	609a      	str	r2, [r3, #8]
 8004a7a:	e016      	b.n	8004aaa <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8004a7c:	4b14      	ldr	r3, [pc, #80]	; (8004ad0 <ethernetif_update_config+0xf4>)
 8004a7e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004a82:	609a      	str	r2, [r3, #8]
 8004a84:	e011      	b.n	8004aaa <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8004a86:	bf00      	nop
 8004a88:	e000      	b.n	8004a8c <ethernetif_update_config+0xb0>
          goto error;
 8004a8a:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8004a8c:	4b10      	ldr	r3, [pc, #64]	; (8004ad0 <ethernetif_update_config+0xf4>)
 8004a8e:	68db      	ldr	r3, [r3, #12]
 8004a90:	08db      	lsrs	r3, r3, #3
 8004a92:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8004a94:	4b0e      	ldr	r3, [pc, #56]	; (8004ad0 <ethernetif_update_config+0xf4>)
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	085b      	lsrs	r3, r3, #1
 8004a9a:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	b29b      	uxth	r3, r3
 8004aa0:	461a      	mov	r2, r3
 8004aa2:	2100      	movs	r1, #0
 8004aa4:	480a      	ldr	r0, [pc, #40]	; (8004ad0 <ethernetif_update_config+0xf4>)
 8004aa6:	f7fd fd67 	bl	8002578 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8004aaa:	2100      	movs	r1, #0
 8004aac:	4808      	ldr	r0, [pc, #32]	; (8004ad0 <ethernetif_update_config+0xf4>)
 8004aae:	f7fd fe27 	bl	8002700 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8004ab2:	4807      	ldr	r0, [pc, #28]	; (8004ad0 <ethernetif_update_config+0xf4>)
 8004ab4:	f7fd fdc6 	bl	8002644 <HAL_ETH_Start>
 8004ab8:	e002      	b.n	8004ac0 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8004aba:	4805      	ldr	r0, [pc, #20]	; (8004ad0 <ethernetif_update_config+0xf4>)
 8004abc:	f7fd fdf1 	bl	80026a2 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8004ac0:	6878      	ldr	r0, [r7, #4]
 8004ac2:	f000 f807 	bl	8004ad4 <ethernetif_notify_conn_changed>
}
 8004ac6:	bf00      	nop
 8004ac8:	3710      	adds	r7, #16
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}
 8004ace:	bf00      	nop
 8004ad0:	200025c4 	.word	0x200025c4

08004ad4 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b083      	sub	sp, #12
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8004adc:	bf00      	nop
 8004ade:	370c      	adds	r7, #12
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae6:	4770      	bx	lr

08004ae8 <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b084      	sub	sp, #16
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
 8004af0:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d002      	beq.n	8004afe <fs_open+0x16>
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d102      	bne.n	8004b04 <fs_open+0x1c>
    return ERR_ARG;
 8004afe:	f06f 030f 	mvn.w	r3, #15
 8004b02:	e028      	b.n	8004b56 <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 8004b04:	4b16      	ldr	r3, [pc, #88]	; (8004b60 <fs_open+0x78>)
 8004b06:	60fb      	str	r3, [r7, #12]
 8004b08:	e020      	b.n	8004b4c <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	4619      	mov	r1, r3
 8004b10:	6838      	ldr	r0, [r7, #0]
 8004b12:	f7fb fb5d 	bl	80001d0 <strcmp>
 8004b16:	4603      	mov	r3, r0
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d114      	bne.n	8004b46 <fs_open+0x5e>
      file->data = (const char *)f->data;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	689a      	ldr	r2, [r3, #8]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	68da      	ldr	r2, [r3, #12]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	68da      	ldr	r2, [r3, #12]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2200      	movs	r2, #0
 8004b38:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	7c1a      	ldrb	r2, [r3, #16]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 8004b42:	2300      	movs	r3, #0
 8004b44:	e007      	b.n	8004b56 <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	60fb      	str	r3, [r7, #12]
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d1db      	bne.n	8004b0a <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 8004b52:	f06f 0305 	mvn.w	r3, #5
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	3710      	adds	r7, #16
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}
 8004b5e:	bf00      	nop
 8004b60:	08017be0 	.word	0x08017be0

08004b64 <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b083      	sub	sp, #12
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 8004b6c:	bf00      	nop
 8004b6e:	370c      	adds	r7, #12
 8004b70:	46bd      	mov	sp, r7
 8004b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b76:	4770      	bx	lr

08004b78 <fs_bytes_left>:
}
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b083      	sub	sp, #12
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  return file->len - file->index;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	685a      	ldr	r2, [r3, #4]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	1ad3      	subs	r3, r2, r3
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	370c      	adds	r7, #12
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b94:	4770      	bx	lr

08004b96 <http_ssi_state_alloc>:

#if LWIP_HTTPD_SSI
/** Allocate as struct http_ssi_state. */
static struct http_ssi_state *
http_ssi_state_alloc(void)
{
 8004b96:	b580      	push	{r7, lr}
 8004b98:	b082      	sub	sp, #8
 8004b9a:	af00      	add	r7, sp, #0
  struct http_ssi_state *ret = HTTP_ALLOC_SSI_STATE();
 8004b9c:	20e0      	movs	r0, #224	; 0xe0
 8004b9e:	f002 fac3 	bl	8007128 <mem_malloc>
 8004ba2:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(1);
    ret = HTTP_ALLOC_SSI_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d004      	beq.n	8004bb4 <http_ssi_state_alloc+0x1e>
    memset(ret, 0, sizeof(struct http_ssi_state));
 8004baa:	22e0      	movs	r2, #224	; 0xe0
 8004bac:	2100      	movs	r1, #0
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f00c fb9c 	bl	80112ec <memset>
  }
  return ret;
 8004bb4:	687b      	ldr	r3, [r7, #4]
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	3708      	adds	r7, #8
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}

08004bbe <http_ssi_state_free>:

/** Free a struct http_ssi_state. */
static void
http_ssi_state_free(struct http_ssi_state *ssi)
{
 8004bbe:	b580      	push	{r7, lr}
 8004bc0:	b082      	sub	sp, #8
 8004bc2:	af00      	add	r7, sp, #0
 8004bc4:	6078      	str	r0, [r7, #4]
  if (ssi != NULL) {
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d002      	beq.n	8004bd2 <http_ssi_state_free+0x14>
    HTTP_FREE_SSI_STATE(ssi);
 8004bcc:	6878      	ldr	r0, [r7, #4]
 8004bce:	f002 f945 	bl	8006e5c <mem_free>
  }
}
 8004bd2:	bf00      	nop
 8004bd4:	3708      	adds	r7, #8
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}

08004bda <http_state_init>:

/** Initialize a struct http_state.
 */
static void
http_state_init(struct http_state *hs)
{
 8004bda:	b580      	push	{r7, lr}
 8004bdc:	b082      	sub	sp, #8
 8004bde:	af00      	add	r7, sp, #0
 8004be0:	6078      	str	r0, [r7, #4]
  /* Initialize the structure. */
  memset(hs, 0, sizeof(struct http_state));
 8004be2:	22d8      	movs	r2, #216	; 0xd8
 8004be4:	2100      	movs	r1, #0
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	f00c fb80 	bl	80112ec <memset>
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Indicate that the headers are not yet valid */
  hs->hdr_index = NUM_FILE_HDR_STRINGS;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2205      	movs	r2, #5
 8004bf0:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */
}
 8004bf4:	bf00      	nop
 8004bf6:	3708      	adds	r7, #8
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}

08004bfc <http_state_alloc>:

/** Allocate a struct http_state. */
static struct http_state *
http_state_alloc(void)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b082      	sub	sp, #8
 8004c00:	af00      	add	r7, sp, #0
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 8004c02:	20d8      	movs	r0, #216	; 0xd8
 8004c04:	f002 fa90 	bl	8007128 <mem_malloc>
 8004c08:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(0);
    ret = HTTP_ALLOC_HTTP_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d002      	beq.n	8004c16 <http_state_alloc+0x1a>
    http_state_init(ret);
 8004c10:	6878      	ldr	r0, [r7, #4]
 8004c12:	f7ff ffe2 	bl	8004bda <http_state_init>
    http_add_connection(ret);
  }
  return ret;
 8004c16:	687b      	ldr	r3, [r7, #4]
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	3708      	adds	r7, #8
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}

08004c20 <http_state_eof>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_eof(struct http_state *hs)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b082      	sub	sp, #8
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  if (hs->handle) {
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	695b      	ldr	r3, [r3, #20]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d007      	beq.n	8004c40 <http_state_eof+0x20>
    u32_t ms_needed = sys_now() - hs->time_started;
    u32_t needed = LWIP_MAX(1, (ms_needed / 100));
    LWIP_DEBUGF(HTTPD_DEBUG_TIMING, ("httpd: needed %"U32_F" ms to send file of %d bytes -> %"U32_F" bytes/sec\n",
                                     ms_needed, hs->handle->len, ((((u32_t)hs->handle->len) * 10) / needed)));
#endif /* LWIP_HTTPD_TIMING */
    fs_close(hs->handle);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	695b      	ldr	r3, [r3, #20]
 8004c34:	4618      	mov	r0, r3
 8004c36:	f7ff ff95 	bl	8004b64 <fs_close>
    hs->handle = NULL;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	615a      	str	r2, [r3, #20]
    mem_free(hs->buf);
    hs->buf = NULL;
  }
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */
#if LWIP_HTTPD_SSI
  if (hs->ssi) {
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d007      	beq.n	8004c58 <http_state_eof+0x38>
    http_ssi_state_free(hs->ssi);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	f7ff ffb6 	bl	8004bbe <http_ssi_state_free>
    hs->ssi = NULL;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2200      	movs	r2, #0
 8004c56:	62da      	str	r2, [r3, #44]	; 0x2c
  }
#endif /* LWIP_HTTPD_SSI */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  if (hs->req) {
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6a1b      	ldr	r3, [r3, #32]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d007      	beq.n	8004c70 <http_state_eof+0x50>
    pbuf_free(hs->req);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6a1b      	ldr	r3, [r3, #32]
 8004c64:	4618      	mov	r0, r3
 8004c66:	f003 fa2b 	bl	80080c0 <pbuf_free>
    hs->req = NULL;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	621a      	str	r2, [r3, #32]
  }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 8004c70:	bf00      	nop
 8004c72:	3708      	adds	r7, #8
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}

08004c78 <http_state_free>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_free(struct http_state *hs)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b082      	sub	sp, #8
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  if (hs != NULL) {
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d005      	beq.n	8004c92 <http_state_free+0x1a>
    http_state_eof(hs);
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f7ff ffca 	bl	8004c20 <http_state_eof>
    http_remove_connection(hs);
    HTTP_FREE_HTTP_STATE(hs);
 8004c8c:	6878      	ldr	r0, [r7, #4]
 8004c8e:	f002 f8e5 	bl	8006e5c <mem_free>
  }
}
 8004c92:	bf00      	nop
 8004c94:	3708      	adds	r7, #8
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}
	...

08004c9c <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct altcp_pcb *pcb, const void *ptr, u16_t *length, u8_t apiflags)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b086      	sub	sp, #24
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	60f8      	str	r0, [r7, #12]
 8004ca4:	60b9      	str	r1, [r7, #8]
 8004ca6:	607a      	str	r2, [r7, #4]
 8004ca8:	70fb      	strb	r3, [r7, #3]
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d106      	bne.n	8004cbe <http_write+0x22>
 8004cb0:	4b2c      	ldr	r3, [pc, #176]	; (8004d64 <http_write+0xc8>)
 8004cb2:	f240 2219 	movw	r2, #537	; 0x219
 8004cb6:	492c      	ldr	r1, [pc, #176]	; (8004d68 <http_write+0xcc>)
 8004cb8:	482c      	ldr	r0, [pc, #176]	; (8004d6c <http_write+0xd0>)
 8004cba:	f00c fbc9 	bl	8011450 <iprintf>
  len = *length;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	881b      	ldrh	r3, [r3, #0]
 8004cc2:	82fb      	strh	r3, [r7, #22]
  if (len == 0) {
 8004cc4:	8afb      	ldrh	r3, [r7, #22]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d101      	bne.n	8004cce <http_write+0x32>
    return ERR_OK;
 8004cca:	2300      	movs	r3, #0
 8004ccc:	e045      	b.n	8004d5a <http_write+0xbe>
  }
  /* We cannot send more data than space available in the send buffer. */
  max_len = altcp_sndbuf(pcb);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8004cd4:	82bb      	strh	r3, [r7, #20]
  if (max_len < len) {
 8004cd6:	8aba      	ldrh	r2, [r7, #20]
 8004cd8:	8afb      	ldrh	r3, [r7, #22]
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	d201      	bcs.n	8004ce2 <http_write+0x46>
    len = max_len;
 8004cde:	8abb      	ldrh	r3, [r7, #20]
 8004ce0:	82fb      	strh	r3, [r7, #22]
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004ce6:	005b      	lsls	r3, r3, #1
 8004ce8:	82bb      	strh	r3, [r7, #20]
  if (len > max_len) {
 8004cea:	8afa      	ldrh	r2, [r7, #22]
 8004cec:	8abb      	ldrh	r3, [r7, #20]
 8004cee:	429a      	cmp	r2, r3
 8004cf0:	d901      	bls.n	8004cf6 <http_write+0x5a>
    len = max_len;
 8004cf2:	8abb      	ldrh	r3, [r7, #20]
 8004cf4:	82fb      	strh	r3, [r7, #22]
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying to send %d bytes\n", len));
    err = altcp_write(pcb, ptr, len, apiflags);
 8004cf6:	78fb      	ldrb	r3, [r7, #3]
 8004cf8:	8afa      	ldrh	r2, [r7, #22]
 8004cfa:	68b9      	ldr	r1, [r7, #8]
 8004cfc:	68f8      	ldr	r0, [r7, #12]
 8004cfe:	f007 ff63 	bl	800cbc8 <tcp_write>
 8004d02:	4603      	mov	r3, r0
 8004d04:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_MEM) {
 8004d06:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004d0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d0e:	d10f      	bne.n	8004d30 <http_write+0x94>
      if ((altcp_sndbuf(pcb) == 0) ||
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d004      	beq.n	8004d24 <http_write+0x88>
          (altcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      if ((altcp_sndbuf(pcb) == 0) ||
 8004d20:	2b08      	cmp	r3, #8
 8004d22:	d902      	bls.n	8004d2a <http_write+0x8e>
        /* no need to try smaller sizes */
        len = 1;
 8004d24:	2301      	movs	r3, #1
 8004d26:	82fb      	strh	r3, [r7, #22]
 8004d28:	e002      	b.n	8004d30 <http_write+0x94>
      } else {
        len /= 2;
 8004d2a:	8afb      	ldrh	r3, [r7, #22]
 8004d2c:	085b      	lsrs	r3, r3, #1
 8004d2e:	82fb      	strh	r3, [r7, #22]
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE,
                  ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));
 8004d30:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004d34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d38:	d102      	bne.n	8004d40 <http_write+0xa4>
 8004d3a:	8afb      	ldrh	r3, [r7, #22]
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	d8da      	bhi.n	8004cf6 <http_write+0x5a>

  if (err == ERR_OK) {
 8004d40:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d103      	bne.n	8004d50 <http_write+0xb4>
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	8afa      	ldrh	r2, [r7, #22]
 8004d4c:	801a      	strh	r2, [r3, #0]
 8004d4e:	e002      	b.n	8004d56 <http_write+0xba>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2200      	movs	r2, #0
 8004d54:	801a      	strh	r2, [r3, #0]
     when all data has been enqueued but the connection stays open for the next
     request */
  altcp_nagle_enable(pcb);
#endif

  return err;
 8004d56:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	3718      	adds	r7, #24
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}
 8004d62:	bf00      	nop
 8004d64:	080132fc 	.word	0x080132fc
 8004d68:	08013334 	.word	0x08013334
 8004d6c:	08013344 	.word	0x08013344

08004d70 <http_close_or_abort_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_or_abort_conn(struct altcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b086      	sub	sp, #24
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	60f8      	str	r0, [r7, #12]
 8004d78:	60b9      	str	r1, [r7, #8]
 8004d7a:	4613      	mov	r3, r2
 8004d7c:	71fb      	strb	r3, [r7, #7]
  err_t err;
  LWIP_DEBUGF(HTTPD_DEBUG, ("Closing connection %p\n", (void *)pcb));

#if LWIP_HTTPD_SUPPORT_POST
  if (hs != NULL) {
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d00c      	beq.n	8004d9e <http_close_or_abort_conn+0x2e>
    if ((hs->post_content_len_left != 0)
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d007      	beq.n	8004d9e <http_close_or_abort_conn+0x2e>
#if LWIP_HTTPD_POST_MANUAL_WND
        || ((hs->no_auto_wnd != 0) && (hs->unrecved_bytes != 0))
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
       ) {
      /* make sure the post code knows that the connection is closed */
      http_uri_buf[0] = 0;
 8004d8e:	4b1f      	ldr	r3, [pc, #124]	; (8004e0c <http_close_or_abort_conn+0x9c>)
 8004d90:	2200      	movs	r2, #0
 8004d92:	701a      	strb	r2, [r3, #0]
      httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 8004d94:	223f      	movs	r2, #63	; 0x3f
 8004d96:	491d      	ldr	r1, [pc, #116]	; (8004e0c <http_close_or_abort_conn+0x9c>)
 8004d98:	68b8      	ldr	r0, [r7, #8]
 8004d9a:	f7fb feeb 	bl	8000b74 <httpd_post_finished>
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_POST*/


  altcp_arg(pcb, NULL);
 8004d9e:	2100      	movs	r1, #0
 8004da0:	68f8      	ldr	r0, [r7, #12]
 8004da2:	f004 ffd3 	bl	8009d4c <tcp_arg>
  altcp_recv(pcb, NULL);
 8004da6:	2100      	movs	r1, #0
 8004da8:	68f8      	ldr	r0, [r7, #12]
 8004daa:	f004 ffe1 	bl	8009d70 <tcp_recv>
  altcp_err(pcb, NULL);
 8004dae:	2100      	movs	r1, #0
 8004db0:	68f8      	ldr	r0, [r7, #12]
 8004db2:	f005 f821 	bl	8009df8 <tcp_err>
  altcp_poll(pcb, NULL, 0);
 8004db6:	2200      	movs	r2, #0
 8004db8:	2100      	movs	r1, #0
 8004dba:	68f8      	ldr	r0, [r7, #12]
 8004dbc:	f005 f856 	bl	8009e6c <tcp_poll>
  altcp_sent(pcb, NULL);
 8004dc0:	2100      	movs	r1, #0
 8004dc2:	68f8      	ldr	r0, [r7, #12]
 8004dc4:	f004 fff6 	bl	8009db4 <tcp_sent>
  if (hs != NULL) {
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d002      	beq.n	8004dd4 <http_close_or_abort_conn+0x64>
    http_state_free(hs);
 8004dce:	68b8      	ldr	r0, [r7, #8]
 8004dd0:	f7ff ff52 	bl	8004c78 <http_state_free>
  }

  if (abort_conn) {
 8004dd4:	79fb      	ldrb	r3, [r7, #7]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d004      	beq.n	8004de4 <http_close_or_abort_conn+0x74>
    altcp_abort(pcb);
 8004dda:	68f8      	ldr	r0, [r7, #12]
 8004ddc:	f003 fef8 	bl	8008bd0 <tcp_abort>
    return ERR_OK;
 8004de0:	2300      	movs	r3, #0
 8004de2:	e00f      	b.n	8004e04 <http_close_or_abort_conn+0x94>
  }
  err = altcp_close(pcb);
 8004de4:	68f8      	ldr	r0, [r7, #12]
 8004de6:	f003 fe09 	bl	80089fc <tcp_close>
 8004dea:	4603      	mov	r3, r0
 8004dec:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 8004dee:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d004      	beq.n	8004e00 <http_close_or_abort_conn+0x90>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error %d closing %p\n", err, (void *)pcb));
    /* error closing, try again later in poll */
    altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 8004df6:	2204      	movs	r2, #4
 8004df8:	4905      	ldr	r1, [pc, #20]	; (8004e10 <http_close_or_abort_conn+0xa0>)
 8004dfa:	68f8      	ldr	r0, [r7, #12]
 8004dfc:	f005 f836 	bl	8009e6c <tcp_poll>
  }
  return err;
 8004e00:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	3718      	adds	r7, #24
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd80      	pop	{r7, pc}
 8004e0c:	200004e8 	.word	0x200004e8
 8004e10:	080065b3 	.word	0x080065b3

08004e14 <http_close_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_conn(struct altcp_pcb *pcb, struct http_state *hs)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b082      	sub	sp, #8
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
 8004e1c:	6039      	str	r1, [r7, #0]
  return http_close_or_abort_conn(pcb, hs, 0);
 8004e1e:	2200      	movs	r2, #0
 8004e20:	6839      	ldr	r1, [r7, #0]
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f7ff ffa4 	bl	8004d70 <http_close_or_abort_conn>
 8004e28:	4603      	mov	r3, r0
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	3708      	adds	r7, #8
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}

08004e32 <http_eof>:
/** End of file: either close the connection (Connection: close) or
 * close the file (Connection: keep-alive)
 */
static void
http_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 8004e32:	b580      	push	{r7, lr}
 8004e34:	b082      	sub	sp, #8
 8004e36:	af00      	add	r7, sp, #0
 8004e38:	6078      	str	r0, [r7, #4]
 8004e3a:	6039      	str	r1, [r7, #0]
    /* ensure nagle doesn't interfere with sending all data as fast as possible: */
    altcp_nagle_disable(pcb);
  } else
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  {
    http_close_conn(pcb, hs);
 8004e3c:	6839      	ldr	r1, [r7, #0]
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	f7ff ffe8 	bl	8004e14 <http_close_conn>
  }
}
 8004e44:	bf00      	nop
 8004e46:	3708      	adds	r7, #8
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}

08004e4c <extract_uri_parameters>:
 * @param params pointer to the NULL-terminated parameter string from the URI
 * @return number of parameters extracted
 */
static int
extract_uri_parameters(struct http_state *hs, char *params)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b086      	sub	sp, #24
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
 8004e54:	6039      	str	r1, [r7, #0]
  int loop;

  LWIP_UNUSED_ARG(hs);

  /* If we have no parameters at all, return immediately. */
  if (!params || (params[0] == '\0')) {
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d003      	beq.n	8004e64 <extract_uri_parameters+0x18>
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	781b      	ldrb	r3, [r3, #0]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d101      	bne.n	8004e68 <extract_uri_parameters+0x1c>
    return (0);
 8004e64:	2300      	movs	r3, #0
 8004e66:	e04b      	b.n	8004f00 <extract_uri_parameters+0xb4>
  }

  /* Get a pointer to our first parameter */
  pair = params;
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	617b      	str	r3, [r7, #20]

  /* Parse up to LWIP_HTTPD_MAX_CGI_PARAMETERS from the passed string and ignore the
   * remainder (if any) */
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	613b      	str	r3, [r7, #16]
 8004e70:	e03f      	b.n	8004ef2 <extract_uri_parameters+0xa6>

    /* Save the name of the parameter */
    http_cgi_params[loop] = pair;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	693a      	ldr	r2, [r7, #16]
 8004e76:	320c      	adds	r2, #12
 8004e78:	6979      	ldr	r1, [r7, #20]
 8004e7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Remember the start of this name=value pair */
    equals = pair;
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	60fb      	str	r3, [r7, #12]

    /* Find the start of the next name=value pair and replace the delimiter
     * with a 0 to terminate the previous pair string. */
    pair = strchr(pair, '&');
 8004e82:	2126      	movs	r1, #38	; 0x26
 8004e84:	6978      	ldr	r0, [r7, #20]
 8004e86:	f00c fbf0 	bl	801166a <strchr>
 8004e8a:	6178      	str	r0, [r7, #20]
    if (pair) {
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d006      	beq.n	8004ea0 <extract_uri_parameters+0x54>
      *pair = '\0';
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	2200      	movs	r2, #0
 8004e96:	701a      	strb	r2, [r3, #0]
      pair++;
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	3301      	adds	r3, #1
 8004e9c:	617b      	str	r3, [r7, #20]
 8004e9e:	e00c      	b.n	8004eba <extract_uri_parameters+0x6e>
    } else {
      /* We didn't find a new parameter so find the end of the URI and
       * replace the space with a '\0' */
      pair = strchr(equals, ' ');
 8004ea0:	2120      	movs	r1, #32
 8004ea2:	68f8      	ldr	r0, [r7, #12]
 8004ea4:	f00c fbe1 	bl	801166a <strchr>
 8004ea8:	6178      	str	r0, [r7, #20]
      if (pair) {
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d002      	beq.n	8004eb6 <extract_uri_parameters+0x6a>
        *pair = '\0';
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	701a      	strb	r2, [r3, #0]
      }

      /* Revert to NULL so that we exit the loop as expected. */
      pair = NULL;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	617b      	str	r3, [r7, #20]
    }

    /* Now find the '=' in the previous pair, replace it with '\0' and save
     * the parameter value string. */
    equals = strchr(equals, '=');
 8004eba:	213d      	movs	r1, #61	; 0x3d
 8004ebc:	68f8      	ldr	r0, [r7, #12]
 8004ebe:	f00c fbd4 	bl	801166a <strchr>
 8004ec2:	60f8      	str	r0, [r7, #12]
    if (equals) {
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d00a      	beq.n	8004ee0 <extract_uri_parameters+0x94>
      *equals = '\0';
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	701a      	strb	r2, [r3, #0]
      http_cgi_param_vals[loop] = equals + 1;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	1c59      	adds	r1, r3, #1
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	693a      	ldr	r2, [r7, #16]
 8004ed8:	321c      	adds	r2, #28
 8004eda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8004ede:	e005      	b.n	8004eec <extract_uri_parameters+0xa0>
    } else {
      http_cgi_param_vals[loop] = NULL;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	693a      	ldr	r2, [r7, #16]
 8004ee4:	321c      	adds	r2, #28
 8004ee6:	2100      	movs	r1, #0
 8004ee8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	3301      	adds	r3, #1
 8004ef0:	613b      	str	r3, [r7, #16]
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	2b0f      	cmp	r3, #15
 8004ef6:	dc02      	bgt.n	8004efe <extract_uri_parameters+0xb2>
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d1b9      	bne.n	8004e72 <extract_uri_parameters+0x26>
    }
  }

  return loop;
 8004efe:	693b      	ldr	r3, [r7, #16]
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	3718      	adds	r7, #24
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}

08004f08 <get_tag_insert>:
 *
 * @param hs http connection state
 */
static void
get_tag_insert(struct http_state *hs)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b086      	sub	sp, #24
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  struct http_ssi_state *ssi;
#if LWIP_HTTPD_SSI_MULTIPART
  u16_t current_tag_part;
#endif /* LWIP_HTTPD_SSI_MULTIPART */

  LWIP_ASSERT("hs != NULL", hs != NULL);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d106      	bne.n	8004f24 <get_tag_insert+0x1c>
 8004f16:	4b51      	ldr	r3, [pc, #324]	; (800505c <get_tag_insert+0x154>)
 8004f18:	f44f 7241 	mov.w	r2, #772	; 0x304
 8004f1c:	4950      	ldr	r1, [pc, #320]	; (8005060 <get_tag_insert+0x158>)
 8004f1e:	4851      	ldr	r0, [pc, #324]	; (8005064 <get_tag_insert+0x15c>)
 8004f20:	f00c fa96 	bl	8011450 <iprintf>
  ssi = hs->ssi;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f28:	613b      	str	r3, [r7, #16]
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d106      	bne.n	8004f3e <get_tag_insert+0x36>
 8004f30:	4b4a      	ldr	r3, [pc, #296]	; (800505c <get_tag_insert+0x154>)
 8004f32:	f240 3206 	movw	r2, #774	; 0x306
 8004f36:	494c      	ldr	r1, [pc, #304]	; (8005068 <get_tag_insert+0x160>)
 8004f38:	484a      	ldr	r0, [pc, #296]	; (8005064 <get_tag_insert+0x15c>)
 8004f3a:	f00c fa89 	bl	8011450 <iprintf>
#endif /* LWIP_HTTPD_SSI_MULTIPART */
#if LWIP_HTTPD_SSI_RAW
  tag = ssi->tag_name;
#endif

  if (httpd_ssi_handler
 8004f3e:	4b4b      	ldr	r3, [pc, #300]	; (800506c <get_tag_insert+0x164>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d02e      	beq.n	8004fa4 <get_tag_insert+0x9c>
#if !LWIP_HTTPD_SSI_RAW
      && httpd_tags && httpd_num_tags
 8004f46:	4b4a      	ldr	r3, [pc, #296]	; (8005070 <get_tag_insert+0x168>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d02a      	beq.n	8004fa4 <get_tag_insert+0x9c>
 8004f4e:	4b49      	ldr	r3, [pc, #292]	; (8005074 <get_tag_insert+0x16c>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d026      	beq.n	8004fa4 <get_tag_insert+0x9c>

    /* Find this tag in the list we have been provided. */
#if LWIP_HTTPD_SSI_RAW
    {
#else /* LWIP_HTTPD_SSI_RAW */
    for (tag = 0; tag < httpd_num_tags; tag++) {
 8004f56:	2300      	movs	r3, #0
 8004f58:	617b      	str	r3, [r7, #20]
 8004f5a:	e01e      	b.n	8004f9a <get_tag_insert+0x92>
      if (strcmp(ssi->tag_name, httpd_tags[tag]) == 0)
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	f103 0012 	add.w	r0, r3, #18
 8004f62:	4b43      	ldr	r3, [pc, #268]	; (8005070 <get_tag_insert+0x168>)
 8004f64:	681a      	ldr	r2, [r3, #0]
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	009b      	lsls	r3, r3, #2
 8004f6a:	4413      	add	r3, r2
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4619      	mov	r1, r3
 8004f70:	f7fb f92e 	bl	80001d0 <strcmp>
 8004f74:	4603      	mov	r3, r0
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d10c      	bne.n	8004f94 <get_tag_insert+0x8c>
#endif /* LWIP_HTTPD_SSI_RAW */
      {
        ssi->tag_insert_len = httpd_ssi_handler(tag, ssi->tag_insert,
 8004f7a:	4b3c      	ldr	r3, [pc, #240]	; (800506c <get_tag_insert+0x164>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	693a      	ldr	r2, [r7, #16]
 8004f80:	f102 011b 	add.w	r1, r2, #27
 8004f84:	22c0      	movs	r2, #192	; 0xc0
 8004f86:	6978      	ldr	r0, [r7, #20]
 8004f88:	4798      	blx	r3
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	461a      	mov	r2, r3
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	81da      	strh	r2, [r3, #14]
                                             );
#if LWIP_HTTPD_SSI_RAW
        if (ssi->tag_insert_len != HTTPD_SSI_TAG_UNKNOWN)
#endif /* LWIP_HTTPD_SSI_RAW */
        {
          return;
 8004f92:	e060      	b.n	8005056 <get_tag_insert+0x14e>
    for (tag = 0; tag < httpd_num_tags; tag++) {
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	3301      	adds	r3, #1
 8004f98:	617b      	str	r3, [r7, #20]
 8004f9a:	4b36      	ldr	r3, [pc, #216]	; (8005074 <get_tag_insert+0x16c>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	697a      	ldr	r2, [r7, #20]
 8004fa0:	429a      	cmp	r2, r3
 8004fa2:	dbdb      	blt.n	8004f5c <get_tag_insert+0x54>
   * marker. */
#define UNKNOWN_TAG1_TEXT "<b>***UNKNOWN TAG "
#define UNKNOWN_TAG1_LEN  18
#define UNKNOWN_TAG2_TEXT "***</b>"
#define UNKNOWN_TAG2_LEN  7
  len = LWIP_MIN(sizeof(ssi->tag_name), LWIP_MIN(strlen(ssi->tag_name),
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	3312      	adds	r3, #18
 8004fa8:	4618      	mov	r0, r3
 8004faa:	f7fb f91b 	bl	80001e4 <strlen>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	2ba6      	cmp	r3, #166	; 0xa6
 8004fb2:	d818      	bhi.n	8004fe6 <get_tag_insert+0xde>
 8004fb4:	693b      	ldr	r3, [r7, #16]
 8004fb6:	3312      	adds	r3, #18
 8004fb8:	4618      	mov	r0, r3
 8004fba:	f7fb f913 	bl	80001e4 <strlen>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	2b09      	cmp	r3, #9
 8004fc2:	d810      	bhi.n	8004fe6 <get_tag_insert+0xde>
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	3312      	adds	r3, #18
 8004fc8:	4618      	mov	r0, r3
 8004fca:	f7fb f90b 	bl	80001e4 <strlen>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	2ba6      	cmp	r3, #166	; 0xa6
 8004fd2:	d806      	bhi.n	8004fe2 <get_tag_insert+0xda>
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	3312      	adds	r3, #18
 8004fd8:	4618      	mov	r0, r3
 8004fda:	f7fb f903 	bl	80001e4 <strlen>
 8004fde:	4603      	mov	r3, r0
 8004fe0:	e002      	b.n	8004fe8 <get_tag_insert+0xe0>
 8004fe2:	23a7      	movs	r3, #167	; 0xa7
 8004fe4:	e000      	b.n	8004fe8 <get_tag_insert+0xe0>
 8004fe6:	2309      	movs	r3, #9
 8004fe8:	60fb      	str	r3, [r7, #12]
                 LWIP_HTTPD_MAX_TAG_INSERT_LEN - (UNKNOWN_TAG1_LEN + UNKNOWN_TAG2_LEN)));
  MEMCPY(ssi->tag_insert, UNKNOWN_TAG1_TEXT, UNKNOWN_TAG1_LEN);
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	331b      	adds	r3, #27
 8004fee:	2212      	movs	r2, #18
 8004ff0:	4921      	ldr	r1, [pc, #132]	; (8005078 <get_tag_insert+0x170>)
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f00c f952 	bl	801129c <memcpy>
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN], ssi->tag_name, len);
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	f103 002d 	add.w	r0, r3, #45	; 0x2d
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	3312      	adds	r3, #18
 8005002:	68fa      	ldr	r2, [r7, #12]
 8005004:	4619      	mov	r1, r3
 8005006:	f00c f949 	bl	801129c <memcpy>
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN + len], UNKNOWN_TAG2_TEXT, UNKNOWN_TAG2_LEN);
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	3312      	adds	r3, #18
 800500e:	3318      	adds	r3, #24
 8005010:	693a      	ldr	r2, [r7, #16]
 8005012:	4413      	add	r3, r2
 8005014:	3303      	adds	r3, #3
 8005016:	2207      	movs	r2, #7
 8005018:	4918      	ldr	r1, [pc, #96]	; (800507c <get_tag_insert+0x174>)
 800501a:	4618      	mov	r0, r3
 800501c:	f00c f93e 	bl	801129c <memcpy>
  ssi->tag_insert[UNKNOWN_TAG1_LEN + len + UNKNOWN_TAG2_LEN] = 0;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	3319      	adds	r3, #25
 8005024:	693a      	ldr	r2, [r7, #16]
 8005026:	4413      	add	r3, r2
 8005028:	2200      	movs	r2, #0
 800502a:	76da      	strb	r2, [r3, #27]

  len = strlen(ssi->tag_insert);
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	331b      	adds	r3, #27
 8005030:	4618      	mov	r0, r3
 8005032:	f7fb f8d7 	bl	80001e4 <strlen>
 8005036:	60f8      	str	r0, [r7, #12]
  LWIP_ASSERT("len <= 0xffff", len <= 0xffff);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800503e:	d306      	bcc.n	800504e <get_tag_insert+0x146>
 8005040:	4b06      	ldr	r3, [pc, #24]	; (800505c <get_tag_insert+0x154>)
 8005042:	f240 323f 	movw	r2, #831	; 0x33f
 8005046:	490e      	ldr	r1, [pc, #56]	; (8005080 <get_tag_insert+0x178>)
 8005048:	4806      	ldr	r0, [pc, #24]	; (8005064 <get_tag_insert+0x15c>)
 800504a:	f00c fa01 	bl	8011450 <iprintf>
  ssi->tag_insert_len = (u16_t)len;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	b29a      	uxth	r2, r3
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	81da      	strh	r2, [r3, #14]
}
 8005056:	3718      	adds	r7, #24
 8005058:	46bd      	mov	sp, r7
 800505a:	bd80      	pop	{r7, pc}
 800505c:	080132fc 	.word	0x080132fc
 8005060:	0801336c 	.word	0x0801336c
 8005064:	08013344 	.word	0x08013344
 8005068:	08013378 	.word	0x08013378
 800506c:	20000528 	.word	0x20000528
 8005070:	20000530 	.word	0x20000530
 8005074:	2000052c 	.word	0x2000052c
 8005078:	08013384 	.word	0x08013384
 800507c:	08013398 	.word	0x08013398
 8005080:	080133a0 	.word	0x080133a0

08005084 <get_http_headers>:
 * Generate the relevant HTTP headers for the given filename and write
 * them into the supplied buffer.
 */
static void
get_http_headers(struct http_state *hs, const char *uri)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b086      	sub	sp, #24
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
 800508c:	6039      	str	r1, [r7, #0]
  char *ext;
  char *vars;

  /* In all cases, the second header we send is the server identification
     so set it here. */
  hs->hdrs[HDR_STRINGS_IDX_SERVER_NAME] = g_psHTTPHeaderStrings[HTTP_HDR_SERVER];
 800508e:	4a55      	ldr	r2, [pc, #340]	; (80051e4 <get_http_headers+0x160>)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_KEEPALIVE] = NULL;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2200      	movs	r2, #0
 800509a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
  hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_NR] = NULL;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2200      	movs	r2, #0
 80050a2:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc

  /* Is this a normal file or the special case we use to send back the
     default "404: Page not found" response? */
  if (uri == NULL) {
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d110      	bne.n	80050ce <get_http_headers+0x4a>
    hs->hdrs[HDR_STRINGS_IDX_HTTP_STATUS] = g_psHTTPHeaderStrings[HTTP_HDR_NOT_FOUND];
 80050ac:	4a4e      	ldr	r2, [pc, #312]	; (80051e8 <get_http_headers+0x164>)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    if (hs->keepalive) {
      hs->hdrs[HDR_STRINGS_IDX_CONTENT_TYPE] = g_psHTTPHeaderStrings[DEFAULT_404_HTML_PERSISTENT];
    } else
#endif
    {
      hs->hdrs[HDR_STRINGS_IDX_CONTENT_TYPE] = g_psHTTPHeaderStrings[DEFAULT_404_HTML];
 80050b4:	4a4d      	ldr	r2, [pc, #308]	; (80051ec <get_http_headers+0x168>)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    }

    /* Set up to send the first header string. */
    hs->hdr_index = 0;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2200      	movs	r2, #0
 80050c0:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
    hs->hdr_pos = 0;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2200      	movs	r2, #0
 80050c8:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
    return;
 80050cc:	e087      	b.n	80051de <get_http_headers+0x15a>
  }
  /* We are dealing with a particular filename. Look for one other
      special case.  We assume that any filename with "404" in it must be
      indicative of a 404 server error whereas all other files require
      the 200 OK header. */
  if (strstr(uri, "404")) {
 80050ce:	4948      	ldr	r1, [pc, #288]	; (80051f0 <get_http_headers+0x16c>)
 80050d0:	6838      	ldr	r0, [r7, #0]
 80050d2:	f00c fb04 	bl	80116de <strstr>
 80050d6:	4603      	mov	r3, r0
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d004      	beq.n	80050e6 <get_http_headers+0x62>
    hs->hdrs[HDR_STRINGS_IDX_HTTP_STATUS] = g_psHTTPHeaderStrings[HTTP_HDR_NOT_FOUND];
 80050dc:	4a42      	ldr	r2, [pc, #264]	; (80051e8 <get_http_headers+0x164>)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80050e4:	e01b      	b.n	800511e <get_http_headers+0x9a>
  } else if (strstr(uri, "400")) {
 80050e6:	4943      	ldr	r1, [pc, #268]	; (80051f4 <get_http_headers+0x170>)
 80050e8:	6838      	ldr	r0, [r7, #0]
 80050ea:	f00c faf8 	bl	80116de <strstr>
 80050ee:	4603      	mov	r3, r0
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d004      	beq.n	80050fe <get_http_headers+0x7a>
    hs->hdrs[HDR_STRINGS_IDX_HTTP_STATUS] = g_psHTTPHeaderStrings[HTTP_HDR_BAD_REQUEST];
 80050f4:	4a40      	ldr	r2, [pc, #256]	; (80051f8 <get_http_headers+0x174>)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80050fc:	e00f      	b.n	800511e <get_http_headers+0x9a>
  } else if (strstr(uri, "501")) {
 80050fe:	493f      	ldr	r1, [pc, #252]	; (80051fc <get_http_headers+0x178>)
 8005100:	6838      	ldr	r0, [r7, #0]
 8005102:	f00c faec 	bl	80116de <strstr>
 8005106:	4603      	mov	r3, r0
 8005108:	2b00      	cmp	r3, #0
 800510a:	d004      	beq.n	8005116 <get_http_headers+0x92>
    hs->hdrs[HDR_STRINGS_IDX_HTTP_STATUS] = g_psHTTPHeaderStrings[HTTP_HDR_NOT_IMPL];
 800510c:	4a3c      	ldr	r2, [pc, #240]	; (8005200 <get_http_headers+0x17c>)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8005114:	e003      	b.n	800511e <get_http_headers+0x9a>
  } else {
    hs->hdrs[HDR_STRINGS_IDX_HTTP_STATUS] = g_psHTTPHeaderStrings[HTTP_HDR_OK];
 8005116:	4a3b      	ldr	r2, [pc, #236]	; (8005204 <get_http_headers+0x180>)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  }

  /* Determine if the URI has any variables and, if so, temporarily remove
      them. */
  vars = strchr(uri, '?');
 800511e:	213f      	movs	r1, #63	; 0x3f
 8005120:	6838      	ldr	r0, [r7, #0]
 8005122:	f00c faa2 	bl	801166a <strchr>
 8005126:	60b8      	str	r0, [r7, #8]
  if (vars) {
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d002      	beq.n	8005134 <get_http_headers+0xb0>
    *vars = '\0';
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	2200      	movs	r2, #0
 8005132:	701a      	strb	r2, [r3, #0]
  }

  /* Get a pointer to the file extension.  We find this by looking for the
      last occurrence of "." in the filename passed. */
  ext = NULL;
 8005134:	2300      	movs	r3, #0
 8005136:	60fb      	str	r3, [r7, #12]
  tmp = strchr(uri, '.');
 8005138:	212e      	movs	r1, #46	; 0x2e
 800513a:	6838      	ldr	r0, [r7, #0]
 800513c:	f00c fa95 	bl	801166a <strchr>
 8005140:	6138      	str	r0, [r7, #16]
  while (tmp) {
 8005142:	e007      	b.n	8005154 <get_http_headers+0xd0>
    ext = tmp + 1;
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	3301      	adds	r3, #1
 8005148:	60fb      	str	r3, [r7, #12]
    tmp = strchr(ext, '.');
 800514a:	212e      	movs	r1, #46	; 0x2e
 800514c:	68f8      	ldr	r0, [r7, #12]
 800514e:	f00c fa8c 	bl	801166a <strchr>
 8005152:	6138      	str	r0, [r7, #16]
  while (tmp) {
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d1f4      	bne.n	8005144 <get_http_headers+0xc0>
  }
  if (ext != NULL) {
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d014      	beq.n	800518a <get_http_headers+0x106>
    /* Now determine the content type and add the relevant header for that. */
    for (content_type = 0; content_type < NUM_HTTP_HEADERS; content_type++) {
 8005160:	2300      	movs	r3, #0
 8005162:	617b      	str	r3, [r7, #20]
 8005164:	e00d      	b.n	8005182 <get_http_headers+0xfe>
      /* Have we found a matching extension? */
      if (!lwip_stricmp(g_psHTTPHeaders[content_type].extension, ext)) {
 8005166:	4a28      	ldr	r2, [pc, #160]	; (8005208 <get_http_headers+0x184>)
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800516e:	68f9      	ldr	r1, [r7, #12]
 8005170:	4618      	mov	r0, r3
 8005172:	f001 fc77 	bl	8006a64 <lwip_stricmp>
 8005176:	4603      	mov	r3, r0
 8005178:	2b00      	cmp	r3, #0
 800517a:	d009      	beq.n	8005190 <get_http_headers+0x10c>
    for (content_type = 0; content_type < NUM_HTTP_HEADERS; content_type++) {
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	3301      	adds	r3, #1
 8005180:	617b      	str	r3, [r7, #20]
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	2b13      	cmp	r3, #19
 8005186:	d9ee      	bls.n	8005166 <get_http_headers+0xe2>
 8005188:	e003      	b.n	8005192 <get_http_headers+0x10e>
        break;
      }
    }
  } else {
    content_type = NUM_HTTP_HEADERS;
 800518a:	2314      	movs	r3, #20
 800518c:	617b      	str	r3, [r7, #20]
 800518e:	e000      	b.n	8005192 <get_http_headers+0x10e>
        break;
 8005190:	bf00      	nop
  }

  /* Reinstate the parameter marker if there was one in the original URI. */
  if (vars) {
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d002      	beq.n	800519e <get_http_headers+0x11a>
    *vars = '?';
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	223f      	movs	r2, #63	; 0x3f
 800519c:	701a      	strb	r2, [r3, #0]
    hs->hdr_index = NUM_FILE_HDR_STRINGS;
    return;
  }
#endif /* LWIP_HTTPD_OMIT_HEADER_FOR_EXTENSIONLESS_URI */
  /* Did we find a matching extension? */
  if (content_type < NUM_HTTP_HEADERS) {
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	2b13      	cmp	r3, #19
 80051a2:	d808      	bhi.n	80051b6 <get_http_headers+0x132>
    /* yes, store it */
    hs->hdrs[HDR_STRINGS_IDX_CONTENT_TYPE] = g_psHTTPHeaders[content_type].content_type;
 80051a4:	4a18      	ldr	r2, [pc, #96]	; (8005208 <get_http_headers+0x184>)
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	00db      	lsls	r3, r3, #3
 80051aa:	4413      	add	r3, r2
 80051ac:	685a      	ldr	r2, [r3, #4]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 80051b4:	e00b      	b.n	80051ce <get_http_headers+0x14a>
  } else if (!ext) {
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d104      	bne.n	80051c6 <get_http_headers+0x142>
    /* no, no extension found -> use binary transfer to prevent the browser adding '.txt' on save */
    hs->hdrs[HDR_STRINGS_IDX_CONTENT_TYPE] = HTTP_HDR_APP;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	4a13      	ldr	r2, [pc, #76]	; (800520c <get_http_headers+0x188>)
 80051c0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 80051c4:	e003      	b.n	80051ce <get_http_headers+0x14a>
  } else {
    /* No - use the default, plain text file type. */
    hs->hdrs[HDR_STRINGS_IDX_CONTENT_TYPE] = HTTP_HDR_DEFAULT_TYPE;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	4a11      	ldr	r2, [pc, #68]	; (8005210 <get_http_headers+0x18c>)
 80051ca:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }
  /* Set up to send the first header string. */
  hs->hdr_index = 0;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2200      	movs	r2, #0
 80051d2:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
  hs->hdr_pos = 0;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2200      	movs	r2, #0
 80051da:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
}
 80051de:	3718      	adds	r7, #24
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}
 80051e4:	08012f7c 	.word	0x08012f7c
 80051e8:	08012e40 	.word	0x08012e40
 80051ec:	08012fbc 	.word	0x08012fbc
 80051f0:	080133b0 	.word	0x080133b0
 80051f4:	080133b4 	.word	0x080133b4
 80051f8:	08012e60 	.word	0x08012e60
 80051fc:	080133b8 	.word	0x080133b8
 8005200:	08012e7c 	.word	0x08012e7c
 8005204:	08012e2c 	.word	0x08012e2c
 8005208:	08017bf4 	.word	0x08017bf4
 800520c:	08013150 	.word	0x08013150
 8005210:	080133bc 	.word	0x080133bc

08005214 <get_http_content_length>:

/* Add content-length header? */
static void
get_http_content_length(struct http_state *hs)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b084      	sub	sp, #16
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
  u8_t add_content_len = 0;
 800521c:	2300      	movs	r3, #0
 800521e:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("already been here?", hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_KEEPALIVE] == NULL);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005226:	2b00      	cmp	r3, #0
 8005228:	d006      	beq.n	8005238 <get_http_content_length+0x24>
 800522a:	4b27      	ldr	r3, [pc, #156]	; (80052c8 <get_http_content_length+0xb4>)
 800522c:	f44f 726e 	mov.w	r2, #952	; 0x3b8
 8005230:	4926      	ldr	r1, [pc, #152]	; (80052cc <get_http_content_length+0xb8>)
 8005232:	4827      	ldr	r0, [pc, #156]	; (80052d0 <get_http_content_length+0xbc>)
 8005234:	f00c f90c 	bl	8011450 <iprintf>

  add_content_len = 0;
 8005238:	2300      	movs	r3, #0
 800523a:	73fb      	strb	r3, [r7, #15]
#if LWIP_HTTPD_SSI
  if (hs->ssi == NULL) /* @todo: get maximum file length from SSI */
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005240:	2b00      	cmp	r3, #0
 8005242:	d10c      	bne.n	800525e <get_http_content_length+0x4a>
#endif /* LWIP_HTTPD_SSI */
  {
    if ((hs->handle != NULL) && (hs->handle->flags & FS_FILE_FLAGS_HEADER_PERSISTENT)) {
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	695b      	ldr	r3, [r3, #20]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d008      	beq.n	800525e <get_http_content_length+0x4a>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	695b      	ldr	r3, [r3, #20]
 8005250:	7c1b      	ldrb	r3, [r3, #16]
 8005252:	f003 0302 	and.w	r3, r3, #2
 8005256:	2b00      	cmp	r3, #0
 8005258:	d001      	beq.n	800525e <get_http_content_length+0x4a>
      add_content_len = 1;
 800525a:	2301      	movs	r3, #1
 800525c:	73fb      	strb	r3, [r7, #15]
    }
  }
  if (add_content_len) {
 800525e:	7bfb      	ldrb	r3, [r7, #15]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d025      	beq.n	80052b0 <get_http_content_length+0x9c>
    size_t len;
    lwip_itoa(hs->hdr_content_len, (size_t)LWIP_HTTPD_MAX_CONTENT_LEN_SIZE,
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	f103 00c4 	add.w	r0, r3, #196	; 0xc4
              hs->handle->len);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	695b      	ldr	r3, [r3, #20]
    lwip_itoa(hs->hdr_content_len, (size_t)LWIP_HTTPD_MAX_CONTENT_LEN_SIZE,
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	461a      	mov	r2, r3
 8005272:	210c      	movs	r1, #12
 8005274:	f001 fc2a 	bl	8006acc <lwip_itoa>
    len = strlen(hs->hdr_content_len);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	33c4      	adds	r3, #196	; 0xc4
 800527c:	4618      	mov	r0, r3
 800527e:	f7fa ffb1 	bl	80001e4 <strlen>
 8005282:	60b8      	str	r0, [r7, #8]
    if (len <= LWIP_HTTPD_MAX_CONTENT_LEN_SIZE - LWIP_HTTPD_MAX_CONTENT_LEN_OFFSET) {
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	2b09      	cmp	r3, #9
 8005288:	d810      	bhi.n	80052ac <get_http_content_length+0x98>
      SMEMCPY(&hs->hdr_content_len[len], CRLF, 3);
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	33c0      	adds	r3, #192	; 0xc0
 800528e:	687a      	ldr	r2, [r7, #4]
 8005290:	4413      	add	r3, r2
 8005292:	3304      	adds	r3, #4
 8005294:	2203      	movs	r2, #3
 8005296:	490f      	ldr	r1, [pc, #60]	; (80052d4 <get_http_content_length+0xc0>)
 8005298:	4618      	mov	r0, r3
 800529a:	f00b ffff 	bl	801129c <memcpy>
      hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_NR] = hs->hdr_content_len;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	f103 02c4 	add.w	r2, r3, #196	; 0xc4
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 80052aa:	e001      	b.n	80052b0 <get_http_content_length+0x9c>
    } else {
      add_content_len = 0;
 80052ac:	2300      	movs	r3, #0
 80052ae:	73fb      	strb	r3, [r7, #15]
  } else {
    hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_KEEPALIVE] = g_psHTTPHeaderStrings[HTTP_HDR_CONN_CLOSE];
    hs->keepalive = 0;
  }
#else /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  if (add_content_len) {
 80052b0:	7bfb      	ldrb	r3, [r7, #15]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d003      	beq.n	80052be <get_http_content_length+0xaa>
    hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_KEEPALIVE] = g_psHTTPHeaderStrings[HTTP_HDR_CONTENT_LENGTH];
 80052b6:	4a08      	ldr	r2, [pc, #32]	; (80052d8 <get_http_content_length+0xc4>)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
}
 80052be:	bf00      	nop
 80052c0:	3710      	adds	r7, #16
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}
 80052c6:	bf00      	nop
 80052c8:	080132fc 	.word	0x080132fc
 80052cc:	080133dc 	.word	0x080133dc
 80052d0:	08013344 	.word	0x08013344
 80052d4:	080133f0 	.word	0x080133f0
 80052d8:	08012f0c 	.word	0x08012f0c

080052dc <http_send_headers>:
 *                                      so don't send HTTP body yet
 *           - HTTP_DATA_TO_SEND_FREED: http_state and pcb are already freed
 */
static u8_t
http_send_headers(struct altcp_pcb *pcb, struct http_state *hs)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b088      	sub	sp, #32
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
 80052e4:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 80052e6:	2300      	movs	r3, #0
 80052e8:	777b      	strb	r3, [r7, #29]
  u16_t hdrlen, sendlen;

  if (hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_KEEPALIVE] == NULL) {
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d102      	bne.n	80052fa <http_send_headers+0x1e>
    /* set up "content-length" and "connection:" headers */
    get_http_content_length(hs);
 80052f4:	6838      	ldr	r0, [r7, #0]
 80052f6:	f7ff ff8d 	bl	8005214 <get_http_content_length>
  }

  /* How much data can we send? */
  len = altcp_sndbuf(pcb);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8005300:	83fb      	strh	r3, [r7, #30]
  sendlen = len;
 8005302:	8bfb      	ldrh	r3, [r7, #30]
 8005304:	81fb      	strh	r3, [r7, #14]

  while (len && (hs->hdr_index < NUM_FILE_HDR_STRINGS) && sendlen) {
 8005306:	e08b      	b.n	8005420 <http_send_headers+0x144>
    const void *ptr;
    u16_t old_sendlen;
    u8_t apiflags;
    /* How much do we have to send from the current header? */
    hdrlen = (u16_t)strlen(hs->hdrs[hs->hdr_index]);
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 800530e:	461a      	mov	r2, r3
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	322c      	adds	r2, #44	; 0x2c
 8005314:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005318:	4618      	mov	r0, r3
 800531a:	f7fa ff63 	bl	80001e4 <strlen>
 800531e:	4603      	mov	r3, r0
 8005320:	837b      	strh	r3, [r7, #26]

    /* How much of this can we send? */
    sendlen = (len < (hdrlen - hs->hdr_pos)) ? len : (hdrlen - hs->hdr_pos);
 8005322:	8b7b      	ldrh	r3, [r7, #26]
 8005324:	683a      	ldr	r2, [r7, #0]
 8005326:	f8b2 20d0 	ldrh.w	r2, [r2, #208]	; 0xd0
 800532a:	1a9a      	subs	r2, r3, r2
 800532c:	8bfb      	ldrh	r3, [r7, #30]
 800532e:	4293      	cmp	r3, r2
 8005330:	bfa8      	it	ge
 8005332:	4613      	movge	r3, r2
 8005334:	b29b      	uxth	r3, r3
 8005336:	81fb      	strh	r3, [r7, #14]

    /* Send this amount of data or as much as we can given memory
     * constraints. */
    ptr = (const void *)(hs->hdrs[hs->hdr_index] + hs->hdr_pos);
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 800533e:	461a      	mov	r2, r3
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	322c      	adds	r2, #44	; 0x2c
 8005344:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005348:	683a      	ldr	r2, [r7, #0]
 800534a:	f8b2 20d0 	ldrh.w	r2, [r2, #208]	; 0xd0
 800534e:	4413      	add	r3, r2
 8005350:	617b      	str	r3, [r7, #20]
    old_sendlen = sendlen;
 8005352:	89fb      	ldrh	r3, [r7, #14]
 8005354:	827b      	strh	r3, [r7, #18]
    apiflags = HTTP_IS_HDR_VOLATILE(hs, ptr);
 8005356:	2300      	movs	r3, #0
 8005358:	773b      	strb	r3, [r7, #28]
    if (hs->hdr_index == HDR_STRINGS_IDX_CONTENT_LEN_NR) {
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 8005360:	2b03      	cmp	r3, #3
 8005362:	d103      	bne.n	800536c <http_send_headers+0x90>
      /* content-length is always volatile */
      apiflags |= TCP_WRITE_FLAG_COPY;
 8005364:	7f3b      	ldrb	r3, [r7, #28]
 8005366:	f043 0301 	orr.w	r3, r3, #1
 800536a:	773b      	strb	r3, [r7, #28]
    }
    if (hs->hdr_index < NUM_FILE_HDR_STRINGS - 1) {
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 8005372:	2b03      	cmp	r3, #3
 8005374:	d803      	bhi.n	800537e <http_send_headers+0xa2>
      apiflags |= TCP_WRITE_FLAG_MORE;
 8005376:	7f3b      	ldrb	r3, [r7, #28]
 8005378:	f043 0302 	orr.w	r3, r3, #2
 800537c:	773b      	strb	r3, [r7, #28]
    }
    err = http_write(pcb, ptr, &sendlen, apiflags);
 800537e:	7f3b      	ldrb	r3, [r7, #28]
 8005380:	f107 020e 	add.w	r2, r7, #14
 8005384:	6979      	ldr	r1, [r7, #20]
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f7ff fc88 	bl	8004c9c <http_write>
 800538c:	4603      	mov	r3, r0
 800538e:	747b      	strb	r3, [r7, #17]
    if ((err == ERR_OK) && (old_sendlen != sendlen)) {
 8005390:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d106      	bne.n	80053a6 <http_send_headers+0xca>
 8005398:	89fb      	ldrh	r3, [r7, #14]
 800539a:	8a7a      	ldrh	r2, [r7, #18]
 800539c:	429a      	cmp	r2, r3
 800539e:	d002      	beq.n	80053a6 <http_send_headers+0xca>
      /* Remember that we added some more data to be transmitted. */
      data_to_send = HTTP_DATA_TO_SEND_CONTINUE;
 80053a0:	2301      	movs	r3, #1
 80053a2:	777b      	strb	r3, [r7, #29]
 80053a4:	e005      	b.n	80053b2 <http_send_headers+0xd6>
    } else if (err != ERR_OK) {
 80053a6:	f997 3011 	ldrsb.w	r3, [r7, #17]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d001      	beq.n	80053b2 <http_send_headers+0xd6>
      /* special case: http_write does not try to send 1 byte */
      sendlen = 0;
 80053ae:	2300      	movs	r3, #0
 80053b0:	81fb      	strh	r3, [r7, #14]
    }

    /* Fix up the header position for the next time round. */
    hs->hdr_pos += sendlen;
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	f8b3 20d0 	ldrh.w	r2, [r3, #208]	; 0xd0
 80053b8:	89fb      	ldrh	r3, [r7, #14]
 80053ba:	4413      	add	r3, r2
 80053bc:	b29a      	uxth	r2, r3
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
    len -= sendlen;
 80053c4:	89fb      	ldrh	r3, [r7, #14]
 80053c6:	8bfa      	ldrh	r2, [r7, #30]
 80053c8:	1ad3      	subs	r3, r2, r3
 80053ca:	83fb      	strh	r3, [r7, #30]

    /* Have we finished sending this string? */
    if (hs->hdr_pos == hdrlen) {
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	f8b3 30d0 	ldrh.w	r3, [r3, #208]	; 0xd0
 80053d2:	8b7a      	ldrh	r2, [r7, #26]
 80053d4:	429a      	cmp	r2, r3
 80053d6:	d123      	bne.n	8005420 <http_send_headers+0x144>
      /* Yes - move on to the next one */
      hs->hdr_index++;
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 80053de:	3301      	adds	r3, #1
 80053e0:	b29a      	uxth	r2, r3
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
      /* skip headers that are NULL (not all headers are required) */
      while ((hs->hdr_index < NUM_FILE_HDR_STRINGS) &&
 80053e8:	e007      	b.n	80053fa <http_send_headers+0x11e>
             (hs->hdrs[hs->hdr_index] == NULL)) {
        hs->hdr_index++;
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 80053f0:	3301      	adds	r3, #1
 80053f2:	b29a      	uxth	r2, r3
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
      while ((hs->hdr_index < NUM_FILE_HDR_STRINGS) &&
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 8005400:	2b04      	cmp	r3, #4
 8005402:	d809      	bhi.n	8005418 <http_send_headers+0x13c>
             (hs->hdrs[hs->hdr_index] == NULL)) {
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 800540a:	461a      	mov	r2, r3
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	322c      	adds	r2, #44	; 0x2c
 8005410:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
      while ((hs->hdr_index < NUM_FILE_HDR_STRINGS) &&
 8005414:	2b00      	cmp	r3, #0
 8005416:	d0e8      	beq.n	80053ea <http_send_headers+0x10e>
      }
      hs->hdr_pos = 0;
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	2200      	movs	r2, #0
 800541c:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
  while (len && (hs->hdr_index < NUM_FILE_HDR_STRINGS) && sendlen) {
 8005420:	8bfb      	ldrh	r3, [r7, #30]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d008      	beq.n	8005438 <http_send_headers+0x15c>
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 800542c:	2b04      	cmp	r3, #4
 800542e:	d803      	bhi.n	8005438 <http_send_headers+0x15c>
 8005430:	89fb      	ldrh	r3, [r7, #14]
 8005432:	2b00      	cmp	r3, #0
 8005434:	f47f af68 	bne.w	8005308 <http_send_headers+0x2c>
    }
  }

  if ((hs->hdr_index >= NUM_FILE_HDR_STRINGS) && (hs->file == NULL)) {
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 800543e:	2b04      	cmp	r3, #4
 8005440:	d90f      	bls.n	8005462 <http_send_headers+0x186>
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	699b      	ldr	r3, [r3, #24]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d10b      	bne.n	8005462 <http_send_headers+0x186>
    /* When we are at the end of the headers, check for data to send
     * instead of waiting for ACK from remote side to continue
     * (which would happen when sending files from async read). */
    if (http_check_eof(pcb, hs)) {
 800544a:	6839      	ldr	r1, [r7, #0]
 800544c:	6878      	ldr	r0, [r7, #4]
 800544e:	f000 f819 	bl	8005484 <http_check_eof>
 8005452:	4603      	mov	r3, r0
 8005454:	2b00      	cmp	r3, #0
 8005456:	d002      	beq.n	800545e <http_send_headers+0x182>
      data_to_send = HTTP_DATA_TO_SEND_BREAK;
 8005458:	2302      	movs	r3, #2
 800545a:	777b      	strb	r3, [r7, #29]
 800545c:	e001      	b.n	8005462 <http_send_headers+0x186>
    } else {
      /* At this point, for non-keepalive connections, hs is deallocated an
         pcb is closed. */
      return HTTP_DATA_TO_SEND_FREED;
 800545e:	2303      	movs	r3, #3
 8005460:	e00b      	b.n	800547a <http_send_headers+0x19e>
  }
  /* If we get here and there are still header bytes to send, we send
   * the header information we just wrote immediately. If there are no
   * more headers to send, but we do have file data to send, drop through
   * to try to send some file data too. */
  if ((hs->hdr_index < NUM_FILE_HDR_STRINGS) || !hs->file) {
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 8005468:	2b04      	cmp	r3, #4
 800546a:	d903      	bls.n	8005474 <http_send_headers+0x198>
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	699b      	ldr	r3, [r3, #24]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d101      	bne.n	8005478 <http_send_headers+0x19c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("tcp_output\n"));
    return HTTP_DATA_TO_SEND_BREAK;
 8005474:	2302      	movs	r3, #2
 8005476:	e000      	b.n	800547a <http_send_headers+0x19e>
  }
  return data_to_send;
 8005478:	7f7b      	ldrb	r3, [r7, #29]
}
 800547a:	4618      	mov	r0, r3
 800547c:	3720      	adds	r7, #32
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}
	...

08005484 <http_check_eof>:
 * @returns: 0 if the file is finished or no data has been read
 *           1 if the file is not finished and data has been read
 */
static u8_t
http_check_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b084      	sub	sp, #16
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
 800548c:	6039      	str	r1, [r7, #0]
  int max_write_len;
#endif /* HTTPD_MAX_WRITE_LEN */
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */

  /* Do we have a valid file handle? */
  if (hs->handle == NULL) {
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	695b      	ldr	r3, [r3, #20]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d105      	bne.n	80054a2 <http_check_eof+0x1e>
    /* No - close the connection. */
    http_eof(pcb, hs);
 8005496:	6839      	ldr	r1, [r7, #0]
 8005498:	6878      	ldr	r0, [r7, #4]
 800549a:	f7ff fcca 	bl	8004e32 <http_eof>
    return 0;
 800549e:	2300      	movs	r3, #0
 80054a0:	e016      	b.n	80054d0 <http_check_eof+0x4c>
  }
  bytes_left = fs_bytes_left(hs->handle);
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	695b      	ldr	r3, [r3, #20]
 80054a6:	4618      	mov	r0, r3
 80054a8:	f7ff fb66 	bl	8004b78 <fs_bytes_left>
 80054ac:	60f8      	str	r0, [r7, #12]
  if (bytes_left <= 0) {
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	dc05      	bgt.n	80054c0 <http_check_eof+0x3c>
    /* We reached the end of the file so this request is done. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 80054b4:	6839      	ldr	r1, [r7, #0]
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f7ff fcbb 	bl	8004e32 <http_eof>
    return 0;
 80054bc:	2300      	movs	r3, #0
 80054be:	e007      	b.n	80054d0 <http_check_eof+0x4c>
    hs->ssi->parse_left = count;
    hs->ssi->parsed = hs->buf;
  }
#endif /* LWIP_HTTPD_SSI */
#else /* LWIP_HTTPD_DYNAMIC_FILE_READ */
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 80054c0:	4b05      	ldr	r3, [pc, #20]	; (80054d8 <http_check_eof+0x54>)
 80054c2:	f240 429d 	movw	r2, #1181	; 0x49d
 80054c6:	4905      	ldr	r1, [pc, #20]	; (80054dc <http_check_eof+0x58>)
 80054c8:	4805      	ldr	r0, [pc, #20]	; (80054e0 <http_check_eof+0x5c>)
 80054ca:	f00b ffc1 	bl	8011450 <iprintf>
#endif /* LWIP_HTTPD_SSI || LWIP_HTTPD_DYNAMIC_HEADERS */
  return 1;
 80054ce:	2301      	movs	r3, #1
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	3710      	adds	r7, #16
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bd80      	pop	{r7, pc}
 80054d8:	080132fc 	.word	0x080132fc
 80054dc:	080133f4 	.word	0x080133f4
 80054e0:	08013344 	.word	0x08013344

080054e4 <http_send_data_nonssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_nonssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b084      	sub	sp, #16
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
 80054ec:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = 0;
 80054ee:	2300      	movs	r3, #0
 80054f0:	73fb      	strb	r3, [r7, #15]

  /* We are not processing an SHTML file so no tag checking is necessary.
   * Just send the data as we received it from the file. */
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d803      	bhi.n	8005506 <http_send_data_nonssi+0x22>
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005502:	b29b      	uxth	r3, r3
 8005504:	e001      	b.n	800550a <http_send_data_nonssi+0x26>
 8005506:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800550a:	81bb      	strh	r3, [r7, #12]

  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	6999      	ldr	r1, [r3, #24]
 8005510:	f107 020c 	add.w	r2, r7, #12
 8005514:	2300      	movs	r3, #0
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f7ff fbc0 	bl	8004c9c <http_write>
 800551c:	4603      	mov	r3, r0
 800551e:	73bb      	strb	r3, [r7, #14]
  if (err == ERR_OK) {
 8005520:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d10d      	bne.n	8005544 <http_send_data_nonssi+0x60>
    data_to_send = 1;
 8005528:	2301      	movs	r3, #1
 800552a:	73fb      	strb	r3, [r7, #15]
    hs->file += len;
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	699b      	ldr	r3, [r3, #24]
 8005530:	89ba      	ldrh	r2, [r7, #12]
 8005532:	441a      	add	r2, r3
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	619a      	str	r2, [r3, #24]
    hs->left -= len;
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800553c:	89ba      	ldrh	r2, [r7, #12]
 800553e:	1a9a      	subs	r2, r3, r2
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	625a      	str	r2, [r3, #36]	; 0x24
  }

  return data_to_send;
 8005544:	7bfb      	ldrb	r3, [r7, #15]
}
 8005546:	4618      	mov	r0, r3
 8005548:	3710      	adds	r7, #16
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}
	...

08005550 <http_send_data_ssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_ssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b086      	sub	sp, #24
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
 8005558:	6039      	str	r1, [r7, #0]
  err_t err = ERR_OK;
 800555a:	2300      	movs	r3, #0
 800555c:	75fb      	strb	r3, [r7, #23]
  u16_t len;
  u8_t data_to_send = 0;
 800555e:	2300      	movs	r3, #0
 8005560:	75bb      	strb	r3, [r7, #22]
  u8_t tag_type;

  struct http_ssi_state *ssi = hs->ssi;
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005566:	613b      	str	r3, [r7, #16]
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d106      	bne.n	800557c <http_send_data_ssi+0x2c>
 800556e:	4b9d      	ldr	r3, [pc, #628]	; (80057e4 <http_send_data_ssi+0x294>)
 8005570:	f240 42cb 	movw	r2, #1227	; 0x4cb
 8005574:	499c      	ldr	r1, [pc, #624]	; (80057e8 <http_send_data_ssi+0x298>)
 8005576:	489d      	ldr	r0, [pc, #628]	; (80057ec <http_send_data_ssi+0x29c>)
 8005578:	f00b ff6a 	bl	8011450 <iprintf>
   * them with insert strings. We need to be careful here since a tag may
   * straddle the boundary of two blocks read from the file and we may also
   * have to split the insert string between two tcp_write operations. */

  /* How much data could we send? */
  len = altcp_sndbuf(pcb);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8005582:	81fb      	strh	r3, [r7, #14]

  /* Do we have remaining data to send before parsing more? */
  if (ssi->parsed > hs->file) {
 8005584:	693b      	ldr	r3, [r7, #16]
 8005586:	681a      	ldr	r2, [r3, #0]
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	699b      	ldr	r3, [r3, #24]
 800558c:	429a      	cmp	r2, r3
 800558e:	f240 826a 	bls.w	8005a66 <http_send_data_ssi+0x516>
    len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	681a      	ldr	r2, [r3, #0]
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	699b      	ldr	r3, [r3, #24]
 800559a:	1ad3      	subs	r3, r2, r3
 800559c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80055a0:	4293      	cmp	r3, r2
 80055a2:	dc06      	bgt.n	80055b2 <http_send_data_ssi+0x62>
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	681a      	ldr	r2, [r3, #0]
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	699b      	ldr	r3, [r3, #24]
 80055ac:	1ad3      	subs	r3, r2, r3
 80055ae:	b29b      	uxth	r3, r3
 80055b0:	e001      	b.n	80055b6 <http_send_data_ssi+0x66>
 80055b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80055b6:	81fb      	strh	r3, [r7, #14]

    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	6999      	ldr	r1, [r3, #24]
 80055bc:	f107 020e 	add.w	r2, r7, #14
 80055c0:	2300      	movs	r3, #0
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f7ff fb6a 	bl	8004c9c <http_write>
 80055c8:	4603      	mov	r3, r0
 80055ca:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 80055cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d10d      	bne.n	80055f0 <http_send_data_ssi+0xa0>
      data_to_send = 1;
 80055d4:	2301      	movs	r3, #1
 80055d6:	75bb      	strb	r3, [r7, #22]
      hs->file += len;
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	699b      	ldr	r3, [r3, #24]
 80055dc:	89fa      	ldrh	r2, [r7, #14]
 80055de:	441a      	add	r2, r3
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	619a      	str	r2, [r3, #24]
      hs->left -= len;
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e8:	89fa      	ldrh	r2, [r7, #14]
 80055ea:	1a9a      	subs	r2, r3, r2
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* If the send buffer is full, return now. */
    if (altcp_sndbuf(pcb) == 0) {
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	f040 8235 	bne.w	8005a66 <http_send_data_ssi+0x516>
      return data_to_send;
 80055fc:	7dbb      	ldrb	r3, [r7, #22]
 80055fe:	e27b      	b.n	8005af8 <http_send_data_ssi+0x5a8>
  LWIP_DEBUGF(HTTPD_DEBUG, ("State %d, %d left\n", ssi->tag_state, (int)ssi->parse_left));

  /* We have sent all the data that was already parsed so continue parsing
   * the buffer contents looking for SSI tags. */
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
    if (len == 0) {
 8005600:	89fb      	ldrh	r3, [r7, #14]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d101      	bne.n	800560a <http_send_data_ssi+0xba>
      return data_to_send;
 8005606:	7dbb      	ldrb	r3, [r7, #22]
 8005608:	e276      	b.n	8005af8 <http_send_data_ssi+0x5a8>
    }
    switch (ssi->tag_state) {
 800560a:	693b      	ldr	r3, [r7, #16]
 800560c:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8005610:	2b04      	cmp	r3, #4
 8005612:	f200 8227 	bhi.w	8005a64 <http_send_data_ssi+0x514>
 8005616:	a201      	add	r2, pc, #4	; (adr r2, 800561c <http_send_data_ssi+0xcc>)
 8005618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800561c:	08005631 	.word	0x08005631
 8005620:	08005683 	.word	0x08005683
 8005624:	080056f5 	.word	0x080056f5
 8005628:	08005843 	.word	0x08005843
 800562c:	0800598b 	.word	0x0800598b
      case TAG_NONE:
        /* We are not currently processing an SSI tag so scan for the
         * start of the lead-in marker. */
        for (tag_type = 0; tag_type < LWIP_ARRAYSIZE(http_ssi_tag_desc); tag_type++) {
 8005630:	2300      	movs	r3, #0
 8005632:	757b      	strb	r3, [r7, #21]
 8005634:	e017      	b.n	8005666 <http_send_data_ssi+0x116>
          if (*ssi->parsed == http_ssi_tag_desc[tag_type].lead_in[0]) {
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	781a      	ldrb	r2, [r3, #0]
 800563c:	7d7b      	ldrb	r3, [r7, #21]
 800563e:	496c      	ldr	r1, [pc, #432]	; (80057f0 <http_send_data_ssi+0x2a0>)
 8005640:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 8005644:	781b      	ldrb	r3, [r3, #0]
 8005646:	429a      	cmp	r2, r3
 8005648:	d10a      	bne.n	8005660 <http_send_data_ssi+0x110>
            /* We found what could be the lead-in for a new tag so change
             * state appropriately. */
            ssi->tag_type = tag_type;
 800564a:	693b      	ldr	r3, [r7, #16]
 800564c:	7d7a      	ldrb	r2, [r7, #21]
 800564e:	741a      	strb	r2, [r3, #16]
            ssi->tag_state = TAG_LEADIN;
 8005650:	693b      	ldr	r3, [r7, #16]
 8005652:	2201      	movs	r2, #1
 8005654:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
            ssi->tag_index = 1;
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	2201      	movs	r2, #1
 800565c:	819a      	strh	r2, [r3, #12]
  #if !LWIP_HTTPD_SSI_INCLUDE_TAG
            ssi->tag_started = ssi->parsed;
  #endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG */
            break;
 800565e:	e005      	b.n	800566c <http_send_data_ssi+0x11c>
        for (tag_type = 0; tag_type < LWIP_ARRAYSIZE(http_ssi_tag_desc); tag_type++) {
 8005660:	7d7b      	ldrb	r3, [r7, #21]
 8005662:	3301      	adds	r3, #1
 8005664:	757b      	strb	r3, [r7, #21]
 8005666:	7d7b      	ldrb	r3, [r7, #21]
 8005668:	2b01      	cmp	r3, #1
 800566a:	d9e4      	bls.n	8005636 <http_send_data_ssi+0xe6>
          }
        }

        /* Move on to the next character in the buffer */
        ssi->parse_left--;
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	1e5a      	subs	r2, r3, #1
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	609a      	str	r2, [r3, #8]
        ssi->parsed++;
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	1c5a      	adds	r2, r3, #1
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	601a      	str	r2, [r3, #0]
        break;
 8005680:	e1f1      	b.n	8005a66 <http_send_data_ssi+0x516>
      case TAG_LEADIN:
        /* We are processing the lead-in marker, looking for the start of
         * the tag name. */

        /* Have we reached the end of the leadin? */
        if (http_ssi_tag_desc[ssi->tag_type].lead_in[ssi->tag_index] == 0) {
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	7c1b      	ldrb	r3, [r3, #16]
 8005686:	461a      	mov	r2, r3
 8005688:	4b59      	ldr	r3, [pc, #356]	; (80057f0 <http_send_data_ssi+0x2a0>)
 800568a:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 800568e:	693a      	ldr	r2, [r7, #16]
 8005690:	8992      	ldrh	r2, [r2, #12]
 8005692:	4413      	add	r3, r2
 8005694:	781b      	ldrb	r3, [r3, #0]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d107      	bne.n	80056aa <http_send_data_ssi+0x15a>
          ssi->tag_index = 0;
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	2200      	movs	r2, #0
 800569e:	819a      	strh	r2, [r3, #12]
          ssi->tag_state = TAG_FOUND;
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	2202      	movs	r2, #2
 80056a4:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 80056a8:	e1dd      	b.n	8005a66 <http_send_data_ssi+0x516>
        } else {
          /* Have we found the next character we expect for the tag leadin? */
          if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_in[ssi->tag_index]) {
 80056aa:	693b      	ldr	r3, [r7, #16]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	781a      	ldrb	r2, [r3, #0]
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	7c1b      	ldrb	r3, [r3, #16]
 80056b4:	4619      	mov	r1, r3
 80056b6:	4b4e      	ldr	r3, [pc, #312]	; (80057f0 <http_send_data_ssi+0x2a0>)
 80056b8:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
 80056bc:	6939      	ldr	r1, [r7, #16]
 80056be:	8989      	ldrh	r1, [r1, #12]
 80056c0:	440b      	add	r3, r1
 80056c2:	781b      	ldrb	r3, [r3, #0]
 80056c4:	429a      	cmp	r2, r3
 80056c6:	d106      	bne.n	80056d6 <http_send_data_ssi+0x186>
            /* Yes - move to the next one unless we have found the complete
             * leadin, in which case we start looking for the tag itself */
            ssi->tag_index++;
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	899b      	ldrh	r3, [r3, #12]
 80056cc:	3301      	adds	r3, #1
 80056ce:	b29a      	uxth	r2, r3
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	819a      	strh	r2, [r3, #12]
 80056d4:	e003      	b.n	80056de <http_send_data_ssi+0x18e>
          } else {
            /* We found an unexpected character so this is not a tag. Move
             * back to idle state. */
            ssi->tag_state = TAG_NONE;
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	2200      	movs	r2, #0
 80056da:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
          }

          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	689b      	ldr	r3, [r3, #8]
 80056e2:	1e5a      	subs	r2, r3, #1
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	1c5a      	adds	r2, r3, #1
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	601a      	str	r2, [r3, #0]
        }
        break;
 80056f2:	e1b8      	b.n	8005a66 <http_send_data_ssi+0x516>
        /* We are reading the tag name, looking for the start of the
         * lead-out marker and removing any whitespace found. */

        /* Remove leading whitespace between the tag leading and the first
         * tag name character. */
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 80056f4:	693b      	ldr	r3, [r7, #16]
 80056f6:	899b      	ldrh	r3, [r3, #12]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d11e      	bne.n	800573a <http_send_data_ssi+0x1ea>
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	781b      	ldrb	r3, [r3, #0]
 8005702:	2b20      	cmp	r3, #32
 8005704:	d00e      	beq.n	8005724 <http_send_data_ssi+0x1d4>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	781b      	ldrb	r3, [r3, #0]
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 800570c:	2b09      	cmp	r3, #9
 800570e:	d009      	beq.n	8005724 <http_send_data_ssi+0x1d4>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	781b      	ldrb	r3, [r3, #0]
 8005716:	2b0a      	cmp	r3, #10
 8005718:	d004      	beq.n	8005724 <http_send_data_ssi+0x1d4>
                                      (*ssi->parsed == '\r'))) {
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	781b      	ldrb	r3, [r3, #0]
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8005720:	2b0d      	cmp	r3, #13
 8005722:	d10a      	bne.n	800573a <http_send_data_ssi+0x1ea>
          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	689b      	ldr	r3, [r3, #8]
 8005728:	1e5a      	subs	r2, r3, #1
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 800572e:	693b      	ldr	r3, [r7, #16]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	1c5a      	adds	r2, r3, #1
 8005734:	693b      	ldr	r3, [r7, #16]
 8005736:	601a      	str	r2, [r3, #0]
          break;
 8005738:	e195      	b.n	8005a66 <http_send_data_ssi+0x516>
        }

        /* Have we found the end of the tag name? This is signalled by
         * us finding the first leadout character or whitespace */
        if ((*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) ||
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	781a      	ldrb	r2, [r3, #0]
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	7c1b      	ldrb	r3, [r3, #16]
 8005744:	492a      	ldr	r1, [pc, #168]	; (80057f0 <http_send_data_ssi+0x2a0>)
 8005746:	00db      	lsls	r3, r3, #3
 8005748:	440b      	add	r3, r1
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	781b      	ldrb	r3, [r3, #0]
 800574e:	429a      	cmp	r2, r3
 8005750:	d013      	beq.n	800577a <http_send_data_ssi+0x22a>
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	781b      	ldrb	r3, [r3, #0]
        if ((*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) ||
 8005758:	2b20      	cmp	r3, #32
 800575a:	d00e      	beq.n	800577a <http_send_data_ssi+0x22a>
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 800575c:	693b      	ldr	r3, [r7, #16]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	781b      	ldrb	r3, [r3, #0]
 8005762:	2b09      	cmp	r3, #9
 8005764:	d009      	beq.n	800577a <http_send_data_ssi+0x22a>
            (*ssi->parsed == '\n') || (*ssi->parsed == '\r')) {
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	781b      	ldrb	r3, [r3, #0]
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 800576c:	2b0a      	cmp	r3, #10
 800576e:	d004      	beq.n	800577a <http_send_data_ssi+0x22a>
            (*ssi->parsed == '\n') || (*ssi->parsed == '\r')) {
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	781b      	ldrb	r3, [r3, #0]
 8005776:	2b0d      	cmp	r3, #13
 8005778:	d142      	bne.n	8005800 <http_send_data_ssi+0x2b0>

          if (ssi->tag_index == 0) {
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	899b      	ldrh	r3, [r3, #12]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d104      	bne.n	800578c <http_send_data_ssi+0x23c>
            /* We read a zero length tag so ignore it. */
            ssi->tag_state = TAG_NONE;
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	2200      	movs	r2, #0
 8005786:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
          if (ssi->tag_index == 0) {
 800578a:	e04f      	b.n	800582c <http_send_data_ssi+0x2dc>
          } else {
            /* We read a non-empty tag so go ahead and look for the
             * leadout string. */
            ssi->tag_state = TAG_LEADOUT;
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	2203      	movs	r2, #3
 8005790:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
            LWIP_ASSERT("ssi->tag_index <= 0xff", ssi->tag_index <= 0xff);
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	899b      	ldrh	r3, [r3, #12]
 8005798:	2bff      	cmp	r3, #255	; 0xff
 800579a:	d906      	bls.n	80057aa <http_send_data_ssi+0x25a>
 800579c:	4b11      	ldr	r3, [pc, #68]	; (80057e4 <http_send_data_ssi+0x294>)
 800579e:	f240 523a 	movw	r2, #1338	; 0x53a
 80057a2:	4914      	ldr	r1, [pc, #80]	; (80057f4 <http_send_data_ssi+0x2a4>)
 80057a4:	4811      	ldr	r0, [pc, #68]	; (80057ec <http_send_data_ssi+0x29c>)
 80057a6:	f00b fe53 	bl	8011450 <iprintf>
            ssi->tag_name_len = (u8_t)ssi->tag_index;
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	899b      	ldrh	r3, [r3, #12]
 80057ae:	b2da      	uxtb	r2, r3
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	745a      	strb	r2, [r3, #17]
            ssi->tag_name[ssi->tag_index] = '\0';
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	899b      	ldrh	r3, [r3, #12]
 80057b8:	461a      	mov	r2, r3
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	4413      	add	r3, r2
 80057be:	2200      	movs	r2, #0
 80057c0:	749a      	strb	r2, [r3, #18]
            if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) {
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	781a      	ldrb	r2, [r3, #0]
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	7c1b      	ldrb	r3, [r3, #16]
 80057cc:	4908      	ldr	r1, [pc, #32]	; (80057f0 <http_send_data_ssi+0x2a0>)
 80057ce:	00db      	lsls	r3, r3, #3
 80057d0:	440b      	add	r3, r1
 80057d2:	685b      	ldr	r3, [r3, #4]
 80057d4:	781b      	ldrb	r3, [r3, #0]
 80057d6:	429a      	cmp	r2, r3
 80057d8:	d10e      	bne.n	80057f8 <http_send_data_ssi+0x2a8>
              ssi->tag_index = 1;
 80057da:	693b      	ldr	r3, [r7, #16]
 80057dc:	2201      	movs	r2, #1
 80057de:	819a      	strh	r2, [r3, #12]
          if (ssi->tag_index == 0) {
 80057e0:	e024      	b.n	800582c <http_send_data_ssi+0x2dc>
 80057e2:	bf00      	nop
 80057e4:	080132fc 	.word	0x080132fc
 80057e8:	08013378 	.word	0x08013378
 80057ec:	08013344 	.word	0x08013344
 80057f0:	08017cd0 	.word	0x08017cd0
 80057f4:	0801342c 	.word	0x0801342c
            } else {
              ssi->tag_index = 0;
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	2200      	movs	r2, #0
 80057fc:	819a      	strh	r2, [r3, #12]
          if (ssi->tag_index == 0) {
 80057fe:	e015      	b.n	800582c <http_send_data_ssi+0x2dc>
            }
          }
        } else {
          /* This character is part of the tag name so save it */
          if (ssi->tag_index < LWIP_HTTPD_MAX_TAG_NAME_LEN) {
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	899b      	ldrh	r3, [r3, #12]
 8005804:	2b07      	cmp	r3, #7
 8005806:	d80d      	bhi.n	8005824 <http_send_data_ssi+0x2d4>
            ssi->tag_name[ssi->tag_index++] = *ssi->parsed;
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	681a      	ldr	r2, [r3, #0]
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	899b      	ldrh	r3, [r3, #12]
 8005810:	1c59      	adds	r1, r3, #1
 8005812:	b288      	uxth	r0, r1
 8005814:	6939      	ldr	r1, [r7, #16]
 8005816:	8188      	strh	r0, [r1, #12]
 8005818:	4619      	mov	r1, r3
 800581a:	7812      	ldrb	r2, [r2, #0]
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	440b      	add	r3, r1
 8005820:	749a      	strb	r2, [r3, #18]
 8005822:	e003      	b.n	800582c <http_send_data_ssi+0x2dc>
          } else {
            /* The tag was too long so ignore it. */
            ssi->tag_state = TAG_NONE;
 8005824:	693b      	ldr	r3, [r7, #16]
 8005826:	2200      	movs	r2, #0
 8005828:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
          }
        }

        /* Move on to the next character in the buffer */
        ssi->parse_left--;
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	689b      	ldr	r3, [r3, #8]
 8005830:	1e5a      	subs	r2, r3, #1
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	609a      	str	r2, [r3, #8]
        ssi->parsed++;
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	1c5a      	adds	r2, r3, #1
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	601a      	str	r2, [r3, #0]

        break;
 8005840:	e111      	b.n	8005a66 <http_send_data_ssi+0x516>

      /* We are looking for the end of the lead-out marker. */
      case TAG_LEADOUT:
        /* Remove leading whitespace between the tag leading and the first
         * tag leadout character. */
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	899b      	ldrh	r3, [r3, #12]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d11e      	bne.n	8005888 <http_send_data_ssi+0x338>
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	781b      	ldrb	r3, [r3, #0]
 8005850:	2b20      	cmp	r3, #32
 8005852:	d00e      	beq.n	8005872 <http_send_data_ssi+0x322>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	781b      	ldrb	r3, [r3, #0]
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 800585a:	2b09      	cmp	r3, #9
 800585c:	d009      	beq.n	8005872 <http_send_data_ssi+0x322>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	781b      	ldrb	r3, [r3, #0]
 8005864:	2b0a      	cmp	r3, #10
 8005866:	d004      	beq.n	8005872 <http_send_data_ssi+0x322>
                                      (*ssi->parsed == '\r'))) {
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	781b      	ldrb	r3, [r3, #0]
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800586e:	2b0d      	cmp	r3, #13
 8005870:	d10a      	bne.n	8005888 <http_send_data_ssi+0x338>
          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 8005872:	693b      	ldr	r3, [r7, #16]
 8005874:	689b      	ldr	r3, [r3, #8]
 8005876:	1e5a      	subs	r2, r3, #1
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 800587c:	693b      	ldr	r3, [r7, #16]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	1c5a      	adds	r2, r3, #1
 8005882:	693b      	ldr	r3, [r7, #16]
 8005884:	601a      	str	r2, [r3, #0]
          break;
 8005886:	e0ee      	b.n	8005a66 <http_send_data_ssi+0x516>
        }

        /* Have we found the next character we expect for the tag leadout? */
        if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[ssi->tag_index]) {
 8005888:	693b      	ldr	r3, [r7, #16]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	781a      	ldrb	r2, [r3, #0]
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	7c1b      	ldrb	r3, [r3, #16]
 8005892:	499b      	ldr	r1, [pc, #620]	; (8005b00 <http_send_data_ssi+0x5b0>)
 8005894:	00db      	lsls	r3, r3, #3
 8005896:	440b      	add	r3, r1
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	6939      	ldr	r1, [r7, #16]
 800589c:	8989      	ldrh	r1, [r1, #12]
 800589e:	440b      	add	r3, r1
 80058a0:	781b      	ldrb	r3, [r3, #0]
 80058a2:	429a      	cmp	r2, r3
 80058a4:	d162      	bne.n	800596c <http_send_data_ssi+0x41c>
          /* Yes - move to the next one unless we have found the complete
           * leadout, in which case we need to call the client to process
           * the tag. */

          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	689b      	ldr	r3, [r3, #8]
 80058aa:	1e5a      	subs	r2, r3, #1
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	1c5a      	adds	r2, r3, #1
 80058b6:	693b      	ldr	r3, [r7, #16]
 80058b8:	601a      	str	r2, [r3, #0]
          ssi->tag_index++;
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	899b      	ldrh	r3, [r3, #12]
 80058be:	3301      	adds	r3, #1
 80058c0:	b29a      	uxth	r2, r3
 80058c2:	693b      	ldr	r3, [r7, #16]
 80058c4:	819a      	strh	r2, [r3, #12]

          if (http_ssi_tag_desc[ssi->tag_type].lead_out[ssi->tag_index] == 0) {
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	7c1b      	ldrb	r3, [r3, #16]
 80058ca:	4a8d      	ldr	r2, [pc, #564]	; (8005b00 <http_send_data_ssi+0x5b0>)
 80058cc:	00db      	lsls	r3, r3, #3
 80058ce:	4413      	add	r3, r2
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	693a      	ldr	r2, [r7, #16]
 80058d4:	8992      	ldrh	r2, [r2, #12]
 80058d6:	4413      	add	r3, r2
 80058d8:	781b      	ldrb	r3, [r3, #0]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	f040 80c3 	bne.w	8005a66 <http_send_data_ssi+0x516>
            /* Call the client to ask for the insert string for the
             * tag we just found. */
#if LWIP_HTTPD_SSI_MULTIPART
            ssi->tag_part = 0; /* start with tag part 0 */
#endif /* LWIP_HTTPD_SSI_MULTIPART */
            get_tag_insert(hs);
 80058e0:	6838      	ldr	r0, [r7, #0]
 80058e2:	f7ff fb11 	bl	8004f08 <get_tag_insert>

            /* Next time through, we are going to be sending data
             * immediately, either the end of the block we start
             * sending here or the insert string. */
            ssi->tag_index = 0;
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	2200      	movs	r2, #0
 80058ea:	819a      	strh	r2, [r3, #12]
            ssi->tag_state = TAG_SENDING;
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	2204      	movs	r2, #4
 80058f0:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
            ssi->tag_end = ssi->parsed;
 80058f4:	693b      	ldr	r3, [r7, #16]
 80058f6:	681a      	ldr	r2, [r3, #0]
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	605a      	str	r2, [r3, #4]
            ssi->parsed = ssi->tag_started;
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/

            /* If there is any unsent data in the buffer prior to the
             * tag, we need to send it now. */
            if (ssi->tag_end > hs->file) {
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	685a      	ldr	r2, [r3, #4]
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	699b      	ldr	r3, [r3, #24]
 8005904:	429a      	cmp	r2, r3
 8005906:	f240 80ae 	bls.w	8005a66 <http_send_data_ssi+0x516>
              /* How much of the data can we send? */
#if LWIP_HTTPD_SSI_INCLUDE_TAG
              len = (u16_t)LWIP_MIN(ssi->tag_end - hs->file, 0xffff);
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	685a      	ldr	r2, [r3, #4]
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	699b      	ldr	r3, [r3, #24]
 8005912:	1ad3      	subs	r3, r2, r3
 8005914:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005918:	4293      	cmp	r3, r2
 800591a:	dc06      	bgt.n	800592a <http_send_data_ssi+0x3da>
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	685a      	ldr	r2, [r3, #4]
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	699b      	ldr	r3, [r3, #24]
 8005924:	1ad3      	subs	r3, r2, r3
 8005926:	b29b      	uxth	r3, r3
 8005928:	e001      	b.n	800592e <http_send_data_ssi+0x3de>
 800592a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800592e:	81fb      	strh	r3, [r7, #14]
#else /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
              /* we would include the tag in sending */
              len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
#endif /* LWIP_HTTPD_SSI_INCLUDE_TAG*/

              err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	6999      	ldr	r1, [r3, #24]
 8005934:	f107 020e 	add.w	r2, r7, #14
 8005938:	2300      	movs	r3, #0
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f7ff f9ae 	bl	8004c9c <http_write>
 8005940:	4603      	mov	r3, r0
 8005942:	75fb      	strb	r3, [r7, #23]
              if (err == ERR_OK) {
 8005944:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005948:	2b00      	cmp	r3, #0
 800594a:	f040 808c 	bne.w	8005a66 <http_send_data_ssi+0x516>
                data_to_send = 1;
 800594e:	2301      	movs	r3, #1
 8005950:	75bb      	strb	r3, [r7, #22]
                if (ssi->tag_started <= hs->file) {
                  /* pretend to have sent the tag, too */
                  len += (u16_t)(ssi->tag_end - ssi->tag_started);
                }
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
                hs->file += len;
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	699b      	ldr	r3, [r3, #24]
 8005956:	89fa      	ldrh	r2, [r7, #14]
 8005958:	441a      	add	r2, r3
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	619a      	str	r2, [r3, #24]
                hs->left -= len;
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005962:	89fa      	ldrh	r2, [r7, #14]
 8005964:	1a9a      	subs	r2, r3, r2
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	625a      	str	r2, [r3, #36]	; 0x24
 800596a:	e07c      	b.n	8005a66 <http_send_data_ssi+0x516>
            }
          }
        } else {
          /* We found an unexpected character so this is not a tag. Move
           * back to idle state. */
          ssi->parse_left--;
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	689b      	ldr	r3, [r3, #8]
 8005970:	1e5a      	subs	r2, r3, #1
 8005972:	693b      	ldr	r3, [r7, #16]
 8005974:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	1c5a      	adds	r2, r3, #1
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	601a      	str	r2, [r3, #0]
          ssi->tag_state = TAG_NONE;
 8005980:	693b      	ldr	r3, [r7, #16]
 8005982:	2200      	movs	r2, #0
 8005984:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
        }
        break;
 8005988:	e06d      	b.n	8005a66 <http_send_data_ssi+0x516>
       * from the file prior to the insert point or the insert string itself.
       */
      case TAG_SENDING:
        /* Do we have any remaining file data to send from the buffer prior
         * to the tag? */
        if (ssi->tag_end > hs->file) {
 800598a:	693b      	ldr	r3, [r7, #16]
 800598c:	685a      	ldr	r2, [r3, #4]
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	699b      	ldr	r3, [r3, #24]
 8005992:	429a      	cmp	r2, r3
 8005994:	d935      	bls.n	8005a02 <http_send_data_ssi+0x4b2>
          /* How much of the data can we send? */
#if LWIP_HTTPD_SSI_INCLUDE_TAG
          len = (u16_t)LWIP_MIN(ssi->tag_end - hs->file, 0xffff);
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	685a      	ldr	r2, [r3, #4]
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	699b      	ldr	r3, [r3, #24]
 800599e:	1ad3      	subs	r3, r2, r3
 80059a0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80059a4:	4293      	cmp	r3, r2
 80059a6:	dc06      	bgt.n	80059b6 <http_send_data_ssi+0x466>
 80059a8:	693b      	ldr	r3, [r7, #16]
 80059aa:	685a      	ldr	r2, [r3, #4]
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	699b      	ldr	r3, [r3, #24]
 80059b0:	1ad3      	subs	r3, r2, r3
 80059b2:	b29b      	uxth	r3, r3
 80059b4:	e001      	b.n	80059ba <http_send_data_ssi+0x46a>
 80059b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80059ba:	81fb      	strh	r3, [r7, #14]
#else /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
          LWIP_ASSERT("hs->started >= hs->file", ssi->tag_started >= hs->file);
          /* we would include the tag in sending */
          len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
#endif /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
          if (len != 0) {
 80059bc:	89fb      	ldrh	r3, [r7, #14]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d00a      	beq.n	80059d8 <http_send_data_ssi+0x488>
            err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	6999      	ldr	r1, [r3, #24]
 80059c6:	f107 020e 	add.w	r2, r7, #14
 80059ca:	2300      	movs	r3, #0
 80059cc:	6878      	ldr	r0, [r7, #4]
 80059ce:	f7ff f965 	bl	8004c9c <http_write>
 80059d2:	4603      	mov	r3, r0
 80059d4:	75fb      	strb	r3, [r7, #23]
 80059d6:	e001      	b.n	80059dc <http_send_data_ssi+0x48c>
          } else {
            err = ERR_OK;
 80059d8:	2300      	movs	r3, #0
 80059da:	75fb      	strb	r3, [r7, #23]
          }
          if (err == ERR_OK) {
 80059dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d140      	bne.n	8005a66 <http_send_data_ssi+0x516>
            data_to_send = 1;
 80059e4:	2301      	movs	r3, #1
 80059e6:	75bb      	strb	r3, [r7, #22]
            if (ssi->tag_started <= hs->file) {
              /* pretend to have sent the tag, too */
              len += (u16_t)(ssi->tag_end - ssi->tag_started);
            }
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
            hs->file += len;
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	699b      	ldr	r3, [r3, #24]
 80059ec:	89fa      	ldrh	r2, [r7, #14]
 80059ee:	441a      	add	r2, r3
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	619a      	str	r2, [r3, #24]
            hs->left -= len;
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f8:	89fa      	ldrh	r2, [r7, #14]
 80059fa:	1a9a      	subs	r2, r3, r2
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	625a      	str	r2, [r3, #36]	; 0x24
 8005a00:	e031      	b.n	8005a66 <http_send_data_ssi+0x516>
            }
          }
#endif /* LWIP_HTTPD_SSI_MULTIPART */

          /* Do we still have insert data left to send? */
          if (ssi->tag_index < ssi->tag_insert_len) {
 8005a02:	693b      	ldr	r3, [r7, #16]
 8005a04:	899a      	ldrh	r2, [r3, #12]
 8005a06:	693b      	ldr	r3, [r7, #16]
 8005a08:	89db      	ldrh	r3, [r3, #14]
 8005a0a:	429a      	cmp	r2, r3
 8005a0c:	d222      	bcs.n	8005a54 <http_send_data_ssi+0x504>
            /* We are sending the insert string itself. How much of the
             * insert can we send? */
            len = (ssi->tag_insert_len - ssi->tag_index);
 8005a0e:	693b      	ldr	r3, [r7, #16]
 8005a10:	89da      	ldrh	r2, [r3, #14]
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	899b      	ldrh	r3, [r3, #12]
 8005a16:	1ad3      	subs	r3, r2, r3
 8005a18:	b29b      	uxth	r3, r3
 8005a1a:	81fb      	strh	r3, [r7, #14]

            /* Note that we set the copy flag here since we only have a
             * single tag insert buffer per connection. If we don't do
             * this, insert corruption can occur if more than one insert
             * is processed before we call tcp_output. */
            err = http_write(pcb, &(ssi->tag_insert[ssi->tag_index]), &len,
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	899b      	ldrh	r3, [r3, #12]
 8005a20:	3318      	adds	r3, #24
 8005a22:	693a      	ldr	r2, [r7, #16]
 8005a24:	4413      	add	r3, r2
 8005a26:	1cd9      	adds	r1, r3, #3
 8005a28:	f107 020e 	add.w	r2, r7, #14
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f7ff f934 	bl	8004c9c <http_write>
 8005a34:	4603      	mov	r3, r0
 8005a36:	75fb      	strb	r3, [r7, #23]
                             HTTP_IS_TAG_VOLATILE(hs));
            if (err == ERR_OK) {
 8005a38:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d112      	bne.n	8005a66 <http_send_data_ssi+0x516>
              data_to_send = 1;
 8005a40:	2301      	movs	r3, #1
 8005a42:	75bb      	strb	r3, [r7, #22]
              ssi->tag_index += len;
 8005a44:	693b      	ldr	r3, [r7, #16]
 8005a46:	899a      	ldrh	r2, [r3, #12]
 8005a48:	89fb      	ldrh	r3, [r7, #14]
 8005a4a:	4413      	add	r3, r2
 8005a4c:	b29a      	uxth	r2, r3
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	819a      	strh	r2, [r3, #12]
 8005a52:	e008      	b.n	8005a66 <http_send_data_ssi+0x516>
#endif /* LWIP_HTTPD_SSI_MULTIPART */
            {
              /* We have sent all the insert data so go back to looking for
               * a new tag. */
              LWIP_DEBUGF(HTTPD_DEBUG, ("Everything sent.\n"));
              ssi->tag_index = 0;
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	2200      	movs	r2, #0
 8005a58:	819a      	strh	r2, [r3, #12]
              ssi->tag_state = TAG_NONE;
 8005a5a:	693b      	ldr	r3, [r7, #16]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
#if !LWIP_HTTPD_SSI_INCLUDE_TAG
              ssi->parsed = ssi->tag_end;
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
            }
          }
          break;
 8005a62:	e000      	b.n	8005a66 <http_send_data_ssi+0x516>
        default:
          break;
 8005a64:	bf00      	nop
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8005a6c:	2b04      	cmp	r3, #4
 8005a6e:	d003      	beq.n	8005a78 <http_send_data_ssi+0x528>
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	689b      	ldr	r3, [r3, #8]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d004      	beq.n	8005a82 <http_send_data_ssi+0x532>
 8005a78:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	f43f adbf 	beq.w	8005600 <http_send_data_ssi+0xb0>
  }

  /* If we drop out of the end of the for loop, this implies we must have
   * file data to send so send it now. In TAG_SENDING state, we've already
   * handled this so skip the send if that's the case. */
  if ((ssi->tag_state != TAG_SENDING) && (ssi->parsed > hs->file)) {
 8005a82:	693b      	ldr	r3, [r7, #16]
 8005a84:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8005a88:	2b04      	cmp	r3, #4
 8005a8a:	d034      	beq.n	8005af6 <http_send_data_ssi+0x5a6>
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	681a      	ldr	r2, [r3, #0]
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	699b      	ldr	r3, [r3, #24]
 8005a94:	429a      	cmp	r2, r3
 8005a96:	d92e      	bls.n	8005af6 <http_send_data_ssi+0x5a6>
      ssi->parsed = ssi->tag_started;
      ssi->tag_started = hs->buf;
    } else
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ && !LWIP_HTTPD_SSI_INCLUDE_TAG */
    {
      len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	681a      	ldr	r2, [r3, #0]
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	699b      	ldr	r3, [r3, #24]
 8005aa0:	1ad3      	subs	r3, r2, r3
 8005aa2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	dc06      	bgt.n	8005ab8 <http_send_data_ssi+0x568>
 8005aaa:	693b      	ldr	r3, [r7, #16]
 8005aac:	681a      	ldr	r2, [r3, #0]
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	699b      	ldr	r3, [r3, #24]
 8005ab2:	1ad3      	subs	r3, r2, r3
 8005ab4:	b29b      	uxth	r3, r3
 8005ab6:	e001      	b.n	8005abc <http_send_data_ssi+0x56c>
 8005ab8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005abc:	81fb      	strh	r3, [r7, #14]
    }

    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	6999      	ldr	r1, [r3, #24]
 8005ac2:	f107 020e 	add.w	r2, r7, #14
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	f7ff f8e7 	bl	8004c9c <http_write>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 8005ad2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d10d      	bne.n	8005af6 <http_send_data_ssi+0x5a6>
      data_to_send = 1;
 8005ada:	2301      	movs	r3, #1
 8005adc:	75bb      	strb	r3, [r7, #22]
      hs->file += len;
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	699b      	ldr	r3, [r3, #24]
 8005ae2:	89fa      	ldrh	r2, [r7, #14]
 8005ae4:	441a      	add	r2, r3
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	619a      	str	r2, [r3, #24]
      hs->left -= len;
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aee:	89fa      	ldrh	r2, [r7, #14]
 8005af0:	1a9a      	subs	r2, r3, r2
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	625a      	str	r2, [r3, #36]	; 0x24
    }
  }
  return data_to_send;
 8005af6:	7dbb      	ldrb	r3, [r7, #22]
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	3718      	adds	r7, #24
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bd80      	pop	{r7, pc}
 8005b00:	08017cd0 	.word	0x08017cd0

08005b04 <http_send>:
 * @param pcb the pcb to send data
 * @param hs connection state
 */
static u8_t
http_send(struct altcp_pcb *pcb, struct http_state *hs)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b084      	sub	sp, #16
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
 8005b0c:	6039      	str	r1, [r7, #0]
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	73fb      	strb	r3, [r7, #15]
    return 0;
  }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */

  /* If we were passed a NULL state structure pointer, ignore the call. */
  if (hs == NULL) {
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d101      	bne.n	8005b1c <http_send+0x18>
    return 0;
 8005b18:	2300      	movs	r3, #0
 8005b1a:	e048      	b.n	8005bae <http_send+0xaa>
  }
#endif /* LWIP_HTTPD_FS_ASYNC_READ */

#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Do we have any more header data to send for this file? */
  if (hs->hdr_index < NUM_FILE_HDR_STRINGS) {
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 8005b22:	2b04      	cmp	r3, #4
 8005b24:	d812      	bhi.n	8005b4c <http_send+0x48>
    data_to_send = http_send_headers(pcb, hs);
 8005b26:	6839      	ldr	r1, [r7, #0]
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	f7ff fbd7 	bl	80052dc <http_send_headers>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	73fb      	strb	r3, [r7, #15]
    if ((data_to_send == HTTP_DATA_TO_SEND_FREED) ||
 8005b32:	7bfb      	ldrb	r3, [r7, #15]
 8005b34:	2b03      	cmp	r3, #3
 8005b36:	d007      	beq.n	8005b48 <http_send+0x44>
 8005b38:	7bfb      	ldrb	r3, [r7, #15]
 8005b3a:	2b01      	cmp	r3, #1
 8005b3c:	d006      	beq.n	8005b4c <http_send+0x48>
        ((data_to_send != HTTP_DATA_TO_SEND_CONTINUE) &&
         (hs->hdr_index < NUM_FILE_HDR_STRINGS))) {
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
        ((data_to_send != HTTP_DATA_TO_SEND_CONTINUE) &&
 8005b44:	2b04      	cmp	r3, #4
 8005b46:	d801      	bhi.n	8005b4c <http_send+0x48>
      return data_to_send;
 8005b48:	7bfb      	ldrb	r3, [r7, #15]
 8005b4a:	e030      	b.n	8005bae <http_send+0xaa>
  }
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */

  /* Have we run out of file data to send? If so, we need to read the next
   * block from the file. */
  if (hs->left == 0) {
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d108      	bne.n	8005b66 <http_send+0x62>
    if (!http_check_eof(pcb, hs)) {
 8005b54:	6839      	ldr	r1, [r7, #0]
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f7ff fc94 	bl	8005484 <http_check_eof>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d101      	bne.n	8005b66 <http_send+0x62>
      return 0;
 8005b62:	2300      	movs	r3, #0
 8005b64:	e023      	b.n	8005bae <http_send+0xaa>
    }
  }

#if LWIP_HTTPD_SSI
  if (hs->ssi) {
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d006      	beq.n	8005b7c <http_send+0x78>
    data_to_send = http_send_data_ssi(pcb, hs);
 8005b6e:	6839      	ldr	r1, [r7, #0]
 8005b70:	6878      	ldr	r0, [r7, #4]
 8005b72:	f7ff fced 	bl	8005550 <http_send_data_ssi>
 8005b76:	4603      	mov	r3, r0
 8005b78:	73fb      	strb	r3, [r7, #15]
 8005b7a:	e005      	b.n	8005b88 <http_send+0x84>
  } else
#endif /* LWIP_HTTPD_SSI */
  {
    data_to_send = http_send_data_nonssi(pcb, hs);
 8005b7c:	6839      	ldr	r1, [r7, #0]
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f7ff fcb0 	bl	80054e4 <http_send_data_nonssi>
 8005b84:	4603      	mov	r3, r0
 8005b86:	73fb      	strb	r3, [r7, #15]
  }

  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d10d      	bne.n	8005bac <http_send+0xa8>
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	695b      	ldr	r3, [r3, #20]
 8005b94:	4618      	mov	r0, r3
 8005b96:	f7fe ffef 	bl	8004b78 <fs_bytes_left>
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	dc05      	bgt.n	8005bac <http_send+0xa8>
    /* We reached the end of the file so this request is done.
     * This adds the FIN flag right into the last data segment. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 8005ba0:	6839      	ldr	r1, [r7, #0]
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f7ff f945 	bl	8004e32 <http_eof>
    return 0;
 8005ba8:	2300      	movs	r3, #0
 8005baa:	e000      	b.n	8005bae <http_send+0xaa>
  }
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("send_data end.\n"));
  return data_to_send;
 8005bac:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3710      	adds	r7, #16
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}
	...

08005bb8 <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b084      	sub	sp, #16
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
 8005bc0:	6039      	str	r1, [r7, #0]
  err_t err;

  *uri = "/404.html";
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	4a1c      	ldr	r2, [pc, #112]	; (8005c38 <http_get_404_file+0x80>)
 8005bc6:	601a      	str	r2, [r3, #0]
  err = fs_open(&hs->file_handle, *uri);
 8005bc8:	687a      	ldr	r2, [r7, #4]
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4619      	mov	r1, r3
 8005bd0:	4610      	mov	r0, r2
 8005bd2:	f7fe ff89 	bl	8004ae8 <fs_open>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8005bda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d024      	beq.n	8005c2c <http_get_404_file+0x74>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	4a15      	ldr	r2, [pc, #84]	; (8005c3c <http_get_404_file+0x84>)
 8005be6:	601a      	str	r2, [r3, #0]
    err = fs_open(&hs->file_handle, *uri);
 8005be8:	687a      	ldr	r2, [r7, #4]
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4619      	mov	r1, r3
 8005bf0:	4610      	mov	r0, r2
 8005bf2:	f7fe ff79 	bl	8004ae8 <fs_open>
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8005bfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d014      	beq.n	8005c2c <http_get_404_file+0x74>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	4a0e      	ldr	r2, [pc, #56]	; (8005c40 <http_get_404_file+0x88>)
 8005c06:	601a      	str	r2, [r3, #0]
      err = fs_open(&hs->file_handle, *uri);
 8005c08:	687a      	ldr	r2, [r7, #4]
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4619      	mov	r1, r3
 8005c10:	4610      	mov	r0, r2
 8005c12:	f7fe ff69 	bl	8004ae8 <fs_open>
 8005c16:	4603      	mov	r3, r0
 8005c18:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 8005c1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d004      	beq.n	8005c2c <http_get_404_file+0x74>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	2200      	movs	r2, #0
 8005c26:	601a      	str	r2, [r3, #0]
        return NULL;
 8005c28:	2300      	movs	r3, #0
 8005c2a:	e000      	b.n	8005c2e <http_get_404_file+0x76>
      }
    }
  }

  return &hs->file_handle;
 8005c2c:	687b      	ldr	r3, [r7, #4]
}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	3710      	adds	r7, #16
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd80      	pop	{r7, pc}
 8005c36:	bf00      	nop
 8005c38:	08013444 	.word	0x08013444
 8005c3c:	08013450 	.word	0x08013450
 8005c40:	0801345c 	.word	0x0801345c

08005c44 <http_handle_post_finished>:

#if LWIP_HTTPD_SUPPORT_POST
static err_t
http_handle_post_finished(struct http_state *hs)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b082      	sub	sp, #8
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
  }
  hs->post_finished = 1;
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
  /* application error or POST finished */
  /* NULL-terminate the buffer */
  http_uri_buf[0] = 0;
 8005c4c:	4b08      	ldr	r3, [pc, #32]	; (8005c70 <http_handle_post_finished+0x2c>)
 8005c4e:	2200      	movs	r2, #0
 8005c50:	701a      	strb	r2, [r3, #0]
  httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 8005c52:	223f      	movs	r2, #63	; 0x3f
 8005c54:	4906      	ldr	r1, [pc, #24]	; (8005c70 <http_handle_post_finished+0x2c>)
 8005c56:	6878      	ldr	r0, [r7, #4]
 8005c58:	f7fa ff8c 	bl	8000b74 <httpd_post_finished>
  return http_find_file(hs, http_uri_buf, 0);
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	4904      	ldr	r1, [pc, #16]	; (8005c70 <http_handle_post_finished+0x2c>)
 8005c60:	6878      	ldr	r0, [r7, #4]
 8005c62:	f000 faab 	bl	80061bc <http_find_file>
 8005c66:	4603      	mov	r3, r0
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	3708      	adds	r7, #8
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bd80      	pop	{r7, pc}
 8005c70:	200004e8 	.word	0x200004e8

08005c74 <http_post_rxpbuf>:
 * @return ERR_OK if passed successfully, another err_t if the response file
 *         hasn't been found (after POST finished)
 */
static err_t
http_post_rxpbuf(struct http_state *hs, struct pbuf *p)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b084      	sub	sp, #16
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
 8005c7c:	6039      	str	r1, [r7, #0]
  err_t err;

  if (p != NULL) {
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d014      	beq.n	8005cae <http_post_rxpbuf+0x3a>
    /* adjust remaining Content-Length */
    if (hs->post_content_len_left < p->tot_len) {
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8005c8a:	683a      	ldr	r2, [r7, #0]
 8005c8c:	8912      	ldrh	r2, [r2, #8]
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d204      	bcs.n	8005c9c <http_post_rxpbuf+0x28>
      hs->post_content_len_left = 0;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2200      	movs	r2, #0
 8005c96:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8005c9a:	e008      	b.n	8005cae <http_post_rxpbuf+0x3a>
    } else {
      hs->post_content_len_left -= p->tot_len;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8005ca2:	683a      	ldr	r2, [r7, #0]
 8005ca4:	8912      	ldrh	r2, [r2, #8]
 8005ca6:	1a9a      	subs	r2, r3, r2
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  }
#if LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND
  /* prevent connection being closed if httpd_post_data_recved() is called nested */
  hs->unrecved_bytes++;
#endif
  if (p != NULL) {
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d006      	beq.n	8005cc2 <http_post_rxpbuf+0x4e>
    err = httpd_post_receive_data(hs, p);
 8005cb4:	6839      	ldr	r1, [r7, #0]
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	f7fa ff22 	bl	8000b00 <httpd_post_receive_data>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	73fb      	strb	r3, [r7, #15]
 8005cc0:	e001      	b.n	8005cc6 <http_post_rxpbuf+0x52>
  } else {
    err = ERR_OK;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	73fb      	strb	r3, [r7, #15]
  }
#if LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND
  hs->unrecved_bytes--;
#endif
  if (err != ERR_OK) {
 8005cc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d003      	beq.n	8005cd6 <http_post_rxpbuf+0x62>
    /* Ignore remaining content in case of application error */
    hs->post_content_len_left = 0;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  }
  if (hs->post_content_len_left == 0) {
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d104      	bne.n	8005cea <http_post_rxpbuf+0x76>
    if (hs->unrecved_bytes != 0) {
      return ERR_OK;
    }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
    /* application error or POST finished */
    return http_handle_post_finished(hs);
 8005ce0:	6878      	ldr	r0, [r7, #4]
 8005ce2:	f7ff ffaf 	bl	8005c44 <http_handle_post_finished>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	e000      	b.n	8005cec <http_post_rxpbuf+0x78>
  }

  return ERR_OK;
 8005cea:	2300      	movs	r3, #0
}
 8005cec:	4618      	mov	r0, r3
 8005cee:	3710      	adds	r7, #16
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	bd80      	pop	{r7, pc}

08005cf4 <http_post_request>:
 *         another err_t: Error parsing POST or denied by the application
 */
static err_t
http_post_request(struct pbuf *inp, struct http_state *hs,
                  char *data, u16_t data_len, char *uri, char *uri_end)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b092      	sub	sp, #72	; 0x48
 8005cf8:	af04      	add	r7, sp, #16
 8005cfa:	60f8      	str	r0, [r7, #12]
 8005cfc:	60b9      	str	r1, [r7, #8]
 8005cfe:	607a      	str	r2, [r7, #4]
 8005d00:	807b      	strh	r3, [r7, #2]
  err_t err;
  /* search for end-of-header (first double-CRLF) */
  char *crlfcrlf = lwip_strnstr(uri_end + 1, CRLF CRLF, data_len - (uri_end + 1 - data));
 8005d02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d04:	1c58      	adds	r0, r3, #1
 8005d06:	887a      	ldrh	r2, [r7, #2]
 8005d08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d0a:	1c59      	adds	r1, r3, #1
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	1acb      	subs	r3, r1, r3
 8005d10:	1ad3      	subs	r3, r2, r3
 8005d12:	461a      	mov	r2, r3
 8005d14:	4965      	ldr	r1, [pc, #404]	; (8005eac <http_post_request+0x1b8>)
 8005d16:	f000 fe6f 	bl	80069f8 <lwip_strnstr>
 8005d1a:	62b8      	str	r0, [r7, #40]	; 0x28

  if (crlfcrlf != NULL) {
 8005d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	f000 80be 	beq.w	8005ea0 <http_post_request+0x1ac>
    /* search for "Content-Length: " */
#define HTTP_HDR_CONTENT_LEN                "Content-Length: "
#define HTTP_HDR_CONTENT_LEN_LEN            16
#define HTTP_HDR_CONTENT_LEN_DIGIT_MAX_LEN  10
    char *scontent_len = lwip_strnstr(uri_end + 1, HTTP_HDR_CONTENT_LEN, crlfcrlf - (uri_end + 1));
 8005d24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d26:	1c58      	adds	r0, r3, #1
 8005d28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d2a:	3301      	adds	r3, #1
 8005d2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d2e:	1ad3      	subs	r3, r2, r3
 8005d30:	461a      	mov	r2, r3
 8005d32:	495f      	ldr	r1, [pc, #380]	; (8005eb0 <http_post_request+0x1bc>)
 8005d34:	f000 fe60 	bl	80069f8 <lwip_strnstr>
 8005d38:	6278      	str	r0, [r7, #36]	; 0x24
    if (scontent_len != NULL) {
 8005d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	f000 80ac 	beq.w	8005e9a <http_post_request+0x1a6>
      char *scontent_len_end = lwip_strnstr(scontent_len + HTTP_HDR_CONTENT_LEN_LEN, CRLF, HTTP_HDR_CONTENT_LEN_DIGIT_MAX_LEN);
 8005d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d44:	3310      	adds	r3, #16
 8005d46:	220a      	movs	r2, #10
 8005d48:	495a      	ldr	r1, [pc, #360]	; (8005eb4 <http_post_request+0x1c0>)
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f000 fe54 	bl	80069f8 <lwip_strnstr>
 8005d50:	6238      	str	r0, [r7, #32]
      if (scontent_len_end != NULL) {
 8005d52:	6a3b      	ldr	r3, [r7, #32]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	f000 80a0 	beq.w	8005e9a <http_post_request+0x1a6>
        int content_len;
        char *content_len_num = scontent_len + HTTP_HDR_CONTENT_LEN_LEN;
 8005d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d5c:	3310      	adds	r3, #16
 8005d5e:	61fb      	str	r3, [r7, #28]
        content_len = atoi(content_len_num);
 8005d60:	69f8      	ldr	r0, [r7, #28]
 8005d62:	f00b fa55 	bl	8011210 <atoi>
 8005d66:	6378      	str	r0, [r7, #52]	; 0x34
        if (content_len == 0) {
 8005d68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d10b      	bne.n	8005d86 <http_post_request+0x92>
          /* if atoi returns 0 on error, fix this */
          if ((content_len_num[0] != '0') || (content_len_num[1] != '\r')) {
 8005d6e:	69fb      	ldr	r3, [r7, #28]
 8005d70:	781b      	ldrb	r3, [r3, #0]
 8005d72:	2b30      	cmp	r3, #48	; 0x30
 8005d74:	d104      	bne.n	8005d80 <http_post_request+0x8c>
 8005d76:	69fb      	ldr	r3, [r7, #28]
 8005d78:	3301      	adds	r3, #1
 8005d7a:	781b      	ldrb	r3, [r3, #0]
 8005d7c:	2b0d      	cmp	r3, #13
 8005d7e:	d002      	beq.n	8005d86 <http_post_request+0x92>
            content_len = -1;
 8005d80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005d84:	637b      	str	r3, [r7, #52]	; 0x34
          }
        }
        if (content_len >= 0) {
 8005d86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	f2c0 8083 	blt.w	8005e94 <http_post_request+0x1a0>
          /* adjust length of HTTP header passed to application */
          const char *hdr_start_after_uri = uri_end + 1;
 8005d8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d90:	3301      	adds	r3, #1
 8005d92:	61bb      	str	r3, [r7, #24]
          u16_t hdr_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - data);
 8005d94:	887a      	ldrh	r2, [r7, #2]
 8005d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d98:	1d19      	adds	r1, r3, #4
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	1acb      	subs	r3, r1, r3
 8005d9e:	429a      	cmp	r2, r3
 8005da0:	db05      	blt.n	8005dae <http_post_request+0xba>
 8005da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005da4:	1d1a      	adds	r2, r3, #4
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	1ad3      	subs	r3, r2, r3
 8005daa:	b29b      	uxth	r3, r3
 8005dac:	e000      	b.n	8005db0 <http_post_request+0xbc>
 8005dae:	887b      	ldrh	r3, [r7, #2]
 8005db0:	82fb      	strh	r3, [r7, #22]
          u16_t hdr_data_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - hdr_start_after_uri);
 8005db2:	887a      	ldrh	r2, [r7, #2]
 8005db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005db6:	1d19      	adds	r1, r3, #4
 8005db8:	69bb      	ldr	r3, [r7, #24]
 8005dba:	1acb      	subs	r3, r1, r3
 8005dbc:	429a      	cmp	r2, r3
 8005dbe:	db05      	blt.n	8005dcc <http_post_request+0xd8>
 8005dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dc2:	1d1a      	adds	r2, r3, #4
 8005dc4:	69bb      	ldr	r3, [r7, #24]
 8005dc6:	1ad3      	subs	r3, r2, r3
 8005dc8:	b29b      	uxth	r3, r3
 8005dca:	e000      	b.n	8005dce <http_post_request+0xda>
 8005dcc:	887b      	ldrh	r3, [r7, #2]
 8005dce:	82bb      	strh	r3, [r7, #20]
          u8_t post_auto_wnd = 1;
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	74bb      	strb	r3, [r7, #18]
          http_uri_buf[0] = 0;
 8005dd4:	4b38      	ldr	r3, [pc, #224]	; (8005eb8 <http_post_request+0x1c4>)
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	701a      	strb	r2, [r3, #0]
          /* trim http header */
          *crlfcrlf = 0;
 8005dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ddc:	2200      	movs	r2, #0
 8005dde:	701a      	strb	r2, [r3, #0]
          err = httpd_post_begin(hs, uri, hdr_start_after_uri, hdr_data_len, content_len,
 8005de0:	8aba      	ldrh	r2, [r7, #20]
 8005de2:	f107 0312 	add.w	r3, r7, #18
 8005de6:	9303      	str	r3, [sp, #12]
 8005de8:	233f      	movs	r3, #63	; 0x3f
 8005dea:	9302      	str	r3, [sp, #8]
 8005dec:	4b32      	ldr	r3, [pc, #200]	; (8005eb8 <http_post_request+0x1c4>)
 8005dee:	9301      	str	r3, [sp, #4]
 8005df0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005df2:	9300      	str	r3, [sp, #0]
 8005df4:	4613      	mov	r3, r2
 8005df6:	69ba      	ldr	r2, [r7, #24]
 8005df8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005dfa:	68b8      	ldr	r0, [r7, #8]
 8005dfc:	f7fa fe12 	bl	8000a24 <httpd_post_begin>
 8005e00:	4603      	mov	r3, r0
 8005e02:	74fb      	strb	r3, [r7, #19]
                                 http_uri_buf, LWIP_HTTPD_URI_BUF_LEN, &post_auto_wnd);
          if (err == ERR_OK) {
 8005e04:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d13c      	bne.n	8005e86 <http_post_request+0x192>
            /* try to pass in data of the first pbuf(s) */
            struct pbuf *q = inp;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	633b      	str	r3, [r7, #48]	; 0x30
            u16_t start_offset = hdr_len;
 8005e10:	8afb      	ldrh	r3, [r7, #22]
 8005e12:	85fb      	strh	r3, [r7, #46]	; 0x2e
#if LWIP_HTTPD_POST_MANUAL_WND
            hs->no_auto_wnd = !post_auto_wnd;
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
            /* set the Content-Length to be received for this POST */
            hs->post_content_len_left = (u32_t)content_len;
 8005e14:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

            /* get to the pbuf where the body starts */
            while ((q != NULL) && (q->len <= start_offset)) {
 8005e1c:	e007      	b.n	8005e2e <http_post_request+0x13a>
              start_offset -= q->len;
 8005e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e20:	895b      	ldrh	r3, [r3, #10]
 8005e22:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005e24:	1ad3      	subs	r3, r2, r3
 8005e26:	85fb      	strh	r3, [r7, #46]	; 0x2e
              q = q->next;
 8005e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	633b      	str	r3, [r7, #48]	; 0x30
            while ((q != NULL) && (q->len <= start_offset)) {
 8005e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d004      	beq.n	8005e3e <http_post_request+0x14a>
 8005e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e36:	895b      	ldrh	r3, [r3, #10]
 8005e38:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005e3a:	429a      	cmp	r2, r3
 8005e3c:	d2ef      	bcs.n	8005e1e <http_post_request+0x12a>
            }
            if (q != NULL) {
 8005e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d00d      	beq.n	8005e60 <http_post_request+0x16c>
              /* hide the remaining HTTP header */
              pbuf_remove_header(q, start_offset);
 8005e44:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005e46:	4619      	mov	r1, r3
 8005e48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005e4a:	f002 f8b3 	bl	8007fb4 <pbuf_remove_header>
              if (!post_auto_wnd) {
                /* already tcp_recved() this data... */
                hs->unrecved_bytes = q->tot_len;
              }
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
              pbuf_ref(q);
 8005e4e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005e50:	f002 f9d6 	bl	8008200 <pbuf_ref>
              return http_post_rxpbuf(hs, q);
 8005e54:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005e56:	68b8      	ldr	r0, [r7, #8]
 8005e58:	f7ff ff0c 	bl	8005c74 <http_post_rxpbuf>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	e021      	b.n	8005ea4 <http_post_request+0x1b0>
            } else if (hs->post_content_len_left == 0) {
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d10b      	bne.n	8005e82 <http_post_request+0x18e>
              q = pbuf_alloc(PBUF_RAW, 0, PBUF_REF);
 8005e6a:	2241      	movs	r2, #65	; 0x41
 8005e6c:	2100      	movs	r1, #0
 8005e6e:	2000      	movs	r0, #0
 8005e70:	f001 fe42 	bl	8007af8 <pbuf_alloc>
 8005e74:	6338      	str	r0, [r7, #48]	; 0x30
              return http_post_rxpbuf(hs, q);
 8005e76:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005e78:	68b8      	ldr	r0, [r7, #8]
 8005e7a:	f7ff fefb 	bl	8005c74 <http_post_rxpbuf>
 8005e7e:	4603      	mov	r3, r0
 8005e80:	e010      	b.n	8005ea4 <http_post_request+0x1b0>
            } else {
              return ERR_OK;
 8005e82:	2300      	movs	r3, #0
 8005e84:	e00e      	b.n	8005ea4 <http_post_request+0x1b0>
            }
          } else {
            /* return file passed from application */
            return http_find_file(hs, http_uri_buf, 0);
 8005e86:	2200      	movs	r2, #0
 8005e88:	490b      	ldr	r1, [pc, #44]	; (8005eb8 <http_post_request+0x1c4>)
 8005e8a:	68b8      	ldr	r0, [r7, #8]
 8005e8c:	f000 f996 	bl	80061bc <http_find_file>
 8005e90:	4603      	mov	r3, r0
 8005e92:	e007      	b.n	8005ea4 <http_post_request+0x1b0>
          }
        } else {
          LWIP_DEBUGF(HTTPD_DEBUG, ("POST received invalid Content-Length: %s\n",
                                    content_len_num));
          return ERR_ARG;
 8005e94:	f06f 030f 	mvn.w	r3, #15
 8005e98:	e004      	b.n	8005ea4 <http_post_request+0x1b0>
    }
    /* If we come here, headers are fully received (double-crlf), but Content-Length
       was not included. Since this is currently the only supported method, we have
       to fail in this case! */
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error when parsing Content-Length\n"));
    return ERR_ARG;
 8005e9a:	f06f 030f 	mvn.w	r3, #15
 8005e9e:	e001      	b.n	8005ea4 <http_post_request+0x1b0>
  }
  /* if we come here, the POST is incomplete */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  return ERR_INPROGRESS;
 8005ea0:	f06f 0304 	mvn.w	r3, #4
#else /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  return ERR_ARG;
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	3738      	adds	r7, #56	; 0x38
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd80      	pop	{r7, pc}
 8005eac:	08013468 	.word	0x08013468
 8005eb0:	08012f0c 	.word	0x08012f0c
 8005eb4:	080133f0 	.word	0x080133f0
 8005eb8:	200004e8 	.word	0x200004e8

08005ebc <http_parse_request>:
 *         ERR_INPROGRESS if request was OK so far but not fully received
 *         another err_t otherwise
 */
static err_t
http_parse_request(struct pbuf *inp, struct http_state *hs, struct altcp_pcb *pcb)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b092      	sub	sp, #72	; 0x48
 8005ec0:	af02      	add	r7, sp, #8
 8005ec2:	60f8      	str	r0, [r7, #12]
 8005ec4:	60b9      	str	r1, [r7, #8]
 8005ec6:	607a      	str	r2, [r7, #4]
  char *data;
  char *crlf;
  u16_t data_len;
  struct pbuf *p = inp;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	627b      	str	r3, [r7, #36]	; 0x24
#if LWIP_HTTPD_SUPPORT_POST
  err_t err;
#endif /* LWIP_HTTPD_SUPPORT_POST */

  LWIP_UNUSED_ARG(pcb); /* only used for post */
  LWIP_ASSERT("p != NULL", p != NULL);
 8005ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d106      	bne.n	8005ee0 <http_parse_request+0x24>
 8005ed2:	4b87      	ldr	r3, [pc, #540]	; (80060f0 <http_parse_request+0x234>)
 8005ed4:	f240 72ae 	movw	r2, #1966	; 0x7ae
 8005ed8:	4986      	ldr	r1, [pc, #536]	; (80060f4 <http_parse_request+0x238>)
 8005eda:	4887      	ldr	r0, [pc, #540]	; (80060f8 <http_parse_request+0x23c>)
 8005edc:	f00b fab8 	bl	8011450 <iprintf>
  LWIP_ASSERT("hs != NULL", hs != NULL);
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d106      	bne.n	8005ef4 <http_parse_request+0x38>
 8005ee6:	4b82      	ldr	r3, [pc, #520]	; (80060f0 <http_parse_request+0x234>)
 8005ee8:	f240 72af 	movw	r2, #1967	; 0x7af
 8005eec:	4983      	ldr	r1, [pc, #524]	; (80060fc <http_parse_request+0x240>)
 8005eee:	4882      	ldr	r0, [pc, #520]	; (80060f8 <http_parse_request+0x23c>)
 8005ef0:	f00b faae 	bl	8011450 <iprintf>

  if ((hs->handle != NULL) || (hs->file != NULL)) {
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	695b      	ldr	r3, [r3, #20]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d103      	bne.n	8005f04 <http_parse_request+0x48>
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	699b      	ldr	r3, [r3, #24]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d002      	beq.n	8005f0a <http_parse_request+0x4e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Received data while sending a file\n"));
    /* already sending a file */
    /* @todo: abort? */
    return ERR_USE;
 8005f04:	f06f 0307 	mvn.w	r3, #7
 8005f08:	e0ed      	b.n	80060e6 <http_parse_request+0x22a>
  LWIP_DEBUGF(HTTPD_DEBUG, ("Received %"U16_F" bytes\n", p->tot_len));

  /* first check allowed characters in this pbuf? */

  /* enqueue the pbuf */
  if (hs->req == NULL) {
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	6a1b      	ldr	r3, [r3, #32]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d103      	bne.n	8005f1a <http_parse_request+0x5e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("First pbuf\n"));
    hs->req = p;
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f16:	621a      	str	r2, [r3, #32]
 8005f18:	e005      	b.n	8005f26 <http_parse_request+0x6a>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG, ("pbuf enqueued\n"));
    pbuf_cat(hs->req, p);
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	6a1b      	ldr	r3, [r3, #32]
 8005f1e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005f20:	4618      	mov	r0, r3
 8005f22:	f002 f98f 	bl	8008244 <pbuf_cat>
  }
  /* increase pbuf ref counter as it is freed when we return but we want to
     keep it on the req list */
  pbuf_ref(p);
 8005f26:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005f28:	f002 f96a 	bl	8008200 <pbuf_ref>

  if (hs->req->next != NULL) {
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	6a1b      	ldr	r3, [r3, #32]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d012      	beq.n	8005f5c <http_parse_request+0xa0>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	6a1b      	ldr	r3, [r3, #32]
 8005f3a:	891b      	ldrh	r3, [r3, #8]
 8005f3c:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8005f40:	4293      	cmp	r3, r2
 8005f42:	bf28      	it	cs
 8005f44:	4613      	movcs	r3, r2
 8005f46:	877b      	strh	r3, [r7, #58]	; 0x3a
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	6a18      	ldr	r0, [r3, #32]
 8005f4c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8005f4e:	2300      	movs	r3, #0
 8005f50:	496b      	ldr	r1, [pc, #428]	; (8006100 <http_parse_request+0x244>)
 8005f52:	f002 fa9f 	bl	8008494 <pbuf_copy_partial>
    data = httpd_req_buf;
 8005f56:	4b6a      	ldr	r3, [pc, #424]	; (8006100 <http_parse_request+0x244>)
 8005f58:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f5a:	e005      	b.n	8005f68 <http_parse_request+0xac>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
    data = (char *)p->payload;
 8005f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f5e:	685b      	ldr	r3, [r3, #4]
 8005f60:	63fb      	str	r3, [r7, #60]	; 0x3c
    data_len = p->len;
 8005f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f64:	895b      	ldrh	r3, [r3, #10]
 8005f66:	877b      	strh	r3, [r7, #58]	; 0x3a
      LWIP_DEBUGF(HTTPD_DEBUG, ("Warning: incomplete header due to chained pbufs\n"));
    }
  }

  /* received enough data for minimal request? */
  if (data_len >= MIN_REQ_LEN) {
 8005f68:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005f6a:	2b06      	cmp	r3, #6
 8005f6c:	f240 80a1 	bls.w	80060b2 <http_parse_request+0x1f6>
    /* wait for CRLF before parsing anything */
    crlf = lwip_strnstr(data, CRLF, data_len);
 8005f70:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005f72:	461a      	mov	r2, r3
 8005f74:	4963      	ldr	r1, [pc, #396]	; (8006104 <http_parse_request+0x248>)
 8005f76:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8005f78:	f000 fd3e 	bl	80069f8 <lwip_strnstr>
 8005f7c:	6238      	str	r0, [r7, #32]
    if (crlf != NULL) {
 8005f7e:	6a3b      	ldr	r3, [r7, #32]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	f000 8096 	beq.w	80060b2 <http_parse_request+0x1f6>
#if LWIP_HTTPD_SUPPORT_POST
      int is_post = 0;
 8005f86:	2300      	movs	r3, #0
 8005f88:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LWIP_HTTPD_SUPPORT_POST */
      int is_09 = 0;
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	633b      	str	r3, [r7, #48]	; 0x30
      char *sp1, *sp2;
      u16_t left_len, uri_len;
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("CRLF received, parsing request\n"));
      /* parse method */
      if (!strncmp(data, "GET ", 4)) {
 8005f8e:	2204      	movs	r2, #4
 8005f90:	495d      	ldr	r1, [pc, #372]	; (8006108 <http_parse_request+0x24c>)
 8005f92:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8005f94:	f00b fb7e 	bl	8011694 <strncmp>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d103      	bne.n	8005fa6 <http_parse_request+0xea>
        sp1 = data + 3;
 8005f9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fa0:	3303      	adds	r3, #3
 8005fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005fa4:	e014      	b.n	8005fd0 <http_parse_request+0x114>
        /* received GET request */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Received GET request\"\n"));
#if LWIP_HTTPD_SUPPORT_POST
      } else if (!strncmp(data, "POST ", 5)) {
 8005fa6:	2205      	movs	r2, #5
 8005fa8:	4958      	ldr	r1, [pc, #352]	; (800610c <http_parse_request+0x250>)
 8005faa:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8005fac:	f00b fb72 	bl	8011694 <strncmp>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d105      	bne.n	8005fc2 <http_parse_request+0x106>
        /* store request type */
        is_post = 1;
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	637b      	str	r3, [r7, #52]	; 0x34
        sp1 = data + 4;
 8005fba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fbc:	3304      	adds	r3, #4
 8005fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005fc0:	e006      	b.n	8005fd0 <http_parse_request+0x114>
        /* received GET request */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Received POST request\n"));
#endif /* LWIP_HTTPD_SUPPORT_POST */
      } else {
        /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
        data[4] = 0;
 8005fc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fc4:	3304      	adds	r3, #4
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	701a      	strb	r2, [r3, #0]
        /* unsupported method! */
        LWIP_DEBUGF(HTTPD_DEBUG, ("Unsupported request method (not implemented): \"%s\"\n",
                                  data));
        return http_find_error_file(hs, 501);
 8005fca:	f06f 030f 	mvn.w	r3, #15
 8005fce:	e08a      	b.n	80060e6 <http_parse_request+0x22a>
      }
      /* if we come here, method is OK, parse URI */
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 8005fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fd2:	1c5a      	adds	r2, r3, #1
 8005fd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fd6:	1ad3      	subs	r3, r2, r3
 8005fd8:	b29b      	uxth	r3, r3
 8005fda:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8005fdc:	1ad3      	subs	r3, r2, r3
 8005fde:	83fb      	strh	r3, [r7, #30]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 8005fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fe2:	3301      	adds	r3, #1
 8005fe4:	8bfa      	ldrh	r2, [r7, #30]
 8005fe6:	494a      	ldr	r1, [pc, #296]	; (8006110 <http_parse_request+0x254>)
 8005fe8:	4618      	mov	r0, r3
 8005fea:	f000 fd05 	bl	80069f8 <lwip_strnstr>
 8005fee:	62b8      	str	r0, [r7, #40]	; 0x28
#if LWIP_HTTPD_SUPPORT_V09
      if (sp2 == NULL) {
 8005ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d10c      	bne.n	8006010 <http_parse_request+0x154>
        /* HTTP 0.9: respond with correct protocol version */
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 8005ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ff8:	3301      	adds	r3, #1
 8005ffa:	8bfa      	ldrh	r2, [r7, #30]
 8005ffc:	4941      	ldr	r1, [pc, #260]	; (8006104 <http_parse_request+0x248>)
 8005ffe:	4618      	mov	r0, r3
 8006000:	f000 fcfa 	bl	80069f8 <lwip_strnstr>
 8006004:	62b8      	str	r0, [r7, #40]	; 0x28
        is_09 = 1;
 8006006:	2301      	movs	r3, #1
 8006008:	633b      	str	r3, [r7, #48]	; 0x30
#if LWIP_HTTPD_SUPPORT_POST
        if (is_post) {
 800600a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800600c:	2b00      	cmp	r3, #0
 800600e:	d163      	bne.n	80060d8 <http_parse_request+0x21c>
          goto badrequest;
        }
#endif /* LWIP_HTTPD_SUPPORT_POST */
      }
#endif /* LWIP_HTTPD_SUPPORT_V09 */
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 8006010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006012:	3301      	adds	r3, #1
 8006014:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006016:	1ad3      	subs	r3, r2, r3
 8006018:	83bb      	strh	r3, [r7, #28]
      if ((sp2 != 0) && (sp2 > sp1)) {
 800601a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800601c:	2b00      	cmp	r3, #0
 800601e:	d048      	beq.n	80060b2 <http_parse_request+0x1f6>
 8006020:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006024:	429a      	cmp	r2, r3
 8006026:	d944      	bls.n	80060b2 <http_parse_request+0x1f6>
        /* wait for CRLFCRLF (indicating end of HTTP headers) before parsing anything */
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 8006028:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800602a:	461a      	mov	r2, r3
 800602c:	4939      	ldr	r1, [pc, #228]	; (8006114 <http_parse_request+0x258>)
 800602e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006030:	f000 fce2 	bl	80069f8 <lwip_strnstr>
 8006034:	4603      	mov	r3, r0
 8006036:	2b00      	cmp	r3, #0
 8006038:	d03b      	beq.n	80060b2 <http_parse_request+0x1f6>
          char *uri = sp1 + 1;
 800603a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800603c:	3301      	adds	r3, #1
 800603e:	61bb      	str	r3, [r7, #24]
          } else {
            hs->keepalive = 0;
          }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
          /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
          *sp1 = 0;
 8006040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006042:	2200      	movs	r2, #0
 8006044:	701a      	strb	r2, [r3, #0]
          uri[uri_len] = 0;
 8006046:	8bbb      	ldrh	r3, [r7, #28]
 8006048:	69ba      	ldr	r2, [r7, #24]
 800604a:	4413      	add	r3, r2
 800604c:	2200      	movs	r2, #0
 800604e:	701a      	strb	r2, [r3, #0]
          LWIP_DEBUGF(HTTPD_DEBUG, ("Received \"%s\" request for URI: \"%s\"\n",
                                    data, uri));
#if LWIP_HTTPD_SUPPORT_POST
          if (is_post) {
 8006050:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006052:	2b00      	cmp	r3, #0
 8006054:	d026      	beq.n	80060a4 <http_parse_request+0x1e8>
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
            struct pbuf *q = hs->req;
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	6a1b      	ldr	r3, [r3, #32]
 800605a:	617b      	str	r3, [r7, #20]
#else /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
            struct pbuf *q = inp;
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
            err = http_post_request(q, hs, data, data_len, uri, sp2);
 800605c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800605e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006060:	9301      	str	r3, [sp, #4]
 8006062:	69bb      	ldr	r3, [r7, #24]
 8006064:	9300      	str	r3, [sp, #0]
 8006066:	4613      	mov	r3, r2
 8006068:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800606a:	68b9      	ldr	r1, [r7, #8]
 800606c:	6978      	ldr	r0, [r7, #20]
 800606e:	f7ff fe41 	bl	8005cf4 <http_post_request>
 8006072:	4603      	mov	r3, r0
 8006074:	74fb      	strb	r3, [r7, #19]
            if (err != ERR_OK) {
 8006076:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d00a      	beq.n	8006094 <http_parse_request+0x1d8>
              /* restore header for next try */
              *sp1 = ' ';
 800607e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006080:	2220      	movs	r2, #32
 8006082:	701a      	strb	r2, [r3, #0]
              *sp2 = ' ';
 8006084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006086:	2220      	movs	r2, #32
 8006088:	701a      	strb	r2, [r3, #0]
              uri[uri_len] = ' ';
 800608a:	8bbb      	ldrh	r3, [r7, #28]
 800608c:	69ba      	ldr	r2, [r7, #24]
 800608e:	4413      	add	r3, r2
 8006090:	2220      	movs	r2, #32
 8006092:	701a      	strb	r2, [r3, #0]
            }
            if (err == ERR_ARG) {
 8006094:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006098:	f113 0f10 	cmn.w	r3, #16
 800609c:	d01e      	beq.n	80060dc <http_parse_request+0x220>
              goto badrequest;
            }
            return err;
 800609e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80060a2:	e020      	b.n	80060e6 <http_parse_request+0x22a>
          } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
          {
            return http_find_file(hs, uri, is_09);
 80060a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060a6:	69b9      	ldr	r1, [r7, #24]
 80060a8:	68b8      	ldr	r0, [r7, #8]
 80060aa:	f000 f887 	bl	80061bc <http_find_file>
 80060ae:	4603      	mov	r3, r0
 80060b0:	e019      	b.n	80060e6 <http_parse_request+0x22a>
      }
    }
  }

#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  clen = pbuf_clen(hs->req);
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	6a1b      	ldr	r3, [r3, #32]
 80060b6:	4618      	mov	r0, r3
 80060b8:	f002 f88a 	bl	80081d0 <pbuf_clen>
 80060bc:	4603      	mov	r3, r0
 80060be:	823b      	strh	r3, [r7, #16]
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	6a1b      	ldr	r3, [r3, #32]
 80060c4:	891b      	ldrh	r3, [r3, #8]
 80060c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060ca:	d209      	bcs.n	80060e0 <http_parse_request+0x224>
 80060cc:	8a3b      	ldrh	r3, [r7, #16]
 80060ce:	2b05      	cmp	r3, #5
 80060d0:	d806      	bhi.n	80060e0 <http_parse_request+0x224>
      (clen <= LWIP_HTTPD_REQ_QUEUELEN)) {
    /* request not fully received (too short or CRLF is missing) */
    return ERR_INPROGRESS;
 80060d2:	f06f 0304 	mvn.w	r3, #4
 80060d6:	e006      	b.n	80060e6 <http_parse_request+0x22a>
          goto badrequest;
 80060d8:	bf00      	nop
 80060da:	e002      	b.n	80060e2 <http_parse_request+0x226>
              goto badrequest;
 80060dc:	bf00      	nop
 80060de:	e000      	b.n	80060e2 <http_parse_request+0x226>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
#if LWIP_HTTPD_SUPPORT_POST
badrequest:
 80060e0:	bf00      	nop
#endif /* LWIP_HTTPD_SUPPORT_POST */
    LWIP_DEBUGF(HTTPD_DEBUG, ("bad request\n"));
    /* could not parse request */
    return http_find_error_file(hs, 400);
 80060e2:	f06f 030f 	mvn.w	r3, #15
  }
}
 80060e6:	4618      	mov	r0, r3
 80060e8:	3740      	adds	r7, #64	; 0x40
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}
 80060ee:	bf00      	nop
 80060f0:	080132fc 	.word	0x080132fc
 80060f4:	08013470 	.word	0x08013470
 80060f8:	08013344 	.word	0x08013344
 80060fc:	0801336c 	.word	0x0801336c
 8006100:	200000e8 	.word	0x200000e8
 8006104:	080133f0 	.word	0x080133f0
 8006108:	0801347c 	.word	0x0801347c
 800610c:	08013484 	.word	0x08013484
 8006110:	0801348c 	.word	0x0801348c
 8006114:	08013468 	.word	0x08013468

08006118 <http_uri_is_ssi>:
 *
 * @return 1 for SSI, 0 for standard files
 */
static u8_t
http_uri_is_ssi(struct fs_file *file, const char *uri)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b088      	sub	sp, #32
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
 8006120:	6039      	str	r1, [r7, #0]
  size_t loop;
  u8_t tag_check = 0;
 8006122:	2300      	movs	r3, #0
 8006124:	76fb      	strb	r3, [r7, #27]
  if (file != NULL) {
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d040      	beq.n	80061ae <http_uri_is_ssi+0x96>
    /* See if we have been asked for an shtml file and, if so,
        enable tag checking. */
    const char *ext = NULL, *sub;
 800612c:	2300      	movs	r3, #0
 800612e:	617b      	str	r3, [r7, #20]
    char *param = (char *)strstr(uri, "?");
 8006130:	213f      	movs	r1, #63	; 0x3f
 8006132:	6838      	ldr	r0, [r7, #0]
 8006134:	f00b fa99 	bl	801166a <strchr>
 8006138:	60f8      	str	r0, [r7, #12]
    if (param != NULL) {
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d002      	beq.n	8006146 <http_uri_is_ssi+0x2e>
      /* separate uri from parameters for now, set back later */
      *param = 0;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	2200      	movs	r2, #0
 8006144:	701a      	strb	r2, [r3, #0]
    }
    sub = uri;
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	613b      	str	r3, [r7, #16]
    ext = uri;
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	617b      	str	r3, [r7, #20]
    for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, ".")) {
 800614e:	212e      	movs	r1, #46	; 0x2e
 8006150:	6938      	ldr	r0, [r7, #16]
 8006152:	f00b fa8a 	bl	801166a <strchr>
 8006156:	6138      	str	r0, [r7, #16]
 8006158:	e009      	b.n	800616e <http_uri_is_ssi+0x56>
      ext = sub;
 800615a:	693b      	ldr	r3, [r7, #16]
 800615c:	617b      	str	r3, [r7, #20]
      sub++;
 800615e:	693b      	ldr	r3, [r7, #16]
 8006160:	3301      	adds	r3, #1
 8006162:	613b      	str	r3, [r7, #16]
    for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, ".")) {
 8006164:	212e      	movs	r1, #46	; 0x2e
 8006166:	6938      	ldr	r0, [r7, #16]
 8006168:	f00b fa7f 	bl	801166a <strchr>
 800616c:	6138      	str	r0, [r7, #16]
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d1f2      	bne.n	800615a <http_uri_is_ssi+0x42>
    }
    for (loop = 0; loop < NUM_SHTML_EXTENSIONS; loop++) {
 8006174:	2300      	movs	r3, #0
 8006176:	61fb      	str	r3, [r7, #28]
 8006178:	e010      	b.n	800619c <http_uri_is_ssi+0x84>
      if (!lwip_stricmp(ext, g_pcSSIExtensions[loop])) {
 800617a:	4a0f      	ldr	r2, [pc, #60]	; (80061b8 <http_uri_is_ssi+0xa0>)
 800617c:	69fb      	ldr	r3, [r7, #28]
 800617e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006182:	4619      	mov	r1, r3
 8006184:	6978      	ldr	r0, [r7, #20]
 8006186:	f000 fc6d 	bl	8006a64 <lwip_stricmp>
 800618a:	4603      	mov	r3, r0
 800618c:	2b00      	cmp	r3, #0
 800618e:	d102      	bne.n	8006196 <http_uri_is_ssi+0x7e>
        tag_check = 1;
 8006190:	2301      	movs	r3, #1
 8006192:	76fb      	strb	r3, [r7, #27]
        break;
 8006194:	e005      	b.n	80061a2 <http_uri_is_ssi+0x8a>
    for (loop = 0; loop < NUM_SHTML_EXTENSIONS; loop++) {
 8006196:	69fb      	ldr	r3, [r7, #28]
 8006198:	3301      	adds	r3, #1
 800619a:	61fb      	str	r3, [r7, #28]
 800619c:	69fb      	ldr	r3, [r7, #28]
 800619e:	2b04      	cmp	r3, #4
 80061a0:	d9eb      	bls.n	800617a <http_uri_is_ssi+0x62>
      }
    }
    if (param != NULL) {
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d002      	beq.n	80061ae <http_uri_is_ssi+0x96>
      *param = '?';
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	223f      	movs	r2, #63	; 0x3f
 80061ac:	701a      	strb	r2, [r3, #0]
    }
  }
  return tag_check;
 80061ae:	7efb      	ldrb	r3, [r7, #27]
}
 80061b0:	4618      	mov	r0, r3
 80061b2:	3720      	adds	r7, #32
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bd80      	pop	{r7, pc}
 80061b8:	08017c94 	.word	0x08017c94

080061bc <http_find_file>:
 * @return ERR_OK if file was found and hs has been initialized correctly
 *         another err_t otherwise
 */
static err_t
http_find_file(struct http_state *hs, const char *uri, int is_09)
{
 80061bc:	b590      	push	{r4, r7, lr}
 80061be:	b093      	sub	sp, #76	; 0x4c
 80061c0:	af02      	add	r7, sp, #8
 80061c2:	60f8      	str	r0, [r7, #12]
 80061c4:	60b9      	str	r1, [r7, #8]
 80061c6:	607a      	str	r2, [r7, #4]
  size_t loop;
  struct fs_file *file = NULL;
 80061c8:	2300      	movs	r3, #0
 80061ca:	63bb      	str	r3, [r7, #56]	; 0x38
  char *params = NULL;
 80061cc:	2300      	movs	r3, #0
 80061ce:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LWIP_HTTPD_CGI */
#if !LWIP_HTTPD_SSI
  const
#endif /* !LWIP_HTTPD_SSI */
  /* By default, assume we will not be processing server-side-includes tags */
  u8_t tag_check = 0;
 80061d0:	2300      	movs	r3, #0
 80061d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Have we been asked for the default file (in root or a directory) ? */
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
  size_t uri_len = strlen(uri);
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	4618      	mov	r0, r3
 80061da:	f7fa f803 	bl	80001e4 <strlen>
 80061de:	6278      	str	r0, [r7, #36]	; 0x24
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 80061e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d072      	beq.n	80062cc <http_find_file+0x110>
 80061e6:	68ba      	ldr	r2, [r7, #8]
 80061e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ea:	3b01      	subs	r3, #1
 80061ec:	4413      	add	r3, r2
 80061ee:	781b      	ldrb	r3, [r3, #0]
 80061f0:	2b2f      	cmp	r3, #47	; 0x2f
 80061f2:	d16b      	bne.n	80062cc <http_find_file+0x110>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 80061f4:	68bb      	ldr	r3, [r7, #8]
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 80061f6:	4a80      	ldr	r2, [pc, #512]	; (80063f8 <http_find_file+0x23c>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d102      	bne.n	8006202 <http_find_file+0x46>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 80061fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061fe:	2b01      	cmp	r3, #1
 8006200:	d164      	bne.n	80062cc <http_find_file+0x110>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 8006202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006204:	3b01      	subs	r3, #1
 8006206:	2b3f      	cmp	r3, #63	; 0x3f
 8006208:	bf28      	it	cs
 800620a:	233f      	movcs	r3, #63	; 0x3f
 800620c:	623b      	str	r3, [r7, #32]
    if (copy_len > 0) {
 800620e:	6a3b      	ldr	r3, [r7, #32]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d00a      	beq.n	800622a <http_find_file+0x6e>
      MEMCPY(http_uri_buf, uri, copy_len);
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	6a3a      	ldr	r2, [r7, #32]
 8006218:	4619      	mov	r1, r3
 800621a:	4877      	ldr	r0, [pc, #476]	; (80063f8 <http_find_file+0x23c>)
 800621c:	f00b f83e 	bl	801129c <memcpy>
      http_uri_buf[copy_len] = 0;
 8006220:	4a75      	ldr	r2, [pc, #468]	; (80063f8 <http_find_file+0x23c>)
 8006222:	6a3b      	ldr	r3, [r7, #32]
 8006224:	4413      	add	r3, r2
 8006226:	2200      	movs	r2, #0
 8006228:	701a      	strb	r2, [r3, #0]
#else /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
  if ((uri[0] == '/') &&  (uri[1] == 0)) {
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
    /* Try each of the configured default filenames until we find one
       that exists. */
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800622a:	2300      	movs	r3, #0
 800622c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800622e:	e04a      	b.n	80062c6 <http_find_file+0x10a>
      const char *file_name;
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
      if (copy_len > 0) {
 8006230:	6a3b      	ldr	r3, [r7, #32]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d028      	beq.n	8006288 <http_find_file+0xcc>
        size_t len_left = sizeof(http_uri_buf) - copy_len - 1;
 8006236:	6a3b      	ldr	r3, [r7, #32]
 8006238:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 800623c:	61fb      	str	r3, [r7, #28]
        if (len_left > 0) {
 800623e:	69fb      	ldr	r3, [r7, #28]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d01e      	beq.n	8006282 <http_find_file+0xc6>
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 8006244:	4a6d      	ldr	r2, [pc, #436]	; (80063fc <http_find_file+0x240>)
 8006246:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006248:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800624c:	4618      	mov	r0, r3
 800624e:	f7f9 ffc9 	bl	80001e4 <strlen>
 8006252:	61b8      	str	r0, [r7, #24]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 8006254:	69ba      	ldr	r2, [r7, #24]
 8006256:	69fb      	ldr	r3, [r7, #28]
 8006258:	4293      	cmp	r3, r2
 800625a:	bf28      	it	cs
 800625c:	4613      	movcs	r3, r2
 800625e:	617b      	str	r3, [r7, #20]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 8006260:	6a3b      	ldr	r3, [r7, #32]
 8006262:	4a65      	ldr	r2, [pc, #404]	; (80063f8 <http_find_file+0x23c>)
 8006264:	1898      	adds	r0, r3, r2
 8006266:	4a65      	ldr	r2, [pc, #404]	; (80063fc <http_find_file+0x240>)
 8006268:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800626a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800626e:	697a      	ldr	r2, [r7, #20]
 8006270:	4619      	mov	r1, r3
 8006272:	f00b f813 	bl	801129c <memcpy>
          http_uri_buf[copy_len + name_copy_len] = 0;
 8006276:	6a3a      	ldr	r2, [r7, #32]
 8006278:	697b      	ldr	r3, [r7, #20]
 800627a:	4413      	add	r3, r2
 800627c:	4a5e      	ldr	r2, [pc, #376]	; (80063f8 <http_find_file+0x23c>)
 800627e:	2100      	movs	r1, #0
 8006280:	54d1      	strb	r1, [r2, r3]
        }
        file_name = http_uri_buf;
 8006282:	4b5d      	ldr	r3, [pc, #372]	; (80063f8 <http_find_file+0x23c>)
 8006284:	62bb      	str	r3, [r7, #40]	; 0x28
 8006286:	e004      	b.n	8006292 <http_find_file+0xd6>
      } else
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
      {
        file_name = httpd_default_filenames[loop].name;
 8006288:	4a5c      	ldr	r2, [pc, #368]	; (80063fc <http_find_file+0x240>)
 800628a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800628c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006290:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Looking for %s...\n", file_name));
      err = fs_open(&hs->file_handle, file_name);
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006296:	4618      	mov	r0, r3
 8006298:	f7fe fc26 	bl	8004ae8 <fs_open>
 800629c:	4603      	mov	r3, r0
 800629e:	74fb      	strb	r3, [r7, #19]
      if (err == ERR_OK) {
 80062a0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d10b      	bne.n	80062c0 <http_find_file+0x104>
        uri = file_name;
 80062a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062aa:	60bb      	str	r3, [r7, #8]
        file = &hs->file_handle;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	63bb      	str	r3, [r7, #56]	; 0x38
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opened.\n"));
#if LWIP_HTTPD_SSI
        tag_check = httpd_default_filenames[loop].shtml;
 80062b0:	4a52      	ldr	r2, [pc, #328]	; (80063fc <http_find_file+0x240>)
 80062b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062b4:	00db      	lsls	r3, r3, #3
 80062b6:	4413      	add	r3, r2
 80062b8:	791b      	ldrb	r3, [r3, #4]
 80062ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#endif /* LWIP_HTTPD_SSI */
        break;
 80062be:	e005      	b.n	80062cc <http_find_file+0x110>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 80062c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062c2:	3301      	adds	r3, #1
 80062c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80062c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062c8:	2b04      	cmp	r3, #4
 80062ca:	d9b1      	bls.n	8006230 <http_find_file+0x74>
      }
    }
  }
  if (file == NULL) {
 80062cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d176      	bne.n	80063c0 <http_find_file+0x204>
    /* No - we've been asked for a specific file. */
    /* First, isolate the base URI (without any parameters) */
    params = (char *)strchr(uri, '?');
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	213f      	movs	r1, #63	; 0x3f
 80062d6:	4618      	mov	r0, r3
 80062d8:	f00b f9c7 	bl	801166a <strchr>
 80062dc:	6378      	str	r0, [r7, #52]	; 0x34
    if (params != NULL) {
 80062de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d005      	beq.n	80062f0 <http_find_file+0x134>
      /* URI contains parameters. NULL-terminate the base URI */
      *params = '\0';
 80062e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062e6:	2200      	movs	r2, #0
 80062e8:	701a      	strb	r2, [r3, #0]
      params++;
 80062ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062ec:	3301      	adds	r3, #1
 80062ee:	637b      	str	r3, [r7, #52]	; 0x34
    }

#if LWIP_HTTPD_CGI
    http_cgi_paramcount = -1;
 80062f0:	4b43      	ldr	r3, [pc, #268]	; (8006400 <http_find_file+0x244>)
 80062f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80062f6:	601a      	str	r2, [r3, #0]
    /* Does the base URI we have isolated correspond to a CGI handler? */
    if (httpd_num_cgis && httpd_cgis) {
 80062f8:	4b42      	ldr	r3, [pc, #264]	; (8006404 <http_find_file+0x248>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d034      	beq.n	800636a <http_find_file+0x1ae>
 8006300:	4b41      	ldr	r3, [pc, #260]	; (8006408 <http_find_file+0x24c>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d030      	beq.n	800636a <http_find_file+0x1ae>
      for (i = 0; i < httpd_num_cgis; i++) {
 8006308:	2300      	movs	r3, #0
 800630a:	633b      	str	r3, [r7, #48]	; 0x30
 800630c:	e028      	b.n	8006360 <http_find_file+0x1a4>
        if (strcmp(uri, httpd_cgis[i].pcCGIName) == 0) {
 800630e:	68b8      	ldr	r0, [r7, #8]
 8006310:	4b3d      	ldr	r3, [pc, #244]	; (8006408 <http_find_file+0x24c>)
 8006312:	681a      	ldr	r2, [r3, #0]
 8006314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006316:	00db      	lsls	r3, r3, #3
 8006318:	4413      	add	r3, r2
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4619      	mov	r1, r3
 800631e:	f7f9 ff57 	bl	80001d0 <strcmp>
 8006322:	4603      	mov	r3, r0
 8006324:	2b00      	cmp	r3, #0
 8006326:	d118      	bne.n	800635a <http_find_file+0x19e>
          /*
           * We found a CGI that handles this URI so extract the
           * parameters and call the handler.
           */
          http_cgi_paramcount = extract_uri_parameters(hs, params);
 8006328:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800632a:	68f8      	ldr	r0, [r7, #12]
 800632c:	f7fe fd8e 	bl	8004e4c <extract_uri_parameters>
 8006330:	4603      	mov	r3, r0
 8006332:	4a33      	ldr	r2, [pc, #204]	; (8006400 <http_find_file+0x244>)
 8006334:	6013      	str	r3, [r2, #0]
          uri = httpd_cgis[i].pfnCGIHandler(i, http_cgi_paramcount, hs->params,
 8006336:	4b34      	ldr	r3, [pc, #208]	; (8006408 <http_find_file+0x24c>)
 8006338:	681a      	ldr	r2, [r3, #0]
 800633a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800633c:	00db      	lsls	r3, r3, #3
 800633e:	4413      	add	r3, r2
 8006340:	685c      	ldr	r4, [r3, #4]
 8006342:	4b2f      	ldr	r3, [pc, #188]	; (8006400 <http_find_file+0x244>)
 8006344:	6819      	ldr	r1, [r3, #0]
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	f103 0230 	add.w	r2, r3, #48	; 0x30
                                         hs->param_vals);
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	3370      	adds	r3, #112	; 0x70
          uri = httpd_cgis[i].pfnCGIHandler(i, http_cgi_paramcount, hs->params,
 8006350:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006352:	47a0      	blx	r4
 8006354:	4603      	mov	r3, r0
 8006356:	60bb      	str	r3, [r7, #8]
          break;
 8006358:	e007      	b.n	800636a <http_find_file+0x1ae>
      for (i = 0; i < httpd_num_cgis; i++) {
 800635a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800635c:	3301      	adds	r3, #1
 800635e:	633b      	str	r3, [r7, #48]	; 0x30
 8006360:	4b28      	ldr	r3, [pc, #160]	; (8006404 <http_find_file+0x248>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006366:	429a      	cmp	r2, r3
 8006368:	dbd1      	blt.n	800630e <http_find_file+0x152>
    }
#endif /* LWIP_HTTPD_CGI */

    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opening %s\n", uri));

    err = fs_open(&hs->file_handle, uri);
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	68ba      	ldr	r2, [r7, #8]
 800636e:	4611      	mov	r1, r2
 8006370:	4618      	mov	r0, r3
 8006372:	f7fe fbb9 	bl	8004ae8 <fs_open>
 8006376:	4603      	mov	r3, r0
 8006378:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_OK) {
 800637a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d102      	bne.n	8006388 <http_find_file+0x1cc>
      file = &hs->file_handle;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	63bb      	str	r3, [r7, #56]	; 0x38
 8006386:	e006      	b.n	8006396 <http_find_file+0x1da>
    } else {
      file = http_get_404_file(hs, &uri);
 8006388:	f107 0308 	add.w	r3, r7, #8
 800638c:	4619      	mov	r1, r3
 800638e:	68f8      	ldr	r0, [r7, #12]
 8006390:	f7ff fc12 	bl	8005bb8 <http_get_404_file>
 8006394:	63b8      	str	r0, [r7, #56]	; 0x38
    }
#if LWIP_HTTPD_SSI
    if (file != NULL) {
 8006396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006398:	2b00      	cmp	r3, #0
 800639a:	d011      	beq.n	80063c0 <http_find_file+0x204>
      if (file->flags & FS_FILE_FLAGS_SSI) {
 800639c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800639e:	7c1b      	ldrb	r3, [r3, #16]
 80063a0:	f003 0308 	and.w	r3, r3, #8
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d003      	beq.n	80063b0 <http_find_file+0x1f4>
        tag_check = 1;
 80063a8:	2301      	movs	r3, #1
 80063aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80063ae:	e007      	b.n	80063c0 <http_find_file+0x204>
      } else {
#if LWIP_HTTPD_SSI_BY_FILE_EXTENSION
        tag_check = http_uri_is_ssi(file, uri);
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	4619      	mov	r1, r3
 80063b4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80063b6:	f7ff feaf 	bl	8006118 <http_uri_is_ssi>
 80063ba:	4603      	mov	r3, r0
 80063bc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#endif /* LWIP_HTTPD_SSI_BY_FILE_EXTENSION */
      }
    }
#endif /* LWIP_HTTPD_SSI */
  }
  if (file == NULL) {
 80063c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d106      	bne.n	80063d4 <http_find_file+0x218>
    /* None of the default filenames exist so send back a 404 page */
    file = http_get_404_file(hs, &uri);
 80063c6:	f107 0308 	add.w	r3, r7, #8
 80063ca:	4619      	mov	r1, r3
 80063cc:	68f8      	ldr	r0, [r7, #12]
 80063ce:	f7ff fbf3 	bl	8005bb8 <http_get_404_file>
 80063d2:	63b8      	str	r0, [r7, #56]	; 0x38
  }
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 80063d4:	68ba      	ldr	r2, [r7, #8]
 80063d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063d8:	9301      	str	r3, [sp, #4]
 80063da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80063de:	9300      	str	r3, [sp, #0]
 80063e0:	4613      	mov	r3, r2
 80063e2:	687a      	ldr	r2, [r7, #4]
 80063e4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80063e6:	68f8      	ldr	r0, [r7, #12]
 80063e8:	f000 f810 	bl	800640c <http_init_file>
 80063ec:	4603      	mov	r3, r0
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	3744      	adds	r7, #68	; 0x44
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd90      	pop	{r4, r7, pc}
 80063f6:	bf00      	nop
 80063f8:	200004e8 	.word	0x200004e8
 80063fc:	08017ca8 	.word	0x08017ca8
 8006400:	2000053c 	.word	0x2000053c
 8006404:	20000538 	.word	0x20000538
 8006408:	20000534 	.word	0x20000534

0800640c <http_init_file>:
 *         another err_t otherwise
 */
static err_t
http_init_file(struct http_state *hs, struct fs_file *file, int is_09, const char *uri,
               u8_t tag_check, char *params)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b088      	sub	sp, #32
 8006410:	af00      	add	r7, sp, #0
 8006412:	60f8      	str	r0, [r7, #12]
 8006414:	60b9      	str	r1, [r7, #8]
 8006416:	607a      	str	r2, [r7, #4]
 8006418:	603b      	str	r3, [r7, #0]
#if !LWIP_HTTPD_SUPPORT_V09
  LWIP_UNUSED_ARG(is_09);
#endif
  if (file != NULL) {
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d06f      	beq.n	8006500 <http_init_file+0xf4>
    /* file opened, initialise struct http_state */
#if !LWIP_HTTPD_DYNAMIC_FILE_READ
    /* If dynamic read is disabled, file data must be in one piece and available now */
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d106      	bne.n	8006436 <http_init_file+0x2a>
 8006428:	4b46      	ldr	r3, [pc, #280]	; (8006544 <http_init_file+0x138>)
 800642a:	f640 120b 	movw	r2, #2315	; 0x90b
 800642e:	4946      	ldr	r1, [pc, #280]	; (8006548 <http_init_file+0x13c>)
 8006430:	4846      	ldr	r0, [pc, #280]	; (800654c <http_init_file+0x140>)
 8006432:	f00b f80d 	bl	8011450 <iprintf>
#endif

#if LWIP_HTTPD_SSI
    if (tag_check) {
 8006436:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800643a:	2b00      	cmp	r3, #0
 800643c:	d01c      	beq.n	8006478 <http_init_file+0x6c>
      struct http_ssi_state *ssi = http_ssi_state_alloc();
 800643e:	f7fe fbaa 	bl	8004b96 <http_ssi_state_alloc>
 8006442:	61f8      	str	r0, [r7, #28]
      if (ssi != NULL) {
 8006444:	69fb      	ldr	r3, [r7, #28]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d016      	beq.n	8006478 <http_init_file+0x6c>
        ssi->tag_index = 0;
 800644a:	69fb      	ldr	r3, [r7, #28]
 800644c:	2200      	movs	r2, #0
 800644e:	819a      	strh	r2, [r3, #12]
        ssi->tag_state = TAG_NONE;
 8006450:	69fb      	ldr	r3, [r7, #28]
 8006452:	2200      	movs	r2, #0
 8006454:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
        ssi->parsed = file->data;
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	681a      	ldr	r2, [r3, #0]
 800645c:	69fb      	ldr	r3, [r7, #28]
 800645e:	601a      	str	r2, [r3, #0]
        ssi->parse_left = file->len;
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	685b      	ldr	r3, [r3, #4]
 8006464:	461a      	mov	r2, r3
 8006466:	69fb      	ldr	r3, [r7, #28]
 8006468:	609a      	str	r2, [r3, #8]
        ssi->tag_end = file->data;
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	681a      	ldr	r2, [r3, #0]
 800646e:	69fb      	ldr	r3, [r7, #28]
 8006470:	605a      	str	r2, [r3, #4]
        hs->ssi = ssi;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	69fa      	ldr	r2, [r7, #28]
 8006476:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
#else /* LWIP_HTTPD_SSI */
    LWIP_UNUSED_ARG(tag_check);
#endif /* LWIP_HTTPD_SSI */
    hs->handle = file;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	68ba      	ldr	r2, [r7, #8]
 800647c:	615a      	str	r2, [r3, #20]
                       );
    }
#else /* LWIP_HTTPD_CGI_SSI */
    LWIP_UNUSED_ARG(params);
#endif /* LWIP_HTTPD_CGI_SSI */
    hs->file = file->data;
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	681a      	ldr	r2, [r3, #0]
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	619a      	str	r2, [r3, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	685b      	ldr	r3, [r3, #4]
 800648a:	2b00      	cmp	r3, #0
 800648c:	da06      	bge.n	800649c <http_init_file+0x90>
 800648e:	4b2d      	ldr	r3, [pc, #180]	; (8006544 <http_init_file+0x138>)
 8006490:	f640 1234 	movw	r2, #2356	; 0x934
 8006494:	492e      	ldr	r1, [pc, #184]	; (8006550 <http_init_file+0x144>)
 8006496:	482d      	ldr	r0, [pc, #180]	; (800654c <http_init_file+0x140>)
 8006498:	f00a ffda 	bl	8011450 <iprintf>
      /* custom file, need to read data first (via fs_read_custom) */
      hs->left = 0;
    } else
#endif /* LWIP_HTTPD_CUSTOM_FILES */
    {
      hs->left = (u32_t)file->len;
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	685b      	ldr	r3, [r3, #4]
 80064a0:	461a      	mov	r2, r3
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	625a      	str	r2, [r3, #36]	; 0x24
    }
    hs->retries = 0;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	2200      	movs	r2, #0
 80064aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
#if !LWIP_HTTPD_DYNAMIC_HEADERS
    LWIP_ASSERT("HTTP headers not included in file system",
                (hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0);
#endif /* !LWIP_HTTPD_DYNAMIC_HEADERS */
#if LWIP_HTTPD_SUPPORT_V09
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d032      	beq.n	800651a <http_init_file+0x10e>
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	695b      	ldr	r3, [r3, #20]
 80064b8:	7c1b      	ldrb	r3, [r3, #16]
 80064ba:	f003 0301 	and.w	r3, r3, #1
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d02b      	beq.n	800651a <http_init_file+0x10e>
      /* HTTP/0.9 responses are sent without HTTP header,
         search for the end of the header. */
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	6998      	ldr	r0, [r3, #24]
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ca:	461a      	mov	r2, r3
 80064cc:	4921      	ldr	r1, [pc, #132]	; (8006554 <http_init_file+0x148>)
 80064ce:	f000 fa93 	bl	80069f8 <lwip_strnstr>
 80064d2:	61b8      	str	r0, [r7, #24]
      if (file_start != NULL) {
 80064d4:	69bb      	ldr	r3, [r7, #24]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d01f      	beq.n	800651a <http_init_file+0x10e>
        int diff = file_start + 4 - hs->file;
 80064da:	69bb      	ldr	r3, [r7, #24]
 80064dc:	1d1a      	adds	r2, r3, #4
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	699b      	ldr	r3, [r3, #24]
 80064e2:	1ad3      	subs	r3, r2, r3
 80064e4:	617b      	str	r3, [r7, #20]
        hs->file += diff;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	699a      	ldr	r2, [r3, #24]
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	441a      	add	r2, r3
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	619a      	str	r2, [r3, #24]
        hs->left -= (u32_t)diff;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80064f6:	697b      	ldr	r3, [r7, #20]
 80064f8:	1ad2      	subs	r2, r2, r3
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	625a      	str	r2, [r3, #36]	; 0x24
 80064fe:	e00c      	b.n	800651a <http_init_file+0x10e>
      }
    }
#endif /* LWIP_HTTPD_SUPPORT_V09*/
  } else {
    hs->handle = NULL;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	2200      	movs	r2, #0
 8006504:	615a      	str	r2, [r3, #20]
    hs->file = NULL;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	2200      	movs	r2, #0
 800650a:	619a      	str	r2, [r3, #24]
    hs->left = 0;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	2200      	movs	r2, #0
 8006510:	625a      	str	r2, [r3, #36]	; 0x24
    hs->retries = 0;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	2200      	movs	r2, #0
 8006516:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  }
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Determine the HTTP headers to send based on the file extension of
   * the requested URI. */
  if ((hs->handle == NULL) || ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) == 0)) {
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	695b      	ldr	r3, [r3, #20]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d006      	beq.n	8006530 <http_init_file+0x124>
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	695b      	ldr	r3, [r3, #20]
 8006526:	7c1b      	ldrb	r3, [r3, #16]
 8006528:	f003 0301 	and.w	r3, r3, #1
 800652c:	2b00      	cmp	r3, #0
 800652e:	d103      	bne.n	8006538 <http_init_file+0x12c>
    get_http_headers(hs, uri);
 8006530:	6839      	ldr	r1, [r7, #0]
 8006532:	68f8      	ldr	r0, [r7, #12]
 8006534:	f7fe fda6 	bl	8005084 <get_http_headers>
        hs->keepalive = 0;
      }
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  return ERR_OK;
 8006538:	2300      	movs	r3, #0
}
 800653a:	4618      	mov	r0, r3
 800653c:	3720      	adds	r7, #32
 800653e:	46bd      	mov	sp, r7
 8006540:	bd80      	pop	{r7, pc}
 8006542:	bf00      	nop
 8006544:	080132fc 	.word	0x080132fc
 8006548:	08013490 	.word	0x08013490
 800654c:	08013344 	.word	0x08013344
 8006550:	080134a4 	.word	0x080134a4
 8006554:	08013468 	.word	0x08013468

08006558 <http_err>:
 * The pcb had an error and is already deallocated.
 * The argument might still be valid (if != NULL).
 */
static void
http_err(void *arg, err_t err)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b084      	sub	sp, #16
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
 8006560:	460b      	mov	r3, r1
 8006562:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);

  LWIP_DEBUGF(HTTPD_DEBUG, ("http_err: %s", lwip_strerr(err)));

  if (hs != NULL) {
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d002      	beq.n	8006574 <http_err+0x1c>
    http_state_free(hs);
 800656e:	68f8      	ldr	r0, [r7, #12]
 8006570:	f7fe fb82 	bl	8004c78 <http_state_free>
  }
}
 8006574:	bf00      	nop
 8006576:	3710      	adds	r7, #16
 8006578:	46bd      	mov	sp, r7
 800657a:	bd80      	pop	{r7, pc}

0800657c <http_sent>:
 * Data has been sent and acknowledged by the remote host.
 * This means that more data can be sent.
 */
static err_t
http_sent(void *arg, struct altcp_pcb *pcb, u16_t len)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b086      	sub	sp, #24
 8006580:	af00      	add	r7, sp, #0
 8006582:	60f8      	str	r0, [r7, #12]
 8006584:	60b9      	str	r1, [r7, #8]
 8006586:	4613      	mov	r3, r2
 8006588:	80fb      	strh	r3, [r7, #6]
  struct http_state *hs = (struct http_state *)arg;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	617b      	str	r3, [r7, #20]

  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_sent %p\n", (void *)pcb));

  LWIP_UNUSED_ARG(len);

  if (hs == NULL) {
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d101      	bne.n	8006598 <http_sent+0x1c>
    return ERR_OK;
 8006594:	2300      	movs	r3, #0
 8006596:	e008      	b.n	80065aa <http_sent+0x2e>
  }

  hs->retries = 0;
 8006598:	697b      	ldr	r3, [r7, #20]
 800659a:	2200      	movs	r2, #0
 800659c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  http_send(pcb, hs);
 80065a0:	6979      	ldr	r1, [r7, #20]
 80065a2:	68b8      	ldr	r0, [r7, #8]
 80065a4:	f7ff faae 	bl	8005b04 <http_send>

  return ERR_OK;
 80065a8:	2300      	movs	r3, #0
}
 80065aa:	4618      	mov	r0, r3
 80065ac:	3718      	adds	r7, #24
 80065ae:	46bd      	mov	sp, r7
 80065b0:	bd80      	pop	{r7, pc}

080065b2 <http_poll>:
 *
 * This could be increased, but we don't want to waste resources for bad connections.
 */
static err_t
http_poll(void *arg, struct altcp_pcb *pcb)
{
 80065b2:	b580      	push	{r7, lr}
 80065b4:	b084      	sub	sp, #16
 80065b6:	af00      	add	r7, sp, #0
 80065b8:	6078      	str	r0, [r7, #4]
 80065ba:	6039      	str	r1, [r7, #0]
  struct http_state *hs = (struct http_state *)arg;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: pcb=%p hs=%p pcb_state=%s\n",
              (void *)pcb, (void *)hs, tcp_debug_state_str(altcp_dbg_get_tcp_state(pcb))));

  if (hs == NULL) {
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d107      	bne.n	80065d6 <http_poll+0x24>
    err_t closed;
    /* arg is null, close. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: arg is NULL, close\n"));
    closed = http_close_conn(pcb, NULL);
 80065c6:	2100      	movs	r1, #0
 80065c8:	6838      	ldr	r0, [r7, #0]
 80065ca:	f7fe fc23 	bl	8004e14 <http_close_conn>
 80065ce:	4603      	mov	r3, r0
 80065d0:	72fb      	strb	r3, [r7, #11]
    if (closed == ERR_MEM) {
      altcp_abort(pcb);
      return ERR_ABRT;
    }
#endif /* LWIP_HTTPD_ABORT_ON_CLOSE_MEM_ERROR */
    return ERR_OK;
 80065d2:	2300      	movs	r3, #0
 80065d4:	e021      	b.n	800661a <http_poll+0x68>
  } else {
    hs->retries++;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80065dc:	3301      	adds	r3, #1
 80065de:	b2da      	uxtb	r2, r3
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80065ec:	2b04      	cmp	r3, #4
 80065ee:	d105      	bne.n	80065fc <http_poll+0x4a>
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: too many retries, close\n"));
      http_close_conn(pcb, hs);
 80065f0:	68f9      	ldr	r1, [r7, #12]
 80065f2:	6838      	ldr	r0, [r7, #0]
 80065f4:	f7fe fc0e 	bl	8004e14 <http_close_conn>
      return ERR_OK;
 80065f8:	2300      	movs	r3, #0
 80065fa:	e00e      	b.n	800661a <http_poll+0x68>
    }

    /* If this connection has a file open, try to send some more data. If
     * it has not yet received a GET request, don't do this since it will
     * cause the connection to close immediately. */
    if (hs->handle) {
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	695b      	ldr	r3, [r3, #20]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d009      	beq.n	8006618 <http_poll+0x66>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: try to send more data\n"));
      if (http_send(pcb, hs)) {
 8006604:	68f9      	ldr	r1, [r7, #12]
 8006606:	6838      	ldr	r0, [r7, #0]
 8006608:	f7ff fa7c 	bl	8005b04 <http_send>
 800660c:	4603      	mov	r3, r0
 800660e:	2b00      	cmp	r3, #0
 8006610:	d002      	beq.n	8006618 <http_poll+0x66>
        /* If we wrote anything to be sent, go ahead and send it now. */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("tcp_output\n"));
        altcp_output(pcb);
 8006612:	6838      	ldr	r0, [r7, #0]
 8006614:	f007 f8c2 	bl	800d79c <tcp_output>
      }
    }
  }

  return ERR_OK;
 8006618:	2300      	movs	r3, #0
}
 800661a:	4618      	mov	r0, r3
 800661c:	3710      	adds	r7, #16
 800661e:	46bd      	mov	sp, r7
 8006620:	bd80      	pop	{r7, pc}
	...

08006624 <http_recv>:
 * Data has been received on this pcb.
 * For HTTP 1.0, this should normally only happen once (if the request fits in one packet).
 */
static err_t
http_recv(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b086      	sub	sp, #24
 8006628:	af00      	add	r7, sp, #0
 800662a:	60f8      	str	r0, [r7, #12]
 800662c:	60b9      	str	r1, [r7, #8]
 800662e:	607a      	str	r2, [r7, #4]
 8006630:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: pcb=%p pbuf=%p err=%s\n", (void *)pcb,
              (void *)p, lwip_strerr(err)));

  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 8006636:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d105      	bne.n	800664a <http_recv+0x26>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d002      	beq.n	800664a <http_recv+0x26>
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d111      	bne.n	800666e <http_recv+0x4a>
    /* error or closed by other side? */
    if (p != NULL) {
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d008      	beq.n	8006662 <http_recv+0x3e>
      /* Inform TCP that we have taken the data. */
      altcp_recved(pcb, p->tot_len);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	891b      	ldrh	r3, [r3, #8]
 8006654:	4619      	mov	r1, r3
 8006656:	68b8      	ldr	r0, [r7, #8]
 8006658:	f002 fc94 	bl	8008f84 <tcp_recved>
      pbuf_free(p);
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	f001 fd2f 	bl	80080c0 <pbuf_free>
    }
    if (hs == NULL) {
      /* this should not happen, only to be robust */
      LWIP_DEBUGF(HTTPD_DEBUG, ("Error, http_recv: hs is NULL, close\n"));
    }
    http_close_conn(pcb, hs);
 8006662:	6979      	ldr	r1, [r7, #20]
 8006664:	68b8      	ldr	r0, [r7, #8]
 8006666:	f7fe fbd5 	bl	8004e14 <http_close_conn>
    return ERR_OK;
 800666a:	2300      	movs	r3, #0
 800666c:	e072      	b.n	8006754 <http_recv+0x130>
    hs->unrecved_bytes += p->tot_len;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
  {
    /* Inform TCP that we have taken the data. */
    altcp_recved(pcb, p->tot_len);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	891b      	ldrh	r3, [r3, #8]
 8006672:	4619      	mov	r1, r3
 8006674:	68b8      	ldr	r0, [r7, #8]
 8006676:	f002 fc85 	bl	8008f84 <tcp_recved>
  }

#if LWIP_HTTPD_SUPPORT_POST
  if (hs->post_content_len_left > 0) {
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8006680:	2b00      	cmp	r3, #0
 8006682:	d012      	beq.n	80066aa <http_recv+0x86>
    /* reset idle counter when POST data is received */
    hs->retries = 0;
 8006684:	697b      	ldr	r3, [r7, #20]
 8006686:	2200      	movs	r2, #0
 8006688:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    /* this is data for a POST, pass the complete pbuf to the application */
    http_post_rxpbuf(hs, p);
 800668c:	6879      	ldr	r1, [r7, #4]
 800668e:	6978      	ldr	r0, [r7, #20]
 8006690:	f7ff faf0 	bl	8005c74 <http_post_rxpbuf>
    /* pbuf is passed to the application, don't free it! */
    if (hs->post_content_len_left == 0) {
 8006694:	697b      	ldr	r3, [r7, #20]
 8006696:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800669a:	2b00      	cmp	r3, #0
 800669c:	d103      	bne.n	80066a6 <http_recv+0x82>
      /* all data received, send response or close connection */
      http_send(pcb, hs);
 800669e:	6979      	ldr	r1, [r7, #20]
 80066a0:	68b8      	ldr	r0, [r7, #8]
 80066a2:	f7ff fa2f 	bl	8005b04 <http_send>
    }
    return ERR_OK;
 80066a6:	2300      	movs	r3, #0
 80066a8:	e054      	b.n	8006754 <http_recv+0x130>
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
  {
    if (hs->handle == NULL) {
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	695b      	ldr	r3, [r3, #20]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d14c      	bne.n	800674c <http_recv+0x128>
      err_t parsed = http_parse_request(p, hs, pcb);
 80066b2:	68ba      	ldr	r2, [r7, #8]
 80066b4:	6979      	ldr	r1, [r7, #20]
 80066b6:	6878      	ldr	r0, [r7, #4]
 80066b8:	f7ff fc00 	bl	8005ebc <http_parse_request>
 80066bc:	4603      	mov	r3, r0
 80066be:	74fb      	strb	r3, [r7, #19]
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 80066c0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d015      	beq.n	80066f4 <http_recv+0xd0>
 80066c8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80066cc:	f113 0f05 	cmn.w	r3, #5
 80066d0:	d010      	beq.n	80066f4 <http_recv+0xd0>
 80066d2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80066d6:	f113 0f10 	cmn.w	r3, #16
 80066da:	d00b      	beq.n	80066f4 <http_recv+0xd0>
 80066dc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80066e0:	f113 0f08 	cmn.w	r3, #8
 80066e4:	d006      	beq.n	80066f4 <http_recv+0xd0>
 80066e6:	4b1d      	ldr	r3, [pc, #116]	; (800675c <http_recv+0x138>)
 80066e8:	f640 2204 	movw	r2, #2564	; 0xa04
 80066ec:	491c      	ldr	r1, [pc, #112]	; (8006760 <http_recv+0x13c>)
 80066ee:	481d      	ldr	r0, [pc, #116]	; (8006764 <http_recv+0x140>)
 80066f0:	f00a feae 	bl	8011450 <iprintf>
                  || parsed == ERR_INPROGRESS || parsed == ERR_ARG || parsed == ERR_USE);
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
      if (parsed != ERR_INPROGRESS) {
 80066f4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80066f8:	f113 0f05 	cmn.w	r3, #5
 80066fc:	d00b      	beq.n	8006716 <http_recv+0xf2>
        /* request fully parsed or error */
        if (hs->req != NULL) {
 80066fe:	697b      	ldr	r3, [r7, #20]
 8006700:	6a1b      	ldr	r3, [r3, #32]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d007      	beq.n	8006716 <http_recv+0xf2>
          pbuf_free(hs->req);
 8006706:	697b      	ldr	r3, [r7, #20]
 8006708:	6a1b      	ldr	r3, [r3, #32]
 800670a:	4618      	mov	r0, r3
 800670c:	f001 fcd8 	bl	80080c0 <pbuf_free>
          hs->req = NULL;
 8006710:	697b      	ldr	r3, [r7, #20]
 8006712:	2200      	movs	r2, #0
 8006714:	621a      	str	r2, [r3, #32]
        }
      }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
      pbuf_free(p);
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	f001 fcd2 	bl	80080c0 <pbuf_free>
      if (parsed == ERR_OK) {
 800671c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d109      	bne.n	8006738 <http_recv+0x114>
#if LWIP_HTTPD_SUPPORT_POST
        if (hs->post_content_len_left == 0)
 8006724:	697b      	ldr	r3, [r7, #20]
 8006726:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800672a:	2b00      	cmp	r3, #0
 800672c:	d111      	bne.n	8006752 <http_recv+0x12e>
#endif /* LWIP_HTTPD_SUPPORT_POST */
        {
          LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: data %p len %"S32_F"\n", (const void *)hs->file, hs->left));
          http_send(pcb, hs);
 800672e:	6979      	ldr	r1, [r7, #20]
 8006730:	68b8      	ldr	r0, [r7, #8]
 8006732:	f7ff f9e7 	bl	8005b04 <http_send>
 8006736:	e00c      	b.n	8006752 <http_recv+0x12e>
        }
      } else if (parsed == ERR_ARG) {
 8006738:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800673c:	f113 0f10 	cmn.w	r3, #16
 8006740:	d107      	bne.n	8006752 <http_recv+0x12e>
        /* @todo: close on ERR_USE? */
        http_close_conn(pcb, hs);
 8006742:	6979      	ldr	r1, [r7, #20]
 8006744:	68b8      	ldr	r0, [r7, #8]
 8006746:	f7fe fb65 	bl	8004e14 <http_close_conn>
 800674a:	e002      	b.n	8006752 <http_recv+0x12e>
      }
    } else {
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_recv: already sending data\n"));
      /* already sending but still receiving data, we might want to RST here? */
      pbuf_free(p);
 800674c:	6878      	ldr	r0, [r7, #4]
 800674e:	f001 fcb7 	bl	80080c0 <pbuf_free>
    }
  }
  return ERR_OK;
 8006752:	2300      	movs	r3, #0
}
 8006754:	4618      	mov	r0, r3
 8006756:	3718      	adds	r7, #24
 8006758:	46bd      	mov	sp, r7
 800675a:	bd80      	pop	{r7, pc}
 800675c:	080132fc 	.word	0x080132fc
 8006760:	080134c4 	.word	0x080134c4
 8006764:	08013344 	.word	0x08013344

08006768 <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct altcp_pcb *pcb, err_t err)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b086      	sub	sp, #24
 800676c:	af00      	add	r7, sp, #0
 800676e:	60f8      	str	r0, [r7, #12]
 8006770:	60b9      	str	r1, [r7, #8]
 8006772:	4613      	mov	r3, r2
 8006774:	71fb      	strb	r3, [r7, #7]
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void *)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 8006776:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d102      	bne.n	8006784 <http_accept+0x1c>
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d102      	bne.n	800678a <http_accept+0x22>
    return ERR_VAL;
 8006784:	f06f 0305 	mvn.w	r3, #5
 8006788:	e025      	b.n	80067d6 <http_accept+0x6e>
  }

  /* Set priority */
  altcp_setprio(pcb, HTTPD_TCP_PRIO);
 800678a:	2101      	movs	r1, #1
 800678c:	68b8      	ldr	r0, [r7, #8]
 800678e:	f003 f8dd 	bl	800994c <tcp_setprio>

  /* Allocate memory for the structure that holds the state of the
     connection - initialized by that function. */
  hs = http_state_alloc();
 8006792:	f7fe fa33 	bl	8004bfc <http_state_alloc>
 8006796:	6178      	str	r0, [r7, #20]
  if (hs == NULL) {
 8006798:	697b      	ldr	r3, [r7, #20]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d102      	bne.n	80067a4 <http_accept+0x3c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept: Out of memory, RST\n"));
    return ERR_MEM;
 800679e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80067a2:	e018      	b.n	80067d6 <http_accept+0x6e>
  }
  hs->pcb = pcb;
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	68ba      	ldr	r2, [r7, #8]
 80067a8:	61da      	str	r2, [r3, #28]

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  altcp_arg(pcb, hs);
 80067aa:	6979      	ldr	r1, [r7, #20]
 80067ac:	68b8      	ldr	r0, [r7, #8]
 80067ae:	f003 facd 	bl	8009d4c <tcp_arg>

  /* Set up the various callback functions */
  altcp_recv(pcb, http_recv);
 80067b2:	490b      	ldr	r1, [pc, #44]	; (80067e0 <http_accept+0x78>)
 80067b4:	68b8      	ldr	r0, [r7, #8]
 80067b6:	f003 fadb 	bl	8009d70 <tcp_recv>
  altcp_err(pcb, http_err);
 80067ba:	490a      	ldr	r1, [pc, #40]	; (80067e4 <http_accept+0x7c>)
 80067bc:	68b8      	ldr	r0, [r7, #8]
 80067be:	f003 fb1b 	bl	8009df8 <tcp_err>
  altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 80067c2:	2204      	movs	r2, #4
 80067c4:	4908      	ldr	r1, [pc, #32]	; (80067e8 <http_accept+0x80>)
 80067c6:	68b8      	ldr	r0, [r7, #8]
 80067c8:	f003 fb50 	bl	8009e6c <tcp_poll>
  altcp_sent(pcb, http_sent);
 80067cc:	4907      	ldr	r1, [pc, #28]	; (80067ec <http_accept+0x84>)
 80067ce:	68b8      	ldr	r0, [r7, #8]
 80067d0:	f003 faf0 	bl	8009db4 <tcp_sent>

  return ERR_OK;
 80067d4:	2300      	movs	r3, #0
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	3718      	adds	r7, #24
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}
 80067de:	bf00      	nop
 80067e0:	08006625 	.word	0x08006625
 80067e4:	08006559 	.word	0x08006559
 80067e8:	080065b3 	.word	0x080065b3
 80067ec:	0800657d 	.word	0x0800657d

080067f0 <httpd_init_pcb>:

static void
httpd_init_pcb(struct altcp_pcb *pcb, u16_t port)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b084      	sub	sp, #16
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
 80067f8:	460b      	mov	r3, r1
 80067fa:	807b      	strh	r3, [r7, #2]
  err_t err;

  if (pcb) {
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d029      	beq.n	8006856 <httpd_init_pcb+0x66>
    altcp_setprio(pcb, HTTPD_TCP_PRIO);
 8006802:	2101      	movs	r1, #1
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	f003 f8a1 	bl	800994c <tcp_setprio>
    /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
    err = altcp_bind(pcb, IP_ANY_TYPE, port);
 800680a:	887b      	ldrh	r3, [r7, #2]
 800680c:	461a      	mov	r2, r3
 800680e:	4914      	ldr	r1, [pc, #80]	; (8006860 <httpd_init_pcb+0x70>)
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	f002 f9e9 	bl	8008be8 <tcp_bind>
 8006816:	4603      	mov	r3, r0
 8006818:	73fb      	strb	r3, [r7, #15]
    LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 800681a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d006      	beq.n	8006830 <httpd_init_pcb+0x40>
 8006822:	4b10      	ldr	r3, [pc, #64]	; (8006864 <httpd_init_pcb+0x74>)
 8006824:	f640 2257 	movw	r2, #2647	; 0xa57
 8006828:	490f      	ldr	r1, [pc, #60]	; (8006868 <httpd_init_pcb+0x78>)
 800682a:	4810      	ldr	r0, [pc, #64]	; (800686c <httpd_init_pcb+0x7c>)
 800682c:	f00a fe10 	bl	8011450 <iprintf>
    pcb = altcp_listen(pcb);
 8006830:	21ff      	movs	r1, #255	; 0xff
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f002 fa90 	bl	8008d58 <tcp_listen_with_backlog>
 8006838:	6078      	str	r0, [r7, #4]
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d106      	bne.n	800684e <httpd_init_pcb+0x5e>
 8006840:	4b08      	ldr	r3, [pc, #32]	; (8006864 <httpd_init_pcb+0x74>)
 8006842:	f640 2259 	movw	r2, #2649	; 0xa59
 8006846:	490a      	ldr	r1, [pc, #40]	; (8006870 <httpd_init_pcb+0x80>)
 8006848:	4808      	ldr	r0, [pc, #32]	; (800686c <httpd_init_pcb+0x7c>)
 800684a:	f00a fe01 	bl	8011450 <iprintf>
    altcp_accept(pcb, http_accept);
 800684e:	4909      	ldr	r1, [pc, #36]	; (8006874 <httpd_init_pcb+0x84>)
 8006850:	6878      	ldr	r0, [r7, #4]
 8006852:	f003 faf3 	bl	8009e3c <tcp_accept>
  }
}
 8006856:	bf00      	nop
 8006858:	3710      	adds	r7, #16
 800685a:	46bd      	mov	sp, r7
 800685c:	bd80      	pop	{r7, pc}
 800685e:	bf00      	nop
 8006860:	08017db0 	.word	0x08017db0
 8006864:	080132fc 	.word	0x080132fc
 8006868:	080134f0 	.word	0x080134f0
 800686c:	08013344 	.word	0x08013344
 8006870:	0801350c 	.word	0x0801350c
 8006874:	08006769 	.word	0x08006769

08006878 <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b082      	sub	sp, #8
 800687c:	af00      	add	r7, sp, #0
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by tcp_new() */

  pcb = altcp_tcp_new_ip_type(IPADDR_TYPE_ANY);
 800687e:	202e      	movs	r0, #46	; 0x2e
 8006880:	f003 fa56 	bl	8009d30 <tcp_new_ip_type>
 8006884:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d106      	bne.n	800689a <httpd_init+0x22>
 800688c:	4b07      	ldr	r3, [pc, #28]	; (80068ac <httpd_init+0x34>)
 800688e:	f640 2272 	movw	r2, #2674	; 0xa72
 8006892:	4907      	ldr	r1, [pc, #28]	; (80068b0 <httpd_init+0x38>)
 8006894:	4807      	ldr	r0, [pc, #28]	; (80068b4 <httpd_init+0x3c>)
 8006896:	f00a fddb 	bl	8011450 <iprintf>
  httpd_init_pcb(pcb, HTTPD_SERVER_PORT);
 800689a:	2150      	movs	r1, #80	; 0x50
 800689c:	6878      	ldr	r0, [r7, #4]
 800689e:	f7ff ffa7 	bl	80067f0 <httpd_init_pcb>
}
 80068a2:	bf00      	nop
 80068a4:	3708      	adds	r7, #8
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bd80      	pop	{r7, pc}
 80068aa:	bf00      	nop
 80068ac:	080132fc 	.word	0x080132fc
 80068b0:	0801352c 	.word	0x0801352c
 80068b4:	08013344 	.word	0x08013344

080068b8 <http_set_ssi_handler>:
 * @param tags an array of SSI tag strings to search for in SSI-enabled files
 * @param num_tags number of tags in the 'tags' array
 */
void
http_set_ssi_handler(tSSIHandler ssi_handler, const char **tags, int num_tags)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b084      	sub	sp, #16
 80068bc:	af00      	add	r7, sp, #0
 80068be:	60f8      	str	r0, [r7, #12]
 80068c0:	60b9      	str	r1, [r7, #8]
 80068c2:	607a      	str	r2, [r7, #4]
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_set_ssi_handler\n"));

  LWIP_ASSERT("no ssi_handler given", ssi_handler != NULL);
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d106      	bne.n	80068d8 <http_set_ssi_handler+0x20>
 80068ca:	4b14      	ldr	r3, [pc, #80]	; (800691c <http_set_ssi_handler+0x64>)
 80068cc:	f640 2297 	movw	r2, #2711	; 0xa97
 80068d0:	4913      	ldr	r1, [pc, #76]	; (8006920 <http_set_ssi_handler+0x68>)
 80068d2:	4814      	ldr	r0, [pc, #80]	; (8006924 <http_set_ssi_handler+0x6c>)
 80068d4:	f00a fdbc 	bl	8011450 <iprintf>
  httpd_ssi_handler = ssi_handler;
 80068d8:	4a13      	ldr	r2, [pc, #76]	; (8006928 <http_set_ssi_handler+0x70>)
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	6013      	str	r3, [r2, #0]

#if LWIP_HTTPD_SSI_RAW
  LWIP_UNUSED_ARG(tags);
  LWIP_UNUSED_ARG(num_tags);
#else /* LWIP_HTTPD_SSI_RAW */
  LWIP_ASSERT("no tags given", tags != NULL);
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d106      	bne.n	80068f2 <http_set_ssi_handler+0x3a>
 80068e4:	4b0d      	ldr	r3, [pc, #52]	; (800691c <http_set_ssi_handler+0x64>)
 80068e6:	f640 229e 	movw	r2, #2718	; 0xa9e
 80068ea:	4910      	ldr	r1, [pc, #64]	; (800692c <http_set_ssi_handler+0x74>)
 80068ec:	480d      	ldr	r0, [pc, #52]	; (8006924 <http_set_ssi_handler+0x6c>)
 80068ee:	f00a fdaf 	bl	8011450 <iprintf>
  LWIP_ASSERT("invalid number of tags", num_tags > 0);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	dc06      	bgt.n	8006906 <http_set_ssi_handler+0x4e>
 80068f8:	4b08      	ldr	r3, [pc, #32]	; (800691c <http_set_ssi_handler+0x64>)
 80068fa:	f640 229f 	movw	r2, #2719	; 0xa9f
 80068fe:	490c      	ldr	r1, [pc, #48]	; (8006930 <http_set_ssi_handler+0x78>)
 8006900:	4808      	ldr	r0, [pc, #32]	; (8006924 <http_set_ssi_handler+0x6c>)
 8006902:	f00a fda5 	bl	8011450 <iprintf>

  httpd_tags = tags;
 8006906:	4a0b      	ldr	r2, [pc, #44]	; (8006934 <http_set_ssi_handler+0x7c>)
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	6013      	str	r3, [r2, #0]
  httpd_num_tags = num_tags;
 800690c:	4a0a      	ldr	r2, [pc, #40]	; (8006938 <http_set_ssi_handler+0x80>)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6013      	str	r3, [r2, #0]
#endif /* !LWIP_HTTPD_SSI_RAW */
}
 8006912:	bf00      	nop
 8006914:	3710      	adds	r7, #16
 8006916:	46bd      	mov	sp, r7
 8006918:	bd80      	pop	{r7, pc}
 800691a:	bf00      	nop
 800691c:	080132fc 	.word	0x080132fc
 8006920:	08013548 	.word	0x08013548
 8006924:	08013344 	.word	0x08013344
 8006928:	20000528 	.word	0x20000528
 800692c:	08013560 	.word	0x08013560
 8006930:	08013570 	.word	0x08013570
 8006934:	20000530 	.word	0x20000530
 8006938:	2000052c 	.word	0x2000052c

0800693c <http_set_cgi_handlers>:
 * @param cgis an array of CGI filenames/handler functions
 * @param num_handlers number of elements in the 'cgis' array
 */
void
http_set_cgi_handlers(const tCGI *cgis, int num_handlers)
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b082      	sub	sp, #8
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
 8006944:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("no cgis given", cgis != NULL);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d106      	bne.n	800695a <http_set_cgi_handlers+0x1e>
 800694c:	4b0d      	ldr	r3, [pc, #52]	; (8006984 <http_set_cgi_handlers+0x48>)
 800694e:	f640 22b2 	movw	r2, #2738	; 0xab2
 8006952:	490d      	ldr	r1, [pc, #52]	; (8006988 <http_set_cgi_handlers+0x4c>)
 8006954:	480d      	ldr	r0, [pc, #52]	; (800698c <http_set_cgi_handlers+0x50>)
 8006956:	f00a fd7b 	bl	8011450 <iprintf>
  LWIP_ASSERT("invalid number of handlers", num_handlers > 0);
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	2b00      	cmp	r3, #0
 800695e:	dc06      	bgt.n	800696e <http_set_cgi_handlers+0x32>
 8006960:	4b08      	ldr	r3, [pc, #32]	; (8006984 <http_set_cgi_handlers+0x48>)
 8006962:	f640 22b3 	movw	r2, #2739	; 0xab3
 8006966:	490a      	ldr	r1, [pc, #40]	; (8006990 <http_set_cgi_handlers+0x54>)
 8006968:	4808      	ldr	r0, [pc, #32]	; (800698c <http_set_cgi_handlers+0x50>)
 800696a:	f00a fd71 	bl	8011450 <iprintf>

  httpd_cgis = cgis;
 800696e:	4a09      	ldr	r2, [pc, #36]	; (8006994 <http_set_cgi_handlers+0x58>)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6013      	str	r3, [r2, #0]
  httpd_num_cgis = num_handlers;
 8006974:	4a08      	ldr	r2, [pc, #32]	; (8006998 <http_set_cgi_handlers+0x5c>)
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	6013      	str	r3, [r2, #0]
}
 800697a:	bf00      	nop
 800697c:	3708      	adds	r7, #8
 800697e:	46bd      	mov	sp, r7
 8006980:	bd80      	pop	{r7, pc}
 8006982:	bf00      	nop
 8006984:	080132fc 	.word	0x080132fc
 8006988:	08013588 	.word	0x08013588
 800698c:	08013344 	.word	0x08013344
 8006990:	08013598 	.word	0x08013598
 8006994:	20000534 	.word	0x20000534
 8006998:	20000538 	.word	0x20000538

0800699c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800699c:	b480      	push	{r7}
 800699e:	b083      	sub	sp, #12
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	4603      	mov	r3, r0
 80069a4:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 80069a6:	88fb      	ldrh	r3, [r7, #6]
 80069a8:	021b      	lsls	r3, r3, #8
 80069aa:	b21a      	sxth	r2, r3
 80069ac:	88fb      	ldrh	r3, [r7, #6]
 80069ae:	0a1b      	lsrs	r3, r3, #8
 80069b0:	b29b      	uxth	r3, r3
 80069b2:	b21b      	sxth	r3, r3
 80069b4:	4313      	orrs	r3, r2
 80069b6:	b21b      	sxth	r3, r3
 80069b8:	b29b      	uxth	r3, r3
}
 80069ba:	4618      	mov	r0, r3
 80069bc:	370c      	adds	r7, #12
 80069be:	46bd      	mov	sp, r7
 80069c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c4:	4770      	bx	lr

080069c6 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80069c6:	b480      	push	{r7}
 80069c8:	b083      	sub	sp, #12
 80069ca:	af00      	add	r7, sp, #0
 80069cc:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	061a      	lsls	r2, r3, #24
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	021b      	lsls	r3, r3, #8
 80069d6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80069da:	431a      	orrs	r2, r3
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	0a1b      	lsrs	r3, r3, #8
 80069e0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80069e4:	431a      	orrs	r2, r3
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	0e1b      	lsrs	r3, r3, #24
 80069ea:	4313      	orrs	r3, r2
}
 80069ec:	4618      	mov	r0, r3
 80069ee:	370c      	adds	r7, #12
 80069f0:	46bd      	mov	sp, r7
 80069f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f6:	4770      	bx	lr

080069f8 <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b086      	sub	sp, #24
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	60f8      	str	r0, [r7, #12]
 8006a00:	60b9      	str	r1, [r7, #8]
 8006a02:	607a      	str	r2, [r7, #4]
  const char *p;
  size_t tokenlen = strlen(token);
 8006a04:	68b8      	ldr	r0, [r7, #8]
 8006a06:	f7f9 fbed 	bl	80001e4 <strlen>
 8006a0a:	6138      	str	r0, [r7, #16]
  if (tokenlen == 0) {
 8006a0c:	693b      	ldr	r3, [r7, #16]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d101      	bne.n	8006a16 <lwip_strnstr+0x1e>
    return LWIP_CONST_CAST(char *, buffer);
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	e022      	b.n	8006a5c <lwip_strnstr+0x64>
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	617b      	str	r3, [r7, #20]
 8006a1a:	e012      	b.n	8006a42 <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 8006a1c:	697b      	ldr	r3, [r7, #20]
 8006a1e:	781a      	ldrb	r2, [r3, #0]
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	781b      	ldrb	r3, [r3, #0]
 8006a24:	429a      	cmp	r2, r3
 8006a26:	d109      	bne.n	8006a3c <lwip_strnstr+0x44>
 8006a28:	693a      	ldr	r2, [r7, #16]
 8006a2a:	68b9      	ldr	r1, [r7, #8]
 8006a2c:	6978      	ldr	r0, [r7, #20]
 8006a2e:	f00a fe31 	bl	8011694 <strncmp>
 8006a32:	4603      	mov	r3, r0
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d101      	bne.n	8006a3c <lwip_strnstr+0x44>
      return LWIP_CONST_CAST(char *, p);
 8006a38:	697b      	ldr	r3, [r7, #20]
 8006a3a:	e00f      	b.n	8006a5c <lwip_strnstr+0x64>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 8006a3c:	697b      	ldr	r3, [r7, #20]
 8006a3e:	3301      	adds	r3, #1
 8006a40:	617b      	str	r3, [r7, #20]
 8006a42:	697b      	ldr	r3, [r7, #20]
 8006a44:	781b      	ldrb	r3, [r3, #0]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d007      	beq.n	8006a5a <lwip_strnstr+0x62>
 8006a4a:	697a      	ldr	r2, [r7, #20]
 8006a4c:	693b      	ldr	r3, [r7, #16]
 8006a4e:	441a      	add	r2, r3
 8006a50:	68f9      	ldr	r1, [r7, #12]
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	440b      	add	r3, r1
 8006a56:	429a      	cmp	r2, r3
 8006a58:	d9e0      	bls.n	8006a1c <lwip_strnstr+0x24>
    }
  }
  return NULL;
 8006a5a:	2300      	movs	r3, #0
}
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	3718      	adds	r7, #24
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bd80      	pop	{r7, pc}

08006a64 <lwip_stricmp>:
 * lwIP default implementation for stricmp() non-standard function.
 * This can be \#defined to stricmp() depending on your platform port.
 */
int
lwip_stricmp(const char *str1, const char *str2)
{
 8006a64:	b480      	push	{r7}
 8006a66:	b085      	sub	sp, #20
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
 8006a6c:	6039      	str	r1, [r7, #0]
  char c1, c2;

  do {
    c1 = *str1++;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	1c5a      	adds	r2, r3, #1
 8006a72:	607a      	str	r2, [r7, #4]
 8006a74:	781b      	ldrb	r3, [r3, #0]
 8006a76:	73fb      	strb	r3, [r7, #15]
    c2 = *str2++;
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	1c5a      	adds	r2, r3, #1
 8006a7c:	603a      	str	r2, [r7, #0]
 8006a7e:	781b      	ldrb	r3, [r3, #0]
 8006a80:	73bb      	strb	r3, [r7, #14]
    if (c1 != c2) {
 8006a82:	7bfa      	ldrb	r2, [r7, #15]
 8006a84:	7bbb      	ldrb	r3, [r7, #14]
 8006a86:	429a      	cmp	r2, r3
 8006a88:	d016      	beq.n	8006ab8 <lwip_stricmp+0x54>
      char c1_upc = c1 | 0x20;
 8006a8a:	7bfb      	ldrb	r3, [r7, #15]
 8006a8c:	f043 0320 	orr.w	r3, r3, #32
 8006a90:	737b      	strb	r3, [r7, #13]
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 8006a92:	7b7b      	ldrb	r3, [r7, #13]
 8006a94:	2b60      	cmp	r3, #96	; 0x60
 8006a96:	d90c      	bls.n	8006ab2 <lwip_stricmp+0x4e>
 8006a98:	7b7b      	ldrb	r3, [r7, #13]
 8006a9a:	2b7a      	cmp	r3, #122	; 0x7a
 8006a9c:	d809      	bhi.n	8006ab2 <lwip_stricmp+0x4e>
        /* characters are not equal an one is in the alphabet range:
        downcase both chars and check again */
        char c2_upc = c2 | 0x20;
 8006a9e:	7bbb      	ldrb	r3, [r7, #14]
 8006aa0:	f043 0320 	orr.w	r3, r3, #32
 8006aa4:	733b      	strb	r3, [r7, #12]
        if (c1_upc != c2_upc) {
 8006aa6:	7b7a      	ldrb	r2, [r7, #13]
 8006aa8:	7b3b      	ldrb	r3, [r7, #12]
 8006aaa:	429a      	cmp	r2, r3
 8006aac:	d003      	beq.n	8006ab6 <lwip_stricmp+0x52>
          /* still not equal */
          /* don't care for < or > */
          return 1;
 8006aae:	2301      	movs	r3, #1
 8006ab0:	e006      	b.n	8006ac0 <lwip_stricmp+0x5c>
        }
      } else {
        /* characters are not equal but none is in the alphabet range */
        return 1;
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	e004      	b.n	8006ac0 <lwip_stricmp+0x5c>
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 8006ab6:	bf00      	nop
      }
    }
  } while (c1 != 0);
 8006ab8:	7bfb      	ldrb	r3, [r7, #15]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d1d7      	bne.n	8006a6e <lwip_stricmp+0xa>
  return 0;
 8006abe:	2300      	movs	r3, #0
}
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	3714      	adds	r7, #20
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aca:	4770      	bx	lr

08006acc <lwip_itoa>:
 * lwIP default implementation for itoa() non-standard function.
 * This can be \#defined to itoa() or snprintf(result, bufsize, "%d", number) depending on your platform port.
 */
void
lwip_itoa(char *result, size_t bufsize, int number)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b088      	sub	sp, #32
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	60f8      	str	r0, [r7, #12]
 8006ad4:	60b9      	str	r1, [r7, #8]
 8006ad6:	607a      	str	r2, [r7, #4]
  char *res = result;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	61fb      	str	r3, [r7, #28]
  char *tmp = result + bufsize - 1;
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	3b01      	subs	r3, #1
 8006ae0:	68fa      	ldr	r2, [r7, #12]
 8006ae2:	4413      	add	r3, r2
 8006ae4:	61bb      	str	r3, [r7, #24]
  int n = (number >= 0) ? number : -number;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	bfb8      	it	lt
 8006aec:	425b      	neglt	r3, r3
 8006aee:	617b      	str	r3, [r7, #20]

  /* handle invalid bufsize */
  if (bufsize < 2) {
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	2b01      	cmp	r3, #1
 8006af4:	d806      	bhi.n	8006b04 <lwip_itoa+0x38>
    if (bufsize == 1) {
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	2b01      	cmp	r3, #1
 8006afa:	d154      	bne.n	8006ba6 <lwip_itoa+0xda>
      *result = 0;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	2200      	movs	r2, #0
 8006b00:	701a      	strb	r2, [r3, #0]
    }
    return;
 8006b02:	e050      	b.n	8006ba6 <lwip_itoa+0xda>
  }

  /* First, add sign */
  if (number < 0) {
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	da04      	bge.n	8006b14 <lwip_itoa+0x48>
    *res++ = '-';
 8006b0a:	69fb      	ldr	r3, [r7, #28]
 8006b0c:	1c5a      	adds	r2, r3, #1
 8006b0e:	61fa      	str	r2, [r7, #28]
 8006b10:	222d      	movs	r2, #45	; 0x2d
 8006b12:	701a      	strb	r2, [r3, #0]
  }
  /* Then create the string from the end and stop if buffer full,
     and ensure output string is zero terminated */
  *tmp = 0;
 8006b14:	69bb      	ldr	r3, [r7, #24]
 8006b16:	2200      	movs	r2, #0
 8006b18:	701a      	strb	r2, [r3, #0]
  while ((n != 0) && (tmp > res)) {
 8006b1a:	e01c      	b.n	8006b56 <lwip_itoa+0x8a>
    char val = (char)('0' + (n % 10));
 8006b1c:	697a      	ldr	r2, [r7, #20]
 8006b1e:	4b24      	ldr	r3, [pc, #144]	; (8006bb0 <lwip_itoa+0xe4>)
 8006b20:	fb83 1302 	smull	r1, r3, r3, r2
 8006b24:	1099      	asrs	r1, r3, #2
 8006b26:	17d3      	asrs	r3, r2, #31
 8006b28:	1ac9      	subs	r1, r1, r3
 8006b2a:	460b      	mov	r3, r1
 8006b2c:	009b      	lsls	r3, r3, #2
 8006b2e:	440b      	add	r3, r1
 8006b30:	005b      	lsls	r3, r3, #1
 8006b32:	1ad1      	subs	r1, r2, r3
 8006b34:	b2cb      	uxtb	r3, r1
 8006b36:	3330      	adds	r3, #48	; 0x30
 8006b38:	74fb      	strb	r3, [r7, #19]
    tmp--;
 8006b3a:	69bb      	ldr	r3, [r7, #24]
 8006b3c:	3b01      	subs	r3, #1
 8006b3e:	61bb      	str	r3, [r7, #24]
    *tmp = val;
 8006b40:	69bb      	ldr	r3, [r7, #24]
 8006b42:	7cfa      	ldrb	r2, [r7, #19]
 8006b44:	701a      	strb	r2, [r3, #0]
    n = n / 10;
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	4a19      	ldr	r2, [pc, #100]	; (8006bb0 <lwip_itoa+0xe4>)
 8006b4a:	fb82 1203 	smull	r1, r2, r2, r3
 8006b4e:	1092      	asrs	r2, r2, #2
 8006b50:	17db      	asrs	r3, r3, #31
 8006b52:	1ad3      	subs	r3, r2, r3
 8006b54:	617b      	str	r3, [r7, #20]
  while ((n != 0) && (tmp > res)) {
 8006b56:	697b      	ldr	r3, [r7, #20]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d003      	beq.n	8006b64 <lwip_itoa+0x98>
 8006b5c:	69ba      	ldr	r2, [r7, #24]
 8006b5e:	69fb      	ldr	r3, [r7, #28]
 8006b60:	429a      	cmp	r2, r3
 8006b62:	d8db      	bhi.n	8006b1c <lwip_itoa+0x50>
  }
  if (n) {
 8006b64:	697b      	ldr	r3, [r7, #20]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d003      	beq.n	8006b72 <lwip_itoa+0xa6>
    /* buffer is too small */
    *result = 0;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	701a      	strb	r2, [r3, #0]
    return;
 8006b70:	e01a      	b.n	8006ba8 <lwip_itoa+0xdc>
  }
  if (*tmp == 0) {
 8006b72:	69bb      	ldr	r3, [r7, #24]
 8006b74:	781b      	ldrb	r3, [r3, #0]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d10a      	bne.n	8006b90 <lwip_itoa+0xc4>
    /* Nothing added? */
    *res++ = '0';
 8006b7a:	69fb      	ldr	r3, [r7, #28]
 8006b7c:	1c5a      	adds	r2, r3, #1
 8006b7e:	61fa      	str	r2, [r7, #28]
 8006b80:	2230      	movs	r2, #48	; 0x30
 8006b82:	701a      	strb	r2, [r3, #0]
    *res++ = 0;
 8006b84:	69fb      	ldr	r3, [r7, #28]
 8006b86:	1c5a      	adds	r2, r3, #1
 8006b88:	61fa      	str	r2, [r7, #28]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	701a      	strb	r2, [r3, #0]
    return;
 8006b8e:	e00b      	b.n	8006ba8 <lwip_itoa+0xdc>
  }
  /* move from temporary buffer to output buffer (sign is not moved) */
  memmove(res, tmp, (size_t)((result + bufsize) - tmp));
 8006b90:	68fa      	ldr	r2, [r7, #12]
 8006b92:	68bb      	ldr	r3, [r7, #8]
 8006b94:	441a      	add	r2, r3
 8006b96:	69bb      	ldr	r3, [r7, #24]
 8006b98:	1ad3      	subs	r3, r2, r3
 8006b9a:	461a      	mov	r2, r3
 8006b9c:	69b9      	ldr	r1, [r7, #24]
 8006b9e:	69f8      	ldr	r0, [r7, #28]
 8006ba0:	f00a fb8a 	bl	80112b8 <memmove>
 8006ba4:	e000      	b.n	8006ba8 <lwip_itoa+0xdc>
    return;
 8006ba6:	bf00      	nop
}
 8006ba8:	3720      	adds	r7, #32
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bd80      	pop	{r7, pc}
 8006bae:	bf00      	nop
 8006bb0:	66666667 	.word	0x66666667

08006bb4 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b082      	sub	sp, #8
 8006bb8:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8006bbe:	f000 f8d5 	bl	8006d6c <mem_init>
  memp_init();
 8006bc2:	f000 fbdb 	bl	800737c <memp_init>
  pbuf_init();
  netif_init();
 8006bc6:	f000 fc93 	bl	80074f0 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8006bca:	f007 fea7 	bl	800e91c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8006bce:	f001 fd05 	bl	80085dc <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8006bd2:	f007 fe19 	bl	800e808 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8006bd6:	bf00      	nop
 8006bd8:	3708      	adds	r7, #8
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	bd80      	pop	{r7, pc}
	...

08006be0 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8006be0:	b480      	push	{r7}
 8006be2:	b083      	sub	sp, #12
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	4603      	mov	r3, r0
 8006be8:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8006bea:	4b05      	ldr	r3, [pc, #20]	; (8006c00 <ptr_to_mem+0x20>)
 8006bec:	681a      	ldr	r2, [r3, #0]
 8006bee:	88fb      	ldrh	r3, [r7, #6]
 8006bf0:	4413      	add	r3, r2
}
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	370c      	adds	r7, #12
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfc:	4770      	bx	lr
 8006bfe:	bf00      	nop
 8006c00:	20000540 	.word	0x20000540

08006c04 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8006c04:	b480      	push	{r7}
 8006c06:	b083      	sub	sp, #12
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8006c0c:	4b05      	ldr	r3, [pc, #20]	; (8006c24 <mem_to_ptr+0x20>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	687a      	ldr	r2, [r7, #4]
 8006c12:	1ad3      	subs	r3, r2, r3
 8006c14:	b29b      	uxth	r3, r3
}
 8006c16:	4618      	mov	r0, r3
 8006c18:	370c      	adds	r7, #12
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c20:	4770      	bx	lr
 8006c22:	bf00      	nop
 8006c24:	20000540 	.word	0x20000540

08006c28 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8006c28:	b590      	push	{r4, r7, lr}
 8006c2a:	b085      	sub	sp, #20
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8006c30:	4b45      	ldr	r3, [pc, #276]	; (8006d48 <plug_holes+0x120>)
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	687a      	ldr	r2, [r7, #4]
 8006c36:	429a      	cmp	r2, r3
 8006c38:	d206      	bcs.n	8006c48 <plug_holes+0x20>
 8006c3a:	4b44      	ldr	r3, [pc, #272]	; (8006d4c <plug_holes+0x124>)
 8006c3c:	f240 12df 	movw	r2, #479	; 0x1df
 8006c40:	4943      	ldr	r1, [pc, #268]	; (8006d50 <plug_holes+0x128>)
 8006c42:	4844      	ldr	r0, [pc, #272]	; (8006d54 <plug_holes+0x12c>)
 8006c44:	f00a fc04 	bl	8011450 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8006c48:	4b43      	ldr	r3, [pc, #268]	; (8006d58 <plug_holes+0x130>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	687a      	ldr	r2, [r7, #4]
 8006c4e:	429a      	cmp	r2, r3
 8006c50:	d306      	bcc.n	8006c60 <plug_holes+0x38>
 8006c52:	4b3e      	ldr	r3, [pc, #248]	; (8006d4c <plug_holes+0x124>)
 8006c54:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8006c58:	4940      	ldr	r1, [pc, #256]	; (8006d5c <plug_holes+0x134>)
 8006c5a:	483e      	ldr	r0, [pc, #248]	; (8006d54 <plug_holes+0x12c>)
 8006c5c:	f00a fbf8 	bl	8011450 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	791b      	ldrb	r3, [r3, #4]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d006      	beq.n	8006c76 <plug_holes+0x4e>
 8006c68:	4b38      	ldr	r3, [pc, #224]	; (8006d4c <plug_holes+0x124>)
 8006c6a:	f240 12e1 	movw	r2, #481	; 0x1e1
 8006c6e:	493c      	ldr	r1, [pc, #240]	; (8006d60 <plug_holes+0x138>)
 8006c70:	4838      	ldr	r0, [pc, #224]	; (8006d54 <plug_holes+0x12c>)
 8006c72:	f00a fbed 	bl	8011450 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	881b      	ldrh	r3, [r3, #0]
 8006c7a:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8006c7e:	d906      	bls.n	8006c8e <plug_holes+0x66>
 8006c80:	4b32      	ldr	r3, [pc, #200]	; (8006d4c <plug_holes+0x124>)
 8006c82:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8006c86:	4937      	ldr	r1, [pc, #220]	; (8006d64 <plug_holes+0x13c>)
 8006c88:	4832      	ldr	r0, [pc, #200]	; (8006d54 <plug_holes+0x12c>)
 8006c8a:	f00a fbe1 	bl	8011450 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	881b      	ldrh	r3, [r3, #0]
 8006c92:	4618      	mov	r0, r3
 8006c94:	f7ff ffa4 	bl	8006be0 <ptr_to_mem>
 8006c98:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8006c9a:	687a      	ldr	r2, [r7, #4]
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	429a      	cmp	r2, r3
 8006ca0:	d024      	beq.n	8006cec <plug_holes+0xc4>
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	791b      	ldrb	r3, [r3, #4]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d120      	bne.n	8006cec <plug_holes+0xc4>
 8006caa:	4b2b      	ldr	r3, [pc, #172]	; (8006d58 <plug_holes+0x130>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	68fa      	ldr	r2, [r7, #12]
 8006cb0:	429a      	cmp	r2, r3
 8006cb2:	d01b      	beq.n	8006cec <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8006cb4:	4b2c      	ldr	r3, [pc, #176]	; (8006d68 <plug_holes+0x140>)
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	68fa      	ldr	r2, [r7, #12]
 8006cba:	429a      	cmp	r2, r3
 8006cbc:	d102      	bne.n	8006cc4 <plug_holes+0x9c>
      lfree = mem;
 8006cbe:	4a2a      	ldr	r2, [pc, #168]	; (8006d68 <plug_holes+0x140>)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	881a      	ldrh	r2, [r3, #0]
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	881b      	ldrh	r3, [r3, #0]
 8006cd0:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8006cd4:	d00a      	beq.n	8006cec <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	881b      	ldrh	r3, [r3, #0]
 8006cda:	4618      	mov	r0, r3
 8006cdc:	f7ff ff80 	bl	8006be0 <ptr_to_mem>
 8006ce0:	4604      	mov	r4, r0
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	f7ff ff8e 	bl	8006c04 <mem_to_ptr>
 8006ce8:	4603      	mov	r3, r0
 8006cea:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	885b      	ldrh	r3, [r3, #2]
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	f7ff ff75 	bl	8006be0 <ptr_to_mem>
 8006cf6:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8006cf8:	68ba      	ldr	r2, [r7, #8]
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	429a      	cmp	r2, r3
 8006cfe:	d01f      	beq.n	8006d40 <plug_holes+0x118>
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	791b      	ldrb	r3, [r3, #4]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d11b      	bne.n	8006d40 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8006d08:	4b17      	ldr	r3, [pc, #92]	; (8006d68 <plug_holes+0x140>)
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	687a      	ldr	r2, [r7, #4]
 8006d0e:	429a      	cmp	r2, r3
 8006d10:	d102      	bne.n	8006d18 <plug_holes+0xf0>
      lfree = pmem;
 8006d12:	4a15      	ldr	r2, [pc, #84]	; (8006d68 <plug_holes+0x140>)
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	881a      	ldrh	r2, [r3, #0]
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	881b      	ldrh	r3, [r3, #0]
 8006d24:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8006d28:	d00a      	beq.n	8006d40 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	881b      	ldrh	r3, [r3, #0]
 8006d2e:	4618      	mov	r0, r3
 8006d30:	f7ff ff56 	bl	8006be0 <ptr_to_mem>
 8006d34:	4604      	mov	r4, r0
 8006d36:	68b8      	ldr	r0, [r7, #8]
 8006d38:	f7ff ff64 	bl	8006c04 <mem_to_ptr>
 8006d3c:	4603      	mov	r3, r0
 8006d3e:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8006d40:	bf00      	nop
 8006d42:	3714      	adds	r7, #20
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bd90      	pop	{r4, r7, pc}
 8006d48:	20000540 	.word	0x20000540
 8006d4c:	080135b4 	.word	0x080135b4
 8006d50:	080135e4 	.word	0x080135e4
 8006d54:	080135fc 	.word	0x080135fc
 8006d58:	20000544 	.word	0x20000544
 8006d5c:	08013624 	.word	0x08013624
 8006d60:	08013640 	.word	0x08013640
 8006d64:	0801365c 	.word	0x0801365c
 8006d68:	20000548 	.word	0x20000548

08006d6c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b082      	sub	sp, #8
 8006d70:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8006d72:	4b18      	ldr	r3, [pc, #96]	; (8006dd4 <mem_init+0x68>)
 8006d74:	3303      	adds	r3, #3
 8006d76:	f023 0303 	bic.w	r3, r3, #3
 8006d7a:	461a      	mov	r2, r3
 8006d7c:	4b16      	ldr	r3, [pc, #88]	; (8006dd8 <mem_init+0x6c>)
 8006d7e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8006d80:	4b15      	ldr	r3, [pc, #84]	; (8006dd8 <mem_init+0x6c>)
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8006d8c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2200      	movs	r2, #0
 8006d92:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2200      	movs	r2, #0
 8006d98:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8006d9a:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 8006d9e:	f7ff ff1f 	bl	8006be0 <ptr_to_mem>
 8006da2:	4603      	mov	r3, r0
 8006da4:	4a0d      	ldr	r2, [pc, #52]	; (8006ddc <mem_init+0x70>)
 8006da6:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8006da8:	4b0c      	ldr	r3, [pc, #48]	; (8006ddc <mem_init+0x70>)
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	2201      	movs	r2, #1
 8006dae:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8006db0:	4b0a      	ldr	r3, [pc, #40]	; (8006ddc <mem_init+0x70>)
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8006db8:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8006dba:	4b08      	ldr	r3, [pc, #32]	; (8006ddc <mem_init+0x70>)
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8006dc2:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8006dc4:	4b04      	ldr	r3, [pc, #16]	; (8006dd8 <mem_init+0x6c>)
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	4a05      	ldr	r2, [pc, #20]	; (8006de0 <mem_init+0x74>)
 8006dca:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8006dcc:	bf00      	nop
 8006dce:	3708      	adds	r7, #8
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bd80      	pop	{r7, pc}
 8006dd4:	20003df4 	.word	0x20003df4
 8006dd8:	20000540 	.word	0x20000540
 8006ddc:	20000544 	.word	0x20000544
 8006de0:	20000548 	.word	0x20000548

08006de4 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b086      	sub	sp, #24
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8006dec:	6878      	ldr	r0, [r7, #4]
 8006dee:	f7ff ff09 	bl	8006c04 <mem_to_ptr>
 8006df2:	4603      	mov	r3, r0
 8006df4:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	881b      	ldrh	r3, [r3, #0]
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	f7ff fef0 	bl	8006be0 <ptr_to_mem>
 8006e00:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	885b      	ldrh	r3, [r3, #2]
 8006e06:	4618      	mov	r0, r3
 8006e08:	f7ff feea 	bl	8006be0 <ptr_to_mem>
 8006e0c:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	881b      	ldrh	r3, [r3, #0]
 8006e12:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8006e16:	d818      	bhi.n	8006e4a <mem_link_valid+0x66>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	885b      	ldrh	r3, [r3, #2]
 8006e1c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8006e20:	d813      	bhi.n	8006e4a <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8006e26:	8afa      	ldrh	r2, [r7, #22]
 8006e28:	429a      	cmp	r2, r3
 8006e2a:	d004      	beq.n	8006e36 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	881b      	ldrh	r3, [r3, #0]
 8006e30:	8afa      	ldrh	r2, [r7, #22]
 8006e32:	429a      	cmp	r2, r3
 8006e34:	d109      	bne.n	8006e4a <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8006e36:	4b08      	ldr	r3, [pc, #32]	; (8006e58 <mem_link_valid+0x74>)
 8006e38:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8006e3a:	693a      	ldr	r2, [r7, #16]
 8006e3c:	429a      	cmp	r2, r3
 8006e3e:	d006      	beq.n	8006e4e <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8006e40:	693b      	ldr	r3, [r7, #16]
 8006e42:	885b      	ldrh	r3, [r3, #2]
 8006e44:	8afa      	ldrh	r2, [r7, #22]
 8006e46:	429a      	cmp	r2, r3
 8006e48:	d001      	beq.n	8006e4e <mem_link_valid+0x6a>
    return 0;
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	e000      	b.n	8006e50 <mem_link_valid+0x6c>
  }
  return 1;
 8006e4e:	2301      	movs	r3, #1
}
 8006e50:	4618      	mov	r0, r3
 8006e52:	3718      	adds	r7, #24
 8006e54:	46bd      	mov	sp, r7
 8006e56:	bd80      	pop	{r7, pc}
 8006e58:	20000544 	.word	0x20000544

08006e5c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b084      	sub	sp, #16
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d04c      	beq.n	8006f04 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	f003 0303 	and.w	r3, r3, #3
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d007      	beq.n	8006e84 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8006e74:	4b25      	ldr	r3, [pc, #148]	; (8006f0c <mem_free+0xb0>)
 8006e76:	f240 2273 	movw	r2, #627	; 0x273
 8006e7a:	4925      	ldr	r1, [pc, #148]	; (8006f10 <mem_free+0xb4>)
 8006e7c:	4825      	ldr	r0, [pc, #148]	; (8006f14 <mem_free+0xb8>)
 8006e7e:	f00a fae7 	bl	8011450 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8006e82:	e040      	b.n	8006f06 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	3b08      	subs	r3, #8
 8006e88:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8006e8a:	4b23      	ldr	r3, [pc, #140]	; (8006f18 <mem_free+0xbc>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	68fa      	ldr	r2, [r7, #12]
 8006e90:	429a      	cmp	r2, r3
 8006e92:	d306      	bcc.n	8006ea2 <mem_free+0x46>
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	f103 020c 	add.w	r2, r3, #12
 8006e9a:	4b20      	ldr	r3, [pc, #128]	; (8006f1c <mem_free+0xc0>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	429a      	cmp	r2, r3
 8006ea0:	d907      	bls.n	8006eb2 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8006ea2:	4b1a      	ldr	r3, [pc, #104]	; (8006f0c <mem_free+0xb0>)
 8006ea4:	f240 227f 	movw	r2, #639	; 0x27f
 8006ea8:	491d      	ldr	r1, [pc, #116]	; (8006f20 <mem_free+0xc4>)
 8006eaa:	481a      	ldr	r0, [pc, #104]	; (8006f14 <mem_free+0xb8>)
 8006eac:	f00a fad0 	bl	8011450 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8006eb0:	e029      	b.n	8006f06 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	791b      	ldrb	r3, [r3, #4]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d107      	bne.n	8006eca <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8006eba:	4b14      	ldr	r3, [pc, #80]	; (8006f0c <mem_free+0xb0>)
 8006ebc:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8006ec0:	4918      	ldr	r1, [pc, #96]	; (8006f24 <mem_free+0xc8>)
 8006ec2:	4814      	ldr	r0, [pc, #80]	; (8006f14 <mem_free+0xb8>)
 8006ec4:	f00a fac4 	bl	8011450 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8006ec8:	e01d      	b.n	8006f06 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8006eca:	68f8      	ldr	r0, [r7, #12]
 8006ecc:	f7ff ff8a 	bl	8006de4 <mem_link_valid>
 8006ed0:	4603      	mov	r3, r0
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d107      	bne.n	8006ee6 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8006ed6:	4b0d      	ldr	r3, [pc, #52]	; (8006f0c <mem_free+0xb0>)
 8006ed8:	f240 2295 	movw	r2, #661	; 0x295
 8006edc:	4912      	ldr	r1, [pc, #72]	; (8006f28 <mem_free+0xcc>)
 8006ede:	480d      	ldr	r0, [pc, #52]	; (8006f14 <mem_free+0xb8>)
 8006ee0:	f00a fab6 	bl	8011450 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8006ee4:	e00f      	b.n	8006f06 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8006eec:	4b0f      	ldr	r3, [pc, #60]	; (8006f2c <mem_free+0xd0>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	68fa      	ldr	r2, [r7, #12]
 8006ef2:	429a      	cmp	r2, r3
 8006ef4:	d202      	bcs.n	8006efc <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8006ef6:	4a0d      	ldr	r2, [pc, #52]	; (8006f2c <mem_free+0xd0>)
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8006efc:	68f8      	ldr	r0, [r7, #12]
 8006efe:	f7ff fe93 	bl	8006c28 <plug_holes>
 8006f02:	e000      	b.n	8006f06 <mem_free+0xaa>
    return;
 8006f04:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8006f06:	3710      	adds	r7, #16
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bd80      	pop	{r7, pc}
 8006f0c:	080135b4 	.word	0x080135b4
 8006f10:	08013688 	.word	0x08013688
 8006f14:	080135fc 	.word	0x080135fc
 8006f18:	20000540 	.word	0x20000540
 8006f1c:	20000544 	.word	0x20000544
 8006f20:	080136ac 	.word	0x080136ac
 8006f24:	080136c8 	.word	0x080136c8
 8006f28:	080136f0 	.word	0x080136f0
 8006f2c:	20000548 	.word	0x20000548

08006f30 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b088      	sub	sp, #32
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
 8006f38:	460b      	mov	r3, r1
 8006f3a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8006f3c:	887b      	ldrh	r3, [r7, #2]
 8006f3e:	3303      	adds	r3, #3
 8006f40:	b29b      	uxth	r3, r3
 8006f42:	f023 0303 	bic.w	r3, r3, #3
 8006f46:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8006f48:	8bfb      	ldrh	r3, [r7, #30]
 8006f4a:	2b0b      	cmp	r3, #11
 8006f4c:	d801      	bhi.n	8006f52 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8006f4e:	230c      	movs	r3, #12
 8006f50:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8006f52:	8bfb      	ldrh	r3, [r7, #30]
 8006f54:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8006f58:	d803      	bhi.n	8006f62 <mem_trim+0x32>
 8006f5a:	8bfa      	ldrh	r2, [r7, #30]
 8006f5c:	887b      	ldrh	r3, [r7, #2]
 8006f5e:	429a      	cmp	r2, r3
 8006f60:	d201      	bcs.n	8006f66 <mem_trim+0x36>
    return NULL;
 8006f62:	2300      	movs	r3, #0
 8006f64:	e0cc      	b.n	8007100 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8006f66:	4b68      	ldr	r3, [pc, #416]	; (8007108 <mem_trim+0x1d8>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	687a      	ldr	r2, [r7, #4]
 8006f6c:	429a      	cmp	r2, r3
 8006f6e:	d304      	bcc.n	8006f7a <mem_trim+0x4a>
 8006f70:	4b66      	ldr	r3, [pc, #408]	; (800710c <mem_trim+0x1dc>)
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	687a      	ldr	r2, [r7, #4]
 8006f76:	429a      	cmp	r2, r3
 8006f78:	d306      	bcc.n	8006f88 <mem_trim+0x58>
 8006f7a:	4b65      	ldr	r3, [pc, #404]	; (8007110 <mem_trim+0x1e0>)
 8006f7c:	f240 22d1 	movw	r2, #721	; 0x2d1
 8006f80:	4964      	ldr	r1, [pc, #400]	; (8007114 <mem_trim+0x1e4>)
 8006f82:	4865      	ldr	r0, [pc, #404]	; (8007118 <mem_trim+0x1e8>)
 8006f84:	f00a fa64 	bl	8011450 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8006f88:	4b5f      	ldr	r3, [pc, #380]	; (8007108 <mem_trim+0x1d8>)
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	687a      	ldr	r2, [r7, #4]
 8006f8e:	429a      	cmp	r2, r3
 8006f90:	d304      	bcc.n	8006f9c <mem_trim+0x6c>
 8006f92:	4b5e      	ldr	r3, [pc, #376]	; (800710c <mem_trim+0x1dc>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	687a      	ldr	r2, [r7, #4]
 8006f98:	429a      	cmp	r2, r3
 8006f9a:	d301      	bcc.n	8006fa0 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	e0af      	b.n	8007100 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	3b08      	subs	r3, #8
 8006fa4:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8006fa6:	69b8      	ldr	r0, [r7, #24]
 8006fa8:	f7ff fe2c 	bl	8006c04 <mem_to_ptr>
 8006fac:	4603      	mov	r3, r0
 8006fae:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8006fb0:	69bb      	ldr	r3, [r7, #24]
 8006fb2:	881a      	ldrh	r2, [r3, #0]
 8006fb4:	8afb      	ldrh	r3, [r7, #22]
 8006fb6:	1ad3      	subs	r3, r2, r3
 8006fb8:	b29b      	uxth	r3, r3
 8006fba:	3b08      	subs	r3, #8
 8006fbc:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8006fbe:	8bfa      	ldrh	r2, [r7, #30]
 8006fc0:	8abb      	ldrh	r3, [r7, #20]
 8006fc2:	429a      	cmp	r2, r3
 8006fc4:	d906      	bls.n	8006fd4 <mem_trim+0xa4>
 8006fc6:	4b52      	ldr	r3, [pc, #328]	; (8007110 <mem_trim+0x1e0>)
 8006fc8:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8006fcc:	4953      	ldr	r1, [pc, #332]	; (800711c <mem_trim+0x1ec>)
 8006fce:	4852      	ldr	r0, [pc, #328]	; (8007118 <mem_trim+0x1e8>)
 8006fd0:	f00a fa3e 	bl	8011450 <iprintf>
  if (newsize > size) {
 8006fd4:	8bfa      	ldrh	r2, [r7, #30]
 8006fd6:	8abb      	ldrh	r3, [r7, #20]
 8006fd8:	429a      	cmp	r2, r3
 8006fda:	d901      	bls.n	8006fe0 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8006fdc:	2300      	movs	r3, #0
 8006fde:	e08f      	b.n	8007100 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8006fe0:	8bfa      	ldrh	r2, [r7, #30]
 8006fe2:	8abb      	ldrh	r3, [r7, #20]
 8006fe4:	429a      	cmp	r2, r3
 8006fe6:	d101      	bne.n	8006fec <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	e089      	b.n	8007100 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8006fec:	69bb      	ldr	r3, [r7, #24]
 8006fee:	881b      	ldrh	r3, [r3, #0]
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	f7ff fdf5 	bl	8006be0 <ptr_to_mem>
 8006ff6:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8006ff8:	693b      	ldr	r3, [r7, #16]
 8006ffa:	791b      	ldrb	r3, [r3, #4]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d13f      	bne.n	8007080 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8007000:	69bb      	ldr	r3, [r7, #24]
 8007002:	881b      	ldrh	r3, [r3, #0]
 8007004:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8007008:	d106      	bne.n	8007018 <mem_trim+0xe8>
 800700a:	4b41      	ldr	r3, [pc, #260]	; (8007110 <mem_trim+0x1e0>)
 800700c:	f240 22f5 	movw	r2, #757	; 0x2f5
 8007010:	4943      	ldr	r1, [pc, #268]	; (8007120 <mem_trim+0x1f0>)
 8007012:	4841      	ldr	r0, [pc, #260]	; (8007118 <mem_trim+0x1e8>)
 8007014:	f00a fa1c 	bl	8011450 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8007018:	693b      	ldr	r3, [r7, #16]
 800701a:	881b      	ldrh	r3, [r3, #0]
 800701c:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800701e:	8afa      	ldrh	r2, [r7, #22]
 8007020:	8bfb      	ldrh	r3, [r7, #30]
 8007022:	4413      	add	r3, r2
 8007024:	b29b      	uxth	r3, r3
 8007026:	3308      	adds	r3, #8
 8007028:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800702a:	4b3e      	ldr	r3, [pc, #248]	; (8007124 <mem_trim+0x1f4>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	693a      	ldr	r2, [r7, #16]
 8007030:	429a      	cmp	r2, r3
 8007032:	d106      	bne.n	8007042 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8007034:	89fb      	ldrh	r3, [r7, #14]
 8007036:	4618      	mov	r0, r3
 8007038:	f7ff fdd2 	bl	8006be0 <ptr_to_mem>
 800703c:	4603      	mov	r3, r0
 800703e:	4a39      	ldr	r2, [pc, #228]	; (8007124 <mem_trim+0x1f4>)
 8007040:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8007042:	89fb      	ldrh	r3, [r7, #14]
 8007044:	4618      	mov	r0, r3
 8007046:	f7ff fdcb 	bl	8006be0 <ptr_to_mem>
 800704a:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800704c:	693b      	ldr	r3, [r7, #16]
 800704e:	2200      	movs	r2, #0
 8007050:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8007052:	693b      	ldr	r3, [r7, #16]
 8007054:	89ba      	ldrh	r2, [r7, #12]
 8007056:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8007058:	693b      	ldr	r3, [r7, #16]
 800705a:	8afa      	ldrh	r2, [r7, #22]
 800705c:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800705e:	69bb      	ldr	r3, [r7, #24]
 8007060:	89fa      	ldrh	r2, [r7, #14]
 8007062:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8007064:	693b      	ldr	r3, [r7, #16]
 8007066:	881b      	ldrh	r3, [r3, #0]
 8007068:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800706c:	d047      	beq.n	80070fe <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800706e:	693b      	ldr	r3, [r7, #16]
 8007070:	881b      	ldrh	r3, [r3, #0]
 8007072:	4618      	mov	r0, r3
 8007074:	f7ff fdb4 	bl	8006be0 <ptr_to_mem>
 8007078:	4602      	mov	r2, r0
 800707a:	89fb      	ldrh	r3, [r7, #14]
 800707c:	8053      	strh	r3, [r2, #2]
 800707e:	e03e      	b.n	80070fe <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8007080:	8bfb      	ldrh	r3, [r7, #30]
 8007082:	f103 0214 	add.w	r2, r3, #20
 8007086:	8abb      	ldrh	r3, [r7, #20]
 8007088:	429a      	cmp	r2, r3
 800708a:	d838      	bhi.n	80070fe <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800708c:	8afa      	ldrh	r2, [r7, #22]
 800708e:	8bfb      	ldrh	r3, [r7, #30]
 8007090:	4413      	add	r3, r2
 8007092:	b29b      	uxth	r3, r3
 8007094:	3308      	adds	r3, #8
 8007096:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8007098:	69bb      	ldr	r3, [r7, #24]
 800709a:	881b      	ldrh	r3, [r3, #0]
 800709c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80070a0:	d106      	bne.n	80070b0 <mem_trim+0x180>
 80070a2:	4b1b      	ldr	r3, [pc, #108]	; (8007110 <mem_trim+0x1e0>)
 80070a4:	f240 3216 	movw	r2, #790	; 0x316
 80070a8:	491d      	ldr	r1, [pc, #116]	; (8007120 <mem_trim+0x1f0>)
 80070aa:	481b      	ldr	r0, [pc, #108]	; (8007118 <mem_trim+0x1e8>)
 80070ac:	f00a f9d0 	bl	8011450 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 80070b0:	89fb      	ldrh	r3, [r7, #14]
 80070b2:	4618      	mov	r0, r3
 80070b4:	f7ff fd94 	bl	8006be0 <ptr_to_mem>
 80070b8:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 80070ba:	4b1a      	ldr	r3, [pc, #104]	; (8007124 <mem_trim+0x1f4>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	693a      	ldr	r2, [r7, #16]
 80070c0:	429a      	cmp	r2, r3
 80070c2:	d202      	bcs.n	80070ca <mem_trim+0x19a>
      lfree = mem2;
 80070c4:	4a17      	ldr	r2, [pc, #92]	; (8007124 <mem_trim+0x1f4>)
 80070c6:	693b      	ldr	r3, [r7, #16]
 80070c8:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 80070ca:	693b      	ldr	r3, [r7, #16]
 80070cc:	2200      	movs	r2, #0
 80070ce:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 80070d0:	69bb      	ldr	r3, [r7, #24]
 80070d2:	881a      	ldrh	r2, [r3, #0]
 80070d4:	693b      	ldr	r3, [r7, #16]
 80070d6:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 80070d8:	693b      	ldr	r3, [r7, #16]
 80070da:	8afa      	ldrh	r2, [r7, #22]
 80070dc:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 80070de:	69bb      	ldr	r3, [r7, #24]
 80070e0:	89fa      	ldrh	r2, [r7, #14]
 80070e2:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80070e4:	693b      	ldr	r3, [r7, #16]
 80070e6:	881b      	ldrh	r3, [r3, #0]
 80070e8:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80070ec:	d007      	beq.n	80070fe <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80070ee:	693b      	ldr	r3, [r7, #16]
 80070f0:	881b      	ldrh	r3, [r3, #0]
 80070f2:	4618      	mov	r0, r3
 80070f4:	f7ff fd74 	bl	8006be0 <ptr_to_mem>
 80070f8:	4602      	mov	r2, r0
 80070fa:	89fb      	ldrh	r3, [r7, #14]
 80070fc:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 80070fe:	687b      	ldr	r3, [r7, #4]
}
 8007100:	4618      	mov	r0, r3
 8007102:	3720      	adds	r7, #32
 8007104:	46bd      	mov	sp, r7
 8007106:	bd80      	pop	{r7, pc}
 8007108:	20000540 	.word	0x20000540
 800710c:	20000544 	.word	0x20000544
 8007110:	080135b4 	.word	0x080135b4
 8007114:	08013724 	.word	0x08013724
 8007118:	080135fc 	.word	0x080135fc
 800711c:	0801373c 	.word	0x0801373c
 8007120:	0801375c 	.word	0x0801375c
 8007124:	20000548 	.word	0x20000548

08007128 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b088      	sub	sp, #32
 800712c:	af00      	add	r7, sp, #0
 800712e:	4603      	mov	r3, r0
 8007130:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8007132:	88fb      	ldrh	r3, [r7, #6]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d101      	bne.n	800713c <mem_malloc+0x14>
    return NULL;
 8007138:	2300      	movs	r3, #0
 800713a:	e0d9      	b.n	80072f0 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800713c:	88fb      	ldrh	r3, [r7, #6]
 800713e:	3303      	adds	r3, #3
 8007140:	b29b      	uxth	r3, r3
 8007142:	f023 0303 	bic.w	r3, r3, #3
 8007146:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8007148:	8bbb      	ldrh	r3, [r7, #28]
 800714a:	2b0b      	cmp	r3, #11
 800714c:	d801      	bhi.n	8007152 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800714e:	230c      	movs	r3, #12
 8007150:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8007152:	8bbb      	ldrh	r3, [r7, #28]
 8007154:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8007158:	d803      	bhi.n	8007162 <mem_malloc+0x3a>
 800715a:	8bba      	ldrh	r2, [r7, #28]
 800715c:	88fb      	ldrh	r3, [r7, #6]
 800715e:	429a      	cmp	r2, r3
 8007160:	d201      	bcs.n	8007166 <mem_malloc+0x3e>
    return NULL;
 8007162:	2300      	movs	r3, #0
 8007164:	e0c4      	b.n	80072f0 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8007166:	4b64      	ldr	r3, [pc, #400]	; (80072f8 <mem_malloc+0x1d0>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	4618      	mov	r0, r3
 800716c:	f7ff fd4a 	bl	8006c04 <mem_to_ptr>
 8007170:	4603      	mov	r3, r0
 8007172:	83fb      	strh	r3, [r7, #30]
 8007174:	e0b4      	b.n	80072e0 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8007176:	8bfb      	ldrh	r3, [r7, #30]
 8007178:	4618      	mov	r0, r3
 800717a:	f7ff fd31 	bl	8006be0 <ptr_to_mem>
 800717e:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8007180:	697b      	ldr	r3, [r7, #20]
 8007182:	791b      	ldrb	r3, [r3, #4]
 8007184:	2b00      	cmp	r3, #0
 8007186:	f040 80a4 	bne.w	80072d2 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800718a:	697b      	ldr	r3, [r7, #20]
 800718c:	881b      	ldrh	r3, [r3, #0]
 800718e:	461a      	mov	r2, r3
 8007190:	8bfb      	ldrh	r3, [r7, #30]
 8007192:	1ad3      	subs	r3, r2, r3
 8007194:	f1a3 0208 	sub.w	r2, r3, #8
 8007198:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800719a:	429a      	cmp	r2, r3
 800719c:	f0c0 8099 	bcc.w	80072d2 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 80071a0:	697b      	ldr	r3, [r7, #20]
 80071a2:	881b      	ldrh	r3, [r3, #0]
 80071a4:	461a      	mov	r2, r3
 80071a6:	8bfb      	ldrh	r3, [r7, #30]
 80071a8:	1ad3      	subs	r3, r2, r3
 80071aa:	f1a3 0208 	sub.w	r2, r3, #8
 80071ae:	8bbb      	ldrh	r3, [r7, #28]
 80071b0:	3314      	adds	r3, #20
 80071b2:	429a      	cmp	r2, r3
 80071b4:	d333      	bcc.n	800721e <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 80071b6:	8bfa      	ldrh	r2, [r7, #30]
 80071b8:	8bbb      	ldrh	r3, [r7, #28]
 80071ba:	4413      	add	r3, r2
 80071bc:	b29b      	uxth	r3, r3
 80071be:	3308      	adds	r3, #8
 80071c0:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 80071c2:	8a7b      	ldrh	r3, [r7, #18]
 80071c4:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80071c8:	d106      	bne.n	80071d8 <mem_malloc+0xb0>
 80071ca:	4b4c      	ldr	r3, [pc, #304]	; (80072fc <mem_malloc+0x1d4>)
 80071cc:	f240 3287 	movw	r2, #903	; 0x387
 80071d0:	494b      	ldr	r1, [pc, #300]	; (8007300 <mem_malloc+0x1d8>)
 80071d2:	484c      	ldr	r0, [pc, #304]	; (8007304 <mem_malloc+0x1dc>)
 80071d4:	f00a f93c 	bl	8011450 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 80071d8:	8a7b      	ldrh	r3, [r7, #18]
 80071da:	4618      	mov	r0, r3
 80071dc:	f7ff fd00 	bl	8006be0 <ptr_to_mem>
 80071e0:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	2200      	movs	r2, #0
 80071e6:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 80071e8:	697b      	ldr	r3, [r7, #20]
 80071ea:	881a      	ldrh	r2, [r3, #0]
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	8bfa      	ldrh	r2, [r7, #30]
 80071f4:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 80071f6:	697b      	ldr	r3, [r7, #20]
 80071f8:	8a7a      	ldrh	r2, [r7, #18]
 80071fa:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 80071fc:	697b      	ldr	r3, [r7, #20]
 80071fe:	2201      	movs	r2, #1
 8007200:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	881b      	ldrh	r3, [r3, #0]
 8007206:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800720a:	d00b      	beq.n	8007224 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	881b      	ldrh	r3, [r3, #0]
 8007210:	4618      	mov	r0, r3
 8007212:	f7ff fce5 	bl	8006be0 <ptr_to_mem>
 8007216:	4602      	mov	r2, r0
 8007218:	8a7b      	ldrh	r3, [r7, #18]
 800721a:	8053      	strh	r3, [r2, #2]
 800721c:	e002      	b.n	8007224 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800721e:	697b      	ldr	r3, [r7, #20]
 8007220:	2201      	movs	r2, #1
 8007222:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8007224:	4b34      	ldr	r3, [pc, #208]	; (80072f8 <mem_malloc+0x1d0>)
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	697a      	ldr	r2, [r7, #20]
 800722a:	429a      	cmp	r2, r3
 800722c:	d127      	bne.n	800727e <mem_malloc+0x156>
          struct mem *cur = lfree;
 800722e:	4b32      	ldr	r3, [pc, #200]	; (80072f8 <mem_malloc+0x1d0>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8007234:	e005      	b.n	8007242 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8007236:	69bb      	ldr	r3, [r7, #24]
 8007238:	881b      	ldrh	r3, [r3, #0]
 800723a:	4618      	mov	r0, r3
 800723c:	f7ff fcd0 	bl	8006be0 <ptr_to_mem>
 8007240:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8007242:	69bb      	ldr	r3, [r7, #24]
 8007244:	791b      	ldrb	r3, [r3, #4]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d004      	beq.n	8007254 <mem_malloc+0x12c>
 800724a:	4b2f      	ldr	r3, [pc, #188]	; (8007308 <mem_malloc+0x1e0>)
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	69ba      	ldr	r2, [r7, #24]
 8007250:	429a      	cmp	r2, r3
 8007252:	d1f0      	bne.n	8007236 <mem_malloc+0x10e>
          }
          lfree = cur;
 8007254:	4a28      	ldr	r2, [pc, #160]	; (80072f8 <mem_malloc+0x1d0>)
 8007256:	69bb      	ldr	r3, [r7, #24]
 8007258:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800725a:	4b27      	ldr	r3, [pc, #156]	; (80072f8 <mem_malloc+0x1d0>)
 800725c:	681a      	ldr	r2, [r3, #0]
 800725e:	4b2a      	ldr	r3, [pc, #168]	; (8007308 <mem_malloc+0x1e0>)
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	429a      	cmp	r2, r3
 8007264:	d00b      	beq.n	800727e <mem_malloc+0x156>
 8007266:	4b24      	ldr	r3, [pc, #144]	; (80072f8 <mem_malloc+0x1d0>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	791b      	ldrb	r3, [r3, #4]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d006      	beq.n	800727e <mem_malloc+0x156>
 8007270:	4b22      	ldr	r3, [pc, #136]	; (80072fc <mem_malloc+0x1d4>)
 8007272:	f240 32b5 	movw	r2, #949	; 0x3b5
 8007276:	4925      	ldr	r1, [pc, #148]	; (800730c <mem_malloc+0x1e4>)
 8007278:	4822      	ldr	r0, [pc, #136]	; (8007304 <mem_malloc+0x1dc>)
 800727a:	f00a f8e9 	bl	8011450 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800727e:	8bba      	ldrh	r2, [r7, #28]
 8007280:	697b      	ldr	r3, [r7, #20]
 8007282:	4413      	add	r3, r2
 8007284:	3308      	adds	r3, #8
 8007286:	4a20      	ldr	r2, [pc, #128]	; (8007308 <mem_malloc+0x1e0>)
 8007288:	6812      	ldr	r2, [r2, #0]
 800728a:	4293      	cmp	r3, r2
 800728c:	d906      	bls.n	800729c <mem_malloc+0x174>
 800728e:	4b1b      	ldr	r3, [pc, #108]	; (80072fc <mem_malloc+0x1d4>)
 8007290:	f240 32b9 	movw	r2, #953	; 0x3b9
 8007294:	491e      	ldr	r1, [pc, #120]	; (8007310 <mem_malloc+0x1e8>)
 8007296:	481b      	ldr	r0, [pc, #108]	; (8007304 <mem_malloc+0x1dc>)
 8007298:	f00a f8da 	bl	8011450 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800729c:	697b      	ldr	r3, [r7, #20]
 800729e:	f003 0303 	and.w	r3, r3, #3
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d006      	beq.n	80072b4 <mem_malloc+0x18c>
 80072a6:	4b15      	ldr	r3, [pc, #84]	; (80072fc <mem_malloc+0x1d4>)
 80072a8:	f240 32bb 	movw	r2, #955	; 0x3bb
 80072ac:	4919      	ldr	r1, [pc, #100]	; (8007314 <mem_malloc+0x1ec>)
 80072ae:	4815      	ldr	r0, [pc, #84]	; (8007304 <mem_malloc+0x1dc>)
 80072b0:	f00a f8ce 	bl	8011450 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 80072b4:	697b      	ldr	r3, [r7, #20]
 80072b6:	f003 0303 	and.w	r3, r3, #3
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d006      	beq.n	80072cc <mem_malloc+0x1a4>
 80072be:	4b0f      	ldr	r3, [pc, #60]	; (80072fc <mem_malloc+0x1d4>)
 80072c0:	f240 32bd 	movw	r2, #957	; 0x3bd
 80072c4:	4914      	ldr	r1, [pc, #80]	; (8007318 <mem_malloc+0x1f0>)
 80072c6:	480f      	ldr	r0, [pc, #60]	; (8007304 <mem_malloc+0x1dc>)
 80072c8:	f00a f8c2 	bl	8011450 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 80072cc:	697b      	ldr	r3, [r7, #20]
 80072ce:	3308      	adds	r3, #8
 80072d0:	e00e      	b.n	80072f0 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 80072d2:	8bfb      	ldrh	r3, [r7, #30]
 80072d4:	4618      	mov	r0, r3
 80072d6:	f7ff fc83 	bl	8006be0 <ptr_to_mem>
 80072da:	4603      	mov	r3, r0
 80072dc:	881b      	ldrh	r3, [r3, #0]
 80072de:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80072e0:	8bfa      	ldrh	r2, [r7, #30]
 80072e2:	8bbb      	ldrh	r3, [r7, #28]
 80072e4:	f5c3 5320 	rsb	r3, r3, #10240	; 0x2800
 80072e8:	429a      	cmp	r2, r3
 80072ea:	f4ff af44 	bcc.w	8007176 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 80072ee:	2300      	movs	r3, #0
}
 80072f0:	4618      	mov	r0, r3
 80072f2:	3720      	adds	r7, #32
 80072f4:	46bd      	mov	sp, r7
 80072f6:	bd80      	pop	{r7, pc}
 80072f8:	20000548 	.word	0x20000548
 80072fc:	080135b4 	.word	0x080135b4
 8007300:	0801375c 	.word	0x0801375c
 8007304:	080135fc 	.word	0x080135fc
 8007308:	20000544 	.word	0x20000544
 800730c:	08013770 	.word	0x08013770
 8007310:	0801378c 	.word	0x0801378c
 8007314:	080137bc 	.word	0x080137bc
 8007318:	080137ec 	.word	0x080137ec

0800731c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800731c:	b480      	push	{r7}
 800731e:	b085      	sub	sp, #20
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	689b      	ldr	r3, [r3, #8]
 8007328:	2200      	movs	r2, #0
 800732a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	685b      	ldr	r3, [r3, #4]
 8007330:	3303      	adds	r3, #3
 8007332:	f023 0303 	bic.w	r3, r3, #3
 8007336:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8007338:	2300      	movs	r3, #0
 800733a:	60fb      	str	r3, [r7, #12]
 800733c:	e011      	b.n	8007362 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	689b      	ldr	r3, [r3, #8]
 8007342:	681a      	ldr	r2, [r3, #0]
 8007344:	68bb      	ldr	r3, [r7, #8]
 8007346:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	689b      	ldr	r3, [r3, #8]
 800734c:	68ba      	ldr	r2, [r7, #8]
 800734e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	881b      	ldrh	r3, [r3, #0]
 8007354:	461a      	mov	r2, r3
 8007356:	68bb      	ldr	r3, [r7, #8]
 8007358:	4413      	add	r3, r2
 800735a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	3301      	adds	r3, #1
 8007360:	60fb      	str	r3, [r7, #12]
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	885b      	ldrh	r3, [r3, #2]
 8007366:	461a      	mov	r2, r3
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	4293      	cmp	r3, r2
 800736c:	dbe7      	blt.n	800733e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800736e:	bf00      	nop
 8007370:	bf00      	nop
 8007372:	3714      	adds	r7, #20
 8007374:	46bd      	mov	sp, r7
 8007376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737a:	4770      	bx	lr

0800737c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b082      	sub	sp, #8
 8007380:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8007382:	2300      	movs	r3, #0
 8007384:	80fb      	strh	r3, [r7, #6]
 8007386:	e009      	b.n	800739c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8007388:	88fb      	ldrh	r3, [r7, #6]
 800738a:	4a08      	ldr	r2, [pc, #32]	; (80073ac <memp_init+0x30>)
 800738c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007390:	4618      	mov	r0, r3
 8007392:	f7ff ffc3 	bl	800731c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8007396:	88fb      	ldrh	r3, [r7, #6]
 8007398:	3301      	adds	r3, #1
 800739a:	80fb      	strh	r3, [r7, #6]
 800739c:	88fb      	ldrh	r3, [r7, #6]
 800739e:	2b08      	cmp	r3, #8
 80073a0:	d9f2      	bls.n	8007388 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 80073a2:	bf00      	nop
 80073a4:	bf00      	nop
 80073a6:	3708      	adds	r7, #8
 80073a8:	46bd      	mov	sp, r7
 80073aa:	bd80      	pop	{r7, pc}
 80073ac:	08017d4c 	.word	0x08017d4c

080073b0 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b084      	sub	sp, #16
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	689b      	ldr	r3, [r3, #8]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d012      	beq.n	80073ec <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	689b      	ldr	r3, [r3, #8]
 80073ca:	68fa      	ldr	r2, [r7, #12]
 80073cc:	6812      	ldr	r2, [r2, #0]
 80073ce:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	f003 0303 	and.w	r3, r3, #3
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d006      	beq.n	80073e8 <do_memp_malloc_pool+0x38>
 80073da:	4b07      	ldr	r3, [pc, #28]	; (80073f8 <do_memp_malloc_pool+0x48>)
 80073dc:	f44f 728c 	mov.w	r2, #280	; 0x118
 80073e0:	4906      	ldr	r1, [pc, #24]	; (80073fc <do_memp_malloc_pool+0x4c>)
 80073e2:	4807      	ldr	r0, [pc, #28]	; (8007400 <do_memp_malloc_pool+0x50>)
 80073e4:	f00a f834 	bl	8011450 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	e000      	b.n	80073ee <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 80073ec:	2300      	movs	r3, #0
}
 80073ee:	4618      	mov	r0, r3
 80073f0:	3710      	adds	r7, #16
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bd80      	pop	{r7, pc}
 80073f6:	bf00      	nop
 80073f8:	08013810 	.word	0x08013810
 80073fc:	08013840 	.word	0x08013840
 8007400:	08013864 	.word	0x08013864

08007404 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b084      	sub	sp, #16
 8007408:	af00      	add	r7, sp, #0
 800740a:	4603      	mov	r3, r0
 800740c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800740e:	79fb      	ldrb	r3, [r7, #7]
 8007410:	2b08      	cmp	r3, #8
 8007412:	d908      	bls.n	8007426 <memp_malloc+0x22>
 8007414:	4b0a      	ldr	r3, [pc, #40]	; (8007440 <memp_malloc+0x3c>)
 8007416:	f240 1257 	movw	r2, #343	; 0x157
 800741a:	490a      	ldr	r1, [pc, #40]	; (8007444 <memp_malloc+0x40>)
 800741c:	480a      	ldr	r0, [pc, #40]	; (8007448 <memp_malloc+0x44>)
 800741e:	f00a f817 	bl	8011450 <iprintf>
 8007422:	2300      	movs	r3, #0
 8007424:	e008      	b.n	8007438 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8007426:	79fb      	ldrb	r3, [r7, #7]
 8007428:	4a08      	ldr	r2, [pc, #32]	; (800744c <memp_malloc+0x48>)
 800742a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800742e:	4618      	mov	r0, r3
 8007430:	f7ff ffbe 	bl	80073b0 <do_memp_malloc_pool>
 8007434:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8007436:	68fb      	ldr	r3, [r7, #12]
}
 8007438:	4618      	mov	r0, r3
 800743a:	3710      	adds	r7, #16
 800743c:	46bd      	mov	sp, r7
 800743e:	bd80      	pop	{r7, pc}
 8007440:	08013810 	.word	0x08013810
 8007444:	080138a0 	.word	0x080138a0
 8007448:	08013864 	.word	0x08013864
 800744c:	08017d4c 	.word	0x08017d4c

08007450 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b084      	sub	sp, #16
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
 8007458:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	f003 0303 	and.w	r3, r3, #3
 8007460:	2b00      	cmp	r3, #0
 8007462:	d006      	beq.n	8007472 <do_memp_free_pool+0x22>
 8007464:	4b0a      	ldr	r3, [pc, #40]	; (8007490 <do_memp_free_pool+0x40>)
 8007466:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800746a:	490a      	ldr	r1, [pc, #40]	; (8007494 <do_memp_free_pool+0x44>)
 800746c:	480a      	ldr	r0, [pc, #40]	; (8007498 <do_memp_free_pool+0x48>)
 800746e:	f009 ffef 	bl	8011450 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	689b      	ldr	r3, [r3, #8]
 800747a:	681a      	ldr	r2, [r3, #0]
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	689b      	ldr	r3, [r3, #8]
 8007484:	68fa      	ldr	r2, [r7, #12]
 8007486:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8007488:	bf00      	nop
 800748a:	3710      	adds	r7, #16
 800748c:	46bd      	mov	sp, r7
 800748e:	bd80      	pop	{r7, pc}
 8007490:	08013810 	.word	0x08013810
 8007494:	080138c0 	.word	0x080138c0
 8007498:	08013864 	.word	0x08013864

0800749c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b082      	sub	sp, #8
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	4603      	mov	r3, r0
 80074a4:	6039      	str	r1, [r7, #0]
 80074a6:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80074a8:	79fb      	ldrb	r3, [r7, #7]
 80074aa:	2b08      	cmp	r3, #8
 80074ac:	d907      	bls.n	80074be <memp_free+0x22>
 80074ae:	4b0c      	ldr	r3, [pc, #48]	; (80074e0 <memp_free+0x44>)
 80074b0:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 80074b4:	490b      	ldr	r1, [pc, #44]	; (80074e4 <memp_free+0x48>)
 80074b6:	480c      	ldr	r0, [pc, #48]	; (80074e8 <memp_free+0x4c>)
 80074b8:	f009 ffca 	bl	8011450 <iprintf>
 80074bc:	e00c      	b.n	80074d8 <memp_free+0x3c>

  if (mem == NULL) {
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d008      	beq.n	80074d6 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80074c4:	79fb      	ldrb	r3, [r7, #7]
 80074c6:	4a09      	ldr	r2, [pc, #36]	; (80074ec <memp_free+0x50>)
 80074c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80074cc:	6839      	ldr	r1, [r7, #0]
 80074ce:	4618      	mov	r0, r3
 80074d0:	f7ff ffbe 	bl	8007450 <do_memp_free_pool>
 80074d4:	e000      	b.n	80074d8 <memp_free+0x3c>
    return;
 80074d6:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 80074d8:	3708      	adds	r7, #8
 80074da:	46bd      	mov	sp, r7
 80074dc:	bd80      	pop	{r7, pc}
 80074de:	bf00      	nop
 80074e0:	08013810 	.word	0x08013810
 80074e4:	080138e0 	.word	0x080138e0
 80074e8:	08013864 	.word	0x08013864
 80074ec:	08017d4c 	.word	0x08017d4c

080074f0 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 80074f0:	b480      	push	{r7}
 80074f2:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 80074f4:	bf00      	nop
 80074f6:	46bd      	mov	sp, r7
 80074f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fc:	4770      	bx	lr
	...

08007500 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b086      	sub	sp, #24
 8007504:	af00      	add	r7, sp, #0
 8007506:	60f8      	str	r0, [r7, #12]
 8007508:	60b9      	str	r1, [r7, #8]
 800750a:	607a      	str	r2, [r7, #4]
 800750c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d108      	bne.n	8007526 <netif_add+0x26>
 8007514:	4b57      	ldr	r3, [pc, #348]	; (8007674 <netif_add+0x174>)
 8007516:	f240 1227 	movw	r2, #295	; 0x127
 800751a:	4957      	ldr	r1, [pc, #348]	; (8007678 <netif_add+0x178>)
 800751c:	4857      	ldr	r0, [pc, #348]	; (800767c <netif_add+0x17c>)
 800751e:	f009 ff97 	bl	8011450 <iprintf>
 8007522:	2300      	movs	r3, #0
 8007524:	e0a2      	b.n	800766c <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8007526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007528:	2b00      	cmp	r3, #0
 800752a:	d108      	bne.n	800753e <netif_add+0x3e>
 800752c:	4b51      	ldr	r3, [pc, #324]	; (8007674 <netif_add+0x174>)
 800752e:	f44f 7294 	mov.w	r2, #296	; 0x128
 8007532:	4953      	ldr	r1, [pc, #332]	; (8007680 <netif_add+0x180>)
 8007534:	4851      	ldr	r0, [pc, #324]	; (800767c <netif_add+0x17c>)
 8007536:	f009 ff8b 	bl	8011450 <iprintf>
 800753a:	2300      	movs	r3, #0
 800753c:	e096      	b.n	800766c <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800753e:	68bb      	ldr	r3, [r7, #8]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d101      	bne.n	8007548 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8007544:	4b4f      	ldr	r3, [pc, #316]	; (8007684 <netif_add+0x184>)
 8007546:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d101      	bne.n	8007552 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800754e:	4b4d      	ldr	r3, [pc, #308]	; (8007684 <netif_add+0x184>)
 8007550:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d101      	bne.n	800755c <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8007558:	4b4a      	ldr	r3, [pc, #296]	; (8007684 <netif_add+0x184>)
 800755a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	2200      	movs	r2, #0
 8007560:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	2200      	movs	r2, #0
 8007566:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	2200      	movs	r2, #0
 800756c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	4a45      	ldr	r2, [pc, #276]	; (8007688 <netif_add+0x188>)
 8007572:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	2200      	movs	r2, #0
 8007578:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	2200      	movs	r2, #0
 800757e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	2200      	movs	r2, #0
 8007586:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	6a3a      	ldr	r2, [r7, #32]
 800758c:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800758e:	4b3f      	ldr	r3, [pc, #252]	; (800768c <netif_add+0x18c>)
 8007590:	781a      	ldrb	r2, [r3, #0]
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800759c:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	687a      	ldr	r2, [r7, #4]
 80075a2:	68b9      	ldr	r1, [r7, #8]
 80075a4:	68f8      	ldr	r0, [r7, #12]
 80075a6:	f000 f913 	bl	80077d0 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 80075aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ac:	68f8      	ldr	r0, [r7, #12]
 80075ae:	4798      	blx	r3
 80075b0:	4603      	mov	r3, r0
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d001      	beq.n	80075ba <netif_add+0xba>
    return NULL;
 80075b6:	2300      	movs	r3, #0
 80075b8:	e058      	b.n	800766c <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80075c0:	2bff      	cmp	r3, #255	; 0xff
 80075c2:	d103      	bne.n	80075cc <netif_add+0xcc>
        netif->num = 0;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	2200      	movs	r2, #0
 80075c8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 80075cc:	2300      	movs	r3, #0
 80075ce:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80075d0:	4b2f      	ldr	r3, [pc, #188]	; (8007690 <netif_add+0x190>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	617b      	str	r3, [r7, #20]
 80075d6:	e02b      	b.n	8007630 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80075d8:	697a      	ldr	r2, [r7, #20]
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	429a      	cmp	r2, r3
 80075de:	d106      	bne.n	80075ee <netif_add+0xee>
 80075e0:	4b24      	ldr	r3, [pc, #144]	; (8007674 <netif_add+0x174>)
 80075e2:	f240 128b 	movw	r2, #395	; 0x18b
 80075e6:	492b      	ldr	r1, [pc, #172]	; (8007694 <netif_add+0x194>)
 80075e8:	4824      	ldr	r0, [pc, #144]	; (800767c <netif_add+0x17c>)
 80075ea:	f009 ff31 	bl	8011450 <iprintf>
        num_netifs++;
 80075ee:	693b      	ldr	r3, [r7, #16]
 80075f0:	3301      	adds	r3, #1
 80075f2:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80075f4:	693b      	ldr	r3, [r7, #16]
 80075f6:	2bff      	cmp	r3, #255	; 0xff
 80075f8:	dd06      	ble.n	8007608 <netif_add+0x108>
 80075fa:	4b1e      	ldr	r3, [pc, #120]	; (8007674 <netif_add+0x174>)
 80075fc:	f240 128d 	movw	r2, #397	; 0x18d
 8007600:	4925      	ldr	r1, [pc, #148]	; (8007698 <netif_add+0x198>)
 8007602:	481e      	ldr	r0, [pc, #120]	; (800767c <netif_add+0x17c>)
 8007604:	f009 ff24 	bl	8011450 <iprintf>
        if (netif2->num == netif->num) {
 8007608:	697b      	ldr	r3, [r7, #20]
 800760a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007614:	429a      	cmp	r2, r3
 8007616:	d108      	bne.n	800762a <netif_add+0x12a>
          netif->num++;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800761e:	3301      	adds	r3, #1
 8007620:	b2da      	uxtb	r2, r3
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8007628:	e005      	b.n	8007636 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800762a:	697b      	ldr	r3, [r7, #20]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	617b      	str	r3, [r7, #20]
 8007630:	697b      	ldr	r3, [r7, #20]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d1d0      	bne.n	80075d8 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8007636:	697b      	ldr	r3, [r7, #20]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d1be      	bne.n	80075ba <netif_add+0xba>
  }
  if (netif->num == 254) {
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007642:	2bfe      	cmp	r3, #254	; 0xfe
 8007644:	d103      	bne.n	800764e <netif_add+0x14e>
    netif_num = 0;
 8007646:	4b11      	ldr	r3, [pc, #68]	; (800768c <netif_add+0x18c>)
 8007648:	2200      	movs	r2, #0
 800764a:	701a      	strb	r2, [r3, #0]
 800764c:	e006      	b.n	800765c <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007654:	3301      	adds	r3, #1
 8007656:	b2da      	uxtb	r2, r3
 8007658:	4b0c      	ldr	r3, [pc, #48]	; (800768c <netif_add+0x18c>)
 800765a:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800765c:	4b0c      	ldr	r3, [pc, #48]	; (8007690 <netif_add+0x190>)
 800765e:	681a      	ldr	r2, [r3, #0]
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8007664:	4a0a      	ldr	r2, [pc, #40]	; (8007690 <netif_add+0x190>)
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800766a:	68fb      	ldr	r3, [r7, #12]
}
 800766c:	4618      	mov	r0, r3
 800766e:	3718      	adds	r7, #24
 8007670:	46bd      	mov	sp, r7
 8007672:	bd80      	pop	{r7, pc}
 8007674:	080138fc 	.word	0x080138fc
 8007678:	08013990 	.word	0x08013990
 800767c:	0801394c 	.word	0x0801394c
 8007680:	080139ac 	.word	0x080139ac
 8007684:	08017db0 	.word	0x08017db0
 8007688:	080079e3 	.word	0x080079e3
 800768c:	20000570 	.word	0x20000570
 8007690:	2000d3d0 	.word	0x2000d3d0
 8007694:	080139d0 	.word	0x080139d0
 8007698:	080139e4 	.word	0x080139e4

0800769c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b082      	sub	sp, #8
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
 80076a4:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80076a6:	6839      	ldr	r1, [r7, #0]
 80076a8:	6878      	ldr	r0, [r7, #4]
 80076aa:	f002 fd85 	bl	800a1b8 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 80076ae:	6839      	ldr	r1, [r7, #0]
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	f007 fabd 	bl	800ec30 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 80076b6:	bf00      	nop
 80076b8:	3708      	adds	r7, #8
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd80      	pop	{r7, pc}
	...

080076c0 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b086      	sub	sp, #24
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	60f8      	str	r0, [r7, #12]
 80076c8:	60b9      	str	r1, [r7, #8]
 80076ca:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d106      	bne.n	80076e0 <netif_do_set_ipaddr+0x20>
 80076d2:	4b1d      	ldr	r3, [pc, #116]	; (8007748 <netif_do_set_ipaddr+0x88>)
 80076d4:	f240 12cb 	movw	r2, #459	; 0x1cb
 80076d8:	491c      	ldr	r1, [pc, #112]	; (800774c <netif_do_set_ipaddr+0x8c>)
 80076da:	481d      	ldr	r0, [pc, #116]	; (8007750 <netif_do_set_ipaddr+0x90>)
 80076dc:	f009 feb8 	bl	8011450 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d106      	bne.n	80076f4 <netif_do_set_ipaddr+0x34>
 80076e6:	4b18      	ldr	r3, [pc, #96]	; (8007748 <netif_do_set_ipaddr+0x88>)
 80076e8:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 80076ec:	4917      	ldr	r1, [pc, #92]	; (800774c <netif_do_set_ipaddr+0x8c>)
 80076ee:	4818      	ldr	r0, [pc, #96]	; (8007750 <netif_do_set_ipaddr+0x90>)
 80076f0:	f009 feae 	bl	8011450 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	681a      	ldr	r2, [r3, #0]
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	3304      	adds	r3, #4
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	429a      	cmp	r2, r3
 8007700:	d01c      	beq.n	800773c <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	3304      	adds	r3, #4
 800770c:	681a      	ldr	r2, [r3, #0]
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8007712:	f107 0314 	add.w	r3, r7, #20
 8007716:	4619      	mov	r1, r3
 8007718:	6878      	ldr	r0, [r7, #4]
 800771a:	f7ff ffbf 	bl	800769c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800771e:	68bb      	ldr	r3, [r7, #8]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d002      	beq.n	800772a <netif_do_set_ipaddr+0x6a>
 8007724:	68bb      	ldr	r3, [r7, #8]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	e000      	b.n	800772c <netif_do_set_ipaddr+0x6c>
 800772a:	2300      	movs	r3, #0
 800772c:	68fa      	ldr	r2, [r7, #12]
 800772e:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8007730:	2101      	movs	r1, #1
 8007732:	68f8      	ldr	r0, [r7, #12]
 8007734:	f000 f8d2 	bl	80078dc <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8007738:	2301      	movs	r3, #1
 800773a:	e000      	b.n	800773e <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800773c:	2300      	movs	r3, #0
}
 800773e:	4618      	mov	r0, r3
 8007740:	3718      	adds	r7, #24
 8007742:	46bd      	mov	sp, r7
 8007744:	bd80      	pop	{r7, pc}
 8007746:	bf00      	nop
 8007748:	080138fc 	.word	0x080138fc
 800774c:	08013a14 	.word	0x08013a14
 8007750:	0801394c 	.word	0x0801394c

08007754 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8007754:	b480      	push	{r7}
 8007756:	b085      	sub	sp, #20
 8007758:	af00      	add	r7, sp, #0
 800775a:	60f8      	str	r0, [r7, #12]
 800775c:	60b9      	str	r1, [r7, #8]
 800775e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	681a      	ldr	r2, [r3, #0]
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	3308      	adds	r3, #8
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	429a      	cmp	r2, r3
 800776c:	d00a      	beq.n	8007784 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800776e:	68bb      	ldr	r3, [r7, #8]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d002      	beq.n	800777a <netif_do_set_netmask+0x26>
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	e000      	b.n	800777c <netif_do_set_netmask+0x28>
 800777a:	2300      	movs	r3, #0
 800777c:	68fa      	ldr	r2, [r7, #12]
 800777e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8007780:	2301      	movs	r3, #1
 8007782:	e000      	b.n	8007786 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8007784:	2300      	movs	r3, #0
}
 8007786:	4618      	mov	r0, r3
 8007788:	3714      	adds	r7, #20
 800778a:	46bd      	mov	sp, r7
 800778c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007790:	4770      	bx	lr

08007792 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8007792:	b480      	push	{r7}
 8007794:	b085      	sub	sp, #20
 8007796:	af00      	add	r7, sp, #0
 8007798:	60f8      	str	r0, [r7, #12]
 800779a:	60b9      	str	r1, [r7, #8]
 800779c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800779e:	68bb      	ldr	r3, [r7, #8]
 80077a0:	681a      	ldr	r2, [r3, #0]
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	330c      	adds	r3, #12
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	429a      	cmp	r2, r3
 80077aa:	d00a      	beq.n	80077c2 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d002      	beq.n	80077b8 <netif_do_set_gw+0x26>
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	e000      	b.n	80077ba <netif_do_set_gw+0x28>
 80077b8:	2300      	movs	r3, #0
 80077ba:	68fa      	ldr	r2, [r7, #12]
 80077bc:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 80077be:	2301      	movs	r3, #1
 80077c0:	e000      	b.n	80077c4 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 80077c2:	2300      	movs	r3, #0
}
 80077c4:	4618      	mov	r0, r3
 80077c6:	3714      	adds	r7, #20
 80077c8:	46bd      	mov	sp, r7
 80077ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ce:	4770      	bx	lr

080077d0 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b088      	sub	sp, #32
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	60f8      	str	r0, [r7, #12]
 80077d8:	60b9      	str	r1, [r7, #8]
 80077da:	607a      	str	r2, [r7, #4]
 80077dc:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 80077de:	2300      	movs	r3, #0
 80077e0:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 80077e2:	2300      	movs	r3, #0
 80077e4:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80077e6:	68bb      	ldr	r3, [r7, #8]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d101      	bne.n	80077f0 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 80077ec:	4b1c      	ldr	r3, [pc, #112]	; (8007860 <netif_set_addr+0x90>)
 80077ee:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d101      	bne.n	80077fa <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 80077f6:	4b1a      	ldr	r3, [pc, #104]	; (8007860 <netif_set_addr+0x90>)
 80077f8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d101      	bne.n	8007804 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8007800:	4b17      	ldr	r3, [pc, #92]	; (8007860 <netif_set_addr+0x90>)
 8007802:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d003      	beq.n	8007812 <netif_set_addr+0x42>
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d101      	bne.n	8007816 <netif_set_addr+0x46>
 8007812:	2301      	movs	r3, #1
 8007814:	e000      	b.n	8007818 <netif_set_addr+0x48>
 8007816:	2300      	movs	r3, #0
 8007818:	617b      	str	r3, [r7, #20]
  if (remove) {
 800781a:	697b      	ldr	r3, [r7, #20]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d006      	beq.n	800782e <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8007820:	f107 0310 	add.w	r3, r7, #16
 8007824:	461a      	mov	r2, r3
 8007826:	68b9      	ldr	r1, [r7, #8]
 8007828:	68f8      	ldr	r0, [r7, #12]
 800782a:	f7ff ff49 	bl	80076c0 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800782e:	69fa      	ldr	r2, [r7, #28]
 8007830:	6879      	ldr	r1, [r7, #4]
 8007832:	68f8      	ldr	r0, [r7, #12]
 8007834:	f7ff ff8e 	bl	8007754 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8007838:	69ba      	ldr	r2, [r7, #24]
 800783a:	6839      	ldr	r1, [r7, #0]
 800783c:	68f8      	ldr	r0, [r7, #12]
 800783e:	f7ff ffa8 	bl	8007792 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8007842:	697b      	ldr	r3, [r7, #20]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d106      	bne.n	8007856 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8007848:	f107 0310 	add.w	r3, r7, #16
 800784c:	461a      	mov	r2, r3
 800784e:	68b9      	ldr	r1, [r7, #8]
 8007850:	68f8      	ldr	r0, [r7, #12]
 8007852:	f7ff ff35 	bl	80076c0 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8007856:	bf00      	nop
 8007858:	3720      	adds	r7, #32
 800785a:	46bd      	mov	sp, r7
 800785c:	bd80      	pop	{r7, pc}
 800785e:	bf00      	nop
 8007860:	08017db0 	.word	0x08017db0

08007864 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8007864:	b480      	push	{r7}
 8007866:	b083      	sub	sp, #12
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800786c:	4a04      	ldr	r2, [pc, #16]	; (8007880 <netif_set_default+0x1c>)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8007872:	bf00      	nop
 8007874:	370c      	adds	r7, #12
 8007876:	46bd      	mov	sp, r7
 8007878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787c:	4770      	bx	lr
 800787e:	bf00      	nop
 8007880:	2000d3d4 	.word	0x2000d3d4

08007884 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b082      	sub	sp, #8
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d107      	bne.n	80078a2 <netif_set_up+0x1e>
 8007892:	4b0f      	ldr	r3, [pc, #60]	; (80078d0 <netif_set_up+0x4c>)
 8007894:	f44f 7254 	mov.w	r2, #848	; 0x350
 8007898:	490e      	ldr	r1, [pc, #56]	; (80078d4 <netif_set_up+0x50>)
 800789a:	480f      	ldr	r0, [pc, #60]	; (80078d8 <netif_set_up+0x54>)
 800789c:	f009 fdd8 	bl	8011450 <iprintf>
 80078a0:	e013      	b.n	80078ca <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80078a8:	f003 0301 	and.w	r3, r3, #1
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d10c      	bne.n	80078ca <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80078b6:	f043 0301 	orr.w	r3, r3, #1
 80078ba:	b2da      	uxtb	r2, r3
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80078c2:	2103      	movs	r1, #3
 80078c4:	6878      	ldr	r0, [r7, #4]
 80078c6:	f000 f809 	bl	80078dc <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 80078ca:	3708      	adds	r7, #8
 80078cc:	46bd      	mov	sp, r7
 80078ce:	bd80      	pop	{r7, pc}
 80078d0:	080138fc 	.word	0x080138fc
 80078d4:	08013a84 	.word	0x08013a84
 80078d8:	0801394c 	.word	0x0801394c

080078dc <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b082      	sub	sp, #8
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
 80078e4:	460b      	mov	r3, r1
 80078e6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d106      	bne.n	80078fc <netif_issue_reports+0x20>
 80078ee:	4b18      	ldr	r3, [pc, #96]	; (8007950 <netif_issue_reports+0x74>)
 80078f0:	f240 326d 	movw	r2, #877	; 0x36d
 80078f4:	4917      	ldr	r1, [pc, #92]	; (8007954 <netif_issue_reports+0x78>)
 80078f6:	4818      	ldr	r0, [pc, #96]	; (8007958 <netif_issue_reports+0x7c>)
 80078f8:	f009 fdaa 	bl	8011450 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007902:	f003 0304 	and.w	r3, r3, #4
 8007906:	2b00      	cmp	r3, #0
 8007908:	d01e      	beq.n	8007948 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007910:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8007914:	2b00      	cmp	r3, #0
 8007916:	d017      	beq.n	8007948 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8007918:	78fb      	ldrb	r3, [r7, #3]
 800791a:	f003 0301 	and.w	r3, r3, #1
 800791e:	2b00      	cmp	r3, #0
 8007920:	d013      	beq.n	800794a <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	3304      	adds	r3, #4
 8007926:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8007928:	2b00      	cmp	r3, #0
 800792a:	d00e      	beq.n	800794a <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007932:	f003 0308 	and.w	r3, r3, #8
 8007936:	2b00      	cmp	r3, #0
 8007938:	d007      	beq.n	800794a <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	3304      	adds	r3, #4
 800793e:	4619      	mov	r1, r3
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	f008 f8df 	bl	800fb04 <etharp_request>
 8007946:	e000      	b.n	800794a <netif_issue_reports+0x6e>
    return;
 8007948:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800794a:	3708      	adds	r7, #8
 800794c:	46bd      	mov	sp, r7
 800794e:	bd80      	pop	{r7, pc}
 8007950:	080138fc 	.word	0x080138fc
 8007954:	08013aa0 	.word	0x08013aa0
 8007958:	0801394c 	.word	0x0801394c

0800795c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b082      	sub	sp, #8
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d107      	bne.n	800797a <netif_set_down+0x1e>
 800796a:	4b12      	ldr	r3, [pc, #72]	; (80079b4 <netif_set_down+0x58>)
 800796c:	f240 329b 	movw	r2, #923	; 0x39b
 8007970:	4911      	ldr	r1, [pc, #68]	; (80079b8 <netif_set_down+0x5c>)
 8007972:	4812      	ldr	r0, [pc, #72]	; (80079bc <netif_set_down+0x60>)
 8007974:	f009 fd6c 	bl	8011450 <iprintf>
 8007978:	e019      	b.n	80079ae <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007980:	f003 0301 	and.w	r3, r3, #1
 8007984:	2b00      	cmp	r3, #0
 8007986:	d012      	beq.n	80079ae <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800798e:	f023 0301 	bic.w	r3, r3, #1
 8007992:	b2da      	uxtb	r2, r3
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80079a0:	f003 0308 	and.w	r3, r3, #8
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d002      	beq.n	80079ae <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f007 fc69 	bl	800f280 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 80079ae:	3708      	adds	r7, #8
 80079b0:	46bd      	mov	sp, r7
 80079b2:	bd80      	pop	{r7, pc}
 80079b4:	080138fc 	.word	0x080138fc
 80079b8:	08013ac4 	.word	0x08013ac4
 80079bc:	0801394c 	.word	0x0801394c

080079c0 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 80079c0:	b480      	push	{r7}
 80079c2:	b083      	sub	sp, #12
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
 80079c8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d002      	beq.n	80079d6 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	683a      	ldr	r2, [r7, #0]
 80079d4:	61da      	str	r2, [r3, #28]
  }
}
 80079d6:	bf00      	nop
 80079d8:	370c      	adds	r7, #12
 80079da:	46bd      	mov	sp, r7
 80079dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e0:	4770      	bx	lr

080079e2 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 80079e2:	b480      	push	{r7}
 80079e4:	b085      	sub	sp, #20
 80079e6:	af00      	add	r7, sp, #0
 80079e8:	60f8      	str	r0, [r7, #12]
 80079ea:	60b9      	str	r1, [r7, #8]
 80079ec:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 80079ee:	f06f 030b 	mvn.w	r3, #11
}
 80079f2:	4618      	mov	r0, r3
 80079f4:	3714      	adds	r7, #20
 80079f6:	46bd      	mov	sp, r7
 80079f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fc:	4770      	bx	lr
	...

08007a00 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8007a00:	b480      	push	{r7}
 8007a02:	b085      	sub	sp, #20
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	4603      	mov	r3, r0
 8007a08:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8007a0a:	79fb      	ldrb	r3, [r7, #7]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d013      	beq.n	8007a38 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8007a10:	4b0d      	ldr	r3, [pc, #52]	; (8007a48 <netif_get_by_index+0x48>)
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	60fb      	str	r3, [r7, #12]
 8007a16:	e00c      	b.n	8007a32 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007a1e:	3301      	adds	r3, #1
 8007a20:	b2db      	uxtb	r3, r3
 8007a22:	79fa      	ldrb	r2, [r7, #7]
 8007a24:	429a      	cmp	r2, r3
 8007a26:	d101      	bne.n	8007a2c <netif_get_by_index+0x2c>
        return netif; /* found! */
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	e006      	b.n	8007a3a <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	60fb      	str	r3, [r7, #12]
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d1ef      	bne.n	8007a18 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8007a38:	2300      	movs	r3, #0
}
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	3714      	adds	r7, #20
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a44:	4770      	bx	lr
 8007a46:	bf00      	nop
 8007a48:	2000d3d0 	.word	0x2000d3d0

08007a4c <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b082      	sub	sp, #8
 8007a50:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8007a52:	4b0c      	ldr	r3, [pc, #48]	; (8007a84 <pbuf_free_ooseq+0x38>)
 8007a54:	2200      	movs	r2, #0
 8007a56:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8007a58:	4b0b      	ldr	r3, [pc, #44]	; (8007a88 <pbuf_free_ooseq+0x3c>)
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	607b      	str	r3, [r7, #4]
 8007a5e:	e00a      	b.n	8007a76 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d003      	beq.n	8007a70 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8007a68:	6878      	ldr	r0, [r7, #4]
 8007a6a:	f002 fbe3 	bl	800a234 <tcp_free_ooseq>
      return;
 8007a6e:	e005      	b.n	8007a7c <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	68db      	ldr	r3, [r3, #12]
 8007a74:	607b      	str	r3, [r7, #4]
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d1f1      	bne.n	8007a60 <pbuf_free_ooseq+0x14>
    }
  }
}
 8007a7c:	3708      	adds	r7, #8
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bd80      	pop	{r7, pc}
 8007a82:	bf00      	nop
 8007a84:	2000d3d8 	.word	0x2000d3d8
 8007a88:	2000d3e0 	.word	0x2000d3e0

08007a8c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8007a90:	4b03      	ldr	r3, [pc, #12]	; (8007aa0 <pbuf_pool_is_empty+0x14>)
 8007a92:	2201      	movs	r2, #1
 8007a94:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8007a96:	bf00      	nop
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9e:	4770      	bx	lr
 8007aa0:	2000d3d8 	.word	0x2000d3d8

08007aa4 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8007aa4:	b480      	push	{r7}
 8007aa6:	b085      	sub	sp, #20
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	60f8      	str	r0, [r7, #12]
 8007aac:	60b9      	str	r1, [r7, #8]
 8007aae:	4611      	mov	r1, r2
 8007ab0:	461a      	mov	r2, r3
 8007ab2:	460b      	mov	r3, r1
 8007ab4:	80fb      	strh	r3, [r7, #6]
 8007ab6:	4613      	mov	r3, r2
 8007ab8:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	2200      	movs	r2, #0
 8007abe:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	68ba      	ldr	r2, [r7, #8]
 8007ac4:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	88fa      	ldrh	r2, [r7, #6]
 8007aca:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	88ba      	ldrh	r2, [r7, #4]
 8007ad0:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8007ad2:	8b3b      	ldrh	r3, [r7, #24]
 8007ad4:	b2da      	uxtb	r2, r3
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	7f3a      	ldrb	r2, [r7, #28]
 8007ade:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	2201      	movs	r2, #1
 8007ae4:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	2200      	movs	r2, #0
 8007aea:	73da      	strb	r2, [r3, #15]
}
 8007aec:	bf00      	nop
 8007aee:	3714      	adds	r7, #20
 8007af0:	46bd      	mov	sp, r7
 8007af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af6:	4770      	bx	lr

08007af8 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b08c      	sub	sp, #48	; 0x30
 8007afc:	af02      	add	r7, sp, #8
 8007afe:	4603      	mov	r3, r0
 8007b00:	71fb      	strb	r3, [r7, #7]
 8007b02:	460b      	mov	r3, r1
 8007b04:	80bb      	strh	r3, [r7, #4]
 8007b06:	4613      	mov	r3, r2
 8007b08:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8007b0a:	79fb      	ldrb	r3, [r7, #7]
 8007b0c:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8007b0e:	887b      	ldrh	r3, [r7, #2]
 8007b10:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8007b14:	d07f      	beq.n	8007c16 <pbuf_alloc+0x11e>
 8007b16:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8007b1a:	f300 80c8 	bgt.w	8007cae <pbuf_alloc+0x1b6>
 8007b1e:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8007b22:	d010      	beq.n	8007b46 <pbuf_alloc+0x4e>
 8007b24:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8007b28:	f300 80c1 	bgt.w	8007cae <pbuf_alloc+0x1b6>
 8007b2c:	2b01      	cmp	r3, #1
 8007b2e:	d002      	beq.n	8007b36 <pbuf_alloc+0x3e>
 8007b30:	2b41      	cmp	r3, #65	; 0x41
 8007b32:	f040 80bc 	bne.w	8007cae <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8007b36:	887a      	ldrh	r2, [r7, #2]
 8007b38:	88bb      	ldrh	r3, [r7, #4]
 8007b3a:	4619      	mov	r1, r3
 8007b3c:	2000      	movs	r0, #0
 8007b3e:	f000 f8d1 	bl	8007ce4 <pbuf_alloc_reference>
 8007b42:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8007b44:	e0bd      	b.n	8007cc2 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8007b46:	2300      	movs	r3, #0
 8007b48:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8007b4e:	88bb      	ldrh	r3, [r7, #4]
 8007b50:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8007b52:	2008      	movs	r0, #8
 8007b54:	f7ff fc56 	bl	8007404 <memp_malloc>
 8007b58:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8007b5a:	693b      	ldr	r3, [r7, #16]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d109      	bne.n	8007b74 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8007b60:	f7ff ff94 	bl	8007a8c <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8007b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d002      	beq.n	8007b70 <pbuf_alloc+0x78>
            pbuf_free(p);
 8007b6a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007b6c:	f000 faa8 	bl	80080c0 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8007b70:	2300      	movs	r3, #0
 8007b72:	e0a7      	b.n	8007cc4 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8007b74:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007b76:	3303      	adds	r3, #3
 8007b78:	b29b      	uxth	r3, r3
 8007b7a:	f023 0303 	bic.w	r3, r3, #3
 8007b7e:	b29b      	uxth	r3, r3
 8007b80:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8007b84:	b29b      	uxth	r3, r3
 8007b86:	8b7a      	ldrh	r2, [r7, #26]
 8007b88:	4293      	cmp	r3, r2
 8007b8a:	bf28      	it	cs
 8007b8c:	4613      	movcs	r3, r2
 8007b8e:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8007b90:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007b92:	3310      	adds	r3, #16
 8007b94:	693a      	ldr	r2, [r7, #16]
 8007b96:	4413      	add	r3, r2
 8007b98:	3303      	adds	r3, #3
 8007b9a:	f023 0303 	bic.w	r3, r3, #3
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	89f9      	ldrh	r1, [r7, #14]
 8007ba2:	8b7a      	ldrh	r2, [r7, #26]
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	9301      	str	r3, [sp, #4]
 8007ba8:	887b      	ldrh	r3, [r7, #2]
 8007baa:	9300      	str	r3, [sp, #0]
 8007bac:	460b      	mov	r3, r1
 8007bae:	4601      	mov	r1, r0
 8007bb0:	6938      	ldr	r0, [r7, #16]
 8007bb2:	f7ff ff77 	bl	8007aa4 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8007bb6:	693b      	ldr	r3, [r7, #16]
 8007bb8:	685b      	ldr	r3, [r3, #4]
 8007bba:	f003 0303 	and.w	r3, r3, #3
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d006      	beq.n	8007bd0 <pbuf_alloc+0xd8>
 8007bc2:	4b42      	ldr	r3, [pc, #264]	; (8007ccc <pbuf_alloc+0x1d4>)
 8007bc4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007bc8:	4941      	ldr	r1, [pc, #260]	; (8007cd0 <pbuf_alloc+0x1d8>)
 8007bca:	4842      	ldr	r0, [pc, #264]	; (8007cd4 <pbuf_alloc+0x1dc>)
 8007bcc:	f009 fc40 	bl	8011450 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8007bd0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007bd2:	3303      	adds	r3, #3
 8007bd4:	f023 0303 	bic.w	r3, r3, #3
 8007bd8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007bdc:	d106      	bne.n	8007bec <pbuf_alloc+0xf4>
 8007bde:	4b3b      	ldr	r3, [pc, #236]	; (8007ccc <pbuf_alloc+0x1d4>)
 8007be0:	f44f 7281 	mov.w	r2, #258	; 0x102
 8007be4:	493c      	ldr	r1, [pc, #240]	; (8007cd8 <pbuf_alloc+0x1e0>)
 8007be6:	483b      	ldr	r0, [pc, #236]	; (8007cd4 <pbuf_alloc+0x1dc>)
 8007be8:	f009 fc32 	bl	8011450 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8007bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d102      	bne.n	8007bf8 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8007bf2:	693b      	ldr	r3, [r7, #16]
 8007bf4:	627b      	str	r3, [r7, #36]	; 0x24
 8007bf6:	e002      	b.n	8007bfe <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8007bf8:	69fb      	ldr	r3, [r7, #28]
 8007bfa:	693a      	ldr	r2, [r7, #16]
 8007bfc:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8007bfe:	693b      	ldr	r3, [r7, #16]
 8007c00:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8007c02:	8b7a      	ldrh	r2, [r7, #26]
 8007c04:	89fb      	ldrh	r3, [r7, #14]
 8007c06:	1ad3      	subs	r3, r2, r3
 8007c08:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8007c0e:	8b7b      	ldrh	r3, [r7, #26]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d19e      	bne.n	8007b52 <pbuf_alloc+0x5a>
      break;
 8007c14:	e055      	b.n	8007cc2 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8007c16:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007c18:	3303      	adds	r3, #3
 8007c1a:	b29b      	uxth	r3, r3
 8007c1c:	f023 0303 	bic.w	r3, r3, #3
 8007c20:	b29a      	uxth	r2, r3
 8007c22:	88bb      	ldrh	r3, [r7, #4]
 8007c24:	3303      	adds	r3, #3
 8007c26:	b29b      	uxth	r3, r3
 8007c28:	f023 0303 	bic.w	r3, r3, #3
 8007c2c:	b29b      	uxth	r3, r3
 8007c2e:	4413      	add	r3, r2
 8007c30:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8007c32:	8b3b      	ldrh	r3, [r7, #24]
 8007c34:	3310      	adds	r3, #16
 8007c36:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8007c38:	8b3a      	ldrh	r2, [r7, #24]
 8007c3a:	88bb      	ldrh	r3, [r7, #4]
 8007c3c:	3303      	adds	r3, #3
 8007c3e:	f023 0303 	bic.w	r3, r3, #3
 8007c42:	429a      	cmp	r2, r3
 8007c44:	d306      	bcc.n	8007c54 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8007c46:	8afa      	ldrh	r2, [r7, #22]
 8007c48:	88bb      	ldrh	r3, [r7, #4]
 8007c4a:	3303      	adds	r3, #3
 8007c4c:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8007c50:	429a      	cmp	r2, r3
 8007c52:	d201      	bcs.n	8007c58 <pbuf_alloc+0x160>
        return NULL;
 8007c54:	2300      	movs	r3, #0
 8007c56:	e035      	b.n	8007cc4 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8007c58:	8afb      	ldrh	r3, [r7, #22]
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	f7ff fa64 	bl	8007128 <mem_malloc>
 8007c60:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8007c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d101      	bne.n	8007c6c <pbuf_alloc+0x174>
        return NULL;
 8007c68:	2300      	movs	r3, #0
 8007c6a:	e02b      	b.n	8007cc4 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8007c6c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007c6e:	3310      	adds	r3, #16
 8007c70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c72:	4413      	add	r3, r2
 8007c74:	3303      	adds	r3, #3
 8007c76:	f023 0303 	bic.w	r3, r3, #3
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	88b9      	ldrh	r1, [r7, #4]
 8007c7e:	88ba      	ldrh	r2, [r7, #4]
 8007c80:	2300      	movs	r3, #0
 8007c82:	9301      	str	r3, [sp, #4]
 8007c84:	887b      	ldrh	r3, [r7, #2]
 8007c86:	9300      	str	r3, [sp, #0]
 8007c88:	460b      	mov	r3, r1
 8007c8a:	4601      	mov	r1, r0
 8007c8c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007c8e:	f7ff ff09 	bl	8007aa4 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8007c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c94:	685b      	ldr	r3, [r3, #4]
 8007c96:	f003 0303 	and.w	r3, r3, #3
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d010      	beq.n	8007cc0 <pbuf_alloc+0x1c8>
 8007c9e:	4b0b      	ldr	r3, [pc, #44]	; (8007ccc <pbuf_alloc+0x1d4>)
 8007ca0:	f44f 7291 	mov.w	r2, #290	; 0x122
 8007ca4:	490d      	ldr	r1, [pc, #52]	; (8007cdc <pbuf_alloc+0x1e4>)
 8007ca6:	480b      	ldr	r0, [pc, #44]	; (8007cd4 <pbuf_alloc+0x1dc>)
 8007ca8:	f009 fbd2 	bl	8011450 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8007cac:	e008      	b.n	8007cc0 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8007cae:	4b07      	ldr	r3, [pc, #28]	; (8007ccc <pbuf_alloc+0x1d4>)
 8007cb0:	f240 1227 	movw	r2, #295	; 0x127
 8007cb4:	490a      	ldr	r1, [pc, #40]	; (8007ce0 <pbuf_alloc+0x1e8>)
 8007cb6:	4807      	ldr	r0, [pc, #28]	; (8007cd4 <pbuf_alloc+0x1dc>)
 8007cb8:	f009 fbca 	bl	8011450 <iprintf>
      return NULL;
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	e001      	b.n	8007cc4 <pbuf_alloc+0x1cc>
      break;
 8007cc0:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8007cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	3728      	adds	r7, #40	; 0x28
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bd80      	pop	{r7, pc}
 8007ccc:	08013b2c 	.word	0x08013b2c
 8007cd0:	08013b5c 	.word	0x08013b5c
 8007cd4:	08013b8c 	.word	0x08013b8c
 8007cd8:	08013bb4 	.word	0x08013bb4
 8007cdc:	08013be8 	.word	0x08013be8
 8007ce0:	08013c14 	.word	0x08013c14

08007ce4 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b086      	sub	sp, #24
 8007ce8:	af02      	add	r7, sp, #8
 8007cea:	6078      	str	r0, [r7, #4]
 8007cec:	460b      	mov	r3, r1
 8007cee:	807b      	strh	r3, [r7, #2]
 8007cf0:	4613      	mov	r3, r2
 8007cf2:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8007cf4:	883b      	ldrh	r3, [r7, #0]
 8007cf6:	2b41      	cmp	r3, #65	; 0x41
 8007cf8:	d009      	beq.n	8007d0e <pbuf_alloc_reference+0x2a>
 8007cfa:	883b      	ldrh	r3, [r7, #0]
 8007cfc:	2b01      	cmp	r3, #1
 8007cfe:	d006      	beq.n	8007d0e <pbuf_alloc_reference+0x2a>
 8007d00:	4b0f      	ldr	r3, [pc, #60]	; (8007d40 <pbuf_alloc_reference+0x5c>)
 8007d02:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8007d06:	490f      	ldr	r1, [pc, #60]	; (8007d44 <pbuf_alloc_reference+0x60>)
 8007d08:	480f      	ldr	r0, [pc, #60]	; (8007d48 <pbuf_alloc_reference+0x64>)
 8007d0a:	f009 fba1 	bl	8011450 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8007d0e:	2007      	movs	r0, #7
 8007d10:	f7ff fb78 	bl	8007404 <memp_malloc>
 8007d14:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d101      	bne.n	8007d20 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	e00b      	b.n	8007d38 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8007d20:	8879      	ldrh	r1, [r7, #2]
 8007d22:	887a      	ldrh	r2, [r7, #2]
 8007d24:	2300      	movs	r3, #0
 8007d26:	9301      	str	r3, [sp, #4]
 8007d28:	883b      	ldrh	r3, [r7, #0]
 8007d2a:	9300      	str	r3, [sp, #0]
 8007d2c:	460b      	mov	r3, r1
 8007d2e:	6879      	ldr	r1, [r7, #4]
 8007d30:	68f8      	ldr	r0, [r7, #12]
 8007d32:	f7ff feb7 	bl	8007aa4 <pbuf_init_alloced_pbuf>
  return p;
 8007d36:	68fb      	ldr	r3, [r7, #12]
}
 8007d38:	4618      	mov	r0, r3
 8007d3a:	3710      	adds	r7, #16
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	bd80      	pop	{r7, pc}
 8007d40:	08013b2c 	.word	0x08013b2c
 8007d44:	08013c30 	.word	0x08013c30
 8007d48:	08013b8c 	.word	0x08013b8c

08007d4c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b088      	sub	sp, #32
 8007d50:	af02      	add	r7, sp, #8
 8007d52:	607b      	str	r3, [r7, #4]
 8007d54:	4603      	mov	r3, r0
 8007d56:	73fb      	strb	r3, [r7, #15]
 8007d58:	460b      	mov	r3, r1
 8007d5a:	81bb      	strh	r3, [r7, #12]
 8007d5c:	4613      	mov	r3, r2
 8007d5e:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8007d60:	7bfb      	ldrb	r3, [r7, #15]
 8007d62:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8007d64:	8a7b      	ldrh	r3, [r7, #18]
 8007d66:	3303      	adds	r3, #3
 8007d68:	f023 0203 	bic.w	r2, r3, #3
 8007d6c:	89bb      	ldrh	r3, [r7, #12]
 8007d6e:	441a      	add	r2, r3
 8007d70:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007d72:	429a      	cmp	r2, r3
 8007d74:	d901      	bls.n	8007d7a <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8007d76:	2300      	movs	r3, #0
 8007d78:	e018      	b.n	8007dac <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8007d7a:	6a3b      	ldr	r3, [r7, #32]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d007      	beq.n	8007d90 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8007d80:	8a7b      	ldrh	r3, [r7, #18]
 8007d82:	3303      	adds	r3, #3
 8007d84:	f023 0303 	bic.w	r3, r3, #3
 8007d88:	6a3a      	ldr	r2, [r7, #32]
 8007d8a:	4413      	add	r3, r2
 8007d8c:	617b      	str	r3, [r7, #20]
 8007d8e:	e001      	b.n	8007d94 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8007d90:	2300      	movs	r3, #0
 8007d92:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8007d94:	6878      	ldr	r0, [r7, #4]
 8007d96:	89b9      	ldrh	r1, [r7, #12]
 8007d98:	89ba      	ldrh	r2, [r7, #12]
 8007d9a:	2302      	movs	r3, #2
 8007d9c:	9301      	str	r3, [sp, #4]
 8007d9e:	897b      	ldrh	r3, [r7, #10]
 8007da0:	9300      	str	r3, [sp, #0]
 8007da2:	460b      	mov	r3, r1
 8007da4:	6979      	ldr	r1, [r7, #20]
 8007da6:	f7ff fe7d 	bl	8007aa4 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8007daa:	687b      	ldr	r3, [r7, #4]
}
 8007dac:	4618      	mov	r0, r3
 8007dae:	3718      	adds	r7, #24
 8007db0:	46bd      	mov	sp, r7
 8007db2:	bd80      	pop	{r7, pc}

08007db4 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b084      	sub	sp, #16
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
 8007dbc:	460b      	mov	r3, r1
 8007dbe:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d106      	bne.n	8007dd4 <pbuf_realloc+0x20>
 8007dc6:	4b3a      	ldr	r3, [pc, #232]	; (8007eb0 <pbuf_realloc+0xfc>)
 8007dc8:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8007dcc:	4939      	ldr	r1, [pc, #228]	; (8007eb4 <pbuf_realloc+0x100>)
 8007dce:	483a      	ldr	r0, [pc, #232]	; (8007eb8 <pbuf_realloc+0x104>)
 8007dd0:	f009 fb3e 	bl	8011450 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	891b      	ldrh	r3, [r3, #8]
 8007dd8:	887a      	ldrh	r2, [r7, #2]
 8007dda:	429a      	cmp	r2, r3
 8007ddc:	d263      	bcs.n	8007ea6 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	891a      	ldrh	r2, [r3, #8]
 8007de2:	887b      	ldrh	r3, [r7, #2]
 8007de4:	1ad3      	subs	r3, r2, r3
 8007de6:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8007de8:	887b      	ldrh	r3, [r7, #2]
 8007dea:	817b      	strh	r3, [r7, #10]
  q = p;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8007df0:	e018      	b.n	8007e24 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	895b      	ldrh	r3, [r3, #10]
 8007df6:	897a      	ldrh	r2, [r7, #10]
 8007df8:	1ad3      	subs	r3, r2, r3
 8007dfa:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	891a      	ldrh	r2, [r3, #8]
 8007e00:	893b      	ldrh	r3, [r7, #8]
 8007e02:	1ad3      	subs	r3, r2, r3
 8007e04:	b29a      	uxth	r2, r3
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d106      	bne.n	8007e24 <pbuf_realloc+0x70>
 8007e16:	4b26      	ldr	r3, [pc, #152]	; (8007eb0 <pbuf_realloc+0xfc>)
 8007e18:	f240 12af 	movw	r2, #431	; 0x1af
 8007e1c:	4927      	ldr	r1, [pc, #156]	; (8007ebc <pbuf_realloc+0x108>)
 8007e1e:	4826      	ldr	r0, [pc, #152]	; (8007eb8 <pbuf_realloc+0x104>)
 8007e20:	f009 fb16 	bl	8011450 <iprintf>
  while (rem_len > q->len) {
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	895b      	ldrh	r3, [r3, #10]
 8007e28:	897a      	ldrh	r2, [r7, #10]
 8007e2a:	429a      	cmp	r2, r3
 8007e2c:	d8e1      	bhi.n	8007df2 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	7b1b      	ldrb	r3, [r3, #12]
 8007e32:	f003 030f 	and.w	r3, r3, #15
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d121      	bne.n	8007e7e <pbuf_realloc+0xca>
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	895b      	ldrh	r3, [r3, #10]
 8007e3e:	897a      	ldrh	r2, [r7, #10]
 8007e40:	429a      	cmp	r2, r3
 8007e42:	d01c      	beq.n	8007e7e <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	7b5b      	ldrb	r3, [r3, #13]
 8007e48:	f003 0302 	and.w	r3, r3, #2
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d116      	bne.n	8007e7e <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	685a      	ldr	r2, [r3, #4]
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	1ad3      	subs	r3, r2, r3
 8007e58:	b29a      	uxth	r2, r3
 8007e5a:	897b      	ldrh	r3, [r7, #10]
 8007e5c:	4413      	add	r3, r2
 8007e5e:	b29b      	uxth	r3, r3
 8007e60:	4619      	mov	r1, r3
 8007e62:	68f8      	ldr	r0, [r7, #12]
 8007e64:	f7ff f864 	bl	8006f30 <mem_trim>
 8007e68:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d106      	bne.n	8007e7e <pbuf_realloc+0xca>
 8007e70:	4b0f      	ldr	r3, [pc, #60]	; (8007eb0 <pbuf_realloc+0xfc>)
 8007e72:	f240 12bd 	movw	r2, #445	; 0x1bd
 8007e76:	4912      	ldr	r1, [pc, #72]	; (8007ec0 <pbuf_realloc+0x10c>)
 8007e78:	480f      	ldr	r0, [pc, #60]	; (8007eb8 <pbuf_realloc+0x104>)
 8007e7a:	f009 fae9 	bl	8011450 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	897a      	ldrh	r2, [r7, #10]
 8007e82:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	895a      	ldrh	r2, [r3, #10]
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d004      	beq.n	8007e9e <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	4618      	mov	r0, r3
 8007e9a:	f000 f911 	bl	80080c0 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	601a      	str	r2, [r3, #0]
 8007ea4:	e000      	b.n	8007ea8 <pbuf_realloc+0xf4>
    return;
 8007ea6:	bf00      	nop

}
 8007ea8:	3710      	adds	r7, #16
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	bd80      	pop	{r7, pc}
 8007eae:	bf00      	nop
 8007eb0:	08013b2c 	.word	0x08013b2c
 8007eb4:	08013c44 	.word	0x08013c44
 8007eb8:	08013b8c 	.word	0x08013b8c
 8007ebc:	08013c5c 	.word	0x08013c5c
 8007ec0:	08013c74 	.word	0x08013c74

08007ec4 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b086      	sub	sp, #24
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	60f8      	str	r0, [r7, #12]
 8007ecc:	60b9      	str	r1, [r7, #8]
 8007ece:	4613      	mov	r3, r2
 8007ed0:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d106      	bne.n	8007ee6 <pbuf_add_header_impl+0x22>
 8007ed8:	4b2b      	ldr	r3, [pc, #172]	; (8007f88 <pbuf_add_header_impl+0xc4>)
 8007eda:	f240 12df 	movw	r2, #479	; 0x1df
 8007ede:	492b      	ldr	r1, [pc, #172]	; (8007f8c <pbuf_add_header_impl+0xc8>)
 8007ee0:	482b      	ldr	r0, [pc, #172]	; (8007f90 <pbuf_add_header_impl+0xcc>)
 8007ee2:	f009 fab5 	bl	8011450 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d003      	beq.n	8007ef4 <pbuf_add_header_impl+0x30>
 8007eec:	68bb      	ldr	r3, [r7, #8]
 8007eee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ef2:	d301      	bcc.n	8007ef8 <pbuf_add_header_impl+0x34>
    return 1;
 8007ef4:	2301      	movs	r3, #1
 8007ef6:	e043      	b.n	8007f80 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d101      	bne.n	8007f02 <pbuf_add_header_impl+0x3e>
    return 0;
 8007efe:	2300      	movs	r3, #0
 8007f00:	e03e      	b.n	8007f80 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8007f02:	68bb      	ldr	r3, [r7, #8]
 8007f04:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	891a      	ldrh	r2, [r3, #8]
 8007f0a:	8a7b      	ldrh	r3, [r7, #18]
 8007f0c:	4413      	add	r3, r2
 8007f0e:	b29b      	uxth	r3, r3
 8007f10:	8a7a      	ldrh	r2, [r7, #18]
 8007f12:	429a      	cmp	r2, r3
 8007f14:	d901      	bls.n	8007f1a <pbuf_add_header_impl+0x56>
    return 1;
 8007f16:	2301      	movs	r3, #1
 8007f18:	e032      	b.n	8007f80 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	7b1b      	ldrb	r3, [r3, #12]
 8007f1e:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8007f20:	8a3b      	ldrh	r3, [r7, #16]
 8007f22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d00c      	beq.n	8007f44 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	685a      	ldr	r2, [r3, #4]
 8007f2e:	68bb      	ldr	r3, [r7, #8]
 8007f30:	425b      	negs	r3, r3
 8007f32:	4413      	add	r3, r2
 8007f34:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	3310      	adds	r3, #16
 8007f3a:	697a      	ldr	r2, [r7, #20]
 8007f3c:	429a      	cmp	r2, r3
 8007f3e:	d20d      	bcs.n	8007f5c <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8007f40:	2301      	movs	r3, #1
 8007f42:	e01d      	b.n	8007f80 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8007f44:	79fb      	ldrb	r3, [r7, #7]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d006      	beq.n	8007f58 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	685a      	ldr	r2, [r3, #4]
 8007f4e:	68bb      	ldr	r3, [r7, #8]
 8007f50:	425b      	negs	r3, r3
 8007f52:	4413      	add	r3, r2
 8007f54:	617b      	str	r3, [r7, #20]
 8007f56:	e001      	b.n	8007f5c <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8007f58:	2301      	movs	r3, #1
 8007f5a:	e011      	b.n	8007f80 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	697a      	ldr	r2, [r7, #20]
 8007f60:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	895a      	ldrh	r2, [r3, #10]
 8007f66:	8a7b      	ldrh	r3, [r7, #18]
 8007f68:	4413      	add	r3, r2
 8007f6a:	b29a      	uxth	r2, r3
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	891a      	ldrh	r2, [r3, #8]
 8007f74:	8a7b      	ldrh	r3, [r7, #18]
 8007f76:	4413      	add	r3, r2
 8007f78:	b29a      	uxth	r2, r3
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	811a      	strh	r2, [r3, #8]


  return 0;
 8007f7e:	2300      	movs	r3, #0
}
 8007f80:	4618      	mov	r0, r3
 8007f82:	3718      	adds	r7, #24
 8007f84:	46bd      	mov	sp, r7
 8007f86:	bd80      	pop	{r7, pc}
 8007f88:	08013b2c 	.word	0x08013b2c
 8007f8c:	08013c90 	.word	0x08013c90
 8007f90:	08013b8c 	.word	0x08013b8c

08007f94 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b082      	sub	sp, #8
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
 8007f9c:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	6839      	ldr	r1, [r7, #0]
 8007fa2:	6878      	ldr	r0, [r7, #4]
 8007fa4:	f7ff ff8e 	bl	8007ec4 <pbuf_add_header_impl>
 8007fa8:	4603      	mov	r3, r0
}
 8007faa:	4618      	mov	r0, r3
 8007fac:	3708      	adds	r7, #8
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	bd80      	pop	{r7, pc}
	...

08007fb4 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b084      	sub	sp, #16
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
 8007fbc:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d106      	bne.n	8007fd2 <pbuf_remove_header+0x1e>
 8007fc4:	4b20      	ldr	r3, [pc, #128]	; (8008048 <pbuf_remove_header+0x94>)
 8007fc6:	f240 224b 	movw	r2, #587	; 0x24b
 8007fca:	4920      	ldr	r1, [pc, #128]	; (800804c <pbuf_remove_header+0x98>)
 8007fcc:	4820      	ldr	r0, [pc, #128]	; (8008050 <pbuf_remove_header+0x9c>)
 8007fce:	f009 fa3f 	bl	8011450 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d003      	beq.n	8007fe0 <pbuf_remove_header+0x2c>
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007fde:	d301      	bcc.n	8007fe4 <pbuf_remove_header+0x30>
    return 1;
 8007fe0:	2301      	movs	r3, #1
 8007fe2:	e02c      	b.n	800803e <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d101      	bne.n	8007fee <pbuf_remove_header+0x3a>
    return 0;
 8007fea:	2300      	movs	r3, #0
 8007fec:	e027      	b.n	800803e <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	895b      	ldrh	r3, [r3, #10]
 8007ff6:	89fa      	ldrh	r2, [r7, #14]
 8007ff8:	429a      	cmp	r2, r3
 8007ffa:	d908      	bls.n	800800e <pbuf_remove_header+0x5a>
 8007ffc:	4b12      	ldr	r3, [pc, #72]	; (8008048 <pbuf_remove_header+0x94>)
 8007ffe:	f240 2255 	movw	r2, #597	; 0x255
 8008002:	4914      	ldr	r1, [pc, #80]	; (8008054 <pbuf_remove_header+0xa0>)
 8008004:	4812      	ldr	r0, [pc, #72]	; (8008050 <pbuf_remove_header+0x9c>)
 8008006:	f009 fa23 	bl	8011450 <iprintf>
 800800a:	2301      	movs	r3, #1
 800800c:	e017      	b.n	800803e <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	685b      	ldr	r3, [r3, #4]
 8008012:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	685a      	ldr	r2, [r3, #4]
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	441a      	add	r2, r3
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	895a      	ldrh	r2, [r3, #10]
 8008024:	89fb      	ldrh	r3, [r7, #14]
 8008026:	1ad3      	subs	r3, r2, r3
 8008028:	b29a      	uxth	r2, r3
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	891a      	ldrh	r2, [r3, #8]
 8008032:	89fb      	ldrh	r3, [r7, #14]
 8008034:	1ad3      	subs	r3, r2, r3
 8008036:	b29a      	uxth	r2, r3
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800803c:	2300      	movs	r3, #0
}
 800803e:	4618      	mov	r0, r3
 8008040:	3710      	adds	r7, #16
 8008042:	46bd      	mov	sp, r7
 8008044:	bd80      	pop	{r7, pc}
 8008046:	bf00      	nop
 8008048:	08013b2c 	.word	0x08013b2c
 800804c:	08013c90 	.word	0x08013c90
 8008050:	08013b8c 	.word	0x08013b8c
 8008054:	08013c9c 	.word	0x08013c9c

08008058 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b082      	sub	sp, #8
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
 8008060:	460b      	mov	r3, r1
 8008062:	807b      	strh	r3, [r7, #2]
 8008064:	4613      	mov	r3, r2
 8008066:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8008068:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800806c:	2b00      	cmp	r3, #0
 800806e:	da08      	bge.n	8008082 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8008070:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008074:	425b      	negs	r3, r3
 8008076:	4619      	mov	r1, r3
 8008078:	6878      	ldr	r0, [r7, #4]
 800807a:	f7ff ff9b 	bl	8007fb4 <pbuf_remove_header>
 800807e:	4603      	mov	r3, r0
 8008080:	e007      	b.n	8008092 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8008082:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008086:	787a      	ldrb	r2, [r7, #1]
 8008088:	4619      	mov	r1, r3
 800808a:	6878      	ldr	r0, [r7, #4]
 800808c:	f7ff ff1a 	bl	8007ec4 <pbuf_add_header_impl>
 8008090:	4603      	mov	r3, r0
  }
}
 8008092:	4618      	mov	r0, r3
 8008094:	3708      	adds	r7, #8
 8008096:	46bd      	mov	sp, r7
 8008098:	bd80      	pop	{r7, pc}

0800809a <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800809a:	b580      	push	{r7, lr}
 800809c:	b082      	sub	sp, #8
 800809e:	af00      	add	r7, sp, #0
 80080a0:	6078      	str	r0, [r7, #4]
 80080a2:	460b      	mov	r3, r1
 80080a4:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 80080a6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80080aa:	2201      	movs	r2, #1
 80080ac:	4619      	mov	r1, r3
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	f7ff ffd2 	bl	8008058 <pbuf_header_impl>
 80080b4:	4603      	mov	r3, r0
}
 80080b6:	4618      	mov	r0, r3
 80080b8:	3708      	adds	r7, #8
 80080ba:	46bd      	mov	sp, r7
 80080bc:	bd80      	pop	{r7, pc}
	...

080080c0 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b086      	sub	sp, #24
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d10b      	bne.n	80080e6 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d106      	bne.n	80080e2 <pbuf_free+0x22>
 80080d4:	4b38      	ldr	r3, [pc, #224]	; (80081b8 <pbuf_free+0xf8>)
 80080d6:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 80080da:	4938      	ldr	r1, [pc, #224]	; (80081bc <pbuf_free+0xfc>)
 80080dc:	4838      	ldr	r0, [pc, #224]	; (80081c0 <pbuf_free+0x100>)
 80080de:	f009 f9b7 	bl	8011450 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80080e2:	2300      	movs	r3, #0
 80080e4:	e063      	b.n	80081ae <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 80080e6:	2300      	movs	r3, #0
 80080e8:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 80080ea:	e05c      	b.n	80081a6 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	7b9b      	ldrb	r3, [r3, #14]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d106      	bne.n	8008102 <pbuf_free+0x42>
 80080f4:	4b30      	ldr	r3, [pc, #192]	; (80081b8 <pbuf_free+0xf8>)
 80080f6:	f240 22f1 	movw	r2, #753	; 0x2f1
 80080fa:	4932      	ldr	r1, [pc, #200]	; (80081c4 <pbuf_free+0x104>)
 80080fc:	4830      	ldr	r0, [pc, #192]	; (80081c0 <pbuf_free+0x100>)
 80080fe:	f009 f9a7 	bl	8011450 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	7b9b      	ldrb	r3, [r3, #14]
 8008106:	3b01      	subs	r3, #1
 8008108:	b2da      	uxtb	r2, r3
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	739a      	strb	r2, [r3, #14]
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	7b9b      	ldrb	r3, [r3, #14]
 8008112:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8008114:	7dbb      	ldrb	r3, [r7, #22]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d143      	bne.n	80081a2 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	7b1b      	ldrb	r3, [r3, #12]
 8008124:	f003 030f 	and.w	r3, r3, #15
 8008128:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	7b5b      	ldrb	r3, [r3, #13]
 800812e:	f003 0302 	and.w	r3, r3, #2
 8008132:	2b00      	cmp	r3, #0
 8008134:	d011      	beq.n	800815a <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800813a:	68bb      	ldr	r3, [r7, #8]
 800813c:	691b      	ldr	r3, [r3, #16]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d106      	bne.n	8008150 <pbuf_free+0x90>
 8008142:	4b1d      	ldr	r3, [pc, #116]	; (80081b8 <pbuf_free+0xf8>)
 8008144:	f240 22ff 	movw	r2, #767	; 0x2ff
 8008148:	491f      	ldr	r1, [pc, #124]	; (80081c8 <pbuf_free+0x108>)
 800814a:	481d      	ldr	r0, [pc, #116]	; (80081c0 <pbuf_free+0x100>)
 800814c:	f009 f980 	bl	8011450 <iprintf>
        pc->custom_free_function(p);
 8008150:	68bb      	ldr	r3, [r7, #8]
 8008152:	691b      	ldr	r3, [r3, #16]
 8008154:	6878      	ldr	r0, [r7, #4]
 8008156:	4798      	blx	r3
 8008158:	e01d      	b.n	8008196 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800815a:	7bfb      	ldrb	r3, [r7, #15]
 800815c:	2b02      	cmp	r3, #2
 800815e:	d104      	bne.n	800816a <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8008160:	6879      	ldr	r1, [r7, #4]
 8008162:	2008      	movs	r0, #8
 8008164:	f7ff f99a 	bl	800749c <memp_free>
 8008168:	e015      	b.n	8008196 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800816a:	7bfb      	ldrb	r3, [r7, #15]
 800816c:	2b01      	cmp	r3, #1
 800816e:	d104      	bne.n	800817a <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8008170:	6879      	ldr	r1, [r7, #4]
 8008172:	2007      	movs	r0, #7
 8008174:	f7ff f992 	bl	800749c <memp_free>
 8008178:	e00d      	b.n	8008196 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800817a:	7bfb      	ldrb	r3, [r7, #15]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d103      	bne.n	8008188 <pbuf_free+0xc8>
          mem_free(p);
 8008180:	6878      	ldr	r0, [r7, #4]
 8008182:	f7fe fe6b 	bl	8006e5c <mem_free>
 8008186:	e006      	b.n	8008196 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8008188:	4b0b      	ldr	r3, [pc, #44]	; (80081b8 <pbuf_free+0xf8>)
 800818a:	f240 320f 	movw	r2, #783	; 0x30f
 800818e:	490f      	ldr	r1, [pc, #60]	; (80081cc <pbuf_free+0x10c>)
 8008190:	480b      	ldr	r0, [pc, #44]	; (80081c0 <pbuf_free+0x100>)
 8008192:	f009 f95d 	bl	8011450 <iprintf>
        }
      }
      count++;
 8008196:	7dfb      	ldrb	r3, [r7, #23]
 8008198:	3301      	adds	r3, #1
 800819a:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800819c:	693b      	ldr	r3, [r7, #16]
 800819e:	607b      	str	r3, [r7, #4]
 80081a0:	e001      	b.n	80081a6 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 80081a2:	2300      	movs	r3, #0
 80081a4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d19f      	bne.n	80080ec <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 80081ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80081ae:	4618      	mov	r0, r3
 80081b0:	3718      	adds	r7, #24
 80081b2:	46bd      	mov	sp, r7
 80081b4:	bd80      	pop	{r7, pc}
 80081b6:	bf00      	nop
 80081b8:	08013b2c 	.word	0x08013b2c
 80081bc:	08013c90 	.word	0x08013c90
 80081c0:	08013b8c 	.word	0x08013b8c
 80081c4:	08013cbc 	.word	0x08013cbc
 80081c8:	08013cd4 	.word	0x08013cd4
 80081cc:	08013cf8 	.word	0x08013cf8

080081d0 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80081d0:	b480      	push	{r7}
 80081d2:	b085      	sub	sp, #20
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80081d8:	2300      	movs	r3, #0
 80081da:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 80081dc:	e005      	b.n	80081ea <pbuf_clen+0x1a>
    ++len;
 80081de:	89fb      	ldrh	r3, [r7, #14]
 80081e0:	3301      	adds	r3, #1
 80081e2:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d1f6      	bne.n	80081de <pbuf_clen+0xe>
  }
  return len;
 80081f0:	89fb      	ldrh	r3, [r7, #14]
}
 80081f2:	4618      	mov	r0, r3
 80081f4:	3714      	adds	r7, #20
 80081f6:	46bd      	mov	sp, r7
 80081f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fc:	4770      	bx	lr
	...

08008200 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b082      	sub	sp, #8
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d010      	beq.n	8008230 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	7b9b      	ldrb	r3, [r3, #14]
 8008212:	3301      	adds	r3, #1
 8008214:	b2da      	uxtb	r2, r3
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	7b9b      	ldrb	r3, [r3, #14]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d106      	bne.n	8008230 <pbuf_ref+0x30>
 8008222:	4b05      	ldr	r3, [pc, #20]	; (8008238 <pbuf_ref+0x38>)
 8008224:	f240 3242 	movw	r2, #834	; 0x342
 8008228:	4904      	ldr	r1, [pc, #16]	; (800823c <pbuf_ref+0x3c>)
 800822a:	4805      	ldr	r0, [pc, #20]	; (8008240 <pbuf_ref+0x40>)
 800822c:	f009 f910 	bl	8011450 <iprintf>
  }
}
 8008230:	bf00      	nop
 8008232:	3708      	adds	r7, #8
 8008234:	46bd      	mov	sp, r7
 8008236:	bd80      	pop	{r7, pc}
 8008238:	08013b2c 	.word	0x08013b2c
 800823c:	08013d0c 	.word	0x08013d0c
 8008240:	08013b8c 	.word	0x08013b8c

08008244 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b084      	sub	sp, #16
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
 800824c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d002      	beq.n	800825a <pbuf_cat+0x16>
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d107      	bne.n	800826a <pbuf_cat+0x26>
 800825a:	4b20      	ldr	r3, [pc, #128]	; (80082dc <pbuf_cat+0x98>)
 800825c:	f240 3259 	movw	r2, #857	; 0x359
 8008260:	491f      	ldr	r1, [pc, #124]	; (80082e0 <pbuf_cat+0x9c>)
 8008262:	4820      	ldr	r0, [pc, #128]	; (80082e4 <pbuf_cat+0xa0>)
 8008264:	f009 f8f4 	bl	8011450 <iprintf>
 8008268:	e034      	b.n	80082d4 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	60fb      	str	r3, [r7, #12]
 800826e:	e00a      	b.n	8008286 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	891a      	ldrh	r2, [r3, #8]
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	891b      	ldrh	r3, [r3, #8]
 8008278:	4413      	add	r3, r2
 800827a:	b29a      	uxth	r2, r3
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	60fb      	str	r3, [r7, #12]
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d1f0      	bne.n	8008270 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	891a      	ldrh	r2, [r3, #8]
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	895b      	ldrh	r3, [r3, #10]
 8008296:	429a      	cmp	r2, r3
 8008298:	d006      	beq.n	80082a8 <pbuf_cat+0x64>
 800829a:	4b10      	ldr	r3, [pc, #64]	; (80082dc <pbuf_cat+0x98>)
 800829c:	f240 3262 	movw	r2, #866	; 0x362
 80082a0:	4911      	ldr	r1, [pc, #68]	; (80082e8 <pbuf_cat+0xa4>)
 80082a2:	4810      	ldr	r0, [pc, #64]	; (80082e4 <pbuf_cat+0xa0>)
 80082a4:	f009 f8d4 	bl	8011450 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d006      	beq.n	80082be <pbuf_cat+0x7a>
 80082b0:	4b0a      	ldr	r3, [pc, #40]	; (80082dc <pbuf_cat+0x98>)
 80082b2:	f240 3263 	movw	r2, #867	; 0x363
 80082b6:	490d      	ldr	r1, [pc, #52]	; (80082ec <pbuf_cat+0xa8>)
 80082b8:	480a      	ldr	r0, [pc, #40]	; (80082e4 <pbuf_cat+0xa0>)
 80082ba:	f009 f8c9 	bl	8011450 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	891a      	ldrh	r2, [r3, #8]
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	891b      	ldrh	r3, [r3, #8]
 80082c6:	4413      	add	r3, r2
 80082c8:	b29a      	uxth	r2, r3
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	683a      	ldr	r2, [r7, #0]
 80082d2:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80082d4:	3710      	adds	r7, #16
 80082d6:	46bd      	mov	sp, r7
 80082d8:	bd80      	pop	{r7, pc}
 80082da:	bf00      	nop
 80082dc:	08013b2c 	.word	0x08013b2c
 80082e0:	08013d20 	.word	0x08013d20
 80082e4:	08013b8c 	.word	0x08013b8c
 80082e8:	08013d58 	.word	0x08013d58
 80082ec:	08013d88 	.word	0x08013d88

080082f0 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b086      	sub	sp, #24
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
 80082f8:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 80082fa:	2300      	movs	r3, #0
 80082fc:	617b      	str	r3, [r7, #20]
 80082fe:	2300      	movs	r3, #0
 8008300:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d008      	beq.n	800831a <pbuf_copy+0x2a>
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d005      	beq.n	800831a <pbuf_copy+0x2a>
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	891a      	ldrh	r2, [r3, #8]
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	891b      	ldrh	r3, [r3, #8]
 8008316:	429a      	cmp	r2, r3
 8008318:	d209      	bcs.n	800832e <pbuf_copy+0x3e>
 800831a:	4b57      	ldr	r3, [pc, #348]	; (8008478 <pbuf_copy+0x188>)
 800831c:	f240 32c9 	movw	r2, #969	; 0x3c9
 8008320:	4956      	ldr	r1, [pc, #344]	; (800847c <pbuf_copy+0x18c>)
 8008322:	4857      	ldr	r0, [pc, #348]	; (8008480 <pbuf_copy+0x190>)
 8008324:	f009 f894 	bl	8011450 <iprintf>
 8008328:	f06f 030f 	mvn.w	r3, #15
 800832c:	e09f      	b.n	800846e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	895b      	ldrh	r3, [r3, #10]
 8008332:	461a      	mov	r2, r3
 8008334:	697b      	ldr	r3, [r7, #20]
 8008336:	1ad2      	subs	r2, r2, r3
 8008338:	683b      	ldr	r3, [r7, #0]
 800833a:	895b      	ldrh	r3, [r3, #10]
 800833c:	4619      	mov	r1, r3
 800833e:	693b      	ldr	r3, [r7, #16]
 8008340:	1acb      	subs	r3, r1, r3
 8008342:	429a      	cmp	r2, r3
 8008344:	d306      	bcc.n	8008354 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	895b      	ldrh	r3, [r3, #10]
 800834a:	461a      	mov	r2, r3
 800834c:	693b      	ldr	r3, [r7, #16]
 800834e:	1ad3      	subs	r3, r2, r3
 8008350:	60fb      	str	r3, [r7, #12]
 8008352:	e005      	b.n	8008360 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	895b      	ldrh	r3, [r3, #10]
 8008358:	461a      	mov	r2, r3
 800835a:	697b      	ldr	r3, [r7, #20]
 800835c:	1ad3      	subs	r3, r2, r3
 800835e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	685a      	ldr	r2, [r3, #4]
 8008364:	697b      	ldr	r3, [r7, #20]
 8008366:	18d0      	adds	r0, r2, r3
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	685a      	ldr	r2, [r3, #4]
 800836c:	693b      	ldr	r3, [r7, #16]
 800836e:	4413      	add	r3, r2
 8008370:	68fa      	ldr	r2, [r7, #12]
 8008372:	4619      	mov	r1, r3
 8008374:	f008 ff92 	bl	801129c <memcpy>
    offset_to += len;
 8008378:	697a      	ldr	r2, [r7, #20]
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	4413      	add	r3, r2
 800837e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8008380:	693a      	ldr	r2, [r7, #16]
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	4413      	add	r3, r2
 8008386:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	895b      	ldrh	r3, [r3, #10]
 800838c:	461a      	mov	r2, r3
 800838e:	697b      	ldr	r3, [r7, #20]
 8008390:	4293      	cmp	r3, r2
 8008392:	d906      	bls.n	80083a2 <pbuf_copy+0xb2>
 8008394:	4b38      	ldr	r3, [pc, #224]	; (8008478 <pbuf_copy+0x188>)
 8008396:	f240 32d9 	movw	r2, #985	; 0x3d9
 800839a:	493a      	ldr	r1, [pc, #232]	; (8008484 <pbuf_copy+0x194>)
 800839c:	4838      	ldr	r0, [pc, #224]	; (8008480 <pbuf_copy+0x190>)
 800839e:	f009 f857 	bl	8011450 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	895b      	ldrh	r3, [r3, #10]
 80083a6:	461a      	mov	r2, r3
 80083a8:	693b      	ldr	r3, [r7, #16]
 80083aa:	4293      	cmp	r3, r2
 80083ac:	d906      	bls.n	80083bc <pbuf_copy+0xcc>
 80083ae:	4b32      	ldr	r3, [pc, #200]	; (8008478 <pbuf_copy+0x188>)
 80083b0:	f240 32da 	movw	r2, #986	; 0x3da
 80083b4:	4934      	ldr	r1, [pc, #208]	; (8008488 <pbuf_copy+0x198>)
 80083b6:	4832      	ldr	r0, [pc, #200]	; (8008480 <pbuf_copy+0x190>)
 80083b8:	f009 f84a 	bl	8011450 <iprintf>
    if (offset_from >= p_from->len) {
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	895b      	ldrh	r3, [r3, #10]
 80083c0:	461a      	mov	r2, r3
 80083c2:	693b      	ldr	r3, [r7, #16]
 80083c4:	4293      	cmp	r3, r2
 80083c6:	d304      	bcc.n	80083d2 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 80083c8:	2300      	movs	r3, #0
 80083ca:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	895b      	ldrh	r3, [r3, #10]
 80083d6:	461a      	mov	r2, r3
 80083d8:	697b      	ldr	r3, [r7, #20]
 80083da:	4293      	cmp	r3, r2
 80083dc:	d114      	bne.n	8008408 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 80083de:	2300      	movs	r3, #0
 80083e0:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d10c      	bne.n	8008408 <pbuf_copy+0x118>
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d009      	beq.n	8008408 <pbuf_copy+0x118>
 80083f4:	4b20      	ldr	r3, [pc, #128]	; (8008478 <pbuf_copy+0x188>)
 80083f6:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 80083fa:	4924      	ldr	r1, [pc, #144]	; (800848c <pbuf_copy+0x19c>)
 80083fc:	4820      	ldr	r0, [pc, #128]	; (8008480 <pbuf_copy+0x190>)
 80083fe:	f009 f827 	bl	8011450 <iprintf>
 8008402:	f06f 030f 	mvn.w	r3, #15
 8008406:	e032      	b.n	800846e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d013      	beq.n	8008436 <pbuf_copy+0x146>
 800840e:	683b      	ldr	r3, [r7, #0]
 8008410:	895a      	ldrh	r2, [r3, #10]
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	891b      	ldrh	r3, [r3, #8]
 8008416:	429a      	cmp	r2, r3
 8008418:	d10d      	bne.n	8008436 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d009      	beq.n	8008436 <pbuf_copy+0x146>
 8008422:	4b15      	ldr	r3, [pc, #84]	; (8008478 <pbuf_copy+0x188>)
 8008424:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8008428:	4919      	ldr	r1, [pc, #100]	; (8008490 <pbuf_copy+0x1a0>)
 800842a:	4815      	ldr	r0, [pc, #84]	; (8008480 <pbuf_copy+0x190>)
 800842c:	f009 f810 	bl	8011450 <iprintf>
 8008430:	f06f 0305 	mvn.w	r3, #5
 8008434:	e01b      	b.n	800846e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d013      	beq.n	8008464 <pbuf_copy+0x174>
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	895a      	ldrh	r2, [r3, #10]
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	891b      	ldrh	r3, [r3, #8]
 8008444:	429a      	cmp	r2, r3
 8008446:	d10d      	bne.n	8008464 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d009      	beq.n	8008464 <pbuf_copy+0x174>
 8008450:	4b09      	ldr	r3, [pc, #36]	; (8008478 <pbuf_copy+0x188>)
 8008452:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8008456:	490e      	ldr	r1, [pc, #56]	; (8008490 <pbuf_copy+0x1a0>)
 8008458:	4809      	ldr	r0, [pc, #36]	; (8008480 <pbuf_copy+0x190>)
 800845a:	f008 fff9 	bl	8011450 <iprintf>
 800845e:	f06f 0305 	mvn.w	r3, #5
 8008462:	e004      	b.n	800846e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	2b00      	cmp	r3, #0
 8008468:	f47f af61 	bne.w	800832e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800846c:	2300      	movs	r3, #0
}
 800846e:	4618      	mov	r0, r3
 8008470:	3718      	adds	r7, #24
 8008472:	46bd      	mov	sp, r7
 8008474:	bd80      	pop	{r7, pc}
 8008476:	bf00      	nop
 8008478:	08013b2c 	.word	0x08013b2c
 800847c:	08013dd4 	.word	0x08013dd4
 8008480:	08013b8c 	.word	0x08013b8c
 8008484:	08013e04 	.word	0x08013e04
 8008488:	08013e1c 	.word	0x08013e1c
 800848c:	08013e38 	.word	0x08013e38
 8008490:	08013e48 	.word	0x08013e48

08008494 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b088      	sub	sp, #32
 8008498:	af00      	add	r7, sp, #0
 800849a:	60f8      	str	r0, [r7, #12]
 800849c:	60b9      	str	r1, [r7, #8]
 800849e:	4611      	mov	r1, r2
 80084a0:	461a      	mov	r2, r3
 80084a2:	460b      	mov	r3, r1
 80084a4:	80fb      	strh	r3, [r7, #6]
 80084a6:	4613      	mov	r3, r2
 80084a8:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 80084aa:	2300      	movs	r3, #0
 80084ac:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 80084ae:	2300      	movs	r3, #0
 80084b0:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d108      	bne.n	80084ca <pbuf_copy_partial+0x36>
 80084b8:	4b2b      	ldr	r3, [pc, #172]	; (8008568 <pbuf_copy_partial+0xd4>)
 80084ba:	f240 420a 	movw	r2, #1034	; 0x40a
 80084be:	492b      	ldr	r1, [pc, #172]	; (800856c <pbuf_copy_partial+0xd8>)
 80084c0:	482b      	ldr	r0, [pc, #172]	; (8008570 <pbuf_copy_partial+0xdc>)
 80084c2:	f008 ffc5 	bl	8011450 <iprintf>
 80084c6:	2300      	movs	r3, #0
 80084c8:	e04a      	b.n	8008560 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80084ca:	68bb      	ldr	r3, [r7, #8]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d108      	bne.n	80084e2 <pbuf_copy_partial+0x4e>
 80084d0:	4b25      	ldr	r3, [pc, #148]	; (8008568 <pbuf_copy_partial+0xd4>)
 80084d2:	f240 420b 	movw	r2, #1035	; 0x40b
 80084d6:	4927      	ldr	r1, [pc, #156]	; (8008574 <pbuf_copy_partial+0xe0>)
 80084d8:	4825      	ldr	r0, [pc, #148]	; (8008570 <pbuf_copy_partial+0xdc>)
 80084da:	f008 ffb9 	bl	8011450 <iprintf>
 80084de:	2300      	movs	r3, #0
 80084e0:	e03e      	b.n	8008560 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	61fb      	str	r3, [r7, #28]
 80084e6:	e034      	b.n	8008552 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 80084e8:	88bb      	ldrh	r3, [r7, #4]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d00a      	beq.n	8008504 <pbuf_copy_partial+0x70>
 80084ee:	69fb      	ldr	r3, [r7, #28]
 80084f0:	895b      	ldrh	r3, [r3, #10]
 80084f2:	88ba      	ldrh	r2, [r7, #4]
 80084f4:	429a      	cmp	r2, r3
 80084f6:	d305      	bcc.n	8008504 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 80084f8:	69fb      	ldr	r3, [r7, #28]
 80084fa:	895b      	ldrh	r3, [r3, #10]
 80084fc:	88ba      	ldrh	r2, [r7, #4]
 80084fe:	1ad3      	subs	r3, r2, r3
 8008500:	80bb      	strh	r3, [r7, #4]
 8008502:	e023      	b.n	800854c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8008504:	69fb      	ldr	r3, [r7, #28]
 8008506:	895a      	ldrh	r2, [r3, #10]
 8008508:	88bb      	ldrh	r3, [r7, #4]
 800850a:	1ad3      	subs	r3, r2, r3
 800850c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800850e:	8b3a      	ldrh	r2, [r7, #24]
 8008510:	88fb      	ldrh	r3, [r7, #6]
 8008512:	429a      	cmp	r2, r3
 8008514:	d901      	bls.n	800851a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8008516:	88fb      	ldrh	r3, [r7, #6]
 8008518:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800851a:	8b7b      	ldrh	r3, [r7, #26]
 800851c:	68ba      	ldr	r2, [r7, #8]
 800851e:	18d0      	adds	r0, r2, r3
 8008520:	69fb      	ldr	r3, [r7, #28]
 8008522:	685a      	ldr	r2, [r3, #4]
 8008524:	88bb      	ldrh	r3, [r7, #4]
 8008526:	4413      	add	r3, r2
 8008528:	8b3a      	ldrh	r2, [r7, #24]
 800852a:	4619      	mov	r1, r3
 800852c:	f008 feb6 	bl	801129c <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8008530:	8afa      	ldrh	r2, [r7, #22]
 8008532:	8b3b      	ldrh	r3, [r7, #24]
 8008534:	4413      	add	r3, r2
 8008536:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8008538:	8b7a      	ldrh	r2, [r7, #26]
 800853a:	8b3b      	ldrh	r3, [r7, #24]
 800853c:	4413      	add	r3, r2
 800853e:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8008540:	88fa      	ldrh	r2, [r7, #6]
 8008542:	8b3b      	ldrh	r3, [r7, #24]
 8008544:	1ad3      	subs	r3, r2, r3
 8008546:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8008548:	2300      	movs	r3, #0
 800854a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800854c:	69fb      	ldr	r3, [r7, #28]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	61fb      	str	r3, [r7, #28]
 8008552:	88fb      	ldrh	r3, [r7, #6]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d002      	beq.n	800855e <pbuf_copy_partial+0xca>
 8008558:	69fb      	ldr	r3, [r7, #28]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d1c4      	bne.n	80084e8 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800855e:	8afb      	ldrh	r3, [r7, #22]
}
 8008560:	4618      	mov	r0, r3
 8008562:	3720      	adds	r7, #32
 8008564:	46bd      	mov	sp, r7
 8008566:	bd80      	pop	{r7, pc}
 8008568:	08013b2c 	.word	0x08013b2c
 800856c:	08013e74 	.word	0x08013e74
 8008570:	08013b8c 	.word	0x08013b8c
 8008574:	08013e94 	.word	0x08013e94

08008578 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8008578:	b580      	push	{r7, lr}
 800857a:	b084      	sub	sp, #16
 800857c:	af00      	add	r7, sp, #0
 800857e:	4603      	mov	r3, r0
 8008580:	603a      	str	r2, [r7, #0]
 8008582:	71fb      	strb	r3, [r7, #7]
 8008584:	460b      	mov	r3, r1
 8008586:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	8919      	ldrh	r1, [r3, #8]
 800858c:	88ba      	ldrh	r2, [r7, #4]
 800858e:	79fb      	ldrb	r3, [r7, #7]
 8008590:	4618      	mov	r0, r3
 8008592:	f7ff fab1 	bl	8007af8 <pbuf_alloc>
 8008596:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d101      	bne.n	80085a2 <pbuf_clone+0x2a>
    return NULL;
 800859e:	2300      	movs	r3, #0
 80085a0:	e011      	b.n	80085c6 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 80085a2:	6839      	ldr	r1, [r7, #0]
 80085a4:	68f8      	ldr	r0, [r7, #12]
 80085a6:	f7ff fea3 	bl	80082f0 <pbuf_copy>
 80085aa:	4603      	mov	r3, r0
 80085ac:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 80085ae:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d006      	beq.n	80085c4 <pbuf_clone+0x4c>
 80085b6:	4b06      	ldr	r3, [pc, #24]	; (80085d0 <pbuf_clone+0x58>)
 80085b8:	f240 5224 	movw	r2, #1316	; 0x524
 80085bc:	4905      	ldr	r1, [pc, #20]	; (80085d4 <pbuf_clone+0x5c>)
 80085be:	4806      	ldr	r0, [pc, #24]	; (80085d8 <pbuf_clone+0x60>)
 80085c0:	f008 ff46 	bl	8011450 <iprintf>
  return q;
 80085c4:	68fb      	ldr	r3, [r7, #12]
}
 80085c6:	4618      	mov	r0, r3
 80085c8:	3710      	adds	r7, #16
 80085ca:	46bd      	mov	sp, r7
 80085cc:	bd80      	pop	{r7, pc}
 80085ce:	bf00      	nop
 80085d0:	08013b2c 	.word	0x08013b2c
 80085d4:	08013fa0 	.word	0x08013fa0
 80085d8:	08013b8c 	.word	0x08013b8c

080085dc <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80085e0:	f008 ffc4 	bl	801156c <rand>
 80085e4:	4603      	mov	r3, r0
 80085e6:	b29b      	uxth	r3, r3
 80085e8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80085ec:	b29b      	uxth	r3, r3
 80085ee:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80085f2:	b29a      	uxth	r2, r3
 80085f4:	4b01      	ldr	r3, [pc, #4]	; (80085fc <tcp_init+0x20>)
 80085f6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80085f8:	bf00      	nop
 80085fa:	bd80      	pop	{r7, pc}
 80085fc:	20000026 	.word	0x20000026

08008600 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b082      	sub	sp, #8
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	7d1b      	ldrb	r3, [r3, #20]
 800860c:	2b01      	cmp	r3, #1
 800860e:	d105      	bne.n	800861c <tcp_free+0x1c>
 8008610:	4b06      	ldr	r3, [pc, #24]	; (800862c <tcp_free+0x2c>)
 8008612:	22d4      	movs	r2, #212	; 0xd4
 8008614:	4906      	ldr	r1, [pc, #24]	; (8008630 <tcp_free+0x30>)
 8008616:	4807      	ldr	r0, [pc, #28]	; (8008634 <tcp_free+0x34>)
 8008618:	f008 ff1a 	bl	8011450 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800861c:	6879      	ldr	r1, [r7, #4]
 800861e:	2001      	movs	r0, #1
 8008620:	f7fe ff3c 	bl	800749c <memp_free>
}
 8008624:	bf00      	nop
 8008626:	3708      	adds	r7, #8
 8008628:	46bd      	mov	sp, r7
 800862a:	bd80      	pop	{r7, pc}
 800862c:	0801402c 	.word	0x0801402c
 8008630:	0801405c 	.word	0x0801405c
 8008634:	08014070 	.word	0x08014070

08008638 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b082      	sub	sp, #8
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	7d1b      	ldrb	r3, [r3, #20]
 8008644:	2b01      	cmp	r3, #1
 8008646:	d105      	bne.n	8008654 <tcp_free_listen+0x1c>
 8008648:	4b06      	ldr	r3, [pc, #24]	; (8008664 <tcp_free_listen+0x2c>)
 800864a:	22df      	movs	r2, #223	; 0xdf
 800864c:	4906      	ldr	r1, [pc, #24]	; (8008668 <tcp_free_listen+0x30>)
 800864e:	4807      	ldr	r0, [pc, #28]	; (800866c <tcp_free_listen+0x34>)
 8008650:	f008 fefe 	bl	8011450 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8008654:	6879      	ldr	r1, [r7, #4]
 8008656:	2002      	movs	r0, #2
 8008658:	f7fe ff20 	bl	800749c <memp_free>
}
 800865c:	bf00      	nop
 800865e:	3708      	adds	r7, #8
 8008660:	46bd      	mov	sp, r7
 8008662:	bd80      	pop	{r7, pc}
 8008664:	0801402c 	.word	0x0801402c
 8008668:	08014098 	.word	0x08014098
 800866c:	08014070 	.word	0x08014070

08008670 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8008670:	b580      	push	{r7, lr}
 8008672:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8008674:	f001 f85c 	bl	8009730 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8008678:	4b07      	ldr	r3, [pc, #28]	; (8008698 <tcp_tmr+0x28>)
 800867a:	781b      	ldrb	r3, [r3, #0]
 800867c:	3301      	adds	r3, #1
 800867e:	b2da      	uxtb	r2, r3
 8008680:	4b05      	ldr	r3, [pc, #20]	; (8008698 <tcp_tmr+0x28>)
 8008682:	701a      	strb	r2, [r3, #0]
 8008684:	4b04      	ldr	r3, [pc, #16]	; (8008698 <tcp_tmr+0x28>)
 8008686:	781b      	ldrb	r3, [r3, #0]
 8008688:	f003 0301 	and.w	r3, r3, #1
 800868c:	2b00      	cmp	r3, #0
 800868e:	d001      	beq.n	8008694 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8008690:	f000 fd0e 	bl	80090b0 <tcp_slowtmr>
  }
}
 8008694:	bf00      	nop
 8008696:	bd80      	pop	{r7, pc}
 8008698:	20000571 	.word	0x20000571

0800869c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800869c:	b580      	push	{r7, lr}
 800869e:	b084      	sub	sp, #16
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
 80086a4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d105      	bne.n	80086b8 <tcp_remove_listener+0x1c>
 80086ac:	4b0d      	ldr	r3, [pc, #52]	; (80086e4 <tcp_remove_listener+0x48>)
 80086ae:	22ff      	movs	r2, #255	; 0xff
 80086b0:	490d      	ldr	r1, [pc, #52]	; (80086e8 <tcp_remove_listener+0x4c>)
 80086b2:	480e      	ldr	r0, [pc, #56]	; (80086ec <tcp_remove_listener+0x50>)
 80086b4:	f008 fecc 	bl	8011450 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	60fb      	str	r3, [r7, #12]
 80086bc:	e00a      	b.n	80086d4 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80086c2:	683a      	ldr	r2, [r7, #0]
 80086c4:	429a      	cmp	r2, r3
 80086c6:	d102      	bne.n	80086ce <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	2200      	movs	r2, #0
 80086cc:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	68db      	ldr	r3, [r3, #12]
 80086d2:	60fb      	str	r3, [r7, #12]
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d1f1      	bne.n	80086be <tcp_remove_listener+0x22>
    }
  }
}
 80086da:	bf00      	nop
 80086dc:	bf00      	nop
 80086de:	3710      	adds	r7, #16
 80086e0:	46bd      	mov	sp, r7
 80086e2:	bd80      	pop	{r7, pc}
 80086e4:	0801402c 	.word	0x0801402c
 80086e8:	080140b4 	.word	0x080140b4
 80086ec:	08014070 	.word	0x08014070

080086f0 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b084      	sub	sp, #16
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d106      	bne.n	800870c <tcp_listen_closed+0x1c>
 80086fe:	4b14      	ldr	r3, [pc, #80]	; (8008750 <tcp_listen_closed+0x60>)
 8008700:	f240 1211 	movw	r2, #273	; 0x111
 8008704:	4913      	ldr	r1, [pc, #76]	; (8008754 <tcp_listen_closed+0x64>)
 8008706:	4814      	ldr	r0, [pc, #80]	; (8008758 <tcp_listen_closed+0x68>)
 8008708:	f008 fea2 	bl	8011450 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	7d1b      	ldrb	r3, [r3, #20]
 8008710:	2b01      	cmp	r3, #1
 8008712:	d006      	beq.n	8008722 <tcp_listen_closed+0x32>
 8008714:	4b0e      	ldr	r3, [pc, #56]	; (8008750 <tcp_listen_closed+0x60>)
 8008716:	f44f 7289 	mov.w	r2, #274	; 0x112
 800871a:	4910      	ldr	r1, [pc, #64]	; (800875c <tcp_listen_closed+0x6c>)
 800871c:	480e      	ldr	r0, [pc, #56]	; (8008758 <tcp_listen_closed+0x68>)
 800871e:	f008 fe97 	bl	8011450 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8008722:	2301      	movs	r3, #1
 8008724:	60fb      	str	r3, [r7, #12]
 8008726:	e00b      	b.n	8008740 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8008728:	4a0d      	ldr	r2, [pc, #52]	; (8008760 <tcp_listen_closed+0x70>)
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	6879      	ldr	r1, [r7, #4]
 8008734:	4618      	mov	r0, r3
 8008736:	f7ff ffb1 	bl	800869c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	3301      	adds	r3, #1
 800873e:	60fb      	str	r3, [r7, #12]
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	2b03      	cmp	r3, #3
 8008744:	d9f0      	bls.n	8008728 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8008746:	bf00      	nop
 8008748:	bf00      	nop
 800874a:	3710      	adds	r7, #16
 800874c:	46bd      	mov	sp, r7
 800874e:	bd80      	pop	{r7, pc}
 8008750:	0801402c 	.word	0x0801402c
 8008754:	080140dc 	.word	0x080140dc
 8008758:	08014070 	.word	0x08014070
 800875c:	080140e8 	.word	0x080140e8
 8008760:	08017d88 	.word	0x08017d88

08008764 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8008764:	b5b0      	push	{r4, r5, r7, lr}
 8008766:	b088      	sub	sp, #32
 8008768:	af04      	add	r7, sp, #16
 800876a:	6078      	str	r0, [r7, #4]
 800876c:	460b      	mov	r3, r1
 800876e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d106      	bne.n	8008784 <tcp_close_shutdown+0x20>
 8008776:	4b63      	ldr	r3, [pc, #396]	; (8008904 <tcp_close_shutdown+0x1a0>)
 8008778:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800877c:	4962      	ldr	r1, [pc, #392]	; (8008908 <tcp_close_shutdown+0x1a4>)
 800877e:	4863      	ldr	r0, [pc, #396]	; (800890c <tcp_close_shutdown+0x1a8>)
 8008780:	f008 fe66 	bl	8011450 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8008784:	78fb      	ldrb	r3, [r7, #3]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d066      	beq.n	8008858 <tcp_close_shutdown+0xf4>
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	7d1b      	ldrb	r3, [r3, #20]
 800878e:	2b04      	cmp	r3, #4
 8008790:	d003      	beq.n	800879a <tcp_close_shutdown+0x36>
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	7d1b      	ldrb	r3, [r3, #20]
 8008796:	2b07      	cmp	r3, #7
 8008798:	d15e      	bne.n	8008858 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d104      	bne.n	80087ac <tcp_close_shutdown+0x48>
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80087a6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80087aa:	d055      	beq.n	8008858 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	8b5b      	ldrh	r3, [r3, #26]
 80087b0:	f003 0310 	and.w	r3, r3, #16
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d106      	bne.n	80087c6 <tcp_close_shutdown+0x62>
 80087b8:	4b52      	ldr	r3, [pc, #328]	; (8008904 <tcp_close_shutdown+0x1a0>)
 80087ba:	f44f 72b2 	mov.w	r2, #356	; 0x164
 80087be:	4954      	ldr	r1, [pc, #336]	; (8008910 <tcp_close_shutdown+0x1ac>)
 80087c0:	4852      	ldr	r0, [pc, #328]	; (800890c <tcp_close_shutdown+0x1a8>)
 80087c2:	f008 fe45 	bl	8011450 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80087ce:	687d      	ldr	r5, [r7, #4]
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	3304      	adds	r3, #4
 80087d4:	687a      	ldr	r2, [r7, #4]
 80087d6:	8ad2      	ldrh	r2, [r2, #22]
 80087d8:	6879      	ldr	r1, [r7, #4]
 80087da:	8b09      	ldrh	r1, [r1, #24]
 80087dc:	9102      	str	r1, [sp, #8]
 80087de:	9201      	str	r2, [sp, #4]
 80087e0:	9300      	str	r3, [sp, #0]
 80087e2:	462b      	mov	r3, r5
 80087e4:	4622      	mov	r2, r4
 80087e6:	4601      	mov	r1, r0
 80087e8:	6878      	ldr	r0, [r7, #4]
 80087ea:	f005 fd8b 	bl	800e304 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 80087ee:	6878      	ldr	r0, [r7, #4]
 80087f0:	f001 fb6c 	bl	8009ecc <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80087f4:	4b47      	ldr	r3, [pc, #284]	; (8008914 <tcp_close_shutdown+0x1b0>)
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	687a      	ldr	r2, [r7, #4]
 80087fa:	429a      	cmp	r2, r3
 80087fc:	d105      	bne.n	800880a <tcp_close_shutdown+0xa6>
 80087fe:	4b45      	ldr	r3, [pc, #276]	; (8008914 <tcp_close_shutdown+0x1b0>)
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	68db      	ldr	r3, [r3, #12]
 8008804:	4a43      	ldr	r2, [pc, #268]	; (8008914 <tcp_close_shutdown+0x1b0>)
 8008806:	6013      	str	r3, [r2, #0]
 8008808:	e013      	b.n	8008832 <tcp_close_shutdown+0xce>
 800880a:	4b42      	ldr	r3, [pc, #264]	; (8008914 <tcp_close_shutdown+0x1b0>)
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	60fb      	str	r3, [r7, #12]
 8008810:	e00c      	b.n	800882c <tcp_close_shutdown+0xc8>
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	68db      	ldr	r3, [r3, #12]
 8008816:	687a      	ldr	r2, [r7, #4]
 8008818:	429a      	cmp	r2, r3
 800881a:	d104      	bne.n	8008826 <tcp_close_shutdown+0xc2>
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	68da      	ldr	r2, [r3, #12]
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	60da      	str	r2, [r3, #12]
 8008824:	e005      	b.n	8008832 <tcp_close_shutdown+0xce>
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	68db      	ldr	r3, [r3, #12]
 800882a:	60fb      	str	r3, [r7, #12]
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d1ef      	bne.n	8008812 <tcp_close_shutdown+0xae>
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	2200      	movs	r2, #0
 8008836:	60da      	str	r2, [r3, #12]
 8008838:	4b37      	ldr	r3, [pc, #220]	; (8008918 <tcp_close_shutdown+0x1b4>)
 800883a:	2201      	movs	r2, #1
 800883c:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800883e:	4b37      	ldr	r3, [pc, #220]	; (800891c <tcp_close_shutdown+0x1b8>)
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	687a      	ldr	r2, [r7, #4]
 8008844:	429a      	cmp	r2, r3
 8008846:	d102      	bne.n	800884e <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8008848:	f004 f800 	bl	800c84c <tcp_trigger_input_pcb_close>
 800884c:	e002      	b.n	8008854 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800884e:	6878      	ldr	r0, [r7, #4]
 8008850:	f7ff fed6 	bl	8008600 <tcp_free>
      }
      return ERR_OK;
 8008854:	2300      	movs	r3, #0
 8008856:	e050      	b.n	80088fa <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	7d1b      	ldrb	r3, [r3, #20]
 800885c:	2b02      	cmp	r3, #2
 800885e:	d03b      	beq.n	80088d8 <tcp_close_shutdown+0x174>
 8008860:	2b02      	cmp	r3, #2
 8008862:	dc44      	bgt.n	80088ee <tcp_close_shutdown+0x18a>
 8008864:	2b00      	cmp	r3, #0
 8008866:	d002      	beq.n	800886e <tcp_close_shutdown+0x10a>
 8008868:	2b01      	cmp	r3, #1
 800886a:	d02a      	beq.n	80088c2 <tcp_close_shutdown+0x15e>
 800886c:	e03f      	b.n	80088ee <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	8adb      	ldrh	r3, [r3, #22]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d021      	beq.n	80088ba <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8008876:	4b2a      	ldr	r3, [pc, #168]	; (8008920 <tcp_close_shutdown+0x1bc>)
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	687a      	ldr	r2, [r7, #4]
 800887c:	429a      	cmp	r2, r3
 800887e:	d105      	bne.n	800888c <tcp_close_shutdown+0x128>
 8008880:	4b27      	ldr	r3, [pc, #156]	; (8008920 <tcp_close_shutdown+0x1bc>)
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	68db      	ldr	r3, [r3, #12]
 8008886:	4a26      	ldr	r2, [pc, #152]	; (8008920 <tcp_close_shutdown+0x1bc>)
 8008888:	6013      	str	r3, [r2, #0]
 800888a:	e013      	b.n	80088b4 <tcp_close_shutdown+0x150>
 800888c:	4b24      	ldr	r3, [pc, #144]	; (8008920 <tcp_close_shutdown+0x1bc>)
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	60bb      	str	r3, [r7, #8]
 8008892:	e00c      	b.n	80088ae <tcp_close_shutdown+0x14a>
 8008894:	68bb      	ldr	r3, [r7, #8]
 8008896:	68db      	ldr	r3, [r3, #12]
 8008898:	687a      	ldr	r2, [r7, #4]
 800889a:	429a      	cmp	r2, r3
 800889c:	d104      	bne.n	80088a8 <tcp_close_shutdown+0x144>
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	68da      	ldr	r2, [r3, #12]
 80088a2:	68bb      	ldr	r3, [r7, #8]
 80088a4:	60da      	str	r2, [r3, #12]
 80088a6:	e005      	b.n	80088b4 <tcp_close_shutdown+0x150>
 80088a8:	68bb      	ldr	r3, [r7, #8]
 80088aa:	68db      	ldr	r3, [r3, #12]
 80088ac:	60bb      	str	r3, [r7, #8]
 80088ae:	68bb      	ldr	r3, [r7, #8]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d1ef      	bne.n	8008894 <tcp_close_shutdown+0x130>
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2200      	movs	r2, #0
 80088b8:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 80088ba:	6878      	ldr	r0, [r7, #4]
 80088bc:	f7ff fea0 	bl	8008600 <tcp_free>
      break;
 80088c0:	e01a      	b.n	80088f8 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 80088c2:	6878      	ldr	r0, [r7, #4]
 80088c4:	f7ff ff14 	bl	80086f0 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 80088c8:	6879      	ldr	r1, [r7, #4]
 80088ca:	4816      	ldr	r0, [pc, #88]	; (8008924 <tcp_close_shutdown+0x1c0>)
 80088cc:	f001 fb4e 	bl	8009f6c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 80088d0:	6878      	ldr	r0, [r7, #4]
 80088d2:	f7ff feb1 	bl	8008638 <tcp_free_listen>
      break;
 80088d6:	e00f      	b.n	80088f8 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80088d8:	6879      	ldr	r1, [r7, #4]
 80088da:	480e      	ldr	r0, [pc, #56]	; (8008914 <tcp_close_shutdown+0x1b0>)
 80088dc:	f001 fb46 	bl	8009f6c <tcp_pcb_remove>
 80088e0:	4b0d      	ldr	r3, [pc, #52]	; (8008918 <tcp_close_shutdown+0x1b4>)
 80088e2:	2201      	movs	r2, #1
 80088e4:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 80088e6:	6878      	ldr	r0, [r7, #4]
 80088e8:	f7ff fe8a 	bl	8008600 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 80088ec:	e004      	b.n	80088f8 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 80088ee:	6878      	ldr	r0, [r7, #4]
 80088f0:	f000 f81a 	bl	8008928 <tcp_close_shutdown_fin>
 80088f4:	4603      	mov	r3, r0
 80088f6:	e000      	b.n	80088fa <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 80088f8:	2300      	movs	r3, #0
}
 80088fa:	4618      	mov	r0, r3
 80088fc:	3710      	adds	r7, #16
 80088fe:	46bd      	mov	sp, r7
 8008900:	bdb0      	pop	{r4, r5, r7, pc}
 8008902:	bf00      	nop
 8008904:	0801402c 	.word	0x0801402c
 8008908:	08014100 	.word	0x08014100
 800890c:	08014070 	.word	0x08014070
 8008910:	08014120 	.word	0x08014120
 8008914:	2000d3e0 	.word	0x2000d3e0
 8008918:	2000d3dc 	.word	0x2000d3dc
 800891c:	2000d3f4 	.word	0x2000d3f4
 8008920:	2000d3ec 	.word	0x2000d3ec
 8008924:	2000d3e8 	.word	0x2000d3e8

08008928 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8008928:	b580      	push	{r7, lr}
 800892a:	b084      	sub	sp, #16
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d106      	bne.n	8008944 <tcp_close_shutdown_fin+0x1c>
 8008936:	4b2e      	ldr	r3, [pc, #184]	; (80089f0 <tcp_close_shutdown_fin+0xc8>)
 8008938:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800893c:	492d      	ldr	r1, [pc, #180]	; (80089f4 <tcp_close_shutdown_fin+0xcc>)
 800893e:	482e      	ldr	r0, [pc, #184]	; (80089f8 <tcp_close_shutdown_fin+0xd0>)
 8008940:	f008 fd86 	bl	8011450 <iprintf>

  switch (pcb->state) {
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	7d1b      	ldrb	r3, [r3, #20]
 8008948:	2b07      	cmp	r3, #7
 800894a:	d020      	beq.n	800898e <tcp_close_shutdown_fin+0x66>
 800894c:	2b07      	cmp	r3, #7
 800894e:	dc2b      	bgt.n	80089a8 <tcp_close_shutdown_fin+0x80>
 8008950:	2b03      	cmp	r3, #3
 8008952:	d002      	beq.n	800895a <tcp_close_shutdown_fin+0x32>
 8008954:	2b04      	cmp	r3, #4
 8008956:	d00d      	beq.n	8008974 <tcp_close_shutdown_fin+0x4c>
 8008958:	e026      	b.n	80089a8 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800895a:	6878      	ldr	r0, [r7, #4]
 800895c:	f004 fde0 	bl	800d520 <tcp_send_fin>
 8008960:	4603      	mov	r3, r0
 8008962:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8008964:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d11f      	bne.n	80089ac <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2205      	movs	r2, #5
 8008970:	751a      	strb	r2, [r3, #20]
      }
      break;
 8008972:	e01b      	b.n	80089ac <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8008974:	6878      	ldr	r0, [r7, #4]
 8008976:	f004 fdd3 	bl	800d520 <tcp_send_fin>
 800897a:	4603      	mov	r3, r0
 800897c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800897e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d114      	bne.n	80089b0 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	2205      	movs	r2, #5
 800898a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800898c:	e010      	b.n	80089b0 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800898e:	6878      	ldr	r0, [r7, #4]
 8008990:	f004 fdc6 	bl	800d520 <tcp_send_fin>
 8008994:	4603      	mov	r3, r0
 8008996:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8008998:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d109      	bne.n	80089b4 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	2209      	movs	r2, #9
 80089a4:	751a      	strb	r2, [r3, #20]
      }
      break;
 80089a6:	e005      	b.n	80089b4 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 80089a8:	2300      	movs	r3, #0
 80089aa:	e01c      	b.n	80089e6 <tcp_close_shutdown_fin+0xbe>
      break;
 80089ac:	bf00      	nop
 80089ae:	e002      	b.n	80089b6 <tcp_close_shutdown_fin+0x8e>
      break;
 80089b0:	bf00      	nop
 80089b2:	e000      	b.n	80089b6 <tcp_close_shutdown_fin+0x8e>
      break;
 80089b4:	bf00      	nop
  }

  if (err == ERR_OK) {
 80089b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d103      	bne.n	80089c6 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 80089be:	6878      	ldr	r0, [r7, #4]
 80089c0:	f004 feec 	bl	800d79c <tcp_output>
 80089c4:	e00d      	b.n	80089e2 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 80089c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80089ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80089ce:	d108      	bne.n	80089e2 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	8b5b      	ldrh	r3, [r3, #26]
 80089d4:	f043 0308 	orr.w	r3, r3, #8
 80089d8:	b29a      	uxth	r2, r3
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 80089de:	2300      	movs	r3, #0
 80089e0:	e001      	b.n	80089e6 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 80089e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80089e6:	4618      	mov	r0, r3
 80089e8:	3710      	adds	r7, #16
 80089ea:	46bd      	mov	sp, r7
 80089ec:	bd80      	pop	{r7, pc}
 80089ee:	bf00      	nop
 80089f0:	0801402c 	.word	0x0801402c
 80089f4:	080140dc 	.word	0x080140dc
 80089f8:	08014070 	.word	0x08014070

080089fc <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b082      	sub	sp, #8
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d109      	bne.n	8008a1e <tcp_close+0x22>
 8008a0a:	4b0f      	ldr	r3, [pc, #60]	; (8008a48 <tcp_close+0x4c>)
 8008a0c:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8008a10:	490e      	ldr	r1, [pc, #56]	; (8008a4c <tcp_close+0x50>)
 8008a12:	480f      	ldr	r0, [pc, #60]	; (8008a50 <tcp_close+0x54>)
 8008a14:	f008 fd1c 	bl	8011450 <iprintf>
 8008a18:	f06f 030f 	mvn.w	r3, #15
 8008a1c:	e00f      	b.n	8008a3e <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	7d1b      	ldrb	r3, [r3, #20]
 8008a22:	2b01      	cmp	r3, #1
 8008a24:	d006      	beq.n	8008a34 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	8b5b      	ldrh	r3, [r3, #26]
 8008a2a:	f043 0310 	orr.w	r3, r3, #16
 8008a2e:	b29a      	uxth	r2, r3
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8008a34:	2101      	movs	r1, #1
 8008a36:	6878      	ldr	r0, [r7, #4]
 8008a38:	f7ff fe94 	bl	8008764 <tcp_close_shutdown>
 8008a3c:	4603      	mov	r3, r0
}
 8008a3e:	4618      	mov	r0, r3
 8008a40:	3708      	adds	r7, #8
 8008a42:	46bd      	mov	sp, r7
 8008a44:	bd80      	pop	{r7, pc}
 8008a46:	bf00      	nop
 8008a48:	0801402c 	.word	0x0801402c
 8008a4c:	0801413c 	.word	0x0801413c
 8008a50:	08014070 	.word	0x08014070

08008a54 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b08e      	sub	sp, #56	; 0x38
 8008a58:	af04      	add	r7, sp, #16
 8008a5a:	6078      	str	r0, [r7, #4]
 8008a5c:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d107      	bne.n	8008a74 <tcp_abandon+0x20>
 8008a64:	4b52      	ldr	r3, [pc, #328]	; (8008bb0 <tcp_abandon+0x15c>)
 8008a66:	f240 223d 	movw	r2, #573	; 0x23d
 8008a6a:	4952      	ldr	r1, [pc, #328]	; (8008bb4 <tcp_abandon+0x160>)
 8008a6c:	4852      	ldr	r0, [pc, #328]	; (8008bb8 <tcp_abandon+0x164>)
 8008a6e:	f008 fcef 	bl	8011450 <iprintf>
 8008a72:	e099      	b.n	8008ba8 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	7d1b      	ldrb	r3, [r3, #20]
 8008a78:	2b01      	cmp	r3, #1
 8008a7a:	d106      	bne.n	8008a8a <tcp_abandon+0x36>
 8008a7c:	4b4c      	ldr	r3, [pc, #304]	; (8008bb0 <tcp_abandon+0x15c>)
 8008a7e:	f44f 7210 	mov.w	r2, #576	; 0x240
 8008a82:	494e      	ldr	r1, [pc, #312]	; (8008bbc <tcp_abandon+0x168>)
 8008a84:	484c      	ldr	r0, [pc, #304]	; (8008bb8 <tcp_abandon+0x164>)
 8008a86:	f008 fce3 	bl	8011450 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	7d1b      	ldrb	r3, [r3, #20]
 8008a8e:	2b0a      	cmp	r3, #10
 8008a90:	d107      	bne.n	8008aa2 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8008a92:	6879      	ldr	r1, [r7, #4]
 8008a94:	484a      	ldr	r0, [pc, #296]	; (8008bc0 <tcp_abandon+0x16c>)
 8008a96:	f001 fa69 	bl	8009f6c <tcp_pcb_remove>
    tcp_free(pcb);
 8008a9a:	6878      	ldr	r0, [r7, #4]
 8008a9c:	f7ff fdb0 	bl	8008600 <tcp_free>
 8008aa0:	e082      	b.n	8008ba8 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008aae:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ab4:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008abc:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	691b      	ldr	r3, [r3, #16]
 8008ac2:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	7d1b      	ldrb	r3, [r3, #20]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d126      	bne.n	8008b1a <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	8adb      	ldrh	r3, [r3, #22]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d02e      	beq.n	8008b32 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8008ad4:	4b3b      	ldr	r3, [pc, #236]	; (8008bc4 <tcp_abandon+0x170>)
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	687a      	ldr	r2, [r7, #4]
 8008ada:	429a      	cmp	r2, r3
 8008adc:	d105      	bne.n	8008aea <tcp_abandon+0x96>
 8008ade:	4b39      	ldr	r3, [pc, #228]	; (8008bc4 <tcp_abandon+0x170>)
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	68db      	ldr	r3, [r3, #12]
 8008ae4:	4a37      	ldr	r2, [pc, #220]	; (8008bc4 <tcp_abandon+0x170>)
 8008ae6:	6013      	str	r3, [r2, #0]
 8008ae8:	e013      	b.n	8008b12 <tcp_abandon+0xbe>
 8008aea:	4b36      	ldr	r3, [pc, #216]	; (8008bc4 <tcp_abandon+0x170>)
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	61fb      	str	r3, [r7, #28]
 8008af0:	e00c      	b.n	8008b0c <tcp_abandon+0xb8>
 8008af2:	69fb      	ldr	r3, [r7, #28]
 8008af4:	68db      	ldr	r3, [r3, #12]
 8008af6:	687a      	ldr	r2, [r7, #4]
 8008af8:	429a      	cmp	r2, r3
 8008afa:	d104      	bne.n	8008b06 <tcp_abandon+0xb2>
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	68da      	ldr	r2, [r3, #12]
 8008b00:	69fb      	ldr	r3, [r7, #28]
 8008b02:	60da      	str	r2, [r3, #12]
 8008b04:	e005      	b.n	8008b12 <tcp_abandon+0xbe>
 8008b06:	69fb      	ldr	r3, [r7, #28]
 8008b08:	68db      	ldr	r3, [r3, #12]
 8008b0a:	61fb      	str	r3, [r7, #28]
 8008b0c:	69fb      	ldr	r3, [r7, #28]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d1ef      	bne.n	8008af2 <tcp_abandon+0x9e>
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	2200      	movs	r2, #0
 8008b16:	60da      	str	r2, [r3, #12]
 8008b18:	e00b      	b.n	8008b32 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	8adb      	ldrh	r3, [r3, #22]
 8008b22:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8008b24:	6879      	ldr	r1, [r7, #4]
 8008b26:	4828      	ldr	r0, [pc, #160]	; (8008bc8 <tcp_abandon+0x174>)
 8008b28:	f001 fa20 	bl	8009f6c <tcp_pcb_remove>
 8008b2c:	4b27      	ldr	r3, [pc, #156]	; (8008bcc <tcp_abandon+0x178>)
 8008b2e:	2201      	movs	r2, #1
 8008b30:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d004      	beq.n	8008b44 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b3e:	4618      	mov	r0, r3
 8008b40:	f000 fed6 	bl	80098f0 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d004      	beq.n	8008b56 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b50:	4618      	mov	r0, r3
 8008b52:	f000 fecd 	bl	80098f0 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d004      	beq.n	8008b68 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b62:	4618      	mov	r0, r3
 8008b64:	f000 fec4 	bl	80098f0 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8008b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d00e      	beq.n	8008b8c <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8008b6e:	6879      	ldr	r1, [r7, #4]
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	3304      	adds	r3, #4
 8008b74:	687a      	ldr	r2, [r7, #4]
 8008b76:	8b12      	ldrh	r2, [r2, #24]
 8008b78:	9202      	str	r2, [sp, #8]
 8008b7a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8008b7c:	9201      	str	r2, [sp, #4]
 8008b7e:	9300      	str	r3, [sp, #0]
 8008b80:	460b      	mov	r3, r1
 8008b82:	697a      	ldr	r2, [r7, #20]
 8008b84:	69b9      	ldr	r1, [r7, #24]
 8008b86:	6878      	ldr	r0, [r7, #4]
 8008b88:	f005 fbbc 	bl	800e304 <tcp_rst>
    }
    last_state = pcb->state;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	7d1b      	ldrb	r3, [r3, #20]
 8008b90:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8008b92:	6878      	ldr	r0, [r7, #4]
 8008b94:	f7ff fd34 	bl	8008600 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8008b98:	693b      	ldr	r3, [r7, #16]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d004      	beq.n	8008ba8 <tcp_abandon+0x154>
 8008b9e:	693b      	ldr	r3, [r7, #16]
 8008ba0:	f06f 010c 	mvn.w	r1, #12
 8008ba4:	68f8      	ldr	r0, [r7, #12]
 8008ba6:	4798      	blx	r3
  }
}
 8008ba8:	3728      	adds	r7, #40	; 0x28
 8008baa:	46bd      	mov	sp, r7
 8008bac:	bd80      	pop	{r7, pc}
 8008bae:	bf00      	nop
 8008bb0:	0801402c 	.word	0x0801402c
 8008bb4:	08014170 	.word	0x08014170
 8008bb8:	08014070 	.word	0x08014070
 8008bbc:	0801418c 	.word	0x0801418c
 8008bc0:	2000d3f0 	.word	0x2000d3f0
 8008bc4:	2000d3ec 	.word	0x2000d3ec
 8008bc8:	2000d3e0 	.word	0x2000d3e0
 8008bcc:	2000d3dc 	.word	0x2000d3dc

08008bd0 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b082      	sub	sp, #8
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8008bd8:	2101      	movs	r1, #1
 8008bda:	6878      	ldr	r0, [r7, #4]
 8008bdc:	f7ff ff3a 	bl	8008a54 <tcp_abandon>
}
 8008be0:	bf00      	nop
 8008be2:	3708      	adds	r7, #8
 8008be4:	46bd      	mov	sp, r7
 8008be6:	bd80      	pop	{r7, pc}

08008be8 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b088      	sub	sp, #32
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	60f8      	str	r0, [r7, #12]
 8008bf0:	60b9      	str	r1, [r7, #8]
 8008bf2:	4613      	mov	r3, r2
 8008bf4:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8008bf6:	2304      	movs	r3, #4
 8008bf8:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8008bfa:	68bb      	ldr	r3, [r7, #8]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d101      	bne.n	8008c04 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8008c00:	4b3e      	ldr	r3, [pc, #248]	; (8008cfc <tcp_bind+0x114>)
 8008c02:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d109      	bne.n	8008c1e <tcp_bind+0x36>
 8008c0a:	4b3d      	ldr	r3, [pc, #244]	; (8008d00 <tcp_bind+0x118>)
 8008c0c:	f240 22a9 	movw	r2, #681	; 0x2a9
 8008c10:	493c      	ldr	r1, [pc, #240]	; (8008d04 <tcp_bind+0x11c>)
 8008c12:	483d      	ldr	r0, [pc, #244]	; (8008d08 <tcp_bind+0x120>)
 8008c14:	f008 fc1c 	bl	8011450 <iprintf>
 8008c18:	f06f 030f 	mvn.w	r3, #15
 8008c1c:	e06a      	b.n	8008cf4 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	7d1b      	ldrb	r3, [r3, #20]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d009      	beq.n	8008c3a <tcp_bind+0x52>
 8008c26:	4b36      	ldr	r3, [pc, #216]	; (8008d00 <tcp_bind+0x118>)
 8008c28:	f240 22ab 	movw	r2, #683	; 0x2ab
 8008c2c:	4937      	ldr	r1, [pc, #220]	; (8008d0c <tcp_bind+0x124>)
 8008c2e:	4836      	ldr	r0, [pc, #216]	; (8008d08 <tcp_bind+0x120>)
 8008c30:	f008 fc0e 	bl	8011450 <iprintf>
 8008c34:	f06f 0305 	mvn.w	r3, #5
 8008c38:	e05c      	b.n	8008cf4 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 8008c3a:	88fb      	ldrh	r3, [r7, #6]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d109      	bne.n	8008c54 <tcp_bind+0x6c>
    port = tcp_new_port();
 8008c40:	f000 f9f0 	bl	8009024 <tcp_new_port>
 8008c44:	4603      	mov	r3, r0
 8008c46:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8008c48:	88fb      	ldrh	r3, [r7, #6]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d135      	bne.n	8008cba <tcp_bind+0xd2>
      return ERR_BUF;
 8008c4e:	f06f 0301 	mvn.w	r3, #1
 8008c52:	e04f      	b.n	8008cf4 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8008c54:	2300      	movs	r3, #0
 8008c56:	61fb      	str	r3, [r7, #28]
 8008c58:	e02b      	b.n	8008cb2 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8008c5a:	4a2d      	ldr	r2, [pc, #180]	; (8008d10 <tcp_bind+0x128>)
 8008c5c:	69fb      	ldr	r3, [r7, #28]
 8008c5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	61bb      	str	r3, [r7, #24]
 8008c66:	e01e      	b.n	8008ca6 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 8008c68:	69bb      	ldr	r3, [r7, #24]
 8008c6a:	8adb      	ldrh	r3, [r3, #22]
 8008c6c:	88fa      	ldrh	r2, [r7, #6]
 8008c6e:	429a      	cmp	r2, r3
 8008c70:	d116      	bne.n	8008ca0 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8008c72:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d010      	beq.n	8008c9a <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8008c78:	69bb      	ldr	r3, [r7, #24]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d00c      	beq.n	8008c9a <tcp_bind+0xb2>
 8008c80:	68bb      	ldr	r3, [r7, #8]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d009      	beq.n	8008c9a <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 8008c86:	68bb      	ldr	r3, [r7, #8]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d005      	beq.n	8008c9a <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8008c8e:	69bb      	ldr	r3, [r7, #24]
 8008c90:	681a      	ldr	r2, [r3, #0]
 8008c92:	68bb      	ldr	r3, [r7, #8]
 8008c94:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8008c96:	429a      	cmp	r2, r3
 8008c98:	d102      	bne.n	8008ca0 <tcp_bind+0xb8>
              return ERR_USE;
 8008c9a:	f06f 0307 	mvn.w	r3, #7
 8008c9e:	e029      	b.n	8008cf4 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8008ca0:	69bb      	ldr	r3, [r7, #24]
 8008ca2:	68db      	ldr	r3, [r3, #12]
 8008ca4:	61bb      	str	r3, [r7, #24]
 8008ca6:	69bb      	ldr	r3, [r7, #24]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d1dd      	bne.n	8008c68 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8008cac:	69fb      	ldr	r3, [r7, #28]
 8008cae:	3301      	adds	r3, #1
 8008cb0:	61fb      	str	r3, [r7, #28]
 8008cb2:	69fa      	ldr	r2, [r7, #28]
 8008cb4:	697b      	ldr	r3, [r7, #20]
 8008cb6:	429a      	cmp	r2, r3
 8008cb8:	dbcf      	blt.n	8008c5a <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 8008cba:	68bb      	ldr	r3, [r7, #8]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d00c      	beq.n	8008cda <tcp_bind+0xf2>
 8008cc0:	68bb      	ldr	r3, [r7, #8]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d008      	beq.n	8008cda <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8008cc8:	68bb      	ldr	r3, [r7, #8]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d002      	beq.n	8008cd4 <tcp_bind+0xec>
 8008cce:	68bb      	ldr	r3, [r7, #8]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	e000      	b.n	8008cd6 <tcp_bind+0xee>
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	68fa      	ldr	r2, [r7, #12]
 8008cd8:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	88fa      	ldrh	r2, [r7, #6]
 8008cde:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8008ce0:	4b0c      	ldr	r3, [pc, #48]	; (8008d14 <tcp_bind+0x12c>)
 8008ce2:	681a      	ldr	r2, [r3, #0]
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	60da      	str	r2, [r3, #12]
 8008ce8:	4a0a      	ldr	r2, [pc, #40]	; (8008d14 <tcp_bind+0x12c>)
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	6013      	str	r3, [r2, #0]
 8008cee:	f005 fccb 	bl	800e688 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8008cf2:	2300      	movs	r3, #0
}
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	3720      	adds	r7, #32
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	bd80      	pop	{r7, pc}
 8008cfc:	08017db0 	.word	0x08017db0
 8008d00:	0801402c 	.word	0x0801402c
 8008d04:	080141c0 	.word	0x080141c0
 8008d08:	08014070 	.word	0x08014070
 8008d0c:	080141d8 	.word	0x080141d8
 8008d10:	08017d88 	.word	0x08017d88
 8008d14:	2000d3ec 	.word	0x2000d3ec

08008d18 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b084      	sub	sp, #16
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	60f8      	str	r0, [r7, #12]
 8008d20:	60b9      	str	r1, [r7, #8]
 8008d22:	4613      	mov	r3, r2
 8008d24:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 8008d26:	68bb      	ldr	r3, [r7, #8]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d106      	bne.n	8008d3a <tcp_accept_null+0x22>
 8008d2c:	4b07      	ldr	r3, [pc, #28]	; (8008d4c <tcp_accept_null+0x34>)
 8008d2e:	f240 320f 	movw	r2, #783	; 0x30f
 8008d32:	4907      	ldr	r1, [pc, #28]	; (8008d50 <tcp_accept_null+0x38>)
 8008d34:	4807      	ldr	r0, [pc, #28]	; (8008d54 <tcp_accept_null+0x3c>)
 8008d36:	f008 fb8b 	bl	8011450 <iprintf>

  tcp_abort(pcb);
 8008d3a:	68b8      	ldr	r0, [r7, #8]
 8008d3c:	f7ff ff48 	bl	8008bd0 <tcp_abort>

  return ERR_ABRT;
 8008d40:	f06f 030c 	mvn.w	r3, #12
}
 8008d44:	4618      	mov	r0, r3
 8008d46:	3710      	adds	r7, #16
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	bd80      	pop	{r7, pc}
 8008d4c:	0801402c 	.word	0x0801402c
 8008d50:	08014200 	.word	0x08014200
 8008d54:	08014070 	.word	0x08014070

08008d58 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b082      	sub	sp, #8
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
 8008d60:	460b      	mov	r3, r1
 8008d62:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 8008d64:	78fb      	ldrb	r3, [r7, #3]
 8008d66:	2200      	movs	r2, #0
 8008d68:	4619      	mov	r1, r3
 8008d6a:	6878      	ldr	r0, [r7, #4]
 8008d6c:	f000 f806 	bl	8008d7c <tcp_listen_with_backlog_and_err>
 8008d70:	4603      	mov	r3, r0
}
 8008d72:	4618      	mov	r0, r3
 8008d74:	3708      	adds	r7, #8
 8008d76:	46bd      	mov	sp, r7
 8008d78:	bd80      	pop	{r7, pc}
	...

08008d7c <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b088      	sub	sp, #32
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	60f8      	str	r0, [r7, #12]
 8008d84:	460b      	mov	r3, r1
 8008d86:	607a      	str	r2, [r7, #4]
 8008d88:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d109      	bne.n	8008da8 <tcp_listen_with_backlog_and_err+0x2c>
 8008d94:	4b47      	ldr	r3, [pc, #284]	; (8008eb4 <tcp_listen_with_backlog_and_err+0x138>)
 8008d96:	f240 3259 	movw	r2, #857	; 0x359
 8008d9a:	4947      	ldr	r1, [pc, #284]	; (8008eb8 <tcp_listen_with_backlog_and_err+0x13c>)
 8008d9c:	4847      	ldr	r0, [pc, #284]	; (8008ebc <tcp_listen_with_backlog_and_err+0x140>)
 8008d9e:	f008 fb57 	bl	8011450 <iprintf>
 8008da2:	23f0      	movs	r3, #240	; 0xf0
 8008da4:	76fb      	strb	r3, [r7, #27]
 8008da6:	e079      	b.n	8008e9c <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	7d1b      	ldrb	r3, [r3, #20]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d009      	beq.n	8008dc4 <tcp_listen_with_backlog_and_err+0x48>
 8008db0:	4b40      	ldr	r3, [pc, #256]	; (8008eb4 <tcp_listen_with_backlog_and_err+0x138>)
 8008db2:	f240 325a 	movw	r2, #858	; 0x35a
 8008db6:	4942      	ldr	r1, [pc, #264]	; (8008ec0 <tcp_listen_with_backlog_and_err+0x144>)
 8008db8:	4840      	ldr	r0, [pc, #256]	; (8008ebc <tcp_listen_with_backlog_and_err+0x140>)
 8008dba:	f008 fb49 	bl	8011450 <iprintf>
 8008dbe:	23f1      	movs	r3, #241	; 0xf1
 8008dc0:	76fb      	strb	r3, [r7, #27]
 8008dc2:	e06b      	b.n	8008e9c <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	7d1b      	ldrb	r3, [r3, #20]
 8008dc8:	2b01      	cmp	r3, #1
 8008dca:	d104      	bne.n	8008dd6 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 8008dd0:	23f7      	movs	r3, #247	; 0xf7
 8008dd2:	76fb      	strb	r3, [r7, #27]
    goto done;
 8008dd4:	e062      	b.n	8008e9c <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8008dd6:	2002      	movs	r0, #2
 8008dd8:	f7fe fb14 	bl	8007404 <memp_malloc>
 8008ddc:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 8008dde:	69fb      	ldr	r3, [r7, #28]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d102      	bne.n	8008dea <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 8008de4:	23ff      	movs	r3, #255	; 0xff
 8008de6:	76fb      	strb	r3, [r7, #27]
    goto done;
 8008de8:	e058      	b.n	8008e9c <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	691a      	ldr	r2, [r3, #16]
 8008dee:	69fb      	ldr	r3, [r7, #28]
 8008df0:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	8ada      	ldrh	r2, [r3, #22]
 8008df6:	69fb      	ldr	r3, [r7, #28]
 8008df8:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 8008dfa:	69fb      	ldr	r3, [r7, #28]
 8008dfc:	2201      	movs	r2, #1
 8008dfe:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	7d5a      	ldrb	r2, [r3, #21]
 8008e04:	69fb      	ldr	r3, [r7, #28]
 8008e06:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	7a5a      	ldrb	r2, [r3, #9]
 8008e0c:	69fb      	ldr	r3, [r7, #28]
 8008e0e:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 8008e10:	69fb      	ldr	r3, [r7, #28]
 8008e12:	2200      	movs	r2, #0
 8008e14:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	7ada      	ldrb	r2, [r3, #11]
 8008e1a:	69fb      	ldr	r3, [r7, #28]
 8008e1c:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	7a9a      	ldrb	r2, [r3, #10]
 8008e22:	69fb      	ldr	r3, [r7, #28]
 8008e24:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	681a      	ldr	r2, [r3, #0]
 8008e2a:	69fb      	ldr	r3, [r7, #28]
 8008e2c:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	8adb      	ldrh	r3, [r3, #22]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d021      	beq.n	8008e7a <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8008e36:	4b23      	ldr	r3, [pc, #140]	; (8008ec4 <tcp_listen_with_backlog_and_err+0x148>)
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	68fa      	ldr	r2, [r7, #12]
 8008e3c:	429a      	cmp	r2, r3
 8008e3e:	d105      	bne.n	8008e4c <tcp_listen_with_backlog_and_err+0xd0>
 8008e40:	4b20      	ldr	r3, [pc, #128]	; (8008ec4 <tcp_listen_with_backlog_and_err+0x148>)
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	68db      	ldr	r3, [r3, #12]
 8008e46:	4a1f      	ldr	r2, [pc, #124]	; (8008ec4 <tcp_listen_with_backlog_and_err+0x148>)
 8008e48:	6013      	str	r3, [r2, #0]
 8008e4a:	e013      	b.n	8008e74 <tcp_listen_with_backlog_and_err+0xf8>
 8008e4c:	4b1d      	ldr	r3, [pc, #116]	; (8008ec4 <tcp_listen_with_backlog_and_err+0x148>)
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	617b      	str	r3, [r7, #20]
 8008e52:	e00c      	b.n	8008e6e <tcp_listen_with_backlog_and_err+0xf2>
 8008e54:	697b      	ldr	r3, [r7, #20]
 8008e56:	68db      	ldr	r3, [r3, #12]
 8008e58:	68fa      	ldr	r2, [r7, #12]
 8008e5a:	429a      	cmp	r2, r3
 8008e5c:	d104      	bne.n	8008e68 <tcp_listen_with_backlog_and_err+0xec>
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	68da      	ldr	r2, [r3, #12]
 8008e62:	697b      	ldr	r3, [r7, #20]
 8008e64:	60da      	str	r2, [r3, #12]
 8008e66:	e005      	b.n	8008e74 <tcp_listen_with_backlog_and_err+0xf8>
 8008e68:	697b      	ldr	r3, [r7, #20]
 8008e6a:	68db      	ldr	r3, [r3, #12]
 8008e6c:	617b      	str	r3, [r7, #20]
 8008e6e:	697b      	ldr	r3, [r7, #20]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d1ef      	bne.n	8008e54 <tcp_listen_with_backlog_and_err+0xd8>
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	2200      	movs	r2, #0
 8008e78:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 8008e7a:	68f8      	ldr	r0, [r7, #12]
 8008e7c:	f7ff fbc0 	bl	8008600 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8008e80:	69fb      	ldr	r3, [r7, #28]
 8008e82:	4a11      	ldr	r2, [pc, #68]	; (8008ec8 <tcp_listen_with_backlog_and_err+0x14c>)
 8008e84:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8008e86:	4b11      	ldr	r3, [pc, #68]	; (8008ecc <tcp_listen_with_backlog_and_err+0x150>)
 8008e88:	681a      	ldr	r2, [r3, #0]
 8008e8a:	69fb      	ldr	r3, [r7, #28]
 8008e8c:	60da      	str	r2, [r3, #12]
 8008e8e:	4a0f      	ldr	r2, [pc, #60]	; (8008ecc <tcp_listen_with_backlog_and_err+0x150>)
 8008e90:	69fb      	ldr	r3, [r7, #28]
 8008e92:	6013      	str	r3, [r2, #0]
 8008e94:	f005 fbf8 	bl	800e688 <tcp_timer_needed>
  res = ERR_OK;
 8008e98:	2300      	movs	r3, #0
 8008e9a:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d002      	beq.n	8008ea8 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	7efa      	ldrb	r2, [r7, #27]
 8008ea6:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8008ea8:	69fb      	ldr	r3, [r7, #28]
}
 8008eaa:	4618      	mov	r0, r3
 8008eac:	3720      	adds	r7, #32
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	bd80      	pop	{r7, pc}
 8008eb2:	bf00      	nop
 8008eb4:	0801402c 	.word	0x0801402c
 8008eb8:	08014220 	.word	0x08014220
 8008ebc:	08014070 	.word	0x08014070
 8008ec0:	08014250 	.word	0x08014250
 8008ec4:	2000d3ec 	.word	0x2000d3ec
 8008ec8:	08008d19 	.word	0x08008d19
 8008ecc:	2000d3e8 	.word	0x2000d3e8

08008ed0 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b084      	sub	sp, #16
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d106      	bne.n	8008eec <tcp_update_rcv_ann_wnd+0x1c>
 8008ede:	4b25      	ldr	r3, [pc, #148]	; (8008f74 <tcp_update_rcv_ann_wnd+0xa4>)
 8008ee0:	f240 32a6 	movw	r2, #934	; 0x3a6
 8008ee4:	4924      	ldr	r1, [pc, #144]	; (8008f78 <tcp_update_rcv_ann_wnd+0xa8>)
 8008ee6:	4825      	ldr	r0, [pc, #148]	; (8008f7c <tcp_update_rcv_ann_wnd+0xac>)
 8008ee8:	f008 fab2 	bl	8011450 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ef0:	687a      	ldr	r2, [r7, #4]
 8008ef2:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8008ef4:	4413      	add	r3, r2
 8008ef6:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008efc:	687a      	ldr	r2, [r7, #4]
 8008efe:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8008f00:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8008f04:	bf28      	it	cs
 8008f06:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8008f0a:	b292      	uxth	r2, r2
 8008f0c:	4413      	add	r3, r2
 8008f0e:	68fa      	ldr	r2, [r7, #12]
 8008f10:	1ad3      	subs	r3, r2, r3
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	db08      	blt.n	8008f28 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f22:	68fa      	ldr	r2, [r7, #12]
 8008f24:	1ad3      	subs	r3, r2, r3
 8008f26:	e020      	b.n	8008f6a <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f30:	1ad3      	subs	r3, r2, r3
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	dd03      	ble.n	8008f3e <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	2200      	movs	r2, #0
 8008f3a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008f3c:	e014      	b.n	8008f68 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f46:	1ad3      	subs	r3, r2, r3
 8008f48:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8008f4a:	68bb      	ldr	r3, [r7, #8]
 8008f4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f50:	d306      	bcc.n	8008f60 <tcp_update_rcv_ann_wnd+0x90>
 8008f52:	4b08      	ldr	r3, [pc, #32]	; (8008f74 <tcp_update_rcv_ann_wnd+0xa4>)
 8008f54:	f240 32b6 	movw	r2, #950	; 0x3b6
 8008f58:	4909      	ldr	r1, [pc, #36]	; (8008f80 <tcp_update_rcv_ann_wnd+0xb0>)
 8008f5a:	4808      	ldr	r0, [pc, #32]	; (8008f7c <tcp_update_rcv_ann_wnd+0xac>)
 8008f5c:	f008 fa78 	bl	8011450 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8008f60:	68bb      	ldr	r3, [r7, #8]
 8008f62:	b29a      	uxth	r2, r3
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8008f68:	2300      	movs	r3, #0
  }
}
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	3710      	adds	r7, #16
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	bd80      	pop	{r7, pc}
 8008f72:	bf00      	nop
 8008f74:	0801402c 	.word	0x0801402c
 8008f78:	08014288 	.word	0x08014288
 8008f7c:	08014070 	.word	0x08014070
 8008f80:	080142ac 	.word	0x080142ac

08008f84 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b084      	sub	sp, #16
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
 8008f8c:	460b      	mov	r3, r1
 8008f8e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d107      	bne.n	8008fa6 <tcp_recved+0x22>
 8008f96:	4b1f      	ldr	r3, [pc, #124]	; (8009014 <tcp_recved+0x90>)
 8008f98:	f240 32cf 	movw	r2, #975	; 0x3cf
 8008f9c:	491e      	ldr	r1, [pc, #120]	; (8009018 <tcp_recved+0x94>)
 8008f9e:	481f      	ldr	r0, [pc, #124]	; (800901c <tcp_recved+0x98>)
 8008fa0:	f008 fa56 	bl	8011450 <iprintf>
 8008fa4:	e032      	b.n	800900c <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	7d1b      	ldrb	r3, [r3, #20]
 8008faa:	2b01      	cmp	r3, #1
 8008fac:	d106      	bne.n	8008fbc <tcp_recved+0x38>
 8008fae:	4b19      	ldr	r3, [pc, #100]	; (8009014 <tcp_recved+0x90>)
 8008fb0:	f240 32d2 	movw	r2, #978	; 0x3d2
 8008fb4:	491a      	ldr	r1, [pc, #104]	; (8009020 <tcp_recved+0x9c>)
 8008fb6:	4819      	ldr	r0, [pc, #100]	; (800901c <tcp_recved+0x98>)
 8008fb8:	f008 fa4a 	bl	8011450 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8008fc0:	887b      	ldrh	r3, [r7, #2]
 8008fc2:	4413      	add	r3, r2
 8008fc4:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8008fc6:	89fb      	ldrh	r3, [r7, #14]
 8008fc8:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8008fcc:	d804      	bhi.n	8008fd8 <tcp_recved+0x54>
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008fd2:	89fa      	ldrh	r2, [r7, #14]
 8008fd4:	429a      	cmp	r2, r3
 8008fd6:	d204      	bcs.n	8008fe2 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8008fde:	851a      	strh	r2, [r3, #40]	; 0x28
 8008fe0:	e002      	b.n	8008fe8 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	89fa      	ldrh	r2, [r7, #14]
 8008fe6:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8008fe8:	6878      	ldr	r0, [r7, #4]
 8008fea:	f7ff ff71 	bl	8008ed0 <tcp_update_rcv_ann_wnd>
 8008fee:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8008ff0:	68bb      	ldr	r3, [r7, #8]
 8008ff2:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8008ff6:	d309      	bcc.n	800900c <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	8b5b      	ldrh	r3, [r3, #26]
 8008ffc:	f043 0302 	orr.w	r3, r3, #2
 8009000:	b29a      	uxth	r2, r3
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8009006:	6878      	ldr	r0, [r7, #4]
 8009008:	f004 fbc8 	bl	800d79c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800900c:	3710      	adds	r7, #16
 800900e:	46bd      	mov	sp, r7
 8009010:	bd80      	pop	{r7, pc}
 8009012:	bf00      	nop
 8009014:	0801402c 	.word	0x0801402c
 8009018:	080142c8 	.word	0x080142c8
 800901c:	08014070 	.word	0x08014070
 8009020:	080142e0 	.word	0x080142e0

08009024 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8009024:	b480      	push	{r7}
 8009026:	b083      	sub	sp, #12
 8009028:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800902a:	2300      	movs	r3, #0
 800902c:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800902e:	4b1e      	ldr	r3, [pc, #120]	; (80090a8 <tcp_new_port+0x84>)
 8009030:	881b      	ldrh	r3, [r3, #0]
 8009032:	3301      	adds	r3, #1
 8009034:	b29a      	uxth	r2, r3
 8009036:	4b1c      	ldr	r3, [pc, #112]	; (80090a8 <tcp_new_port+0x84>)
 8009038:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800903a:	4b1b      	ldr	r3, [pc, #108]	; (80090a8 <tcp_new_port+0x84>)
 800903c:	881b      	ldrh	r3, [r3, #0]
 800903e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009042:	4293      	cmp	r3, r2
 8009044:	d103      	bne.n	800904e <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8009046:	4b18      	ldr	r3, [pc, #96]	; (80090a8 <tcp_new_port+0x84>)
 8009048:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800904c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800904e:	2300      	movs	r3, #0
 8009050:	71fb      	strb	r3, [r7, #7]
 8009052:	e01e      	b.n	8009092 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8009054:	79fb      	ldrb	r3, [r7, #7]
 8009056:	4a15      	ldr	r2, [pc, #84]	; (80090ac <tcp_new_port+0x88>)
 8009058:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	603b      	str	r3, [r7, #0]
 8009060:	e011      	b.n	8009086 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	8ada      	ldrh	r2, [r3, #22]
 8009066:	4b10      	ldr	r3, [pc, #64]	; (80090a8 <tcp_new_port+0x84>)
 8009068:	881b      	ldrh	r3, [r3, #0]
 800906a:	429a      	cmp	r2, r3
 800906c:	d108      	bne.n	8009080 <tcp_new_port+0x5c>
        n++;
 800906e:	88bb      	ldrh	r3, [r7, #4]
 8009070:	3301      	adds	r3, #1
 8009072:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8009074:	88bb      	ldrh	r3, [r7, #4]
 8009076:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800907a:	d3d8      	bcc.n	800902e <tcp_new_port+0xa>
          return 0;
 800907c:	2300      	movs	r3, #0
 800907e:	e00d      	b.n	800909c <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8009080:	683b      	ldr	r3, [r7, #0]
 8009082:	68db      	ldr	r3, [r3, #12]
 8009084:	603b      	str	r3, [r7, #0]
 8009086:	683b      	ldr	r3, [r7, #0]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d1ea      	bne.n	8009062 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800908c:	79fb      	ldrb	r3, [r7, #7]
 800908e:	3301      	adds	r3, #1
 8009090:	71fb      	strb	r3, [r7, #7]
 8009092:	79fb      	ldrb	r3, [r7, #7]
 8009094:	2b03      	cmp	r3, #3
 8009096:	d9dd      	bls.n	8009054 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8009098:	4b03      	ldr	r3, [pc, #12]	; (80090a8 <tcp_new_port+0x84>)
 800909a:	881b      	ldrh	r3, [r3, #0]
}
 800909c:	4618      	mov	r0, r3
 800909e:	370c      	adds	r7, #12
 80090a0:	46bd      	mov	sp, r7
 80090a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a6:	4770      	bx	lr
 80090a8:	20000026 	.word	0x20000026
 80090ac:	08017d88 	.word	0x08017d88

080090b0 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 80090b0:	b5b0      	push	{r4, r5, r7, lr}
 80090b2:	b090      	sub	sp, #64	; 0x40
 80090b4:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 80090b6:	2300      	movs	r3, #0
 80090b8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 80090bc:	4b94      	ldr	r3, [pc, #592]	; (8009310 <tcp_slowtmr+0x260>)
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	3301      	adds	r3, #1
 80090c2:	4a93      	ldr	r2, [pc, #588]	; (8009310 <tcp_slowtmr+0x260>)
 80090c4:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 80090c6:	4b93      	ldr	r3, [pc, #588]	; (8009314 <tcp_slowtmr+0x264>)
 80090c8:	781b      	ldrb	r3, [r3, #0]
 80090ca:	3301      	adds	r3, #1
 80090cc:	b2da      	uxtb	r2, r3
 80090ce:	4b91      	ldr	r3, [pc, #580]	; (8009314 <tcp_slowtmr+0x264>)
 80090d0:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 80090d2:	2300      	movs	r3, #0
 80090d4:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 80090d6:	4b90      	ldr	r3, [pc, #576]	; (8009318 <tcp_slowtmr+0x268>)
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 80090dc:	e29f      	b.n	800961e <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80090de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090e0:	7d1b      	ldrb	r3, [r3, #20]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d106      	bne.n	80090f4 <tcp_slowtmr+0x44>
 80090e6:	4b8d      	ldr	r3, [pc, #564]	; (800931c <tcp_slowtmr+0x26c>)
 80090e8:	f240 42be 	movw	r2, #1214	; 0x4be
 80090ec:	498c      	ldr	r1, [pc, #560]	; (8009320 <tcp_slowtmr+0x270>)
 80090ee:	488d      	ldr	r0, [pc, #564]	; (8009324 <tcp_slowtmr+0x274>)
 80090f0:	f008 f9ae 	bl	8011450 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80090f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090f6:	7d1b      	ldrb	r3, [r3, #20]
 80090f8:	2b01      	cmp	r3, #1
 80090fa:	d106      	bne.n	800910a <tcp_slowtmr+0x5a>
 80090fc:	4b87      	ldr	r3, [pc, #540]	; (800931c <tcp_slowtmr+0x26c>)
 80090fe:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8009102:	4989      	ldr	r1, [pc, #548]	; (8009328 <tcp_slowtmr+0x278>)
 8009104:	4887      	ldr	r0, [pc, #540]	; (8009324 <tcp_slowtmr+0x274>)
 8009106:	f008 f9a3 	bl	8011450 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800910a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800910c:	7d1b      	ldrb	r3, [r3, #20]
 800910e:	2b0a      	cmp	r3, #10
 8009110:	d106      	bne.n	8009120 <tcp_slowtmr+0x70>
 8009112:	4b82      	ldr	r3, [pc, #520]	; (800931c <tcp_slowtmr+0x26c>)
 8009114:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8009118:	4984      	ldr	r1, [pc, #528]	; (800932c <tcp_slowtmr+0x27c>)
 800911a:	4882      	ldr	r0, [pc, #520]	; (8009324 <tcp_slowtmr+0x274>)
 800911c:	f008 f998 	bl	8011450 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8009120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009122:	7f9a      	ldrb	r2, [r3, #30]
 8009124:	4b7b      	ldr	r3, [pc, #492]	; (8009314 <tcp_slowtmr+0x264>)
 8009126:	781b      	ldrb	r3, [r3, #0]
 8009128:	429a      	cmp	r2, r3
 800912a:	d105      	bne.n	8009138 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800912c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800912e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8009130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009132:	68db      	ldr	r3, [r3, #12]
 8009134:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8009136:	e272      	b.n	800961e <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 8009138:	4b76      	ldr	r3, [pc, #472]	; (8009314 <tcp_slowtmr+0x264>)
 800913a:	781a      	ldrb	r2, [r3, #0]
 800913c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800913e:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8009140:	2300      	movs	r3, #0
 8009142:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8009146:	2300      	movs	r3, #0
 8009148:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800914c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800914e:	7d1b      	ldrb	r3, [r3, #20]
 8009150:	2b02      	cmp	r3, #2
 8009152:	d10a      	bne.n	800916a <tcp_slowtmr+0xba>
 8009154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009156:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800915a:	2b05      	cmp	r3, #5
 800915c:	d905      	bls.n	800916a <tcp_slowtmr+0xba>
      ++pcb_remove;
 800915e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009162:	3301      	adds	r3, #1
 8009164:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009168:	e11e      	b.n	80093a8 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800916a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800916c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009170:	2b0b      	cmp	r3, #11
 8009172:	d905      	bls.n	8009180 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8009174:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009178:	3301      	adds	r3, #1
 800917a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800917e:	e113      	b.n	80093a8 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8009180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009182:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8009186:	2b00      	cmp	r3, #0
 8009188:	d075      	beq.n	8009276 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800918a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800918c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800918e:	2b00      	cmp	r3, #0
 8009190:	d006      	beq.n	80091a0 <tcp_slowtmr+0xf0>
 8009192:	4b62      	ldr	r3, [pc, #392]	; (800931c <tcp_slowtmr+0x26c>)
 8009194:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8009198:	4965      	ldr	r1, [pc, #404]	; (8009330 <tcp_slowtmr+0x280>)
 800919a:	4862      	ldr	r0, [pc, #392]	; (8009324 <tcp_slowtmr+0x274>)
 800919c:	f008 f958 	bl	8011450 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 80091a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d106      	bne.n	80091b6 <tcp_slowtmr+0x106>
 80091a8:	4b5c      	ldr	r3, [pc, #368]	; (800931c <tcp_slowtmr+0x26c>)
 80091aa:	f240 42d5 	movw	r2, #1237	; 0x4d5
 80091ae:	4961      	ldr	r1, [pc, #388]	; (8009334 <tcp_slowtmr+0x284>)
 80091b0:	485c      	ldr	r0, [pc, #368]	; (8009324 <tcp_slowtmr+0x274>)
 80091b2:	f008 f94d 	bl	8011450 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 80091b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091b8:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80091bc:	2b0b      	cmp	r3, #11
 80091be:	d905      	bls.n	80091cc <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 80091c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80091c4:	3301      	adds	r3, #1
 80091c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80091ca:	e0ed      	b.n	80093a8 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 80091cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091ce:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80091d2:	3b01      	subs	r3, #1
 80091d4:	4a58      	ldr	r2, [pc, #352]	; (8009338 <tcp_slowtmr+0x288>)
 80091d6:	5cd3      	ldrb	r3, [r2, r3]
 80091d8:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 80091da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091dc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80091e0:	7c7a      	ldrb	r2, [r7, #17]
 80091e2:	429a      	cmp	r2, r3
 80091e4:	d907      	bls.n	80091f6 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 80091e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091e8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80091ec:	3301      	adds	r3, #1
 80091ee:	b2da      	uxtb	r2, r3
 80091f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091f2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 80091f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091f8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80091fc:	7c7a      	ldrb	r2, [r7, #17]
 80091fe:	429a      	cmp	r2, r3
 8009200:	f200 80d2 	bhi.w	80093a8 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8009204:	2301      	movs	r3, #1
 8009206:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8009208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800920a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800920e:	2b00      	cmp	r3, #0
 8009210:	d108      	bne.n	8009224 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8009212:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009214:	f005 f96a 	bl	800e4ec <tcp_zero_window_probe>
 8009218:	4603      	mov	r3, r0
 800921a:	2b00      	cmp	r3, #0
 800921c:	d014      	beq.n	8009248 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800921e:	2300      	movs	r3, #0
 8009220:	623b      	str	r3, [r7, #32]
 8009222:	e011      	b.n	8009248 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8009224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009226:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800922a:	4619      	mov	r1, r3
 800922c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800922e:	f004 f82f 	bl	800d290 <tcp_split_unsent_seg>
 8009232:	4603      	mov	r3, r0
 8009234:	2b00      	cmp	r3, #0
 8009236:	d107      	bne.n	8009248 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8009238:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800923a:	f004 faaf 	bl	800d79c <tcp_output>
 800923e:	4603      	mov	r3, r0
 8009240:	2b00      	cmp	r3, #0
 8009242:	d101      	bne.n	8009248 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8009244:	2300      	movs	r3, #0
 8009246:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8009248:	6a3b      	ldr	r3, [r7, #32]
 800924a:	2b00      	cmp	r3, #0
 800924c:	f000 80ac 	beq.w	80093a8 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8009250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009252:	2200      	movs	r2, #0
 8009254:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8009258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800925a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800925e:	2b06      	cmp	r3, #6
 8009260:	f200 80a2 	bhi.w	80093a8 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8009264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009266:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800926a:	3301      	adds	r3, #1
 800926c:	b2da      	uxtb	r2, r3
 800926e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009270:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8009274:	e098      	b.n	80093a8 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8009276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009278:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800927c:	2b00      	cmp	r3, #0
 800927e:	db0f      	blt.n	80092a0 <tcp_slowtmr+0x1f0>
 8009280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009282:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8009286:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800928a:	4293      	cmp	r3, r2
 800928c:	d008      	beq.n	80092a0 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800928e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009290:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8009294:	b29b      	uxth	r3, r3
 8009296:	3301      	adds	r3, #1
 8009298:	b29b      	uxth	r3, r3
 800929a:	b21a      	sxth	r2, r3
 800929c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800929e:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 80092a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092a2:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 80092a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092a8:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80092ac:	429a      	cmp	r2, r3
 80092ae:	db7b      	blt.n	80093a8 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 80092b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80092b2:	f004 fd65 	bl	800dd80 <tcp_rexmit_rto_prepare>
 80092b6:	4603      	mov	r3, r0
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d007      	beq.n	80092cc <tcp_slowtmr+0x21c>
 80092bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d171      	bne.n	80093a8 <tcp_slowtmr+0x2f8>
 80092c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d06d      	beq.n	80093a8 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 80092cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092ce:	7d1b      	ldrb	r3, [r3, #20]
 80092d0:	2b02      	cmp	r3, #2
 80092d2:	d03a      	beq.n	800934a <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 80092d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092d6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80092da:	2b0c      	cmp	r3, #12
 80092dc:	bf28      	it	cs
 80092de:	230c      	movcs	r3, #12
 80092e0:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80092e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092e4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80092e8:	10db      	asrs	r3, r3, #3
 80092ea:	b21b      	sxth	r3, r3
 80092ec:	461a      	mov	r2, r3
 80092ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092f0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80092f4:	4413      	add	r3, r2
 80092f6:	7efa      	ldrb	r2, [r7, #27]
 80092f8:	4910      	ldr	r1, [pc, #64]	; (800933c <tcp_slowtmr+0x28c>)
 80092fa:	5c8a      	ldrb	r2, [r1, r2]
 80092fc:	4093      	lsls	r3, r2
 80092fe:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8009300:	697b      	ldr	r3, [r7, #20]
 8009302:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8009306:	4293      	cmp	r3, r2
 8009308:	dc1a      	bgt.n	8009340 <tcp_slowtmr+0x290>
 800930a:	697b      	ldr	r3, [r7, #20]
 800930c:	b21a      	sxth	r2, r3
 800930e:	e019      	b.n	8009344 <tcp_slowtmr+0x294>
 8009310:	2000d3e4 	.word	0x2000d3e4
 8009314:	20000572 	.word	0x20000572
 8009318:	2000d3e0 	.word	0x2000d3e0
 800931c:	0801402c 	.word	0x0801402c
 8009320:	08014370 	.word	0x08014370
 8009324:	08014070 	.word	0x08014070
 8009328:	0801439c 	.word	0x0801439c
 800932c:	080143c8 	.word	0x080143c8
 8009330:	080143f8 	.word	0x080143f8
 8009334:	0801442c 	.word	0x0801442c
 8009338:	08017d80 	.word	0x08017d80
 800933c:	08017d70 	.word	0x08017d70
 8009340:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8009344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009346:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800934a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800934c:	2200      	movs	r2, #0
 800934e:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8009350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009352:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8009356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009358:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800935c:	4293      	cmp	r3, r2
 800935e:	bf28      	it	cs
 8009360:	4613      	movcs	r3, r2
 8009362:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8009364:	8a7b      	ldrh	r3, [r7, #18]
 8009366:	085b      	lsrs	r3, r3, #1
 8009368:	b29a      	uxth	r2, r3
 800936a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800936c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8009370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009372:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8009376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009378:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800937a:	005b      	lsls	r3, r3, #1
 800937c:	b29b      	uxth	r3, r3
 800937e:	429a      	cmp	r2, r3
 8009380:	d206      	bcs.n	8009390 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8009382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009384:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009386:	005b      	lsls	r3, r3, #1
 8009388:	b29a      	uxth	r2, r3
 800938a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800938c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8009390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009392:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8009394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009396:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800939a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800939c:	2200      	movs	r2, #0
 800939e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 80093a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80093a4:	f004 fd5c 	bl	800de60 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 80093a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093aa:	7d1b      	ldrb	r3, [r3, #20]
 80093ac:	2b06      	cmp	r3, #6
 80093ae:	d111      	bne.n	80093d4 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 80093b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093b2:	8b5b      	ldrh	r3, [r3, #26]
 80093b4:	f003 0310 	and.w	r3, r3, #16
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d00b      	beq.n	80093d4 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80093bc:	4b9d      	ldr	r3, [pc, #628]	; (8009634 <tcp_slowtmr+0x584>)
 80093be:	681a      	ldr	r2, [r3, #0]
 80093c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093c2:	6a1b      	ldr	r3, [r3, #32]
 80093c4:	1ad3      	subs	r3, r2, r3
 80093c6:	2b28      	cmp	r3, #40	; 0x28
 80093c8:	d904      	bls.n	80093d4 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 80093ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80093ce:	3301      	adds	r3, #1
 80093d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80093d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093d6:	7a5b      	ldrb	r3, [r3, #9]
 80093d8:	f003 0308 	and.w	r3, r3, #8
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d04c      	beq.n	800947a <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 80093e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093e2:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80093e4:	2b04      	cmp	r3, #4
 80093e6:	d003      	beq.n	80093f0 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 80093e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093ea:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 80093ec:	2b07      	cmp	r3, #7
 80093ee:	d144      	bne.n	800947a <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80093f0:	4b90      	ldr	r3, [pc, #576]	; (8009634 <tcp_slowtmr+0x584>)
 80093f2:	681a      	ldr	r2, [r3, #0]
 80093f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093f6:	6a1b      	ldr	r3, [r3, #32]
 80093f8:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80093fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009400:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 8009404:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8009408:	498b      	ldr	r1, [pc, #556]	; (8009638 <tcp_slowtmr+0x588>)
 800940a:	fba1 1303 	umull	r1, r3, r1, r3
 800940e:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009410:	429a      	cmp	r2, r3
 8009412:	d90a      	bls.n	800942a <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8009414:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009418:	3301      	adds	r3, #1
 800941a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800941e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009422:	3301      	adds	r3, #1
 8009424:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009428:	e027      	b.n	800947a <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800942a:	4b82      	ldr	r3, [pc, #520]	; (8009634 <tcp_slowtmr+0x584>)
 800942c:	681a      	ldr	r2, [r3, #0]
 800942e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009430:	6a1b      	ldr	r3, [r3, #32]
 8009432:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8009434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009436:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800943a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800943c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8009440:	4618      	mov	r0, r3
 8009442:	4b7e      	ldr	r3, [pc, #504]	; (800963c <tcp_slowtmr+0x58c>)
 8009444:	fb03 f300 	mul.w	r3, r3, r0
 8009448:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800944a:	497b      	ldr	r1, [pc, #492]	; (8009638 <tcp_slowtmr+0x588>)
 800944c:	fba1 1303 	umull	r1, r3, r1, r3
 8009450:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009452:	429a      	cmp	r2, r3
 8009454:	d911      	bls.n	800947a <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 8009456:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009458:	f005 f808 	bl	800e46c <tcp_keepalive>
 800945c:	4603      	mov	r3, r0
 800945e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8009462:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8009466:	2b00      	cmp	r3, #0
 8009468:	d107      	bne.n	800947a <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800946a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800946c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8009470:	3301      	adds	r3, #1
 8009472:	b2da      	uxtb	r2, r3
 8009474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009476:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800947a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800947c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800947e:	2b00      	cmp	r3, #0
 8009480:	d011      	beq.n	80094a6 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8009482:	4b6c      	ldr	r3, [pc, #432]	; (8009634 <tcp_slowtmr+0x584>)
 8009484:	681a      	ldr	r2, [r3, #0]
 8009486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009488:	6a1b      	ldr	r3, [r3, #32]
 800948a:	1ad2      	subs	r2, r2, r3
 800948c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800948e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8009492:	4619      	mov	r1, r3
 8009494:	460b      	mov	r3, r1
 8009496:	005b      	lsls	r3, r3, #1
 8009498:	440b      	add	r3, r1
 800949a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800949c:	429a      	cmp	r2, r3
 800949e:	d302      	bcc.n	80094a6 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 80094a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80094a2:	f000 fec7 	bl	800a234 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 80094a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094a8:	7d1b      	ldrb	r3, [r3, #20]
 80094aa:	2b03      	cmp	r3, #3
 80094ac:	d10b      	bne.n	80094c6 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80094ae:	4b61      	ldr	r3, [pc, #388]	; (8009634 <tcp_slowtmr+0x584>)
 80094b0:	681a      	ldr	r2, [r3, #0]
 80094b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094b4:	6a1b      	ldr	r3, [r3, #32]
 80094b6:	1ad3      	subs	r3, r2, r3
 80094b8:	2b28      	cmp	r3, #40	; 0x28
 80094ba:	d904      	bls.n	80094c6 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 80094bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80094c0:	3301      	adds	r3, #1
 80094c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 80094c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094c8:	7d1b      	ldrb	r3, [r3, #20]
 80094ca:	2b09      	cmp	r3, #9
 80094cc:	d10b      	bne.n	80094e6 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80094ce:	4b59      	ldr	r3, [pc, #356]	; (8009634 <tcp_slowtmr+0x584>)
 80094d0:	681a      	ldr	r2, [r3, #0]
 80094d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094d4:	6a1b      	ldr	r3, [r3, #32]
 80094d6:	1ad3      	subs	r3, r2, r3
 80094d8:	2bf0      	cmp	r3, #240	; 0xf0
 80094da:	d904      	bls.n	80094e6 <tcp_slowtmr+0x436>
        ++pcb_remove;
 80094dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80094e0:	3301      	adds	r3, #1
 80094e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80094e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d060      	beq.n	80095b0 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 80094ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80094f4:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 80094f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80094f8:	f000 fce8 	bl	8009ecc <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 80094fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d010      	beq.n	8009524 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8009502:	4b4f      	ldr	r3, [pc, #316]	; (8009640 <tcp_slowtmr+0x590>)
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009508:	429a      	cmp	r2, r3
 800950a:	d106      	bne.n	800951a <tcp_slowtmr+0x46a>
 800950c:	4b4d      	ldr	r3, [pc, #308]	; (8009644 <tcp_slowtmr+0x594>)
 800950e:	f240 526d 	movw	r2, #1389	; 0x56d
 8009512:	494d      	ldr	r1, [pc, #308]	; (8009648 <tcp_slowtmr+0x598>)
 8009514:	484d      	ldr	r0, [pc, #308]	; (800964c <tcp_slowtmr+0x59c>)
 8009516:	f007 ff9b 	bl	8011450 <iprintf>
        prev->next = pcb->next;
 800951a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800951c:	68da      	ldr	r2, [r3, #12]
 800951e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009520:	60da      	str	r2, [r3, #12]
 8009522:	e00f      	b.n	8009544 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8009524:	4b46      	ldr	r3, [pc, #280]	; (8009640 <tcp_slowtmr+0x590>)
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800952a:	429a      	cmp	r2, r3
 800952c:	d006      	beq.n	800953c <tcp_slowtmr+0x48c>
 800952e:	4b45      	ldr	r3, [pc, #276]	; (8009644 <tcp_slowtmr+0x594>)
 8009530:	f240 5271 	movw	r2, #1393	; 0x571
 8009534:	4946      	ldr	r1, [pc, #280]	; (8009650 <tcp_slowtmr+0x5a0>)
 8009536:	4845      	ldr	r0, [pc, #276]	; (800964c <tcp_slowtmr+0x59c>)
 8009538:	f007 ff8a 	bl	8011450 <iprintf>
        tcp_active_pcbs = pcb->next;
 800953c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800953e:	68db      	ldr	r3, [r3, #12]
 8009540:	4a3f      	ldr	r2, [pc, #252]	; (8009640 <tcp_slowtmr+0x590>)
 8009542:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8009544:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009548:	2b00      	cmp	r3, #0
 800954a:	d013      	beq.n	8009574 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800954c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800954e:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8009550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009552:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8009554:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8009556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009558:	3304      	adds	r3, #4
 800955a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800955c:	8ad2      	ldrh	r2, [r2, #22]
 800955e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009560:	8b09      	ldrh	r1, [r1, #24]
 8009562:	9102      	str	r1, [sp, #8]
 8009564:	9201      	str	r2, [sp, #4]
 8009566:	9300      	str	r3, [sp, #0]
 8009568:	462b      	mov	r3, r5
 800956a:	4622      	mov	r2, r4
 800956c:	4601      	mov	r1, r0
 800956e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009570:	f004 fec8 	bl	800e304 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8009574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009576:	691b      	ldr	r3, [r3, #16]
 8009578:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800957a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800957c:	7d1b      	ldrb	r3, [r3, #20]
 800957e:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8009580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009582:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8009584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009586:	68db      	ldr	r3, [r3, #12]
 8009588:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800958a:	6838      	ldr	r0, [r7, #0]
 800958c:	f7ff f838 	bl	8008600 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8009590:	4b30      	ldr	r3, [pc, #192]	; (8009654 <tcp_slowtmr+0x5a4>)
 8009592:	2200      	movs	r2, #0
 8009594:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d004      	beq.n	80095a6 <tcp_slowtmr+0x4f6>
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	f06f 010c 	mvn.w	r1, #12
 80095a2:	68b8      	ldr	r0, [r7, #8]
 80095a4:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 80095a6:	4b2b      	ldr	r3, [pc, #172]	; (8009654 <tcp_slowtmr+0x5a4>)
 80095a8:	781b      	ldrb	r3, [r3, #0]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d037      	beq.n	800961e <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 80095ae:	e590      	b.n	80090d2 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 80095b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095b2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80095b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095b6:	68db      	ldr	r3, [r3, #12]
 80095b8:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 80095ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095bc:	7f1b      	ldrb	r3, [r3, #28]
 80095be:	3301      	adds	r3, #1
 80095c0:	b2da      	uxtb	r2, r3
 80095c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095c4:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 80095c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095c8:	7f1a      	ldrb	r2, [r3, #28]
 80095ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095cc:	7f5b      	ldrb	r3, [r3, #29]
 80095ce:	429a      	cmp	r2, r3
 80095d0:	d325      	bcc.n	800961e <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 80095d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095d4:	2200      	movs	r2, #0
 80095d6:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 80095d8:	4b1e      	ldr	r3, [pc, #120]	; (8009654 <tcp_slowtmr+0x5a4>)
 80095da:	2200      	movs	r2, #0
 80095dc:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 80095de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d00b      	beq.n	8009600 <tcp_slowtmr+0x550>
 80095e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80095ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80095f0:	6912      	ldr	r2, [r2, #16]
 80095f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80095f4:	4610      	mov	r0, r2
 80095f6:	4798      	blx	r3
 80095f8:	4603      	mov	r3, r0
 80095fa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80095fe:	e002      	b.n	8009606 <tcp_slowtmr+0x556>
 8009600:	2300      	movs	r3, #0
 8009602:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8009606:	4b13      	ldr	r3, [pc, #76]	; (8009654 <tcp_slowtmr+0x5a4>)
 8009608:	781b      	ldrb	r3, [r3, #0]
 800960a:	2b00      	cmp	r3, #0
 800960c:	d000      	beq.n	8009610 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800960e:	e560      	b.n	80090d2 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8009610:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8009614:	2b00      	cmp	r3, #0
 8009616:	d102      	bne.n	800961e <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8009618:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800961a:	f004 f8bf 	bl	800d79c <tcp_output>
  while (pcb != NULL) {
 800961e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009620:	2b00      	cmp	r3, #0
 8009622:	f47f ad5c 	bne.w	80090de <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8009626:	2300      	movs	r3, #0
 8009628:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800962a:	4b0b      	ldr	r3, [pc, #44]	; (8009658 <tcp_slowtmr+0x5a8>)
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8009630:	e067      	b.n	8009702 <tcp_slowtmr+0x652>
 8009632:	bf00      	nop
 8009634:	2000d3e4 	.word	0x2000d3e4
 8009638:	10624dd3 	.word	0x10624dd3
 800963c:	000124f8 	.word	0x000124f8
 8009640:	2000d3e0 	.word	0x2000d3e0
 8009644:	0801402c 	.word	0x0801402c
 8009648:	08014464 	.word	0x08014464
 800964c:	08014070 	.word	0x08014070
 8009650:	08014490 	.word	0x08014490
 8009654:	2000d3dc 	.word	0x2000d3dc
 8009658:	2000d3f0 	.word	0x2000d3f0
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800965c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800965e:	7d1b      	ldrb	r3, [r3, #20]
 8009660:	2b0a      	cmp	r3, #10
 8009662:	d006      	beq.n	8009672 <tcp_slowtmr+0x5c2>
 8009664:	4b2b      	ldr	r3, [pc, #172]	; (8009714 <tcp_slowtmr+0x664>)
 8009666:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800966a:	492b      	ldr	r1, [pc, #172]	; (8009718 <tcp_slowtmr+0x668>)
 800966c:	482b      	ldr	r0, [pc, #172]	; (800971c <tcp_slowtmr+0x66c>)
 800966e:	f007 feef 	bl	8011450 <iprintf>
    pcb_remove = 0;
 8009672:	2300      	movs	r3, #0
 8009674:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8009678:	4b29      	ldr	r3, [pc, #164]	; (8009720 <tcp_slowtmr+0x670>)
 800967a:	681a      	ldr	r2, [r3, #0]
 800967c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800967e:	6a1b      	ldr	r3, [r3, #32]
 8009680:	1ad3      	subs	r3, r2, r3
 8009682:	2bf0      	cmp	r3, #240	; 0xf0
 8009684:	d904      	bls.n	8009690 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8009686:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800968a:	3301      	adds	r3, #1
 800968c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8009690:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009694:	2b00      	cmp	r3, #0
 8009696:	d02f      	beq.n	80096f8 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8009698:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800969a:	f000 fc17 	bl	8009ecc <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800969e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d010      	beq.n	80096c6 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 80096a4:	4b1f      	ldr	r3, [pc, #124]	; (8009724 <tcp_slowtmr+0x674>)
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80096aa:	429a      	cmp	r2, r3
 80096ac:	d106      	bne.n	80096bc <tcp_slowtmr+0x60c>
 80096ae:	4b19      	ldr	r3, [pc, #100]	; (8009714 <tcp_slowtmr+0x664>)
 80096b0:	f240 52af 	movw	r2, #1455	; 0x5af
 80096b4:	491c      	ldr	r1, [pc, #112]	; (8009728 <tcp_slowtmr+0x678>)
 80096b6:	4819      	ldr	r0, [pc, #100]	; (800971c <tcp_slowtmr+0x66c>)
 80096b8:	f007 feca 	bl	8011450 <iprintf>
        prev->next = pcb->next;
 80096bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096be:	68da      	ldr	r2, [r3, #12]
 80096c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096c2:	60da      	str	r2, [r3, #12]
 80096c4:	e00f      	b.n	80096e6 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 80096c6:	4b17      	ldr	r3, [pc, #92]	; (8009724 <tcp_slowtmr+0x674>)
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80096cc:	429a      	cmp	r2, r3
 80096ce:	d006      	beq.n	80096de <tcp_slowtmr+0x62e>
 80096d0:	4b10      	ldr	r3, [pc, #64]	; (8009714 <tcp_slowtmr+0x664>)
 80096d2:	f240 52b3 	movw	r2, #1459	; 0x5b3
 80096d6:	4915      	ldr	r1, [pc, #84]	; (800972c <tcp_slowtmr+0x67c>)
 80096d8:	4810      	ldr	r0, [pc, #64]	; (800971c <tcp_slowtmr+0x66c>)
 80096da:	f007 feb9 	bl	8011450 <iprintf>
        tcp_tw_pcbs = pcb->next;
 80096de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096e0:	68db      	ldr	r3, [r3, #12]
 80096e2:	4a10      	ldr	r2, [pc, #64]	; (8009724 <tcp_slowtmr+0x674>)
 80096e4:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 80096e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096e8:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 80096ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096ec:	68db      	ldr	r3, [r3, #12]
 80096ee:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80096f0:	69f8      	ldr	r0, [r7, #28]
 80096f2:	f7fe ff85 	bl	8008600 <tcp_free>
 80096f6:	e004      	b.n	8009702 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 80096f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096fa:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80096fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096fe:	68db      	ldr	r3, [r3, #12]
 8009700:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8009702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009704:	2b00      	cmp	r3, #0
 8009706:	d1a9      	bne.n	800965c <tcp_slowtmr+0x5ac>
    }
  }
}
 8009708:	bf00      	nop
 800970a:	bf00      	nop
 800970c:	3730      	adds	r7, #48	; 0x30
 800970e:	46bd      	mov	sp, r7
 8009710:	bdb0      	pop	{r4, r5, r7, pc}
 8009712:	bf00      	nop
 8009714:	0801402c 	.word	0x0801402c
 8009718:	080144bc 	.word	0x080144bc
 800971c:	08014070 	.word	0x08014070
 8009720:	2000d3e4 	.word	0x2000d3e4
 8009724:	2000d3f0 	.word	0x2000d3f0
 8009728:	080144ec 	.word	0x080144ec
 800972c:	08014514 	.word	0x08014514

08009730 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8009730:	b580      	push	{r7, lr}
 8009732:	b082      	sub	sp, #8
 8009734:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8009736:	4b2d      	ldr	r3, [pc, #180]	; (80097ec <tcp_fasttmr+0xbc>)
 8009738:	781b      	ldrb	r3, [r3, #0]
 800973a:	3301      	adds	r3, #1
 800973c:	b2da      	uxtb	r2, r3
 800973e:	4b2b      	ldr	r3, [pc, #172]	; (80097ec <tcp_fasttmr+0xbc>)
 8009740:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8009742:	4b2b      	ldr	r3, [pc, #172]	; (80097f0 <tcp_fasttmr+0xc0>)
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8009748:	e048      	b.n	80097dc <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	7f9a      	ldrb	r2, [r3, #30]
 800974e:	4b27      	ldr	r3, [pc, #156]	; (80097ec <tcp_fasttmr+0xbc>)
 8009750:	781b      	ldrb	r3, [r3, #0]
 8009752:	429a      	cmp	r2, r3
 8009754:	d03f      	beq.n	80097d6 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8009756:	4b25      	ldr	r3, [pc, #148]	; (80097ec <tcp_fasttmr+0xbc>)
 8009758:	781a      	ldrb	r2, [r3, #0]
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	8b5b      	ldrh	r3, [r3, #26]
 8009762:	f003 0301 	and.w	r3, r3, #1
 8009766:	2b00      	cmp	r3, #0
 8009768:	d010      	beq.n	800978c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	8b5b      	ldrh	r3, [r3, #26]
 800976e:	f043 0302 	orr.w	r3, r3, #2
 8009772:	b29a      	uxth	r2, r3
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8009778:	6878      	ldr	r0, [r7, #4]
 800977a:	f004 f80f 	bl	800d79c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	8b5b      	ldrh	r3, [r3, #26]
 8009782:	f023 0303 	bic.w	r3, r3, #3
 8009786:	b29a      	uxth	r2, r3
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	8b5b      	ldrh	r3, [r3, #26]
 8009790:	f003 0308 	and.w	r3, r3, #8
 8009794:	2b00      	cmp	r3, #0
 8009796:	d009      	beq.n	80097ac <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	8b5b      	ldrh	r3, [r3, #26]
 800979c:	f023 0308 	bic.w	r3, r3, #8
 80097a0:	b29a      	uxth	r2, r3
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 80097a6:	6878      	ldr	r0, [r7, #4]
 80097a8:	f7ff f8be 	bl	8008928 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	68db      	ldr	r3, [r3, #12]
 80097b0:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d00a      	beq.n	80097d0 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 80097ba:	4b0e      	ldr	r3, [pc, #56]	; (80097f4 <tcp_fasttmr+0xc4>)
 80097bc:	2200      	movs	r2, #0
 80097be:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 80097c0:	6878      	ldr	r0, [r7, #4]
 80097c2:	f000 f819 	bl	80097f8 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80097c6:	4b0b      	ldr	r3, [pc, #44]	; (80097f4 <tcp_fasttmr+0xc4>)
 80097c8:	781b      	ldrb	r3, [r3, #0]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d000      	beq.n	80097d0 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 80097ce:	e7b8      	b.n	8009742 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 80097d0:	683b      	ldr	r3, [r7, #0]
 80097d2:	607b      	str	r3, [r7, #4]
 80097d4:	e002      	b.n	80097dc <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	68db      	ldr	r3, [r3, #12]
 80097da:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d1b3      	bne.n	800974a <tcp_fasttmr+0x1a>
    }
  }
}
 80097e2:	bf00      	nop
 80097e4:	bf00      	nop
 80097e6:	3708      	adds	r7, #8
 80097e8:	46bd      	mov	sp, r7
 80097ea:	bd80      	pop	{r7, pc}
 80097ec:	20000572 	.word	0x20000572
 80097f0:	2000d3e0 	.word	0x2000d3e0
 80097f4:	2000d3dc 	.word	0x2000d3dc

080097f8 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 80097f8:	b590      	push	{r4, r7, lr}
 80097fa:	b085      	sub	sp, #20
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d109      	bne.n	800981a <tcp_process_refused_data+0x22>
 8009806:	4b37      	ldr	r3, [pc, #220]	; (80098e4 <tcp_process_refused_data+0xec>)
 8009808:	f240 6209 	movw	r2, #1545	; 0x609
 800980c:	4936      	ldr	r1, [pc, #216]	; (80098e8 <tcp_process_refused_data+0xf0>)
 800980e:	4837      	ldr	r0, [pc, #220]	; (80098ec <tcp_process_refused_data+0xf4>)
 8009810:	f007 fe1e 	bl	8011450 <iprintf>
 8009814:	f06f 030f 	mvn.w	r3, #15
 8009818:	e060      	b.n	80098dc <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800981e:	7b5b      	ldrb	r3, [r3, #13]
 8009820:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009826:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	2200      	movs	r2, #0
 800982c:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009834:	2b00      	cmp	r3, #0
 8009836:	d00b      	beq.n	8009850 <tcp_process_refused_data+0x58>
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	6918      	ldr	r0, [r3, #16]
 8009842:	2300      	movs	r3, #0
 8009844:	68ba      	ldr	r2, [r7, #8]
 8009846:	6879      	ldr	r1, [r7, #4]
 8009848:	47a0      	blx	r4
 800984a:	4603      	mov	r3, r0
 800984c:	73fb      	strb	r3, [r7, #15]
 800984e:	e007      	b.n	8009860 <tcp_process_refused_data+0x68>
 8009850:	2300      	movs	r3, #0
 8009852:	68ba      	ldr	r2, [r7, #8]
 8009854:	6879      	ldr	r1, [r7, #4]
 8009856:	2000      	movs	r0, #0
 8009858:	f000 f8c2 	bl	80099e0 <tcp_recv_null>
 800985c:	4603      	mov	r3, r0
 800985e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8009860:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009864:	2b00      	cmp	r3, #0
 8009866:	d12a      	bne.n	80098be <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8009868:	7bbb      	ldrb	r3, [r7, #14]
 800986a:	f003 0320 	and.w	r3, r3, #32
 800986e:	2b00      	cmp	r3, #0
 8009870:	d033      	beq.n	80098da <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009876:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800987a:	d005      	beq.n	8009888 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009880:	3301      	adds	r3, #1
 8009882:	b29a      	uxth	r2, r3
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800988e:	2b00      	cmp	r3, #0
 8009890:	d00b      	beq.n	80098aa <tcp_process_refused_data+0xb2>
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	6918      	ldr	r0, [r3, #16]
 800989c:	2300      	movs	r3, #0
 800989e:	2200      	movs	r2, #0
 80098a0:	6879      	ldr	r1, [r7, #4]
 80098a2:	47a0      	blx	r4
 80098a4:	4603      	mov	r3, r0
 80098a6:	73fb      	strb	r3, [r7, #15]
 80098a8:	e001      	b.n	80098ae <tcp_process_refused_data+0xb6>
 80098aa:	2300      	movs	r3, #0
 80098ac:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 80098ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80098b2:	f113 0f0d 	cmn.w	r3, #13
 80098b6:	d110      	bne.n	80098da <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 80098b8:	f06f 030c 	mvn.w	r3, #12
 80098bc:	e00e      	b.n	80098dc <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 80098be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80098c2:	f113 0f0d 	cmn.w	r3, #13
 80098c6:	d102      	bne.n	80098ce <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 80098c8:	f06f 030c 	mvn.w	r3, #12
 80098cc:	e006      	b.n	80098dc <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	68ba      	ldr	r2, [r7, #8]
 80098d2:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 80098d4:	f06f 0304 	mvn.w	r3, #4
 80098d8:	e000      	b.n	80098dc <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 80098da:	2300      	movs	r3, #0
}
 80098dc:	4618      	mov	r0, r3
 80098de:	3714      	adds	r7, #20
 80098e0:	46bd      	mov	sp, r7
 80098e2:	bd90      	pop	{r4, r7, pc}
 80098e4:	0801402c 	.word	0x0801402c
 80098e8:	0801453c 	.word	0x0801453c
 80098ec:	08014070 	.word	0x08014070

080098f0 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b084      	sub	sp, #16
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 80098f8:	e007      	b.n	800990a <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8009900:	6878      	ldr	r0, [r7, #4]
 8009902:	f000 f80a 	bl	800991a <tcp_seg_free>
    seg = next;
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	2b00      	cmp	r3, #0
 800990e:	d1f4      	bne.n	80098fa <tcp_segs_free+0xa>
  }
}
 8009910:	bf00      	nop
 8009912:	bf00      	nop
 8009914:	3710      	adds	r7, #16
 8009916:	46bd      	mov	sp, r7
 8009918:	bd80      	pop	{r7, pc}

0800991a <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800991a:	b580      	push	{r7, lr}
 800991c:	b082      	sub	sp, #8
 800991e:	af00      	add	r7, sp, #0
 8009920:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d00c      	beq.n	8009942 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	685b      	ldr	r3, [r3, #4]
 800992c:	2b00      	cmp	r3, #0
 800992e:	d004      	beq.n	800993a <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	685b      	ldr	r3, [r3, #4]
 8009934:	4618      	mov	r0, r3
 8009936:	f7fe fbc3 	bl	80080c0 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800993a:	6879      	ldr	r1, [r7, #4]
 800993c:	2003      	movs	r0, #3
 800993e:	f7fd fdad 	bl	800749c <memp_free>
  }
}
 8009942:	bf00      	nop
 8009944:	3708      	adds	r7, #8
 8009946:	46bd      	mov	sp, r7
 8009948:	bd80      	pop	{r7, pc}
	...

0800994c <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 800994c:	b580      	push	{r7, lr}
 800994e:	b082      	sub	sp, #8
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
 8009954:	460b      	mov	r3, r1
 8009956:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	2b00      	cmp	r3, #0
 800995c:	d107      	bne.n	800996e <tcp_setprio+0x22>
 800995e:	4b07      	ldr	r3, [pc, #28]	; (800997c <tcp_setprio+0x30>)
 8009960:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 8009964:	4906      	ldr	r1, [pc, #24]	; (8009980 <tcp_setprio+0x34>)
 8009966:	4807      	ldr	r0, [pc, #28]	; (8009984 <tcp_setprio+0x38>)
 8009968:	f007 fd72 	bl	8011450 <iprintf>
 800996c:	e002      	b.n	8009974 <tcp_setprio+0x28>

  pcb->prio = prio;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	78fa      	ldrb	r2, [r7, #3]
 8009972:	755a      	strb	r2, [r3, #21]
}
 8009974:	3708      	adds	r7, #8
 8009976:	46bd      	mov	sp, r7
 8009978:	bd80      	pop	{r7, pc}
 800997a:	bf00      	nop
 800997c:	0801402c 	.word	0x0801402c
 8009980:	08014564 	.word	0x08014564
 8009984:	08014070 	.word	0x08014070

08009988 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8009988:	b580      	push	{r7, lr}
 800998a:	b084      	sub	sp, #16
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	2b00      	cmp	r3, #0
 8009994:	d106      	bne.n	80099a4 <tcp_seg_copy+0x1c>
 8009996:	4b0f      	ldr	r3, [pc, #60]	; (80099d4 <tcp_seg_copy+0x4c>)
 8009998:	f240 6282 	movw	r2, #1666	; 0x682
 800999c:	490e      	ldr	r1, [pc, #56]	; (80099d8 <tcp_seg_copy+0x50>)
 800999e:	480f      	ldr	r0, [pc, #60]	; (80099dc <tcp_seg_copy+0x54>)
 80099a0:	f007 fd56 	bl	8011450 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 80099a4:	2003      	movs	r0, #3
 80099a6:	f7fd fd2d 	bl	8007404 <memp_malloc>
 80099aa:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d101      	bne.n	80099b6 <tcp_seg_copy+0x2e>
    return NULL;
 80099b2:	2300      	movs	r3, #0
 80099b4:	e00a      	b.n	80099cc <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80099b6:	2210      	movs	r2, #16
 80099b8:	6879      	ldr	r1, [r7, #4]
 80099ba:	68f8      	ldr	r0, [r7, #12]
 80099bc:	f007 fc6e 	bl	801129c <memcpy>
  pbuf_ref(cseg->p);
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	685b      	ldr	r3, [r3, #4]
 80099c4:	4618      	mov	r0, r3
 80099c6:	f7fe fc1b 	bl	8008200 <pbuf_ref>
  return cseg;
 80099ca:	68fb      	ldr	r3, [r7, #12]
}
 80099cc:	4618      	mov	r0, r3
 80099ce:	3710      	adds	r7, #16
 80099d0:	46bd      	mov	sp, r7
 80099d2:	bd80      	pop	{r7, pc}
 80099d4:	0801402c 	.word	0x0801402c
 80099d8:	08014580 	.word	0x08014580
 80099dc:	08014070 	.word	0x08014070

080099e0 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b084      	sub	sp, #16
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	60f8      	str	r0, [r7, #12]
 80099e8:	60b9      	str	r1, [r7, #8]
 80099ea:	607a      	str	r2, [r7, #4]
 80099ec:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 80099ee:	68bb      	ldr	r3, [r7, #8]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d109      	bne.n	8009a08 <tcp_recv_null+0x28>
 80099f4:	4b12      	ldr	r3, [pc, #72]	; (8009a40 <tcp_recv_null+0x60>)
 80099f6:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80099fa:	4912      	ldr	r1, [pc, #72]	; (8009a44 <tcp_recv_null+0x64>)
 80099fc:	4812      	ldr	r0, [pc, #72]	; (8009a48 <tcp_recv_null+0x68>)
 80099fe:	f007 fd27 	bl	8011450 <iprintf>
 8009a02:	f06f 030f 	mvn.w	r3, #15
 8009a06:	e016      	b.n	8009a36 <tcp_recv_null+0x56>

  if (p != NULL) {
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d009      	beq.n	8009a22 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	891b      	ldrh	r3, [r3, #8]
 8009a12:	4619      	mov	r1, r3
 8009a14:	68b8      	ldr	r0, [r7, #8]
 8009a16:	f7ff fab5 	bl	8008f84 <tcp_recved>
    pbuf_free(p);
 8009a1a:	6878      	ldr	r0, [r7, #4]
 8009a1c:	f7fe fb50 	bl	80080c0 <pbuf_free>
 8009a20:	e008      	b.n	8009a34 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8009a22:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d104      	bne.n	8009a34 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8009a2a:	68b8      	ldr	r0, [r7, #8]
 8009a2c:	f7fe ffe6 	bl	80089fc <tcp_close>
 8009a30:	4603      	mov	r3, r0
 8009a32:	e000      	b.n	8009a36 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8009a34:	2300      	movs	r3, #0
}
 8009a36:	4618      	mov	r0, r3
 8009a38:	3710      	adds	r7, #16
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	bd80      	pop	{r7, pc}
 8009a3e:	bf00      	nop
 8009a40:	0801402c 	.word	0x0801402c
 8009a44:	0801459c 	.word	0x0801459c
 8009a48:	08014070 	.word	0x08014070

08009a4c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b086      	sub	sp, #24
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	4603      	mov	r3, r0
 8009a54:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8009a56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	db01      	blt.n	8009a62 <tcp_kill_prio+0x16>
 8009a5e:	79fb      	ldrb	r3, [r7, #7]
 8009a60:	e000      	b.n	8009a64 <tcp_kill_prio+0x18>
 8009a62:	237f      	movs	r3, #127	; 0x7f
 8009a64:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8009a66:	7afb      	ldrb	r3, [r7, #11]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d034      	beq.n	8009ad6 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8009a6c:	7afb      	ldrb	r3, [r7, #11]
 8009a6e:	3b01      	subs	r3, #1
 8009a70:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8009a72:	2300      	movs	r3, #0
 8009a74:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8009a76:	2300      	movs	r3, #0
 8009a78:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009a7a:	4b19      	ldr	r3, [pc, #100]	; (8009ae0 <tcp_kill_prio+0x94>)
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	617b      	str	r3, [r7, #20]
 8009a80:	e01f      	b.n	8009ac2 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8009a82:	697b      	ldr	r3, [r7, #20]
 8009a84:	7d5b      	ldrb	r3, [r3, #21]
 8009a86:	7afa      	ldrb	r2, [r7, #11]
 8009a88:	429a      	cmp	r2, r3
 8009a8a:	d80c      	bhi.n	8009aa6 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8009a8c:	697b      	ldr	r3, [r7, #20]
 8009a8e:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8009a90:	7afa      	ldrb	r2, [r7, #11]
 8009a92:	429a      	cmp	r2, r3
 8009a94:	d112      	bne.n	8009abc <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8009a96:	4b13      	ldr	r3, [pc, #76]	; (8009ae4 <tcp_kill_prio+0x98>)
 8009a98:	681a      	ldr	r2, [r3, #0]
 8009a9a:	697b      	ldr	r3, [r7, #20]
 8009a9c:	6a1b      	ldr	r3, [r3, #32]
 8009a9e:	1ad3      	subs	r3, r2, r3
 8009aa0:	68fa      	ldr	r2, [r7, #12]
 8009aa2:	429a      	cmp	r2, r3
 8009aa4:	d80a      	bhi.n	8009abc <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8009aa6:	4b0f      	ldr	r3, [pc, #60]	; (8009ae4 <tcp_kill_prio+0x98>)
 8009aa8:	681a      	ldr	r2, [r3, #0]
 8009aaa:	697b      	ldr	r3, [r7, #20]
 8009aac:	6a1b      	ldr	r3, [r3, #32]
 8009aae:	1ad3      	subs	r3, r2, r3
 8009ab0:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8009ab2:	697b      	ldr	r3, [r7, #20]
 8009ab4:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8009ab6:	697b      	ldr	r3, [r7, #20]
 8009ab8:	7d5b      	ldrb	r3, [r3, #21]
 8009aba:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009abc:	697b      	ldr	r3, [r7, #20]
 8009abe:	68db      	ldr	r3, [r3, #12]
 8009ac0:	617b      	str	r3, [r7, #20]
 8009ac2:	697b      	ldr	r3, [r7, #20]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d1dc      	bne.n	8009a82 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8009ac8:	693b      	ldr	r3, [r7, #16]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d004      	beq.n	8009ad8 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8009ace:	6938      	ldr	r0, [r7, #16]
 8009ad0:	f7ff f87e 	bl	8008bd0 <tcp_abort>
 8009ad4:	e000      	b.n	8009ad8 <tcp_kill_prio+0x8c>
    return;
 8009ad6:	bf00      	nop
  }
}
 8009ad8:	3718      	adds	r7, #24
 8009ada:	46bd      	mov	sp, r7
 8009adc:	bd80      	pop	{r7, pc}
 8009ade:	bf00      	nop
 8009ae0:	2000d3e0 	.word	0x2000d3e0
 8009ae4:	2000d3e4 	.word	0x2000d3e4

08009ae8 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8009ae8:	b580      	push	{r7, lr}
 8009aea:	b086      	sub	sp, #24
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	4603      	mov	r3, r0
 8009af0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8009af2:	79fb      	ldrb	r3, [r7, #7]
 8009af4:	2b08      	cmp	r3, #8
 8009af6:	d009      	beq.n	8009b0c <tcp_kill_state+0x24>
 8009af8:	79fb      	ldrb	r3, [r7, #7]
 8009afa:	2b09      	cmp	r3, #9
 8009afc:	d006      	beq.n	8009b0c <tcp_kill_state+0x24>
 8009afe:	4b1a      	ldr	r3, [pc, #104]	; (8009b68 <tcp_kill_state+0x80>)
 8009b00:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8009b04:	4919      	ldr	r1, [pc, #100]	; (8009b6c <tcp_kill_state+0x84>)
 8009b06:	481a      	ldr	r0, [pc, #104]	; (8009b70 <tcp_kill_state+0x88>)
 8009b08:	f007 fca2 	bl	8011450 <iprintf>

  inactivity = 0;
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8009b10:	2300      	movs	r3, #0
 8009b12:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009b14:	4b17      	ldr	r3, [pc, #92]	; (8009b74 <tcp_kill_state+0x8c>)
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	617b      	str	r3, [r7, #20]
 8009b1a:	e017      	b.n	8009b4c <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8009b1c:	697b      	ldr	r3, [r7, #20]
 8009b1e:	7d1b      	ldrb	r3, [r3, #20]
 8009b20:	79fa      	ldrb	r2, [r7, #7]
 8009b22:	429a      	cmp	r2, r3
 8009b24:	d10f      	bne.n	8009b46 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8009b26:	4b14      	ldr	r3, [pc, #80]	; (8009b78 <tcp_kill_state+0x90>)
 8009b28:	681a      	ldr	r2, [r3, #0]
 8009b2a:	697b      	ldr	r3, [r7, #20]
 8009b2c:	6a1b      	ldr	r3, [r3, #32]
 8009b2e:	1ad3      	subs	r3, r2, r3
 8009b30:	68fa      	ldr	r2, [r7, #12]
 8009b32:	429a      	cmp	r2, r3
 8009b34:	d807      	bhi.n	8009b46 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8009b36:	4b10      	ldr	r3, [pc, #64]	; (8009b78 <tcp_kill_state+0x90>)
 8009b38:	681a      	ldr	r2, [r3, #0]
 8009b3a:	697b      	ldr	r3, [r7, #20]
 8009b3c:	6a1b      	ldr	r3, [r3, #32]
 8009b3e:	1ad3      	subs	r3, r2, r3
 8009b40:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8009b42:	697b      	ldr	r3, [r7, #20]
 8009b44:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009b46:	697b      	ldr	r3, [r7, #20]
 8009b48:	68db      	ldr	r3, [r3, #12]
 8009b4a:	617b      	str	r3, [r7, #20]
 8009b4c:	697b      	ldr	r3, [r7, #20]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d1e4      	bne.n	8009b1c <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8009b52:	693b      	ldr	r3, [r7, #16]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d003      	beq.n	8009b60 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8009b58:	2100      	movs	r1, #0
 8009b5a:	6938      	ldr	r0, [r7, #16]
 8009b5c:	f7fe ff7a 	bl	8008a54 <tcp_abandon>
  }
}
 8009b60:	bf00      	nop
 8009b62:	3718      	adds	r7, #24
 8009b64:	46bd      	mov	sp, r7
 8009b66:	bd80      	pop	{r7, pc}
 8009b68:	0801402c 	.word	0x0801402c
 8009b6c:	080145b8 	.word	0x080145b8
 8009b70:	08014070 	.word	0x08014070
 8009b74:	2000d3e0 	.word	0x2000d3e0
 8009b78:	2000d3e4 	.word	0x2000d3e4

08009b7c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	b084      	sub	sp, #16
 8009b80:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8009b82:	2300      	movs	r3, #0
 8009b84:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8009b86:	2300      	movs	r3, #0
 8009b88:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009b8a:	4b12      	ldr	r3, [pc, #72]	; (8009bd4 <tcp_kill_timewait+0x58>)
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	60fb      	str	r3, [r7, #12]
 8009b90:	e012      	b.n	8009bb8 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8009b92:	4b11      	ldr	r3, [pc, #68]	; (8009bd8 <tcp_kill_timewait+0x5c>)
 8009b94:	681a      	ldr	r2, [r3, #0]
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	6a1b      	ldr	r3, [r3, #32]
 8009b9a:	1ad3      	subs	r3, r2, r3
 8009b9c:	687a      	ldr	r2, [r7, #4]
 8009b9e:	429a      	cmp	r2, r3
 8009ba0:	d807      	bhi.n	8009bb2 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8009ba2:	4b0d      	ldr	r3, [pc, #52]	; (8009bd8 <tcp_kill_timewait+0x5c>)
 8009ba4:	681a      	ldr	r2, [r3, #0]
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	6a1b      	ldr	r3, [r3, #32]
 8009baa:	1ad3      	subs	r3, r2, r3
 8009bac:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	68db      	ldr	r3, [r3, #12]
 8009bb6:	60fb      	str	r3, [r7, #12]
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d1e9      	bne.n	8009b92 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8009bbe:	68bb      	ldr	r3, [r7, #8]
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d002      	beq.n	8009bca <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8009bc4:	68b8      	ldr	r0, [r7, #8]
 8009bc6:	f7ff f803 	bl	8008bd0 <tcp_abort>
  }
}
 8009bca:	bf00      	nop
 8009bcc:	3710      	adds	r7, #16
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	bd80      	pop	{r7, pc}
 8009bd2:	bf00      	nop
 8009bd4:	2000d3f0 	.word	0x2000d3f0
 8009bd8:	2000d3e4 	.word	0x2000d3e4

08009bdc <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8009bdc:	b580      	push	{r7, lr}
 8009bde:	b082      	sub	sp, #8
 8009be0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8009be2:	4b10      	ldr	r3, [pc, #64]	; (8009c24 <tcp_handle_closepend+0x48>)
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8009be8:	e014      	b.n	8009c14 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	68db      	ldr	r3, [r3, #12]
 8009bee:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	8b5b      	ldrh	r3, [r3, #26]
 8009bf4:	f003 0308 	and.w	r3, r3, #8
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d009      	beq.n	8009c10 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	8b5b      	ldrh	r3, [r3, #26]
 8009c00:	f023 0308 	bic.w	r3, r3, #8
 8009c04:	b29a      	uxth	r2, r3
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8009c0a:	6878      	ldr	r0, [r7, #4]
 8009c0c:	f7fe fe8c 	bl	8008928 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8009c10:	683b      	ldr	r3, [r7, #0]
 8009c12:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d1e7      	bne.n	8009bea <tcp_handle_closepend+0xe>
  }
}
 8009c1a:	bf00      	nop
 8009c1c:	bf00      	nop
 8009c1e:	3708      	adds	r7, #8
 8009c20:	46bd      	mov	sp, r7
 8009c22:	bd80      	pop	{r7, pc}
 8009c24:	2000d3e0 	.word	0x2000d3e0

08009c28 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	b084      	sub	sp, #16
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	4603      	mov	r3, r0
 8009c30:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009c32:	2001      	movs	r0, #1
 8009c34:	f7fd fbe6 	bl	8007404 <memp_malloc>
 8009c38:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d126      	bne.n	8009c8e <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8009c40:	f7ff ffcc 	bl	8009bdc <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8009c44:	f7ff ff9a 	bl	8009b7c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009c48:	2001      	movs	r0, #1
 8009c4a:	f7fd fbdb 	bl	8007404 <memp_malloc>
 8009c4e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d11b      	bne.n	8009c8e <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8009c56:	2009      	movs	r0, #9
 8009c58:	f7ff ff46 	bl	8009ae8 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009c5c:	2001      	movs	r0, #1
 8009c5e:	f7fd fbd1 	bl	8007404 <memp_malloc>
 8009c62:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d111      	bne.n	8009c8e <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8009c6a:	2008      	movs	r0, #8
 8009c6c:	f7ff ff3c 	bl	8009ae8 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009c70:	2001      	movs	r0, #1
 8009c72:	f7fd fbc7 	bl	8007404 <memp_malloc>
 8009c76:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d107      	bne.n	8009c8e <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8009c7e:	79fb      	ldrb	r3, [r7, #7]
 8009c80:	4618      	mov	r0, r3
 8009c82:	f7ff fee3 	bl	8009a4c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009c86:	2001      	movs	r0, #1
 8009c88:	f7fd fbbc 	bl	8007404 <memp_malloc>
 8009c8c:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d03f      	beq.n	8009d14 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8009c94:	229c      	movs	r2, #156	; 0x9c
 8009c96:	2100      	movs	r1, #0
 8009c98:	68f8      	ldr	r0, [r7, #12]
 8009c9a:	f007 fb27 	bl	80112ec <memset>
    pcb->prio = prio;
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	79fa      	ldrb	r2, [r7, #7]
 8009ca2:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8009caa:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8009cb4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	22ff      	movs	r2, #255	; 0xff
 8009cc2:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	f44f 7206 	mov.w	r2, #536	; 0x218
 8009cca:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	2206      	movs	r2, #6
 8009cd0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	2206      	movs	r2, #6
 8009cd8:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009ce0:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	2201      	movs	r2, #1
 8009ce6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8009cea:	4b0d      	ldr	r3, [pc, #52]	; (8009d20 <tcp_alloc+0xf8>)
 8009cec:	681a      	ldr	r2, [r3, #0]
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8009cf2:	4b0c      	ldr	r3, [pc, #48]	; (8009d24 <tcp_alloc+0xfc>)
 8009cf4:	781a      	ldrb	r2, [r3, #0]
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8009d00:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	4a08      	ldr	r2, [pc, #32]	; (8009d28 <tcp_alloc+0x100>)
 8009d08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	4a07      	ldr	r2, [pc, #28]	; (8009d2c <tcp_alloc+0x104>)
 8009d10:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8009d14:	68fb      	ldr	r3, [r7, #12]
}
 8009d16:	4618      	mov	r0, r3
 8009d18:	3710      	adds	r7, #16
 8009d1a:	46bd      	mov	sp, r7
 8009d1c:	bd80      	pop	{r7, pc}
 8009d1e:	bf00      	nop
 8009d20:	2000d3e4 	.word	0x2000d3e4
 8009d24:	20000572 	.word	0x20000572
 8009d28:	080099e1 	.word	0x080099e1
 8009d2c:	006ddd00 	.word	0x006ddd00

08009d30 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b084      	sub	sp, #16
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	4603      	mov	r3, r0
 8009d38:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8009d3a:	2040      	movs	r0, #64	; 0x40
 8009d3c:	f7ff ff74 	bl	8009c28 <tcp_alloc>
 8009d40:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8009d42:	68fb      	ldr	r3, [r7, #12]
}
 8009d44:	4618      	mov	r0, r3
 8009d46:	3710      	adds	r7, #16
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	bd80      	pop	{r7, pc}

08009d4c <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8009d4c:	b480      	push	{r7}
 8009d4e:	b083      	sub	sp, #12
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
 8009d54:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d002      	beq.n	8009d62 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	683a      	ldr	r2, [r7, #0]
 8009d60:	611a      	str	r2, [r3, #16]
  }
}
 8009d62:	bf00      	nop
 8009d64:	370c      	adds	r7, #12
 8009d66:	46bd      	mov	sp, r7
 8009d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6c:	4770      	bx	lr
	...

08009d70 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b082      	sub	sp, #8
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]
 8009d78:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d00e      	beq.n	8009d9e <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	7d1b      	ldrb	r3, [r3, #20]
 8009d84:	2b01      	cmp	r3, #1
 8009d86:	d106      	bne.n	8009d96 <tcp_recv+0x26>
 8009d88:	4b07      	ldr	r3, [pc, #28]	; (8009da8 <tcp_recv+0x38>)
 8009d8a:	f240 72df 	movw	r2, #2015	; 0x7df
 8009d8e:	4907      	ldr	r1, [pc, #28]	; (8009dac <tcp_recv+0x3c>)
 8009d90:	4807      	ldr	r0, [pc, #28]	; (8009db0 <tcp_recv+0x40>)
 8009d92:	f007 fb5d 	bl	8011450 <iprintf>
    pcb->recv = recv;
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	683a      	ldr	r2, [r7, #0]
 8009d9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 8009d9e:	bf00      	nop
 8009da0:	3708      	adds	r7, #8
 8009da2:	46bd      	mov	sp, r7
 8009da4:	bd80      	pop	{r7, pc}
 8009da6:	bf00      	nop
 8009da8:	0801402c 	.word	0x0801402c
 8009dac:	080145c8 	.word	0x080145c8
 8009db0:	08014070 	.word	0x08014070

08009db4 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8009db4:	b580      	push	{r7, lr}
 8009db6:	b082      	sub	sp, #8
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
 8009dbc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d00e      	beq.n	8009de2 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	7d1b      	ldrb	r3, [r3, #20]
 8009dc8:	2b01      	cmp	r3, #1
 8009dca:	d106      	bne.n	8009dda <tcp_sent+0x26>
 8009dcc:	4b07      	ldr	r3, [pc, #28]	; (8009dec <tcp_sent+0x38>)
 8009dce:	f240 72f3 	movw	r2, #2035	; 0x7f3
 8009dd2:	4907      	ldr	r1, [pc, #28]	; (8009df0 <tcp_sent+0x3c>)
 8009dd4:	4807      	ldr	r0, [pc, #28]	; (8009df4 <tcp_sent+0x40>)
 8009dd6:	f007 fb3b 	bl	8011450 <iprintf>
    pcb->sent = sent;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	683a      	ldr	r2, [r7, #0]
 8009dde:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 8009de2:	bf00      	nop
 8009de4:	3708      	adds	r7, #8
 8009de6:	46bd      	mov	sp, r7
 8009de8:	bd80      	pop	{r7, pc}
 8009dea:	bf00      	nop
 8009dec:	0801402c 	.word	0x0801402c
 8009df0:	080145f0 	.word	0x080145f0
 8009df4:	08014070 	.word	0x08014070

08009df8 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	b082      	sub	sp, #8
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
 8009e00:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d00e      	beq.n	8009e26 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	7d1b      	ldrb	r3, [r3, #20]
 8009e0c:	2b01      	cmp	r3, #1
 8009e0e:	d106      	bne.n	8009e1e <tcp_err+0x26>
 8009e10:	4b07      	ldr	r3, [pc, #28]	; (8009e30 <tcp_err+0x38>)
 8009e12:	f640 020d 	movw	r2, #2061	; 0x80d
 8009e16:	4907      	ldr	r1, [pc, #28]	; (8009e34 <tcp_err+0x3c>)
 8009e18:	4807      	ldr	r0, [pc, #28]	; (8009e38 <tcp_err+0x40>)
 8009e1a:	f007 fb19 	bl	8011450 <iprintf>
    pcb->errf = err;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	683a      	ldr	r2, [r7, #0]
 8009e22:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 8009e26:	bf00      	nop
 8009e28:	3708      	adds	r7, #8
 8009e2a:	46bd      	mov	sp, r7
 8009e2c:	bd80      	pop	{r7, pc}
 8009e2e:	bf00      	nop
 8009e30:	0801402c 	.word	0x0801402c
 8009e34:	08014618 	.word	0x08014618
 8009e38:	08014070 	.word	0x08014070

08009e3c <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8009e3c:	b480      	push	{r7}
 8009e3e:	b085      	sub	sp, #20
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]
 8009e44:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d008      	beq.n	8009e5e <tcp_accept+0x22>
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	7d1b      	ldrb	r3, [r3, #20]
 8009e50:	2b01      	cmp	r3, #1
 8009e52:	d104      	bne.n	8009e5e <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	683a      	ldr	r2, [r7, #0]
 8009e5c:	619a      	str	r2, [r3, #24]
  }
}
 8009e5e:	bf00      	nop
 8009e60:	3714      	adds	r7, #20
 8009e62:	46bd      	mov	sp, r7
 8009e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e68:	4770      	bx	lr
	...

08009e6c <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8009e6c:	b580      	push	{r7, lr}
 8009e6e:	b084      	sub	sp, #16
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	60f8      	str	r0, [r7, #12]
 8009e74:	60b9      	str	r1, [r7, #8]
 8009e76:	4613      	mov	r3, r2
 8009e78:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d107      	bne.n	8009e90 <tcp_poll+0x24>
 8009e80:	4b0e      	ldr	r3, [pc, #56]	; (8009ebc <tcp_poll+0x50>)
 8009e82:	f640 023d 	movw	r2, #2109	; 0x83d
 8009e86:	490e      	ldr	r1, [pc, #56]	; (8009ec0 <tcp_poll+0x54>)
 8009e88:	480e      	ldr	r0, [pc, #56]	; (8009ec4 <tcp_poll+0x58>)
 8009e8a:	f007 fae1 	bl	8011450 <iprintf>
 8009e8e:	e011      	b.n	8009eb4 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	7d1b      	ldrb	r3, [r3, #20]
 8009e94:	2b01      	cmp	r3, #1
 8009e96:	d106      	bne.n	8009ea6 <tcp_poll+0x3a>
 8009e98:	4b08      	ldr	r3, [pc, #32]	; (8009ebc <tcp_poll+0x50>)
 8009e9a:	f640 023e 	movw	r2, #2110	; 0x83e
 8009e9e:	490a      	ldr	r1, [pc, #40]	; (8009ec8 <tcp_poll+0x5c>)
 8009ea0:	4808      	ldr	r0, [pc, #32]	; (8009ec4 <tcp_poll+0x58>)
 8009ea2:	f007 fad5 	bl	8011450 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	68ba      	ldr	r2, [r7, #8]
 8009eaa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	79fa      	ldrb	r2, [r7, #7]
 8009eb2:	775a      	strb	r2, [r3, #29]
}
 8009eb4:	3710      	adds	r7, #16
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	bd80      	pop	{r7, pc}
 8009eba:	bf00      	nop
 8009ebc:	0801402c 	.word	0x0801402c
 8009ec0:	08014640 	.word	0x08014640
 8009ec4:	08014070 	.word	0x08014070
 8009ec8:	08014658 	.word	0x08014658

08009ecc <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8009ecc:	b580      	push	{r7, lr}
 8009ece:	b082      	sub	sp, #8
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d107      	bne.n	8009eea <tcp_pcb_purge+0x1e>
 8009eda:	4b21      	ldr	r3, [pc, #132]	; (8009f60 <tcp_pcb_purge+0x94>)
 8009edc:	f640 0251 	movw	r2, #2129	; 0x851
 8009ee0:	4920      	ldr	r1, [pc, #128]	; (8009f64 <tcp_pcb_purge+0x98>)
 8009ee2:	4821      	ldr	r0, [pc, #132]	; (8009f68 <tcp_pcb_purge+0x9c>)
 8009ee4:	f007 fab4 	bl	8011450 <iprintf>
 8009ee8:	e037      	b.n	8009f5a <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	7d1b      	ldrb	r3, [r3, #20]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d033      	beq.n	8009f5a <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8009ef6:	2b0a      	cmp	r3, #10
 8009ef8:	d02f      	beq.n	8009f5a <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8009efe:	2b01      	cmp	r3, #1
 8009f00:	d02b      	beq.n	8009f5a <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d007      	beq.n	8009f1a <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009f0e:	4618      	mov	r0, r3
 8009f10:	f7fe f8d6 	bl	80080c0 <pbuf_free>
      pcb->refused_data = NULL;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	2200      	movs	r2, #0
 8009f18:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d002      	beq.n	8009f28 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8009f22:	6878      	ldr	r0, [r7, #4]
 8009f24:	f000 f986 	bl	800a234 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009f2e:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009f34:	4618      	mov	r0, r3
 8009f36:	f7ff fcdb 	bl	80098f0 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f3e:	4618      	mov	r0, r3
 8009f40:	f7ff fcd6 	bl	80098f0 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	2200      	movs	r2, #0
 8009f48:	66da      	str	r2, [r3, #108]	; 0x6c
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	2200      	movs	r2, #0
 8009f56:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8009f5a:	3708      	adds	r7, #8
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	bd80      	pop	{r7, pc}
 8009f60:	0801402c 	.word	0x0801402c
 8009f64:	08014678 	.word	0x08014678
 8009f68:	08014070 	.word	0x08014070

08009f6c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8009f6c:	b580      	push	{r7, lr}
 8009f6e:	b084      	sub	sp, #16
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	6078      	str	r0, [r7, #4]
 8009f74:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8009f76:	683b      	ldr	r3, [r7, #0]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d106      	bne.n	8009f8a <tcp_pcb_remove+0x1e>
 8009f7c:	4b3e      	ldr	r3, [pc, #248]	; (800a078 <tcp_pcb_remove+0x10c>)
 8009f7e:	f640 0283 	movw	r2, #2179	; 0x883
 8009f82:	493e      	ldr	r1, [pc, #248]	; (800a07c <tcp_pcb_remove+0x110>)
 8009f84:	483e      	ldr	r0, [pc, #248]	; (800a080 <tcp_pcb_remove+0x114>)
 8009f86:	f007 fa63 	bl	8011450 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d106      	bne.n	8009f9e <tcp_pcb_remove+0x32>
 8009f90:	4b39      	ldr	r3, [pc, #228]	; (800a078 <tcp_pcb_remove+0x10c>)
 8009f92:	f640 0284 	movw	r2, #2180	; 0x884
 8009f96:	493b      	ldr	r1, [pc, #236]	; (800a084 <tcp_pcb_remove+0x118>)
 8009f98:	4839      	ldr	r0, [pc, #228]	; (800a080 <tcp_pcb_remove+0x114>)
 8009f9a:	f007 fa59 	bl	8011450 <iprintf>

  TCP_RMV(pcblist, pcb);
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	683a      	ldr	r2, [r7, #0]
 8009fa4:	429a      	cmp	r2, r3
 8009fa6:	d105      	bne.n	8009fb4 <tcp_pcb_remove+0x48>
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	68da      	ldr	r2, [r3, #12]
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	601a      	str	r2, [r3, #0]
 8009fb2:	e013      	b.n	8009fdc <tcp_pcb_remove+0x70>
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	60fb      	str	r3, [r7, #12]
 8009fba:	e00c      	b.n	8009fd6 <tcp_pcb_remove+0x6a>
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	68db      	ldr	r3, [r3, #12]
 8009fc0:	683a      	ldr	r2, [r7, #0]
 8009fc2:	429a      	cmp	r2, r3
 8009fc4:	d104      	bne.n	8009fd0 <tcp_pcb_remove+0x64>
 8009fc6:	683b      	ldr	r3, [r7, #0]
 8009fc8:	68da      	ldr	r2, [r3, #12]
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	60da      	str	r2, [r3, #12]
 8009fce:	e005      	b.n	8009fdc <tcp_pcb_remove+0x70>
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	68db      	ldr	r3, [r3, #12]
 8009fd4:	60fb      	str	r3, [r7, #12]
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d1ef      	bne.n	8009fbc <tcp_pcb_remove+0x50>
 8009fdc:	683b      	ldr	r3, [r7, #0]
 8009fde:	2200      	movs	r2, #0
 8009fe0:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8009fe2:	6838      	ldr	r0, [r7, #0]
 8009fe4:	f7ff ff72 	bl	8009ecc <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8009fe8:	683b      	ldr	r3, [r7, #0]
 8009fea:	7d1b      	ldrb	r3, [r3, #20]
 8009fec:	2b0a      	cmp	r3, #10
 8009fee:	d013      	beq.n	800a018 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8009ff0:	683b      	ldr	r3, [r7, #0]
 8009ff2:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8009ff4:	2b01      	cmp	r3, #1
 8009ff6:	d00f      	beq.n	800a018 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8009ff8:	683b      	ldr	r3, [r7, #0]
 8009ffa:	8b5b      	ldrh	r3, [r3, #26]
 8009ffc:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800a000:	2b00      	cmp	r3, #0
 800a002:	d009      	beq.n	800a018 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800a004:	683b      	ldr	r3, [r7, #0]
 800a006:	8b5b      	ldrh	r3, [r3, #26]
 800a008:	f043 0302 	orr.w	r3, r3, #2
 800a00c:	b29a      	uxth	r2, r3
 800a00e:	683b      	ldr	r3, [r7, #0]
 800a010:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800a012:	6838      	ldr	r0, [r7, #0]
 800a014:	f003 fbc2 	bl	800d79c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800a018:	683b      	ldr	r3, [r7, #0]
 800a01a:	7d1b      	ldrb	r3, [r3, #20]
 800a01c:	2b01      	cmp	r3, #1
 800a01e:	d020      	beq.n	800a062 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800a020:	683b      	ldr	r3, [r7, #0]
 800a022:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a024:	2b00      	cmp	r3, #0
 800a026:	d006      	beq.n	800a036 <tcp_pcb_remove+0xca>
 800a028:	4b13      	ldr	r3, [pc, #76]	; (800a078 <tcp_pcb_remove+0x10c>)
 800a02a:	f640 0293 	movw	r2, #2195	; 0x893
 800a02e:	4916      	ldr	r1, [pc, #88]	; (800a088 <tcp_pcb_remove+0x11c>)
 800a030:	4813      	ldr	r0, [pc, #76]	; (800a080 <tcp_pcb_remove+0x114>)
 800a032:	f007 fa0d 	bl	8011450 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800a036:	683b      	ldr	r3, [r7, #0]
 800a038:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d006      	beq.n	800a04c <tcp_pcb_remove+0xe0>
 800a03e:	4b0e      	ldr	r3, [pc, #56]	; (800a078 <tcp_pcb_remove+0x10c>)
 800a040:	f640 0294 	movw	r2, #2196	; 0x894
 800a044:	4911      	ldr	r1, [pc, #68]	; (800a08c <tcp_pcb_remove+0x120>)
 800a046:	480e      	ldr	r0, [pc, #56]	; (800a080 <tcp_pcb_remove+0x114>)
 800a048:	f007 fa02 	bl	8011450 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800a04c:	683b      	ldr	r3, [r7, #0]
 800a04e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a050:	2b00      	cmp	r3, #0
 800a052:	d006      	beq.n	800a062 <tcp_pcb_remove+0xf6>
 800a054:	4b08      	ldr	r3, [pc, #32]	; (800a078 <tcp_pcb_remove+0x10c>)
 800a056:	f640 0296 	movw	r2, #2198	; 0x896
 800a05a:	490d      	ldr	r1, [pc, #52]	; (800a090 <tcp_pcb_remove+0x124>)
 800a05c:	4808      	ldr	r0, [pc, #32]	; (800a080 <tcp_pcb_remove+0x114>)
 800a05e:	f007 f9f7 	bl	8011450 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800a062:	683b      	ldr	r3, [r7, #0]
 800a064:	2200      	movs	r2, #0
 800a066:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800a068:	683b      	ldr	r3, [r7, #0]
 800a06a:	2200      	movs	r2, #0
 800a06c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800a06e:	bf00      	nop
 800a070:	3710      	adds	r7, #16
 800a072:	46bd      	mov	sp, r7
 800a074:	bd80      	pop	{r7, pc}
 800a076:	bf00      	nop
 800a078:	0801402c 	.word	0x0801402c
 800a07c:	08014694 	.word	0x08014694
 800a080:	08014070 	.word	0x08014070
 800a084:	080146b0 	.word	0x080146b0
 800a088:	080146d0 	.word	0x080146d0
 800a08c:	080146e8 	.word	0x080146e8
 800a090:	08014704 	.word	0x08014704

0800a094 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800a094:	b580      	push	{r7, lr}
 800a096:	b082      	sub	sp, #8
 800a098:	af00      	add	r7, sp, #0
 800a09a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d106      	bne.n	800a0b0 <tcp_next_iss+0x1c>
 800a0a2:	4b0a      	ldr	r3, [pc, #40]	; (800a0cc <tcp_next_iss+0x38>)
 800a0a4:	f640 02af 	movw	r2, #2223	; 0x8af
 800a0a8:	4909      	ldr	r1, [pc, #36]	; (800a0d0 <tcp_next_iss+0x3c>)
 800a0aa:	480a      	ldr	r0, [pc, #40]	; (800a0d4 <tcp_next_iss+0x40>)
 800a0ac:	f007 f9d0 	bl	8011450 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800a0b0:	4b09      	ldr	r3, [pc, #36]	; (800a0d8 <tcp_next_iss+0x44>)
 800a0b2:	681a      	ldr	r2, [r3, #0]
 800a0b4:	4b09      	ldr	r3, [pc, #36]	; (800a0dc <tcp_next_iss+0x48>)
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	4413      	add	r3, r2
 800a0ba:	4a07      	ldr	r2, [pc, #28]	; (800a0d8 <tcp_next_iss+0x44>)
 800a0bc:	6013      	str	r3, [r2, #0]
  return iss;
 800a0be:	4b06      	ldr	r3, [pc, #24]	; (800a0d8 <tcp_next_iss+0x44>)
 800a0c0:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	3708      	adds	r7, #8
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	bd80      	pop	{r7, pc}
 800a0ca:	bf00      	nop
 800a0cc:	0801402c 	.word	0x0801402c
 800a0d0:	0801471c 	.word	0x0801471c
 800a0d4:	08014070 	.word	0x08014070
 800a0d8:	20000028 	.word	0x20000028
 800a0dc:	2000d3e4 	.word	0x2000d3e4

0800a0e0 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800a0e0:	b580      	push	{r7, lr}
 800a0e2:	b086      	sub	sp, #24
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	4603      	mov	r3, r0
 800a0e8:	60b9      	str	r1, [r7, #8]
 800a0ea:	607a      	str	r2, [r7, #4]
 800a0ec:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d106      	bne.n	800a102 <tcp_eff_send_mss_netif+0x22>
 800a0f4:	4b14      	ldr	r3, [pc, #80]	; (800a148 <tcp_eff_send_mss_netif+0x68>)
 800a0f6:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800a0fa:	4914      	ldr	r1, [pc, #80]	; (800a14c <tcp_eff_send_mss_netif+0x6c>)
 800a0fc:	4814      	ldr	r0, [pc, #80]	; (800a150 <tcp_eff_send_mss_netif+0x70>)
 800a0fe:	f007 f9a7 	bl	8011450 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800a102:	68bb      	ldr	r3, [r7, #8]
 800a104:	2b00      	cmp	r3, #0
 800a106:	d101      	bne.n	800a10c <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800a108:	89fb      	ldrh	r3, [r7, #14]
 800a10a:	e019      	b.n	800a140 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800a10c:	68bb      	ldr	r3, [r7, #8]
 800a10e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800a110:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800a112:	8afb      	ldrh	r3, [r7, #22]
 800a114:	2b00      	cmp	r3, #0
 800a116:	d012      	beq.n	800a13e <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800a118:	2328      	movs	r3, #40	; 0x28
 800a11a:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800a11c:	8afa      	ldrh	r2, [r7, #22]
 800a11e:	8abb      	ldrh	r3, [r7, #20]
 800a120:	429a      	cmp	r2, r3
 800a122:	d904      	bls.n	800a12e <tcp_eff_send_mss_netif+0x4e>
 800a124:	8afa      	ldrh	r2, [r7, #22]
 800a126:	8abb      	ldrh	r3, [r7, #20]
 800a128:	1ad3      	subs	r3, r2, r3
 800a12a:	b29b      	uxth	r3, r3
 800a12c:	e000      	b.n	800a130 <tcp_eff_send_mss_netif+0x50>
 800a12e:	2300      	movs	r3, #0
 800a130:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800a132:	8a7a      	ldrh	r2, [r7, #18]
 800a134:	89fb      	ldrh	r3, [r7, #14]
 800a136:	4293      	cmp	r3, r2
 800a138:	bf28      	it	cs
 800a13a:	4613      	movcs	r3, r2
 800a13c:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800a13e:	89fb      	ldrh	r3, [r7, #14]
}
 800a140:	4618      	mov	r0, r3
 800a142:	3718      	adds	r7, #24
 800a144:	46bd      	mov	sp, r7
 800a146:	bd80      	pop	{r7, pc}
 800a148:	0801402c 	.word	0x0801402c
 800a14c:	08014738 	.word	0x08014738
 800a150:	08014070 	.word	0x08014070

0800a154 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800a154:	b580      	push	{r7, lr}
 800a156:	b084      	sub	sp, #16
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
 800a15c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800a15e:	683b      	ldr	r3, [r7, #0]
 800a160:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	2b00      	cmp	r3, #0
 800a166:	d119      	bne.n	800a19c <tcp_netif_ip_addr_changed_pcblist+0x48>
 800a168:	4b10      	ldr	r3, [pc, #64]	; (800a1ac <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800a16a:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800a16e:	4910      	ldr	r1, [pc, #64]	; (800a1b0 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800a170:	4810      	ldr	r0, [pc, #64]	; (800a1b4 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800a172:	f007 f96d 	bl	8011450 <iprintf>

  while (pcb != NULL) {
 800a176:	e011      	b.n	800a19c <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	681a      	ldr	r2, [r3, #0]
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	429a      	cmp	r2, r3
 800a182:	d108      	bne.n	800a196 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	68db      	ldr	r3, [r3, #12]
 800a188:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800a18a:	68f8      	ldr	r0, [r7, #12]
 800a18c:	f7fe fd20 	bl	8008bd0 <tcp_abort>
      pcb = next;
 800a190:	68bb      	ldr	r3, [r7, #8]
 800a192:	60fb      	str	r3, [r7, #12]
 800a194:	e002      	b.n	800a19c <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	68db      	ldr	r3, [r3, #12]
 800a19a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d1ea      	bne.n	800a178 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800a1a2:	bf00      	nop
 800a1a4:	bf00      	nop
 800a1a6:	3710      	adds	r7, #16
 800a1a8:	46bd      	mov	sp, r7
 800a1aa:	bd80      	pop	{r7, pc}
 800a1ac:	0801402c 	.word	0x0801402c
 800a1b0:	08014760 	.word	0x08014760
 800a1b4:	08014070 	.word	0x08014070

0800a1b8 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800a1b8:	b580      	push	{r7, lr}
 800a1ba:	b084      	sub	sp, #16
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]
 800a1c0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d02a      	beq.n	800a21e <tcp_netif_ip_addr_changed+0x66>
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d026      	beq.n	800a21e <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800a1d0:	4b15      	ldr	r3, [pc, #84]	; (800a228 <tcp_netif_ip_addr_changed+0x70>)
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	4619      	mov	r1, r3
 800a1d6:	6878      	ldr	r0, [r7, #4]
 800a1d8:	f7ff ffbc 	bl	800a154 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800a1dc:	4b13      	ldr	r3, [pc, #76]	; (800a22c <tcp_netif_ip_addr_changed+0x74>)
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	4619      	mov	r1, r3
 800a1e2:	6878      	ldr	r0, [r7, #4]
 800a1e4:	f7ff ffb6 	bl	800a154 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800a1e8:	683b      	ldr	r3, [r7, #0]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d017      	beq.n	800a21e <tcp_netif_ip_addr_changed+0x66>
 800a1ee:	683b      	ldr	r3, [r7, #0]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d013      	beq.n	800a21e <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a1f6:	4b0e      	ldr	r3, [pc, #56]	; (800a230 <tcp_netif_ip_addr_changed+0x78>)
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	60fb      	str	r3, [r7, #12]
 800a1fc:	e00c      	b.n	800a218 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	681a      	ldr	r2, [r3, #0]
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	429a      	cmp	r2, r3
 800a208:	d103      	bne.n	800a212 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800a20a:	683b      	ldr	r3, [r7, #0]
 800a20c:	681a      	ldr	r2, [r3, #0]
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	68db      	ldr	r3, [r3, #12]
 800a216:	60fb      	str	r3, [r7, #12]
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d1ef      	bne.n	800a1fe <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800a21e:	bf00      	nop
 800a220:	3710      	adds	r7, #16
 800a222:	46bd      	mov	sp, r7
 800a224:	bd80      	pop	{r7, pc}
 800a226:	bf00      	nop
 800a228:	2000d3e0 	.word	0x2000d3e0
 800a22c:	2000d3ec 	.word	0x2000d3ec
 800a230:	2000d3e8 	.word	0x2000d3e8

0800a234 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800a234:	b580      	push	{r7, lr}
 800a236:	b082      	sub	sp, #8
 800a238:	af00      	add	r7, sp, #0
 800a23a:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a240:	2b00      	cmp	r3, #0
 800a242:	d007      	beq.n	800a254 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a248:	4618      	mov	r0, r3
 800a24a:	f7ff fb51 	bl	80098f0 <tcp_segs_free>
    pcb->ooseq = NULL;
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	2200      	movs	r2, #0
 800a252:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800a254:	bf00      	nop
 800a256:	3708      	adds	r7, #8
 800a258:	46bd      	mov	sp, r7
 800a25a:	bd80      	pop	{r7, pc}

0800a25c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800a25c:	b590      	push	{r4, r7, lr}
 800a25e:	b08d      	sub	sp, #52	; 0x34
 800a260:	af04      	add	r7, sp, #16
 800a262:	6078      	str	r0, [r7, #4]
 800a264:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d105      	bne.n	800a278 <tcp_input+0x1c>
 800a26c:	4b9b      	ldr	r3, [pc, #620]	; (800a4dc <tcp_input+0x280>)
 800a26e:	2283      	movs	r2, #131	; 0x83
 800a270:	499b      	ldr	r1, [pc, #620]	; (800a4e0 <tcp_input+0x284>)
 800a272:	489c      	ldr	r0, [pc, #624]	; (800a4e4 <tcp_input+0x288>)
 800a274:	f007 f8ec 	bl	8011450 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	685b      	ldr	r3, [r3, #4]
 800a27c:	4a9a      	ldr	r2, [pc, #616]	; (800a4e8 <tcp_input+0x28c>)
 800a27e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	895b      	ldrh	r3, [r3, #10]
 800a284:	2b13      	cmp	r3, #19
 800a286:	f240 83c4 	bls.w	800aa12 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800a28a:	4b98      	ldr	r3, [pc, #608]	; (800a4ec <tcp_input+0x290>)
 800a28c:	695b      	ldr	r3, [r3, #20]
 800a28e:	4a97      	ldr	r2, [pc, #604]	; (800a4ec <tcp_input+0x290>)
 800a290:	6812      	ldr	r2, [r2, #0]
 800a292:	4611      	mov	r1, r2
 800a294:	4618      	mov	r0, r3
 800a296:	f006 f86b 	bl	8010370 <ip4_addr_isbroadcast_u32>
 800a29a:	4603      	mov	r3, r0
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	f040 83ba 	bne.w	800aa16 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800a2a2:	4b92      	ldr	r3, [pc, #584]	; (800a4ec <tcp_input+0x290>)
 800a2a4:	695b      	ldr	r3, [r3, #20]
 800a2a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800a2aa:	2be0      	cmp	r3, #224	; 0xe0
 800a2ac:	f000 83b3 	beq.w	800aa16 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800a2b0:	4b8d      	ldr	r3, [pc, #564]	; (800a4e8 <tcp_input+0x28c>)
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	899b      	ldrh	r3, [r3, #12]
 800a2b6:	b29b      	uxth	r3, r3
 800a2b8:	4618      	mov	r0, r3
 800a2ba:	f7fc fb6f 	bl	800699c <lwip_htons>
 800a2be:	4603      	mov	r3, r0
 800a2c0:	0b1b      	lsrs	r3, r3, #12
 800a2c2:	b29b      	uxth	r3, r3
 800a2c4:	b2db      	uxtb	r3, r3
 800a2c6:	009b      	lsls	r3, r3, #2
 800a2c8:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800a2ca:	7cbb      	ldrb	r3, [r7, #18]
 800a2cc:	2b13      	cmp	r3, #19
 800a2ce:	f240 83a4 	bls.w	800aa1a <tcp_input+0x7be>
 800a2d2:	7cbb      	ldrb	r3, [r7, #18]
 800a2d4:	b29a      	uxth	r2, r3
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	891b      	ldrh	r3, [r3, #8]
 800a2da:	429a      	cmp	r2, r3
 800a2dc:	f200 839d 	bhi.w	800aa1a <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800a2e0:	7cbb      	ldrb	r3, [r7, #18]
 800a2e2:	b29b      	uxth	r3, r3
 800a2e4:	3b14      	subs	r3, #20
 800a2e6:	b29a      	uxth	r2, r3
 800a2e8:	4b81      	ldr	r3, [pc, #516]	; (800a4f0 <tcp_input+0x294>)
 800a2ea:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800a2ec:	4b81      	ldr	r3, [pc, #516]	; (800a4f4 <tcp_input+0x298>)
 800a2ee:	2200      	movs	r2, #0
 800a2f0:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	895a      	ldrh	r2, [r3, #10]
 800a2f6:	7cbb      	ldrb	r3, [r7, #18]
 800a2f8:	b29b      	uxth	r3, r3
 800a2fa:	429a      	cmp	r2, r3
 800a2fc:	d309      	bcc.n	800a312 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800a2fe:	4b7c      	ldr	r3, [pc, #496]	; (800a4f0 <tcp_input+0x294>)
 800a300:	881a      	ldrh	r2, [r3, #0]
 800a302:	4b7d      	ldr	r3, [pc, #500]	; (800a4f8 <tcp_input+0x29c>)
 800a304:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800a306:	7cbb      	ldrb	r3, [r7, #18]
 800a308:	4619      	mov	r1, r3
 800a30a:	6878      	ldr	r0, [r7, #4]
 800a30c:	f7fd fe52 	bl	8007fb4 <pbuf_remove_header>
 800a310:	e04e      	b.n	800a3b0 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	2b00      	cmp	r3, #0
 800a318:	d105      	bne.n	800a326 <tcp_input+0xca>
 800a31a:	4b70      	ldr	r3, [pc, #448]	; (800a4dc <tcp_input+0x280>)
 800a31c:	22c2      	movs	r2, #194	; 0xc2
 800a31e:	4977      	ldr	r1, [pc, #476]	; (800a4fc <tcp_input+0x2a0>)
 800a320:	4870      	ldr	r0, [pc, #448]	; (800a4e4 <tcp_input+0x288>)
 800a322:	f007 f895 	bl	8011450 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800a326:	2114      	movs	r1, #20
 800a328:	6878      	ldr	r0, [r7, #4]
 800a32a:	f7fd fe43 	bl	8007fb4 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	895a      	ldrh	r2, [r3, #10]
 800a332:	4b71      	ldr	r3, [pc, #452]	; (800a4f8 <tcp_input+0x29c>)
 800a334:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800a336:	4b6e      	ldr	r3, [pc, #440]	; (800a4f0 <tcp_input+0x294>)
 800a338:	881a      	ldrh	r2, [r3, #0]
 800a33a:	4b6f      	ldr	r3, [pc, #444]	; (800a4f8 <tcp_input+0x29c>)
 800a33c:	881b      	ldrh	r3, [r3, #0]
 800a33e:	1ad3      	subs	r3, r2, r3
 800a340:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800a342:	4b6d      	ldr	r3, [pc, #436]	; (800a4f8 <tcp_input+0x29c>)
 800a344:	881b      	ldrh	r3, [r3, #0]
 800a346:	4619      	mov	r1, r3
 800a348:	6878      	ldr	r0, [r7, #4]
 800a34a:	f7fd fe33 	bl	8007fb4 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	895b      	ldrh	r3, [r3, #10]
 800a354:	8a3a      	ldrh	r2, [r7, #16]
 800a356:	429a      	cmp	r2, r3
 800a358:	f200 8361 	bhi.w	800aa1e <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	685b      	ldr	r3, [r3, #4]
 800a362:	4a64      	ldr	r2, [pc, #400]	; (800a4f4 <tcp_input+0x298>)
 800a364:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	8a3a      	ldrh	r2, [r7, #16]
 800a36c:	4611      	mov	r1, r2
 800a36e:	4618      	mov	r0, r3
 800a370:	f7fd fe20 	bl	8007fb4 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	891a      	ldrh	r2, [r3, #8]
 800a378:	8a3b      	ldrh	r3, [r7, #16]
 800a37a:	1ad3      	subs	r3, r2, r3
 800a37c:	b29a      	uxth	r2, r3
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	895b      	ldrh	r3, [r3, #10]
 800a386:	2b00      	cmp	r3, #0
 800a388:	d005      	beq.n	800a396 <tcp_input+0x13a>
 800a38a:	4b54      	ldr	r3, [pc, #336]	; (800a4dc <tcp_input+0x280>)
 800a38c:	22df      	movs	r2, #223	; 0xdf
 800a38e:	495c      	ldr	r1, [pc, #368]	; (800a500 <tcp_input+0x2a4>)
 800a390:	4854      	ldr	r0, [pc, #336]	; (800a4e4 <tcp_input+0x288>)
 800a392:	f007 f85d 	bl	8011450 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	891a      	ldrh	r2, [r3, #8]
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	891b      	ldrh	r3, [r3, #8]
 800a3a0:	429a      	cmp	r2, r3
 800a3a2:	d005      	beq.n	800a3b0 <tcp_input+0x154>
 800a3a4:	4b4d      	ldr	r3, [pc, #308]	; (800a4dc <tcp_input+0x280>)
 800a3a6:	22e0      	movs	r2, #224	; 0xe0
 800a3a8:	4956      	ldr	r1, [pc, #344]	; (800a504 <tcp_input+0x2a8>)
 800a3aa:	484e      	ldr	r0, [pc, #312]	; (800a4e4 <tcp_input+0x288>)
 800a3ac:	f007 f850 	bl	8011450 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800a3b0:	4b4d      	ldr	r3, [pc, #308]	; (800a4e8 <tcp_input+0x28c>)
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	881b      	ldrh	r3, [r3, #0]
 800a3b6:	b29b      	uxth	r3, r3
 800a3b8:	4a4b      	ldr	r2, [pc, #300]	; (800a4e8 <tcp_input+0x28c>)
 800a3ba:	6814      	ldr	r4, [r2, #0]
 800a3bc:	4618      	mov	r0, r3
 800a3be:	f7fc faed 	bl	800699c <lwip_htons>
 800a3c2:	4603      	mov	r3, r0
 800a3c4:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800a3c6:	4b48      	ldr	r3, [pc, #288]	; (800a4e8 <tcp_input+0x28c>)
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	885b      	ldrh	r3, [r3, #2]
 800a3cc:	b29b      	uxth	r3, r3
 800a3ce:	4a46      	ldr	r2, [pc, #280]	; (800a4e8 <tcp_input+0x28c>)
 800a3d0:	6814      	ldr	r4, [r2, #0]
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	f7fc fae2 	bl	800699c <lwip_htons>
 800a3d8:	4603      	mov	r3, r0
 800a3da:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800a3dc:	4b42      	ldr	r3, [pc, #264]	; (800a4e8 <tcp_input+0x28c>)
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	685b      	ldr	r3, [r3, #4]
 800a3e2:	4a41      	ldr	r2, [pc, #260]	; (800a4e8 <tcp_input+0x28c>)
 800a3e4:	6814      	ldr	r4, [r2, #0]
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	f7fc faed 	bl	80069c6 <lwip_htonl>
 800a3ec:	4603      	mov	r3, r0
 800a3ee:	6063      	str	r3, [r4, #4]
 800a3f0:	6863      	ldr	r3, [r4, #4]
 800a3f2:	4a45      	ldr	r2, [pc, #276]	; (800a508 <tcp_input+0x2ac>)
 800a3f4:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800a3f6:	4b3c      	ldr	r3, [pc, #240]	; (800a4e8 <tcp_input+0x28c>)
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	689b      	ldr	r3, [r3, #8]
 800a3fc:	4a3a      	ldr	r2, [pc, #232]	; (800a4e8 <tcp_input+0x28c>)
 800a3fe:	6814      	ldr	r4, [r2, #0]
 800a400:	4618      	mov	r0, r3
 800a402:	f7fc fae0 	bl	80069c6 <lwip_htonl>
 800a406:	4603      	mov	r3, r0
 800a408:	60a3      	str	r3, [r4, #8]
 800a40a:	68a3      	ldr	r3, [r4, #8]
 800a40c:	4a3f      	ldr	r2, [pc, #252]	; (800a50c <tcp_input+0x2b0>)
 800a40e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800a410:	4b35      	ldr	r3, [pc, #212]	; (800a4e8 <tcp_input+0x28c>)
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	89db      	ldrh	r3, [r3, #14]
 800a416:	b29b      	uxth	r3, r3
 800a418:	4a33      	ldr	r2, [pc, #204]	; (800a4e8 <tcp_input+0x28c>)
 800a41a:	6814      	ldr	r4, [r2, #0]
 800a41c:	4618      	mov	r0, r3
 800a41e:	f7fc fabd 	bl	800699c <lwip_htons>
 800a422:	4603      	mov	r3, r0
 800a424:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800a426:	4b30      	ldr	r3, [pc, #192]	; (800a4e8 <tcp_input+0x28c>)
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	899b      	ldrh	r3, [r3, #12]
 800a42c:	b29b      	uxth	r3, r3
 800a42e:	4618      	mov	r0, r3
 800a430:	f7fc fab4 	bl	800699c <lwip_htons>
 800a434:	4603      	mov	r3, r0
 800a436:	b2db      	uxtb	r3, r3
 800a438:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a43c:	b2da      	uxtb	r2, r3
 800a43e:	4b34      	ldr	r3, [pc, #208]	; (800a510 <tcp_input+0x2b4>)
 800a440:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	891a      	ldrh	r2, [r3, #8]
 800a446:	4b33      	ldr	r3, [pc, #204]	; (800a514 <tcp_input+0x2b8>)
 800a448:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800a44a:	4b31      	ldr	r3, [pc, #196]	; (800a510 <tcp_input+0x2b4>)
 800a44c:	781b      	ldrb	r3, [r3, #0]
 800a44e:	f003 0303 	and.w	r3, r3, #3
 800a452:	2b00      	cmp	r3, #0
 800a454:	d00c      	beq.n	800a470 <tcp_input+0x214>
    tcplen++;
 800a456:	4b2f      	ldr	r3, [pc, #188]	; (800a514 <tcp_input+0x2b8>)
 800a458:	881b      	ldrh	r3, [r3, #0]
 800a45a:	3301      	adds	r3, #1
 800a45c:	b29a      	uxth	r2, r3
 800a45e:	4b2d      	ldr	r3, [pc, #180]	; (800a514 <tcp_input+0x2b8>)
 800a460:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	891a      	ldrh	r2, [r3, #8]
 800a466:	4b2b      	ldr	r3, [pc, #172]	; (800a514 <tcp_input+0x2b8>)
 800a468:	881b      	ldrh	r3, [r3, #0]
 800a46a:	429a      	cmp	r2, r3
 800a46c:	f200 82d9 	bhi.w	800aa22 <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800a470:	2300      	movs	r3, #0
 800a472:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a474:	4b28      	ldr	r3, [pc, #160]	; (800a518 <tcp_input+0x2bc>)
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	61fb      	str	r3, [r7, #28]
 800a47a:	e09d      	b.n	800a5b8 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800a47c:	69fb      	ldr	r3, [r7, #28]
 800a47e:	7d1b      	ldrb	r3, [r3, #20]
 800a480:	2b00      	cmp	r3, #0
 800a482:	d105      	bne.n	800a490 <tcp_input+0x234>
 800a484:	4b15      	ldr	r3, [pc, #84]	; (800a4dc <tcp_input+0x280>)
 800a486:	22fb      	movs	r2, #251	; 0xfb
 800a488:	4924      	ldr	r1, [pc, #144]	; (800a51c <tcp_input+0x2c0>)
 800a48a:	4816      	ldr	r0, [pc, #88]	; (800a4e4 <tcp_input+0x288>)
 800a48c:	f006 ffe0 	bl	8011450 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800a490:	69fb      	ldr	r3, [r7, #28]
 800a492:	7d1b      	ldrb	r3, [r3, #20]
 800a494:	2b0a      	cmp	r3, #10
 800a496:	d105      	bne.n	800a4a4 <tcp_input+0x248>
 800a498:	4b10      	ldr	r3, [pc, #64]	; (800a4dc <tcp_input+0x280>)
 800a49a:	22fc      	movs	r2, #252	; 0xfc
 800a49c:	4920      	ldr	r1, [pc, #128]	; (800a520 <tcp_input+0x2c4>)
 800a49e:	4811      	ldr	r0, [pc, #68]	; (800a4e4 <tcp_input+0x288>)
 800a4a0:	f006 ffd6 	bl	8011450 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800a4a4:	69fb      	ldr	r3, [r7, #28]
 800a4a6:	7d1b      	ldrb	r3, [r3, #20]
 800a4a8:	2b01      	cmp	r3, #1
 800a4aa:	d105      	bne.n	800a4b8 <tcp_input+0x25c>
 800a4ac:	4b0b      	ldr	r3, [pc, #44]	; (800a4dc <tcp_input+0x280>)
 800a4ae:	22fd      	movs	r2, #253	; 0xfd
 800a4b0:	491c      	ldr	r1, [pc, #112]	; (800a524 <tcp_input+0x2c8>)
 800a4b2:	480c      	ldr	r0, [pc, #48]	; (800a4e4 <tcp_input+0x288>)
 800a4b4:	f006 ffcc 	bl	8011450 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a4b8:	69fb      	ldr	r3, [r7, #28]
 800a4ba:	7a1b      	ldrb	r3, [r3, #8]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d033      	beq.n	800a528 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a4c0:	69fb      	ldr	r3, [r7, #28]
 800a4c2:	7a1a      	ldrb	r2, [r3, #8]
 800a4c4:	4b09      	ldr	r3, [pc, #36]	; (800a4ec <tcp_input+0x290>)
 800a4c6:	685b      	ldr	r3, [r3, #4]
 800a4c8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a4cc:	3301      	adds	r3, #1
 800a4ce:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a4d0:	429a      	cmp	r2, r3
 800a4d2:	d029      	beq.n	800a528 <tcp_input+0x2cc>
      prev = pcb;
 800a4d4:	69fb      	ldr	r3, [r7, #28]
 800a4d6:	61bb      	str	r3, [r7, #24]
      continue;
 800a4d8:	e06b      	b.n	800a5b2 <tcp_input+0x356>
 800a4da:	bf00      	nop
 800a4dc:	08014794 	.word	0x08014794
 800a4e0:	080147c8 	.word	0x080147c8
 800a4e4:	080147e0 	.word	0x080147e0
 800a4e8:	20000584 	.word	0x20000584
 800a4ec:	20003ddc 	.word	0x20003ddc
 800a4f0:	20000588 	.word	0x20000588
 800a4f4:	2000058c 	.word	0x2000058c
 800a4f8:	2000058a 	.word	0x2000058a
 800a4fc:	08014808 	.word	0x08014808
 800a500:	08014818 	.word	0x08014818
 800a504:	08014824 	.word	0x08014824
 800a508:	20000594 	.word	0x20000594
 800a50c:	20000598 	.word	0x20000598
 800a510:	200005a0 	.word	0x200005a0
 800a514:	2000059e 	.word	0x2000059e
 800a518:	2000d3e0 	.word	0x2000d3e0
 800a51c:	08014844 	.word	0x08014844
 800a520:	0801486c 	.word	0x0801486c
 800a524:	08014898 	.word	0x08014898
    }

    if (pcb->remote_port == tcphdr->src &&
 800a528:	69fb      	ldr	r3, [r7, #28]
 800a52a:	8b1a      	ldrh	r2, [r3, #24]
 800a52c:	4b94      	ldr	r3, [pc, #592]	; (800a780 <tcp_input+0x524>)
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	881b      	ldrh	r3, [r3, #0]
 800a532:	b29b      	uxth	r3, r3
 800a534:	429a      	cmp	r2, r3
 800a536:	d13a      	bne.n	800a5ae <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800a538:	69fb      	ldr	r3, [r7, #28]
 800a53a:	8ada      	ldrh	r2, [r3, #22]
 800a53c:	4b90      	ldr	r3, [pc, #576]	; (800a780 <tcp_input+0x524>)
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	885b      	ldrh	r3, [r3, #2]
 800a542:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800a544:	429a      	cmp	r2, r3
 800a546:	d132      	bne.n	800a5ae <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a548:	69fb      	ldr	r3, [r7, #28]
 800a54a:	685a      	ldr	r2, [r3, #4]
 800a54c:	4b8d      	ldr	r3, [pc, #564]	; (800a784 <tcp_input+0x528>)
 800a54e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800a550:	429a      	cmp	r2, r3
 800a552:	d12c      	bne.n	800a5ae <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800a554:	69fb      	ldr	r3, [r7, #28]
 800a556:	681a      	ldr	r2, [r3, #0]
 800a558:	4b8a      	ldr	r3, [pc, #552]	; (800a784 <tcp_input+0x528>)
 800a55a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a55c:	429a      	cmp	r2, r3
 800a55e:	d126      	bne.n	800a5ae <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800a560:	69fb      	ldr	r3, [r7, #28]
 800a562:	68db      	ldr	r3, [r3, #12]
 800a564:	69fa      	ldr	r2, [r7, #28]
 800a566:	429a      	cmp	r2, r3
 800a568:	d106      	bne.n	800a578 <tcp_input+0x31c>
 800a56a:	4b87      	ldr	r3, [pc, #540]	; (800a788 <tcp_input+0x52c>)
 800a56c:	f240 120d 	movw	r2, #269	; 0x10d
 800a570:	4986      	ldr	r1, [pc, #536]	; (800a78c <tcp_input+0x530>)
 800a572:	4887      	ldr	r0, [pc, #540]	; (800a790 <tcp_input+0x534>)
 800a574:	f006 ff6c 	bl	8011450 <iprintf>
      if (prev != NULL) {
 800a578:	69bb      	ldr	r3, [r7, #24]
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d00a      	beq.n	800a594 <tcp_input+0x338>
        prev->next = pcb->next;
 800a57e:	69fb      	ldr	r3, [r7, #28]
 800a580:	68da      	ldr	r2, [r3, #12]
 800a582:	69bb      	ldr	r3, [r7, #24]
 800a584:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800a586:	4b83      	ldr	r3, [pc, #524]	; (800a794 <tcp_input+0x538>)
 800a588:	681a      	ldr	r2, [r3, #0]
 800a58a:	69fb      	ldr	r3, [r7, #28]
 800a58c:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800a58e:	4a81      	ldr	r2, [pc, #516]	; (800a794 <tcp_input+0x538>)
 800a590:	69fb      	ldr	r3, [r7, #28]
 800a592:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800a594:	69fb      	ldr	r3, [r7, #28]
 800a596:	68db      	ldr	r3, [r3, #12]
 800a598:	69fa      	ldr	r2, [r7, #28]
 800a59a:	429a      	cmp	r2, r3
 800a59c:	d111      	bne.n	800a5c2 <tcp_input+0x366>
 800a59e:	4b7a      	ldr	r3, [pc, #488]	; (800a788 <tcp_input+0x52c>)
 800a5a0:	f240 1215 	movw	r2, #277	; 0x115
 800a5a4:	497c      	ldr	r1, [pc, #496]	; (800a798 <tcp_input+0x53c>)
 800a5a6:	487a      	ldr	r0, [pc, #488]	; (800a790 <tcp_input+0x534>)
 800a5a8:	f006 ff52 	bl	8011450 <iprintf>
      break;
 800a5ac:	e009      	b.n	800a5c2 <tcp_input+0x366>
    }
    prev = pcb;
 800a5ae:	69fb      	ldr	r3, [r7, #28]
 800a5b0:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a5b2:	69fb      	ldr	r3, [r7, #28]
 800a5b4:	68db      	ldr	r3, [r3, #12]
 800a5b6:	61fb      	str	r3, [r7, #28]
 800a5b8:	69fb      	ldr	r3, [r7, #28]
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	f47f af5e 	bne.w	800a47c <tcp_input+0x220>
 800a5c0:	e000      	b.n	800a5c4 <tcp_input+0x368>
      break;
 800a5c2:	bf00      	nop
  }

  if (pcb == NULL) {
 800a5c4:	69fb      	ldr	r3, [r7, #28]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	f040 8095 	bne.w	800a6f6 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a5cc:	4b73      	ldr	r3, [pc, #460]	; (800a79c <tcp_input+0x540>)
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	61fb      	str	r3, [r7, #28]
 800a5d2:	e03f      	b.n	800a654 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800a5d4:	69fb      	ldr	r3, [r7, #28]
 800a5d6:	7d1b      	ldrb	r3, [r3, #20]
 800a5d8:	2b0a      	cmp	r3, #10
 800a5da:	d006      	beq.n	800a5ea <tcp_input+0x38e>
 800a5dc:	4b6a      	ldr	r3, [pc, #424]	; (800a788 <tcp_input+0x52c>)
 800a5de:	f240 121f 	movw	r2, #287	; 0x11f
 800a5e2:	496f      	ldr	r1, [pc, #444]	; (800a7a0 <tcp_input+0x544>)
 800a5e4:	486a      	ldr	r0, [pc, #424]	; (800a790 <tcp_input+0x534>)
 800a5e6:	f006 ff33 	bl	8011450 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a5ea:	69fb      	ldr	r3, [r7, #28]
 800a5ec:	7a1b      	ldrb	r3, [r3, #8]
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d009      	beq.n	800a606 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a5f2:	69fb      	ldr	r3, [r7, #28]
 800a5f4:	7a1a      	ldrb	r2, [r3, #8]
 800a5f6:	4b63      	ldr	r3, [pc, #396]	; (800a784 <tcp_input+0x528>)
 800a5f8:	685b      	ldr	r3, [r3, #4]
 800a5fa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a5fe:	3301      	adds	r3, #1
 800a600:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a602:	429a      	cmp	r2, r3
 800a604:	d122      	bne.n	800a64c <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800a606:	69fb      	ldr	r3, [r7, #28]
 800a608:	8b1a      	ldrh	r2, [r3, #24]
 800a60a:	4b5d      	ldr	r3, [pc, #372]	; (800a780 <tcp_input+0x524>)
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	881b      	ldrh	r3, [r3, #0]
 800a610:	b29b      	uxth	r3, r3
 800a612:	429a      	cmp	r2, r3
 800a614:	d11b      	bne.n	800a64e <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800a616:	69fb      	ldr	r3, [r7, #28]
 800a618:	8ada      	ldrh	r2, [r3, #22]
 800a61a:	4b59      	ldr	r3, [pc, #356]	; (800a780 <tcp_input+0x524>)
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	885b      	ldrh	r3, [r3, #2]
 800a620:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800a622:	429a      	cmp	r2, r3
 800a624:	d113      	bne.n	800a64e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a626:	69fb      	ldr	r3, [r7, #28]
 800a628:	685a      	ldr	r2, [r3, #4]
 800a62a:	4b56      	ldr	r3, [pc, #344]	; (800a784 <tcp_input+0x528>)
 800a62c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800a62e:	429a      	cmp	r2, r3
 800a630:	d10d      	bne.n	800a64e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800a632:	69fb      	ldr	r3, [r7, #28]
 800a634:	681a      	ldr	r2, [r3, #0]
 800a636:	4b53      	ldr	r3, [pc, #332]	; (800a784 <tcp_input+0x528>)
 800a638:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a63a:	429a      	cmp	r2, r3
 800a63c:	d107      	bne.n	800a64e <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800a63e:	69f8      	ldr	r0, [r7, #28]
 800a640:	f000 fb54 	bl	800acec <tcp_timewait_input>
        }
        pbuf_free(p);
 800a644:	6878      	ldr	r0, [r7, #4]
 800a646:	f7fd fd3b 	bl	80080c0 <pbuf_free>
        return;
 800a64a:	e1f0      	b.n	800aa2e <tcp_input+0x7d2>
        continue;
 800a64c:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a64e:	69fb      	ldr	r3, [r7, #28]
 800a650:	68db      	ldr	r3, [r3, #12]
 800a652:	61fb      	str	r3, [r7, #28]
 800a654:	69fb      	ldr	r3, [r7, #28]
 800a656:	2b00      	cmp	r3, #0
 800a658:	d1bc      	bne.n	800a5d4 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800a65a:	2300      	movs	r3, #0
 800a65c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a65e:	4b51      	ldr	r3, [pc, #324]	; (800a7a4 <tcp_input+0x548>)
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	617b      	str	r3, [r7, #20]
 800a664:	e02a      	b.n	800a6bc <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800a666:	697b      	ldr	r3, [r7, #20]
 800a668:	7a1b      	ldrb	r3, [r3, #8]
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d00c      	beq.n	800a688 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a66e:	697b      	ldr	r3, [r7, #20]
 800a670:	7a1a      	ldrb	r2, [r3, #8]
 800a672:	4b44      	ldr	r3, [pc, #272]	; (800a784 <tcp_input+0x528>)
 800a674:	685b      	ldr	r3, [r3, #4]
 800a676:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a67a:	3301      	adds	r3, #1
 800a67c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800a67e:	429a      	cmp	r2, r3
 800a680:	d002      	beq.n	800a688 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800a682:	697b      	ldr	r3, [r7, #20]
 800a684:	61bb      	str	r3, [r7, #24]
        continue;
 800a686:	e016      	b.n	800a6b6 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800a688:	697b      	ldr	r3, [r7, #20]
 800a68a:	8ada      	ldrh	r2, [r3, #22]
 800a68c:	4b3c      	ldr	r3, [pc, #240]	; (800a780 <tcp_input+0x524>)
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	885b      	ldrh	r3, [r3, #2]
 800a692:	b29b      	uxth	r3, r3
 800a694:	429a      	cmp	r2, r3
 800a696:	d10c      	bne.n	800a6b2 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800a698:	697b      	ldr	r3, [r7, #20]
 800a69a:	681a      	ldr	r2, [r3, #0]
 800a69c:	4b39      	ldr	r3, [pc, #228]	; (800a784 <tcp_input+0x528>)
 800a69e:	695b      	ldr	r3, [r3, #20]
 800a6a0:	429a      	cmp	r2, r3
 800a6a2:	d00f      	beq.n	800a6c4 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800a6a4:	697b      	ldr	r3, [r7, #20]
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d00d      	beq.n	800a6c6 <tcp_input+0x46a>
 800a6aa:	697b      	ldr	r3, [r7, #20]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d009      	beq.n	800a6c6 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800a6b2:	697b      	ldr	r3, [r7, #20]
 800a6b4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a6b6:	697b      	ldr	r3, [r7, #20]
 800a6b8:	68db      	ldr	r3, [r3, #12]
 800a6ba:	617b      	str	r3, [r7, #20]
 800a6bc:	697b      	ldr	r3, [r7, #20]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d1d1      	bne.n	800a666 <tcp_input+0x40a>
 800a6c2:	e000      	b.n	800a6c6 <tcp_input+0x46a>
            break;
 800a6c4:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800a6c6:	697b      	ldr	r3, [r7, #20]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d014      	beq.n	800a6f6 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800a6cc:	69bb      	ldr	r3, [r7, #24]
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d00a      	beq.n	800a6e8 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800a6d2:	697b      	ldr	r3, [r7, #20]
 800a6d4:	68da      	ldr	r2, [r3, #12]
 800a6d6:	69bb      	ldr	r3, [r7, #24]
 800a6d8:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800a6da:	4b32      	ldr	r3, [pc, #200]	; (800a7a4 <tcp_input+0x548>)
 800a6dc:	681a      	ldr	r2, [r3, #0]
 800a6de:	697b      	ldr	r3, [r7, #20]
 800a6e0:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800a6e2:	4a30      	ldr	r2, [pc, #192]	; (800a7a4 <tcp_input+0x548>)
 800a6e4:	697b      	ldr	r3, [r7, #20]
 800a6e6:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800a6e8:	6978      	ldr	r0, [r7, #20]
 800a6ea:	f000 fa01 	bl	800aaf0 <tcp_listen_input>
      }
      pbuf_free(p);
 800a6ee:	6878      	ldr	r0, [r7, #4]
 800a6f0:	f7fd fce6 	bl	80080c0 <pbuf_free>
      return;
 800a6f4:	e19b      	b.n	800aa2e <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800a6f6:	69fb      	ldr	r3, [r7, #28]
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	f000 8160 	beq.w	800a9be <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800a6fe:	4b2a      	ldr	r3, [pc, #168]	; (800a7a8 <tcp_input+0x54c>)
 800a700:	2200      	movs	r2, #0
 800a702:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	891a      	ldrh	r2, [r3, #8]
 800a708:	4b27      	ldr	r3, [pc, #156]	; (800a7a8 <tcp_input+0x54c>)
 800a70a:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800a70c:	4a26      	ldr	r2, [pc, #152]	; (800a7a8 <tcp_input+0x54c>)
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800a712:	4b1b      	ldr	r3, [pc, #108]	; (800a780 <tcp_input+0x524>)
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	4a24      	ldr	r2, [pc, #144]	; (800a7a8 <tcp_input+0x54c>)
 800a718:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800a71a:	4b24      	ldr	r3, [pc, #144]	; (800a7ac <tcp_input+0x550>)
 800a71c:	2200      	movs	r2, #0
 800a71e:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800a720:	4b23      	ldr	r3, [pc, #140]	; (800a7b0 <tcp_input+0x554>)
 800a722:	2200      	movs	r2, #0
 800a724:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800a726:	4b23      	ldr	r3, [pc, #140]	; (800a7b4 <tcp_input+0x558>)
 800a728:	2200      	movs	r2, #0
 800a72a:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800a72c:	4b22      	ldr	r3, [pc, #136]	; (800a7b8 <tcp_input+0x55c>)
 800a72e:	781b      	ldrb	r3, [r3, #0]
 800a730:	f003 0308 	and.w	r3, r3, #8
 800a734:	2b00      	cmp	r3, #0
 800a736:	d006      	beq.n	800a746 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	7b5b      	ldrb	r3, [r3, #13]
 800a73c:	f043 0301 	orr.w	r3, r3, #1
 800a740:	b2da      	uxtb	r2, r3
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800a746:	69fb      	ldr	r3, [r7, #28]
 800a748:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d038      	beq.n	800a7c0 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800a74e:	69f8      	ldr	r0, [r7, #28]
 800a750:	f7ff f852 	bl	80097f8 <tcp_process_refused_data>
 800a754:	4603      	mov	r3, r0
 800a756:	f113 0f0d 	cmn.w	r3, #13
 800a75a:	d007      	beq.n	800a76c <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800a75c:	69fb      	ldr	r3, [r7, #28]
 800a75e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800a760:	2b00      	cmp	r3, #0
 800a762:	d02d      	beq.n	800a7c0 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800a764:	4b15      	ldr	r3, [pc, #84]	; (800a7bc <tcp_input+0x560>)
 800a766:	881b      	ldrh	r3, [r3, #0]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d029      	beq.n	800a7c0 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800a76c:	69fb      	ldr	r3, [r7, #28]
 800a76e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a770:	2b00      	cmp	r3, #0
 800a772:	f040 8104 	bne.w	800a97e <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800a776:	69f8      	ldr	r0, [r7, #28]
 800a778:	f003 fe16 	bl	800e3a8 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800a77c:	e0ff      	b.n	800a97e <tcp_input+0x722>
 800a77e:	bf00      	nop
 800a780:	20000584 	.word	0x20000584
 800a784:	20003ddc 	.word	0x20003ddc
 800a788:	08014794 	.word	0x08014794
 800a78c:	080148c0 	.word	0x080148c0
 800a790:	080147e0 	.word	0x080147e0
 800a794:	2000d3e0 	.word	0x2000d3e0
 800a798:	080148ec 	.word	0x080148ec
 800a79c:	2000d3f0 	.word	0x2000d3f0
 800a7a0:	08014918 	.word	0x08014918
 800a7a4:	2000d3e8 	.word	0x2000d3e8
 800a7a8:	20000574 	.word	0x20000574
 800a7ac:	200005a4 	.word	0x200005a4
 800a7b0:	200005a1 	.word	0x200005a1
 800a7b4:	2000059c 	.word	0x2000059c
 800a7b8:	200005a0 	.word	0x200005a0
 800a7bc:	2000059e 	.word	0x2000059e
      }
    }
    tcp_input_pcb = pcb;
 800a7c0:	4a9c      	ldr	r2, [pc, #624]	; (800aa34 <tcp_input+0x7d8>)
 800a7c2:	69fb      	ldr	r3, [r7, #28]
 800a7c4:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800a7c6:	69f8      	ldr	r0, [r7, #28]
 800a7c8:	f000 fb0a 	bl	800ade0 <tcp_process>
 800a7cc:	4603      	mov	r3, r0
 800a7ce:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800a7d0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a7d4:	f113 0f0d 	cmn.w	r3, #13
 800a7d8:	f000 80d3 	beq.w	800a982 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 800a7dc:	4b96      	ldr	r3, [pc, #600]	; (800aa38 <tcp_input+0x7dc>)
 800a7de:	781b      	ldrb	r3, [r3, #0]
 800a7e0:	f003 0308 	and.w	r3, r3, #8
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d015      	beq.n	800a814 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800a7e8:	69fb      	ldr	r3, [r7, #28]
 800a7ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d008      	beq.n	800a804 <tcp_input+0x5a8>
 800a7f2:	69fb      	ldr	r3, [r7, #28]
 800a7f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a7f8:	69fa      	ldr	r2, [r7, #28]
 800a7fa:	6912      	ldr	r2, [r2, #16]
 800a7fc:	f06f 010d 	mvn.w	r1, #13
 800a800:	4610      	mov	r0, r2
 800a802:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800a804:	69f9      	ldr	r1, [r7, #28]
 800a806:	488d      	ldr	r0, [pc, #564]	; (800aa3c <tcp_input+0x7e0>)
 800a808:	f7ff fbb0 	bl	8009f6c <tcp_pcb_remove>
        tcp_free(pcb);
 800a80c:	69f8      	ldr	r0, [r7, #28]
 800a80e:	f7fd fef7 	bl	8008600 <tcp_free>
 800a812:	e0c1      	b.n	800a998 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 800a814:	2300      	movs	r3, #0
 800a816:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800a818:	4b89      	ldr	r3, [pc, #548]	; (800aa40 <tcp_input+0x7e4>)
 800a81a:	881b      	ldrh	r3, [r3, #0]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d01d      	beq.n	800a85c <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800a820:	4b87      	ldr	r3, [pc, #540]	; (800aa40 <tcp_input+0x7e4>)
 800a822:	881b      	ldrh	r3, [r3, #0]
 800a824:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800a826:	69fb      	ldr	r3, [r7, #28]
 800a828:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d00a      	beq.n	800a846 <tcp_input+0x5ea>
 800a830:	69fb      	ldr	r3, [r7, #28]
 800a832:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a836:	69fa      	ldr	r2, [r7, #28]
 800a838:	6910      	ldr	r0, [r2, #16]
 800a83a:	89fa      	ldrh	r2, [r7, #14]
 800a83c:	69f9      	ldr	r1, [r7, #28]
 800a83e:	4798      	blx	r3
 800a840:	4603      	mov	r3, r0
 800a842:	74fb      	strb	r3, [r7, #19]
 800a844:	e001      	b.n	800a84a <tcp_input+0x5ee>
 800a846:	2300      	movs	r3, #0
 800a848:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800a84a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a84e:	f113 0f0d 	cmn.w	r3, #13
 800a852:	f000 8098 	beq.w	800a986 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 800a856:	4b7a      	ldr	r3, [pc, #488]	; (800aa40 <tcp_input+0x7e4>)
 800a858:	2200      	movs	r2, #0
 800a85a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800a85c:	69f8      	ldr	r0, [r7, #28]
 800a85e:	f000 f907 	bl	800aa70 <tcp_input_delayed_close>
 800a862:	4603      	mov	r3, r0
 800a864:	2b00      	cmp	r3, #0
 800a866:	f040 8090 	bne.w	800a98a <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800a86a:	4b76      	ldr	r3, [pc, #472]	; (800aa44 <tcp_input+0x7e8>)
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d041      	beq.n	800a8f6 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800a872:	69fb      	ldr	r3, [r7, #28]
 800a874:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a876:	2b00      	cmp	r3, #0
 800a878:	d006      	beq.n	800a888 <tcp_input+0x62c>
 800a87a:	4b73      	ldr	r3, [pc, #460]	; (800aa48 <tcp_input+0x7ec>)
 800a87c:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800a880:	4972      	ldr	r1, [pc, #456]	; (800aa4c <tcp_input+0x7f0>)
 800a882:	4873      	ldr	r0, [pc, #460]	; (800aa50 <tcp_input+0x7f4>)
 800a884:	f006 fde4 	bl	8011450 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800a888:	69fb      	ldr	r3, [r7, #28]
 800a88a:	8b5b      	ldrh	r3, [r3, #26]
 800a88c:	f003 0310 	and.w	r3, r3, #16
 800a890:	2b00      	cmp	r3, #0
 800a892:	d008      	beq.n	800a8a6 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800a894:	4b6b      	ldr	r3, [pc, #428]	; (800aa44 <tcp_input+0x7e8>)
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	4618      	mov	r0, r3
 800a89a:	f7fd fc11 	bl	80080c0 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800a89e:	69f8      	ldr	r0, [r7, #28]
 800a8a0:	f7fe f996 	bl	8008bd0 <tcp_abort>
            goto aborted;
 800a8a4:	e078      	b.n	800a998 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800a8a6:	69fb      	ldr	r3, [r7, #28]
 800a8a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d00c      	beq.n	800a8ca <tcp_input+0x66e>
 800a8b0:	69fb      	ldr	r3, [r7, #28]
 800a8b2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800a8b6:	69fb      	ldr	r3, [r7, #28]
 800a8b8:	6918      	ldr	r0, [r3, #16]
 800a8ba:	4b62      	ldr	r3, [pc, #392]	; (800aa44 <tcp_input+0x7e8>)
 800a8bc:	681a      	ldr	r2, [r3, #0]
 800a8be:	2300      	movs	r3, #0
 800a8c0:	69f9      	ldr	r1, [r7, #28]
 800a8c2:	47a0      	blx	r4
 800a8c4:	4603      	mov	r3, r0
 800a8c6:	74fb      	strb	r3, [r7, #19]
 800a8c8:	e008      	b.n	800a8dc <tcp_input+0x680>
 800a8ca:	4b5e      	ldr	r3, [pc, #376]	; (800aa44 <tcp_input+0x7e8>)
 800a8cc:	681a      	ldr	r2, [r3, #0]
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	69f9      	ldr	r1, [r7, #28]
 800a8d2:	2000      	movs	r0, #0
 800a8d4:	f7ff f884 	bl	80099e0 <tcp_recv_null>
 800a8d8:	4603      	mov	r3, r0
 800a8da:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800a8dc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a8e0:	f113 0f0d 	cmn.w	r3, #13
 800a8e4:	d053      	beq.n	800a98e <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800a8e6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d003      	beq.n	800a8f6 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800a8ee:	4b55      	ldr	r3, [pc, #340]	; (800aa44 <tcp_input+0x7e8>)
 800a8f0:	681a      	ldr	r2, [r3, #0]
 800a8f2:	69fb      	ldr	r3, [r7, #28]
 800a8f4:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800a8f6:	4b50      	ldr	r3, [pc, #320]	; (800aa38 <tcp_input+0x7dc>)
 800a8f8:	781b      	ldrb	r3, [r3, #0]
 800a8fa:	f003 0320 	and.w	r3, r3, #32
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d030      	beq.n	800a964 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 800a902:	69fb      	ldr	r3, [r7, #28]
 800a904:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a906:	2b00      	cmp	r3, #0
 800a908:	d009      	beq.n	800a91e <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800a90a:	69fb      	ldr	r3, [r7, #28]
 800a90c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a90e:	7b5a      	ldrb	r2, [r3, #13]
 800a910:	69fb      	ldr	r3, [r7, #28]
 800a912:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a914:	f042 0220 	orr.w	r2, r2, #32
 800a918:	b2d2      	uxtb	r2, r2
 800a91a:	735a      	strb	r2, [r3, #13]
 800a91c:	e022      	b.n	800a964 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800a91e:	69fb      	ldr	r3, [r7, #28]
 800a920:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a922:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800a926:	d005      	beq.n	800a934 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 800a928:	69fb      	ldr	r3, [r7, #28]
 800a92a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a92c:	3301      	adds	r3, #1
 800a92e:	b29a      	uxth	r2, r3
 800a930:	69fb      	ldr	r3, [r7, #28]
 800a932:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800a934:	69fb      	ldr	r3, [r7, #28]
 800a936:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d00b      	beq.n	800a956 <tcp_input+0x6fa>
 800a93e:	69fb      	ldr	r3, [r7, #28]
 800a940:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800a944:	69fb      	ldr	r3, [r7, #28]
 800a946:	6918      	ldr	r0, [r3, #16]
 800a948:	2300      	movs	r3, #0
 800a94a:	2200      	movs	r2, #0
 800a94c:	69f9      	ldr	r1, [r7, #28]
 800a94e:	47a0      	blx	r4
 800a950:	4603      	mov	r3, r0
 800a952:	74fb      	strb	r3, [r7, #19]
 800a954:	e001      	b.n	800a95a <tcp_input+0x6fe>
 800a956:	2300      	movs	r3, #0
 800a958:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800a95a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a95e:	f113 0f0d 	cmn.w	r3, #13
 800a962:	d016      	beq.n	800a992 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800a964:	4b33      	ldr	r3, [pc, #204]	; (800aa34 <tcp_input+0x7d8>)
 800a966:	2200      	movs	r2, #0
 800a968:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800a96a:	69f8      	ldr	r0, [r7, #28]
 800a96c:	f000 f880 	bl	800aa70 <tcp_input_delayed_close>
 800a970:	4603      	mov	r3, r0
 800a972:	2b00      	cmp	r3, #0
 800a974:	d10f      	bne.n	800a996 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800a976:	69f8      	ldr	r0, [r7, #28]
 800a978:	f002 ff10 	bl	800d79c <tcp_output>
 800a97c:	e00c      	b.n	800a998 <tcp_input+0x73c>
        goto aborted;
 800a97e:	bf00      	nop
 800a980:	e00a      	b.n	800a998 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800a982:	bf00      	nop
 800a984:	e008      	b.n	800a998 <tcp_input+0x73c>
              goto aborted;
 800a986:	bf00      	nop
 800a988:	e006      	b.n	800a998 <tcp_input+0x73c>
          goto aborted;
 800a98a:	bf00      	nop
 800a98c:	e004      	b.n	800a998 <tcp_input+0x73c>
            goto aborted;
 800a98e:	bf00      	nop
 800a990:	e002      	b.n	800a998 <tcp_input+0x73c>
              goto aborted;
 800a992:	bf00      	nop
 800a994:	e000      	b.n	800a998 <tcp_input+0x73c>
          goto aborted;
 800a996:	bf00      	nop
    tcp_input_pcb = NULL;
 800a998:	4b26      	ldr	r3, [pc, #152]	; (800aa34 <tcp_input+0x7d8>)
 800a99a:	2200      	movs	r2, #0
 800a99c:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800a99e:	4b29      	ldr	r3, [pc, #164]	; (800aa44 <tcp_input+0x7e8>)
 800a9a0:	2200      	movs	r2, #0
 800a9a2:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800a9a4:	4b2b      	ldr	r3, [pc, #172]	; (800aa54 <tcp_input+0x7f8>)
 800a9a6:	685b      	ldr	r3, [r3, #4]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d03f      	beq.n	800aa2c <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 800a9ac:	4b29      	ldr	r3, [pc, #164]	; (800aa54 <tcp_input+0x7f8>)
 800a9ae:	685b      	ldr	r3, [r3, #4]
 800a9b0:	4618      	mov	r0, r3
 800a9b2:	f7fd fb85 	bl	80080c0 <pbuf_free>
      inseg.p = NULL;
 800a9b6:	4b27      	ldr	r3, [pc, #156]	; (800aa54 <tcp_input+0x7f8>)
 800a9b8:	2200      	movs	r2, #0
 800a9ba:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800a9bc:	e036      	b.n	800aa2c <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800a9be:	4b26      	ldr	r3, [pc, #152]	; (800aa58 <tcp_input+0x7fc>)
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	899b      	ldrh	r3, [r3, #12]
 800a9c4:	b29b      	uxth	r3, r3
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	f7fb ffe8 	bl	800699c <lwip_htons>
 800a9cc:	4603      	mov	r3, r0
 800a9ce:	b2db      	uxtb	r3, r3
 800a9d0:	f003 0304 	and.w	r3, r3, #4
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d118      	bne.n	800aa0a <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a9d8:	4b20      	ldr	r3, [pc, #128]	; (800aa5c <tcp_input+0x800>)
 800a9da:	6819      	ldr	r1, [r3, #0]
 800a9dc:	4b20      	ldr	r3, [pc, #128]	; (800aa60 <tcp_input+0x804>)
 800a9de:	881b      	ldrh	r3, [r3, #0]
 800a9e0:	461a      	mov	r2, r3
 800a9e2:	4b20      	ldr	r3, [pc, #128]	; (800aa64 <tcp_input+0x808>)
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a9e8:	4b1b      	ldr	r3, [pc, #108]	; (800aa58 <tcp_input+0x7fc>)
 800a9ea:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a9ec:	885b      	ldrh	r3, [r3, #2]
 800a9ee:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a9f0:	4a19      	ldr	r2, [pc, #100]	; (800aa58 <tcp_input+0x7fc>)
 800a9f2:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a9f4:	8812      	ldrh	r2, [r2, #0]
 800a9f6:	b292      	uxth	r2, r2
 800a9f8:	9202      	str	r2, [sp, #8]
 800a9fa:	9301      	str	r3, [sp, #4]
 800a9fc:	4b1a      	ldr	r3, [pc, #104]	; (800aa68 <tcp_input+0x80c>)
 800a9fe:	9300      	str	r3, [sp, #0]
 800aa00:	4b1a      	ldr	r3, [pc, #104]	; (800aa6c <tcp_input+0x810>)
 800aa02:	4602      	mov	r2, r0
 800aa04:	2000      	movs	r0, #0
 800aa06:	f003 fc7d 	bl	800e304 <tcp_rst>
    pbuf_free(p);
 800aa0a:	6878      	ldr	r0, [r7, #4]
 800aa0c:	f7fd fb58 	bl	80080c0 <pbuf_free>
  return;
 800aa10:	e00c      	b.n	800aa2c <tcp_input+0x7d0>
    goto dropped;
 800aa12:	bf00      	nop
 800aa14:	e006      	b.n	800aa24 <tcp_input+0x7c8>
    goto dropped;
 800aa16:	bf00      	nop
 800aa18:	e004      	b.n	800aa24 <tcp_input+0x7c8>
    goto dropped;
 800aa1a:	bf00      	nop
 800aa1c:	e002      	b.n	800aa24 <tcp_input+0x7c8>
      goto dropped;
 800aa1e:	bf00      	nop
 800aa20:	e000      	b.n	800aa24 <tcp_input+0x7c8>
      goto dropped;
 800aa22:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800aa24:	6878      	ldr	r0, [r7, #4]
 800aa26:	f7fd fb4b 	bl	80080c0 <pbuf_free>
 800aa2a:	e000      	b.n	800aa2e <tcp_input+0x7d2>
  return;
 800aa2c:	bf00      	nop
}
 800aa2e:	3724      	adds	r7, #36	; 0x24
 800aa30:	46bd      	mov	sp, r7
 800aa32:	bd90      	pop	{r4, r7, pc}
 800aa34:	2000d3f4 	.word	0x2000d3f4
 800aa38:	200005a1 	.word	0x200005a1
 800aa3c:	2000d3e0 	.word	0x2000d3e0
 800aa40:	2000059c 	.word	0x2000059c
 800aa44:	200005a4 	.word	0x200005a4
 800aa48:	08014794 	.word	0x08014794
 800aa4c:	08014948 	.word	0x08014948
 800aa50:	080147e0 	.word	0x080147e0
 800aa54:	20000574 	.word	0x20000574
 800aa58:	20000584 	.word	0x20000584
 800aa5c:	20000598 	.word	0x20000598
 800aa60:	2000059e 	.word	0x2000059e
 800aa64:	20000594 	.word	0x20000594
 800aa68:	20003dec 	.word	0x20003dec
 800aa6c:	20003df0 	.word	0x20003df0

0800aa70 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800aa70:	b580      	push	{r7, lr}
 800aa72:	b082      	sub	sp, #8
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d106      	bne.n	800aa8c <tcp_input_delayed_close+0x1c>
 800aa7e:	4b17      	ldr	r3, [pc, #92]	; (800aadc <tcp_input_delayed_close+0x6c>)
 800aa80:	f240 225a 	movw	r2, #602	; 0x25a
 800aa84:	4916      	ldr	r1, [pc, #88]	; (800aae0 <tcp_input_delayed_close+0x70>)
 800aa86:	4817      	ldr	r0, [pc, #92]	; (800aae4 <tcp_input_delayed_close+0x74>)
 800aa88:	f006 fce2 	bl	8011450 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800aa8c:	4b16      	ldr	r3, [pc, #88]	; (800aae8 <tcp_input_delayed_close+0x78>)
 800aa8e:	781b      	ldrb	r3, [r3, #0]
 800aa90:	f003 0310 	and.w	r3, r3, #16
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d01c      	beq.n	800aad2 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	8b5b      	ldrh	r3, [r3, #26]
 800aa9c:	f003 0310 	and.w	r3, r3, #16
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d10d      	bne.n	800aac0 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d008      	beq.n	800aac0 <tcp_input_delayed_close+0x50>
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aab4:	687a      	ldr	r2, [r7, #4]
 800aab6:	6912      	ldr	r2, [r2, #16]
 800aab8:	f06f 010e 	mvn.w	r1, #14
 800aabc:	4610      	mov	r0, r2
 800aabe:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800aac0:	6879      	ldr	r1, [r7, #4]
 800aac2:	480a      	ldr	r0, [pc, #40]	; (800aaec <tcp_input_delayed_close+0x7c>)
 800aac4:	f7ff fa52 	bl	8009f6c <tcp_pcb_remove>
    tcp_free(pcb);
 800aac8:	6878      	ldr	r0, [r7, #4]
 800aaca:	f7fd fd99 	bl	8008600 <tcp_free>
    return 1;
 800aace:	2301      	movs	r3, #1
 800aad0:	e000      	b.n	800aad4 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800aad2:	2300      	movs	r3, #0
}
 800aad4:	4618      	mov	r0, r3
 800aad6:	3708      	adds	r7, #8
 800aad8:	46bd      	mov	sp, r7
 800aada:	bd80      	pop	{r7, pc}
 800aadc:	08014794 	.word	0x08014794
 800aae0:	08014964 	.word	0x08014964
 800aae4:	080147e0 	.word	0x080147e0
 800aae8:	200005a1 	.word	0x200005a1
 800aaec:	2000d3e0 	.word	0x2000d3e0

0800aaf0 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800aaf0:	b590      	push	{r4, r7, lr}
 800aaf2:	b08b      	sub	sp, #44	; 0x2c
 800aaf4:	af04      	add	r7, sp, #16
 800aaf6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800aaf8:	4b6f      	ldr	r3, [pc, #444]	; (800acb8 <tcp_listen_input+0x1c8>)
 800aafa:	781b      	ldrb	r3, [r3, #0]
 800aafc:	f003 0304 	and.w	r3, r3, #4
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	f040 80d2 	bne.w	800acaa <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d106      	bne.n	800ab1a <tcp_listen_input+0x2a>
 800ab0c:	4b6b      	ldr	r3, [pc, #428]	; (800acbc <tcp_listen_input+0x1cc>)
 800ab0e:	f240 2281 	movw	r2, #641	; 0x281
 800ab12:	496b      	ldr	r1, [pc, #428]	; (800acc0 <tcp_listen_input+0x1d0>)
 800ab14:	486b      	ldr	r0, [pc, #428]	; (800acc4 <tcp_listen_input+0x1d4>)
 800ab16:	f006 fc9b 	bl	8011450 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800ab1a:	4b67      	ldr	r3, [pc, #412]	; (800acb8 <tcp_listen_input+0x1c8>)
 800ab1c:	781b      	ldrb	r3, [r3, #0]
 800ab1e:	f003 0310 	and.w	r3, r3, #16
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d019      	beq.n	800ab5a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ab26:	4b68      	ldr	r3, [pc, #416]	; (800acc8 <tcp_listen_input+0x1d8>)
 800ab28:	6819      	ldr	r1, [r3, #0]
 800ab2a:	4b68      	ldr	r3, [pc, #416]	; (800accc <tcp_listen_input+0x1dc>)
 800ab2c:	881b      	ldrh	r3, [r3, #0]
 800ab2e:	461a      	mov	r2, r3
 800ab30:	4b67      	ldr	r3, [pc, #412]	; (800acd0 <tcp_listen_input+0x1e0>)
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ab36:	4b67      	ldr	r3, [pc, #412]	; (800acd4 <tcp_listen_input+0x1e4>)
 800ab38:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ab3a:	885b      	ldrh	r3, [r3, #2]
 800ab3c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ab3e:	4a65      	ldr	r2, [pc, #404]	; (800acd4 <tcp_listen_input+0x1e4>)
 800ab40:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ab42:	8812      	ldrh	r2, [r2, #0]
 800ab44:	b292      	uxth	r2, r2
 800ab46:	9202      	str	r2, [sp, #8]
 800ab48:	9301      	str	r3, [sp, #4]
 800ab4a:	4b63      	ldr	r3, [pc, #396]	; (800acd8 <tcp_listen_input+0x1e8>)
 800ab4c:	9300      	str	r3, [sp, #0]
 800ab4e:	4b63      	ldr	r3, [pc, #396]	; (800acdc <tcp_listen_input+0x1ec>)
 800ab50:	4602      	mov	r2, r0
 800ab52:	6878      	ldr	r0, [r7, #4]
 800ab54:	f003 fbd6 	bl	800e304 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800ab58:	e0a9      	b.n	800acae <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800ab5a:	4b57      	ldr	r3, [pc, #348]	; (800acb8 <tcp_listen_input+0x1c8>)
 800ab5c:	781b      	ldrb	r3, [r3, #0]
 800ab5e:	f003 0302 	and.w	r3, r3, #2
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	f000 80a3 	beq.w	800acae <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	7d5b      	ldrb	r3, [r3, #21]
 800ab6c:	4618      	mov	r0, r3
 800ab6e:	f7ff f85b 	bl	8009c28 <tcp_alloc>
 800ab72:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800ab74:	697b      	ldr	r3, [r7, #20]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d111      	bne.n	800ab9e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	699b      	ldr	r3, [r3, #24]
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d00a      	beq.n	800ab98 <tcp_listen_input+0xa8>
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	699b      	ldr	r3, [r3, #24]
 800ab86:	687a      	ldr	r2, [r7, #4]
 800ab88:	6910      	ldr	r0, [r2, #16]
 800ab8a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ab8e:	2100      	movs	r1, #0
 800ab90:	4798      	blx	r3
 800ab92:	4603      	mov	r3, r0
 800ab94:	73bb      	strb	r3, [r7, #14]
      return;
 800ab96:	e08b      	b.n	800acb0 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800ab98:	23f0      	movs	r3, #240	; 0xf0
 800ab9a:	73bb      	strb	r3, [r7, #14]
      return;
 800ab9c:	e088      	b.n	800acb0 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800ab9e:	4b50      	ldr	r3, [pc, #320]	; (800ace0 <tcp_listen_input+0x1f0>)
 800aba0:	695a      	ldr	r2, [r3, #20]
 800aba2:	697b      	ldr	r3, [r7, #20]
 800aba4:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800aba6:	4b4e      	ldr	r3, [pc, #312]	; (800ace0 <tcp_listen_input+0x1f0>)
 800aba8:	691a      	ldr	r2, [r3, #16]
 800abaa:	697b      	ldr	r3, [r7, #20]
 800abac:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	8ada      	ldrh	r2, [r3, #22]
 800abb2:	697b      	ldr	r3, [r7, #20]
 800abb4:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800abb6:	4b47      	ldr	r3, [pc, #284]	; (800acd4 <tcp_listen_input+0x1e4>)
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	881b      	ldrh	r3, [r3, #0]
 800abbc:	b29a      	uxth	r2, r3
 800abbe:	697b      	ldr	r3, [r7, #20]
 800abc0:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800abc2:	697b      	ldr	r3, [r7, #20]
 800abc4:	2203      	movs	r2, #3
 800abc6:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800abc8:	4b41      	ldr	r3, [pc, #260]	; (800acd0 <tcp_listen_input+0x1e0>)
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	1c5a      	adds	r2, r3, #1
 800abce:	697b      	ldr	r3, [r7, #20]
 800abd0:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800abd2:	697b      	ldr	r3, [r7, #20]
 800abd4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800abd6:	697b      	ldr	r3, [r7, #20]
 800abd8:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800abda:	6978      	ldr	r0, [r7, #20]
 800abdc:	f7ff fa5a 	bl	800a094 <tcp_next_iss>
 800abe0:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800abe2:	697b      	ldr	r3, [r7, #20]
 800abe4:	693a      	ldr	r2, [r7, #16]
 800abe6:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800abe8:	697b      	ldr	r3, [r7, #20]
 800abea:	693a      	ldr	r2, [r7, #16]
 800abec:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800abee:	697b      	ldr	r3, [r7, #20]
 800abf0:	693a      	ldr	r2, [r7, #16]
 800abf2:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800abf4:	697b      	ldr	r3, [r7, #20]
 800abf6:	693a      	ldr	r2, [r7, #16]
 800abf8:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800abfa:	4b35      	ldr	r3, [pc, #212]	; (800acd0 <tcp_listen_input+0x1e0>)
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	1e5a      	subs	r2, r3, #1
 800ac00:	697b      	ldr	r3, [r7, #20]
 800ac02:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	691a      	ldr	r2, [r3, #16]
 800ac08:	697b      	ldr	r3, [r7, #20]
 800ac0a:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800ac0c:	697b      	ldr	r3, [r7, #20]
 800ac0e:	687a      	ldr	r2, [r7, #4]
 800ac10:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	7a5b      	ldrb	r3, [r3, #9]
 800ac16:	f003 030c 	and.w	r3, r3, #12
 800ac1a:	b2da      	uxtb	r2, r3
 800ac1c:	697b      	ldr	r3, [r7, #20]
 800ac1e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	7a1a      	ldrb	r2, [r3, #8]
 800ac24:	697b      	ldr	r3, [r7, #20]
 800ac26:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800ac28:	4b2e      	ldr	r3, [pc, #184]	; (800ace4 <tcp_listen_input+0x1f4>)
 800ac2a:	681a      	ldr	r2, [r3, #0]
 800ac2c:	697b      	ldr	r3, [r7, #20]
 800ac2e:	60da      	str	r2, [r3, #12]
 800ac30:	4a2c      	ldr	r2, [pc, #176]	; (800ace4 <tcp_listen_input+0x1f4>)
 800ac32:	697b      	ldr	r3, [r7, #20]
 800ac34:	6013      	str	r3, [r2, #0]
 800ac36:	f003 fd27 	bl	800e688 <tcp_timer_needed>
 800ac3a:	4b2b      	ldr	r3, [pc, #172]	; (800ace8 <tcp_listen_input+0x1f8>)
 800ac3c:	2201      	movs	r2, #1
 800ac3e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800ac40:	6978      	ldr	r0, [r7, #20]
 800ac42:	f001 fd8d 	bl	800c760 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800ac46:	4b23      	ldr	r3, [pc, #140]	; (800acd4 <tcp_listen_input+0x1e4>)
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	89db      	ldrh	r3, [r3, #14]
 800ac4c:	b29a      	uxth	r2, r3
 800ac4e:	697b      	ldr	r3, [r7, #20]
 800ac50:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800ac54:	697b      	ldr	r3, [r7, #20]
 800ac56:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ac5a:	697b      	ldr	r3, [r7, #20]
 800ac5c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800ac60:	697b      	ldr	r3, [r7, #20]
 800ac62:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800ac64:	697b      	ldr	r3, [r7, #20]
 800ac66:	3304      	adds	r3, #4
 800ac68:	4618      	mov	r0, r3
 800ac6a:	f005 f8eb 	bl	800fe44 <ip4_route>
 800ac6e:	4601      	mov	r1, r0
 800ac70:	697b      	ldr	r3, [r7, #20]
 800ac72:	3304      	adds	r3, #4
 800ac74:	461a      	mov	r2, r3
 800ac76:	4620      	mov	r0, r4
 800ac78:	f7ff fa32 	bl	800a0e0 <tcp_eff_send_mss_netif>
 800ac7c:	4603      	mov	r3, r0
 800ac7e:	461a      	mov	r2, r3
 800ac80:	697b      	ldr	r3, [r7, #20]
 800ac82:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800ac84:	2112      	movs	r1, #18
 800ac86:	6978      	ldr	r0, [r7, #20]
 800ac88:	f002 fc9a 	bl	800d5c0 <tcp_enqueue_flags>
 800ac8c:	4603      	mov	r3, r0
 800ac8e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800ac90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d004      	beq.n	800aca2 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800ac98:	2100      	movs	r1, #0
 800ac9a:	6978      	ldr	r0, [r7, #20]
 800ac9c:	f7fd feda 	bl	8008a54 <tcp_abandon>
      return;
 800aca0:	e006      	b.n	800acb0 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800aca2:	6978      	ldr	r0, [r7, #20]
 800aca4:	f002 fd7a 	bl	800d79c <tcp_output>
  return;
 800aca8:	e001      	b.n	800acae <tcp_listen_input+0x1be>
    return;
 800acaa:	bf00      	nop
 800acac:	e000      	b.n	800acb0 <tcp_listen_input+0x1c0>
  return;
 800acae:	bf00      	nop
}
 800acb0:	371c      	adds	r7, #28
 800acb2:	46bd      	mov	sp, r7
 800acb4:	bd90      	pop	{r4, r7, pc}
 800acb6:	bf00      	nop
 800acb8:	200005a0 	.word	0x200005a0
 800acbc:	08014794 	.word	0x08014794
 800acc0:	0801498c 	.word	0x0801498c
 800acc4:	080147e0 	.word	0x080147e0
 800acc8:	20000598 	.word	0x20000598
 800accc:	2000059e 	.word	0x2000059e
 800acd0:	20000594 	.word	0x20000594
 800acd4:	20000584 	.word	0x20000584
 800acd8:	20003dec 	.word	0x20003dec
 800acdc:	20003df0 	.word	0x20003df0
 800ace0:	20003ddc 	.word	0x20003ddc
 800ace4:	2000d3e0 	.word	0x2000d3e0
 800ace8:	2000d3dc 	.word	0x2000d3dc

0800acec <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800acec:	b580      	push	{r7, lr}
 800acee:	b086      	sub	sp, #24
 800acf0:	af04      	add	r7, sp, #16
 800acf2:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800acf4:	4b2f      	ldr	r3, [pc, #188]	; (800adb4 <tcp_timewait_input+0xc8>)
 800acf6:	781b      	ldrb	r3, [r3, #0]
 800acf8:	f003 0304 	and.w	r3, r3, #4
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d153      	bne.n	800ada8 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d106      	bne.n	800ad14 <tcp_timewait_input+0x28>
 800ad06:	4b2c      	ldr	r3, [pc, #176]	; (800adb8 <tcp_timewait_input+0xcc>)
 800ad08:	f240 22ee 	movw	r2, #750	; 0x2ee
 800ad0c:	492b      	ldr	r1, [pc, #172]	; (800adbc <tcp_timewait_input+0xd0>)
 800ad0e:	482c      	ldr	r0, [pc, #176]	; (800adc0 <tcp_timewait_input+0xd4>)
 800ad10:	f006 fb9e 	bl	8011450 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800ad14:	4b27      	ldr	r3, [pc, #156]	; (800adb4 <tcp_timewait_input+0xc8>)
 800ad16:	781b      	ldrb	r3, [r3, #0]
 800ad18:	f003 0302 	and.w	r3, r3, #2
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d02a      	beq.n	800ad76 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800ad20:	4b28      	ldr	r3, [pc, #160]	; (800adc4 <tcp_timewait_input+0xd8>)
 800ad22:	681a      	ldr	r2, [r3, #0]
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad28:	1ad3      	subs	r3, r2, r3
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	db2d      	blt.n	800ad8a <tcp_timewait_input+0x9e>
 800ad2e:	4b25      	ldr	r3, [pc, #148]	; (800adc4 <tcp_timewait_input+0xd8>)
 800ad30:	681a      	ldr	r2, [r3, #0]
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad36:	6879      	ldr	r1, [r7, #4]
 800ad38:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ad3a:	440b      	add	r3, r1
 800ad3c:	1ad3      	subs	r3, r2, r3
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	dc23      	bgt.n	800ad8a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ad42:	4b21      	ldr	r3, [pc, #132]	; (800adc8 <tcp_timewait_input+0xdc>)
 800ad44:	6819      	ldr	r1, [r3, #0]
 800ad46:	4b21      	ldr	r3, [pc, #132]	; (800adcc <tcp_timewait_input+0xe0>)
 800ad48:	881b      	ldrh	r3, [r3, #0]
 800ad4a:	461a      	mov	r2, r3
 800ad4c:	4b1d      	ldr	r3, [pc, #116]	; (800adc4 <tcp_timewait_input+0xd8>)
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ad52:	4b1f      	ldr	r3, [pc, #124]	; (800add0 <tcp_timewait_input+0xe4>)
 800ad54:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ad56:	885b      	ldrh	r3, [r3, #2]
 800ad58:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ad5a:	4a1d      	ldr	r2, [pc, #116]	; (800add0 <tcp_timewait_input+0xe4>)
 800ad5c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ad5e:	8812      	ldrh	r2, [r2, #0]
 800ad60:	b292      	uxth	r2, r2
 800ad62:	9202      	str	r2, [sp, #8]
 800ad64:	9301      	str	r3, [sp, #4]
 800ad66:	4b1b      	ldr	r3, [pc, #108]	; (800add4 <tcp_timewait_input+0xe8>)
 800ad68:	9300      	str	r3, [sp, #0]
 800ad6a:	4b1b      	ldr	r3, [pc, #108]	; (800add8 <tcp_timewait_input+0xec>)
 800ad6c:	4602      	mov	r2, r0
 800ad6e:	6878      	ldr	r0, [r7, #4]
 800ad70:	f003 fac8 	bl	800e304 <tcp_rst>
      return;
 800ad74:	e01b      	b.n	800adae <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800ad76:	4b0f      	ldr	r3, [pc, #60]	; (800adb4 <tcp_timewait_input+0xc8>)
 800ad78:	781b      	ldrb	r3, [r3, #0]
 800ad7a:	f003 0301 	and.w	r3, r3, #1
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d003      	beq.n	800ad8a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800ad82:	4b16      	ldr	r3, [pc, #88]	; (800addc <tcp_timewait_input+0xf0>)
 800ad84:	681a      	ldr	r2, [r3, #0]
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800ad8a:	4b10      	ldr	r3, [pc, #64]	; (800adcc <tcp_timewait_input+0xe0>)
 800ad8c:	881b      	ldrh	r3, [r3, #0]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d00c      	beq.n	800adac <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	8b5b      	ldrh	r3, [r3, #26]
 800ad96:	f043 0302 	orr.w	r3, r3, #2
 800ad9a:	b29a      	uxth	r2, r3
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800ada0:	6878      	ldr	r0, [r7, #4]
 800ada2:	f002 fcfb 	bl	800d79c <tcp_output>
  }
  return;
 800ada6:	e001      	b.n	800adac <tcp_timewait_input+0xc0>
    return;
 800ada8:	bf00      	nop
 800adaa:	e000      	b.n	800adae <tcp_timewait_input+0xc2>
  return;
 800adac:	bf00      	nop
}
 800adae:	3708      	adds	r7, #8
 800adb0:	46bd      	mov	sp, r7
 800adb2:	bd80      	pop	{r7, pc}
 800adb4:	200005a0 	.word	0x200005a0
 800adb8:	08014794 	.word	0x08014794
 800adbc:	080149ac 	.word	0x080149ac
 800adc0:	080147e0 	.word	0x080147e0
 800adc4:	20000594 	.word	0x20000594
 800adc8:	20000598 	.word	0x20000598
 800adcc:	2000059e 	.word	0x2000059e
 800add0:	20000584 	.word	0x20000584
 800add4:	20003dec 	.word	0x20003dec
 800add8:	20003df0 	.word	0x20003df0
 800addc:	2000d3e4 	.word	0x2000d3e4

0800ade0 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800ade0:	b590      	push	{r4, r7, lr}
 800ade2:	b08d      	sub	sp, #52	; 0x34
 800ade4:	af04      	add	r7, sp, #16
 800ade6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800ade8:	2300      	movs	r3, #0
 800adea:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800adec:	2300      	movs	r3, #0
 800adee:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d106      	bne.n	800ae04 <tcp_process+0x24>
 800adf6:	4ba5      	ldr	r3, [pc, #660]	; (800b08c <tcp_process+0x2ac>)
 800adf8:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800adfc:	49a4      	ldr	r1, [pc, #656]	; (800b090 <tcp_process+0x2b0>)
 800adfe:	48a5      	ldr	r0, [pc, #660]	; (800b094 <tcp_process+0x2b4>)
 800ae00:	f006 fb26 	bl	8011450 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800ae04:	4ba4      	ldr	r3, [pc, #656]	; (800b098 <tcp_process+0x2b8>)
 800ae06:	781b      	ldrb	r3, [r3, #0]
 800ae08:	f003 0304 	and.w	r3, r3, #4
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d04e      	beq.n	800aeae <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	7d1b      	ldrb	r3, [r3, #20]
 800ae14:	2b02      	cmp	r3, #2
 800ae16:	d108      	bne.n	800ae2a <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ae1c:	4b9f      	ldr	r3, [pc, #636]	; (800b09c <tcp_process+0x2bc>)
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	429a      	cmp	r2, r3
 800ae22:	d123      	bne.n	800ae6c <tcp_process+0x8c>
        acceptable = 1;
 800ae24:	2301      	movs	r3, #1
 800ae26:	76fb      	strb	r3, [r7, #27]
 800ae28:	e020      	b.n	800ae6c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ae2e:	4b9c      	ldr	r3, [pc, #624]	; (800b0a0 <tcp_process+0x2c0>)
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	429a      	cmp	r2, r3
 800ae34:	d102      	bne.n	800ae3c <tcp_process+0x5c>
        acceptable = 1;
 800ae36:	2301      	movs	r3, #1
 800ae38:	76fb      	strb	r3, [r7, #27]
 800ae3a:	e017      	b.n	800ae6c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800ae3c:	4b98      	ldr	r3, [pc, #608]	; (800b0a0 <tcp_process+0x2c0>)
 800ae3e:	681a      	ldr	r2, [r3, #0]
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae44:	1ad3      	subs	r3, r2, r3
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	db10      	blt.n	800ae6c <tcp_process+0x8c>
 800ae4a:	4b95      	ldr	r3, [pc, #596]	; (800b0a0 <tcp_process+0x2c0>)
 800ae4c:	681a      	ldr	r2, [r3, #0]
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae52:	6879      	ldr	r1, [r7, #4]
 800ae54:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ae56:	440b      	add	r3, r1
 800ae58:	1ad3      	subs	r3, r2, r3
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	dc06      	bgt.n	800ae6c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	8b5b      	ldrh	r3, [r3, #26]
 800ae62:	f043 0302 	orr.w	r3, r3, #2
 800ae66:	b29a      	uxth	r2, r3
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800ae6c:	7efb      	ldrb	r3, [r7, #27]
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d01b      	beq.n	800aeaa <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	7d1b      	ldrb	r3, [r3, #20]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d106      	bne.n	800ae88 <tcp_process+0xa8>
 800ae7a:	4b84      	ldr	r3, [pc, #528]	; (800b08c <tcp_process+0x2ac>)
 800ae7c:	f44f 724e 	mov.w	r2, #824	; 0x338
 800ae80:	4988      	ldr	r1, [pc, #544]	; (800b0a4 <tcp_process+0x2c4>)
 800ae82:	4884      	ldr	r0, [pc, #528]	; (800b094 <tcp_process+0x2b4>)
 800ae84:	f006 fae4 	bl	8011450 <iprintf>
      recv_flags |= TF_RESET;
 800ae88:	4b87      	ldr	r3, [pc, #540]	; (800b0a8 <tcp_process+0x2c8>)
 800ae8a:	781b      	ldrb	r3, [r3, #0]
 800ae8c:	f043 0308 	orr.w	r3, r3, #8
 800ae90:	b2da      	uxtb	r2, r3
 800ae92:	4b85      	ldr	r3, [pc, #532]	; (800b0a8 <tcp_process+0x2c8>)
 800ae94:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	8b5b      	ldrh	r3, [r3, #26]
 800ae9a:	f023 0301 	bic.w	r3, r3, #1
 800ae9e:	b29a      	uxth	r2, r3
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800aea4:	f06f 030d 	mvn.w	r3, #13
 800aea8:	e37a      	b.n	800b5a0 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800aeaa:	2300      	movs	r3, #0
 800aeac:	e378      	b.n	800b5a0 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800aeae:	4b7a      	ldr	r3, [pc, #488]	; (800b098 <tcp_process+0x2b8>)
 800aeb0:	781b      	ldrb	r3, [r3, #0]
 800aeb2:	f003 0302 	and.w	r3, r3, #2
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d010      	beq.n	800aedc <tcp_process+0xfc>
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	7d1b      	ldrb	r3, [r3, #20]
 800aebe:	2b02      	cmp	r3, #2
 800aec0:	d00c      	beq.n	800aedc <tcp_process+0xfc>
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	7d1b      	ldrb	r3, [r3, #20]
 800aec6:	2b03      	cmp	r3, #3
 800aec8:	d008      	beq.n	800aedc <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	8b5b      	ldrh	r3, [r3, #26]
 800aece:	f043 0302 	orr.w	r3, r3, #2
 800aed2:	b29a      	uxth	r2, r3
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800aed8:	2300      	movs	r3, #0
 800aeda:	e361      	b.n	800b5a0 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	8b5b      	ldrh	r3, [r3, #26]
 800aee0:	f003 0310 	and.w	r3, r3, #16
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d103      	bne.n	800aef0 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800aee8:	4b70      	ldr	r3, [pc, #448]	; (800b0ac <tcp_process+0x2cc>)
 800aeea:	681a      	ldr	r2, [r3, #0]
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	2200      	movs	r2, #0
 800aef4:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	2200      	movs	r2, #0
 800aefc:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800af00:	6878      	ldr	r0, [r7, #4]
 800af02:	f001 fc2d 	bl	800c760 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	7d1b      	ldrb	r3, [r3, #20]
 800af0a:	3b02      	subs	r3, #2
 800af0c:	2b07      	cmp	r3, #7
 800af0e:	f200 8337 	bhi.w	800b580 <tcp_process+0x7a0>
 800af12:	a201      	add	r2, pc, #4	; (adr r2, 800af18 <tcp_process+0x138>)
 800af14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af18:	0800af39 	.word	0x0800af39
 800af1c:	0800b169 	.word	0x0800b169
 800af20:	0800b2e1 	.word	0x0800b2e1
 800af24:	0800b30b 	.word	0x0800b30b
 800af28:	0800b42f 	.word	0x0800b42f
 800af2c:	0800b2e1 	.word	0x0800b2e1
 800af30:	0800b4bb 	.word	0x0800b4bb
 800af34:	0800b54b 	.word	0x0800b54b
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800af38:	4b57      	ldr	r3, [pc, #348]	; (800b098 <tcp_process+0x2b8>)
 800af3a:	781b      	ldrb	r3, [r3, #0]
 800af3c:	f003 0310 	and.w	r3, r3, #16
 800af40:	2b00      	cmp	r3, #0
 800af42:	f000 80e4 	beq.w	800b10e <tcp_process+0x32e>
 800af46:	4b54      	ldr	r3, [pc, #336]	; (800b098 <tcp_process+0x2b8>)
 800af48:	781b      	ldrb	r3, [r3, #0]
 800af4a:	f003 0302 	and.w	r3, r3, #2
 800af4e:	2b00      	cmp	r3, #0
 800af50:	f000 80dd 	beq.w	800b10e <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af58:	1c5a      	adds	r2, r3, #1
 800af5a:	4b50      	ldr	r3, [pc, #320]	; (800b09c <tcp_process+0x2bc>)
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	429a      	cmp	r2, r3
 800af60:	f040 80d5 	bne.w	800b10e <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800af64:	4b4e      	ldr	r3, [pc, #312]	; (800b0a0 <tcp_process+0x2c0>)
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	1c5a      	adds	r2, r3, #1
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800af76:	4b49      	ldr	r3, [pc, #292]	; (800b09c <tcp_process+0x2bc>)
 800af78:	681a      	ldr	r2, [r3, #0]
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800af7e:	4b4c      	ldr	r3, [pc, #304]	; (800b0b0 <tcp_process+0x2d0>)
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	89db      	ldrh	r3, [r3, #14]
 800af84:	b29a      	uxth	r2, r3
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800af98:	4b41      	ldr	r3, [pc, #260]	; (800b0a0 <tcp_process+0x2c0>)
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	1e5a      	subs	r2, r3, #1
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	2204      	movs	r2, #4
 800afa6:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	3304      	adds	r3, #4
 800afb0:	4618      	mov	r0, r3
 800afb2:	f004 ff47 	bl	800fe44 <ip4_route>
 800afb6:	4601      	mov	r1, r0
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	3304      	adds	r3, #4
 800afbc:	461a      	mov	r2, r3
 800afbe:	4620      	mov	r0, r4
 800afc0:	f7ff f88e 	bl	800a0e0 <tcp_eff_send_mss_netif>
 800afc4:	4603      	mov	r3, r0
 800afc6:	461a      	mov	r2, r3
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800afd0:	009a      	lsls	r2, r3, #2
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800afd6:	005b      	lsls	r3, r3, #1
 800afd8:	f241 111c 	movw	r1, #4380	; 0x111c
 800afdc:	428b      	cmp	r3, r1
 800afde:	bf38      	it	cc
 800afe0:	460b      	movcc	r3, r1
 800afe2:	429a      	cmp	r2, r3
 800afe4:	d204      	bcs.n	800aff0 <tcp_process+0x210>
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800afea:	009b      	lsls	r3, r3, #2
 800afec:	b29b      	uxth	r3, r3
 800afee:	e00d      	b.n	800b00c <tcp_process+0x22c>
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800aff4:	005b      	lsls	r3, r3, #1
 800aff6:	f241 121c 	movw	r2, #4380	; 0x111c
 800affa:	4293      	cmp	r3, r2
 800affc:	d904      	bls.n	800b008 <tcp_process+0x228>
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b002:	005b      	lsls	r3, r3, #1
 800b004:	b29b      	uxth	r3, r3
 800b006:	e001      	b.n	800b00c <tcp_process+0x22c>
 800b008:	f241 131c 	movw	r3, #4380	; 0x111c
 800b00c:	687a      	ldr	r2, [r7, #4]
 800b00e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d106      	bne.n	800b02a <tcp_process+0x24a>
 800b01c:	4b1b      	ldr	r3, [pc, #108]	; (800b08c <tcp_process+0x2ac>)
 800b01e:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800b022:	4924      	ldr	r1, [pc, #144]	; (800b0b4 <tcp_process+0x2d4>)
 800b024:	481b      	ldr	r0, [pc, #108]	; (800b094 <tcp_process+0x2b4>)
 800b026:	f006 fa13 	bl	8011450 <iprintf>
        --pcb->snd_queuelen;
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b030:	3b01      	subs	r3, #1
 800b032:	b29a      	uxth	r2, r3
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b03e:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800b040:	69fb      	ldr	r3, [r7, #28]
 800b042:	2b00      	cmp	r3, #0
 800b044:	d111      	bne.n	800b06a <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b04a:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800b04c:	69fb      	ldr	r3, [r7, #28]
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d106      	bne.n	800b060 <tcp_process+0x280>
 800b052:	4b0e      	ldr	r3, [pc, #56]	; (800b08c <tcp_process+0x2ac>)
 800b054:	f44f 725d 	mov.w	r2, #884	; 0x374
 800b058:	4917      	ldr	r1, [pc, #92]	; (800b0b8 <tcp_process+0x2d8>)
 800b05a:	480e      	ldr	r0, [pc, #56]	; (800b094 <tcp_process+0x2b4>)
 800b05c:	f006 f9f8 	bl	8011450 <iprintf>
          pcb->unsent = rseg->next;
 800b060:	69fb      	ldr	r3, [r7, #28]
 800b062:	681a      	ldr	r2, [r3, #0]
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	66da      	str	r2, [r3, #108]	; 0x6c
 800b068:	e003      	b.n	800b072 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 800b06a:	69fb      	ldr	r3, [r7, #28]
 800b06c:	681a      	ldr	r2, [r3, #0]
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800b072:	69f8      	ldr	r0, [r7, #28]
 800b074:	f7fe fc51 	bl	800991a <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d11d      	bne.n	800b0bc <tcp_process+0x2dc>
          pcb->rtime = -1;
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b086:	861a      	strh	r2, [r3, #48]	; 0x30
 800b088:	e01f      	b.n	800b0ca <tcp_process+0x2ea>
 800b08a:	bf00      	nop
 800b08c:	08014794 	.word	0x08014794
 800b090:	080149cc 	.word	0x080149cc
 800b094:	080147e0 	.word	0x080147e0
 800b098:	200005a0 	.word	0x200005a0
 800b09c:	20000598 	.word	0x20000598
 800b0a0:	20000594 	.word	0x20000594
 800b0a4:	080149e8 	.word	0x080149e8
 800b0a8:	200005a1 	.word	0x200005a1
 800b0ac:	2000d3e4 	.word	0x2000d3e4
 800b0b0:	20000584 	.word	0x20000584
 800b0b4:	08014a08 	.word	0x08014a08
 800b0b8:	08014a20 	.word	0x08014a20
        } else {
          pcb->rtime = 0;
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	2200      	movs	r2, #0
 800b0c0:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	2200      	movs	r2, #0
 800b0c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d00a      	beq.n	800b0ea <tcp_process+0x30a>
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b0da:	687a      	ldr	r2, [r7, #4]
 800b0dc:	6910      	ldr	r0, [r2, #16]
 800b0de:	2200      	movs	r2, #0
 800b0e0:	6879      	ldr	r1, [r7, #4]
 800b0e2:	4798      	blx	r3
 800b0e4:	4603      	mov	r3, r0
 800b0e6:	76bb      	strb	r3, [r7, #26]
 800b0e8:	e001      	b.n	800b0ee <tcp_process+0x30e>
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800b0ee:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800b0f2:	f113 0f0d 	cmn.w	r3, #13
 800b0f6:	d102      	bne.n	800b0fe <tcp_process+0x31e>
          return ERR_ABRT;
 800b0f8:	f06f 030c 	mvn.w	r3, #12
 800b0fc:	e250      	b.n	800b5a0 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	8b5b      	ldrh	r3, [r3, #26]
 800b102:	f043 0302 	orr.w	r3, r3, #2
 800b106:	b29a      	uxth	r2, r3
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800b10c:	e23a      	b.n	800b584 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800b10e:	4b9d      	ldr	r3, [pc, #628]	; (800b384 <tcp_process+0x5a4>)
 800b110:	781b      	ldrb	r3, [r3, #0]
 800b112:	f003 0310 	and.w	r3, r3, #16
 800b116:	2b00      	cmp	r3, #0
 800b118:	f000 8234 	beq.w	800b584 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b11c:	4b9a      	ldr	r3, [pc, #616]	; (800b388 <tcp_process+0x5a8>)
 800b11e:	6819      	ldr	r1, [r3, #0]
 800b120:	4b9a      	ldr	r3, [pc, #616]	; (800b38c <tcp_process+0x5ac>)
 800b122:	881b      	ldrh	r3, [r3, #0]
 800b124:	461a      	mov	r2, r3
 800b126:	4b9a      	ldr	r3, [pc, #616]	; (800b390 <tcp_process+0x5b0>)
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b12c:	4b99      	ldr	r3, [pc, #612]	; (800b394 <tcp_process+0x5b4>)
 800b12e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b130:	885b      	ldrh	r3, [r3, #2]
 800b132:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b134:	4a97      	ldr	r2, [pc, #604]	; (800b394 <tcp_process+0x5b4>)
 800b136:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b138:	8812      	ldrh	r2, [r2, #0]
 800b13a:	b292      	uxth	r2, r2
 800b13c:	9202      	str	r2, [sp, #8]
 800b13e:	9301      	str	r3, [sp, #4]
 800b140:	4b95      	ldr	r3, [pc, #596]	; (800b398 <tcp_process+0x5b8>)
 800b142:	9300      	str	r3, [sp, #0]
 800b144:	4b95      	ldr	r3, [pc, #596]	; (800b39c <tcp_process+0x5bc>)
 800b146:	4602      	mov	r2, r0
 800b148:	6878      	ldr	r0, [r7, #4]
 800b14a:	f003 f8db 	bl	800e304 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b154:	2b05      	cmp	r3, #5
 800b156:	f200 8215 	bhi.w	800b584 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	2200      	movs	r2, #0
 800b15e:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800b160:	6878      	ldr	r0, [r7, #4]
 800b162:	f002 fea5 	bl	800deb0 <tcp_rexmit_rto>
      break;
 800b166:	e20d      	b.n	800b584 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800b168:	4b86      	ldr	r3, [pc, #536]	; (800b384 <tcp_process+0x5a4>)
 800b16a:	781b      	ldrb	r3, [r3, #0]
 800b16c:	f003 0310 	and.w	r3, r3, #16
 800b170:	2b00      	cmp	r3, #0
 800b172:	f000 80a1 	beq.w	800b2b8 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b176:	4b84      	ldr	r3, [pc, #528]	; (800b388 <tcp_process+0x5a8>)
 800b178:	681a      	ldr	r2, [r3, #0]
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b17e:	1ad3      	subs	r3, r2, r3
 800b180:	3b01      	subs	r3, #1
 800b182:	2b00      	cmp	r3, #0
 800b184:	db7e      	blt.n	800b284 <tcp_process+0x4a4>
 800b186:	4b80      	ldr	r3, [pc, #512]	; (800b388 <tcp_process+0x5a8>)
 800b188:	681a      	ldr	r2, [r3, #0]
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b18e:	1ad3      	subs	r3, r2, r3
 800b190:	2b00      	cmp	r3, #0
 800b192:	dc77      	bgt.n	800b284 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	2204      	movs	r2, #4
 800b198:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d102      	bne.n	800b1a8 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800b1a2:	23fa      	movs	r3, #250	; 0xfa
 800b1a4:	76bb      	strb	r3, [r7, #26]
 800b1a6:	e01d      	b.n	800b1e4 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b1ac:	699b      	ldr	r3, [r3, #24]
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d106      	bne.n	800b1c0 <tcp_process+0x3e0>
 800b1b2:	4b7b      	ldr	r3, [pc, #492]	; (800b3a0 <tcp_process+0x5c0>)
 800b1b4:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800b1b8:	497a      	ldr	r1, [pc, #488]	; (800b3a4 <tcp_process+0x5c4>)
 800b1ba:	487b      	ldr	r0, [pc, #492]	; (800b3a8 <tcp_process+0x5c8>)
 800b1bc:	f006 f948 	bl	8011450 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b1c4:	699b      	ldr	r3, [r3, #24]
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d00a      	beq.n	800b1e0 <tcp_process+0x400>
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b1ce:	699b      	ldr	r3, [r3, #24]
 800b1d0:	687a      	ldr	r2, [r7, #4]
 800b1d2:	6910      	ldr	r0, [r2, #16]
 800b1d4:	2200      	movs	r2, #0
 800b1d6:	6879      	ldr	r1, [r7, #4]
 800b1d8:	4798      	blx	r3
 800b1da:	4603      	mov	r3, r0
 800b1dc:	76bb      	strb	r3, [r7, #26]
 800b1de:	e001      	b.n	800b1e4 <tcp_process+0x404>
 800b1e0:	23f0      	movs	r3, #240	; 0xf0
 800b1e2:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800b1e4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d00a      	beq.n	800b202 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800b1ec:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800b1f0:	f113 0f0d 	cmn.w	r3, #13
 800b1f4:	d002      	beq.n	800b1fc <tcp_process+0x41c>
              tcp_abort(pcb);
 800b1f6:	6878      	ldr	r0, [r7, #4]
 800b1f8:	f7fd fcea 	bl	8008bd0 <tcp_abort>
            }
            return ERR_ABRT;
 800b1fc:	f06f 030c 	mvn.w	r3, #12
 800b200:	e1ce      	b.n	800b5a0 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800b202:	6878      	ldr	r0, [r7, #4]
 800b204:	f000 fae0 	bl	800b7c8 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800b208:	4b68      	ldr	r3, [pc, #416]	; (800b3ac <tcp_process+0x5cc>)
 800b20a:	881b      	ldrh	r3, [r3, #0]
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d005      	beq.n	800b21c <tcp_process+0x43c>
            recv_acked--;
 800b210:	4b66      	ldr	r3, [pc, #408]	; (800b3ac <tcp_process+0x5cc>)
 800b212:	881b      	ldrh	r3, [r3, #0]
 800b214:	3b01      	subs	r3, #1
 800b216:	b29a      	uxth	r2, r3
 800b218:	4b64      	ldr	r3, [pc, #400]	; (800b3ac <tcp_process+0x5cc>)
 800b21a:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b220:	009a      	lsls	r2, r3, #2
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b226:	005b      	lsls	r3, r3, #1
 800b228:	f241 111c 	movw	r1, #4380	; 0x111c
 800b22c:	428b      	cmp	r3, r1
 800b22e:	bf38      	it	cc
 800b230:	460b      	movcc	r3, r1
 800b232:	429a      	cmp	r2, r3
 800b234:	d204      	bcs.n	800b240 <tcp_process+0x460>
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b23a:	009b      	lsls	r3, r3, #2
 800b23c:	b29b      	uxth	r3, r3
 800b23e:	e00d      	b.n	800b25c <tcp_process+0x47c>
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b244:	005b      	lsls	r3, r3, #1
 800b246:	f241 121c 	movw	r2, #4380	; 0x111c
 800b24a:	4293      	cmp	r3, r2
 800b24c:	d904      	bls.n	800b258 <tcp_process+0x478>
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b252:	005b      	lsls	r3, r3, #1
 800b254:	b29b      	uxth	r3, r3
 800b256:	e001      	b.n	800b25c <tcp_process+0x47c>
 800b258:	f241 131c 	movw	r3, #4380	; 0x111c
 800b25c:	687a      	ldr	r2, [r7, #4]
 800b25e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800b262:	4b53      	ldr	r3, [pc, #332]	; (800b3b0 <tcp_process+0x5d0>)
 800b264:	781b      	ldrb	r3, [r3, #0]
 800b266:	f003 0320 	and.w	r3, r3, #32
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d037      	beq.n	800b2de <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	8b5b      	ldrh	r3, [r3, #26]
 800b272:	f043 0302 	orr.w	r3, r3, #2
 800b276:	b29a      	uxth	r2, r3
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	2207      	movs	r2, #7
 800b280:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800b282:	e02c      	b.n	800b2de <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b284:	4b40      	ldr	r3, [pc, #256]	; (800b388 <tcp_process+0x5a8>)
 800b286:	6819      	ldr	r1, [r3, #0]
 800b288:	4b40      	ldr	r3, [pc, #256]	; (800b38c <tcp_process+0x5ac>)
 800b28a:	881b      	ldrh	r3, [r3, #0]
 800b28c:	461a      	mov	r2, r3
 800b28e:	4b40      	ldr	r3, [pc, #256]	; (800b390 <tcp_process+0x5b0>)
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b294:	4b3f      	ldr	r3, [pc, #252]	; (800b394 <tcp_process+0x5b4>)
 800b296:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b298:	885b      	ldrh	r3, [r3, #2]
 800b29a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b29c:	4a3d      	ldr	r2, [pc, #244]	; (800b394 <tcp_process+0x5b4>)
 800b29e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b2a0:	8812      	ldrh	r2, [r2, #0]
 800b2a2:	b292      	uxth	r2, r2
 800b2a4:	9202      	str	r2, [sp, #8]
 800b2a6:	9301      	str	r3, [sp, #4]
 800b2a8:	4b3b      	ldr	r3, [pc, #236]	; (800b398 <tcp_process+0x5b8>)
 800b2aa:	9300      	str	r3, [sp, #0]
 800b2ac:	4b3b      	ldr	r3, [pc, #236]	; (800b39c <tcp_process+0x5bc>)
 800b2ae:	4602      	mov	r2, r0
 800b2b0:	6878      	ldr	r0, [r7, #4]
 800b2b2:	f003 f827 	bl	800e304 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800b2b6:	e167      	b.n	800b588 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800b2b8:	4b32      	ldr	r3, [pc, #200]	; (800b384 <tcp_process+0x5a4>)
 800b2ba:	781b      	ldrb	r3, [r3, #0]
 800b2bc:	f003 0302 	and.w	r3, r3, #2
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	f000 8161 	beq.w	800b588 <tcp_process+0x7a8>
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2ca:	1e5a      	subs	r2, r3, #1
 800b2cc:	4b30      	ldr	r3, [pc, #192]	; (800b390 <tcp_process+0x5b0>)
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	429a      	cmp	r2, r3
 800b2d2:	f040 8159 	bne.w	800b588 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800b2d6:	6878      	ldr	r0, [r7, #4]
 800b2d8:	f002 fe0c 	bl	800def4 <tcp_rexmit>
      break;
 800b2dc:	e154      	b.n	800b588 <tcp_process+0x7a8>
 800b2de:	e153      	b.n	800b588 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800b2e0:	6878      	ldr	r0, [r7, #4]
 800b2e2:	f000 fa71 	bl	800b7c8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800b2e6:	4b32      	ldr	r3, [pc, #200]	; (800b3b0 <tcp_process+0x5d0>)
 800b2e8:	781b      	ldrb	r3, [r3, #0]
 800b2ea:	f003 0320 	and.w	r3, r3, #32
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	f000 814c 	beq.w	800b58c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	8b5b      	ldrh	r3, [r3, #26]
 800b2f8:	f043 0302 	orr.w	r3, r3, #2
 800b2fc:	b29a      	uxth	r2, r3
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	2207      	movs	r2, #7
 800b306:	751a      	strb	r2, [r3, #20]
      }
      break;
 800b308:	e140      	b.n	800b58c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800b30a:	6878      	ldr	r0, [r7, #4]
 800b30c:	f000 fa5c 	bl	800b7c8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800b310:	4b27      	ldr	r3, [pc, #156]	; (800b3b0 <tcp_process+0x5d0>)
 800b312:	781b      	ldrb	r3, [r3, #0]
 800b314:	f003 0320 	and.w	r3, r3, #32
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d071      	beq.n	800b400 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b31c:	4b19      	ldr	r3, [pc, #100]	; (800b384 <tcp_process+0x5a4>)
 800b31e:	781b      	ldrb	r3, [r3, #0]
 800b320:	f003 0310 	and.w	r3, r3, #16
 800b324:	2b00      	cmp	r3, #0
 800b326:	d060      	beq.n	800b3ea <tcp_process+0x60a>
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b32c:	4b16      	ldr	r3, [pc, #88]	; (800b388 <tcp_process+0x5a8>)
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	429a      	cmp	r2, r3
 800b332:	d15a      	bne.n	800b3ea <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d156      	bne.n	800b3ea <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	8b5b      	ldrh	r3, [r3, #26]
 800b340:	f043 0302 	orr.w	r3, r3, #2
 800b344:	b29a      	uxth	r2, r3
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800b34a:	6878      	ldr	r0, [r7, #4]
 800b34c:	f7fe fdbe 	bl	8009ecc <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800b350:	4b18      	ldr	r3, [pc, #96]	; (800b3b4 <tcp_process+0x5d4>)
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	687a      	ldr	r2, [r7, #4]
 800b356:	429a      	cmp	r2, r3
 800b358:	d105      	bne.n	800b366 <tcp_process+0x586>
 800b35a:	4b16      	ldr	r3, [pc, #88]	; (800b3b4 <tcp_process+0x5d4>)
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	68db      	ldr	r3, [r3, #12]
 800b360:	4a14      	ldr	r2, [pc, #80]	; (800b3b4 <tcp_process+0x5d4>)
 800b362:	6013      	str	r3, [r2, #0]
 800b364:	e02e      	b.n	800b3c4 <tcp_process+0x5e4>
 800b366:	4b13      	ldr	r3, [pc, #76]	; (800b3b4 <tcp_process+0x5d4>)
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	617b      	str	r3, [r7, #20]
 800b36c:	e027      	b.n	800b3be <tcp_process+0x5de>
 800b36e:	697b      	ldr	r3, [r7, #20]
 800b370:	68db      	ldr	r3, [r3, #12]
 800b372:	687a      	ldr	r2, [r7, #4]
 800b374:	429a      	cmp	r2, r3
 800b376:	d11f      	bne.n	800b3b8 <tcp_process+0x5d8>
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	68da      	ldr	r2, [r3, #12]
 800b37c:	697b      	ldr	r3, [r7, #20]
 800b37e:	60da      	str	r2, [r3, #12]
 800b380:	e020      	b.n	800b3c4 <tcp_process+0x5e4>
 800b382:	bf00      	nop
 800b384:	200005a0 	.word	0x200005a0
 800b388:	20000598 	.word	0x20000598
 800b38c:	2000059e 	.word	0x2000059e
 800b390:	20000594 	.word	0x20000594
 800b394:	20000584 	.word	0x20000584
 800b398:	20003dec 	.word	0x20003dec
 800b39c:	20003df0 	.word	0x20003df0
 800b3a0:	08014794 	.word	0x08014794
 800b3a4:	08014a34 	.word	0x08014a34
 800b3a8:	080147e0 	.word	0x080147e0
 800b3ac:	2000059c 	.word	0x2000059c
 800b3b0:	200005a1 	.word	0x200005a1
 800b3b4:	2000d3e0 	.word	0x2000d3e0
 800b3b8:	697b      	ldr	r3, [r7, #20]
 800b3ba:	68db      	ldr	r3, [r3, #12]
 800b3bc:	617b      	str	r3, [r7, #20]
 800b3be:	697b      	ldr	r3, [r7, #20]
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d1d4      	bne.n	800b36e <tcp_process+0x58e>
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	2200      	movs	r2, #0
 800b3c8:	60da      	str	r2, [r3, #12]
 800b3ca:	4b77      	ldr	r3, [pc, #476]	; (800b5a8 <tcp_process+0x7c8>)
 800b3cc:	2201      	movs	r2, #1
 800b3ce:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	220a      	movs	r2, #10
 800b3d4:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800b3d6:	4b75      	ldr	r3, [pc, #468]	; (800b5ac <tcp_process+0x7cc>)
 800b3d8:	681a      	ldr	r2, [r3, #0]
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	60da      	str	r2, [r3, #12]
 800b3de:	4a73      	ldr	r2, [pc, #460]	; (800b5ac <tcp_process+0x7cc>)
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	6013      	str	r3, [r2, #0]
 800b3e4:	f003 f950 	bl	800e688 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800b3e8:	e0d2      	b.n	800b590 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	8b5b      	ldrh	r3, [r3, #26]
 800b3ee:	f043 0302 	orr.w	r3, r3, #2
 800b3f2:	b29a      	uxth	r2, r3
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	2208      	movs	r2, #8
 800b3fc:	751a      	strb	r2, [r3, #20]
      break;
 800b3fe:	e0c7      	b.n	800b590 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b400:	4b6b      	ldr	r3, [pc, #428]	; (800b5b0 <tcp_process+0x7d0>)
 800b402:	781b      	ldrb	r3, [r3, #0]
 800b404:	f003 0310 	and.w	r3, r3, #16
 800b408:	2b00      	cmp	r3, #0
 800b40a:	f000 80c1 	beq.w	800b590 <tcp_process+0x7b0>
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b412:	4b68      	ldr	r3, [pc, #416]	; (800b5b4 <tcp_process+0x7d4>)
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	429a      	cmp	r2, r3
 800b418:	f040 80ba 	bne.w	800b590 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b420:	2b00      	cmp	r3, #0
 800b422:	f040 80b5 	bne.w	800b590 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	2206      	movs	r2, #6
 800b42a:	751a      	strb	r2, [r3, #20]
      break;
 800b42c:	e0b0      	b.n	800b590 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800b42e:	6878      	ldr	r0, [r7, #4]
 800b430:	f000 f9ca 	bl	800b7c8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800b434:	4b60      	ldr	r3, [pc, #384]	; (800b5b8 <tcp_process+0x7d8>)
 800b436:	781b      	ldrb	r3, [r3, #0]
 800b438:	f003 0320 	and.w	r3, r3, #32
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	f000 80a9 	beq.w	800b594 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	8b5b      	ldrh	r3, [r3, #26]
 800b446:	f043 0302 	orr.w	r3, r3, #2
 800b44a:	b29a      	uxth	r2, r3
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800b450:	6878      	ldr	r0, [r7, #4]
 800b452:	f7fe fd3b 	bl	8009ecc <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800b456:	4b59      	ldr	r3, [pc, #356]	; (800b5bc <tcp_process+0x7dc>)
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	687a      	ldr	r2, [r7, #4]
 800b45c:	429a      	cmp	r2, r3
 800b45e:	d105      	bne.n	800b46c <tcp_process+0x68c>
 800b460:	4b56      	ldr	r3, [pc, #344]	; (800b5bc <tcp_process+0x7dc>)
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	68db      	ldr	r3, [r3, #12]
 800b466:	4a55      	ldr	r2, [pc, #340]	; (800b5bc <tcp_process+0x7dc>)
 800b468:	6013      	str	r3, [r2, #0]
 800b46a:	e013      	b.n	800b494 <tcp_process+0x6b4>
 800b46c:	4b53      	ldr	r3, [pc, #332]	; (800b5bc <tcp_process+0x7dc>)
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	613b      	str	r3, [r7, #16]
 800b472:	e00c      	b.n	800b48e <tcp_process+0x6ae>
 800b474:	693b      	ldr	r3, [r7, #16]
 800b476:	68db      	ldr	r3, [r3, #12]
 800b478:	687a      	ldr	r2, [r7, #4]
 800b47a:	429a      	cmp	r2, r3
 800b47c:	d104      	bne.n	800b488 <tcp_process+0x6a8>
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	68da      	ldr	r2, [r3, #12]
 800b482:	693b      	ldr	r3, [r7, #16]
 800b484:	60da      	str	r2, [r3, #12]
 800b486:	e005      	b.n	800b494 <tcp_process+0x6b4>
 800b488:	693b      	ldr	r3, [r7, #16]
 800b48a:	68db      	ldr	r3, [r3, #12]
 800b48c:	613b      	str	r3, [r7, #16]
 800b48e:	693b      	ldr	r3, [r7, #16]
 800b490:	2b00      	cmp	r3, #0
 800b492:	d1ef      	bne.n	800b474 <tcp_process+0x694>
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	2200      	movs	r2, #0
 800b498:	60da      	str	r2, [r3, #12]
 800b49a:	4b43      	ldr	r3, [pc, #268]	; (800b5a8 <tcp_process+0x7c8>)
 800b49c:	2201      	movs	r2, #1
 800b49e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	220a      	movs	r2, #10
 800b4a4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800b4a6:	4b41      	ldr	r3, [pc, #260]	; (800b5ac <tcp_process+0x7cc>)
 800b4a8:	681a      	ldr	r2, [r3, #0]
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	60da      	str	r2, [r3, #12]
 800b4ae:	4a3f      	ldr	r2, [pc, #252]	; (800b5ac <tcp_process+0x7cc>)
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	6013      	str	r3, [r2, #0]
 800b4b4:	f003 f8e8 	bl	800e688 <tcp_timer_needed>
      }
      break;
 800b4b8:	e06c      	b.n	800b594 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800b4ba:	6878      	ldr	r0, [r7, #4]
 800b4bc:	f000 f984 	bl	800b7c8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800b4c0:	4b3b      	ldr	r3, [pc, #236]	; (800b5b0 <tcp_process+0x7d0>)
 800b4c2:	781b      	ldrb	r3, [r3, #0]
 800b4c4:	f003 0310 	and.w	r3, r3, #16
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d065      	beq.n	800b598 <tcp_process+0x7b8>
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b4d0:	4b38      	ldr	r3, [pc, #224]	; (800b5b4 <tcp_process+0x7d4>)
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	429a      	cmp	r2, r3
 800b4d6:	d15f      	bne.n	800b598 <tcp_process+0x7b8>
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d15b      	bne.n	800b598 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800b4e0:	6878      	ldr	r0, [r7, #4]
 800b4e2:	f7fe fcf3 	bl	8009ecc <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800b4e6:	4b35      	ldr	r3, [pc, #212]	; (800b5bc <tcp_process+0x7dc>)
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	687a      	ldr	r2, [r7, #4]
 800b4ec:	429a      	cmp	r2, r3
 800b4ee:	d105      	bne.n	800b4fc <tcp_process+0x71c>
 800b4f0:	4b32      	ldr	r3, [pc, #200]	; (800b5bc <tcp_process+0x7dc>)
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	68db      	ldr	r3, [r3, #12]
 800b4f6:	4a31      	ldr	r2, [pc, #196]	; (800b5bc <tcp_process+0x7dc>)
 800b4f8:	6013      	str	r3, [r2, #0]
 800b4fa:	e013      	b.n	800b524 <tcp_process+0x744>
 800b4fc:	4b2f      	ldr	r3, [pc, #188]	; (800b5bc <tcp_process+0x7dc>)
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	60fb      	str	r3, [r7, #12]
 800b502:	e00c      	b.n	800b51e <tcp_process+0x73e>
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	68db      	ldr	r3, [r3, #12]
 800b508:	687a      	ldr	r2, [r7, #4]
 800b50a:	429a      	cmp	r2, r3
 800b50c:	d104      	bne.n	800b518 <tcp_process+0x738>
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	68da      	ldr	r2, [r3, #12]
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	60da      	str	r2, [r3, #12]
 800b516:	e005      	b.n	800b524 <tcp_process+0x744>
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	68db      	ldr	r3, [r3, #12]
 800b51c:	60fb      	str	r3, [r7, #12]
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	2b00      	cmp	r3, #0
 800b522:	d1ef      	bne.n	800b504 <tcp_process+0x724>
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	2200      	movs	r2, #0
 800b528:	60da      	str	r2, [r3, #12]
 800b52a:	4b1f      	ldr	r3, [pc, #124]	; (800b5a8 <tcp_process+0x7c8>)
 800b52c:	2201      	movs	r2, #1
 800b52e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	220a      	movs	r2, #10
 800b534:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800b536:	4b1d      	ldr	r3, [pc, #116]	; (800b5ac <tcp_process+0x7cc>)
 800b538:	681a      	ldr	r2, [r3, #0]
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	60da      	str	r2, [r3, #12]
 800b53e:	4a1b      	ldr	r2, [pc, #108]	; (800b5ac <tcp_process+0x7cc>)
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	6013      	str	r3, [r2, #0]
 800b544:	f003 f8a0 	bl	800e688 <tcp_timer_needed>
      }
      break;
 800b548:	e026      	b.n	800b598 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800b54a:	6878      	ldr	r0, [r7, #4]
 800b54c:	f000 f93c 	bl	800b7c8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800b550:	4b17      	ldr	r3, [pc, #92]	; (800b5b0 <tcp_process+0x7d0>)
 800b552:	781b      	ldrb	r3, [r3, #0]
 800b554:	f003 0310 	and.w	r3, r3, #16
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d01f      	beq.n	800b59c <tcp_process+0x7bc>
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b560:	4b14      	ldr	r3, [pc, #80]	; (800b5b4 <tcp_process+0x7d4>)
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	429a      	cmp	r2, r3
 800b566:	d119      	bne.n	800b59c <tcp_process+0x7bc>
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d115      	bne.n	800b59c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800b570:	4b11      	ldr	r3, [pc, #68]	; (800b5b8 <tcp_process+0x7d8>)
 800b572:	781b      	ldrb	r3, [r3, #0]
 800b574:	f043 0310 	orr.w	r3, r3, #16
 800b578:	b2da      	uxtb	r2, r3
 800b57a:	4b0f      	ldr	r3, [pc, #60]	; (800b5b8 <tcp_process+0x7d8>)
 800b57c:	701a      	strb	r2, [r3, #0]
      }
      break;
 800b57e:	e00d      	b.n	800b59c <tcp_process+0x7bc>
    default:
      break;
 800b580:	bf00      	nop
 800b582:	e00c      	b.n	800b59e <tcp_process+0x7be>
      break;
 800b584:	bf00      	nop
 800b586:	e00a      	b.n	800b59e <tcp_process+0x7be>
      break;
 800b588:	bf00      	nop
 800b58a:	e008      	b.n	800b59e <tcp_process+0x7be>
      break;
 800b58c:	bf00      	nop
 800b58e:	e006      	b.n	800b59e <tcp_process+0x7be>
      break;
 800b590:	bf00      	nop
 800b592:	e004      	b.n	800b59e <tcp_process+0x7be>
      break;
 800b594:	bf00      	nop
 800b596:	e002      	b.n	800b59e <tcp_process+0x7be>
      break;
 800b598:	bf00      	nop
 800b59a:	e000      	b.n	800b59e <tcp_process+0x7be>
      break;
 800b59c:	bf00      	nop
  }
  return ERR_OK;
 800b59e:	2300      	movs	r3, #0
}
 800b5a0:	4618      	mov	r0, r3
 800b5a2:	3724      	adds	r7, #36	; 0x24
 800b5a4:	46bd      	mov	sp, r7
 800b5a6:	bd90      	pop	{r4, r7, pc}
 800b5a8:	2000d3dc 	.word	0x2000d3dc
 800b5ac:	2000d3f0 	.word	0x2000d3f0
 800b5b0:	200005a0 	.word	0x200005a0
 800b5b4:	20000598 	.word	0x20000598
 800b5b8:	200005a1 	.word	0x200005a1
 800b5bc:	2000d3e0 	.word	0x2000d3e0

0800b5c0 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800b5c0:	b590      	push	{r4, r7, lr}
 800b5c2:	b085      	sub	sp, #20
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	6078      	str	r0, [r7, #4]
 800b5c8:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d106      	bne.n	800b5de <tcp_oos_insert_segment+0x1e>
 800b5d0:	4b3b      	ldr	r3, [pc, #236]	; (800b6c0 <tcp_oos_insert_segment+0x100>)
 800b5d2:	f240 421f 	movw	r2, #1055	; 0x41f
 800b5d6:	493b      	ldr	r1, [pc, #236]	; (800b6c4 <tcp_oos_insert_segment+0x104>)
 800b5d8:	483b      	ldr	r0, [pc, #236]	; (800b6c8 <tcp_oos_insert_segment+0x108>)
 800b5da:	f005 ff39 	bl	8011450 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	68db      	ldr	r3, [r3, #12]
 800b5e2:	899b      	ldrh	r3, [r3, #12]
 800b5e4:	b29b      	uxth	r3, r3
 800b5e6:	4618      	mov	r0, r3
 800b5e8:	f7fb f9d8 	bl	800699c <lwip_htons>
 800b5ec:	4603      	mov	r3, r0
 800b5ee:	b2db      	uxtb	r3, r3
 800b5f0:	f003 0301 	and.w	r3, r3, #1
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d028      	beq.n	800b64a <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800b5f8:	6838      	ldr	r0, [r7, #0]
 800b5fa:	f7fe f979 	bl	80098f0 <tcp_segs_free>
    next = NULL;
 800b5fe:	2300      	movs	r3, #0
 800b600:	603b      	str	r3, [r7, #0]
 800b602:	e056      	b.n	800b6b2 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800b604:	683b      	ldr	r3, [r7, #0]
 800b606:	68db      	ldr	r3, [r3, #12]
 800b608:	899b      	ldrh	r3, [r3, #12]
 800b60a:	b29b      	uxth	r3, r3
 800b60c:	4618      	mov	r0, r3
 800b60e:	f7fb f9c5 	bl	800699c <lwip_htons>
 800b612:	4603      	mov	r3, r0
 800b614:	b2db      	uxtb	r3, r3
 800b616:	f003 0301 	and.w	r3, r3, #1
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d00d      	beq.n	800b63a <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	68db      	ldr	r3, [r3, #12]
 800b622:	899b      	ldrh	r3, [r3, #12]
 800b624:	b29c      	uxth	r4, r3
 800b626:	2001      	movs	r0, #1
 800b628:	f7fb f9b8 	bl	800699c <lwip_htons>
 800b62c:	4603      	mov	r3, r0
 800b62e:	461a      	mov	r2, r3
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	68db      	ldr	r3, [r3, #12]
 800b634:	4322      	orrs	r2, r4
 800b636:	b292      	uxth	r2, r2
 800b638:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800b63a:	683b      	ldr	r3, [r7, #0]
 800b63c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800b63e:	683b      	ldr	r3, [r7, #0]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800b644:	68f8      	ldr	r0, [r7, #12]
 800b646:	f7fe f968 	bl	800991a <tcp_seg_free>
    while (next &&
 800b64a:	683b      	ldr	r3, [r7, #0]
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d00e      	beq.n	800b66e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	891b      	ldrh	r3, [r3, #8]
 800b654:	461a      	mov	r2, r3
 800b656:	4b1d      	ldr	r3, [pc, #116]	; (800b6cc <tcp_oos_insert_segment+0x10c>)
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	441a      	add	r2, r3
 800b65c:	683b      	ldr	r3, [r7, #0]
 800b65e:	68db      	ldr	r3, [r3, #12]
 800b660:	685b      	ldr	r3, [r3, #4]
 800b662:	6839      	ldr	r1, [r7, #0]
 800b664:	8909      	ldrh	r1, [r1, #8]
 800b666:	440b      	add	r3, r1
 800b668:	1ad3      	subs	r3, r2, r3
    while (next &&
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	daca      	bge.n	800b604 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800b66e:	683b      	ldr	r3, [r7, #0]
 800b670:	2b00      	cmp	r3, #0
 800b672:	d01e      	beq.n	800b6b2 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	891b      	ldrh	r3, [r3, #8]
 800b678:	461a      	mov	r2, r3
 800b67a:	4b14      	ldr	r3, [pc, #80]	; (800b6cc <tcp_oos_insert_segment+0x10c>)
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	441a      	add	r2, r3
 800b680:	683b      	ldr	r3, [r7, #0]
 800b682:	68db      	ldr	r3, [r3, #12]
 800b684:	685b      	ldr	r3, [r3, #4]
 800b686:	1ad3      	subs	r3, r2, r3
    if (next &&
 800b688:	2b00      	cmp	r3, #0
 800b68a:	dd12      	ble.n	800b6b2 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800b68c:	683b      	ldr	r3, [r7, #0]
 800b68e:	68db      	ldr	r3, [r3, #12]
 800b690:	685b      	ldr	r3, [r3, #4]
 800b692:	b29a      	uxth	r2, r3
 800b694:	4b0d      	ldr	r3, [pc, #52]	; (800b6cc <tcp_oos_insert_segment+0x10c>)
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	b29b      	uxth	r3, r3
 800b69a:	1ad3      	subs	r3, r2, r3
 800b69c:	b29a      	uxth	r2, r3
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	685a      	ldr	r2, [r3, #4]
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	891b      	ldrh	r3, [r3, #8]
 800b6aa:	4619      	mov	r1, r3
 800b6ac:	4610      	mov	r0, r2
 800b6ae:	f7fc fb81 	bl	8007db4 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	683a      	ldr	r2, [r7, #0]
 800b6b6:	601a      	str	r2, [r3, #0]
}
 800b6b8:	bf00      	nop
 800b6ba:	3714      	adds	r7, #20
 800b6bc:	46bd      	mov	sp, r7
 800b6be:	bd90      	pop	{r4, r7, pc}
 800b6c0:	08014794 	.word	0x08014794
 800b6c4:	08014a54 	.word	0x08014a54
 800b6c8:	080147e0 	.word	0x080147e0
 800b6cc:	20000594 	.word	0x20000594

0800b6d0 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800b6d0:	b5b0      	push	{r4, r5, r7, lr}
 800b6d2:	b086      	sub	sp, #24
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	60f8      	str	r0, [r7, #12]
 800b6d8:	60b9      	str	r1, [r7, #8]
 800b6da:	607a      	str	r2, [r7, #4]
 800b6dc:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800b6de:	e03e      	b.n	800b75e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800b6e0:	68bb      	ldr	r3, [r7, #8]
 800b6e2:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800b6e4:	68bb      	ldr	r3, [r7, #8]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800b6ea:	697b      	ldr	r3, [r7, #20]
 800b6ec:	685b      	ldr	r3, [r3, #4]
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	f7fc fd6e 	bl	80081d0 <pbuf_clen>
 800b6f4:	4603      	mov	r3, r0
 800b6f6:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b6fe:	8a7a      	ldrh	r2, [r7, #18]
 800b700:	429a      	cmp	r2, r3
 800b702:	d906      	bls.n	800b712 <tcp_free_acked_segments+0x42>
 800b704:	4b2a      	ldr	r3, [pc, #168]	; (800b7b0 <tcp_free_acked_segments+0xe0>)
 800b706:	f240 4257 	movw	r2, #1111	; 0x457
 800b70a:	492a      	ldr	r1, [pc, #168]	; (800b7b4 <tcp_free_acked_segments+0xe4>)
 800b70c:	482a      	ldr	r0, [pc, #168]	; (800b7b8 <tcp_free_acked_segments+0xe8>)
 800b70e:	f005 fe9f 	bl	8011450 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800b718:	8a7b      	ldrh	r3, [r7, #18]
 800b71a:	1ad3      	subs	r3, r2, r3
 800b71c:	b29a      	uxth	r2, r3
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800b724:	697b      	ldr	r3, [r7, #20]
 800b726:	891a      	ldrh	r2, [r3, #8]
 800b728:	4b24      	ldr	r3, [pc, #144]	; (800b7bc <tcp_free_acked_segments+0xec>)
 800b72a:	881b      	ldrh	r3, [r3, #0]
 800b72c:	4413      	add	r3, r2
 800b72e:	b29a      	uxth	r2, r3
 800b730:	4b22      	ldr	r3, [pc, #136]	; (800b7bc <tcp_free_acked_segments+0xec>)
 800b732:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800b734:	6978      	ldr	r0, [r7, #20]
 800b736:	f7fe f8f0 	bl	800991a <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b740:	2b00      	cmp	r3, #0
 800b742:	d00c      	beq.n	800b75e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800b744:	68bb      	ldr	r3, [r7, #8]
 800b746:	2b00      	cmp	r3, #0
 800b748:	d109      	bne.n	800b75e <tcp_free_acked_segments+0x8e>
 800b74a:	683b      	ldr	r3, [r7, #0]
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d106      	bne.n	800b75e <tcp_free_acked_segments+0x8e>
 800b750:	4b17      	ldr	r3, [pc, #92]	; (800b7b0 <tcp_free_acked_segments+0xe0>)
 800b752:	f240 4261 	movw	r2, #1121	; 0x461
 800b756:	491a      	ldr	r1, [pc, #104]	; (800b7c0 <tcp_free_acked_segments+0xf0>)
 800b758:	4817      	ldr	r0, [pc, #92]	; (800b7b8 <tcp_free_acked_segments+0xe8>)
 800b75a:	f005 fe79 	bl	8011450 <iprintf>
  while (seg_list != NULL &&
 800b75e:	68bb      	ldr	r3, [r7, #8]
 800b760:	2b00      	cmp	r3, #0
 800b762:	d020      	beq.n	800b7a6 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800b764:	68bb      	ldr	r3, [r7, #8]
 800b766:	68db      	ldr	r3, [r3, #12]
 800b768:	685b      	ldr	r3, [r3, #4]
 800b76a:	4618      	mov	r0, r3
 800b76c:	f7fb f92b 	bl	80069c6 <lwip_htonl>
 800b770:	4604      	mov	r4, r0
 800b772:	68bb      	ldr	r3, [r7, #8]
 800b774:	891b      	ldrh	r3, [r3, #8]
 800b776:	461d      	mov	r5, r3
 800b778:	68bb      	ldr	r3, [r7, #8]
 800b77a:	68db      	ldr	r3, [r3, #12]
 800b77c:	899b      	ldrh	r3, [r3, #12]
 800b77e:	b29b      	uxth	r3, r3
 800b780:	4618      	mov	r0, r3
 800b782:	f7fb f90b 	bl	800699c <lwip_htons>
 800b786:	4603      	mov	r3, r0
 800b788:	b2db      	uxtb	r3, r3
 800b78a:	f003 0303 	and.w	r3, r3, #3
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d001      	beq.n	800b796 <tcp_free_acked_segments+0xc6>
 800b792:	2301      	movs	r3, #1
 800b794:	e000      	b.n	800b798 <tcp_free_acked_segments+0xc8>
 800b796:	2300      	movs	r3, #0
 800b798:	442b      	add	r3, r5
 800b79a:	18e2      	adds	r2, r4, r3
 800b79c:	4b09      	ldr	r3, [pc, #36]	; (800b7c4 <tcp_free_acked_segments+0xf4>)
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	dd9c      	ble.n	800b6e0 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800b7a6:	68bb      	ldr	r3, [r7, #8]
}
 800b7a8:	4618      	mov	r0, r3
 800b7aa:	3718      	adds	r7, #24
 800b7ac:	46bd      	mov	sp, r7
 800b7ae:	bdb0      	pop	{r4, r5, r7, pc}
 800b7b0:	08014794 	.word	0x08014794
 800b7b4:	08014a7c 	.word	0x08014a7c
 800b7b8:	080147e0 	.word	0x080147e0
 800b7bc:	2000059c 	.word	0x2000059c
 800b7c0:	08014aa4 	.word	0x08014aa4
 800b7c4:	20000598 	.word	0x20000598

0800b7c8 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800b7c8:	b5b0      	push	{r4, r5, r7, lr}
 800b7ca:	b094      	sub	sp, #80	; 0x50
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800b7d0:	2300      	movs	r3, #0
 800b7d2:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d106      	bne.n	800b7e8 <tcp_receive+0x20>
 800b7da:	4ba6      	ldr	r3, [pc, #664]	; (800ba74 <tcp_receive+0x2ac>)
 800b7dc:	f240 427b 	movw	r2, #1147	; 0x47b
 800b7e0:	49a5      	ldr	r1, [pc, #660]	; (800ba78 <tcp_receive+0x2b0>)
 800b7e2:	48a6      	ldr	r0, [pc, #664]	; (800ba7c <tcp_receive+0x2b4>)
 800b7e4:	f005 fe34 	bl	8011450 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	7d1b      	ldrb	r3, [r3, #20]
 800b7ec:	2b03      	cmp	r3, #3
 800b7ee:	d806      	bhi.n	800b7fe <tcp_receive+0x36>
 800b7f0:	4ba0      	ldr	r3, [pc, #640]	; (800ba74 <tcp_receive+0x2ac>)
 800b7f2:	f240 427c 	movw	r2, #1148	; 0x47c
 800b7f6:	49a2      	ldr	r1, [pc, #648]	; (800ba80 <tcp_receive+0x2b8>)
 800b7f8:	48a0      	ldr	r0, [pc, #640]	; (800ba7c <tcp_receive+0x2b4>)
 800b7fa:	f005 fe29 	bl	8011450 <iprintf>

  if (flags & TCP_ACK) {
 800b7fe:	4ba1      	ldr	r3, [pc, #644]	; (800ba84 <tcp_receive+0x2bc>)
 800b800:	781b      	ldrb	r3, [r3, #0]
 800b802:	f003 0310 	and.w	r3, r3, #16
 800b806:	2b00      	cmp	r3, #0
 800b808:	f000 8263 	beq.w	800bcd2 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b812:	461a      	mov	r2, r3
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b818:	4413      	add	r3, r2
 800b81a:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b820:	4b99      	ldr	r3, [pc, #612]	; (800ba88 <tcp_receive+0x2c0>)
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	1ad3      	subs	r3, r2, r3
 800b826:	2b00      	cmp	r3, #0
 800b828:	db1b      	blt.n	800b862 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b82e:	4b96      	ldr	r3, [pc, #600]	; (800ba88 <tcp_receive+0x2c0>)
 800b830:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800b832:	429a      	cmp	r2, r3
 800b834:	d106      	bne.n	800b844 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b83a:	4b94      	ldr	r3, [pc, #592]	; (800ba8c <tcp_receive+0x2c4>)
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	1ad3      	subs	r3, r2, r3
 800b840:	2b00      	cmp	r3, #0
 800b842:	db0e      	blt.n	800b862 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b848:	4b90      	ldr	r3, [pc, #576]	; (800ba8c <tcp_receive+0x2c4>)
 800b84a:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800b84c:	429a      	cmp	r2, r3
 800b84e:	d125      	bne.n	800b89c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800b850:	4b8f      	ldr	r3, [pc, #572]	; (800ba90 <tcp_receive+0x2c8>)
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	89db      	ldrh	r3, [r3, #14]
 800b856:	b29a      	uxth	r2, r3
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b85e:	429a      	cmp	r2, r3
 800b860:	d91c      	bls.n	800b89c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800b862:	4b8b      	ldr	r3, [pc, #556]	; (800ba90 <tcp_receive+0x2c8>)
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	89db      	ldrh	r3, [r3, #14]
 800b868:	b29a      	uxth	r2, r3
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b87c:	429a      	cmp	r2, r3
 800b87e:	d205      	bcs.n	800b88c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800b88c:	4b7e      	ldr	r3, [pc, #504]	; (800ba88 <tcp_receive+0x2c0>)
 800b88e:	681a      	ldr	r2, [r3, #0]
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800b894:	4b7d      	ldr	r3, [pc, #500]	; (800ba8c <tcp_receive+0x2c4>)
 800b896:	681a      	ldr	r2, [r3, #0]
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800b89c:	4b7b      	ldr	r3, [pc, #492]	; (800ba8c <tcp_receive+0x2c4>)
 800b89e:	681a      	ldr	r2, [r3, #0]
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b8a4:	1ad3      	subs	r3, r2, r3
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	dc58      	bgt.n	800b95c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800b8aa:	4b7a      	ldr	r3, [pc, #488]	; (800ba94 <tcp_receive+0x2cc>)
 800b8ac:	881b      	ldrh	r3, [r3, #0]
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d14b      	bne.n	800b94a <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b8b6:	687a      	ldr	r2, [r7, #4]
 800b8b8:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800b8bc:	4413      	add	r3, r2
 800b8be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b8c0:	429a      	cmp	r2, r3
 800b8c2:	d142      	bne.n	800b94a <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	db3d      	blt.n	800b94a <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b8d2:	4b6e      	ldr	r3, [pc, #440]	; (800ba8c <tcp_receive+0x2c4>)
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	429a      	cmp	r2, r3
 800b8d8:	d137      	bne.n	800b94a <tcp_receive+0x182>
              found_dupack = 1;
 800b8da:	2301      	movs	r3, #1
 800b8dc:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b8e4:	2bff      	cmp	r3, #255	; 0xff
 800b8e6:	d007      	beq.n	800b8f8 <tcp_receive+0x130>
                ++pcb->dupacks;
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b8ee:	3301      	adds	r3, #1
 800b8f0:	b2da      	uxtb	r2, r3
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b8fe:	2b03      	cmp	r3, #3
 800b900:	d91b      	bls.n	800b93a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b90c:	4413      	add	r3, r2
 800b90e:	b29a      	uxth	r2, r3
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b916:	429a      	cmp	r2, r3
 800b918:	d30a      	bcc.n	800b930 <tcp_receive+0x168>
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b924:	4413      	add	r3, r2
 800b926:	b29a      	uxth	r2, r3
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800b92e:	e004      	b.n	800b93a <tcp_receive+0x172>
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b936:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b940:	2b02      	cmp	r3, #2
 800b942:	d902      	bls.n	800b94a <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800b944:	6878      	ldr	r0, [r7, #4]
 800b946:	f002 fb41 	bl	800dfcc <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800b94a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	f040 8160 	bne.w	800bc12 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	2200      	movs	r2, #0
 800b956:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b95a:	e15a      	b.n	800bc12 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b95c:	4b4b      	ldr	r3, [pc, #300]	; (800ba8c <tcp_receive+0x2c4>)
 800b95e:	681a      	ldr	r2, [r3, #0]
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b964:	1ad3      	subs	r3, r2, r3
 800b966:	3b01      	subs	r3, #1
 800b968:	2b00      	cmp	r3, #0
 800b96a:	f2c0 814d 	blt.w	800bc08 <tcp_receive+0x440>
 800b96e:	4b47      	ldr	r3, [pc, #284]	; (800ba8c <tcp_receive+0x2c4>)
 800b970:	681a      	ldr	r2, [r3, #0]
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b976:	1ad3      	subs	r3, r2, r3
 800b978:	2b00      	cmp	r3, #0
 800b97a:	f300 8145 	bgt.w	800bc08 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	8b5b      	ldrh	r3, [r3, #26]
 800b982:	f003 0304 	and.w	r3, r3, #4
 800b986:	2b00      	cmp	r3, #0
 800b988:	d010      	beq.n	800b9ac <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	8b5b      	ldrh	r3, [r3, #26]
 800b98e:	f023 0304 	bic.w	r3, r3, #4
 800b992:	b29a      	uxth	r2, r3
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	2200      	movs	r2, #0
 800b9a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	2200      	movs	r2, #0
 800b9b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800b9ba:	10db      	asrs	r3, r3, #3
 800b9bc:	b21b      	sxth	r3, r3
 800b9be:	b29a      	uxth	r2, r3
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800b9c6:	b29b      	uxth	r3, r3
 800b9c8:	4413      	add	r3, r2
 800b9ca:	b29b      	uxth	r3, r3
 800b9cc:	b21a      	sxth	r2, r3
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800b9d4:	4b2d      	ldr	r3, [pc, #180]	; (800ba8c <tcp_receive+0x2c4>)
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	b29a      	uxth	r2, r3
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b9de:	b29b      	uxth	r3, r3
 800b9e0:	1ad3      	subs	r3, r2, r3
 800b9e2:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	2200      	movs	r2, #0
 800b9e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800b9ec:	4b27      	ldr	r3, [pc, #156]	; (800ba8c <tcp_receive+0x2c4>)
 800b9ee:	681a      	ldr	r2, [r3, #0]
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	7d1b      	ldrb	r3, [r3, #20]
 800b9f8:	2b03      	cmp	r3, #3
 800b9fa:	f240 8096 	bls.w	800bb2a <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800ba0a:	429a      	cmp	r2, r3
 800ba0c:	d244      	bcs.n	800ba98 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	8b5b      	ldrh	r3, [r3, #26]
 800ba12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d001      	beq.n	800ba1e <tcp_receive+0x256>
 800ba1a:	2301      	movs	r3, #1
 800ba1c:	e000      	b.n	800ba20 <tcp_receive+0x258>
 800ba1e:	2302      	movs	r3, #2
 800ba20:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800ba24:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800ba28:	b29a      	uxth	r2, r3
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ba2e:	fb12 f303 	smulbb	r3, r2, r3
 800ba32:	b29b      	uxth	r3, r3
 800ba34:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ba36:	4293      	cmp	r3, r2
 800ba38:	bf28      	it	cs
 800ba3a:	4613      	movcs	r3, r2
 800ba3c:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ba44:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ba46:	4413      	add	r3, r2
 800ba48:	b29a      	uxth	r2, r3
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ba50:	429a      	cmp	r2, r3
 800ba52:	d309      	bcc.n	800ba68 <tcp_receive+0x2a0>
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ba5a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ba5c:	4413      	add	r3, r2
 800ba5e:	b29a      	uxth	r2, r3
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800ba66:	e060      	b.n	800bb2a <tcp_receive+0x362>
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ba6e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800ba72:	e05a      	b.n	800bb2a <tcp_receive+0x362>
 800ba74:	08014794 	.word	0x08014794
 800ba78:	08014ac4 	.word	0x08014ac4
 800ba7c:	080147e0 	.word	0x080147e0
 800ba80:	08014ae0 	.word	0x08014ae0
 800ba84:	200005a0 	.word	0x200005a0
 800ba88:	20000594 	.word	0x20000594
 800ba8c:	20000598 	.word	0x20000598
 800ba90:	20000584 	.word	0x20000584
 800ba94:	2000059e 	.word	0x2000059e
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800ba9e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800baa0:	4413      	add	r3, r2
 800baa2:	b29a      	uxth	r2, r3
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800baaa:	429a      	cmp	r2, r3
 800baac:	d309      	bcc.n	800bac2 <tcp_receive+0x2fa>
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800bab4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bab6:	4413      	add	r3, r2
 800bab8:	b29a      	uxth	r2, r3
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800bac0:	e004      	b.n	800bacc <tcp_receive+0x304>
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bac8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800bad8:	429a      	cmp	r2, r3
 800bada:	d326      	bcc.n	800bb2a <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800bae8:	1ad3      	subs	r3, r2, r3
 800baea:	b29a      	uxth	r2, r3
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bafc:	4413      	add	r3, r2
 800bafe:	b29a      	uxth	r2, r3
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800bb06:	429a      	cmp	r2, r3
 800bb08:	d30a      	bcc.n	800bb20 <tcp_receive+0x358>
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bb14:	4413      	add	r3, r2
 800bb16:	b29a      	uxth	r2, r3
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800bb1e:	e004      	b.n	800bb2a <tcp_receive+0x362>
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bb26:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bb32:	4a98      	ldr	r2, [pc, #608]	; (800bd94 <tcp_receive+0x5cc>)
 800bb34:	6878      	ldr	r0, [r7, #4]
 800bb36:	f7ff fdcb 	bl	800b6d0 <tcp_free_acked_segments>
 800bb3a:	4602      	mov	r2, r0
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb48:	4a93      	ldr	r2, [pc, #588]	; (800bd98 <tcp_receive+0x5d0>)
 800bb4a:	6878      	ldr	r0, [r7, #4]
 800bb4c:	f7ff fdc0 	bl	800b6d0 <tcp_free_acked_segments>
 800bb50:	4602      	mov	r2, r0
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d104      	bne.n	800bb68 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bb64:	861a      	strh	r2, [r3, #48]	; 0x30
 800bb66:	e002      	b.n	800bb6e <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	2200      	movs	r2, #0
 800bb6c:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	2200      	movs	r2, #0
 800bb72:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d103      	bne.n	800bb84 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	2200      	movs	r2, #0
 800bb80:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800bb8a:	4b84      	ldr	r3, [pc, #528]	; (800bd9c <tcp_receive+0x5d4>)
 800bb8c:	881b      	ldrh	r3, [r3, #0]
 800bb8e:	4413      	add	r3, r2
 800bb90:	b29a      	uxth	r2, r3
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	8b5b      	ldrh	r3, [r3, #26]
 800bb9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d035      	beq.n	800bc10 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d118      	bne.n	800bbde <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d00c      	beq.n	800bbce <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bbbc:	68db      	ldr	r3, [r3, #12]
 800bbbe:	685b      	ldr	r3, [r3, #4]
 800bbc0:	4618      	mov	r0, r3
 800bbc2:	f7fa ff00 	bl	80069c6 <lwip_htonl>
 800bbc6:	4603      	mov	r3, r0
 800bbc8:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	dc20      	bgt.n	800bc10 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	8b5b      	ldrh	r3, [r3, #26]
 800bbd2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bbd6:	b29a      	uxth	r2, r3
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800bbdc:	e018      	b.n	800bc10 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bbe6:	68db      	ldr	r3, [r3, #12]
 800bbe8:	685b      	ldr	r3, [r3, #4]
 800bbea:	4618      	mov	r0, r3
 800bbec:	f7fa feeb 	bl	80069c6 <lwip_htonl>
 800bbf0:	4603      	mov	r3, r0
 800bbf2:	1ae3      	subs	r3, r4, r3
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	dc0b      	bgt.n	800bc10 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	8b5b      	ldrh	r3, [r3, #26]
 800bbfc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bc00:	b29a      	uxth	r2, r3
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800bc06:	e003      	b.n	800bc10 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800bc08:	6878      	ldr	r0, [r7, #4]
 800bc0a:	f002 fbcd 	bl	800e3a8 <tcp_send_empty_ack>
 800bc0e:	e000      	b.n	800bc12 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800bc10:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d05b      	beq.n	800bcd2 <tcp_receive+0x50a>
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bc1e:	4b60      	ldr	r3, [pc, #384]	; (800bda0 <tcp_receive+0x5d8>)
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	1ad3      	subs	r3, r2, r3
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	da54      	bge.n	800bcd2 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800bc28:	4b5e      	ldr	r3, [pc, #376]	; (800bda4 <tcp_receive+0x5dc>)
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	b29a      	uxth	r2, r3
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc32:	b29b      	uxth	r3, r3
 800bc34:	1ad3      	subs	r3, r2, r3
 800bc36:	b29b      	uxth	r3, r3
 800bc38:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800bc3c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800bc46:	10db      	asrs	r3, r3, #3
 800bc48:	b21b      	sxth	r3, r3
 800bc4a:	b29b      	uxth	r3, r3
 800bc4c:	1ad3      	subs	r3, r2, r3
 800bc4e:	b29b      	uxth	r3, r3
 800bc50:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800bc5a:	b29a      	uxth	r2, r3
 800bc5c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800bc60:	4413      	add	r3, r2
 800bc62:	b29b      	uxth	r3, r3
 800bc64:	b21a      	sxth	r2, r3
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800bc6a:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	da05      	bge.n	800bc7e <tcp_receive+0x4b6>
        m = (s16_t) - m;
 800bc72:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800bc76:	425b      	negs	r3, r3
 800bc78:	b29b      	uxth	r3, r3
 800bc7a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800bc7e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800bc88:	109b      	asrs	r3, r3, #2
 800bc8a:	b21b      	sxth	r3, r3
 800bc8c:	b29b      	uxth	r3, r3
 800bc8e:	1ad3      	subs	r3, r2, r3
 800bc90:	b29b      	uxth	r3, r3
 800bc92:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800bc9c:	b29a      	uxth	r2, r3
 800bc9e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800bca2:	4413      	add	r3, r2
 800bca4:	b29b      	uxth	r3, r3
 800bca6:	b21a      	sxth	r2, r3
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800bcb2:	10db      	asrs	r3, r3, #3
 800bcb4:	b21b      	sxth	r3, r3
 800bcb6:	b29a      	uxth	r2, r3
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800bcbe:	b29b      	uxth	r3, r3
 800bcc0:	4413      	add	r3, r2
 800bcc2:	b29b      	uxth	r3, r3
 800bcc4:	b21a      	sxth	r2, r3
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	2200      	movs	r2, #0
 800bcd0:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800bcd2:	4b35      	ldr	r3, [pc, #212]	; (800bda8 <tcp_receive+0x5e0>)
 800bcd4:	881b      	ldrh	r3, [r3, #0]
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	f000 84e1 	beq.w	800c69e <tcp_receive+0xed6>
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	7d1b      	ldrb	r3, [r3, #20]
 800bce0:	2b06      	cmp	r3, #6
 800bce2:	f200 84dc 	bhi.w	800c69e <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bcea:	4b30      	ldr	r3, [pc, #192]	; (800bdac <tcp_receive+0x5e4>)
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	1ad3      	subs	r3, r2, r3
 800bcf0:	3b01      	subs	r3, #1
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	f2c0 808e 	blt.w	800be14 <tcp_receive+0x64c>
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bcfc:	4b2a      	ldr	r3, [pc, #168]	; (800bda8 <tcp_receive+0x5e0>)
 800bcfe:	881b      	ldrh	r3, [r3, #0]
 800bd00:	4619      	mov	r1, r3
 800bd02:	4b2a      	ldr	r3, [pc, #168]	; (800bdac <tcp_receive+0x5e4>)
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	440b      	add	r3, r1
 800bd08:	1ad3      	subs	r3, r2, r3
 800bd0a:	3301      	adds	r3, #1
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	f300 8081 	bgt.w	800be14 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800bd12:	4b27      	ldr	r3, [pc, #156]	; (800bdb0 <tcp_receive+0x5e8>)
 800bd14:	685b      	ldr	r3, [r3, #4]
 800bd16:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bd1c:	4b23      	ldr	r3, [pc, #140]	; (800bdac <tcp_receive+0x5e4>)
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	1ad3      	subs	r3, r2, r3
 800bd22:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800bd24:	4b22      	ldr	r3, [pc, #136]	; (800bdb0 <tcp_receive+0x5e8>)
 800bd26:	685b      	ldr	r3, [r3, #4]
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d106      	bne.n	800bd3a <tcp_receive+0x572>
 800bd2c:	4b21      	ldr	r3, [pc, #132]	; (800bdb4 <tcp_receive+0x5ec>)
 800bd2e:	f240 5294 	movw	r2, #1428	; 0x594
 800bd32:	4921      	ldr	r1, [pc, #132]	; (800bdb8 <tcp_receive+0x5f0>)
 800bd34:	4821      	ldr	r0, [pc, #132]	; (800bdbc <tcp_receive+0x5f4>)
 800bd36:	f005 fb8b 	bl	8011450 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800bd3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd3c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800bd40:	4293      	cmp	r3, r2
 800bd42:	d906      	bls.n	800bd52 <tcp_receive+0x58a>
 800bd44:	4b1b      	ldr	r3, [pc, #108]	; (800bdb4 <tcp_receive+0x5ec>)
 800bd46:	f240 5295 	movw	r2, #1429	; 0x595
 800bd4a:	491d      	ldr	r1, [pc, #116]	; (800bdc0 <tcp_receive+0x5f8>)
 800bd4c:	481b      	ldr	r0, [pc, #108]	; (800bdbc <tcp_receive+0x5f4>)
 800bd4e:	f005 fb7f 	bl	8011450 <iprintf>
      off = (u16_t)off32;
 800bd52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd54:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800bd58:	4b15      	ldr	r3, [pc, #84]	; (800bdb0 <tcp_receive+0x5e8>)
 800bd5a:	685b      	ldr	r3, [r3, #4]
 800bd5c:	891b      	ldrh	r3, [r3, #8]
 800bd5e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800bd62:	429a      	cmp	r2, r3
 800bd64:	d906      	bls.n	800bd74 <tcp_receive+0x5ac>
 800bd66:	4b13      	ldr	r3, [pc, #76]	; (800bdb4 <tcp_receive+0x5ec>)
 800bd68:	f240 5297 	movw	r2, #1431	; 0x597
 800bd6c:	4915      	ldr	r1, [pc, #84]	; (800bdc4 <tcp_receive+0x5fc>)
 800bd6e:	4813      	ldr	r0, [pc, #76]	; (800bdbc <tcp_receive+0x5f4>)
 800bd70:	f005 fb6e 	bl	8011450 <iprintf>
      inseg.len -= off;
 800bd74:	4b0e      	ldr	r3, [pc, #56]	; (800bdb0 <tcp_receive+0x5e8>)
 800bd76:	891a      	ldrh	r2, [r3, #8]
 800bd78:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800bd7c:	1ad3      	subs	r3, r2, r3
 800bd7e:	b29a      	uxth	r2, r3
 800bd80:	4b0b      	ldr	r3, [pc, #44]	; (800bdb0 <tcp_receive+0x5e8>)
 800bd82:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800bd84:	4b0a      	ldr	r3, [pc, #40]	; (800bdb0 <tcp_receive+0x5e8>)
 800bd86:	685b      	ldr	r3, [r3, #4]
 800bd88:	891a      	ldrh	r2, [r3, #8]
 800bd8a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800bd8e:	1ad3      	subs	r3, r2, r3
 800bd90:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800bd92:	e029      	b.n	800bde8 <tcp_receive+0x620>
 800bd94:	08014afc 	.word	0x08014afc
 800bd98:	08014b04 	.word	0x08014b04
 800bd9c:	2000059c 	.word	0x2000059c
 800bda0:	20000598 	.word	0x20000598
 800bda4:	2000d3e4 	.word	0x2000d3e4
 800bda8:	2000059e 	.word	0x2000059e
 800bdac:	20000594 	.word	0x20000594
 800bdb0:	20000574 	.word	0x20000574
 800bdb4:	08014794 	.word	0x08014794
 800bdb8:	08014b0c 	.word	0x08014b0c
 800bdbc:	080147e0 	.word	0x080147e0
 800bdc0:	08014b1c 	.word	0x08014b1c
 800bdc4:	08014b2c 	.word	0x08014b2c
        off -= p->len;
 800bdc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bdca:	895b      	ldrh	r3, [r3, #10]
 800bdcc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800bdd0:	1ad3      	subs	r3, r2, r3
 800bdd2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800bdd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bdd8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800bdda:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800bddc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bdde:	2200      	movs	r2, #0
 800bde0:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800bde2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800bde8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bdea:	895b      	ldrh	r3, [r3, #10]
 800bdec:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800bdf0:	429a      	cmp	r2, r3
 800bdf2:	d8e9      	bhi.n	800bdc8 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800bdf4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800bdf8:	4619      	mov	r1, r3
 800bdfa:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800bdfc:	f7fc f8da 	bl	8007fb4 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be04:	4a91      	ldr	r2, [pc, #580]	; (800c04c <tcp_receive+0x884>)
 800be06:	6013      	str	r3, [r2, #0]
 800be08:	4b91      	ldr	r3, [pc, #580]	; (800c050 <tcp_receive+0x888>)
 800be0a:	68db      	ldr	r3, [r3, #12]
 800be0c:	4a8f      	ldr	r2, [pc, #572]	; (800c04c <tcp_receive+0x884>)
 800be0e:	6812      	ldr	r2, [r2, #0]
 800be10:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800be12:	e00d      	b.n	800be30 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800be14:	4b8d      	ldr	r3, [pc, #564]	; (800c04c <tcp_receive+0x884>)
 800be16:	681a      	ldr	r2, [r3, #0]
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be1c:	1ad3      	subs	r3, r2, r3
 800be1e:	2b00      	cmp	r3, #0
 800be20:	da06      	bge.n	800be30 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	8b5b      	ldrh	r3, [r3, #26]
 800be26:	f043 0302 	orr.w	r3, r3, #2
 800be2a:	b29a      	uxth	r2, r3
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800be30:	4b86      	ldr	r3, [pc, #536]	; (800c04c <tcp_receive+0x884>)
 800be32:	681a      	ldr	r2, [r3, #0]
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be38:	1ad3      	subs	r3, r2, r3
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	f2c0 842a 	blt.w	800c694 <tcp_receive+0xecc>
 800be40:	4b82      	ldr	r3, [pc, #520]	; (800c04c <tcp_receive+0x884>)
 800be42:	681a      	ldr	r2, [r3, #0]
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be48:	6879      	ldr	r1, [r7, #4]
 800be4a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800be4c:	440b      	add	r3, r1
 800be4e:	1ad3      	subs	r3, r2, r3
 800be50:	3301      	adds	r3, #1
 800be52:	2b00      	cmp	r3, #0
 800be54:	f300 841e 	bgt.w	800c694 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800be5c:	4b7b      	ldr	r3, [pc, #492]	; (800c04c <tcp_receive+0x884>)
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	429a      	cmp	r2, r3
 800be62:	f040 829a 	bne.w	800c39a <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800be66:	4b7a      	ldr	r3, [pc, #488]	; (800c050 <tcp_receive+0x888>)
 800be68:	891c      	ldrh	r4, [r3, #8]
 800be6a:	4b79      	ldr	r3, [pc, #484]	; (800c050 <tcp_receive+0x888>)
 800be6c:	68db      	ldr	r3, [r3, #12]
 800be6e:	899b      	ldrh	r3, [r3, #12]
 800be70:	b29b      	uxth	r3, r3
 800be72:	4618      	mov	r0, r3
 800be74:	f7fa fd92 	bl	800699c <lwip_htons>
 800be78:	4603      	mov	r3, r0
 800be7a:	b2db      	uxtb	r3, r3
 800be7c:	f003 0303 	and.w	r3, r3, #3
 800be80:	2b00      	cmp	r3, #0
 800be82:	d001      	beq.n	800be88 <tcp_receive+0x6c0>
 800be84:	2301      	movs	r3, #1
 800be86:	e000      	b.n	800be8a <tcp_receive+0x6c2>
 800be88:	2300      	movs	r3, #0
 800be8a:	4423      	add	r3, r4
 800be8c:	b29a      	uxth	r2, r3
 800be8e:	4b71      	ldr	r3, [pc, #452]	; (800c054 <tcp_receive+0x88c>)
 800be90:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800be96:	4b6f      	ldr	r3, [pc, #444]	; (800c054 <tcp_receive+0x88c>)
 800be98:	881b      	ldrh	r3, [r3, #0]
 800be9a:	429a      	cmp	r2, r3
 800be9c:	d275      	bcs.n	800bf8a <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800be9e:	4b6c      	ldr	r3, [pc, #432]	; (800c050 <tcp_receive+0x888>)
 800bea0:	68db      	ldr	r3, [r3, #12]
 800bea2:	899b      	ldrh	r3, [r3, #12]
 800bea4:	b29b      	uxth	r3, r3
 800bea6:	4618      	mov	r0, r3
 800bea8:	f7fa fd78 	bl	800699c <lwip_htons>
 800beac:	4603      	mov	r3, r0
 800beae:	b2db      	uxtb	r3, r3
 800beb0:	f003 0301 	and.w	r3, r3, #1
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d01f      	beq.n	800bef8 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800beb8:	4b65      	ldr	r3, [pc, #404]	; (800c050 <tcp_receive+0x888>)
 800beba:	68db      	ldr	r3, [r3, #12]
 800bebc:	899b      	ldrh	r3, [r3, #12]
 800bebe:	b29b      	uxth	r3, r3
 800bec0:	b21b      	sxth	r3, r3
 800bec2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800bec6:	b21c      	sxth	r4, r3
 800bec8:	4b61      	ldr	r3, [pc, #388]	; (800c050 <tcp_receive+0x888>)
 800beca:	68db      	ldr	r3, [r3, #12]
 800becc:	899b      	ldrh	r3, [r3, #12]
 800bece:	b29b      	uxth	r3, r3
 800bed0:	4618      	mov	r0, r3
 800bed2:	f7fa fd63 	bl	800699c <lwip_htons>
 800bed6:	4603      	mov	r3, r0
 800bed8:	b2db      	uxtb	r3, r3
 800beda:	b29b      	uxth	r3, r3
 800bedc:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800bee0:	b29b      	uxth	r3, r3
 800bee2:	4618      	mov	r0, r3
 800bee4:	f7fa fd5a 	bl	800699c <lwip_htons>
 800bee8:	4603      	mov	r3, r0
 800beea:	b21b      	sxth	r3, r3
 800beec:	4323      	orrs	r3, r4
 800beee:	b21a      	sxth	r2, r3
 800bef0:	4b57      	ldr	r3, [pc, #348]	; (800c050 <tcp_receive+0x888>)
 800bef2:	68db      	ldr	r3, [r3, #12]
 800bef4:	b292      	uxth	r2, r2
 800bef6:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800befc:	4b54      	ldr	r3, [pc, #336]	; (800c050 <tcp_receive+0x888>)
 800befe:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800bf00:	4b53      	ldr	r3, [pc, #332]	; (800c050 <tcp_receive+0x888>)
 800bf02:	68db      	ldr	r3, [r3, #12]
 800bf04:	899b      	ldrh	r3, [r3, #12]
 800bf06:	b29b      	uxth	r3, r3
 800bf08:	4618      	mov	r0, r3
 800bf0a:	f7fa fd47 	bl	800699c <lwip_htons>
 800bf0e:	4603      	mov	r3, r0
 800bf10:	b2db      	uxtb	r3, r3
 800bf12:	f003 0302 	and.w	r3, r3, #2
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d005      	beq.n	800bf26 <tcp_receive+0x75e>
            inseg.len -= 1;
 800bf1a:	4b4d      	ldr	r3, [pc, #308]	; (800c050 <tcp_receive+0x888>)
 800bf1c:	891b      	ldrh	r3, [r3, #8]
 800bf1e:	3b01      	subs	r3, #1
 800bf20:	b29a      	uxth	r2, r3
 800bf22:	4b4b      	ldr	r3, [pc, #300]	; (800c050 <tcp_receive+0x888>)
 800bf24:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800bf26:	4b4a      	ldr	r3, [pc, #296]	; (800c050 <tcp_receive+0x888>)
 800bf28:	685b      	ldr	r3, [r3, #4]
 800bf2a:	4a49      	ldr	r2, [pc, #292]	; (800c050 <tcp_receive+0x888>)
 800bf2c:	8912      	ldrh	r2, [r2, #8]
 800bf2e:	4611      	mov	r1, r2
 800bf30:	4618      	mov	r0, r3
 800bf32:	f7fb ff3f 	bl	8007db4 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800bf36:	4b46      	ldr	r3, [pc, #280]	; (800c050 <tcp_receive+0x888>)
 800bf38:	891c      	ldrh	r4, [r3, #8]
 800bf3a:	4b45      	ldr	r3, [pc, #276]	; (800c050 <tcp_receive+0x888>)
 800bf3c:	68db      	ldr	r3, [r3, #12]
 800bf3e:	899b      	ldrh	r3, [r3, #12]
 800bf40:	b29b      	uxth	r3, r3
 800bf42:	4618      	mov	r0, r3
 800bf44:	f7fa fd2a 	bl	800699c <lwip_htons>
 800bf48:	4603      	mov	r3, r0
 800bf4a:	b2db      	uxtb	r3, r3
 800bf4c:	f003 0303 	and.w	r3, r3, #3
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d001      	beq.n	800bf58 <tcp_receive+0x790>
 800bf54:	2301      	movs	r3, #1
 800bf56:	e000      	b.n	800bf5a <tcp_receive+0x792>
 800bf58:	2300      	movs	r3, #0
 800bf5a:	4423      	add	r3, r4
 800bf5c:	b29a      	uxth	r2, r3
 800bf5e:	4b3d      	ldr	r3, [pc, #244]	; (800c054 <tcp_receive+0x88c>)
 800bf60:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800bf62:	4b3c      	ldr	r3, [pc, #240]	; (800c054 <tcp_receive+0x88c>)
 800bf64:	881b      	ldrh	r3, [r3, #0]
 800bf66:	461a      	mov	r2, r3
 800bf68:	4b38      	ldr	r3, [pc, #224]	; (800c04c <tcp_receive+0x884>)
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	441a      	add	r2, r3
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf72:	6879      	ldr	r1, [r7, #4]
 800bf74:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800bf76:	440b      	add	r3, r1
 800bf78:	429a      	cmp	r2, r3
 800bf7a:	d006      	beq.n	800bf8a <tcp_receive+0x7c2>
 800bf7c:	4b36      	ldr	r3, [pc, #216]	; (800c058 <tcp_receive+0x890>)
 800bf7e:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800bf82:	4936      	ldr	r1, [pc, #216]	; (800c05c <tcp_receive+0x894>)
 800bf84:	4836      	ldr	r0, [pc, #216]	; (800c060 <tcp_receive+0x898>)
 800bf86:	f005 fa63 	bl	8011450 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	f000 80e7 	beq.w	800c162 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800bf94:	4b2e      	ldr	r3, [pc, #184]	; (800c050 <tcp_receive+0x888>)
 800bf96:	68db      	ldr	r3, [r3, #12]
 800bf98:	899b      	ldrh	r3, [r3, #12]
 800bf9a:	b29b      	uxth	r3, r3
 800bf9c:	4618      	mov	r0, r3
 800bf9e:	f7fa fcfd 	bl	800699c <lwip_htons>
 800bfa2:	4603      	mov	r3, r0
 800bfa4:	b2db      	uxtb	r3, r3
 800bfa6:	f003 0301 	and.w	r3, r3, #1
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d010      	beq.n	800bfd0 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800bfae:	e00a      	b.n	800bfc6 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bfb4:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bfba:	681a      	ldr	r2, [r3, #0]
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800bfc0:	68f8      	ldr	r0, [r7, #12]
 800bfc2:	f7fd fcaa 	bl	800991a <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d1f0      	bne.n	800bfb0 <tcp_receive+0x7e8>
 800bfce:	e0c8      	b.n	800c162 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bfd4:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800bfd6:	e052      	b.n	800c07e <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800bfd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bfda:	68db      	ldr	r3, [r3, #12]
 800bfdc:	899b      	ldrh	r3, [r3, #12]
 800bfde:	b29b      	uxth	r3, r3
 800bfe0:	4618      	mov	r0, r3
 800bfe2:	f7fa fcdb 	bl	800699c <lwip_htons>
 800bfe6:	4603      	mov	r3, r0
 800bfe8:	b2db      	uxtb	r3, r3
 800bfea:	f003 0301 	and.w	r3, r3, #1
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d03d      	beq.n	800c06e <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800bff2:	4b17      	ldr	r3, [pc, #92]	; (800c050 <tcp_receive+0x888>)
 800bff4:	68db      	ldr	r3, [r3, #12]
 800bff6:	899b      	ldrh	r3, [r3, #12]
 800bff8:	b29b      	uxth	r3, r3
 800bffa:	4618      	mov	r0, r3
 800bffc:	f7fa fcce 	bl	800699c <lwip_htons>
 800c000:	4603      	mov	r3, r0
 800c002:	b2db      	uxtb	r3, r3
 800c004:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d130      	bne.n	800c06e <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800c00c:	4b10      	ldr	r3, [pc, #64]	; (800c050 <tcp_receive+0x888>)
 800c00e:	68db      	ldr	r3, [r3, #12]
 800c010:	899b      	ldrh	r3, [r3, #12]
 800c012:	b29c      	uxth	r4, r3
 800c014:	2001      	movs	r0, #1
 800c016:	f7fa fcc1 	bl	800699c <lwip_htons>
 800c01a:	4603      	mov	r3, r0
 800c01c:	461a      	mov	r2, r3
 800c01e:	4b0c      	ldr	r3, [pc, #48]	; (800c050 <tcp_receive+0x888>)
 800c020:	68db      	ldr	r3, [r3, #12]
 800c022:	4322      	orrs	r2, r4
 800c024:	b292      	uxth	r2, r2
 800c026:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800c028:	4b09      	ldr	r3, [pc, #36]	; (800c050 <tcp_receive+0x888>)
 800c02a:	891c      	ldrh	r4, [r3, #8]
 800c02c:	4b08      	ldr	r3, [pc, #32]	; (800c050 <tcp_receive+0x888>)
 800c02e:	68db      	ldr	r3, [r3, #12]
 800c030:	899b      	ldrh	r3, [r3, #12]
 800c032:	b29b      	uxth	r3, r3
 800c034:	4618      	mov	r0, r3
 800c036:	f7fa fcb1 	bl	800699c <lwip_htons>
 800c03a:	4603      	mov	r3, r0
 800c03c:	b2db      	uxtb	r3, r3
 800c03e:	f003 0303 	and.w	r3, r3, #3
 800c042:	2b00      	cmp	r3, #0
 800c044:	d00e      	beq.n	800c064 <tcp_receive+0x89c>
 800c046:	2301      	movs	r3, #1
 800c048:	e00d      	b.n	800c066 <tcp_receive+0x89e>
 800c04a:	bf00      	nop
 800c04c:	20000594 	.word	0x20000594
 800c050:	20000574 	.word	0x20000574
 800c054:	2000059e 	.word	0x2000059e
 800c058:	08014794 	.word	0x08014794
 800c05c:	08014b3c 	.word	0x08014b3c
 800c060:	080147e0 	.word	0x080147e0
 800c064:	2300      	movs	r3, #0
 800c066:	4423      	add	r3, r4
 800c068:	b29a      	uxth	r2, r3
 800c06a:	4b98      	ldr	r3, [pc, #608]	; (800c2cc <tcp_receive+0xb04>)
 800c06c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800c06e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c070:	613b      	str	r3, [r7, #16]
              next = next->next;
 800c072:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800c078:	6938      	ldr	r0, [r7, #16]
 800c07a:	f7fd fc4e 	bl	800991a <tcp_seg_free>
            while (next &&
 800c07e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c080:	2b00      	cmp	r3, #0
 800c082:	d00e      	beq.n	800c0a2 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800c084:	4b91      	ldr	r3, [pc, #580]	; (800c2cc <tcp_receive+0xb04>)
 800c086:	881b      	ldrh	r3, [r3, #0]
 800c088:	461a      	mov	r2, r3
 800c08a:	4b91      	ldr	r3, [pc, #580]	; (800c2d0 <tcp_receive+0xb08>)
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	441a      	add	r2, r3
 800c090:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c092:	68db      	ldr	r3, [r3, #12]
 800c094:	685b      	ldr	r3, [r3, #4]
 800c096:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c098:	8909      	ldrh	r1, [r1, #8]
 800c09a:	440b      	add	r3, r1
 800c09c:	1ad3      	subs	r3, r2, r3
            while (next &&
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	da9a      	bge.n	800bfd8 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800c0a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d059      	beq.n	800c15c <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800c0a8:	4b88      	ldr	r3, [pc, #544]	; (800c2cc <tcp_receive+0xb04>)
 800c0aa:	881b      	ldrh	r3, [r3, #0]
 800c0ac:	461a      	mov	r2, r3
 800c0ae:	4b88      	ldr	r3, [pc, #544]	; (800c2d0 <tcp_receive+0xb08>)
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	441a      	add	r2, r3
 800c0b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c0b6:	68db      	ldr	r3, [r3, #12]
 800c0b8:	685b      	ldr	r3, [r3, #4]
 800c0ba:	1ad3      	subs	r3, r2, r3
            if (next &&
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	dd4d      	ble.n	800c15c <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800c0c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c0c2:	68db      	ldr	r3, [r3, #12]
 800c0c4:	685b      	ldr	r3, [r3, #4]
 800c0c6:	b29a      	uxth	r2, r3
 800c0c8:	4b81      	ldr	r3, [pc, #516]	; (800c2d0 <tcp_receive+0xb08>)
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	b29b      	uxth	r3, r3
 800c0ce:	1ad3      	subs	r3, r2, r3
 800c0d0:	b29a      	uxth	r2, r3
 800c0d2:	4b80      	ldr	r3, [pc, #512]	; (800c2d4 <tcp_receive+0xb0c>)
 800c0d4:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800c0d6:	4b7f      	ldr	r3, [pc, #508]	; (800c2d4 <tcp_receive+0xb0c>)
 800c0d8:	68db      	ldr	r3, [r3, #12]
 800c0da:	899b      	ldrh	r3, [r3, #12]
 800c0dc:	b29b      	uxth	r3, r3
 800c0de:	4618      	mov	r0, r3
 800c0e0:	f7fa fc5c 	bl	800699c <lwip_htons>
 800c0e4:	4603      	mov	r3, r0
 800c0e6:	b2db      	uxtb	r3, r3
 800c0e8:	f003 0302 	and.w	r3, r3, #2
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d005      	beq.n	800c0fc <tcp_receive+0x934>
                inseg.len -= 1;
 800c0f0:	4b78      	ldr	r3, [pc, #480]	; (800c2d4 <tcp_receive+0xb0c>)
 800c0f2:	891b      	ldrh	r3, [r3, #8]
 800c0f4:	3b01      	subs	r3, #1
 800c0f6:	b29a      	uxth	r2, r3
 800c0f8:	4b76      	ldr	r3, [pc, #472]	; (800c2d4 <tcp_receive+0xb0c>)
 800c0fa:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800c0fc:	4b75      	ldr	r3, [pc, #468]	; (800c2d4 <tcp_receive+0xb0c>)
 800c0fe:	685b      	ldr	r3, [r3, #4]
 800c100:	4a74      	ldr	r2, [pc, #464]	; (800c2d4 <tcp_receive+0xb0c>)
 800c102:	8912      	ldrh	r2, [r2, #8]
 800c104:	4611      	mov	r1, r2
 800c106:	4618      	mov	r0, r3
 800c108:	f7fb fe54 	bl	8007db4 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800c10c:	4b71      	ldr	r3, [pc, #452]	; (800c2d4 <tcp_receive+0xb0c>)
 800c10e:	891c      	ldrh	r4, [r3, #8]
 800c110:	4b70      	ldr	r3, [pc, #448]	; (800c2d4 <tcp_receive+0xb0c>)
 800c112:	68db      	ldr	r3, [r3, #12]
 800c114:	899b      	ldrh	r3, [r3, #12]
 800c116:	b29b      	uxth	r3, r3
 800c118:	4618      	mov	r0, r3
 800c11a:	f7fa fc3f 	bl	800699c <lwip_htons>
 800c11e:	4603      	mov	r3, r0
 800c120:	b2db      	uxtb	r3, r3
 800c122:	f003 0303 	and.w	r3, r3, #3
 800c126:	2b00      	cmp	r3, #0
 800c128:	d001      	beq.n	800c12e <tcp_receive+0x966>
 800c12a:	2301      	movs	r3, #1
 800c12c:	e000      	b.n	800c130 <tcp_receive+0x968>
 800c12e:	2300      	movs	r3, #0
 800c130:	4423      	add	r3, r4
 800c132:	b29a      	uxth	r2, r3
 800c134:	4b65      	ldr	r3, [pc, #404]	; (800c2cc <tcp_receive+0xb04>)
 800c136:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800c138:	4b64      	ldr	r3, [pc, #400]	; (800c2cc <tcp_receive+0xb04>)
 800c13a:	881b      	ldrh	r3, [r3, #0]
 800c13c:	461a      	mov	r2, r3
 800c13e:	4b64      	ldr	r3, [pc, #400]	; (800c2d0 <tcp_receive+0xb08>)
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	441a      	add	r2, r3
 800c144:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c146:	68db      	ldr	r3, [r3, #12]
 800c148:	685b      	ldr	r3, [r3, #4]
 800c14a:	429a      	cmp	r2, r3
 800c14c:	d006      	beq.n	800c15c <tcp_receive+0x994>
 800c14e:	4b62      	ldr	r3, [pc, #392]	; (800c2d8 <tcp_receive+0xb10>)
 800c150:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800c154:	4961      	ldr	r1, [pc, #388]	; (800c2dc <tcp_receive+0xb14>)
 800c156:	4862      	ldr	r0, [pc, #392]	; (800c2e0 <tcp_receive+0xb18>)
 800c158:	f005 f97a 	bl	8011450 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c160:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800c162:	4b5a      	ldr	r3, [pc, #360]	; (800c2cc <tcp_receive+0xb04>)
 800c164:	881b      	ldrh	r3, [r3, #0]
 800c166:	461a      	mov	r2, r3
 800c168:	4b59      	ldr	r3, [pc, #356]	; (800c2d0 <tcp_receive+0xb08>)
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	441a      	add	r2, r3
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c176:	4b55      	ldr	r3, [pc, #340]	; (800c2cc <tcp_receive+0xb04>)
 800c178:	881b      	ldrh	r3, [r3, #0]
 800c17a:	429a      	cmp	r2, r3
 800c17c:	d206      	bcs.n	800c18c <tcp_receive+0x9c4>
 800c17e:	4b56      	ldr	r3, [pc, #344]	; (800c2d8 <tcp_receive+0xb10>)
 800c180:	f240 6207 	movw	r2, #1543	; 0x607
 800c184:	4957      	ldr	r1, [pc, #348]	; (800c2e4 <tcp_receive+0xb1c>)
 800c186:	4856      	ldr	r0, [pc, #344]	; (800c2e0 <tcp_receive+0xb18>)
 800c188:	f005 f962 	bl	8011450 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c190:	4b4e      	ldr	r3, [pc, #312]	; (800c2cc <tcp_receive+0xb04>)
 800c192:	881b      	ldrh	r3, [r3, #0]
 800c194:	1ad3      	subs	r3, r2, r3
 800c196:	b29a      	uxth	r2, r3
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800c19c:	6878      	ldr	r0, [r7, #4]
 800c19e:	f7fc fe97 	bl	8008ed0 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800c1a2:	4b4c      	ldr	r3, [pc, #304]	; (800c2d4 <tcp_receive+0xb0c>)
 800c1a4:	685b      	ldr	r3, [r3, #4]
 800c1a6:	891b      	ldrh	r3, [r3, #8]
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d006      	beq.n	800c1ba <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800c1ac:	4b49      	ldr	r3, [pc, #292]	; (800c2d4 <tcp_receive+0xb0c>)
 800c1ae:	685b      	ldr	r3, [r3, #4]
 800c1b0:	4a4d      	ldr	r2, [pc, #308]	; (800c2e8 <tcp_receive+0xb20>)
 800c1b2:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800c1b4:	4b47      	ldr	r3, [pc, #284]	; (800c2d4 <tcp_receive+0xb0c>)
 800c1b6:	2200      	movs	r2, #0
 800c1b8:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800c1ba:	4b46      	ldr	r3, [pc, #280]	; (800c2d4 <tcp_receive+0xb0c>)
 800c1bc:	68db      	ldr	r3, [r3, #12]
 800c1be:	899b      	ldrh	r3, [r3, #12]
 800c1c0:	b29b      	uxth	r3, r3
 800c1c2:	4618      	mov	r0, r3
 800c1c4:	f7fa fbea 	bl	800699c <lwip_htons>
 800c1c8:	4603      	mov	r3, r0
 800c1ca:	b2db      	uxtb	r3, r3
 800c1cc:	f003 0301 	and.w	r3, r3, #1
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	f000 80b8 	beq.w	800c346 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800c1d6:	4b45      	ldr	r3, [pc, #276]	; (800c2ec <tcp_receive+0xb24>)
 800c1d8:	781b      	ldrb	r3, [r3, #0]
 800c1da:	f043 0320 	orr.w	r3, r3, #32
 800c1de:	b2da      	uxtb	r2, r3
 800c1e0:	4b42      	ldr	r3, [pc, #264]	; (800c2ec <tcp_receive+0xb24>)
 800c1e2:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800c1e4:	e0af      	b.n	800c346 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c1ea:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c1f0:	68db      	ldr	r3, [r3, #12]
 800c1f2:	685b      	ldr	r3, [r3, #4]
 800c1f4:	4a36      	ldr	r2, [pc, #216]	; (800c2d0 <tcp_receive+0xb08>)
 800c1f6:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800c1f8:	68bb      	ldr	r3, [r7, #8]
 800c1fa:	891b      	ldrh	r3, [r3, #8]
 800c1fc:	461c      	mov	r4, r3
 800c1fe:	68bb      	ldr	r3, [r7, #8]
 800c200:	68db      	ldr	r3, [r3, #12]
 800c202:	899b      	ldrh	r3, [r3, #12]
 800c204:	b29b      	uxth	r3, r3
 800c206:	4618      	mov	r0, r3
 800c208:	f7fa fbc8 	bl	800699c <lwip_htons>
 800c20c:	4603      	mov	r3, r0
 800c20e:	b2db      	uxtb	r3, r3
 800c210:	f003 0303 	and.w	r3, r3, #3
 800c214:	2b00      	cmp	r3, #0
 800c216:	d001      	beq.n	800c21c <tcp_receive+0xa54>
 800c218:	2301      	movs	r3, #1
 800c21a:	e000      	b.n	800c21e <tcp_receive+0xa56>
 800c21c:	2300      	movs	r3, #0
 800c21e:	191a      	adds	r2, r3, r4
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c224:	441a      	add	r2, r3
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c22e:	461c      	mov	r4, r3
 800c230:	68bb      	ldr	r3, [r7, #8]
 800c232:	891b      	ldrh	r3, [r3, #8]
 800c234:	461d      	mov	r5, r3
 800c236:	68bb      	ldr	r3, [r7, #8]
 800c238:	68db      	ldr	r3, [r3, #12]
 800c23a:	899b      	ldrh	r3, [r3, #12]
 800c23c:	b29b      	uxth	r3, r3
 800c23e:	4618      	mov	r0, r3
 800c240:	f7fa fbac 	bl	800699c <lwip_htons>
 800c244:	4603      	mov	r3, r0
 800c246:	b2db      	uxtb	r3, r3
 800c248:	f003 0303 	and.w	r3, r3, #3
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d001      	beq.n	800c254 <tcp_receive+0xa8c>
 800c250:	2301      	movs	r3, #1
 800c252:	e000      	b.n	800c256 <tcp_receive+0xa8e>
 800c254:	2300      	movs	r3, #0
 800c256:	442b      	add	r3, r5
 800c258:	429c      	cmp	r4, r3
 800c25a:	d206      	bcs.n	800c26a <tcp_receive+0xaa2>
 800c25c:	4b1e      	ldr	r3, [pc, #120]	; (800c2d8 <tcp_receive+0xb10>)
 800c25e:	f240 622b 	movw	r2, #1579	; 0x62b
 800c262:	4923      	ldr	r1, [pc, #140]	; (800c2f0 <tcp_receive+0xb28>)
 800c264:	481e      	ldr	r0, [pc, #120]	; (800c2e0 <tcp_receive+0xb18>)
 800c266:	f005 f8f3 	bl	8011450 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800c26a:	68bb      	ldr	r3, [r7, #8]
 800c26c:	891b      	ldrh	r3, [r3, #8]
 800c26e:	461c      	mov	r4, r3
 800c270:	68bb      	ldr	r3, [r7, #8]
 800c272:	68db      	ldr	r3, [r3, #12]
 800c274:	899b      	ldrh	r3, [r3, #12]
 800c276:	b29b      	uxth	r3, r3
 800c278:	4618      	mov	r0, r3
 800c27a:	f7fa fb8f 	bl	800699c <lwip_htons>
 800c27e:	4603      	mov	r3, r0
 800c280:	b2db      	uxtb	r3, r3
 800c282:	f003 0303 	and.w	r3, r3, #3
 800c286:	2b00      	cmp	r3, #0
 800c288:	d001      	beq.n	800c28e <tcp_receive+0xac6>
 800c28a:	2301      	movs	r3, #1
 800c28c:	e000      	b.n	800c290 <tcp_receive+0xac8>
 800c28e:	2300      	movs	r3, #0
 800c290:	1919      	adds	r1, r3, r4
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c296:	b28b      	uxth	r3, r1
 800c298:	1ad3      	subs	r3, r2, r3
 800c29a:	b29a      	uxth	r2, r3
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800c2a0:	6878      	ldr	r0, [r7, #4]
 800c2a2:	f7fc fe15 	bl	8008ed0 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800c2a6:	68bb      	ldr	r3, [r7, #8]
 800c2a8:	685b      	ldr	r3, [r3, #4]
 800c2aa:	891b      	ldrh	r3, [r3, #8]
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d028      	beq.n	800c302 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800c2b0:	4b0d      	ldr	r3, [pc, #52]	; (800c2e8 <tcp_receive+0xb20>)
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d01d      	beq.n	800c2f4 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800c2b8:	4b0b      	ldr	r3, [pc, #44]	; (800c2e8 <tcp_receive+0xb20>)
 800c2ba:	681a      	ldr	r2, [r3, #0]
 800c2bc:	68bb      	ldr	r3, [r7, #8]
 800c2be:	685b      	ldr	r3, [r3, #4]
 800c2c0:	4619      	mov	r1, r3
 800c2c2:	4610      	mov	r0, r2
 800c2c4:	f7fb ffbe 	bl	8008244 <pbuf_cat>
 800c2c8:	e018      	b.n	800c2fc <tcp_receive+0xb34>
 800c2ca:	bf00      	nop
 800c2cc:	2000059e 	.word	0x2000059e
 800c2d0:	20000594 	.word	0x20000594
 800c2d4:	20000574 	.word	0x20000574
 800c2d8:	08014794 	.word	0x08014794
 800c2dc:	08014b74 	.word	0x08014b74
 800c2e0:	080147e0 	.word	0x080147e0
 800c2e4:	08014bb0 	.word	0x08014bb0
 800c2e8:	200005a4 	.word	0x200005a4
 800c2ec:	200005a1 	.word	0x200005a1
 800c2f0:	08014bd0 	.word	0x08014bd0
            } else {
              recv_data = cseg->p;
 800c2f4:	68bb      	ldr	r3, [r7, #8]
 800c2f6:	685b      	ldr	r3, [r3, #4]
 800c2f8:	4a70      	ldr	r2, [pc, #448]	; (800c4bc <tcp_receive+0xcf4>)
 800c2fa:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800c2fc:	68bb      	ldr	r3, [r7, #8]
 800c2fe:	2200      	movs	r2, #0
 800c300:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800c302:	68bb      	ldr	r3, [r7, #8]
 800c304:	68db      	ldr	r3, [r3, #12]
 800c306:	899b      	ldrh	r3, [r3, #12]
 800c308:	b29b      	uxth	r3, r3
 800c30a:	4618      	mov	r0, r3
 800c30c:	f7fa fb46 	bl	800699c <lwip_htons>
 800c310:	4603      	mov	r3, r0
 800c312:	b2db      	uxtb	r3, r3
 800c314:	f003 0301 	and.w	r3, r3, #1
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d00d      	beq.n	800c338 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800c31c:	4b68      	ldr	r3, [pc, #416]	; (800c4c0 <tcp_receive+0xcf8>)
 800c31e:	781b      	ldrb	r3, [r3, #0]
 800c320:	f043 0320 	orr.w	r3, r3, #32
 800c324:	b2da      	uxtb	r2, r3
 800c326:	4b66      	ldr	r3, [pc, #408]	; (800c4c0 <tcp_receive+0xcf8>)
 800c328:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	7d1b      	ldrb	r3, [r3, #20]
 800c32e:	2b04      	cmp	r3, #4
 800c330:	d102      	bne.n	800c338 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	2207      	movs	r2, #7
 800c336:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800c338:	68bb      	ldr	r3, [r7, #8]
 800c33a:	681a      	ldr	r2, [r3, #0]
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800c340:	68b8      	ldr	r0, [r7, #8]
 800c342:	f7fd faea 	bl	800991a <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d008      	beq.n	800c360 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c352:	68db      	ldr	r3, [r3, #12]
 800c354:	685a      	ldr	r2, [r3, #4]
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800c35a:	429a      	cmp	r2, r3
 800c35c:	f43f af43 	beq.w	800c1e6 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	8b5b      	ldrh	r3, [r3, #26]
 800c364:	f003 0301 	and.w	r3, r3, #1
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d00e      	beq.n	800c38a <tcp_receive+0xbc2>
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	8b5b      	ldrh	r3, [r3, #26]
 800c370:	f023 0301 	bic.w	r3, r3, #1
 800c374:	b29a      	uxth	r2, r3
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	835a      	strh	r2, [r3, #26]
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	8b5b      	ldrh	r3, [r3, #26]
 800c37e:	f043 0302 	orr.w	r3, r3, #2
 800c382:	b29a      	uxth	r2, r3
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800c388:	e188      	b.n	800c69c <tcp_receive+0xed4>
        tcp_ack(pcb);
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	8b5b      	ldrh	r3, [r3, #26]
 800c38e:	f043 0301 	orr.w	r3, r3, #1
 800c392:	b29a      	uxth	r2, r3
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800c398:	e180      	b.n	800c69c <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d106      	bne.n	800c3b0 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800c3a2:	4848      	ldr	r0, [pc, #288]	; (800c4c4 <tcp_receive+0xcfc>)
 800c3a4:	f7fd faf0 	bl	8009988 <tcp_seg_copy>
 800c3a8:	4602      	mov	r2, r0
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	675a      	str	r2, [r3, #116]	; 0x74
 800c3ae:	e16d      	b.n	800c68c <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800c3b0:	2300      	movs	r3, #0
 800c3b2:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c3b8:	63bb      	str	r3, [r7, #56]	; 0x38
 800c3ba:	e157      	b.n	800c66c <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 800c3bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3be:	68db      	ldr	r3, [r3, #12]
 800c3c0:	685a      	ldr	r2, [r3, #4]
 800c3c2:	4b41      	ldr	r3, [pc, #260]	; (800c4c8 <tcp_receive+0xd00>)
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	429a      	cmp	r2, r3
 800c3c8:	d11d      	bne.n	800c406 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800c3ca:	4b3e      	ldr	r3, [pc, #248]	; (800c4c4 <tcp_receive+0xcfc>)
 800c3cc:	891a      	ldrh	r2, [r3, #8]
 800c3ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3d0:	891b      	ldrh	r3, [r3, #8]
 800c3d2:	429a      	cmp	r2, r3
 800c3d4:	f240 814f 	bls.w	800c676 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800c3d8:	483a      	ldr	r0, [pc, #232]	; (800c4c4 <tcp_receive+0xcfc>)
 800c3da:	f7fd fad5 	bl	8009988 <tcp_seg_copy>
 800c3de:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800c3e0:	697b      	ldr	r3, [r7, #20]
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	f000 8149 	beq.w	800c67a <tcp_receive+0xeb2>
                  if (prev != NULL) {
 800c3e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d003      	beq.n	800c3f6 <tcp_receive+0xc2e>
                    prev->next = cseg;
 800c3ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3f0:	697a      	ldr	r2, [r7, #20]
 800c3f2:	601a      	str	r2, [r3, #0]
 800c3f4:	e002      	b.n	800c3fc <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	697a      	ldr	r2, [r7, #20]
 800c3fa:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800c3fc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c3fe:	6978      	ldr	r0, [r7, #20]
 800c400:	f7ff f8de 	bl	800b5c0 <tcp_oos_insert_segment>
                }
                break;
 800c404:	e139      	b.n	800c67a <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800c406:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d117      	bne.n	800c43c <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800c40c:	4b2e      	ldr	r3, [pc, #184]	; (800c4c8 <tcp_receive+0xd00>)
 800c40e:	681a      	ldr	r2, [r3, #0]
 800c410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c412:	68db      	ldr	r3, [r3, #12]
 800c414:	685b      	ldr	r3, [r3, #4]
 800c416:	1ad3      	subs	r3, r2, r3
 800c418:	2b00      	cmp	r3, #0
 800c41a:	da57      	bge.n	800c4cc <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800c41c:	4829      	ldr	r0, [pc, #164]	; (800c4c4 <tcp_receive+0xcfc>)
 800c41e:	f7fd fab3 	bl	8009988 <tcp_seg_copy>
 800c422:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800c424:	69bb      	ldr	r3, [r7, #24]
 800c426:	2b00      	cmp	r3, #0
 800c428:	f000 8129 	beq.w	800c67e <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	69ba      	ldr	r2, [r7, #24]
 800c430:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800c432:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c434:	69b8      	ldr	r0, [r7, #24]
 800c436:	f7ff f8c3 	bl	800b5c0 <tcp_oos_insert_segment>
                  }
                  break;
 800c43a:	e120      	b.n	800c67e <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800c43c:	4b22      	ldr	r3, [pc, #136]	; (800c4c8 <tcp_receive+0xd00>)
 800c43e:	681a      	ldr	r2, [r3, #0]
 800c440:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c442:	68db      	ldr	r3, [r3, #12]
 800c444:	685b      	ldr	r3, [r3, #4]
 800c446:	1ad3      	subs	r3, r2, r3
 800c448:	3b01      	subs	r3, #1
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	db3e      	blt.n	800c4cc <tcp_receive+0xd04>
 800c44e:	4b1e      	ldr	r3, [pc, #120]	; (800c4c8 <tcp_receive+0xd00>)
 800c450:	681a      	ldr	r2, [r3, #0]
 800c452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c454:	68db      	ldr	r3, [r3, #12]
 800c456:	685b      	ldr	r3, [r3, #4]
 800c458:	1ad3      	subs	r3, r2, r3
 800c45a:	3301      	adds	r3, #1
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	dc35      	bgt.n	800c4cc <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800c460:	4818      	ldr	r0, [pc, #96]	; (800c4c4 <tcp_receive+0xcfc>)
 800c462:	f7fd fa91 	bl	8009988 <tcp_seg_copy>
 800c466:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800c468:	69fb      	ldr	r3, [r7, #28]
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	f000 8109 	beq.w	800c682 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800c470:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c472:	68db      	ldr	r3, [r3, #12]
 800c474:	685b      	ldr	r3, [r3, #4]
 800c476:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c478:	8912      	ldrh	r2, [r2, #8]
 800c47a:	441a      	add	r2, r3
 800c47c:	4b12      	ldr	r3, [pc, #72]	; (800c4c8 <tcp_receive+0xd00>)
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	1ad3      	subs	r3, r2, r3
 800c482:	2b00      	cmp	r3, #0
 800c484:	dd12      	ble.n	800c4ac <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800c486:	4b10      	ldr	r3, [pc, #64]	; (800c4c8 <tcp_receive+0xd00>)
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	b29a      	uxth	r2, r3
 800c48c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c48e:	68db      	ldr	r3, [r3, #12]
 800c490:	685b      	ldr	r3, [r3, #4]
 800c492:	b29b      	uxth	r3, r3
 800c494:	1ad3      	subs	r3, r2, r3
 800c496:	b29a      	uxth	r2, r3
 800c498:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c49a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800c49c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c49e:	685a      	ldr	r2, [r3, #4]
 800c4a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4a2:	891b      	ldrh	r3, [r3, #8]
 800c4a4:	4619      	mov	r1, r3
 800c4a6:	4610      	mov	r0, r2
 800c4a8:	f7fb fc84 	bl	8007db4 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800c4ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4ae:	69fa      	ldr	r2, [r7, #28]
 800c4b0:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800c4b2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c4b4:	69f8      	ldr	r0, [r7, #28]
 800c4b6:	f7ff f883 	bl	800b5c0 <tcp_oos_insert_segment>
                  }
                  break;
 800c4ba:	e0e2      	b.n	800c682 <tcp_receive+0xeba>
 800c4bc:	200005a4 	.word	0x200005a4
 800c4c0:	200005a1 	.word	0x200005a1
 800c4c4:	20000574 	.word	0x20000574
 800c4c8:	20000594 	.word	0x20000594
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800c4cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4ce:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800c4d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	f040 80c6 	bne.w	800c666 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800c4da:	4b80      	ldr	r3, [pc, #512]	; (800c6dc <tcp_receive+0xf14>)
 800c4dc:	681a      	ldr	r2, [r3, #0]
 800c4de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4e0:	68db      	ldr	r3, [r3, #12]
 800c4e2:	685b      	ldr	r3, [r3, #4]
 800c4e4:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	f340 80bd 	ble.w	800c666 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800c4ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4ee:	68db      	ldr	r3, [r3, #12]
 800c4f0:	899b      	ldrh	r3, [r3, #12]
 800c4f2:	b29b      	uxth	r3, r3
 800c4f4:	4618      	mov	r0, r3
 800c4f6:	f7fa fa51 	bl	800699c <lwip_htons>
 800c4fa:	4603      	mov	r3, r0
 800c4fc:	b2db      	uxtb	r3, r3
 800c4fe:	f003 0301 	and.w	r3, r3, #1
 800c502:	2b00      	cmp	r3, #0
 800c504:	f040 80bf 	bne.w	800c686 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800c508:	4875      	ldr	r0, [pc, #468]	; (800c6e0 <tcp_receive+0xf18>)
 800c50a:	f7fd fa3d 	bl	8009988 <tcp_seg_copy>
 800c50e:	4602      	mov	r2, r0
 800c510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c512:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800c514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	2b00      	cmp	r3, #0
 800c51a:	f000 80b6 	beq.w	800c68a <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800c51e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c520:	68db      	ldr	r3, [r3, #12]
 800c522:	685b      	ldr	r3, [r3, #4]
 800c524:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c526:	8912      	ldrh	r2, [r2, #8]
 800c528:	441a      	add	r2, r3
 800c52a:	4b6c      	ldr	r3, [pc, #432]	; (800c6dc <tcp_receive+0xf14>)
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	1ad3      	subs	r3, r2, r3
 800c530:	2b00      	cmp	r3, #0
 800c532:	dd12      	ble.n	800c55a <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800c534:	4b69      	ldr	r3, [pc, #420]	; (800c6dc <tcp_receive+0xf14>)
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	b29a      	uxth	r2, r3
 800c53a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c53c:	68db      	ldr	r3, [r3, #12]
 800c53e:	685b      	ldr	r3, [r3, #4]
 800c540:	b29b      	uxth	r3, r3
 800c542:	1ad3      	subs	r3, r2, r3
 800c544:	b29a      	uxth	r2, r3
 800c546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c548:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800c54a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c54c:	685a      	ldr	r2, [r3, #4]
 800c54e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c550:	891b      	ldrh	r3, [r3, #8]
 800c552:	4619      	mov	r1, r3
 800c554:	4610      	mov	r0, r2
 800c556:	f7fb fc2d 	bl	8007db4 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800c55a:	4b62      	ldr	r3, [pc, #392]	; (800c6e4 <tcp_receive+0xf1c>)
 800c55c:	881b      	ldrh	r3, [r3, #0]
 800c55e:	461a      	mov	r2, r3
 800c560:	4b5e      	ldr	r3, [pc, #376]	; (800c6dc <tcp_receive+0xf14>)
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	441a      	add	r2, r3
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c56a:	6879      	ldr	r1, [r7, #4]
 800c56c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c56e:	440b      	add	r3, r1
 800c570:	1ad3      	subs	r3, r2, r3
 800c572:	2b00      	cmp	r3, #0
 800c574:	f340 8089 	ble.w	800c68a <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800c578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	68db      	ldr	r3, [r3, #12]
 800c57e:	899b      	ldrh	r3, [r3, #12]
 800c580:	b29b      	uxth	r3, r3
 800c582:	4618      	mov	r0, r3
 800c584:	f7fa fa0a 	bl	800699c <lwip_htons>
 800c588:	4603      	mov	r3, r0
 800c58a:	b2db      	uxtb	r3, r3
 800c58c:	f003 0301 	and.w	r3, r3, #1
 800c590:	2b00      	cmp	r3, #0
 800c592:	d022      	beq.n	800c5da <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800c594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	68db      	ldr	r3, [r3, #12]
 800c59a:	899b      	ldrh	r3, [r3, #12]
 800c59c:	b29b      	uxth	r3, r3
 800c59e:	b21b      	sxth	r3, r3
 800c5a0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800c5a4:	b21c      	sxth	r4, r3
 800c5a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	68db      	ldr	r3, [r3, #12]
 800c5ac:	899b      	ldrh	r3, [r3, #12]
 800c5ae:	b29b      	uxth	r3, r3
 800c5b0:	4618      	mov	r0, r3
 800c5b2:	f7fa f9f3 	bl	800699c <lwip_htons>
 800c5b6:	4603      	mov	r3, r0
 800c5b8:	b2db      	uxtb	r3, r3
 800c5ba:	b29b      	uxth	r3, r3
 800c5bc:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800c5c0:	b29b      	uxth	r3, r3
 800c5c2:	4618      	mov	r0, r3
 800c5c4:	f7fa f9ea 	bl	800699c <lwip_htons>
 800c5c8:	4603      	mov	r3, r0
 800c5ca:	b21b      	sxth	r3, r3
 800c5cc:	4323      	orrs	r3, r4
 800c5ce:	b21a      	sxth	r2, r3
 800c5d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	68db      	ldr	r3, [r3, #12]
 800c5d6:	b292      	uxth	r2, r2
 800c5d8:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5de:	b29a      	uxth	r2, r3
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c5e4:	4413      	add	r3, r2
 800c5e6:	b299      	uxth	r1, r3
 800c5e8:	4b3c      	ldr	r3, [pc, #240]	; (800c6dc <tcp_receive+0xf14>)
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	b29a      	uxth	r2, r3
 800c5ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	1a8a      	subs	r2, r1, r2
 800c5f4:	b292      	uxth	r2, r2
 800c5f6:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800c5f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	685a      	ldr	r2, [r3, #4]
 800c5fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	891b      	ldrh	r3, [r3, #8]
 800c604:	4619      	mov	r1, r3
 800c606:	4610      	mov	r0, r2
 800c608:	f7fb fbd4 	bl	8007db4 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800c60c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	891c      	ldrh	r4, [r3, #8]
 800c612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	68db      	ldr	r3, [r3, #12]
 800c618:	899b      	ldrh	r3, [r3, #12]
 800c61a:	b29b      	uxth	r3, r3
 800c61c:	4618      	mov	r0, r3
 800c61e:	f7fa f9bd 	bl	800699c <lwip_htons>
 800c622:	4603      	mov	r3, r0
 800c624:	b2db      	uxtb	r3, r3
 800c626:	f003 0303 	and.w	r3, r3, #3
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d001      	beq.n	800c632 <tcp_receive+0xe6a>
 800c62e:	2301      	movs	r3, #1
 800c630:	e000      	b.n	800c634 <tcp_receive+0xe6c>
 800c632:	2300      	movs	r3, #0
 800c634:	4423      	add	r3, r4
 800c636:	b29a      	uxth	r2, r3
 800c638:	4b2a      	ldr	r3, [pc, #168]	; (800c6e4 <tcp_receive+0xf1c>)
 800c63a:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800c63c:	4b29      	ldr	r3, [pc, #164]	; (800c6e4 <tcp_receive+0xf1c>)
 800c63e:	881b      	ldrh	r3, [r3, #0]
 800c640:	461a      	mov	r2, r3
 800c642:	4b26      	ldr	r3, [pc, #152]	; (800c6dc <tcp_receive+0xf14>)
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	441a      	add	r2, r3
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c64c:	6879      	ldr	r1, [r7, #4]
 800c64e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c650:	440b      	add	r3, r1
 800c652:	429a      	cmp	r2, r3
 800c654:	d019      	beq.n	800c68a <tcp_receive+0xec2>
 800c656:	4b24      	ldr	r3, [pc, #144]	; (800c6e8 <tcp_receive+0xf20>)
 800c658:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800c65c:	4923      	ldr	r1, [pc, #140]	; (800c6ec <tcp_receive+0xf24>)
 800c65e:	4824      	ldr	r0, [pc, #144]	; (800c6f0 <tcp_receive+0xf28>)
 800c660:	f004 fef6 	bl	8011450 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800c664:	e011      	b.n	800c68a <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800c666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	63bb      	str	r3, [r7, #56]	; 0x38
 800c66c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c66e:	2b00      	cmp	r3, #0
 800c670:	f47f aea4 	bne.w	800c3bc <tcp_receive+0xbf4>
 800c674:	e00a      	b.n	800c68c <tcp_receive+0xec4>
                break;
 800c676:	bf00      	nop
 800c678:	e008      	b.n	800c68c <tcp_receive+0xec4>
                break;
 800c67a:	bf00      	nop
 800c67c:	e006      	b.n	800c68c <tcp_receive+0xec4>
                  break;
 800c67e:	bf00      	nop
 800c680:	e004      	b.n	800c68c <tcp_receive+0xec4>
                  break;
 800c682:	bf00      	nop
 800c684:	e002      	b.n	800c68c <tcp_receive+0xec4>
                  break;
 800c686:	bf00      	nop
 800c688:	e000      	b.n	800c68c <tcp_receive+0xec4>
                break;
 800c68a:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800c68c:	6878      	ldr	r0, [r7, #4]
 800c68e:	f001 fe8b 	bl	800e3a8 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800c692:	e003      	b.n	800c69c <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800c694:	6878      	ldr	r0, [r7, #4]
 800c696:	f001 fe87 	bl	800e3a8 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800c69a:	e01a      	b.n	800c6d2 <tcp_receive+0xf0a>
 800c69c:	e019      	b.n	800c6d2 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800c69e:	4b0f      	ldr	r3, [pc, #60]	; (800c6dc <tcp_receive+0xf14>)
 800c6a0:	681a      	ldr	r2, [r3, #0]
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6a6:	1ad3      	subs	r3, r2, r3
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	db0a      	blt.n	800c6c2 <tcp_receive+0xefa>
 800c6ac:	4b0b      	ldr	r3, [pc, #44]	; (800c6dc <tcp_receive+0xf14>)
 800c6ae:	681a      	ldr	r2, [r3, #0]
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6b4:	6879      	ldr	r1, [r7, #4]
 800c6b6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c6b8:	440b      	add	r3, r1
 800c6ba:	1ad3      	subs	r3, r2, r3
 800c6bc:	3301      	adds	r3, #1
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	dd07      	ble.n	800c6d2 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	8b5b      	ldrh	r3, [r3, #26]
 800c6c6:	f043 0302 	orr.w	r3, r3, #2
 800c6ca:	b29a      	uxth	r2, r3
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800c6d0:	e7ff      	b.n	800c6d2 <tcp_receive+0xf0a>
 800c6d2:	bf00      	nop
 800c6d4:	3750      	adds	r7, #80	; 0x50
 800c6d6:	46bd      	mov	sp, r7
 800c6d8:	bdb0      	pop	{r4, r5, r7, pc}
 800c6da:	bf00      	nop
 800c6dc:	20000594 	.word	0x20000594
 800c6e0:	20000574 	.word	0x20000574
 800c6e4:	2000059e 	.word	0x2000059e
 800c6e8:	08014794 	.word	0x08014794
 800c6ec:	08014b3c 	.word	0x08014b3c
 800c6f0:	080147e0 	.word	0x080147e0

0800c6f4 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800c6f4:	b480      	push	{r7}
 800c6f6:	b083      	sub	sp, #12
 800c6f8:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800c6fa:	4b15      	ldr	r3, [pc, #84]	; (800c750 <tcp_get_next_optbyte+0x5c>)
 800c6fc:	881b      	ldrh	r3, [r3, #0]
 800c6fe:	1c5a      	adds	r2, r3, #1
 800c700:	b291      	uxth	r1, r2
 800c702:	4a13      	ldr	r2, [pc, #76]	; (800c750 <tcp_get_next_optbyte+0x5c>)
 800c704:	8011      	strh	r1, [r2, #0]
 800c706:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800c708:	4b12      	ldr	r3, [pc, #72]	; (800c754 <tcp_get_next_optbyte+0x60>)
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d004      	beq.n	800c71a <tcp_get_next_optbyte+0x26>
 800c710:	4b11      	ldr	r3, [pc, #68]	; (800c758 <tcp_get_next_optbyte+0x64>)
 800c712:	881b      	ldrh	r3, [r3, #0]
 800c714:	88fa      	ldrh	r2, [r7, #6]
 800c716:	429a      	cmp	r2, r3
 800c718:	d208      	bcs.n	800c72c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800c71a:	4b10      	ldr	r3, [pc, #64]	; (800c75c <tcp_get_next_optbyte+0x68>)
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	3314      	adds	r3, #20
 800c720:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800c722:	88fb      	ldrh	r3, [r7, #6]
 800c724:	683a      	ldr	r2, [r7, #0]
 800c726:	4413      	add	r3, r2
 800c728:	781b      	ldrb	r3, [r3, #0]
 800c72a:	e00b      	b.n	800c744 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800c72c:	88fb      	ldrh	r3, [r7, #6]
 800c72e:	b2da      	uxtb	r2, r3
 800c730:	4b09      	ldr	r3, [pc, #36]	; (800c758 <tcp_get_next_optbyte+0x64>)
 800c732:	881b      	ldrh	r3, [r3, #0]
 800c734:	b2db      	uxtb	r3, r3
 800c736:	1ad3      	subs	r3, r2, r3
 800c738:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800c73a:	4b06      	ldr	r3, [pc, #24]	; (800c754 <tcp_get_next_optbyte+0x60>)
 800c73c:	681a      	ldr	r2, [r3, #0]
 800c73e:	797b      	ldrb	r3, [r7, #5]
 800c740:	4413      	add	r3, r2
 800c742:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c744:	4618      	mov	r0, r3
 800c746:	370c      	adds	r7, #12
 800c748:	46bd      	mov	sp, r7
 800c74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c74e:	4770      	bx	lr
 800c750:	20000590 	.word	0x20000590
 800c754:	2000058c 	.word	0x2000058c
 800c758:	2000058a 	.word	0x2000058a
 800c75c:	20000584 	.word	0x20000584

0800c760 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800c760:	b580      	push	{r7, lr}
 800c762:	b084      	sub	sp, #16
 800c764:	af00      	add	r7, sp, #0
 800c766:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d106      	bne.n	800c77c <tcp_parseopt+0x1c>
 800c76e:	4b32      	ldr	r3, [pc, #200]	; (800c838 <tcp_parseopt+0xd8>)
 800c770:	f240 727d 	movw	r2, #1917	; 0x77d
 800c774:	4931      	ldr	r1, [pc, #196]	; (800c83c <tcp_parseopt+0xdc>)
 800c776:	4832      	ldr	r0, [pc, #200]	; (800c840 <tcp_parseopt+0xe0>)
 800c778:	f004 fe6a 	bl	8011450 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800c77c:	4b31      	ldr	r3, [pc, #196]	; (800c844 <tcp_parseopt+0xe4>)
 800c77e:	881b      	ldrh	r3, [r3, #0]
 800c780:	2b00      	cmp	r3, #0
 800c782:	d055      	beq.n	800c830 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800c784:	4b30      	ldr	r3, [pc, #192]	; (800c848 <tcp_parseopt+0xe8>)
 800c786:	2200      	movs	r2, #0
 800c788:	801a      	strh	r2, [r3, #0]
 800c78a:	e045      	b.n	800c818 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800c78c:	f7ff ffb2 	bl	800c6f4 <tcp_get_next_optbyte>
 800c790:	4603      	mov	r3, r0
 800c792:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800c794:	7bfb      	ldrb	r3, [r7, #15]
 800c796:	2b02      	cmp	r3, #2
 800c798:	d006      	beq.n	800c7a8 <tcp_parseopt+0x48>
 800c79a:	2b02      	cmp	r3, #2
 800c79c:	dc2b      	bgt.n	800c7f6 <tcp_parseopt+0x96>
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d041      	beq.n	800c826 <tcp_parseopt+0xc6>
 800c7a2:	2b01      	cmp	r3, #1
 800c7a4:	d127      	bne.n	800c7f6 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800c7a6:	e037      	b.n	800c818 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800c7a8:	f7ff ffa4 	bl	800c6f4 <tcp_get_next_optbyte>
 800c7ac:	4603      	mov	r3, r0
 800c7ae:	2b04      	cmp	r3, #4
 800c7b0:	d13b      	bne.n	800c82a <tcp_parseopt+0xca>
 800c7b2:	4b25      	ldr	r3, [pc, #148]	; (800c848 <tcp_parseopt+0xe8>)
 800c7b4:	881b      	ldrh	r3, [r3, #0]
 800c7b6:	3301      	adds	r3, #1
 800c7b8:	4a22      	ldr	r2, [pc, #136]	; (800c844 <tcp_parseopt+0xe4>)
 800c7ba:	8812      	ldrh	r2, [r2, #0]
 800c7bc:	4293      	cmp	r3, r2
 800c7be:	da34      	bge.n	800c82a <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800c7c0:	f7ff ff98 	bl	800c6f4 <tcp_get_next_optbyte>
 800c7c4:	4603      	mov	r3, r0
 800c7c6:	b29b      	uxth	r3, r3
 800c7c8:	021b      	lsls	r3, r3, #8
 800c7ca:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800c7cc:	f7ff ff92 	bl	800c6f4 <tcp_get_next_optbyte>
 800c7d0:	4603      	mov	r3, r0
 800c7d2:	b29a      	uxth	r2, r3
 800c7d4:	89bb      	ldrh	r3, [r7, #12]
 800c7d6:	4313      	orrs	r3, r2
 800c7d8:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800c7da:	89bb      	ldrh	r3, [r7, #12]
 800c7dc:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800c7e0:	d804      	bhi.n	800c7ec <tcp_parseopt+0x8c>
 800c7e2:	89bb      	ldrh	r3, [r7, #12]
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d001      	beq.n	800c7ec <tcp_parseopt+0x8c>
 800c7e8:	89ba      	ldrh	r2, [r7, #12]
 800c7ea:	e001      	b.n	800c7f0 <tcp_parseopt+0x90>
 800c7ec:	f44f 7206 	mov.w	r2, #536	; 0x218
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800c7f4:	e010      	b.n	800c818 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800c7f6:	f7ff ff7d 	bl	800c6f4 <tcp_get_next_optbyte>
 800c7fa:	4603      	mov	r3, r0
 800c7fc:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800c7fe:	7afb      	ldrb	r3, [r7, #11]
 800c800:	2b01      	cmp	r3, #1
 800c802:	d914      	bls.n	800c82e <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800c804:	7afb      	ldrb	r3, [r7, #11]
 800c806:	b29a      	uxth	r2, r3
 800c808:	4b0f      	ldr	r3, [pc, #60]	; (800c848 <tcp_parseopt+0xe8>)
 800c80a:	881b      	ldrh	r3, [r3, #0]
 800c80c:	4413      	add	r3, r2
 800c80e:	b29b      	uxth	r3, r3
 800c810:	3b02      	subs	r3, #2
 800c812:	b29a      	uxth	r2, r3
 800c814:	4b0c      	ldr	r3, [pc, #48]	; (800c848 <tcp_parseopt+0xe8>)
 800c816:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800c818:	4b0b      	ldr	r3, [pc, #44]	; (800c848 <tcp_parseopt+0xe8>)
 800c81a:	881a      	ldrh	r2, [r3, #0]
 800c81c:	4b09      	ldr	r3, [pc, #36]	; (800c844 <tcp_parseopt+0xe4>)
 800c81e:	881b      	ldrh	r3, [r3, #0]
 800c820:	429a      	cmp	r2, r3
 800c822:	d3b3      	bcc.n	800c78c <tcp_parseopt+0x2c>
 800c824:	e004      	b.n	800c830 <tcp_parseopt+0xd0>
          return;
 800c826:	bf00      	nop
 800c828:	e002      	b.n	800c830 <tcp_parseopt+0xd0>
            return;
 800c82a:	bf00      	nop
 800c82c:	e000      	b.n	800c830 <tcp_parseopt+0xd0>
            return;
 800c82e:	bf00      	nop
      }
    }
  }
}
 800c830:	3710      	adds	r7, #16
 800c832:	46bd      	mov	sp, r7
 800c834:	bd80      	pop	{r7, pc}
 800c836:	bf00      	nop
 800c838:	08014794 	.word	0x08014794
 800c83c:	08014bf8 	.word	0x08014bf8
 800c840:	080147e0 	.word	0x080147e0
 800c844:	20000588 	.word	0x20000588
 800c848:	20000590 	.word	0x20000590

0800c84c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800c84c:	b480      	push	{r7}
 800c84e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800c850:	4b05      	ldr	r3, [pc, #20]	; (800c868 <tcp_trigger_input_pcb_close+0x1c>)
 800c852:	781b      	ldrb	r3, [r3, #0]
 800c854:	f043 0310 	orr.w	r3, r3, #16
 800c858:	b2da      	uxtb	r2, r3
 800c85a:	4b03      	ldr	r3, [pc, #12]	; (800c868 <tcp_trigger_input_pcb_close+0x1c>)
 800c85c:	701a      	strb	r2, [r3, #0]
}
 800c85e:	bf00      	nop
 800c860:	46bd      	mov	sp, r7
 800c862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c866:	4770      	bx	lr
 800c868:	200005a1 	.word	0x200005a1

0800c86c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800c86c:	b580      	push	{r7, lr}
 800c86e:	b084      	sub	sp, #16
 800c870:	af00      	add	r7, sp, #0
 800c872:	60f8      	str	r0, [r7, #12]
 800c874:	60b9      	str	r1, [r7, #8]
 800c876:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d00a      	beq.n	800c894 <tcp_route+0x28>
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	7a1b      	ldrb	r3, [r3, #8]
 800c882:	2b00      	cmp	r3, #0
 800c884:	d006      	beq.n	800c894 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	7a1b      	ldrb	r3, [r3, #8]
 800c88a:	4618      	mov	r0, r3
 800c88c:	f7fb f8b8 	bl	8007a00 <netif_get_by_index>
 800c890:	4603      	mov	r3, r0
 800c892:	e003      	b.n	800c89c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800c894:	6878      	ldr	r0, [r7, #4]
 800c896:	f003 fad5 	bl	800fe44 <ip4_route>
 800c89a:	4603      	mov	r3, r0
  }
}
 800c89c:	4618      	mov	r0, r3
 800c89e:	3710      	adds	r7, #16
 800c8a0:	46bd      	mov	sp, r7
 800c8a2:	bd80      	pop	{r7, pc}

0800c8a4 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800c8a4:	b590      	push	{r4, r7, lr}
 800c8a6:	b087      	sub	sp, #28
 800c8a8:	af00      	add	r7, sp, #0
 800c8aa:	60f8      	str	r0, [r7, #12]
 800c8ac:	60b9      	str	r1, [r7, #8]
 800c8ae:	603b      	str	r3, [r7, #0]
 800c8b0:	4613      	mov	r3, r2
 800c8b2:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d105      	bne.n	800c8c6 <tcp_create_segment+0x22>
 800c8ba:	4b44      	ldr	r3, [pc, #272]	; (800c9cc <tcp_create_segment+0x128>)
 800c8bc:	22a3      	movs	r2, #163	; 0xa3
 800c8be:	4944      	ldr	r1, [pc, #272]	; (800c9d0 <tcp_create_segment+0x12c>)
 800c8c0:	4844      	ldr	r0, [pc, #272]	; (800c9d4 <tcp_create_segment+0x130>)
 800c8c2:	f004 fdc5 	bl	8011450 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800c8c6:	68bb      	ldr	r3, [r7, #8]
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d105      	bne.n	800c8d8 <tcp_create_segment+0x34>
 800c8cc:	4b3f      	ldr	r3, [pc, #252]	; (800c9cc <tcp_create_segment+0x128>)
 800c8ce:	22a4      	movs	r2, #164	; 0xa4
 800c8d0:	4941      	ldr	r1, [pc, #260]	; (800c9d8 <tcp_create_segment+0x134>)
 800c8d2:	4840      	ldr	r0, [pc, #256]	; (800c9d4 <tcp_create_segment+0x130>)
 800c8d4:	f004 fdbc 	bl	8011450 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800c8d8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c8dc:	009b      	lsls	r3, r3, #2
 800c8de:	b2db      	uxtb	r3, r3
 800c8e0:	f003 0304 	and.w	r3, r3, #4
 800c8e4:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800c8e6:	2003      	movs	r0, #3
 800c8e8:	f7fa fd8c 	bl	8007404 <memp_malloc>
 800c8ec:	6138      	str	r0, [r7, #16]
 800c8ee:	693b      	ldr	r3, [r7, #16]
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d104      	bne.n	800c8fe <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800c8f4:	68b8      	ldr	r0, [r7, #8]
 800c8f6:	f7fb fbe3 	bl	80080c0 <pbuf_free>
    return NULL;
 800c8fa:	2300      	movs	r3, #0
 800c8fc:	e061      	b.n	800c9c2 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800c8fe:	693b      	ldr	r3, [r7, #16]
 800c900:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800c904:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800c906:	693b      	ldr	r3, [r7, #16]
 800c908:	2200      	movs	r2, #0
 800c90a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800c90c:	693b      	ldr	r3, [r7, #16]
 800c90e:	68ba      	ldr	r2, [r7, #8]
 800c910:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800c912:	68bb      	ldr	r3, [r7, #8]
 800c914:	891a      	ldrh	r2, [r3, #8]
 800c916:	7dfb      	ldrb	r3, [r7, #23]
 800c918:	b29b      	uxth	r3, r3
 800c91a:	429a      	cmp	r2, r3
 800c91c:	d205      	bcs.n	800c92a <tcp_create_segment+0x86>
 800c91e:	4b2b      	ldr	r3, [pc, #172]	; (800c9cc <tcp_create_segment+0x128>)
 800c920:	22b0      	movs	r2, #176	; 0xb0
 800c922:	492e      	ldr	r1, [pc, #184]	; (800c9dc <tcp_create_segment+0x138>)
 800c924:	482b      	ldr	r0, [pc, #172]	; (800c9d4 <tcp_create_segment+0x130>)
 800c926:	f004 fd93 	bl	8011450 <iprintf>
  seg->len = p->tot_len - optlen;
 800c92a:	68bb      	ldr	r3, [r7, #8]
 800c92c:	891a      	ldrh	r2, [r3, #8]
 800c92e:	7dfb      	ldrb	r3, [r7, #23]
 800c930:	b29b      	uxth	r3, r3
 800c932:	1ad3      	subs	r3, r2, r3
 800c934:	b29a      	uxth	r2, r3
 800c936:	693b      	ldr	r3, [r7, #16]
 800c938:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800c93a:	2114      	movs	r1, #20
 800c93c:	68b8      	ldr	r0, [r7, #8]
 800c93e:	f7fb fb29 	bl	8007f94 <pbuf_add_header>
 800c942:	4603      	mov	r3, r0
 800c944:	2b00      	cmp	r3, #0
 800c946:	d004      	beq.n	800c952 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800c948:	6938      	ldr	r0, [r7, #16]
 800c94a:	f7fc ffe6 	bl	800991a <tcp_seg_free>
    return NULL;
 800c94e:	2300      	movs	r3, #0
 800c950:	e037      	b.n	800c9c2 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800c952:	693b      	ldr	r3, [r7, #16]
 800c954:	685b      	ldr	r3, [r3, #4]
 800c956:	685a      	ldr	r2, [r3, #4]
 800c958:	693b      	ldr	r3, [r7, #16]
 800c95a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	8ada      	ldrh	r2, [r3, #22]
 800c960:	693b      	ldr	r3, [r7, #16]
 800c962:	68dc      	ldr	r4, [r3, #12]
 800c964:	4610      	mov	r0, r2
 800c966:	f7fa f819 	bl	800699c <lwip_htons>
 800c96a:	4603      	mov	r3, r0
 800c96c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	8b1a      	ldrh	r2, [r3, #24]
 800c972:	693b      	ldr	r3, [r7, #16]
 800c974:	68dc      	ldr	r4, [r3, #12]
 800c976:	4610      	mov	r0, r2
 800c978:	f7fa f810 	bl	800699c <lwip_htons>
 800c97c:	4603      	mov	r3, r0
 800c97e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800c980:	693b      	ldr	r3, [r7, #16]
 800c982:	68dc      	ldr	r4, [r3, #12]
 800c984:	6838      	ldr	r0, [r7, #0]
 800c986:	f7fa f81e 	bl	80069c6 <lwip_htonl>
 800c98a:	4603      	mov	r3, r0
 800c98c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800c98e:	7dfb      	ldrb	r3, [r7, #23]
 800c990:	089b      	lsrs	r3, r3, #2
 800c992:	b2db      	uxtb	r3, r3
 800c994:	b29b      	uxth	r3, r3
 800c996:	3305      	adds	r3, #5
 800c998:	b29b      	uxth	r3, r3
 800c99a:	031b      	lsls	r3, r3, #12
 800c99c:	b29a      	uxth	r2, r3
 800c99e:	79fb      	ldrb	r3, [r7, #7]
 800c9a0:	b29b      	uxth	r3, r3
 800c9a2:	4313      	orrs	r3, r2
 800c9a4:	b29a      	uxth	r2, r3
 800c9a6:	693b      	ldr	r3, [r7, #16]
 800c9a8:	68dc      	ldr	r4, [r3, #12]
 800c9aa:	4610      	mov	r0, r2
 800c9ac:	f7f9 fff6 	bl	800699c <lwip_htons>
 800c9b0:	4603      	mov	r3, r0
 800c9b2:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800c9b4:	693b      	ldr	r3, [r7, #16]
 800c9b6:	68db      	ldr	r3, [r3, #12]
 800c9b8:	2200      	movs	r2, #0
 800c9ba:	749a      	strb	r2, [r3, #18]
 800c9bc:	2200      	movs	r2, #0
 800c9be:	74da      	strb	r2, [r3, #19]
  return seg;
 800c9c0:	693b      	ldr	r3, [r7, #16]
}
 800c9c2:	4618      	mov	r0, r3
 800c9c4:	371c      	adds	r7, #28
 800c9c6:	46bd      	mov	sp, r7
 800c9c8:	bd90      	pop	{r4, r7, pc}
 800c9ca:	bf00      	nop
 800c9cc:	08014c14 	.word	0x08014c14
 800c9d0:	08014c48 	.word	0x08014c48
 800c9d4:	08014c68 	.word	0x08014c68
 800c9d8:	08014c90 	.word	0x08014c90
 800c9dc:	08014cb4 	.word	0x08014cb4

0800c9e0 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800c9e0:	b580      	push	{r7, lr}
 800c9e2:	b086      	sub	sp, #24
 800c9e4:	af00      	add	r7, sp, #0
 800c9e6:	607b      	str	r3, [r7, #4]
 800c9e8:	4603      	mov	r3, r0
 800c9ea:	73fb      	strb	r3, [r7, #15]
 800c9ec:	460b      	mov	r3, r1
 800c9ee:	81bb      	strh	r3, [r7, #12]
 800c9f0:	4613      	mov	r3, r2
 800c9f2:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 800c9f4:	89bb      	ldrh	r3, [r7, #12]
 800c9f6:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d105      	bne.n	800ca0a <tcp_pbuf_prealloc+0x2a>
 800c9fe:	4b30      	ldr	r3, [pc, #192]	; (800cac0 <tcp_pbuf_prealloc+0xe0>)
 800ca00:	22e8      	movs	r2, #232	; 0xe8
 800ca02:	4930      	ldr	r1, [pc, #192]	; (800cac4 <tcp_pbuf_prealloc+0xe4>)
 800ca04:	4830      	ldr	r0, [pc, #192]	; (800cac8 <tcp_pbuf_prealloc+0xe8>)
 800ca06:	f004 fd23 	bl	8011450 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800ca0a:	6a3b      	ldr	r3, [r7, #32]
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d105      	bne.n	800ca1c <tcp_pbuf_prealloc+0x3c>
 800ca10:	4b2b      	ldr	r3, [pc, #172]	; (800cac0 <tcp_pbuf_prealloc+0xe0>)
 800ca12:	22e9      	movs	r2, #233	; 0xe9
 800ca14:	492d      	ldr	r1, [pc, #180]	; (800cacc <tcp_pbuf_prealloc+0xec>)
 800ca16:	482c      	ldr	r0, [pc, #176]	; (800cac8 <tcp_pbuf_prealloc+0xe8>)
 800ca18:	f004 fd1a 	bl	8011450 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800ca1c:	89ba      	ldrh	r2, [r7, #12]
 800ca1e:	897b      	ldrh	r3, [r7, #10]
 800ca20:	429a      	cmp	r2, r3
 800ca22:	d221      	bcs.n	800ca68 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800ca24:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ca28:	f003 0302 	and.w	r3, r3, #2
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d111      	bne.n	800ca54 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 800ca30:	6a3b      	ldr	r3, [r7, #32]
 800ca32:	8b5b      	ldrh	r3, [r3, #26]
 800ca34:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d115      	bne.n	800ca68 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 800ca3c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d007      	beq.n	800ca54 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 800ca44:	6a3b      	ldr	r3, [r7, #32]
 800ca46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d103      	bne.n	800ca54 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 800ca4c:	6a3b      	ldr	r3, [r7, #32]
 800ca4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d009      	beq.n	800ca68 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800ca54:	89bb      	ldrh	r3, [r7, #12]
 800ca56:	f203 231b 	addw	r3, r3, #539	; 0x21b
 800ca5a:	f023 0203 	bic.w	r2, r3, #3
 800ca5e:	897b      	ldrh	r3, [r7, #10]
 800ca60:	4293      	cmp	r3, r2
 800ca62:	bf28      	it	cs
 800ca64:	4613      	movcs	r3, r2
 800ca66:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800ca68:	8af9      	ldrh	r1, [r7, #22]
 800ca6a:	7bfb      	ldrb	r3, [r7, #15]
 800ca6c:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ca70:	4618      	mov	r0, r3
 800ca72:	f7fb f841 	bl	8007af8 <pbuf_alloc>
 800ca76:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800ca78:	693b      	ldr	r3, [r7, #16]
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d101      	bne.n	800ca82 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 800ca7e:	2300      	movs	r3, #0
 800ca80:	e019      	b.n	800cab6 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800ca82:	693b      	ldr	r3, [r7, #16]
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d006      	beq.n	800ca98 <tcp_pbuf_prealloc+0xb8>
 800ca8a:	4b0d      	ldr	r3, [pc, #52]	; (800cac0 <tcp_pbuf_prealloc+0xe0>)
 800ca8c:	f240 120b 	movw	r2, #267	; 0x10b
 800ca90:	490f      	ldr	r1, [pc, #60]	; (800cad0 <tcp_pbuf_prealloc+0xf0>)
 800ca92:	480d      	ldr	r0, [pc, #52]	; (800cac8 <tcp_pbuf_prealloc+0xe8>)
 800ca94:	f004 fcdc 	bl	8011450 <iprintf>
  *oversize = p->len - length;
 800ca98:	693b      	ldr	r3, [r7, #16]
 800ca9a:	895a      	ldrh	r2, [r3, #10]
 800ca9c:	89bb      	ldrh	r3, [r7, #12]
 800ca9e:	1ad3      	subs	r3, r2, r3
 800caa0:	b29a      	uxth	r2, r3
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800caa6:	693b      	ldr	r3, [r7, #16]
 800caa8:	89ba      	ldrh	r2, [r7, #12]
 800caaa:	811a      	strh	r2, [r3, #8]
 800caac:	693b      	ldr	r3, [r7, #16]
 800caae:	891a      	ldrh	r2, [r3, #8]
 800cab0:	693b      	ldr	r3, [r7, #16]
 800cab2:	815a      	strh	r2, [r3, #10]
  return p;
 800cab4:	693b      	ldr	r3, [r7, #16]
}
 800cab6:	4618      	mov	r0, r3
 800cab8:	3718      	adds	r7, #24
 800caba:	46bd      	mov	sp, r7
 800cabc:	bd80      	pop	{r7, pc}
 800cabe:	bf00      	nop
 800cac0:	08014c14 	.word	0x08014c14
 800cac4:	08014ccc 	.word	0x08014ccc
 800cac8:	08014c68 	.word	0x08014c68
 800cacc:	08014cf0 	.word	0x08014cf0
 800cad0:	08014d10 	.word	0x08014d10

0800cad4 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800cad4:	b580      	push	{r7, lr}
 800cad6:	b082      	sub	sp, #8
 800cad8:	af00      	add	r7, sp, #0
 800cada:	6078      	str	r0, [r7, #4]
 800cadc:	460b      	mov	r3, r1
 800cade:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d106      	bne.n	800caf4 <tcp_write_checks+0x20>
 800cae6:	4b33      	ldr	r3, [pc, #204]	; (800cbb4 <tcp_write_checks+0xe0>)
 800cae8:	f240 1233 	movw	r2, #307	; 0x133
 800caec:	4932      	ldr	r1, [pc, #200]	; (800cbb8 <tcp_write_checks+0xe4>)
 800caee:	4833      	ldr	r0, [pc, #204]	; (800cbbc <tcp_write_checks+0xe8>)
 800caf0:	f004 fcae 	bl	8011450 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	7d1b      	ldrb	r3, [r3, #20]
 800caf8:	2b04      	cmp	r3, #4
 800cafa:	d00e      	beq.n	800cb1a <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 800cb00:	2b07      	cmp	r3, #7
 800cb02:	d00a      	beq.n	800cb1a <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 800cb08:	2b02      	cmp	r3, #2
 800cb0a:	d006      	beq.n	800cb1a <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 800cb10:	2b03      	cmp	r3, #3
 800cb12:	d002      	beq.n	800cb1a <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 800cb14:	f06f 030a 	mvn.w	r3, #10
 800cb18:	e048      	b.n	800cbac <tcp_write_checks+0xd8>
  } else if (len == 0) {
 800cb1a:	887b      	ldrh	r3, [r7, #2]
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d101      	bne.n	800cb24 <tcp_write_checks+0x50>
    return ERR_OK;
 800cb20:	2300      	movs	r3, #0
 800cb22:	e043      	b.n	800cbac <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800cb2a:	887a      	ldrh	r2, [r7, #2]
 800cb2c:	429a      	cmp	r2, r3
 800cb2e:	d909      	bls.n	800cb44 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	8b5b      	ldrh	r3, [r3, #26]
 800cb34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cb38:	b29a      	uxth	r2, r3
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800cb3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cb42:	e033      	b.n	800cbac <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800cb4a:	2b08      	cmp	r3, #8
 800cb4c:	d909      	bls.n	800cb62 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	8b5b      	ldrh	r3, [r3, #26]
 800cb52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cb56:	b29a      	uxth	r2, r3
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800cb5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cb60:	e024      	b.n	800cbac <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d00f      	beq.n	800cb8c <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d11a      	bne.n	800cbaa <tcp_write_checks+0xd6>
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d116      	bne.n	800cbaa <tcp_write_checks+0xd6>
 800cb7c:	4b0d      	ldr	r3, [pc, #52]	; (800cbb4 <tcp_write_checks+0xe0>)
 800cb7e:	f240 1255 	movw	r2, #341	; 0x155
 800cb82:	490f      	ldr	r1, [pc, #60]	; (800cbc0 <tcp_write_checks+0xec>)
 800cb84:	480d      	ldr	r0, [pc, #52]	; (800cbbc <tcp_write_checks+0xe8>)
 800cb86:	f004 fc63 	bl	8011450 <iprintf>
 800cb8a:	e00e      	b.n	800cbaa <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d103      	bne.n	800cb9c <tcp_write_checks+0xc8>
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d006      	beq.n	800cbaa <tcp_write_checks+0xd6>
 800cb9c:	4b05      	ldr	r3, [pc, #20]	; (800cbb4 <tcp_write_checks+0xe0>)
 800cb9e:	f44f 72ac 	mov.w	r2, #344	; 0x158
 800cba2:	4908      	ldr	r1, [pc, #32]	; (800cbc4 <tcp_write_checks+0xf0>)
 800cba4:	4805      	ldr	r0, [pc, #20]	; (800cbbc <tcp_write_checks+0xe8>)
 800cba6:	f004 fc53 	bl	8011450 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800cbaa:	2300      	movs	r3, #0
}
 800cbac:	4618      	mov	r0, r3
 800cbae:	3708      	adds	r7, #8
 800cbb0:	46bd      	mov	sp, r7
 800cbb2:	bd80      	pop	{r7, pc}
 800cbb4:	08014c14 	.word	0x08014c14
 800cbb8:	08014d24 	.word	0x08014d24
 800cbbc:	08014c68 	.word	0x08014c68
 800cbc0:	08014d44 	.word	0x08014d44
 800cbc4:	08014d80 	.word	0x08014d80

0800cbc8 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800cbc8:	b590      	push	{r4, r7, lr}
 800cbca:	b09b      	sub	sp, #108	; 0x6c
 800cbcc:	af04      	add	r7, sp, #16
 800cbce:	60f8      	str	r0, [r7, #12]
 800cbd0:	60b9      	str	r1, [r7, #8]
 800cbd2:	4611      	mov	r1, r2
 800cbd4:	461a      	mov	r2, r3
 800cbd6:	460b      	mov	r3, r1
 800cbd8:	80fb      	strh	r3, [r7, #6]
 800cbda:	4613      	mov	r3, r2
 800cbdc:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 800cbde:	2300      	movs	r3, #0
 800cbe0:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800cbe2:	2300      	movs	r3, #0
 800cbe4:	653b      	str	r3, [r7, #80]	; 0x50
 800cbe6:	2300      	movs	r3, #0
 800cbe8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cbea:	2300      	movs	r3, #0
 800cbec:	64bb      	str	r3, [r7, #72]	; 0x48
 800cbee:	2300      	movs	r3, #0
 800cbf0:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 800cbf2:	2300      	movs	r3, #0
 800cbf4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 800cbf8:	2300      	movs	r3, #0
 800cbfa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800cbfe:	2300      	movs	r3, #0
 800cc00:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 800cc02:	2300      	movs	r3, #0
 800cc04:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 800cc06:	2300      	movs	r3, #0
 800cc08:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d109      	bne.n	800cc24 <tcp_write+0x5c>
 800cc10:	4ba4      	ldr	r3, [pc, #656]	; (800cea4 <tcp_write+0x2dc>)
 800cc12:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 800cc16:	49a4      	ldr	r1, [pc, #656]	; (800cea8 <tcp_write+0x2e0>)
 800cc18:	48a4      	ldr	r0, [pc, #656]	; (800ceac <tcp_write+0x2e4>)
 800cc1a:	f004 fc19 	bl	8011450 <iprintf>
 800cc1e:	f06f 030f 	mvn.w	r3, #15
 800cc22:	e32a      	b.n	800d27a <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cc2a:	085b      	lsrs	r3, r3, #1
 800cc2c:	b29a      	uxth	r2, r3
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cc32:	4293      	cmp	r3, r2
 800cc34:	bf28      	it	cs
 800cc36:	4613      	movcs	r3, r2
 800cc38:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 800cc3a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d102      	bne.n	800cc46 <tcp_write+0x7e>
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cc44:	e000      	b.n	800cc48 <tcp_write+0x80>
 800cc46:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cc48:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800cc4a:	68bb      	ldr	r3, [r7, #8]
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d109      	bne.n	800cc64 <tcp_write+0x9c>
 800cc50:	4b94      	ldr	r3, [pc, #592]	; (800cea4 <tcp_write+0x2dc>)
 800cc52:	f240 12ad 	movw	r2, #429	; 0x1ad
 800cc56:	4996      	ldr	r1, [pc, #600]	; (800ceb0 <tcp_write+0x2e8>)
 800cc58:	4894      	ldr	r0, [pc, #592]	; (800ceac <tcp_write+0x2e4>)
 800cc5a:	f004 fbf9 	bl	8011450 <iprintf>
 800cc5e:	f06f 030f 	mvn.w	r3, #15
 800cc62:	e30a      	b.n	800d27a <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 800cc64:	88fb      	ldrh	r3, [r7, #6]
 800cc66:	4619      	mov	r1, r3
 800cc68:	68f8      	ldr	r0, [r7, #12]
 800cc6a:	f7ff ff33 	bl	800cad4 <tcp_write_checks>
 800cc6e:	4603      	mov	r3, r0
 800cc70:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 800cc74:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d002      	beq.n	800cc82 <tcp_write+0xba>
    return err;
 800cc7c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800cc80:	e2fb      	b.n	800d27a <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800cc88:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800cc8c:	2300      	movs	r3, #0
 800cc8e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	f000 80f6 	beq.w	800ce88 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cca0:	653b      	str	r3, [r7, #80]	; 0x50
 800cca2:	e002      	b.n	800ccaa <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 800cca4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800ccaa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d1f8      	bne.n	800cca4 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800ccb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ccb4:	7a9b      	ldrb	r3, [r3, #10]
 800ccb6:	009b      	lsls	r3, r3, #2
 800ccb8:	b29b      	uxth	r3, r3
 800ccba:	f003 0304 	and.w	r3, r3, #4
 800ccbe:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800ccc0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ccc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ccc4:	891b      	ldrh	r3, [r3, #8]
 800ccc6:	4619      	mov	r1, r3
 800ccc8:	8c3b      	ldrh	r3, [r7, #32]
 800ccca:	440b      	add	r3, r1
 800cccc:	429a      	cmp	r2, r3
 800ccce:	da06      	bge.n	800ccde <tcp_write+0x116>
 800ccd0:	4b74      	ldr	r3, [pc, #464]	; (800cea4 <tcp_write+0x2dc>)
 800ccd2:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800ccd6:	4977      	ldr	r1, [pc, #476]	; (800ceb4 <tcp_write+0x2ec>)
 800ccd8:	4874      	ldr	r0, [pc, #464]	; (800ceac <tcp_write+0x2e4>)
 800ccda:	f004 fbb9 	bl	8011450 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800ccde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cce0:	891a      	ldrh	r2, [r3, #8]
 800cce2:	8c3b      	ldrh	r3, [r7, #32]
 800cce4:	4413      	add	r3, r2
 800cce6:	b29b      	uxth	r3, r3
 800cce8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ccea:	1ad3      	subs	r3, r2, r3
 800ccec:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800ccf4:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 800ccf6:	8a7b      	ldrh	r3, [r7, #18]
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d026      	beq.n	800cd4a <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800ccfc:	8a7b      	ldrh	r3, [r7, #18]
 800ccfe:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800cd00:	429a      	cmp	r2, r3
 800cd02:	d206      	bcs.n	800cd12 <tcp_write+0x14a>
 800cd04:	4b67      	ldr	r3, [pc, #412]	; (800cea4 <tcp_write+0x2dc>)
 800cd06:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 800cd0a:	496b      	ldr	r1, [pc, #428]	; (800ceb8 <tcp_write+0x2f0>)
 800cd0c:	4867      	ldr	r0, [pc, #412]	; (800ceac <tcp_write+0x2e4>)
 800cd0e:	f004 fb9f 	bl	8011450 <iprintf>
      seg = last_unsent;
 800cd12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cd14:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800cd16:	8a7b      	ldrh	r3, [r7, #18]
 800cd18:	88fa      	ldrh	r2, [r7, #6]
 800cd1a:	4293      	cmp	r3, r2
 800cd1c:	bf28      	it	cs
 800cd1e:	4613      	movcs	r3, r2
 800cd20:	b29b      	uxth	r3, r3
 800cd22:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800cd24:	4293      	cmp	r3, r2
 800cd26:	bf28      	it	cs
 800cd28:	4613      	movcs	r3, r2
 800cd2a:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 800cd2c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800cd30:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800cd32:	4413      	add	r3, r2
 800cd34:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 800cd38:	8a7a      	ldrh	r2, [r7, #18]
 800cd3a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800cd3c:	1ad3      	subs	r3, r2, r3
 800cd3e:	b29b      	uxth	r3, r3
 800cd40:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 800cd42:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800cd44:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800cd46:	1ad3      	subs	r3, r2, r3
 800cd48:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800cd4a:	8a7b      	ldrh	r3, [r7, #18]
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d00b      	beq.n	800cd68 <tcp_write+0x1a0>
 800cd50:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800cd54:	88fb      	ldrh	r3, [r7, #6]
 800cd56:	429a      	cmp	r2, r3
 800cd58:	d006      	beq.n	800cd68 <tcp_write+0x1a0>
 800cd5a:	4b52      	ldr	r3, [pc, #328]	; (800cea4 <tcp_write+0x2dc>)
 800cd5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cd60:	4956      	ldr	r1, [pc, #344]	; (800cebc <tcp_write+0x2f4>)
 800cd62:	4852      	ldr	r0, [pc, #328]	; (800ceac <tcp_write+0x2e4>)
 800cd64:	f004 fb74 	bl	8011450 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800cd68:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800cd6c:	88fb      	ldrh	r3, [r7, #6]
 800cd6e:	429a      	cmp	r2, r3
 800cd70:	f080 8167 	bcs.w	800d042 <tcp_write+0x47a>
 800cd74:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	f000 8163 	beq.w	800d042 <tcp_write+0x47a>
 800cd7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cd7e:	891b      	ldrh	r3, [r3, #8]
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	f000 815e 	beq.w	800d042 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800cd86:	88fa      	ldrh	r2, [r7, #6]
 800cd88:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800cd8c:	1ad2      	subs	r2, r2, r3
 800cd8e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800cd90:	4293      	cmp	r3, r2
 800cd92:	bfa8      	it	ge
 800cd94:	4613      	movge	r3, r2
 800cd96:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 800cd98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cd9a:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800cd9c:	797b      	ldrb	r3, [r7, #5]
 800cd9e:	f003 0301 	and.w	r3, r3, #1
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d027      	beq.n	800cdf6 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800cda6:	f107 0012 	add.w	r0, r7, #18
 800cdaa:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800cdac:	8bf9      	ldrh	r1, [r7, #30]
 800cdae:	2301      	movs	r3, #1
 800cdb0:	9302      	str	r3, [sp, #8]
 800cdb2:	797b      	ldrb	r3, [r7, #5]
 800cdb4:	9301      	str	r3, [sp, #4]
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	9300      	str	r3, [sp, #0]
 800cdba:	4603      	mov	r3, r0
 800cdbc:	2000      	movs	r0, #0
 800cdbe:	f7ff fe0f 	bl	800c9e0 <tcp_pbuf_prealloc>
 800cdc2:	6578      	str	r0, [r7, #84]	; 0x54
 800cdc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	f000 8225 	beq.w	800d216 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800cdcc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cdce:	6858      	ldr	r0, [r3, #4]
 800cdd0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800cdd4:	68ba      	ldr	r2, [r7, #8]
 800cdd6:	4413      	add	r3, r2
 800cdd8:	8bfa      	ldrh	r2, [r7, #30]
 800cdda:	4619      	mov	r1, r3
 800cddc:	f004 fa5e 	bl	801129c <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 800cde0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800cde2:	f7fb f9f5 	bl	80081d0 <pbuf_clen>
 800cde6:	4603      	mov	r3, r0
 800cde8:	461a      	mov	r2, r3
 800cdea:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800cdee:	4413      	add	r3, r2
 800cdf0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800cdf4:	e041      	b.n	800ce7a <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800cdf6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cdf8:	685b      	ldr	r3, [r3, #4]
 800cdfa:	637b      	str	r3, [r7, #52]	; 0x34
 800cdfc:	e002      	b.n	800ce04 <tcp_write+0x23c>
 800cdfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	637b      	str	r3, [r7, #52]	; 0x34
 800ce04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d1f8      	bne.n	800cdfe <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800ce0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce0e:	7b1b      	ldrb	r3, [r3, #12]
 800ce10:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d115      	bne.n	800ce44 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800ce18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce1a:	685b      	ldr	r3, [r3, #4]
 800ce1c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ce1e:	8952      	ldrh	r2, [r2, #10]
 800ce20:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800ce22:	68ba      	ldr	r2, [r7, #8]
 800ce24:	429a      	cmp	r2, r3
 800ce26:	d10d      	bne.n	800ce44 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800ce28:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d006      	beq.n	800ce3e <tcp_write+0x276>
 800ce30:	4b1c      	ldr	r3, [pc, #112]	; (800cea4 <tcp_write+0x2dc>)
 800ce32:	f240 2231 	movw	r2, #561	; 0x231
 800ce36:	4922      	ldr	r1, [pc, #136]	; (800cec0 <tcp_write+0x2f8>)
 800ce38:	481c      	ldr	r0, [pc, #112]	; (800ceac <tcp_write+0x2e4>)
 800ce3a:	f004 fb09 	bl	8011450 <iprintf>
          extendlen = seglen;
 800ce3e:	8bfb      	ldrh	r3, [r7, #30]
 800ce40:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800ce42:	e01a      	b.n	800ce7a <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800ce44:	8bfb      	ldrh	r3, [r7, #30]
 800ce46:	2201      	movs	r2, #1
 800ce48:	4619      	mov	r1, r3
 800ce4a:	2000      	movs	r0, #0
 800ce4c:	f7fa fe54 	bl	8007af8 <pbuf_alloc>
 800ce50:	6578      	str	r0, [r7, #84]	; 0x54
 800ce52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	f000 81e0 	beq.w	800d21a <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800ce5a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ce5e:	68ba      	ldr	r2, [r7, #8]
 800ce60:	441a      	add	r2, r3
 800ce62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ce64:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 800ce66:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800ce68:	f7fb f9b2 	bl	80081d0 <pbuf_clen>
 800ce6c:	4603      	mov	r3, r0
 800ce6e:	461a      	mov	r2, r3
 800ce70:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800ce74:	4413      	add	r3, r2
 800ce76:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 800ce7a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ce7e:	8bfb      	ldrh	r3, [r7, #30]
 800ce80:	4413      	add	r3, r2
 800ce82:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800ce86:	e0dc      	b.n	800d042 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	f000 80d7 	beq.w	800d042 <tcp_write+0x47a>
 800ce94:	4b03      	ldr	r3, [pc, #12]	; (800cea4 <tcp_write+0x2dc>)
 800ce96:	f240 224a 	movw	r2, #586	; 0x24a
 800ce9a:	490a      	ldr	r1, [pc, #40]	; (800cec4 <tcp_write+0x2fc>)
 800ce9c:	4803      	ldr	r0, [pc, #12]	; (800ceac <tcp_write+0x2e4>)
 800ce9e:	f004 fad7 	bl	8011450 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 800cea2:	e0ce      	b.n	800d042 <tcp_write+0x47a>
 800cea4:	08014c14 	.word	0x08014c14
 800cea8:	08014db4 	.word	0x08014db4
 800ceac:	08014c68 	.word	0x08014c68
 800ceb0:	08014dcc 	.word	0x08014dcc
 800ceb4:	08014e00 	.word	0x08014e00
 800ceb8:	08014e18 	.word	0x08014e18
 800cebc:	08014e38 	.word	0x08014e38
 800cec0:	08014e58 	.word	0x08014e58
 800cec4:	08014e84 	.word	0x08014e84
    struct pbuf *p;
    u16_t left = len - pos;
 800cec8:	88fa      	ldrh	r2, [r7, #6]
 800ceca:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800cece:	1ad3      	subs	r3, r2, r3
 800ced0:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 800ced2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800ced6:	b29b      	uxth	r3, r3
 800ced8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ceda:	1ad3      	subs	r3, r2, r3
 800cedc:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 800cede:	8b7a      	ldrh	r2, [r7, #26]
 800cee0:	8bbb      	ldrh	r3, [r7, #28]
 800cee2:	4293      	cmp	r3, r2
 800cee4:	bf28      	it	cs
 800cee6:	4613      	movcs	r3, r2
 800cee8:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800ceea:	797b      	ldrb	r3, [r7, #5]
 800ceec:	f003 0301 	and.w	r3, r3, #1
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d036      	beq.n	800cf62 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800cef4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800cef8:	b29a      	uxth	r2, r3
 800cefa:	8b3b      	ldrh	r3, [r7, #24]
 800cefc:	4413      	add	r3, r2
 800cefe:	b299      	uxth	r1, r3
 800cf00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	bf0c      	ite	eq
 800cf06:	2301      	moveq	r3, #1
 800cf08:	2300      	movne	r3, #0
 800cf0a:	b2db      	uxtb	r3, r3
 800cf0c:	f107 0012 	add.w	r0, r7, #18
 800cf10:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800cf12:	9302      	str	r3, [sp, #8]
 800cf14:	797b      	ldrb	r3, [r7, #5]
 800cf16:	9301      	str	r3, [sp, #4]
 800cf18:	68fb      	ldr	r3, [r7, #12]
 800cf1a:	9300      	str	r3, [sp, #0]
 800cf1c:	4603      	mov	r3, r0
 800cf1e:	2036      	movs	r0, #54	; 0x36
 800cf20:	f7ff fd5e 	bl	800c9e0 <tcp_pbuf_prealloc>
 800cf24:	6338      	str	r0, [r7, #48]	; 0x30
 800cf26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	f000 8178 	beq.w	800d21e <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800cf2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf30:	895b      	ldrh	r3, [r3, #10]
 800cf32:	8b3a      	ldrh	r2, [r7, #24]
 800cf34:	429a      	cmp	r2, r3
 800cf36:	d906      	bls.n	800cf46 <tcp_write+0x37e>
 800cf38:	4b8c      	ldr	r3, [pc, #560]	; (800d16c <tcp_write+0x5a4>)
 800cf3a:	f240 2266 	movw	r2, #614	; 0x266
 800cf3e:	498c      	ldr	r1, [pc, #560]	; (800d170 <tcp_write+0x5a8>)
 800cf40:	488c      	ldr	r0, [pc, #560]	; (800d174 <tcp_write+0x5ac>)
 800cf42:	f004 fa85 	bl	8011450 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800cf46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf48:	685a      	ldr	r2, [r3, #4]
 800cf4a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800cf4e:	18d0      	adds	r0, r2, r3
 800cf50:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800cf54:	68ba      	ldr	r2, [r7, #8]
 800cf56:	4413      	add	r3, r2
 800cf58:	8b3a      	ldrh	r2, [r7, #24]
 800cf5a:	4619      	mov	r1, r3
 800cf5c:	f004 f99e 	bl	801129c <memcpy>
 800cf60:	e02f      	b.n	800cfc2 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800cf62:	8a7b      	ldrh	r3, [r7, #18]
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d006      	beq.n	800cf76 <tcp_write+0x3ae>
 800cf68:	4b80      	ldr	r3, [pc, #512]	; (800d16c <tcp_write+0x5a4>)
 800cf6a:	f240 2271 	movw	r2, #625	; 0x271
 800cf6e:	4982      	ldr	r1, [pc, #520]	; (800d178 <tcp_write+0x5b0>)
 800cf70:	4880      	ldr	r0, [pc, #512]	; (800d174 <tcp_write+0x5ac>)
 800cf72:	f004 fa6d 	bl	8011450 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800cf76:	8b3b      	ldrh	r3, [r7, #24]
 800cf78:	2201      	movs	r2, #1
 800cf7a:	4619      	mov	r1, r3
 800cf7c:	2036      	movs	r0, #54	; 0x36
 800cf7e:	f7fa fdbb 	bl	8007af8 <pbuf_alloc>
 800cf82:	6178      	str	r0, [r7, #20]
 800cf84:	697b      	ldr	r3, [r7, #20]
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	f000 814b 	beq.w	800d222 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800cf8c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800cf90:	68ba      	ldr	r2, [r7, #8]
 800cf92:	441a      	add	r2, r3
 800cf94:	697b      	ldr	r3, [r7, #20]
 800cf96:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800cf98:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800cf9c:	b29b      	uxth	r3, r3
 800cf9e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800cfa2:	4619      	mov	r1, r3
 800cfa4:	2036      	movs	r0, #54	; 0x36
 800cfa6:	f7fa fda7 	bl	8007af8 <pbuf_alloc>
 800cfaa:	6338      	str	r0, [r7, #48]	; 0x30
 800cfac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d103      	bne.n	800cfba <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800cfb2:	6978      	ldr	r0, [r7, #20]
 800cfb4:	f7fb f884 	bl	80080c0 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 800cfb8:	e136      	b.n	800d228 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 800cfba:	6979      	ldr	r1, [r7, #20]
 800cfbc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cfbe:	f7fb f941 	bl	8008244 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800cfc2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cfc4:	f7fb f904 	bl	80081d0 <pbuf_clen>
 800cfc8:	4603      	mov	r3, r0
 800cfca:	461a      	mov	r2, r3
 800cfcc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800cfd0:	4413      	add	r3, r2
 800cfd2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800cfd6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800cfda:	2b09      	cmp	r3, #9
 800cfdc:	d903      	bls.n	800cfe6 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 800cfde:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cfe0:	f7fb f86e 	bl	80080c0 <pbuf_free>
      goto memerr;
 800cfe4:	e120      	b.n	800d228 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800cfea:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800cfee:	441a      	add	r2, r3
 800cff0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cff4:	9300      	str	r3, [sp, #0]
 800cff6:	4613      	mov	r3, r2
 800cff8:	2200      	movs	r2, #0
 800cffa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800cffc:	68f8      	ldr	r0, [r7, #12]
 800cffe:	f7ff fc51 	bl	800c8a4 <tcp_create_segment>
 800d002:	64f8      	str	r0, [r7, #76]	; 0x4c
 800d004:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d006:	2b00      	cmp	r3, #0
 800d008:	f000 810d 	beq.w	800d226 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 800d00c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d102      	bne.n	800d018 <tcp_write+0x450>
      queue = seg;
 800d012:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d014:	647b      	str	r3, [r7, #68]	; 0x44
 800d016:	e00c      	b.n	800d032 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800d018:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d106      	bne.n	800d02c <tcp_write+0x464>
 800d01e:	4b53      	ldr	r3, [pc, #332]	; (800d16c <tcp_write+0x5a4>)
 800d020:	f240 22ab 	movw	r2, #683	; 0x2ab
 800d024:	4955      	ldr	r1, [pc, #340]	; (800d17c <tcp_write+0x5b4>)
 800d026:	4853      	ldr	r0, [pc, #332]	; (800d174 <tcp_write+0x5ac>)
 800d028:	f004 fa12 	bl	8011450 <iprintf>
      prev_seg->next = seg;
 800d02c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d02e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d030:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 800d032:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d034:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800d036:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800d03a:	8b3b      	ldrh	r3, [r7, #24]
 800d03c:	4413      	add	r3, r2
 800d03e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 800d042:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800d046:	88fb      	ldrh	r3, [r7, #6]
 800d048:	429a      	cmp	r2, r3
 800d04a:	f4ff af3d 	bcc.w	800cec8 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 800d04e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d050:	2b00      	cmp	r3, #0
 800d052:	d02c      	beq.n	800d0ae <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800d054:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d056:	685b      	ldr	r3, [r3, #4]
 800d058:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d05a:	e01e      	b.n	800d09a <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 800d05c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d05e:	891a      	ldrh	r2, [r3, #8]
 800d060:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d062:	4413      	add	r3, r2
 800d064:	b29a      	uxth	r2, r3
 800d066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d068:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 800d06a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d110      	bne.n	800d094 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800d072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d074:	685b      	ldr	r3, [r3, #4]
 800d076:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d078:	8952      	ldrh	r2, [r2, #10]
 800d07a:	4413      	add	r3, r2
 800d07c:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800d07e:	68b9      	ldr	r1, [r7, #8]
 800d080:	4618      	mov	r0, r3
 800d082:	f004 f90b 	bl	801129c <memcpy>
        p->len += oversize_used;
 800d086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d088:	895a      	ldrh	r2, [r3, #10]
 800d08a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d08c:	4413      	add	r3, r2
 800d08e:	b29a      	uxth	r2, r3
 800d090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d092:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800d094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d09a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d1dd      	bne.n	800d05c <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 800d0a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d0a2:	891a      	ldrh	r2, [r3, #8]
 800d0a4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d0a6:	4413      	add	r3, r2
 800d0a8:	b29a      	uxth	r2, r3
 800d0aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d0ac:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 800d0ae:	8a7a      	ldrh	r2, [r7, #18]
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 800d0b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d018      	beq.n	800d0ee <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800d0bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d106      	bne.n	800d0d0 <tcp_write+0x508>
 800d0c2:	4b2a      	ldr	r3, [pc, #168]	; (800d16c <tcp_write+0x5a4>)
 800d0c4:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 800d0c8:	492d      	ldr	r1, [pc, #180]	; (800d180 <tcp_write+0x5b8>)
 800d0ca:	482a      	ldr	r0, [pc, #168]	; (800d174 <tcp_write+0x5ac>)
 800d0cc:	f004 f9c0 	bl	8011450 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 800d0d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d0d2:	685b      	ldr	r3, [r3, #4]
 800d0d4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d0d6:	4618      	mov	r0, r3
 800d0d8:	f7fb f8b4 	bl	8008244 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800d0dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d0de:	891a      	ldrh	r2, [r3, #8]
 800d0e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d0e2:	891b      	ldrh	r3, [r3, #8]
 800d0e4:	4413      	add	r3, r2
 800d0e6:	b29a      	uxth	r2, r3
 800d0e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d0ea:	811a      	strh	r2, [r3, #8]
 800d0ec:	e037      	b.n	800d15e <tcp_write+0x596>
  } else if (extendlen > 0) {
 800d0ee:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d034      	beq.n	800d15e <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800d0f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d003      	beq.n	800d102 <tcp_write+0x53a>
 800d0fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d0fc:	685b      	ldr	r3, [r3, #4]
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d106      	bne.n	800d110 <tcp_write+0x548>
 800d102:	4b1a      	ldr	r3, [pc, #104]	; (800d16c <tcp_write+0x5a4>)
 800d104:	f240 22e6 	movw	r2, #742	; 0x2e6
 800d108:	491e      	ldr	r1, [pc, #120]	; (800d184 <tcp_write+0x5bc>)
 800d10a:	481a      	ldr	r0, [pc, #104]	; (800d174 <tcp_write+0x5ac>)
 800d10c:	f004 f9a0 	bl	8011450 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800d110:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d112:	685b      	ldr	r3, [r3, #4]
 800d114:	62bb      	str	r3, [r7, #40]	; 0x28
 800d116:	e009      	b.n	800d12c <tcp_write+0x564>
      p->tot_len += extendlen;
 800d118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d11a:	891a      	ldrh	r2, [r3, #8]
 800d11c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800d11e:	4413      	add	r3, r2
 800d120:	b29a      	uxth	r2, r3
 800d122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d124:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800d126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	62bb      	str	r3, [r7, #40]	; 0x28
 800d12c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	2b00      	cmp	r3, #0
 800d132:	d1f1      	bne.n	800d118 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 800d134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d136:	891a      	ldrh	r2, [r3, #8]
 800d138:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800d13a:	4413      	add	r3, r2
 800d13c:	b29a      	uxth	r2, r3
 800d13e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d140:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800d142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d144:	895a      	ldrh	r2, [r3, #10]
 800d146:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800d148:	4413      	add	r3, r2
 800d14a:	b29a      	uxth	r2, r3
 800d14c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d14e:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800d150:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d152:	891a      	ldrh	r2, [r3, #8]
 800d154:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800d156:	4413      	add	r3, r2
 800d158:	b29a      	uxth	r2, r3
 800d15a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d15c:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 800d15e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d160:	2b00      	cmp	r3, #0
 800d162:	d111      	bne.n	800d188 <tcp_write+0x5c0>
    pcb->unsent = queue;
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d168:	66da      	str	r2, [r3, #108]	; 0x6c
 800d16a:	e010      	b.n	800d18e <tcp_write+0x5c6>
 800d16c:	08014c14 	.word	0x08014c14
 800d170:	08014eb4 	.word	0x08014eb4
 800d174:	08014c68 	.word	0x08014c68
 800d178:	08014ef4 	.word	0x08014ef4
 800d17c:	08014f04 	.word	0x08014f04
 800d180:	08014f18 	.word	0x08014f18
 800d184:	08014f50 	.word	0x08014f50
  } else {
    last_unsent->next = queue;
 800d188:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d18a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d18c:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d192:	88fb      	ldrh	r3, [r7, #6]
 800d194:	441a      	add	r2, r3
 800d196:	68fb      	ldr	r3, [r7, #12]
 800d198:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800d1a0:	88fb      	ldrh	r3, [r7, #6]
 800d1a2:	1ad3      	subs	r3, r2, r3
 800d1a4:	b29a      	uxth	r2, r3
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800d1b2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d00e      	beq.n	800d1de <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d10a      	bne.n	800d1de <tcp_write+0x616>
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d106      	bne.n	800d1de <tcp_write+0x616>
 800d1d0:	4b2c      	ldr	r3, [pc, #176]	; (800d284 <tcp_write+0x6bc>)
 800d1d2:	f240 3212 	movw	r2, #786	; 0x312
 800d1d6:	492c      	ldr	r1, [pc, #176]	; (800d288 <tcp_write+0x6c0>)
 800d1d8:	482c      	ldr	r0, [pc, #176]	; (800d28c <tcp_write+0x6c4>)
 800d1da:	f004 f939 	bl	8011450 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800d1de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d016      	beq.n	800d212 <tcp_write+0x64a>
 800d1e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d1e6:	68db      	ldr	r3, [r3, #12]
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d012      	beq.n	800d212 <tcp_write+0x64a>
 800d1ec:	797b      	ldrb	r3, [r7, #5]
 800d1ee:	f003 0302 	and.w	r3, r3, #2
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d10d      	bne.n	800d212 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800d1f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d1f8:	68db      	ldr	r3, [r3, #12]
 800d1fa:	899b      	ldrh	r3, [r3, #12]
 800d1fc:	b29c      	uxth	r4, r3
 800d1fe:	2008      	movs	r0, #8
 800d200:	f7f9 fbcc 	bl	800699c <lwip_htons>
 800d204:	4603      	mov	r3, r0
 800d206:	461a      	mov	r2, r3
 800d208:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d20a:	68db      	ldr	r3, [r3, #12]
 800d20c:	4322      	orrs	r2, r4
 800d20e:	b292      	uxth	r2, r2
 800d210:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 800d212:	2300      	movs	r3, #0
 800d214:	e031      	b.n	800d27a <tcp_write+0x6b2>
          goto memerr;
 800d216:	bf00      	nop
 800d218:	e006      	b.n	800d228 <tcp_write+0x660>
            goto memerr;
 800d21a:	bf00      	nop
 800d21c:	e004      	b.n	800d228 <tcp_write+0x660>
        goto memerr;
 800d21e:	bf00      	nop
 800d220:	e002      	b.n	800d228 <tcp_write+0x660>
        goto memerr;
 800d222:	bf00      	nop
 800d224:	e000      	b.n	800d228 <tcp_write+0x660>
      goto memerr;
 800d226:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	8b5b      	ldrh	r3, [r3, #26]
 800d22c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d230:	b29a      	uxth	r2, r3
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 800d236:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d002      	beq.n	800d242 <tcp_write+0x67a>
    pbuf_free(concat_p);
 800d23c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800d23e:	f7fa ff3f 	bl	80080c0 <pbuf_free>
  }
  if (queue != NULL) {
 800d242:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d244:	2b00      	cmp	r3, #0
 800d246:	d002      	beq.n	800d24e <tcp_write+0x686>
    tcp_segs_free(queue);
 800d248:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800d24a:	f7fc fb51 	bl	80098f0 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d254:	2b00      	cmp	r3, #0
 800d256:	d00e      	beq.n	800d276 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d10a      	bne.n	800d276 <tcp_write+0x6ae>
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d264:	2b00      	cmp	r3, #0
 800d266:	d106      	bne.n	800d276 <tcp_write+0x6ae>
 800d268:	4b06      	ldr	r3, [pc, #24]	; (800d284 <tcp_write+0x6bc>)
 800d26a:	f240 3227 	movw	r2, #807	; 0x327
 800d26e:	4906      	ldr	r1, [pc, #24]	; (800d288 <tcp_write+0x6c0>)
 800d270:	4806      	ldr	r0, [pc, #24]	; (800d28c <tcp_write+0x6c4>)
 800d272:	f004 f8ed 	bl	8011450 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800d276:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800d27a:	4618      	mov	r0, r3
 800d27c:	375c      	adds	r7, #92	; 0x5c
 800d27e:	46bd      	mov	sp, r7
 800d280:	bd90      	pop	{r4, r7, pc}
 800d282:	bf00      	nop
 800d284:	08014c14 	.word	0x08014c14
 800d288:	08014f88 	.word	0x08014f88
 800d28c:	08014c68 	.word	0x08014c68

0800d290 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800d290:	b590      	push	{r4, r7, lr}
 800d292:	b08b      	sub	sp, #44	; 0x2c
 800d294:	af02      	add	r7, sp, #8
 800d296:	6078      	str	r0, [r7, #4]
 800d298:	460b      	mov	r3, r1
 800d29a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800d29c:	2300      	movs	r3, #0
 800d29e:	61fb      	str	r3, [r7, #28]
 800d2a0:	2300      	movs	r3, #0
 800d2a2:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800d2a4:	2300      	movs	r3, #0
 800d2a6:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d106      	bne.n	800d2bc <tcp_split_unsent_seg+0x2c>
 800d2ae:	4b95      	ldr	r3, [pc, #596]	; (800d504 <tcp_split_unsent_seg+0x274>)
 800d2b0:	f240 324b 	movw	r2, #843	; 0x34b
 800d2b4:	4994      	ldr	r1, [pc, #592]	; (800d508 <tcp_split_unsent_seg+0x278>)
 800d2b6:	4895      	ldr	r0, [pc, #596]	; (800d50c <tcp_split_unsent_seg+0x27c>)
 800d2b8:	f004 f8ca 	bl	8011450 <iprintf>

  useg = pcb->unsent;
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d2c0:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800d2c2:	697b      	ldr	r3, [r7, #20]
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d102      	bne.n	800d2ce <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800d2c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d2cc:	e116      	b.n	800d4fc <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800d2ce:	887b      	ldrh	r3, [r7, #2]
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d109      	bne.n	800d2e8 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800d2d4:	4b8b      	ldr	r3, [pc, #556]	; (800d504 <tcp_split_unsent_seg+0x274>)
 800d2d6:	f240 3253 	movw	r2, #851	; 0x353
 800d2da:	498d      	ldr	r1, [pc, #564]	; (800d510 <tcp_split_unsent_seg+0x280>)
 800d2dc:	488b      	ldr	r0, [pc, #556]	; (800d50c <tcp_split_unsent_seg+0x27c>)
 800d2de:	f004 f8b7 	bl	8011450 <iprintf>
    return ERR_VAL;
 800d2e2:	f06f 0305 	mvn.w	r3, #5
 800d2e6:	e109      	b.n	800d4fc <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800d2e8:	697b      	ldr	r3, [r7, #20]
 800d2ea:	891b      	ldrh	r3, [r3, #8]
 800d2ec:	887a      	ldrh	r2, [r7, #2]
 800d2ee:	429a      	cmp	r2, r3
 800d2f0:	d301      	bcc.n	800d2f6 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800d2f2:	2300      	movs	r3, #0
 800d2f4:	e102      	b.n	800d4fc <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d2fa:	887a      	ldrh	r2, [r7, #2]
 800d2fc:	429a      	cmp	r2, r3
 800d2fe:	d906      	bls.n	800d30e <tcp_split_unsent_seg+0x7e>
 800d300:	4b80      	ldr	r3, [pc, #512]	; (800d504 <tcp_split_unsent_seg+0x274>)
 800d302:	f240 325b 	movw	r2, #859	; 0x35b
 800d306:	4983      	ldr	r1, [pc, #524]	; (800d514 <tcp_split_unsent_seg+0x284>)
 800d308:	4880      	ldr	r0, [pc, #512]	; (800d50c <tcp_split_unsent_seg+0x27c>)
 800d30a:	f004 f8a1 	bl	8011450 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800d30e:	697b      	ldr	r3, [r7, #20]
 800d310:	891b      	ldrh	r3, [r3, #8]
 800d312:	2b00      	cmp	r3, #0
 800d314:	d106      	bne.n	800d324 <tcp_split_unsent_seg+0x94>
 800d316:	4b7b      	ldr	r3, [pc, #492]	; (800d504 <tcp_split_unsent_seg+0x274>)
 800d318:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800d31c:	497e      	ldr	r1, [pc, #504]	; (800d518 <tcp_split_unsent_seg+0x288>)
 800d31e:	487b      	ldr	r0, [pc, #492]	; (800d50c <tcp_split_unsent_seg+0x27c>)
 800d320:	f004 f896 	bl	8011450 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800d324:	697b      	ldr	r3, [r7, #20]
 800d326:	7a9b      	ldrb	r3, [r3, #10]
 800d328:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800d32a:	7bfb      	ldrb	r3, [r7, #15]
 800d32c:	009b      	lsls	r3, r3, #2
 800d32e:	b2db      	uxtb	r3, r3
 800d330:	f003 0304 	and.w	r3, r3, #4
 800d334:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800d336:	697b      	ldr	r3, [r7, #20]
 800d338:	891a      	ldrh	r2, [r3, #8]
 800d33a:	887b      	ldrh	r3, [r7, #2]
 800d33c:	1ad3      	subs	r3, r2, r3
 800d33e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800d340:	7bbb      	ldrb	r3, [r7, #14]
 800d342:	b29a      	uxth	r2, r3
 800d344:	89bb      	ldrh	r3, [r7, #12]
 800d346:	4413      	add	r3, r2
 800d348:	b29b      	uxth	r3, r3
 800d34a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d34e:	4619      	mov	r1, r3
 800d350:	2036      	movs	r0, #54	; 0x36
 800d352:	f7fa fbd1 	bl	8007af8 <pbuf_alloc>
 800d356:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800d358:	693b      	ldr	r3, [r7, #16]
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	f000 80b7 	beq.w	800d4ce <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800d360:	697b      	ldr	r3, [r7, #20]
 800d362:	685b      	ldr	r3, [r3, #4]
 800d364:	891a      	ldrh	r2, [r3, #8]
 800d366:	697b      	ldr	r3, [r7, #20]
 800d368:	891b      	ldrh	r3, [r3, #8]
 800d36a:	1ad3      	subs	r3, r2, r3
 800d36c:	b29a      	uxth	r2, r3
 800d36e:	887b      	ldrh	r3, [r7, #2]
 800d370:	4413      	add	r3, r2
 800d372:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800d374:	697b      	ldr	r3, [r7, #20]
 800d376:	6858      	ldr	r0, [r3, #4]
 800d378:	693b      	ldr	r3, [r7, #16]
 800d37a:	685a      	ldr	r2, [r3, #4]
 800d37c:	7bbb      	ldrb	r3, [r7, #14]
 800d37e:	18d1      	adds	r1, r2, r3
 800d380:	897b      	ldrh	r3, [r7, #10]
 800d382:	89ba      	ldrh	r2, [r7, #12]
 800d384:	f7fb f886 	bl	8008494 <pbuf_copy_partial>
 800d388:	4603      	mov	r3, r0
 800d38a:	461a      	mov	r2, r3
 800d38c:	89bb      	ldrh	r3, [r7, #12]
 800d38e:	4293      	cmp	r3, r2
 800d390:	f040 809f 	bne.w	800d4d2 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800d394:	697b      	ldr	r3, [r7, #20]
 800d396:	68db      	ldr	r3, [r3, #12]
 800d398:	899b      	ldrh	r3, [r3, #12]
 800d39a:	b29b      	uxth	r3, r3
 800d39c:	4618      	mov	r0, r3
 800d39e:	f7f9 fafd 	bl	800699c <lwip_htons>
 800d3a2:	4603      	mov	r3, r0
 800d3a4:	b2db      	uxtb	r3, r3
 800d3a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d3aa:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800d3ac:	2300      	movs	r3, #0
 800d3ae:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800d3b0:	7efb      	ldrb	r3, [r7, #27]
 800d3b2:	f003 0308 	and.w	r3, r3, #8
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d007      	beq.n	800d3ca <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800d3ba:	7efb      	ldrb	r3, [r7, #27]
 800d3bc:	f023 0308 	bic.w	r3, r3, #8
 800d3c0:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800d3c2:	7ebb      	ldrb	r3, [r7, #26]
 800d3c4:	f043 0308 	orr.w	r3, r3, #8
 800d3c8:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800d3ca:	7efb      	ldrb	r3, [r7, #27]
 800d3cc:	f003 0301 	and.w	r3, r3, #1
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d007      	beq.n	800d3e4 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800d3d4:	7efb      	ldrb	r3, [r7, #27]
 800d3d6:	f023 0301 	bic.w	r3, r3, #1
 800d3da:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800d3dc:	7ebb      	ldrb	r3, [r7, #26]
 800d3de:	f043 0301 	orr.w	r3, r3, #1
 800d3e2:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800d3e4:	697b      	ldr	r3, [r7, #20]
 800d3e6:	68db      	ldr	r3, [r3, #12]
 800d3e8:	685b      	ldr	r3, [r3, #4]
 800d3ea:	4618      	mov	r0, r3
 800d3ec:	f7f9 faeb 	bl	80069c6 <lwip_htonl>
 800d3f0:	4602      	mov	r2, r0
 800d3f2:	887b      	ldrh	r3, [r7, #2]
 800d3f4:	18d1      	adds	r1, r2, r3
 800d3f6:	7eba      	ldrb	r2, [r7, #26]
 800d3f8:	7bfb      	ldrb	r3, [r7, #15]
 800d3fa:	9300      	str	r3, [sp, #0]
 800d3fc:	460b      	mov	r3, r1
 800d3fe:	6939      	ldr	r1, [r7, #16]
 800d400:	6878      	ldr	r0, [r7, #4]
 800d402:	f7ff fa4f 	bl	800c8a4 <tcp_create_segment>
 800d406:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800d408:	69fb      	ldr	r3, [r7, #28]
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d063      	beq.n	800d4d6 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800d40e:	697b      	ldr	r3, [r7, #20]
 800d410:	685b      	ldr	r3, [r3, #4]
 800d412:	4618      	mov	r0, r3
 800d414:	f7fa fedc 	bl	80081d0 <pbuf_clen>
 800d418:	4603      	mov	r3, r0
 800d41a:	461a      	mov	r2, r3
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d422:	1a9b      	subs	r3, r3, r2
 800d424:	b29a      	uxth	r2, r3
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800d42c:	697b      	ldr	r3, [r7, #20]
 800d42e:	6858      	ldr	r0, [r3, #4]
 800d430:	697b      	ldr	r3, [r7, #20]
 800d432:	685b      	ldr	r3, [r3, #4]
 800d434:	891a      	ldrh	r2, [r3, #8]
 800d436:	89bb      	ldrh	r3, [r7, #12]
 800d438:	1ad3      	subs	r3, r2, r3
 800d43a:	b29b      	uxth	r3, r3
 800d43c:	4619      	mov	r1, r3
 800d43e:	f7fa fcb9 	bl	8007db4 <pbuf_realloc>
  useg->len -= remainder;
 800d442:	697b      	ldr	r3, [r7, #20]
 800d444:	891a      	ldrh	r2, [r3, #8]
 800d446:	89bb      	ldrh	r3, [r7, #12]
 800d448:	1ad3      	subs	r3, r2, r3
 800d44a:	b29a      	uxth	r2, r3
 800d44c:	697b      	ldr	r3, [r7, #20]
 800d44e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800d450:	697b      	ldr	r3, [r7, #20]
 800d452:	68db      	ldr	r3, [r3, #12]
 800d454:	899b      	ldrh	r3, [r3, #12]
 800d456:	b29c      	uxth	r4, r3
 800d458:	7efb      	ldrb	r3, [r7, #27]
 800d45a:	b29b      	uxth	r3, r3
 800d45c:	4618      	mov	r0, r3
 800d45e:	f7f9 fa9d 	bl	800699c <lwip_htons>
 800d462:	4603      	mov	r3, r0
 800d464:	461a      	mov	r2, r3
 800d466:	697b      	ldr	r3, [r7, #20]
 800d468:	68db      	ldr	r3, [r3, #12]
 800d46a:	4322      	orrs	r2, r4
 800d46c:	b292      	uxth	r2, r2
 800d46e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800d470:	697b      	ldr	r3, [r7, #20]
 800d472:	685b      	ldr	r3, [r3, #4]
 800d474:	4618      	mov	r0, r3
 800d476:	f7fa feab 	bl	80081d0 <pbuf_clen>
 800d47a:	4603      	mov	r3, r0
 800d47c:	461a      	mov	r2, r3
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d484:	4413      	add	r3, r2
 800d486:	b29a      	uxth	r2, r3
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800d48e:	69fb      	ldr	r3, [r7, #28]
 800d490:	685b      	ldr	r3, [r3, #4]
 800d492:	4618      	mov	r0, r3
 800d494:	f7fa fe9c 	bl	80081d0 <pbuf_clen>
 800d498:	4603      	mov	r3, r0
 800d49a:	461a      	mov	r2, r3
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d4a2:	4413      	add	r3, r2
 800d4a4:	b29a      	uxth	r2, r3
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800d4ac:	697b      	ldr	r3, [r7, #20]
 800d4ae:	681a      	ldr	r2, [r3, #0]
 800d4b0:	69fb      	ldr	r3, [r7, #28]
 800d4b2:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800d4b4:	697b      	ldr	r3, [r7, #20]
 800d4b6:	69fa      	ldr	r2, [r7, #28]
 800d4b8:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800d4ba:	69fb      	ldr	r3, [r7, #28]
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d103      	bne.n	800d4ca <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	2200      	movs	r2, #0
 800d4c6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800d4ca:	2300      	movs	r3, #0
 800d4cc:	e016      	b.n	800d4fc <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800d4ce:	bf00      	nop
 800d4d0:	e002      	b.n	800d4d8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800d4d2:	bf00      	nop
 800d4d4:	e000      	b.n	800d4d8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800d4d6:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800d4d8:	69fb      	ldr	r3, [r7, #28]
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d006      	beq.n	800d4ec <tcp_split_unsent_seg+0x25c>
 800d4de:	4b09      	ldr	r3, [pc, #36]	; (800d504 <tcp_split_unsent_seg+0x274>)
 800d4e0:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800d4e4:	490d      	ldr	r1, [pc, #52]	; (800d51c <tcp_split_unsent_seg+0x28c>)
 800d4e6:	4809      	ldr	r0, [pc, #36]	; (800d50c <tcp_split_unsent_seg+0x27c>)
 800d4e8:	f003 ffb2 	bl	8011450 <iprintf>
  if (p != NULL) {
 800d4ec:	693b      	ldr	r3, [r7, #16]
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d002      	beq.n	800d4f8 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800d4f2:	6938      	ldr	r0, [r7, #16]
 800d4f4:	f7fa fde4 	bl	80080c0 <pbuf_free>
  }

  return ERR_MEM;
 800d4f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800d4fc:	4618      	mov	r0, r3
 800d4fe:	3724      	adds	r7, #36	; 0x24
 800d500:	46bd      	mov	sp, r7
 800d502:	bd90      	pop	{r4, r7, pc}
 800d504:	08014c14 	.word	0x08014c14
 800d508:	08014fa8 	.word	0x08014fa8
 800d50c:	08014c68 	.word	0x08014c68
 800d510:	08014fcc 	.word	0x08014fcc
 800d514:	08014ff0 	.word	0x08014ff0
 800d518:	08015000 	.word	0x08015000
 800d51c:	08015010 	.word	0x08015010

0800d520 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800d520:	b590      	push	{r4, r7, lr}
 800d522:	b085      	sub	sp, #20
 800d524:	af00      	add	r7, sp, #0
 800d526:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d106      	bne.n	800d53c <tcp_send_fin+0x1c>
 800d52e:	4b21      	ldr	r3, [pc, #132]	; (800d5b4 <tcp_send_fin+0x94>)
 800d530:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800d534:	4920      	ldr	r1, [pc, #128]	; (800d5b8 <tcp_send_fin+0x98>)
 800d536:	4821      	ldr	r0, [pc, #132]	; (800d5bc <tcp_send_fin+0x9c>)
 800d538:	f003 ff8a 	bl	8011450 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d540:	2b00      	cmp	r3, #0
 800d542:	d02e      	beq.n	800d5a2 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d548:	60fb      	str	r3, [r7, #12]
 800d54a:	e002      	b.n	800d552 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	2b00      	cmp	r3, #0
 800d558:	d1f8      	bne.n	800d54c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800d55a:	68fb      	ldr	r3, [r7, #12]
 800d55c:	68db      	ldr	r3, [r3, #12]
 800d55e:	899b      	ldrh	r3, [r3, #12]
 800d560:	b29b      	uxth	r3, r3
 800d562:	4618      	mov	r0, r3
 800d564:	f7f9 fa1a 	bl	800699c <lwip_htons>
 800d568:	4603      	mov	r3, r0
 800d56a:	b2db      	uxtb	r3, r3
 800d56c:	f003 0307 	and.w	r3, r3, #7
 800d570:	2b00      	cmp	r3, #0
 800d572:	d116      	bne.n	800d5a2 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	68db      	ldr	r3, [r3, #12]
 800d578:	899b      	ldrh	r3, [r3, #12]
 800d57a:	b29c      	uxth	r4, r3
 800d57c:	2001      	movs	r0, #1
 800d57e:	f7f9 fa0d 	bl	800699c <lwip_htons>
 800d582:	4603      	mov	r3, r0
 800d584:	461a      	mov	r2, r3
 800d586:	68fb      	ldr	r3, [r7, #12]
 800d588:	68db      	ldr	r3, [r3, #12]
 800d58a:	4322      	orrs	r2, r4
 800d58c:	b292      	uxth	r2, r2
 800d58e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	8b5b      	ldrh	r3, [r3, #26]
 800d594:	f043 0320 	orr.w	r3, r3, #32
 800d598:	b29a      	uxth	r2, r3
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800d59e:	2300      	movs	r3, #0
 800d5a0:	e004      	b.n	800d5ac <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800d5a2:	2101      	movs	r1, #1
 800d5a4:	6878      	ldr	r0, [r7, #4]
 800d5a6:	f000 f80b 	bl	800d5c0 <tcp_enqueue_flags>
 800d5aa:	4603      	mov	r3, r0
}
 800d5ac:	4618      	mov	r0, r3
 800d5ae:	3714      	adds	r7, #20
 800d5b0:	46bd      	mov	sp, r7
 800d5b2:	bd90      	pop	{r4, r7, pc}
 800d5b4:	08014c14 	.word	0x08014c14
 800d5b8:	0801501c 	.word	0x0801501c
 800d5bc:	08014c68 	.word	0x08014c68

0800d5c0 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800d5c0:	b580      	push	{r7, lr}
 800d5c2:	b08a      	sub	sp, #40	; 0x28
 800d5c4:	af02      	add	r7, sp, #8
 800d5c6:	6078      	str	r0, [r7, #4]
 800d5c8:	460b      	mov	r3, r1
 800d5ca:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800d5cc:	2300      	movs	r3, #0
 800d5ce:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800d5d0:	2300      	movs	r3, #0
 800d5d2:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800d5d4:	78fb      	ldrb	r3, [r7, #3]
 800d5d6:	f003 0303 	and.w	r3, r3, #3
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d106      	bne.n	800d5ec <tcp_enqueue_flags+0x2c>
 800d5de:	4b67      	ldr	r3, [pc, #412]	; (800d77c <tcp_enqueue_flags+0x1bc>)
 800d5e0:	f240 4211 	movw	r2, #1041	; 0x411
 800d5e4:	4966      	ldr	r1, [pc, #408]	; (800d780 <tcp_enqueue_flags+0x1c0>)
 800d5e6:	4867      	ldr	r0, [pc, #412]	; (800d784 <tcp_enqueue_flags+0x1c4>)
 800d5e8:	f003 ff32 	bl	8011450 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d106      	bne.n	800d600 <tcp_enqueue_flags+0x40>
 800d5f2:	4b62      	ldr	r3, [pc, #392]	; (800d77c <tcp_enqueue_flags+0x1bc>)
 800d5f4:	f240 4213 	movw	r2, #1043	; 0x413
 800d5f8:	4963      	ldr	r1, [pc, #396]	; (800d788 <tcp_enqueue_flags+0x1c8>)
 800d5fa:	4862      	ldr	r0, [pc, #392]	; (800d784 <tcp_enqueue_flags+0x1c4>)
 800d5fc:	f003 ff28 	bl	8011450 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800d600:	78fb      	ldrb	r3, [r7, #3]
 800d602:	f003 0302 	and.w	r3, r3, #2
 800d606:	2b00      	cmp	r3, #0
 800d608:	d001      	beq.n	800d60e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800d60a:	2301      	movs	r3, #1
 800d60c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800d60e:	7ffb      	ldrb	r3, [r7, #31]
 800d610:	009b      	lsls	r3, r3, #2
 800d612:	b2db      	uxtb	r3, r3
 800d614:	f003 0304 	and.w	r3, r3, #4
 800d618:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800d61a:	7dfb      	ldrb	r3, [r7, #23]
 800d61c:	b29b      	uxth	r3, r3
 800d61e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d622:	4619      	mov	r1, r3
 800d624:	2036      	movs	r0, #54	; 0x36
 800d626:	f7fa fa67 	bl	8007af8 <pbuf_alloc>
 800d62a:	6138      	str	r0, [r7, #16]
 800d62c:	693b      	ldr	r3, [r7, #16]
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d109      	bne.n	800d646 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	8b5b      	ldrh	r3, [r3, #26]
 800d636:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d63a:	b29a      	uxth	r2, r3
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800d640:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d644:	e095      	b.n	800d772 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800d646:	693b      	ldr	r3, [r7, #16]
 800d648:	895a      	ldrh	r2, [r3, #10]
 800d64a:	7dfb      	ldrb	r3, [r7, #23]
 800d64c:	b29b      	uxth	r3, r3
 800d64e:	429a      	cmp	r2, r3
 800d650:	d206      	bcs.n	800d660 <tcp_enqueue_flags+0xa0>
 800d652:	4b4a      	ldr	r3, [pc, #296]	; (800d77c <tcp_enqueue_flags+0x1bc>)
 800d654:	f240 4239 	movw	r2, #1081	; 0x439
 800d658:	494c      	ldr	r1, [pc, #304]	; (800d78c <tcp_enqueue_flags+0x1cc>)
 800d65a:	484a      	ldr	r0, [pc, #296]	; (800d784 <tcp_enqueue_flags+0x1c4>)
 800d65c:	f003 fef8 	bl	8011450 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800d664:	78fa      	ldrb	r2, [r7, #3]
 800d666:	7ffb      	ldrb	r3, [r7, #31]
 800d668:	9300      	str	r3, [sp, #0]
 800d66a:	460b      	mov	r3, r1
 800d66c:	6939      	ldr	r1, [r7, #16]
 800d66e:	6878      	ldr	r0, [r7, #4]
 800d670:	f7ff f918 	bl	800c8a4 <tcp_create_segment>
 800d674:	60f8      	str	r0, [r7, #12]
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d109      	bne.n	800d690 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	8b5b      	ldrh	r3, [r3, #26]
 800d680:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d684:	b29a      	uxth	r2, r3
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800d68a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d68e:	e070      	b.n	800d772 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	68db      	ldr	r3, [r3, #12]
 800d694:	f003 0303 	and.w	r3, r3, #3
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d006      	beq.n	800d6aa <tcp_enqueue_flags+0xea>
 800d69c:	4b37      	ldr	r3, [pc, #220]	; (800d77c <tcp_enqueue_flags+0x1bc>)
 800d69e:	f240 4242 	movw	r2, #1090	; 0x442
 800d6a2:	493b      	ldr	r1, [pc, #236]	; (800d790 <tcp_enqueue_flags+0x1d0>)
 800d6a4:	4837      	ldr	r0, [pc, #220]	; (800d784 <tcp_enqueue_flags+0x1c4>)
 800d6a6:	f003 fed3 	bl	8011450 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	891b      	ldrh	r3, [r3, #8]
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d006      	beq.n	800d6c0 <tcp_enqueue_flags+0x100>
 800d6b2:	4b32      	ldr	r3, [pc, #200]	; (800d77c <tcp_enqueue_flags+0x1bc>)
 800d6b4:	f240 4243 	movw	r2, #1091	; 0x443
 800d6b8:	4936      	ldr	r1, [pc, #216]	; (800d794 <tcp_enqueue_flags+0x1d4>)
 800d6ba:	4832      	ldr	r0, [pc, #200]	; (800d784 <tcp_enqueue_flags+0x1c4>)
 800d6bc:	f003 fec8 	bl	8011450 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d103      	bne.n	800d6d0 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	68fa      	ldr	r2, [r7, #12]
 800d6cc:	66da      	str	r2, [r3, #108]	; 0x6c
 800d6ce:	e00d      	b.n	800d6ec <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d6d4:	61bb      	str	r3, [r7, #24]
 800d6d6:	e002      	b.n	800d6de <tcp_enqueue_flags+0x11e>
 800d6d8:	69bb      	ldr	r3, [r7, #24]
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	61bb      	str	r3, [r7, #24]
 800d6de:	69bb      	ldr	r3, [r7, #24]
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d1f8      	bne.n	800d6d8 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800d6e6:	69bb      	ldr	r3, [r7, #24]
 800d6e8:	68fa      	ldr	r2, [r7, #12]
 800d6ea:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	2200      	movs	r2, #0
 800d6f0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800d6f4:	78fb      	ldrb	r3, [r7, #3]
 800d6f6:	f003 0302 	and.w	r3, r3, #2
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d104      	bne.n	800d708 <tcp_enqueue_flags+0x148>
 800d6fe:	78fb      	ldrb	r3, [r7, #3]
 800d700:	f003 0301 	and.w	r3, r3, #1
 800d704:	2b00      	cmp	r3, #0
 800d706:	d004      	beq.n	800d712 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d70c:	1c5a      	adds	r2, r3, #1
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800d712:	78fb      	ldrb	r3, [r7, #3]
 800d714:	f003 0301 	and.w	r3, r3, #1
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d006      	beq.n	800d72a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	8b5b      	ldrh	r3, [r3, #26]
 800d720:	f043 0320 	orr.w	r3, r3, #32
 800d724:	b29a      	uxth	r2, r3
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	685b      	ldr	r3, [r3, #4]
 800d72e:	4618      	mov	r0, r3
 800d730:	f7fa fd4e 	bl	80081d0 <pbuf_clen>
 800d734:	4603      	mov	r3, r0
 800d736:	461a      	mov	r2, r3
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d73e:	4413      	add	r3, r2
 800d740:	b29a      	uxth	r2, r3
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d00e      	beq.n	800d770 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d756:	2b00      	cmp	r3, #0
 800d758:	d10a      	bne.n	800d770 <tcp_enqueue_flags+0x1b0>
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d106      	bne.n	800d770 <tcp_enqueue_flags+0x1b0>
 800d762:	4b06      	ldr	r3, [pc, #24]	; (800d77c <tcp_enqueue_flags+0x1bc>)
 800d764:	f240 4265 	movw	r2, #1125	; 0x465
 800d768:	490b      	ldr	r1, [pc, #44]	; (800d798 <tcp_enqueue_flags+0x1d8>)
 800d76a:	4806      	ldr	r0, [pc, #24]	; (800d784 <tcp_enqueue_flags+0x1c4>)
 800d76c:	f003 fe70 	bl	8011450 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800d770:	2300      	movs	r3, #0
}
 800d772:	4618      	mov	r0, r3
 800d774:	3720      	adds	r7, #32
 800d776:	46bd      	mov	sp, r7
 800d778:	bd80      	pop	{r7, pc}
 800d77a:	bf00      	nop
 800d77c:	08014c14 	.word	0x08014c14
 800d780:	08015038 	.word	0x08015038
 800d784:	08014c68 	.word	0x08014c68
 800d788:	08015090 	.word	0x08015090
 800d78c:	080150b0 	.word	0x080150b0
 800d790:	080150ec 	.word	0x080150ec
 800d794:	08015104 	.word	0x08015104
 800d798:	08015130 	.word	0x08015130

0800d79c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800d79c:	b5b0      	push	{r4, r5, r7, lr}
 800d79e:	b08a      	sub	sp, #40	; 0x28
 800d7a0:	af00      	add	r7, sp, #0
 800d7a2:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d106      	bne.n	800d7b8 <tcp_output+0x1c>
 800d7aa:	4b9e      	ldr	r3, [pc, #632]	; (800da24 <tcp_output+0x288>)
 800d7ac:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800d7b0:	499d      	ldr	r1, [pc, #628]	; (800da28 <tcp_output+0x28c>)
 800d7b2:	489e      	ldr	r0, [pc, #632]	; (800da2c <tcp_output+0x290>)
 800d7b4:	f003 fe4c 	bl	8011450 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	7d1b      	ldrb	r3, [r3, #20]
 800d7bc:	2b01      	cmp	r3, #1
 800d7be:	d106      	bne.n	800d7ce <tcp_output+0x32>
 800d7c0:	4b98      	ldr	r3, [pc, #608]	; (800da24 <tcp_output+0x288>)
 800d7c2:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800d7c6:	499a      	ldr	r1, [pc, #616]	; (800da30 <tcp_output+0x294>)
 800d7c8:	4898      	ldr	r0, [pc, #608]	; (800da2c <tcp_output+0x290>)
 800d7ca:	f003 fe41 	bl	8011450 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800d7ce:	4b99      	ldr	r3, [pc, #612]	; (800da34 <tcp_output+0x298>)
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	687a      	ldr	r2, [r7, #4]
 800d7d4:	429a      	cmp	r2, r3
 800d7d6:	d101      	bne.n	800d7dc <tcp_output+0x40>
    return ERR_OK;
 800d7d8:	2300      	movs	r3, #0
 800d7da:	e1ce      	b.n	800db7a <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d7e8:	4293      	cmp	r3, r2
 800d7ea:	bf28      	it	cs
 800d7ec:	4613      	movcs	r3, r2
 800d7ee:	b29b      	uxth	r3, r3
 800d7f0:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d7f6:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800d7f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d10b      	bne.n	800d816 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	8b5b      	ldrh	r3, [r3, #26]
 800d802:	f003 0302 	and.w	r3, r3, #2
 800d806:	2b00      	cmp	r3, #0
 800d808:	f000 81aa 	beq.w	800db60 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800d80c:	6878      	ldr	r0, [r7, #4]
 800d80e:	f000 fdcb 	bl	800e3a8 <tcp_send_empty_ack>
 800d812:	4603      	mov	r3, r0
 800d814:	e1b1      	b.n	800db7a <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800d816:	6879      	ldr	r1, [r7, #4]
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	3304      	adds	r3, #4
 800d81c:	461a      	mov	r2, r3
 800d81e:	6878      	ldr	r0, [r7, #4]
 800d820:	f7ff f824 	bl	800c86c <tcp_route>
 800d824:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800d826:	697b      	ldr	r3, [r7, #20]
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d102      	bne.n	800d832 <tcp_output+0x96>
    return ERR_RTE;
 800d82c:	f06f 0303 	mvn.w	r3, #3
 800d830:	e1a3      	b.n	800db7a <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	2b00      	cmp	r3, #0
 800d836:	d003      	beq.n	800d840 <tcp_output+0xa4>
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	681b      	ldr	r3, [r3, #0]
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d111      	bne.n	800d864 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800d840:	697b      	ldr	r3, [r7, #20]
 800d842:	2b00      	cmp	r3, #0
 800d844:	d002      	beq.n	800d84c <tcp_output+0xb0>
 800d846:	697b      	ldr	r3, [r7, #20]
 800d848:	3304      	adds	r3, #4
 800d84a:	e000      	b.n	800d84e <tcp_output+0xb2>
 800d84c:	2300      	movs	r3, #0
 800d84e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800d850:	693b      	ldr	r3, [r7, #16]
 800d852:	2b00      	cmp	r3, #0
 800d854:	d102      	bne.n	800d85c <tcp_output+0xc0>
      return ERR_RTE;
 800d856:	f06f 0303 	mvn.w	r3, #3
 800d85a:	e18e      	b.n	800db7a <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800d85c:	693b      	ldr	r3, [r7, #16]
 800d85e:	681a      	ldr	r2, [r3, #0]
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800d864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d866:	68db      	ldr	r3, [r3, #12]
 800d868:	685b      	ldr	r3, [r3, #4]
 800d86a:	4618      	mov	r0, r3
 800d86c:	f7f9 f8ab 	bl	80069c6 <lwip_htonl>
 800d870:	4602      	mov	r2, r0
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d876:	1ad3      	subs	r3, r2, r3
 800d878:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d87a:	8912      	ldrh	r2, [r2, #8]
 800d87c:	4413      	add	r3, r2
 800d87e:	69ba      	ldr	r2, [r7, #24]
 800d880:	429a      	cmp	r2, r3
 800d882:	d227      	bcs.n	800d8d4 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d88a:	461a      	mov	r2, r3
 800d88c:	69bb      	ldr	r3, [r7, #24]
 800d88e:	4293      	cmp	r3, r2
 800d890:	d114      	bne.n	800d8bc <tcp_output+0x120>
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d896:	2b00      	cmp	r3, #0
 800d898:	d110      	bne.n	800d8bc <tcp_output+0x120>
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d10b      	bne.n	800d8bc <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	2200      	movs	r2, #0
 800d8a8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	2201      	movs	r2, #1
 800d8b0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	2200      	movs	r2, #0
 800d8b8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	8b5b      	ldrh	r3, [r3, #26]
 800d8c0:	f003 0302 	and.w	r3, r3, #2
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	f000 814d 	beq.w	800db64 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800d8ca:	6878      	ldr	r0, [r7, #4]
 800d8cc:	f000 fd6c 	bl	800e3a8 <tcp_send_empty_ack>
 800d8d0:	4603      	mov	r3, r0
 800d8d2:	e152      	b.n	800db7a <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	2200      	movs	r2, #0
 800d8d8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d8e0:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800d8e2:	6a3b      	ldr	r3, [r7, #32]
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	f000 811c 	beq.w	800db22 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800d8ea:	e002      	b.n	800d8f2 <tcp_output+0x156>
 800d8ec:	6a3b      	ldr	r3, [r7, #32]
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	623b      	str	r3, [r7, #32]
 800d8f2:	6a3b      	ldr	r3, [r7, #32]
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d1f8      	bne.n	800d8ec <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800d8fa:	e112      	b.n	800db22 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800d8fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8fe:	68db      	ldr	r3, [r3, #12]
 800d900:	899b      	ldrh	r3, [r3, #12]
 800d902:	b29b      	uxth	r3, r3
 800d904:	4618      	mov	r0, r3
 800d906:	f7f9 f849 	bl	800699c <lwip_htons>
 800d90a:	4603      	mov	r3, r0
 800d90c:	b2db      	uxtb	r3, r3
 800d90e:	f003 0304 	and.w	r3, r3, #4
 800d912:	2b00      	cmp	r3, #0
 800d914:	d006      	beq.n	800d924 <tcp_output+0x188>
 800d916:	4b43      	ldr	r3, [pc, #268]	; (800da24 <tcp_output+0x288>)
 800d918:	f240 5236 	movw	r2, #1334	; 0x536
 800d91c:	4946      	ldr	r1, [pc, #280]	; (800da38 <tcp_output+0x29c>)
 800d91e:	4843      	ldr	r0, [pc, #268]	; (800da2c <tcp_output+0x290>)
 800d920:	f003 fd96 	bl	8011450 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d01f      	beq.n	800d96c <tcp_output+0x1d0>
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	8b5b      	ldrh	r3, [r3, #26]
 800d930:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800d934:	2b00      	cmp	r3, #0
 800d936:	d119      	bne.n	800d96c <tcp_output+0x1d0>
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d00b      	beq.n	800d958 <tcp_output+0x1bc>
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	2b00      	cmp	r3, #0
 800d948:	d110      	bne.n	800d96c <tcp_output+0x1d0>
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d94e:	891a      	ldrh	r2, [r3, #8]
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d954:	429a      	cmp	r2, r3
 800d956:	d209      	bcs.n	800d96c <tcp_output+0x1d0>
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d004      	beq.n	800d96c <tcp_output+0x1d0>
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d968:	2b08      	cmp	r3, #8
 800d96a:	d901      	bls.n	800d970 <tcp_output+0x1d4>
 800d96c:	2301      	movs	r3, #1
 800d96e:	e000      	b.n	800d972 <tcp_output+0x1d6>
 800d970:	2300      	movs	r3, #0
 800d972:	2b00      	cmp	r3, #0
 800d974:	d106      	bne.n	800d984 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	8b5b      	ldrh	r3, [r3, #26]
 800d97a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800d97e:	2b00      	cmp	r3, #0
 800d980:	f000 80e4 	beq.w	800db4c <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	7d1b      	ldrb	r3, [r3, #20]
 800d988:	2b02      	cmp	r3, #2
 800d98a:	d00d      	beq.n	800d9a8 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800d98c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d98e:	68db      	ldr	r3, [r3, #12]
 800d990:	899b      	ldrh	r3, [r3, #12]
 800d992:	b29c      	uxth	r4, r3
 800d994:	2010      	movs	r0, #16
 800d996:	f7f9 f801 	bl	800699c <lwip_htons>
 800d99a:	4603      	mov	r3, r0
 800d99c:	461a      	mov	r2, r3
 800d99e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9a0:	68db      	ldr	r3, [r3, #12]
 800d9a2:	4322      	orrs	r2, r4
 800d9a4:	b292      	uxth	r2, r2
 800d9a6:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800d9a8:	697a      	ldr	r2, [r7, #20]
 800d9aa:	6879      	ldr	r1, [r7, #4]
 800d9ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d9ae:	f000 f909 	bl	800dbc4 <tcp_output_segment>
 800d9b2:	4603      	mov	r3, r0
 800d9b4:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800d9b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d009      	beq.n	800d9d2 <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	8b5b      	ldrh	r3, [r3, #26]
 800d9c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d9c6:	b29a      	uxth	r2, r3
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	835a      	strh	r2, [r3, #26]
      return err;
 800d9cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d9d0:	e0d3      	b.n	800db7a <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800d9d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9d4:	681a      	ldr	r2, [r3, #0]
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	7d1b      	ldrb	r3, [r3, #20]
 800d9de:	2b02      	cmp	r3, #2
 800d9e0:	d006      	beq.n	800d9f0 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	8b5b      	ldrh	r3, [r3, #26]
 800d9e6:	f023 0303 	bic.w	r3, r3, #3
 800d9ea:	b29a      	uxth	r2, r3
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800d9f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9f2:	68db      	ldr	r3, [r3, #12]
 800d9f4:	685b      	ldr	r3, [r3, #4]
 800d9f6:	4618      	mov	r0, r3
 800d9f8:	f7f8 ffe5 	bl	80069c6 <lwip_htonl>
 800d9fc:	4604      	mov	r4, r0
 800d9fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da00:	891b      	ldrh	r3, [r3, #8]
 800da02:	461d      	mov	r5, r3
 800da04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da06:	68db      	ldr	r3, [r3, #12]
 800da08:	899b      	ldrh	r3, [r3, #12]
 800da0a:	b29b      	uxth	r3, r3
 800da0c:	4618      	mov	r0, r3
 800da0e:	f7f8 ffc5 	bl	800699c <lwip_htons>
 800da12:	4603      	mov	r3, r0
 800da14:	b2db      	uxtb	r3, r3
 800da16:	f003 0303 	and.w	r3, r3, #3
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d00e      	beq.n	800da3c <tcp_output+0x2a0>
 800da1e:	2301      	movs	r3, #1
 800da20:	e00d      	b.n	800da3e <tcp_output+0x2a2>
 800da22:	bf00      	nop
 800da24:	08014c14 	.word	0x08014c14
 800da28:	08015158 	.word	0x08015158
 800da2c:	08014c68 	.word	0x08014c68
 800da30:	08015170 	.word	0x08015170
 800da34:	2000d3f4 	.word	0x2000d3f4
 800da38:	08015198 	.word	0x08015198
 800da3c:	2300      	movs	r3, #0
 800da3e:	442b      	add	r3, r5
 800da40:	4423      	add	r3, r4
 800da42:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800da48:	68bb      	ldr	r3, [r7, #8]
 800da4a:	1ad3      	subs	r3, r2, r3
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	da02      	bge.n	800da56 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	68ba      	ldr	r2, [r7, #8]
 800da54:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800da56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da58:	891b      	ldrh	r3, [r3, #8]
 800da5a:	461c      	mov	r4, r3
 800da5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da5e:	68db      	ldr	r3, [r3, #12]
 800da60:	899b      	ldrh	r3, [r3, #12]
 800da62:	b29b      	uxth	r3, r3
 800da64:	4618      	mov	r0, r3
 800da66:	f7f8 ff99 	bl	800699c <lwip_htons>
 800da6a:	4603      	mov	r3, r0
 800da6c:	b2db      	uxtb	r3, r3
 800da6e:	f003 0303 	and.w	r3, r3, #3
 800da72:	2b00      	cmp	r3, #0
 800da74:	d001      	beq.n	800da7a <tcp_output+0x2de>
 800da76:	2301      	movs	r3, #1
 800da78:	e000      	b.n	800da7c <tcp_output+0x2e0>
 800da7a:	2300      	movs	r3, #0
 800da7c:	4423      	add	r3, r4
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d049      	beq.n	800db16 <tcp_output+0x37a>
      seg->next = NULL;
 800da82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da84:	2200      	movs	r2, #0
 800da86:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d105      	bne.n	800da9c <tcp_output+0x300>
        pcb->unacked = seg;
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800da94:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800da96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da98:	623b      	str	r3, [r7, #32]
 800da9a:	e03f      	b.n	800db1c <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800da9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da9e:	68db      	ldr	r3, [r3, #12]
 800daa0:	685b      	ldr	r3, [r3, #4]
 800daa2:	4618      	mov	r0, r3
 800daa4:	f7f8 ff8f 	bl	80069c6 <lwip_htonl>
 800daa8:	4604      	mov	r4, r0
 800daaa:	6a3b      	ldr	r3, [r7, #32]
 800daac:	68db      	ldr	r3, [r3, #12]
 800daae:	685b      	ldr	r3, [r3, #4]
 800dab0:	4618      	mov	r0, r3
 800dab2:	f7f8 ff88 	bl	80069c6 <lwip_htonl>
 800dab6:	4603      	mov	r3, r0
 800dab8:	1ae3      	subs	r3, r4, r3
 800daba:	2b00      	cmp	r3, #0
 800dabc:	da24      	bge.n	800db08 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	3370      	adds	r3, #112	; 0x70
 800dac2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800dac4:	e002      	b.n	800dacc <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800dac6:	69fb      	ldr	r3, [r7, #28]
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800dacc:	69fb      	ldr	r3, [r7, #28]
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d011      	beq.n	800daf8 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800dad4:	69fb      	ldr	r3, [r7, #28]
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	68db      	ldr	r3, [r3, #12]
 800dada:	685b      	ldr	r3, [r3, #4]
 800dadc:	4618      	mov	r0, r3
 800dade:	f7f8 ff72 	bl	80069c6 <lwip_htonl>
 800dae2:	4604      	mov	r4, r0
 800dae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dae6:	68db      	ldr	r3, [r3, #12]
 800dae8:	685b      	ldr	r3, [r3, #4]
 800daea:	4618      	mov	r0, r3
 800daec:	f7f8 ff6b 	bl	80069c6 <lwip_htonl>
 800daf0:	4603      	mov	r3, r0
 800daf2:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	dbe6      	blt.n	800dac6 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800daf8:	69fb      	ldr	r3, [r7, #28]
 800dafa:	681a      	ldr	r2, [r3, #0]
 800dafc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dafe:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800db00:	69fb      	ldr	r3, [r7, #28]
 800db02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800db04:	601a      	str	r2, [r3, #0]
 800db06:	e009      	b.n	800db1c <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800db08:	6a3b      	ldr	r3, [r7, #32]
 800db0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800db0c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800db0e:	6a3b      	ldr	r3, [r7, #32]
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	623b      	str	r3, [r7, #32]
 800db14:	e002      	b.n	800db1c <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800db16:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800db18:	f7fb feff 	bl	800991a <tcp_seg_free>
    }
    seg = pcb->unsent;
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db20:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800db22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db24:	2b00      	cmp	r3, #0
 800db26:	d012      	beq.n	800db4e <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800db28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db2a:	68db      	ldr	r3, [r3, #12]
 800db2c:	685b      	ldr	r3, [r3, #4]
 800db2e:	4618      	mov	r0, r3
 800db30:	f7f8 ff49 	bl	80069c6 <lwip_htonl>
 800db34:	4602      	mov	r2, r0
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800db3a:	1ad3      	subs	r3, r2, r3
 800db3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800db3e:	8912      	ldrh	r2, [r2, #8]
 800db40:	4413      	add	r3, r2
  while (seg != NULL &&
 800db42:	69ba      	ldr	r2, [r7, #24]
 800db44:	429a      	cmp	r2, r3
 800db46:	f4bf aed9 	bcs.w	800d8fc <tcp_output+0x160>
 800db4a:	e000      	b.n	800db4e <tcp_output+0x3b2>
      break;
 800db4c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db52:	2b00      	cmp	r3, #0
 800db54:	d108      	bne.n	800db68 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	2200      	movs	r2, #0
 800db5a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800db5e:	e004      	b.n	800db6a <tcp_output+0x3ce>
    goto output_done;
 800db60:	bf00      	nop
 800db62:	e002      	b.n	800db6a <tcp_output+0x3ce>
    goto output_done;
 800db64:	bf00      	nop
 800db66:	e000      	b.n	800db6a <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800db68:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	8b5b      	ldrh	r3, [r3, #26]
 800db6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800db72:	b29a      	uxth	r2, r3
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800db78:	2300      	movs	r3, #0
}
 800db7a:	4618      	mov	r0, r3
 800db7c:	3728      	adds	r7, #40	; 0x28
 800db7e:	46bd      	mov	sp, r7
 800db80:	bdb0      	pop	{r4, r5, r7, pc}
 800db82:	bf00      	nop

0800db84 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800db84:	b580      	push	{r7, lr}
 800db86:	b082      	sub	sp, #8
 800db88:	af00      	add	r7, sp, #0
 800db8a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d106      	bne.n	800dba0 <tcp_output_segment_busy+0x1c>
 800db92:	4b09      	ldr	r3, [pc, #36]	; (800dbb8 <tcp_output_segment_busy+0x34>)
 800db94:	f240 529a 	movw	r2, #1434	; 0x59a
 800db98:	4908      	ldr	r1, [pc, #32]	; (800dbbc <tcp_output_segment_busy+0x38>)
 800db9a:	4809      	ldr	r0, [pc, #36]	; (800dbc0 <tcp_output_segment_busy+0x3c>)
 800db9c:	f003 fc58 	bl	8011450 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	685b      	ldr	r3, [r3, #4]
 800dba4:	7b9b      	ldrb	r3, [r3, #14]
 800dba6:	2b01      	cmp	r3, #1
 800dba8:	d001      	beq.n	800dbae <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800dbaa:	2301      	movs	r3, #1
 800dbac:	e000      	b.n	800dbb0 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800dbae:	2300      	movs	r3, #0
}
 800dbb0:	4618      	mov	r0, r3
 800dbb2:	3708      	adds	r7, #8
 800dbb4:	46bd      	mov	sp, r7
 800dbb6:	bd80      	pop	{r7, pc}
 800dbb8:	08014c14 	.word	0x08014c14
 800dbbc:	080151b0 	.word	0x080151b0
 800dbc0:	08014c68 	.word	0x08014c68

0800dbc4 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800dbc4:	b5b0      	push	{r4, r5, r7, lr}
 800dbc6:	b08c      	sub	sp, #48	; 0x30
 800dbc8:	af04      	add	r7, sp, #16
 800dbca:	60f8      	str	r0, [r7, #12]
 800dbcc:	60b9      	str	r1, [r7, #8]
 800dbce:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d106      	bne.n	800dbe4 <tcp_output_segment+0x20>
 800dbd6:	4b63      	ldr	r3, [pc, #396]	; (800dd64 <tcp_output_segment+0x1a0>)
 800dbd8:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800dbdc:	4962      	ldr	r1, [pc, #392]	; (800dd68 <tcp_output_segment+0x1a4>)
 800dbde:	4863      	ldr	r0, [pc, #396]	; (800dd6c <tcp_output_segment+0x1a8>)
 800dbe0:	f003 fc36 	bl	8011450 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800dbe4:	68bb      	ldr	r3, [r7, #8]
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d106      	bne.n	800dbf8 <tcp_output_segment+0x34>
 800dbea:	4b5e      	ldr	r3, [pc, #376]	; (800dd64 <tcp_output_segment+0x1a0>)
 800dbec:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800dbf0:	495f      	ldr	r1, [pc, #380]	; (800dd70 <tcp_output_segment+0x1ac>)
 800dbf2:	485e      	ldr	r0, [pc, #376]	; (800dd6c <tcp_output_segment+0x1a8>)
 800dbf4:	f003 fc2c 	bl	8011450 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d106      	bne.n	800dc0c <tcp_output_segment+0x48>
 800dbfe:	4b59      	ldr	r3, [pc, #356]	; (800dd64 <tcp_output_segment+0x1a0>)
 800dc00:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800dc04:	495b      	ldr	r1, [pc, #364]	; (800dd74 <tcp_output_segment+0x1b0>)
 800dc06:	4859      	ldr	r0, [pc, #356]	; (800dd6c <tcp_output_segment+0x1a8>)
 800dc08:	f003 fc22 	bl	8011450 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800dc0c:	68f8      	ldr	r0, [r7, #12]
 800dc0e:	f7ff ffb9 	bl	800db84 <tcp_output_segment_busy>
 800dc12:	4603      	mov	r3, r0
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d001      	beq.n	800dc1c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800dc18:	2300      	movs	r3, #0
 800dc1a:	e09f      	b.n	800dd5c <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800dc1c:	68bb      	ldr	r3, [r7, #8]
 800dc1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dc20:	68fb      	ldr	r3, [r7, #12]
 800dc22:	68dc      	ldr	r4, [r3, #12]
 800dc24:	4610      	mov	r0, r2
 800dc26:	f7f8 fece 	bl	80069c6 <lwip_htonl>
 800dc2a:	4603      	mov	r3, r0
 800dc2c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800dc2e:	68bb      	ldr	r3, [r7, #8]
 800dc30:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	68dc      	ldr	r4, [r3, #12]
 800dc36:	4610      	mov	r0, r2
 800dc38:	f7f8 feb0 	bl	800699c <lwip_htons>
 800dc3c:	4603      	mov	r3, r0
 800dc3e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800dc40:	68bb      	ldr	r3, [r7, #8]
 800dc42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc44:	68ba      	ldr	r2, [r7, #8]
 800dc46:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800dc48:	441a      	add	r2, r3
 800dc4a:	68bb      	ldr	r3, [r7, #8]
 800dc4c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	68db      	ldr	r3, [r3, #12]
 800dc52:	3314      	adds	r3, #20
 800dc54:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800dc56:	68fb      	ldr	r3, [r7, #12]
 800dc58:	7a9b      	ldrb	r3, [r3, #10]
 800dc5a:	f003 0301 	and.w	r3, r3, #1
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d015      	beq.n	800dc8e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800dc62:	68bb      	ldr	r3, [r7, #8]
 800dc64:	3304      	adds	r3, #4
 800dc66:	461a      	mov	r2, r3
 800dc68:	6879      	ldr	r1, [r7, #4]
 800dc6a:	f44f 7006 	mov.w	r0, #536	; 0x218
 800dc6e:	f7fc fa37 	bl	800a0e0 <tcp_eff_send_mss_netif>
 800dc72:	4603      	mov	r3, r0
 800dc74:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800dc76:	8b7b      	ldrh	r3, [r7, #26]
 800dc78:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800dc7c:	4618      	mov	r0, r3
 800dc7e:	f7f8 fea2 	bl	80069c6 <lwip_htonl>
 800dc82:	4602      	mov	r2, r0
 800dc84:	69fb      	ldr	r3, [r7, #28]
 800dc86:	601a      	str	r2, [r3, #0]
    opts += 1;
 800dc88:	69fb      	ldr	r3, [r7, #28]
 800dc8a:	3304      	adds	r3, #4
 800dc8c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800dc8e:	68bb      	ldr	r3, [r7, #8]
 800dc90:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	da02      	bge.n	800dc9e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800dc98:	68bb      	ldr	r3, [r7, #8]
 800dc9a:	2200      	movs	r2, #0
 800dc9c:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800dc9e:	68bb      	ldr	r3, [r7, #8]
 800dca0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d10c      	bne.n	800dcc0 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800dca6:	4b34      	ldr	r3, [pc, #208]	; (800dd78 <tcp_output_segment+0x1b4>)
 800dca8:	681a      	ldr	r2, [r3, #0]
 800dcaa:	68bb      	ldr	r3, [r7, #8]
 800dcac:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	68db      	ldr	r3, [r3, #12]
 800dcb2:	685b      	ldr	r3, [r3, #4]
 800dcb4:	4618      	mov	r0, r3
 800dcb6:	f7f8 fe86 	bl	80069c6 <lwip_htonl>
 800dcba:	4602      	mov	r2, r0
 800dcbc:	68bb      	ldr	r3, [r7, #8]
 800dcbe:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	68da      	ldr	r2, [r3, #12]
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	685b      	ldr	r3, [r3, #4]
 800dcc8:	685b      	ldr	r3, [r3, #4]
 800dcca:	1ad3      	subs	r3, r2, r3
 800dccc:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800dcce:	68fb      	ldr	r3, [r7, #12]
 800dcd0:	685b      	ldr	r3, [r3, #4]
 800dcd2:	8959      	ldrh	r1, [r3, #10]
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	685b      	ldr	r3, [r3, #4]
 800dcd8:	8b3a      	ldrh	r2, [r7, #24]
 800dcda:	1a8a      	subs	r2, r1, r2
 800dcdc:	b292      	uxth	r2, r2
 800dcde:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	685b      	ldr	r3, [r3, #4]
 800dce4:	8919      	ldrh	r1, [r3, #8]
 800dce6:	68fb      	ldr	r3, [r7, #12]
 800dce8:	685b      	ldr	r3, [r3, #4]
 800dcea:	8b3a      	ldrh	r2, [r7, #24]
 800dcec:	1a8a      	subs	r2, r1, r2
 800dcee:	b292      	uxth	r2, r2
 800dcf0:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	685b      	ldr	r3, [r3, #4]
 800dcf6:	68fa      	ldr	r2, [r7, #12]
 800dcf8:	68d2      	ldr	r2, [r2, #12]
 800dcfa:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800dcfc:	68fb      	ldr	r3, [r7, #12]
 800dcfe:	68db      	ldr	r3, [r3, #12]
 800dd00:	2200      	movs	r2, #0
 800dd02:	741a      	strb	r2, [r3, #16]
 800dd04:	2200      	movs	r2, #0
 800dd06:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	68db      	ldr	r3, [r3, #12]
 800dd0c:	f103 0214 	add.w	r2, r3, #20
 800dd10:	68fb      	ldr	r3, [r7, #12]
 800dd12:	7a9b      	ldrb	r3, [r3, #10]
 800dd14:	009b      	lsls	r3, r3, #2
 800dd16:	f003 0304 	and.w	r3, r3, #4
 800dd1a:	4413      	add	r3, r2
 800dd1c:	69fa      	ldr	r2, [r7, #28]
 800dd1e:	429a      	cmp	r2, r3
 800dd20:	d006      	beq.n	800dd30 <tcp_output_segment+0x16c>
 800dd22:	4b10      	ldr	r3, [pc, #64]	; (800dd64 <tcp_output_segment+0x1a0>)
 800dd24:	f240 621c 	movw	r2, #1564	; 0x61c
 800dd28:	4914      	ldr	r1, [pc, #80]	; (800dd7c <tcp_output_segment+0x1b8>)
 800dd2a:	4810      	ldr	r0, [pc, #64]	; (800dd6c <tcp_output_segment+0x1a8>)
 800dd2c:	f003 fb90 	bl	8011450 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800dd30:	68fb      	ldr	r3, [r7, #12]
 800dd32:	6858      	ldr	r0, [r3, #4]
 800dd34:	68b9      	ldr	r1, [r7, #8]
 800dd36:	68bb      	ldr	r3, [r7, #8]
 800dd38:	1d1c      	adds	r4, r3, #4
 800dd3a:	68bb      	ldr	r3, [r7, #8]
 800dd3c:	7add      	ldrb	r5, [r3, #11]
 800dd3e:	68bb      	ldr	r3, [r7, #8]
 800dd40:	7a9b      	ldrb	r3, [r3, #10]
 800dd42:	687a      	ldr	r2, [r7, #4]
 800dd44:	9202      	str	r2, [sp, #8]
 800dd46:	2206      	movs	r2, #6
 800dd48:	9201      	str	r2, [sp, #4]
 800dd4a:	9300      	str	r3, [sp, #0]
 800dd4c:	462b      	mov	r3, r5
 800dd4e:	4622      	mov	r2, r4
 800dd50:	f002 fa36 	bl	80101c0 <ip4_output_if>
 800dd54:	4603      	mov	r3, r0
 800dd56:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800dd58:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800dd5c:	4618      	mov	r0, r3
 800dd5e:	3720      	adds	r7, #32
 800dd60:	46bd      	mov	sp, r7
 800dd62:	bdb0      	pop	{r4, r5, r7, pc}
 800dd64:	08014c14 	.word	0x08014c14
 800dd68:	080151d8 	.word	0x080151d8
 800dd6c:	08014c68 	.word	0x08014c68
 800dd70:	080151f8 	.word	0x080151f8
 800dd74:	08015218 	.word	0x08015218
 800dd78:	2000d3e4 	.word	0x2000d3e4
 800dd7c:	0801523c 	.word	0x0801523c

0800dd80 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800dd80:	b5b0      	push	{r4, r5, r7, lr}
 800dd82:	b084      	sub	sp, #16
 800dd84:	af00      	add	r7, sp, #0
 800dd86:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d106      	bne.n	800dd9c <tcp_rexmit_rto_prepare+0x1c>
 800dd8e:	4b31      	ldr	r3, [pc, #196]	; (800de54 <tcp_rexmit_rto_prepare+0xd4>)
 800dd90:	f240 6263 	movw	r2, #1635	; 0x663
 800dd94:	4930      	ldr	r1, [pc, #192]	; (800de58 <tcp_rexmit_rto_prepare+0xd8>)
 800dd96:	4831      	ldr	r0, [pc, #196]	; (800de5c <tcp_rexmit_rto_prepare+0xdc>)
 800dd98:	f003 fb5a 	bl	8011450 <iprintf>

  if (pcb->unacked == NULL) {
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d102      	bne.n	800ddaa <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800dda4:	f06f 0305 	mvn.w	r3, #5
 800dda8:	e050      	b.n	800de4c <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ddae:	60fb      	str	r3, [r7, #12]
 800ddb0:	e00b      	b.n	800ddca <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800ddb2:	68f8      	ldr	r0, [r7, #12]
 800ddb4:	f7ff fee6 	bl	800db84 <tcp_output_segment_busy>
 800ddb8:	4603      	mov	r3, r0
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d002      	beq.n	800ddc4 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800ddbe:	f06f 0305 	mvn.w	r3, #5
 800ddc2:	e043      	b.n	800de4c <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	681b      	ldr	r3, [r3, #0]
 800ddc8:	60fb      	str	r3, [r7, #12]
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d1ef      	bne.n	800ddb2 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800ddd2:	68f8      	ldr	r0, [r7, #12]
 800ddd4:	f7ff fed6 	bl	800db84 <tcp_output_segment_busy>
 800ddd8:	4603      	mov	r3, r0
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d002      	beq.n	800dde4 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800ddde:	f06f 0305 	mvn.w	r3, #5
 800dde2:	e033      	b.n	800de4c <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	2200      	movs	r2, #0
 800ddf8:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	8b5b      	ldrh	r3, [r3, #26]
 800ddfe:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800de02:	b29a      	uxth	r2, r3
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	68db      	ldr	r3, [r3, #12]
 800de0c:	685b      	ldr	r3, [r3, #4]
 800de0e:	4618      	mov	r0, r3
 800de10:	f7f8 fdd9 	bl	80069c6 <lwip_htonl>
 800de14:	4604      	mov	r4, r0
 800de16:	68fb      	ldr	r3, [r7, #12]
 800de18:	891b      	ldrh	r3, [r3, #8]
 800de1a:	461d      	mov	r5, r3
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	68db      	ldr	r3, [r3, #12]
 800de20:	899b      	ldrh	r3, [r3, #12]
 800de22:	b29b      	uxth	r3, r3
 800de24:	4618      	mov	r0, r3
 800de26:	f7f8 fdb9 	bl	800699c <lwip_htons>
 800de2a:	4603      	mov	r3, r0
 800de2c:	b2db      	uxtb	r3, r3
 800de2e:	f003 0303 	and.w	r3, r3, #3
 800de32:	2b00      	cmp	r3, #0
 800de34:	d001      	beq.n	800de3a <tcp_rexmit_rto_prepare+0xba>
 800de36:	2301      	movs	r3, #1
 800de38:	e000      	b.n	800de3c <tcp_rexmit_rto_prepare+0xbc>
 800de3a:	2300      	movs	r3, #0
 800de3c:	442b      	add	r3, r5
 800de3e:	18e2      	adds	r2, r4, r3
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	2200      	movs	r2, #0
 800de48:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800de4a:	2300      	movs	r3, #0
}
 800de4c:	4618      	mov	r0, r3
 800de4e:	3710      	adds	r7, #16
 800de50:	46bd      	mov	sp, r7
 800de52:	bdb0      	pop	{r4, r5, r7, pc}
 800de54:	08014c14 	.word	0x08014c14
 800de58:	08015250 	.word	0x08015250
 800de5c:	08014c68 	.word	0x08014c68

0800de60 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800de60:	b580      	push	{r7, lr}
 800de62:	b082      	sub	sp, #8
 800de64:	af00      	add	r7, sp, #0
 800de66:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d106      	bne.n	800de7c <tcp_rexmit_rto_commit+0x1c>
 800de6e:	4b0d      	ldr	r3, [pc, #52]	; (800dea4 <tcp_rexmit_rto_commit+0x44>)
 800de70:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800de74:	490c      	ldr	r1, [pc, #48]	; (800dea8 <tcp_rexmit_rto_commit+0x48>)
 800de76:	480d      	ldr	r0, [pc, #52]	; (800deac <tcp_rexmit_rto_commit+0x4c>)
 800de78:	f003 faea 	bl	8011450 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800de82:	2bff      	cmp	r3, #255	; 0xff
 800de84:	d007      	beq.n	800de96 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800de8c:	3301      	adds	r3, #1
 800de8e:	b2da      	uxtb	r2, r3
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800de96:	6878      	ldr	r0, [r7, #4]
 800de98:	f7ff fc80 	bl	800d79c <tcp_output>
}
 800de9c:	bf00      	nop
 800de9e:	3708      	adds	r7, #8
 800dea0:	46bd      	mov	sp, r7
 800dea2:	bd80      	pop	{r7, pc}
 800dea4:	08014c14 	.word	0x08014c14
 800dea8:	08015274 	.word	0x08015274
 800deac:	08014c68 	.word	0x08014c68

0800deb0 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800deb0:	b580      	push	{r7, lr}
 800deb2:	b082      	sub	sp, #8
 800deb4:	af00      	add	r7, sp, #0
 800deb6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	2b00      	cmp	r3, #0
 800debc:	d106      	bne.n	800decc <tcp_rexmit_rto+0x1c>
 800debe:	4b0a      	ldr	r3, [pc, #40]	; (800dee8 <tcp_rexmit_rto+0x38>)
 800dec0:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800dec4:	4909      	ldr	r1, [pc, #36]	; (800deec <tcp_rexmit_rto+0x3c>)
 800dec6:	480a      	ldr	r0, [pc, #40]	; (800def0 <tcp_rexmit_rto+0x40>)
 800dec8:	f003 fac2 	bl	8011450 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800decc:	6878      	ldr	r0, [r7, #4]
 800dece:	f7ff ff57 	bl	800dd80 <tcp_rexmit_rto_prepare>
 800ded2:	4603      	mov	r3, r0
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d102      	bne.n	800dede <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800ded8:	6878      	ldr	r0, [r7, #4]
 800deda:	f7ff ffc1 	bl	800de60 <tcp_rexmit_rto_commit>
  }
}
 800dede:	bf00      	nop
 800dee0:	3708      	adds	r7, #8
 800dee2:	46bd      	mov	sp, r7
 800dee4:	bd80      	pop	{r7, pc}
 800dee6:	bf00      	nop
 800dee8:	08014c14 	.word	0x08014c14
 800deec:	08015298 	.word	0x08015298
 800def0:	08014c68 	.word	0x08014c68

0800def4 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800def4:	b590      	push	{r4, r7, lr}
 800def6:	b085      	sub	sp, #20
 800def8:	af00      	add	r7, sp, #0
 800defa:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	2b00      	cmp	r3, #0
 800df00:	d106      	bne.n	800df10 <tcp_rexmit+0x1c>
 800df02:	4b2f      	ldr	r3, [pc, #188]	; (800dfc0 <tcp_rexmit+0xcc>)
 800df04:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800df08:	492e      	ldr	r1, [pc, #184]	; (800dfc4 <tcp_rexmit+0xd0>)
 800df0a:	482f      	ldr	r0, [pc, #188]	; (800dfc8 <tcp_rexmit+0xd4>)
 800df0c:	f003 faa0 	bl	8011450 <iprintf>

  if (pcb->unacked == NULL) {
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800df14:	2b00      	cmp	r3, #0
 800df16:	d102      	bne.n	800df1e <tcp_rexmit+0x2a>
    return ERR_VAL;
 800df18:	f06f 0305 	mvn.w	r3, #5
 800df1c:	e04c      	b.n	800dfb8 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800df22:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800df24:	68b8      	ldr	r0, [r7, #8]
 800df26:	f7ff fe2d 	bl	800db84 <tcp_output_segment_busy>
 800df2a:	4603      	mov	r3, r0
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d002      	beq.n	800df36 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800df30:	f06f 0305 	mvn.w	r3, #5
 800df34:	e040      	b.n	800dfb8 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800df36:	68bb      	ldr	r3, [r7, #8]
 800df38:	681a      	ldr	r2, [r3, #0]
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	336c      	adds	r3, #108	; 0x6c
 800df42:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800df44:	e002      	b.n	800df4c <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800df4c:	68fb      	ldr	r3, [r7, #12]
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	2b00      	cmp	r3, #0
 800df52:	d011      	beq.n	800df78 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	68db      	ldr	r3, [r3, #12]
 800df5a:	685b      	ldr	r3, [r3, #4]
 800df5c:	4618      	mov	r0, r3
 800df5e:	f7f8 fd32 	bl	80069c6 <lwip_htonl>
 800df62:	4604      	mov	r4, r0
 800df64:	68bb      	ldr	r3, [r7, #8]
 800df66:	68db      	ldr	r3, [r3, #12]
 800df68:	685b      	ldr	r3, [r3, #4]
 800df6a:	4618      	mov	r0, r3
 800df6c:	f7f8 fd2b 	bl	80069c6 <lwip_htonl>
 800df70:	4603      	mov	r3, r0
 800df72:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800df74:	2b00      	cmp	r3, #0
 800df76:	dbe6      	blt.n	800df46 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800df78:	68fb      	ldr	r3, [r7, #12]
 800df7a:	681a      	ldr	r2, [r3, #0]
 800df7c:	68bb      	ldr	r3, [r7, #8]
 800df7e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	68ba      	ldr	r2, [r7, #8]
 800df84:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800df86:	68bb      	ldr	r3, [r7, #8]
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d103      	bne.n	800df96 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	2200      	movs	r2, #0
 800df92:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800df9c:	2bff      	cmp	r3, #255	; 0xff
 800df9e:	d007      	beq.n	800dfb0 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800dfa6:	3301      	adds	r3, #1
 800dfa8:	b2da      	uxtb	r2, r3
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	2200      	movs	r2, #0
 800dfb4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800dfb6:	2300      	movs	r3, #0
}
 800dfb8:	4618      	mov	r0, r3
 800dfba:	3714      	adds	r7, #20
 800dfbc:	46bd      	mov	sp, r7
 800dfbe:	bd90      	pop	{r4, r7, pc}
 800dfc0:	08014c14 	.word	0x08014c14
 800dfc4:	080152b4 	.word	0x080152b4
 800dfc8:	08014c68 	.word	0x08014c68

0800dfcc <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800dfcc:	b580      	push	{r7, lr}
 800dfce:	b082      	sub	sp, #8
 800dfd0:	af00      	add	r7, sp, #0
 800dfd2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d106      	bne.n	800dfe8 <tcp_rexmit_fast+0x1c>
 800dfda:	4b2a      	ldr	r3, [pc, #168]	; (800e084 <tcp_rexmit_fast+0xb8>)
 800dfdc:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800dfe0:	4929      	ldr	r1, [pc, #164]	; (800e088 <tcp_rexmit_fast+0xbc>)
 800dfe2:	482a      	ldr	r0, [pc, #168]	; (800e08c <tcp_rexmit_fast+0xc0>)
 800dfe4:	f003 fa34 	bl	8011450 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	d044      	beq.n	800e07a <tcp_rexmit_fast+0xae>
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	8b5b      	ldrh	r3, [r3, #26]
 800dff4:	f003 0304 	and.w	r3, r3, #4
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	d13e      	bne.n	800e07a <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800dffc:	6878      	ldr	r0, [r7, #4]
 800dffe:	f7ff ff79 	bl	800def4 <tcp_rexmit>
 800e002:	4603      	mov	r3, r0
 800e004:	2b00      	cmp	r3, #0
 800e006:	d138      	bne.n	800e07a <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e014:	4293      	cmp	r3, r2
 800e016:	bf28      	it	cs
 800e018:	4613      	movcs	r3, r2
 800e01a:	b29b      	uxth	r3, r3
 800e01c:	0fda      	lsrs	r2, r3, #31
 800e01e:	4413      	add	r3, r2
 800e020:	105b      	asrs	r3, r3, #1
 800e022:	b29a      	uxth	r2, r3
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800e030:	461a      	mov	r2, r3
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e036:	005b      	lsls	r3, r3, #1
 800e038:	429a      	cmp	r2, r3
 800e03a:	d206      	bcs.n	800e04a <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e040:	005b      	lsls	r3, r3, #1
 800e042:	b29a      	uxth	r2, r3
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e054:	4619      	mov	r1, r3
 800e056:	0049      	lsls	r1, r1, #1
 800e058:	440b      	add	r3, r1
 800e05a:	b29b      	uxth	r3, r3
 800e05c:	4413      	add	r3, r2
 800e05e:	b29a      	uxth	r2, r3
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	8b5b      	ldrh	r3, [r3, #26]
 800e06a:	f043 0304 	orr.w	r3, r3, #4
 800e06e:	b29a      	uxth	r2, r3
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	2200      	movs	r2, #0
 800e078:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800e07a:	bf00      	nop
 800e07c:	3708      	adds	r7, #8
 800e07e:	46bd      	mov	sp, r7
 800e080:	bd80      	pop	{r7, pc}
 800e082:	bf00      	nop
 800e084:	08014c14 	.word	0x08014c14
 800e088:	080152cc 	.word	0x080152cc
 800e08c:	08014c68 	.word	0x08014c68

0800e090 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800e090:	b580      	push	{r7, lr}
 800e092:	b086      	sub	sp, #24
 800e094:	af00      	add	r7, sp, #0
 800e096:	60f8      	str	r0, [r7, #12]
 800e098:	607b      	str	r3, [r7, #4]
 800e09a:	460b      	mov	r3, r1
 800e09c:	817b      	strh	r3, [r7, #10]
 800e09e:	4613      	mov	r3, r2
 800e0a0:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800e0a2:	897a      	ldrh	r2, [r7, #10]
 800e0a4:	893b      	ldrh	r3, [r7, #8]
 800e0a6:	4413      	add	r3, r2
 800e0a8:	b29b      	uxth	r3, r3
 800e0aa:	3314      	adds	r3, #20
 800e0ac:	b29b      	uxth	r3, r3
 800e0ae:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e0b2:	4619      	mov	r1, r3
 800e0b4:	2022      	movs	r0, #34	; 0x22
 800e0b6:	f7f9 fd1f 	bl	8007af8 <pbuf_alloc>
 800e0ba:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800e0bc:	697b      	ldr	r3, [r7, #20]
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	d04d      	beq.n	800e15e <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800e0c2:	897b      	ldrh	r3, [r7, #10]
 800e0c4:	3313      	adds	r3, #19
 800e0c6:	697a      	ldr	r2, [r7, #20]
 800e0c8:	8952      	ldrh	r2, [r2, #10]
 800e0ca:	4293      	cmp	r3, r2
 800e0cc:	db06      	blt.n	800e0dc <tcp_output_alloc_header_common+0x4c>
 800e0ce:	4b26      	ldr	r3, [pc, #152]	; (800e168 <tcp_output_alloc_header_common+0xd8>)
 800e0d0:	f240 7223 	movw	r2, #1827	; 0x723
 800e0d4:	4925      	ldr	r1, [pc, #148]	; (800e16c <tcp_output_alloc_header_common+0xdc>)
 800e0d6:	4826      	ldr	r0, [pc, #152]	; (800e170 <tcp_output_alloc_header_common+0xe0>)
 800e0d8:	f003 f9ba 	bl	8011450 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800e0dc:	697b      	ldr	r3, [r7, #20]
 800e0de:	685b      	ldr	r3, [r3, #4]
 800e0e0:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800e0e2:	8c3b      	ldrh	r3, [r7, #32]
 800e0e4:	4618      	mov	r0, r3
 800e0e6:	f7f8 fc59 	bl	800699c <lwip_htons>
 800e0ea:	4603      	mov	r3, r0
 800e0ec:	461a      	mov	r2, r3
 800e0ee:	693b      	ldr	r3, [r7, #16]
 800e0f0:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800e0f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e0f4:	4618      	mov	r0, r3
 800e0f6:	f7f8 fc51 	bl	800699c <lwip_htons>
 800e0fa:	4603      	mov	r3, r0
 800e0fc:	461a      	mov	r2, r3
 800e0fe:	693b      	ldr	r3, [r7, #16]
 800e100:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800e102:	693b      	ldr	r3, [r7, #16]
 800e104:	687a      	ldr	r2, [r7, #4]
 800e106:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800e108:	68f8      	ldr	r0, [r7, #12]
 800e10a:	f7f8 fc5c 	bl	80069c6 <lwip_htonl>
 800e10e:	4602      	mov	r2, r0
 800e110:	693b      	ldr	r3, [r7, #16]
 800e112:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800e114:	897b      	ldrh	r3, [r7, #10]
 800e116:	089b      	lsrs	r3, r3, #2
 800e118:	b29b      	uxth	r3, r3
 800e11a:	3305      	adds	r3, #5
 800e11c:	b29b      	uxth	r3, r3
 800e11e:	031b      	lsls	r3, r3, #12
 800e120:	b29a      	uxth	r2, r3
 800e122:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e126:	b29b      	uxth	r3, r3
 800e128:	4313      	orrs	r3, r2
 800e12a:	b29b      	uxth	r3, r3
 800e12c:	4618      	mov	r0, r3
 800e12e:	f7f8 fc35 	bl	800699c <lwip_htons>
 800e132:	4603      	mov	r3, r0
 800e134:	461a      	mov	r2, r3
 800e136:	693b      	ldr	r3, [r7, #16]
 800e138:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800e13a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e13c:	4618      	mov	r0, r3
 800e13e:	f7f8 fc2d 	bl	800699c <lwip_htons>
 800e142:	4603      	mov	r3, r0
 800e144:	461a      	mov	r2, r3
 800e146:	693b      	ldr	r3, [r7, #16]
 800e148:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800e14a:	693b      	ldr	r3, [r7, #16]
 800e14c:	2200      	movs	r2, #0
 800e14e:	741a      	strb	r2, [r3, #16]
 800e150:	2200      	movs	r2, #0
 800e152:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800e154:	693b      	ldr	r3, [r7, #16]
 800e156:	2200      	movs	r2, #0
 800e158:	749a      	strb	r2, [r3, #18]
 800e15a:	2200      	movs	r2, #0
 800e15c:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800e15e:	697b      	ldr	r3, [r7, #20]
}
 800e160:	4618      	mov	r0, r3
 800e162:	3718      	adds	r7, #24
 800e164:	46bd      	mov	sp, r7
 800e166:	bd80      	pop	{r7, pc}
 800e168:	08014c14 	.word	0x08014c14
 800e16c:	080152ec 	.word	0x080152ec
 800e170:	08014c68 	.word	0x08014c68

0800e174 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800e174:	b5b0      	push	{r4, r5, r7, lr}
 800e176:	b08a      	sub	sp, #40	; 0x28
 800e178:	af04      	add	r7, sp, #16
 800e17a:	60f8      	str	r0, [r7, #12]
 800e17c:	607b      	str	r3, [r7, #4]
 800e17e:	460b      	mov	r3, r1
 800e180:	817b      	strh	r3, [r7, #10]
 800e182:	4613      	mov	r3, r2
 800e184:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800e186:	68fb      	ldr	r3, [r7, #12]
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d106      	bne.n	800e19a <tcp_output_alloc_header+0x26>
 800e18c:	4b15      	ldr	r3, [pc, #84]	; (800e1e4 <tcp_output_alloc_header+0x70>)
 800e18e:	f240 7242 	movw	r2, #1858	; 0x742
 800e192:	4915      	ldr	r1, [pc, #84]	; (800e1e8 <tcp_output_alloc_header+0x74>)
 800e194:	4815      	ldr	r0, [pc, #84]	; (800e1ec <tcp_output_alloc_header+0x78>)
 800e196:	f003 f95b 	bl	8011450 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800e19a:	68fb      	ldr	r3, [r7, #12]
 800e19c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800e19e:	68fb      	ldr	r3, [r7, #12]
 800e1a0:	8adb      	ldrh	r3, [r3, #22]
 800e1a2:	68fa      	ldr	r2, [r7, #12]
 800e1a4:	8b12      	ldrh	r2, [r2, #24]
 800e1a6:	68f9      	ldr	r1, [r7, #12]
 800e1a8:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800e1aa:	893d      	ldrh	r5, [r7, #8]
 800e1ac:	897c      	ldrh	r4, [r7, #10]
 800e1ae:	9103      	str	r1, [sp, #12]
 800e1b0:	2110      	movs	r1, #16
 800e1b2:	9102      	str	r1, [sp, #8]
 800e1b4:	9201      	str	r2, [sp, #4]
 800e1b6:	9300      	str	r3, [sp, #0]
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	462a      	mov	r2, r5
 800e1bc:	4621      	mov	r1, r4
 800e1be:	f7ff ff67 	bl	800e090 <tcp_output_alloc_header_common>
 800e1c2:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800e1c4:	697b      	ldr	r3, [r7, #20]
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d006      	beq.n	800e1d8 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800e1ca:	68fb      	ldr	r3, [r7, #12]
 800e1cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1ce:	68fa      	ldr	r2, [r7, #12]
 800e1d0:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800e1d2:	441a      	add	r2, r3
 800e1d4:	68fb      	ldr	r3, [r7, #12]
 800e1d6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800e1d8:	697b      	ldr	r3, [r7, #20]
}
 800e1da:	4618      	mov	r0, r3
 800e1dc:	3718      	adds	r7, #24
 800e1de:	46bd      	mov	sp, r7
 800e1e0:	bdb0      	pop	{r4, r5, r7, pc}
 800e1e2:	bf00      	nop
 800e1e4:	08014c14 	.word	0x08014c14
 800e1e8:	0801531c 	.word	0x0801531c
 800e1ec:	08014c68 	.word	0x08014c68

0800e1f0 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800e1f0:	b580      	push	{r7, lr}
 800e1f2:	b088      	sub	sp, #32
 800e1f4:	af00      	add	r7, sp, #0
 800e1f6:	60f8      	str	r0, [r7, #12]
 800e1f8:	60b9      	str	r1, [r7, #8]
 800e1fa:	4611      	mov	r1, r2
 800e1fc:	461a      	mov	r2, r3
 800e1fe:	460b      	mov	r3, r1
 800e200:	71fb      	strb	r3, [r7, #7]
 800e202:	4613      	mov	r3, r2
 800e204:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800e206:	2300      	movs	r3, #0
 800e208:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800e20a:	68bb      	ldr	r3, [r7, #8]
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d106      	bne.n	800e21e <tcp_output_fill_options+0x2e>
 800e210:	4b13      	ldr	r3, [pc, #76]	; (800e260 <tcp_output_fill_options+0x70>)
 800e212:	f240 7256 	movw	r2, #1878	; 0x756
 800e216:	4913      	ldr	r1, [pc, #76]	; (800e264 <tcp_output_fill_options+0x74>)
 800e218:	4813      	ldr	r0, [pc, #76]	; (800e268 <tcp_output_fill_options+0x78>)
 800e21a:	f003 f919 	bl	8011450 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800e21e:	68bb      	ldr	r3, [r7, #8]
 800e220:	685b      	ldr	r3, [r3, #4]
 800e222:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800e224:	69bb      	ldr	r3, [r7, #24]
 800e226:	3314      	adds	r3, #20
 800e228:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800e22a:	69bb      	ldr	r3, [r7, #24]
 800e22c:	f103 0214 	add.w	r2, r3, #20
 800e230:	8bfb      	ldrh	r3, [r7, #30]
 800e232:	009b      	lsls	r3, r3, #2
 800e234:	4619      	mov	r1, r3
 800e236:	79fb      	ldrb	r3, [r7, #7]
 800e238:	009b      	lsls	r3, r3, #2
 800e23a:	f003 0304 	and.w	r3, r3, #4
 800e23e:	440b      	add	r3, r1
 800e240:	4413      	add	r3, r2
 800e242:	697a      	ldr	r2, [r7, #20]
 800e244:	429a      	cmp	r2, r3
 800e246:	d006      	beq.n	800e256 <tcp_output_fill_options+0x66>
 800e248:	4b05      	ldr	r3, [pc, #20]	; (800e260 <tcp_output_fill_options+0x70>)
 800e24a:	f240 7275 	movw	r2, #1909	; 0x775
 800e24e:	4907      	ldr	r1, [pc, #28]	; (800e26c <tcp_output_fill_options+0x7c>)
 800e250:	4805      	ldr	r0, [pc, #20]	; (800e268 <tcp_output_fill_options+0x78>)
 800e252:	f003 f8fd 	bl	8011450 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800e256:	bf00      	nop
 800e258:	3720      	adds	r7, #32
 800e25a:	46bd      	mov	sp, r7
 800e25c:	bd80      	pop	{r7, pc}
 800e25e:	bf00      	nop
 800e260:	08014c14 	.word	0x08014c14
 800e264:	08015344 	.word	0x08015344
 800e268:	08014c68 	.word	0x08014c68
 800e26c:	0801523c 	.word	0x0801523c

0800e270 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800e270:	b580      	push	{r7, lr}
 800e272:	b08a      	sub	sp, #40	; 0x28
 800e274:	af04      	add	r7, sp, #16
 800e276:	60f8      	str	r0, [r7, #12]
 800e278:	60b9      	str	r1, [r7, #8]
 800e27a:	607a      	str	r2, [r7, #4]
 800e27c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800e27e:	68bb      	ldr	r3, [r7, #8]
 800e280:	2b00      	cmp	r3, #0
 800e282:	d106      	bne.n	800e292 <tcp_output_control_segment+0x22>
 800e284:	4b1c      	ldr	r3, [pc, #112]	; (800e2f8 <tcp_output_control_segment+0x88>)
 800e286:	f240 7287 	movw	r2, #1927	; 0x787
 800e28a:	491c      	ldr	r1, [pc, #112]	; (800e2fc <tcp_output_control_segment+0x8c>)
 800e28c:	481c      	ldr	r0, [pc, #112]	; (800e300 <tcp_output_control_segment+0x90>)
 800e28e:	f003 f8df 	bl	8011450 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800e292:	683a      	ldr	r2, [r7, #0]
 800e294:	6879      	ldr	r1, [r7, #4]
 800e296:	68f8      	ldr	r0, [r7, #12]
 800e298:	f7fe fae8 	bl	800c86c <tcp_route>
 800e29c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800e29e:	693b      	ldr	r3, [r7, #16]
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d102      	bne.n	800e2aa <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800e2a4:	23fc      	movs	r3, #252	; 0xfc
 800e2a6:	75fb      	strb	r3, [r7, #23]
 800e2a8:	e01c      	b.n	800e2e4 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800e2aa:	68fb      	ldr	r3, [r7, #12]
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d006      	beq.n	800e2be <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800e2b0:	68fb      	ldr	r3, [r7, #12]
 800e2b2:	7adb      	ldrb	r3, [r3, #11]
 800e2b4:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	7a9b      	ldrb	r3, [r3, #10]
 800e2ba:	757b      	strb	r3, [r7, #21]
 800e2bc:	e003      	b.n	800e2c6 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800e2be:	23ff      	movs	r3, #255	; 0xff
 800e2c0:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800e2c2:	2300      	movs	r3, #0
 800e2c4:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800e2c6:	7dba      	ldrb	r2, [r7, #22]
 800e2c8:	693b      	ldr	r3, [r7, #16]
 800e2ca:	9302      	str	r3, [sp, #8]
 800e2cc:	2306      	movs	r3, #6
 800e2ce:	9301      	str	r3, [sp, #4]
 800e2d0:	7d7b      	ldrb	r3, [r7, #21]
 800e2d2:	9300      	str	r3, [sp, #0]
 800e2d4:	4613      	mov	r3, r2
 800e2d6:	683a      	ldr	r2, [r7, #0]
 800e2d8:	6879      	ldr	r1, [r7, #4]
 800e2da:	68b8      	ldr	r0, [r7, #8]
 800e2dc:	f001 ff70 	bl	80101c0 <ip4_output_if>
 800e2e0:	4603      	mov	r3, r0
 800e2e2:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800e2e4:	68b8      	ldr	r0, [r7, #8]
 800e2e6:	f7f9 feeb 	bl	80080c0 <pbuf_free>
  return err;
 800e2ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e2ee:	4618      	mov	r0, r3
 800e2f0:	3718      	adds	r7, #24
 800e2f2:	46bd      	mov	sp, r7
 800e2f4:	bd80      	pop	{r7, pc}
 800e2f6:	bf00      	nop
 800e2f8:	08014c14 	.word	0x08014c14
 800e2fc:	0801536c 	.word	0x0801536c
 800e300:	08014c68 	.word	0x08014c68

0800e304 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800e304:	b590      	push	{r4, r7, lr}
 800e306:	b08b      	sub	sp, #44	; 0x2c
 800e308:	af04      	add	r7, sp, #16
 800e30a:	60f8      	str	r0, [r7, #12]
 800e30c:	60b9      	str	r1, [r7, #8]
 800e30e:	607a      	str	r2, [r7, #4]
 800e310:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800e312:	683b      	ldr	r3, [r7, #0]
 800e314:	2b00      	cmp	r3, #0
 800e316:	d106      	bne.n	800e326 <tcp_rst+0x22>
 800e318:	4b1f      	ldr	r3, [pc, #124]	; (800e398 <tcp_rst+0x94>)
 800e31a:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800e31e:	491f      	ldr	r1, [pc, #124]	; (800e39c <tcp_rst+0x98>)
 800e320:	481f      	ldr	r0, [pc, #124]	; (800e3a0 <tcp_rst+0x9c>)
 800e322:	f003 f895 	bl	8011450 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800e326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d106      	bne.n	800e33a <tcp_rst+0x36>
 800e32c:	4b1a      	ldr	r3, [pc, #104]	; (800e398 <tcp_rst+0x94>)
 800e32e:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800e332:	491c      	ldr	r1, [pc, #112]	; (800e3a4 <tcp_rst+0xa0>)
 800e334:	481a      	ldr	r0, [pc, #104]	; (800e3a0 <tcp_rst+0x9c>)
 800e336:	f003 f88b 	bl	8011450 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800e33a:	2300      	movs	r3, #0
 800e33c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800e33e:	f246 0308 	movw	r3, #24584	; 0x6008
 800e342:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800e344:	7dfb      	ldrb	r3, [r7, #23]
 800e346:	b29c      	uxth	r4, r3
 800e348:	68b8      	ldr	r0, [r7, #8]
 800e34a:	f7f8 fb3c 	bl	80069c6 <lwip_htonl>
 800e34e:	4602      	mov	r2, r0
 800e350:	8abb      	ldrh	r3, [r7, #20]
 800e352:	9303      	str	r3, [sp, #12]
 800e354:	2314      	movs	r3, #20
 800e356:	9302      	str	r3, [sp, #8]
 800e358:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800e35a:	9301      	str	r3, [sp, #4]
 800e35c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e35e:	9300      	str	r3, [sp, #0]
 800e360:	4613      	mov	r3, r2
 800e362:	2200      	movs	r2, #0
 800e364:	4621      	mov	r1, r4
 800e366:	6878      	ldr	r0, [r7, #4]
 800e368:	f7ff fe92 	bl	800e090 <tcp_output_alloc_header_common>
 800e36c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800e36e:	693b      	ldr	r3, [r7, #16]
 800e370:	2b00      	cmp	r3, #0
 800e372:	d00c      	beq.n	800e38e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800e374:	7dfb      	ldrb	r3, [r7, #23]
 800e376:	2200      	movs	r2, #0
 800e378:	6939      	ldr	r1, [r7, #16]
 800e37a:	68f8      	ldr	r0, [r7, #12]
 800e37c:	f7ff ff38 	bl	800e1f0 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800e380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e382:	683a      	ldr	r2, [r7, #0]
 800e384:	6939      	ldr	r1, [r7, #16]
 800e386:	68f8      	ldr	r0, [r7, #12]
 800e388:	f7ff ff72 	bl	800e270 <tcp_output_control_segment>
 800e38c:	e000      	b.n	800e390 <tcp_rst+0x8c>
    return;
 800e38e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800e390:	371c      	adds	r7, #28
 800e392:	46bd      	mov	sp, r7
 800e394:	bd90      	pop	{r4, r7, pc}
 800e396:	bf00      	nop
 800e398:	08014c14 	.word	0x08014c14
 800e39c:	08015398 	.word	0x08015398
 800e3a0:	08014c68 	.word	0x08014c68
 800e3a4:	080153b4 	.word	0x080153b4

0800e3a8 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800e3a8:	b590      	push	{r4, r7, lr}
 800e3aa:	b087      	sub	sp, #28
 800e3ac:	af00      	add	r7, sp, #0
 800e3ae:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800e3b0:	2300      	movs	r3, #0
 800e3b2:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800e3b4:	2300      	movs	r3, #0
 800e3b6:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d106      	bne.n	800e3cc <tcp_send_empty_ack+0x24>
 800e3be:	4b28      	ldr	r3, [pc, #160]	; (800e460 <tcp_send_empty_ack+0xb8>)
 800e3c0:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800e3c4:	4927      	ldr	r1, [pc, #156]	; (800e464 <tcp_send_empty_ack+0xbc>)
 800e3c6:	4828      	ldr	r0, [pc, #160]	; (800e468 <tcp_send_empty_ack+0xc0>)
 800e3c8:	f003 f842 	bl	8011450 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800e3cc:	7dfb      	ldrb	r3, [r7, #23]
 800e3ce:	009b      	lsls	r3, r3, #2
 800e3d0:	b2db      	uxtb	r3, r3
 800e3d2:	f003 0304 	and.w	r3, r3, #4
 800e3d6:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800e3d8:	7d7b      	ldrb	r3, [r7, #21]
 800e3da:	b29c      	uxth	r4, r3
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e3e0:	4618      	mov	r0, r3
 800e3e2:	f7f8 faf0 	bl	80069c6 <lwip_htonl>
 800e3e6:	4603      	mov	r3, r0
 800e3e8:	2200      	movs	r2, #0
 800e3ea:	4621      	mov	r1, r4
 800e3ec:	6878      	ldr	r0, [r7, #4]
 800e3ee:	f7ff fec1 	bl	800e174 <tcp_output_alloc_header>
 800e3f2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800e3f4:	693b      	ldr	r3, [r7, #16]
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d109      	bne.n	800e40e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	8b5b      	ldrh	r3, [r3, #26]
 800e3fe:	f043 0303 	orr.w	r3, r3, #3
 800e402:	b29a      	uxth	r2, r3
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800e408:	f06f 0301 	mvn.w	r3, #1
 800e40c:	e023      	b.n	800e456 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800e40e:	7dbb      	ldrb	r3, [r7, #22]
 800e410:	7dfa      	ldrb	r2, [r7, #23]
 800e412:	6939      	ldr	r1, [r7, #16]
 800e414:	6878      	ldr	r0, [r7, #4]
 800e416:	f7ff feeb 	bl	800e1f0 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800e41a:	687a      	ldr	r2, [r7, #4]
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	3304      	adds	r3, #4
 800e420:	6939      	ldr	r1, [r7, #16]
 800e422:	6878      	ldr	r0, [r7, #4]
 800e424:	f7ff ff24 	bl	800e270 <tcp_output_control_segment>
 800e428:	4603      	mov	r3, r0
 800e42a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800e42c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e430:	2b00      	cmp	r3, #0
 800e432:	d007      	beq.n	800e444 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	8b5b      	ldrh	r3, [r3, #26]
 800e438:	f043 0303 	orr.w	r3, r3, #3
 800e43c:	b29a      	uxth	r2, r3
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	835a      	strh	r2, [r3, #26]
 800e442:	e006      	b.n	800e452 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	8b5b      	ldrh	r3, [r3, #26]
 800e448:	f023 0303 	bic.w	r3, r3, #3
 800e44c:	b29a      	uxth	r2, r3
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800e452:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e456:	4618      	mov	r0, r3
 800e458:	371c      	adds	r7, #28
 800e45a:	46bd      	mov	sp, r7
 800e45c:	bd90      	pop	{r4, r7, pc}
 800e45e:	bf00      	nop
 800e460:	08014c14 	.word	0x08014c14
 800e464:	080153d0 	.word	0x080153d0
 800e468:	08014c68 	.word	0x08014c68

0800e46c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800e46c:	b590      	push	{r4, r7, lr}
 800e46e:	b087      	sub	sp, #28
 800e470:	af00      	add	r7, sp, #0
 800e472:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800e474:	2300      	movs	r3, #0
 800e476:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d106      	bne.n	800e48c <tcp_keepalive+0x20>
 800e47e:	4b18      	ldr	r3, [pc, #96]	; (800e4e0 <tcp_keepalive+0x74>)
 800e480:	f640 0224 	movw	r2, #2084	; 0x824
 800e484:	4917      	ldr	r1, [pc, #92]	; (800e4e4 <tcp_keepalive+0x78>)
 800e486:	4818      	ldr	r0, [pc, #96]	; (800e4e8 <tcp_keepalive+0x7c>)
 800e488:	f002 ffe2 	bl	8011450 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800e48c:	7dfb      	ldrb	r3, [r7, #23]
 800e48e:	b29c      	uxth	r4, r3
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e494:	3b01      	subs	r3, #1
 800e496:	4618      	mov	r0, r3
 800e498:	f7f8 fa95 	bl	80069c6 <lwip_htonl>
 800e49c:	4603      	mov	r3, r0
 800e49e:	2200      	movs	r2, #0
 800e4a0:	4621      	mov	r1, r4
 800e4a2:	6878      	ldr	r0, [r7, #4]
 800e4a4:	f7ff fe66 	bl	800e174 <tcp_output_alloc_header>
 800e4a8:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800e4aa:	693b      	ldr	r3, [r7, #16]
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d102      	bne.n	800e4b6 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800e4b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e4b4:	e010      	b.n	800e4d8 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800e4b6:	7dfb      	ldrb	r3, [r7, #23]
 800e4b8:	2200      	movs	r2, #0
 800e4ba:	6939      	ldr	r1, [r7, #16]
 800e4bc:	6878      	ldr	r0, [r7, #4]
 800e4be:	f7ff fe97 	bl	800e1f0 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800e4c2:	687a      	ldr	r2, [r7, #4]
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	3304      	adds	r3, #4
 800e4c8:	6939      	ldr	r1, [r7, #16]
 800e4ca:	6878      	ldr	r0, [r7, #4]
 800e4cc:	f7ff fed0 	bl	800e270 <tcp_output_control_segment>
 800e4d0:	4603      	mov	r3, r0
 800e4d2:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800e4d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e4d8:	4618      	mov	r0, r3
 800e4da:	371c      	adds	r7, #28
 800e4dc:	46bd      	mov	sp, r7
 800e4de:	bd90      	pop	{r4, r7, pc}
 800e4e0:	08014c14 	.word	0x08014c14
 800e4e4:	080153f0 	.word	0x080153f0
 800e4e8:	08014c68 	.word	0x08014c68

0800e4ec <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800e4ec:	b590      	push	{r4, r7, lr}
 800e4ee:	b08b      	sub	sp, #44	; 0x2c
 800e4f0:	af00      	add	r7, sp, #0
 800e4f2:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800e4f4:	2300      	movs	r3, #0
 800e4f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	d106      	bne.n	800e50e <tcp_zero_window_probe+0x22>
 800e500:	4b4c      	ldr	r3, [pc, #304]	; (800e634 <tcp_zero_window_probe+0x148>)
 800e502:	f640 024f 	movw	r2, #2127	; 0x84f
 800e506:	494c      	ldr	r1, [pc, #304]	; (800e638 <tcp_zero_window_probe+0x14c>)
 800e508:	484c      	ldr	r0, [pc, #304]	; (800e63c <tcp_zero_window_probe+0x150>)
 800e50a:	f002 ffa1 	bl	8011450 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e512:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800e514:	6a3b      	ldr	r3, [r7, #32]
 800e516:	2b00      	cmp	r3, #0
 800e518:	d101      	bne.n	800e51e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800e51a:	2300      	movs	r3, #0
 800e51c:	e086      	b.n	800e62c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800e524:	2bff      	cmp	r3, #255	; 0xff
 800e526:	d007      	beq.n	800e538 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800e52e:	3301      	adds	r3, #1
 800e530:	b2da      	uxtb	r2, r3
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800e538:	6a3b      	ldr	r3, [r7, #32]
 800e53a:	68db      	ldr	r3, [r3, #12]
 800e53c:	899b      	ldrh	r3, [r3, #12]
 800e53e:	b29b      	uxth	r3, r3
 800e540:	4618      	mov	r0, r3
 800e542:	f7f8 fa2b 	bl	800699c <lwip_htons>
 800e546:	4603      	mov	r3, r0
 800e548:	b2db      	uxtb	r3, r3
 800e54a:	f003 0301 	and.w	r3, r3, #1
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d005      	beq.n	800e55e <tcp_zero_window_probe+0x72>
 800e552:	6a3b      	ldr	r3, [r7, #32]
 800e554:	891b      	ldrh	r3, [r3, #8]
 800e556:	2b00      	cmp	r3, #0
 800e558:	d101      	bne.n	800e55e <tcp_zero_window_probe+0x72>
 800e55a:	2301      	movs	r3, #1
 800e55c:	e000      	b.n	800e560 <tcp_zero_window_probe+0x74>
 800e55e:	2300      	movs	r3, #0
 800e560:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800e562:	7ffb      	ldrb	r3, [r7, #31]
 800e564:	2b00      	cmp	r3, #0
 800e566:	bf0c      	ite	eq
 800e568:	2301      	moveq	r3, #1
 800e56a:	2300      	movne	r3, #0
 800e56c:	b2db      	uxtb	r3, r3
 800e56e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800e570:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e574:	b299      	uxth	r1, r3
 800e576:	6a3b      	ldr	r3, [r7, #32]
 800e578:	68db      	ldr	r3, [r3, #12]
 800e57a:	685b      	ldr	r3, [r3, #4]
 800e57c:	8bba      	ldrh	r2, [r7, #28]
 800e57e:	6878      	ldr	r0, [r7, #4]
 800e580:	f7ff fdf8 	bl	800e174 <tcp_output_alloc_header>
 800e584:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800e586:	69bb      	ldr	r3, [r7, #24]
 800e588:	2b00      	cmp	r3, #0
 800e58a:	d102      	bne.n	800e592 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800e58c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e590:	e04c      	b.n	800e62c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800e592:	69bb      	ldr	r3, [r7, #24]
 800e594:	685b      	ldr	r3, [r3, #4]
 800e596:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800e598:	7ffb      	ldrb	r3, [r7, #31]
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d011      	beq.n	800e5c2 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800e59e:	697b      	ldr	r3, [r7, #20]
 800e5a0:	899b      	ldrh	r3, [r3, #12]
 800e5a2:	b29b      	uxth	r3, r3
 800e5a4:	b21b      	sxth	r3, r3
 800e5a6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800e5aa:	b21c      	sxth	r4, r3
 800e5ac:	2011      	movs	r0, #17
 800e5ae:	f7f8 f9f5 	bl	800699c <lwip_htons>
 800e5b2:	4603      	mov	r3, r0
 800e5b4:	b21b      	sxth	r3, r3
 800e5b6:	4323      	orrs	r3, r4
 800e5b8:	b21b      	sxth	r3, r3
 800e5ba:	b29a      	uxth	r2, r3
 800e5bc:	697b      	ldr	r3, [r7, #20]
 800e5be:	819a      	strh	r2, [r3, #12]
 800e5c0:	e010      	b.n	800e5e4 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800e5c2:	69bb      	ldr	r3, [r7, #24]
 800e5c4:	685b      	ldr	r3, [r3, #4]
 800e5c6:	3314      	adds	r3, #20
 800e5c8:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800e5ca:	6a3b      	ldr	r3, [r7, #32]
 800e5cc:	6858      	ldr	r0, [r3, #4]
 800e5ce:	6a3b      	ldr	r3, [r7, #32]
 800e5d0:	685b      	ldr	r3, [r3, #4]
 800e5d2:	891a      	ldrh	r2, [r3, #8]
 800e5d4:	6a3b      	ldr	r3, [r7, #32]
 800e5d6:	891b      	ldrh	r3, [r3, #8]
 800e5d8:	1ad3      	subs	r3, r2, r3
 800e5da:	b29b      	uxth	r3, r3
 800e5dc:	2201      	movs	r2, #1
 800e5de:	6939      	ldr	r1, [r7, #16]
 800e5e0:	f7f9 ff58 	bl	8008494 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800e5e4:	6a3b      	ldr	r3, [r7, #32]
 800e5e6:	68db      	ldr	r3, [r3, #12]
 800e5e8:	685b      	ldr	r3, [r3, #4]
 800e5ea:	4618      	mov	r0, r3
 800e5ec:	f7f8 f9eb 	bl	80069c6 <lwip_htonl>
 800e5f0:	4603      	mov	r3, r0
 800e5f2:	3301      	adds	r3, #1
 800e5f4:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e5fa:	68fb      	ldr	r3, [r7, #12]
 800e5fc:	1ad3      	subs	r3, r2, r3
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	da02      	bge.n	800e608 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	68fa      	ldr	r2, [r7, #12]
 800e606:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800e608:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e60c:	2200      	movs	r2, #0
 800e60e:	69b9      	ldr	r1, [r7, #24]
 800e610:	6878      	ldr	r0, [r7, #4]
 800e612:	f7ff fded 	bl	800e1f0 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800e616:	687a      	ldr	r2, [r7, #4]
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	3304      	adds	r3, #4
 800e61c:	69b9      	ldr	r1, [r7, #24]
 800e61e:	6878      	ldr	r0, [r7, #4]
 800e620:	f7ff fe26 	bl	800e270 <tcp_output_control_segment>
 800e624:	4603      	mov	r3, r0
 800e626:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800e628:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800e62c:	4618      	mov	r0, r3
 800e62e:	372c      	adds	r7, #44	; 0x2c
 800e630:	46bd      	mov	sp, r7
 800e632:	bd90      	pop	{r4, r7, pc}
 800e634:	08014c14 	.word	0x08014c14
 800e638:	0801540c 	.word	0x0801540c
 800e63c:	08014c68 	.word	0x08014c68

0800e640 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800e640:	b580      	push	{r7, lr}
 800e642:	b082      	sub	sp, #8
 800e644:	af00      	add	r7, sp, #0
 800e646:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800e648:	f7fa f812 	bl	8008670 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800e64c:	4b0a      	ldr	r3, [pc, #40]	; (800e678 <tcpip_tcp_timer+0x38>)
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	2b00      	cmp	r3, #0
 800e652:	d103      	bne.n	800e65c <tcpip_tcp_timer+0x1c>
 800e654:	4b09      	ldr	r3, [pc, #36]	; (800e67c <tcpip_tcp_timer+0x3c>)
 800e656:	681b      	ldr	r3, [r3, #0]
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d005      	beq.n	800e668 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800e65c:	2200      	movs	r2, #0
 800e65e:	4908      	ldr	r1, [pc, #32]	; (800e680 <tcpip_tcp_timer+0x40>)
 800e660:	20fa      	movs	r0, #250	; 0xfa
 800e662:	f000 f8f3 	bl	800e84c <sys_timeout>
 800e666:	e003      	b.n	800e670 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800e668:	4b06      	ldr	r3, [pc, #24]	; (800e684 <tcpip_tcp_timer+0x44>)
 800e66a:	2200      	movs	r2, #0
 800e66c:	601a      	str	r2, [r3, #0]
  }
}
 800e66e:	bf00      	nop
 800e670:	bf00      	nop
 800e672:	3708      	adds	r7, #8
 800e674:	46bd      	mov	sp, r7
 800e676:	bd80      	pop	{r7, pc}
 800e678:	2000d3e0 	.word	0x2000d3e0
 800e67c:	2000d3f0 	.word	0x2000d3f0
 800e680:	0800e641 	.word	0x0800e641
 800e684:	200005b0 	.word	0x200005b0

0800e688 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800e688:	b580      	push	{r7, lr}
 800e68a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800e68c:	4b0a      	ldr	r3, [pc, #40]	; (800e6b8 <tcp_timer_needed+0x30>)
 800e68e:	681b      	ldr	r3, [r3, #0]
 800e690:	2b00      	cmp	r3, #0
 800e692:	d10f      	bne.n	800e6b4 <tcp_timer_needed+0x2c>
 800e694:	4b09      	ldr	r3, [pc, #36]	; (800e6bc <tcp_timer_needed+0x34>)
 800e696:	681b      	ldr	r3, [r3, #0]
 800e698:	2b00      	cmp	r3, #0
 800e69a:	d103      	bne.n	800e6a4 <tcp_timer_needed+0x1c>
 800e69c:	4b08      	ldr	r3, [pc, #32]	; (800e6c0 <tcp_timer_needed+0x38>)
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	d007      	beq.n	800e6b4 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800e6a4:	4b04      	ldr	r3, [pc, #16]	; (800e6b8 <tcp_timer_needed+0x30>)
 800e6a6:	2201      	movs	r2, #1
 800e6a8:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800e6aa:	2200      	movs	r2, #0
 800e6ac:	4905      	ldr	r1, [pc, #20]	; (800e6c4 <tcp_timer_needed+0x3c>)
 800e6ae:	20fa      	movs	r0, #250	; 0xfa
 800e6b0:	f000 f8cc 	bl	800e84c <sys_timeout>
  }
}
 800e6b4:	bf00      	nop
 800e6b6:	bd80      	pop	{r7, pc}
 800e6b8:	200005b0 	.word	0x200005b0
 800e6bc:	2000d3e0 	.word	0x2000d3e0
 800e6c0:	2000d3f0 	.word	0x2000d3f0
 800e6c4:	0800e641 	.word	0x0800e641

0800e6c8 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800e6c8:	b580      	push	{r7, lr}
 800e6ca:	b086      	sub	sp, #24
 800e6cc:	af00      	add	r7, sp, #0
 800e6ce:	60f8      	str	r0, [r7, #12]
 800e6d0:	60b9      	str	r1, [r7, #8]
 800e6d2:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800e6d4:	2006      	movs	r0, #6
 800e6d6:	f7f8 fe95 	bl	8007404 <memp_malloc>
 800e6da:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800e6dc:	693b      	ldr	r3, [r7, #16]
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	d109      	bne.n	800e6f6 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800e6e2:	693b      	ldr	r3, [r7, #16]
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d151      	bne.n	800e78c <sys_timeout_abs+0xc4>
 800e6e8:	4b2a      	ldr	r3, [pc, #168]	; (800e794 <sys_timeout_abs+0xcc>)
 800e6ea:	22be      	movs	r2, #190	; 0xbe
 800e6ec:	492a      	ldr	r1, [pc, #168]	; (800e798 <sys_timeout_abs+0xd0>)
 800e6ee:	482b      	ldr	r0, [pc, #172]	; (800e79c <sys_timeout_abs+0xd4>)
 800e6f0:	f002 feae 	bl	8011450 <iprintf>
    return;
 800e6f4:	e04a      	b.n	800e78c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800e6f6:	693b      	ldr	r3, [r7, #16]
 800e6f8:	2200      	movs	r2, #0
 800e6fa:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800e6fc:	693b      	ldr	r3, [r7, #16]
 800e6fe:	68ba      	ldr	r2, [r7, #8]
 800e700:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800e702:	693b      	ldr	r3, [r7, #16]
 800e704:	687a      	ldr	r2, [r7, #4]
 800e706:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800e708:	693b      	ldr	r3, [r7, #16]
 800e70a:	68fa      	ldr	r2, [r7, #12]
 800e70c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800e70e:	4b24      	ldr	r3, [pc, #144]	; (800e7a0 <sys_timeout_abs+0xd8>)
 800e710:	681b      	ldr	r3, [r3, #0]
 800e712:	2b00      	cmp	r3, #0
 800e714:	d103      	bne.n	800e71e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800e716:	4a22      	ldr	r2, [pc, #136]	; (800e7a0 <sys_timeout_abs+0xd8>)
 800e718:	693b      	ldr	r3, [r7, #16]
 800e71a:	6013      	str	r3, [r2, #0]
    return;
 800e71c:	e037      	b.n	800e78e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800e71e:	693b      	ldr	r3, [r7, #16]
 800e720:	685a      	ldr	r2, [r3, #4]
 800e722:	4b1f      	ldr	r3, [pc, #124]	; (800e7a0 <sys_timeout_abs+0xd8>)
 800e724:	681b      	ldr	r3, [r3, #0]
 800e726:	685b      	ldr	r3, [r3, #4]
 800e728:	1ad3      	subs	r3, r2, r3
 800e72a:	0fdb      	lsrs	r3, r3, #31
 800e72c:	f003 0301 	and.w	r3, r3, #1
 800e730:	b2db      	uxtb	r3, r3
 800e732:	2b00      	cmp	r3, #0
 800e734:	d007      	beq.n	800e746 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800e736:	4b1a      	ldr	r3, [pc, #104]	; (800e7a0 <sys_timeout_abs+0xd8>)
 800e738:	681a      	ldr	r2, [r3, #0]
 800e73a:	693b      	ldr	r3, [r7, #16]
 800e73c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800e73e:	4a18      	ldr	r2, [pc, #96]	; (800e7a0 <sys_timeout_abs+0xd8>)
 800e740:	693b      	ldr	r3, [r7, #16]
 800e742:	6013      	str	r3, [r2, #0]
 800e744:	e023      	b.n	800e78e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800e746:	4b16      	ldr	r3, [pc, #88]	; (800e7a0 <sys_timeout_abs+0xd8>)
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	617b      	str	r3, [r7, #20]
 800e74c:	e01a      	b.n	800e784 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800e74e:	697b      	ldr	r3, [r7, #20]
 800e750:	681b      	ldr	r3, [r3, #0]
 800e752:	2b00      	cmp	r3, #0
 800e754:	d00b      	beq.n	800e76e <sys_timeout_abs+0xa6>
 800e756:	693b      	ldr	r3, [r7, #16]
 800e758:	685a      	ldr	r2, [r3, #4]
 800e75a:	697b      	ldr	r3, [r7, #20]
 800e75c:	681b      	ldr	r3, [r3, #0]
 800e75e:	685b      	ldr	r3, [r3, #4]
 800e760:	1ad3      	subs	r3, r2, r3
 800e762:	0fdb      	lsrs	r3, r3, #31
 800e764:	f003 0301 	and.w	r3, r3, #1
 800e768:	b2db      	uxtb	r3, r3
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d007      	beq.n	800e77e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800e76e:	697b      	ldr	r3, [r7, #20]
 800e770:	681a      	ldr	r2, [r3, #0]
 800e772:	693b      	ldr	r3, [r7, #16]
 800e774:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800e776:	697b      	ldr	r3, [r7, #20]
 800e778:	693a      	ldr	r2, [r7, #16]
 800e77a:	601a      	str	r2, [r3, #0]
        break;
 800e77c:	e007      	b.n	800e78e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800e77e:	697b      	ldr	r3, [r7, #20]
 800e780:	681b      	ldr	r3, [r3, #0]
 800e782:	617b      	str	r3, [r7, #20]
 800e784:	697b      	ldr	r3, [r7, #20]
 800e786:	2b00      	cmp	r3, #0
 800e788:	d1e1      	bne.n	800e74e <sys_timeout_abs+0x86>
 800e78a:	e000      	b.n	800e78e <sys_timeout_abs+0xc6>
    return;
 800e78c:	bf00      	nop
      }
    }
  }
}
 800e78e:	3718      	adds	r7, #24
 800e790:	46bd      	mov	sp, r7
 800e792:	bd80      	pop	{r7, pc}
 800e794:	08015430 	.word	0x08015430
 800e798:	08015464 	.word	0x08015464
 800e79c:	080154a4 	.word	0x080154a4
 800e7a0:	200005a8 	.word	0x200005a8

0800e7a4 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800e7a4:	b580      	push	{r7, lr}
 800e7a6:	b086      	sub	sp, #24
 800e7a8:	af00      	add	r7, sp, #0
 800e7aa:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800e7b0:	697b      	ldr	r3, [r7, #20]
 800e7b2:	685b      	ldr	r3, [r3, #4]
 800e7b4:	4798      	blx	r3

  now = sys_now();
 800e7b6:	f7f6 f909 	bl	80049cc <sys_now>
 800e7ba:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800e7bc:	697b      	ldr	r3, [r7, #20]
 800e7be:	681a      	ldr	r2, [r3, #0]
 800e7c0:	4b0f      	ldr	r3, [pc, #60]	; (800e800 <lwip_cyclic_timer+0x5c>)
 800e7c2:	681b      	ldr	r3, [r3, #0]
 800e7c4:	4413      	add	r3, r2
 800e7c6:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800e7c8:	68fa      	ldr	r2, [r7, #12]
 800e7ca:	693b      	ldr	r3, [r7, #16]
 800e7cc:	1ad3      	subs	r3, r2, r3
 800e7ce:	0fdb      	lsrs	r3, r3, #31
 800e7d0:	f003 0301 	and.w	r3, r3, #1
 800e7d4:	b2db      	uxtb	r3, r3
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	d009      	beq.n	800e7ee <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800e7da:	697b      	ldr	r3, [r7, #20]
 800e7dc:	681a      	ldr	r2, [r3, #0]
 800e7de:	693b      	ldr	r3, [r7, #16]
 800e7e0:	4413      	add	r3, r2
 800e7e2:	687a      	ldr	r2, [r7, #4]
 800e7e4:	4907      	ldr	r1, [pc, #28]	; (800e804 <lwip_cyclic_timer+0x60>)
 800e7e6:	4618      	mov	r0, r3
 800e7e8:	f7ff ff6e 	bl	800e6c8 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800e7ec:	e004      	b.n	800e7f8 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800e7ee:	687a      	ldr	r2, [r7, #4]
 800e7f0:	4904      	ldr	r1, [pc, #16]	; (800e804 <lwip_cyclic_timer+0x60>)
 800e7f2:	68f8      	ldr	r0, [r7, #12]
 800e7f4:	f7ff ff68 	bl	800e6c8 <sys_timeout_abs>
}
 800e7f8:	bf00      	nop
 800e7fa:	3718      	adds	r7, #24
 800e7fc:	46bd      	mov	sp, r7
 800e7fe:	bd80      	pop	{r7, pc}
 800e800:	200005ac 	.word	0x200005ac
 800e804:	0800e7a5 	.word	0x0800e7a5

0800e808 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800e808:	b580      	push	{r7, lr}
 800e80a:	b082      	sub	sp, #8
 800e80c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800e80e:	2301      	movs	r3, #1
 800e810:	607b      	str	r3, [r7, #4]
 800e812:	e00e      	b.n	800e832 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800e814:	4a0b      	ldr	r2, [pc, #44]	; (800e844 <sys_timeouts_init+0x3c>)
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	00db      	lsls	r3, r3, #3
 800e820:	4a08      	ldr	r2, [pc, #32]	; (800e844 <sys_timeouts_init+0x3c>)
 800e822:	4413      	add	r3, r2
 800e824:	461a      	mov	r2, r3
 800e826:	4908      	ldr	r1, [pc, #32]	; (800e848 <sys_timeouts_init+0x40>)
 800e828:	f000 f810 	bl	800e84c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	3301      	adds	r3, #1
 800e830:	607b      	str	r3, [r7, #4]
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	2b02      	cmp	r3, #2
 800e836:	d9ed      	bls.n	800e814 <sys_timeouts_init+0xc>
  }
}
 800e838:	bf00      	nop
 800e83a:	bf00      	nop
 800e83c:	3708      	adds	r7, #8
 800e83e:	46bd      	mov	sp, r7
 800e840:	bd80      	pop	{r7, pc}
 800e842:	bf00      	nop
 800e844:	08017d98 	.word	0x08017d98
 800e848:	0800e7a5 	.word	0x0800e7a5

0800e84c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800e84c:	b580      	push	{r7, lr}
 800e84e:	b086      	sub	sp, #24
 800e850:	af00      	add	r7, sp, #0
 800e852:	60f8      	str	r0, [r7, #12]
 800e854:	60b9      	str	r1, [r7, #8]
 800e856:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800e858:	68fb      	ldr	r3, [r7, #12]
 800e85a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e85e:	d306      	bcc.n	800e86e <sys_timeout+0x22>
 800e860:	4b0a      	ldr	r3, [pc, #40]	; (800e88c <sys_timeout+0x40>)
 800e862:	f240 1229 	movw	r2, #297	; 0x129
 800e866:	490a      	ldr	r1, [pc, #40]	; (800e890 <sys_timeout+0x44>)
 800e868:	480a      	ldr	r0, [pc, #40]	; (800e894 <sys_timeout+0x48>)
 800e86a:	f002 fdf1 	bl	8011450 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800e86e:	f7f6 f8ad 	bl	80049cc <sys_now>
 800e872:	4602      	mov	r2, r0
 800e874:	68fb      	ldr	r3, [r7, #12]
 800e876:	4413      	add	r3, r2
 800e878:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800e87a:	687a      	ldr	r2, [r7, #4]
 800e87c:	68b9      	ldr	r1, [r7, #8]
 800e87e:	6978      	ldr	r0, [r7, #20]
 800e880:	f7ff ff22 	bl	800e6c8 <sys_timeout_abs>
#endif
}
 800e884:	bf00      	nop
 800e886:	3718      	adds	r7, #24
 800e888:	46bd      	mov	sp, r7
 800e88a:	bd80      	pop	{r7, pc}
 800e88c:	08015430 	.word	0x08015430
 800e890:	080154cc 	.word	0x080154cc
 800e894:	080154a4 	.word	0x080154a4

0800e898 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800e898:	b580      	push	{r7, lr}
 800e89a:	b084      	sub	sp, #16
 800e89c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800e89e:	f7f6 f895 	bl	80049cc <sys_now>
 800e8a2:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800e8a4:	4b1a      	ldr	r3, [pc, #104]	; (800e910 <sys_check_timeouts+0x78>)
 800e8a6:	781b      	ldrb	r3, [r3, #0]
 800e8a8:	b2db      	uxtb	r3, r3
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	d001      	beq.n	800e8b2 <sys_check_timeouts+0x1a>
 800e8ae:	f7f9 f8cd 	bl	8007a4c <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800e8b2:	4b18      	ldr	r3, [pc, #96]	; (800e914 <sys_check_timeouts+0x7c>)
 800e8b4:	681b      	ldr	r3, [r3, #0]
 800e8b6:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800e8b8:	68bb      	ldr	r3, [r7, #8]
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	d022      	beq.n	800e904 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800e8be:	68bb      	ldr	r3, [r7, #8]
 800e8c0:	685b      	ldr	r3, [r3, #4]
 800e8c2:	68fa      	ldr	r2, [r7, #12]
 800e8c4:	1ad3      	subs	r3, r2, r3
 800e8c6:	0fdb      	lsrs	r3, r3, #31
 800e8c8:	f003 0301 	and.w	r3, r3, #1
 800e8cc:	b2db      	uxtb	r3, r3
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	d11a      	bne.n	800e908 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800e8d2:	68bb      	ldr	r3, [r7, #8]
 800e8d4:	681b      	ldr	r3, [r3, #0]
 800e8d6:	4a0f      	ldr	r2, [pc, #60]	; (800e914 <sys_check_timeouts+0x7c>)
 800e8d8:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800e8da:	68bb      	ldr	r3, [r7, #8]
 800e8dc:	689b      	ldr	r3, [r3, #8]
 800e8de:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800e8e0:	68bb      	ldr	r3, [r7, #8]
 800e8e2:	68db      	ldr	r3, [r3, #12]
 800e8e4:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800e8e6:	68bb      	ldr	r3, [r7, #8]
 800e8e8:	685b      	ldr	r3, [r3, #4]
 800e8ea:	4a0b      	ldr	r2, [pc, #44]	; (800e918 <sys_check_timeouts+0x80>)
 800e8ec:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800e8ee:	68b9      	ldr	r1, [r7, #8]
 800e8f0:	2006      	movs	r0, #6
 800e8f2:	f7f8 fdd3 	bl	800749c <memp_free>
    if (handler != NULL) {
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d0d3      	beq.n	800e8a4 <sys_check_timeouts+0xc>
      handler(arg);
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	6838      	ldr	r0, [r7, #0]
 800e900:	4798      	blx	r3
  do {
 800e902:	e7cf      	b.n	800e8a4 <sys_check_timeouts+0xc>
      return;
 800e904:	bf00      	nop
 800e906:	e000      	b.n	800e90a <sys_check_timeouts+0x72>
      return;
 800e908:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800e90a:	3710      	adds	r7, #16
 800e90c:	46bd      	mov	sp, r7
 800e90e:	bd80      	pop	{r7, pc}
 800e910:	2000d3d8 	.word	0x2000d3d8
 800e914:	200005a8 	.word	0x200005a8
 800e918:	200005ac 	.word	0x200005ac

0800e91c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800e91c:	b580      	push	{r7, lr}
 800e91e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800e920:	f002 fe24 	bl	801156c <rand>
 800e924:	4603      	mov	r3, r0
 800e926:	b29b      	uxth	r3, r3
 800e928:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800e92c:	b29b      	uxth	r3, r3
 800e92e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800e932:	b29a      	uxth	r2, r3
 800e934:	4b01      	ldr	r3, [pc, #4]	; (800e93c <udp_init+0x20>)
 800e936:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800e938:	bf00      	nop
 800e93a:	bd80      	pop	{r7, pc}
 800e93c:	2000002c 	.word	0x2000002c

0800e940 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800e940:	b580      	push	{r7, lr}
 800e942:	b084      	sub	sp, #16
 800e944:	af00      	add	r7, sp, #0
 800e946:	60f8      	str	r0, [r7, #12]
 800e948:	60b9      	str	r1, [r7, #8]
 800e94a:	4613      	mov	r3, r2
 800e94c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	2b00      	cmp	r3, #0
 800e952:	d105      	bne.n	800e960 <udp_input_local_match+0x20>
 800e954:	4b27      	ldr	r3, [pc, #156]	; (800e9f4 <udp_input_local_match+0xb4>)
 800e956:	2287      	movs	r2, #135	; 0x87
 800e958:	4927      	ldr	r1, [pc, #156]	; (800e9f8 <udp_input_local_match+0xb8>)
 800e95a:	4828      	ldr	r0, [pc, #160]	; (800e9fc <udp_input_local_match+0xbc>)
 800e95c:	f002 fd78 	bl	8011450 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800e960:	68bb      	ldr	r3, [r7, #8]
 800e962:	2b00      	cmp	r3, #0
 800e964:	d105      	bne.n	800e972 <udp_input_local_match+0x32>
 800e966:	4b23      	ldr	r3, [pc, #140]	; (800e9f4 <udp_input_local_match+0xb4>)
 800e968:	2288      	movs	r2, #136	; 0x88
 800e96a:	4925      	ldr	r1, [pc, #148]	; (800ea00 <udp_input_local_match+0xc0>)
 800e96c:	4823      	ldr	r0, [pc, #140]	; (800e9fc <udp_input_local_match+0xbc>)
 800e96e:	f002 fd6f 	bl	8011450 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e972:	68fb      	ldr	r3, [r7, #12]
 800e974:	7a1b      	ldrb	r3, [r3, #8]
 800e976:	2b00      	cmp	r3, #0
 800e978:	d00b      	beq.n	800e992 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e97a:	68fb      	ldr	r3, [r7, #12]
 800e97c:	7a1a      	ldrb	r2, [r3, #8]
 800e97e:	4b21      	ldr	r3, [pc, #132]	; (800ea04 <udp_input_local_match+0xc4>)
 800e980:	685b      	ldr	r3, [r3, #4]
 800e982:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e986:	3301      	adds	r3, #1
 800e988:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e98a:	429a      	cmp	r2, r3
 800e98c:	d001      	beq.n	800e992 <udp_input_local_match+0x52>
    return 0;
 800e98e:	2300      	movs	r3, #0
 800e990:	e02b      	b.n	800e9ea <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800e992:	79fb      	ldrb	r3, [r7, #7]
 800e994:	2b00      	cmp	r3, #0
 800e996:	d018      	beq.n	800e9ca <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800e998:	68fb      	ldr	r3, [r7, #12]
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d013      	beq.n	800e9c6 <udp_input_local_match+0x86>
 800e99e:	68fb      	ldr	r3, [r7, #12]
 800e9a0:	681b      	ldr	r3, [r3, #0]
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d00f      	beq.n	800e9c6 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800e9a6:	4b17      	ldr	r3, [pc, #92]	; (800ea04 <udp_input_local_match+0xc4>)
 800e9a8:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800e9aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e9ae:	d00a      	beq.n	800e9c6 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800e9b0:	68fb      	ldr	r3, [r7, #12]
 800e9b2:	681a      	ldr	r2, [r3, #0]
 800e9b4:	4b13      	ldr	r3, [pc, #76]	; (800ea04 <udp_input_local_match+0xc4>)
 800e9b6:	695b      	ldr	r3, [r3, #20]
 800e9b8:	405a      	eors	r2, r3
 800e9ba:	68bb      	ldr	r3, [r7, #8]
 800e9bc:	3308      	adds	r3, #8
 800e9be:	681b      	ldr	r3, [r3, #0]
 800e9c0:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d110      	bne.n	800e9e8 <udp_input_local_match+0xa8>
          return 1;
 800e9c6:	2301      	movs	r3, #1
 800e9c8:	e00f      	b.n	800e9ea <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e9ca:	68fb      	ldr	r3, [r7, #12]
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d009      	beq.n	800e9e4 <udp_input_local_match+0xa4>
 800e9d0:	68fb      	ldr	r3, [r7, #12]
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d005      	beq.n	800e9e4 <udp_input_local_match+0xa4>
 800e9d8:	68fb      	ldr	r3, [r7, #12]
 800e9da:	681a      	ldr	r2, [r3, #0]
 800e9dc:	4b09      	ldr	r3, [pc, #36]	; (800ea04 <udp_input_local_match+0xc4>)
 800e9de:	695b      	ldr	r3, [r3, #20]
 800e9e0:	429a      	cmp	r2, r3
 800e9e2:	d101      	bne.n	800e9e8 <udp_input_local_match+0xa8>
        return 1;
 800e9e4:	2301      	movs	r3, #1
 800e9e6:	e000      	b.n	800e9ea <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800e9e8:	2300      	movs	r3, #0
}
 800e9ea:	4618      	mov	r0, r3
 800e9ec:	3710      	adds	r7, #16
 800e9ee:	46bd      	mov	sp, r7
 800e9f0:	bd80      	pop	{r7, pc}
 800e9f2:	bf00      	nop
 800e9f4:	08015518 	.word	0x08015518
 800e9f8:	08015548 	.word	0x08015548
 800e9fc:	0801556c 	.word	0x0801556c
 800ea00:	08015594 	.word	0x08015594
 800ea04:	20003ddc 	.word	0x20003ddc

0800ea08 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800ea08:	b590      	push	{r4, r7, lr}
 800ea0a:	b08d      	sub	sp, #52	; 0x34
 800ea0c:	af02      	add	r7, sp, #8
 800ea0e:	6078      	str	r0, [r7, #4]
 800ea10:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800ea12:	2300      	movs	r3, #0
 800ea14:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	d105      	bne.n	800ea28 <udp_input+0x20>
 800ea1c:	4b7c      	ldr	r3, [pc, #496]	; (800ec10 <udp_input+0x208>)
 800ea1e:	22cf      	movs	r2, #207	; 0xcf
 800ea20:	497c      	ldr	r1, [pc, #496]	; (800ec14 <udp_input+0x20c>)
 800ea22:	487d      	ldr	r0, [pc, #500]	; (800ec18 <udp_input+0x210>)
 800ea24:	f002 fd14 	bl	8011450 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800ea28:	683b      	ldr	r3, [r7, #0]
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	d105      	bne.n	800ea3a <udp_input+0x32>
 800ea2e:	4b78      	ldr	r3, [pc, #480]	; (800ec10 <udp_input+0x208>)
 800ea30:	22d0      	movs	r2, #208	; 0xd0
 800ea32:	497a      	ldr	r1, [pc, #488]	; (800ec1c <udp_input+0x214>)
 800ea34:	4878      	ldr	r0, [pc, #480]	; (800ec18 <udp_input+0x210>)
 800ea36:	f002 fd0b 	bl	8011450 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	895b      	ldrh	r3, [r3, #10]
 800ea3e:	2b07      	cmp	r3, #7
 800ea40:	d803      	bhi.n	800ea4a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800ea42:	6878      	ldr	r0, [r7, #4]
 800ea44:	f7f9 fb3c 	bl	80080c0 <pbuf_free>
    goto end;
 800ea48:	e0de      	b.n	800ec08 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	685b      	ldr	r3, [r3, #4]
 800ea4e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800ea50:	4b73      	ldr	r3, [pc, #460]	; (800ec20 <udp_input+0x218>)
 800ea52:	695b      	ldr	r3, [r3, #20]
 800ea54:	4a72      	ldr	r2, [pc, #456]	; (800ec20 <udp_input+0x218>)
 800ea56:	6812      	ldr	r2, [r2, #0]
 800ea58:	4611      	mov	r1, r2
 800ea5a:	4618      	mov	r0, r3
 800ea5c:	f001 fc88 	bl	8010370 <ip4_addr_isbroadcast_u32>
 800ea60:	4603      	mov	r3, r0
 800ea62:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800ea64:	697b      	ldr	r3, [r7, #20]
 800ea66:	881b      	ldrh	r3, [r3, #0]
 800ea68:	b29b      	uxth	r3, r3
 800ea6a:	4618      	mov	r0, r3
 800ea6c:	f7f7 ff96 	bl	800699c <lwip_htons>
 800ea70:	4603      	mov	r3, r0
 800ea72:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800ea74:	697b      	ldr	r3, [r7, #20]
 800ea76:	885b      	ldrh	r3, [r3, #2]
 800ea78:	b29b      	uxth	r3, r3
 800ea7a:	4618      	mov	r0, r3
 800ea7c:	f7f7 ff8e 	bl	800699c <lwip_htons>
 800ea80:	4603      	mov	r3, r0
 800ea82:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800ea84:	2300      	movs	r3, #0
 800ea86:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800ea88:	2300      	movs	r3, #0
 800ea8a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800ea8c:	2300      	movs	r3, #0
 800ea8e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ea90:	4b64      	ldr	r3, [pc, #400]	; (800ec24 <udp_input+0x21c>)
 800ea92:	681b      	ldr	r3, [r3, #0]
 800ea94:	627b      	str	r3, [r7, #36]	; 0x24
 800ea96:	e054      	b.n	800eb42 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800ea98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea9a:	8a5b      	ldrh	r3, [r3, #18]
 800ea9c:	89fa      	ldrh	r2, [r7, #14]
 800ea9e:	429a      	cmp	r2, r3
 800eaa0:	d14a      	bne.n	800eb38 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800eaa2:	7cfb      	ldrb	r3, [r7, #19]
 800eaa4:	461a      	mov	r2, r3
 800eaa6:	6839      	ldr	r1, [r7, #0]
 800eaa8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800eaaa:	f7ff ff49 	bl	800e940 <udp_input_local_match>
 800eaae:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d041      	beq.n	800eb38 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800eab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eab6:	7c1b      	ldrb	r3, [r3, #16]
 800eab8:	f003 0304 	and.w	r3, r3, #4
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	d11d      	bne.n	800eafc <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800eac0:	69fb      	ldr	r3, [r7, #28]
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	d102      	bne.n	800eacc <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800eac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eac8:	61fb      	str	r3, [r7, #28]
 800eaca:	e017      	b.n	800eafc <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800eacc:	7cfb      	ldrb	r3, [r7, #19]
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d014      	beq.n	800eafc <udp_input+0xf4>
 800ead2:	4b53      	ldr	r3, [pc, #332]	; (800ec20 <udp_input+0x218>)
 800ead4:	695b      	ldr	r3, [r3, #20]
 800ead6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800eada:	d10f      	bne.n	800eafc <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800eadc:	69fb      	ldr	r3, [r7, #28]
 800eade:	681a      	ldr	r2, [r3, #0]
 800eae0:	683b      	ldr	r3, [r7, #0]
 800eae2:	3304      	adds	r3, #4
 800eae4:	681b      	ldr	r3, [r3, #0]
 800eae6:	429a      	cmp	r2, r3
 800eae8:	d008      	beq.n	800eafc <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800eaea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaec:	681a      	ldr	r2, [r3, #0]
 800eaee:	683b      	ldr	r3, [r7, #0]
 800eaf0:	3304      	adds	r3, #4
 800eaf2:	681b      	ldr	r3, [r3, #0]
 800eaf4:	429a      	cmp	r2, r3
 800eaf6:	d101      	bne.n	800eafc <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800eaf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eafa:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800eafc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eafe:	8a9b      	ldrh	r3, [r3, #20]
 800eb00:	8a3a      	ldrh	r2, [r7, #16]
 800eb02:	429a      	cmp	r2, r3
 800eb04:	d118      	bne.n	800eb38 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800eb06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb08:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d005      	beq.n	800eb1a <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800eb0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb10:	685a      	ldr	r2, [r3, #4]
 800eb12:	4b43      	ldr	r3, [pc, #268]	; (800ec20 <udp_input+0x218>)
 800eb14:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800eb16:	429a      	cmp	r2, r3
 800eb18:	d10e      	bne.n	800eb38 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800eb1a:	6a3b      	ldr	r3, [r7, #32]
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	d014      	beq.n	800eb4a <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800eb20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb22:	68da      	ldr	r2, [r3, #12]
 800eb24:	6a3b      	ldr	r3, [r7, #32]
 800eb26:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800eb28:	4b3e      	ldr	r3, [pc, #248]	; (800ec24 <udp_input+0x21c>)
 800eb2a:	681a      	ldr	r2, [r3, #0]
 800eb2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb2e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800eb30:	4a3c      	ldr	r2, [pc, #240]	; (800ec24 <udp_input+0x21c>)
 800eb32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb34:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800eb36:	e008      	b.n	800eb4a <udp_input+0x142>
      }
    }

    prev = pcb;
 800eb38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb3a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800eb3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb3e:	68db      	ldr	r3, [r3, #12]
 800eb40:	627b      	str	r3, [r7, #36]	; 0x24
 800eb42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	d1a7      	bne.n	800ea98 <udp_input+0x90>
 800eb48:	e000      	b.n	800eb4c <udp_input+0x144>
        break;
 800eb4a:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800eb4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d101      	bne.n	800eb56 <udp_input+0x14e>
    pcb = uncon_pcb;
 800eb52:	69fb      	ldr	r3, [r7, #28]
 800eb54:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800eb56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d002      	beq.n	800eb62 <udp_input+0x15a>
    for_us = 1;
 800eb5c:	2301      	movs	r3, #1
 800eb5e:	76fb      	strb	r3, [r7, #27]
 800eb60:	e00a      	b.n	800eb78 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800eb62:	683b      	ldr	r3, [r7, #0]
 800eb64:	3304      	adds	r3, #4
 800eb66:	681a      	ldr	r2, [r3, #0]
 800eb68:	4b2d      	ldr	r3, [pc, #180]	; (800ec20 <udp_input+0x218>)
 800eb6a:	695b      	ldr	r3, [r3, #20]
 800eb6c:	429a      	cmp	r2, r3
 800eb6e:	bf0c      	ite	eq
 800eb70:	2301      	moveq	r3, #1
 800eb72:	2300      	movne	r3, #0
 800eb74:	b2db      	uxtb	r3, r3
 800eb76:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800eb78:	7efb      	ldrb	r3, [r7, #27]
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	d041      	beq.n	800ec02 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800eb7e:	2108      	movs	r1, #8
 800eb80:	6878      	ldr	r0, [r7, #4]
 800eb82:	f7f9 fa17 	bl	8007fb4 <pbuf_remove_header>
 800eb86:	4603      	mov	r3, r0
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d00a      	beq.n	800eba2 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800eb8c:	4b20      	ldr	r3, [pc, #128]	; (800ec10 <udp_input+0x208>)
 800eb8e:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800eb92:	4925      	ldr	r1, [pc, #148]	; (800ec28 <udp_input+0x220>)
 800eb94:	4820      	ldr	r0, [pc, #128]	; (800ec18 <udp_input+0x210>)
 800eb96:	f002 fc5b 	bl	8011450 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800eb9a:	6878      	ldr	r0, [r7, #4]
 800eb9c:	f7f9 fa90 	bl	80080c0 <pbuf_free>
      goto end;
 800eba0:	e032      	b.n	800ec08 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800eba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d012      	beq.n	800ebce <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800eba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebaa:	699b      	ldr	r3, [r3, #24]
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d00a      	beq.n	800ebc6 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800ebb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebb2:	699c      	ldr	r4, [r3, #24]
 800ebb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebb6:	69d8      	ldr	r0, [r3, #28]
 800ebb8:	8a3b      	ldrh	r3, [r7, #16]
 800ebba:	9300      	str	r3, [sp, #0]
 800ebbc:	4b1b      	ldr	r3, [pc, #108]	; (800ec2c <udp_input+0x224>)
 800ebbe:	687a      	ldr	r2, [r7, #4]
 800ebc0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ebc2:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800ebc4:	e021      	b.n	800ec0a <udp_input+0x202>
        pbuf_free(p);
 800ebc6:	6878      	ldr	r0, [r7, #4]
 800ebc8:	f7f9 fa7a 	bl	80080c0 <pbuf_free>
        goto end;
 800ebcc:	e01c      	b.n	800ec08 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800ebce:	7cfb      	ldrb	r3, [r7, #19]
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	d112      	bne.n	800ebfa <udp_input+0x1f2>
 800ebd4:	4b12      	ldr	r3, [pc, #72]	; (800ec20 <udp_input+0x218>)
 800ebd6:	695b      	ldr	r3, [r3, #20]
 800ebd8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ebdc:	2be0      	cmp	r3, #224	; 0xe0
 800ebde:	d00c      	beq.n	800ebfa <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800ebe0:	4b0f      	ldr	r3, [pc, #60]	; (800ec20 <udp_input+0x218>)
 800ebe2:	899b      	ldrh	r3, [r3, #12]
 800ebe4:	3308      	adds	r3, #8
 800ebe6:	b29b      	uxth	r3, r3
 800ebe8:	b21b      	sxth	r3, r3
 800ebea:	4619      	mov	r1, r3
 800ebec:	6878      	ldr	r0, [r7, #4]
 800ebee:	f7f9 fa54 	bl	800809a <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800ebf2:	2103      	movs	r1, #3
 800ebf4:	6878      	ldr	r0, [r7, #4]
 800ebf6:	f001 f89b 	bl	800fd30 <icmp_dest_unreach>
      pbuf_free(p);
 800ebfa:	6878      	ldr	r0, [r7, #4]
 800ebfc:	f7f9 fa60 	bl	80080c0 <pbuf_free>
  return;
 800ec00:	e003      	b.n	800ec0a <udp_input+0x202>
    pbuf_free(p);
 800ec02:	6878      	ldr	r0, [r7, #4]
 800ec04:	f7f9 fa5c 	bl	80080c0 <pbuf_free>
  return;
 800ec08:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800ec0a:	372c      	adds	r7, #44	; 0x2c
 800ec0c:	46bd      	mov	sp, r7
 800ec0e:	bd90      	pop	{r4, r7, pc}
 800ec10:	08015518 	.word	0x08015518
 800ec14:	080155bc 	.word	0x080155bc
 800ec18:	0801556c 	.word	0x0801556c
 800ec1c:	080155d4 	.word	0x080155d4
 800ec20:	20003ddc 	.word	0x20003ddc
 800ec24:	2000d3f8 	.word	0x2000d3f8
 800ec28:	080155f0 	.word	0x080155f0
 800ec2c:	20003dec 	.word	0x20003dec

0800ec30 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800ec30:	b480      	push	{r7}
 800ec32:	b085      	sub	sp, #20
 800ec34:	af00      	add	r7, sp, #0
 800ec36:	6078      	str	r0, [r7, #4]
 800ec38:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	d01e      	beq.n	800ec7e <udp_netif_ip_addr_changed+0x4e>
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	681b      	ldr	r3, [r3, #0]
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	d01a      	beq.n	800ec7e <udp_netif_ip_addr_changed+0x4e>
 800ec48:	683b      	ldr	r3, [r7, #0]
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	d017      	beq.n	800ec7e <udp_netif_ip_addr_changed+0x4e>
 800ec4e:	683b      	ldr	r3, [r7, #0]
 800ec50:	681b      	ldr	r3, [r3, #0]
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	d013      	beq.n	800ec7e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800ec56:	4b0d      	ldr	r3, [pc, #52]	; (800ec8c <udp_netif_ip_addr_changed+0x5c>)
 800ec58:	681b      	ldr	r3, [r3, #0]
 800ec5a:	60fb      	str	r3, [r7, #12]
 800ec5c:	e00c      	b.n	800ec78 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800ec5e:	68fb      	ldr	r3, [r7, #12]
 800ec60:	681a      	ldr	r2, [r3, #0]
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	681b      	ldr	r3, [r3, #0]
 800ec66:	429a      	cmp	r2, r3
 800ec68:	d103      	bne.n	800ec72 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800ec6a:	683b      	ldr	r3, [r7, #0]
 800ec6c:	681a      	ldr	r2, [r3, #0]
 800ec6e:	68fb      	ldr	r3, [r7, #12]
 800ec70:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800ec72:	68fb      	ldr	r3, [r7, #12]
 800ec74:	68db      	ldr	r3, [r3, #12]
 800ec76:	60fb      	str	r3, [r7, #12]
 800ec78:	68fb      	ldr	r3, [r7, #12]
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	d1ef      	bne.n	800ec5e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800ec7e:	bf00      	nop
 800ec80:	3714      	adds	r7, #20
 800ec82:	46bd      	mov	sp, r7
 800ec84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec88:	4770      	bx	lr
 800ec8a:	bf00      	nop
 800ec8c:	2000d3f8 	.word	0x2000d3f8

0800ec90 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800ec90:	b580      	push	{r7, lr}
 800ec92:	b082      	sub	sp, #8
 800ec94:	af00      	add	r7, sp, #0
 800ec96:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800ec98:	4915      	ldr	r1, [pc, #84]	; (800ecf0 <etharp_free_entry+0x60>)
 800ec9a:	687a      	ldr	r2, [r7, #4]
 800ec9c:	4613      	mov	r3, r2
 800ec9e:	005b      	lsls	r3, r3, #1
 800eca0:	4413      	add	r3, r2
 800eca2:	00db      	lsls	r3, r3, #3
 800eca4:	440b      	add	r3, r1
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	d013      	beq.n	800ecd4 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800ecac:	4910      	ldr	r1, [pc, #64]	; (800ecf0 <etharp_free_entry+0x60>)
 800ecae:	687a      	ldr	r2, [r7, #4]
 800ecb0:	4613      	mov	r3, r2
 800ecb2:	005b      	lsls	r3, r3, #1
 800ecb4:	4413      	add	r3, r2
 800ecb6:	00db      	lsls	r3, r3, #3
 800ecb8:	440b      	add	r3, r1
 800ecba:	681b      	ldr	r3, [r3, #0]
 800ecbc:	4618      	mov	r0, r3
 800ecbe:	f7f9 f9ff 	bl	80080c0 <pbuf_free>
    arp_table[i].q = NULL;
 800ecc2:	490b      	ldr	r1, [pc, #44]	; (800ecf0 <etharp_free_entry+0x60>)
 800ecc4:	687a      	ldr	r2, [r7, #4]
 800ecc6:	4613      	mov	r3, r2
 800ecc8:	005b      	lsls	r3, r3, #1
 800ecca:	4413      	add	r3, r2
 800eccc:	00db      	lsls	r3, r3, #3
 800ecce:	440b      	add	r3, r1
 800ecd0:	2200      	movs	r2, #0
 800ecd2:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800ecd4:	4906      	ldr	r1, [pc, #24]	; (800ecf0 <etharp_free_entry+0x60>)
 800ecd6:	687a      	ldr	r2, [r7, #4]
 800ecd8:	4613      	mov	r3, r2
 800ecda:	005b      	lsls	r3, r3, #1
 800ecdc:	4413      	add	r3, r2
 800ecde:	00db      	lsls	r3, r3, #3
 800ece0:	440b      	add	r3, r1
 800ece2:	3314      	adds	r3, #20
 800ece4:	2200      	movs	r2, #0
 800ece6:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800ece8:	bf00      	nop
 800ecea:	3708      	adds	r7, #8
 800ecec:	46bd      	mov	sp, r7
 800ecee:	bd80      	pop	{r7, pc}
 800ecf0:	200005b4 	.word	0x200005b4

0800ecf4 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800ecf4:	b580      	push	{r7, lr}
 800ecf6:	b082      	sub	sp, #8
 800ecf8:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ecfa:	2300      	movs	r3, #0
 800ecfc:	607b      	str	r3, [r7, #4]
 800ecfe:	e096      	b.n	800ee2e <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800ed00:	494f      	ldr	r1, [pc, #316]	; (800ee40 <etharp_tmr+0x14c>)
 800ed02:	687a      	ldr	r2, [r7, #4]
 800ed04:	4613      	mov	r3, r2
 800ed06:	005b      	lsls	r3, r3, #1
 800ed08:	4413      	add	r3, r2
 800ed0a:	00db      	lsls	r3, r3, #3
 800ed0c:	440b      	add	r3, r1
 800ed0e:	3314      	adds	r3, #20
 800ed10:	781b      	ldrb	r3, [r3, #0]
 800ed12:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800ed14:	78fb      	ldrb	r3, [r7, #3]
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	f000 8086 	beq.w	800ee28 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800ed1c:	4948      	ldr	r1, [pc, #288]	; (800ee40 <etharp_tmr+0x14c>)
 800ed1e:	687a      	ldr	r2, [r7, #4]
 800ed20:	4613      	mov	r3, r2
 800ed22:	005b      	lsls	r3, r3, #1
 800ed24:	4413      	add	r3, r2
 800ed26:	00db      	lsls	r3, r3, #3
 800ed28:	440b      	add	r3, r1
 800ed2a:	3312      	adds	r3, #18
 800ed2c:	881b      	ldrh	r3, [r3, #0]
 800ed2e:	3301      	adds	r3, #1
 800ed30:	b298      	uxth	r0, r3
 800ed32:	4943      	ldr	r1, [pc, #268]	; (800ee40 <etharp_tmr+0x14c>)
 800ed34:	687a      	ldr	r2, [r7, #4]
 800ed36:	4613      	mov	r3, r2
 800ed38:	005b      	lsls	r3, r3, #1
 800ed3a:	4413      	add	r3, r2
 800ed3c:	00db      	lsls	r3, r3, #3
 800ed3e:	440b      	add	r3, r1
 800ed40:	3312      	adds	r3, #18
 800ed42:	4602      	mov	r2, r0
 800ed44:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800ed46:	493e      	ldr	r1, [pc, #248]	; (800ee40 <etharp_tmr+0x14c>)
 800ed48:	687a      	ldr	r2, [r7, #4]
 800ed4a:	4613      	mov	r3, r2
 800ed4c:	005b      	lsls	r3, r3, #1
 800ed4e:	4413      	add	r3, r2
 800ed50:	00db      	lsls	r3, r3, #3
 800ed52:	440b      	add	r3, r1
 800ed54:	3312      	adds	r3, #18
 800ed56:	881b      	ldrh	r3, [r3, #0]
 800ed58:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800ed5c:	d215      	bcs.n	800ed8a <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800ed5e:	4938      	ldr	r1, [pc, #224]	; (800ee40 <etharp_tmr+0x14c>)
 800ed60:	687a      	ldr	r2, [r7, #4]
 800ed62:	4613      	mov	r3, r2
 800ed64:	005b      	lsls	r3, r3, #1
 800ed66:	4413      	add	r3, r2
 800ed68:	00db      	lsls	r3, r3, #3
 800ed6a:	440b      	add	r3, r1
 800ed6c:	3314      	adds	r3, #20
 800ed6e:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800ed70:	2b01      	cmp	r3, #1
 800ed72:	d10e      	bne.n	800ed92 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800ed74:	4932      	ldr	r1, [pc, #200]	; (800ee40 <etharp_tmr+0x14c>)
 800ed76:	687a      	ldr	r2, [r7, #4]
 800ed78:	4613      	mov	r3, r2
 800ed7a:	005b      	lsls	r3, r3, #1
 800ed7c:	4413      	add	r3, r2
 800ed7e:	00db      	lsls	r3, r3, #3
 800ed80:	440b      	add	r3, r1
 800ed82:	3312      	adds	r3, #18
 800ed84:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800ed86:	2b04      	cmp	r3, #4
 800ed88:	d903      	bls.n	800ed92 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800ed8a:	6878      	ldr	r0, [r7, #4]
 800ed8c:	f7ff ff80 	bl	800ec90 <etharp_free_entry>
 800ed90:	e04a      	b.n	800ee28 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800ed92:	492b      	ldr	r1, [pc, #172]	; (800ee40 <etharp_tmr+0x14c>)
 800ed94:	687a      	ldr	r2, [r7, #4]
 800ed96:	4613      	mov	r3, r2
 800ed98:	005b      	lsls	r3, r3, #1
 800ed9a:	4413      	add	r3, r2
 800ed9c:	00db      	lsls	r3, r3, #3
 800ed9e:	440b      	add	r3, r1
 800eda0:	3314      	adds	r3, #20
 800eda2:	781b      	ldrb	r3, [r3, #0]
 800eda4:	2b03      	cmp	r3, #3
 800eda6:	d10a      	bne.n	800edbe <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800eda8:	4925      	ldr	r1, [pc, #148]	; (800ee40 <etharp_tmr+0x14c>)
 800edaa:	687a      	ldr	r2, [r7, #4]
 800edac:	4613      	mov	r3, r2
 800edae:	005b      	lsls	r3, r3, #1
 800edb0:	4413      	add	r3, r2
 800edb2:	00db      	lsls	r3, r3, #3
 800edb4:	440b      	add	r3, r1
 800edb6:	3314      	adds	r3, #20
 800edb8:	2204      	movs	r2, #4
 800edba:	701a      	strb	r2, [r3, #0]
 800edbc:	e034      	b.n	800ee28 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800edbe:	4920      	ldr	r1, [pc, #128]	; (800ee40 <etharp_tmr+0x14c>)
 800edc0:	687a      	ldr	r2, [r7, #4]
 800edc2:	4613      	mov	r3, r2
 800edc4:	005b      	lsls	r3, r3, #1
 800edc6:	4413      	add	r3, r2
 800edc8:	00db      	lsls	r3, r3, #3
 800edca:	440b      	add	r3, r1
 800edcc:	3314      	adds	r3, #20
 800edce:	781b      	ldrb	r3, [r3, #0]
 800edd0:	2b04      	cmp	r3, #4
 800edd2:	d10a      	bne.n	800edea <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800edd4:	491a      	ldr	r1, [pc, #104]	; (800ee40 <etharp_tmr+0x14c>)
 800edd6:	687a      	ldr	r2, [r7, #4]
 800edd8:	4613      	mov	r3, r2
 800edda:	005b      	lsls	r3, r3, #1
 800eddc:	4413      	add	r3, r2
 800edde:	00db      	lsls	r3, r3, #3
 800ede0:	440b      	add	r3, r1
 800ede2:	3314      	adds	r3, #20
 800ede4:	2202      	movs	r2, #2
 800ede6:	701a      	strb	r2, [r3, #0]
 800ede8:	e01e      	b.n	800ee28 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800edea:	4915      	ldr	r1, [pc, #84]	; (800ee40 <etharp_tmr+0x14c>)
 800edec:	687a      	ldr	r2, [r7, #4]
 800edee:	4613      	mov	r3, r2
 800edf0:	005b      	lsls	r3, r3, #1
 800edf2:	4413      	add	r3, r2
 800edf4:	00db      	lsls	r3, r3, #3
 800edf6:	440b      	add	r3, r1
 800edf8:	3314      	adds	r3, #20
 800edfa:	781b      	ldrb	r3, [r3, #0]
 800edfc:	2b01      	cmp	r3, #1
 800edfe:	d113      	bne.n	800ee28 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800ee00:	490f      	ldr	r1, [pc, #60]	; (800ee40 <etharp_tmr+0x14c>)
 800ee02:	687a      	ldr	r2, [r7, #4]
 800ee04:	4613      	mov	r3, r2
 800ee06:	005b      	lsls	r3, r3, #1
 800ee08:	4413      	add	r3, r2
 800ee0a:	00db      	lsls	r3, r3, #3
 800ee0c:	440b      	add	r3, r1
 800ee0e:	3308      	adds	r3, #8
 800ee10:	6818      	ldr	r0, [r3, #0]
 800ee12:	687a      	ldr	r2, [r7, #4]
 800ee14:	4613      	mov	r3, r2
 800ee16:	005b      	lsls	r3, r3, #1
 800ee18:	4413      	add	r3, r2
 800ee1a:	00db      	lsls	r3, r3, #3
 800ee1c:	4a08      	ldr	r2, [pc, #32]	; (800ee40 <etharp_tmr+0x14c>)
 800ee1e:	4413      	add	r3, r2
 800ee20:	3304      	adds	r3, #4
 800ee22:	4619      	mov	r1, r3
 800ee24:	f000 fe6e 	bl	800fb04 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	3301      	adds	r3, #1
 800ee2c:	607b      	str	r3, [r7, #4]
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	2b09      	cmp	r3, #9
 800ee32:	f77f af65 	ble.w	800ed00 <etharp_tmr+0xc>
      }
    }
  }
}
 800ee36:	bf00      	nop
 800ee38:	bf00      	nop
 800ee3a:	3708      	adds	r7, #8
 800ee3c:	46bd      	mov	sp, r7
 800ee3e:	bd80      	pop	{r7, pc}
 800ee40:	200005b4 	.word	0x200005b4

0800ee44 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800ee44:	b580      	push	{r7, lr}
 800ee46:	b08a      	sub	sp, #40	; 0x28
 800ee48:	af00      	add	r7, sp, #0
 800ee4a:	60f8      	str	r0, [r7, #12]
 800ee4c:	460b      	mov	r3, r1
 800ee4e:	607a      	str	r2, [r7, #4]
 800ee50:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800ee52:	230a      	movs	r3, #10
 800ee54:	84fb      	strh	r3, [r7, #38]	; 0x26
 800ee56:	230a      	movs	r3, #10
 800ee58:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800ee5a:	230a      	movs	r3, #10
 800ee5c:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800ee5e:	2300      	movs	r3, #0
 800ee60:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800ee62:	230a      	movs	r3, #10
 800ee64:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800ee66:	2300      	movs	r3, #0
 800ee68:	83bb      	strh	r3, [r7, #28]
 800ee6a:	2300      	movs	r3, #0
 800ee6c:	837b      	strh	r3, [r7, #26]
 800ee6e:	2300      	movs	r3, #0
 800ee70:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ee72:	2300      	movs	r3, #0
 800ee74:	843b      	strh	r3, [r7, #32]
 800ee76:	e0ae      	b.n	800efd6 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800ee78:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ee7c:	49a6      	ldr	r1, [pc, #664]	; (800f118 <etharp_find_entry+0x2d4>)
 800ee7e:	4613      	mov	r3, r2
 800ee80:	005b      	lsls	r3, r3, #1
 800ee82:	4413      	add	r3, r2
 800ee84:	00db      	lsls	r3, r3, #3
 800ee86:	440b      	add	r3, r1
 800ee88:	3314      	adds	r3, #20
 800ee8a:	781b      	ldrb	r3, [r3, #0]
 800ee8c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800ee8e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800ee92:	2b0a      	cmp	r3, #10
 800ee94:	d105      	bne.n	800eea2 <etharp_find_entry+0x5e>
 800ee96:	7dfb      	ldrb	r3, [r7, #23]
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	d102      	bne.n	800eea2 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800ee9c:	8c3b      	ldrh	r3, [r7, #32]
 800ee9e:	847b      	strh	r3, [r7, #34]	; 0x22
 800eea0:	e095      	b.n	800efce <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800eea2:	7dfb      	ldrb	r3, [r7, #23]
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	f000 8092 	beq.w	800efce <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800eeaa:	7dfb      	ldrb	r3, [r7, #23]
 800eeac:	2b01      	cmp	r3, #1
 800eeae:	d009      	beq.n	800eec4 <etharp_find_entry+0x80>
 800eeb0:	7dfb      	ldrb	r3, [r7, #23]
 800eeb2:	2b01      	cmp	r3, #1
 800eeb4:	d806      	bhi.n	800eec4 <etharp_find_entry+0x80>
 800eeb6:	4b99      	ldr	r3, [pc, #612]	; (800f11c <etharp_find_entry+0x2d8>)
 800eeb8:	f240 1223 	movw	r2, #291	; 0x123
 800eebc:	4998      	ldr	r1, [pc, #608]	; (800f120 <etharp_find_entry+0x2dc>)
 800eebe:	4899      	ldr	r0, [pc, #612]	; (800f124 <etharp_find_entry+0x2e0>)
 800eec0:	f002 fac6 	bl	8011450 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800eec4:	68fb      	ldr	r3, [r7, #12]
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d020      	beq.n	800ef0c <etharp_find_entry+0xc8>
 800eeca:	68fb      	ldr	r3, [r7, #12]
 800eecc:	6819      	ldr	r1, [r3, #0]
 800eece:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800eed2:	4891      	ldr	r0, [pc, #580]	; (800f118 <etharp_find_entry+0x2d4>)
 800eed4:	4613      	mov	r3, r2
 800eed6:	005b      	lsls	r3, r3, #1
 800eed8:	4413      	add	r3, r2
 800eeda:	00db      	lsls	r3, r3, #3
 800eedc:	4403      	add	r3, r0
 800eede:	3304      	adds	r3, #4
 800eee0:	681b      	ldr	r3, [r3, #0]
 800eee2:	4299      	cmp	r1, r3
 800eee4:	d112      	bne.n	800ef0c <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	d00c      	beq.n	800ef06 <etharp_find_entry+0xc2>
 800eeec:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800eef0:	4989      	ldr	r1, [pc, #548]	; (800f118 <etharp_find_entry+0x2d4>)
 800eef2:	4613      	mov	r3, r2
 800eef4:	005b      	lsls	r3, r3, #1
 800eef6:	4413      	add	r3, r2
 800eef8:	00db      	lsls	r3, r3, #3
 800eefa:	440b      	add	r3, r1
 800eefc:	3308      	adds	r3, #8
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	687a      	ldr	r2, [r7, #4]
 800ef02:	429a      	cmp	r2, r3
 800ef04:	d102      	bne.n	800ef0c <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800ef06:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800ef0a:	e100      	b.n	800f10e <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800ef0c:	7dfb      	ldrb	r3, [r7, #23]
 800ef0e:	2b01      	cmp	r3, #1
 800ef10:	d140      	bne.n	800ef94 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800ef12:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ef16:	4980      	ldr	r1, [pc, #512]	; (800f118 <etharp_find_entry+0x2d4>)
 800ef18:	4613      	mov	r3, r2
 800ef1a:	005b      	lsls	r3, r3, #1
 800ef1c:	4413      	add	r3, r2
 800ef1e:	00db      	lsls	r3, r3, #3
 800ef20:	440b      	add	r3, r1
 800ef22:	681b      	ldr	r3, [r3, #0]
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d01a      	beq.n	800ef5e <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800ef28:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ef2c:	497a      	ldr	r1, [pc, #488]	; (800f118 <etharp_find_entry+0x2d4>)
 800ef2e:	4613      	mov	r3, r2
 800ef30:	005b      	lsls	r3, r3, #1
 800ef32:	4413      	add	r3, r2
 800ef34:	00db      	lsls	r3, r3, #3
 800ef36:	440b      	add	r3, r1
 800ef38:	3312      	adds	r3, #18
 800ef3a:	881b      	ldrh	r3, [r3, #0]
 800ef3c:	8bba      	ldrh	r2, [r7, #28]
 800ef3e:	429a      	cmp	r2, r3
 800ef40:	d845      	bhi.n	800efce <etharp_find_entry+0x18a>
            old_queue = i;
 800ef42:	8c3b      	ldrh	r3, [r7, #32]
 800ef44:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800ef46:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ef4a:	4973      	ldr	r1, [pc, #460]	; (800f118 <etharp_find_entry+0x2d4>)
 800ef4c:	4613      	mov	r3, r2
 800ef4e:	005b      	lsls	r3, r3, #1
 800ef50:	4413      	add	r3, r2
 800ef52:	00db      	lsls	r3, r3, #3
 800ef54:	440b      	add	r3, r1
 800ef56:	3312      	adds	r3, #18
 800ef58:	881b      	ldrh	r3, [r3, #0]
 800ef5a:	83bb      	strh	r3, [r7, #28]
 800ef5c:	e037      	b.n	800efce <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800ef5e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ef62:	496d      	ldr	r1, [pc, #436]	; (800f118 <etharp_find_entry+0x2d4>)
 800ef64:	4613      	mov	r3, r2
 800ef66:	005b      	lsls	r3, r3, #1
 800ef68:	4413      	add	r3, r2
 800ef6a:	00db      	lsls	r3, r3, #3
 800ef6c:	440b      	add	r3, r1
 800ef6e:	3312      	adds	r3, #18
 800ef70:	881b      	ldrh	r3, [r3, #0]
 800ef72:	8b7a      	ldrh	r2, [r7, #26]
 800ef74:	429a      	cmp	r2, r3
 800ef76:	d82a      	bhi.n	800efce <etharp_find_entry+0x18a>
            old_pending = i;
 800ef78:	8c3b      	ldrh	r3, [r7, #32]
 800ef7a:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800ef7c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ef80:	4965      	ldr	r1, [pc, #404]	; (800f118 <etharp_find_entry+0x2d4>)
 800ef82:	4613      	mov	r3, r2
 800ef84:	005b      	lsls	r3, r3, #1
 800ef86:	4413      	add	r3, r2
 800ef88:	00db      	lsls	r3, r3, #3
 800ef8a:	440b      	add	r3, r1
 800ef8c:	3312      	adds	r3, #18
 800ef8e:	881b      	ldrh	r3, [r3, #0]
 800ef90:	837b      	strh	r3, [r7, #26]
 800ef92:	e01c      	b.n	800efce <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800ef94:	7dfb      	ldrb	r3, [r7, #23]
 800ef96:	2b01      	cmp	r3, #1
 800ef98:	d919      	bls.n	800efce <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800ef9a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ef9e:	495e      	ldr	r1, [pc, #376]	; (800f118 <etharp_find_entry+0x2d4>)
 800efa0:	4613      	mov	r3, r2
 800efa2:	005b      	lsls	r3, r3, #1
 800efa4:	4413      	add	r3, r2
 800efa6:	00db      	lsls	r3, r3, #3
 800efa8:	440b      	add	r3, r1
 800efaa:	3312      	adds	r3, #18
 800efac:	881b      	ldrh	r3, [r3, #0]
 800efae:	8b3a      	ldrh	r2, [r7, #24]
 800efb0:	429a      	cmp	r2, r3
 800efb2:	d80c      	bhi.n	800efce <etharp_find_entry+0x18a>
            old_stable = i;
 800efb4:	8c3b      	ldrh	r3, [r7, #32]
 800efb6:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800efb8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800efbc:	4956      	ldr	r1, [pc, #344]	; (800f118 <etharp_find_entry+0x2d4>)
 800efbe:	4613      	mov	r3, r2
 800efc0:	005b      	lsls	r3, r3, #1
 800efc2:	4413      	add	r3, r2
 800efc4:	00db      	lsls	r3, r3, #3
 800efc6:	440b      	add	r3, r1
 800efc8:	3312      	adds	r3, #18
 800efca:	881b      	ldrh	r3, [r3, #0]
 800efcc:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800efce:	8c3b      	ldrh	r3, [r7, #32]
 800efd0:	3301      	adds	r3, #1
 800efd2:	b29b      	uxth	r3, r3
 800efd4:	843b      	strh	r3, [r7, #32]
 800efd6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800efda:	2b09      	cmp	r3, #9
 800efdc:	f77f af4c 	ble.w	800ee78 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800efe0:	7afb      	ldrb	r3, [r7, #11]
 800efe2:	f003 0302 	and.w	r3, r3, #2
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	d108      	bne.n	800effc <etharp_find_entry+0x1b8>
 800efea:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800efee:	2b0a      	cmp	r3, #10
 800eff0:	d107      	bne.n	800f002 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800eff2:	7afb      	ldrb	r3, [r7, #11]
 800eff4:	f003 0301 	and.w	r3, r3, #1
 800eff8:	2b00      	cmp	r3, #0
 800effa:	d102      	bne.n	800f002 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800effc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f000:	e085      	b.n	800f10e <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800f002:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800f006:	2b09      	cmp	r3, #9
 800f008:	dc02      	bgt.n	800f010 <etharp_find_entry+0x1cc>
    i = empty;
 800f00a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f00c:	843b      	strh	r3, [r7, #32]
 800f00e:	e039      	b.n	800f084 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800f010:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800f014:	2b09      	cmp	r3, #9
 800f016:	dc14      	bgt.n	800f042 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800f018:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f01a:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800f01c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f020:	493d      	ldr	r1, [pc, #244]	; (800f118 <etharp_find_entry+0x2d4>)
 800f022:	4613      	mov	r3, r2
 800f024:	005b      	lsls	r3, r3, #1
 800f026:	4413      	add	r3, r2
 800f028:	00db      	lsls	r3, r3, #3
 800f02a:	440b      	add	r3, r1
 800f02c:	681b      	ldr	r3, [r3, #0]
 800f02e:	2b00      	cmp	r3, #0
 800f030:	d018      	beq.n	800f064 <etharp_find_entry+0x220>
 800f032:	4b3a      	ldr	r3, [pc, #232]	; (800f11c <etharp_find_entry+0x2d8>)
 800f034:	f240 126d 	movw	r2, #365	; 0x16d
 800f038:	493b      	ldr	r1, [pc, #236]	; (800f128 <etharp_find_entry+0x2e4>)
 800f03a:	483a      	ldr	r0, [pc, #232]	; (800f124 <etharp_find_entry+0x2e0>)
 800f03c:	f002 fa08 	bl	8011450 <iprintf>
 800f040:	e010      	b.n	800f064 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800f042:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800f046:	2b09      	cmp	r3, #9
 800f048:	dc02      	bgt.n	800f050 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800f04a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800f04c:	843b      	strh	r3, [r7, #32]
 800f04e:	e009      	b.n	800f064 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800f050:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800f054:	2b09      	cmp	r3, #9
 800f056:	dc02      	bgt.n	800f05e <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800f058:	8bfb      	ldrh	r3, [r7, #30]
 800f05a:	843b      	strh	r3, [r7, #32]
 800f05c:	e002      	b.n	800f064 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800f05e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f062:	e054      	b.n	800f10e <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800f064:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800f068:	2b09      	cmp	r3, #9
 800f06a:	dd06      	ble.n	800f07a <etharp_find_entry+0x236>
 800f06c:	4b2b      	ldr	r3, [pc, #172]	; (800f11c <etharp_find_entry+0x2d8>)
 800f06e:	f240 127f 	movw	r2, #383	; 0x17f
 800f072:	492e      	ldr	r1, [pc, #184]	; (800f12c <etharp_find_entry+0x2e8>)
 800f074:	482b      	ldr	r0, [pc, #172]	; (800f124 <etharp_find_entry+0x2e0>)
 800f076:	f002 f9eb 	bl	8011450 <iprintf>
    etharp_free_entry(i);
 800f07a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800f07e:	4618      	mov	r0, r3
 800f080:	f7ff fe06 	bl	800ec90 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800f084:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800f088:	2b09      	cmp	r3, #9
 800f08a:	dd06      	ble.n	800f09a <etharp_find_entry+0x256>
 800f08c:	4b23      	ldr	r3, [pc, #140]	; (800f11c <etharp_find_entry+0x2d8>)
 800f08e:	f240 1283 	movw	r2, #387	; 0x183
 800f092:	4926      	ldr	r1, [pc, #152]	; (800f12c <etharp_find_entry+0x2e8>)
 800f094:	4823      	ldr	r0, [pc, #140]	; (800f124 <etharp_find_entry+0x2e0>)
 800f096:	f002 f9db 	bl	8011450 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800f09a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f09e:	491e      	ldr	r1, [pc, #120]	; (800f118 <etharp_find_entry+0x2d4>)
 800f0a0:	4613      	mov	r3, r2
 800f0a2:	005b      	lsls	r3, r3, #1
 800f0a4:	4413      	add	r3, r2
 800f0a6:	00db      	lsls	r3, r3, #3
 800f0a8:	440b      	add	r3, r1
 800f0aa:	3314      	adds	r3, #20
 800f0ac:	781b      	ldrb	r3, [r3, #0]
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	d006      	beq.n	800f0c0 <etharp_find_entry+0x27c>
 800f0b2:	4b1a      	ldr	r3, [pc, #104]	; (800f11c <etharp_find_entry+0x2d8>)
 800f0b4:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800f0b8:	491d      	ldr	r1, [pc, #116]	; (800f130 <etharp_find_entry+0x2ec>)
 800f0ba:	481a      	ldr	r0, [pc, #104]	; (800f124 <etharp_find_entry+0x2e0>)
 800f0bc:	f002 f9c8 	bl	8011450 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800f0c0:	68fb      	ldr	r3, [r7, #12]
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	d00b      	beq.n	800f0de <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800f0c6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f0ca:	68fb      	ldr	r3, [r7, #12]
 800f0cc:	6819      	ldr	r1, [r3, #0]
 800f0ce:	4812      	ldr	r0, [pc, #72]	; (800f118 <etharp_find_entry+0x2d4>)
 800f0d0:	4613      	mov	r3, r2
 800f0d2:	005b      	lsls	r3, r3, #1
 800f0d4:	4413      	add	r3, r2
 800f0d6:	00db      	lsls	r3, r3, #3
 800f0d8:	4403      	add	r3, r0
 800f0da:	3304      	adds	r3, #4
 800f0dc:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800f0de:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f0e2:	490d      	ldr	r1, [pc, #52]	; (800f118 <etharp_find_entry+0x2d4>)
 800f0e4:	4613      	mov	r3, r2
 800f0e6:	005b      	lsls	r3, r3, #1
 800f0e8:	4413      	add	r3, r2
 800f0ea:	00db      	lsls	r3, r3, #3
 800f0ec:	440b      	add	r3, r1
 800f0ee:	3312      	adds	r3, #18
 800f0f0:	2200      	movs	r2, #0
 800f0f2:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800f0f4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f0f8:	4907      	ldr	r1, [pc, #28]	; (800f118 <etharp_find_entry+0x2d4>)
 800f0fa:	4613      	mov	r3, r2
 800f0fc:	005b      	lsls	r3, r3, #1
 800f0fe:	4413      	add	r3, r2
 800f100:	00db      	lsls	r3, r3, #3
 800f102:	440b      	add	r3, r1
 800f104:	3308      	adds	r3, #8
 800f106:	687a      	ldr	r2, [r7, #4]
 800f108:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800f10a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800f10e:	4618      	mov	r0, r3
 800f110:	3728      	adds	r7, #40	; 0x28
 800f112:	46bd      	mov	sp, r7
 800f114:	bd80      	pop	{r7, pc}
 800f116:	bf00      	nop
 800f118:	200005b4 	.word	0x200005b4
 800f11c:	0801587c 	.word	0x0801587c
 800f120:	080158b4 	.word	0x080158b4
 800f124:	080158f4 	.word	0x080158f4
 800f128:	0801591c 	.word	0x0801591c
 800f12c:	08015934 	.word	0x08015934
 800f130:	08015948 	.word	0x08015948

0800f134 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800f134:	b580      	push	{r7, lr}
 800f136:	b088      	sub	sp, #32
 800f138:	af02      	add	r7, sp, #8
 800f13a:	60f8      	str	r0, [r7, #12]
 800f13c:	60b9      	str	r1, [r7, #8]
 800f13e:	607a      	str	r2, [r7, #4]
 800f140:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800f142:	68fb      	ldr	r3, [r7, #12]
 800f144:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800f148:	2b06      	cmp	r3, #6
 800f14a:	d006      	beq.n	800f15a <etharp_update_arp_entry+0x26>
 800f14c:	4b48      	ldr	r3, [pc, #288]	; (800f270 <etharp_update_arp_entry+0x13c>)
 800f14e:	f240 12a9 	movw	r2, #425	; 0x1a9
 800f152:	4948      	ldr	r1, [pc, #288]	; (800f274 <etharp_update_arp_entry+0x140>)
 800f154:	4848      	ldr	r0, [pc, #288]	; (800f278 <etharp_update_arp_entry+0x144>)
 800f156:	f002 f97b 	bl	8011450 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800f15a:	68bb      	ldr	r3, [r7, #8]
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d012      	beq.n	800f186 <etharp_update_arp_entry+0x52>
 800f160:	68bb      	ldr	r3, [r7, #8]
 800f162:	681b      	ldr	r3, [r3, #0]
 800f164:	2b00      	cmp	r3, #0
 800f166:	d00e      	beq.n	800f186 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800f168:	68bb      	ldr	r3, [r7, #8]
 800f16a:	681b      	ldr	r3, [r3, #0]
 800f16c:	68f9      	ldr	r1, [r7, #12]
 800f16e:	4618      	mov	r0, r3
 800f170:	f001 f8fe 	bl	8010370 <ip4_addr_isbroadcast_u32>
 800f174:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800f176:	2b00      	cmp	r3, #0
 800f178:	d105      	bne.n	800f186 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800f17a:	68bb      	ldr	r3, [r7, #8]
 800f17c:	681b      	ldr	r3, [r3, #0]
 800f17e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800f182:	2be0      	cmp	r3, #224	; 0xe0
 800f184:	d102      	bne.n	800f18c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800f186:	f06f 030f 	mvn.w	r3, #15
 800f18a:	e06c      	b.n	800f266 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800f18c:	78fb      	ldrb	r3, [r7, #3]
 800f18e:	68fa      	ldr	r2, [r7, #12]
 800f190:	4619      	mov	r1, r3
 800f192:	68b8      	ldr	r0, [r7, #8]
 800f194:	f7ff fe56 	bl	800ee44 <etharp_find_entry>
 800f198:	4603      	mov	r3, r0
 800f19a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800f19c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	da02      	bge.n	800f1aa <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800f1a4:	8afb      	ldrh	r3, [r7, #22]
 800f1a6:	b25b      	sxtb	r3, r3
 800f1a8:	e05d      	b.n	800f266 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800f1aa:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f1ae:	4933      	ldr	r1, [pc, #204]	; (800f27c <etharp_update_arp_entry+0x148>)
 800f1b0:	4613      	mov	r3, r2
 800f1b2:	005b      	lsls	r3, r3, #1
 800f1b4:	4413      	add	r3, r2
 800f1b6:	00db      	lsls	r3, r3, #3
 800f1b8:	440b      	add	r3, r1
 800f1ba:	3314      	adds	r3, #20
 800f1bc:	2202      	movs	r2, #2
 800f1be:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800f1c0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f1c4:	492d      	ldr	r1, [pc, #180]	; (800f27c <etharp_update_arp_entry+0x148>)
 800f1c6:	4613      	mov	r3, r2
 800f1c8:	005b      	lsls	r3, r3, #1
 800f1ca:	4413      	add	r3, r2
 800f1cc:	00db      	lsls	r3, r3, #3
 800f1ce:	440b      	add	r3, r1
 800f1d0:	3308      	adds	r3, #8
 800f1d2:	68fa      	ldr	r2, [r7, #12]
 800f1d4:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800f1d6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f1da:	4613      	mov	r3, r2
 800f1dc:	005b      	lsls	r3, r3, #1
 800f1de:	4413      	add	r3, r2
 800f1e0:	00db      	lsls	r3, r3, #3
 800f1e2:	3308      	adds	r3, #8
 800f1e4:	4a25      	ldr	r2, [pc, #148]	; (800f27c <etharp_update_arp_entry+0x148>)
 800f1e6:	4413      	add	r3, r2
 800f1e8:	3304      	adds	r3, #4
 800f1ea:	2206      	movs	r2, #6
 800f1ec:	6879      	ldr	r1, [r7, #4]
 800f1ee:	4618      	mov	r0, r3
 800f1f0:	f002 f854 	bl	801129c <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800f1f4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f1f8:	4920      	ldr	r1, [pc, #128]	; (800f27c <etharp_update_arp_entry+0x148>)
 800f1fa:	4613      	mov	r3, r2
 800f1fc:	005b      	lsls	r3, r3, #1
 800f1fe:	4413      	add	r3, r2
 800f200:	00db      	lsls	r3, r3, #3
 800f202:	440b      	add	r3, r1
 800f204:	3312      	adds	r3, #18
 800f206:	2200      	movs	r2, #0
 800f208:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800f20a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f20e:	491b      	ldr	r1, [pc, #108]	; (800f27c <etharp_update_arp_entry+0x148>)
 800f210:	4613      	mov	r3, r2
 800f212:	005b      	lsls	r3, r3, #1
 800f214:	4413      	add	r3, r2
 800f216:	00db      	lsls	r3, r3, #3
 800f218:	440b      	add	r3, r1
 800f21a:	681b      	ldr	r3, [r3, #0]
 800f21c:	2b00      	cmp	r3, #0
 800f21e:	d021      	beq.n	800f264 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800f220:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f224:	4915      	ldr	r1, [pc, #84]	; (800f27c <etharp_update_arp_entry+0x148>)
 800f226:	4613      	mov	r3, r2
 800f228:	005b      	lsls	r3, r3, #1
 800f22a:	4413      	add	r3, r2
 800f22c:	00db      	lsls	r3, r3, #3
 800f22e:	440b      	add	r3, r1
 800f230:	681b      	ldr	r3, [r3, #0]
 800f232:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800f234:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f238:	4910      	ldr	r1, [pc, #64]	; (800f27c <etharp_update_arp_entry+0x148>)
 800f23a:	4613      	mov	r3, r2
 800f23c:	005b      	lsls	r3, r3, #1
 800f23e:	4413      	add	r3, r2
 800f240:	00db      	lsls	r3, r3, #3
 800f242:	440b      	add	r3, r1
 800f244:	2200      	movs	r2, #0
 800f246:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800f248:	68fb      	ldr	r3, [r7, #12]
 800f24a:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800f24e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f252:	9300      	str	r3, [sp, #0]
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	6939      	ldr	r1, [r7, #16]
 800f258:	68f8      	ldr	r0, [r7, #12]
 800f25a:	f001 ff91 	bl	8011180 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800f25e:	6938      	ldr	r0, [r7, #16]
 800f260:	f7f8 ff2e 	bl	80080c0 <pbuf_free>
  }
  return ERR_OK;
 800f264:	2300      	movs	r3, #0
}
 800f266:	4618      	mov	r0, r3
 800f268:	3718      	adds	r7, #24
 800f26a:	46bd      	mov	sp, r7
 800f26c:	bd80      	pop	{r7, pc}
 800f26e:	bf00      	nop
 800f270:	0801587c 	.word	0x0801587c
 800f274:	08015974 	.word	0x08015974
 800f278:	080158f4 	.word	0x080158f4
 800f27c:	200005b4 	.word	0x200005b4

0800f280 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800f280:	b580      	push	{r7, lr}
 800f282:	b084      	sub	sp, #16
 800f284:	af00      	add	r7, sp, #0
 800f286:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f288:	2300      	movs	r3, #0
 800f28a:	60fb      	str	r3, [r7, #12]
 800f28c:	e01e      	b.n	800f2cc <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800f28e:	4913      	ldr	r1, [pc, #76]	; (800f2dc <etharp_cleanup_netif+0x5c>)
 800f290:	68fa      	ldr	r2, [r7, #12]
 800f292:	4613      	mov	r3, r2
 800f294:	005b      	lsls	r3, r3, #1
 800f296:	4413      	add	r3, r2
 800f298:	00db      	lsls	r3, r3, #3
 800f29a:	440b      	add	r3, r1
 800f29c:	3314      	adds	r3, #20
 800f29e:	781b      	ldrb	r3, [r3, #0]
 800f2a0:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800f2a2:	7afb      	ldrb	r3, [r7, #11]
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	d00e      	beq.n	800f2c6 <etharp_cleanup_netif+0x46>
 800f2a8:	490c      	ldr	r1, [pc, #48]	; (800f2dc <etharp_cleanup_netif+0x5c>)
 800f2aa:	68fa      	ldr	r2, [r7, #12]
 800f2ac:	4613      	mov	r3, r2
 800f2ae:	005b      	lsls	r3, r3, #1
 800f2b0:	4413      	add	r3, r2
 800f2b2:	00db      	lsls	r3, r3, #3
 800f2b4:	440b      	add	r3, r1
 800f2b6:	3308      	adds	r3, #8
 800f2b8:	681b      	ldr	r3, [r3, #0]
 800f2ba:	687a      	ldr	r2, [r7, #4]
 800f2bc:	429a      	cmp	r2, r3
 800f2be:	d102      	bne.n	800f2c6 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800f2c0:	68f8      	ldr	r0, [r7, #12]
 800f2c2:	f7ff fce5 	bl	800ec90 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f2c6:	68fb      	ldr	r3, [r7, #12]
 800f2c8:	3301      	adds	r3, #1
 800f2ca:	60fb      	str	r3, [r7, #12]
 800f2cc:	68fb      	ldr	r3, [r7, #12]
 800f2ce:	2b09      	cmp	r3, #9
 800f2d0:	dddd      	ble.n	800f28e <etharp_cleanup_netif+0xe>
    }
  }
}
 800f2d2:	bf00      	nop
 800f2d4:	bf00      	nop
 800f2d6:	3710      	adds	r7, #16
 800f2d8:	46bd      	mov	sp, r7
 800f2da:	bd80      	pop	{r7, pc}
 800f2dc:	200005b4 	.word	0x200005b4

0800f2e0 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800f2e0:	b5b0      	push	{r4, r5, r7, lr}
 800f2e2:	b08a      	sub	sp, #40	; 0x28
 800f2e4:	af04      	add	r7, sp, #16
 800f2e6:	6078      	str	r0, [r7, #4]
 800f2e8:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800f2ea:	683b      	ldr	r3, [r7, #0]
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	d107      	bne.n	800f300 <etharp_input+0x20>
 800f2f0:	4b3d      	ldr	r3, [pc, #244]	; (800f3e8 <etharp_input+0x108>)
 800f2f2:	f240 228a 	movw	r2, #650	; 0x28a
 800f2f6:	493d      	ldr	r1, [pc, #244]	; (800f3ec <etharp_input+0x10c>)
 800f2f8:	483d      	ldr	r0, [pc, #244]	; (800f3f0 <etharp_input+0x110>)
 800f2fa:	f002 f8a9 	bl	8011450 <iprintf>
 800f2fe:	e06f      	b.n	800f3e0 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	685b      	ldr	r3, [r3, #4]
 800f304:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800f306:	693b      	ldr	r3, [r7, #16]
 800f308:	881b      	ldrh	r3, [r3, #0]
 800f30a:	b29b      	uxth	r3, r3
 800f30c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f310:	d10c      	bne.n	800f32c <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800f312:	693b      	ldr	r3, [r7, #16]
 800f314:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800f316:	2b06      	cmp	r3, #6
 800f318:	d108      	bne.n	800f32c <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800f31a:	693b      	ldr	r3, [r7, #16]
 800f31c:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800f31e:	2b04      	cmp	r3, #4
 800f320:	d104      	bne.n	800f32c <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800f322:	693b      	ldr	r3, [r7, #16]
 800f324:	885b      	ldrh	r3, [r3, #2]
 800f326:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800f328:	2b08      	cmp	r3, #8
 800f32a:	d003      	beq.n	800f334 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800f32c:	6878      	ldr	r0, [r7, #4]
 800f32e:	f7f8 fec7 	bl	80080c0 <pbuf_free>
    return;
 800f332:	e055      	b.n	800f3e0 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800f334:	693b      	ldr	r3, [r7, #16]
 800f336:	330e      	adds	r3, #14
 800f338:	681b      	ldr	r3, [r3, #0]
 800f33a:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800f33c:	693b      	ldr	r3, [r7, #16]
 800f33e:	3318      	adds	r3, #24
 800f340:	681b      	ldr	r3, [r3, #0]
 800f342:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800f344:	683b      	ldr	r3, [r7, #0]
 800f346:	3304      	adds	r3, #4
 800f348:	681b      	ldr	r3, [r3, #0]
 800f34a:	2b00      	cmp	r3, #0
 800f34c:	d102      	bne.n	800f354 <etharp_input+0x74>
    for_us = 0;
 800f34e:	2300      	movs	r3, #0
 800f350:	75fb      	strb	r3, [r7, #23]
 800f352:	e009      	b.n	800f368 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800f354:	68ba      	ldr	r2, [r7, #8]
 800f356:	683b      	ldr	r3, [r7, #0]
 800f358:	3304      	adds	r3, #4
 800f35a:	681b      	ldr	r3, [r3, #0]
 800f35c:	429a      	cmp	r2, r3
 800f35e:	bf0c      	ite	eq
 800f360:	2301      	moveq	r3, #1
 800f362:	2300      	movne	r3, #0
 800f364:	b2db      	uxtb	r3, r3
 800f366:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800f368:	693b      	ldr	r3, [r7, #16]
 800f36a:	f103 0208 	add.w	r2, r3, #8
 800f36e:	7dfb      	ldrb	r3, [r7, #23]
 800f370:	2b00      	cmp	r3, #0
 800f372:	d001      	beq.n	800f378 <etharp_input+0x98>
 800f374:	2301      	movs	r3, #1
 800f376:	e000      	b.n	800f37a <etharp_input+0x9a>
 800f378:	2302      	movs	r3, #2
 800f37a:	f107 010c 	add.w	r1, r7, #12
 800f37e:	6838      	ldr	r0, [r7, #0]
 800f380:	f7ff fed8 	bl	800f134 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800f384:	693b      	ldr	r3, [r7, #16]
 800f386:	88db      	ldrh	r3, [r3, #6]
 800f388:	b29b      	uxth	r3, r3
 800f38a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f38e:	d003      	beq.n	800f398 <etharp_input+0xb8>
 800f390:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f394:	d01e      	beq.n	800f3d4 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800f396:	e020      	b.n	800f3da <etharp_input+0xfa>
      if (for_us) {
 800f398:	7dfb      	ldrb	r3, [r7, #23]
 800f39a:	2b00      	cmp	r3, #0
 800f39c:	d01c      	beq.n	800f3d8 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800f39e:	683b      	ldr	r3, [r7, #0]
 800f3a0:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800f3a4:	693b      	ldr	r3, [r7, #16]
 800f3a6:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800f3aa:	683b      	ldr	r3, [r7, #0]
 800f3ac:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800f3b0:	683b      	ldr	r3, [r7, #0]
 800f3b2:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800f3b4:	693a      	ldr	r2, [r7, #16]
 800f3b6:	3208      	adds	r2, #8
        etharp_raw(netif,
 800f3b8:	2102      	movs	r1, #2
 800f3ba:	9103      	str	r1, [sp, #12]
 800f3bc:	f107 010c 	add.w	r1, r7, #12
 800f3c0:	9102      	str	r1, [sp, #8]
 800f3c2:	9201      	str	r2, [sp, #4]
 800f3c4:	9300      	str	r3, [sp, #0]
 800f3c6:	462b      	mov	r3, r5
 800f3c8:	4622      	mov	r2, r4
 800f3ca:	4601      	mov	r1, r0
 800f3cc:	6838      	ldr	r0, [r7, #0]
 800f3ce:	f000 faeb 	bl	800f9a8 <etharp_raw>
      break;
 800f3d2:	e001      	b.n	800f3d8 <etharp_input+0xf8>
      break;
 800f3d4:	bf00      	nop
 800f3d6:	e000      	b.n	800f3da <etharp_input+0xfa>
      break;
 800f3d8:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800f3da:	6878      	ldr	r0, [r7, #4]
 800f3dc:	f7f8 fe70 	bl	80080c0 <pbuf_free>
}
 800f3e0:	3718      	adds	r7, #24
 800f3e2:	46bd      	mov	sp, r7
 800f3e4:	bdb0      	pop	{r4, r5, r7, pc}
 800f3e6:	bf00      	nop
 800f3e8:	0801587c 	.word	0x0801587c
 800f3ec:	080159cc 	.word	0x080159cc
 800f3f0:	080158f4 	.word	0x080158f4

0800f3f4 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800f3f4:	b580      	push	{r7, lr}
 800f3f6:	b086      	sub	sp, #24
 800f3f8:	af02      	add	r7, sp, #8
 800f3fa:	60f8      	str	r0, [r7, #12]
 800f3fc:	60b9      	str	r1, [r7, #8]
 800f3fe:	4613      	mov	r3, r2
 800f400:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800f402:	79fa      	ldrb	r2, [r7, #7]
 800f404:	4944      	ldr	r1, [pc, #272]	; (800f518 <etharp_output_to_arp_index+0x124>)
 800f406:	4613      	mov	r3, r2
 800f408:	005b      	lsls	r3, r3, #1
 800f40a:	4413      	add	r3, r2
 800f40c:	00db      	lsls	r3, r3, #3
 800f40e:	440b      	add	r3, r1
 800f410:	3314      	adds	r3, #20
 800f412:	781b      	ldrb	r3, [r3, #0]
 800f414:	2b01      	cmp	r3, #1
 800f416:	d806      	bhi.n	800f426 <etharp_output_to_arp_index+0x32>
 800f418:	4b40      	ldr	r3, [pc, #256]	; (800f51c <etharp_output_to_arp_index+0x128>)
 800f41a:	f240 22ee 	movw	r2, #750	; 0x2ee
 800f41e:	4940      	ldr	r1, [pc, #256]	; (800f520 <etharp_output_to_arp_index+0x12c>)
 800f420:	4840      	ldr	r0, [pc, #256]	; (800f524 <etharp_output_to_arp_index+0x130>)
 800f422:	f002 f815 	bl	8011450 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800f426:	79fa      	ldrb	r2, [r7, #7]
 800f428:	493b      	ldr	r1, [pc, #236]	; (800f518 <etharp_output_to_arp_index+0x124>)
 800f42a:	4613      	mov	r3, r2
 800f42c:	005b      	lsls	r3, r3, #1
 800f42e:	4413      	add	r3, r2
 800f430:	00db      	lsls	r3, r3, #3
 800f432:	440b      	add	r3, r1
 800f434:	3314      	adds	r3, #20
 800f436:	781b      	ldrb	r3, [r3, #0]
 800f438:	2b02      	cmp	r3, #2
 800f43a:	d153      	bne.n	800f4e4 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800f43c:	79fa      	ldrb	r2, [r7, #7]
 800f43e:	4936      	ldr	r1, [pc, #216]	; (800f518 <etharp_output_to_arp_index+0x124>)
 800f440:	4613      	mov	r3, r2
 800f442:	005b      	lsls	r3, r3, #1
 800f444:	4413      	add	r3, r2
 800f446:	00db      	lsls	r3, r3, #3
 800f448:	440b      	add	r3, r1
 800f44a:	3312      	adds	r3, #18
 800f44c:	881b      	ldrh	r3, [r3, #0]
 800f44e:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800f452:	d919      	bls.n	800f488 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800f454:	79fa      	ldrb	r2, [r7, #7]
 800f456:	4613      	mov	r3, r2
 800f458:	005b      	lsls	r3, r3, #1
 800f45a:	4413      	add	r3, r2
 800f45c:	00db      	lsls	r3, r3, #3
 800f45e:	4a2e      	ldr	r2, [pc, #184]	; (800f518 <etharp_output_to_arp_index+0x124>)
 800f460:	4413      	add	r3, r2
 800f462:	3304      	adds	r3, #4
 800f464:	4619      	mov	r1, r3
 800f466:	68f8      	ldr	r0, [r7, #12]
 800f468:	f000 fb4c 	bl	800fb04 <etharp_request>
 800f46c:	4603      	mov	r3, r0
 800f46e:	2b00      	cmp	r3, #0
 800f470:	d138      	bne.n	800f4e4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800f472:	79fa      	ldrb	r2, [r7, #7]
 800f474:	4928      	ldr	r1, [pc, #160]	; (800f518 <etharp_output_to_arp_index+0x124>)
 800f476:	4613      	mov	r3, r2
 800f478:	005b      	lsls	r3, r3, #1
 800f47a:	4413      	add	r3, r2
 800f47c:	00db      	lsls	r3, r3, #3
 800f47e:	440b      	add	r3, r1
 800f480:	3314      	adds	r3, #20
 800f482:	2203      	movs	r2, #3
 800f484:	701a      	strb	r2, [r3, #0]
 800f486:	e02d      	b.n	800f4e4 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800f488:	79fa      	ldrb	r2, [r7, #7]
 800f48a:	4923      	ldr	r1, [pc, #140]	; (800f518 <etharp_output_to_arp_index+0x124>)
 800f48c:	4613      	mov	r3, r2
 800f48e:	005b      	lsls	r3, r3, #1
 800f490:	4413      	add	r3, r2
 800f492:	00db      	lsls	r3, r3, #3
 800f494:	440b      	add	r3, r1
 800f496:	3312      	adds	r3, #18
 800f498:	881b      	ldrh	r3, [r3, #0]
 800f49a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800f49e:	d321      	bcc.n	800f4e4 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800f4a0:	79fa      	ldrb	r2, [r7, #7]
 800f4a2:	4613      	mov	r3, r2
 800f4a4:	005b      	lsls	r3, r3, #1
 800f4a6:	4413      	add	r3, r2
 800f4a8:	00db      	lsls	r3, r3, #3
 800f4aa:	4a1b      	ldr	r2, [pc, #108]	; (800f518 <etharp_output_to_arp_index+0x124>)
 800f4ac:	4413      	add	r3, r2
 800f4ae:	1d19      	adds	r1, r3, #4
 800f4b0:	79fa      	ldrb	r2, [r7, #7]
 800f4b2:	4613      	mov	r3, r2
 800f4b4:	005b      	lsls	r3, r3, #1
 800f4b6:	4413      	add	r3, r2
 800f4b8:	00db      	lsls	r3, r3, #3
 800f4ba:	3308      	adds	r3, #8
 800f4bc:	4a16      	ldr	r2, [pc, #88]	; (800f518 <etharp_output_to_arp_index+0x124>)
 800f4be:	4413      	add	r3, r2
 800f4c0:	3304      	adds	r3, #4
 800f4c2:	461a      	mov	r2, r3
 800f4c4:	68f8      	ldr	r0, [r7, #12]
 800f4c6:	f000 fafb 	bl	800fac0 <etharp_request_dst>
 800f4ca:	4603      	mov	r3, r0
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	d109      	bne.n	800f4e4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800f4d0:	79fa      	ldrb	r2, [r7, #7]
 800f4d2:	4911      	ldr	r1, [pc, #68]	; (800f518 <etharp_output_to_arp_index+0x124>)
 800f4d4:	4613      	mov	r3, r2
 800f4d6:	005b      	lsls	r3, r3, #1
 800f4d8:	4413      	add	r3, r2
 800f4da:	00db      	lsls	r3, r3, #3
 800f4dc:	440b      	add	r3, r1
 800f4de:	3314      	adds	r3, #20
 800f4e0:	2203      	movs	r2, #3
 800f4e2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800f4e4:	68fb      	ldr	r3, [r7, #12]
 800f4e6:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800f4ea:	79fa      	ldrb	r2, [r7, #7]
 800f4ec:	4613      	mov	r3, r2
 800f4ee:	005b      	lsls	r3, r3, #1
 800f4f0:	4413      	add	r3, r2
 800f4f2:	00db      	lsls	r3, r3, #3
 800f4f4:	3308      	adds	r3, #8
 800f4f6:	4a08      	ldr	r2, [pc, #32]	; (800f518 <etharp_output_to_arp_index+0x124>)
 800f4f8:	4413      	add	r3, r2
 800f4fa:	3304      	adds	r3, #4
 800f4fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f500:	9200      	str	r2, [sp, #0]
 800f502:	460a      	mov	r2, r1
 800f504:	68b9      	ldr	r1, [r7, #8]
 800f506:	68f8      	ldr	r0, [r7, #12]
 800f508:	f001 fe3a 	bl	8011180 <ethernet_output>
 800f50c:	4603      	mov	r3, r0
}
 800f50e:	4618      	mov	r0, r3
 800f510:	3710      	adds	r7, #16
 800f512:	46bd      	mov	sp, r7
 800f514:	bd80      	pop	{r7, pc}
 800f516:	bf00      	nop
 800f518:	200005b4 	.word	0x200005b4
 800f51c:	0801587c 	.word	0x0801587c
 800f520:	080159ec 	.word	0x080159ec
 800f524:	080158f4 	.word	0x080158f4

0800f528 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800f528:	b580      	push	{r7, lr}
 800f52a:	b08a      	sub	sp, #40	; 0x28
 800f52c:	af02      	add	r7, sp, #8
 800f52e:	60f8      	str	r0, [r7, #12]
 800f530:	60b9      	str	r1, [r7, #8]
 800f532:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800f538:	68fb      	ldr	r3, [r7, #12]
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	d106      	bne.n	800f54c <etharp_output+0x24>
 800f53e:	4b73      	ldr	r3, [pc, #460]	; (800f70c <etharp_output+0x1e4>)
 800f540:	f240 321e 	movw	r2, #798	; 0x31e
 800f544:	4972      	ldr	r1, [pc, #456]	; (800f710 <etharp_output+0x1e8>)
 800f546:	4873      	ldr	r0, [pc, #460]	; (800f714 <etharp_output+0x1ec>)
 800f548:	f001 ff82 	bl	8011450 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800f54c:	68bb      	ldr	r3, [r7, #8]
 800f54e:	2b00      	cmp	r3, #0
 800f550:	d106      	bne.n	800f560 <etharp_output+0x38>
 800f552:	4b6e      	ldr	r3, [pc, #440]	; (800f70c <etharp_output+0x1e4>)
 800f554:	f240 321f 	movw	r2, #799	; 0x31f
 800f558:	496f      	ldr	r1, [pc, #444]	; (800f718 <etharp_output+0x1f0>)
 800f55a:	486e      	ldr	r0, [pc, #440]	; (800f714 <etharp_output+0x1ec>)
 800f55c:	f001 ff78 	bl	8011450 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	2b00      	cmp	r3, #0
 800f564:	d106      	bne.n	800f574 <etharp_output+0x4c>
 800f566:	4b69      	ldr	r3, [pc, #420]	; (800f70c <etharp_output+0x1e4>)
 800f568:	f44f 7248 	mov.w	r2, #800	; 0x320
 800f56c:	496b      	ldr	r1, [pc, #428]	; (800f71c <etharp_output+0x1f4>)
 800f56e:	4869      	ldr	r0, [pc, #420]	; (800f714 <etharp_output+0x1ec>)
 800f570:	f001 ff6e 	bl	8011450 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	681b      	ldr	r3, [r3, #0]
 800f578:	68f9      	ldr	r1, [r7, #12]
 800f57a:	4618      	mov	r0, r3
 800f57c:	f000 fef8 	bl	8010370 <ip4_addr_isbroadcast_u32>
 800f580:	4603      	mov	r3, r0
 800f582:	2b00      	cmp	r3, #0
 800f584:	d002      	beq.n	800f58c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800f586:	4b66      	ldr	r3, [pc, #408]	; (800f720 <etharp_output+0x1f8>)
 800f588:	61fb      	str	r3, [r7, #28]
 800f58a:	e0af      	b.n	800f6ec <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	681b      	ldr	r3, [r3, #0]
 800f590:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f594:	2be0      	cmp	r3, #224	; 0xe0
 800f596:	d118      	bne.n	800f5ca <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800f598:	2301      	movs	r3, #1
 800f59a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800f59c:	2300      	movs	r3, #0
 800f59e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800f5a0:	235e      	movs	r3, #94	; 0x5e
 800f5a2:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	3301      	adds	r3, #1
 800f5a8:	781b      	ldrb	r3, [r3, #0]
 800f5aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f5ae:	b2db      	uxtb	r3, r3
 800f5b0:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	3302      	adds	r3, #2
 800f5b6:	781b      	ldrb	r3, [r3, #0]
 800f5b8:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	3303      	adds	r3, #3
 800f5be:	781b      	ldrb	r3, [r3, #0]
 800f5c0:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800f5c2:	f107 0310 	add.w	r3, r7, #16
 800f5c6:	61fb      	str	r3, [r7, #28]
 800f5c8:	e090      	b.n	800f6ec <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	681a      	ldr	r2, [r3, #0]
 800f5ce:	68fb      	ldr	r3, [r7, #12]
 800f5d0:	3304      	adds	r3, #4
 800f5d2:	681b      	ldr	r3, [r3, #0]
 800f5d4:	405a      	eors	r2, r3
 800f5d6:	68fb      	ldr	r3, [r7, #12]
 800f5d8:	3308      	adds	r3, #8
 800f5da:	681b      	ldr	r3, [r3, #0]
 800f5dc:	4013      	ands	r3, r2
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	d012      	beq.n	800f608 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	681b      	ldr	r3, [r3, #0]
 800f5e6:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800f5e8:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800f5ec:	4293      	cmp	r3, r2
 800f5ee:	d00b      	beq.n	800f608 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800f5f0:	68fb      	ldr	r3, [r7, #12]
 800f5f2:	330c      	adds	r3, #12
 800f5f4:	681b      	ldr	r3, [r3, #0]
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	d003      	beq.n	800f602 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800f5fa:	68fb      	ldr	r3, [r7, #12]
 800f5fc:	330c      	adds	r3, #12
 800f5fe:	61bb      	str	r3, [r7, #24]
 800f600:	e002      	b.n	800f608 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800f602:	f06f 0303 	mvn.w	r3, #3
 800f606:	e07d      	b.n	800f704 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800f608:	4b46      	ldr	r3, [pc, #280]	; (800f724 <etharp_output+0x1fc>)
 800f60a:	781b      	ldrb	r3, [r3, #0]
 800f60c:	4619      	mov	r1, r3
 800f60e:	4a46      	ldr	r2, [pc, #280]	; (800f728 <etharp_output+0x200>)
 800f610:	460b      	mov	r3, r1
 800f612:	005b      	lsls	r3, r3, #1
 800f614:	440b      	add	r3, r1
 800f616:	00db      	lsls	r3, r3, #3
 800f618:	4413      	add	r3, r2
 800f61a:	3314      	adds	r3, #20
 800f61c:	781b      	ldrb	r3, [r3, #0]
 800f61e:	2b01      	cmp	r3, #1
 800f620:	d925      	bls.n	800f66e <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800f622:	4b40      	ldr	r3, [pc, #256]	; (800f724 <etharp_output+0x1fc>)
 800f624:	781b      	ldrb	r3, [r3, #0]
 800f626:	4619      	mov	r1, r3
 800f628:	4a3f      	ldr	r2, [pc, #252]	; (800f728 <etharp_output+0x200>)
 800f62a:	460b      	mov	r3, r1
 800f62c:	005b      	lsls	r3, r3, #1
 800f62e:	440b      	add	r3, r1
 800f630:	00db      	lsls	r3, r3, #3
 800f632:	4413      	add	r3, r2
 800f634:	3308      	adds	r3, #8
 800f636:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800f638:	68fa      	ldr	r2, [r7, #12]
 800f63a:	429a      	cmp	r2, r3
 800f63c:	d117      	bne.n	800f66e <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800f63e:	69bb      	ldr	r3, [r7, #24]
 800f640:	681a      	ldr	r2, [r3, #0]
 800f642:	4b38      	ldr	r3, [pc, #224]	; (800f724 <etharp_output+0x1fc>)
 800f644:	781b      	ldrb	r3, [r3, #0]
 800f646:	4618      	mov	r0, r3
 800f648:	4937      	ldr	r1, [pc, #220]	; (800f728 <etharp_output+0x200>)
 800f64a:	4603      	mov	r3, r0
 800f64c:	005b      	lsls	r3, r3, #1
 800f64e:	4403      	add	r3, r0
 800f650:	00db      	lsls	r3, r3, #3
 800f652:	440b      	add	r3, r1
 800f654:	3304      	adds	r3, #4
 800f656:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800f658:	429a      	cmp	r2, r3
 800f65a:	d108      	bne.n	800f66e <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800f65c:	4b31      	ldr	r3, [pc, #196]	; (800f724 <etharp_output+0x1fc>)
 800f65e:	781b      	ldrb	r3, [r3, #0]
 800f660:	461a      	mov	r2, r3
 800f662:	68b9      	ldr	r1, [r7, #8]
 800f664:	68f8      	ldr	r0, [r7, #12]
 800f666:	f7ff fec5 	bl	800f3f4 <etharp_output_to_arp_index>
 800f66a:	4603      	mov	r3, r0
 800f66c:	e04a      	b.n	800f704 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800f66e:	2300      	movs	r3, #0
 800f670:	75fb      	strb	r3, [r7, #23]
 800f672:	e031      	b.n	800f6d8 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800f674:	7dfa      	ldrb	r2, [r7, #23]
 800f676:	492c      	ldr	r1, [pc, #176]	; (800f728 <etharp_output+0x200>)
 800f678:	4613      	mov	r3, r2
 800f67a:	005b      	lsls	r3, r3, #1
 800f67c:	4413      	add	r3, r2
 800f67e:	00db      	lsls	r3, r3, #3
 800f680:	440b      	add	r3, r1
 800f682:	3314      	adds	r3, #20
 800f684:	781b      	ldrb	r3, [r3, #0]
 800f686:	2b01      	cmp	r3, #1
 800f688:	d923      	bls.n	800f6d2 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800f68a:	7dfa      	ldrb	r2, [r7, #23]
 800f68c:	4926      	ldr	r1, [pc, #152]	; (800f728 <etharp_output+0x200>)
 800f68e:	4613      	mov	r3, r2
 800f690:	005b      	lsls	r3, r3, #1
 800f692:	4413      	add	r3, r2
 800f694:	00db      	lsls	r3, r3, #3
 800f696:	440b      	add	r3, r1
 800f698:	3308      	adds	r3, #8
 800f69a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800f69c:	68fa      	ldr	r2, [r7, #12]
 800f69e:	429a      	cmp	r2, r3
 800f6a0:	d117      	bne.n	800f6d2 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800f6a2:	69bb      	ldr	r3, [r7, #24]
 800f6a4:	6819      	ldr	r1, [r3, #0]
 800f6a6:	7dfa      	ldrb	r2, [r7, #23]
 800f6a8:	481f      	ldr	r0, [pc, #124]	; (800f728 <etharp_output+0x200>)
 800f6aa:	4613      	mov	r3, r2
 800f6ac:	005b      	lsls	r3, r3, #1
 800f6ae:	4413      	add	r3, r2
 800f6b0:	00db      	lsls	r3, r3, #3
 800f6b2:	4403      	add	r3, r0
 800f6b4:	3304      	adds	r3, #4
 800f6b6:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800f6b8:	4299      	cmp	r1, r3
 800f6ba:	d10a      	bne.n	800f6d2 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800f6bc:	4a19      	ldr	r2, [pc, #100]	; (800f724 <etharp_output+0x1fc>)
 800f6be:	7dfb      	ldrb	r3, [r7, #23]
 800f6c0:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800f6c2:	7dfb      	ldrb	r3, [r7, #23]
 800f6c4:	461a      	mov	r2, r3
 800f6c6:	68b9      	ldr	r1, [r7, #8]
 800f6c8:	68f8      	ldr	r0, [r7, #12]
 800f6ca:	f7ff fe93 	bl	800f3f4 <etharp_output_to_arp_index>
 800f6ce:	4603      	mov	r3, r0
 800f6d0:	e018      	b.n	800f704 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800f6d2:	7dfb      	ldrb	r3, [r7, #23]
 800f6d4:	3301      	adds	r3, #1
 800f6d6:	75fb      	strb	r3, [r7, #23]
 800f6d8:	7dfb      	ldrb	r3, [r7, #23]
 800f6da:	2b09      	cmp	r3, #9
 800f6dc:	d9ca      	bls.n	800f674 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800f6de:	68ba      	ldr	r2, [r7, #8]
 800f6e0:	69b9      	ldr	r1, [r7, #24]
 800f6e2:	68f8      	ldr	r0, [r7, #12]
 800f6e4:	f000 f822 	bl	800f72c <etharp_query>
 800f6e8:	4603      	mov	r3, r0
 800f6ea:	e00b      	b.n	800f704 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800f6ec:	68fb      	ldr	r3, [r7, #12]
 800f6ee:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800f6f2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f6f6:	9300      	str	r3, [sp, #0]
 800f6f8:	69fb      	ldr	r3, [r7, #28]
 800f6fa:	68b9      	ldr	r1, [r7, #8]
 800f6fc:	68f8      	ldr	r0, [r7, #12]
 800f6fe:	f001 fd3f 	bl	8011180 <ethernet_output>
 800f702:	4603      	mov	r3, r0
}
 800f704:	4618      	mov	r0, r3
 800f706:	3720      	adds	r7, #32
 800f708:	46bd      	mov	sp, r7
 800f70a:	bd80      	pop	{r7, pc}
 800f70c:	0801587c 	.word	0x0801587c
 800f710:	080159cc 	.word	0x080159cc
 800f714:	080158f4 	.word	0x080158f4
 800f718:	08015a1c 	.word	0x08015a1c
 800f71c:	080159bc 	.word	0x080159bc
 800f720:	08017db4 	.word	0x08017db4
 800f724:	200006a4 	.word	0x200006a4
 800f728:	200005b4 	.word	0x200005b4

0800f72c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800f72c:	b580      	push	{r7, lr}
 800f72e:	b08c      	sub	sp, #48	; 0x30
 800f730:	af02      	add	r7, sp, #8
 800f732:	60f8      	str	r0, [r7, #12]
 800f734:	60b9      	str	r1, [r7, #8]
 800f736:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800f738:	68fb      	ldr	r3, [r7, #12]
 800f73a:	3326      	adds	r3, #38	; 0x26
 800f73c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800f73e:	23ff      	movs	r3, #255	; 0xff
 800f740:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800f744:	2300      	movs	r3, #0
 800f746:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800f748:	68bb      	ldr	r3, [r7, #8]
 800f74a:	681b      	ldr	r3, [r3, #0]
 800f74c:	68f9      	ldr	r1, [r7, #12]
 800f74e:	4618      	mov	r0, r3
 800f750:	f000 fe0e 	bl	8010370 <ip4_addr_isbroadcast_u32>
 800f754:	4603      	mov	r3, r0
 800f756:	2b00      	cmp	r3, #0
 800f758:	d10c      	bne.n	800f774 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800f75a:	68bb      	ldr	r3, [r7, #8]
 800f75c:	681b      	ldr	r3, [r3, #0]
 800f75e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800f762:	2be0      	cmp	r3, #224	; 0xe0
 800f764:	d006      	beq.n	800f774 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800f766:	68bb      	ldr	r3, [r7, #8]
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d003      	beq.n	800f774 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800f76c:	68bb      	ldr	r3, [r7, #8]
 800f76e:	681b      	ldr	r3, [r3, #0]
 800f770:	2b00      	cmp	r3, #0
 800f772:	d102      	bne.n	800f77a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800f774:	f06f 030f 	mvn.w	r3, #15
 800f778:	e101      	b.n	800f97e <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800f77a:	68fa      	ldr	r2, [r7, #12]
 800f77c:	2101      	movs	r1, #1
 800f77e:	68b8      	ldr	r0, [r7, #8]
 800f780:	f7ff fb60 	bl	800ee44 <etharp_find_entry>
 800f784:	4603      	mov	r3, r0
 800f786:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800f788:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f78c:	2b00      	cmp	r3, #0
 800f78e:	da02      	bge.n	800f796 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800f790:	8a7b      	ldrh	r3, [r7, #18]
 800f792:	b25b      	sxtb	r3, r3
 800f794:	e0f3      	b.n	800f97e <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800f796:	8a7b      	ldrh	r3, [r7, #18]
 800f798:	2b7e      	cmp	r3, #126	; 0x7e
 800f79a:	d906      	bls.n	800f7aa <etharp_query+0x7e>
 800f79c:	4b7a      	ldr	r3, [pc, #488]	; (800f988 <etharp_query+0x25c>)
 800f79e:	f240 32c1 	movw	r2, #961	; 0x3c1
 800f7a2:	497a      	ldr	r1, [pc, #488]	; (800f98c <etharp_query+0x260>)
 800f7a4:	487a      	ldr	r0, [pc, #488]	; (800f990 <etharp_query+0x264>)
 800f7a6:	f001 fe53 	bl	8011450 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800f7aa:	8a7b      	ldrh	r3, [r7, #18]
 800f7ac:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800f7ae:	7c7a      	ldrb	r2, [r7, #17]
 800f7b0:	4978      	ldr	r1, [pc, #480]	; (800f994 <etharp_query+0x268>)
 800f7b2:	4613      	mov	r3, r2
 800f7b4:	005b      	lsls	r3, r3, #1
 800f7b6:	4413      	add	r3, r2
 800f7b8:	00db      	lsls	r3, r3, #3
 800f7ba:	440b      	add	r3, r1
 800f7bc:	3314      	adds	r3, #20
 800f7be:	781b      	ldrb	r3, [r3, #0]
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	d115      	bne.n	800f7f0 <etharp_query+0xc4>
    is_new_entry = 1;
 800f7c4:	2301      	movs	r3, #1
 800f7c6:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800f7c8:	7c7a      	ldrb	r2, [r7, #17]
 800f7ca:	4972      	ldr	r1, [pc, #456]	; (800f994 <etharp_query+0x268>)
 800f7cc:	4613      	mov	r3, r2
 800f7ce:	005b      	lsls	r3, r3, #1
 800f7d0:	4413      	add	r3, r2
 800f7d2:	00db      	lsls	r3, r3, #3
 800f7d4:	440b      	add	r3, r1
 800f7d6:	3314      	adds	r3, #20
 800f7d8:	2201      	movs	r2, #1
 800f7da:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800f7dc:	7c7a      	ldrb	r2, [r7, #17]
 800f7de:	496d      	ldr	r1, [pc, #436]	; (800f994 <etharp_query+0x268>)
 800f7e0:	4613      	mov	r3, r2
 800f7e2:	005b      	lsls	r3, r3, #1
 800f7e4:	4413      	add	r3, r2
 800f7e6:	00db      	lsls	r3, r3, #3
 800f7e8:	440b      	add	r3, r1
 800f7ea:	3308      	adds	r3, #8
 800f7ec:	68fa      	ldr	r2, [r7, #12]
 800f7ee:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800f7f0:	7c7a      	ldrb	r2, [r7, #17]
 800f7f2:	4968      	ldr	r1, [pc, #416]	; (800f994 <etharp_query+0x268>)
 800f7f4:	4613      	mov	r3, r2
 800f7f6:	005b      	lsls	r3, r3, #1
 800f7f8:	4413      	add	r3, r2
 800f7fa:	00db      	lsls	r3, r3, #3
 800f7fc:	440b      	add	r3, r1
 800f7fe:	3314      	adds	r3, #20
 800f800:	781b      	ldrb	r3, [r3, #0]
 800f802:	2b01      	cmp	r3, #1
 800f804:	d011      	beq.n	800f82a <etharp_query+0xfe>
 800f806:	7c7a      	ldrb	r2, [r7, #17]
 800f808:	4962      	ldr	r1, [pc, #392]	; (800f994 <etharp_query+0x268>)
 800f80a:	4613      	mov	r3, r2
 800f80c:	005b      	lsls	r3, r3, #1
 800f80e:	4413      	add	r3, r2
 800f810:	00db      	lsls	r3, r3, #3
 800f812:	440b      	add	r3, r1
 800f814:	3314      	adds	r3, #20
 800f816:	781b      	ldrb	r3, [r3, #0]
 800f818:	2b01      	cmp	r3, #1
 800f81a:	d806      	bhi.n	800f82a <etharp_query+0xfe>
 800f81c:	4b5a      	ldr	r3, [pc, #360]	; (800f988 <etharp_query+0x25c>)
 800f81e:	f240 32cd 	movw	r2, #973	; 0x3cd
 800f822:	495d      	ldr	r1, [pc, #372]	; (800f998 <etharp_query+0x26c>)
 800f824:	485a      	ldr	r0, [pc, #360]	; (800f990 <etharp_query+0x264>)
 800f826:	f001 fe13 	bl	8011450 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800f82a:	6a3b      	ldr	r3, [r7, #32]
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	d102      	bne.n	800f836 <etharp_query+0x10a>
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	2b00      	cmp	r3, #0
 800f834:	d10c      	bne.n	800f850 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800f836:	68b9      	ldr	r1, [r7, #8]
 800f838:	68f8      	ldr	r0, [r7, #12]
 800f83a:	f000 f963 	bl	800fb04 <etharp_request>
 800f83e:	4603      	mov	r3, r0
 800f840:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	2b00      	cmp	r3, #0
 800f848:	d102      	bne.n	800f850 <etharp_query+0x124>
      return result;
 800f84a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f84e:	e096      	b.n	800f97e <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	2b00      	cmp	r3, #0
 800f854:	d106      	bne.n	800f864 <etharp_query+0x138>
 800f856:	4b4c      	ldr	r3, [pc, #304]	; (800f988 <etharp_query+0x25c>)
 800f858:	f240 32e1 	movw	r2, #993	; 0x3e1
 800f85c:	494f      	ldr	r1, [pc, #316]	; (800f99c <etharp_query+0x270>)
 800f85e:	484c      	ldr	r0, [pc, #304]	; (800f990 <etharp_query+0x264>)
 800f860:	f001 fdf6 	bl	8011450 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800f864:	7c7a      	ldrb	r2, [r7, #17]
 800f866:	494b      	ldr	r1, [pc, #300]	; (800f994 <etharp_query+0x268>)
 800f868:	4613      	mov	r3, r2
 800f86a:	005b      	lsls	r3, r3, #1
 800f86c:	4413      	add	r3, r2
 800f86e:	00db      	lsls	r3, r3, #3
 800f870:	440b      	add	r3, r1
 800f872:	3314      	adds	r3, #20
 800f874:	781b      	ldrb	r3, [r3, #0]
 800f876:	2b01      	cmp	r3, #1
 800f878:	d917      	bls.n	800f8aa <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800f87a:	4a49      	ldr	r2, [pc, #292]	; (800f9a0 <etharp_query+0x274>)
 800f87c:	7c7b      	ldrb	r3, [r7, #17]
 800f87e:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800f880:	7c7a      	ldrb	r2, [r7, #17]
 800f882:	4613      	mov	r3, r2
 800f884:	005b      	lsls	r3, r3, #1
 800f886:	4413      	add	r3, r2
 800f888:	00db      	lsls	r3, r3, #3
 800f88a:	3308      	adds	r3, #8
 800f88c:	4a41      	ldr	r2, [pc, #260]	; (800f994 <etharp_query+0x268>)
 800f88e:	4413      	add	r3, r2
 800f890:	3304      	adds	r3, #4
 800f892:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f896:	9200      	str	r2, [sp, #0]
 800f898:	697a      	ldr	r2, [r7, #20]
 800f89a:	6879      	ldr	r1, [r7, #4]
 800f89c:	68f8      	ldr	r0, [r7, #12]
 800f89e:	f001 fc6f 	bl	8011180 <ethernet_output>
 800f8a2:	4603      	mov	r3, r0
 800f8a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f8a8:	e067      	b.n	800f97a <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800f8aa:	7c7a      	ldrb	r2, [r7, #17]
 800f8ac:	4939      	ldr	r1, [pc, #228]	; (800f994 <etharp_query+0x268>)
 800f8ae:	4613      	mov	r3, r2
 800f8b0:	005b      	lsls	r3, r3, #1
 800f8b2:	4413      	add	r3, r2
 800f8b4:	00db      	lsls	r3, r3, #3
 800f8b6:	440b      	add	r3, r1
 800f8b8:	3314      	adds	r3, #20
 800f8ba:	781b      	ldrb	r3, [r3, #0]
 800f8bc:	2b01      	cmp	r3, #1
 800f8be:	d15c      	bne.n	800f97a <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800f8c0:	2300      	movs	r3, #0
 800f8c2:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	61fb      	str	r3, [r7, #28]
    while (p) {
 800f8c8:	e01c      	b.n	800f904 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800f8ca:	69fb      	ldr	r3, [r7, #28]
 800f8cc:	895a      	ldrh	r2, [r3, #10]
 800f8ce:	69fb      	ldr	r3, [r7, #28]
 800f8d0:	891b      	ldrh	r3, [r3, #8]
 800f8d2:	429a      	cmp	r2, r3
 800f8d4:	d10a      	bne.n	800f8ec <etharp_query+0x1c0>
 800f8d6:	69fb      	ldr	r3, [r7, #28]
 800f8d8:	681b      	ldr	r3, [r3, #0]
 800f8da:	2b00      	cmp	r3, #0
 800f8dc:	d006      	beq.n	800f8ec <etharp_query+0x1c0>
 800f8de:	4b2a      	ldr	r3, [pc, #168]	; (800f988 <etharp_query+0x25c>)
 800f8e0:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800f8e4:	492f      	ldr	r1, [pc, #188]	; (800f9a4 <etharp_query+0x278>)
 800f8e6:	482a      	ldr	r0, [pc, #168]	; (800f990 <etharp_query+0x264>)
 800f8e8:	f001 fdb2 	bl	8011450 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800f8ec:	69fb      	ldr	r3, [r7, #28]
 800f8ee:	7b1b      	ldrb	r3, [r3, #12]
 800f8f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	d002      	beq.n	800f8fe <etharp_query+0x1d2>
        copy_needed = 1;
 800f8f8:	2301      	movs	r3, #1
 800f8fa:	61bb      	str	r3, [r7, #24]
        break;
 800f8fc:	e005      	b.n	800f90a <etharp_query+0x1de>
      }
      p = p->next;
 800f8fe:	69fb      	ldr	r3, [r7, #28]
 800f900:	681b      	ldr	r3, [r3, #0]
 800f902:	61fb      	str	r3, [r7, #28]
    while (p) {
 800f904:	69fb      	ldr	r3, [r7, #28]
 800f906:	2b00      	cmp	r3, #0
 800f908:	d1df      	bne.n	800f8ca <etharp_query+0x19e>
    }
    if (copy_needed) {
 800f90a:	69bb      	ldr	r3, [r7, #24]
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	d007      	beq.n	800f920 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800f910:	687a      	ldr	r2, [r7, #4]
 800f912:	f44f 7120 	mov.w	r1, #640	; 0x280
 800f916:	200e      	movs	r0, #14
 800f918:	f7f8 fe2e 	bl	8008578 <pbuf_clone>
 800f91c:	61f8      	str	r0, [r7, #28]
 800f91e:	e004      	b.n	800f92a <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800f924:	69f8      	ldr	r0, [r7, #28]
 800f926:	f7f8 fc6b 	bl	8008200 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800f92a:	69fb      	ldr	r3, [r7, #28]
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	d021      	beq.n	800f974 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800f930:	7c7a      	ldrb	r2, [r7, #17]
 800f932:	4918      	ldr	r1, [pc, #96]	; (800f994 <etharp_query+0x268>)
 800f934:	4613      	mov	r3, r2
 800f936:	005b      	lsls	r3, r3, #1
 800f938:	4413      	add	r3, r2
 800f93a:	00db      	lsls	r3, r3, #3
 800f93c:	440b      	add	r3, r1
 800f93e:	681b      	ldr	r3, [r3, #0]
 800f940:	2b00      	cmp	r3, #0
 800f942:	d00a      	beq.n	800f95a <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800f944:	7c7a      	ldrb	r2, [r7, #17]
 800f946:	4913      	ldr	r1, [pc, #76]	; (800f994 <etharp_query+0x268>)
 800f948:	4613      	mov	r3, r2
 800f94a:	005b      	lsls	r3, r3, #1
 800f94c:	4413      	add	r3, r2
 800f94e:	00db      	lsls	r3, r3, #3
 800f950:	440b      	add	r3, r1
 800f952:	681b      	ldr	r3, [r3, #0]
 800f954:	4618      	mov	r0, r3
 800f956:	f7f8 fbb3 	bl	80080c0 <pbuf_free>
      }
      arp_table[i].q = p;
 800f95a:	7c7a      	ldrb	r2, [r7, #17]
 800f95c:	490d      	ldr	r1, [pc, #52]	; (800f994 <etharp_query+0x268>)
 800f95e:	4613      	mov	r3, r2
 800f960:	005b      	lsls	r3, r3, #1
 800f962:	4413      	add	r3, r2
 800f964:	00db      	lsls	r3, r3, #3
 800f966:	440b      	add	r3, r1
 800f968:	69fa      	ldr	r2, [r7, #28]
 800f96a:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800f96c:	2300      	movs	r3, #0
 800f96e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f972:	e002      	b.n	800f97a <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800f974:	23ff      	movs	r3, #255	; 0xff
 800f976:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800f97a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800f97e:	4618      	mov	r0, r3
 800f980:	3728      	adds	r7, #40	; 0x28
 800f982:	46bd      	mov	sp, r7
 800f984:	bd80      	pop	{r7, pc}
 800f986:	bf00      	nop
 800f988:	0801587c 	.word	0x0801587c
 800f98c:	08015a28 	.word	0x08015a28
 800f990:	080158f4 	.word	0x080158f4
 800f994:	200005b4 	.word	0x200005b4
 800f998:	08015a38 	.word	0x08015a38
 800f99c:	08015a1c 	.word	0x08015a1c
 800f9a0:	200006a4 	.word	0x200006a4
 800f9a4:	08015a60 	.word	0x08015a60

0800f9a8 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800f9a8:	b580      	push	{r7, lr}
 800f9aa:	b08a      	sub	sp, #40	; 0x28
 800f9ac:	af02      	add	r7, sp, #8
 800f9ae:	60f8      	str	r0, [r7, #12]
 800f9b0:	60b9      	str	r1, [r7, #8]
 800f9b2:	607a      	str	r2, [r7, #4]
 800f9b4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800f9b6:	2300      	movs	r3, #0
 800f9b8:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800f9ba:	68fb      	ldr	r3, [r7, #12]
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	d106      	bne.n	800f9ce <etharp_raw+0x26>
 800f9c0:	4b3a      	ldr	r3, [pc, #232]	; (800faac <etharp_raw+0x104>)
 800f9c2:	f240 4257 	movw	r2, #1111	; 0x457
 800f9c6:	493a      	ldr	r1, [pc, #232]	; (800fab0 <etharp_raw+0x108>)
 800f9c8:	483a      	ldr	r0, [pc, #232]	; (800fab4 <etharp_raw+0x10c>)
 800f9ca:	f001 fd41 	bl	8011450 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800f9ce:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f9d2:	211c      	movs	r1, #28
 800f9d4:	200e      	movs	r0, #14
 800f9d6:	f7f8 f88f 	bl	8007af8 <pbuf_alloc>
 800f9da:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800f9dc:	69bb      	ldr	r3, [r7, #24]
 800f9de:	2b00      	cmp	r3, #0
 800f9e0:	d102      	bne.n	800f9e8 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800f9e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f9e6:	e05d      	b.n	800faa4 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800f9e8:	69bb      	ldr	r3, [r7, #24]
 800f9ea:	895b      	ldrh	r3, [r3, #10]
 800f9ec:	2b1b      	cmp	r3, #27
 800f9ee:	d806      	bhi.n	800f9fe <etharp_raw+0x56>
 800f9f0:	4b2e      	ldr	r3, [pc, #184]	; (800faac <etharp_raw+0x104>)
 800f9f2:	f240 4262 	movw	r2, #1122	; 0x462
 800f9f6:	4930      	ldr	r1, [pc, #192]	; (800fab8 <etharp_raw+0x110>)
 800f9f8:	482e      	ldr	r0, [pc, #184]	; (800fab4 <etharp_raw+0x10c>)
 800f9fa:	f001 fd29 	bl	8011450 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800f9fe:	69bb      	ldr	r3, [r7, #24]
 800fa00:	685b      	ldr	r3, [r3, #4]
 800fa02:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800fa04:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800fa06:	4618      	mov	r0, r3
 800fa08:	f7f6 ffc8 	bl	800699c <lwip_htons>
 800fa0c:	4603      	mov	r3, r0
 800fa0e:	461a      	mov	r2, r3
 800fa10:	697b      	ldr	r3, [r7, #20]
 800fa12:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800fa14:	68fb      	ldr	r3, [r7, #12]
 800fa16:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800fa1a:	2b06      	cmp	r3, #6
 800fa1c:	d006      	beq.n	800fa2c <etharp_raw+0x84>
 800fa1e:	4b23      	ldr	r3, [pc, #140]	; (800faac <etharp_raw+0x104>)
 800fa20:	f240 4269 	movw	r2, #1129	; 0x469
 800fa24:	4925      	ldr	r1, [pc, #148]	; (800fabc <etharp_raw+0x114>)
 800fa26:	4823      	ldr	r0, [pc, #140]	; (800fab4 <etharp_raw+0x10c>)
 800fa28:	f001 fd12 	bl	8011450 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800fa2c:	697b      	ldr	r3, [r7, #20]
 800fa2e:	3308      	adds	r3, #8
 800fa30:	2206      	movs	r2, #6
 800fa32:	6839      	ldr	r1, [r7, #0]
 800fa34:	4618      	mov	r0, r3
 800fa36:	f001 fc31 	bl	801129c <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800fa3a:	697b      	ldr	r3, [r7, #20]
 800fa3c:	3312      	adds	r3, #18
 800fa3e:	2206      	movs	r2, #6
 800fa40:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fa42:	4618      	mov	r0, r3
 800fa44:	f001 fc2a 	bl	801129c <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800fa48:	697b      	ldr	r3, [r7, #20]
 800fa4a:	330e      	adds	r3, #14
 800fa4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fa4e:	6812      	ldr	r2, [r2, #0]
 800fa50:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800fa52:	697b      	ldr	r3, [r7, #20]
 800fa54:	3318      	adds	r3, #24
 800fa56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fa58:	6812      	ldr	r2, [r2, #0]
 800fa5a:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800fa5c:	697b      	ldr	r3, [r7, #20]
 800fa5e:	2200      	movs	r2, #0
 800fa60:	701a      	strb	r2, [r3, #0]
 800fa62:	2200      	movs	r2, #0
 800fa64:	f042 0201 	orr.w	r2, r2, #1
 800fa68:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800fa6a:	697b      	ldr	r3, [r7, #20]
 800fa6c:	2200      	movs	r2, #0
 800fa6e:	f042 0208 	orr.w	r2, r2, #8
 800fa72:	709a      	strb	r2, [r3, #2]
 800fa74:	2200      	movs	r2, #0
 800fa76:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800fa78:	697b      	ldr	r3, [r7, #20]
 800fa7a:	2206      	movs	r2, #6
 800fa7c:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800fa7e:	697b      	ldr	r3, [r7, #20]
 800fa80:	2204      	movs	r2, #4
 800fa82:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800fa84:	f640 0306 	movw	r3, #2054	; 0x806
 800fa88:	9300      	str	r3, [sp, #0]
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	68ba      	ldr	r2, [r7, #8]
 800fa8e:	69b9      	ldr	r1, [r7, #24]
 800fa90:	68f8      	ldr	r0, [r7, #12]
 800fa92:	f001 fb75 	bl	8011180 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800fa96:	69b8      	ldr	r0, [r7, #24]
 800fa98:	f7f8 fb12 	bl	80080c0 <pbuf_free>
  p = NULL;
 800fa9c:	2300      	movs	r3, #0
 800fa9e:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800faa0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800faa4:	4618      	mov	r0, r3
 800faa6:	3720      	adds	r7, #32
 800faa8:	46bd      	mov	sp, r7
 800faaa:	bd80      	pop	{r7, pc}
 800faac:	0801587c 	.word	0x0801587c
 800fab0:	080159cc 	.word	0x080159cc
 800fab4:	080158f4 	.word	0x080158f4
 800fab8:	08015a7c 	.word	0x08015a7c
 800fabc:	08015ab0 	.word	0x08015ab0

0800fac0 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800fac0:	b580      	push	{r7, lr}
 800fac2:	b088      	sub	sp, #32
 800fac4:	af04      	add	r7, sp, #16
 800fac6:	60f8      	str	r0, [r7, #12]
 800fac8:	60b9      	str	r1, [r7, #8]
 800faca:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800facc:	68fb      	ldr	r3, [r7, #12]
 800face:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800fad2:	68fb      	ldr	r3, [r7, #12]
 800fad4:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800fad8:	68fb      	ldr	r3, [r7, #12]
 800fada:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800fadc:	2201      	movs	r2, #1
 800fade:	9203      	str	r2, [sp, #12]
 800fae0:	68ba      	ldr	r2, [r7, #8]
 800fae2:	9202      	str	r2, [sp, #8]
 800fae4:	4a06      	ldr	r2, [pc, #24]	; (800fb00 <etharp_request_dst+0x40>)
 800fae6:	9201      	str	r2, [sp, #4]
 800fae8:	9300      	str	r3, [sp, #0]
 800faea:	4603      	mov	r3, r0
 800faec:	687a      	ldr	r2, [r7, #4]
 800faee:	68f8      	ldr	r0, [r7, #12]
 800faf0:	f7ff ff5a 	bl	800f9a8 <etharp_raw>
 800faf4:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800faf6:	4618      	mov	r0, r3
 800faf8:	3710      	adds	r7, #16
 800fafa:	46bd      	mov	sp, r7
 800fafc:	bd80      	pop	{r7, pc}
 800fafe:	bf00      	nop
 800fb00:	08017dbc 	.word	0x08017dbc

0800fb04 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800fb04:	b580      	push	{r7, lr}
 800fb06:	b082      	sub	sp, #8
 800fb08:	af00      	add	r7, sp, #0
 800fb0a:	6078      	str	r0, [r7, #4]
 800fb0c:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800fb0e:	4a05      	ldr	r2, [pc, #20]	; (800fb24 <etharp_request+0x20>)
 800fb10:	6839      	ldr	r1, [r7, #0]
 800fb12:	6878      	ldr	r0, [r7, #4]
 800fb14:	f7ff ffd4 	bl	800fac0 <etharp_request_dst>
 800fb18:	4603      	mov	r3, r0
}
 800fb1a:	4618      	mov	r0, r3
 800fb1c:	3708      	adds	r7, #8
 800fb1e:	46bd      	mov	sp, r7
 800fb20:	bd80      	pop	{r7, pc}
 800fb22:	bf00      	nop
 800fb24:	08017db4 	.word	0x08017db4

0800fb28 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800fb28:	b580      	push	{r7, lr}
 800fb2a:	b08e      	sub	sp, #56	; 0x38
 800fb2c:	af04      	add	r7, sp, #16
 800fb2e:	6078      	str	r0, [r7, #4]
 800fb30:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800fb32:	4b79      	ldr	r3, [pc, #484]	; (800fd18 <icmp_input+0x1f0>)
 800fb34:	689b      	ldr	r3, [r3, #8]
 800fb36:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800fb38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb3a:	781b      	ldrb	r3, [r3, #0]
 800fb3c:	f003 030f 	and.w	r3, r3, #15
 800fb40:	b2db      	uxtb	r3, r3
 800fb42:	009b      	lsls	r3, r3, #2
 800fb44:	b2db      	uxtb	r3, r3
 800fb46:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800fb48:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fb4a:	2b13      	cmp	r3, #19
 800fb4c:	f240 80cd 	bls.w	800fcea <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	895b      	ldrh	r3, [r3, #10]
 800fb54:	2b03      	cmp	r3, #3
 800fb56:	f240 80ca 	bls.w	800fcee <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	685b      	ldr	r3, [r3, #4]
 800fb5e:	781b      	ldrb	r3, [r3, #0]
 800fb60:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800fb64:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	f000 80b7 	beq.w	800fcdc <icmp_input+0x1b4>
 800fb6e:	2b08      	cmp	r3, #8
 800fb70:	f040 80b7 	bne.w	800fce2 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800fb74:	4b69      	ldr	r3, [pc, #420]	; (800fd1c <icmp_input+0x1f4>)
 800fb76:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800fb78:	4b67      	ldr	r3, [pc, #412]	; (800fd18 <icmp_input+0x1f0>)
 800fb7a:	695b      	ldr	r3, [r3, #20]
 800fb7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fb80:	2be0      	cmp	r3, #224	; 0xe0
 800fb82:	f000 80bb 	beq.w	800fcfc <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800fb86:	4b64      	ldr	r3, [pc, #400]	; (800fd18 <icmp_input+0x1f0>)
 800fb88:	695b      	ldr	r3, [r3, #20]
 800fb8a:	4a63      	ldr	r2, [pc, #396]	; (800fd18 <icmp_input+0x1f0>)
 800fb8c:	6812      	ldr	r2, [r2, #0]
 800fb8e:	4611      	mov	r1, r2
 800fb90:	4618      	mov	r0, r3
 800fb92:	f000 fbed 	bl	8010370 <ip4_addr_isbroadcast_u32>
 800fb96:	4603      	mov	r3, r0
 800fb98:	2b00      	cmp	r3, #0
 800fb9a:	f040 80b1 	bne.w	800fd00 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	891b      	ldrh	r3, [r3, #8]
 800fba2:	2b07      	cmp	r3, #7
 800fba4:	f240 80a5 	bls.w	800fcf2 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800fba8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fbaa:	330e      	adds	r3, #14
 800fbac:	4619      	mov	r1, r3
 800fbae:	6878      	ldr	r0, [r7, #4]
 800fbb0:	f7f8 f9f0 	bl	8007f94 <pbuf_add_header>
 800fbb4:	4603      	mov	r3, r0
 800fbb6:	2b00      	cmp	r3, #0
 800fbb8:	d04b      	beq.n	800fc52 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	891a      	ldrh	r2, [r3, #8]
 800fbbe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fbc0:	4413      	add	r3, r2
 800fbc2:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	891b      	ldrh	r3, [r3, #8]
 800fbc8:	8b7a      	ldrh	r2, [r7, #26]
 800fbca:	429a      	cmp	r2, r3
 800fbcc:	f0c0 809a 	bcc.w	800fd04 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800fbd0:	8b7b      	ldrh	r3, [r7, #26]
 800fbd2:	f44f 7220 	mov.w	r2, #640	; 0x280
 800fbd6:	4619      	mov	r1, r3
 800fbd8:	200e      	movs	r0, #14
 800fbda:	f7f7 ff8d 	bl	8007af8 <pbuf_alloc>
 800fbde:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800fbe0:	697b      	ldr	r3, [r7, #20]
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	f000 8090 	beq.w	800fd08 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800fbe8:	697b      	ldr	r3, [r7, #20]
 800fbea:	895b      	ldrh	r3, [r3, #10]
 800fbec:	461a      	mov	r2, r3
 800fbee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fbf0:	3308      	adds	r3, #8
 800fbf2:	429a      	cmp	r2, r3
 800fbf4:	d203      	bcs.n	800fbfe <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800fbf6:	6978      	ldr	r0, [r7, #20]
 800fbf8:	f7f8 fa62 	bl	80080c0 <pbuf_free>
          goto icmperr;
 800fbfc:	e085      	b.n	800fd0a <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800fbfe:	697b      	ldr	r3, [r7, #20]
 800fc00:	685b      	ldr	r3, [r3, #4]
 800fc02:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800fc04:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fc06:	4618      	mov	r0, r3
 800fc08:	f001 fb48 	bl	801129c <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800fc0c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fc0e:	4619      	mov	r1, r3
 800fc10:	6978      	ldr	r0, [r7, #20]
 800fc12:	f7f8 f9cf 	bl	8007fb4 <pbuf_remove_header>
 800fc16:	4603      	mov	r3, r0
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	d009      	beq.n	800fc30 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800fc1c:	4b40      	ldr	r3, [pc, #256]	; (800fd20 <icmp_input+0x1f8>)
 800fc1e:	22b6      	movs	r2, #182	; 0xb6
 800fc20:	4940      	ldr	r1, [pc, #256]	; (800fd24 <icmp_input+0x1fc>)
 800fc22:	4841      	ldr	r0, [pc, #260]	; (800fd28 <icmp_input+0x200>)
 800fc24:	f001 fc14 	bl	8011450 <iprintf>
          pbuf_free(r);
 800fc28:	6978      	ldr	r0, [r7, #20]
 800fc2a:	f7f8 fa49 	bl	80080c0 <pbuf_free>
          goto icmperr;
 800fc2e:	e06c      	b.n	800fd0a <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800fc30:	6879      	ldr	r1, [r7, #4]
 800fc32:	6978      	ldr	r0, [r7, #20]
 800fc34:	f7f8 fb5c 	bl	80082f0 <pbuf_copy>
 800fc38:	4603      	mov	r3, r0
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	d003      	beq.n	800fc46 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800fc3e:	6978      	ldr	r0, [r7, #20]
 800fc40:	f7f8 fa3e 	bl	80080c0 <pbuf_free>
          goto icmperr;
 800fc44:	e061      	b.n	800fd0a <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800fc46:	6878      	ldr	r0, [r7, #4]
 800fc48:	f7f8 fa3a 	bl	80080c0 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800fc4c:	697b      	ldr	r3, [r7, #20]
 800fc4e:	607b      	str	r3, [r7, #4]
 800fc50:	e00f      	b.n	800fc72 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800fc52:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fc54:	330e      	adds	r3, #14
 800fc56:	4619      	mov	r1, r3
 800fc58:	6878      	ldr	r0, [r7, #4]
 800fc5a:	f7f8 f9ab 	bl	8007fb4 <pbuf_remove_header>
 800fc5e:	4603      	mov	r3, r0
 800fc60:	2b00      	cmp	r3, #0
 800fc62:	d006      	beq.n	800fc72 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800fc64:	4b2e      	ldr	r3, [pc, #184]	; (800fd20 <icmp_input+0x1f8>)
 800fc66:	22c7      	movs	r2, #199	; 0xc7
 800fc68:	4930      	ldr	r1, [pc, #192]	; (800fd2c <icmp_input+0x204>)
 800fc6a:	482f      	ldr	r0, [pc, #188]	; (800fd28 <icmp_input+0x200>)
 800fc6c:	f001 fbf0 	bl	8011450 <iprintf>
          goto icmperr;
 800fc70:	e04b      	b.n	800fd0a <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	685b      	ldr	r3, [r3, #4]
 800fc76:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800fc78:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fc7a:	4619      	mov	r1, r3
 800fc7c:	6878      	ldr	r0, [r7, #4]
 800fc7e:	f7f8 f989 	bl	8007f94 <pbuf_add_header>
 800fc82:	4603      	mov	r3, r0
 800fc84:	2b00      	cmp	r3, #0
 800fc86:	d12b      	bne.n	800fce0 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	685b      	ldr	r3, [r3, #4]
 800fc8c:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800fc8e:	69fb      	ldr	r3, [r7, #28]
 800fc90:	681a      	ldr	r2, [r3, #0]
 800fc92:	68fb      	ldr	r3, [r7, #12]
 800fc94:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800fc96:	4b20      	ldr	r3, [pc, #128]	; (800fd18 <icmp_input+0x1f0>)
 800fc98:	691a      	ldr	r2, [r3, #16]
 800fc9a:	68fb      	ldr	r3, [r7, #12]
 800fc9c:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800fc9e:	693b      	ldr	r3, [r7, #16]
 800fca0:	2200      	movs	r2, #0
 800fca2:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800fca4:	693b      	ldr	r3, [r7, #16]
 800fca6:	2200      	movs	r2, #0
 800fca8:	709a      	strb	r2, [r3, #2]
 800fcaa:	2200      	movs	r2, #0
 800fcac:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800fcae:	68fb      	ldr	r3, [r7, #12]
 800fcb0:	22ff      	movs	r2, #255	; 0xff
 800fcb2:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800fcb4:	68fb      	ldr	r3, [r7, #12]
 800fcb6:	2200      	movs	r2, #0
 800fcb8:	729a      	strb	r2, [r3, #10]
 800fcba:	2200      	movs	r2, #0
 800fcbc:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800fcbe:	683b      	ldr	r3, [r7, #0]
 800fcc0:	9302      	str	r3, [sp, #8]
 800fcc2:	2301      	movs	r3, #1
 800fcc4:	9301      	str	r3, [sp, #4]
 800fcc6:	2300      	movs	r3, #0
 800fcc8:	9300      	str	r3, [sp, #0]
 800fcca:	23ff      	movs	r3, #255	; 0xff
 800fccc:	2200      	movs	r2, #0
 800fcce:	69f9      	ldr	r1, [r7, #28]
 800fcd0:	6878      	ldr	r0, [r7, #4]
 800fcd2:	f000 fa75 	bl	80101c0 <ip4_output_if>
 800fcd6:	4603      	mov	r3, r0
 800fcd8:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800fcda:	e001      	b.n	800fce0 <icmp_input+0x1b8>
      break;
 800fcdc:	bf00      	nop
 800fcde:	e000      	b.n	800fce2 <icmp_input+0x1ba>
      break;
 800fce0:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800fce2:	6878      	ldr	r0, [r7, #4]
 800fce4:	f7f8 f9ec 	bl	80080c0 <pbuf_free>
  return;
 800fce8:	e013      	b.n	800fd12 <icmp_input+0x1ea>
    goto lenerr;
 800fcea:	bf00      	nop
 800fcec:	e002      	b.n	800fcf4 <icmp_input+0x1cc>
    goto lenerr;
 800fcee:	bf00      	nop
 800fcf0:	e000      	b.n	800fcf4 <icmp_input+0x1cc>
        goto lenerr;
 800fcf2:	bf00      	nop
lenerr:
  pbuf_free(p);
 800fcf4:	6878      	ldr	r0, [r7, #4]
 800fcf6:	f7f8 f9e3 	bl	80080c0 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800fcfa:	e00a      	b.n	800fd12 <icmp_input+0x1ea>
        goto icmperr;
 800fcfc:	bf00      	nop
 800fcfe:	e004      	b.n	800fd0a <icmp_input+0x1e2>
        goto icmperr;
 800fd00:	bf00      	nop
 800fd02:	e002      	b.n	800fd0a <icmp_input+0x1e2>
          goto icmperr;
 800fd04:	bf00      	nop
 800fd06:	e000      	b.n	800fd0a <icmp_input+0x1e2>
          goto icmperr;
 800fd08:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800fd0a:	6878      	ldr	r0, [r7, #4]
 800fd0c:	f7f8 f9d8 	bl	80080c0 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800fd10:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800fd12:	3728      	adds	r7, #40	; 0x28
 800fd14:	46bd      	mov	sp, r7
 800fd16:	bd80      	pop	{r7, pc}
 800fd18:	20003ddc 	.word	0x20003ddc
 800fd1c:	20003df0 	.word	0x20003df0
 800fd20:	08015af4 	.word	0x08015af4
 800fd24:	08015b2c 	.word	0x08015b2c
 800fd28:	08015b64 	.word	0x08015b64
 800fd2c:	08015b8c 	.word	0x08015b8c

0800fd30 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800fd30:	b580      	push	{r7, lr}
 800fd32:	b082      	sub	sp, #8
 800fd34:	af00      	add	r7, sp, #0
 800fd36:	6078      	str	r0, [r7, #4]
 800fd38:	460b      	mov	r3, r1
 800fd3a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800fd3c:	78fb      	ldrb	r3, [r7, #3]
 800fd3e:	461a      	mov	r2, r3
 800fd40:	2103      	movs	r1, #3
 800fd42:	6878      	ldr	r0, [r7, #4]
 800fd44:	f000 f814 	bl	800fd70 <icmp_send_response>
}
 800fd48:	bf00      	nop
 800fd4a:	3708      	adds	r7, #8
 800fd4c:	46bd      	mov	sp, r7
 800fd4e:	bd80      	pop	{r7, pc}

0800fd50 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800fd50:	b580      	push	{r7, lr}
 800fd52:	b082      	sub	sp, #8
 800fd54:	af00      	add	r7, sp, #0
 800fd56:	6078      	str	r0, [r7, #4]
 800fd58:	460b      	mov	r3, r1
 800fd5a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800fd5c:	78fb      	ldrb	r3, [r7, #3]
 800fd5e:	461a      	mov	r2, r3
 800fd60:	210b      	movs	r1, #11
 800fd62:	6878      	ldr	r0, [r7, #4]
 800fd64:	f000 f804 	bl	800fd70 <icmp_send_response>
}
 800fd68:	bf00      	nop
 800fd6a:	3708      	adds	r7, #8
 800fd6c:	46bd      	mov	sp, r7
 800fd6e:	bd80      	pop	{r7, pc}

0800fd70 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800fd70:	b580      	push	{r7, lr}
 800fd72:	b08c      	sub	sp, #48	; 0x30
 800fd74:	af04      	add	r7, sp, #16
 800fd76:	6078      	str	r0, [r7, #4]
 800fd78:	460b      	mov	r3, r1
 800fd7a:	70fb      	strb	r3, [r7, #3]
 800fd7c:	4613      	mov	r3, r2
 800fd7e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800fd80:	f44f 7220 	mov.w	r2, #640	; 0x280
 800fd84:	2124      	movs	r1, #36	; 0x24
 800fd86:	2022      	movs	r0, #34	; 0x22
 800fd88:	f7f7 feb6 	bl	8007af8 <pbuf_alloc>
 800fd8c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800fd8e:	69fb      	ldr	r3, [r7, #28]
 800fd90:	2b00      	cmp	r3, #0
 800fd92:	d04c      	beq.n	800fe2e <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800fd94:	69fb      	ldr	r3, [r7, #28]
 800fd96:	895b      	ldrh	r3, [r3, #10]
 800fd98:	2b23      	cmp	r3, #35	; 0x23
 800fd9a:	d806      	bhi.n	800fdaa <icmp_send_response+0x3a>
 800fd9c:	4b26      	ldr	r3, [pc, #152]	; (800fe38 <icmp_send_response+0xc8>)
 800fd9e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800fda2:	4926      	ldr	r1, [pc, #152]	; (800fe3c <icmp_send_response+0xcc>)
 800fda4:	4826      	ldr	r0, [pc, #152]	; (800fe40 <icmp_send_response+0xd0>)
 800fda6:	f001 fb53 	bl	8011450 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	685b      	ldr	r3, [r3, #4]
 800fdae:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800fdb0:	69fb      	ldr	r3, [r7, #28]
 800fdb2:	685b      	ldr	r3, [r3, #4]
 800fdb4:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800fdb6:	697b      	ldr	r3, [r7, #20]
 800fdb8:	78fa      	ldrb	r2, [r7, #3]
 800fdba:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800fdbc:	697b      	ldr	r3, [r7, #20]
 800fdbe:	78ba      	ldrb	r2, [r7, #2]
 800fdc0:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800fdc2:	697b      	ldr	r3, [r7, #20]
 800fdc4:	2200      	movs	r2, #0
 800fdc6:	711a      	strb	r2, [r3, #4]
 800fdc8:	2200      	movs	r2, #0
 800fdca:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800fdcc:	697b      	ldr	r3, [r7, #20]
 800fdce:	2200      	movs	r2, #0
 800fdd0:	719a      	strb	r2, [r3, #6]
 800fdd2:	2200      	movs	r2, #0
 800fdd4:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800fdd6:	69fb      	ldr	r3, [r7, #28]
 800fdd8:	685b      	ldr	r3, [r3, #4]
 800fdda:	f103 0008 	add.w	r0, r3, #8
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	685b      	ldr	r3, [r3, #4]
 800fde2:	221c      	movs	r2, #28
 800fde4:	4619      	mov	r1, r3
 800fde6:	f001 fa59 	bl	801129c <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800fdea:	69bb      	ldr	r3, [r7, #24]
 800fdec:	68db      	ldr	r3, [r3, #12]
 800fdee:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800fdf0:	f107 030c 	add.w	r3, r7, #12
 800fdf4:	4618      	mov	r0, r3
 800fdf6:	f000 f825 	bl	800fe44 <ip4_route>
 800fdfa:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800fdfc:	693b      	ldr	r3, [r7, #16]
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	d011      	beq.n	800fe26 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800fe02:	697b      	ldr	r3, [r7, #20]
 800fe04:	2200      	movs	r2, #0
 800fe06:	709a      	strb	r2, [r3, #2]
 800fe08:	2200      	movs	r2, #0
 800fe0a:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800fe0c:	f107 020c 	add.w	r2, r7, #12
 800fe10:	693b      	ldr	r3, [r7, #16]
 800fe12:	9302      	str	r3, [sp, #8]
 800fe14:	2301      	movs	r3, #1
 800fe16:	9301      	str	r3, [sp, #4]
 800fe18:	2300      	movs	r3, #0
 800fe1a:	9300      	str	r3, [sp, #0]
 800fe1c:	23ff      	movs	r3, #255	; 0xff
 800fe1e:	2100      	movs	r1, #0
 800fe20:	69f8      	ldr	r0, [r7, #28]
 800fe22:	f000 f9cd 	bl	80101c0 <ip4_output_if>
  }
  pbuf_free(q);
 800fe26:	69f8      	ldr	r0, [r7, #28]
 800fe28:	f7f8 f94a 	bl	80080c0 <pbuf_free>
 800fe2c:	e000      	b.n	800fe30 <icmp_send_response+0xc0>
    return;
 800fe2e:	bf00      	nop
}
 800fe30:	3720      	adds	r7, #32
 800fe32:	46bd      	mov	sp, r7
 800fe34:	bd80      	pop	{r7, pc}
 800fe36:	bf00      	nop
 800fe38:	08015af4 	.word	0x08015af4
 800fe3c:	08015bc0 	.word	0x08015bc0
 800fe40:	08015b64 	.word	0x08015b64

0800fe44 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800fe44:	b480      	push	{r7}
 800fe46:	b085      	sub	sp, #20
 800fe48:	af00      	add	r7, sp, #0
 800fe4a:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800fe4c:	4b33      	ldr	r3, [pc, #204]	; (800ff1c <ip4_route+0xd8>)
 800fe4e:	681b      	ldr	r3, [r3, #0]
 800fe50:	60fb      	str	r3, [r7, #12]
 800fe52:	e036      	b.n	800fec2 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800fe54:	68fb      	ldr	r3, [r7, #12]
 800fe56:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fe5a:	f003 0301 	and.w	r3, r3, #1
 800fe5e:	b2db      	uxtb	r3, r3
 800fe60:	2b00      	cmp	r3, #0
 800fe62:	d02b      	beq.n	800febc <ip4_route+0x78>
 800fe64:	68fb      	ldr	r3, [r7, #12]
 800fe66:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fe6a:	089b      	lsrs	r3, r3, #2
 800fe6c:	f003 0301 	and.w	r3, r3, #1
 800fe70:	b2db      	uxtb	r3, r3
 800fe72:	2b00      	cmp	r3, #0
 800fe74:	d022      	beq.n	800febc <ip4_route+0x78>
 800fe76:	68fb      	ldr	r3, [r7, #12]
 800fe78:	3304      	adds	r3, #4
 800fe7a:	681b      	ldr	r3, [r3, #0]
 800fe7c:	2b00      	cmp	r3, #0
 800fe7e:	d01d      	beq.n	800febc <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	681a      	ldr	r2, [r3, #0]
 800fe84:	68fb      	ldr	r3, [r7, #12]
 800fe86:	3304      	adds	r3, #4
 800fe88:	681b      	ldr	r3, [r3, #0]
 800fe8a:	405a      	eors	r2, r3
 800fe8c:	68fb      	ldr	r3, [r7, #12]
 800fe8e:	3308      	adds	r3, #8
 800fe90:	681b      	ldr	r3, [r3, #0]
 800fe92:	4013      	ands	r3, r2
 800fe94:	2b00      	cmp	r3, #0
 800fe96:	d101      	bne.n	800fe9c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800fe98:	68fb      	ldr	r3, [r7, #12]
 800fe9a:	e038      	b.n	800ff0e <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800fe9c:	68fb      	ldr	r3, [r7, #12]
 800fe9e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fea2:	f003 0302 	and.w	r3, r3, #2
 800fea6:	2b00      	cmp	r3, #0
 800fea8:	d108      	bne.n	800febc <ip4_route+0x78>
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	681a      	ldr	r2, [r3, #0]
 800feae:	68fb      	ldr	r3, [r7, #12]
 800feb0:	330c      	adds	r3, #12
 800feb2:	681b      	ldr	r3, [r3, #0]
 800feb4:	429a      	cmp	r2, r3
 800feb6:	d101      	bne.n	800febc <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800feb8:	68fb      	ldr	r3, [r7, #12]
 800feba:	e028      	b.n	800ff0e <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800febc:	68fb      	ldr	r3, [r7, #12]
 800febe:	681b      	ldr	r3, [r3, #0]
 800fec0:	60fb      	str	r3, [r7, #12]
 800fec2:	68fb      	ldr	r3, [r7, #12]
 800fec4:	2b00      	cmp	r3, #0
 800fec6:	d1c5      	bne.n	800fe54 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800fec8:	4b15      	ldr	r3, [pc, #84]	; (800ff20 <ip4_route+0xdc>)
 800feca:	681b      	ldr	r3, [r3, #0]
 800fecc:	2b00      	cmp	r3, #0
 800fece:	d01a      	beq.n	800ff06 <ip4_route+0xc2>
 800fed0:	4b13      	ldr	r3, [pc, #76]	; (800ff20 <ip4_route+0xdc>)
 800fed2:	681b      	ldr	r3, [r3, #0]
 800fed4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fed8:	f003 0301 	and.w	r3, r3, #1
 800fedc:	2b00      	cmp	r3, #0
 800fede:	d012      	beq.n	800ff06 <ip4_route+0xc2>
 800fee0:	4b0f      	ldr	r3, [pc, #60]	; (800ff20 <ip4_route+0xdc>)
 800fee2:	681b      	ldr	r3, [r3, #0]
 800fee4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fee8:	f003 0304 	and.w	r3, r3, #4
 800feec:	2b00      	cmp	r3, #0
 800feee:	d00a      	beq.n	800ff06 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800fef0:	4b0b      	ldr	r3, [pc, #44]	; (800ff20 <ip4_route+0xdc>)
 800fef2:	681b      	ldr	r3, [r3, #0]
 800fef4:	3304      	adds	r3, #4
 800fef6:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800fef8:	2b00      	cmp	r3, #0
 800fefa:	d004      	beq.n	800ff06 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	681b      	ldr	r3, [r3, #0]
 800ff00:	b2db      	uxtb	r3, r3
 800ff02:	2b7f      	cmp	r3, #127	; 0x7f
 800ff04:	d101      	bne.n	800ff0a <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800ff06:	2300      	movs	r3, #0
 800ff08:	e001      	b.n	800ff0e <ip4_route+0xca>
  }

  return netif_default;
 800ff0a:	4b05      	ldr	r3, [pc, #20]	; (800ff20 <ip4_route+0xdc>)
 800ff0c:	681b      	ldr	r3, [r3, #0]
}
 800ff0e:	4618      	mov	r0, r3
 800ff10:	3714      	adds	r7, #20
 800ff12:	46bd      	mov	sp, r7
 800ff14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff18:	4770      	bx	lr
 800ff1a:	bf00      	nop
 800ff1c:	2000d3d0 	.word	0x2000d3d0
 800ff20:	2000d3d4 	.word	0x2000d3d4

0800ff24 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800ff24:	b580      	push	{r7, lr}
 800ff26:	b082      	sub	sp, #8
 800ff28:	af00      	add	r7, sp, #0
 800ff2a:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ff32:	f003 0301 	and.w	r3, r3, #1
 800ff36:	b2db      	uxtb	r3, r3
 800ff38:	2b00      	cmp	r3, #0
 800ff3a:	d016      	beq.n	800ff6a <ip4_input_accept+0x46>
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	3304      	adds	r3, #4
 800ff40:	681b      	ldr	r3, [r3, #0]
 800ff42:	2b00      	cmp	r3, #0
 800ff44:	d011      	beq.n	800ff6a <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800ff46:	4b0b      	ldr	r3, [pc, #44]	; (800ff74 <ip4_input_accept+0x50>)
 800ff48:	695a      	ldr	r2, [r3, #20]
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	3304      	adds	r3, #4
 800ff4e:	681b      	ldr	r3, [r3, #0]
 800ff50:	429a      	cmp	r2, r3
 800ff52:	d008      	beq.n	800ff66 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800ff54:	4b07      	ldr	r3, [pc, #28]	; (800ff74 <ip4_input_accept+0x50>)
 800ff56:	695b      	ldr	r3, [r3, #20]
 800ff58:	6879      	ldr	r1, [r7, #4]
 800ff5a:	4618      	mov	r0, r3
 800ff5c:	f000 fa08 	bl	8010370 <ip4_addr_isbroadcast_u32>
 800ff60:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800ff62:	2b00      	cmp	r3, #0
 800ff64:	d001      	beq.n	800ff6a <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800ff66:	2301      	movs	r3, #1
 800ff68:	e000      	b.n	800ff6c <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800ff6a:	2300      	movs	r3, #0
}
 800ff6c:	4618      	mov	r0, r3
 800ff6e:	3708      	adds	r7, #8
 800ff70:	46bd      	mov	sp, r7
 800ff72:	bd80      	pop	{r7, pc}
 800ff74:	20003ddc 	.word	0x20003ddc

0800ff78 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800ff78:	b580      	push	{r7, lr}
 800ff7a:	b086      	sub	sp, #24
 800ff7c:	af00      	add	r7, sp, #0
 800ff7e:	6078      	str	r0, [r7, #4]
 800ff80:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	685b      	ldr	r3, [r3, #4]
 800ff86:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800ff88:	697b      	ldr	r3, [r7, #20]
 800ff8a:	781b      	ldrb	r3, [r3, #0]
 800ff8c:	091b      	lsrs	r3, r3, #4
 800ff8e:	b2db      	uxtb	r3, r3
 800ff90:	2b04      	cmp	r3, #4
 800ff92:	d004      	beq.n	800ff9e <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800ff94:	6878      	ldr	r0, [r7, #4]
 800ff96:	f7f8 f893 	bl	80080c0 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800ff9a:	2300      	movs	r3, #0
 800ff9c:	e107      	b.n	80101ae <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800ff9e:	697b      	ldr	r3, [r7, #20]
 800ffa0:	781b      	ldrb	r3, [r3, #0]
 800ffa2:	f003 030f 	and.w	r3, r3, #15
 800ffa6:	b2db      	uxtb	r3, r3
 800ffa8:	009b      	lsls	r3, r3, #2
 800ffaa:	b2db      	uxtb	r3, r3
 800ffac:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800ffae:	697b      	ldr	r3, [r7, #20]
 800ffb0:	885b      	ldrh	r3, [r3, #2]
 800ffb2:	b29b      	uxth	r3, r3
 800ffb4:	4618      	mov	r0, r3
 800ffb6:	f7f6 fcf1 	bl	800699c <lwip_htons>
 800ffba:	4603      	mov	r3, r0
 800ffbc:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	891b      	ldrh	r3, [r3, #8]
 800ffc2:	89ba      	ldrh	r2, [r7, #12]
 800ffc4:	429a      	cmp	r2, r3
 800ffc6:	d204      	bcs.n	800ffd2 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800ffc8:	89bb      	ldrh	r3, [r7, #12]
 800ffca:	4619      	mov	r1, r3
 800ffcc:	6878      	ldr	r0, [r7, #4]
 800ffce:	f7f7 fef1 	bl	8007db4 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	895b      	ldrh	r3, [r3, #10]
 800ffd6:	89fa      	ldrh	r2, [r7, #14]
 800ffd8:	429a      	cmp	r2, r3
 800ffda:	d807      	bhi.n	800ffec <ip4_input+0x74>
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	891b      	ldrh	r3, [r3, #8]
 800ffe0:	89ba      	ldrh	r2, [r7, #12]
 800ffe2:	429a      	cmp	r2, r3
 800ffe4:	d802      	bhi.n	800ffec <ip4_input+0x74>
 800ffe6:	89fb      	ldrh	r3, [r7, #14]
 800ffe8:	2b13      	cmp	r3, #19
 800ffea:	d804      	bhi.n	800fff6 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800ffec:	6878      	ldr	r0, [r7, #4]
 800ffee:	f7f8 f867 	bl	80080c0 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800fff2:	2300      	movs	r3, #0
 800fff4:	e0db      	b.n	80101ae <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800fff6:	697b      	ldr	r3, [r7, #20]
 800fff8:	691b      	ldr	r3, [r3, #16]
 800fffa:	4a6f      	ldr	r2, [pc, #444]	; (80101b8 <ip4_input+0x240>)
 800fffc:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800fffe:	697b      	ldr	r3, [r7, #20]
 8010000:	68db      	ldr	r3, [r3, #12]
 8010002:	4a6d      	ldr	r2, [pc, #436]	; (80101b8 <ip4_input+0x240>)
 8010004:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8010006:	4b6c      	ldr	r3, [pc, #432]	; (80101b8 <ip4_input+0x240>)
 8010008:	695b      	ldr	r3, [r3, #20]
 801000a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801000e:	2be0      	cmp	r3, #224	; 0xe0
 8010010:	d112      	bne.n	8010038 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8010012:	683b      	ldr	r3, [r7, #0]
 8010014:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010018:	f003 0301 	and.w	r3, r3, #1
 801001c:	b2db      	uxtb	r3, r3
 801001e:	2b00      	cmp	r3, #0
 8010020:	d007      	beq.n	8010032 <ip4_input+0xba>
 8010022:	683b      	ldr	r3, [r7, #0]
 8010024:	3304      	adds	r3, #4
 8010026:	681b      	ldr	r3, [r3, #0]
 8010028:	2b00      	cmp	r3, #0
 801002a:	d002      	beq.n	8010032 <ip4_input+0xba>
      netif = inp;
 801002c:	683b      	ldr	r3, [r7, #0]
 801002e:	613b      	str	r3, [r7, #16]
 8010030:	e02a      	b.n	8010088 <ip4_input+0x110>
    } else {
      netif = NULL;
 8010032:	2300      	movs	r3, #0
 8010034:	613b      	str	r3, [r7, #16]
 8010036:	e027      	b.n	8010088 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8010038:	6838      	ldr	r0, [r7, #0]
 801003a:	f7ff ff73 	bl	800ff24 <ip4_input_accept>
 801003e:	4603      	mov	r3, r0
 8010040:	2b00      	cmp	r3, #0
 8010042:	d002      	beq.n	801004a <ip4_input+0xd2>
      netif = inp;
 8010044:	683b      	ldr	r3, [r7, #0]
 8010046:	613b      	str	r3, [r7, #16]
 8010048:	e01e      	b.n	8010088 <ip4_input+0x110>
    } else {
      netif = NULL;
 801004a:	2300      	movs	r3, #0
 801004c:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801004e:	4b5a      	ldr	r3, [pc, #360]	; (80101b8 <ip4_input+0x240>)
 8010050:	695b      	ldr	r3, [r3, #20]
 8010052:	b2db      	uxtb	r3, r3
 8010054:	2b7f      	cmp	r3, #127	; 0x7f
 8010056:	d017      	beq.n	8010088 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8010058:	4b58      	ldr	r3, [pc, #352]	; (80101bc <ip4_input+0x244>)
 801005a:	681b      	ldr	r3, [r3, #0]
 801005c:	613b      	str	r3, [r7, #16]
 801005e:	e00e      	b.n	801007e <ip4_input+0x106>
          if (netif == inp) {
 8010060:	693a      	ldr	r2, [r7, #16]
 8010062:	683b      	ldr	r3, [r7, #0]
 8010064:	429a      	cmp	r2, r3
 8010066:	d006      	beq.n	8010076 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8010068:	6938      	ldr	r0, [r7, #16]
 801006a:	f7ff ff5b 	bl	800ff24 <ip4_input_accept>
 801006e:	4603      	mov	r3, r0
 8010070:	2b00      	cmp	r3, #0
 8010072:	d108      	bne.n	8010086 <ip4_input+0x10e>
 8010074:	e000      	b.n	8010078 <ip4_input+0x100>
            continue;
 8010076:	bf00      	nop
        NETIF_FOREACH(netif) {
 8010078:	693b      	ldr	r3, [r7, #16]
 801007a:	681b      	ldr	r3, [r3, #0]
 801007c:	613b      	str	r3, [r7, #16]
 801007e:	693b      	ldr	r3, [r7, #16]
 8010080:	2b00      	cmp	r3, #0
 8010082:	d1ed      	bne.n	8010060 <ip4_input+0xe8>
 8010084:	e000      	b.n	8010088 <ip4_input+0x110>
            break;
 8010086:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8010088:	4b4b      	ldr	r3, [pc, #300]	; (80101b8 <ip4_input+0x240>)
 801008a:	691b      	ldr	r3, [r3, #16]
 801008c:	6839      	ldr	r1, [r7, #0]
 801008e:	4618      	mov	r0, r3
 8010090:	f000 f96e 	bl	8010370 <ip4_addr_isbroadcast_u32>
 8010094:	4603      	mov	r3, r0
 8010096:	2b00      	cmp	r3, #0
 8010098:	d105      	bne.n	80100a6 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801009a:	4b47      	ldr	r3, [pc, #284]	; (80101b8 <ip4_input+0x240>)
 801009c:	691b      	ldr	r3, [r3, #16]
 801009e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80100a2:	2be0      	cmp	r3, #224	; 0xe0
 80100a4:	d104      	bne.n	80100b0 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80100a6:	6878      	ldr	r0, [r7, #4]
 80100a8:	f7f8 f80a 	bl	80080c0 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80100ac:	2300      	movs	r3, #0
 80100ae:	e07e      	b.n	80101ae <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80100b0:	693b      	ldr	r3, [r7, #16]
 80100b2:	2b00      	cmp	r3, #0
 80100b4:	d104      	bne.n	80100c0 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80100b6:	6878      	ldr	r0, [r7, #4]
 80100b8:	f7f8 f802 	bl	80080c0 <pbuf_free>
    return ERR_OK;
 80100bc:	2300      	movs	r3, #0
 80100be:	e076      	b.n	80101ae <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80100c0:	697b      	ldr	r3, [r7, #20]
 80100c2:	88db      	ldrh	r3, [r3, #6]
 80100c4:	b29b      	uxth	r3, r3
 80100c6:	461a      	mov	r2, r3
 80100c8:	f64f 733f 	movw	r3, #65343	; 0xff3f
 80100cc:	4013      	ands	r3, r2
 80100ce:	2b00      	cmp	r3, #0
 80100d0:	d00b      	beq.n	80100ea <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80100d2:	6878      	ldr	r0, [r7, #4]
 80100d4:	f000 fc92 	bl	80109fc <ip4_reass>
 80100d8:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	2b00      	cmp	r3, #0
 80100de:	d101      	bne.n	80100e4 <ip4_input+0x16c>
      return ERR_OK;
 80100e0:	2300      	movs	r3, #0
 80100e2:	e064      	b.n	80101ae <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	685b      	ldr	r3, [r3, #4]
 80100e8:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80100ea:	4a33      	ldr	r2, [pc, #204]	; (80101b8 <ip4_input+0x240>)
 80100ec:	693b      	ldr	r3, [r7, #16]
 80100ee:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80100f0:	4a31      	ldr	r2, [pc, #196]	; (80101b8 <ip4_input+0x240>)
 80100f2:	683b      	ldr	r3, [r7, #0]
 80100f4:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80100f6:	4a30      	ldr	r2, [pc, #192]	; (80101b8 <ip4_input+0x240>)
 80100f8:	697b      	ldr	r3, [r7, #20]
 80100fa:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80100fc:	697b      	ldr	r3, [r7, #20]
 80100fe:	781b      	ldrb	r3, [r3, #0]
 8010100:	f003 030f 	and.w	r3, r3, #15
 8010104:	b2db      	uxtb	r3, r3
 8010106:	009b      	lsls	r3, r3, #2
 8010108:	b2db      	uxtb	r3, r3
 801010a:	b29a      	uxth	r2, r3
 801010c:	4b2a      	ldr	r3, [pc, #168]	; (80101b8 <ip4_input+0x240>)
 801010e:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8010110:	89fb      	ldrh	r3, [r7, #14]
 8010112:	4619      	mov	r1, r3
 8010114:	6878      	ldr	r0, [r7, #4]
 8010116:	f7f7 ff4d 	bl	8007fb4 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801011a:	697b      	ldr	r3, [r7, #20]
 801011c:	7a5b      	ldrb	r3, [r3, #9]
 801011e:	2b11      	cmp	r3, #17
 8010120:	d006      	beq.n	8010130 <ip4_input+0x1b8>
 8010122:	2b11      	cmp	r3, #17
 8010124:	dc13      	bgt.n	801014e <ip4_input+0x1d6>
 8010126:	2b01      	cmp	r3, #1
 8010128:	d00c      	beq.n	8010144 <ip4_input+0x1cc>
 801012a:	2b06      	cmp	r3, #6
 801012c:	d005      	beq.n	801013a <ip4_input+0x1c2>
 801012e:	e00e      	b.n	801014e <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8010130:	6839      	ldr	r1, [r7, #0]
 8010132:	6878      	ldr	r0, [r7, #4]
 8010134:	f7fe fc68 	bl	800ea08 <udp_input>
        break;
 8010138:	e026      	b.n	8010188 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801013a:	6839      	ldr	r1, [r7, #0]
 801013c:	6878      	ldr	r0, [r7, #4]
 801013e:	f7fa f88d 	bl	800a25c <tcp_input>
        break;
 8010142:	e021      	b.n	8010188 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8010144:	6839      	ldr	r1, [r7, #0]
 8010146:	6878      	ldr	r0, [r7, #4]
 8010148:	f7ff fcee 	bl	800fb28 <icmp_input>
        break;
 801014c:	e01c      	b.n	8010188 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801014e:	4b1a      	ldr	r3, [pc, #104]	; (80101b8 <ip4_input+0x240>)
 8010150:	695b      	ldr	r3, [r3, #20]
 8010152:	6939      	ldr	r1, [r7, #16]
 8010154:	4618      	mov	r0, r3
 8010156:	f000 f90b 	bl	8010370 <ip4_addr_isbroadcast_u32>
 801015a:	4603      	mov	r3, r0
 801015c:	2b00      	cmp	r3, #0
 801015e:	d10f      	bne.n	8010180 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8010160:	4b15      	ldr	r3, [pc, #84]	; (80101b8 <ip4_input+0x240>)
 8010162:	695b      	ldr	r3, [r3, #20]
 8010164:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8010168:	2be0      	cmp	r3, #224	; 0xe0
 801016a:	d009      	beq.n	8010180 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801016c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8010170:	4619      	mov	r1, r3
 8010172:	6878      	ldr	r0, [r7, #4]
 8010174:	f7f7 ff91 	bl	800809a <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8010178:	2102      	movs	r1, #2
 801017a:	6878      	ldr	r0, [r7, #4]
 801017c:	f7ff fdd8 	bl	800fd30 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8010180:	6878      	ldr	r0, [r7, #4]
 8010182:	f7f7 ff9d 	bl	80080c0 <pbuf_free>
        break;
 8010186:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8010188:	4b0b      	ldr	r3, [pc, #44]	; (80101b8 <ip4_input+0x240>)
 801018a:	2200      	movs	r2, #0
 801018c:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801018e:	4b0a      	ldr	r3, [pc, #40]	; (80101b8 <ip4_input+0x240>)
 8010190:	2200      	movs	r2, #0
 8010192:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8010194:	4b08      	ldr	r3, [pc, #32]	; (80101b8 <ip4_input+0x240>)
 8010196:	2200      	movs	r2, #0
 8010198:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801019a:	4b07      	ldr	r3, [pc, #28]	; (80101b8 <ip4_input+0x240>)
 801019c:	2200      	movs	r2, #0
 801019e:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80101a0:	4b05      	ldr	r3, [pc, #20]	; (80101b8 <ip4_input+0x240>)
 80101a2:	2200      	movs	r2, #0
 80101a4:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80101a6:	4b04      	ldr	r3, [pc, #16]	; (80101b8 <ip4_input+0x240>)
 80101a8:	2200      	movs	r2, #0
 80101aa:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80101ac:	2300      	movs	r3, #0
}
 80101ae:	4618      	mov	r0, r3
 80101b0:	3718      	adds	r7, #24
 80101b2:	46bd      	mov	sp, r7
 80101b4:	bd80      	pop	{r7, pc}
 80101b6:	bf00      	nop
 80101b8:	20003ddc 	.word	0x20003ddc
 80101bc:	2000d3d0 	.word	0x2000d3d0

080101c0 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80101c0:	b580      	push	{r7, lr}
 80101c2:	b08a      	sub	sp, #40	; 0x28
 80101c4:	af04      	add	r7, sp, #16
 80101c6:	60f8      	str	r0, [r7, #12]
 80101c8:	60b9      	str	r1, [r7, #8]
 80101ca:	607a      	str	r2, [r7, #4]
 80101cc:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80101ce:	68bb      	ldr	r3, [r7, #8]
 80101d0:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	2b00      	cmp	r3, #0
 80101d6:	d009      	beq.n	80101ec <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80101d8:	68bb      	ldr	r3, [r7, #8]
 80101da:	2b00      	cmp	r3, #0
 80101dc:	d003      	beq.n	80101e6 <ip4_output_if+0x26>
 80101de:	68bb      	ldr	r3, [r7, #8]
 80101e0:	681b      	ldr	r3, [r3, #0]
 80101e2:	2b00      	cmp	r3, #0
 80101e4:	d102      	bne.n	80101ec <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80101e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101e8:	3304      	adds	r3, #4
 80101ea:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80101ec:	78fa      	ldrb	r2, [r7, #3]
 80101ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101f0:	9302      	str	r3, [sp, #8]
 80101f2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80101f6:	9301      	str	r3, [sp, #4]
 80101f8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80101fc:	9300      	str	r3, [sp, #0]
 80101fe:	4613      	mov	r3, r2
 8010200:	687a      	ldr	r2, [r7, #4]
 8010202:	6979      	ldr	r1, [r7, #20]
 8010204:	68f8      	ldr	r0, [r7, #12]
 8010206:	f000 f805 	bl	8010214 <ip4_output_if_src>
 801020a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801020c:	4618      	mov	r0, r3
 801020e:	3718      	adds	r7, #24
 8010210:	46bd      	mov	sp, r7
 8010212:	bd80      	pop	{r7, pc}

08010214 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8010214:	b580      	push	{r7, lr}
 8010216:	b088      	sub	sp, #32
 8010218:	af00      	add	r7, sp, #0
 801021a:	60f8      	str	r0, [r7, #12]
 801021c:	60b9      	str	r1, [r7, #8]
 801021e:	607a      	str	r2, [r7, #4]
 8010220:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8010222:	68fb      	ldr	r3, [r7, #12]
 8010224:	7b9b      	ldrb	r3, [r3, #14]
 8010226:	2b01      	cmp	r3, #1
 8010228:	d006      	beq.n	8010238 <ip4_output_if_src+0x24>
 801022a:	4b4b      	ldr	r3, [pc, #300]	; (8010358 <ip4_output_if_src+0x144>)
 801022c:	f44f 7255 	mov.w	r2, #852	; 0x354
 8010230:	494a      	ldr	r1, [pc, #296]	; (801035c <ip4_output_if_src+0x148>)
 8010232:	484b      	ldr	r0, [pc, #300]	; (8010360 <ip4_output_if_src+0x14c>)
 8010234:	f001 f90c 	bl	8011450 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	2b00      	cmp	r3, #0
 801023c:	d060      	beq.n	8010300 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801023e:	2314      	movs	r3, #20
 8010240:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8010242:	2114      	movs	r1, #20
 8010244:	68f8      	ldr	r0, [r7, #12]
 8010246:	f7f7 fea5 	bl	8007f94 <pbuf_add_header>
 801024a:	4603      	mov	r3, r0
 801024c:	2b00      	cmp	r3, #0
 801024e:	d002      	beq.n	8010256 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8010250:	f06f 0301 	mvn.w	r3, #1
 8010254:	e07c      	b.n	8010350 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8010256:	68fb      	ldr	r3, [r7, #12]
 8010258:	685b      	ldr	r3, [r3, #4]
 801025a:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801025c:	68fb      	ldr	r3, [r7, #12]
 801025e:	895b      	ldrh	r3, [r3, #10]
 8010260:	2b13      	cmp	r3, #19
 8010262:	d806      	bhi.n	8010272 <ip4_output_if_src+0x5e>
 8010264:	4b3c      	ldr	r3, [pc, #240]	; (8010358 <ip4_output_if_src+0x144>)
 8010266:	f44f 7262 	mov.w	r2, #904	; 0x388
 801026a:	493e      	ldr	r1, [pc, #248]	; (8010364 <ip4_output_if_src+0x150>)
 801026c:	483c      	ldr	r0, [pc, #240]	; (8010360 <ip4_output_if_src+0x14c>)
 801026e:	f001 f8ef 	bl	8011450 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8010272:	69fb      	ldr	r3, [r7, #28]
 8010274:	78fa      	ldrb	r2, [r7, #3]
 8010276:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8010278:	69fb      	ldr	r3, [r7, #28]
 801027a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801027e:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	681a      	ldr	r2, [r3, #0]
 8010284:	69fb      	ldr	r3, [r7, #28]
 8010286:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8010288:	8b7b      	ldrh	r3, [r7, #26]
 801028a:	089b      	lsrs	r3, r3, #2
 801028c:	b29b      	uxth	r3, r3
 801028e:	b2db      	uxtb	r3, r3
 8010290:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010294:	b2da      	uxtb	r2, r3
 8010296:	69fb      	ldr	r3, [r7, #28]
 8010298:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801029a:	69fb      	ldr	r3, [r7, #28]
 801029c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80102a0:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80102a2:	68fb      	ldr	r3, [r7, #12]
 80102a4:	891b      	ldrh	r3, [r3, #8]
 80102a6:	4618      	mov	r0, r3
 80102a8:	f7f6 fb78 	bl	800699c <lwip_htons>
 80102ac:	4603      	mov	r3, r0
 80102ae:	461a      	mov	r2, r3
 80102b0:	69fb      	ldr	r3, [r7, #28]
 80102b2:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80102b4:	69fb      	ldr	r3, [r7, #28]
 80102b6:	2200      	movs	r2, #0
 80102b8:	719a      	strb	r2, [r3, #6]
 80102ba:	2200      	movs	r2, #0
 80102bc:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80102be:	4b2a      	ldr	r3, [pc, #168]	; (8010368 <ip4_output_if_src+0x154>)
 80102c0:	881b      	ldrh	r3, [r3, #0]
 80102c2:	4618      	mov	r0, r3
 80102c4:	f7f6 fb6a 	bl	800699c <lwip_htons>
 80102c8:	4603      	mov	r3, r0
 80102ca:	461a      	mov	r2, r3
 80102cc:	69fb      	ldr	r3, [r7, #28]
 80102ce:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80102d0:	4b25      	ldr	r3, [pc, #148]	; (8010368 <ip4_output_if_src+0x154>)
 80102d2:	881b      	ldrh	r3, [r3, #0]
 80102d4:	3301      	adds	r3, #1
 80102d6:	b29a      	uxth	r2, r3
 80102d8:	4b23      	ldr	r3, [pc, #140]	; (8010368 <ip4_output_if_src+0x154>)
 80102da:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80102dc:	68bb      	ldr	r3, [r7, #8]
 80102de:	2b00      	cmp	r3, #0
 80102e0:	d104      	bne.n	80102ec <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80102e2:	4b22      	ldr	r3, [pc, #136]	; (801036c <ip4_output_if_src+0x158>)
 80102e4:	681a      	ldr	r2, [r3, #0]
 80102e6:	69fb      	ldr	r3, [r7, #28]
 80102e8:	60da      	str	r2, [r3, #12]
 80102ea:	e003      	b.n	80102f4 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80102ec:	68bb      	ldr	r3, [r7, #8]
 80102ee:	681a      	ldr	r2, [r3, #0]
 80102f0:	69fb      	ldr	r3, [r7, #28]
 80102f2:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80102f4:	69fb      	ldr	r3, [r7, #28]
 80102f6:	2200      	movs	r2, #0
 80102f8:	729a      	strb	r2, [r3, #10]
 80102fa:	2200      	movs	r2, #0
 80102fc:	72da      	strb	r2, [r3, #11]
 80102fe:	e00f      	b.n	8010320 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8010300:	68fb      	ldr	r3, [r7, #12]
 8010302:	895b      	ldrh	r3, [r3, #10]
 8010304:	2b13      	cmp	r3, #19
 8010306:	d802      	bhi.n	801030e <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8010308:	f06f 0301 	mvn.w	r3, #1
 801030c:	e020      	b.n	8010350 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801030e:	68fb      	ldr	r3, [r7, #12]
 8010310:	685b      	ldr	r3, [r3, #4]
 8010312:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8010314:	69fb      	ldr	r3, [r7, #28]
 8010316:	691b      	ldr	r3, [r3, #16]
 8010318:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801031a:	f107 0314 	add.w	r3, r7, #20
 801031e:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8010320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010322:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8010324:	2b00      	cmp	r3, #0
 8010326:	d00c      	beq.n	8010342 <ip4_output_if_src+0x12e>
 8010328:	68fb      	ldr	r3, [r7, #12]
 801032a:	891a      	ldrh	r2, [r3, #8]
 801032c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801032e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8010330:	429a      	cmp	r2, r3
 8010332:	d906      	bls.n	8010342 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8010334:	687a      	ldr	r2, [r7, #4]
 8010336:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010338:	68f8      	ldr	r0, [r7, #12]
 801033a:	f000 fd4d 	bl	8010dd8 <ip4_frag>
 801033e:	4603      	mov	r3, r0
 8010340:	e006      	b.n	8010350 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8010342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010344:	695b      	ldr	r3, [r3, #20]
 8010346:	687a      	ldr	r2, [r7, #4]
 8010348:	68f9      	ldr	r1, [r7, #12]
 801034a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801034c:	4798      	blx	r3
 801034e:	4603      	mov	r3, r0
}
 8010350:	4618      	mov	r0, r3
 8010352:	3720      	adds	r7, #32
 8010354:	46bd      	mov	sp, r7
 8010356:	bd80      	pop	{r7, pc}
 8010358:	08015bec 	.word	0x08015bec
 801035c:	08015c20 	.word	0x08015c20
 8010360:	08015c2c 	.word	0x08015c2c
 8010364:	08015c54 	.word	0x08015c54
 8010368:	200006a6 	.word	0x200006a6
 801036c:	08017db0 	.word	0x08017db0

08010370 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8010370:	b480      	push	{r7}
 8010372:	b085      	sub	sp, #20
 8010374:	af00      	add	r7, sp, #0
 8010376:	6078      	str	r0, [r7, #4]
 8010378:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801037a:	687b      	ldr	r3, [r7, #4]
 801037c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010384:	d002      	beq.n	801038c <ip4_addr_isbroadcast_u32+0x1c>
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	2b00      	cmp	r3, #0
 801038a:	d101      	bne.n	8010390 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801038c:	2301      	movs	r3, #1
 801038e:	e02a      	b.n	80103e6 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8010390:	683b      	ldr	r3, [r7, #0]
 8010392:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010396:	f003 0302 	and.w	r3, r3, #2
 801039a:	2b00      	cmp	r3, #0
 801039c:	d101      	bne.n	80103a2 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801039e:	2300      	movs	r3, #0
 80103a0:	e021      	b.n	80103e6 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80103a2:	683b      	ldr	r3, [r7, #0]
 80103a4:	3304      	adds	r3, #4
 80103a6:	681b      	ldr	r3, [r3, #0]
 80103a8:	687a      	ldr	r2, [r7, #4]
 80103aa:	429a      	cmp	r2, r3
 80103ac:	d101      	bne.n	80103b2 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80103ae:	2300      	movs	r3, #0
 80103b0:	e019      	b.n	80103e6 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80103b2:	68fa      	ldr	r2, [r7, #12]
 80103b4:	683b      	ldr	r3, [r7, #0]
 80103b6:	3304      	adds	r3, #4
 80103b8:	681b      	ldr	r3, [r3, #0]
 80103ba:	405a      	eors	r2, r3
 80103bc:	683b      	ldr	r3, [r7, #0]
 80103be:	3308      	adds	r3, #8
 80103c0:	681b      	ldr	r3, [r3, #0]
 80103c2:	4013      	ands	r3, r2
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	d10d      	bne.n	80103e4 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80103c8:	683b      	ldr	r3, [r7, #0]
 80103ca:	3308      	adds	r3, #8
 80103cc:	681b      	ldr	r3, [r3, #0]
 80103ce:	43da      	mvns	r2, r3
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80103d4:	683b      	ldr	r3, [r7, #0]
 80103d6:	3308      	adds	r3, #8
 80103d8:	681b      	ldr	r3, [r3, #0]
 80103da:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80103dc:	429a      	cmp	r2, r3
 80103de:	d101      	bne.n	80103e4 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80103e0:	2301      	movs	r3, #1
 80103e2:	e000      	b.n	80103e6 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80103e4:	2300      	movs	r3, #0
  }
}
 80103e6:	4618      	mov	r0, r3
 80103e8:	3714      	adds	r7, #20
 80103ea:	46bd      	mov	sp, r7
 80103ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103f0:	4770      	bx	lr
	...

080103f4 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80103f4:	b580      	push	{r7, lr}
 80103f6:	b084      	sub	sp, #16
 80103f8:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80103fa:	2300      	movs	r3, #0
 80103fc:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80103fe:	4b12      	ldr	r3, [pc, #72]	; (8010448 <ip_reass_tmr+0x54>)
 8010400:	681b      	ldr	r3, [r3, #0]
 8010402:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8010404:	e018      	b.n	8010438 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8010406:	68fb      	ldr	r3, [r7, #12]
 8010408:	7fdb      	ldrb	r3, [r3, #31]
 801040a:	2b00      	cmp	r3, #0
 801040c:	d00b      	beq.n	8010426 <ip_reass_tmr+0x32>
      r->timer--;
 801040e:	68fb      	ldr	r3, [r7, #12]
 8010410:	7fdb      	ldrb	r3, [r3, #31]
 8010412:	3b01      	subs	r3, #1
 8010414:	b2da      	uxtb	r2, r3
 8010416:	68fb      	ldr	r3, [r7, #12]
 8010418:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801041a:	68fb      	ldr	r3, [r7, #12]
 801041c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801041e:	68fb      	ldr	r3, [r7, #12]
 8010420:	681b      	ldr	r3, [r3, #0]
 8010422:	60fb      	str	r3, [r7, #12]
 8010424:	e008      	b.n	8010438 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8010426:	68fb      	ldr	r3, [r7, #12]
 8010428:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801042a:	68fb      	ldr	r3, [r7, #12]
 801042c:	681b      	ldr	r3, [r3, #0]
 801042e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8010430:	68b9      	ldr	r1, [r7, #8]
 8010432:	6878      	ldr	r0, [r7, #4]
 8010434:	f000 f80a 	bl	801044c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8010438:	68fb      	ldr	r3, [r7, #12]
 801043a:	2b00      	cmp	r3, #0
 801043c:	d1e3      	bne.n	8010406 <ip_reass_tmr+0x12>
    }
  }
}
 801043e:	bf00      	nop
 8010440:	bf00      	nop
 8010442:	3710      	adds	r7, #16
 8010444:	46bd      	mov	sp, r7
 8010446:	bd80      	pop	{r7, pc}
 8010448:	200006a8 	.word	0x200006a8

0801044c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801044c:	b580      	push	{r7, lr}
 801044e:	b088      	sub	sp, #32
 8010450:	af00      	add	r7, sp, #0
 8010452:	6078      	str	r0, [r7, #4]
 8010454:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8010456:	2300      	movs	r3, #0
 8010458:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801045a:	683a      	ldr	r2, [r7, #0]
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	429a      	cmp	r2, r3
 8010460:	d105      	bne.n	801046e <ip_reass_free_complete_datagram+0x22>
 8010462:	4b45      	ldr	r3, [pc, #276]	; (8010578 <ip_reass_free_complete_datagram+0x12c>)
 8010464:	22ab      	movs	r2, #171	; 0xab
 8010466:	4945      	ldr	r1, [pc, #276]	; (801057c <ip_reass_free_complete_datagram+0x130>)
 8010468:	4845      	ldr	r0, [pc, #276]	; (8010580 <ip_reass_free_complete_datagram+0x134>)
 801046a:	f000 fff1 	bl	8011450 <iprintf>
  if (prev != NULL) {
 801046e:	683b      	ldr	r3, [r7, #0]
 8010470:	2b00      	cmp	r3, #0
 8010472:	d00a      	beq.n	801048a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8010474:	683b      	ldr	r3, [r7, #0]
 8010476:	681b      	ldr	r3, [r3, #0]
 8010478:	687a      	ldr	r2, [r7, #4]
 801047a:	429a      	cmp	r2, r3
 801047c:	d005      	beq.n	801048a <ip_reass_free_complete_datagram+0x3e>
 801047e:	4b3e      	ldr	r3, [pc, #248]	; (8010578 <ip_reass_free_complete_datagram+0x12c>)
 8010480:	22ad      	movs	r2, #173	; 0xad
 8010482:	4940      	ldr	r1, [pc, #256]	; (8010584 <ip_reass_free_complete_datagram+0x138>)
 8010484:	483e      	ldr	r0, [pc, #248]	; (8010580 <ip_reass_free_complete_datagram+0x134>)
 8010486:	f000 ffe3 	bl	8011450 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	685b      	ldr	r3, [r3, #4]
 801048e:	685b      	ldr	r3, [r3, #4]
 8010490:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8010492:	697b      	ldr	r3, [r7, #20]
 8010494:	889b      	ldrh	r3, [r3, #4]
 8010496:	b29b      	uxth	r3, r3
 8010498:	2b00      	cmp	r3, #0
 801049a:	d12a      	bne.n	80104f2 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	685b      	ldr	r3, [r3, #4]
 80104a0:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 80104a2:	697b      	ldr	r3, [r7, #20]
 80104a4:	681a      	ldr	r2, [r3, #0]
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80104aa:	69bb      	ldr	r3, [r7, #24]
 80104ac:	6858      	ldr	r0, [r3, #4]
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	3308      	adds	r3, #8
 80104b2:	2214      	movs	r2, #20
 80104b4:	4619      	mov	r1, r3
 80104b6:	f000 fef1 	bl	801129c <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80104ba:	2101      	movs	r1, #1
 80104bc:	69b8      	ldr	r0, [r7, #24]
 80104be:	f7ff fc47 	bl	800fd50 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80104c2:	69b8      	ldr	r0, [r7, #24]
 80104c4:	f7f7 fe84 	bl	80081d0 <pbuf_clen>
 80104c8:	4603      	mov	r3, r0
 80104ca:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80104cc:	8bfa      	ldrh	r2, [r7, #30]
 80104ce:	8a7b      	ldrh	r3, [r7, #18]
 80104d0:	4413      	add	r3, r2
 80104d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80104d6:	db05      	blt.n	80104e4 <ip_reass_free_complete_datagram+0x98>
 80104d8:	4b27      	ldr	r3, [pc, #156]	; (8010578 <ip_reass_free_complete_datagram+0x12c>)
 80104da:	22bc      	movs	r2, #188	; 0xbc
 80104dc:	492a      	ldr	r1, [pc, #168]	; (8010588 <ip_reass_free_complete_datagram+0x13c>)
 80104de:	4828      	ldr	r0, [pc, #160]	; (8010580 <ip_reass_free_complete_datagram+0x134>)
 80104e0:	f000 ffb6 	bl	8011450 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80104e4:	8bfa      	ldrh	r2, [r7, #30]
 80104e6:	8a7b      	ldrh	r3, [r7, #18]
 80104e8:	4413      	add	r3, r2
 80104ea:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80104ec:	69b8      	ldr	r0, [r7, #24]
 80104ee:	f7f7 fde7 	bl	80080c0 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	685b      	ldr	r3, [r3, #4]
 80104f6:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80104f8:	e01f      	b.n	801053a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80104fa:	69bb      	ldr	r3, [r7, #24]
 80104fc:	685b      	ldr	r3, [r3, #4]
 80104fe:	617b      	str	r3, [r7, #20]
    pcur = p;
 8010500:	69bb      	ldr	r3, [r7, #24]
 8010502:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8010504:	697b      	ldr	r3, [r7, #20]
 8010506:	681b      	ldr	r3, [r3, #0]
 8010508:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801050a:	68f8      	ldr	r0, [r7, #12]
 801050c:	f7f7 fe60 	bl	80081d0 <pbuf_clen>
 8010510:	4603      	mov	r3, r0
 8010512:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8010514:	8bfa      	ldrh	r2, [r7, #30]
 8010516:	8a7b      	ldrh	r3, [r7, #18]
 8010518:	4413      	add	r3, r2
 801051a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801051e:	db05      	blt.n	801052c <ip_reass_free_complete_datagram+0xe0>
 8010520:	4b15      	ldr	r3, [pc, #84]	; (8010578 <ip_reass_free_complete_datagram+0x12c>)
 8010522:	22cc      	movs	r2, #204	; 0xcc
 8010524:	4918      	ldr	r1, [pc, #96]	; (8010588 <ip_reass_free_complete_datagram+0x13c>)
 8010526:	4816      	ldr	r0, [pc, #88]	; (8010580 <ip_reass_free_complete_datagram+0x134>)
 8010528:	f000 ff92 	bl	8011450 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801052c:	8bfa      	ldrh	r2, [r7, #30]
 801052e:	8a7b      	ldrh	r3, [r7, #18]
 8010530:	4413      	add	r3, r2
 8010532:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8010534:	68f8      	ldr	r0, [r7, #12]
 8010536:	f7f7 fdc3 	bl	80080c0 <pbuf_free>
  while (p != NULL) {
 801053a:	69bb      	ldr	r3, [r7, #24]
 801053c:	2b00      	cmp	r3, #0
 801053e:	d1dc      	bne.n	80104fa <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8010540:	6839      	ldr	r1, [r7, #0]
 8010542:	6878      	ldr	r0, [r7, #4]
 8010544:	f000 f8c2 	bl	80106cc <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8010548:	4b10      	ldr	r3, [pc, #64]	; (801058c <ip_reass_free_complete_datagram+0x140>)
 801054a:	881b      	ldrh	r3, [r3, #0]
 801054c:	8bfa      	ldrh	r2, [r7, #30]
 801054e:	429a      	cmp	r2, r3
 8010550:	d905      	bls.n	801055e <ip_reass_free_complete_datagram+0x112>
 8010552:	4b09      	ldr	r3, [pc, #36]	; (8010578 <ip_reass_free_complete_datagram+0x12c>)
 8010554:	22d2      	movs	r2, #210	; 0xd2
 8010556:	490e      	ldr	r1, [pc, #56]	; (8010590 <ip_reass_free_complete_datagram+0x144>)
 8010558:	4809      	ldr	r0, [pc, #36]	; (8010580 <ip_reass_free_complete_datagram+0x134>)
 801055a:	f000 ff79 	bl	8011450 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801055e:	4b0b      	ldr	r3, [pc, #44]	; (801058c <ip_reass_free_complete_datagram+0x140>)
 8010560:	881a      	ldrh	r2, [r3, #0]
 8010562:	8bfb      	ldrh	r3, [r7, #30]
 8010564:	1ad3      	subs	r3, r2, r3
 8010566:	b29a      	uxth	r2, r3
 8010568:	4b08      	ldr	r3, [pc, #32]	; (801058c <ip_reass_free_complete_datagram+0x140>)
 801056a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801056c:	8bfb      	ldrh	r3, [r7, #30]
}
 801056e:	4618      	mov	r0, r3
 8010570:	3720      	adds	r7, #32
 8010572:	46bd      	mov	sp, r7
 8010574:	bd80      	pop	{r7, pc}
 8010576:	bf00      	nop
 8010578:	08015c84 	.word	0x08015c84
 801057c:	08015cc0 	.word	0x08015cc0
 8010580:	08015ccc 	.word	0x08015ccc
 8010584:	08015cf4 	.word	0x08015cf4
 8010588:	08015d08 	.word	0x08015d08
 801058c:	200006ac 	.word	0x200006ac
 8010590:	08015d28 	.word	0x08015d28

08010594 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8010594:	b580      	push	{r7, lr}
 8010596:	b08a      	sub	sp, #40	; 0x28
 8010598:	af00      	add	r7, sp, #0
 801059a:	6078      	str	r0, [r7, #4]
 801059c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801059e:	2300      	movs	r3, #0
 80105a0:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80105a2:	2300      	movs	r3, #0
 80105a4:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80105a6:	2300      	movs	r3, #0
 80105a8:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 80105aa:	2300      	movs	r3, #0
 80105ac:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 80105ae:	2300      	movs	r3, #0
 80105b0:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 80105b2:	4b28      	ldr	r3, [pc, #160]	; (8010654 <ip_reass_remove_oldest_datagram+0xc0>)
 80105b4:	681b      	ldr	r3, [r3, #0]
 80105b6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80105b8:	e030      	b.n	801061c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80105ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105bc:	695a      	ldr	r2, [r3, #20]
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	68db      	ldr	r3, [r3, #12]
 80105c2:	429a      	cmp	r2, r3
 80105c4:	d10c      	bne.n	80105e0 <ip_reass_remove_oldest_datagram+0x4c>
 80105c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105c8:	699a      	ldr	r2, [r3, #24]
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	691b      	ldr	r3, [r3, #16]
 80105ce:	429a      	cmp	r2, r3
 80105d0:	d106      	bne.n	80105e0 <ip_reass_remove_oldest_datagram+0x4c>
 80105d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105d4:	899a      	ldrh	r2, [r3, #12]
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	889b      	ldrh	r3, [r3, #4]
 80105da:	b29b      	uxth	r3, r3
 80105dc:	429a      	cmp	r2, r3
 80105de:	d014      	beq.n	801060a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80105e0:	693b      	ldr	r3, [r7, #16]
 80105e2:	3301      	adds	r3, #1
 80105e4:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80105e6:	6a3b      	ldr	r3, [r7, #32]
 80105e8:	2b00      	cmp	r3, #0
 80105ea:	d104      	bne.n	80105f6 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80105ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105ee:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80105f0:	69fb      	ldr	r3, [r7, #28]
 80105f2:	61bb      	str	r3, [r7, #24]
 80105f4:	e009      	b.n	801060a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80105f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105f8:	7fda      	ldrb	r2, [r3, #31]
 80105fa:	6a3b      	ldr	r3, [r7, #32]
 80105fc:	7fdb      	ldrb	r3, [r3, #31]
 80105fe:	429a      	cmp	r2, r3
 8010600:	d803      	bhi.n	801060a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8010602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010604:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8010606:	69fb      	ldr	r3, [r7, #28]
 8010608:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801060a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801060c:	681b      	ldr	r3, [r3, #0]
 801060e:	2b00      	cmp	r3, #0
 8010610:	d001      	beq.n	8010616 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8010612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010614:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8010616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010618:	681b      	ldr	r3, [r3, #0]
 801061a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801061c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801061e:	2b00      	cmp	r3, #0
 8010620:	d1cb      	bne.n	80105ba <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8010622:	6a3b      	ldr	r3, [r7, #32]
 8010624:	2b00      	cmp	r3, #0
 8010626:	d008      	beq.n	801063a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8010628:	69b9      	ldr	r1, [r7, #24]
 801062a:	6a38      	ldr	r0, [r7, #32]
 801062c:	f7ff ff0e 	bl	801044c <ip_reass_free_complete_datagram>
 8010630:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8010632:	697a      	ldr	r2, [r7, #20]
 8010634:	68fb      	ldr	r3, [r7, #12]
 8010636:	4413      	add	r3, r2
 8010638:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801063a:	697a      	ldr	r2, [r7, #20]
 801063c:	683b      	ldr	r3, [r7, #0]
 801063e:	429a      	cmp	r2, r3
 8010640:	da02      	bge.n	8010648 <ip_reass_remove_oldest_datagram+0xb4>
 8010642:	693b      	ldr	r3, [r7, #16]
 8010644:	2b01      	cmp	r3, #1
 8010646:	dcac      	bgt.n	80105a2 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8010648:	697b      	ldr	r3, [r7, #20]
}
 801064a:	4618      	mov	r0, r3
 801064c:	3728      	adds	r7, #40	; 0x28
 801064e:	46bd      	mov	sp, r7
 8010650:	bd80      	pop	{r7, pc}
 8010652:	bf00      	nop
 8010654:	200006a8 	.word	0x200006a8

08010658 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8010658:	b580      	push	{r7, lr}
 801065a:	b084      	sub	sp, #16
 801065c:	af00      	add	r7, sp, #0
 801065e:	6078      	str	r0, [r7, #4]
 8010660:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8010662:	2004      	movs	r0, #4
 8010664:	f7f6 fece 	bl	8007404 <memp_malloc>
 8010668:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801066a:	68fb      	ldr	r3, [r7, #12]
 801066c:	2b00      	cmp	r3, #0
 801066e:	d110      	bne.n	8010692 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8010670:	6839      	ldr	r1, [r7, #0]
 8010672:	6878      	ldr	r0, [r7, #4]
 8010674:	f7ff ff8e 	bl	8010594 <ip_reass_remove_oldest_datagram>
 8010678:	4602      	mov	r2, r0
 801067a:	683b      	ldr	r3, [r7, #0]
 801067c:	4293      	cmp	r3, r2
 801067e:	dc03      	bgt.n	8010688 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8010680:	2004      	movs	r0, #4
 8010682:	f7f6 febf 	bl	8007404 <memp_malloc>
 8010686:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8010688:	68fb      	ldr	r3, [r7, #12]
 801068a:	2b00      	cmp	r3, #0
 801068c:	d101      	bne.n	8010692 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801068e:	2300      	movs	r3, #0
 8010690:	e016      	b.n	80106c0 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8010692:	2220      	movs	r2, #32
 8010694:	2100      	movs	r1, #0
 8010696:	68f8      	ldr	r0, [r7, #12]
 8010698:	f000 fe28 	bl	80112ec <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801069c:	68fb      	ldr	r3, [r7, #12]
 801069e:	220f      	movs	r2, #15
 80106a0:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 80106a2:	4b09      	ldr	r3, [pc, #36]	; (80106c8 <ip_reass_enqueue_new_datagram+0x70>)
 80106a4:	681a      	ldr	r2, [r3, #0]
 80106a6:	68fb      	ldr	r3, [r7, #12]
 80106a8:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 80106aa:	4a07      	ldr	r2, [pc, #28]	; (80106c8 <ip_reass_enqueue_new_datagram+0x70>)
 80106ac:	68fb      	ldr	r3, [r7, #12]
 80106ae:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80106b0:	68fb      	ldr	r3, [r7, #12]
 80106b2:	3308      	adds	r3, #8
 80106b4:	2214      	movs	r2, #20
 80106b6:	6879      	ldr	r1, [r7, #4]
 80106b8:	4618      	mov	r0, r3
 80106ba:	f000 fdef 	bl	801129c <memcpy>
  return ipr;
 80106be:	68fb      	ldr	r3, [r7, #12]
}
 80106c0:	4618      	mov	r0, r3
 80106c2:	3710      	adds	r7, #16
 80106c4:	46bd      	mov	sp, r7
 80106c6:	bd80      	pop	{r7, pc}
 80106c8:	200006a8 	.word	0x200006a8

080106cc <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80106cc:	b580      	push	{r7, lr}
 80106ce:	b082      	sub	sp, #8
 80106d0:	af00      	add	r7, sp, #0
 80106d2:	6078      	str	r0, [r7, #4]
 80106d4:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80106d6:	4b10      	ldr	r3, [pc, #64]	; (8010718 <ip_reass_dequeue_datagram+0x4c>)
 80106d8:	681b      	ldr	r3, [r3, #0]
 80106da:	687a      	ldr	r2, [r7, #4]
 80106dc:	429a      	cmp	r2, r3
 80106de:	d104      	bne.n	80106ea <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	681b      	ldr	r3, [r3, #0]
 80106e4:	4a0c      	ldr	r2, [pc, #48]	; (8010718 <ip_reass_dequeue_datagram+0x4c>)
 80106e6:	6013      	str	r3, [r2, #0]
 80106e8:	e00d      	b.n	8010706 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80106ea:	683b      	ldr	r3, [r7, #0]
 80106ec:	2b00      	cmp	r3, #0
 80106ee:	d106      	bne.n	80106fe <ip_reass_dequeue_datagram+0x32>
 80106f0:	4b0a      	ldr	r3, [pc, #40]	; (801071c <ip_reass_dequeue_datagram+0x50>)
 80106f2:	f240 1245 	movw	r2, #325	; 0x145
 80106f6:	490a      	ldr	r1, [pc, #40]	; (8010720 <ip_reass_dequeue_datagram+0x54>)
 80106f8:	480a      	ldr	r0, [pc, #40]	; (8010724 <ip_reass_dequeue_datagram+0x58>)
 80106fa:	f000 fea9 	bl	8011450 <iprintf>
    prev->next = ipr->next;
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	681a      	ldr	r2, [r3, #0]
 8010702:	683b      	ldr	r3, [r7, #0]
 8010704:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8010706:	6879      	ldr	r1, [r7, #4]
 8010708:	2004      	movs	r0, #4
 801070a:	f7f6 fec7 	bl	800749c <memp_free>
}
 801070e:	bf00      	nop
 8010710:	3708      	adds	r7, #8
 8010712:	46bd      	mov	sp, r7
 8010714:	bd80      	pop	{r7, pc}
 8010716:	bf00      	nop
 8010718:	200006a8 	.word	0x200006a8
 801071c:	08015c84 	.word	0x08015c84
 8010720:	08015d4c 	.word	0x08015d4c
 8010724:	08015ccc 	.word	0x08015ccc

08010728 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8010728:	b580      	push	{r7, lr}
 801072a:	b08c      	sub	sp, #48	; 0x30
 801072c:	af00      	add	r7, sp, #0
 801072e:	60f8      	str	r0, [r7, #12]
 8010730:	60b9      	str	r1, [r7, #8]
 8010732:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8010734:	2300      	movs	r3, #0
 8010736:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8010738:	2301      	movs	r3, #1
 801073a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801073c:	68bb      	ldr	r3, [r7, #8]
 801073e:	685b      	ldr	r3, [r3, #4]
 8010740:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8010742:	69fb      	ldr	r3, [r7, #28]
 8010744:	885b      	ldrh	r3, [r3, #2]
 8010746:	b29b      	uxth	r3, r3
 8010748:	4618      	mov	r0, r3
 801074a:	f7f6 f927 	bl	800699c <lwip_htons>
 801074e:	4603      	mov	r3, r0
 8010750:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8010752:	69fb      	ldr	r3, [r7, #28]
 8010754:	781b      	ldrb	r3, [r3, #0]
 8010756:	f003 030f 	and.w	r3, r3, #15
 801075a:	b2db      	uxtb	r3, r3
 801075c:	009b      	lsls	r3, r3, #2
 801075e:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8010760:	7e7b      	ldrb	r3, [r7, #25]
 8010762:	b29b      	uxth	r3, r3
 8010764:	8b7a      	ldrh	r2, [r7, #26]
 8010766:	429a      	cmp	r2, r3
 8010768:	d202      	bcs.n	8010770 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801076a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801076e:	e135      	b.n	80109dc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8010770:	7e7b      	ldrb	r3, [r7, #25]
 8010772:	b29b      	uxth	r3, r3
 8010774:	8b7a      	ldrh	r2, [r7, #26]
 8010776:	1ad3      	subs	r3, r2, r3
 8010778:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801077a:	69fb      	ldr	r3, [r7, #28]
 801077c:	88db      	ldrh	r3, [r3, #6]
 801077e:	b29b      	uxth	r3, r3
 8010780:	4618      	mov	r0, r3
 8010782:	f7f6 f90b 	bl	800699c <lwip_htons>
 8010786:	4603      	mov	r3, r0
 8010788:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801078c:	b29b      	uxth	r3, r3
 801078e:	00db      	lsls	r3, r3, #3
 8010790:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8010792:	68bb      	ldr	r3, [r7, #8]
 8010794:	685b      	ldr	r3, [r3, #4]
 8010796:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8010798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801079a:	2200      	movs	r2, #0
 801079c:	701a      	strb	r2, [r3, #0]
 801079e:	2200      	movs	r2, #0
 80107a0:	705a      	strb	r2, [r3, #1]
 80107a2:	2200      	movs	r2, #0
 80107a4:	709a      	strb	r2, [r3, #2]
 80107a6:	2200      	movs	r2, #0
 80107a8:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80107aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107ac:	8afa      	ldrh	r2, [r7, #22]
 80107ae:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 80107b0:	8afa      	ldrh	r2, [r7, #22]
 80107b2:	8b7b      	ldrh	r3, [r7, #26]
 80107b4:	4413      	add	r3, r2
 80107b6:	b29a      	uxth	r2, r3
 80107b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107ba:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 80107bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107be:	88db      	ldrh	r3, [r3, #6]
 80107c0:	b29b      	uxth	r3, r3
 80107c2:	8afa      	ldrh	r2, [r7, #22]
 80107c4:	429a      	cmp	r2, r3
 80107c6:	d902      	bls.n	80107ce <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80107c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80107cc:	e106      	b.n	80109dc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80107ce:	68fb      	ldr	r3, [r7, #12]
 80107d0:	685b      	ldr	r3, [r3, #4]
 80107d2:	627b      	str	r3, [r7, #36]	; 0x24
 80107d4:	e068      	b.n	80108a8 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80107d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107d8:	685b      	ldr	r3, [r3, #4]
 80107da:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80107dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107de:	889b      	ldrh	r3, [r3, #4]
 80107e0:	b29a      	uxth	r2, r3
 80107e2:	693b      	ldr	r3, [r7, #16]
 80107e4:	889b      	ldrh	r3, [r3, #4]
 80107e6:	b29b      	uxth	r3, r3
 80107e8:	429a      	cmp	r2, r3
 80107ea:	d235      	bcs.n	8010858 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80107ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80107f0:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80107f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107f4:	2b00      	cmp	r3, #0
 80107f6:	d020      	beq.n	801083a <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80107f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107fa:	889b      	ldrh	r3, [r3, #4]
 80107fc:	b29a      	uxth	r2, r3
 80107fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010800:	88db      	ldrh	r3, [r3, #6]
 8010802:	b29b      	uxth	r3, r3
 8010804:	429a      	cmp	r2, r3
 8010806:	d307      	bcc.n	8010818 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8010808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801080a:	88db      	ldrh	r3, [r3, #6]
 801080c:	b29a      	uxth	r2, r3
 801080e:	693b      	ldr	r3, [r7, #16]
 8010810:	889b      	ldrh	r3, [r3, #4]
 8010812:	b29b      	uxth	r3, r3
 8010814:	429a      	cmp	r2, r3
 8010816:	d902      	bls.n	801081e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010818:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801081c:	e0de      	b.n	80109dc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801081e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010820:	68ba      	ldr	r2, [r7, #8]
 8010822:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8010824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010826:	88db      	ldrh	r3, [r3, #6]
 8010828:	b29a      	uxth	r2, r3
 801082a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801082c:	889b      	ldrh	r3, [r3, #4]
 801082e:	b29b      	uxth	r3, r3
 8010830:	429a      	cmp	r2, r3
 8010832:	d03d      	beq.n	80108b0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8010834:	2300      	movs	r3, #0
 8010836:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8010838:	e03a      	b.n	80108b0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801083a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801083c:	88db      	ldrh	r3, [r3, #6]
 801083e:	b29a      	uxth	r2, r3
 8010840:	693b      	ldr	r3, [r7, #16]
 8010842:	889b      	ldrh	r3, [r3, #4]
 8010844:	b29b      	uxth	r3, r3
 8010846:	429a      	cmp	r2, r3
 8010848:	d902      	bls.n	8010850 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801084a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801084e:	e0c5      	b.n	80109dc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8010850:	68fb      	ldr	r3, [r7, #12]
 8010852:	68ba      	ldr	r2, [r7, #8]
 8010854:	605a      	str	r2, [r3, #4]
      break;
 8010856:	e02b      	b.n	80108b0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8010858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801085a:	889b      	ldrh	r3, [r3, #4]
 801085c:	b29a      	uxth	r2, r3
 801085e:	693b      	ldr	r3, [r7, #16]
 8010860:	889b      	ldrh	r3, [r3, #4]
 8010862:	b29b      	uxth	r3, r3
 8010864:	429a      	cmp	r2, r3
 8010866:	d102      	bne.n	801086e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010868:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801086c:	e0b6      	b.n	80109dc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801086e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010870:	889b      	ldrh	r3, [r3, #4]
 8010872:	b29a      	uxth	r2, r3
 8010874:	693b      	ldr	r3, [r7, #16]
 8010876:	88db      	ldrh	r3, [r3, #6]
 8010878:	b29b      	uxth	r3, r3
 801087a:	429a      	cmp	r2, r3
 801087c:	d202      	bcs.n	8010884 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801087e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010882:	e0ab      	b.n	80109dc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8010884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010886:	2b00      	cmp	r3, #0
 8010888:	d009      	beq.n	801089e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801088a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801088c:	88db      	ldrh	r3, [r3, #6]
 801088e:	b29a      	uxth	r2, r3
 8010890:	693b      	ldr	r3, [r7, #16]
 8010892:	889b      	ldrh	r3, [r3, #4]
 8010894:	b29b      	uxth	r3, r3
 8010896:	429a      	cmp	r2, r3
 8010898:	d001      	beq.n	801089e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801089a:	2300      	movs	r3, #0
 801089c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801089e:	693b      	ldr	r3, [r7, #16]
 80108a0:	681b      	ldr	r3, [r3, #0]
 80108a2:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 80108a4:	693b      	ldr	r3, [r7, #16]
 80108a6:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 80108a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108aa:	2b00      	cmp	r3, #0
 80108ac:	d193      	bne.n	80107d6 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 80108ae:	e000      	b.n	80108b2 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 80108b0:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80108b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108b4:	2b00      	cmp	r3, #0
 80108b6:	d12d      	bne.n	8010914 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 80108b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108ba:	2b00      	cmp	r3, #0
 80108bc:	d01c      	beq.n	80108f8 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80108be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108c0:	88db      	ldrh	r3, [r3, #6]
 80108c2:	b29a      	uxth	r2, r3
 80108c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108c6:	889b      	ldrh	r3, [r3, #4]
 80108c8:	b29b      	uxth	r3, r3
 80108ca:	429a      	cmp	r2, r3
 80108cc:	d906      	bls.n	80108dc <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 80108ce:	4b45      	ldr	r3, [pc, #276]	; (80109e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80108d0:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 80108d4:	4944      	ldr	r1, [pc, #272]	; (80109e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80108d6:	4845      	ldr	r0, [pc, #276]	; (80109ec <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80108d8:	f000 fdba 	bl	8011450 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80108dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108de:	68ba      	ldr	r2, [r7, #8]
 80108e0:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80108e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108e4:	88db      	ldrh	r3, [r3, #6]
 80108e6:	b29a      	uxth	r2, r3
 80108e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108ea:	889b      	ldrh	r3, [r3, #4]
 80108ec:	b29b      	uxth	r3, r3
 80108ee:	429a      	cmp	r2, r3
 80108f0:	d010      	beq.n	8010914 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80108f2:	2300      	movs	r3, #0
 80108f4:	623b      	str	r3, [r7, #32]
 80108f6:	e00d      	b.n	8010914 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80108f8:	68fb      	ldr	r3, [r7, #12]
 80108fa:	685b      	ldr	r3, [r3, #4]
 80108fc:	2b00      	cmp	r3, #0
 80108fe:	d006      	beq.n	801090e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8010900:	4b38      	ldr	r3, [pc, #224]	; (80109e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010902:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8010906:	493a      	ldr	r1, [pc, #232]	; (80109f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8010908:	4838      	ldr	r0, [pc, #224]	; (80109ec <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801090a:	f000 fda1 	bl	8011450 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801090e:	68fb      	ldr	r3, [r7, #12]
 8010910:	68ba      	ldr	r2, [r7, #8]
 8010912:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	2b00      	cmp	r3, #0
 8010918:	d105      	bne.n	8010926 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801091a:	68fb      	ldr	r3, [r7, #12]
 801091c:	7f9b      	ldrb	r3, [r3, #30]
 801091e:	f003 0301 	and.w	r3, r3, #1
 8010922:	2b00      	cmp	r3, #0
 8010924:	d059      	beq.n	80109da <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8010926:	6a3b      	ldr	r3, [r7, #32]
 8010928:	2b00      	cmp	r3, #0
 801092a:	d04f      	beq.n	80109cc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801092c:	68fb      	ldr	r3, [r7, #12]
 801092e:	685b      	ldr	r3, [r3, #4]
 8010930:	2b00      	cmp	r3, #0
 8010932:	d006      	beq.n	8010942 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8010934:	68fb      	ldr	r3, [r7, #12]
 8010936:	685b      	ldr	r3, [r3, #4]
 8010938:	685b      	ldr	r3, [r3, #4]
 801093a:	889b      	ldrh	r3, [r3, #4]
 801093c:	b29b      	uxth	r3, r3
 801093e:	2b00      	cmp	r3, #0
 8010940:	d002      	beq.n	8010948 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8010942:	2300      	movs	r3, #0
 8010944:	623b      	str	r3, [r7, #32]
 8010946:	e041      	b.n	80109cc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8010948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801094a:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 801094c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801094e:	681b      	ldr	r3, [r3, #0]
 8010950:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8010952:	e012      	b.n	801097a <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8010954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010956:	685b      	ldr	r3, [r3, #4]
 8010958:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801095a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801095c:	88db      	ldrh	r3, [r3, #6]
 801095e:	b29a      	uxth	r2, r3
 8010960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010962:	889b      	ldrh	r3, [r3, #4]
 8010964:	b29b      	uxth	r3, r3
 8010966:	429a      	cmp	r2, r3
 8010968:	d002      	beq.n	8010970 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801096a:	2300      	movs	r3, #0
 801096c:	623b      	str	r3, [r7, #32]
            break;
 801096e:	e007      	b.n	8010980 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8010970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010972:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8010974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010976:	681b      	ldr	r3, [r3, #0]
 8010978:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801097a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801097c:	2b00      	cmp	r3, #0
 801097e:	d1e9      	bne.n	8010954 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8010980:	6a3b      	ldr	r3, [r7, #32]
 8010982:	2b00      	cmp	r3, #0
 8010984:	d022      	beq.n	80109cc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8010986:	68fb      	ldr	r3, [r7, #12]
 8010988:	685b      	ldr	r3, [r3, #4]
 801098a:	2b00      	cmp	r3, #0
 801098c:	d106      	bne.n	801099c <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801098e:	4b15      	ldr	r3, [pc, #84]	; (80109e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010990:	f240 12df 	movw	r2, #479	; 0x1df
 8010994:	4917      	ldr	r1, [pc, #92]	; (80109f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8010996:	4815      	ldr	r0, [pc, #84]	; (80109ec <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8010998:	f000 fd5a 	bl	8011450 <iprintf>
          LWIP_ASSERT("sanity check",
 801099c:	68fb      	ldr	r3, [r7, #12]
 801099e:	685b      	ldr	r3, [r3, #4]
 80109a0:	685b      	ldr	r3, [r3, #4]
 80109a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80109a4:	429a      	cmp	r2, r3
 80109a6:	d106      	bne.n	80109b6 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 80109a8:	4b0e      	ldr	r3, [pc, #56]	; (80109e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80109aa:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80109ae:	4911      	ldr	r1, [pc, #68]	; (80109f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80109b0:	480e      	ldr	r0, [pc, #56]	; (80109ec <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80109b2:	f000 fd4d 	bl	8011450 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80109b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109b8:	681b      	ldr	r3, [r3, #0]
 80109ba:	2b00      	cmp	r3, #0
 80109bc:	d006      	beq.n	80109cc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 80109be:	4b09      	ldr	r3, [pc, #36]	; (80109e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80109c0:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 80109c4:	490c      	ldr	r1, [pc, #48]	; (80109f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80109c6:	4809      	ldr	r0, [pc, #36]	; (80109ec <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80109c8:	f000 fd42 	bl	8011450 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80109cc:	6a3b      	ldr	r3, [r7, #32]
 80109ce:	2b00      	cmp	r3, #0
 80109d0:	bf14      	ite	ne
 80109d2:	2301      	movne	r3, #1
 80109d4:	2300      	moveq	r3, #0
 80109d6:	b2db      	uxtb	r3, r3
 80109d8:	e000      	b.n	80109dc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80109da:	2300      	movs	r3, #0
}
 80109dc:	4618      	mov	r0, r3
 80109de:	3730      	adds	r7, #48	; 0x30
 80109e0:	46bd      	mov	sp, r7
 80109e2:	bd80      	pop	{r7, pc}
 80109e4:	08015c84 	.word	0x08015c84
 80109e8:	08015d68 	.word	0x08015d68
 80109ec:	08015ccc 	.word	0x08015ccc
 80109f0:	08015d88 	.word	0x08015d88
 80109f4:	08015dc0 	.word	0x08015dc0
 80109f8:	08015dd0 	.word	0x08015dd0

080109fc <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80109fc:	b580      	push	{r7, lr}
 80109fe:	b08e      	sub	sp, #56	; 0x38
 8010a00:	af00      	add	r7, sp, #0
 8010a02:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	685b      	ldr	r3, [r3, #4]
 8010a08:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8010a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a0c:	781b      	ldrb	r3, [r3, #0]
 8010a0e:	f003 030f 	and.w	r3, r3, #15
 8010a12:	b2db      	uxtb	r3, r3
 8010a14:	009b      	lsls	r3, r3, #2
 8010a16:	b2db      	uxtb	r3, r3
 8010a18:	2b14      	cmp	r3, #20
 8010a1a:	f040 8167 	bne.w	8010cec <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8010a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a20:	88db      	ldrh	r3, [r3, #6]
 8010a22:	b29b      	uxth	r3, r3
 8010a24:	4618      	mov	r0, r3
 8010a26:	f7f5 ffb9 	bl	800699c <lwip_htons>
 8010a2a:	4603      	mov	r3, r0
 8010a2c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010a30:	b29b      	uxth	r3, r3
 8010a32:	00db      	lsls	r3, r3, #3
 8010a34:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8010a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a38:	885b      	ldrh	r3, [r3, #2]
 8010a3a:	b29b      	uxth	r3, r3
 8010a3c:	4618      	mov	r0, r3
 8010a3e:	f7f5 ffad 	bl	800699c <lwip_htons>
 8010a42:	4603      	mov	r3, r0
 8010a44:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8010a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a48:	781b      	ldrb	r3, [r3, #0]
 8010a4a:	f003 030f 	and.w	r3, r3, #15
 8010a4e:	b2db      	uxtb	r3, r3
 8010a50:	009b      	lsls	r3, r3, #2
 8010a52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8010a56:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8010a5a:	b29b      	uxth	r3, r3
 8010a5c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010a5e:	429a      	cmp	r2, r3
 8010a60:	f0c0 8146 	bcc.w	8010cf0 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8010a64:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8010a68:	b29b      	uxth	r3, r3
 8010a6a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010a6c:	1ad3      	subs	r3, r2, r3
 8010a6e:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8010a70:	6878      	ldr	r0, [r7, #4]
 8010a72:	f7f7 fbad 	bl	80081d0 <pbuf_clen>
 8010a76:	4603      	mov	r3, r0
 8010a78:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8010a7a:	4b9f      	ldr	r3, [pc, #636]	; (8010cf8 <ip4_reass+0x2fc>)
 8010a7c:	881b      	ldrh	r3, [r3, #0]
 8010a7e:	461a      	mov	r2, r3
 8010a80:	8c3b      	ldrh	r3, [r7, #32]
 8010a82:	4413      	add	r3, r2
 8010a84:	2b0a      	cmp	r3, #10
 8010a86:	dd10      	ble.n	8010aaa <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8010a88:	8c3b      	ldrh	r3, [r7, #32]
 8010a8a:	4619      	mov	r1, r3
 8010a8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010a8e:	f7ff fd81 	bl	8010594 <ip_reass_remove_oldest_datagram>
 8010a92:	4603      	mov	r3, r0
 8010a94:	2b00      	cmp	r3, #0
 8010a96:	f000 812d 	beq.w	8010cf4 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8010a9a:	4b97      	ldr	r3, [pc, #604]	; (8010cf8 <ip4_reass+0x2fc>)
 8010a9c:	881b      	ldrh	r3, [r3, #0]
 8010a9e:	461a      	mov	r2, r3
 8010aa0:	8c3b      	ldrh	r3, [r7, #32]
 8010aa2:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8010aa4:	2b0a      	cmp	r3, #10
 8010aa6:	f300 8125 	bgt.w	8010cf4 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8010aaa:	4b94      	ldr	r3, [pc, #592]	; (8010cfc <ip4_reass+0x300>)
 8010aac:	681b      	ldr	r3, [r3, #0]
 8010aae:	633b      	str	r3, [r7, #48]	; 0x30
 8010ab0:	e015      	b.n	8010ade <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8010ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ab4:	695a      	ldr	r2, [r3, #20]
 8010ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ab8:	68db      	ldr	r3, [r3, #12]
 8010aba:	429a      	cmp	r2, r3
 8010abc:	d10c      	bne.n	8010ad8 <ip4_reass+0xdc>
 8010abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ac0:	699a      	ldr	r2, [r3, #24]
 8010ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ac4:	691b      	ldr	r3, [r3, #16]
 8010ac6:	429a      	cmp	r2, r3
 8010ac8:	d106      	bne.n	8010ad8 <ip4_reass+0xdc>
 8010aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010acc:	899a      	ldrh	r2, [r3, #12]
 8010ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ad0:	889b      	ldrh	r3, [r3, #4]
 8010ad2:	b29b      	uxth	r3, r3
 8010ad4:	429a      	cmp	r2, r3
 8010ad6:	d006      	beq.n	8010ae6 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8010ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ada:	681b      	ldr	r3, [r3, #0]
 8010adc:	633b      	str	r3, [r7, #48]	; 0x30
 8010ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ae0:	2b00      	cmp	r3, #0
 8010ae2:	d1e6      	bne.n	8010ab2 <ip4_reass+0xb6>
 8010ae4:	e000      	b.n	8010ae8 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8010ae6:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8010ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010aea:	2b00      	cmp	r3, #0
 8010aec:	d109      	bne.n	8010b02 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8010aee:	8c3b      	ldrh	r3, [r7, #32]
 8010af0:	4619      	mov	r1, r3
 8010af2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010af4:	f7ff fdb0 	bl	8010658 <ip_reass_enqueue_new_datagram>
 8010af8:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8010afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010afc:	2b00      	cmp	r3, #0
 8010afe:	d11c      	bne.n	8010b3a <ip4_reass+0x13e>
      goto nullreturn;
 8010b00:	e109      	b.n	8010d16 <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8010b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b04:	88db      	ldrh	r3, [r3, #6]
 8010b06:	b29b      	uxth	r3, r3
 8010b08:	4618      	mov	r0, r3
 8010b0a:	f7f5 ff47 	bl	800699c <lwip_htons>
 8010b0e:	4603      	mov	r3, r0
 8010b10:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010b14:	2b00      	cmp	r3, #0
 8010b16:	d110      	bne.n	8010b3a <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8010b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b1a:	89db      	ldrh	r3, [r3, #14]
 8010b1c:	4618      	mov	r0, r3
 8010b1e:	f7f5 ff3d 	bl	800699c <lwip_htons>
 8010b22:	4603      	mov	r3, r0
 8010b24:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8010b28:	2b00      	cmp	r3, #0
 8010b2a:	d006      	beq.n	8010b3a <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8010b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b2e:	3308      	adds	r3, #8
 8010b30:	2214      	movs	r2, #20
 8010b32:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010b34:	4618      	mov	r0, r3
 8010b36:	f000 fbb1 	bl	801129c <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8010b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b3c:	88db      	ldrh	r3, [r3, #6]
 8010b3e:	b29b      	uxth	r3, r3
 8010b40:	f003 0320 	and.w	r3, r3, #32
 8010b44:	2b00      	cmp	r3, #0
 8010b46:	bf0c      	ite	eq
 8010b48:	2301      	moveq	r3, #1
 8010b4a:	2300      	movne	r3, #0
 8010b4c:	b2db      	uxtb	r3, r3
 8010b4e:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8010b50:	69fb      	ldr	r3, [r7, #28]
 8010b52:	2b00      	cmp	r3, #0
 8010b54:	d00e      	beq.n	8010b74 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8010b56:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8010b58:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010b5a:	4413      	add	r3, r2
 8010b5c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8010b5e:	8b7a      	ldrh	r2, [r7, #26]
 8010b60:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010b62:	429a      	cmp	r2, r3
 8010b64:	f0c0 80a0 	bcc.w	8010ca8 <ip4_reass+0x2ac>
 8010b68:	8b7b      	ldrh	r3, [r7, #26]
 8010b6a:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8010b6e:	4293      	cmp	r3, r2
 8010b70:	f200 809a 	bhi.w	8010ca8 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8010b74:	69fa      	ldr	r2, [r7, #28]
 8010b76:	6879      	ldr	r1, [r7, #4]
 8010b78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010b7a:	f7ff fdd5 	bl	8010728 <ip_reass_chain_frag_into_datagram_and_validate>
 8010b7e:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8010b80:	697b      	ldr	r3, [r7, #20]
 8010b82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010b86:	f000 8091 	beq.w	8010cac <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8010b8a:	4b5b      	ldr	r3, [pc, #364]	; (8010cf8 <ip4_reass+0x2fc>)
 8010b8c:	881a      	ldrh	r2, [r3, #0]
 8010b8e:	8c3b      	ldrh	r3, [r7, #32]
 8010b90:	4413      	add	r3, r2
 8010b92:	b29a      	uxth	r2, r3
 8010b94:	4b58      	ldr	r3, [pc, #352]	; (8010cf8 <ip4_reass+0x2fc>)
 8010b96:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8010b98:	69fb      	ldr	r3, [r7, #28]
 8010b9a:	2b00      	cmp	r3, #0
 8010b9c:	d00d      	beq.n	8010bba <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8010b9e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8010ba0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010ba2:	4413      	add	r3, r2
 8010ba4:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8010ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ba8:	8a7a      	ldrh	r2, [r7, #18]
 8010baa:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8010bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bae:	7f9b      	ldrb	r3, [r3, #30]
 8010bb0:	f043 0301 	orr.w	r3, r3, #1
 8010bb4:	b2da      	uxtb	r2, r3
 8010bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bb8:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8010bba:	697b      	ldr	r3, [r7, #20]
 8010bbc:	2b01      	cmp	r3, #1
 8010bbe:	d171      	bne.n	8010ca4 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8010bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bc2:	8b9b      	ldrh	r3, [r3, #28]
 8010bc4:	3314      	adds	r3, #20
 8010bc6:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8010bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bca:	685b      	ldr	r3, [r3, #4]
 8010bcc:	685b      	ldr	r3, [r3, #4]
 8010bce:	681b      	ldr	r3, [r3, #0]
 8010bd0:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8010bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bd4:	685b      	ldr	r3, [r3, #4]
 8010bd6:	685b      	ldr	r3, [r3, #4]
 8010bd8:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8010bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bdc:	3308      	adds	r3, #8
 8010bde:	2214      	movs	r2, #20
 8010be0:	4619      	mov	r1, r3
 8010be2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010be4:	f000 fb5a 	bl	801129c <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8010be8:	8a3b      	ldrh	r3, [r7, #16]
 8010bea:	4618      	mov	r0, r3
 8010bec:	f7f5 fed6 	bl	800699c <lwip_htons>
 8010bf0:	4603      	mov	r3, r0
 8010bf2:	461a      	mov	r2, r3
 8010bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bf6:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8010bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bfa:	2200      	movs	r2, #0
 8010bfc:	719a      	strb	r2, [r3, #6]
 8010bfe:	2200      	movs	r2, #0
 8010c00:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8010c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c04:	2200      	movs	r2, #0
 8010c06:	729a      	strb	r2, [r3, #10]
 8010c08:	2200      	movs	r2, #0
 8010c0a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8010c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c0e:	685b      	ldr	r3, [r3, #4]
 8010c10:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8010c12:	e00d      	b.n	8010c30 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8010c14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010c16:	685b      	ldr	r3, [r3, #4]
 8010c18:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8010c1a:	2114      	movs	r1, #20
 8010c1c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010c1e:	f7f7 f9c9 	bl	8007fb4 <pbuf_remove_header>
      pbuf_cat(p, r);
 8010c22:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010c24:	6878      	ldr	r0, [r7, #4]
 8010c26:	f7f7 fb0d 	bl	8008244 <pbuf_cat>
      r = iprh->next_pbuf;
 8010c2a:	68fb      	ldr	r3, [r7, #12]
 8010c2c:	681b      	ldr	r3, [r3, #0]
 8010c2e:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8010c30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010c32:	2b00      	cmp	r3, #0
 8010c34:	d1ee      	bne.n	8010c14 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8010c36:	4b31      	ldr	r3, [pc, #196]	; (8010cfc <ip4_reass+0x300>)
 8010c38:	681b      	ldr	r3, [r3, #0]
 8010c3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010c3c:	429a      	cmp	r2, r3
 8010c3e:	d102      	bne.n	8010c46 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8010c40:	2300      	movs	r3, #0
 8010c42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010c44:	e010      	b.n	8010c68 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8010c46:	4b2d      	ldr	r3, [pc, #180]	; (8010cfc <ip4_reass+0x300>)
 8010c48:	681b      	ldr	r3, [r3, #0]
 8010c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010c4c:	e007      	b.n	8010c5e <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8010c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c50:	681b      	ldr	r3, [r3, #0]
 8010c52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010c54:	429a      	cmp	r2, r3
 8010c56:	d006      	beq.n	8010c66 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8010c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c5a:	681b      	ldr	r3, [r3, #0]
 8010c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c60:	2b00      	cmp	r3, #0
 8010c62:	d1f4      	bne.n	8010c4e <ip4_reass+0x252>
 8010c64:	e000      	b.n	8010c68 <ip4_reass+0x26c>
          break;
 8010c66:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8010c68:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010c6a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010c6c:	f7ff fd2e 	bl	80106cc <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8010c70:	6878      	ldr	r0, [r7, #4]
 8010c72:	f7f7 faad 	bl	80081d0 <pbuf_clen>
 8010c76:	4603      	mov	r3, r0
 8010c78:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8010c7a:	4b1f      	ldr	r3, [pc, #124]	; (8010cf8 <ip4_reass+0x2fc>)
 8010c7c:	881b      	ldrh	r3, [r3, #0]
 8010c7e:	8c3a      	ldrh	r2, [r7, #32]
 8010c80:	429a      	cmp	r2, r3
 8010c82:	d906      	bls.n	8010c92 <ip4_reass+0x296>
 8010c84:	4b1e      	ldr	r3, [pc, #120]	; (8010d00 <ip4_reass+0x304>)
 8010c86:	f240 229b 	movw	r2, #667	; 0x29b
 8010c8a:	491e      	ldr	r1, [pc, #120]	; (8010d04 <ip4_reass+0x308>)
 8010c8c:	481e      	ldr	r0, [pc, #120]	; (8010d08 <ip4_reass+0x30c>)
 8010c8e:	f000 fbdf 	bl	8011450 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8010c92:	4b19      	ldr	r3, [pc, #100]	; (8010cf8 <ip4_reass+0x2fc>)
 8010c94:	881a      	ldrh	r2, [r3, #0]
 8010c96:	8c3b      	ldrh	r3, [r7, #32]
 8010c98:	1ad3      	subs	r3, r2, r3
 8010c9a:	b29a      	uxth	r2, r3
 8010c9c:	4b16      	ldr	r3, [pc, #88]	; (8010cf8 <ip4_reass+0x2fc>)
 8010c9e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	e03c      	b.n	8010d1e <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8010ca4:	2300      	movs	r3, #0
 8010ca6:	e03a      	b.n	8010d1e <ip4_reass+0x322>
      goto nullreturn_ipr;
 8010ca8:	bf00      	nop
 8010caa:	e000      	b.n	8010cae <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 8010cac:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8010cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cb0:	2b00      	cmp	r3, #0
 8010cb2:	d106      	bne.n	8010cc2 <ip4_reass+0x2c6>
 8010cb4:	4b12      	ldr	r3, [pc, #72]	; (8010d00 <ip4_reass+0x304>)
 8010cb6:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8010cba:	4914      	ldr	r1, [pc, #80]	; (8010d0c <ip4_reass+0x310>)
 8010cbc:	4812      	ldr	r0, [pc, #72]	; (8010d08 <ip4_reass+0x30c>)
 8010cbe:	f000 fbc7 	bl	8011450 <iprintf>
  if (ipr->p == NULL) {
 8010cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cc4:	685b      	ldr	r3, [r3, #4]
 8010cc6:	2b00      	cmp	r3, #0
 8010cc8:	d124      	bne.n	8010d14 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8010cca:	4b0c      	ldr	r3, [pc, #48]	; (8010cfc <ip4_reass+0x300>)
 8010ccc:	681b      	ldr	r3, [r3, #0]
 8010cce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010cd0:	429a      	cmp	r2, r3
 8010cd2:	d006      	beq.n	8010ce2 <ip4_reass+0x2e6>
 8010cd4:	4b0a      	ldr	r3, [pc, #40]	; (8010d00 <ip4_reass+0x304>)
 8010cd6:	f240 22ab 	movw	r2, #683	; 0x2ab
 8010cda:	490d      	ldr	r1, [pc, #52]	; (8010d10 <ip4_reass+0x314>)
 8010cdc:	480a      	ldr	r0, [pc, #40]	; (8010d08 <ip4_reass+0x30c>)
 8010cde:	f000 fbb7 	bl	8011450 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8010ce2:	2100      	movs	r1, #0
 8010ce4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010ce6:	f7ff fcf1 	bl	80106cc <ip_reass_dequeue_datagram>
 8010cea:	e014      	b.n	8010d16 <ip4_reass+0x31a>
    goto nullreturn;
 8010cec:	bf00      	nop
 8010cee:	e012      	b.n	8010d16 <ip4_reass+0x31a>
    goto nullreturn;
 8010cf0:	bf00      	nop
 8010cf2:	e010      	b.n	8010d16 <ip4_reass+0x31a>
      goto nullreturn;
 8010cf4:	bf00      	nop
 8010cf6:	e00e      	b.n	8010d16 <ip4_reass+0x31a>
 8010cf8:	200006ac 	.word	0x200006ac
 8010cfc:	200006a8 	.word	0x200006a8
 8010d00:	08015c84 	.word	0x08015c84
 8010d04:	08015df4 	.word	0x08015df4
 8010d08:	08015ccc 	.word	0x08015ccc
 8010d0c:	08015e10 	.word	0x08015e10
 8010d10:	08015e1c 	.word	0x08015e1c
  }

nullreturn:
 8010d14:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8010d16:	6878      	ldr	r0, [r7, #4]
 8010d18:	f7f7 f9d2 	bl	80080c0 <pbuf_free>
  return NULL;
 8010d1c:	2300      	movs	r3, #0
}
 8010d1e:	4618      	mov	r0, r3
 8010d20:	3738      	adds	r7, #56	; 0x38
 8010d22:	46bd      	mov	sp, r7
 8010d24:	bd80      	pop	{r7, pc}
 8010d26:	bf00      	nop

08010d28 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8010d28:	b580      	push	{r7, lr}
 8010d2a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8010d2c:	2005      	movs	r0, #5
 8010d2e:	f7f6 fb69 	bl	8007404 <memp_malloc>
 8010d32:	4603      	mov	r3, r0
}
 8010d34:	4618      	mov	r0, r3
 8010d36:	bd80      	pop	{r7, pc}

08010d38 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8010d38:	b580      	push	{r7, lr}
 8010d3a:	b082      	sub	sp, #8
 8010d3c:	af00      	add	r7, sp, #0
 8010d3e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8010d40:	687b      	ldr	r3, [r7, #4]
 8010d42:	2b00      	cmp	r3, #0
 8010d44:	d106      	bne.n	8010d54 <ip_frag_free_pbuf_custom_ref+0x1c>
 8010d46:	4b07      	ldr	r3, [pc, #28]	; (8010d64 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8010d48:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8010d4c:	4906      	ldr	r1, [pc, #24]	; (8010d68 <ip_frag_free_pbuf_custom_ref+0x30>)
 8010d4e:	4807      	ldr	r0, [pc, #28]	; (8010d6c <ip_frag_free_pbuf_custom_ref+0x34>)
 8010d50:	f000 fb7e 	bl	8011450 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8010d54:	6879      	ldr	r1, [r7, #4]
 8010d56:	2005      	movs	r0, #5
 8010d58:	f7f6 fba0 	bl	800749c <memp_free>
}
 8010d5c:	bf00      	nop
 8010d5e:	3708      	adds	r7, #8
 8010d60:	46bd      	mov	sp, r7
 8010d62:	bd80      	pop	{r7, pc}
 8010d64:	08015c84 	.word	0x08015c84
 8010d68:	08015e3c 	.word	0x08015e3c
 8010d6c:	08015ccc 	.word	0x08015ccc

08010d70 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8010d70:	b580      	push	{r7, lr}
 8010d72:	b084      	sub	sp, #16
 8010d74:	af00      	add	r7, sp, #0
 8010d76:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8010d7c:	68fb      	ldr	r3, [r7, #12]
 8010d7e:	2b00      	cmp	r3, #0
 8010d80:	d106      	bne.n	8010d90 <ipfrag_free_pbuf_custom+0x20>
 8010d82:	4b11      	ldr	r3, [pc, #68]	; (8010dc8 <ipfrag_free_pbuf_custom+0x58>)
 8010d84:	f240 22ce 	movw	r2, #718	; 0x2ce
 8010d88:	4910      	ldr	r1, [pc, #64]	; (8010dcc <ipfrag_free_pbuf_custom+0x5c>)
 8010d8a:	4811      	ldr	r0, [pc, #68]	; (8010dd0 <ipfrag_free_pbuf_custom+0x60>)
 8010d8c:	f000 fb60 	bl	8011450 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8010d90:	68fa      	ldr	r2, [r7, #12]
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	429a      	cmp	r2, r3
 8010d96:	d006      	beq.n	8010da6 <ipfrag_free_pbuf_custom+0x36>
 8010d98:	4b0b      	ldr	r3, [pc, #44]	; (8010dc8 <ipfrag_free_pbuf_custom+0x58>)
 8010d9a:	f240 22cf 	movw	r2, #719	; 0x2cf
 8010d9e:	490d      	ldr	r1, [pc, #52]	; (8010dd4 <ipfrag_free_pbuf_custom+0x64>)
 8010da0:	480b      	ldr	r0, [pc, #44]	; (8010dd0 <ipfrag_free_pbuf_custom+0x60>)
 8010da2:	f000 fb55 	bl	8011450 <iprintf>
  if (pcr->original != NULL) {
 8010da6:	68fb      	ldr	r3, [r7, #12]
 8010da8:	695b      	ldr	r3, [r3, #20]
 8010daa:	2b00      	cmp	r3, #0
 8010dac:	d004      	beq.n	8010db8 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8010dae:	68fb      	ldr	r3, [r7, #12]
 8010db0:	695b      	ldr	r3, [r3, #20]
 8010db2:	4618      	mov	r0, r3
 8010db4:	f7f7 f984 	bl	80080c0 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8010db8:	68f8      	ldr	r0, [r7, #12]
 8010dba:	f7ff ffbd 	bl	8010d38 <ip_frag_free_pbuf_custom_ref>
}
 8010dbe:	bf00      	nop
 8010dc0:	3710      	adds	r7, #16
 8010dc2:	46bd      	mov	sp, r7
 8010dc4:	bd80      	pop	{r7, pc}
 8010dc6:	bf00      	nop
 8010dc8:	08015c84 	.word	0x08015c84
 8010dcc:	08015e48 	.word	0x08015e48
 8010dd0:	08015ccc 	.word	0x08015ccc
 8010dd4:	08015e54 	.word	0x08015e54

08010dd8 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8010dd8:	b580      	push	{r7, lr}
 8010dda:	b094      	sub	sp, #80	; 0x50
 8010ddc:	af02      	add	r7, sp, #8
 8010dde:	60f8      	str	r0, [r7, #12]
 8010de0:	60b9      	str	r1, [r7, #8]
 8010de2:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8010de4:	2300      	movs	r3, #0
 8010de6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8010dea:	68bb      	ldr	r3, [r7, #8]
 8010dec:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8010dee:	3b14      	subs	r3, #20
 8010df0:	2b00      	cmp	r3, #0
 8010df2:	da00      	bge.n	8010df6 <ip4_frag+0x1e>
 8010df4:	3307      	adds	r3, #7
 8010df6:	10db      	asrs	r3, r3, #3
 8010df8:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8010dfa:	2314      	movs	r3, #20
 8010dfc:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8010dfe:	68fb      	ldr	r3, [r7, #12]
 8010e00:	685b      	ldr	r3, [r3, #4]
 8010e02:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8010e04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e06:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8010e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e0a:	781b      	ldrb	r3, [r3, #0]
 8010e0c:	f003 030f 	and.w	r3, r3, #15
 8010e10:	b2db      	uxtb	r3, r3
 8010e12:	009b      	lsls	r3, r3, #2
 8010e14:	b2db      	uxtb	r3, r3
 8010e16:	2b14      	cmp	r3, #20
 8010e18:	d002      	beq.n	8010e20 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8010e1a:	f06f 0305 	mvn.w	r3, #5
 8010e1e:	e110      	b.n	8011042 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8010e20:	68fb      	ldr	r3, [r7, #12]
 8010e22:	895b      	ldrh	r3, [r3, #10]
 8010e24:	2b13      	cmp	r3, #19
 8010e26:	d809      	bhi.n	8010e3c <ip4_frag+0x64>
 8010e28:	4b88      	ldr	r3, [pc, #544]	; (801104c <ip4_frag+0x274>)
 8010e2a:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8010e2e:	4988      	ldr	r1, [pc, #544]	; (8011050 <ip4_frag+0x278>)
 8010e30:	4888      	ldr	r0, [pc, #544]	; (8011054 <ip4_frag+0x27c>)
 8010e32:	f000 fb0d 	bl	8011450 <iprintf>
 8010e36:	f06f 0305 	mvn.w	r3, #5
 8010e3a:	e102      	b.n	8011042 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8010e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e3e:	88db      	ldrh	r3, [r3, #6]
 8010e40:	b29b      	uxth	r3, r3
 8010e42:	4618      	mov	r0, r3
 8010e44:	f7f5 fdaa 	bl	800699c <lwip_htons>
 8010e48:	4603      	mov	r3, r0
 8010e4a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8010e4c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010e4e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010e52:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8010e56:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010e58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010e5c:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8010e5e:	68fb      	ldr	r3, [r7, #12]
 8010e60:	891b      	ldrh	r3, [r3, #8]
 8010e62:	3b14      	subs	r3, #20
 8010e64:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8010e68:	e0e1      	b.n	801102e <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8010e6a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010e6c:	00db      	lsls	r3, r3, #3
 8010e6e:	b29b      	uxth	r3, r3
 8010e70:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010e74:	4293      	cmp	r3, r2
 8010e76:	bf28      	it	cs
 8010e78:	4613      	movcs	r3, r2
 8010e7a:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8010e7c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010e80:	2114      	movs	r1, #20
 8010e82:	200e      	movs	r0, #14
 8010e84:	f7f6 fe38 	bl	8007af8 <pbuf_alloc>
 8010e88:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8010e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e8c:	2b00      	cmp	r3, #0
 8010e8e:	f000 80d5 	beq.w	801103c <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8010e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e94:	895b      	ldrh	r3, [r3, #10]
 8010e96:	2b13      	cmp	r3, #19
 8010e98:	d806      	bhi.n	8010ea8 <ip4_frag+0xd0>
 8010e9a:	4b6c      	ldr	r3, [pc, #432]	; (801104c <ip4_frag+0x274>)
 8010e9c:	f44f 7249 	mov.w	r2, #804	; 0x324
 8010ea0:	496d      	ldr	r1, [pc, #436]	; (8011058 <ip4_frag+0x280>)
 8010ea2:	486c      	ldr	r0, [pc, #432]	; (8011054 <ip4_frag+0x27c>)
 8010ea4:	f000 fad4 	bl	8011450 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8010ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010eaa:	685b      	ldr	r3, [r3, #4]
 8010eac:	2214      	movs	r2, #20
 8010eae:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010eb0:	4618      	mov	r0, r3
 8010eb2:	f000 f9f3 	bl	801129c <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8010eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010eb8:	685b      	ldr	r3, [r3, #4]
 8010eba:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8010ebc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010ebe:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8010ec2:	e064      	b.n	8010f8e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8010ec4:	68fb      	ldr	r3, [r7, #12]
 8010ec6:	895a      	ldrh	r2, [r3, #10]
 8010ec8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010eca:	1ad3      	subs	r3, r2, r3
 8010ecc:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8010ece:	68fb      	ldr	r3, [r7, #12]
 8010ed0:	895b      	ldrh	r3, [r3, #10]
 8010ed2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8010ed4:	429a      	cmp	r2, r3
 8010ed6:	d906      	bls.n	8010ee6 <ip4_frag+0x10e>
 8010ed8:	4b5c      	ldr	r3, [pc, #368]	; (801104c <ip4_frag+0x274>)
 8010eda:	f240 322d 	movw	r2, #813	; 0x32d
 8010ede:	495f      	ldr	r1, [pc, #380]	; (801105c <ip4_frag+0x284>)
 8010ee0:	485c      	ldr	r0, [pc, #368]	; (8011054 <ip4_frag+0x27c>)
 8010ee2:	f000 fab5 	bl	8011450 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8010ee6:	8bfa      	ldrh	r2, [r7, #30]
 8010ee8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8010eec:	4293      	cmp	r3, r2
 8010eee:	bf28      	it	cs
 8010ef0:	4613      	movcs	r3, r2
 8010ef2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8010ef6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8010efa:	2b00      	cmp	r3, #0
 8010efc:	d105      	bne.n	8010f0a <ip4_frag+0x132>
        poff = 0;
 8010efe:	2300      	movs	r3, #0
 8010f00:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8010f02:	68fb      	ldr	r3, [r7, #12]
 8010f04:	681b      	ldr	r3, [r3, #0]
 8010f06:	60fb      	str	r3, [r7, #12]
        continue;
 8010f08:	e041      	b.n	8010f8e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8010f0a:	f7ff ff0d 	bl	8010d28 <ip_frag_alloc_pbuf_custom_ref>
 8010f0e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8010f10:	69bb      	ldr	r3, [r7, #24]
 8010f12:	2b00      	cmp	r3, #0
 8010f14:	d103      	bne.n	8010f1e <ip4_frag+0x146>
        pbuf_free(rambuf);
 8010f16:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010f18:	f7f7 f8d2 	bl	80080c0 <pbuf_free>
        goto memerr;
 8010f1c:	e08f      	b.n	801103e <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8010f1e:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8010f20:	68fb      	ldr	r3, [r7, #12]
 8010f22:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8010f24:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010f26:	4413      	add	r3, r2
 8010f28:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8010f2c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8010f30:	9201      	str	r2, [sp, #4]
 8010f32:	9300      	str	r3, [sp, #0]
 8010f34:	4603      	mov	r3, r0
 8010f36:	2241      	movs	r2, #65	; 0x41
 8010f38:	2000      	movs	r0, #0
 8010f3a:	f7f6 ff07 	bl	8007d4c <pbuf_alloced_custom>
 8010f3e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8010f40:	697b      	ldr	r3, [r7, #20]
 8010f42:	2b00      	cmp	r3, #0
 8010f44:	d106      	bne.n	8010f54 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8010f46:	69b8      	ldr	r0, [r7, #24]
 8010f48:	f7ff fef6 	bl	8010d38 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8010f4c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010f4e:	f7f7 f8b7 	bl	80080c0 <pbuf_free>
        goto memerr;
 8010f52:	e074      	b.n	801103e <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8010f54:	68f8      	ldr	r0, [r7, #12]
 8010f56:	f7f7 f953 	bl	8008200 <pbuf_ref>
      pcr->original = p;
 8010f5a:	69bb      	ldr	r3, [r7, #24]
 8010f5c:	68fa      	ldr	r2, [r7, #12]
 8010f5e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8010f60:	69bb      	ldr	r3, [r7, #24]
 8010f62:	4a3f      	ldr	r2, [pc, #252]	; (8011060 <ip4_frag+0x288>)
 8010f64:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8010f66:	6979      	ldr	r1, [r7, #20]
 8010f68:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010f6a:	f7f7 f96b 	bl	8008244 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8010f6e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8010f72:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8010f76:	1ad3      	subs	r3, r2, r3
 8010f78:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8010f7c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8010f80:	2b00      	cmp	r3, #0
 8010f82:	d004      	beq.n	8010f8e <ip4_frag+0x1b6>
        poff = 0;
 8010f84:	2300      	movs	r3, #0
 8010f86:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8010f88:	68fb      	ldr	r3, [r7, #12]
 8010f8a:	681b      	ldr	r3, [r3, #0]
 8010f8c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8010f8e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8010f92:	2b00      	cmp	r3, #0
 8010f94:	d196      	bne.n	8010ec4 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8010f96:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8010f98:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8010f9c:	4413      	add	r3, r2
 8010f9e:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8010fa0:	68bb      	ldr	r3, [r7, #8]
 8010fa2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8010fa4:	f1a3 0213 	sub.w	r2, r3, #19
 8010fa8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010fac:	429a      	cmp	r2, r3
 8010fae:	bfcc      	ite	gt
 8010fb0:	2301      	movgt	r3, #1
 8010fb2:	2300      	movle	r3, #0
 8010fb4:	b2db      	uxtb	r3, r3
 8010fb6:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8010fb8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010fbc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010fc0:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8010fc2:	6a3b      	ldr	r3, [r7, #32]
 8010fc4:	2b00      	cmp	r3, #0
 8010fc6:	d002      	beq.n	8010fce <ip4_frag+0x1f6>
 8010fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fca:	2b00      	cmp	r3, #0
 8010fcc:	d003      	beq.n	8010fd6 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8010fce:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010fd0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8010fd4:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8010fd6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010fd8:	4618      	mov	r0, r3
 8010fda:	f7f5 fcdf 	bl	800699c <lwip_htons>
 8010fde:	4603      	mov	r3, r0
 8010fe0:	461a      	mov	r2, r3
 8010fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fe4:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8010fe6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010fe8:	3314      	adds	r3, #20
 8010fea:	b29b      	uxth	r3, r3
 8010fec:	4618      	mov	r0, r3
 8010fee:	f7f5 fcd5 	bl	800699c <lwip_htons>
 8010ff2:	4603      	mov	r3, r0
 8010ff4:	461a      	mov	r2, r3
 8010ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ff8:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8010ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ffc:	2200      	movs	r2, #0
 8010ffe:	729a      	strb	r2, [r3, #10]
 8011000:	2200      	movs	r2, #0
 8011002:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8011004:	68bb      	ldr	r3, [r7, #8]
 8011006:	695b      	ldr	r3, [r3, #20]
 8011008:	687a      	ldr	r2, [r7, #4]
 801100a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801100c:	68b8      	ldr	r0, [r7, #8]
 801100e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8011010:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011012:	f7f7 f855 	bl	80080c0 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8011016:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801101a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801101c:	1ad3      	subs	r3, r2, r3
 801101e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8011022:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8011026:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011028:	4413      	add	r3, r2
 801102a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801102e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011032:	2b00      	cmp	r3, #0
 8011034:	f47f af19 	bne.w	8010e6a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8011038:	2300      	movs	r3, #0
 801103a:	e002      	b.n	8011042 <ip4_frag+0x26a>
      goto memerr;
 801103c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801103e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8011042:	4618      	mov	r0, r3
 8011044:	3748      	adds	r7, #72	; 0x48
 8011046:	46bd      	mov	sp, r7
 8011048:	bd80      	pop	{r7, pc}
 801104a:	bf00      	nop
 801104c:	08015c84 	.word	0x08015c84
 8011050:	08015e60 	.word	0x08015e60
 8011054:	08015ccc 	.word	0x08015ccc
 8011058:	08015e7c 	.word	0x08015e7c
 801105c:	08015e9c 	.word	0x08015e9c
 8011060:	08010d71 	.word	0x08010d71

08011064 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8011064:	b580      	push	{r7, lr}
 8011066:	b086      	sub	sp, #24
 8011068:	af00      	add	r7, sp, #0
 801106a:	6078      	str	r0, [r7, #4]
 801106c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801106e:	230e      	movs	r3, #14
 8011070:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8011072:	687b      	ldr	r3, [r7, #4]
 8011074:	895b      	ldrh	r3, [r3, #10]
 8011076:	2b0e      	cmp	r3, #14
 8011078:	d96e      	bls.n	8011158 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	7bdb      	ldrb	r3, [r3, #15]
 801107e:	2b00      	cmp	r3, #0
 8011080:	d106      	bne.n	8011090 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8011082:	683b      	ldr	r3, [r7, #0]
 8011084:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011088:	3301      	adds	r3, #1
 801108a:	b2da      	uxtb	r2, r3
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8011090:	687b      	ldr	r3, [r7, #4]
 8011092:	685b      	ldr	r3, [r3, #4]
 8011094:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8011096:	693b      	ldr	r3, [r7, #16]
 8011098:	7b1a      	ldrb	r2, [r3, #12]
 801109a:	7b5b      	ldrb	r3, [r3, #13]
 801109c:	021b      	lsls	r3, r3, #8
 801109e:	4313      	orrs	r3, r2
 80110a0:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80110a2:	693b      	ldr	r3, [r7, #16]
 80110a4:	781b      	ldrb	r3, [r3, #0]
 80110a6:	f003 0301 	and.w	r3, r3, #1
 80110aa:	2b00      	cmp	r3, #0
 80110ac:	d023      	beq.n	80110f6 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80110ae:	693b      	ldr	r3, [r7, #16]
 80110b0:	781b      	ldrb	r3, [r3, #0]
 80110b2:	2b01      	cmp	r3, #1
 80110b4:	d10f      	bne.n	80110d6 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80110b6:	693b      	ldr	r3, [r7, #16]
 80110b8:	785b      	ldrb	r3, [r3, #1]
 80110ba:	2b00      	cmp	r3, #0
 80110bc:	d11b      	bne.n	80110f6 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80110be:	693b      	ldr	r3, [r7, #16]
 80110c0:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80110c2:	2b5e      	cmp	r3, #94	; 0x5e
 80110c4:	d117      	bne.n	80110f6 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80110c6:	687b      	ldr	r3, [r7, #4]
 80110c8:	7b5b      	ldrb	r3, [r3, #13]
 80110ca:	f043 0310 	orr.w	r3, r3, #16
 80110ce:	b2da      	uxtb	r2, r3
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	735a      	strb	r2, [r3, #13]
 80110d4:	e00f      	b.n	80110f6 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80110d6:	693b      	ldr	r3, [r7, #16]
 80110d8:	2206      	movs	r2, #6
 80110da:	4928      	ldr	r1, [pc, #160]	; (801117c <ethernet_input+0x118>)
 80110dc:	4618      	mov	r0, r3
 80110de:	f000 f8cf 	bl	8011280 <memcmp>
 80110e2:	4603      	mov	r3, r0
 80110e4:	2b00      	cmp	r3, #0
 80110e6:	d106      	bne.n	80110f6 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	7b5b      	ldrb	r3, [r3, #13]
 80110ec:	f043 0308 	orr.w	r3, r3, #8
 80110f0:	b2da      	uxtb	r2, r3
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80110f6:	89fb      	ldrh	r3, [r7, #14]
 80110f8:	2b08      	cmp	r3, #8
 80110fa:	d003      	beq.n	8011104 <ethernet_input+0xa0>
 80110fc:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8011100:	d014      	beq.n	801112c <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8011102:	e032      	b.n	801116a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8011104:	683b      	ldr	r3, [r7, #0]
 8011106:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801110a:	f003 0308 	and.w	r3, r3, #8
 801110e:	2b00      	cmp	r3, #0
 8011110:	d024      	beq.n	801115c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8011112:	8afb      	ldrh	r3, [r7, #22]
 8011114:	4619      	mov	r1, r3
 8011116:	6878      	ldr	r0, [r7, #4]
 8011118:	f7f6 ff4c 	bl	8007fb4 <pbuf_remove_header>
 801111c:	4603      	mov	r3, r0
 801111e:	2b00      	cmp	r3, #0
 8011120:	d11e      	bne.n	8011160 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8011122:	6839      	ldr	r1, [r7, #0]
 8011124:	6878      	ldr	r0, [r7, #4]
 8011126:	f7fe ff27 	bl	800ff78 <ip4_input>
      break;
 801112a:	e013      	b.n	8011154 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801112c:	683b      	ldr	r3, [r7, #0]
 801112e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011132:	f003 0308 	and.w	r3, r3, #8
 8011136:	2b00      	cmp	r3, #0
 8011138:	d014      	beq.n	8011164 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801113a:	8afb      	ldrh	r3, [r7, #22]
 801113c:	4619      	mov	r1, r3
 801113e:	6878      	ldr	r0, [r7, #4]
 8011140:	f7f6 ff38 	bl	8007fb4 <pbuf_remove_header>
 8011144:	4603      	mov	r3, r0
 8011146:	2b00      	cmp	r3, #0
 8011148:	d10e      	bne.n	8011168 <ethernet_input+0x104>
        etharp_input(p, netif);
 801114a:	6839      	ldr	r1, [r7, #0]
 801114c:	6878      	ldr	r0, [r7, #4]
 801114e:	f7fe f8c7 	bl	800f2e0 <etharp_input>
      break;
 8011152:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8011154:	2300      	movs	r3, #0
 8011156:	e00c      	b.n	8011172 <ethernet_input+0x10e>
    goto free_and_return;
 8011158:	bf00      	nop
 801115a:	e006      	b.n	801116a <ethernet_input+0x106>
        goto free_and_return;
 801115c:	bf00      	nop
 801115e:	e004      	b.n	801116a <ethernet_input+0x106>
        goto free_and_return;
 8011160:	bf00      	nop
 8011162:	e002      	b.n	801116a <ethernet_input+0x106>
        goto free_and_return;
 8011164:	bf00      	nop
 8011166:	e000      	b.n	801116a <ethernet_input+0x106>
        goto free_and_return;
 8011168:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801116a:	6878      	ldr	r0, [r7, #4]
 801116c:	f7f6 ffa8 	bl	80080c0 <pbuf_free>
  return ERR_OK;
 8011170:	2300      	movs	r3, #0
}
 8011172:	4618      	mov	r0, r3
 8011174:	3718      	adds	r7, #24
 8011176:	46bd      	mov	sp, r7
 8011178:	bd80      	pop	{r7, pc}
 801117a:	bf00      	nop
 801117c:	08017db4 	.word	0x08017db4

08011180 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8011180:	b580      	push	{r7, lr}
 8011182:	b086      	sub	sp, #24
 8011184:	af00      	add	r7, sp, #0
 8011186:	60f8      	str	r0, [r7, #12]
 8011188:	60b9      	str	r1, [r7, #8]
 801118a:	607a      	str	r2, [r7, #4]
 801118c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801118e:	8c3b      	ldrh	r3, [r7, #32]
 8011190:	4618      	mov	r0, r3
 8011192:	f7f5 fc03 	bl	800699c <lwip_htons>
 8011196:	4603      	mov	r3, r0
 8011198:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801119a:	210e      	movs	r1, #14
 801119c:	68b8      	ldr	r0, [r7, #8]
 801119e:	f7f6 fef9 	bl	8007f94 <pbuf_add_header>
 80111a2:	4603      	mov	r3, r0
 80111a4:	2b00      	cmp	r3, #0
 80111a6:	d125      	bne.n	80111f4 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 80111a8:	68bb      	ldr	r3, [r7, #8]
 80111aa:	685b      	ldr	r3, [r3, #4]
 80111ac:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80111ae:	693b      	ldr	r3, [r7, #16]
 80111b0:	8afa      	ldrh	r2, [r7, #22]
 80111b2:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80111b4:	693b      	ldr	r3, [r7, #16]
 80111b6:	2206      	movs	r2, #6
 80111b8:	6839      	ldr	r1, [r7, #0]
 80111ba:	4618      	mov	r0, r3
 80111bc:	f000 f86e 	bl	801129c <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 80111c0:	693b      	ldr	r3, [r7, #16]
 80111c2:	3306      	adds	r3, #6
 80111c4:	2206      	movs	r2, #6
 80111c6:	6879      	ldr	r1, [r7, #4]
 80111c8:	4618      	mov	r0, r3
 80111ca:	f000 f867 	bl	801129c <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80111ce:	68fb      	ldr	r3, [r7, #12]
 80111d0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80111d4:	2b06      	cmp	r3, #6
 80111d6:	d006      	beq.n	80111e6 <ethernet_output+0x66>
 80111d8:	4b0a      	ldr	r3, [pc, #40]	; (8011204 <ethernet_output+0x84>)
 80111da:	f44f 7299 	mov.w	r2, #306	; 0x132
 80111de:	490a      	ldr	r1, [pc, #40]	; (8011208 <ethernet_output+0x88>)
 80111e0:	480a      	ldr	r0, [pc, #40]	; (801120c <ethernet_output+0x8c>)
 80111e2:	f000 f935 	bl	8011450 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80111e6:	68fb      	ldr	r3, [r7, #12]
 80111e8:	699b      	ldr	r3, [r3, #24]
 80111ea:	68b9      	ldr	r1, [r7, #8]
 80111ec:	68f8      	ldr	r0, [r7, #12]
 80111ee:	4798      	blx	r3
 80111f0:	4603      	mov	r3, r0
 80111f2:	e002      	b.n	80111fa <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80111f4:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80111f6:	f06f 0301 	mvn.w	r3, #1
}
 80111fa:	4618      	mov	r0, r3
 80111fc:	3718      	adds	r7, #24
 80111fe:	46bd      	mov	sp, r7
 8011200:	bd80      	pop	{r7, pc}
 8011202:	bf00      	nop
 8011204:	08015eac 	.word	0x08015eac
 8011208:	08015ee4 	.word	0x08015ee4
 801120c:	08015f18 	.word	0x08015f18

08011210 <atoi>:
 8011210:	220a      	movs	r2, #10
 8011212:	2100      	movs	r1, #0
 8011214:	f000 bb5e 	b.w	80118d4 <strtol>

08011218 <__libc_init_array>:
 8011218:	b570      	push	{r4, r5, r6, lr}
 801121a:	4d0d      	ldr	r5, [pc, #52]	; (8011250 <__libc_init_array+0x38>)
 801121c:	4c0d      	ldr	r4, [pc, #52]	; (8011254 <__libc_init_array+0x3c>)
 801121e:	1b64      	subs	r4, r4, r5
 8011220:	10a4      	asrs	r4, r4, #2
 8011222:	2600      	movs	r6, #0
 8011224:	42a6      	cmp	r6, r4
 8011226:	d109      	bne.n	801123c <__libc_init_array+0x24>
 8011228:	4d0b      	ldr	r5, [pc, #44]	; (8011258 <__libc_init_array+0x40>)
 801122a:	4c0c      	ldr	r4, [pc, #48]	; (801125c <__libc_init_array+0x44>)
 801122c:	f001 fbec 	bl	8012a08 <_init>
 8011230:	1b64      	subs	r4, r4, r5
 8011232:	10a4      	asrs	r4, r4, #2
 8011234:	2600      	movs	r6, #0
 8011236:	42a6      	cmp	r6, r4
 8011238:	d105      	bne.n	8011246 <__libc_init_array+0x2e>
 801123a:	bd70      	pop	{r4, r5, r6, pc}
 801123c:	f855 3b04 	ldr.w	r3, [r5], #4
 8011240:	4798      	blx	r3
 8011242:	3601      	adds	r6, #1
 8011244:	e7ee      	b.n	8011224 <__libc_init_array+0xc>
 8011246:	f855 3b04 	ldr.w	r3, [r5], #4
 801124a:	4798      	blx	r3
 801124c:	3601      	adds	r6, #1
 801124e:	e7f2      	b.n	8011236 <__libc_init_array+0x1e>
 8011250:	08018078 	.word	0x08018078
 8011254:	08018078 	.word	0x08018078
 8011258:	08018078 	.word	0x08018078
 801125c:	0801807c 	.word	0x0801807c

08011260 <malloc>:
 8011260:	4b02      	ldr	r3, [pc, #8]	; (801126c <malloc+0xc>)
 8011262:	4601      	mov	r1, r0
 8011264:	6818      	ldr	r0, [r3, #0]
 8011266:	f000 b899 	b.w	801139c <_malloc_r>
 801126a:	bf00      	nop
 801126c:	20000030 	.word	0x20000030

08011270 <free>:
 8011270:	4b02      	ldr	r3, [pc, #8]	; (801127c <free+0xc>)
 8011272:	4601      	mov	r1, r0
 8011274:	6818      	ldr	r0, [r3, #0]
 8011276:	f000 b841 	b.w	80112fc <_free_r>
 801127a:	bf00      	nop
 801127c:	20000030 	.word	0x20000030

08011280 <memcmp>:
 8011280:	b530      	push	{r4, r5, lr}
 8011282:	3901      	subs	r1, #1
 8011284:	2400      	movs	r4, #0
 8011286:	42a2      	cmp	r2, r4
 8011288:	d101      	bne.n	801128e <memcmp+0xe>
 801128a:	2000      	movs	r0, #0
 801128c:	e005      	b.n	801129a <memcmp+0x1a>
 801128e:	5d03      	ldrb	r3, [r0, r4]
 8011290:	3401      	adds	r4, #1
 8011292:	5d0d      	ldrb	r5, [r1, r4]
 8011294:	42ab      	cmp	r3, r5
 8011296:	d0f6      	beq.n	8011286 <memcmp+0x6>
 8011298:	1b58      	subs	r0, r3, r5
 801129a:	bd30      	pop	{r4, r5, pc}

0801129c <memcpy>:
 801129c:	440a      	add	r2, r1
 801129e:	4291      	cmp	r1, r2
 80112a0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80112a4:	d100      	bne.n	80112a8 <memcpy+0xc>
 80112a6:	4770      	bx	lr
 80112a8:	b510      	push	{r4, lr}
 80112aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80112ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80112b2:	4291      	cmp	r1, r2
 80112b4:	d1f9      	bne.n	80112aa <memcpy+0xe>
 80112b6:	bd10      	pop	{r4, pc}

080112b8 <memmove>:
 80112b8:	4288      	cmp	r0, r1
 80112ba:	b510      	push	{r4, lr}
 80112bc:	eb01 0402 	add.w	r4, r1, r2
 80112c0:	d902      	bls.n	80112c8 <memmove+0x10>
 80112c2:	4284      	cmp	r4, r0
 80112c4:	4623      	mov	r3, r4
 80112c6:	d807      	bhi.n	80112d8 <memmove+0x20>
 80112c8:	1e43      	subs	r3, r0, #1
 80112ca:	42a1      	cmp	r1, r4
 80112cc:	d008      	beq.n	80112e0 <memmove+0x28>
 80112ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80112d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80112d6:	e7f8      	b.n	80112ca <memmove+0x12>
 80112d8:	4402      	add	r2, r0
 80112da:	4601      	mov	r1, r0
 80112dc:	428a      	cmp	r2, r1
 80112de:	d100      	bne.n	80112e2 <memmove+0x2a>
 80112e0:	bd10      	pop	{r4, pc}
 80112e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80112e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80112ea:	e7f7      	b.n	80112dc <memmove+0x24>

080112ec <memset>:
 80112ec:	4402      	add	r2, r0
 80112ee:	4603      	mov	r3, r0
 80112f0:	4293      	cmp	r3, r2
 80112f2:	d100      	bne.n	80112f6 <memset+0xa>
 80112f4:	4770      	bx	lr
 80112f6:	f803 1b01 	strb.w	r1, [r3], #1
 80112fa:	e7f9      	b.n	80112f0 <memset+0x4>

080112fc <_free_r>:
 80112fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80112fe:	2900      	cmp	r1, #0
 8011300:	d048      	beq.n	8011394 <_free_r+0x98>
 8011302:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011306:	9001      	str	r0, [sp, #4]
 8011308:	2b00      	cmp	r3, #0
 801130a:	f1a1 0404 	sub.w	r4, r1, #4
 801130e:	bfb8      	it	lt
 8011310:	18e4      	addlt	r4, r4, r3
 8011312:	f000 fdfd 	bl	8011f10 <__malloc_lock>
 8011316:	4a20      	ldr	r2, [pc, #128]	; (8011398 <_free_r+0x9c>)
 8011318:	9801      	ldr	r0, [sp, #4]
 801131a:	6813      	ldr	r3, [r2, #0]
 801131c:	4615      	mov	r5, r2
 801131e:	b933      	cbnz	r3, 801132e <_free_r+0x32>
 8011320:	6063      	str	r3, [r4, #4]
 8011322:	6014      	str	r4, [r2, #0]
 8011324:	b003      	add	sp, #12
 8011326:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801132a:	f000 bdf7 	b.w	8011f1c <__malloc_unlock>
 801132e:	42a3      	cmp	r3, r4
 8011330:	d90b      	bls.n	801134a <_free_r+0x4e>
 8011332:	6821      	ldr	r1, [r4, #0]
 8011334:	1862      	adds	r2, r4, r1
 8011336:	4293      	cmp	r3, r2
 8011338:	bf04      	itt	eq
 801133a:	681a      	ldreq	r2, [r3, #0]
 801133c:	685b      	ldreq	r3, [r3, #4]
 801133e:	6063      	str	r3, [r4, #4]
 8011340:	bf04      	itt	eq
 8011342:	1852      	addeq	r2, r2, r1
 8011344:	6022      	streq	r2, [r4, #0]
 8011346:	602c      	str	r4, [r5, #0]
 8011348:	e7ec      	b.n	8011324 <_free_r+0x28>
 801134a:	461a      	mov	r2, r3
 801134c:	685b      	ldr	r3, [r3, #4]
 801134e:	b10b      	cbz	r3, 8011354 <_free_r+0x58>
 8011350:	42a3      	cmp	r3, r4
 8011352:	d9fa      	bls.n	801134a <_free_r+0x4e>
 8011354:	6811      	ldr	r1, [r2, #0]
 8011356:	1855      	adds	r5, r2, r1
 8011358:	42a5      	cmp	r5, r4
 801135a:	d10b      	bne.n	8011374 <_free_r+0x78>
 801135c:	6824      	ldr	r4, [r4, #0]
 801135e:	4421      	add	r1, r4
 8011360:	1854      	adds	r4, r2, r1
 8011362:	42a3      	cmp	r3, r4
 8011364:	6011      	str	r1, [r2, #0]
 8011366:	d1dd      	bne.n	8011324 <_free_r+0x28>
 8011368:	681c      	ldr	r4, [r3, #0]
 801136a:	685b      	ldr	r3, [r3, #4]
 801136c:	6053      	str	r3, [r2, #4]
 801136e:	4421      	add	r1, r4
 8011370:	6011      	str	r1, [r2, #0]
 8011372:	e7d7      	b.n	8011324 <_free_r+0x28>
 8011374:	d902      	bls.n	801137c <_free_r+0x80>
 8011376:	230c      	movs	r3, #12
 8011378:	6003      	str	r3, [r0, #0]
 801137a:	e7d3      	b.n	8011324 <_free_r+0x28>
 801137c:	6825      	ldr	r5, [r4, #0]
 801137e:	1961      	adds	r1, r4, r5
 8011380:	428b      	cmp	r3, r1
 8011382:	bf04      	itt	eq
 8011384:	6819      	ldreq	r1, [r3, #0]
 8011386:	685b      	ldreq	r3, [r3, #4]
 8011388:	6063      	str	r3, [r4, #4]
 801138a:	bf04      	itt	eq
 801138c:	1949      	addeq	r1, r1, r5
 801138e:	6021      	streq	r1, [r4, #0]
 8011390:	6054      	str	r4, [r2, #4]
 8011392:	e7c7      	b.n	8011324 <_free_r+0x28>
 8011394:	b003      	add	sp, #12
 8011396:	bd30      	pop	{r4, r5, pc}
 8011398:	200006b0 	.word	0x200006b0

0801139c <_malloc_r>:
 801139c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801139e:	1ccd      	adds	r5, r1, #3
 80113a0:	f025 0503 	bic.w	r5, r5, #3
 80113a4:	3508      	adds	r5, #8
 80113a6:	2d0c      	cmp	r5, #12
 80113a8:	bf38      	it	cc
 80113aa:	250c      	movcc	r5, #12
 80113ac:	2d00      	cmp	r5, #0
 80113ae:	4606      	mov	r6, r0
 80113b0:	db01      	blt.n	80113b6 <_malloc_r+0x1a>
 80113b2:	42a9      	cmp	r1, r5
 80113b4:	d903      	bls.n	80113be <_malloc_r+0x22>
 80113b6:	230c      	movs	r3, #12
 80113b8:	6033      	str	r3, [r6, #0]
 80113ba:	2000      	movs	r0, #0
 80113bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80113be:	f000 fda7 	bl	8011f10 <__malloc_lock>
 80113c2:	4921      	ldr	r1, [pc, #132]	; (8011448 <_malloc_r+0xac>)
 80113c4:	680a      	ldr	r2, [r1, #0]
 80113c6:	4614      	mov	r4, r2
 80113c8:	b99c      	cbnz	r4, 80113f2 <_malloc_r+0x56>
 80113ca:	4f20      	ldr	r7, [pc, #128]	; (801144c <_malloc_r+0xb0>)
 80113cc:	683b      	ldr	r3, [r7, #0]
 80113ce:	b923      	cbnz	r3, 80113da <_malloc_r+0x3e>
 80113d0:	4621      	mov	r1, r4
 80113d2:	4630      	mov	r0, r6
 80113d4:	f000 f90a 	bl	80115ec <_sbrk_r>
 80113d8:	6038      	str	r0, [r7, #0]
 80113da:	4629      	mov	r1, r5
 80113dc:	4630      	mov	r0, r6
 80113de:	f000 f905 	bl	80115ec <_sbrk_r>
 80113e2:	1c43      	adds	r3, r0, #1
 80113e4:	d123      	bne.n	801142e <_malloc_r+0x92>
 80113e6:	230c      	movs	r3, #12
 80113e8:	6033      	str	r3, [r6, #0]
 80113ea:	4630      	mov	r0, r6
 80113ec:	f000 fd96 	bl	8011f1c <__malloc_unlock>
 80113f0:	e7e3      	b.n	80113ba <_malloc_r+0x1e>
 80113f2:	6823      	ldr	r3, [r4, #0]
 80113f4:	1b5b      	subs	r3, r3, r5
 80113f6:	d417      	bmi.n	8011428 <_malloc_r+0x8c>
 80113f8:	2b0b      	cmp	r3, #11
 80113fa:	d903      	bls.n	8011404 <_malloc_r+0x68>
 80113fc:	6023      	str	r3, [r4, #0]
 80113fe:	441c      	add	r4, r3
 8011400:	6025      	str	r5, [r4, #0]
 8011402:	e004      	b.n	801140e <_malloc_r+0x72>
 8011404:	6863      	ldr	r3, [r4, #4]
 8011406:	42a2      	cmp	r2, r4
 8011408:	bf0c      	ite	eq
 801140a:	600b      	streq	r3, [r1, #0]
 801140c:	6053      	strne	r3, [r2, #4]
 801140e:	4630      	mov	r0, r6
 8011410:	f000 fd84 	bl	8011f1c <__malloc_unlock>
 8011414:	f104 000b 	add.w	r0, r4, #11
 8011418:	1d23      	adds	r3, r4, #4
 801141a:	f020 0007 	bic.w	r0, r0, #7
 801141e:	1ac2      	subs	r2, r0, r3
 8011420:	d0cc      	beq.n	80113bc <_malloc_r+0x20>
 8011422:	1a1b      	subs	r3, r3, r0
 8011424:	50a3      	str	r3, [r4, r2]
 8011426:	e7c9      	b.n	80113bc <_malloc_r+0x20>
 8011428:	4622      	mov	r2, r4
 801142a:	6864      	ldr	r4, [r4, #4]
 801142c:	e7cc      	b.n	80113c8 <_malloc_r+0x2c>
 801142e:	1cc4      	adds	r4, r0, #3
 8011430:	f024 0403 	bic.w	r4, r4, #3
 8011434:	42a0      	cmp	r0, r4
 8011436:	d0e3      	beq.n	8011400 <_malloc_r+0x64>
 8011438:	1a21      	subs	r1, r4, r0
 801143a:	4630      	mov	r0, r6
 801143c:	f000 f8d6 	bl	80115ec <_sbrk_r>
 8011440:	3001      	adds	r0, #1
 8011442:	d1dd      	bne.n	8011400 <_malloc_r+0x64>
 8011444:	e7cf      	b.n	80113e6 <_malloc_r+0x4a>
 8011446:	bf00      	nop
 8011448:	200006b0 	.word	0x200006b0
 801144c:	200006b4 	.word	0x200006b4

08011450 <iprintf>:
 8011450:	b40f      	push	{r0, r1, r2, r3}
 8011452:	4b0a      	ldr	r3, [pc, #40]	; (801147c <iprintf+0x2c>)
 8011454:	b513      	push	{r0, r1, r4, lr}
 8011456:	681c      	ldr	r4, [r3, #0]
 8011458:	b124      	cbz	r4, 8011464 <iprintf+0x14>
 801145a:	69a3      	ldr	r3, [r4, #24]
 801145c:	b913      	cbnz	r3, 8011464 <iprintf+0x14>
 801145e:	4620      	mov	r0, r4
 8011460:	f000 fc40 	bl	8011ce4 <__sinit>
 8011464:	ab05      	add	r3, sp, #20
 8011466:	9a04      	ldr	r2, [sp, #16]
 8011468:	68a1      	ldr	r1, [r4, #8]
 801146a:	9301      	str	r3, [sp, #4]
 801146c:	4620      	mov	r0, r4
 801146e:	f000 fee1 	bl	8012234 <_vfiprintf_r>
 8011472:	b002      	add	sp, #8
 8011474:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011478:	b004      	add	sp, #16
 801147a:	4770      	bx	lr
 801147c:	20000030 	.word	0x20000030

08011480 <_puts_r>:
 8011480:	b570      	push	{r4, r5, r6, lr}
 8011482:	460e      	mov	r6, r1
 8011484:	4605      	mov	r5, r0
 8011486:	b118      	cbz	r0, 8011490 <_puts_r+0x10>
 8011488:	6983      	ldr	r3, [r0, #24]
 801148a:	b90b      	cbnz	r3, 8011490 <_puts_r+0x10>
 801148c:	f000 fc2a 	bl	8011ce4 <__sinit>
 8011490:	69ab      	ldr	r3, [r5, #24]
 8011492:	68ac      	ldr	r4, [r5, #8]
 8011494:	b913      	cbnz	r3, 801149c <_puts_r+0x1c>
 8011496:	4628      	mov	r0, r5
 8011498:	f000 fc24 	bl	8011ce4 <__sinit>
 801149c:	4b2c      	ldr	r3, [pc, #176]	; (8011550 <_puts_r+0xd0>)
 801149e:	429c      	cmp	r4, r3
 80114a0:	d120      	bne.n	80114e4 <_puts_r+0x64>
 80114a2:	686c      	ldr	r4, [r5, #4]
 80114a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80114a6:	07db      	lsls	r3, r3, #31
 80114a8:	d405      	bmi.n	80114b6 <_puts_r+0x36>
 80114aa:	89a3      	ldrh	r3, [r4, #12]
 80114ac:	0598      	lsls	r0, r3, #22
 80114ae:	d402      	bmi.n	80114b6 <_puts_r+0x36>
 80114b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80114b2:	f000 fcc7 	bl	8011e44 <__retarget_lock_acquire_recursive>
 80114b6:	89a3      	ldrh	r3, [r4, #12]
 80114b8:	0719      	lsls	r1, r3, #28
 80114ba:	d51d      	bpl.n	80114f8 <_puts_r+0x78>
 80114bc:	6923      	ldr	r3, [r4, #16]
 80114be:	b1db      	cbz	r3, 80114f8 <_puts_r+0x78>
 80114c0:	3e01      	subs	r6, #1
 80114c2:	68a3      	ldr	r3, [r4, #8]
 80114c4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80114c8:	3b01      	subs	r3, #1
 80114ca:	60a3      	str	r3, [r4, #8]
 80114cc:	bb39      	cbnz	r1, 801151e <_puts_r+0x9e>
 80114ce:	2b00      	cmp	r3, #0
 80114d0:	da38      	bge.n	8011544 <_puts_r+0xc4>
 80114d2:	4622      	mov	r2, r4
 80114d4:	210a      	movs	r1, #10
 80114d6:	4628      	mov	r0, r5
 80114d8:	f000 fa06 	bl	80118e8 <__swbuf_r>
 80114dc:	3001      	adds	r0, #1
 80114de:	d011      	beq.n	8011504 <_puts_r+0x84>
 80114e0:	250a      	movs	r5, #10
 80114e2:	e011      	b.n	8011508 <_puts_r+0x88>
 80114e4:	4b1b      	ldr	r3, [pc, #108]	; (8011554 <_puts_r+0xd4>)
 80114e6:	429c      	cmp	r4, r3
 80114e8:	d101      	bne.n	80114ee <_puts_r+0x6e>
 80114ea:	68ac      	ldr	r4, [r5, #8]
 80114ec:	e7da      	b.n	80114a4 <_puts_r+0x24>
 80114ee:	4b1a      	ldr	r3, [pc, #104]	; (8011558 <_puts_r+0xd8>)
 80114f0:	429c      	cmp	r4, r3
 80114f2:	bf08      	it	eq
 80114f4:	68ec      	ldreq	r4, [r5, #12]
 80114f6:	e7d5      	b.n	80114a4 <_puts_r+0x24>
 80114f8:	4621      	mov	r1, r4
 80114fa:	4628      	mov	r0, r5
 80114fc:	f000 fa46 	bl	801198c <__swsetup_r>
 8011500:	2800      	cmp	r0, #0
 8011502:	d0dd      	beq.n	80114c0 <_puts_r+0x40>
 8011504:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8011508:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801150a:	07da      	lsls	r2, r3, #31
 801150c:	d405      	bmi.n	801151a <_puts_r+0x9a>
 801150e:	89a3      	ldrh	r3, [r4, #12]
 8011510:	059b      	lsls	r3, r3, #22
 8011512:	d402      	bmi.n	801151a <_puts_r+0x9a>
 8011514:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011516:	f000 fc96 	bl	8011e46 <__retarget_lock_release_recursive>
 801151a:	4628      	mov	r0, r5
 801151c:	bd70      	pop	{r4, r5, r6, pc}
 801151e:	2b00      	cmp	r3, #0
 8011520:	da04      	bge.n	801152c <_puts_r+0xac>
 8011522:	69a2      	ldr	r2, [r4, #24]
 8011524:	429a      	cmp	r2, r3
 8011526:	dc06      	bgt.n	8011536 <_puts_r+0xb6>
 8011528:	290a      	cmp	r1, #10
 801152a:	d004      	beq.n	8011536 <_puts_r+0xb6>
 801152c:	6823      	ldr	r3, [r4, #0]
 801152e:	1c5a      	adds	r2, r3, #1
 8011530:	6022      	str	r2, [r4, #0]
 8011532:	7019      	strb	r1, [r3, #0]
 8011534:	e7c5      	b.n	80114c2 <_puts_r+0x42>
 8011536:	4622      	mov	r2, r4
 8011538:	4628      	mov	r0, r5
 801153a:	f000 f9d5 	bl	80118e8 <__swbuf_r>
 801153e:	3001      	adds	r0, #1
 8011540:	d1bf      	bne.n	80114c2 <_puts_r+0x42>
 8011542:	e7df      	b.n	8011504 <_puts_r+0x84>
 8011544:	6823      	ldr	r3, [r4, #0]
 8011546:	250a      	movs	r5, #10
 8011548:	1c5a      	adds	r2, r3, #1
 801154a:	6022      	str	r2, [r4, #0]
 801154c:	701d      	strb	r5, [r3, #0]
 801154e:	e7db      	b.n	8011508 <_puts_r+0x88>
 8011550:	08017ffc 	.word	0x08017ffc
 8011554:	0801801c 	.word	0x0801801c
 8011558:	08017fdc 	.word	0x08017fdc

0801155c <puts>:
 801155c:	4b02      	ldr	r3, [pc, #8]	; (8011568 <puts+0xc>)
 801155e:	4601      	mov	r1, r0
 8011560:	6818      	ldr	r0, [r3, #0]
 8011562:	f7ff bf8d 	b.w	8011480 <_puts_r>
 8011566:	bf00      	nop
 8011568:	20000030 	.word	0x20000030

0801156c <rand>:
 801156c:	4b17      	ldr	r3, [pc, #92]	; (80115cc <rand+0x60>)
 801156e:	b510      	push	{r4, lr}
 8011570:	681c      	ldr	r4, [r3, #0]
 8011572:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8011574:	b9b3      	cbnz	r3, 80115a4 <rand+0x38>
 8011576:	2018      	movs	r0, #24
 8011578:	f7ff fe72 	bl	8011260 <malloc>
 801157c:	63a0      	str	r0, [r4, #56]	; 0x38
 801157e:	b928      	cbnz	r0, 801158c <rand+0x20>
 8011580:	4602      	mov	r2, r0
 8011582:	4b13      	ldr	r3, [pc, #76]	; (80115d0 <rand+0x64>)
 8011584:	4813      	ldr	r0, [pc, #76]	; (80115d4 <rand+0x68>)
 8011586:	214e      	movs	r1, #78	; 0x4e
 8011588:	f000 fa6e 	bl	8011a68 <__assert_func>
 801158c:	4a12      	ldr	r2, [pc, #72]	; (80115d8 <rand+0x6c>)
 801158e:	4b13      	ldr	r3, [pc, #76]	; (80115dc <rand+0x70>)
 8011590:	e9c0 2300 	strd	r2, r3, [r0]
 8011594:	4b12      	ldr	r3, [pc, #72]	; (80115e0 <rand+0x74>)
 8011596:	6083      	str	r3, [r0, #8]
 8011598:	230b      	movs	r3, #11
 801159a:	8183      	strh	r3, [r0, #12]
 801159c:	2201      	movs	r2, #1
 801159e:	2300      	movs	r3, #0
 80115a0:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80115a4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80115a6:	480f      	ldr	r0, [pc, #60]	; (80115e4 <rand+0x78>)
 80115a8:	690a      	ldr	r2, [r1, #16]
 80115aa:	694b      	ldr	r3, [r1, #20]
 80115ac:	4c0e      	ldr	r4, [pc, #56]	; (80115e8 <rand+0x7c>)
 80115ae:	4350      	muls	r0, r2
 80115b0:	fb04 0003 	mla	r0, r4, r3, r0
 80115b4:	fba2 3404 	umull	r3, r4, r2, r4
 80115b8:	1c5a      	adds	r2, r3, #1
 80115ba:	4404      	add	r4, r0
 80115bc:	f144 0000 	adc.w	r0, r4, #0
 80115c0:	e9c1 2004 	strd	r2, r0, [r1, #16]
 80115c4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80115c8:	bd10      	pop	{r4, pc}
 80115ca:	bf00      	nop
 80115cc:	20000030 	.word	0x20000030
 80115d0:	08017ec8 	.word	0x08017ec8
 80115d4:	08017edf 	.word	0x08017edf
 80115d8:	abcd330e 	.word	0xabcd330e
 80115dc:	e66d1234 	.word	0xe66d1234
 80115e0:	0005deec 	.word	0x0005deec
 80115e4:	5851f42d 	.word	0x5851f42d
 80115e8:	4c957f2d 	.word	0x4c957f2d

080115ec <_sbrk_r>:
 80115ec:	b538      	push	{r3, r4, r5, lr}
 80115ee:	4d06      	ldr	r5, [pc, #24]	; (8011608 <_sbrk_r+0x1c>)
 80115f0:	2300      	movs	r3, #0
 80115f2:	4604      	mov	r4, r0
 80115f4:	4608      	mov	r0, r1
 80115f6:	602b      	str	r3, [r5, #0]
 80115f8:	f7f0 f986 	bl	8001908 <_sbrk>
 80115fc:	1c43      	adds	r3, r0, #1
 80115fe:	d102      	bne.n	8011606 <_sbrk_r+0x1a>
 8011600:	682b      	ldr	r3, [r5, #0]
 8011602:	b103      	cbz	r3, 8011606 <_sbrk_r+0x1a>
 8011604:	6023      	str	r3, [r4, #0]
 8011606:	bd38      	pop	{r3, r4, r5, pc}
 8011608:	2000d3fc 	.word	0x2000d3fc

0801160c <siprintf>:
 801160c:	b40e      	push	{r1, r2, r3}
 801160e:	b500      	push	{lr}
 8011610:	b09c      	sub	sp, #112	; 0x70
 8011612:	ab1d      	add	r3, sp, #116	; 0x74
 8011614:	9002      	str	r0, [sp, #8]
 8011616:	9006      	str	r0, [sp, #24]
 8011618:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801161c:	4809      	ldr	r0, [pc, #36]	; (8011644 <siprintf+0x38>)
 801161e:	9107      	str	r1, [sp, #28]
 8011620:	9104      	str	r1, [sp, #16]
 8011622:	4909      	ldr	r1, [pc, #36]	; (8011648 <siprintf+0x3c>)
 8011624:	f853 2b04 	ldr.w	r2, [r3], #4
 8011628:	9105      	str	r1, [sp, #20]
 801162a:	6800      	ldr	r0, [r0, #0]
 801162c:	9301      	str	r3, [sp, #4]
 801162e:	a902      	add	r1, sp, #8
 8011630:	f000 fcd6 	bl	8011fe0 <_svfiprintf_r>
 8011634:	9b02      	ldr	r3, [sp, #8]
 8011636:	2200      	movs	r2, #0
 8011638:	701a      	strb	r2, [r3, #0]
 801163a:	b01c      	add	sp, #112	; 0x70
 801163c:	f85d eb04 	ldr.w	lr, [sp], #4
 8011640:	b003      	add	sp, #12
 8011642:	4770      	bx	lr
 8011644:	20000030 	.word	0x20000030
 8011648:	ffff0208 	.word	0xffff0208

0801164c <strcat>:
 801164c:	b510      	push	{r4, lr}
 801164e:	4602      	mov	r2, r0
 8011650:	7814      	ldrb	r4, [r2, #0]
 8011652:	4613      	mov	r3, r2
 8011654:	3201      	adds	r2, #1
 8011656:	2c00      	cmp	r4, #0
 8011658:	d1fa      	bne.n	8011650 <strcat+0x4>
 801165a:	3b01      	subs	r3, #1
 801165c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011660:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011664:	2a00      	cmp	r2, #0
 8011666:	d1f9      	bne.n	801165c <strcat+0x10>
 8011668:	bd10      	pop	{r4, pc}

0801166a <strchr>:
 801166a:	b2c9      	uxtb	r1, r1
 801166c:	4603      	mov	r3, r0
 801166e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011672:	b11a      	cbz	r2, 801167c <strchr+0x12>
 8011674:	428a      	cmp	r2, r1
 8011676:	d1f9      	bne.n	801166c <strchr+0x2>
 8011678:	4618      	mov	r0, r3
 801167a:	4770      	bx	lr
 801167c:	2900      	cmp	r1, #0
 801167e:	bf18      	it	ne
 8011680:	2300      	movne	r3, #0
 8011682:	e7f9      	b.n	8011678 <strchr+0xe>

08011684 <strcpy>:
 8011684:	4603      	mov	r3, r0
 8011686:	f811 2b01 	ldrb.w	r2, [r1], #1
 801168a:	f803 2b01 	strb.w	r2, [r3], #1
 801168e:	2a00      	cmp	r2, #0
 8011690:	d1f9      	bne.n	8011686 <strcpy+0x2>
 8011692:	4770      	bx	lr

08011694 <strncmp>:
 8011694:	b510      	push	{r4, lr}
 8011696:	b16a      	cbz	r2, 80116b4 <strncmp+0x20>
 8011698:	3901      	subs	r1, #1
 801169a:	1884      	adds	r4, r0, r2
 801169c:	f810 3b01 	ldrb.w	r3, [r0], #1
 80116a0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80116a4:	4293      	cmp	r3, r2
 80116a6:	d103      	bne.n	80116b0 <strncmp+0x1c>
 80116a8:	42a0      	cmp	r0, r4
 80116aa:	d001      	beq.n	80116b0 <strncmp+0x1c>
 80116ac:	2b00      	cmp	r3, #0
 80116ae:	d1f5      	bne.n	801169c <strncmp+0x8>
 80116b0:	1a98      	subs	r0, r3, r2
 80116b2:	bd10      	pop	{r4, pc}
 80116b4:	4610      	mov	r0, r2
 80116b6:	e7fc      	b.n	80116b2 <strncmp+0x1e>

080116b8 <strncpy>:
 80116b8:	b510      	push	{r4, lr}
 80116ba:	3901      	subs	r1, #1
 80116bc:	4603      	mov	r3, r0
 80116be:	b132      	cbz	r2, 80116ce <strncpy+0x16>
 80116c0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80116c4:	f803 4b01 	strb.w	r4, [r3], #1
 80116c8:	3a01      	subs	r2, #1
 80116ca:	2c00      	cmp	r4, #0
 80116cc:	d1f7      	bne.n	80116be <strncpy+0x6>
 80116ce:	441a      	add	r2, r3
 80116d0:	2100      	movs	r1, #0
 80116d2:	4293      	cmp	r3, r2
 80116d4:	d100      	bne.n	80116d8 <strncpy+0x20>
 80116d6:	bd10      	pop	{r4, pc}
 80116d8:	f803 1b01 	strb.w	r1, [r3], #1
 80116dc:	e7f9      	b.n	80116d2 <strncpy+0x1a>

080116de <strstr>:
 80116de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80116e0:	780c      	ldrb	r4, [r1, #0]
 80116e2:	b164      	cbz	r4, 80116fe <strstr+0x20>
 80116e4:	4603      	mov	r3, r0
 80116e6:	781a      	ldrb	r2, [r3, #0]
 80116e8:	4618      	mov	r0, r3
 80116ea:	1c5e      	adds	r6, r3, #1
 80116ec:	b90a      	cbnz	r2, 80116f2 <strstr+0x14>
 80116ee:	4610      	mov	r0, r2
 80116f0:	e005      	b.n	80116fe <strstr+0x20>
 80116f2:	4294      	cmp	r4, r2
 80116f4:	d108      	bne.n	8011708 <strstr+0x2a>
 80116f6:	460d      	mov	r5, r1
 80116f8:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 80116fc:	b902      	cbnz	r2, 8011700 <strstr+0x22>
 80116fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011700:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8011704:	4297      	cmp	r7, r2
 8011706:	d0f7      	beq.n	80116f8 <strstr+0x1a>
 8011708:	4633      	mov	r3, r6
 801170a:	e7ec      	b.n	80116e6 <strstr+0x8>

0801170c <strtok>:
 801170c:	4b16      	ldr	r3, [pc, #88]	; (8011768 <strtok+0x5c>)
 801170e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011710:	681e      	ldr	r6, [r3, #0]
 8011712:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8011714:	4605      	mov	r5, r0
 8011716:	b9fc      	cbnz	r4, 8011758 <strtok+0x4c>
 8011718:	2050      	movs	r0, #80	; 0x50
 801171a:	9101      	str	r1, [sp, #4]
 801171c:	f7ff fda0 	bl	8011260 <malloc>
 8011720:	9901      	ldr	r1, [sp, #4]
 8011722:	65b0      	str	r0, [r6, #88]	; 0x58
 8011724:	4602      	mov	r2, r0
 8011726:	b920      	cbnz	r0, 8011732 <strtok+0x26>
 8011728:	4b10      	ldr	r3, [pc, #64]	; (801176c <strtok+0x60>)
 801172a:	4811      	ldr	r0, [pc, #68]	; (8011770 <strtok+0x64>)
 801172c:	2157      	movs	r1, #87	; 0x57
 801172e:	f000 f99b 	bl	8011a68 <__assert_func>
 8011732:	e9c0 4400 	strd	r4, r4, [r0]
 8011736:	e9c0 4402 	strd	r4, r4, [r0, #8]
 801173a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 801173e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8011742:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8011746:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 801174a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 801174e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8011752:	6184      	str	r4, [r0, #24]
 8011754:	7704      	strb	r4, [r0, #28]
 8011756:	6244      	str	r4, [r0, #36]	; 0x24
 8011758:	6db2      	ldr	r2, [r6, #88]	; 0x58
 801175a:	2301      	movs	r3, #1
 801175c:	4628      	mov	r0, r5
 801175e:	b002      	add	sp, #8
 8011760:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011764:	f000 b806 	b.w	8011774 <__strtok_r>
 8011768:	20000030 	.word	0x20000030
 801176c:	08017ec8 	.word	0x08017ec8
 8011770:	08017f3e 	.word	0x08017f3e

08011774 <__strtok_r>:
 8011774:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011776:	b908      	cbnz	r0, 801177c <__strtok_r+0x8>
 8011778:	6810      	ldr	r0, [r2, #0]
 801177a:	b188      	cbz	r0, 80117a0 <__strtok_r+0x2c>
 801177c:	4604      	mov	r4, r0
 801177e:	4620      	mov	r0, r4
 8011780:	f814 5b01 	ldrb.w	r5, [r4], #1
 8011784:	460f      	mov	r7, r1
 8011786:	f817 6b01 	ldrb.w	r6, [r7], #1
 801178a:	b91e      	cbnz	r6, 8011794 <__strtok_r+0x20>
 801178c:	b965      	cbnz	r5, 80117a8 <__strtok_r+0x34>
 801178e:	6015      	str	r5, [r2, #0]
 8011790:	4628      	mov	r0, r5
 8011792:	e005      	b.n	80117a0 <__strtok_r+0x2c>
 8011794:	42b5      	cmp	r5, r6
 8011796:	d1f6      	bne.n	8011786 <__strtok_r+0x12>
 8011798:	2b00      	cmp	r3, #0
 801179a:	d1f0      	bne.n	801177e <__strtok_r+0xa>
 801179c:	6014      	str	r4, [r2, #0]
 801179e:	7003      	strb	r3, [r0, #0]
 80117a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80117a2:	461c      	mov	r4, r3
 80117a4:	e00c      	b.n	80117c0 <__strtok_r+0x4c>
 80117a6:	b915      	cbnz	r5, 80117ae <__strtok_r+0x3a>
 80117a8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80117ac:	460e      	mov	r6, r1
 80117ae:	f816 5b01 	ldrb.w	r5, [r6], #1
 80117b2:	42ab      	cmp	r3, r5
 80117b4:	d1f7      	bne.n	80117a6 <__strtok_r+0x32>
 80117b6:	2b00      	cmp	r3, #0
 80117b8:	d0f3      	beq.n	80117a2 <__strtok_r+0x2e>
 80117ba:	2300      	movs	r3, #0
 80117bc:	f804 3c01 	strb.w	r3, [r4, #-1]
 80117c0:	6014      	str	r4, [r2, #0]
 80117c2:	e7ed      	b.n	80117a0 <__strtok_r+0x2c>

080117c4 <strtok_r>:
 80117c4:	2301      	movs	r3, #1
 80117c6:	f7ff bfd5 	b.w	8011774 <__strtok_r>
	...

080117cc <_strtol_l.isra.0>:
 80117cc:	2b01      	cmp	r3, #1
 80117ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80117d2:	d001      	beq.n	80117d8 <_strtol_l.isra.0+0xc>
 80117d4:	2b24      	cmp	r3, #36	; 0x24
 80117d6:	d906      	bls.n	80117e6 <_strtol_l.isra.0+0x1a>
 80117d8:	f000 f964 	bl	8011aa4 <__errno>
 80117dc:	2316      	movs	r3, #22
 80117de:	6003      	str	r3, [r0, #0]
 80117e0:	2000      	movs	r0, #0
 80117e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80117e6:	4f3a      	ldr	r7, [pc, #232]	; (80118d0 <_strtol_l.isra.0+0x104>)
 80117e8:	468e      	mov	lr, r1
 80117ea:	4676      	mov	r6, lr
 80117ec:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80117f0:	5de5      	ldrb	r5, [r4, r7]
 80117f2:	f015 0508 	ands.w	r5, r5, #8
 80117f6:	d1f8      	bne.n	80117ea <_strtol_l.isra.0+0x1e>
 80117f8:	2c2d      	cmp	r4, #45	; 0x2d
 80117fa:	d134      	bne.n	8011866 <_strtol_l.isra.0+0x9a>
 80117fc:	f89e 4000 	ldrb.w	r4, [lr]
 8011800:	f04f 0801 	mov.w	r8, #1
 8011804:	f106 0e02 	add.w	lr, r6, #2
 8011808:	2b00      	cmp	r3, #0
 801180a:	d05c      	beq.n	80118c6 <_strtol_l.isra.0+0xfa>
 801180c:	2b10      	cmp	r3, #16
 801180e:	d10c      	bne.n	801182a <_strtol_l.isra.0+0x5e>
 8011810:	2c30      	cmp	r4, #48	; 0x30
 8011812:	d10a      	bne.n	801182a <_strtol_l.isra.0+0x5e>
 8011814:	f89e 4000 	ldrb.w	r4, [lr]
 8011818:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801181c:	2c58      	cmp	r4, #88	; 0x58
 801181e:	d14d      	bne.n	80118bc <_strtol_l.isra.0+0xf0>
 8011820:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8011824:	2310      	movs	r3, #16
 8011826:	f10e 0e02 	add.w	lr, lr, #2
 801182a:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 801182e:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8011832:	2600      	movs	r6, #0
 8011834:	fbbc f9f3 	udiv	r9, ip, r3
 8011838:	4635      	mov	r5, r6
 801183a:	fb03 ca19 	mls	sl, r3, r9, ip
 801183e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8011842:	2f09      	cmp	r7, #9
 8011844:	d818      	bhi.n	8011878 <_strtol_l.isra.0+0xac>
 8011846:	463c      	mov	r4, r7
 8011848:	42a3      	cmp	r3, r4
 801184a:	dd24      	ble.n	8011896 <_strtol_l.isra.0+0xca>
 801184c:	2e00      	cmp	r6, #0
 801184e:	db1f      	blt.n	8011890 <_strtol_l.isra.0+0xc4>
 8011850:	45a9      	cmp	r9, r5
 8011852:	d31d      	bcc.n	8011890 <_strtol_l.isra.0+0xc4>
 8011854:	d101      	bne.n	801185a <_strtol_l.isra.0+0x8e>
 8011856:	45a2      	cmp	sl, r4
 8011858:	db1a      	blt.n	8011890 <_strtol_l.isra.0+0xc4>
 801185a:	fb05 4503 	mla	r5, r5, r3, r4
 801185e:	2601      	movs	r6, #1
 8011860:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8011864:	e7eb      	b.n	801183e <_strtol_l.isra.0+0x72>
 8011866:	2c2b      	cmp	r4, #43	; 0x2b
 8011868:	bf08      	it	eq
 801186a:	f89e 4000 	ldrbeq.w	r4, [lr]
 801186e:	46a8      	mov	r8, r5
 8011870:	bf08      	it	eq
 8011872:	f106 0e02 	addeq.w	lr, r6, #2
 8011876:	e7c7      	b.n	8011808 <_strtol_l.isra.0+0x3c>
 8011878:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 801187c:	2f19      	cmp	r7, #25
 801187e:	d801      	bhi.n	8011884 <_strtol_l.isra.0+0xb8>
 8011880:	3c37      	subs	r4, #55	; 0x37
 8011882:	e7e1      	b.n	8011848 <_strtol_l.isra.0+0x7c>
 8011884:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8011888:	2f19      	cmp	r7, #25
 801188a:	d804      	bhi.n	8011896 <_strtol_l.isra.0+0xca>
 801188c:	3c57      	subs	r4, #87	; 0x57
 801188e:	e7db      	b.n	8011848 <_strtol_l.isra.0+0x7c>
 8011890:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8011894:	e7e4      	b.n	8011860 <_strtol_l.isra.0+0x94>
 8011896:	2e00      	cmp	r6, #0
 8011898:	da05      	bge.n	80118a6 <_strtol_l.isra.0+0xda>
 801189a:	2322      	movs	r3, #34	; 0x22
 801189c:	6003      	str	r3, [r0, #0]
 801189e:	4665      	mov	r5, ip
 80118a0:	b942      	cbnz	r2, 80118b4 <_strtol_l.isra.0+0xe8>
 80118a2:	4628      	mov	r0, r5
 80118a4:	e79d      	b.n	80117e2 <_strtol_l.isra.0+0x16>
 80118a6:	f1b8 0f00 	cmp.w	r8, #0
 80118aa:	d000      	beq.n	80118ae <_strtol_l.isra.0+0xe2>
 80118ac:	426d      	negs	r5, r5
 80118ae:	2a00      	cmp	r2, #0
 80118b0:	d0f7      	beq.n	80118a2 <_strtol_l.isra.0+0xd6>
 80118b2:	b10e      	cbz	r6, 80118b8 <_strtol_l.isra.0+0xec>
 80118b4:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 80118b8:	6011      	str	r1, [r2, #0]
 80118ba:	e7f2      	b.n	80118a2 <_strtol_l.isra.0+0xd6>
 80118bc:	2430      	movs	r4, #48	; 0x30
 80118be:	2b00      	cmp	r3, #0
 80118c0:	d1b3      	bne.n	801182a <_strtol_l.isra.0+0x5e>
 80118c2:	2308      	movs	r3, #8
 80118c4:	e7b1      	b.n	801182a <_strtol_l.isra.0+0x5e>
 80118c6:	2c30      	cmp	r4, #48	; 0x30
 80118c8:	d0a4      	beq.n	8011814 <_strtol_l.isra.0+0x48>
 80118ca:	230a      	movs	r3, #10
 80118cc:	e7ad      	b.n	801182a <_strtol_l.isra.0+0x5e>
 80118ce:	bf00      	nop
 80118d0:	08017dc3 	.word	0x08017dc3

080118d4 <strtol>:
 80118d4:	4613      	mov	r3, r2
 80118d6:	460a      	mov	r2, r1
 80118d8:	4601      	mov	r1, r0
 80118da:	4802      	ldr	r0, [pc, #8]	; (80118e4 <strtol+0x10>)
 80118dc:	6800      	ldr	r0, [r0, #0]
 80118de:	f7ff bf75 	b.w	80117cc <_strtol_l.isra.0>
 80118e2:	bf00      	nop
 80118e4:	20000030 	.word	0x20000030

080118e8 <__swbuf_r>:
 80118e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80118ea:	460e      	mov	r6, r1
 80118ec:	4614      	mov	r4, r2
 80118ee:	4605      	mov	r5, r0
 80118f0:	b118      	cbz	r0, 80118fa <__swbuf_r+0x12>
 80118f2:	6983      	ldr	r3, [r0, #24]
 80118f4:	b90b      	cbnz	r3, 80118fa <__swbuf_r+0x12>
 80118f6:	f000 f9f5 	bl	8011ce4 <__sinit>
 80118fa:	4b21      	ldr	r3, [pc, #132]	; (8011980 <__swbuf_r+0x98>)
 80118fc:	429c      	cmp	r4, r3
 80118fe:	d12b      	bne.n	8011958 <__swbuf_r+0x70>
 8011900:	686c      	ldr	r4, [r5, #4]
 8011902:	69a3      	ldr	r3, [r4, #24]
 8011904:	60a3      	str	r3, [r4, #8]
 8011906:	89a3      	ldrh	r3, [r4, #12]
 8011908:	071a      	lsls	r2, r3, #28
 801190a:	d52f      	bpl.n	801196c <__swbuf_r+0x84>
 801190c:	6923      	ldr	r3, [r4, #16]
 801190e:	b36b      	cbz	r3, 801196c <__swbuf_r+0x84>
 8011910:	6923      	ldr	r3, [r4, #16]
 8011912:	6820      	ldr	r0, [r4, #0]
 8011914:	1ac0      	subs	r0, r0, r3
 8011916:	6963      	ldr	r3, [r4, #20]
 8011918:	b2f6      	uxtb	r6, r6
 801191a:	4283      	cmp	r3, r0
 801191c:	4637      	mov	r7, r6
 801191e:	dc04      	bgt.n	801192a <__swbuf_r+0x42>
 8011920:	4621      	mov	r1, r4
 8011922:	4628      	mov	r0, r5
 8011924:	f000 f94a 	bl	8011bbc <_fflush_r>
 8011928:	bb30      	cbnz	r0, 8011978 <__swbuf_r+0x90>
 801192a:	68a3      	ldr	r3, [r4, #8]
 801192c:	3b01      	subs	r3, #1
 801192e:	60a3      	str	r3, [r4, #8]
 8011930:	6823      	ldr	r3, [r4, #0]
 8011932:	1c5a      	adds	r2, r3, #1
 8011934:	6022      	str	r2, [r4, #0]
 8011936:	701e      	strb	r6, [r3, #0]
 8011938:	6963      	ldr	r3, [r4, #20]
 801193a:	3001      	adds	r0, #1
 801193c:	4283      	cmp	r3, r0
 801193e:	d004      	beq.n	801194a <__swbuf_r+0x62>
 8011940:	89a3      	ldrh	r3, [r4, #12]
 8011942:	07db      	lsls	r3, r3, #31
 8011944:	d506      	bpl.n	8011954 <__swbuf_r+0x6c>
 8011946:	2e0a      	cmp	r6, #10
 8011948:	d104      	bne.n	8011954 <__swbuf_r+0x6c>
 801194a:	4621      	mov	r1, r4
 801194c:	4628      	mov	r0, r5
 801194e:	f000 f935 	bl	8011bbc <_fflush_r>
 8011952:	b988      	cbnz	r0, 8011978 <__swbuf_r+0x90>
 8011954:	4638      	mov	r0, r7
 8011956:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011958:	4b0a      	ldr	r3, [pc, #40]	; (8011984 <__swbuf_r+0x9c>)
 801195a:	429c      	cmp	r4, r3
 801195c:	d101      	bne.n	8011962 <__swbuf_r+0x7a>
 801195e:	68ac      	ldr	r4, [r5, #8]
 8011960:	e7cf      	b.n	8011902 <__swbuf_r+0x1a>
 8011962:	4b09      	ldr	r3, [pc, #36]	; (8011988 <__swbuf_r+0xa0>)
 8011964:	429c      	cmp	r4, r3
 8011966:	bf08      	it	eq
 8011968:	68ec      	ldreq	r4, [r5, #12]
 801196a:	e7ca      	b.n	8011902 <__swbuf_r+0x1a>
 801196c:	4621      	mov	r1, r4
 801196e:	4628      	mov	r0, r5
 8011970:	f000 f80c 	bl	801198c <__swsetup_r>
 8011974:	2800      	cmp	r0, #0
 8011976:	d0cb      	beq.n	8011910 <__swbuf_r+0x28>
 8011978:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801197c:	e7ea      	b.n	8011954 <__swbuf_r+0x6c>
 801197e:	bf00      	nop
 8011980:	08017ffc 	.word	0x08017ffc
 8011984:	0801801c 	.word	0x0801801c
 8011988:	08017fdc 	.word	0x08017fdc

0801198c <__swsetup_r>:
 801198c:	4b32      	ldr	r3, [pc, #200]	; (8011a58 <__swsetup_r+0xcc>)
 801198e:	b570      	push	{r4, r5, r6, lr}
 8011990:	681d      	ldr	r5, [r3, #0]
 8011992:	4606      	mov	r6, r0
 8011994:	460c      	mov	r4, r1
 8011996:	b125      	cbz	r5, 80119a2 <__swsetup_r+0x16>
 8011998:	69ab      	ldr	r3, [r5, #24]
 801199a:	b913      	cbnz	r3, 80119a2 <__swsetup_r+0x16>
 801199c:	4628      	mov	r0, r5
 801199e:	f000 f9a1 	bl	8011ce4 <__sinit>
 80119a2:	4b2e      	ldr	r3, [pc, #184]	; (8011a5c <__swsetup_r+0xd0>)
 80119a4:	429c      	cmp	r4, r3
 80119a6:	d10f      	bne.n	80119c8 <__swsetup_r+0x3c>
 80119a8:	686c      	ldr	r4, [r5, #4]
 80119aa:	89a3      	ldrh	r3, [r4, #12]
 80119ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80119b0:	0719      	lsls	r1, r3, #28
 80119b2:	d42c      	bmi.n	8011a0e <__swsetup_r+0x82>
 80119b4:	06dd      	lsls	r5, r3, #27
 80119b6:	d411      	bmi.n	80119dc <__swsetup_r+0x50>
 80119b8:	2309      	movs	r3, #9
 80119ba:	6033      	str	r3, [r6, #0]
 80119bc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80119c0:	81a3      	strh	r3, [r4, #12]
 80119c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80119c6:	e03e      	b.n	8011a46 <__swsetup_r+0xba>
 80119c8:	4b25      	ldr	r3, [pc, #148]	; (8011a60 <__swsetup_r+0xd4>)
 80119ca:	429c      	cmp	r4, r3
 80119cc:	d101      	bne.n	80119d2 <__swsetup_r+0x46>
 80119ce:	68ac      	ldr	r4, [r5, #8]
 80119d0:	e7eb      	b.n	80119aa <__swsetup_r+0x1e>
 80119d2:	4b24      	ldr	r3, [pc, #144]	; (8011a64 <__swsetup_r+0xd8>)
 80119d4:	429c      	cmp	r4, r3
 80119d6:	bf08      	it	eq
 80119d8:	68ec      	ldreq	r4, [r5, #12]
 80119da:	e7e6      	b.n	80119aa <__swsetup_r+0x1e>
 80119dc:	0758      	lsls	r0, r3, #29
 80119de:	d512      	bpl.n	8011a06 <__swsetup_r+0x7a>
 80119e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80119e2:	b141      	cbz	r1, 80119f6 <__swsetup_r+0x6a>
 80119e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80119e8:	4299      	cmp	r1, r3
 80119ea:	d002      	beq.n	80119f2 <__swsetup_r+0x66>
 80119ec:	4630      	mov	r0, r6
 80119ee:	f7ff fc85 	bl	80112fc <_free_r>
 80119f2:	2300      	movs	r3, #0
 80119f4:	6363      	str	r3, [r4, #52]	; 0x34
 80119f6:	89a3      	ldrh	r3, [r4, #12]
 80119f8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80119fc:	81a3      	strh	r3, [r4, #12]
 80119fe:	2300      	movs	r3, #0
 8011a00:	6063      	str	r3, [r4, #4]
 8011a02:	6923      	ldr	r3, [r4, #16]
 8011a04:	6023      	str	r3, [r4, #0]
 8011a06:	89a3      	ldrh	r3, [r4, #12]
 8011a08:	f043 0308 	orr.w	r3, r3, #8
 8011a0c:	81a3      	strh	r3, [r4, #12]
 8011a0e:	6923      	ldr	r3, [r4, #16]
 8011a10:	b94b      	cbnz	r3, 8011a26 <__swsetup_r+0x9a>
 8011a12:	89a3      	ldrh	r3, [r4, #12]
 8011a14:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011a18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011a1c:	d003      	beq.n	8011a26 <__swsetup_r+0x9a>
 8011a1e:	4621      	mov	r1, r4
 8011a20:	4630      	mov	r0, r6
 8011a22:	f000 fa35 	bl	8011e90 <__smakebuf_r>
 8011a26:	89a0      	ldrh	r0, [r4, #12]
 8011a28:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011a2c:	f010 0301 	ands.w	r3, r0, #1
 8011a30:	d00a      	beq.n	8011a48 <__swsetup_r+0xbc>
 8011a32:	2300      	movs	r3, #0
 8011a34:	60a3      	str	r3, [r4, #8]
 8011a36:	6963      	ldr	r3, [r4, #20]
 8011a38:	425b      	negs	r3, r3
 8011a3a:	61a3      	str	r3, [r4, #24]
 8011a3c:	6923      	ldr	r3, [r4, #16]
 8011a3e:	b943      	cbnz	r3, 8011a52 <__swsetup_r+0xc6>
 8011a40:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011a44:	d1ba      	bne.n	80119bc <__swsetup_r+0x30>
 8011a46:	bd70      	pop	{r4, r5, r6, pc}
 8011a48:	0781      	lsls	r1, r0, #30
 8011a4a:	bf58      	it	pl
 8011a4c:	6963      	ldrpl	r3, [r4, #20]
 8011a4e:	60a3      	str	r3, [r4, #8]
 8011a50:	e7f4      	b.n	8011a3c <__swsetup_r+0xb0>
 8011a52:	2000      	movs	r0, #0
 8011a54:	e7f7      	b.n	8011a46 <__swsetup_r+0xba>
 8011a56:	bf00      	nop
 8011a58:	20000030 	.word	0x20000030
 8011a5c:	08017ffc 	.word	0x08017ffc
 8011a60:	0801801c 	.word	0x0801801c
 8011a64:	08017fdc 	.word	0x08017fdc

08011a68 <__assert_func>:
 8011a68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011a6a:	4614      	mov	r4, r2
 8011a6c:	461a      	mov	r2, r3
 8011a6e:	4b09      	ldr	r3, [pc, #36]	; (8011a94 <__assert_func+0x2c>)
 8011a70:	681b      	ldr	r3, [r3, #0]
 8011a72:	4605      	mov	r5, r0
 8011a74:	68d8      	ldr	r0, [r3, #12]
 8011a76:	b14c      	cbz	r4, 8011a8c <__assert_func+0x24>
 8011a78:	4b07      	ldr	r3, [pc, #28]	; (8011a98 <__assert_func+0x30>)
 8011a7a:	9100      	str	r1, [sp, #0]
 8011a7c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011a80:	4906      	ldr	r1, [pc, #24]	; (8011a9c <__assert_func+0x34>)
 8011a82:	462b      	mov	r3, r5
 8011a84:	f000 f9ac 	bl	8011de0 <fiprintf>
 8011a88:	f000 feee 	bl	8012868 <abort>
 8011a8c:	4b04      	ldr	r3, [pc, #16]	; (8011aa0 <__assert_func+0x38>)
 8011a8e:	461c      	mov	r4, r3
 8011a90:	e7f3      	b.n	8011a7a <__assert_func+0x12>
 8011a92:	bf00      	nop
 8011a94:	20000030 	.word	0x20000030
 8011a98:	08017f9f 	.word	0x08017f9f
 8011a9c:	08017fac 	.word	0x08017fac
 8011aa0:	08017fda 	.word	0x08017fda

08011aa4 <__errno>:
 8011aa4:	4b01      	ldr	r3, [pc, #4]	; (8011aac <__errno+0x8>)
 8011aa6:	6818      	ldr	r0, [r3, #0]
 8011aa8:	4770      	bx	lr
 8011aaa:	bf00      	nop
 8011aac:	20000030 	.word	0x20000030

08011ab0 <__sflush_r>:
 8011ab0:	898a      	ldrh	r2, [r1, #12]
 8011ab2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ab6:	4605      	mov	r5, r0
 8011ab8:	0710      	lsls	r0, r2, #28
 8011aba:	460c      	mov	r4, r1
 8011abc:	d458      	bmi.n	8011b70 <__sflush_r+0xc0>
 8011abe:	684b      	ldr	r3, [r1, #4]
 8011ac0:	2b00      	cmp	r3, #0
 8011ac2:	dc05      	bgt.n	8011ad0 <__sflush_r+0x20>
 8011ac4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011ac6:	2b00      	cmp	r3, #0
 8011ac8:	dc02      	bgt.n	8011ad0 <__sflush_r+0x20>
 8011aca:	2000      	movs	r0, #0
 8011acc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011ad0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011ad2:	2e00      	cmp	r6, #0
 8011ad4:	d0f9      	beq.n	8011aca <__sflush_r+0x1a>
 8011ad6:	2300      	movs	r3, #0
 8011ad8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011adc:	682f      	ldr	r7, [r5, #0]
 8011ade:	602b      	str	r3, [r5, #0]
 8011ae0:	d032      	beq.n	8011b48 <__sflush_r+0x98>
 8011ae2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011ae4:	89a3      	ldrh	r3, [r4, #12]
 8011ae6:	075a      	lsls	r2, r3, #29
 8011ae8:	d505      	bpl.n	8011af6 <__sflush_r+0x46>
 8011aea:	6863      	ldr	r3, [r4, #4]
 8011aec:	1ac0      	subs	r0, r0, r3
 8011aee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011af0:	b10b      	cbz	r3, 8011af6 <__sflush_r+0x46>
 8011af2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011af4:	1ac0      	subs	r0, r0, r3
 8011af6:	2300      	movs	r3, #0
 8011af8:	4602      	mov	r2, r0
 8011afa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011afc:	6a21      	ldr	r1, [r4, #32]
 8011afe:	4628      	mov	r0, r5
 8011b00:	47b0      	blx	r6
 8011b02:	1c43      	adds	r3, r0, #1
 8011b04:	89a3      	ldrh	r3, [r4, #12]
 8011b06:	d106      	bne.n	8011b16 <__sflush_r+0x66>
 8011b08:	6829      	ldr	r1, [r5, #0]
 8011b0a:	291d      	cmp	r1, #29
 8011b0c:	d82c      	bhi.n	8011b68 <__sflush_r+0xb8>
 8011b0e:	4a2a      	ldr	r2, [pc, #168]	; (8011bb8 <__sflush_r+0x108>)
 8011b10:	40ca      	lsrs	r2, r1
 8011b12:	07d6      	lsls	r6, r2, #31
 8011b14:	d528      	bpl.n	8011b68 <__sflush_r+0xb8>
 8011b16:	2200      	movs	r2, #0
 8011b18:	6062      	str	r2, [r4, #4]
 8011b1a:	04d9      	lsls	r1, r3, #19
 8011b1c:	6922      	ldr	r2, [r4, #16]
 8011b1e:	6022      	str	r2, [r4, #0]
 8011b20:	d504      	bpl.n	8011b2c <__sflush_r+0x7c>
 8011b22:	1c42      	adds	r2, r0, #1
 8011b24:	d101      	bne.n	8011b2a <__sflush_r+0x7a>
 8011b26:	682b      	ldr	r3, [r5, #0]
 8011b28:	b903      	cbnz	r3, 8011b2c <__sflush_r+0x7c>
 8011b2a:	6560      	str	r0, [r4, #84]	; 0x54
 8011b2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011b2e:	602f      	str	r7, [r5, #0]
 8011b30:	2900      	cmp	r1, #0
 8011b32:	d0ca      	beq.n	8011aca <__sflush_r+0x1a>
 8011b34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011b38:	4299      	cmp	r1, r3
 8011b3a:	d002      	beq.n	8011b42 <__sflush_r+0x92>
 8011b3c:	4628      	mov	r0, r5
 8011b3e:	f7ff fbdd 	bl	80112fc <_free_r>
 8011b42:	2000      	movs	r0, #0
 8011b44:	6360      	str	r0, [r4, #52]	; 0x34
 8011b46:	e7c1      	b.n	8011acc <__sflush_r+0x1c>
 8011b48:	6a21      	ldr	r1, [r4, #32]
 8011b4a:	2301      	movs	r3, #1
 8011b4c:	4628      	mov	r0, r5
 8011b4e:	47b0      	blx	r6
 8011b50:	1c41      	adds	r1, r0, #1
 8011b52:	d1c7      	bne.n	8011ae4 <__sflush_r+0x34>
 8011b54:	682b      	ldr	r3, [r5, #0]
 8011b56:	2b00      	cmp	r3, #0
 8011b58:	d0c4      	beq.n	8011ae4 <__sflush_r+0x34>
 8011b5a:	2b1d      	cmp	r3, #29
 8011b5c:	d001      	beq.n	8011b62 <__sflush_r+0xb2>
 8011b5e:	2b16      	cmp	r3, #22
 8011b60:	d101      	bne.n	8011b66 <__sflush_r+0xb6>
 8011b62:	602f      	str	r7, [r5, #0]
 8011b64:	e7b1      	b.n	8011aca <__sflush_r+0x1a>
 8011b66:	89a3      	ldrh	r3, [r4, #12]
 8011b68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011b6c:	81a3      	strh	r3, [r4, #12]
 8011b6e:	e7ad      	b.n	8011acc <__sflush_r+0x1c>
 8011b70:	690f      	ldr	r7, [r1, #16]
 8011b72:	2f00      	cmp	r7, #0
 8011b74:	d0a9      	beq.n	8011aca <__sflush_r+0x1a>
 8011b76:	0793      	lsls	r3, r2, #30
 8011b78:	680e      	ldr	r6, [r1, #0]
 8011b7a:	bf08      	it	eq
 8011b7c:	694b      	ldreq	r3, [r1, #20]
 8011b7e:	600f      	str	r7, [r1, #0]
 8011b80:	bf18      	it	ne
 8011b82:	2300      	movne	r3, #0
 8011b84:	eba6 0807 	sub.w	r8, r6, r7
 8011b88:	608b      	str	r3, [r1, #8]
 8011b8a:	f1b8 0f00 	cmp.w	r8, #0
 8011b8e:	dd9c      	ble.n	8011aca <__sflush_r+0x1a>
 8011b90:	6a21      	ldr	r1, [r4, #32]
 8011b92:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011b94:	4643      	mov	r3, r8
 8011b96:	463a      	mov	r2, r7
 8011b98:	4628      	mov	r0, r5
 8011b9a:	47b0      	blx	r6
 8011b9c:	2800      	cmp	r0, #0
 8011b9e:	dc06      	bgt.n	8011bae <__sflush_r+0xfe>
 8011ba0:	89a3      	ldrh	r3, [r4, #12]
 8011ba2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011ba6:	81a3      	strh	r3, [r4, #12]
 8011ba8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011bac:	e78e      	b.n	8011acc <__sflush_r+0x1c>
 8011bae:	4407      	add	r7, r0
 8011bb0:	eba8 0800 	sub.w	r8, r8, r0
 8011bb4:	e7e9      	b.n	8011b8a <__sflush_r+0xda>
 8011bb6:	bf00      	nop
 8011bb8:	20400001 	.word	0x20400001

08011bbc <_fflush_r>:
 8011bbc:	b538      	push	{r3, r4, r5, lr}
 8011bbe:	690b      	ldr	r3, [r1, #16]
 8011bc0:	4605      	mov	r5, r0
 8011bc2:	460c      	mov	r4, r1
 8011bc4:	b913      	cbnz	r3, 8011bcc <_fflush_r+0x10>
 8011bc6:	2500      	movs	r5, #0
 8011bc8:	4628      	mov	r0, r5
 8011bca:	bd38      	pop	{r3, r4, r5, pc}
 8011bcc:	b118      	cbz	r0, 8011bd6 <_fflush_r+0x1a>
 8011bce:	6983      	ldr	r3, [r0, #24]
 8011bd0:	b90b      	cbnz	r3, 8011bd6 <_fflush_r+0x1a>
 8011bd2:	f000 f887 	bl	8011ce4 <__sinit>
 8011bd6:	4b14      	ldr	r3, [pc, #80]	; (8011c28 <_fflush_r+0x6c>)
 8011bd8:	429c      	cmp	r4, r3
 8011bda:	d11b      	bne.n	8011c14 <_fflush_r+0x58>
 8011bdc:	686c      	ldr	r4, [r5, #4]
 8011bde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011be2:	2b00      	cmp	r3, #0
 8011be4:	d0ef      	beq.n	8011bc6 <_fflush_r+0xa>
 8011be6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011be8:	07d0      	lsls	r0, r2, #31
 8011bea:	d404      	bmi.n	8011bf6 <_fflush_r+0x3a>
 8011bec:	0599      	lsls	r1, r3, #22
 8011bee:	d402      	bmi.n	8011bf6 <_fflush_r+0x3a>
 8011bf0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011bf2:	f000 f927 	bl	8011e44 <__retarget_lock_acquire_recursive>
 8011bf6:	4628      	mov	r0, r5
 8011bf8:	4621      	mov	r1, r4
 8011bfa:	f7ff ff59 	bl	8011ab0 <__sflush_r>
 8011bfe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011c00:	07da      	lsls	r2, r3, #31
 8011c02:	4605      	mov	r5, r0
 8011c04:	d4e0      	bmi.n	8011bc8 <_fflush_r+0xc>
 8011c06:	89a3      	ldrh	r3, [r4, #12]
 8011c08:	059b      	lsls	r3, r3, #22
 8011c0a:	d4dd      	bmi.n	8011bc8 <_fflush_r+0xc>
 8011c0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011c0e:	f000 f91a 	bl	8011e46 <__retarget_lock_release_recursive>
 8011c12:	e7d9      	b.n	8011bc8 <_fflush_r+0xc>
 8011c14:	4b05      	ldr	r3, [pc, #20]	; (8011c2c <_fflush_r+0x70>)
 8011c16:	429c      	cmp	r4, r3
 8011c18:	d101      	bne.n	8011c1e <_fflush_r+0x62>
 8011c1a:	68ac      	ldr	r4, [r5, #8]
 8011c1c:	e7df      	b.n	8011bde <_fflush_r+0x22>
 8011c1e:	4b04      	ldr	r3, [pc, #16]	; (8011c30 <_fflush_r+0x74>)
 8011c20:	429c      	cmp	r4, r3
 8011c22:	bf08      	it	eq
 8011c24:	68ec      	ldreq	r4, [r5, #12]
 8011c26:	e7da      	b.n	8011bde <_fflush_r+0x22>
 8011c28:	08017ffc 	.word	0x08017ffc
 8011c2c:	0801801c 	.word	0x0801801c
 8011c30:	08017fdc 	.word	0x08017fdc

08011c34 <std>:
 8011c34:	2300      	movs	r3, #0
 8011c36:	b510      	push	{r4, lr}
 8011c38:	4604      	mov	r4, r0
 8011c3a:	e9c0 3300 	strd	r3, r3, [r0]
 8011c3e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011c42:	6083      	str	r3, [r0, #8]
 8011c44:	8181      	strh	r1, [r0, #12]
 8011c46:	6643      	str	r3, [r0, #100]	; 0x64
 8011c48:	81c2      	strh	r2, [r0, #14]
 8011c4a:	6183      	str	r3, [r0, #24]
 8011c4c:	4619      	mov	r1, r3
 8011c4e:	2208      	movs	r2, #8
 8011c50:	305c      	adds	r0, #92	; 0x5c
 8011c52:	f7ff fb4b 	bl	80112ec <memset>
 8011c56:	4b05      	ldr	r3, [pc, #20]	; (8011c6c <std+0x38>)
 8011c58:	6263      	str	r3, [r4, #36]	; 0x24
 8011c5a:	4b05      	ldr	r3, [pc, #20]	; (8011c70 <std+0x3c>)
 8011c5c:	62a3      	str	r3, [r4, #40]	; 0x28
 8011c5e:	4b05      	ldr	r3, [pc, #20]	; (8011c74 <std+0x40>)
 8011c60:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011c62:	4b05      	ldr	r3, [pc, #20]	; (8011c78 <std+0x44>)
 8011c64:	6224      	str	r4, [r4, #32]
 8011c66:	6323      	str	r3, [r4, #48]	; 0x30
 8011c68:	bd10      	pop	{r4, pc}
 8011c6a:	bf00      	nop
 8011c6c:	080127bd 	.word	0x080127bd
 8011c70:	080127df 	.word	0x080127df
 8011c74:	08012817 	.word	0x08012817
 8011c78:	0801283b 	.word	0x0801283b

08011c7c <_cleanup_r>:
 8011c7c:	4901      	ldr	r1, [pc, #4]	; (8011c84 <_cleanup_r+0x8>)
 8011c7e:	f000 b8c1 	b.w	8011e04 <_fwalk_reent>
 8011c82:	bf00      	nop
 8011c84:	08011bbd 	.word	0x08011bbd

08011c88 <__sfmoreglue>:
 8011c88:	b570      	push	{r4, r5, r6, lr}
 8011c8a:	1e4a      	subs	r2, r1, #1
 8011c8c:	2568      	movs	r5, #104	; 0x68
 8011c8e:	4355      	muls	r5, r2
 8011c90:	460e      	mov	r6, r1
 8011c92:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8011c96:	f7ff fb81 	bl	801139c <_malloc_r>
 8011c9a:	4604      	mov	r4, r0
 8011c9c:	b140      	cbz	r0, 8011cb0 <__sfmoreglue+0x28>
 8011c9e:	2100      	movs	r1, #0
 8011ca0:	e9c0 1600 	strd	r1, r6, [r0]
 8011ca4:	300c      	adds	r0, #12
 8011ca6:	60a0      	str	r0, [r4, #8]
 8011ca8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011cac:	f7ff fb1e 	bl	80112ec <memset>
 8011cb0:	4620      	mov	r0, r4
 8011cb2:	bd70      	pop	{r4, r5, r6, pc}

08011cb4 <__sfp_lock_acquire>:
 8011cb4:	4801      	ldr	r0, [pc, #4]	; (8011cbc <__sfp_lock_acquire+0x8>)
 8011cb6:	f000 b8c5 	b.w	8011e44 <__retarget_lock_acquire_recursive>
 8011cba:	bf00      	nop
 8011cbc:	2000d408 	.word	0x2000d408

08011cc0 <__sfp_lock_release>:
 8011cc0:	4801      	ldr	r0, [pc, #4]	; (8011cc8 <__sfp_lock_release+0x8>)
 8011cc2:	f000 b8c0 	b.w	8011e46 <__retarget_lock_release_recursive>
 8011cc6:	bf00      	nop
 8011cc8:	2000d408 	.word	0x2000d408

08011ccc <__sinit_lock_acquire>:
 8011ccc:	4801      	ldr	r0, [pc, #4]	; (8011cd4 <__sinit_lock_acquire+0x8>)
 8011cce:	f000 b8b9 	b.w	8011e44 <__retarget_lock_acquire_recursive>
 8011cd2:	bf00      	nop
 8011cd4:	2000d403 	.word	0x2000d403

08011cd8 <__sinit_lock_release>:
 8011cd8:	4801      	ldr	r0, [pc, #4]	; (8011ce0 <__sinit_lock_release+0x8>)
 8011cda:	f000 b8b4 	b.w	8011e46 <__retarget_lock_release_recursive>
 8011cde:	bf00      	nop
 8011ce0:	2000d403 	.word	0x2000d403

08011ce4 <__sinit>:
 8011ce4:	b510      	push	{r4, lr}
 8011ce6:	4604      	mov	r4, r0
 8011ce8:	f7ff fff0 	bl	8011ccc <__sinit_lock_acquire>
 8011cec:	69a3      	ldr	r3, [r4, #24]
 8011cee:	b11b      	cbz	r3, 8011cf8 <__sinit+0x14>
 8011cf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011cf4:	f7ff bff0 	b.w	8011cd8 <__sinit_lock_release>
 8011cf8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011cfc:	6523      	str	r3, [r4, #80]	; 0x50
 8011cfe:	4b13      	ldr	r3, [pc, #76]	; (8011d4c <__sinit+0x68>)
 8011d00:	4a13      	ldr	r2, [pc, #76]	; (8011d50 <__sinit+0x6c>)
 8011d02:	681b      	ldr	r3, [r3, #0]
 8011d04:	62a2      	str	r2, [r4, #40]	; 0x28
 8011d06:	42a3      	cmp	r3, r4
 8011d08:	bf04      	itt	eq
 8011d0a:	2301      	moveq	r3, #1
 8011d0c:	61a3      	streq	r3, [r4, #24]
 8011d0e:	4620      	mov	r0, r4
 8011d10:	f000 f820 	bl	8011d54 <__sfp>
 8011d14:	6060      	str	r0, [r4, #4]
 8011d16:	4620      	mov	r0, r4
 8011d18:	f000 f81c 	bl	8011d54 <__sfp>
 8011d1c:	60a0      	str	r0, [r4, #8]
 8011d1e:	4620      	mov	r0, r4
 8011d20:	f000 f818 	bl	8011d54 <__sfp>
 8011d24:	2200      	movs	r2, #0
 8011d26:	60e0      	str	r0, [r4, #12]
 8011d28:	2104      	movs	r1, #4
 8011d2a:	6860      	ldr	r0, [r4, #4]
 8011d2c:	f7ff ff82 	bl	8011c34 <std>
 8011d30:	68a0      	ldr	r0, [r4, #8]
 8011d32:	2201      	movs	r2, #1
 8011d34:	2109      	movs	r1, #9
 8011d36:	f7ff ff7d 	bl	8011c34 <std>
 8011d3a:	68e0      	ldr	r0, [r4, #12]
 8011d3c:	2202      	movs	r2, #2
 8011d3e:	2112      	movs	r1, #18
 8011d40:	f7ff ff78 	bl	8011c34 <std>
 8011d44:	2301      	movs	r3, #1
 8011d46:	61a3      	str	r3, [r4, #24]
 8011d48:	e7d2      	b.n	8011cf0 <__sinit+0xc>
 8011d4a:	bf00      	nop
 8011d4c:	08017ec4 	.word	0x08017ec4
 8011d50:	08011c7d 	.word	0x08011c7d

08011d54 <__sfp>:
 8011d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011d56:	4607      	mov	r7, r0
 8011d58:	f7ff ffac 	bl	8011cb4 <__sfp_lock_acquire>
 8011d5c:	4b1e      	ldr	r3, [pc, #120]	; (8011dd8 <__sfp+0x84>)
 8011d5e:	681e      	ldr	r6, [r3, #0]
 8011d60:	69b3      	ldr	r3, [r6, #24]
 8011d62:	b913      	cbnz	r3, 8011d6a <__sfp+0x16>
 8011d64:	4630      	mov	r0, r6
 8011d66:	f7ff ffbd 	bl	8011ce4 <__sinit>
 8011d6a:	3648      	adds	r6, #72	; 0x48
 8011d6c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011d70:	3b01      	subs	r3, #1
 8011d72:	d503      	bpl.n	8011d7c <__sfp+0x28>
 8011d74:	6833      	ldr	r3, [r6, #0]
 8011d76:	b30b      	cbz	r3, 8011dbc <__sfp+0x68>
 8011d78:	6836      	ldr	r6, [r6, #0]
 8011d7a:	e7f7      	b.n	8011d6c <__sfp+0x18>
 8011d7c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011d80:	b9d5      	cbnz	r5, 8011db8 <__sfp+0x64>
 8011d82:	4b16      	ldr	r3, [pc, #88]	; (8011ddc <__sfp+0x88>)
 8011d84:	60e3      	str	r3, [r4, #12]
 8011d86:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8011d8a:	6665      	str	r5, [r4, #100]	; 0x64
 8011d8c:	f000 f859 	bl	8011e42 <__retarget_lock_init_recursive>
 8011d90:	f7ff ff96 	bl	8011cc0 <__sfp_lock_release>
 8011d94:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8011d98:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011d9c:	6025      	str	r5, [r4, #0]
 8011d9e:	61a5      	str	r5, [r4, #24]
 8011da0:	2208      	movs	r2, #8
 8011da2:	4629      	mov	r1, r5
 8011da4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011da8:	f7ff faa0 	bl	80112ec <memset>
 8011dac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011db0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011db4:	4620      	mov	r0, r4
 8011db6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011db8:	3468      	adds	r4, #104	; 0x68
 8011dba:	e7d9      	b.n	8011d70 <__sfp+0x1c>
 8011dbc:	2104      	movs	r1, #4
 8011dbe:	4638      	mov	r0, r7
 8011dc0:	f7ff ff62 	bl	8011c88 <__sfmoreglue>
 8011dc4:	4604      	mov	r4, r0
 8011dc6:	6030      	str	r0, [r6, #0]
 8011dc8:	2800      	cmp	r0, #0
 8011dca:	d1d5      	bne.n	8011d78 <__sfp+0x24>
 8011dcc:	f7ff ff78 	bl	8011cc0 <__sfp_lock_release>
 8011dd0:	230c      	movs	r3, #12
 8011dd2:	603b      	str	r3, [r7, #0]
 8011dd4:	e7ee      	b.n	8011db4 <__sfp+0x60>
 8011dd6:	bf00      	nop
 8011dd8:	08017ec4 	.word	0x08017ec4
 8011ddc:	ffff0001 	.word	0xffff0001

08011de0 <fiprintf>:
 8011de0:	b40e      	push	{r1, r2, r3}
 8011de2:	b503      	push	{r0, r1, lr}
 8011de4:	4601      	mov	r1, r0
 8011de6:	ab03      	add	r3, sp, #12
 8011de8:	4805      	ldr	r0, [pc, #20]	; (8011e00 <fiprintf+0x20>)
 8011dea:	f853 2b04 	ldr.w	r2, [r3], #4
 8011dee:	6800      	ldr	r0, [r0, #0]
 8011df0:	9301      	str	r3, [sp, #4]
 8011df2:	f000 fa1f 	bl	8012234 <_vfiprintf_r>
 8011df6:	b002      	add	sp, #8
 8011df8:	f85d eb04 	ldr.w	lr, [sp], #4
 8011dfc:	b003      	add	sp, #12
 8011dfe:	4770      	bx	lr
 8011e00:	20000030 	.word	0x20000030

08011e04 <_fwalk_reent>:
 8011e04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011e08:	4606      	mov	r6, r0
 8011e0a:	4688      	mov	r8, r1
 8011e0c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011e10:	2700      	movs	r7, #0
 8011e12:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011e16:	f1b9 0901 	subs.w	r9, r9, #1
 8011e1a:	d505      	bpl.n	8011e28 <_fwalk_reent+0x24>
 8011e1c:	6824      	ldr	r4, [r4, #0]
 8011e1e:	2c00      	cmp	r4, #0
 8011e20:	d1f7      	bne.n	8011e12 <_fwalk_reent+0xe>
 8011e22:	4638      	mov	r0, r7
 8011e24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011e28:	89ab      	ldrh	r3, [r5, #12]
 8011e2a:	2b01      	cmp	r3, #1
 8011e2c:	d907      	bls.n	8011e3e <_fwalk_reent+0x3a>
 8011e2e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011e32:	3301      	adds	r3, #1
 8011e34:	d003      	beq.n	8011e3e <_fwalk_reent+0x3a>
 8011e36:	4629      	mov	r1, r5
 8011e38:	4630      	mov	r0, r6
 8011e3a:	47c0      	blx	r8
 8011e3c:	4307      	orrs	r7, r0
 8011e3e:	3568      	adds	r5, #104	; 0x68
 8011e40:	e7e9      	b.n	8011e16 <_fwalk_reent+0x12>

08011e42 <__retarget_lock_init_recursive>:
 8011e42:	4770      	bx	lr

08011e44 <__retarget_lock_acquire_recursive>:
 8011e44:	4770      	bx	lr

08011e46 <__retarget_lock_release_recursive>:
 8011e46:	4770      	bx	lr

08011e48 <__swhatbuf_r>:
 8011e48:	b570      	push	{r4, r5, r6, lr}
 8011e4a:	460e      	mov	r6, r1
 8011e4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011e50:	2900      	cmp	r1, #0
 8011e52:	b096      	sub	sp, #88	; 0x58
 8011e54:	4614      	mov	r4, r2
 8011e56:	461d      	mov	r5, r3
 8011e58:	da07      	bge.n	8011e6a <__swhatbuf_r+0x22>
 8011e5a:	2300      	movs	r3, #0
 8011e5c:	602b      	str	r3, [r5, #0]
 8011e5e:	89b3      	ldrh	r3, [r6, #12]
 8011e60:	061a      	lsls	r2, r3, #24
 8011e62:	d410      	bmi.n	8011e86 <__swhatbuf_r+0x3e>
 8011e64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011e68:	e00e      	b.n	8011e88 <__swhatbuf_r+0x40>
 8011e6a:	466a      	mov	r2, sp
 8011e6c:	f000 fd14 	bl	8012898 <_fstat_r>
 8011e70:	2800      	cmp	r0, #0
 8011e72:	dbf2      	blt.n	8011e5a <__swhatbuf_r+0x12>
 8011e74:	9a01      	ldr	r2, [sp, #4]
 8011e76:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011e7a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011e7e:	425a      	negs	r2, r3
 8011e80:	415a      	adcs	r2, r3
 8011e82:	602a      	str	r2, [r5, #0]
 8011e84:	e7ee      	b.n	8011e64 <__swhatbuf_r+0x1c>
 8011e86:	2340      	movs	r3, #64	; 0x40
 8011e88:	2000      	movs	r0, #0
 8011e8a:	6023      	str	r3, [r4, #0]
 8011e8c:	b016      	add	sp, #88	; 0x58
 8011e8e:	bd70      	pop	{r4, r5, r6, pc}

08011e90 <__smakebuf_r>:
 8011e90:	898b      	ldrh	r3, [r1, #12]
 8011e92:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011e94:	079d      	lsls	r5, r3, #30
 8011e96:	4606      	mov	r6, r0
 8011e98:	460c      	mov	r4, r1
 8011e9a:	d507      	bpl.n	8011eac <__smakebuf_r+0x1c>
 8011e9c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011ea0:	6023      	str	r3, [r4, #0]
 8011ea2:	6123      	str	r3, [r4, #16]
 8011ea4:	2301      	movs	r3, #1
 8011ea6:	6163      	str	r3, [r4, #20]
 8011ea8:	b002      	add	sp, #8
 8011eaa:	bd70      	pop	{r4, r5, r6, pc}
 8011eac:	ab01      	add	r3, sp, #4
 8011eae:	466a      	mov	r2, sp
 8011eb0:	f7ff ffca 	bl	8011e48 <__swhatbuf_r>
 8011eb4:	9900      	ldr	r1, [sp, #0]
 8011eb6:	4605      	mov	r5, r0
 8011eb8:	4630      	mov	r0, r6
 8011eba:	f7ff fa6f 	bl	801139c <_malloc_r>
 8011ebe:	b948      	cbnz	r0, 8011ed4 <__smakebuf_r+0x44>
 8011ec0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011ec4:	059a      	lsls	r2, r3, #22
 8011ec6:	d4ef      	bmi.n	8011ea8 <__smakebuf_r+0x18>
 8011ec8:	f023 0303 	bic.w	r3, r3, #3
 8011ecc:	f043 0302 	orr.w	r3, r3, #2
 8011ed0:	81a3      	strh	r3, [r4, #12]
 8011ed2:	e7e3      	b.n	8011e9c <__smakebuf_r+0xc>
 8011ed4:	4b0d      	ldr	r3, [pc, #52]	; (8011f0c <__smakebuf_r+0x7c>)
 8011ed6:	62b3      	str	r3, [r6, #40]	; 0x28
 8011ed8:	89a3      	ldrh	r3, [r4, #12]
 8011eda:	6020      	str	r0, [r4, #0]
 8011edc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011ee0:	81a3      	strh	r3, [r4, #12]
 8011ee2:	9b00      	ldr	r3, [sp, #0]
 8011ee4:	6163      	str	r3, [r4, #20]
 8011ee6:	9b01      	ldr	r3, [sp, #4]
 8011ee8:	6120      	str	r0, [r4, #16]
 8011eea:	b15b      	cbz	r3, 8011f04 <__smakebuf_r+0x74>
 8011eec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011ef0:	4630      	mov	r0, r6
 8011ef2:	f000 fce3 	bl	80128bc <_isatty_r>
 8011ef6:	b128      	cbz	r0, 8011f04 <__smakebuf_r+0x74>
 8011ef8:	89a3      	ldrh	r3, [r4, #12]
 8011efa:	f023 0303 	bic.w	r3, r3, #3
 8011efe:	f043 0301 	orr.w	r3, r3, #1
 8011f02:	81a3      	strh	r3, [r4, #12]
 8011f04:	89a0      	ldrh	r0, [r4, #12]
 8011f06:	4305      	orrs	r5, r0
 8011f08:	81a5      	strh	r5, [r4, #12]
 8011f0a:	e7cd      	b.n	8011ea8 <__smakebuf_r+0x18>
 8011f0c:	08011c7d 	.word	0x08011c7d

08011f10 <__malloc_lock>:
 8011f10:	4801      	ldr	r0, [pc, #4]	; (8011f18 <__malloc_lock+0x8>)
 8011f12:	f7ff bf97 	b.w	8011e44 <__retarget_lock_acquire_recursive>
 8011f16:	bf00      	nop
 8011f18:	2000d404 	.word	0x2000d404

08011f1c <__malloc_unlock>:
 8011f1c:	4801      	ldr	r0, [pc, #4]	; (8011f24 <__malloc_unlock+0x8>)
 8011f1e:	f7ff bf92 	b.w	8011e46 <__retarget_lock_release_recursive>
 8011f22:	bf00      	nop
 8011f24:	2000d404 	.word	0x2000d404

08011f28 <__ssputs_r>:
 8011f28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011f2c:	688e      	ldr	r6, [r1, #8]
 8011f2e:	429e      	cmp	r6, r3
 8011f30:	4682      	mov	sl, r0
 8011f32:	460c      	mov	r4, r1
 8011f34:	4690      	mov	r8, r2
 8011f36:	461f      	mov	r7, r3
 8011f38:	d838      	bhi.n	8011fac <__ssputs_r+0x84>
 8011f3a:	898a      	ldrh	r2, [r1, #12]
 8011f3c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011f40:	d032      	beq.n	8011fa8 <__ssputs_r+0x80>
 8011f42:	6825      	ldr	r5, [r4, #0]
 8011f44:	6909      	ldr	r1, [r1, #16]
 8011f46:	eba5 0901 	sub.w	r9, r5, r1
 8011f4a:	6965      	ldr	r5, [r4, #20]
 8011f4c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011f50:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011f54:	3301      	adds	r3, #1
 8011f56:	444b      	add	r3, r9
 8011f58:	106d      	asrs	r5, r5, #1
 8011f5a:	429d      	cmp	r5, r3
 8011f5c:	bf38      	it	cc
 8011f5e:	461d      	movcc	r5, r3
 8011f60:	0553      	lsls	r3, r2, #21
 8011f62:	d531      	bpl.n	8011fc8 <__ssputs_r+0xa0>
 8011f64:	4629      	mov	r1, r5
 8011f66:	f7ff fa19 	bl	801139c <_malloc_r>
 8011f6a:	4606      	mov	r6, r0
 8011f6c:	b950      	cbnz	r0, 8011f84 <__ssputs_r+0x5c>
 8011f6e:	230c      	movs	r3, #12
 8011f70:	f8ca 3000 	str.w	r3, [sl]
 8011f74:	89a3      	ldrh	r3, [r4, #12]
 8011f76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011f7a:	81a3      	strh	r3, [r4, #12]
 8011f7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011f80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011f84:	6921      	ldr	r1, [r4, #16]
 8011f86:	464a      	mov	r2, r9
 8011f88:	f7ff f988 	bl	801129c <memcpy>
 8011f8c:	89a3      	ldrh	r3, [r4, #12]
 8011f8e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011f92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011f96:	81a3      	strh	r3, [r4, #12]
 8011f98:	6126      	str	r6, [r4, #16]
 8011f9a:	6165      	str	r5, [r4, #20]
 8011f9c:	444e      	add	r6, r9
 8011f9e:	eba5 0509 	sub.w	r5, r5, r9
 8011fa2:	6026      	str	r6, [r4, #0]
 8011fa4:	60a5      	str	r5, [r4, #8]
 8011fa6:	463e      	mov	r6, r7
 8011fa8:	42be      	cmp	r6, r7
 8011faa:	d900      	bls.n	8011fae <__ssputs_r+0x86>
 8011fac:	463e      	mov	r6, r7
 8011fae:	4632      	mov	r2, r6
 8011fb0:	6820      	ldr	r0, [r4, #0]
 8011fb2:	4641      	mov	r1, r8
 8011fb4:	f7ff f980 	bl	80112b8 <memmove>
 8011fb8:	68a3      	ldr	r3, [r4, #8]
 8011fba:	6822      	ldr	r2, [r4, #0]
 8011fbc:	1b9b      	subs	r3, r3, r6
 8011fbe:	4432      	add	r2, r6
 8011fc0:	60a3      	str	r3, [r4, #8]
 8011fc2:	6022      	str	r2, [r4, #0]
 8011fc4:	2000      	movs	r0, #0
 8011fc6:	e7db      	b.n	8011f80 <__ssputs_r+0x58>
 8011fc8:	462a      	mov	r2, r5
 8011fca:	f000 fc99 	bl	8012900 <_realloc_r>
 8011fce:	4606      	mov	r6, r0
 8011fd0:	2800      	cmp	r0, #0
 8011fd2:	d1e1      	bne.n	8011f98 <__ssputs_r+0x70>
 8011fd4:	6921      	ldr	r1, [r4, #16]
 8011fd6:	4650      	mov	r0, sl
 8011fd8:	f7ff f990 	bl	80112fc <_free_r>
 8011fdc:	e7c7      	b.n	8011f6e <__ssputs_r+0x46>
	...

08011fe0 <_svfiprintf_r>:
 8011fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011fe4:	4698      	mov	r8, r3
 8011fe6:	898b      	ldrh	r3, [r1, #12]
 8011fe8:	061b      	lsls	r3, r3, #24
 8011fea:	b09d      	sub	sp, #116	; 0x74
 8011fec:	4607      	mov	r7, r0
 8011fee:	460d      	mov	r5, r1
 8011ff0:	4614      	mov	r4, r2
 8011ff2:	d50e      	bpl.n	8012012 <_svfiprintf_r+0x32>
 8011ff4:	690b      	ldr	r3, [r1, #16]
 8011ff6:	b963      	cbnz	r3, 8012012 <_svfiprintf_r+0x32>
 8011ff8:	2140      	movs	r1, #64	; 0x40
 8011ffa:	f7ff f9cf 	bl	801139c <_malloc_r>
 8011ffe:	6028      	str	r0, [r5, #0]
 8012000:	6128      	str	r0, [r5, #16]
 8012002:	b920      	cbnz	r0, 801200e <_svfiprintf_r+0x2e>
 8012004:	230c      	movs	r3, #12
 8012006:	603b      	str	r3, [r7, #0]
 8012008:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801200c:	e0d1      	b.n	80121b2 <_svfiprintf_r+0x1d2>
 801200e:	2340      	movs	r3, #64	; 0x40
 8012010:	616b      	str	r3, [r5, #20]
 8012012:	2300      	movs	r3, #0
 8012014:	9309      	str	r3, [sp, #36]	; 0x24
 8012016:	2320      	movs	r3, #32
 8012018:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801201c:	f8cd 800c 	str.w	r8, [sp, #12]
 8012020:	2330      	movs	r3, #48	; 0x30
 8012022:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80121cc <_svfiprintf_r+0x1ec>
 8012026:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801202a:	f04f 0901 	mov.w	r9, #1
 801202e:	4623      	mov	r3, r4
 8012030:	469a      	mov	sl, r3
 8012032:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012036:	b10a      	cbz	r2, 801203c <_svfiprintf_r+0x5c>
 8012038:	2a25      	cmp	r2, #37	; 0x25
 801203a:	d1f9      	bne.n	8012030 <_svfiprintf_r+0x50>
 801203c:	ebba 0b04 	subs.w	fp, sl, r4
 8012040:	d00b      	beq.n	801205a <_svfiprintf_r+0x7a>
 8012042:	465b      	mov	r3, fp
 8012044:	4622      	mov	r2, r4
 8012046:	4629      	mov	r1, r5
 8012048:	4638      	mov	r0, r7
 801204a:	f7ff ff6d 	bl	8011f28 <__ssputs_r>
 801204e:	3001      	adds	r0, #1
 8012050:	f000 80aa 	beq.w	80121a8 <_svfiprintf_r+0x1c8>
 8012054:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012056:	445a      	add	r2, fp
 8012058:	9209      	str	r2, [sp, #36]	; 0x24
 801205a:	f89a 3000 	ldrb.w	r3, [sl]
 801205e:	2b00      	cmp	r3, #0
 8012060:	f000 80a2 	beq.w	80121a8 <_svfiprintf_r+0x1c8>
 8012064:	2300      	movs	r3, #0
 8012066:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801206a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801206e:	f10a 0a01 	add.w	sl, sl, #1
 8012072:	9304      	str	r3, [sp, #16]
 8012074:	9307      	str	r3, [sp, #28]
 8012076:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801207a:	931a      	str	r3, [sp, #104]	; 0x68
 801207c:	4654      	mov	r4, sl
 801207e:	2205      	movs	r2, #5
 8012080:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012084:	4851      	ldr	r0, [pc, #324]	; (80121cc <_svfiprintf_r+0x1ec>)
 8012086:	f7ee f8bb 	bl	8000200 <memchr>
 801208a:	9a04      	ldr	r2, [sp, #16]
 801208c:	b9d8      	cbnz	r0, 80120c6 <_svfiprintf_r+0xe6>
 801208e:	06d0      	lsls	r0, r2, #27
 8012090:	bf44      	itt	mi
 8012092:	2320      	movmi	r3, #32
 8012094:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012098:	0711      	lsls	r1, r2, #28
 801209a:	bf44      	itt	mi
 801209c:	232b      	movmi	r3, #43	; 0x2b
 801209e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80120a2:	f89a 3000 	ldrb.w	r3, [sl]
 80120a6:	2b2a      	cmp	r3, #42	; 0x2a
 80120a8:	d015      	beq.n	80120d6 <_svfiprintf_r+0xf6>
 80120aa:	9a07      	ldr	r2, [sp, #28]
 80120ac:	4654      	mov	r4, sl
 80120ae:	2000      	movs	r0, #0
 80120b0:	f04f 0c0a 	mov.w	ip, #10
 80120b4:	4621      	mov	r1, r4
 80120b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80120ba:	3b30      	subs	r3, #48	; 0x30
 80120bc:	2b09      	cmp	r3, #9
 80120be:	d94e      	bls.n	801215e <_svfiprintf_r+0x17e>
 80120c0:	b1b0      	cbz	r0, 80120f0 <_svfiprintf_r+0x110>
 80120c2:	9207      	str	r2, [sp, #28]
 80120c4:	e014      	b.n	80120f0 <_svfiprintf_r+0x110>
 80120c6:	eba0 0308 	sub.w	r3, r0, r8
 80120ca:	fa09 f303 	lsl.w	r3, r9, r3
 80120ce:	4313      	orrs	r3, r2
 80120d0:	9304      	str	r3, [sp, #16]
 80120d2:	46a2      	mov	sl, r4
 80120d4:	e7d2      	b.n	801207c <_svfiprintf_r+0x9c>
 80120d6:	9b03      	ldr	r3, [sp, #12]
 80120d8:	1d19      	adds	r1, r3, #4
 80120da:	681b      	ldr	r3, [r3, #0]
 80120dc:	9103      	str	r1, [sp, #12]
 80120de:	2b00      	cmp	r3, #0
 80120e0:	bfbb      	ittet	lt
 80120e2:	425b      	neglt	r3, r3
 80120e4:	f042 0202 	orrlt.w	r2, r2, #2
 80120e8:	9307      	strge	r3, [sp, #28]
 80120ea:	9307      	strlt	r3, [sp, #28]
 80120ec:	bfb8      	it	lt
 80120ee:	9204      	strlt	r2, [sp, #16]
 80120f0:	7823      	ldrb	r3, [r4, #0]
 80120f2:	2b2e      	cmp	r3, #46	; 0x2e
 80120f4:	d10c      	bne.n	8012110 <_svfiprintf_r+0x130>
 80120f6:	7863      	ldrb	r3, [r4, #1]
 80120f8:	2b2a      	cmp	r3, #42	; 0x2a
 80120fa:	d135      	bne.n	8012168 <_svfiprintf_r+0x188>
 80120fc:	9b03      	ldr	r3, [sp, #12]
 80120fe:	1d1a      	adds	r2, r3, #4
 8012100:	681b      	ldr	r3, [r3, #0]
 8012102:	9203      	str	r2, [sp, #12]
 8012104:	2b00      	cmp	r3, #0
 8012106:	bfb8      	it	lt
 8012108:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801210c:	3402      	adds	r4, #2
 801210e:	9305      	str	r3, [sp, #20]
 8012110:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80121dc <_svfiprintf_r+0x1fc>
 8012114:	7821      	ldrb	r1, [r4, #0]
 8012116:	2203      	movs	r2, #3
 8012118:	4650      	mov	r0, sl
 801211a:	f7ee f871 	bl	8000200 <memchr>
 801211e:	b140      	cbz	r0, 8012132 <_svfiprintf_r+0x152>
 8012120:	2340      	movs	r3, #64	; 0x40
 8012122:	eba0 000a 	sub.w	r0, r0, sl
 8012126:	fa03 f000 	lsl.w	r0, r3, r0
 801212a:	9b04      	ldr	r3, [sp, #16]
 801212c:	4303      	orrs	r3, r0
 801212e:	3401      	adds	r4, #1
 8012130:	9304      	str	r3, [sp, #16]
 8012132:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012136:	4826      	ldr	r0, [pc, #152]	; (80121d0 <_svfiprintf_r+0x1f0>)
 8012138:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801213c:	2206      	movs	r2, #6
 801213e:	f7ee f85f 	bl	8000200 <memchr>
 8012142:	2800      	cmp	r0, #0
 8012144:	d038      	beq.n	80121b8 <_svfiprintf_r+0x1d8>
 8012146:	4b23      	ldr	r3, [pc, #140]	; (80121d4 <_svfiprintf_r+0x1f4>)
 8012148:	bb1b      	cbnz	r3, 8012192 <_svfiprintf_r+0x1b2>
 801214a:	9b03      	ldr	r3, [sp, #12]
 801214c:	3307      	adds	r3, #7
 801214e:	f023 0307 	bic.w	r3, r3, #7
 8012152:	3308      	adds	r3, #8
 8012154:	9303      	str	r3, [sp, #12]
 8012156:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012158:	4433      	add	r3, r6
 801215a:	9309      	str	r3, [sp, #36]	; 0x24
 801215c:	e767      	b.n	801202e <_svfiprintf_r+0x4e>
 801215e:	fb0c 3202 	mla	r2, ip, r2, r3
 8012162:	460c      	mov	r4, r1
 8012164:	2001      	movs	r0, #1
 8012166:	e7a5      	b.n	80120b4 <_svfiprintf_r+0xd4>
 8012168:	2300      	movs	r3, #0
 801216a:	3401      	adds	r4, #1
 801216c:	9305      	str	r3, [sp, #20]
 801216e:	4619      	mov	r1, r3
 8012170:	f04f 0c0a 	mov.w	ip, #10
 8012174:	4620      	mov	r0, r4
 8012176:	f810 2b01 	ldrb.w	r2, [r0], #1
 801217a:	3a30      	subs	r2, #48	; 0x30
 801217c:	2a09      	cmp	r2, #9
 801217e:	d903      	bls.n	8012188 <_svfiprintf_r+0x1a8>
 8012180:	2b00      	cmp	r3, #0
 8012182:	d0c5      	beq.n	8012110 <_svfiprintf_r+0x130>
 8012184:	9105      	str	r1, [sp, #20]
 8012186:	e7c3      	b.n	8012110 <_svfiprintf_r+0x130>
 8012188:	fb0c 2101 	mla	r1, ip, r1, r2
 801218c:	4604      	mov	r4, r0
 801218e:	2301      	movs	r3, #1
 8012190:	e7f0      	b.n	8012174 <_svfiprintf_r+0x194>
 8012192:	ab03      	add	r3, sp, #12
 8012194:	9300      	str	r3, [sp, #0]
 8012196:	462a      	mov	r2, r5
 8012198:	4b0f      	ldr	r3, [pc, #60]	; (80121d8 <_svfiprintf_r+0x1f8>)
 801219a:	a904      	add	r1, sp, #16
 801219c:	4638      	mov	r0, r7
 801219e:	f3af 8000 	nop.w
 80121a2:	1c42      	adds	r2, r0, #1
 80121a4:	4606      	mov	r6, r0
 80121a6:	d1d6      	bne.n	8012156 <_svfiprintf_r+0x176>
 80121a8:	89ab      	ldrh	r3, [r5, #12]
 80121aa:	065b      	lsls	r3, r3, #25
 80121ac:	f53f af2c 	bmi.w	8012008 <_svfiprintf_r+0x28>
 80121b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80121b2:	b01d      	add	sp, #116	; 0x74
 80121b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80121b8:	ab03      	add	r3, sp, #12
 80121ba:	9300      	str	r3, [sp, #0]
 80121bc:	462a      	mov	r2, r5
 80121be:	4b06      	ldr	r3, [pc, #24]	; (80121d8 <_svfiprintf_r+0x1f8>)
 80121c0:	a904      	add	r1, sp, #16
 80121c2:	4638      	mov	r0, r7
 80121c4:	f000 f9d4 	bl	8012570 <_printf_i>
 80121c8:	e7eb      	b.n	80121a2 <_svfiprintf_r+0x1c2>
 80121ca:	bf00      	nop
 80121cc:	0801803c 	.word	0x0801803c
 80121d0:	08018046 	.word	0x08018046
 80121d4:	00000000 	.word	0x00000000
 80121d8:	08011f29 	.word	0x08011f29
 80121dc:	08018042 	.word	0x08018042

080121e0 <__sfputc_r>:
 80121e0:	6893      	ldr	r3, [r2, #8]
 80121e2:	3b01      	subs	r3, #1
 80121e4:	2b00      	cmp	r3, #0
 80121e6:	b410      	push	{r4}
 80121e8:	6093      	str	r3, [r2, #8]
 80121ea:	da08      	bge.n	80121fe <__sfputc_r+0x1e>
 80121ec:	6994      	ldr	r4, [r2, #24]
 80121ee:	42a3      	cmp	r3, r4
 80121f0:	db01      	blt.n	80121f6 <__sfputc_r+0x16>
 80121f2:	290a      	cmp	r1, #10
 80121f4:	d103      	bne.n	80121fe <__sfputc_r+0x1e>
 80121f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80121fa:	f7ff bb75 	b.w	80118e8 <__swbuf_r>
 80121fe:	6813      	ldr	r3, [r2, #0]
 8012200:	1c58      	adds	r0, r3, #1
 8012202:	6010      	str	r0, [r2, #0]
 8012204:	7019      	strb	r1, [r3, #0]
 8012206:	4608      	mov	r0, r1
 8012208:	f85d 4b04 	ldr.w	r4, [sp], #4
 801220c:	4770      	bx	lr

0801220e <__sfputs_r>:
 801220e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012210:	4606      	mov	r6, r0
 8012212:	460f      	mov	r7, r1
 8012214:	4614      	mov	r4, r2
 8012216:	18d5      	adds	r5, r2, r3
 8012218:	42ac      	cmp	r4, r5
 801221a:	d101      	bne.n	8012220 <__sfputs_r+0x12>
 801221c:	2000      	movs	r0, #0
 801221e:	e007      	b.n	8012230 <__sfputs_r+0x22>
 8012220:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012224:	463a      	mov	r2, r7
 8012226:	4630      	mov	r0, r6
 8012228:	f7ff ffda 	bl	80121e0 <__sfputc_r>
 801222c:	1c43      	adds	r3, r0, #1
 801222e:	d1f3      	bne.n	8012218 <__sfputs_r+0xa>
 8012230:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012234 <_vfiprintf_r>:
 8012234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012238:	460d      	mov	r5, r1
 801223a:	b09d      	sub	sp, #116	; 0x74
 801223c:	4614      	mov	r4, r2
 801223e:	4698      	mov	r8, r3
 8012240:	4606      	mov	r6, r0
 8012242:	b118      	cbz	r0, 801224c <_vfiprintf_r+0x18>
 8012244:	6983      	ldr	r3, [r0, #24]
 8012246:	b90b      	cbnz	r3, 801224c <_vfiprintf_r+0x18>
 8012248:	f7ff fd4c 	bl	8011ce4 <__sinit>
 801224c:	4b89      	ldr	r3, [pc, #548]	; (8012474 <_vfiprintf_r+0x240>)
 801224e:	429d      	cmp	r5, r3
 8012250:	d11b      	bne.n	801228a <_vfiprintf_r+0x56>
 8012252:	6875      	ldr	r5, [r6, #4]
 8012254:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012256:	07d9      	lsls	r1, r3, #31
 8012258:	d405      	bmi.n	8012266 <_vfiprintf_r+0x32>
 801225a:	89ab      	ldrh	r3, [r5, #12]
 801225c:	059a      	lsls	r2, r3, #22
 801225e:	d402      	bmi.n	8012266 <_vfiprintf_r+0x32>
 8012260:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012262:	f7ff fdef 	bl	8011e44 <__retarget_lock_acquire_recursive>
 8012266:	89ab      	ldrh	r3, [r5, #12]
 8012268:	071b      	lsls	r3, r3, #28
 801226a:	d501      	bpl.n	8012270 <_vfiprintf_r+0x3c>
 801226c:	692b      	ldr	r3, [r5, #16]
 801226e:	b9eb      	cbnz	r3, 80122ac <_vfiprintf_r+0x78>
 8012270:	4629      	mov	r1, r5
 8012272:	4630      	mov	r0, r6
 8012274:	f7ff fb8a 	bl	801198c <__swsetup_r>
 8012278:	b1c0      	cbz	r0, 80122ac <_vfiprintf_r+0x78>
 801227a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801227c:	07dc      	lsls	r4, r3, #31
 801227e:	d50e      	bpl.n	801229e <_vfiprintf_r+0x6a>
 8012280:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012284:	b01d      	add	sp, #116	; 0x74
 8012286:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801228a:	4b7b      	ldr	r3, [pc, #492]	; (8012478 <_vfiprintf_r+0x244>)
 801228c:	429d      	cmp	r5, r3
 801228e:	d101      	bne.n	8012294 <_vfiprintf_r+0x60>
 8012290:	68b5      	ldr	r5, [r6, #8]
 8012292:	e7df      	b.n	8012254 <_vfiprintf_r+0x20>
 8012294:	4b79      	ldr	r3, [pc, #484]	; (801247c <_vfiprintf_r+0x248>)
 8012296:	429d      	cmp	r5, r3
 8012298:	bf08      	it	eq
 801229a:	68f5      	ldreq	r5, [r6, #12]
 801229c:	e7da      	b.n	8012254 <_vfiprintf_r+0x20>
 801229e:	89ab      	ldrh	r3, [r5, #12]
 80122a0:	0598      	lsls	r0, r3, #22
 80122a2:	d4ed      	bmi.n	8012280 <_vfiprintf_r+0x4c>
 80122a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80122a6:	f7ff fdce 	bl	8011e46 <__retarget_lock_release_recursive>
 80122aa:	e7e9      	b.n	8012280 <_vfiprintf_r+0x4c>
 80122ac:	2300      	movs	r3, #0
 80122ae:	9309      	str	r3, [sp, #36]	; 0x24
 80122b0:	2320      	movs	r3, #32
 80122b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80122b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80122ba:	2330      	movs	r3, #48	; 0x30
 80122bc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8012480 <_vfiprintf_r+0x24c>
 80122c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80122c4:	f04f 0901 	mov.w	r9, #1
 80122c8:	4623      	mov	r3, r4
 80122ca:	469a      	mov	sl, r3
 80122cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80122d0:	b10a      	cbz	r2, 80122d6 <_vfiprintf_r+0xa2>
 80122d2:	2a25      	cmp	r2, #37	; 0x25
 80122d4:	d1f9      	bne.n	80122ca <_vfiprintf_r+0x96>
 80122d6:	ebba 0b04 	subs.w	fp, sl, r4
 80122da:	d00b      	beq.n	80122f4 <_vfiprintf_r+0xc0>
 80122dc:	465b      	mov	r3, fp
 80122de:	4622      	mov	r2, r4
 80122e0:	4629      	mov	r1, r5
 80122e2:	4630      	mov	r0, r6
 80122e4:	f7ff ff93 	bl	801220e <__sfputs_r>
 80122e8:	3001      	adds	r0, #1
 80122ea:	f000 80aa 	beq.w	8012442 <_vfiprintf_r+0x20e>
 80122ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80122f0:	445a      	add	r2, fp
 80122f2:	9209      	str	r2, [sp, #36]	; 0x24
 80122f4:	f89a 3000 	ldrb.w	r3, [sl]
 80122f8:	2b00      	cmp	r3, #0
 80122fa:	f000 80a2 	beq.w	8012442 <_vfiprintf_r+0x20e>
 80122fe:	2300      	movs	r3, #0
 8012300:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012304:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012308:	f10a 0a01 	add.w	sl, sl, #1
 801230c:	9304      	str	r3, [sp, #16]
 801230e:	9307      	str	r3, [sp, #28]
 8012310:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012314:	931a      	str	r3, [sp, #104]	; 0x68
 8012316:	4654      	mov	r4, sl
 8012318:	2205      	movs	r2, #5
 801231a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801231e:	4858      	ldr	r0, [pc, #352]	; (8012480 <_vfiprintf_r+0x24c>)
 8012320:	f7ed ff6e 	bl	8000200 <memchr>
 8012324:	9a04      	ldr	r2, [sp, #16]
 8012326:	b9d8      	cbnz	r0, 8012360 <_vfiprintf_r+0x12c>
 8012328:	06d1      	lsls	r1, r2, #27
 801232a:	bf44      	itt	mi
 801232c:	2320      	movmi	r3, #32
 801232e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012332:	0713      	lsls	r3, r2, #28
 8012334:	bf44      	itt	mi
 8012336:	232b      	movmi	r3, #43	; 0x2b
 8012338:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801233c:	f89a 3000 	ldrb.w	r3, [sl]
 8012340:	2b2a      	cmp	r3, #42	; 0x2a
 8012342:	d015      	beq.n	8012370 <_vfiprintf_r+0x13c>
 8012344:	9a07      	ldr	r2, [sp, #28]
 8012346:	4654      	mov	r4, sl
 8012348:	2000      	movs	r0, #0
 801234a:	f04f 0c0a 	mov.w	ip, #10
 801234e:	4621      	mov	r1, r4
 8012350:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012354:	3b30      	subs	r3, #48	; 0x30
 8012356:	2b09      	cmp	r3, #9
 8012358:	d94e      	bls.n	80123f8 <_vfiprintf_r+0x1c4>
 801235a:	b1b0      	cbz	r0, 801238a <_vfiprintf_r+0x156>
 801235c:	9207      	str	r2, [sp, #28]
 801235e:	e014      	b.n	801238a <_vfiprintf_r+0x156>
 8012360:	eba0 0308 	sub.w	r3, r0, r8
 8012364:	fa09 f303 	lsl.w	r3, r9, r3
 8012368:	4313      	orrs	r3, r2
 801236a:	9304      	str	r3, [sp, #16]
 801236c:	46a2      	mov	sl, r4
 801236e:	e7d2      	b.n	8012316 <_vfiprintf_r+0xe2>
 8012370:	9b03      	ldr	r3, [sp, #12]
 8012372:	1d19      	adds	r1, r3, #4
 8012374:	681b      	ldr	r3, [r3, #0]
 8012376:	9103      	str	r1, [sp, #12]
 8012378:	2b00      	cmp	r3, #0
 801237a:	bfbb      	ittet	lt
 801237c:	425b      	neglt	r3, r3
 801237e:	f042 0202 	orrlt.w	r2, r2, #2
 8012382:	9307      	strge	r3, [sp, #28]
 8012384:	9307      	strlt	r3, [sp, #28]
 8012386:	bfb8      	it	lt
 8012388:	9204      	strlt	r2, [sp, #16]
 801238a:	7823      	ldrb	r3, [r4, #0]
 801238c:	2b2e      	cmp	r3, #46	; 0x2e
 801238e:	d10c      	bne.n	80123aa <_vfiprintf_r+0x176>
 8012390:	7863      	ldrb	r3, [r4, #1]
 8012392:	2b2a      	cmp	r3, #42	; 0x2a
 8012394:	d135      	bne.n	8012402 <_vfiprintf_r+0x1ce>
 8012396:	9b03      	ldr	r3, [sp, #12]
 8012398:	1d1a      	adds	r2, r3, #4
 801239a:	681b      	ldr	r3, [r3, #0]
 801239c:	9203      	str	r2, [sp, #12]
 801239e:	2b00      	cmp	r3, #0
 80123a0:	bfb8      	it	lt
 80123a2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80123a6:	3402      	adds	r4, #2
 80123a8:	9305      	str	r3, [sp, #20]
 80123aa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8012490 <_vfiprintf_r+0x25c>
 80123ae:	7821      	ldrb	r1, [r4, #0]
 80123b0:	2203      	movs	r2, #3
 80123b2:	4650      	mov	r0, sl
 80123b4:	f7ed ff24 	bl	8000200 <memchr>
 80123b8:	b140      	cbz	r0, 80123cc <_vfiprintf_r+0x198>
 80123ba:	2340      	movs	r3, #64	; 0x40
 80123bc:	eba0 000a 	sub.w	r0, r0, sl
 80123c0:	fa03 f000 	lsl.w	r0, r3, r0
 80123c4:	9b04      	ldr	r3, [sp, #16]
 80123c6:	4303      	orrs	r3, r0
 80123c8:	3401      	adds	r4, #1
 80123ca:	9304      	str	r3, [sp, #16]
 80123cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80123d0:	482c      	ldr	r0, [pc, #176]	; (8012484 <_vfiprintf_r+0x250>)
 80123d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80123d6:	2206      	movs	r2, #6
 80123d8:	f7ed ff12 	bl	8000200 <memchr>
 80123dc:	2800      	cmp	r0, #0
 80123de:	d03f      	beq.n	8012460 <_vfiprintf_r+0x22c>
 80123e0:	4b29      	ldr	r3, [pc, #164]	; (8012488 <_vfiprintf_r+0x254>)
 80123e2:	bb1b      	cbnz	r3, 801242c <_vfiprintf_r+0x1f8>
 80123e4:	9b03      	ldr	r3, [sp, #12]
 80123e6:	3307      	adds	r3, #7
 80123e8:	f023 0307 	bic.w	r3, r3, #7
 80123ec:	3308      	adds	r3, #8
 80123ee:	9303      	str	r3, [sp, #12]
 80123f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80123f2:	443b      	add	r3, r7
 80123f4:	9309      	str	r3, [sp, #36]	; 0x24
 80123f6:	e767      	b.n	80122c8 <_vfiprintf_r+0x94>
 80123f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80123fc:	460c      	mov	r4, r1
 80123fe:	2001      	movs	r0, #1
 8012400:	e7a5      	b.n	801234e <_vfiprintf_r+0x11a>
 8012402:	2300      	movs	r3, #0
 8012404:	3401      	adds	r4, #1
 8012406:	9305      	str	r3, [sp, #20]
 8012408:	4619      	mov	r1, r3
 801240a:	f04f 0c0a 	mov.w	ip, #10
 801240e:	4620      	mov	r0, r4
 8012410:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012414:	3a30      	subs	r2, #48	; 0x30
 8012416:	2a09      	cmp	r2, #9
 8012418:	d903      	bls.n	8012422 <_vfiprintf_r+0x1ee>
 801241a:	2b00      	cmp	r3, #0
 801241c:	d0c5      	beq.n	80123aa <_vfiprintf_r+0x176>
 801241e:	9105      	str	r1, [sp, #20]
 8012420:	e7c3      	b.n	80123aa <_vfiprintf_r+0x176>
 8012422:	fb0c 2101 	mla	r1, ip, r1, r2
 8012426:	4604      	mov	r4, r0
 8012428:	2301      	movs	r3, #1
 801242a:	e7f0      	b.n	801240e <_vfiprintf_r+0x1da>
 801242c:	ab03      	add	r3, sp, #12
 801242e:	9300      	str	r3, [sp, #0]
 8012430:	462a      	mov	r2, r5
 8012432:	4b16      	ldr	r3, [pc, #88]	; (801248c <_vfiprintf_r+0x258>)
 8012434:	a904      	add	r1, sp, #16
 8012436:	4630      	mov	r0, r6
 8012438:	f3af 8000 	nop.w
 801243c:	4607      	mov	r7, r0
 801243e:	1c78      	adds	r0, r7, #1
 8012440:	d1d6      	bne.n	80123f0 <_vfiprintf_r+0x1bc>
 8012442:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012444:	07d9      	lsls	r1, r3, #31
 8012446:	d405      	bmi.n	8012454 <_vfiprintf_r+0x220>
 8012448:	89ab      	ldrh	r3, [r5, #12]
 801244a:	059a      	lsls	r2, r3, #22
 801244c:	d402      	bmi.n	8012454 <_vfiprintf_r+0x220>
 801244e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012450:	f7ff fcf9 	bl	8011e46 <__retarget_lock_release_recursive>
 8012454:	89ab      	ldrh	r3, [r5, #12]
 8012456:	065b      	lsls	r3, r3, #25
 8012458:	f53f af12 	bmi.w	8012280 <_vfiprintf_r+0x4c>
 801245c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801245e:	e711      	b.n	8012284 <_vfiprintf_r+0x50>
 8012460:	ab03      	add	r3, sp, #12
 8012462:	9300      	str	r3, [sp, #0]
 8012464:	462a      	mov	r2, r5
 8012466:	4b09      	ldr	r3, [pc, #36]	; (801248c <_vfiprintf_r+0x258>)
 8012468:	a904      	add	r1, sp, #16
 801246a:	4630      	mov	r0, r6
 801246c:	f000 f880 	bl	8012570 <_printf_i>
 8012470:	e7e4      	b.n	801243c <_vfiprintf_r+0x208>
 8012472:	bf00      	nop
 8012474:	08017ffc 	.word	0x08017ffc
 8012478:	0801801c 	.word	0x0801801c
 801247c:	08017fdc 	.word	0x08017fdc
 8012480:	0801803c 	.word	0x0801803c
 8012484:	08018046 	.word	0x08018046
 8012488:	00000000 	.word	0x00000000
 801248c:	0801220f 	.word	0x0801220f
 8012490:	08018042 	.word	0x08018042

08012494 <_printf_common>:
 8012494:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012498:	4616      	mov	r6, r2
 801249a:	4699      	mov	r9, r3
 801249c:	688a      	ldr	r2, [r1, #8]
 801249e:	690b      	ldr	r3, [r1, #16]
 80124a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80124a4:	4293      	cmp	r3, r2
 80124a6:	bfb8      	it	lt
 80124a8:	4613      	movlt	r3, r2
 80124aa:	6033      	str	r3, [r6, #0]
 80124ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80124b0:	4607      	mov	r7, r0
 80124b2:	460c      	mov	r4, r1
 80124b4:	b10a      	cbz	r2, 80124ba <_printf_common+0x26>
 80124b6:	3301      	adds	r3, #1
 80124b8:	6033      	str	r3, [r6, #0]
 80124ba:	6823      	ldr	r3, [r4, #0]
 80124bc:	0699      	lsls	r1, r3, #26
 80124be:	bf42      	ittt	mi
 80124c0:	6833      	ldrmi	r3, [r6, #0]
 80124c2:	3302      	addmi	r3, #2
 80124c4:	6033      	strmi	r3, [r6, #0]
 80124c6:	6825      	ldr	r5, [r4, #0]
 80124c8:	f015 0506 	ands.w	r5, r5, #6
 80124cc:	d106      	bne.n	80124dc <_printf_common+0x48>
 80124ce:	f104 0a19 	add.w	sl, r4, #25
 80124d2:	68e3      	ldr	r3, [r4, #12]
 80124d4:	6832      	ldr	r2, [r6, #0]
 80124d6:	1a9b      	subs	r3, r3, r2
 80124d8:	42ab      	cmp	r3, r5
 80124da:	dc26      	bgt.n	801252a <_printf_common+0x96>
 80124dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80124e0:	1e13      	subs	r3, r2, #0
 80124e2:	6822      	ldr	r2, [r4, #0]
 80124e4:	bf18      	it	ne
 80124e6:	2301      	movne	r3, #1
 80124e8:	0692      	lsls	r2, r2, #26
 80124ea:	d42b      	bmi.n	8012544 <_printf_common+0xb0>
 80124ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80124f0:	4649      	mov	r1, r9
 80124f2:	4638      	mov	r0, r7
 80124f4:	47c0      	blx	r8
 80124f6:	3001      	adds	r0, #1
 80124f8:	d01e      	beq.n	8012538 <_printf_common+0xa4>
 80124fa:	6823      	ldr	r3, [r4, #0]
 80124fc:	68e5      	ldr	r5, [r4, #12]
 80124fe:	6832      	ldr	r2, [r6, #0]
 8012500:	f003 0306 	and.w	r3, r3, #6
 8012504:	2b04      	cmp	r3, #4
 8012506:	bf08      	it	eq
 8012508:	1aad      	subeq	r5, r5, r2
 801250a:	68a3      	ldr	r3, [r4, #8]
 801250c:	6922      	ldr	r2, [r4, #16]
 801250e:	bf0c      	ite	eq
 8012510:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012514:	2500      	movne	r5, #0
 8012516:	4293      	cmp	r3, r2
 8012518:	bfc4      	itt	gt
 801251a:	1a9b      	subgt	r3, r3, r2
 801251c:	18ed      	addgt	r5, r5, r3
 801251e:	2600      	movs	r6, #0
 8012520:	341a      	adds	r4, #26
 8012522:	42b5      	cmp	r5, r6
 8012524:	d11a      	bne.n	801255c <_printf_common+0xc8>
 8012526:	2000      	movs	r0, #0
 8012528:	e008      	b.n	801253c <_printf_common+0xa8>
 801252a:	2301      	movs	r3, #1
 801252c:	4652      	mov	r2, sl
 801252e:	4649      	mov	r1, r9
 8012530:	4638      	mov	r0, r7
 8012532:	47c0      	blx	r8
 8012534:	3001      	adds	r0, #1
 8012536:	d103      	bne.n	8012540 <_printf_common+0xac>
 8012538:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801253c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012540:	3501      	adds	r5, #1
 8012542:	e7c6      	b.n	80124d2 <_printf_common+0x3e>
 8012544:	18e1      	adds	r1, r4, r3
 8012546:	1c5a      	adds	r2, r3, #1
 8012548:	2030      	movs	r0, #48	; 0x30
 801254a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801254e:	4422      	add	r2, r4
 8012550:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012554:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012558:	3302      	adds	r3, #2
 801255a:	e7c7      	b.n	80124ec <_printf_common+0x58>
 801255c:	2301      	movs	r3, #1
 801255e:	4622      	mov	r2, r4
 8012560:	4649      	mov	r1, r9
 8012562:	4638      	mov	r0, r7
 8012564:	47c0      	blx	r8
 8012566:	3001      	adds	r0, #1
 8012568:	d0e6      	beq.n	8012538 <_printf_common+0xa4>
 801256a:	3601      	adds	r6, #1
 801256c:	e7d9      	b.n	8012522 <_printf_common+0x8e>
	...

08012570 <_printf_i>:
 8012570:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012574:	460c      	mov	r4, r1
 8012576:	4691      	mov	r9, r2
 8012578:	7e27      	ldrb	r7, [r4, #24]
 801257a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801257c:	2f78      	cmp	r7, #120	; 0x78
 801257e:	4680      	mov	r8, r0
 8012580:	469a      	mov	sl, r3
 8012582:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012586:	d807      	bhi.n	8012598 <_printf_i+0x28>
 8012588:	2f62      	cmp	r7, #98	; 0x62
 801258a:	d80a      	bhi.n	80125a2 <_printf_i+0x32>
 801258c:	2f00      	cmp	r7, #0
 801258e:	f000 80d8 	beq.w	8012742 <_printf_i+0x1d2>
 8012592:	2f58      	cmp	r7, #88	; 0x58
 8012594:	f000 80a3 	beq.w	80126de <_printf_i+0x16e>
 8012598:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801259c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80125a0:	e03a      	b.n	8012618 <_printf_i+0xa8>
 80125a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80125a6:	2b15      	cmp	r3, #21
 80125a8:	d8f6      	bhi.n	8012598 <_printf_i+0x28>
 80125aa:	a001      	add	r0, pc, #4	; (adr r0, 80125b0 <_printf_i+0x40>)
 80125ac:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80125b0:	08012609 	.word	0x08012609
 80125b4:	0801261d 	.word	0x0801261d
 80125b8:	08012599 	.word	0x08012599
 80125bc:	08012599 	.word	0x08012599
 80125c0:	08012599 	.word	0x08012599
 80125c4:	08012599 	.word	0x08012599
 80125c8:	0801261d 	.word	0x0801261d
 80125cc:	08012599 	.word	0x08012599
 80125d0:	08012599 	.word	0x08012599
 80125d4:	08012599 	.word	0x08012599
 80125d8:	08012599 	.word	0x08012599
 80125dc:	08012729 	.word	0x08012729
 80125e0:	0801264d 	.word	0x0801264d
 80125e4:	0801270b 	.word	0x0801270b
 80125e8:	08012599 	.word	0x08012599
 80125ec:	08012599 	.word	0x08012599
 80125f0:	0801274b 	.word	0x0801274b
 80125f4:	08012599 	.word	0x08012599
 80125f8:	0801264d 	.word	0x0801264d
 80125fc:	08012599 	.word	0x08012599
 8012600:	08012599 	.word	0x08012599
 8012604:	08012713 	.word	0x08012713
 8012608:	680b      	ldr	r3, [r1, #0]
 801260a:	1d1a      	adds	r2, r3, #4
 801260c:	681b      	ldr	r3, [r3, #0]
 801260e:	600a      	str	r2, [r1, #0]
 8012610:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8012614:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012618:	2301      	movs	r3, #1
 801261a:	e0a3      	b.n	8012764 <_printf_i+0x1f4>
 801261c:	6825      	ldr	r5, [r4, #0]
 801261e:	6808      	ldr	r0, [r1, #0]
 8012620:	062e      	lsls	r6, r5, #24
 8012622:	f100 0304 	add.w	r3, r0, #4
 8012626:	d50a      	bpl.n	801263e <_printf_i+0xce>
 8012628:	6805      	ldr	r5, [r0, #0]
 801262a:	600b      	str	r3, [r1, #0]
 801262c:	2d00      	cmp	r5, #0
 801262e:	da03      	bge.n	8012638 <_printf_i+0xc8>
 8012630:	232d      	movs	r3, #45	; 0x2d
 8012632:	426d      	negs	r5, r5
 8012634:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012638:	485e      	ldr	r0, [pc, #376]	; (80127b4 <_printf_i+0x244>)
 801263a:	230a      	movs	r3, #10
 801263c:	e019      	b.n	8012672 <_printf_i+0x102>
 801263e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8012642:	6805      	ldr	r5, [r0, #0]
 8012644:	600b      	str	r3, [r1, #0]
 8012646:	bf18      	it	ne
 8012648:	b22d      	sxthne	r5, r5
 801264a:	e7ef      	b.n	801262c <_printf_i+0xbc>
 801264c:	680b      	ldr	r3, [r1, #0]
 801264e:	6825      	ldr	r5, [r4, #0]
 8012650:	1d18      	adds	r0, r3, #4
 8012652:	6008      	str	r0, [r1, #0]
 8012654:	0628      	lsls	r0, r5, #24
 8012656:	d501      	bpl.n	801265c <_printf_i+0xec>
 8012658:	681d      	ldr	r5, [r3, #0]
 801265a:	e002      	b.n	8012662 <_printf_i+0xf2>
 801265c:	0669      	lsls	r1, r5, #25
 801265e:	d5fb      	bpl.n	8012658 <_printf_i+0xe8>
 8012660:	881d      	ldrh	r5, [r3, #0]
 8012662:	4854      	ldr	r0, [pc, #336]	; (80127b4 <_printf_i+0x244>)
 8012664:	2f6f      	cmp	r7, #111	; 0x6f
 8012666:	bf0c      	ite	eq
 8012668:	2308      	moveq	r3, #8
 801266a:	230a      	movne	r3, #10
 801266c:	2100      	movs	r1, #0
 801266e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012672:	6866      	ldr	r6, [r4, #4]
 8012674:	60a6      	str	r6, [r4, #8]
 8012676:	2e00      	cmp	r6, #0
 8012678:	bfa2      	ittt	ge
 801267a:	6821      	ldrge	r1, [r4, #0]
 801267c:	f021 0104 	bicge.w	r1, r1, #4
 8012680:	6021      	strge	r1, [r4, #0]
 8012682:	b90d      	cbnz	r5, 8012688 <_printf_i+0x118>
 8012684:	2e00      	cmp	r6, #0
 8012686:	d04d      	beq.n	8012724 <_printf_i+0x1b4>
 8012688:	4616      	mov	r6, r2
 801268a:	fbb5 f1f3 	udiv	r1, r5, r3
 801268e:	fb03 5711 	mls	r7, r3, r1, r5
 8012692:	5dc7      	ldrb	r7, [r0, r7]
 8012694:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8012698:	462f      	mov	r7, r5
 801269a:	42bb      	cmp	r3, r7
 801269c:	460d      	mov	r5, r1
 801269e:	d9f4      	bls.n	801268a <_printf_i+0x11a>
 80126a0:	2b08      	cmp	r3, #8
 80126a2:	d10b      	bne.n	80126bc <_printf_i+0x14c>
 80126a4:	6823      	ldr	r3, [r4, #0]
 80126a6:	07df      	lsls	r7, r3, #31
 80126a8:	d508      	bpl.n	80126bc <_printf_i+0x14c>
 80126aa:	6923      	ldr	r3, [r4, #16]
 80126ac:	6861      	ldr	r1, [r4, #4]
 80126ae:	4299      	cmp	r1, r3
 80126b0:	bfde      	ittt	le
 80126b2:	2330      	movle	r3, #48	; 0x30
 80126b4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80126b8:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80126bc:	1b92      	subs	r2, r2, r6
 80126be:	6122      	str	r2, [r4, #16]
 80126c0:	f8cd a000 	str.w	sl, [sp]
 80126c4:	464b      	mov	r3, r9
 80126c6:	aa03      	add	r2, sp, #12
 80126c8:	4621      	mov	r1, r4
 80126ca:	4640      	mov	r0, r8
 80126cc:	f7ff fee2 	bl	8012494 <_printf_common>
 80126d0:	3001      	adds	r0, #1
 80126d2:	d14c      	bne.n	801276e <_printf_i+0x1fe>
 80126d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80126d8:	b004      	add	sp, #16
 80126da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80126de:	4835      	ldr	r0, [pc, #212]	; (80127b4 <_printf_i+0x244>)
 80126e0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80126e4:	6823      	ldr	r3, [r4, #0]
 80126e6:	680e      	ldr	r6, [r1, #0]
 80126e8:	061f      	lsls	r7, r3, #24
 80126ea:	f856 5b04 	ldr.w	r5, [r6], #4
 80126ee:	600e      	str	r6, [r1, #0]
 80126f0:	d514      	bpl.n	801271c <_printf_i+0x1ac>
 80126f2:	07d9      	lsls	r1, r3, #31
 80126f4:	bf44      	itt	mi
 80126f6:	f043 0320 	orrmi.w	r3, r3, #32
 80126fa:	6023      	strmi	r3, [r4, #0]
 80126fc:	b91d      	cbnz	r5, 8012706 <_printf_i+0x196>
 80126fe:	6823      	ldr	r3, [r4, #0]
 8012700:	f023 0320 	bic.w	r3, r3, #32
 8012704:	6023      	str	r3, [r4, #0]
 8012706:	2310      	movs	r3, #16
 8012708:	e7b0      	b.n	801266c <_printf_i+0xfc>
 801270a:	6823      	ldr	r3, [r4, #0]
 801270c:	f043 0320 	orr.w	r3, r3, #32
 8012710:	6023      	str	r3, [r4, #0]
 8012712:	2378      	movs	r3, #120	; 0x78
 8012714:	4828      	ldr	r0, [pc, #160]	; (80127b8 <_printf_i+0x248>)
 8012716:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801271a:	e7e3      	b.n	80126e4 <_printf_i+0x174>
 801271c:	065e      	lsls	r6, r3, #25
 801271e:	bf48      	it	mi
 8012720:	b2ad      	uxthmi	r5, r5
 8012722:	e7e6      	b.n	80126f2 <_printf_i+0x182>
 8012724:	4616      	mov	r6, r2
 8012726:	e7bb      	b.n	80126a0 <_printf_i+0x130>
 8012728:	680b      	ldr	r3, [r1, #0]
 801272a:	6826      	ldr	r6, [r4, #0]
 801272c:	6960      	ldr	r0, [r4, #20]
 801272e:	1d1d      	adds	r5, r3, #4
 8012730:	600d      	str	r5, [r1, #0]
 8012732:	0635      	lsls	r5, r6, #24
 8012734:	681b      	ldr	r3, [r3, #0]
 8012736:	d501      	bpl.n	801273c <_printf_i+0x1cc>
 8012738:	6018      	str	r0, [r3, #0]
 801273a:	e002      	b.n	8012742 <_printf_i+0x1d2>
 801273c:	0671      	lsls	r1, r6, #25
 801273e:	d5fb      	bpl.n	8012738 <_printf_i+0x1c8>
 8012740:	8018      	strh	r0, [r3, #0]
 8012742:	2300      	movs	r3, #0
 8012744:	6123      	str	r3, [r4, #16]
 8012746:	4616      	mov	r6, r2
 8012748:	e7ba      	b.n	80126c0 <_printf_i+0x150>
 801274a:	680b      	ldr	r3, [r1, #0]
 801274c:	1d1a      	adds	r2, r3, #4
 801274e:	600a      	str	r2, [r1, #0]
 8012750:	681e      	ldr	r6, [r3, #0]
 8012752:	6862      	ldr	r2, [r4, #4]
 8012754:	2100      	movs	r1, #0
 8012756:	4630      	mov	r0, r6
 8012758:	f7ed fd52 	bl	8000200 <memchr>
 801275c:	b108      	cbz	r0, 8012762 <_printf_i+0x1f2>
 801275e:	1b80      	subs	r0, r0, r6
 8012760:	6060      	str	r0, [r4, #4]
 8012762:	6863      	ldr	r3, [r4, #4]
 8012764:	6123      	str	r3, [r4, #16]
 8012766:	2300      	movs	r3, #0
 8012768:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801276c:	e7a8      	b.n	80126c0 <_printf_i+0x150>
 801276e:	6923      	ldr	r3, [r4, #16]
 8012770:	4632      	mov	r2, r6
 8012772:	4649      	mov	r1, r9
 8012774:	4640      	mov	r0, r8
 8012776:	47d0      	blx	sl
 8012778:	3001      	adds	r0, #1
 801277a:	d0ab      	beq.n	80126d4 <_printf_i+0x164>
 801277c:	6823      	ldr	r3, [r4, #0]
 801277e:	079b      	lsls	r3, r3, #30
 8012780:	d413      	bmi.n	80127aa <_printf_i+0x23a>
 8012782:	68e0      	ldr	r0, [r4, #12]
 8012784:	9b03      	ldr	r3, [sp, #12]
 8012786:	4298      	cmp	r0, r3
 8012788:	bfb8      	it	lt
 801278a:	4618      	movlt	r0, r3
 801278c:	e7a4      	b.n	80126d8 <_printf_i+0x168>
 801278e:	2301      	movs	r3, #1
 8012790:	4632      	mov	r2, r6
 8012792:	4649      	mov	r1, r9
 8012794:	4640      	mov	r0, r8
 8012796:	47d0      	blx	sl
 8012798:	3001      	adds	r0, #1
 801279a:	d09b      	beq.n	80126d4 <_printf_i+0x164>
 801279c:	3501      	adds	r5, #1
 801279e:	68e3      	ldr	r3, [r4, #12]
 80127a0:	9903      	ldr	r1, [sp, #12]
 80127a2:	1a5b      	subs	r3, r3, r1
 80127a4:	42ab      	cmp	r3, r5
 80127a6:	dcf2      	bgt.n	801278e <_printf_i+0x21e>
 80127a8:	e7eb      	b.n	8012782 <_printf_i+0x212>
 80127aa:	2500      	movs	r5, #0
 80127ac:	f104 0619 	add.w	r6, r4, #25
 80127b0:	e7f5      	b.n	801279e <_printf_i+0x22e>
 80127b2:	bf00      	nop
 80127b4:	0801804d 	.word	0x0801804d
 80127b8:	0801805e 	.word	0x0801805e

080127bc <__sread>:
 80127bc:	b510      	push	{r4, lr}
 80127be:	460c      	mov	r4, r1
 80127c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80127c4:	f000 f8c2 	bl	801294c <_read_r>
 80127c8:	2800      	cmp	r0, #0
 80127ca:	bfab      	itete	ge
 80127cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80127ce:	89a3      	ldrhlt	r3, [r4, #12]
 80127d0:	181b      	addge	r3, r3, r0
 80127d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80127d6:	bfac      	ite	ge
 80127d8:	6563      	strge	r3, [r4, #84]	; 0x54
 80127da:	81a3      	strhlt	r3, [r4, #12]
 80127dc:	bd10      	pop	{r4, pc}

080127de <__swrite>:
 80127de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80127e2:	461f      	mov	r7, r3
 80127e4:	898b      	ldrh	r3, [r1, #12]
 80127e6:	05db      	lsls	r3, r3, #23
 80127e8:	4605      	mov	r5, r0
 80127ea:	460c      	mov	r4, r1
 80127ec:	4616      	mov	r6, r2
 80127ee:	d505      	bpl.n	80127fc <__swrite+0x1e>
 80127f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80127f4:	2302      	movs	r3, #2
 80127f6:	2200      	movs	r2, #0
 80127f8:	f000 f870 	bl	80128dc <_lseek_r>
 80127fc:	89a3      	ldrh	r3, [r4, #12]
 80127fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012802:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012806:	81a3      	strh	r3, [r4, #12]
 8012808:	4632      	mov	r2, r6
 801280a:	463b      	mov	r3, r7
 801280c:	4628      	mov	r0, r5
 801280e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012812:	f000 b817 	b.w	8012844 <_write_r>

08012816 <__sseek>:
 8012816:	b510      	push	{r4, lr}
 8012818:	460c      	mov	r4, r1
 801281a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801281e:	f000 f85d 	bl	80128dc <_lseek_r>
 8012822:	1c43      	adds	r3, r0, #1
 8012824:	89a3      	ldrh	r3, [r4, #12]
 8012826:	bf15      	itete	ne
 8012828:	6560      	strne	r0, [r4, #84]	; 0x54
 801282a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801282e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012832:	81a3      	strheq	r3, [r4, #12]
 8012834:	bf18      	it	ne
 8012836:	81a3      	strhne	r3, [r4, #12]
 8012838:	bd10      	pop	{r4, pc}

0801283a <__sclose>:
 801283a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801283e:	f000 b81b 	b.w	8012878 <_close_r>
	...

08012844 <_write_r>:
 8012844:	b538      	push	{r3, r4, r5, lr}
 8012846:	4d07      	ldr	r5, [pc, #28]	; (8012864 <_write_r+0x20>)
 8012848:	4604      	mov	r4, r0
 801284a:	4608      	mov	r0, r1
 801284c:	4611      	mov	r1, r2
 801284e:	2200      	movs	r2, #0
 8012850:	602a      	str	r2, [r5, #0]
 8012852:	461a      	mov	r2, r3
 8012854:	f7ee fb22 	bl	8000e9c <_write>
 8012858:	1c43      	adds	r3, r0, #1
 801285a:	d102      	bne.n	8012862 <_write_r+0x1e>
 801285c:	682b      	ldr	r3, [r5, #0]
 801285e:	b103      	cbz	r3, 8012862 <_write_r+0x1e>
 8012860:	6023      	str	r3, [r4, #0]
 8012862:	bd38      	pop	{r3, r4, r5, pc}
 8012864:	2000d3fc 	.word	0x2000d3fc

08012868 <abort>:
 8012868:	b508      	push	{r3, lr}
 801286a:	2006      	movs	r0, #6
 801286c:	f000 f8a8 	bl	80129c0 <raise>
 8012870:	2001      	movs	r0, #1
 8012872:	f7ee ffed 	bl	8001850 <_exit>
	...

08012878 <_close_r>:
 8012878:	b538      	push	{r3, r4, r5, lr}
 801287a:	4d06      	ldr	r5, [pc, #24]	; (8012894 <_close_r+0x1c>)
 801287c:	2300      	movs	r3, #0
 801287e:	4604      	mov	r4, r0
 8012880:	4608      	mov	r0, r1
 8012882:	602b      	str	r3, [r5, #0]
 8012884:	f7ef f80b 	bl	800189e <_close>
 8012888:	1c43      	adds	r3, r0, #1
 801288a:	d102      	bne.n	8012892 <_close_r+0x1a>
 801288c:	682b      	ldr	r3, [r5, #0]
 801288e:	b103      	cbz	r3, 8012892 <_close_r+0x1a>
 8012890:	6023      	str	r3, [r4, #0]
 8012892:	bd38      	pop	{r3, r4, r5, pc}
 8012894:	2000d3fc 	.word	0x2000d3fc

08012898 <_fstat_r>:
 8012898:	b538      	push	{r3, r4, r5, lr}
 801289a:	4d07      	ldr	r5, [pc, #28]	; (80128b8 <_fstat_r+0x20>)
 801289c:	2300      	movs	r3, #0
 801289e:	4604      	mov	r4, r0
 80128a0:	4608      	mov	r0, r1
 80128a2:	4611      	mov	r1, r2
 80128a4:	602b      	str	r3, [r5, #0]
 80128a6:	f7ef f806 	bl	80018b6 <_fstat>
 80128aa:	1c43      	adds	r3, r0, #1
 80128ac:	d102      	bne.n	80128b4 <_fstat_r+0x1c>
 80128ae:	682b      	ldr	r3, [r5, #0]
 80128b0:	b103      	cbz	r3, 80128b4 <_fstat_r+0x1c>
 80128b2:	6023      	str	r3, [r4, #0]
 80128b4:	bd38      	pop	{r3, r4, r5, pc}
 80128b6:	bf00      	nop
 80128b8:	2000d3fc 	.word	0x2000d3fc

080128bc <_isatty_r>:
 80128bc:	b538      	push	{r3, r4, r5, lr}
 80128be:	4d06      	ldr	r5, [pc, #24]	; (80128d8 <_isatty_r+0x1c>)
 80128c0:	2300      	movs	r3, #0
 80128c2:	4604      	mov	r4, r0
 80128c4:	4608      	mov	r0, r1
 80128c6:	602b      	str	r3, [r5, #0]
 80128c8:	f7ef f805 	bl	80018d6 <_isatty>
 80128cc:	1c43      	adds	r3, r0, #1
 80128ce:	d102      	bne.n	80128d6 <_isatty_r+0x1a>
 80128d0:	682b      	ldr	r3, [r5, #0]
 80128d2:	b103      	cbz	r3, 80128d6 <_isatty_r+0x1a>
 80128d4:	6023      	str	r3, [r4, #0]
 80128d6:	bd38      	pop	{r3, r4, r5, pc}
 80128d8:	2000d3fc 	.word	0x2000d3fc

080128dc <_lseek_r>:
 80128dc:	b538      	push	{r3, r4, r5, lr}
 80128de:	4d07      	ldr	r5, [pc, #28]	; (80128fc <_lseek_r+0x20>)
 80128e0:	4604      	mov	r4, r0
 80128e2:	4608      	mov	r0, r1
 80128e4:	4611      	mov	r1, r2
 80128e6:	2200      	movs	r2, #0
 80128e8:	602a      	str	r2, [r5, #0]
 80128ea:	461a      	mov	r2, r3
 80128ec:	f7ee fffe 	bl	80018ec <_lseek>
 80128f0:	1c43      	adds	r3, r0, #1
 80128f2:	d102      	bne.n	80128fa <_lseek_r+0x1e>
 80128f4:	682b      	ldr	r3, [r5, #0]
 80128f6:	b103      	cbz	r3, 80128fa <_lseek_r+0x1e>
 80128f8:	6023      	str	r3, [r4, #0]
 80128fa:	bd38      	pop	{r3, r4, r5, pc}
 80128fc:	2000d3fc 	.word	0x2000d3fc

08012900 <_realloc_r>:
 8012900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012902:	4607      	mov	r7, r0
 8012904:	4614      	mov	r4, r2
 8012906:	460e      	mov	r6, r1
 8012908:	b921      	cbnz	r1, 8012914 <_realloc_r+0x14>
 801290a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801290e:	4611      	mov	r1, r2
 8012910:	f7fe bd44 	b.w	801139c <_malloc_r>
 8012914:	b922      	cbnz	r2, 8012920 <_realloc_r+0x20>
 8012916:	f7fe fcf1 	bl	80112fc <_free_r>
 801291a:	4625      	mov	r5, r4
 801291c:	4628      	mov	r0, r5
 801291e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012920:	f000 f86a 	bl	80129f8 <_malloc_usable_size_r>
 8012924:	42a0      	cmp	r0, r4
 8012926:	d20f      	bcs.n	8012948 <_realloc_r+0x48>
 8012928:	4621      	mov	r1, r4
 801292a:	4638      	mov	r0, r7
 801292c:	f7fe fd36 	bl	801139c <_malloc_r>
 8012930:	4605      	mov	r5, r0
 8012932:	2800      	cmp	r0, #0
 8012934:	d0f2      	beq.n	801291c <_realloc_r+0x1c>
 8012936:	4631      	mov	r1, r6
 8012938:	4622      	mov	r2, r4
 801293a:	f7fe fcaf 	bl	801129c <memcpy>
 801293e:	4631      	mov	r1, r6
 8012940:	4638      	mov	r0, r7
 8012942:	f7fe fcdb 	bl	80112fc <_free_r>
 8012946:	e7e9      	b.n	801291c <_realloc_r+0x1c>
 8012948:	4635      	mov	r5, r6
 801294a:	e7e7      	b.n	801291c <_realloc_r+0x1c>

0801294c <_read_r>:
 801294c:	b538      	push	{r3, r4, r5, lr}
 801294e:	4d07      	ldr	r5, [pc, #28]	; (801296c <_read_r+0x20>)
 8012950:	4604      	mov	r4, r0
 8012952:	4608      	mov	r0, r1
 8012954:	4611      	mov	r1, r2
 8012956:	2200      	movs	r2, #0
 8012958:	602a      	str	r2, [r5, #0]
 801295a:	461a      	mov	r2, r3
 801295c:	f7ee ff82 	bl	8001864 <_read>
 8012960:	1c43      	adds	r3, r0, #1
 8012962:	d102      	bne.n	801296a <_read_r+0x1e>
 8012964:	682b      	ldr	r3, [r5, #0]
 8012966:	b103      	cbz	r3, 801296a <_read_r+0x1e>
 8012968:	6023      	str	r3, [r4, #0]
 801296a:	bd38      	pop	{r3, r4, r5, pc}
 801296c:	2000d3fc 	.word	0x2000d3fc

08012970 <_raise_r>:
 8012970:	291f      	cmp	r1, #31
 8012972:	b538      	push	{r3, r4, r5, lr}
 8012974:	4604      	mov	r4, r0
 8012976:	460d      	mov	r5, r1
 8012978:	d904      	bls.n	8012984 <_raise_r+0x14>
 801297a:	2316      	movs	r3, #22
 801297c:	6003      	str	r3, [r0, #0]
 801297e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012982:	bd38      	pop	{r3, r4, r5, pc}
 8012984:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8012986:	b112      	cbz	r2, 801298e <_raise_r+0x1e>
 8012988:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801298c:	b94b      	cbnz	r3, 80129a2 <_raise_r+0x32>
 801298e:	4620      	mov	r0, r4
 8012990:	f000 f830 	bl	80129f4 <_getpid_r>
 8012994:	462a      	mov	r2, r5
 8012996:	4601      	mov	r1, r0
 8012998:	4620      	mov	r0, r4
 801299a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801299e:	f000 b817 	b.w	80129d0 <_kill_r>
 80129a2:	2b01      	cmp	r3, #1
 80129a4:	d00a      	beq.n	80129bc <_raise_r+0x4c>
 80129a6:	1c59      	adds	r1, r3, #1
 80129a8:	d103      	bne.n	80129b2 <_raise_r+0x42>
 80129aa:	2316      	movs	r3, #22
 80129ac:	6003      	str	r3, [r0, #0]
 80129ae:	2001      	movs	r0, #1
 80129b0:	e7e7      	b.n	8012982 <_raise_r+0x12>
 80129b2:	2400      	movs	r4, #0
 80129b4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80129b8:	4628      	mov	r0, r5
 80129ba:	4798      	blx	r3
 80129bc:	2000      	movs	r0, #0
 80129be:	e7e0      	b.n	8012982 <_raise_r+0x12>

080129c0 <raise>:
 80129c0:	4b02      	ldr	r3, [pc, #8]	; (80129cc <raise+0xc>)
 80129c2:	4601      	mov	r1, r0
 80129c4:	6818      	ldr	r0, [r3, #0]
 80129c6:	f7ff bfd3 	b.w	8012970 <_raise_r>
 80129ca:	bf00      	nop
 80129cc:	20000030 	.word	0x20000030

080129d0 <_kill_r>:
 80129d0:	b538      	push	{r3, r4, r5, lr}
 80129d2:	4d07      	ldr	r5, [pc, #28]	; (80129f0 <_kill_r+0x20>)
 80129d4:	2300      	movs	r3, #0
 80129d6:	4604      	mov	r4, r0
 80129d8:	4608      	mov	r0, r1
 80129da:	4611      	mov	r1, r2
 80129dc:	602b      	str	r3, [r5, #0]
 80129de:	f7ee ff25 	bl	800182c <_kill>
 80129e2:	1c43      	adds	r3, r0, #1
 80129e4:	d102      	bne.n	80129ec <_kill_r+0x1c>
 80129e6:	682b      	ldr	r3, [r5, #0]
 80129e8:	b103      	cbz	r3, 80129ec <_kill_r+0x1c>
 80129ea:	6023      	str	r3, [r4, #0]
 80129ec:	bd38      	pop	{r3, r4, r5, pc}
 80129ee:	bf00      	nop
 80129f0:	2000d3fc 	.word	0x2000d3fc

080129f4 <_getpid_r>:
 80129f4:	f7ee bf12 	b.w	800181c <_getpid>

080129f8 <_malloc_usable_size_r>:
 80129f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80129fc:	1f18      	subs	r0, r3, #4
 80129fe:	2b00      	cmp	r3, #0
 8012a00:	bfbc      	itt	lt
 8012a02:	580b      	ldrlt	r3, [r1, r0]
 8012a04:	18c0      	addlt	r0, r0, r3
 8012a06:	4770      	bx	lr

08012a08 <_init>:
 8012a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012a0a:	bf00      	nop
 8012a0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012a0e:	bc08      	pop	{r3}
 8012a10:	469e      	mov	lr, r3
 8012a12:	4770      	bx	lr

08012a14 <_fini>:
 8012a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012a16:	bf00      	nop
 8012a18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012a1a:	bc08      	pop	{r3}
 8012a1c:	469e      	mov	lr, r3
 8012a1e:	4770      	bx	lr
